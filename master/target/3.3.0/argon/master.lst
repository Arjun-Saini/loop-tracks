
/Users/sainihome/Documents/GitHub/loop-tracks/master/target/3.3.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b510  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bf530  000bf530  0000f530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bf554  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  200350a0  000bf558  000250a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00009558  20035298  20035298  00035298  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bf750  000bf750  0002f750  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bf778  000bf778  0002f778  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00152137  00000000  00000000  0002f77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00012b69  00000000  00000000  001818b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004cdef  00000000  00000000  0019441c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003110  00000000  00000000  001e120b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d930  00000000  00000000  001e431b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037a45  00000000  00000000  001f1c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00046978  00000000  00000000  00229690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00159cae  00000000  00000000  00270008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a94c  00000000  00000000  003c9cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f008 faa1 	bl	bc578 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f008 fac3 	bl	bc5c8 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	200350a0 	.word	0x200350a0
   b404c:	000bf558 	.word	0x000bf558
   b4050:	20035298 	.word	0x20035298
   b4054:	20035298 	.word	0x20035298
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f007 fa07 	bl	bb474 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bf504 	.word	0x000bf504
   b4080:	000bf528 	.word	0x000bf528

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f002 be4c 	b.w	b6d20 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f002 ffbd 	bl	b7008 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f007 b9a7 	b.w	bb3e4 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f004 bf09 	b.w	b8eac <malloc>

000b409a <_Znaj>:
   b409a:	f004 bf07 	b.w	b8eac <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f004 bf0d 	b.w	b8ebc <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f004 bf0b 	b.w	b8ebc <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40b8:	b510      	push	{r4, lr}
   b40ba:	4b03      	ldr	r3, [pc, #12]	; (b40c8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   b40bc:	6003      	str	r3, [r0, #0]
   b40be:	4604      	mov	r4, r0
   b40c0:	f003 fe9c 	bl	b7dfc <_ZN10JsonParserD1Ev>
   b40c4:	4620      	mov	r0, r4
   b40c6:	bd10      	pop	{r4, pc}
   b40c8:	000bea90 	.word	0x000bea90

000b40cc <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   b40cc:	b510      	push	{r4, lr}
   b40ce:	4604      	mov	r4, r0
   b40d0:	f7ff fff2 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f246 51bc 	movw	r1, #26044	; 0x65bc
   b40da:	f7ff ffe2 	bl	b40a2 <_ZdlPvj>
   b40de:	4620      	mov	r0, r4
   b40e0:	bd10      	pop	{r4, pc}
	...

000b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   b40e4:	b508      	push	{r3, lr}
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b40e6:	4603      	mov	r3, r0
   b40e8:	b150      	cbz	r0, b4100 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x1c>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
	if (__n > this->_M_max_size())
   b40ea:	4a06      	ldr	r2, [pc, #24]	; (b4104 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x20>)
   b40ec:	4290      	cmp	r0, r2
   b40ee:	d901      	bls.n	b40f4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b40f0:	f007 fa5a 	bl	bb5a8 <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b40f4:	200c      	movs	r0, #12
   b40f6:	4358      	muls	r0, r3
      }
   b40f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b40fc:	f7ff bfcb 	b.w	b4096 <_Znwj>
   b4100:	bd08      	pop	{r3, pc}
   b4102:	bf00      	nop
   b4104:	0aaaaaaa 	.word	0x0aaaaaaa

000b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>:

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4108:	f100 0308 	add.w	r3, r0, #8
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b410c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b410e:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b4110:	6003      	str	r3, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b4112:	460d      	mov	r5, r1
   b4114:	b1d9      	cbz	r1, b414e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x46>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b4116:	4608      	mov	r0, r1
   b4118:	f008 fa9e 	bl	bc658 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b411c:	280f      	cmp	r0, #15
   b411e:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4122:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4124:	d907      	bls.n	b4136 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b4126:	2200      	movs	r2, #0
   b4128:	a901      	add	r1, sp, #4
   b412a:	4620      	mov	r0, r4
   b412c:	f007 fa52 	bl	bb5d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4130:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4132:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4134:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4136:	4632      	mov	r2, r6
   b4138:	4629      	mov	r1, r5
   b413a:	6820      	ldr	r0, [r4, #0]
   b413c:	f007 fa85 	bl	bb64a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b4140:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b4142:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4144:	6063      	str	r3, [r4, #4]
   b4146:	2100      	movs	r1, #0
   b4148:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b414a:	b002      	add	sp, #8
   b414c:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b414e:	4801      	ldr	r0, [pc, #4]	; (b4154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x4c>)
   b4150:	f007 fa2d 	bl	bb5ae <_ZSt19__throw_logic_errorPKc>
   b4154:	000be6dc 	.word	0x000be6dc

000b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4158:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b415a:	4603      	mov	r3, r0
   b415c:	b150      	cbz	r0, b4174 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b415e:	4a06      	ldr	r2, [pc, #24]	; (b4178 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x20>)
   b4160:	4290      	cmp	r0, r2
   b4162:	d901      	bls.n	b4168 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4164:	f007 fa20 	bl	bb5a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4168:	206c      	movs	r0, #108	; 0x6c
   b416a:	4358      	muls	r0, r3
      }
   b416c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4170:	f7ff bf91 	b.w	b4096 <_Znwj>
   b4174:	bd08      	pop	{r3, pc}
   b4176:	bf00      	nop
   b4178:	012f684b 	.word	0x012f684b

000b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b417c:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b417e:	4603      	mov	r3, r0
   b4180:	b150      	cbz	r0, b4198 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b4182:	4a06      	ldr	r2, [pc, #24]	; (b419c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x20>)
   b4184:	4290      	cmp	r0, r2
   b4186:	d901      	bls.n	b418c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4188:	f007 fa0e 	bl	bb5a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b418c:	2018      	movs	r0, #24
   b418e:	4358      	muls	r0, r3
      }
   b4190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4194:	f7ff bf7f 	b.w	b4096 <_Znwj>
   b4198:	bd08      	pop	{r3, pc}
   b419a:	bf00      	nop
   b419c:	05555555 	.word	0x05555555

000b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41a0:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41a2:	b148      	cbz	r0, b41b8 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41a4:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b41a8:	d301      	bcc.n	b41ae <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41aa:	f007 f9fd 	bl	bb5a8 <_ZSt17__throw_bad_allocv>
      }
   b41ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41b2:	0080      	lsls	r0, r0, #2
   b41b4:	f7ff bf6f 	b.w	b4096 <_Znwj>
   b41b8:	bd08      	pop	{r3, pc}

000b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41ba:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41bc:	b148      	cbz	r0, b41d2 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41be:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   b41c2:	d301      	bcc.n	b41c8 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41c4:	f007 f9f0 	bl	bb5a8 <_ZSt17__throw_bad_allocv>
      }
   b41c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41cc:	00c0      	lsls	r0, r0, #3
   b41ce:	f7ff bf62 	b.w	b4096 <_Znwj>
   b41d2:	bd08      	pop	{r3, pc}

000b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
   b41d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b41d6:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b41da:	6003      	str	r3, [r0, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b41dc:	e9d1 5300 	ldrd	r5, r3, [r1]
      basic_string(const basic_string& __str)
   b41e0:	4604      	mov	r4, r0
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b41e2:	18ee      	adds	r6, r5, r3
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   b41e4:	b91d      	cbnz	r5, b41ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
   b41e6:	b116      	cbz	r6, b41ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
	  std::__throw_logic_error(__N("basic_string::"
   b41e8:	480c      	ldr	r0, [pc, #48]	; (b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x48>)
   b41ea:	f007 f9e0 	bl	bb5ae <_ZSt19__throw_logic_errorPKc>
	if (__dnew > size_type(_S_local_capacity))
   b41ee:	2b0f      	cmp	r3, #15
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b41f0:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b41f2:	d907      	bls.n	b4204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x30>
	    _M_data(_M_create(__dnew, size_type(0)));
   b41f4:	2200      	movs	r2, #0
   b41f6:	a901      	add	r1, sp, #4
   b41f8:	4620      	mov	r0, r4
   b41fa:	f007 f9eb 	bl	bb5d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b41fe:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4200:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4202:	60a3      	str	r3, [r4, #8]
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4204:	4632      	mov	r2, r6
   b4206:	4629      	mov	r1, r5
   b4208:	6820      	ldr	r0, [r4, #0]
   b420a:	f007 fa19 	bl	bb640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
   b420e:	9b01      	ldr	r3, [sp, #4]
   b4210:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4212:	6063      	str	r3, [r4, #4]
   b4214:	2100      	movs	r1, #0
   b4216:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b4218:	b002      	add	sp, #8
   b421a:	bd70      	pop	{r4, r5, r6, pc}
   b421c:	000be6dc 	.word	0x000be6dc

000b4220 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4220:	6803      	ldr	r3, [r0, #0]
   b4222:	b2c9      	uxtb	r1, r1
   b4224:	689b      	ldr	r3, [r3, #8]
   b4226:	4718      	bx	r3

000b4228 <_ZN5Print5writeEPKc.isra.0>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4228:	b513      	push	{r0, r1, r4, lr}
   b422a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b422c:	b161      	cbz	r1, b4248 <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b422e:	4608      	mov	r0, r1
   b4230:	9101      	str	r1, [sp, #4]
   b4232:	f008 fa11 	bl	bc658 <strlen>
   b4236:	6823      	ldr	r3, [r4, #0]
   b4238:	9901      	ldr	r1, [sp, #4]
   b423a:	68db      	ldr	r3, [r3, #12]
   b423c:	4602      	mov	r2, r0
   b423e:	4620      	mov	r0, r4
    }
   b4240:	b002      	add	sp, #8
   b4242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4246:	4718      	bx	r3
    }
   b4248:	b002      	add	sp, #8
   b424a:	bd10      	pop	{r4, pc}

000b424c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   b424c:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b424e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4250:	4604      	mov	r4, r0
   b4252:	460d      	mov	r5, r1
      if (&__x != this)
   b4254:	d025      	beq.n	b42a2 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x56>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4256:	e9d1 7100 	ldrd	r7, r1, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   b425a:	6800      	ldr	r0, [r0, #0]
   b425c:	68a3      	ldr	r3, [r4, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b425e:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b4260:	1a1b      	subs	r3, r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   b4262:	429e      	cmp	r6, r3
   b4264:	d91e      	bls.n	b42a4 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   b4266:	10f0      	asrs	r0, r6, #3
   b4268:	f7ff ffa7 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
   b426c:	2300      	movs	r3, #0
   b426e:	4605      	mov	r5, r0
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   b4270:	429e      	cmp	r6, r3
   b4272:	d00a      	beq.n	b428a <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x3e>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4274:	18ea      	adds	r2, r5, r3
   b4276:	bf1c      	itt	ne
   b4278:	18f9      	addne	r1, r7, r3
   b427a:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b427e:	f103 0308 	add.w	r3, r3, #8
   b4282:	bf18      	it	ne
   b4284:	e9c2 0100 	strdne	r0, r1, [r2]
   b4288:	e7f2      	b.n	b4270 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x24>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b428a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b428c:	b118      	cbz	r0, b4296 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x4a>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
   b428e:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4290:	1a09      	subs	r1, r1, r0
   b4292:	f7ff ff06 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4296:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4298:	4435      	add	r5, r6
   b429a:	60a5      	str	r5, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b429c:	6823      	ldr	r3, [r4, #0]
   b429e:	4433      	add	r3, r6
   b42a0:	6063      	str	r3, [r4, #4]
	}
      return *this;
    }
   b42a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b42a4:	6862      	ldr	r2, [r4, #4]
   b42a6:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   b42a8:	4296      	cmp	r6, r2
   b42aa:	d806      	bhi.n	b42ba <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x6e>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b42ac:	42b9      	cmp	r1, r7
   b42ae:	d0f5      	beq.n	b429c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b42b0:	4632      	mov	r2, r6
   b42b2:	4639      	mov	r1, r7
   b42b4:	f008 f96e 	bl	bc594 <memmove>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b42b8:	e7f0      	b.n	b429c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	  if (_Num)
   b42ba:	b112      	cbz	r2, b42c2 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x76>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b42bc:	4639      	mov	r1, r7
   b42be:	f008 f969 	bl	bc594 <memmove>
   b42c2:	e9d4 2700 	ldrd	r2, r7, [r4]
   b42c6:	1abb      	subs	r3, r7, r2
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b42c8:	682a      	ldr	r2, [r5, #0]
   b42ca:	686d      	ldr	r5, [r5, #4]
   b42cc:	441a      	add	r2, r3
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b42ce:	1aad      	subs	r5, r5, r2
					  __x._M_impl._M_finish,
   b42d0:	2300      	movs	r3, #0
	      for (; __first != __last; ++__first, (void)++__cur)
   b42d2:	429d      	cmp	r5, r3
   b42d4:	d0e2      	beq.n	b429c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
   b42d6:	eb17 0c03 	adds.w	ip, r7, r3
   b42da:	bf1c      	itt	ne
   b42dc:	18d1      	addne	r1, r2, r3
   b42de:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b42e2:	f103 0308 	add.w	r3, r3, #8
   b42e6:	bf18      	it	ne
   b42e8:	e9cc 0100 	strdne	r0, r1, [ip]
   b42ec:	e7f1      	b.n	b42d2 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x86>
	...

000b42f0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>:
      if (&__x != this)
   b42f0:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b42f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b42f6:	4604      	mov	r4, r0
   b42f8:	468a      	mov	sl, r1
      if (&__x != this)
   b42fa:	d036      	beq.n	b436a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7a>
   b42fc:	e9d1 5b00 	ldrd	r5, fp, [r1]
			 - this->_M_impl._M_start); }
   b4300:	f8d0 9000 	ldr.w	r9, [r0]
   b4304:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4306:	4a39      	ldr	r2, [pc, #228]	; (b43ec <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xfc>)
   b4308:	ebab 0705 	sub.w	r7, fp, r5
			 - this->_M_impl._M_start); }
   b430c:	eba3 0309 	sub.w	r3, r3, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4310:	ea4f 08e7 	mov.w	r8, r7, asr #3
	  if (__xlen > capacity())
   b4314:	42bb      	cmp	r3, r7
   b4316:	fb02 f808 	mul.w	r8, r2, r8
   b431a:	d228      	bcs.n	b436e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7e>
	  pointer __result = this->_M_allocate(__n);
   b431c:	4640      	mov	r0, r8
   b431e:	f7ff ff2d 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
   b4322:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b4324:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b4326:	45ab      	cmp	fp, r5
   b4328:	d00a      	beq.n	b4340 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x50>
   b432a:	f1b8 0f00 	cmp.w	r8, #0
   b432e:	d003      	beq.n	b4338 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x48>
   b4330:	4629      	mov	r1, r5
   b4332:	4640      	mov	r0, r8
   b4334:	f7ff ff4e 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4338:	f108 0818 	add.w	r8, r8, #24
   b433c:	3518      	adds	r5, #24
   b433e:	e7f2      	b.n	b4326 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x36>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4340:	e9d4 5800 	ldrd	r5, r8, [r4]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b4344:	45a8      	cmp	r8, r5
   b4346:	d004      	beq.n	b4352 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x62>
      { _M_dispose(); }
   b4348:	4628      	mov	r0, r5
   b434a:	f007 f965 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b434e:	3518      	adds	r5, #24
   b4350:	e7f8      	b.n	b4344 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x54>
	      _M_deallocate(this->_M_impl._M_start,
   b4352:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4354:	b118      	cbz	r0, b435e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x6e>
			    - this->_M_impl._M_start);
   b4356:	68a1      	ldr	r1, [r4, #8]
   b4358:	1a09      	subs	r1, r1, r0
   b435a:	f7ff fea2 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b435e:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4360:	443e      	add	r6, r7
   b4362:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4364:	6823      	ldr	r3, [r4, #0]
   b4366:	443b      	add	r3, r7
   b4368:	6063      	str	r3, [r4, #4]
    }
   b436a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b436e:	6846      	ldr	r6, [r0, #4]
   b4370:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b4374:	42b7      	cmp	r7, r6
   b4376:	d819      	bhi.n	b43ac <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xbc>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4378:	4646      	mov	r6, r8
   b437a:	46ca      	mov	sl, r9
   b437c:	2e00      	cmp	r6, #0
   b437e:	dd08      	ble.n	b4392 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xa2>
		  }
	      }
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
	  }
#endif
	this->_M_assign(__str);
   b4380:	4629      	mov	r1, r5
   b4382:	4650      	mov	r0, sl
   b4384:	f007 f966 	bl	bb654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b4388:	3518      	adds	r5, #24
	      ++__result;
   b438a:	f10a 0a18 	add.w	sl, sl, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b438e:	3e01      	subs	r6, #1
   b4390:	e7f4      	b.n	b437c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x8c>
   b4392:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   b4396:	2518      	movs	r5, #24
      : _M_current(__i) { }
   b4398:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b439a:	fb05 9508 	mla	r5, r5, r8, r9
	  for (; __first != __last; ++__first)
   b439e:	42ae      	cmp	r6, r5
   b43a0:	d0e0      	beq.n	b4364 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
      { _M_dispose(); }
   b43a2:	4628      	mov	r0, r5
   b43a4:	f007 f938 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b43a8:	3518      	adds	r5, #24
      {
	++_M_current;
	return *this;
   b43aa:	e7f8      	b.n	b439e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xae>
   b43ac:	10f6      	asrs	r6, r6, #3
   b43ae:	4356      	muls	r6, r2
   b43b0:	2e00      	cmp	r6, #0
   b43b2:	dd08      	ble.n	b43c6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xd6>
	this->_M_assign(__str);
   b43b4:	4629      	mov	r1, r5
   b43b6:	4648      	mov	r0, r9
   b43b8:	f007 f94c 	bl	bb654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b43bc:	3518      	adds	r5, #24
	      ++__result;
   b43be:	f109 0918 	add.w	r9, r9, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b43c2:	3e01      	subs	r6, #1
   b43c4:	e7f4      	b.n	b43b0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xc0>
   b43c6:	e9d4 5600 	ldrd	r5, r6, [r4]
   b43ca:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43cc:	f8da 5000 	ldr.w	r5, [sl]
					  __x._M_impl._M_finish,
   b43d0:	f8da 8004 	ldr.w	r8, [sl, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43d4:	440d      	add	r5, r1
   b43d6:	45a8      	cmp	r8, r5
   b43d8:	d0c4      	beq.n	b4364 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b43da:	b11e      	cbz	r6, b43e4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xf4>
   b43dc:	4629      	mov	r1, r5
   b43de:	4630      	mov	r0, r6
   b43e0:	f7ff fef8 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b43e4:	3518      	adds	r5, #24
   b43e6:	3618      	adds	r6, #24
   b43e8:	e7f5      	b.n	b43d6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xe6>
   b43ea:	bf00      	nop
   b43ec:	aaaaaaab 	.word	0xaaaaaaab

000b43f0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43f0:	b40e      	push	{r1, r2, r3}
   b43f2:	b503      	push	{r0, r1, lr}
   b43f4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b43f6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43f8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b43fc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b43fe:	f006 f9bc 	bl	ba77a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4402:	b002      	add	sp, #8
   b4404:	f85d eb04 	ldr.w	lr, [sp], #4
   b4408:	b003      	add	sp, #12
   b440a:	4770      	bx	lr

000b440c <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b440c:	b40e      	push	{r1, r2, r3}
   b440e:	b503      	push	{r0, r1, lr}
   b4410:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4412:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4414:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4418:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b441a:	f006 f9ae 	bl	ba77a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b441e:	b002      	add	sp, #8
   b4420:	f85d eb04 	ldr.w	lr, [sp], #4
   b4424:	b003      	add	sp, #12
   b4426:	4770      	bx	lr

000b4428 <_Z16randomizeAddressv>:
    Serial.println();
  }
}

//clears up conflicts with multiple i2c slaves having the same address
void randomizeAddress(){
   b4428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return *(this->_M_impl._M_start + __n);
   b442c:	4fad      	ldr	r7, [pc, #692]	; (b46e4 <_Z16randomizeAddressv+0x2bc>)
  while(slaveCount < cities[cityIndex].slaveCountExpected){
   b442e:	4dae      	ldr	r5, [pc, #696]	; (b46e8 <_Z16randomizeAddressv+0x2c0>)
void randomizeAddress(){
   b4430:	b08d      	sub	sp, #52	; 0x34
  while(slaveCount < cities[cityIndex].slaveCountExpected){
   b4432:	4bae      	ldr	r3, [pc, #696]	; (b46ec <_Z16randomizeAddressv+0x2c4>)
   b4434:	681a      	ldr	r2, [r3, #0]
   b4436:	683b      	ldr	r3, [r7, #0]
   b4438:	2128      	movs	r1, #40	; 0x28
   b443a:	fb01 3302 	mla	r3, r1, r2, r3
   b443e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b4440:	682b      	ldr	r3, [r5, #0]
   b4442:	429a      	cmp	r2, r3
   b4444:	f340 8115 	ble.w	b4672 <_Z16randomizeAddressv+0x24a>
    Serial.printlnf("slaveCount: %i", slaveCount);
   b4448:	f006 fefa 	bl	bb240 <_Z16_fetch_usbserialv>
   b444c:	682a      	ldr	r2, [r5, #0]
   b444e:	49a8      	ldr	r1, [pc, #672]	; (b46f0 <_Z16randomizeAddressv+0x2c8>)

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4450:	f8df 82c4 	ldr.w	r8, [pc, #708]	; b4718 <_Z16randomizeAddressv+0x2f0>
   b4454:	f8df 92c4 	ldr.w	r9, [pc, #708]	; b471c <_Z16randomizeAddressv+0x2f4>
      //gets UUID from address and sends it back to slave, slave changes address if conflict
      Wire.requestFrom(i, 24);
      if(Wire.available() > 0){
        Serial.println("transmission recieved from: " + String(i));

        String inputBuffer = "";
   b4458:	4ea6      	ldr	r6, [pc, #664]	; (b46f4 <_Z16randomizeAddressv+0x2cc>)
    Serial.printlnf("slaveCount: %i", slaveCount);
   b445a:	f7ff ffd7 	bl	b440c <_ZN5Print8printlnfEPKcz>
    slaveCount = 0;
   b445e:	2300      	movs	r3, #0
   b4460:	602b      	str	r3, [r5, #0]
    for(int i = 8; i <= 119; i++){
   b4462:	2408      	movs	r4, #8
      if(i == 41){
   b4464:	2c29      	cmp	r4, #41	; 0x29
   b4466:	f000 80fb 	beq.w	b4660 <_Z16randomizeAddressv+0x238>
      Serial.println("\nrequest code 1, address: " + String(i));
   b446a:	f006 fee9 	bl	bb240 <_Z16_fetch_usbserialv>
   b446e:	4641      	mov	r1, r8
   b4470:	4682      	mov	sl, r0
   b4472:	a808      	add	r0, sp, #32
   b4474:	f006 fa03 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
   b4478:	220a      	movs	r2, #10
   b447a:	4621      	mov	r1, r4
   b447c:	a804      	add	r0, sp, #16
   b447e:	f006 fa58 	bl	ba932 <_ZN6StringC1Eih>
   b4482:	a904      	add	r1, sp, #16
   b4484:	a808      	add	r0, sp, #32
   b4486:	f006 fa8f 	bl	ba9a8 <_ZplRK15StringSumHelperRK6String>
   b448a:	6801      	ldr	r1, [r0, #0]
   b448c:	4650      	mov	r0, sl
   b448e:	f006 f94c 	bl	ba72a <_ZN5Print7printlnEPKc>
   b4492:	a804      	add	r0, sp, #16
   b4494:	f006 f9a8 	bl	ba7e8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4498:	a808      	add	r0, sp, #32
   b449a:	f006 f9a5 	bl	ba7e8 <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   b449e:	f007 f81d 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b44a2:	4621      	mov	r1, r4
   b44a4:	f005 ffb4 	bl	ba410 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   b44a8:	f007 f818 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b44ac:	2131      	movs	r1, #49	; 0x31
   b44ae:	f7ff feb7 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b44b2:	fa5f fb84 	uxtb.w	fp, r4
   b44b6:	f007 f811 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b44ba:	f005 ffb0 	bl	ba41e <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   b44be:	f007 f80d 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b44c2:	2218      	movs	r2, #24
   b44c4:	4659      	mov	r1, fp
   b44c6:	f005 ff9c 	bl	ba402 <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   b44ca:	f007 f807 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b44ce:	6803      	ldr	r3, [r0, #0]
   b44d0:	691b      	ldr	r3, [r3, #16]
   b44d2:	4798      	blx	r3
   b44d4:	2800      	cmp	r0, #0
   b44d6:	f340 80c3 	ble.w	b4660 <_Z16randomizeAddressv+0x238>
        Serial.println("transmission recieved from: " + String(i));
   b44da:	f006 feb1 	bl	bb240 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b44de:	4649      	mov	r1, r9
   b44e0:	4682      	mov	sl, r0
   b44e2:	a808      	add	r0, sp, #32
   b44e4:	f006 f9cb 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
   b44e8:	220a      	movs	r2, #10
   b44ea:	4621      	mov	r1, r4
   b44ec:	a804      	add	r0, sp, #16
   b44ee:	f006 fa20 	bl	ba932 <_ZN6StringC1Eih>
   b44f2:	a904      	add	r1, sp, #16
   b44f4:	a808      	add	r0, sp, #32
   b44f6:	f006 fa57 	bl	ba9a8 <_ZplRK15StringSumHelperRK6String>
   b44fa:	6801      	ldr	r1, [r0, #0]
   b44fc:	4650      	mov	r0, sl
   b44fe:	f006 f914 	bl	ba72a <_ZN5Print7printlnEPKc>
   b4502:	a804      	add	r0, sp, #16
   b4504:	f006 f970 	bl	ba7e8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4508:	a808      	add	r0, sp, #32
   b450a:	f006 f96d 	bl	ba7e8 <_ZN6StringD1Ev>
        String inputBuffer = "";
   b450e:	4631      	mov	r1, r6
   b4510:	4668      	mov	r0, sp
   b4512:	f006 f9b4 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
   b4516:	f04f 0a18 	mov.w	sl, #24
        char c;
        for(int j = 0; j < 24; j++){
          c = Wire.read();
   b451a:	f006 ffdf 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b451e:	6803      	ldr	r3, [r0, #0]
   b4520:	695b      	ldr	r3, [r3, #20]
   b4522:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b4524:	b2c1      	uxtb	r1, r0
   b4526:	4668      	mov	r0, sp
   b4528:	f006 fa31 	bl	ba98e <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   b452c:	f1ba 0a01 	subs.w	sl, sl, #1
   b4530:	d1f3      	bne.n	b451a <_Z16randomizeAddressv+0xf2>
          inputBuffer += c;
        }
        Wire.beginTransmission(i);
   b4532:	f006 ffd3 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b4536:	4621      	mov	r1, r4
   b4538:	f005 ff6a 	bl	ba410 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   b453c:	f006 ffce 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b4540:	9900      	ldr	r1, [sp, #0]
   b4542:	f7ff fe71 	bl	b4228 <_ZN5Print5writeEPKc.isra.0>
        Serial.println("device id: " + inputBuffer);
   b4546:	f006 fe7b 	bl	bb240 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b454a:	496b      	ldr	r1, [pc, #428]	; (b46f8 <_Z16randomizeAddressv+0x2d0>)
   b454c:	4682      	mov	sl, r0
   b454e:	a808      	add	r0, sp, #32
   b4550:	f006 f995 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
   b4554:	4669      	mov	r1, sp
   b4556:	a808      	add	r0, sp, #32
   b4558:	f006 fa26 	bl	ba9a8 <_ZplRK15StringSumHelperRK6String>
   b455c:	6801      	ldr	r1, [r0, #0]
   b455e:	4650      	mov	r0, sl
   b4560:	f006 f8e3 	bl	ba72a <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4564:	a808      	add	r0, sp, #32
   b4566:	f006 f93f 	bl	ba7e8 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b456a:	f006 ffb7 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b456e:	f005 ff56 	bl	ba41e <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   b4572:	f006 fe65 	bl	bb240 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4576:	4961      	ldr	r1, [pc, #388]	; (b46fc <_Z16randomizeAddressv+0x2d4>)
   b4578:	4682      	mov	sl, r0
   b457a:	a808      	add	r0, sp, #32
   b457c:	f006 f97f 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
   b4580:	220a      	movs	r2, #10
   b4582:	4621      	mov	r1, r4
   b4584:	a804      	add	r0, sp, #16
   b4586:	f006 f9d4 	bl	ba932 <_ZN6StringC1Eih>
   b458a:	a904      	add	r1, sp, #16
   b458c:	a808      	add	r0, sp, #32
   b458e:	f006 fa0b 	bl	ba9a8 <_ZplRK15StringSumHelperRK6String>
   b4592:	6801      	ldr	r1, [r0, #0]
   b4594:	4650      	mov	r0, sl
   b4596:	f006 f8c8 	bl	ba72a <_ZN5Print7printlnEPKc>
   b459a:	a804      	add	r0, sp, #16
   b459c:	f006 f924 	bl	ba7e8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45a0:	a808      	add	r0, sp, #32
   b45a2:	f006 f921 	bl	ba7e8 <_ZN6StringD1Ev>

        Wire.beginTransmission(i);
   b45a6:	f006 ff99 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b45aa:	4621      	mov	r1, r4
   b45ac:	f005 ff30 	bl	ba410 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   b45b0:	f006 ff94 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b45b4:	2132      	movs	r1, #50	; 0x32
   b45b6:	f7ff fe33 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b45ba:	f006 ff8f 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b45be:	f005 ff2e 	bl	ba41e <_ZN7TwoWire15endTransmissionEv>

        Serial.println("request code 2, address: " + String(i));
   b45c2:	f006 fe3d 	bl	bb240 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b45c6:	494e      	ldr	r1, [pc, #312]	; (b4700 <_Z16randomizeAddressv+0x2d8>)
   b45c8:	4682      	mov	sl, r0
   b45ca:	a808      	add	r0, sp, #32
   b45cc:	f006 f957 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
   b45d0:	220a      	movs	r2, #10
   b45d2:	4621      	mov	r1, r4
   b45d4:	a804      	add	r0, sp, #16
   b45d6:	f006 f9ac 	bl	ba932 <_ZN6StringC1Eih>
   b45da:	a904      	add	r1, sp, #16
   b45dc:	a808      	add	r0, sp, #32
   b45de:	f006 f9e3 	bl	ba9a8 <_ZplRK15StringSumHelperRK6String>
   b45e2:	6801      	ldr	r1, [r0, #0]
   b45e4:	4650      	mov	r0, sl
   b45e6:	f006 f8a0 	bl	ba72a <_ZN5Print7printlnEPKc>
   b45ea:	a804      	add	r0, sp, #16
   b45ec:	f006 f8fc 	bl	ba7e8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45f0:	a808      	add	r0, sp, #32
   b45f2:	f006 f8f9 	bl	ba7e8 <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   b45f6:	f006 ff71 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b45fa:	2204      	movs	r2, #4
   b45fc:	4659      	mov	r1, fp
   b45fe:	f005 ff00 	bl	ba402 <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   b4602:	4631      	mov	r1, r6
   b4604:	4668      	mov	r0, sp
   b4606:	f006 f982 	bl	ba90e <_ZN6StringaSEPKc>
   b460a:	f04f 0a04 	mov.w	sl, #4
        for(int j = 0; j < 4; j++){
          inputBuffer += (char)Wire.read();
   b460e:	f006 ff65 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b4612:	6803      	ldr	r3, [r0, #0]
   b4614:	695b      	ldr	r3, [r3, #20]
   b4616:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b4618:	b2c1      	uxtb	r1, r0
   b461a:	4668      	mov	r0, sp
   b461c:	f006 f9b7 	bl	ba98e <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   b4620:	f1ba 0a01 	subs.w	sl, sl, #1
   b4624:	d1f3      	bne.n	b460e <_Z16randomizeAddressv+0x1e6>
        }
        
        Serial.println("conflict verification: " + inputBuffer);
   b4626:	f006 fe0b 	bl	bb240 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b462a:	4936      	ldr	r1, [pc, #216]	; (b4704 <_Z16randomizeAddressv+0x2dc>)
   b462c:	4682      	mov	sl, r0
   b462e:	a808      	add	r0, sp, #32
   b4630:	f006 f925 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
   b4634:	4669      	mov	r1, sp
   b4636:	a808      	add	r0, sp, #32
   b4638:	f006 f9b6 	bl	ba9a8 <_ZplRK15StringSumHelperRK6String>
   b463c:	6801      	ldr	r1, [r0, #0]
   b463e:	4650      	mov	r0, sl
   b4640:	f006 f873 	bl	ba72a <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4644:	a808      	add	r0, sp, #32
   b4646:	f006 f8cf 	bl	ba7e8 <_ZN6StringD1Ev>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b464a:	492f      	ldr	r1, [pc, #188]	; (b4708 <_Z16randomizeAddressv+0x2e0>)
   b464c:	4668      	mov	r0, sp
   b464e:	f006 f9ee 	bl	baa2e <_ZNK6String6equalsEPKc>
        if(inputBuffer != "pass"){
   b4652:	b150      	cbz	r0, b466a <_Z16randomizeAddressv+0x242>
          break;
        }
        slaveCount++;
   b4654:	682b      	ldr	r3, [r5, #0]
        String inputBuffer = "";
   b4656:	4668      	mov	r0, sp
        slaveCount++;
   b4658:	3301      	adds	r3, #1
   b465a:	602b      	str	r3, [r5, #0]
        String inputBuffer = "";
   b465c:	f006 f8c4 	bl	ba7e8 <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   b4660:	3401      	adds	r4, #1
   b4662:	2c78      	cmp	r4, #120	; 0x78
   b4664:	f47f aefe 	bne.w	b4464 <_Z16randomizeAddressv+0x3c>
   b4668:	e6e3      	b.n	b4432 <_Z16randomizeAddressv+0xa>
   b466a:	4668      	mov	r0, sp
   b466c:	f006 f8bc 	bl	ba7e8 <_ZN6StringD1Ev>
   b4670:	e6df      	b.n	b4432 <_Z16randomizeAddressv+0xa>
      }
    }
  }

  Serial.println("\nConnected to: ");
   b4672:	f006 fde5 	bl	bb240 <_Z16_fetch_usbserialv>
   b4676:	4925      	ldr	r1, [pc, #148]	; (b470c <_Z16randomizeAddressv+0x2e4>)
    Wire.endTransmission();

    Wire.requestFrom(i, 24);
    if(Wire.available() > 0){
      Serial.print(i);
      Serial.print(", ");
   b4678:	4e25      	ldr	r6, [pc, #148]	; (b4710 <_Z16randomizeAddressv+0x2e8>)
   b467a:	4f26      	ldr	r7, [pc, #152]	; (b4714 <_Z16randomizeAddressv+0x2ec>)
  Serial.println("\nConnected to: ");
   b467c:	f006 f855 	bl	ba72a <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   b4680:	2408      	movs	r4, #8
  int count = 0;
   b4682:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   b4684:	f006 ff2a 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b4688:	4621      	mov	r1, r4
   b468a:	f005 fec1 	bl	ba410 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   b468e:	f006 ff25 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b4692:	2131      	movs	r1, #49	; 0x31
   b4694:	f7ff fdc4 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b4698:	f006 ff20 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b469c:	f005 febf 	bl	ba41e <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   b46a0:	f006 ff1c 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b46a4:	2218      	movs	r2, #24
   b46a6:	b2e1      	uxtb	r1, r4
   b46a8:	f005 feab 	bl	ba402 <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   b46ac:	f006 ff16 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b46b0:	6803      	ldr	r3, [r0, #0]
   b46b2:	691b      	ldr	r3, [r3, #16]
   b46b4:	4798      	blx	r3
   b46b6:	2800      	cmp	r0, #0
   b46b8:	dd0e      	ble.n	b46d8 <_Z16randomizeAddressv+0x2b0>
      Serial.print(i);
   b46ba:	f006 fdc1 	bl	bb240 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b46be:	220a      	movs	r2, #10
   b46c0:	4621      	mov	r1, r4
   b46c2:	f006 f83c 	bl	ba73e <_ZN5Print11printNumberEmh>
      Serial.print(", ");
   b46c6:	f006 fdbb 	bl	bb240 <_Z16_fetch_usbserialv>
   b46ca:	4631      	mov	r1, r6
   b46cc:	f006 f81a 	bl	ba704 <_ZN5Print5printEPKc>

      addressArr[count++] = i;
   b46d0:	683b      	ldr	r3, [r7, #0]
   b46d2:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
   b46d6:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   b46d8:	3401      	adds	r4, #1
   b46da:	2c78      	cmp	r4, #120	; 0x78
   b46dc:	d1d2      	bne.n	b4684 <_Z16randomizeAddressv+0x25c>
    }
  }
}
   b46de:	b00d      	add	sp, #52	; 0x34
   b46e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b46e4:	20035448 	.word	0x20035448
   b46e8:	2003e6a0 	.word	0x2003e6a0
   b46ec:	200350a0 	.word	0x200350a0
   b46f0:	000be706 	.word	0x000be706
   b46f4:	000bec3a 	.word	0x000bec3a
   b46f8:	000be74d 	.word	0x000be74d
   b46fc:	000be759 	.word	0x000be759
   b4700:	000be770 	.word	0x000be770
   b4704:	000be78a 	.word	0x000be78a
   b4708:	000be7a2 	.word	0x000be7a2
   b470c:	000be7a7 	.word	0x000be7a7
   b4710:	000be9ef 	.word	0x000be9ef
   b4714:	200352f0 	.word	0x200352f0
   b4718:	000be715 	.word	0x000be715
   b471c:	000be730 	.word	0x000be730

000b4720 <_Z17acquireWireBufferv>:
    userInput = false;
    Serial.println("reset done");
  }
}

hal_i2c_config_t acquireWireBuffer() {
   b4720:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b4722:	f44f 7500 	mov.w	r5, #512	; 0x200
   b4726:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b4728:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b472a:	6003      	str	r3, [r0, #0]
   b472c:	6085      	str	r5, [r0, #8]
   b472e:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4730:	4905      	ldr	r1, [pc, #20]	; (b4748 <_Z17acquireWireBufferv+0x28>)
   b4732:	4628      	mov	r0, r5
   b4734:	f006 ff36 	bl	bb5a4 <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4738:	4903      	ldr	r1, [pc, #12]	; (b4748 <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b473a:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b473c:	4628      	mov	r0, r5
   b473e:	f006 ff31 	bl	bb5a4 <_ZnajRKSt9nothrow_t>
    };
   b4742:	60e0      	str	r0, [r4, #12]
    return config;
   b4744:	4620      	mov	r0, r4
   b4746:	bd38      	pop	{r3, r4, r5, pc}
   b4748:	000bf040 	.word	0x000bf040

000b474c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b474c:	b510      	push	{r4, lr}
   b474e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4750:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4752:	b118      	cbz	r0, b475c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4754:	68a1      	ldr	r1, [r4, #8]
   b4756:	1a09      	subs	r1, r1, r0
   b4758:	f7ff fca3 	bl	b40a2 <_ZdlPvj>
      }
   b475c:	4620      	mov	r0, r4
   b475e:	bd10      	pop	{r4, pc}

000b4760 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4760:	b510      	push	{r4, lr}
   b4762:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4764:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4766:	b118      	cbz	r0, b4770 <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4768:	68a1      	ldr	r1, [r4, #8]
   b476a:	1a09      	subs	r1, r1, r0
   b476c:	f7ff fc99 	bl	b40a2 <_ZdlPvj>
      }
   b4770:	4620      	mov	r0, r4
   b4772:	bd10      	pop	{r4, pc}

000b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4774:	b510      	push	{r4, lr}
   b4776:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4778:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b477a:	b118      	cbz	r0, b4784 <_ZNSt12_Vector_baseIiSaIiEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b477c:	68a1      	ldr	r1, [r4, #8]
   b477e:	1a09      	subs	r1, r1, r0
   b4780:	f7ff fc8f 	bl	b40a2 <_ZdlPvj>
      }
   b4784:	4620      	mov	r0, r4
   b4786:	bd10      	pop	{r4, pc}

000b4788 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
   b4788:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
   b478a:	680d      	ldr	r5, [r1, #0]
	  _M_end_of_storage = __x._M_end_of_storage;
   b478c:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
   b478e:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
   b4792:	6005      	str	r5, [r0, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
   b4794:	b085      	sub	sp, #20
	  _M_finish = __x._M_finish;
   b4796:	684d      	ldr	r5, [r1, #4]
   b4798:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
   b479a:	688d      	ldr	r5, [r1, #8]
   b479c:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
   b479e:	2300      	movs	r3, #0
	  _M_end_of_storage = __x._M_end_of_storage;
   b47a0:	6085      	str	r5, [r0, #8]
	  _M_finish = __x._M_finish;
   b47a2:	e9c1 3300 	strd	r3, r3, [r1]
	  _M_end_of_storage = __x._M_end_of_storage;
   b47a6:	608b      	str	r3, [r1, #8]
      }
   b47a8:	a801      	add	r0, sp, #4
	  _M_finish = __x._M_finish;
   b47aa:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
   b47ae:	f7ff ffe1 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      }
   b47b2:	b005      	add	sp, #20
   b47b4:	bd30      	pop	{r4, r5, pc}

000b47b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b47b6:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b47b8:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b47bc:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   b47be:	42ae      	cmp	r6, r5
   b47c0:	d004      	beq.n	b47cc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x16>
      { _M_dispose(); }
   b47c2:	4628      	mov	r0, r5
   b47c4:	f006 ff28 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b47c8:	3518      	adds	r5, #24
   b47ca:	e7f8      	b.n	b47be <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b47cc:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b47ce:	b118      	cbz	r0, b47d8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b47d0:	68a1      	ldr	r1, [r4, #8]
   b47d2:	1a09      	subs	r1, r1, r0
   b47d4:	f7ff fc65 	bl	b40a2 <_ZdlPvj>
      }
   b47d8:	4620      	mov	r0, r4
   b47da:	bd70      	pop	{r4, r5, r6, pc}

000b47dc <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>:

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b47dc:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      vector(size_type __n, const value_type& __value,
   b47e0:	b570      	push	{r4, r5, r6, lr}
   b47e2:	4604      	mov	r4, r0
   b47e4:	460d      	mov	r5, r1
   b47e6:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b47e8:	d302      	bcc.n	b47f0 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x14>
	  __throw_length_error(
   b47ea:	480c      	ldr	r0, [pc, #48]	; (b481c <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x40>)
   b47ec:	f006 fee2 	bl	bb5b4 <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47f0:	2300      	movs	r3, #0
   b47f2:	e9c0 3300 	strd	r3, r3, [r0]
   b47f6:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b47f8:	4608      	mov	r0, r1
   b47fa:	f7ff fcd1 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47fe:	eb00 0385 	add.w	r3, r0, r5, lsl #2
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4802:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4806:	60a3      	str	r3, [r4, #8]
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   b4808:	b12d      	cbz	r5, b4816 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   b480a:	6832      	ldr	r2, [r6, #0]
      for (; __first != __last; ++__first)
   b480c:	4283      	cmp	r3, r0
   b480e:	d002      	beq.n	b4816 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
	*__first = __tmp;
   b4810:	f840 2b04 	str.w	r2, [r0], #4
      for (; __first != __last; ++__first)
   b4814:	e7fa      	b.n	b480c <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x30>
	this->_M_impl._M_finish =
   b4816:	6060      	str	r0, [r4, #4]
      { _M_fill_initialize(__n, __value); }
   b4818:	4620      	mov	r0, r4
   b481a:	bd70      	pop	{r4, r5, r6, pc}
   b481c:	000be7b7 	.word	0x000be7b7

000b4820 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   b4820:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4824:	2400      	movs	r4, #0
      vector(initializer_list<value_type> __l,
   b4826:	ab02      	add	r3, sp, #8
   b4828:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b482c:	e9c0 4400 	strd	r4, r4, [r0]
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   b4830:	4613      	mov	r3, r2
      vector(initializer_list<value_type> __l,
   b4832:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4834:	6084      	str	r4, [r0, #8]
   b4836:	00d7      	lsls	r7, r2, #3
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b4838:	f342 001c 	sbfx	r0, r2, #0, #29
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b483c:	4a10      	ldr	r2, [pc, #64]	; (b4880 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x60>)
   b483e:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   b4842:	4688      	mov	r8, r1
   b4844:	d202      	bcs.n	b484c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x2c>
	  __throw_length_error(
   b4846:	480f      	ldr	r0, [pc, #60]	; (b4884 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x64>)
   b4848:	f006 feb4 	bl	bb5b4 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b484c:	f7ff fcb5 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4850:	19c6      	adds	r6, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4852:	4602      	mov	r2, r0
   b4854:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4856:	60ae      	str	r6, [r5, #8]
   b4858:	4623      	mov	r3, r4
   b485a:	429f      	cmp	r7, r3
   b485c:	d00b      	beq.n	b4876 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x56>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b485e:	18d4      	adds	r4, r2, r3
   b4860:	bf1c      	itt	ne
   b4862:	eb08 0103 	addne.w	r1, r8, r3
   b4866:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b486a:	f103 0308 	add.w	r3, r3, #8
   b486e:	bf18      	it	ne
   b4870:	e9c4 0100 	strdne	r0, r1, [r4]
   b4874:	e7f1      	b.n	b485a <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x3a>
      }
   b4876:	4628      	mov	r0, r5
	  this->_M_impl._M_finish =
   b4878:	606e      	str	r6, [r5, #4]
      }
   b487a:	b002      	add	sp, #8
   b487c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4880:	7ffffff8 	.word	0x7ffffff8
   b4884:	000be7b7 	.word	0x000be7b7

000b4888 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>:
      vector(initializer_list<value_type> __l,
   b4888:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b488c:	ab02      	add	r3, sp, #8
   b488e:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4892:	2300      	movs	r3, #0
   b4894:	e9c0 3300 	strd	r3, r3, [r0]
   b4898:	6083      	str	r3, [r0, #8]
   b489a:	4616      	mov	r6, r2
   b489c:	2318      	movs	r3, #24
   b489e:	435e      	muls	r6, r3
   b48a0:	4b10      	ldr	r3, [pc, #64]	; (b48e4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x5c>)
      vector(initializer_list<value_type> __l,
   b48a2:	4604      	mov	r4, r0
   b48a4:	10f0      	asrs	r0, r6, #3
   b48a6:	4358      	muls	r0, r3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b48a8:	4b0f      	ldr	r3, [pc, #60]	; (b48e8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x60>)
   b48aa:	429e      	cmp	r6, r3
   b48ac:	460f      	mov	r7, r1
   b48ae:	eb01 0806 	add.w	r8, r1, r6
   b48b2:	d902      	bls.n	b48ba <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x32>
	  __throw_length_error(
   b48b4:	480d      	ldr	r0, [pc, #52]	; (b48ec <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x64>)
   b48b6:	f006 fe7d 	bl	bb5b4 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b48ba:	f7ff fc5f 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b48be:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b48c0:	4605      	mov	r5, r0
   b48c2:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b48c4:	60a6      	str	r6, [r4, #8]
   b48c6:	45b8      	cmp	r8, r7
   b48c8:	d007      	beq.n	b48da <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x52>
   b48ca:	b11d      	cbz	r5, b48d4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x4c>
   b48cc:	4639      	mov	r1, r7
   b48ce:	4628      	mov	r0, r5
   b48d0:	f7ff fc80 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b48d4:	3718      	adds	r7, #24
   b48d6:	3518      	adds	r5, #24
   b48d8:	e7f5      	b.n	b48c6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x3e>
      }
   b48da:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
   b48dc:	6065      	str	r5, [r4, #4]
      }
   b48de:	b002      	add	sp, #8
   b48e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b48e4:	aaaaaaab 	.word	0xaaaaaaab
   b48e8:	7ffffff8 	.word	0x7ffffff8
   b48ec:	000be7b7 	.word	0x000be7b7

000b48f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b48f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48f2:	e9d1 3700 	ldrd	r3, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48f6:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48f8:	1aff      	subs	r7, r7, r3
      vector(const vector& __x)
   b48fa:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48fc:	e9c0 5500 	strd	r5, r5, [r0]
   b4900:	6085      	str	r5, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4902:	10f8      	asrs	r0, r7, #3
      vector(const vector& __x)
   b4904:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4906:	f7ff fc58 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b490a:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b490e:	4407      	add	r7, r0
   b4910:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4912:	e9d6 7600 	ldrd	r7, r6, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4916:	4602      	mov	r2, r0
   b4918:	1bf6      	subs	r6, r6, r7
      : _M_current(__i) { }
   b491a:	462b      	mov	r3, r5
   b491c:	42b3      	cmp	r3, r6
   b491e:	eb02 0503 	add.w	r5, r2, r3
   b4922:	d006      	beq.n	b4932 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x42>
   b4924:	b11d      	cbz	r5, b492e <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x3e>
   b4926:	18f9      	adds	r1, r7, r3
   b4928:	c903      	ldmia	r1, {r0, r1}
   b492a:	e885 0003 	stmia.w	r5, {r0, r1}
   b492e:	3308      	adds	r3, #8
   b4930:	e7f4      	b.n	b491c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b4932:	6065      	str	r5, [r4, #4]
      }
   b4934:	4620      	mov	r0, r4
   b4936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
   b4938:	b508      	push	{r3, lr}
      { return _M_string_length; }
   b493a:	6842      	ldr	r2, [r0, #4]
	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
    { return (__lhs.size() == __rhs.size()
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b493c:	684b      	ldr	r3, [r1, #4]
   b493e:	429a      	cmp	r2, r3
   b4940:	d108      	bne.n	b4954 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1c>
	if (__n == 0)
   b4942:	b14a      	cbz	r2, b4958 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x20>
	return __builtin_memcmp(__s1, __s2, __n);
   b4944:	6809      	ldr	r1, [r1, #0]
   b4946:	6800      	ldr	r0, [r0, #0]
   b4948:	f007 fe06 	bl	bc558 <memcmp>
   b494c:	fab0 f080 	clz	r0, r0
   b4950:	0940      	lsrs	r0, r0, #5
						    __lhs.size())); }
   b4952:	bd08      	pop	{r3, pc}
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b4954:	2000      	movs	r0, #0
   b4956:	e7fc      	b.n	b4952 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>
   b4958:	2001      	movs	r0, #1
   b495a:	e7fa      	b.n	b4952 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>

000b495c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b495c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  txCharacteristic.setValue("ok");
   b4960:	2200      	movs	r2, #0
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4962:	b0a3      	sub	sp, #140	; 0x8c
   b4964:	4604      	mov	r4, r0
   b4966:	460d      	mov	r5, r1
  txCharacteristic.setValue("ok");
   b4968:	4895      	ldr	r0, [pc, #596]	; (b4bc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x264>)
   b496a:	4996      	ldr	r1, [pc, #600]	; (b4bc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x268>)
   b496c:	f004 fd98 	bl	b94a0 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
  String inputBuffer = "";
   b4970:	4995      	ldr	r1, [pc, #596]	; (b4bc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26c>)
   b4972:	a803      	add	r0, sp, #12
   b4974:	f005 ff83 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
  String nameBuffer;
   b4978:	4993      	ldr	r1, [pc, #588]	; (b4bc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26c>)
   b497a:	a807      	add	r0, sp, #28
   b497c:	f005 ff7f 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
  for(int i = 0; i < len; i++){
   b4980:	4425      	add	r5, r4
   b4982:	42a5      	cmp	r5, r4
   b4984:	d005      	beq.n	b4992 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x36>
	String & operator += (char c)			{concat(c); return (*this);}
   b4986:	f814 1b01 	ldrb.w	r1, [r4], #1
   b498a:	a803      	add	r0, sp, #12
   b498c:	f005 ffff 	bl	ba98e <_ZN6String6concatEc>
   b4990:	e7f7      	b.n	b4982 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26>
  Serial.println(inputBuffer);
   b4992:	f006 fc55 	bl	bb240 <_Z16_fetch_usbserialv>
   b4996:	9903      	ldr	r1, [sp, #12]
   b4998:	f005 fec7 	bl	ba72a <_ZN5Print7printlnEPKc>
  if(inputBuffer.indexOf("wifi:") == 0){
   b499c:	498b      	ldr	r1, [pc, #556]	; (b4bcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x270>)
   b499e:	a80f      	add	r0, sp, #60	; 0x3c
   b49a0:	f005 ff6d 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
   b49a4:	a90f      	add	r1, sp, #60	; 0x3c
   b49a6:	a803      	add	r0, sp, #12
   b49a8:	f006 f862 	bl	baa70 <_ZNK6String7indexOfERKS_>
   b49ac:	4604      	mov	r4, r0
   b49ae:	a80f      	add	r0, sp, #60	; 0x3c
   b49b0:	f005 ff1a 	bl	ba7e8 <_ZN6StringD1Ev>
   b49b4:	2c00      	cmp	r4, #0
   b49b6:	d15b      	bne.n	b4a70 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x114>
    int commaIndex = inputBuffer.indexOf(",");
   b49b8:	4985      	ldr	r1, [pc, #532]	; (b4bd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x274>)
    SSID = inputBuffer.substring(5, commaIndex);
   b49ba:	4d86      	ldr	r5, [pc, #536]	; (b4bd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>)
    int commaIndex = inputBuffer.indexOf(",");
   b49bc:	a80f      	add	r0, sp, #60	; 0x3c
   b49be:	f005 ff5e 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
   b49c2:	a90f      	add	r1, sp, #60	; 0x3c
   b49c4:	a803      	add	r0, sp, #12
   b49c6:	f006 f853 	bl	baa70 <_ZNK6String7indexOfERKS_>
   b49ca:	4604      	mov	r4, r0
   b49cc:	a80f      	add	r0, sp, #60	; 0x3c
   b49ce:	f005 ff0b 	bl	ba7e8 <_ZN6StringD1Ev>
    SSID = inputBuffer.substring(5, commaIndex);
   b49d2:	4623      	mov	r3, r4
   b49d4:	2205      	movs	r2, #5
   b49d6:	a903      	add	r1, sp, #12
   b49d8:	a80f      	add	r0, sp, #60	; 0x3c
   b49da:	f006 f84d 	bl	baa78 <_ZNK6String9substringEjj>
   b49de:	a90f      	add	r1, sp, #60	; 0x3c
   b49e0:	4628      	mov	r0, r5
   b49e2:	f005 ff8c 	bl	ba8fe <_ZN6StringaSEOS_>
   b49e6:	a80f      	add	r0, sp, #60	; 0x3c
   b49e8:	f005 fefe 	bl	ba7e8 <_ZN6StringD1Ev>
    password = inputBuffer.substring(commaIndex + 1);
   b49ec:	1c62      	adds	r2, r4, #1
   b49ee:	4c7a      	ldr	r4, [pc, #488]	; (b4bd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x27c>)
   b49f0:	a903      	add	r1, sp, #12
   b49f2:	a80f      	add	r0, sp, #60	; 0x3c
   b49f4:	f006 f860 	bl	baab8 <_ZNK6String9substringEj>
   b49f8:	a90f      	add	r1, sp, #60	; 0x3c
   b49fa:	4620      	mov	r0, r4
   b49fc:	f005 ff7f 	bl	ba8fe <_ZN6StringaSEOS_>
   b4a00:	a80f      	add	r0, sp, #60	; 0x3c
   b4a02:	f005 fef1 	bl	ba7e8 <_ZN6StringD1Ev>
    Serial.printlnf("SSID: %s, password: %s", SSID.c_str(), password.c_str());
   b4a06:	f006 fc1b 	bl	bb240 <_Z16_fetch_usbserialv>
   b4a0a:	682a      	ldr	r2, [r5, #0]
   b4a0c:	6823      	ldr	r3, [r4, #0]
   b4a0e:	4973      	ldr	r1, [pc, #460]	; (b4bdc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x280>)
   b4a10:	f7ff fcfc 	bl	b440c <_ZN5Print8printlnfEPKcz>
	const char * c_str() const { return buffer; }
   b4a14:	682f      	ldr	r7, [r5, #0]
   b4a16:	6825      	ldr	r5, [r4, #0]
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4a18:	b337      	cbz	r7, b4a68 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>
   b4a1a:	4638      	mov	r0, r7
   b4a1c:	f007 fe1c 	bl	bc658 <strlen>
   b4a20:	4606      	mov	r6, r0
   b4a22:	b31d      	cbz	r5, b4a6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x110>
   b4a24:	4628      	mov	r0, r5
   b4a26:	f007 fe17 	bl	bc658 <strlen>
   b4a2a:	4604      	mov	r4, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b4a2c:	2238      	movs	r2, #56	; 0x38
   b4a2e:	2100      	movs	r1, #0
   b4a30:	a814      	add	r0, sp, #80	; 0x50
   b4a32:	f007 fdc9 	bl	bc5c8 <memset>
        creds.size = sizeof(creds);
   b4a36:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b4a38:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a3c:	4868      	ldr	r0, [pc, #416]	; (b4be0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x284>)
        creds.password_len = passwordLen;
   b4a3e:	9413      	str	r4, [sp, #76]	; 0x4c
        creds.security = WLanSecurityType(security);
   b4a40:	2303      	movs	r3, #3
   b4a42:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a46:	2300      	movs	r3, #0
   b4a48:	6840      	ldr	r0, [r0, #4]
   b4a4a:	aa0f      	add	r2, sp, #60	; 0x3c
   b4a4c:	4619      	mov	r1, r3
        creds.password = password;
   b4a4e:	e9cd 6511 	strd	r6, r5, [sp, #68]	; 0x44
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a52:	f004 fa03 	bl	b8e5c <network_set_credentials>
  String nameBuffer;
   b4a56:	a807      	add	r0, sp, #28
   b4a58:	f005 fec6 	bl	ba7e8 <_ZN6StringD1Ev>
  String inputBuffer = "";
   b4a5c:	a803      	add	r0, sp, #12
   b4a5e:	f005 fec3 	bl	ba7e8 <_ZN6StringD1Ev>
}
   b4a62:	b023      	add	sp, #140	; 0x8c
   b4a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4a68:	463e      	mov	r6, r7
   b4a6a:	e7da      	b.n	b4a22 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc6>
   b4a6c:	462c      	mov	r4, r5
   b4a6e:	e7dd      	b.n	b4a2c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd0>
  else if(inputBuffer.indexOf("city:") == 0){
   b4a70:	495c      	ldr	r1, [pc, #368]	; (b4be4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x288>)
   b4a72:	a80f      	add	r0, sp, #60	; 0x3c
   b4a74:	f005 ff03 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
   b4a78:	a90f      	add	r1, sp, #60	; 0x3c
   b4a7a:	a803      	add	r0, sp, #12
   b4a7c:	f005 fff8 	bl	baa70 <_ZNK6String7indexOfERKS_>
   b4a80:	4604      	mov	r4, r0
   b4a82:	a80f      	add	r0, sp, #60	; 0x3c
   b4a84:	f005 feb0 	bl	ba7e8 <_ZN6StringD1Ev>
   b4a88:	2c00      	cmp	r4, #0
   b4a8a:	f040 8083 	bne.w	b4b94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x238>
    inputBuffer = inputBuffer.substring(5);
   b4a8e:	2205      	movs	r2, #5
   b4a90:	a903      	add	r1, sp, #12
   b4a92:	a80f      	add	r0, sp, #60	; 0x3c
   b4a94:	f006 f810 	bl	baab8 <_ZNK6String9substringEj>
   b4a98:	a90f      	add	r1, sp, #60	; 0x3c
   b4a9a:	a803      	add	r0, sp, #12
   b4a9c:	f005 ff2f 	bl	ba8fe <_ZN6StringaSEOS_>
   b4aa0:	a80f      	add	r0, sp, #60	; 0x3c
   b4aa2:	f005 fea1 	bl	ba7e8 <_ZN6StringD1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4aa6:	4d50      	ldr	r5, [pc, #320]	; (b4be8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28c>)
   b4aa8:	4f50      	ldr	r7, [pc, #320]	; (b4bec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x290>)
        cityIndex = i;
   b4aaa:	f8df 8144 	ldr.w	r8, [pc, #324]	; b4bf0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x294>
   b4aae:	e9d5 2300 	ldrd	r2, r3, [r5]
   b4ab2:	1a9b      	subs	r3, r3, r2
   b4ab4:	10db      	asrs	r3, r3, #3
   b4ab6:	437b      	muls	r3, r7
    for(int i = 0; i < cities.size(); i++){
   b4ab8:	42a3      	cmp	r3, r4
   b4aba:	d913      	bls.n	b4ae4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x188>
      { return _M_dataplus._M_p; }
   b4abc:	2328      	movs	r3, #40	; 0x28
   b4abe:	fb03 2204 	mla	r2, r3, r4, r2
      if(inputBuffer == String(cities[i].name.c_str())){
   b4ac2:	a80f      	add	r0, sp, #60	; 0x3c
   b4ac4:	68d1      	ldr	r1, [r2, #12]
   b4ac6:	f005 feda 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4aca:	a90f      	add	r1, sp, #60	; 0x3c
   b4acc:	a803      	add	r0, sp, #12
   b4ace:	f005 ffa1 	bl	baa14 <_ZNK6String6equalsERKS_>
   b4ad2:	4606      	mov	r6, r0
   b4ad4:	a80f      	add	r0, sp, #60	; 0x3c
   b4ad6:	f005 fe87 	bl	ba7e8 <_ZN6StringD1Ev>
   b4ada:	b10e      	cbz	r6, b4ae0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x184>
        cityIndex = i;
   b4adc:	f8c8 4000 	str.w	r4, [r8]
    for(int i = 0; i < cities.size(); i++){
   b4ae0:	3401      	adds	r4, #1
   b4ae2:	e7e4      	b.n	b4aae <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x152>
    if(cityIndex == -1){
   b4ae4:	4e42      	ldr	r6, [pc, #264]	; (b4bf0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x294>)
   b4ae6:	6833      	ldr	r3, [r6, #0]
   b4ae8:	1c59      	adds	r1, r3, #1
   b4aea:	d105      	bne.n	b4af8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x19c>
      txCharacteristic.setValue("incorrect city name");
   b4aec:	4941      	ldr	r1, [pc, #260]	; (b4bf4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x298>)
   b4aee:	2200      	movs	r2, #0
        txCharacteristic.setValue("incorrect railway color");
   b4af0:	4833      	ldr	r0, [pc, #204]	; (b4bc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x264>)
   b4af2:	f004 fcd5 	bl	b94a0 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        return;
   b4af6:	e7ae      	b.n	b4a56 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
	return *(this->_M_impl._M_start + __n);
   b4af8:	2428      	movs	r4, #40	; 0x28
   b4afa:	4363      	muls	r3, r4
   b4afc:	18d1      	adds	r1, r2, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4afe:	58d3      	ldr	r3, [r2, r3]
   b4b00:	6849      	ldr	r1, [r1, #4]
    addressArr = std::vector<int>(cities[cityIndex].slaveCountExpected, 0);
   b4b02:	f8df 810c 	ldr.w	r8, [pc, #268]	; b4c10 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b4>
   b4b06:	1ac9      	subs	r1, r1, r3
   b4b08:	4b3b      	ldr	r3, [pc, #236]	; (b4bf8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x29c>)
   b4b0a:	1089      	asrs	r1, r1, #2
   b4b0c:	4359      	muls	r1, r3
    sequenceArr = std::vector<int>(cities[cityIndex].railways.size() * 2, 0);
   b4b0e:	aa0b      	add	r2, sp, #44	; 0x2c
   b4b10:	ab02      	add	r3, sp, #8
   b4b12:	2700      	movs	r7, #0
   b4b14:	0049      	lsls	r1, r1, #1
   b4b16:	a80f      	add	r0, sp, #60	; 0x3c
   b4b18:	970b      	str	r7, [sp, #44]	; 0x2c
   b4b1a:	f7ff fe5f 	bl	b47dc <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4b1e:	a90f      	add	r1, sp, #60	; 0x3c
   b4b20:	4836      	ldr	r0, [pc, #216]	; (b4bfc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a0>)
   b4b22:	f7ff fe31 	bl	b4788 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>
      }
   b4b26:	a80f      	add	r0, sp, #60	; 0x3c
   b4b28:	f7ff fe24 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
	return *(this->_M_impl._M_start + __n);
   b4b2c:	6832      	ldr	r2, [r6, #0]
    addressArr = std::vector<int>(cities[cityIndex].slaveCountExpected, 0);
   b4b2e:	682b      	ldr	r3, [r5, #0]
   b4b30:	fb04 3302 	mla	r3, r4, r2, r3
   b4b34:	a80f      	add	r0, sp, #60	; 0x3c
   b4b36:	aa0b      	add	r2, sp, #44	; 0x2c
   b4b38:	6a59      	ldr	r1, [r3, #36]	; 0x24
   b4b3a:	970b      	str	r7, [sp, #44]	; 0x2c
   b4b3c:	ab02      	add	r3, sp, #8
   b4b3e:	f7ff fe4d 	bl	b47dc <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4b42:	a90f      	add	r1, sp, #60	; 0x3c
   b4b44:	4640      	mov	r0, r8
   b4b46:	f7ff fe1f 	bl	b4788 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>
      }
   b4b4a:	a80f      	add	r0, sp, #60	; 0x3c
   b4b4c:	f7ff fe12 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
    randomizeAddress();
   b4b50:	f7ff fc6a 	bl	b4428 <_Z16randomizeAddressv>
    txCharacteristic.setValue("slave addresses sorted");
   b4b54:	463a      	mov	r2, r7
   b4b56:	492a      	ldr	r1, [pc, #168]	; (b4c00 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a4>)
   b4b58:	4819      	ldr	r0, [pc, #100]	; (b4bc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x264>)
   b4b5a:	f004 fca1 	bl	b94a0 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    Wire.beginTransmission(addressArr[0]);
   b4b5e:	f006 fcbd 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b4b62:	f8d8 3000 	ldr.w	r3, [r8]
   b4b66:	6819      	ldr	r1, [r3, #0]
   b4b68:	f005 fc52 	bl	ba410 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('3');
   b4b6c:	f006 fcb6 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b4b70:	2133      	movs	r1, #51	; 0x33
   b4b72:	f7ff fb55 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b4b76:	f006 fcb1 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b4b7a:	f005 fc50 	bl	ba41e <_ZN7TwoWire15endTransmissionEv>
    Serial.printlnf("city: %s", cities[cityIndex].name.c_str());
   b4b7e:	f006 fb5f 	bl	bb240 <_Z16_fetch_usbserialv>
	return *(this->_M_impl._M_start + __n);
   b4b82:	6832      	ldr	r2, [r6, #0]
   b4b84:	682b      	ldr	r3, [r5, #0]
   b4b86:	491f      	ldr	r1, [pc, #124]	; (b4c04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a8>)
   b4b88:	fb04 3402 	mla	r4, r4, r2, r3
   b4b8c:	68e2      	ldr	r2, [r4, #12]
   b4b8e:	f7ff fc3d 	bl	b440c <_ZN5Print8printlnfEPKcz>
   b4b92:	e760      	b.n	b4a56 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
  else if(inputBuffer.indexOf("color:") == 0){
   b4b94:	491c      	ldr	r1, [pc, #112]	; (b4c08 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ac>)
   b4b96:	a80f      	add	r0, sp, #60	; 0x3c
   b4b98:	f005 fe71 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
   b4b9c:	a90f      	add	r1, sp, #60	; 0x3c
   b4b9e:	a803      	add	r0, sp, #12
   b4ba0:	f005 ff66 	bl	baa70 <_ZNK6String7indexOfERKS_>
   b4ba4:	4604      	mov	r4, r0
   b4ba6:	a80f      	add	r0, sp, #60	; 0x3c
   b4ba8:	f005 fe1e 	bl	ba7e8 <_ZN6StringD1Ev>
   b4bac:	2c00      	cmp	r4, #0
   b4bae:	f040 81dc 	bne.w	b4f6a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60e>
    if(cityIndex == -1){
   b4bb2:	4e0f      	ldr	r6, [pc, #60]	; (b4bf0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x294>)
   b4bb4:	6833      	ldr	r3, [r6, #0]
   b4bb6:	3301      	adds	r3, #1
   b4bb8:	d12c      	bne.n	b4c14 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>
      txCharacteristic.setValue("city not set");
   b4bba:	4914      	ldr	r1, [pc, #80]	; (b4c0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>)
   b4bbc:	4622      	mov	r2, r4
   b4bbe:	e797      	b.n	b4af0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x194>
   b4bc0:	2003e6a4 	.word	0x2003e6a4
   b4bc4:	000be7e8 	.word	0x000be7e8
   b4bc8:	000bec3a 	.word	0x000bec3a
   b4bcc:	000be7eb 	.word	0x000be7eb
   b4bd0:	000be7f1 	.word	0x000be7f1
   b4bd4:	20035298 	.word	0x20035298
   b4bd8:	2003e46c 	.word	0x2003e46c
   b4bdc:	000be7f3 	.word	0x000be7f3
   b4be0:	2003e718 	.word	0x2003e718
   b4be4:	000be80a 	.word	0x000be80a
   b4be8:	20035448 	.word	0x20035448
   b4bec:	cccccccd 	.word	0xcccccccd
   b4bf0:	200350a0 	.word	0x200350a0
   b4bf4:	000be810 	.word	0x000be810
   b4bf8:	684bda13 	.word	0x684bda13
   b4bfc:	2003e694 	.word	0x2003e694
   b4c00:	000be824 	.word	0x000be824
   b4c04:	000be83b 	.word	0x000be83b
   b4c08:	000be844 	.word	0x000be844
   b4c0c:	000be84b 	.word	0x000be84b
   b4c10:	200352f0 	.word	0x200352f0
    inputBuffer = inputBuffer.substring(6);
   b4c14:	2206      	movs	r2, #6
   b4c16:	a903      	add	r1, sp, #12
   b4c18:	a80f      	add	r0, sp, #60	; 0x3c
   b4c1a:	f005 ff4d 	bl	baab8 <_ZNK6String9substringEj>
   b4c1e:	a90f      	add	r1, sp, #60	; 0x3c
   b4c20:	a803      	add	r0, sp, #12
   b4c22:	f005 fe6c 	bl	ba8fe <_ZN6StringaSEOS_>
   b4c26:	a80f      	add	r0, sp, #60	; 0x3c
   b4c28:	f005 fdde 	bl	ba7e8 <_ZN6StringD1Ev>
   b4c2c:	4fac      	ldr	r7, [pc, #688]	; (b4ee0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x584>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c2e:	f8df 82f8 	ldr.w	r8, [pc, #760]	; b4f28 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5cc>
    nameBuffer = inputBuffer;
   b4c32:	a903      	add	r1, sp, #12
   b4c34:	a807      	add	r0, sp, #28
   b4c36:	f005 fe53 	bl	ba8e0 <_ZN6StringaSERKS_>
    if(bleCount < cities[cityIndex].railways.size()){
   b4c3a:	6831      	ldr	r1, [r6, #0]
	return *(this->_M_impl._M_start + __n);
   b4c3c:	6838      	ldr	r0, [r7, #0]
   b4c3e:	2228      	movs	r2, #40	; 0x28
   b4c40:	434a      	muls	r2, r1
   b4c42:	1883      	adds	r3, r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c44:	5882      	ldr	r2, [r0, r2]
   b4c46:	685b      	ldr	r3, [r3, #4]
   b4c48:	1a9b      	subs	r3, r3, r2
   b4c4a:	4aa6      	ldr	r2, [pc, #664]	; (b4ee4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x588>)
   b4c4c:	109b      	asrs	r3, r3, #2
   b4c4e:	6812      	ldr	r2, [r2, #0]
   b4c50:	fb08 f303 	mul.w	r3, r8, r3
   b4c54:	429a      	cmp	r2, r3
   b4c56:	f080 80d6 	bcs.w	b4e06 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4aa>
      if((cityIndex == 0 || cityIndex == 1) && (inputBuffer == "green1" || inputBuffer == "green2")){
   b4c5a:	2901      	cmp	r1, #1
   b4c5c:	d808      	bhi.n	b4c70 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x314>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4c5e:	49a2      	ldr	r1, [pc, #648]	; (b4ee8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58c>)
   b4c60:	a803      	add	r0, sp, #12
   b4c62:	f005 fee4 	bl	baa2e <_ZNK6String6equalsEPKc>
   b4c66:	b328      	cbz	r0, b4cb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x358>
        nameBuffer = "green";
   b4c68:	49a0      	ldr	r1, [pc, #640]	; (b4eec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x590>)
   b4c6a:	a807      	add	r0, sp, #28
   b4c6c:	f005 fe4f 	bl	ba90e <_ZN6StringaSEPKc>
          railwayIndex = i;
   b4c70:	f8df b284 	ldr.w	fp, [pc, #644]	; b4ef8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x59c>
   b4c74:	f04f 0a00 	mov.w	sl, #0
	return *(this->_M_impl._M_start + __n);
   b4c78:	f04f 0928 	mov.w	r9, #40	; 0x28
      for(int i = 0; i < cities[cityIndex].railways.size(); i++){
   b4c7c:	6835      	ldr	r5, [r6, #0]
   b4c7e:	6838      	ldr	r0, [r7, #0]
   b4c80:	fb09 f105 	mul.w	r1, r9, r5
   b4c84:	1843      	adds	r3, r0, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c86:	5841      	ldr	r1, [r0, r1]
   b4c88:	685b      	ldr	r3, [r3, #4]
   b4c8a:	1a5b      	subs	r3, r3, r1
   b4c8c:	109b      	asrs	r3, r3, #2
   b4c8e:	fb08 f303 	mul.w	r3, r8, r3
   b4c92:	4553      	cmp	r3, sl
   b4c94:	d938      	bls.n	b4d08 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3ac>
        if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4c96:	b9a5      	cbnz	r5, b4cc2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x366>
   b4c98:	4b95      	ldr	r3, [pc, #596]	; (b4ef0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x594>)
   b4c9a:	a80b      	add	r0, sp, #44	; 0x2c
   b4c9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4c9e:	f005 fdee 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
   b4ca2:	a90b      	add	r1, sp, #44	; 0x2c
   b4ca4:	a807      	add	r0, sp, #28
   b4ca6:	f005 feb5 	bl	baa14 <_ZNK6String6equalsERKS_>
   b4caa:	b358      	cbz	r0, b4d04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a8>
   b4cac:	a80b      	add	r0, sp, #44	; 0x2c
   b4cae:	f005 fd9b 	bl	ba7e8 <_ZN6StringD1Ev>
   b4cb2:	e021      	b.n	b4cf8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x39c>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4cb4:	498f      	ldr	r1, [pc, #572]	; (b4ef4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x598>)
   b4cb6:	a803      	add	r0, sp, #12
   b4cb8:	f005 feb9 	bl	baa2e <_ZNK6String6equalsEPKc>
      if((cityIndex == 0 || cityIndex == 1) && (inputBuffer == "green1" || inputBuffer == "green2")){
   b4cbc:	2800      	cmp	r0, #0
   b4cbe:	d1d3      	bne.n	b4c68 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x30c>
   b4cc0:	e7d6      	b.n	b4c70 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x314>
        if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4cc2:	2300      	movs	r3, #0
	return *(this->_M_impl._M_start + __n);
   b4cc4:	6831      	ldr	r1, [r6, #0]
   b4cc6:	6838      	ldr	r0, [r7, #0]
   b4cc8:	9301      	str	r3, [sp, #4]
   b4cca:	fb09 f101 	mul.w	r1, r9, r1
   b4cce:	5841      	ldr	r1, [r0, r1]
   b4cd0:	206c      	movs	r0, #108	; 0x6c
   b4cd2:	fb00 110a 	mla	r1, r0, sl, r1
   b4cd6:	a80f      	add	r0, sp, #60	; 0x3c
   b4cd8:	6b09      	ldr	r1, [r1, #48]	; 0x30
   b4cda:	f005 fdd0 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4cde:	a907      	add	r1, sp, #28
   b4ce0:	a80f      	add	r0, sp, #60	; 0x3c
   b4ce2:	f005 fe97 	bl	baa14 <_ZNK6String6equalsERKS_>
   b4ce6:	1e05      	subs	r5, r0, #0
   b4ce8:	a80f      	add	r0, sp, #60	; 0x3c
   b4cea:	bf18      	it	ne
   b4cec:	2501      	movne	r5, #1
   b4cee:	f005 fd7b 	bl	ba7e8 <_ZN6StringD1Ev>
   b4cf2:	9b01      	ldr	r3, [sp, #4]
   b4cf4:	2b00      	cmp	r3, #0
   b4cf6:	d1d9      	bne.n	b4cac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x350>
   b4cf8:	b10d      	cbz	r5, b4cfe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a2>
          railwayIndex = i;
   b4cfa:	f8cb a000 	str.w	sl, [fp]
      for(int i = 0; i < cities[cityIndex].railways.size(); i++){
   b4cfe:	f10a 0a01 	add.w	sl, sl, #1
   b4d02:	e7bb      	b.n	b4c7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x320>
        if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4d04:	2301      	movs	r3, #1
   b4d06:	e7dd      	b.n	b4cc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x368>
      if(cityIndex == 1 && inputBuffer == "green1"){
   b4d08:	2d01      	cmp	r5, #1
   b4d0a:	4d7b      	ldr	r5, [pc, #492]	; (b4ef8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x59c>)
   b4d0c:	d107      	bne.n	b4d1e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c2>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4d0e:	4976      	ldr	r1, [pc, #472]	; (b4ee8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58c>)
   b4d10:	a803      	add	r0, sp, #12
   b4d12:	f005 fe8c 	bl	baa2e <_ZNK6String6equalsEPKc>
   b4d16:	b110      	cbz	r0, b4d1e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c2>
        railwayIndex--;
   b4d18:	682b      	ldr	r3, [r5, #0]
   b4d1a:	3b01      	subs	r3, #1
   b4d1c:	602b      	str	r3, [r5, #0]
      Serial.printlnf("railway index: %i", railwayIndex);
   b4d1e:	f006 fa8f 	bl	bb240 <_Z16_fetch_usbserialv>
   b4d22:	682a      	ldr	r2, [r5, #0]
   b4d24:	4975      	ldr	r1, [pc, #468]	; (b4efc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a0>)
   b4d26:	f7ff fb71 	bl	b440c <_ZN5Print8printlnfEPKcz>
      if(railwayIndex == -1){
   b4d2a:	682b      	ldr	r3, [r5, #0]
   b4d2c:	3301      	adds	r3, #1
   b4d2e:	d031      	beq.n	b4d94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x438>
   b4d30:	4d73      	ldr	r5, [pc, #460]	; (b4f00 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a4>)
        Serial.printlnf("address: %i", addressArr[bleCount]);
   b4d32:	f8df 91b0 	ldr.w	r9, [pc, #432]	; b4ee4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x588>
        if(cities[cityIndex].railways[railwayIndex].outputs[i].size() == 0 || (cityIndex == 0 && cities[cityIndex].railways[railwayIndex].name == purpleLineCTA.name)){
   b4d36:	f8df a1c0 	ldr.w	sl, [pc, #448]	; b4ef8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x59c>
        Serial.printlnf("address: %i", addressArr[bleCount]);
   b4d3a:	f006 fa81 	bl	bb240 <_Z16_fetch_usbserialv>
   b4d3e:	682b      	ldr	r3, [r5, #0]
   b4d40:	f8d9 2000 	ldr.w	r2, [r9]
   b4d44:	496f      	ldr	r1, [pc, #444]	; (b4f04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a8>)
   b4d46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   b4d4a:	f7ff fb5f 	bl	b440c <_ZN5Print8printlnfEPKcz>
        if(cities[cityIndex].railways[railwayIndex].outputs[i].size() == 0 || (cityIndex == 0 && cities[cityIndex].railways[railwayIndex].name == purpleLineCTA.name)){
   b4d4e:	6832      	ldr	r2, [r6, #0]
   b4d50:	6839      	ldr	r1, [r7, #0]
   b4d52:	f8da b000 	ldr.w	fp, [sl]
   b4d56:	2328      	movs	r3, #40	; 0x28
   b4d58:	4353      	muls	r3, r2
   b4d5a:	58c8      	ldr	r0, [r1, r3]
   b4d5c:	236c      	movs	r3, #108	; 0x6c
   b4d5e:	fb03 000b 	mla	r0, r3, fp, r0
   b4d62:	230c      	movs	r3, #12
   b4d64:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b4d66:	4363      	muls	r3, r4
   b4d68:	eb01 0c03 	add.w	ip, r1, r3
   b4d6c:	58cb      	ldr	r3, [r1, r3]
   b4d6e:	f8dc c004 	ldr.w	ip, [ip, #4]
   b4d72:	459c      	cmp	ip, r3
   b4d74:	d019      	beq.n	b4daa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44e>
   b4d76:	b192      	cbz	r2, b4d9e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x442>
            sequenceArr[2 * railwayIndex + i] = addressArr[bleCount];
   b4d78:	682b      	ldr	r3, [r5, #0]
   b4d7a:	f8d9 2000 	ldr.w	r2, [r9]
   b4d7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b4d82:	f8da 3000 	ldr.w	r3, [sl]
   b4d86:	eb04 0343 	add.w	r3, r4, r3, lsl #1
              sequenceArr[2 * railwayIndex + 1] = addressArr[bleCount];
   b4d8a:	4a5f      	ldr	r2, [pc, #380]	; (b4f08 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ac>)
   b4d8c:	6812      	ldr	r2, [r2, #0]
   b4d8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   b4d92:	e077      	b.n	b4e84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x528>
        txCharacteristic.setValue("incorrect railway color");
   b4d94:	495d      	ldr	r1, [pc, #372]	; (b4f0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b0>)
   b4d96:	2200      	movs	r2, #0
   b4d98:	e6aa      	b.n	b4af0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x194>
   b4d9a:	2401      	movs	r4, #1
   b4d9c:	e7cb      	b.n	b4d36 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3da>
        if(cities[cityIndex].railways[railwayIndex].outputs[i].size() == 0 || (cityIndex == 0 && cities[cityIndex].railways[railwayIndex].name == purpleLineCTA.name)){
   b4d9e:	495c      	ldr	r1, [pc, #368]	; (b4f10 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b4>)
   b4da0:	3030      	adds	r0, #48	; 0x30
   b4da2:	f7ff fdc9 	bl	b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b4da6:	2800      	cmp	r0, #0
   b4da8:	d056      	beq.n	b4e58 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4fc>
          sequenceArr[2 * railwayIndex + i] = 0;
   b4daa:	4b57      	ldr	r3, [pc, #348]	; (b4f08 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ac>)
   b4dac:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
   b4db0:	681b      	ldr	r3, [r3, #0]
   b4db2:	2200      	movs	r2, #0
   b4db4:	f843 202b 	str.w	r2, [r3, fp, lsl #2]
      for(int i = 0; i < 2; i++){
   b4db8:	2c01      	cmp	r4, #1
   b4dba:	d1ee      	bne.n	b4d9a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x43e>
      Wire.beginTransmission(addressArr[bleCount]);
   b4dbc:	f006 fb8e 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b4dc0:	f8d9 2000 	ldr.w	r2, [r9]
   b4dc4:	682b      	ldr	r3, [r5, #0]
   b4dc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b4dca:	f005 fb21 	bl	ba410 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b4dce:	f006 fb85 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b4dd2:	2134      	movs	r1, #52	; 0x34
   b4dd4:	f7ff fa24 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4dd8:	f006 fb80 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b4ddc:	f005 fb1f 	bl	ba41e <_ZN7TwoWire15endTransmissionEv>
      Wire.beginTransmission(addressArr[bleCount + 1]);
   b4de0:	f006 fb7c 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b4de4:	f8d9 3000 	ldr.w	r3, [r9]
   b4de8:	682a      	ldr	r2, [r5, #0]
   b4dea:	3301      	adds	r3, #1
   b4dec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b4df0:	f005 fb0e 	bl	ba410 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('3');
   b4df4:	f006 fb72 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b4df8:	2133      	movs	r1, #51	; 0x33
   b4dfa:	f7ff fa11 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4dfe:	f006 fb6d 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b4e02:	f005 fb0c 	bl	ba41e <_ZN7TwoWire15endTransmissionEv>
   b4e06:	6832      	ldr	r2, [r6, #0]
   b4e08:	6839      	ldr	r1, [r7, #0]
    if(bleCount == cities[cityIndex].railways.size() - 1){
   b4e0a:	4c36      	ldr	r4, [pc, #216]	; (b4ee4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x588>)
   b4e0c:	2328      	movs	r3, #40	; 0x28
   b4e0e:	435a      	muls	r2, r3
   b4e10:	188b      	adds	r3, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4e12:	588a      	ldr	r2, [r1, r2]
   b4e14:	685b      	ldr	r3, [r3, #4]
   b4e16:	1a9b      	subs	r3, r3, r2
   b4e18:	109b      	asrs	r3, r3, #2
   b4e1a:	6822      	ldr	r2, [r4, #0]
   b4e1c:	fb08 f303 	mul.w	r3, r8, r3
   b4e20:	3b01      	subs	r3, #1
   b4e22:	4293      	cmp	r3, r2
   b4e24:	d114      	bne.n	b4e50 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4f4>
      Serial.println("BLE finished");
   b4e26:	f006 fa0b 	bl	bb240 <_Z16_fetch_usbserialv>
   b4e2a:	493a      	ldr	r1, [pc, #232]	; (b4f14 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b8>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4e2c:	4d3a      	ldr	r5, [pc, #232]	; (b4f18 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5bc>)
   b4e2e:	f005 fc7c 	bl	ba72a <_ZN5Print7printlnEPKc>
      userInput = true;
   b4e32:	4b3a      	ldr	r3, [pc, #232]	; (b4f1c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c0>)
        network_on(*this, 0, 0, NULL);
   b4e34:	6868      	ldr	r0, [r5, #4]
   b4e36:	2201      	movs	r2, #1
   b4e38:	701a      	strb	r2, [r3, #0]
   b4e3a:	2300      	movs	r3, #0
   b4e3c:	461a      	mov	r2, r3
   b4e3e:	4619      	mov	r1, r3
   b4e40:	f003 ffe4 	bl	b8e0c <network_on>
        network_connect(*this, flags, 0, NULL);
   b4e44:	2300      	movs	r3, #0
   b4e46:	6868      	ldr	r0, [r5, #4]
   b4e48:	461a      	mov	r2, r3
   b4e4a:	4619      	mov	r1, r3
   b4e4c:	f003 ffbe 	bl	b8dcc <network_connect>
    bleCount++;
   b4e50:	6823      	ldr	r3, [r4, #0]
   b4e52:	3301      	adds	r3, #1
   b4e54:	6023      	str	r3, [r4, #0]
   b4e56:	e5fe      	b.n	b4a56 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
   b4e58:	4924      	ldr	r1, [pc, #144]	; (b4eec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x590>)
   b4e5a:	a807      	add	r0, sp, #28
   b4e5c:	f005 fde7 	bl	baa2e <_ZNK6String6equalsEPKc>
          if(cityIndex == 0 && nameBuffer == "green"){
   b4e60:	2800      	cmp	r0, #0
   b4e62:	d089      	beq.n	b4d78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x41c>
   b4e64:	4920      	ldr	r1, [pc, #128]	; (b4ee8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58c>)
   b4e66:	a803      	add	r0, sp, #12
   b4e68:	f005 fde1 	bl	baa2e <_ZNK6String6equalsEPKc>
            if(inputBuffer == "green1"){
   b4e6c:	b340      	cbz	r0, b4ec0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x564>
	return *(this->_M_impl._M_start + __n);
   b4e6e:	f8d9 2000 	ldr.w	r2, [r9]
              sequenceArr[2 * railwayIndex] = addressArr[bleCount];
   b4e72:	682b      	ldr	r3, [r5, #0]
   b4e74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b4e78:	4b23      	ldr	r3, [pc, #140]	; (b4f08 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ac>)
   b4e7a:	f8da 2000 	ldr.w	r2, [sl]
   b4e7e:	681b      	ldr	r3, [r3, #0]
   b4e80:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
          if(cityIndex == 0){
   b4e84:	6833      	ldr	r3, [r6, #0]
   b4e86:	2b00      	cmp	r3, #0
   b4e88:	d196      	bne.n	b4db8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x45c>
   b4e8a:	4b25      	ldr	r3, [pc, #148]	; (b4f20 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c4>)
            if(inputBuffer == String(brownLineCTA.name.c_str())){
   b4e8c:	a80f      	add	r0, sp, #60	; 0x3c
   b4e8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4e90:	f005 fcf5 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4e94:	a90f      	add	r1, sp, #60	; 0x3c
   b4e96:	a803      	add	r0, sp, #12
   b4e98:	f005 fdbc 	bl	baa14 <_ZNK6String6equalsERKS_>
   b4e9c:	4682      	mov	sl, r0
   b4e9e:	a80f      	add	r0, sp, #60	; 0x3c
   b4ea0:	f005 fca2 	bl	ba7e8 <_ZN6StringD1Ev>
   b4ea4:	f1ba 0f00 	cmp.w	sl, #0
   b4ea8:	d040      	beq.n	b4f2c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d0>
            brownLineCTAAdr = sequenceArr[2 * railwayIndex + i];
   b4eaa:	4b13      	ldr	r3, [pc, #76]	; (b4ef8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x59c>)
   b4eac:	4a16      	ldr	r2, [pc, #88]	; (b4f08 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ac>)
   b4eae:	681b      	ldr	r3, [r3, #0]
   b4eb0:	6812      	ldr	r2, [r2, #0]
   b4eb2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   b4eb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b4eba:	4b1a      	ldr	r3, [pc, #104]	; (b4f24 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c8>)
              greenLineCTAAdr[0] = sequenceArr[2 * railwayIndex];
   b4ebc:	601a      	str	r2, [r3, #0]
   b4ebe:	e77b      	b.n	b4db8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x45c>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4ec0:	490c      	ldr	r1, [pc, #48]	; (b4ef4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x598>)
   b4ec2:	a803      	add	r0, sp, #12
   b4ec4:	f005 fdb3 	bl	baa2e <_ZNK6String6equalsEPKc>
            }else if(inputBuffer == "green2"){
   b4ec8:	2800      	cmp	r0, #0
   b4eca:	d0db      	beq.n	b4e84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x528>
              sequenceArr[2 * railwayIndex + 1] = addressArr[bleCount];
   b4ecc:	682b      	ldr	r3, [r5, #0]
   b4ece:	f8d9 2000 	ldr.w	r2, [r9]
   b4ed2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b4ed6:	f8da 3000 	ldr.w	r3, [sl]
   b4eda:	005b      	lsls	r3, r3, #1
   b4edc:	3301      	adds	r3, #1
   b4ede:	e754      	b.n	b4d8a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x42e>
   b4ee0:	20035448 	.word	0x20035448
   b4ee4:	200352fc 	.word	0x200352fc
   b4ee8:	000be858 	.word	0x000be858
   b4eec:	000be85f 	.word	0x000be85f
   b4ef0:	2003e4e8 	.word	0x2003e4e8
   b4ef4:	000be865 	.word	0x000be865
   b4ef8:	200350b4 	.word	0x200350b4
   b4efc:	000be86c 	.word	0x000be86c
   b4f00:	200352f0 	.word	0x200352f0
   b4f04:	000be896 	.word	0x000be896
   b4f08:	2003e694 	.word	0x2003e694
   b4f0c:	000be87e 	.word	0x000be87e
   b4f10:	2003e518 	.word	0x2003e518
   b4f14:	000be8a2 	.word	0x000be8a2
   b4f18:	2003e718 	.word	0x2003e718
   b4f1c:	2003e6ac 	.word	0x2003e6ac
   b4f20:	200353d8 	.word	0x200353d8
   b4f24:	20035444 	.word	0x20035444
   b4f28:	684bda13 	.word	0x684bda13
   b4f2c:	492f      	ldr	r1, [pc, #188]	; (b4fec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x690>)
   b4f2e:	a803      	add	r0, sp, #12
   b4f30:	f005 fd7d 	bl	baa2e <_ZNK6String6equalsEPKc>
            }else if(inputBuffer == "green1"){
   b4f34:	b138      	cbz	r0, b4f46 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ea>
              greenLineCTAAdr[0] = sequenceArr[2 * railwayIndex];
   b4f36:	4b2e      	ldr	r3, [pc, #184]	; (b4ff0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x694>)
   b4f38:	681a      	ldr	r2, [r3, #0]
   b4f3a:	4b2e      	ldr	r3, [pc, #184]	; (b4ff4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x698>)
   b4f3c:	681b      	ldr	r3, [r3, #0]
   b4f3e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
   b4f42:	4b2d      	ldr	r3, [pc, #180]	; (b4ff8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x69c>)
   b4f44:	e7ba      	b.n	b4ebc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x560>
   b4f46:	492d      	ldr	r1, [pc, #180]	; (b4ffc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6a0>)
   b4f48:	a803      	add	r0, sp, #12
   b4f4a:	f005 fd70 	bl	baa2e <_ZNK6String6equalsEPKc>
            }else if(inputBuffer == "green2"){
   b4f4e:	2800      	cmp	r0, #0
   b4f50:	f43f af32 	beq.w	b4db8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x45c>
              greenLineCTAAdr[1] = sequenceArr[2 * railwayIndex + 1];
   b4f54:	4b26      	ldr	r3, [pc, #152]	; (b4ff0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x694>)
   b4f56:	4a27      	ldr	r2, [pc, #156]	; (b4ff4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x698>)
   b4f58:	681b      	ldr	r3, [r3, #0]
   b4f5a:	6812      	ldr	r2, [r2, #0]
   b4f5c:	005b      	lsls	r3, r3, #1
   b4f5e:	3301      	adds	r3, #1
   b4f60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b4f64:	4b24      	ldr	r3, [pc, #144]	; (b4ff8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x69c>)
   b4f66:	605a      	str	r2, [r3, #4]
   b4f68:	e726      	b.n	b4db8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x45c>
  }else if(inputBuffer.indexOf("reset") == 0){
   b4f6a:	4925      	ldr	r1, [pc, #148]	; (b5000 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6a4>)
   b4f6c:	a80f      	add	r0, sp, #60	; 0x3c
   b4f6e:	f005 fc86 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
   b4f72:	a90f      	add	r1, sp, #60	; 0x3c
   b4f74:	a803      	add	r0, sp, #12
   b4f76:	f005 fd7b 	bl	baa70 <_ZNK6String7indexOfERKS_>
   b4f7a:	4604      	mov	r4, r0
   b4f7c:	a80f      	add	r0, sp, #60	; 0x3c
   b4f7e:	f005 fc33 	bl	ba7e8 <_ZN6StringD1Ev>
   b4f82:	2c00      	cmp	r4, #0
   b4f84:	f47f ad67 	bne.w	b4a56 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f88:	4d1e      	ldr	r5, [pc, #120]	; (b5004 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6a8>)
      Serial.printlnf("turning off: %i", i);
   b4f8a:	4e1f      	ldr	r6, [pc, #124]	; (b5008 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6ac>)
   b4f8c:	e9d5 2300 	ldrd	r2, r3, [r5]
   b4f90:	1a9b      	subs	r3, r3, r2
    for(int i = 0; i < addressArr.size(); i++){
   b4f92:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b4f96:	d217      	bcs.n	b4fc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x66c>
      Serial.printlnf("turning off: %i", i);
   b4f98:	f006 f952 	bl	bb240 <_Z16_fetch_usbserialv>
   b4f9c:	4622      	mov	r2, r4
   b4f9e:	4631      	mov	r1, r6
   b4fa0:	f7ff fa34 	bl	b440c <_ZN5Print8printlnfEPKcz>
      Wire.beginTransmission(addressArr[i]);
   b4fa4:	f006 fa9a 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b4fa8:	682b      	ldr	r3, [r5, #0]
   b4faa:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b4fae:	f005 fa2f 	bl	ba410 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b4fb2:	f006 fa93 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b4fb6:	2134      	movs	r1, #52	; 0x34
   b4fb8:	f7ff f932 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4fbc:	f006 fa8e 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b4fc0:	f005 fa2d 	bl	ba41e <_ZN7TwoWire15endTransmissionEv>
    for(int i = 0; i < addressArr.size(); i++){
   b4fc4:	3401      	adds	r4, #1
   b4fc6:	e7e1      	b.n	b4f8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x630>
    bleCount = 0;
   b4fc8:	4a10      	ldr	r2, [pc, #64]	; (b500c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6b0>)
    cityIndex = -1;
   b4fca:	4911      	ldr	r1, [pc, #68]	; (b5010 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6b4>)
    bleCount = 0;
   b4fcc:	2300      	movs	r3, #0
   b4fce:	6013      	str	r3, [r2, #0]
    cityIndex = -1;
   b4fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b4fd4:	600a      	str	r2, [r1, #0]
    railwayIndex = -1;
   b4fd6:	4906      	ldr	r1, [pc, #24]	; (b4ff0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x694>)
   b4fd8:	600a      	str	r2, [r1, #0]
    userInput = false;
   b4fda:	4a0e      	ldr	r2, [pc, #56]	; (b5014 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6b8>)
   b4fdc:	7013      	strb	r3, [r2, #0]
    Serial.println("reset done");
   b4fde:	f006 f92f 	bl	bb240 <_Z16_fetch_usbserialv>
   b4fe2:	490d      	ldr	r1, [pc, #52]	; (b5018 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6bc>)
   b4fe4:	f005 fba1 	bl	ba72a <_ZN5Print7printlnEPKc>
   b4fe8:	e535      	b.n	b4a56 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
   b4fea:	bf00      	nop
   b4fec:	000be858 	.word	0x000be858
   b4ff0:	200350b4 	.word	0x200350b4
   b4ff4:	2003e694 	.word	0x2003e694
   b4ff8:	200355a8 	.word	0x200355a8
   b4ffc:	000be865 	.word	0x000be865
   b5000:	000be8af 	.word	0x000be8af
   b5004:	200352f0 	.word	0x200352f0
   b5008:	000be8b5 	.word	0x000be8b5
   b500c:	200352fc 	.word	0x200352fc
   b5010:	200350a0 	.word	0x200350a0
   b5014:	2003e6ac 	.word	0x2003e6ac
   b5018:	000be8c5 	.word	0x000be8c5

000b501c <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b501c:	2900      	cmp	r1, #0
      _M_create_storage(size_t __n)
   b501e:	b538      	push	{r3, r4, r5, lr}
   b5020:	4604      	mov	r4, r0
      _M_allocate(size_t __n)
   b5022:	ea4f 0581 	mov.w	r5, r1, lsl #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5026:	d00c      	beq.n	b5042 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x26>
	if (__n > this->_M_max_size())
   b5028:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   b502c:	d301      	bcc.n	b5032 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
   b502e:	f006 fabb 	bl	bb5a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5032:	4628      	mov	r0, r5
   b5034:	f7ff f82f 	bl	b4096 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5038:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b503c:	4428      	add	r0, r5
   b503e:	60a0      	str	r0, [r4, #8]
      }
   b5040:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5042:	4608      	mov	r0, r1
   b5044:	e7f8      	b.n	b5038 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x1c>

000b5046 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b5046:	b538      	push	{r3, r4, r5, lr}
   b5048:	4604      	mov	r4, r0
   b504a:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b504c:	42ac      	cmp	r4, r5
   b504e:	d004      	beq.n	b505a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x14>
      }
   b5050:	4620      	mov	r0, r4
   b5052:	f7ff fb8f 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5056:	340c      	adds	r4, #12
   b5058:	e7f8      	b.n	b504c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x6>
	    std::_Destroy(std::__addressof(*__first));
	}
   b505a:	bd38      	pop	{r3, r4, r5, pc}

000b505c <_ZN7RailwayD1Ev>:
#include "Checkpoint.cpp"
#include <string>

//container for all data for each rail line
class Railway{
   b505c:	b510      	push	{r4, lr}
   b505e:	4604      	mov	r4, r0
   b5060:	3048      	adds	r0, #72	; 0x48
   b5062:	f7ff fba8 	bl	b47b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b5066:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b506a:	f006 fad5 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   b506e:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b5072:	f7ff ffe8 	bl	b5046 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	_M_deallocate(_M_impl._M_start,
   b5076:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b5078:	b118      	cbz	r0, b5082 <_ZN7RailwayD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b507a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	::operator delete(__p
   b507c:	1a09      	subs	r1, r1, r0
   b507e:	f7ff f810 	bl	b40a2 <_ZdlPvj>
      }
   b5082:	f104 0018 	add.w	r0, r4, #24
   b5086:	f7ff fb75 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b508a:	f104 000c 	add.w	r0, r4, #12
   b508e:	f7ff fb67 	bl	b4760 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b5092:	4620      	mov	r0, r4
   b5094:	f7ff fb5a 	bl	b474c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b5098:	4620      	mov	r0, r4
   b509a:	bd10      	pop	{r4, pc}

000b509c <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b509c:	b538      	push	{r3, r4, r5, lr}
   b509e:	4604      	mov	r4, r0
   b50a0:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b50a2:	42ac      	cmp	r4, r5
   b50a4:	d004      	beq.n	b50b0 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_+0x14>
      __pointer->~_Tp();
   b50a6:	4620      	mov	r0, r4
   b50a8:	f7ff ffd8 	bl	b505c <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b50ac:	346c      	adds	r4, #108	; 0x6c
   b50ae:	e7f8      	b.n	b50a2 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_+0x6>
	}
   b50b0:	bd38      	pop	{r3, r4, r5, pc}

000b50b2 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b50b2:	b510      	push	{r4, lr}
   b50b4:	4604      	mov	r4, r0
	__destroy(__first, __last);
   b50b6:	e9d0 0100 	ldrd	r0, r1, [r0]
   b50ba:	f7ff ffef 	bl	b509c <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   b50be:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b50c0:	b118      	cbz	r0, b50ca <_ZNSt6vectorI7RailwaySaIS0_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b50c2:	68a1      	ldr	r1, [r4, #8]
   b50c4:	1a09      	subs	r1, r1, r0
   b50c6:	f7fe ffec 	bl	b40a2 <_ZdlPvj>
      }
   b50ca:	4620      	mov	r0, r4
   b50cc:	bd10      	pop	{r4, pc}

000b50ce <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b50ce:	b538      	push	{r3, r4, r5, lr}
   b50d0:	4604      	mov	r4, r0
   b50d2:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b50d4:	42ac      	cmp	r4, r5
   b50d6:	d008      	beq.n	b50ea <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_+0x1c>
   b50d8:	f104 000c 	add.w	r0, r4, #12
   b50dc:	f006 fa9c 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#include "Railway.cpp"

class City{
   b50e0:	4620      	mov	r0, r4
   b50e2:	f7ff ffe6 	bl	b50b2 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b50e6:	3428      	adds	r4, #40	; 0x28
   b50e8:	e7f4      	b.n	b50d4 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_+0x6>
	}
   b50ea:	bd38      	pop	{r3, r4, r5, pc}

000b50ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b50ec:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b50ee:	b510      	push	{r4, lr}
   b50f0:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b50f2:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b50f6:	d005      	beq.n	b5104 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b50f8:	4601      	mov	r1, r0
   b50fa:	4622      	mov	r2, r4
   b50fc:	4618      	mov	r0, r3
   b50fe:	f007 fa49 	bl	bc594 <memmove>
   b5102:	4603      	mov	r3, r0
	}
   b5104:	1918      	adds	r0, r3, r4
   b5106:	bd10      	pop	{r4, pc}

000b5108 <_ZNSt6vectorIiSaIiEEC1ERKS1_>:
      vector(const vector& __x)
   b5108:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b510a:	e9d1 3600 	ldrd	r3, r6, [r1]
   b510e:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5110:	2300      	movs	r3, #0
      vector(const vector& __x)
   b5112:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5114:	e9c0 3300 	strd	r3, r3, [r0]
   b5118:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b511a:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   b511c:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b511e:	f7ff f83f 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5122:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5126:	4406      	add	r6, r0
   b5128:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b512a:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
   b512c:	e9d5 0100 	ldrd	r0, r1, [r5]
   b5130:	f7ff ffdc 	bl	b50ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
   b5134:	6060      	str	r0, [r4, #4]
      }
   b5136:	4620      	mov	r0, r4
   b5138:	bd70      	pop	{r4, r5, r6, pc}
	...

000b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>:
      vector(initializer_list<value_type> __l,
   b513c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b513e:	ab04      	add	r3, sp, #16
   b5140:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5144:	2300      	movs	r3, #0
   b5146:	e9c0 3300 	strd	r3, r3, [r0]
   b514a:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b514c:	4604      	mov	r4, r0
   b514e:	4613      	mov	r3, r2
   b5150:	460e      	mov	r6, r1
   b5152:	0095      	lsls	r5, r2, #2
   b5154:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b5158:	f342 001d 	sbfx	r0, r2, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b515c:	4a0a      	ldr	r2, [pc, #40]	; (b5188 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x4c>)
   b515e:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b5162:	d202      	bcs.n	b516a <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x2e>
	  __throw_length_error(
   b5164:	4809      	ldr	r0, [pc, #36]	; (b518c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x50>)
   b5166:	f006 fa25 	bl	bb5b4 <_ZSt20__throw_length_errorPKc>
   b516a:	9101      	str	r1, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b516c:	f7ff f818 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5170:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b5172:	4602      	mov	r2, r0
   b5174:	6020      	str	r0, [r4, #0]
   b5176:	9901      	ldr	r1, [sp, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5178:	60a5      	str	r5, [r4, #8]
   b517a:	4630      	mov	r0, r6
   b517c:	f7ff ffb6 	bl	b50ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
   b5180:	6060      	str	r0, [r4, #4]
      }
   b5182:	b004      	add	sp, #16
   b5184:	bd70      	pop	{r4, r5, r6, pc}
   b5186:	bf00      	nop
   b5188:	7ffffffc 	.word	0x7ffffffc
   b518c:	000be7b7 	.word	0x000be7b7

000b5190 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>:
      if (&__x != this)
   b5190:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b5192:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5194:	4604      	mov	r4, r0
   b5196:	460d      	mov	r5, r1
      if (&__x != this)
   b5198:	d01d      	beq.n	b51d6 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x46>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b519a:	e9d1 7100 	ldrd	r7, r1, [r1]
			 - this->_M_impl._M_start); }
   b519e:	6802      	ldr	r2, [r0, #0]
   b51a0:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b51a2:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b51a4:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b51a6:	429e      	cmp	r6, r3
   b51a8:	d917      	bls.n	b51da <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x4a>
	  pointer __result = this->_M_allocate(__n);
   b51aa:	10b0      	asrs	r0, r6, #2
   b51ac:	9101      	str	r1, [sp, #4]
   b51ae:	f7fe fff7 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
   b51b2:	9901      	ldr	r1, [sp, #4]
   b51b4:	4602      	mov	r2, r0
   b51b6:	4605      	mov	r5, r0
   b51b8:	4638      	mov	r0, r7
   b51ba:	f7ff ff97 	bl	b50ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b51be:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b51c0:	b118      	cbz	r0, b51ca <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x3a>
			    - this->_M_impl._M_start);
   b51c2:	68a1      	ldr	r1, [r4, #8]
   b51c4:	1a09      	subs	r1, r1, r0
   b51c6:	f7fe ff6c 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b51ca:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b51cc:	4435      	add	r5, r6
   b51ce:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b51d0:	6823      	ldr	r3, [r4, #0]
   b51d2:	4433      	add	r3, r6
   b51d4:	6063      	str	r3, [r4, #4]
    }
   b51d6:	b003      	add	sp, #12
   b51d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b51da:	6843      	ldr	r3, [r0, #4]
   b51dc:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b51de:	429e      	cmp	r6, r3
   b51e0:	d803      	bhi.n	b51ea <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x5a>
   b51e2:	4638      	mov	r0, r7
   b51e4:	f7ff ff82 	bl	b50ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   b51e8:	e7f2      	b.n	b51d0 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x40>
   b51ea:	18f9      	adds	r1, r7, r3
   b51ec:	4638      	mov	r0, r7
   b51ee:	f7ff ff7d 	bl	b50ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
   b51f2:	e9d4 0200 	ldrd	r0, r2, [r4]
   b51f6:	e9d5 3100 	ldrd	r3, r1, [r5]
   b51fa:	1a10      	subs	r0, r2, r0
   b51fc:	4418      	add	r0, r3
   b51fe:	e7f1      	b.n	b51e4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x54>

000b5200 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b5200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5204:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b5206:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5208:	480b      	ldr	r0, [pc, #44]	; (b5238 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x38>)
   b520a:	10a4      	asrs	r4, r4, #2
   b520c:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b520e:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5210:	4627      	mov	r7, r4
   b5212:	4690      	mov	r8, r2
   b5214:	2f00      	cmp	r7, #0
   b5216:	dd08      	ble.n	b522a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x2a>
	      *__result = *__first;
   b5218:	4629      	mov	r1, r5
   b521a:	4640      	mov	r0, r8
   b521c:	f7ff ffb8 	bl	b5190 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b5220:	350c      	adds	r5, #12
	      ++__result;
   b5222:	f108 080c 	add.w	r8, r8, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5226:	3f01      	subs	r7, #1
   b5228:	e7f4      	b.n	b5214 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x14>
	  return __result;
   b522a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b522e:	200c      	movs	r0, #12
   b5230:	fb00 6004 	mla	r0, r0, r4, r6
   b5234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5238:	aaaaaaab 	.word	0xaaaaaaab

000b523c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>:
    std::vector<std::string> colors;
    int tripleIndex = -1;
    int loopIndex = -1;
    int lowerLoopBound, upperLoopBound, lowerGreenBound, upperGreenBound;

    Railway(std::vector<Checkpoint> checkpointInput, std::vector<int> scalerInput, std::vector<int> outputSize, std::string nameInput, std::vector<std::string> colorInput, std::vector<int> boundInput = {0, 0, 0, 0}){
   b523c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5240:	2500      	movs	r5, #0
   b5242:	4699      	mov	r9, r3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b5244:	f100 0338 	add.w	r3, r0, #56	; 0x38
      { _M_string_length = __length; }
   b5248:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   b524c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5250:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
   b5254:	4604      	mov	r4, r0
   b5256:	e9c0 5500 	strd	r5, r5, [r0]
   b525a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b525e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5262:	e9c0 5506 	strd	r5, r5, [r0, #24]
   b5266:	e9c0 5508 	strd	r5, r5, [r0, #32]
   b526a:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
   b526e:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
   b5272:	b099      	sub	sp, #100	; 0x64
      { __c1 = __c2; }
   b5274:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
   b5278:	6505      	str	r5, [r0, #80]	; 0x50
   b527a:	4692      	mov	sl, r2
   b527c:	f100 0b18 	add.w	fp, r0, #24
   b5280:	f100 0830 	add.w	r8, r0, #48	; 0x30
   b5284:	f100 0748 	add.w	r7, r0, #72	; 0x48
      checkpoints = checkpointInput;
   b5288:	f7fe ffe0 	bl	b424c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b528c:	e9d4 2300 	ldrd	r2, r3, [r4]
   b5290:	1a9b      	subs	r3, r3, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b5292:	42ab      	cmp	r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5294:	ea4f 01e3 	mov.w	r1, r3, asr #3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b5298:	da02      	bge.n	b52a0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x64>
	  __throw_length_error(
   b529a:	485f      	ldr	r0, [pc, #380]	; (b5418 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1dc>)
   b529c:	f006 f98a 	bl	bb5b4 <_ZSt20__throw_length_errorPKc>
      { _M_create_storage(__n); }
   b52a0:	a809      	add	r0, sp, #36	; 0x24
   b52a2:	9101      	str	r1, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b52a4:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b52a8:	950b      	str	r5, [sp, #44]	; 0x2c
      { _M_create_storage(__n); }
   b52aa:	f7ff feb7 	bl	b501c <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
      if (__n <= 0)
   b52ae:	9901      	ldr	r1, [sp, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
   b52b0:	9809      	ldr	r0, [sp, #36]	; 0x24
   b52b2:	b131      	cbz	r1, b52c2 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x86>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   b52b4:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	*__first = __tmp;
   b52b8:	008a      	lsls	r2, r1, #2
   b52ba:	4629      	mov	r1, r5
   b52bc:	f007 f984 	bl	bc5c8 <memset>
   b52c0:	4630      	mov	r0, r6
	  _M_finish = __x._M_finish;
   b52c2:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
	  _M_start = __x._M_start;
   b52c6:	9909      	ldr	r1, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b52c8:	6963      	ldr	r3, [r4, #20]
   b52ca:	930e      	str	r3, [sp, #56]	; 0x38
	  _M_finish = __x._M_finish;
   b52cc:	e9c4 1003 	strd	r1, r0, [r4, #12]
      }
   b52d0:	ae0c      	add	r6, sp, #48	; 0x30
	  _M_end_of_storage = __x._M_end_of_storage;
   b52d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b52d4:	6161      	str	r1, [r4, #20]
	  _M_finish = __x._M_finish;
   b52d6:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
      }
   b52da:	4630      	mov	r0, r6
	  _M_start = __x._M_start;
   b52dc:	2500      	movs	r5, #0
	  _M_finish = __x._M_finish;
   b52de:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b52e2:	950b      	str	r5, [sp, #44]	; 0x2c
      }
   b52e4:	f7ff fa3c 	bl	b4760 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b52e8:	a809      	add	r0, sp, #36	; 0x24
   b52ea:	f7ff fa39 	bl	b4760 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      distances = std::vector<float>(checkpoints.size(), 0);
      scalers = scalerInput;
   b52ee:	4651      	mov	r1, sl
   b52f0:	4658      	mov	r0, fp
   b52f2:	f7ff ff4d 	bl	b5190 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      outputs = {std::vector<int>(outputSize[0], 0), std::vector<int>(outputSize[1], 0), std::vector<int>(outputSize[2], 0), std::vector<int>(outputSize[3], 0)};
   b52f6:	f8d9 1000 	ldr.w	r1, [r9]
   b52fa:	9506      	str	r5, [sp, #24]
   b52fc:	6809      	ldr	r1, [r1, #0]
   b52fe:	ab02      	add	r3, sp, #8
   b5300:	aa06      	add	r2, sp, #24
   b5302:	4630      	mov	r0, r6
   b5304:	f7ff fa6a 	bl	b47dc <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b5308:	f8d9 1000 	ldr.w	r1, [r9]
   b530c:	9507      	str	r5, [sp, #28]
   b530e:	6849      	ldr	r1, [r1, #4]
   b5310:	ab03      	add	r3, sp, #12
   b5312:	aa07      	add	r2, sp, #28
   b5314:	a80f      	add	r0, sp, #60	; 0x3c
   b5316:	f7ff fa61 	bl	b47dc <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b531a:	f8d9 1000 	ldr.w	r1, [r9]
   b531e:	9508      	str	r5, [sp, #32]
   b5320:	6889      	ldr	r1, [r1, #8]
   b5322:	ab04      	add	r3, sp, #16
   b5324:	aa08      	add	r2, sp, #32
   b5326:	a812      	add	r0, sp, #72	; 0x48
   b5328:	f7ff fa58 	bl	b47dc <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b532c:	f8d9 1000 	ldr.w	r1, [r9]
   b5330:	9509      	str	r5, [sp, #36]	; 0x24
   b5332:	ab05      	add	r3, sp, #20
   b5334:	aa09      	add	r2, sp, #36	; 0x24
   b5336:	68c9      	ldr	r1, [r1, #12]
   b5338:	a815      	add	r0, sp, #84	; 0x54
   b533a:	f7ff fa4f 	bl	b47dc <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
			 - this->_M_impl._M_start); }
   b533e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b5340:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b5342:	1a9b      	subs	r3, r3, r2
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);

	if (__len > capacity())
   b5344:	2b2f      	cmp	r3, #47	; 0x2f
   b5346:	d83f      	bhi.n	b53c8 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x18c>
	  pointer __result = this->_M_allocate(__n);
   b5348:	2004      	movs	r0, #4
   b534a:	f7fe fecb 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b534e:	46b3      	mov	fp, r6
   b5350:	4605      	mov	r5, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b5352:	f100 0a30 	add.w	sl, r0, #48	; 0x30
	  _ForwardIterator __cur = __result;
   b5356:	4681      	mov	r9, r0
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5358:	f1b9 0f00 	cmp.w	r9, #0
   b535c:	d003      	beq.n	b5366 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x12a>
   b535e:	4659      	mov	r1, fp
   b5360:	4648      	mov	r0, r9
   b5362:	f7ff fed1 	bl	b5108 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b5366:	f109 090c 	add.w	r9, r9, #12
   b536a:	45d1      	cmp	r9, sl
   b536c:	f10b 0b0c 	add.w	fp, fp, #12
   b5370:	d1f2      	bne.n	b5358 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x11c>
	__destroy(__first, __last);
   b5372:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b5376:	f7ff fe66 	bl	b5046 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	    _S_check_init_len(__len, _M_get_Tp_allocator());
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
   b537a:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b537c:	b118      	cbz	r0, b5386 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x14a>
			  this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_start);
   b537e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b5380:	1a09      	subs	r1, r1, r0
   b5382:	f7fe fe8e 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b5386:	e9c4 5a09 	strd	r5, sl, [r4, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b538a:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
   b538e:	ad18      	add	r5, sp, #96	; 0x60
   b5390:	3d0c      	subs	r5, #12
      }
   b5392:	4628      	mov	r0, r5
   b5394:	f7ff f9ee 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5398:	42b5      	cmp	r5, r6
   b539a:	d1f9      	bne.n	b5390 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x154>
	this->_M_assign(__str);
   b539c:	9922      	ldr	r1, [sp, #136]	; 0x88
   b539e:	4640      	mov	r0, r8
   b53a0:	f006 f958 	bl	bb654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      name = nameInput;
      colors = colorInput;
   b53a4:	4638      	mov	r0, r7
   b53a6:	9923      	ldr	r1, [sp, #140]	; 0x8c
   b53a8:	f7fe ffa2 	bl	b42f0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
	return *(this->_M_impl._M_start + __n);
   b53ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b53ae:	681b      	ldr	r3, [r3, #0]
      lowerLoopBound = boundInput[0];
   b53b0:	681a      	ldr	r2, [r3, #0]
   b53b2:	65e2      	str	r2, [r4, #92]	; 0x5c
      upperLoopBound = boundInput[1];
   b53b4:	685a      	ldr	r2, [r3, #4]
   b53b6:	6622      	str	r2, [r4, #96]	; 0x60
      lowerGreenBound = boundInput[2];
   b53b8:	689a      	ldr	r2, [r3, #8]
      upperGreenBound = boundInput[3];
   b53ba:	68db      	ldr	r3, [r3, #12]
      lowerGreenBound = boundInput[2];
   b53bc:	6662      	str	r2, [r4, #100]	; 0x64
    }
   b53be:	4620      	mov	r0, r4
      upperGreenBound = boundInput[3];
   b53c0:	66a3      	str	r3, [r4, #104]	; 0x68
    }
   b53c2:	b019      	add	sp, #100	; 0x64
   b53c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b53c8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   b53ca:	1aad      	subs	r5, r5, r2
	  }
	else if (size() >= __len)
   b53cc:	2d2f      	cmp	r5, #47	; 0x2f
   b53ce:	d90b      	bls.n	b53e8 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ac>
			      _Category>::__copy_m(__first, __last, __result);
   b53d0:	a918      	add	r1, sp, #96	; 0x60
   b53d2:	4630      	mov	r0, r6
   b53d4:	f7ff ff14 	bl	b5200 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b53d8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b53da:	4288      	cmp	r0, r1
   b53dc:	4605      	mov	r5, r0
   b53de:	d0d6      	beq.n	b538e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b53e0:	f7ff fe31 	bl	b5046 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b53e4:	62a5      	str	r5, [r4, #40]	; 0x28
   b53e6:	e7d2      	b.n	b538e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b53e8:	4435      	add	r5, r6
   b53ea:	4629      	mov	r1, r5
   b53ec:	4630      	mov	r0, r6
   b53ee:	f7ff ff07 	bl	b5200 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b53f2:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
   b53f6:	ab18      	add	r3, sp, #96	; 0x60
   b53f8:	429d      	cmp	r5, r3
   b53fa:	d00a      	beq.n	b5412 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1d6>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b53fc:	f1b9 0f00 	cmp.w	r9, #0
   b5400:	d003      	beq.n	b540a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ce>
   b5402:	4629      	mov	r1, r5
   b5404:	4648      	mov	r0, r9
   b5406:	f7ff fe7f 	bl	b5108 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b540a:	350c      	adds	r5, #12
   b540c:	f109 090c 	add.w	r9, r9, #12
   b5410:	e7f1      	b.n	b53f6 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ba>
	    _ForwardIterator __mid = __first;
	    std::advance(__mid, size());
	    std::copy(__first, __mid, this->_M_impl._M_start);
	    const size_type __attribute__((__unused__)) __n = __len - size();
	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	    this->_M_impl._M_finish =
   b5412:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
   b5416:	e7ba      	b.n	b538e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b5418:	000be7b7 	.word	0x000be7b7

000b541c <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   b541c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5420:	ed2d 8b0e 	vpush	{d8-d14}
   b5424:	2801      	cmp	r0, #1
   b5426:	4db4      	ldr	r5, [pc, #720]	; (b56f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2dc>)
   b5428:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
   b542c:	f041 8112 	bne.w	b6654 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1238>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5430:	2400      	movs	r4, #0
    SleepResult() {}
   b5432:	4bb2      	ldr	r3, [pc, #712]	; (b56fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e0>)
   b5434:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5436:	e9c5 4400 	strd	r4, r4, [r5]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b543a:	2003      	movs	r0, #3
   b543c:	f003 fc9a 	bl	b8d74 <set_system_mode>
  public:
    float lat;
    float lon;

    Checkpoint(float la, float lo){
      lat = la;
   b5440:	4baf      	ldr	r3, [pc, #700]	; (b5700 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e4>)
   b5442:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b5444:	4baf      	ldr	r3, [pc, #700]	; (b5704 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e8>)
   b5446:	93a5      	str	r3, [sp, #660]	; 0x294
      lat = la;
   b5448:	4baf      	ldr	r3, [pc, #700]	; (b5708 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2ec>)
   b544a:	93a6      	str	r3, [sp, #664]	; 0x298
      lon = lo;
   b544c:	4baf      	ldr	r3, [pc, #700]	; (b570c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f0>)
   b544e:	93a7      	str	r3, [sp, #668]	; 0x29c
      lat = la;
   b5450:	4baf      	ldr	r3, [pc, #700]	; (b5710 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f4>)
   b5452:	93a8      	str	r3, [sp, #672]	; 0x2a0
      lon = lo;
   b5454:	4baf      	ldr	r3, [pc, #700]	; (b5714 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f8>)
   b5456:	93a9      	str	r3, [sp, #676]	; 0x2a4
      lat = la;
   b5458:	4baf      	ldr	r3, [pc, #700]	; (b5718 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2fc>)
   b545a:	93aa      	str	r3, [sp, #680]	; 0x2a8
      lon = lo;
   b545c:	4baf      	ldr	r3, [pc, #700]	; (b571c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x300>)
   b545e:	93ab      	str	r3, [sp, #684]	; 0x2ac
      lat = la;
   b5460:	4baf      	ldr	r3, [pc, #700]	; (b5720 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x304>)
   b5462:	93ac      	str	r3, [sp, #688]	; 0x2b0
      lon = lo;
   b5464:	4baf      	ldr	r3, [pc, #700]	; (b5724 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x308>)
   b5466:	93ad      	str	r3, [sp, #692]	; 0x2b4
);
   b5468:	aba4      	add	r3, sp, #656	; 0x290
   b546a:	937e      	str	r3, [sp, #504]	; 0x1f8
   b546c:	2305      	movs	r3, #5
   b546e:	937f      	str	r3, [sp, #508]	; 0x1fc
   b5470:	f50d 7ae8 	add.w	sl, sp, #464	; 0x1d0
   b5474:	aa7e      	add	r2, sp, #504	; 0x1f8
   b5476:	4653      	mov	r3, sl
   b5478:	ca06      	ldmia	r2, {r1, r2}
   b547a:	a88c      	add	r0, sp, #560	; 0x230
   b547c:	f7ff f9d0 	bl	b4820 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5480:	4ba9      	ldr	r3, [pc, #676]	; (b5728 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x30c>)
      lat = la;
   b5482:	eddf 8aaa 	vldr	s17, [pc, #680]	; b572c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x310>
      lon = lo;
   b5486:	ed9f 8aaa 	vldr	s16, [pc, #680]	; b5730 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>
      lat = la;
   b548a:	eddf 9aaa 	vldr	s19, [pc, #680]	; b5734 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x318>
      lon = lo;
   b548e:	ed9f 9aaa 	vldr	s18, [pc, #680]	; b5738 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x31c>
      lat = la;
   b5492:	eddf aaaa 	vldr	s21, [pc, #680]	; b573c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>
      lon = lo;
   b5496:	ed9f aaaa 	vldr	s20, [pc, #680]	; b5740 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>
      lat = la;
   b549a:	eddf baaa 	vldr	s23, [pc, #680]	; b5744 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>
      lon = lo;
   b549e:	ed9f baaa 	vldr	s22, [pc, #680]	; b5748 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>
      lat = la;
   b54a2:	eddf daaa 	vldr	s27, [pc, #680]	; b574c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>
      lon = lo;
   b54a6:	ed9f daaa 	vldr	s26, [pc, #680]	; b5750 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>
      lat = la;
   b54aa:	eddf caaa 	vldr	s25, [pc, #680]	; b5754 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>
      lon = lo;
   b54ae:	ed9f caaa 	vldr	s24, [pc, #680]	; b5758 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>
   b54b2:	ed9f eaaa 	vldr	s28, [pc, #680]	; b575c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>
   b54b6:	461f      	mov	r7, r3
   b54b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b54ba:	f50d 7b17 	add.w	fp, sp, #604	; 0x25c
   b54be:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
   b54c2:	2204      	movs	r2, #4
   b54c4:	ad89      	add	r5, sp, #548	; 0x224
   b54c6:	ab7c      	add	r3, sp, #496	; 0x1f0
   b54c8:	f8cd b1f0 	str.w	fp, [sp, #496]	; 0x1f0
   b54cc:	927d      	str	r2, [sp, #500]	; 0x1f4
   b54ce:	e893 0006 	ldmia.w	r3, {r1, r2}
   b54d2:	4628      	mov	r0, r5
   b54d4:	f7ff fe32 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b54d8:	2228      	movs	r2, #40	; 0x28
   b54da:	e9cd 2494 	strd	r2, r4, [sp, #592]	; 0x250
   b54de:	aa93      	add	r2, sp, #588	; 0x24c
   b54e0:	927a      	str	r2, [sp, #488]	; 0x1e8
   b54e2:	2204      	movs	r2, #4
   b54e4:	f50d 7806 	add.w	r8, sp, #536	; 0x218
   b54e8:	ab7a      	add	r3, sp, #488	; 0x1e8
   b54ea:	927b      	str	r2, [sp, #492]	; 0x1ec
   b54ec:	e893 0006 	ldmia.w	r3, {r1, r2}
   b54f0:	4640      	mov	r0, r8
   b54f2:	9493      	str	r4, [sp, #588]	; 0x24c
   b54f4:	9496      	str	r4, [sp, #600]	; 0x258
   b54f6:	f7ff fe21 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b54fa:	a89d      	add	r0, sp, #628	; 0x274
   b54fc:	4998      	ldr	r1, [pc, #608]	; (b5760 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>)
   b54fe:	f7fe fe03 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5502:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5504:	4997      	ldr	r1, [pc, #604]	; (b5764 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>)
   b5506:	f7fe fdff 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b550a:	a8b6      	add	r0, sp, #728	; 0x2d8
   b550c:	4996      	ldr	r1, [pc, #600]	; (b5768 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>)
   b550e:	f7fe fdfb 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5512:	a9b0      	add	r1, sp, #704	; 0x2c0
   b5514:	9178      	str	r1, [sp, #480]	; 0x1e0
   b5516:	2102      	movs	r1, #2
   b5518:	f50d 79e4 	add.w	r9, sp, #456	; 0x1c8
   b551c:	9179      	str	r1, [sp, #484]	; 0x1e4
   b551e:	aa78      	add	r2, sp, #480	; 0x1e0
   b5520:	464b      	mov	r3, r9
   b5522:	ca06      	ldmia	r2, {r1, r2}
   b5524:	a883      	add	r0, sp, #524	; 0x20c
   b5526:	f7ff f9af 	bl	b4888 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b552a:	4621      	mov	r1, r4
   b552c:	2210      	movs	r2, #16
   b552e:	a88f      	add	r0, sp, #572	; 0x23c
   b5530:	f007 f84a 	bl	bc5c8 <memset>
   b5534:	aa8f      	add	r2, sp, #572	; 0x23c
   b5536:	9276      	str	r2, [sp, #472]	; 0x1d8
   b5538:	2204      	movs	r2, #4
   b553a:	ae80      	add	r6, sp, #512	; 0x200
   b553c:	ab76      	add	r3, sp, #472	; 0x1d8
   b553e:	9277      	str	r2, [sp, #476]	; 0x1dc
   b5540:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5544:	4630      	mov	r0, r6
   b5546:	f7ff fdf9 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLineCTA = Railway(
   b554a:	aa83      	add	r2, sp, #524	; 0x20c
   b554c:	9201      	str	r2, [sp, #4]
   b554e:	aa9d      	add	r2, sp, #628	; 0x274
   b5550:	4643      	mov	r3, r8
   b5552:	a98c      	add	r1, sp, #560	; 0x230
   b5554:	9602      	str	r6, [sp, #8]
   b5556:	9200      	str	r2, [sp, #0]
   b5558:	4884      	ldr	r0, [pc, #528]	; (b576c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>)
   b555a:	462a      	mov	r2, r5
   b555c:	f7ff fe6e 	bl	b523c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b5560:	4630      	mov	r0, r6
   b5562:	f7ff f907 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5566:	a883      	add	r0, sp, #524	; 0x20c
   b5568:	f7ff f925 	bl	b47b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b556c:	a8b6      	add	r0, sp, #728	; 0x2d8
   b556e:	f006 f853 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5572:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5574:	f006 f850 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5578:	a89d      	add	r0, sp, #628	; 0x274
   b557a:	f006 f84d 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b557e:	4640      	mov	r0, r8
   b5580:	f7ff f8f8 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5584:	4628      	mov	r0, r5
   b5586:	f7ff f8f5 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b558a:	a88c      	add	r0, sp, #560	; 0x230
   b558c:	f7ff f8de 	bl	b474c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5590:	4b77      	ldr	r3, [pc, #476]	; (b5770 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
   b5592:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b5594:	4b77      	ldr	r3, [pc, #476]	; (b5774 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>)
   b5596:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b5598:	4b77      	ldr	r3, [pc, #476]	; (b5778 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x35c>)
   b559a:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b559c:	4b77      	ldr	r3, [pc, #476]	; (b577c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x360>)
   b559e:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b55a0:	4b77      	ldr	r3, [pc, #476]	; (b5780 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x364>)
   b55a2:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b55a4:	4b77      	ldr	r3, [pc, #476]	; (b5784 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x368>)
   b55a6:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b55a8:	4b77      	ldr	r3, [pc, #476]	; (b5788 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
   b55aa:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b55ac:	4b77      	ldr	r3, [pc, #476]	; (b578c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x370>)
   b55ae:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b55b0:	4b77      	ldr	r3, [pc, #476]	; (b5790 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>)
   b55b2:	93b8      	str	r3, [sp, #736]	; 0x2e0
      lon = lo;
   b55b4:	4b77      	ldr	r3, [pc, #476]	; (b5794 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x378>)
   b55b6:	93b9      	str	r3, [sp, #740]	; 0x2e4
      lat = la;
   b55b8:	4b77      	ldr	r3, [pc, #476]	; (b5798 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x37c>)
   b55ba:	93ba      	str	r3, [sp, #744]	; 0x2e8
);
   b55bc:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b55be:	4b77      	ldr	r3, [pc, #476]	; (b579c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x380>)
   b55c0:	9274      	str	r2, [sp, #464]	; 0x1d0
   b55c2:	93bb      	str	r3, [sp, #748]	; 0x2ec
   b55c4:	2207      	movs	r2, #7
      lat = la;
   b55c6:	4b76      	ldr	r3, [pc, #472]	; (b57a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x384>)
   b55c8:	9275      	str	r2, [sp, #468]	; 0x1d4
   b55ca:	93bc      	str	r3, [sp, #752]	; 0x2f0
   b55cc:	aa6a      	add	r2, sp, #424	; 0x1a8
      lon = lo;
   b55ce:	4b75      	ldr	r3, [pc, #468]	; (b57a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x388>)
   b55d0:	93bd      	str	r3, [sp, #756]	; 0x2f4
   b55d2:	a88c      	add	r0, sp, #560	; 0x230
   b55d4:	4613      	mov	r3, r2
   b55d6:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b55da:	f7ff f921 	bl	b4820 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b55de:	aa9d      	add	r2, sp, #628	; 0x274
   b55e0:	f107 0c10 	add.w	ip, r7, #16
   b55e4:	9204      	str	r2, [sp, #16]
   b55e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b55ea:	9f04      	ldr	r7, [sp, #16]
   b55ec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b55ee:	e89c 0003 	ldmia.w	ip, {r0, r1}
   b55f2:	aa9d      	add	r2, sp, #628	; 0x274
   b55f4:	9272      	str	r2, [sp, #456]	; 0x1c8
   b55f6:	2206      	movs	r2, #6
   b55f8:	9273      	str	r2, [sp, #460]	; 0x1cc
   b55fa:	e9c7 0100 	strd	r0, r1, [r7]
   b55fe:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5602:	4628      	mov	r0, r5
   b5604:	9704      	str	r7, [sp, #16]
   b5606:	f7ff fd99 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b560a:	aa93      	add	r2, sp, #588	; 0x24c
   b560c:	9270      	str	r2, [sp, #448]	; 0x1c0
   b560e:	233c      	movs	r3, #60	; 0x3c
   b5610:	2204      	movs	r2, #4
   b5612:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b5616:	9271      	str	r2, [sp, #452]	; 0x1c4
   b5618:	ab70      	add	r3, sp, #448	; 0x1c0
   b561a:	e893 0006 	ldmia.w	r3, {r1, r2}
   b561e:	4640      	mov	r0, r8
   b5620:	9493      	str	r4, [sp, #588]	; 0x24c
   b5622:	9496      	str	r4, [sp, #600]	; 0x258
   b5624:	f7ff fd8a 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5628:	4658      	mov	r0, fp
   b562a:	495f      	ldr	r1, [pc, #380]	; (b57a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x38c>)
   b562c:	f7fe fd6c 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5630:	a8a4      	add	r0, sp, #656	; 0x290
   b5632:	495e      	ldr	r1, [pc, #376]	; (b57ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x390>)
   b5634:	f7fe fd68 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5638:	a8aa      	add	r0, sp, #680	; 0x2a8
   b563a:	495d      	ldr	r1, [pc, #372]	; (b57b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>)
   b563c:	f7fe fd64 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5640:	aba4      	add	r3, sp, #656	; 0x290
   b5642:	2102      	movs	r1, #2
   b5644:	936e      	str	r3, [sp, #440]	; 0x1b8
   b5646:	f50d 79d0 	add.w	r9, sp, #416	; 0x1a0
   b564a:	916f      	str	r1, [sp, #444]	; 0x1bc
   b564c:	aa6e      	add	r2, sp, #440	; 0x1b8
   b564e:	464b      	mov	r3, r9
   b5650:	ca06      	ldmia	r2, {r1, r2}
   b5652:	a883      	add	r0, sp, #524	; 0x20c
   b5654:	f7ff f918 	bl	b4888 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5658:	4621      	mov	r1, r4
   b565a:	2210      	movs	r2, #16
   b565c:	a88f      	add	r0, sp, #572	; 0x23c
   b565e:	f006 ffb3 	bl	bc5c8 <memset>
   b5662:	aa8f      	add	r2, sp, #572	; 0x23c
   b5664:	926c      	str	r2, [sp, #432]	; 0x1b0
   b5666:	2204      	movs	r2, #4
   b5668:	ab6c      	add	r3, sp, #432	; 0x1b0
   b566a:	926d      	str	r2, [sp, #436]	; 0x1b4
   b566c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5670:	4630      	mov	r0, r6
   b5672:	f7ff fd63 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLineCTA = Railway(
   b5676:	aa83      	add	r2, sp, #524	; 0x20c
   b5678:	4643      	mov	r3, r8
   b567a:	a98c      	add	r1, sp, #560	; 0x230
   b567c:	e9cd b200 	strd	fp, r2, [sp]
   b5680:	9602      	str	r6, [sp, #8]
   b5682:	462a      	mov	r2, r5
   b5684:	484b      	ldr	r0, [pc, #300]	; (b57b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x398>)
   b5686:	f7ff fdd9 	bl	b523c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b568a:	4630      	mov	r0, r6
   b568c:	f7ff f872 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5690:	a883      	add	r0, sp, #524	; 0x20c
   b5692:	f7ff f890 	bl	b47b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5696:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5698:	f005 ffbe 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b569c:	a8a4      	add	r0, sp, #656	; 0x290
   b569e:	f005 ffbb 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b56a2:	4658      	mov	r0, fp
   b56a4:	f005 ffb8 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b56a8:	4640      	mov	r0, r8
   b56aa:	f7ff f863 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b56ae:	4628      	mov	r0, r5
   b56b0:	f7ff f860 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b56b4:	a88c      	add	r0, sp, #560	; 0x230
   b56b6:	f7ff f849 	bl	b474c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b56ba:	aab0      	add	r2, sp, #704	; 0x2c0
   b56bc:	926a      	str	r2, [sp, #424]	; 0x1a8
   b56be:	2207      	movs	r2, #7
   b56c0:	926b      	str	r2, [sp, #428]	; 0x1ac
   b56c2:	f50d 7ac0 	add.w	sl, sp, #384	; 0x180
   b56c6:	aa6a      	add	r2, sp, #424	; 0x1a8
   b56c8:	ca06      	ldmia	r2, {r1, r2}
   b56ca:	4653      	mov	r3, sl
   b56cc:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b56ce:	edcd 8ab4 	vstr	s17, [sp, #720]	; 0x2d0
      lon = lo;
   b56d2:	ed8d 8ab5 	vstr	s16, [sp, #724]	; 0x2d4
      lat = la;
   b56d6:	edcd 8abc 	vstr	s17, [sp, #752]	; 0x2f0
      lon = lo;
   b56da:	ed8d 8abd 	vstr	s16, [sp, #756]	; 0x2f4
      lat = la;
   b56de:	edcd dab0 	vstr	s27, [sp, #704]	; 0x2c0
      lon = lo;
   b56e2:	ed8d dab1 	vstr	s26, [sp, #708]	; 0x2c4
      lat = la;
   b56e6:	edcd cab2 	vstr	s25, [sp, #712]	; 0x2c8
      lon = lo;
   b56ea:	ed8d cab3 	vstr	s24, [sp, #716]	; 0x2cc
      lat = la;
   b56ee:	edcd bab6 	vstr	s23, [sp, #728]	; 0x2d8
      lon = lo;
   b56f2:	ed8d bab7 	vstr	s22, [sp, #732]	; 0x2dc
   b56f6:	e05f      	b.n	b57b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x39c>
   b56f8:	200352a8 	.word	0x200352a8
   b56fc:	ffff0000 	.word	0xffff0000
   b5700:	42276980 	.word	0x42276980
   b5704:	c2af431e 	.word	0xc2af431e
   b5708:	42279dcc 	.word	0x42279dcc
   b570c:	c2af4202 	.word	0xc2af4202
   b5710:	42279d95 	.word	0x42279d95
   b5714:	c2af476d 	.word	0xc2af476d
   b5718:	4227a7a9 	.word	0x4227a7a9
   b571c:	c2af4e05 	.word	0xc2af4e05
   b5720:	4227b382 	.word	0x4227b382
   b5724:	c2af4e44 	.word	0xc2af4e44
   b5728:	000beaa4 	.word	0x000beaa4
   b572c:	42278b1a 	.word	0x42278b1a
   b5730:	c2af449a 	.word	0xc2af449a
   b5734:	42278b2f 	.word	0x42278b2f
   b5738:	c2af4095 	.word	0xc2af4095
   b573c:	422781d8 	.word	0x422781d8
   b5740:	c2af4044 	.word	0xc2af4044
   b5744:	42278216 	.word	0x42278216
   b5748:	c2af44c1 	.word	0xc2af44c1
   b574c:	4227a49e 	.word	0x4227a49e
   b5750:	c2af4bd0 	.word	0xc2af4bd0
   b5754:	4227a437 	.word	0x4227a437
   b5758:	c2af4659 	.word	0xc2af4659
   b575c:	c2af4089 	.word	0xc2af4089
   b5760:	000be8d0 	.word	0x000be8d0
   b5764:	000be8d4 	.word	0x000be8d4
   b5768:	000be8db 	.word	0x000be8db
   b576c:	2003e554 	.word	0x2003e554
   b5770:	42277e9d 	.word	0x42277e9d
   b5774:	c2af74b3 	.word	0xc2af74b3
   b5778:	422780af 	.word	0x422780af
   b577c:	c2af588e 	.word	0xc2af588e
   b5780:	4227804d 	.word	0x4227804d
   b5784:	c2af482e 	.word	0xc2af482e
   b5788:	422780ad 	.word	0x422780ad
   b578c:	c2af4157 	.word	0xc2af4157
   b5790:	42278aff 	.word	0x42278aff
   b5794:	c2af4253 	.word	0xc2af4253
   b5798:	42278af4 	.word	0x42278af4
   b579c:	c2af4798 	.word	0xc2af4798
   b57a0:	4227a978 	.word	0x4227a978
   b57a4:	c2af5f5d 	.word	0xc2af5f5d
   b57a8:	000be8e2 	.word	0x000be8e2
   b57ac:	000be8e7 	.word	0x000be8e7
   b57b0:	000be8ee 	.word	0x000be8ee
   b57b4:	20035300 	.word	0x20035300
      lat = la;
   b57b8:	edcd aab8 	vstr	s21, [sp, #736]	; 0x2e0
      lon = lo;
   b57bc:	ed8d aab9 	vstr	s20, [sp, #740]	; 0x2e4
      lat = la;
   b57c0:	edcd 9aba 	vstr	s19, [sp, #744]	; 0x2e8
      lon = lo;
   b57c4:	ed8d 9abb 	vstr	s18, [sp, #748]	; 0x2ec
   b57c8:	f7ff f82a 	bl	b4820 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b57cc:	4bb6      	ldr	r3, [pc, #728]	; (b5aa8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b57ce:	f103 0228 	add.w	r2, r3, #40	; 0x28
   b57d2:	4617      	mov	r7, r2
   b57d4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b57d6:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
   b57da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b57de:	e9d7 0100 	ldrd	r0, r1, [r7]
   b57e2:	9a04      	ldr	r2, [sp, #16]
   b57e4:	9705      	str	r7, [sp, #20]
   b57e6:	e882 0003 	stmia.w	r2, {r0, r1}
   b57ea:	aa9d      	add	r2, sp, #628	; 0x274
   b57ec:	9268      	str	r2, [sp, #416]	; 0x1a0
   b57ee:	2206      	movs	r2, #6
   b57f0:	9269      	str	r2, [sp, #420]	; 0x1a4
   b57f2:	e899 0006 	ldmia.w	r9, {r1, r2}
   b57f6:	4628      	mov	r0, r5
   b57f8:	f7ff fca0 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b57fc:	f107 0208 	add.w	r2, r7, #8
   b5800:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b5802:	af93      	add	r7, sp, #588	; 0x24c
   b5804:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5808:	2104      	movs	r1, #4
   b580a:	ab66      	add	r3, sp, #408	; 0x198
   b580c:	9766      	str	r7, [sp, #408]	; 0x198
   b580e:	9167      	str	r1, [sp, #412]	; 0x19c
   b5810:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5814:	4640      	mov	r0, r8
   b5816:	f7ff fc91 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b581a:	4658      	mov	r0, fp
   b581c:	49a3      	ldr	r1, [pc, #652]	; (b5aac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x690>)
   b581e:	f7fe fc73 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5822:	a8a4      	add	r0, sp, #656	; 0x290
   b5824:	49a2      	ldr	r1, [pc, #648]	; (b5ab0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x694>)
   b5826:	f7fe fc6f 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b582a:	a8aa      	add	r0, sp, #680	; 0x2a8
   b582c:	49a1      	ldr	r1, [pc, #644]	; (b5ab4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x698>)
   b582e:	f7fe fc6b 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5832:	aba4      	add	r3, sp, #656	; 0x290
   b5834:	2102      	movs	r1, #2
   b5836:	9364      	str	r3, [sp, #400]	; 0x190
   b5838:	f50d 79bc 	add.w	r9, sp, #376	; 0x178
   b583c:	9165      	str	r1, [sp, #404]	; 0x194
   b583e:	aa64      	add	r2, sp, #400	; 0x190
   b5840:	ca06      	ldmia	r2, {r1, r2}
   b5842:	464b      	mov	r3, r9
   b5844:	a883      	add	r0, sp, #524	; 0x20c
   b5846:	f7ff f81f 	bl	b4888 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b584a:	499b      	ldr	r1, [pc, #620]	; (b5ab8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x69c>)
   b584c:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   b584e:	af8f      	add	r7, sp, #572	; 0x23c
   b5850:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5854:	2004      	movs	r0, #4
   b5856:	ab62      	add	r3, sp, #392	; 0x188
   b5858:	9762      	str	r7, [sp, #392]	; 0x188
   b585a:	9063      	str	r0, [sp, #396]	; 0x18c
   b585c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5860:	4630      	mov	r0, r6
   b5862:	f7ff fc6b 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway brownLineCTA = Railway(
   b5866:	a883      	add	r0, sp, #524	; 0x20c
   b5868:	e9cd b000 	strd	fp, r0, [sp]
   b586c:	a88c      	add	r0, sp, #560	; 0x230
   b586e:	4643      	mov	r3, r8
   b5870:	462a      	mov	r2, r5
   b5872:	4601      	mov	r1, r0
   b5874:	9602      	str	r6, [sp, #8]
   b5876:	4891      	ldr	r0, [pc, #580]	; (b5abc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a0>)
   b5878:	f7ff fce0 	bl	b523c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b587c:	4630      	mov	r0, r6
   b587e:	f7fe ff79 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5882:	a883      	add	r0, sp, #524	; 0x20c
   b5884:	f7fe ff97 	bl	b47b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5888:	a8aa      	add	r0, sp, #680	; 0x2a8
   b588a:	f005 fec5 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b588e:	a8a4      	add	r0, sp, #656	; 0x290
   b5890:	f005 fec2 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5894:	4658      	mov	r0, fp
   b5896:	f005 febf 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b589a:	4640      	mov	r0, r8
   b589c:	f7fe ff6a 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b58a0:	4628      	mov	r0, r5
   b58a2:	f7fe ff67 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b58a6:	a88c      	add	r0, sp, #560	; 0x230
   b58a8:	f7fe ff50 	bl	b474c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b58ac:	4b84      	ldr	r3, [pc, #528]	; (b5ac0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a4>)
   b58ae:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b58b0:	4b84      	ldr	r3, [pc, #528]	; (b5ac4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a8>)
   b58b2:	93a5      	str	r3, [sp, #660]	; 0x294
      lat = la;
   b58b4:	4b84      	ldr	r3, [pc, #528]	; (b5ac8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ac>)
   b58b6:	93a6      	str	r3, [sp, #664]	; 0x298
   b58b8:	4b84      	ldr	r3, [pc, #528]	; (b5acc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b0>)
   b58ba:	93aa      	str	r3, [sp, #680]	; 0x2a8
      lon = lo;
   b58bc:	4b84      	ldr	r3, [pc, #528]	; (b5ad0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b4>)
   b58be:	93ab      	str	r3, [sp, #684]	; 0x2ac
      lat = la;
   b58c0:	4b84      	ldr	r3, [pc, #528]	; (b5ad4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b8>)
   b58c2:	93ac      	str	r3, [sp, #688]	; 0x2b0
      lon = lo;
   b58c4:	4b84      	ldr	r3, [pc, #528]	; (b5ad8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6bc>)
   b58c6:	93ad      	str	r3, [sp, #692]	; 0x2b4
);
   b58c8:	2005      	movs	r0, #5
   b58ca:	aba4      	add	r3, sp, #656	; 0x290
   b58cc:	9360      	str	r3, [sp, #384]	; 0x180
   b58ce:	9061      	str	r0, [sp, #388]	; 0x184
   b58d0:	a856      	add	r0, sp, #344	; 0x158
   b58d2:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b58d6:	4603      	mov	r3, r0
   b58d8:	a88c      	add	r0, sp, #560	; 0x230
   b58da:	ed8d eaa7 	vstr	s28, [sp, #668]	; 0x29c
      lat = la;
   b58de:	edcd 9aa8 	vstr	s19, [sp, #672]	; 0x2a0
      lon = lo;
   b58e2:	ed8d 9aa9 	vstr	s18, [sp, #676]	; 0x2a4
   b58e6:	f7fe ff9b 	bl	b4820 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b58ea:	4b6f      	ldr	r3, [pc, #444]	; (b5aa8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b58ec:	f8cd b178 	str.w	fp, [sp, #376]	; 0x178
   b58f0:	461f      	mov	r7, r3
   b58f2:	3360      	adds	r3, #96	; 0x60
   b58f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b58f6:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
   b58fa:	2004      	movs	r0, #4
   b58fc:	905f      	str	r0, [sp, #380]	; 0x17c
   b58fe:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5902:	4628      	mov	r0, r5
   b5904:	f7ff fc1a 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5908:	463b      	mov	r3, r7
   b590a:	3370      	adds	r3, #112	; 0x70
   b590c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b590e:	af93      	add	r7, sp, #588	; 0x24c
   b5910:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5914:	2004      	movs	r0, #4
   b5916:	ab5c      	add	r3, sp, #368	; 0x170
   b5918:	975c      	str	r7, [sp, #368]	; 0x170
   b591a:	905d      	str	r0, [sp, #372]	; 0x174
   b591c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5920:	4640      	mov	r0, r8
   b5922:	f7ff fc0b 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5926:	a89d      	add	r0, sp, #628	; 0x274
   b5928:	496c      	ldr	r1, [pc, #432]	; (b5adc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c0>)
   b592a:	f7fe fbed 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b592e:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5930:	496b      	ldr	r1, [pc, #428]	; (b5ae0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c4>)
   b5932:	f7fe fbe9 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5936:	a8b6      	add	r0, sp, #728	; 0x2d8
   b5938:	496a      	ldr	r1, [pc, #424]	; (b5ae4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c8>)
   b593a:	f7fe fbe5 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b593e:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5940:	905a      	str	r0, [sp, #360]	; 0x168
   b5942:	2002      	movs	r0, #2
   b5944:	905b      	str	r0, [sp, #364]	; 0x16c
   b5946:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
   b594a:	aa5a      	add	r2, sp, #360	; 0x168
   b594c:	464b      	mov	r3, r9
   b594e:	ca06      	ldmia	r2, {r1, r2}
   b5950:	a883      	add	r0, sp, #524	; 0x20c
   b5952:	f7fe ff99 	bl	b4888 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5956:	4b54      	ldr	r3, [pc, #336]	; (b5aa8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5958:	3380      	adds	r3, #128	; 0x80
   b595a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b595c:	af8f      	add	r7, sp, #572	; 0x23c
   b595e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5962:	2004      	movs	r0, #4
   b5964:	ab58      	add	r3, sp, #352	; 0x160
   b5966:	9758      	str	r7, [sp, #352]	; 0x160
   b5968:	9059      	str	r0, [sp, #356]	; 0x164
   b596a:	e893 0006 	ldmia.w	r3, {r1, r2}
   b596e:	4630      	mov	r0, r6
   b5970:	f7ff fbe4 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLineCTA = Railway(
   b5974:	a883      	add	r0, sp, #524	; 0x20c
   b5976:	9001      	str	r0, [sp, #4]
   b5978:	a89d      	add	r0, sp, #628	; 0x274
   b597a:	9000      	str	r0, [sp, #0]
   b597c:	a88c      	add	r0, sp, #560	; 0x230
   b597e:	4643      	mov	r3, r8
   b5980:	462a      	mov	r2, r5
   b5982:	4601      	mov	r1, r0
   b5984:	9602      	str	r6, [sp, #8]
   b5986:	4858      	ldr	r0, [pc, #352]	; (b5ae8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6cc>)
   b5988:	f7ff fc58 	bl	b523c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b598c:	4630      	mov	r0, r6
   b598e:	f7fe fef1 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5992:	a883      	add	r0, sp, #524	; 0x20c
   b5994:	f7fe ff0f 	bl	b47b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5998:	a8b6      	add	r0, sp, #728	; 0x2d8
   b599a:	f005 fe3d 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b599e:	a8b0      	add	r0, sp, #704	; 0x2c0
   b59a0:	f005 fe3a 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b59a4:	a89d      	add	r0, sp, #628	; 0x274
   b59a6:	f005 fe37 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b59aa:	4640      	mov	r0, r8
   b59ac:	f7fe fee2 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b59b0:	4628      	mov	r0, r5
   b59b2:	f7fe fedf 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b59b6:	a88c      	add	r0, sp, #560	; 0x230
   b59b8:	f7fe fec8 	bl	b474c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b59bc:	4b4b      	ldr	r3, [pc, #300]	; (b5aec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d0>)
   b59be:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b59c0:	4b4b      	ldr	r3, [pc, #300]	; (b5af0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d4>)
   b59c2:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b59c4:	4b4b      	ldr	r3, [pc, #300]	; (b5af4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d8>)
   b59c6:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b59c8:	4b4b      	ldr	r3, [pc, #300]	; (b5af8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6dc>)
   b59ca:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b59cc:	4b4b      	ldr	r3, [pc, #300]	; (b5afc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e0>)
   b59ce:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b59d0:	4b4b      	ldr	r3, [pc, #300]	; (b5b00 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e4>)
   b59d2:	93b5      	str	r3, [sp, #724]	; 0x2d4
);
   b59d4:	a8b0      	add	r0, sp, #704	; 0x2c0
      lat = la;
   b59d6:	4b4b      	ldr	r3, [pc, #300]	; (b5b04 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e8>)
   b59d8:	9056      	str	r0, [sp, #344]	; 0x158
   b59da:	93b6      	str	r3, [sp, #728]	; 0x2d8
   b59dc:	2008      	movs	r0, #8
   b59de:	4b4a      	ldr	r3, [pc, #296]	; (b5b08 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ec>)
   b59e0:	9057      	str	r0, [sp, #348]	; 0x15c
   b59e2:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
   b59e6:	93bc      	str	r3, [sp, #752]	; 0x2f0
   b59e8:	a856      	add	r0, sp, #344	; 0x158
      lon = lo;
   b59ea:	4b48      	ldr	r3, [pc, #288]	; (b5b0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f0>)
   b59ec:	93bd      	str	r3, [sp, #756]	; 0x2f4
   b59ee:	e890 0006 	ldmia.w	r0, {r1, r2}
   b59f2:	4653      	mov	r3, sl
   b59f4:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b59f6:	edcd 8aba 	vstr	s17, [sp, #744]	; 0x2e8
      lon = lo;
   b59fa:	ed8d 8abb 	vstr	s16, [sp, #748]	; 0x2ec
   b59fe:	ed8d eab7 	vstr	s28, [sp, #732]	; 0x2dc
      lat = la;
   b5a02:	edcd 9ab8 	vstr	s19, [sp, #736]	; 0x2e0
      lon = lo;
   b5a06:	ed8d 9ab9 	vstr	s18, [sp, #740]	; 0x2e4
      lat = la;
   b5a0a:	edcd aabe 	vstr	s21, [sp, #760]	; 0x2f8
      lon = lo;
   b5a0e:	ed8d aabf 	vstr	s20, [sp, #764]	; 0x2fc
   b5a12:	f7fe ff05 	bl	b4820 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5a16:	4b24      	ldr	r3, [pc, #144]	; (b5aa8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5a18:	9f04      	ldr	r7, [sp, #16]
   b5a1a:	f103 0c90 	add.w	ip, r3, #144	; 0x90
   b5a1e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5a22:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b5a26:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5a2a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   b5a2e:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b5a32:	a89d      	add	r0, sp, #628	; 0x274
   b5a34:	9054      	str	r0, [sp, #336]	; 0x150
   b5a36:	2007      	movs	r0, #7
   b5a38:	9055      	str	r0, [sp, #340]	; 0x154
   b5a3a:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5a3e:	4628      	mov	r0, r5
   b5a40:	f7ff fb7c 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5a44:	4b18      	ldr	r3, [pc, #96]	; (b5aa8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5a46:	33ac      	adds	r3, #172	; 0xac
   b5a48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5a4a:	af93      	add	r7, sp, #588	; 0x24c
   b5a4c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5a50:	2004      	movs	r0, #4
   b5a52:	ab52      	add	r3, sp, #328	; 0x148
   b5a54:	9752      	str	r7, [sp, #328]	; 0x148
   b5a56:	9053      	str	r0, [sp, #332]	; 0x14c
   b5a58:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5a5c:	4640      	mov	r0, r8
   b5a5e:	f7ff fb6d 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5a62:	4658      	mov	r0, fp
   b5a64:	492a      	ldr	r1, [pc, #168]	; (b5b10 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f4>)
   b5a66:	f7fe fb4f 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5a6a:	a8a4      	add	r0, sp, #656	; 0x290
   b5a6c:	4929      	ldr	r1, [pc, #164]	; (b5b14 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f8>)
   b5a6e:	f7fe fb4b 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5a72:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5a74:	4928      	ldr	r1, [pc, #160]	; (b5b18 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6fc>)
   b5a76:	f7fe fb47 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5a7a:	aba4      	add	r3, sp, #656	; 0x290
   b5a7c:	2002      	movs	r0, #2
   b5a7e:	9350      	str	r3, [sp, #320]	; 0x140
   b5a80:	9051      	str	r0, [sp, #324]	; 0x144
   b5a82:	f50d 7994 	add.w	r9, sp, #296	; 0x128
   b5a86:	aa50      	add	r2, sp, #320	; 0x140
   b5a88:	464b      	mov	r3, r9
   b5a8a:	ca06      	ldmia	r2, {r1, r2}
   b5a8c:	a883      	add	r0, sp, #524	; 0x20c
   b5a8e:	f7fe fefb 	bl	b4888 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5a92:	4b05      	ldr	r3, [pc, #20]	; (b5aa8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5a94:	33bc      	adds	r3, #188	; 0xbc
   b5a96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5a98:	af8f      	add	r7, sp, #572	; 0x23c
   b5a9a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5a9e:	2004      	movs	r0, #4
   b5aa0:	ab4e      	add	r3, sp, #312	; 0x138
   b5aa2:	974e      	str	r7, [sp, #312]	; 0x138
   b5aa4:	e03a      	b.n	b5b1c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x700>
   b5aa6:	bf00      	nop
   b5aa8:	000beaa4 	.word	0x000beaa4
   b5aac:	000be8f5 	.word	0x000be8f5
   b5ab0:	000be8fb 	.word	0x000be8fb
   b5ab4:	000be902 	.word	0x000be902
   b5ab8:	000beaf4 	.word	0x000beaf4
   b5abc:	200353d8 	.word	0x200353d8
   b5ac0:	42276997 	.word	0x42276997
   b5ac4:	c2af40b8 	.word	0xc2af40b8
   b5ac8:	422781fe 	.word	0x422781fe
   b5acc:	42278afb 	.word	0x42278afb
   b5ad0:	c2af4494 	.word	0xc2af4494
   b5ad4:	42278971 	.word	0x42278971
   b5ad8:	c2af6479 	.word	0xc2af6479
   b5adc:	000be85f 	.word	0x000be85f
   b5ae0:	000be909 	.word	0x000be909
   b5ae4:	000be910 	.word	0x000be910
   b5ae8:	2003553c 	.word	0x2003553c
   b5aec:	4227631a 	.word	0x4227631a
   b5af0:	c2af4bd2 	.word	0xc2af4bd2
   b5af4:	42276ec4 	.word	0x42276ec4
   b5af8:	c2af4115 	.word	0xc2af4115
   b5afc:	422780b5 	.word	0x422780b5
   b5b00:	c2af4086 	.word	0xc2af4086
   b5b04:	42278200 	.word	0x42278200
   b5b08:	422781e1 	.word	0x422781e1
   b5b0c:	c2af4476 	.word	0xc2af4476
   b5b10:	000be917 	.word	0x000be917
   b5b14:	000be91e 	.word	0x000be91e
   b5b18:	000be925 	.word	0x000be925
   b5b1c:	904f      	str	r0, [sp, #316]	; 0x13c
   b5b1e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5b22:	4630      	mov	r0, r6
   b5b24:	f7ff fb0a 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLineCTA = Railway(
   b5b28:	a883      	add	r0, sp, #524	; 0x20c
   b5b2a:	e9cd b000 	strd	fp, r0, [sp]
   b5b2e:	a88c      	add	r0, sp, #560	; 0x230
   b5b30:	4643      	mov	r3, r8
   b5b32:	462a      	mov	r2, r5
   b5b34:	4601      	mov	r1, r0
   b5b36:	9602      	str	r6, [sp, #8]
   b5b38:	48ba      	ldr	r0, [pc, #744]	; (b5e24 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa08>)
   b5b3a:	f7ff fb7f 	bl	b523c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5b3e:	4630      	mov	r0, r6
   b5b40:	f7fe fe18 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5b44:	a883      	add	r0, sp, #524	; 0x20c
   b5b46:	f7fe fe36 	bl	b47b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5b4a:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5b4c:	f005 fd64 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b50:	a8a4      	add	r0, sp, #656	; 0x290
   b5b52:	f005 fd61 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b56:	4658      	mov	r0, fp
   b5b58:	f005 fd5e 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b5c:	4640      	mov	r0, r8
   b5b5e:	f7fe fe09 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5b62:	4628      	mov	r0, r5
   b5b64:	f7fe fe06 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5b68:	a88c      	add	r0, sp, #560	; 0x230
   b5b6a:	f7fe fdef 	bl	b474c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b5b6e:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5b70:	904c      	str	r0, [sp, #304]	; 0x130
   b5b72:	2007      	movs	r0, #7
   b5b74:	904d      	str	r0, [sp, #308]	; 0x134
   b5b76:	a842      	add	r0, sp, #264	; 0x108
   b5b78:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b5b7c:	4603      	mov	r3, r0
   b5b7e:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b5b80:	edcd 8ab4 	vstr	s17, [sp, #720]	; 0x2d0
      lon = lo;
   b5b84:	ed8d 8ab5 	vstr	s16, [sp, #724]	; 0x2d4
      lat = la;
   b5b88:	edcd 8abc 	vstr	s17, [sp, #752]	; 0x2f0
      lon = lo;
   b5b8c:	ed8d 8abd 	vstr	s16, [sp, #756]	; 0x2f4
      lat = la;
   b5b90:	edcd dab0 	vstr	s27, [sp, #704]	; 0x2c0
      lon = lo;
   b5b94:	ed8d dab1 	vstr	s26, [sp, #708]	; 0x2c4
      lat = la;
   b5b98:	edcd cab2 	vstr	s25, [sp, #712]	; 0x2c8
      lon = lo;
   b5b9c:	ed8d cab3 	vstr	s24, [sp, #716]	; 0x2cc
      lat = la;
   b5ba0:	edcd bab6 	vstr	s23, [sp, #728]	; 0x2d8
      lon = lo;
   b5ba4:	ed8d bab7 	vstr	s22, [sp, #732]	; 0x2dc
      lat = la;
   b5ba8:	edcd aab8 	vstr	s21, [sp, #736]	; 0x2e0
      lon = lo;
   b5bac:	ed8d aab9 	vstr	s20, [sp, #740]	; 0x2e4
      lat = la;
   b5bb0:	edcd 9aba 	vstr	s19, [sp, #744]	; 0x2e8
      lon = lo;
   b5bb4:	ed8d 9abb 	vstr	s18, [sp, #748]	; 0x2ec
   b5bb8:	f7fe fe32 	bl	b4820 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5bbc:	4a9a      	ldr	r2, [pc, #616]	; (b5e28 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa0c>)
   b5bbe:	9f04      	ldr	r7, [sp, #16]
   b5bc0:	f1a2 0e18 	sub.w	lr, r2, #24
   b5bc4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5bc8:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
   b5bcc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5bd0:	9805      	ldr	r0, [sp, #20]
   b5bd2:	c803      	ldmia	r0, {r0, r1}
   b5bd4:	e887 0003 	stmia.w	r7, {r0, r1}
   b5bd8:	a89d      	add	r0, sp, #628	; 0x274
   b5bda:	904a      	str	r0, [sp, #296]	; 0x128
   b5bdc:	2006      	movs	r0, #6
   b5bde:	904b      	str	r0, [sp, #300]	; 0x12c
   b5be0:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5be4:	4628      	mov	r0, r5
   b5be6:	f7ff faa9 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5bea:	4a8f      	ldr	r2, [pc, #572]	; (b5e28 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa0c>)
   b5bec:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b5bee:	af93      	add	r7, sp, #588	; 0x24c
   b5bf0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5bf4:	2204      	movs	r2, #4
   b5bf6:	ab48      	add	r3, sp, #288	; 0x120
   b5bf8:	9748      	str	r7, [sp, #288]	; 0x120
   b5bfa:	9249      	str	r2, [sp, #292]	; 0x124
   b5bfc:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5c00:	4640      	mov	r0, r8
   b5c02:	f7ff fa9b 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5c06:	4658      	mov	r0, fp
   b5c08:	4988      	ldr	r1, [pc, #544]	; (b5e2c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa10>)
   b5c0a:	f7fe fa7d 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5c0e:	a8a4      	add	r0, sp, #656	; 0x290
   b5c10:	4987      	ldr	r1, [pc, #540]	; (b5e30 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa14>)
   b5c12:	f7fe fa79 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5c16:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5c18:	4986      	ldr	r1, [pc, #536]	; (b5e34 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa18>)
   b5c1a:	f7fe fa75 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5c1e:	aba4      	add	r3, sp, #656	; 0x290
   b5c20:	2002      	movs	r0, #2
   b5c22:	9346      	str	r3, [sp, #280]	; 0x118
   b5c24:	9047      	str	r0, [sp, #284]	; 0x11c
   b5c26:	f50d 7980 	add.w	r9, sp, #256	; 0x100
   b5c2a:	aa46      	add	r2, sp, #280	; 0x118
   b5c2c:	ca06      	ldmia	r2, {r1, r2}
   b5c2e:	464b      	mov	r3, r9
   b5c30:	a883      	add	r0, sp, #524	; 0x20c
   b5c32:	f7fe fe29 	bl	b4888 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5c36:	4980      	ldr	r1, [pc, #512]	; (b5e38 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa1c>)
   b5c38:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   b5c3a:	af8f      	add	r7, sp, #572	; 0x23c
   b5c3c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5c40:	2204      	movs	r2, #4
   b5c42:	ab44      	add	r3, sp, #272	; 0x110
   b5c44:	9744      	str	r7, [sp, #272]	; 0x110
   b5c46:	9245      	str	r2, [sp, #276]	; 0x114
   b5c48:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5c4c:	4630      	mov	r0, r6
   b5c4e:	f7ff fa75 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway purpleLineCTA = Railway(
   b5c52:	aa83      	add	r2, sp, #524	; 0x20c
   b5c54:	4643      	mov	r3, r8
   b5c56:	a98c      	add	r1, sp, #560	; 0x230
   b5c58:	e9cd b200 	strd	fp, r2, [sp]
   b5c5c:	9602      	str	r6, [sp, #8]
   b5c5e:	462a      	mov	r2, r5
   b5c60:	4876      	ldr	r0, [pc, #472]	; (b5e3c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa20>)
   b5c62:	f7ff faeb 	bl	b523c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5c66:	4630      	mov	r0, r6
   b5c68:	f7fe fd84 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5c6c:	a883      	add	r0, sp, #524	; 0x20c
   b5c6e:	f7fe fda2 	bl	b47b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5c72:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5c74:	f005 fcd0 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5c78:	a8a4      	add	r0, sp, #656	; 0x290
   b5c7a:	f005 fccd 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5c7e:	4658      	mov	r0, fp
   b5c80:	f005 fcca 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5c84:	4640      	mov	r0, r8
   b5c86:	f7fe fd75 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5c8a:	4628      	mov	r0, r5
   b5c8c:	f7fe fd72 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5c90:	a88c      	add	r0, sp, #560	; 0x230
   b5c92:	f7fe fd5b 	bl	b474c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5c96:	4b6a      	ldr	r3, [pc, #424]	; (b5e40 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa24>)
   b5c98:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b5c9a:	4b6a      	ldr	r3, [pc, #424]	; (b5e44 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa28>)
   b5c9c:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b5c9e:	4b6a      	ldr	r3, [pc, #424]	; (b5e48 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa2c>)
   b5ca0:	93b2      	str	r3, [sp, #712]	; 0x2c8
);
   b5ca2:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b5ca4:	4b69      	ldr	r3, [pc, #420]	; (b5e4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa30>)
   b5ca6:	9242      	str	r2, [sp, #264]	; 0x108
   b5ca8:	93b3      	str	r3, [sp, #716]	; 0x2cc
   b5caa:	2208      	movs	r2, #8
      lat = la;
   b5cac:	4b68      	ldr	r3, [pc, #416]	; (b5e50 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa34>)
   b5cae:	9243      	str	r2, [sp, #268]	; 0x10c
   b5cb0:	f10d 0ae0 	add.w	sl, sp, #224	; 0xe0
   b5cb4:	93b4      	str	r3, [sp, #720]	; 0x2d0
   b5cb6:	aa42      	add	r2, sp, #264	; 0x108
      lon = lo;
   b5cb8:	4b66      	ldr	r3, [pc, #408]	; (b5e54 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa38>)
   b5cba:	93b5      	str	r3, [sp, #724]	; 0x2d4
   b5cbc:	ca06      	ldmia	r2, {r1, r2}
   b5cbe:	4653      	mov	r3, sl
   b5cc0:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b5cc2:	edcd 8ab6 	vstr	s17, [sp, #728]	; 0x2d8
      lon = lo;
   b5cc6:	ed8d 8ab7 	vstr	s16, [sp, #732]	; 0x2dc
      lat = la;
   b5cca:	edcd 8abe 	vstr	s17, [sp, #760]	; 0x2f8
      lon = lo;
   b5cce:	ed8d 8abf 	vstr	s16, [sp, #764]	; 0x2fc
      lat = la;
   b5cd2:	edcd 9ab8 	vstr	s19, [sp, #736]	; 0x2e0
      lon = lo;
   b5cd6:	ed8d 9ab9 	vstr	s18, [sp, #740]	; 0x2e4
      lat = la;
   b5cda:	edcd aaba 	vstr	s21, [sp, #744]	; 0x2e8
      lon = lo;
   b5cde:	ed8d aabb 	vstr	s20, [sp, #748]	; 0x2ec
      lat = la;
   b5ce2:	edcd babc 	vstr	s23, [sp, #752]	; 0x2f0
      lon = lo;
   b5ce6:	ed8d babd 	vstr	s22, [sp, #756]	; 0x2f4
   b5cea:	f7fe fd99 	bl	b4820 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5cee:	4b5a      	ldr	r3, [pc, #360]	; (b5e58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b5cf0:	9f04      	ldr	r7, [sp, #16]
      lat = la;
   b5cf2:	eddf 8a5a 	vldr	s17, [pc, #360]	; b5e5c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa40>
      lon = lo;
   b5cf6:	ed9f 8a5a 	vldr	s16, [pc, #360]	; b5e60 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa44>
   b5cfa:	f103 0ccc 	add.w	ip, r3, #204	; 0xcc
   b5cfe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5d02:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b5d06:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5d0a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   b5d0e:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b5d12:	aa9d      	add	r2, sp, #628	; 0x274
   b5d14:	9240      	str	r2, [sp, #256]	; 0x100
   b5d16:	2207      	movs	r2, #7
   b5d18:	9241      	str	r2, [sp, #260]	; 0x104
   b5d1a:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5d1e:	4628      	mov	r0, r5
   b5d20:	f7ff fa0c 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5d24:	4b4c      	ldr	r3, [pc, #304]	; (b5e58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b5d26:	33e8      	adds	r3, #232	; 0xe8
   b5d28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5d2a:	af93      	add	r7, sp, #588	; 0x24c
   b5d2c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5d30:	2204      	movs	r2, #4
   b5d32:	ab3e      	add	r3, sp, #248	; 0xf8
   b5d34:	973e      	str	r7, [sp, #248]	; 0xf8
   b5d36:	923f      	str	r2, [sp, #252]	; 0xfc
   b5d38:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5d3c:	4640      	mov	r0, r8
   b5d3e:	f7ff f9fd 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5d42:	4658      	mov	r0, fp
   b5d44:	4947      	ldr	r1, [pc, #284]	; (b5e64 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa48>)
   b5d46:	f7fe f9df 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5d4a:	a8a4      	add	r0, sp, #656	; 0x290
   b5d4c:	4946      	ldr	r1, [pc, #280]	; (b5e68 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa4c>)
   b5d4e:	f7fe f9db 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5d52:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5d54:	4945      	ldr	r1, [pc, #276]	; (b5e6c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa50>)
   b5d56:	f7fe f9d7 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5d5a:	aba4      	add	r3, sp, #656	; 0x290
   b5d5c:	2102      	movs	r1, #2
   b5d5e:	933c      	str	r3, [sp, #240]	; 0xf0
   b5d60:	f10d 09d8 	add.w	r9, sp, #216	; 0xd8
   b5d64:	913d      	str	r1, [sp, #244]	; 0xf4
   b5d66:	aa3c      	add	r2, sp, #240	; 0xf0
   b5d68:	464b      	mov	r3, r9
   b5d6a:	ca06      	ldmia	r2, {r1, r2}
   b5d6c:	a883      	add	r0, sp, #524	; 0x20c
   b5d6e:	f7fe fd8b 	bl	b4888 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5d72:	4b39      	ldr	r3, [pc, #228]	; (b5e58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b5d74:	33f8      	adds	r3, #248	; 0xf8
   b5d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5d78:	af8f      	add	r7, sp, #572	; 0x23c
   b5d7a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5d7e:	2204      	movs	r2, #4
   b5d80:	ab3a      	add	r3, sp, #232	; 0xe8
   b5d82:	973a      	str	r7, [sp, #232]	; 0xe8
   b5d84:	923b      	str	r2, [sp, #236]	; 0xec
   b5d86:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5d8a:	4630      	mov	r0, r6
   b5d8c:	f7ff f9d6 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway pinkLineCTA = Railway(
   b5d90:	aa83      	add	r2, sp, #524	; 0x20c
   b5d92:	4643      	mov	r3, r8
   b5d94:	a98c      	add	r1, sp, #560	; 0x230
   b5d96:	e9cd b200 	strd	fp, r2, [sp]
   b5d9a:	9602      	str	r6, [sp, #8]
   b5d9c:	462a      	mov	r2, r5
   b5d9e:	4834      	ldr	r0, [pc, #208]	; (b5e70 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa54>)
   b5da0:	f7ff fa4c 	bl	b523c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5da4:	4630      	mov	r0, r6
   b5da6:	f7fe fce5 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5daa:	a883      	add	r0, sp, #524	; 0x20c
   b5dac:	f7fe fd03 	bl	b47b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5db0:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5db2:	f005 fc31 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5db6:	a8a4      	add	r0, sp, #656	; 0x290
   b5db8:	f005 fc2e 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5dbc:	4658      	mov	r0, fp
   b5dbe:	f005 fc2b 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5dc2:	4640      	mov	r0, r8
   b5dc4:	f7fe fcd6 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5dc8:	4628      	mov	r0, r5
   b5dca:	f7fe fcd3 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5dce:	a88c      	add	r0, sp, #560	; 0x230
   b5dd0:	f7fe fcbc 	bl	b474c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5dd4:	4b27      	ldr	r3, [pc, #156]	; (b5e74 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa58>)
   b5dd6:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b5dd8:	4b27      	ldr	r3, [pc, #156]	; (b5e78 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa5c>)
   b5dda:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b5ddc:	4b27      	ldr	r3, [pc, #156]	; (b5e7c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa60>)
   b5dde:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b5de0:	4b27      	ldr	r3, [pc, #156]	; (b5e80 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa64>)
   b5de2:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b5de4:	4b27      	ldr	r3, [pc, #156]	; (b5e84 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa68>)
   b5de6:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b5de8:	4b27      	ldr	r3, [pc, #156]	; (b5e88 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa6c>)
   b5dea:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b5dec:	4b27      	ldr	r3, [pc, #156]	; (b5e8c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa70>)
   b5dee:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b5df0:	4b27      	ldr	r3, [pc, #156]	; (b5e90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa74>)
   b5df2:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b5df4:	4b27      	ldr	r3, [pc, #156]	; (b5e94 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa78>)
   b5df6:	93b8      	str	r3, [sp, #736]	; 0x2e0
      lon = lo;
   b5df8:	4b27      	ldr	r3, [pc, #156]	; (b5e98 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa7c>)
   b5dfa:	93b9      	str	r3, [sp, #740]	; 0x2e4
      lat = la;
   b5dfc:	4b27      	ldr	r3, [pc, #156]	; (b5e9c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa80>)
   b5dfe:	93ba      	str	r3, [sp, #744]	; 0x2e8
};
   b5e00:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b5e02:	4b27      	ldr	r3, [pc, #156]	; (b5ea0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa84>)
   b5e04:	9238      	str	r2, [sp, #224]	; 0xe0
   b5e06:	93bb      	str	r3, [sp, #748]	; 0x2ec
   b5e08:	2207      	movs	r2, #7
      lat = la;
   b5e0a:	4b26      	ldr	r3, [pc, #152]	; (b5ea4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa88>)
   b5e0c:	9239      	str	r2, [sp, #228]	; 0xe4
   b5e0e:	93bc      	str	r3, [sp, #752]	; 0x2f0
   b5e10:	aa2e      	add	r2, sp, #184	; 0xb8
      lon = lo;
   b5e12:	4b25      	ldr	r3, [pc, #148]	; (b5ea8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa8c>)
   b5e14:	93bd      	str	r3, [sp, #756]	; 0x2f4
   b5e16:	a88c      	add	r0, sp, #560	; 0x230
   b5e18:	4613      	mov	r3, r2
   b5e1a:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b5e1e:	f7fe fcff 	bl	b4820 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5e22:	e043      	b.n	b5eac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa90>
   b5e24:	20037dd8 	.word	0x20037dd8
   b5e28:	000beae4 	.word	0x000beae4
   b5e2c:	000be92c 	.word	0x000be92c
   b5e30:	000be933 	.word	0x000be933
   b5e34:	000be93a 	.word	0x000be93a
   b5e38:	000beaf4 	.word	0x000beaf4
   b5e3c:	2003e4e8 	.word	0x2003e4e8
   b5e40:	42276a76 	.word	0x42276a76
   b5e44:	c2af692b 	.word	0xc2af692b
   b5e48:	42276b5f 	.word	0x42276b5f
   b5e4c:	c2af56cd 	.word	0xc2af56cd
   b5e50:	42278a2d 	.word	0x42278a2d
   b5e54:	c2af56d8 	.word	0xc2af56d8
   b5e58:	000beaa4 	.word	0x000beaa4
   b5e5c:	42296602 	.word	0x42296602
   b5e60:	c28e2881 	.word	0xc28e2881
   b5e64:	000be941 	.word	0x000be941
   b5e68:	000be946 	.word	0x000be946
   b5e6c:	000be94d 	.word	0x000be94d
   b5e70:	2003e47c 	.word	0x2003e47c
   b5e74:	4229481b 	.word	0x4229481b
   b5e78:	c28e1ab2 	.word	0xc28e1ab2
   b5e7c:	42294f83 	.word	0x42294f83
   b5e80:	c28e1d93 	.word	0xc28e1d93
   b5e84:	422960e6 	.word	0x422960e6
   b5e88:	c28e1d2d 	.word	0xc28e1d2d
   b5e8c:	422966f9 	.word	0x422966f9
   b5e90:	c28e1af0 	.word	0xc28e1af0
   b5e94:	422971a5 	.word	0x422971a5
   b5e98:	c28e23e6 	.word	0xc28e23e6
   b5e9c:	42297437 	.word	0x42297437
   b5ea0:	c28e3373 	.word	0xc28e3373
   b5ea4:	42297d7a 	.word	0x42297d7a
   b5ea8:	c28e3b5d 	.word	0xc28e3b5d
   b5eac:	4bb1      	ldr	r3, [pc, #708]	; (b6174 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd58>)
   b5eae:	f503 7c84 	add.w	ip, r3, #264	; 0x108
   b5eb2:	461f      	mov	r7, r3
   b5eb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5eb8:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b5ebc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5ec0:	e89c 0003 	ldmia.w	ip, {r0, r1}
   b5ec4:	9a04      	ldr	r2, [sp, #16]
   b5ec6:	e882 0003 	stmia.w	r2, {r0, r1}
   b5eca:	aa9d      	add	r2, sp, #628	; 0x274
   b5ecc:	9236      	str	r2, [sp, #216]	; 0xd8
   b5ece:	2206      	movs	r2, #6
   b5ed0:	9237      	str	r2, [sp, #220]	; 0xdc
   b5ed2:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5ed6:	4628      	mov	r0, r5
   b5ed8:	f7ff f930 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5edc:	aa93      	add	r2, sp, #588	; 0x24c
   b5ede:	9234      	str	r2, [sp, #208]	; 0xd0
   b5ee0:	2332      	movs	r3, #50	; 0x32
   b5ee2:	2204      	movs	r2, #4
   b5ee4:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b5ee8:	9235      	str	r2, [sp, #212]	; 0xd4
   b5eea:	ab34      	add	r3, sp, #208	; 0xd0
   b5eec:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5ef0:	4640      	mov	r0, r8
   b5ef2:	9493      	str	r4, [sp, #588]	; 0x24c
   b5ef4:	9496      	str	r4, [sp, #600]	; 0x258
   b5ef6:	f7ff f921 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5efa:	4658      	mov	r0, fp
   b5efc:	499e      	ldr	r1, [pc, #632]	; (b6178 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd5c>)
   b5efe:	f7fe f903 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5f02:	a8a4      	add	r0, sp, #656	; 0x290
   b5f04:	499d      	ldr	r1, [pc, #628]	; (b617c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd60>)
   b5f06:	f7fe f8ff 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5f0a:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5f0c:	499c      	ldr	r1, [pc, #624]	; (b6180 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd64>)
   b5f0e:	f7fe f8fb 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5f12:	aba4      	add	r3, sp, #656	; 0x290
   b5f14:	2102      	movs	r1, #2
   b5f16:	9332      	str	r3, [sp, #200]	; 0xc8
   b5f18:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
   b5f1c:	9133      	str	r1, [sp, #204]	; 0xcc
   b5f1e:	aa32      	add	r2, sp, #200	; 0xc8
   b5f20:	464b      	mov	r3, r9
   b5f22:	ca06      	ldmia	r2, {r1, r2}
   b5f24:	a883      	add	r0, sp, #524	; 0x20c
   b5f26:	f7fe fcaf 	bl	b4888 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5f2a:	4621      	mov	r1, r4
   b5f2c:	2210      	movs	r2, #16
   b5f2e:	a88f      	add	r0, sp, #572	; 0x23c
   b5f30:	f006 fb4a 	bl	bc5c8 <memset>
   b5f34:	aa8f      	add	r2, sp, #572	; 0x23c
   b5f36:	9230      	str	r2, [sp, #192]	; 0xc0
   b5f38:	2204      	movs	r2, #4
   b5f3a:	ab30      	add	r3, sp, #192	; 0xc0
   b5f3c:	9231      	str	r2, [sp, #196]	; 0xc4
   b5f3e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5f42:	4630      	mov	r0, r6
   b5f44:	f7ff f8fa 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLineMBTA = Railway{
   b5f48:	aa83      	add	r2, sp, #524	; 0x20c
   b5f4a:	4643      	mov	r3, r8
   b5f4c:	a98c      	add	r1, sp, #560	; 0x230
   b5f4e:	e9cd b200 	strd	fp, r2, [sp]
   b5f52:	9602      	str	r6, [sp, #8]
   b5f54:	462a      	mov	r2, r5
   b5f56:	488b      	ldr	r0, [pc, #556]	; (b6184 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd68>)
   b5f58:	f7ff f970 	bl	b523c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5f5c:	4630      	mov	r0, r6
   b5f5e:	f7fe fc09 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b5f62:	a883      	add	r0, sp, #524	; 0x20c
   b5f64:	f7fe fc27 	bl	b47b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5f68:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5f6a:	f005 fb55 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5f6e:	a8a4      	add	r0, sp, #656	; 0x290
   b5f70:	f005 fb52 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5f74:	4658      	mov	r0, fp
   b5f76:	f005 fb4f 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5f7a:	4640      	mov	r0, r8
   b5f7c:	f7fe fbfa 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5f80:	4628      	mov	r0, r5
   b5f82:	f7fe fbf7 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5f86:	a88c      	add	r0, sp, #560	; 0x230
   b5f88:	f7fe fbe0 	bl	b474c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5f8c:	4b7e      	ldr	r3, [pc, #504]	; (b6188 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd6c>)
   b5f8e:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b5f90:	4b7e      	ldr	r3, [pc, #504]	; (b618c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd70>)
   b5f92:	93a5      	str	r3, [sp, #660]	; 0x294
      lat = la;
   b5f94:	4b7e      	ldr	r3, [pc, #504]	; (b6190 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd74>)
   b5f96:	93a6      	str	r3, [sp, #664]	; 0x298
      lon = lo;
   b5f98:	4b7e      	ldr	r3, [pc, #504]	; (b6194 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd78>)
   b5f9a:	93a7      	str	r3, [sp, #668]	; 0x29c
      lat = la;
   b5f9c:	4b7e      	ldr	r3, [pc, #504]	; (b6198 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd7c>)
   b5f9e:	93a8      	str	r3, [sp, #672]	; 0x2a0
      lon = lo;
   b5fa0:	4b7e      	ldr	r3, [pc, #504]	; (b619c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd80>)
   b5fa2:	93a9      	str	r3, [sp, #676]	; 0x2a4
      lat = la;
   b5fa4:	4b7e      	ldr	r3, [pc, #504]	; (b61a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd84>)
   b5fa6:	93aa      	str	r3, [sp, #680]	; 0x2a8
      lon = lo;
   b5fa8:	4b7e      	ldr	r3, [pc, #504]	; (b61a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd88>)
   b5faa:	93ab      	str	r3, [sp, #684]	; 0x2ac
};
   b5fac:	2204      	movs	r2, #4
   b5fae:	aba4      	add	r3, sp, #656	; 0x290
   b5fb0:	932e      	str	r3, [sp, #184]	; 0xb8
   b5fb2:	922f      	str	r2, [sp, #188]	; 0xbc
   b5fb4:	f10d 0a90 	add.w	sl, sp, #144	; 0x90
   b5fb8:	aa2e      	add	r2, sp, #184	; 0xb8
   b5fba:	4653      	mov	r3, sl
   b5fbc:	ca06      	ldmia	r2, {r1, r2}
   b5fbe:	a88f      	add	r0, sp, #572	; 0x23c
   b5fc0:	f7fe fc2e 	bl	b4820 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5fc4:	f507 7390 	add.w	r3, r7, #288	; 0x120
   b5fc8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   b5fcc:	2303      	movs	r3, #3
   b5fce:	952c      	str	r5, [sp, #176]	; 0xb0
   b5fd0:	932d      	str	r3, [sp, #180]	; 0xb4
   b5fd2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   b5fd6:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5fda:	a88c      	add	r0, sp, #560	; 0x230
   b5fdc:	f7ff f8ae 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5fe0:	2228      	movs	r2, #40	; 0x28
   b5fe2:	e9cd 2498 	strd	r2, r4, [sp, #608]	; 0x260
   b5fe6:	2204      	movs	r2, #4
   b5fe8:	ab2a      	add	r3, sp, #168	; 0xa8
   b5fea:	f8cd b0a8 	str.w	fp, [sp, #168]	; 0xa8
   b5fee:	922b      	str	r2, [sp, #172]	; 0xac
   b5ff0:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5ff4:	4640      	mov	r0, r8
   b5ff6:	9497      	str	r4, [sp, #604]	; 0x25c
   b5ff8:	949a      	str	r4, [sp, #616]	; 0x268
   b5ffa:	f7ff f89f 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5ffe:	a89d      	add	r0, sp, #628	; 0x274
   b6000:	4969      	ldr	r1, [pc, #420]	; (b61a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd8c>)
   b6002:	f7fe f881 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6006:	a8b0      	add	r0, sp, #704	; 0x2c0
   b6008:	4968      	ldr	r1, [pc, #416]	; (b61ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd90>)
   b600a:	f7fe f87d 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b600e:	a8b6      	add	r0, sp, #728	; 0x2d8
   b6010:	4967      	ldr	r1, [pc, #412]	; (b61b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd94>)
   b6012:	f7fe f879 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6016:	a9b0      	add	r1, sp, #704	; 0x2c0
   b6018:	9128      	str	r1, [sp, #160]	; 0xa0
   b601a:	2102      	movs	r1, #2
   b601c:	f10d 0988 	add.w	r9, sp, #136	; 0x88
   b6020:	9129      	str	r1, [sp, #164]	; 0xa4
   b6022:	aa28      	add	r2, sp, #160	; 0xa0
   b6024:	464b      	mov	r3, r9
   b6026:	ca06      	ldmia	r2, {r1, r2}
   b6028:	a883      	add	r0, sp, #524	; 0x20c
   b602a:	f7fe fc2d 	bl	b4888 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b602e:	4621      	mov	r1, r4
   b6030:	2210      	movs	r2, #16
   b6032:	a893      	add	r0, sp, #588	; 0x24c
   b6034:	f006 fac8 	bl	bc5c8 <memset>
   b6038:	aa93      	add	r2, sp, #588	; 0x24c
   b603a:	9226      	str	r2, [sp, #152]	; 0x98
   b603c:	2204      	movs	r2, #4
   b603e:	ab26      	add	r3, sp, #152	; 0x98
   b6040:	9227      	str	r2, [sp, #156]	; 0x9c
   b6042:	e893 0006 	ldmia.w	r3, {r1, r2}
   b6046:	4630      	mov	r0, r6
   b6048:	f7ff f878 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLineMBTA = Railway{
   b604c:	aa83      	add	r2, sp, #524	; 0x20c
   b604e:	9201      	str	r2, [sp, #4]
   b6050:	aa9d      	add	r2, sp, #628	; 0x274
   b6052:	4643      	mov	r3, r8
   b6054:	a98f      	add	r1, sp, #572	; 0x23c
   b6056:	9602      	str	r6, [sp, #8]
   b6058:	9200      	str	r2, [sp, #0]
   b605a:	4856      	ldr	r0, [pc, #344]	; (b61b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd98>)
   b605c:	aa8c      	add	r2, sp, #560	; 0x230
   b605e:	f7ff f8ed 	bl	b523c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b6062:	4630      	mov	r0, r6
   b6064:	f7fe fb86 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b6068:	a883      	add	r0, sp, #524	; 0x20c
   b606a:	f7fe fba4 	bl	b47b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b606e:	a8b6      	add	r0, sp, #728	; 0x2d8
   b6070:	f005 fad2 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6074:	a8b0      	add	r0, sp, #704	; 0x2c0
   b6076:	f005 facf 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b607a:	a89d      	add	r0, sp, #628	; 0x274
   b607c:	f005 facc 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6080:	4640      	mov	r0, r8
   b6082:	f7fe fb77 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6086:	a88c      	add	r0, sp, #560	; 0x230
   b6088:	f7fe fb74 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b608c:	a88f      	add	r0, sp, #572	; 0x23c
   b608e:	f7fe fb5d 	bl	b474c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b6092:	4b49      	ldr	r3, [pc, #292]	; (b61b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd9c>)
   b6094:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b6096:	4b49      	ldr	r3, [pc, #292]	; (b61bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xda0>)
   b6098:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b609a:	4b49      	ldr	r3, [pc, #292]	; (b61c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xda4>)
   b609c:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b609e:	4b49      	ldr	r3, [pc, #292]	; (b61c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xda8>)
   b60a0:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b60a2:	4b49      	ldr	r3, [pc, #292]	; (b61c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdac>)
   b60a4:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b60a6:	4b49      	ldr	r3, [pc, #292]	; (b61cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdb0>)
   b60a8:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b60aa:	4b49      	ldr	r3, [pc, #292]	; (b61d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdb4>)
   b60ac:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b60ae:	4b49      	ldr	r3, [pc, #292]	; (b61d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdb8>)
   b60b0:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b60b2:	4b49      	ldr	r3, [pc, #292]	; (b61d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdbc>)
   b60b4:	93b8      	str	r3, [sp, #736]	; 0x2e0
};
   b60b6:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b60b8:	4b48      	ldr	r3, [pc, #288]	; (b61dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdc0>)
   b60ba:	9224      	str	r2, [sp, #144]	; 0x90
   b60bc:	93b9      	str	r3, [sp, #740]	; 0x2e4
   b60be:	2206      	movs	r2, #6
      lat = la;
   b60c0:	4b47      	ldr	r3, [pc, #284]	; (b61e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdc4>)
   b60c2:	9225      	str	r2, [sp, #148]	; 0x94
   b60c4:	93ba      	str	r3, [sp, #744]	; 0x2e8
   b60c6:	aa1a      	add	r2, sp, #104	; 0x68
      lon = lo;
   b60c8:	4b46      	ldr	r3, [pc, #280]	; (b61e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdc8>)
   b60ca:	93bb      	str	r3, [sp, #748]	; 0x2ec
   b60cc:	a88c      	add	r0, sp, #560	; 0x230
   b60ce:	4613      	mov	r3, r2
   b60d0:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b60d4:	f7fe fba4 	bl	b4820 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b60d8:	4b26      	ldr	r3, [pc, #152]	; (b6174 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd58>)
   b60da:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
   b60de:	f503 7c96 	add.w	ip, r3, #300	; 0x12c
   b60e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b60e6:	465f      	mov	r7, fp
   b60e8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b60ea:	f8dc 3000 	ldr.w	r3, [ip]
   b60ee:	603b      	str	r3, [r7, #0]
   b60f0:	2305      	movs	r3, #5
   b60f2:	9323      	str	r3, [sp, #140]	; 0x8c
   b60f4:	e899 0006 	ldmia.w	r9, {r1, r2}
   b60f8:	4628      	mov	r0, r5
   b60fa:	f7ff f81f 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b60fe:	aa93      	add	r2, sp, #588	; 0x24c
   b6100:	9220      	str	r2, [sp, #128]	; 0x80
   b6102:	232d      	movs	r3, #45	; 0x2d
   b6104:	2204      	movs	r2, #4
   b6106:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b610a:	9221      	str	r2, [sp, #132]	; 0x84
   b610c:	ab20      	add	r3, sp, #128	; 0x80
   b610e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b6112:	4640      	mov	r0, r8
   b6114:	9493      	str	r4, [sp, #588]	; 0x24c
   b6116:	9496      	str	r4, [sp, #600]	; 0x258
   b6118:	f7ff f810 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b611c:	a89d      	add	r0, sp, #628	; 0x274
   b611e:	4932      	ldr	r1, [pc, #200]	; (b61e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdcc>)
   b6120:	f7fd fff2 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6124:	a8a4      	add	r0, sp, #656	; 0x290
   b6126:	4931      	ldr	r1, [pc, #196]	; (b61ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdd0>)
   b6128:	f7fd ffee 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b612c:	a8aa      	add	r0, sp, #680	; 0x2a8
   b612e:	4930      	ldr	r1, [pc, #192]	; (b61f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdd4>)
   b6130:	f7fd ffea 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6134:	aba4      	add	r3, sp, #656	; 0x290
   b6136:	931e      	str	r3, [sp, #120]	; 0x78
   b6138:	2302      	movs	r3, #2
   b613a:	931f      	str	r3, [sp, #124]	; 0x7c
   b613c:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   b6140:	aa1e      	add	r2, sp, #120	; 0x78
   b6142:	4653      	mov	r3, sl
   b6144:	ca06      	ldmia	r2, {r1, r2}
   b6146:	a883      	add	r0, sp, #524	; 0x20c
   b6148:	f7fe fb9e 	bl	b4888 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b614c:	4621      	mov	r1, r4
   b614e:	2210      	movs	r2, #16
   b6150:	a88f      	add	r0, sp, #572	; 0x23c
   b6152:	f006 fa39 	bl	bc5c8 <memset>
   b6156:	aa8f      	add	r2, sp, #572	; 0x23c
   b6158:	921c      	str	r2, [sp, #112]	; 0x70
   b615a:	2204      	movs	r2, #4
   b615c:	ab1c      	add	r3, sp, #112	; 0x70
   b615e:	921d      	str	r2, [sp, #116]	; 0x74
   b6160:	e893 0006 	ldmia.w	r3, {r1, r2}
   b6164:	4630      	mov	r0, r6
   b6166:	f7fe ffe9 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLineMBTA = Railway{
   b616a:	ab83      	add	r3, sp, #524	; 0x20c
   b616c:	9301      	str	r3, [sp, #4]
   b616e:	ab9d      	add	r3, sp, #628	; 0x274
   b6170:	e040      	b.n	b61f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdd8>
   b6172:	bf00      	nop
   b6174:	000beaa4 	.word	0x000beaa4
   b6178:	000be8d0 	.word	0x000be8d0
   b617c:	000be8d4 	.word	0x000be8d4
   b6180:	000be8db 	.word	0x000be8db
   b6184:	2003e5c0 	.word	0x2003e5c0
   b6188:	422984a9 	.word	0x422984a9
   b618c:	c28e0be6 	.word	0xc28e0be6
   b6190:	422970a6 	.word	0x422970a6
   b6194:	c28e1862 	.word	0xc28e1862
   b6198:	42296fe1 	.word	0x42296fe1
   b619c:	c28e1e86 	.word	0xc28e1e86
   b61a0:	422971d1 	.word	0x422971d1
   b61a4:	c28e1fcf 	.word	0xc28e1fcf
   b61a8:	000be8e2 	.word	0x000be8e2
   b61ac:	000be8e7 	.word	0x000be8e7
   b61b0:	000be8ee 	.word	0x000be8ee
   b61b4:	2003536c 	.word	0x2003536c
   b61b8:	4229537a 	.word	0x4229537a
   b61bc:	c28e30c9 	.word	0xc28e30c9
   b61c0:	422963d0 	.word	0x422963d0
   b61c4:	c28e26f1 	.word	0xc28e26f1
   b61c8:	4229634b 	.word	0x4229634b
   b61cc:	c28e210d 	.word	0xc28e210d
   b61d0:	42296e30 	.word	0x42296e30
   b61d4:	c28e1d5a 	.word	0xc28e1d5a
   b61d8:	42298278 	.word	0x42298278
   b61dc:	c28e26e2 	.word	0xc28e26e2
   b61e0:	42299ccd 	.word	0x42299ccd
   b61e4:	c28e2770 	.word	0xc28e2770
   b61e8:	000be917 	.word	0x000be917
   b61ec:	000be91e 	.word	0x000be91e
   b61f0:	000be925 	.word	0x000be925
   b61f4:	462a      	mov	r2, r5
   b61f6:	a98c      	add	r1, sp, #560	; 0x230
   b61f8:	9602      	str	r6, [sp, #8]
   b61fa:	9300      	str	r3, [sp, #0]
   b61fc:	48b5      	ldr	r0, [pc, #724]	; (b64d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10b8>)
   b61fe:	4643      	mov	r3, r8
   b6200:	f7ff f81c 	bl	b523c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b6204:	4630      	mov	r0, r6
   b6206:	f7fe fab5 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b620a:	a883      	add	r0, sp, #524	; 0x20c
   b620c:	f7fe fad3 	bl	b47b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b6210:	a8aa      	add	r0, sp, #680	; 0x2a8
   b6212:	f005 fa01 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6216:	a8a4      	add	r0, sp, #656	; 0x290
   b6218:	f005 f9fe 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b621c:	a89d      	add	r0, sp, #628	; 0x274
   b621e:	f005 f9fb 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6222:	4640      	mov	r0, r8
   b6224:	f7fe faa6 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6228:	4628      	mov	r0, r5
   b622a:	f7fe faa3 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b622e:	a88c      	add	r0, sp, #560	; 0x230
   b6230:	f7fe fa8c 	bl	b474c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b6234:	4ba8      	ldr	r3, [pc, #672]	; (b64d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10bc>)
   b6236:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b6238:	4ba8      	ldr	r3, [pc, #672]	; (b64dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10c0>)
   b623a:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b623c:	4ba8      	ldr	r3, [pc, #672]	; (b64e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10c4>)
   b623e:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b6240:	4ba8      	ldr	r3, [pc, #672]	; (b64e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10c8>)
   b6242:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b6244:	4ba8      	ldr	r3, [pc, #672]	; (b64e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10cc>)
   b6246:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b6248:	4ba8      	ldr	r3, [pc, #672]	; (b64ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d0>)
   b624a:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b624c:	4ba8      	ldr	r3, [pc, #672]	; (b64f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d4>)
   b624e:	93b8      	str	r3, [sp, #736]	; 0x2e0
      lon = lo;
   b6250:	4ba8      	ldr	r3, [pc, #672]	; (b64f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d8>)
   b6252:	93b9      	str	r3, [sp, #740]	; 0x2e4
      lat = la;
   b6254:	4ba8      	ldr	r3, [pc, #672]	; (b64f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10dc>)
   b6256:	93ba      	str	r3, [sp, #744]	; 0x2e8
      lon = lo;
   b6258:	4ba8      	ldr	r3, [pc, #672]	; (b64fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e0>)
   b625a:	93bb      	str	r3, [sp, #748]	; 0x2ec
      lat = la;
   b625c:	4ba8      	ldr	r3, [pc, #672]	; (b6500 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e4>)
   b625e:	93bc      	str	r3, [sp, #752]	; 0x2f0
      lon = lo;
   b6260:	4ba8      	ldr	r3, [pc, #672]	; (b6504 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e8>)
   b6262:	93bd      	str	r3, [sp, #756]	; 0x2f4
      lat = la;
   b6264:	4ba8      	ldr	r3, [pc, #672]	; (b6508 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10ec>)
   b6266:	93be      	str	r3, [sp, #760]	; 0x2f8
      lon = lo;
   b6268:	4ba8      	ldr	r3, [pc, #672]	; (b650c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f0>)
   b626a:	93bf      	str	r3, [sp, #764]	; 0x2fc
};
   b626c:	abb0      	add	r3, sp, #704	; 0x2c0
   b626e:	931a      	str	r3, [sp, #104]	; 0x68
   b6270:	2308      	movs	r3, #8
   b6272:	931b      	str	r3, [sp, #108]	; 0x6c
   b6274:	f10d 0940 	add.w	r9, sp, #64	; 0x40
   b6278:	aa1a      	add	r2, sp, #104	; 0x68
   b627a:	464b      	mov	r3, r9
   b627c:	ca06      	ldmia	r2, {r1, r2}
   b627e:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b6280:	edcd 8ab2 	vstr	s17, [sp, #712]	; 0x2c8
      lon = lo;
   b6284:	ed8d 8ab3 	vstr	s16, [sp, #716]	; 0x2cc
   b6288:	f7fe faca 	bl	b4820 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b628c:	f8df c2c8 	ldr.w	ip, [pc, #712]	; b6558 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x113c>
   b6290:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6294:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b6298:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b629c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   b62a0:	9b04      	ldr	r3, [sp, #16]
   b62a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b62a6:	ab9d      	add	r3, sp, #628	; 0x274
   b62a8:	9318      	str	r3, [sp, #96]	; 0x60
   b62aa:	2307      	movs	r3, #7
   b62ac:	9319      	str	r3, [sp, #100]	; 0x64
   b62ae:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b62b2:	4628      	mov	r0, r5
   b62b4:	f7fe ff42 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b62b8:	aa93      	add	r2, sp, #588	; 0x24c
   b62ba:	9216      	str	r2, [sp, #88]	; 0x58
   b62bc:	2346      	movs	r3, #70	; 0x46
   b62be:	2204      	movs	r2, #4
   b62c0:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b62c4:	9217      	str	r2, [sp, #92]	; 0x5c
   b62c6:	ab16      	add	r3, sp, #88	; 0x58
   b62c8:	e893 0006 	ldmia.w	r3, {r1, r2}
   b62cc:	4640      	mov	r0, r8
   b62ce:	9493      	str	r4, [sp, #588]	; 0x24c
   b62d0:	9496      	str	r4, [sp, #600]	; 0x258
   b62d2:	f7fe ff33 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b62d6:	4658      	mov	r0, fp
   b62d8:	498d      	ldr	r1, [pc, #564]	; (b6510 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f4>)
   b62da:	f7fd ff15 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b62de:	a8a4      	add	r0, sp, #656	; 0x290
   b62e0:	498c      	ldr	r1, [pc, #560]	; (b6514 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f8>)
   b62e2:	f7fd ff11 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b62e6:	a8aa      	add	r0, sp, #680	; 0x2a8
   b62e8:	498b      	ldr	r1, [pc, #556]	; (b6518 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10fc>)
   b62ea:	f7fd ff0d 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b62ee:	aba4      	add	r3, sp, #656	; 0x290
   b62f0:	9314      	str	r3, [sp, #80]	; 0x50
   b62f2:	2302      	movs	r3, #2
   b62f4:	9315      	str	r3, [sp, #84]	; 0x54
   b62f6:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   b62fa:	aa14      	add	r2, sp, #80	; 0x50
   b62fc:	4653      	mov	r3, sl
   b62fe:	ca06      	ldmia	r2, {r1, r2}
   b6300:	a883      	add	r0, sp, #524	; 0x20c
   b6302:	f7fe fac1 	bl	b4888 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b6306:	4621      	mov	r1, r4
   b6308:	2210      	movs	r2, #16
   b630a:	a88f      	add	r0, sp, #572	; 0x23c
   b630c:	f006 f95c 	bl	bc5c8 <memset>
   b6310:	aa8f      	add	r2, sp, #572	; 0x23c
   b6312:	9212      	str	r2, [sp, #72]	; 0x48
   b6314:	2204      	movs	r2, #4
   b6316:	ab12      	add	r3, sp, #72	; 0x48
   b6318:	9213      	str	r2, [sp, #76]	; 0x4c
   b631a:	e893 0006 	ldmia.w	r3, {r1, r2}
   b631e:	4630      	mov	r0, r6
   b6320:	f7fe ff0c 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLine1MBTA = Railway{
   b6324:	ab83      	add	r3, sp, #524	; 0x20c
   b6326:	462a      	mov	r2, r5
   b6328:	a98c      	add	r1, sp, #560	; 0x230
   b632a:	e9cd b300 	strd	fp, r3, [sp]
   b632e:	9602      	str	r6, [sp, #8]
   b6330:	4643      	mov	r3, r8
   b6332:	487a      	ldr	r0, [pc, #488]	; (b651c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1100>)
   b6334:	f7fe ff82 	bl	b523c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b6338:	4630      	mov	r0, r6
   b633a:	f7fe fa1b 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b633e:	a883      	add	r0, sp, #524	; 0x20c
   b6340:	f7fe fa39 	bl	b47b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b6344:	a8aa      	add	r0, sp, #680	; 0x2a8
   b6346:	f005 f967 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b634a:	a8a4      	add	r0, sp, #656	; 0x290
   b634c:	f005 f964 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6350:	4658      	mov	r0, fp
   b6352:	f005 f961 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6356:	4640      	mov	r0, r8
   b6358:	f7fe fa0c 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b635c:	4628      	mov	r0, r5
   b635e:	f7fe fa09 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6362:	a88c      	add	r0, sp, #560	; 0x230
   b6364:	f7fe f9f2 	bl	b474c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b6368:	4b6d      	ldr	r3, [pc, #436]	; (b6520 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1104>)
   b636a:	939d      	str	r3, [sp, #628]	; 0x274
      lon = lo;
   b636c:	4b6d      	ldr	r3, [pc, #436]	; (b6524 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1108>)
   b636e:	939e      	str	r3, [sp, #632]	; 0x278
};
   b6370:	ab9d      	add	r3, sp, #628	; 0x274
   b6372:	6033      	str	r3, [r6, #0]
   b6374:	2302      	movs	r3, #2
   b6376:	6073      	str	r3, [r6, #4]
   b6378:	e896 0006 	ldmia.w	r6, {r1, r2}
   b637c:	ab08      	add	r3, sp, #32
   b637e:	a88f      	add	r0, sp, #572	; 0x23c
      lat = la;
   b6380:	edcd 8a9f 	vstr	s17, [sp, #636]	; 0x27c
      lon = lo;
   b6384:	ed8d 8aa0 	vstr	s16, [sp, #640]	; 0x280
   b6388:	f7fe fa4a 	bl	b4820 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b638c:	ab09      	add	r3, sp, #36	; 0x24
   b638e:	9310      	str	r3, [sp, #64]	; 0x40
   b6390:	2301      	movs	r3, #1
   b6392:	9311      	str	r3, [sp, #68]	; 0x44
   b6394:	e899 0006 	ldmia.w	r9, {r1, r2}
   b6398:	260f      	movs	r6, #15
   b639a:	a88c      	add	r0, sp, #560	; 0x230
   b639c:	9609      	str	r6, [sp, #36]	; 0x24
   b639e:	f7fe fecd 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b63a2:	2304      	movs	r3, #4
   b63a4:	930f      	str	r3, [sp, #60]	; 0x3c
   b63a6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   b63aa:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b63ae:	4628      	mov	r0, r5
   b63b0:	e9cd 4697 	strd	r4, r6, [sp, #604]	; 0x25c
   b63b4:	e9cd 4499 	strd	r4, r4, [sp, #612]	; 0x264
   b63b8:	f7fe fec0 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b63bc:	a8a4      	add	r0, sp, #656	; 0x290
   b63be:	4954      	ldr	r1, [pc, #336]	; (b6510 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f4>)
   b63c0:	f7fd fea2 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b63c4:	a8b0      	add	r0, sp, #704	; 0x2c0
   b63c6:	4953      	ldr	r1, [pc, #332]	; (b6514 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f8>)
   b63c8:	f7fd fe9e 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b63cc:	a8b6      	add	r0, sp, #728	; 0x2d8
   b63ce:	4952      	ldr	r1, [pc, #328]	; (b6518 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10fc>)
   b63d0:	f7fd fe9a 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b63d4:	abb0      	add	r3, sp, #704	; 0x2c0
   b63d6:	930c      	str	r3, [sp, #48]	; 0x30
   b63d8:	2302      	movs	r3, #2
   b63da:	930d      	str	r3, [sp, #52]	; 0x34
   b63dc:	aa0c      	add	r2, sp, #48	; 0x30
   b63de:	ab07      	add	r3, sp, #28
   b63e0:	ca06      	ldmia	r2, {r1, r2}
   b63e2:	4640      	mov	r0, r8
   b63e4:	f7fe fa50 	bl	b4888 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b63e8:	4621      	mov	r1, r4
   b63ea:	2210      	movs	r2, #16
   b63ec:	a893      	add	r0, sp, #588	; 0x24c
   b63ee:	f006 f8eb 	bl	bc5c8 <memset>
   b63f2:	aa93      	add	r2, sp, #588	; 0x24c
   b63f4:	920a      	str	r2, [sp, #40]	; 0x28
   b63f6:	2204      	movs	r2, #4
   b63f8:	ab0a      	add	r3, sp, #40	; 0x28
   b63fa:	920b      	str	r2, [sp, #44]	; 0x2c
   b63fc:	e893 0006 	ldmia.w	r3, {r1, r2}
   b6400:	a883      	add	r0, sp, #524	; 0x20c
   b6402:	f7fe fe9b 	bl	b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLine2MBTA = Railway{
   b6406:	ab83      	add	r3, sp, #524	; 0x20c
   b6408:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b640c:	aba4      	add	r3, sp, #656	; 0x290
   b640e:	aa8c      	add	r2, sp, #560	; 0x230
   b6410:	a98f      	add	r1, sp, #572	; 0x23c
   b6412:	9300      	str	r3, [sp, #0]
   b6414:	4844      	ldr	r0, [pc, #272]	; (b6528 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x110c>)
   b6416:	462b      	mov	r3, r5
   b6418:	f7fe ff10 	bl	b523c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b641c:	a883      	add	r0, sp, #524	; 0x20c
   b641e:	f7fe f9a9 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b6422:	4640      	mov	r0, r8
   b6424:	f7fe f9c7 	bl	b47b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b6428:	a8b6      	add	r0, sp, #728	; 0x2d8
   b642a:	f005 f8f5 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b642e:	a8b0      	add	r0, sp, #704	; 0x2c0
   b6430:	f005 f8f2 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6434:	a8a4      	add	r0, sp, #656	; 0x290
   b6436:	f005 f8ef 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b643a:	4628      	mov	r0, r5
   b643c:	f7fe f99a 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6440:	a88c      	add	r0, sp, #560	; 0x230
   b6442:	f7fe f997 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6446:	a88f      	add	r0, sp, #572	; 0x23c
   b6448:	f7fe f980 	bl	b474c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b644c:	4b37      	ldr	r3, [pc, #220]	; (b652c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1110>)
const BleUuid serviceUuid("a73ba101-8192-4a51-b42d-ae9cd14b14a5");
   b644e:	4938      	ldr	r1, [pc, #224]	; (b6530 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1114>)
   b6450:	609c      	str	r4, [r3, #8]
   b6452:	e9c3 4400 	strd	r4, r4, [r3]
   b6456:	4b37      	ldr	r3, [pc, #220]	; (b6534 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1118>)
   b6458:	4837      	ldr	r0, [pc, #220]	; (b6538 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x111c>)
   b645a:	609c      	str	r4, [r3, #8]
   b645c:	e9c3 4400 	strd	r4, r4, [r3]
   b6460:	4b36      	ldr	r3, [pc, #216]	; (b653c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1120>)
   b6462:	4d37      	ldr	r5, [pc, #220]	; (b6540 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1124>)
   b6464:	609c      	str	r4, [r3, #8]
   b6466:	e9c3 4400 	strd	r4, r4, [r3]
   b646a:	4b36      	ldr	r3, [pc, #216]	; (b6544 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1128>)
   b646c:	f8df 80c8 	ldr.w	r8, [pc, #200]	; b6538 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x111c>
   b6470:	609c      	str	r4, [r3, #8]
   b6472:	e9c3 4400 	strd	r4, r4, [r3]
   b6476:	4b34      	ldr	r3, [pc, #208]	; (b6548 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x112c>)
   b6478:	e9c3 4400 	strd	r4, r4, [r3]
   b647c:	609c      	str	r4, [r3, #8]
   b647e:	f002 ff71 	bl	b9364 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b6482:	4932      	ldr	r1, [pc, #200]	; (b654c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1130>)
   b6484:	4832      	ldr	r0, [pc, #200]	; (b6550 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1134>)
   b6486:	f002 ff6d 	bl	b9364 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b648a:	4932      	ldr	r1, [pc, #200]	; (b6554 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1138>)
   b648c:	482c      	ldr	r0, [pc, #176]	; (b6540 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1124>)
   b648e:	f002 ff69 	bl	b9364 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b6492:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6494:	465e      	mov	r6, fp
   b6496:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6498:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b649c:	f8d5 c000 	ldr.w	ip, [r5]
   b64a0:	f8c7 c000 	str.w	ip, [r7]
   b64a4:	ad9d      	add	r5, sp, #628	; 0x274
   b64a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b64a8:	46c1      	mov	r9, r8
   b64aa:	9b04      	ldr	r3, [sp, #16]
   b64ac:	f859 a910 	ldr.w	sl, [r9], #-16
   b64b0:	f8c3 a000 	str.w	sl, [r3]
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b64b4:	465d      	mov	r5, fp
   b64b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b64b8:	aea4      	add	r6, sp, #656	; 0x290
   b64ba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b64bc:	f8df e09c 	ldr.w	lr, [pc, #156]	; b655c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1140>
   b64c0:	f8c6 c000 	str.w	ip, [r6]
        BleUuid sUuid(svcUuid);
   b64c4:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
      constexpr __shared_count() noexcept : _M_pi(0)
   b64c8:	e9ce 4400 	strd	r4, r4, [lr]
   b64cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b64d0:	adb0      	add	r5, sp, #704	; 0x2c0
   b64d2:	e045      	b.n	b6560 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1144>
   b64d4:	20037e44 	.word	0x20037e44
   b64d8:	42296555 	.word	0x42296555
   b64dc:	c28e30ae 	.word	0xc28e30ae
   b64e0:	42296847 	.word	0x42296847
   b64e4:	c28e2445 	.word	0xc28e2445
   b64e8:	422968cc 	.word	0x422968cc
   b64ec:	c28e2106 	.word	0xc28e2106
   b64f0:	422972cd 	.word	0x422972cd
   b64f4:	c28e1db0 	.word	0xc28e1db0
   b64f8:	42297777 	.word	0x42297777
   b64fc:	c28e1f5e 	.word	0xc28e1f5e
   b6500:	42297668 	.word	0x42297668
   b6504:	c28e20d5 	.word	0xc28e20d5
   b6508:	42298291 	.word	0x42298291
   b650c:	c28e30ba 	.word	0xc28e30ba
   b6510:	000be85f 	.word	0x000be85f
   b6514:	000be909 	.word	0x000be909
   b6518:	000be910 	.word	0x000be910
   b651c:	20035464 	.word	0x20035464
   b6520:	422957f0 	.word	0x422957f0
   b6524:	c28e3351 	.word	0xc28e3351
   b6528:	200354d0 	.word	0x200354d0
   b652c:	20035448 	.word	0x20035448
   b6530:	000be954 	.word	0x000be954
   b6534:	20035458 	.word	0x20035458
   b6538:	200352b4 	.word	0x200352b4
   b653c:	20037dcc 	.word	0x20037dcc
   b6540:	200352dc 	.word	0x200352dc
   b6544:	200352f0 	.word	0x200352f0
   b6548:	2003e694 	.word	0x2003e694
   b654c:	000be979 	.word	0x000be979
   b6550:	200352c8 	.word	0x200352c8
   b6554:	000be99e 	.word	0x000be99e
   b6558:	000bebe4 	.word	0x000bebe4
   b655c:	2003e6a4 	.word	0x2003e6a4
   b6560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b6562:	abb0      	add	r3, sp, #704	; 0x2c0
        BleUuid sUuid(svcUuid);
   b6564:	f8c5 a000 	str.w	sl, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b6568:	4670      	mov	r0, lr
   b656a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b656e:	9300      	str	r3, [sp, #0]
   b6570:	4976      	ldr	r1, [pc, #472]	; (b674c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1330>)
   b6572:	aba4      	add	r3, sp, #656	; 0x290
   b6574:	f04f 0210 	mov.w	r2, #16
   b6578:	f003 fc5e 	bl	b9e38 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b657c:	f8df c25c 	ldr.w	ip, [pc, #604]	; b67dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13c0>
   b6580:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6584:	46de      	mov	lr, fp
   b6586:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b658a:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b658e:	f8dc e000 	ldr.w	lr, [ip]
   b6592:	f8c7 e000 	str.w	lr, [r7]
   b6596:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
   b659a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b659e:	9b04      	ldr	r3, [sp, #16]
   b65a0:	f8d8 9000 	ldr.w	r9, [r8]
   b65a4:	f8c3 9000 	str.w	r9, [r3]
        BleUuid cUuid(charUuid);
   b65a8:	46da      	mov	sl, fp
   b65aa:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b65ae:	f8df 81e4 	ldr.w	r8, [pc, #484]	; b6794 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1378>
   b65b2:	f50d 7c24 	add.w	ip, sp, #656	; 0x290
   b65b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b65ba:	f8c6 e000 	str.w	lr, [r6]
        BleUuid sUuid(svcUuid);
   b65be:	ae9d      	add	r6, sp, #628	; 0x274
      constexpr __shared_count() noexcept : _M_pi(0)
   b65c0:	e9c8 4400 	strd	r4, r4, [r8]
   b65c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b65c6:	f50d 7c30 	add.w	ip, sp, #704	; 0x2c0
   b65ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b65ce:	4b60      	ldr	r3, [pc, #384]	; (b6750 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1334>)
        BleUuid sUuid(svcUuid);
   b65d0:	f8c5 9000 	str.w	r9, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b65d4:	9301      	str	r3, [sp, #4]
   b65d6:	abb0      	add	r3, sp, #704	; 0x2c0
   b65d8:	f04f 0204 	mov.w	r2, #4
   b65dc:	495d      	ldr	r1, [pc, #372]	; (b6754 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1338>)
   b65de:	9402      	str	r4, [sp, #8]
   b65e0:	9300      	str	r3, [sp, #0]
   b65e2:	4640      	mov	r0, r8
   b65e4:	aba4      	add	r3, sp, #656	; 0x290
   b65e6:	f003 fc27 	bl	b9e38 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
Adafruit_VL6180X vl = Adafruit_VL6180X();
   b65ea:	485b      	ldr	r0, [pc, #364]	; (b6758 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x133c>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b65ec:	4c5b      	ldr	r4, [pc, #364]	; (b675c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1340>)
   b65ee:	f002 f894 	bl	b871a <_ZN16Adafruit_VL6180XC1Ev>
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b65f2:	495b      	ldr	r1, [pc, #364]	; (b6760 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1344>)
   b65f4:	485b      	ldr	r0, [pc, #364]	; (b6764 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1348>)
   b65f6:	f004 f942 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
   b65fa:	485b      	ldr	r0, [pc, #364]	; (b6768 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x134c>)
   b65fc:	f003 ff4c 	bl	ba498 <_ZN9IPAddressC1Ev>
   b6600:	4957      	ldr	r1, [pc, #348]	; (b6760 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1344>)
   b6602:	485a      	ldr	r0, [pc, #360]	; (b676c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1350>)
   b6604:	f004 f93b 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
   b6608:	4955      	ldr	r1, [pc, #340]	; (b6760 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1344>)
   b660a:	4859      	ldr	r0, [pc, #356]	; (b6770 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1354>)
   b660c:	f004 f937 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b6610:	4953      	ldr	r1, [pc, #332]	; (b6760 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1344>)
   b6612:	4858      	ldr	r0, [pc, #352]	; (b6774 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1358>)
   b6614:	f004 f933 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
HttpClient http;
   b6618:	4857      	ldr	r0, [pc, #348]	; (b6778 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x135c>)
   b661a:	f001 fa6f 	bl	b7afc <_ZN10HttpClientC1Ev>
   b661e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6622:	9300      	str	r3, [sp, #0]
   b6624:	f242 7210 	movw	r2, #10000	; 0x2710
   b6628:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b662c:	4b53      	ldr	r3, [pc, #332]	; (b677c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1360>)
   b662e:	4620      	mov	r0, r4
   b6630:	f001 fc3c 	bl	b7eac <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b6634:	4b52      	ldr	r3, [pc, #328]	; (b6780 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1364>)
String SSID = "";
   b6636:	494a      	ldr	r1, [pc, #296]	; (b6760 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1344>)
   b6638:	6023      	str	r3, [r4, #0]
   b663a:	4852      	ldr	r0, [pc, #328]	; (b6784 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1368>)
   b663c:	f004 f91f 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
String password = "";
   b6640:	4947      	ldr	r1, [pc, #284]	; (b6760 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1344>)
   b6642:	4851      	ldr	r0, [pc, #324]	; (b6788 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x136c>)
   b6644:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
   b6648:	ecbd 8b0e 	vpop	{d8-d14}
   b664c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
String password = "";
   b6650:	f004 b915 	b.w	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
   b6654:	484c      	ldr	r0, [pc, #304]	; (b6788 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x136c>)
   b6656:	f004 f8c7 	bl	ba7e8 <_ZN6StringD1Ev>
String SSID = "";
   b665a:	484a      	ldr	r0, [pc, #296]	; (b6784 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1368>)
   b665c:	f004 f8c4 	bl	ba7e8 <_ZN6StringD1Ev>
JsonParserStatic<10000, 1000> parser;
   b6660:	483e      	ldr	r0, [pc, #248]	; (b675c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1340>)
   b6662:	f7fd fd29 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b6666:	4b44      	ldr	r3, [pc, #272]	; (b6778 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x135c>)
   b6668:	4a48      	ldr	r2, [pc, #288]	; (b678c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1370>)
	if (_M_pi != nullptr)
   b666a:	699c      	ldr	r4, [r3, #24]
   b666c:	601a      	str	r2, [r3, #0]
   b666e:	b17c      	cbz	r4, b6690 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1274>
      if (--_M_use_count == 0)
   b6670:	6863      	ldr	r3, [r4, #4]
   b6672:	3b01      	subs	r3, #1
   b6674:	6063      	str	r3, [r4, #4]
   b6676:	b95b      	cbnz	r3, b6690 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1274>
          _M_dispose();
   b6678:	6823      	ldr	r3, [r4, #0]
   b667a:	4620      	mov	r0, r4
   b667c:	689b      	ldr	r3, [r3, #8]
   b667e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6680:	68a3      	ldr	r3, [r4, #8]
   b6682:	3b01      	subs	r3, #1
   b6684:	60a3      	str	r3, [r4, #8]
   b6686:	b91b      	cbnz	r3, b6690 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1274>
            _M_destroy();
   b6688:	6823      	ldr	r3, [r4, #0]
   b668a:	4620      	mov	r0, r4
   b668c:	68db      	ldr	r3, [r3, #12]
   b668e:	4798      	blx	r3
   b6690:	4838      	ldr	r0, [pc, #224]	; (b6774 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1358>)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b6692:	4c3f      	ldr	r4, [pc, #252]	; (b6790 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1374>)
   b6694:	f004 f8a8 	bl	ba7e8 <_ZN6StringD1Ev>
} http_request_t;
   b6698:	4835      	ldr	r0, [pc, #212]	; (b6770 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1354>)
   b669a:	f004 f8a5 	bl	ba7e8 <_ZN6StringD1Ev>
   b669e:	4833      	ldr	r0, [pc, #204]	; (b676c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1350>)
   b66a0:	f004 f8a2 	bl	ba7e8 <_ZN6StringD1Ev>
   b66a4:	482f      	ldr	r0, [pc, #188]	; (b6764 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1348>)
   b66a6:	f004 f89f 	bl	ba7e8 <_ZN6StringD1Ev>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b66aa:	483a      	ldr	r0, [pc, #232]	; (b6794 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1378>)
   b66ac:	f003 f8ab 	bl	b9806 <_ZN8particle17BleCharacteristicD1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b66b0:	4839      	ldr	r0, [pc, #228]	; (b6798 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x137c>)
   b66b2:	f003 f8a8 	bl	b9806 <_ZN8particle17BleCharacteristicD1Ev>
      }
   b66b6:	4839      	ldr	r0, [pc, #228]	; (b679c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1380>)
   b66b8:	f7fe f85c 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b66bc:	4838      	ldr	r0, [pc, #224]	; (b67a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1384>)
   b66be:	f7fe f859 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
std::vector<Railway> ctaRailways, mbtaRailways;
   b66c2:	4838      	ldr	r0, [pc, #224]	; (b67a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1388>)
   b66c4:	f7fe fcf5 	bl	b50b2 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b66c8:	4837      	ldr	r0, [pc, #220]	; (b67a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x138c>)
   b66ca:	f7fe fcf2 	bl	b50b2 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
	__destroy(__first, __last);
   b66ce:	e9d4 0100 	ldrd	r0, r1, [r4]
   b66d2:	f7fe fcfc 	bl	b50ce <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   b66d6:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b66d8:	b118      	cbz	r0, b66e2 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x12c6>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b66da:	68a1      	ldr	r1, [r4, #8]
   b66dc:	1a09      	subs	r1, r1, r0
   b66de:	f7fd fce0 	bl	b40a2 <_ZdlPvj>
Railway greenLine2MBTA = Railway{
   b66e2:	4832      	ldr	r0, [pc, #200]	; (b67ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1390>)
   b66e4:	f7fe fcba 	bl	b505c <_ZN7RailwayD1Ev>
Railway greenLine1MBTA = Railway{
   b66e8:	4831      	ldr	r0, [pc, #196]	; (b67b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1394>)
   b66ea:	f7fe fcb7 	bl	b505c <_ZN7RailwayD1Ev>
Railway orangeLineMBTA = Railway{
   b66ee:	4831      	ldr	r0, [pc, #196]	; (b67b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1398>)
   b66f0:	f7fe fcb4 	bl	b505c <_ZN7RailwayD1Ev>
Railway blueLineMBTA = Railway{
   b66f4:	4830      	ldr	r0, [pc, #192]	; (b67b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x139c>)
   b66f6:	f7fe fcb1 	bl	b505c <_ZN7RailwayD1Ev>
Railway redLineMBTA = Railway{
   b66fa:	4830      	ldr	r0, [pc, #192]	; (b67bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13a0>)
   b66fc:	f7fe fcae 	bl	b505c <_ZN7RailwayD1Ev>
Railway pinkLineCTA = Railway(
   b6700:	482f      	ldr	r0, [pc, #188]	; (b67c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13a4>)
   b6702:	f7fe fcab 	bl	b505c <_ZN7RailwayD1Ev>
Railway purpleLineCTA = Railway(
   b6706:	482f      	ldr	r0, [pc, #188]	; (b67c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13a8>)
   b6708:	f7fe fca8 	bl	b505c <_ZN7RailwayD1Ev>
Railway orangeLineCTA = Railway(
   b670c:	482e      	ldr	r0, [pc, #184]	; (b67c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13ac>)
   b670e:	f7fe fca5 	bl	b505c <_ZN7RailwayD1Ev>
Railway greenLineCTA = Railway(
   b6712:	482e      	ldr	r0, [pc, #184]	; (b67cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13b0>)
   b6714:	f7fe fca2 	bl	b505c <_ZN7RailwayD1Ev>
Railway brownLineCTA = Railway(
   b6718:	482d      	ldr	r0, [pc, #180]	; (b67d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13b4>)
   b671a:	f7fe fc9f 	bl	b505c <_ZN7RailwayD1Ev>
Railway blueLineCTA = Railway(
   b671e:	482d      	ldr	r0, [pc, #180]	; (b67d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13b8>)
   b6720:	f7fe fc9c 	bl	b505c <_ZN7RailwayD1Ev>
Railway redLineCTA = Railway(
   b6724:	482c      	ldr	r0, [pc, #176]	; (b67d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13bc>)
   b6726:	f7fe fc99 	bl	b505c <_ZN7RailwayD1Ev>
        if (wakeupSource_) {
   b672a:	6828      	ldr	r0, [r5, #0]
   b672c:	b138      	cbz	r0, b673e <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1322>
   b672e:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
   b6732:	ecbd 8b0e 	vpop	{d8-d14}
   b6736:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            free(wakeupSource_);
   b673a:	f002 bbbf 	b.w	b8ebc <free>
   b673e:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
   b6742:	ecbd 8b0e 	vpop	{d8-d14}
   b6746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b674a:	bf00      	nop
   b674c:	000be9c3 	.word	0x000be9c3
   b6750:	000b495d 	.word	0x000b495d
   b6754:	000be9c6 	.word	0x000be9c6
   b6758:	2003e6b0 	.word	0x2003e6b0
   b675c:	20037eb0 	.word	0x20037eb0
   b6760:	000bec3a 	.word	0x000bec3a
   b6764:	2003e62c 	.word	0x2003e62c
   b6768:	2003e63c 	.word	0x2003e63c
   b676c:	2003e654 	.word	0x2003e654
   b6770:	2003e668 	.word	0x2003e668
   b6774:	2003e67c 	.word	0x2003e67c
   b6778:	200355b0 	.word	0x200355b0
   b677c:	2003a5ec 	.word	0x2003a5ec
   b6780:	000bea90 	.word	0x000bea90
   b6784:	20035298 	.word	0x20035298
   b6788:	2003e46c 	.word	0x2003e46c
   b678c:	000bef44 	.word	0x000bef44
   b6790:	20035448 	.word	0x20035448
   b6794:	2003e68c 	.word	0x2003e68c
   b6798:	2003e6a4 	.word	0x2003e6a4
   b679c:	2003e694 	.word	0x2003e694
   b67a0:	200352f0 	.word	0x200352f0
   b67a4:	20037dcc 	.word	0x20037dcc
   b67a8:	20035458 	.word	0x20035458
   b67ac:	200354d0 	.word	0x200354d0
   b67b0:	20035464 	.word	0x20035464
   b67b4:	20037e44 	.word	0x20037e44
   b67b8:	2003536c 	.word	0x2003536c
   b67bc:	2003e5c0 	.word	0x2003e5c0
   b67c0:	2003e47c 	.word	0x2003e47c
   b67c4:	2003e4e8 	.word	0x2003e4e8
   b67c8:	20037dd8 	.word	0x20037dd8
   b67cc:	2003553c 	.word	0x2003553c
   b67d0:	200353d8 	.word	0x200353d8
   b67d4:	20035300 	.word	0x20035300
   b67d8:	2003e554 	.word	0x2003e554
   b67dc:	200352c8 	.word	0x200352c8

000b67e0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b67e0:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b67e2:	b510      	push	{r4, lr}
   b67e4:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b67e6:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b67ea:	d005      	beq.n	b67f8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b67ec:	4601      	mov	r1, r0
   b67ee:	4622      	mov	r2, r4
   b67f0:	4618      	mov	r0, r3
   b67f2:	f005 fecf 	bl	bc594 <memmove>
   b67f6:	4603      	mov	r3, r0
	}
   b67f8:	1918      	adds	r0, r3, r4
   b67fa:	bd10      	pop	{r4, pc}

000b67fc <_ZN7RailwayC1ERKS_>:
class Railway{
   b67fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6800:	460d      	mov	r5, r1
   b6802:	4604      	mov	r4, r0
   b6804:	f7fe f874 	bl	b48f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6808:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b680c:	2600      	movs	r6, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b680e:	1ac9      	subs	r1, r1, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6810:	e9c4 6603 	strd	r6, r6, [r4, #12]
   b6814:	6166      	str	r6, [r4, #20]
      { _M_create_storage(__n); }
   b6816:	1089      	asrs	r1, r1, #2
   b6818:	f104 000c 	add.w	r0, r4, #12
   b681c:	f7fe fbfe 	bl	b501c <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
			      _Category>::__copy_m(__first, __last, __result);
   b6820:	68e2      	ldr	r2, [r4, #12]
   b6822:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
   b6826:	f7ff ffdb 	bl	b67e0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b682a:	f105 0118 	add.w	r1, r5, #24
	this->_M_impl._M_finish =
   b682e:	6120      	str	r0, [r4, #16]
   b6830:	f104 0018 	add.w	r0, r4, #24
   b6834:	f7fe fc68 	bl	b5108 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6838:	e9d5 3709 	ldrd	r3, r7, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b683c:	4826      	ldr	r0, [pc, #152]	; (b68d8 <_ZN7RailwayC1ERKS_+0xdc>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b683e:	62e6      	str	r6, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6840:	1aff      	subs	r7, r7, r3
   b6842:	10bb      	asrs	r3, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6844:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6848:	4358      	muls	r0, r3
   b684a:	f7fd fc4b 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b684e:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b6852:	4407      	add	r7, r0
   b6854:	62e7      	str	r7, [r4, #44]	; 0x2c
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b6856:	e9d5 7809 	ldrd	r7, r8, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b685a:	4606      	mov	r6, r0
   b685c:	45b8      	cmp	r8, r7
   b685e:	d007      	beq.n	b6870 <_ZN7RailwayC1ERKS_+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6860:	b11e      	cbz	r6, b686a <_ZN7RailwayC1ERKS_+0x6e>
   b6862:	4639      	mov	r1, r7
   b6864:	4630      	mov	r0, r6
   b6866:	f7fe fc4f 	bl	b5108 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b686a:	360c      	adds	r6, #12
   b686c:	370c      	adds	r7, #12
   b686e:	e7f5      	b.n	b685c <_ZN7RailwayC1ERKS_+0x60>
	this->_M_impl._M_finish =
   b6870:	62a6      	str	r6, [r4, #40]	; 0x28
   b6872:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b6876:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b687a:	f7fd fcab 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b687e:	e9d5 3712 	ldrd	r3, r7, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6882:	4815      	ldr	r0, [pc, #84]	; (b68d8 <_ZN7RailwayC1ERKS_+0xdc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6884:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6886:	2300      	movs	r3, #0
   b6888:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b688c:	6523      	str	r3, [r4, #80]	; 0x50
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b688e:	10fb      	asrs	r3, r7, #3
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6890:	4358      	muls	r0, r3
   b6892:	f7fd fc73 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b6896:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b689a:	4407      	add	r7, r0
   b689c:	6527      	str	r7, [r4, #80]	; 0x50
   b689e:	e9d5 7812 	ldrd	r7, r8, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b68a2:	4606      	mov	r6, r0
   b68a4:	45b8      	cmp	r8, r7
   b68a6:	d007      	beq.n	b68b8 <_ZN7RailwayC1ERKS_+0xbc>
   b68a8:	b11e      	cbz	r6, b68b2 <_ZN7RailwayC1ERKS_+0xb6>
   b68aa:	4639      	mov	r1, r7
   b68ac:	4630      	mov	r0, r6
   b68ae:	f7fd fc91 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b68b2:	3618      	adds	r6, #24
   b68b4:	3718      	adds	r7, #24
   b68b6:	e7f5      	b.n	b68a4 <_ZN7RailwayC1ERKS_+0xa8>
	this->_M_impl._M_finish =
   b68b8:	64e6      	str	r6, [r4, #76]	; 0x4c
   b68ba:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b68bc:	6563      	str	r3, [r4, #84]	; 0x54
   b68be:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b68c0:	65a3      	str	r3, [r4, #88]	; 0x58
   b68c2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b68c4:	65e3      	str	r3, [r4, #92]	; 0x5c
   b68c6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b68c8:	6623      	str	r3, [r4, #96]	; 0x60
   b68ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b68cc:	6663      	str	r3, [r4, #100]	; 0x64
   b68ce:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b68d0:	66a3      	str	r3, [r4, #104]	; 0x68
   b68d2:	4620      	mov	r0, r4
   b68d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b68d8:	aaaaaaab 	.word	0xaaaaaaab

000b68dc <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b68dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b68de:	e9d1 3700 	ldrd	r3, r7, [r1]
   b68e2:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b68e4:	2300      	movs	r3, #0
   b68e6:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   b68ea:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b68ec:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b68ee:	480d      	ldr	r0, [pc, #52]	; (b6924 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x48>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b68f0:	10bb      	asrs	r3, r7, #2
	this->_M_impl._M_start = this->_M_allocate(__n);
   b68f2:	4358      	muls	r0, r3
      vector(const vector& __x)
   b68f4:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b68f6:	f7fd fc2f 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b68fa:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b68fe:	4407      	add	r7, r0
   b6900:	60a7      	str	r7, [r4, #8]
   b6902:	e9d6 6700 	ldrd	r6, r7, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6906:	4605      	mov	r5, r0
   b6908:	42b7      	cmp	r7, r6
   b690a:	d007      	beq.n	b691c <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x40>
   b690c:	b11d      	cbz	r5, b6916 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x3a>
   b690e:	4631      	mov	r1, r6
   b6910:	4628      	mov	r0, r5
   b6912:	f7ff ff73 	bl	b67fc <_ZN7RailwayC1ERKS_>
   b6916:	356c      	adds	r5, #108	; 0x6c
   b6918:	366c      	adds	r6, #108	; 0x6c
   b691a:	e7f5      	b.n	b6908 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b691c:	6065      	str	r5, [r4, #4]
      }
   b691e:	4620      	mov	r0, r4
   b6920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6922:	bf00      	nop
   b6924:	684bda13 	.word	0x684bda13

000b6928 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b6928:	b570      	push	{r4, r5, r6, lr}
   b692a:	4605      	mov	r5, r0
   b692c:	460e      	mov	r6, r1
   b692e:	4614      	mov	r4, r2
	      for (; __first != __last; ++__first, (void)++__cur)
   b6930:	42b5      	cmp	r5, r6
   b6932:	d00f      	beq.n	b6954 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x2c>
   b6934:	b15c      	cbz	r4, b694e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x26>
   b6936:	4629      	mov	r1, r5
   b6938:	4620      	mov	r0, r4
   b693a:	f7ff ffcf 	bl	b68dc <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b693e:	f105 010c 	add.w	r1, r5, #12
   b6942:	f104 000c 	add.w	r0, r4, #12
   b6946:	f7fd fc45 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b694a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b694c:	6263      	str	r3, [r4, #36]	; 0x24
   b694e:	3528      	adds	r5, #40	; 0x28
   b6950:	3428      	adds	r4, #40	; 0x28
   b6952:	e7ed      	b.n	b6930 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x8>
	}
   b6954:	4620      	mov	r0, r4
   b6956:	bd70      	pop	{r4, r5, r6, pc}

000b6958 <_ZN7RailwayaSERKS_.isra.0>:
   b6958:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b695c:	4604      	mov	r4, r0
   b695e:	460d      	mov	r5, r1
   b6960:	f7fd fc74 	bl	b424c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
   b6964:	f105 020c 	add.w	r2, r5, #12
   b6968:	f104 030c 	add.w	r3, r4, #12
      if (&__x != this)
   b696c:	429a      	cmp	r2, r3
   b696e:	d025      	beq.n	b69bc <_ZN7RailwayaSERKS_.isra.0+0x64>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6970:	e9d5 8103 	ldrd	r8, r1, [r5, #12]
			 - this->_M_impl._M_start); }
   b6974:	68e2      	ldr	r2, [r4, #12]
   b6976:	6963      	ldr	r3, [r4, #20]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6978:	eba1 0608 	sub.w	r6, r1, r8
			 - this->_M_impl._M_start); }
   b697c:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b697e:	429e      	cmp	r6, r3
   b6980:	d94a      	bls.n	b6a18 <_ZN7RailwayaSERKS_.isra.0+0xc0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6982:	2e00      	cmp	r6, #0
   b6984:	d046      	beq.n	b6a14 <_ZN7RailwayaSERKS_.isra.0+0xbc>
	if (__n > this->_M_max_size())
   b6986:	4b5d      	ldr	r3, [pc, #372]	; (b6afc <_ZN7RailwayaSERKS_.isra.0+0x1a4>)
   b6988:	429e      	cmp	r6, r3
   b698a:	d901      	bls.n	b6990 <_ZN7RailwayaSERKS_.isra.0+0x38>
	  std::__throw_bad_alloc();
   b698c:	f004 fe0c 	bl	bb5a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6990:	4630      	mov	r0, r6
   b6992:	9101      	str	r1, [sp, #4]
   b6994:	f7fd fb7f 	bl	b4096 <_Znwj>
   b6998:	9901      	ldr	r1, [sp, #4]
   b699a:	4607      	mov	r7, r0
   b699c:	463a      	mov	r2, r7
   b699e:	4640      	mov	r0, r8
   b69a0:	f7ff ff1e 	bl	b67e0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b69a4:	68e0      	ldr	r0, [r4, #12]
	if (__p)
   b69a6:	b118      	cbz	r0, b69b0 <_ZN7RailwayaSERKS_.isra.0+0x58>
			    - this->_M_impl._M_start);
   b69a8:	6961      	ldr	r1, [r4, #20]
	::operator delete(__p
   b69aa:	1a09      	subs	r1, r1, r0
   b69ac:	f7fd fb79 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b69b0:	60e7      	str	r7, [r4, #12]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b69b2:	4437      	add	r7, r6
   b69b4:	6167      	str	r7, [r4, #20]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b69b6:	68e3      	ldr	r3, [r4, #12]
   b69b8:	4433      	add	r3, r6
   b69ba:	6123      	str	r3, [r4, #16]
   b69bc:	f105 0118 	add.w	r1, r5, #24
   b69c0:	f104 0018 	add.w	r0, r4, #24
   b69c4:	f7fe fbe4 	bl	b5190 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
   b69c8:	f105 0324 	add.w	r3, r5, #36	; 0x24
   b69cc:	f104 0224 	add.w	r2, r4, #36	; 0x24
      if (&__x != this)
   b69d0:	4293      	cmp	r3, r2
   b69d2:	d045      	beq.n	b6a60 <_ZN7RailwayaSERKS_.isra.0+0x108>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b69d4:	e9d5 6a09 	ldrd	r6, sl, [r5, #36]	; 0x24
			 - this->_M_impl._M_start); }
   b69d8:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   b69dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b69de:	ebaa 0806 	sub.w	r8, sl, r6
			 - this->_M_impl._M_start); }
   b69e2:	eba3 0309 	sub.w	r3, r3, r9
	  if (__xlen > capacity())
   b69e6:	4543      	cmp	r3, r8
   b69e8:	d255      	bcs.n	b6a96 <_ZN7RailwayaSERKS_.isra.0+0x13e>
	  pointer __result = this->_M_allocate(__n);
   b69ea:	4845      	ldr	r0, [pc, #276]	; (b6b00 <_ZN7RailwayaSERKS_.isra.0+0x1a8>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b69ec:	ea4f 03a8 	mov.w	r3, r8, asr #2
	  pointer __result = this->_M_allocate(__n);
   b69f0:	4358      	muls	r0, r3
   b69f2:	f7fd fb77 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b69f6:	4607      	mov	r7, r0
	  _ForwardIterator __cur = __result;
   b69f8:	4681      	mov	r9, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b69fa:	45b2      	cmp	sl, r6
   b69fc:	d020      	beq.n	b6a40 <_ZN7RailwayaSERKS_.isra.0+0xe8>
   b69fe:	f1b9 0f00 	cmp.w	r9, #0
   b6a02:	d003      	beq.n	b6a0c <_ZN7RailwayaSERKS_.isra.0+0xb4>
   b6a04:	4631      	mov	r1, r6
   b6a06:	4648      	mov	r0, r9
   b6a08:	f7fe fb7e 	bl	b5108 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b6a0c:	f109 090c 	add.w	r9, r9, #12
   b6a10:	360c      	adds	r6, #12
   b6a12:	e7f2      	b.n	b69fa <_ZN7RailwayaSERKS_.isra.0+0xa2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6a14:	4637      	mov	r7, r6
   b6a16:	e7c1      	b.n	b699c <_ZN7RailwayaSERKS_.isra.0+0x44>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a18:	6923      	ldr	r3, [r4, #16]
   b6a1a:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b6a1c:	429e      	cmp	r6, r3
   b6a1e:	d803      	bhi.n	b6a28 <_ZN7RailwayaSERKS_.isra.0+0xd0>
   b6a20:	4640      	mov	r0, r8
   b6a22:	f7ff fedd 	bl	b67e0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
    { return std::uninitialized_copy(__first, __last, __result); }
   b6a26:	e7c6      	b.n	b69b6 <_ZN7RailwayaSERKS_.isra.0+0x5e>
   b6a28:	eb08 0103 	add.w	r1, r8, r3
   b6a2c:	4640      	mov	r0, r8
   b6a2e:	f7ff fed7 	bl	b67e0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b6a32:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
   b6a36:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
   b6a3a:	1a10      	subs	r0, r2, r0
   b6a3c:	4418      	add	r0, r3
   b6a3e:	e7f0      	b.n	b6a22 <_ZN7RailwayaSERKS_.isra.0+0xca>
	__destroy(__first, __last);
   b6a40:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b6a44:	f7fe faff 	bl	b5046 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	      _M_deallocate(this->_M_impl._M_start,
   b6a48:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b6a4a:	b118      	cbz	r0, b6a54 <_ZN7RailwayaSERKS_.isra.0+0xfc>
			    - this->_M_impl._M_start);
   b6a4c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b6a4e:	1a09      	subs	r1, r1, r0
   b6a50:	f7fd fb27 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b6a54:	6267      	str	r7, [r4, #36]	; 0x24
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b6a56:	4447      	add	r7, r8
   b6a58:	62e7      	str	r7, [r4, #44]	; 0x2c
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b6a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b6a5c:	4443      	add	r3, r8
   b6a5e:	62a3      	str	r3, [r4, #40]	; 0x28
	this->_M_assign(__str);
   b6a60:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b6a64:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b6a68:	f004 fdf4 	bl	bb654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b6a6c:	f105 0148 	add.w	r1, r5, #72	; 0x48
   b6a70:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b6a74:	f7fd fc3c 	bl	b42f0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
   b6a78:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b6a7a:	6563      	str	r3, [r4, #84]	; 0x54
   b6a7c:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b6a7e:	65a3      	str	r3, [r4, #88]	; 0x58
   b6a80:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b6a82:	65e3      	str	r3, [r4, #92]	; 0x5c
   b6a84:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b6a86:	6623      	str	r3, [r4, #96]	; 0x60
   b6a88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b6a8a:	6663      	str	r3, [r4, #100]	; 0x64
   b6a8c:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b6a8e:	66a3      	str	r3, [r4, #104]	; 0x68
   b6a90:	b002      	add	sp, #8
   b6a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a96:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   b6a98:	eba7 0709 	sub.w	r7, r7, r9
	  else if (size() >= __xlen)
   b6a9c:	45b8      	cmp	r8, r7
   b6a9e:	d80d      	bhi.n	b6abc <_ZN7RailwayaSERKS_.isra.0+0x164>
   b6aa0:	4630      	mov	r0, r6
   b6aa2:	464a      	mov	r2, r9
   b6aa4:	4651      	mov	r1, sl
   b6aa6:	f7fe fbab 	bl	b5200 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      : _M_current(__i) { }
   b6aaa:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b6aac:	4606      	mov	r6, r0
	  for (; __first != __last; ++__first)
   b6aae:	42b7      	cmp	r7, r6
   b6ab0:	d0d3      	beq.n	b6a5a <_ZN7RailwayaSERKS_.isra.0+0x102>
      }
   b6ab2:	4630      	mov	r0, r6
   b6ab4:	f7fd fe5e 	bl	b4774 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b6ab8:	360c      	adds	r6, #12
	return *this;
   b6aba:	e7f8      	b.n	b6aae <_ZN7RailwayaSERKS_.isra.0+0x156>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6abc:	4b10      	ldr	r3, [pc, #64]	; (b6b00 <_ZN7RailwayaSERKS_.isra.0+0x1a8>)
   b6abe:	10bf      	asrs	r7, r7, #2
   b6ac0:	435f      	muls	r7, r3
   b6ac2:	2f00      	cmp	r7, #0
   b6ac4:	dd08      	ble.n	b6ad8 <_ZN7RailwayaSERKS_.isra.0+0x180>
	      *__result = *__first;
   b6ac6:	4631      	mov	r1, r6
   b6ac8:	4648      	mov	r0, r9
   b6aca:	f7fe fb61 	bl	b5190 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b6ace:	360c      	adds	r6, #12
	      ++__result;
   b6ad0:	f109 090c 	add.w	r9, r9, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6ad4:	3f01      	subs	r7, #1
   b6ad6:	e7f4      	b.n	b6ac2 <_ZN7RailwayaSERKS_.isra.0+0x16a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6ad8:	e9d4 6709 	ldrd	r6, r7, [r4, #36]	; 0x24
   b6adc:	1bb9      	subs	r1, r7, r6
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6ade:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					  __x._M_impl._M_finish,
   b6ae0:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6ae4:	440e      	add	r6, r1
	      for (; __first != __last; ++__first, (void)++__cur)
   b6ae6:	45b1      	cmp	r9, r6
   b6ae8:	d0b7      	beq.n	b6a5a <_ZN7RailwayaSERKS_.isra.0+0x102>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6aea:	b11f      	cbz	r7, b6af4 <_ZN7RailwayaSERKS_.isra.0+0x19c>
   b6aec:	4631      	mov	r1, r6
   b6aee:	4638      	mov	r0, r7
   b6af0:	f7fe fb0a 	bl	b5108 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b6af4:	360c      	adds	r6, #12
   b6af6:	370c      	adds	r7, #12
   b6af8:	e7f5      	b.n	b6ae6 <_ZN7RailwayaSERKS_.isra.0+0x18e>
   b6afa:	bf00      	nop
   b6afc:	7ffffffc 	.word	0x7ffffffc
   b6b00:	aaaaaaab 	.word	0xaaaaaaab

000b6b04 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b6b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6b08:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6b0a:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6b0c:	480b      	ldr	r0, [pc, #44]	; (b6b3c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x38>)
   b6b0e:	10a4      	asrs	r4, r4, #2
   b6b10:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6b12:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6b14:	4627      	mov	r7, r4
   b6b16:	4690      	mov	r8, r2
   b6b18:	2f00      	cmp	r7, #0
   b6b1a:	dd08      	ble.n	b6b2e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x2a>
	      *__result = *__first;
   b6b1c:	4629      	mov	r1, r5
   b6b1e:	4640      	mov	r0, r8
   b6b20:	f7ff ff1a 	bl	b6958 <_ZN7RailwayaSERKS_.isra.0>
	      ++__first;
   b6b24:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b6b26:	f108 086c 	add.w	r8, r8, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6b2a:	3f01      	subs	r7, #1
   b6b2c:	e7f4      	b.n	b6b18 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x14>
	  return __result;
   b6b2e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b6b32:	206c      	movs	r0, #108	; 0x6c
   b6b34:	fb00 6004 	mla	r0, r0, r4, r6
   b6b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6b3c:	684bda13 	.word	0x684bda13

000b6b40 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>:
      if (&__x != this)
   b6b40:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b6b42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6b46:	4604      	mov	r4, r0
   b6b48:	460f      	mov	r7, r1
      if (&__x != this)
   b6b4a:	d02c      	beq.n	b6ba6 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x66>
   b6b4c:	e9d1 5a00 	ldrd	r5, sl, [r1]
			 - this->_M_impl._M_start); }
   b6b50:	f8d0 9000 	ldr.w	r9, [r0]
   b6b54:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6b56:	ebaa 0805 	sub.w	r8, sl, r5
			 - this->_M_impl._M_start); }
   b6b5a:	eba3 0309 	sub.w	r3, r3, r9
	  if (__xlen > capacity())
   b6b5e:	4543      	cmp	r3, r8
   b6b60:	d223      	bcs.n	b6baa <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x6a>
	  pointer __result = this->_M_allocate(__n);
   b6b62:	482a      	ldr	r0, [pc, #168]	; (b6c0c <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xcc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6b64:	ea4f 03a8 	mov.w	r3, r8, asr #2
	  pointer __result = this->_M_allocate(__n);
   b6b68:	4358      	muls	r0, r3
   b6b6a:	f7fd faf5 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
   b6b6e:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b6b70:	4607      	mov	r7, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b6b72:	45aa      	cmp	sl, r5
   b6b74:	d007      	beq.n	b6b86 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x46>
   b6b76:	b11f      	cbz	r7, b6b80 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x40>
   b6b78:	4629      	mov	r1, r5
   b6b7a:	4638      	mov	r0, r7
   b6b7c:	f7ff fe3e 	bl	b67fc <_ZN7RailwayC1ERKS_>
   b6b80:	376c      	adds	r7, #108	; 0x6c
   b6b82:	356c      	adds	r5, #108	; 0x6c
   b6b84:	e7f5      	b.n	b6b72 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x32>
	__destroy(__first, __last);
   b6b86:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6b8a:	f7fe fa87 	bl	b509c <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	      _M_deallocate(this->_M_impl._M_start,
   b6b8e:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6b90:	b118      	cbz	r0, b6b9a <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x5a>
			    - this->_M_impl._M_start);
   b6b92:	68a1      	ldr	r1, [r4, #8]
   b6b94:	1a09      	subs	r1, r1, r0
   b6b96:	f7fd fa84 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b6b9a:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b6b9c:	4446      	add	r6, r8
   b6b9e:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b6ba0:	6823      	ldr	r3, [r4, #0]
   b6ba2:	4443      	add	r3, r8
   b6ba4:	6063      	str	r3, [r4, #4]
    }
   b6ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6baa:	6846      	ldr	r6, [r0, #4]
   b6bac:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b6bb0:	45b0      	cmp	r8, r6
   b6bb2:	d80d      	bhi.n	b6bd0 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x90>
			      _Category>::__copy_m(__first, __last, __result);
   b6bb4:	4628      	mov	r0, r5
   b6bb6:	464a      	mov	r2, r9
   b6bb8:	4651      	mov	r1, sl
   b6bba:	f7ff ffa3 	bl	b6b04 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      : _M_current(__i) { }
   b6bbe:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b6bc0:	4605      	mov	r5, r0
	  for (; __first != __last; ++__first)
   b6bc2:	42ae      	cmp	r6, r5
   b6bc4:	d0ec      	beq.n	b6ba0 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x60>
      __pointer->~_Tp();
   b6bc6:	4628      	mov	r0, r5
   b6bc8:	f7fe fa48 	bl	b505c <_ZN7RailwayD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b6bcc:	356c      	adds	r5, #108	; 0x6c
	return *this;
   b6bce:	e7f8      	b.n	b6bc2 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x82>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6bd0:	4b0e      	ldr	r3, [pc, #56]	; (b6c0c <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xcc>)
   b6bd2:	10b6      	asrs	r6, r6, #2
   b6bd4:	435e      	muls	r6, r3
   b6bd6:	2e00      	cmp	r6, #0
   b6bd8:	dd08      	ble.n	b6bec <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xac>
	      *__result = *__first;
   b6bda:	4629      	mov	r1, r5
   b6bdc:	4648      	mov	r0, r9
   b6bde:	f7ff febb 	bl	b6958 <_ZN7RailwayaSERKS_.isra.0>
	      ++__first;
   b6be2:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b6be4:	f109 096c 	add.w	r9, r9, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6be8:	3e01      	subs	r6, #1
   b6bea:	e7f4      	b.n	b6bd6 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x96>
   b6bec:	e9d4 5600 	ldrd	r5, r6, [r4]
   b6bf0:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6bf2:	683d      	ldr	r5, [r7, #0]
					  __x._M_impl._M_finish,
   b6bf4:	687f      	ldr	r7, [r7, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6bf6:	440d      	add	r5, r1
   b6bf8:	42af      	cmp	r7, r5
   b6bfa:	d0d1      	beq.n	b6ba0 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x60>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6bfc:	b11e      	cbz	r6, b6c06 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xc6>
   b6bfe:	4629      	mov	r1, r5
   b6c00:	4630      	mov	r0, r6
   b6c02:	f7ff fdfb 	bl	b67fc <_ZN7RailwayC1ERKS_>
   b6c06:	356c      	adds	r5, #108	; 0x6c
   b6c08:	366c      	adds	r6, #108	; 0x6c
   b6c0a:	e7f5      	b.n	b6bf8 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xb8>
   b6c0c:	684bda13 	.word	0x684bda13

000b6c10 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b6c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6c14:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6c16:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6c18:	4810      	ldr	r0, [pc, #64]	; (b6c5c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x4c>)
   b6c1a:	10e4      	asrs	r4, r4, #3
   b6c1c:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6c1e:	4617      	mov	r7, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6c20:	46a0      	mov	r8, r4
   b6c22:	4616      	mov	r6, r2
   b6c24:	f1b8 0f00 	cmp.w	r8, #0
   b6c28:	dd10      	ble.n	b6c4c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x3c>
   b6c2a:	4629      	mov	r1, r5
   b6c2c:	4630      	mov	r0, r6
   b6c2e:	f7ff ff87 	bl	b6b40 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
   b6c32:	f105 010c 	add.w	r1, r5, #12
   b6c36:	f106 000c 	add.w	r0, r6, #12
   b6c3a:	f004 fd0b 	bl	bb654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b6c3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b6c40:	6273      	str	r3, [r6, #36]	; 0x24
	      ++__first;
   b6c42:	3528      	adds	r5, #40	; 0x28
	      ++__result;
   b6c44:	3628      	adds	r6, #40	; 0x28
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6c46:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6c4a:	e7eb      	b.n	b6c24 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x14>
	  return __result;
   b6c4c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b6c50:	2028      	movs	r0, #40	; 0x28
   b6c52:	fb00 7004 	mla	r0, r0, r4, r7
   b6c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6c5a:	bf00      	nop
   b6c5c:	cccccccd 	.word	0xcccccccd

000b6c60 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>:
      vector<_Tp, _Alloc>::
   b6c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      return __last - __first;
   b6c64:	eba2 0801 	sub.w	r8, r2, r1
			 - this->_M_impl._M_start); }
   b6c68:	6883      	ldr	r3, [r0, #8]
   b6c6a:	4617      	mov	r7, r2
   b6c6c:	6802      	ldr	r2, [r0, #0]
   b6c6e:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b6c70:	4598      	cmp	r8, r3
      vector<_Tp, _Alloc>::
   b6c72:	4604      	mov	r4, r0
   b6c74:	460e      	mov	r6, r1
	if (__len > capacity())
   b6c76:	d92a      	bls.n	b6cce <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6e>
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b6c78:	4b26      	ldr	r3, [pc, #152]	; (b6d14 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xb4>)
   b6c7a:	4598      	cmp	r8, r3
   b6c7c:	d902      	bls.n	b6c84 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x24>
	  __throw_length_error(
   b6c7e:	4826      	ldr	r0, [pc, #152]	; (b6d18 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xb8>)
   b6c80:	f004 fc98 	bl	bb5b4 <_ZSt20__throw_length_errorPKc>
	  pointer __result = this->_M_allocate(__n);
   b6c84:	4825      	ldr	r0, [pc, #148]	; (b6d1c <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xbc>)
   b6c86:	ea4f 03a8 	mov.w	r3, r8, asr #2
   b6c8a:	4358      	muls	r0, r3
   b6c8c:	f7fd fa64 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
   b6c90:	4605      	mov	r5, r0
	  _ForwardIterator __cur = __result;
   b6c92:	4681      	mov	r9, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b6c94:	42b7      	cmp	r7, r6
   b6c96:	d00a      	beq.n	b6cae <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x4e>
   b6c98:	f1b9 0f00 	cmp.w	r9, #0
   b6c9c:	d003      	beq.n	b6ca6 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x46>
   b6c9e:	4631      	mov	r1, r6
   b6ca0:	4648      	mov	r0, r9
   b6ca2:	f7ff fdab 	bl	b67fc <_ZN7RailwayC1ERKS_>
   b6ca6:	366c      	adds	r6, #108	; 0x6c
   b6ca8:	f109 096c 	add.w	r9, r9, #108	; 0x6c
   b6cac:	e7f2      	b.n	b6c94 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x34>
	__destroy(__first, __last);
   b6cae:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6cb2:	f7fe f9f3 	bl	b509c <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	    _M_deallocate(this->_M_impl._M_start,
   b6cb6:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6cb8:	b118      	cbz	r0, b6cc2 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x62>
			  - this->_M_impl._M_start);
   b6cba:	68a1      	ldr	r1, [r4, #8]
   b6cbc:	1a09      	subs	r1, r1, r0
   b6cbe:	f7fd f9f0 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
   b6cc2:	6025      	str	r5, [r4, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b6cc4:	4445      	add	r5, r8
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b6cc6:	e9c4 5501 	strd	r5, r5, [r4, #4]
	      std::__uninitialized_copy_a(__mid, __last,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
	  }
      }
   b6cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6cce:	6845      	ldr	r5, [r0, #4]
   b6cd0:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b6cd2:	45a8      	cmp	r8, r5
   b6cd4:	d80b      	bhi.n	b6cee <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x8e>
			      _Category>::__copy_m(__first, __last, __result);
   b6cd6:	4639      	mov	r1, r7
   b6cd8:	4630      	mov	r0, r6
   b6cda:	f7ff ff13 	bl	b6b04 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b6cde:	6861      	ldr	r1, [r4, #4]
   b6ce0:	4288      	cmp	r0, r1
   b6ce2:	4605      	mov	r5, r0
   b6ce4:	d0f1      	beq.n	b6cca <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6a>
   b6ce6:	f7fe f9d9 	bl	b509c <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	    this->_M_impl._M_finish = __pos;
   b6cea:	6065      	str	r5, [r4, #4]
   b6cec:	e7ed      	b.n	b6cca <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6a>
	__i += __n;
   b6cee:	440d      	add	r5, r1
   b6cf0:	4630      	mov	r0, r6
   b6cf2:	4629      	mov	r1, r5
   b6cf4:	f7ff ff06 	bl	b6b04 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6cf8:	6866      	ldr	r6, [r4, #4]
   b6cfa:	42af      	cmp	r7, r5
   b6cfc:	d007      	beq.n	b6d0e <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xae>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6cfe:	b11e      	cbz	r6, b6d08 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xa8>
   b6d00:	4629      	mov	r1, r5
   b6d02:	4630      	mov	r0, r6
   b6d04:	f7ff fd7a 	bl	b67fc <_ZN7RailwayC1ERKS_>
   b6d08:	356c      	adds	r5, #108	; 0x6c
   b6d0a:	366c      	adds	r6, #108	; 0x6c
   b6d0c:	e7f5      	b.n	b6cfa <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x9a>
	    this->_M_impl._M_finish =
   b6d0e:	6066      	str	r6, [r4, #4]
      }
   b6d10:	e7db      	b.n	b6cca <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6a>
   b6d12:	bf00      	nop
   b6d14:	7fffffa4 	.word	0x7fffffa4
   b6d18:	000be7b7 	.word	0x000be7b7
   b6d1c:	684bda13 	.word	0x684bda13

000b6d20 <setup>:
void setup(){
   b6d20:	b570      	push	{r4, r5, r6, lr}
   b6d22:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
  Serial.begin(9600);
   b6d26:	f004 fa8b 	bl	bb240 <_Z16_fetch_usbserialv>
   b6d2a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6d2e:	f004 fa7b 	bl	bb228 <_ZN9USBSerial5beginEl>
  delay(500);
   b6d32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6d36:	f002 f909 	bl	b8f4c <delay>
  BLE.on();
   b6d3a:	f002 fc73 	bl	b9624 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6d3e:	f002 fcbb 	bl	b96b8 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   b6d42:	f002 fc6f 	bl	b9624 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6d46:	4a99      	ldr	r2, [pc, #612]	; (b6fac <setup+0x28c>)
   b6d48:	4d99      	ldr	r5, [pc, #612]	; (b6fb0 <setup+0x290>)
   b6d4a:	4601      	mov	r1, r0
   b6d4c:	a817      	add	r0, sp, #92	; 0x5c
   b6d4e:	f003 f99d 	bl	ba08c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6d52:	a817      	add	r0, sp, #92	; 0x5c
   b6d54:	f002 fd57 	bl	b9806 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b6d58:	f002 fc64 	bl	b9624 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6d5c:	4a95      	ldr	r2, [pc, #596]	; (b6fb4 <setup+0x294>)
   b6d5e:	4601      	mov	r1, r0
   b6d60:	a817      	add	r0, sp, #92	; 0x5c
   b6d62:	f003 f993 	bl	ba08c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6d66:	a817      	add	r0, sp, #92	; 0x5c
   b6d68:	f002 fd4d 	bl	b9806 <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   b6d6c:	a802      	add	r0, sp, #8
   b6d6e:	f002 fe80 	bl	b9a72 <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b6d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d74:	ac11      	add	r4, sp, #68	; 0x44
   b6d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d78:	682e      	ldr	r6, [r5, #0]
   b6d7a:	6026      	str	r6, [r4, #0]
        BleUuid tempUUID(uuid);
   b6d7c:	ad11      	add	r5, sp, #68	; 0x44
   b6d7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d80:	ac17      	add	r4, sp, #92	; 0x5c
   b6d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6d84:	a817      	add	r0, sp, #92	; 0x5c
        BleUuid tempUUID(uuid);
   b6d86:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6d88:	f002 fa4e 	bl	b9228 <_ZNK8particle7BleUuid4typeEv>
   b6d8c:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b6d8e:	a817      	add	r0, sp, #92	; 0x5c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6d90:	2c00      	cmp	r4, #0
   b6d92:	f040 80e6 	bne.w	b6f62 <setup+0x242>
            uint16_t uuid16 = tempUUID.shorted();
   b6d96:	f002 fa63 	bl	b9260 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b6d9a:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b6d9c:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b6da0:	2302      	movs	r3, #2
   b6da2:	aa0b      	add	r2, sp, #44	; 0x2c
   b6da4:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b6da6:	a802      	add	r0, sp, #8
   b6da8:	f002 fe58 	bl	b9a5c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   b6dac:	f002 fc3a 	bl	b9624 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6db0:	2200      	movs	r2, #0
   b6db2:	a902      	add	r1, sp, #8
   b6db4:	f002 fcca 	bl	b974c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  acquireWireBuffer();
   b6db8:	a817      	add	r0, sp, #92	; 0x5c
   b6dba:	f7fd fcb1 	bl	b4720 <_Z17acquireWireBufferv>
  request.hostname = "trek.thewcl.com";
   b6dbe:	4c7e      	ldr	r4, [pc, #504]	; (b6fb8 <setup+0x298>)

    //loopIndex must point to either the first or last checkpoint, tripleIndex cannot be 0
    void setLoopIndex(int triple, int loop){
        tripleIndex = triple;
   b6dc0:	4e7e      	ldr	r6, [pc, #504]	; (b6fbc <setup+0x29c>)
  Wire.begin();
   b6dc2:	f004 fb8b 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b6dc6:	f003 faed 	bl	ba3a4 <_ZN7TwoWire5beginEv>
  vl.begin();
   b6dca:	2100      	movs	r1, #0
   b6dcc:	487c      	ldr	r0, [pc, #496]	; (b6fc0 <setup+0x2a0>)
   b6dce:	f001 fdb8 	bl	b8942 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>
  request.hostname = "trek.thewcl.com";
   b6dd2:	497c      	ldr	r1, [pc, #496]	; (b6fc4 <setup+0x2a4>)
   b6dd4:	4620      	mov	r0, r4
   b6dd6:	f003 fd9a 	bl	ba90e <_ZN6StringaSEPKc>
  request.port = 80;
   b6dda:	2350      	movs	r3, #80	; 0x50
   b6ddc:	497a      	ldr	r1, [pc, #488]	; (b6fc8 <setup+0x2a8>)
   b6dde:	63a3      	str	r3, [r4, #56]	; 0x38
   b6de0:	4c7a      	ldr	r4, [pc, #488]	; (b6fcc <setup+0x2ac>)
        loopIndex = loop;
   b6de2:	2502      	movs	r5, #2
   b6de4:	2006      	movs	r0, #6
   b6de6:	e9c1 5015 	strd	r5, r0, [r1, #84]	; 0x54
   b6dea:	e9c4 5015 	strd	r5, r0, [r4, #84]	; 0x54
        tripleIndex = triple;
   b6dee:	4d78      	ldr	r5, [pc, #480]	; (b6fd0 <setup+0x2b0>)
        loopIndex = loop;
   b6df0:	2203      	movs	r2, #3
   b6df2:	2307      	movs	r3, #7
  ctaRailways = {brownLineCTA, orangeLineCTA, pinkLineCTA, purpleLineCTA, greenLineCTA};
   b6df4:	a817      	add	r0, sp, #92	; 0x5c
   b6df6:	e9c5 2315 	strd	r2, r3, [r5, #84]	; 0x54
   b6dfa:	e9c6 2315 	strd	r2, r3, [r6, #84]	; 0x54
   b6dfe:	f7ff fcfd 	bl	b67fc <_ZN7RailwayC1ERKS_>
   b6e02:	4631      	mov	r1, r6
   b6e04:	a832      	add	r0, sp, #200	; 0xc8
   b6e06:	f7ff fcf9 	bl	b67fc <_ZN7RailwayC1ERKS_>
   b6e0a:	4629      	mov	r1, r5
   b6e0c:	a84d      	add	r0, sp, #308	; 0x134
   b6e0e:	f7ff fcf5 	bl	b67fc <_ZN7RailwayC1ERKS_>
   b6e12:	4621      	mov	r1, r4
   b6e14:	a868      	add	r0, sp, #416	; 0x1a0
   b6e16:	f7ff fcf1 	bl	b67fc <_ZN7RailwayC1ERKS_>
   b6e1a:	496e      	ldr	r1, [pc, #440]	; (b6fd4 <setup+0x2b4>)
   b6e1c:	a883      	add	r0, sp, #524	; 0x20c
   b6e1e:	f7ff fced 	bl	b67fc <_ZN7RailwayC1ERKS_>
	this->_M_assign_aux(__l.begin(), __l.end(),
   b6e22:	486d      	ldr	r0, [pc, #436]	; (b6fd8 <setup+0x2b8>)
   b6e24:	aa9e      	add	r2, sp, #632	; 0x278
   b6e26:	a917      	add	r1, sp, #92	; 0x5c
   b6e28:	f7ff ff1a 	bl	b6c60 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>
   b6e2c:	2404      	movs	r4, #4
   b6e2e:	256c      	movs	r5, #108	; 0x6c
   b6e30:	ab17      	add	r3, sp, #92	; 0x5c
   b6e32:	fb05 3004 	mla	r0, r5, r4, r3
   b6e36:	f7fe f911 	bl	b505c <_ZN7RailwayD1Ev>
   b6e3a:	3c01      	subs	r4, #1
   b6e3c:	d2f8      	bcs.n	b6e30 <setup+0x110>
  mbtaRailways = {redLineMBTA, greenLine1MBTA, greenLine2MBTA, blueLineMBTA, orangeLineMBTA};
   b6e3e:	4967      	ldr	r1, [pc, #412]	; (b6fdc <setup+0x2bc>)
   b6e40:	a817      	add	r0, sp, #92	; 0x5c
   b6e42:	f7ff fcdb 	bl	b67fc <_ZN7RailwayC1ERKS_>
   b6e46:	4966      	ldr	r1, [pc, #408]	; (b6fe0 <setup+0x2c0>)
   b6e48:	a832      	add	r0, sp, #200	; 0xc8
   b6e4a:	f7ff fcd7 	bl	b67fc <_ZN7RailwayC1ERKS_>
   b6e4e:	4965      	ldr	r1, [pc, #404]	; (b6fe4 <setup+0x2c4>)
   b6e50:	a84d      	add	r0, sp, #308	; 0x134
   b6e52:	f7ff fcd3 	bl	b67fc <_ZN7RailwayC1ERKS_>
   b6e56:	4964      	ldr	r1, [pc, #400]	; (b6fe8 <setup+0x2c8>)
   b6e58:	a868      	add	r0, sp, #416	; 0x1a0
   b6e5a:	f7ff fccf 	bl	b67fc <_ZN7RailwayC1ERKS_>
   b6e5e:	4963      	ldr	r1, [pc, #396]	; (b6fec <setup+0x2cc>)
   b6e60:	a883      	add	r0, sp, #524	; 0x20c
   b6e62:	f7ff fccb 	bl	b67fc <_ZN7RailwayC1ERKS_>
   b6e66:	4862      	ldr	r0, [pc, #392]	; (b6ff0 <setup+0x2d0>)
   b6e68:	aa9e      	add	r2, sp, #632	; 0x278
   b6e6a:	a917      	add	r1, sp, #92	; 0x5c
   b6e6c:	f7ff fef8 	bl	b6c60 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>
   b6e70:	2404      	movs	r4, #4
   b6e72:	256c      	movs	r5, #108	; 0x6c
   b6e74:	ab17      	add	r3, sp, #92	; 0x5c
   b6e76:	fb05 3004 	mla	r0, r5, r4, r3
   b6e7a:	f7fe f8ef 	bl	b505c <_ZN7RailwayD1Ev>
   b6e7e:	3c01      	subs	r4, #1
   b6e80:	d2f8      	bcs.n	b6e74 <setup+0x154>
  cities = {City(ctaRailways, "cta", 5), City(mbtaRailways, "mbta", 5)};
   b6e82:	4955      	ldr	r1, [pc, #340]	; (b6fd8 <setup+0x2b8>)
   b6e84:	a805      	add	r0, sp, #20
   b6e86:	f7ff fd29 	bl	b68dc <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b6e8a:	495a      	ldr	r1, [pc, #360]	; (b6ff4 <setup+0x2d4>)
   b6e8c:	a80b      	add	r0, sp, #44	; 0x2c
   b6e8e:	f7fd f93b 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6e92:	2400      	movs	r4, #0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b6e94:	ab1c      	add	r3, sp, #112	; 0x70
        std::vector<Railway> railways;
        std::string name;
        int slaveCountExpected;

        City(std::vector<Railway> railwaysInput, std::string nameInput, int slaveCountExpectedInput){
            railways = railwaysInput;
   b6e96:	a905      	add	r1, sp, #20
   b6e98:	a817      	add	r0, sp, #92	; 0x5c
      { _M_string_length = __length; }
   b6e9a:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
   b6e9e:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
   b6ea2:	9419      	str	r4, [sp, #100]	; 0x64
   b6ea4:	f88d 4070 	strb.w	r4, [sp, #112]	; 0x70
   b6ea8:	f7ff fe4a 	bl	b6b40 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
	this->_M_assign(__str);
   b6eac:	a90b      	add	r1, sp, #44	; 0x2c
   b6eae:	a81a      	add	r0, sp, #104	; 0x68
   b6eb0:	f004 fbd0 	bl	bb654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
            name = nameInput;
            slaveCountExpected = slaveCountExpectedInput;
   b6eb4:	2505      	movs	r5, #5
   b6eb6:	494e      	ldr	r1, [pc, #312]	; (b6ff0 <setup+0x2d0>)
   b6eb8:	9520      	str	r5, [sp, #128]	; 0x80
   b6eba:	a808      	add	r0, sp, #32
   b6ebc:	f7ff fd0e 	bl	b68dc <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b6ec0:	494d      	ldr	r1, [pc, #308]	; (b6ff8 <setup+0x2d8>)
   b6ec2:	a811      	add	r0, sp, #68	; 0x44
   b6ec4:	f7fd f920 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b6ec8:	ab26      	add	r3, sp, #152	; 0x98
      { _M_string_length = __length; }
   b6eca:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
   b6ece:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   b6ed2:	9423      	str	r4, [sp, #140]	; 0x8c
   b6ed4:	f88d 4098 	strb.w	r4, [sp, #152]	; 0x98
            railways = railwaysInput;
   b6ed8:	a908      	add	r1, sp, #32
			 - this->_M_impl._M_start); }
   b6eda:	4c48      	ldr	r4, [pc, #288]	; (b6ffc <setup+0x2dc>)
   b6edc:	a821      	add	r0, sp, #132	; 0x84
   b6ede:	f7ff fe2f 	bl	b6b40 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
	this->_M_assign(__str);
   b6ee2:	a911      	add	r1, sp, #68	; 0x44
   b6ee4:	a824      	add	r0, sp, #144	; 0x90
   b6ee6:	f004 fbb5 	bl	bb654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b6eea:	6822      	ldr	r2, [r4, #0]
   b6eec:	68a3      	ldr	r3, [r4, #8]
            slaveCountExpected = slaveCountExpectedInput;
   b6eee:	952a      	str	r5, [sp, #168]	; 0xa8
   b6ef0:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b6ef2:	2b4f      	cmp	r3, #79	; 0x4f
   b6ef4:	d83d      	bhi.n	b6f72 <setup+0x252>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6ef6:	2050      	movs	r0, #80	; 0x50
   b6ef8:	f7fd f8cd 	bl	b4096 <_Znwj>
	__uninit_copy(__first, __last, __result);
   b6efc:	a92b      	add	r1, sp, #172	; 0xac
   b6efe:	4602      	mov	r2, r0
   b6f00:	4605      	mov	r5, r0
   b6f02:	a817      	add	r0, sp, #92	; 0x5c
   b6f04:	f7ff fd10 	bl	b6928 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>
	__destroy(__first, __last);
   b6f08:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6f0c:	f7fe f8df 	bl	b50ce <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	    _M_deallocate(this->_M_impl._M_start,
   b6f10:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6f12:	b118      	cbz	r0, b6f1c <setup+0x1fc>
			  - this->_M_impl._M_start);
   b6f14:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b6f16:	1a09      	subs	r1, r1, r0
   b6f18:	f7fd f8c3 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
   b6f1c:	4b37      	ldr	r3, [pc, #220]	; (b6ffc <setup+0x2dc>)
   b6f1e:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b6f20:	3550      	adds	r5, #80	; 0x50
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b6f22:	e9c3 5501 	strd	r5, r5, [r3, #4]
      { _M_dispose(); }
   b6f26:	a824      	add	r0, sp, #144	; 0x90
   b6f28:	f004 fb76 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
class City{
   b6f2c:	a821      	add	r0, sp, #132	; 0x84
   b6f2e:	f7fe f8c0 	bl	b50b2 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b6f32:	a81a      	add	r0, sp, #104	; 0x68
   b6f34:	f004 fb70 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6f38:	a817      	add	r0, sp, #92	; 0x5c
   b6f3a:	f7fe f8ba 	bl	b50b2 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b6f3e:	a811      	add	r0, sp, #68	; 0x44
   b6f40:	f004 fb6a 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6f44:	a808      	add	r0, sp, #32
   b6f46:	f7fe f8b4 	bl	b50b2 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b6f4a:	a80b      	add	r0, sp, #44	; 0x2c
   b6f4c:	f004 fb64 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6f50:	a805      	add	r0, sp, #20
   b6f52:	f7fe f8ae 	bl	b50b2 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b6f56:	9802      	ldr	r0, [sp, #8]
   b6f58:	f001 ffb0 	bl	b8ebc <free>
}
   b6f5c:	f50d 7d1e 	add.w	sp, sp, #632	; 0x278
   b6f60:	bd70      	pop	{r4, r5, r6, pc}
   b6f62:	f002 f97f 	bl	b9264 <_ZNK8particle7BleUuid8rawBytesEv>
   b6f66:	2300      	movs	r3, #0
   b6f68:	9300      	str	r3, [sp, #0]
   b6f6a:	4602      	mov	r2, r0
   b6f6c:	2310      	movs	r3, #16
   b6f6e:	2107      	movs	r1, #7
   b6f70:	e719      	b.n	b6da6 <setup+0x86>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6f72:	6865      	ldr	r5, [r4, #4]
   b6f74:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b6f76:	2d4f      	cmp	r5, #79	; 0x4f
   b6f78:	d90b      	bls.n	b6f92 <setup+0x272>
   b6f7a:	a92b      	add	r1, sp, #172	; 0xac
   b6f7c:	a817      	add	r0, sp, #92	; 0x5c
   b6f7e:	f7ff fe47 	bl	b6c10 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b6f82:	6861      	ldr	r1, [r4, #4]
   b6f84:	4288      	cmp	r0, r1
   b6f86:	4605      	mov	r5, r0
   b6f88:	d0cd      	beq.n	b6f26 <setup+0x206>
   b6f8a:	f7fe f8a0 	bl	b50ce <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	    this->_M_impl._M_finish = __pos;
   b6f8e:	6065      	str	r5, [r4, #4]
   b6f90:	e7c9      	b.n	b6f26 <setup+0x206>
   b6f92:	ab17      	add	r3, sp, #92	; 0x5c
   b6f94:	441d      	add	r5, r3
   b6f96:	4629      	mov	r1, r5
   b6f98:	4618      	mov	r0, r3
   b6f9a:	f7ff fe39 	bl	b6c10 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>
   b6f9e:	6862      	ldr	r2, [r4, #4]
   b6fa0:	a92b      	add	r1, sp, #172	; 0xac
   b6fa2:	4628      	mov	r0, r5
   b6fa4:	f7ff fcc0 	bl	b6928 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>
	    this->_M_impl._M_finish =
   b6fa8:	6060      	str	r0, [r4, #4]
   b6faa:	e7bc      	b.n	b6f26 <setup+0x206>
   b6fac:	2003e6a4 	.word	0x2003e6a4
   b6fb0:	200352b4 	.word	0x200352b4
   b6fb4:	2003e68c 	.word	0x2003e68c
   b6fb8:	2003e62c 	.word	0x2003e62c
   b6fbc:	20037dd8 	.word	0x20037dd8
   b6fc0:	2003e6b0 	.word	0x2003e6b0
   b6fc4:	000be9c9 	.word	0x000be9c9
   b6fc8:	200353d8 	.word	0x200353d8
   b6fcc:	2003e4e8 	.word	0x2003e4e8
   b6fd0:	2003e47c 	.word	0x2003e47c
   b6fd4:	2003553c 	.word	0x2003553c
   b6fd8:	20035458 	.word	0x20035458
   b6fdc:	2003e5c0 	.word	0x2003e5c0
   b6fe0:	20035464 	.word	0x20035464
   b6fe4:	200354d0 	.word	0x200354d0
   b6fe8:	2003536c 	.word	0x2003536c
   b6fec:	20037e44 	.word	0x20037e44
   b6ff0:	20037dcc 	.word	0x20037dcc
   b6ff4:	000be9d9 	.word	0x000be9d9
   b6ff8:	000be9dd 	.word	0x000be9dd
   b6ffc:	20035448 	.word	0x20035448

000b7000 <_GLOBAL__sub_I_SystemMode>:
   b7000:	2001      	movs	r0, #1
   b7002:	f7fe ba0b 	b.w	b541c <_Z41__static_initialization_and_destruction_0ii.constprop.0>
	...

000b7008 <loop>:
void loop(){
   b7008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b700c:	ed2d 8b06 	vpush	{d8-d10}
        WLanCredentials creds = credentials.getHalCredentials();
        network_set_credentials(*this, 0, &creds, NULL);
    }

    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
   b7010:	4b76      	ldr	r3, [pc, #472]	; (b71ec <loop+0x1e4>)
   b7012:	2200      	movs	r2, #0
   b7014:	b0b7      	sub	sp, #220	; 0xdc
   b7016:	6858      	ldr	r0, [r3, #4]
   b7018:	4611      	mov	r1, r2
   b701a:	f001 ff17 	bl	b8e4c <network_has_credentials>
  if(WiFi.hasCredentials() && userInput){
   b701e:	2800      	cmp	r0, #0
   b7020:	f000 855f 	beq.w	b7ae2 <loop+0xada>
   b7024:	4b72      	ldr	r3, [pc, #456]	; (b71f0 <loop+0x1e8>)
   b7026:	781b      	ldrb	r3, [r3, #0]
   b7028:	2b00      	cmp	r3, #0
   b702a:	f000 855a 	beq.w	b7ae2 <loop+0xada>
    Serial.println("loop start");
   b702e:	f004 f907 	bl	bb240 <_Z16_fetch_usbserialv>
   b7032:	4970      	ldr	r1, [pc, #448]	; (b71f4 <loop+0x1ec>)
      Serial.printf("%i, ", i);
   b7034:	4d70      	ldr	r5, [pc, #448]	; (b71f8 <loop+0x1f0>)
    Serial.println("loop start");
   b7036:	f003 fb78 	bl	ba72a <_ZN5Print7printlnEPKc>
      : _M_current(__i) { }
   b703a:	4b70      	ldr	r3, [pc, #448]	; (b71fc <loop+0x1f4>)
   b703c:	e9d3 4600 	ldrd	r4, r6, [r3]
    for(int i : sequenceArr){
   b7040:	42b4      	cmp	r4, r6
   b7042:	d009      	beq.n	b7058 <loop+0x50>
   b7044:	f854 2b04 	ldr.w	r2, [r4], #4
   b7048:	9202      	str	r2, [sp, #8]
      Serial.printf("%i, ", i);
   b704a:	f004 f8f9 	bl	bb240 <_Z16_fetch_usbserialv>
   b704e:	9a02      	ldr	r2, [sp, #8]
   b7050:	4629      	mov	r1, r5
   b7052:	f7fd f9cd 	bl	b43f0 <_ZN5Print6printfEPKcz>
	return *this;
   b7056:	e7f3      	b.n	b7040 <loop+0x38>
    Serial.println();
   b7058:	f004 f8f2 	bl	bb240 <_Z16_fetch_usbserialv>
   b705c:	f003 fb59 	bl	ba712 <_ZN5Print7printlnEv>
    cityIndexBuffer = cityIndex;
   b7060:	4b67      	ldr	r3, [pc, #412]	; (b7200 <loop+0x1f8>)
   b7062:	f8df a1dc 	ldr.w	sl, [pc, #476]	; b7240 <loop+0x238>
   b7066:	681b      	ldr	r3, [r3, #0]
   b7068:	f8ca 3000 	str.w	r3, [sl]
	return *(this->_M_impl._M_start + __n);
   b706c:	f8df 81d4 	ldr.w	r8, [pc, #468]	; b7244 <loop+0x23c>
    for(int j = 0; j < cities[cityIndexBuffer].railways.size(); j++){
   b7070:	2300      	movs	r3, #0
   b7072:	9302      	str	r3, [sp, #8]
   b7074:	f8da 2000 	ldr.w	r2, [sl]
   b7078:	f8d8 1000 	ldr.w	r1, [r8]
   b707c:	2328      	movs	r3, #40	; 0x28
   b707e:	435a      	muls	r2, r3
   b7080:	188b      	adds	r3, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7082:	588a      	ldr	r2, [r1, r2]
   b7084:	685b      	ldr	r3, [r3, #4]
   b7086:	1a9b      	subs	r3, r3, r2
   b7088:	4a5e      	ldr	r2, [pc, #376]	; (b7204 <loop+0x1fc>)
   b708a:	109b      	asrs	r3, r3, #2
   b708c:	4353      	muls	r3, r2
   b708e:	9a02      	ldr	r2, [sp, #8]
   b7090:	4293      	cmp	r3, r2
   b7092:	f240 84ac 	bls.w	b79ee <loop+0x9e6>
      uint8_t range = vl.readRange();
   b7096:	485c      	ldr	r0, [pc, #368]	; (b7208 <loop+0x200>)
   b7098:	f001 fc72 	bl	b8980 <_ZN16Adafruit_VL6180X9readRangeEv>
      if (range <= 100) {
   b709c:	2864      	cmp	r0, #100	; 0x64
   b709e:	d83b      	bhi.n	b7118 <loop+0x110>
        Serial.println("light show");
   b70a0:	f004 f8ce 	bl	bb240 <_Z16_fetch_usbserialv>
   b70a4:	4959      	ldr	r1, [pc, #356]	; (b720c <loop+0x204>)
   b70a6:	4c5a      	ldr	r4, [pc, #360]	; (b7210 <loop+0x208>)
   b70a8:	f003 fb3f 	bl	ba72a <_ZN5Print7printlnEPKc>
        for(int i = 0; i < addressArr.size(); i++){
   b70ac:	2500      	movs	r5, #0
   b70ae:	e9d4 2300 	ldrd	r2, r3, [r4]
   b70b2:	1a9b      	subs	r3, r3, r2
   b70b4:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
   b70b8:	d211      	bcs.n	b70de <loop+0xd6>
          Wire.beginTransmission(addressArr[i]);
   b70ba:	f004 fa0f 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b70be:	6823      	ldr	r3, [r4, #0]
   b70c0:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   b70c4:	f003 f9a4 	bl	ba410 <_ZN7TwoWire17beginTransmissionEi>
          Wire.write('3');
   b70c8:	f004 fa08 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b70cc:	2133      	movs	r1, #51	; 0x33
   b70ce:	f7fd f8a7 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
          Wire.endTransmission();
   b70d2:	f004 fa03 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b70d6:	f003 f9a2 	bl	ba41e <_ZN7TwoWire15endTransmissionEv>
        for(int i = 0; i < addressArr.size(); i++){
   b70da:	3501      	adds	r5, #1
   b70dc:	e7e7      	b.n	b70ae <loop+0xa6>
        delay(3000);
   b70de:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b70e2:	f001 ff33 	bl	b8f4c <delay>
        for(int i = 0; i < addressArr.size(); i++){
   b70e6:	2500      	movs	r5, #0
   b70e8:	e9d4 2300 	ldrd	r2, r3, [r4]
   b70ec:	1a9b      	subs	r3, r3, r2
   b70ee:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
   b70f2:	d211      	bcs.n	b7118 <loop+0x110>
          Wire.beginTransmission(addressArr[i]);
   b70f4:	f004 f9f2 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b70f8:	6823      	ldr	r3, [r4, #0]
   b70fa:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   b70fe:	f003 f987 	bl	ba410 <_ZN7TwoWire17beginTransmissionEi>
          Wire.write('4');
   b7102:	f004 f9eb 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b7106:	2134      	movs	r1, #52	; 0x34
   b7108:	f7fd f88a 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
          Wire.endTransmission();
   b710c:	f004 f9e6 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b7110:	f003 f985 	bl	ba41e <_ZN7TwoWire15endTransmissionEv>
        for(int i = 0; i < addressArr.size(); i++){
   b7114:	3501      	adds	r5, #1
   b7116:	e7e7      	b.n	b70e8 <loop+0xe0>
      delay(1000);
   b7118:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b711c:	f001 ff16 	bl	b8f4c <delay>
      if(cityIndex == -1){
   b7120:	4b37      	ldr	r3, [pc, #220]	; (b7200 <loop+0x1f8>)
   b7122:	681b      	ldr	r3, [r3, #0]
   b7124:	3301      	adds	r3, #1
   b7126:	f000 84dc 	beq.w	b7ae2 <loop+0xada>
	StringSumHelper(const char *p) : String(p) {}
   b712a:	493a      	ldr	r1, [pc, #232]	; (b7214 <loop+0x20c>)
   b712c:	a817      	add	r0, sp, #92	; 0x5c
   b712e:	f003 fba6 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
	return *(this->_M_impl._M_start + __n);
   b7132:	f8da 2000 	ldr.w	r2, [sl]
      { return _M_dataplus._M_p; }
   b7136:	f8d8 3000 	ldr.w	r3, [r8]
   b713a:	2528      	movs	r5, #40	; 0x28
   b713c:	fb05 3302 	mla	r3, r5, r2, r3
      request.path = "/loop-tracks/" + String(cities[cityIndexBuffer].name.c_str()) + "?lines=" + String(cities[cityIndexBuffer].railways[j].name.c_str());
   b7140:	a813      	add	r0, sp, #76	; 0x4c
   b7142:	68d9      	ldr	r1, [r3, #12]
   b7144:	f003 fb9b 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
   b7148:	a913      	add	r1, sp, #76	; 0x4c
   b714a:	a817      	add	r0, sp, #92	; 0x5c
   b714c:	f003 fc2c 	bl	ba9a8 <_ZplRK15StringSumHelperRK6String>
   b7150:	4931      	ldr	r1, [pc, #196]	; (b7218 <loop+0x210>)
   b7152:	f003 fc35 	bl	ba9c0 <_ZplRK15StringSumHelperPKc>
   b7156:	9b02      	ldr	r3, [sp, #8]
   b7158:	f8d8 2000 	ldr.w	r2, [r8]
   b715c:	246c      	movs	r4, #108	; 0x6c
   b715e:	435c      	muls	r4, r3
   b7160:	f8da 3000 	ldr.w	r3, [sl]
   b7164:	436b      	muls	r3, r5
   b7166:	4606      	mov	r6, r0
   b7168:	58d3      	ldr	r3, [r2, r3]
   b716a:	4423      	add	r3, r4
   b716c:	a81b      	add	r0, sp, #108	; 0x6c
   b716e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b7170:	f003 fb85 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
   b7174:	a91b      	add	r1, sp, #108	; 0x6c
   b7176:	4630      	mov	r0, r6
   b7178:	f003 fc16 	bl	ba9a8 <_ZplRK15StringSumHelperRK6String>
   b717c:	4601      	mov	r1, r0
   b717e:	4827      	ldr	r0, [pc, #156]	; (b721c <loop+0x214>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b7180:	4e27      	ldr	r6, [pc, #156]	; (b7220 <loop+0x218>)
   b7182:	f003 fbad 	bl	ba8e0 <_ZN6StringaSERKS_>
   b7186:	a81b      	add	r0, sp, #108	; 0x6c
   b7188:	f003 fb2e 	bl	ba7e8 <_ZN6StringD1Ev>
   b718c:	a813      	add	r0, sp, #76	; 0x4c
   b718e:	f003 fb2b 	bl	ba7e8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b7192:	a817      	add	r0, sp, #92	; 0x5c
   b7194:	f003 fb28 	bl	ba7e8 <_ZN6StringD1Ev>
   b7198:	4b22      	ldr	r3, [pc, #136]	; (b7224 <loop+0x21c>)
   b719a:	4923      	ldr	r1, [pc, #140]	; (b7228 <loop+0x220>)
   b719c:	4823      	ldr	r0, [pc, #140]	; (b722c <loop+0x224>)
   b719e:	9300      	str	r3, [sp, #0]
   b71a0:	4632      	mov	r2, r6
   b71a2:	4b23      	ldr	r3, [pc, #140]	; (b7230 <loop+0x228>)
   b71a4:	f000 fce0 	bl	b7b68 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("parsing");
   b71a8:	f004 f84a 	bl	bb240 <_Z16_fetch_usbserialv>
   b71ac:	4921      	ldr	r1, [pc, #132]	; (b7234 <loop+0x22c>)
   b71ae:	f003 fabc 	bl	ba72a <_ZN5Print7printlnEPKc>
      parser.clear();
   b71b2:	4821      	ldr	r0, [pc, #132]	; (b7238 <loop+0x230>)
   b71b4:	f000 fe70 	bl	b7e98 <_ZN10JsonBuffer5clearEv>
	const char * c_str() const { return buffer; }
   b71b8:	6871      	ldr	r1, [r6, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b71ba:	9103      	str	r1, [sp, #12]
   b71bc:	4608      	mov	r0, r1
   b71be:	f005 fa4b 	bl	bc658 <strlen>
   b71c2:	9903      	ldr	r1, [sp, #12]
   b71c4:	4602      	mov	r2, r0
   b71c6:	481c      	ldr	r0, [pc, #112]	; (b7238 <loop+0x230>)
   b71c8:	f000 fe49 	bl	b7e5e <_ZN10JsonBuffer7addDataEPKcj>
      if(!parser.parse()){
   b71cc:	481a      	ldr	r0, [pc, #104]	; (b7238 <loop+0x230>)
   b71ce:	f001 fa53 	bl	b8678 <_ZN10JsonParser5parseEv>
   b71d2:	9003      	str	r0, [sp, #12]
   b71d4:	bbd0      	cbnz	r0, b724c <loop+0x244>
        Serial.println("parsing failed");
   b71d6:	f004 f833 	bl	bb240 <_Z16_fetch_usbserialv>
   b71da:	4918      	ldr	r1, [pc, #96]	; (b723c <loop+0x234>)
}
   b71dc:	b037      	add	sp, #220	; 0xdc
   b71de:	ecbd 8b06 	vpop	{d8-d10}
   b71e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("parsing failed");
   b71e6:	f003 baa0 	b.w	ba72a <_ZN5Print7printlnEPKc>
   b71ea:	bf00      	nop
   b71ec:	2003e718 	.word	0x2003e718
   b71f0:	2003e6ac 	.word	0x2003e6ac
   b71f4:	000be9e2 	.word	0x000be9e2
   b71f8:	000be9ed 	.word	0x000be9ed
   b71fc:	2003e694 	.word	0x2003e694
   b7200:	200350a0 	.word	0x200350a0
   b7204:	684bda13 	.word	0x684bda13
   b7208:	2003e6b0 	.word	0x2003e6b0
   b720c:	000be9f2 	.word	0x000be9f2
   b7210:	200352f0 	.word	0x200352f0
   b7214:	000be9fd 	.word	0x000be9fd
   b7218:	000bea0b 	.word	0x000bea0b
   b721c:	2003e654 	.word	0x2003e654
   b7220:	2003e678 	.word	0x2003e678
   b7224:	000bea13 	.word	0x000bea13
   b7228:	2003e62c 	.word	0x2003e62c
   b722c:	200355b0 	.word	0x200355b0
   b7230:	200350a4 	.word	0x200350a4
   b7234:	000bea17 	.word	0x000bea17
   b7238:	20037eb0 	.word	0x20037eb0
   b723c:	000bea1f 	.word	0x000bea1f
   b7240:	20035454 	.word	0x20035454
   b7244:	20035448 	.word	0x20035448
   b7248:	00000000 	.word	0x00000000
   b724c:	f8da 3000 	ldr.w	r3, [sl]
   b7250:	f8d8 2000 	ldr.w	r2, [r8]
        float lat = train.key("latitude").valueFloat();
   b7254:	ed1f 9a04 	vldr	s18, [pc, #-16]	; b7248 <loop+0x240>
   b7258:	436b      	muls	r3, r5
      Railway currentRailway = cities[cityIndexBuffer].railways[j];
   b725a:	a81b      	add	r0, sp, #108	; 0x6c
   b725c:	58d1      	ldr	r1, [r2, r3]
   b725e:	4421      	add	r1, r4
   b7260:	f7ff facc 	bl	b67fc <_ZN7RailwayC1ERKS_>
      std::vector<Checkpoint> currentCheckpoints = currentRailway.checkpoints;
   b7264:	a91b      	add	r1, sp, #108	; 0x6c
   b7266:	a807      	add	r0, sp, #28
   b7268:	f7fd fb42 	bl	b48f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      int count = 0;
   b726c:	f04f 0900 	mov.w	r9, #0
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b7270:	49a2      	ldr	r1, [pc, #648]	; (b74fc <loop+0x4f4>)
   b7272:	a80d      	add	r0, sp, #52	; 0x34
   b7274:	f000 fe2a 	bl	b7ecc <_ZNK10JsonParser12getReferenceEv>
   b7278:	4aa1      	ldr	r2, [pc, #644]	; (b7500 <loop+0x4f8>)
   b727a:	a90d      	add	r1, sp, #52	; 0x34
   b727c:	a810      	add	r0, sp, #64	; 0x40
   b727e:	f000 fff5 	bl	b826c <_ZNK13JsonReference3keyEPKc>
   b7282:	2200      	movs	r2, #0
   b7284:	a910      	add	r1, sp, #64	; 0x40
   b7286:	a813      	add	r0, sp, #76	; 0x4c
   b7288:	f000 fec4 	bl	b8014 <_ZNK13JsonReference5indexEj>
   b728c:	4a9d      	ldr	r2, [pc, #628]	; (b7504 <loop+0x4fc>)
   b728e:	a913      	add	r1, sp, #76	; 0x4c
   b7290:	a817      	add	r0, sp, #92	; 0x5c
   b7292:	f000 ffeb 	bl	b826c <_ZNK13JsonReference3keyEPKc>
   b7296:	464a      	mov	r2, r9
   b7298:	a917      	add	r1, sp, #92	; 0x5c
   b729a:	a80a      	add	r0, sp, #40	; 0x28
   b729c:	f000 feba 	bl	b8014 <_ZNK13JsonReference5indexEj>
   b72a0:	a817      	add	r0, sp, #92	; 0x5c
   b72a2:	f000 fd8b 	bl	b7dbc <_ZN13JsonReferenceD1Ev>
   b72a6:	a813      	add	r0, sp, #76	; 0x4c
   b72a8:	f000 fd88 	bl	b7dbc <_ZN13JsonReferenceD1Ev>
   b72ac:	a810      	add	r0, sp, #64	; 0x40
   b72ae:	f000 fd85 	bl	b7dbc <_ZN13JsonReferenceD1Ev>
   b72b2:	a80d      	add	r0, sp, #52	; 0x34
   b72b4:	f000 fd82 	bl	b7dbc <_ZN13JsonReferenceD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b72b8:	4a93      	ldr	r2, [pc, #588]	; (b7508 <loop+0x500>)
   b72ba:	a90a      	add	r1, sp, #40	; 0x28
   b72bc:	a817      	add	r0, sp, #92	; 0x5c
   b72be:	f000 ffd5 	bl	b826c <_ZNK13JsonReference3keyEPKc>
   b72c2:	a917      	add	r1, sp, #92	; 0x5c
   b72c4:	a813      	add	r0, sp, #76	; 0x4c
   b72c6:	f000 ffeb 	bl	b82a0 <_ZNK13JsonReference11valueStringEv>
   b72ca:	a817      	add	r0, sp, #92	; 0x5c
   b72cc:	f000 fd76 	bl	b7dbc <_ZN13JsonReferenceD1Ev>
        String destNm = train.key("destination").valueString();
   b72d0:	4a8e      	ldr	r2, [pc, #568]	; (b750c <loop+0x504>)
   b72d2:	a90a      	add	r1, sp, #40	; 0x28
   b72d4:	a810      	add	r0, sp, #64	; 0x40
   b72d6:	f000 ffc9 	bl	b826c <_ZNK13JsonReference3keyEPKc>
   b72da:	a910      	add	r1, sp, #64	; 0x40
   b72dc:	a817      	add	r0, sp, #92	; 0x5c
   b72de:	f000 ffdf 	bl	b82a0 <_ZNK13JsonReference11valueStringEv>
   b72e2:	a810      	add	r0, sp, #64	; 0x40
   b72e4:	f000 fd6a 	bl	b7dbc <_ZN13JsonReferenceD1Ev>
        int trainDir = train.key("direction").valueInt();
   b72e8:	4a89      	ldr	r2, [pc, #548]	; (b7510 <loop+0x508>)
   b72ea:	a90a      	add	r1, sp, #40	; 0x28
   b72ec:	a810      	add	r0, sp, #64	; 0x40
   b72ee:	f000 ffbd 	bl	b826c <_ZNK13JsonReference3keyEPKc>
   b72f2:	2100      	movs	r1, #0
   b72f4:	a810      	add	r0, sp, #64	; 0x40
   b72f6:	f000 fea7 	bl	b8048 <_ZNK13JsonReference8valueIntEi>
   b72fa:	4604      	mov	r4, r0
   b72fc:	a810      	add	r0, sp, #64	; 0x40
   b72fe:	f000 fd5d 	bl	b7dbc <_ZN13JsonReferenceD1Ev>
        float lat = train.key("latitude").valueFloat();
   b7302:	4a84      	ldr	r2, [pc, #528]	; (b7514 <loop+0x50c>)
   b7304:	a90a      	add	r1, sp, #40	; 0x28
   b7306:	a810      	add	r0, sp, #64	; 0x40
   b7308:	f000 ffb0 	bl	b826c <_ZNK13JsonReference3keyEPKc>
   b730c:	a810      	add	r0, sp, #64	; 0x40
   b730e:	eeb0 0a49 	vmov.f32	s0, s18
   b7312:	f000 fea5 	bl	b8060 <_ZNK13JsonReference10valueFloatEf>
   b7316:	a810      	add	r0, sp, #64	; 0x40
   b7318:	eef0 8a40 	vmov.f32	s17, s0
   b731c:	f000 fd4e 	bl	b7dbc <_ZN13JsonReferenceD1Ev>
        float lon = train.key("longitude").valueFloat();
   b7320:	4a7d      	ldr	r2, [pc, #500]	; (b7518 <loop+0x510>)
   b7322:	a90a      	add	r1, sp, #40	; 0x28
   b7324:	a810      	add	r0, sp, #64	; 0x40
   b7326:	f000 ffa1 	bl	b826c <_ZNK13JsonReference3keyEPKc>
   b732a:	a810      	add	r0, sp, #64	; 0x40
   b732c:	eeb0 0a49 	vmov.f32	s0, s18
   b7330:	f000 fe96 	bl	b8060 <_ZNK13JsonReference10valueFloatEf>
   b7334:	a810      	add	r0, sp, #64	; 0x40
   b7336:	eeb0 8a40 	vmov.f32	s16, s0
   b733a:	f000 fd3f 	bl	b7dbc <_ZN13JsonReferenceD1Ev>
        if(nextStation.length() <= 1){
   b733e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b7340:	2b01      	cmp	r3, #1
   b7342:	d87f      	bhi.n	b7444 <loop+0x43c>
          Serial.println("break");
   b7344:	f003 ff7c 	bl	bb240 <_Z16_fetch_usbserialv>
   b7348:	4974      	ldr	r1, [pc, #464]	; (b751c <loop+0x514>)
        if(cityIndexBuffer == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b734a:	4f75      	ldr	r7, [pc, #468]	; (b7520 <loop+0x518>)
          Serial.println("break");
   b734c:	f003 f9ed 	bl	ba72a <_ZN5Print7printlnEPKc>
          break;
   b7350:	a817      	add	r0, sp, #92	; 0x5c
   b7352:	f003 fa49 	bl	ba7e8 <_ZN6StringD1Ev>
   b7356:	a813      	add	r0, sp, #76	; 0x4c
   b7358:	f003 fa46 	bl	ba7e8 <_ZN6StringD1Ev>
   b735c:	a80a      	add	r0, sp, #40	; 0x28
   b735e:	f000 fd2d 	bl	b7dbc <_ZN13JsonReferenceD1Ev>
      for(int i = 0; i < 4; i++){
   b7362:	9b02      	ldr	r3, [sp, #8]
   b7364:	2500      	movs	r5, #0
   b7366:	00de      	lsls	r6, r3, #3
        if(cityIndexBuffer == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b7368:	683b      	ldr	r3, [r7, #0]
   b736a:	2b00      	cmp	r3, #0
   b736c:	f040 8286 	bne.w	b787c <loop+0x874>
   b7370:	2d02      	cmp	r5, #2
   b7372:	d006      	beq.n	b7382 <loop+0x37a>
   b7374:	496b      	ldr	r1, [pc, #428]	; (b7524 <loop+0x51c>)
   b7376:	a827      	add	r0, sp, #156	; 0x9c
   b7378:	f7fd fade 	bl	b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b737c:	2800      	cmp	r0, #0
   b737e:	f000 826d 	beq.w	b785c <loop+0x854>
          Wire.beginTransmission(brownLineCTAAdr);
   b7382:	f004 f8ab 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b7386:	4b68      	ldr	r3, [pc, #416]	; (b7528 <loop+0x520>)
   b7388:	6819      	ldr	r1, [r3, #0]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b738a:	f003 f841 	bl	ba410 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(String(currentRailway.colors[0].c_str()));
   b738e:	f004 f8a5 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b7392:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   b7394:	4604      	mov	r4, r0
   b7396:	6819      	ldr	r1, [r3, #0]
   b7398:	a817      	add	r0, sp, #92	; 0x5c
   b739a:	f003 fa70 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
   b739e:	9917      	ldr	r1, [sp, #92]	; 0x5c
   b73a0:	4620      	mov	r0, r4
   b73a2:	f7fc ff41 	bl	b4228 <_ZN5Print5writeEPKc.isra.0>
   b73a6:	a817      	add	r0, sp, #92	; 0x5c
   b73a8:	f003 fa1e 	bl	ba7e8 <_ZN6StringD1Ev>
        Wire.write(String(currentRailway.colors[1].c_str()));
   b73ac:	f004 f896 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b73b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   b73b2:	4604      	mov	r4, r0
   b73b4:	6999      	ldr	r1, [r3, #24]
   b73b6:	a817      	add	r0, sp, #92	; 0x5c
   b73b8:	f003 fa61 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
   b73bc:	9917      	ldr	r1, [sp, #92]	; 0x5c
   b73be:	4620      	mov	r0, r4
   b73c0:	f7fc ff32 	bl	b4228 <_ZN5Print5writeEPKc.isra.0>
   b73c4:	a817      	add	r0, sp, #92	; 0x5c
   b73c6:	f003 fa0f 	bl	ba7e8 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b73ca:	f004 f887 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b73ce:	f003 f826 	bl	ba41e <_ZN7TwoWire15endTransmissionEv>
        if(cityIndexBuffer == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b73d2:	683b      	ldr	r3, [r7, #0]
   b73d4:	2b00      	cmp	r3, #0
   b73d6:	f040 8267 	bne.w	b78a8 <loop+0x8a0>
   b73da:	2d02      	cmp	r5, #2
   b73dc:	d006      	beq.n	b73ec <loop+0x3e4>
   b73de:	4951      	ldr	r1, [pc, #324]	; (b7524 <loop+0x51c>)
   b73e0:	a827      	add	r0, sp, #156	; 0x9c
   b73e2:	f7fd faa9 	bl	b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b73e6:	2800      	cmp	r0, #0
   b73e8:	f000 824e 	beq.w	b7888 <loop+0x880>
          Wire.beginTransmission(brownLineCTAAdr);
   b73ec:	f004 f876 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b73f0:	4b4d      	ldr	r3, [pc, #308]	; (b7528 <loop+0x520>)
   b73f2:	6819      	ldr	r1, [r3, #0]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b73f4:	f003 f80c 	bl	ba410 <_ZN7TwoWire17beginTransmissionEi>
        if(cityIndexBuffer == 0){
   b73f8:	683c      	ldr	r4, [r7, #0]
   b73fa:	2c00      	cmp	r4, #0
   b73fc:	f040 831c 	bne.w	b7a38 <loop+0xa30>
          if(i == 2){
   b7400:	2d02      	cmp	r5, #2
   b7402:	f040 8286 	bne.w	b7912 <loop+0x90a>
            if(currentRailway.name == greenLineCTA.name){
   b7406:	4949      	ldr	r1, [pc, #292]	; (b752c <loop+0x524>)
   b7408:	f8df 9124 	ldr.w	r9, [pc, #292]	; b7530 <loop+0x528>
   b740c:	a827      	add	r0, sp, #156	; 0x9c
   b740e:	f7fd fa93 	bl	b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7412:	2800      	cmp	r0, #0
   b7414:	f000 824e 	beq.w	b78b4 <loop+0x8ac>
   b7418:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b741c:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   b7420:	1a9b      	subs	r3, r3, r2
   b7422:	109a      	asrs	r2, r3, #2
   b7424:	e9d1 1300 	ldrd	r1, r3, [r1]
   b7428:	1a5b      	subs	r3, r3, r1
   b742a:	109b      	asrs	r3, r3, #2
              for(int j = 0; j < brownLineCTA.outputs[0].size() + (brownLineCTA.outputs[2].size() / 2); j++){
   b742c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   b7430:	42a3      	cmp	r3, r4
   b7432:	f240 8301 	bls.w	b7a38 <loop+0xa30>
                Wire.write('0');
   b7436:	f004 f851 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b743a:	2130      	movs	r1, #48	; 0x30
   b743c:	f7fc fef0 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size() + (brownLineCTA.outputs[2].size() / 2); j++){
   b7440:	3401      	adds	r4, #1
   b7442:	e7e9      	b.n	b7418 <loop+0x410>
   b7444:	e9dd 3507 	ldrd	r3, r5, [sp, #28]
   b7448:	1aed      	subs	r5, r5, r3
   b744a:	10ed      	asrs	r5, r5, #3
        for(int i = 0; i < checkpointCount; i++){
   b744c:	f04f 0b00 	mov.w	fp, #0
   b7450:	45ab      	cmp	fp, r5
	return *(this->_M_impl._M_start + __n);
   b7452:	9907      	ldr	r1, [sp, #28]
   b7454:	da3b      	bge.n	b74ce <loop+0x4c6>
   b7456:	eb01 06cb 	add.w	r6, r1, fp, lsl #3
    }

    float getDistance(float trainLat, float trainLon){
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b745a:	edd6 7a00 	vldr	s15, [r6]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b745e:	ee78 7ae7 	vsub.f32	s15, s17, s15
   b7462:	ee17 0a90 	vmov	r0, s15
   b7466:	f004 fcd7 	bl	bbe18 <__aeabi_f2d>
   b746a:	edd6 7a01 	vldr	s15, [r6, #4]
   b746e:	ee78 7a67 	vsub.f32	s15, s16, s15
   b7472:	4602      	mov	r2, r0
   b7474:	460b      	mov	r3, r1
   b7476:	ee17 0a90 	vmov	r0, s15
   b747a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b747e:	f004 fccb 	bl	bbe18 <__aeabi_f2d>
   b7482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b7486:	ec41 0b1a 	vmov	d10, r0, r1
   b748a:	4610      	mov	r0, r2
   b748c:	4619      	mov	r1, r3
   b748e:	f004 fd1b 	bl	bbec8 <__aeabi_dmul>
   b7492:	ec53 2b1a 	vmov	r2, r3, d10
   b7496:	4606      	mov	r6, r0
   b7498:	460f      	mov	r7, r1
   b749a:	ee1a 0a10 	vmov	r0, s20
   b749e:	4619      	mov	r1, r3
   b74a0:	f004 fd12 	bl	bbec8 <__aeabi_dmul>
   b74a4:	4602      	mov	r2, r0
   b74a6:	460b      	mov	r3, r1
   b74a8:	4630      	mov	r0, r6
   b74aa:	4639      	mov	r1, r7
   b74ac:	f004 fb56 	bl	bbb5c <__adddf3>
   b74b0:	ec41 0b10 	vmov	d0, r0, r1
   b74b4:	f004 fa46 	bl	bb944 <sqrt>
          currentRailway.distances[i] = currentCheckpoints[i].getDistance(lat, lon);
   b74b8:	9e1e      	ldr	r6, [sp, #120]	; 0x78
   b74ba:	ec51 0b10 	vmov	r0, r1, d0
   b74be:	f004 ffd3 	bl	bc468 <__aeabi_d2f>
   b74c2:	eb06 068b 	add.w	r6, r6, fp, lsl #2
        for(int i = 0; i < checkpointCount; i++){
   b74c6:	f10b 0b01 	add.w	fp, fp, #1
   b74ca:	6030      	str	r0, [r6, #0]
   b74cc:	e7c0      	b.n	b7450 <loop+0x448>
      : _M_current(__i) { }
   b74ce:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
   b74d2:	42be      	cmp	r6, r7
   b74d4:	d030      	beq.n	b7538 <loop+0x530>
   b74d6:	1d32      	adds	r2, r6, #4
   b74d8:	4633      	mov	r3, r6
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
   b74da:	4297      	cmp	r7, r2
	++_M_current;
   b74dc:	4610      	mov	r0, r2
   b74de:	d02c      	beq.n	b753a <loop+0x532>
	if (__comp(__first, __result))
   b74e0:	edd3 7a00 	vldr	s15, [r3]
   b74e4:	ed90 7a00 	vldr	s14, [r0]
   b74e8:	eeb4 7a67 	vcmp.f32	s14, s15
   b74ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b74f0:	f102 0204 	add.w	r2, r2, #4
   b74f4:	bf48      	it	mi
   b74f6:	4603      	movmi	r3, r0
   b74f8:	e7ef      	b.n	b74da <loop+0x4d2>
   b74fa:	bf00      	nop
   b74fc:	20037eb0 	.word	0x20037eb0
   b7500:	000bea2e 	.word	0x000bea2e
   b7504:	000bea34 	.word	0x000bea34
   b7508:	000bea3b 	.word	0x000bea3b
   b750c:	000bea45 	.word	0x000bea45
   b7510:	000bea51 	.word	0x000bea51
   b7514:	000bea5b 	.word	0x000bea5b
   b7518:	000bea64 	.word	0x000bea64
   b751c:	000bea6e 	.word	0x000bea6e
   b7520:	20035454 	.word	0x20035454
   b7524:	2003e518 	.word	0x2003e518
   b7528:	20035444 	.word	0x20035444
   b752c:	2003556c 	.word	0x2003556c
   b7530:	200353d8 	.word	0x200353d8
   b7534:	7dcccccc 	.word	0x7dcccccc
   b7538:	4633      	mov	r3, r6
        if(closestIndex == currentRailway.tripleIndex){
   b753a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b753c:	1b9b      	subs	r3, r3, r6
   b753e:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
   b7542:	ea4f 00a3 	mov.w	r0, r3, asr #2
          closestIndex = currentRailway.loopIndex;
   b7546:	bf08      	it	eq
   b7548:	9831      	ldreq	r0, [sp, #196]	; 0xc4
   b754a:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
        x1 = currentCheckpoints[closestIndex].lat;
   b754e:	edd3 7a00 	vldr	s15, [r3]
        y1 = currentCheckpoints[closestIndex].lon;
   b7552:	edd3 6a01 	vldr	s13, [r3, #4]
        if(currentCheckpoints[closestIndex].lat > lat){
   b7556:	eef4 8ae7 	vcmpe.f32	s17, s15
   b755a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          slope = (y1 - y) / (x1 - x);
   b755e:	ee77 5ae8 	vsub.f32	s11, s15, s17
          slope = (y - y1) / (x - x1);
   b7562:	bf55      	itete	pl
   b7564:	ee38 6a66 	vsubpl.f32	s12, s16, s13
          slope = (y1 - y) / (x1 - x);
   b7568:	ee76 7ac8 	vsubmi.f32	s15, s13, s16
          slope = (y - y1) / (x - x1);
   b756c:	ee78 7ae7 	vsubpl.f32	s15, s17, s15
          slope = (y1 - y) / (x1 - x);
   b7570:	ee87 7aa5 	vdivmi.f32	s14, s15, s11
   b7574:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
          slope = (y - y1) / (x - x1);
   b7578:	bf58      	it	pl
   b757a:	ee86 7a27 	vdivpl.f32	s14, s12, s15
        if(slope == 0){
   b757e:	ed5f 7a13 	vldr	s15, [pc, #-76]	; b7534 <loop+0x52c>
   b7582:	eeb5 7a40 	vcmp.f32	s14, #0.0
   b7586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b758a:	d00a      	beq.n	b75a2 <loop+0x59a>
        }else if(slope >= __FLT_MAX__ / 10){
   b758c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b7590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          perpendicularSlope = -1 / slope;
   b7594:	bfba      	itte	lt
   b7596:	eebf 6a00 	vmovlt.f32	s12, #240	; 0xbf800000 -1.0
   b759a:	eec6 7a07 	vdivlt.f32	s15, s12, s14
          perpendicularSlope = 0;
   b759e:	eef0 7a49 	vmovge.f32	s15, s18
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b75a2:	eeb0 7a48 	vmov.f32	s14, s16
   b75a6:	eea7 7aa5 	vfma.f32	s14, s15, s11
   b75aa:	eef4 6ac7 	vcmpe.f32	s13, s14
   b75ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b75b2:	bf4c      	ite	mi
   b75b4:	2701      	movmi	r7, #1
   b75b6:	2700      	movpl	r7, #0
        if(closestIndex == 0){
   b75b8:	2800      	cmp	r0, #0
   b75ba:	d171      	bne.n	b76a0 <loop+0x698>
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b75bc:	ed91 7a02 	vldr	s14, [r1, #8]
          if(currentRailway.loopIndex == closestIndex){
   b75c0:	f8dd c0c4 	ldr.w	ip, [sp, #196]	; 0xc4
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b75c4:	ee37 7a68 	vsub.f32	s14, s14, s17
   b75c8:	eef0 6a48 	vmov.f32	s13, s16
   b75cc:	eee7 6a27 	vfma.f32	s13, s14, s15
   b75d0:	ed91 7a03 	vldr	s14, [r1, #12]
   b75d4:	eef4 6ac7 	vcmpe.f32	s13, s14
   b75d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b75dc:	bfcc      	ite	gt
   b75de:	2501      	movgt	r5, #1
   b75e0:	2500      	movle	r5, #0
          if(currentRailway.loopIndex == closestIndex){
   b75e2:	f1bc 0f00 	cmp.w	ip, #0
   b75e6:	d11d      	bne.n	b7624 <loop+0x61c>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b75e8:	1e53      	subs	r3, r2, #1
   b75ea:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
            if(nearestSide != pointSide){
   b75ee:	42bd      	cmp	r5, r7
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b75f0:	ed91 0a00 	vldr	s0, [r1]
   b75f4:	ed91 7a01 	vldr	s14, [r1, #4]
            if(nearestSide != pointSide){
   b75f8:	f040 809b 	bne.w	b7732 <loop+0x72a>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b75fc:	ee70 8a68 	vsub.f32	s17, s0, s17
   b7600:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b7604:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b7608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            }else if(nearestSide != loopPointSide){
   b760c:	bfcc      	ite	gt
   b760e:	2101      	movgt	r1, #1
   b7610:	2100      	movle	r1, #0
   b7612:	42a9      	cmp	r1, r5
              }else if(nearestSide != loopPointSide){
   b7614:	d100      	bne.n	b7618 <loop+0x610>
                secondClosestIndex = currentRailway.tripleIndex + 1;
   b7616:	1c53      	adds	r3, r2, #1
          if(closestIndex < secondClosestIndex){
   b7618:	429a      	cmp	r2, r3
   b761a:	f2c0 808c 	blt.w	b7736 <loop+0x72e>
   b761e:	4611      	mov	r1, r2
   b7620:	469c      	mov	ip, r3
   b7622:	e005      	b.n	b7630 <loop+0x628>
            if(pointSide == nearestSide){
   b7624:	42bd      	cmp	r5, r7
   b7626:	d074      	beq.n	b7712 <loop+0x70a>
   b7628:	4602      	mov	r2, r0
   b762a:	4684      	mov	ip, r0
   b762c:	2301      	movs	r3, #1
   b762e:	4619      	mov	r1, r3
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b7630:	eb06 008c 	add.w	r0, r6, ip, lsl #2
   b7634:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   b7638:	ed90 7a00 	vldr	s14, [r0]
   b763c:	edd1 7a00 	vldr	s15, [r1]
   b7640:	9821      	ldr	r0, [sp, #132]	; 0x84
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b7642:	9d35      	ldr	r5, [sp, #212]	; 0xd4
          segmentPos *= currentRailway.scalers[lowerIndex];
   b7644:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b7648:	ee77 7a27 	vadd.f32	s15, s14, s15
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b764c:	4295      	cmp	r5, r2
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b764e:	eec7 6a27 	vdiv.f32	s13, s14, s15
          segmentPos *= currentRailway.scalers[lowerIndex];
   b7652:	ee07 1a90 	vmov	s15, r1
   b7656:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   b765a:	ee28 8a26 	vmul.f32	s16, s16, s13
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b765e:	db06      	blt.n	b766e <loop+0x666>
   b7660:	9934      	ldr	r1, [sp, #208]	; 0xd0
   b7662:	4291      	cmp	r1, r2
   b7664:	dc03      	bgt.n	b766e <loop+0x666>
   b7666:	429d      	cmp	r5, r3
   b7668:	db01      	blt.n	b766e <loop+0x666>
   b766a:	4299      	cmp	r1, r3
   b766c:	dd66      	ble.n	b773c <loop+0x734>
          else if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b766e:	9d32      	ldr	r5, [sp, #200]	; 0xc8
   b7670:	4295      	cmp	r5, r2
   b7672:	dc66      	bgt.n	b7742 <loop+0x73a>
   b7674:	429d      	cmp	r5, r3
   b7676:	dc64      	bgt.n	b7742 <loop+0x73a>
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b7678:	9933      	ldr	r1, [sp, #204]	; 0xcc
   b767a:	4291      	cmp	r1, r2
   b767c:	db65      	blt.n	b774a <loop+0x742>
   b767e:	4299      	cmp	r1, r3
   b7680:	db63      	blt.n	b774a <loop+0x742>
            inLoop = true;
   b7682:	9b03      	ldr	r3, [sp, #12]
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b7684:	4629      	mov	r1, r5
            pcbSegment = 2;
   b7686:	2502      	movs	r5, #2
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b7688:	458c      	cmp	ip, r1
   b768a:	dd61      	ble.n	b7750 <loop+0x748>
            segmentPos += currentRailway.scalers[i];
   b768c:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   b7690:	ee07 2a90 	vmov	s15, r2
   b7694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b7698:	3101      	adds	r1, #1
            segmentPos += currentRailway.scalers[i];
   b769a:	ee38 8a27 	vadd.f32	s16, s16, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b769e:	e7f3      	b.n	b7688 <loop+0x680>
   b76a0:	f1ac 0c08 	sub.w	ip, ip, #8
   b76a4:	448c      	add	ip, r1
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b76a6:	ed9c 7a00 	vldr	s14, [ip]
   b76aa:	ee37 7a68 	vsub.f32	s14, s14, s17
   b76ae:	eef0 6a48 	vmov.f32	s13, s16
   b76b2:	eee7 6a27 	vfma.f32	s13, s14, s15
          if(closestIndex == checkpointCount - 1){
   b76b6:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b76ba:	1e43      	subs	r3, r0, #1
   b76bc:	ed9c 7a01 	vldr	s14, [ip, #4]
   b76c0:	eef4 6ac7 	vcmpe.f32	s13, s14
   b76c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b76c8:	bfcc      	ite	gt
   b76ca:	f04f 0c01 	movgt.w	ip, #1
   b76ce:	f04f 0c00 	movle.w	ip, #0
          if(closestIndex == checkpointCount - 1){
   b76d2:	4586      	cmp	lr, r0
   b76d4:	d129      	bne.n	b772a <loop+0x722>
            if(closestIndex == currentRailway.loopIndex){
   b76d6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   b76d8:	4283      	cmp	r3, r0
   b76da:	d118      	bne.n	b770e <loop+0x706>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b76dc:	1e53      	subs	r3, r2, #1
   b76de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
              if(nearestSide != pointSide){
   b76e2:	45bc      	cmp	ip, r7
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b76e4:	ed91 0a00 	vldr	s0, [r1]
   b76e8:	ed91 7a01 	vldr	s14, [r1, #4]
              if(nearestSide != pointSide){
   b76ec:	d002      	beq.n	b76f4 <loop+0x6ec>
                secondClosestIndex = checkpointCount - 2;
   b76ee:	1eab      	subs	r3, r5, #2
   b76f0:	4602      	mov	r2, r0
   b76f2:	e791      	b.n	b7618 <loop+0x610>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b76f4:	ee70 8a68 	vsub.f32	s17, s0, s17
   b76f8:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b76fc:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b7700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              }else if(nearestSide != loopPointSide){
   b7704:	bfcc      	ite	gt
   b7706:	2101      	movgt	r1, #1
   b7708:	2100      	movle	r1, #0
   b770a:	4561      	cmp	r1, ip
   b770c:	e782      	b.n	b7614 <loop+0x60c>
              if(pointSide == nearestSide){
   b770e:	45bc      	cmp	ip, r7
   b7710:	d1ed      	bne.n	b76ee <loop+0x6e6>
        String destNm = train.key("destination").valueString();
   b7712:	a817      	add	r0, sp, #92	; 0x5c
   b7714:	f003 f868 	bl	ba7e8 <_ZN6StringD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b7718:	a813      	add	r0, sp, #76	; 0x4c
   b771a:	f003 f865 	bl	ba7e8 <_ZN6StringD1Ev>
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b771e:	a80a      	add	r0, sp, #40	; 0x28
        count++;
   b7720:	f109 0901 	add.w	r9, r9, #1
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b7724:	f000 fb4a 	bl	b7dbc <_ZN13JsonReferenceD1Ev>
   b7728:	e5a2      	b.n	b7270 <loop+0x268>
            if(pointSide == nearestSide){
   b772a:	45bc      	cmp	ip, r7
   b772c:	d1e0      	bne.n	b76f0 <loop+0x6e8>
              secondClosestIndex = closestIndex + 1;
   b772e:	1c43      	adds	r3, r0, #1
   b7730:	e7de      	b.n	b76f0 <loop+0x6e8>
   b7732:	4602      	mov	r2, r0
   b7734:	e77a      	b.n	b762c <loop+0x624>
   b7736:	4619      	mov	r1, r3
   b7738:	4694      	mov	ip, r2
   b773a:	e779      	b.n	b7630 <loop+0x628>
        bool inLoop = false;
   b773c:	2300      	movs	r3, #0
            pcbSegment = 3;
   b773e:	2503      	movs	r5, #3
   b7740:	e7a2      	b.n	b7688 <loop+0x680>
            lowerScaleBound = 0;
   b7742:	2100      	movs	r1, #0
        bool inLoop = false;
   b7744:	460b      	mov	r3, r1
            pcbSegment = 0;
   b7746:	460d      	mov	r5, r1
   b7748:	e79e      	b.n	b7688 <loop+0x680>
        bool inLoop = false;
   b774a:	2300      	movs	r3, #0
            pcbSegment = 1;
   b774c:	2501      	movs	r5, #1
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b774e:	e79b      	b.n	b7688 <loop+0x680>
          if(cityIndexBuffer == 0){
   b7750:	4aab      	ldr	r2, [pc, #684]	; (b7a00 <loop+0x9f8>)
   b7752:	9e24      	ldr	r6, [sp, #144]	; 0x90
   b7754:	6812      	ldr	r2, [r2, #0]
   b7756:	2a00      	cmp	r2, #0
   b7758:	d170      	bne.n	b783c <loop+0x834>
            if(inLoop){
   b775a:	2b00      	cmp	r3, #0
   b775c:	d04a      	beq.n	b77f4 <loop+0x7ec>
              if(currentRailway.name == pinkLineCTA.name){
   b775e:	49a9      	ldr	r1, [pc, #676]	; (b7a04 <loop+0x9fc>)
   b7760:	a827      	add	r0, sp, #156	; 0x9c
   b7762:	f7fd f8e9 	bl	b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7766:	b1f0      	cbz	r0, b77a6 <loop+0x79e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7768:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
   b776c:	1a9b      	subs	r3, r3, r2
   b776e:	109b      	asrs	r3, r3, #2
                segmentPos = (float)currentRailway.outputs[2].size() - segmentPos;
   b7770:	ee07 3a90 	vmov	s15, r3
   b7774:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b7778:	ee37 8ac8 	vsub.f32	s16, s15, s16
            if(pcbSegment == 1 && currentRailway.name == greenLineCTA.name){
   b777c:	2d01      	cmp	r5, #1
   b777e:	d147      	bne.n	b7810 <loop+0x808>
   b7780:	49a1      	ldr	r1, [pc, #644]	; (b7a08 <loop+0xa00>)
   b7782:	a827      	add	r0, sp, #156	; 0x9c
   b7784:	f7fd f8d8 	bl	b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7788:	2800      	cmp	r0, #0
   b778a:	d049      	beq.n	b7820 <loop+0x818>
   b778c:	e9d6 2303 	ldrd	r2, r3, [r6, #12]
   b7790:	1a9b      	subs	r3, r3, r2
   b7792:	109b      	asrs	r3, r3, #2
              segmentPos = (float)currentRailway.outputs[1].size() - segmentPos;
   b7794:	ee07 3a90 	vmov	s15, r3
   b7798:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b779c:	ee37 8ac8 	vsub.f32	s16, s15, s16
              trainDir = 6 - trainDir;
   b77a0:	f1c4 0406 	rsb	r4, r4, #6
   b77a4:	e03c      	b.n	b7820 <loop+0x818>
              }else if(currentRailway.name == orangeLineCTA.name){
   b77a6:	4999      	ldr	r1, [pc, #612]	; (b7a0c <loop+0xa04>)
   b77a8:	a827      	add	r0, sp, #156	; 0x9c
   b77aa:	f7fd f8c5 	bl	b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b77ae:	b1c8      	cbz	r0, b77e4 <loop+0x7dc>
	return *(this->_M_impl._M_start + __n);
   b77b0:	4b97      	ldr	r3, [pc, #604]	; (b7a10 <loop+0xa08>)
   b77b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b77b4:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   b77b8:	1ad2      	subs	r2, r2, r3
   b77ba:	1092      	asrs	r2, r2, #2
                segmentPos = (int)(segmentPos + orangeLineCTA.outputs[2].size() / 2) % orangeLineCTA.outputs[2].size();
   b77bc:	0853      	lsrs	r3, r2, #1
   b77be:	ee07 3a90 	vmov	s15, r3
   b77c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b77c6:	ee37 8a88 	vadd.f32	s16, s15, s16
   b77ca:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   b77ce:	ee17 3a90 	vmov	r3, s15
   b77d2:	fbb3 f1f2 	udiv	r1, r3, r2
   b77d6:	fb02 3311 	mls	r3, r2, r1, r3
   b77da:	ee08 3a10 	vmov	s16, r3
   b77de:	eeb8 8a48 	vcvt.f32.u32	s16, s16
   b77e2:	e7cb      	b.n	b777c <loop+0x774>
              }else if(currentRailway.name == purpleLineCTA.name){
   b77e4:	498b      	ldr	r1, [pc, #556]	; (b7a14 <loop+0xa0c>)
   b77e6:	a827      	add	r0, sp, #156	; 0x9c
   b77e8:	f7fd f8a6 	bl	b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
                trainDir = 1;
   b77ec:	2800      	cmp	r0, #0
   b77ee:	bf18      	it	ne
   b77f0:	2401      	movne	r4, #1
   b77f2:	e7c3      	b.n	b777c <loop+0x774>
              if(currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name){
   b77f4:	4988      	ldr	r1, [pc, #544]	; (b7a18 <loop+0xa10>)
   b77f6:	a827      	add	r0, sp, #156	; 0x9c
   b77f8:	f7fd f89e 	bl	b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b77fc:	b928      	cbnz	r0, b780a <loop+0x802>
   b77fe:	4985      	ldr	r1, [pc, #532]	; (b7a14 <loop+0xa0c>)
   b7800:	a827      	add	r0, sp, #156	; 0x9c
   b7802:	f7fd f899 	bl	b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7806:	2800      	cmp	r0, #0
   b7808:	d0b8      	beq.n	b777c <loop+0x774>
                trainDir = 6 - trainDir;
   b780a:	f1c4 0406 	rsb	r4, r4, #6
   b780e:	e7b5      	b.n	b777c <loop+0x774>
            if(pcbSegment == 3 && currentRailway.name == pinkLineCTA.name){
   b7810:	2d03      	cmp	r5, #3
   b7812:	d105      	bne.n	b7820 <loop+0x818>
   b7814:	497b      	ldr	r1, [pc, #492]	; (b7a04 <loop+0x9fc>)
            if(currentRailway.name == orangeLineMBTA.name || currentRailway.name == greenLine1MBTA.name || currentRailway.name == redLineMBTA.name){
   b7816:	a827      	add	r0, sp, #156	; 0x9c
   b7818:	f7fd f88e 	bl	b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b781c:	2800      	cmp	r0, #0
   b781e:	d1bf      	bne.n	b77a0 <loop+0x798>
  { return __builtin_floorf(__x); }
   b7820:	eeb0 0a48 	vmov.f32	s0, s16
   b7824:	f004 f848 	bl	bb8b8 <floorf>
	return *(this->_M_impl._M_start + __n);
   b7828:	230c      	movs	r3, #12
          currentRailway.outputs[pcbSegment][(int)floor(segmentPos)] = trainDir;
   b782a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b782e:	435d      	muls	r5, r3
   b7830:	ee10 2a10 	vmov	r2, s0
   b7834:	5973      	ldr	r3, [r6, r5]
   b7836:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b783a:	e76a      	b.n	b7712 <loop+0x70a>
          else if(cityIndexBuffer == 1){
   b783c:	2a01      	cmp	r2, #1
   b783e:	d1ef      	bne.n	b7820 <loop+0x818>
            if(currentRailway.name == orangeLineMBTA.name || currentRailway.name == greenLine1MBTA.name || currentRailway.name == redLineMBTA.name){
   b7840:	4976      	ldr	r1, [pc, #472]	; (b7a1c <loop+0xa14>)
   b7842:	a827      	add	r0, sp, #156	; 0x9c
   b7844:	f7fd f878 	bl	b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7848:	2800      	cmp	r0, #0
   b784a:	d1a9      	bne.n	b77a0 <loop+0x798>
   b784c:	4974      	ldr	r1, [pc, #464]	; (b7a20 <loop+0xa18>)
   b784e:	a827      	add	r0, sp, #156	; 0x9c
   b7850:	f7fd f872 	bl	b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7854:	2800      	cmp	r0, #0
   b7856:	d1a3      	bne.n	b77a0 <loop+0x798>
   b7858:	4972      	ldr	r1, [pc, #456]	; (b7a24 <loop+0xa1c>)
   b785a:	e7dc      	b.n	b7816 <loop+0x80e>
        }else if(cityIndexBuffer == 0 && i == 3){
   b785c:	2d03      	cmp	r5, #3
   b785e:	d10d      	bne.n	b787c <loop+0x874>
          if(currentRailway.name == orangeLineCTA.name){
   b7860:	496a      	ldr	r1, [pc, #424]	; (b7a0c <loop+0xa04>)
   b7862:	4c71      	ldr	r4, [pc, #452]	; (b7a28 <loop+0xa20>)
   b7864:	a827      	add	r0, sp, #156	; 0x9c
   b7866:	f7fd f867 	bl	b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b786a:	b118      	cbz	r0, b7874 <loop+0x86c>
            Wire.beginTransmission(greenLineCTAAdr[0]);
   b786c:	f003 fe36 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b7870:	6821      	ldr	r1, [r4, #0]
   b7872:	e58a      	b.n	b738a <loop+0x382>
            Wire.beginTransmission(greenLineCTAAdr[1]);
   b7874:	f003 fe32 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b7878:	6861      	ldr	r1, [r4, #4]
   b787a:	e586      	b.n	b738a <loop+0x382>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b787c:	f003 fe2e 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b7880:	4b6a      	ldr	r3, [pc, #424]	; (b7a2c <loop+0xa24>)
   b7882:	681b      	ldr	r3, [r3, #0]
   b7884:	5999      	ldr	r1, [r3, r6]
   b7886:	e580      	b.n	b738a <loop+0x382>
        }else if(cityIndexBuffer == 0 && i == 3){
   b7888:	2d03      	cmp	r5, #3
   b788a:	d10d      	bne.n	b78a8 <loop+0x8a0>
          if(currentRailway.name == orangeLineCTA.name){
   b788c:	495f      	ldr	r1, [pc, #380]	; (b7a0c <loop+0xa04>)
   b788e:	4c66      	ldr	r4, [pc, #408]	; (b7a28 <loop+0xa20>)
   b7890:	a827      	add	r0, sp, #156	; 0x9c
   b7892:	f7fd f851 	bl	b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7896:	b118      	cbz	r0, b78a0 <loop+0x898>
            Wire.beginTransmission(greenLineCTAAdr[0]);
   b7898:	f003 fe20 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b789c:	6821      	ldr	r1, [r4, #0]
   b789e:	e5a9      	b.n	b73f4 <loop+0x3ec>
            Wire.beginTransmission(greenLineCTAAdr[1]);
   b78a0:	f003 fe1c 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b78a4:	6861      	ldr	r1, [r4, #4]
   b78a6:	e5a5      	b.n	b73f4 <loop+0x3ec>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b78a8:	f003 fe18 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b78ac:	4b5f      	ldr	r3, [pc, #380]	; (b7a2c <loop+0xa24>)
   b78ae:	681b      	ldr	r3, [r3, #0]
   b78b0:	5999      	ldr	r1, [r3, r6]
   b78b2:	e59f      	b.n	b73f4 <loop+0x3ec>
            else if(currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name){
   b78b4:	f109 0130 	add.w	r1, r9, #48	; 0x30
   b78b8:	a827      	add	r0, sp, #156	; 0x9c
   b78ba:	f7fd f83d 	bl	b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b78be:	b920      	cbnz	r0, b78ca <loop+0x8c2>
   b78c0:	4954      	ldr	r1, [pc, #336]	; (b7a14 <loop+0xa0c>)
   b78c2:	a827      	add	r0, sp, #156	; 0x9c
   b78c4:	f7fd f838 	bl	b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b78c8:	b198      	cbz	r0, b78f2 <loop+0x8ea>
   b78ca:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b78ce:	e9d2 2300 	ldrd	r2, r3, [r2]
   b78d2:	1a9b      	subs	r3, r3, r2
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b78d4:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b78d8:	f080 80ae 	bcs.w	b7a38 <loop+0xa30>
                Wire.write((char)currentRailway.outputs[0][j] + '0');
   b78dc:	f003 fdfe 	bl	bb4dc <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b78e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b78e2:	681b      	ldr	r3, [r3, #0]
   b78e4:	f813 1024 	ldrb.w	r1, [r3, r4, lsl #2]
   b78e8:	3130      	adds	r1, #48	; 0x30
   b78ea:	f7fc fc99 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b78ee:	3401      	adds	r4, #1
   b78f0:	e7eb      	b.n	b78ca <loop+0x8c2>
   b78f2:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b78f6:	e9d2 2300 	ldrd	r2, r3, [r2]
   b78fa:	1a9b      	subs	r3, r3, r2
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b78fc:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b7900:	f080 809a 	bcs.w	b7a38 <loop+0xa30>
                Wire.write('0');
   b7904:	f003 fdea 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b7908:	2130      	movs	r1, #48	; 0x30
   b790a:	f7fc fc89 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b790e:	3401      	adds	r4, #1
   b7910:	e7ef      	b.n	b78f2 <loop+0x8ea>
          if(i == 1 && (currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name)){
   b7912:	2d01      	cmp	r5, #1
   b7914:	f040 80c2 	bne.w	b7a9c <loop+0xa94>
   b7918:	493f      	ldr	r1, [pc, #252]	; (b7a18 <loop+0xa10>)
   b791a:	a827      	add	r0, sp, #156	; 0x9c
   b791c:	f7fd f80c 	bl	b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7920:	b930      	cbnz	r0, b7930 <loop+0x928>
   b7922:	493c      	ldr	r1, [pc, #240]	; (b7a14 <loop+0xa0c>)
   b7924:	a827      	add	r0, sp, #156	; 0x9c
   b7926:	f7fd f807 	bl	b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b792a:	2800      	cmp	r0, #0
   b792c:	f000 8084 	beq.w	b7a38 <loop+0xa30>
	return *(this->_M_impl._M_start + __n);
   b7930:	9a24      	ldr	r2, [sp, #144]	; 0x90
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7932:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
   b7936:	1a9b      	subs	r3, r3, r2
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b7938:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b793c:	d27c      	bcs.n	b7a38 <loop+0xa30>
              Wire.write('0');
   b793e:	f003 fdcd 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b7942:	2130      	movs	r1, #48	; 0x30
   b7944:	f7fc fc6c 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b7948:	3401      	adds	r4, #1
   b794a:	e7f1      	b.n	b7930 <loop+0x928>
          }else if(i == 3 && currentRailway.name == pinkLineCTA.name){
   b794c:	492d      	ldr	r1, [pc, #180]	; (b7a04 <loop+0x9fc>)
   b794e:	a827      	add	r0, sp, #156	; 0x9c
   b7950:	f7fc fff2 	bl	b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7954:	2800      	cmp	r0, #0
   b7956:	d06f      	beq.n	b7a38 <loop+0xa30>
	return *(this->_M_impl._M_start + __n);
   b7958:	f8df 90d4 	ldr.w	r9, [pc, #212]	; b7a30 <loop+0xa28>
   b795c:	f8df b0d4 	ldr.w	fp, [pc, #212]	; b7a34 <loop+0xa2c>
   b7960:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
   b7964:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7968:	e9d0 3200 	ldrd	r3, r2, [r0]
   b796c:	1ad2      	subs	r2, r2, r3
   b796e:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b7972:	1a5b      	subs	r3, r3, r1
   b7974:	109b      	asrs	r3, r3, #2
            for(int j = 0; j < greenLineCTA.outputs[0].size() - pinkLineCTA.outputs[3].size(); j++){
   b7976:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b797a:	42a3      	cmp	r3, r4
   b797c:	d95c      	bls.n	b7a38 <loop+0xa30>
              Wire.write('0');
   b797e:	f003 fdad 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b7982:	2130      	movs	r1, #48	; 0x30
   b7984:	f7fc fc4c 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < greenLineCTA.outputs[0].size() - pinkLineCTA.outputs[3].size(); j++){
   b7988:	3401      	adds	r4, #1
   b798a:	e7e9      	b.n	b7960 <loop+0x958>
            val = n;
   b798c:	4619      	mov	r1, r3
   b798e:	e07e      	b.n	b7a8e <loop+0xa86>
        Serial.println();
   b7990:	f003 fc56 	bl	bb240 <_Z16_fetch_usbserialv>
   b7994:	f002 febd 	bl	ba712 <_ZN5Print7printlnEv>
      for(int i = 0; i < 4; i++){
   b7998:	3501      	adds	r5, #1
        Wire.endTransmission();
   b799a:	f003 fd9f 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b799e:	f002 fd3e 	bl	ba41e <_ZN7TwoWire15endTransmissionEv>
      for(int i = 0; i < 4; i++){
   b79a2:	2d04      	cmp	r5, #4
   b79a4:	f106 0604 	add.w	r6, r6, #4
   b79a8:	f47f acde 	bne.w	b7368 <loop+0x360>
   b79ac:	2300      	movs	r3, #0
          currentRailway.outputs[i][j] = 0;
   b79ae:	461c      	mov	r4, r3
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b79b0:	2200      	movs	r2, #0
	return *(this->_M_impl._M_start + __n);
   b79b2:	9924      	ldr	r1, [sp, #144]	; 0x90
   b79b4:	18cd      	adds	r5, r1, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b79b6:	58c8      	ldr	r0, [r1, r3]
   b79b8:	6869      	ldr	r1, [r5, #4]
   b79ba:	1a09      	subs	r1, r1, r0
   b79bc:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
   b79c0:	d203      	bcs.n	b79ca <loop+0x9c2>
          currentRailway.outputs[i][j] = 0;
   b79c2:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b79c6:	3201      	adds	r2, #1
   b79c8:	e7f3      	b.n	b79b2 <loop+0x9aa>
      for(int i = 0; i < 4; i++){
   b79ca:	330c      	adds	r3, #12
   b79cc:	2b30      	cmp	r3, #48	; 0x30
   b79ce:	d1ef      	bne.n	b79b0 <loop+0x9a8>
      Serial.println();
   b79d0:	f003 fc36 	bl	bb240 <_Z16_fetch_usbserialv>
   b79d4:	f002 fe9d 	bl	ba712 <_ZN5Print7printlnEv>
      }
   b79d8:	a807      	add	r0, sp, #28
   b79da:	f7fc feb7 	bl	b474c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      Railway currentRailway = cities[cityIndexBuffer].railways[j];
   b79de:	a81b      	add	r0, sp, #108	; 0x6c
   b79e0:	f7fd fb3c 	bl	b505c <_ZN7RailwayD1Ev>
    for(int j = 0; j < cities[cityIndexBuffer].railways.size(); j++){
   b79e4:	9b02      	ldr	r3, [sp, #8]
   b79e6:	3301      	adds	r3, #1
   b79e8:	9302      	str	r3, [sp, #8]
   b79ea:	f7ff bb43 	b.w	b7074 <loop+0x6c>
    Serial.println();
   b79ee:	f003 fc27 	bl	bb240 <_Z16_fetch_usbserialv>
}
   b79f2:	b037      	add	sp, #220	; 0xdc
   b79f4:	ecbd 8b06 	vpop	{d8-d10}
   b79f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Serial.println();
   b79fc:	f002 be89 	b.w	ba712 <_ZN5Print7printlnEv>
   b7a00:	20035454 	.word	0x20035454
   b7a04:	2003e4ac 	.word	0x2003e4ac
   b7a08:	2003556c 	.word	0x2003556c
   b7a0c:	20037e08 	.word	0x20037e08
   b7a10:	20037dd8 	.word	0x20037dd8
   b7a14:	2003e518 	.word	0x2003e518
   b7a18:	20035408 	.word	0x20035408
   b7a1c:	20037e74 	.word	0x20037e74
   b7a20:	20035494 	.word	0x20035494
   b7a24:	2003e5f0 	.word	0x2003e5f0
   b7a28:	200355a8 	.word	0x200355a8
   b7a2c:	2003e694 	.word	0x2003e694
   b7a30:	2003553c 	.word	0x2003553c
   b7a34:	2003e47c 	.word	0x2003e47c
        Serial.printf("%s rail part %i: ", currentRailway.name.c_str(), i);
   b7a38:	f003 fc02 	bl	bb240 <_Z16_fetch_usbserialv>
   b7a3c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   b7a3e:	492b      	ldr	r1, [pc, #172]	; (b7aec <loop+0xae4>)
   b7a40:	462b      	mov	r3, r5
   b7a42:	f7fc fcd5 	bl	b43f0 <_ZN5Print6printfEPKcz>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b7a46:	240c      	movs	r4, #12
   b7a48:	436c      	muls	r4, r5
   b7a4a:	f04f 0900 	mov.w	r9, #0
	return *(this->_M_impl._M_start + __n);
   b7a4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   b7a50:	1913      	adds	r3, r2, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7a52:	5912      	ldr	r2, [r2, r4]
   b7a54:	685b      	ldr	r3, [r3, #4]
   b7a56:	1a9b      	subs	r3, r3, r2
   b7a58:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
   b7a5c:	d298      	bcs.n	b7990 <loop+0x988>
          Wire.write((char)currentRailway.outputs[i][j] + '0');
   b7a5e:	f003 fd3d 	bl	bb4dc <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b7a62:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b7a64:	591b      	ldr	r3, [r3, r4]
   b7a66:	f813 1029 	ldrb.w	r1, [r3, r9, lsl #2]
   b7a6a:	3130      	adds	r1, #48	; 0x30
   b7a6c:	f7fc fbd8 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
          Serial.print(currentRailway.outputs[i][j]);
   b7a70:	f003 fbe6 	bl	bb240 <_Z16_fetch_usbserialv>
   b7a74:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b7a76:	591b      	ldr	r3, [r3, r4]
   b7a78:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
        if (n < 0 && base == 10) {
   b7a7c:	2b00      	cmp	r3, #0
   b7a7e:	4683      	mov	fp, r0
   b7a80:	da84      	bge.n	b798c <loop+0x984>
            t = print('-');
   b7a82:	212d      	movs	r1, #45	; 0x2d
   b7a84:	9303      	str	r3, [sp, #12]
   b7a86:	f002 fe41 	bl	ba70c <_ZN5Print5printEc>
            val = -n;
   b7a8a:	9b03      	ldr	r3, [sp, #12]
   b7a8c:	4259      	negs	r1, r3
        return printNumber(val, base) + t;
   b7a8e:	220a      	movs	r2, #10
   b7a90:	4658      	mov	r0, fp
   b7a92:	f002 fe54 	bl	ba73e <_ZN5Print11printNumberEmh>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b7a96:	f109 0901 	add.w	r9, r9, #1
   b7a9a:	e7d8      	b.n	b7a4e <loop+0xa46>
          if(i == 3 && currentRailway.name == orangeLineCTA.name){
   b7a9c:	2d03      	cmp	r5, #3
   b7a9e:	d1cb      	bne.n	b7a38 <loop+0xa30>
   b7aa0:	4913      	ldr	r1, [pc, #76]	; (b7af0 <loop+0xae8>)
   b7aa2:	a827      	add	r0, sp, #156	; 0x9c
   b7aa4:	f7fc ff48 	bl	b4938 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7aa8:	2800      	cmp	r0, #0
   b7aaa:	f43f af4f 	beq.w	b794c <loop+0x944>
   b7aae:	f8df 9044 	ldr.w	r9, [pc, #68]	; b7af4 <loop+0xaec>
   b7ab2:	f8df b044 	ldr.w	fp, [pc, #68]	; b7af8 <loop+0xaf0>
   b7ab6:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
   b7aba:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7abe:	e9d0 3200 	ldrd	r3, r2, [r0]
   b7ac2:	1ad2      	subs	r2, r2, r3
   b7ac4:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b7ac8:	1a5b      	subs	r3, r3, r1
   b7aca:	109b      	asrs	r3, r3, #2
            for(int j = 0; j < greenLineCTA.outputs[0].size() - orangeLineCTA.outputs[3].size(); j++){
   b7acc:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b7ad0:	42a3      	cmp	r3, r4
   b7ad2:	d9b1      	bls.n	b7a38 <loop+0xa30>
              Wire.write('0');
   b7ad4:	f003 fd02 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b7ad8:	2130      	movs	r1, #48	; 0x30
   b7ada:	f7fc fba1 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < greenLineCTA.outputs[0].size() - orangeLineCTA.outputs[3].size(); j++){
   b7ade:	3401      	adds	r4, #1
   b7ae0:	e7e9      	b.n	b7ab6 <loop+0xaae>
}
   b7ae2:	b037      	add	sp, #220	; 0xdc
   b7ae4:	ecbd 8b06 	vpop	{d8-d10}
   b7ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7aec:	000bea74 	.word	0x000bea74
   b7af0:	20037e08 	.word	0x20037e08
   b7af4:	2003553c 	.word	0x2003553c
   b7af8:	20037dd8 	.word	0x20037dd8

000b7afc <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b7afc:	b510      	push	{r4, lr}
   b7afe:	4604      	mov	r4, r0
   b7b00:	f003 fad0 	bl	bb0a4 <_ZN9TCPClientC1Ev>
{

}
   b7b04:	4620      	mov	r0, r4
   b7b06:	bd10      	pop	{r4, pc}

000b7b08 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b7b08:	b538      	push	{r3, r4, r5, lr}
   b7b0a:	4604      	mov	r4, r0
   b7b0c:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b7b0e:	f002 fdf9 	bl	ba704 <_ZN5Print5printEPKc>
    client.print(": ");
   b7b12:	4905      	ldr	r1, [pc, #20]	; (b7b28 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b7b14:	4620      	mov	r0, r4
   b7b16:	f002 fdf5 	bl	ba704 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b7b1a:	4629      	mov	r1, r5
   b7b1c:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b7b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b7b22:	f002 be02 	b.w	ba72a <_ZN5Print7printlnEPKc>
   b7b26:	bf00      	nop
   b7b28:	000be756 	.word	0x000be756

000b7b2c <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b7b2c:	b538      	push	{r3, r4, r5, lr}
   b7b2e:	4605      	mov	r5, r0
   b7b30:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b7b32:	f002 fde7 	bl	ba704 <_ZN5Print5printEPKc>
    client.print(": ");
   b7b36:	490b      	ldr	r1, [pc, #44]	; (b7b64 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b7b38:	4628      	mov	r0, r5
   b7b3a:	f002 fde3 	bl	ba704 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b7b3e:	2c00      	cmp	r4, #0
   b7b40:	da0d      	bge.n	b7b5e <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b7b42:	212d      	movs	r1, #45	; 0x2d
   b7b44:	4628      	mov	r0, r5
   b7b46:	f002 fde1 	bl	ba70c <_ZN5Print5printEc>
            val = -n;
   b7b4a:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b7b4c:	4628      	mov	r0, r5
   b7b4e:	220a      	movs	r2, #10
   b7b50:	f002 fdf5 	bl	ba73e <_ZN5Print11printNumberEmh>
        n += println();
   b7b54:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b7b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7b5a:	f002 bdda 	b.w	ba712 <_ZN5Print7printlnEv>
            val = n;
   b7b5e:	4621      	mov	r1, r4
   b7b60:	e7f4      	b.n	b7b4c <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b7b62:	bf00      	nop
   b7b64:	000be756 	.word	0x000be756

000b7b68 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b7b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7b6c:	460e      	mov	r6, r1
   b7b6e:	b091      	sub	sp, #68	; 0x44
   b7b70:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b7b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7b76:	6013      	str	r3, [r2, #0]
{
   b7b78:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b7b7a:	2100      	movs	r1, #0
   b7b7c:	4630      	mov	r0, r6
   b7b7e:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b7b82:	4617      	mov	r7, r2
   b7b84:	f002 ff53 	bl	baa2e <_ZNK6String6equalsEPKc>
   b7b88:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b7b8c:	4603      	mov	r3, r0
   b7b8e:	b998      	cbnz	r0, b7bb8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b7b90:	f1be 0f00 	cmp.w	lr, #0
   b7b94:	bf14      	ite	ne
   b7b96:	4672      	movne	r2, lr
   b7b98:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b7b9a:	6831      	ldr	r1, [r6, #0]
   b7b9c:	b292      	uxth	r2, r2
   b7b9e:	4620      	mov	r0, r4
   b7ba0:	f003 f880 	bl	baca4 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b7ba4:	1e05      	subs	r5, r0, #0
   b7ba6:	bf18      	it	ne
   b7ba8:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b7baa:	b9c5      	cbnz	r5, b7bde <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b7bac:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b7bae:	b011      	add	sp, #68	; 0x44
   b7bb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b7bb4:	f003 ba2c 	b.w	bb010 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b7bb8:	4b76      	ldr	r3, [pc, #472]	; (b7d94 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b7bba:	930a      	str	r3, [sp, #40]	; 0x28
   b7bbc:	f106 0c14 	add.w	ip, r6, #20
   b7bc0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7bc4:	ad0b      	add	r5, sp, #44	; 0x2c
   b7bc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7bc8:	f8dc 3000 	ldr.w	r3, [ip]
   b7bcc:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b7bce:	fa1f f28e 	uxth.w	r2, lr
   b7bd2:	2300      	movs	r3, #0
   b7bd4:	a90a      	add	r1, sp, #40	; 0x28
   b7bd6:	4620      	mov	r0, r4
   b7bd8:	f003 f944 	bl	bae64 <_ZN9TCPClient7connectE9IPAddresstm>
   b7bdc:	e7e2      	b.n	b7ba4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b7bde:	4649      	mov	r1, r9
   b7be0:	4620      	mov	r0, r4
   b7be2:	f002 fd8f 	bl	ba704 <_ZN5Print5printEPKc>
    client.print(" ");
   b7be6:	496c      	ldr	r1, [pc, #432]	; (b7d98 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b7be8:	4620      	mov	r0, r4
   b7bea:	f002 fd8b 	bl	ba704 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b7bee:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b7bf0:	4620      	mov	r0, r4
   b7bf2:	f002 fd87 	bl	ba704 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b7bf6:	4969      	ldr	r1, [pc, #420]	; (b7d9c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b7bf8:	4620      	mov	r0, r4
   b7bfa:	f002 fd83 	bl	ba704 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b7bfe:	4968      	ldr	r1, [pc, #416]	; (b7da0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b7c00:	4a68      	ldr	r2, [pc, #416]	; (b7da4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b7c02:	4620      	mov	r0, r4
   b7c04:	f7ff ff80 	bl	b7b08 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b7c08:	2100      	movs	r1, #0
   b7c0a:	4630      	mov	r0, r6
   b7c0c:	f002 ff0f 	bl	baa2e <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b7c10:	b920      	cbnz	r0, b7c1c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b7c12:	6832      	ldr	r2, [r6, #0]
   b7c14:	4964      	ldr	r1, [pc, #400]	; (b7da8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b7c16:	4620      	mov	r0, r4
   b7c18:	f7ff ff76 	bl	b7b08 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b7c1c:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b7c20:	2100      	movs	r1, #0
   b7c22:	4650      	mov	r0, sl
   b7c24:	f002 ff03 	bl	baa2e <_ZNK6String6equalsEPKc>
   b7c28:	b928      	cbnz	r0, b7c36 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b7c2a:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b7c2c:	495f      	ldr	r1, [pc, #380]	; (b7dac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b7c2e:	4620      	mov	r0, r4
   b7c30:	f7ff ff7c 	bl	b7b2c <_ZN10HttpClient10sendHeaderEPKci>
   b7c34:	e006      	b.n	b7c44 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b7c36:	495e      	ldr	r1, [pc, #376]	; (b7db0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b7c38:	4648      	mov	r0, r9
   b7c3a:	f004 fcfb 	bl	bc634 <strcmp>
   b7c3e:	4602      	mov	r2, r0
   b7c40:	2800      	cmp	r0, #0
   b7c42:	d0f3      	beq.n	b7c2c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b7c44:	f1b8 0f00 	cmp.w	r8, #0
   b7c48:	d00e      	beq.n	b7c68 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b7c4a:	f8d8 1000 	ldr.w	r1, [r8]
   b7c4e:	b159      	cbz	r1, b7c68 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b7c50:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b7c54:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b7c56:	b122      	cbz	r2, b7c62 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b7c58:	f7ff ff56 	bl	b7b08 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b7c5c:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b7c60:	e7f3      	b.n	b7c4a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b7c62:	f002 fd62 	bl	ba72a <_ZN5Print7printlnEPKc>
}
   b7c66:	e7f9      	b.n	b7c5c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b7c68:	4620      	mov	r0, r4
   b7c6a:	f002 fd52 	bl	ba712 <_ZN5Print7printlnEv>
    client.flush();
   b7c6e:	4620      	mov	r0, r4
   b7c70:	f002 ff78 	bl	bab64 <_ZN9TCPClient5flushEv>
   b7c74:	2100      	movs	r1, #0
   b7c76:	4650      	mov	r0, sl
   b7c78:	f002 fed9 	bl	baa2e <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b7c7c:	b918      	cbnz	r0, b7c86 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b7c7e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b7c80:	4620      	mov	r0, r4
   b7c82:	f002 fd52 	bl	ba72a <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b7c86:	f104 0a1c 	add.w	sl, r4, #28
   b7c8a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   b7c8e:	2100      	movs	r1, #0
   b7c90:	4650      	mov	r0, sl
   b7c92:	f004 fc99 	bl	bc5c8 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7c96:	f000 ff35 	bl	b8b04 <HAL_Timer_Get_Milli_Seconds>
   b7c9a:	9001      	str	r0, [sp, #4]
   b7c9c:	f000 ff32 	bl	b8b04 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b7ca0:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b7ca4:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b7ca6:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b7caa:	4620      	mov	r0, r4
   b7cac:	f003 f956 	bl	baf5c <_ZN9TCPClient9availableEv>
   b7cb0:	b1e8      	cbz	r0, b7cee <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   b7cb2:	4620      	mov	r0, r4
   b7cb4:	f002 ff3c 	bl	bab30 <_ZN9TCPClient4readEv>
   b7cb8:	4681      	mov	r9, r0
   b7cba:	f000 ff23 	bl	b8b04 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b7cbe:	f242 73fe 	movw	r3, #10238	; 0x27fe
   b7cc2:	429e      	cmp	r6, r3
   b7cc4:	9001      	str	r0, [sp, #4]
   b7cc6:	d804      	bhi.n	b7cd2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b7cc8:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b7cca:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b7cce:	3601      	adds	r6, #1
        while (client.available()) {
   b7cd0:	e7eb      	b.n	b7caa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b7cd2:	f242 73ff 	movw	r3, #10239	; 0x27ff
   b7cd6:	429e      	cmp	r6, r3
   b7cd8:	d1f9      	bne.n	b7cce <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b7cda:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   b7cde:	2200      	movs	r2, #0
   b7ce0:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
                client.stop();
   b7ce4:	4620      	mov	r0, r4
   b7ce6:	f003 f993 	bl	bb010 <_ZN9TCPClient4stopEv>
                error = true;
   b7cea:	46a8      	mov	r8, r5
   b7cec:	e7ef      	b.n	b7cce <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b7cee:	19a3      	adds	r3, r4, r6
   b7cf0:	7718      	strb	r0, [r3, #28]
   b7cf2:	f000 ff07 	bl	b8b04 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b7cf6:	9b01      	ldr	r3, [sp, #4]
   b7cf8:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b7cfc:	f1b8 0f00 	cmp.w	r8, #0
   b7d00:	d104      	bne.n	b7d0c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
   b7d02:	45d9      	cmp	r9, fp
   b7d04:	d802      	bhi.n	b7d0c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
            delay(200);
   b7d06:	20c8      	movs	r0, #200	; 0xc8
   b7d08:	f001 f920 	bl	b8f4c <delay>
    } while (client.connected() && !timeout && !error);
   b7d0c:	4620      	mov	r0, r4
   b7d0e:	f003 f847 	bl	bada0 <_ZN9TCPClient9connectedEv>
   b7d12:	b120      	cbz	r0, b7d1e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b7d14:	45d9      	cmp	r9, fp
   b7d16:	d802      	bhi.n	b7d1e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b7d18:	f1b8 0f00 	cmp.w	r8, #0
   b7d1c:	d0c5      	beq.n	b7caa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b7d1e:	4620      	mov	r0, r4
   b7d20:	f003 f976 	bl	bb010 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b7d24:	4651      	mov	r1, sl
   b7d26:	a802      	add	r0, sp, #8
   b7d28:	f002 fda9 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b7d2c:	230c      	movs	r3, #12
   b7d2e:	2209      	movs	r2, #9
   b7d30:	a902      	add	r1, sp, #8
   b7d32:	a806      	add	r0, sp, #24
   b7d34:	f002 fea0 	bl	baa78 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b7d38:	491e      	ldr	r1, [pc, #120]	; (b7db4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b7d3a:	a80a      	add	r0, sp, #40	; 0x28
   b7d3c:	f002 fd9f 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
   b7d40:	a90a      	add	r1, sp, #40	; 0x28
   b7d42:	a802      	add	r0, sp, #8
   b7d44:	f002 fe94 	bl	baa70 <_ZNK6String7indexOfERKS_>
   b7d48:	4604      	mov	r4, r0
   b7d4a:	a80a      	add	r0, sp, #40	; 0x28
   b7d4c:	f002 fd4c 	bl	ba7e8 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b7d50:	1c63      	adds	r3, r4, #1
   b7d52:	d108      	bne.n	b7d66 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fe>
    String statusCode = raw_response.substring(9,12);
   b7d54:	a806      	add	r0, sp, #24
   b7d56:	f002 fd47 	bl	ba7e8 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b7d5a:	a802      	add	r0, sp, #8
   b7d5c:	f002 fd44 	bl	ba7e8 <_ZN6StringD1Ev>
}
   b7d60:	b011      	add	sp, #68	; 0x44
   b7d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b7d66:	1d3d      	adds	r5, r7, #4
   b7d68:	4913      	ldr	r1, [pc, #76]	; (b7db8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b7d6a:	4628      	mov	r0, r5
   b7d6c:	f002 fdcf 	bl	ba90e <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b7d70:	1d22      	adds	r2, r4, #4
   b7d72:	a902      	add	r1, sp, #8
   b7d74:	a80a      	add	r0, sp, #40	; 0x28
   b7d76:	f002 fe9f 	bl	baab8 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b7d7a:	a90a      	add	r1, sp, #40	; 0x28
   b7d7c:	4628      	mov	r0, r5
   b7d7e:	f002 fe02 	bl	ba986 <_ZN6String6concatERKS_>
   b7d82:	a80a      	add	r0, sp, #40	; 0x28
   b7d84:	f002 fd30 	bl	ba7e8 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b7d88:	9806      	ldr	r0, [sp, #24]
   b7d8a:	f004 fbe1 	bl	bc550 <atoi>
   b7d8e:	6038      	str	r0, [r7, #0]
   b7d90:	e7e0      	b.n	b7d54 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ec>
   b7d92:	bf00      	nop
   b7d94:	000beebc 	.word	0x000beebc
   b7d98:	000be9f0 	.word	0x000be9f0
   b7d9c:	000bec00 	.word	0x000bec00
   b7da0:	000bec12 	.word	0x000bec12
   b7da4:	000bec0c 	.word	0x000bec0c
   b7da8:	000bec1d 	.word	0x000bec1d
   b7dac:	000bec22 	.word	0x000bec22
   b7db0:	000bec31 	.word	0x000bec31
   b7db4:	000bec36 	.word	0x000bec36
   b7db8:	000bec3a 	.word	0x000bec3a

000b7dbc <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   b7dbc:	4770      	bx	lr

000b7dbe <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   b7dbe:	b510      	push	{r4, lr}
}
   b7dc0:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   b7dc2:	4604      	mov	r4, r0
}
   b7dc4:	f7fc f96d 	bl	b40a2 <_ZdlPvj>
   b7dc8:	4620      	mov	r0, r4
   b7dca:	bd10      	pop	{r4, pc}

000b7dcc <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   b7dcc:	b510      	push	{r4, lr}
   b7dce:	4b05      	ldr	r3, [pc, #20]	; (b7de4 <_ZN10JsonBufferD1Ev+0x18>)
   b7dd0:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b7dd2:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b7dd4:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b7dd6:	b91b      	cbnz	r3, b7de0 <_ZN10JsonBufferD1Ev+0x14>
   b7dd8:	6840      	ldr	r0, [r0, #4]
   b7dda:	b108      	cbz	r0, b7de0 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b7ddc:	f001 f86e 	bl	b8ebc <free>
}
   b7de0:	4620      	mov	r0, r4
   b7de2:	bd10      	pop	{r4, pc}
   b7de4:	000bec48 	.word	0x000bec48

000b7de8 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b7de8:	b510      	push	{r4, lr}
   b7dea:	4604      	mov	r4, r0
}
   b7dec:	f7ff ffee 	bl	b7dcc <_ZN10JsonBufferD1Ev>
   b7df0:	4620      	mov	r0, r4
   b7df2:	2114      	movs	r1, #20
   b7df4:	f7fc f955 	bl	b40a2 <_ZdlPvj>
   b7df8:	4620      	mov	r0, r4
   b7dfa:	bd10      	pop	{r4, pc}

000b7dfc <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b7dfc:	b510      	push	{r4, lr}
   b7dfe:	4b07      	ldr	r3, [pc, #28]	; (b7e1c <_ZN10JsonParserD1Ev+0x20>)
   b7e00:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b7e02:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b7e04:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b7e06:	b91b      	cbnz	r3, b7e10 <_ZN10JsonParserD1Ev+0x14>
   b7e08:	6940      	ldr	r0, [r0, #20]
   b7e0a:	b108      	cbz	r0, b7e10 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b7e0c:	f001 f856 	bl	b8ebc <free>
JsonParser::~JsonParser() {
   b7e10:	4620      	mov	r0, r4
   b7e12:	f7ff ffdb 	bl	b7dcc <_ZN10JsonBufferD1Ev>
}
   b7e16:	4620      	mov	r0, r4
   b7e18:	bd10      	pop	{r4, pc}
   b7e1a:	bf00      	nop
   b7e1c:	000bec58 	.word	0x000bec58

000b7e20 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b7e20:	b510      	push	{r4, lr}
   b7e22:	4604      	mov	r4, r0
}
   b7e24:	f7ff ffea 	bl	b7dfc <_ZN10JsonParserD1Ev>
   b7e28:	4620      	mov	r0, r4
   b7e2a:	212c      	movs	r1, #44	; 0x2c
   b7e2c:	f7fc f939 	bl	b40a2 <_ZdlPvj>
   b7e30:	4620      	mov	r0, r4
   b7e32:	bd10      	pop	{r4, pc}

000b7e34 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b7e34:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b7e36:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b7e38:	4604      	mov	r4, r0
   b7e3a:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b7e3c:	b10b      	cbz	r3, b7e42 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b7e3e:	2000      	movs	r0, #0
}
   b7e40:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b7e42:	6840      	ldr	r0, [r0, #4]
   b7e44:	b138      	cbz	r0, b7e56 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b7e46:	f001 f841 	bl	b8ecc <realloc>
		if (newBuffer) {
   b7e4a:	2800      	cmp	r0, #0
   b7e4c:	d0f7      	beq.n	b7e3e <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b7e4e:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b7e52:	2001      	movs	r0, #1
   b7e54:	e7f4      	b.n	b7e40 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b7e56:	4608      	mov	r0, r1
   b7e58:	f001 f828 	bl	b8eac <malloc>
   b7e5c:	e7f5      	b.n	b7e4a <_ZN10JsonBuffer8allocateEj+0x16>

000b7e5e <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7e5e:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7e60:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7e62:	460e      	mov	r6, r1
   b7e64:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7e66:	18d1      	adds	r1, r2, r3
   b7e68:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7e6a:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7e6c:	b172      	cbz	r2, b7e8c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b7e6e:	6882      	ldr	r2, [r0, #8]
   b7e70:	428a      	cmp	r2, r1
   b7e72:	d30b      	bcc.n	b7e8c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b7e74:	6860      	ldr	r0, [r4, #4]
   b7e76:	68e3      	ldr	r3, [r4, #12]
   b7e78:	462a      	mov	r2, r5
   b7e7a:	4631      	mov	r1, r6
   b7e7c:	4418      	add	r0, r3
   b7e7e:	f004 fb7b 	bl	bc578 <memcpy>
	offset += dataLen;
   b7e82:	68e2      	ldr	r2, [r4, #12]
   b7e84:	442a      	add	r2, r5
   b7e86:	60e2      	str	r2, [r4, #12]
	return true;
   b7e88:	2001      	movs	r0, #1
}
   b7e8a:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b7e8c:	4620      	mov	r0, r4
   b7e8e:	f7ff ffd1 	bl	b7e34 <_ZN10JsonBuffer8allocateEj>
   b7e92:	2800      	cmp	r0, #0
   b7e94:	d1ee      	bne.n	b7e74 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b7e96:	e7f8      	b.n	b7e8a <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b7e98 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b7e98:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b7e9a:	2100      	movs	r1, #0
   b7e9c:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b7e9e:	b123      	cbz	r3, b7eaa <_ZN10JsonBuffer5clearEv+0x12>
   b7ea0:	6882      	ldr	r2, [r0, #8]
   b7ea2:	b112      	cbz	r2, b7eaa <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b7ea4:	4618      	mov	r0, r3
   b7ea6:	f004 bb8f 	b.w	bc5c8 <memset>
}
   b7eaa:	4770      	bx	lr

000b7eac <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b7eac:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b7eae:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b7eb2:	2200      	movs	r2, #0
   b7eb4:	60c2      	str	r2, [r0, #12]
   b7eb6:	2201      	movs	r2, #1
   b7eb8:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b7eba:	6143      	str	r3, [r0, #20]
   b7ebc:	4a02      	ldr	r2, [pc, #8]	; (b7ec8 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b7ebe:	9b02      	ldr	r3, [sp, #8]
   b7ec0:	6002      	str	r2, [r0, #0]
   b7ec2:	61c3      	str	r3, [r0, #28]
}
   b7ec4:	bd10      	pop	{r4, pc}
   b7ec6:	bf00      	nop
   b7ec8:	000bec58 	.word	0x000bec58

000b7ecc <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   b7ecc:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   b7ed0:	429a      	cmp	r2, r3
   b7ed2:	4b04      	ldr	r3, [pc, #16]	; (b7ee4 <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b7ed4:	bf38      	it	cc
   b7ed6:	6082      	strcc	r2, [r0, #8]
   b7ed8:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7edc:	bf24      	itt	cs
   b7ede:	2300      	movcs	r3, #0
   b7ee0:	6083      	strcs	r3, [r0, #8]
}
   b7ee2:	4770      	bx	lr
   b7ee4:	000bec68 	.word	0x000bec68

000b7ee8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b7ee8:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b7eea:	6813      	ldr	r3, [r2, #0]
   b7eec:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b7eee:	6813      	ldr	r3, [r2, #0]
   b7ef0:	f103 0410 	add.w	r4, r3, #16
   b7ef4:	6014      	str	r4, [r2, #0]
   b7ef6:	6986      	ldr	r6, [r0, #24]
   b7ef8:	42b4      	cmp	r4, r6
   b7efa:	d20a      	bcs.n	b7f12 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b7efc:	699b      	ldr	r3, [r3, #24]
   b7efe:	688c      	ldr	r4, [r1, #8]
   b7f00:	42a3      	cmp	r3, r4
   b7f02:	da01      	bge.n	b7f08 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b7f04:	42ab      	cmp	r3, r5
   b7f06:	ddf2      	ble.n	b7eee <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b7f08:	42a3      	cmp	r3, r4
   b7f0a:	bfcc      	ite	gt
   b7f0c:	2000      	movgt	r0, #0
   b7f0e:	2001      	movle	r0, #1
   b7f10:	e000      	b.n	b7f14 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b7f12:	2000      	movs	r0, #0
}
   b7f14:	bd70      	pop	{r4, r5, r6, pc}

000b7f16 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b7f16:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7f1a:	9d08      	ldr	r5, [sp, #32]
   b7f1c:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7f1e:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b7f22:	4604      	mov	r4, r0
   b7f24:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7f26:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7f28:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b7f2a:	9801      	ldr	r0, [sp, #4]
   b7f2c:	69a3      	ldr	r3, [r4, #24]
   b7f2e:	4283      	cmp	r3, r0
   b7f30:	d91a      	bls.n	b7f68 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b7f32:	6882      	ldr	r2, [r0, #8]
   b7f34:	688b      	ldr	r3, [r1, #8]
   b7f36:	429a      	cmp	r2, r3
   b7f38:	da16      	bge.n	b7f68 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b7f3a:	42ae      	cmp	r6, r5
   b7f3c:	d10b      	bne.n	b7f56 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b7f3e:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b7f40:	aa01      	add	r2, sp, #4
   b7f42:	4620      	mov	r0, r4
   b7f44:	f7ff ffd0 	bl	b7ee8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b7f48:	b128      	cbz	r0, b7f56 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b7f4a:	9b01      	ldr	r3, [sp, #4]
   b7f4c:	f8c8 3000 	str.w	r3, [r8]
}
   b7f50:	b002      	add	sp, #8
   b7f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b7f56:	aa01      	add	r2, sp, #4
   b7f58:	4620      	mov	r0, r4
   b7f5a:	f7ff ffc5 	bl	b7ee8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b7f5e:	4620      	mov	r0, r4
		index++;
   b7f60:	3601      	adds	r6, #1
		skipObject(container, token);
   b7f62:	f7ff ffc1 	bl	b7ee8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7f66:	e7e0      	b.n	b7f2a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b7f68:	2000      	movs	r0, #0
   b7f6a:	e7f1      	b.n	b7f50 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b7f6c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7f6e:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7f70:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7f74:	4604      	mov	r4, r0
   b7f76:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7f78:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7f7a:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b7f7c:	9b01      	ldr	r3, [sp, #4]
   b7f7e:	69a2      	ldr	r2, [r4, #24]
   b7f80:	429a      	cmp	r2, r3
   b7f82:	d90f      	bls.n	b7fa4 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b7f84:	6898      	ldr	r0, [r3, #8]
   b7f86:	688a      	ldr	r2, [r1, #8]
   b7f88:	4290      	cmp	r0, r2
   b7f8a:	da0b      	bge.n	b7fa4 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b7f8c:	42b5      	cmp	r5, r6
   b7f8e:	d103      	bne.n	b7f98 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b7f90:	603b      	str	r3, [r7, #0]
			return true;
   b7f92:	2001      	movs	r0, #1
}
   b7f94:	b003      	add	sp, #12
   b7f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b7f98:	aa01      	add	r2, sp, #4
   b7f9a:	4620      	mov	r0, r4
		index++;
   b7f9c:	3501      	adds	r5, #1
		skipObject(container, token);
   b7f9e:	f7ff ffa3 	bl	b7ee8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7fa2:	e7eb      	b.n	b7f7c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b7fa4:	2000      	movs	r0, #0
   b7fa6:	e7f5      	b.n	b7f94 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b7fa8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b7fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b7faa:	3b01      	subs	r3, #1
   b7fac:	2400      	movs	r4, #0
   b7fae:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b7fb2:	1bf6      	subs	r6, r6, r7
   b7fb4:	42a6      	cmp	r6, r4
   b7fb6:	dd08      	ble.n	b7fca <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b7fb8:	42a3      	cmp	r3, r4
   b7fba:	dd06      	ble.n	b7fca <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b7fbc:	6845      	ldr	r5, [r0, #4]
   b7fbe:	443d      	add	r5, r7
   b7fc0:	5d2d      	ldrb	r5, [r5, r4]
   b7fc2:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b7fc6:	3401      	adds	r4, #1
   b7fc8:	e7f1      	b.n	b7fae <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b7fca:	2300      	movs	r3, #0
   b7fcc:	7013      	strb	r3, [r2, #0]
}
   b7fce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7fd0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b7fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7fd2:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b7fd4:	2310      	movs	r3, #16
   b7fd6:	466a      	mov	r2, sp
   b7fd8:	f7ff ffe6 	bl	b7fa8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b7fdc:	4904      	ldr	r1, [pc, #16]	; (b7ff0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b7fde:	4622      	mov	r2, r4
   b7fe0:	4668      	mov	r0, sp
   b7fe2:	f000 ff7b 	bl	b8edc <sscanf>
}
   b7fe6:	1e43      	subs	r3, r0, #1
   b7fe8:	4258      	negs	r0, r3
   b7fea:	4158      	adcs	r0, r3
   b7fec:	b004      	add	sp, #16
   b7fee:	bd10      	pop	{r4, pc}
   b7ff0:	000bef1c 	.word	0x000bef1c

000b7ff4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
   b7ff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7ff6:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b7ff8:	2310      	movs	r3, #16
   b7ffa:	466a      	mov	r2, sp
   b7ffc:	f7ff ffd4 	bl	b7fa8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
   b8000:	4668      	mov	r0, sp
   b8002:	2100      	movs	r1, #0
   b8004:	f005 f98a 	bl	bd31c <strtof>
}
   b8008:	2001      	movs	r0, #1
	result = strtof(tmp, 0);
   b800a:	ed84 0a00 	vstr	s0, [r4]
}
   b800e:	b004      	add	sp, #16
   b8010:	bd10      	pop	{r4, pc}
	...

000b8014 <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   b8014:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8016:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b8018:	6889      	ldr	r1, [r1, #8]
   b801a:	4e0a      	ldr	r6, [pc, #40]	; (b8044 <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   b801c:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b801e:	b161      	cbz	r1, b803a <_ZNK13JsonReference5indexEj+0x26>
   b8020:	6868      	ldr	r0, [r5, #4]
   b8022:	ab01      	add	r3, sp, #4
   b8024:	f7ff ffa2 	bl	b7f6c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b8028:	b138      	cbz	r0, b803a <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   b802a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b802c:	e9c4 6300 	strd	r6, r3, [r4]
   b8030:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b8032:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   b8034:	4620      	mov	r0, r4
   b8036:	b002      	add	sp, #8
   b8038:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b803a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b803c:	e9c4 6300 	strd	r6, r3, [r4]
   b8040:	2300      	movs	r3, #0
   b8042:	e7f6      	b.n	b8032 <_ZNK13JsonReference5indexEj+0x1e>
   b8044:	000bec68 	.word	0x000bec68

000b8048 <_ZNK13JsonReference8valueIntEi>:
bool JsonReference::valueBool(bool result) const {
	(void) value(result);
	return result;
}

int JsonReference::valueInt(int result) const {
   b8048:	b507      	push	{r0, r1, r2, lr}
   b804a:	9101      	str	r1, [sp, #4]
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   b804c:	6881      	ldr	r1, [r0, #8]
   b804e:	b119      	cbz	r1, b8058 <_ZNK13JsonReference8valueIntEi+0x10>
   b8050:	6840      	ldr	r0, [r0, #4]
   b8052:	aa01      	add	r2, sp, #4
   b8054:	f7ff ffbc 	bl	b7fd0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	(void) value(result);
	return result;
}
   b8058:	9801      	ldr	r0, [sp, #4]
   b805a:	b003      	add	sp, #12
   b805c:	f85d fb04 	ldr.w	pc, [sp], #4

000b8060 <_ZNK13JsonReference10valueFloatEf>:
unsigned long JsonReference::valueUnsignedLong(unsigned long result) const {
	(void) value(result);
	return result;
}

float JsonReference::valueFloat(float result) const {
   b8060:	b507      	push	{r0, r1, r2, lr}
   b8062:	6881      	ldr	r1, [r0, #8]
   b8064:	ed8d 0a01 	vstr	s0, [sp, #4]
   b8068:	b119      	cbz	r1, b8072 <_ZNK13JsonReference10valueFloatEf+0x12>
   b806a:	6840      	ldr	r0, [r0, #4]
   b806c:	aa01      	add	r2, sp, #4
   b806e:	f7ff ffc1 	bl	b7ff4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
	(void) value(result);
	return result;
}
   b8072:	ed9d 0a01 	vldr	s0, [sp, #4]
   b8076:	b003      	add	sp, #12
   b8078:	f85d fb04 	ldr.w	pc, [sp], #4

000b807c <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b807c:	b510      	push	{r4, lr}
   b807e:	4604      	mov	r4, r0
	if (str) {
   b8080:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b8082:	460b      	mov	r3, r1
	if (str) {
   b8084:	b128      	cbz	r0, b8092 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b8086:	f002 fc82 	bl	ba98e <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b808a:	68e3      	ldr	r3, [r4, #12]
   b808c:	3301      	adds	r3, #1
   b808e:	60e3      	str	r3, [r4, #12]
	}
}
   b8090:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b8092:	6860      	ldr	r0, [r4, #4]
   b8094:	2800      	cmp	r0, #0
   b8096:	d0f8      	beq.n	b808a <_ZN16JsonParserString6appendEc+0xe>
   b8098:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b809c:	3a01      	subs	r2, #1
   b809e:	428a      	cmp	r2, r1
			buf[length] = ch;
   b80a0:	bf88      	it	hi
   b80a2:	5443      	strbhi	r3, [r0, r1]
   b80a4:	e7f1      	b.n	b808a <_ZN16JsonParserString6appendEc+0xe>

000b80a6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b80a6:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b80a8:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b80aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b80ac:	4608      	mov	r0, r1
		str.append((char)unicode);
   b80ae:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b80b0:	d804      	bhi.n	b80bc <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b80b2:	b003      	add	sp, #12
   b80b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b80b8:	f7ff bfe0 	b.w	b807c <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b80bc:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b80c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b80c4:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b80c8:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b80cc:	d207      	bcs.n	b80de <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b80ce:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b80d2:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b80d4:	f7ff ffd2 	bl	b807c <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b80d8:	9801      	ldr	r0, [sp, #4]
   b80da:	4621      	mov	r1, r4
   b80dc:	e7e9      	b.n	b80b2 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b80de:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b80e0:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b80e4:	9001      	str	r0, [sp, #4]
   b80e6:	f7ff ffc9 	bl	b807c <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b80ea:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b80ee:	9801      	ldr	r0, [sp, #4]
   b80f0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b80f4:	e7ee      	b.n	b80d4 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b80f8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b80f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b80fc:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b80fe:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8100:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b81d0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b8104:	4680      	mov	r8, r0
   b8106:	460f      	mov	r7, r1
   b8108:	4615      	mov	r5, r2
			escape = false;
   b810a:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b810c:	68b8      	ldr	r0, [r7, #8]
   b810e:	42b0      	cmp	r0, r6
   b8110:	dd5a      	ble.n	b81c8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b8112:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8116:	5d99      	ldrb	r1, [r3, r6]
   b8118:	199a      	adds	r2, r3, r6
		if (escape) {
   b811a:	2c00      	cmp	r4, #0
   b811c:	d04b      	beq.n	b81b6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b811e:	2975      	cmp	r1, #117	; 0x75
   b8120:	d805      	bhi.n	b812e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b8122:	296d      	cmp	r1, #109	; 0x6d
   b8124:	d807      	bhi.n	b8136 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b8126:	2962      	cmp	r1, #98	; 0x62
   b8128:	d01e      	beq.n	b8168 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b812a:	2966      	cmp	r1, #102	; 0x66
   b812c:	d01e      	beq.n	b816c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b812e:	4628      	mov	r0, r5
   b8130:	f7ff ffa4 	bl	b807c <_ZN16JsonParserString6appendEc>
				break;
   b8134:	e03d      	b.n	b81b2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b8136:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b813a:	2c07      	cmp	r4, #7
   b813c:	d8f7      	bhi.n	b812e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b813e:	f20f 0c08 	addw	ip, pc, #8
   b8142:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b8146:	bf00      	nop
   b8148:	000b8171 	.word	0x000b8171
   b814c:	000b812f 	.word	0x000b812f
   b8150:	000b812f 	.word	0x000b812f
   b8154:	000b812f 	.word	0x000b812f
   b8158:	000b8175 	.word	0x000b8175
   b815c:	000b812f 	.word	0x000b812f
   b8160:	000b8179 	.word	0x000b8179
   b8164:	000b817d 	.word	0x000b817d
				str.append('\b');
   b8168:	2108      	movs	r1, #8
   b816a:	e7e0      	b.n	b812e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b816c:	210c      	movs	r1, #12
   b816e:	e7de      	b.n	b812e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b8170:	210a      	movs	r1, #10
   b8172:	e7dc      	b.n	b812e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b8174:	210d      	movs	r1, #13
   b8176:	e7da      	b.n	b812e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b8178:	2109      	movs	r1, #9
   b817a:	e7d8      	b.n	b812e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b817c:	1d31      	adds	r1, r6, #4
   b817e:	4288      	cmp	r0, r1
   b8180:	dd17      	ble.n	b81b2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b8182:	a902      	add	r1, sp, #8
   b8184:	3304      	adds	r3, #4
   b8186:	4433      	add	r3, r6
   b8188:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b818a:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b818e:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b8192:	429a      	cmp	r2, r3
   b8194:	d1f9      	bne.n	b818a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8196:	aa01      	add	r2, sp, #4
   b8198:	4651      	mov	r1, sl
					tmp[4] = 0;
   b819a:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b819e:	f000 fe9d 	bl	b8edc <sscanf>
   b81a2:	2801      	cmp	r0, #1
   b81a4:	d105      	bne.n	b81b2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b81a6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b81aa:	4629      	mov	r1, r5
   b81ac:	f7ff ff7b 	bl	b80a6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b81b0:	3605      	adds	r6, #5
			escape = false;
   b81b2:	2400      	movs	r4, #0
   b81b4:	e004      	b.n	b81c0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b81b6:	295c      	cmp	r1, #92	; 0x5c
   b81b8:	d004      	beq.n	b81c4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b81ba:	4628      	mov	r0, r5
   b81bc:	f7ff ff5e 	bl	b807c <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b81c0:	3601      	adds	r6, #1
   b81c2:	e7a3      	b.n	b810c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b81c4:	2401      	movs	r4, #1
   b81c6:	e7fb      	b.n	b81c0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b81c8:	2001      	movs	r0, #1
   b81ca:	b004      	add	sp, #16
   b81cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b81d0:	000bec3b 	.word	0x000bec3b

000b81d4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b81d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b81d6:	460c      	mov	r4, r1
   b81d8:	4606      	mov	r6, r0
	result = "";
   b81da:	490c      	ldr	r1, [pc, #48]	; (b820c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b81dc:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b81de:	4615      	mov	r5, r2
	result = "";
   b81e0:	f002 fb95 	bl	ba90e <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b81e4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b81e8:	1ac9      	subs	r1, r1, r3
   b81ea:	3101      	adds	r1, #1
   b81ec:	4628      	mov	r0, r5
   b81ee:	f002 fb19 	bl	ba824 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b81f2:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b81f4:	466a      	mov	r2, sp
   b81f6:	4621      	mov	r1, r4
   b81f8:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b81fa:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b81fe:	9500      	str	r5, [sp, #0]
   b8200:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b8202:	f7ff ff79 	bl	b80f8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b8206:	b004      	add	sp, #16
   b8208:	bd70      	pop	{r4, r5, r6, pc}
   b820a:	bf00      	nop
   b820c:	000bec3a 	.word	0x000bec3a

000b8210 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8214:	b089      	sub	sp, #36	; 0x24
   b8216:	4605      	mov	r5, r0
   b8218:	4688      	mov	r8, r1
	String keyName;
   b821a:	a804      	add	r0, sp, #16
   b821c:	4912      	ldr	r1, [pc, #72]	; (b8268 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b821e:	4616      	mov	r6, r2
   b8220:	4699      	mov	r9, r3
	String keyName;
   b8222:	f002 fb2c 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b8226:	2700      	movs	r7, #0
   b8228:	9700      	str	r7, [sp, #0]
   b822a:	464b      	mov	r3, r9
   b822c:	aa03      	add	r2, sp, #12
   b822e:	4641      	mov	r1, r8
   b8230:	4628      	mov	r0, r5
   b8232:	f7ff fe70 	bl	b7f16 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b8236:	4604      	mov	r4, r0
   b8238:	b170      	cbz	r0, b8258 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b823a:	9903      	ldr	r1, [sp, #12]
   b823c:	aa04      	add	r2, sp, #16
   b823e:	4628      	mov	r0, r5
   b8240:	f7ff ffc8 	bl	b81d4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b8244:	4604      	mov	r4, r0
   b8246:	b908      	cbnz	r0, b824c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b8248:	3701      	adds	r7, #1
   b824a:	e7ed      	b.n	b8228 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b824c:	4631      	mov	r1, r6
   b824e:	a804      	add	r0, sp, #16
   b8250:	f002 fbed 	bl	baa2e <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b8254:	2800      	cmp	r0, #0
   b8256:	d0f7      	beq.n	b8248 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b8258:	a804      	add	r0, sp, #16
   b825a:	f002 fac5 	bl	ba7e8 <_ZN6StringD1Ev>
}
   b825e:	4620      	mov	r0, r4
   b8260:	b009      	add	sp, #36	; 0x24
   b8262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8266:	bf00      	nop
   b8268:	000bec3a 	.word	0x000bec3a

000b826c <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   b826c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b826e:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b8270:	6889      	ldr	r1, [r1, #8]
   b8272:	4e0a      	ldr	r6, [pc, #40]	; (b829c <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   b8274:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b8276:	b161      	cbz	r1, b8292 <_ZNK13JsonReference3keyEPKc+0x26>
   b8278:	6868      	ldr	r0, [r5, #4]
   b827a:	ab01      	add	r3, sp, #4
   b827c:	f7ff ffc8 	bl	b8210 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b8280:	b138      	cbz	r0, b8292 <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   b8282:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b8284:	e9c4 6300 	strd	r6, r3, [r4]
   b8288:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b828a:	60a3      	str	r3, [r4, #8]
}
   b828c:	4620      	mov	r0, r4
   b828e:	b002      	add	sp, #8
   b8290:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b8292:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b8294:	e9c4 6300 	strd	r6, r3, [r4]
   b8298:	2300      	movs	r3, #0
   b829a:	e7f6      	b.n	b828a <_ZNK13JsonReference3keyEPKc+0x1e>
   b829c:	000bec68 	.word	0x000bec68

000b82a0 <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   b82a0:	b538      	push	{r3, r4, r5, lr}
   b82a2:	460d      	mov	r5, r1
	String result;
   b82a4:	4905      	ldr	r1, [pc, #20]	; (b82bc <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   b82a6:	4604      	mov	r4, r0
	String result;
   b82a8:	f002 fae9 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
   b82ac:	68a9      	ldr	r1, [r5, #8]
   b82ae:	b119      	cbz	r1, b82b8 <_ZNK13JsonReference11valueStringEv+0x18>
   b82b0:	6868      	ldr	r0, [r5, #4]
   b82b2:	4622      	mov	r2, r4
   b82b4:	f7ff ff8e 	bl	b81d4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   b82b8:	4620      	mov	r0, r4
   b82ba:	bd38      	pop	{r3, r4, r5, pc}
   b82bc:	000bec3a 	.word	0x000bec3a

000b82c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b82c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b82c4:	6844      	ldr	r4, [r0, #4]
   b82c6:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b82ca:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b82ce:	f8d0 e000 	ldr.w	lr, [r0]
   b82d2:	4596      	cmp	lr, r2
   b82d4:	f080 81b9 	bcs.w	b864a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b82d8:	f811 800e 	ldrb.w	r8, [r1, lr]
   b82dc:	f1b8 0f00 	cmp.w	r8, #0
   b82e0:	f000 81b3 	beq.w	b864a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b82e4:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b82e8:	f000 8098 	beq.w	b841c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b82ec:	d833      	bhi.n	b8356 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b82ee:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b82f2:	f000 80a6 	beq.w	b8442 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b82f6:	d810      	bhi.n	b831a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b82f8:	f1a8 0809 	sub.w	r8, r8, #9
   b82fc:	fa5f f888 	uxtb.w	r8, r8
   b8300:	f1b8 0f17 	cmp.w	r8, #23
   b8304:	d80d      	bhi.n	b8322 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b8306:	4d9f      	ldr	r5, [pc, #636]	; (b8584 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b8308:	fa0c f808 	lsl.w	r8, ip, r8
   b830c:	ea18 0f05 	tst.w	r8, r5
   b8310:	d007      	beq.n	b8322 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8312:	6805      	ldr	r5, [r0, #0]
   b8314:	3501      	adds	r5, #1
   b8316:	6005      	str	r5, [r0, #0]
   b8318:	e7d9      	b.n	b82ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b831a:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b831e:	f000 8133 	beq.w	b8588 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8322:	f8d0 8000 	ldr.w	r8, [r0]
   b8326:	4542      	cmp	r2, r8
   b8328:	d90e      	bls.n	b8348 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b832a:	f811 5008 	ldrb.w	r5, [r1, r8]
   b832e:	b15d      	cbz	r5, b8348 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b8330:	2d3a      	cmp	r5, #58	; 0x3a
   b8332:	f200 8169 	bhi.w	b8608 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b8336:	2d1f      	cmp	r5, #31
   b8338:	f200 8151 	bhi.w	b85de <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b833c:	2d0a      	cmp	r5, #10
   b833e:	f200 8160 	bhi.w	b8602 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b8342:	2d08      	cmp	r5, #8
   b8344:	f240 8156 	bls.w	b85f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b8348:	2b00      	cmp	r3, #0
   b834a:	f040 8162 	bne.w	b8612 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b834e:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b8352:	6005      	str	r5, [r0, #0]
   b8354:	e0a5      	b.n	b84a2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b8356:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b835a:	d037      	beq.n	b83cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b835c:	d82e      	bhi.n	b83bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b835e:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b8362:	d033      	beq.n	b83cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b8364:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b8368:	d1db      	bne.n	b8322 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b836a:	2b00      	cmp	r3, #0
   b836c:	d0d1      	beq.n	b8312 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b836e:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b8372:	6845      	ldr	r5, [r0, #4]
   b8374:	3d01      	subs	r5, #1
   b8376:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b837a:	2d00      	cmp	r5, #0
   b837c:	db55      	blt.n	b842a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b837e:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b8382:	3701      	adds	r7, #1
   b8384:	d04d      	beq.n	b8422 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b8386:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b838a:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b838e:	d148      	bne.n	b8422 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b8390:	f898 b000 	ldrb.w	fp, [r8]
   b8394:	45cb      	cmp	fp, r9
   b8396:	d14b      	bne.n	b8430 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b8398:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b839c:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b83a0:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b83a4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b83a8:	f8de 7004 	ldr.w	r7, [lr, #4]
   b83ac:	3701      	adds	r7, #1
   b83ae:	d042      	beq.n	b8436 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b83b0:	f8de 7008 	ldr.w	r7, [lr, #8]
   b83b4:	3701      	adds	r7, #1
   b83b6:	d13e      	bne.n	b8436 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b83b8:	6085      	str	r5, [r0, #8]
				break;
   b83ba:	e7aa      	b.n	b8312 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b83bc:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b83c0:	d1af      	bne.n	b8322 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b83c2:	2b00      	cmp	r3, #0
   b83c4:	d0a5      	beq.n	b8312 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b83c6:	f04f 0901 	mov.w	r9, #1
   b83ca:	e7d2      	b.n	b8372 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b83cc:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b83ce:	2b00      	cmp	r3, #0
   b83d0:	d09f      	beq.n	b8312 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b83d2:	6845      	ldr	r5, [r0, #4]
   b83d4:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b83d6:	42af      	cmp	r7, r5
   b83d8:	d94a      	bls.n	b8470 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b83da:	f105 0e01 	add.w	lr, r5, #1
   b83de:	f8c0 e004 	str.w	lr, [r0, #4]
   b83e2:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b83e6:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b83ea:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b83ee:	2500      	movs	r5, #0
   b83f0:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b83f4:	6885      	ldr	r5, [r0, #8]
   b83f6:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b83f8:	bf1f      	itttt	ne
   b83fa:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b83fe:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b8402:	3501      	addne	r5, #1
   b8404:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b8408:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b840c:	bf0c      	ite	eq
   b840e:	2501      	moveq	r5, #1
   b8410:	2502      	movne	r5, #2
   b8412:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b8416:	6805      	ldr	r5, [r0, #0]
   b8418:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b841c:	6845      	ldr	r5, [r0, #4]
   b841e:	3d01      	subs	r5, #1
   b8420:	e7ca      	b.n	b83b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b8422:	3d01      	subs	r5, #1
   b8424:	f1a8 0810 	sub.w	r8, r8, #16
   b8428:	e7a7      	b.n	b837a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b842a:	3501      	adds	r5, #1
   b842c:	f47f af71 	bne.w	b8312 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b8430:	f06f 0401 	mvn.w	r4, #1
   b8434:	e01e      	b.n	b8474 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b8436:	3d01      	subs	r5, #1
   b8438:	1c6f      	adds	r7, r5, #1
   b843a:	f1ae 0e10 	sub.w	lr, lr, #16
   b843e:	d1b3      	bne.n	b83a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b8440:	e767      	b.n	b8312 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b8442:	f10e 0901 	add.w	r9, lr, #1
   b8446:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b844a:	f8d0 8000 	ldr.w	r8, [r0]
   b844e:	4542      	cmp	r2, r8
   b8450:	f240 8093 	bls.w	b857a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b8454:	f811 5008 	ldrb.w	r5, [r1, r8]
   b8458:	2d00      	cmp	r5, #0
   b845a:	f000 808e 	beq.w	b857a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b845e:	2d22      	cmp	r5, #34	; 0x22
   b8460:	d130      	bne.n	b84c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b8462:	b1f3      	cbz	r3, b84a2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b8464:	6845      	ldr	r5, [r0, #4]
   b8466:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b8468:	42af      	cmp	r7, r5
   b846a:	d806      	bhi.n	b847a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b846c:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b8470:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b8474:	4620      	mov	r0, r4
   b8476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b847a:	f105 0e01 	add.w	lr, r5, #1
   b847e:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b8482:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b8486:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b848a:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b848e:	2700      	movs	r7, #0
   b8490:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b8492:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b8496:	f04f 0a03 	mov.w	sl, #3
   b849a:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b849e:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b84a2:	6885      	ldr	r5, [r0, #8]
   b84a4:	1c6f      	adds	r7, r5, #1
				count++;
   b84a6:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b84aa:	f43f af32 	beq.w	b8312 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b84ae:	2b00      	cmp	r3, #0
   b84b0:	f43f af2f 	beq.w	b8312 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b84b4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b84b8:	f8de 500c 	ldr.w	r5, [lr, #12]
   b84bc:	3501      	adds	r5, #1
   b84be:	f8ce 500c 	str.w	r5, [lr, #12]
   b84c2:	e726      	b.n	b8312 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b84c4:	2d5c      	cmp	r5, #92	; 0x5c
   b84c6:	d111      	bne.n	b84ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b84c8:	f108 0501 	add.w	r5, r8, #1
   b84cc:	42aa      	cmp	r2, r5
   b84ce:	d90d      	bls.n	b84ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b84d0:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b84d2:	5d4d      	ldrb	r5, [r1, r5]
   b84d4:	2d75      	cmp	r5, #117	; 0x75
   b84d6:	d82b      	bhi.n	b8530 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b84d8:	2d6d      	cmp	r5, #109	; 0x6d
   b84da:	d80b      	bhi.n	b84f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b84dc:	2d66      	cmp	r5, #102	; 0x66
   b84de:	d827      	bhi.n	b8530 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b84e0:	2d5b      	cmp	r5, #91	; 0x5b
   b84e2:	d81d      	bhi.n	b8520 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b84e4:	2d22      	cmp	r5, #34	; 0x22
   b84e6:	d001      	beq.n	b84ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b84e8:	2d2f      	cmp	r5, #47	; 0x2f
   b84ea:	d121      	bne.n	b8530 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b84ec:	6805      	ldr	r5, [r0, #0]
   b84ee:	3501      	adds	r5, #1
   b84f0:	6005      	str	r5, [r0, #0]
   b84f2:	e7aa      	b.n	b844a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b84f4:	3d6e      	subs	r5, #110	; 0x6e
   b84f6:	2d07      	cmp	r5, #7
   b84f8:	d81a      	bhi.n	b8530 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b84fa:	a701      	add	r7, pc, #4	; (adr r7, b8500 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b84fc:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b8500:	000b84ed 	.word	0x000b84ed
   b8504:	000b8531 	.word	0x000b8531
   b8508:	000b8531 	.word	0x000b8531
   b850c:	000b8531 	.word	0x000b8531
   b8510:	000b84ed 	.word	0x000b84ed
   b8514:	000b8531 	.word	0x000b8531
   b8518:	000b84ed 	.word	0x000b84ed
   b851c:	000b8537 	.word	0x000b8537
   b8520:	3d5c      	subs	r5, #92	; 0x5c
   b8522:	b2ed      	uxtb	r5, r5
   b8524:	fa0c f505 	lsl.w	r5, ip, r5
   b8528:	f240 4741 	movw	r7, #1089	; 0x441
   b852c:	423d      	tst	r5, r7
   b852e:	d1dd      	bne.n	b84ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b8530:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b8534:	e77c      	b.n	b8430 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b8536:	f108 0502 	add.w	r5, r8, #2
   b853a:	6005      	str	r5, [r0, #0]
   b853c:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8540:	f8d0 8000 	ldr.w	r8, [r0]
   b8544:	4542      	cmp	r2, r8
   b8546:	d803      	bhi.n	b8550 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b8548:	6805      	ldr	r5, [r0, #0]
   b854a:	3d01      	subs	r5, #1
   b854c:	6005      	str	r5, [r0, #0]
					break;
   b854e:	e7cd      	b.n	b84ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8550:	f811 5008 	ldrb.w	r5, [r1, r8]
   b8554:	2d00      	cmp	r5, #0
   b8556:	d0f7      	beq.n	b8548 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b8558:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b855c:	f1bb 0f09 	cmp.w	fp, #9
   b8560:	d904      	bls.n	b856c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b8562:	f025 0520 	bic.w	r5, r5, #32
   b8566:	3d41      	subs	r5, #65	; 0x41
   b8568:	2d05      	cmp	r5, #5
   b856a:	d8e1      	bhi.n	b8530 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b856c:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8570:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b8574:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8576:	d1e3      	bne.n	b8540 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b8578:	e7e6      	b.n	b8548 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b857a:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b857e:	f06f 0402 	mvn.w	r4, #2
   b8582:	e777      	b.n	b8474 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b8584:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b8588:	2b00      	cmp	r3, #0
   b858a:	f43f aec2 	beq.w	b8312 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b858e:	6885      	ldr	r5, [r0, #8]
   b8590:	1c6f      	adds	r7, r5, #1
   b8592:	f43f aebe 	beq.w	b8312 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b8596:	012d      	lsls	r5, r5, #4
   b8598:	5d5d      	ldrb	r5, [r3, r5]
   b859a:	3d01      	subs	r5, #1
   b859c:	2d01      	cmp	r5, #1
   b859e:	f67f aeb8 	bls.w	b8312 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b85a2:	6845      	ldr	r5, [r0, #4]
   b85a4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b85a8:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b85ac:	f1b8 0f00 	cmp.w	r8, #0
   b85b0:	f6ff aeaf 	blt.w	b8312 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b85b4:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b85b8:	3d01      	subs	r5, #1
   b85ba:	2d01      	cmp	r5, #1
   b85bc:	d80a      	bhi.n	b85d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b85be:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b85c2:	3501      	adds	r5, #1
   b85c4:	d006      	beq.n	b85d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b85c6:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b85ca:	3501      	adds	r5, #1
   b85cc:	d102      	bne.n	b85d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b85ce:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b85d2:	e69e      	b.n	b8312 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b85d4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b85d8:	f1ae 0e10 	sub.w	lr, lr, #16
   b85dc:	e7e6      	b.n	b85ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b85de:	f1a5 0920 	sub.w	r9, r5, #32
   b85e2:	4f24      	ldr	r7, [pc, #144]	; (b8674 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b85e4:	fa5f f989 	uxtb.w	r9, r9
   b85e8:	fa0c f909 	lsl.w	r9, ip, r9
   b85ec:	ea19 0f07 	tst.w	r9, r7
   b85f0:	f47f aeaa 	bne.w	b8348 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b85f4:	3d20      	subs	r5, #32
   b85f6:	2d5e      	cmp	r5, #94	; 0x5e
   b85f8:	d89a      	bhi.n	b8530 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b85fa:	f108 0501 	add.w	r5, r8, #1
   b85fe:	6005      	str	r5, [r0, #0]
   b8600:	e68f      	b.n	b8322 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b8602:	2d0d      	cmp	r5, #13
   b8604:	d1f6      	bne.n	b85f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b8606:	e69f      	b.n	b8348 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b8608:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b860c:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b8610:	e7f8      	b.n	b8604 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b8612:	6845      	ldr	r5, [r0, #4]
   b8614:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b8616:	42af      	cmp	r7, r5
   b8618:	f67f af28 	bls.w	b846c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b861c:	f105 0801 	add.w	r8, r5, #1
   b8620:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b8624:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b8628:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b862c:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b8630:	2700      	movs	r7, #0
   b8632:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b8634:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b8638:	f04f 0a04 	mov.w	sl, #4
   b863c:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b8640:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b8644:	6805      	ldr	r5, [r0, #0]
   b8646:	3d01      	subs	r5, #1
   b8648:	e683      	b.n	b8352 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b864a:	2b00      	cmp	r3, #0
   b864c:	f43f af12 	beq.w	b8474 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b8650:	6842      	ldr	r2, [r0, #4]
   b8652:	1e51      	subs	r1, r2, #1
   b8654:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b8658:	2900      	cmp	r1, #0
   b865a:	f6ff af0b 	blt.w	b8474 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b865e:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b8662:	3201      	adds	r2, #1
   b8664:	d003      	beq.n	b866e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b8666:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b866a:	3201      	adds	r2, #1
   b866c:	d087      	beq.n	b857e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b866e:	3901      	subs	r1, #1
   b8670:	3b10      	subs	r3, #16
   b8672:	e7f1      	b.n	b8658 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b8674:	04001001 	.word	0x04001001

000b8678 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b8678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b867a:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b867c:	4604      	mov	r4, r0
	if (offset == 0) {
   b867e:	b912      	cbnz	r2, b8686 <_ZN10JsonParser5parseEv+0xe>
		return false;
   b8680:	2000      	movs	r0, #0
}
   b8682:	b003      	add	sp, #12
   b8684:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b8686:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b8688:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b868c:	b1ab      	cbz	r3, b86ba <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b868e:	2100      	movs	r1, #0
	parser->toknext = 0;
   b8690:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b8694:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b8698:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b869a:	69c1      	ldr	r1, [r0, #28]
   b869c:	9100      	str	r1, [sp, #0]
   b869e:	6841      	ldr	r1, [r0, #4]
   b86a0:	4630      	mov	r0, r6
   b86a2:	f7ff fe0d 	bl	b82c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b86a6:	1c43      	adds	r3, r0, #1
   b86a8:	d128      	bne.n	b86fc <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b86aa:	7c25      	ldrb	r5, [r4, #16]
   b86ac:	2d00      	cmp	r5, #0
   b86ae:	d1e7      	bne.n	b8680 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b86b0:	6960      	ldr	r0, [r4, #20]
   b86b2:	f000 fc03 	bl	b8ebc <free>
			tokens = 0;
   b86b6:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b86b8:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b86ba:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b86bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b86c0:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b86c4:	68e2      	ldr	r2, [r4, #12]
   b86c6:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b86c8:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b86ca:	9500      	str	r5, [sp, #0]
   b86cc:	462b      	mov	r3, r5
   b86ce:	4630      	mov	r0, r6
   b86d0:	f7ff fdf6 	bl	b82c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b86d4:	2800      	cmp	r0, #0
   b86d6:	dbd3      	blt.n	b8680 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b86d8:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b86da:	d017      	beq.n	b870c <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b86dc:	0100      	lsls	r0, r0, #4
   b86de:	f000 fbe5 	bl	b8eac <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b86e2:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b86e4:	6160      	str	r0, [r4, #20]
   b86e6:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b86e8:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b86ea:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b86ee:	68e2      	ldr	r2, [r4, #12]
   b86f0:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b86f2:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b86f4:	4630      	mov	r0, r6
   b86f6:	f7ff fde3 	bl	b82c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b86fa:	e001      	b.n	b8700 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b86fc:	2800      	cmp	r0, #0
   b86fe:	dbbf      	blt.n	b8680 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b8700:	6963      	ldr	r3, [r4, #20]
   b8702:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b8706:	61a0      	str	r0, [r4, #24]
	return true;
   b8708:	2001      	movs	r0, #1
   b870a:	e7ba      	b.n	b8682 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b870c:	6963      	ldr	r3, [r4, #20]
   b870e:	61a3      	str	r3, [r4, #24]
   b8710:	e7fa      	b.n	b8708 <_ZN10JsonParser5parseEv+0x90>

000b8712 <_ZN7TwoWire5writeEi.isra.0>:
   b8712:	6803      	ldr	r3, [r0, #0]
   b8714:	b2c9      	uxtb	r1, r1
   b8716:	689b      	ldr	r3, [r3, #8]
   b8718:	4718      	bx	r3

000b871a <_ZN16Adafruit_VL6180XC1Ev>:
/*! 
    @brief  Instantiates a new VL6180X class
*/
/**************************************************************************/
Adafruit_VL6180X::Adafruit_VL6180X(void) {
}
   b871a:	4770      	bx	lr

000b871c <_ZN16Adafruit_VL6180X5read8Et>:
/**************************************************************************/


// Read 1 byte from the VL6180X at 'address'
uint8_t Adafruit_VL6180X::read8(uint16_t address)
{
   b871c:	b538      	push	{r3, r4, r5, lr}
   b871e:	4604      	mov	r4, r0
   b8720:	460d      	mov	r5, r1
  uint8_t data;

  Wire.beginTransmission(_i2caddr);
   b8722:	f002 fedb 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b8726:	7921      	ldrb	r1, [r4, #4]
   b8728:	f001 fe6e 	bl	ba408 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(address>>8);
   b872c:	f002 fed6 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b8730:	0a29      	lsrs	r1, r5, #8
   b8732:	f7ff ffee 	bl	b8712 <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(address);
   b8736:	f002 fed1 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b873a:	4629      	mov	r1, r5
   b873c:	f7ff ffe9 	bl	b8712 <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission();
   b8740:	f002 fecc 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b8744:	f001 fe6b 	bl	ba41e <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(_i2caddr, (uint8_t)1);
   b8748:	f002 fec8 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b874c:	7921      	ldrb	r1, [r4, #4]
   b874e:	2201      	movs	r2, #1
   b8750:	f001 fe57 	bl	ba402 <_ZN7TwoWire11requestFromEhj>
  uint8_t r = Wire.read();
   b8754:	f002 fec2 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b8758:	6803      	ldr	r3, [r0, #0]
   b875a:	695b      	ldr	r3, [r3, #20]
   b875c:	4798      	blx	r3
#if defined(I2C_DEBUG)
  Serial.print("\t$"); Serial.print(address, HEX); Serial.print(": 0x"); Serial.println(r, HEX);
#endif

  return r;
}
   b875e:	b2c0      	uxtb	r0, r0
   b8760:	bd38      	pop	{r3, r4, r5, pc}

000b8762 <_ZN16Adafruit_VL6180X6write8Eth>:
  return data;
}

// write 1 byte
void Adafruit_VL6180X::write8(uint16_t address, uint8_t data)
{
   b8762:	b570      	push	{r4, r5, r6, lr}
   b8764:	4606      	mov	r6, r0
   b8766:	4615      	mov	r5, r2
   b8768:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   b876a:	f002 feb7 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b876e:	7931      	ldrb	r1, [r6, #4]
   b8770:	f001 fe4a 	bl	ba408 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(address>>8);
   b8774:	f002 feb2 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b8778:	0a21      	lsrs	r1, r4, #8
   b877a:	f7ff ffca 	bl	b8712 <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(address);
   b877e:	f002 fead 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b8782:	4621      	mov	r1, r4
   b8784:	f7ff ffc5 	bl	b8712 <_ZN7TwoWire5writeEi.isra.0>
  Wire.write(data);  
   b8788:	f002 fea8 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b878c:	6803      	ldr	r3, [r0, #0]
   b878e:	4629      	mov	r1, r5
   b8790:	689b      	ldr	r3, [r3, #8]
   b8792:	4798      	blx	r3
  Wire.endTransmission();
   b8794:	f002 fea2 	bl	bb4dc <_Z19__fetch_global_Wirev>

#if defined(I2C_DEBUG)
  Serial.print("\t$"); Serial.print(address, HEX); Serial.print(" = 0x"); Serial.println(data, HEX);
#endif
}
   b8798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
   b879c:	f001 be3f 	b.w	ba41e <_ZN7TwoWire15endTransmissionEv>

000b87a0 <_ZN16Adafruit_VL6180X12loadSettingsEv>:
void Adafruit_VL6180X::loadSettings(void) {
   b87a0:	b510      	push	{r4, lr}
    write8(0x0207, 0x01);
   b87a2:	2201      	movs	r2, #1
void Adafruit_VL6180X::loadSettings(void) {
   b87a4:	4604      	mov	r4, r0
    write8(0x0207, 0x01);
   b87a6:	f240 2107 	movw	r1, #519	; 0x207
   b87aa:	f7ff ffda 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0208, 0x01);
   b87ae:	4620      	mov	r0, r4
   b87b0:	2201      	movs	r2, #1
   b87b2:	f44f 7102 	mov.w	r1, #520	; 0x208
   b87b6:	f7ff ffd4 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0096, 0x00);
   b87ba:	4620      	mov	r0, r4
   b87bc:	2200      	movs	r2, #0
   b87be:	2196      	movs	r1, #150	; 0x96
   b87c0:	f7ff ffcf 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0097, 0xfd);
   b87c4:	4620      	mov	r0, r4
   b87c6:	22fd      	movs	r2, #253	; 0xfd
   b87c8:	2197      	movs	r1, #151	; 0x97
   b87ca:	f7ff ffca 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00e3, 0x00);
   b87ce:	4620      	mov	r0, r4
   b87d0:	2200      	movs	r2, #0
   b87d2:	21e3      	movs	r1, #227	; 0xe3
   b87d4:	f7ff ffc5 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00e4, 0x04);
   b87d8:	4620      	mov	r0, r4
   b87da:	2204      	movs	r2, #4
   b87dc:	21e4      	movs	r1, #228	; 0xe4
   b87de:	f7ff ffc0 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00e5, 0x02);
   b87e2:	4620      	mov	r0, r4
   b87e4:	2202      	movs	r2, #2
   b87e6:	21e5      	movs	r1, #229	; 0xe5
   b87e8:	f7ff ffbb 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00e6, 0x01);
   b87ec:	4620      	mov	r0, r4
   b87ee:	2201      	movs	r2, #1
   b87f0:	21e6      	movs	r1, #230	; 0xe6
   b87f2:	f7ff ffb6 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00e7, 0x03);
   b87f6:	4620      	mov	r0, r4
   b87f8:	2203      	movs	r2, #3
   b87fa:	21e7      	movs	r1, #231	; 0xe7
   b87fc:	f7ff ffb1 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00f5, 0x02);
   b8800:	4620      	mov	r0, r4
   b8802:	2202      	movs	r2, #2
   b8804:	21f5      	movs	r1, #245	; 0xf5
   b8806:	f7ff ffac 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00d9, 0x05);
   b880a:	4620      	mov	r0, r4
   b880c:	2205      	movs	r2, #5
   b880e:	21d9      	movs	r1, #217	; 0xd9
   b8810:	f7ff ffa7 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00db, 0xce);
   b8814:	4620      	mov	r0, r4
   b8816:	22ce      	movs	r2, #206	; 0xce
   b8818:	21db      	movs	r1, #219	; 0xdb
   b881a:	f7ff ffa2 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00dc, 0x03);
   b881e:	4620      	mov	r0, r4
   b8820:	2203      	movs	r2, #3
   b8822:	21dc      	movs	r1, #220	; 0xdc
   b8824:	f7ff ff9d 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00dd, 0xf8);
   b8828:	4620      	mov	r0, r4
   b882a:	22f8      	movs	r2, #248	; 0xf8
   b882c:	21dd      	movs	r1, #221	; 0xdd
   b882e:	f7ff ff98 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x009f, 0x00);
   b8832:	4620      	mov	r0, r4
   b8834:	2200      	movs	r2, #0
   b8836:	219f      	movs	r1, #159	; 0x9f
   b8838:	f7ff ff93 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00a3, 0x3c);
   b883c:	4620      	mov	r0, r4
   b883e:	223c      	movs	r2, #60	; 0x3c
   b8840:	21a3      	movs	r1, #163	; 0xa3
   b8842:	f7ff ff8e 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00b7, 0x00);
   b8846:	4620      	mov	r0, r4
   b8848:	2200      	movs	r2, #0
   b884a:	21b7      	movs	r1, #183	; 0xb7
   b884c:	f7ff ff89 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00bb, 0x3c);
   b8850:	4620      	mov	r0, r4
   b8852:	223c      	movs	r2, #60	; 0x3c
   b8854:	21bb      	movs	r1, #187	; 0xbb
   b8856:	f7ff ff84 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00b2, 0x09);
   b885a:	4620      	mov	r0, r4
   b885c:	2209      	movs	r2, #9
   b885e:	21b2      	movs	r1, #178	; 0xb2
   b8860:	f7ff ff7f 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00ca, 0x09);
   b8864:	4620      	mov	r0, r4
   b8866:	2209      	movs	r2, #9
   b8868:	21ca      	movs	r1, #202	; 0xca
   b886a:	f7ff ff7a 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0198, 0x01);
   b886e:	4620      	mov	r0, r4
   b8870:	2201      	movs	r2, #1
   b8872:	f44f 71cc 	mov.w	r1, #408	; 0x198
   b8876:	f7ff ff74 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x01b0, 0x17);
   b887a:	4620      	mov	r0, r4
   b887c:	2217      	movs	r2, #23
   b887e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
   b8882:	f7ff ff6e 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x01ad, 0x00);
   b8886:	4620      	mov	r0, r4
   b8888:	2200      	movs	r2, #0
   b888a:	f240 11ad 	movw	r1, #429	; 0x1ad
   b888e:	f7ff ff68 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x00ff, 0x05);
   b8892:	4620      	mov	r0, r4
   b8894:	2205      	movs	r2, #5
   b8896:	21ff      	movs	r1, #255	; 0xff
   b8898:	f7ff ff63 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0100, 0x05);
   b889c:	4620      	mov	r0, r4
   b889e:	2205      	movs	r2, #5
   b88a0:	f44f 7180 	mov.w	r1, #256	; 0x100
   b88a4:	f7ff ff5d 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0199, 0x05);
   b88a8:	4620      	mov	r0, r4
   b88aa:	2205      	movs	r2, #5
   b88ac:	f240 1199 	movw	r1, #409	; 0x199
   b88b0:	f7ff ff57 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x01a6, 0x1b);
   b88b4:	4620      	mov	r0, r4
   b88b6:	221b      	movs	r2, #27
   b88b8:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   b88bc:	f7ff ff51 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x01ac, 0x3e);
   b88c0:	4620      	mov	r0, r4
   b88c2:	223e      	movs	r2, #62	; 0x3e
   b88c4:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   b88c8:	f7ff ff4b 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x01a7, 0x1f);
   b88cc:	4620      	mov	r0, r4
   b88ce:	221f      	movs	r2, #31
   b88d0:	f240 11a7 	movw	r1, #423	; 0x1a7
   b88d4:	f7ff ff45 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0030, 0x00);
   b88d8:	4620      	mov	r0, r4
   b88da:	2200      	movs	r2, #0
   b88dc:	2130      	movs	r1, #48	; 0x30
   b88de:	f7ff ff40 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0011, 0x10);       // Enables polling for 'New Sample ready'
   b88e2:	4620      	mov	r0, r4
   b88e4:	2210      	movs	r2, #16
   b88e6:	2111      	movs	r1, #17
   b88e8:	f7ff ff3b 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x010a, 0x30);       // Set the averaging sample period
   b88ec:	4620      	mov	r0, r4
   b88ee:	2230      	movs	r2, #48	; 0x30
   b88f0:	f44f 7185 	mov.w	r1, #266	; 0x10a
   b88f4:	f7ff ff35 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x003f, 0x46);       // Sets the light and dark gain (upper
   b88f8:	4620      	mov	r0, r4
   b88fa:	2246      	movs	r2, #70	; 0x46
   b88fc:	213f      	movs	r1, #63	; 0x3f
   b88fe:	f7ff ff30 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0031, 0xFF);       // sets the # of range measurements after
   b8902:	4620      	mov	r0, r4
   b8904:	22ff      	movs	r2, #255	; 0xff
   b8906:	2131      	movs	r1, #49	; 0x31
   b8908:	f7ff ff2b 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0040, 0x63);       // Set ALS integration time to 100ms
   b890c:	4620      	mov	r0, r4
   b890e:	2263      	movs	r2, #99	; 0x63
   b8910:	2140      	movs	r1, #64	; 0x40
   b8912:	f7ff ff26 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x002e, 0x01);       // perform a single temperature calibration
   b8916:	4620      	mov	r0, r4
   b8918:	2201      	movs	r2, #1
   b891a:	212e      	movs	r1, #46	; 0x2e
   b891c:	f7ff ff21 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x001b, 0x09);       // Set default ranging inter-measurement
   b8920:	4620      	mov	r0, r4
   b8922:	2209      	movs	r2, #9
   b8924:	211b      	movs	r1, #27
   b8926:	f7ff ff1c 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x003e, 0x31);       // Set default ALS inter-measurement period
   b892a:	4620      	mov	r0, r4
   b892c:	2231      	movs	r2, #49	; 0x31
   b892e:	213e      	movs	r1, #62	; 0x3e
   b8930:	f7ff ff17 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
    write8(0x0014, 0x24);       // Configures interrupt on 'New Sample
   b8934:	4620      	mov	r0, r4
   b8936:	2224      	movs	r2, #36	; 0x24
}
   b8938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write8(0x0014, 0x24);       // Configures interrupt on 'New Sample
   b893c:	2114      	movs	r1, #20
   b893e:	f7ff bf10 	b.w	b8762 <_ZN16Adafruit_VL6180X6write8Eth>

000b8942 <_ZN16Adafruit_VL6180X5beginEP7TwoWire>:
  _i2caddr = VL6180X_DEFAULT_I2C_ADDR;
   b8942:	2329      	movs	r3, #41	; 0x29
boolean Adafruit_VL6180X::begin(TwoWire *theWire) {
   b8944:	b510      	push	{r4, lr}
   b8946:	4604      	mov	r4, r0
  _i2caddr = VL6180X_DEFAULT_I2C_ADDR;
   b8948:	7103      	strb	r3, [r0, #4]
  if (! theWire) {
   b894a:	b9a9      	cbnz	r1, b8978 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x36>
    _i2c = &Wire;
   b894c:	f002 fdc6 	bl	bb4dc <_Z19__fetch_global_Wirev>
   b8950:	6020      	str	r0, [r4, #0]
  _i2c-> begin();
   b8952:	6820      	ldr	r0, [r4, #0]
   b8954:	f001 fd26 	bl	ba3a4 <_ZN7TwoWire5beginEv>
  if (read8(VL6180X_REG_IDENTIFICATION_MODEL_ID) != 0xB4) {
   b8958:	2100      	movs	r1, #0
   b895a:	4620      	mov	r0, r4
   b895c:	f7ff fede 	bl	b871c <_ZN16Adafruit_VL6180X5read8Et>
   b8960:	28b4      	cmp	r0, #180	; 0xb4
   b8962:	d10b      	bne.n	b897c <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x3a>
    loadSettings();
   b8964:	4620      	mov	r0, r4
   b8966:	f7ff ff1b 	bl	b87a0 <_ZN16Adafruit_VL6180X12loadSettingsEv>
  write8(VL6180X_REG_SYSTEM_FRESH_OUT_OF_RESET, 0x00);
   b896a:	4620      	mov	r0, r4
   b896c:	2200      	movs	r2, #0
   b896e:	2116      	movs	r1, #22
   b8970:	f7ff fef7 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
   b8974:	2001      	movs	r0, #1
}
   b8976:	bd10      	pop	{r4, pc}
    _i2c = theWire;
   b8978:	6001      	str	r1, [r0, #0]
   b897a:	e7ea      	b.n	b8952 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x10>
    return false;
   b897c:	2000      	movs	r0, #0
   b897e:	e7fa      	b.n	b8976 <_ZN16Adafruit_VL6180X5beginEP7TwoWire+0x34>

000b8980 <_ZN16Adafruit_VL6180X9readRangeEv>:
uint8_t Adafruit_VL6180X::readRange(void) {
   b8980:	b538      	push	{r3, r4, r5, lr}
   b8982:	4604      	mov	r4, r0
  while (! (read8(VL6180X_REG_RESULT_RANGE_STATUS) & 0x01));
   b8984:	214d      	movs	r1, #77	; 0x4d
   b8986:	4620      	mov	r0, r4
   b8988:	f7ff fec8 	bl	b871c <_ZN16Adafruit_VL6180X5read8Et>
   b898c:	07c2      	lsls	r2, r0, #31
   b898e:	d5f9      	bpl.n	b8984 <_ZN16Adafruit_VL6180X9readRangeEv+0x4>
  write8(VL6180X_REG_SYSRANGE_START, 0x01);
   b8990:	2201      	movs	r2, #1
   b8992:	2118      	movs	r1, #24
   b8994:	4620      	mov	r0, r4
   b8996:	f7ff fee4 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
  while (! (read8(VL6180X_REG_RESULT_INTERRUPT_STATUS_GPIO) & 0x04));
   b899a:	214f      	movs	r1, #79	; 0x4f
   b899c:	4620      	mov	r0, r4
   b899e:	f7ff febd 	bl	b871c <_ZN16Adafruit_VL6180X5read8Et>
   b89a2:	0743      	lsls	r3, r0, #29
   b89a4:	d5f9      	bpl.n	b899a <_ZN16Adafruit_VL6180X9readRangeEv+0x1a>
  uint8_t range = read8(VL6180X_REG_RESULT_RANGE_VAL);
   b89a6:	2162      	movs	r1, #98	; 0x62
   b89a8:	4620      	mov	r0, r4
   b89aa:	f7ff feb7 	bl	b871c <_ZN16Adafruit_VL6180X5read8Et>
  write8(VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
   b89ae:	2207      	movs	r2, #7
  uint8_t range = read8(VL6180X_REG_RESULT_RANGE_VAL);
   b89b0:	4605      	mov	r5, r0
  write8(VL6180X_REG_SYSTEM_INTERRUPT_CLEAR, 0x07);
   b89b2:	2115      	movs	r1, #21
   b89b4:	4620      	mov	r0, r4
   b89b6:	f7ff fed4 	bl	b8762 <_ZN16Adafruit_VL6180X6write8Eth>
}
   b89ba:	4628      	mov	r0, r5
   b89bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b89c0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b89c0:	b508      	push	{r3, lr}
   b89c2:	4b02      	ldr	r3, [pc, #8]	; (b89cc <hal_ble_stack_init+0xc>)
   b89c4:	681b      	ldr	r3, [r3, #0]
   b89c6:	689b      	ldr	r3, [r3, #8]
   b89c8:	9301      	str	r3, [sp, #4]
   b89ca:	bd08      	pop	{r3, pc}
   b89cc:	00030278 	.word	0x00030278

000b89d0 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b89d0:	b508      	push	{r3, lr}
   b89d2:	4b02      	ldr	r3, [pc, #8]	; (b89dc <hal_ble_gap_set_advertising_data+0xc>)
   b89d4:	681b      	ldr	r3, [r3, #0]
   b89d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b89d8:	9301      	str	r3, [sp, #4]
   b89da:	bd08      	pop	{r3, pc}
   b89dc:	00030278 	.word	0x00030278

000b89e0 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b89e0:	b508      	push	{r3, lr}
   b89e2:	4b02      	ldr	r3, [pc, #8]	; (b89ec <hal_ble_gap_set_scan_response_data+0xc>)
   b89e4:	681b      	ldr	r3, [r3, #0]
   b89e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b89e8:	9301      	str	r3, [sp, #4]
   b89ea:	bd08      	pop	{r3, pc}
   b89ec:	00030278 	.word	0x00030278

000b89f0 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b89f0:	b508      	push	{r3, lr}
   b89f2:	4b02      	ldr	r3, [pc, #8]	; (b89fc <hal_ble_gap_start_advertising+0xc>)
   b89f4:	681b      	ldr	r3, [r3, #0]
   b89f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b89f8:	9301      	str	r3, [sp, #4]
   b89fa:	bd08      	pop	{r3, pc}
   b89fc:	00030278 	.word	0x00030278

000b8a00 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b8a00:	b508      	push	{r3, lr}
   b8a02:	4b03      	ldr	r3, [pc, #12]	; (b8a10 <hal_ble_gap_disconnect+0x10>)
   b8a04:	681b      	ldr	r3, [r3, #0]
   b8a06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b8a0a:	9301      	str	r3, [sp, #4]
   b8a0c:	bd08      	pop	{r3, pc}
   b8a0e:	0000      	.short	0x0000
   b8a10:	00030278 	.word	0x00030278

000b8a14 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b8a14:	b508      	push	{r3, lr}
   b8a16:	4b03      	ldr	r3, [pc, #12]	; (b8a24 <hal_ble_gatt_server_add_service+0x10>)
   b8a18:	681b      	ldr	r3, [r3, #0]
   b8a1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b8a1e:	9301      	str	r3, [sp, #4]
   b8a20:	bd08      	pop	{r3, pc}
   b8a22:	0000      	.short	0x0000
   b8a24:	00030278 	.word	0x00030278

000b8a28 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8a28:	b508      	push	{r3, lr}
   b8a2a:	4b03      	ldr	r3, [pc, #12]	; (b8a38 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b8a2c:	681b      	ldr	r3, [r3, #0]
   b8a2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b8a32:	9301      	str	r3, [sp, #4]
   b8a34:	bd08      	pop	{r3, pc}
   b8a36:	0000      	.short	0x0000
   b8a38:	00030278 	.word	0x00030278

000b8a3c <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8a3c:	b508      	push	{r3, lr}
   b8a3e:	4b03      	ldr	r3, [pc, #12]	; (b8a4c <hal_ble_gatt_client_write_with_response+0x10>)
   b8a40:	681b      	ldr	r3, [r3, #0]
   b8a42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b8a46:	9301      	str	r3, [sp, #4]
   b8a48:	bd08      	pop	{r3, pc}
   b8a4a:	0000      	.short	0x0000
   b8a4c:	00030278 	.word	0x00030278

000b8a50 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8a50:	b508      	push	{r3, lr}
   b8a52:	4b03      	ldr	r3, [pc, #12]	; (b8a60 <hal_ble_gatt_client_write_without_response+0x10>)
   b8a54:	681b      	ldr	r3, [r3, #0]
   b8a56:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b8a5a:	9301      	str	r3, [sp, #4]
   b8a5c:	bd08      	pop	{r3, pc}
   b8a5e:	0000      	.short	0x0000
   b8a60:	00030278 	.word	0x00030278

000b8a64 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b8a64:	b508      	push	{r3, lr}
   b8a66:	4b03      	ldr	r3, [pc, #12]	; (b8a74 <hal_ble_gatt_server_add_characteristic+0x10>)
   b8a68:	681b      	ldr	r3, [r3, #0]
   b8a6a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b8a6e:	9301      	str	r3, [sp, #4]
   b8a70:	bd08      	pop	{r3, pc}
   b8a72:	0000      	.short	0x0000
   b8a74:	00030278 	.word	0x00030278

000b8a78 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b8a78:	b508      	push	{r3, lr}
   b8a7a:	4b03      	ldr	r3, [pc, #12]	; (b8a88 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b8a7c:	681b      	ldr	r3, [r3, #0]
   b8a7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b8a82:	9301      	str	r3, [sp, #4]
   b8a84:	bd08      	pop	{r3, pc}
   b8a86:	0000      	.short	0x0000
   b8a88:	00030278 	.word	0x00030278

000b8a8c <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8a8c:	b508      	push	{r3, lr}
   b8a8e:	4b03      	ldr	r3, [pc, #12]	; (b8a9c <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b8a90:	681b      	ldr	r3, [r3, #0]
   b8a92:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b8a96:	9301      	str	r3, [sp, #4]
   b8a98:	bd08      	pop	{r3, pc}
   b8a9a:	0000      	.short	0x0000
   b8a9c:	00030278 	.word	0x00030278

000b8aa0 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8aa0:	b508      	push	{r3, lr}
   b8aa2:	4b03      	ldr	r3, [pc, #12]	; (b8ab0 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b8aa4:	681b      	ldr	r3, [r3, #0]
   b8aa6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b8aaa:	9301      	str	r3, [sp, #4]
   b8aac:	bd08      	pop	{r3, pc}
   b8aae:	0000      	.short	0x0000
   b8ab0:	00030278 	.word	0x00030278

000b8ab4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b8ab4:	b508      	push	{r3, lr}
   b8ab6:	4b02      	ldr	r3, [pc, #8]	; (b8ac0 <os_mutex_recursive_create+0xc>)
   b8ab8:	681b      	ldr	r3, [r3, #0]
   b8aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8abc:	9301      	str	r3, [sp, #4]
   b8abe:	bd08      	pop	{r3, pc}
   b8ac0:	00030248 	.word	0x00030248

000b8ac4 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b8ac4:	b508      	push	{r3, lr}
   b8ac6:	4b02      	ldr	r3, [pc, #8]	; (b8ad0 <os_mutex_recursive_lock+0xc>)
   b8ac8:	681b      	ldr	r3, [r3, #0]
   b8aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8acc:	9301      	str	r3, [sp, #4]
   b8ace:	bd08      	pop	{r3, pc}
   b8ad0:	00030248 	.word	0x00030248

000b8ad4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b8ad4:	b508      	push	{r3, lr}
   b8ad6:	4b02      	ldr	r3, [pc, #8]	; (b8ae0 <os_mutex_recursive_unlock+0xc>)
   b8ad8:	681b      	ldr	r3, [r3, #0]
   b8ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8adc:	9301      	str	r3, [sp, #4]
   b8ade:	bd08      	pop	{r3, pc}
   b8ae0:	00030248 	.word	0x00030248

000b8ae4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8ae4:	b508      	push	{r3, lr}
   b8ae6:	4b02      	ldr	r3, [pc, #8]	; (b8af0 <HAL_RNG_GetRandomNumber+0xc>)
   b8ae8:	681b      	ldr	r3, [r3, #0]
   b8aea:	685b      	ldr	r3, [r3, #4]
   b8aec:	9301      	str	r3, [sp, #4]
   b8aee:	bd08      	pop	{r3, pc}
   b8af0:	00030218 	.word	0x00030218

000b8af4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8af4:	b508      	push	{r3, lr}
   b8af6:	4b02      	ldr	r3, [pc, #8]	; (b8b00 <HAL_Delay_Microseconds+0xc>)
   b8af8:	681b      	ldr	r3, [r3, #0]
   b8afa:	68db      	ldr	r3, [r3, #12]
   b8afc:	9301      	str	r3, [sp, #4]
   b8afe:	bd08      	pop	{r3, pc}
   b8b00:	00030218 	.word	0x00030218

000b8b04 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b8b04:	b508      	push	{r3, lr}
   b8b06:	4b02      	ldr	r3, [pc, #8]	; (b8b10 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b8b08:	681b      	ldr	r3, [r3, #0]
   b8b0a:	695b      	ldr	r3, [r3, #20]
   b8b0c:	9301      	str	r3, [sp, #4]
   b8b0e:	bd08      	pop	{r3, pc}
   b8b10:	00030218 	.word	0x00030218

000b8b14 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b8b14:	b508      	push	{r3, lr}
   b8b16:	4b02      	ldr	r3, [pc, #8]	; (b8b20 <hal_i2c_begin+0xc>)
   b8b18:	681b      	ldr	r3, [r3, #0]
   b8b1a:	68db      	ldr	r3, [r3, #12]
   b8b1c:	9301      	str	r3, [sp, #4]
   b8b1e:	bd08      	pop	{r3, pc}
   b8b20:	00030228 	.word	0x00030228

000b8b24 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b8b24:	b508      	push	{r3, lr}
   b8b26:	4b02      	ldr	r3, [pc, #8]	; (b8b30 <hal_i2c_begin_transmission+0xc>)
   b8b28:	681b      	ldr	r3, [r3, #0]
   b8b2a:	699b      	ldr	r3, [r3, #24]
   b8b2c:	9301      	str	r3, [sp, #4]
   b8b2e:	bd08      	pop	{r3, pc}
   b8b30:	00030228 	.word	0x00030228

000b8b34 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b8b34:	b508      	push	{r3, lr}
   b8b36:	4b02      	ldr	r3, [pc, #8]	; (b8b40 <hal_i2c_end_transmission+0xc>)
   b8b38:	681b      	ldr	r3, [r3, #0]
   b8b3a:	69db      	ldr	r3, [r3, #28]
   b8b3c:	9301      	str	r3, [sp, #4]
   b8b3e:	bd08      	pop	{r3, pc}
   b8b40:	00030228 	.word	0x00030228

000b8b44 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b8b44:	b508      	push	{r3, lr}
   b8b46:	4b02      	ldr	r3, [pc, #8]	; (b8b50 <hal_i2c_write+0xc>)
   b8b48:	681b      	ldr	r3, [r3, #0]
   b8b4a:	6a1b      	ldr	r3, [r3, #32]
   b8b4c:	9301      	str	r3, [sp, #4]
   b8b4e:	bd08      	pop	{r3, pc}
   b8b50:	00030228 	.word	0x00030228

000b8b54 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b8b54:	b508      	push	{r3, lr}
   b8b56:	4b02      	ldr	r3, [pc, #8]	; (b8b60 <hal_i2c_available+0xc>)
   b8b58:	681b      	ldr	r3, [r3, #0]
   b8b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8b5c:	9301      	str	r3, [sp, #4]
   b8b5e:	bd08      	pop	{r3, pc}
   b8b60:	00030228 	.word	0x00030228

000b8b64 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b8b64:	b508      	push	{r3, lr}
   b8b66:	4b02      	ldr	r3, [pc, #8]	; (b8b70 <hal_i2c_read+0xc>)
   b8b68:	681b      	ldr	r3, [r3, #0]
   b8b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8b6c:	9301      	str	r3, [sp, #4]
   b8b6e:	bd08      	pop	{r3, pc}
   b8b70:	00030228 	.word	0x00030228

000b8b74 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b8b74:	b508      	push	{r3, lr}
   b8b76:	4b02      	ldr	r3, [pc, #8]	; (b8b80 <hal_i2c_peek+0xc>)
   b8b78:	681b      	ldr	r3, [r3, #0]
   b8b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8b7c:	9301      	str	r3, [sp, #4]
   b8b7e:	bd08      	pop	{r3, pc}
   b8b80:	00030228 	.word	0x00030228

000b8b84 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b8b84:	b508      	push	{r3, lr}
   b8b86:	4b02      	ldr	r3, [pc, #8]	; (b8b90 <hal_i2c_flush+0xc>)
   b8b88:	681b      	ldr	r3, [r3, #0]
   b8b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8b8c:	9301      	str	r3, [sp, #4]
   b8b8e:	bd08      	pop	{r3, pc}
   b8b90:	00030228 	.word	0x00030228

000b8b94 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b8b94:	b508      	push	{r3, lr}
   b8b96:	4b02      	ldr	r3, [pc, #8]	; (b8ba0 <hal_i2c_init+0xc>)
   b8b98:	681b      	ldr	r3, [r3, #0]
   b8b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8b9c:	9301      	str	r3, [sp, #4]
   b8b9e:	bd08      	pop	{r3, pc}
   b8ba0:	00030228 	.word	0x00030228

000b8ba4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b8ba4:	b508      	push	{r3, lr}
   b8ba6:	4b02      	ldr	r3, [pc, #8]	; (b8bb0 <hal_i2c_request_ex+0xc>)
   b8ba8:	681b      	ldr	r3, [r3, #0]
   b8baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8bac:	9301      	str	r3, [sp, #4]
   b8bae:	bd08      	pop	{r3, pc}
   b8bb0:	00030228 	.word	0x00030228

000b8bb4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b8bb4:	b508      	push	{r3, lr}
   b8bb6:	4b02      	ldr	r3, [pc, #8]	; (b8bc0 <if_index_to_name+0xc>)
   b8bb8:	681b      	ldr	r3, [r3, #0]
   b8bba:	695b      	ldr	r3, [r3, #20]
   b8bbc:	9301      	str	r3, [sp, #4]
   b8bbe:	bd08      	pop	{r3, pc}
   b8bc0:	0003026c 	.word	0x0003026c

000b8bc4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b8bc4:	b508      	push	{r3, lr}
   b8bc6:	4b02      	ldr	r3, [pc, #8]	; (b8bd0 <inet_inet_ntop+0xc>)
   b8bc8:	681b      	ldr	r3, [r3, #0]
   b8bca:	695b      	ldr	r3, [r3, #20]
   b8bcc:	9301      	str	r3, [sp, #4]
   b8bce:	bd08      	pop	{r3, pc}
   b8bd0:	00030264 	.word	0x00030264

000b8bd4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b8bd4:	b508      	push	{r3, lr}
   b8bd6:	4b02      	ldr	r3, [pc, #8]	; (b8be0 <inet_htonl+0xc>)
   b8bd8:	681b      	ldr	r3, [r3, #0]
   b8bda:	6a1b      	ldr	r3, [r3, #32]
   b8bdc:	9301      	str	r3, [sp, #4]
   b8bde:	bd08      	pop	{r3, pc}
   b8be0:	00030264 	.word	0x00030264

000b8be4 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b8be4:	b508      	push	{r3, lr}
   b8be6:	4b02      	ldr	r3, [pc, #8]	; (b8bf0 <inet_htons+0xc>)
   b8be8:	681b      	ldr	r3, [r3, #0]
   b8bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8bec:	9301      	str	r3, [sp, #4]
   b8bee:	bd08      	pop	{r3, pc}
   b8bf0:	00030264 	.word	0x00030264

000b8bf4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b8bf4:	b508      	push	{r3, lr}
   b8bf6:	4b02      	ldr	r3, [pc, #8]	; (b8c00 <netdb_freeaddrinfo+0xc>)
   b8bf8:	681b      	ldr	r3, [r3, #0]
   b8bfa:	689b      	ldr	r3, [r3, #8]
   b8bfc:	9301      	str	r3, [sp, #4]
   b8bfe:	bd08      	pop	{r3, pc}
   b8c00:	00030268 	.word	0x00030268

000b8c04 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b8c04:	b508      	push	{r3, lr}
   b8c06:	4b02      	ldr	r3, [pc, #8]	; (b8c10 <netdb_getaddrinfo+0xc>)
   b8c08:	681b      	ldr	r3, [r3, #0]
   b8c0a:	68db      	ldr	r3, [r3, #12]
   b8c0c:	9301      	str	r3, [sp, #4]
   b8c0e:	bd08      	pop	{r3, pc}
   b8c10:	00030268 	.word	0x00030268

000b8c14 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b8c14:	b508      	push	{r3, lr}
   b8c16:	4b02      	ldr	r3, [pc, #8]	; (b8c20 <sock_setsockopt+0xc>)
   b8c18:	681b      	ldr	r3, [r3, #0]
   b8c1a:	699b      	ldr	r3, [r3, #24]
   b8c1c:	9301      	str	r3, [sp, #4]
   b8c1e:	bd08      	pop	{r3, pc}
   b8c20:	00030238 	.word	0x00030238

000b8c24 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b8c24:	b508      	push	{r3, lr}
   b8c26:	4b02      	ldr	r3, [pc, #8]	; (b8c30 <sock_close+0xc>)
   b8c28:	681b      	ldr	r3, [r3, #0]
   b8c2a:	69db      	ldr	r3, [r3, #28]
   b8c2c:	9301      	str	r3, [sp, #4]
   b8c2e:	bd08      	pop	{r3, pc}
   b8c30:	00030238 	.word	0x00030238

000b8c34 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b8c34:	b508      	push	{r3, lr}
   b8c36:	4b02      	ldr	r3, [pc, #8]	; (b8c40 <sock_connect+0xc>)
   b8c38:	681b      	ldr	r3, [r3, #0]
   b8c3a:	6a1b      	ldr	r3, [r3, #32]
   b8c3c:	9301      	str	r3, [sp, #4]
   b8c3e:	bd08      	pop	{r3, pc}
   b8c40:	00030238 	.word	0x00030238

000b8c44 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b8c44:	b508      	push	{r3, lr}
   b8c46:	4b02      	ldr	r3, [pc, #8]	; (b8c50 <sock_recv+0xc>)
   b8c48:	681b      	ldr	r3, [r3, #0]
   b8c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8c4c:	9301      	str	r3, [sp, #4]
   b8c4e:	bd08      	pop	{r3, pc}
   b8c50:	00030238 	.word	0x00030238

000b8c54 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b8c54:	b508      	push	{r3, lr}
   b8c56:	4b02      	ldr	r3, [pc, #8]	; (b8c60 <sock_send+0xc>)
   b8c58:	681b      	ldr	r3, [r3, #0]
   b8c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8c5c:	9301      	str	r3, [sp, #4]
   b8c5e:	bd08      	pop	{r3, pc}
   b8c60:	00030238 	.word	0x00030238

000b8c64 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b8c64:	b508      	push	{r3, lr}
   b8c66:	4b02      	ldr	r3, [pc, #8]	; (b8c70 <sock_socket+0xc>)
   b8c68:	681b      	ldr	r3, [r3, #0]
   b8c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b8c6c:	9301      	str	r3, [sp, #4]
   b8c6e:	bd08      	pop	{r3, pc}
   b8c70:	00030238 	.word	0x00030238

000b8c74 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b8c74:	b508      	push	{r3, lr}
   b8c76:	4b02      	ldr	r3, [pc, #8]	; (b8c80 <hal_usart_write+0xc>)
   b8c78:	681b      	ldr	r3, [r3, #0]
   b8c7a:	68db      	ldr	r3, [r3, #12]
   b8c7c:	9301      	str	r3, [sp, #4]
   b8c7e:	bd08      	pop	{r3, pc}
   b8c80:	0003023c 	.word	0x0003023c

000b8c84 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b8c84:	b508      	push	{r3, lr}
   b8c86:	4b02      	ldr	r3, [pc, #8]	; (b8c90 <hal_usart_available+0xc>)
   b8c88:	681b      	ldr	r3, [r3, #0]
   b8c8a:	691b      	ldr	r3, [r3, #16]
   b8c8c:	9301      	str	r3, [sp, #4]
   b8c8e:	bd08      	pop	{r3, pc}
   b8c90:	0003023c 	.word	0x0003023c

000b8c94 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b8c94:	b508      	push	{r3, lr}
   b8c96:	4b02      	ldr	r3, [pc, #8]	; (b8ca0 <hal_usart_read+0xc>)
   b8c98:	681b      	ldr	r3, [r3, #0]
   b8c9a:	695b      	ldr	r3, [r3, #20]
   b8c9c:	9301      	str	r3, [sp, #4]
   b8c9e:	bd08      	pop	{r3, pc}
   b8ca0:	0003023c 	.word	0x0003023c

000b8ca4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b8ca4:	b508      	push	{r3, lr}
   b8ca6:	4b02      	ldr	r3, [pc, #8]	; (b8cb0 <hal_usart_peek+0xc>)
   b8ca8:	681b      	ldr	r3, [r3, #0]
   b8caa:	699b      	ldr	r3, [r3, #24]
   b8cac:	9301      	str	r3, [sp, #4]
   b8cae:	bd08      	pop	{r3, pc}
   b8cb0:	0003023c 	.word	0x0003023c

000b8cb4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b8cb4:	b508      	push	{r3, lr}
   b8cb6:	4b02      	ldr	r3, [pc, #8]	; (b8cc0 <hal_usart_flush+0xc>)
   b8cb8:	681b      	ldr	r3, [r3, #0]
   b8cba:	69db      	ldr	r3, [r3, #28]
   b8cbc:	9301      	str	r3, [sp, #4]
   b8cbe:	bd08      	pop	{r3, pc}
   b8cc0:	0003023c 	.word	0x0003023c

000b8cc4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b8cc4:	b508      	push	{r3, lr}
   b8cc6:	4b02      	ldr	r3, [pc, #8]	; (b8cd0 <hal_usart_available_data_for_write+0xc>)
   b8cc8:	681b      	ldr	r3, [r3, #0]
   b8cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8ccc:	9301      	str	r3, [sp, #4]
   b8cce:	bd08      	pop	{r3, pc}
   b8cd0:	0003023c 	.word	0x0003023c

000b8cd4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b8cd4:	b508      	push	{r3, lr}
   b8cd6:	4b02      	ldr	r3, [pc, #8]	; (b8ce0 <hal_usart_init_ex+0xc>)
   b8cd8:	681b      	ldr	r3, [r3, #0]
   b8cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8cdc:	9301      	str	r3, [sp, #4]
   b8cde:	bd08      	pop	{r3, pc}
   b8ce0:	0003023c 	.word	0x0003023c

000b8ce4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b8ce4:	b508      	push	{r3, lr}
   b8ce6:	4b02      	ldr	r3, [pc, #8]	; (b8cf0 <HAL_USB_USART_Init+0xc>)
   b8ce8:	681b      	ldr	r3, [r3, #0]
   b8cea:	681b      	ldr	r3, [r3, #0]
   b8cec:	9301      	str	r3, [sp, #4]
   b8cee:	bd08      	pop	{r3, pc}
   b8cf0:	0003024c 	.word	0x0003024c

000b8cf4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b8cf4:	b508      	push	{r3, lr}
   b8cf6:	4b02      	ldr	r3, [pc, #8]	; (b8d00 <HAL_USB_USART_Begin+0xc>)
   b8cf8:	681b      	ldr	r3, [r3, #0]
   b8cfa:	685b      	ldr	r3, [r3, #4]
   b8cfc:	9301      	str	r3, [sp, #4]
   b8cfe:	bd08      	pop	{r3, pc}
   b8d00:	0003024c 	.word	0x0003024c

000b8d04 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b8d04:	b508      	push	{r3, lr}
   b8d06:	4b02      	ldr	r3, [pc, #8]	; (b8d10 <HAL_USB_USART_Available_Data+0xc>)
   b8d08:	681b      	ldr	r3, [r3, #0]
   b8d0a:	691b      	ldr	r3, [r3, #16]
   b8d0c:	9301      	str	r3, [sp, #4]
   b8d0e:	bd08      	pop	{r3, pc}
   b8d10:	0003024c 	.word	0x0003024c

000b8d14 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b8d14:	b508      	push	{r3, lr}
   b8d16:	4b02      	ldr	r3, [pc, #8]	; (b8d20 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b8d18:	681b      	ldr	r3, [r3, #0]
   b8d1a:	695b      	ldr	r3, [r3, #20]
   b8d1c:	9301      	str	r3, [sp, #4]
   b8d1e:	bd08      	pop	{r3, pc}
   b8d20:	0003024c 	.word	0x0003024c

000b8d24 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8d24:	b508      	push	{r3, lr}
   b8d26:	4b02      	ldr	r3, [pc, #8]	; (b8d30 <HAL_USB_USART_Receive_Data+0xc>)
   b8d28:	681b      	ldr	r3, [r3, #0]
   b8d2a:	699b      	ldr	r3, [r3, #24]
   b8d2c:	9301      	str	r3, [sp, #4]
   b8d2e:	bd08      	pop	{r3, pc}
   b8d30:	0003024c 	.word	0x0003024c

000b8d34 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8d34:	b508      	push	{r3, lr}
   b8d36:	4b02      	ldr	r3, [pc, #8]	; (b8d40 <HAL_USB_USART_Send_Data+0xc>)
   b8d38:	681b      	ldr	r3, [r3, #0]
   b8d3a:	69db      	ldr	r3, [r3, #28]
   b8d3c:	9301      	str	r3, [sp, #4]
   b8d3e:	bd08      	pop	{r3, pc}
   b8d40:	0003024c 	.word	0x0003024c

000b8d44 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b8d44:	b508      	push	{r3, lr}
   b8d46:	4b02      	ldr	r3, [pc, #8]	; (b8d50 <HAL_USB_USART_Flush_Data+0xc>)
   b8d48:	681b      	ldr	r3, [r3, #0]
   b8d4a:	6a1b      	ldr	r3, [r3, #32]
   b8d4c:	9301      	str	r3, [sp, #4]
   b8d4e:	bd08      	pop	{r3, pc}
   b8d50:	0003024c 	.word	0x0003024c

000b8d54 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b8d54:	b508      	push	{r3, lr}
   b8d56:	4b02      	ldr	r3, [pc, #8]	; (b8d60 <panic_+0xc>)
   b8d58:	681b      	ldr	r3, [r3, #0]
   b8d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8d5c:	9301      	str	r3, [sp, #4]
   b8d5e:	bd08      	pop	{r3, pc}
   b8d60:	00030260 	.word	0x00030260

000b8d64 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b8d64:	b508      	push	{r3, lr}
   b8d66:	4b02      	ldr	r3, [pc, #8]	; (b8d70 <log_message+0xc>)
   b8d68:	681b      	ldr	r3, [r3, #0]
   b8d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8d6c:	9301      	str	r3, [sp, #4]
   b8d6e:	bd08      	pop	{r3, pc}
   b8d70:	00030260 	.word	0x00030260

000b8d74 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b8d74:	b508      	push	{r3, lr}
   b8d76:	4b02      	ldr	r3, [pc, #8]	; (b8d80 <set_system_mode+0xc>)
   b8d78:	681b      	ldr	r3, [r3, #0]
   b8d7a:	685b      	ldr	r3, [r3, #4]
   b8d7c:	9301      	str	r3, [sp, #4]
   b8d7e:	bd08      	pop	{r3, pc}
   b8d80:	00030220 	.word	0x00030220

000b8d84 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b8d84:	b508      	push	{r3, lr}
   b8d86:	4b02      	ldr	r3, [pc, #8]	; (b8d90 <system_delay_ms+0xc>)
   b8d88:	681b      	ldr	r3, [r3, #0]
   b8d8a:	695b      	ldr	r3, [r3, #20]
   b8d8c:	9301      	str	r3, [sp, #4]
   b8d8e:	bd08      	pop	{r3, pc}
   b8d90:	00030220 	.word	0x00030220

000b8d94 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b8d94:	b508      	push	{r3, lr}
   b8d96:	4b03      	ldr	r3, [pc, #12]	; (b8da4 <system_ctrl_set_app_request_handler+0x10>)
   b8d98:	681b      	ldr	r3, [r3, #0]
   b8d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b8d9e:	9301      	str	r3, [sp, #4]
   b8da0:	bd08      	pop	{r3, pc}
   b8da2:	0000      	.short	0x0000
   b8da4:	00030220 	.word	0x00030220

000b8da8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b8da8:	b508      	push	{r3, lr}
   b8daa:	4b03      	ldr	r3, [pc, #12]	; (b8db8 <system_ctrl_set_result+0x10>)
   b8dac:	681b      	ldr	r3, [r3, #0]
   b8dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b8db2:	9301      	str	r3, [sp, #4]
   b8db4:	bd08      	pop	{r3, pc}
   b8db6:	0000      	.short	0x0000
   b8db8:	00030220 	.word	0x00030220

000b8dbc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8dbc:	b508      	push	{r3, lr}
   b8dbe:	4b02      	ldr	r3, [pc, #8]	; (b8dc8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b8dc0:	681b      	ldr	r3, [r3, #0]
   b8dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8dc4:	9301      	str	r3, [sp, #4]
   b8dc6:	bd08      	pop	{r3, pc}
   b8dc8:	00030244 	.word	0x00030244

000b8dcc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b8dcc:	b508      	push	{r3, lr}
   b8dce:	4b02      	ldr	r3, [pc, #8]	; (b8dd8 <network_connect+0xc>)
   b8dd0:	681b      	ldr	r3, [r3, #0]
   b8dd2:	685b      	ldr	r3, [r3, #4]
   b8dd4:	9301      	str	r3, [sp, #4]
   b8dd6:	bd08      	pop	{r3, pc}
   b8dd8:	00030240 	.word	0x00030240

000b8ddc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b8ddc:	b508      	push	{r3, lr}
   b8dde:	4b02      	ldr	r3, [pc, #8]	; (b8de8 <network_connecting+0xc>)
   b8de0:	681b      	ldr	r3, [r3, #0]
   b8de2:	689b      	ldr	r3, [r3, #8]
   b8de4:	9301      	str	r3, [sp, #4]
   b8de6:	bd08      	pop	{r3, pc}
   b8de8:	00030240 	.word	0x00030240

000b8dec <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b8dec:	b508      	push	{r3, lr}
   b8dee:	4b02      	ldr	r3, [pc, #8]	; (b8df8 <network_disconnect+0xc>)
   b8df0:	681b      	ldr	r3, [r3, #0]
   b8df2:	68db      	ldr	r3, [r3, #12]
   b8df4:	9301      	str	r3, [sp, #4]
   b8df6:	bd08      	pop	{r3, pc}
   b8df8:	00030240 	.word	0x00030240

000b8dfc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b8dfc:	b508      	push	{r3, lr}
   b8dfe:	4b02      	ldr	r3, [pc, #8]	; (b8e08 <network_ready+0xc>)
   b8e00:	681b      	ldr	r3, [r3, #0]
   b8e02:	691b      	ldr	r3, [r3, #16]
   b8e04:	9301      	str	r3, [sp, #4]
   b8e06:	bd08      	pop	{r3, pc}
   b8e08:	00030240 	.word	0x00030240

000b8e0c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b8e0c:	b508      	push	{r3, lr}
   b8e0e:	4b02      	ldr	r3, [pc, #8]	; (b8e18 <network_on+0xc>)
   b8e10:	681b      	ldr	r3, [r3, #0]
   b8e12:	695b      	ldr	r3, [r3, #20]
   b8e14:	9301      	str	r3, [sp, #4]
   b8e16:	bd08      	pop	{r3, pc}
   b8e18:	00030240 	.word	0x00030240

000b8e1c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b8e1c:	b508      	push	{r3, lr}
   b8e1e:	4b02      	ldr	r3, [pc, #8]	; (b8e28 <network_off+0xc>)
   b8e20:	681b      	ldr	r3, [r3, #0]
   b8e22:	699b      	ldr	r3, [r3, #24]
   b8e24:	9301      	str	r3, [sp, #4]
   b8e26:	bd08      	pop	{r3, pc}
   b8e28:	00030240 	.word	0x00030240

000b8e2c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b8e2c:	b508      	push	{r3, lr}
   b8e2e:	4b02      	ldr	r3, [pc, #8]	; (b8e38 <network_listen+0xc>)
   b8e30:	681b      	ldr	r3, [r3, #0]
   b8e32:	69db      	ldr	r3, [r3, #28]
   b8e34:	9301      	str	r3, [sp, #4]
   b8e36:	bd08      	pop	{r3, pc}
   b8e38:	00030240 	.word	0x00030240

000b8e3c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b8e3c:	b508      	push	{r3, lr}
   b8e3e:	4b02      	ldr	r3, [pc, #8]	; (b8e48 <network_listening+0xc>)
   b8e40:	681b      	ldr	r3, [r3, #0]
   b8e42:	6a1b      	ldr	r3, [r3, #32]
   b8e44:	9301      	str	r3, [sp, #4]
   b8e46:	bd08      	pop	{r3, pc}
   b8e48:	00030240 	.word	0x00030240

000b8e4c <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   b8e4c:	b508      	push	{r3, lr}
   b8e4e:	4b02      	ldr	r3, [pc, #8]	; (b8e58 <network_has_credentials+0xc>)
   b8e50:	681b      	ldr	r3, [r3, #0]
   b8e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8e54:	9301      	str	r3, [sp, #4]
   b8e56:	bd08      	pop	{r3, pc}
   b8e58:	00030240 	.word	0x00030240

000b8e5c <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b8e5c:	b508      	push	{r3, lr}
   b8e5e:	4b02      	ldr	r3, [pc, #8]	; (b8e68 <network_set_credentials+0xc>)
   b8e60:	681b      	ldr	r3, [r3, #0]
   b8e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8e64:	9301      	str	r3, [sp, #4]
   b8e66:	bd08      	pop	{r3, pc}
   b8e68:	00030240 	.word	0x00030240

000b8e6c <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b8e6c:	b508      	push	{r3, lr}
   b8e6e:	4b02      	ldr	r3, [pc, #8]	; (b8e78 <network_set_listen_timeout+0xc>)
   b8e70:	681b      	ldr	r3, [r3, #0]
   b8e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8e74:	9301      	str	r3, [sp, #4]
   b8e76:	bd08      	pop	{r3, pc}
   b8e78:	00030240 	.word	0x00030240

000b8e7c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8e7c:	b508      	push	{r3, lr}
   b8e7e:	4b02      	ldr	r3, [pc, #8]	; (b8e88 <network_get_listen_timeout+0xc>)
   b8e80:	681b      	ldr	r3, [r3, #0]
   b8e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8e84:	9301      	str	r3, [sp, #4]
   b8e86:	bd08      	pop	{r3, pc}
   b8e88:	00030240 	.word	0x00030240

000b8e8c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8e8c:	b508      	push	{r3, lr}
   b8e8e:	4b02      	ldr	r3, [pc, #8]	; (b8e98 <network_is_on+0xc>)
   b8e90:	681b      	ldr	r3, [r3, #0]
   b8e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8e94:	9301      	str	r3, [sp, #4]
   b8e96:	bd08      	pop	{r3, pc}
   b8e98:	00030240 	.word	0x00030240

000b8e9c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8e9c:	b508      	push	{r3, lr}
   b8e9e:	4b02      	ldr	r3, [pc, #8]	; (b8ea8 <network_is_off+0xc>)
   b8ea0:	681b      	ldr	r3, [r3, #0]
   b8ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8ea4:	9301      	str	r3, [sp, #4]
   b8ea6:	bd08      	pop	{r3, pc}
   b8ea8:	00030240 	.word	0x00030240

000b8eac <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8eac:	b508      	push	{r3, lr}
   b8eae:	4b02      	ldr	r3, [pc, #8]	; (b8eb8 <malloc+0xc>)
   b8eb0:	681b      	ldr	r3, [r3, #0]
   b8eb2:	681b      	ldr	r3, [r3, #0]
   b8eb4:	9301      	str	r3, [sp, #4]
   b8eb6:	bd08      	pop	{r3, pc}
   b8eb8:	0003021c 	.word	0x0003021c

000b8ebc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8ebc:	b508      	push	{r3, lr}
   b8ebe:	4b02      	ldr	r3, [pc, #8]	; (b8ec8 <free+0xc>)
   b8ec0:	681b      	ldr	r3, [r3, #0]
   b8ec2:	685b      	ldr	r3, [r3, #4]
   b8ec4:	9301      	str	r3, [sp, #4]
   b8ec6:	bd08      	pop	{r3, pc}
   b8ec8:	0003021c 	.word	0x0003021c

000b8ecc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8ecc:	b508      	push	{r3, lr}
   b8ece:	4b02      	ldr	r3, [pc, #8]	; (b8ed8 <realloc+0xc>)
   b8ed0:	681b      	ldr	r3, [r3, #0]
   b8ed2:	689b      	ldr	r3, [r3, #8]
   b8ed4:	9301      	str	r3, [sp, #4]
   b8ed6:	bd08      	pop	{r3, pc}
   b8ed8:	0003021c 	.word	0x0003021c

000b8edc <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b8edc:	b508      	push	{r3, lr}
   b8ede:	4b02      	ldr	r3, [pc, #8]	; (b8ee8 <sscanf+0xc>)
   b8ee0:	681b      	ldr	r3, [r3, #0]
   b8ee2:	695b      	ldr	r3, [r3, #20]
   b8ee4:	9301      	str	r3, [sp, #4]
   b8ee6:	bd08      	pop	{r3, pc}
   b8ee8:	0003021c 	.word	0x0003021c

000b8eec <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8eec:	b508      	push	{r3, lr}
   b8eee:	4b02      	ldr	r3, [pc, #8]	; (b8ef8 <vsnprintf+0xc>)
   b8ef0:	681b      	ldr	r3, [r3, #0]
   b8ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8ef4:	9301      	str	r3, [sp, #4]
   b8ef6:	bd08      	pop	{r3, pc}
   b8ef8:	0003021c 	.word	0x0003021c

000b8efc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b8efc:	b508      	push	{r3, lr}
   b8efe:	4b02      	ldr	r3, [pc, #8]	; (b8f08 <abort+0xc>)
   b8f00:	681b      	ldr	r3, [r3, #0]
   b8f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8f04:	9301      	str	r3, [sp, #4]
   b8f06:	bd08      	pop	{r3, pc}
   b8f08:	0003021c 	.word	0x0003021c

000b8f0c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b8f0c:	b508      	push	{r3, lr}
   b8f0e:	4b02      	ldr	r3, [pc, #8]	; (b8f18 <_malloc_r+0xc>)
   b8f10:	681b      	ldr	r3, [r3, #0]
   b8f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8f14:	9301      	str	r3, [sp, #4]
   b8f16:	bd08      	pop	{r3, pc}
   b8f18:	0003021c 	.word	0x0003021c

000b8f1c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b8f1c:	b508      	push	{r3, lr}
   b8f1e:	4b02      	ldr	r3, [pc, #8]	; (b8f28 <__errno+0xc>)
   b8f20:	681b      	ldr	r3, [r3, #0]
   b8f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8f24:	9301      	str	r3, [sp, #4]
   b8f26:	bd08      	pop	{r3, pc}
   b8f28:	0003021c 	.word	0x0003021c

000b8f2c <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b8f2c:	b508      	push	{r3, lr}
   b8f2e:	4b02      	ldr	r3, [pc, #8]	; (b8f38 <__assert_func+0xc>)
   b8f30:	681b      	ldr	r3, [r3, #0]
   b8f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8f34:	9301      	str	r3, [sp, #4]
   b8f36:	bd08      	pop	{r3, pc}
   b8f38:	0003021c 	.word	0x0003021c

000b8f3c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b8f3c:	b508      	push	{r3, lr}
   b8f3e:	4b02      	ldr	r3, [pc, #8]	; (b8f48 <newlib_impure_ptr_callback+0xc>)
   b8f40:	681b      	ldr	r3, [r3, #0]
   b8f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8f44:	9301      	str	r3, [sp, #4]
   b8f46:	bd08      	pop	{r3, pc}
   b8f48:	0003021c 	.word	0x0003021c

000b8f4c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8f4c:	2100      	movs	r1, #0
   b8f4e:	f7ff bf19 	b.w	b8d84 <system_delay_ms>

000b8f52 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8f52:	4770      	bx	lr

000b8f54 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b8f54:	4770      	bx	lr

000b8f56 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b8f56:	4770      	bx	lr

000b8f58 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8f58:	4770      	bx	lr
	...

000b8f5c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8f5c:	4b06      	ldr	r3, [pc, #24]	; (b8f78 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8f5e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8f60:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b8f62:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8f66:	d005      	beq.n	b8f74 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8f68:	4608      	mov	r0, r1
   b8f6a:	f002 fb29 	bl	bb5c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8f6e:	2800      	cmp	r0, #0
   b8f70:	bf08      	it	eq
   b8f72:	2400      	moveq	r4, #0
      }
   b8f74:	4620      	mov	r0, r4
   b8f76:	bd10      	pop	{r4, pc}
   b8f78:	000bee10 	.word	0x000bee10

000b8f7c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8f7c:	4b06      	ldr	r3, [pc, #24]	; (b8f98 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8f7e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8f80:	b510      	push	{r4, lr}
   b8f82:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8f86:	d005      	beq.n	b8f94 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8f88:	4608      	mov	r0, r1
   b8f8a:	f002 fb19 	bl	bb5c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8f8e:	2800      	cmp	r0, #0
   b8f90:	bf08      	it	eq
   b8f92:	2400      	moveq	r4, #0
      }
   b8f94:	4620      	mov	r0, r4
   b8f96:	bd10      	pop	{r4, pc}
   b8f98:	000bee10 	.word	0x000bee10

000b8f9c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8f9c:	4b06      	ldr	r3, [pc, #24]	; (b8fb8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8f9e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8fa0:	b510      	push	{r4, lr}
   b8fa2:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8fa6:	d005      	beq.n	b8fb4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8fa8:	4608      	mov	r0, r1
   b8faa:	f002 fb09 	bl	bb5c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8fae:	2800      	cmp	r0, #0
   b8fb0:	bf08      	it	eq
   b8fb2:	2400      	moveq	r4, #0
      }
   b8fb4:	4620      	mov	r0, r4
   b8fb6:	bd10      	pop	{r4, pc}
   b8fb8:	000bee10 	.word	0x000bee10

000b8fbc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8fbc:	b510      	push	{r4, lr}
   b8fbe:	2168      	movs	r1, #104	; 0x68
   b8fc0:	4604      	mov	r4, r0
   b8fc2:	f7fb f86e 	bl	b40a2 <_ZdlPvj>
   b8fc6:	4620      	mov	r0, r4
   b8fc8:	bd10      	pop	{r4, pc}

000b8fca <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b8fca:	b510      	push	{r4, lr}
   b8fcc:	2128      	movs	r1, #40	; 0x28
   b8fce:	4604      	mov	r4, r0
   b8fd0:	f7fb f867 	bl	b40a2 <_ZdlPvj>
   b8fd4:	4620      	mov	r0, r4
   b8fd6:	bd10      	pop	{r4, pc}

000b8fd8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b8fd8:	b510      	push	{r4, lr}
   b8fda:	2130      	movs	r1, #48	; 0x30
   b8fdc:	4604      	mov	r4, r0
   b8fde:	f7fb f860 	bl	b40a2 <_ZdlPvj>
   b8fe2:	4620      	mov	r0, r4
   b8fe4:	bd10      	pop	{r4, pc}

000b8fe6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b8fe6:	2168      	movs	r1, #104	; 0x68
   b8fe8:	f7fb b85b 	b.w	b40a2 <_ZdlPvj>

000b8fec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b8fec:	2128      	movs	r1, #40	; 0x28
   b8fee:	f7fb b858 	b.w	b40a2 <_ZdlPvj>

000b8ff2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b8ff2:	2130      	movs	r1, #48	; 0x30
   b8ff4:	f7fb b855 	b.w	b40a2 <_ZdlPvj>

000b8ff8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b8ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b8ffa:	2500      	movs	r5, #0
   b8ffc:	1cec      	adds	r4, r5, #3
   b8ffe:	428c      	cmp	r4, r1
   b9000:	d80d      	bhi.n	b901e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b9002:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b9004:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b9006:	5d87      	ldrb	r7, [r0, r6]
   b9008:	4297      	cmp	r7, r2
   b900a:	d105      	bne.n	b9018 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b900c:	4426      	add	r6, r4
   b900e:	42b1      	cmp	r1, r6
   b9010:	d305      	bcc.n	b901e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b9012:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b9014:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b9016:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b9018:	3401      	adds	r4, #1
   b901a:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b901c:	e7ee      	b.n	b8ffc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b901e:	2000      	movs	r0, #0
   b9020:	e7f9      	b.n	b9016 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b9024 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b9024:	4a02      	ldr	r2, [pc, #8]	; (b9030 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b9026:	4903      	ldr	r1, [pc, #12]	; (b9034 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b9028:	200a      	movs	r0, #10
   b902a:	f7ff be93 	b.w	b8d54 <panic_>
   b902e:	bf00      	nop
   b9030:	000b8af5 	.word	0x000b8af5
   b9034:	000bec70 	.word	0x000bec70

000b9038 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b9038:	b430      	push	{r4, r5}
   b903a:	460d      	mov	r5, r1
   b903c:	4611      	mov	r1, r2
   b903e:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b9040:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b9042:	6809      	ldr	r1, [r1, #0]
   b9044:	6828      	ldr	r0, [r5, #0]
   b9046:	e9d3 4300 	ldrd	r4, r3, [r3]
   b904a:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b904c:	bc30      	pop	{r4, r5}
   b904e:	4760      	bx	ip

000b9050 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b9050:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b9052:	b538      	push	{r3, r4, r5, lr}
   b9054:	4604      	mov	r4, r0
	switch (__op)
   b9056:	d102      	bne.n	b905e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b9058:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b905a:	6023      	str	r3, [r4, #0]
	}
   b905c:	e003      	b.n	b9066 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b905e:	2a02      	cmp	r2, #2
   b9060:	d003      	beq.n	b906a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b9062:	2a03      	cmp	r2, #3
   b9064:	d00d      	beq.n	b9082 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b9066:	2000      	movs	r0, #0
   b9068:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b906a:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b906c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b906e:	f7fb f812 	bl	b4096 <_Znwj>
   b9072:	4603      	mov	r3, r0
   b9074:	2800      	cmp	r0, #0
   b9076:	d0f0      	beq.n	b905a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b9078:	e895 0003 	ldmia.w	r5, {r0, r1}
   b907c:	e883 0003 	stmia.w	r3, {r0, r1}
   b9080:	e7eb      	b.n	b905a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b9082:	6800      	ldr	r0, [r0, #0]
   b9084:	2800      	cmp	r0, #0
   b9086:	d0ee      	beq.n	b9066 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b9088:	2108      	movs	r1, #8
   b908a:	f7fb f80a 	bl	b40a2 <_ZdlPvj>
   b908e:	e7ea      	b.n	b9066 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b9090 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b9090:	b510      	push	{r4, lr}
      if (_M_manager)
   b9092:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b9094:	4604      	mov	r4, r0
      if (_M_manager)
   b9096:	b113      	cbz	r3, b909e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b9098:	2203      	movs	r2, #3
   b909a:	4601      	mov	r1, r0
   b909c:	4798      	blx	r3
    }
   b909e:	4620      	mov	r0, r4
   b90a0:	bd10      	pop	{r4, pc}

000b90a2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b90a2:	b510      	push	{r4, lr}
   b90a4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b90a6:	3058      	adds	r0, #88	; 0x58
   b90a8:	f7ff fff2 	bl	b9090 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b90ac:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b90b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b90b4:	f001 bb98 	b.w	ba7e8 <_ZN6StringD1Ev>

000b90b8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b90b8:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b90ba:	6843      	ldr	r3, [r0, #4]
   b90bc:	3b01      	subs	r3, #1
    {
   b90be:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b90c0:	6043      	str	r3, [r0, #4]
   b90c2:	b963      	cbnz	r3, b90de <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b90c4:	6803      	ldr	r3, [r0, #0]
   b90c6:	689b      	ldr	r3, [r3, #8]
   b90c8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b90ca:	68a3      	ldr	r3, [r4, #8]
   b90cc:	3b01      	subs	r3, #1
   b90ce:	60a3      	str	r3, [r4, #8]
   b90d0:	b92b      	cbnz	r3, b90de <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b90d2:	6823      	ldr	r3, [r4, #0]
   b90d4:	4620      	mov	r0, r4
   b90d6:	68db      	ldr	r3, [r3, #12]
    }
   b90d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b90dc:	4718      	bx	r3
    }
   b90de:	bd10      	pop	{r4, pc}

000b90e0 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b90e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b90e4:	b2da      	uxtb	r2, r3
   b90e6:	2a09      	cmp	r2, #9
   b90e8:	d801      	bhi.n	b90ee <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b90ea:	4618      	mov	r0, r3
   b90ec:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b90ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b90f2:	2b05      	cmp	r3, #5
   b90f4:	d801      	bhi.n	b90fa <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b90f6:	3857      	subs	r0, #87	; 0x57
   b90f8:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b90fa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b90fe:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b9100:	bf94      	ite	ls
   b9102:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b9104:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b9108:	4770      	bx	lr
	...

000b910c <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b910c:	b510      	push	{r4, lr}
            locked_(false) {
   b910e:	2300      	movs	r3, #0
   b9110:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b9112:	4b04      	ldr	r3, [pc, #16]	; (b9124 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b9114:	4604      	mov	r4, r0
   b9116:	6818      	ldr	r0, [r3, #0]
   b9118:	f7ff fcd4 	bl	b8ac4 <os_mutex_recursive_lock>
        locked_ = true;
   b911c:	2301      	movs	r3, #1
   b911e:	7023      	strb	r3, [r4, #0]
    }
   b9120:	4620      	mov	r0, r4
   b9122:	bd10      	pop	{r4, pc}
   b9124:	2003e6c0 	.word	0x2003e6c0

000b9128 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b9128:	b510      	push	{r4, lr}
        if (locked_) {
   b912a:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b912c:	4604      	mov	r4, r0
        if (locked_) {
   b912e:	b11b      	cbz	r3, b9138 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b9130:	4b02      	ldr	r3, [pc, #8]	; (b913c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b9132:	6818      	ldr	r0, [r3, #0]
   b9134:	f7ff fcce 	bl	b8ad4 <os_mutex_recursive_unlock>
    }
   b9138:	4620      	mov	r0, r4
   b913a:	bd10      	pop	{r4, pc}
   b913c:	2003e6c0 	.word	0x2003e6c0

000b9140 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b9140:	b082      	sub	sp, #8
   b9142:	4603      	mov	r3, r0
    address_ = addr;
   b9144:	6808      	ldr	r0, [r1, #0]
   b9146:	6849      	ldr	r1, [r1, #4]
   b9148:	466a      	mov	r2, sp
   b914a:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b914c:	466a      	mov	r2, sp
   b914e:	ca03      	ldmia	r2!, {r0, r1}
   b9150:	6018      	str	r0, [r3, #0]
}
   b9152:	4618      	mov	r0, r3
    address_ = addr.address_;
   b9154:	6059      	str	r1, [r3, #4]
}
   b9156:	b002      	add	sp, #8
   b9158:	4770      	bx	lr

000b915a <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b915a:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b915c:	7982      	ldrb	r2, [r0, #6]
   b915e:	798b      	ldrb	r3, [r1, #6]
   b9160:	429a      	cmp	r2, r3
   b9162:	d106      	bne.n	b9172 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b9164:	2206      	movs	r2, #6
   b9166:	f003 f9f7 	bl	bc558 <memcmp>
   b916a:	fab0 f080 	clz	r0, r0
   b916e:	0940      	lsrs	r0, r0, #5
}
   b9170:	bd08      	pop	{r3, pc}
    return false;
   b9172:	2000      	movs	r0, #0
   b9174:	e7fc      	b.n	b9170 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b9176 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b9176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b917a:	6003      	str	r3, [r0, #0]
   b917c:	8083      	strh	r3, [r0, #4]
}
   b917e:	2000      	movs	r0, #0
   b9180:	4770      	bx	lr

000b9182 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b9182:	b508      	push	{r3, lr}
   b9184:	4602      	mov	r2, r0
        : address_{} {
   b9186:	2100      	movs	r1, #0
   b9188:	6001      	str	r1, [r0, #0]
   b918a:	6041      	str	r1, [r0, #4]
    clear();
   b918c:	f7ff fff3 	bl	b9176 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b9190:	7191      	strb	r1, [r2, #6]
}
   b9192:	4610      	mov	r0, r2
   b9194:	bd08      	pop	{r3, pc}
	...

000b9198 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b9198:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b919a:	2301      	movs	r3, #1
   b919c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b919e:	4b05      	ldr	r3, [pc, #20]	; (b91b4 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b91a0:	4602      	mov	r2, r0
   b91a2:	f103 0110 	add.w	r1, r3, #16
   b91a6:	f853 4b04 	ldr.w	r4, [r3], #4
   b91aa:	f842 4b04 	str.w	r4, [r2], #4
   b91ae:	428b      	cmp	r3, r1
   b91b0:	d1f9      	bne.n	b91a6 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b91b2:	bd10      	pop	{r4, pc}
   b91b4:	000bee1e 	.word	0x000bee1e

000b91b8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b91b8:	b510      	push	{r4, lr}
    if (uuid128) {
   b91ba:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b91bc:	4604      	mov	r4, r0
    if (uuid128) {
   b91be:	b1b1      	cbz	r1, b91ee <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b91c0:	2a01      	cmp	r2, #1
   b91c2:	f101 0210 	add.w	r2, r1, #16
   b91c6:	d10a      	bne.n	b91de <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b91c8:	4601      	mov	r1, r0
   b91ca:	f853 0b04 	ldr.w	r0, [r3], #4
   b91ce:	f841 0b04 	str.w	r0, [r1], #4
   b91d2:	4293      	cmp	r3, r2
   b91d4:	d1f9      	bne.n	b91ca <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b91d6:	2301      	movs	r3, #1
   b91d8:	6123      	str	r3, [r4, #16]
}
   b91da:	4620      	mov	r0, r4
   b91dc:	bd10      	pop	{r4, pc}
   b91de:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b91e0:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b91e4:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b91e8:	429a      	cmp	r2, r3
   b91ea:	d1f9      	bne.n	b91e0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b91ec:	e7f3      	b.n	b91d6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b91ee:	2210      	movs	r2, #16
   b91f0:	f003 f9ea 	bl	bc5c8 <memset>
   b91f4:	e7f1      	b.n	b91da <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b91f6 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b91f6:	b538      	push	{r3, r4, r5, lr}
   b91f8:	4604      	mov	r4, r0
   b91fa:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b91fc:	461a      	mov	r2, r3
   b91fe:	f7ff ffdb 	bl	b91b8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b9202:	81a5      	strh	r5, [r4, #12]
}
   b9204:	4620      	mov	r0, r4
   b9206:	bd38      	pop	{r3, r4, r5, pc}

000b9208 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b9208:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b920a:	6902      	ldr	r2, [r0, #16]
   b920c:	b922      	cbnz	r2, b9218 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b920e:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9210:	3800      	subs	r0, #0
   b9212:	bf18      	it	ne
   b9214:	2001      	movne	r0, #1
}
   b9216:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9218:	4902      	ldr	r1, [pc, #8]	; (b9224 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b921a:	2210      	movs	r2, #16
   b921c:	f003 f99c 	bl	bc558 <memcmp>
   b9220:	e7f6      	b.n	b9210 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b9222:	bf00      	nop
   b9224:	000bee3e 	.word	0x000bee3e

000b9228 <_ZNK8particle7BleUuid4typeEv>:
}
   b9228:	6900      	ldr	r0, [r0, #16]
   b922a:	4770      	bx	lr

000b922c <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b922c:	b538      	push	{r3, r4, r5, lr}
   b922e:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b9230:	2214      	movs	r2, #20
   b9232:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b9234:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b9236:	f003 f9c7 	bl	bc5c8 <memset>
    if (type_ == BleUuidType::SHORT) {
   b923a:	6923      	ldr	r3, [r4, #16]
   b923c:	b91b      	cbnz	r3, b9246 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b923e:	89a3      	ldrh	r3, [r4, #12]
   b9240:	802b      	strh	r3, [r5, #0]
}
   b9242:	4628      	mov	r0, r5
   b9244:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b9246:	2301      	movs	r3, #1
   b9248:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b924a:	4621      	mov	r1, r4
   b924c:	462b      	mov	r3, r5
   b924e:	f104 0210 	add.w	r2, r4, #16
   b9252:	f851 0b04 	ldr.w	r0, [r1], #4
   b9256:	f843 0b04 	str.w	r0, [r3], #4
   b925a:	4291      	cmp	r1, r2
   b925c:	d1f9      	bne.n	b9252 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b925e:	e7f0      	b.n	b9242 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b9260 <_ZNK8particle7BleUuid7shortedEv>:
}
   b9260:	8980      	ldrh	r0, [r0, #12]
   b9262:	4770      	bx	lr

000b9264 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b9264:	4770      	bx	lr

000b9266 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b9266:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b9268:	6902      	ldr	r2, [r0, #16]
   b926a:	690b      	ldr	r3, [r1, #16]
   b926c:	429a      	cmp	r2, r3
   b926e:	d106      	bne.n	b927e <_ZNK8particle7BleUuideqERKS0_+0x18>
   b9270:	2210      	movs	r2, #16
   b9272:	f003 f971 	bl	bc558 <memcmp>
   b9276:	fab0 f080 	clz	r0, r0
   b927a:	0940      	lsrs	r0, r0, #5
}
   b927c:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b927e:	2000      	movs	r0, #0
   b9280:	e7fc      	b.n	b927c <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b9284 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b9284:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b9286:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b928a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b928c:	4b34      	ldr	r3, [pc, #208]	; (b9360 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b928e:	460c      	mov	r4, r1
   b9290:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9292:	4602      	mov	r2, r0
   b9294:	f103 0110 	add.w	r1, r3, #16
   b9298:	f853 0b04 	ldr.w	r0, [r3], #4
   b929c:	f842 0b04 	str.w	r0, [r2], #4
   b92a0:	428b      	cmp	r3, r1
   b92a2:	d1f9      	bne.n	b9298 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b92a4:	b344      	cbz	r4, b92f8 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b92a6:	2124      	movs	r1, #36	; 0x24
   b92a8:	4620      	mov	r0, r4
   b92aa:	f003 f9f1 	bl	bc690 <strnlen>
   b92ae:	2804      	cmp	r0, #4
   b92b0:	f04f 0500 	mov.w	r5, #0
   b92b4:	d123      	bne.n	b92fe <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b92b6:	f8ad 5004 	strh.w	r5, [sp, #4]
   b92ba:	af01      	add	r7, sp, #4
   b92bc:	1ca5      	adds	r5, r4, #2
   b92be:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b92c0:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b92c4:	f7ff ff0c 	bl	b90e0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b92c8:	f1b0 0800 	subs.w	r8, r0, #0
   b92cc:	db12      	blt.n	b92f4 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b92ce:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b92d2:	f7ff ff05 	bl	b90e0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b92d6:	2800      	cmp	r0, #0
   b92d8:	db0c      	blt.n	b92f4 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b92da:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b92dc:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b92e0:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b92e2:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b92e6:	d1eb      	bne.n	b92c0 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b92e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b92ec:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b92ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b92f2:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b92f4:	2300      	movs	r3, #0
   b92f6:	6133      	str	r3, [r6, #16]
}
   b92f8:	b002      	add	sp, #8
   b92fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b92fe:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b9302:	2124      	movs	r1, #36	; 0x24
   b9304:	4620      	mov	r0, r4
   b9306:	f003 f9c3 	bl	bc690 <strnlen>
   b930a:	42a8      	cmp	r0, r5
   b930c:	d807      	bhi.n	b931e <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b930e:	4642      	mov	r2, r8
   b9310:	2100      	movs	r1, #0
   b9312:	4630      	mov	r0, r6
}
   b9314:	b002      	add	sp, #8
   b9316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b931a:	f003 b955 	b.w	bc5c8 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b931e:	f1b8 0f00 	cmp.w	r8, #0
   b9322:	d0e9      	beq.n	b92f8 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b9324:	5d60      	ldrb	r0, [r4, r5]
   b9326:	f7ff fedb 	bl	b90e0 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b932a:	0603      	lsls	r3, r0, #24
   b932c:	d415      	bmi.n	b935a <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b932e:	0100      	lsls	r0, r0, #4
   b9330:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9334:	b2c7      	uxtb	r7, r0
   b9336:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b933a:	2124      	movs	r1, #36	; 0x24
   b933c:	4620      	mov	r0, r4
   b933e:	f003 f9a7 	bl	bc690 <strnlen>
   b9342:	3501      	adds	r5, #1
   b9344:	42a8      	cmp	r0, r5
   b9346:	d908      	bls.n	b935a <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b9348:	5d60      	ldrb	r0, [r4, r5]
   b934a:	f7ff fec9 	bl	b90e0 <_ZN8particle11hexToNibbleEc>
   b934e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b9350:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b9352:	bfa4      	itt	ge
   b9354:	4338      	orrge	r0, r7
   b9356:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b935a:	3501      	adds	r5, #1
   b935c:	e7d1      	b.n	b9302 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b935e:	bf00      	nop
   b9360:	000bee1e 	.word	0x000bee1e

000b9364 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b9364:	b513      	push	{r0, r1, r4, lr}
   b9366:	4604      	mov	r4, r0
   b9368:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b936a:	f7ff ff15 	bl	b9198 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b936e:	4620      	mov	r0, r4
   b9370:	9901      	ldr	r1, [sp, #4]
   b9372:	f7ff ff87 	bl	b9284 <_ZN8particle7BleUuid9constructEPKc>
}
   b9376:	4620      	mov	r0, r4
   b9378:	b002      	add	sp, #8
   b937a:	bd10      	pop	{r4, pc}

000b937c <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b937c:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b937e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9382:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b9384:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b9386:	8043      	strh	r3, [r0, #2]
   b9388:	220e      	movs	r2, #14
   b938a:	4629      	mov	r1, r5
   b938c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b938e:	7105      	strb	r5, [r0, #4]
   b9390:	3006      	adds	r0, #6
   b9392:	f003 f919 	bl	bc5c8 <memset>
   b9396:	f104 0014 	add.w	r0, r4, #20
   b939a:	f7ff fefd 	bl	b9198 <_ZN8particle7BleUuidC1Ev>
   b939e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b93a2:	f7ff fef9 	bl	b9198 <_ZN8particle7BleUuidC1Ev>
   b93a6:	4904      	ldr	r1, [pc, #16]	; (b93b8 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b93a8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b93ac:	f001 fa67 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b93b0:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b93b2:	4620      	mov	r0, r4
   b93b4:	bd38      	pop	{r3, r4, r5, pc}
   b93b6:	bf00      	nop
   b93b8:	000bec3a 	.word	0x000bec3a

000b93bc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b93bc:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b93be:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b93c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b93c6:	4293      	cmp	r3, r2
   b93c8:	4618      	mov	r0, r3
   b93ca:	d006      	beq.n	b93da <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b93cc:	6804      	ldr	r4, [r0, #0]
   b93ce:	8824      	ldrh	r4, [r4, #0]
   b93d0:	428c      	cmp	r4, r1
   b93d2:	f103 0308 	add.w	r3, r3, #8
   b93d6:	d1f6      	bne.n	b93c6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b93d8:	bd10      	pop	{r4, pc}
        return nullptr;
   b93da:	2000      	movs	r0, #0
   b93dc:	e7fc      	b.n	b93d8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b93e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b93e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b93e2:	4606      	mov	r6, r0
   b93e4:	b085      	sub	sp, #20
   b93e6:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b93e8:	460d      	mov	r5, r1
   b93ea:	2900      	cmp	r1, #0
   b93ec:	d050      	beq.n	b9490 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b93ee:	2a00      	cmp	r2, #0
   b93f0:	d04e      	beq.n	b9490 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b93f2:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b93f4:	7823      	ldrb	r3, [r4, #0]
   b93f6:	2af4      	cmp	r2, #244	; 0xf4
   b93f8:	bf28      	it	cs
   b93fa:	22f4      	movcs	r2, #244	; 0xf4
   b93fc:	b343      	cbz	r3, b9450 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b93fe:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b9400:	0798      	lsls	r0, r3, #30
   b9402:	d509      	bpl.n	b9418 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b9404:	89a0      	ldrh	r0, [r4, #12]
   b9406:	9203      	str	r2, [sp, #12]
   b9408:	2300      	movs	r3, #0
   b940a:	f7ff fb0d 	bl	b8a28 <hal_ble_gatt_server_set_characteristic_value>
   b940e:	2800      	cmp	r0, #0
   b9410:	9a03      	ldr	r2, [sp, #12]
   b9412:	da03      	bge.n	b941c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b9414:	b005      	add	sp, #20
   b9416:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b9418:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b941c:	6834      	ldr	r4, [r6, #0]
   b941e:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b9420:	06d9      	lsls	r1, r3, #27
   b9422:	d509      	bpl.n	b9438 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b9424:	2f01      	cmp	r7, #1
   b9426:	d007      	beq.n	b9438 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9428:	89a0      	ldrh	r0, [r4, #12]
   b942a:	2300      	movs	r3, #0
   b942c:	4629      	mov	r1, r5
}
   b942e:	b005      	add	sp, #20
   b9430:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9434:	f7ff bb2a 	b.w	b8a8c <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b9438:	069b      	lsls	r3, r3, #26
   b943a:	d5eb      	bpl.n	b9414 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b943c:	2f02      	cmp	r7, #2
   b943e:	d0e9      	beq.n	b9414 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9440:	89a0      	ldrh	r0, [r4, #12]
   b9442:	2300      	movs	r3, #0
   b9444:	4629      	mov	r1, r5
}
   b9446:	b005      	add	sp, #20
   b9448:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b944c:	f7ff bb28 	b.w	b8aa0 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b9450:	8860      	ldrh	r0, [r4, #2]
   b9452:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b9456:	4288      	cmp	r0, r1
   b9458:	d01c      	beq.n	b9494 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b945a:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b945c:	074e      	lsls	r6, r1, #29
   b945e:	d501      	bpl.n	b9464 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b9460:	2f01      	cmp	r7, #1
   b9462:	d104      	bne.n	b946e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b9464:	070b      	lsls	r3, r1, #28
   b9466:	d409      	bmi.n	b947c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b9468:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b946c:	e7d2      	b.n	b9414 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b946e:	89a1      	ldrh	r1, [r4, #12]
   b9470:	9300      	str	r3, [sp, #0]
   b9472:	4613      	mov	r3, r2
   b9474:	462a      	mov	r2, r5
   b9476:	f7ff faeb 	bl	b8a50 <hal_ble_gatt_client_write_without_response>
   b947a:	e7cb      	b.n	b9414 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b947c:	2f02      	cmp	r7, #2
   b947e:	d0f3      	beq.n	b9468 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b9480:	2300      	movs	r3, #0
   b9482:	89a1      	ldrh	r1, [r4, #12]
   b9484:	9300      	str	r3, [sp, #0]
   b9486:	4613      	mov	r3, r2
   b9488:	462a      	mov	r2, r5
   b948a:	f7ff fad7 	bl	b8a3c <hal_ble_gatt_client_write_with_response>
   b948e:	e7c1      	b.n	b9414 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b9490:	4802      	ldr	r0, [pc, #8]	; (b949c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b9492:	e7bf      	b.n	b9414 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b9494:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b9498:	e7bc      	b.n	b9414 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b949a:	bf00      	nop
   b949c:	fffffef2 	.word	0xfffffef2

000b94a0 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b94a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b94a2:	460c      	mov	r4, r1
   b94a4:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b94a6:	21f4      	movs	r1, #244	; 0xf4
   b94a8:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b94aa:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b94ac:	f003 f8f0 	bl	bc690 <strnlen>
   b94b0:	9b01      	ldr	r3, [sp, #4]
   b94b2:	4602      	mov	r2, r0
   b94b4:	4621      	mov	r1, r4
   b94b6:	4628      	mov	r0, r5
}
   b94b8:	b003      	add	sp, #12
   b94ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b94be:	f7ff bf8f 	b.w	b93e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b94c4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b94c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b94c8:	2600      	movs	r6, #0
   b94ca:	6006      	str	r6, [r0, #0]
   b94cc:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b94ce:	2028      	movs	r0, #40	; 0x28
   b94d0:	460c      	mov	r4, r1
   b94d2:	f7fa fde0 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b94d6:	1e05      	subs	r5, r0, #0
   b94d8:	f105 080c 	add.w	r8, r5, #12
   b94dc:	d00f      	beq.n	b94fe <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b94de:	2301      	movs	r3, #1
   b94e0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b94e4:	4b08      	ldr	r3, [pc, #32]	; (b9508 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b94e6:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b94e8:	4640      	mov	r0, r8
   b94ea:	f7ff fe55 	bl	b9198 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b94ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b94f0:	622e      	str	r6, [r5, #32]
   b94f2:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b94f6:	4646      	mov	r6, r8
   b94f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b94fa:	6823      	ldr	r3, [r4, #0]
   b94fc:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b94fe:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b9502:	4638      	mov	r0, r7
   b9504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9508:	000bede0 	.word	0x000bede0

000b950c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b950c:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b950e:	2500      	movs	r5, #0
   b9510:	6005      	str	r5, [r0, #0]
   b9512:	4606      	mov	r6, r0
   b9514:	2030      	movs	r0, #48	; 0x30
   b9516:	f7fa fdbe 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b951a:	4604      	mov	r4, r0
   b951c:	b188      	cbz	r0, b9542 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b951e:	2301      	movs	r3, #1
   b9520:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b9524:	4b09      	ldr	r3, [pc, #36]	; (b954c <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b9526:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b9528:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b952c:	8183      	strh	r3, [r0, #12]
   b952e:	300e      	adds	r0, #14
   b9530:	f7ff fe27 	bl	b9182 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b9534:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b9538:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b953c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b9540:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b9542:	6074      	str	r4, [r6, #4]
   b9544:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b9546:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b9548:	4630      	mov	r0, r6
   b954a:	bd70      	pop	{r4, r5, r6, pc}
   b954c:	000bedfc 	.word	0x000bedfc

000b9550 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b9550:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9552:	460d      	mov	r5, r1
   b9554:	4604      	mov	r4, r0
    WiringBleLock lk;
   b9556:	a801      	add	r0, sp, #4
   b9558:	f7ff fdd8 	bl	b910c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b955c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b955e:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b9562:	6023      	str	r3, [r4, #0]
   b9564:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b9568:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b956a:	a801      	add	r0, sp, #4
   b956c:	f7ff fddc 	bl	b9128 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b9570:	4620      	mov	r0, r4
   b9572:	b003      	add	sp, #12
   b9574:	bd30      	pop	{r4, r5, pc}

000b9576 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b9576:	b530      	push	{r4, r5, lr}
   b9578:	4605      	mov	r5, r0
   b957a:	b087      	sub	sp, #28
   b957c:	460c      	mov	r4, r1
    WiringBleLock lk;
   b957e:	a801      	add	r0, sp, #4
   b9580:	f7ff fdc4 	bl	b910c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b9584:	682a      	ldr	r2, [r5, #0]
   b9586:	6823      	ldr	r3, [r4, #0]
   b9588:	8812      	ldrh	r2, [r2, #0]
   b958a:	881b      	ldrh	r3, [r3, #0]
   b958c:	429a      	cmp	r2, r3
   b958e:	d10d      	bne.n	b95ac <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b9590:	4629      	mov	r1, r5
   b9592:	a802      	add	r0, sp, #8
   b9594:	f7ff ffdc 	bl	b9550 <_ZNK8particle13BlePeerDevice7addressEv>
   b9598:	4621      	mov	r1, r4
   b959a:	a804      	add	r0, sp, #16
   b959c:	f7ff ffd8 	bl	b9550 <_ZNK8particle13BlePeerDevice7addressEv>
   b95a0:	a904      	add	r1, sp, #16
   b95a2:	a802      	add	r0, sp, #8
   b95a4:	f7ff fdd9 	bl	b915a <_ZNK8particle10BleAddresseqERKS0_>
   b95a8:	4604      	mov	r4, r0
   b95aa:	b900      	cbnz	r0, b95ae <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b95ac:	2400      	movs	r4, #0
    WiringBleLock lk;
   b95ae:	a801      	add	r0, sp, #4
   b95b0:	f7ff fdba 	bl	b9128 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b95b4:	4620      	mov	r0, r4
   b95b6:	b007      	add	sp, #28
   b95b8:	bd30      	pop	{r4, r5, pc}
	...

000b95bc <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b95bc:	b510      	push	{r4, lr}
   b95be:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b95c0:	2064      	movs	r0, #100	; 0x64
   b95c2:	f7fa fd68 	bl	b4096 <_Znwj>
   b95c6:	b168      	cbz	r0, b95e4 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b95c8:	2300      	movs	r3, #0
   b95ca:	e9c0 3300 	strd	r3, r3, [r0]
   b95ce:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b95d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b95d6:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b95da:	6203      	str	r3, [r0, #32]
   b95dc:	62c3      	str	r3, [r0, #44]	; 0x2c
   b95de:	63c3      	str	r3, [r0, #60]	; 0x3c
   b95e0:	64c3      	str	r3, [r0, #76]	; 0x4c
   b95e2:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b95e4:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b95e6:	b920      	cbnz	r0, b95f2 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b95e8:	4a0a      	ldr	r2, [pc, #40]	; (b9614 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b95ea:	490b      	ldr	r1, [pc, #44]	; (b9618 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b95ec:	200a      	movs	r0, #10
   b95ee:	f7ff fbb1 	bl	b8d54 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b95f2:	2000      	movs	r0, #0
   b95f4:	f7ff f9e4 	bl	b89c0 <hal_ble_stack_init>
   b95f8:	b120      	cbz	r0, b9604 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b95fa:	4a06      	ldr	r2, [pc, #24]	; (b9614 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b95fc:	4907      	ldr	r1, [pc, #28]	; (b961c <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b95fe:	200a      	movs	r0, #10
   b9600:	f7ff fba8 	bl	b8d54 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b9604:	6821      	ldr	r1, [r4, #0]
   b9606:	4806      	ldr	r0, [pc, #24]	; (b9620 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b9608:	2200      	movs	r2, #0
   b960a:	f7ff fa35 	bl	b8a78 <hal_ble_set_callback_on_periph_link_events>
}
   b960e:	4620      	mov	r0, r4
   b9610:	bd10      	pop	{r4, pc}
   b9612:	bf00      	nop
   b9614:	000b8af5 	.word	0x000b8af5
   b9618:	000bec70 	.word	0x000bec70
   b961c:	000becae 	.word	0x000becae
   b9620:	000b9ba5 	.word	0x000b9ba5

000b9624 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b9624:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b9626:	4c0a      	ldr	r4, [pc, #40]	; (b9650 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b9628:	7823      	ldrb	r3, [r4, #0]
   b962a:	f3bf 8f5b 	dmb	ish
   b962e:	07db      	lsls	r3, r3, #31
   b9630:	d40c      	bmi.n	b964c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b9632:	4620      	mov	r0, r4
   b9634:	f7fa fd37 	bl	b40a6 <__cxa_guard_acquire>
   b9638:	b140      	cbz	r0, b964c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b963a:	4806      	ldr	r0, [pc, #24]	; (b9654 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b963c:	f7ff ffbe 	bl	b95bc <_ZN8particle14BleLocalDeviceC1Ev>
   b9640:	4620      	mov	r0, r4
   b9642:	f7fa fd35 	bl	b40b0 <__cxa_guard_release>
   b9646:	4804      	ldr	r0, [pc, #16]	; (b9658 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b9648:	f002 ff7c 	bl	bc544 <atexit>
    return instance;
}
   b964c:	4801      	ldr	r0, [pc, #4]	; (b9654 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b964e:	bd10      	pop	{r4, pc}
   b9650:	2003e6b8 	.word	0x2003e6b8
   b9654:	2003e6c4 	.word	0x2003e6c4
   b9658:	000b9871 	.word	0x000b9871

000b965c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b965c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b965e:	6803      	ldr	r3, [r0, #0]
   b9660:	3b09      	subs	r3, #9
   b9662:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b9664:	b08d      	sub	sp, #52	; 0x34
   b9666:	4604      	mov	r4, r0
   b9668:	460d      	mov	r5, r1
    switch (event->type) {
   b966a:	d811      	bhi.n	b9690 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b966c:	f7ff ffda 	bl	b9624 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b9670:	88a1      	ldrh	r1, [r4, #4]
   b9672:	6800      	ldr	r0, [r0, #0]
   b9674:	f7ff fea2 	bl	b93bc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b9678:	4603      	mov	r3, r0
   b967a:	b958      	cbnz	r0, b9694 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b967c:	2220      	movs	r2, #32
   b967e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b9682:	4a0b      	ldr	r2, [pc, #44]	; (b96b0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b9684:	9200      	str	r2, [sp, #0]
   b9686:	490b      	ldr	r1, [pc, #44]	; (b96b4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b9688:	aa04      	add	r2, sp, #16
   b968a:	2032      	movs	r0, #50	; 0x32
   b968c:	f7ff fb6a 	bl	b8d64 <log_message>
}
   b9690:	b00d      	add	sp, #52	; 0x34
   b9692:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b9694:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b9696:	2a00      	cmp	r2, #0
   b9698:	d0fa      	beq.n	b9690 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b969a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b969e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b96a2:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b96a6:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b96a8:	aa04      	add	r2, sp, #16
   b96aa:	a903      	add	r1, sp, #12
   b96ac:	47a0      	blx	r4
}
   b96ae:	e7ef      	b.n	b9690 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b96b0:	000becf0 	.word	0x000becf0
   b96b4:	000bec87 	.word	0x000bec87

000b96b8 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b96b8:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b96ba:	2000      	movs	r0, #0
   b96bc:	f7ff f980 	bl	b89c0 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b96c0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b96c4:	bd08      	pop	{r3, pc}

000b96c6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b96c6:	b919      	cbnz	r1, b96d0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b96c8:	460a      	mov	r2, r1
   b96ca:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b96cc:	f7ff b980 	b.w	b89d0 <hal_ble_gap_set_advertising_data>
   b96d0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b96d4:	2200      	movs	r2, #0
   b96d6:	e7f9      	b.n	b96cc <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b96d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b96d8:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b96da:	1e14      	subs	r4, r2, #0
   b96dc:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b96de:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b96e0:	db02      	blt.n	b96e8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b96e2:	1862      	adds	r2, r4, r1
   b96e4:	429a      	cmp	r2, r3
   b96e6:	dd00      	ble.n	b96ea <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b96e8:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b96ea:	682a      	ldr	r2, [r5, #0]
   b96ec:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b96ee:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b96f0:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b96f2:	1a52      	subs	r2, r2, r1
   b96f4:	f002 ff4e 	bl	bc594 <memmove>
    size_ -= n;
   b96f8:	686a      	ldr	r2, [r5, #4]
   b96fa:	1b12      	subs	r2, r2, r4
   b96fc:	606a      	str	r2, [r5, #4]
}
   b96fe:	bd38      	pop	{r3, r4, r5, pc}

000b9700 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b9700:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b9702:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b9704:	4604      	mov	r4, r0
   b9706:	460d      	mov	r5, r1
   b9708:	ab01      	add	r3, sp, #4
   b970a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b970e:	f7ff fc73 	bl	b8ff8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b9712:	4602      	mov	r2, r0
   b9714:	b138      	cbz	r0, b9726 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b9716:	9901      	ldr	r1, [sp, #4]
   b9718:	4620      	mov	r0, r4
   b971a:	f7ff ffdd 	bl	b96d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b971e:	4629      	mov	r1, r5
   b9720:	4620      	mov	r0, r4
   b9722:	f7ff ffed 	bl	b9700 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b9726:	b003      	add	sp, #12
   b9728:	bd30      	pop	{r4, r5, pc}

000b972a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b972a:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b972c:	460c      	mov	r4, r1
   b972e:	b929      	cbnz	r1, b973c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b9730:	460a      	mov	r2, r1
   b9732:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b9734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b9738:	f7ff b952 	b.w	b89e0 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b973c:	2101      	movs	r1, #1
   b973e:	4620      	mov	r0, r4
   b9740:	f7ff ffde 	bl	b9700 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b9744:	e9d4 0100 	ldrd	r0, r1, [r4]
   b9748:	2200      	movs	r2, #0
   b974a:	e7f3      	b.n	b9734 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b974c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b974c:	b538      	push	{r3, r4, r5, lr}
   b974e:	4604      	mov	r4, r0
   b9750:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b9752:	f7ff ffb8 	bl	b96c6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b9756:	2800      	cmp	r0, #0
   b9758:	db0a      	blt.n	b9770 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b975a:	4629      	mov	r1, r5
   b975c:	4620      	mov	r0, r4
   b975e:	f7ff ffe4 	bl	b972a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b9762:	2800      	cmp	r0, #0
   b9764:	db04      	blt.n	b9770 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b9766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b976a:	2000      	movs	r0, #0
   b976c:	f7ff b940 	b.w	b89f0 <hal_ble_gap_start_advertising>
}
   b9770:	bd38      	pop	{r3, r4, r5, pc}
	...

000b9774 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b9774:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b9776:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b9778:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b977a:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b977c:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b977e:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9780:	f7fa fc89 	bl	b4096 <_Znwj>
   b9784:	b118      	cbz	r0, b978e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b9786:	682b      	ldr	r3, [r5, #0]
   b9788:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b978a:	686b      	ldr	r3, [r5, #4]
   b978c:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b978e:	4b03      	ldr	r3, [pc, #12]	; (b979c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b9790:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b9792:	4b03      	ldr	r3, [pc, #12]	; (b97a0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9794:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b9796:	60a3      	str	r3, [r4, #8]
      }
   b9798:	4620      	mov	r0, r4
   b979a:	bd38      	pop	{r3, r4, r5, pc}
   b979c:	000b9039 	.word	0x000b9039
   b97a0:	000b9051 	.word	0x000b9051

000b97a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b97a4:	680b      	ldr	r3, [r1, #0]
   b97a6:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b97a8:	b113      	cbz	r3, b97b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b97aa:	685a      	ldr	r2, [r3, #4]
   b97ac:	3201      	adds	r2, #1
   b97ae:	605a      	str	r2, [r3, #4]
      }
   b97b0:	4770      	bx	lr

000b97b2 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b97b2:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b97b4:	f851 3b04 	ldr.w	r3, [r1], #4
   b97b8:	4604      	mov	r4, r0
   b97ba:	f840 3b04 	str.w	r3, [r0], #4
   b97be:	f7ff fff1 	bl	b97a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b97c2:	6823      	ldr	r3, [r4, #0]
   b97c4:	b90b      	cbnz	r3, b97ca <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b97c6:	f7ff fc2d 	bl	b9024 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b97ca:	4620      	mov	r0, r4
   b97cc:	bd10      	pop	{r4, pc}

000b97ce <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b97ce:	b510      	push	{r4, lr}
   b97d0:	f851 3b04 	ldr.w	r3, [r1], #4
   b97d4:	4604      	mov	r4, r0
   b97d6:	f840 3b04 	str.w	r3, [r0], #4
   b97da:	f7ff ffe3 	bl	b97a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b97de:	4620      	mov	r0, r4
   b97e0:	bd10      	pop	{r4, pc}

000b97e2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b97e2:	b510      	push	{r4, lr}
   b97e4:	f851 3b04 	ldr.w	r3, [r1], #4
   b97e8:	4604      	mov	r4, r0
   b97ea:	f840 3b04 	str.w	r3, [r0], #4
   b97ee:	f7ff ffd9 	bl	b97a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b97f2:	4620      	mov	r0, r4
   b97f4:	bd10      	pop	{r4, pc}

000b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b97f6:	b510      	push	{r4, lr}
   b97f8:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b97fa:	6800      	ldr	r0, [r0, #0]
   b97fc:	b108      	cbz	r0, b9802 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b97fe:	f7ff fc5b 	bl	b90b8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b9802:	4620      	mov	r0, r4
   b9804:	bd10      	pop	{r4, pc}

000b9806 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b9806:	b510      	push	{r4, lr}
   b9808:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b980a:	3004      	adds	r0, #4
   b980c:	f7ff fff3 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9810:	4620      	mov	r0, r4
   b9812:	bd10      	pop	{r4, pc}

000b9814 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9814:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b9816:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b981a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b981c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b9820:	42ae      	cmp	r6, r5
   b9822:	d004      	beq.n	b982e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b9824:	1d28      	adds	r0, r5, #4
   b9826:	f7ff ffe6 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b982a:	3508      	adds	r5, #8
   b982c:	e7f8      	b.n	b9820 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b982e:	6820      	ldr	r0, [r4, #0]
   b9830:	f7ff fb44 	bl	b8ebc <free>
}
   b9834:	4620      	mov	r0, r4
   b9836:	bd70      	pop	{r4, r5, r6, pc}

000b9838 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9838:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b983a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b983e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b9840:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b9844:	42ae      	cmp	r6, r5
   b9846:	d004      	beq.n	b9852 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b9848:	1d28      	adds	r0, r5, #4
   b984a:	f7ff ffd4 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b984e:	3508      	adds	r5, #8
   b9850:	e7f8      	b.n	b9844 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b9852:	6820      	ldr	r0, [r4, #0]
   b9854:	f7ff fb32 	bl	b8ebc <free>
}
   b9858:	4620      	mov	r0, r4
   b985a:	bd70      	pop	{r4, r5, r6, pc}

000b985c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b985c:	b510      	push	{r4, lr}
   b985e:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b9860:	3024      	adds	r0, #36	; 0x24
   b9862:	f7ff ffe9 	bl	b9838 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b9866:	f104 0018 	add.w	r0, r4, #24
   b986a:	f7ff ffd3 	bl	b9814 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b986e:	bd10      	pop	{r4, pc}

000b9870 <__tcf_0>:
    static BleLocalDevice instance;
   b9870:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b9872:	4b17      	ldr	r3, [pc, #92]	; (b98d0 <__tcf_0+0x60>)
   b9874:	681c      	ldr	r4, [r3, #0]
   b9876:	b354      	cbz	r4, b98ce <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b9878:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b987c:	f7ff fc08 	bl	b9090 <_ZNSt14_Function_baseD1Ev>
   b9880:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b9884:	f7ff fc04 	bl	b9090 <_ZNSt14_Function_baseD1Ev>
   b9888:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b988c:	f7ff fc00 	bl	b9090 <_ZNSt14_Function_baseD1Ev>
   b9890:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b9894:	f7ff fbfc 	bl	b9090 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b9898:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b989c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b98a0:	42ae      	cmp	r6, r5
   b98a2:	d004      	beq.n	b98ae <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b98a4:	1d28      	adds	r0, r5, #4
   b98a6:	f7ff ffa6 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b98aa:	3508      	adds	r5, #8
   b98ac:	e7f8      	b.n	b98a0 <__tcf_0+0x30>
    ::free(ptr);
   b98ae:	69a0      	ldr	r0, [r4, #24]
   b98b0:	f7ff fb04 	bl	b8ebc <free>
    ~BleLocalDeviceImpl() = default;
   b98b4:	f104 000c 	add.w	r0, r4, #12
   b98b8:	f7ff ffbe 	bl	b9838 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b98bc:	4620      	mov	r0, r4
   b98be:	f7ff ffa9 	bl	b9814 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b98c2:	4620      	mov	r0, r4
   b98c4:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b98c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b98ca:	f7fa bbea 	b.w	b40a2 <_ZdlPvj>
   b98ce:	bd70      	pop	{r4, r5, r6, pc}
   b98d0:	2003e6c4 	.word	0x2003e6c4

000b98d4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b98d4:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b98d6:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b98d8:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b98dc:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b98e0:	6803      	ldr	r3, [r0, #0]
   b98e2:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b98e4:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b98e6:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b98e8:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b98ea:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b98ec:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b98ee:	f7ff ff82 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b98f2:	b002      	add	sp, #8
   b98f4:	bd10      	pop	{r4, pc}

000b98f6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b98f6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b98f8:	b510      	push	{r4, lr}
      if (_M_empty())
   b98fa:	b90a      	cbnz	r2, b9900 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b98fc:	f001 fe5d 	bl	bb5ba <_ZSt25__throw_bad_function_callv>
    }
   b9900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9904:	68c3      	ldr	r3, [r0, #12]
   b9906:	4718      	bx	r3

000b9908 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b9908:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b990a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b990c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b990e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b9910:	dd03      	ble.n	b991a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b9912:	f7ff fadb 	bl	b8ecc <realloc>
            if (!d) {
   b9916:	b918      	cbnz	r0, b9920 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b9918:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b991a:	f7ff facf 	bl	b8ebc <free>
        T* d = nullptr;
   b991e:	2000      	movs	r0, #0
        data_ = d;
   b9920:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b9922:	60a5      	str	r5, [r4, #8]
        return true;
   b9924:	2001      	movs	r0, #1
   b9926:	e7f7      	b.n	b9918 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b9928 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b9928:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b992a:	6883      	ldr	r3, [r0, #8]
   b992c:	428b      	cmp	r3, r1
   b992e:	da02      	bge.n	b9936 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b9930:	f7ff ffea 	bl	b9908 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b9934:	bd08      	pop	{r3, pc}
    return true;
   b9936:	2001      	movs	r0, #1
   b9938:	e7fc      	b.n	b9934 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b993a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b993a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b993e:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9940:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b9942:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9944:	4419      	add	r1, r3
   b9946:	6883      	ldr	r3, [r0, #8]
   b9948:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b994a:	4604      	mov	r4, r0
   b994c:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b994e:	dc12      	bgt.n	b9976 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b9950:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9952:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9954:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9956:	1bd2      	subs	r2, r2, r7
   b9958:	4631      	mov	r1, r6
   b995a:	1970      	adds	r0, r6, r5
   b995c:	f002 fe1a 	bl	bc594 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b9960:	462a      	mov	r2, r5
   b9962:	4641      	mov	r1, r8
   b9964:	4630      	mov	r0, r6
   b9966:	f002 fe07 	bl	bc578 <memcpy>
    size_ += n;
   b996a:	6863      	ldr	r3, [r4, #4]
   b996c:	442b      	add	r3, r5
   b996e:	6063      	str	r3, [r4, #4]
    return true;
   b9970:	2001      	movs	r0, #1
}
   b9972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9976:	f7ff ffc7 	bl	b9908 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b997a:	2800      	cmp	r0, #0
   b997c:	d1e8      	bne.n	b9950 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b997e:	e7f8      	b.n	b9972 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b9980 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b9980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9982:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9984:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b9988:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b998a:	4604      	mov	r4, r0
   b998c:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b998e:	da0b      	bge.n	b99a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b9990:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9992:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9994:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9996:	1b52      	subs	r2, r2, r5
   b9998:	1c48      	adds	r0, r1, #1
   b999a:	f002 fdfb 	bl	bc594 <memmove>
    new(p) T(std::move(value));
   b999e:	557e      	strb	r6, [r7, r5]
    ++size_;
   b99a0:	6863      	ldr	r3, [r4, #4]
   b99a2:	3301      	adds	r3, #1
   b99a4:	6063      	str	r3, [r4, #4]
}
   b99a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b99a8:	3101      	adds	r1, #1
   b99aa:	f7ff ffad 	bl	b9908 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b99ae:	2800      	cmp	r0, #0
   b99b0:	d1ee      	bne.n	b9990 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b99b2:	e7f8      	b.n	b99a6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b99b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b99b4:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b99b6:	6841      	ldr	r1, [r0, #4]
   b99b8:	f7ff bfe2 	b.w	b9980 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b99bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b99bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b99c0:	4604      	mov	r4, r0
   b99c2:	461d      	mov	r5, r3
   b99c4:	460f      	mov	r7, r1
   b99c6:	ab01      	add	r3, sp, #4
   b99c8:	4690      	mov	r8, r2
   b99ca:	460a      	mov	r2, r1
   b99cc:	e9d0 0100 	ldrd	r0, r1, [r0]
   b99d0:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b99d4:	f7ff fb10 	bl	b8ff8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b99d8:	1cae      	adds	r6, r5, #2
   b99da:	6863      	ldr	r3, [r4, #4]
   b99dc:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b99de:	f1b9 0f00 	cmp.w	r9, #0
   b99e2:	d126      	bne.n	b9a32 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b99e4:	b328      	cbz	r0, b9a32 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b99e6:	4433      	add	r3, r6
   b99e8:	1a1b      	subs	r3, r3, r0
   b99ea:	2bff      	cmp	r3, #255	; 0xff
   b99ec:	d809      	bhi.n	b9a02 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b99ee:	9901      	ldr	r1, [sp, #4]
   b99f0:	4620      	mov	r0, r4
   b99f2:	f7ff fe71 	bl	b96d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b99f6:	6861      	ldr	r1, [r4, #4]
   b99f8:	4620      	mov	r0, r4
   b99fa:	4431      	add	r1, r6
   b99fc:	f7ff ff94 	bl	b9928 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b9a00:	b918      	cbnz	r0, b9a0a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b9a02:	6860      	ldr	r0, [r4, #4]
}
   b9a04:	b003      	add	sp, #12
   b9a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b9a0a:	1c6a      	adds	r2, r5, #1
   b9a0c:	9901      	ldr	r1, [sp, #4]
   b9a0e:	b2d2      	uxtb	r2, r2
   b9a10:	4620      	mov	r0, r4
   b9a12:	f7ff ffb5 	bl	b9980 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b9a16:	9901      	ldr	r1, [sp, #4]
   b9a18:	463a      	mov	r2, r7
   b9a1a:	3101      	adds	r1, #1
   b9a1c:	4620      	mov	r0, r4
   b9a1e:	f7ff ffaf 	bl	b9980 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b9a22:	9901      	ldr	r1, [sp, #4]
   b9a24:	462b      	mov	r3, r5
   b9a26:	4642      	mov	r2, r8
   b9a28:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b9a2a:	4620      	mov	r0, r4
   b9a2c:	f7ff ff85 	bl	b993a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b9a30:	e7e7      	b.n	b9a02 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b9a32:	18f1      	adds	r1, r6, r3
   b9a34:	29ff      	cmp	r1, #255	; 0xff
   b9a36:	d8e4      	bhi.n	b9a02 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b9a38:	4620      	mov	r0, r4
   b9a3a:	f7ff ff75 	bl	b9928 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b9a3e:	2800      	cmp	r0, #0
   b9a40:	d0df      	beq.n	b9a02 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b9a42:	1c69      	adds	r1, r5, #1
   b9a44:	b2c9      	uxtb	r1, r1
   b9a46:	4620      	mov	r0, r4
   b9a48:	f7ff ffb4 	bl	b99b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b9a4c:	4639      	mov	r1, r7
   b9a4e:	4620      	mov	r0, r4
   b9a50:	f7ff ffb0 	bl	b99b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b9a54:	6861      	ldr	r1, [r4, #4]
   b9a56:	462b      	mov	r3, r5
   b9a58:	4642      	mov	r2, r8
   b9a5a:	e7e6      	b.n	b9a2a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b9a5c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b9a5c:	b430      	push	{r4, r5}
   b9a5e:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b9a62:	b11a      	cbz	r2, b9a6c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b9a64:	9502      	str	r5, [sp, #8]
}
   b9a66:	bc30      	pop	{r4, r5}
   b9a68:	f7ff bfa8 	b.w	b99bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b9a6c:	6840      	ldr	r0, [r0, #4]
}
   b9a6e:	bc30      	pop	{r4, r5}
   b9a70:	4770      	bx	lr

000b9a72 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b9a72:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b9a74:	2300      	movs	r3, #0
   b9a76:	e9c0 3300 	strd	r3, r3, [r0]
   b9a7a:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b9a7c:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b9a7e:	9300      	str	r3, [sp, #0]
   b9a80:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b9a82:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b9a86:	4619      	mov	r1, r3
   b9a88:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b9a8c:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b9a8e:	f7ff ffe5 	bl	b9a5c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b9a92:	4620      	mov	r0, r4
   b9a94:	b004      	add	sp, #16
   b9a96:	bd10      	pop	{r4, pc}

000b9a98 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9a98:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9a9c:	4604      	mov	r4, r0
   b9a9e:	460d      	mov	r5, r1
   b9aa0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9aa2:	d914      	bls.n	b9ace <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9aa4:	4290      	cmp	r0, r2
   b9aa6:	d213      	bcs.n	b9ad0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9aa8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b9aac:	1a75      	subs	r5, r6, r1
   b9aae:	f1a1 0708 	sub.w	r7, r1, #8
   b9ab2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9ab4:	42b7      	cmp	r7, r6
   b9ab6:	d018      	beq.n	b9aea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9ab8:	b11c      	cbz	r4, b9ac2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9aba:	4631      	mov	r1, r6
   b9abc:	4620      	mov	r0, r4
   b9abe:	f7ff fe90 	bl	b97e2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b9ac2:	1d30      	adds	r0, r6, #4
   b9ac4:	f7ff fe97 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b9ac8:	3e08      	subs	r6, #8
   b9aca:	3c08      	subs	r4, #8
   b9acc:	e7f2      	b.n	b9ab4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b9ace:	d00c      	beq.n	b9aea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b9ad0:	42b5      	cmp	r5, r6
   b9ad2:	d00a      	beq.n	b9aea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9ad4:	b11c      	cbz	r4, b9ade <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9ad6:	4629      	mov	r1, r5
   b9ad8:	4620      	mov	r0, r4
   b9ada:	f7ff fe82 	bl	b97e2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9ade:	1d28      	adds	r0, r5, #4
   b9ae0:	f7ff fe89 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9ae4:	3508      	adds	r5, #8
   b9ae6:	3408      	adds	r4, #8
   b9ae8:	e7f2      	b.n	b9ad0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b9aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9aec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9aee:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b9af0:	6846      	ldr	r6, [r0, #4]
   b9af2:	4668      	mov	r0, sp
   b9af4:	f7ff fe75 	bl	b97e2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9af8:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b9afc:	429f      	cmp	r7, r3
   b9afe:	db12      	blt.n	b9b26 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b9b00:	3701      	adds	r7, #1
        if (n > 0) {
   b9b02:	2f00      	cmp	r7, #0
   b9b04:	dd29      	ble.n	b9b5a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b9b06:	00f8      	lsls	r0, r7, #3
   b9b08:	f7ff f9d0 	bl	b8eac <malloc>
            if (!d) {
   b9b0c:	4605      	mov	r5, r0
   b9b0e:	b1f0      	cbz	r0, b9b4e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b9b10:	e9d4 1200 	ldrd	r1, r2, [r4]
   b9b14:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9b18:	f7ff ffbe 	bl	b9a98 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9b1c:	6820      	ldr	r0, [r4, #0]
   b9b1e:	f7ff f9cd 	bl	b8ebc <free>
        data_ = d;
   b9b22:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b9b24:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b9b26:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9b28:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9b2a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b9b2e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b9b32:	4631      	mov	r1, r6
   b9b34:	f106 0008 	add.w	r0, r6, #8
   b9b38:	f7ff ffae 	bl	b9a98 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9b3c:	b11e      	cbz	r6, b9b46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b9b3e:	4669      	mov	r1, sp
   b9b40:	4630      	mov	r0, r6
   b9b42:	f7ff fe4e 	bl	b97e2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b9b46:	6863      	ldr	r3, [r4, #4]
   b9b48:	3301      	adds	r3, #1
   b9b4a:	6063      	str	r3, [r4, #4]
    return true;
   b9b4c:	2501      	movs	r5, #1
   b9b4e:	a801      	add	r0, sp, #4
   b9b50:	f7ff fe51 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9b54:	4628      	mov	r0, r5
   b9b56:	b003      	add	sp, #12
   b9b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b9b5a:	2500      	movs	r5, #0
   b9b5c:	e7de      	b.n	b9b1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b9b5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b9b60:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9b64:	4605      	mov	r5, r0
   b9b66:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b9b68:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b9b6c:	42a6      	cmp	r6, r4
   b9b6e:	d005      	beq.n	b9b7c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b9b70:	4639      	mov	r1, r7
   b9b72:	4620      	mov	r0, r4
   b9b74:	f7ff fcff 	bl	b9576 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b9b78:	b108      	cbz	r0, b9b7e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b9b7a:	b914      	cbnz	r4, b9b82 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b9b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b9b7e:	3408      	adds	r4, #8
   b9b80:	e7f4      	b.n	b9b6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b9b82:	1d20      	adds	r0, r4, #4
   b9b84:	f7ff fe37 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b9b88:	e9d5 3200 	ldrd	r3, r2, [r5]
   b9b8c:	f104 0108 	add.w	r1, r4, #8
   b9b90:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b9b94:	4620      	mov	r0, r4
   b9b96:	f7ff ff7f 	bl	b9a98 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b9b9a:	686b      	ldr	r3, [r5, #4]
   b9b9c:	3b01      	subs	r3, #1
   b9b9e:	606b      	str	r3, [r5, #4]
    return true;
   b9ba0:	e7ec      	b.n	b9b7c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b9ba4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b9ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9ba8:	4605      	mov	r5, r0
   b9baa:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b9bac:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b9bae:	460c      	mov	r4, r1
        WiringBleLock lk;
   b9bb0:	f7ff faac 	bl	b910c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b9bb4:	682e      	ldr	r6, [r5, #0]
   b9bb6:	1ef3      	subs	r3, r6, #3
   b9bb8:	2b0d      	cmp	r3, #13
   b9bba:	d83c      	bhi.n	b9c36 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b9bbc:	e8df f013 	tbh	[pc, r3, lsl #1]
   b9bc0:	0053000e 	.word	0x0053000e
   b9bc4:	00d1003b 	.word	0x00d1003b
   b9bc8:	003b003b 	.word	0x003b003b
   b9bcc:	003b003b 	.word	0x003b003b
   b9bd0:	009b003b 	.word	0x009b003b
   b9bd4:	009b009b 	.word	0x009b009b
   b9bd8:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b9bdc:	a804      	add	r0, sp, #16
   b9bde:	f7ff fc95 	bl	b950c <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b9be2:	9b04      	ldr	r3, [sp, #16]
   b9be4:	89aa      	ldrh	r2, [r5, #12]
   b9be6:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b9be8:	6869      	ldr	r1, [r5, #4]
   b9bea:	9804      	ldr	r0, [sp, #16]
   b9bec:	3108      	adds	r1, #8
   b9bee:	3002      	adds	r0, #2
   b9bf0:	f7ff faa6 	bl	b9140 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b9bf4:	a904      	add	r1, sp, #16
   b9bf6:	a806      	add	r0, sp, #24
   b9bf8:	f7ff fdf3 	bl	b97e2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b9bfc:	a906      	add	r1, sp, #24
   b9bfe:	f104 0018 	add.w	r0, r4, #24
   b9c02:	f7ff ff73 	bl	b9aec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b9c06:	4605      	mov	r5, r0
   b9c08:	a807      	add	r0, sp, #28
   b9c0a:	f7ff fdf4 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9c0e:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b9c10:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b9c12:	b9b5      	cbnz	r5, b9c42 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b9c14:	4b5d      	ldr	r3, [pc, #372]	; (b9d8c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b9c16:	495e      	ldr	r1, [pc, #376]	; (b9d90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b9c18:	9300      	str	r3, [sp, #0]
   b9c1a:	2032      	movs	r0, #50	; 0x32
   b9c1c:	462b      	mov	r3, r5
   b9c1e:	aa06      	add	r2, sp, #24
   b9c20:	9507      	str	r5, [sp, #28]
   b9c22:	f7ff f89f 	bl	b8d64 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b9c26:	9b04      	ldr	r3, [sp, #16]
   b9c28:	4629      	mov	r1, r5
   b9c2a:	8818      	ldrh	r0, [r3, #0]
   b9c2c:	f7fe fee8 	bl	b8a00 <hal_ble_gap_disconnect>
   b9c30:	a805      	add	r0, sp, #20
   b9c32:	f7ff fde0 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b9c36:	a803      	add	r0, sp, #12
   b9c38:	f7ff fa76 	bl	b9128 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b9c3c:	b00e      	add	sp, #56	; 0x38
   b9c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b9c42:	4a54      	ldr	r2, [pc, #336]	; (b9d94 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b9c44:	9200      	str	r2, [sp, #0]
   b9c46:	2300      	movs	r3, #0
   b9c48:	4951      	ldr	r1, [pc, #324]	; (b9d90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b9c4a:	9307      	str	r3, [sp, #28]
   b9c4c:	aa06      	add	r2, sp, #24
   b9c4e:	2001      	movs	r0, #1
   b9c50:	f7ff f888 	bl	b8d64 <log_message>
                if (impl->connectedCallback_) {
   b9c54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9c56:	2b00      	cmp	r3, #0
   b9c58:	d0ea      	beq.n	b9c30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b9c5a:	a904      	add	r1, sp, #16
   b9c5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b9c60:	f7ff fe49 	bl	b98f6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b9c64:	e7e4      	b.n	b9c30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b9c66:	89a9      	ldrh	r1, [r5, #12]
   b9c68:	4620      	mov	r0, r4
   b9c6a:	f7ff fba7 	bl	b93bc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b9c6e:	4606      	mov	r6, r0
   b9c70:	2800      	cmp	r0, #0
   b9c72:	d0e0      	beq.n	b9c36 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b9c74:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b9c76:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b9c7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b9c7e:	8029      	strh	r1, [r5, #0]
   b9c80:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b9c84:	429a      	cmp	r2, r3
   b9c86:	d003      	beq.n	b9c90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b9c88:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b9c8c:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b9c8e:	e7f9      	b.n	b9c84 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b9c90:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b9c94:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b9c98:	45b8      	cmp	r8, r7
   b9c9a:	d004      	beq.n	b9ca6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b9c9c:	1d38      	adds	r0, r7, #4
   b9c9e:	f7ff fdaa 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9ca2:	3708      	adds	r7, #8
   b9ca4:	e7f8      	b.n	b9c98 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b9ca6:	2300      	movs	r3, #0
   b9ca8:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b9caa:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b9cae:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b9cb2:	45b8      	cmp	r8, r7
   b9cb4:	d004      	beq.n	b9cc0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b9cb6:	1d38      	adds	r0, r7, #4
   b9cb8:	f7ff fd9d 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9cbc:	3708      	adds	r7, #8
   b9cbe:	e7f8      	b.n	b9cb2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b9cc0:	2300      	movs	r3, #0
   b9cc2:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b9cc4:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b9cc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b9cc8:	b123      	cbz	r3, b9cd4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b9cca:	4631      	mov	r1, r6
   b9ccc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b9cd0:	f7ff fe11 	bl	b98f6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b9cd4:	2300      	movs	r3, #0
   b9cd6:	2220      	movs	r2, #32
   b9cd8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b9cdc:	4a2e      	ldr	r2, [pc, #184]	; (b9d98 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b9cde:	9200      	str	r2, [sp, #0]
   b9ce0:	492b      	ldr	r1, [pc, #172]	; (b9d90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b9ce2:	aa06      	add	r2, sp, #24
   b9ce4:	2001      	movs	r0, #1
   b9ce6:	f7ff f83d 	bl	b8d64 <log_message>
                    impl->peers_.removeOne(*peer);
   b9cea:	4631      	mov	r1, r6
   b9cec:	f104 0018 	add.w	r0, r4, #24
   b9cf0:	f7ff ff35 	bl	b9b5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b9cf4:	e79f      	b.n	b9c36 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b9cf6:	89a9      	ldrh	r1, [r5, #12]
   b9cf8:	4620      	mov	r0, r4
   b9cfa:	f7ff fb5f 	bl	b93bc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b9cfe:	2800      	cmp	r0, #0
   b9d00:	d099      	beq.n	b9c36 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b9d02:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b9d04:	2b00      	cmp	r3, #0
   b9d06:	d096      	beq.n	b9c36 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b9d08:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b9d0a:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b9d0c:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b9d10:	d001      	beq.n	b9d16 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b9d12:	2e10      	cmp	r6, #16
   b9d14:	d117      	bne.n	b9d46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b9d16:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b9d18:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b9d1a:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b9d1c:	2506      	movs	r5, #6
                        };
   b9d1e:	f88d 3015 	strb.w	r3, [sp, #21]
   b9d22:	9104      	str	r1, [sp, #16]
   b9d24:	f88d 2014 	strb.w	r2, [sp, #20]
   b9d28:	9006      	str	r0, [sp, #24]
   b9d2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b9d2e:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b9d30:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b9d34:	9508      	str	r5, [sp, #32]
   b9d36:	e883 0003 	stmia.w	r3, {r0, r1}
   b9d3a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9d3c:	a906      	add	r1, sp, #24
   b9d3e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b9d42:	4798      	blx	r3
   b9d44:	e777      	b.n	b9c36 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b9d46:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b9d48:	bf01      	itttt	eq
   b9d4a:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b9d4c:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b9d4e:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b9d52:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b9d54:	bf0f      	iteee	eq
   b9d56:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b9d5a:	461a      	movne	r2, r3
   b9d5c:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b9d5e:	461d      	movne	r5, r3
   b9d60:	e7dd      	b.n	b9d1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b9d62:	89a9      	ldrh	r1, [r5, #12]
   b9d64:	4620      	mov	r0, r4
   b9d66:	f7ff fb29 	bl	b93bc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b9d6a:	4601      	mov	r1, r0
   b9d6c:	2800      	cmp	r0, #0
   b9d6e:	f43f af62 	beq.w	b9c36 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b9d72:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b9d74:	2b00      	cmp	r3, #0
   b9d76:	f43f af5e 	beq.w	b9c36 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b9d7a:	686b      	ldr	r3, [r5, #4]
   b9d7c:	9306      	str	r3, [sp, #24]
   b9d7e:	aa06      	add	r2, sp, #24
   b9d80:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b9d82:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b9d86:	4798      	blx	r3
   b9d88:	e755      	b.n	b9c36 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b9d8a:	bf00      	nop
   b9d8c:	000bed08 	.word	0x000bed08
   b9d90:	000bec87 	.word	0x000bec87
   b9d94:	000bed2e 	.word	0x000bed2e
   b9d98:	000bed4b 	.word	0x000bed4b

000b9d9c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b9d9c:	b513      	push	{r0, r1, r4, lr}
   b9d9e:	460b      	mov	r3, r1
   b9da0:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9da2:	e9d0 0100 	ldrd	r0, r1, [r0]
   b9da6:	466c      	mov	r4, sp
   b9da8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b9dac:	e893 0003 	ldmia.w	r3, {r0, r1}
   b9db0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b9db4:	e894 0003 	ldmia.w	r4, {r0, r1}
   b9db8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b9dbc:	b002      	add	sp, #8
   b9dbe:	bd10      	pop	{r4, pc}

000b9dc0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b9dc0:	b538      	push	{r3, r4, r5, lr}
   b9dc2:	4605      	mov	r5, r0
   b9dc4:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b9dc6:	f7ff ffe9 	bl	b9d9c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9dca:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9dcc:	68a2      	ldr	r2, [r4, #8]
   b9dce:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9dd0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9dd2:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9dd4:	68e2      	ldr	r2, [r4, #12]
   b9dd6:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b9dd8:	60e3      	str	r3, [r4, #12]
      }
   b9dda:	bd38      	pop	{r3, r4, r5, pc}

000b9ddc <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b9ddc:	b570      	push	{r4, r5, r6, lr}
   b9dde:	4604      	mov	r4, r0
   b9de0:	b08c      	sub	sp, #48	; 0x30
   b9de2:	460e      	mov	r6, r1
   b9de4:	9201      	str	r2, [sp, #4]
   b9de6:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b9de8:	f7ff fac8 	bl	b937c <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b9dec:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b9dee:	9901      	ldr	r1, [sp, #4]
   b9df0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b9df4:	f000 fd8b 	bl	ba90e <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b9df8:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b9dfc:	b1cd      	cbz	r5, b9e32 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b9dfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b9e00:	9502      	str	r5, [sp, #8]
   b9e02:	a902      	add	r1, sp, #8
   b9e04:	a804      	add	r0, sp, #16
   b9e06:	9303      	str	r3, [sp, #12]
   b9e08:	f7ff fcb4 	bl	b9774 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b9e0c:	2300      	movs	r3, #0
	__x.swap(*this);
   b9e0e:	a908      	add	r1, sp, #32
   b9e10:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b9e12:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b9e14:	f7ff ffd4 	bl	b9dc0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b9e18:	4631      	mov	r1, r6
   b9e1a:	a808      	add	r0, sp, #32
   b9e1c:	f7ff ffd0 	bl	b9dc0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b9e20:	a808      	add	r0, sp, #32
   b9e22:	f7ff f935 	bl	b9090 <_ZNSt14_Function_baseD1Ev>
   b9e26:	a804      	add	r0, sp, #16
   b9e28:	f7ff f932 	bl	b9090 <_ZNSt14_Function_baseD1Ev>
    }
   b9e2c:	4620      	mov	r0, r4
   b9e2e:	b00c      	add	sp, #48	; 0x30
   b9e30:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b9e32:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b9e34:	e7ea      	b.n	b9e0c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b9e38 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b9e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9e3c:	b087      	sub	sp, #28
   b9e3e:	461d      	mov	r5, r3
   b9e40:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b9e44:	4680      	mov	r8, r0
   b9e46:	468b      	mov	fp, r1
   b9e48:	4692      	mov	sl, r2
   b9e4a:	9912      	ldr	r1, [sp, #72]	; 0x48
   b9e4c:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9e4e:	2200      	movs	r2, #0
   b9e50:	2068      	movs	r0, #104	; 0x68
   b9e52:	9102      	str	r1, [sp, #8]
   b9e54:	9204      	str	r2, [sp, #16]
   b9e56:	f7fa f91e 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9e5a:	1e06      	subs	r6, r0, #0
   b9e5c:	f106 090c 	add.w	r9, r6, #12
   b9e60:	d018      	beq.n	b9e94 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b9e62:	2201      	movs	r2, #1
	: _M_impl(__a)
   b9e64:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b9e66:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b9e6a:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b9e6c:	4a15      	ldr	r2, [pc, #84]	; (b9ec4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b9e6e:	f847 2b20 	str.w	r2, [r7], #32
   b9e72:	9b03      	ldr	r3, [sp, #12]
   b9e74:	9100      	str	r1, [sp, #0]
   b9e76:	465a      	mov	r2, fp
   b9e78:	4651      	mov	r1, sl
   b9e7a:	4648      	mov	r0, r9
   b9e7c:	f7ff ffae 	bl	b9ddc <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b9e80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9e82:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b9e84:	682b      	ldr	r3, [r5, #0]
   b9e86:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b9e88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9e8a:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b9e8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9e90:	6823      	ldr	r3, [r4, #0]
   b9e92:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b9e94:	a904      	add	r1, sp, #16
   b9e96:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b9e98:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b9e9c:	f7ff fd1a 	bl	b98d4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b9ea0:	a805      	add	r0, sp, #20
   b9ea2:	f7ff fca8 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b9ea6:	f8d8 3000 	ldr.w	r3, [r8]
   b9eaa:	b93b      	cbnz	r3, b9ebc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b9eac:	4a06      	ldr	r2, [pc, #24]	; (b9ec8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b9eae:	4907      	ldr	r1, [pc, #28]	; (b9ecc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b9eb0:	200a      	movs	r0, #10
}
   b9eb2:	b007      	add	sp, #28
   b9eb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b9eb8:	f7fe bf4c 	b.w	b8d54 <panic_>
}
   b9ebc:	b007      	add	sp, #28
   b9ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9ec2:	bf00      	nop
   b9ec4:	000bedc4 	.word	0x000bedc4
   b9ec8:	000b8af5 	.word	0x000b8af5
   b9ecc:	000bec70 	.word	0x000bec70

000b9ed0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9ed0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9ed4:	4604      	mov	r4, r0
   b9ed6:	460d      	mov	r5, r1
   b9ed8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9eda:	d914      	bls.n	b9f06 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9edc:	4290      	cmp	r0, r2
   b9ede:	d213      	bcs.n	b9f08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9ee0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b9ee4:	1a75      	subs	r5, r6, r1
   b9ee6:	f1a1 0708 	sub.w	r7, r1, #8
   b9eea:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9eec:	42b7      	cmp	r7, r6
   b9eee:	d018      	beq.n	b9f22 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9ef0:	b11c      	cbz	r4, b9efa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9ef2:	4631      	mov	r1, r6
   b9ef4:	4620      	mov	r0, r4
   b9ef6:	f7ff fc6a 	bl	b97ce <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9efa:	1d30      	adds	r0, r6, #4
   b9efc:	f7ff fc7b 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b9f00:	3e08      	subs	r6, #8
   b9f02:	3c08      	subs	r4, #8
   b9f04:	e7f2      	b.n	b9eec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b9f06:	d00c      	beq.n	b9f22 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b9f08:	42b5      	cmp	r5, r6
   b9f0a:	d00a      	beq.n	b9f22 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9f0c:	b11c      	cbz	r4, b9f16 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9f0e:	4629      	mov	r1, r5
   b9f10:	4620      	mov	r0, r4
   b9f12:	f7ff fc5c 	bl	b97ce <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9f16:	1d28      	adds	r0, r5, #4
   b9f18:	f7ff fc6d 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9f1c:	3508      	adds	r5, #8
   b9f1e:	3408      	adds	r4, #8
   b9f20:	e7f2      	b.n	b9f08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b9f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9f24 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b9f24:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b9f26:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9f28:	4605      	mov	r5, r0
        if (n > 0) {
   b9f2a:	dd11      	ble.n	b9f50 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9f2c:	00f0      	lsls	r0, r6, #3
   b9f2e:	f7fe ffbd 	bl	b8eac <malloc>
            if (!d) {
   b9f32:	4604      	mov	r4, r0
   b9f34:	b158      	cbz	r0, b9f4e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b9f36:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9f3a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9f3e:	f7ff ffc7 	bl	b9ed0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9f42:	6828      	ldr	r0, [r5, #0]
   b9f44:	f7fe ffba 	bl	b8ebc <free>
        data_ = d;
   b9f48:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9f4a:	60ae      	str	r6, [r5, #8]
        return true;
   b9f4c:	2001      	movs	r0, #1
    }
   b9f4e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9f50:	2400      	movs	r4, #0
   b9f52:	e7f6      	b.n	b9f42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b9f54 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9f54:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9f56:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b9f58:	6845      	ldr	r5, [r0, #4]
   b9f5a:	4668      	mov	r0, sp
   b9f5c:	f7ff fc37 	bl	b97ce <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9f60:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b9f64:	4299      	cmp	r1, r3
   b9f66:	da10      	bge.n	b9f8a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b9f68:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9f6a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9f6c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b9f70:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b9f74:	4629      	mov	r1, r5
   b9f76:	f105 0008 	add.w	r0, r5, #8
   b9f7a:	f7ff ffa9 	bl	b9ed0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9f7e:	b98d      	cbnz	r5, b9fa4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b9f80:	6863      	ldr	r3, [r4, #4]
   b9f82:	3301      	adds	r3, #1
   b9f84:	6063      	str	r3, [r4, #4]
    return true;
   b9f86:	2601      	movs	r6, #1
   b9f88:	e006      	b.n	b9f98 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9f8a:	3101      	adds	r1, #1
   b9f8c:	4620      	mov	r0, r4
   b9f8e:	f7ff ffc9 	bl	b9f24 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9f92:	4606      	mov	r6, r0
   b9f94:	2800      	cmp	r0, #0
   b9f96:	d1e7      	bne.n	b9f68 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b9f98:	a801      	add	r0, sp, #4
   b9f9a:	f7ff fc2c 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9f9e:	4630      	mov	r0, r6
   b9fa0:	b002      	add	sp, #8
   b9fa2:	bd70      	pop	{r4, r5, r6, pc}
   b9fa4:	4669      	mov	r1, sp
   b9fa6:	4628      	mov	r0, r5
   b9fa8:	f7ff fc11 	bl	b97ce <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9fac:	e7e8      	b.n	b9f80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9fae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9fae:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9fb2:	4604      	mov	r4, r0
   b9fb4:	460d      	mov	r5, r1
   b9fb6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9fb8:	d914      	bls.n	b9fe4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9fba:	4290      	cmp	r0, r2
   b9fbc:	d213      	bcs.n	b9fe6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9fbe:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b9fc2:	1a75      	subs	r5, r6, r1
   b9fc4:	f1a1 0708 	sub.w	r7, r1, #8
   b9fc8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9fca:	42b7      	cmp	r7, r6
   b9fcc:	d018      	beq.n	ba000 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9fce:	b11c      	cbz	r4, b9fd8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b9fd0:	4631      	mov	r1, r6
   b9fd2:	4620      	mov	r0, r4
   b9fd4:	f7ff fbed 	bl	b97b2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9fd8:	1d30      	adds	r0, r6, #4
   b9fda:	f7ff fc0c 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b9fde:	3e08      	subs	r6, #8
   b9fe0:	3c08      	subs	r4, #8
   b9fe2:	e7f2      	b.n	b9fca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b9fe4:	d00c      	beq.n	ba000 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b9fe6:	42b5      	cmp	r5, r6
   b9fe8:	d00a      	beq.n	ba000 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9fea:	b11c      	cbz	r4, b9ff4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9fec:	4629      	mov	r1, r5
   b9fee:	4620      	mov	r0, r4
   b9ff0:	f7ff fbdf 	bl	b97b2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9ff4:	1d28      	adds	r0, r5, #4
   b9ff6:	f7ff fbfe 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9ffa:	3508      	adds	r5, #8
   b9ffc:	3408      	adds	r4, #8
   b9ffe:	e7f2      	b.n	b9fe6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   ba000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba002 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   ba002:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   ba004:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   ba006:	4605      	mov	r5, r0
        if (n > 0) {
   ba008:	dd11      	ble.n	ba02e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   ba00a:	00f0      	lsls	r0, r6, #3
   ba00c:	f7fe ff4e 	bl	b8eac <malloc>
            if (!d) {
   ba010:	4604      	mov	r4, r0
   ba012:	b158      	cbz	r0, ba02c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   ba014:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba018:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   ba01c:	f7ff ffc7 	bl	b9fae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   ba020:	6828      	ldr	r0, [r5, #0]
   ba022:	f7fe ff4b 	bl	b8ebc <free>
        data_ = d;
   ba026:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   ba028:	60ae      	str	r6, [r5, #8]
        return true;
   ba02a:	2001      	movs	r0, #1
    }
   ba02c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   ba02e:	2400      	movs	r4, #0
   ba030:	e7f6      	b.n	ba020 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000ba032 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba032:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba034:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   ba036:	6845      	ldr	r5, [r0, #4]
   ba038:	4668      	mov	r0, sp
   ba03a:	f7ff fbba 	bl	b97b2 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba03e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   ba042:	4299      	cmp	r1, r3
   ba044:	da10      	bge.n	ba068 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   ba046:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   ba048:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba04a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   ba04e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   ba052:	4629      	mov	r1, r5
   ba054:	f105 0008 	add.w	r0, r5, #8
   ba058:	f7ff ffa9 	bl	b9fae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   ba05c:	b98d      	cbnz	r5, ba082 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   ba05e:	6863      	ldr	r3, [r4, #4]
   ba060:	3301      	adds	r3, #1
   ba062:	6063      	str	r3, [r4, #4]
    return true;
   ba064:	2601      	movs	r6, #1
   ba066:	e006      	b.n	ba076 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba068:	3101      	adds	r1, #1
   ba06a:	4620      	mov	r0, r4
   ba06c:	f7ff ffc9 	bl	ba002 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   ba070:	4606      	mov	r6, r0
   ba072:	2800      	cmp	r0, #0
   ba074:	d1e7      	bne.n	ba046 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   ba076:	a801      	add	r0, sp, #4
   ba078:	f7ff fbbd 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba07c:	4630      	mov	r0, r6
   ba07e:	b002      	add	sp, #8
   ba080:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   ba082:	4669      	mov	r1, sp
   ba084:	4628      	mov	r0, r5
   ba086:	f7ff fb94 	bl	b97b2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   ba08a:	e7e8      	b.n	ba05e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000ba08c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   ba08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba090:	4617      	mov	r7, r2
   ba092:	b0a1      	sub	sp, #132	; 0x84
   ba094:	4680      	mov	r8, r0
    WiringBleLock lk;
   ba096:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   ba098:	460e      	mov	r6, r1
    WiringBleLock lk;
   ba09a:	f7ff f837 	bl	b910c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   ba09e:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   ba0a0:	7923      	ldrb	r3, [r4, #4]
   ba0a2:	b953      	cbnz	r3, ba0ba <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   ba0a4:	4639      	mov	r1, r7
   ba0a6:	4640      	mov	r0, r8
   ba0a8:	f7ff fb83 	bl	b97b2 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   ba0ac:	a80a      	add	r0, sp, #40	; 0x28
   ba0ae:	f7ff f83b 	bl	b9128 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   ba0b2:	4640      	mov	r0, r8
   ba0b4:	b021      	add	sp, #132	; 0x84
   ba0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   ba0ba:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   ba0bc:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   ba0c0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   ba0c4:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   ba0c6:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   ba0ca:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   ba0ce:	9b03      	ldr	r3, [sp, #12]
   ba0d0:	429d      	cmp	r5, r3
   ba0d2:	d021      	beq.n	ba118 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   ba0d4:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   ba0d8:	4658      	mov	r0, fp
   ba0da:	f109 0114 	add.w	r1, r9, #20
   ba0de:	f7ff f8c2 	bl	b9266 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   ba0e2:	b1b8      	cbz	r0, ba114 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   ba0e4:	f109 0128 	add.w	r1, r9, #40	; 0x28
   ba0e8:	4650      	mov	r0, sl
   ba0ea:	f7ff f8bc 	bl	b9266 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   ba0ee:	b188      	cbz	r0, ba114 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   ba0f0:	6823      	ldr	r3, [r4, #0]
   ba0f2:	f8d9 2000 	ldr.w	r2, [r9]
   ba0f6:	4053      	eors	r3, r2
   ba0f8:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   ba0fc:	d10a      	bne.n	ba114 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   ba0fe:	2220      	movs	r2, #32
   ba100:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   ba104:	4a5e      	ldr	r2, [pc, #376]	; (ba280 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   ba106:	9200      	str	r2, [sp, #0]
   ba108:	aa15      	add	r2, sp, #84	; 0x54
   ba10a:	495e      	ldr	r1, [pc, #376]	; (ba284 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   ba10c:	2032      	movs	r0, #50	; 0x32
   ba10e:	f7fe fe29 	bl	b8d64 <log_message>
   ba112:	e7c7      	b.n	ba0a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   ba114:	3508      	adds	r5, #8
   ba116:	e7da      	b.n	ba0ce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   ba118:	4650      	mov	r0, sl
   ba11a:	f7ff f875 	bl	b9208 <_ZNK8particle7BleUuid7isValidEv>
   ba11e:	b960      	cbnz	r0, ba13a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   ba120:	4959      	ldr	r1, [pc, #356]	; (ba288 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   ba122:	2201      	movs	r2, #1
   ba124:	a815      	add	r0, sp, #84	; 0x54
   ba126:	ad15      	add	r5, sp, #84	; 0x54
   ba128:	f7ff f846 	bl	b91b8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   ba12c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba12e:	46d4      	mov	ip, sl
   ba130:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   ba134:	682b      	ldr	r3, [r5, #0]
   ba136:	f8cc 3000 	str.w	r3, [ip]
   ba13a:	6833      	ldr	r3, [r6, #0]
   ba13c:	e9d3 5300 	ldrd	r5, r3, [r3]
   ba140:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   ba144:	455d      	cmp	r5, fp
   ba146:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   ba148:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   ba14a:	d06e      	beq.n	ba22a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   ba14c:	f855 0b08 	ldr.w	r0, [r5], #8
   ba150:	f7ff f889 	bl	b9266 <_ZNK8particle7BleUuideqERKS0_>
   ba154:	2800      	cmp	r0, #0
   ba156:	d0f5      	beq.n	ba144 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   ba158:	f104 0a14 	add.w	sl, r4, #20
   ba15c:	4650      	mov	r0, sl
   ba15e:	f7ff f853 	bl	b9208 <_ZNK8particle7BleUuid7isValidEv>
   ba162:	b988      	cbnz	r0, ba188 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   ba164:	4b49      	ldr	r3, [pc, #292]	; (ba28c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   ba166:	4948      	ldr	r1, [pc, #288]	; (ba288 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   ba168:	881a      	ldrh	r2, [r3, #0]
   ba16a:	3201      	adds	r2, #1
   ba16c:	b292      	uxth	r2, r2
   ba16e:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   ba170:	a815      	add	r0, sp, #84	; 0x54
   ba172:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   ba174:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   ba176:	f7ff f83e 	bl	b91f6 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   ba17a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba17c:	46d4      	mov	ip, sl
   ba17e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   ba182:	682b      	ldr	r3, [r5, #0]
   ba184:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   ba188:	4b41      	ldr	r3, [pc, #260]	; (ba290 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   ba18a:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   ba18c:	2228      	movs	r2, #40	; 0x28
   ba18e:	2100      	movs	r1, #0
   ba190:	a816      	add	r0, sp, #88	; 0x58
   ba192:	f002 fa19 	bl	bc5c8 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   ba196:	4651      	mov	r1, sl
   ba198:	a804      	add	r0, sp, #16
   ba19a:	f7ff f847 	bl	b922c <_ZN8particle7BleUuid7halUUIDEv>
   ba19e:	ab04      	add	r3, sp, #16
   ba1a0:	aa18      	add	r2, sp, #96	; 0x60
   ba1a2:	f10d 0c20 	add.w	ip, sp, #32
   ba1a6:	6818      	ldr	r0, [r3, #0]
   ba1a8:	6859      	ldr	r1, [r3, #4]
   ba1aa:	4615      	mov	r5, r2
   ba1ac:	c503      	stmia	r5!, {r0, r1}
   ba1ae:	3308      	adds	r3, #8
   ba1b0:	4563      	cmp	r3, ip
   ba1b2:	462a      	mov	r2, r5
   ba1b4:	d1f7      	bne.n	ba1a6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   ba1b6:	6818      	ldr	r0, [r3, #0]
   ba1b8:	6028      	str	r0, [r5, #0]
    return value_;
   ba1ba:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   ba1bc:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   ba1c0:	f8d9 3000 	ldr.w	r3, [r9]
   ba1c4:	8a9b      	ldrh	r3, [r3, #20]
   ba1c6:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   ba1ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   ba1cc:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   ba1ce:	4b31      	ldr	r3, [pc, #196]	; (ba294 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   ba1d0:	2200      	movs	r2, #0
   ba1d2:	1da1      	adds	r1, r4, #6
   ba1d4:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   ba1d6:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   ba1da:	f7fe fc43 	bl	b8a64 <hal_ble_gatt_server_add_characteristic>
   ba1de:	2800      	cmp	r0, #0
   ba1e0:	f47f af60 	bne.w	ba0a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   ba1e4:	2301      	movs	r3, #1
   ba1e6:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   ba1e8:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   ba1ea:	4639      	mov	r1, r7
        return characteristics_;
   ba1ec:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   ba1ee:	a80d      	add	r0, sp, #52	; 0x34
   ba1f0:	f7ff fadf 	bl	b97b2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   ba1f4:	4620      	mov	r0, r4
   ba1f6:	a90d      	add	r1, sp, #52	; 0x34
   ba1f8:	f7ff ff1b 	bl	ba032 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   ba1fc:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   ba1fe:	a80e      	add	r0, sp, #56	; 0x38
   ba200:	f7ff faf9 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba204:	2c00      	cmp	r4, #0
   ba206:	f47f af4d 	bne.w	ba0a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   ba20a:	2320      	movs	r3, #32
   ba20c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   ba210:	4b21      	ldr	r3, [pc, #132]	; (ba298 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   ba212:	9300      	str	r3, [sp, #0]
   ba214:	aa0d      	add	r2, sp, #52	; 0x34
   ba216:	4623      	mov	r3, r4
   ba218:	e777      	b.n	ba10a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   ba21a:	4639      	mov	r1, r7
   ba21c:	4640      	mov	r0, r8
   ba21e:	f7ff fac8 	bl	b97b2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   ba222:	a80c      	add	r0, sp, #48	; 0x30
   ba224:	f7ff fae7 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba228:	e740      	b.n	ba0ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   ba22a:	a80b      	add	r0, sp, #44	; 0x2c
   ba22c:	f7ff f94a 	bl	b94c4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   ba230:	4651      	mov	r1, sl
   ba232:	a815      	add	r0, sp, #84	; 0x54
   ba234:	f7fe fffa 	bl	b922c <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   ba238:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   ba23a:	2300      	movs	r3, #0
   ba23c:	3214      	adds	r2, #20
   ba23e:	a915      	add	r1, sp, #84	; 0x54
   ba240:	2001      	movs	r0, #1
   ba242:	f7fe fbe7 	bl	b8a14 <hal_ble_gatt_server_add_service>
   ba246:	2800      	cmp	r0, #0
   ba248:	d1e7      	bne.n	ba21a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   ba24a:	6835      	ldr	r5, [r6, #0]
   ba24c:	a90b      	add	r1, sp, #44	; 0x2c
   ba24e:	a80d      	add	r0, sp, #52	; 0x34
   ba250:	f7ff fabd 	bl	b97ce <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   ba254:	4628      	mov	r0, r5
   ba256:	a90d      	add	r1, sp, #52	; 0x34
   ba258:	f7ff fe7c 	bl	b9f54 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   ba25c:	4605      	mov	r5, r0
   ba25e:	a80e      	add	r0, sp, #56	; 0x38
   ba260:	f7ff fac9 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba264:	2d00      	cmp	r5, #0
   ba266:	d0d8      	beq.n	ba21a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   ba268:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   ba26a:	6853      	ldr	r3, [r2, #4]
   ba26c:	6812      	ldr	r2, [r2, #0]
   ba26e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   ba272:	3b01      	subs	r3, #1
   ba274:	a80c      	add	r0, sp, #48	; 0x30
   ba276:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   ba27a:	f7ff fabc 	bl	b97f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba27e:	e76b      	b.n	ba158 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   ba280:	000bed6a 	.word	0x000bed6a
   ba284:	000bec87 	.word	0x000bec87
   ba288:	000bee2e 	.word	0x000bee2e
   ba28c:	2003e6bc 	.word	0x2003e6bc
   ba290:	002c0003 	.word	0x002c0003
   ba294:	000b965d 	.word	0x000b965d
   ba298:	000bed95 	.word	0x000bed95

000ba29c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   ba29c:	4802      	ldr	r0, [pc, #8]	; (ba2a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   ba29e:	2300      	movs	r3, #0
   ba2a0:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   ba2a2:	f7fe bc07 	b.w	b8ab4 <os_mutex_recursive_create>
   ba2a6:	bf00      	nop
   ba2a8:	2003e6c0 	.word	0x2003e6c0

000ba2ac <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   ba2ac:	2200      	movs	r2, #0
   ba2ae:	6840      	ldr	r0, [r0, #4]
   ba2b0:	4611      	mov	r1, r2
   ba2b2:	f7fe bdc3 	b.w	b8e3c <network_listening>

000ba2b6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   ba2b6:	2200      	movs	r2, #0
   ba2b8:	6840      	ldr	r0, [r0, #4]
   ba2ba:	4611      	mov	r1, r2
   ba2bc:	f7fe bdde 	b.w	b8e7c <network_get_listen_timeout>

000ba2c0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   ba2c0:	6840      	ldr	r0, [r0, #4]
   ba2c2:	2200      	movs	r2, #0
   ba2c4:	f7fe bdd2 	b.w	b8e6c <network_set_listen_timeout>

000ba2c8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   ba2c8:	6840      	ldr	r0, [r0, #4]
   ba2ca:	2200      	movs	r2, #0
   ba2cc:	f081 0101 	eor.w	r1, r1, #1
   ba2d0:	f7fe bdac 	b.w	b8e2c <network_listen>

000ba2d4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   ba2d4:	2300      	movs	r3, #0
   ba2d6:	6840      	ldr	r0, [r0, #4]
   ba2d8:	461a      	mov	r2, r3
   ba2da:	4619      	mov	r1, r3
   ba2dc:	f7fe bd9e 	b.w	b8e1c <network_off>

000ba2e0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   ba2e0:	2300      	movs	r3, #0
   ba2e2:	6840      	ldr	r0, [r0, #4]
   ba2e4:	461a      	mov	r2, r3
   ba2e6:	4619      	mov	r1, r3
   ba2e8:	f7fe bd90 	b.w	b8e0c <network_on>

000ba2ec <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   ba2ec:	2200      	movs	r2, #0
   ba2ee:	6840      	ldr	r0, [r0, #4]
   ba2f0:	4611      	mov	r1, r2
   ba2f2:	f7fe bd83 	b.w	b8dfc <network_ready>

000ba2f6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   ba2f6:	2200      	movs	r2, #0
   ba2f8:	6840      	ldr	r0, [r0, #4]
   ba2fa:	4611      	mov	r1, r2
   ba2fc:	f7fe bd6e 	b.w	b8ddc <network_connecting>

000ba300 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   ba300:	6840      	ldr	r0, [r0, #4]
   ba302:	2200      	movs	r2, #0
   ba304:	2102      	movs	r1, #2
   ba306:	f7fe bd71 	b.w	b8dec <network_disconnect>

000ba30a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   ba30a:	2300      	movs	r3, #0
   ba30c:	6840      	ldr	r0, [r0, #4]
   ba30e:	461a      	mov	r2, r3
   ba310:	f7fe bd5c 	b.w	b8dcc <network_connect>

000ba314 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   ba314:	4b02      	ldr	r3, [pc, #8]	; (ba320 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   ba316:	2203      	movs	r2, #3
   ba318:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   ba31a:	4a02      	ldr	r2, [pc, #8]	; (ba324 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   ba31c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   ba31e:	4770      	bx	lr
   ba320:	2003e6c8 	.word	0x2003e6c8
   ba324:	000bee58 	.word	0x000bee58

000ba328 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   ba328:	4770      	bx	lr

000ba32a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   ba32a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba32c:	4606      	mov	r6, r0
   ba32e:	4615      	mov	r5, r2
   ba330:	460c      	mov	r4, r1
   ba332:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   ba334:	42bc      	cmp	r4, r7
   ba336:	d006      	beq.n	ba346 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   ba338:	6833      	ldr	r3, [r6, #0]
   ba33a:	f814 1b01 	ldrb.w	r1, [r4], #1
   ba33e:	689b      	ldr	r3, [r3, #8]
   ba340:	4630      	mov	r0, r6
   ba342:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   ba344:	e7f6      	b.n	ba334 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   ba346:	4628      	mov	r0, r5
   ba348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba34a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   ba34a:	7c00      	ldrb	r0, [r0, #16]
   ba34c:	2200      	movs	r2, #0
   ba34e:	f7fe bbf9 	b.w	b8b44 <hal_i2c_write>

000ba352 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   ba352:	7c00      	ldrb	r0, [r0, #16]
   ba354:	2100      	movs	r1, #0
   ba356:	f7fe bbfd 	b.w	b8b54 <hal_i2c_available>

000ba35a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   ba35a:	7c00      	ldrb	r0, [r0, #16]
   ba35c:	2100      	movs	r1, #0
   ba35e:	f7fe bc01 	b.w	b8b64 <hal_i2c_read>

000ba362 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   ba362:	7c00      	ldrb	r0, [r0, #16]
   ba364:	2100      	movs	r1, #0
   ba366:	f7fe bc05 	b.w	b8b74 <hal_i2c_peek>

000ba36a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   ba36a:	7c00      	ldrb	r0, [r0, #16]
   ba36c:	2100      	movs	r1, #0
   ba36e:	f7fe bc09 	b.w	b8b84 <hal_i2c_flush>

000ba372 <_ZN7TwoWireD0Ev>:
   ba372:	b510      	push	{r4, lr}
   ba374:	2114      	movs	r1, #20
   ba376:	4604      	mov	r4, r0
   ba378:	f7f9 fe93 	bl	b40a2 <_ZdlPvj>
   ba37c:	4620      	mov	r0, r4
   ba37e:	bd10      	pop	{r4, pc}

000ba380 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   ba380:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   ba382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba386:	4604      	mov	r4, r0
   ba388:	4608      	mov	r0, r1
   ba38a:	2100      	movs	r1, #0
   ba38c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba390:	4b03      	ldr	r3, [pc, #12]	; (ba3a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   ba392:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   ba394:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   ba396:	4611      	mov	r1, r2
   ba398:	f7fe fbfc 	bl	b8b94 <hal_i2c_init>
}
   ba39c:	4620      	mov	r0, r4
   ba39e:	bd10      	pop	{r4, pc}
   ba3a0:	000bee94 	.word	0x000bee94

000ba3a4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   ba3a4:	2300      	movs	r3, #0
   ba3a6:	7c00      	ldrb	r0, [r0, #16]
   ba3a8:	461a      	mov	r2, r3
   ba3aa:	4619      	mov	r1, r3
   ba3ac:	f7fe bbb2 	b.w	b8b14 <hal_i2c_begin>

000ba3b0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   ba3b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   ba3b2:	2200      	movs	r2, #0
   ba3b4:	2314      	movs	r3, #20
   ba3b6:	e9cd 2201 	strd	r2, r2, [sp, #4]
   ba3ba:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   ba3be:	780b      	ldrb	r3, [r1, #0]
   ba3c0:	f88d 3008 	strb.w	r3, [sp, #8]
   ba3c4:	684b      	ldr	r3, [r1, #4]
   ba3c6:	9303      	str	r3, [sp, #12]
   ba3c8:	68cb      	ldr	r3, [r1, #12]
   ba3ca:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   ba3cc:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   ba3ce:	7a0b      	ldrb	r3, [r1, #8]
   ba3d0:	9305      	str	r3, [sp, #20]
   ba3d2:	a901      	add	r1, sp, #4
   ba3d4:	f7fe fbe6 	bl	b8ba4 <hal_i2c_request_ex>
}
   ba3d8:	b007      	add	sp, #28
   ba3da:	f85d fb04 	ldr.w	pc, [sp], #4

000ba3de <_ZN7TwoWire11requestFromEhjh>:
{
   ba3de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   ba3e0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ba3e2:	f88d 1000 	strb.w	r1, [sp]
   ba3e6:	f04f 0164 	mov.w	r1, #100	; 0x64
   ba3ea:	9103      	str	r1, [sp, #12]
   ba3ec:	bf18      	it	ne
   ba3ee:	2301      	movne	r3, #1
   ba3f0:	4669      	mov	r1, sp
    size_ = size;
   ba3f2:	9201      	str	r2, [sp, #4]
   ba3f4:	f88d 3008 	strb.w	r3, [sp, #8]
   ba3f8:	f7ff ffda 	bl	ba3b0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   ba3fc:	b005      	add	sp, #20
   ba3fe:	f85d fb04 	ldr.w	pc, [sp], #4

000ba402 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   ba402:	2301      	movs	r3, #1
   ba404:	f7ff bfeb 	b.w	ba3de <_ZN7TwoWire11requestFromEhjh>

000ba408 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   ba408:	7c00      	ldrb	r0, [r0, #16]
   ba40a:	2200      	movs	r2, #0
   ba40c:	f7fe bb8a 	b.w	b8b24 <hal_i2c_begin_transmission>

000ba410 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   ba410:	b2c9      	uxtb	r1, r1
   ba412:	f7ff bff9 	b.w	ba408 <_ZN7TwoWire17beginTransmissionEh>

000ba416 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   ba416:	7c00      	ldrb	r0, [r0, #16]
   ba418:	2200      	movs	r2, #0
   ba41a:	f7fe bb8b 	b.w	b8b34 <hal_i2c_end_transmission>

000ba41e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   ba41e:	2101      	movs	r1, #1
   ba420:	f7ff bff9 	b.w	ba416 <_ZN7TwoWire15endTransmissionEh>

000ba424 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   ba424:	4770      	bx	lr

000ba426 <_ZN9IPAddressD0Ev>:
   ba426:	b510      	push	{r4, lr}
   ba428:	2118      	movs	r1, #24
   ba42a:	4604      	mov	r4, r0
   ba42c:	f7f9 fe39 	bl	b40a2 <_ZdlPvj>
   ba430:	4620      	mov	r0, r4
   ba432:	bd10      	pop	{r4, pc}

000ba434 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   ba434:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   ba436:	7d03      	ldrb	r3, [r0, #20]
   ba438:	2b06      	cmp	r3, #6
{
   ba43a:	b08d      	sub	sp, #52	; 0x34
   ba43c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba43e:	f100 0704 	add.w	r7, r0, #4
   ba442:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   ba446:	d012      	beq.n	ba46e <_ZNK9IPAddress7printToER5Print+0x3a>
   ba448:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   ba44c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   ba450:	220a      	movs	r2, #10
   ba452:	4630      	mov	r0, r6
   ba454:	f000 f973 	bl	ba73e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   ba458:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   ba45a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   ba45c:	d019      	beq.n	ba492 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   ba45e:	2c00      	cmp	r4, #0
   ba460:	d0f4      	beq.n	ba44c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   ba462:	212e      	movs	r1, #46	; 0x2e
   ba464:	4630      	mov	r0, r6
   ba466:	f000 f951 	bl	ba70c <_ZN5Print5printEc>
   ba46a:	4404      	add	r4, r0
   ba46c:	e7ee      	b.n	ba44c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba46e:	232f      	movs	r3, #47	; 0x2f
   ba470:	466a      	mov	r2, sp
   ba472:	4639      	mov	r1, r7
   ba474:	200a      	movs	r0, #10
		buf[0] = 0;
   ba476:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba47a:	f7fe fba3 	bl	b8bc4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   ba47e:	4668      	mov	r0, sp
   ba480:	f002 f8ea 	bl	bc658 <strlen>
   ba484:	6833      	ldr	r3, [r6, #0]
   ba486:	4602      	mov	r2, r0
   ba488:	68db      	ldr	r3, [r3, #12]
   ba48a:	4669      	mov	r1, sp
   ba48c:	4630      	mov	r0, r6
   ba48e:	4798      	blx	r3
   ba490:	4604      	mov	r4, r0
    }
    return n;
}
   ba492:	4620      	mov	r0, r4
   ba494:	b00d      	add	sp, #52	; 0x34
   ba496:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba498 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   ba498:	b510      	push	{r4, lr}
   ba49a:	4b05      	ldr	r3, [pc, #20]	; (ba4b0 <_ZN9IPAddressC1Ev+0x18>)
   ba49c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   ba49e:	2211      	movs	r2, #17
   ba4a0:	f840 3b04 	str.w	r3, [r0], #4
   ba4a4:	2100      	movs	r1, #0
   ba4a6:	f002 f88f 	bl	bc5c8 <memset>
}
   ba4aa:	4620      	mov	r0, r4
   ba4ac:	bd10      	pop	{r4, pc}
   ba4ae:	bf00      	nop
   ba4b0:	000beebc 	.word	0x000beebc

000ba4b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   ba4b4:	4603      	mov	r3, r0
   ba4b6:	4a07      	ldr	r2, [pc, #28]	; (ba4d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   ba4b8:	b510      	push	{r4, lr}
   ba4ba:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   ba4be:	f101 0210 	add.w	r2, r1, #16
   ba4c2:	f851 4b04 	ldr.w	r4, [r1], #4
   ba4c6:	f843 4b04 	str.w	r4, [r3], #4
   ba4ca:	4291      	cmp	r1, r2
   ba4cc:	d1f9      	bne.n	ba4c2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   ba4ce:	780a      	ldrb	r2, [r1, #0]
   ba4d0:	701a      	strb	r2, [r3, #0]
}
   ba4d2:	bd10      	pop	{r4, pc}
   ba4d4:	000beebc 	.word	0x000beebc

000ba4d8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   ba4d8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   ba4da:	2b04      	cmp	r3, #4
   ba4dc:	d104      	bne.n	ba4e8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   ba4de:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   ba4e0:	3800      	subs	r0, #0
   ba4e2:	bf18      	it	ne
   ba4e4:	2001      	movne	r0, #1
   ba4e6:	4770      	bx	lr
    } else if (version() == 6) {
   ba4e8:	2b06      	cmp	r3, #6
   ba4ea:	d107      	bne.n	ba4fc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   ba4ec:	6843      	ldr	r3, [r0, #4]
   ba4ee:	b93b      	cbnz	r3, ba500 <_ZNK9IPAddresscvbEv+0x28>
   ba4f0:	6883      	ldr	r3, [r0, #8]
   ba4f2:	b92b      	cbnz	r3, ba500 <_ZNK9IPAddresscvbEv+0x28>
   ba4f4:	68c3      	ldr	r3, [r0, #12]
   ba4f6:	b91b      	cbnz	r3, ba500 <_ZNK9IPAddresscvbEv+0x28>
   ba4f8:	6900      	ldr	r0, [r0, #16]
   ba4fa:	e7f1      	b.n	ba4e0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   ba4fc:	2000      	movs	r0, #0
   ba4fe:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   ba500:	2001      	movs	r0, #1
}
   ba502:	4770      	bx	lr

000ba504 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   ba504:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   ba506:	f89d 4008 	ldrb.w	r4, [sp, #8]
   ba50a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   ba50e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   ba512:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   ba516:	2304      	movs	r3, #4
   ba518:	6041      	str	r1, [r0, #4]
   ba51a:	7503      	strb	r3, [r0, #20]
}
   ba51c:	bd10      	pop	{r4, pc}
	...

000ba520 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   ba520:	b507      	push	{r0, r1, r2, lr}
   ba522:	4b06      	ldr	r3, [pc, #24]	; (ba53c <_ZN9IPAddressC1EPKh+0x1c>)
   ba524:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   ba526:	78cb      	ldrb	r3, [r1, #3]
   ba528:	9300      	str	r3, [sp, #0]
   ba52a:	788b      	ldrb	r3, [r1, #2]
   ba52c:	784a      	ldrb	r2, [r1, #1]
   ba52e:	7809      	ldrb	r1, [r1, #0]
   ba530:	f7ff ffe8 	bl	ba504 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   ba534:	b003      	add	sp, #12
   ba536:	f85d fb04 	ldr.w	pc, [sp], #4
   ba53a:	bf00      	nop
   ba53c:	000beebc 	.word	0x000beebc

000ba540 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   ba540:	4b01      	ldr	r3, [pc, #4]	; (ba548 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   ba542:	4a02      	ldr	r2, [pc, #8]	; (ba54c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   ba544:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   ba546:	4770      	bx	lr
   ba548:	2003e6d0 	.word	0x2003e6d0
   ba54c:	000beec8 	.word	0x000beec8

000ba550 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   ba550:	2300      	movs	r3, #0
   ba552:	6840      	ldr	r0, [r0, #4]
   ba554:	461a      	mov	r2, r3
   ba556:	f7fe bc39 	b.w	b8dcc <network_connect>

000ba55a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   ba55a:	6840      	ldr	r0, [r0, #4]
   ba55c:	2200      	movs	r2, #0
   ba55e:	2102      	movs	r1, #2
   ba560:	f7fe bc44 	b.w	b8dec <network_disconnect>

000ba564 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   ba564:	2200      	movs	r2, #0
   ba566:	6840      	ldr	r0, [r0, #4]
   ba568:	4611      	mov	r1, r2
   ba56a:	f7fe bc37 	b.w	b8ddc <network_connecting>

000ba56e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   ba56e:	2200      	movs	r2, #0
   ba570:	6840      	ldr	r0, [r0, #4]
   ba572:	4611      	mov	r1, r2
   ba574:	f7fe bc42 	b.w	b8dfc <network_ready>

000ba578 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   ba578:	2300      	movs	r3, #0
   ba57a:	6840      	ldr	r0, [r0, #4]
   ba57c:	461a      	mov	r2, r3
   ba57e:	4619      	mov	r1, r3
   ba580:	f7fe bc44 	b.w	b8e0c <network_on>

000ba584 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   ba584:	2300      	movs	r3, #0
   ba586:	6840      	ldr	r0, [r0, #4]
   ba588:	461a      	mov	r2, r3
   ba58a:	4619      	mov	r1, r3
   ba58c:	f7fe bc46 	b.w	b8e1c <network_off>

000ba590 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   ba590:	6840      	ldr	r0, [r0, #4]
   ba592:	2100      	movs	r1, #0
   ba594:	f7fe bc7a 	b.w	b8e8c <network_is_on>

000ba598 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   ba598:	6840      	ldr	r0, [r0, #4]
   ba59a:	2100      	movs	r1, #0
   ba59c:	f7fe bc7e 	b.w	b8e9c <network_is_off>

000ba5a0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   ba5a0:	6840      	ldr	r0, [r0, #4]
   ba5a2:	2200      	movs	r2, #0
   ba5a4:	f081 0101 	eor.w	r1, r1, #1
   ba5a8:	f7fe bc40 	b.w	b8e2c <network_listen>

000ba5ac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   ba5ac:	6840      	ldr	r0, [r0, #4]
   ba5ae:	2200      	movs	r2, #0
   ba5b0:	f7fe bc5c 	b.w	b8e6c <network_set_listen_timeout>

000ba5b4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   ba5b4:	2200      	movs	r2, #0
   ba5b6:	6840      	ldr	r0, [r0, #4]
   ba5b8:	4611      	mov	r1, r2
   ba5ba:	f7fe bc5f 	b.w	b8e7c <network_get_listen_timeout>

000ba5be <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   ba5be:	2200      	movs	r2, #0
   ba5c0:	6840      	ldr	r0, [r0, #4]
   ba5c2:	4611      	mov	r1, r2
   ba5c4:	f7fe bc3a 	b.w	b8e3c <network_listening>

000ba5c8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   ba5c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba5cc:	b095      	sub	sp, #84	; 0x54
   ba5ce:	4614      	mov	r4, r2
   ba5d0:	460d      	mov	r5, r1
   ba5d2:	4607      	mov	r7, r0
    IPAddress addr;
   ba5d4:	f7ff ff60 	bl	ba498 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ba5d8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   ba5da:	221c      	movs	r2, #28
   ba5dc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   ba5de:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   ba5e0:	f001 fff2 	bl	bc5c8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   ba5e4:	2340      	movs	r3, #64	; 0x40
   ba5e6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   ba5e8:	4620      	mov	r0, r4
   ba5ea:	466b      	mov	r3, sp
   ba5ec:	aa0c      	add	r2, sp, #48	; 0x30
   ba5ee:	2100      	movs	r1, #0
   ba5f0:	f7fe fb08 	bl	b8c04 <netdb_getaddrinfo>
    if (!r) {
   ba5f4:	4604      	mov	r4, r0
   ba5f6:	2800      	cmp	r0, #0
   ba5f8:	d14b      	bne.n	ba692 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba5fa:	4602      	mov	r2, r0
   ba5fc:	2101      	movs	r1, #1
   ba5fe:	6868      	ldr	r0, [r5, #4]
   ba600:	f7fe fbfc 	bl	b8dfc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba604:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba606:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba608:	4622      	mov	r2, r4
   ba60a:	6868      	ldr	r0, [r5, #4]
   ba60c:	f7fe fbf6 	bl	b8dfc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba610:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba612:	4681      	mov	r9, r0
        bool ok = false;
   ba614:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba616:	2e00      	cmp	r6, #0
   ba618:	d03b      	beq.n	ba692 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   ba61a:	2900      	cmp	r1, #0
   ba61c:	d139      	bne.n	ba692 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ba61e:	6873      	ldr	r3, [r6, #4]
   ba620:	2b02      	cmp	r3, #2
   ba622:	d003      	beq.n	ba62c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ba624:	2b0a      	cmp	r3, #10
   ba626:	d011      	beq.n	ba64c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba628:	69f6      	ldr	r6, [r6, #28]
   ba62a:	e7f4      	b.n	ba616 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   ba62c:	f1b8 0f00 	cmp.w	r8, #0
   ba630:	d0fa      	beq.n	ba628 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   ba632:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   ba634:	a806      	add	r0, sp, #24
   ba636:	3104      	adds	r1, #4
class IPAddress : public Printable {
   ba638:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   ba63a:	f7ff ff71 	bl	ba520 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba63e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba640:	1d3c      	adds	r4, r7, #4
   ba642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba644:	682b      	ldr	r3, [r5, #0]
   ba646:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba648:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   ba64a:	e7ed      	b.n	ba628 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   ba64c:	f1b9 0f00 	cmp.w	r9, #0
   ba650:	d0ea      	beq.n	ba628 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   ba652:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   ba654:	2210      	movs	r2, #16
   ba656:	a801      	add	r0, sp, #4
   ba658:	f001 ffb6 	bl	bc5c8 <memset>
                    a.v = 6;
   ba65c:	2306      	movs	r3, #6
   ba65e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba662:	ad01      	add	r5, sp, #4
   ba664:	f104 0308 	add.w	r3, r4, #8
   ba668:	3418      	adds	r4, #24
   ba66a:	6818      	ldr	r0, [r3, #0]
   ba66c:	6859      	ldr	r1, [r3, #4]
   ba66e:	462a      	mov	r2, r5
   ba670:	c203      	stmia	r2!, {r0, r1}
   ba672:	3308      	adds	r3, #8
   ba674:	42a3      	cmp	r3, r4
   ba676:	4615      	mov	r5, r2
   ba678:	d1f7      	bne.n	ba66a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   ba67a:	a901      	add	r1, sp, #4
   ba67c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   ba67e:	ad07      	add	r5, sp, #28
   ba680:	f7ff ff18 	bl	ba4b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba686:	1d3c      	adds	r4, r7, #4
   ba688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba68a:	682b      	ldr	r3, [r5, #0]
   ba68c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba68e:	4649      	mov	r1, r9
   ba690:	e7ca      	b.n	ba628 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   ba692:	9800      	ldr	r0, [sp, #0]
   ba694:	f7fe faae 	bl	b8bf4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   ba698:	4638      	mov	r0, r7
   ba69a:	b015      	add	sp, #84	; 0x54
   ba69c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ba6a0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   ba6a0:	4b02      	ldr	r3, [pc, #8]	; (ba6ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   ba6a2:	4a03      	ldr	r2, [pc, #12]	; (ba6b0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   ba6a4:	601a      	str	r2, [r3, #0]
   ba6a6:	2200      	movs	r2, #0
   ba6a8:	605a      	str	r2, [r3, #4]

} // spark
   ba6aa:	4770      	bx	lr
   ba6ac:	2003e6d4 	.word	0x2003e6d4
   ba6b0:	000beed4 	.word	0x000beed4

000ba6b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   ba6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba6b6:	4606      	mov	r6, r0
   ba6b8:	460d      	mov	r5, r1
  size_t n = 0;
   ba6ba:	188f      	adds	r7, r1, r2
   ba6bc:	2400      	movs	r4, #0
  while (size--) {
   ba6be:	42bd      	cmp	r5, r7
   ba6c0:	d00c      	beq.n	ba6dc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   ba6c2:	6833      	ldr	r3, [r6, #0]
   ba6c4:	f815 1b01 	ldrb.w	r1, [r5], #1
   ba6c8:	689b      	ldr	r3, [r3, #8]
   ba6ca:	4630      	mov	r0, r6
   ba6cc:	4798      	blx	r3
     if (chunk>=0)
   ba6ce:	1e03      	subs	r3, r0, #0
   ba6d0:	db01      	blt.n	ba6d6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   ba6d2:	441c      	add	r4, r3
  while (size--) {
   ba6d4:	e7f3      	b.n	ba6be <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   ba6d6:	2c00      	cmp	r4, #0
   ba6d8:	bf08      	it	eq
   ba6da:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   ba6dc:	4620      	mov	r0, r4
   ba6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba6e0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   ba6e0:	b513      	push	{r0, r1, r4, lr}
   ba6e2:	4604      	mov	r4, r0
    }
   ba6e4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   ba6e6:	b159      	cbz	r1, ba700 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   ba6e8:	9101      	str	r1, [sp, #4]
   ba6ea:	f001 ffb5 	bl	bc658 <strlen>
   ba6ee:	6823      	ldr	r3, [r4, #0]
   ba6f0:	9901      	ldr	r1, [sp, #4]
   ba6f2:	68db      	ldr	r3, [r3, #12]
   ba6f4:	4602      	mov	r2, r0
   ba6f6:	4620      	mov	r0, r4
    }
   ba6f8:	b002      	add	sp, #8
   ba6fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   ba6fe:	4718      	bx	r3
    }
   ba700:	b002      	add	sp, #8
   ba702:	bd10      	pop	{r4, pc}

000ba704 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   ba704:	b508      	push	{r3, lr}
  return write(str);
   ba706:	f7ff ffeb 	bl	ba6e0 <_ZN5Print5writeEPKc>
}
   ba70a:	bd08      	pop	{r3, pc}

000ba70c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   ba70c:	6803      	ldr	r3, [r0, #0]
   ba70e:	689b      	ldr	r3, [r3, #8]
   ba710:	4718      	bx	r3

000ba712 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   ba712:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   ba714:	210d      	movs	r1, #13
{
   ba716:	4605      	mov	r5, r0
  size_t n = print('\r');
   ba718:	f7ff fff8 	bl	ba70c <_ZN5Print5printEc>
  n += print('\n');
   ba71c:	210a      	movs	r1, #10
  size_t n = print('\r');
   ba71e:	4604      	mov	r4, r0
  n += print('\n');
   ba720:	4628      	mov	r0, r5
   ba722:	f7ff fff3 	bl	ba70c <_ZN5Print5printEc>
  return n;
}
   ba726:	4420      	add	r0, r4
   ba728:	bd38      	pop	{r3, r4, r5, pc}

000ba72a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   ba72a:	b538      	push	{r3, r4, r5, lr}
   ba72c:	4605      	mov	r5, r0
  return write(str);
   ba72e:	f7ff ffd7 	bl	ba6e0 <_ZN5Print5writeEPKc>
   ba732:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   ba734:	4628      	mov	r0, r5
   ba736:	f7ff ffec 	bl	ba712 <_ZN5Print7printlnEv>
  return n;
}
   ba73a:	4420      	add	r0, r4
   ba73c:	bd38      	pop	{r3, r4, r5, pc}

000ba73e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   ba73e:	b530      	push	{r4, r5, lr}
   ba740:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   ba742:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   ba744:	2a01      	cmp	r2, #1
  *str = '\0';
   ba746:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   ba74a:	bf98      	it	ls
   ba74c:	220a      	movls	r2, #10
   ba74e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   ba750:	460d      	mov	r5, r1
   ba752:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   ba756:	fb01 5312 	mls	r3, r1, r2, r5
   ba75a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba75e:	2b09      	cmp	r3, #9
   ba760:	bf94      	ite	ls
   ba762:	3330      	addls	r3, #48	; 0x30
   ba764:	3337      	addhi	r3, #55	; 0x37
   ba766:	b2db      	uxtb	r3, r3
  } while(n);
   ba768:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba76a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   ba76e:	d9ef      	bls.n	ba750 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   ba770:	4621      	mov	r1, r4
   ba772:	f7ff ffb5 	bl	ba6e0 <_ZN5Print5writeEPKc>
}
   ba776:	b00b      	add	sp, #44	; 0x2c
   ba778:	bd30      	pop	{r4, r5, pc}

000ba77a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   ba77a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba77e:	b086      	sub	sp, #24
   ba780:	af00      	add	r7, sp, #0
   ba782:	4605      	mov	r5, r0
   ba784:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   ba786:	1d38      	adds	r0, r7, #4
   ba788:	2114      	movs	r1, #20
{
   ba78a:	4614      	mov	r4, r2
    va_copy(args2, args);
   ba78c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   ba78e:	f7fe fbad 	bl	b8eec <vsnprintf>

    if (n<bufsize)
   ba792:	2813      	cmp	r0, #19
   ba794:	d80e      	bhi.n	ba7b4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   ba796:	1d39      	adds	r1, r7, #4
   ba798:	4628      	mov	r0, r5
   ba79a:	f7ff ffa1 	bl	ba6e0 <_ZN5Print5writeEPKc>
   ba79e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   ba7a0:	b11e      	cbz	r6, ba7aa <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   ba7a2:	4628      	mov	r0, r5
   ba7a4:	f7ff ffb5 	bl	ba712 <_ZN5Print7printlnEv>
   ba7a8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   ba7aa:	4620      	mov	r0, r4
   ba7ac:	3718      	adds	r7, #24
   ba7ae:	46bd      	mov	sp, r7
   ba7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   ba7b4:	f100 0308 	add.w	r3, r0, #8
   ba7b8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   ba7bc:	46e8      	mov	r8, sp
        char bigger[n+1];
   ba7be:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   ba7c2:	4622      	mov	r2, r4
   ba7c4:	1c41      	adds	r1, r0, #1
   ba7c6:	683b      	ldr	r3, [r7, #0]
   ba7c8:	4668      	mov	r0, sp
   ba7ca:	f7fe fb8f 	bl	b8eec <vsnprintf>
  return write(str);
   ba7ce:	4669      	mov	r1, sp
   ba7d0:	4628      	mov	r0, r5
   ba7d2:	f7ff ff85 	bl	ba6e0 <_ZN5Print5writeEPKc>
   ba7d6:	4604      	mov	r4, r0
   ba7d8:	46c5      	mov	sp, r8
   ba7da:	e7e1      	b.n	ba7a0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000ba7dc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   ba7dc:	4b01      	ldr	r3, [pc, #4]	; (ba7e4 <_GLOBAL__sub_I_RGB+0x8>)
   ba7de:	2200      	movs	r2, #0
   ba7e0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   ba7e2:	4770      	bx	lr
   ba7e4:	2003e6dc 	.word	0x2003e6dc

000ba7e8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   ba7e8:	b510      	push	{r4, lr}
   ba7ea:	4604      	mov	r4, r0
{
	free(buffer);
   ba7ec:	6800      	ldr	r0, [r0, #0]
   ba7ee:	f7fe fb65 	bl	b8ebc <free>
}
   ba7f2:	4620      	mov	r0, r4
   ba7f4:	bd10      	pop	{r4, pc}

000ba7f6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   ba7f6:	b510      	push	{r4, lr}
   ba7f8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   ba7fa:	6800      	ldr	r0, [r0, #0]
   ba7fc:	b108      	cbz	r0, ba802 <_ZN6String10invalidateEv+0xc>
   ba7fe:	f7fe fb5d 	bl	b8ebc <free>
	buffer = NULL;
   ba802:	2300      	movs	r3, #0
	capacity = len = 0;
   ba804:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   ba808:	6023      	str	r3, [r4, #0]
}
   ba80a:	bd10      	pop	{r4, pc}

000ba80c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   ba80c:	b538      	push	{r3, r4, r5, lr}
   ba80e:	4604      	mov	r4, r0
   ba810:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   ba812:	6800      	ldr	r0, [r0, #0]
   ba814:	3101      	adds	r1, #1
   ba816:	f7fe fb59 	bl	b8ecc <realloc>
	if (newbuffer) {
   ba81a:	b110      	cbz	r0, ba822 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   ba81c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   ba820:	2001      	movs	r0, #1
	}
	return 0;
}
   ba822:	bd38      	pop	{r3, r4, r5, pc}

000ba824 <_ZN6String7reserveEj>:
{
   ba824:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   ba826:	6803      	ldr	r3, [r0, #0]
{
   ba828:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   ba82a:	b123      	cbz	r3, ba836 <_ZN6String7reserveEj+0x12>
   ba82c:	6843      	ldr	r3, [r0, #4]
   ba82e:	428b      	cmp	r3, r1
   ba830:	d301      	bcc.n	ba836 <_ZN6String7reserveEj+0x12>
   ba832:	2001      	movs	r0, #1
}
   ba834:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   ba836:	4620      	mov	r0, r4
   ba838:	f7ff ffe8 	bl	ba80c <_ZN6String12changeBufferEj>
   ba83c:	2800      	cmp	r0, #0
   ba83e:	d0f9      	beq.n	ba834 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   ba840:	68a3      	ldr	r3, [r4, #8]
   ba842:	2b00      	cmp	r3, #0
   ba844:	d1f5      	bne.n	ba832 <_ZN6String7reserveEj+0xe>
   ba846:	6822      	ldr	r2, [r4, #0]
   ba848:	7013      	strb	r3, [r2, #0]
   ba84a:	e7f2      	b.n	ba832 <_ZN6String7reserveEj+0xe>

000ba84c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   ba84c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba84e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   ba850:	4611      	mov	r1, r2
   ba852:	9201      	str	r2, [sp, #4]
{
   ba854:	4604      	mov	r4, r0
	if (!reserve(length)) {
   ba856:	f7ff ffe5 	bl	ba824 <_ZN6String7reserveEj>
   ba85a:	9a01      	ldr	r2, [sp, #4]
   ba85c:	b928      	cbnz	r0, ba86a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   ba85e:	4620      	mov	r0, r4
   ba860:	f7ff ffc9 	bl	ba7f6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   ba864:	4620      	mov	r0, r4
   ba866:	b003      	add	sp, #12
   ba868:	bd30      	pop	{r4, r5, pc}
	len = length;
   ba86a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   ba86c:	4629      	mov	r1, r5
   ba86e:	6820      	ldr	r0, [r4, #0]
   ba870:	f001 fe82 	bl	bc578 <memcpy>
	buffer[len] = 0;
   ba874:	6822      	ldr	r2, [r4, #0]
   ba876:	68a3      	ldr	r3, [r4, #8]
   ba878:	2100      	movs	r1, #0
   ba87a:	54d1      	strb	r1, [r2, r3]
	return *this;
   ba87c:	e7f2      	b.n	ba864 <_ZN6String4copyEPKcj+0x18>

000ba87e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   ba87e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   ba880:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   ba882:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   ba886:	4604      	mov	r4, r0
	len = 0;
   ba888:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba88a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   ba88c:	b141      	cbz	r1, ba8a0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   ba88e:	4608      	mov	r0, r1
   ba890:	9101      	str	r1, [sp, #4]
   ba892:	f001 fee1 	bl	bc658 <strlen>
   ba896:	9901      	ldr	r1, [sp, #4]
   ba898:	4602      	mov	r2, r0
   ba89a:	4620      	mov	r0, r4
   ba89c:	f7ff ffd6 	bl	ba84c <_ZN6String4copyEPKcj>
}
   ba8a0:	4620      	mov	r0, r4
   ba8a2:	b002      	add	sp, #8
   ba8a4:	bd10      	pop	{r4, pc}

000ba8a6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   ba8a6:	b538      	push	{r3, r4, r5, lr}
   ba8a8:	4605      	mov	r5, r0
	if (buffer) {
   ba8aa:	6800      	ldr	r0, [r0, #0]
{
   ba8ac:	460c      	mov	r4, r1
	if (buffer) {
   ba8ae:	b168      	cbz	r0, ba8cc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   ba8b0:	686a      	ldr	r2, [r5, #4]
   ba8b2:	688b      	ldr	r3, [r1, #8]
   ba8b4:	429a      	cmp	r2, r3
   ba8b6:	d307      	bcc.n	ba8c8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   ba8b8:	6809      	ldr	r1, [r1, #0]
   ba8ba:	f001 fec5 	bl	bc648 <strcpy>
			len = rhs.len;
   ba8be:	68a3      	ldr	r3, [r4, #8]
   ba8c0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   ba8c2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   ba8c4:	60a3      	str	r3, [r4, #8]
}
   ba8c6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   ba8c8:	f7fe faf8 	bl	b8ebc <free>
	buffer = rhs.buffer;
   ba8cc:	6823      	ldr	r3, [r4, #0]
   ba8ce:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   ba8d0:	6863      	ldr	r3, [r4, #4]
   ba8d2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   ba8d4:	68a3      	ldr	r3, [r4, #8]
   ba8d6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   ba8d8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   ba8da:	e9c4 3300 	strd	r3, r3, [r4]
   ba8de:	e7f1      	b.n	ba8c4 <_ZN6String4moveERS_+0x1e>

000ba8e0 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   ba8e0:	4288      	cmp	r0, r1
{
   ba8e2:	b510      	push	{r4, lr}
   ba8e4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   ba8e6:	d005      	beq.n	ba8f4 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   ba8e8:	680b      	ldr	r3, [r1, #0]
   ba8ea:	b12b      	cbz	r3, ba8f8 <_ZN6StringaSERKS_+0x18>
   ba8ec:	688a      	ldr	r2, [r1, #8]
   ba8ee:	4619      	mov	r1, r3
   ba8f0:	f7ff ffac 	bl	ba84c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba8f4:	4620      	mov	r0, r4
   ba8f6:	bd10      	pop	{r4, pc}
	else invalidate();
   ba8f8:	f7ff ff7d 	bl	ba7f6 <_ZN6String10invalidateEv>
   ba8fc:	e7fa      	b.n	ba8f4 <_ZN6StringaSERKS_+0x14>

000ba8fe <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   ba8fe:	4288      	cmp	r0, r1
{
   ba900:	b510      	push	{r4, lr}
   ba902:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   ba904:	d001      	beq.n	ba90a <_ZN6StringaSEOS_+0xc>
   ba906:	f7ff ffce 	bl	ba8a6 <_ZN6String4moveERS_>
	return *this;
}
   ba90a:	4620      	mov	r0, r4
   ba90c:	bd10      	pop	{r4, pc}

000ba90e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   ba90e:	b513      	push	{r0, r1, r4, lr}
   ba910:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   ba912:	b159      	cbz	r1, ba92c <_ZN6StringaSEPKc+0x1e>
   ba914:	4608      	mov	r0, r1
   ba916:	9101      	str	r1, [sp, #4]
   ba918:	f001 fe9e 	bl	bc658 <strlen>
   ba91c:	9901      	ldr	r1, [sp, #4]
   ba91e:	4602      	mov	r2, r0
   ba920:	4620      	mov	r0, r4
   ba922:	f7ff ff93 	bl	ba84c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba926:	4620      	mov	r0, r4
   ba928:	b002      	add	sp, #8
   ba92a:	bd10      	pop	{r4, pc}
	else invalidate();
   ba92c:	f7ff ff63 	bl	ba7f6 <_ZN6String10invalidateEv>
   ba930:	e7f9      	b.n	ba926 <_ZN6StringaSEPKc+0x18>

000ba932 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   ba932:	b510      	push	{r4, lr}
   ba934:	4604      	mov	r4, r0
   ba936:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   ba938:	2300      	movs	r3, #0
	capacity = 0;
   ba93a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   ba93e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   ba940:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   ba942:	4608      	mov	r0, r1
	itoa(value, buf, base);
   ba944:	a901      	add	r1, sp, #4
   ba946:	f000 fd15 	bl	bb374 <itoa>
	*this = buf;
   ba94a:	a901      	add	r1, sp, #4
   ba94c:	4620      	mov	r0, r4
   ba94e:	f7ff ffde 	bl	ba90e <_ZN6StringaSEPKc>
}
   ba952:	4620      	mov	r0, r4
   ba954:	b00a      	add	sp, #40	; 0x28
   ba956:	bd10      	pop	{r4, pc}

000ba958 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   ba958:	b570      	push	{r4, r5, r6, lr}
   ba95a:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   ba95c:	460e      	mov	r6, r1
   ba95e:	b909      	cbnz	r1, ba964 <_ZN6String6concatEPKcj+0xc>
   ba960:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   ba962:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   ba964:	b16a      	cbz	r2, ba982 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   ba966:	6884      	ldr	r4, [r0, #8]
   ba968:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   ba96a:	4621      	mov	r1, r4
   ba96c:	f7ff ff5a 	bl	ba824 <_ZN6String7reserveEj>
   ba970:	2800      	cmp	r0, #0
   ba972:	d0f5      	beq.n	ba960 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   ba974:	6828      	ldr	r0, [r5, #0]
   ba976:	68ab      	ldr	r3, [r5, #8]
   ba978:	4631      	mov	r1, r6
   ba97a:	4418      	add	r0, r3
   ba97c:	f001 fe64 	bl	bc648 <strcpy>
	len = newlen;
   ba980:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   ba982:	2001      	movs	r0, #1
   ba984:	e7ed      	b.n	ba962 <_ZN6String6concatEPKcj+0xa>

000ba986 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   ba986:	688a      	ldr	r2, [r1, #8]
   ba988:	6809      	ldr	r1, [r1, #0]
   ba98a:	f7ff bfe5 	b.w	ba958 <_ZN6String6concatEPKcj>

000ba98e <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   ba98e:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   ba990:	2300      	movs	r3, #0
	buf[0] = c;
   ba992:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   ba996:	2201      	movs	r2, #1
   ba998:	a901      	add	r1, sp, #4
	buf[1] = 0;
   ba99a:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   ba99e:	f7ff ffdb 	bl	ba958 <_ZN6String6concatEPKcj>
}
   ba9a2:	b003      	add	sp, #12
   ba9a4:	f85d fb04 	ldr.w	pc, [sp], #4

000ba9a8 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   ba9a8:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba9aa:	688a      	ldr	r2, [r1, #8]
   ba9ac:	6809      	ldr	r1, [r1, #0]
{
   ba9ae:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba9b0:	f7ff ffd2 	bl	ba958 <_ZN6String6concatEPKcj>
   ba9b4:	b910      	cbnz	r0, ba9bc <_ZplRK15StringSumHelperRK6String+0x14>
   ba9b6:	4620      	mov	r0, r4
   ba9b8:	f7ff ff1d 	bl	ba7f6 <_ZN6String10invalidateEv>
	return a;
}
   ba9bc:	4620      	mov	r0, r4
   ba9be:	bd10      	pop	{r4, pc}

000ba9c0 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   ba9c0:	b513      	push	{r0, r1, r4, lr}
   ba9c2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba9c4:	b929      	cbnz	r1, ba9d2 <_ZplRK15StringSumHelperPKc+0x12>
   ba9c6:	4620      	mov	r0, r4
   ba9c8:	f7ff ff15 	bl	ba7f6 <_ZN6String10invalidateEv>
	return a;
}
   ba9cc:	4620      	mov	r0, r4
   ba9ce:	b002      	add	sp, #8
   ba9d0:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba9d2:	4608      	mov	r0, r1
   ba9d4:	9101      	str	r1, [sp, #4]
   ba9d6:	f001 fe3f 	bl	bc658 <strlen>
   ba9da:	9901      	ldr	r1, [sp, #4]
   ba9dc:	4602      	mov	r2, r0
   ba9de:	4620      	mov	r0, r4
   ba9e0:	f7ff ffba 	bl	ba958 <_ZN6String6concatEPKcj>
   ba9e4:	2800      	cmp	r0, #0
   ba9e6:	d0ee      	beq.n	ba9c6 <_ZplRK15StringSumHelperPKc+0x6>
   ba9e8:	e7f0      	b.n	ba9cc <_ZplRK15StringSumHelperPKc+0xc>

000ba9ea <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   ba9ea:	6802      	ldr	r2, [r0, #0]
{
   ba9ec:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   ba9ee:	6809      	ldr	r1, [r1, #0]
   ba9f0:	b162      	cbz	r2, baa0c <_ZNK6String9compareToERKS_+0x22>
   ba9f2:	b941      	cbnz	r1, baa06 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   ba9f4:	6880      	ldr	r0, [r0, #8]
   ba9f6:	b160      	cbz	r0, baa12 <_ZNK6String9compareToERKS_+0x28>
   ba9f8:	7810      	ldrb	r0, [r2, #0]
   ba9fa:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   ba9fc:	6898      	ldr	r0, [r3, #8]
   ba9fe:	b140      	cbz	r0, baa12 <_ZNK6String9compareToERKS_+0x28>
   baa00:	7809      	ldrb	r1, [r1, #0]
   baa02:	4248      	negs	r0, r1
   baa04:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   baa06:	4610      	mov	r0, r2
   baa08:	f001 be14 	b.w	bc634 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   baa0c:	2900      	cmp	r1, #0
   baa0e:	d1f5      	bne.n	ba9fc <_ZNK6String9compareToERKS_+0x12>
		return 0;
   baa10:	4608      	mov	r0, r1
}
   baa12:	4770      	bx	lr

000baa14 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   baa14:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   baa16:	6882      	ldr	r2, [r0, #8]
   baa18:	688b      	ldr	r3, [r1, #8]
   baa1a:	429a      	cmp	r2, r3
   baa1c:	d105      	bne.n	baa2a <_ZNK6String6equalsERKS_+0x16>
   baa1e:	f7ff ffe4 	bl	ba9ea <_ZNK6String9compareToERKS_>
   baa22:	fab0 f080 	clz	r0, r0
   baa26:	0940      	lsrs	r0, r0, #5
}
   baa28:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   baa2a:	2000      	movs	r0, #0
   baa2c:	e7fc      	b.n	baa28 <_ZNK6String6equalsERKS_+0x14>

000baa2e <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   baa2e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   baa30:	6882      	ldr	r2, [r0, #8]
   baa32:	b93a      	cbnz	r2, baa44 <_ZNK6String6equalsEPKc+0x16>
   baa34:	b121      	cbz	r1, baa40 <_ZNK6String6equalsEPKc+0x12>
   baa36:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   baa38:	fab0 f080 	clz	r0, r0
   baa3c:	0940      	lsrs	r0, r0, #5
   baa3e:	e000      	b.n	baa42 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   baa40:	2001      	movs	r0, #1
}
   baa42:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   baa44:	6800      	ldr	r0, [r0, #0]
   baa46:	b909      	cbnz	r1, baa4c <_ZNK6String6equalsEPKc+0x1e>
   baa48:	7800      	ldrb	r0, [r0, #0]
   baa4a:	e7f5      	b.n	baa38 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   baa4c:	f001 fdf2 	bl	bc634 <strcmp>
   baa50:	e7f2      	b.n	baa38 <_ZNK6String6equalsEPKc+0xa>

000baa52 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   baa52:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   baa54:	6883      	ldr	r3, [r0, #8]
   baa56:	4293      	cmp	r3, r2
   baa58:	d907      	bls.n	baa6a <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   baa5a:	6804      	ldr	r4, [r0, #0]
   baa5c:	6809      	ldr	r1, [r1, #0]
   baa5e:	18a0      	adds	r0, r4, r2
   baa60:	f001 fe22 	bl	bc6a8 <strstr>
	if (found == NULL) return -1;
   baa64:	b108      	cbz	r0, baa6a <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   baa66:	1b00      	subs	r0, r0, r4
}
   baa68:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   baa6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   baa6e:	e7fb      	b.n	baa68 <_ZNK6String7indexOfERKS_j+0x16>

000baa70 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   baa70:	2200      	movs	r2, #0
   baa72:	f7ff bfee 	b.w	baa52 <_ZNK6String7indexOfERKS_j>
	...

000baa78 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   baa78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   baa7a:	429a      	cmp	r2, r3
{
   baa7c:	460f      	mov	r7, r1
   baa7e:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   baa80:	490c      	ldr	r1, [pc, #48]	; (baab4 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   baa82:	bf88      	it	hi
   baa84:	4613      	movhi	r3, r2
{
   baa86:	4614      	mov	r4, r2
   baa88:	4606      	mov	r6, r0
	if (left > right) {
   baa8a:	bf84      	itt	hi
   baa8c:	462c      	movhi	r4, r5
   baa8e:	461d      	movhi	r5, r3
	String out;
   baa90:	f7ff fef5 	bl	ba87e <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   baa94:	68bb      	ldr	r3, [r7, #8]
   baa96:	42a3      	cmp	r3, r4
   baa98:	d30a      	bcc.n	baab0 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   baa9a:	6839      	ldr	r1, [r7, #0]
   baa9c:	42ab      	cmp	r3, r5
   baa9e:	bf94      	ite	ls
   baaa0:	ebc4 0203 	rsbls	r2, r4, r3
   baaa4:	ebc4 0205 	rsbhi	r2, r4, r5
   baaa8:	4421      	add	r1, r4
   baaaa:	4630      	mov	r0, r6
   baaac:	f7ff fece 	bl	ba84c <_ZN6String4copyEPKcj>
	return out;
}
   baab0:	4630      	mov	r0, r6
   baab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   baab4:	000bec3a 	.word	0x000bec3a

000baab8 <_ZNK6String9substringEj>:
{
   baab8:	b510      	push	{r4, lr}
   baaba:	4604      	mov	r4, r0
	return substring(left, len);
   baabc:	688b      	ldr	r3, [r1, #8]
   baabe:	f7ff ffdb 	bl	baa78 <_ZNK6String9substringEjj>
}
   baac2:	4620      	mov	r0, r4
   baac4:	bd10      	pop	{r4, pc}
	...

000baac8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   baac8:	4b05      	ldr	r3, [pc, #20]	; (baae0 <_GLOBAL__sub_I_System+0x18>)
   baaca:	2202      	movs	r2, #2
   baacc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   baace:	4b05      	ldr	r3, [pc, #20]	; (baae4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   baad0:	4a05      	ldr	r2, [pc, #20]	; (baae8 <_GLOBAL__sub_I_System+0x20>)
   baad2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   baad4:	2000      	movs	r0, #0
   baad6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   baada:	f7fe b94b 	b.w	b8d74 <set_system_mode>
   baade:	bf00      	nop
   baae0:	2003e6f8 	.word	0x2003e6f8
   baae4:	2003e6ec 	.word	0x2003e6ec
   baae8:	ffff0000 	.word	0xffff0000

000baaec <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   baaec:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   baaee:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   baaf0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   baaf4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   baaf6:	2201      	movs	r2, #1
   baaf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   baafc:	f10d 0107 	add.w	r1, sp, #7
   bab00:	47a0      	blx	r4
}
   bab02:	b002      	add	sp, #8
   bab04:	bd10      	pop	{r4, pc}

000bab06 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   bab06:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   bab08:	6803      	ldr	r3, [r0, #0]
   bab0a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   bab0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bab10:	46a4      	mov	ip, r4
}
   bab12:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   bab16:	4760      	bx	ip

000bab18 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   bab18:	b513      	push	{r0, r1, r4, lr}
   bab1a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   bab1c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   bab1e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   bab22:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   bab24:	f10d 0107 	add.w	r1, sp, #7
   bab28:	2201      	movs	r2, #1
   bab2a:	47a0      	blx	r4
}
   bab2c:	b002      	add	sp, #8
   bab2e:	bd10      	pop	{r4, pc}

000bab30 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   bab30:	b510      	push	{r4, lr}
      { return _M_ptr; }
   bab32:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   bab34:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bab38:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bab3c:	429a      	cmp	r2, r3
int TCPClient::read() {
   bab3e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   bab40:	d008      	beq.n	bab54 <_ZN9TCPClient4readEv+0x24>
   bab42:	6963      	ldr	r3, [r4, #20]
   bab44:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   bab48:	1c51      	adds	r1, r2, #1
   bab4a:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   bab4e:	4413      	add	r3, r2
   bab50:	7918      	ldrb	r0, [r3, #4]
}
   bab52:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   bab54:	6803      	ldr	r3, [r0, #0]
   bab56:	691b      	ldr	r3, [r3, #16]
   bab58:	4798      	blx	r3
   bab5a:	2800      	cmp	r0, #0
   bab5c:	d1f1      	bne.n	bab42 <_ZN9TCPClient4readEv+0x12>
   bab5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bab62:	e7f6      	b.n	bab52 <_ZN9TCPClient4readEv+0x22>

000bab64 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   bab64:	4770      	bx	lr

000bab66 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   bab66:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   bab68:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   bab6a:	43c0      	mvns	r0, r0
   bab6c:	0fc0      	lsrs	r0, r0, #31
   bab6e:	4770      	bx	lr

000bab70 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bab70:	4770      	bx	lr
	...

000bab74 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bab74:	4b06      	ldr	r3, [pc, #24]	; (bab90 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bab76:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bab78:	b510      	push	{r4, lr}
   bab7a:	f100 040c 	add.w	r4, r0, #12
	    ||
   bab7e:	d005      	beq.n	bab8c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bab80:	4608      	mov	r0, r1
   bab82:	f000 fd1d 	bl	bb5c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bab86:	2800      	cmp	r0, #0
   bab88:	bf08      	it	eq
   bab8a:	2400      	moveq	r4, #0
      }
   bab8c:	4620      	mov	r0, r4
   bab8e:	bd10      	pop	{r4, pc}
   bab90:	000bee10 	.word	0x000bee10

000bab94 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bab94:	b510      	push	{r4, lr}
   bab96:	21ac      	movs	r1, #172	; 0xac
   bab98:	4604      	mov	r4, r0
   bab9a:	f7f9 fa82 	bl	b40a2 <_ZdlPvj>
   bab9e:	4620      	mov	r0, r4
   baba0:	bd10      	pop	{r4, pc}

000baba2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   baba2:	21ac      	movs	r1, #172	; 0xac
   baba4:	f7f9 ba7d 	b.w	b40a2 <_ZdlPvj>

000baba8 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   baba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   babac:	f04f 0800 	mov.w	r8, #0
   babb0:	b086      	sub	sp, #24
   babb2:	461c      	mov	r4, r3
   babb4:	f8c0 8004 	str.w	r8, [r0, #4]
   babb8:	4605      	mov	r5, r0
   babba:	460e      	mov	r6, r1
   babbc:	4617      	mov	r7, r2
    struct timeval tv = {};
   babbe:	4641      	mov	r1, r8
   babc0:	2210      	movs	r2, #16
   babc2:	a802      	add	r0, sp, #8
   babc4:	f001 fd00 	bl	bc5c8 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   babc8:	1c63      	adds	r3, r4, #1
   babca:	d009      	beq.n	babe0 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   babcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   babd0:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   babd4:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   babd8:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   babdc:	435c      	muls	r4, r3
   babde:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   babe0:	6968      	ldr	r0, [r5, #20]
   babe2:	2310      	movs	r3, #16
   babe4:	9300      	str	r3, [sp, #0]
   babe6:	6800      	ldr	r0, [r0, #0]
   babe8:	ab02      	add	r3, sp, #8
   babea:	f241 0205 	movw	r2, #4101	; 0x1005
   babee:	f640 71ff 	movw	r1, #4095	; 0xfff
   babf2:	f7fe f80f 	bl	b8c14 <sock_setsockopt>
    if (ret < 0) {
   babf6:	2800      	cmp	r0, #0
   babf8:	da07      	bge.n	bac0a <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   babfa:	f7fe f98f 	bl	b8f1c <__errno>
   babfe:	6803      	ldr	r3, [r0, #0]
   bac00:	606b      	str	r3, [r5, #4]
        return 0;
   bac02:	2000      	movs	r0, #0
}
   bac04:	b006      	add	sp, #24
   bac06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   bac0a:	6968      	ldr	r0, [r5, #20]
   bac0c:	2300      	movs	r3, #0
   bac0e:	6800      	ldr	r0, [r0, #0]
   bac10:	463a      	mov	r2, r7
   bac12:	4631      	mov	r1, r6
   bac14:	f7fe f81e 	bl	b8c54 <sock_send>
    if (ret < 0) {
   bac18:	1e03      	subs	r3, r0, #0
   bac1a:	dbee      	blt.n	babfa <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   bac1c:	4618      	mov	r0, r3
   bac1e:	e7f1      	b.n	bac04 <_ZN9TCPClient5writeEPKhjm+0x5c>

000bac20 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   bac20:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   bac22:	6984      	ldr	r4, [r0, #24]
   bac24:	4b0a      	ldr	r3, [pc, #40]	; (bac50 <_ZN9TCPClientD1Ev+0x30>)
   bac26:	6003      	str	r3, [r0, #0]
   bac28:	4605      	mov	r5, r0
   bac2a:	b17c      	cbz	r4, bac4c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   bac2c:	6863      	ldr	r3, [r4, #4]
   bac2e:	3b01      	subs	r3, #1
   bac30:	6063      	str	r3, [r4, #4]
   bac32:	b95b      	cbnz	r3, bac4c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   bac34:	6823      	ldr	r3, [r4, #0]
   bac36:	4620      	mov	r0, r4
   bac38:	689b      	ldr	r3, [r3, #8]
   bac3a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bac3c:	68a3      	ldr	r3, [r4, #8]
   bac3e:	3b01      	subs	r3, #1
   bac40:	60a3      	str	r3, [r4, #8]
   bac42:	b91b      	cbnz	r3, bac4c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   bac44:	6823      	ldr	r3, [r4, #0]
   bac46:	4620      	mov	r0, r4
   bac48:	68db      	ldr	r3, [r3, #12]
   bac4a:	4798      	blx	r3
   bac4c:	4628      	mov	r0, r5
   bac4e:	bd38      	pop	{r3, r4, r5, pc}
   bac50:	000bef44 	.word	0x000bef44

000bac54 <_ZN9TCPClientD0Ev>:
   bac54:	b510      	push	{r4, lr}
   bac56:	4604      	mov	r4, r0
   bac58:	f7ff ffe2 	bl	bac20 <_ZN9TCPClientD1Ev>
   bac5c:	4620      	mov	r0, r4
   bac5e:	211c      	movs	r1, #28
   bac60:	f7f9 fa1f 	bl	b40a2 <_ZdlPvj>
   bac64:	4620      	mov	r0, r4
   bac66:	bd10      	pop	{r4, pc}

000bac68 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   bac68:	b530      	push	{r4, r5, lr}
   bac6a:	b087      	sub	sp, #28
   bac6c:	4604      	mov	r4, r0
class IPAddress : public Printable {
   bac6e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   bac70:	4668      	mov	r0, sp
   bac72:	f7ff fc55 	bl	ba520 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bac76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bac78:	3404      	adds	r4, #4
   bac7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bac7c:	682b      	ldr	r3, [r5, #0]
   bac7e:	7023      	strb	r3, [r4, #0]
    }
   bac80:	b007      	add	sp, #28
   bac82:	bd30      	pop	{r4, r5, pc}

000bac84 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   bac84:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   bac86:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   bac88:	4b05      	ldr	r3, [pc, #20]	; (baca0 <_ZN9TCPClient8remoteIPEv+0x1c>)
   bac8a:	4604      	mov	r4, r0
   bac8c:	358c      	adds	r5, #140	; 0x8c
   bac8e:	f844 3b04 	str.w	r3, [r4], #4
   bac92:	4606      	mov	r6, r0
   bac94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bac96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bac98:	682b      	ldr	r3, [r5, #0]
   bac9a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   bac9c:	4630      	mov	r0, r6
   bac9e:	bd70      	pop	{r4, r5, r6, pc}
   baca0:	000beebc 	.word	0x000beebc

000baca4 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   baca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   baca8:	4698      	mov	r8, r3
    stop();
   bacaa:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   bacac:	b093      	sub	sp, #76	; 0x4c
   bacae:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   bacb0:	2400      	movs	r4, #0
    stop();
   bacb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   bacb4:	4606      	mov	r6, r0
   bacb6:	4617      	mov	r7, r2
    stop();
   bacb8:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   bacba:	4628      	mov	r0, r5
   bacbc:	466b      	mov	r3, sp
   bacbe:	4622      	mov	r2, r4
   bacc0:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   bacc2:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   bacc4:	f7fd ff9e 	bl	b8c04 <netdb_getaddrinfo>
   bacc8:	4605      	mov	r5, r0
   bacca:	2800      	cmp	r0, #0
   baccc:	d163      	bne.n	bad96 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   bacce:	9b00      	ldr	r3, [sp, #0]
   bacd0:	2b00      	cmp	r3, #0
   bacd2:	d04b      	beq.n	bad6c <_ZN9TCPClient7connectEPKctm+0xc8>
   bacd4:	695b      	ldr	r3, [r3, #20]
   bacd6:	2b00      	cmp	r3, #0
   bacd8:	d048      	beq.n	bad6c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   bacda:	a806      	add	r0, sp, #24
   bacdc:	f7ff fbdc 	bl	ba498 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   bace0:	9b00      	ldr	r3, [sp, #0]
   bace2:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   bace4:	7863      	ldrb	r3, [r4, #1]
   bace6:	2b02      	cmp	r3, #2
   bace8:	d104      	bne.n	bacf4 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   bacea:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   bacec:	a806      	add	r0, sp, #24
   bacee:	f7ff ffbb 	bl	bac68 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   bacf2:	e026      	b.n	bad42 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   bacf4:	2b0a      	cmp	r3, #10
   bacf6:	d124      	bne.n	bad42 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   bacf8:	2211      	movs	r2, #17
   bacfa:	4629      	mov	r1, r5
   bacfc:	a801      	add	r0, sp, #4
   bacfe:	f001 fc63 	bl	bc5c8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   bad02:	68a3      	ldr	r3, [r4, #8]
   bad04:	2b00      	cmp	r3, #0
   bad06:	d038      	beq.n	bad7a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   bad08:	f104 0308 	add.w	r3, r4, #8
   bad0c:	f10d 0c04 	add.w	ip, sp, #4
   bad10:	3418      	adds	r4, #24
   bad12:	6818      	ldr	r0, [r3, #0]
   bad14:	6859      	ldr	r1, [r3, #4]
   bad16:	4662      	mov	r2, ip
   bad18:	c203      	stmia	r2!, {r0, r1}
   bad1a:	3308      	adds	r3, #8
   bad1c:	42a3      	cmp	r3, r4
   bad1e:	4694      	mov	ip, r2
   bad20:	d1f7      	bne.n	bad12 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   bad22:	2306      	movs	r3, #6
            addr = IPAddress(a);
   bad24:	a901      	add	r1, sp, #4
   bad26:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   bad28:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   bad2c:	f7ff fbc2 	bl	ba4b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bad30:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bad34:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bad38:	ac07      	add	r4, sp, #28
   bad3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bad3c:	f8dc 3000 	ldr.w	r3, [ip]
   bad40:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   bad42:	a806      	add	r0, sp, #24
   bad44:	f7ff fbc8 	bl	ba4d8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   bad48:	b180      	cbz	r0, bad6c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   bad4a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   bad4c:	ad07      	add	r5, sp, #28
   bad4e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   bad52:	4b12      	ldr	r3, [pc, #72]	; (bad9c <_ZN9TCPClient7connectEPKctm+0xf8>)
   bad54:	930c      	str	r3, [sp, #48]	; 0x30
   bad56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bad58:	ac0d      	add	r4, sp, #52	; 0x34
   bad5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bad5c:	682b      	ldr	r3, [r5, #0]
   bad5e:	7023      	strb	r3, [r4, #0]
   bad60:	463a      	mov	r2, r7
   bad62:	4643      	mov	r3, r8
   bad64:	a90c      	add	r1, sp, #48	; 0x30
   bad66:	4630      	mov	r0, r6
   bad68:	47c8      	blx	r9
   bad6a:	4605      	mov	r5, r0
    SCOPE_GUARD({
   bad6c:	9800      	ldr	r0, [sp, #0]
   bad6e:	f7fd ff41 	bl	b8bf4 <netdb_freeaddrinfo>
}
   bad72:	4628      	mov	r0, r5
   bad74:	b013      	add	sp, #76	; 0x4c
   bad76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   bad7a:	68e3      	ldr	r3, [r4, #12]
   bad7c:	2b00      	cmp	r3, #0
   bad7e:	d1c3      	bne.n	bad08 <_ZN9TCPClient7connectEPKctm+0x64>
   bad80:	f64f 70ff 	movw	r0, #65535	; 0xffff
   bad84:	f8d4 9010 	ldr.w	r9, [r4, #16]
   bad88:	f7fd ff24 	bl	b8bd4 <inet_htonl>
   bad8c:	4581      	cmp	r9, r0
   bad8e:	d1bb      	bne.n	bad08 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   bad90:	f104 0114 	add.w	r1, r4, #20
   bad94:	e7aa      	b.n	bacec <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   bad96:	4625      	mov	r5, r4
   bad98:	e7e8      	b.n	bad6c <_ZN9TCPClient7connectEPKctm+0xc8>
   bad9a:	bf00      	nop
   bad9c:	000beebc 	.word	0x000beebc

000bada0 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   bada0:	b538      	push	{r3, r4, r5, lr}
   bada2:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   bada4:	681a      	ldr	r2, [r3, #0]
   bada6:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   bada8:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   badaa:	da10      	bge.n	badce <_ZN9TCPClient9connectedEv+0x2e>
   badac:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   badb0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   badb4:	429a      	cmp	r2, r3
   badb6:	d10a      	bne.n	badce <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   badb8:	6803      	ldr	r3, [r0, #0]
   badba:	691b      	ldr	r3, [r3, #16]
   badbc:	4798      	blx	r3
        if (!rv) {
   badbe:	4604      	mov	r4, r0
   badc0:	b928      	cbnz	r0, badce <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   badc2:	682b      	ldr	r3, [r5, #0]
   badc4:	4628      	mov	r0, r5
   badc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   badc8:	4798      	blx	r3
        rv = available();
   badca:	4620      	mov	r0, r4
}
   badcc:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   badce:	2001      	movs	r0, #1
   badd0:	e7fc      	b.n	badcc <_ZN9TCPClient9connectedEv+0x2c>

000badd2 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   badd2:	b510      	push	{r4, lr}
   badd4:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   badd6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   badda:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   badde:	429a      	cmp	r2, r3
int TCPClient::peek() {
   bade0:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   bade2:	d005      	beq.n	badf0 <_ZN9TCPClient4peekEv+0x1e>
   bade4:	6963      	ldr	r3, [r4, #20]
   bade6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   badea:	4413      	add	r3, r2
   badec:	7918      	ldrb	r0, [r3, #4]
}
   badee:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   badf0:	6803      	ldr	r3, [r0, #0]
   badf2:	691b      	ldr	r3, [r3, #16]
   badf4:	4798      	blx	r3
   badf6:	2800      	cmp	r0, #0
   badf8:	d1f4      	bne.n	bade4 <_ZN9TCPClient4peekEv+0x12>
   badfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   badfe:	e7f6      	b.n	badee <_ZN9TCPClient4peekEv+0x1c>

000bae00 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   bae00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bae02:	6943      	ldr	r3, [r0, #20]
   bae04:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   bae06:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bae0a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   bae0e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   bae10:	4605      	mov	r5, r0
   bae12:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   bae14:	d016      	beq.n	bae44 <_ZN9TCPClient4readEPhj+0x44>
   bae16:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   bae18:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   bae1c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   bae20:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   bae22:	42bc      	cmp	r4, r7
   bae24:	bf28      	it	cs
   bae26:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   bae28:	3304      	adds	r3, #4
   bae2a:	4622      	mov	r2, r4
   bae2c:	4419      	add	r1, r3
   bae2e:	4630      	mov	r0, r6
   bae30:	f001 fba2 	bl	bc578 <memcpy>
   bae34:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   bae36:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   bae3a:	4423      	add	r3, r4
   bae3c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   bae40:	4620      	mov	r0, r4
   bae42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   bae44:	6803      	ldr	r3, [r0, #0]
   bae46:	691b      	ldr	r3, [r3, #16]
   bae48:	4798      	blx	r3
   bae4a:	2800      	cmp	r0, #0
   bae4c:	d1e3      	bne.n	bae16 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   bae4e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bae52:	e7f5      	b.n	bae40 <_ZN9TCPClient4readEPhj+0x40>

000bae54 <_ZN9TCPClient12flush_bufferEv>:
   bae54:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   bae56:	2300      	movs	r3, #0
   bae58:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   bae5c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   bae5e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   bae62:	4770      	bx	lr

000bae64 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   bae64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bae68:	461f      	mov	r7, r3
    stop();
   bae6a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   bae6c:	460c      	mov	r4, r1
    stop();
   bae6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   bae70:	b08a      	sub	sp, #40	; 0x28
   bae72:	4605      	mov	r5, r0
   bae74:	4616      	mov	r6, r2
    stop();
   bae76:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   bae78:	7d23      	ldrb	r3, [r4, #20]
   bae7a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   bae7e:	2b04      	cmp	r3, #4
   bae80:	bf0c      	ite	eq
   bae82:	2002      	moveq	r0, #2
   bae84:	200a      	movne	r0, #10
   bae86:	2206      	movs	r2, #6
   bae88:	2101      	movs	r1, #1
   bae8a:	f7fd feeb 	bl	b8c64 <sock_socket>
   bae8e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   bae92:	696b      	ldr	r3, [r5, #20]
   bae94:	681b      	ldr	r3, [r3, #0]
   bae96:	2b00      	cmp	r3, #0
   bae98:	da08      	bge.n	baeac <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   bae9a:	682b      	ldr	r3, [r5, #0]
   bae9c:	4628      	mov	r0, r5
   bae9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   baea0:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   baea2:	4798      	blx	r3
}
   baea4:	4620      	mov	r0, r4
   baea6:	b00a      	add	sp, #40	; 0x28
   baea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   baeac:	4628      	mov	r0, r5
   baeae:	f7ff ffd1 	bl	bae54 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   baeb2:	b1b7      	cbz	r7, baee2 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   baeb4:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   baeb6:	a903      	add	r1, sp, #12
   baeb8:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   baeba:	9303      	str	r3, [sp, #12]
   baebc:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   baec0:	f7fd fe78 	bl	b8bb4 <if_index_to_name>
   baec4:	2800      	cmp	r0, #0
   baec6:	d1e8      	bne.n	bae9a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   baec8:	6968      	ldr	r0, [r5, #20]
   baeca:	2306      	movs	r3, #6
   baecc:	9300      	str	r3, [sp, #0]
   baece:	6800      	ldr	r0, [r0, #0]
   baed0:	ab03      	add	r3, sp, #12
   baed2:	f241 020b 	movw	r2, #4107	; 0x100b
   baed6:	f640 71ff 	movw	r1, #4095	; 0xfff
   baeda:	f7fd fe9b 	bl	b8c14 <sock_setsockopt>
   baede:	2800      	cmp	r0, #0
   baee0:	d1db      	bne.n	bae9a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   baee2:	221c      	movs	r2, #28
   baee4:	2100      	movs	r1, #0
   baee6:	a803      	add	r0, sp, #12
   baee8:	f001 fb6e 	bl	bc5c8 <memset>
    if (ip.version() == 4) {
   baeec:	7d23      	ldrb	r3, [r4, #20]
   baeee:	2b04      	cmp	r3, #4
   baef0:	d11d      	bne.n	baf2e <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   baef2:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   baef6:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   baef8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   baefc:	f7fd fe72 	bl	b8be4 <inet_htons>
   baf00:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   baf04:	6860      	ldr	r0, [r4, #4]
   baf06:	f7fd fe65 	bl	b8bd4 <inet_htonl>
   baf0a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   baf0c:	696b      	ldr	r3, [r5, #20]
   baf0e:	221c      	movs	r2, #28
   baf10:	6818      	ldr	r0, [r3, #0]
   baf12:	a903      	add	r1, sp, #12
   baf14:	f7fd fe8e 	bl	b8c34 <sock_connect>
   baf18:	2800      	cmp	r0, #0
   baf1a:	d1be      	bne.n	bae9a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   baf1c:	3404      	adds	r4, #4
   baf1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   baf20:	696d      	ldr	r5, [r5, #20]
   baf22:	358c      	adds	r5, #140	; 0x8c
   baf24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   baf26:	6823      	ldr	r3, [r4, #0]
   baf28:	702b      	strb	r3, [r5, #0]
    return 1; // success
   baf2a:	2401      	movs	r4, #1
   baf2c:	e7ba      	b.n	baea4 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   baf2e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   baf32:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   baf34:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   baf38:	f7fd fe54 	bl	b8be4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   baf3c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   baf3e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   baf42:	1d23      	adds	r3, r4, #4
   baf44:	f104 0714 	add.w	r7, r4, #20
   baf48:	6818      	ldr	r0, [r3, #0]
   baf4a:	6859      	ldr	r1, [r3, #4]
   baf4c:	4632      	mov	r2, r6
   baf4e:	c203      	stmia	r2!, {r0, r1}
   baf50:	3308      	adds	r3, #8
   baf52:	42bb      	cmp	r3, r7
   baf54:	4616      	mov	r6, r2
   baf56:	d1f7      	bne.n	baf48 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   baf58:	e7d8      	b.n	baf0c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000baf5c <_ZN9TCPClient9availableEv>:
{
   baf5c:	b530      	push	{r4, r5, lr}
   baf5e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   baf60:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   baf64:	b08b      	sub	sp, #44	; 0x2c
   baf66:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   baf68:	b12b      	cbz	r3, baf76 <_ZN9TCPClient9availableEv+0x1a>
   baf6a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   baf6e:	429a      	cmp	r2, r3
   baf70:	d101      	bne.n	baf76 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   baf72:	f7ff ff6f 	bl	bae54 <_ZN9TCPClient12flush_bufferEv>
   baf76:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   baf78:	6808      	ldr	r0, [r1, #0]
   baf7a:	2800      	cmp	r0, #0
   baf7c:	db18      	blt.n	bafb0 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   baf7e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   baf82:	2d7f      	cmp	r5, #127	; 0x7f
   baf84:	d814      	bhi.n	bafb0 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   baf86:	3104      	adds	r1, #4
   baf88:	2308      	movs	r3, #8
   baf8a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   baf8e:	4429      	add	r1, r5
   baf90:	f7fd fe58 	bl	b8c44 <sock_recv>
            if (ret > 0) {
   baf94:	2800      	cmp	r0, #0
   baf96:	dd13      	ble.n	bafc0 <_ZN9TCPClient9availableEv+0x64>
   baf98:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   baf9a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   baf9e:	b90a      	cbnz	r2, bafa4 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   bafa0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   bafa4:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   bafa6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bafaa:	4410      	add	r0, r2
   bafac:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   bafb0:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   bafb2:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   bafb6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   bafba:	1ac0      	subs	r0, r0, r3
   bafbc:	b00b      	add	sp, #44	; 0x2c
   bafbe:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   bafc0:	f7fd ffac 	bl	b8f1c <__errno>
   bafc4:	6803      	ldr	r3, [r0, #0]
   bafc6:	2b0b      	cmp	r3, #11
   bafc8:	d0f2      	beq.n	bafb0 <_ZN9TCPClient9availableEv+0x54>
   bafca:	f7fd ffa7 	bl	b8f1c <__errno>
   bafce:	6803      	ldr	r3, [r0, #0]
   bafd0:	2b0b      	cmp	r3, #11
   bafd2:	d0ed      	beq.n	bafb0 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   bafd4:	2320      	movs	r3, #32
   bafd6:	2500      	movs	r5, #0
   bafd8:	e9cd 3502 	strd	r3, r5, [sp, #8]
   bafdc:	f7fd ff9e 	bl	b8f1c <__errno>
   bafe0:	6803      	ldr	r3, [r0, #0]
   bafe2:	9301      	str	r3, [sp, #4]
   bafe4:	4b08      	ldr	r3, [pc, #32]	; (bb008 <_ZN9TCPClient9availableEv+0xac>)
   bafe6:	4909      	ldr	r1, [pc, #36]	; (bb00c <_ZN9TCPClient9availableEv+0xb0>)
   bafe8:	9300      	str	r3, [sp, #0]
   bafea:	aa02      	add	r2, sp, #8
   bafec:	462b      	mov	r3, r5
   bafee:	2032      	movs	r0, #50	; 0x32
   baff0:	f7fd feb8 	bl	b8d64 <log_message>
                    sock_close(d_->sock);
   baff4:	6963      	ldr	r3, [r4, #20]
   baff6:	6818      	ldr	r0, [r3, #0]
   baff8:	f7fd fe14 	bl	b8c24 <sock_close>
   baffc:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   baffe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb002:	601a      	str	r2, [r3, #0]
   bb004:	e7d4      	b.n	bafb0 <_ZN9TCPClient9availableEv+0x54>
   bb006:	bf00      	nop
   bb008:	000bef0f 	.word	0x000bef0f
   bb00c:	000bef08 	.word	0x000bef08

000bb010 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   bb010:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   bb012:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   bb014:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   bb016:	6818      	ldr	r0, [r3, #0]
   bb018:	2800      	cmp	r0, #0
   bb01a:	db01      	blt.n	bb020 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   bb01c:	f7fd fe02 	bl	b8c24 <sock_close>
   bb020:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   bb022:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb026:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   bb028:	6960      	ldr	r0, [r4, #20]
   bb02a:	2211      	movs	r2, #17
   bb02c:	2100      	movs	r1, #0
   bb02e:	308c      	adds	r0, #140	; 0x8c
   bb030:	f001 faca 	bl	bc5c8 <memset>
    flush_buffer();
   bb034:	4620      	mov	r0, r4
}
   bb036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   bb03a:	f7ff bf0b 	b.w	bae54 <_ZN9TCPClient12flush_bufferEv>

000bb03e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   bb03e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   bb040:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   bb042:	4604      	mov	r4, r0
          total(0) {
   bb044:	6001      	str	r1, [r0, #0]
   bb046:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   bb04a:	3088      	adds	r0, #136	; 0x88
   bb04c:	f7ff fa24 	bl	ba498 <_ZN9IPAddressC1Ev>
}
   bb050:	4620      	mov	r0, r4
   bb052:	bd10      	pop	{r4, pc}

000bb054 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   bb054:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb056:	2300      	movs	r3, #0
   bb058:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   bb05c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   bb060:	4a0e      	ldr	r2, [pc, #56]	; (bb09c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   bb062:	6103      	str	r3, [r0, #16]
   bb064:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bb066:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   bb068:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bb06a:	20ac      	movs	r0, #172	; 0xac
   bb06c:	9101      	str	r1, [sp, #4]
   bb06e:	f7f9 f812 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bb072:	1e05      	subs	r5, r0, #0
   bb074:	f105 060c 	add.w	r6, r5, #12
   bb078:	d008      	beq.n	bb08c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   bb07a:	2301      	movs	r3, #1
   bb07c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   bb080:	4b07      	ldr	r3, [pc, #28]	; (bb0a0 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bb082:	9901      	ldr	r1, [sp, #4]
   bb084:	602b      	str	r3, [r5, #0]
   bb086:	4630      	mov	r0, r6
   bb088:	f7ff ffd9 	bl	bb03e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   bb08c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   bb08e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   bb092:	f7ff fedf 	bl	bae54 <_ZN9TCPClient12flush_bufferEv>
}
   bb096:	b002      	add	sp, #8
   bb098:	bd70      	pop	{r4, r5, r6, pc}
   bb09a:	bf00      	nop
   bb09c:	000bef44 	.word	0x000bef44
   bb0a0:	000bef28 	.word	0x000bef28

000bb0a4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   bb0a4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   bb0a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   bb0aa:	4604      	mov	r4, r0
        : TCPClient(-1) {
   bb0ac:	f7ff ffd2 	bl	bb054 <_ZN9TCPClientC1Ei>
}
   bb0b0:	4620      	mov	r0, r4
   bb0b2:	bd10      	pop	{r4, pc}

000bb0b4 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   bb0b4:	b510      	push	{r4, lr}
   bb0b6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   bb0b8:	6800      	ldr	r0, [r0, #0]
   bb0ba:	2800      	cmp	r0, #0
   bb0bc:	db01      	blt.n	bb0c2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   bb0be:	f7fd fdb1 	bl	b8c24 <sock_close>
    }
}
   bb0c2:	4620      	mov	r0, r4
   bb0c4:	bd10      	pop	{r4, pc}

000bb0c6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   bb0c6:	300c      	adds	r0, #12
   bb0c8:	f7ff bff4 	b.w	bb0b4 <_ZN9TCPClient4DataD1Ev>

000bb0cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bb0cc:	4b02      	ldr	r3, [pc, #8]	; (bb0d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bb0ce:	681a      	ldr	r2, [r3, #0]
   bb0d0:	4b02      	ldr	r3, [pc, #8]	; (bb0dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bb0d2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bb0d4:	4770      	bx	lr
   bb0d6:	bf00      	nop
   bb0d8:	200350b8 	.word	0x200350b8
   bb0dc:	2003e6fc 	.word	0x2003e6fc

000bb0e0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bb0e0:	4770      	bx	lr

000bb0e2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb0e2:	7441      	strb	r1, [r0, #17]
}
   bb0e4:	4770      	bx	lr

000bb0e6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bb0e6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bb0e8:	7c00      	ldrb	r0, [r0, #16]
   bb0ea:	f7fd fdeb 	bl	b8cc4 <hal_usart_available_data_for_write>
}
   bb0ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb0f2:	bd08      	pop	{r3, pc}

000bb0f4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bb0f4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bb0f6:	7c00      	ldrb	r0, [r0, #16]
   bb0f8:	f7fd fdc4 	bl	b8c84 <hal_usart_available>
}
   bb0fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb100:	bd08      	pop	{r3, pc}

000bb102 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bb102:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bb104:	7c00      	ldrb	r0, [r0, #16]
   bb106:	f7fd fdcd 	bl	b8ca4 <hal_usart_peek>
}
   bb10a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb10e:	bd08      	pop	{r3, pc}

000bb110 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bb110:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bb112:	7c00      	ldrb	r0, [r0, #16]
   bb114:	f7fd fdbe 	bl	b8c94 <hal_usart_read>
}
   bb118:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb11c:	bd08      	pop	{r3, pc}

000bb11e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bb11e:	7c00      	ldrb	r0, [r0, #16]
   bb120:	f7fd bdc8 	b.w	b8cb4 <hal_usart_flush>

000bb124 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bb124:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb126:	7c45      	ldrb	r5, [r0, #17]
{
   bb128:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb12a:	b12d      	cbz	r5, bb138 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bb12c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bb12e:	b003      	add	sp, #12
   bb130:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bb134:	f7fd bd9e 	b.w	b8c74 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb138:	7c00      	ldrb	r0, [r0, #16]
   bb13a:	9101      	str	r1, [sp, #4]
   bb13c:	f7fd fdc2 	bl	b8cc4 <hal_usart_available_data_for_write>
   bb140:	2800      	cmp	r0, #0
   bb142:	9901      	ldr	r1, [sp, #4]
   bb144:	dcf2      	bgt.n	bb12c <_ZN11USARTSerial5writeEh+0x8>
}
   bb146:	4628      	mov	r0, r5
   bb148:	b003      	add	sp, #12
   bb14a:	bd30      	pop	{r4, r5, pc}

000bb14c <_ZN11USARTSerialD0Ev>:
   bb14c:	b510      	push	{r4, lr}
   bb14e:	2114      	movs	r1, #20
   bb150:	4604      	mov	r4, r0
   bb152:	f7f8 ffa6 	bl	b40a2 <_ZdlPvj>
   bb156:	4620      	mov	r0, r4
   bb158:	bd10      	pop	{r4, pc}
	...

000bb15c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bb15c:	b510      	push	{r4, lr}
   bb15e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb162:	4604      	mov	r4, r0
   bb164:	4608      	mov	r0, r1
   bb166:	4611      	mov	r1, r2
   bb168:	2200      	movs	r2, #0
   bb16a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bb16e:	4b04      	ldr	r3, [pc, #16]	; (bb180 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bb170:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb172:	2301      	movs	r3, #1
  _serial = serial;
   bb174:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb176:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bb178:	f7fd fdac 	bl	b8cd4 <hal_usart_init_ex>
}
   bb17c:	4620      	mov	r0, r4
   bb17e:	bd10      	pop	{r4, pc}
   bb180:	000befac 	.word	0x000befac

000bb184 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb184:	7441      	strb	r1, [r0, #17]
}
   bb186:	4770      	bx	lr

000bb188 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb188:	4770      	bx	lr

000bb18a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bb18a:	4770      	bx	lr

000bb18c <_ZN9USBSerial4readEv>:
{
   bb18c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bb18e:	2100      	movs	r1, #0
   bb190:	7c00      	ldrb	r0, [r0, #16]
   bb192:	f7fd fdc7 	bl	b8d24 <HAL_USB_USART_Receive_Data>
}
   bb196:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb19a:	bd08      	pop	{r3, pc}

000bb19c <_ZN9USBSerial4peekEv>:
{
   bb19c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bb19e:	2101      	movs	r1, #1
   bb1a0:	7c00      	ldrb	r0, [r0, #16]
   bb1a2:	f7fd fdbf 	bl	b8d24 <HAL_USB_USART_Receive_Data>
}
   bb1a6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb1aa:	bd08      	pop	{r3, pc}

000bb1ac <_ZN9USBSerial17availableForWriteEv>:
{
   bb1ac:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bb1ae:	7c00      	ldrb	r0, [r0, #16]
   bb1b0:	f7fd fdb0 	bl	b8d14 <HAL_USB_USART_Available_Data_For_Write>
}
   bb1b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb1b8:	bd08      	pop	{r3, pc}

000bb1ba <_ZN9USBSerial9availableEv>:
{
   bb1ba:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bb1bc:	7c00      	ldrb	r0, [r0, #16]
   bb1be:	f7fd fda1 	bl	b8d04 <HAL_USB_USART_Available_Data>
}
   bb1c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb1c6:	bd08      	pop	{r3, pc}

000bb1c8 <_ZN9USBSerial5writeEh>:
{
   bb1c8:	b513      	push	{r0, r1, r4, lr}
   bb1ca:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb1cc:	7c00      	ldrb	r0, [r0, #16]
{
   bb1ce:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb1d0:	f7fd fda0 	bl	b8d14 <HAL_USB_USART_Available_Data_For_Write>
   bb1d4:	2800      	cmp	r0, #0
   bb1d6:	9901      	ldr	r1, [sp, #4]
   bb1d8:	dc01      	bgt.n	bb1de <_ZN9USBSerial5writeEh+0x16>
   bb1da:	7c60      	ldrb	r0, [r4, #17]
   bb1dc:	b120      	cbz	r0, bb1e8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bb1de:	7c20      	ldrb	r0, [r4, #16]
   bb1e0:	f7fd fda8 	bl	b8d34 <HAL_USB_USART_Send_Data>
   bb1e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bb1e8:	b002      	add	sp, #8
   bb1ea:	bd10      	pop	{r4, pc}

000bb1ec <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bb1ec:	7c00      	ldrb	r0, [r0, #16]
   bb1ee:	f7fd bda9 	b.w	b8d44 <HAL_USB_USART_Flush_Data>

000bb1f2 <_ZN9USBSerialD0Ev>:
   bb1f2:	b510      	push	{r4, lr}
   bb1f4:	2114      	movs	r1, #20
   bb1f6:	4604      	mov	r4, r0
   bb1f8:	f7f8 ff53 	bl	b40a2 <_ZdlPvj>
   bb1fc:	4620      	mov	r0, r4
   bb1fe:	bd10      	pop	{r4, pc}

000bb200 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bb200:	b510      	push	{r4, lr}
   bb202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb206:	4604      	mov	r4, r0
   bb208:	4608      	mov	r0, r1
   bb20a:	2100      	movs	r1, #0
   bb20c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bb210:	4b04      	ldr	r3, [pc, #16]	; (bb224 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bb212:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb214:	2301      	movs	r3, #1
  _serial = serial;
   bb216:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb218:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bb21a:	4611      	mov	r1, r2
   bb21c:	f7fd fd62 	bl	b8ce4 <HAL_USB_USART_Init>
}
   bb220:	4620      	mov	r0, r4
   bb222:	bd10      	pop	{r4, pc}
   bb224:	000befdc 	.word	0x000befdc

000bb228 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bb228:	7c00      	ldrb	r0, [r0, #16]
   bb22a:	2200      	movs	r2, #0
   bb22c:	f7fd bd62 	b.w	b8cf4 <HAL_USB_USART_Begin>

000bb230 <_Z19acquireSerialBufferv>:
{
   bb230:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bb232:	2214      	movs	r2, #20
{
   bb234:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bb236:	2100      	movs	r1, #0
   bb238:	f001 f9c6 	bl	bc5c8 <memset>
}
   bb23c:	4620      	mov	r0, r4
   bb23e:	bd10      	pop	{r4, pc}

000bb240 <_Z16_fetch_usbserialv>:
{
   bb240:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb242:	4c0f      	ldr	r4, [pc, #60]	; (bb280 <_Z16_fetch_usbserialv+0x40>)
{
   bb244:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bb246:	a803      	add	r0, sp, #12
   bb248:	f7ff fff2 	bl	bb230 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb24c:	7821      	ldrb	r1, [r4, #0]
   bb24e:	f3bf 8f5b 	dmb	ish
   bb252:	f011 0101 	ands.w	r1, r1, #1
   bb256:	d10f      	bne.n	bb278 <_Z16_fetch_usbserialv+0x38>
   bb258:	4620      	mov	r0, r4
   bb25a:	9101      	str	r1, [sp, #4]
   bb25c:	f7f8 ff23 	bl	b40a6 <__cxa_guard_acquire>
   bb260:	9901      	ldr	r1, [sp, #4]
   bb262:	b148      	cbz	r0, bb278 <_Z16_fetch_usbserialv+0x38>
   bb264:	aa03      	add	r2, sp, #12
   bb266:	4807      	ldr	r0, [pc, #28]	; (bb284 <_Z16_fetch_usbserialv+0x44>)
   bb268:	f7ff ffca 	bl	bb200 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bb26c:	4620      	mov	r0, r4
   bb26e:	f7f8 ff1f 	bl	b40b0 <__cxa_guard_release>
   bb272:	4805      	ldr	r0, [pc, #20]	; (bb288 <_Z16_fetch_usbserialv+0x48>)
   bb274:	f001 f966 	bl	bc544 <atexit>
	return _usbserial;
}
   bb278:	4802      	ldr	r0, [pc, #8]	; (bb284 <_Z16_fetch_usbserialv+0x44>)
   bb27a:	b008      	add	sp, #32
   bb27c:	bd10      	pop	{r4, pc}
   bb27e:	bf00      	nop
   bb280:	2003e700 	.word	0x2003e700
   bb284:	2003e704 	.word	0x2003e704
   bb288:	000bb189 	.word	0x000bb189

000bb28c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   bb28c:	2200      	movs	r2, #0
   bb28e:	6840      	ldr	r0, [r0, #4]
   bb290:	4611      	mov	r1, r2
   bb292:	f7fd bdb3 	b.w	b8dfc <network_ready>

000bb296 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bb296:	2200      	movs	r2, #0
   bb298:	6840      	ldr	r0, [r0, #4]
   bb29a:	4611      	mov	r1, r2
   bb29c:	f7fd bdce 	b.w	b8e3c <network_listening>

000bb2a0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bb2a0:	2200      	movs	r2, #0
   bb2a2:	6840      	ldr	r0, [r0, #4]
   bb2a4:	4611      	mov	r1, r2
   bb2a6:	f7fd bde9 	b.w	b8e7c <network_get_listen_timeout>

000bb2aa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bb2aa:	6840      	ldr	r0, [r0, #4]
   bb2ac:	2200      	movs	r2, #0
   bb2ae:	f7fd bddd 	b.w	b8e6c <network_set_listen_timeout>

000bb2b2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bb2b2:	6840      	ldr	r0, [r0, #4]
   bb2b4:	2200      	movs	r2, #0
   bb2b6:	f081 0101 	eor.w	r1, r1, #1
   bb2ba:	f7fd bdb7 	b.w	b8e2c <network_listen>

000bb2be <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bb2be:	2300      	movs	r3, #0
   bb2c0:	6840      	ldr	r0, [r0, #4]
   bb2c2:	461a      	mov	r2, r3
   bb2c4:	4619      	mov	r1, r3
   bb2c6:	f7fd bda9 	b.w	b8e1c <network_off>

000bb2ca <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bb2ca:	2300      	movs	r3, #0
   bb2cc:	6840      	ldr	r0, [r0, #4]
   bb2ce:	461a      	mov	r2, r3
   bb2d0:	4619      	mov	r1, r3
   bb2d2:	f7fd bd9b 	b.w	b8e0c <network_on>

000bb2d6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bb2d6:	2200      	movs	r2, #0
   bb2d8:	6840      	ldr	r0, [r0, #4]
   bb2da:	4611      	mov	r1, r2
   bb2dc:	f7fd bd7e 	b.w	b8ddc <network_connecting>

000bb2e0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bb2e0:	6840      	ldr	r0, [r0, #4]
   bb2e2:	2200      	movs	r2, #0
   bb2e4:	2102      	movs	r1, #2
   bb2e6:	f7fd bd81 	b.w	b8dec <network_disconnect>

000bb2ea <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bb2ea:	2300      	movs	r3, #0
   bb2ec:	6840      	ldr	r0, [r0, #4]
   bb2ee:	461a      	mov	r2, r3
   bb2f0:	f7fd bd6c 	b.w	b8dcc <network_connect>

000bb2f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   bb2f4:	4b02      	ldr	r3, [pc, #8]	; (bb300 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   bb2f6:	2204      	movs	r2, #4
   bb2f8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   bb2fa:	4a02      	ldr	r2, [pc, #8]	; (bb304 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   bb2fc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   bb2fe:	4770      	bx	lr
   bb300:	2003e718 	.word	0x2003e718
   bb304:	000bf00c 	.word	0x000bf00c

000bb308 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   bb308:	b510      	push	{r4, lr}
   bb30a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   bb30c:	f001 f9a4 	bl	bc658 <strlen>
   bb310:	3801      	subs	r0, #1
   bb312:	1823      	adds	r3, r4, r0
   bb314:	4620      	mov	r0, r4
	while(i<j){
   bb316:	4283      	cmp	r3, r0
   bb318:	d906      	bls.n	bb328 <_Z11str_reversePc+0x20>
		c = *i;
   bb31a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   bb31c:	7819      	ldrb	r1, [r3, #0]
   bb31e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   bb322:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   bb326:	e7f6      	b.n	bb316 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   bb328:	bd10      	pop	{r4, pc}

000bb32a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   bb32a:	b570      	push	{r4, r5, r6, lr}
   bb32c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   bb32e:	1e91      	subs	r1, r2, #2
   bb330:	2922      	cmp	r1, #34	; 0x22
   bb332:	d81d      	bhi.n	bb370 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   bb334:	4625      	mov	r5, r4

	div_t result;
	while(a){
   bb336:	b930      	cbnz	r0, bb346 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   bb338:	4423      	add	r3, r4
            *ptr++ = '0';
   bb33a:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   bb33c:	429d      	cmp	r5, r3
   bb33e:	d210      	bcs.n	bb362 <ultoa+0x38>
            *ptr++ = '0';
   bb340:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   bb344:	e7fa      	b.n	bb33c <ultoa+0x12>
            result.quot = a/radix;
   bb346:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   bb34a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   bb34e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   bb350:	2809      	cmp	r0, #9
                *ptr += '0';
   bb352:	bf94      	ite	ls
   bb354:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   bb356:	3157      	addhi	r1, #87	; 0x57
   bb358:	b2c9      	uxtb	r1, r1
   bb35a:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   bb35e:	4630      	mov	r0, r6
	while(a){
   bb360:	e7e9      	b.n	bb336 <ultoa+0xc>

	*ptr = '\0';
   bb362:	2300      	movs	r3, #0
	str_reverse(buffer);
   bb364:	4620      	mov	r0, r4
	*ptr = '\0';
   bb366:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   bb368:	f7ff ffce 	bl	bb308 <_Z11str_reversePc>
	return buffer;
   bb36c:	4620      	mov	r0, r4
}
   bb36e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   bb370:	2000      	movs	r0, #0
   bb372:	e7fc      	b.n	bb36e <ultoa+0x44>

000bb374 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   bb374:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   bb376:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   bb378:	460c      	mov	r4, r1
   bb37a:	4615      	mov	r5, r2
	if(a<0){
   bb37c:	da0e      	bge.n	bb39c <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   bb37e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   bb382:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   bb386:	bf14      	ite	ne
   bb388:	4258      	negne	r0, r3
   bb38a:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   bb38c:	2301      	movs	r3, #1
		*buffer = '-';
   bb38e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   bb390:	462a      	mov	r2, r5
   bb392:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   bb394:	f7ff ffc9 	bl	bb32a <ultoa>
	}
	return buffer;
}
   bb398:	4620      	mov	r0, r4
   bb39a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   bb39c:	2301      	movs	r3, #1
   bb39e:	e7f9      	b.n	bb394 <itoa+0x20>

000bb3a0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bb3a0:	4b01      	ldr	r3, [pc, #4]	; (bb3a8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bb3a2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bb3a4:	4770      	bx	lr
   bb3a6:	bf00      	nop
   bb3a8:	200350c0 	.word	0x200350c0

000bb3ac <serialEventRun>:
{
   bb3ac:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bb3ae:	4b0b      	ldr	r3, [pc, #44]	; (bb3dc <serialEventRun+0x30>)
   bb3b0:	b143      	cbz	r3, bb3c4 <serialEventRun+0x18>
   bb3b2:	f7ff ff45 	bl	bb240 <_Z16_fetch_usbserialv>
   bb3b6:	6803      	ldr	r3, [r0, #0]
   bb3b8:	691b      	ldr	r3, [r3, #16]
   bb3ba:	4798      	blx	r3
   bb3bc:	2800      	cmp	r0, #0
   bb3be:	dd01      	ble.n	bb3c4 <serialEventRun+0x18>
        serialEvent();
   bb3c0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bb3c4:	4b06      	ldr	r3, [pc, #24]	; (bb3e0 <serialEventRun+0x34>)
   bb3c6:	b143      	cbz	r3, bb3da <serialEventRun+0x2e>
   bb3c8:	f000 f8c8 	bl	bb55c <_Z22__fetch_global_Serial1v>
   bb3cc:	6803      	ldr	r3, [r0, #0]
   bb3ce:	691b      	ldr	r3, [r3, #16]
   bb3d0:	4798      	blx	r3
   bb3d2:	2800      	cmp	r0, #0
   bb3d4:	dd01      	ble.n	bb3da <serialEventRun+0x2e>
        serialEvent1();
   bb3d6:	f3af 8000 	nop.w
}
   bb3da:	bd08      	pop	{r3, pc}
	...

000bb3e4 <_post_loop>:
{
   bb3e4:	b508      	push	{r3, lr}
	serialEventRun();
   bb3e6:	f7ff ffe1 	bl	bb3ac <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bb3ea:	f7fd fb8b 	bl	b8b04 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bb3ee:	4b01      	ldr	r3, [pc, #4]	; (bb3f4 <_post_loop+0x10>)
   bb3f0:	6018      	str	r0, [r3, #0]
}
   bb3f2:	bd08      	pop	{r3, pc}
   bb3f4:	2003e728 	.word	0x2003e728

000bb3f8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb3f8:	4805      	ldr	r0, [pc, #20]	; (bb410 <_Z33system_initialize_user_backup_ramv+0x18>)
   bb3fa:	4a06      	ldr	r2, [pc, #24]	; (bb414 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bb3fc:	4906      	ldr	r1, [pc, #24]	; (bb418 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bb3fe:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb400:	1a12      	subs	r2, r2, r0
   bb402:	f001 f8b9 	bl	bc578 <memcpy>
    __backup_sram_signature = signature;
   bb406:	4b05      	ldr	r3, [pc, #20]	; (bb41c <_Z33system_initialize_user_backup_ramv+0x24>)
   bb408:	4a05      	ldr	r2, [pc, #20]	; (bb420 <_Z33system_initialize_user_backup_ramv+0x28>)
   bb40a:	601a      	str	r2, [r3, #0]
}
   bb40c:	bd08      	pop	{r3, pc}
   bb40e:	bf00      	nop
   bb410:	2003f400 	.word	0x2003f400
   bb414:	2003f404 	.word	0x2003f404
   bb418:	000bf554 	.word	0x000bf554
   bb41c:	2003f400 	.word	0x2003f400
   bb420:	9a271c1e 	.word	0x9a271c1e

000bb424 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bb424:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb426:	2300      	movs	r3, #0
   bb428:	9300      	str	r3, [sp, #0]
   bb42a:	461a      	mov	r2, r3
   bb42c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb430:	f7fd fcba 	bl	b8da8 <system_ctrl_set_result>
}
   bb434:	b003      	add	sp, #12
   bb436:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb43c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bb43c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bb43e:	8843      	ldrh	r3, [r0, #2]
   bb440:	2b0a      	cmp	r3, #10
   bb442:	d008      	beq.n	bb456 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bb444:	2b50      	cmp	r3, #80	; 0x50
   bb446:	d10b      	bne.n	bb460 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bb448:	4b09      	ldr	r3, [pc, #36]	; (bb470 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bb44a:	681b      	ldr	r3, [r3, #0]
   bb44c:	b14b      	cbz	r3, bb462 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bb44e:	b003      	add	sp, #12
   bb450:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bb454:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bb456:	f7ff ffe5 	bl	bb424 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bb45a:	b003      	add	sp, #12
   bb45c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb460:	2300      	movs	r3, #0
   bb462:	9300      	str	r3, [sp, #0]
   bb464:	461a      	mov	r2, r3
   bb466:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb46a:	f7fd fc9d 	bl	b8da8 <system_ctrl_set_result>
}
   bb46e:	e7f4      	b.n	bb45a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bb470:	2003e724 	.word	0x2003e724

000bb474 <module_user_init_hook>:
{
   bb474:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bb476:	4812      	ldr	r0, [pc, #72]	; (bb4c0 <module_user_init_hook+0x4c>)
   bb478:	2100      	movs	r1, #0
   bb47a:	f7fd fd5f 	bl	b8f3c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bb47e:	4b11      	ldr	r3, [pc, #68]	; (bb4c4 <module_user_init_hook+0x50>)
   bb480:	681a      	ldr	r2, [r3, #0]
   bb482:	4b11      	ldr	r3, [pc, #68]	; (bb4c8 <module_user_init_hook+0x54>)
   bb484:	429a      	cmp	r2, r3
   bb486:	4b11      	ldr	r3, [pc, #68]	; (bb4cc <module_user_init_hook+0x58>)
   bb488:	bf0c      	ite	eq
   bb48a:	2201      	moveq	r2, #1
   bb48c:	2200      	movne	r2, #0
   bb48e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bb490:	d001      	beq.n	bb496 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bb492:	f7ff ffb1 	bl	bb3f8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bb496:	f7fd fb25 	bl	b8ae4 <HAL_RNG_GetRandomNumber>
   bb49a:	4604      	mov	r4, r0
    srand(seed);
   bb49c:	f001 f89c 	bl	bc5d8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bb4a0:	4b0b      	ldr	r3, [pc, #44]	; (bb4d0 <module_user_init_hook+0x5c>)
   bb4a2:	b113      	cbz	r3, bb4aa <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bb4a4:	4620      	mov	r0, r4
   bb4a6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bb4aa:	2100      	movs	r1, #0
   bb4ac:	4808      	ldr	r0, [pc, #32]	; (bb4d0 <module_user_init_hook+0x5c>)
   bb4ae:	f7fd fc85 	bl	b8dbc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bb4b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bb4b6:	4807      	ldr	r0, [pc, #28]	; (bb4d4 <module_user_init_hook+0x60>)
   bb4b8:	2100      	movs	r1, #0
   bb4ba:	f7fd bc6b 	b.w	b8d94 <system_ctrl_set_app_request_handler>
   bb4be:	bf00      	nop
   bb4c0:	000bb3a1 	.word	0x000bb3a1
   bb4c4:	2003f400 	.word	0x2003f400
   bb4c8:	9a271c1e 	.word	0x9a271c1e
   bb4cc:	2003e720 	.word	0x2003e720
   bb4d0:	00000000 	.word	0x00000000
   bb4d4:	000bb43d 	.word	0x000bb43d

000bb4d8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb4d8:	4770      	bx	lr
	...

000bb4dc <_Z19__fetch_global_Wirev>:
{
   bb4dc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb4de:	4d0e      	ldr	r5, [pc, #56]	; (bb518 <_Z19__fetch_global_Wirev+0x3c>)
   bb4e0:	7829      	ldrb	r1, [r5, #0]
   bb4e2:	f3bf 8f5b 	dmb	ish
   bb4e6:	f011 0401 	ands.w	r4, r1, #1
{
   bb4ea:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb4ec:	d111      	bne.n	bb512 <_Z19__fetch_global_Wirev+0x36>
   bb4ee:	4628      	mov	r0, r5
   bb4f0:	f7f8 fdd9 	bl	b40a6 <__cxa_guard_acquire>
   bb4f4:	b168      	cbz	r0, bb512 <_Z19__fetch_global_Wirev+0x36>
   bb4f6:	a801      	add	r0, sp, #4
   bb4f8:	f7f9 f912 	bl	b4720 <_Z17acquireWireBufferv>
   bb4fc:	aa01      	add	r2, sp, #4
   bb4fe:	4621      	mov	r1, r4
   bb500:	4806      	ldr	r0, [pc, #24]	; (bb51c <_Z19__fetch_global_Wirev+0x40>)
   bb502:	f7fe ff3d 	bl	ba380 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb506:	4628      	mov	r0, r5
   bb508:	f7f8 fdd2 	bl	b40b0 <__cxa_guard_release>
   bb50c:	4804      	ldr	r0, [pc, #16]	; (bb520 <_Z19__fetch_global_Wirev+0x44>)
   bb50e:	f001 f819 	bl	bc544 <atexit>
	return wire;
}
   bb512:	4802      	ldr	r0, [pc, #8]	; (bb51c <_Z19__fetch_global_Wirev+0x40>)
   bb514:	b007      	add	sp, #28
   bb516:	bd30      	pop	{r4, r5, pc}
   bb518:	2003e72c 	.word	0x2003e72c
   bb51c:	2003e730 	.word	0x2003e730
   bb520:	000bb4d9 	.word	0x000bb4d9

000bb524 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb524:	4770      	bx	lr
	...

000bb528 <_Z20acquireSerial1Bufferv>:
{
   bb528:	b538      	push	{r3, r4, r5, lr}
   bb52a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bb52c:	2514      	movs	r5, #20
   bb52e:	462a      	mov	r2, r5
   bb530:	2100      	movs	r1, #0
   bb532:	f001 f849 	bl	bc5c8 <memset>
   bb536:	8025      	strh	r5, [r4, #0]
   bb538:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb53a:	4907      	ldr	r1, [pc, #28]	; (bb558 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bb53c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb53e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bb540:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb542:	f000 f82f 	bl	bb5a4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb546:	4904      	ldr	r1, [pc, #16]	; (bb558 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bb548:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb54a:	4628      	mov	r0, r5
   bb54c:	f000 f82a 	bl	bb5a4 <_ZnajRKSt9nothrow_t>
    };
   bb550:	60e0      	str	r0, [r4, #12]
}
   bb552:	4620      	mov	r0, r4
   bb554:	bd38      	pop	{r3, r4, r5, pc}
   bb556:	bf00      	nop
   bb558:	000bf040 	.word	0x000bf040

000bb55c <_Z22__fetch_global_Serial1v>:
{
   bb55c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb55e:	4d0e      	ldr	r5, [pc, #56]	; (bb598 <_Z22__fetch_global_Serial1v+0x3c>)
   bb560:	7829      	ldrb	r1, [r5, #0]
   bb562:	f3bf 8f5b 	dmb	ish
   bb566:	f011 0401 	ands.w	r4, r1, #1
{
   bb56a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb56c:	d111      	bne.n	bb592 <_Z22__fetch_global_Serial1v+0x36>
   bb56e:	4628      	mov	r0, r5
   bb570:	f7f8 fd99 	bl	b40a6 <__cxa_guard_acquire>
   bb574:	b168      	cbz	r0, bb592 <_Z22__fetch_global_Serial1v+0x36>
   bb576:	a801      	add	r0, sp, #4
   bb578:	f7ff ffd6 	bl	bb528 <_Z20acquireSerial1Bufferv>
   bb57c:	aa01      	add	r2, sp, #4
   bb57e:	4621      	mov	r1, r4
   bb580:	4806      	ldr	r0, [pc, #24]	; (bb59c <_Z22__fetch_global_Serial1v+0x40>)
   bb582:	f7ff fdeb 	bl	bb15c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bb586:	4628      	mov	r0, r5
   bb588:	f7f8 fd92 	bl	b40b0 <__cxa_guard_release>
   bb58c:	4804      	ldr	r0, [pc, #16]	; (bb5a0 <_Z22__fetch_global_Serial1v+0x44>)
   bb58e:	f000 ffd9 	bl	bc544 <atexit>
    return serial1;
}
   bb592:	4802      	ldr	r0, [pc, #8]	; (bb59c <_Z22__fetch_global_Serial1v+0x40>)
   bb594:	b007      	add	sp, #28
   bb596:	bd30      	pop	{r4, r5, pc}
   bb598:	2003e744 	.word	0x2003e744
   bb59c:	2003e748 	.word	0x2003e748
   bb5a0:	000bb525 	.word	0x000bb525

000bb5a4 <_ZnajRKSt9nothrow_t>:
   bb5a4:	f7f8 bd79 	b.w	b409a <_Znaj>

000bb5a8 <_ZSt17__throw_bad_allocv>:
   bb5a8:	b508      	push	{r3, lr}
   bb5aa:	f7fd fca7 	bl	b8efc <abort>

000bb5ae <_ZSt19__throw_logic_errorPKc>:
   bb5ae:	b508      	push	{r3, lr}
   bb5b0:	f7fd fca4 	bl	b8efc <abort>

000bb5b4 <_ZSt20__throw_length_errorPKc>:
   bb5b4:	b508      	push	{r3, lr}
   bb5b6:	f7fd fca1 	bl	b8efc <abort>

000bb5ba <_ZSt25__throw_bad_function_callv>:
   bb5ba:	b508      	push	{r3, lr}
   bb5bc:	f7fd fc9e 	bl	b8efc <abort>

000bb5c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bb5c0:	4901      	ldr	r1, [pc, #4]	; (bb5c8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bb5c2:	f000 b963 	b.w	bb88c <_ZNKSt9type_infoeqERKS_>
   bb5c6:	bf00      	nop
   bb5c8:	000bf05c 	.word	0x000bf05c

000bb5cc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   bb5cc:	b10a      	cbz	r2, bb5d2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   bb5ce:	f000 bfd3 	b.w	bc578 <memcpy>
   bb5d2:	4770      	bx	lr

000bb5d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   bb5d4:	b508      	push	{r3, lr}
   bb5d6:	680b      	ldr	r3, [r1, #0]
   bb5d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   bb5dc:	d302      	bcc.n	bb5e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   bb5de:	480d      	ldr	r0, [pc, #52]	; (bb614 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   bb5e0:	f7ff ffe8 	bl	bb5b4 <_ZSt20__throw_length_errorPKc>
   bb5e4:	4293      	cmp	r3, r2
   bb5e6:	d90b      	bls.n	bb600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   bb5e8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   bb5ec:	ea4f 0042 	mov.w	r0, r2, lsl #1
   bb5f0:	d206      	bcs.n	bb600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   bb5f2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   bb5f6:	bf2a      	itet	cs
   bb5f8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   bb5fc:	6008      	strcc	r0, [r1, #0]
   bb5fe:	600b      	strcs	r3, [r1, #0]
   bb600:	6808      	ldr	r0, [r1, #0]
   bb602:	3001      	adds	r0, #1
   bb604:	d501      	bpl.n	bb60a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   bb606:	f7ff ffcf 	bl	bb5a8 <_ZSt17__throw_bad_allocv>
   bb60a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bb60e:	f7f8 bd42 	b.w	b4096 <_Znwj>
   bb612:	bf00      	nop
   bb614:	000bf064 	.word	0x000bf064

000bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   bb618:	f850 3b08 	ldr.w	r3, [r0], #8
   bb61c:	4283      	cmp	r3, r0
   bb61e:	d002      	beq.n	bb626 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   bb620:	4618      	mov	r0, r3
   bb622:	f7f8 bd3c 	b.w	b409e <_ZdlPv>
   bb626:	4770      	bx	lr

000bb628 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   bb628:	2a01      	cmp	r2, #1
   bb62a:	b410      	push	{r4}
   bb62c:	d104      	bne.n	bb638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   bb62e:	780a      	ldrb	r2, [r1, #0]
   bb630:	f85d 4b04 	ldr.w	r4, [sp], #4
   bb634:	7002      	strb	r2, [r0, #0]
   bb636:	4770      	bx	lr
   bb638:	f85d 4b04 	ldr.w	r4, [sp], #4
   bb63c:	f7ff bfc6 	b.w	bb5cc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000bb640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
   bb640:	b508      	push	{r3, lr}
   bb642:	1a52      	subs	r2, r2, r1
   bb644:	f7ff fff0 	bl	bb628 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   bb648:	bd08      	pop	{r3, pc}

000bb64a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   bb64a:	b508      	push	{r3, lr}
   bb64c:	1a52      	subs	r2, r2, r1
   bb64e:	f7ff ffeb 	bl	bb628 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   bb652:	bd08      	pop	{r3, pc}

000bb654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   bb654:	4288      	cmp	r0, r1
   bb656:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb658:	4604      	mov	r4, r0
   bb65a:	460e      	mov	r6, r1
   bb65c:	d01e      	beq.n	bb69c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   bb65e:	4603      	mov	r3, r0
   bb660:	684d      	ldr	r5, [r1, #4]
   bb662:	f853 2b08 	ldr.w	r2, [r3], #8
   bb666:	429a      	cmp	r2, r3
   bb668:	bf14      	ite	ne
   bb66a:	6882      	ldrne	r2, [r0, #8]
   bb66c:	220f      	moveq	r2, #15
   bb66e:	42aa      	cmp	r2, r5
   bb670:	d20a      	bcs.n	bb688 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   bb672:	a901      	add	r1, sp, #4
   bb674:	9501      	str	r5, [sp, #4]
   bb676:	f7ff ffad 	bl	bb5d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   bb67a:	4607      	mov	r7, r0
   bb67c:	4620      	mov	r0, r4
   bb67e:	f7ff ffcb 	bl	bb618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   bb682:	9b01      	ldr	r3, [sp, #4]
   bb684:	6027      	str	r7, [r4, #0]
   bb686:	60a3      	str	r3, [r4, #8]
   bb688:	b125      	cbz	r5, bb694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   bb68a:	6831      	ldr	r1, [r6, #0]
   bb68c:	6820      	ldr	r0, [r4, #0]
   bb68e:	462a      	mov	r2, r5
   bb690:	f7ff ffca 	bl	bb628 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   bb694:	6823      	ldr	r3, [r4, #0]
   bb696:	6065      	str	r5, [r4, #4]
   bb698:	2200      	movs	r2, #0
   bb69a:	555a      	strb	r2, [r3, r5]
   bb69c:	b003      	add	sp, #12
   bb69e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb6a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bb6a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bb6a2:	2400      	movs	r4, #0
   bb6a4:	2310      	movs	r3, #16
   bb6a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bb6aa:	6803      	ldr	r3, [r0, #0]
   bb6ac:	4615      	mov	r5, r2
   bb6ae:	699e      	ldr	r6, [r3, #24]
   bb6b0:	6812      	ldr	r2, [r2, #0]
   bb6b2:	466b      	mov	r3, sp
   bb6b4:	e9cd 4400 	strd	r4, r4, [sp]
   bb6b8:	47b0      	blx	r6
   bb6ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bb6be:	f003 0306 	and.w	r3, r3, #6
   bb6c2:	2b06      	cmp	r3, #6
   bb6c4:	bf03      	ittte	eq
   bb6c6:	9b00      	ldreq	r3, [sp, #0]
   bb6c8:	602b      	streq	r3, [r5, #0]
   bb6ca:	2001      	moveq	r0, #1
   bb6cc:	4620      	movne	r0, r4
   bb6ce:	b004      	add	sp, #16
   bb6d0:	bd70      	pop	{r4, r5, r6, pc}

000bb6d2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bb6d2:	9800      	ldr	r0, [sp, #0]
   bb6d4:	4290      	cmp	r0, r2
   bb6d6:	bf14      	ite	ne
   bb6d8:	2001      	movne	r0, #1
   bb6da:	2006      	moveq	r0, #6
   bb6dc:	4770      	bx	lr
	...

000bb6e0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bb6e0:	b510      	push	{r4, lr}
   bb6e2:	4b03      	ldr	r3, [pc, #12]	; (bb6f0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bb6e4:	6003      	str	r3, [r0, #0]
   bb6e6:	4604      	mov	r4, r0
   bb6e8:	f000 f8cd 	bl	bb886 <_ZNSt9type_infoD1Ev>
   bb6ec:	4620      	mov	r0, r4
   bb6ee:	bd10      	pop	{r4, pc}
   bb6f0:	000bf0b4 	.word	0x000bf0b4

000bb6f4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bb6f4:	b510      	push	{r4, lr}
   bb6f6:	4604      	mov	r4, r0
   bb6f8:	f7ff fff2 	bl	bb6e0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb6fc:	4620      	mov	r0, r4
   bb6fe:	2108      	movs	r1, #8
   bb700:	f7f8 fccf 	bl	b40a2 <_ZdlPvj>
   bb704:	4620      	mov	r0, r4
   bb706:	bd10      	pop	{r4, pc}

000bb708 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bb708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb70c:	461f      	mov	r7, r3
   bb70e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bb712:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bb716:	4598      	cmp	r8, r3
   bb718:	4606      	mov	r6, r0
   bb71a:	4615      	mov	r5, r2
   bb71c:	d107      	bne.n	bb72e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb71e:	9907      	ldr	r1, [sp, #28]
   bb720:	f000 f8b4 	bl	bb88c <_ZNKSt9type_infoeqERKS_>
   bb724:	b118      	cbz	r0, bb72e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb726:	7165      	strb	r5, [r4, #5]
   bb728:	2000      	movs	r0, #0
   bb72a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb72e:	4639      	mov	r1, r7
   bb730:	4630      	mov	r0, r6
   bb732:	f000 f8ab 	bl	bb88c <_ZNKSt9type_infoeqERKS_>
   bb736:	2800      	cmp	r0, #0
   bb738:	d0f6      	beq.n	bb728 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bb73a:	2301      	movs	r3, #1
   bb73c:	f8c4 8000 	str.w	r8, [r4]
   bb740:	7125      	strb	r5, [r4, #4]
   bb742:	71a3      	strb	r3, [r4, #6]
   bb744:	e7f0      	b.n	bb728 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bb746 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bb746:	b538      	push	{r3, r4, r5, lr}
   bb748:	4615      	mov	r5, r2
   bb74a:	461c      	mov	r4, r3
   bb74c:	f000 f89e 	bl	bb88c <_ZNKSt9type_infoeqERKS_>
   bb750:	b120      	cbz	r0, bb75c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bb752:	2308      	movs	r3, #8
   bb754:	60e3      	str	r3, [r4, #12]
   bb756:	2306      	movs	r3, #6
   bb758:	6025      	str	r5, [r4, #0]
   bb75a:	7123      	strb	r3, [r4, #4]
   bb75c:	bd38      	pop	{r3, r4, r5, pc}

000bb75e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bb75e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb760:	4605      	mov	r5, r0
   bb762:	460c      	mov	r4, r1
   bb764:	9201      	str	r2, [sp, #4]
   bb766:	461e      	mov	r6, r3
   bb768:	f000 f890 	bl	bb88c <_ZNKSt9type_infoeqERKS_>
   bb76c:	b950      	cbnz	r0, bb784 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb76e:	2e03      	cmp	r6, #3
   bb770:	d808      	bhi.n	bb784 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb772:	6823      	ldr	r3, [r4, #0]
   bb774:	9a01      	ldr	r2, [sp, #4]
   bb776:	695b      	ldr	r3, [r3, #20]
   bb778:	4629      	mov	r1, r5
   bb77a:	4620      	mov	r0, r4
   bb77c:	b002      	add	sp, #8
   bb77e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb782:	4718      	bx	r3
   bb784:	b002      	add	sp, #8
   bb786:	bd70      	pop	{r4, r5, r6, pc}

000bb788 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bb788:	b510      	push	{r4, lr}
   bb78a:	4b03      	ldr	r3, [pc, #12]	; (bb798 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bb78c:	6003      	str	r3, [r0, #0]
   bb78e:	4604      	mov	r4, r0
   bb790:	f7ff ffa6 	bl	bb6e0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb794:	4620      	mov	r0, r4
   bb796:	bd10      	pop	{r4, pc}
   bb798:	000bf114 	.word	0x000bf114

000bb79c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bb79c:	b510      	push	{r4, lr}
   bb79e:	4604      	mov	r4, r0
   bb7a0:	f7ff fff2 	bl	bb788 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bb7a4:	4620      	mov	r0, r4
   bb7a6:	210c      	movs	r1, #12
   bb7a8:	f7f8 fc7b 	bl	b40a2 <_ZdlPvj>
   bb7ac:	4620      	mov	r0, r4
   bb7ae:	bd10      	pop	{r4, pc}

000bb7b0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bb7b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb7b2:	9f08      	ldr	r7, [sp, #32]
   bb7b4:	4297      	cmp	r7, r2
   bb7b6:	4605      	mov	r5, r0
   bb7b8:	460e      	mov	r6, r1
   bb7ba:	4614      	mov	r4, r2
   bb7bc:	d00a      	beq.n	bb7d4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bb7be:	68a8      	ldr	r0, [r5, #8]
   bb7c0:	6802      	ldr	r2, [r0, #0]
   bb7c2:	9708      	str	r7, [sp, #32]
   bb7c4:	6a15      	ldr	r5, [r2, #32]
   bb7c6:	4631      	mov	r1, r6
   bb7c8:	4622      	mov	r2, r4
   bb7ca:	46ac      	mov	ip, r5
   bb7cc:	b003      	add	sp, #12
   bb7ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bb7d2:	4760      	bx	ip
   bb7d4:	4619      	mov	r1, r3
   bb7d6:	9301      	str	r3, [sp, #4]
   bb7d8:	f000 f858 	bl	bb88c <_ZNKSt9type_infoeqERKS_>
   bb7dc:	9b01      	ldr	r3, [sp, #4]
   bb7de:	2800      	cmp	r0, #0
   bb7e0:	d0ed      	beq.n	bb7be <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bb7e2:	2006      	movs	r0, #6
   bb7e4:	b003      	add	sp, #12
   bb7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb7e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bb7e8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb7ec:	460d      	mov	r5, r1
   bb7ee:	4619      	mov	r1, r3
   bb7f0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bb7f4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bb7f8:	4681      	mov	r9, r0
   bb7fa:	4617      	mov	r7, r2
   bb7fc:	4698      	mov	r8, r3
   bb7fe:	f000 f845 	bl	bb88c <_ZNKSt9type_infoeqERKS_>
   bb802:	b190      	cbz	r0, bb82a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bb804:	2d00      	cmp	r5, #0
   bb806:	6034      	str	r4, [r6, #0]
   bb808:	7137      	strb	r7, [r6, #4]
   bb80a:	db09      	blt.n	bb820 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bb80c:	1961      	adds	r1, r4, r5
   bb80e:	458a      	cmp	sl, r1
   bb810:	bf0c      	ite	eq
   bb812:	2106      	moveq	r1, #6
   bb814:	2101      	movne	r1, #1
   bb816:	71b1      	strb	r1, [r6, #6]
   bb818:	2000      	movs	r0, #0
   bb81a:	b001      	add	sp, #4
   bb81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb820:	3502      	adds	r5, #2
   bb822:	d1f9      	bne.n	bb818 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb824:	2301      	movs	r3, #1
   bb826:	71b3      	strb	r3, [r6, #6]
   bb828:	e7f6      	b.n	bb818 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb82a:	4554      	cmp	r4, sl
   bb82c:	d106      	bne.n	bb83c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb82e:	4659      	mov	r1, fp
   bb830:	4648      	mov	r0, r9
   bb832:	f000 f82b 	bl	bb88c <_ZNKSt9type_infoeqERKS_>
   bb836:	b108      	cbz	r0, bb83c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb838:	7177      	strb	r7, [r6, #5]
   bb83a:	e7ed      	b.n	bb818 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb83c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bb840:	6803      	ldr	r3, [r0, #0]
   bb842:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bb846:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bb84a:	69dc      	ldr	r4, [r3, #28]
   bb84c:	463a      	mov	r2, r7
   bb84e:	4643      	mov	r3, r8
   bb850:	4629      	mov	r1, r5
   bb852:	46a4      	mov	ip, r4
   bb854:	b001      	add	sp, #4
   bb856:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb85a:	4760      	bx	ip

000bb85c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bb85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb860:	4607      	mov	r7, r0
   bb862:	460c      	mov	r4, r1
   bb864:	4615      	mov	r5, r2
   bb866:	461e      	mov	r6, r3
   bb868:	f7ff ff6d 	bl	bb746 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bb86c:	b948      	cbnz	r0, bb882 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bb86e:	68b8      	ldr	r0, [r7, #8]
   bb870:	6803      	ldr	r3, [r0, #0]
   bb872:	699f      	ldr	r7, [r3, #24]
   bb874:	462a      	mov	r2, r5
   bb876:	4633      	mov	r3, r6
   bb878:	4621      	mov	r1, r4
   bb87a:	46bc      	mov	ip, r7
   bb87c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bb880:	4760      	bx	ip
   bb882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb886 <_ZNSt9type_infoD1Ev>:
   bb886:	4770      	bx	lr

000bb888 <_ZNKSt9type_info14__is_pointer_pEv>:
   bb888:	2000      	movs	r0, #0
   bb88a:	4770      	bx	lr

000bb88c <_ZNKSt9type_infoeqERKS_>:
   bb88c:	4281      	cmp	r1, r0
   bb88e:	b508      	push	{r3, lr}
   bb890:	d00e      	beq.n	bb8b0 <_ZNKSt9type_infoeqERKS_+0x24>
   bb892:	6840      	ldr	r0, [r0, #4]
   bb894:	7803      	ldrb	r3, [r0, #0]
   bb896:	2b2a      	cmp	r3, #42	; 0x2a
   bb898:	d00c      	beq.n	bb8b4 <_ZNKSt9type_infoeqERKS_+0x28>
   bb89a:	6849      	ldr	r1, [r1, #4]
   bb89c:	780b      	ldrb	r3, [r1, #0]
   bb89e:	2b2a      	cmp	r3, #42	; 0x2a
   bb8a0:	bf08      	it	eq
   bb8a2:	3101      	addeq	r1, #1
   bb8a4:	f000 fec6 	bl	bc634 <strcmp>
   bb8a8:	fab0 f080 	clz	r0, r0
   bb8ac:	0940      	lsrs	r0, r0, #5
   bb8ae:	bd08      	pop	{r3, pc}
   bb8b0:	2001      	movs	r0, #1
   bb8b2:	e7fc      	b.n	bb8ae <_ZNKSt9type_infoeqERKS_+0x22>
   bb8b4:	2000      	movs	r0, #0
   bb8b6:	e7fa      	b.n	bb8ae <_ZNKSt9type_infoeqERKS_+0x22>

000bb8b8 <floorf>:
   bb8b8:	ee10 2a10 	vmov	r2, s0
   bb8bc:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   bb8c0:	3b7f      	subs	r3, #127	; 0x7f
   bb8c2:	2b16      	cmp	r3, #22
   bb8c4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   bb8c8:	dc28      	bgt.n	bb91c <floorf+0x64>
   bb8ca:	2b00      	cmp	r3, #0
   bb8cc:	db18      	blt.n	bb900 <floorf+0x48>
   bb8ce:	491a      	ldr	r1, [pc, #104]	; (bb938 <floorf+0x80>)
   bb8d0:	4119      	asrs	r1, r3
   bb8d2:	420a      	tst	r2, r1
   bb8d4:	d021      	beq.n	bb91a <floorf+0x62>
   bb8d6:	eddf 7a19 	vldr	s15, [pc, #100]	; bb93c <floorf+0x84>
   bb8da:	ee70 7a27 	vadd.f32	s15, s0, s15
   bb8de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bb8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb8e6:	dd18      	ble.n	bb91a <floorf+0x62>
   bb8e8:	2a00      	cmp	r2, #0
   bb8ea:	da04      	bge.n	bb8f6 <floorf+0x3e>
   bb8ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   bb8f0:	fa40 f303 	asr.w	r3, r0, r3
   bb8f4:	441a      	add	r2, r3
   bb8f6:	ea22 0301 	bic.w	r3, r2, r1
   bb8fa:	ee00 3a10 	vmov	s0, r3
   bb8fe:	4770      	bx	lr
   bb900:	eddf 7a0e 	vldr	s15, [pc, #56]	; bb93c <floorf+0x84>
   bb904:	ee70 7a27 	vadd.f32	s15, s0, s15
   bb908:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bb90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb910:	dd03      	ble.n	bb91a <floorf+0x62>
   bb912:	2a00      	cmp	r2, #0
   bb914:	db08      	blt.n	bb928 <floorf+0x70>
   bb916:	ed9f 0a0a 	vldr	s0, [pc, #40]	; bb940 <floorf+0x88>
   bb91a:	4770      	bx	lr
   bb91c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   bb920:	d3fb      	bcc.n	bb91a <floorf+0x62>
   bb922:	ee30 0a00 	vadd.f32	s0, s0, s0
   bb926:	4770      	bx	lr
   bb928:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   bb92c:	2900      	cmp	r1, #0
   bb92e:	bf18      	it	ne
   bb930:	eeb0 0a67 	vmovne.f32	s0, s15
   bb934:	4770      	bx	lr
   bb936:	bf00      	nop
   bb938:	007fffff 	.word	0x007fffff
   bb93c:	7149f2ca 	.word	0x7149f2ca
   bb940:	00000000 	.word	0x00000000

000bb944 <sqrt>:
   bb944:	b538      	push	{r3, r4, r5, lr}
   bb946:	ed2d 8b02 	vpush	{d8}
   bb94a:	ec55 4b10 	vmov	r4, r5, d0
   bb94e:	f000 f833 	bl	bb9b8 <__ieee754_sqrt>
   bb952:	4b18      	ldr	r3, [pc, #96]	; (bb9b4 <sqrt+0x70>)
   bb954:	eeb0 8a40 	vmov.f32	s16, s0
   bb958:	eef0 8a60 	vmov.f32	s17, s1
   bb95c:	f993 3000 	ldrsb.w	r3, [r3]
   bb960:	3301      	adds	r3, #1
   bb962:	d00d      	beq.n	bb980 <sqrt+0x3c>
   bb964:	4622      	mov	r2, r4
   bb966:	462b      	mov	r3, r5
   bb968:	4620      	mov	r0, r4
   bb96a:	4629      	mov	r1, r5
   bb96c:	f000 fd46 	bl	bc3fc <__aeabi_dcmpun>
   bb970:	b930      	cbnz	r0, bb980 <sqrt+0x3c>
   bb972:	2200      	movs	r2, #0
   bb974:	2300      	movs	r3, #0
   bb976:	4620      	mov	r0, r4
   bb978:	4629      	mov	r1, r5
   bb97a:	f000 fd17 	bl	bc3ac <__aeabi_dcmplt>
   bb97e:	b930      	cbnz	r0, bb98e <sqrt+0x4a>
   bb980:	eeb0 0a48 	vmov.f32	s0, s16
   bb984:	eef0 0a68 	vmov.f32	s1, s17
   bb988:	ecbd 8b02 	vpop	{d8}
   bb98c:	bd38      	pop	{r3, r4, r5, pc}
   bb98e:	f7fd fac5 	bl	b8f1c <__errno>
   bb992:	2200      	movs	r2, #0
   bb994:	2300      	movs	r3, #0
   bb996:	2121      	movs	r1, #33	; 0x21
   bb998:	6001      	str	r1, [r0, #0]
   bb99a:	4610      	mov	r0, r2
   bb99c:	4619      	mov	r1, r3
   bb99e:	f000 fbbd 	bl	bc11c <__aeabi_ddiv>
   bb9a2:	ec41 0b18 	vmov	d8, r0, r1
   bb9a6:	eeb0 0a48 	vmov.f32	s0, s16
   bb9aa:	eef0 0a68 	vmov.f32	s1, s17
   bb9ae:	ecbd 8b02 	vpop	{d8}
   bb9b2:	bd38      	pop	{r3, r4, r5, pc}
   bb9b4:	200350bc 	.word	0x200350bc

000bb9b8 <__ieee754_sqrt>:
   bb9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb9bc:	4a63      	ldr	r2, [pc, #396]	; (bbb4c <__ieee754_sqrt+0x194>)
   bb9be:	ec55 4b10 	vmov	r4, r5, d0
   bb9c2:	43aa      	bics	r2, r5
   bb9c4:	f000 809f 	beq.w	bbb06 <__ieee754_sqrt+0x14e>
   bb9c8:	2d00      	cmp	r5, #0
   bb9ca:	ee10 ca10 	vmov	ip, s0
   bb9ce:	462b      	mov	r3, r5
   bb9d0:	dd54      	ble.n	bba7c <__ieee754_sqrt+0xc4>
   bb9d2:	1529      	asrs	r1, r5, #20
   bb9d4:	d063      	beq.n	bba9e <__ieee754_sqrt+0xe6>
   bb9d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bb9da:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   bb9de:	07c9      	lsls	r1, r1, #31
   bb9e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb9e4:	d404      	bmi.n	bb9f0 <__ieee754_sqrt+0x38>
   bb9e6:	005b      	lsls	r3, r3, #1
   bb9e8:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bb9ec:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bb9f0:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   bb9f4:	2600      	movs	r6, #0
   bb9f6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   bb9fa:	107f      	asrs	r7, r7, #1
   bb9fc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bba00:	f04f 0e16 	mov.w	lr, #22
   bba04:	4634      	mov	r4, r6
   bba06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   bba0a:	18a1      	adds	r1, r4, r2
   bba0c:	4299      	cmp	r1, r3
   bba0e:	dc02      	bgt.n	bba16 <__ieee754_sqrt+0x5e>
   bba10:	1a5b      	subs	r3, r3, r1
   bba12:	188c      	adds	r4, r1, r2
   bba14:	4416      	add	r6, r2
   bba16:	005b      	lsls	r3, r3, #1
   bba18:	f1be 0e01 	subs.w	lr, lr, #1
   bba1c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bba20:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bba24:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bba28:	d1ef      	bne.n	bba0a <__ieee754_sqrt+0x52>
   bba2a:	4675      	mov	r5, lr
   bba2c:	2020      	movs	r0, #32
   bba2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   bba32:	e00a      	b.n	bba4a <__ieee754_sqrt+0x92>
   bba34:	d044      	beq.n	bbac0 <__ieee754_sqrt+0x108>
   bba36:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   bba3a:	3801      	subs	r0, #1
   bba3c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   bba40:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bba44:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bba48:	d043      	beq.n	bbad2 <__ieee754_sqrt+0x11a>
   bba4a:	42a3      	cmp	r3, r4
   bba4c:	eb02 010e 	add.w	r1, r2, lr
   bba50:	ddf0      	ble.n	bba34 <__ieee754_sqrt+0x7c>
   bba52:	2900      	cmp	r1, #0
   bba54:	eb01 0e02 	add.w	lr, r1, r2
   bba58:	db0a      	blt.n	bba70 <__ieee754_sqrt+0xb8>
   bba5a:	46a0      	mov	r8, r4
   bba5c:	1b1b      	subs	r3, r3, r4
   bba5e:	4561      	cmp	r1, ip
   bba60:	bf88      	it	hi
   bba62:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   bba66:	ebac 0c01 	sub.w	ip, ip, r1
   bba6a:	4415      	add	r5, r2
   bba6c:	4644      	mov	r4, r8
   bba6e:	e7e2      	b.n	bba36 <__ieee754_sqrt+0x7e>
   bba70:	f1be 0f00 	cmp.w	lr, #0
   bba74:	dbf1      	blt.n	bba5a <__ieee754_sqrt+0xa2>
   bba76:	f104 0801 	add.w	r8, r4, #1
   bba7a:	e7ef      	b.n	bba5c <__ieee754_sqrt+0xa4>
   bba7c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   bba80:	4322      	orrs	r2, r4
   bba82:	d038      	beq.n	bbaf6 <__ieee754_sqrt+0x13e>
   bba84:	2d00      	cmp	r5, #0
   bba86:	d14e      	bne.n	bbb26 <__ieee754_sqrt+0x16e>
   bba88:	4629      	mov	r1, r5
   bba8a:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   bba8e:	3915      	subs	r1, #21
   bba90:	4613      	mov	r3, r2
   bba92:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   bba96:	2a00      	cmp	r2, #0
   bba98:	d0f7      	beq.n	bba8a <__ieee754_sqrt+0xd2>
   bba9a:	02d6      	lsls	r6, r2, #11
   bba9c:	d450      	bmi.n	bbb40 <__ieee754_sqrt+0x188>
   bba9e:	2000      	movs	r0, #0
   bbaa0:	005b      	lsls	r3, r3, #1
   bbaa2:	02dd      	lsls	r5, r3, #11
   bbaa4:	4604      	mov	r4, r0
   bbaa6:	f100 0001 	add.w	r0, r0, #1
   bbaaa:	d5f9      	bpl.n	bbaa0 <__ieee754_sqrt+0xe8>
   bbaac:	461a      	mov	r2, r3
   bbaae:	4663      	mov	r3, ip
   bbab0:	fa0c fc00 	lsl.w	ip, ip, r0
   bbab4:	f1c0 0020 	rsb	r0, r0, #32
   bbab8:	40c3      	lsrs	r3, r0
   bbaba:	1b09      	subs	r1, r1, r4
   bbabc:	4313      	orrs	r3, r2
   bbabe:	e78a      	b.n	bb9d6 <__ieee754_sqrt+0x1e>
   bbac0:	4561      	cmp	r1, ip
   bbac2:	d8b8      	bhi.n	bba36 <__ieee754_sqrt+0x7e>
   bbac4:	2900      	cmp	r1, #0
   bbac6:	eb01 0e02 	add.w	lr, r1, r2
   bbaca:	dbd1      	blt.n	bba70 <__ieee754_sqrt+0xb8>
   bbacc:	4698      	mov	r8, r3
   bbace:	2300      	movs	r3, #0
   bbad0:	e7c9      	b.n	bba66 <__ieee754_sqrt+0xae>
   bbad2:	ea53 030c 	orrs.w	r3, r3, ip
   bbad6:	d110      	bne.n	bbafa <__ieee754_sqrt+0x142>
   bbad8:	0868      	lsrs	r0, r5, #1
   bbada:	1071      	asrs	r1, r6, #1
   bbadc:	07f3      	lsls	r3, r6, #31
   bbade:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   bbae2:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   bbae6:	bf48      	it	mi
   bbae8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   bbaec:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   bbaf0:	4602      	mov	r2, r0
   bbaf2:	ec43 2b10 	vmov	d0, r2, r3
   bbaf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bbafa:	1c6a      	adds	r2, r5, #1
   bbafc:	bf16      	itet	ne
   bbafe:	1c68      	addne	r0, r5, #1
   bbb00:	3601      	addeq	r6, #1
   bbb02:	0840      	lsrne	r0, r0, #1
   bbb04:	e7e9      	b.n	bbada <__ieee754_sqrt+0x122>
   bbb06:	ee10 2a10 	vmov	r2, s0
   bbb0a:	ee10 0a10 	vmov	r0, s0
   bbb0e:	462b      	mov	r3, r5
   bbb10:	4629      	mov	r1, r5
   bbb12:	f000 f9d9 	bl	bbec8 <__aeabi_dmul>
   bbb16:	4622      	mov	r2, r4
   bbb18:	462b      	mov	r3, r5
   bbb1a:	f000 f81f 	bl	bbb5c <__adddf3>
   bbb1e:	ec41 0b10 	vmov	d0, r0, r1
   bbb22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bbb26:	ee10 2a10 	vmov	r2, s0
   bbb2a:	4620      	mov	r0, r4
   bbb2c:	4629      	mov	r1, r5
   bbb2e:	f000 f813 	bl	bbb58 <__aeabi_dsub>
   bbb32:	4602      	mov	r2, r0
   bbb34:	460b      	mov	r3, r1
   bbb36:	f000 faf1 	bl	bc11c <__aeabi_ddiv>
   bbb3a:	ec41 0b10 	vmov	d0, r0, r1
   bbb3e:	e7da      	b.n	bbaf6 <__ieee754_sqrt+0x13e>
   bbb40:	4663      	mov	r3, ip
   bbb42:	2020      	movs	r0, #32
   bbb44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bbb48:	e7b6      	b.n	bbab8 <__ieee754_sqrt+0x100>
   bbb4a:	bf00      	nop
   bbb4c:	7ff00000 	.word	0x7ff00000

000bbb50 <__aeabi_drsub>:
   bbb50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bbb54:	e002      	b.n	bbb5c <__adddf3>
   bbb56:	bf00      	nop

000bbb58 <__aeabi_dsub>:
   bbb58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bbb5c <__adddf3>:
   bbb5c:	b530      	push	{r4, r5, lr}
   bbb5e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bbb62:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bbb66:	ea94 0f05 	teq	r4, r5
   bbb6a:	bf08      	it	eq
   bbb6c:	ea90 0f02 	teqeq	r0, r2
   bbb70:	bf1f      	itttt	ne
   bbb72:	ea54 0c00 	orrsne.w	ip, r4, r0
   bbb76:	ea55 0c02 	orrsne.w	ip, r5, r2
   bbb7a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bbb7e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bbb82:	f000 80e2 	beq.w	bbd4a <__adddf3+0x1ee>
   bbb86:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bbb8a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bbb8e:	bfb8      	it	lt
   bbb90:	426d      	neglt	r5, r5
   bbb92:	dd0c      	ble.n	bbbae <__adddf3+0x52>
   bbb94:	442c      	add	r4, r5
   bbb96:	ea80 0202 	eor.w	r2, r0, r2
   bbb9a:	ea81 0303 	eor.w	r3, r1, r3
   bbb9e:	ea82 0000 	eor.w	r0, r2, r0
   bbba2:	ea83 0101 	eor.w	r1, r3, r1
   bbba6:	ea80 0202 	eor.w	r2, r0, r2
   bbbaa:	ea81 0303 	eor.w	r3, r1, r3
   bbbae:	2d36      	cmp	r5, #54	; 0x36
   bbbb0:	bf88      	it	hi
   bbbb2:	bd30      	pophi	{r4, r5, pc}
   bbbb4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bbbb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bbbbc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bbbc0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bbbc4:	d002      	beq.n	bbbcc <__adddf3+0x70>
   bbbc6:	4240      	negs	r0, r0
   bbbc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bbbcc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bbbd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bbbd4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bbbd8:	d002      	beq.n	bbbe0 <__adddf3+0x84>
   bbbda:	4252      	negs	r2, r2
   bbbdc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bbbe0:	ea94 0f05 	teq	r4, r5
   bbbe4:	f000 80a7 	beq.w	bbd36 <__adddf3+0x1da>
   bbbe8:	f1a4 0401 	sub.w	r4, r4, #1
   bbbec:	f1d5 0e20 	rsbs	lr, r5, #32
   bbbf0:	db0d      	blt.n	bbc0e <__adddf3+0xb2>
   bbbf2:	fa02 fc0e 	lsl.w	ip, r2, lr
   bbbf6:	fa22 f205 	lsr.w	r2, r2, r5
   bbbfa:	1880      	adds	r0, r0, r2
   bbbfc:	f141 0100 	adc.w	r1, r1, #0
   bbc00:	fa03 f20e 	lsl.w	r2, r3, lr
   bbc04:	1880      	adds	r0, r0, r2
   bbc06:	fa43 f305 	asr.w	r3, r3, r5
   bbc0a:	4159      	adcs	r1, r3
   bbc0c:	e00e      	b.n	bbc2c <__adddf3+0xd0>
   bbc0e:	f1a5 0520 	sub.w	r5, r5, #32
   bbc12:	f10e 0e20 	add.w	lr, lr, #32
   bbc16:	2a01      	cmp	r2, #1
   bbc18:	fa03 fc0e 	lsl.w	ip, r3, lr
   bbc1c:	bf28      	it	cs
   bbc1e:	f04c 0c02 	orrcs.w	ip, ip, #2
   bbc22:	fa43 f305 	asr.w	r3, r3, r5
   bbc26:	18c0      	adds	r0, r0, r3
   bbc28:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bbc2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bbc30:	d507      	bpl.n	bbc42 <__adddf3+0xe6>
   bbc32:	f04f 0e00 	mov.w	lr, #0
   bbc36:	f1dc 0c00 	rsbs	ip, ip, #0
   bbc3a:	eb7e 0000 	sbcs.w	r0, lr, r0
   bbc3e:	eb6e 0101 	sbc.w	r1, lr, r1
   bbc42:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bbc46:	d31b      	bcc.n	bbc80 <__adddf3+0x124>
   bbc48:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bbc4c:	d30c      	bcc.n	bbc68 <__adddf3+0x10c>
   bbc4e:	0849      	lsrs	r1, r1, #1
   bbc50:	ea5f 0030 	movs.w	r0, r0, rrx
   bbc54:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bbc58:	f104 0401 	add.w	r4, r4, #1
   bbc5c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bbc60:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bbc64:	f080 809a 	bcs.w	bbd9c <__adddf3+0x240>
   bbc68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bbc6c:	bf08      	it	eq
   bbc6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bbc72:	f150 0000 	adcs.w	r0, r0, #0
   bbc76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbc7a:	ea41 0105 	orr.w	r1, r1, r5
   bbc7e:	bd30      	pop	{r4, r5, pc}
   bbc80:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bbc84:	4140      	adcs	r0, r0
   bbc86:	eb41 0101 	adc.w	r1, r1, r1
   bbc8a:	3c01      	subs	r4, #1
   bbc8c:	bf28      	it	cs
   bbc8e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bbc92:	d2e9      	bcs.n	bbc68 <__adddf3+0x10c>
   bbc94:	f091 0f00 	teq	r1, #0
   bbc98:	bf04      	itt	eq
   bbc9a:	4601      	moveq	r1, r0
   bbc9c:	2000      	moveq	r0, #0
   bbc9e:	fab1 f381 	clz	r3, r1
   bbca2:	bf08      	it	eq
   bbca4:	3320      	addeq	r3, #32
   bbca6:	f1a3 030b 	sub.w	r3, r3, #11
   bbcaa:	f1b3 0220 	subs.w	r2, r3, #32
   bbcae:	da0c      	bge.n	bbcca <__adddf3+0x16e>
   bbcb0:	320c      	adds	r2, #12
   bbcb2:	dd08      	ble.n	bbcc6 <__adddf3+0x16a>
   bbcb4:	f102 0c14 	add.w	ip, r2, #20
   bbcb8:	f1c2 020c 	rsb	r2, r2, #12
   bbcbc:	fa01 f00c 	lsl.w	r0, r1, ip
   bbcc0:	fa21 f102 	lsr.w	r1, r1, r2
   bbcc4:	e00c      	b.n	bbce0 <__adddf3+0x184>
   bbcc6:	f102 0214 	add.w	r2, r2, #20
   bbcca:	bfd8      	it	le
   bbccc:	f1c2 0c20 	rsble	ip, r2, #32
   bbcd0:	fa01 f102 	lsl.w	r1, r1, r2
   bbcd4:	fa20 fc0c 	lsr.w	ip, r0, ip
   bbcd8:	bfdc      	itt	le
   bbcda:	ea41 010c 	orrle.w	r1, r1, ip
   bbcde:	4090      	lslle	r0, r2
   bbce0:	1ae4      	subs	r4, r4, r3
   bbce2:	bfa2      	ittt	ge
   bbce4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bbce8:	4329      	orrge	r1, r5
   bbcea:	bd30      	popge	{r4, r5, pc}
   bbcec:	ea6f 0404 	mvn.w	r4, r4
   bbcf0:	3c1f      	subs	r4, #31
   bbcf2:	da1c      	bge.n	bbd2e <__adddf3+0x1d2>
   bbcf4:	340c      	adds	r4, #12
   bbcf6:	dc0e      	bgt.n	bbd16 <__adddf3+0x1ba>
   bbcf8:	f104 0414 	add.w	r4, r4, #20
   bbcfc:	f1c4 0220 	rsb	r2, r4, #32
   bbd00:	fa20 f004 	lsr.w	r0, r0, r4
   bbd04:	fa01 f302 	lsl.w	r3, r1, r2
   bbd08:	ea40 0003 	orr.w	r0, r0, r3
   bbd0c:	fa21 f304 	lsr.w	r3, r1, r4
   bbd10:	ea45 0103 	orr.w	r1, r5, r3
   bbd14:	bd30      	pop	{r4, r5, pc}
   bbd16:	f1c4 040c 	rsb	r4, r4, #12
   bbd1a:	f1c4 0220 	rsb	r2, r4, #32
   bbd1e:	fa20 f002 	lsr.w	r0, r0, r2
   bbd22:	fa01 f304 	lsl.w	r3, r1, r4
   bbd26:	ea40 0003 	orr.w	r0, r0, r3
   bbd2a:	4629      	mov	r1, r5
   bbd2c:	bd30      	pop	{r4, r5, pc}
   bbd2e:	fa21 f004 	lsr.w	r0, r1, r4
   bbd32:	4629      	mov	r1, r5
   bbd34:	bd30      	pop	{r4, r5, pc}
   bbd36:	f094 0f00 	teq	r4, #0
   bbd3a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bbd3e:	bf06      	itte	eq
   bbd40:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bbd44:	3401      	addeq	r4, #1
   bbd46:	3d01      	subne	r5, #1
   bbd48:	e74e      	b.n	bbbe8 <__adddf3+0x8c>
   bbd4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bbd4e:	bf18      	it	ne
   bbd50:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bbd54:	d029      	beq.n	bbdaa <__adddf3+0x24e>
   bbd56:	ea94 0f05 	teq	r4, r5
   bbd5a:	bf08      	it	eq
   bbd5c:	ea90 0f02 	teqeq	r0, r2
   bbd60:	d005      	beq.n	bbd6e <__adddf3+0x212>
   bbd62:	ea54 0c00 	orrs.w	ip, r4, r0
   bbd66:	bf04      	itt	eq
   bbd68:	4619      	moveq	r1, r3
   bbd6a:	4610      	moveq	r0, r2
   bbd6c:	bd30      	pop	{r4, r5, pc}
   bbd6e:	ea91 0f03 	teq	r1, r3
   bbd72:	bf1e      	ittt	ne
   bbd74:	2100      	movne	r1, #0
   bbd76:	2000      	movne	r0, #0
   bbd78:	bd30      	popne	{r4, r5, pc}
   bbd7a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bbd7e:	d105      	bne.n	bbd8c <__adddf3+0x230>
   bbd80:	0040      	lsls	r0, r0, #1
   bbd82:	4149      	adcs	r1, r1
   bbd84:	bf28      	it	cs
   bbd86:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bbd8a:	bd30      	pop	{r4, r5, pc}
   bbd8c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bbd90:	bf3c      	itt	cc
   bbd92:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bbd96:	bd30      	popcc	{r4, r5, pc}
   bbd98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bbd9c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bbda0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bbda4:	f04f 0000 	mov.w	r0, #0
   bbda8:	bd30      	pop	{r4, r5, pc}
   bbdaa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bbdae:	bf1a      	itte	ne
   bbdb0:	4619      	movne	r1, r3
   bbdb2:	4610      	movne	r0, r2
   bbdb4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bbdb8:	bf1c      	itt	ne
   bbdba:	460b      	movne	r3, r1
   bbdbc:	4602      	movne	r2, r0
   bbdbe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bbdc2:	bf06      	itte	eq
   bbdc4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bbdc8:	ea91 0f03 	teqeq	r1, r3
   bbdcc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bbdd0:	bd30      	pop	{r4, r5, pc}
   bbdd2:	bf00      	nop

000bbdd4 <__aeabi_ui2d>:
   bbdd4:	f090 0f00 	teq	r0, #0
   bbdd8:	bf04      	itt	eq
   bbdda:	2100      	moveq	r1, #0
   bbddc:	4770      	bxeq	lr
   bbdde:	b530      	push	{r4, r5, lr}
   bbde0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bbde4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bbde8:	f04f 0500 	mov.w	r5, #0
   bbdec:	f04f 0100 	mov.w	r1, #0
   bbdf0:	e750      	b.n	bbc94 <__adddf3+0x138>
   bbdf2:	bf00      	nop

000bbdf4 <__aeabi_i2d>:
   bbdf4:	f090 0f00 	teq	r0, #0
   bbdf8:	bf04      	itt	eq
   bbdfa:	2100      	moveq	r1, #0
   bbdfc:	4770      	bxeq	lr
   bbdfe:	b530      	push	{r4, r5, lr}
   bbe00:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bbe04:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bbe08:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bbe0c:	bf48      	it	mi
   bbe0e:	4240      	negmi	r0, r0
   bbe10:	f04f 0100 	mov.w	r1, #0
   bbe14:	e73e      	b.n	bbc94 <__adddf3+0x138>
   bbe16:	bf00      	nop

000bbe18 <__aeabi_f2d>:
   bbe18:	0042      	lsls	r2, r0, #1
   bbe1a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bbe1e:	ea4f 0131 	mov.w	r1, r1, rrx
   bbe22:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bbe26:	bf1f      	itttt	ne
   bbe28:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bbe2c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bbe30:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bbe34:	4770      	bxne	lr
   bbe36:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bbe3a:	bf08      	it	eq
   bbe3c:	4770      	bxeq	lr
   bbe3e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bbe42:	bf04      	itt	eq
   bbe44:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bbe48:	4770      	bxeq	lr
   bbe4a:	b530      	push	{r4, r5, lr}
   bbe4c:	f44f 7460 	mov.w	r4, #896	; 0x380
   bbe50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bbe54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bbe58:	e71c      	b.n	bbc94 <__adddf3+0x138>
   bbe5a:	bf00      	nop

000bbe5c <__aeabi_ul2d>:
   bbe5c:	ea50 0201 	orrs.w	r2, r0, r1
   bbe60:	bf08      	it	eq
   bbe62:	4770      	bxeq	lr
   bbe64:	b530      	push	{r4, r5, lr}
   bbe66:	f04f 0500 	mov.w	r5, #0
   bbe6a:	e00a      	b.n	bbe82 <__aeabi_l2d+0x16>

000bbe6c <__aeabi_l2d>:
   bbe6c:	ea50 0201 	orrs.w	r2, r0, r1
   bbe70:	bf08      	it	eq
   bbe72:	4770      	bxeq	lr
   bbe74:	b530      	push	{r4, r5, lr}
   bbe76:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bbe7a:	d502      	bpl.n	bbe82 <__aeabi_l2d+0x16>
   bbe7c:	4240      	negs	r0, r0
   bbe7e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bbe82:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bbe86:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bbe8a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bbe8e:	f43f aed8 	beq.w	bbc42 <__adddf3+0xe6>
   bbe92:	f04f 0203 	mov.w	r2, #3
   bbe96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bbe9a:	bf18      	it	ne
   bbe9c:	3203      	addne	r2, #3
   bbe9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bbea2:	bf18      	it	ne
   bbea4:	3203      	addne	r2, #3
   bbea6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bbeaa:	f1c2 0320 	rsb	r3, r2, #32
   bbeae:	fa00 fc03 	lsl.w	ip, r0, r3
   bbeb2:	fa20 f002 	lsr.w	r0, r0, r2
   bbeb6:	fa01 fe03 	lsl.w	lr, r1, r3
   bbeba:	ea40 000e 	orr.w	r0, r0, lr
   bbebe:	fa21 f102 	lsr.w	r1, r1, r2
   bbec2:	4414      	add	r4, r2
   bbec4:	e6bd      	b.n	bbc42 <__adddf3+0xe6>
   bbec6:	bf00      	nop

000bbec8 <__aeabi_dmul>:
   bbec8:	b570      	push	{r4, r5, r6, lr}
   bbeca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bbece:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bbed2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bbed6:	bf1d      	ittte	ne
   bbed8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bbedc:	ea94 0f0c 	teqne	r4, ip
   bbee0:	ea95 0f0c 	teqne	r5, ip
   bbee4:	f000 f8de 	bleq	bc0a4 <__aeabi_dmul+0x1dc>
   bbee8:	442c      	add	r4, r5
   bbeea:	ea81 0603 	eor.w	r6, r1, r3
   bbeee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bbef2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bbef6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bbefa:	bf18      	it	ne
   bbefc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bbf00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbf04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bbf08:	d038      	beq.n	bbf7c <__aeabi_dmul+0xb4>
   bbf0a:	fba0 ce02 	umull	ip, lr, r0, r2
   bbf0e:	f04f 0500 	mov.w	r5, #0
   bbf12:	fbe1 e502 	umlal	lr, r5, r1, r2
   bbf16:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bbf1a:	fbe0 e503 	umlal	lr, r5, r0, r3
   bbf1e:	f04f 0600 	mov.w	r6, #0
   bbf22:	fbe1 5603 	umlal	r5, r6, r1, r3
   bbf26:	f09c 0f00 	teq	ip, #0
   bbf2a:	bf18      	it	ne
   bbf2c:	f04e 0e01 	orrne.w	lr, lr, #1
   bbf30:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bbf34:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bbf38:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bbf3c:	d204      	bcs.n	bbf48 <__aeabi_dmul+0x80>
   bbf3e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bbf42:	416d      	adcs	r5, r5
   bbf44:	eb46 0606 	adc.w	r6, r6, r6
   bbf48:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bbf4c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bbf50:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bbf54:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bbf58:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bbf5c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bbf60:	bf88      	it	hi
   bbf62:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bbf66:	d81e      	bhi.n	bbfa6 <__aeabi_dmul+0xde>
   bbf68:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bbf6c:	bf08      	it	eq
   bbf6e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bbf72:	f150 0000 	adcs.w	r0, r0, #0
   bbf76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbf7a:	bd70      	pop	{r4, r5, r6, pc}
   bbf7c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bbf80:	ea46 0101 	orr.w	r1, r6, r1
   bbf84:	ea40 0002 	orr.w	r0, r0, r2
   bbf88:	ea81 0103 	eor.w	r1, r1, r3
   bbf8c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bbf90:	bfc2      	ittt	gt
   bbf92:	ebd4 050c 	rsbsgt	r5, r4, ip
   bbf96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bbf9a:	bd70      	popgt	{r4, r5, r6, pc}
   bbf9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbfa0:	f04f 0e00 	mov.w	lr, #0
   bbfa4:	3c01      	subs	r4, #1
   bbfa6:	f300 80ab 	bgt.w	bc100 <__aeabi_dmul+0x238>
   bbfaa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bbfae:	bfde      	ittt	le
   bbfb0:	2000      	movle	r0, #0
   bbfb2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bbfb6:	bd70      	pople	{r4, r5, r6, pc}
   bbfb8:	f1c4 0400 	rsb	r4, r4, #0
   bbfbc:	3c20      	subs	r4, #32
   bbfbe:	da35      	bge.n	bc02c <__aeabi_dmul+0x164>
   bbfc0:	340c      	adds	r4, #12
   bbfc2:	dc1b      	bgt.n	bbffc <__aeabi_dmul+0x134>
   bbfc4:	f104 0414 	add.w	r4, r4, #20
   bbfc8:	f1c4 0520 	rsb	r5, r4, #32
   bbfcc:	fa00 f305 	lsl.w	r3, r0, r5
   bbfd0:	fa20 f004 	lsr.w	r0, r0, r4
   bbfd4:	fa01 f205 	lsl.w	r2, r1, r5
   bbfd8:	ea40 0002 	orr.w	r0, r0, r2
   bbfdc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bbfe0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bbfe4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bbfe8:	fa21 f604 	lsr.w	r6, r1, r4
   bbfec:	eb42 0106 	adc.w	r1, r2, r6
   bbff0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bbff4:	bf08      	it	eq
   bbff6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bbffa:	bd70      	pop	{r4, r5, r6, pc}
   bbffc:	f1c4 040c 	rsb	r4, r4, #12
   bc000:	f1c4 0520 	rsb	r5, r4, #32
   bc004:	fa00 f304 	lsl.w	r3, r0, r4
   bc008:	fa20 f005 	lsr.w	r0, r0, r5
   bc00c:	fa01 f204 	lsl.w	r2, r1, r4
   bc010:	ea40 0002 	orr.w	r0, r0, r2
   bc014:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc018:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bc01c:	f141 0100 	adc.w	r1, r1, #0
   bc020:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bc024:	bf08      	it	eq
   bc026:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bc02a:	bd70      	pop	{r4, r5, r6, pc}
   bc02c:	f1c4 0520 	rsb	r5, r4, #32
   bc030:	fa00 f205 	lsl.w	r2, r0, r5
   bc034:	ea4e 0e02 	orr.w	lr, lr, r2
   bc038:	fa20 f304 	lsr.w	r3, r0, r4
   bc03c:	fa01 f205 	lsl.w	r2, r1, r5
   bc040:	ea43 0302 	orr.w	r3, r3, r2
   bc044:	fa21 f004 	lsr.w	r0, r1, r4
   bc048:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc04c:	fa21 f204 	lsr.w	r2, r1, r4
   bc050:	ea20 0002 	bic.w	r0, r0, r2
   bc054:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bc058:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bc05c:	bf08      	it	eq
   bc05e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bc062:	bd70      	pop	{r4, r5, r6, pc}
   bc064:	f094 0f00 	teq	r4, #0
   bc068:	d10f      	bne.n	bc08a <__aeabi_dmul+0x1c2>
   bc06a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bc06e:	0040      	lsls	r0, r0, #1
   bc070:	eb41 0101 	adc.w	r1, r1, r1
   bc074:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc078:	bf08      	it	eq
   bc07a:	3c01      	subeq	r4, #1
   bc07c:	d0f7      	beq.n	bc06e <__aeabi_dmul+0x1a6>
   bc07e:	ea41 0106 	orr.w	r1, r1, r6
   bc082:	f095 0f00 	teq	r5, #0
   bc086:	bf18      	it	ne
   bc088:	4770      	bxne	lr
   bc08a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bc08e:	0052      	lsls	r2, r2, #1
   bc090:	eb43 0303 	adc.w	r3, r3, r3
   bc094:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bc098:	bf08      	it	eq
   bc09a:	3d01      	subeq	r5, #1
   bc09c:	d0f7      	beq.n	bc08e <__aeabi_dmul+0x1c6>
   bc09e:	ea43 0306 	orr.w	r3, r3, r6
   bc0a2:	4770      	bx	lr
   bc0a4:	ea94 0f0c 	teq	r4, ip
   bc0a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bc0ac:	bf18      	it	ne
   bc0ae:	ea95 0f0c 	teqne	r5, ip
   bc0b2:	d00c      	beq.n	bc0ce <__aeabi_dmul+0x206>
   bc0b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bc0b8:	bf18      	it	ne
   bc0ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bc0be:	d1d1      	bne.n	bc064 <__aeabi_dmul+0x19c>
   bc0c0:	ea81 0103 	eor.w	r1, r1, r3
   bc0c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc0c8:	f04f 0000 	mov.w	r0, #0
   bc0cc:	bd70      	pop	{r4, r5, r6, pc}
   bc0ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bc0d2:	bf06      	itte	eq
   bc0d4:	4610      	moveq	r0, r2
   bc0d6:	4619      	moveq	r1, r3
   bc0d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bc0dc:	d019      	beq.n	bc112 <__aeabi_dmul+0x24a>
   bc0de:	ea94 0f0c 	teq	r4, ip
   bc0e2:	d102      	bne.n	bc0ea <__aeabi_dmul+0x222>
   bc0e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bc0e8:	d113      	bne.n	bc112 <__aeabi_dmul+0x24a>
   bc0ea:	ea95 0f0c 	teq	r5, ip
   bc0ee:	d105      	bne.n	bc0fc <__aeabi_dmul+0x234>
   bc0f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bc0f4:	bf1c      	itt	ne
   bc0f6:	4610      	movne	r0, r2
   bc0f8:	4619      	movne	r1, r3
   bc0fa:	d10a      	bne.n	bc112 <__aeabi_dmul+0x24a>
   bc0fc:	ea81 0103 	eor.w	r1, r1, r3
   bc100:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc104:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bc108:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bc10c:	f04f 0000 	mov.w	r0, #0
   bc110:	bd70      	pop	{r4, r5, r6, pc}
   bc112:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bc116:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bc11a:	bd70      	pop	{r4, r5, r6, pc}

000bc11c <__aeabi_ddiv>:
   bc11c:	b570      	push	{r4, r5, r6, lr}
   bc11e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bc122:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bc126:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bc12a:	bf1d      	ittte	ne
   bc12c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bc130:	ea94 0f0c 	teqne	r4, ip
   bc134:	ea95 0f0c 	teqne	r5, ip
   bc138:	f000 f8a7 	bleq	bc28a <__aeabi_ddiv+0x16e>
   bc13c:	eba4 0405 	sub.w	r4, r4, r5
   bc140:	ea81 0e03 	eor.w	lr, r1, r3
   bc144:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bc148:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bc14c:	f000 8088 	beq.w	bc260 <__aeabi_ddiv+0x144>
   bc150:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bc154:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bc158:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bc15c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bc160:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bc164:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bc168:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bc16c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bc170:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bc174:	429d      	cmp	r5, r3
   bc176:	bf08      	it	eq
   bc178:	4296      	cmpeq	r6, r2
   bc17a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bc17e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bc182:	d202      	bcs.n	bc18a <__aeabi_ddiv+0x6e>
   bc184:	085b      	lsrs	r3, r3, #1
   bc186:	ea4f 0232 	mov.w	r2, r2, rrx
   bc18a:	1ab6      	subs	r6, r6, r2
   bc18c:	eb65 0503 	sbc.w	r5, r5, r3
   bc190:	085b      	lsrs	r3, r3, #1
   bc192:	ea4f 0232 	mov.w	r2, r2, rrx
   bc196:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bc19a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bc19e:	ebb6 0e02 	subs.w	lr, r6, r2
   bc1a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc1a6:	bf22      	ittt	cs
   bc1a8:	1ab6      	subcs	r6, r6, r2
   bc1aa:	4675      	movcs	r5, lr
   bc1ac:	ea40 000c 	orrcs.w	r0, r0, ip
   bc1b0:	085b      	lsrs	r3, r3, #1
   bc1b2:	ea4f 0232 	mov.w	r2, r2, rrx
   bc1b6:	ebb6 0e02 	subs.w	lr, r6, r2
   bc1ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc1be:	bf22      	ittt	cs
   bc1c0:	1ab6      	subcs	r6, r6, r2
   bc1c2:	4675      	movcs	r5, lr
   bc1c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bc1c8:	085b      	lsrs	r3, r3, #1
   bc1ca:	ea4f 0232 	mov.w	r2, r2, rrx
   bc1ce:	ebb6 0e02 	subs.w	lr, r6, r2
   bc1d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc1d6:	bf22      	ittt	cs
   bc1d8:	1ab6      	subcs	r6, r6, r2
   bc1da:	4675      	movcs	r5, lr
   bc1dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bc1e0:	085b      	lsrs	r3, r3, #1
   bc1e2:	ea4f 0232 	mov.w	r2, r2, rrx
   bc1e6:	ebb6 0e02 	subs.w	lr, r6, r2
   bc1ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc1ee:	bf22      	ittt	cs
   bc1f0:	1ab6      	subcs	r6, r6, r2
   bc1f2:	4675      	movcs	r5, lr
   bc1f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bc1f8:	ea55 0e06 	orrs.w	lr, r5, r6
   bc1fc:	d018      	beq.n	bc230 <__aeabi_ddiv+0x114>
   bc1fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bc202:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bc206:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bc20a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bc20e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bc212:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bc216:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bc21a:	d1c0      	bne.n	bc19e <__aeabi_ddiv+0x82>
   bc21c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc220:	d10b      	bne.n	bc23a <__aeabi_ddiv+0x11e>
   bc222:	ea41 0100 	orr.w	r1, r1, r0
   bc226:	f04f 0000 	mov.w	r0, #0
   bc22a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bc22e:	e7b6      	b.n	bc19e <__aeabi_ddiv+0x82>
   bc230:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc234:	bf04      	itt	eq
   bc236:	4301      	orreq	r1, r0
   bc238:	2000      	moveq	r0, #0
   bc23a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bc23e:	bf88      	it	hi
   bc240:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bc244:	f63f aeaf 	bhi.w	bbfa6 <__aeabi_dmul+0xde>
   bc248:	ebb5 0c03 	subs.w	ip, r5, r3
   bc24c:	bf04      	itt	eq
   bc24e:	ebb6 0c02 	subseq.w	ip, r6, r2
   bc252:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bc256:	f150 0000 	adcs.w	r0, r0, #0
   bc25a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bc25e:	bd70      	pop	{r4, r5, r6, pc}
   bc260:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bc264:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bc268:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bc26c:	bfc2      	ittt	gt
   bc26e:	ebd4 050c 	rsbsgt	r5, r4, ip
   bc272:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bc276:	bd70      	popgt	{r4, r5, r6, pc}
   bc278:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc27c:	f04f 0e00 	mov.w	lr, #0
   bc280:	3c01      	subs	r4, #1
   bc282:	e690      	b.n	bbfa6 <__aeabi_dmul+0xde>
   bc284:	ea45 0e06 	orr.w	lr, r5, r6
   bc288:	e68d      	b.n	bbfa6 <__aeabi_dmul+0xde>
   bc28a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bc28e:	ea94 0f0c 	teq	r4, ip
   bc292:	bf08      	it	eq
   bc294:	ea95 0f0c 	teqeq	r5, ip
   bc298:	f43f af3b 	beq.w	bc112 <__aeabi_dmul+0x24a>
   bc29c:	ea94 0f0c 	teq	r4, ip
   bc2a0:	d10a      	bne.n	bc2b8 <__aeabi_ddiv+0x19c>
   bc2a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bc2a6:	f47f af34 	bne.w	bc112 <__aeabi_dmul+0x24a>
   bc2aa:	ea95 0f0c 	teq	r5, ip
   bc2ae:	f47f af25 	bne.w	bc0fc <__aeabi_dmul+0x234>
   bc2b2:	4610      	mov	r0, r2
   bc2b4:	4619      	mov	r1, r3
   bc2b6:	e72c      	b.n	bc112 <__aeabi_dmul+0x24a>
   bc2b8:	ea95 0f0c 	teq	r5, ip
   bc2bc:	d106      	bne.n	bc2cc <__aeabi_ddiv+0x1b0>
   bc2be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bc2c2:	f43f aefd 	beq.w	bc0c0 <__aeabi_dmul+0x1f8>
   bc2c6:	4610      	mov	r0, r2
   bc2c8:	4619      	mov	r1, r3
   bc2ca:	e722      	b.n	bc112 <__aeabi_dmul+0x24a>
   bc2cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bc2d0:	bf18      	it	ne
   bc2d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bc2d6:	f47f aec5 	bne.w	bc064 <__aeabi_dmul+0x19c>
   bc2da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bc2de:	f47f af0d 	bne.w	bc0fc <__aeabi_dmul+0x234>
   bc2e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bc2e6:	f47f aeeb 	bne.w	bc0c0 <__aeabi_dmul+0x1f8>
   bc2ea:	e712      	b.n	bc112 <__aeabi_dmul+0x24a>

000bc2ec <__gedf2>:
   bc2ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bc2f0:	e006      	b.n	bc300 <__cmpdf2+0x4>
   bc2f2:	bf00      	nop

000bc2f4 <__ledf2>:
   bc2f4:	f04f 0c01 	mov.w	ip, #1
   bc2f8:	e002      	b.n	bc300 <__cmpdf2+0x4>
   bc2fa:	bf00      	nop

000bc2fc <__cmpdf2>:
   bc2fc:	f04f 0c01 	mov.w	ip, #1
   bc300:	f84d cd04 	str.w	ip, [sp, #-4]!
   bc304:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bc308:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc30c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bc310:	bf18      	it	ne
   bc312:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bc316:	d01b      	beq.n	bc350 <__cmpdf2+0x54>
   bc318:	b001      	add	sp, #4
   bc31a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bc31e:	bf0c      	ite	eq
   bc320:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bc324:	ea91 0f03 	teqne	r1, r3
   bc328:	bf02      	ittt	eq
   bc32a:	ea90 0f02 	teqeq	r0, r2
   bc32e:	2000      	moveq	r0, #0
   bc330:	4770      	bxeq	lr
   bc332:	f110 0f00 	cmn.w	r0, #0
   bc336:	ea91 0f03 	teq	r1, r3
   bc33a:	bf58      	it	pl
   bc33c:	4299      	cmppl	r1, r3
   bc33e:	bf08      	it	eq
   bc340:	4290      	cmpeq	r0, r2
   bc342:	bf2c      	ite	cs
   bc344:	17d8      	asrcs	r0, r3, #31
   bc346:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bc34a:	f040 0001 	orr.w	r0, r0, #1
   bc34e:	4770      	bx	lr
   bc350:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bc354:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc358:	d102      	bne.n	bc360 <__cmpdf2+0x64>
   bc35a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bc35e:	d107      	bne.n	bc370 <__cmpdf2+0x74>
   bc360:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bc364:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc368:	d1d6      	bne.n	bc318 <__cmpdf2+0x1c>
   bc36a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bc36e:	d0d3      	beq.n	bc318 <__cmpdf2+0x1c>
   bc370:	f85d 0b04 	ldr.w	r0, [sp], #4
   bc374:	4770      	bx	lr
   bc376:	bf00      	nop

000bc378 <__aeabi_cdrcmple>:
   bc378:	4684      	mov	ip, r0
   bc37a:	4610      	mov	r0, r2
   bc37c:	4662      	mov	r2, ip
   bc37e:	468c      	mov	ip, r1
   bc380:	4619      	mov	r1, r3
   bc382:	4663      	mov	r3, ip
   bc384:	e000      	b.n	bc388 <__aeabi_cdcmpeq>
   bc386:	bf00      	nop

000bc388 <__aeabi_cdcmpeq>:
   bc388:	b501      	push	{r0, lr}
   bc38a:	f7ff ffb7 	bl	bc2fc <__cmpdf2>
   bc38e:	2800      	cmp	r0, #0
   bc390:	bf48      	it	mi
   bc392:	f110 0f00 	cmnmi.w	r0, #0
   bc396:	bd01      	pop	{r0, pc}

000bc398 <__aeabi_dcmpeq>:
   bc398:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc39c:	f7ff fff4 	bl	bc388 <__aeabi_cdcmpeq>
   bc3a0:	bf0c      	ite	eq
   bc3a2:	2001      	moveq	r0, #1
   bc3a4:	2000      	movne	r0, #0
   bc3a6:	f85d fb08 	ldr.w	pc, [sp], #8
   bc3aa:	bf00      	nop

000bc3ac <__aeabi_dcmplt>:
   bc3ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc3b0:	f7ff ffea 	bl	bc388 <__aeabi_cdcmpeq>
   bc3b4:	bf34      	ite	cc
   bc3b6:	2001      	movcc	r0, #1
   bc3b8:	2000      	movcs	r0, #0
   bc3ba:	f85d fb08 	ldr.w	pc, [sp], #8
   bc3be:	bf00      	nop

000bc3c0 <__aeabi_dcmple>:
   bc3c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc3c4:	f7ff ffe0 	bl	bc388 <__aeabi_cdcmpeq>
   bc3c8:	bf94      	ite	ls
   bc3ca:	2001      	movls	r0, #1
   bc3cc:	2000      	movhi	r0, #0
   bc3ce:	f85d fb08 	ldr.w	pc, [sp], #8
   bc3d2:	bf00      	nop

000bc3d4 <__aeabi_dcmpge>:
   bc3d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc3d8:	f7ff ffce 	bl	bc378 <__aeabi_cdrcmple>
   bc3dc:	bf94      	ite	ls
   bc3de:	2001      	movls	r0, #1
   bc3e0:	2000      	movhi	r0, #0
   bc3e2:	f85d fb08 	ldr.w	pc, [sp], #8
   bc3e6:	bf00      	nop

000bc3e8 <__aeabi_dcmpgt>:
   bc3e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc3ec:	f7ff ffc4 	bl	bc378 <__aeabi_cdrcmple>
   bc3f0:	bf34      	ite	cc
   bc3f2:	2001      	movcc	r0, #1
   bc3f4:	2000      	movcs	r0, #0
   bc3f6:	f85d fb08 	ldr.w	pc, [sp], #8
   bc3fa:	bf00      	nop

000bc3fc <__aeabi_dcmpun>:
   bc3fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bc400:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc404:	d102      	bne.n	bc40c <__aeabi_dcmpun+0x10>
   bc406:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bc40a:	d10a      	bne.n	bc422 <__aeabi_dcmpun+0x26>
   bc40c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bc410:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc414:	d102      	bne.n	bc41c <__aeabi_dcmpun+0x20>
   bc416:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bc41a:	d102      	bne.n	bc422 <__aeabi_dcmpun+0x26>
   bc41c:	f04f 0000 	mov.w	r0, #0
   bc420:	4770      	bx	lr
   bc422:	f04f 0001 	mov.w	r0, #1
   bc426:	4770      	bx	lr

000bc428 <__aeabi_d2uiz>:
   bc428:	004a      	lsls	r2, r1, #1
   bc42a:	d211      	bcs.n	bc450 <__aeabi_d2uiz+0x28>
   bc42c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bc430:	d211      	bcs.n	bc456 <__aeabi_d2uiz+0x2e>
   bc432:	d50d      	bpl.n	bc450 <__aeabi_d2uiz+0x28>
   bc434:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bc438:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bc43c:	d40e      	bmi.n	bc45c <__aeabi_d2uiz+0x34>
   bc43e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bc442:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bc446:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bc44a:	fa23 f002 	lsr.w	r0, r3, r2
   bc44e:	4770      	bx	lr
   bc450:	f04f 0000 	mov.w	r0, #0
   bc454:	4770      	bx	lr
   bc456:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bc45a:	d102      	bne.n	bc462 <__aeabi_d2uiz+0x3a>
   bc45c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc460:	4770      	bx	lr
   bc462:	f04f 0000 	mov.w	r0, #0
   bc466:	4770      	bx	lr

000bc468 <__aeabi_d2f>:
   bc468:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bc46c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bc470:	bf24      	itt	cs
   bc472:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bc476:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bc47a:	d90d      	bls.n	bc498 <__aeabi_d2f+0x30>
   bc47c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bc480:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bc484:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bc488:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bc48c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bc490:	bf08      	it	eq
   bc492:	f020 0001 	biceq.w	r0, r0, #1
   bc496:	4770      	bx	lr
   bc498:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bc49c:	d121      	bne.n	bc4e2 <__aeabi_d2f+0x7a>
   bc49e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bc4a2:	bfbc      	itt	lt
   bc4a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bc4a8:	4770      	bxlt	lr
   bc4aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc4ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bc4b2:	f1c2 0218 	rsb	r2, r2, #24
   bc4b6:	f1c2 0c20 	rsb	ip, r2, #32
   bc4ba:	fa10 f30c 	lsls.w	r3, r0, ip
   bc4be:	fa20 f002 	lsr.w	r0, r0, r2
   bc4c2:	bf18      	it	ne
   bc4c4:	f040 0001 	orrne.w	r0, r0, #1
   bc4c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bc4cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bc4d0:	fa03 fc0c 	lsl.w	ip, r3, ip
   bc4d4:	ea40 000c 	orr.w	r0, r0, ip
   bc4d8:	fa23 f302 	lsr.w	r3, r3, r2
   bc4dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bc4e0:	e7cc      	b.n	bc47c <__aeabi_d2f+0x14>
   bc4e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bc4e6:	d107      	bne.n	bc4f8 <__aeabi_d2f+0x90>
   bc4e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bc4ec:	bf1e      	ittt	ne
   bc4ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bc4f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bc4f6:	4770      	bxne	lr
   bc4f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bc4fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bc500:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bc504:	4770      	bx	lr
   bc506:	bf00      	nop

000bc508 <__aeabi_d2ulz>:
   bc508:	b5d0      	push	{r4, r6, r7, lr}
   bc50a:	4b0c      	ldr	r3, [pc, #48]	; (bc53c <__aeabi_d2ulz+0x34>)
   bc50c:	2200      	movs	r2, #0
   bc50e:	4606      	mov	r6, r0
   bc510:	460f      	mov	r7, r1
   bc512:	f7ff fcd9 	bl	bbec8 <__aeabi_dmul>
   bc516:	f7ff ff87 	bl	bc428 <__aeabi_d2uiz>
   bc51a:	4604      	mov	r4, r0
   bc51c:	f7ff fc5a 	bl	bbdd4 <__aeabi_ui2d>
   bc520:	4b07      	ldr	r3, [pc, #28]	; (bc540 <__aeabi_d2ulz+0x38>)
   bc522:	2200      	movs	r2, #0
   bc524:	f7ff fcd0 	bl	bbec8 <__aeabi_dmul>
   bc528:	4602      	mov	r2, r0
   bc52a:	460b      	mov	r3, r1
   bc52c:	4630      	mov	r0, r6
   bc52e:	4639      	mov	r1, r7
   bc530:	f7ff fb12 	bl	bbb58 <__aeabi_dsub>
   bc534:	f7ff ff78 	bl	bc428 <__aeabi_d2uiz>
   bc538:	4621      	mov	r1, r4
   bc53a:	bdd0      	pop	{r4, r6, r7, pc}
   bc53c:	3df00000 	.word	0x3df00000
   bc540:	41f00000 	.word	0x41f00000

000bc544 <atexit>:
   bc544:	2300      	movs	r3, #0
   bc546:	4601      	mov	r1, r0
   bc548:	461a      	mov	r2, r3
   bc54a:	4618      	mov	r0, r3
   bc54c:	f000 bfce 	b.w	bd4ec <__register_exitproc>

000bc550 <atoi>:
   bc550:	220a      	movs	r2, #10
   bc552:	2100      	movs	r1, #0
   bc554:	f000 bfc0 	b.w	bd4d8 <strtol>

000bc558 <memcmp>:
   bc558:	b510      	push	{r4, lr}
   bc55a:	3901      	subs	r1, #1
   bc55c:	4402      	add	r2, r0
   bc55e:	4290      	cmp	r0, r2
   bc560:	d101      	bne.n	bc566 <memcmp+0xe>
   bc562:	2000      	movs	r0, #0
   bc564:	e005      	b.n	bc572 <memcmp+0x1a>
   bc566:	7803      	ldrb	r3, [r0, #0]
   bc568:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bc56c:	42a3      	cmp	r3, r4
   bc56e:	d001      	beq.n	bc574 <memcmp+0x1c>
   bc570:	1b18      	subs	r0, r3, r4
   bc572:	bd10      	pop	{r4, pc}
   bc574:	3001      	adds	r0, #1
   bc576:	e7f2      	b.n	bc55e <memcmp+0x6>

000bc578 <memcpy>:
   bc578:	440a      	add	r2, r1
   bc57a:	4291      	cmp	r1, r2
   bc57c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bc580:	d100      	bne.n	bc584 <memcpy+0xc>
   bc582:	4770      	bx	lr
   bc584:	b510      	push	{r4, lr}
   bc586:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc58a:	f803 4f01 	strb.w	r4, [r3, #1]!
   bc58e:	4291      	cmp	r1, r2
   bc590:	d1f9      	bne.n	bc586 <memcpy+0xe>
   bc592:	bd10      	pop	{r4, pc}

000bc594 <memmove>:
   bc594:	4288      	cmp	r0, r1
   bc596:	b510      	push	{r4, lr}
   bc598:	eb01 0402 	add.w	r4, r1, r2
   bc59c:	d902      	bls.n	bc5a4 <memmove+0x10>
   bc59e:	4284      	cmp	r4, r0
   bc5a0:	4623      	mov	r3, r4
   bc5a2:	d807      	bhi.n	bc5b4 <memmove+0x20>
   bc5a4:	1e43      	subs	r3, r0, #1
   bc5a6:	42a1      	cmp	r1, r4
   bc5a8:	d008      	beq.n	bc5bc <memmove+0x28>
   bc5aa:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc5ae:	f803 2f01 	strb.w	r2, [r3, #1]!
   bc5b2:	e7f8      	b.n	bc5a6 <memmove+0x12>
   bc5b4:	4402      	add	r2, r0
   bc5b6:	4601      	mov	r1, r0
   bc5b8:	428a      	cmp	r2, r1
   bc5ba:	d100      	bne.n	bc5be <memmove+0x2a>
   bc5bc:	bd10      	pop	{r4, pc}
   bc5be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bc5c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bc5c6:	e7f7      	b.n	bc5b8 <memmove+0x24>

000bc5c8 <memset>:
   bc5c8:	4402      	add	r2, r0
   bc5ca:	4603      	mov	r3, r0
   bc5cc:	4293      	cmp	r3, r2
   bc5ce:	d100      	bne.n	bc5d2 <memset+0xa>
   bc5d0:	4770      	bx	lr
   bc5d2:	f803 1b01 	strb.w	r1, [r3], #1
   bc5d6:	e7f9      	b.n	bc5cc <memset+0x4>

000bc5d8 <srand>:
   bc5d8:	b538      	push	{r3, r4, r5, lr}
   bc5da:	4b10      	ldr	r3, [pc, #64]	; (bc61c <srand+0x44>)
   bc5dc:	681d      	ldr	r5, [r3, #0]
   bc5de:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc5e0:	4604      	mov	r4, r0
   bc5e2:	b9b3      	cbnz	r3, bc612 <srand+0x3a>
   bc5e4:	2018      	movs	r0, #24
   bc5e6:	f7fc fc61 	bl	b8eac <malloc>
   bc5ea:	4602      	mov	r2, r0
   bc5ec:	63a8      	str	r0, [r5, #56]	; 0x38
   bc5ee:	b920      	cbnz	r0, bc5fa <srand+0x22>
   bc5f0:	4b0b      	ldr	r3, [pc, #44]	; (bc620 <srand+0x48>)
   bc5f2:	480c      	ldr	r0, [pc, #48]	; (bc624 <srand+0x4c>)
   bc5f4:	2142      	movs	r1, #66	; 0x42
   bc5f6:	f7fc fc99 	bl	b8f2c <__assert_func>
   bc5fa:	490b      	ldr	r1, [pc, #44]	; (bc628 <srand+0x50>)
   bc5fc:	4b0b      	ldr	r3, [pc, #44]	; (bc62c <srand+0x54>)
   bc5fe:	e9c0 1300 	strd	r1, r3, [r0]
   bc602:	4b0b      	ldr	r3, [pc, #44]	; (bc630 <srand+0x58>)
   bc604:	6083      	str	r3, [r0, #8]
   bc606:	230b      	movs	r3, #11
   bc608:	8183      	strh	r3, [r0, #12]
   bc60a:	2100      	movs	r1, #0
   bc60c:	2001      	movs	r0, #1
   bc60e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bc612:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc614:	2200      	movs	r2, #0
   bc616:	611c      	str	r4, [r3, #16]
   bc618:	615a      	str	r2, [r3, #20]
   bc61a:	bd38      	pop	{r3, r4, r5, pc}
   bc61c:	200350c0 	.word	0x200350c0
   bc620:	000bf14d 	.word	0x000bf14d
   bc624:	000bf164 	.word	0x000bf164
   bc628:	abcd330e 	.word	0xabcd330e
   bc62c:	e66d1234 	.word	0xe66d1234
   bc630:	0005deec 	.word	0x0005deec

000bc634 <strcmp>:
   bc634:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc638:	f811 3b01 	ldrb.w	r3, [r1], #1
   bc63c:	2a01      	cmp	r2, #1
   bc63e:	bf28      	it	cs
   bc640:	429a      	cmpcs	r2, r3
   bc642:	d0f7      	beq.n	bc634 <strcmp>
   bc644:	1ad0      	subs	r0, r2, r3
   bc646:	4770      	bx	lr

000bc648 <strcpy>:
   bc648:	4603      	mov	r3, r0
   bc64a:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc64e:	f803 2b01 	strb.w	r2, [r3], #1
   bc652:	2a00      	cmp	r2, #0
   bc654:	d1f9      	bne.n	bc64a <strcpy+0x2>
   bc656:	4770      	bx	lr

000bc658 <strlen>:
   bc658:	4603      	mov	r3, r0
   bc65a:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc65e:	2a00      	cmp	r2, #0
   bc660:	d1fb      	bne.n	bc65a <strlen+0x2>
   bc662:	1a18      	subs	r0, r3, r0
   bc664:	3801      	subs	r0, #1
   bc666:	4770      	bx	lr

000bc668 <strncmp>:
   bc668:	b510      	push	{r4, lr}
   bc66a:	b17a      	cbz	r2, bc68c <strncmp+0x24>
   bc66c:	4603      	mov	r3, r0
   bc66e:	3901      	subs	r1, #1
   bc670:	1884      	adds	r4, r0, r2
   bc672:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc676:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bc67a:	4290      	cmp	r0, r2
   bc67c:	d101      	bne.n	bc682 <strncmp+0x1a>
   bc67e:	42a3      	cmp	r3, r4
   bc680:	d101      	bne.n	bc686 <strncmp+0x1e>
   bc682:	1a80      	subs	r0, r0, r2
   bc684:	bd10      	pop	{r4, pc}
   bc686:	2800      	cmp	r0, #0
   bc688:	d1f3      	bne.n	bc672 <strncmp+0xa>
   bc68a:	e7fa      	b.n	bc682 <strncmp+0x1a>
   bc68c:	4610      	mov	r0, r2
   bc68e:	e7f9      	b.n	bc684 <strncmp+0x1c>

000bc690 <strnlen>:
   bc690:	b510      	push	{r4, lr}
   bc692:	4602      	mov	r2, r0
   bc694:	4401      	add	r1, r0
   bc696:	428a      	cmp	r2, r1
   bc698:	4613      	mov	r3, r2
   bc69a:	d003      	beq.n	bc6a4 <strnlen+0x14>
   bc69c:	781c      	ldrb	r4, [r3, #0]
   bc69e:	3201      	adds	r2, #1
   bc6a0:	2c00      	cmp	r4, #0
   bc6a2:	d1f8      	bne.n	bc696 <strnlen+0x6>
   bc6a4:	1a18      	subs	r0, r3, r0
   bc6a6:	bd10      	pop	{r4, pc}

000bc6a8 <strstr>:
   bc6a8:	780a      	ldrb	r2, [r1, #0]
   bc6aa:	b570      	push	{r4, r5, r6, lr}
   bc6ac:	b96a      	cbnz	r2, bc6ca <strstr+0x22>
   bc6ae:	bd70      	pop	{r4, r5, r6, pc}
   bc6b0:	429a      	cmp	r2, r3
   bc6b2:	d109      	bne.n	bc6c8 <strstr+0x20>
   bc6b4:	460c      	mov	r4, r1
   bc6b6:	4605      	mov	r5, r0
   bc6b8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bc6bc:	2b00      	cmp	r3, #0
   bc6be:	d0f6      	beq.n	bc6ae <strstr+0x6>
   bc6c0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bc6c4:	429e      	cmp	r6, r3
   bc6c6:	d0f7      	beq.n	bc6b8 <strstr+0x10>
   bc6c8:	3001      	adds	r0, #1
   bc6ca:	7803      	ldrb	r3, [r0, #0]
   bc6cc:	2b00      	cmp	r3, #0
   bc6ce:	d1ef      	bne.n	bc6b0 <strstr+0x8>
   bc6d0:	4618      	mov	r0, r3
   bc6d2:	e7ec      	b.n	bc6ae <strstr+0x6>

000bc6d4 <sulp>:
   bc6d4:	b570      	push	{r4, r5, r6, lr}
   bc6d6:	4604      	mov	r4, r0
   bc6d8:	460d      	mov	r5, r1
   bc6da:	ec45 4b10 	vmov	d0, r4, r5
   bc6de:	4616      	mov	r6, r2
   bc6e0:	f001 fe5e 	bl	be3a0 <__ulp>
   bc6e4:	ec51 0b10 	vmov	r0, r1, d0
   bc6e8:	b17e      	cbz	r6, bc70a <sulp+0x36>
   bc6ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bc6ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bc6f2:	2b00      	cmp	r3, #0
   bc6f4:	dd09      	ble.n	bc70a <sulp+0x36>
   bc6f6:	051b      	lsls	r3, r3, #20
   bc6f8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bc6fc:	2400      	movs	r4, #0
   bc6fe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bc702:	4622      	mov	r2, r4
   bc704:	462b      	mov	r3, r5
   bc706:	f7ff fbdf 	bl	bbec8 <__aeabi_dmul>
   bc70a:	bd70      	pop	{r4, r5, r6, pc}
   bc70c:	0000      	movs	r0, r0
	...

000bc710 <_strtod_l>:
   bc710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc714:	ed2d 8b02 	vpush	{d8}
   bc718:	b09d      	sub	sp, #116	; 0x74
   bc71a:	461f      	mov	r7, r3
   bc71c:	2300      	movs	r3, #0
   bc71e:	9318      	str	r3, [sp, #96]	; 0x60
   bc720:	4ba2      	ldr	r3, [pc, #648]	; (bc9ac <_strtod_l+0x29c>)
   bc722:	9213      	str	r2, [sp, #76]	; 0x4c
   bc724:	681b      	ldr	r3, [r3, #0]
   bc726:	9305      	str	r3, [sp, #20]
   bc728:	4604      	mov	r4, r0
   bc72a:	4618      	mov	r0, r3
   bc72c:	4688      	mov	r8, r1
   bc72e:	f7ff ff93 	bl	bc658 <strlen>
   bc732:	f04f 0a00 	mov.w	sl, #0
   bc736:	4605      	mov	r5, r0
   bc738:	f04f 0b00 	mov.w	fp, #0
   bc73c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc740:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc742:	781a      	ldrb	r2, [r3, #0]
   bc744:	2a2b      	cmp	r2, #43	; 0x2b
   bc746:	d04e      	beq.n	bc7e6 <_strtod_l+0xd6>
   bc748:	d83b      	bhi.n	bc7c2 <_strtod_l+0xb2>
   bc74a:	2a0d      	cmp	r2, #13
   bc74c:	d834      	bhi.n	bc7b8 <_strtod_l+0xa8>
   bc74e:	2a08      	cmp	r2, #8
   bc750:	d834      	bhi.n	bc7bc <_strtod_l+0xac>
   bc752:	2a00      	cmp	r2, #0
   bc754:	d03e      	beq.n	bc7d4 <_strtod_l+0xc4>
   bc756:	2300      	movs	r3, #0
   bc758:	930a      	str	r3, [sp, #40]	; 0x28
   bc75a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bc75c:	7833      	ldrb	r3, [r6, #0]
   bc75e:	2b30      	cmp	r3, #48	; 0x30
   bc760:	f040 80b0 	bne.w	bc8c4 <_strtod_l+0x1b4>
   bc764:	7873      	ldrb	r3, [r6, #1]
   bc766:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc76a:	2b58      	cmp	r3, #88	; 0x58
   bc76c:	d168      	bne.n	bc840 <_strtod_l+0x130>
   bc76e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bc770:	9301      	str	r3, [sp, #4]
   bc772:	ab18      	add	r3, sp, #96	; 0x60
   bc774:	9702      	str	r7, [sp, #8]
   bc776:	9300      	str	r3, [sp, #0]
   bc778:	4a8d      	ldr	r2, [pc, #564]	; (bc9b0 <_strtod_l+0x2a0>)
   bc77a:	ab19      	add	r3, sp, #100	; 0x64
   bc77c:	a917      	add	r1, sp, #92	; 0x5c
   bc77e:	4620      	mov	r0, r4
   bc780:	f000 ff7e 	bl	bd680 <__gethex>
   bc784:	f010 0707 	ands.w	r7, r0, #7
   bc788:	4605      	mov	r5, r0
   bc78a:	d005      	beq.n	bc798 <_strtod_l+0x88>
   bc78c:	2f06      	cmp	r7, #6
   bc78e:	d12c      	bne.n	bc7ea <_strtod_l+0xda>
   bc790:	3601      	adds	r6, #1
   bc792:	2300      	movs	r3, #0
   bc794:	9617      	str	r6, [sp, #92]	; 0x5c
   bc796:	930a      	str	r3, [sp, #40]	; 0x28
   bc798:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bc79a:	2b00      	cmp	r3, #0
   bc79c:	f040 8590 	bne.w	bd2c0 <_strtod_l+0xbb0>
   bc7a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bc7a2:	b1eb      	cbz	r3, bc7e0 <_strtod_l+0xd0>
   bc7a4:	4652      	mov	r2, sl
   bc7a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bc7aa:	ec43 2b10 	vmov	d0, r2, r3
   bc7ae:	b01d      	add	sp, #116	; 0x74
   bc7b0:	ecbd 8b02 	vpop	{d8}
   bc7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc7b8:	2a20      	cmp	r2, #32
   bc7ba:	d1cc      	bne.n	bc756 <_strtod_l+0x46>
   bc7bc:	3301      	adds	r3, #1
   bc7be:	9317      	str	r3, [sp, #92]	; 0x5c
   bc7c0:	e7be      	b.n	bc740 <_strtod_l+0x30>
   bc7c2:	2a2d      	cmp	r2, #45	; 0x2d
   bc7c4:	d1c7      	bne.n	bc756 <_strtod_l+0x46>
   bc7c6:	2201      	movs	r2, #1
   bc7c8:	920a      	str	r2, [sp, #40]	; 0x28
   bc7ca:	1c5a      	adds	r2, r3, #1
   bc7cc:	9217      	str	r2, [sp, #92]	; 0x5c
   bc7ce:	785b      	ldrb	r3, [r3, #1]
   bc7d0:	2b00      	cmp	r3, #0
   bc7d2:	d1c2      	bne.n	bc75a <_strtod_l+0x4a>
   bc7d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bc7d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc7da:	2b00      	cmp	r3, #0
   bc7dc:	f040 856e 	bne.w	bd2bc <_strtod_l+0xbac>
   bc7e0:	4652      	mov	r2, sl
   bc7e2:	465b      	mov	r3, fp
   bc7e4:	e7e1      	b.n	bc7aa <_strtod_l+0x9a>
   bc7e6:	2200      	movs	r2, #0
   bc7e8:	e7ee      	b.n	bc7c8 <_strtod_l+0xb8>
   bc7ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bc7ec:	b13a      	cbz	r2, bc7fe <_strtod_l+0xee>
   bc7ee:	2135      	movs	r1, #53	; 0x35
   bc7f0:	a81a      	add	r0, sp, #104	; 0x68
   bc7f2:	f001 fee0 	bl	be5b6 <__copybits>
   bc7f6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc7f8:	4620      	mov	r0, r4
   bc7fa:	f001 fa9f 	bl	bdd3c <_Bfree>
   bc7fe:	3f01      	subs	r7, #1
   bc800:	2f04      	cmp	r7, #4
   bc802:	d806      	bhi.n	bc812 <_strtod_l+0x102>
   bc804:	e8df f007 	tbb	[pc, r7]
   bc808:	1714030a 	.word	0x1714030a
   bc80c:	0a          	.byte	0x0a
   bc80d:	00          	.byte	0x00
   bc80e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bc812:	0728      	lsls	r0, r5, #28
   bc814:	d5c0      	bpl.n	bc798 <_strtod_l+0x88>
   bc816:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bc81a:	e7bd      	b.n	bc798 <_strtod_l+0x88>
   bc81c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bc820:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bc822:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bc826:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bc82a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bc82e:	e7f0      	b.n	bc812 <_strtod_l+0x102>
   bc830:	f8df b180 	ldr.w	fp, [pc, #384]	; bc9b4 <_strtod_l+0x2a4>
   bc834:	e7ed      	b.n	bc812 <_strtod_l+0x102>
   bc836:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bc83a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc83e:	e7e8      	b.n	bc812 <_strtod_l+0x102>
   bc840:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc842:	1c5a      	adds	r2, r3, #1
   bc844:	9217      	str	r2, [sp, #92]	; 0x5c
   bc846:	785b      	ldrb	r3, [r3, #1]
   bc848:	2b30      	cmp	r3, #48	; 0x30
   bc84a:	d0f9      	beq.n	bc840 <_strtod_l+0x130>
   bc84c:	2b00      	cmp	r3, #0
   bc84e:	d0a3      	beq.n	bc798 <_strtod_l+0x88>
   bc850:	2301      	movs	r3, #1
   bc852:	f04f 0900 	mov.w	r9, #0
   bc856:	9304      	str	r3, [sp, #16]
   bc858:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc85a:	9308      	str	r3, [sp, #32]
   bc85c:	f8cd 901c 	str.w	r9, [sp, #28]
   bc860:	464f      	mov	r7, r9
   bc862:	220a      	movs	r2, #10
   bc864:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bc866:	7806      	ldrb	r6, [r0, #0]
   bc868:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bc86c:	b2d9      	uxtb	r1, r3
   bc86e:	2909      	cmp	r1, #9
   bc870:	d92a      	bls.n	bc8c8 <_strtod_l+0x1b8>
   bc872:	9905      	ldr	r1, [sp, #20]
   bc874:	462a      	mov	r2, r5
   bc876:	f7ff fef7 	bl	bc668 <strncmp>
   bc87a:	b398      	cbz	r0, bc8e4 <_strtod_l+0x1d4>
   bc87c:	2000      	movs	r0, #0
   bc87e:	4632      	mov	r2, r6
   bc880:	463d      	mov	r5, r7
   bc882:	9005      	str	r0, [sp, #20]
   bc884:	4603      	mov	r3, r0
   bc886:	2a65      	cmp	r2, #101	; 0x65
   bc888:	d001      	beq.n	bc88e <_strtod_l+0x17e>
   bc88a:	2a45      	cmp	r2, #69	; 0x45
   bc88c:	d118      	bne.n	bc8c0 <_strtod_l+0x1b0>
   bc88e:	b91d      	cbnz	r5, bc898 <_strtod_l+0x188>
   bc890:	9a04      	ldr	r2, [sp, #16]
   bc892:	4302      	orrs	r2, r0
   bc894:	d09e      	beq.n	bc7d4 <_strtod_l+0xc4>
   bc896:	2500      	movs	r5, #0
   bc898:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bc89c:	f108 0201 	add.w	r2, r8, #1
   bc8a0:	9217      	str	r2, [sp, #92]	; 0x5c
   bc8a2:	f898 2001 	ldrb.w	r2, [r8, #1]
   bc8a6:	2a2b      	cmp	r2, #43	; 0x2b
   bc8a8:	d075      	beq.n	bc996 <_strtod_l+0x286>
   bc8aa:	2a2d      	cmp	r2, #45	; 0x2d
   bc8ac:	d07b      	beq.n	bc9a6 <_strtod_l+0x296>
   bc8ae:	f04f 0c00 	mov.w	ip, #0
   bc8b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bc8b6:	2909      	cmp	r1, #9
   bc8b8:	f240 8082 	bls.w	bc9c0 <_strtod_l+0x2b0>
   bc8bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc8c0:	2600      	movs	r6, #0
   bc8c2:	e09d      	b.n	bca00 <_strtod_l+0x2f0>
   bc8c4:	2300      	movs	r3, #0
   bc8c6:	e7c4      	b.n	bc852 <_strtod_l+0x142>
   bc8c8:	2f08      	cmp	r7, #8
   bc8ca:	bfd8      	it	le
   bc8cc:	9907      	ldrle	r1, [sp, #28]
   bc8ce:	f100 0001 	add.w	r0, r0, #1
   bc8d2:	bfda      	itte	le
   bc8d4:	fb02 3301 	mlale	r3, r2, r1, r3
   bc8d8:	9307      	strle	r3, [sp, #28]
   bc8da:	fb02 3909 	mlagt	r9, r2, r9, r3
   bc8de:	3701      	adds	r7, #1
   bc8e0:	9017      	str	r0, [sp, #92]	; 0x5c
   bc8e2:	e7bf      	b.n	bc864 <_strtod_l+0x154>
   bc8e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc8e6:	195a      	adds	r2, r3, r5
   bc8e8:	9217      	str	r2, [sp, #92]	; 0x5c
   bc8ea:	5d5a      	ldrb	r2, [r3, r5]
   bc8ec:	2f00      	cmp	r7, #0
   bc8ee:	d037      	beq.n	bc960 <_strtod_l+0x250>
   bc8f0:	9005      	str	r0, [sp, #20]
   bc8f2:	463d      	mov	r5, r7
   bc8f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bc8f8:	2b09      	cmp	r3, #9
   bc8fa:	d912      	bls.n	bc922 <_strtod_l+0x212>
   bc8fc:	2301      	movs	r3, #1
   bc8fe:	e7c2      	b.n	bc886 <_strtod_l+0x176>
   bc900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc902:	1c5a      	adds	r2, r3, #1
   bc904:	9217      	str	r2, [sp, #92]	; 0x5c
   bc906:	785a      	ldrb	r2, [r3, #1]
   bc908:	3001      	adds	r0, #1
   bc90a:	2a30      	cmp	r2, #48	; 0x30
   bc90c:	d0f8      	beq.n	bc900 <_strtod_l+0x1f0>
   bc90e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bc912:	2b08      	cmp	r3, #8
   bc914:	f200 84d9 	bhi.w	bd2ca <_strtod_l+0xbba>
   bc918:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc91a:	9005      	str	r0, [sp, #20]
   bc91c:	2000      	movs	r0, #0
   bc91e:	9308      	str	r3, [sp, #32]
   bc920:	4605      	mov	r5, r0
   bc922:	3a30      	subs	r2, #48	; 0x30
   bc924:	f100 0301 	add.w	r3, r0, #1
   bc928:	d014      	beq.n	bc954 <_strtod_l+0x244>
   bc92a:	9905      	ldr	r1, [sp, #20]
   bc92c:	4419      	add	r1, r3
   bc92e:	9105      	str	r1, [sp, #20]
   bc930:	462b      	mov	r3, r5
   bc932:	eb00 0e05 	add.w	lr, r0, r5
   bc936:	210a      	movs	r1, #10
   bc938:	4573      	cmp	r3, lr
   bc93a:	d113      	bne.n	bc964 <_strtod_l+0x254>
   bc93c:	182b      	adds	r3, r5, r0
   bc93e:	2b08      	cmp	r3, #8
   bc940:	f105 0501 	add.w	r5, r5, #1
   bc944:	4405      	add	r5, r0
   bc946:	dc1c      	bgt.n	bc982 <_strtod_l+0x272>
   bc948:	9907      	ldr	r1, [sp, #28]
   bc94a:	230a      	movs	r3, #10
   bc94c:	fb03 2301 	mla	r3, r3, r1, r2
   bc950:	9307      	str	r3, [sp, #28]
   bc952:	2300      	movs	r3, #0
   bc954:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc956:	1c51      	adds	r1, r2, #1
   bc958:	9117      	str	r1, [sp, #92]	; 0x5c
   bc95a:	7852      	ldrb	r2, [r2, #1]
   bc95c:	4618      	mov	r0, r3
   bc95e:	e7c9      	b.n	bc8f4 <_strtod_l+0x1e4>
   bc960:	4638      	mov	r0, r7
   bc962:	e7d2      	b.n	bc90a <_strtod_l+0x1fa>
   bc964:	2b08      	cmp	r3, #8
   bc966:	dc04      	bgt.n	bc972 <_strtod_l+0x262>
   bc968:	9e07      	ldr	r6, [sp, #28]
   bc96a:	434e      	muls	r6, r1
   bc96c:	9607      	str	r6, [sp, #28]
   bc96e:	3301      	adds	r3, #1
   bc970:	e7e2      	b.n	bc938 <_strtod_l+0x228>
   bc972:	f103 0c01 	add.w	ip, r3, #1
   bc976:	f1bc 0f10 	cmp.w	ip, #16
   bc97a:	bfd8      	it	le
   bc97c:	fb01 f909 	mulle.w	r9, r1, r9
   bc980:	e7f5      	b.n	bc96e <_strtod_l+0x25e>
   bc982:	2d10      	cmp	r5, #16
   bc984:	bfdc      	itt	le
   bc986:	230a      	movle	r3, #10
   bc988:	fb03 2909 	mlale	r9, r3, r9, r2
   bc98c:	e7e1      	b.n	bc952 <_strtod_l+0x242>
   bc98e:	2300      	movs	r3, #0
   bc990:	9305      	str	r3, [sp, #20]
   bc992:	2301      	movs	r3, #1
   bc994:	e77c      	b.n	bc890 <_strtod_l+0x180>
   bc996:	f04f 0c00 	mov.w	ip, #0
   bc99a:	f108 0202 	add.w	r2, r8, #2
   bc99e:	9217      	str	r2, [sp, #92]	; 0x5c
   bc9a0:	f898 2002 	ldrb.w	r2, [r8, #2]
   bc9a4:	e785      	b.n	bc8b2 <_strtod_l+0x1a2>
   bc9a6:	f04f 0c01 	mov.w	ip, #1
   bc9aa:	e7f6      	b.n	bc99a <_strtod_l+0x28a>
   bc9ac:	000bf394 	.word	0x000bf394
   bc9b0:	000bf1cc 	.word	0x000bf1cc
   bc9b4:	7ff00000 	.word	0x7ff00000
   bc9b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc9ba:	1c51      	adds	r1, r2, #1
   bc9bc:	9117      	str	r1, [sp, #92]	; 0x5c
   bc9be:	7852      	ldrb	r2, [r2, #1]
   bc9c0:	2a30      	cmp	r2, #48	; 0x30
   bc9c2:	d0f9      	beq.n	bc9b8 <_strtod_l+0x2a8>
   bc9c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bc9c8:	2908      	cmp	r1, #8
   bc9ca:	f63f af79 	bhi.w	bc8c0 <_strtod_l+0x1b0>
   bc9ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bc9d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc9d4:	9206      	str	r2, [sp, #24]
   bc9d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc9d8:	1c51      	adds	r1, r2, #1
   bc9da:	9117      	str	r1, [sp, #92]	; 0x5c
   bc9dc:	7852      	ldrb	r2, [r2, #1]
   bc9de:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bc9e2:	2e09      	cmp	r6, #9
   bc9e4:	d937      	bls.n	bca56 <_strtod_l+0x346>
   bc9e6:	9e06      	ldr	r6, [sp, #24]
   bc9e8:	1b89      	subs	r1, r1, r6
   bc9ea:	2908      	cmp	r1, #8
   bc9ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bc9f0:	dc02      	bgt.n	bc9f8 <_strtod_l+0x2e8>
   bc9f2:	4576      	cmp	r6, lr
   bc9f4:	bfa8      	it	ge
   bc9f6:	4676      	movge	r6, lr
   bc9f8:	f1bc 0f00 	cmp.w	ip, #0
   bc9fc:	d000      	beq.n	bca00 <_strtod_l+0x2f0>
   bc9fe:	4276      	negs	r6, r6
   bca00:	2d00      	cmp	r5, #0
   bca02:	d14d      	bne.n	bcaa0 <_strtod_l+0x390>
   bca04:	9904      	ldr	r1, [sp, #16]
   bca06:	4301      	orrs	r1, r0
   bca08:	f47f aec6 	bne.w	bc798 <_strtod_l+0x88>
   bca0c:	2b00      	cmp	r3, #0
   bca0e:	f47f aee1 	bne.w	bc7d4 <_strtod_l+0xc4>
   bca12:	2a69      	cmp	r2, #105	; 0x69
   bca14:	d027      	beq.n	bca66 <_strtod_l+0x356>
   bca16:	dc24      	bgt.n	bca62 <_strtod_l+0x352>
   bca18:	2a49      	cmp	r2, #73	; 0x49
   bca1a:	d024      	beq.n	bca66 <_strtod_l+0x356>
   bca1c:	2a4e      	cmp	r2, #78	; 0x4e
   bca1e:	f47f aed9 	bne.w	bc7d4 <_strtod_l+0xc4>
   bca22:	499f      	ldr	r1, [pc, #636]	; (bcca0 <_strtod_l+0x590>)
   bca24:	a817      	add	r0, sp, #92	; 0x5c
   bca26:	f001 f883 	bl	bdb30 <__match>
   bca2a:	2800      	cmp	r0, #0
   bca2c:	f43f aed2 	beq.w	bc7d4 <_strtod_l+0xc4>
   bca30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bca32:	781b      	ldrb	r3, [r3, #0]
   bca34:	2b28      	cmp	r3, #40	; 0x28
   bca36:	d12d      	bne.n	bca94 <_strtod_l+0x384>
   bca38:	499a      	ldr	r1, [pc, #616]	; (bcca4 <_strtod_l+0x594>)
   bca3a:	aa1a      	add	r2, sp, #104	; 0x68
   bca3c:	a817      	add	r0, sp, #92	; 0x5c
   bca3e:	f001 f88b 	bl	bdb58 <__hexnan>
   bca42:	2805      	cmp	r0, #5
   bca44:	d126      	bne.n	bca94 <_strtod_l+0x384>
   bca46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bca48:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bca4c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bca50:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bca54:	e6a0      	b.n	bc798 <_strtod_l+0x88>
   bca56:	210a      	movs	r1, #10
   bca58:	fb01 2e0e 	mla	lr, r1, lr, r2
   bca5c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bca60:	e7b9      	b.n	bc9d6 <_strtod_l+0x2c6>
   bca62:	2a6e      	cmp	r2, #110	; 0x6e
   bca64:	e7db      	b.n	bca1e <_strtod_l+0x30e>
   bca66:	4990      	ldr	r1, [pc, #576]	; (bcca8 <_strtod_l+0x598>)
   bca68:	a817      	add	r0, sp, #92	; 0x5c
   bca6a:	f001 f861 	bl	bdb30 <__match>
   bca6e:	2800      	cmp	r0, #0
   bca70:	f43f aeb0 	beq.w	bc7d4 <_strtod_l+0xc4>
   bca74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bca76:	498d      	ldr	r1, [pc, #564]	; (bccac <_strtod_l+0x59c>)
   bca78:	3b01      	subs	r3, #1
   bca7a:	a817      	add	r0, sp, #92	; 0x5c
   bca7c:	9317      	str	r3, [sp, #92]	; 0x5c
   bca7e:	f001 f857 	bl	bdb30 <__match>
   bca82:	b910      	cbnz	r0, bca8a <_strtod_l+0x37a>
   bca84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bca86:	3301      	adds	r3, #1
   bca88:	9317      	str	r3, [sp, #92]	; 0x5c
   bca8a:	f8df b230 	ldr.w	fp, [pc, #560]	; bccbc <_strtod_l+0x5ac>
   bca8e:	f04f 0a00 	mov.w	sl, #0
   bca92:	e681      	b.n	bc798 <_strtod_l+0x88>
   bca94:	4886      	ldr	r0, [pc, #536]	; (bccb0 <_strtod_l+0x5a0>)
   bca96:	f001 fde3 	bl	be660 <nan>
   bca9a:	ec5b ab10 	vmov	sl, fp, d0
   bca9e:	e67b      	b.n	bc798 <_strtod_l+0x88>
   bcaa0:	9b05      	ldr	r3, [sp, #20]
   bcaa2:	9807      	ldr	r0, [sp, #28]
   bcaa4:	1af3      	subs	r3, r6, r3
   bcaa6:	2f00      	cmp	r7, #0
   bcaa8:	bf08      	it	eq
   bcaaa:	462f      	moveq	r7, r5
   bcaac:	2d10      	cmp	r5, #16
   bcaae:	9306      	str	r3, [sp, #24]
   bcab0:	46a8      	mov	r8, r5
   bcab2:	bfa8      	it	ge
   bcab4:	f04f 0810 	movge.w	r8, #16
   bcab8:	f7ff f98c 	bl	bbdd4 <__aeabi_ui2d>
   bcabc:	2d09      	cmp	r5, #9
   bcabe:	4682      	mov	sl, r0
   bcac0:	468b      	mov	fp, r1
   bcac2:	dd13      	ble.n	bcaec <_strtod_l+0x3dc>
   bcac4:	4b7b      	ldr	r3, [pc, #492]	; (bccb4 <_strtod_l+0x5a4>)
   bcac6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bcaca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bcace:	f7ff f9fb 	bl	bbec8 <__aeabi_dmul>
   bcad2:	4682      	mov	sl, r0
   bcad4:	4648      	mov	r0, r9
   bcad6:	468b      	mov	fp, r1
   bcad8:	f7ff f97c 	bl	bbdd4 <__aeabi_ui2d>
   bcadc:	4602      	mov	r2, r0
   bcade:	460b      	mov	r3, r1
   bcae0:	4650      	mov	r0, sl
   bcae2:	4659      	mov	r1, fp
   bcae4:	f7ff f83a 	bl	bbb5c <__adddf3>
   bcae8:	4682      	mov	sl, r0
   bcaea:	468b      	mov	fp, r1
   bcaec:	2d0f      	cmp	r5, #15
   bcaee:	dc38      	bgt.n	bcb62 <_strtod_l+0x452>
   bcaf0:	9b06      	ldr	r3, [sp, #24]
   bcaf2:	2b00      	cmp	r3, #0
   bcaf4:	f43f ae50 	beq.w	bc798 <_strtod_l+0x88>
   bcaf8:	dd24      	ble.n	bcb44 <_strtod_l+0x434>
   bcafa:	2b16      	cmp	r3, #22
   bcafc:	dc0b      	bgt.n	bcb16 <_strtod_l+0x406>
   bcafe:	496d      	ldr	r1, [pc, #436]	; (bccb4 <_strtod_l+0x5a4>)
   bcb00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bcb04:	e9d1 0100 	ldrd	r0, r1, [r1]
   bcb08:	4652      	mov	r2, sl
   bcb0a:	465b      	mov	r3, fp
   bcb0c:	f7ff f9dc 	bl	bbec8 <__aeabi_dmul>
   bcb10:	4682      	mov	sl, r0
   bcb12:	468b      	mov	fp, r1
   bcb14:	e640      	b.n	bc798 <_strtod_l+0x88>
   bcb16:	9a06      	ldr	r2, [sp, #24]
   bcb18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bcb1c:	4293      	cmp	r3, r2
   bcb1e:	db20      	blt.n	bcb62 <_strtod_l+0x452>
   bcb20:	4c64      	ldr	r4, [pc, #400]	; (bccb4 <_strtod_l+0x5a4>)
   bcb22:	f1c5 050f 	rsb	r5, r5, #15
   bcb26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bcb2a:	4652      	mov	r2, sl
   bcb2c:	465b      	mov	r3, fp
   bcb2e:	e9d1 0100 	ldrd	r0, r1, [r1]
   bcb32:	f7ff f9c9 	bl	bbec8 <__aeabi_dmul>
   bcb36:	9b06      	ldr	r3, [sp, #24]
   bcb38:	1b5d      	subs	r5, r3, r5
   bcb3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bcb3e:	e9d4 2300 	ldrd	r2, r3, [r4]
   bcb42:	e7e3      	b.n	bcb0c <_strtod_l+0x3fc>
   bcb44:	9b06      	ldr	r3, [sp, #24]
   bcb46:	3316      	adds	r3, #22
   bcb48:	db0b      	blt.n	bcb62 <_strtod_l+0x452>
   bcb4a:	9b05      	ldr	r3, [sp, #20]
   bcb4c:	1b9e      	subs	r6, r3, r6
   bcb4e:	4b59      	ldr	r3, [pc, #356]	; (bccb4 <_strtod_l+0x5a4>)
   bcb50:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bcb54:	e9d6 2300 	ldrd	r2, r3, [r6]
   bcb58:	4650      	mov	r0, sl
   bcb5a:	4659      	mov	r1, fp
   bcb5c:	f7ff fade 	bl	bc11c <__aeabi_ddiv>
   bcb60:	e7d6      	b.n	bcb10 <_strtod_l+0x400>
   bcb62:	9b06      	ldr	r3, [sp, #24]
   bcb64:	eba5 0808 	sub.w	r8, r5, r8
   bcb68:	4498      	add	r8, r3
   bcb6a:	f1b8 0f00 	cmp.w	r8, #0
   bcb6e:	dd74      	ble.n	bcc5a <_strtod_l+0x54a>
   bcb70:	f018 030f 	ands.w	r3, r8, #15
   bcb74:	d00a      	beq.n	bcb8c <_strtod_l+0x47c>
   bcb76:	494f      	ldr	r1, [pc, #316]	; (bccb4 <_strtod_l+0x5a4>)
   bcb78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bcb7c:	4652      	mov	r2, sl
   bcb7e:	465b      	mov	r3, fp
   bcb80:	e9d1 0100 	ldrd	r0, r1, [r1]
   bcb84:	f7ff f9a0 	bl	bbec8 <__aeabi_dmul>
   bcb88:	4682      	mov	sl, r0
   bcb8a:	468b      	mov	fp, r1
   bcb8c:	f038 080f 	bics.w	r8, r8, #15
   bcb90:	d04f      	beq.n	bcc32 <_strtod_l+0x522>
   bcb92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bcb96:	dd22      	ble.n	bcbde <_strtod_l+0x4ce>
   bcb98:	2500      	movs	r5, #0
   bcb9a:	462e      	mov	r6, r5
   bcb9c:	9507      	str	r5, [sp, #28]
   bcb9e:	9505      	str	r5, [sp, #20]
   bcba0:	2322      	movs	r3, #34	; 0x22
   bcba2:	f8df b118 	ldr.w	fp, [pc, #280]	; bccbc <_strtod_l+0x5ac>
   bcba6:	6023      	str	r3, [r4, #0]
   bcba8:	f04f 0a00 	mov.w	sl, #0
   bcbac:	9b07      	ldr	r3, [sp, #28]
   bcbae:	2b00      	cmp	r3, #0
   bcbb0:	f43f adf2 	beq.w	bc798 <_strtod_l+0x88>
   bcbb4:	9918      	ldr	r1, [sp, #96]	; 0x60
   bcbb6:	4620      	mov	r0, r4
   bcbb8:	f001 f8c0 	bl	bdd3c <_Bfree>
   bcbbc:	9905      	ldr	r1, [sp, #20]
   bcbbe:	4620      	mov	r0, r4
   bcbc0:	f001 f8bc 	bl	bdd3c <_Bfree>
   bcbc4:	4631      	mov	r1, r6
   bcbc6:	4620      	mov	r0, r4
   bcbc8:	f001 f8b8 	bl	bdd3c <_Bfree>
   bcbcc:	9907      	ldr	r1, [sp, #28]
   bcbce:	4620      	mov	r0, r4
   bcbd0:	f001 f8b4 	bl	bdd3c <_Bfree>
   bcbd4:	4629      	mov	r1, r5
   bcbd6:	4620      	mov	r0, r4
   bcbd8:	f001 f8b0 	bl	bdd3c <_Bfree>
   bcbdc:	e5dc      	b.n	bc798 <_strtod_l+0x88>
   bcbde:	4b36      	ldr	r3, [pc, #216]	; (bccb8 <_strtod_l+0x5a8>)
   bcbe0:	9304      	str	r3, [sp, #16]
   bcbe2:	2300      	movs	r3, #0
   bcbe4:	ea4f 1828 	mov.w	r8, r8, asr #4
   bcbe8:	4650      	mov	r0, sl
   bcbea:	4659      	mov	r1, fp
   bcbec:	4699      	mov	r9, r3
   bcbee:	f1b8 0f01 	cmp.w	r8, #1
   bcbf2:	dc21      	bgt.n	bcc38 <_strtod_l+0x528>
   bcbf4:	b10b      	cbz	r3, bcbfa <_strtod_l+0x4ea>
   bcbf6:	4682      	mov	sl, r0
   bcbf8:	468b      	mov	fp, r1
   bcbfa:	4b2f      	ldr	r3, [pc, #188]	; (bccb8 <_strtod_l+0x5a8>)
   bcbfc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bcc00:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bcc04:	4652      	mov	r2, sl
   bcc06:	465b      	mov	r3, fp
   bcc08:	e9d9 0100 	ldrd	r0, r1, [r9]
   bcc0c:	f7ff f95c 	bl	bbec8 <__aeabi_dmul>
   bcc10:	4b2a      	ldr	r3, [pc, #168]	; (bccbc <_strtod_l+0x5ac>)
   bcc12:	460a      	mov	r2, r1
   bcc14:	400b      	ands	r3, r1
   bcc16:	492a      	ldr	r1, [pc, #168]	; (bccc0 <_strtod_l+0x5b0>)
   bcc18:	428b      	cmp	r3, r1
   bcc1a:	4682      	mov	sl, r0
   bcc1c:	d8bc      	bhi.n	bcb98 <_strtod_l+0x488>
   bcc1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bcc22:	428b      	cmp	r3, r1
   bcc24:	bf86      	itte	hi
   bcc26:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bccc4 <_strtod_l+0x5b4>
   bcc2a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bcc2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bcc32:	2300      	movs	r3, #0
   bcc34:	9304      	str	r3, [sp, #16]
   bcc36:	e084      	b.n	bcd42 <_strtod_l+0x632>
   bcc38:	f018 0f01 	tst.w	r8, #1
   bcc3c:	d005      	beq.n	bcc4a <_strtod_l+0x53a>
   bcc3e:	9b04      	ldr	r3, [sp, #16]
   bcc40:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcc44:	f7ff f940 	bl	bbec8 <__aeabi_dmul>
   bcc48:	2301      	movs	r3, #1
   bcc4a:	9a04      	ldr	r2, [sp, #16]
   bcc4c:	3208      	adds	r2, #8
   bcc4e:	f109 0901 	add.w	r9, r9, #1
   bcc52:	ea4f 0868 	mov.w	r8, r8, asr #1
   bcc56:	9204      	str	r2, [sp, #16]
   bcc58:	e7c9      	b.n	bcbee <_strtod_l+0x4de>
   bcc5a:	d0ea      	beq.n	bcc32 <_strtod_l+0x522>
   bcc5c:	f1c8 0800 	rsb	r8, r8, #0
   bcc60:	f018 020f 	ands.w	r2, r8, #15
   bcc64:	d00a      	beq.n	bcc7c <_strtod_l+0x56c>
   bcc66:	4b13      	ldr	r3, [pc, #76]	; (bccb4 <_strtod_l+0x5a4>)
   bcc68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bcc6c:	4650      	mov	r0, sl
   bcc6e:	4659      	mov	r1, fp
   bcc70:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcc74:	f7ff fa52 	bl	bc11c <__aeabi_ddiv>
   bcc78:	4682      	mov	sl, r0
   bcc7a:	468b      	mov	fp, r1
   bcc7c:	ea5f 1828 	movs.w	r8, r8, asr #4
   bcc80:	d0d7      	beq.n	bcc32 <_strtod_l+0x522>
   bcc82:	f1b8 0f1f 	cmp.w	r8, #31
   bcc86:	dd1f      	ble.n	bccc8 <_strtod_l+0x5b8>
   bcc88:	2500      	movs	r5, #0
   bcc8a:	462e      	mov	r6, r5
   bcc8c:	9507      	str	r5, [sp, #28]
   bcc8e:	9505      	str	r5, [sp, #20]
   bcc90:	2322      	movs	r3, #34	; 0x22
   bcc92:	f04f 0a00 	mov.w	sl, #0
   bcc96:	f04f 0b00 	mov.w	fp, #0
   bcc9a:	6023      	str	r3, [r4, #0]
   bcc9c:	e786      	b.n	bcbac <_strtod_l+0x49c>
   bcc9e:	bf00      	nop
   bcca0:	000bf1c6 	.word	0x000bf1c6
   bcca4:	000bf1e0 	.word	0x000bf1e0
   bcca8:	000bf1bd 	.word	0x000bf1bd
   bccac:	000bf1c0 	.word	0x000bf1c0
   bccb0:	000bec3a 	.word	0x000bec3a
   bccb4:	000bf430 	.word	0x000bf430
   bccb8:	000bf408 	.word	0x000bf408
   bccbc:	7ff00000 	.word	0x7ff00000
   bccc0:	7ca00000 	.word	0x7ca00000
   bccc4:	7fefffff 	.word	0x7fefffff
   bccc8:	f018 0310 	ands.w	r3, r8, #16
   bcccc:	bf18      	it	ne
   bccce:	236a      	movne	r3, #106	; 0x6a
   bccd0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bd080 <_strtod_l+0x970>
   bccd4:	9304      	str	r3, [sp, #16]
   bccd6:	4650      	mov	r0, sl
   bccd8:	4659      	mov	r1, fp
   bccda:	2300      	movs	r3, #0
   bccdc:	f018 0f01 	tst.w	r8, #1
   bcce0:	d004      	beq.n	bccec <_strtod_l+0x5dc>
   bcce2:	e9d9 2300 	ldrd	r2, r3, [r9]
   bcce6:	f7ff f8ef 	bl	bbec8 <__aeabi_dmul>
   bccea:	2301      	movs	r3, #1
   bccec:	ea5f 0868 	movs.w	r8, r8, asr #1
   bccf0:	f109 0908 	add.w	r9, r9, #8
   bccf4:	d1f2      	bne.n	bccdc <_strtod_l+0x5cc>
   bccf6:	b10b      	cbz	r3, bccfc <_strtod_l+0x5ec>
   bccf8:	4682      	mov	sl, r0
   bccfa:	468b      	mov	fp, r1
   bccfc:	9b04      	ldr	r3, [sp, #16]
   bccfe:	b1c3      	cbz	r3, bcd32 <_strtod_l+0x622>
   bcd00:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bcd04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bcd08:	2b00      	cmp	r3, #0
   bcd0a:	4659      	mov	r1, fp
   bcd0c:	dd11      	ble.n	bcd32 <_strtod_l+0x622>
   bcd0e:	2b1f      	cmp	r3, #31
   bcd10:	f340 8124 	ble.w	bcf5c <_strtod_l+0x84c>
   bcd14:	2b34      	cmp	r3, #52	; 0x34
   bcd16:	bfde      	ittt	le
   bcd18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bcd1c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bcd20:	fa03 f202 	lslle.w	r2, r3, r2
   bcd24:	f04f 0a00 	mov.w	sl, #0
   bcd28:	bfcc      	ite	gt
   bcd2a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bcd2e:	ea02 0b01 	andle.w	fp, r2, r1
   bcd32:	2200      	movs	r2, #0
   bcd34:	2300      	movs	r3, #0
   bcd36:	4650      	mov	r0, sl
   bcd38:	4659      	mov	r1, fp
   bcd3a:	f7ff fb2d 	bl	bc398 <__aeabi_dcmpeq>
   bcd3e:	2800      	cmp	r0, #0
   bcd40:	d1a2      	bne.n	bcc88 <_strtod_l+0x578>
   bcd42:	9b07      	ldr	r3, [sp, #28]
   bcd44:	9300      	str	r3, [sp, #0]
   bcd46:	9908      	ldr	r1, [sp, #32]
   bcd48:	462b      	mov	r3, r5
   bcd4a:	463a      	mov	r2, r7
   bcd4c:	4620      	mov	r0, r4
   bcd4e:	f001 f85d 	bl	bde0c <__s2b>
   bcd52:	9007      	str	r0, [sp, #28]
   bcd54:	2800      	cmp	r0, #0
   bcd56:	f43f af1f 	beq.w	bcb98 <_strtod_l+0x488>
   bcd5a:	9b05      	ldr	r3, [sp, #20]
   bcd5c:	1b9e      	subs	r6, r3, r6
   bcd5e:	9b06      	ldr	r3, [sp, #24]
   bcd60:	2b00      	cmp	r3, #0
   bcd62:	bfb4      	ite	lt
   bcd64:	4633      	movlt	r3, r6
   bcd66:	2300      	movge	r3, #0
   bcd68:	930c      	str	r3, [sp, #48]	; 0x30
   bcd6a:	9b06      	ldr	r3, [sp, #24]
   bcd6c:	2500      	movs	r5, #0
   bcd6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bcd72:	9312      	str	r3, [sp, #72]	; 0x48
   bcd74:	462e      	mov	r6, r5
   bcd76:	9b07      	ldr	r3, [sp, #28]
   bcd78:	4620      	mov	r0, r4
   bcd7a:	6859      	ldr	r1, [r3, #4]
   bcd7c:	f000 ff9e 	bl	bdcbc <_Balloc>
   bcd80:	9005      	str	r0, [sp, #20]
   bcd82:	2800      	cmp	r0, #0
   bcd84:	f43f af0c 	beq.w	bcba0 <_strtod_l+0x490>
   bcd88:	9b07      	ldr	r3, [sp, #28]
   bcd8a:	691a      	ldr	r2, [r3, #16]
   bcd8c:	3202      	adds	r2, #2
   bcd8e:	f103 010c 	add.w	r1, r3, #12
   bcd92:	0092      	lsls	r2, r2, #2
   bcd94:	300c      	adds	r0, #12
   bcd96:	f7ff fbef 	bl	bc578 <memcpy>
   bcd9a:	ec4b ab10 	vmov	d0, sl, fp
   bcd9e:	aa1a      	add	r2, sp, #104	; 0x68
   bcda0:	a919      	add	r1, sp, #100	; 0x64
   bcda2:	4620      	mov	r0, r4
   bcda4:	f001 fb78 	bl	be498 <__d2b>
   bcda8:	ec4b ab18 	vmov	d8, sl, fp
   bcdac:	9018      	str	r0, [sp, #96]	; 0x60
   bcdae:	2800      	cmp	r0, #0
   bcdb0:	f43f aef6 	beq.w	bcba0 <_strtod_l+0x490>
   bcdb4:	2101      	movs	r1, #1
   bcdb6:	4620      	mov	r0, r4
   bcdb8:	f001 f8c2 	bl	bdf40 <__i2b>
   bcdbc:	4606      	mov	r6, r0
   bcdbe:	2800      	cmp	r0, #0
   bcdc0:	f43f aeee 	beq.w	bcba0 <_strtod_l+0x490>
   bcdc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bcdc6:	9904      	ldr	r1, [sp, #16]
   bcdc8:	2b00      	cmp	r3, #0
   bcdca:	bfab      	itete	ge
   bcdcc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bcdce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bcdd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bcdd2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bcdd6:	bfac      	ite	ge
   bcdd8:	eb03 0902 	addge.w	r9, r3, r2
   bcddc:	1ad7      	sublt	r7, r2, r3
   bcdde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bcde0:	eba3 0801 	sub.w	r8, r3, r1
   bcde4:	4490      	add	r8, r2
   bcde6:	4ba1      	ldr	r3, [pc, #644]	; (bd06c <_strtod_l+0x95c>)
   bcde8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bcdec:	4598      	cmp	r8, r3
   bcdee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bcdf2:	f280 80c7 	bge.w	bcf84 <_strtod_l+0x874>
   bcdf6:	eba3 0308 	sub.w	r3, r3, r8
   bcdfa:	2b1f      	cmp	r3, #31
   bcdfc:	eba2 0203 	sub.w	r2, r2, r3
   bce00:	f04f 0101 	mov.w	r1, #1
   bce04:	f300 80b1 	bgt.w	bcf6a <_strtod_l+0x85a>
   bce08:	fa01 f303 	lsl.w	r3, r1, r3
   bce0c:	930d      	str	r3, [sp, #52]	; 0x34
   bce0e:	2300      	movs	r3, #0
   bce10:	9308      	str	r3, [sp, #32]
   bce12:	eb09 0802 	add.w	r8, r9, r2
   bce16:	9b04      	ldr	r3, [sp, #16]
   bce18:	45c1      	cmp	r9, r8
   bce1a:	4417      	add	r7, r2
   bce1c:	441f      	add	r7, r3
   bce1e:	464b      	mov	r3, r9
   bce20:	bfa8      	it	ge
   bce22:	4643      	movge	r3, r8
   bce24:	42bb      	cmp	r3, r7
   bce26:	bfa8      	it	ge
   bce28:	463b      	movge	r3, r7
   bce2a:	2b00      	cmp	r3, #0
   bce2c:	bfc2      	ittt	gt
   bce2e:	eba8 0803 	subgt.w	r8, r8, r3
   bce32:	1aff      	subgt	r7, r7, r3
   bce34:	eba9 0903 	subgt.w	r9, r9, r3
   bce38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bce3a:	2b00      	cmp	r3, #0
   bce3c:	dd17      	ble.n	bce6e <_strtod_l+0x75e>
   bce3e:	4631      	mov	r1, r6
   bce40:	461a      	mov	r2, r3
   bce42:	4620      	mov	r0, r4
   bce44:	f001 f93c 	bl	be0c0 <__pow5mult>
   bce48:	4606      	mov	r6, r0
   bce4a:	2800      	cmp	r0, #0
   bce4c:	f43f aea8 	beq.w	bcba0 <_strtod_l+0x490>
   bce50:	4601      	mov	r1, r0
   bce52:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bce54:	4620      	mov	r0, r4
   bce56:	f001 f889 	bl	bdf6c <__multiply>
   bce5a:	900b      	str	r0, [sp, #44]	; 0x2c
   bce5c:	2800      	cmp	r0, #0
   bce5e:	f43f ae9f 	beq.w	bcba0 <_strtod_l+0x490>
   bce62:	9918      	ldr	r1, [sp, #96]	; 0x60
   bce64:	4620      	mov	r0, r4
   bce66:	f000 ff69 	bl	bdd3c <_Bfree>
   bce6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bce6c:	9318      	str	r3, [sp, #96]	; 0x60
   bce6e:	f1b8 0f00 	cmp.w	r8, #0
   bce72:	f300 808c 	bgt.w	bcf8e <_strtod_l+0x87e>
   bce76:	9b06      	ldr	r3, [sp, #24]
   bce78:	2b00      	cmp	r3, #0
   bce7a:	dd08      	ble.n	bce8e <_strtod_l+0x77e>
   bce7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bce7e:	9905      	ldr	r1, [sp, #20]
   bce80:	4620      	mov	r0, r4
   bce82:	f001 f91d 	bl	be0c0 <__pow5mult>
   bce86:	9005      	str	r0, [sp, #20]
   bce88:	2800      	cmp	r0, #0
   bce8a:	f43f ae89 	beq.w	bcba0 <_strtod_l+0x490>
   bce8e:	2f00      	cmp	r7, #0
   bce90:	dd08      	ble.n	bcea4 <_strtod_l+0x794>
   bce92:	9905      	ldr	r1, [sp, #20]
   bce94:	463a      	mov	r2, r7
   bce96:	4620      	mov	r0, r4
   bce98:	f001 f96c 	bl	be174 <__lshift>
   bce9c:	9005      	str	r0, [sp, #20]
   bce9e:	2800      	cmp	r0, #0
   bcea0:	f43f ae7e 	beq.w	bcba0 <_strtod_l+0x490>
   bcea4:	f1b9 0f00 	cmp.w	r9, #0
   bcea8:	dd08      	ble.n	bcebc <_strtod_l+0x7ac>
   bceaa:	4631      	mov	r1, r6
   bceac:	464a      	mov	r2, r9
   bceae:	4620      	mov	r0, r4
   bceb0:	f001 f960 	bl	be174 <__lshift>
   bceb4:	4606      	mov	r6, r0
   bceb6:	2800      	cmp	r0, #0
   bceb8:	f43f ae72 	beq.w	bcba0 <_strtod_l+0x490>
   bcebc:	9a05      	ldr	r2, [sp, #20]
   bcebe:	9918      	ldr	r1, [sp, #96]	; 0x60
   bcec0:	4620      	mov	r0, r4
   bcec2:	f001 f9e3 	bl	be28c <__mdiff>
   bcec6:	4605      	mov	r5, r0
   bcec8:	2800      	cmp	r0, #0
   bceca:	f43f ae69 	beq.w	bcba0 <_strtod_l+0x490>
   bcece:	68c3      	ldr	r3, [r0, #12]
   bced0:	930b      	str	r3, [sp, #44]	; 0x2c
   bced2:	2300      	movs	r3, #0
   bced4:	60c3      	str	r3, [r0, #12]
   bced6:	4631      	mov	r1, r6
   bced8:	f001 f9bc 	bl	be254 <__mcmp>
   bcedc:	2800      	cmp	r0, #0
   bcede:	da60      	bge.n	bcfa2 <_strtod_l+0x892>
   bcee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcee2:	ea53 030a 	orrs.w	r3, r3, sl
   bcee6:	f040 8082 	bne.w	bcfee <_strtod_l+0x8de>
   bceea:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bceee:	2b00      	cmp	r3, #0
   bcef0:	d17d      	bne.n	bcfee <_strtod_l+0x8de>
   bcef2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bcef6:	0d1b      	lsrs	r3, r3, #20
   bcef8:	051b      	lsls	r3, r3, #20
   bcefa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bcefe:	d976      	bls.n	bcfee <_strtod_l+0x8de>
   bcf00:	696b      	ldr	r3, [r5, #20]
   bcf02:	b913      	cbnz	r3, bcf0a <_strtod_l+0x7fa>
   bcf04:	692b      	ldr	r3, [r5, #16]
   bcf06:	2b01      	cmp	r3, #1
   bcf08:	dd71      	ble.n	bcfee <_strtod_l+0x8de>
   bcf0a:	4629      	mov	r1, r5
   bcf0c:	2201      	movs	r2, #1
   bcf0e:	4620      	mov	r0, r4
   bcf10:	f001 f930 	bl	be174 <__lshift>
   bcf14:	4631      	mov	r1, r6
   bcf16:	4605      	mov	r5, r0
   bcf18:	f001 f99c 	bl	be254 <__mcmp>
   bcf1c:	2800      	cmp	r0, #0
   bcf1e:	dd66      	ble.n	bcfee <_strtod_l+0x8de>
   bcf20:	9904      	ldr	r1, [sp, #16]
   bcf22:	4a53      	ldr	r2, [pc, #332]	; (bd070 <_strtod_l+0x960>)
   bcf24:	465b      	mov	r3, fp
   bcf26:	2900      	cmp	r1, #0
   bcf28:	f000 8081 	beq.w	bd02e <_strtod_l+0x91e>
   bcf2c:	ea02 010b 	and.w	r1, r2, fp
   bcf30:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bcf34:	dc7b      	bgt.n	bd02e <_strtod_l+0x91e>
   bcf36:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bcf3a:	f77f aea9 	ble.w	bcc90 <_strtod_l+0x580>
   bcf3e:	4b4d      	ldr	r3, [pc, #308]	; (bd074 <_strtod_l+0x964>)
   bcf40:	4650      	mov	r0, sl
   bcf42:	4659      	mov	r1, fp
   bcf44:	2200      	movs	r2, #0
   bcf46:	f7fe ffbf 	bl	bbec8 <__aeabi_dmul>
   bcf4a:	460b      	mov	r3, r1
   bcf4c:	4303      	orrs	r3, r0
   bcf4e:	bf08      	it	eq
   bcf50:	2322      	moveq	r3, #34	; 0x22
   bcf52:	4682      	mov	sl, r0
   bcf54:	468b      	mov	fp, r1
   bcf56:	bf08      	it	eq
   bcf58:	6023      	streq	r3, [r4, #0]
   bcf5a:	e62b      	b.n	bcbb4 <_strtod_l+0x4a4>
   bcf5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bcf60:	fa02 f303 	lsl.w	r3, r2, r3
   bcf64:	ea03 0a0a 	and.w	sl, r3, sl
   bcf68:	e6e3      	b.n	bcd32 <_strtod_l+0x622>
   bcf6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bcf6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bcf72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bcf76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bcf7a:	fa01 f308 	lsl.w	r3, r1, r8
   bcf7e:	9308      	str	r3, [sp, #32]
   bcf80:	910d      	str	r1, [sp, #52]	; 0x34
   bcf82:	e746      	b.n	bce12 <_strtod_l+0x702>
   bcf84:	2300      	movs	r3, #0
   bcf86:	9308      	str	r3, [sp, #32]
   bcf88:	2301      	movs	r3, #1
   bcf8a:	930d      	str	r3, [sp, #52]	; 0x34
   bcf8c:	e741      	b.n	bce12 <_strtod_l+0x702>
   bcf8e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bcf90:	4642      	mov	r2, r8
   bcf92:	4620      	mov	r0, r4
   bcf94:	f001 f8ee 	bl	be174 <__lshift>
   bcf98:	9018      	str	r0, [sp, #96]	; 0x60
   bcf9a:	2800      	cmp	r0, #0
   bcf9c:	f47f af6b 	bne.w	bce76 <_strtod_l+0x766>
   bcfa0:	e5fe      	b.n	bcba0 <_strtod_l+0x490>
   bcfa2:	465f      	mov	r7, fp
   bcfa4:	d16e      	bne.n	bd084 <_strtod_l+0x974>
   bcfa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bcfa8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bcfac:	b342      	cbz	r2, bd000 <_strtod_l+0x8f0>
   bcfae:	4a32      	ldr	r2, [pc, #200]	; (bd078 <_strtod_l+0x968>)
   bcfb0:	4293      	cmp	r3, r2
   bcfb2:	d128      	bne.n	bd006 <_strtod_l+0x8f6>
   bcfb4:	9b04      	ldr	r3, [sp, #16]
   bcfb6:	4651      	mov	r1, sl
   bcfb8:	b1eb      	cbz	r3, bcff6 <_strtod_l+0x8e6>
   bcfba:	4b2d      	ldr	r3, [pc, #180]	; (bd070 <_strtod_l+0x960>)
   bcfbc:	403b      	ands	r3, r7
   bcfbe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bcfc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bcfc6:	d819      	bhi.n	bcffc <_strtod_l+0x8ec>
   bcfc8:	0d1b      	lsrs	r3, r3, #20
   bcfca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bcfce:	fa02 f303 	lsl.w	r3, r2, r3
   bcfd2:	4299      	cmp	r1, r3
   bcfd4:	d117      	bne.n	bd006 <_strtod_l+0x8f6>
   bcfd6:	4b29      	ldr	r3, [pc, #164]	; (bd07c <_strtod_l+0x96c>)
   bcfd8:	429f      	cmp	r7, r3
   bcfda:	d102      	bne.n	bcfe2 <_strtod_l+0x8d2>
   bcfdc:	3101      	adds	r1, #1
   bcfde:	f43f addf 	beq.w	bcba0 <_strtod_l+0x490>
   bcfe2:	4b23      	ldr	r3, [pc, #140]	; (bd070 <_strtod_l+0x960>)
   bcfe4:	403b      	ands	r3, r7
   bcfe6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bcfea:	f04f 0a00 	mov.w	sl, #0
   bcfee:	9b04      	ldr	r3, [sp, #16]
   bcff0:	2b00      	cmp	r3, #0
   bcff2:	d1a4      	bne.n	bcf3e <_strtod_l+0x82e>
   bcff4:	e5de      	b.n	bcbb4 <_strtod_l+0x4a4>
   bcff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bcffa:	e7ea      	b.n	bcfd2 <_strtod_l+0x8c2>
   bcffc:	4613      	mov	r3, r2
   bcffe:	e7e8      	b.n	bcfd2 <_strtod_l+0x8c2>
   bd000:	ea53 030a 	orrs.w	r3, r3, sl
   bd004:	d08c      	beq.n	bcf20 <_strtod_l+0x810>
   bd006:	9b08      	ldr	r3, [sp, #32]
   bd008:	b1db      	cbz	r3, bd042 <_strtod_l+0x932>
   bd00a:	423b      	tst	r3, r7
   bd00c:	d0ef      	beq.n	bcfee <_strtod_l+0x8de>
   bd00e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bd010:	9a04      	ldr	r2, [sp, #16]
   bd012:	4650      	mov	r0, sl
   bd014:	4659      	mov	r1, fp
   bd016:	b1c3      	cbz	r3, bd04a <_strtod_l+0x93a>
   bd018:	f7ff fb5c 	bl	bc6d4 <sulp>
   bd01c:	4602      	mov	r2, r0
   bd01e:	460b      	mov	r3, r1
   bd020:	ec51 0b18 	vmov	r0, r1, d8
   bd024:	f7fe fd9a 	bl	bbb5c <__adddf3>
   bd028:	4682      	mov	sl, r0
   bd02a:	468b      	mov	fp, r1
   bd02c:	e7df      	b.n	bcfee <_strtod_l+0x8de>
   bd02e:	4013      	ands	r3, r2
   bd030:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bd034:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bd038:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bd03c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bd040:	e7d5      	b.n	bcfee <_strtod_l+0x8de>
   bd042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bd044:	ea13 0f0a 	tst.w	r3, sl
   bd048:	e7e0      	b.n	bd00c <_strtod_l+0x8fc>
   bd04a:	f7ff fb43 	bl	bc6d4 <sulp>
   bd04e:	4602      	mov	r2, r0
   bd050:	460b      	mov	r3, r1
   bd052:	ec51 0b18 	vmov	r0, r1, d8
   bd056:	f7fe fd7f 	bl	bbb58 <__aeabi_dsub>
   bd05a:	2200      	movs	r2, #0
   bd05c:	2300      	movs	r3, #0
   bd05e:	4682      	mov	sl, r0
   bd060:	468b      	mov	fp, r1
   bd062:	f7ff f999 	bl	bc398 <__aeabi_dcmpeq>
   bd066:	2800      	cmp	r0, #0
   bd068:	d0c1      	beq.n	bcfee <_strtod_l+0x8de>
   bd06a:	e611      	b.n	bcc90 <_strtod_l+0x580>
   bd06c:	fffffc02 	.word	0xfffffc02
   bd070:	7ff00000 	.word	0x7ff00000
   bd074:	39500000 	.word	0x39500000
   bd078:	000fffff 	.word	0x000fffff
   bd07c:	7fefffff 	.word	0x7fefffff
   bd080:	000bf1f8 	.word	0x000bf1f8
   bd084:	4631      	mov	r1, r6
   bd086:	4628      	mov	r0, r5
   bd088:	f001 fa62 	bl	be550 <__ratio>
   bd08c:	ec59 8b10 	vmov	r8, r9, d0
   bd090:	ee10 0a10 	vmov	r0, s0
   bd094:	2200      	movs	r2, #0
   bd096:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bd09a:	4649      	mov	r1, r9
   bd09c:	f7ff f990 	bl	bc3c0 <__aeabi_dcmple>
   bd0a0:	2800      	cmp	r0, #0
   bd0a2:	d07a      	beq.n	bd19a <_strtod_l+0xa8a>
   bd0a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bd0a6:	2b00      	cmp	r3, #0
   bd0a8:	d04a      	beq.n	bd140 <_strtod_l+0xa30>
   bd0aa:	4b95      	ldr	r3, [pc, #596]	; (bd300 <_strtod_l+0xbf0>)
   bd0ac:	2200      	movs	r2, #0
   bd0ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bd0b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; bd300 <_strtod_l+0xbf0>
   bd0b6:	f04f 0800 	mov.w	r8, #0
   bd0ba:	4b92      	ldr	r3, [pc, #584]	; (bd304 <_strtod_l+0xbf4>)
   bd0bc:	403b      	ands	r3, r7
   bd0be:	930d      	str	r3, [sp, #52]	; 0x34
   bd0c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bd0c2:	4b91      	ldr	r3, [pc, #580]	; (bd308 <_strtod_l+0xbf8>)
   bd0c4:	429a      	cmp	r2, r3
   bd0c6:	f040 80b0 	bne.w	bd22a <_strtod_l+0xb1a>
   bd0ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bd0ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bd0d2:	ec4b ab10 	vmov	d0, sl, fp
   bd0d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bd0da:	f001 f961 	bl	be3a0 <__ulp>
   bd0de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bd0e2:	ec53 2b10 	vmov	r2, r3, d0
   bd0e6:	f7fe feef 	bl	bbec8 <__aeabi_dmul>
   bd0ea:	4652      	mov	r2, sl
   bd0ec:	465b      	mov	r3, fp
   bd0ee:	f7fe fd35 	bl	bbb5c <__adddf3>
   bd0f2:	460b      	mov	r3, r1
   bd0f4:	4983      	ldr	r1, [pc, #524]	; (bd304 <_strtod_l+0xbf4>)
   bd0f6:	4a85      	ldr	r2, [pc, #532]	; (bd30c <_strtod_l+0xbfc>)
   bd0f8:	4019      	ands	r1, r3
   bd0fa:	4291      	cmp	r1, r2
   bd0fc:	4682      	mov	sl, r0
   bd0fe:	d960      	bls.n	bd1c2 <_strtod_l+0xab2>
   bd100:	ee18 3a90 	vmov	r3, s17
   bd104:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bd108:	4293      	cmp	r3, r2
   bd10a:	d104      	bne.n	bd116 <_strtod_l+0xa06>
   bd10c:	ee18 3a10 	vmov	r3, s16
   bd110:	3301      	adds	r3, #1
   bd112:	f43f ad45 	beq.w	bcba0 <_strtod_l+0x490>
   bd116:	f8df b200 	ldr.w	fp, [pc, #512]	; bd318 <_strtod_l+0xc08>
   bd11a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bd11e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bd120:	4620      	mov	r0, r4
   bd122:	f000 fe0b 	bl	bdd3c <_Bfree>
   bd126:	9905      	ldr	r1, [sp, #20]
   bd128:	4620      	mov	r0, r4
   bd12a:	f000 fe07 	bl	bdd3c <_Bfree>
   bd12e:	4631      	mov	r1, r6
   bd130:	4620      	mov	r0, r4
   bd132:	f000 fe03 	bl	bdd3c <_Bfree>
   bd136:	4629      	mov	r1, r5
   bd138:	4620      	mov	r0, r4
   bd13a:	f000 fdff 	bl	bdd3c <_Bfree>
   bd13e:	e61a      	b.n	bcd76 <_strtod_l+0x666>
   bd140:	f1ba 0f00 	cmp.w	sl, #0
   bd144:	d11b      	bne.n	bd17e <_strtod_l+0xa6e>
   bd146:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bd14a:	b9f3      	cbnz	r3, bd18a <_strtod_l+0xa7a>
   bd14c:	4b6c      	ldr	r3, [pc, #432]	; (bd300 <_strtod_l+0xbf0>)
   bd14e:	2200      	movs	r2, #0
   bd150:	4640      	mov	r0, r8
   bd152:	4649      	mov	r1, r9
   bd154:	f7ff f92a 	bl	bc3ac <__aeabi_dcmplt>
   bd158:	b9d0      	cbnz	r0, bd190 <_strtod_l+0xa80>
   bd15a:	4640      	mov	r0, r8
   bd15c:	4649      	mov	r1, r9
   bd15e:	4b6c      	ldr	r3, [pc, #432]	; (bd310 <_strtod_l+0xc00>)
   bd160:	2200      	movs	r2, #0
   bd162:	f7fe feb1 	bl	bbec8 <__aeabi_dmul>
   bd166:	4680      	mov	r8, r0
   bd168:	4689      	mov	r9, r1
   bd16a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bd16e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bd172:	9315      	str	r3, [sp, #84]	; 0x54
   bd174:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bd178:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bd17c:	e79d      	b.n	bd0ba <_strtod_l+0x9aa>
   bd17e:	f1ba 0f01 	cmp.w	sl, #1
   bd182:	d102      	bne.n	bd18a <_strtod_l+0xa7a>
   bd184:	2f00      	cmp	r7, #0
   bd186:	f43f ad83 	beq.w	bcc90 <_strtod_l+0x580>
   bd18a:	4b62      	ldr	r3, [pc, #392]	; (bd314 <_strtod_l+0xc04>)
   bd18c:	2200      	movs	r2, #0
   bd18e:	e78e      	b.n	bd0ae <_strtod_l+0x99e>
   bd190:	f8df 917c 	ldr.w	r9, [pc, #380]	; bd310 <_strtod_l+0xc00>
   bd194:	f04f 0800 	mov.w	r8, #0
   bd198:	e7e7      	b.n	bd16a <_strtod_l+0xa5a>
   bd19a:	4b5d      	ldr	r3, [pc, #372]	; (bd310 <_strtod_l+0xc00>)
   bd19c:	4640      	mov	r0, r8
   bd19e:	4649      	mov	r1, r9
   bd1a0:	2200      	movs	r2, #0
   bd1a2:	f7fe fe91 	bl	bbec8 <__aeabi_dmul>
   bd1a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bd1a8:	4680      	mov	r8, r0
   bd1aa:	4689      	mov	r9, r1
   bd1ac:	b933      	cbnz	r3, bd1bc <_strtod_l+0xaac>
   bd1ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bd1b2:	900e      	str	r0, [sp, #56]	; 0x38
   bd1b4:	930f      	str	r3, [sp, #60]	; 0x3c
   bd1b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bd1ba:	e7dd      	b.n	bd178 <_strtod_l+0xa68>
   bd1bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bd1c0:	e7f9      	b.n	bd1b6 <_strtod_l+0xaa6>
   bd1c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bd1c6:	9b04      	ldr	r3, [sp, #16]
   bd1c8:	2b00      	cmp	r3, #0
   bd1ca:	d1a8      	bne.n	bd11e <_strtod_l+0xa0e>
   bd1cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bd1d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bd1d2:	0d1b      	lsrs	r3, r3, #20
   bd1d4:	051b      	lsls	r3, r3, #20
   bd1d6:	429a      	cmp	r2, r3
   bd1d8:	d1a1      	bne.n	bd11e <_strtod_l+0xa0e>
   bd1da:	4640      	mov	r0, r8
   bd1dc:	4649      	mov	r1, r9
   bd1de:	f001 fa5b 	bl	be698 <__aeabi_d2lz>
   bd1e2:	f7fe fe43 	bl	bbe6c <__aeabi_l2d>
   bd1e6:	4602      	mov	r2, r0
   bd1e8:	460b      	mov	r3, r1
   bd1ea:	4640      	mov	r0, r8
   bd1ec:	4649      	mov	r1, r9
   bd1ee:	f7fe fcb3 	bl	bbb58 <__aeabi_dsub>
   bd1f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bd1f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bd1f8:	ea43 030a 	orr.w	r3, r3, sl
   bd1fc:	4313      	orrs	r3, r2
   bd1fe:	4680      	mov	r8, r0
   bd200:	4689      	mov	r9, r1
   bd202:	d055      	beq.n	bd2b0 <_strtod_l+0xba0>
   bd204:	a336      	add	r3, pc, #216	; (adr r3, bd2e0 <_strtod_l+0xbd0>)
   bd206:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd20a:	f7ff f8cf 	bl	bc3ac <__aeabi_dcmplt>
   bd20e:	2800      	cmp	r0, #0
   bd210:	f47f acd0 	bne.w	bcbb4 <_strtod_l+0x4a4>
   bd214:	a334      	add	r3, pc, #208	; (adr r3, bd2e8 <_strtod_l+0xbd8>)
   bd216:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd21a:	4640      	mov	r0, r8
   bd21c:	4649      	mov	r1, r9
   bd21e:	f7ff f8e3 	bl	bc3e8 <__aeabi_dcmpgt>
   bd222:	2800      	cmp	r0, #0
   bd224:	f43f af7b 	beq.w	bd11e <_strtod_l+0xa0e>
   bd228:	e4c4      	b.n	bcbb4 <_strtod_l+0x4a4>
   bd22a:	9b04      	ldr	r3, [sp, #16]
   bd22c:	b333      	cbz	r3, bd27c <_strtod_l+0xb6c>
   bd22e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bd230:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bd234:	d822      	bhi.n	bd27c <_strtod_l+0xb6c>
   bd236:	a32e      	add	r3, pc, #184	; (adr r3, bd2f0 <_strtod_l+0xbe0>)
   bd238:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd23c:	4640      	mov	r0, r8
   bd23e:	4649      	mov	r1, r9
   bd240:	f7ff f8be 	bl	bc3c0 <__aeabi_dcmple>
   bd244:	b1a0      	cbz	r0, bd270 <_strtod_l+0xb60>
   bd246:	4649      	mov	r1, r9
   bd248:	4640      	mov	r0, r8
   bd24a:	f7ff f8ed 	bl	bc428 <__aeabi_d2uiz>
   bd24e:	2801      	cmp	r0, #1
   bd250:	bf38      	it	cc
   bd252:	2001      	movcc	r0, #1
   bd254:	f7fe fdbe 	bl	bbdd4 <__aeabi_ui2d>
   bd258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bd25a:	4680      	mov	r8, r0
   bd25c:	4689      	mov	r9, r1
   bd25e:	bb23      	cbnz	r3, bd2aa <_strtod_l+0xb9a>
   bd260:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bd264:	9010      	str	r0, [sp, #64]	; 0x40
   bd266:	9311      	str	r3, [sp, #68]	; 0x44
   bd268:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bd26c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bd270:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bd272:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bd274:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bd278:	1a9b      	subs	r3, r3, r2
   bd27a:	9309      	str	r3, [sp, #36]	; 0x24
   bd27c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bd280:	eeb0 0a48 	vmov.f32	s0, s16
   bd284:	eef0 0a68 	vmov.f32	s1, s17
   bd288:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bd28c:	f001 f888 	bl	be3a0 <__ulp>
   bd290:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bd294:	ec53 2b10 	vmov	r2, r3, d0
   bd298:	f7fe fe16 	bl	bbec8 <__aeabi_dmul>
   bd29c:	ec53 2b18 	vmov	r2, r3, d8
   bd2a0:	f7fe fc5c 	bl	bbb5c <__adddf3>
   bd2a4:	4682      	mov	sl, r0
   bd2a6:	468b      	mov	fp, r1
   bd2a8:	e78d      	b.n	bd1c6 <_strtod_l+0xab6>
   bd2aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bd2ae:	e7db      	b.n	bd268 <_strtod_l+0xb58>
   bd2b0:	a311      	add	r3, pc, #68	; (adr r3, bd2f8 <_strtod_l+0xbe8>)
   bd2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd2b6:	f7ff f879 	bl	bc3ac <__aeabi_dcmplt>
   bd2ba:	e7b2      	b.n	bd222 <_strtod_l+0xb12>
   bd2bc:	2300      	movs	r3, #0
   bd2be:	930a      	str	r3, [sp, #40]	; 0x28
   bd2c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bd2c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd2c4:	6013      	str	r3, [r2, #0]
   bd2c6:	f7ff ba6b 	b.w	bc7a0 <_strtod_l+0x90>
   bd2ca:	2a65      	cmp	r2, #101	; 0x65
   bd2cc:	f43f ab5f 	beq.w	bc98e <_strtod_l+0x27e>
   bd2d0:	2a45      	cmp	r2, #69	; 0x45
   bd2d2:	f43f ab5c 	beq.w	bc98e <_strtod_l+0x27e>
   bd2d6:	2301      	movs	r3, #1
   bd2d8:	f7ff bb94 	b.w	bca04 <_strtod_l+0x2f4>
   bd2dc:	f3af 8000 	nop.w
   bd2e0:	94a03595 	.word	0x94a03595
   bd2e4:	3fdfffff 	.word	0x3fdfffff
   bd2e8:	35afe535 	.word	0x35afe535
   bd2ec:	3fe00000 	.word	0x3fe00000
   bd2f0:	ffc00000 	.word	0xffc00000
   bd2f4:	41dfffff 	.word	0x41dfffff
   bd2f8:	94a03595 	.word	0x94a03595
   bd2fc:	3fcfffff 	.word	0x3fcfffff
   bd300:	3ff00000 	.word	0x3ff00000
   bd304:	7ff00000 	.word	0x7ff00000
   bd308:	7fe00000 	.word	0x7fe00000
   bd30c:	7c9fffff 	.word	0x7c9fffff
   bd310:	3fe00000 	.word	0x3fe00000
   bd314:	bff00000 	.word	0xbff00000
   bd318:	7fefffff 	.word	0x7fefffff

000bd31c <strtof>:
   bd31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd320:	f8df 80ac 	ldr.w	r8, [pc, #172]	; bd3d0 <strtof+0xb4>
   bd324:	4b26      	ldr	r3, [pc, #152]	; (bd3c0 <strtof+0xa4>)
   bd326:	460a      	mov	r2, r1
   bd328:	ed2d 8b02 	vpush	{d8}
   bd32c:	4601      	mov	r1, r0
   bd32e:	f8d8 0000 	ldr.w	r0, [r8]
   bd332:	f7ff f9ed 	bl	bc710 <_strtod_l>
   bd336:	ec55 4b10 	vmov	r4, r5, d0
   bd33a:	ee10 2a10 	vmov	r2, s0
   bd33e:	ee10 0a10 	vmov	r0, s0
   bd342:	462b      	mov	r3, r5
   bd344:	4629      	mov	r1, r5
   bd346:	f7ff f859 	bl	bc3fc <__aeabi_dcmpun>
   bd34a:	b190      	cbz	r0, bd372 <strtof+0x56>
   bd34c:	2d00      	cmp	r5, #0
   bd34e:	481d      	ldr	r0, [pc, #116]	; (bd3c4 <strtof+0xa8>)
   bd350:	da09      	bge.n	bd366 <strtof+0x4a>
   bd352:	f001 f98d 	bl	be670 <nanf>
   bd356:	eeb1 8a40 	vneg.f32	s16, s0
   bd35a:	eeb0 0a48 	vmov.f32	s0, s16
   bd35e:	ecbd 8b02 	vpop	{d8}
   bd362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd366:	ecbd 8b02 	vpop	{d8}
   bd36a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bd36e:	f001 b97f 	b.w	be670 <nanf>
   bd372:	4620      	mov	r0, r4
   bd374:	4629      	mov	r1, r5
   bd376:	f7ff f877 	bl	bc468 <__aeabi_d2f>
   bd37a:	ee08 0a10 	vmov	s16, r0
   bd37e:	eddf 7a12 	vldr	s15, [pc, #72]	; bd3c8 <strtof+0xac>
   bd382:	eeb0 7ac8 	vabs.f32	s14, s16
   bd386:	eeb4 7a67 	vcmp.f32	s14, s15
   bd38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bd38e:	dde4      	ble.n	bd35a <strtof+0x3e>
   bd390:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   bd394:	4b0d      	ldr	r3, [pc, #52]	; (bd3cc <strtof+0xb0>)
   bd396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd39a:	4620      	mov	r0, r4
   bd39c:	4639      	mov	r1, r7
   bd39e:	f7ff f82d 	bl	bc3fc <__aeabi_dcmpun>
   bd3a2:	b940      	cbnz	r0, bd3b6 <strtof+0x9a>
   bd3a4:	4b09      	ldr	r3, [pc, #36]	; (bd3cc <strtof+0xb0>)
   bd3a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd3aa:	4620      	mov	r0, r4
   bd3ac:	4639      	mov	r1, r7
   bd3ae:	f7ff f807 	bl	bc3c0 <__aeabi_dcmple>
   bd3b2:	2800      	cmp	r0, #0
   bd3b4:	d0d1      	beq.n	bd35a <strtof+0x3e>
   bd3b6:	f8d8 3000 	ldr.w	r3, [r8]
   bd3ba:	2222      	movs	r2, #34	; 0x22
   bd3bc:	601a      	str	r2, [r3, #0]
   bd3be:	e7cc      	b.n	bd35a <strtof+0x3e>
   bd3c0:	2003512c 	.word	0x2003512c
   bd3c4:	000bec3a 	.word	0x000bec3a
   bd3c8:	7f7fffff 	.word	0x7f7fffff
   bd3cc:	7fefffff 	.word	0x7fefffff
   bd3d0:	200350c0 	.word	0x200350c0

000bd3d4 <_strtol_l.constprop.0>:
   bd3d4:	2b01      	cmp	r3, #1
   bd3d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd3da:	d001      	beq.n	bd3e0 <_strtol_l.constprop.0+0xc>
   bd3dc:	2b24      	cmp	r3, #36	; 0x24
   bd3de:	d906      	bls.n	bd3ee <_strtol_l.constprop.0+0x1a>
   bd3e0:	f7fb fd9c 	bl	b8f1c <__errno>
   bd3e4:	2316      	movs	r3, #22
   bd3e6:	6003      	str	r3, [r0, #0]
   bd3e8:	2000      	movs	r0, #0
   bd3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd3ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bd4d4 <_strtol_l.constprop.0+0x100>
   bd3f2:	460d      	mov	r5, r1
   bd3f4:	462e      	mov	r6, r5
   bd3f6:	f815 4b01 	ldrb.w	r4, [r5], #1
   bd3fa:	f814 700c 	ldrb.w	r7, [r4, ip]
   bd3fe:	f017 0708 	ands.w	r7, r7, #8
   bd402:	d1f7      	bne.n	bd3f4 <_strtol_l.constprop.0+0x20>
   bd404:	2c2d      	cmp	r4, #45	; 0x2d
   bd406:	d132      	bne.n	bd46e <_strtol_l.constprop.0+0x9a>
   bd408:	782c      	ldrb	r4, [r5, #0]
   bd40a:	2701      	movs	r7, #1
   bd40c:	1cb5      	adds	r5, r6, #2
   bd40e:	2b00      	cmp	r3, #0
   bd410:	d05b      	beq.n	bd4ca <_strtol_l.constprop.0+0xf6>
   bd412:	2b10      	cmp	r3, #16
   bd414:	d109      	bne.n	bd42a <_strtol_l.constprop.0+0x56>
   bd416:	2c30      	cmp	r4, #48	; 0x30
   bd418:	d107      	bne.n	bd42a <_strtol_l.constprop.0+0x56>
   bd41a:	782c      	ldrb	r4, [r5, #0]
   bd41c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bd420:	2c58      	cmp	r4, #88	; 0x58
   bd422:	d14d      	bne.n	bd4c0 <_strtol_l.constprop.0+0xec>
   bd424:	786c      	ldrb	r4, [r5, #1]
   bd426:	2310      	movs	r3, #16
   bd428:	3502      	adds	r5, #2
   bd42a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bd42e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bd432:	f04f 0c00 	mov.w	ip, #0
   bd436:	fbb8 f9f3 	udiv	r9, r8, r3
   bd43a:	4666      	mov	r6, ip
   bd43c:	fb03 8a19 	mls	sl, r3, r9, r8
   bd440:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bd444:	f1be 0f09 	cmp.w	lr, #9
   bd448:	d816      	bhi.n	bd478 <_strtol_l.constprop.0+0xa4>
   bd44a:	4674      	mov	r4, lr
   bd44c:	42a3      	cmp	r3, r4
   bd44e:	dd24      	ble.n	bd49a <_strtol_l.constprop.0+0xc6>
   bd450:	f1bc 0f00 	cmp.w	ip, #0
   bd454:	db1e      	blt.n	bd494 <_strtol_l.constprop.0+0xc0>
   bd456:	45b1      	cmp	r9, r6
   bd458:	d31c      	bcc.n	bd494 <_strtol_l.constprop.0+0xc0>
   bd45a:	d101      	bne.n	bd460 <_strtol_l.constprop.0+0x8c>
   bd45c:	45a2      	cmp	sl, r4
   bd45e:	db19      	blt.n	bd494 <_strtol_l.constprop.0+0xc0>
   bd460:	fb06 4603 	mla	r6, r6, r3, r4
   bd464:	f04f 0c01 	mov.w	ip, #1
   bd468:	f815 4b01 	ldrb.w	r4, [r5], #1
   bd46c:	e7e8      	b.n	bd440 <_strtol_l.constprop.0+0x6c>
   bd46e:	2c2b      	cmp	r4, #43	; 0x2b
   bd470:	bf04      	itt	eq
   bd472:	782c      	ldrbeq	r4, [r5, #0]
   bd474:	1cb5      	addeq	r5, r6, #2
   bd476:	e7ca      	b.n	bd40e <_strtol_l.constprop.0+0x3a>
   bd478:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bd47c:	f1be 0f19 	cmp.w	lr, #25
   bd480:	d801      	bhi.n	bd486 <_strtol_l.constprop.0+0xb2>
   bd482:	3c37      	subs	r4, #55	; 0x37
   bd484:	e7e2      	b.n	bd44c <_strtol_l.constprop.0+0x78>
   bd486:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bd48a:	f1be 0f19 	cmp.w	lr, #25
   bd48e:	d804      	bhi.n	bd49a <_strtol_l.constprop.0+0xc6>
   bd490:	3c57      	subs	r4, #87	; 0x57
   bd492:	e7db      	b.n	bd44c <_strtol_l.constprop.0+0x78>
   bd494:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bd498:	e7e6      	b.n	bd468 <_strtol_l.constprop.0+0x94>
   bd49a:	f1bc 0f00 	cmp.w	ip, #0
   bd49e:	da05      	bge.n	bd4ac <_strtol_l.constprop.0+0xd8>
   bd4a0:	2322      	movs	r3, #34	; 0x22
   bd4a2:	6003      	str	r3, [r0, #0]
   bd4a4:	4646      	mov	r6, r8
   bd4a6:	b942      	cbnz	r2, bd4ba <_strtol_l.constprop.0+0xe6>
   bd4a8:	4630      	mov	r0, r6
   bd4aa:	e79e      	b.n	bd3ea <_strtol_l.constprop.0+0x16>
   bd4ac:	b107      	cbz	r7, bd4b0 <_strtol_l.constprop.0+0xdc>
   bd4ae:	4276      	negs	r6, r6
   bd4b0:	2a00      	cmp	r2, #0
   bd4b2:	d0f9      	beq.n	bd4a8 <_strtol_l.constprop.0+0xd4>
   bd4b4:	f1bc 0f00 	cmp.w	ip, #0
   bd4b8:	d000      	beq.n	bd4bc <_strtol_l.constprop.0+0xe8>
   bd4ba:	1e69      	subs	r1, r5, #1
   bd4bc:	6011      	str	r1, [r2, #0]
   bd4be:	e7f3      	b.n	bd4a8 <_strtol_l.constprop.0+0xd4>
   bd4c0:	2430      	movs	r4, #48	; 0x30
   bd4c2:	2b00      	cmp	r3, #0
   bd4c4:	d1b1      	bne.n	bd42a <_strtol_l.constprop.0+0x56>
   bd4c6:	2308      	movs	r3, #8
   bd4c8:	e7af      	b.n	bd42a <_strtol_l.constprop.0+0x56>
   bd4ca:	2c30      	cmp	r4, #48	; 0x30
   bd4cc:	d0a5      	beq.n	bd41a <_strtol_l.constprop.0+0x46>
   bd4ce:	230a      	movs	r3, #10
   bd4d0:	e7ab      	b.n	bd42a <_strtol_l.constprop.0+0x56>
   bd4d2:	bf00      	nop
   bd4d4:	000bf221 	.word	0x000bf221

000bd4d8 <strtol>:
   bd4d8:	4613      	mov	r3, r2
   bd4da:	460a      	mov	r2, r1
   bd4dc:	4601      	mov	r1, r0
   bd4de:	4802      	ldr	r0, [pc, #8]	; (bd4e8 <strtol+0x10>)
   bd4e0:	6800      	ldr	r0, [r0, #0]
   bd4e2:	f7ff bf77 	b.w	bd3d4 <_strtol_l.constprop.0>
   bd4e6:	bf00      	nop
   bd4e8:	200350c0 	.word	0x200350c0

000bd4ec <__register_exitproc>:
   bd4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd4f0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bd5ac <__register_exitproc+0xc0>
   bd4f4:	4606      	mov	r6, r0
   bd4f6:	f8d8 0000 	ldr.w	r0, [r8]
   bd4fa:	461f      	mov	r7, r3
   bd4fc:	460d      	mov	r5, r1
   bd4fe:	4691      	mov	r9, r2
   bd500:	f000 fbc6 	bl	bdc90 <__retarget_lock_acquire_recursive>
   bd504:	4b25      	ldr	r3, [pc, #148]	; (bd59c <__register_exitproc+0xb0>)
   bd506:	681c      	ldr	r4, [r3, #0]
   bd508:	b934      	cbnz	r4, bd518 <__register_exitproc+0x2c>
   bd50a:	4c25      	ldr	r4, [pc, #148]	; (bd5a0 <__register_exitproc+0xb4>)
   bd50c:	601c      	str	r4, [r3, #0]
   bd50e:	4b25      	ldr	r3, [pc, #148]	; (bd5a4 <__register_exitproc+0xb8>)
   bd510:	b113      	cbz	r3, bd518 <__register_exitproc+0x2c>
   bd512:	681b      	ldr	r3, [r3, #0]
   bd514:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bd518:	6863      	ldr	r3, [r4, #4]
   bd51a:	2b1f      	cmp	r3, #31
   bd51c:	dd07      	ble.n	bd52e <__register_exitproc+0x42>
   bd51e:	f8d8 0000 	ldr.w	r0, [r8]
   bd522:	f000 fbb7 	bl	bdc94 <__retarget_lock_release_recursive>
   bd526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bd52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd52e:	b34e      	cbz	r6, bd584 <__register_exitproc+0x98>
   bd530:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bd534:	b988      	cbnz	r0, bd55a <__register_exitproc+0x6e>
   bd536:	4b1c      	ldr	r3, [pc, #112]	; (bd5a8 <__register_exitproc+0xbc>)
   bd538:	b923      	cbnz	r3, bd544 <__register_exitproc+0x58>
   bd53a:	f8d8 0000 	ldr.w	r0, [r8]
   bd53e:	f000 fba8 	bl	bdc92 <__retarget_lock_release>
   bd542:	e7f0      	b.n	bd526 <__register_exitproc+0x3a>
   bd544:	f44f 7084 	mov.w	r0, #264	; 0x108
   bd548:	f7fb fcb0 	bl	b8eac <malloc>
   bd54c:	2800      	cmp	r0, #0
   bd54e:	d0f4      	beq.n	bd53a <__register_exitproc+0x4e>
   bd550:	2300      	movs	r3, #0
   bd552:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bd556:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bd55a:	6863      	ldr	r3, [r4, #4]
   bd55c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bd560:	2201      	movs	r2, #1
   bd562:	409a      	lsls	r2, r3
   bd564:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bd568:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bd56c:	4313      	orrs	r3, r2
   bd56e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bd572:	2e02      	cmp	r6, #2
   bd574:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bd578:	bf02      	ittt	eq
   bd57a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bd57e:	4313      	orreq	r3, r2
   bd580:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bd584:	6863      	ldr	r3, [r4, #4]
   bd586:	f8d8 0000 	ldr.w	r0, [r8]
   bd58a:	1c5a      	adds	r2, r3, #1
   bd58c:	3302      	adds	r3, #2
   bd58e:	6062      	str	r2, [r4, #4]
   bd590:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bd594:	f000 fb7e 	bl	bdc94 <__retarget_lock_release_recursive>
   bd598:	2000      	movs	r0, #0
   bd59a:	e7c6      	b.n	bd52a <__register_exitproc+0x3e>
   bd59c:	2003e7e8 	.word	0x2003e7e8
   bd5a0:	2003e75c 	.word	0x2003e75c
   bd5a4:	00000000 	.word	0x00000000
   bd5a8:	000b8ead 	.word	0x000b8ead
   bd5ac:	20035124 	.word	0x20035124

000bd5b0 <rshift>:
   bd5b0:	6903      	ldr	r3, [r0, #16]
   bd5b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bd5b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd5ba:	ea4f 1261 	mov.w	r2, r1, asr #5
   bd5be:	f100 0414 	add.w	r4, r0, #20
   bd5c2:	dd45      	ble.n	bd650 <rshift+0xa0>
   bd5c4:	f011 011f 	ands.w	r1, r1, #31
   bd5c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bd5cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bd5d0:	d10c      	bne.n	bd5ec <rshift+0x3c>
   bd5d2:	f100 0710 	add.w	r7, r0, #16
   bd5d6:	4629      	mov	r1, r5
   bd5d8:	42b1      	cmp	r1, r6
   bd5da:	d334      	bcc.n	bd646 <rshift+0x96>
   bd5dc:	1a9b      	subs	r3, r3, r2
   bd5de:	009b      	lsls	r3, r3, #2
   bd5e0:	1eea      	subs	r2, r5, #3
   bd5e2:	4296      	cmp	r6, r2
   bd5e4:	bf38      	it	cc
   bd5e6:	2300      	movcc	r3, #0
   bd5e8:	4423      	add	r3, r4
   bd5ea:	e015      	b.n	bd618 <rshift+0x68>
   bd5ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bd5f0:	f1c1 0820 	rsb	r8, r1, #32
   bd5f4:	40cf      	lsrs	r7, r1
   bd5f6:	f105 0e04 	add.w	lr, r5, #4
   bd5fa:	46a1      	mov	r9, r4
   bd5fc:	4576      	cmp	r6, lr
   bd5fe:	46f4      	mov	ip, lr
   bd600:	d815      	bhi.n	bd62e <rshift+0x7e>
   bd602:	1a9a      	subs	r2, r3, r2
   bd604:	0092      	lsls	r2, r2, #2
   bd606:	3a04      	subs	r2, #4
   bd608:	3501      	adds	r5, #1
   bd60a:	42ae      	cmp	r6, r5
   bd60c:	bf38      	it	cc
   bd60e:	2200      	movcc	r2, #0
   bd610:	18a3      	adds	r3, r4, r2
   bd612:	50a7      	str	r7, [r4, r2]
   bd614:	b107      	cbz	r7, bd618 <rshift+0x68>
   bd616:	3304      	adds	r3, #4
   bd618:	1b1a      	subs	r2, r3, r4
   bd61a:	42a3      	cmp	r3, r4
   bd61c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bd620:	bf08      	it	eq
   bd622:	2300      	moveq	r3, #0
   bd624:	6102      	str	r2, [r0, #16]
   bd626:	bf08      	it	eq
   bd628:	6143      	streq	r3, [r0, #20]
   bd62a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd62e:	f8dc c000 	ldr.w	ip, [ip]
   bd632:	fa0c fc08 	lsl.w	ip, ip, r8
   bd636:	ea4c 0707 	orr.w	r7, ip, r7
   bd63a:	f849 7b04 	str.w	r7, [r9], #4
   bd63e:	f85e 7b04 	ldr.w	r7, [lr], #4
   bd642:	40cf      	lsrs	r7, r1
   bd644:	e7da      	b.n	bd5fc <rshift+0x4c>
   bd646:	f851 cb04 	ldr.w	ip, [r1], #4
   bd64a:	f847 cf04 	str.w	ip, [r7, #4]!
   bd64e:	e7c3      	b.n	bd5d8 <rshift+0x28>
   bd650:	4623      	mov	r3, r4
   bd652:	e7e1      	b.n	bd618 <rshift+0x68>

000bd654 <__hexdig_fun>:
   bd654:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bd658:	2b09      	cmp	r3, #9
   bd65a:	d802      	bhi.n	bd662 <__hexdig_fun+0xe>
   bd65c:	3820      	subs	r0, #32
   bd65e:	b2c0      	uxtb	r0, r0
   bd660:	4770      	bx	lr
   bd662:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bd666:	2b05      	cmp	r3, #5
   bd668:	d801      	bhi.n	bd66e <__hexdig_fun+0x1a>
   bd66a:	3847      	subs	r0, #71	; 0x47
   bd66c:	e7f7      	b.n	bd65e <__hexdig_fun+0xa>
   bd66e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bd672:	2b05      	cmp	r3, #5
   bd674:	d801      	bhi.n	bd67a <__hexdig_fun+0x26>
   bd676:	3827      	subs	r0, #39	; 0x27
   bd678:	e7f1      	b.n	bd65e <__hexdig_fun+0xa>
   bd67a:	2000      	movs	r0, #0
   bd67c:	4770      	bx	lr
	...

000bd680 <__gethex>:
   bd680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd684:	ed2d 8b02 	vpush	{d8}
   bd688:	b089      	sub	sp, #36	; 0x24
   bd68a:	ee08 0a10 	vmov	s16, r0
   bd68e:	9304      	str	r3, [sp, #16]
   bd690:	4bb4      	ldr	r3, [pc, #720]	; (bd964 <__gethex+0x2e4>)
   bd692:	681b      	ldr	r3, [r3, #0]
   bd694:	9301      	str	r3, [sp, #4]
   bd696:	4618      	mov	r0, r3
   bd698:	468b      	mov	fp, r1
   bd69a:	4690      	mov	r8, r2
   bd69c:	f7fe ffdc 	bl	bc658 <strlen>
   bd6a0:	9b01      	ldr	r3, [sp, #4]
   bd6a2:	f8db 2000 	ldr.w	r2, [fp]
   bd6a6:	4403      	add	r3, r0
   bd6a8:	4682      	mov	sl, r0
   bd6aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bd6ae:	9305      	str	r3, [sp, #20]
   bd6b0:	1c93      	adds	r3, r2, #2
   bd6b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bd6b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bd6ba:	32fe      	adds	r2, #254	; 0xfe
   bd6bc:	18d1      	adds	r1, r2, r3
   bd6be:	461f      	mov	r7, r3
   bd6c0:	f813 0b01 	ldrb.w	r0, [r3], #1
   bd6c4:	9100      	str	r1, [sp, #0]
   bd6c6:	2830      	cmp	r0, #48	; 0x30
   bd6c8:	d0f8      	beq.n	bd6bc <__gethex+0x3c>
   bd6ca:	f7ff ffc3 	bl	bd654 <__hexdig_fun>
   bd6ce:	4604      	mov	r4, r0
   bd6d0:	2800      	cmp	r0, #0
   bd6d2:	d13a      	bne.n	bd74a <__gethex+0xca>
   bd6d4:	9901      	ldr	r1, [sp, #4]
   bd6d6:	4652      	mov	r2, sl
   bd6d8:	4638      	mov	r0, r7
   bd6da:	f7fe ffc5 	bl	bc668 <strncmp>
   bd6de:	4605      	mov	r5, r0
   bd6e0:	2800      	cmp	r0, #0
   bd6e2:	d168      	bne.n	bd7b6 <__gethex+0x136>
   bd6e4:	f817 000a 	ldrb.w	r0, [r7, sl]
   bd6e8:	eb07 060a 	add.w	r6, r7, sl
   bd6ec:	f7ff ffb2 	bl	bd654 <__hexdig_fun>
   bd6f0:	2800      	cmp	r0, #0
   bd6f2:	d062      	beq.n	bd7ba <__gethex+0x13a>
   bd6f4:	4633      	mov	r3, r6
   bd6f6:	7818      	ldrb	r0, [r3, #0]
   bd6f8:	2830      	cmp	r0, #48	; 0x30
   bd6fa:	461f      	mov	r7, r3
   bd6fc:	f103 0301 	add.w	r3, r3, #1
   bd700:	d0f9      	beq.n	bd6f6 <__gethex+0x76>
   bd702:	f7ff ffa7 	bl	bd654 <__hexdig_fun>
   bd706:	2301      	movs	r3, #1
   bd708:	fab0 f480 	clz	r4, r0
   bd70c:	0964      	lsrs	r4, r4, #5
   bd70e:	4635      	mov	r5, r6
   bd710:	9300      	str	r3, [sp, #0]
   bd712:	463a      	mov	r2, r7
   bd714:	4616      	mov	r6, r2
   bd716:	3201      	adds	r2, #1
   bd718:	7830      	ldrb	r0, [r6, #0]
   bd71a:	f7ff ff9b 	bl	bd654 <__hexdig_fun>
   bd71e:	2800      	cmp	r0, #0
   bd720:	d1f8      	bne.n	bd714 <__gethex+0x94>
   bd722:	9901      	ldr	r1, [sp, #4]
   bd724:	4652      	mov	r2, sl
   bd726:	4630      	mov	r0, r6
   bd728:	f7fe ff9e 	bl	bc668 <strncmp>
   bd72c:	b980      	cbnz	r0, bd750 <__gethex+0xd0>
   bd72e:	b94d      	cbnz	r5, bd744 <__gethex+0xc4>
   bd730:	eb06 050a 	add.w	r5, r6, sl
   bd734:	462a      	mov	r2, r5
   bd736:	4616      	mov	r6, r2
   bd738:	3201      	adds	r2, #1
   bd73a:	7830      	ldrb	r0, [r6, #0]
   bd73c:	f7ff ff8a 	bl	bd654 <__hexdig_fun>
   bd740:	2800      	cmp	r0, #0
   bd742:	d1f8      	bne.n	bd736 <__gethex+0xb6>
   bd744:	1bad      	subs	r5, r5, r6
   bd746:	00ad      	lsls	r5, r5, #2
   bd748:	e004      	b.n	bd754 <__gethex+0xd4>
   bd74a:	2400      	movs	r4, #0
   bd74c:	4625      	mov	r5, r4
   bd74e:	e7e0      	b.n	bd712 <__gethex+0x92>
   bd750:	2d00      	cmp	r5, #0
   bd752:	d1f7      	bne.n	bd744 <__gethex+0xc4>
   bd754:	7833      	ldrb	r3, [r6, #0]
   bd756:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bd75a:	2b50      	cmp	r3, #80	; 0x50
   bd75c:	d13b      	bne.n	bd7d6 <__gethex+0x156>
   bd75e:	7873      	ldrb	r3, [r6, #1]
   bd760:	2b2b      	cmp	r3, #43	; 0x2b
   bd762:	d02c      	beq.n	bd7be <__gethex+0x13e>
   bd764:	2b2d      	cmp	r3, #45	; 0x2d
   bd766:	d02e      	beq.n	bd7c6 <__gethex+0x146>
   bd768:	1c71      	adds	r1, r6, #1
   bd76a:	f04f 0900 	mov.w	r9, #0
   bd76e:	7808      	ldrb	r0, [r1, #0]
   bd770:	f7ff ff70 	bl	bd654 <__hexdig_fun>
   bd774:	1e43      	subs	r3, r0, #1
   bd776:	b2db      	uxtb	r3, r3
   bd778:	2b18      	cmp	r3, #24
   bd77a:	d82c      	bhi.n	bd7d6 <__gethex+0x156>
   bd77c:	f1a0 0210 	sub.w	r2, r0, #16
   bd780:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bd784:	f7ff ff66 	bl	bd654 <__hexdig_fun>
   bd788:	1e43      	subs	r3, r0, #1
   bd78a:	b2db      	uxtb	r3, r3
   bd78c:	2b18      	cmp	r3, #24
   bd78e:	d91d      	bls.n	bd7cc <__gethex+0x14c>
   bd790:	f1b9 0f00 	cmp.w	r9, #0
   bd794:	d000      	beq.n	bd798 <__gethex+0x118>
   bd796:	4252      	negs	r2, r2
   bd798:	4415      	add	r5, r2
   bd79a:	f8cb 1000 	str.w	r1, [fp]
   bd79e:	b1e4      	cbz	r4, bd7da <__gethex+0x15a>
   bd7a0:	9b00      	ldr	r3, [sp, #0]
   bd7a2:	2b00      	cmp	r3, #0
   bd7a4:	bf14      	ite	ne
   bd7a6:	2700      	movne	r7, #0
   bd7a8:	2706      	moveq	r7, #6
   bd7aa:	4638      	mov	r0, r7
   bd7ac:	b009      	add	sp, #36	; 0x24
   bd7ae:	ecbd 8b02 	vpop	{d8}
   bd7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd7b6:	463e      	mov	r6, r7
   bd7b8:	4625      	mov	r5, r4
   bd7ba:	2401      	movs	r4, #1
   bd7bc:	e7ca      	b.n	bd754 <__gethex+0xd4>
   bd7be:	f04f 0900 	mov.w	r9, #0
   bd7c2:	1cb1      	adds	r1, r6, #2
   bd7c4:	e7d3      	b.n	bd76e <__gethex+0xee>
   bd7c6:	f04f 0901 	mov.w	r9, #1
   bd7ca:	e7fa      	b.n	bd7c2 <__gethex+0x142>
   bd7cc:	230a      	movs	r3, #10
   bd7ce:	fb03 0202 	mla	r2, r3, r2, r0
   bd7d2:	3a10      	subs	r2, #16
   bd7d4:	e7d4      	b.n	bd780 <__gethex+0x100>
   bd7d6:	4631      	mov	r1, r6
   bd7d8:	e7df      	b.n	bd79a <__gethex+0x11a>
   bd7da:	1bf3      	subs	r3, r6, r7
   bd7dc:	3b01      	subs	r3, #1
   bd7de:	4621      	mov	r1, r4
   bd7e0:	2b07      	cmp	r3, #7
   bd7e2:	dc0b      	bgt.n	bd7fc <__gethex+0x17c>
   bd7e4:	ee18 0a10 	vmov	r0, s16
   bd7e8:	f000 fa68 	bl	bdcbc <_Balloc>
   bd7ec:	4604      	mov	r4, r0
   bd7ee:	b940      	cbnz	r0, bd802 <__gethex+0x182>
   bd7f0:	4b5d      	ldr	r3, [pc, #372]	; (bd968 <__gethex+0x2e8>)
   bd7f2:	4602      	mov	r2, r0
   bd7f4:	21de      	movs	r1, #222	; 0xde
   bd7f6:	485d      	ldr	r0, [pc, #372]	; (bd96c <__gethex+0x2ec>)
   bd7f8:	f7fb fb98 	bl	b8f2c <__assert_func>
   bd7fc:	3101      	adds	r1, #1
   bd7fe:	105b      	asrs	r3, r3, #1
   bd800:	e7ee      	b.n	bd7e0 <__gethex+0x160>
   bd802:	f100 0914 	add.w	r9, r0, #20
   bd806:	f04f 0b00 	mov.w	fp, #0
   bd80a:	f1ca 0301 	rsb	r3, sl, #1
   bd80e:	f8cd 9008 	str.w	r9, [sp, #8]
   bd812:	f8cd b000 	str.w	fp, [sp]
   bd816:	9306      	str	r3, [sp, #24]
   bd818:	42b7      	cmp	r7, r6
   bd81a:	d340      	bcc.n	bd89e <__gethex+0x21e>
   bd81c:	9802      	ldr	r0, [sp, #8]
   bd81e:	9b00      	ldr	r3, [sp, #0]
   bd820:	f840 3b04 	str.w	r3, [r0], #4
   bd824:	eba0 0009 	sub.w	r0, r0, r9
   bd828:	1080      	asrs	r0, r0, #2
   bd82a:	0146      	lsls	r6, r0, #5
   bd82c:	6120      	str	r0, [r4, #16]
   bd82e:	4618      	mov	r0, r3
   bd830:	f000 fb36 	bl	bdea0 <__hi0bits>
   bd834:	1a30      	subs	r0, r6, r0
   bd836:	f8d8 6000 	ldr.w	r6, [r8]
   bd83a:	42b0      	cmp	r0, r6
   bd83c:	dd63      	ble.n	bd906 <__gethex+0x286>
   bd83e:	1b87      	subs	r7, r0, r6
   bd840:	4639      	mov	r1, r7
   bd842:	4620      	mov	r0, r4
   bd844:	f000 feda 	bl	be5fc <__any_on>
   bd848:	4682      	mov	sl, r0
   bd84a:	b1a8      	cbz	r0, bd878 <__gethex+0x1f8>
   bd84c:	1e7b      	subs	r3, r7, #1
   bd84e:	1159      	asrs	r1, r3, #5
   bd850:	f003 021f 	and.w	r2, r3, #31
   bd854:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bd858:	f04f 0a01 	mov.w	sl, #1
   bd85c:	fa0a f202 	lsl.w	r2, sl, r2
   bd860:	420a      	tst	r2, r1
   bd862:	d009      	beq.n	bd878 <__gethex+0x1f8>
   bd864:	4553      	cmp	r3, sl
   bd866:	dd05      	ble.n	bd874 <__gethex+0x1f4>
   bd868:	1eb9      	subs	r1, r7, #2
   bd86a:	4620      	mov	r0, r4
   bd86c:	f000 fec6 	bl	be5fc <__any_on>
   bd870:	2800      	cmp	r0, #0
   bd872:	d145      	bne.n	bd900 <__gethex+0x280>
   bd874:	f04f 0a02 	mov.w	sl, #2
   bd878:	4639      	mov	r1, r7
   bd87a:	4620      	mov	r0, r4
   bd87c:	f7ff fe98 	bl	bd5b0 <rshift>
   bd880:	443d      	add	r5, r7
   bd882:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bd886:	42ab      	cmp	r3, r5
   bd888:	da4c      	bge.n	bd924 <__gethex+0x2a4>
   bd88a:	ee18 0a10 	vmov	r0, s16
   bd88e:	4621      	mov	r1, r4
   bd890:	f000 fa54 	bl	bdd3c <_Bfree>
   bd894:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd896:	2300      	movs	r3, #0
   bd898:	6013      	str	r3, [r2, #0]
   bd89a:	27a3      	movs	r7, #163	; 0xa3
   bd89c:	e785      	b.n	bd7aa <__gethex+0x12a>
   bd89e:	1e73      	subs	r3, r6, #1
   bd8a0:	9a05      	ldr	r2, [sp, #20]
   bd8a2:	9303      	str	r3, [sp, #12]
   bd8a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bd8a8:	4293      	cmp	r3, r2
   bd8aa:	d019      	beq.n	bd8e0 <__gethex+0x260>
   bd8ac:	f1bb 0f20 	cmp.w	fp, #32
   bd8b0:	d107      	bne.n	bd8c2 <__gethex+0x242>
   bd8b2:	9b02      	ldr	r3, [sp, #8]
   bd8b4:	9a00      	ldr	r2, [sp, #0]
   bd8b6:	f843 2b04 	str.w	r2, [r3], #4
   bd8ba:	9302      	str	r3, [sp, #8]
   bd8bc:	2300      	movs	r3, #0
   bd8be:	9300      	str	r3, [sp, #0]
   bd8c0:	469b      	mov	fp, r3
   bd8c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bd8c6:	f7ff fec5 	bl	bd654 <__hexdig_fun>
   bd8ca:	9b00      	ldr	r3, [sp, #0]
   bd8cc:	f000 000f 	and.w	r0, r0, #15
   bd8d0:	fa00 f00b 	lsl.w	r0, r0, fp
   bd8d4:	4303      	orrs	r3, r0
   bd8d6:	9300      	str	r3, [sp, #0]
   bd8d8:	f10b 0b04 	add.w	fp, fp, #4
   bd8dc:	9b03      	ldr	r3, [sp, #12]
   bd8de:	e00d      	b.n	bd8fc <__gethex+0x27c>
   bd8e0:	9b03      	ldr	r3, [sp, #12]
   bd8e2:	9a06      	ldr	r2, [sp, #24]
   bd8e4:	4413      	add	r3, r2
   bd8e6:	42bb      	cmp	r3, r7
   bd8e8:	d3e0      	bcc.n	bd8ac <__gethex+0x22c>
   bd8ea:	4618      	mov	r0, r3
   bd8ec:	9901      	ldr	r1, [sp, #4]
   bd8ee:	9307      	str	r3, [sp, #28]
   bd8f0:	4652      	mov	r2, sl
   bd8f2:	f7fe feb9 	bl	bc668 <strncmp>
   bd8f6:	9b07      	ldr	r3, [sp, #28]
   bd8f8:	2800      	cmp	r0, #0
   bd8fa:	d1d7      	bne.n	bd8ac <__gethex+0x22c>
   bd8fc:	461e      	mov	r6, r3
   bd8fe:	e78b      	b.n	bd818 <__gethex+0x198>
   bd900:	f04f 0a03 	mov.w	sl, #3
   bd904:	e7b8      	b.n	bd878 <__gethex+0x1f8>
   bd906:	da0a      	bge.n	bd91e <__gethex+0x29e>
   bd908:	1a37      	subs	r7, r6, r0
   bd90a:	4621      	mov	r1, r4
   bd90c:	ee18 0a10 	vmov	r0, s16
   bd910:	463a      	mov	r2, r7
   bd912:	f000 fc2f 	bl	be174 <__lshift>
   bd916:	1bed      	subs	r5, r5, r7
   bd918:	4604      	mov	r4, r0
   bd91a:	f100 0914 	add.w	r9, r0, #20
   bd91e:	f04f 0a00 	mov.w	sl, #0
   bd922:	e7ae      	b.n	bd882 <__gethex+0x202>
   bd924:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bd928:	42a8      	cmp	r0, r5
   bd92a:	dd72      	ble.n	bda12 <__gethex+0x392>
   bd92c:	1b45      	subs	r5, r0, r5
   bd92e:	42ae      	cmp	r6, r5
   bd930:	dc36      	bgt.n	bd9a0 <__gethex+0x320>
   bd932:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd936:	2b02      	cmp	r3, #2
   bd938:	d02a      	beq.n	bd990 <__gethex+0x310>
   bd93a:	2b03      	cmp	r3, #3
   bd93c:	d02c      	beq.n	bd998 <__gethex+0x318>
   bd93e:	2b01      	cmp	r3, #1
   bd940:	d11c      	bne.n	bd97c <__gethex+0x2fc>
   bd942:	42ae      	cmp	r6, r5
   bd944:	d11a      	bne.n	bd97c <__gethex+0x2fc>
   bd946:	2e01      	cmp	r6, #1
   bd948:	d112      	bne.n	bd970 <__gethex+0x2f0>
   bd94a:	9a04      	ldr	r2, [sp, #16]
   bd94c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bd950:	6013      	str	r3, [r2, #0]
   bd952:	2301      	movs	r3, #1
   bd954:	6123      	str	r3, [r4, #16]
   bd956:	f8c9 3000 	str.w	r3, [r9]
   bd95a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd95c:	2762      	movs	r7, #98	; 0x62
   bd95e:	601c      	str	r4, [r3, #0]
   bd960:	e723      	b.n	bd7aa <__gethex+0x12a>
   bd962:	bf00      	nop
   bd964:	000bf394 	.word	0x000bf394
   bd968:	000bf321 	.word	0x000bf321
   bd96c:	000bf332 	.word	0x000bf332
   bd970:	1e71      	subs	r1, r6, #1
   bd972:	4620      	mov	r0, r4
   bd974:	f000 fe42 	bl	be5fc <__any_on>
   bd978:	2800      	cmp	r0, #0
   bd97a:	d1e6      	bne.n	bd94a <__gethex+0x2ca>
   bd97c:	ee18 0a10 	vmov	r0, s16
   bd980:	4621      	mov	r1, r4
   bd982:	f000 f9db 	bl	bdd3c <_Bfree>
   bd986:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd988:	2300      	movs	r3, #0
   bd98a:	6013      	str	r3, [r2, #0]
   bd98c:	2750      	movs	r7, #80	; 0x50
   bd98e:	e70c      	b.n	bd7aa <__gethex+0x12a>
   bd990:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd992:	2b00      	cmp	r3, #0
   bd994:	d1f2      	bne.n	bd97c <__gethex+0x2fc>
   bd996:	e7d8      	b.n	bd94a <__gethex+0x2ca>
   bd998:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd99a:	2b00      	cmp	r3, #0
   bd99c:	d1d5      	bne.n	bd94a <__gethex+0x2ca>
   bd99e:	e7ed      	b.n	bd97c <__gethex+0x2fc>
   bd9a0:	1e6f      	subs	r7, r5, #1
   bd9a2:	f1ba 0f00 	cmp.w	sl, #0
   bd9a6:	d131      	bne.n	bda0c <__gethex+0x38c>
   bd9a8:	b127      	cbz	r7, bd9b4 <__gethex+0x334>
   bd9aa:	4639      	mov	r1, r7
   bd9ac:	4620      	mov	r0, r4
   bd9ae:	f000 fe25 	bl	be5fc <__any_on>
   bd9b2:	4682      	mov	sl, r0
   bd9b4:	117b      	asrs	r3, r7, #5
   bd9b6:	2101      	movs	r1, #1
   bd9b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bd9bc:	f007 071f 	and.w	r7, r7, #31
   bd9c0:	fa01 f707 	lsl.w	r7, r1, r7
   bd9c4:	421f      	tst	r7, r3
   bd9c6:	4629      	mov	r1, r5
   bd9c8:	4620      	mov	r0, r4
   bd9ca:	bf18      	it	ne
   bd9cc:	f04a 0a02 	orrne.w	sl, sl, #2
   bd9d0:	1b76      	subs	r6, r6, r5
   bd9d2:	f7ff fded 	bl	bd5b0 <rshift>
   bd9d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bd9da:	2702      	movs	r7, #2
   bd9dc:	f1ba 0f00 	cmp.w	sl, #0
   bd9e0:	d048      	beq.n	bda74 <__gethex+0x3f4>
   bd9e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd9e6:	2b02      	cmp	r3, #2
   bd9e8:	d015      	beq.n	bda16 <__gethex+0x396>
   bd9ea:	2b03      	cmp	r3, #3
   bd9ec:	d017      	beq.n	bda1e <__gethex+0x39e>
   bd9ee:	2b01      	cmp	r3, #1
   bd9f0:	d109      	bne.n	bda06 <__gethex+0x386>
   bd9f2:	f01a 0f02 	tst.w	sl, #2
   bd9f6:	d006      	beq.n	bda06 <__gethex+0x386>
   bd9f8:	f8d9 0000 	ldr.w	r0, [r9]
   bd9fc:	ea4a 0a00 	orr.w	sl, sl, r0
   bda00:	f01a 0f01 	tst.w	sl, #1
   bda04:	d10e      	bne.n	bda24 <__gethex+0x3a4>
   bda06:	f047 0710 	orr.w	r7, r7, #16
   bda0a:	e033      	b.n	bda74 <__gethex+0x3f4>
   bda0c:	f04f 0a01 	mov.w	sl, #1
   bda10:	e7d0      	b.n	bd9b4 <__gethex+0x334>
   bda12:	2701      	movs	r7, #1
   bda14:	e7e2      	b.n	bd9dc <__gethex+0x35c>
   bda16:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bda18:	f1c3 0301 	rsb	r3, r3, #1
   bda1c:	9315      	str	r3, [sp, #84]	; 0x54
   bda1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bda20:	2b00      	cmp	r3, #0
   bda22:	d0f0      	beq.n	bda06 <__gethex+0x386>
   bda24:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bda28:	f104 0314 	add.w	r3, r4, #20
   bda2c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bda30:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bda34:	f04f 0c00 	mov.w	ip, #0
   bda38:	4618      	mov	r0, r3
   bda3a:	f853 2b04 	ldr.w	r2, [r3], #4
   bda3e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bda42:	d01c      	beq.n	bda7e <__gethex+0x3fe>
   bda44:	3201      	adds	r2, #1
   bda46:	6002      	str	r2, [r0, #0]
   bda48:	2f02      	cmp	r7, #2
   bda4a:	f104 0314 	add.w	r3, r4, #20
   bda4e:	d13f      	bne.n	bdad0 <__gethex+0x450>
   bda50:	f8d8 2000 	ldr.w	r2, [r8]
   bda54:	3a01      	subs	r2, #1
   bda56:	42b2      	cmp	r2, r6
   bda58:	d10a      	bne.n	bda70 <__gethex+0x3f0>
   bda5a:	1171      	asrs	r1, r6, #5
   bda5c:	2201      	movs	r2, #1
   bda5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bda62:	f006 061f 	and.w	r6, r6, #31
   bda66:	fa02 f606 	lsl.w	r6, r2, r6
   bda6a:	421e      	tst	r6, r3
   bda6c:	bf18      	it	ne
   bda6e:	4617      	movne	r7, r2
   bda70:	f047 0720 	orr.w	r7, r7, #32
   bda74:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bda76:	601c      	str	r4, [r3, #0]
   bda78:	9b04      	ldr	r3, [sp, #16]
   bda7a:	601d      	str	r5, [r3, #0]
   bda7c:	e695      	b.n	bd7aa <__gethex+0x12a>
   bda7e:	4299      	cmp	r1, r3
   bda80:	f843 cc04 	str.w	ip, [r3, #-4]
   bda84:	d8d8      	bhi.n	bda38 <__gethex+0x3b8>
   bda86:	68a3      	ldr	r3, [r4, #8]
   bda88:	459b      	cmp	fp, r3
   bda8a:	db19      	blt.n	bdac0 <__gethex+0x440>
   bda8c:	6861      	ldr	r1, [r4, #4]
   bda8e:	ee18 0a10 	vmov	r0, s16
   bda92:	3101      	adds	r1, #1
   bda94:	f000 f912 	bl	bdcbc <_Balloc>
   bda98:	4681      	mov	r9, r0
   bda9a:	b918      	cbnz	r0, bdaa4 <__gethex+0x424>
   bda9c:	4b1a      	ldr	r3, [pc, #104]	; (bdb08 <__gethex+0x488>)
   bda9e:	4602      	mov	r2, r0
   bdaa0:	2184      	movs	r1, #132	; 0x84
   bdaa2:	e6a8      	b.n	bd7f6 <__gethex+0x176>
   bdaa4:	6922      	ldr	r2, [r4, #16]
   bdaa6:	3202      	adds	r2, #2
   bdaa8:	f104 010c 	add.w	r1, r4, #12
   bdaac:	0092      	lsls	r2, r2, #2
   bdaae:	300c      	adds	r0, #12
   bdab0:	f7fe fd62 	bl	bc578 <memcpy>
   bdab4:	4621      	mov	r1, r4
   bdab6:	ee18 0a10 	vmov	r0, s16
   bdaba:	f000 f93f 	bl	bdd3c <_Bfree>
   bdabe:	464c      	mov	r4, r9
   bdac0:	6923      	ldr	r3, [r4, #16]
   bdac2:	1c5a      	adds	r2, r3, #1
   bdac4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bdac8:	6122      	str	r2, [r4, #16]
   bdaca:	2201      	movs	r2, #1
   bdacc:	615a      	str	r2, [r3, #20]
   bdace:	e7bb      	b.n	bda48 <__gethex+0x3c8>
   bdad0:	6922      	ldr	r2, [r4, #16]
   bdad2:	455a      	cmp	r2, fp
   bdad4:	dd0b      	ble.n	bdaee <__gethex+0x46e>
   bdad6:	2101      	movs	r1, #1
   bdad8:	4620      	mov	r0, r4
   bdada:	f7ff fd69 	bl	bd5b0 <rshift>
   bdade:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bdae2:	3501      	adds	r5, #1
   bdae4:	42ab      	cmp	r3, r5
   bdae6:	f6ff aed0 	blt.w	bd88a <__gethex+0x20a>
   bdaea:	2701      	movs	r7, #1
   bdaec:	e7c0      	b.n	bda70 <__gethex+0x3f0>
   bdaee:	f016 061f 	ands.w	r6, r6, #31
   bdaf2:	d0fa      	beq.n	bdaea <__gethex+0x46a>
   bdaf4:	4453      	add	r3, sl
   bdaf6:	f1c6 0620 	rsb	r6, r6, #32
   bdafa:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bdafe:	f000 f9cf 	bl	bdea0 <__hi0bits>
   bdb02:	42b0      	cmp	r0, r6
   bdb04:	dbe7      	blt.n	bdad6 <__gethex+0x456>
   bdb06:	e7f0      	b.n	bdaea <__gethex+0x46a>
   bdb08:	000bf321 	.word	0x000bf321

000bdb0c <L_shift>:
   bdb0c:	f1c2 0208 	rsb	r2, r2, #8
   bdb10:	0092      	lsls	r2, r2, #2
   bdb12:	b570      	push	{r4, r5, r6, lr}
   bdb14:	f1c2 0620 	rsb	r6, r2, #32
   bdb18:	6843      	ldr	r3, [r0, #4]
   bdb1a:	6804      	ldr	r4, [r0, #0]
   bdb1c:	fa03 f506 	lsl.w	r5, r3, r6
   bdb20:	432c      	orrs	r4, r5
   bdb22:	40d3      	lsrs	r3, r2
   bdb24:	6004      	str	r4, [r0, #0]
   bdb26:	f840 3f04 	str.w	r3, [r0, #4]!
   bdb2a:	4288      	cmp	r0, r1
   bdb2c:	d3f4      	bcc.n	bdb18 <L_shift+0xc>
   bdb2e:	bd70      	pop	{r4, r5, r6, pc}

000bdb30 <__match>:
   bdb30:	b530      	push	{r4, r5, lr}
   bdb32:	6803      	ldr	r3, [r0, #0]
   bdb34:	3301      	adds	r3, #1
   bdb36:	f811 4b01 	ldrb.w	r4, [r1], #1
   bdb3a:	b914      	cbnz	r4, bdb42 <__match+0x12>
   bdb3c:	6003      	str	r3, [r0, #0]
   bdb3e:	2001      	movs	r0, #1
   bdb40:	bd30      	pop	{r4, r5, pc}
   bdb42:	f813 2b01 	ldrb.w	r2, [r3], #1
   bdb46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bdb4a:	2d19      	cmp	r5, #25
   bdb4c:	bf98      	it	ls
   bdb4e:	3220      	addls	r2, #32
   bdb50:	42a2      	cmp	r2, r4
   bdb52:	d0f0      	beq.n	bdb36 <__match+0x6>
   bdb54:	2000      	movs	r0, #0
   bdb56:	e7f3      	b.n	bdb40 <__match+0x10>

000bdb58 <__hexnan>:
   bdb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdb5c:	680b      	ldr	r3, [r1, #0]
   bdb5e:	115e      	asrs	r6, r3, #5
   bdb60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bdb64:	f013 031f 	ands.w	r3, r3, #31
   bdb68:	b087      	sub	sp, #28
   bdb6a:	bf18      	it	ne
   bdb6c:	3604      	addne	r6, #4
   bdb6e:	2500      	movs	r5, #0
   bdb70:	1f37      	subs	r7, r6, #4
   bdb72:	4690      	mov	r8, r2
   bdb74:	6802      	ldr	r2, [r0, #0]
   bdb76:	9301      	str	r3, [sp, #4]
   bdb78:	4682      	mov	sl, r0
   bdb7a:	f846 5c04 	str.w	r5, [r6, #-4]
   bdb7e:	46b9      	mov	r9, r7
   bdb80:	463c      	mov	r4, r7
   bdb82:	9502      	str	r5, [sp, #8]
   bdb84:	46ab      	mov	fp, r5
   bdb86:	7851      	ldrb	r1, [r2, #1]
   bdb88:	1c53      	adds	r3, r2, #1
   bdb8a:	9303      	str	r3, [sp, #12]
   bdb8c:	b341      	cbz	r1, bdbe0 <__hexnan+0x88>
   bdb8e:	4608      	mov	r0, r1
   bdb90:	9205      	str	r2, [sp, #20]
   bdb92:	9104      	str	r1, [sp, #16]
   bdb94:	f7ff fd5e 	bl	bd654 <__hexdig_fun>
   bdb98:	2800      	cmp	r0, #0
   bdb9a:	d14f      	bne.n	bdc3c <__hexnan+0xe4>
   bdb9c:	9904      	ldr	r1, [sp, #16]
   bdb9e:	9a05      	ldr	r2, [sp, #20]
   bdba0:	2920      	cmp	r1, #32
   bdba2:	d818      	bhi.n	bdbd6 <__hexnan+0x7e>
   bdba4:	9b02      	ldr	r3, [sp, #8]
   bdba6:	459b      	cmp	fp, r3
   bdba8:	dd13      	ble.n	bdbd2 <__hexnan+0x7a>
   bdbaa:	454c      	cmp	r4, r9
   bdbac:	d206      	bcs.n	bdbbc <__hexnan+0x64>
   bdbae:	2d07      	cmp	r5, #7
   bdbb0:	dc04      	bgt.n	bdbbc <__hexnan+0x64>
   bdbb2:	462a      	mov	r2, r5
   bdbb4:	4649      	mov	r1, r9
   bdbb6:	4620      	mov	r0, r4
   bdbb8:	f7ff ffa8 	bl	bdb0c <L_shift>
   bdbbc:	4544      	cmp	r4, r8
   bdbbe:	d950      	bls.n	bdc62 <__hexnan+0x10a>
   bdbc0:	2300      	movs	r3, #0
   bdbc2:	f1a4 0904 	sub.w	r9, r4, #4
   bdbc6:	f844 3c04 	str.w	r3, [r4, #-4]
   bdbca:	f8cd b008 	str.w	fp, [sp, #8]
   bdbce:	464c      	mov	r4, r9
   bdbd0:	461d      	mov	r5, r3
   bdbd2:	9a03      	ldr	r2, [sp, #12]
   bdbd4:	e7d7      	b.n	bdb86 <__hexnan+0x2e>
   bdbd6:	2929      	cmp	r1, #41	; 0x29
   bdbd8:	d156      	bne.n	bdc88 <__hexnan+0x130>
   bdbda:	3202      	adds	r2, #2
   bdbdc:	f8ca 2000 	str.w	r2, [sl]
   bdbe0:	f1bb 0f00 	cmp.w	fp, #0
   bdbe4:	d050      	beq.n	bdc88 <__hexnan+0x130>
   bdbe6:	454c      	cmp	r4, r9
   bdbe8:	d206      	bcs.n	bdbf8 <__hexnan+0xa0>
   bdbea:	2d07      	cmp	r5, #7
   bdbec:	dc04      	bgt.n	bdbf8 <__hexnan+0xa0>
   bdbee:	462a      	mov	r2, r5
   bdbf0:	4649      	mov	r1, r9
   bdbf2:	4620      	mov	r0, r4
   bdbf4:	f7ff ff8a 	bl	bdb0c <L_shift>
   bdbf8:	4544      	cmp	r4, r8
   bdbfa:	d934      	bls.n	bdc66 <__hexnan+0x10e>
   bdbfc:	f1a8 0204 	sub.w	r2, r8, #4
   bdc00:	4623      	mov	r3, r4
   bdc02:	f853 1b04 	ldr.w	r1, [r3], #4
   bdc06:	f842 1f04 	str.w	r1, [r2, #4]!
   bdc0a:	429f      	cmp	r7, r3
   bdc0c:	d2f9      	bcs.n	bdc02 <__hexnan+0xaa>
   bdc0e:	1b3b      	subs	r3, r7, r4
   bdc10:	f023 0303 	bic.w	r3, r3, #3
   bdc14:	3304      	adds	r3, #4
   bdc16:	3401      	adds	r4, #1
   bdc18:	3e03      	subs	r6, #3
   bdc1a:	42b4      	cmp	r4, r6
   bdc1c:	bf88      	it	hi
   bdc1e:	2304      	movhi	r3, #4
   bdc20:	4443      	add	r3, r8
   bdc22:	2200      	movs	r2, #0
   bdc24:	f843 2b04 	str.w	r2, [r3], #4
   bdc28:	429f      	cmp	r7, r3
   bdc2a:	d2fb      	bcs.n	bdc24 <__hexnan+0xcc>
   bdc2c:	683b      	ldr	r3, [r7, #0]
   bdc2e:	b91b      	cbnz	r3, bdc38 <__hexnan+0xe0>
   bdc30:	4547      	cmp	r7, r8
   bdc32:	d127      	bne.n	bdc84 <__hexnan+0x12c>
   bdc34:	2301      	movs	r3, #1
   bdc36:	603b      	str	r3, [r7, #0]
   bdc38:	2005      	movs	r0, #5
   bdc3a:	e026      	b.n	bdc8a <__hexnan+0x132>
   bdc3c:	3501      	adds	r5, #1
   bdc3e:	2d08      	cmp	r5, #8
   bdc40:	f10b 0b01 	add.w	fp, fp, #1
   bdc44:	dd06      	ble.n	bdc54 <__hexnan+0xfc>
   bdc46:	4544      	cmp	r4, r8
   bdc48:	d9c3      	bls.n	bdbd2 <__hexnan+0x7a>
   bdc4a:	2300      	movs	r3, #0
   bdc4c:	f844 3c04 	str.w	r3, [r4, #-4]
   bdc50:	2501      	movs	r5, #1
   bdc52:	3c04      	subs	r4, #4
   bdc54:	6822      	ldr	r2, [r4, #0]
   bdc56:	f000 000f 	and.w	r0, r0, #15
   bdc5a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bdc5e:	6022      	str	r2, [r4, #0]
   bdc60:	e7b7      	b.n	bdbd2 <__hexnan+0x7a>
   bdc62:	2508      	movs	r5, #8
   bdc64:	e7b5      	b.n	bdbd2 <__hexnan+0x7a>
   bdc66:	9b01      	ldr	r3, [sp, #4]
   bdc68:	2b00      	cmp	r3, #0
   bdc6a:	d0df      	beq.n	bdc2c <__hexnan+0xd4>
   bdc6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bdc70:	f1c3 0320 	rsb	r3, r3, #32
   bdc74:	fa22 f303 	lsr.w	r3, r2, r3
   bdc78:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bdc7c:	401a      	ands	r2, r3
   bdc7e:	f846 2c04 	str.w	r2, [r6, #-4]
   bdc82:	e7d3      	b.n	bdc2c <__hexnan+0xd4>
   bdc84:	3f04      	subs	r7, #4
   bdc86:	e7d1      	b.n	bdc2c <__hexnan+0xd4>
   bdc88:	2004      	movs	r0, #4
   bdc8a:	b007      	add	sp, #28
   bdc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bdc90 <__retarget_lock_acquire_recursive>:
   bdc90:	4770      	bx	lr

000bdc92 <__retarget_lock_release>:
   bdc92:	4770      	bx	lr

000bdc94 <__retarget_lock_release_recursive>:
   bdc94:	4770      	bx	lr

000bdc96 <__ascii_mbtowc>:
   bdc96:	b082      	sub	sp, #8
   bdc98:	b901      	cbnz	r1, bdc9c <__ascii_mbtowc+0x6>
   bdc9a:	a901      	add	r1, sp, #4
   bdc9c:	b142      	cbz	r2, bdcb0 <__ascii_mbtowc+0x1a>
   bdc9e:	b14b      	cbz	r3, bdcb4 <__ascii_mbtowc+0x1e>
   bdca0:	7813      	ldrb	r3, [r2, #0]
   bdca2:	600b      	str	r3, [r1, #0]
   bdca4:	7812      	ldrb	r2, [r2, #0]
   bdca6:	1e10      	subs	r0, r2, #0
   bdca8:	bf18      	it	ne
   bdcaa:	2001      	movne	r0, #1
   bdcac:	b002      	add	sp, #8
   bdcae:	4770      	bx	lr
   bdcb0:	4610      	mov	r0, r2
   bdcb2:	e7fb      	b.n	bdcac <__ascii_mbtowc+0x16>
   bdcb4:	f06f 0001 	mvn.w	r0, #1
   bdcb8:	e7f8      	b.n	bdcac <__ascii_mbtowc+0x16>
	...

000bdcbc <_Balloc>:
   bdcbc:	b570      	push	{r4, r5, r6, lr}
   bdcbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bdcc0:	4604      	mov	r4, r0
   bdcc2:	460d      	mov	r5, r1
   bdcc4:	b976      	cbnz	r6, bdce4 <_Balloc+0x28>
   bdcc6:	2010      	movs	r0, #16
   bdcc8:	f7fb f8f0 	bl	b8eac <malloc>
   bdccc:	4602      	mov	r2, r0
   bdcce:	6260      	str	r0, [r4, #36]	; 0x24
   bdcd0:	b920      	cbnz	r0, bdcdc <_Balloc+0x20>
   bdcd2:	4b18      	ldr	r3, [pc, #96]	; (bdd34 <_Balloc+0x78>)
   bdcd4:	4818      	ldr	r0, [pc, #96]	; (bdd38 <_Balloc+0x7c>)
   bdcd6:	2166      	movs	r1, #102	; 0x66
   bdcd8:	f7fb f928 	bl	b8f2c <__assert_func>
   bdcdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bdce0:	6006      	str	r6, [r0, #0]
   bdce2:	60c6      	str	r6, [r0, #12]
   bdce4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bdce6:	68f3      	ldr	r3, [r6, #12]
   bdce8:	b183      	cbz	r3, bdd0c <_Balloc+0x50>
   bdcea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bdcec:	68db      	ldr	r3, [r3, #12]
   bdcee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bdcf2:	b9b8      	cbnz	r0, bdd24 <_Balloc+0x68>
   bdcf4:	2101      	movs	r1, #1
   bdcf6:	fa01 f605 	lsl.w	r6, r1, r5
   bdcfa:	1d72      	adds	r2, r6, #5
   bdcfc:	0092      	lsls	r2, r2, #2
   bdcfe:	4620      	mov	r0, r4
   bdd00:	f000 fc9d 	bl	be63e <_calloc_r>
   bdd04:	b160      	cbz	r0, bdd20 <_Balloc+0x64>
   bdd06:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bdd0a:	e00e      	b.n	bdd2a <_Balloc+0x6e>
   bdd0c:	2221      	movs	r2, #33	; 0x21
   bdd0e:	2104      	movs	r1, #4
   bdd10:	4620      	mov	r0, r4
   bdd12:	f000 fc94 	bl	be63e <_calloc_r>
   bdd16:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bdd18:	60f0      	str	r0, [r6, #12]
   bdd1a:	68db      	ldr	r3, [r3, #12]
   bdd1c:	2b00      	cmp	r3, #0
   bdd1e:	d1e4      	bne.n	bdcea <_Balloc+0x2e>
   bdd20:	2000      	movs	r0, #0
   bdd22:	bd70      	pop	{r4, r5, r6, pc}
   bdd24:	6802      	ldr	r2, [r0, #0]
   bdd26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bdd2a:	2300      	movs	r3, #0
   bdd2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bdd30:	e7f7      	b.n	bdd22 <_Balloc+0x66>
   bdd32:	bf00      	nop
   bdd34:	000bf14d 	.word	0x000bf14d
   bdd38:	000bf3a8 	.word	0x000bf3a8

000bdd3c <_Bfree>:
   bdd3c:	b570      	push	{r4, r5, r6, lr}
   bdd3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bdd40:	4605      	mov	r5, r0
   bdd42:	460c      	mov	r4, r1
   bdd44:	b976      	cbnz	r6, bdd64 <_Bfree+0x28>
   bdd46:	2010      	movs	r0, #16
   bdd48:	f7fb f8b0 	bl	b8eac <malloc>
   bdd4c:	4602      	mov	r2, r0
   bdd4e:	6268      	str	r0, [r5, #36]	; 0x24
   bdd50:	b920      	cbnz	r0, bdd5c <_Bfree+0x20>
   bdd52:	4b09      	ldr	r3, [pc, #36]	; (bdd78 <_Bfree+0x3c>)
   bdd54:	4809      	ldr	r0, [pc, #36]	; (bdd7c <_Bfree+0x40>)
   bdd56:	218a      	movs	r1, #138	; 0x8a
   bdd58:	f7fb f8e8 	bl	b8f2c <__assert_func>
   bdd5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bdd60:	6006      	str	r6, [r0, #0]
   bdd62:	60c6      	str	r6, [r0, #12]
   bdd64:	b13c      	cbz	r4, bdd76 <_Bfree+0x3a>
   bdd66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bdd68:	6862      	ldr	r2, [r4, #4]
   bdd6a:	68db      	ldr	r3, [r3, #12]
   bdd6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bdd70:	6021      	str	r1, [r4, #0]
   bdd72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bdd76:	bd70      	pop	{r4, r5, r6, pc}
   bdd78:	000bf14d 	.word	0x000bf14d
   bdd7c:	000bf3a8 	.word	0x000bf3a8

000bdd80 <__multadd>:
   bdd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bdd84:	690d      	ldr	r5, [r1, #16]
   bdd86:	4607      	mov	r7, r0
   bdd88:	460c      	mov	r4, r1
   bdd8a:	461e      	mov	r6, r3
   bdd8c:	f101 0c14 	add.w	ip, r1, #20
   bdd90:	2000      	movs	r0, #0
   bdd92:	f8dc 3000 	ldr.w	r3, [ip]
   bdd96:	b299      	uxth	r1, r3
   bdd98:	fb02 6101 	mla	r1, r2, r1, r6
   bdd9c:	0c1e      	lsrs	r6, r3, #16
   bdd9e:	0c0b      	lsrs	r3, r1, #16
   bdda0:	fb02 3306 	mla	r3, r2, r6, r3
   bdda4:	b289      	uxth	r1, r1
   bdda6:	3001      	adds	r0, #1
   bdda8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bddac:	4285      	cmp	r5, r0
   bddae:	f84c 1b04 	str.w	r1, [ip], #4
   bddb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bddb6:	dcec      	bgt.n	bdd92 <__multadd+0x12>
   bddb8:	b30e      	cbz	r6, bddfe <__multadd+0x7e>
   bddba:	68a3      	ldr	r3, [r4, #8]
   bddbc:	42ab      	cmp	r3, r5
   bddbe:	dc19      	bgt.n	bddf4 <__multadd+0x74>
   bddc0:	6861      	ldr	r1, [r4, #4]
   bddc2:	4638      	mov	r0, r7
   bddc4:	3101      	adds	r1, #1
   bddc6:	f7ff ff79 	bl	bdcbc <_Balloc>
   bddca:	4680      	mov	r8, r0
   bddcc:	b928      	cbnz	r0, bddda <__multadd+0x5a>
   bddce:	4602      	mov	r2, r0
   bddd0:	4b0c      	ldr	r3, [pc, #48]	; (bde04 <__multadd+0x84>)
   bddd2:	480d      	ldr	r0, [pc, #52]	; (bde08 <__multadd+0x88>)
   bddd4:	21b5      	movs	r1, #181	; 0xb5
   bddd6:	f7fb f8a9 	bl	b8f2c <__assert_func>
   bddda:	6922      	ldr	r2, [r4, #16]
   bdddc:	3202      	adds	r2, #2
   bddde:	f104 010c 	add.w	r1, r4, #12
   bdde2:	0092      	lsls	r2, r2, #2
   bdde4:	300c      	adds	r0, #12
   bdde6:	f7fe fbc7 	bl	bc578 <memcpy>
   bddea:	4621      	mov	r1, r4
   bddec:	4638      	mov	r0, r7
   bddee:	f7ff ffa5 	bl	bdd3c <_Bfree>
   bddf2:	4644      	mov	r4, r8
   bddf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bddf8:	3501      	adds	r5, #1
   bddfa:	615e      	str	r6, [r3, #20]
   bddfc:	6125      	str	r5, [r4, #16]
   bddfe:	4620      	mov	r0, r4
   bde00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bde04:	000bf321 	.word	0x000bf321
   bde08:	000bf3a8 	.word	0x000bf3a8

000bde0c <__s2b>:
   bde0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bde10:	460c      	mov	r4, r1
   bde12:	4615      	mov	r5, r2
   bde14:	461f      	mov	r7, r3
   bde16:	2209      	movs	r2, #9
   bde18:	3308      	adds	r3, #8
   bde1a:	4606      	mov	r6, r0
   bde1c:	fb93 f3f2 	sdiv	r3, r3, r2
   bde20:	2100      	movs	r1, #0
   bde22:	2201      	movs	r2, #1
   bde24:	429a      	cmp	r2, r3
   bde26:	db09      	blt.n	bde3c <__s2b+0x30>
   bde28:	4630      	mov	r0, r6
   bde2a:	f7ff ff47 	bl	bdcbc <_Balloc>
   bde2e:	b940      	cbnz	r0, bde42 <__s2b+0x36>
   bde30:	4602      	mov	r2, r0
   bde32:	4b19      	ldr	r3, [pc, #100]	; (bde98 <__s2b+0x8c>)
   bde34:	4819      	ldr	r0, [pc, #100]	; (bde9c <__s2b+0x90>)
   bde36:	21ce      	movs	r1, #206	; 0xce
   bde38:	f7fb f878 	bl	b8f2c <__assert_func>
   bde3c:	0052      	lsls	r2, r2, #1
   bde3e:	3101      	adds	r1, #1
   bde40:	e7f0      	b.n	bde24 <__s2b+0x18>
   bde42:	9b08      	ldr	r3, [sp, #32]
   bde44:	6143      	str	r3, [r0, #20]
   bde46:	2d09      	cmp	r5, #9
   bde48:	f04f 0301 	mov.w	r3, #1
   bde4c:	6103      	str	r3, [r0, #16]
   bde4e:	dd16      	ble.n	bde7e <__s2b+0x72>
   bde50:	f104 0909 	add.w	r9, r4, #9
   bde54:	46c8      	mov	r8, r9
   bde56:	442c      	add	r4, r5
   bde58:	f818 3b01 	ldrb.w	r3, [r8], #1
   bde5c:	4601      	mov	r1, r0
   bde5e:	3b30      	subs	r3, #48	; 0x30
   bde60:	220a      	movs	r2, #10
   bde62:	4630      	mov	r0, r6
   bde64:	f7ff ff8c 	bl	bdd80 <__multadd>
   bde68:	45a0      	cmp	r8, r4
   bde6a:	d1f5      	bne.n	bde58 <__s2b+0x4c>
   bde6c:	f1a5 0408 	sub.w	r4, r5, #8
   bde70:	444c      	add	r4, r9
   bde72:	1b2d      	subs	r5, r5, r4
   bde74:	1963      	adds	r3, r4, r5
   bde76:	42bb      	cmp	r3, r7
   bde78:	db04      	blt.n	bde84 <__s2b+0x78>
   bde7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bde7e:	340a      	adds	r4, #10
   bde80:	2509      	movs	r5, #9
   bde82:	e7f6      	b.n	bde72 <__s2b+0x66>
   bde84:	f814 3b01 	ldrb.w	r3, [r4], #1
   bde88:	4601      	mov	r1, r0
   bde8a:	3b30      	subs	r3, #48	; 0x30
   bde8c:	220a      	movs	r2, #10
   bde8e:	4630      	mov	r0, r6
   bde90:	f7ff ff76 	bl	bdd80 <__multadd>
   bde94:	e7ee      	b.n	bde74 <__s2b+0x68>
   bde96:	bf00      	nop
   bde98:	000bf321 	.word	0x000bf321
   bde9c:	000bf3a8 	.word	0x000bf3a8

000bdea0 <__hi0bits>:
   bdea0:	0c03      	lsrs	r3, r0, #16
   bdea2:	041b      	lsls	r3, r3, #16
   bdea4:	b9d3      	cbnz	r3, bdedc <__hi0bits+0x3c>
   bdea6:	0400      	lsls	r0, r0, #16
   bdea8:	2310      	movs	r3, #16
   bdeaa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bdeae:	bf04      	itt	eq
   bdeb0:	0200      	lsleq	r0, r0, #8
   bdeb2:	3308      	addeq	r3, #8
   bdeb4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bdeb8:	bf04      	itt	eq
   bdeba:	0100      	lsleq	r0, r0, #4
   bdebc:	3304      	addeq	r3, #4
   bdebe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bdec2:	bf04      	itt	eq
   bdec4:	0080      	lsleq	r0, r0, #2
   bdec6:	3302      	addeq	r3, #2
   bdec8:	2800      	cmp	r0, #0
   bdeca:	db05      	blt.n	bded8 <__hi0bits+0x38>
   bdecc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bded0:	f103 0301 	add.w	r3, r3, #1
   bded4:	bf08      	it	eq
   bded6:	2320      	moveq	r3, #32
   bded8:	4618      	mov	r0, r3
   bdeda:	4770      	bx	lr
   bdedc:	2300      	movs	r3, #0
   bdede:	e7e4      	b.n	bdeaa <__hi0bits+0xa>

000bdee0 <__lo0bits>:
   bdee0:	6803      	ldr	r3, [r0, #0]
   bdee2:	f013 0207 	ands.w	r2, r3, #7
   bdee6:	4601      	mov	r1, r0
   bdee8:	d00b      	beq.n	bdf02 <__lo0bits+0x22>
   bdeea:	07da      	lsls	r2, r3, #31
   bdeec:	d423      	bmi.n	bdf36 <__lo0bits+0x56>
   bdeee:	0798      	lsls	r0, r3, #30
   bdef0:	bf49      	itett	mi
   bdef2:	085b      	lsrmi	r3, r3, #1
   bdef4:	089b      	lsrpl	r3, r3, #2
   bdef6:	2001      	movmi	r0, #1
   bdef8:	600b      	strmi	r3, [r1, #0]
   bdefa:	bf5c      	itt	pl
   bdefc:	600b      	strpl	r3, [r1, #0]
   bdefe:	2002      	movpl	r0, #2
   bdf00:	4770      	bx	lr
   bdf02:	b298      	uxth	r0, r3
   bdf04:	b9a8      	cbnz	r0, bdf32 <__lo0bits+0x52>
   bdf06:	0c1b      	lsrs	r3, r3, #16
   bdf08:	2010      	movs	r0, #16
   bdf0a:	b2da      	uxtb	r2, r3
   bdf0c:	b90a      	cbnz	r2, bdf12 <__lo0bits+0x32>
   bdf0e:	3008      	adds	r0, #8
   bdf10:	0a1b      	lsrs	r3, r3, #8
   bdf12:	071a      	lsls	r2, r3, #28
   bdf14:	bf04      	itt	eq
   bdf16:	091b      	lsreq	r3, r3, #4
   bdf18:	3004      	addeq	r0, #4
   bdf1a:	079a      	lsls	r2, r3, #30
   bdf1c:	bf04      	itt	eq
   bdf1e:	089b      	lsreq	r3, r3, #2
   bdf20:	3002      	addeq	r0, #2
   bdf22:	07da      	lsls	r2, r3, #31
   bdf24:	d403      	bmi.n	bdf2e <__lo0bits+0x4e>
   bdf26:	085b      	lsrs	r3, r3, #1
   bdf28:	f100 0001 	add.w	r0, r0, #1
   bdf2c:	d005      	beq.n	bdf3a <__lo0bits+0x5a>
   bdf2e:	600b      	str	r3, [r1, #0]
   bdf30:	4770      	bx	lr
   bdf32:	4610      	mov	r0, r2
   bdf34:	e7e9      	b.n	bdf0a <__lo0bits+0x2a>
   bdf36:	2000      	movs	r0, #0
   bdf38:	4770      	bx	lr
   bdf3a:	2020      	movs	r0, #32
   bdf3c:	4770      	bx	lr
	...

000bdf40 <__i2b>:
   bdf40:	b510      	push	{r4, lr}
   bdf42:	460c      	mov	r4, r1
   bdf44:	2101      	movs	r1, #1
   bdf46:	f7ff feb9 	bl	bdcbc <_Balloc>
   bdf4a:	4602      	mov	r2, r0
   bdf4c:	b928      	cbnz	r0, bdf5a <__i2b+0x1a>
   bdf4e:	4b05      	ldr	r3, [pc, #20]	; (bdf64 <__i2b+0x24>)
   bdf50:	4805      	ldr	r0, [pc, #20]	; (bdf68 <__i2b+0x28>)
   bdf52:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bdf56:	f7fa ffe9 	bl	b8f2c <__assert_func>
   bdf5a:	2301      	movs	r3, #1
   bdf5c:	6144      	str	r4, [r0, #20]
   bdf5e:	6103      	str	r3, [r0, #16]
   bdf60:	bd10      	pop	{r4, pc}
   bdf62:	bf00      	nop
   bdf64:	000bf321 	.word	0x000bf321
   bdf68:	000bf3a8 	.word	0x000bf3a8

000bdf6c <__multiply>:
   bdf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdf70:	4691      	mov	r9, r2
   bdf72:	690a      	ldr	r2, [r1, #16]
   bdf74:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bdf78:	429a      	cmp	r2, r3
   bdf7a:	bfb8      	it	lt
   bdf7c:	460b      	movlt	r3, r1
   bdf7e:	460c      	mov	r4, r1
   bdf80:	bfbc      	itt	lt
   bdf82:	464c      	movlt	r4, r9
   bdf84:	4699      	movlt	r9, r3
   bdf86:	6927      	ldr	r7, [r4, #16]
   bdf88:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bdf8c:	68a3      	ldr	r3, [r4, #8]
   bdf8e:	6861      	ldr	r1, [r4, #4]
   bdf90:	eb07 060a 	add.w	r6, r7, sl
   bdf94:	42b3      	cmp	r3, r6
   bdf96:	b085      	sub	sp, #20
   bdf98:	bfb8      	it	lt
   bdf9a:	3101      	addlt	r1, #1
   bdf9c:	f7ff fe8e 	bl	bdcbc <_Balloc>
   bdfa0:	b930      	cbnz	r0, bdfb0 <__multiply+0x44>
   bdfa2:	4602      	mov	r2, r0
   bdfa4:	4b44      	ldr	r3, [pc, #272]	; (be0b8 <__multiply+0x14c>)
   bdfa6:	4845      	ldr	r0, [pc, #276]	; (be0bc <__multiply+0x150>)
   bdfa8:	f240 115d 	movw	r1, #349	; 0x15d
   bdfac:	f7fa ffbe 	bl	b8f2c <__assert_func>
   bdfb0:	f100 0514 	add.w	r5, r0, #20
   bdfb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bdfb8:	462b      	mov	r3, r5
   bdfba:	2200      	movs	r2, #0
   bdfbc:	4543      	cmp	r3, r8
   bdfbe:	d321      	bcc.n	be004 <__multiply+0x98>
   bdfc0:	f104 0314 	add.w	r3, r4, #20
   bdfc4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bdfc8:	f109 0314 	add.w	r3, r9, #20
   bdfcc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bdfd0:	9202      	str	r2, [sp, #8]
   bdfd2:	1b3a      	subs	r2, r7, r4
   bdfd4:	3a15      	subs	r2, #21
   bdfd6:	f022 0203 	bic.w	r2, r2, #3
   bdfda:	3204      	adds	r2, #4
   bdfdc:	f104 0115 	add.w	r1, r4, #21
   bdfe0:	428f      	cmp	r7, r1
   bdfe2:	bf38      	it	cc
   bdfe4:	2204      	movcc	r2, #4
   bdfe6:	9201      	str	r2, [sp, #4]
   bdfe8:	9a02      	ldr	r2, [sp, #8]
   bdfea:	9303      	str	r3, [sp, #12]
   bdfec:	429a      	cmp	r2, r3
   bdfee:	d80c      	bhi.n	be00a <__multiply+0x9e>
   bdff0:	2e00      	cmp	r6, #0
   bdff2:	dd03      	ble.n	bdffc <__multiply+0x90>
   bdff4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bdff8:	2b00      	cmp	r3, #0
   bdffa:	d05a      	beq.n	be0b2 <__multiply+0x146>
   bdffc:	6106      	str	r6, [r0, #16]
   bdffe:	b005      	add	sp, #20
   be000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be004:	f843 2b04 	str.w	r2, [r3], #4
   be008:	e7d8      	b.n	bdfbc <__multiply+0x50>
   be00a:	f8b3 a000 	ldrh.w	sl, [r3]
   be00e:	f1ba 0f00 	cmp.w	sl, #0
   be012:	d024      	beq.n	be05e <__multiply+0xf2>
   be014:	f104 0e14 	add.w	lr, r4, #20
   be018:	46a9      	mov	r9, r5
   be01a:	f04f 0c00 	mov.w	ip, #0
   be01e:	f85e 2b04 	ldr.w	r2, [lr], #4
   be022:	f8d9 1000 	ldr.w	r1, [r9]
   be026:	fa1f fb82 	uxth.w	fp, r2
   be02a:	b289      	uxth	r1, r1
   be02c:	fb0a 110b 	mla	r1, sl, fp, r1
   be030:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   be034:	f8d9 2000 	ldr.w	r2, [r9]
   be038:	4461      	add	r1, ip
   be03a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   be03e:	fb0a c20b 	mla	r2, sl, fp, ip
   be042:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   be046:	b289      	uxth	r1, r1
   be048:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   be04c:	4577      	cmp	r7, lr
   be04e:	f849 1b04 	str.w	r1, [r9], #4
   be052:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   be056:	d8e2      	bhi.n	be01e <__multiply+0xb2>
   be058:	9a01      	ldr	r2, [sp, #4]
   be05a:	f845 c002 	str.w	ip, [r5, r2]
   be05e:	9a03      	ldr	r2, [sp, #12]
   be060:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   be064:	3304      	adds	r3, #4
   be066:	f1b9 0f00 	cmp.w	r9, #0
   be06a:	d020      	beq.n	be0ae <__multiply+0x142>
   be06c:	6829      	ldr	r1, [r5, #0]
   be06e:	f104 0c14 	add.w	ip, r4, #20
   be072:	46ae      	mov	lr, r5
   be074:	f04f 0a00 	mov.w	sl, #0
   be078:	f8bc b000 	ldrh.w	fp, [ip]
   be07c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   be080:	fb09 220b 	mla	r2, r9, fp, r2
   be084:	4492      	add	sl, r2
   be086:	b289      	uxth	r1, r1
   be088:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   be08c:	f84e 1b04 	str.w	r1, [lr], #4
   be090:	f85c 2b04 	ldr.w	r2, [ip], #4
   be094:	f8be 1000 	ldrh.w	r1, [lr]
   be098:	0c12      	lsrs	r2, r2, #16
   be09a:	fb09 1102 	mla	r1, r9, r2, r1
   be09e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   be0a2:	4567      	cmp	r7, ip
   be0a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   be0a8:	d8e6      	bhi.n	be078 <__multiply+0x10c>
   be0aa:	9a01      	ldr	r2, [sp, #4]
   be0ac:	50a9      	str	r1, [r5, r2]
   be0ae:	3504      	adds	r5, #4
   be0b0:	e79a      	b.n	bdfe8 <__multiply+0x7c>
   be0b2:	3e01      	subs	r6, #1
   be0b4:	e79c      	b.n	bdff0 <__multiply+0x84>
   be0b6:	bf00      	nop
   be0b8:	000bf321 	.word	0x000bf321
   be0bc:	000bf3a8 	.word	0x000bf3a8

000be0c0 <__pow5mult>:
   be0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   be0c4:	4615      	mov	r5, r2
   be0c6:	f012 0203 	ands.w	r2, r2, #3
   be0ca:	4606      	mov	r6, r0
   be0cc:	460f      	mov	r7, r1
   be0ce:	d007      	beq.n	be0e0 <__pow5mult+0x20>
   be0d0:	4c25      	ldr	r4, [pc, #148]	; (be168 <__pow5mult+0xa8>)
   be0d2:	3a01      	subs	r2, #1
   be0d4:	2300      	movs	r3, #0
   be0d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   be0da:	f7ff fe51 	bl	bdd80 <__multadd>
   be0de:	4607      	mov	r7, r0
   be0e0:	10ad      	asrs	r5, r5, #2
   be0e2:	d03d      	beq.n	be160 <__pow5mult+0xa0>
   be0e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   be0e6:	b97c      	cbnz	r4, be108 <__pow5mult+0x48>
   be0e8:	2010      	movs	r0, #16
   be0ea:	f7fa fedf 	bl	b8eac <malloc>
   be0ee:	4602      	mov	r2, r0
   be0f0:	6270      	str	r0, [r6, #36]	; 0x24
   be0f2:	b928      	cbnz	r0, be100 <__pow5mult+0x40>
   be0f4:	4b1d      	ldr	r3, [pc, #116]	; (be16c <__pow5mult+0xac>)
   be0f6:	481e      	ldr	r0, [pc, #120]	; (be170 <__pow5mult+0xb0>)
   be0f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   be0fc:	f7fa ff16 	bl	b8f2c <__assert_func>
   be100:	e9c0 4401 	strd	r4, r4, [r0, #4]
   be104:	6004      	str	r4, [r0, #0]
   be106:	60c4      	str	r4, [r0, #12]
   be108:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   be10c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   be110:	b94c      	cbnz	r4, be126 <__pow5mult+0x66>
   be112:	f240 2171 	movw	r1, #625	; 0x271
   be116:	4630      	mov	r0, r6
   be118:	f7ff ff12 	bl	bdf40 <__i2b>
   be11c:	2300      	movs	r3, #0
   be11e:	f8c8 0008 	str.w	r0, [r8, #8]
   be122:	4604      	mov	r4, r0
   be124:	6003      	str	r3, [r0, #0]
   be126:	f04f 0900 	mov.w	r9, #0
   be12a:	07eb      	lsls	r3, r5, #31
   be12c:	d50a      	bpl.n	be144 <__pow5mult+0x84>
   be12e:	4639      	mov	r1, r7
   be130:	4622      	mov	r2, r4
   be132:	4630      	mov	r0, r6
   be134:	f7ff ff1a 	bl	bdf6c <__multiply>
   be138:	4639      	mov	r1, r7
   be13a:	4680      	mov	r8, r0
   be13c:	4630      	mov	r0, r6
   be13e:	f7ff fdfd 	bl	bdd3c <_Bfree>
   be142:	4647      	mov	r7, r8
   be144:	106d      	asrs	r5, r5, #1
   be146:	d00b      	beq.n	be160 <__pow5mult+0xa0>
   be148:	6820      	ldr	r0, [r4, #0]
   be14a:	b938      	cbnz	r0, be15c <__pow5mult+0x9c>
   be14c:	4622      	mov	r2, r4
   be14e:	4621      	mov	r1, r4
   be150:	4630      	mov	r0, r6
   be152:	f7ff ff0b 	bl	bdf6c <__multiply>
   be156:	6020      	str	r0, [r4, #0]
   be158:	f8c0 9000 	str.w	r9, [r0]
   be15c:	4604      	mov	r4, r0
   be15e:	e7e4      	b.n	be12a <__pow5mult+0x6a>
   be160:	4638      	mov	r0, r7
   be162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   be166:	bf00      	nop
   be168:	000bf4f8 	.word	0x000bf4f8
   be16c:	000bf14d 	.word	0x000bf14d
   be170:	000bf3a8 	.word	0x000bf3a8

000be174 <__lshift>:
   be174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be178:	460c      	mov	r4, r1
   be17a:	6849      	ldr	r1, [r1, #4]
   be17c:	6923      	ldr	r3, [r4, #16]
   be17e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   be182:	68a3      	ldr	r3, [r4, #8]
   be184:	4607      	mov	r7, r0
   be186:	4691      	mov	r9, r2
   be188:	ea4f 1a62 	mov.w	sl, r2, asr #5
   be18c:	f108 0601 	add.w	r6, r8, #1
   be190:	42b3      	cmp	r3, r6
   be192:	db0b      	blt.n	be1ac <__lshift+0x38>
   be194:	4638      	mov	r0, r7
   be196:	f7ff fd91 	bl	bdcbc <_Balloc>
   be19a:	4605      	mov	r5, r0
   be19c:	b948      	cbnz	r0, be1b2 <__lshift+0x3e>
   be19e:	4602      	mov	r2, r0
   be1a0:	4b2a      	ldr	r3, [pc, #168]	; (be24c <__lshift+0xd8>)
   be1a2:	482b      	ldr	r0, [pc, #172]	; (be250 <__lshift+0xdc>)
   be1a4:	f240 11d9 	movw	r1, #473	; 0x1d9
   be1a8:	f7fa fec0 	bl	b8f2c <__assert_func>
   be1ac:	3101      	adds	r1, #1
   be1ae:	005b      	lsls	r3, r3, #1
   be1b0:	e7ee      	b.n	be190 <__lshift+0x1c>
   be1b2:	2300      	movs	r3, #0
   be1b4:	f100 0114 	add.w	r1, r0, #20
   be1b8:	f100 0210 	add.w	r2, r0, #16
   be1bc:	4618      	mov	r0, r3
   be1be:	4553      	cmp	r3, sl
   be1c0:	db37      	blt.n	be232 <__lshift+0xbe>
   be1c2:	6920      	ldr	r0, [r4, #16]
   be1c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   be1c8:	f104 0314 	add.w	r3, r4, #20
   be1cc:	f019 091f 	ands.w	r9, r9, #31
   be1d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   be1d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   be1d8:	d02f      	beq.n	be23a <__lshift+0xc6>
   be1da:	f1c9 0e20 	rsb	lr, r9, #32
   be1de:	468a      	mov	sl, r1
   be1e0:	f04f 0c00 	mov.w	ip, #0
   be1e4:	681a      	ldr	r2, [r3, #0]
   be1e6:	fa02 f209 	lsl.w	r2, r2, r9
   be1ea:	ea42 020c 	orr.w	r2, r2, ip
   be1ee:	f84a 2b04 	str.w	r2, [sl], #4
   be1f2:	f853 2b04 	ldr.w	r2, [r3], #4
   be1f6:	4298      	cmp	r0, r3
   be1f8:	fa22 fc0e 	lsr.w	ip, r2, lr
   be1fc:	d8f2      	bhi.n	be1e4 <__lshift+0x70>
   be1fe:	1b03      	subs	r3, r0, r4
   be200:	3b15      	subs	r3, #21
   be202:	f023 0303 	bic.w	r3, r3, #3
   be206:	3304      	adds	r3, #4
   be208:	f104 0215 	add.w	r2, r4, #21
   be20c:	4290      	cmp	r0, r2
   be20e:	bf38      	it	cc
   be210:	2304      	movcc	r3, #4
   be212:	f841 c003 	str.w	ip, [r1, r3]
   be216:	f1bc 0f00 	cmp.w	ip, #0
   be21a:	d001      	beq.n	be220 <__lshift+0xac>
   be21c:	f108 0602 	add.w	r6, r8, #2
   be220:	3e01      	subs	r6, #1
   be222:	4638      	mov	r0, r7
   be224:	612e      	str	r6, [r5, #16]
   be226:	4621      	mov	r1, r4
   be228:	f7ff fd88 	bl	bdd3c <_Bfree>
   be22c:	4628      	mov	r0, r5
   be22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be232:	f842 0f04 	str.w	r0, [r2, #4]!
   be236:	3301      	adds	r3, #1
   be238:	e7c1      	b.n	be1be <__lshift+0x4a>
   be23a:	3904      	subs	r1, #4
   be23c:	f853 2b04 	ldr.w	r2, [r3], #4
   be240:	f841 2f04 	str.w	r2, [r1, #4]!
   be244:	4298      	cmp	r0, r3
   be246:	d8f9      	bhi.n	be23c <__lshift+0xc8>
   be248:	e7ea      	b.n	be220 <__lshift+0xac>
   be24a:	bf00      	nop
   be24c:	000bf321 	.word	0x000bf321
   be250:	000bf3a8 	.word	0x000bf3a8

000be254 <__mcmp>:
   be254:	b530      	push	{r4, r5, lr}
   be256:	6902      	ldr	r2, [r0, #16]
   be258:	690c      	ldr	r4, [r1, #16]
   be25a:	1b12      	subs	r2, r2, r4
   be25c:	d10e      	bne.n	be27c <__mcmp+0x28>
   be25e:	f100 0314 	add.w	r3, r0, #20
   be262:	3114      	adds	r1, #20
   be264:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   be268:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   be26c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   be270:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   be274:	42a5      	cmp	r5, r4
   be276:	d003      	beq.n	be280 <__mcmp+0x2c>
   be278:	d305      	bcc.n	be286 <__mcmp+0x32>
   be27a:	2201      	movs	r2, #1
   be27c:	4610      	mov	r0, r2
   be27e:	bd30      	pop	{r4, r5, pc}
   be280:	4283      	cmp	r3, r0
   be282:	d3f3      	bcc.n	be26c <__mcmp+0x18>
   be284:	e7fa      	b.n	be27c <__mcmp+0x28>
   be286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   be28a:	e7f7      	b.n	be27c <__mcmp+0x28>

000be28c <__mdiff>:
   be28c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be290:	460c      	mov	r4, r1
   be292:	4606      	mov	r6, r0
   be294:	4611      	mov	r1, r2
   be296:	4620      	mov	r0, r4
   be298:	4690      	mov	r8, r2
   be29a:	f7ff ffdb 	bl	be254 <__mcmp>
   be29e:	1e05      	subs	r5, r0, #0
   be2a0:	d110      	bne.n	be2c4 <__mdiff+0x38>
   be2a2:	4629      	mov	r1, r5
   be2a4:	4630      	mov	r0, r6
   be2a6:	f7ff fd09 	bl	bdcbc <_Balloc>
   be2aa:	b930      	cbnz	r0, be2ba <__mdiff+0x2e>
   be2ac:	4b3a      	ldr	r3, [pc, #232]	; (be398 <__mdiff+0x10c>)
   be2ae:	4602      	mov	r2, r0
   be2b0:	f240 2132 	movw	r1, #562	; 0x232
   be2b4:	4839      	ldr	r0, [pc, #228]	; (be39c <__mdiff+0x110>)
   be2b6:	f7fa fe39 	bl	b8f2c <__assert_func>
   be2ba:	2301      	movs	r3, #1
   be2bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   be2c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be2c4:	bfa4      	itt	ge
   be2c6:	4643      	movge	r3, r8
   be2c8:	46a0      	movge	r8, r4
   be2ca:	4630      	mov	r0, r6
   be2cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   be2d0:	bfa6      	itte	ge
   be2d2:	461c      	movge	r4, r3
   be2d4:	2500      	movge	r5, #0
   be2d6:	2501      	movlt	r5, #1
   be2d8:	f7ff fcf0 	bl	bdcbc <_Balloc>
   be2dc:	b920      	cbnz	r0, be2e8 <__mdiff+0x5c>
   be2de:	4b2e      	ldr	r3, [pc, #184]	; (be398 <__mdiff+0x10c>)
   be2e0:	4602      	mov	r2, r0
   be2e2:	f44f 7110 	mov.w	r1, #576	; 0x240
   be2e6:	e7e5      	b.n	be2b4 <__mdiff+0x28>
   be2e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   be2ec:	6926      	ldr	r6, [r4, #16]
   be2ee:	60c5      	str	r5, [r0, #12]
   be2f0:	f104 0914 	add.w	r9, r4, #20
   be2f4:	f108 0514 	add.w	r5, r8, #20
   be2f8:	f100 0e14 	add.w	lr, r0, #20
   be2fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   be300:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   be304:	f108 0210 	add.w	r2, r8, #16
   be308:	46f2      	mov	sl, lr
   be30a:	2100      	movs	r1, #0
   be30c:	f859 3b04 	ldr.w	r3, [r9], #4
   be310:	f852 bf04 	ldr.w	fp, [r2, #4]!
   be314:	fa1f f883 	uxth.w	r8, r3
   be318:	fa11 f18b 	uxtah	r1, r1, fp
   be31c:	0c1b      	lsrs	r3, r3, #16
   be31e:	eba1 0808 	sub.w	r8, r1, r8
   be322:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   be326:	eb03 4328 	add.w	r3, r3, r8, asr #16
   be32a:	fa1f f888 	uxth.w	r8, r8
   be32e:	1419      	asrs	r1, r3, #16
   be330:	454e      	cmp	r6, r9
   be332:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   be336:	f84a 3b04 	str.w	r3, [sl], #4
   be33a:	d8e7      	bhi.n	be30c <__mdiff+0x80>
   be33c:	1b33      	subs	r3, r6, r4
   be33e:	3b15      	subs	r3, #21
   be340:	f023 0303 	bic.w	r3, r3, #3
   be344:	3304      	adds	r3, #4
   be346:	3415      	adds	r4, #21
   be348:	42a6      	cmp	r6, r4
   be34a:	bf38      	it	cc
   be34c:	2304      	movcc	r3, #4
   be34e:	441d      	add	r5, r3
   be350:	4473      	add	r3, lr
   be352:	469e      	mov	lr, r3
   be354:	462e      	mov	r6, r5
   be356:	4566      	cmp	r6, ip
   be358:	d30e      	bcc.n	be378 <__mdiff+0xec>
   be35a:	f10c 0203 	add.w	r2, ip, #3
   be35e:	1b52      	subs	r2, r2, r5
   be360:	f022 0203 	bic.w	r2, r2, #3
   be364:	3d03      	subs	r5, #3
   be366:	45ac      	cmp	ip, r5
   be368:	bf38      	it	cc
   be36a:	2200      	movcc	r2, #0
   be36c:	441a      	add	r2, r3
   be36e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   be372:	b17b      	cbz	r3, be394 <__mdiff+0x108>
   be374:	6107      	str	r7, [r0, #16]
   be376:	e7a3      	b.n	be2c0 <__mdiff+0x34>
   be378:	f856 8b04 	ldr.w	r8, [r6], #4
   be37c:	fa11 f288 	uxtah	r2, r1, r8
   be380:	1414      	asrs	r4, r2, #16
   be382:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   be386:	b292      	uxth	r2, r2
   be388:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   be38c:	f84e 2b04 	str.w	r2, [lr], #4
   be390:	1421      	asrs	r1, r4, #16
   be392:	e7e0      	b.n	be356 <__mdiff+0xca>
   be394:	3f01      	subs	r7, #1
   be396:	e7ea      	b.n	be36e <__mdiff+0xe2>
   be398:	000bf321 	.word	0x000bf321
   be39c:	000bf3a8 	.word	0x000bf3a8

000be3a0 <__ulp>:
   be3a0:	b082      	sub	sp, #8
   be3a2:	ed8d 0b00 	vstr	d0, [sp]
   be3a6:	9b01      	ldr	r3, [sp, #4]
   be3a8:	4912      	ldr	r1, [pc, #72]	; (be3f4 <__ulp+0x54>)
   be3aa:	4019      	ands	r1, r3
   be3ac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   be3b0:	2900      	cmp	r1, #0
   be3b2:	dd05      	ble.n	be3c0 <__ulp+0x20>
   be3b4:	2200      	movs	r2, #0
   be3b6:	460b      	mov	r3, r1
   be3b8:	ec43 2b10 	vmov	d0, r2, r3
   be3bc:	b002      	add	sp, #8
   be3be:	4770      	bx	lr
   be3c0:	4249      	negs	r1, r1
   be3c2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   be3c6:	ea4f 5021 	mov.w	r0, r1, asr #20
   be3ca:	f04f 0200 	mov.w	r2, #0
   be3ce:	f04f 0300 	mov.w	r3, #0
   be3d2:	da04      	bge.n	be3de <__ulp+0x3e>
   be3d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   be3d8:	fa41 f300 	asr.w	r3, r1, r0
   be3dc:	e7ec      	b.n	be3b8 <__ulp+0x18>
   be3de:	f1a0 0114 	sub.w	r1, r0, #20
   be3e2:	291e      	cmp	r1, #30
   be3e4:	bfda      	itte	le
   be3e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   be3ea:	fa20 f101 	lsrle.w	r1, r0, r1
   be3ee:	2101      	movgt	r1, #1
   be3f0:	460a      	mov	r2, r1
   be3f2:	e7e1      	b.n	be3b8 <__ulp+0x18>
   be3f4:	7ff00000 	.word	0x7ff00000

000be3f8 <__b2d>:
   be3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be3fa:	6905      	ldr	r5, [r0, #16]
   be3fc:	f100 0714 	add.w	r7, r0, #20
   be400:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   be404:	1f2e      	subs	r6, r5, #4
   be406:	f855 4c04 	ldr.w	r4, [r5, #-4]
   be40a:	4620      	mov	r0, r4
   be40c:	f7ff fd48 	bl	bdea0 <__hi0bits>
   be410:	f1c0 0320 	rsb	r3, r0, #32
   be414:	280a      	cmp	r0, #10
   be416:	f8df c07c 	ldr.w	ip, [pc, #124]	; be494 <__b2d+0x9c>
   be41a:	600b      	str	r3, [r1, #0]
   be41c:	dc14      	bgt.n	be448 <__b2d+0x50>
   be41e:	f1c0 0e0b 	rsb	lr, r0, #11
   be422:	fa24 f10e 	lsr.w	r1, r4, lr
   be426:	42b7      	cmp	r7, r6
   be428:	ea41 030c 	orr.w	r3, r1, ip
   be42c:	bf34      	ite	cc
   be42e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   be432:	2100      	movcs	r1, #0
   be434:	3015      	adds	r0, #21
   be436:	fa04 f000 	lsl.w	r0, r4, r0
   be43a:	fa21 f10e 	lsr.w	r1, r1, lr
   be43e:	ea40 0201 	orr.w	r2, r0, r1
   be442:	ec43 2b10 	vmov	d0, r2, r3
   be446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   be448:	42b7      	cmp	r7, r6
   be44a:	bf3a      	itte	cc
   be44c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   be450:	f1a5 0608 	subcc.w	r6, r5, #8
   be454:	2100      	movcs	r1, #0
   be456:	380b      	subs	r0, #11
   be458:	d017      	beq.n	be48a <__b2d+0x92>
   be45a:	f1c0 0c20 	rsb	ip, r0, #32
   be45e:	fa04 f500 	lsl.w	r5, r4, r0
   be462:	42be      	cmp	r6, r7
   be464:	fa21 f40c 	lsr.w	r4, r1, ip
   be468:	ea45 0504 	orr.w	r5, r5, r4
   be46c:	bf8c      	ite	hi
   be46e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   be472:	2400      	movls	r4, #0
   be474:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   be478:	fa01 f000 	lsl.w	r0, r1, r0
   be47c:	fa24 f40c 	lsr.w	r4, r4, ip
   be480:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   be484:	ea40 0204 	orr.w	r2, r0, r4
   be488:	e7db      	b.n	be442 <__b2d+0x4a>
   be48a:	ea44 030c 	orr.w	r3, r4, ip
   be48e:	460a      	mov	r2, r1
   be490:	e7d7      	b.n	be442 <__b2d+0x4a>
   be492:	bf00      	nop
   be494:	3ff00000 	.word	0x3ff00000

000be498 <__d2b>:
   be498:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   be49c:	4689      	mov	r9, r1
   be49e:	2101      	movs	r1, #1
   be4a0:	ec57 6b10 	vmov	r6, r7, d0
   be4a4:	4690      	mov	r8, r2
   be4a6:	f7ff fc09 	bl	bdcbc <_Balloc>
   be4aa:	4604      	mov	r4, r0
   be4ac:	b930      	cbnz	r0, be4bc <__d2b+0x24>
   be4ae:	4602      	mov	r2, r0
   be4b0:	4b25      	ldr	r3, [pc, #148]	; (be548 <__d2b+0xb0>)
   be4b2:	4826      	ldr	r0, [pc, #152]	; (be54c <__d2b+0xb4>)
   be4b4:	f240 310a 	movw	r1, #778	; 0x30a
   be4b8:	f7fa fd38 	bl	b8f2c <__assert_func>
   be4bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   be4c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   be4c4:	bb35      	cbnz	r5, be514 <__d2b+0x7c>
   be4c6:	2e00      	cmp	r6, #0
   be4c8:	9301      	str	r3, [sp, #4]
   be4ca:	d028      	beq.n	be51e <__d2b+0x86>
   be4cc:	4668      	mov	r0, sp
   be4ce:	9600      	str	r6, [sp, #0]
   be4d0:	f7ff fd06 	bl	bdee0 <__lo0bits>
   be4d4:	9900      	ldr	r1, [sp, #0]
   be4d6:	b300      	cbz	r0, be51a <__d2b+0x82>
   be4d8:	9a01      	ldr	r2, [sp, #4]
   be4da:	f1c0 0320 	rsb	r3, r0, #32
   be4de:	fa02 f303 	lsl.w	r3, r2, r3
   be4e2:	430b      	orrs	r3, r1
   be4e4:	40c2      	lsrs	r2, r0
   be4e6:	6163      	str	r3, [r4, #20]
   be4e8:	9201      	str	r2, [sp, #4]
   be4ea:	9b01      	ldr	r3, [sp, #4]
   be4ec:	61a3      	str	r3, [r4, #24]
   be4ee:	2b00      	cmp	r3, #0
   be4f0:	bf14      	ite	ne
   be4f2:	2202      	movne	r2, #2
   be4f4:	2201      	moveq	r2, #1
   be4f6:	6122      	str	r2, [r4, #16]
   be4f8:	b1d5      	cbz	r5, be530 <__d2b+0x98>
   be4fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   be4fe:	4405      	add	r5, r0
   be500:	f8c9 5000 	str.w	r5, [r9]
   be504:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   be508:	f8c8 0000 	str.w	r0, [r8]
   be50c:	4620      	mov	r0, r4
   be50e:	b003      	add	sp, #12
   be510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   be514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   be518:	e7d5      	b.n	be4c6 <__d2b+0x2e>
   be51a:	6161      	str	r1, [r4, #20]
   be51c:	e7e5      	b.n	be4ea <__d2b+0x52>
   be51e:	a801      	add	r0, sp, #4
   be520:	f7ff fcde 	bl	bdee0 <__lo0bits>
   be524:	9b01      	ldr	r3, [sp, #4]
   be526:	6163      	str	r3, [r4, #20]
   be528:	2201      	movs	r2, #1
   be52a:	6122      	str	r2, [r4, #16]
   be52c:	3020      	adds	r0, #32
   be52e:	e7e3      	b.n	be4f8 <__d2b+0x60>
   be530:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   be534:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   be538:	f8c9 0000 	str.w	r0, [r9]
   be53c:	6918      	ldr	r0, [r3, #16]
   be53e:	f7ff fcaf 	bl	bdea0 <__hi0bits>
   be542:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   be546:	e7df      	b.n	be508 <__d2b+0x70>
   be548:	000bf321 	.word	0x000bf321
   be54c:	000bf3a8 	.word	0x000bf3a8

000be550 <__ratio>:
   be550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be554:	4688      	mov	r8, r1
   be556:	4669      	mov	r1, sp
   be558:	4681      	mov	r9, r0
   be55a:	f7ff ff4d 	bl	be3f8 <__b2d>
   be55e:	a901      	add	r1, sp, #4
   be560:	4640      	mov	r0, r8
   be562:	ec55 4b10 	vmov	r4, r5, d0
   be566:	f7ff ff47 	bl	be3f8 <__b2d>
   be56a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   be56e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   be572:	eba3 0c02 	sub.w	ip, r3, r2
   be576:	e9dd 3200 	ldrd	r3, r2, [sp]
   be57a:	1a9b      	subs	r3, r3, r2
   be57c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   be580:	ec51 0b10 	vmov	r0, r1, d0
   be584:	2b00      	cmp	r3, #0
   be586:	bfd6      	itet	le
   be588:	460a      	movle	r2, r1
   be58a:	462a      	movgt	r2, r5
   be58c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   be590:	468b      	mov	fp, r1
   be592:	462f      	mov	r7, r5
   be594:	bfd4      	ite	le
   be596:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   be59a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   be59e:	4620      	mov	r0, r4
   be5a0:	ee10 2a10 	vmov	r2, s0
   be5a4:	465b      	mov	r3, fp
   be5a6:	4639      	mov	r1, r7
   be5a8:	f7fd fdb8 	bl	bc11c <__aeabi_ddiv>
   be5ac:	ec41 0b10 	vmov	d0, r0, r1
   be5b0:	b003      	add	sp, #12
   be5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000be5b6 <__copybits>:
   be5b6:	3901      	subs	r1, #1
   be5b8:	b570      	push	{r4, r5, r6, lr}
   be5ba:	1149      	asrs	r1, r1, #5
   be5bc:	6914      	ldr	r4, [r2, #16]
   be5be:	3101      	adds	r1, #1
   be5c0:	f102 0314 	add.w	r3, r2, #20
   be5c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   be5c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   be5cc:	1f05      	subs	r5, r0, #4
   be5ce:	42a3      	cmp	r3, r4
   be5d0:	d30c      	bcc.n	be5ec <__copybits+0x36>
   be5d2:	1aa3      	subs	r3, r4, r2
   be5d4:	3b11      	subs	r3, #17
   be5d6:	f023 0303 	bic.w	r3, r3, #3
   be5da:	3211      	adds	r2, #17
   be5dc:	42a2      	cmp	r2, r4
   be5de:	bf88      	it	hi
   be5e0:	2300      	movhi	r3, #0
   be5e2:	4418      	add	r0, r3
   be5e4:	2300      	movs	r3, #0
   be5e6:	4288      	cmp	r0, r1
   be5e8:	d305      	bcc.n	be5f6 <__copybits+0x40>
   be5ea:	bd70      	pop	{r4, r5, r6, pc}
   be5ec:	f853 6b04 	ldr.w	r6, [r3], #4
   be5f0:	f845 6f04 	str.w	r6, [r5, #4]!
   be5f4:	e7eb      	b.n	be5ce <__copybits+0x18>
   be5f6:	f840 3b04 	str.w	r3, [r0], #4
   be5fa:	e7f4      	b.n	be5e6 <__copybits+0x30>

000be5fc <__any_on>:
   be5fc:	f100 0214 	add.w	r2, r0, #20
   be600:	6900      	ldr	r0, [r0, #16]
   be602:	114b      	asrs	r3, r1, #5
   be604:	4298      	cmp	r0, r3
   be606:	b510      	push	{r4, lr}
   be608:	db11      	blt.n	be62e <__any_on+0x32>
   be60a:	dd0a      	ble.n	be622 <__any_on+0x26>
   be60c:	f011 011f 	ands.w	r1, r1, #31
   be610:	d007      	beq.n	be622 <__any_on+0x26>
   be612:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   be616:	fa24 f001 	lsr.w	r0, r4, r1
   be61a:	fa00 f101 	lsl.w	r1, r0, r1
   be61e:	428c      	cmp	r4, r1
   be620:	d10b      	bne.n	be63a <__any_on+0x3e>
   be622:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   be626:	4293      	cmp	r3, r2
   be628:	d803      	bhi.n	be632 <__any_on+0x36>
   be62a:	2000      	movs	r0, #0
   be62c:	bd10      	pop	{r4, pc}
   be62e:	4603      	mov	r3, r0
   be630:	e7f7      	b.n	be622 <__any_on+0x26>
   be632:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   be636:	2900      	cmp	r1, #0
   be638:	d0f5      	beq.n	be626 <__any_on+0x2a>
   be63a:	2001      	movs	r0, #1
   be63c:	e7f6      	b.n	be62c <__any_on+0x30>

000be63e <_calloc_r>:
   be63e:	b513      	push	{r0, r1, r4, lr}
   be640:	434a      	muls	r2, r1
   be642:	4611      	mov	r1, r2
   be644:	9201      	str	r2, [sp, #4]
   be646:	f7fa fc61 	bl	b8f0c <_malloc_r>
   be64a:	4604      	mov	r4, r0
   be64c:	b118      	cbz	r0, be656 <_calloc_r+0x18>
   be64e:	9a01      	ldr	r2, [sp, #4]
   be650:	2100      	movs	r1, #0
   be652:	f7fd ffb9 	bl	bc5c8 <memset>
   be656:	4620      	mov	r0, r4
   be658:	b002      	add	sp, #8
   be65a:	bd10      	pop	{r4, pc}
   be65c:	0000      	movs	r0, r0
	...

000be660 <nan>:
   be660:	ed9f 0b01 	vldr	d0, [pc, #4]	; be668 <nan+0x8>
   be664:	4770      	bx	lr
   be666:	bf00      	nop
   be668:	00000000 	.word	0x00000000
   be66c:	7ff80000 	.word	0x7ff80000

000be670 <nanf>:
   be670:	ed9f 0a01 	vldr	s0, [pc, #4]	; be678 <nanf+0x8>
   be674:	4770      	bx	lr
   be676:	bf00      	nop
   be678:	7fc00000 	.word	0x7fc00000

000be67c <__ascii_wctomb>:
   be67c:	b149      	cbz	r1, be692 <__ascii_wctomb+0x16>
   be67e:	2aff      	cmp	r2, #255	; 0xff
   be680:	bf85      	ittet	hi
   be682:	238a      	movhi	r3, #138	; 0x8a
   be684:	6003      	strhi	r3, [r0, #0]
   be686:	700a      	strbls	r2, [r1, #0]
   be688:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   be68c:	bf98      	it	ls
   be68e:	2001      	movls	r0, #1
   be690:	4770      	bx	lr
   be692:	4608      	mov	r0, r1
   be694:	4770      	bx	lr
	...

000be698 <__aeabi_d2lz>:
   be698:	b538      	push	{r3, r4, r5, lr}
   be69a:	2200      	movs	r2, #0
   be69c:	2300      	movs	r3, #0
   be69e:	4604      	mov	r4, r0
   be6a0:	460d      	mov	r5, r1
   be6a2:	f7fd fe83 	bl	bc3ac <__aeabi_dcmplt>
   be6a6:	b928      	cbnz	r0, be6b4 <__aeabi_d2lz+0x1c>
   be6a8:	4620      	mov	r0, r4
   be6aa:	4629      	mov	r1, r5
   be6ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   be6b0:	f7fd bf2a 	b.w	bc508 <__aeabi_d2ulz>
   be6b4:	4620      	mov	r0, r4
   be6b6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   be6ba:	f7fd ff25 	bl	bc508 <__aeabi_d2ulz>
   be6be:	4240      	negs	r0, r0
   be6c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be6c4:	bd38      	pop	{r3, r4, r5, pc}
   be6c6:	bf00      	nop

000be6c8 <dynalib_user>:
   be6c8:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   be6d8:	0000 0000 6162 6973 5f63 7473 6972 676e     ....basic_string
   be6e8:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   be6f8:	6c75 206c 6f6e 2074 6176 696c 0064 6c73     ull not valid.sl
   be708:	7661 4365 756f 746e 203a 6925 0a00 6572     aveCount: %i..re
   be718:	7571 7365 2074 6f63 6564 3120 202c 6461     quest code 1, ad
   be728:	7264 7365 3a73 0020 7274 6e61 6d73 7369     dress: .transmis
   be738:	6973 6e6f 7220 6365 6569 6576 2064 7266     sion recieved fr
   be748:	6d6f 203a 6400 7665 6369 2065 6469 203a     om: .device id: 
   be758:	7400 6172 736e 696d 7373 6f69 206e 6573     .transmission se
   be768:	746e 7420 3a6f 0020 6572 7571 7365 2074     nt to: .request 
   be778:	6f63 6564 3220 202c 6461 7264 7365 3a73     code 2, address:
   be788:	0020 6f63 666e 696c 7463 7620 7265 6669      .conflict verif
   be798:	6369 7461 6f69 3a6e 0020 6170 7373 0a00     ication: .pass..
   be7a8:	6f43 6e6e 6365 6574 2064 6f74 203a 6300     Connected to: .c
   be7b8:	6e61 6f6e 2074 7263 6165 6574 7320 6474     annot create std
   be7c8:	3a3a 6576 7463 726f 6c20 7261 6567 2072     ::vector larger 
   be7d8:	6874 6e61 6d20 7861 735f 7a69 2865 0029     than max_size().
   be7e8:	6b6f 7700 6669 3a69 2c00 5300 4953 3a44     ok.wifi:.,.SSID:
   be7f8:	2520 2c73 7020 7361 7773 726f 3a64 2520      %s, password: %
   be808:	0073 6963 7974 003a 6e69 6f63 7272 6365     s.city:.incorrec
   be818:	2074 6963 7974 6e20 6d61 0065 6c73 7661     t city name.slav
   be828:	2065 6461 7264 7365 6573 2073 6f73 7472     e addresses sort
   be838:	6465 6300 7469 3a79 2520 0073 6f63 6f6c     ed.city: %s.colo
   be848:	3a72 6300 7469 2079 6f6e 2074 6573 0074     r:.city not set.
   be858:	7267 6565 316e 6700 6572 6e65 6700 6572     green1.green.gre
   be868:	6e65 0032 6172 6c69 6177 2079 6e69 6564     en2.railway inde
   be878:	3a78 2520 0069 6e69 6f63 7272 6365 2074     x: %i.incorrect 
   be888:	6172 6c69 6177 2079 6f63 6f6c 0072 6461     railway color.ad
   be898:	7264 7365 3a73 2520 0069 4c42 2045 6966     dress: %i.BLE fi
   be8a8:	696e 6873 6465 7200 7365 7465 7400 7275     nished.reset.tur
   be8b8:	696e 676e 6f20 6666 203a 6925 7200 7365     ning off: %i.res
   be8c8:	7465 6420 6e6f 0065 6572 0064 4646 3030     et done.red.FF00
   be8d8:	3030 3000 3041 3030 0030 6c62 6575 3000     00.0A0000.blue.0
   be8e8:	3030 4630 0046 3030 3030 4130 6200 6f72     000FF.00000A.bro
   be8f8:	6e77 4600 4646 3046 0030 4130 4130 3030     wn.FFFF00.0A0A00
   be908:	3000 4630 3046 0030 3030 4130 3030 6f00     .00FF00.000A00.o
   be918:	6172 676e 0065 4646 3038 3030 3000 3041     range.FF8000.0A0
   be928:	3035 0030 7570 7072 656c 3200 3030 4630     500.purple.2000F
   be938:	0046 3230 3030 4130 7000 6e69 006b 4646     F.02000A.pink.FF
   be948:	3038 3038 3000 3041 3035 0035 3761 6233     8080.0A0505.a73b
   be958:	3161 3130 382d 3931 2d32 6134 3135 622d     a101-8192-4a51-b
   be968:	3234 2d64 6561 6339 3164 6234 3431 3561     42d-ae9cd14b14a5
   be978:	3600 3445 3030 3030 2d32 3542 3341 462d     .6E400002-B5A3-F
   be988:	3933 2d33 3045 3941 452d 3035 3245 4434     393-E0A9-E50E24D
   be998:	4343 3941 0045 4536 3034 3030 3330 422d     CCA9E.6E400003-B
   be9a8:	4135 2d33 3346 3339 452d 4130 2d39 3545     5A3-F393-E0A9-E5
   be9b8:	4530 3432 4344 4143 4539 7400 0078 7872     0E24DCCA9E.tx.rx
   be9c8:	7400 6572 2e6b 6874 7765 6c63 632e 6d6f     .trek.thewcl.com
   be9d8:	6300 6174 6d00 7462 0061 6f6c 706f 7320     .cta.mbta.loop s
   be9e8:	6174 7472 2500 2c69 0020 696c 6867 2074     tart.%i, .light 
   be9f8:	6873 776f 2f00 6f6c 706f 742d 6172 6b63     show./loop-track
   bea08:	2f73 3f00 696c 656e 3d73 4700 5445 7000     s/.?lines=.GET.p
   bea18:	7261 6973 676e 7000 7261 6973 676e 6620     arsing.parsing f
   bea28:	6961 656c 0064 696c 656e 0073 7274 6961     ailed.lines.trai
   bea38:	736e 6e00 7865 5f74 7473 706f 6400 7365     ns.next_stop.des
   bea48:	6974 616e 6974 6e6f 6400 7269 6365 6974     tination.directi
   bea58:	6e6f 6c00 7461 7469 6475 0065 6f6c 676e     on.latitude.long
   bea68:	7469 6475 0065 7262 6165 006b 7325 7220     itude.break.%s r
   bea78:	6961 206c 6170 7472 2520 3a69 0020 0000     ail part %i: ...

000bea88 <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   bea90:	40b9 000b 40cd 000b 6341 6563 7470 2f00     .@...@..Accept./
   beaa0:	2f2a 0000 0019 0000 0003 0000 0007 0000     */..............
   beab0:	0005 0000 000c 0000 0008 0000 0005 0000     ................
   beac0:	0005 0000 0005 0000 0019 0000 0005 0000     ................
   bead0:	000f 0000 000a 0000 000a 0000 000a 0000     ................
   beae0:	000a 0000 0014 0000 0000 0000 0028 0000     ............(...
   beaf0:	0000 0000 0002 0000 0006 0000 0000 0000     ................
   beb00:	0000 0000 000f 0000 000a 0000 000a 0000     ................
   beb10:	000f 0000 000f 0000 000f 0000 0014 0000     ................
   beb20:	0000 0000 0001 0000 0003 0000 0000 0000     ................
   beb30:	0000 0000 000c 0000 0007 0000 0001 0000     ................
   beb40:	000a 0000 000a 0000 000a 0000 000a 0000     ................
   beb50:	000c 0000 0000 0000 0028 0000 0008 0000     ........(.......
   beb60:	0003 0000 0007 0000 0001 0000 0003 0000     ................
   beb70:	0007 0000 0007 0000 0006 0000 000a 0000     ................
   beb80:	000a 0000 000a 0000 000a 0000 000e 0000     ................
   beb90:	0000 0000 0028 0000 0006 0000 0003 0000     ....(...........
   beba0:	0007 0000 0002 0000 0003 0000 0005 0000     ................
   bebb0:	000a 0000 0005 0000 000a 0000 000a 0000     ................
   bebc0:	000a 0000 0014 0000 000a 0000 000a 0000     ................
   bebd0:	000a 0000 0005 0000 000a 0000 000a 0000     ................
   bebe0:	000a 0000 000a 0000 000a 0000 000a 0000     ................
   bebf0:	000a 0000 000a 0000 000a 0000 000a 0000     ................
   bec00:	4820 5454 2f50 2e31 0d30 000a 6c63 736f      HTTP/1.0...clos
   bec10:	0065 6f43 6e6e 6365 6974 6e6f 4800 534f     e.Connection.HOS
   bec20:	0054 6f43 746e 6e65 2d74 654c 676e 6874     T.Content-Length
   bec30:	5000 534f 0054 0a0d 0a0d 2500 3430 0078     .POST......%04x.

000bec40 <_ZTV10JsonBuffer>:
	...
   bec48:	7dcd 000b 7de9 000b                         .}...}..

000bec50 <_ZTV10JsonParser>:
	...
   bec58:	7dfd 000b 7e21 000b                         .}..!~..

000bec60 <_ZTV13JsonReference>:
	...
   bec68:	7dbd 000b 7dbf 000b 7341 6573 7472 6f69     .}...}..Assertio
   bec78:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   bec88:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   bec98:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   beca8:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   becb8:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   becc8:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   becd8:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   bece8:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   becf8:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   bed08:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   bed18:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   bed28:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   bed38:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   bed48:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   bed58:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   bed68:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   bed78:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   bed88:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   bed98:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   beda8:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   bedb8:	6369 002e                                   ic..

000bedbc <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bedc4:	8f59 000b 8fbd 000b 90a3 000b 8fe7 000b     Y...............
   bedd4:	8f5d 000b                                   ]...

000bedd8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bede0:	8f55 000b 8fcb 000b 8f57 000b 8fed 000b     U.......W.......
   bedf0:	8f7d 000b                                   }...

000bedf4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bedfc:	8f53 000b 8fd9 000b 985d 000b 8ff3 000b     S.......].......
   bee0c:	8f9d 000b                                   ....

000bee10 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bee1c:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bee2e <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bee2e:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bee3e <_ZN8particle7BleUuid9BASE_UUIDE>:
   bee3e:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000bee50 <_ZTVN5spark13EthernetClassE>:
	...
   bee58:	a30b 000b a301 000b a2f7 000b a2ed 000b     ................
   bee68:	a2e1 000b a2d5 000b a591 000b a599 000b     ................
   bee78:	a2c9 000b a2c1 000b a2b7 000b a2ad 000b     ................
   bee88:	a5c9 000b                                   ....

000bee8c <_ZTV7TwoWire>:
	...
   bee94:	a329 000b a373 000b a34b 000b a32b 000b     )...s...K...+...
   beea4:	a353 000b a35b 000b a363 000b a36b 000b     S...[...c...k...

000beeb4 <_ZTV9IPAddress>:
	...
   beebc:	a435 000b a425 000b a427 000b 7061 0070     5...%...'...app.

000beecc <_ZTVN5spark12NetworkClassE>:
	...
   beed4:	a551 000b a55b 000b a565 000b a56f 000b     Q...[...e...o...
   beee4:	a579 000b a585 000b a591 000b a599 000b     y...............
   beef4:	a5a1 000b a5ad 000b a5b5 000b a5bf 000b     ................
   bef04:	a5c9 000b 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   bef14:	7265 6f72 2072 203d 6425 0000               error = %d..

000bef20 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bef28:	ab71 000b ab95 000b b0c7 000b aba3 000b     q...............
   bef38:	ab75 000b                                   u...

000bef3c <_ZTV9TCPClient>:
	...
   bef44:	ac21 000b ac55 000b aaed 000b ab07 000b     !...U...........
   bef54:	af5d 000b ab31 000b add3 000b ab65 000b     ]...1.......e...
   bef64:	ae65 000b aca5 000b ae01 000b b011 000b     e...............
   bef74:	ada1 000b ab67 000b ab19 000b aba9 000b     ....g...........
   bef84:	ac85 000b 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
   bef94:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000befa4 <_ZTV11USARTSerial>:
	...
   befac:	b0e1 000b b14d 000b b125 000b a6b5 000b     ....M...%.......
   befbc:	b0f5 000b b111 000b b103 000b b11f 000b     ................
   befcc:	b0e3 000b b0e7 000b                         ........

000befd4 <_ZTV9USBSerial>:
	...
   befdc:	b18b 000b b1f3 000b b1c9 000b a6b5 000b     ................
   befec:	b1bb 000b b18d 000b b19d 000b b1ed 000b     ................
   beffc:	b1ad 000b b185 000b                         ........

000bf004 <_ZTVN5spark9WiFiClassE>:
	...
   bf00c:	b2eb 000b b2e1 000b b2d7 000b b28d 000b     ................
   bf01c:	b2cb 000b b2bf 000b a591 000b a599 000b     ................
   bf02c:	b2b3 000b b2ab 000b b2a1 000b b297 000b     ................
   bf03c:	a5c9 000b                                   ....

000bf040 <_ZSt7nothrow>:
	...

000bf041 <_ZTSSt19_Sp_make_shared_tag>:
   bf041:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bf051:	6572 5f64 6174 0067 0000                     red_tag....

000bf05c <_ZTISt19_Sp_make_shared_tag>:
   bf05c:	f0b4 000b f041 000b 6162 6973 5f63 7473     ....A...basic_st
   bf06c:	6972 676e 3a3a 4d5f 635f 6572 7461 0065     ring::_M_create.

000bf07c <_ZTIN10__cxxabiv117__class_type_infoE>:
   bf07c:	f114 000b f088 000b f138 000b               ........8...

000bf088 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bf088:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bf098:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bf0a8:	0045 0000                                   E...

000bf0ac <_ZTVN10__cxxabiv117__class_type_infoE>:
   bf0ac:	0000 0000 f07c 000b b6e1 000b b6f5 000b     ....|...........
   bf0bc:	b889 000b b889 000b b75f 000b b6a1 000b     ........_.......
   bf0cc:	b747 000b b709 000b b6d3 000b               G...........

000bf0d8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bf0d8:	f114 000b f0e4 000b f07c 000b               ........|...

000bf0e4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bf0e4:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bf0f4:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bf104:	666e 456f 0000 0000                         nfoE....

000bf10c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bf10c:	0000 0000 f0d8 000b b789 000b b79d 000b     ................
   bf11c:	b889 000b b889 000b b75f 000b b6a1 000b     ........_.......
   bf12c:	b85d 000b b7e9 000b b7b1 000b               ]...........

000bf138 <_ZTISt9type_info>:
   bf138:	f0b4 000b f140 000b                         ....@...

000bf140 <_ZTSSt9type_info>:
   bf140:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bf150:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bf160:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   bf170:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bf180:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bf190:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bf1a0:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bf1b0:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   bf1c0:	6e69 7469 0079 6e61 0000 0000               inity.an....

000bf1cc <fpi.1>:
   bf1cc:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bf1dc:	0000 0000                                   ....

000bf1e0 <fpinan.0>:
   bf1e0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000bf1f8 <tinytens>:
   bf1f8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bf208:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bf218:	6f43 64ac 0628 1168                         Co.d(.h.

000bf220 <_ctype_>:
   bf220:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bf230:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bf240:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bf250:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bf260:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bf270:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bf280:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bf290:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bf2a0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bf320:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bf330:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   bf340:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bf350:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bf360:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bf370:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bf380:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bf390:	632e 0000                                   .c..

000bf394 <_C_numeric_locale>:
   bf394:	edba 000b ec3a 000b 5128 2003 0043 4f50     ....:...(Q. C.PO
   bf3a4:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   bf3b4:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bf3c4:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bf3d4:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bf3e4:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bf3f4:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   bf404:	0000 0000                                   ....

000bf408 <__mprec_bigtens>:
   bf408:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bf418:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bf428:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bf430 <__mprec_tens>:
   bf430:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bf440:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bf450:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bf460:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bf470:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bf480:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bf490:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bf4a0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bf4b0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bf4c0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bf4d0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bf4e0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bf4f0:	9db4 79d9 7843 44ea                         ...yCx.D

000bf4f8 <p05.0>:
   bf4f8:	0005 0000 0019 0000 007d 0000               ........}...

000bf504 <link_const_variable_data_end>:
   bf504:	000b7001 	.word	0x000b7001
   bf508:	000ba29d 	.word	0x000ba29d
   bf50c:	000ba315 	.word	0x000ba315
   bf510:	000ba541 	.word	0x000ba541
   bf514:	000ba6a1 	.word	0x000ba6a1
   bf518:	000ba7dd 	.word	0x000ba7dd
   bf51c:	000baac9 	.word	0x000baac9
   bf520:	000bb0cd 	.word	0x000bb0cd
   bf524:	000bb2f5 	.word	0x000bb2f5

000bf528 <link_constructors_end>:
	...
