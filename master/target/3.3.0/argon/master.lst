
/Users/sainihome/Documents/GitHub/loop-tracks/master/target/3.3.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b190  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bf1b0  000bf1b0  0000f1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bf1d4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  200350a8  000bf1d8  000150a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00009550  200352a0  200352a0  000252a0  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bf3d0  000bf3d0  0001f3d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bf3f8  000bf3f8  0001f3f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0014981d  00000000  00000000  0001f3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00011ebb  00000000  00000000  00168c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004c5b0  00000000  00000000  0017aad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003098  00000000  00000000  001c7084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d8d8  00000000  00000000  001ca11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034efe  00000000  00000000  001d79f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00043864  00000000  00000000  0020c8f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001568d6  00000000  00000000  00250156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a7f0  00000000  00000000  003a6a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f008 f8eb 	bl	bc20c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f008 f90d 	bl	bc25c <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	200350a8 	.word	0x200350a8
   b404c:	000bf1d8 	.word	0x000bf1d8
   b4050:	200352a0 	.word	0x200352a0
   b4054:	200352a0 	.word	0x200352a0
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f007 f851 	bl	bb108 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bf184 	.word	0x000bf184
   b4080:	000bf1a8 	.word	0x000bf1a8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f002 be44 	b.w	b6d10 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f002 ffaf 	bl	b6fec <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f006 bff1 	b.w	bb078 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f004 bd53 	b.w	b8b40 <malloc>

000b409a <_Znaj>:
   b409a:	f004 bd51 	b.w	b8b40 <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f004 bd57 	b.w	b8b50 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f004 bd55 	b.w	b8b50 <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40b8:	b510      	push	{r4, lr}
   b40ba:	4b03      	ldr	r3, [pc, #12]	; (b40c8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   b40bc:	6003      	str	r3, [r0, #0]
   b40be:	4604      	mov	r4, r0
   b40c0:	f003 fe3c 	bl	b7d3c <_ZN10JsonParserD1Ev>
   b40c4:	4620      	mov	r0, r4
   b40c6:	bd10      	pop	{r4, pc}
   b40c8:	000be714 	.word	0x000be714

000b40cc <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   b40cc:	b510      	push	{r4, lr}
   b40ce:	4604      	mov	r4, r0
   b40d0:	f7ff fff2 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f246 51bc 	movw	r1, #26044	; 0x65bc
   b40da:	f7ff ffe2 	bl	b40a2 <_ZdlPvj>
   b40de:	4620      	mov	r0, r4
   b40e0:	bd10      	pop	{r4, pc}
	...

000b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   b40e4:	b508      	push	{r3, lr}
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b40e6:	4603      	mov	r3, r0
   b40e8:	b150      	cbz	r0, b4100 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x1c>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
	if (__n > this->_M_max_size())
   b40ea:	4a06      	ldr	r2, [pc, #24]	; (b4104 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x20>)
   b40ec:	4290      	cmp	r0, r2
   b40ee:	d901      	bls.n	b40f4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b40f0:	f007 f8a4 	bl	bb23c <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b40f4:	200c      	movs	r0, #12
   b40f6:	4358      	muls	r0, r3
      }
   b40f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b40fc:	f7ff bfcb 	b.w	b4096 <_Znwj>
   b4100:	bd08      	pop	{r3, pc}
   b4102:	bf00      	nop
   b4104:	0aaaaaaa 	.word	0x0aaaaaaa

000b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>:

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4108:	f100 0308 	add.w	r3, r0, #8
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b410c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b410e:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b4110:	6003      	str	r3, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b4112:	460d      	mov	r5, r1
   b4114:	b1d9      	cbz	r1, b414e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x46>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b4116:	4608      	mov	r0, r1
   b4118:	f008 f8e8 	bl	bc2ec <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b411c:	280f      	cmp	r0, #15
   b411e:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4122:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4124:	d907      	bls.n	b4136 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b4126:	2200      	movs	r2, #0
   b4128:	a901      	add	r1, sp, #4
   b412a:	4620      	mov	r0, r4
   b412c:	f007 f89c 	bl	bb268 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4130:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4132:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4134:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4136:	4632      	mov	r2, r6
   b4138:	4629      	mov	r1, r5
   b413a:	6820      	ldr	r0, [r4, #0]
   b413c:	f007 f8cf 	bl	bb2de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b4140:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b4142:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4144:	6063      	str	r3, [r4, #4]
   b4146:	2100      	movs	r1, #0
   b4148:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b414a:	b002      	add	sp, #8
   b414c:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b414e:	4801      	ldr	r0, [pc, #4]	; (b4154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x4c>)
   b4150:	f007 f877 	bl	bb242 <_ZSt19__throw_logic_errorPKc>
   b4154:	000be36c 	.word	0x000be36c

000b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4158:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b415a:	4603      	mov	r3, r0
   b415c:	b150      	cbz	r0, b4174 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b415e:	4a06      	ldr	r2, [pc, #24]	; (b4178 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x20>)
   b4160:	4290      	cmp	r0, r2
   b4162:	d901      	bls.n	b4168 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4164:	f007 f86a 	bl	bb23c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4168:	206c      	movs	r0, #108	; 0x6c
   b416a:	4358      	muls	r0, r3
      }
   b416c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4170:	f7ff bf91 	b.w	b4096 <_Znwj>
   b4174:	bd08      	pop	{r3, pc}
   b4176:	bf00      	nop
   b4178:	012f684b 	.word	0x012f684b

000b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b417c:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b417e:	4603      	mov	r3, r0
   b4180:	b150      	cbz	r0, b4198 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b4182:	4a06      	ldr	r2, [pc, #24]	; (b419c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x20>)
   b4184:	4290      	cmp	r0, r2
   b4186:	d901      	bls.n	b418c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4188:	f007 f858 	bl	bb23c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b418c:	2018      	movs	r0, #24
   b418e:	4358      	muls	r0, r3
      }
   b4190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4194:	f7ff bf7f 	b.w	b4096 <_Znwj>
   b4198:	bd08      	pop	{r3, pc}
   b419a:	bf00      	nop
   b419c:	05555555 	.word	0x05555555

000b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41a0:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41a2:	b148      	cbz	r0, b41b8 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41a4:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b41a8:	d301      	bcc.n	b41ae <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41aa:	f007 f847 	bl	bb23c <_ZSt17__throw_bad_allocv>
      }
   b41ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41b2:	0080      	lsls	r0, r0, #2
   b41b4:	f7ff bf6f 	b.w	b4096 <_Znwj>
   b41b8:	bd08      	pop	{r3, pc}

000b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41ba:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41bc:	b148      	cbz	r0, b41d2 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41be:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   b41c2:	d301      	bcc.n	b41c8 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41c4:	f007 f83a 	bl	bb23c <_ZSt17__throw_bad_allocv>
      }
   b41c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41cc:	00c0      	lsls	r0, r0, #3
   b41ce:	f7ff bf62 	b.w	b4096 <_Znwj>
   b41d2:	bd08      	pop	{r3, pc}

000b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
   b41d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b41d6:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b41da:	6003      	str	r3, [r0, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b41dc:	e9d1 5300 	ldrd	r5, r3, [r1]
      basic_string(const basic_string& __str)
   b41e0:	4604      	mov	r4, r0
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b41e2:	18ee      	adds	r6, r5, r3
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   b41e4:	b91d      	cbnz	r5, b41ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
   b41e6:	b116      	cbz	r6, b41ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
	  std::__throw_logic_error(__N("basic_string::"
   b41e8:	480c      	ldr	r0, [pc, #48]	; (b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x48>)
   b41ea:	f007 f82a 	bl	bb242 <_ZSt19__throw_logic_errorPKc>
	if (__dnew > size_type(_S_local_capacity))
   b41ee:	2b0f      	cmp	r3, #15
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b41f0:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b41f2:	d907      	bls.n	b4204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x30>
	    _M_data(_M_create(__dnew, size_type(0)));
   b41f4:	2200      	movs	r2, #0
   b41f6:	a901      	add	r1, sp, #4
   b41f8:	4620      	mov	r0, r4
   b41fa:	f007 f835 	bl	bb268 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b41fe:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4200:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4202:	60a3      	str	r3, [r4, #8]
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4204:	4632      	mov	r2, r6
   b4206:	4629      	mov	r1, r5
   b4208:	6820      	ldr	r0, [r4, #0]
   b420a:	f007 f863 	bl	bb2d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
   b420e:	9b01      	ldr	r3, [sp, #4]
   b4210:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4212:	6063      	str	r3, [r4, #4]
   b4214:	2100      	movs	r1, #0
   b4216:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b4218:	b002      	add	sp, #8
   b421a:	bd70      	pop	{r4, r5, r6, pc}
   b421c:	000be36c 	.word	0x000be36c

000b4220 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4220:	6803      	ldr	r3, [r0, #0]
   b4222:	b2c9      	uxtb	r1, r1
   b4224:	689b      	ldr	r3, [r3, #8]
   b4226:	4718      	bx	r3

000b4228 <_ZN5Print5writeEPKc.isra.0>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4228:	b513      	push	{r0, r1, r4, lr}
   b422a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b422c:	b161      	cbz	r1, b4248 <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b422e:	4608      	mov	r0, r1
   b4230:	9101      	str	r1, [sp, #4]
   b4232:	f008 f85b 	bl	bc2ec <strlen>
   b4236:	6823      	ldr	r3, [r4, #0]
   b4238:	9901      	ldr	r1, [sp, #4]
   b423a:	68db      	ldr	r3, [r3, #12]
   b423c:	4602      	mov	r2, r0
   b423e:	4620      	mov	r0, r4
    }
   b4240:	b002      	add	sp, #8
   b4242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4246:	4718      	bx	r3
    }
   b4248:	b002      	add	sp, #8
   b424a:	bd10      	pop	{r4, pc}

000b424c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   b424c:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b424e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4250:	4604      	mov	r4, r0
   b4252:	460d      	mov	r5, r1
      if (&__x != this)
   b4254:	d025      	beq.n	b42a2 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x56>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4256:	e9d1 7100 	ldrd	r7, r1, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   b425a:	6800      	ldr	r0, [r0, #0]
   b425c:	68a3      	ldr	r3, [r4, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b425e:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b4260:	1a1b      	subs	r3, r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   b4262:	429e      	cmp	r6, r3
   b4264:	d91e      	bls.n	b42a4 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   b4266:	10f0      	asrs	r0, r6, #3
   b4268:	f7ff ffa7 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
   b426c:	2300      	movs	r3, #0
   b426e:	4605      	mov	r5, r0
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   b4270:	429e      	cmp	r6, r3
   b4272:	d00a      	beq.n	b428a <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x3e>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4274:	18ea      	adds	r2, r5, r3
   b4276:	bf1c      	itt	ne
   b4278:	18f9      	addne	r1, r7, r3
   b427a:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b427e:	f103 0308 	add.w	r3, r3, #8
   b4282:	bf18      	it	ne
   b4284:	e9c2 0100 	strdne	r0, r1, [r2]
   b4288:	e7f2      	b.n	b4270 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x24>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b428a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b428c:	b118      	cbz	r0, b4296 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x4a>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
   b428e:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4290:	1a09      	subs	r1, r1, r0
   b4292:	f7ff ff06 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4296:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4298:	4435      	add	r5, r6
   b429a:	60a5      	str	r5, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b429c:	6823      	ldr	r3, [r4, #0]
   b429e:	4433      	add	r3, r6
   b42a0:	6063      	str	r3, [r4, #4]
	}
      return *this;
    }
   b42a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b42a4:	6862      	ldr	r2, [r4, #4]
   b42a6:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   b42a8:	4296      	cmp	r6, r2
   b42aa:	d806      	bhi.n	b42ba <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x6e>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b42ac:	42b9      	cmp	r1, r7
   b42ae:	d0f5      	beq.n	b429c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b42b0:	4632      	mov	r2, r6
   b42b2:	4639      	mov	r1, r7
   b42b4:	f007 ffb8 	bl	bc228 <memmove>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b42b8:	e7f0      	b.n	b429c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	  if (_Num)
   b42ba:	b112      	cbz	r2, b42c2 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x76>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b42bc:	4639      	mov	r1, r7
   b42be:	f007 ffb3 	bl	bc228 <memmove>
   b42c2:	e9d4 2700 	ldrd	r2, r7, [r4]
   b42c6:	1abb      	subs	r3, r7, r2
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b42c8:	682a      	ldr	r2, [r5, #0]
   b42ca:	686d      	ldr	r5, [r5, #4]
   b42cc:	441a      	add	r2, r3
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b42ce:	1aad      	subs	r5, r5, r2
					  __x._M_impl._M_finish,
   b42d0:	2300      	movs	r3, #0
	      for (; __first != __last; ++__first, (void)++__cur)
   b42d2:	429d      	cmp	r5, r3
   b42d4:	d0e2      	beq.n	b429c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
   b42d6:	eb17 0c03 	adds.w	ip, r7, r3
   b42da:	bf1c      	itt	ne
   b42dc:	18d1      	addne	r1, r2, r3
   b42de:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b42e2:	f103 0308 	add.w	r3, r3, #8
   b42e6:	bf18      	it	ne
   b42e8:	e9cc 0100 	strdne	r0, r1, [ip]
   b42ec:	e7f1      	b.n	b42d2 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x86>
	...

000b42f0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>:
      if (&__x != this)
   b42f0:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b42f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b42f6:	4604      	mov	r4, r0
   b42f8:	468a      	mov	sl, r1
      if (&__x != this)
   b42fa:	d036      	beq.n	b436a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7a>
   b42fc:	e9d1 5b00 	ldrd	r5, fp, [r1]
			 - this->_M_impl._M_start); }
   b4300:	f8d0 9000 	ldr.w	r9, [r0]
   b4304:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4306:	4a39      	ldr	r2, [pc, #228]	; (b43ec <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xfc>)
   b4308:	ebab 0705 	sub.w	r7, fp, r5
			 - this->_M_impl._M_start); }
   b430c:	eba3 0309 	sub.w	r3, r3, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4310:	ea4f 08e7 	mov.w	r8, r7, asr #3
	  if (__xlen > capacity())
   b4314:	42bb      	cmp	r3, r7
   b4316:	fb02 f808 	mul.w	r8, r2, r8
   b431a:	d228      	bcs.n	b436e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7e>
	  pointer __result = this->_M_allocate(__n);
   b431c:	4640      	mov	r0, r8
   b431e:	f7ff ff2d 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
   b4322:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b4324:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b4326:	45ab      	cmp	fp, r5
   b4328:	d00a      	beq.n	b4340 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x50>
   b432a:	f1b8 0f00 	cmp.w	r8, #0
   b432e:	d003      	beq.n	b4338 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x48>
   b4330:	4629      	mov	r1, r5
   b4332:	4640      	mov	r0, r8
   b4334:	f7ff ff4e 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4338:	f108 0818 	add.w	r8, r8, #24
   b433c:	3518      	adds	r5, #24
   b433e:	e7f2      	b.n	b4326 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x36>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4340:	e9d4 5800 	ldrd	r5, r8, [r4]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b4344:	45a8      	cmp	r8, r5
   b4346:	d004      	beq.n	b4352 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x62>
      { _M_dispose(); }
   b4348:	4628      	mov	r0, r5
   b434a:	f006 ffaf 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b434e:	3518      	adds	r5, #24
   b4350:	e7f8      	b.n	b4344 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x54>
	      _M_deallocate(this->_M_impl._M_start,
   b4352:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4354:	b118      	cbz	r0, b435e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x6e>
			    - this->_M_impl._M_start);
   b4356:	68a1      	ldr	r1, [r4, #8]
   b4358:	1a09      	subs	r1, r1, r0
   b435a:	f7ff fea2 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b435e:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4360:	443e      	add	r6, r7
   b4362:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4364:	6823      	ldr	r3, [r4, #0]
   b4366:	443b      	add	r3, r7
   b4368:	6063      	str	r3, [r4, #4]
    }
   b436a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b436e:	6846      	ldr	r6, [r0, #4]
   b4370:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b4374:	42b7      	cmp	r7, r6
   b4376:	d819      	bhi.n	b43ac <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xbc>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4378:	4646      	mov	r6, r8
   b437a:	46ca      	mov	sl, r9
   b437c:	2e00      	cmp	r6, #0
   b437e:	dd08      	ble.n	b4392 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xa2>
		  }
	      }
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
	  }
#endif
	this->_M_assign(__str);
   b4380:	4629      	mov	r1, r5
   b4382:	4650      	mov	r0, sl
   b4384:	f006 ffb0 	bl	bb2e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b4388:	3518      	adds	r5, #24
	      ++__result;
   b438a:	f10a 0a18 	add.w	sl, sl, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b438e:	3e01      	subs	r6, #1
   b4390:	e7f4      	b.n	b437c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x8c>
   b4392:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   b4396:	2518      	movs	r5, #24
      : _M_current(__i) { }
   b4398:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b439a:	fb05 9508 	mla	r5, r5, r8, r9
	  for (; __first != __last; ++__first)
   b439e:	42ae      	cmp	r6, r5
   b43a0:	d0e0      	beq.n	b4364 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
      { _M_dispose(); }
   b43a2:	4628      	mov	r0, r5
   b43a4:	f006 ff82 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b43a8:	3518      	adds	r5, #24
      {
	++_M_current;
	return *this;
   b43aa:	e7f8      	b.n	b439e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xae>
   b43ac:	10f6      	asrs	r6, r6, #3
   b43ae:	4356      	muls	r6, r2
   b43b0:	2e00      	cmp	r6, #0
   b43b2:	dd08      	ble.n	b43c6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xd6>
	this->_M_assign(__str);
   b43b4:	4629      	mov	r1, r5
   b43b6:	4648      	mov	r0, r9
   b43b8:	f006 ff96 	bl	bb2e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b43bc:	3518      	adds	r5, #24
	      ++__result;
   b43be:	f109 0918 	add.w	r9, r9, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b43c2:	3e01      	subs	r6, #1
   b43c4:	e7f4      	b.n	b43b0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xc0>
   b43c6:	e9d4 5600 	ldrd	r5, r6, [r4]
   b43ca:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43cc:	f8da 5000 	ldr.w	r5, [sl]
					  __x._M_impl._M_finish,
   b43d0:	f8da 8004 	ldr.w	r8, [sl, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43d4:	440d      	add	r5, r1
   b43d6:	45a8      	cmp	r8, r5
   b43d8:	d0c4      	beq.n	b4364 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b43da:	b11e      	cbz	r6, b43e4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xf4>
   b43dc:	4629      	mov	r1, r5
   b43de:	4630      	mov	r0, r6
   b43e0:	f7ff fef8 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b43e4:	3518      	adds	r5, #24
   b43e6:	3618      	adds	r6, #24
   b43e8:	e7f5      	b.n	b43d6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xe6>
   b43ea:	bf00      	nop
   b43ec:	aaaaaaab 	.word	0xaaaaaaab

000b43f0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43f0:	b40e      	push	{r1, r2, r3}
   b43f2:	b503      	push	{r0, r1, lr}
   b43f4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b43f6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43f8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b43fc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b43fe:	f006 f806 	bl	ba40e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4402:	b002      	add	sp, #8
   b4404:	f85d eb04 	ldr.w	lr, [sp], #4
   b4408:	b003      	add	sp, #12
   b440a:	4770      	bx	lr

000b440c <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b440c:	b40e      	push	{r1, r2, r3}
   b440e:	b503      	push	{r0, r1, lr}
   b4410:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4412:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4414:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4418:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b441a:	f005 fff8 	bl	ba40e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b441e:	b002      	add	sp, #8
   b4420:	f85d eb04 	ldr.w	lr, [sp], #4
   b4424:	b003      	add	sp, #12
   b4426:	4770      	bx	lr

000b4428 <_Z16randomizeAddressv>:
    Serial.println();
  }
}

//clears up conflicts with multiple i2c slaves having the same address
void randomizeAddress(){
   b4428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return *(this->_M_impl._M_start + __n);
   b442c:	4fac      	ldr	r7, [pc, #688]	; (b46e0 <_Z16randomizeAddressv+0x2b8>)
  while(slaveCount < cities[cityIndex].slaveCountExpected){
   b442e:	4dad      	ldr	r5, [pc, #692]	; (b46e4 <_Z16randomizeAddressv+0x2bc>)
void randomizeAddress(){
   b4430:	b08d      	sub	sp, #52	; 0x34
  while(slaveCount < cities[cityIndex].slaveCountExpected){
   b4432:	4bad      	ldr	r3, [pc, #692]	; (b46e8 <_Z16randomizeAddressv+0x2c0>)
   b4434:	681a      	ldr	r2, [r3, #0]
   b4436:	683b      	ldr	r3, [r7, #0]
   b4438:	2128      	movs	r1, #40	; 0x28
   b443a:	fb01 3302 	mla	r3, r1, r2, r3
   b443e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b4440:	682b      	ldr	r3, [r5, #0]
   b4442:	429a      	cmp	r2, r3
   b4444:	f340 8112 	ble.w	b466c <_Z16randomizeAddressv+0x244>
    Serial.printlnf("slaveCount: %i", slaveCount);
   b4448:	f006 fd44 	bl	baed4 <_Z16_fetch_usbserialv>
   b444c:	682a      	ldr	r2, [r5, #0]
   b444e:	49a7      	ldr	r1, [pc, #668]	; (b46ec <_Z16randomizeAddressv+0x2c4>)

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4450:	f8df 82c0 	ldr.w	r8, [pc, #704]	; b4714 <_Z16randomizeAddressv+0x2ec>
   b4454:	f8df 92c0 	ldr.w	r9, [pc, #704]	; b4718 <_Z16randomizeAddressv+0x2f0>
      //gets UUID from address and sends it back to slave, slave changes address if conflict
      Wire.requestFrom(i, 24);
      if(Wire.available() > 0){
        Serial.println("transmission recieved from: " + String(i));

        String inputBuffer = "";
   b4458:	4ea5      	ldr	r6, [pc, #660]	; (b46f0 <_Z16randomizeAddressv+0x2c8>)
    Serial.printlnf("slaveCount: %i", slaveCount);
   b445a:	f7ff ffd7 	bl	b440c <_ZN5Print8printlnfEPKcz>
    slaveCount = 0;
   b445e:	2300      	movs	r3, #0
   b4460:	602b      	str	r3, [r5, #0]
    for(int i = 8; i <= 119; i++){
   b4462:	2408      	movs	r4, #8
      Serial.println("\nrequest code 1, address: " + String(i));
   b4464:	f006 fd36 	bl	baed4 <_Z16_fetch_usbserialv>
   b4468:	4641      	mov	r1, r8
   b446a:	4682      	mov	sl, r0
   b446c:	a808      	add	r0, sp, #32
   b446e:	f006 f850 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
   b4472:	220a      	movs	r2, #10
   b4474:	4621      	mov	r1, r4
   b4476:	a804      	add	r0, sp, #16
   b4478:	f006 f8a5 	bl	ba5c6 <_ZN6StringC1Eih>
   b447c:	a904      	add	r1, sp, #16
   b447e:	a808      	add	r0, sp, #32
   b4480:	f006 f8dc 	bl	ba63c <_ZplRK15StringSumHelperRK6String>
   b4484:	6801      	ldr	r1, [r0, #0]
   b4486:	4650      	mov	r0, sl
   b4488:	f005 ff99 	bl	ba3be <_ZN5Print7printlnEPKc>
   b448c:	a804      	add	r0, sp, #16
   b448e:	f005 fff5 	bl	ba47c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4492:	a808      	add	r0, sp, #32
   b4494:	f005 fff2 	bl	ba47c <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   b4498:	f006 fe6a 	bl	bb170 <_Z19__fetch_global_Wirev>
   b449c:	4621      	mov	r1, r4
   b449e:	f005 fe01 	bl	ba0a4 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   b44a2:	f006 fe65 	bl	bb170 <_Z19__fetch_global_Wirev>
   b44a6:	2131      	movs	r1, #49	; 0x31
   b44a8:	f7ff feba 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b44ac:	fa5f fb84 	uxtb.w	fp, r4
   b44b0:	f006 fe5e 	bl	bb170 <_Z19__fetch_global_Wirev>
   b44b4:	f005 fdfd 	bl	ba0b2 <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   b44b8:	f006 fe5a 	bl	bb170 <_Z19__fetch_global_Wirev>
   b44bc:	2218      	movs	r2, #24
   b44be:	4659      	mov	r1, fp
   b44c0:	f005 fde9 	bl	ba096 <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   b44c4:	f006 fe54 	bl	bb170 <_Z19__fetch_global_Wirev>
   b44c8:	6803      	ldr	r3, [r0, #0]
   b44ca:	691b      	ldr	r3, [r3, #16]
   b44cc:	4798      	blx	r3
   b44ce:	2800      	cmp	r0, #0
   b44d0:	f340 80c3 	ble.w	b465a <_Z16randomizeAddressv+0x232>
        Serial.println("transmission recieved from: " + String(i));
   b44d4:	f006 fcfe 	bl	baed4 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b44d8:	4649      	mov	r1, r9
   b44da:	4682      	mov	sl, r0
   b44dc:	a808      	add	r0, sp, #32
   b44de:	f006 f818 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
   b44e2:	220a      	movs	r2, #10
   b44e4:	4621      	mov	r1, r4
   b44e6:	a804      	add	r0, sp, #16
   b44e8:	f006 f86d 	bl	ba5c6 <_ZN6StringC1Eih>
   b44ec:	a904      	add	r1, sp, #16
   b44ee:	a808      	add	r0, sp, #32
   b44f0:	f006 f8a4 	bl	ba63c <_ZplRK15StringSumHelperRK6String>
   b44f4:	6801      	ldr	r1, [r0, #0]
   b44f6:	4650      	mov	r0, sl
   b44f8:	f005 ff61 	bl	ba3be <_ZN5Print7printlnEPKc>
   b44fc:	a804      	add	r0, sp, #16
   b44fe:	f005 ffbd 	bl	ba47c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4502:	a808      	add	r0, sp, #32
   b4504:	f005 ffba 	bl	ba47c <_ZN6StringD1Ev>
        String inputBuffer = "";
   b4508:	4631      	mov	r1, r6
   b450a:	4668      	mov	r0, sp
   b450c:	f006 f801 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
   b4510:	f04f 0a18 	mov.w	sl, #24
        char c;
        for(int j = 0; j < 24; j++){
          c = Wire.read();
   b4514:	f006 fe2c 	bl	bb170 <_Z19__fetch_global_Wirev>
   b4518:	6803      	ldr	r3, [r0, #0]
   b451a:	695b      	ldr	r3, [r3, #20]
   b451c:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b451e:	b2c1      	uxtb	r1, r0
   b4520:	4668      	mov	r0, sp
   b4522:	f006 f87e 	bl	ba622 <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   b4526:	f1ba 0a01 	subs.w	sl, sl, #1
   b452a:	d1f3      	bne.n	b4514 <_Z16randomizeAddressv+0xec>
          inputBuffer += c;
        }
        Wire.beginTransmission(i);
   b452c:	f006 fe20 	bl	bb170 <_Z19__fetch_global_Wirev>
   b4530:	4621      	mov	r1, r4
   b4532:	f005 fdb7 	bl	ba0a4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   b4536:	f006 fe1b 	bl	bb170 <_Z19__fetch_global_Wirev>
   b453a:	9900      	ldr	r1, [sp, #0]
   b453c:	f7ff fe74 	bl	b4228 <_ZN5Print5writeEPKc.isra.0>
        Serial.println("device id: " + inputBuffer);
   b4540:	f006 fcc8 	bl	baed4 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4544:	496b      	ldr	r1, [pc, #428]	; (b46f4 <_Z16randomizeAddressv+0x2cc>)
   b4546:	4682      	mov	sl, r0
   b4548:	a808      	add	r0, sp, #32
   b454a:	f005 ffe2 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
   b454e:	4669      	mov	r1, sp
   b4550:	a808      	add	r0, sp, #32
   b4552:	f006 f873 	bl	ba63c <_ZplRK15StringSumHelperRK6String>
   b4556:	6801      	ldr	r1, [r0, #0]
   b4558:	4650      	mov	r0, sl
   b455a:	f005 ff30 	bl	ba3be <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b455e:	a808      	add	r0, sp, #32
   b4560:	f005 ff8c 	bl	ba47c <_ZN6StringD1Ev>
        Wire.endTransmission();
   b4564:	f006 fe04 	bl	bb170 <_Z19__fetch_global_Wirev>
   b4568:	f005 fda3 	bl	ba0b2 <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   b456c:	f006 fcb2 	bl	baed4 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4570:	4961      	ldr	r1, [pc, #388]	; (b46f8 <_Z16randomizeAddressv+0x2d0>)
   b4572:	4682      	mov	sl, r0
   b4574:	a808      	add	r0, sp, #32
   b4576:	f005 ffcc 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
   b457a:	220a      	movs	r2, #10
   b457c:	4621      	mov	r1, r4
   b457e:	a804      	add	r0, sp, #16
   b4580:	f006 f821 	bl	ba5c6 <_ZN6StringC1Eih>
   b4584:	a904      	add	r1, sp, #16
   b4586:	a808      	add	r0, sp, #32
   b4588:	f006 f858 	bl	ba63c <_ZplRK15StringSumHelperRK6String>
   b458c:	6801      	ldr	r1, [r0, #0]
   b458e:	4650      	mov	r0, sl
   b4590:	f005 ff15 	bl	ba3be <_ZN5Print7printlnEPKc>
   b4594:	a804      	add	r0, sp, #16
   b4596:	f005 ff71 	bl	ba47c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b459a:	a808      	add	r0, sp, #32
   b459c:	f005 ff6e 	bl	ba47c <_ZN6StringD1Ev>

        Wire.beginTransmission(i);
   b45a0:	f006 fde6 	bl	bb170 <_Z19__fetch_global_Wirev>
   b45a4:	4621      	mov	r1, r4
   b45a6:	f005 fd7d 	bl	ba0a4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   b45aa:	f006 fde1 	bl	bb170 <_Z19__fetch_global_Wirev>
   b45ae:	2132      	movs	r1, #50	; 0x32
   b45b0:	f7ff fe36 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b45b4:	f006 fddc 	bl	bb170 <_Z19__fetch_global_Wirev>
   b45b8:	f005 fd7b 	bl	ba0b2 <_ZN7TwoWire15endTransmissionEv>

        Serial.println("request code 2, address: " + String(i));
   b45bc:	f006 fc8a 	bl	baed4 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b45c0:	494e      	ldr	r1, [pc, #312]	; (b46fc <_Z16randomizeAddressv+0x2d4>)
   b45c2:	4682      	mov	sl, r0
   b45c4:	a808      	add	r0, sp, #32
   b45c6:	f005 ffa4 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
   b45ca:	220a      	movs	r2, #10
   b45cc:	4621      	mov	r1, r4
   b45ce:	a804      	add	r0, sp, #16
   b45d0:	f005 fff9 	bl	ba5c6 <_ZN6StringC1Eih>
   b45d4:	a904      	add	r1, sp, #16
   b45d6:	a808      	add	r0, sp, #32
   b45d8:	f006 f830 	bl	ba63c <_ZplRK15StringSumHelperRK6String>
   b45dc:	6801      	ldr	r1, [r0, #0]
   b45de:	4650      	mov	r0, sl
   b45e0:	f005 feed 	bl	ba3be <_ZN5Print7printlnEPKc>
   b45e4:	a804      	add	r0, sp, #16
   b45e6:	f005 ff49 	bl	ba47c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45ea:	a808      	add	r0, sp, #32
   b45ec:	f005 ff46 	bl	ba47c <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   b45f0:	f006 fdbe 	bl	bb170 <_Z19__fetch_global_Wirev>
   b45f4:	2204      	movs	r2, #4
   b45f6:	4659      	mov	r1, fp
   b45f8:	f005 fd4d 	bl	ba096 <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   b45fc:	4631      	mov	r1, r6
   b45fe:	4668      	mov	r0, sp
   b4600:	f005 ffcf 	bl	ba5a2 <_ZN6StringaSEPKc>
   b4604:	f04f 0a04 	mov.w	sl, #4
        for(int j = 0; j < 4; j++){
          inputBuffer += (char)Wire.read();
   b4608:	f006 fdb2 	bl	bb170 <_Z19__fetch_global_Wirev>
   b460c:	6803      	ldr	r3, [r0, #0]
   b460e:	695b      	ldr	r3, [r3, #20]
   b4610:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b4612:	b2c1      	uxtb	r1, r0
   b4614:	4668      	mov	r0, sp
   b4616:	f006 f804 	bl	ba622 <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   b461a:	f1ba 0a01 	subs.w	sl, sl, #1
   b461e:	d1f3      	bne.n	b4608 <_Z16randomizeAddressv+0x1e0>
        }
        
        Serial.println("conflict verification: " + inputBuffer);
   b4620:	f006 fc58 	bl	baed4 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4624:	4936      	ldr	r1, [pc, #216]	; (b4700 <_Z16randomizeAddressv+0x2d8>)
   b4626:	4682      	mov	sl, r0
   b4628:	a808      	add	r0, sp, #32
   b462a:	f005 ff72 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
   b462e:	4669      	mov	r1, sp
   b4630:	a808      	add	r0, sp, #32
   b4632:	f006 f803 	bl	ba63c <_ZplRK15StringSumHelperRK6String>
   b4636:	6801      	ldr	r1, [r0, #0]
   b4638:	4650      	mov	r0, sl
   b463a:	f005 fec0 	bl	ba3be <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b463e:	a808      	add	r0, sp, #32
   b4640:	f005 ff1c 	bl	ba47c <_ZN6StringD1Ev>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b4644:	492f      	ldr	r1, [pc, #188]	; (b4704 <_Z16randomizeAddressv+0x2dc>)
   b4646:	4668      	mov	r0, sp
   b4648:	f006 f83b 	bl	ba6c2 <_ZNK6String6equalsEPKc>
        if(inputBuffer != "pass"){
   b464c:	b150      	cbz	r0, b4664 <_Z16randomizeAddressv+0x23c>
          break;
        }
        slaveCount++;
   b464e:	682b      	ldr	r3, [r5, #0]
        String inputBuffer = "";
   b4650:	4668      	mov	r0, sp
        slaveCount++;
   b4652:	3301      	adds	r3, #1
   b4654:	602b      	str	r3, [r5, #0]
        String inputBuffer = "";
   b4656:	f005 ff11 	bl	ba47c <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   b465a:	3401      	adds	r4, #1
   b465c:	2c78      	cmp	r4, #120	; 0x78
   b465e:	f47f af01 	bne.w	b4464 <_Z16randomizeAddressv+0x3c>
   b4662:	e6e6      	b.n	b4432 <_Z16randomizeAddressv+0xa>
   b4664:	4668      	mov	r0, sp
   b4666:	f005 ff09 	bl	ba47c <_ZN6StringD1Ev>
   b466a:	e6e2      	b.n	b4432 <_Z16randomizeAddressv+0xa>
      }
    }
  }

  Serial.println("\nConnected to: ");
   b466c:	f006 fc32 	bl	baed4 <_Z16_fetch_usbserialv>
   b4670:	4925      	ldr	r1, [pc, #148]	; (b4708 <_Z16randomizeAddressv+0x2e0>)
    Wire.endTransmission();

    Wire.requestFrom(i, 24);
    if(Wire.available() > 0){
      Serial.print(i);
      Serial.print(", ");
   b4672:	4e26      	ldr	r6, [pc, #152]	; (b470c <_Z16randomizeAddressv+0x2e4>)
   b4674:	4f26      	ldr	r7, [pc, #152]	; (b4710 <_Z16randomizeAddressv+0x2e8>)
  Serial.println("\nConnected to: ");
   b4676:	f005 fea2 	bl	ba3be <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   b467a:	2408      	movs	r4, #8
  int count = 0;
   b467c:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   b467e:	f006 fd77 	bl	bb170 <_Z19__fetch_global_Wirev>
   b4682:	4621      	mov	r1, r4
   b4684:	f005 fd0e 	bl	ba0a4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   b4688:	f006 fd72 	bl	bb170 <_Z19__fetch_global_Wirev>
   b468c:	2131      	movs	r1, #49	; 0x31
   b468e:	f7ff fdc7 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b4692:	f006 fd6d 	bl	bb170 <_Z19__fetch_global_Wirev>
   b4696:	f005 fd0c 	bl	ba0b2 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   b469a:	f006 fd69 	bl	bb170 <_Z19__fetch_global_Wirev>
   b469e:	2218      	movs	r2, #24
   b46a0:	b2e1      	uxtb	r1, r4
   b46a2:	f005 fcf8 	bl	ba096 <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   b46a6:	f006 fd63 	bl	bb170 <_Z19__fetch_global_Wirev>
   b46aa:	6803      	ldr	r3, [r0, #0]
   b46ac:	691b      	ldr	r3, [r3, #16]
   b46ae:	4798      	blx	r3
   b46b0:	2800      	cmp	r0, #0
   b46b2:	dd0e      	ble.n	b46d2 <_Z16randomizeAddressv+0x2aa>
      Serial.print(i);
   b46b4:	f006 fc0e 	bl	baed4 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b46b8:	220a      	movs	r2, #10
   b46ba:	4621      	mov	r1, r4
   b46bc:	f005 fe89 	bl	ba3d2 <_ZN5Print11printNumberEmh>
      Serial.print(", ");
   b46c0:	f006 fc08 	bl	baed4 <_Z16_fetch_usbserialv>
   b46c4:	4631      	mov	r1, r6
   b46c6:	f005 fe67 	bl	ba398 <_ZN5Print5printEPKc>

      addressArr[count++] = i;
   b46ca:	683b      	ldr	r3, [r7, #0]
   b46cc:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
   b46d0:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   b46d2:	3401      	adds	r4, #1
   b46d4:	2c78      	cmp	r4, #120	; 0x78
   b46d6:	d1d2      	bne.n	b467e <_Z16randomizeAddressv+0x256>
    }
  }
}
   b46d8:	b00d      	add	sp, #52	; 0x34
   b46da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b46de:	bf00      	nop
   b46e0:	20035450 	.word	0x20035450
   b46e4:	2003e6a8 	.word	0x2003e6a8
   b46e8:	200350a8 	.word	0x200350a8
   b46ec:	000be396 	.word	0x000be396
   b46f0:	000be8be 	.word	0x000be8be
   b46f4:	000be3dd 	.word	0x000be3dd
   b46f8:	000be3e9 	.word	0x000be3e9
   b46fc:	000be400 	.word	0x000be400
   b4700:	000be41a 	.word	0x000be41a
   b4704:	000be432 	.word	0x000be432
   b4708:	000be437 	.word	0x000be437
   b470c:	000be67f 	.word	0x000be67f
   b4710:	200352f8 	.word	0x200352f8
   b4714:	000be3a5 	.word	0x000be3a5
   b4718:	000be3c0 	.word	0x000be3c0

000b471c <_Z17acquireWireBufferv>:
    userInput = false;
    Serial.println("reset done");
  }
}

hal_i2c_config_t acquireWireBuffer() {
   b471c:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b471e:	f44f 7500 	mov.w	r5, #512	; 0x200
   b4722:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b4724:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b4726:	6003      	str	r3, [r0, #0]
   b4728:	6085      	str	r5, [r0, #8]
   b472a:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b472c:	4905      	ldr	r1, [pc, #20]	; (b4744 <_Z17acquireWireBufferv+0x28>)
   b472e:	4628      	mov	r0, r5
   b4730:	f006 fd82 	bl	bb238 <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4734:	4903      	ldr	r1, [pc, #12]	; (b4744 <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b4736:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4738:	4628      	mov	r0, r5
   b473a:	f006 fd7d 	bl	bb238 <_ZnajRKSt9nothrow_t>
    };
   b473e:	60e0      	str	r0, [r4, #12]
    return config;
   b4740:	4620      	mov	r0, r4
   b4742:	bd38      	pop	{r3, r4, r5, pc}
   b4744:	000becc4 	.word	0x000becc4

000b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4748:	b510      	push	{r4, lr}
   b474a:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b474c:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b474e:	b118      	cbz	r0, b4758 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4750:	68a1      	ldr	r1, [r4, #8]
   b4752:	1a09      	subs	r1, r1, r0
   b4754:	f7ff fca5 	bl	b40a2 <_ZdlPvj>
      }
   b4758:	4620      	mov	r0, r4
   b475a:	bd10      	pop	{r4, pc}

000b475c <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b475c:	b510      	push	{r4, lr}
   b475e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4760:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4762:	b118      	cbz	r0, b476c <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4764:	68a1      	ldr	r1, [r4, #8]
   b4766:	1a09      	subs	r1, r1, r0
   b4768:	f7ff fc9b 	bl	b40a2 <_ZdlPvj>
      }
   b476c:	4620      	mov	r0, r4
   b476e:	bd10      	pop	{r4, pc}

000b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4770:	b510      	push	{r4, lr}
   b4772:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4774:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4776:	b118      	cbz	r0, b4780 <_ZNSt12_Vector_baseIiSaIiEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4778:	68a1      	ldr	r1, [r4, #8]
   b477a:	1a09      	subs	r1, r1, r0
   b477c:	f7ff fc91 	bl	b40a2 <_ZdlPvj>
      }
   b4780:	4620      	mov	r0, r4
   b4782:	bd10      	pop	{r4, pc}

000b4784 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
   b4784:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
   b4786:	680d      	ldr	r5, [r1, #0]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4788:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
   b478a:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
   b478e:	6005      	str	r5, [r0, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
   b4790:	b085      	sub	sp, #20
	  _M_finish = __x._M_finish;
   b4792:	684d      	ldr	r5, [r1, #4]
   b4794:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4796:	688d      	ldr	r5, [r1, #8]
   b4798:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
   b479a:	2300      	movs	r3, #0
	  _M_end_of_storage = __x._M_end_of_storage;
   b479c:	6085      	str	r5, [r0, #8]
	  _M_finish = __x._M_finish;
   b479e:	e9c1 3300 	strd	r3, r3, [r1]
	  _M_end_of_storage = __x._M_end_of_storage;
   b47a2:	608b      	str	r3, [r1, #8]
      }
   b47a4:	a801      	add	r0, sp, #4
	  _M_finish = __x._M_finish;
   b47a6:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
   b47aa:	f7ff ffe1 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      }
   b47ae:	b005      	add	sp, #20
   b47b0:	bd30      	pop	{r4, r5, pc}

000b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b47b2:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b47b4:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b47b8:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   b47ba:	42ae      	cmp	r6, r5
   b47bc:	d004      	beq.n	b47c8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x16>
      { _M_dispose(); }
   b47be:	4628      	mov	r0, r5
   b47c0:	f006 fd74 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b47c4:	3518      	adds	r5, #24
   b47c6:	e7f8      	b.n	b47ba <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b47c8:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b47ca:	b118      	cbz	r0, b47d4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b47cc:	68a1      	ldr	r1, [r4, #8]
   b47ce:	1a09      	subs	r1, r1, r0
   b47d0:	f7ff fc67 	bl	b40a2 <_ZdlPvj>
      }
   b47d4:	4620      	mov	r0, r4
   b47d6:	bd70      	pop	{r4, r5, r6, pc}

000b47d8 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>:

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b47d8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      vector(size_type __n, const value_type& __value,
   b47dc:	b570      	push	{r4, r5, r6, lr}
   b47de:	4604      	mov	r4, r0
   b47e0:	460d      	mov	r5, r1
   b47e2:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b47e4:	d302      	bcc.n	b47ec <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x14>
	  __throw_length_error(
   b47e6:	480c      	ldr	r0, [pc, #48]	; (b4818 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x40>)
   b47e8:	f006 fd2e 	bl	bb248 <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47ec:	2300      	movs	r3, #0
   b47ee:	e9c0 3300 	strd	r3, r3, [r0]
   b47f2:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b47f4:	4608      	mov	r0, r1
   b47f6:	f7ff fcd3 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47fa:	eb00 0385 	add.w	r3, r0, r5, lsl #2
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b47fe:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4802:	60a3      	str	r3, [r4, #8]
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   b4804:	b12d      	cbz	r5, b4812 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   b4806:	6832      	ldr	r2, [r6, #0]
      for (; __first != __last; ++__first)
   b4808:	4283      	cmp	r3, r0
   b480a:	d002      	beq.n	b4812 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
	*__first = __tmp;
   b480c:	f840 2b04 	str.w	r2, [r0], #4
      for (; __first != __last; ++__first)
   b4810:	e7fa      	b.n	b4808 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x30>
	this->_M_impl._M_finish =
   b4812:	6060      	str	r0, [r4, #4]
      { _M_fill_initialize(__n, __value); }
   b4814:	4620      	mov	r0, r4
   b4816:	bd70      	pop	{r4, r5, r6, pc}
   b4818:	000be447 	.word	0x000be447

000b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   b481c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4820:	2400      	movs	r4, #0
      vector(initializer_list<value_type> __l,
   b4822:	ab02      	add	r3, sp, #8
   b4824:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4828:	e9c0 4400 	strd	r4, r4, [r0]
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   b482c:	4613      	mov	r3, r2
      vector(initializer_list<value_type> __l,
   b482e:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4830:	6084      	str	r4, [r0, #8]
   b4832:	00d7      	lsls	r7, r2, #3
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b4834:	f342 001c 	sbfx	r0, r2, #0, #29
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4838:	4a10      	ldr	r2, [pc, #64]	; (b487c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x60>)
   b483a:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   b483e:	4688      	mov	r8, r1
   b4840:	d202      	bcs.n	b4848 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x2c>
	  __throw_length_error(
   b4842:	480f      	ldr	r0, [pc, #60]	; (b4880 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x64>)
   b4844:	f006 fd00 	bl	bb248 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4848:	f7ff fcb7 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b484c:	19c6      	adds	r6, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b484e:	4602      	mov	r2, r0
   b4850:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4852:	60ae      	str	r6, [r5, #8]
   b4854:	4623      	mov	r3, r4
   b4856:	429f      	cmp	r7, r3
   b4858:	d00b      	beq.n	b4872 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x56>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b485a:	18d4      	adds	r4, r2, r3
   b485c:	bf1c      	itt	ne
   b485e:	eb08 0103 	addne.w	r1, r8, r3
   b4862:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b4866:	f103 0308 	add.w	r3, r3, #8
   b486a:	bf18      	it	ne
   b486c:	e9c4 0100 	strdne	r0, r1, [r4]
   b4870:	e7f1      	b.n	b4856 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x3a>
      }
   b4872:	4628      	mov	r0, r5
	  this->_M_impl._M_finish =
   b4874:	606e      	str	r6, [r5, #4]
      }
   b4876:	b002      	add	sp, #8
   b4878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b487c:	7ffffff8 	.word	0x7ffffff8
   b4880:	000be447 	.word	0x000be447

000b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>:
      vector(initializer_list<value_type> __l,
   b4884:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4888:	ab02      	add	r3, sp, #8
   b488a:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b488e:	2300      	movs	r3, #0
   b4890:	e9c0 3300 	strd	r3, r3, [r0]
   b4894:	6083      	str	r3, [r0, #8]
   b4896:	4616      	mov	r6, r2
   b4898:	2318      	movs	r3, #24
   b489a:	435e      	muls	r6, r3
   b489c:	4b10      	ldr	r3, [pc, #64]	; (b48e0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x5c>)
      vector(initializer_list<value_type> __l,
   b489e:	4604      	mov	r4, r0
   b48a0:	10f0      	asrs	r0, r6, #3
   b48a2:	4358      	muls	r0, r3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b48a4:	4b0f      	ldr	r3, [pc, #60]	; (b48e4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x60>)
   b48a6:	429e      	cmp	r6, r3
   b48a8:	460f      	mov	r7, r1
   b48aa:	eb01 0806 	add.w	r8, r1, r6
   b48ae:	d902      	bls.n	b48b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x32>
	  __throw_length_error(
   b48b0:	480d      	ldr	r0, [pc, #52]	; (b48e8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x64>)
   b48b2:	f006 fcc9 	bl	bb248 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b48b6:	f7ff fc61 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b48ba:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b48bc:	4605      	mov	r5, r0
   b48be:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b48c0:	60a6      	str	r6, [r4, #8]
   b48c2:	45b8      	cmp	r8, r7
   b48c4:	d007      	beq.n	b48d6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x52>
   b48c6:	b11d      	cbz	r5, b48d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x4c>
   b48c8:	4639      	mov	r1, r7
   b48ca:	4628      	mov	r0, r5
   b48cc:	f7ff fc82 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b48d0:	3718      	adds	r7, #24
   b48d2:	3518      	adds	r5, #24
   b48d4:	e7f5      	b.n	b48c2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x3e>
      }
   b48d6:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
   b48d8:	6065      	str	r5, [r4, #4]
      }
   b48da:	b002      	add	sp, #8
   b48dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b48e0:	aaaaaaab 	.word	0xaaaaaaab
   b48e4:	7ffffff8 	.word	0x7ffffff8
   b48e8:	000be447 	.word	0x000be447

000b48ec <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b48ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48ee:	e9d1 3700 	ldrd	r3, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48f2:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48f4:	1aff      	subs	r7, r7, r3
      vector(const vector& __x)
   b48f6:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48f8:	e9c0 5500 	strd	r5, r5, [r0]
   b48fc:	6085      	str	r5, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48fe:	10f8      	asrs	r0, r7, #3
      vector(const vector& __x)
   b4900:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4902:	f7ff fc5a 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4906:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b490a:	4407      	add	r7, r0
   b490c:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b490e:	e9d6 7600 	ldrd	r7, r6, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4912:	4602      	mov	r2, r0
   b4914:	1bf6      	subs	r6, r6, r7
      : _M_current(__i) { }
   b4916:	462b      	mov	r3, r5
   b4918:	42b3      	cmp	r3, r6
   b491a:	eb02 0503 	add.w	r5, r2, r3
   b491e:	d006      	beq.n	b492e <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x42>
   b4920:	b11d      	cbz	r5, b492a <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x3e>
   b4922:	18f9      	adds	r1, r7, r3
   b4924:	c903      	ldmia	r1, {r0, r1}
   b4926:	e885 0003 	stmia.w	r5, {r0, r1}
   b492a:	3308      	adds	r3, #8
   b492c:	e7f4      	b.n	b4918 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b492e:	6065      	str	r5, [r4, #4]
      }
   b4930:	4620      	mov	r0, r4
   b4932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
   b4934:	b508      	push	{r3, lr}
      { return _M_string_length; }
   b4936:	6842      	ldr	r2, [r0, #4]
	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
    { return (__lhs.size() == __rhs.size()
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b4938:	684b      	ldr	r3, [r1, #4]
   b493a:	429a      	cmp	r2, r3
   b493c:	d108      	bne.n	b4950 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1c>
	if (__n == 0)
   b493e:	b14a      	cbz	r2, b4954 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x20>
	return __builtin_memcmp(__s1, __s2, __n);
   b4940:	6809      	ldr	r1, [r1, #0]
   b4942:	6800      	ldr	r0, [r0, #0]
   b4944:	f007 fc52 	bl	bc1ec <memcmp>
   b4948:	fab0 f080 	clz	r0, r0
   b494c:	0940      	lsrs	r0, r0, #5
						    __lhs.size())); }
   b494e:	bd08      	pop	{r3, pc}
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b4950:	2000      	movs	r0, #0
   b4952:	e7fc      	b.n	b494e <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>
   b4954:	2001      	movs	r0, #1
   b4956:	e7fa      	b.n	b494e <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>

000b4958 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  txCharacteristic.setValue("ok");
   b495c:	2200      	movs	r2, #0
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b495e:	b0a3      	sub	sp, #140	; 0x8c
   b4960:	4604      	mov	r4, r0
   b4962:	460d      	mov	r5, r1
  txCharacteristic.setValue("ok");
   b4964:	4895      	ldr	r0, [pc, #596]	; (b4bbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x264>)
   b4966:	4996      	ldr	r1, [pc, #600]	; (b4bc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x268>)
   b4968:	f004 fbe4 	bl	b9134 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
  String inputBuffer = "";
   b496c:	4995      	ldr	r1, [pc, #596]	; (b4bc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26c>)
   b496e:	a803      	add	r0, sp, #12
   b4970:	f005 fdcf 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
  String nameBuffer;
   b4974:	4993      	ldr	r1, [pc, #588]	; (b4bc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26c>)
   b4976:	a807      	add	r0, sp, #28
   b4978:	f005 fdcb 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
  for(int i = 0; i < len; i++){
   b497c:	4425      	add	r5, r4
   b497e:	42a5      	cmp	r5, r4
   b4980:	d005      	beq.n	b498e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x36>
	String & operator += (char c)			{concat(c); return (*this);}
   b4982:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4986:	a803      	add	r0, sp, #12
   b4988:	f005 fe4b 	bl	ba622 <_ZN6String6concatEc>
   b498c:	e7f7      	b.n	b497e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26>
  Serial.println(inputBuffer);
   b498e:	f006 faa1 	bl	baed4 <_Z16_fetch_usbserialv>
   b4992:	9903      	ldr	r1, [sp, #12]
   b4994:	f005 fd13 	bl	ba3be <_ZN5Print7printlnEPKc>
  if(inputBuffer.indexOf("wifi:") == 0){
   b4998:	498b      	ldr	r1, [pc, #556]	; (b4bc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x270>)
   b499a:	a80f      	add	r0, sp, #60	; 0x3c
   b499c:	f005 fdb9 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
   b49a0:	a90f      	add	r1, sp, #60	; 0x3c
   b49a2:	a803      	add	r0, sp, #12
   b49a4:	f005 feae 	bl	ba704 <_ZNK6String7indexOfERKS_>
   b49a8:	4604      	mov	r4, r0
   b49aa:	a80f      	add	r0, sp, #60	; 0x3c
   b49ac:	f005 fd66 	bl	ba47c <_ZN6StringD1Ev>
   b49b0:	2c00      	cmp	r4, #0
   b49b2:	d15b      	bne.n	b4a6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x114>
    int commaIndex = inputBuffer.indexOf(",");
   b49b4:	4985      	ldr	r1, [pc, #532]	; (b4bcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x274>)
    SSID = inputBuffer.substring(5, commaIndex);
   b49b6:	4d86      	ldr	r5, [pc, #536]	; (b4bd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>)
    int commaIndex = inputBuffer.indexOf(",");
   b49b8:	a80f      	add	r0, sp, #60	; 0x3c
   b49ba:	f005 fdaa 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
   b49be:	a90f      	add	r1, sp, #60	; 0x3c
   b49c0:	a803      	add	r0, sp, #12
   b49c2:	f005 fe9f 	bl	ba704 <_ZNK6String7indexOfERKS_>
   b49c6:	4604      	mov	r4, r0
   b49c8:	a80f      	add	r0, sp, #60	; 0x3c
   b49ca:	f005 fd57 	bl	ba47c <_ZN6StringD1Ev>
    SSID = inputBuffer.substring(5, commaIndex);
   b49ce:	4623      	mov	r3, r4
   b49d0:	2205      	movs	r2, #5
   b49d2:	a903      	add	r1, sp, #12
   b49d4:	a80f      	add	r0, sp, #60	; 0x3c
   b49d6:	f005 fe99 	bl	ba70c <_ZNK6String9substringEjj>
   b49da:	a90f      	add	r1, sp, #60	; 0x3c
   b49dc:	4628      	mov	r0, r5
   b49de:	f005 fdd8 	bl	ba592 <_ZN6StringaSEOS_>
   b49e2:	a80f      	add	r0, sp, #60	; 0x3c
   b49e4:	f005 fd4a 	bl	ba47c <_ZN6StringD1Ev>
    password = inputBuffer.substring(commaIndex + 1);
   b49e8:	1c62      	adds	r2, r4, #1
   b49ea:	4c7a      	ldr	r4, [pc, #488]	; (b4bd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x27c>)
   b49ec:	a903      	add	r1, sp, #12
   b49ee:	a80f      	add	r0, sp, #60	; 0x3c
   b49f0:	f005 feac 	bl	ba74c <_ZNK6String9substringEj>
   b49f4:	a90f      	add	r1, sp, #60	; 0x3c
   b49f6:	4620      	mov	r0, r4
   b49f8:	f005 fdcb 	bl	ba592 <_ZN6StringaSEOS_>
   b49fc:	a80f      	add	r0, sp, #60	; 0x3c
   b49fe:	f005 fd3d 	bl	ba47c <_ZN6StringD1Ev>
    Serial.printlnf("SSID: %s, password: %s", SSID.c_str(), password.c_str());
   b4a02:	f006 fa67 	bl	baed4 <_Z16_fetch_usbserialv>
   b4a06:	682a      	ldr	r2, [r5, #0]
   b4a08:	6823      	ldr	r3, [r4, #0]
   b4a0a:	4973      	ldr	r1, [pc, #460]	; (b4bd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x280>)
   b4a0c:	f7ff fcfe 	bl	b440c <_ZN5Print8printlnfEPKcz>
	const char * c_str() const { return buffer; }
   b4a10:	682f      	ldr	r7, [r5, #0]
   b4a12:	6825      	ldr	r5, [r4, #0]
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4a14:	b337      	cbz	r7, b4a64 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>
   b4a16:	4638      	mov	r0, r7
   b4a18:	f007 fc68 	bl	bc2ec <strlen>
   b4a1c:	4606      	mov	r6, r0
   b4a1e:	b31d      	cbz	r5, b4a68 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x110>
   b4a20:	4628      	mov	r0, r5
   b4a22:	f007 fc63 	bl	bc2ec <strlen>
   b4a26:	4604      	mov	r4, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b4a28:	2238      	movs	r2, #56	; 0x38
   b4a2a:	2100      	movs	r1, #0
   b4a2c:	a814      	add	r0, sp, #80	; 0x50
   b4a2e:	f007 fc15 	bl	bc25c <memset>
        creds.size = sizeof(creds);
   b4a32:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b4a34:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a38:	4868      	ldr	r0, [pc, #416]	; (b4bdc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x284>)
        creds.password_len = passwordLen;
   b4a3a:	9413      	str	r4, [sp, #76]	; 0x4c
        creds.security = WLanSecurityType(security);
   b4a3c:	2303      	movs	r3, #3
   b4a3e:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a42:	2300      	movs	r3, #0
   b4a44:	6840      	ldr	r0, [r0, #4]
   b4a46:	aa0f      	add	r2, sp, #60	; 0x3c
   b4a48:	4619      	mov	r1, r3
        creds.password = password;
   b4a4a:	e9cd 6511 	strd	r6, r5, [sp, #68]	; 0x44
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a4e:	f004 f84f 	bl	b8af0 <network_set_credentials>
  String nameBuffer;
   b4a52:	a807      	add	r0, sp, #28
   b4a54:	f005 fd12 	bl	ba47c <_ZN6StringD1Ev>
  String inputBuffer = "";
   b4a58:	a803      	add	r0, sp, #12
   b4a5a:	f005 fd0f 	bl	ba47c <_ZN6StringD1Ev>
}
   b4a5e:	b023      	add	sp, #140	; 0x8c
   b4a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4a64:	463e      	mov	r6, r7
   b4a66:	e7da      	b.n	b4a1e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc6>
   b4a68:	462c      	mov	r4, r5
   b4a6a:	e7dd      	b.n	b4a28 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd0>
  else if(inputBuffer.indexOf("city:") == 0){
   b4a6c:	495c      	ldr	r1, [pc, #368]	; (b4be0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x288>)
   b4a6e:	a80f      	add	r0, sp, #60	; 0x3c
   b4a70:	f005 fd4f 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
   b4a74:	a90f      	add	r1, sp, #60	; 0x3c
   b4a76:	a803      	add	r0, sp, #12
   b4a78:	f005 fe44 	bl	ba704 <_ZNK6String7indexOfERKS_>
   b4a7c:	4604      	mov	r4, r0
   b4a7e:	a80f      	add	r0, sp, #60	; 0x3c
   b4a80:	f005 fcfc 	bl	ba47c <_ZN6StringD1Ev>
   b4a84:	2c00      	cmp	r4, #0
   b4a86:	f040 8083 	bne.w	b4b90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x238>
    inputBuffer = inputBuffer.substring(5);
   b4a8a:	2205      	movs	r2, #5
   b4a8c:	a903      	add	r1, sp, #12
   b4a8e:	a80f      	add	r0, sp, #60	; 0x3c
   b4a90:	f005 fe5c 	bl	ba74c <_ZNK6String9substringEj>
   b4a94:	a90f      	add	r1, sp, #60	; 0x3c
   b4a96:	a803      	add	r0, sp, #12
   b4a98:	f005 fd7b 	bl	ba592 <_ZN6StringaSEOS_>
   b4a9c:	a80f      	add	r0, sp, #60	; 0x3c
   b4a9e:	f005 fced 	bl	ba47c <_ZN6StringD1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4aa2:	4d50      	ldr	r5, [pc, #320]	; (b4be4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28c>)
   b4aa4:	4f50      	ldr	r7, [pc, #320]	; (b4be8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x290>)
        cityIndex = i;
   b4aa6:	f8df 8144 	ldr.w	r8, [pc, #324]	; b4bec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x294>
   b4aaa:	e9d5 2300 	ldrd	r2, r3, [r5]
   b4aae:	1a9b      	subs	r3, r3, r2
   b4ab0:	10db      	asrs	r3, r3, #3
   b4ab2:	437b      	muls	r3, r7
    for(int i = 0; i < cities.size(); i++){
   b4ab4:	42a3      	cmp	r3, r4
   b4ab6:	d913      	bls.n	b4ae0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x188>
      { return _M_dataplus._M_p; }
   b4ab8:	2328      	movs	r3, #40	; 0x28
   b4aba:	fb03 2204 	mla	r2, r3, r4, r2
      if(inputBuffer == String(cities[i].name.c_str())){
   b4abe:	a80f      	add	r0, sp, #60	; 0x3c
   b4ac0:	68d1      	ldr	r1, [r2, #12]
   b4ac2:	f005 fd26 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4ac6:	a90f      	add	r1, sp, #60	; 0x3c
   b4ac8:	a803      	add	r0, sp, #12
   b4aca:	f005 fded 	bl	ba6a8 <_ZNK6String6equalsERKS_>
   b4ace:	4606      	mov	r6, r0
   b4ad0:	a80f      	add	r0, sp, #60	; 0x3c
   b4ad2:	f005 fcd3 	bl	ba47c <_ZN6StringD1Ev>
   b4ad6:	b10e      	cbz	r6, b4adc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x184>
        cityIndex = i;
   b4ad8:	f8c8 4000 	str.w	r4, [r8]
    for(int i = 0; i < cities.size(); i++){
   b4adc:	3401      	adds	r4, #1
   b4ade:	e7e4      	b.n	b4aaa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x152>
    if(cityIndex == -1){
   b4ae0:	4e42      	ldr	r6, [pc, #264]	; (b4bec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x294>)
   b4ae2:	6833      	ldr	r3, [r6, #0]
   b4ae4:	1c59      	adds	r1, r3, #1
   b4ae6:	d105      	bne.n	b4af4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x19c>
      txCharacteristic.setValue("incorrect city name");
   b4ae8:	4941      	ldr	r1, [pc, #260]	; (b4bf0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x298>)
   b4aea:	2200      	movs	r2, #0
        txCharacteristic.setValue("incorrect railway color");
   b4aec:	4833      	ldr	r0, [pc, #204]	; (b4bbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x264>)
   b4aee:	f004 fb21 	bl	b9134 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        return;
   b4af2:	e7ae      	b.n	b4a52 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
	return *(this->_M_impl._M_start + __n);
   b4af4:	2428      	movs	r4, #40	; 0x28
   b4af6:	4363      	muls	r3, r4
   b4af8:	18d1      	adds	r1, r2, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4afa:	58d3      	ldr	r3, [r2, r3]
   b4afc:	6849      	ldr	r1, [r1, #4]
    addressArr = std::vector<int>(cities[cityIndex].slaveCountExpected, 0);
   b4afe:	f8df 810c 	ldr.w	r8, [pc, #268]	; b4c0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b4>
   b4b02:	1ac9      	subs	r1, r1, r3
   b4b04:	4b3b      	ldr	r3, [pc, #236]	; (b4bf4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x29c>)
   b4b06:	1089      	asrs	r1, r1, #2
   b4b08:	4359      	muls	r1, r3
    sequenceArr = std::vector<int>(cities[cityIndex].railways.size() * 2, 0);
   b4b0a:	aa0b      	add	r2, sp, #44	; 0x2c
   b4b0c:	ab02      	add	r3, sp, #8
   b4b0e:	2700      	movs	r7, #0
   b4b10:	0049      	lsls	r1, r1, #1
   b4b12:	a80f      	add	r0, sp, #60	; 0x3c
   b4b14:	970b      	str	r7, [sp, #44]	; 0x2c
   b4b16:	f7ff fe5f 	bl	b47d8 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4b1a:	a90f      	add	r1, sp, #60	; 0x3c
   b4b1c:	4836      	ldr	r0, [pc, #216]	; (b4bf8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a0>)
   b4b1e:	f7ff fe31 	bl	b4784 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>
      }
   b4b22:	a80f      	add	r0, sp, #60	; 0x3c
   b4b24:	f7ff fe24 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
	return *(this->_M_impl._M_start + __n);
   b4b28:	6832      	ldr	r2, [r6, #0]
    addressArr = std::vector<int>(cities[cityIndex].slaveCountExpected, 0);
   b4b2a:	682b      	ldr	r3, [r5, #0]
   b4b2c:	fb04 3302 	mla	r3, r4, r2, r3
   b4b30:	a80f      	add	r0, sp, #60	; 0x3c
   b4b32:	aa0b      	add	r2, sp, #44	; 0x2c
   b4b34:	6a59      	ldr	r1, [r3, #36]	; 0x24
   b4b36:	970b      	str	r7, [sp, #44]	; 0x2c
   b4b38:	ab02      	add	r3, sp, #8
   b4b3a:	f7ff fe4d 	bl	b47d8 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4b3e:	a90f      	add	r1, sp, #60	; 0x3c
   b4b40:	4640      	mov	r0, r8
   b4b42:	f7ff fe1f 	bl	b4784 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>
      }
   b4b46:	a80f      	add	r0, sp, #60	; 0x3c
   b4b48:	f7ff fe12 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
    randomizeAddress();
   b4b4c:	f7ff fc6c 	bl	b4428 <_Z16randomizeAddressv>
    txCharacteristic.setValue("slave addresses sorted");
   b4b50:	463a      	mov	r2, r7
   b4b52:	492a      	ldr	r1, [pc, #168]	; (b4bfc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a4>)
   b4b54:	4819      	ldr	r0, [pc, #100]	; (b4bbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x264>)
   b4b56:	f004 faed 	bl	b9134 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    Wire.beginTransmission(addressArr[0]);
   b4b5a:	f006 fb09 	bl	bb170 <_Z19__fetch_global_Wirev>
   b4b5e:	f8d8 3000 	ldr.w	r3, [r8]
   b4b62:	6819      	ldr	r1, [r3, #0]
   b4b64:	f005 fa9e 	bl	ba0a4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('3');
   b4b68:	f006 fb02 	bl	bb170 <_Z19__fetch_global_Wirev>
   b4b6c:	2133      	movs	r1, #51	; 0x33
   b4b6e:	f7ff fb57 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b4b72:	f006 fafd 	bl	bb170 <_Z19__fetch_global_Wirev>
   b4b76:	f005 fa9c 	bl	ba0b2 <_ZN7TwoWire15endTransmissionEv>
    Serial.printlnf("city: %s", cities[cityIndex].name.c_str());
   b4b7a:	f006 f9ab 	bl	baed4 <_Z16_fetch_usbserialv>
	return *(this->_M_impl._M_start + __n);
   b4b7e:	6832      	ldr	r2, [r6, #0]
   b4b80:	682b      	ldr	r3, [r5, #0]
   b4b82:	491f      	ldr	r1, [pc, #124]	; (b4c00 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a8>)
   b4b84:	fb04 3402 	mla	r4, r4, r2, r3
   b4b88:	68e2      	ldr	r2, [r4, #12]
   b4b8a:	f7ff fc3f 	bl	b440c <_ZN5Print8printlnfEPKcz>
   b4b8e:	e760      	b.n	b4a52 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
  else if(inputBuffer.indexOf("color:") == 0){
   b4b90:	491c      	ldr	r1, [pc, #112]	; (b4c04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ac>)
   b4b92:	a80f      	add	r0, sp, #60	; 0x3c
   b4b94:	f005 fcbd 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
   b4b98:	a90f      	add	r1, sp, #60	; 0x3c
   b4b9a:	a803      	add	r0, sp, #12
   b4b9c:	f005 fdb2 	bl	ba704 <_ZNK6String7indexOfERKS_>
   b4ba0:	4604      	mov	r4, r0
   b4ba2:	a80f      	add	r0, sp, #60	; 0x3c
   b4ba4:	f005 fc6a 	bl	ba47c <_ZN6StringD1Ev>
   b4ba8:	2c00      	cmp	r4, #0
   b4baa:	f040 81dc 	bne.w	b4f66 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60e>
    if(cityIndex == -1){
   b4bae:	4e0f      	ldr	r6, [pc, #60]	; (b4bec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x294>)
   b4bb0:	6833      	ldr	r3, [r6, #0]
   b4bb2:	3301      	adds	r3, #1
   b4bb4:	d12c      	bne.n	b4c10 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>
      txCharacteristic.setValue("city not set");
   b4bb6:	4914      	ldr	r1, [pc, #80]	; (b4c08 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>)
   b4bb8:	4622      	mov	r2, r4
   b4bba:	e797      	b.n	b4aec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x194>
   b4bbc:	2003e6ac 	.word	0x2003e6ac
   b4bc0:	000be478 	.word	0x000be478
   b4bc4:	000be8be 	.word	0x000be8be
   b4bc8:	000be47b 	.word	0x000be47b
   b4bcc:	000be481 	.word	0x000be481
   b4bd0:	200352a0 	.word	0x200352a0
   b4bd4:	2003e474 	.word	0x2003e474
   b4bd8:	000be483 	.word	0x000be483
   b4bdc:	2003e718 	.word	0x2003e718
   b4be0:	000be49a 	.word	0x000be49a
   b4be4:	20035450 	.word	0x20035450
   b4be8:	cccccccd 	.word	0xcccccccd
   b4bec:	200350a8 	.word	0x200350a8
   b4bf0:	000be4a0 	.word	0x000be4a0
   b4bf4:	684bda13 	.word	0x684bda13
   b4bf8:	2003e69c 	.word	0x2003e69c
   b4bfc:	000be4b4 	.word	0x000be4b4
   b4c00:	000be4cb 	.word	0x000be4cb
   b4c04:	000be4d4 	.word	0x000be4d4
   b4c08:	000be4db 	.word	0x000be4db
   b4c0c:	200352f8 	.word	0x200352f8
    inputBuffer = inputBuffer.substring(6);
   b4c10:	2206      	movs	r2, #6
   b4c12:	a903      	add	r1, sp, #12
   b4c14:	a80f      	add	r0, sp, #60	; 0x3c
   b4c16:	f005 fd99 	bl	ba74c <_ZNK6String9substringEj>
   b4c1a:	a90f      	add	r1, sp, #60	; 0x3c
   b4c1c:	a803      	add	r0, sp, #12
   b4c1e:	f005 fcb8 	bl	ba592 <_ZN6StringaSEOS_>
   b4c22:	a80f      	add	r0, sp, #60	; 0x3c
   b4c24:	f005 fc2a 	bl	ba47c <_ZN6StringD1Ev>
   b4c28:	4fac      	ldr	r7, [pc, #688]	; (b4edc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x584>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c2a:	f8df 82f8 	ldr.w	r8, [pc, #760]	; b4f24 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5cc>
    nameBuffer = inputBuffer;
   b4c2e:	a903      	add	r1, sp, #12
   b4c30:	a807      	add	r0, sp, #28
   b4c32:	f005 fc9f 	bl	ba574 <_ZN6StringaSERKS_>
    if(bleCount < cities[cityIndex].railways.size()){
   b4c36:	6831      	ldr	r1, [r6, #0]
	return *(this->_M_impl._M_start + __n);
   b4c38:	6838      	ldr	r0, [r7, #0]
   b4c3a:	2228      	movs	r2, #40	; 0x28
   b4c3c:	434a      	muls	r2, r1
   b4c3e:	1883      	adds	r3, r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c40:	5882      	ldr	r2, [r0, r2]
   b4c42:	685b      	ldr	r3, [r3, #4]
   b4c44:	1a9b      	subs	r3, r3, r2
   b4c46:	4aa6      	ldr	r2, [pc, #664]	; (b4ee0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x588>)
   b4c48:	109b      	asrs	r3, r3, #2
   b4c4a:	6812      	ldr	r2, [r2, #0]
   b4c4c:	fb08 f303 	mul.w	r3, r8, r3
   b4c50:	429a      	cmp	r2, r3
   b4c52:	f080 80d6 	bcs.w	b4e02 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4aa>
      if((cityIndex == 0 || cityIndex == 1) && (inputBuffer == "green1" || inputBuffer == "green2")){
   b4c56:	2901      	cmp	r1, #1
   b4c58:	d808      	bhi.n	b4c6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x314>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4c5a:	49a2      	ldr	r1, [pc, #648]	; (b4ee4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58c>)
   b4c5c:	a803      	add	r0, sp, #12
   b4c5e:	f005 fd30 	bl	ba6c2 <_ZNK6String6equalsEPKc>
   b4c62:	b328      	cbz	r0, b4cb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x358>
        nameBuffer = "green";
   b4c64:	49a0      	ldr	r1, [pc, #640]	; (b4ee8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x590>)
   b4c66:	a807      	add	r0, sp, #28
   b4c68:	f005 fc9b 	bl	ba5a2 <_ZN6StringaSEPKc>
          railwayIndex = i;
   b4c6c:	f8df b284 	ldr.w	fp, [pc, #644]	; b4ef4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x59c>
   b4c70:	f04f 0a00 	mov.w	sl, #0
	return *(this->_M_impl._M_start + __n);
   b4c74:	f04f 0928 	mov.w	r9, #40	; 0x28
      for(int i = 0; i < cities[cityIndex].railways.size(); i++){
   b4c78:	6835      	ldr	r5, [r6, #0]
   b4c7a:	6838      	ldr	r0, [r7, #0]
   b4c7c:	fb09 f105 	mul.w	r1, r9, r5
   b4c80:	1843      	adds	r3, r0, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c82:	5841      	ldr	r1, [r0, r1]
   b4c84:	685b      	ldr	r3, [r3, #4]
   b4c86:	1a5b      	subs	r3, r3, r1
   b4c88:	109b      	asrs	r3, r3, #2
   b4c8a:	fb08 f303 	mul.w	r3, r8, r3
   b4c8e:	4553      	cmp	r3, sl
   b4c90:	d938      	bls.n	b4d04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3ac>
        if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4c92:	b9a5      	cbnz	r5, b4cbe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x366>
   b4c94:	4b95      	ldr	r3, [pc, #596]	; (b4eec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x594>)
   b4c96:	a80b      	add	r0, sp, #44	; 0x2c
   b4c98:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4c9a:	f005 fc3a 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
   b4c9e:	a90b      	add	r1, sp, #44	; 0x2c
   b4ca0:	a807      	add	r0, sp, #28
   b4ca2:	f005 fd01 	bl	ba6a8 <_ZNK6String6equalsERKS_>
   b4ca6:	b358      	cbz	r0, b4d00 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a8>
   b4ca8:	a80b      	add	r0, sp, #44	; 0x2c
   b4caa:	f005 fbe7 	bl	ba47c <_ZN6StringD1Ev>
   b4cae:	e021      	b.n	b4cf4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x39c>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4cb0:	498f      	ldr	r1, [pc, #572]	; (b4ef0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x598>)
   b4cb2:	a803      	add	r0, sp, #12
   b4cb4:	f005 fd05 	bl	ba6c2 <_ZNK6String6equalsEPKc>
      if((cityIndex == 0 || cityIndex == 1) && (inputBuffer == "green1" || inputBuffer == "green2")){
   b4cb8:	2800      	cmp	r0, #0
   b4cba:	d1d3      	bne.n	b4c64 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x30c>
   b4cbc:	e7d6      	b.n	b4c6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x314>
        if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4cbe:	2300      	movs	r3, #0
	return *(this->_M_impl._M_start + __n);
   b4cc0:	6831      	ldr	r1, [r6, #0]
   b4cc2:	6838      	ldr	r0, [r7, #0]
   b4cc4:	9301      	str	r3, [sp, #4]
   b4cc6:	fb09 f101 	mul.w	r1, r9, r1
   b4cca:	5841      	ldr	r1, [r0, r1]
   b4ccc:	206c      	movs	r0, #108	; 0x6c
   b4cce:	fb00 110a 	mla	r1, r0, sl, r1
   b4cd2:	a80f      	add	r0, sp, #60	; 0x3c
   b4cd4:	6b09      	ldr	r1, [r1, #48]	; 0x30
   b4cd6:	f005 fc1c 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4cda:	a907      	add	r1, sp, #28
   b4cdc:	a80f      	add	r0, sp, #60	; 0x3c
   b4cde:	f005 fce3 	bl	ba6a8 <_ZNK6String6equalsERKS_>
   b4ce2:	1e05      	subs	r5, r0, #0
   b4ce4:	a80f      	add	r0, sp, #60	; 0x3c
   b4ce6:	bf18      	it	ne
   b4ce8:	2501      	movne	r5, #1
   b4cea:	f005 fbc7 	bl	ba47c <_ZN6StringD1Ev>
   b4cee:	9b01      	ldr	r3, [sp, #4]
   b4cf0:	2b00      	cmp	r3, #0
   b4cf2:	d1d9      	bne.n	b4ca8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x350>
   b4cf4:	b10d      	cbz	r5, b4cfa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a2>
          railwayIndex = i;
   b4cf6:	f8cb a000 	str.w	sl, [fp]
      for(int i = 0; i < cities[cityIndex].railways.size(); i++){
   b4cfa:	f10a 0a01 	add.w	sl, sl, #1
   b4cfe:	e7bb      	b.n	b4c78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x320>
        if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4d00:	2301      	movs	r3, #1
   b4d02:	e7dd      	b.n	b4cc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x368>
      if(cityIndex == 1 && inputBuffer == "green1"){
   b4d04:	2d01      	cmp	r5, #1
   b4d06:	4d7b      	ldr	r5, [pc, #492]	; (b4ef4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x59c>)
   b4d08:	d107      	bne.n	b4d1a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c2>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4d0a:	4976      	ldr	r1, [pc, #472]	; (b4ee4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58c>)
   b4d0c:	a803      	add	r0, sp, #12
   b4d0e:	f005 fcd8 	bl	ba6c2 <_ZNK6String6equalsEPKc>
   b4d12:	b110      	cbz	r0, b4d1a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c2>
        railwayIndex--;
   b4d14:	682b      	ldr	r3, [r5, #0]
   b4d16:	3b01      	subs	r3, #1
   b4d18:	602b      	str	r3, [r5, #0]
      Serial.printlnf("railway index: %i", railwayIndex);
   b4d1a:	f006 f8db 	bl	baed4 <_Z16_fetch_usbserialv>
   b4d1e:	682a      	ldr	r2, [r5, #0]
   b4d20:	4975      	ldr	r1, [pc, #468]	; (b4ef8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a0>)
   b4d22:	f7ff fb73 	bl	b440c <_ZN5Print8printlnfEPKcz>
      if(railwayIndex == -1){
   b4d26:	682b      	ldr	r3, [r5, #0]
   b4d28:	3301      	adds	r3, #1
   b4d2a:	d031      	beq.n	b4d90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x438>
   b4d2c:	4d73      	ldr	r5, [pc, #460]	; (b4efc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a4>)
        Serial.printlnf("address: %i", addressArr[bleCount]);
   b4d2e:	f8df 91b0 	ldr.w	r9, [pc, #432]	; b4ee0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x588>
        if(cities[cityIndex].railways[railwayIndex].outputs[i].size() == 0 || (cityIndex == 0 && cities[cityIndex].railways[railwayIndex].name == purpleLineCTA.name)){
   b4d32:	f8df a1c0 	ldr.w	sl, [pc, #448]	; b4ef4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x59c>
        Serial.printlnf("address: %i", addressArr[bleCount]);
   b4d36:	f006 f8cd 	bl	baed4 <_Z16_fetch_usbserialv>
   b4d3a:	682b      	ldr	r3, [r5, #0]
   b4d3c:	f8d9 2000 	ldr.w	r2, [r9]
   b4d40:	496f      	ldr	r1, [pc, #444]	; (b4f00 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a8>)
   b4d42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   b4d46:	f7ff fb61 	bl	b440c <_ZN5Print8printlnfEPKcz>
        if(cities[cityIndex].railways[railwayIndex].outputs[i].size() == 0 || (cityIndex == 0 && cities[cityIndex].railways[railwayIndex].name == purpleLineCTA.name)){
   b4d4a:	6832      	ldr	r2, [r6, #0]
   b4d4c:	6839      	ldr	r1, [r7, #0]
   b4d4e:	f8da b000 	ldr.w	fp, [sl]
   b4d52:	2328      	movs	r3, #40	; 0x28
   b4d54:	4353      	muls	r3, r2
   b4d56:	58c8      	ldr	r0, [r1, r3]
   b4d58:	236c      	movs	r3, #108	; 0x6c
   b4d5a:	fb03 000b 	mla	r0, r3, fp, r0
   b4d5e:	230c      	movs	r3, #12
   b4d60:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b4d62:	4363      	muls	r3, r4
   b4d64:	eb01 0c03 	add.w	ip, r1, r3
   b4d68:	58cb      	ldr	r3, [r1, r3]
   b4d6a:	f8dc c004 	ldr.w	ip, [ip, #4]
   b4d6e:	459c      	cmp	ip, r3
   b4d70:	d019      	beq.n	b4da6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44e>
   b4d72:	b192      	cbz	r2, b4d9a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x442>
            sequenceArr[2 * railwayIndex + i] = addressArr[bleCount];
   b4d74:	682b      	ldr	r3, [r5, #0]
   b4d76:	f8d9 2000 	ldr.w	r2, [r9]
   b4d7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b4d7e:	f8da 3000 	ldr.w	r3, [sl]
   b4d82:	eb04 0343 	add.w	r3, r4, r3, lsl #1
              sequenceArr[2 * railwayIndex + 1] = addressArr[bleCount];
   b4d86:	4a5f      	ldr	r2, [pc, #380]	; (b4f04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ac>)
   b4d88:	6812      	ldr	r2, [r2, #0]
   b4d8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   b4d8e:	e077      	b.n	b4e80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x528>
        txCharacteristic.setValue("incorrect railway color");
   b4d90:	495d      	ldr	r1, [pc, #372]	; (b4f08 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b0>)
   b4d92:	2200      	movs	r2, #0
   b4d94:	e6aa      	b.n	b4aec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x194>
   b4d96:	2401      	movs	r4, #1
   b4d98:	e7cb      	b.n	b4d32 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3da>
        if(cities[cityIndex].railways[railwayIndex].outputs[i].size() == 0 || (cityIndex == 0 && cities[cityIndex].railways[railwayIndex].name == purpleLineCTA.name)){
   b4d9a:	495c      	ldr	r1, [pc, #368]	; (b4f0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b4>)
   b4d9c:	3030      	adds	r0, #48	; 0x30
   b4d9e:	f7ff fdc9 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b4da2:	2800      	cmp	r0, #0
   b4da4:	d056      	beq.n	b4e54 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4fc>
          sequenceArr[2 * railwayIndex + i] = 0;
   b4da6:	4b57      	ldr	r3, [pc, #348]	; (b4f04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ac>)
   b4da8:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
   b4dac:	681b      	ldr	r3, [r3, #0]
   b4dae:	2200      	movs	r2, #0
   b4db0:	f843 202b 	str.w	r2, [r3, fp, lsl #2]
      for(int i = 0; i < 2; i++){
   b4db4:	2c01      	cmp	r4, #1
   b4db6:	d1ee      	bne.n	b4d96 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x43e>
      Wire.beginTransmission(addressArr[bleCount]);
   b4db8:	f006 f9da 	bl	bb170 <_Z19__fetch_global_Wirev>
   b4dbc:	f8d9 2000 	ldr.w	r2, [r9]
   b4dc0:	682b      	ldr	r3, [r5, #0]
   b4dc2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b4dc6:	f005 f96d 	bl	ba0a4 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b4dca:	f006 f9d1 	bl	bb170 <_Z19__fetch_global_Wirev>
   b4dce:	2134      	movs	r1, #52	; 0x34
   b4dd0:	f7ff fa26 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4dd4:	f006 f9cc 	bl	bb170 <_Z19__fetch_global_Wirev>
   b4dd8:	f005 f96b 	bl	ba0b2 <_ZN7TwoWire15endTransmissionEv>
      Wire.beginTransmission(addressArr[bleCount + 1]);
   b4ddc:	f006 f9c8 	bl	bb170 <_Z19__fetch_global_Wirev>
   b4de0:	f8d9 3000 	ldr.w	r3, [r9]
   b4de4:	682a      	ldr	r2, [r5, #0]
   b4de6:	3301      	adds	r3, #1
   b4de8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b4dec:	f005 f95a 	bl	ba0a4 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('3');
   b4df0:	f006 f9be 	bl	bb170 <_Z19__fetch_global_Wirev>
   b4df4:	2133      	movs	r1, #51	; 0x33
   b4df6:	f7ff fa13 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4dfa:	f006 f9b9 	bl	bb170 <_Z19__fetch_global_Wirev>
   b4dfe:	f005 f958 	bl	ba0b2 <_ZN7TwoWire15endTransmissionEv>
   b4e02:	6832      	ldr	r2, [r6, #0]
   b4e04:	6839      	ldr	r1, [r7, #0]
    if(bleCount == cities[cityIndex].railways.size() - 1){
   b4e06:	4c36      	ldr	r4, [pc, #216]	; (b4ee0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x588>)
   b4e08:	2328      	movs	r3, #40	; 0x28
   b4e0a:	435a      	muls	r2, r3
   b4e0c:	188b      	adds	r3, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4e0e:	588a      	ldr	r2, [r1, r2]
   b4e10:	685b      	ldr	r3, [r3, #4]
   b4e12:	1a9b      	subs	r3, r3, r2
   b4e14:	109b      	asrs	r3, r3, #2
   b4e16:	6822      	ldr	r2, [r4, #0]
   b4e18:	fb08 f303 	mul.w	r3, r8, r3
   b4e1c:	3b01      	subs	r3, #1
   b4e1e:	4293      	cmp	r3, r2
   b4e20:	d114      	bne.n	b4e4c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4f4>
      Serial.println("BLE finished");
   b4e22:	f006 f857 	bl	baed4 <_Z16_fetch_usbserialv>
   b4e26:	493a      	ldr	r1, [pc, #232]	; (b4f10 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b8>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4e28:	4d3a      	ldr	r5, [pc, #232]	; (b4f14 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5bc>)
   b4e2a:	f005 fac8 	bl	ba3be <_ZN5Print7printlnEPKc>
      userInput = true;
   b4e2e:	4b3a      	ldr	r3, [pc, #232]	; (b4f18 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c0>)
        network_on(*this, 0, 0, NULL);
   b4e30:	6868      	ldr	r0, [r5, #4]
   b4e32:	2201      	movs	r2, #1
   b4e34:	701a      	strb	r2, [r3, #0]
   b4e36:	2300      	movs	r3, #0
   b4e38:	461a      	mov	r2, r3
   b4e3a:	4619      	mov	r1, r3
   b4e3c:	f003 fe30 	bl	b8aa0 <network_on>
        network_connect(*this, flags, 0, NULL);
   b4e40:	2300      	movs	r3, #0
   b4e42:	6868      	ldr	r0, [r5, #4]
   b4e44:	461a      	mov	r2, r3
   b4e46:	4619      	mov	r1, r3
   b4e48:	f003 fe0a 	bl	b8a60 <network_connect>
    bleCount++;
   b4e4c:	6823      	ldr	r3, [r4, #0]
   b4e4e:	3301      	adds	r3, #1
   b4e50:	6023      	str	r3, [r4, #0]
   b4e52:	e5fe      	b.n	b4a52 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
   b4e54:	4924      	ldr	r1, [pc, #144]	; (b4ee8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x590>)
   b4e56:	a807      	add	r0, sp, #28
   b4e58:	f005 fc33 	bl	ba6c2 <_ZNK6String6equalsEPKc>
          if(cityIndex == 0 && nameBuffer == "green"){
   b4e5c:	2800      	cmp	r0, #0
   b4e5e:	d089      	beq.n	b4d74 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x41c>
   b4e60:	4920      	ldr	r1, [pc, #128]	; (b4ee4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x58c>)
   b4e62:	a803      	add	r0, sp, #12
   b4e64:	f005 fc2d 	bl	ba6c2 <_ZNK6String6equalsEPKc>
            if(inputBuffer == "green1"){
   b4e68:	b340      	cbz	r0, b4ebc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x564>
	return *(this->_M_impl._M_start + __n);
   b4e6a:	f8d9 2000 	ldr.w	r2, [r9]
              sequenceArr[2 * railwayIndex] = addressArr[bleCount];
   b4e6e:	682b      	ldr	r3, [r5, #0]
   b4e70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b4e74:	4b23      	ldr	r3, [pc, #140]	; (b4f04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ac>)
   b4e76:	f8da 2000 	ldr.w	r2, [sl]
   b4e7a:	681b      	ldr	r3, [r3, #0]
   b4e7c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
          if(cityIndex == 0){
   b4e80:	6833      	ldr	r3, [r6, #0]
   b4e82:	2b00      	cmp	r3, #0
   b4e84:	d196      	bne.n	b4db4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x45c>
   b4e86:	4b25      	ldr	r3, [pc, #148]	; (b4f1c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c4>)
            if(inputBuffer == String(brownLineCTA.name.c_str())){
   b4e88:	a80f      	add	r0, sp, #60	; 0x3c
   b4e8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4e8c:	f005 fb41 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4e90:	a90f      	add	r1, sp, #60	; 0x3c
   b4e92:	a803      	add	r0, sp, #12
   b4e94:	f005 fc08 	bl	ba6a8 <_ZNK6String6equalsERKS_>
   b4e98:	4682      	mov	sl, r0
   b4e9a:	a80f      	add	r0, sp, #60	; 0x3c
   b4e9c:	f005 faee 	bl	ba47c <_ZN6StringD1Ev>
   b4ea0:	f1ba 0f00 	cmp.w	sl, #0
   b4ea4:	d040      	beq.n	b4f28 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d0>
            brownLineCTAAdr = sequenceArr[2 * railwayIndex + i];
   b4ea6:	4b13      	ldr	r3, [pc, #76]	; (b4ef4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x59c>)
   b4ea8:	4a16      	ldr	r2, [pc, #88]	; (b4f04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ac>)
   b4eaa:	681b      	ldr	r3, [r3, #0]
   b4eac:	6812      	ldr	r2, [r2, #0]
   b4eae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   b4eb2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b4eb6:	4b1a      	ldr	r3, [pc, #104]	; (b4f20 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c8>)
              greenLineCTAAdr[0] = sequenceArr[2 * railwayIndex];
   b4eb8:	601a      	str	r2, [r3, #0]
   b4eba:	e77b      	b.n	b4db4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x45c>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4ebc:	490c      	ldr	r1, [pc, #48]	; (b4ef0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x598>)
   b4ebe:	a803      	add	r0, sp, #12
   b4ec0:	f005 fbff 	bl	ba6c2 <_ZNK6String6equalsEPKc>
            }else if(inputBuffer == "green2"){
   b4ec4:	2800      	cmp	r0, #0
   b4ec6:	d0db      	beq.n	b4e80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x528>
              sequenceArr[2 * railwayIndex + 1] = addressArr[bleCount];
   b4ec8:	682b      	ldr	r3, [r5, #0]
   b4eca:	f8d9 2000 	ldr.w	r2, [r9]
   b4ece:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b4ed2:	f8da 3000 	ldr.w	r3, [sl]
   b4ed6:	005b      	lsls	r3, r3, #1
   b4ed8:	3301      	adds	r3, #1
   b4eda:	e754      	b.n	b4d86 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x42e>
   b4edc:	20035450 	.word	0x20035450
   b4ee0:	20035304 	.word	0x20035304
   b4ee4:	000be4e8 	.word	0x000be4e8
   b4ee8:	000be4ef 	.word	0x000be4ef
   b4eec:	2003e4f0 	.word	0x2003e4f0
   b4ef0:	000be4f5 	.word	0x000be4f5
   b4ef4:	200350bc 	.word	0x200350bc
   b4ef8:	000be4fc 	.word	0x000be4fc
   b4efc:	200352f8 	.word	0x200352f8
   b4f00:	000be526 	.word	0x000be526
   b4f04:	2003e69c 	.word	0x2003e69c
   b4f08:	000be50e 	.word	0x000be50e
   b4f0c:	2003e520 	.word	0x2003e520
   b4f10:	000be532 	.word	0x000be532
   b4f14:	2003e718 	.word	0x2003e718
   b4f18:	2003e6b4 	.word	0x2003e6b4
   b4f1c:	200353e0 	.word	0x200353e0
   b4f20:	2003544c 	.word	0x2003544c
   b4f24:	684bda13 	.word	0x684bda13
   b4f28:	492f      	ldr	r1, [pc, #188]	; (b4fe8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x690>)
   b4f2a:	a803      	add	r0, sp, #12
   b4f2c:	f005 fbc9 	bl	ba6c2 <_ZNK6String6equalsEPKc>
            }else if(inputBuffer == "green1"){
   b4f30:	b138      	cbz	r0, b4f42 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ea>
              greenLineCTAAdr[0] = sequenceArr[2 * railwayIndex];
   b4f32:	4b2e      	ldr	r3, [pc, #184]	; (b4fec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x694>)
   b4f34:	681a      	ldr	r2, [r3, #0]
   b4f36:	4b2e      	ldr	r3, [pc, #184]	; (b4ff0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x698>)
   b4f38:	681b      	ldr	r3, [r3, #0]
   b4f3a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
   b4f3e:	4b2d      	ldr	r3, [pc, #180]	; (b4ff4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x69c>)
   b4f40:	e7ba      	b.n	b4eb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x560>
   b4f42:	492d      	ldr	r1, [pc, #180]	; (b4ff8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6a0>)
   b4f44:	a803      	add	r0, sp, #12
   b4f46:	f005 fbbc 	bl	ba6c2 <_ZNK6String6equalsEPKc>
            }else if(inputBuffer == "green2"){
   b4f4a:	2800      	cmp	r0, #0
   b4f4c:	f43f af32 	beq.w	b4db4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x45c>
              greenLineCTAAdr[1] = sequenceArr[2 * railwayIndex + 1];
   b4f50:	4b26      	ldr	r3, [pc, #152]	; (b4fec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x694>)
   b4f52:	4a27      	ldr	r2, [pc, #156]	; (b4ff0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x698>)
   b4f54:	681b      	ldr	r3, [r3, #0]
   b4f56:	6812      	ldr	r2, [r2, #0]
   b4f58:	005b      	lsls	r3, r3, #1
   b4f5a:	3301      	adds	r3, #1
   b4f5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b4f60:	4b24      	ldr	r3, [pc, #144]	; (b4ff4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x69c>)
   b4f62:	605a      	str	r2, [r3, #4]
   b4f64:	e726      	b.n	b4db4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x45c>
  }else if(inputBuffer.indexOf("reset") == 0){
   b4f66:	4925      	ldr	r1, [pc, #148]	; (b4ffc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6a4>)
   b4f68:	a80f      	add	r0, sp, #60	; 0x3c
   b4f6a:	f005 fad2 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
   b4f6e:	a90f      	add	r1, sp, #60	; 0x3c
   b4f70:	a803      	add	r0, sp, #12
   b4f72:	f005 fbc7 	bl	ba704 <_ZNK6String7indexOfERKS_>
   b4f76:	4604      	mov	r4, r0
   b4f78:	a80f      	add	r0, sp, #60	; 0x3c
   b4f7a:	f005 fa7f 	bl	ba47c <_ZN6StringD1Ev>
   b4f7e:	2c00      	cmp	r4, #0
   b4f80:	f47f ad67 	bne.w	b4a52 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f84:	4d1e      	ldr	r5, [pc, #120]	; (b5000 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6a8>)
      Serial.printlnf("turning off: %i", i);
   b4f86:	4e1f      	ldr	r6, [pc, #124]	; (b5004 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6ac>)
   b4f88:	e9d5 2300 	ldrd	r2, r3, [r5]
   b4f8c:	1a9b      	subs	r3, r3, r2
    for(int i = 0; i < addressArr.size(); i++){
   b4f8e:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b4f92:	d217      	bcs.n	b4fc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x66c>
      Serial.printlnf("turning off: %i", i);
   b4f94:	f005 ff9e 	bl	baed4 <_Z16_fetch_usbserialv>
   b4f98:	4622      	mov	r2, r4
   b4f9a:	4631      	mov	r1, r6
   b4f9c:	f7ff fa36 	bl	b440c <_ZN5Print8printlnfEPKcz>
      Wire.beginTransmission(addressArr[i]);
   b4fa0:	f006 f8e6 	bl	bb170 <_Z19__fetch_global_Wirev>
   b4fa4:	682b      	ldr	r3, [r5, #0]
   b4fa6:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b4faa:	f005 f87b 	bl	ba0a4 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b4fae:	f006 f8df 	bl	bb170 <_Z19__fetch_global_Wirev>
   b4fb2:	2134      	movs	r1, #52	; 0x34
   b4fb4:	f7ff f934 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4fb8:	f006 f8da 	bl	bb170 <_Z19__fetch_global_Wirev>
   b4fbc:	f005 f879 	bl	ba0b2 <_ZN7TwoWire15endTransmissionEv>
    for(int i = 0; i < addressArr.size(); i++){
   b4fc0:	3401      	adds	r4, #1
   b4fc2:	e7e1      	b.n	b4f88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x630>
    bleCount = 0;
   b4fc4:	4a10      	ldr	r2, [pc, #64]	; (b5008 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6b0>)
    cityIndex = -1;
   b4fc6:	4911      	ldr	r1, [pc, #68]	; (b500c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6b4>)
    bleCount = 0;
   b4fc8:	2300      	movs	r3, #0
   b4fca:	6013      	str	r3, [r2, #0]
    cityIndex = -1;
   b4fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b4fd0:	600a      	str	r2, [r1, #0]
    railwayIndex = -1;
   b4fd2:	4906      	ldr	r1, [pc, #24]	; (b4fec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x694>)
   b4fd4:	600a      	str	r2, [r1, #0]
    userInput = false;
   b4fd6:	4a0e      	ldr	r2, [pc, #56]	; (b5010 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6b8>)
   b4fd8:	7013      	strb	r3, [r2, #0]
    Serial.println("reset done");
   b4fda:	f005 ff7b 	bl	baed4 <_Z16_fetch_usbserialv>
   b4fde:	490d      	ldr	r1, [pc, #52]	; (b5014 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6bc>)
   b4fe0:	f005 f9ed 	bl	ba3be <_ZN5Print7printlnEPKc>
   b4fe4:	e535      	b.n	b4a52 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
   b4fe6:	bf00      	nop
   b4fe8:	000be4e8 	.word	0x000be4e8
   b4fec:	200350bc 	.word	0x200350bc
   b4ff0:	2003e69c 	.word	0x2003e69c
   b4ff4:	200355b0 	.word	0x200355b0
   b4ff8:	000be4f5 	.word	0x000be4f5
   b4ffc:	000be53f 	.word	0x000be53f
   b5000:	200352f8 	.word	0x200352f8
   b5004:	000be545 	.word	0x000be545
   b5008:	20035304 	.word	0x20035304
   b500c:	200350a8 	.word	0x200350a8
   b5010:	2003e6b4 	.word	0x2003e6b4
   b5014:	000be555 	.word	0x000be555

000b5018 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5018:	2900      	cmp	r1, #0
      _M_create_storage(size_t __n)
   b501a:	b538      	push	{r3, r4, r5, lr}
   b501c:	4604      	mov	r4, r0
      _M_allocate(size_t __n)
   b501e:	ea4f 0581 	mov.w	r5, r1, lsl #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5022:	d00c      	beq.n	b503e <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x26>
	if (__n > this->_M_max_size())
   b5024:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   b5028:	d301      	bcc.n	b502e <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
   b502a:	f006 f907 	bl	bb23c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b502e:	4628      	mov	r0, r5
   b5030:	f7ff f831 	bl	b4096 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5034:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5038:	4428      	add	r0, r5
   b503a:	60a0      	str	r0, [r4, #8]
      }
   b503c:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b503e:	4608      	mov	r0, r1
   b5040:	e7f8      	b.n	b5034 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x1c>

000b5042 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b5042:	b538      	push	{r3, r4, r5, lr}
   b5044:	4604      	mov	r4, r0
   b5046:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b5048:	42ac      	cmp	r4, r5
   b504a:	d004      	beq.n	b5056 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x14>
      }
   b504c:	4620      	mov	r0, r4
   b504e:	f7ff fb8f 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5052:	340c      	adds	r4, #12
   b5054:	e7f8      	b.n	b5048 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x6>
	    std::_Destroy(std::__addressof(*__first));
	}
   b5056:	bd38      	pop	{r3, r4, r5, pc}

000b5058 <_ZN7RailwayD1Ev>:
#include "Checkpoint.cpp"
#include <string>

//container for all data for each rail line
class Railway{
   b5058:	b510      	push	{r4, lr}
   b505a:	4604      	mov	r4, r0
   b505c:	3048      	adds	r0, #72	; 0x48
   b505e:	f7ff fba8 	bl	b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b5062:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b5066:	f006 f921 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   b506a:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b506e:	f7ff ffe8 	bl	b5042 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	_M_deallocate(_M_impl._M_start,
   b5072:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b5074:	b118      	cbz	r0, b507e <_ZN7RailwayD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b5076:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	::operator delete(__p
   b5078:	1a09      	subs	r1, r1, r0
   b507a:	f7ff f812 	bl	b40a2 <_ZdlPvj>
      }
   b507e:	f104 0018 	add.w	r0, r4, #24
   b5082:	f7ff fb75 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5086:	f104 000c 	add.w	r0, r4, #12
   b508a:	f7ff fb67 	bl	b475c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b508e:	4620      	mov	r0, r4
   b5090:	f7ff fb5a 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b5094:	4620      	mov	r0, r4
   b5096:	bd10      	pop	{r4, pc}

000b5098 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b5098:	b538      	push	{r3, r4, r5, lr}
   b509a:	4604      	mov	r4, r0
   b509c:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b509e:	42ac      	cmp	r4, r5
   b50a0:	d004      	beq.n	b50ac <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_+0x14>
      __pointer->~_Tp();
   b50a2:	4620      	mov	r0, r4
   b50a4:	f7ff ffd8 	bl	b5058 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b50a8:	346c      	adds	r4, #108	; 0x6c
   b50aa:	e7f8      	b.n	b509e <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_+0x6>
	}
   b50ac:	bd38      	pop	{r3, r4, r5, pc}

000b50ae <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b50ae:	b510      	push	{r4, lr}
   b50b0:	4604      	mov	r4, r0
	__destroy(__first, __last);
   b50b2:	e9d0 0100 	ldrd	r0, r1, [r0]
   b50b6:	f7ff ffef 	bl	b5098 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   b50ba:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b50bc:	b118      	cbz	r0, b50c6 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b50be:	68a1      	ldr	r1, [r4, #8]
   b50c0:	1a09      	subs	r1, r1, r0
   b50c2:	f7fe ffee 	bl	b40a2 <_ZdlPvj>
      }
   b50c6:	4620      	mov	r0, r4
   b50c8:	bd10      	pop	{r4, pc}

000b50ca <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b50ca:	b538      	push	{r3, r4, r5, lr}
   b50cc:	4604      	mov	r4, r0
   b50ce:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b50d0:	42ac      	cmp	r4, r5
   b50d2:	d008      	beq.n	b50e6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_+0x1c>
   b50d4:	f104 000c 	add.w	r0, r4, #12
   b50d8:	f006 f8e8 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#include "Railway.cpp"

class City{
   b50dc:	4620      	mov	r0, r4
   b50de:	f7ff ffe6 	bl	b50ae <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b50e2:	3428      	adds	r4, #40	; 0x28
   b50e4:	e7f4      	b.n	b50d0 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_+0x6>
	}
   b50e6:	bd38      	pop	{r3, r4, r5, pc}

000b50e8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b50e8:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b50ea:	b510      	push	{r4, lr}
   b50ec:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b50ee:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b50f2:	d005      	beq.n	b5100 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b50f4:	4601      	mov	r1, r0
   b50f6:	4622      	mov	r2, r4
   b50f8:	4618      	mov	r0, r3
   b50fa:	f007 f895 	bl	bc228 <memmove>
   b50fe:	4603      	mov	r3, r0
	}
   b5100:	1918      	adds	r0, r3, r4
   b5102:	bd10      	pop	{r4, pc}

000b5104 <_ZNSt6vectorIiSaIiEEC1ERKS1_>:
      vector(const vector& __x)
   b5104:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5106:	e9d1 3600 	ldrd	r3, r6, [r1]
   b510a:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b510c:	2300      	movs	r3, #0
      vector(const vector& __x)
   b510e:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5110:	e9c0 3300 	strd	r3, r3, [r0]
   b5114:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5116:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   b5118:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b511a:	f7ff f841 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b511e:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5122:	4406      	add	r6, r0
   b5124:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5126:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
   b5128:	e9d5 0100 	ldrd	r0, r1, [r5]
   b512c:	f7ff ffdc 	bl	b50e8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
   b5130:	6060      	str	r0, [r4, #4]
      }
   b5132:	4620      	mov	r0, r4
   b5134:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>:
      vector(initializer_list<value_type> __l,
   b5138:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b513a:	ab04      	add	r3, sp, #16
   b513c:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5140:	2300      	movs	r3, #0
   b5142:	e9c0 3300 	strd	r3, r3, [r0]
   b5146:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b5148:	4604      	mov	r4, r0
   b514a:	4613      	mov	r3, r2
   b514c:	460e      	mov	r6, r1
   b514e:	0095      	lsls	r5, r2, #2
   b5150:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b5154:	f342 001d 	sbfx	r0, r2, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b5158:	4a0a      	ldr	r2, [pc, #40]	; (b5184 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x4c>)
   b515a:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b515e:	d202      	bcs.n	b5166 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x2e>
	  __throw_length_error(
   b5160:	4809      	ldr	r0, [pc, #36]	; (b5188 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x50>)
   b5162:	f006 f871 	bl	bb248 <_ZSt20__throw_length_errorPKc>
   b5166:	9101      	str	r1, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b5168:	f7ff f81a 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b516c:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b516e:	4602      	mov	r2, r0
   b5170:	6020      	str	r0, [r4, #0]
   b5172:	9901      	ldr	r1, [sp, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5174:	60a5      	str	r5, [r4, #8]
   b5176:	4630      	mov	r0, r6
   b5178:	f7ff ffb6 	bl	b50e8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
   b517c:	6060      	str	r0, [r4, #4]
      }
   b517e:	b004      	add	sp, #16
   b5180:	bd70      	pop	{r4, r5, r6, pc}
   b5182:	bf00      	nop
   b5184:	7ffffffc 	.word	0x7ffffffc
   b5188:	000be447 	.word	0x000be447

000b518c <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>:
      if (&__x != this)
   b518c:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b518e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5190:	4604      	mov	r4, r0
   b5192:	460d      	mov	r5, r1
      if (&__x != this)
   b5194:	d01d      	beq.n	b51d2 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x46>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5196:	e9d1 7100 	ldrd	r7, r1, [r1]
			 - this->_M_impl._M_start); }
   b519a:	6802      	ldr	r2, [r0, #0]
   b519c:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b519e:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b51a0:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b51a2:	429e      	cmp	r6, r3
   b51a4:	d917      	bls.n	b51d6 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x4a>
	  pointer __result = this->_M_allocate(__n);
   b51a6:	10b0      	asrs	r0, r6, #2
   b51a8:	9101      	str	r1, [sp, #4]
   b51aa:	f7fe fff9 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
   b51ae:	9901      	ldr	r1, [sp, #4]
   b51b0:	4602      	mov	r2, r0
   b51b2:	4605      	mov	r5, r0
   b51b4:	4638      	mov	r0, r7
   b51b6:	f7ff ff97 	bl	b50e8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b51ba:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b51bc:	b118      	cbz	r0, b51c6 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x3a>
			    - this->_M_impl._M_start);
   b51be:	68a1      	ldr	r1, [r4, #8]
   b51c0:	1a09      	subs	r1, r1, r0
   b51c2:	f7fe ff6e 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b51c6:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b51c8:	4435      	add	r5, r6
   b51ca:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b51cc:	6823      	ldr	r3, [r4, #0]
   b51ce:	4433      	add	r3, r6
   b51d0:	6063      	str	r3, [r4, #4]
    }
   b51d2:	b003      	add	sp, #12
   b51d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b51d6:	6843      	ldr	r3, [r0, #4]
   b51d8:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b51da:	429e      	cmp	r6, r3
   b51dc:	d803      	bhi.n	b51e6 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x5a>
   b51de:	4638      	mov	r0, r7
   b51e0:	f7ff ff82 	bl	b50e8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   b51e4:	e7f2      	b.n	b51cc <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x40>
   b51e6:	18f9      	adds	r1, r7, r3
   b51e8:	4638      	mov	r0, r7
   b51ea:	f7ff ff7d 	bl	b50e8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
   b51ee:	e9d4 0200 	ldrd	r0, r2, [r4]
   b51f2:	e9d5 3100 	ldrd	r3, r1, [r5]
   b51f6:	1a10      	subs	r0, r2, r0
   b51f8:	4418      	add	r0, r3
   b51fa:	e7f1      	b.n	b51e0 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x54>

000b51fc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b51fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5200:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b5202:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5204:	480b      	ldr	r0, [pc, #44]	; (b5234 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x38>)
   b5206:	10a4      	asrs	r4, r4, #2
   b5208:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b520a:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b520c:	4627      	mov	r7, r4
   b520e:	4690      	mov	r8, r2
   b5210:	2f00      	cmp	r7, #0
   b5212:	dd08      	ble.n	b5226 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x2a>
	      *__result = *__first;
   b5214:	4629      	mov	r1, r5
   b5216:	4640      	mov	r0, r8
   b5218:	f7ff ffb8 	bl	b518c <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b521c:	350c      	adds	r5, #12
	      ++__result;
   b521e:	f108 080c 	add.w	r8, r8, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5222:	3f01      	subs	r7, #1
   b5224:	e7f4      	b.n	b5210 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x14>
	  return __result;
   b5226:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b522a:	200c      	movs	r0, #12
   b522c:	fb00 6004 	mla	r0, r0, r4, r6
   b5230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5234:	aaaaaaab 	.word	0xaaaaaaab

000b5238 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>:
    std::vector<std::string> colors;
    int tripleIndex = -1;
    int loopIndex = -1;
    int lowerLoopBound, upperLoopBound, lowerGreenBound, upperGreenBound;

    Railway(std::vector<Checkpoint> checkpointInput, std::vector<int> scalerInput, std::vector<int> outputSize, std::string nameInput, std::vector<std::string> colorInput, std::vector<int> boundInput = {0, 0, 0, 0}){
   b5238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b523c:	2500      	movs	r5, #0
   b523e:	4699      	mov	r9, r3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b5240:	f100 0338 	add.w	r3, r0, #56	; 0x38
      { _M_string_length = __length; }
   b5244:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   b5248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b524c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
   b5250:	4604      	mov	r4, r0
   b5252:	e9c0 5500 	strd	r5, r5, [r0]
   b5256:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b525a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b525e:	e9c0 5506 	strd	r5, r5, [r0, #24]
   b5262:	e9c0 5508 	strd	r5, r5, [r0, #32]
   b5266:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
   b526a:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
   b526e:	b099      	sub	sp, #100	; 0x64
      { __c1 = __c2; }
   b5270:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
   b5274:	6505      	str	r5, [r0, #80]	; 0x50
   b5276:	4692      	mov	sl, r2
   b5278:	f100 0b18 	add.w	fp, r0, #24
   b527c:	f100 0830 	add.w	r8, r0, #48	; 0x30
   b5280:	f100 0748 	add.w	r7, r0, #72	; 0x48
      checkpoints = checkpointInput;
   b5284:	f7fe ffe2 	bl	b424c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5288:	e9d4 2300 	ldrd	r2, r3, [r4]
   b528c:	1a9b      	subs	r3, r3, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b528e:	42ab      	cmp	r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5290:	ea4f 01e3 	mov.w	r1, r3, asr #3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b5294:	da02      	bge.n	b529c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x64>
	  __throw_length_error(
   b5296:	485f      	ldr	r0, [pc, #380]	; (b5414 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1dc>)
   b5298:	f005 ffd6 	bl	bb248 <_ZSt20__throw_length_errorPKc>
      { _M_create_storage(__n); }
   b529c:	a809      	add	r0, sp, #36	; 0x24
   b529e:	9101      	str	r1, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b52a0:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b52a4:	950b      	str	r5, [sp, #44]	; 0x2c
      { _M_create_storage(__n); }
   b52a6:	f7ff feb7 	bl	b5018 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
      if (__n <= 0)
   b52aa:	9901      	ldr	r1, [sp, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
   b52ac:	9809      	ldr	r0, [sp, #36]	; 0x24
   b52ae:	b131      	cbz	r1, b52be <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x86>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   b52b0:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	*__first = __tmp;
   b52b4:	008a      	lsls	r2, r1, #2
   b52b6:	4629      	mov	r1, r5
   b52b8:	f006 ffd0 	bl	bc25c <memset>
   b52bc:	4630      	mov	r0, r6
	  _M_finish = __x._M_finish;
   b52be:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
	  _M_start = __x._M_start;
   b52c2:	9909      	ldr	r1, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b52c4:	6963      	ldr	r3, [r4, #20]
   b52c6:	930e      	str	r3, [sp, #56]	; 0x38
	  _M_finish = __x._M_finish;
   b52c8:	e9c4 1003 	strd	r1, r0, [r4, #12]
      }
   b52cc:	ae0c      	add	r6, sp, #48	; 0x30
	  _M_end_of_storage = __x._M_end_of_storage;
   b52ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b52d0:	6161      	str	r1, [r4, #20]
	  _M_finish = __x._M_finish;
   b52d2:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
      }
   b52d6:	4630      	mov	r0, r6
	  _M_start = __x._M_start;
   b52d8:	2500      	movs	r5, #0
	  _M_finish = __x._M_finish;
   b52da:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b52de:	950b      	str	r5, [sp, #44]	; 0x2c
      }
   b52e0:	f7ff fa3c 	bl	b475c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b52e4:	a809      	add	r0, sp, #36	; 0x24
   b52e6:	f7ff fa39 	bl	b475c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      distances = std::vector<float>(checkpoints.size(), 0);
      scalers = scalerInput;
   b52ea:	4651      	mov	r1, sl
   b52ec:	4658      	mov	r0, fp
   b52ee:	f7ff ff4d 	bl	b518c <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      outputs = {std::vector<int>(outputSize[0], 0), std::vector<int>(outputSize[1], 0), std::vector<int>(outputSize[2], 0), std::vector<int>(outputSize[3], 0)};
   b52f2:	f8d9 1000 	ldr.w	r1, [r9]
   b52f6:	9506      	str	r5, [sp, #24]
   b52f8:	6809      	ldr	r1, [r1, #0]
   b52fa:	ab02      	add	r3, sp, #8
   b52fc:	aa06      	add	r2, sp, #24
   b52fe:	4630      	mov	r0, r6
   b5300:	f7ff fa6a 	bl	b47d8 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b5304:	f8d9 1000 	ldr.w	r1, [r9]
   b5308:	9507      	str	r5, [sp, #28]
   b530a:	6849      	ldr	r1, [r1, #4]
   b530c:	ab03      	add	r3, sp, #12
   b530e:	aa07      	add	r2, sp, #28
   b5310:	a80f      	add	r0, sp, #60	; 0x3c
   b5312:	f7ff fa61 	bl	b47d8 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b5316:	f8d9 1000 	ldr.w	r1, [r9]
   b531a:	9508      	str	r5, [sp, #32]
   b531c:	6889      	ldr	r1, [r1, #8]
   b531e:	ab04      	add	r3, sp, #16
   b5320:	aa08      	add	r2, sp, #32
   b5322:	a812      	add	r0, sp, #72	; 0x48
   b5324:	f7ff fa58 	bl	b47d8 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b5328:	f8d9 1000 	ldr.w	r1, [r9]
   b532c:	9509      	str	r5, [sp, #36]	; 0x24
   b532e:	ab05      	add	r3, sp, #20
   b5330:	aa09      	add	r2, sp, #36	; 0x24
   b5332:	68c9      	ldr	r1, [r1, #12]
   b5334:	a815      	add	r0, sp, #84	; 0x54
   b5336:	f7ff fa4f 	bl	b47d8 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
			 - this->_M_impl._M_start); }
   b533a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b533c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b533e:	1a9b      	subs	r3, r3, r2
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);

	if (__len > capacity())
   b5340:	2b2f      	cmp	r3, #47	; 0x2f
   b5342:	d83f      	bhi.n	b53c4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x18c>
	  pointer __result = this->_M_allocate(__n);
   b5344:	2004      	movs	r0, #4
   b5346:	f7fe fecd 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b534a:	46b3      	mov	fp, r6
   b534c:	4605      	mov	r5, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b534e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
	  _ForwardIterator __cur = __result;
   b5352:	4681      	mov	r9, r0
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5354:	f1b9 0f00 	cmp.w	r9, #0
   b5358:	d003      	beq.n	b5362 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x12a>
   b535a:	4659      	mov	r1, fp
   b535c:	4648      	mov	r0, r9
   b535e:	f7ff fed1 	bl	b5104 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b5362:	f109 090c 	add.w	r9, r9, #12
   b5366:	45d1      	cmp	r9, sl
   b5368:	f10b 0b0c 	add.w	fp, fp, #12
   b536c:	d1f2      	bne.n	b5354 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x11c>
	__destroy(__first, __last);
   b536e:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b5372:	f7ff fe66 	bl	b5042 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	    _S_check_init_len(__len, _M_get_Tp_allocator());
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
   b5376:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b5378:	b118      	cbz	r0, b5382 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x14a>
			  this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_start);
   b537a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b537c:	1a09      	subs	r1, r1, r0
   b537e:	f7fe fe90 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b5382:	e9c4 5a09 	strd	r5, sl, [r4, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b5386:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
   b538a:	ad18      	add	r5, sp, #96	; 0x60
   b538c:	3d0c      	subs	r5, #12
      }
   b538e:	4628      	mov	r0, r5
   b5390:	f7ff f9ee 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5394:	42b5      	cmp	r5, r6
   b5396:	d1f9      	bne.n	b538c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x154>
	this->_M_assign(__str);
   b5398:	9922      	ldr	r1, [sp, #136]	; 0x88
   b539a:	4640      	mov	r0, r8
   b539c:	f005 ffa4 	bl	bb2e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      name = nameInput;
      colors = colorInput;
   b53a0:	4638      	mov	r0, r7
   b53a2:	9923      	ldr	r1, [sp, #140]	; 0x8c
   b53a4:	f7fe ffa4 	bl	b42f0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
	return *(this->_M_impl._M_start + __n);
   b53a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b53aa:	681b      	ldr	r3, [r3, #0]
      lowerLoopBound = boundInput[0];
   b53ac:	681a      	ldr	r2, [r3, #0]
   b53ae:	65e2      	str	r2, [r4, #92]	; 0x5c
      upperLoopBound = boundInput[1];
   b53b0:	685a      	ldr	r2, [r3, #4]
   b53b2:	6622      	str	r2, [r4, #96]	; 0x60
      lowerGreenBound = boundInput[2];
   b53b4:	689a      	ldr	r2, [r3, #8]
      upperGreenBound = boundInput[3];
   b53b6:	68db      	ldr	r3, [r3, #12]
      lowerGreenBound = boundInput[2];
   b53b8:	6662      	str	r2, [r4, #100]	; 0x64
    }
   b53ba:	4620      	mov	r0, r4
      upperGreenBound = boundInput[3];
   b53bc:	66a3      	str	r3, [r4, #104]	; 0x68
    }
   b53be:	b019      	add	sp, #100	; 0x64
   b53c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b53c4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   b53c6:	1aad      	subs	r5, r5, r2
	  }
	else if (size() >= __len)
   b53c8:	2d2f      	cmp	r5, #47	; 0x2f
   b53ca:	d90b      	bls.n	b53e4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ac>
			      _Category>::__copy_m(__first, __last, __result);
   b53cc:	a918      	add	r1, sp, #96	; 0x60
   b53ce:	4630      	mov	r0, r6
   b53d0:	f7ff ff14 	bl	b51fc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b53d4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b53d6:	4288      	cmp	r0, r1
   b53d8:	4605      	mov	r5, r0
   b53da:	d0d6      	beq.n	b538a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b53dc:	f7ff fe31 	bl	b5042 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b53e0:	62a5      	str	r5, [r4, #40]	; 0x28
   b53e2:	e7d2      	b.n	b538a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b53e4:	4435      	add	r5, r6
   b53e6:	4629      	mov	r1, r5
   b53e8:	4630      	mov	r0, r6
   b53ea:	f7ff ff07 	bl	b51fc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b53ee:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
   b53f2:	ab18      	add	r3, sp, #96	; 0x60
   b53f4:	429d      	cmp	r5, r3
   b53f6:	d00a      	beq.n	b540e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1d6>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b53f8:	f1b9 0f00 	cmp.w	r9, #0
   b53fc:	d003      	beq.n	b5406 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ce>
   b53fe:	4629      	mov	r1, r5
   b5400:	4648      	mov	r0, r9
   b5402:	f7ff fe7f 	bl	b5104 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5406:	350c      	adds	r5, #12
   b5408:	f109 090c 	add.w	r9, r9, #12
   b540c:	e7f1      	b.n	b53f2 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ba>
	    _ForwardIterator __mid = __first;
	    std::advance(__mid, size());
	    std::copy(__first, __mid, this->_M_impl._M_start);
	    const size_type __attribute__((__unused__)) __n = __len - size();
	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	    this->_M_impl._M_finish =
   b540e:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
   b5412:	e7ba      	b.n	b538a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b5414:	000be447 	.word	0x000be447

000b5418 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   b5418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b541c:	ed2d 8b0e 	vpush	{d8-d14}
   b5420:	2801      	cmp	r0, #1
   b5422:	4db4      	ldr	r5, [pc, #720]	; (b56f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2dc>)
   b5424:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
   b5428:	f041 810f 	bne.w	b664a <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1232>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b542c:	2400      	movs	r4, #0
    SleepResult() {}
   b542e:	4bb2      	ldr	r3, [pc, #712]	; (b56f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e0>)
   b5430:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5432:	e9c5 4400 	strd	r4, r4, [r5]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5436:	2003      	movs	r0, #3
   b5438:	f003 fae6 	bl	b8a08 <set_system_mode>
  public:
    float lat;
    float lon;

    Checkpoint(float la, float lo){
      lat = la;
   b543c:	4baf      	ldr	r3, [pc, #700]	; (b56fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e4>)
   b543e:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b5440:	4baf      	ldr	r3, [pc, #700]	; (b5700 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e8>)
   b5442:	93a5      	str	r3, [sp, #660]	; 0x294
      lat = la;
   b5444:	4baf      	ldr	r3, [pc, #700]	; (b5704 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2ec>)
   b5446:	93a6      	str	r3, [sp, #664]	; 0x298
      lon = lo;
   b5448:	4baf      	ldr	r3, [pc, #700]	; (b5708 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f0>)
   b544a:	93a7      	str	r3, [sp, #668]	; 0x29c
      lat = la;
   b544c:	4baf      	ldr	r3, [pc, #700]	; (b570c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f4>)
   b544e:	93a8      	str	r3, [sp, #672]	; 0x2a0
      lon = lo;
   b5450:	4baf      	ldr	r3, [pc, #700]	; (b5710 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f8>)
   b5452:	93a9      	str	r3, [sp, #676]	; 0x2a4
      lat = la;
   b5454:	4baf      	ldr	r3, [pc, #700]	; (b5714 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2fc>)
   b5456:	93aa      	str	r3, [sp, #680]	; 0x2a8
      lon = lo;
   b5458:	4baf      	ldr	r3, [pc, #700]	; (b5718 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x300>)
   b545a:	93ab      	str	r3, [sp, #684]	; 0x2ac
      lat = la;
   b545c:	4baf      	ldr	r3, [pc, #700]	; (b571c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x304>)
   b545e:	93ac      	str	r3, [sp, #688]	; 0x2b0
      lon = lo;
   b5460:	4baf      	ldr	r3, [pc, #700]	; (b5720 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x308>)
   b5462:	93ad      	str	r3, [sp, #692]	; 0x2b4
);
   b5464:	aba4      	add	r3, sp, #656	; 0x290
   b5466:	937e      	str	r3, [sp, #504]	; 0x1f8
   b5468:	2305      	movs	r3, #5
   b546a:	937f      	str	r3, [sp, #508]	; 0x1fc
   b546c:	f50d 7ae8 	add.w	sl, sp, #464	; 0x1d0
   b5470:	aa7e      	add	r2, sp, #504	; 0x1f8
   b5472:	4653      	mov	r3, sl
   b5474:	ca06      	ldmia	r2, {r1, r2}
   b5476:	a88c      	add	r0, sp, #560	; 0x230
   b5478:	f7ff f9d0 	bl	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b547c:	4ba9      	ldr	r3, [pc, #676]	; (b5724 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x30c>)
      lat = la;
   b547e:	eddf 8aaa 	vldr	s17, [pc, #680]	; b5728 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x310>
      lon = lo;
   b5482:	ed9f 8aaa 	vldr	s16, [pc, #680]	; b572c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>
      lat = la;
   b5486:	eddf 9aaa 	vldr	s19, [pc, #680]	; b5730 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x318>
      lon = lo;
   b548a:	ed9f 9aaa 	vldr	s18, [pc, #680]	; b5734 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x31c>
      lat = la;
   b548e:	eddf aaaa 	vldr	s21, [pc, #680]	; b5738 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>
      lon = lo;
   b5492:	ed9f aaaa 	vldr	s20, [pc, #680]	; b573c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>
      lat = la;
   b5496:	eddf baaa 	vldr	s23, [pc, #680]	; b5740 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>
      lon = lo;
   b549a:	ed9f baaa 	vldr	s22, [pc, #680]	; b5744 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>
      lat = la;
   b549e:	eddf daaa 	vldr	s27, [pc, #680]	; b5748 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>
      lon = lo;
   b54a2:	ed9f daaa 	vldr	s26, [pc, #680]	; b574c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>
      lat = la;
   b54a6:	eddf caaa 	vldr	s25, [pc, #680]	; b5750 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>
      lon = lo;
   b54aa:	ed9f caaa 	vldr	s24, [pc, #680]	; b5754 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>
   b54ae:	ed9f eaaa 	vldr	s28, [pc, #680]	; b5758 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>
   b54b2:	461f      	mov	r7, r3
   b54b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b54b6:	f50d 7b17 	add.w	fp, sp, #604	; 0x25c
   b54ba:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
   b54be:	2204      	movs	r2, #4
   b54c0:	ad89      	add	r5, sp, #548	; 0x224
   b54c2:	ab7c      	add	r3, sp, #496	; 0x1f0
   b54c4:	f8cd b1f0 	str.w	fp, [sp, #496]	; 0x1f0
   b54c8:	927d      	str	r2, [sp, #500]	; 0x1f4
   b54ca:	e893 0006 	ldmia.w	r3, {r1, r2}
   b54ce:	4628      	mov	r0, r5
   b54d0:	f7ff fe32 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b54d4:	2228      	movs	r2, #40	; 0x28
   b54d6:	e9cd 2494 	strd	r2, r4, [sp, #592]	; 0x250
   b54da:	aa93      	add	r2, sp, #588	; 0x24c
   b54dc:	927a      	str	r2, [sp, #488]	; 0x1e8
   b54de:	2204      	movs	r2, #4
   b54e0:	f50d 7806 	add.w	r8, sp, #536	; 0x218
   b54e4:	ab7a      	add	r3, sp, #488	; 0x1e8
   b54e6:	927b      	str	r2, [sp, #492]	; 0x1ec
   b54e8:	e893 0006 	ldmia.w	r3, {r1, r2}
   b54ec:	4640      	mov	r0, r8
   b54ee:	9493      	str	r4, [sp, #588]	; 0x24c
   b54f0:	9496      	str	r4, [sp, #600]	; 0x258
   b54f2:	f7ff fe21 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b54f6:	a89d      	add	r0, sp, #628	; 0x274
   b54f8:	4998      	ldr	r1, [pc, #608]	; (b575c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>)
   b54fa:	f7fe fe05 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b54fe:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5500:	4997      	ldr	r1, [pc, #604]	; (b5760 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>)
   b5502:	f7fe fe01 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5506:	a8b6      	add	r0, sp, #728	; 0x2d8
   b5508:	4996      	ldr	r1, [pc, #600]	; (b5764 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>)
   b550a:	f7fe fdfd 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b550e:	a9b0      	add	r1, sp, #704	; 0x2c0
   b5510:	9178      	str	r1, [sp, #480]	; 0x1e0
   b5512:	2102      	movs	r1, #2
   b5514:	f50d 79e4 	add.w	r9, sp, #456	; 0x1c8
   b5518:	9179      	str	r1, [sp, #484]	; 0x1e4
   b551a:	aa78      	add	r2, sp, #480	; 0x1e0
   b551c:	464b      	mov	r3, r9
   b551e:	ca06      	ldmia	r2, {r1, r2}
   b5520:	a883      	add	r0, sp, #524	; 0x20c
   b5522:	f7ff f9af 	bl	b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5526:	4621      	mov	r1, r4
   b5528:	2210      	movs	r2, #16
   b552a:	a88f      	add	r0, sp, #572	; 0x23c
   b552c:	f006 fe96 	bl	bc25c <memset>
   b5530:	aa8f      	add	r2, sp, #572	; 0x23c
   b5532:	9276      	str	r2, [sp, #472]	; 0x1d8
   b5534:	2204      	movs	r2, #4
   b5536:	ae80      	add	r6, sp, #512	; 0x200
   b5538:	ab76      	add	r3, sp, #472	; 0x1d8
   b553a:	9277      	str	r2, [sp, #476]	; 0x1dc
   b553c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5540:	4630      	mov	r0, r6
   b5542:	f7ff fdf9 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLineCTA = Railway(
   b5546:	aa83      	add	r2, sp, #524	; 0x20c
   b5548:	9201      	str	r2, [sp, #4]
   b554a:	aa9d      	add	r2, sp, #628	; 0x274
   b554c:	4643      	mov	r3, r8
   b554e:	a98c      	add	r1, sp, #560	; 0x230
   b5550:	9602      	str	r6, [sp, #8]
   b5552:	9200      	str	r2, [sp, #0]
   b5554:	4884      	ldr	r0, [pc, #528]	; (b5768 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>)
   b5556:	462a      	mov	r2, r5
   b5558:	f7ff fe6e 	bl	b5238 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b555c:	4630      	mov	r0, r6
   b555e:	f7ff f907 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5562:	a883      	add	r0, sp, #524	; 0x20c
   b5564:	f7ff f925 	bl	b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b5568:	a8b6      	add	r0, sp, #728	; 0x2d8
   b556a:	f005 fe9f 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b556e:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5570:	f005 fe9c 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5574:	a89d      	add	r0, sp, #628	; 0x274
   b5576:	f005 fe99 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b557a:	4640      	mov	r0, r8
   b557c:	f7ff f8f8 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5580:	4628      	mov	r0, r5
   b5582:	f7ff f8f5 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5586:	a88c      	add	r0, sp, #560	; 0x230
   b5588:	f7ff f8de 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b558c:	4b77      	ldr	r3, [pc, #476]	; (b576c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
   b558e:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b5590:	4b77      	ldr	r3, [pc, #476]	; (b5770 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>)
   b5592:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b5594:	4b77      	ldr	r3, [pc, #476]	; (b5774 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x35c>)
   b5596:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b5598:	4b77      	ldr	r3, [pc, #476]	; (b5778 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x360>)
   b559a:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b559c:	4b77      	ldr	r3, [pc, #476]	; (b577c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x364>)
   b559e:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b55a0:	4b77      	ldr	r3, [pc, #476]	; (b5780 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x368>)
   b55a2:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b55a4:	4b77      	ldr	r3, [pc, #476]	; (b5784 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
   b55a6:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b55a8:	4b77      	ldr	r3, [pc, #476]	; (b5788 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x370>)
   b55aa:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b55ac:	4b77      	ldr	r3, [pc, #476]	; (b578c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>)
   b55ae:	93b8      	str	r3, [sp, #736]	; 0x2e0
      lon = lo;
   b55b0:	4b77      	ldr	r3, [pc, #476]	; (b5790 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x378>)
   b55b2:	93b9      	str	r3, [sp, #740]	; 0x2e4
      lat = la;
   b55b4:	4b77      	ldr	r3, [pc, #476]	; (b5794 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x37c>)
   b55b6:	93ba      	str	r3, [sp, #744]	; 0x2e8
);
   b55b8:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b55ba:	4b77      	ldr	r3, [pc, #476]	; (b5798 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x380>)
   b55bc:	9274      	str	r2, [sp, #464]	; 0x1d0
   b55be:	93bb      	str	r3, [sp, #748]	; 0x2ec
   b55c0:	2207      	movs	r2, #7
      lat = la;
   b55c2:	4b76      	ldr	r3, [pc, #472]	; (b579c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x384>)
   b55c4:	9275      	str	r2, [sp, #468]	; 0x1d4
   b55c6:	93bc      	str	r3, [sp, #752]	; 0x2f0
   b55c8:	aa6a      	add	r2, sp, #424	; 0x1a8
      lon = lo;
   b55ca:	4b75      	ldr	r3, [pc, #468]	; (b57a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x388>)
   b55cc:	93bd      	str	r3, [sp, #756]	; 0x2f4
   b55ce:	a88c      	add	r0, sp, #560	; 0x230
   b55d0:	4613      	mov	r3, r2
   b55d2:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b55d6:	f7ff f921 	bl	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b55da:	aa9d      	add	r2, sp, #628	; 0x274
   b55dc:	f107 0c10 	add.w	ip, r7, #16
   b55e0:	9204      	str	r2, [sp, #16]
   b55e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b55e6:	9f04      	ldr	r7, [sp, #16]
   b55e8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b55ea:	e89c 0003 	ldmia.w	ip, {r0, r1}
   b55ee:	aa9d      	add	r2, sp, #628	; 0x274
   b55f0:	9272      	str	r2, [sp, #456]	; 0x1c8
   b55f2:	2206      	movs	r2, #6
   b55f4:	9273      	str	r2, [sp, #460]	; 0x1cc
   b55f6:	e9c7 0100 	strd	r0, r1, [r7]
   b55fa:	e899 0006 	ldmia.w	r9, {r1, r2}
   b55fe:	4628      	mov	r0, r5
   b5600:	9704      	str	r7, [sp, #16]
   b5602:	f7ff fd99 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5606:	aa93      	add	r2, sp, #588	; 0x24c
   b5608:	9270      	str	r2, [sp, #448]	; 0x1c0
   b560a:	233c      	movs	r3, #60	; 0x3c
   b560c:	2204      	movs	r2, #4
   b560e:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b5612:	9271      	str	r2, [sp, #452]	; 0x1c4
   b5614:	ab70      	add	r3, sp, #448	; 0x1c0
   b5616:	e893 0006 	ldmia.w	r3, {r1, r2}
   b561a:	4640      	mov	r0, r8
   b561c:	9493      	str	r4, [sp, #588]	; 0x24c
   b561e:	9496      	str	r4, [sp, #600]	; 0x258
   b5620:	f7ff fd8a 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5624:	4658      	mov	r0, fp
   b5626:	495f      	ldr	r1, [pc, #380]	; (b57a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x38c>)
   b5628:	f7fe fd6e 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b562c:	a8a4      	add	r0, sp, #656	; 0x290
   b562e:	495e      	ldr	r1, [pc, #376]	; (b57a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x390>)
   b5630:	f7fe fd6a 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5634:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5636:	495d      	ldr	r1, [pc, #372]	; (b57ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>)
   b5638:	f7fe fd66 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b563c:	aba4      	add	r3, sp, #656	; 0x290
   b563e:	2102      	movs	r1, #2
   b5640:	936e      	str	r3, [sp, #440]	; 0x1b8
   b5642:	f50d 79d0 	add.w	r9, sp, #416	; 0x1a0
   b5646:	916f      	str	r1, [sp, #444]	; 0x1bc
   b5648:	aa6e      	add	r2, sp, #440	; 0x1b8
   b564a:	464b      	mov	r3, r9
   b564c:	ca06      	ldmia	r2, {r1, r2}
   b564e:	a883      	add	r0, sp, #524	; 0x20c
   b5650:	f7ff f918 	bl	b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5654:	4621      	mov	r1, r4
   b5656:	2210      	movs	r2, #16
   b5658:	a88f      	add	r0, sp, #572	; 0x23c
   b565a:	f006 fdff 	bl	bc25c <memset>
   b565e:	aa8f      	add	r2, sp, #572	; 0x23c
   b5660:	926c      	str	r2, [sp, #432]	; 0x1b0
   b5662:	2204      	movs	r2, #4
   b5664:	ab6c      	add	r3, sp, #432	; 0x1b0
   b5666:	926d      	str	r2, [sp, #436]	; 0x1b4
   b5668:	e893 0006 	ldmia.w	r3, {r1, r2}
   b566c:	4630      	mov	r0, r6
   b566e:	f7ff fd63 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLineCTA = Railway(
   b5672:	aa83      	add	r2, sp, #524	; 0x20c
   b5674:	4643      	mov	r3, r8
   b5676:	a98c      	add	r1, sp, #560	; 0x230
   b5678:	e9cd b200 	strd	fp, r2, [sp]
   b567c:	9602      	str	r6, [sp, #8]
   b567e:	462a      	mov	r2, r5
   b5680:	484b      	ldr	r0, [pc, #300]	; (b57b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x398>)
   b5682:	f7ff fdd9 	bl	b5238 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5686:	4630      	mov	r0, r6
   b5688:	f7ff f872 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b568c:	a883      	add	r0, sp, #524	; 0x20c
   b568e:	f7ff f890 	bl	b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5692:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5694:	f005 fe0a 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5698:	a8a4      	add	r0, sp, #656	; 0x290
   b569a:	f005 fe07 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b569e:	4658      	mov	r0, fp
   b56a0:	f005 fe04 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b56a4:	4640      	mov	r0, r8
   b56a6:	f7ff f863 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b56aa:	4628      	mov	r0, r5
   b56ac:	f7ff f860 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b56b0:	a88c      	add	r0, sp, #560	; 0x230
   b56b2:	f7ff f849 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b56b6:	aab0      	add	r2, sp, #704	; 0x2c0
   b56b8:	926a      	str	r2, [sp, #424]	; 0x1a8
   b56ba:	2207      	movs	r2, #7
   b56bc:	926b      	str	r2, [sp, #428]	; 0x1ac
   b56be:	f50d 7ac0 	add.w	sl, sp, #384	; 0x180
   b56c2:	aa6a      	add	r2, sp, #424	; 0x1a8
   b56c4:	ca06      	ldmia	r2, {r1, r2}
   b56c6:	4653      	mov	r3, sl
   b56c8:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b56ca:	edcd 8ab4 	vstr	s17, [sp, #720]	; 0x2d0
      lon = lo;
   b56ce:	ed8d 8ab5 	vstr	s16, [sp, #724]	; 0x2d4
      lat = la;
   b56d2:	edcd 8abc 	vstr	s17, [sp, #752]	; 0x2f0
      lon = lo;
   b56d6:	ed8d 8abd 	vstr	s16, [sp, #756]	; 0x2f4
      lat = la;
   b56da:	edcd dab0 	vstr	s27, [sp, #704]	; 0x2c0
      lon = lo;
   b56de:	ed8d dab1 	vstr	s26, [sp, #708]	; 0x2c4
      lat = la;
   b56e2:	edcd cab2 	vstr	s25, [sp, #712]	; 0x2c8
      lon = lo;
   b56e6:	ed8d cab3 	vstr	s24, [sp, #716]	; 0x2cc
      lat = la;
   b56ea:	edcd bab6 	vstr	s23, [sp, #728]	; 0x2d8
      lon = lo;
   b56ee:	ed8d bab7 	vstr	s22, [sp, #732]	; 0x2dc
   b56f2:	e05f      	b.n	b57b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x39c>
   b56f4:	200352b0 	.word	0x200352b0
   b56f8:	ffff0000 	.word	0xffff0000
   b56fc:	42276980 	.word	0x42276980
   b5700:	c2af431e 	.word	0xc2af431e
   b5704:	42279dcc 	.word	0x42279dcc
   b5708:	c2af4202 	.word	0xc2af4202
   b570c:	42279d95 	.word	0x42279d95
   b5710:	c2af476d 	.word	0xc2af476d
   b5714:	4227a7a9 	.word	0x4227a7a9
   b5718:	c2af4e05 	.word	0xc2af4e05
   b571c:	4227b382 	.word	0x4227b382
   b5720:	c2af4e44 	.word	0xc2af4e44
   b5724:	000be728 	.word	0x000be728
   b5728:	42278b1a 	.word	0x42278b1a
   b572c:	c2af449a 	.word	0xc2af449a
   b5730:	42278b2f 	.word	0x42278b2f
   b5734:	c2af4095 	.word	0xc2af4095
   b5738:	422781d8 	.word	0x422781d8
   b573c:	c2af4044 	.word	0xc2af4044
   b5740:	42278216 	.word	0x42278216
   b5744:	c2af44c1 	.word	0xc2af44c1
   b5748:	4227a49e 	.word	0x4227a49e
   b574c:	c2af4bd0 	.word	0xc2af4bd0
   b5750:	4227a437 	.word	0x4227a437
   b5754:	c2af4659 	.word	0xc2af4659
   b5758:	c2af4089 	.word	0xc2af4089
   b575c:	000be560 	.word	0x000be560
   b5760:	000be564 	.word	0x000be564
   b5764:	000be56b 	.word	0x000be56b
   b5768:	2003e55c 	.word	0x2003e55c
   b576c:	42277e9d 	.word	0x42277e9d
   b5770:	c2af74b3 	.word	0xc2af74b3
   b5774:	422780af 	.word	0x422780af
   b5778:	c2af588e 	.word	0xc2af588e
   b577c:	4227804d 	.word	0x4227804d
   b5780:	c2af482e 	.word	0xc2af482e
   b5784:	422780ad 	.word	0x422780ad
   b5788:	c2af4157 	.word	0xc2af4157
   b578c:	42278aff 	.word	0x42278aff
   b5790:	c2af4253 	.word	0xc2af4253
   b5794:	42278af4 	.word	0x42278af4
   b5798:	c2af4798 	.word	0xc2af4798
   b579c:	4227a978 	.word	0x4227a978
   b57a0:	c2af5f5d 	.word	0xc2af5f5d
   b57a4:	000be572 	.word	0x000be572
   b57a8:	000be577 	.word	0x000be577
   b57ac:	000be57e 	.word	0x000be57e
   b57b0:	20035308 	.word	0x20035308
      lat = la;
   b57b4:	edcd aab8 	vstr	s21, [sp, #736]	; 0x2e0
      lon = lo;
   b57b8:	ed8d aab9 	vstr	s20, [sp, #740]	; 0x2e4
      lat = la;
   b57bc:	edcd 9aba 	vstr	s19, [sp, #744]	; 0x2e8
      lon = lo;
   b57c0:	ed8d 9abb 	vstr	s18, [sp, #748]	; 0x2ec
   b57c4:	f7ff f82a 	bl	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b57c8:	4bb6      	ldr	r3, [pc, #728]	; (b5aa4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b57ca:	f103 0228 	add.w	r2, r3, #40	; 0x28
   b57ce:	4617      	mov	r7, r2
   b57d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b57d2:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
   b57d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b57da:	e9d7 0100 	ldrd	r0, r1, [r7]
   b57de:	9a04      	ldr	r2, [sp, #16]
   b57e0:	9705      	str	r7, [sp, #20]
   b57e2:	e882 0003 	stmia.w	r2, {r0, r1}
   b57e6:	aa9d      	add	r2, sp, #628	; 0x274
   b57e8:	9268      	str	r2, [sp, #416]	; 0x1a0
   b57ea:	2206      	movs	r2, #6
   b57ec:	9269      	str	r2, [sp, #420]	; 0x1a4
   b57ee:	e899 0006 	ldmia.w	r9, {r1, r2}
   b57f2:	4628      	mov	r0, r5
   b57f4:	f7ff fca0 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b57f8:	f107 0208 	add.w	r2, r7, #8
   b57fc:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b57fe:	af93      	add	r7, sp, #588	; 0x24c
   b5800:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5804:	2104      	movs	r1, #4
   b5806:	ab66      	add	r3, sp, #408	; 0x198
   b5808:	9766      	str	r7, [sp, #408]	; 0x198
   b580a:	9167      	str	r1, [sp, #412]	; 0x19c
   b580c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5810:	4640      	mov	r0, r8
   b5812:	f7ff fc91 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5816:	4658      	mov	r0, fp
   b5818:	49a3      	ldr	r1, [pc, #652]	; (b5aa8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x690>)
   b581a:	f7fe fc75 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b581e:	a8a4      	add	r0, sp, #656	; 0x290
   b5820:	49a2      	ldr	r1, [pc, #648]	; (b5aac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x694>)
   b5822:	f7fe fc71 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5826:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5828:	49a1      	ldr	r1, [pc, #644]	; (b5ab0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x698>)
   b582a:	f7fe fc6d 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b582e:	aba4      	add	r3, sp, #656	; 0x290
   b5830:	2102      	movs	r1, #2
   b5832:	9364      	str	r3, [sp, #400]	; 0x190
   b5834:	f50d 79bc 	add.w	r9, sp, #376	; 0x178
   b5838:	9165      	str	r1, [sp, #404]	; 0x194
   b583a:	aa64      	add	r2, sp, #400	; 0x190
   b583c:	ca06      	ldmia	r2, {r1, r2}
   b583e:	464b      	mov	r3, r9
   b5840:	a883      	add	r0, sp, #524	; 0x20c
   b5842:	f7ff f81f 	bl	b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5846:	499b      	ldr	r1, [pc, #620]	; (b5ab4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x69c>)
   b5848:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   b584a:	af8f      	add	r7, sp, #572	; 0x23c
   b584c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5850:	2004      	movs	r0, #4
   b5852:	ab62      	add	r3, sp, #392	; 0x188
   b5854:	9762      	str	r7, [sp, #392]	; 0x188
   b5856:	9063      	str	r0, [sp, #396]	; 0x18c
   b5858:	e893 0006 	ldmia.w	r3, {r1, r2}
   b585c:	4630      	mov	r0, r6
   b585e:	f7ff fc6b 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway brownLineCTA = Railway(
   b5862:	a883      	add	r0, sp, #524	; 0x20c
   b5864:	e9cd b000 	strd	fp, r0, [sp]
   b5868:	a88c      	add	r0, sp, #560	; 0x230
   b586a:	4643      	mov	r3, r8
   b586c:	462a      	mov	r2, r5
   b586e:	4601      	mov	r1, r0
   b5870:	9602      	str	r6, [sp, #8]
   b5872:	4891      	ldr	r0, [pc, #580]	; (b5ab8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a0>)
   b5874:	f7ff fce0 	bl	b5238 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5878:	4630      	mov	r0, r6
   b587a:	f7fe ff79 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b587e:	a883      	add	r0, sp, #524	; 0x20c
   b5880:	f7fe ff97 	bl	b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5884:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5886:	f005 fd11 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b588a:	a8a4      	add	r0, sp, #656	; 0x290
   b588c:	f005 fd0e 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5890:	4658      	mov	r0, fp
   b5892:	f005 fd0b 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5896:	4640      	mov	r0, r8
   b5898:	f7fe ff6a 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b589c:	4628      	mov	r0, r5
   b589e:	f7fe ff67 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b58a2:	a88c      	add	r0, sp, #560	; 0x230
   b58a4:	f7fe ff50 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b58a8:	4b84      	ldr	r3, [pc, #528]	; (b5abc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a4>)
   b58aa:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b58ac:	4b84      	ldr	r3, [pc, #528]	; (b5ac0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a8>)
   b58ae:	93a5      	str	r3, [sp, #660]	; 0x294
      lat = la;
   b58b0:	4b84      	ldr	r3, [pc, #528]	; (b5ac4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ac>)
   b58b2:	93a6      	str	r3, [sp, #664]	; 0x298
   b58b4:	4b84      	ldr	r3, [pc, #528]	; (b5ac8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b0>)
   b58b6:	93aa      	str	r3, [sp, #680]	; 0x2a8
      lon = lo;
   b58b8:	4b84      	ldr	r3, [pc, #528]	; (b5acc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b4>)
   b58ba:	93ab      	str	r3, [sp, #684]	; 0x2ac
      lat = la;
   b58bc:	4b84      	ldr	r3, [pc, #528]	; (b5ad0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b8>)
   b58be:	93ac      	str	r3, [sp, #688]	; 0x2b0
      lon = lo;
   b58c0:	4b84      	ldr	r3, [pc, #528]	; (b5ad4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6bc>)
   b58c2:	93ad      	str	r3, [sp, #692]	; 0x2b4
);
   b58c4:	2005      	movs	r0, #5
   b58c6:	aba4      	add	r3, sp, #656	; 0x290
   b58c8:	9360      	str	r3, [sp, #384]	; 0x180
   b58ca:	9061      	str	r0, [sp, #388]	; 0x184
   b58cc:	a856      	add	r0, sp, #344	; 0x158
   b58ce:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b58d2:	4603      	mov	r3, r0
   b58d4:	a88c      	add	r0, sp, #560	; 0x230
   b58d6:	ed8d eaa7 	vstr	s28, [sp, #668]	; 0x29c
      lat = la;
   b58da:	edcd 9aa8 	vstr	s19, [sp, #672]	; 0x2a0
      lon = lo;
   b58de:	ed8d 9aa9 	vstr	s18, [sp, #676]	; 0x2a4
   b58e2:	f7fe ff9b 	bl	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b58e6:	4b6f      	ldr	r3, [pc, #444]	; (b5aa4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b58e8:	f8cd b178 	str.w	fp, [sp, #376]	; 0x178
   b58ec:	461f      	mov	r7, r3
   b58ee:	3360      	adds	r3, #96	; 0x60
   b58f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b58f2:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
   b58f6:	2004      	movs	r0, #4
   b58f8:	905f      	str	r0, [sp, #380]	; 0x17c
   b58fa:	e899 0006 	ldmia.w	r9, {r1, r2}
   b58fe:	4628      	mov	r0, r5
   b5900:	f7ff fc1a 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5904:	463b      	mov	r3, r7
   b5906:	3370      	adds	r3, #112	; 0x70
   b5908:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b590a:	af93      	add	r7, sp, #588	; 0x24c
   b590c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5910:	2004      	movs	r0, #4
   b5912:	ab5c      	add	r3, sp, #368	; 0x170
   b5914:	975c      	str	r7, [sp, #368]	; 0x170
   b5916:	905d      	str	r0, [sp, #372]	; 0x174
   b5918:	e893 0006 	ldmia.w	r3, {r1, r2}
   b591c:	4640      	mov	r0, r8
   b591e:	f7ff fc0b 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5922:	a89d      	add	r0, sp, #628	; 0x274
   b5924:	496c      	ldr	r1, [pc, #432]	; (b5ad8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c0>)
   b5926:	f7fe fbef 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b592a:	a8b0      	add	r0, sp, #704	; 0x2c0
   b592c:	496b      	ldr	r1, [pc, #428]	; (b5adc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c4>)
   b592e:	f7fe fbeb 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5932:	a8b6      	add	r0, sp, #728	; 0x2d8
   b5934:	496a      	ldr	r1, [pc, #424]	; (b5ae0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c8>)
   b5936:	f7fe fbe7 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b593a:	a8b0      	add	r0, sp, #704	; 0x2c0
   b593c:	905a      	str	r0, [sp, #360]	; 0x168
   b593e:	2002      	movs	r0, #2
   b5940:	905b      	str	r0, [sp, #364]	; 0x16c
   b5942:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
   b5946:	aa5a      	add	r2, sp, #360	; 0x168
   b5948:	464b      	mov	r3, r9
   b594a:	ca06      	ldmia	r2, {r1, r2}
   b594c:	a883      	add	r0, sp, #524	; 0x20c
   b594e:	f7fe ff99 	bl	b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5952:	4b54      	ldr	r3, [pc, #336]	; (b5aa4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5954:	3380      	adds	r3, #128	; 0x80
   b5956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5958:	af8f      	add	r7, sp, #572	; 0x23c
   b595a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b595e:	2004      	movs	r0, #4
   b5960:	ab58      	add	r3, sp, #352	; 0x160
   b5962:	9758      	str	r7, [sp, #352]	; 0x160
   b5964:	9059      	str	r0, [sp, #356]	; 0x164
   b5966:	e893 0006 	ldmia.w	r3, {r1, r2}
   b596a:	4630      	mov	r0, r6
   b596c:	f7ff fbe4 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLineCTA = Railway(
   b5970:	a883      	add	r0, sp, #524	; 0x20c
   b5972:	9001      	str	r0, [sp, #4]
   b5974:	a89d      	add	r0, sp, #628	; 0x274
   b5976:	9000      	str	r0, [sp, #0]
   b5978:	a88c      	add	r0, sp, #560	; 0x230
   b597a:	4643      	mov	r3, r8
   b597c:	462a      	mov	r2, r5
   b597e:	4601      	mov	r1, r0
   b5980:	9602      	str	r6, [sp, #8]
   b5982:	4858      	ldr	r0, [pc, #352]	; (b5ae4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6cc>)
   b5984:	f7ff fc58 	bl	b5238 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5988:	4630      	mov	r0, r6
   b598a:	f7fe fef1 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b598e:	a883      	add	r0, sp, #524	; 0x20c
   b5990:	f7fe ff0f 	bl	b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5994:	a8b6      	add	r0, sp, #728	; 0x2d8
   b5996:	f005 fc89 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b599a:	a8b0      	add	r0, sp, #704	; 0x2c0
   b599c:	f005 fc86 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b59a0:	a89d      	add	r0, sp, #628	; 0x274
   b59a2:	f005 fc83 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b59a6:	4640      	mov	r0, r8
   b59a8:	f7fe fee2 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b59ac:	4628      	mov	r0, r5
   b59ae:	f7fe fedf 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b59b2:	a88c      	add	r0, sp, #560	; 0x230
   b59b4:	f7fe fec8 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b59b8:	4b4b      	ldr	r3, [pc, #300]	; (b5ae8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d0>)
   b59ba:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b59bc:	4b4b      	ldr	r3, [pc, #300]	; (b5aec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d4>)
   b59be:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b59c0:	4b4b      	ldr	r3, [pc, #300]	; (b5af0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d8>)
   b59c2:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b59c4:	4b4b      	ldr	r3, [pc, #300]	; (b5af4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6dc>)
   b59c6:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b59c8:	4b4b      	ldr	r3, [pc, #300]	; (b5af8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e0>)
   b59ca:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b59cc:	4b4b      	ldr	r3, [pc, #300]	; (b5afc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e4>)
   b59ce:	93b5      	str	r3, [sp, #724]	; 0x2d4
);
   b59d0:	a8b0      	add	r0, sp, #704	; 0x2c0
      lat = la;
   b59d2:	4b4b      	ldr	r3, [pc, #300]	; (b5b00 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e8>)
   b59d4:	9056      	str	r0, [sp, #344]	; 0x158
   b59d6:	93b6      	str	r3, [sp, #728]	; 0x2d8
   b59d8:	2008      	movs	r0, #8
   b59da:	4b4a      	ldr	r3, [pc, #296]	; (b5b04 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ec>)
   b59dc:	9057      	str	r0, [sp, #348]	; 0x15c
   b59de:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
   b59e2:	93bc      	str	r3, [sp, #752]	; 0x2f0
   b59e4:	a856      	add	r0, sp, #344	; 0x158
      lon = lo;
   b59e6:	4b48      	ldr	r3, [pc, #288]	; (b5b08 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f0>)
   b59e8:	93bd      	str	r3, [sp, #756]	; 0x2f4
   b59ea:	e890 0006 	ldmia.w	r0, {r1, r2}
   b59ee:	4653      	mov	r3, sl
   b59f0:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b59f2:	edcd 8aba 	vstr	s17, [sp, #744]	; 0x2e8
      lon = lo;
   b59f6:	ed8d 8abb 	vstr	s16, [sp, #748]	; 0x2ec
   b59fa:	ed8d eab7 	vstr	s28, [sp, #732]	; 0x2dc
      lat = la;
   b59fe:	edcd 9ab8 	vstr	s19, [sp, #736]	; 0x2e0
      lon = lo;
   b5a02:	ed8d 9ab9 	vstr	s18, [sp, #740]	; 0x2e4
      lat = la;
   b5a06:	edcd aabe 	vstr	s21, [sp, #760]	; 0x2f8
      lon = lo;
   b5a0a:	ed8d aabf 	vstr	s20, [sp, #764]	; 0x2fc
   b5a0e:	f7fe ff05 	bl	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5a12:	4b24      	ldr	r3, [pc, #144]	; (b5aa4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5a14:	9f04      	ldr	r7, [sp, #16]
   b5a16:	f103 0c90 	add.w	ip, r3, #144	; 0x90
   b5a1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5a1e:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b5a22:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5a26:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   b5a2a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b5a2e:	a89d      	add	r0, sp, #628	; 0x274
   b5a30:	9054      	str	r0, [sp, #336]	; 0x150
   b5a32:	2007      	movs	r0, #7
   b5a34:	9055      	str	r0, [sp, #340]	; 0x154
   b5a36:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5a3a:	4628      	mov	r0, r5
   b5a3c:	f7ff fb7c 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5a40:	4b18      	ldr	r3, [pc, #96]	; (b5aa4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5a42:	33ac      	adds	r3, #172	; 0xac
   b5a44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5a46:	af93      	add	r7, sp, #588	; 0x24c
   b5a48:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5a4c:	2004      	movs	r0, #4
   b5a4e:	ab52      	add	r3, sp, #328	; 0x148
   b5a50:	9752      	str	r7, [sp, #328]	; 0x148
   b5a52:	9053      	str	r0, [sp, #332]	; 0x14c
   b5a54:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5a58:	4640      	mov	r0, r8
   b5a5a:	f7ff fb6d 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5a5e:	4658      	mov	r0, fp
   b5a60:	492a      	ldr	r1, [pc, #168]	; (b5b0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f4>)
   b5a62:	f7fe fb51 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5a66:	a8a4      	add	r0, sp, #656	; 0x290
   b5a68:	4929      	ldr	r1, [pc, #164]	; (b5b10 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f8>)
   b5a6a:	f7fe fb4d 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5a6e:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5a70:	4928      	ldr	r1, [pc, #160]	; (b5b14 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6fc>)
   b5a72:	f7fe fb49 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5a76:	aba4      	add	r3, sp, #656	; 0x290
   b5a78:	2002      	movs	r0, #2
   b5a7a:	9350      	str	r3, [sp, #320]	; 0x140
   b5a7c:	9051      	str	r0, [sp, #324]	; 0x144
   b5a7e:	f50d 7994 	add.w	r9, sp, #296	; 0x128
   b5a82:	aa50      	add	r2, sp, #320	; 0x140
   b5a84:	464b      	mov	r3, r9
   b5a86:	ca06      	ldmia	r2, {r1, r2}
   b5a88:	a883      	add	r0, sp, #524	; 0x20c
   b5a8a:	f7fe fefb 	bl	b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5a8e:	4b05      	ldr	r3, [pc, #20]	; (b5aa4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5a90:	33bc      	adds	r3, #188	; 0xbc
   b5a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5a94:	af8f      	add	r7, sp, #572	; 0x23c
   b5a96:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5a9a:	2004      	movs	r0, #4
   b5a9c:	ab4e      	add	r3, sp, #312	; 0x138
   b5a9e:	974e      	str	r7, [sp, #312]	; 0x138
   b5aa0:	e03a      	b.n	b5b18 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x700>
   b5aa2:	bf00      	nop
   b5aa4:	000be728 	.word	0x000be728
   b5aa8:	000be585 	.word	0x000be585
   b5aac:	000be58b 	.word	0x000be58b
   b5ab0:	000be592 	.word	0x000be592
   b5ab4:	000be778 	.word	0x000be778
   b5ab8:	200353e0 	.word	0x200353e0
   b5abc:	42276997 	.word	0x42276997
   b5ac0:	c2af40b8 	.word	0xc2af40b8
   b5ac4:	422781fe 	.word	0x422781fe
   b5ac8:	42278afb 	.word	0x42278afb
   b5acc:	c2af4494 	.word	0xc2af4494
   b5ad0:	42278971 	.word	0x42278971
   b5ad4:	c2af6479 	.word	0xc2af6479
   b5ad8:	000be4ef 	.word	0x000be4ef
   b5adc:	000be599 	.word	0x000be599
   b5ae0:	000be5a0 	.word	0x000be5a0
   b5ae4:	20035544 	.word	0x20035544
   b5ae8:	4227631a 	.word	0x4227631a
   b5aec:	c2af4bd2 	.word	0xc2af4bd2
   b5af0:	42276ec4 	.word	0x42276ec4
   b5af4:	c2af4115 	.word	0xc2af4115
   b5af8:	422780b5 	.word	0x422780b5
   b5afc:	c2af4086 	.word	0xc2af4086
   b5b00:	42278200 	.word	0x42278200
   b5b04:	422781e1 	.word	0x422781e1
   b5b08:	c2af4476 	.word	0xc2af4476
   b5b0c:	000be5a7 	.word	0x000be5a7
   b5b10:	000be5ae 	.word	0x000be5ae
   b5b14:	000be5b5 	.word	0x000be5b5
   b5b18:	904f      	str	r0, [sp, #316]	; 0x13c
   b5b1a:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5b1e:	4630      	mov	r0, r6
   b5b20:	f7ff fb0a 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLineCTA = Railway(
   b5b24:	a883      	add	r0, sp, #524	; 0x20c
   b5b26:	e9cd b000 	strd	fp, r0, [sp]
   b5b2a:	a88c      	add	r0, sp, #560	; 0x230
   b5b2c:	4643      	mov	r3, r8
   b5b2e:	462a      	mov	r2, r5
   b5b30:	4601      	mov	r1, r0
   b5b32:	9602      	str	r6, [sp, #8]
   b5b34:	48ba      	ldr	r0, [pc, #744]	; (b5e20 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa08>)
   b5b36:	f7ff fb7f 	bl	b5238 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5b3a:	4630      	mov	r0, r6
   b5b3c:	f7fe fe18 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5b40:	a883      	add	r0, sp, #524	; 0x20c
   b5b42:	f7fe fe36 	bl	b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5b46:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5b48:	f005 fbb0 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b4c:	a8a4      	add	r0, sp, #656	; 0x290
   b5b4e:	f005 fbad 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b52:	4658      	mov	r0, fp
   b5b54:	f005 fbaa 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b58:	4640      	mov	r0, r8
   b5b5a:	f7fe fe09 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5b5e:	4628      	mov	r0, r5
   b5b60:	f7fe fe06 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5b64:	a88c      	add	r0, sp, #560	; 0x230
   b5b66:	f7fe fdef 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b5b6a:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5b6c:	904c      	str	r0, [sp, #304]	; 0x130
   b5b6e:	2007      	movs	r0, #7
   b5b70:	904d      	str	r0, [sp, #308]	; 0x134
   b5b72:	a842      	add	r0, sp, #264	; 0x108
   b5b74:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b5b78:	4603      	mov	r3, r0
   b5b7a:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b5b7c:	edcd 8ab4 	vstr	s17, [sp, #720]	; 0x2d0
      lon = lo;
   b5b80:	ed8d 8ab5 	vstr	s16, [sp, #724]	; 0x2d4
      lat = la;
   b5b84:	edcd 8abc 	vstr	s17, [sp, #752]	; 0x2f0
      lon = lo;
   b5b88:	ed8d 8abd 	vstr	s16, [sp, #756]	; 0x2f4
      lat = la;
   b5b8c:	edcd dab0 	vstr	s27, [sp, #704]	; 0x2c0
      lon = lo;
   b5b90:	ed8d dab1 	vstr	s26, [sp, #708]	; 0x2c4
      lat = la;
   b5b94:	edcd cab2 	vstr	s25, [sp, #712]	; 0x2c8
      lon = lo;
   b5b98:	ed8d cab3 	vstr	s24, [sp, #716]	; 0x2cc
      lat = la;
   b5b9c:	edcd bab6 	vstr	s23, [sp, #728]	; 0x2d8
      lon = lo;
   b5ba0:	ed8d bab7 	vstr	s22, [sp, #732]	; 0x2dc
      lat = la;
   b5ba4:	edcd aab8 	vstr	s21, [sp, #736]	; 0x2e0
      lon = lo;
   b5ba8:	ed8d aab9 	vstr	s20, [sp, #740]	; 0x2e4
      lat = la;
   b5bac:	edcd 9aba 	vstr	s19, [sp, #744]	; 0x2e8
      lon = lo;
   b5bb0:	ed8d 9abb 	vstr	s18, [sp, #748]	; 0x2ec
   b5bb4:	f7fe fe32 	bl	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5bb8:	4a9a      	ldr	r2, [pc, #616]	; (b5e24 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa0c>)
   b5bba:	9f04      	ldr	r7, [sp, #16]
   b5bbc:	f1a2 0e18 	sub.w	lr, r2, #24
   b5bc0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5bc4:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
   b5bc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5bcc:	9805      	ldr	r0, [sp, #20]
   b5bce:	c803      	ldmia	r0, {r0, r1}
   b5bd0:	e887 0003 	stmia.w	r7, {r0, r1}
   b5bd4:	a89d      	add	r0, sp, #628	; 0x274
   b5bd6:	904a      	str	r0, [sp, #296]	; 0x128
   b5bd8:	2006      	movs	r0, #6
   b5bda:	904b      	str	r0, [sp, #300]	; 0x12c
   b5bdc:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5be0:	4628      	mov	r0, r5
   b5be2:	f7ff faa9 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5be6:	4a8f      	ldr	r2, [pc, #572]	; (b5e24 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa0c>)
   b5be8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b5bea:	af93      	add	r7, sp, #588	; 0x24c
   b5bec:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5bf0:	2204      	movs	r2, #4
   b5bf2:	ab48      	add	r3, sp, #288	; 0x120
   b5bf4:	9748      	str	r7, [sp, #288]	; 0x120
   b5bf6:	9249      	str	r2, [sp, #292]	; 0x124
   b5bf8:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5bfc:	4640      	mov	r0, r8
   b5bfe:	f7ff fa9b 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5c02:	4658      	mov	r0, fp
   b5c04:	4988      	ldr	r1, [pc, #544]	; (b5e28 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa10>)
   b5c06:	f7fe fa7f 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5c0a:	a8a4      	add	r0, sp, #656	; 0x290
   b5c0c:	4987      	ldr	r1, [pc, #540]	; (b5e2c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa14>)
   b5c0e:	f7fe fa7b 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5c12:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5c14:	4986      	ldr	r1, [pc, #536]	; (b5e30 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa18>)
   b5c16:	f7fe fa77 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5c1a:	aba4      	add	r3, sp, #656	; 0x290
   b5c1c:	2002      	movs	r0, #2
   b5c1e:	9346      	str	r3, [sp, #280]	; 0x118
   b5c20:	9047      	str	r0, [sp, #284]	; 0x11c
   b5c22:	f50d 7980 	add.w	r9, sp, #256	; 0x100
   b5c26:	aa46      	add	r2, sp, #280	; 0x118
   b5c28:	ca06      	ldmia	r2, {r1, r2}
   b5c2a:	464b      	mov	r3, r9
   b5c2c:	a883      	add	r0, sp, #524	; 0x20c
   b5c2e:	f7fe fe29 	bl	b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5c32:	4980      	ldr	r1, [pc, #512]	; (b5e34 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa1c>)
   b5c34:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   b5c36:	af8f      	add	r7, sp, #572	; 0x23c
   b5c38:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5c3c:	2204      	movs	r2, #4
   b5c3e:	ab44      	add	r3, sp, #272	; 0x110
   b5c40:	9744      	str	r7, [sp, #272]	; 0x110
   b5c42:	9245      	str	r2, [sp, #276]	; 0x114
   b5c44:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5c48:	4630      	mov	r0, r6
   b5c4a:	f7ff fa75 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway purpleLineCTA = Railway(
   b5c4e:	aa83      	add	r2, sp, #524	; 0x20c
   b5c50:	4643      	mov	r3, r8
   b5c52:	a98c      	add	r1, sp, #560	; 0x230
   b5c54:	e9cd b200 	strd	fp, r2, [sp]
   b5c58:	9602      	str	r6, [sp, #8]
   b5c5a:	462a      	mov	r2, r5
   b5c5c:	4876      	ldr	r0, [pc, #472]	; (b5e38 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa20>)
   b5c5e:	f7ff faeb 	bl	b5238 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5c62:	4630      	mov	r0, r6
   b5c64:	f7fe fd84 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5c68:	a883      	add	r0, sp, #524	; 0x20c
   b5c6a:	f7fe fda2 	bl	b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5c6e:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5c70:	f005 fb1c 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5c74:	a8a4      	add	r0, sp, #656	; 0x290
   b5c76:	f005 fb19 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5c7a:	4658      	mov	r0, fp
   b5c7c:	f005 fb16 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5c80:	4640      	mov	r0, r8
   b5c82:	f7fe fd75 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5c86:	4628      	mov	r0, r5
   b5c88:	f7fe fd72 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5c8c:	a88c      	add	r0, sp, #560	; 0x230
   b5c8e:	f7fe fd5b 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5c92:	4b6a      	ldr	r3, [pc, #424]	; (b5e3c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa24>)
   b5c94:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b5c96:	4b6a      	ldr	r3, [pc, #424]	; (b5e40 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa28>)
   b5c98:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b5c9a:	4b6a      	ldr	r3, [pc, #424]	; (b5e44 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa2c>)
   b5c9c:	93b2      	str	r3, [sp, #712]	; 0x2c8
);
   b5c9e:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b5ca0:	4b69      	ldr	r3, [pc, #420]	; (b5e48 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa30>)
   b5ca2:	9242      	str	r2, [sp, #264]	; 0x108
   b5ca4:	93b3      	str	r3, [sp, #716]	; 0x2cc
   b5ca6:	2208      	movs	r2, #8
      lat = la;
   b5ca8:	4b68      	ldr	r3, [pc, #416]	; (b5e4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa34>)
   b5caa:	9243      	str	r2, [sp, #268]	; 0x10c
   b5cac:	f10d 0ae0 	add.w	sl, sp, #224	; 0xe0
   b5cb0:	93b4      	str	r3, [sp, #720]	; 0x2d0
   b5cb2:	aa42      	add	r2, sp, #264	; 0x108
      lon = lo;
   b5cb4:	4b66      	ldr	r3, [pc, #408]	; (b5e50 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa38>)
   b5cb6:	93b5      	str	r3, [sp, #724]	; 0x2d4
   b5cb8:	ca06      	ldmia	r2, {r1, r2}
   b5cba:	4653      	mov	r3, sl
   b5cbc:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b5cbe:	edcd 8ab6 	vstr	s17, [sp, #728]	; 0x2d8
      lon = lo;
   b5cc2:	ed8d 8ab7 	vstr	s16, [sp, #732]	; 0x2dc
      lat = la;
   b5cc6:	edcd 8abe 	vstr	s17, [sp, #760]	; 0x2f8
      lon = lo;
   b5cca:	ed8d 8abf 	vstr	s16, [sp, #764]	; 0x2fc
      lat = la;
   b5cce:	edcd 9ab8 	vstr	s19, [sp, #736]	; 0x2e0
      lon = lo;
   b5cd2:	ed8d 9ab9 	vstr	s18, [sp, #740]	; 0x2e4
      lat = la;
   b5cd6:	edcd aaba 	vstr	s21, [sp, #744]	; 0x2e8
      lon = lo;
   b5cda:	ed8d aabb 	vstr	s20, [sp, #748]	; 0x2ec
      lat = la;
   b5cde:	edcd babc 	vstr	s23, [sp, #752]	; 0x2f0
      lon = lo;
   b5ce2:	ed8d babd 	vstr	s22, [sp, #756]	; 0x2f4
   b5ce6:	f7fe fd99 	bl	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5cea:	4b5a      	ldr	r3, [pc, #360]	; (b5e54 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b5cec:	9f04      	ldr	r7, [sp, #16]
      lat = la;
   b5cee:	eddf 8a5a 	vldr	s17, [pc, #360]	; b5e58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa40>
      lon = lo;
   b5cf2:	ed9f 8a5a 	vldr	s16, [pc, #360]	; b5e5c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa44>
   b5cf6:	f103 0ccc 	add.w	ip, r3, #204	; 0xcc
   b5cfa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5cfe:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b5d02:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5d06:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   b5d0a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b5d0e:	aa9d      	add	r2, sp, #628	; 0x274
   b5d10:	9240      	str	r2, [sp, #256]	; 0x100
   b5d12:	2207      	movs	r2, #7
   b5d14:	9241      	str	r2, [sp, #260]	; 0x104
   b5d16:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5d1a:	4628      	mov	r0, r5
   b5d1c:	f7ff fa0c 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5d20:	4b4c      	ldr	r3, [pc, #304]	; (b5e54 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b5d22:	33e8      	adds	r3, #232	; 0xe8
   b5d24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5d26:	af93      	add	r7, sp, #588	; 0x24c
   b5d28:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5d2c:	2204      	movs	r2, #4
   b5d2e:	ab3e      	add	r3, sp, #248	; 0xf8
   b5d30:	973e      	str	r7, [sp, #248]	; 0xf8
   b5d32:	923f      	str	r2, [sp, #252]	; 0xfc
   b5d34:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5d38:	4640      	mov	r0, r8
   b5d3a:	f7ff f9fd 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5d3e:	4658      	mov	r0, fp
   b5d40:	4947      	ldr	r1, [pc, #284]	; (b5e60 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa48>)
   b5d42:	f7fe f9e1 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5d46:	a8a4      	add	r0, sp, #656	; 0x290
   b5d48:	4946      	ldr	r1, [pc, #280]	; (b5e64 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa4c>)
   b5d4a:	f7fe f9dd 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5d4e:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5d50:	4945      	ldr	r1, [pc, #276]	; (b5e68 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa50>)
   b5d52:	f7fe f9d9 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5d56:	aba4      	add	r3, sp, #656	; 0x290
   b5d58:	2102      	movs	r1, #2
   b5d5a:	933c      	str	r3, [sp, #240]	; 0xf0
   b5d5c:	f10d 09d8 	add.w	r9, sp, #216	; 0xd8
   b5d60:	913d      	str	r1, [sp, #244]	; 0xf4
   b5d62:	aa3c      	add	r2, sp, #240	; 0xf0
   b5d64:	464b      	mov	r3, r9
   b5d66:	ca06      	ldmia	r2, {r1, r2}
   b5d68:	a883      	add	r0, sp, #524	; 0x20c
   b5d6a:	f7fe fd8b 	bl	b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5d6e:	4b39      	ldr	r3, [pc, #228]	; (b5e54 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b5d70:	33f8      	adds	r3, #248	; 0xf8
   b5d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5d74:	af8f      	add	r7, sp, #572	; 0x23c
   b5d76:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5d7a:	2204      	movs	r2, #4
   b5d7c:	ab3a      	add	r3, sp, #232	; 0xe8
   b5d7e:	973a      	str	r7, [sp, #232]	; 0xe8
   b5d80:	923b      	str	r2, [sp, #236]	; 0xec
   b5d82:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5d86:	4630      	mov	r0, r6
   b5d88:	f7ff f9d6 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway pinkLineCTA = Railway(
   b5d8c:	aa83      	add	r2, sp, #524	; 0x20c
   b5d8e:	4643      	mov	r3, r8
   b5d90:	a98c      	add	r1, sp, #560	; 0x230
   b5d92:	e9cd b200 	strd	fp, r2, [sp]
   b5d96:	9602      	str	r6, [sp, #8]
   b5d98:	462a      	mov	r2, r5
   b5d9a:	4834      	ldr	r0, [pc, #208]	; (b5e6c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa54>)
   b5d9c:	f7ff fa4c 	bl	b5238 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5da0:	4630      	mov	r0, r6
   b5da2:	f7fe fce5 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5da6:	a883      	add	r0, sp, #524	; 0x20c
   b5da8:	f7fe fd03 	bl	b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5dac:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5dae:	f005 fa7d 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5db2:	a8a4      	add	r0, sp, #656	; 0x290
   b5db4:	f005 fa7a 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5db8:	4658      	mov	r0, fp
   b5dba:	f005 fa77 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5dbe:	4640      	mov	r0, r8
   b5dc0:	f7fe fcd6 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5dc4:	4628      	mov	r0, r5
   b5dc6:	f7fe fcd3 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5dca:	a88c      	add	r0, sp, #560	; 0x230
   b5dcc:	f7fe fcbc 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5dd0:	4b27      	ldr	r3, [pc, #156]	; (b5e70 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa58>)
   b5dd2:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b5dd4:	4b27      	ldr	r3, [pc, #156]	; (b5e74 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa5c>)
   b5dd6:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b5dd8:	4b27      	ldr	r3, [pc, #156]	; (b5e78 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa60>)
   b5dda:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b5ddc:	4b27      	ldr	r3, [pc, #156]	; (b5e7c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa64>)
   b5dde:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b5de0:	4b27      	ldr	r3, [pc, #156]	; (b5e80 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa68>)
   b5de2:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b5de4:	4b27      	ldr	r3, [pc, #156]	; (b5e84 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa6c>)
   b5de6:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b5de8:	4b27      	ldr	r3, [pc, #156]	; (b5e88 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa70>)
   b5dea:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b5dec:	4b27      	ldr	r3, [pc, #156]	; (b5e8c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa74>)
   b5dee:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b5df0:	4b27      	ldr	r3, [pc, #156]	; (b5e90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa78>)
   b5df2:	93b8      	str	r3, [sp, #736]	; 0x2e0
      lon = lo;
   b5df4:	4b27      	ldr	r3, [pc, #156]	; (b5e94 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa7c>)
   b5df6:	93b9      	str	r3, [sp, #740]	; 0x2e4
      lat = la;
   b5df8:	4b27      	ldr	r3, [pc, #156]	; (b5e98 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa80>)
   b5dfa:	93ba      	str	r3, [sp, #744]	; 0x2e8
};
   b5dfc:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b5dfe:	4b27      	ldr	r3, [pc, #156]	; (b5e9c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa84>)
   b5e00:	9238      	str	r2, [sp, #224]	; 0xe0
   b5e02:	93bb      	str	r3, [sp, #748]	; 0x2ec
   b5e04:	2207      	movs	r2, #7
      lat = la;
   b5e06:	4b26      	ldr	r3, [pc, #152]	; (b5ea0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa88>)
   b5e08:	9239      	str	r2, [sp, #228]	; 0xe4
   b5e0a:	93bc      	str	r3, [sp, #752]	; 0x2f0
   b5e0c:	aa2e      	add	r2, sp, #184	; 0xb8
      lon = lo;
   b5e0e:	4b25      	ldr	r3, [pc, #148]	; (b5ea4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa8c>)
   b5e10:	93bd      	str	r3, [sp, #756]	; 0x2f4
   b5e12:	a88c      	add	r0, sp, #560	; 0x230
   b5e14:	4613      	mov	r3, r2
   b5e16:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b5e1a:	f7fe fcff 	bl	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5e1e:	e043      	b.n	b5ea8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa90>
   b5e20:	20037de0 	.word	0x20037de0
   b5e24:	000be768 	.word	0x000be768
   b5e28:	000be5bc 	.word	0x000be5bc
   b5e2c:	000be5c3 	.word	0x000be5c3
   b5e30:	000be5ca 	.word	0x000be5ca
   b5e34:	000be778 	.word	0x000be778
   b5e38:	2003e4f0 	.word	0x2003e4f0
   b5e3c:	42276a76 	.word	0x42276a76
   b5e40:	c2af692b 	.word	0xc2af692b
   b5e44:	42276b5f 	.word	0x42276b5f
   b5e48:	c2af56cd 	.word	0xc2af56cd
   b5e4c:	42278a2d 	.word	0x42278a2d
   b5e50:	c2af56d8 	.word	0xc2af56d8
   b5e54:	000be728 	.word	0x000be728
   b5e58:	42296602 	.word	0x42296602
   b5e5c:	c28e2881 	.word	0xc28e2881
   b5e60:	000be5d1 	.word	0x000be5d1
   b5e64:	000be5d6 	.word	0x000be5d6
   b5e68:	000be5dd 	.word	0x000be5dd
   b5e6c:	2003e484 	.word	0x2003e484
   b5e70:	4229481b 	.word	0x4229481b
   b5e74:	c28e1ab2 	.word	0xc28e1ab2
   b5e78:	42294f83 	.word	0x42294f83
   b5e7c:	c28e1d93 	.word	0xc28e1d93
   b5e80:	422960e6 	.word	0x422960e6
   b5e84:	c28e1d2d 	.word	0xc28e1d2d
   b5e88:	422966f9 	.word	0x422966f9
   b5e8c:	c28e1af0 	.word	0xc28e1af0
   b5e90:	422971a5 	.word	0x422971a5
   b5e94:	c28e23e6 	.word	0xc28e23e6
   b5e98:	42297437 	.word	0x42297437
   b5e9c:	c28e3373 	.word	0xc28e3373
   b5ea0:	42297d7a 	.word	0x42297d7a
   b5ea4:	c28e3b5d 	.word	0xc28e3b5d
   b5ea8:	4bb1      	ldr	r3, [pc, #708]	; (b6170 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd58>)
   b5eaa:	f503 7c84 	add.w	ip, r3, #264	; 0x108
   b5eae:	461f      	mov	r7, r3
   b5eb0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5eb4:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b5eb8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5ebc:	e89c 0003 	ldmia.w	ip, {r0, r1}
   b5ec0:	9a04      	ldr	r2, [sp, #16]
   b5ec2:	e882 0003 	stmia.w	r2, {r0, r1}
   b5ec6:	aa9d      	add	r2, sp, #628	; 0x274
   b5ec8:	9236      	str	r2, [sp, #216]	; 0xd8
   b5eca:	2206      	movs	r2, #6
   b5ecc:	9237      	str	r2, [sp, #220]	; 0xdc
   b5ece:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5ed2:	4628      	mov	r0, r5
   b5ed4:	f7ff f930 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5ed8:	aa93      	add	r2, sp, #588	; 0x24c
   b5eda:	9234      	str	r2, [sp, #208]	; 0xd0
   b5edc:	2332      	movs	r3, #50	; 0x32
   b5ede:	2204      	movs	r2, #4
   b5ee0:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b5ee4:	9235      	str	r2, [sp, #212]	; 0xd4
   b5ee6:	ab34      	add	r3, sp, #208	; 0xd0
   b5ee8:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5eec:	4640      	mov	r0, r8
   b5eee:	9493      	str	r4, [sp, #588]	; 0x24c
   b5ef0:	9496      	str	r4, [sp, #600]	; 0x258
   b5ef2:	f7ff f921 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5ef6:	4658      	mov	r0, fp
   b5ef8:	499e      	ldr	r1, [pc, #632]	; (b6174 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd5c>)
   b5efa:	f7fe f905 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5efe:	a8a4      	add	r0, sp, #656	; 0x290
   b5f00:	499d      	ldr	r1, [pc, #628]	; (b6178 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd60>)
   b5f02:	f7fe f901 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5f06:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5f08:	499c      	ldr	r1, [pc, #624]	; (b617c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd64>)
   b5f0a:	f7fe f8fd 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5f0e:	aba4      	add	r3, sp, #656	; 0x290
   b5f10:	2102      	movs	r1, #2
   b5f12:	9332      	str	r3, [sp, #200]	; 0xc8
   b5f14:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
   b5f18:	9133      	str	r1, [sp, #204]	; 0xcc
   b5f1a:	aa32      	add	r2, sp, #200	; 0xc8
   b5f1c:	464b      	mov	r3, r9
   b5f1e:	ca06      	ldmia	r2, {r1, r2}
   b5f20:	a883      	add	r0, sp, #524	; 0x20c
   b5f22:	f7fe fcaf 	bl	b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5f26:	4621      	mov	r1, r4
   b5f28:	2210      	movs	r2, #16
   b5f2a:	a88f      	add	r0, sp, #572	; 0x23c
   b5f2c:	f006 f996 	bl	bc25c <memset>
   b5f30:	aa8f      	add	r2, sp, #572	; 0x23c
   b5f32:	9230      	str	r2, [sp, #192]	; 0xc0
   b5f34:	2204      	movs	r2, #4
   b5f36:	ab30      	add	r3, sp, #192	; 0xc0
   b5f38:	9231      	str	r2, [sp, #196]	; 0xc4
   b5f3a:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5f3e:	4630      	mov	r0, r6
   b5f40:	f7ff f8fa 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLineMBTA = Railway{
   b5f44:	aa83      	add	r2, sp, #524	; 0x20c
   b5f46:	4643      	mov	r3, r8
   b5f48:	a98c      	add	r1, sp, #560	; 0x230
   b5f4a:	e9cd b200 	strd	fp, r2, [sp]
   b5f4e:	9602      	str	r6, [sp, #8]
   b5f50:	462a      	mov	r2, r5
   b5f52:	488b      	ldr	r0, [pc, #556]	; (b6180 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd68>)
   b5f54:	f7ff f970 	bl	b5238 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5f58:	4630      	mov	r0, r6
   b5f5a:	f7fe fc09 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b5f5e:	a883      	add	r0, sp, #524	; 0x20c
   b5f60:	f7fe fc27 	bl	b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5f64:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5f66:	f005 f9a1 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5f6a:	a8a4      	add	r0, sp, #656	; 0x290
   b5f6c:	f005 f99e 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5f70:	4658      	mov	r0, fp
   b5f72:	f005 f99b 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5f76:	4640      	mov	r0, r8
   b5f78:	f7fe fbfa 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5f7c:	4628      	mov	r0, r5
   b5f7e:	f7fe fbf7 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5f82:	a88c      	add	r0, sp, #560	; 0x230
   b5f84:	f7fe fbe0 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5f88:	4b7e      	ldr	r3, [pc, #504]	; (b6184 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd6c>)
   b5f8a:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b5f8c:	4b7e      	ldr	r3, [pc, #504]	; (b6188 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd70>)
   b5f8e:	93a5      	str	r3, [sp, #660]	; 0x294
      lat = la;
   b5f90:	4b7e      	ldr	r3, [pc, #504]	; (b618c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd74>)
   b5f92:	93a6      	str	r3, [sp, #664]	; 0x298
      lon = lo;
   b5f94:	4b7e      	ldr	r3, [pc, #504]	; (b6190 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd78>)
   b5f96:	93a7      	str	r3, [sp, #668]	; 0x29c
      lat = la;
   b5f98:	4b7e      	ldr	r3, [pc, #504]	; (b6194 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd7c>)
   b5f9a:	93a8      	str	r3, [sp, #672]	; 0x2a0
      lon = lo;
   b5f9c:	4b7e      	ldr	r3, [pc, #504]	; (b6198 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd80>)
   b5f9e:	93a9      	str	r3, [sp, #676]	; 0x2a4
      lat = la;
   b5fa0:	4b7e      	ldr	r3, [pc, #504]	; (b619c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd84>)
   b5fa2:	93aa      	str	r3, [sp, #680]	; 0x2a8
      lon = lo;
   b5fa4:	4b7e      	ldr	r3, [pc, #504]	; (b61a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd88>)
   b5fa6:	93ab      	str	r3, [sp, #684]	; 0x2ac
};
   b5fa8:	2204      	movs	r2, #4
   b5faa:	aba4      	add	r3, sp, #656	; 0x290
   b5fac:	932e      	str	r3, [sp, #184]	; 0xb8
   b5fae:	922f      	str	r2, [sp, #188]	; 0xbc
   b5fb0:	f10d 0a90 	add.w	sl, sp, #144	; 0x90
   b5fb4:	aa2e      	add	r2, sp, #184	; 0xb8
   b5fb6:	4653      	mov	r3, sl
   b5fb8:	ca06      	ldmia	r2, {r1, r2}
   b5fba:	a88f      	add	r0, sp, #572	; 0x23c
   b5fbc:	f7fe fc2e 	bl	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5fc0:	f507 7390 	add.w	r3, r7, #288	; 0x120
   b5fc4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   b5fc8:	2303      	movs	r3, #3
   b5fca:	952c      	str	r5, [sp, #176]	; 0xb0
   b5fcc:	932d      	str	r3, [sp, #180]	; 0xb4
   b5fce:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   b5fd2:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5fd6:	a88c      	add	r0, sp, #560	; 0x230
   b5fd8:	f7ff f8ae 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5fdc:	2228      	movs	r2, #40	; 0x28
   b5fde:	e9cd 2498 	strd	r2, r4, [sp, #608]	; 0x260
   b5fe2:	2204      	movs	r2, #4
   b5fe4:	ab2a      	add	r3, sp, #168	; 0xa8
   b5fe6:	f8cd b0a8 	str.w	fp, [sp, #168]	; 0xa8
   b5fea:	922b      	str	r2, [sp, #172]	; 0xac
   b5fec:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5ff0:	4640      	mov	r0, r8
   b5ff2:	9497      	str	r4, [sp, #604]	; 0x25c
   b5ff4:	949a      	str	r4, [sp, #616]	; 0x268
   b5ff6:	f7ff f89f 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5ffa:	a89d      	add	r0, sp, #628	; 0x274
   b5ffc:	4969      	ldr	r1, [pc, #420]	; (b61a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd8c>)
   b5ffe:	f7fe f883 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6002:	a8b0      	add	r0, sp, #704	; 0x2c0
   b6004:	4968      	ldr	r1, [pc, #416]	; (b61a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd90>)
   b6006:	f7fe f87f 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b600a:	a8b6      	add	r0, sp, #728	; 0x2d8
   b600c:	4967      	ldr	r1, [pc, #412]	; (b61ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd94>)
   b600e:	f7fe f87b 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6012:	a9b0      	add	r1, sp, #704	; 0x2c0
   b6014:	9128      	str	r1, [sp, #160]	; 0xa0
   b6016:	2102      	movs	r1, #2
   b6018:	f10d 0988 	add.w	r9, sp, #136	; 0x88
   b601c:	9129      	str	r1, [sp, #164]	; 0xa4
   b601e:	aa28      	add	r2, sp, #160	; 0xa0
   b6020:	464b      	mov	r3, r9
   b6022:	ca06      	ldmia	r2, {r1, r2}
   b6024:	a883      	add	r0, sp, #524	; 0x20c
   b6026:	f7fe fc2d 	bl	b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b602a:	4621      	mov	r1, r4
   b602c:	2210      	movs	r2, #16
   b602e:	a893      	add	r0, sp, #588	; 0x24c
   b6030:	f006 f914 	bl	bc25c <memset>
   b6034:	aa93      	add	r2, sp, #588	; 0x24c
   b6036:	9226      	str	r2, [sp, #152]	; 0x98
   b6038:	2204      	movs	r2, #4
   b603a:	ab26      	add	r3, sp, #152	; 0x98
   b603c:	9227      	str	r2, [sp, #156]	; 0x9c
   b603e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b6042:	4630      	mov	r0, r6
   b6044:	f7ff f878 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLineMBTA = Railway{
   b6048:	aa83      	add	r2, sp, #524	; 0x20c
   b604a:	9201      	str	r2, [sp, #4]
   b604c:	aa9d      	add	r2, sp, #628	; 0x274
   b604e:	4643      	mov	r3, r8
   b6050:	a98f      	add	r1, sp, #572	; 0x23c
   b6052:	9602      	str	r6, [sp, #8]
   b6054:	9200      	str	r2, [sp, #0]
   b6056:	4856      	ldr	r0, [pc, #344]	; (b61b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd98>)
   b6058:	aa8c      	add	r2, sp, #560	; 0x230
   b605a:	f7ff f8ed 	bl	b5238 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b605e:	4630      	mov	r0, r6
   b6060:	f7fe fb86 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b6064:	a883      	add	r0, sp, #524	; 0x20c
   b6066:	f7fe fba4 	bl	b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b606a:	a8b6      	add	r0, sp, #728	; 0x2d8
   b606c:	f005 f91e 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6070:	a8b0      	add	r0, sp, #704	; 0x2c0
   b6072:	f005 f91b 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6076:	a89d      	add	r0, sp, #628	; 0x274
   b6078:	f005 f918 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b607c:	4640      	mov	r0, r8
   b607e:	f7fe fb77 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6082:	a88c      	add	r0, sp, #560	; 0x230
   b6084:	f7fe fb74 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6088:	a88f      	add	r0, sp, #572	; 0x23c
   b608a:	f7fe fb5d 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b608e:	4b49      	ldr	r3, [pc, #292]	; (b61b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd9c>)
   b6090:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b6092:	4b49      	ldr	r3, [pc, #292]	; (b61b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xda0>)
   b6094:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b6096:	4b49      	ldr	r3, [pc, #292]	; (b61bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xda4>)
   b6098:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b609a:	4b49      	ldr	r3, [pc, #292]	; (b61c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xda8>)
   b609c:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b609e:	4b49      	ldr	r3, [pc, #292]	; (b61c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdac>)
   b60a0:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b60a2:	4b49      	ldr	r3, [pc, #292]	; (b61c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdb0>)
   b60a4:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b60a6:	4b49      	ldr	r3, [pc, #292]	; (b61cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdb4>)
   b60a8:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b60aa:	4b49      	ldr	r3, [pc, #292]	; (b61d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdb8>)
   b60ac:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b60ae:	4b49      	ldr	r3, [pc, #292]	; (b61d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdbc>)
   b60b0:	93b8      	str	r3, [sp, #736]	; 0x2e0
};
   b60b2:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b60b4:	4b48      	ldr	r3, [pc, #288]	; (b61d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdc0>)
   b60b6:	9224      	str	r2, [sp, #144]	; 0x90
   b60b8:	93b9      	str	r3, [sp, #740]	; 0x2e4
   b60ba:	2206      	movs	r2, #6
      lat = la;
   b60bc:	4b47      	ldr	r3, [pc, #284]	; (b61dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdc4>)
   b60be:	9225      	str	r2, [sp, #148]	; 0x94
   b60c0:	93ba      	str	r3, [sp, #744]	; 0x2e8
   b60c2:	aa1a      	add	r2, sp, #104	; 0x68
      lon = lo;
   b60c4:	4b46      	ldr	r3, [pc, #280]	; (b61e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdc8>)
   b60c6:	93bb      	str	r3, [sp, #748]	; 0x2ec
   b60c8:	a88c      	add	r0, sp, #560	; 0x230
   b60ca:	4613      	mov	r3, r2
   b60cc:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b60d0:	f7fe fba4 	bl	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b60d4:	4b26      	ldr	r3, [pc, #152]	; (b6170 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd58>)
   b60d6:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
   b60da:	f503 7c96 	add.w	ip, r3, #300	; 0x12c
   b60de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b60e2:	465f      	mov	r7, fp
   b60e4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b60e6:	f8dc 3000 	ldr.w	r3, [ip]
   b60ea:	603b      	str	r3, [r7, #0]
   b60ec:	2305      	movs	r3, #5
   b60ee:	9323      	str	r3, [sp, #140]	; 0x8c
   b60f0:	e899 0006 	ldmia.w	r9, {r1, r2}
   b60f4:	4628      	mov	r0, r5
   b60f6:	f7ff f81f 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b60fa:	aa93      	add	r2, sp, #588	; 0x24c
   b60fc:	9220      	str	r2, [sp, #128]	; 0x80
   b60fe:	232d      	movs	r3, #45	; 0x2d
   b6100:	2204      	movs	r2, #4
   b6102:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b6106:	9221      	str	r2, [sp, #132]	; 0x84
   b6108:	ab20      	add	r3, sp, #128	; 0x80
   b610a:	e893 0006 	ldmia.w	r3, {r1, r2}
   b610e:	4640      	mov	r0, r8
   b6110:	9493      	str	r4, [sp, #588]	; 0x24c
   b6112:	9496      	str	r4, [sp, #600]	; 0x258
   b6114:	f7ff f810 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b6118:	a89d      	add	r0, sp, #628	; 0x274
   b611a:	4932      	ldr	r1, [pc, #200]	; (b61e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdcc>)
   b611c:	f7fd fff4 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6120:	a8a4      	add	r0, sp, #656	; 0x290
   b6122:	4931      	ldr	r1, [pc, #196]	; (b61e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdd0>)
   b6124:	f7fd fff0 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6128:	a8aa      	add	r0, sp, #680	; 0x2a8
   b612a:	4930      	ldr	r1, [pc, #192]	; (b61ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdd4>)
   b612c:	f7fd ffec 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6130:	aba4      	add	r3, sp, #656	; 0x290
   b6132:	931e      	str	r3, [sp, #120]	; 0x78
   b6134:	2302      	movs	r3, #2
   b6136:	931f      	str	r3, [sp, #124]	; 0x7c
   b6138:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   b613c:	aa1e      	add	r2, sp, #120	; 0x78
   b613e:	4653      	mov	r3, sl
   b6140:	ca06      	ldmia	r2, {r1, r2}
   b6142:	a883      	add	r0, sp, #524	; 0x20c
   b6144:	f7fe fb9e 	bl	b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b6148:	4621      	mov	r1, r4
   b614a:	2210      	movs	r2, #16
   b614c:	a88f      	add	r0, sp, #572	; 0x23c
   b614e:	f006 f885 	bl	bc25c <memset>
   b6152:	aa8f      	add	r2, sp, #572	; 0x23c
   b6154:	921c      	str	r2, [sp, #112]	; 0x70
   b6156:	2204      	movs	r2, #4
   b6158:	ab1c      	add	r3, sp, #112	; 0x70
   b615a:	921d      	str	r2, [sp, #116]	; 0x74
   b615c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b6160:	4630      	mov	r0, r6
   b6162:	f7fe ffe9 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLineMBTA = Railway{
   b6166:	ab83      	add	r3, sp, #524	; 0x20c
   b6168:	9301      	str	r3, [sp, #4]
   b616a:	ab9d      	add	r3, sp, #628	; 0x274
   b616c:	e040      	b.n	b61f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdd8>
   b616e:	bf00      	nop
   b6170:	000be728 	.word	0x000be728
   b6174:	000be560 	.word	0x000be560
   b6178:	000be564 	.word	0x000be564
   b617c:	000be56b 	.word	0x000be56b
   b6180:	2003e5c8 	.word	0x2003e5c8
   b6184:	422984a9 	.word	0x422984a9
   b6188:	c28e0be6 	.word	0xc28e0be6
   b618c:	422970a6 	.word	0x422970a6
   b6190:	c28e1862 	.word	0xc28e1862
   b6194:	42296fe1 	.word	0x42296fe1
   b6198:	c28e1e86 	.word	0xc28e1e86
   b619c:	422971d1 	.word	0x422971d1
   b61a0:	c28e1fcf 	.word	0xc28e1fcf
   b61a4:	000be572 	.word	0x000be572
   b61a8:	000be577 	.word	0x000be577
   b61ac:	000be57e 	.word	0x000be57e
   b61b0:	20035374 	.word	0x20035374
   b61b4:	4229537a 	.word	0x4229537a
   b61b8:	c28e30c9 	.word	0xc28e30c9
   b61bc:	422963d0 	.word	0x422963d0
   b61c0:	c28e26f1 	.word	0xc28e26f1
   b61c4:	4229634b 	.word	0x4229634b
   b61c8:	c28e210d 	.word	0xc28e210d
   b61cc:	42296e30 	.word	0x42296e30
   b61d0:	c28e1d5a 	.word	0xc28e1d5a
   b61d4:	42298278 	.word	0x42298278
   b61d8:	c28e26e2 	.word	0xc28e26e2
   b61dc:	42299ccd 	.word	0x42299ccd
   b61e0:	c28e2770 	.word	0xc28e2770
   b61e4:	000be5a7 	.word	0x000be5a7
   b61e8:	000be5ae 	.word	0x000be5ae
   b61ec:	000be5b5 	.word	0x000be5b5
   b61f0:	462a      	mov	r2, r5
   b61f2:	a98c      	add	r1, sp, #560	; 0x230
   b61f4:	9602      	str	r6, [sp, #8]
   b61f6:	9300      	str	r3, [sp, #0]
   b61f8:	48b5      	ldr	r0, [pc, #724]	; (b64d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10b8>)
   b61fa:	4643      	mov	r3, r8
   b61fc:	f7ff f81c 	bl	b5238 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b6200:	4630      	mov	r0, r6
   b6202:	f7fe fab5 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b6206:	a883      	add	r0, sp, #524	; 0x20c
   b6208:	f7fe fad3 	bl	b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b620c:	a8aa      	add	r0, sp, #680	; 0x2a8
   b620e:	f005 f84d 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6212:	a8a4      	add	r0, sp, #656	; 0x290
   b6214:	f005 f84a 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6218:	a89d      	add	r0, sp, #628	; 0x274
   b621a:	f005 f847 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b621e:	4640      	mov	r0, r8
   b6220:	f7fe faa6 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6224:	4628      	mov	r0, r5
   b6226:	f7fe faa3 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b622a:	a88c      	add	r0, sp, #560	; 0x230
   b622c:	f7fe fa8c 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b6230:	4ba8      	ldr	r3, [pc, #672]	; (b64d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10bc>)
   b6232:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b6234:	4ba8      	ldr	r3, [pc, #672]	; (b64d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10c0>)
   b6236:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b6238:	4ba8      	ldr	r3, [pc, #672]	; (b64dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10c4>)
   b623a:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b623c:	4ba8      	ldr	r3, [pc, #672]	; (b64e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10c8>)
   b623e:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b6240:	4ba8      	ldr	r3, [pc, #672]	; (b64e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10cc>)
   b6242:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b6244:	4ba8      	ldr	r3, [pc, #672]	; (b64e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d0>)
   b6246:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b6248:	4ba8      	ldr	r3, [pc, #672]	; (b64ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d4>)
   b624a:	93b8      	str	r3, [sp, #736]	; 0x2e0
      lon = lo;
   b624c:	4ba8      	ldr	r3, [pc, #672]	; (b64f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d8>)
   b624e:	93b9      	str	r3, [sp, #740]	; 0x2e4
      lat = la;
   b6250:	4ba8      	ldr	r3, [pc, #672]	; (b64f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10dc>)
   b6252:	93ba      	str	r3, [sp, #744]	; 0x2e8
      lon = lo;
   b6254:	4ba8      	ldr	r3, [pc, #672]	; (b64f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e0>)
   b6256:	93bb      	str	r3, [sp, #748]	; 0x2ec
      lat = la;
   b6258:	4ba8      	ldr	r3, [pc, #672]	; (b64fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e4>)
   b625a:	93bc      	str	r3, [sp, #752]	; 0x2f0
      lon = lo;
   b625c:	4ba8      	ldr	r3, [pc, #672]	; (b6500 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e8>)
   b625e:	93bd      	str	r3, [sp, #756]	; 0x2f4
      lat = la;
   b6260:	4ba8      	ldr	r3, [pc, #672]	; (b6504 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10ec>)
   b6262:	93be      	str	r3, [sp, #760]	; 0x2f8
      lon = lo;
   b6264:	4ba8      	ldr	r3, [pc, #672]	; (b6508 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f0>)
   b6266:	93bf      	str	r3, [sp, #764]	; 0x2fc
};
   b6268:	abb0      	add	r3, sp, #704	; 0x2c0
   b626a:	931a      	str	r3, [sp, #104]	; 0x68
   b626c:	2308      	movs	r3, #8
   b626e:	931b      	str	r3, [sp, #108]	; 0x6c
   b6270:	f10d 0940 	add.w	r9, sp, #64	; 0x40
   b6274:	aa1a      	add	r2, sp, #104	; 0x68
   b6276:	464b      	mov	r3, r9
   b6278:	ca06      	ldmia	r2, {r1, r2}
   b627a:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b627c:	edcd 8ab2 	vstr	s17, [sp, #712]	; 0x2c8
      lon = lo;
   b6280:	ed8d 8ab3 	vstr	s16, [sp, #716]	; 0x2cc
   b6284:	f7fe faca 	bl	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b6288:	f8df c2c8 	ldr.w	ip, [pc, #712]	; b6554 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x113c>
   b628c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6290:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b6294:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b6298:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   b629c:	9b04      	ldr	r3, [sp, #16]
   b629e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b62a2:	ab9d      	add	r3, sp, #628	; 0x274
   b62a4:	9318      	str	r3, [sp, #96]	; 0x60
   b62a6:	2307      	movs	r3, #7
   b62a8:	9319      	str	r3, [sp, #100]	; 0x64
   b62aa:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b62ae:	4628      	mov	r0, r5
   b62b0:	f7fe ff42 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b62b4:	aa93      	add	r2, sp, #588	; 0x24c
   b62b6:	9216      	str	r2, [sp, #88]	; 0x58
   b62b8:	2346      	movs	r3, #70	; 0x46
   b62ba:	2204      	movs	r2, #4
   b62bc:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b62c0:	9217      	str	r2, [sp, #92]	; 0x5c
   b62c2:	ab16      	add	r3, sp, #88	; 0x58
   b62c4:	e893 0006 	ldmia.w	r3, {r1, r2}
   b62c8:	4640      	mov	r0, r8
   b62ca:	9493      	str	r4, [sp, #588]	; 0x24c
   b62cc:	9496      	str	r4, [sp, #600]	; 0x258
   b62ce:	f7fe ff33 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b62d2:	4658      	mov	r0, fp
   b62d4:	498d      	ldr	r1, [pc, #564]	; (b650c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f4>)
   b62d6:	f7fd ff17 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b62da:	a8a4      	add	r0, sp, #656	; 0x290
   b62dc:	498c      	ldr	r1, [pc, #560]	; (b6510 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f8>)
   b62de:	f7fd ff13 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b62e2:	a8aa      	add	r0, sp, #680	; 0x2a8
   b62e4:	498b      	ldr	r1, [pc, #556]	; (b6514 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10fc>)
   b62e6:	f7fd ff0f 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b62ea:	aba4      	add	r3, sp, #656	; 0x290
   b62ec:	9314      	str	r3, [sp, #80]	; 0x50
   b62ee:	2302      	movs	r3, #2
   b62f0:	9315      	str	r3, [sp, #84]	; 0x54
   b62f2:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   b62f6:	aa14      	add	r2, sp, #80	; 0x50
   b62f8:	4653      	mov	r3, sl
   b62fa:	ca06      	ldmia	r2, {r1, r2}
   b62fc:	a883      	add	r0, sp, #524	; 0x20c
   b62fe:	f7fe fac1 	bl	b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b6302:	4621      	mov	r1, r4
   b6304:	2210      	movs	r2, #16
   b6306:	a88f      	add	r0, sp, #572	; 0x23c
   b6308:	f005 ffa8 	bl	bc25c <memset>
   b630c:	aa8f      	add	r2, sp, #572	; 0x23c
   b630e:	9212      	str	r2, [sp, #72]	; 0x48
   b6310:	2204      	movs	r2, #4
   b6312:	ab12      	add	r3, sp, #72	; 0x48
   b6314:	9213      	str	r2, [sp, #76]	; 0x4c
   b6316:	e893 0006 	ldmia.w	r3, {r1, r2}
   b631a:	4630      	mov	r0, r6
   b631c:	f7fe ff0c 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLine1MBTA = Railway{
   b6320:	ab83      	add	r3, sp, #524	; 0x20c
   b6322:	462a      	mov	r2, r5
   b6324:	a98c      	add	r1, sp, #560	; 0x230
   b6326:	e9cd b300 	strd	fp, r3, [sp]
   b632a:	9602      	str	r6, [sp, #8]
   b632c:	4643      	mov	r3, r8
   b632e:	487a      	ldr	r0, [pc, #488]	; (b6518 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1100>)
   b6330:	f7fe ff82 	bl	b5238 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b6334:	4630      	mov	r0, r6
   b6336:	f7fe fa1b 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b633a:	a883      	add	r0, sp, #524	; 0x20c
   b633c:	f7fe fa39 	bl	b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b6340:	a8aa      	add	r0, sp, #680	; 0x2a8
   b6342:	f004 ffb3 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6346:	a8a4      	add	r0, sp, #656	; 0x290
   b6348:	f004 ffb0 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b634c:	4658      	mov	r0, fp
   b634e:	f004 ffad 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6352:	4640      	mov	r0, r8
   b6354:	f7fe fa0c 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6358:	4628      	mov	r0, r5
   b635a:	f7fe fa09 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b635e:	a88c      	add	r0, sp, #560	; 0x230
   b6360:	f7fe f9f2 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b6364:	4b6d      	ldr	r3, [pc, #436]	; (b651c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1104>)
   b6366:	939d      	str	r3, [sp, #628]	; 0x274
      lon = lo;
   b6368:	4b6d      	ldr	r3, [pc, #436]	; (b6520 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1108>)
   b636a:	939e      	str	r3, [sp, #632]	; 0x278
};
   b636c:	ab9d      	add	r3, sp, #628	; 0x274
   b636e:	6033      	str	r3, [r6, #0]
   b6370:	2302      	movs	r3, #2
   b6372:	6073      	str	r3, [r6, #4]
   b6374:	e896 0006 	ldmia.w	r6, {r1, r2}
   b6378:	ab08      	add	r3, sp, #32
   b637a:	a88f      	add	r0, sp, #572	; 0x23c
      lat = la;
   b637c:	edcd 8a9f 	vstr	s17, [sp, #636]	; 0x27c
      lon = lo;
   b6380:	ed8d 8aa0 	vstr	s16, [sp, #640]	; 0x280
   b6384:	f7fe fa4a 	bl	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b6388:	ab09      	add	r3, sp, #36	; 0x24
   b638a:	9310      	str	r3, [sp, #64]	; 0x40
   b638c:	2301      	movs	r3, #1
   b638e:	9311      	str	r3, [sp, #68]	; 0x44
   b6390:	e899 0006 	ldmia.w	r9, {r1, r2}
   b6394:	260f      	movs	r6, #15
   b6396:	a88c      	add	r0, sp, #560	; 0x230
   b6398:	9609      	str	r6, [sp, #36]	; 0x24
   b639a:	f7fe fecd 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b639e:	2304      	movs	r3, #4
   b63a0:	930f      	str	r3, [sp, #60]	; 0x3c
   b63a2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   b63a6:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b63aa:	4628      	mov	r0, r5
   b63ac:	e9cd 4697 	strd	r4, r6, [sp, #604]	; 0x25c
   b63b0:	e9cd 4499 	strd	r4, r4, [sp, #612]	; 0x264
   b63b4:	f7fe fec0 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b63b8:	a8a4      	add	r0, sp, #656	; 0x290
   b63ba:	4954      	ldr	r1, [pc, #336]	; (b650c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f4>)
   b63bc:	f7fd fea4 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b63c0:	a8b0      	add	r0, sp, #704	; 0x2c0
   b63c2:	4953      	ldr	r1, [pc, #332]	; (b6510 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f8>)
   b63c4:	f7fd fea0 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b63c8:	a8b6      	add	r0, sp, #728	; 0x2d8
   b63ca:	4952      	ldr	r1, [pc, #328]	; (b6514 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10fc>)
   b63cc:	f7fd fe9c 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b63d0:	abb0      	add	r3, sp, #704	; 0x2c0
   b63d2:	930c      	str	r3, [sp, #48]	; 0x30
   b63d4:	2302      	movs	r3, #2
   b63d6:	930d      	str	r3, [sp, #52]	; 0x34
   b63d8:	aa0c      	add	r2, sp, #48	; 0x30
   b63da:	ab07      	add	r3, sp, #28
   b63dc:	ca06      	ldmia	r2, {r1, r2}
   b63de:	4640      	mov	r0, r8
   b63e0:	f7fe fa50 	bl	b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b63e4:	4621      	mov	r1, r4
   b63e6:	2210      	movs	r2, #16
   b63e8:	a893      	add	r0, sp, #588	; 0x24c
   b63ea:	f005 ff37 	bl	bc25c <memset>
   b63ee:	aa93      	add	r2, sp, #588	; 0x24c
   b63f0:	920a      	str	r2, [sp, #40]	; 0x28
   b63f2:	2204      	movs	r2, #4
   b63f4:	ab0a      	add	r3, sp, #40	; 0x28
   b63f6:	920b      	str	r2, [sp, #44]	; 0x2c
   b63f8:	e893 0006 	ldmia.w	r3, {r1, r2}
   b63fc:	a883      	add	r0, sp, #524	; 0x20c
   b63fe:	f7fe fe9b 	bl	b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLine2MBTA = Railway{
   b6402:	ab83      	add	r3, sp, #524	; 0x20c
   b6404:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b6408:	aba4      	add	r3, sp, #656	; 0x290
   b640a:	aa8c      	add	r2, sp, #560	; 0x230
   b640c:	a98f      	add	r1, sp, #572	; 0x23c
   b640e:	9300      	str	r3, [sp, #0]
   b6410:	4844      	ldr	r0, [pc, #272]	; (b6524 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x110c>)
   b6412:	462b      	mov	r3, r5
   b6414:	f7fe ff10 	bl	b5238 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b6418:	a883      	add	r0, sp, #524	; 0x20c
   b641a:	f7fe f9a9 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b641e:	4640      	mov	r0, r8
   b6420:	f7fe f9c7 	bl	b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b6424:	a8b6      	add	r0, sp, #728	; 0x2d8
   b6426:	f004 ff41 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b642a:	a8b0      	add	r0, sp, #704	; 0x2c0
   b642c:	f004 ff3e 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6430:	a8a4      	add	r0, sp, #656	; 0x290
   b6432:	f004 ff3b 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6436:	4628      	mov	r0, r5
   b6438:	f7fe f99a 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b643c:	a88c      	add	r0, sp, #560	; 0x230
   b643e:	f7fe f997 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6442:	a88f      	add	r0, sp, #572	; 0x23c
   b6444:	f7fe f980 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6448:	4b37      	ldr	r3, [pc, #220]	; (b6528 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1110>)
const BleUuid serviceUuid("a73ba101-8192-4a51-b42d-ae9cd14b14a5");
   b644a:	4938      	ldr	r1, [pc, #224]	; (b652c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1114>)
   b644c:	609c      	str	r4, [r3, #8]
   b644e:	e9c3 4400 	strd	r4, r4, [r3]
   b6452:	4b37      	ldr	r3, [pc, #220]	; (b6530 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1118>)
   b6454:	4837      	ldr	r0, [pc, #220]	; (b6534 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x111c>)
   b6456:	609c      	str	r4, [r3, #8]
   b6458:	e9c3 4400 	strd	r4, r4, [r3]
   b645c:	4b36      	ldr	r3, [pc, #216]	; (b6538 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1120>)
   b645e:	4d37      	ldr	r5, [pc, #220]	; (b653c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1124>)
   b6460:	609c      	str	r4, [r3, #8]
   b6462:	e9c3 4400 	strd	r4, r4, [r3]
   b6466:	4b36      	ldr	r3, [pc, #216]	; (b6540 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1128>)
   b6468:	f8df 80c8 	ldr.w	r8, [pc, #200]	; b6534 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x111c>
   b646c:	609c      	str	r4, [r3, #8]
   b646e:	e9c3 4400 	strd	r4, r4, [r3]
   b6472:	4b34      	ldr	r3, [pc, #208]	; (b6544 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x112c>)
   b6474:	e9c3 4400 	strd	r4, r4, [r3]
   b6478:	609c      	str	r4, [r3, #8]
   b647a:	f002 fdbd 	bl	b8ff8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b647e:	4932      	ldr	r1, [pc, #200]	; (b6548 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1130>)
   b6480:	4832      	ldr	r0, [pc, #200]	; (b654c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1134>)
   b6482:	f002 fdb9 	bl	b8ff8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b6486:	4932      	ldr	r1, [pc, #200]	; (b6550 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1138>)
   b6488:	482c      	ldr	r0, [pc, #176]	; (b653c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1124>)
   b648a:	f002 fdb5 	bl	b8ff8 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b648e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6490:	465e      	mov	r6, fp
   b6492:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6494:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b6498:	f8d5 c000 	ldr.w	ip, [r5]
   b649c:	f8c7 c000 	str.w	ip, [r7]
   b64a0:	ad9d      	add	r5, sp, #628	; 0x274
   b64a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b64a4:	46c1      	mov	r9, r8
   b64a6:	9b04      	ldr	r3, [sp, #16]
   b64a8:	f859 a910 	ldr.w	sl, [r9], #-16
   b64ac:	f8c3 a000 	str.w	sl, [r3]
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b64b0:	465d      	mov	r5, fp
   b64b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b64b4:	aea4      	add	r6, sp, #656	; 0x290
   b64b6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b64b8:	f8df e09c 	ldr.w	lr, [pc, #156]	; b6558 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1140>
   b64bc:	f8c6 c000 	str.w	ip, [r6]
        BleUuid sUuid(svcUuid);
   b64c0:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
      constexpr __shared_count() noexcept : _M_pi(0)
   b64c4:	e9ce 4400 	strd	r4, r4, [lr]
   b64c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b64cc:	adb0      	add	r5, sp, #704	; 0x2c0
   b64ce:	e045      	b.n	b655c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1144>
   b64d0:	20037e4c 	.word	0x20037e4c
   b64d4:	42296555 	.word	0x42296555
   b64d8:	c28e30ae 	.word	0xc28e30ae
   b64dc:	42296847 	.word	0x42296847
   b64e0:	c28e2445 	.word	0xc28e2445
   b64e4:	422968cc 	.word	0x422968cc
   b64e8:	c28e2106 	.word	0xc28e2106
   b64ec:	422972cd 	.word	0x422972cd
   b64f0:	c28e1db0 	.word	0xc28e1db0
   b64f4:	42297777 	.word	0x42297777
   b64f8:	c28e1f5e 	.word	0xc28e1f5e
   b64fc:	42297668 	.word	0x42297668
   b6500:	c28e20d5 	.word	0xc28e20d5
   b6504:	42298291 	.word	0x42298291
   b6508:	c28e30ba 	.word	0xc28e30ba
   b650c:	000be4ef 	.word	0x000be4ef
   b6510:	000be599 	.word	0x000be599
   b6514:	000be5a0 	.word	0x000be5a0
   b6518:	2003546c 	.word	0x2003546c
   b651c:	422957f0 	.word	0x422957f0
   b6520:	c28e3351 	.word	0xc28e3351
   b6524:	200354d8 	.word	0x200354d8
   b6528:	20035450 	.word	0x20035450
   b652c:	000be5e4 	.word	0x000be5e4
   b6530:	20035460 	.word	0x20035460
   b6534:	200352bc 	.word	0x200352bc
   b6538:	20037dd4 	.word	0x20037dd4
   b653c:	200352e4 	.word	0x200352e4
   b6540:	200352f8 	.word	0x200352f8
   b6544:	2003e69c 	.word	0x2003e69c
   b6548:	000be609 	.word	0x000be609
   b654c:	200352d0 	.word	0x200352d0
   b6550:	000be62e 	.word	0x000be62e
   b6554:	000be868 	.word	0x000be868
   b6558:	2003e6ac 	.word	0x2003e6ac
   b655c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b655e:	abb0      	add	r3, sp, #704	; 0x2c0
        BleUuid sUuid(svcUuid);
   b6560:	f8c5 a000 	str.w	sl, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b6564:	4670      	mov	r0, lr
   b6566:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b656a:	9300      	str	r3, [sp, #0]
   b656c:	4974      	ldr	r1, [pc, #464]	; (b6740 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1328>)
   b656e:	aba4      	add	r3, sp, #656	; 0x290
   b6570:	f04f 0210 	mov.w	r2, #16
   b6574:	f003 faaa 	bl	b9acc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b6578:	f8df c250 	ldr.w	ip, [pc, #592]	; b67cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13b4>
   b657c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6580:	46de      	mov	lr, fp
   b6582:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b6586:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b658a:	f8dc e000 	ldr.w	lr, [ip]
   b658e:	f8c7 e000 	str.w	lr, [r7]
   b6592:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
   b6596:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b659a:	9b04      	ldr	r3, [sp, #16]
   b659c:	f8d8 9000 	ldr.w	r9, [r8]
   b65a0:	f8c3 9000 	str.w	r9, [r3]
        BleUuid cUuid(charUuid);
   b65a4:	46da      	mov	sl, fp
   b65a6:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b65aa:	f8df 81d8 	ldr.w	r8, [pc, #472]	; b6784 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x136c>
   b65ae:	f50d 7c24 	add.w	ip, sp, #656	; 0x290
   b65b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b65b6:	f8c6 e000 	str.w	lr, [r6]
        BleUuid sUuid(svcUuid);
   b65ba:	ae9d      	add	r6, sp, #628	; 0x274
      constexpr __shared_count() noexcept : _M_pi(0)
   b65bc:	e9c8 4400 	strd	r4, r4, [r8]
   b65c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b65c2:	f50d 7c30 	add.w	ip, sp, #704	; 0x2c0
   b65c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b65ca:	4b5e      	ldr	r3, [pc, #376]	; (b6744 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x132c>)
        BleUuid sUuid(svcUuid);
   b65cc:	f8c5 9000 	str.w	r9, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b65d0:	9301      	str	r3, [sp, #4]
   b65d2:	abb0      	add	r3, sp, #704	; 0x2c0
   b65d4:	f04f 0204 	mov.w	r2, #4
   b65d8:	9402      	str	r4, [sp, #8]
   b65da:	9300      	str	r3, [sp, #0]
   b65dc:	4640      	mov	r0, r8
   b65de:	aba4      	add	r3, sp, #656	; 0x290
   b65e0:	4959      	ldr	r1, [pc, #356]	; (b6748 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1330>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b65e2:	4c5a      	ldr	r4, [pc, #360]	; (b674c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1334>)
   b65e4:	f003 fa72 	bl	b9acc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b65e8:	4959      	ldr	r1, [pc, #356]	; (b6750 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1338>)
   b65ea:	485a      	ldr	r0, [pc, #360]	; (b6754 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x133c>)
   b65ec:	f003 ff91 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
   b65f0:	4859      	ldr	r0, [pc, #356]	; (b6758 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1340>)
   b65f2:	f003 fd9b 	bl	ba12c <_ZN9IPAddressC1Ev>
   b65f6:	4956      	ldr	r1, [pc, #344]	; (b6750 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1338>)
   b65f8:	4858      	ldr	r0, [pc, #352]	; (b675c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1344>)
   b65fa:	f003 ff8a 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
   b65fe:	4954      	ldr	r1, [pc, #336]	; (b6750 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1338>)
   b6600:	4857      	ldr	r0, [pc, #348]	; (b6760 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1348>)
   b6602:	f003 ff86 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b6606:	4952      	ldr	r1, [pc, #328]	; (b6750 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1338>)
   b6608:	4856      	ldr	r0, [pc, #344]	; (b6764 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x134c>)
   b660a:	f003 ff82 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
HttpClient http;
   b660e:	4856      	ldr	r0, [pc, #344]	; (b6768 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1350>)
   b6610:	f001 fa14 	bl	b7a3c <_ZN10HttpClientC1Ev>
   b6614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6618:	9300      	str	r3, [sp, #0]
   b661a:	f242 7210 	movw	r2, #10000	; 0x2710
   b661e:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b6622:	4b52      	ldr	r3, [pc, #328]	; (b676c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1354>)
   b6624:	4620      	mov	r0, r4
   b6626:	f001 fbe1 	bl	b7dec <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b662a:	4b51      	ldr	r3, [pc, #324]	; (b6770 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1358>)
String SSID = "";
   b662c:	4948      	ldr	r1, [pc, #288]	; (b6750 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1338>)
   b662e:	6023      	str	r3, [r4, #0]
   b6630:	4850      	ldr	r0, [pc, #320]	; (b6774 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x135c>)
   b6632:	f003 ff6e 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
String password = "";
   b6636:	4946      	ldr	r1, [pc, #280]	; (b6750 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1338>)
   b6638:	484f      	ldr	r0, [pc, #316]	; (b6778 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1360>)
   b663a:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
   b663e:	ecbd 8b0e 	vpop	{d8-d14}
   b6642:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
String password = "";
   b6646:	f003 bf64 	b.w	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
   b664a:	484b      	ldr	r0, [pc, #300]	; (b6778 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1360>)
   b664c:	f003 ff16 	bl	ba47c <_ZN6StringD1Ev>
String SSID = "";
   b6650:	4848      	ldr	r0, [pc, #288]	; (b6774 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x135c>)
   b6652:	f003 ff13 	bl	ba47c <_ZN6StringD1Ev>
JsonParserStatic<10000, 1000> parser;
   b6656:	483d      	ldr	r0, [pc, #244]	; (b674c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1334>)
   b6658:	f7fd fd2e 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b665c:	4b42      	ldr	r3, [pc, #264]	; (b6768 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1350>)
   b665e:	4a47      	ldr	r2, [pc, #284]	; (b677c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1364>)
	if (_M_pi != nullptr)
   b6660:	699c      	ldr	r4, [r3, #24]
   b6662:	601a      	str	r2, [r3, #0]
   b6664:	b17c      	cbz	r4, b6686 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x126e>
      if (--_M_use_count == 0)
   b6666:	6863      	ldr	r3, [r4, #4]
   b6668:	3b01      	subs	r3, #1
   b666a:	6063      	str	r3, [r4, #4]
   b666c:	b95b      	cbnz	r3, b6686 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x126e>
          _M_dispose();
   b666e:	6823      	ldr	r3, [r4, #0]
   b6670:	4620      	mov	r0, r4
   b6672:	689b      	ldr	r3, [r3, #8]
   b6674:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6676:	68a3      	ldr	r3, [r4, #8]
   b6678:	3b01      	subs	r3, #1
   b667a:	60a3      	str	r3, [r4, #8]
   b667c:	b91b      	cbnz	r3, b6686 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x126e>
            _M_destroy();
   b667e:	6823      	ldr	r3, [r4, #0]
   b6680:	4620      	mov	r0, r4
   b6682:	68db      	ldr	r3, [r3, #12]
   b6684:	4798      	blx	r3
   b6686:	4837      	ldr	r0, [pc, #220]	; (b6764 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x134c>)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b6688:	4c3d      	ldr	r4, [pc, #244]	; (b6780 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1368>)
   b668a:	f003 fef7 	bl	ba47c <_ZN6StringD1Ev>
} http_request_t;
   b668e:	4834      	ldr	r0, [pc, #208]	; (b6760 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1348>)
   b6690:	f003 fef4 	bl	ba47c <_ZN6StringD1Ev>
   b6694:	4831      	ldr	r0, [pc, #196]	; (b675c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1344>)
   b6696:	f003 fef1 	bl	ba47c <_ZN6StringD1Ev>
   b669a:	482e      	ldr	r0, [pc, #184]	; (b6754 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x133c>)
   b669c:	f003 feee 	bl	ba47c <_ZN6StringD1Ev>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b66a0:	4838      	ldr	r0, [pc, #224]	; (b6784 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x136c>)
   b66a2:	f002 fefa 	bl	b949a <_ZN8particle17BleCharacteristicD1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b66a6:	4838      	ldr	r0, [pc, #224]	; (b6788 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1370>)
   b66a8:	f002 fef7 	bl	b949a <_ZN8particle17BleCharacteristicD1Ev>
      }
   b66ac:	4837      	ldr	r0, [pc, #220]	; (b678c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1374>)
   b66ae:	f7fe f85f 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b66b2:	4837      	ldr	r0, [pc, #220]	; (b6790 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1378>)
   b66b4:	f7fe f85c 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
std::vector<Railway> ctaRailways, mbtaRailways;
   b66b8:	4836      	ldr	r0, [pc, #216]	; (b6794 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x137c>)
   b66ba:	f7fe fcf8 	bl	b50ae <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b66be:	4836      	ldr	r0, [pc, #216]	; (b6798 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1380>)
   b66c0:	f7fe fcf5 	bl	b50ae <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
	__destroy(__first, __last);
   b66c4:	e9d4 0100 	ldrd	r0, r1, [r4]
   b66c8:	f7fe fcff 	bl	b50ca <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   b66cc:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b66ce:	b118      	cbz	r0, b66d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x12c0>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b66d0:	68a1      	ldr	r1, [r4, #8]
   b66d2:	1a09      	subs	r1, r1, r0
   b66d4:	f7fd fce5 	bl	b40a2 <_ZdlPvj>
Railway greenLine2MBTA = Railway{
   b66d8:	4830      	ldr	r0, [pc, #192]	; (b679c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1384>)
   b66da:	f7fe fcbd 	bl	b5058 <_ZN7RailwayD1Ev>
Railway greenLine1MBTA = Railway{
   b66de:	4830      	ldr	r0, [pc, #192]	; (b67a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1388>)
   b66e0:	f7fe fcba 	bl	b5058 <_ZN7RailwayD1Ev>
Railway orangeLineMBTA = Railway{
   b66e4:	482f      	ldr	r0, [pc, #188]	; (b67a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x138c>)
   b66e6:	f7fe fcb7 	bl	b5058 <_ZN7RailwayD1Ev>
Railway blueLineMBTA = Railway{
   b66ea:	482f      	ldr	r0, [pc, #188]	; (b67a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1390>)
   b66ec:	f7fe fcb4 	bl	b5058 <_ZN7RailwayD1Ev>
Railway redLineMBTA = Railway{
   b66f0:	482e      	ldr	r0, [pc, #184]	; (b67ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1394>)
   b66f2:	f7fe fcb1 	bl	b5058 <_ZN7RailwayD1Ev>
Railway pinkLineCTA = Railway(
   b66f6:	482e      	ldr	r0, [pc, #184]	; (b67b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1398>)
   b66f8:	f7fe fcae 	bl	b5058 <_ZN7RailwayD1Ev>
Railway purpleLineCTA = Railway(
   b66fc:	482d      	ldr	r0, [pc, #180]	; (b67b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x139c>)
   b66fe:	f7fe fcab 	bl	b5058 <_ZN7RailwayD1Ev>
Railway orangeLineCTA = Railway(
   b6702:	482d      	ldr	r0, [pc, #180]	; (b67b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13a0>)
   b6704:	f7fe fca8 	bl	b5058 <_ZN7RailwayD1Ev>
Railway greenLineCTA = Railway(
   b6708:	482c      	ldr	r0, [pc, #176]	; (b67bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13a4>)
   b670a:	f7fe fca5 	bl	b5058 <_ZN7RailwayD1Ev>
Railway brownLineCTA = Railway(
   b670e:	482c      	ldr	r0, [pc, #176]	; (b67c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13a8>)
   b6710:	f7fe fca2 	bl	b5058 <_ZN7RailwayD1Ev>
Railway blueLineCTA = Railway(
   b6714:	482b      	ldr	r0, [pc, #172]	; (b67c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13ac>)
   b6716:	f7fe fc9f 	bl	b5058 <_ZN7RailwayD1Ev>
Railway redLineCTA = Railway(
   b671a:	482b      	ldr	r0, [pc, #172]	; (b67c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13b0>)
   b671c:	f7fe fc9c 	bl	b5058 <_ZN7RailwayD1Ev>
        if (wakeupSource_) {
   b6720:	6828      	ldr	r0, [r5, #0]
   b6722:	b138      	cbz	r0, b6734 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x131c>
   b6724:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
   b6728:	ecbd 8b0e 	vpop	{d8-d14}
   b672c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            free(wakeupSource_);
   b6730:	f002 ba0e 	b.w	b8b50 <free>
   b6734:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
   b6738:	ecbd 8b0e 	vpop	{d8-d14}
   b673c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6740:	000be653 	.word	0x000be653
   b6744:	000b4959 	.word	0x000b4959
   b6748:	000be656 	.word	0x000be656
   b674c:	20037eb8 	.word	0x20037eb8
   b6750:	000be8be 	.word	0x000be8be
   b6754:	2003e634 	.word	0x2003e634
   b6758:	2003e644 	.word	0x2003e644
   b675c:	2003e65c 	.word	0x2003e65c
   b6760:	2003e670 	.word	0x2003e670
   b6764:	2003e684 	.word	0x2003e684
   b6768:	200355b8 	.word	0x200355b8
   b676c:	2003a5f4 	.word	0x2003a5f4
   b6770:	000be714 	.word	0x000be714
   b6774:	200352a0 	.word	0x200352a0
   b6778:	2003e474 	.word	0x2003e474
   b677c:	000bebc8 	.word	0x000bebc8
   b6780:	20035450 	.word	0x20035450
   b6784:	2003e694 	.word	0x2003e694
   b6788:	2003e6ac 	.word	0x2003e6ac
   b678c:	2003e69c 	.word	0x2003e69c
   b6790:	200352f8 	.word	0x200352f8
   b6794:	20037dd4 	.word	0x20037dd4
   b6798:	20035460 	.word	0x20035460
   b679c:	200354d8 	.word	0x200354d8
   b67a0:	2003546c 	.word	0x2003546c
   b67a4:	20037e4c 	.word	0x20037e4c
   b67a8:	20035374 	.word	0x20035374
   b67ac:	2003e5c8 	.word	0x2003e5c8
   b67b0:	2003e484 	.word	0x2003e484
   b67b4:	2003e4f0 	.word	0x2003e4f0
   b67b8:	20037de0 	.word	0x20037de0
   b67bc:	20035544 	.word	0x20035544
   b67c0:	200353e0 	.word	0x200353e0
   b67c4:	20035308 	.word	0x20035308
   b67c8:	2003e55c 	.word	0x2003e55c
   b67cc:	200352d0 	.word	0x200352d0

000b67d0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b67d0:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b67d2:	b510      	push	{r4, lr}
   b67d4:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b67d6:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b67da:	d005      	beq.n	b67e8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b67dc:	4601      	mov	r1, r0
   b67de:	4622      	mov	r2, r4
   b67e0:	4618      	mov	r0, r3
   b67e2:	f005 fd21 	bl	bc228 <memmove>
   b67e6:	4603      	mov	r3, r0
	}
   b67e8:	1918      	adds	r0, r3, r4
   b67ea:	bd10      	pop	{r4, pc}

000b67ec <_ZN7RailwayC1ERKS_>:
class Railway{
   b67ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b67f0:	460d      	mov	r5, r1
   b67f2:	4604      	mov	r4, r0
   b67f4:	f7fe f87a 	bl	b48ec <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b67f8:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b67fc:	2600      	movs	r6, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b67fe:	1ac9      	subs	r1, r1, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6800:	e9c4 6603 	strd	r6, r6, [r4, #12]
   b6804:	6166      	str	r6, [r4, #20]
      { _M_create_storage(__n); }
   b6806:	1089      	asrs	r1, r1, #2
   b6808:	f104 000c 	add.w	r0, r4, #12
   b680c:	f7fe fc04 	bl	b5018 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
			      _Category>::__copy_m(__first, __last, __result);
   b6810:	68e2      	ldr	r2, [r4, #12]
   b6812:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
   b6816:	f7ff ffdb 	bl	b67d0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b681a:	f105 0118 	add.w	r1, r5, #24
	this->_M_impl._M_finish =
   b681e:	6120      	str	r0, [r4, #16]
   b6820:	f104 0018 	add.w	r0, r4, #24
   b6824:	f7fe fc6e 	bl	b5104 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6828:	e9d5 3709 	ldrd	r3, r7, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b682c:	4826      	ldr	r0, [pc, #152]	; (b68c8 <_ZN7RailwayC1ERKS_+0xdc>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b682e:	62e6      	str	r6, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6830:	1aff      	subs	r7, r7, r3
   b6832:	10bb      	asrs	r3, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6834:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6838:	4358      	muls	r0, r3
   b683a:	f7fd fc53 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b683e:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b6842:	4407      	add	r7, r0
   b6844:	62e7      	str	r7, [r4, #44]	; 0x2c
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b6846:	e9d5 7809 	ldrd	r7, r8, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b684a:	4606      	mov	r6, r0
   b684c:	45b8      	cmp	r8, r7
   b684e:	d007      	beq.n	b6860 <_ZN7RailwayC1ERKS_+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6850:	b11e      	cbz	r6, b685a <_ZN7RailwayC1ERKS_+0x6e>
   b6852:	4639      	mov	r1, r7
   b6854:	4630      	mov	r0, r6
   b6856:	f7fe fc55 	bl	b5104 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b685a:	360c      	adds	r6, #12
   b685c:	370c      	adds	r7, #12
   b685e:	e7f5      	b.n	b684c <_ZN7RailwayC1ERKS_+0x60>
	this->_M_impl._M_finish =
   b6860:	62a6      	str	r6, [r4, #40]	; 0x28
   b6862:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b6866:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b686a:	f7fd fcb3 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b686e:	e9d5 3712 	ldrd	r3, r7, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6872:	4815      	ldr	r0, [pc, #84]	; (b68c8 <_ZN7RailwayC1ERKS_+0xdc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6874:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6876:	2300      	movs	r3, #0
   b6878:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b687c:	6523      	str	r3, [r4, #80]	; 0x50
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b687e:	10fb      	asrs	r3, r7, #3
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6880:	4358      	muls	r0, r3
   b6882:	f7fd fc7b 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b6886:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b688a:	4407      	add	r7, r0
   b688c:	6527      	str	r7, [r4, #80]	; 0x50
   b688e:	e9d5 7812 	ldrd	r7, r8, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6892:	4606      	mov	r6, r0
   b6894:	45b8      	cmp	r8, r7
   b6896:	d007      	beq.n	b68a8 <_ZN7RailwayC1ERKS_+0xbc>
   b6898:	b11e      	cbz	r6, b68a2 <_ZN7RailwayC1ERKS_+0xb6>
   b689a:	4639      	mov	r1, r7
   b689c:	4630      	mov	r0, r6
   b689e:	f7fd fc99 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b68a2:	3618      	adds	r6, #24
   b68a4:	3718      	adds	r7, #24
   b68a6:	e7f5      	b.n	b6894 <_ZN7RailwayC1ERKS_+0xa8>
	this->_M_impl._M_finish =
   b68a8:	64e6      	str	r6, [r4, #76]	; 0x4c
   b68aa:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b68ac:	6563      	str	r3, [r4, #84]	; 0x54
   b68ae:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b68b0:	65a3      	str	r3, [r4, #88]	; 0x58
   b68b2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b68b4:	65e3      	str	r3, [r4, #92]	; 0x5c
   b68b6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b68b8:	6623      	str	r3, [r4, #96]	; 0x60
   b68ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b68bc:	6663      	str	r3, [r4, #100]	; 0x64
   b68be:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b68c0:	66a3      	str	r3, [r4, #104]	; 0x68
   b68c2:	4620      	mov	r0, r4
   b68c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b68c8:	aaaaaaab 	.word	0xaaaaaaab

000b68cc <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b68cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b68ce:	e9d1 3700 	ldrd	r3, r7, [r1]
   b68d2:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b68d4:	2300      	movs	r3, #0
   b68d6:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   b68da:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b68dc:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b68de:	480d      	ldr	r0, [pc, #52]	; (b6914 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x48>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b68e0:	10bb      	asrs	r3, r7, #2
	this->_M_impl._M_start = this->_M_allocate(__n);
   b68e2:	4358      	muls	r0, r3
      vector(const vector& __x)
   b68e4:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b68e6:	f7fd fc37 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b68ea:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b68ee:	4407      	add	r7, r0
   b68f0:	60a7      	str	r7, [r4, #8]
   b68f2:	e9d6 6700 	ldrd	r6, r7, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b68f6:	4605      	mov	r5, r0
   b68f8:	42b7      	cmp	r7, r6
   b68fa:	d007      	beq.n	b690c <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x40>
   b68fc:	b11d      	cbz	r5, b6906 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x3a>
   b68fe:	4631      	mov	r1, r6
   b6900:	4628      	mov	r0, r5
   b6902:	f7ff ff73 	bl	b67ec <_ZN7RailwayC1ERKS_>
   b6906:	356c      	adds	r5, #108	; 0x6c
   b6908:	366c      	adds	r6, #108	; 0x6c
   b690a:	e7f5      	b.n	b68f8 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b690c:	6065      	str	r5, [r4, #4]
      }
   b690e:	4620      	mov	r0, r4
   b6910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6912:	bf00      	nop
   b6914:	684bda13 	.word	0x684bda13

000b6918 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b6918:	b570      	push	{r4, r5, r6, lr}
   b691a:	4605      	mov	r5, r0
   b691c:	460e      	mov	r6, r1
   b691e:	4614      	mov	r4, r2
	      for (; __first != __last; ++__first, (void)++__cur)
   b6920:	42b5      	cmp	r5, r6
   b6922:	d00f      	beq.n	b6944 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x2c>
   b6924:	b15c      	cbz	r4, b693e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x26>
   b6926:	4629      	mov	r1, r5
   b6928:	4620      	mov	r0, r4
   b692a:	f7ff ffcf 	bl	b68cc <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b692e:	f105 010c 	add.w	r1, r5, #12
   b6932:	f104 000c 	add.w	r0, r4, #12
   b6936:	f7fd fc4d 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b693a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b693c:	6263      	str	r3, [r4, #36]	; 0x24
   b693e:	3528      	adds	r5, #40	; 0x28
   b6940:	3428      	adds	r4, #40	; 0x28
   b6942:	e7ed      	b.n	b6920 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x8>
	}
   b6944:	4620      	mov	r0, r4
   b6946:	bd70      	pop	{r4, r5, r6, pc}

000b6948 <_ZN7RailwayaSERKS_.isra.0>:
   b6948:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b694c:	4604      	mov	r4, r0
   b694e:	460d      	mov	r5, r1
   b6950:	f7fd fc7c 	bl	b424c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
   b6954:	f105 020c 	add.w	r2, r5, #12
   b6958:	f104 030c 	add.w	r3, r4, #12
      if (&__x != this)
   b695c:	429a      	cmp	r2, r3
   b695e:	d025      	beq.n	b69ac <_ZN7RailwayaSERKS_.isra.0+0x64>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6960:	e9d5 8103 	ldrd	r8, r1, [r5, #12]
			 - this->_M_impl._M_start); }
   b6964:	68e2      	ldr	r2, [r4, #12]
   b6966:	6963      	ldr	r3, [r4, #20]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6968:	eba1 0608 	sub.w	r6, r1, r8
			 - this->_M_impl._M_start); }
   b696c:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b696e:	429e      	cmp	r6, r3
   b6970:	d94a      	bls.n	b6a08 <_ZN7RailwayaSERKS_.isra.0+0xc0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6972:	2e00      	cmp	r6, #0
   b6974:	d046      	beq.n	b6a04 <_ZN7RailwayaSERKS_.isra.0+0xbc>
	if (__n > this->_M_max_size())
   b6976:	4b5d      	ldr	r3, [pc, #372]	; (b6aec <_ZN7RailwayaSERKS_.isra.0+0x1a4>)
   b6978:	429e      	cmp	r6, r3
   b697a:	d901      	bls.n	b6980 <_ZN7RailwayaSERKS_.isra.0+0x38>
	  std::__throw_bad_alloc();
   b697c:	f004 fc5e 	bl	bb23c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6980:	4630      	mov	r0, r6
   b6982:	9101      	str	r1, [sp, #4]
   b6984:	f7fd fb87 	bl	b4096 <_Znwj>
   b6988:	9901      	ldr	r1, [sp, #4]
   b698a:	4607      	mov	r7, r0
   b698c:	463a      	mov	r2, r7
   b698e:	4640      	mov	r0, r8
   b6990:	f7ff ff1e 	bl	b67d0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b6994:	68e0      	ldr	r0, [r4, #12]
	if (__p)
   b6996:	b118      	cbz	r0, b69a0 <_ZN7RailwayaSERKS_.isra.0+0x58>
			    - this->_M_impl._M_start);
   b6998:	6961      	ldr	r1, [r4, #20]
	::operator delete(__p
   b699a:	1a09      	subs	r1, r1, r0
   b699c:	f7fd fb81 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b69a0:	60e7      	str	r7, [r4, #12]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b69a2:	4437      	add	r7, r6
   b69a4:	6167      	str	r7, [r4, #20]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b69a6:	68e3      	ldr	r3, [r4, #12]
   b69a8:	4433      	add	r3, r6
   b69aa:	6123      	str	r3, [r4, #16]
   b69ac:	f105 0118 	add.w	r1, r5, #24
   b69b0:	f104 0018 	add.w	r0, r4, #24
   b69b4:	f7fe fbea 	bl	b518c <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
   b69b8:	f105 0324 	add.w	r3, r5, #36	; 0x24
   b69bc:	f104 0224 	add.w	r2, r4, #36	; 0x24
      if (&__x != this)
   b69c0:	4293      	cmp	r3, r2
   b69c2:	d045      	beq.n	b6a50 <_ZN7RailwayaSERKS_.isra.0+0x108>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b69c4:	e9d5 6a09 	ldrd	r6, sl, [r5, #36]	; 0x24
			 - this->_M_impl._M_start); }
   b69c8:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   b69cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b69ce:	ebaa 0806 	sub.w	r8, sl, r6
			 - this->_M_impl._M_start); }
   b69d2:	eba3 0309 	sub.w	r3, r3, r9
	  if (__xlen > capacity())
   b69d6:	4543      	cmp	r3, r8
   b69d8:	d255      	bcs.n	b6a86 <_ZN7RailwayaSERKS_.isra.0+0x13e>
	  pointer __result = this->_M_allocate(__n);
   b69da:	4845      	ldr	r0, [pc, #276]	; (b6af0 <_ZN7RailwayaSERKS_.isra.0+0x1a8>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b69dc:	ea4f 03a8 	mov.w	r3, r8, asr #2
	  pointer __result = this->_M_allocate(__n);
   b69e0:	4358      	muls	r0, r3
   b69e2:	f7fd fb7f 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b69e6:	4607      	mov	r7, r0
	  _ForwardIterator __cur = __result;
   b69e8:	4681      	mov	r9, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b69ea:	45b2      	cmp	sl, r6
   b69ec:	d020      	beq.n	b6a30 <_ZN7RailwayaSERKS_.isra.0+0xe8>
   b69ee:	f1b9 0f00 	cmp.w	r9, #0
   b69f2:	d003      	beq.n	b69fc <_ZN7RailwayaSERKS_.isra.0+0xb4>
   b69f4:	4631      	mov	r1, r6
   b69f6:	4648      	mov	r0, r9
   b69f8:	f7fe fb84 	bl	b5104 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b69fc:	f109 090c 	add.w	r9, r9, #12
   b6a00:	360c      	adds	r6, #12
   b6a02:	e7f2      	b.n	b69ea <_ZN7RailwayaSERKS_.isra.0+0xa2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6a04:	4637      	mov	r7, r6
   b6a06:	e7c1      	b.n	b698c <_ZN7RailwayaSERKS_.isra.0+0x44>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a08:	6923      	ldr	r3, [r4, #16]
   b6a0a:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b6a0c:	429e      	cmp	r6, r3
   b6a0e:	d803      	bhi.n	b6a18 <_ZN7RailwayaSERKS_.isra.0+0xd0>
   b6a10:	4640      	mov	r0, r8
   b6a12:	f7ff fedd 	bl	b67d0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
    { return std::uninitialized_copy(__first, __last, __result); }
   b6a16:	e7c6      	b.n	b69a6 <_ZN7RailwayaSERKS_.isra.0+0x5e>
   b6a18:	eb08 0103 	add.w	r1, r8, r3
   b6a1c:	4640      	mov	r0, r8
   b6a1e:	f7ff fed7 	bl	b67d0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b6a22:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
   b6a26:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
   b6a2a:	1a10      	subs	r0, r2, r0
   b6a2c:	4418      	add	r0, r3
   b6a2e:	e7f0      	b.n	b6a12 <_ZN7RailwayaSERKS_.isra.0+0xca>
	__destroy(__first, __last);
   b6a30:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b6a34:	f7fe fb05 	bl	b5042 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	      _M_deallocate(this->_M_impl._M_start,
   b6a38:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b6a3a:	b118      	cbz	r0, b6a44 <_ZN7RailwayaSERKS_.isra.0+0xfc>
			    - this->_M_impl._M_start);
   b6a3c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b6a3e:	1a09      	subs	r1, r1, r0
   b6a40:	f7fd fb2f 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b6a44:	6267      	str	r7, [r4, #36]	; 0x24
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b6a46:	4447      	add	r7, r8
   b6a48:	62e7      	str	r7, [r4, #44]	; 0x2c
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b6a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b6a4c:	4443      	add	r3, r8
   b6a4e:	62a3      	str	r3, [r4, #40]	; 0x28
	this->_M_assign(__str);
   b6a50:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b6a54:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b6a58:	f004 fc46 	bl	bb2e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b6a5c:	f105 0148 	add.w	r1, r5, #72	; 0x48
   b6a60:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b6a64:	f7fd fc44 	bl	b42f0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
   b6a68:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b6a6a:	6563      	str	r3, [r4, #84]	; 0x54
   b6a6c:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b6a6e:	65a3      	str	r3, [r4, #88]	; 0x58
   b6a70:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b6a72:	65e3      	str	r3, [r4, #92]	; 0x5c
   b6a74:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b6a76:	6623      	str	r3, [r4, #96]	; 0x60
   b6a78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b6a7a:	6663      	str	r3, [r4, #100]	; 0x64
   b6a7c:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b6a7e:	66a3      	str	r3, [r4, #104]	; 0x68
   b6a80:	b002      	add	sp, #8
   b6a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a86:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   b6a88:	eba7 0709 	sub.w	r7, r7, r9
	  else if (size() >= __xlen)
   b6a8c:	45b8      	cmp	r8, r7
   b6a8e:	d80d      	bhi.n	b6aac <_ZN7RailwayaSERKS_.isra.0+0x164>
   b6a90:	4630      	mov	r0, r6
   b6a92:	464a      	mov	r2, r9
   b6a94:	4651      	mov	r1, sl
   b6a96:	f7fe fbb1 	bl	b51fc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      : _M_current(__i) { }
   b6a9a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b6a9c:	4606      	mov	r6, r0
	  for (; __first != __last; ++__first)
   b6a9e:	42b7      	cmp	r7, r6
   b6aa0:	d0d3      	beq.n	b6a4a <_ZN7RailwayaSERKS_.isra.0+0x102>
      }
   b6aa2:	4630      	mov	r0, r6
   b6aa4:	f7fd fe64 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b6aa8:	360c      	adds	r6, #12
	return *this;
   b6aaa:	e7f8      	b.n	b6a9e <_ZN7RailwayaSERKS_.isra.0+0x156>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6aac:	4b10      	ldr	r3, [pc, #64]	; (b6af0 <_ZN7RailwayaSERKS_.isra.0+0x1a8>)
   b6aae:	10bf      	asrs	r7, r7, #2
   b6ab0:	435f      	muls	r7, r3
   b6ab2:	2f00      	cmp	r7, #0
   b6ab4:	dd08      	ble.n	b6ac8 <_ZN7RailwayaSERKS_.isra.0+0x180>
	      *__result = *__first;
   b6ab6:	4631      	mov	r1, r6
   b6ab8:	4648      	mov	r0, r9
   b6aba:	f7fe fb67 	bl	b518c <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b6abe:	360c      	adds	r6, #12
	      ++__result;
   b6ac0:	f109 090c 	add.w	r9, r9, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6ac4:	3f01      	subs	r7, #1
   b6ac6:	e7f4      	b.n	b6ab2 <_ZN7RailwayaSERKS_.isra.0+0x16a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6ac8:	e9d4 6709 	ldrd	r6, r7, [r4, #36]	; 0x24
   b6acc:	1bb9      	subs	r1, r7, r6
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6ace:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					  __x._M_impl._M_finish,
   b6ad0:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6ad4:	440e      	add	r6, r1
	      for (; __first != __last; ++__first, (void)++__cur)
   b6ad6:	45b1      	cmp	r9, r6
   b6ad8:	d0b7      	beq.n	b6a4a <_ZN7RailwayaSERKS_.isra.0+0x102>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6ada:	b11f      	cbz	r7, b6ae4 <_ZN7RailwayaSERKS_.isra.0+0x19c>
   b6adc:	4631      	mov	r1, r6
   b6ade:	4638      	mov	r0, r7
   b6ae0:	f7fe fb10 	bl	b5104 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b6ae4:	360c      	adds	r6, #12
   b6ae6:	370c      	adds	r7, #12
   b6ae8:	e7f5      	b.n	b6ad6 <_ZN7RailwayaSERKS_.isra.0+0x18e>
   b6aea:	bf00      	nop
   b6aec:	7ffffffc 	.word	0x7ffffffc
   b6af0:	aaaaaaab 	.word	0xaaaaaaab

000b6af4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b6af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6af8:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6afa:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6afc:	480b      	ldr	r0, [pc, #44]	; (b6b2c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x38>)
   b6afe:	10a4      	asrs	r4, r4, #2
   b6b00:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6b02:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6b04:	4627      	mov	r7, r4
   b6b06:	4690      	mov	r8, r2
   b6b08:	2f00      	cmp	r7, #0
   b6b0a:	dd08      	ble.n	b6b1e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x2a>
	      *__result = *__first;
   b6b0c:	4629      	mov	r1, r5
   b6b0e:	4640      	mov	r0, r8
   b6b10:	f7ff ff1a 	bl	b6948 <_ZN7RailwayaSERKS_.isra.0>
	      ++__first;
   b6b14:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b6b16:	f108 086c 	add.w	r8, r8, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6b1a:	3f01      	subs	r7, #1
   b6b1c:	e7f4      	b.n	b6b08 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x14>
	  return __result;
   b6b1e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b6b22:	206c      	movs	r0, #108	; 0x6c
   b6b24:	fb00 6004 	mla	r0, r0, r4, r6
   b6b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6b2c:	684bda13 	.word	0x684bda13

000b6b30 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>:
      if (&__x != this)
   b6b30:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b6b32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6b36:	4604      	mov	r4, r0
   b6b38:	460f      	mov	r7, r1
      if (&__x != this)
   b6b3a:	d02c      	beq.n	b6b96 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x66>
   b6b3c:	e9d1 5a00 	ldrd	r5, sl, [r1]
			 - this->_M_impl._M_start); }
   b6b40:	f8d0 9000 	ldr.w	r9, [r0]
   b6b44:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6b46:	ebaa 0805 	sub.w	r8, sl, r5
			 - this->_M_impl._M_start); }
   b6b4a:	eba3 0309 	sub.w	r3, r3, r9
	  if (__xlen > capacity())
   b6b4e:	4543      	cmp	r3, r8
   b6b50:	d223      	bcs.n	b6b9a <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x6a>
	  pointer __result = this->_M_allocate(__n);
   b6b52:	482a      	ldr	r0, [pc, #168]	; (b6bfc <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xcc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6b54:	ea4f 03a8 	mov.w	r3, r8, asr #2
	  pointer __result = this->_M_allocate(__n);
   b6b58:	4358      	muls	r0, r3
   b6b5a:	f7fd fafd 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
   b6b5e:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b6b60:	4607      	mov	r7, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b6b62:	45aa      	cmp	sl, r5
   b6b64:	d007      	beq.n	b6b76 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x46>
   b6b66:	b11f      	cbz	r7, b6b70 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x40>
   b6b68:	4629      	mov	r1, r5
   b6b6a:	4638      	mov	r0, r7
   b6b6c:	f7ff fe3e 	bl	b67ec <_ZN7RailwayC1ERKS_>
   b6b70:	376c      	adds	r7, #108	; 0x6c
   b6b72:	356c      	adds	r5, #108	; 0x6c
   b6b74:	e7f5      	b.n	b6b62 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x32>
	__destroy(__first, __last);
   b6b76:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6b7a:	f7fe fa8d 	bl	b5098 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	      _M_deallocate(this->_M_impl._M_start,
   b6b7e:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6b80:	b118      	cbz	r0, b6b8a <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x5a>
			    - this->_M_impl._M_start);
   b6b82:	68a1      	ldr	r1, [r4, #8]
   b6b84:	1a09      	subs	r1, r1, r0
   b6b86:	f7fd fa8c 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b6b8a:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b6b8c:	4446      	add	r6, r8
   b6b8e:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b6b90:	6823      	ldr	r3, [r4, #0]
   b6b92:	4443      	add	r3, r8
   b6b94:	6063      	str	r3, [r4, #4]
    }
   b6b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6b9a:	6846      	ldr	r6, [r0, #4]
   b6b9c:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b6ba0:	45b0      	cmp	r8, r6
   b6ba2:	d80d      	bhi.n	b6bc0 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x90>
			      _Category>::__copy_m(__first, __last, __result);
   b6ba4:	4628      	mov	r0, r5
   b6ba6:	464a      	mov	r2, r9
   b6ba8:	4651      	mov	r1, sl
   b6baa:	f7ff ffa3 	bl	b6af4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      : _M_current(__i) { }
   b6bae:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b6bb0:	4605      	mov	r5, r0
	  for (; __first != __last; ++__first)
   b6bb2:	42ae      	cmp	r6, r5
   b6bb4:	d0ec      	beq.n	b6b90 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x60>
      __pointer->~_Tp();
   b6bb6:	4628      	mov	r0, r5
   b6bb8:	f7fe fa4e 	bl	b5058 <_ZN7RailwayD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b6bbc:	356c      	adds	r5, #108	; 0x6c
	return *this;
   b6bbe:	e7f8      	b.n	b6bb2 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x82>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6bc0:	4b0e      	ldr	r3, [pc, #56]	; (b6bfc <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xcc>)
   b6bc2:	10b6      	asrs	r6, r6, #2
   b6bc4:	435e      	muls	r6, r3
   b6bc6:	2e00      	cmp	r6, #0
   b6bc8:	dd08      	ble.n	b6bdc <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xac>
	      *__result = *__first;
   b6bca:	4629      	mov	r1, r5
   b6bcc:	4648      	mov	r0, r9
   b6bce:	f7ff febb 	bl	b6948 <_ZN7RailwayaSERKS_.isra.0>
	      ++__first;
   b6bd2:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b6bd4:	f109 096c 	add.w	r9, r9, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6bd8:	3e01      	subs	r6, #1
   b6bda:	e7f4      	b.n	b6bc6 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x96>
   b6bdc:	e9d4 5600 	ldrd	r5, r6, [r4]
   b6be0:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6be2:	683d      	ldr	r5, [r7, #0]
					  __x._M_impl._M_finish,
   b6be4:	687f      	ldr	r7, [r7, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6be6:	440d      	add	r5, r1
   b6be8:	42af      	cmp	r7, r5
   b6bea:	d0d1      	beq.n	b6b90 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x60>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6bec:	b11e      	cbz	r6, b6bf6 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xc6>
   b6bee:	4629      	mov	r1, r5
   b6bf0:	4630      	mov	r0, r6
   b6bf2:	f7ff fdfb 	bl	b67ec <_ZN7RailwayC1ERKS_>
   b6bf6:	356c      	adds	r5, #108	; 0x6c
   b6bf8:	366c      	adds	r6, #108	; 0x6c
   b6bfa:	e7f5      	b.n	b6be8 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xb8>
   b6bfc:	684bda13 	.word	0x684bda13

000b6c00 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b6c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6c04:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6c06:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6c08:	4810      	ldr	r0, [pc, #64]	; (b6c4c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x4c>)
   b6c0a:	10e4      	asrs	r4, r4, #3
   b6c0c:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6c0e:	4617      	mov	r7, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6c10:	46a0      	mov	r8, r4
   b6c12:	4616      	mov	r6, r2
   b6c14:	f1b8 0f00 	cmp.w	r8, #0
   b6c18:	dd10      	ble.n	b6c3c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x3c>
   b6c1a:	4629      	mov	r1, r5
   b6c1c:	4630      	mov	r0, r6
   b6c1e:	f7ff ff87 	bl	b6b30 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
   b6c22:	f105 010c 	add.w	r1, r5, #12
   b6c26:	f106 000c 	add.w	r0, r6, #12
   b6c2a:	f004 fb5d 	bl	bb2e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b6c2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b6c30:	6273      	str	r3, [r6, #36]	; 0x24
	      ++__first;
   b6c32:	3528      	adds	r5, #40	; 0x28
	      ++__result;
   b6c34:	3628      	adds	r6, #40	; 0x28
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6c36:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6c3a:	e7eb      	b.n	b6c14 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x14>
	  return __result;
   b6c3c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b6c40:	2028      	movs	r0, #40	; 0x28
   b6c42:	fb00 7004 	mla	r0, r0, r4, r7
   b6c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6c4a:	bf00      	nop
   b6c4c:	cccccccd 	.word	0xcccccccd

000b6c50 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>:
      vector<_Tp, _Alloc>::
   b6c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      return __last - __first;
   b6c54:	eba2 0801 	sub.w	r8, r2, r1
			 - this->_M_impl._M_start); }
   b6c58:	6883      	ldr	r3, [r0, #8]
   b6c5a:	4617      	mov	r7, r2
   b6c5c:	6802      	ldr	r2, [r0, #0]
   b6c5e:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b6c60:	4598      	cmp	r8, r3
      vector<_Tp, _Alloc>::
   b6c62:	4604      	mov	r4, r0
   b6c64:	460e      	mov	r6, r1
	if (__len > capacity())
   b6c66:	d92a      	bls.n	b6cbe <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6e>
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b6c68:	4b26      	ldr	r3, [pc, #152]	; (b6d04 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xb4>)
   b6c6a:	4598      	cmp	r8, r3
   b6c6c:	d902      	bls.n	b6c74 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x24>
	  __throw_length_error(
   b6c6e:	4826      	ldr	r0, [pc, #152]	; (b6d08 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xb8>)
   b6c70:	f004 faea 	bl	bb248 <_ZSt20__throw_length_errorPKc>
	  pointer __result = this->_M_allocate(__n);
   b6c74:	4825      	ldr	r0, [pc, #148]	; (b6d0c <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xbc>)
   b6c76:	ea4f 03a8 	mov.w	r3, r8, asr #2
   b6c7a:	4358      	muls	r0, r3
   b6c7c:	f7fd fa6c 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
   b6c80:	4605      	mov	r5, r0
	  _ForwardIterator __cur = __result;
   b6c82:	4681      	mov	r9, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b6c84:	42b7      	cmp	r7, r6
   b6c86:	d00a      	beq.n	b6c9e <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x4e>
   b6c88:	f1b9 0f00 	cmp.w	r9, #0
   b6c8c:	d003      	beq.n	b6c96 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x46>
   b6c8e:	4631      	mov	r1, r6
   b6c90:	4648      	mov	r0, r9
   b6c92:	f7ff fdab 	bl	b67ec <_ZN7RailwayC1ERKS_>
   b6c96:	366c      	adds	r6, #108	; 0x6c
   b6c98:	f109 096c 	add.w	r9, r9, #108	; 0x6c
   b6c9c:	e7f2      	b.n	b6c84 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x34>
	__destroy(__first, __last);
   b6c9e:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6ca2:	f7fe f9f9 	bl	b5098 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	    _M_deallocate(this->_M_impl._M_start,
   b6ca6:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6ca8:	b118      	cbz	r0, b6cb2 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x62>
			  - this->_M_impl._M_start);
   b6caa:	68a1      	ldr	r1, [r4, #8]
   b6cac:	1a09      	subs	r1, r1, r0
   b6cae:	f7fd f9f8 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
   b6cb2:	6025      	str	r5, [r4, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b6cb4:	4445      	add	r5, r8
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b6cb6:	e9c4 5501 	strd	r5, r5, [r4, #4]
	      std::__uninitialized_copy_a(__mid, __last,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
	  }
      }
   b6cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6cbe:	6845      	ldr	r5, [r0, #4]
   b6cc0:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b6cc2:	45a8      	cmp	r8, r5
   b6cc4:	d80b      	bhi.n	b6cde <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x8e>
			      _Category>::__copy_m(__first, __last, __result);
   b6cc6:	4639      	mov	r1, r7
   b6cc8:	4630      	mov	r0, r6
   b6cca:	f7ff ff13 	bl	b6af4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b6cce:	6861      	ldr	r1, [r4, #4]
   b6cd0:	4288      	cmp	r0, r1
   b6cd2:	4605      	mov	r5, r0
   b6cd4:	d0f1      	beq.n	b6cba <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6a>
   b6cd6:	f7fe f9df 	bl	b5098 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	    this->_M_impl._M_finish = __pos;
   b6cda:	6065      	str	r5, [r4, #4]
   b6cdc:	e7ed      	b.n	b6cba <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6a>
	__i += __n;
   b6cde:	440d      	add	r5, r1
   b6ce0:	4630      	mov	r0, r6
   b6ce2:	4629      	mov	r1, r5
   b6ce4:	f7ff ff06 	bl	b6af4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6ce8:	6866      	ldr	r6, [r4, #4]
   b6cea:	42af      	cmp	r7, r5
   b6cec:	d007      	beq.n	b6cfe <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xae>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6cee:	b11e      	cbz	r6, b6cf8 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xa8>
   b6cf0:	4629      	mov	r1, r5
   b6cf2:	4630      	mov	r0, r6
   b6cf4:	f7ff fd7a 	bl	b67ec <_ZN7RailwayC1ERKS_>
   b6cf8:	356c      	adds	r5, #108	; 0x6c
   b6cfa:	366c      	adds	r6, #108	; 0x6c
   b6cfc:	e7f5      	b.n	b6cea <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x9a>
	    this->_M_impl._M_finish =
   b6cfe:	6066      	str	r6, [r4, #4]
      }
   b6d00:	e7db      	b.n	b6cba <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6a>
   b6d02:	bf00      	nop
   b6d04:	7fffffa4 	.word	0x7fffffa4
   b6d08:	000be447 	.word	0x000be447
   b6d0c:	684bda13 	.word	0x684bda13

000b6d10 <setup>:
void setup(){
   b6d10:	b570      	push	{r4, r5, r6, lr}
   b6d12:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
  Serial.begin(9600);
   b6d16:	f004 f8dd 	bl	baed4 <_Z16_fetch_usbserialv>
   b6d1a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6d1e:	f004 f8cd 	bl	baebc <_ZN9USBSerial5beginEl>
  delay(500);
   b6d22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6d26:	f001 ff5b 	bl	b8be0 <delay>
  BLE.on();
   b6d2a:	f002 fac5 	bl	b92b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6d2e:	f002 fb0d 	bl	b934c <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   b6d32:	f002 fac1 	bl	b92b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6d36:	4a97      	ldr	r2, [pc, #604]	; (b6f94 <setup+0x284>)
   b6d38:	4d97      	ldr	r5, [pc, #604]	; (b6f98 <setup+0x288>)
   b6d3a:	4601      	mov	r1, r0
   b6d3c:	a817      	add	r0, sp, #92	; 0x5c
   b6d3e:	f002 ffef 	bl	b9d20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6d42:	a817      	add	r0, sp, #92	; 0x5c
   b6d44:	f002 fba9 	bl	b949a <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b6d48:	f002 fab6 	bl	b92b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6d4c:	4a93      	ldr	r2, [pc, #588]	; (b6f9c <setup+0x28c>)
   b6d4e:	4601      	mov	r1, r0
   b6d50:	a817      	add	r0, sp, #92	; 0x5c
   b6d52:	f002 ffe5 	bl	b9d20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6d56:	a817      	add	r0, sp, #92	; 0x5c
   b6d58:	f002 fb9f 	bl	b949a <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   b6d5c:	a802      	add	r0, sp, #8
   b6d5e:	f002 fcd2 	bl	b9706 <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b6d62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d64:	ac11      	add	r4, sp, #68	; 0x44
   b6d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d68:	682e      	ldr	r6, [r5, #0]
   b6d6a:	6026      	str	r6, [r4, #0]
        BleUuid tempUUID(uuid);
   b6d6c:	ad11      	add	r5, sp, #68	; 0x44
   b6d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d70:	ac17      	add	r4, sp, #92	; 0x5c
   b6d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6d74:	a817      	add	r0, sp, #92	; 0x5c
        BleUuid tempUUID(uuid);
   b6d76:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6d78:	f002 f8a0 	bl	b8ebc <_ZNK8particle7BleUuid4typeEv>
   b6d7c:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b6d7e:	a817      	add	r0, sp, #92	; 0x5c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6d80:	2c00      	cmp	r4, #0
   b6d82:	f040 80e2 	bne.w	b6f4a <setup+0x23a>
            uint16_t uuid16 = tempUUID.shorted();
   b6d86:	f002 f8b5 	bl	b8ef4 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b6d8a:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b6d8c:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b6d90:	2302      	movs	r3, #2
   b6d92:	aa0b      	add	r2, sp, #44	; 0x2c
   b6d94:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b6d96:	a802      	add	r0, sp, #8
   b6d98:	f002 fcaa 	bl	b96f0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   b6d9c:	f002 fa8c 	bl	b92b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6da0:	2200      	movs	r2, #0
   b6da2:	a902      	add	r1, sp, #8
   b6da4:	f002 fb1c 	bl	b93e0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  request.hostname = "trek.thewcl.com";
   b6da8:	4c7d      	ldr	r4, [pc, #500]	; (b6fa0 <setup+0x290>)

    //loopIndex must point to either the first or last checkpoint, tripleIndex cannot be 0
    void setLoopIndex(int triple, int loop){
        tripleIndex = triple;
   b6daa:	4e7e      	ldr	r6, [pc, #504]	; (b6fa4 <setup+0x294>)
  acquireWireBuffer();
   b6dac:	a817      	add	r0, sp, #92	; 0x5c
   b6dae:	f7fd fcb5 	bl	b471c <_Z17acquireWireBufferv>
  Wire.begin();
   b6db2:	f004 f9dd 	bl	bb170 <_Z19__fetch_global_Wirev>
   b6db6:	f003 f93f 	bl	ba038 <_ZN7TwoWire5beginEv>
  request.hostname = "trek.thewcl.com";
   b6dba:	497b      	ldr	r1, [pc, #492]	; (b6fa8 <setup+0x298>)
   b6dbc:	4620      	mov	r0, r4
   b6dbe:	f003 fbf0 	bl	ba5a2 <_ZN6StringaSEPKc>
  request.port = 80;
   b6dc2:	2350      	movs	r3, #80	; 0x50
   b6dc4:	4979      	ldr	r1, [pc, #484]	; (b6fac <setup+0x29c>)
   b6dc6:	63a3      	str	r3, [r4, #56]	; 0x38
   b6dc8:	4c79      	ldr	r4, [pc, #484]	; (b6fb0 <setup+0x2a0>)
        loopIndex = loop;
   b6dca:	2502      	movs	r5, #2
   b6dcc:	2006      	movs	r0, #6
   b6dce:	e9c1 5015 	strd	r5, r0, [r1, #84]	; 0x54
   b6dd2:	e9c4 5015 	strd	r5, r0, [r4, #84]	; 0x54
        tripleIndex = triple;
   b6dd6:	4d77      	ldr	r5, [pc, #476]	; (b6fb4 <setup+0x2a4>)
        loopIndex = loop;
   b6dd8:	2203      	movs	r2, #3
   b6dda:	2307      	movs	r3, #7
  ctaRailways = {brownLineCTA, orangeLineCTA, pinkLineCTA, purpleLineCTA, greenLineCTA};
   b6ddc:	a817      	add	r0, sp, #92	; 0x5c
   b6dde:	e9c5 2315 	strd	r2, r3, [r5, #84]	; 0x54
   b6de2:	e9c6 2315 	strd	r2, r3, [r6, #84]	; 0x54
   b6de6:	f7ff fd01 	bl	b67ec <_ZN7RailwayC1ERKS_>
   b6dea:	4631      	mov	r1, r6
   b6dec:	a832      	add	r0, sp, #200	; 0xc8
   b6dee:	f7ff fcfd 	bl	b67ec <_ZN7RailwayC1ERKS_>
   b6df2:	4629      	mov	r1, r5
   b6df4:	a84d      	add	r0, sp, #308	; 0x134
   b6df6:	f7ff fcf9 	bl	b67ec <_ZN7RailwayC1ERKS_>
   b6dfa:	4621      	mov	r1, r4
   b6dfc:	a868      	add	r0, sp, #416	; 0x1a0
   b6dfe:	f7ff fcf5 	bl	b67ec <_ZN7RailwayC1ERKS_>
   b6e02:	496d      	ldr	r1, [pc, #436]	; (b6fb8 <setup+0x2a8>)
   b6e04:	a883      	add	r0, sp, #524	; 0x20c
   b6e06:	f7ff fcf1 	bl	b67ec <_ZN7RailwayC1ERKS_>
	this->_M_assign_aux(__l.begin(), __l.end(),
   b6e0a:	486c      	ldr	r0, [pc, #432]	; (b6fbc <setup+0x2ac>)
   b6e0c:	aa9e      	add	r2, sp, #632	; 0x278
   b6e0e:	a917      	add	r1, sp, #92	; 0x5c
   b6e10:	f7ff ff1e 	bl	b6c50 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>
   b6e14:	2404      	movs	r4, #4
   b6e16:	256c      	movs	r5, #108	; 0x6c
   b6e18:	ab17      	add	r3, sp, #92	; 0x5c
   b6e1a:	fb05 3004 	mla	r0, r5, r4, r3
   b6e1e:	f7fe f91b 	bl	b5058 <_ZN7RailwayD1Ev>
   b6e22:	3c01      	subs	r4, #1
   b6e24:	d2f8      	bcs.n	b6e18 <setup+0x108>
  mbtaRailways = {redLineMBTA, greenLine1MBTA, greenLine2MBTA, blueLineMBTA, orangeLineMBTA};
   b6e26:	4966      	ldr	r1, [pc, #408]	; (b6fc0 <setup+0x2b0>)
   b6e28:	a817      	add	r0, sp, #92	; 0x5c
   b6e2a:	f7ff fcdf 	bl	b67ec <_ZN7RailwayC1ERKS_>
   b6e2e:	4965      	ldr	r1, [pc, #404]	; (b6fc4 <setup+0x2b4>)
   b6e30:	a832      	add	r0, sp, #200	; 0xc8
   b6e32:	f7ff fcdb 	bl	b67ec <_ZN7RailwayC1ERKS_>
   b6e36:	4964      	ldr	r1, [pc, #400]	; (b6fc8 <setup+0x2b8>)
   b6e38:	a84d      	add	r0, sp, #308	; 0x134
   b6e3a:	f7ff fcd7 	bl	b67ec <_ZN7RailwayC1ERKS_>
   b6e3e:	4963      	ldr	r1, [pc, #396]	; (b6fcc <setup+0x2bc>)
   b6e40:	a868      	add	r0, sp, #416	; 0x1a0
   b6e42:	f7ff fcd3 	bl	b67ec <_ZN7RailwayC1ERKS_>
   b6e46:	4962      	ldr	r1, [pc, #392]	; (b6fd0 <setup+0x2c0>)
   b6e48:	a883      	add	r0, sp, #524	; 0x20c
   b6e4a:	f7ff fccf 	bl	b67ec <_ZN7RailwayC1ERKS_>
   b6e4e:	4861      	ldr	r0, [pc, #388]	; (b6fd4 <setup+0x2c4>)
   b6e50:	aa9e      	add	r2, sp, #632	; 0x278
   b6e52:	a917      	add	r1, sp, #92	; 0x5c
   b6e54:	f7ff fefc 	bl	b6c50 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>
   b6e58:	2404      	movs	r4, #4
   b6e5a:	256c      	movs	r5, #108	; 0x6c
   b6e5c:	ab17      	add	r3, sp, #92	; 0x5c
   b6e5e:	fb05 3004 	mla	r0, r5, r4, r3
   b6e62:	f7fe f8f9 	bl	b5058 <_ZN7RailwayD1Ev>
   b6e66:	3c01      	subs	r4, #1
   b6e68:	d2f8      	bcs.n	b6e5c <setup+0x14c>
  cities = {City(ctaRailways, "cta", 5), City(mbtaRailways, "mbta", 5)};
   b6e6a:	4954      	ldr	r1, [pc, #336]	; (b6fbc <setup+0x2ac>)
   b6e6c:	a805      	add	r0, sp, #20
   b6e6e:	f7ff fd2d 	bl	b68cc <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b6e72:	4959      	ldr	r1, [pc, #356]	; (b6fd8 <setup+0x2c8>)
   b6e74:	a80b      	add	r0, sp, #44	; 0x2c
   b6e76:	f7fd f947 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6e7a:	2400      	movs	r4, #0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b6e7c:	ab1c      	add	r3, sp, #112	; 0x70
        std::vector<Railway> railways;
        std::string name;
        int slaveCountExpected;

        City(std::vector<Railway> railwaysInput, std::string nameInput, int slaveCountExpectedInput){
            railways = railwaysInput;
   b6e7e:	a905      	add	r1, sp, #20
   b6e80:	a817      	add	r0, sp, #92	; 0x5c
      { _M_string_length = __length; }
   b6e82:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
   b6e86:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
   b6e8a:	9419      	str	r4, [sp, #100]	; 0x64
   b6e8c:	f88d 4070 	strb.w	r4, [sp, #112]	; 0x70
   b6e90:	f7ff fe4e 	bl	b6b30 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
	this->_M_assign(__str);
   b6e94:	a90b      	add	r1, sp, #44	; 0x2c
   b6e96:	a81a      	add	r0, sp, #104	; 0x68
   b6e98:	f004 fa26 	bl	bb2e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
            name = nameInput;
            slaveCountExpected = slaveCountExpectedInput;
   b6e9c:	2505      	movs	r5, #5
   b6e9e:	494d      	ldr	r1, [pc, #308]	; (b6fd4 <setup+0x2c4>)
   b6ea0:	9520      	str	r5, [sp, #128]	; 0x80
   b6ea2:	a808      	add	r0, sp, #32
   b6ea4:	f7ff fd12 	bl	b68cc <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b6ea8:	494c      	ldr	r1, [pc, #304]	; (b6fdc <setup+0x2cc>)
   b6eaa:	a811      	add	r0, sp, #68	; 0x44
   b6eac:	f7fd f92c 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b6eb0:	ab26      	add	r3, sp, #152	; 0x98
      { _M_string_length = __length; }
   b6eb2:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
   b6eb6:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   b6eba:	9423      	str	r4, [sp, #140]	; 0x8c
   b6ebc:	f88d 4098 	strb.w	r4, [sp, #152]	; 0x98
            railways = railwaysInput;
   b6ec0:	a908      	add	r1, sp, #32
			 - this->_M_impl._M_start); }
   b6ec2:	4c47      	ldr	r4, [pc, #284]	; (b6fe0 <setup+0x2d0>)
   b6ec4:	a821      	add	r0, sp, #132	; 0x84
   b6ec6:	f7ff fe33 	bl	b6b30 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
	this->_M_assign(__str);
   b6eca:	a911      	add	r1, sp, #68	; 0x44
   b6ecc:	a824      	add	r0, sp, #144	; 0x90
   b6ece:	f004 fa0b 	bl	bb2e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b6ed2:	6822      	ldr	r2, [r4, #0]
   b6ed4:	68a3      	ldr	r3, [r4, #8]
            slaveCountExpected = slaveCountExpectedInput;
   b6ed6:	952a      	str	r5, [sp, #168]	; 0xa8
   b6ed8:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b6eda:	2b4f      	cmp	r3, #79	; 0x4f
   b6edc:	d83d      	bhi.n	b6f5a <setup+0x24a>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6ede:	2050      	movs	r0, #80	; 0x50
   b6ee0:	f7fd f8d9 	bl	b4096 <_Znwj>
	__uninit_copy(__first, __last, __result);
   b6ee4:	a92b      	add	r1, sp, #172	; 0xac
   b6ee6:	4602      	mov	r2, r0
   b6ee8:	4605      	mov	r5, r0
   b6eea:	a817      	add	r0, sp, #92	; 0x5c
   b6eec:	f7ff fd14 	bl	b6918 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>
	__destroy(__first, __last);
   b6ef0:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6ef4:	f7fe f8e9 	bl	b50ca <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	    _M_deallocate(this->_M_impl._M_start,
   b6ef8:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6efa:	b118      	cbz	r0, b6f04 <setup+0x1f4>
			  - this->_M_impl._M_start);
   b6efc:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b6efe:	1a09      	subs	r1, r1, r0
   b6f00:	f7fd f8cf 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
   b6f04:	4b36      	ldr	r3, [pc, #216]	; (b6fe0 <setup+0x2d0>)
   b6f06:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b6f08:	3550      	adds	r5, #80	; 0x50
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b6f0a:	e9c3 5501 	strd	r5, r5, [r3, #4]
      { _M_dispose(); }
   b6f0e:	a824      	add	r0, sp, #144	; 0x90
   b6f10:	f004 f9cc 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
class City{
   b6f14:	a821      	add	r0, sp, #132	; 0x84
   b6f16:	f7fe f8ca 	bl	b50ae <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b6f1a:	a81a      	add	r0, sp, #104	; 0x68
   b6f1c:	f004 f9c6 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6f20:	a817      	add	r0, sp, #92	; 0x5c
   b6f22:	f7fe f8c4 	bl	b50ae <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b6f26:	a811      	add	r0, sp, #68	; 0x44
   b6f28:	f004 f9c0 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6f2c:	a808      	add	r0, sp, #32
   b6f2e:	f7fe f8be 	bl	b50ae <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b6f32:	a80b      	add	r0, sp, #44	; 0x2c
   b6f34:	f004 f9ba 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6f38:	a805      	add	r0, sp, #20
   b6f3a:	f7fe f8b8 	bl	b50ae <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b6f3e:	9802      	ldr	r0, [sp, #8]
   b6f40:	f001 fe06 	bl	b8b50 <free>
}
   b6f44:	f50d 7d1e 	add.w	sp, sp, #632	; 0x278
   b6f48:	bd70      	pop	{r4, r5, r6, pc}
   b6f4a:	f001 ffd5 	bl	b8ef8 <_ZNK8particle7BleUuid8rawBytesEv>
   b6f4e:	2300      	movs	r3, #0
   b6f50:	9300      	str	r3, [sp, #0]
   b6f52:	4602      	mov	r2, r0
   b6f54:	2310      	movs	r3, #16
   b6f56:	2107      	movs	r1, #7
   b6f58:	e71d      	b.n	b6d96 <setup+0x86>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6f5a:	6865      	ldr	r5, [r4, #4]
   b6f5c:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b6f5e:	2d4f      	cmp	r5, #79	; 0x4f
   b6f60:	d90b      	bls.n	b6f7a <setup+0x26a>
   b6f62:	a92b      	add	r1, sp, #172	; 0xac
   b6f64:	a817      	add	r0, sp, #92	; 0x5c
   b6f66:	f7ff fe4b 	bl	b6c00 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b6f6a:	6861      	ldr	r1, [r4, #4]
   b6f6c:	4288      	cmp	r0, r1
   b6f6e:	4605      	mov	r5, r0
   b6f70:	d0cd      	beq.n	b6f0e <setup+0x1fe>
   b6f72:	f7fe f8aa 	bl	b50ca <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	    this->_M_impl._M_finish = __pos;
   b6f76:	6065      	str	r5, [r4, #4]
   b6f78:	e7c9      	b.n	b6f0e <setup+0x1fe>
   b6f7a:	ab17      	add	r3, sp, #92	; 0x5c
   b6f7c:	441d      	add	r5, r3
   b6f7e:	4629      	mov	r1, r5
   b6f80:	4618      	mov	r0, r3
   b6f82:	f7ff fe3d 	bl	b6c00 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>
   b6f86:	6862      	ldr	r2, [r4, #4]
   b6f88:	a92b      	add	r1, sp, #172	; 0xac
   b6f8a:	4628      	mov	r0, r5
   b6f8c:	f7ff fcc4 	bl	b6918 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>
	    this->_M_impl._M_finish =
   b6f90:	6060      	str	r0, [r4, #4]
   b6f92:	e7bc      	b.n	b6f0e <setup+0x1fe>
   b6f94:	2003e6ac 	.word	0x2003e6ac
   b6f98:	200352bc 	.word	0x200352bc
   b6f9c:	2003e694 	.word	0x2003e694
   b6fa0:	2003e634 	.word	0x2003e634
   b6fa4:	20037de0 	.word	0x20037de0
   b6fa8:	000be659 	.word	0x000be659
   b6fac:	200353e0 	.word	0x200353e0
   b6fb0:	2003e4f0 	.word	0x2003e4f0
   b6fb4:	2003e484 	.word	0x2003e484
   b6fb8:	20035544 	.word	0x20035544
   b6fbc:	20035460 	.word	0x20035460
   b6fc0:	2003e5c8 	.word	0x2003e5c8
   b6fc4:	2003546c 	.word	0x2003546c
   b6fc8:	200354d8 	.word	0x200354d8
   b6fcc:	20035374 	.word	0x20035374
   b6fd0:	20037e4c 	.word	0x20037e4c
   b6fd4:	20037dd4 	.word	0x20037dd4
   b6fd8:	000be669 	.word	0x000be669
   b6fdc:	000be66d 	.word	0x000be66d
   b6fe0:	20035450 	.word	0x20035450

000b6fe4 <_GLOBAL__sub_I_SystemMode>:
   b6fe4:	2001      	movs	r0, #1
   b6fe6:	f7fe ba17 	b.w	b5418 <_Z41__static_initialization_and_destruction_0ii.constprop.0>
	...

000b6fec <loop>:
void loop(){
   b6fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6ff0:	ed2d 8b06 	vpush	{d8-d10}
        WLanCredentials creds = credentials.getHalCredentials();
        network_set_credentials(*this, 0, &creds, NULL);
    }

    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
   b6ff4:	4b53      	ldr	r3, [pc, #332]	; (b7144 <loop+0x158>)
   b6ff6:	2200      	movs	r2, #0
   b6ff8:	b0b7      	sub	sp, #220	; 0xdc
   b6ffa:	6858      	ldr	r0, [r3, #4]
   b6ffc:	4611      	mov	r1, r2
   b6ffe:	f001 fd6f 	bl	b8ae0 <network_has_credentials>
  if(WiFi.hasCredentials() && userInput){
   b7002:	2800      	cmp	r0, #0
   b7004:	f000 850d 	beq.w	b7a22 <loop+0xa36>
   b7008:	4b4f      	ldr	r3, [pc, #316]	; (b7148 <loop+0x15c>)
   b700a:	781b      	ldrb	r3, [r3, #0]
   b700c:	2b00      	cmp	r3, #0
   b700e:	f000 8508 	beq.w	b7a22 <loop+0xa36>
      : _M_current(__i) { }
   b7012:	f8df 817c 	ldr.w	r8, [pc, #380]	; b7190 <loop+0x1a4>
      Serial.printf("%i, ", i);
   b7016:	4d4d      	ldr	r5, [pc, #308]	; (b714c <loop+0x160>)
    Serial.println("loop start");
   b7018:	f003 ff5c 	bl	baed4 <_Z16_fetch_usbserialv>
   b701c:	494c      	ldr	r1, [pc, #304]	; (b7150 <loop+0x164>)
   b701e:	f003 f9ce 	bl	ba3be <_ZN5Print7printlnEPKc>
   b7022:	e9d8 4600 	ldrd	r4, r6, [r8]
    for(int i : sequenceArr){
   b7026:	42a6      	cmp	r6, r4
   b7028:	d009      	beq.n	b703e <loop+0x52>
   b702a:	f854 2b04 	ldr.w	r2, [r4], #4
   b702e:	9202      	str	r2, [sp, #8]
      Serial.printf("%i, ", i);
   b7030:	f003 ff50 	bl	baed4 <_Z16_fetch_usbserialv>
   b7034:	9a02      	ldr	r2, [sp, #8]
   b7036:	4629      	mov	r1, r5
   b7038:	f7fd f9da 	bl	b43f0 <_ZN5Print6printfEPKcz>
	return *this;
   b703c:	e7f3      	b.n	b7026 <loop+0x3a>
    Serial.println();
   b703e:	f003 ff49 	bl	baed4 <_Z16_fetch_usbserialv>
   b7042:	f003 f9b0 	bl	ba3a6 <_ZN5Print7printlnEv>
    cityIndexBuffer = cityIndex;
   b7046:	4b43      	ldr	r3, [pc, #268]	; (b7154 <loop+0x168>)
   b7048:	f8df a140 	ldr.w	sl, [pc, #320]	; b718c <loop+0x1a0>
   b704c:	681b      	ldr	r3, [r3, #0]
   b704e:	f8ca 3000 	str.w	r3, [sl]
    for(int j = 0; j < cities[cityIndexBuffer].railways.size(); j++){
   b7052:	2300      	movs	r3, #0
	return *(this->_M_impl._M_start + __n);
   b7054:	4e40      	ldr	r6, [pc, #256]	; (b7158 <loop+0x16c>)
   b7056:	f8da 2000 	ldr.w	r2, [sl]
   b705a:	6831      	ldr	r1, [r6, #0]
   b705c:	9302      	str	r3, [sp, #8]
   b705e:	2528      	movs	r5, #40	; 0x28
   b7060:	436a      	muls	r2, r5
   b7062:	188b      	adds	r3, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7064:	588a      	ldr	r2, [r1, r2]
   b7066:	685b      	ldr	r3, [r3, #4]
   b7068:	1a9b      	subs	r3, r3, r2
   b706a:	4a3c      	ldr	r2, [pc, #240]	; (b715c <loop+0x170>)
   b706c:	109b      	asrs	r3, r3, #2
   b706e:	4353      	muls	r3, r2
   b7070:	9a02      	ldr	r2, [sp, #8]
   b7072:	4293      	cmp	r3, r2
   b7074:	f240 845e 	bls.w	b7934 <loop+0x948>
      delay(1000);
   b7078:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b707c:	f001 fdb0 	bl	b8be0 <delay>
      if(cityIndex == -1){
   b7080:	4b34      	ldr	r3, [pc, #208]	; (b7154 <loop+0x168>)
   b7082:	681b      	ldr	r3, [r3, #0]
   b7084:	3301      	adds	r3, #1
   b7086:	f000 84cc 	beq.w	b7a22 <loop+0xa36>
	StringSumHelper(const char *p) : String(p) {}
   b708a:	4935      	ldr	r1, [pc, #212]	; (b7160 <loop+0x174>)
   b708c:	a817      	add	r0, sp, #92	; 0x5c
   b708e:	f003 fa40 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
	return *(this->_M_impl._M_start + __n);
   b7092:	f8da 2000 	ldr.w	r2, [sl]
      { return _M_dataplus._M_p; }
   b7096:	6833      	ldr	r3, [r6, #0]
   b7098:	fb05 3302 	mla	r3, r5, r2, r3
      request.path = "/loop-tracks/" + String(cities[cityIndexBuffer].name.c_str()) + "?lines=" + String(cities[cityIndexBuffer].railways[j].name.c_str());
   b709c:	a813      	add	r0, sp, #76	; 0x4c
   b709e:	68d9      	ldr	r1, [r3, #12]
   b70a0:	f003 fa37 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
   b70a4:	a913      	add	r1, sp, #76	; 0x4c
   b70a6:	a817      	add	r0, sp, #92	; 0x5c
   b70a8:	f003 fac8 	bl	ba63c <_ZplRK15StringSumHelperRK6String>
   b70ac:	492d      	ldr	r1, [pc, #180]	; (b7164 <loop+0x178>)
   b70ae:	f003 fad1 	bl	ba654 <_ZplRK15StringSumHelperPKc>
   b70b2:	9b02      	ldr	r3, [sp, #8]
   b70b4:	6832      	ldr	r2, [r6, #0]
   b70b6:	246c      	movs	r4, #108	; 0x6c
   b70b8:	435c      	muls	r4, r3
   b70ba:	f8da 3000 	ldr.w	r3, [sl]
   b70be:	436b      	muls	r3, r5
   b70c0:	4607      	mov	r7, r0
   b70c2:	58d3      	ldr	r3, [r2, r3]
   b70c4:	4423      	add	r3, r4
   b70c6:	a81b      	add	r0, sp, #108	; 0x6c
   b70c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b70ca:	f003 fa22 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
   b70ce:	a91b      	add	r1, sp, #108	; 0x6c
   b70d0:	4638      	mov	r0, r7
   b70d2:	f003 fab3 	bl	ba63c <_ZplRK15StringSumHelperRK6String>
   b70d6:	4601      	mov	r1, r0
   b70d8:	4823      	ldr	r0, [pc, #140]	; (b7168 <loop+0x17c>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b70da:	4f24      	ldr	r7, [pc, #144]	; (b716c <loop+0x180>)
   b70dc:	f003 fa4a 	bl	ba574 <_ZN6StringaSERKS_>
   b70e0:	a81b      	add	r0, sp, #108	; 0x6c
   b70e2:	f003 f9cb 	bl	ba47c <_ZN6StringD1Ev>
   b70e6:	a813      	add	r0, sp, #76	; 0x4c
   b70e8:	f003 f9c8 	bl	ba47c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b70ec:	a817      	add	r0, sp, #92	; 0x5c
   b70ee:	f003 f9c5 	bl	ba47c <_ZN6StringD1Ev>
   b70f2:	4b1f      	ldr	r3, [pc, #124]	; (b7170 <loop+0x184>)
   b70f4:	491f      	ldr	r1, [pc, #124]	; (b7174 <loop+0x188>)
   b70f6:	4820      	ldr	r0, [pc, #128]	; (b7178 <loop+0x18c>)
   b70f8:	9300      	str	r3, [sp, #0]
   b70fa:	463a      	mov	r2, r7
   b70fc:	4b1f      	ldr	r3, [pc, #124]	; (b717c <loop+0x190>)
   b70fe:	f000 fcd3 	bl	b7aa8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("parsing");
   b7102:	f003 fee7 	bl	baed4 <_Z16_fetch_usbserialv>
   b7106:	491e      	ldr	r1, [pc, #120]	; (b7180 <loop+0x194>)
   b7108:	f003 f959 	bl	ba3be <_ZN5Print7printlnEPKc>
      parser.clear();
   b710c:	481d      	ldr	r0, [pc, #116]	; (b7184 <loop+0x198>)
   b710e:	f000 fe63 	bl	b7dd8 <_ZN10JsonBuffer5clearEv>
	const char * c_str() const { return buffer; }
   b7112:	6879      	ldr	r1, [r7, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b7114:	9103      	str	r1, [sp, #12]
   b7116:	4608      	mov	r0, r1
   b7118:	f005 f8e8 	bl	bc2ec <strlen>
   b711c:	9903      	ldr	r1, [sp, #12]
   b711e:	4602      	mov	r2, r0
   b7120:	4818      	ldr	r0, [pc, #96]	; (b7184 <loop+0x198>)
   b7122:	f000 fe3c 	bl	b7d9e <_ZN10JsonBuffer7addDataEPKcj>
      if(!parser.parse()){
   b7126:	4817      	ldr	r0, [pc, #92]	; (b7184 <loop+0x198>)
   b7128:	f001 fa46 	bl	b85b8 <_ZN10JsonParser5parseEv>
   b712c:	9003      	str	r0, [sp, #12]
   b712e:	bb98      	cbnz	r0, b7198 <loop+0x1ac>
        Serial.println("parsing failed");
   b7130:	f003 fed0 	bl	baed4 <_Z16_fetch_usbserialv>
   b7134:	4914      	ldr	r1, [pc, #80]	; (b7188 <loop+0x19c>)
}
   b7136:	b037      	add	sp, #220	; 0xdc
   b7138:	ecbd 8b06 	vpop	{d8-d10}
   b713c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("parsing failed");
   b7140:	f003 b93d 	b.w	ba3be <_ZN5Print7printlnEPKc>
   b7144:	2003e718 	.word	0x2003e718
   b7148:	2003e6b4 	.word	0x2003e6b4
   b714c:	000be67d 	.word	0x000be67d
   b7150:	000be672 	.word	0x000be672
   b7154:	200350a8 	.word	0x200350a8
   b7158:	20035450 	.word	0x20035450
   b715c:	684bda13 	.word	0x684bda13
   b7160:	000be682 	.word	0x000be682
   b7164:	000be690 	.word	0x000be690
   b7168:	2003e65c 	.word	0x2003e65c
   b716c:	2003e680 	.word	0x2003e680
   b7170:	000be698 	.word	0x000be698
   b7174:	2003e634 	.word	0x2003e634
   b7178:	200355b8 	.word	0x200355b8
   b717c:	200350ac 	.word	0x200350ac
   b7180:	000be69c 	.word	0x000be69c
   b7184:	20037eb8 	.word	0x20037eb8
   b7188:	000be6a4 	.word	0x000be6a4
   b718c:	2003545c 	.word	0x2003545c
   b7190:	2003e69c 	.word	0x2003e69c
   b7194:	00000000 	.word	0x00000000
   b7198:	f8da 3000 	ldr.w	r3, [sl]
   b719c:	6832      	ldr	r2, [r6, #0]
        float lat = train.key("latitude").valueFloat();
   b719e:	ed1f 9a03 	vldr	s18, [pc, #-12]	; b7194 <loop+0x1a8>
   b71a2:	436b      	muls	r3, r5
      Railway currentRailway = cities[cityIndexBuffer].railways[j];
   b71a4:	a81b      	add	r0, sp, #108	; 0x6c
   b71a6:	58d1      	ldr	r1, [r2, r3]
   b71a8:	4421      	add	r1, r4
   b71aa:	f7ff fb1f 	bl	b67ec <_ZN7RailwayC1ERKS_>
      std::vector<Checkpoint> currentCheckpoints = currentRailway.checkpoints;
   b71ae:	a91b      	add	r1, sp, #108	; 0x6c
   b71b0:	a807      	add	r0, sp, #28
   b71b2:	f7fd fb9b 	bl	b48ec <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      int count = 0;
   b71b6:	f04f 0900 	mov.w	r9, #0
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b71ba:	49a2      	ldr	r1, [pc, #648]	; (b7444 <loop+0x458>)
   b71bc:	a80d      	add	r0, sp, #52	; 0x34
   b71be:	f000 fe25 	bl	b7e0c <_ZNK10JsonParser12getReferenceEv>
   b71c2:	4aa1      	ldr	r2, [pc, #644]	; (b7448 <loop+0x45c>)
   b71c4:	a90d      	add	r1, sp, #52	; 0x34
   b71c6:	a810      	add	r0, sp, #64	; 0x40
   b71c8:	f000 fff0 	bl	b81ac <_ZNK13JsonReference3keyEPKc>
   b71cc:	2200      	movs	r2, #0
   b71ce:	a910      	add	r1, sp, #64	; 0x40
   b71d0:	a813      	add	r0, sp, #76	; 0x4c
   b71d2:	f000 febf 	bl	b7f54 <_ZNK13JsonReference5indexEj>
   b71d6:	4a9d      	ldr	r2, [pc, #628]	; (b744c <loop+0x460>)
   b71d8:	a913      	add	r1, sp, #76	; 0x4c
   b71da:	a817      	add	r0, sp, #92	; 0x5c
   b71dc:	f000 ffe6 	bl	b81ac <_ZNK13JsonReference3keyEPKc>
   b71e0:	464a      	mov	r2, r9
   b71e2:	a917      	add	r1, sp, #92	; 0x5c
   b71e4:	a80a      	add	r0, sp, #40	; 0x28
   b71e6:	f000 feb5 	bl	b7f54 <_ZNK13JsonReference5indexEj>
   b71ea:	a817      	add	r0, sp, #92	; 0x5c
   b71ec:	f000 fd86 	bl	b7cfc <_ZN13JsonReferenceD1Ev>
   b71f0:	a813      	add	r0, sp, #76	; 0x4c
   b71f2:	f000 fd83 	bl	b7cfc <_ZN13JsonReferenceD1Ev>
   b71f6:	a810      	add	r0, sp, #64	; 0x40
   b71f8:	f000 fd80 	bl	b7cfc <_ZN13JsonReferenceD1Ev>
   b71fc:	a80d      	add	r0, sp, #52	; 0x34
   b71fe:	f000 fd7d 	bl	b7cfc <_ZN13JsonReferenceD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b7202:	4a93      	ldr	r2, [pc, #588]	; (b7450 <loop+0x464>)
   b7204:	a90a      	add	r1, sp, #40	; 0x28
   b7206:	a817      	add	r0, sp, #92	; 0x5c
   b7208:	f000 ffd0 	bl	b81ac <_ZNK13JsonReference3keyEPKc>
   b720c:	a917      	add	r1, sp, #92	; 0x5c
   b720e:	a813      	add	r0, sp, #76	; 0x4c
   b7210:	f000 ffe6 	bl	b81e0 <_ZNK13JsonReference11valueStringEv>
   b7214:	a817      	add	r0, sp, #92	; 0x5c
   b7216:	f000 fd71 	bl	b7cfc <_ZN13JsonReferenceD1Ev>
        String destNm = train.key("destination").valueString();
   b721a:	4a8e      	ldr	r2, [pc, #568]	; (b7454 <loop+0x468>)
   b721c:	a90a      	add	r1, sp, #40	; 0x28
   b721e:	a810      	add	r0, sp, #64	; 0x40
   b7220:	f000 ffc4 	bl	b81ac <_ZNK13JsonReference3keyEPKc>
   b7224:	a910      	add	r1, sp, #64	; 0x40
   b7226:	a817      	add	r0, sp, #92	; 0x5c
   b7228:	f000 ffda 	bl	b81e0 <_ZNK13JsonReference11valueStringEv>
   b722c:	a810      	add	r0, sp, #64	; 0x40
   b722e:	f000 fd65 	bl	b7cfc <_ZN13JsonReferenceD1Ev>
        int trainDir = train.key("direction").valueInt();
   b7232:	4a89      	ldr	r2, [pc, #548]	; (b7458 <loop+0x46c>)
   b7234:	a90a      	add	r1, sp, #40	; 0x28
   b7236:	a810      	add	r0, sp, #64	; 0x40
   b7238:	f000 ffb8 	bl	b81ac <_ZNK13JsonReference3keyEPKc>
   b723c:	2100      	movs	r1, #0
   b723e:	a810      	add	r0, sp, #64	; 0x40
   b7240:	f000 fea2 	bl	b7f88 <_ZNK13JsonReference8valueIntEi>
   b7244:	4604      	mov	r4, r0
   b7246:	a810      	add	r0, sp, #64	; 0x40
   b7248:	f000 fd58 	bl	b7cfc <_ZN13JsonReferenceD1Ev>
        float lat = train.key("latitude").valueFloat();
   b724c:	4a83      	ldr	r2, [pc, #524]	; (b745c <loop+0x470>)
   b724e:	a90a      	add	r1, sp, #40	; 0x28
   b7250:	a810      	add	r0, sp, #64	; 0x40
   b7252:	f000 ffab 	bl	b81ac <_ZNK13JsonReference3keyEPKc>
   b7256:	a810      	add	r0, sp, #64	; 0x40
   b7258:	eeb0 0a49 	vmov.f32	s0, s18
   b725c:	f000 fea0 	bl	b7fa0 <_ZNK13JsonReference10valueFloatEf>
   b7260:	a810      	add	r0, sp, #64	; 0x40
   b7262:	eef0 8a40 	vmov.f32	s17, s0
   b7266:	f000 fd49 	bl	b7cfc <_ZN13JsonReferenceD1Ev>
        float lon = train.key("longitude").valueFloat();
   b726a:	4a7d      	ldr	r2, [pc, #500]	; (b7460 <loop+0x474>)
   b726c:	a90a      	add	r1, sp, #40	; 0x28
   b726e:	a810      	add	r0, sp, #64	; 0x40
   b7270:	f000 ff9c 	bl	b81ac <_ZNK13JsonReference3keyEPKc>
   b7274:	a810      	add	r0, sp, #64	; 0x40
   b7276:	eeb0 0a49 	vmov.f32	s0, s18
   b727a:	f000 fe91 	bl	b7fa0 <_ZNK13JsonReference10valueFloatEf>
   b727e:	a810      	add	r0, sp, #64	; 0x40
   b7280:	eeb0 8a40 	vmov.f32	s16, s0
   b7284:	f000 fd3a 	bl	b7cfc <_ZN13JsonReferenceD1Ev>
        if(nextStation.length() <= 1){
   b7288:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b728a:	2b01      	cmp	r3, #1
   b728c:	d87f      	bhi.n	b738e <loop+0x3a2>
          Serial.println("break");
   b728e:	f003 fe21 	bl	baed4 <_Z16_fetch_usbserialv>
   b7292:	4974      	ldr	r1, [pc, #464]	; (b7464 <loop+0x478>)
        if(cityIndexBuffer == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b7294:	4f74      	ldr	r7, [pc, #464]	; (b7468 <loop+0x47c>)
          Serial.println("break");
   b7296:	f003 f892 	bl	ba3be <_ZN5Print7printlnEPKc>
          break;
   b729a:	a817      	add	r0, sp, #92	; 0x5c
   b729c:	f003 f8ee 	bl	ba47c <_ZN6StringD1Ev>
   b72a0:	a813      	add	r0, sp, #76	; 0x4c
   b72a2:	f003 f8eb 	bl	ba47c <_ZN6StringD1Ev>
   b72a6:	a80a      	add	r0, sp, #40	; 0x28
   b72a8:	f000 fd28 	bl	b7cfc <_ZN13JsonReferenceD1Ev>
      for(int i = 0; i < 4; i++){
   b72ac:	9b02      	ldr	r3, [sp, #8]
   b72ae:	2500      	movs	r5, #0
   b72b0:	00de      	lsls	r6, r3, #3
        if(cityIndexBuffer == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b72b2:	683b      	ldr	r3, [r7, #0]
   b72b4:	2b00      	cmp	r3, #0
   b72b6:	f040 8285 	bne.w	b77c4 <loop+0x7d8>
   b72ba:	2d02      	cmp	r5, #2
   b72bc:	d006      	beq.n	b72cc <loop+0x2e0>
   b72be:	496b      	ldr	r1, [pc, #428]	; (b746c <loop+0x480>)
   b72c0:	a827      	add	r0, sp, #156	; 0x9c
   b72c2:	f7fd fb37 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b72c6:	2800      	cmp	r0, #0
   b72c8:	f000 826c 	beq.w	b77a4 <loop+0x7b8>
          Wire.beginTransmission(brownLineCTAAdr);
   b72cc:	f003 ff50 	bl	bb170 <_Z19__fetch_global_Wirev>
   b72d0:	4b67      	ldr	r3, [pc, #412]	; (b7470 <loop+0x484>)
   b72d2:	6819      	ldr	r1, [r3, #0]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b72d4:	f002 fee6 	bl	ba0a4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(String(currentRailway.colors[0].c_str()));
   b72d8:	f003 ff4a 	bl	bb170 <_Z19__fetch_global_Wirev>
   b72dc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   b72de:	4604      	mov	r4, r0
   b72e0:	6819      	ldr	r1, [r3, #0]
   b72e2:	a817      	add	r0, sp, #92	; 0x5c
   b72e4:	f003 f915 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
   b72e8:	9917      	ldr	r1, [sp, #92]	; 0x5c
   b72ea:	4620      	mov	r0, r4
   b72ec:	f7fc ff9c 	bl	b4228 <_ZN5Print5writeEPKc.isra.0>
   b72f0:	a817      	add	r0, sp, #92	; 0x5c
   b72f2:	f003 f8c3 	bl	ba47c <_ZN6StringD1Ev>
        Wire.write(String(currentRailway.colors[1].c_str()));
   b72f6:	f003 ff3b 	bl	bb170 <_Z19__fetch_global_Wirev>
   b72fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   b72fc:	4604      	mov	r4, r0
   b72fe:	6999      	ldr	r1, [r3, #24]
   b7300:	a817      	add	r0, sp, #92	; 0x5c
   b7302:	f003 f906 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
   b7306:	9917      	ldr	r1, [sp, #92]	; 0x5c
   b7308:	4620      	mov	r0, r4
   b730a:	f7fc ff8d 	bl	b4228 <_ZN5Print5writeEPKc.isra.0>
   b730e:	a817      	add	r0, sp, #92	; 0x5c
   b7310:	f003 f8b4 	bl	ba47c <_ZN6StringD1Ev>
        Wire.endTransmission();
   b7314:	f003 ff2c 	bl	bb170 <_Z19__fetch_global_Wirev>
   b7318:	f002 fecb 	bl	ba0b2 <_ZN7TwoWire15endTransmissionEv>
        if(cityIndexBuffer == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b731c:	683b      	ldr	r3, [r7, #0]
   b731e:	2b00      	cmp	r3, #0
   b7320:	f040 8266 	bne.w	b77f0 <loop+0x804>
   b7324:	2d02      	cmp	r5, #2
   b7326:	d006      	beq.n	b7336 <loop+0x34a>
   b7328:	4950      	ldr	r1, [pc, #320]	; (b746c <loop+0x480>)
   b732a:	a827      	add	r0, sp, #156	; 0x9c
   b732c:	f7fd fb02 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7330:	2800      	cmp	r0, #0
   b7332:	f000 824d 	beq.w	b77d0 <loop+0x7e4>
          Wire.beginTransmission(brownLineCTAAdr);
   b7336:	f003 ff1b 	bl	bb170 <_Z19__fetch_global_Wirev>
   b733a:	4b4d      	ldr	r3, [pc, #308]	; (b7470 <loop+0x484>)
   b733c:	6819      	ldr	r1, [r3, #0]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b733e:	f002 feb1 	bl	ba0a4 <_ZN7TwoWire17beginTransmissionEi>
        if(cityIndexBuffer == 0){
   b7342:	683c      	ldr	r4, [r7, #0]
   b7344:	2c00      	cmp	r4, #0
   b7346:	f040 8319 	bne.w	b797c <loop+0x990>
          if(i == 2){
   b734a:	2d02      	cmp	r5, #2
   b734c:	f040 8285 	bne.w	b785a <loop+0x86e>
            if(currentRailway.name == greenLineCTA.name){
   b7350:	4948      	ldr	r1, [pc, #288]	; (b7474 <loop+0x488>)
   b7352:	f8df 9124 	ldr.w	r9, [pc, #292]	; b7478 <loop+0x48c>
   b7356:	a827      	add	r0, sp, #156	; 0x9c
   b7358:	f7fd faec 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b735c:	2800      	cmp	r0, #0
   b735e:	f000 824d 	beq.w	b77fc <loop+0x810>
   b7362:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7366:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   b736a:	1a9b      	subs	r3, r3, r2
   b736c:	109a      	asrs	r2, r3, #2
   b736e:	e9d1 1300 	ldrd	r1, r3, [r1]
   b7372:	1a5b      	subs	r3, r3, r1
   b7374:	109b      	asrs	r3, r3, #2
              for(int j = 0; j < brownLineCTA.outputs[0].size() + (brownLineCTA.outputs[2].size() / 2); j++){
   b7376:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   b737a:	42a3      	cmp	r3, r4
   b737c:	f240 82fe 	bls.w	b797c <loop+0x990>
                Wire.write('0');
   b7380:	f003 fef6 	bl	bb170 <_Z19__fetch_global_Wirev>
   b7384:	2130      	movs	r1, #48	; 0x30
   b7386:	f7fc ff4b 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size() + (brownLineCTA.outputs[2].size() / 2); j++){
   b738a:	3401      	adds	r4, #1
   b738c:	e7e9      	b.n	b7362 <loop+0x376>
   b738e:	e9dd 3507 	ldrd	r3, r5, [sp, #28]
   b7392:	1aed      	subs	r5, r5, r3
   b7394:	10ed      	asrs	r5, r5, #3
        for(int i = 0; i < checkpointCount; i++){
   b7396:	f04f 0b00 	mov.w	fp, #0
   b739a:	45ab      	cmp	fp, r5
	return *(this->_M_impl._M_start + __n);
   b739c:	9907      	ldr	r1, [sp, #28]
   b739e:	da3b      	bge.n	b7418 <loop+0x42c>
   b73a0:	eb01 06cb 	add.w	r6, r1, fp, lsl #3
    }

    float getDistance(float trainLat, float trainLon){
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b73a4:	edd6 7a00 	vldr	s15, [r6]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b73a8:	ee78 7ae7 	vsub.f32	s15, s17, s15
   b73ac:	ee17 0a90 	vmov	r0, s15
   b73b0:	f004 fb7c 	bl	bbaac <__aeabi_f2d>
   b73b4:	edd6 7a01 	vldr	s15, [r6, #4]
   b73b8:	ee78 7a67 	vsub.f32	s15, s16, s15
   b73bc:	4602      	mov	r2, r0
   b73be:	460b      	mov	r3, r1
   b73c0:	ee17 0a90 	vmov	r0, s15
   b73c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b73c8:	f004 fb70 	bl	bbaac <__aeabi_f2d>
   b73cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b73d0:	ec41 0b1a 	vmov	d10, r0, r1
   b73d4:	4610      	mov	r0, r2
   b73d6:	4619      	mov	r1, r3
   b73d8:	f004 fbc0 	bl	bbb5c <__aeabi_dmul>
   b73dc:	ec53 2b1a 	vmov	r2, r3, d10
   b73e0:	4606      	mov	r6, r0
   b73e2:	460f      	mov	r7, r1
   b73e4:	ee1a 0a10 	vmov	r0, s20
   b73e8:	4619      	mov	r1, r3
   b73ea:	f004 fbb7 	bl	bbb5c <__aeabi_dmul>
   b73ee:	4602      	mov	r2, r0
   b73f0:	460b      	mov	r3, r1
   b73f2:	4630      	mov	r0, r6
   b73f4:	4639      	mov	r1, r7
   b73f6:	f004 f9fb 	bl	bb7f0 <__adddf3>
   b73fa:	ec41 0b10 	vmov	d0, r0, r1
   b73fe:	f004 f8eb 	bl	bb5d8 <sqrt>
          currentRailway.distances[i] = currentCheckpoints[i].getDistance(lat, lon);
   b7402:	9e1e      	ldr	r6, [sp, #120]	; 0x78
   b7404:	ec51 0b10 	vmov	r0, r1, d0
   b7408:	f004 fe78 	bl	bc0fc <__aeabi_d2f>
   b740c:	eb06 068b 	add.w	r6, r6, fp, lsl #2
        for(int i = 0; i < checkpointCount; i++){
   b7410:	f10b 0b01 	add.w	fp, fp, #1
   b7414:	6030      	str	r0, [r6, #0]
   b7416:	e7c0      	b.n	b739a <loop+0x3ae>
      : _M_current(__i) { }
   b7418:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
   b741c:	42be      	cmp	r6, r7
   b741e:	d02f      	beq.n	b7480 <loop+0x494>
   b7420:	1d32      	adds	r2, r6, #4
   b7422:	4633      	mov	r3, r6
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
   b7424:	4297      	cmp	r7, r2
	++_M_current;
   b7426:	4610      	mov	r0, r2
   b7428:	d02b      	beq.n	b7482 <loop+0x496>
	if (__comp(__first, __result))
   b742a:	edd3 7a00 	vldr	s15, [r3]
   b742e:	ed90 7a00 	vldr	s14, [r0]
   b7432:	eeb4 7a67 	vcmp.f32	s14, s15
   b7436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b743a:	f102 0204 	add.w	r2, r2, #4
   b743e:	bf48      	it	mi
   b7440:	4603      	movmi	r3, r0
   b7442:	e7ef      	b.n	b7424 <loop+0x438>
   b7444:	20037eb8 	.word	0x20037eb8
   b7448:	000be6b3 	.word	0x000be6b3
   b744c:	000be6b9 	.word	0x000be6b9
   b7450:	000be6c0 	.word	0x000be6c0
   b7454:	000be6ca 	.word	0x000be6ca
   b7458:	000be6d6 	.word	0x000be6d6
   b745c:	000be6e0 	.word	0x000be6e0
   b7460:	000be6e9 	.word	0x000be6e9
   b7464:	000be6f3 	.word	0x000be6f3
   b7468:	2003545c 	.word	0x2003545c
   b746c:	2003e520 	.word	0x2003e520
   b7470:	2003544c 	.word	0x2003544c
   b7474:	20035574 	.word	0x20035574
   b7478:	200353e0 	.word	0x200353e0
   b747c:	7dcccccc 	.word	0x7dcccccc
   b7480:	4633      	mov	r3, r6
        if(closestIndex == currentRailway.tripleIndex){
   b7482:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b7484:	1b9b      	subs	r3, r3, r6
   b7486:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
   b748a:	ea4f 00a3 	mov.w	r0, r3, asr #2
          closestIndex = currentRailway.loopIndex;
   b748e:	bf08      	it	eq
   b7490:	9831      	ldreq	r0, [sp, #196]	; 0xc4
   b7492:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
        x1 = currentCheckpoints[closestIndex].lat;
   b7496:	edd3 7a00 	vldr	s15, [r3]
        y1 = currentCheckpoints[closestIndex].lon;
   b749a:	edd3 6a01 	vldr	s13, [r3, #4]
        if(currentCheckpoints[closestIndex].lat > lat){
   b749e:	eef4 8ae7 	vcmpe.f32	s17, s15
   b74a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          slope = (y1 - y) / (x1 - x);
   b74a6:	ee77 5ae8 	vsub.f32	s11, s15, s17
          slope = (y - y1) / (x - x1);
   b74aa:	bf55      	itete	pl
   b74ac:	ee38 6a66 	vsubpl.f32	s12, s16, s13
          slope = (y1 - y) / (x1 - x);
   b74b0:	ee76 7ac8 	vsubmi.f32	s15, s13, s16
          slope = (y - y1) / (x - x1);
   b74b4:	ee78 7ae7 	vsubpl.f32	s15, s17, s15
          slope = (y1 - y) / (x1 - x);
   b74b8:	ee87 7aa5 	vdivmi.f32	s14, s15, s11
   b74bc:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
          slope = (y - y1) / (x - x1);
   b74c0:	bf58      	it	pl
   b74c2:	ee86 7a27 	vdivpl.f32	s14, s12, s15
        if(slope == 0){
   b74c6:	ed5f 7a13 	vldr	s15, [pc, #-76]	; b747c <loop+0x490>
   b74ca:	eeb5 7a40 	vcmp.f32	s14, #0.0
   b74ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b74d2:	d00a      	beq.n	b74ea <loop+0x4fe>
        }else if(slope >= __FLT_MAX__ / 10){
   b74d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b74d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          perpendicularSlope = -1 / slope;
   b74dc:	bfba      	itte	lt
   b74de:	eebf 6a00 	vmovlt.f32	s12, #240	; 0xbf800000 -1.0
   b74e2:	eec6 7a07 	vdivlt.f32	s15, s12, s14
          perpendicularSlope = 0;
   b74e6:	eef0 7a49 	vmovge.f32	s15, s18
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b74ea:	eeb0 7a48 	vmov.f32	s14, s16
   b74ee:	eea7 7aa5 	vfma.f32	s14, s15, s11
   b74f2:	eef4 6ac7 	vcmpe.f32	s13, s14
   b74f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b74fa:	bf4c      	ite	mi
   b74fc:	2701      	movmi	r7, #1
   b74fe:	2700      	movpl	r7, #0
        if(closestIndex == 0){
   b7500:	2800      	cmp	r0, #0
   b7502:	d171      	bne.n	b75e8 <loop+0x5fc>
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b7504:	ed91 7a02 	vldr	s14, [r1, #8]
          if(currentRailway.loopIndex == closestIndex){
   b7508:	f8dd c0c4 	ldr.w	ip, [sp, #196]	; 0xc4
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b750c:	ee37 7a68 	vsub.f32	s14, s14, s17
   b7510:	eef0 6a48 	vmov.f32	s13, s16
   b7514:	eee7 6a27 	vfma.f32	s13, s14, s15
   b7518:	ed91 7a03 	vldr	s14, [r1, #12]
   b751c:	eef4 6ac7 	vcmpe.f32	s13, s14
   b7520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7524:	bfcc      	ite	gt
   b7526:	2501      	movgt	r5, #1
   b7528:	2500      	movle	r5, #0
          if(currentRailway.loopIndex == closestIndex){
   b752a:	f1bc 0f00 	cmp.w	ip, #0
   b752e:	d11d      	bne.n	b756c <loop+0x580>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b7530:	1e53      	subs	r3, r2, #1
   b7532:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
            if(nearestSide != pointSide){
   b7536:	42bd      	cmp	r5, r7
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b7538:	ed91 0a00 	vldr	s0, [r1]
   b753c:	ed91 7a01 	vldr	s14, [r1, #4]
            if(nearestSide != pointSide){
   b7540:	f040 809b 	bne.w	b767a <loop+0x68e>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b7544:	ee70 8a68 	vsub.f32	s17, s0, s17
   b7548:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b754c:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b7550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            }else if(nearestSide != loopPointSide){
   b7554:	bfcc      	ite	gt
   b7556:	2101      	movgt	r1, #1
   b7558:	2100      	movle	r1, #0
   b755a:	42a9      	cmp	r1, r5
              }else if(nearestSide != loopPointSide){
   b755c:	d100      	bne.n	b7560 <loop+0x574>
                secondClosestIndex = currentRailway.tripleIndex + 1;
   b755e:	1c53      	adds	r3, r2, #1
          if(closestIndex < secondClosestIndex){
   b7560:	429a      	cmp	r2, r3
   b7562:	f2c0 808c 	blt.w	b767e <loop+0x692>
   b7566:	4611      	mov	r1, r2
   b7568:	469c      	mov	ip, r3
   b756a:	e005      	b.n	b7578 <loop+0x58c>
            if(pointSide == nearestSide){
   b756c:	42bd      	cmp	r5, r7
   b756e:	d074      	beq.n	b765a <loop+0x66e>
   b7570:	4602      	mov	r2, r0
   b7572:	4684      	mov	ip, r0
   b7574:	2301      	movs	r3, #1
   b7576:	4619      	mov	r1, r3
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b7578:	eb06 008c 	add.w	r0, r6, ip, lsl #2
   b757c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   b7580:	ed90 7a00 	vldr	s14, [r0]
   b7584:	edd1 7a00 	vldr	s15, [r1]
   b7588:	9821      	ldr	r0, [sp, #132]	; 0x84
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b758a:	9d35      	ldr	r5, [sp, #212]	; 0xd4
          segmentPos *= currentRailway.scalers[lowerIndex];
   b758c:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b7590:	ee77 7a27 	vadd.f32	s15, s14, s15
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b7594:	4295      	cmp	r5, r2
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b7596:	eec7 6a27 	vdiv.f32	s13, s14, s15
          segmentPos *= currentRailway.scalers[lowerIndex];
   b759a:	ee07 1a90 	vmov	s15, r1
   b759e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   b75a2:	ee28 8a26 	vmul.f32	s16, s16, s13
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b75a6:	db06      	blt.n	b75b6 <loop+0x5ca>
   b75a8:	9934      	ldr	r1, [sp, #208]	; 0xd0
   b75aa:	4291      	cmp	r1, r2
   b75ac:	dc03      	bgt.n	b75b6 <loop+0x5ca>
   b75ae:	429d      	cmp	r5, r3
   b75b0:	db01      	blt.n	b75b6 <loop+0x5ca>
   b75b2:	4299      	cmp	r1, r3
   b75b4:	dd66      	ble.n	b7684 <loop+0x698>
          else if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b75b6:	9d32      	ldr	r5, [sp, #200]	; 0xc8
   b75b8:	4295      	cmp	r5, r2
   b75ba:	dc66      	bgt.n	b768a <loop+0x69e>
   b75bc:	429d      	cmp	r5, r3
   b75be:	dc64      	bgt.n	b768a <loop+0x69e>
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b75c0:	9933      	ldr	r1, [sp, #204]	; 0xcc
   b75c2:	4291      	cmp	r1, r2
   b75c4:	db65      	blt.n	b7692 <loop+0x6a6>
   b75c6:	4299      	cmp	r1, r3
   b75c8:	db63      	blt.n	b7692 <loop+0x6a6>
            inLoop = true;
   b75ca:	9b03      	ldr	r3, [sp, #12]
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b75cc:	4629      	mov	r1, r5
            pcbSegment = 2;
   b75ce:	2502      	movs	r5, #2
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b75d0:	458c      	cmp	ip, r1
   b75d2:	dd61      	ble.n	b7698 <loop+0x6ac>
            segmentPos += currentRailway.scalers[i];
   b75d4:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   b75d8:	ee07 2a90 	vmov	s15, r2
   b75dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b75e0:	3101      	adds	r1, #1
            segmentPos += currentRailway.scalers[i];
   b75e2:	ee38 8a27 	vadd.f32	s16, s16, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b75e6:	e7f3      	b.n	b75d0 <loop+0x5e4>
   b75e8:	f1ac 0c08 	sub.w	ip, ip, #8
   b75ec:	448c      	add	ip, r1
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b75ee:	ed9c 7a00 	vldr	s14, [ip]
   b75f2:	ee37 7a68 	vsub.f32	s14, s14, s17
   b75f6:	eef0 6a48 	vmov.f32	s13, s16
   b75fa:	eee7 6a27 	vfma.f32	s13, s14, s15
          if(closestIndex == checkpointCount - 1){
   b75fe:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b7602:	1e43      	subs	r3, r0, #1
   b7604:	ed9c 7a01 	vldr	s14, [ip, #4]
   b7608:	eef4 6ac7 	vcmpe.f32	s13, s14
   b760c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7610:	bfcc      	ite	gt
   b7612:	f04f 0c01 	movgt.w	ip, #1
   b7616:	f04f 0c00 	movle.w	ip, #0
          if(closestIndex == checkpointCount - 1){
   b761a:	4586      	cmp	lr, r0
   b761c:	d129      	bne.n	b7672 <loop+0x686>
            if(closestIndex == currentRailway.loopIndex){
   b761e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   b7620:	4283      	cmp	r3, r0
   b7622:	d118      	bne.n	b7656 <loop+0x66a>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b7624:	1e53      	subs	r3, r2, #1
   b7626:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
              if(nearestSide != pointSide){
   b762a:	45bc      	cmp	ip, r7
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b762c:	ed91 0a00 	vldr	s0, [r1]
   b7630:	ed91 7a01 	vldr	s14, [r1, #4]
              if(nearestSide != pointSide){
   b7634:	d002      	beq.n	b763c <loop+0x650>
                secondClosestIndex = checkpointCount - 2;
   b7636:	1eab      	subs	r3, r5, #2
   b7638:	4602      	mov	r2, r0
   b763a:	e791      	b.n	b7560 <loop+0x574>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b763c:	ee70 8a68 	vsub.f32	s17, s0, s17
   b7640:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b7644:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b7648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              }else if(nearestSide != loopPointSide){
   b764c:	bfcc      	ite	gt
   b764e:	2101      	movgt	r1, #1
   b7650:	2100      	movle	r1, #0
   b7652:	4561      	cmp	r1, ip
   b7654:	e782      	b.n	b755c <loop+0x570>
              if(pointSide == nearestSide){
   b7656:	45bc      	cmp	ip, r7
   b7658:	d1ed      	bne.n	b7636 <loop+0x64a>
        String destNm = train.key("destination").valueString();
   b765a:	a817      	add	r0, sp, #92	; 0x5c
   b765c:	f002 ff0e 	bl	ba47c <_ZN6StringD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b7660:	a813      	add	r0, sp, #76	; 0x4c
   b7662:	f002 ff0b 	bl	ba47c <_ZN6StringD1Ev>
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b7666:	a80a      	add	r0, sp, #40	; 0x28
        count++;
   b7668:	f109 0901 	add.w	r9, r9, #1
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b766c:	f000 fb46 	bl	b7cfc <_ZN13JsonReferenceD1Ev>
   b7670:	e5a3      	b.n	b71ba <loop+0x1ce>
            if(pointSide == nearestSide){
   b7672:	45bc      	cmp	ip, r7
   b7674:	d1e0      	bne.n	b7638 <loop+0x64c>
              secondClosestIndex = closestIndex + 1;
   b7676:	1c43      	adds	r3, r0, #1
   b7678:	e7de      	b.n	b7638 <loop+0x64c>
   b767a:	4602      	mov	r2, r0
   b767c:	e77a      	b.n	b7574 <loop+0x588>
   b767e:	4619      	mov	r1, r3
   b7680:	4694      	mov	ip, r2
   b7682:	e779      	b.n	b7578 <loop+0x58c>
        bool inLoop = false;
   b7684:	2300      	movs	r3, #0
            pcbSegment = 3;
   b7686:	2503      	movs	r5, #3
   b7688:	e7a2      	b.n	b75d0 <loop+0x5e4>
            lowerScaleBound = 0;
   b768a:	2100      	movs	r1, #0
        bool inLoop = false;
   b768c:	460b      	mov	r3, r1
            pcbSegment = 0;
   b768e:	460d      	mov	r5, r1
   b7690:	e79e      	b.n	b75d0 <loop+0x5e4>
        bool inLoop = false;
   b7692:	2300      	movs	r3, #0
            pcbSegment = 1;
   b7694:	2501      	movs	r5, #1
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b7696:	e79b      	b.n	b75d0 <loop+0x5e4>
          if(cityIndexBuffer == 0){
   b7698:	4aab      	ldr	r2, [pc, #684]	; (b7948 <loop+0x95c>)
   b769a:	9e24      	ldr	r6, [sp, #144]	; 0x90
   b769c:	6812      	ldr	r2, [r2, #0]
   b769e:	2a00      	cmp	r2, #0
   b76a0:	d170      	bne.n	b7784 <loop+0x798>
            if(inLoop){
   b76a2:	2b00      	cmp	r3, #0
   b76a4:	d04a      	beq.n	b773c <loop+0x750>
              if(currentRailway.name == pinkLineCTA.name){
   b76a6:	49a9      	ldr	r1, [pc, #676]	; (b794c <loop+0x960>)
   b76a8:	a827      	add	r0, sp, #156	; 0x9c
   b76aa:	f7fd f943 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b76ae:	b1f0      	cbz	r0, b76ee <loop+0x702>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b76b0:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
   b76b4:	1a9b      	subs	r3, r3, r2
   b76b6:	109b      	asrs	r3, r3, #2
                segmentPos = (float)currentRailway.outputs[2].size() - segmentPos;
   b76b8:	ee07 3a90 	vmov	s15, r3
   b76bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b76c0:	ee37 8ac8 	vsub.f32	s16, s15, s16
            if(pcbSegment == 1 && currentRailway.name == greenLineCTA.name){
   b76c4:	2d01      	cmp	r5, #1
   b76c6:	d147      	bne.n	b7758 <loop+0x76c>
   b76c8:	49a1      	ldr	r1, [pc, #644]	; (b7950 <loop+0x964>)
   b76ca:	a827      	add	r0, sp, #156	; 0x9c
   b76cc:	f7fd f932 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b76d0:	2800      	cmp	r0, #0
   b76d2:	d049      	beq.n	b7768 <loop+0x77c>
   b76d4:	e9d6 2303 	ldrd	r2, r3, [r6, #12]
   b76d8:	1a9b      	subs	r3, r3, r2
   b76da:	109b      	asrs	r3, r3, #2
              segmentPos = (float)currentRailway.outputs[1].size() - segmentPos;
   b76dc:	ee07 3a90 	vmov	s15, r3
   b76e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b76e4:	ee37 8ac8 	vsub.f32	s16, s15, s16
              trainDir = 6 - trainDir;
   b76e8:	f1c4 0406 	rsb	r4, r4, #6
   b76ec:	e03c      	b.n	b7768 <loop+0x77c>
              }else if(currentRailway.name == orangeLineCTA.name){
   b76ee:	4999      	ldr	r1, [pc, #612]	; (b7954 <loop+0x968>)
   b76f0:	a827      	add	r0, sp, #156	; 0x9c
   b76f2:	f7fd f91f 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b76f6:	b1c8      	cbz	r0, b772c <loop+0x740>
	return *(this->_M_impl._M_start + __n);
   b76f8:	4b97      	ldr	r3, [pc, #604]	; (b7958 <loop+0x96c>)
   b76fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b76fc:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   b7700:	1ad2      	subs	r2, r2, r3
   b7702:	1092      	asrs	r2, r2, #2
                segmentPos = (int)(segmentPos + orangeLineCTA.outputs[2].size() / 2) % orangeLineCTA.outputs[2].size();
   b7704:	0853      	lsrs	r3, r2, #1
   b7706:	ee07 3a90 	vmov	s15, r3
   b770a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b770e:	ee37 8a88 	vadd.f32	s16, s15, s16
   b7712:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   b7716:	ee17 3a90 	vmov	r3, s15
   b771a:	fbb3 f1f2 	udiv	r1, r3, r2
   b771e:	fb02 3311 	mls	r3, r2, r1, r3
   b7722:	ee08 3a10 	vmov	s16, r3
   b7726:	eeb8 8a48 	vcvt.f32.u32	s16, s16
   b772a:	e7cb      	b.n	b76c4 <loop+0x6d8>
              }else if(currentRailway.name == purpleLineCTA.name){
   b772c:	498b      	ldr	r1, [pc, #556]	; (b795c <loop+0x970>)
   b772e:	a827      	add	r0, sp, #156	; 0x9c
   b7730:	f7fd f900 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
                trainDir = 1;
   b7734:	2800      	cmp	r0, #0
   b7736:	bf18      	it	ne
   b7738:	2401      	movne	r4, #1
   b773a:	e7c3      	b.n	b76c4 <loop+0x6d8>
              if(currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name){
   b773c:	4988      	ldr	r1, [pc, #544]	; (b7960 <loop+0x974>)
   b773e:	a827      	add	r0, sp, #156	; 0x9c
   b7740:	f7fd f8f8 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7744:	b928      	cbnz	r0, b7752 <loop+0x766>
   b7746:	4985      	ldr	r1, [pc, #532]	; (b795c <loop+0x970>)
   b7748:	a827      	add	r0, sp, #156	; 0x9c
   b774a:	f7fd f8f3 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b774e:	2800      	cmp	r0, #0
   b7750:	d0b8      	beq.n	b76c4 <loop+0x6d8>
                trainDir = 6 - trainDir;
   b7752:	f1c4 0406 	rsb	r4, r4, #6
   b7756:	e7b5      	b.n	b76c4 <loop+0x6d8>
            if(pcbSegment == 3 && currentRailway.name == pinkLineCTA.name){
   b7758:	2d03      	cmp	r5, #3
   b775a:	d105      	bne.n	b7768 <loop+0x77c>
   b775c:	497b      	ldr	r1, [pc, #492]	; (b794c <loop+0x960>)
            if(currentRailway.name == orangeLineMBTA.name || currentRailway.name == greenLine1MBTA.name || currentRailway.name == redLineMBTA.name){
   b775e:	a827      	add	r0, sp, #156	; 0x9c
   b7760:	f7fd f8e8 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7764:	2800      	cmp	r0, #0
   b7766:	d1bf      	bne.n	b76e8 <loop+0x6fc>
  { return __builtin_floorf(__x); }
   b7768:	eeb0 0a48 	vmov.f32	s0, s16
   b776c:	f003 feee 	bl	bb54c <floorf>
	return *(this->_M_impl._M_start + __n);
   b7770:	230c      	movs	r3, #12
          currentRailway.outputs[pcbSegment][(int)floor(segmentPos)] = trainDir;
   b7772:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b7776:	435d      	muls	r5, r3
   b7778:	ee10 2a10 	vmov	r2, s0
   b777c:	5973      	ldr	r3, [r6, r5]
   b777e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b7782:	e76a      	b.n	b765a <loop+0x66e>
          else if(cityIndexBuffer == 1){
   b7784:	2a01      	cmp	r2, #1
   b7786:	d1ef      	bne.n	b7768 <loop+0x77c>
            if(currentRailway.name == orangeLineMBTA.name || currentRailway.name == greenLine1MBTA.name || currentRailway.name == redLineMBTA.name){
   b7788:	4976      	ldr	r1, [pc, #472]	; (b7964 <loop+0x978>)
   b778a:	a827      	add	r0, sp, #156	; 0x9c
   b778c:	f7fd f8d2 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7790:	2800      	cmp	r0, #0
   b7792:	d1a9      	bne.n	b76e8 <loop+0x6fc>
   b7794:	4974      	ldr	r1, [pc, #464]	; (b7968 <loop+0x97c>)
   b7796:	a827      	add	r0, sp, #156	; 0x9c
   b7798:	f7fd f8cc 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b779c:	2800      	cmp	r0, #0
   b779e:	d1a3      	bne.n	b76e8 <loop+0x6fc>
   b77a0:	4972      	ldr	r1, [pc, #456]	; (b796c <loop+0x980>)
   b77a2:	e7dc      	b.n	b775e <loop+0x772>
        }else if(cityIndexBuffer == 0 && i == 3){
   b77a4:	2d03      	cmp	r5, #3
   b77a6:	d10d      	bne.n	b77c4 <loop+0x7d8>
          if(currentRailway.name == orangeLineCTA.name){
   b77a8:	496a      	ldr	r1, [pc, #424]	; (b7954 <loop+0x968>)
   b77aa:	4c71      	ldr	r4, [pc, #452]	; (b7970 <loop+0x984>)
   b77ac:	a827      	add	r0, sp, #156	; 0x9c
   b77ae:	f7fd f8c1 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b77b2:	b118      	cbz	r0, b77bc <loop+0x7d0>
            Wire.beginTransmission(greenLineCTAAdr[0]);
   b77b4:	f003 fcdc 	bl	bb170 <_Z19__fetch_global_Wirev>
   b77b8:	6821      	ldr	r1, [r4, #0]
   b77ba:	e58b      	b.n	b72d4 <loop+0x2e8>
            Wire.beginTransmission(greenLineCTAAdr[1]);
   b77bc:	f003 fcd8 	bl	bb170 <_Z19__fetch_global_Wirev>
   b77c0:	6861      	ldr	r1, [r4, #4]
   b77c2:	e587      	b.n	b72d4 <loop+0x2e8>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b77c4:	f003 fcd4 	bl	bb170 <_Z19__fetch_global_Wirev>
   b77c8:	f8d8 3000 	ldr.w	r3, [r8]
   b77cc:	5999      	ldr	r1, [r3, r6]
   b77ce:	e581      	b.n	b72d4 <loop+0x2e8>
        }else if(cityIndexBuffer == 0 && i == 3){
   b77d0:	2d03      	cmp	r5, #3
   b77d2:	d10d      	bne.n	b77f0 <loop+0x804>
          if(currentRailway.name == orangeLineCTA.name){
   b77d4:	495f      	ldr	r1, [pc, #380]	; (b7954 <loop+0x968>)
   b77d6:	4c66      	ldr	r4, [pc, #408]	; (b7970 <loop+0x984>)
   b77d8:	a827      	add	r0, sp, #156	; 0x9c
   b77da:	f7fd f8ab 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b77de:	b118      	cbz	r0, b77e8 <loop+0x7fc>
            Wire.beginTransmission(greenLineCTAAdr[0]);
   b77e0:	f003 fcc6 	bl	bb170 <_Z19__fetch_global_Wirev>
   b77e4:	6821      	ldr	r1, [r4, #0]
   b77e6:	e5aa      	b.n	b733e <loop+0x352>
            Wire.beginTransmission(greenLineCTAAdr[1]);
   b77e8:	f003 fcc2 	bl	bb170 <_Z19__fetch_global_Wirev>
   b77ec:	6861      	ldr	r1, [r4, #4]
   b77ee:	e5a6      	b.n	b733e <loop+0x352>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b77f0:	f003 fcbe 	bl	bb170 <_Z19__fetch_global_Wirev>
   b77f4:	f8d8 3000 	ldr.w	r3, [r8]
   b77f8:	5999      	ldr	r1, [r3, r6]
   b77fa:	e5a0      	b.n	b733e <loop+0x352>
            else if(currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name){
   b77fc:	f109 0130 	add.w	r1, r9, #48	; 0x30
   b7800:	a827      	add	r0, sp, #156	; 0x9c
   b7802:	f7fd f897 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7806:	b920      	cbnz	r0, b7812 <loop+0x826>
   b7808:	4954      	ldr	r1, [pc, #336]	; (b795c <loop+0x970>)
   b780a:	a827      	add	r0, sp, #156	; 0x9c
   b780c:	f7fd f892 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7810:	b198      	cbz	r0, b783a <loop+0x84e>
   b7812:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7816:	e9d2 2300 	ldrd	r2, r3, [r2]
   b781a:	1a9b      	subs	r3, r3, r2
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b781c:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b7820:	f080 80ac 	bcs.w	b797c <loop+0x990>
                Wire.write((char)currentRailway.outputs[0][j] + '0');
   b7824:	f003 fca4 	bl	bb170 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b7828:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b782a:	681b      	ldr	r3, [r3, #0]
   b782c:	f813 1024 	ldrb.w	r1, [r3, r4, lsl #2]
   b7830:	3130      	adds	r1, #48	; 0x30
   b7832:	f7fc fcf5 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b7836:	3401      	adds	r4, #1
   b7838:	e7eb      	b.n	b7812 <loop+0x826>
   b783a:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b783e:	e9d2 2300 	ldrd	r2, r3, [r2]
   b7842:	1a9b      	subs	r3, r3, r2
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b7844:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b7848:	f080 8098 	bcs.w	b797c <loop+0x990>
                Wire.write('0');
   b784c:	f003 fc90 	bl	bb170 <_Z19__fetch_global_Wirev>
   b7850:	2130      	movs	r1, #48	; 0x30
   b7852:	f7fc fce5 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b7856:	3401      	adds	r4, #1
   b7858:	e7ef      	b.n	b783a <loop+0x84e>
          if(i == 1 && (currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name)){
   b785a:	2d01      	cmp	r5, #1
   b785c:	f040 80c0 	bne.w	b79e0 <loop+0x9f4>
   b7860:	493f      	ldr	r1, [pc, #252]	; (b7960 <loop+0x974>)
   b7862:	a827      	add	r0, sp, #156	; 0x9c
   b7864:	f7fd f866 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7868:	b930      	cbnz	r0, b7878 <loop+0x88c>
   b786a:	493c      	ldr	r1, [pc, #240]	; (b795c <loop+0x970>)
   b786c:	a827      	add	r0, sp, #156	; 0x9c
   b786e:	f7fd f861 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7872:	2800      	cmp	r0, #0
   b7874:	f000 8082 	beq.w	b797c <loop+0x990>
	return *(this->_M_impl._M_start + __n);
   b7878:	9a24      	ldr	r2, [sp, #144]	; 0x90
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b787a:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
   b787e:	1a9b      	subs	r3, r3, r2
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b7880:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b7884:	d27a      	bcs.n	b797c <loop+0x990>
              Wire.write('0');
   b7886:	f003 fc73 	bl	bb170 <_Z19__fetch_global_Wirev>
   b788a:	2130      	movs	r1, #48	; 0x30
   b788c:	f7fc fcc8 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b7890:	3401      	adds	r4, #1
   b7892:	e7f1      	b.n	b7878 <loop+0x88c>
          }else if(i == 3 && currentRailway.name == pinkLineCTA.name){
   b7894:	492d      	ldr	r1, [pc, #180]	; (b794c <loop+0x960>)
   b7896:	a827      	add	r0, sp, #156	; 0x9c
   b7898:	f7fd f84c 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b789c:	2800      	cmp	r0, #0
   b789e:	d06d      	beq.n	b797c <loop+0x990>
	return *(this->_M_impl._M_start + __n);
   b78a0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b7974 <loop+0x988>
   b78a4:	f8df b0d0 	ldr.w	fp, [pc, #208]	; b7978 <loop+0x98c>
   b78a8:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
   b78ac:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b78b0:	e9d0 3200 	ldrd	r3, r2, [r0]
   b78b4:	1ad2      	subs	r2, r2, r3
   b78b6:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b78ba:	1a5b      	subs	r3, r3, r1
   b78bc:	109b      	asrs	r3, r3, #2
            for(int j = 0; j < greenLineCTA.outputs[0].size() - pinkLineCTA.outputs[3].size(); j++){
   b78be:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b78c2:	42a3      	cmp	r3, r4
   b78c4:	d95a      	bls.n	b797c <loop+0x990>
              Wire.write('0');
   b78c6:	f003 fc53 	bl	bb170 <_Z19__fetch_global_Wirev>
   b78ca:	2130      	movs	r1, #48	; 0x30
   b78cc:	f7fc fca8 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < greenLineCTA.outputs[0].size() - pinkLineCTA.outputs[3].size(); j++){
   b78d0:	3401      	adds	r4, #1
   b78d2:	e7e9      	b.n	b78a8 <loop+0x8bc>
            val = n;
   b78d4:	4619      	mov	r1, r3
   b78d6:	e07c      	b.n	b79d2 <loop+0x9e6>
        Serial.println();
   b78d8:	f003 fafc 	bl	baed4 <_Z16_fetch_usbserialv>
   b78dc:	f002 fd63 	bl	ba3a6 <_ZN5Print7printlnEv>
      for(int i = 0; i < 4; i++){
   b78e0:	3501      	adds	r5, #1
        Wire.endTransmission();
   b78e2:	f003 fc45 	bl	bb170 <_Z19__fetch_global_Wirev>
   b78e6:	f002 fbe4 	bl	ba0b2 <_ZN7TwoWire15endTransmissionEv>
      for(int i = 0; i < 4; i++){
   b78ea:	2d04      	cmp	r5, #4
   b78ec:	f106 0604 	add.w	r6, r6, #4
   b78f0:	f47f acdf 	bne.w	b72b2 <loop+0x2c6>
   b78f4:	2300      	movs	r3, #0
          currentRailway.outputs[i][j] = 0;
   b78f6:	461c      	mov	r4, r3
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b78f8:	2200      	movs	r2, #0
	return *(this->_M_impl._M_start + __n);
   b78fa:	9924      	ldr	r1, [sp, #144]	; 0x90
   b78fc:	18cd      	adds	r5, r1, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b78fe:	58c8      	ldr	r0, [r1, r3]
   b7900:	6869      	ldr	r1, [r5, #4]
   b7902:	1a09      	subs	r1, r1, r0
   b7904:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
   b7908:	d203      	bcs.n	b7912 <loop+0x926>
          currentRailway.outputs[i][j] = 0;
   b790a:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b790e:	3201      	adds	r2, #1
   b7910:	e7f3      	b.n	b78fa <loop+0x90e>
      for(int i = 0; i < 4; i++){
   b7912:	330c      	adds	r3, #12
   b7914:	2b30      	cmp	r3, #48	; 0x30
   b7916:	d1ef      	bne.n	b78f8 <loop+0x90c>
      Serial.println();
   b7918:	f003 fadc 	bl	baed4 <_Z16_fetch_usbserialv>
   b791c:	f002 fd43 	bl	ba3a6 <_ZN5Print7printlnEv>
      }
   b7920:	a807      	add	r0, sp, #28
   b7922:	f7fc ff11 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      Railway currentRailway = cities[cityIndexBuffer].railways[j];
   b7926:	a81b      	add	r0, sp, #108	; 0x6c
   b7928:	f7fd fb96 	bl	b5058 <_ZN7RailwayD1Ev>
    for(int j = 0; j < cities[cityIndexBuffer].railways.size(); j++){
   b792c:	9b02      	ldr	r3, [sp, #8]
   b792e:	3301      	adds	r3, #1
   b7930:	f7ff bb90 	b.w	b7054 <loop+0x68>
    Serial.println();
   b7934:	f003 face 	bl	baed4 <_Z16_fetch_usbserialv>
}
   b7938:	b037      	add	sp, #220	; 0xdc
   b793a:	ecbd 8b06 	vpop	{d8-d10}
   b793e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Serial.println();
   b7942:	f002 bd30 	b.w	ba3a6 <_ZN5Print7printlnEv>
   b7946:	bf00      	nop
   b7948:	2003545c 	.word	0x2003545c
   b794c:	2003e4b4 	.word	0x2003e4b4
   b7950:	20035574 	.word	0x20035574
   b7954:	20037e10 	.word	0x20037e10
   b7958:	20037de0 	.word	0x20037de0
   b795c:	2003e520 	.word	0x2003e520
   b7960:	20035410 	.word	0x20035410
   b7964:	20037e7c 	.word	0x20037e7c
   b7968:	2003549c 	.word	0x2003549c
   b796c:	2003e5f8 	.word	0x2003e5f8
   b7970:	200355b0 	.word	0x200355b0
   b7974:	20035544 	.word	0x20035544
   b7978:	2003e484 	.word	0x2003e484
        Serial.printf("%s rail part %i: ", currentRailway.name.c_str(), i);
   b797c:	f003 faaa 	bl	baed4 <_Z16_fetch_usbserialv>
   b7980:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   b7982:	492a      	ldr	r1, [pc, #168]	; (b7a2c <loop+0xa40>)
   b7984:	462b      	mov	r3, r5
   b7986:	f7fc fd33 	bl	b43f0 <_ZN5Print6printfEPKcz>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b798a:	240c      	movs	r4, #12
   b798c:	436c      	muls	r4, r5
   b798e:	f04f 0900 	mov.w	r9, #0
	return *(this->_M_impl._M_start + __n);
   b7992:	9a24      	ldr	r2, [sp, #144]	; 0x90
   b7994:	1913      	adds	r3, r2, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7996:	5912      	ldr	r2, [r2, r4]
   b7998:	685b      	ldr	r3, [r3, #4]
   b799a:	1a9b      	subs	r3, r3, r2
   b799c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
   b79a0:	d29a      	bcs.n	b78d8 <loop+0x8ec>
          Wire.write((char)currentRailway.outputs[i][j] + '0');
   b79a2:	f003 fbe5 	bl	bb170 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b79a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b79a8:	591b      	ldr	r3, [r3, r4]
   b79aa:	f813 1029 	ldrb.w	r1, [r3, r9, lsl #2]
   b79ae:	3130      	adds	r1, #48	; 0x30
   b79b0:	f7fc fc36 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
          Serial.print(currentRailway.outputs[i][j]);
   b79b4:	f003 fa8e 	bl	baed4 <_Z16_fetch_usbserialv>
   b79b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b79ba:	591b      	ldr	r3, [r3, r4]
   b79bc:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
        if (n < 0 && base == 10) {
   b79c0:	2b00      	cmp	r3, #0
   b79c2:	4683      	mov	fp, r0
   b79c4:	da86      	bge.n	b78d4 <loop+0x8e8>
            t = print('-');
   b79c6:	212d      	movs	r1, #45	; 0x2d
   b79c8:	9303      	str	r3, [sp, #12]
   b79ca:	f002 fce9 	bl	ba3a0 <_ZN5Print5printEc>
            val = -n;
   b79ce:	9b03      	ldr	r3, [sp, #12]
   b79d0:	4259      	negs	r1, r3
        return printNumber(val, base) + t;
   b79d2:	220a      	movs	r2, #10
   b79d4:	4658      	mov	r0, fp
   b79d6:	f002 fcfc 	bl	ba3d2 <_ZN5Print11printNumberEmh>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b79da:	f109 0901 	add.w	r9, r9, #1
   b79de:	e7d8      	b.n	b7992 <loop+0x9a6>
          if(i == 3 && currentRailway.name == orangeLineCTA.name){
   b79e0:	2d03      	cmp	r5, #3
   b79e2:	d1cb      	bne.n	b797c <loop+0x990>
   b79e4:	4912      	ldr	r1, [pc, #72]	; (b7a30 <loop+0xa44>)
   b79e6:	a827      	add	r0, sp, #156	; 0x9c
   b79e8:	f7fc ffa4 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b79ec:	2800      	cmp	r0, #0
   b79ee:	f43f af51 	beq.w	b7894 <loop+0x8a8>
   b79f2:	f8df 9044 	ldr.w	r9, [pc, #68]	; b7a38 <loop+0xa4c>
   b79f6:	4b0f      	ldr	r3, [pc, #60]	; (b7a34 <loop+0xa48>)
   b79f8:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
   b79fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b79fe:	e9d0 3200 	ldrd	r3, r2, [r0]
   b7a02:	1ad2      	subs	r2, r2, r3
   b7a04:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b7a08:	1a5b      	subs	r3, r3, r1
   b7a0a:	109b      	asrs	r3, r3, #2
            for(int j = 0; j < greenLineCTA.outputs[0].size() - orangeLineCTA.outputs[3].size(); j++){
   b7a0c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b7a10:	42a3      	cmp	r3, r4
   b7a12:	d9b3      	bls.n	b797c <loop+0x990>
              Wire.write('0');
   b7a14:	f003 fbac 	bl	bb170 <_Z19__fetch_global_Wirev>
   b7a18:	2130      	movs	r1, #48	; 0x30
   b7a1a:	f7fc fc01 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < greenLineCTA.outputs[0].size() - orangeLineCTA.outputs[3].size(); j++){
   b7a1e:	3401      	adds	r4, #1
   b7a20:	e7e9      	b.n	b79f6 <loop+0xa0a>
}
   b7a22:	b037      	add	sp, #220	; 0xdc
   b7a24:	ecbd 8b06 	vpop	{d8-d10}
   b7a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7a2c:	000be6f9 	.word	0x000be6f9
   b7a30:	20037e10 	.word	0x20037e10
   b7a34:	20037de0 	.word	0x20037de0
   b7a38:	20035544 	.word	0x20035544

000b7a3c <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b7a3c:	b510      	push	{r4, lr}
   b7a3e:	4604      	mov	r4, r0
   b7a40:	f003 f97a 	bl	bad38 <_ZN9TCPClientC1Ev>
{

}
   b7a44:	4620      	mov	r0, r4
   b7a46:	bd10      	pop	{r4, pc}

000b7a48 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b7a48:	b538      	push	{r3, r4, r5, lr}
   b7a4a:	4604      	mov	r4, r0
   b7a4c:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b7a4e:	f002 fca3 	bl	ba398 <_ZN5Print5printEPKc>
    client.print(": ");
   b7a52:	4905      	ldr	r1, [pc, #20]	; (b7a68 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b7a54:	4620      	mov	r0, r4
   b7a56:	f002 fc9f 	bl	ba398 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b7a5a:	4629      	mov	r1, r5
   b7a5c:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b7a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b7a62:	f002 bcac 	b.w	ba3be <_ZN5Print7printlnEPKc>
   b7a66:	bf00      	nop
   b7a68:	000be3e6 	.word	0x000be3e6

000b7a6c <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b7a6c:	b538      	push	{r3, r4, r5, lr}
   b7a6e:	4605      	mov	r5, r0
   b7a70:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b7a72:	f002 fc91 	bl	ba398 <_ZN5Print5printEPKc>
    client.print(": ");
   b7a76:	490b      	ldr	r1, [pc, #44]	; (b7aa4 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b7a78:	4628      	mov	r0, r5
   b7a7a:	f002 fc8d 	bl	ba398 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b7a7e:	2c00      	cmp	r4, #0
   b7a80:	da0d      	bge.n	b7a9e <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b7a82:	212d      	movs	r1, #45	; 0x2d
   b7a84:	4628      	mov	r0, r5
   b7a86:	f002 fc8b 	bl	ba3a0 <_ZN5Print5printEc>
            val = -n;
   b7a8a:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b7a8c:	4628      	mov	r0, r5
   b7a8e:	220a      	movs	r2, #10
   b7a90:	f002 fc9f 	bl	ba3d2 <_ZN5Print11printNumberEmh>
        n += println();
   b7a94:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b7a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7a9a:	f002 bc84 	b.w	ba3a6 <_ZN5Print7printlnEv>
            val = n;
   b7a9e:	4621      	mov	r1, r4
   b7aa0:	e7f4      	b.n	b7a8c <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b7aa2:	bf00      	nop
   b7aa4:	000be3e6 	.word	0x000be3e6

000b7aa8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b7aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7aac:	460e      	mov	r6, r1
   b7aae:	b091      	sub	sp, #68	; 0x44
   b7ab0:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b7ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7ab6:	6013      	str	r3, [r2, #0]
{
   b7ab8:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b7aba:	2100      	movs	r1, #0
   b7abc:	4630      	mov	r0, r6
   b7abe:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b7ac2:	4617      	mov	r7, r2
   b7ac4:	f002 fdfd 	bl	ba6c2 <_ZNK6String6equalsEPKc>
   b7ac8:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b7acc:	4603      	mov	r3, r0
   b7ace:	b998      	cbnz	r0, b7af8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b7ad0:	f1be 0f00 	cmp.w	lr, #0
   b7ad4:	bf14      	ite	ne
   b7ad6:	4672      	movne	r2, lr
   b7ad8:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b7ada:	6831      	ldr	r1, [r6, #0]
   b7adc:	b292      	uxth	r2, r2
   b7ade:	4620      	mov	r0, r4
   b7ae0:	f002 ff2a 	bl	ba938 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b7ae4:	1e05      	subs	r5, r0, #0
   b7ae6:	bf18      	it	ne
   b7ae8:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b7aea:	b9c5      	cbnz	r5, b7b1e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b7aec:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b7aee:	b011      	add	sp, #68	; 0x44
   b7af0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b7af4:	f003 b8d6 	b.w	baca4 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b7af8:	4b76      	ldr	r3, [pc, #472]	; (b7cd4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b7afa:	930a      	str	r3, [sp, #40]	; 0x28
   b7afc:	f106 0c14 	add.w	ip, r6, #20
   b7b00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7b04:	ad0b      	add	r5, sp, #44	; 0x2c
   b7b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7b08:	f8dc 3000 	ldr.w	r3, [ip]
   b7b0c:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b7b0e:	fa1f f28e 	uxth.w	r2, lr
   b7b12:	2300      	movs	r3, #0
   b7b14:	a90a      	add	r1, sp, #40	; 0x28
   b7b16:	4620      	mov	r0, r4
   b7b18:	f002 ffee 	bl	baaf8 <_ZN9TCPClient7connectE9IPAddresstm>
   b7b1c:	e7e2      	b.n	b7ae4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b7b1e:	4649      	mov	r1, r9
   b7b20:	4620      	mov	r0, r4
   b7b22:	f002 fc39 	bl	ba398 <_ZN5Print5printEPKc>
    client.print(" ");
   b7b26:	496c      	ldr	r1, [pc, #432]	; (b7cd8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b7b28:	4620      	mov	r0, r4
   b7b2a:	f002 fc35 	bl	ba398 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b7b2e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b7b30:	4620      	mov	r0, r4
   b7b32:	f002 fc31 	bl	ba398 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b7b36:	4969      	ldr	r1, [pc, #420]	; (b7cdc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b7b38:	4620      	mov	r0, r4
   b7b3a:	f002 fc2d 	bl	ba398 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b7b3e:	4968      	ldr	r1, [pc, #416]	; (b7ce0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b7b40:	4a68      	ldr	r2, [pc, #416]	; (b7ce4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b7b42:	4620      	mov	r0, r4
   b7b44:	f7ff ff80 	bl	b7a48 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b7b48:	2100      	movs	r1, #0
   b7b4a:	4630      	mov	r0, r6
   b7b4c:	f002 fdb9 	bl	ba6c2 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b7b50:	b920      	cbnz	r0, b7b5c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b7b52:	6832      	ldr	r2, [r6, #0]
   b7b54:	4964      	ldr	r1, [pc, #400]	; (b7ce8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b7b56:	4620      	mov	r0, r4
   b7b58:	f7ff ff76 	bl	b7a48 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b7b5c:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b7b60:	2100      	movs	r1, #0
   b7b62:	4650      	mov	r0, sl
   b7b64:	f002 fdad 	bl	ba6c2 <_ZNK6String6equalsEPKc>
   b7b68:	b928      	cbnz	r0, b7b76 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b7b6a:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b7b6c:	495f      	ldr	r1, [pc, #380]	; (b7cec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b7b6e:	4620      	mov	r0, r4
   b7b70:	f7ff ff7c 	bl	b7a6c <_ZN10HttpClient10sendHeaderEPKci>
   b7b74:	e006      	b.n	b7b84 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b7b76:	495e      	ldr	r1, [pc, #376]	; (b7cf0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b7b78:	4648      	mov	r0, r9
   b7b7a:	f004 fba5 	bl	bc2c8 <strcmp>
   b7b7e:	4602      	mov	r2, r0
   b7b80:	2800      	cmp	r0, #0
   b7b82:	d0f3      	beq.n	b7b6c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b7b84:	f1b8 0f00 	cmp.w	r8, #0
   b7b88:	d00e      	beq.n	b7ba8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b7b8a:	f8d8 1000 	ldr.w	r1, [r8]
   b7b8e:	b159      	cbz	r1, b7ba8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b7b90:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b7b94:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b7b96:	b122      	cbz	r2, b7ba2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b7b98:	f7ff ff56 	bl	b7a48 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b7b9c:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b7ba0:	e7f3      	b.n	b7b8a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b7ba2:	f002 fc0c 	bl	ba3be <_ZN5Print7printlnEPKc>
}
   b7ba6:	e7f9      	b.n	b7b9c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b7ba8:	4620      	mov	r0, r4
   b7baa:	f002 fbfc 	bl	ba3a6 <_ZN5Print7printlnEv>
    client.flush();
   b7bae:	4620      	mov	r0, r4
   b7bb0:	f002 fe22 	bl	ba7f8 <_ZN9TCPClient5flushEv>
   b7bb4:	2100      	movs	r1, #0
   b7bb6:	4650      	mov	r0, sl
   b7bb8:	f002 fd83 	bl	ba6c2 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b7bbc:	b918      	cbnz	r0, b7bc6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b7bbe:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b7bc0:	4620      	mov	r0, r4
   b7bc2:	f002 fbfc 	bl	ba3be <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b7bc6:	f104 0a1c 	add.w	sl, r4, #28
   b7bca:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   b7bce:	2100      	movs	r1, #0
   b7bd0:	4650      	mov	r0, sl
   b7bd2:	f004 fb43 	bl	bc25c <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7bd6:	f000 fddf 	bl	b8798 <HAL_Timer_Get_Milli_Seconds>
   b7bda:	9001      	str	r0, [sp, #4]
   b7bdc:	f000 fddc 	bl	b8798 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b7be0:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b7be4:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b7be6:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b7bea:	4620      	mov	r0, r4
   b7bec:	f003 f800 	bl	babf0 <_ZN9TCPClient9availableEv>
   b7bf0:	b1e8      	cbz	r0, b7c2e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   b7bf2:	4620      	mov	r0, r4
   b7bf4:	f002 fde6 	bl	ba7c4 <_ZN9TCPClient4readEv>
   b7bf8:	4681      	mov	r9, r0
   b7bfa:	f000 fdcd 	bl	b8798 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b7bfe:	f242 73fe 	movw	r3, #10238	; 0x27fe
   b7c02:	429e      	cmp	r6, r3
   b7c04:	9001      	str	r0, [sp, #4]
   b7c06:	d804      	bhi.n	b7c12 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b7c08:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b7c0a:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b7c0e:	3601      	adds	r6, #1
        while (client.available()) {
   b7c10:	e7eb      	b.n	b7bea <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b7c12:	f242 73ff 	movw	r3, #10239	; 0x27ff
   b7c16:	429e      	cmp	r6, r3
   b7c18:	d1f9      	bne.n	b7c0e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b7c1a:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   b7c1e:	2200      	movs	r2, #0
   b7c20:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
                client.stop();
   b7c24:	4620      	mov	r0, r4
   b7c26:	f003 f83d 	bl	baca4 <_ZN9TCPClient4stopEv>
                error = true;
   b7c2a:	46a8      	mov	r8, r5
   b7c2c:	e7ef      	b.n	b7c0e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b7c2e:	19a3      	adds	r3, r4, r6
   b7c30:	7718      	strb	r0, [r3, #28]
   b7c32:	f000 fdb1 	bl	b8798 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b7c36:	9b01      	ldr	r3, [sp, #4]
   b7c38:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b7c3c:	f1b8 0f00 	cmp.w	r8, #0
   b7c40:	d104      	bne.n	b7c4c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
   b7c42:	45d9      	cmp	r9, fp
   b7c44:	d802      	bhi.n	b7c4c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
            delay(200);
   b7c46:	20c8      	movs	r0, #200	; 0xc8
   b7c48:	f000 ffca 	bl	b8be0 <delay>
    } while (client.connected() && !timeout && !error);
   b7c4c:	4620      	mov	r0, r4
   b7c4e:	f002 fef1 	bl	baa34 <_ZN9TCPClient9connectedEv>
   b7c52:	b120      	cbz	r0, b7c5e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b7c54:	45d9      	cmp	r9, fp
   b7c56:	d802      	bhi.n	b7c5e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b7c58:	f1b8 0f00 	cmp.w	r8, #0
   b7c5c:	d0c5      	beq.n	b7bea <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b7c5e:	4620      	mov	r0, r4
   b7c60:	f003 f820 	bl	baca4 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b7c64:	4651      	mov	r1, sl
   b7c66:	a802      	add	r0, sp, #8
   b7c68:	f002 fc53 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b7c6c:	230c      	movs	r3, #12
   b7c6e:	2209      	movs	r2, #9
   b7c70:	a902      	add	r1, sp, #8
   b7c72:	a806      	add	r0, sp, #24
   b7c74:	f002 fd4a 	bl	ba70c <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b7c78:	491e      	ldr	r1, [pc, #120]	; (b7cf4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b7c7a:	a80a      	add	r0, sp, #40	; 0x28
   b7c7c:	f002 fc49 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
   b7c80:	a90a      	add	r1, sp, #40	; 0x28
   b7c82:	a802      	add	r0, sp, #8
   b7c84:	f002 fd3e 	bl	ba704 <_ZNK6String7indexOfERKS_>
   b7c88:	4604      	mov	r4, r0
   b7c8a:	a80a      	add	r0, sp, #40	; 0x28
   b7c8c:	f002 fbf6 	bl	ba47c <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b7c90:	1c63      	adds	r3, r4, #1
   b7c92:	d108      	bne.n	b7ca6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fe>
    String statusCode = raw_response.substring(9,12);
   b7c94:	a806      	add	r0, sp, #24
   b7c96:	f002 fbf1 	bl	ba47c <_ZN6StringD1Ev>
    String raw_response(buffer);
   b7c9a:	a802      	add	r0, sp, #8
   b7c9c:	f002 fbee 	bl	ba47c <_ZN6StringD1Ev>
}
   b7ca0:	b011      	add	sp, #68	; 0x44
   b7ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b7ca6:	1d3d      	adds	r5, r7, #4
   b7ca8:	4913      	ldr	r1, [pc, #76]	; (b7cf8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b7caa:	4628      	mov	r0, r5
   b7cac:	f002 fc79 	bl	ba5a2 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b7cb0:	1d22      	adds	r2, r4, #4
   b7cb2:	a902      	add	r1, sp, #8
   b7cb4:	a80a      	add	r0, sp, #40	; 0x28
   b7cb6:	f002 fd49 	bl	ba74c <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b7cba:	a90a      	add	r1, sp, #40	; 0x28
   b7cbc:	4628      	mov	r0, r5
   b7cbe:	f002 fcac 	bl	ba61a <_ZN6String6concatERKS_>
   b7cc2:	a80a      	add	r0, sp, #40	; 0x28
   b7cc4:	f002 fbda 	bl	ba47c <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b7cc8:	9806      	ldr	r0, [sp, #24]
   b7cca:	f004 fa8b 	bl	bc1e4 <atoi>
   b7cce:	6038      	str	r0, [r7, #0]
   b7cd0:	e7e0      	b.n	b7c94 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ec>
   b7cd2:	bf00      	nop
   b7cd4:	000beb40 	.word	0x000beb40
   b7cd8:	000be680 	.word	0x000be680
   b7cdc:	000be884 	.word	0x000be884
   b7ce0:	000be896 	.word	0x000be896
   b7ce4:	000be890 	.word	0x000be890
   b7ce8:	000be8a1 	.word	0x000be8a1
   b7cec:	000be8a6 	.word	0x000be8a6
   b7cf0:	000be8b5 	.word	0x000be8b5
   b7cf4:	000be8ba 	.word	0x000be8ba
   b7cf8:	000be8be 	.word	0x000be8be

000b7cfc <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   b7cfc:	4770      	bx	lr

000b7cfe <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   b7cfe:	b510      	push	{r4, lr}
}
   b7d00:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   b7d02:	4604      	mov	r4, r0
}
   b7d04:	f7fc f9cd 	bl	b40a2 <_ZdlPvj>
   b7d08:	4620      	mov	r0, r4
   b7d0a:	bd10      	pop	{r4, pc}

000b7d0c <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   b7d0c:	b510      	push	{r4, lr}
   b7d0e:	4b05      	ldr	r3, [pc, #20]	; (b7d24 <_ZN10JsonBufferD1Ev+0x18>)
   b7d10:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b7d12:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b7d14:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b7d16:	b91b      	cbnz	r3, b7d20 <_ZN10JsonBufferD1Ev+0x14>
   b7d18:	6840      	ldr	r0, [r0, #4]
   b7d1a:	b108      	cbz	r0, b7d20 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b7d1c:	f000 ff18 	bl	b8b50 <free>
}
   b7d20:	4620      	mov	r0, r4
   b7d22:	bd10      	pop	{r4, pc}
   b7d24:	000be8cc 	.word	0x000be8cc

000b7d28 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b7d28:	b510      	push	{r4, lr}
   b7d2a:	4604      	mov	r4, r0
}
   b7d2c:	f7ff ffee 	bl	b7d0c <_ZN10JsonBufferD1Ev>
   b7d30:	4620      	mov	r0, r4
   b7d32:	2114      	movs	r1, #20
   b7d34:	f7fc f9b5 	bl	b40a2 <_ZdlPvj>
   b7d38:	4620      	mov	r0, r4
   b7d3a:	bd10      	pop	{r4, pc}

000b7d3c <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b7d3c:	b510      	push	{r4, lr}
   b7d3e:	4b07      	ldr	r3, [pc, #28]	; (b7d5c <_ZN10JsonParserD1Ev+0x20>)
   b7d40:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b7d42:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b7d44:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b7d46:	b91b      	cbnz	r3, b7d50 <_ZN10JsonParserD1Ev+0x14>
   b7d48:	6940      	ldr	r0, [r0, #20]
   b7d4a:	b108      	cbz	r0, b7d50 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b7d4c:	f000 ff00 	bl	b8b50 <free>
JsonParser::~JsonParser() {
   b7d50:	4620      	mov	r0, r4
   b7d52:	f7ff ffdb 	bl	b7d0c <_ZN10JsonBufferD1Ev>
}
   b7d56:	4620      	mov	r0, r4
   b7d58:	bd10      	pop	{r4, pc}
   b7d5a:	bf00      	nop
   b7d5c:	000be8dc 	.word	0x000be8dc

000b7d60 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b7d60:	b510      	push	{r4, lr}
   b7d62:	4604      	mov	r4, r0
}
   b7d64:	f7ff ffea 	bl	b7d3c <_ZN10JsonParserD1Ev>
   b7d68:	4620      	mov	r0, r4
   b7d6a:	212c      	movs	r1, #44	; 0x2c
   b7d6c:	f7fc f999 	bl	b40a2 <_ZdlPvj>
   b7d70:	4620      	mov	r0, r4
   b7d72:	bd10      	pop	{r4, pc}

000b7d74 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b7d74:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b7d76:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b7d78:	4604      	mov	r4, r0
   b7d7a:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b7d7c:	b10b      	cbz	r3, b7d82 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b7d7e:	2000      	movs	r0, #0
}
   b7d80:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b7d82:	6840      	ldr	r0, [r0, #4]
   b7d84:	b138      	cbz	r0, b7d96 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b7d86:	f000 feeb 	bl	b8b60 <realloc>
		if (newBuffer) {
   b7d8a:	2800      	cmp	r0, #0
   b7d8c:	d0f7      	beq.n	b7d7e <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b7d8e:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b7d92:	2001      	movs	r0, #1
   b7d94:	e7f4      	b.n	b7d80 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b7d96:	4608      	mov	r0, r1
   b7d98:	f000 fed2 	bl	b8b40 <malloc>
   b7d9c:	e7f5      	b.n	b7d8a <_ZN10JsonBuffer8allocateEj+0x16>

000b7d9e <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7d9e:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7da0:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7da2:	460e      	mov	r6, r1
   b7da4:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7da6:	18d1      	adds	r1, r2, r3
   b7da8:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7daa:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7dac:	b172      	cbz	r2, b7dcc <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b7dae:	6882      	ldr	r2, [r0, #8]
   b7db0:	428a      	cmp	r2, r1
   b7db2:	d30b      	bcc.n	b7dcc <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b7db4:	6860      	ldr	r0, [r4, #4]
   b7db6:	68e3      	ldr	r3, [r4, #12]
   b7db8:	462a      	mov	r2, r5
   b7dba:	4631      	mov	r1, r6
   b7dbc:	4418      	add	r0, r3
   b7dbe:	f004 fa25 	bl	bc20c <memcpy>
	offset += dataLen;
   b7dc2:	68e2      	ldr	r2, [r4, #12]
   b7dc4:	442a      	add	r2, r5
   b7dc6:	60e2      	str	r2, [r4, #12]
	return true;
   b7dc8:	2001      	movs	r0, #1
}
   b7dca:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b7dcc:	4620      	mov	r0, r4
   b7dce:	f7ff ffd1 	bl	b7d74 <_ZN10JsonBuffer8allocateEj>
   b7dd2:	2800      	cmp	r0, #0
   b7dd4:	d1ee      	bne.n	b7db4 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b7dd6:	e7f8      	b.n	b7dca <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b7dd8 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b7dd8:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b7dda:	2100      	movs	r1, #0
   b7ddc:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b7dde:	b123      	cbz	r3, b7dea <_ZN10JsonBuffer5clearEv+0x12>
   b7de0:	6882      	ldr	r2, [r0, #8]
   b7de2:	b112      	cbz	r2, b7dea <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b7de4:	4618      	mov	r0, r3
   b7de6:	f004 ba39 	b.w	bc25c <memset>
}
   b7dea:	4770      	bx	lr

000b7dec <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b7dec:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b7dee:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b7df2:	2200      	movs	r2, #0
   b7df4:	60c2      	str	r2, [r0, #12]
   b7df6:	2201      	movs	r2, #1
   b7df8:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b7dfa:	6143      	str	r3, [r0, #20]
   b7dfc:	4a02      	ldr	r2, [pc, #8]	; (b7e08 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b7dfe:	9b02      	ldr	r3, [sp, #8]
   b7e00:	6002      	str	r2, [r0, #0]
   b7e02:	61c3      	str	r3, [r0, #28]
}
   b7e04:	bd10      	pop	{r4, pc}
   b7e06:	bf00      	nop
   b7e08:	000be8dc 	.word	0x000be8dc

000b7e0c <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   b7e0c:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   b7e10:	429a      	cmp	r2, r3
   b7e12:	4b04      	ldr	r3, [pc, #16]	; (b7e24 <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b7e14:	bf38      	it	cc
   b7e16:	6082      	strcc	r2, [r0, #8]
   b7e18:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7e1c:	bf24      	itt	cs
   b7e1e:	2300      	movcs	r3, #0
   b7e20:	6083      	strcs	r3, [r0, #8]
}
   b7e22:	4770      	bx	lr
   b7e24:	000be8ec 	.word	0x000be8ec

000b7e28 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b7e28:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b7e2a:	6813      	ldr	r3, [r2, #0]
   b7e2c:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b7e2e:	6813      	ldr	r3, [r2, #0]
   b7e30:	f103 0410 	add.w	r4, r3, #16
   b7e34:	6014      	str	r4, [r2, #0]
   b7e36:	6986      	ldr	r6, [r0, #24]
   b7e38:	42b4      	cmp	r4, r6
   b7e3a:	d20a      	bcs.n	b7e52 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b7e3c:	699b      	ldr	r3, [r3, #24]
   b7e3e:	688c      	ldr	r4, [r1, #8]
   b7e40:	42a3      	cmp	r3, r4
   b7e42:	da01      	bge.n	b7e48 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b7e44:	42ab      	cmp	r3, r5
   b7e46:	ddf2      	ble.n	b7e2e <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b7e48:	42a3      	cmp	r3, r4
   b7e4a:	bfcc      	ite	gt
   b7e4c:	2000      	movgt	r0, #0
   b7e4e:	2001      	movle	r0, #1
   b7e50:	e000      	b.n	b7e54 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b7e52:	2000      	movs	r0, #0
}
   b7e54:	bd70      	pop	{r4, r5, r6, pc}

000b7e56 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b7e56:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7e5a:	9d08      	ldr	r5, [sp, #32]
   b7e5c:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7e5e:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b7e62:	4604      	mov	r4, r0
   b7e64:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7e66:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7e68:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b7e6a:	9801      	ldr	r0, [sp, #4]
   b7e6c:	69a3      	ldr	r3, [r4, #24]
   b7e6e:	4283      	cmp	r3, r0
   b7e70:	d91a      	bls.n	b7ea8 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b7e72:	6882      	ldr	r2, [r0, #8]
   b7e74:	688b      	ldr	r3, [r1, #8]
   b7e76:	429a      	cmp	r2, r3
   b7e78:	da16      	bge.n	b7ea8 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b7e7a:	42ae      	cmp	r6, r5
   b7e7c:	d10b      	bne.n	b7e96 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b7e7e:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b7e80:	aa01      	add	r2, sp, #4
   b7e82:	4620      	mov	r0, r4
   b7e84:	f7ff ffd0 	bl	b7e28 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b7e88:	b128      	cbz	r0, b7e96 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b7e8a:	9b01      	ldr	r3, [sp, #4]
   b7e8c:	f8c8 3000 	str.w	r3, [r8]
}
   b7e90:	b002      	add	sp, #8
   b7e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b7e96:	aa01      	add	r2, sp, #4
   b7e98:	4620      	mov	r0, r4
   b7e9a:	f7ff ffc5 	bl	b7e28 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b7e9e:	4620      	mov	r0, r4
		index++;
   b7ea0:	3601      	adds	r6, #1
		skipObject(container, token);
   b7ea2:	f7ff ffc1 	bl	b7e28 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7ea6:	e7e0      	b.n	b7e6a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b7ea8:	2000      	movs	r0, #0
   b7eaa:	e7f1      	b.n	b7e90 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b7eac <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7eae:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7eb0:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7eb4:	4604      	mov	r4, r0
   b7eb6:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7eb8:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7eba:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b7ebc:	9b01      	ldr	r3, [sp, #4]
   b7ebe:	69a2      	ldr	r2, [r4, #24]
   b7ec0:	429a      	cmp	r2, r3
   b7ec2:	d90f      	bls.n	b7ee4 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b7ec4:	6898      	ldr	r0, [r3, #8]
   b7ec6:	688a      	ldr	r2, [r1, #8]
   b7ec8:	4290      	cmp	r0, r2
   b7eca:	da0b      	bge.n	b7ee4 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b7ecc:	42b5      	cmp	r5, r6
   b7ece:	d103      	bne.n	b7ed8 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b7ed0:	603b      	str	r3, [r7, #0]
			return true;
   b7ed2:	2001      	movs	r0, #1
}
   b7ed4:	b003      	add	sp, #12
   b7ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b7ed8:	aa01      	add	r2, sp, #4
   b7eda:	4620      	mov	r0, r4
		index++;
   b7edc:	3501      	adds	r5, #1
		skipObject(container, token);
   b7ede:	f7ff ffa3 	bl	b7e28 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7ee2:	e7eb      	b.n	b7ebc <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b7ee4:	2000      	movs	r0, #0
   b7ee6:	e7f5      	b.n	b7ed4 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b7ee8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b7ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b7eea:	3b01      	subs	r3, #1
   b7eec:	2400      	movs	r4, #0
   b7eee:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b7ef2:	1bf6      	subs	r6, r6, r7
   b7ef4:	42a6      	cmp	r6, r4
   b7ef6:	dd08      	ble.n	b7f0a <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b7ef8:	42a3      	cmp	r3, r4
   b7efa:	dd06      	ble.n	b7f0a <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b7efc:	6845      	ldr	r5, [r0, #4]
   b7efe:	443d      	add	r5, r7
   b7f00:	5d2d      	ldrb	r5, [r5, r4]
   b7f02:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b7f06:	3401      	adds	r4, #1
   b7f08:	e7f1      	b.n	b7eee <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b7f0a:	2300      	movs	r3, #0
   b7f0c:	7013      	strb	r3, [r2, #0]
}
   b7f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7f10 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b7f10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7f12:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b7f14:	2310      	movs	r3, #16
   b7f16:	466a      	mov	r2, sp
   b7f18:	f7ff ffe6 	bl	b7ee8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b7f1c:	4904      	ldr	r1, [pc, #16]	; (b7f30 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b7f1e:	4622      	mov	r2, r4
   b7f20:	4668      	mov	r0, sp
   b7f22:	f000 fe25 	bl	b8b70 <sscanf>
}
   b7f26:	1e43      	subs	r3, r0, #1
   b7f28:	4258      	negs	r0, r3
   b7f2a:	4158      	adcs	r0, r3
   b7f2c:	b004      	add	sp, #16
   b7f2e:	bd10      	pop	{r4, pc}
   b7f30:	000beba0 	.word	0x000beba0

000b7f34 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
   b7f34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7f36:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b7f38:	2310      	movs	r3, #16
   b7f3a:	466a      	mov	r2, sp
   b7f3c:	f7ff ffd4 	bl	b7ee8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
   b7f40:	4668      	mov	r0, sp
   b7f42:	2100      	movs	r1, #0
   b7f44:	f005 f832 	bl	bcfac <strtof>
}
   b7f48:	2001      	movs	r0, #1
	result = strtof(tmp, 0);
   b7f4a:	ed84 0a00 	vstr	s0, [r4]
}
   b7f4e:	b004      	add	sp, #16
   b7f50:	bd10      	pop	{r4, pc}
	...

000b7f54 <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   b7f54:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7f56:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b7f58:	6889      	ldr	r1, [r1, #8]
   b7f5a:	4e0a      	ldr	r6, [pc, #40]	; (b7f84 <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   b7f5c:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b7f5e:	b161      	cbz	r1, b7f7a <_ZNK13JsonReference5indexEj+0x26>
   b7f60:	6868      	ldr	r0, [r5, #4]
   b7f62:	ab01      	add	r3, sp, #4
   b7f64:	f7ff ffa2 	bl	b7eac <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b7f68:	b138      	cbz	r0, b7f7a <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   b7f6a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b7f6c:	e9c4 6300 	strd	r6, r3, [r4]
   b7f70:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7f72:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   b7f74:	4620      	mov	r0, r4
   b7f76:	b002      	add	sp, #8
   b7f78:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b7f7a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7f7c:	e9c4 6300 	strd	r6, r3, [r4]
   b7f80:	2300      	movs	r3, #0
   b7f82:	e7f6      	b.n	b7f72 <_ZNK13JsonReference5indexEj+0x1e>
   b7f84:	000be8ec 	.word	0x000be8ec

000b7f88 <_ZNK13JsonReference8valueIntEi>:
bool JsonReference::valueBool(bool result) const {
	(void) value(result);
	return result;
}

int JsonReference::valueInt(int result) const {
   b7f88:	b507      	push	{r0, r1, r2, lr}
   b7f8a:	9101      	str	r1, [sp, #4]
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   b7f8c:	6881      	ldr	r1, [r0, #8]
   b7f8e:	b119      	cbz	r1, b7f98 <_ZNK13JsonReference8valueIntEi+0x10>
   b7f90:	6840      	ldr	r0, [r0, #4]
   b7f92:	aa01      	add	r2, sp, #4
   b7f94:	f7ff ffbc 	bl	b7f10 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	(void) value(result);
	return result;
}
   b7f98:	9801      	ldr	r0, [sp, #4]
   b7f9a:	b003      	add	sp, #12
   b7f9c:	f85d fb04 	ldr.w	pc, [sp], #4

000b7fa0 <_ZNK13JsonReference10valueFloatEf>:
unsigned long JsonReference::valueUnsignedLong(unsigned long result) const {
	(void) value(result);
	return result;
}

float JsonReference::valueFloat(float result) const {
   b7fa0:	b507      	push	{r0, r1, r2, lr}
   b7fa2:	6881      	ldr	r1, [r0, #8]
   b7fa4:	ed8d 0a01 	vstr	s0, [sp, #4]
   b7fa8:	b119      	cbz	r1, b7fb2 <_ZNK13JsonReference10valueFloatEf+0x12>
   b7faa:	6840      	ldr	r0, [r0, #4]
   b7fac:	aa01      	add	r2, sp, #4
   b7fae:	f7ff ffc1 	bl	b7f34 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
	(void) value(result);
	return result;
}
   b7fb2:	ed9d 0a01 	vldr	s0, [sp, #4]
   b7fb6:	b003      	add	sp, #12
   b7fb8:	f85d fb04 	ldr.w	pc, [sp], #4

000b7fbc <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b7fbc:	b510      	push	{r4, lr}
   b7fbe:	4604      	mov	r4, r0
	if (str) {
   b7fc0:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b7fc2:	460b      	mov	r3, r1
	if (str) {
   b7fc4:	b128      	cbz	r0, b7fd2 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b7fc6:	f002 fb2c 	bl	ba622 <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b7fca:	68e3      	ldr	r3, [r4, #12]
   b7fcc:	3301      	adds	r3, #1
   b7fce:	60e3      	str	r3, [r4, #12]
	}
}
   b7fd0:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b7fd2:	6860      	ldr	r0, [r4, #4]
   b7fd4:	2800      	cmp	r0, #0
   b7fd6:	d0f8      	beq.n	b7fca <_ZN16JsonParserString6appendEc+0xe>
   b7fd8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b7fdc:	3a01      	subs	r2, #1
   b7fde:	428a      	cmp	r2, r1
			buf[length] = ch;
   b7fe0:	bf88      	it	hi
   b7fe2:	5443      	strbhi	r3, [r0, r1]
   b7fe4:	e7f1      	b.n	b7fca <_ZN16JsonParserString6appendEc+0xe>

000b7fe6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b7fe6:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b7fe8:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b7fea:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7fec:	4608      	mov	r0, r1
		str.append((char)unicode);
   b7fee:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b7ff0:	d804      	bhi.n	b7ffc <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b7ff2:	b003      	add	sp, #12
   b7ff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b7ff8:	f7ff bfe0 	b.w	b7fbc <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b7ffc:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b8000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b8004:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b8008:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b800c:	d207      	bcs.n	b801e <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b800e:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b8012:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b8014:	f7ff ffd2 	bl	b7fbc <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b8018:	9801      	ldr	r0, [sp, #4]
   b801a:	4621      	mov	r1, r4
   b801c:	e7e9      	b.n	b7ff2 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b801e:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b8020:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b8024:	9001      	str	r0, [sp, #4]
   b8026:	f7ff ffc9 	bl	b7fbc <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b802a:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b802e:	9801      	ldr	r0, [sp, #4]
   b8030:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b8034:	e7ee      	b.n	b8014 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b8038 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b8038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b803c:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b803e:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8040:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b8110 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b8044:	4680      	mov	r8, r0
   b8046:	460f      	mov	r7, r1
   b8048:	4615      	mov	r5, r2
			escape = false;
   b804a:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b804c:	68b8      	ldr	r0, [r7, #8]
   b804e:	42b0      	cmp	r0, r6
   b8050:	dd5a      	ble.n	b8108 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b8052:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8056:	5d99      	ldrb	r1, [r3, r6]
   b8058:	199a      	adds	r2, r3, r6
		if (escape) {
   b805a:	2c00      	cmp	r4, #0
   b805c:	d04b      	beq.n	b80f6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b805e:	2975      	cmp	r1, #117	; 0x75
   b8060:	d805      	bhi.n	b806e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b8062:	296d      	cmp	r1, #109	; 0x6d
   b8064:	d807      	bhi.n	b8076 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b8066:	2962      	cmp	r1, #98	; 0x62
   b8068:	d01e      	beq.n	b80a8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b806a:	2966      	cmp	r1, #102	; 0x66
   b806c:	d01e      	beq.n	b80ac <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b806e:	4628      	mov	r0, r5
   b8070:	f7ff ffa4 	bl	b7fbc <_ZN16JsonParserString6appendEc>
				break;
   b8074:	e03d      	b.n	b80f2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b8076:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b807a:	2c07      	cmp	r4, #7
   b807c:	d8f7      	bhi.n	b806e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b807e:	f20f 0c08 	addw	ip, pc, #8
   b8082:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b8086:	bf00      	nop
   b8088:	000b80b1 	.word	0x000b80b1
   b808c:	000b806f 	.word	0x000b806f
   b8090:	000b806f 	.word	0x000b806f
   b8094:	000b806f 	.word	0x000b806f
   b8098:	000b80b5 	.word	0x000b80b5
   b809c:	000b806f 	.word	0x000b806f
   b80a0:	000b80b9 	.word	0x000b80b9
   b80a4:	000b80bd 	.word	0x000b80bd
				str.append('\b');
   b80a8:	2108      	movs	r1, #8
   b80aa:	e7e0      	b.n	b806e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b80ac:	210c      	movs	r1, #12
   b80ae:	e7de      	b.n	b806e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b80b0:	210a      	movs	r1, #10
   b80b2:	e7dc      	b.n	b806e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b80b4:	210d      	movs	r1, #13
   b80b6:	e7da      	b.n	b806e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b80b8:	2109      	movs	r1, #9
   b80ba:	e7d8      	b.n	b806e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b80bc:	1d31      	adds	r1, r6, #4
   b80be:	4288      	cmp	r0, r1
   b80c0:	dd17      	ble.n	b80f2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b80c2:	a902      	add	r1, sp, #8
   b80c4:	3304      	adds	r3, #4
   b80c6:	4433      	add	r3, r6
   b80c8:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b80ca:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b80ce:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b80d2:	429a      	cmp	r2, r3
   b80d4:	d1f9      	bne.n	b80ca <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b80d6:	aa01      	add	r2, sp, #4
   b80d8:	4651      	mov	r1, sl
					tmp[4] = 0;
   b80da:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b80de:	f000 fd47 	bl	b8b70 <sscanf>
   b80e2:	2801      	cmp	r0, #1
   b80e4:	d105      	bne.n	b80f2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b80e6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b80ea:	4629      	mov	r1, r5
   b80ec:	f7ff ff7b 	bl	b7fe6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b80f0:	3605      	adds	r6, #5
			escape = false;
   b80f2:	2400      	movs	r4, #0
   b80f4:	e004      	b.n	b8100 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b80f6:	295c      	cmp	r1, #92	; 0x5c
   b80f8:	d004      	beq.n	b8104 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b80fa:	4628      	mov	r0, r5
   b80fc:	f7ff ff5e 	bl	b7fbc <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b8100:	3601      	adds	r6, #1
   b8102:	e7a3      	b.n	b804c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b8104:	2401      	movs	r4, #1
   b8106:	e7fb      	b.n	b8100 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b8108:	2001      	movs	r0, #1
   b810a:	b004      	add	sp, #16
   b810c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8110:	000be8bf 	.word	0x000be8bf

000b8114 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b8114:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8116:	460c      	mov	r4, r1
   b8118:	4606      	mov	r6, r0
	result = "";
   b811a:	490c      	ldr	r1, [pc, #48]	; (b814c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b811c:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b811e:	4615      	mov	r5, r2
	result = "";
   b8120:	f002 fa3f 	bl	ba5a2 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b8124:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b8128:	1ac9      	subs	r1, r1, r3
   b812a:	3101      	adds	r1, #1
   b812c:	4628      	mov	r0, r5
   b812e:	f002 f9c3 	bl	ba4b8 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b8132:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b8134:	466a      	mov	r2, sp
   b8136:	4621      	mov	r1, r4
   b8138:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b813a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b813e:	9500      	str	r5, [sp, #0]
   b8140:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b8142:	f7ff ff79 	bl	b8038 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b8146:	b004      	add	sp, #16
   b8148:	bd70      	pop	{r4, r5, r6, pc}
   b814a:	bf00      	nop
   b814c:	000be8be 	.word	0x000be8be

000b8150 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8154:	b089      	sub	sp, #36	; 0x24
   b8156:	4605      	mov	r5, r0
   b8158:	4688      	mov	r8, r1
	String keyName;
   b815a:	a804      	add	r0, sp, #16
   b815c:	4912      	ldr	r1, [pc, #72]	; (b81a8 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b815e:	4616      	mov	r6, r2
   b8160:	4699      	mov	r9, r3
	String keyName;
   b8162:	f002 f9d6 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b8166:	2700      	movs	r7, #0
   b8168:	9700      	str	r7, [sp, #0]
   b816a:	464b      	mov	r3, r9
   b816c:	aa03      	add	r2, sp, #12
   b816e:	4641      	mov	r1, r8
   b8170:	4628      	mov	r0, r5
   b8172:	f7ff fe70 	bl	b7e56 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b8176:	4604      	mov	r4, r0
   b8178:	b170      	cbz	r0, b8198 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b817a:	9903      	ldr	r1, [sp, #12]
   b817c:	aa04      	add	r2, sp, #16
   b817e:	4628      	mov	r0, r5
   b8180:	f7ff ffc8 	bl	b8114 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b8184:	4604      	mov	r4, r0
   b8186:	b908      	cbnz	r0, b818c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b8188:	3701      	adds	r7, #1
   b818a:	e7ed      	b.n	b8168 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b818c:	4631      	mov	r1, r6
   b818e:	a804      	add	r0, sp, #16
   b8190:	f002 fa97 	bl	ba6c2 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b8194:	2800      	cmp	r0, #0
   b8196:	d0f7      	beq.n	b8188 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b8198:	a804      	add	r0, sp, #16
   b819a:	f002 f96f 	bl	ba47c <_ZN6StringD1Ev>
}
   b819e:	4620      	mov	r0, r4
   b81a0:	b009      	add	sp, #36	; 0x24
   b81a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b81a6:	bf00      	nop
   b81a8:	000be8be 	.word	0x000be8be

000b81ac <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   b81ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b81ae:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b81b0:	6889      	ldr	r1, [r1, #8]
   b81b2:	4e0a      	ldr	r6, [pc, #40]	; (b81dc <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   b81b4:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b81b6:	b161      	cbz	r1, b81d2 <_ZNK13JsonReference3keyEPKc+0x26>
   b81b8:	6868      	ldr	r0, [r5, #4]
   b81ba:	ab01      	add	r3, sp, #4
   b81bc:	f7ff ffc8 	bl	b8150 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b81c0:	b138      	cbz	r0, b81d2 <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   b81c2:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b81c4:	e9c4 6300 	strd	r6, r3, [r4]
   b81c8:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b81ca:	60a3      	str	r3, [r4, #8]
}
   b81cc:	4620      	mov	r0, r4
   b81ce:	b002      	add	sp, #8
   b81d0:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b81d2:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b81d4:	e9c4 6300 	strd	r6, r3, [r4]
   b81d8:	2300      	movs	r3, #0
   b81da:	e7f6      	b.n	b81ca <_ZNK13JsonReference3keyEPKc+0x1e>
   b81dc:	000be8ec 	.word	0x000be8ec

000b81e0 <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   b81e0:	b538      	push	{r3, r4, r5, lr}
   b81e2:	460d      	mov	r5, r1
	String result;
   b81e4:	4905      	ldr	r1, [pc, #20]	; (b81fc <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   b81e6:	4604      	mov	r4, r0
	String result;
   b81e8:	f002 f993 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
   b81ec:	68a9      	ldr	r1, [r5, #8]
   b81ee:	b119      	cbz	r1, b81f8 <_ZNK13JsonReference11valueStringEv+0x18>
   b81f0:	6868      	ldr	r0, [r5, #4]
   b81f2:	4622      	mov	r2, r4
   b81f4:	f7ff ff8e 	bl	b8114 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   b81f8:	4620      	mov	r0, r4
   b81fa:	bd38      	pop	{r3, r4, r5, pc}
   b81fc:	000be8be 	.word	0x000be8be

000b8200 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b8200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b8204:	6844      	ldr	r4, [r0, #4]
   b8206:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b820a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b820e:	f8d0 e000 	ldr.w	lr, [r0]
   b8212:	4596      	cmp	lr, r2
   b8214:	f080 81b9 	bcs.w	b858a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b8218:	f811 800e 	ldrb.w	r8, [r1, lr]
   b821c:	f1b8 0f00 	cmp.w	r8, #0
   b8220:	f000 81b3 	beq.w	b858a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b8224:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b8228:	f000 8098 	beq.w	b835c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b822c:	d833      	bhi.n	b8296 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b822e:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b8232:	f000 80a6 	beq.w	b8382 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b8236:	d810      	bhi.n	b825a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b8238:	f1a8 0809 	sub.w	r8, r8, #9
   b823c:	fa5f f888 	uxtb.w	r8, r8
   b8240:	f1b8 0f17 	cmp.w	r8, #23
   b8244:	d80d      	bhi.n	b8262 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b8246:	4d9f      	ldr	r5, [pc, #636]	; (b84c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b8248:	fa0c f808 	lsl.w	r8, ip, r8
   b824c:	ea18 0f05 	tst.w	r8, r5
   b8250:	d007      	beq.n	b8262 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8252:	6805      	ldr	r5, [r0, #0]
   b8254:	3501      	adds	r5, #1
   b8256:	6005      	str	r5, [r0, #0]
   b8258:	e7d9      	b.n	b820e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b825a:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b825e:	f000 8133 	beq.w	b84c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8262:	f8d0 8000 	ldr.w	r8, [r0]
   b8266:	4542      	cmp	r2, r8
   b8268:	d90e      	bls.n	b8288 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b826a:	f811 5008 	ldrb.w	r5, [r1, r8]
   b826e:	b15d      	cbz	r5, b8288 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b8270:	2d3a      	cmp	r5, #58	; 0x3a
   b8272:	f200 8169 	bhi.w	b8548 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b8276:	2d1f      	cmp	r5, #31
   b8278:	f200 8151 	bhi.w	b851e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b827c:	2d0a      	cmp	r5, #10
   b827e:	f200 8160 	bhi.w	b8542 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b8282:	2d08      	cmp	r5, #8
   b8284:	f240 8156 	bls.w	b8534 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b8288:	2b00      	cmp	r3, #0
   b828a:	f040 8162 	bne.w	b8552 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b828e:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b8292:	6005      	str	r5, [r0, #0]
   b8294:	e0a5      	b.n	b83e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b8296:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b829a:	d037      	beq.n	b830c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b829c:	d82e      	bhi.n	b82fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b829e:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b82a2:	d033      	beq.n	b830c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b82a4:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b82a8:	d1db      	bne.n	b8262 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b82aa:	2b00      	cmp	r3, #0
   b82ac:	d0d1      	beq.n	b8252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b82ae:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b82b2:	6845      	ldr	r5, [r0, #4]
   b82b4:	3d01      	subs	r5, #1
   b82b6:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b82ba:	2d00      	cmp	r5, #0
   b82bc:	db55      	blt.n	b836a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b82be:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b82c2:	3701      	adds	r7, #1
   b82c4:	d04d      	beq.n	b8362 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b82c6:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b82ca:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b82ce:	d148      	bne.n	b8362 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b82d0:	f898 b000 	ldrb.w	fp, [r8]
   b82d4:	45cb      	cmp	fp, r9
   b82d6:	d14b      	bne.n	b8370 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b82d8:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b82dc:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b82e0:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b82e4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b82e8:	f8de 7004 	ldr.w	r7, [lr, #4]
   b82ec:	3701      	adds	r7, #1
   b82ee:	d042      	beq.n	b8376 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b82f0:	f8de 7008 	ldr.w	r7, [lr, #8]
   b82f4:	3701      	adds	r7, #1
   b82f6:	d13e      	bne.n	b8376 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b82f8:	6085      	str	r5, [r0, #8]
				break;
   b82fa:	e7aa      	b.n	b8252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b82fc:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b8300:	d1af      	bne.n	b8262 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b8302:	2b00      	cmp	r3, #0
   b8304:	d0a5      	beq.n	b8252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b8306:	f04f 0901 	mov.w	r9, #1
   b830a:	e7d2      	b.n	b82b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b830c:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b830e:	2b00      	cmp	r3, #0
   b8310:	d09f      	beq.n	b8252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b8312:	6845      	ldr	r5, [r0, #4]
   b8314:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b8316:	42af      	cmp	r7, r5
   b8318:	d94a      	bls.n	b83b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b831a:	f105 0e01 	add.w	lr, r5, #1
   b831e:	f8c0 e004 	str.w	lr, [r0, #4]
   b8322:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b8326:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b832a:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b832e:	2500      	movs	r5, #0
   b8330:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b8334:	6885      	ldr	r5, [r0, #8]
   b8336:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b8338:	bf1f      	itttt	ne
   b833a:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b833e:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b8342:	3501      	addne	r5, #1
   b8344:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b8348:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b834c:	bf0c      	ite	eq
   b834e:	2501      	moveq	r5, #1
   b8350:	2502      	movne	r5, #2
   b8352:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b8356:	6805      	ldr	r5, [r0, #0]
   b8358:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b835c:	6845      	ldr	r5, [r0, #4]
   b835e:	3d01      	subs	r5, #1
   b8360:	e7ca      	b.n	b82f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b8362:	3d01      	subs	r5, #1
   b8364:	f1a8 0810 	sub.w	r8, r8, #16
   b8368:	e7a7      	b.n	b82ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b836a:	3501      	adds	r5, #1
   b836c:	f47f af71 	bne.w	b8252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b8370:	f06f 0401 	mvn.w	r4, #1
   b8374:	e01e      	b.n	b83b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b8376:	3d01      	subs	r5, #1
   b8378:	1c6f      	adds	r7, r5, #1
   b837a:	f1ae 0e10 	sub.w	lr, lr, #16
   b837e:	d1b3      	bne.n	b82e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b8380:	e767      	b.n	b8252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b8382:	f10e 0901 	add.w	r9, lr, #1
   b8386:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b838a:	f8d0 8000 	ldr.w	r8, [r0]
   b838e:	4542      	cmp	r2, r8
   b8390:	f240 8093 	bls.w	b84ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b8394:	f811 5008 	ldrb.w	r5, [r1, r8]
   b8398:	2d00      	cmp	r5, #0
   b839a:	f000 808e 	beq.w	b84ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b839e:	2d22      	cmp	r5, #34	; 0x22
   b83a0:	d130      	bne.n	b8404 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b83a2:	b1f3      	cbz	r3, b83e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b83a4:	6845      	ldr	r5, [r0, #4]
   b83a6:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b83a8:	42af      	cmp	r7, r5
   b83aa:	d806      	bhi.n	b83ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b83ac:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b83b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b83b4:	4620      	mov	r0, r4
   b83b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b83ba:	f105 0e01 	add.w	lr, r5, #1
   b83be:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b83c2:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b83c6:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b83ca:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b83ce:	2700      	movs	r7, #0
   b83d0:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b83d2:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b83d6:	f04f 0a03 	mov.w	sl, #3
   b83da:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b83de:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b83e2:	6885      	ldr	r5, [r0, #8]
   b83e4:	1c6f      	adds	r7, r5, #1
				count++;
   b83e6:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b83ea:	f43f af32 	beq.w	b8252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b83ee:	2b00      	cmp	r3, #0
   b83f0:	f43f af2f 	beq.w	b8252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b83f4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b83f8:	f8de 500c 	ldr.w	r5, [lr, #12]
   b83fc:	3501      	adds	r5, #1
   b83fe:	f8ce 500c 	str.w	r5, [lr, #12]
   b8402:	e726      	b.n	b8252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b8404:	2d5c      	cmp	r5, #92	; 0x5c
   b8406:	d111      	bne.n	b842c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b8408:	f108 0501 	add.w	r5, r8, #1
   b840c:	42aa      	cmp	r2, r5
   b840e:	d90d      	bls.n	b842c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b8410:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b8412:	5d4d      	ldrb	r5, [r1, r5]
   b8414:	2d75      	cmp	r5, #117	; 0x75
   b8416:	d82b      	bhi.n	b8470 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b8418:	2d6d      	cmp	r5, #109	; 0x6d
   b841a:	d80b      	bhi.n	b8434 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b841c:	2d66      	cmp	r5, #102	; 0x66
   b841e:	d827      	bhi.n	b8470 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b8420:	2d5b      	cmp	r5, #91	; 0x5b
   b8422:	d81d      	bhi.n	b8460 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b8424:	2d22      	cmp	r5, #34	; 0x22
   b8426:	d001      	beq.n	b842c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b8428:	2d2f      	cmp	r5, #47	; 0x2f
   b842a:	d121      	bne.n	b8470 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b842c:	6805      	ldr	r5, [r0, #0]
   b842e:	3501      	adds	r5, #1
   b8430:	6005      	str	r5, [r0, #0]
   b8432:	e7aa      	b.n	b838a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b8434:	3d6e      	subs	r5, #110	; 0x6e
   b8436:	2d07      	cmp	r5, #7
   b8438:	d81a      	bhi.n	b8470 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b843a:	a701      	add	r7, pc, #4	; (adr r7, b8440 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b843c:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b8440:	000b842d 	.word	0x000b842d
   b8444:	000b8471 	.word	0x000b8471
   b8448:	000b8471 	.word	0x000b8471
   b844c:	000b8471 	.word	0x000b8471
   b8450:	000b842d 	.word	0x000b842d
   b8454:	000b8471 	.word	0x000b8471
   b8458:	000b842d 	.word	0x000b842d
   b845c:	000b8477 	.word	0x000b8477
   b8460:	3d5c      	subs	r5, #92	; 0x5c
   b8462:	b2ed      	uxtb	r5, r5
   b8464:	fa0c f505 	lsl.w	r5, ip, r5
   b8468:	f240 4741 	movw	r7, #1089	; 0x441
   b846c:	423d      	tst	r5, r7
   b846e:	d1dd      	bne.n	b842c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b8470:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b8474:	e77c      	b.n	b8370 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b8476:	f108 0502 	add.w	r5, r8, #2
   b847a:	6005      	str	r5, [r0, #0]
   b847c:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8480:	f8d0 8000 	ldr.w	r8, [r0]
   b8484:	4542      	cmp	r2, r8
   b8486:	d803      	bhi.n	b8490 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b8488:	6805      	ldr	r5, [r0, #0]
   b848a:	3d01      	subs	r5, #1
   b848c:	6005      	str	r5, [r0, #0]
					break;
   b848e:	e7cd      	b.n	b842c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8490:	f811 5008 	ldrb.w	r5, [r1, r8]
   b8494:	2d00      	cmp	r5, #0
   b8496:	d0f7      	beq.n	b8488 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b8498:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b849c:	f1bb 0f09 	cmp.w	fp, #9
   b84a0:	d904      	bls.n	b84ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b84a2:	f025 0520 	bic.w	r5, r5, #32
   b84a6:	3d41      	subs	r5, #65	; 0x41
   b84a8:	2d05      	cmp	r5, #5
   b84aa:	d8e1      	bhi.n	b8470 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b84ac:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b84b0:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b84b4:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b84b6:	d1e3      	bne.n	b8480 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b84b8:	e7e6      	b.n	b8488 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b84ba:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b84be:	f06f 0402 	mvn.w	r4, #2
   b84c2:	e777      	b.n	b83b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b84c4:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b84c8:	2b00      	cmp	r3, #0
   b84ca:	f43f aec2 	beq.w	b8252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b84ce:	6885      	ldr	r5, [r0, #8]
   b84d0:	1c6f      	adds	r7, r5, #1
   b84d2:	f43f aebe 	beq.w	b8252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b84d6:	012d      	lsls	r5, r5, #4
   b84d8:	5d5d      	ldrb	r5, [r3, r5]
   b84da:	3d01      	subs	r5, #1
   b84dc:	2d01      	cmp	r5, #1
   b84de:	f67f aeb8 	bls.w	b8252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b84e2:	6845      	ldr	r5, [r0, #4]
   b84e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b84e8:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b84ec:	f1b8 0f00 	cmp.w	r8, #0
   b84f0:	f6ff aeaf 	blt.w	b8252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b84f4:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b84f8:	3d01      	subs	r5, #1
   b84fa:	2d01      	cmp	r5, #1
   b84fc:	d80a      	bhi.n	b8514 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b84fe:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b8502:	3501      	adds	r5, #1
   b8504:	d006      	beq.n	b8514 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b8506:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b850a:	3501      	adds	r5, #1
   b850c:	d102      	bne.n	b8514 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b850e:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b8512:	e69e      	b.n	b8252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b8514:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8518:	f1ae 0e10 	sub.w	lr, lr, #16
   b851c:	e7e6      	b.n	b84ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b851e:	f1a5 0920 	sub.w	r9, r5, #32
   b8522:	4f24      	ldr	r7, [pc, #144]	; (b85b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b8524:	fa5f f989 	uxtb.w	r9, r9
   b8528:	fa0c f909 	lsl.w	r9, ip, r9
   b852c:	ea19 0f07 	tst.w	r9, r7
   b8530:	f47f aeaa 	bne.w	b8288 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b8534:	3d20      	subs	r5, #32
   b8536:	2d5e      	cmp	r5, #94	; 0x5e
   b8538:	d89a      	bhi.n	b8470 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b853a:	f108 0501 	add.w	r5, r8, #1
   b853e:	6005      	str	r5, [r0, #0]
   b8540:	e68f      	b.n	b8262 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b8542:	2d0d      	cmp	r5, #13
   b8544:	d1f6      	bne.n	b8534 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b8546:	e69f      	b.n	b8288 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b8548:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b854c:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b8550:	e7f8      	b.n	b8544 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b8552:	6845      	ldr	r5, [r0, #4]
   b8554:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b8556:	42af      	cmp	r7, r5
   b8558:	f67f af28 	bls.w	b83ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b855c:	f105 0801 	add.w	r8, r5, #1
   b8560:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b8564:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b8568:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b856c:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b8570:	2700      	movs	r7, #0
   b8572:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b8574:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b8578:	f04f 0a04 	mov.w	sl, #4
   b857c:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b8580:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b8584:	6805      	ldr	r5, [r0, #0]
   b8586:	3d01      	subs	r5, #1
   b8588:	e683      	b.n	b8292 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b858a:	2b00      	cmp	r3, #0
   b858c:	f43f af12 	beq.w	b83b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b8590:	6842      	ldr	r2, [r0, #4]
   b8592:	1e51      	subs	r1, r2, #1
   b8594:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b8598:	2900      	cmp	r1, #0
   b859a:	f6ff af0b 	blt.w	b83b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b859e:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b85a2:	3201      	adds	r2, #1
   b85a4:	d003      	beq.n	b85ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b85a6:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b85aa:	3201      	adds	r2, #1
   b85ac:	d087      	beq.n	b84be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b85ae:	3901      	subs	r1, #1
   b85b0:	3b10      	subs	r3, #16
   b85b2:	e7f1      	b.n	b8598 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b85b4:	04001001 	.word	0x04001001

000b85b8 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b85b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b85ba:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b85bc:	4604      	mov	r4, r0
	if (offset == 0) {
   b85be:	b912      	cbnz	r2, b85c6 <_ZN10JsonParser5parseEv+0xe>
		return false;
   b85c0:	2000      	movs	r0, #0
}
   b85c2:	b003      	add	sp, #12
   b85c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b85c6:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b85c8:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b85cc:	b1ab      	cbz	r3, b85fa <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b85ce:	2100      	movs	r1, #0
	parser->toknext = 0;
   b85d0:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b85d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b85d8:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b85da:	69c1      	ldr	r1, [r0, #28]
   b85dc:	9100      	str	r1, [sp, #0]
   b85de:	6841      	ldr	r1, [r0, #4]
   b85e0:	4630      	mov	r0, r6
   b85e2:	f7ff fe0d 	bl	b8200 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b85e6:	1c43      	adds	r3, r0, #1
   b85e8:	d128      	bne.n	b863c <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b85ea:	7c25      	ldrb	r5, [r4, #16]
   b85ec:	2d00      	cmp	r5, #0
   b85ee:	d1e7      	bne.n	b85c0 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b85f0:	6960      	ldr	r0, [r4, #20]
   b85f2:	f000 faad 	bl	b8b50 <free>
			tokens = 0;
   b85f6:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b85f8:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b85fa:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b85fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b8600:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b8604:	68e2      	ldr	r2, [r4, #12]
   b8606:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b8608:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b860a:	9500      	str	r5, [sp, #0]
   b860c:	462b      	mov	r3, r5
   b860e:	4630      	mov	r0, r6
   b8610:	f7ff fdf6 	bl	b8200 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b8614:	2800      	cmp	r0, #0
   b8616:	dbd3      	blt.n	b85c0 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b8618:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b861a:	d017      	beq.n	b864c <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b861c:	0100      	lsls	r0, r0, #4
   b861e:	f000 fa8f 	bl	b8b40 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b8622:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b8624:	6160      	str	r0, [r4, #20]
   b8626:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b8628:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b862a:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b862e:	68e2      	ldr	r2, [r4, #12]
   b8630:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b8632:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b8634:	4630      	mov	r0, r6
   b8636:	f7ff fde3 	bl	b8200 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b863a:	e001      	b.n	b8640 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b863c:	2800      	cmp	r0, #0
   b863e:	dbbf      	blt.n	b85c0 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b8640:	6963      	ldr	r3, [r4, #20]
   b8642:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b8646:	61a0      	str	r0, [r4, #24]
	return true;
   b8648:	2001      	movs	r0, #1
   b864a:	e7ba      	b.n	b85c2 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b864c:	6963      	ldr	r3, [r4, #20]
   b864e:	61a3      	str	r3, [r4, #24]
   b8650:	e7fa      	b.n	b8648 <_ZN10JsonParser5parseEv+0x90>
	...

000b8654 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b8654:	b508      	push	{r3, lr}
   b8656:	4b02      	ldr	r3, [pc, #8]	; (b8660 <hal_ble_stack_init+0xc>)
   b8658:	681b      	ldr	r3, [r3, #0]
   b865a:	689b      	ldr	r3, [r3, #8]
   b865c:	9301      	str	r3, [sp, #4]
   b865e:	bd08      	pop	{r3, pc}
   b8660:	00030278 	.word	0x00030278

000b8664 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b8664:	b508      	push	{r3, lr}
   b8666:	4b02      	ldr	r3, [pc, #8]	; (b8670 <hal_ble_gap_set_advertising_data+0xc>)
   b8668:	681b      	ldr	r3, [r3, #0]
   b866a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b866c:	9301      	str	r3, [sp, #4]
   b866e:	bd08      	pop	{r3, pc}
   b8670:	00030278 	.word	0x00030278

000b8674 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b8674:	b508      	push	{r3, lr}
   b8676:	4b02      	ldr	r3, [pc, #8]	; (b8680 <hal_ble_gap_set_scan_response_data+0xc>)
   b8678:	681b      	ldr	r3, [r3, #0]
   b867a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b867c:	9301      	str	r3, [sp, #4]
   b867e:	bd08      	pop	{r3, pc}
   b8680:	00030278 	.word	0x00030278

000b8684 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b8684:	b508      	push	{r3, lr}
   b8686:	4b02      	ldr	r3, [pc, #8]	; (b8690 <hal_ble_gap_start_advertising+0xc>)
   b8688:	681b      	ldr	r3, [r3, #0]
   b868a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b868c:	9301      	str	r3, [sp, #4]
   b868e:	bd08      	pop	{r3, pc}
   b8690:	00030278 	.word	0x00030278

000b8694 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b8694:	b508      	push	{r3, lr}
   b8696:	4b03      	ldr	r3, [pc, #12]	; (b86a4 <hal_ble_gap_disconnect+0x10>)
   b8698:	681b      	ldr	r3, [r3, #0]
   b869a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b869e:	9301      	str	r3, [sp, #4]
   b86a0:	bd08      	pop	{r3, pc}
   b86a2:	0000      	.short	0x0000
   b86a4:	00030278 	.word	0x00030278

000b86a8 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b86a8:	b508      	push	{r3, lr}
   b86aa:	4b03      	ldr	r3, [pc, #12]	; (b86b8 <hal_ble_gatt_server_add_service+0x10>)
   b86ac:	681b      	ldr	r3, [r3, #0]
   b86ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b86b2:	9301      	str	r3, [sp, #4]
   b86b4:	bd08      	pop	{r3, pc}
   b86b6:	0000      	.short	0x0000
   b86b8:	00030278 	.word	0x00030278

000b86bc <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b86bc:	b508      	push	{r3, lr}
   b86be:	4b03      	ldr	r3, [pc, #12]	; (b86cc <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b86c0:	681b      	ldr	r3, [r3, #0]
   b86c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b86c6:	9301      	str	r3, [sp, #4]
   b86c8:	bd08      	pop	{r3, pc}
   b86ca:	0000      	.short	0x0000
   b86cc:	00030278 	.word	0x00030278

000b86d0 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b86d0:	b508      	push	{r3, lr}
   b86d2:	4b03      	ldr	r3, [pc, #12]	; (b86e0 <hal_ble_gatt_client_write_with_response+0x10>)
   b86d4:	681b      	ldr	r3, [r3, #0]
   b86d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b86da:	9301      	str	r3, [sp, #4]
   b86dc:	bd08      	pop	{r3, pc}
   b86de:	0000      	.short	0x0000
   b86e0:	00030278 	.word	0x00030278

000b86e4 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b86e4:	b508      	push	{r3, lr}
   b86e6:	4b03      	ldr	r3, [pc, #12]	; (b86f4 <hal_ble_gatt_client_write_without_response+0x10>)
   b86e8:	681b      	ldr	r3, [r3, #0]
   b86ea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b86ee:	9301      	str	r3, [sp, #4]
   b86f0:	bd08      	pop	{r3, pc}
   b86f2:	0000      	.short	0x0000
   b86f4:	00030278 	.word	0x00030278

000b86f8 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b86f8:	b508      	push	{r3, lr}
   b86fa:	4b03      	ldr	r3, [pc, #12]	; (b8708 <hal_ble_gatt_server_add_characteristic+0x10>)
   b86fc:	681b      	ldr	r3, [r3, #0]
   b86fe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b8702:	9301      	str	r3, [sp, #4]
   b8704:	bd08      	pop	{r3, pc}
   b8706:	0000      	.short	0x0000
   b8708:	00030278 	.word	0x00030278

000b870c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b870c:	b508      	push	{r3, lr}
   b870e:	4b03      	ldr	r3, [pc, #12]	; (b871c <hal_ble_set_callback_on_periph_link_events+0x10>)
   b8710:	681b      	ldr	r3, [r3, #0]
   b8712:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b8716:	9301      	str	r3, [sp, #4]
   b8718:	bd08      	pop	{r3, pc}
   b871a:	0000      	.short	0x0000
   b871c:	00030278 	.word	0x00030278

000b8720 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8720:	b508      	push	{r3, lr}
   b8722:	4b03      	ldr	r3, [pc, #12]	; (b8730 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b8724:	681b      	ldr	r3, [r3, #0]
   b8726:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b872a:	9301      	str	r3, [sp, #4]
   b872c:	bd08      	pop	{r3, pc}
   b872e:	0000      	.short	0x0000
   b8730:	00030278 	.word	0x00030278

000b8734 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8734:	b508      	push	{r3, lr}
   b8736:	4b03      	ldr	r3, [pc, #12]	; (b8744 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b8738:	681b      	ldr	r3, [r3, #0]
   b873a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b873e:	9301      	str	r3, [sp, #4]
   b8740:	bd08      	pop	{r3, pc}
   b8742:	0000      	.short	0x0000
   b8744:	00030278 	.word	0x00030278

000b8748 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b8748:	b508      	push	{r3, lr}
   b874a:	4b02      	ldr	r3, [pc, #8]	; (b8754 <os_mutex_recursive_create+0xc>)
   b874c:	681b      	ldr	r3, [r3, #0]
   b874e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8750:	9301      	str	r3, [sp, #4]
   b8752:	bd08      	pop	{r3, pc}
   b8754:	00030248 	.word	0x00030248

000b8758 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b8758:	b508      	push	{r3, lr}
   b875a:	4b02      	ldr	r3, [pc, #8]	; (b8764 <os_mutex_recursive_lock+0xc>)
   b875c:	681b      	ldr	r3, [r3, #0]
   b875e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8760:	9301      	str	r3, [sp, #4]
   b8762:	bd08      	pop	{r3, pc}
   b8764:	00030248 	.word	0x00030248

000b8768 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b8768:	b508      	push	{r3, lr}
   b876a:	4b02      	ldr	r3, [pc, #8]	; (b8774 <os_mutex_recursive_unlock+0xc>)
   b876c:	681b      	ldr	r3, [r3, #0]
   b876e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8770:	9301      	str	r3, [sp, #4]
   b8772:	bd08      	pop	{r3, pc}
   b8774:	00030248 	.word	0x00030248

000b8778 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8778:	b508      	push	{r3, lr}
   b877a:	4b02      	ldr	r3, [pc, #8]	; (b8784 <HAL_RNG_GetRandomNumber+0xc>)
   b877c:	681b      	ldr	r3, [r3, #0]
   b877e:	685b      	ldr	r3, [r3, #4]
   b8780:	9301      	str	r3, [sp, #4]
   b8782:	bd08      	pop	{r3, pc}
   b8784:	00030218 	.word	0x00030218

000b8788 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8788:	b508      	push	{r3, lr}
   b878a:	4b02      	ldr	r3, [pc, #8]	; (b8794 <HAL_Delay_Microseconds+0xc>)
   b878c:	681b      	ldr	r3, [r3, #0]
   b878e:	68db      	ldr	r3, [r3, #12]
   b8790:	9301      	str	r3, [sp, #4]
   b8792:	bd08      	pop	{r3, pc}
   b8794:	00030218 	.word	0x00030218

000b8798 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b8798:	b508      	push	{r3, lr}
   b879a:	4b02      	ldr	r3, [pc, #8]	; (b87a4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b879c:	681b      	ldr	r3, [r3, #0]
   b879e:	695b      	ldr	r3, [r3, #20]
   b87a0:	9301      	str	r3, [sp, #4]
   b87a2:	bd08      	pop	{r3, pc}
   b87a4:	00030218 	.word	0x00030218

000b87a8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b87a8:	b508      	push	{r3, lr}
   b87aa:	4b02      	ldr	r3, [pc, #8]	; (b87b4 <hal_i2c_begin+0xc>)
   b87ac:	681b      	ldr	r3, [r3, #0]
   b87ae:	68db      	ldr	r3, [r3, #12]
   b87b0:	9301      	str	r3, [sp, #4]
   b87b2:	bd08      	pop	{r3, pc}
   b87b4:	00030228 	.word	0x00030228

000b87b8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b87b8:	b508      	push	{r3, lr}
   b87ba:	4b02      	ldr	r3, [pc, #8]	; (b87c4 <hal_i2c_begin_transmission+0xc>)
   b87bc:	681b      	ldr	r3, [r3, #0]
   b87be:	699b      	ldr	r3, [r3, #24]
   b87c0:	9301      	str	r3, [sp, #4]
   b87c2:	bd08      	pop	{r3, pc}
   b87c4:	00030228 	.word	0x00030228

000b87c8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b87c8:	b508      	push	{r3, lr}
   b87ca:	4b02      	ldr	r3, [pc, #8]	; (b87d4 <hal_i2c_end_transmission+0xc>)
   b87cc:	681b      	ldr	r3, [r3, #0]
   b87ce:	69db      	ldr	r3, [r3, #28]
   b87d0:	9301      	str	r3, [sp, #4]
   b87d2:	bd08      	pop	{r3, pc}
   b87d4:	00030228 	.word	0x00030228

000b87d8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b87d8:	b508      	push	{r3, lr}
   b87da:	4b02      	ldr	r3, [pc, #8]	; (b87e4 <hal_i2c_write+0xc>)
   b87dc:	681b      	ldr	r3, [r3, #0]
   b87de:	6a1b      	ldr	r3, [r3, #32]
   b87e0:	9301      	str	r3, [sp, #4]
   b87e2:	bd08      	pop	{r3, pc}
   b87e4:	00030228 	.word	0x00030228

000b87e8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b87e8:	b508      	push	{r3, lr}
   b87ea:	4b02      	ldr	r3, [pc, #8]	; (b87f4 <hal_i2c_available+0xc>)
   b87ec:	681b      	ldr	r3, [r3, #0]
   b87ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b87f0:	9301      	str	r3, [sp, #4]
   b87f2:	bd08      	pop	{r3, pc}
   b87f4:	00030228 	.word	0x00030228

000b87f8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b87f8:	b508      	push	{r3, lr}
   b87fa:	4b02      	ldr	r3, [pc, #8]	; (b8804 <hal_i2c_read+0xc>)
   b87fc:	681b      	ldr	r3, [r3, #0]
   b87fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8800:	9301      	str	r3, [sp, #4]
   b8802:	bd08      	pop	{r3, pc}
   b8804:	00030228 	.word	0x00030228

000b8808 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b8808:	b508      	push	{r3, lr}
   b880a:	4b02      	ldr	r3, [pc, #8]	; (b8814 <hal_i2c_peek+0xc>)
   b880c:	681b      	ldr	r3, [r3, #0]
   b880e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8810:	9301      	str	r3, [sp, #4]
   b8812:	bd08      	pop	{r3, pc}
   b8814:	00030228 	.word	0x00030228

000b8818 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b8818:	b508      	push	{r3, lr}
   b881a:	4b02      	ldr	r3, [pc, #8]	; (b8824 <hal_i2c_flush+0xc>)
   b881c:	681b      	ldr	r3, [r3, #0]
   b881e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8820:	9301      	str	r3, [sp, #4]
   b8822:	bd08      	pop	{r3, pc}
   b8824:	00030228 	.word	0x00030228

000b8828 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b8828:	b508      	push	{r3, lr}
   b882a:	4b02      	ldr	r3, [pc, #8]	; (b8834 <hal_i2c_init+0xc>)
   b882c:	681b      	ldr	r3, [r3, #0]
   b882e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8830:	9301      	str	r3, [sp, #4]
   b8832:	bd08      	pop	{r3, pc}
   b8834:	00030228 	.word	0x00030228

000b8838 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b8838:	b508      	push	{r3, lr}
   b883a:	4b02      	ldr	r3, [pc, #8]	; (b8844 <hal_i2c_request_ex+0xc>)
   b883c:	681b      	ldr	r3, [r3, #0]
   b883e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8840:	9301      	str	r3, [sp, #4]
   b8842:	bd08      	pop	{r3, pc}
   b8844:	00030228 	.word	0x00030228

000b8848 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b8848:	b508      	push	{r3, lr}
   b884a:	4b02      	ldr	r3, [pc, #8]	; (b8854 <if_index_to_name+0xc>)
   b884c:	681b      	ldr	r3, [r3, #0]
   b884e:	695b      	ldr	r3, [r3, #20]
   b8850:	9301      	str	r3, [sp, #4]
   b8852:	bd08      	pop	{r3, pc}
   b8854:	0003026c 	.word	0x0003026c

000b8858 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b8858:	b508      	push	{r3, lr}
   b885a:	4b02      	ldr	r3, [pc, #8]	; (b8864 <inet_inet_ntop+0xc>)
   b885c:	681b      	ldr	r3, [r3, #0]
   b885e:	695b      	ldr	r3, [r3, #20]
   b8860:	9301      	str	r3, [sp, #4]
   b8862:	bd08      	pop	{r3, pc}
   b8864:	00030264 	.word	0x00030264

000b8868 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b8868:	b508      	push	{r3, lr}
   b886a:	4b02      	ldr	r3, [pc, #8]	; (b8874 <inet_htonl+0xc>)
   b886c:	681b      	ldr	r3, [r3, #0]
   b886e:	6a1b      	ldr	r3, [r3, #32]
   b8870:	9301      	str	r3, [sp, #4]
   b8872:	bd08      	pop	{r3, pc}
   b8874:	00030264 	.word	0x00030264

000b8878 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b8878:	b508      	push	{r3, lr}
   b887a:	4b02      	ldr	r3, [pc, #8]	; (b8884 <inet_htons+0xc>)
   b887c:	681b      	ldr	r3, [r3, #0]
   b887e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8880:	9301      	str	r3, [sp, #4]
   b8882:	bd08      	pop	{r3, pc}
   b8884:	00030264 	.word	0x00030264

000b8888 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b8888:	b508      	push	{r3, lr}
   b888a:	4b02      	ldr	r3, [pc, #8]	; (b8894 <netdb_freeaddrinfo+0xc>)
   b888c:	681b      	ldr	r3, [r3, #0]
   b888e:	689b      	ldr	r3, [r3, #8]
   b8890:	9301      	str	r3, [sp, #4]
   b8892:	bd08      	pop	{r3, pc}
   b8894:	00030268 	.word	0x00030268

000b8898 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b8898:	b508      	push	{r3, lr}
   b889a:	4b02      	ldr	r3, [pc, #8]	; (b88a4 <netdb_getaddrinfo+0xc>)
   b889c:	681b      	ldr	r3, [r3, #0]
   b889e:	68db      	ldr	r3, [r3, #12]
   b88a0:	9301      	str	r3, [sp, #4]
   b88a2:	bd08      	pop	{r3, pc}
   b88a4:	00030268 	.word	0x00030268

000b88a8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b88a8:	b508      	push	{r3, lr}
   b88aa:	4b02      	ldr	r3, [pc, #8]	; (b88b4 <sock_setsockopt+0xc>)
   b88ac:	681b      	ldr	r3, [r3, #0]
   b88ae:	699b      	ldr	r3, [r3, #24]
   b88b0:	9301      	str	r3, [sp, #4]
   b88b2:	bd08      	pop	{r3, pc}
   b88b4:	00030238 	.word	0x00030238

000b88b8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b88b8:	b508      	push	{r3, lr}
   b88ba:	4b02      	ldr	r3, [pc, #8]	; (b88c4 <sock_close+0xc>)
   b88bc:	681b      	ldr	r3, [r3, #0]
   b88be:	69db      	ldr	r3, [r3, #28]
   b88c0:	9301      	str	r3, [sp, #4]
   b88c2:	bd08      	pop	{r3, pc}
   b88c4:	00030238 	.word	0x00030238

000b88c8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b88c8:	b508      	push	{r3, lr}
   b88ca:	4b02      	ldr	r3, [pc, #8]	; (b88d4 <sock_connect+0xc>)
   b88cc:	681b      	ldr	r3, [r3, #0]
   b88ce:	6a1b      	ldr	r3, [r3, #32]
   b88d0:	9301      	str	r3, [sp, #4]
   b88d2:	bd08      	pop	{r3, pc}
   b88d4:	00030238 	.word	0x00030238

000b88d8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b88d8:	b508      	push	{r3, lr}
   b88da:	4b02      	ldr	r3, [pc, #8]	; (b88e4 <sock_recv+0xc>)
   b88dc:	681b      	ldr	r3, [r3, #0]
   b88de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b88e0:	9301      	str	r3, [sp, #4]
   b88e2:	bd08      	pop	{r3, pc}
   b88e4:	00030238 	.word	0x00030238

000b88e8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b88e8:	b508      	push	{r3, lr}
   b88ea:	4b02      	ldr	r3, [pc, #8]	; (b88f4 <sock_send+0xc>)
   b88ec:	681b      	ldr	r3, [r3, #0]
   b88ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b88f0:	9301      	str	r3, [sp, #4]
   b88f2:	bd08      	pop	{r3, pc}
   b88f4:	00030238 	.word	0x00030238

000b88f8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b88f8:	b508      	push	{r3, lr}
   b88fa:	4b02      	ldr	r3, [pc, #8]	; (b8904 <sock_socket+0xc>)
   b88fc:	681b      	ldr	r3, [r3, #0]
   b88fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b8900:	9301      	str	r3, [sp, #4]
   b8902:	bd08      	pop	{r3, pc}
   b8904:	00030238 	.word	0x00030238

000b8908 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b8908:	b508      	push	{r3, lr}
   b890a:	4b02      	ldr	r3, [pc, #8]	; (b8914 <hal_usart_write+0xc>)
   b890c:	681b      	ldr	r3, [r3, #0]
   b890e:	68db      	ldr	r3, [r3, #12]
   b8910:	9301      	str	r3, [sp, #4]
   b8912:	bd08      	pop	{r3, pc}
   b8914:	0003023c 	.word	0x0003023c

000b8918 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b8918:	b508      	push	{r3, lr}
   b891a:	4b02      	ldr	r3, [pc, #8]	; (b8924 <hal_usart_available+0xc>)
   b891c:	681b      	ldr	r3, [r3, #0]
   b891e:	691b      	ldr	r3, [r3, #16]
   b8920:	9301      	str	r3, [sp, #4]
   b8922:	bd08      	pop	{r3, pc}
   b8924:	0003023c 	.word	0x0003023c

000b8928 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b8928:	b508      	push	{r3, lr}
   b892a:	4b02      	ldr	r3, [pc, #8]	; (b8934 <hal_usart_read+0xc>)
   b892c:	681b      	ldr	r3, [r3, #0]
   b892e:	695b      	ldr	r3, [r3, #20]
   b8930:	9301      	str	r3, [sp, #4]
   b8932:	bd08      	pop	{r3, pc}
   b8934:	0003023c 	.word	0x0003023c

000b8938 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b8938:	b508      	push	{r3, lr}
   b893a:	4b02      	ldr	r3, [pc, #8]	; (b8944 <hal_usart_peek+0xc>)
   b893c:	681b      	ldr	r3, [r3, #0]
   b893e:	699b      	ldr	r3, [r3, #24]
   b8940:	9301      	str	r3, [sp, #4]
   b8942:	bd08      	pop	{r3, pc}
   b8944:	0003023c 	.word	0x0003023c

000b8948 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b8948:	b508      	push	{r3, lr}
   b894a:	4b02      	ldr	r3, [pc, #8]	; (b8954 <hal_usart_flush+0xc>)
   b894c:	681b      	ldr	r3, [r3, #0]
   b894e:	69db      	ldr	r3, [r3, #28]
   b8950:	9301      	str	r3, [sp, #4]
   b8952:	bd08      	pop	{r3, pc}
   b8954:	0003023c 	.word	0x0003023c

000b8958 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b8958:	b508      	push	{r3, lr}
   b895a:	4b02      	ldr	r3, [pc, #8]	; (b8964 <hal_usart_available_data_for_write+0xc>)
   b895c:	681b      	ldr	r3, [r3, #0]
   b895e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8960:	9301      	str	r3, [sp, #4]
   b8962:	bd08      	pop	{r3, pc}
   b8964:	0003023c 	.word	0x0003023c

000b8968 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b8968:	b508      	push	{r3, lr}
   b896a:	4b02      	ldr	r3, [pc, #8]	; (b8974 <hal_usart_init_ex+0xc>)
   b896c:	681b      	ldr	r3, [r3, #0]
   b896e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8970:	9301      	str	r3, [sp, #4]
   b8972:	bd08      	pop	{r3, pc}
   b8974:	0003023c 	.word	0x0003023c

000b8978 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b8978:	b508      	push	{r3, lr}
   b897a:	4b02      	ldr	r3, [pc, #8]	; (b8984 <HAL_USB_USART_Init+0xc>)
   b897c:	681b      	ldr	r3, [r3, #0]
   b897e:	681b      	ldr	r3, [r3, #0]
   b8980:	9301      	str	r3, [sp, #4]
   b8982:	bd08      	pop	{r3, pc}
   b8984:	0003024c 	.word	0x0003024c

000b8988 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b8988:	b508      	push	{r3, lr}
   b898a:	4b02      	ldr	r3, [pc, #8]	; (b8994 <HAL_USB_USART_Begin+0xc>)
   b898c:	681b      	ldr	r3, [r3, #0]
   b898e:	685b      	ldr	r3, [r3, #4]
   b8990:	9301      	str	r3, [sp, #4]
   b8992:	bd08      	pop	{r3, pc}
   b8994:	0003024c 	.word	0x0003024c

000b8998 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b8998:	b508      	push	{r3, lr}
   b899a:	4b02      	ldr	r3, [pc, #8]	; (b89a4 <HAL_USB_USART_Available_Data+0xc>)
   b899c:	681b      	ldr	r3, [r3, #0]
   b899e:	691b      	ldr	r3, [r3, #16]
   b89a0:	9301      	str	r3, [sp, #4]
   b89a2:	bd08      	pop	{r3, pc}
   b89a4:	0003024c 	.word	0x0003024c

000b89a8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b89a8:	b508      	push	{r3, lr}
   b89aa:	4b02      	ldr	r3, [pc, #8]	; (b89b4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b89ac:	681b      	ldr	r3, [r3, #0]
   b89ae:	695b      	ldr	r3, [r3, #20]
   b89b0:	9301      	str	r3, [sp, #4]
   b89b2:	bd08      	pop	{r3, pc}
   b89b4:	0003024c 	.word	0x0003024c

000b89b8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b89b8:	b508      	push	{r3, lr}
   b89ba:	4b02      	ldr	r3, [pc, #8]	; (b89c4 <HAL_USB_USART_Receive_Data+0xc>)
   b89bc:	681b      	ldr	r3, [r3, #0]
   b89be:	699b      	ldr	r3, [r3, #24]
   b89c0:	9301      	str	r3, [sp, #4]
   b89c2:	bd08      	pop	{r3, pc}
   b89c4:	0003024c 	.word	0x0003024c

000b89c8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b89c8:	b508      	push	{r3, lr}
   b89ca:	4b02      	ldr	r3, [pc, #8]	; (b89d4 <HAL_USB_USART_Send_Data+0xc>)
   b89cc:	681b      	ldr	r3, [r3, #0]
   b89ce:	69db      	ldr	r3, [r3, #28]
   b89d0:	9301      	str	r3, [sp, #4]
   b89d2:	bd08      	pop	{r3, pc}
   b89d4:	0003024c 	.word	0x0003024c

000b89d8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b89d8:	b508      	push	{r3, lr}
   b89da:	4b02      	ldr	r3, [pc, #8]	; (b89e4 <HAL_USB_USART_Flush_Data+0xc>)
   b89dc:	681b      	ldr	r3, [r3, #0]
   b89de:	6a1b      	ldr	r3, [r3, #32]
   b89e0:	9301      	str	r3, [sp, #4]
   b89e2:	bd08      	pop	{r3, pc}
   b89e4:	0003024c 	.word	0x0003024c

000b89e8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b89e8:	b508      	push	{r3, lr}
   b89ea:	4b02      	ldr	r3, [pc, #8]	; (b89f4 <panic_+0xc>)
   b89ec:	681b      	ldr	r3, [r3, #0]
   b89ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b89f0:	9301      	str	r3, [sp, #4]
   b89f2:	bd08      	pop	{r3, pc}
   b89f4:	00030260 	.word	0x00030260

000b89f8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b89f8:	b508      	push	{r3, lr}
   b89fa:	4b02      	ldr	r3, [pc, #8]	; (b8a04 <log_message+0xc>)
   b89fc:	681b      	ldr	r3, [r3, #0]
   b89fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8a00:	9301      	str	r3, [sp, #4]
   b8a02:	bd08      	pop	{r3, pc}
   b8a04:	00030260 	.word	0x00030260

000b8a08 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b8a08:	b508      	push	{r3, lr}
   b8a0a:	4b02      	ldr	r3, [pc, #8]	; (b8a14 <set_system_mode+0xc>)
   b8a0c:	681b      	ldr	r3, [r3, #0]
   b8a0e:	685b      	ldr	r3, [r3, #4]
   b8a10:	9301      	str	r3, [sp, #4]
   b8a12:	bd08      	pop	{r3, pc}
   b8a14:	00030220 	.word	0x00030220

000b8a18 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b8a18:	b508      	push	{r3, lr}
   b8a1a:	4b02      	ldr	r3, [pc, #8]	; (b8a24 <system_delay_ms+0xc>)
   b8a1c:	681b      	ldr	r3, [r3, #0]
   b8a1e:	695b      	ldr	r3, [r3, #20]
   b8a20:	9301      	str	r3, [sp, #4]
   b8a22:	bd08      	pop	{r3, pc}
   b8a24:	00030220 	.word	0x00030220

000b8a28 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b8a28:	b508      	push	{r3, lr}
   b8a2a:	4b03      	ldr	r3, [pc, #12]	; (b8a38 <system_ctrl_set_app_request_handler+0x10>)
   b8a2c:	681b      	ldr	r3, [r3, #0]
   b8a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b8a32:	9301      	str	r3, [sp, #4]
   b8a34:	bd08      	pop	{r3, pc}
   b8a36:	0000      	.short	0x0000
   b8a38:	00030220 	.word	0x00030220

000b8a3c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b8a3c:	b508      	push	{r3, lr}
   b8a3e:	4b03      	ldr	r3, [pc, #12]	; (b8a4c <system_ctrl_set_result+0x10>)
   b8a40:	681b      	ldr	r3, [r3, #0]
   b8a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b8a46:	9301      	str	r3, [sp, #4]
   b8a48:	bd08      	pop	{r3, pc}
   b8a4a:	0000      	.short	0x0000
   b8a4c:	00030220 	.word	0x00030220

000b8a50 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8a50:	b508      	push	{r3, lr}
   b8a52:	4b02      	ldr	r3, [pc, #8]	; (b8a5c <spark_set_random_seed_from_cloud_handler+0xc>)
   b8a54:	681b      	ldr	r3, [r3, #0]
   b8a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8a58:	9301      	str	r3, [sp, #4]
   b8a5a:	bd08      	pop	{r3, pc}
   b8a5c:	00030244 	.word	0x00030244

000b8a60 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b8a60:	b508      	push	{r3, lr}
   b8a62:	4b02      	ldr	r3, [pc, #8]	; (b8a6c <network_connect+0xc>)
   b8a64:	681b      	ldr	r3, [r3, #0]
   b8a66:	685b      	ldr	r3, [r3, #4]
   b8a68:	9301      	str	r3, [sp, #4]
   b8a6a:	bd08      	pop	{r3, pc}
   b8a6c:	00030240 	.word	0x00030240

000b8a70 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b8a70:	b508      	push	{r3, lr}
   b8a72:	4b02      	ldr	r3, [pc, #8]	; (b8a7c <network_connecting+0xc>)
   b8a74:	681b      	ldr	r3, [r3, #0]
   b8a76:	689b      	ldr	r3, [r3, #8]
   b8a78:	9301      	str	r3, [sp, #4]
   b8a7a:	bd08      	pop	{r3, pc}
   b8a7c:	00030240 	.word	0x00030240

000b8a80 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b8a80:	b508      	push	{r3, lr}
   b8a82:	4b02      	ldr	r3, [pc, #8]	; (b8a8c <network_disconnect+0xc>)
   b8a84:	681b      	ldr	r3, [r3, #0]
   b8a86:	68db      	ldr	r3, [r3, #12]
   b8a88:	9301      	str	r3, [sp, #4]
   b8a8a:	bd08      	pop	{r3, pc}
   b8a8c:	00030240 	.word	0x00030240

000b8a90 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b8a90:	b508      	push	{r3, lr}
   b8a92:	4b02      	ldr	r3, [pc, #8]	; (b8a9c <network_ready+0xc>)
   b8a94:	681b      	ldr	r3, [r3, #0]
   b8a96:	691b      	ldr	r3, [r3, #16]
   b8a98:	9301      	str	r3, [sp, #4]
   b8a9a:	bd08      	pop	{r3, pc}
   b8a9c:	00030240 	.word	0x00030240

000b8aa0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b8aa0:	b508      	push	{r3, lr}
   b8aa2:	4b02      	ldr	r3, [pc, #8]	; (b8aac <network_on+0xc>)
   b8aa4:	681b      	ldr	r3, [r3, #0]
   b8aa6:	695b      	ldr	r3, [r3, #20]
   b8aa8:	9301      	str	r3, [sp, #4]
   b8aaa:	bd08      	pop	{r3, pc}
   b8aac:	00030240 	.word	0x00030240

000b8ab0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b8ab0:	b508      	push	{r3, lr}
   b8ab2:	4b02      	ldr	r3, [pc, #8]	; (b8abc <network_off+0xc>)
   b8ab4:	681b      	ldr	r3, [r3, #0]
   b8ab6:	699b      	ldr	r3, [r3, #24]
   b8ab8:	9301      	str	r3, [sp, #4]
   b8aba:	bd08      	pop	{r3, pc}
   b8abc:	00030240 	.word	0x00030240

000b8ac0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b8ac0:	b508      	push	{r3, lr}
   b8ac2:	4b02      	ldr	r3, [pc, #8]	; (b8acc <network_listen+0xc>)
   b8ac4:	681b      	ldr	r3, [r3, #0]
   b8ac6:	69db      	ldr	r3, [r3, #28]
   b8ac8:	9301      	str	r3, [sp, #4]
   b8aca:	bd08      	pop	{r3, pc}
   b8acc:	00030240 	.word	0x00030240

000b8ad0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b8ad0:	b508      	push	{r3, lr}
   b8ad2:	4b02      	ldr	r3, [pc, #8]	; (b8adc <network_listening+0xc>)
   b8ad4:	681b      	ldr	r3, [r3, #0]
   b8ad6:	6a1b      	ldr	r3, [r3, #32]
   b8ad8:	9301      	str	r3, [sp, #4]
   b8ada:	bd08      	pop	{r3, pc}
   b8adc:	00030240 	.word	0x00030240

000b8ae0 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   b8ae0:	b508      	push	{r3, lr}
   b8ae2:	4b02      	ldr	r3, [pc, #8]	; (b8aec <network_has_credentials+0xc>)
   b8ae4:	681b      	ldr	r3, [r3, #0]
   b8ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8ae8:	9301      	str	r3, [sp, #4]
   b8aea:	bd08      	pop	{r3, pc}
   b8aec:	00030240 	.word	0x00030240

000b8af0 <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b8af0:	b508      	push	{r3, lr}
   b8af2:	4b02      	ldr	r3, [pc, #8]	; (b8afc <network_set_credentials+0xc>)
   b8af4:	681b      	ldr	r3, [r3, #0]
   b8af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8af8:	9301      	str	r3, [sp, #4]
   b8afa:	bd08      	pop	{r3, pc}
   b8afc:	00030240 	.word	0x00030240

000b8b00 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b8b00:	b508      	push	{r3, lr}
   b8b02:	4b02      	ldr	r3, [pc, #8]	; (b8b0c <network_set_listen_timeout+0xc>)
   b8b04:	681b      	ldr	r3, [r3, #0]
   b8b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8b08:	9301      	str	r3, [sp, #4]
   b8b0a:	bd08      	pop	{r3, pc}
   b8b0c:	00030240 	.word	0x00030240

000b8b10 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8b10:	b508      	push	{r3, lr}
   b8b12:	4b02      	ldr	r3, [pc, #8]	; (b8b1c <network_get_listen_timeout+0xc>)
   b8b14:	681b      	ldr	r3, [r3, #0]
   b8b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8b18:	9301      	str	r3, [sp, #4]
   b8b1a:	bd08      	pop	{r3, pc}
   b8b1c:	00030240 	.word	0x00030240

000b8b20 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8b20:	b508      	push	{r3, lr}
   b8b22:	4b02      	ldr	r3, [pc, #8]	; (b8b2c <network_is_on+0xc>)
   b8b24:	681b      	ldr	r3, [r3, #0]
   b8b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8b28:	9301      	str	r3, [sp, #4]
   b8b2a:	bd08      	pop	{r3, pc}
   b8b2c:	00030240 	.word	0x00030240

000b8b30 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8b30:	b508      	push	{r3, lr}
   b8b32:	4b02      	ldr	r3, [pc, #8]	; (b8b3c <network_is_off+0xc>)
   b8b34:	681b      	ldr	r3, [r3, #0]
   b8b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8b38:	9301      	str	r3, [sp, #4]
   b8b3a:	bd08      	pop	{r3, pc}
   b8b3c:	00030240 	.word	0x00030240

000b8b40 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8b40:	b508      	push	{r3, lr}
   b8b42:	4b02      	ldr	r3, [pc, #8]	; (b8b4c <malloc+0xc>)
   b8b44:	681b      	ldr	r3, [r3, #0]
   b8b46:	681b      	ldr	r3, [r3, #0]
   b8b48:	9301      	str	r3, [sp, #4]
   b8b4a:	bd08      	pop	{r3, pc}
   b8b4c:	0003021c 	.word	0x0003021c

000b8b50 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8b50:	b508      	push	{r3, lr}
   b8b52:	4b02      	ldr	r3, [pc, #8]	; (b8b5c <free+0xc>)
   b8b54:	681b      	ldr	r3, [r3, #0]
   b8b56:	685b      	ldr	r3, [r3, #4]
   b8b58:	9301      	str	r3, [sp, #4]
   b8b5a:	bd08      	pop	{r3, pc}
   b8b5c:	0003021c 	.word	0x0003021c

000b8b60 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8b60:	b508      	push	{r3, lr}
   b8b62:	4b02      	ldr	r3, [pc, #8]	; (b8b6c <realloc+0xc>)
   b8b64:	681b      	ldr	r3, [r3, #0]
   b8b66:	689b      	ldr	r3, [r3, #8]
   b8b68:	9301      	str	r3, [sp, #4]
   b8b6a:	bd08      	pop	{r3, pc}
   b8b6c:	0003021c 	.word	0x0003021c

000b8b70 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b8b70:	b508      	push	{r3, lr}
   b8b72:	4b02      	ldr	r3, [pc, #8]	; (b8b7c <sscanf+0xc>)
   b8b74:	681b      	ldr	r3, [r3, #0]
   b8b76:	695b      	ldr	r3, [r3, #20]
   b8b78:	9301      	str	r3, [sp, #4]
   b8b7a:	bd08      	pop	{r3, pc}
   b8b7c:	0003021c 	.word	0x0003021c

000b8b80 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8b80:	b508      	push	{r3, lr}
   b8b82:	4b02      	ldr	r3, [pc, #8]	; (b8b8c <vsnprintf+0xc>)
   b8b84:	681b      	ldr	r3, [r3, #0]
   b8b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8b88:	9301      	str	r3, [sp, #4]
   b8b8a:	bd08      	pop	{r3, pc}
   b8b8c:	0003021c 	.word	0x0003021c

000b8b90 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b8b90:	b508      	push	{r3, lr}
   b8b92:	4b02      	ldr	r3, [pc, #8]	; (b8b9c <abort+0xc>)
   b8b94:	681b      	ldr	r3, [r3, #0]
   b8b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8b98:	9301      	str	r3, [sp, #4]
   b8b9a:	bd08      	pop	{r3, pc}
   b8b9c:	0003021c 	.word	0x0003021c

000b8ba0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b8ba0:	b508      	push	{r3, lr}
   b8ba2:	4b02      	ldr	r3, [pc, #8]	; (b8bac <_malloc_r+0xc>)
   b8ba4:	681b      	ldr	r3, [r3, #0]
   b8ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8ba8:	9301      	str	r3, [sp, #4]
   b8baa:	bd08      	pop	{r3, pc}
   b8bac:	0003021c 	.word	0x0003021c

000b8bb0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b8bb0:	b508      	push	{r3, lr}
   b8bb2:	4b02      	ldr	r3, [pc, #8]	; (b8bbc <__errno+0xc>)
   b8bb4:	681b      	ldr	r3, [r3, #0]
   b8bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8bb8:	9301      	str	r3, [sp, #4]
   b8bba:	bd08      	pop	{r3, pc}
   b8bbc:	0003021c 	.word	0x0003021c

000b8bc0 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b8bc0:	b508      	push	{r3, lr}
   b8bc2:	4b02      	ldr	r3, [pc, #8]	; (b8bcc <__assert_func+0xc>)
   b8bc4:	681b      	ldr	r3, [r3, #0]
   b8bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8bc8:	9301      	str	r3, [sp, #4]
   b8bca:	bd08      	pop	{r3, pc}
   b8bcc:	0003021c 	.word	0x0003021c

000b8bd0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b8bd0:	b508      	push	{r3, lr}
   b8bd2:	4b02      	ldr	r3, [pc, #8]	; (b8bdc <newlib_impure_ptr_callback+0xc>)
   b8bd4:	681b      	ldr	r3, [r3, #0]
   b8bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8bd8:	9301      	str	r3, [sp, #4]
   b8bda:	bd08      	pop	{r3, pc}
   b8bdc:	0003021c 	.word	0x0003021c

000b8be0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8be0:	2100      	movs	r1, #0
   b8be2:	f7ff bf19 	b.w	b8a18 <system_delay_ms>

000b8be6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8be6:	4770      	bx	lr

000b8be8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b8be8:	4770      	bx	lr

000b8bea <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b8bea:	4770      	bx	lr

000b8bec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8bec:	4770      	bx	lr
	...

000b8bf0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8bf0:	4b06      	ldr	r3, [pc, #24]	; (b8c0c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8bf2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8bf4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b8bf6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8bfa:	d005      	beq.n	b8c08 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8bfc:	4608      	mov	r0, r1
   b8bfe:	f002 fb29 	bl	bb254 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8c02:	2800      	cmp	r0, #0
   b8c04:	bf08      	it	eq
   b8c06:	2400      	moveq	r4, #0
      }
   b8c08:	4620      	mov	r0, r4
   b8c0a:	bd10      	pop	{r4, pc}
   b8c0c:	000bea94 	.word	0x000bea94

000b8c10 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8c10:	4b06      	ldr	r3, [pc, #24]	; (b8c2c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8c12:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8c14:	b510      	push	{r4, lr}
   b8c16:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8c1a:	d005      	beq.n	b8c28 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8c1c:	4608      	mov	r0, r1
   b8c1e:	f002 fb19 	bl	bb254 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8c22:	2800      	cmp	r0, #0
   b8c24:	bf08      	it	eq
   b8c26:	2400      	moveq	r4, #0
      }
   b8c28:	4620      	mov	r0, r4
   b8c2a:	bd10      	pop	{r4, pc}
   b8c2c:	000bea94 	.word	0x000bea94

000b8c30 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8c30:	4b06      	ldr	r3, [pc, #24]	; (b8c4c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8c32:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8c34:	b510      	push	{r4, lr}
   b8c36:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8c3a:	d005      	beq.n	b8c48 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8c3c:	4608      	mov	r0, r1
   b8c3e:	f002 fb09 	bl	bb254 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8c42:	2800      	cmp	r0, #0
   b8c44:	bf08      	it	eq
   b8c46:	2400      	moveq	r4, #0
      }
   b8c48:	4620      	mov	r0, r4
   b8c4a:	bd10      	pop	{r4, pc}
   b8c4c:	000bea94 	.word	0x000bea94

000b8c50 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8c50:	b510      	push	{r4, lr}
   b8c52:	2168      	movs	r1, #104	; 0x68
   b8c54:	4604      	mov	r4, r0
   b8c56:	f7fb fa24 	bl	b40a2 <_ZdlPvj>
   b8c5a:	4620      	mov	r0, r4
   b8c5c:	bd10      	pop	{r4, pc}

000b8c5e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b8c5e:	b510      	push	{r4, lr}
   b8c60:	2128      	movs	r1, #40	; 0x28
   b8c62:	4604      	mov	r4, r0
   b8c64:	f7fb fa1d 	bl	b40a2 <_ZdlPvj>
   b8c68:	4620      	mov	r0, r4
   b8c6a:	bd10      	pop	{r4, pc}

000b8c6c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b8c6c:	b510      	push	{r4, lr}
   b8c6e:	2130      	movs	r1, #48	; 0x30
   b8c70:	4604      	mov	r4, r0
   b8c72:	f7fb fa16 	bl	b40a2 <_ZdlPvj>
   b8c76:	4620      	mov	r0, r4
   b8c78:	bd10      	pop	{r4, pc}

000b8c7a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b8c7a:	2168      	movs	r1, #104	; 0x68
   b8c7c:	f7fb ba11 	b.w	b40a2 <_ZdlPvj>

000b8c80 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b8c80:	2128      	movs	r1, #40	; 0x28
   b8c82:	f7fb ba0e 	b.w	b40a2 <_ZdlPvj>

000b8c86 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b8c86:	2130      	movs	r1, #48	; 0x30
   b8c88:	f7fb ba0b 	b.w	b40a2 <_ZdlPvj>

000b8c8c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b8c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b8c8e:	2500      	movs	r5, #0
   b8c90:	1cec      	adds	r4, r5, #3
   b8c92:	428c      	cmp	r4, r1
   b8c94:	d80d      	bhi.n	b8cb2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b8c96:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b8c98:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b8c9a:	5d87      	ldrb	r7, [r0, r6]
   b8c9c:	4297      	cmp	r7, r2
   b8c9e:	d105      	bne.n	b8cac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b8ca0:	4426      	add	r6, r4
   b8ca2:	42b1      	cmp	r1, r6
   b8ca4:	d305      	bcc.n	b8cb2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b8ca6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b8ca8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b8caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b8cac:	3401      	adds	r4, #1
   b8cae:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b8cb0:	e7ee      	b.n	b8c90 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b8cb2:	2000      	movs	r0, #0
   b8cb4:	e7f9      	b.n	b8caa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b8cb8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b8cb8:	4a02      	ldr	r2, [pc, #8]	; (b8cc4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b8cba:	4903      	ldr	r1, [pc, #12]	; (b8cc8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b8cbc:	200a      	movs	r0, #10
   b8cbe:	f7ff be93 	b.w	b89e8 <panic_>
   b8cc2:	bf00      	nop
   b8cc4:	000b8789 	.word	0x000b8789
   b8cc8:	000be8f4 	.word	0x000be8f4

000b8ccc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8ccc:	b430      	push	{r4, r5}
   b8cce:	460d      	mov	r5, r1
   b8cd0:	4611      	mov	r1, r2
   b8cd2:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b8cd4:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b8cd6:	6809      	ldr	r1, [r1, #0]
   b8cd8:	6828      	ldr	r0, [r5, #0]
   b8cda:	e9d3 4300 	ldrd	r4, r3, [r3]
   b8cde:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b8ce0:	bc30      	pop	{r4, r5}
   b8ce2:	4760      	bx	ip

000b8ce4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b8ce4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8ce6:	b538      	push	{r3, r4, r5, lr}
   b8ce8:	4604      	mov	r4, r0
	switch (__op)
   b8cea:	d102      	bne.n	b8cf2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b8cec:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b8cee:	6023      	str	r3, [r4, #0]
	}
   b8cf0:	e003      	b.n	b8cfa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b8cf2:	2a02      	cmp	r2, #2
   b8cf4:	d003      	beq.n	b8cfe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b8cf6:	2a03      	cmp	r2, #3
   b8cf8:	d00d      	beq.n	b8d16 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b8cfa:	2000      	movs	r0, #0
   b8cfc:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b8cfe:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b8d00:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8d02:	f7fb f9c8 	bl	b4096 <_Znwj>
   b8d06:	4603      	mov	r3, r0
   b8d08:	2800      	cmp	r0, #0
   b8d0a:	d0f0      	beq.n	b8cee <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b8d0c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8d10:	e883 0003 	stmia.w	r3, {r0, r1}
   b8d14:	e7eb      	b.n	b8cee <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b8d16:	6800      	ldr	r0, [r0, #0]
   b8d18:	2800      	cmp	r0, #0
   b8d1a:	d0ee      	beq.n	b8cfa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b8d1c:	2108      	movs	r1, #8
   b8d1e:	f7fb f9c0 	bl	b40a2 <_ZdlPvj>
   b8d22:	e7ea      	b.n	b8cfa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b8d24 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b8d24:	b510      	push	{r4, lr}
      if (_M_manager)
   b8d26:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b8d28:	4604      	mov	r4, r0
      if (_M_manager)
   b8d2a:	b113      	cbz	r3, b8d32 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b8d2c:	2203      	movs	r2, #3
   b8d2e:	4601      	mov	r1, r0
   b8d30:	4798      	blx	r3
    }
   b8d32:	4620      	mov	r0, r4
   b8d34:	bd10      	pop	{r4, pc}

000b8d36 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8d36:	b510      	push	{r4, lr}
   b8d38:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b8d3a:	3058      	adds	r0, #88	; 0x58
   b8d3c:	f7ff fff2 	bl	b8d24 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b8d40:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b8d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8d48:	f001 bb98 	b.w	ba47c <_ZN6StringD1Ev>

000b8d4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b8d4c:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b8d4e:	6843      	ldr	r3, [r0, #4]
   b8d50:	3b01      	subs	r3, #1
    {
   b8d52:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b8d54:	6043      	str	r3, [r0, #4]
   b8d56:	b963      	cbnz	r3, b8d72 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b8d58:	6803      	ldr	r3, [r0, #0]
   b8d5a:	689b      	ldr	r3, [r3, #8]
   b8d5c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8d5e:	68a3      	ldr	r3, [r4, #8]
   b8d60:	3b01      	subs	r3, #1
   b8d62:	60a3      	str	r3, [r4, #8]
   b8d64:	b92b      	cbnz	r3, b8d72 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b8d66:	6823      	ldr	r3, [r4, #0]
   b8d68:	4620      	mov	r0, r4
   b8d6a:	68db      	ldr	r3, [r3, #12]
    }
   b8d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b8d70:	4718      	bx	r3
    }
   b8d72:	bd10      	pop	{r4, pc}

000b8d74 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b8d74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b8d78:	b2da      	uxtb	r2, r3
   b8d7a:	2a09      	cmp	r2, #9
   b8d7c:	d801      	bhi.n	b8d82 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b8d7e:	4618      	mov	r0, r3
   b8d80:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b8d82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b8d86:	2b05      	cmp	r3, #5
   b8d88:	d801      	bhi.n	b8d8e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b8d8a:	3857      	subs	r0, #87	; 0x57
   b8d8c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b8d8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b8d92:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b8d94:	bf94      	ite	ls
   b8d96:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b8d98:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b8d9c:	4770      	bx	lr
	...

000b8da0 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b8da0:	b510      	push	{r4, lr}
            locked_(false) {
   b8da2:	2300      	movs	r3, #0
   b8da4:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b8da6:	4b04      	ldr	r3, [pc, #16]	; (b8db8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b8da8:	4604      	mov	r4, r0
   b8daa:	6818      	ldr	r0, [r3, #0]
   b8dac:	f7ff fcd4 	bl	b8758 <os_mutex_recursive_lock>
        locked_ = true;
   b8db0:	2301      	movs	r3, #1
   b8db2:	7023      	strb	r3, [r4, #0]
    }
   b8db4:	4620      	mov	r0, r4
   b8db6:	bd10      	pop	{r4, pc}
   b8db8:	2003e6c0 	.word	0x2003e6c0

000b8dbc <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b8dbc:	b510      	push	{r4, lr}
        if (locked_) {
   b8dbe:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b8dc0:	4604      	mov	r4, r0
        if (locked_) {
   b8dc2:	b11b      	cbz	r3, b8dcc <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b8dc4:	4b02      	ldr	r3, [pc, #8]	; (b8dd0 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b8dc6:	6818      	ldr	r0, [r3, #0]
   b8dc8:	f7ff fcce 	bl	b8768 <os_mutex_recursive_unlock>
    }
   b8dcc:	4620      	mov	r0, r4
   b8dce:	bd10      	pop	{r4, pc}
   b8dd0:	2003e6c0 	.word	0x2003e6c0

000b8dd4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b8dd4:	b082      	sub	sp, #8
   b8dd6:	4603      	mov	r3, r0
    address_ = addr;
   b8dd8:	6808      	ldr	r0, [r1, #0]
   b8dda:	6849      	ldr	r1, [r1, #4]
   b8ddc:	466a      	mov	r2, sp
   b8dde:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b8de0:	466a      	mov	r2, sp
   b8de2:	ca03      	ldmia	r2!, {r0, r1}
   b8de4:	6018      	str	r0, [r3, #0]
}
   b8de6:	4618      	mov	r0, r3
    address_ = addr.address_;
   b8de8:	6059      	str	r1, [r3, #4]
}
   b8dea:	b002      	add	sp, #8
   b8dec:	4770      	bx	lr

000b8dee <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b8dee:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b8df0:	7982      	ldrb	r2, [r0, #6]
   b8df2:	798b      	ldrb	r3, [r1, #6]
   b8df4:	429a      	cmp	r2, r3
   b8df6:	d106      	bne.n	b8e06 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b8df8:	2206      	movs	r2, #6
   b8dfa:	f003 f9f7 	bl	bc1ec <memcmp>
   b8dfe:	fab0 f080 	clz	r0, r0
   b8e02:	0940      	lsrs	r0, r0, #5
}
   b8e04:	bd08      	pop	{r3, pc}
    return false;
   b8e06:	2000      	movs	r0, #0
   b8e08:	e7fc      	b.n	b8e04 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b8e0a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b8e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8e0e:	6003      	str	r3, [r0, #0]
   b8e10:	8083      	strh	r3, [r0, #4]
}
   b8e12:	2000      	movs	r0, #0
   b8e14:	4770      	bx	lr

000b8e16 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b8e16:	b508      	push	{r3, lr}
   b8e18:	4602      	mov	r2, r0
        : address_{} {
   b8e1a:	2100      	movs	r1, #0
   b8e1c:	6001      	str	r1, [r0, #0]
   b8e1e:	6041      	str	r1, [r0, #4]
    clear();
   b8e20:	f7ff fff3 	bl	b8e0a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b8e24:	7191      	strb	r1, [r2, #6]
}
   b8e26:	4610      	mov	r0, r2
   b8e28:	bd08      	pop	{r3, pc}
	...

000b8e2c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b8e2c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b8e2e:	2301      	movs	r3, #1
   b8e30:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8e32:	4b05      	ldr	r3, [pc, #20]	; (b8e48 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b8e34:	4602      	mov	r2, r0
   b8e36:	f103 0110 	add.w	r1, r3, #16
   b8e3a:	f853 4b04 	ldr.w	r4, [r3], #4
   b8e3e:	f842 4b04 	str.w	r4, [r2], #4
   b8e42:	428b      	cmp	r3, r1
   b8e44:	d1f9      	bne.n	b8e3a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b8e46:	bd10      	pop	{r4, pc}
   b8e48:	000beaa2 	.word	0x000beaa2

000b8e4c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b8e4c:	b510      	push	{r4, lr}
    if (uuid128) {
   b8e4e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b8e50:	4604      	mov	r4, r0
    if (uuid128) {
   b8e52:	b1b1      	cbz	r1, b8e82 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b8e54:	2a01      	cmp	r2, #1
   b8e56:	f101 0210 	add.w	r2, r1, #16
   b8e5a:	d10a      	bne.n	b8e72 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b8e5c:	4601      	mov	r1, r0
   b8e5e:	f853 0b04 	ldr.w	r0, [r3], #4
   b8e62:	f841 0b04 	str.w	r0, [r1], #4
   b8e66:	4293      	cmp	r3, r2
   b8e68:	d1f9      	bne.n	b8e5e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b8e6a:	2301      	movs	r3, #1
   b8e6c:	6123      	str	r3, [r4, #16]
}
   b8e6e:	4620      	mov	r0, r4
   b8e70:	bd10      	pop	{r4, pc}
   b8e72:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b8e74:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b8e78:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b8e7c:	429a      	cmp	r2, r3
   b8e7e:	d1f9      	bne.n	b8e74 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b8e80:	e7f3      	b.n	b8e6a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b8e82:	2210      	movs	r2, #16
   b8e84:	f003 f9ea 	bl	bc25c <memset>
   b8e88:	e7f1      	b.n	b8e6e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b8e8a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b8e8a:	b538      	push	{r3, r4, r5, lr}
   b8e8c:	4604      	mov	r4, r0
   b8e8e:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b8e90:	461a      	mov	r2, r3
   b8e92:	f7ff ffdb 	bl	b8e4c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b8e96:	81a5      	strh	r5, [r4, #12]
}
   b8e98:	4620      	mov	r0, r4
   b8e9a:	bd38      	pop	{r3, r4, r5, pc}

000b8e9c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b8e9c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b8e9e:	6902      	ldr	r2, [r0, #16]
   b8ea0:	b922      	cbnz	r2, b8eac <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b8ea2:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8ea4:	3800      	subs	r0, #0
   b8ea6:	bf18      	it	ne
   b8ea8:	2001      	movne	r0, #1
}
   b8eaa:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8eac:	4902      	ldr	r1, [pc, #8]	; (b8eb8 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b8eae:	2210      	movs	r2, #16
   b8eb0:	f003 f99c 	bl	bc1ec <memcmp>
   b8eb4:	e7f6      	b.n	b8ea4 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b8eb6:	bf00      	nop
   b8eb8:	000beac2 	.word	0x000beac2

000b8ebc <_ZNK8particle7BleUuid4typeEv>:
}
   b8ebc:	6900      	ldr	r0, [r0, #16]
   b8ebe:	4770      	bx	lr

000b8ec0 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b8ec0:	b538      	push	{r3, r4, r5, lr}
   b8ec2:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b8ec4:	2214      	movs	r2, #20
   b8ec6:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b8ec8:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b8eca:	f003 f9c7 	bl	bc25c <memset>
    if (type_ == BleUuidType::SHORT) {
   b8ece:	6923      	ldr	r3, [r4, #16]
   b8ed0:	b91b      	cbnz	r3, b8eda <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b8ed2:	89a3      	ldrh	r3, [r4, #12]
   b8ed4:	802b      	strh	r3, [r5, #0]
}
   b8ed6:	4628      	mov	r0, r5
   b8ed8:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b8eda:	2301      	movs	r3, #1
   b8edc:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b8ede:	4621      	mov	r1, r4
   b8ee0:	462b      	mov	r3, r5
   b8ee2:	f104 0210 	add.w	r2, r4, #16
   b8ee6:	f851 0b04 	ldr.w	r0, [r1], #4
   b8eea:	f843 0b04 	str.w	r0, [r3], #4
   b8eee:	4291      	cmp	r1, r2
   b8ef0:	d1f9      	bne.n	b8ee6 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b8ef2:	e7f0      	b.n	b8ed6 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b8ef4 <_ZNK8particle7BleUuid7shortedEv>:
}
   b8ef4:	8980      	ldrh	r0, [r0, #12]
   b8ef6:	4770      	bx	lr

000b8ef8 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b8ef8:	4770      	bx	lr

000b8efa <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b8efa:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b8efc:	6902      	ldr	r2, [r0, #16]
   b8efe:	690b      	ldr	r3, [r1, #16]
   b8f00:	429a      	cmp	r2, r3
   b8f02:	d106      	bne.n	b8f12 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b8f04:	2210      	movs	r2, #16
   b8f06:	f003 f971 	bl	bc1ec <memcmp>
   b8f0a:	fab0 f080 	clz	r0, r0
   b8f0e:	0940      	lsrs	r0, r0, #5
}
   b8f10:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b8f12:	2000      	movs	r0, #0
   b8f14:	e7fc      	b.n	b8f10 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b8f18 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b8f18:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b8f1a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b8f1e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8f20:	4b34      	ldr	r3, [pc, #208]	; (b8ff4 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b8f22:	460c      	mov	r4, r1
   b8f24:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8f26:	4602      	mov	r2, r0
   b8f28:	f103 0110 	add.w	r1, r3, #16
   b8f2c:	f853 0b04 	ldr.w	r0, [r3], #4
   b8f30:	f842 0b04 	str.w	r0, [r2], #4
   b8f34:	428b      	cmp	r3, r1
   b8f36:	d1f9      	bne.n	b8f2c <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b8f38:	b344      	cbz	r4, b8f8c <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b8f3a:	2124      	movs	r1, #36	; 0x24
   b8f3c:	4620      	mov	r0, r4
   b8f3e:	f003 f9f1 	bl	bc324 <strnlen>
   b8f42:	2804      	cmp	r0, #4
   b8f44:	f04f 0500 	mov.w	r5, #0
   b8f48:	d123      	bne.n	b8f92 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b8f4a:	f8ad 5004 	strh.w	r5, [sp, #4]
   b8f4e:	af01      	add	r7, sp, #4
   b8f50:	1ca5      	adds	r5, r4, #2
   b8f52:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b8f54:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b8f58:	f7ff ff0c 	bl	b8d74 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b8f5c:	f1b0 0800 	subs.w	r8, r0, #0
   b8f60:	db12      	blt.n	b8f88 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b8f62:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b8f66:	f7ff ff05 	bl	b8d74 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b8f6a:	2800      	cmp	r0, #0
   b8f6c:	db0c      	blt.n	b8f88 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b8f6e:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b8f70:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b8f74:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b8f76:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b8f7a:	d1eb      	bne.n	b8f54 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b8f7c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b8f80:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b8f82:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8f86:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b8f88:	2300      	movs	r3, #0
   b8f8a:	6133      	str	r3, [r6, #16]
}
   b8f8c:	b002      	add	sp, #8
   b8f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b8f92:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8f96:	2124      	movs	r1, #36	; 0x24
   b8f98:	4620      	mov	r0, r4
   b8f9a:	f003 f9c3 	bl	bc324 <strnlen>
   b8f9e:	42a8      	cmp	r0, r5
   b8fa0:	d807      	bhi.n	b8fb2 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b8fa2:	4642      	mov	r2, r8
   b8fa4:	2100      	movs	r1, #0
   b8fa6:	4630      	mov	r0, r6
}
   b8fa8:	b002      	add	sp, #8
   b8faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b8fae:	f003 b955 	b.w	bc25c <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8fb2:	f1b8 0f00 	cmp.w	r8, #0
   b8fb6:	d0e9      	beq.n	b8f8c <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b8fb8:	5d60      	ldrb	r0, [r4, r5]
   b8fba:	f7ff fedb 	bl	b8d74 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b8fbe:	0603      	lsls	r3, r0, #24
   b8fc0:	d415      	bmi.n	b8fee <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b8fc2:	0100      	lsls	r0, r0, #4
   b8fc4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8fc8:	b2c7      	uxtb	r7, r0
   b8fca:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b8fce:	2124      	movs	r1, #36	; 0x24
   b8fd0:	4620      	mov	r0, r4
   b8fd2:	f003 f9a7 	bl	bc324 <strnlen>
   b8fd6:	3501      	adds	r5, #1
   b8fd8:	42a8      	cmp	r0, r5
   b8fda:	d908      	bls.n	b8fee <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b8fdc:	5d60      	ldrb	r0, [r4, r5]
   b8fde:	f7ff fec9 	bl	b8d74 <_ZN8particle11hexToNibbleEc>
   b8fe2:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b8fe4:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b8fe6:	bfa4      	itt	ge
   b8fe8:	4338      	orrge	r0, r7
   b8fea:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8fee:	3501      	adds	r5, #1
   b8ff0:	e7d1      	b.n	b8f96 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b8ff2:	bf00      	nop
   b8ff4:	000beaa2 	.word	0x000beaa2

000b8ff8 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b8ff8:	b513      	push	{r0, r1, r4, lr}
   b8ffa:	4604      	mov	r4, r0
   b8ffc:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b8ffe:	f7ff ff15 	bl	b8e2c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b9002:	4620      	mov	r0, r4
   b9004:	9901      	ldr	r1, [sp, #4]
   b9006:	f7ff ff87 	bl	b8f18 <_ZN8particle7BleUuid9constructEPKc>
}
   b900a:	4620      	mov	r0, r4
   b900c:	b002      	add	sp, #8
   b900e:	bd10      	pop	{r4, pc}

000b9010 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b9010:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b9012:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9016:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b9018:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b901a:	8043      	strh	r3, [r0, #2]
   b901c:	220e      	movs	r2, #14
   b901e:	4629      	mov	r1, r5
   b9020:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b9022:	7105      	strb	r5, [r0, #4]
   b9024:	3006      	adds	r0, #6
   b9026:	f003 f919 	bl	bc25c <memset>
   b902a:	f104 0014 	add.w	r0, r4, #20
   b902e:	f7ff fefd 	bl	b8e2c <_ZN8particle7BleUuidC1Ev>
   b9032:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b9036:	f7ff fef9 	bl	b8e2c <_ZN8particle7BleUuidC1Ev>
   b903a:	4904      	ldr	r1, [pc, #16]	; (b904c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b903c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b9040:	f001 fa67 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b9044:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b9046:	4620      	mov	r0, r4
   b9048:	bd38      	pop	{r3, r4, r5, pc}
   b904a:	bf00      	nop
   b904c:	000be8be 	.word	0x000be8be

000b9050 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b9050:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b9052:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b9056:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b905a:	4293      	cmp	r3, r2
   b905c:	4618      	mov	r0, r3
   b905e:	d006      	beq.n	b906e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b9060:	6804      	ldr	r4, [r0, #0]
   b9062:	8824      	ldrh	r4, [r4, #0]
   b9064:	428c      	cmp	r4, r1
   b9066:	f103 0308 	add.w	r3, r3, #8
   b906a:	d1f6      	bne.n	b905a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b906c:	bd10      	pop	{r4, pc}
        return nullptr;
   b906e:	2000      	movs	r0, #0
   b9070:	e7fc      	b.n	b906c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b9074 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b9074:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9076:	4606      	mov	r6, r0
   b9078:	b085      	sub	sp, #20
   b907a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b907c:	460d      	mov	r5, r1
   b907e:	2900      	cmp	r1, #0
   b9080:	d050      	beq.n	b9124 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b9082:	2a00      	cmp	r2, #0
   b9084:	d04e      	beq.n	b9124 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b9086:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b9088:	7823      	ldrb	r3, [r4, #0]
   b908a:	2af4      	cmp	r2, #244	; 0xf4
   b908c:	bf28      	it	cs
   b908e:	22f4      	movcs	r2, #244	; 0xf4
   b9090:	b343      	cbz	r3, b90e4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b9092:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b9094:	0798      	lsls	r0, r3, #30
   b9096:	d509      	bpl.n	b90ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b9098:	89a0      	ldrh	r0, [r4, #12]
   b909a:	9203      	str	r2, [sp, #12]
   b909c:	2300      	movs	r3, #0
   b909e:	f7ff fb0d 	bl	b86bc <hal_ble_gatt_server_set_characteristic_value>
   b90a2:	2800      	cmp	r0, #0
   b90a4:	9a03      	ldr	r2, [sp, #12]
   b90a6:	da03      	bge.n	b90b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b90a8:	b005      	add	sp, #20
   b90aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b90ac:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b90b0:	6834      	ldr	r4, [r6, #0]
   b90b2:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b90b4:	06d9      	lsls	r1, r3, #27
   b90b6:	d509      	bpl.n	b90cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b90b8:	2f01      	cmp	r7, #1
   b90ba:	d007      	beq.n	b90cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b90bc:	89a0      	ldrh	r0, [r4, #12]
   b90be:	2300      	movs	r3, #0
   b90c0:	4629      	mov	r1, r5
}
   b90c2:	b005      	add	sp, #20
   b90c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b90c8:	f7ff bb2a 	b.w	b8720 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b90cc:	069b      	lsls	r3, r3, #26
   b90ce:	d5eb      	bpl.n	b90a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b90d0:	2f02      	cmp	r7, #2
   b90d2:	d0e9      	beq.n	b90a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b90d4:	89a0      	ldrh	r0, [r4, #12]
   b90d6:	2300      	movs	r3, #0
   b90d8:	4629      	mov	r1, r5
}
   b90da:	b005      	add	sp, #20
   b90dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b90e0:	f7ff bb28 	b.w	b8734 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b90e4:	8860      	ldrh	r0, [r4, #2]
   b90e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b90ea:	4288      	cmp	r0, r1
   b90ec:	d01c      	beq.n	b9128 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b90ee:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b90f0:	074e      	lsls	r6, r1, #29
   b90f2:	d501      	bpl.n	b90f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b90f4:	2f01      	cmp	r7, #1
   b90f6:	d104      	bne.n	b9102 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b90f8:	070b      	lsls	r3, r1, #28
   b90fa:	d409      	bmi.n	b9110 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b90fc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b9100:	e7d2      	b.n	b90a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b9102:	89a1      	ldrh	r1, [r4, #12]
   b9104:	9300      	str	r3, [sp, #0]
   b9106:	4613      	mov	r3, r2
   b9108:	462a      	mov	r2, r5
   b910a:	f7ff faeb 	bl	b86e4 <hal_ble_gatt_client_write_without_response>
   b910e:	e7cb      	b.n	b90a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b9110:	2f02      	cmp	r7, #2
   b9112:	d0f3      	beq.n	b90fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b9114:	2300      	movs	r3, #0
   b9116:	89a1      	ldrh	r1, [r4, #12]
   b9118:	9300      	str	r3, [sp, #0]
   b911a:	4613      	mov	r3, r2
   b911c:	462a      	mov	r2, r5
   b911e:	f7ff fad7 	bl	b86d0 <hal_ble_gatt_client_write_with_response>
   b9122:	e7c1      	b.n	b90a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b9124:	4802      	ldr	r0, [pc, #8]	; (b9130 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b9126:	e7bf      	b.n	b90a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b9128:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b912c:	e7bc      	b.n	b90a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b912e:	bf00      	nop
   b9130:	fffffef2 	.word	0xfffffef2

000b9134 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b9134:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9136:	460c      	mov	r4, r1
   b9138:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b913a:	21f4      	movs	r1, #244	; 0xf4
   b913c:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b913e:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b9140:	f003 f8f0 	bl	bc324 <strnlen>
   b9144:	9b01      	ldr	r3, [sp, #4]
   b9146:	4602      	mov	r2, r0
   b9148:	4621      	mov	r1, r4
   b914a:	4628      	mov	r0, r5
}
   b914c:	b003      	add	sp, #12
   b914e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b9152:	f7ff bf8f 	b.w	b9074 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b9158 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b9158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b915c:	2600      	movs	r6, #0
   b915e:	6006      	str	r6, [r0, #0]
   b9160:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9162:	2028      	movs	r0, #40	; 0x28
   b9164:	460c      	mov	r4, r1
   b9166:	f7fa ff96 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b916a:	1e05      	subs	r5, r0, #0
   b916c:	f105 080c 	add.w	r8, r5, #12
   b9170:	d00f      	beq.n	b9192 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b9172:	2301      	movs	r3, #1
   b9174:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9178:	4b08      	ldr	r3, [pc, #32]	; (b919c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b917a:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b917c:	4640      	mov	r0, r8
   b917e:	f7ff fe55 	bl	b8e2c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b9182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b9184:	622e      	str	r6, [r5, #32]
   b9186:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b918a:	4646      	mov	r6, r8
   b918c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b918e:	6823      	ldr	r3, [r4, #0]
   b9190:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b9192:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b9196:	4638      	mov	r0, r7
   b9198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b919c:	000bea64 	.word	0x000bea64

000b91a0 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b91a0:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b91a2:	2500      	movs	r5, #0
   b91a4:	6005      	str	r5, [r0, #0]
   b91a6:	4606      	mov	r6, r0
   b91a8:	2030      	movs	r0, #48	; 0x30
   b91aa:	f7fa ff74 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b91ae:	4604      	mov	r4, r0
   b91b0:	b188      	cbz	r0, b91d6 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b91b2:	2301      	movs	r3, #1
   b91b4:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b91b8:	4b09      	ldr	r3, [pc, #36]	; (b91e0 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b91ba:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b91bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b91c0:	8183      	strh	r3, [r0, #12]
   b91c2:	300e      	adds	r0, #14
   b91c4:	f7ff fe27 	bl	b8e16 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b91c8:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b91cc:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b91d0:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b91d4:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b91d6:	6074      	str	r4, [r6, #4]
   b91d8:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b91da:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b91dc:	4630      	mov	r0, r6
   b91de:	bd70      	pop	{r4, r5, r6, pc}
   b91e0:	000bea80 	.word	0x000bea80

000b91e4 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b91e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b91e6:	460d      	mov	r5, r1
   b91e8:	4604      	mov	r4, r0
    WiringBleLock lk;
   b91ea:	a801      	add	r0, sp, #4
   b91ec:	f7ff fdd8 	bl	b8da0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b91f0:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b91f2:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b91f6:	6023      	str	r3, [r4, #0]
   b91f8:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b91fc:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b91fe:	a801      	add	r0, sp, #4
   b9200:	f7ff fddc 	bl	b8dbc <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b9204:	4620      	mov	r0, r4
   b9206:	b003      	add	sp, #12
   b9208:	bd30      	pop	{r4, r5, pc}

000b920a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b920a:	b530      	push	{r4, r5, lr}
   b920c:	4605      	mov	r5, r0
   b920e:	b087      	sub	sp, #28
   b9210:	460c      	mov	r4, r1
    WiringBleLock lk;
   b9212:	a801      	add	r0, sp, #4
   b9214:	f7ff fdc4 	bl	b8da0 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b9218:	682a      	ldr	r2, [r5, #0]
   b921a:	6823      	ldr	r3, [r4, #0]
   b921c:	8812      	ldrh	r2, [r2, #0]
   b921e:	881b      	ldrh	r3, [r3, #0]
   b9220:	429a      	cmp	r2, r3
   b9222:	d10d      	bne.n	b9240 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b9224:	4629      	mov	r1, r5
   b9226:	a802      	add	r0, sp, #8
   b9228:	f7ff ffdc 	bl	b91e4 <_ZNK8particle13BlePeerDevice7addressEv>
   b922c:	4621      	mov	r1, r4
   b922e:	a804      	add	r0, sp, #16
   b9230:	f7ff ffd8 	bl	b91e4 <_ZNK8particle13BlePeerDevice7addressEv>
   b9234:	a904      	add	r1, sp, #16
   b9236:	a802      	add	r0, sp, #8
   b9238:	f7ff fdd9 	bl	b8dee <_ZNK8particle10BleAddresseqERKS0_>
   b923c:	4604      	mov	r4, r0
   b923e:	b900      	cbnz	r0, b9242 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b9240:	2400      	movs	r4, #0
    WiringBleLock lk;
   b9242:	a801      	add	r0, sp, #4
   b9244:	f7ff fdba 	bl	b8dbc <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b9248:	4620      	mov	r0, r4
   b924a:	b007      	add	sp, #28
   b924c:	bd30      	pop	{r4, r5, pc}
	...

000b9250 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b9250:	b510      	push	{r4, lr}
   b9252:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b9254:	2064      	movs	r0, #100	; 0x64
   b9256:	f7fa ff1e 	bl	b4096 <_Znwj>
   b925a:	b168      	cbz	r0, b9278 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b925c:	2300      	movs	r3, #0
   b925e:	e9c0 3300 	strd	r3, r3, [r0]
   b9262:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b9266:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b926a:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b926e:	6203      	str	r3, [r0, #32]
   b9270:	62c3      	str	r3, [r0, #44]	; 0x2c
   b9272:	63c3      	str	r3, [r0, #60]	; 0x3c
   b9274:	64c3      	str	r3, [r0, #76]	; 0x4c
   b9276:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b9278:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b927a:	b920      	cbnz	r0, b9286 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b927c:	4a0a      	ldr	r2, [pc, #40]	; (b92a8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b927e:	490b      	ldr	r1, [pc, #44]	; (b92ac <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b9280:	200a      	movs	r0, #10
   b9282:	f7ff fbb1 	bl	b89e8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b9286:	2000      	movs	r0, #0
   b9288:	f7ff f9e4 	bl	b8654 <hal_ble_stack_init>
   b928c:	b120      	cbz	r0, b9298 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b928e:	4a06      	ldr	r2, [pc, #24]	; (b92a8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b9290:	4907      	ldr	r1, [pc, #28]	; (b92b0 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b9292:	200a      	movs	r0, #10
   b9294:	f7ff fba8 	bl	b89e8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b9298:	6821      	ldr	r1, [r4, #0]
   b929a:	4806      	ldr	r0, [pc, #24]	; (b92b4 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b929c:	2200      	movs	r2, #0
   b929e:	f7ff fa35 	bl	b870c <hal_ble_set_callback_on_periph_link_events>
}
   b92a2:	4620      	mov	r0, r4
   b92a4:	bd10      	pop	{r4, pc}
   b92a6:	bf00      	nop
   b92a8:	000b8789 	.word	0x000b8789
   b92ac:	000be8f4 	.word	0x000be8f4
   b92b0:	000be932 	.word	0x000be932
   b92b4:	000b9839 	.word	0x000b9839

000b92b8 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b92b8:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b92ba:	4c0a      	ldr	r4, [pc, #40]	; (b92e4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b92bc:	7823      	ldrb	r3, [r4, #0]
   b92be:	f3bf 8f5b 	dmb	ish
   b92c2:	07db      	lsls	r3, r3, #31
   b92c4:	d40c      	bmi.n	b92e0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b92c6:	4620      	mov	r0, r4
   b92c8:	f7fa feed 	bl	b40a6 <__cxa_guard_acquire>
   b92cc:	b140      	cbz	r0, b92e0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b92ce:	4806      	ldr	r0, [pc, #24]	; (b92e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b92d0:	f7ff ffbe 	bl	b9250 <_ZN8particle14BleLocalDeviceC1Ev>
   b92d4:	4620      	mov	r0, r4
   b92d6:	f7fa feeb 	bl	b40b0 <__cxa_guard_release>
   b92da:	4804      	ldr	r0, [pc, #16]	; (b92ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b92dc:	f002 ff7c 	bl	bc1d8 <atexit>
    return instance;
}
   b92e0:	4801      	ldr	r0, [pc, #4]	; (b92e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b92e2:	bd10      	pop	{r4, pc}
   b92e4:	2003e6b8 	.word	0x2003e6b8
   b92e8:	2003e6c4 	.word	0x2003e6c4
   b92ec:	000b9505 	.word	0x000b9505

000b92f0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b92f0:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b92f2:	6803      	ldr	r3, [r0, #0]
   b92f4:	3b09      	subs	r3, #9
   b92f6:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b92f8:	b08d      	sub	sp, #52	; 0x34
   b92fa:	4604      	mov	r4, r0
   b92fc:	460d      	mov	r5, r1
    switch (event->type) {
   b92fe:	d811      	bhi.n	b9324 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b9300:	f7ff ffda 	bl	b92b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b9304:	88a1      	ldrh	r1, [r4, #4]
   b9306:	6800      	ldr	r0, [r0, #0]
   b9308:	f7ff fea2 	bl	b9050 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b930c:	4603      	mov	r3, r0
   b930e:	b958      	cbnz	r0, b9328 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b9310:	2220      	movs	r2, #32
   b9312:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b9316:	4a0b      	ldr	r2, [pc, #44]	; (b9344 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b9318:	9200      	str	r2, [sp, #0]
   b931a:	490b      	ldr	r1, [pc, #44]	; (b9348 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b931c:	aa04      	add	r2, sp, #16
   b931e:	2032      	movs	r0, #50	; 0x32
   b9320:	f7ff fb6a 	bl	b89f8 <log_message>
}
   b9324:	b00d      	add	sp, #52	; 0x34
   b9326:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b9328:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b932a:	2a00      	cmp	r2, #0
   b932c:	d0fa      	beq.n	b9324 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b932e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9332:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b9336:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b933a:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b933c:	aa04      	add	r2, sp, #16
   b933e:	a903      	add	r1, sp, #12
   b9340:	47a0      	blx	r4
}
   b9342:	e7ef      	b.n	b9324 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b9344:	000be974 	.word	0x000be974
   b9348:	000be90b 	.word	0x000be90b

000b934c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b934c:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b934e:	2000      	movs	r0, #0
   b9350:	f7ff f980 	bl	b8654 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b9354:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b9358:	bd08      	pop	{r3, pc}

000b935a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b935a:	b919      	cbnz	r1, b9364 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b935c:	460a      	mov	r2, r1
   b935e:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b9360:	f7ff b980 	b.w	b8664 <hal_ble_gap_set_advertising_data>
   b9364:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9368:	2200      	movs	r2, #0
   b936a:	e7f9      	b.n	b9360 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b936c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b936c:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b936e:	1e14      	subs	r4, r2, #0
   b9370:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b9372:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b9374:	db02      	blt.n	b937c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b9376:	1862      	adds	r2, r4, r1
   b9378:	429a      	cmp	r2, r3
   b937a:	dd00      	ble.n	b937e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b937c:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b937e:	682a      	ldr	r2, [r5, #0]
   b9380:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b9382:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b9384:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9386:	1a52      	subs	r2, r2, r1
   b9388:	f002 ff4e 	bl	bc228 <memmove>
    size_ -= n;
   b938c:	686a      	ldr	r2, [r5, #4]
   b938e:	1b12      	subs	r2, r2, r4
   b9390:	606a      	str	r2, [r5, #4]
}
   b9392:	bd38      	pop	{r3, r4, r5, pc}

000b9394 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b9394:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b9396:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b9398:	4604      	mov	r4, r0
   b939a:	460d      	mov	r5, r1
   b939c:	ab01      	add	r3, sp, #4
   b939e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b93a2:	f7ff fc73 	bl	b8c8c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b93a6:	4602      	mov	r2, r0
   b93a8:	b138      	cbz	r0, b93ba <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b93aa:	9901      	ldr	r1, [sp, #4]
   b93ac:	4620      	mov	r0, r4
   b93ae:	f7ff ffdd 	bl	b936c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b93b2:	4629      	mov	r1, r5
   b93b4:	4620      	mov	r0, r4
   b93b6:	f7ff ffed 	bl	b9394 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b93ba:	b003      	add	sp, #12
   b93bc:	bd30      	pop	{r4, r5, pc}

000b93be <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b93be:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b93c0:	460c      	mov	r4, r1
   b93c2:	b929      	cbnz	r1, b93d0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b93c4:	460a      	mov	r2, r1
   b93c6:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b93c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b93cc:	f7ff b952 	b.w	b8674 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b93d0:	2101      	movs	r1, #1
   b93d2:	4620      	mov	r0, r4
   b93d4:	f7ff ffde 	bl	b9394 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b93d8:	e9d4 0100 	ldrd	r0, r1, [r4]
   b93dc:	2200      	movs	r2, #0
   b93de:	e7f3      	b.n	b93c8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b93e0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b93e0:	b538      	push	{r3, r4, r5, lr}
   b93e2:	4604      	mov	r4, r0
   b93e4:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b93e6:	f7ff ffb8 	bl	b935a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b93ea:	2800      	cmp	r0, #0
   b93ec:	db0a      	blt.n	b9404 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b93ee:	4629      	mov	r1, r5
   b93f0:	4620      	mov	r0, r4
   b93f2:	f7ff ffe4 	bl	b93be <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b93f6:	2800      	cmp	r0, #0
   b93f8:	db04      	blt.n	b9404 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b93fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b93fe:	2000      	movs	r0, #0
   b9400:	f7ff b940 	b.w	b8684 <hal_ble_gap_start_advertising>
}
   b9404:	bd38      	pop	{r3, r4, r5, pc}
	...

000b9408 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b9408:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b940a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b940c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b940e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9410:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b9412:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9414:	f7fa fe3f 	bl	b4096 <_Znwj>
   b9418:	b118      	cbz	r0, b9422 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b941a:	682b      	ldr	r3, [r5, #0]
   b941c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b941e:	686b      	ldr	r3, [r5, #4]
   b9420:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b9422:	4b03      	ldr	r3, [pc, #12]	; (b9430 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b9424:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b9426:	4b03      	ldr	r3, [pc, #12]	; (b9434 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9428:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b942a:	60a3      	str	r3, [r4, #8]
      }
   b942c:	4620      	mov	r0, r4
   b942e:	bd38      	pop	{r3, r4, r5, pc}
   b9430:	000b8ccd 	.word	0x000b8ccd
   b9434:	000b8ce5 	.word	0x000b8ce5

000b9438 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b9438:	680b      	ldr	r3, [r1, #0]
   b943a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b943c:	b113      	cbz	r3, b9444 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b943e:	685a      	ldr	r2, [r3, #4]
   b9440:	3201      	adds	r2, #1
   b9442:	605a      	str	r2, [r3, #4]
      }
   b9444:	4770      	bx	lr

000b9446 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b9446:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9448:	f851 3b04 	ldr.w	r3, [r1], #4
   b944c:	4604      	mov	r4, r0
   b944e:	f840 3b04 	str.w	r3, [r0], #4
   b9452:	f7ff fff1 	bl	b9438 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b9456:	6823      	ldr	r3, [r4, #0]
   b9458:	b90b      	cbnz	r3, b945e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b945a:	f7ff fc2d 	bl	b8cb8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b945e:	4620      	mov	r0, r4
   b9460:	bd10      	pop	{r4, pc}

000b9462 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b9462:	b510      	push	{r4, lr}
   b9464:	f851 3b04 	ldr.w	r3, [r1], #4
   b9468:	4604      	mov	r4, r0
   b946a:	f840 3b04 	str.w	r3, [r0], #4
   b946e:	f7ff ffe3 	bl	b9438 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b9472:	4620      	mov	r0, r4
   b9474:	bd10      	pop	{r4, pc}

000b9476 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b9476:	b510      	push	{r4, lr}
   b9478:	f851 3b04 	ldr.w	r3, [r1], #4
   b947c:	4604      	mov	r4, r0
   b947e:	f840 3b04 	str.w	r3, [r0], #4
   b9482:	f7ff ffd9 	bl	b9438 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b9486:	4620      	mov	r0, r4
   b9488:	bd10      	pop	{r4, pc}

000b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b948a:	b510      	push	{r4, lr}
   b948c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b948e:	6800      	ldr	r0, [r0, #0]
   b9490:	b108      	cbz	r0, b9496 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b9492:	f7ff fc5b 	bl	b8d4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b9496:	4620      	mov	r0, r4
   b9498:	bd10      	pop	{r4, pc}

000b949a <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b949a:	b510      	push	{r4, lr}
   b949c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b949e:	3004      	adds	r0, #4
   b94a0:	f7ff fff3 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b94a4:	4620      	mov	r0, r4
   b94a6:	bd10      	pop	{r4, pc}

000b94a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b94a8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b94aa:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b94ae:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b94b0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b94b4:	42ae      	cmp	r6, r5
   b94b6:	d004      	beq.n	b94c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b94b8:	1d28      	adds	r0, r5, #4
   b94ba:	f7ff ffe6 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b94be:	3508      	adds	r5, #8
   b94c0:	e7f8      	b.n	b94b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b94c2:	6820      	ldr	r0, [r4, #0]
   b94c4:	f7ff fb44 	bl	b8b50 <free>
}
   b94c8:	4620      	mov	r0, r4
   b94ca:	bd70      	pop	{r4, r5, r6, pc}

000b94cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b94cc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b94ce:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b94d2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b94d4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b94d8:	42ae      	cmp	r6, r5
   b94da:	d004      	beq.n	b94e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b94dc:	1d28      	adds	r0, r5, #4
   b94de:	f7ff ffd4 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b94e2:	3508      	adds	r5, #8
   b94e4:	e7f8      	b.n	b94d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b94e6:	6820      	ldr	r0, [r4, #0]
   b94e8:	f7ff fb32 	bl	b8b50 <free>
}
   b94ec:	4620      	mov	r0, r4
   b94ee:	bd70      	pop	{r4, r5, r6, pc}

000b94f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b94f0:	b510      	push	{r4, lr}
   b94f2:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b94f4:	3024      	adds	r0, #36	; 0x24
   b94f6:	f7ff ffe9 	bl	b94cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b94fa:	f104 0018 	add.w	r0, r4, #24
   b94fe:	f7ff ffd3 	bl	b94a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b9502:	bd10      	pop	{r4, pc}

000b9504 <__tcf_0>:
    static BleLocalDevice instance;
   b9504:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b9506:	4b17      	ldr	r3, [pc, #92]	; (b9564 <__tcf_0+0x60>)
   b9508:	681c      	ldr	r4, [r3, #0]
   b950a:	b354      	cbz	r4, b9562 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b950c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b9510:	f7ff fc08 	bl	b8d24 <_ZNSt14_Function_baseD1Ev>
   b9514:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b9518:	f7ff fc04 	bl	b8d24 <_ZNSt14_Function_baseD1Ev>
   b951c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b9520:	f7ff fc00 	bl	b8d24 <_ZNSt14_Function_baseD1Ev>
   b9524:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b9528:	f7ff fbfc 	bl	b8d24 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b952c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b9530:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b9534:	42ae      	cmp	r6, r5
   b9536:	d004      	beq.n	b9542 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b9538:	1d28      	adds	r0, r5, #4
   b953a:	f7ff ffa6 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b953e:	3508      	adds	r5, #8
   b9540:	e7f8      	b.n	b9534 <__tcf_0+0x30>
    ::free(ptr);
   b9542:	69a0      	ldr	r0, [r4, #24]
   b9544:	f7ff fb04 	bl	b8b50 <free>
    ~BleLocalDeviceImpl() = default;
   b9548:	f104 000c 	add.w	r0, r4, #12
   b954c:	f7ff ffbe 	bl	b94cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b9550:	4620      	mov	r0, r4
   b9552:	f7ff ffa9 	bl	b94a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b9556:	4620      	mov	r0, r4
   b9558:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b955a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b955e:	f7fa bda0 	b.w	b40a2 <_ZdlPvj>
   b9562:	bd70      	pop	{r4, r5, r6, pc}
   b9564:	2003e6c4 	.word	0x2003e6c4

000b9568 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b9568:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b956a:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b956c:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b9570:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b9574:	6803      	ldr	r3, [r0, #0]
   b9576:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b9578:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b957a:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b957c:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b957e:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b9580:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b9582:	f7ff ff82 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b9586:	b002      	add	sp, #8
   b9588:	bd10      	pop	{r4, pc}

000b958a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b958a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b958c:	b510      	push	{r4, lr}
      if (_M_empty())
   b958e:	b90a      	cbnz	r2, b9594 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b9590:	f001 fe5d 	bl	bb24e <_ZSt25__throw_bad_function_callv>
    }
   b9594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9598:	68c3      	ldr	r3, [r0, #12]
   b959a:	4718      	bx	r3

000b959c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b959c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b959e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b95a0:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b95a2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b95a4:	dd03      	ble.n	b95ae <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b95a6:	f7ff fadb 	bl	b8b60 <realloc>
            if (!d) {
   b95aa:	b918      	cbnz	r0, b95b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b95ac:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b95ae:	f7ff facf 	bl	b8b50 <free>
        T* d = nullptr;
   b95b2:	2000      	movs	r0, #0
        data_ = d;
   b95b4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b95b6:	60a5      	str	r5, [r4, #8]
        return true;
   b95b8:	2001      	movs	r0, #1
   b95ba:	e7f7      	b.n	b95ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b95bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b95bc:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b95be:	6883      	ldr	r3, [r0, #8]
   b95c0:	428b      	cmp	r3, r1
   b95c2:	da02      	bge.n	b95ca <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b95c4:	f7ff ffea 	bl	b959c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b95c8:	bd08      	pop	{r3, pc}
    return true;
   b95ca:	2001      	movs	r0, #1
   b95cc:	e7fc      	b.n	b95c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b95ce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b95ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b95d2:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b95d4:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b95d6:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b95d8:	4419      	add	r1, r3
   b95da:	6883      	ldr	r3, [r0, #8]
   b95dc:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b95de:	4604      	mov	r4, r0
   b95e0:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b95e2:	dc12      	bgt.n	b960a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b95e4:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b95e6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b95e8:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b95ea:	1bd2      	subs	r2, r2, r7
   b95ec:	4631      	mov	r1, r6
   b95ee:	1970      	adds	r0, r6, r5
   b95f0:	f002 fe1a 	bl	bc228 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b95f4:	462a      	mov	r2, r5
   b95f6:	4641      	mov	r1, r8
   b95f8:	4630      	mov	r0, r6
   b95fa:	f002 fe07 	bl	bc20c <memcpy>
    size_ += n;
   b95fe:	6863      	ldr	r3, [r4, #4]
   b9600:	442b      	add	r3, r5
   b9602:	6063      	str	r3, [r4, #4]
    return true;
   b9604:	2001      	movs	r0, #1
}
   b9606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b960a:	f7ff ffc7 	bl	b959c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b960e:	2800      	cmp	r0, #0
   b9610:	d1e8      	bne.n	b95e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b9612:	e7f8      	b.n	b9606 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b9614 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b9614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9616:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9618:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b961c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b961e:	4604      	mov	r4, r0
   b9620:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9622:	da0b      	bge.n	b963c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b9624:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9626:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9628:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b962a:	1b52      	subs	r2, r2, r5
   b962c:	1c48      	adds	r0, r1, #1
   b962e:	f002 fdfb 	bl	bc228 <memmove>
    new(p) T(std::move(value));
   b9632:	557e      	strb	r6, [r7, r5]
    ++size_;
   b9634:	6863      	ldr	r3, [r4, #4]
   b9636:	3301      	adds	r3, #1
   b9638:	6063      	str	r3, [r4, #4]
}
   b963a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b963c:	3101      	adds	r1, #1
   b963e:	f7ff ffad 	bl	b959c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b9642:	2800      	cmp	r0, #0
   b9644:	d1ee      	bne.n	b9624 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b9646:	e7f8      	b.n	b963a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b9648 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9648:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b964a:	6841      	ldr	r1, [r0, #4]
   b964c:	f7ff bfe2 	b.w	b9614 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b9650 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b9650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b9654:	4604      	mov	r4, r0
   b9656:	461d      	mov	r5, r3
   b9658:	460f      	mov	r7, r1
   b965a:	ab01      	add	r3, sp, #4
   b965c:	4690      	mov	r8, r2
   b965e:	460a      	mov	r2, r1
   b9660:	e9d0 0100 	ldrd	r0, r1, [r0]
   b9664:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b9668:	f7ff fb10 	bl	b8c8c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b966c:	1cae      	adds	r6, r5, #2
   b966e:	6863      	ldr	r3, [r4, #4]
   b9670:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b9672:	f1b9 0f00 	cmp.w	r9, #0
   b9676:	d126      	bne.n	b96c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b9678:	b328      	cbz	r0, b96c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b967a:	4433      	add	r3, r6
   b967c:	1a1b      	subs	r3, r3, r0
   b967e:	2bff      	cmp	r3, #255	; 0xff
   b9680:	d809      	bhi.n	b9696 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b9682:	9901      	ldr	r1, [sp, #4]
   b9684:	4620      	mov	r0, r4
   b9686:	f7ff fe71 	bl	b936c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b968a:	6861      	ldr	r1, [r4, #4]
   b968c:	4620      	mov	r0, r4
   b968e:	4431      	add	r1, r6
   b9690:	f7ff ff94 	bl	b95bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b9694:	b918      	cbnz	r0, b969e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b9696:	6860      	ldr	r0, [r4, #4]
}
   b9698:	b003      	add	sp, #12
   b969a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b969e:	1c6a      	adds	r2, r5, #1
   b96a0:	9901      	ldr	r1, [sp, #4]
   b96a2:	b2d2      	uxtb	r2, r2
   b96a4:	4620      	mov	r0, r4
   b96a6:	f7ff ffb5 	bl	b9614 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b96aa:	9901      	ldr	r1, [sp, #4]
   b96ac:	463a      	mov	r2, r7
   b96ae:	3101      	adds	r1, #1
   b96b0:	4620      	mov	r0, r4
   b96b2:	f7ff ffaf 	bl	b9614 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b96b6:	9901      	ldr	r1, [sp, #4]
   b96b8:	462b      	mov	r3, r5
   b96ba:	4642      	mov	r2, r8
   b96bc:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b96be:	4620      	mov	r0, r4
   b96c0:	f7ff ff85 	bl	b95ce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b96c4:	e7e7      	b.n	b9696 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b96c6:	18f1      	adds	r1, r6, r3
   b96c8:	29ff      	cmp	r1, #255	; 0xff
   b96ca:	d8e4      	bhi.n	b9696 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b96cc:	4620      	mov	r0, r4
   b96ce:	f7ff ff75 	bl	b95bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b96d2:	2800      	cmp	r0, #0
   b96d4:	d0df      	beq.n	b9696 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b96d6:	1c69      	adds	r1, r5, #1
   b96d8:	b2c9      	uxtb	r1, r1
   b96da:	4620      	mov	r0, r4
   b96dc:	f7ff ffb4 	bl	b9648 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b96e0:	4639      	mov	r1, r7
   b96e2:	4620      	mov	r0, r4
   b96e4:	f7ff ffb0 	bl	b9648 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b96e8:	6861      	ldr	r1, [r4, #4]
   b96ea:	462b      	mov	r3, r5
   b96ec:	4642      	mov	r2, r8
   b96ee:	e7e6      	b.n	b96be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b96f0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b96f0:	b430      	push	{r4, r5}
   b96f2:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b96f6:	b11a      	cbz	r2, b9700 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b96f8:	9502      	str	r5, [sp, #8]
}
   b96fa:	bc30      	pop	{r4, r5}
   b96fc:	f7ff bfa8 	b.w	b9650 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b9700:	6840      	ldr	r0, [r0, #4]
}
   b9702:	bc30      	pop	{r4, r5}
   b9704:	4770      	bx	lr

000b9706 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b9706:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b9708:	2300      	movs	r3, #0
   b970a:	e9c0 3300 	strd	r3, r3, [r0]
   b970e:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b9710:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b9712:	9300      	str	r3, [sp, #0]
   b9714:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b9716:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b971a:	4619      	mov	r1, r3
   b971c:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b9720:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b9722:	f7ff ffe5 	bl	b96f0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b9726:	4620      	mov	r0, r4
   b9728:	b004      	add	sp, #16
   b972a:	bd10      	pop	{r4, pc}

000b972c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b972c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b972e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9730:	4604      	mov	r4, r0
   b9732:	460d      	mov	r5, r1
   b9734:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9736:	d914      	bls.n	b9762 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9738:	4290      	cmp	r0, r2
   b973a:	d213      	bcs.n	b9764 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b973c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b9740:	1a75      	subs	r5, r6, r1
   b9742:	f1a1 0708 	sub.w	r7, r1, #8
   b9746:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9748:	42b7      	cmp	r7, r6
   b974a:	d018      	beq.n	b977e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b974c:	b11c      	cbz	r4, b9756 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b974e:	4631      	mov	r1, r6
   b9750:	4620      	mov	r0, r4
   b9752:	f7ff fe90 	bl	b9476 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b9756:	1d30      	adds	r0, r6, #4
   b9758:	f7ff fe97 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b975c:	3e08      	subs	r6, #8
   b975e:	3c08      	subs	r4, #8
   b9760:	e7f2      	b.n	b9748 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b9762:	d00c      	beq.n	b977e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b9764:	42b5      	cmp	r5, r6
   b9766:	d00a      	beq.n	b977e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9768:	b11c      	cbz	r4, b9772 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b976a:	4629      	mov	r1, r5
   b976c:	4620      	mov	r0, r4
   b976e:	f7ff fe82 	bl	b9476 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9772:	1d28      	adds	r0, r5, #4
   b9774:	f7ff fe89 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9778:	3508      	adds	r5, #8
   b977a:	3408      	adds	r4, #8
   b977c:	e7f2      	b.n	b9764 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b977e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9780 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9782:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b9784:	6846      	ldr	r6, [r0, #4]
   b9786:	4668      	mov	r0, sp
   b9788:	f7ff fe75 	bl	b9476 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b978c:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b9790:	429f      	cmp	r7, r3
   b9792:	db12      	blt.n	b97ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b9794:	3701      	adds	r7, #1
        if (n > 0) {
   b9796:	2f00      	cmp	r7, #0
   b9798:	dd29      	ble.n	b97ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b979a:	00f8      	lsls	r0, r7, #3
   b979c:	f7ff f9d0 	bl	b8b40 <malloc>
            if (!d) {
   b97a0:	4605      	mov	r5, r0
   b97a2:	b1f0      	cbz	r0, b97e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b97a4:	e9d4 1200 	ldrd	r1, r2, [r4]
   b97a8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b97ac:	f7ff ffbe 	bl	b972c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b97b0:	6820      	ldr	r0, [r4, #0]
   b97b2:	f7ff f9cd 	bl	b8b50 <free>
        data_ = d;
   b97b6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b97b8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b97ba:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b97bc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b97be:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b97c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b97c6:	4631      	mov	r1, r6
   b97c8:	f106 0008 	add.w	r0, r6, #8
   b97cc:	f7ff ffae 	bl	b972c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b97d0:	b11e      	cbz	r6, b97da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b97d2:	4669      	mov	r1, sp
   b97d4:	4630      	mov	r0, r6
   b97d6:	f7ff fe4e 	bl	b9476 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b97da:	6863      	ldr	r3, [r4, #4]
   b97dc:	3301      	adds	r3, #1
   b97de:	6063      	str	r3, [r4, #4]
    return true;
   b97e0:	2501      	movs	r5, #1
   b97e2:	a801      	add	r0, sp, #4
   b97e4:	f7ff fe51 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b97e8:	4628      	mov	r0, r5
   b97ea:	b003      	add	sp, #12
   b97ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b97ee:	2500      	movs	r5, #0
   b97f0:	e7de      	b.n	b97b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b97f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b97f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b97f4:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b97f8:	4605      	mov	r5, r0
   b97fa:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b97fc:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b9800:	42a6      	cmp	r6, r4
   b9802:	d005      	beq.n	b9810 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b9804:	4639      	mov	r1, r7
   b9806:	4620      	mov	r0, r4
   b9808:	f7ff fcff 	bl	b920a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b980c:	b108      	cbz	r0, b9812 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b980e:	b914      	cbnz	r4, b9816 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b9810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b9812:	3408      	adds	r4, #8
   b9814:	e7f4      	b.n	b9800 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b9816:	1d20      	adds	r0, r4, #4
   b9818:	f7ff fe37 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b981c:	e9d5 3200 	ldrd	r3, r2, [r5]
   b9820:	f104 0108 	add.w	r1, r4, #8
   b9824:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b9828:	4620      	mov	r0, r4
   b982a:	f7ff ff7f 	bl	b972c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b982e:	686b      	ldr	r3, [r5, #4]
   b9830:	3b01      	subs	r3, #1
   b9832:	606b      	str	r3, [r5, #4]
    return true;
   b9834:	e7ec      	b.n	b9810 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b9838 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b9838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b983c:	4605      	mov	r5, r0
   b983e:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b9840:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b9842:	460c      	mov	r4, r1
        WiringBleLock lk;
   b9844:	f7ff faac 	bl	b8da0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b9848:	682e      	ldr	r6, [r5, #0]
   b984a:	1ef3      	subs	r3, r6, #3
   b984c:	2b0d      	cmp	r3, #13
   b984e:	d83c      	bhi.n	b98ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b9850:	e8df f013 	tbh	[pc, r3, lsl #1]
   b9854:	0053000e 	.word	0x0053000e
   b9858:	00d1003b 	.word	0x00d1003b
   b985c:	003b003b 	.word	0x003b003b
   b9860:	003b003b 	.word	0x003b003b
   b9864:	009b003b 	.word	0x009b003b
   b9868:	009b009b 	.word	0x009b009b
   b986c:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b9870:	a804      	add	r0, sp, #16
   b9872:	f7ff fc95 	bl	b91a0 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b9876:	9b04      	ldr	r3, [sp, #16]
   b9878:	89aa      	ldrh	r2, [r5, #12]
   b987a:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b987c:	6869      	ldr	r1, [r5, #4]
   b987e:	9804      	ldr	r0, [sp, #16]
   b9880:	3108      	adds	r1, #8
   b9882:	3002      	adds	r0, #2
   b9884:	f7ff faa6 	bl	b8dd4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b9888:	a904      	add	r1, sp, #16
   b988a:	a806      	add	r0, sp, #24
   b988c:	f7ff fdf3 	bl	b9476 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b9890:	a906      	add	r1, sp, #24
   b9892:	f104 0018 	add.w	r0, r4, #24
   b9896:	f7ff ff73 	bl	b9780 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b989a:	4605      	mov	r5, r0
   b989c:	a807      	add	r0, sp, #28
   b989e:	f7ff fdf4 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b98a2:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b98a4:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b98a6:	b9b5      	cbnz	r5, b98d6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b98a8:	4b5d      	ldr	r3, [pc, #372]	; (b9a20 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b98aa:	495e      	ldr	r1, [pc, #376]	; (b9a24 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b98ac:	9300      	str	r3, [sp, #0]
   b98ae:	2032      	movs	r0, #50	; 0x32
   b98b0:	462b      	mov	r3, r5
   b98b2:	aa06      	add	r2, sp, #24
   b98b4:	9507      	str	r5, [sp, #28]
   b98b6:	f7ff f89f 	bl	b89f8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b98ba:	9b04      	ldr	r3, [sp, #16]
   b98bc:	4629      	mov	r1, r5
   b98be:	8818      	ldrh	r0, [r3, #0]
   b98c0:	f7fe fee8 	bl	b8694 <hal_ble_gap_disconnect>
   b98c4:	a805      	add	r0, sp, #20
   b98c6:	f7ff fde0 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b98ca:	a803      	add	r0, sp, #12
   b98cc:	f7ff fa76 	bl	b8dbc <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b98d0:	b00e      	add	sp, #56	; 0x38
   b98d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b98d6:	4a54      	ldr	r2, [pc, #336]	; (b9a28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b98d8:	9200      	str	r2, [sp, #0]
   b98da:	2300      	movs	r3, #0
   b98dc:	4951      	ldr	r1, [pc, #324]	; (b9a24 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b98de:	9307      	str	r3, [sp, #28]
   b98e0:	aa06      	add	r2, sp, #24
   b98e2:	2001      	movs	r0, #1
   b98e4:	f7ff f888 	bl	b89f8 <log_message>
                if (impl->connectedCallback_) {
   b98e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b98ea:	2b00      	cmp	r3, #0
   b98ec:	d0ea      	beq.n	b98c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b98ee:	a904      	add	r1, sp, #16
   b98f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b98f4:	f7ff fe49 	bl	b958a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b98f8:	e7e4      	b.n	b98c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b98fa:	89a9      	ldrh	r1, [r5, #12]
   b98fc:	4620      	mov	r0, r4
   b98fe:	f7ff fba7 	bl	b9050 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b9902:	4606      	mov	r6, r0
   b9904:	2800      	cmp	r0, #0
   b9906:	d0e0      	beq.n	b98ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b9908:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b990a:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b990e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b9912:	8029      	strh	r1, [r5, #0]
   b9914:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b9918:	429a      	cmp	r2, r3
   b991a:	d003      	beq.n	b9924 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b991c:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b9920:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b9922:	e7f9      	b.n	b9918 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b9924:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b9928:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b992c:	45b8      	cmp	r8, r7
   b992e:	d004      	beq.n	b993a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b9930:	1d38      	adds	r0, r7, #4
   b9932:	f7ff fdaa 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9936:	3708      	adds	r7, #8
   b9938:	e7f8      	b.n	b992c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b993a:	2300      	movs	r3, #0
   b993c:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b993e:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b9942:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b9946:	45b8      	cmp	r8, r7
   b9948:	d004      	beq.n	b9954 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b994a:	1d38      	adds	r0, r7, #4
   b994c:	f7ff fd9d 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9950:	3708      	adds	r7, #8
   b9952:	e7f8      	b.n	b9946 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b9954:	2300      	movs	r3, #0
   b9956:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b9958:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b995a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b995c:	b123      	cbz	r3, b9968 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b995e:	4631      	mov	r1, r6
   b9960:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b9964:	f7ff fe11 	bl	b958a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b9968:	2300      	movs	r3, #0
   b996a:	2220      	movs	r2, #32
   b996c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b9970:	4a2e      	ldr	r2, [pc, #184]	; (b9a2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b9972:	9200      	str	r2, [sp, #0]
   b9974:	492b      	ldr	r1, [pc, #172]	; (b9a24 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b9976:	aa06      	add	r2, sp, #24
   b9978:	2001      	movs	r0, #1
   b997a:	f7ff f83d 	bl	b89f8 <log_message>
                    impl->peers_.removeOne(*peer);
   b997e:	4631      	mov	r1, r6
   b9980:	f104 0018 	add.w	r0, r4, #24
   b9984:	f7ff ff35 	bl	b97f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b9988:	e79f      	b.n	b98ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b998a:	89a9      	ldrh	r1, [r5, #12]
   b998c:	4620      	mov	r0, r4
   b998e:	f7ff fb5f 	bl	b9050 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b9992:	2800      	cmp	r0, #0
   b9994:	d099      	beq.n	b98ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b9996:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b9998:	2b00      	cmp	r3, #0
   b999a:	d096      	beq.n	b98ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b999c:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b999e:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b99a0:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b99a4:	d001      	beq.n	b99aa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b99a6:	2e10      	cmp	r6, #16
   b99a8:	d117      	bne.n	b99da <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b99aa:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b99ac:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b99ae:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b99b0:	2506      	movs	r5, #6
                        };
   b99b2:	f88d 3015 	strb.w	r3, [sp, #21]
   b99b6:	9104      	str	r1, [sp, #16]
   b99b8:	f88d 2014 	strb.w	r2, [sp, #20]
   b99bc:	9006      	str	r0, [sp, #24]
   b99be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b99c2:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b99c4:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b99c8:	9508      	str	r5, [sp, #32]
   b99ca:	e883 0003 	stmia.w	r3, {r0, r1}
   b99ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b99d0:	a906      	add	r1, sp, #24
   b99d2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b99d6:	4798      	blx	r3
   b99d8:	e777      	b.n	b98ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b99da:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b99dc:	bf01      	itttt	eq
   b99de:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b99e0:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b99e2:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b99e6:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b99e8:	bf0f      	iteee	eq
   b99ea:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b99ee:	461a      	movne	r2, r3
   b99f0:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b99f2:	461d      	movne	r5, r3
   b99f4:	e7dd      	b.n	b99b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b99f6:	89a9      	ldrh	r1, [r5, #12]
   b99f8:	4620      	mov	r0, r4
   b99fa:	f7ff fb29 	bl	b9050 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b99fe:	4601      	mov	r1, r0
   b9a00:	2800      	cmp	r0, #0
   b9a02:	f43f af62 	beq.w	b98ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b9a06:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b9a08:	2b00      	cmp	r3, #0
   b9a0a:	f43f af5e 	beq.w	b98ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b9a0e:	686b      	ldr	r3, [r5, #4]
   b9a10:	9306      	str	r3, [sp, #24]
   b9a12:	aa06      	add	r2, sp, #24
   b9a14:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b9a16:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b9a1a:	4798      	blx	r3
   b9a1c:	e755      	b.n	b98ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b9a1e:	bf00      	nop
   b9a20:	000be98c 	.word	0x000be98c
   b9a24:	000be90b 	.word	0x000be90b
   b9a28:	000be9b2 	.word	0x000be9b2
   b9a2c:	000be9cf 	.word	0x000be9cf

000b9a30 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b9a30:	b513      	push	{r0, r1, r4, lr}
   b9a32:	460b      	mov	r3, r1
   b9a34:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9a36:	e9d0 0100 	ldrd	r0, r1, [r0]
   b9a3a:	466c      	mov	r4, sp
   b9a3c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b9a40:	e893 0003 	ldmia.w	r3, {r0, r1}
   b9a44:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b9a48:	e894 0003 	ldmia.w	r4, {r0, r1}
   b9a4c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b9a50:	b002      	add	sp, #8
   b9a52:	bd10      	pop	{r4, pc}

000b9a54 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b9a54:	b538      	push	{r3, r4, r5, lr}
   b9a56:	4605      	mov	r5, r0
   b9a58:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b9a5a:	f7ff ffe9 	bl	b9a30 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9a5e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9a60:	68a2      	ldr	r2, [r4, #8]
   b9a62:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9a64:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9a66:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9a68:	68e2      	ldr	r2, [r4, #12]
   b9a6a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b9a6c:	60e3      	str	r3, [r4, #12]
      }
   b9a6e:	bd38      	pop	{r3, r4, r5, pc}

000b9a70 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b9a70:	b570      	push	{r4, r5, r6, lr}
   b9a72:	4604      	mov	r4, r0
   b9a74:	b08c      	sub	sp, #48	; 0x30
   b9a76:	460e      	mov	r6, r1
   b9a78:	9201      	str	r2, [sp, #4]
   b9a7a:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b9a7c:	f7ff fac8 	bl	b9010 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b9a80:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b9a82:	9901      	ldr	r1, [sp, #4]
   b9a84:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b9a88:	f000 fd8b 	bl	ba5a2 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b9a8c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b9a90:	b1cd      	cbz	r5, b9ac6 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b9a92:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b9a94:	9502      	str	r5, [sp, #8]
   b9a96:	a902      	add	r1, sp, #8
   b9a98:	a804      	add	r0, sp, #16
   b9a9a:	9303      	str	r3, [sp, #12]
   b9a9c:	f7ff fcb4 	bl	b9408 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b9aa0:	2300      	movs	r3, #0
	__x.swap(*this);
   b9aa2:	a908      	add	r1, sp, #32
   b9aa4:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b9aa6:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b9aa8:	f7ff ffd4 	bl	b9a54 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b9aac:	4631      	mov	r1, r6
   b9aae:	a808      	add	r0, sp, #32
   b9ab0:	f7ff ffd0 	bl	b9a54 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b9ab4:	a808      	add	r0, sp, #32
   b9ab6:	f7ff f935 	bl	b8d24 <_ZNSt14_Function_baseD1Ev>
   b9aba:	a804      	add	r0, sp, #16
   b9abc:	f7ff f932 	bl	b8d24 <_ZNSt14_Function_baseD1Ev>
    }
   b9ac0:	4620      	mov	r0, r4
   b9ac2:	b00c      	add	sp, #48	; 0x30
   b9ac4:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b9ac6:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b9ac8:	e7ea      	b.n	b9aa0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b9acc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b9acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9ad0:	b087      	sub	sp, #28
   b9ad2:	461d      	mov	r5, r3
   b9ad4:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b9ad8:	4680      	mov	r8, r0
   b9ada:	468b      	mov	fp, r1
   b9adc:	4692      	mov	sl, r2
   b9ade:	9912      	ldr	r1, [sp, #72]	; 0x48
   b9ae0:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9ae2:	2200      	movs	r2, #0
   b9ae4:	2068      	movs	r0, #104	; 0x68
   b9ae6:	9102      	str	r1, [sp, #8]
   b9ae8:	9204      	str	r2, [sp, #16]
   b9aea:	f7fa fad4 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9aee:	1e06      	subs	r6, r0, #0
   b9af0:	f106 090c 	add.w	r9, r6, #12
   b9af4:	d018      	beq.n	b9b28 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b9af6:	2201      	movs	r2, #1
	: _M_impl(__a)
   b9af8:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b9afa:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b9afe:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b9b00:	4a15      	ldr	r2, [pc, #84]	; (b9b58 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b9b02:	f847 2b20 	str.w	r2, [r7], #32
   b9b06:	9b03      	ldr	r3, [sp, #12]
   b9b08:	9100      	str	r1, [sp, #0]
   b9b0a:	465a      	mov	r2, fp
   b9b0c:	4651      	mov	r1, sl
   b9b0e:	4648      	mov	r0, r9
   b9b10:	f7ff ffae 	bl	b9a70 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b9b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9b16:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b9b18:	682b      	ldr	r3, [r5, #0]
   b9b1a:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b9b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9b1e:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b9b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9b24:	6823      	ldr	r3, [r4, #0]
   b9b26:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b9b28:	a904      	add	r1, sp, #16
   b9b2a:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b9b2c:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b9b30:	f7ff fd1a 	bl	b9568 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b9b34:	a805      	add	r0, sp, #20
   b9b36:	f7ff fca8 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b9b3a:	f8d8 3000 	ldr.w	r3, [r8]
   b9b3e:	b93b      	cbnz	r3, b9b50 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b9b40:	4a06      	ldr	r2, [pc, #24]	; (b9b5c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b9b42:	4907      	ldr	r1, [pc, #28]	; (b9b60 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b9b44:	200a      	movs	r0, #10
}
   b9b46:	b007      	add	sp, #28
   b9b48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b9b4c:	f7fe bf4c 	b.w	b89e8 <panic_>
}
   b9b50:	b007      	add	sp, #28
   b9b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9b56:	bf00      	nop
   b9b58:	000bea48 	.word	0x000bea48
   b9b5c:	000b8789 	.word	0x000b8789
   b9b60:	000be8f4 	.word	0x000be8f4

000b9b64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9b64:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9b68:	4604      	mov	r4, r0
   b9b6a:	460d      	mov	r5, r1
   b9b6c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9b6e:	d914      	bls.n	b9b9a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9b70:	4290      	cmp	r0, r2
   b9b72:	d213      	bcs.n	b9b9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9b74:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b9b78:	1a75      	subs	r5, r6, r1
   b9b7a:	f1a1 0708 	sub.w	r7, r1, #8
   b9b7e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9b80:	42b7      	cmp	r7, r6
   b9b82:	d018      	beq.n	b9bb6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9b84:	b11c      	cbz	r4, b9b8e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9b86:	4631      	mov	r1, r6
   b9b88:	4620      	mov	r0, r4
   b9b8a:	f7ff fc6a 	bl	b9462 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9b8e:	1d30      	adds	r0, r6, #4
   b9b90:	f7ff fc7b 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b9b94:	3e08      	subs	r6, #8
   b9b96:	3c08      	subs	r4, #8
   b9b98:	e7f2      	b.n	b9b80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b9b9a:	d00c      	beq.n	b9bb6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b9b9c:	42b5      	cmp	r5, r6
   b9b9e:	d00a      	beq.n	b9bb6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9ba0:	b11c      	cbz	r4, b9baa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9ba2:	4629      	mov	r1, r5
   b9ba4:	4620      	mov	r0, r4
   b9ba6:	f7ff fc5c 	bl	b9462 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9baa:	1d28      	adds	r0, r5, #4
   b9bac:	f7ff fc6d 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9bb0:	3508      	adds	r5, #8
   b9bb2:	3408      	adds	r4, #8
   b9bb4:	e7f2      	b.n	b9b9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b9bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9bb8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b9bb8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b9bba:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9bbc:	4605      	mov	r5, r0
        if (n > 0) {
   b9bbe:	dd11      	ble.n	b9be4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9bc0:	00f0      	lsls	r0, r6, #3
   b9bc2:	f7fe ffbd 	bl	b8b40 <malloc>
            if (!d) {
   b9bc6:	4604      	mov	r4, r0
   b9bc8:	b158      	cbz	r0, b9be2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b9bca:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9bce:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9bd2:	f7ff ffc7 	bl	b9b64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9bd6:	6828      	ldr	r0, [r5, #0]
   b9bd8:	f7fe ffba 	bl	b8b50 <free>
        data_ = d;
   b9bdc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9bde:	60ae      	str	r6, [r5, #8]
        return true;
   b9be0:	2001      	movs	r0, #1
    }
   b9be2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9be4:	2400      	movs	r4, #0
   b9be6:	e7f6      	b.n	b9bd6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b9be8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9be8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9bea:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b9bec:	6845      	ldr	r5, [r0, #4]
   b9bee:	4668      	mov	r0, sp
   b9bf0:	f7ff fc37 	bl	b9462 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9bf4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b9bf8:	4299      	cmp	r1, r3
   b9bfa:	da10      	bge.n	b9c1e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b9bfc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9bfe:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9c00:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b9c04:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b9c08:	4629      	mov	r1, r5
   b9c0a:	f105 0008 	add.w	r0, r5, #8
   b9c0e:	f7ff ffa9 	bl	b9b64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9c12:	b98d      	cbnz	r5, b9c38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b9c14:	6863      	ldr	r3, [r4, #4]
   b9c16:	3301      	adds	r3, #1
   b9c18:	6063      	str	r3, [r4, #4]
    return true;
   b9c1a:	2601      	movs	r6, #1
   b9c1c:	e006      	b.n	b9c2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9c1e:	3101      	adds	r1, #1
   b9c20:	4620      	mov	r0, r4
   b9c22:	f7ff ffc9 	bl	b9bb8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9c26:	4606      	mov	r6, r0
   b9c28:	2800      	cmp	r0, #0
   b9c2a:	d1e7      	bne.n	b9bfc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b9c2c:	a801      	add	r0, sp, #4
   b9c2e:	f7ff fc2c 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9c32:	4630      	mov	r0, r6
   b9c34:	b002      	add	sp, #8
   b9c36:	bd70      	pop	{r4, r5, r6, pc}
   b9c38:	4669      	mov	r1, sp
   b9c3a:	4628      	mov	r0, r5
   b9c3c:	f7ff fc11 	bl	b9462 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9c40:	e7e8      	b.n	b9c14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9c42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9c42:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9c46:	4604      	mov	r4, r0
   b9c48:	460d      	mov	r5, r1
   b9c4a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9c4c:	d914      	bls.n	b9c78 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9c4e:	4290      	cmp	r0, r2
   b9c50:	d213      	bcs.n	b9c7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9c52:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b9c56:	1a75      	subs	r5, r6, r1
   b9c58:	f1a1 0708 	sub.w	r7, r1, #8
   b9c5c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9c5e:	42b7      	cmp	r7, r6
   b9c60:	d018      	beq.n	b9c94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9c62:	b11c      	cbz	r4, b9c6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b9c64:	4631      	mov	r1, r6
   b9c66:	4620      	mov	r0, r4
   b9c68:	f7ff fbed 	bl	b9446 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9c6c:	1d30      	adds	r0, r6, #4
   b9c6e:	f7ff fc0c 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b9c72:	3e08      	subs	r6, #8
   b9c74:	3c08      	subs	r4, #8
   b9c76:	e7f2      	b.n	b9c5e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b9c78:	d00c      	beq.n	b9c94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b9c7a:	42b5      	cmp	r5, r6
   b9c7c:	d00a      	beq.n	b9c94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9c7e:	b11c      	cbz	r4, b9c88 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9c80:	4629      	mov	r1, r5
   b9c82:	4620      	mov	r0, r4
   b9c84:	f7ff fbdf 	bl	b9446 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9c88:	1d28      	adds	r0, r5, #4
   b9c8a:	f7ff fbfe 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9c8e:	3508      	adds	r5, #8
   b9c90:	3408      	adds	r4, #8
   b9c92:	e7f2      	b.n	b9c7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b9c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9c96 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b9c96:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b9c98:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9c9a:	4605      	mov	r5, r0
        if (n > 0) {
   b9c9c:	dd11      	ble.n	b9cc2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9c9e:	00f0      	lsls	r0, r6, #3
   b9ca0:	f7fe ff4e 	bl	b8b40 <malloc>
            if (!d) {
   b9ca4:	4604      	mov	r4, r0
   b9ca6:	b158      	cbz	r0, b9cc0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b9ca8:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9cac:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9cb0:	f7ff ffc7 	bl	b9c42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9cb4:	6828      	ldr	r0, [r5, #0]
   b9cb6:	f7fe ff4b 	bl	b8b50 <free>
        data_ = d;
   b9cba:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9cbc:	60ae      	str	r6, [r5, #8]
        return true;
   b9cbe:	2001      	movs	r0, #1
    }
   b9cc0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9cc2:	2400      	movs	r4, #0
   b9cc4:	e7f6      	b.n	b9cb4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b9cc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9cc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9cc8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b9cca:	6845      	ldr	r5, [r0, #4]
   b9ccc:	4668      	mov	r0, sp
   b9cce:	f7ff fbba 	bl	b9446 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9cd2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b9cd6:	4299      	cmp	r1, r3
   b9cd8:	da10      	bge.n	b9cfc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b9cda:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9cdc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9cde:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b9ce2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b9ce6:	4629      	mov	r1, r5
   b9ce8:	f105 0008 	add.w	r0, r5, #8
   b9cec:	f7ff ffa9 	bl	b9c42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9cf0:	b98d      	cbnz	r5, b9d16 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b9cf2:	6863      	ldr	r3, [r4, #4]
   b9cf4:	3301      	adds	r3, #1
   b9cf6:	6063      	str	r3, [r4, #4]
    return true;
   b9cf8:	2601      	movs	r6, #1
   b9cfa:	e006      	b.n	b9d0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9cfc:	3101      	adds	r1, #1
   b9cfe:	4620      	mov	r0, r4
   b9d00:	f7ff ffc9 	bl	b9c96 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9d04:	4606      	mov	r6, r0
   b9d06:	2800      	cmp	r0, #0
   b9d08:	d1e7      	bne.n	b9cda <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b9d0a:	a801      	add	r0, sp, #4
   b9d0c:	f7ff fbbd 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9d10:	4630      	mov	r0, r6
   b9d12:	b002      	add	sp, #8
   b9d14:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b9d16:	4669      	mov	r1, sp
   b9d18:	4628      	mov	r0, r5
   b9d1a:	f7ff fb94 	bl	b9446 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9d1e:	e7e8      	b.n	b9cf2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9d20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9d24:	4617      	mov	r7, r2
   b9d26:	b0a1      	sub	sp, #132	; 0x84
   b9d28:	4680      	mov	r8, r0
    WiringBleLock lk;
   b9d2a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9d2c:	460e      	mov	r6, r1
    WiringBleLock lk;
   b9d2e:	f7ff f837 	bl	b8da0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b9d32:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b9d34:	7923      	ldrb	r3, [r4, #4]
   b9d36:	b953      	cbnz	r3, b9d4e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b9d38:	4639      	mov	r1, r7
   b9d3a:	4640      	mov	r0, r8
   b9d3c:	f7ff fb83 	bl	b9446 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b9d40:	a80a      	add	r0, sp, #40	; 0x28
   b9d42:	f7ff f83b 	bl	b8dbc <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b9d46:	4640      	mov	r0, r8
   b9d48:	b021      	add	sp, #132	; 0x84
   b9d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b9d4e:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b9d50:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b9d54:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b9d58:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b9d5a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b9d5e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b9d62:	9b03      	ldr	r3, [sp, #12]
   b9d64:	429d      	cmp	r5, r3
   b9d66:	d021      	beq.n	b9dac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b9d68:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b9d6c:	4658      	mov	r0, fp
   b9d6e:	f109 0114 	add.w	r1, r9, #20
   b9d72:	f7ff f8c2 	bl	b8efa <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b9d76:	b1b8      	cbz	r0, b9da8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b9d78:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b9d7c:	4650      	mov	r0, sl
   b9d7e:	f7ff f8bc 	bl	b8efa <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b9d82:	b188      	cbz	r0, b9da8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b9d84:	6823      	ldr	r3, [r4, #0]
   b9d86:	f8d9 2000 	ldr.w	r2, [r9]
   b9d8a:	4053      	eors	r3, r2
   b9d8c:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b9d90:	d10a      	bne.n	b9da8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b9d92:	2220      	movs	r2, #32
   b9d94:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b9d98:	4a5e      	ldr	r2, [pc, #376]	; (b9f14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b9d9a:	9200      	str	r2, [sp, #0]
   b9d9c:	aa15      	add	r2, sp, #84	; 0x54
   b9d9e:	495e      	ldr	r1, [pc, #376]	; (b9f18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b9da0:	2032      	movs	r0, #50	; 0x32
   b9da2:	f7fe fe29 	bl	b89f8 <log_message>
   b9da6:	e7c7      	b.n	b9d38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b9da8:	3508      	adds	r5, #8
   b9daa:	e7da      	b.n	b9d62 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b9dac:	4650      	mov	r0, sl
   b9dae:	f7ff f875 	bl	b8e9c <_ZNK8particle7BleUuid7isValidEv>
   b9db2:	b960      	cbnz	r0, b9dce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b9db4:	4959      	ldr	r1, [pc, #356]	; (b9f1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b9db6:	2201      	movs	r2, #1
   b9db8:	a815      	add	r0, sp, #84	; 0x54
   b9dba:	ad15      	add	r5, sp, #84	; 0x54
   b9dbc:	f7ff f846 	bl	b8e4c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b9dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9dc2:	46d4      	mov	ip, sl
   b9dc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b9dc8:	682b      	ldr	r3, [r5, #0]
   b9dca:	f8cc 3000 	str.w	r3, [ip]
   b9dce:	6833      	ldr	r3, [r6, #0]
   b9dd0:	e9d3 5300 	ldrd	r5, r3, [r3]
   b9dd4:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b9dd8:	455d      	cmp	r5, fp
   b9dda:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b9ddc:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b9dde:	d06e      	beq.n	b9ebe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b9de0:	f855 0b08 	ldr.w	r0, [r5], #8
   b9de4:	f7ff f889 	bl	b8efa <_ZNK8particle7BleUuideqERKS0_>
   b9de8:	2800      	cmp	r0, #0
   b9dea:	d0f5      	beq.n	b9dd8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b9dec:	f104 0a14 	add.w	sl, r4, #20
   b9df0:	4650      	mov	r0, sl
   b9df2:	f7ff f853 	bl	b8e9c <_ZNK8particle7BleUuid7isValidEv>
   b9df6:	b988      	cbnz	r0, b9e1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b9df8:	4b49      	ldr	r3, [pc, #292]	; (b9f20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9dfa:	4948      	ldr	r1, [pc, #288]	; (b9f1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b9dfc:	881a      	ldrh	r2, [r3, #0]
   b9dfe:	3201      	adds	r2, #1
   b9e00:	b292      	uxth	r2, r2
   b9e02:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9e04:	a815      	add	r0, sp, #84	; 0x54
   b9e06:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b9e08:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9e0a:	f7ff f83e 	bl	b8e8a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b9e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9e10:	46d4      	mov	ip, sl
   b9e12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b9e16:	682b      	ldr	r3, [r5, #0]
   b9e18:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b9e1c:	4b41      	ldr	r3, [pc, #260]	; (b9f24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b9e1e:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b9e20:	2228      	movs	r2, #40	; 0x28
   b9e22:	2100      	movs	r1, #0
   b9e24:	a816      	add	r0, sp, #88	; 0x58
   b9e26:	f002 fa19 	bl	bc25c <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b9e2a:	4651      	mov	r1, sl
   b9e2c:	a804      	add	r0, sp, #16
   b9e2e:	f7ff f847 	bl	b8ec0 <_ZN8particle7BleUuid7halUUIDEv>
   b9e32:	ab04      	add	r3, sp, #16
   b9e34:	aa18      	add	r2, sp, #96	; 0x60
   b9e36:	f10d 0c20 	add.w	ip, sp, #32
   b9e3a:	6818      	ldr	r0, [r3, #0]
   b9e3c:	6859      	ldr	r1, [r3, #4]
   b9e3e:	4615      	mov	r5, r2
   b9e40:	c503      	stmia	r5!, {r0, r1}
   b9e42:	3308      	adds	r3, #8
   b9e44:	4563      	cmp	r3, ip
   b9e46:	462a      	mov	r2, r5
   b9e48:	d1f7      	bne.n	b9e3a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b9e4a:	6818      	ldr	r0, [r3, #0]
   b9e4c:	6028      	str	r0, [r5, #0]
    return value_;
   b9e4e:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b9e50:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b9e54:	f8d9 3000 	ldr.w	r3, [r9]
   b9e58:	8a9b      	ldrh	r3, [r3, #20]
   b9e5a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b9e5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b9e60:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b9e62:	4b31      	ldr	r3, [pc, #196]	; (b9f28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b9e64:	2200      	movs	r2, #0
   b9e66:	1da1      	adds	r1, r4, #6
   b9e68:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b9e6a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b9e6e:	f7fe fc43 	bl	b86f8 <hal_ble_gatt_server_add_characteristic>
   b9e72:	2800      	cmp	r0, #0
   b9e74:	f47f af60 	bne.w	b9d38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b9e78:	2301      	movs	r3, #1
   b9e7a:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b9e7c:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b9e7e:	4639      	mov	r1, r7
        return characteristics_;
   b9e80:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b9e82:	a80d      	add	r0, sp, #52	; 0x34
   b9e84:	f7ff fadf 	bl	b9446 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9e88:	4620      	mov	r0, r4
   b9e8a:	a90d      	add	r1, sp, #52	; 0x34
   b9e8c:	f7ff ff1b 	bl	b9cc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b9e90:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b9e92:	a80e      	add	r0, sp, #56	; 0x38
   b9e94:	f7ff faf9 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9e98:	2c00      	cmp	r4, #0
   b9e9a:	f47f af4d 	bne.w	b9d38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b9e9e:	2320      	movs	r3, #32
   b9ea0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b9ea4:	4b21      	ldr	r3, [pc, #132]	; (b9f2c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b9ea6:	9300      	str	r3, [sp, #0]
   b9ea8:	aa0d      	add	r2, sp, #52	; 0x34
   b9eaa:	4623      	mov	r3, r4
   b9eac:	e777      	b.n	b9d9e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b9eae:	4639      	mov	r1, r7
   b9eb0:	4640      	mov	r0, r8
   b9eb2:	f7ff fac8 	bl	b9446 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9eb6:	a80c      	add	r0, sp, #48	; 0x30
   b9eb8:	f7ff fae7 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9ebc:	e740      	b.n	b9d40 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b9ebe:	a80b      	add	r0, sp, #44	; 0x2c
   b9ec0:	f7ff f94a 	bl	b9158 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b9ec4:	4651      	mov	r1, sl
   b9ec6:	a815      	add	r0, sp, #84	; 0x54
   b9ec8:	f7fe fffa 	bl	b8ec0 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b9ecc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9ece:	2300      	movs	r3, #0
   b9ed0:	3214      	adds	r2, #20
   b9ed2:	a915      	add	r1, sp, #84	; 0x54
   b9ed4:	2001      	movs	r0, #1
   b9ed6:	f7fe fbe7 	bl	b86a8 <hal_ble_gatt_server_add_service>
   b9eda:	2800      	cmp	r0, #0
   b9edc:	d1e7      	bne.n	b9eae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b9ede:	6835      	ldr	r5, [r6, #0]
   b9ee0:	a90b      	add	r1, sp, #44	; 0x2c
   b9ee2:	a80d      	add	r0, sp, #52	; 0x34
   b9ee4:	f7ff fabd 	bl	b9462 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b9ee8:	4628      	mov	r0, r5
   b9eea:	a90d      	add	r1, sp, #52	; 0x34
   b9eec:	f7ff fe7c 	bl	b9be8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b9ef0:	4605      	mov	r5, r0
   b9ef2:	a80e      	add	r0, sp, #56	; 0x38
   b9ef4:	f7ff fac9 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9ef8:	2d00      	cmp	r5, #0
   b9efa:	d0d8      	beq.n	b9eae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b9efc:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b9efe:	6853      	ldr	r3, [r2, #4]
   b9f00:	6812      	ldr	r2, [r2, #0]
   b9f02:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b9f06:	3b01      	subs	r3, #1
   b9f08:	a80c      	add	r0, sp, #48	; 0x30
   b9f0a:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b9f0e:	f7ff fabc 	bl	b948a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9f12:	e76b      	b.n	b9dec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b9f14:	000be9ee 	.word	0x000be9ee
   b9f18:	000be90b 	.word	0x000be90b
   b9f1c:	000beab2 	.word	0x000beab2
   b9f20:	2003e6bc 	.word	0x2003e6bc
   b9f24:	002c0003 	.word	0x002c0003
   b9f28:	000b92f1 	.word	0x000b92f1
   b9f2c:	000bea19 	.word	0x000bea19

000b9f30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b9f30:	4802      	ldr	r0, [pc, #8]	; (b9f3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b9f32:	2300      	movs	r3, #0
   b9f34:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b9f36:	f7fe bc07 	b.w	b8748 <os_mutex_recursive_create>
   b9f3a:	bf00      	nop
   b9f3c:	2003e6c0 	.word	0x2003e6c0

000b9f40 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9f40:	2200      	movs	r2, #0
   b9f42:	6840      	ldr	r0, [r0, #4]
   b9f44:	4611      	mov	r1, r2
   b9f46:	f7fe bdc3 	b.w	b8ad0 <network_listening>

000b9f4a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9f4a:	2200      	movs	r2, #0
   b9f4c:	6840      	ldr	r0, [r0, #4]
   b9f4e:	4611      	mov	r1, r2
   b9f50:	f7fe bdde 	b.w	b8b10 <network_get_listen_timeout>

000b9f54 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9f54:	6840      	ldr	r0, [r0, #4]
   b9f56:	2200      	movs	r2, #0
   b9f58:	f7fe bdd2 	b.w	b8b00 <network_set_listen_timeout>

000b9f5c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9f5c:	6840      	ldr	r0, [r0, #4]
   b9f5e:	2200      	movs	r2, #0
   b9f60:	f081 0101 	eor.w	r1, r1, #1
   b9f64:	f7fe bdac 	b.w	b8ac0 <network_listen>

000b9f68 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9f68:	2300      	movs	r3, #0
   b9f6a:	6840      	ldr	r0, [r0, #4]
   b9f6c:	461a      	mov	r2, r3
   b9f6e:	4619      	mov	r1, r3
   b9f70:	f7fe bd9e 	b.w	b8ab0 <network_off>

000b9f74 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9f74:	2300      	movs	r3, #0
   b9f76:	6840      	ldr	r0, [r0, #4]
   b9f78:	461a      	mov	r2, r3
   b9f7a:	4619      	mov	r1, r3
   b9f7c:	f7fe bd90 	b.w	b8aa0 <network_on>

000b9f80 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b9f80:	2200      	movs	r2, #0
   b9f82:	6840      	ldr	r0, [r0, #4]
   b9f84:	4611      	mov	r1, r2
   b9f86:	f7fe bd83 	b.w	b8a90 <network_ready>

000b9f8a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9f8a:	2200      	movs	r2, #0
   b9f8c:	6840      	ldr	r0, [r0, #4]
   b9f8e:	4611      	mov	r1, r2
   b9f90:	f7fe bd6e 	b.w	b8a70 <network_connecting>

000b9f94 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9f94:	6840      	ldr	r0, [r0, #4]
   b9f96:	2200      	movs	r2, #0
   b9f98:	2102      	movs	r1, #2
   b9f9a:	f7fe bd71 	b.w	b8a80 <network_disconnect>

000b9f9e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9f9e:	2300      	movs	r3, #0
   b9fa0:	6840      	ldr	r0, [r0, #4]
   b9fa2:	461a      	mov	r2, r3
   b9fa4:	f7fe bd5c 	b.w	b8a60 <network_connect>

000b9fa8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b9fa8:	4b02      	ldr	r3, [pc, #8]	; (b9fb4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b9faa:	2203      	movs	r2, #3
   b9fac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b9fae:	4a02      	ldr	r2, [pc, #8]	; (b9fb8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b9fb0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b9fb2:	4770      	bx	lr
   b9fb4:	2003e6c8 	.word	0x2003e6c8
   b9fb8:	000beadc 	.word	0x000beadc

000b9fbc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9fbc:	4770      	bx	lr

000b9fbe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9fc0:	4606      	mov	r6, r0
   b9fc2:	4615      	mov	r5, r2
   b9fc4:	460c      	mov	r4, r1
   b9fc6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b9fc8:	42bc      	cmp	r4, r7
   b9fca:	d006      	beq.n	b9fda <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9fcc:	6833      	ldr	r3, [r6, #0]
   b9fce:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9fd2:	689b      	ldr	r3, [r3, #8]
   b9fd4:	4630      	mov	r0, r6
   b9fd6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b9fd8:	e7f6      	b.n	b9fc8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b9fda:	4628      	mov	r0, r5
   b9fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9fde <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b9fde:	7c00      	ldrb	r0, [r0, #16]
   b9fe0:	2200      	movs	r2, #0
   b9fe2:	f7fe bbf9 	b.w	b87d8 <hal_i2c_write>

000b9fe6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b9fe6:	7c00      	ldrb	r0, [r0, #16]
   b9fe8:	2100      	movs	r1, #0
   b9fea:	f7fe bbfd 	b.w	b87e8 <hal_i2c_available>

000b9fee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b9fee:	7c00      	ldrb	r0, [r0, #16]
   b9ff0:	2100      	movs	r1, #0
   b9ff2:	f7fe bc01 	b.w	b87f8 <hal_i2c_read>

000b9ff6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b9ff6:	7c00      	ldrb	r0, [r0, #16]
   b9ff8:	2100      	movs	r1, #0
   b9ffa:	f7fe bc05 	b.w	b8808 <hal_i2c_peek>

000b9ffe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b9ffe:	7c00      	ldrb	r0, [r0, #16]
   ba000:	2100      	movs	r1, #0
   ba002:	f7fe bc09 	b.w	b8818 <hal_i2c_flush>

000ba006 <_ZN7TwoWireD0Ev>:
   ba006:	b510      	push	{r4, lr}
   ba008:	2114      	movs	r1, #20
   ba00a:	4604      	mov	r4, r0
   ba00c:	f7fa f849 	bl	b40a2 <_ZdlPvj>
   ba010:	4620      	mov	r0, r4
   ba012:	bd10      	pop	{r4, pc}

000ba014 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   ba014:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   ba016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba01a:	4604      	mov	r4, r0
   ba01c:	4608      	mov	r0, r1
   ba01e:	2100      	movs	r1, #0
   ba020:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba024:	4b03      	ldr	r3, [pc, #12]	; (ba034 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   ba026:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   ba028:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   ba02a:	4611      	mov	r1, r2
   ba02c:	f7fe fbfc 	bl	b8828 <hal_i2c_init>
}
   ba030:	4620      	mov	r0, r4
   ba032:	bd10      	pop	{r4, pc}
   ba034:	000beb18 	.word	0x000beb18

000ba038 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   ba038:	2300      	movs	r3, #0
   ba03a:	7c00      	ldrb	r0, [r0, #16]
   ba03c:	461a      	mov	r2, r3
   ba03e:	4619      	mov	r1, r3
   ba040:	f7fe bbb2 	b.w	b87a8 <hal_i2c_begin>

000ba044 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   ba044:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   ba046:	2200      	movs	r2, #0
   ba048:	2314      	movs	r3, #20
   ba04a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   ba04e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   ba052:	780b      	ldrb	r3, [r1, #0]
   ba054:	f88d 3008 	strb.w	r3, [sp, #8]
   ba058:	684b      	ldr	r3, [r1, #4]
   ba05a:	9303      	str	r3, [sp, #12]
   ba05c:	68cb      	ldr	r3, [r1, #12]
   ba05e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   ba060:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   ba062:	7a0b      	ldrb	r3, [r1, #8]
   ba064:	9305      	str	r3, [sp, #20]
   ba066:	a901      	add	r1, sp, #4
   ba068:	f7fe fbe6 	bl	b8838 <hal_i2c_request_ex>
}
   ba06c:	b007      	add	sp, #28
   ba06e:	f85d fb04 	ldr.w	pc, [sp], #4

000ba072 <_ZN7TwoWire11requestFromEhjh>:
{
   ba072:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   ba074:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ba076:	f88d 1000 	strb.w	r1, [sp]
   ba07a:	f04f 0164 	mov.w	r1, #100	; 0x64
   ba07e:	9103      	str	r1, [sp, #12]
   ba080:	bf18      	it	ne
   ba082:	2301      	movne	r3, #1
   ba084:	4669      	mov	r1, sp
    size_ = size;
   ba086:	9201      	str	r2, [sp, #4]
   ba088:	f88d 3008 	strb.w	r3, [sp, #8]
   ba08c:	f7ff ffda 	bl	ba044 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   ba090:	b005      	add	sp, #20
   ba092:	f85d fb04 	ldr.w	pc, [sp], #4

000ba096 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   ba096:	2301      	movs	r3, #1
   ba098:	f7ff bfeb 	b.w	ba072 <_ZN7TwoWire11requestFromEhjh>

000ba09c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   ba09c:	7c00      	ldrb	r0, [r0, #16]
   ba09e:	2200      	movs	r2, #0
   ba0a0:	f7fe bb8a 	b.w	b87b8 <hal_i2c_begin_transmission>

000ba0a4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   ba0a4:	b2c9      	uxtb	r1, r1
   ba0a6:	f7ff bff9 	b.w	ba09c <_ZN7TwoWire17beginTransmissionEh>

000ba0aa <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   ba0aa:	7c00      	ldrb	r0, [r0, #16]
   ba0ac:	2200      	movs	r2, #0
   ba0ae:	f7fe bb8b 	b.w	b87c8 <hal_i2c_end_transmission>

000ba0b2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   ba0b2:	2101      	movs	r1, #1
   ba0b4:	f7ff bff9 	b.w	ba0aa <_ZN7TwoWire15endTransmissionEh>

000ba0b8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   ba0b8:	4770      	bx	lr

000ba0ba <_ZN9IPAddressD0Ev>:
   ba0ba:	b510      	push	{r4, lr}
   ba0bc:	2118      	movs	r1, #24
   ba0be:	4604      	mov	r4, r0
   ba0c0:	f7f9 ffef 	bl	b40a2 <_ZdlPvj>
   ba0c4:	4620      	mov	r0, r4
   ba0c6:	bd10      	pop	{r4, pc}

000ba0c8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   ba0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   ba0ca:	7d03      	ldrb	r3, [r0, #20]
   ba0cc:	2b06      	cmp	r3, #6
{
   ba0ce:	b08d      	sub	sp, #52	; 0x34
   ba0d0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba0d2:	f100 0704 	add.w	r7, r0, #4
   ba0d6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   ba0da:	d012      	beq.n	ba102 <_ZNK9IPAddress7printToER5Print+0x3a>
   ba0dc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   ba0e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   ba0e4:	220a      	movs	r2, #10
   ba0e6:	4630      	mov	r0, r6
   ba0e8:	f000 f973 	bl	ba3d2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   ba0ec:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   ba0ee:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   ba0f0:	d019      	beq.n	ba126 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   ba0f2:	2c00      	cmp	r4, #0
   ba0f4:	d0f4      	beq.n	ba0e0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   ba0f6:	212e      	movs	r1, #46	; 0x2e
   ba0f8:	4630      	mov	r0, r6
   ba0fa:	f000 f951 	bl	ba3a0 <_ZN5Print5printEc>
   ba0fe:	4404      	add	r4, r0
   ba100:	e7ee      	b.n	ba0e0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba102:	232f      	movs	r3, #47	; 0x2f
   ba104:	466a      	mov	r2, sp
   ba106:	4639      	mov	r1, r7
   ba108:	200a      	movs	r0, #10
		buf[0] = 0;
   ba10a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba10e:	f7fe fba3 	bl	b8858 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   ba112:	4668      	mov	r0, sp
   ba114:	f002 f8ea 	bl	bc2ec <strlen>
   ba118:	6833      	ldr	r3, [r6, #0]
   ba11a:	4602      	mov	r2, r0
   ba11c:	68db      	ldr	r3, [r3, #12]
   ba11e:	4669      	mov	r1, sp
   ba120:	4630      	mov	r0, r6
   ba122:	4798      	blx	r3
   ba124:	4604      	mov	r4, r0
    }
    return n;
}
   ba126:	4620      	mov	r0, r4
   ba128:	b00d      	add	sp, #52	; 0x34
   ba12a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba12c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   ba12c:	b510      	push	{r4, lr}
   ba12e:	4b05      	ldr	r3, [pc, #20]	; (ba144 <_ZN9IPAddressC1Ev+0x18>)
   ba130:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   ba132:	2211      	movs	r2, #17
   ba134:	f840 3b04 	str.w	r3, [r0], #4
   ba138:	2100      	movs	r1, #0
   ba13a:	f002 f88f 	bl	bc25c <memset>
}
   ba13e:	4620      	mov	r0, r4
   ba140:	bd10      	pop	{r4, pc}
   ba142:	bf00      	nop
   ba144:	000beb40 	.word	0x000beb40

000ba148 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   ba148:	4603      	mov	r3, r0
   ba14a:	4a07      	ldr	r2, [pc, #28]	; (ba168 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   ba14c:	b510      	push	{r4, lr}
   ba14e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   ba152:	f101 0210 	add.w	r2, r1, #16
   ba156:	f851 4b04 	ldr.w	r4, [r1], #4
   ba15a:	f843 4b04 	str.w	r4, [r3], #4
   ba15e:	4291      	cmp	r1, r2
   ba160:	d1f9      	bne.n	ba156 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   ba162:	780a      	ldrb	r2, [r1, #0]
   ba164:	701a      	strb	r2, [r3, #0]
}
   ba166:	bd10      	pop	{r4, pc}
   ba168:	000beb40 	.word	0x000beb40

000ba16c <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   ba16c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   ba16e:	2b04      	cmp	r3, #4
   ba170:	d104      	bne.n	ba17c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   ba172:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   ba174:	3800      	subs	r0, #0
   ba176:	bf18      	it	ne
   ba178:	2001      	movne	r0, #1
   ba17a:	4770      	bx	lr
    } else if (version() == 6) {
   ba17c:	2b06      	cmp	r3, #6
   ba17e:	d107      	bne.n	ba190 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   ba180:	6843      	ldr	r3, [r0, #4]
   ba182:	b93b      	cbnz	r3, ba194 <_ZNK9IPAddresscvbEv+0x28>
   ba184:	6883      	ldr	r3, [r0, #8]
   ba186:	b92b      	cbnz	r3, ba194 <_ZNK9IPAddresscvbEv+0x28>
   ba188:	68c3      	ldr	r3, [r0, #12]
   ba18a:	b91b      	cbnz	r3, ba194 <_ZNK9IPAddresscvbEv+0x28>
   ba18c:	6900      	ldr	r0, [r0, #16]
   ba18e:	e7f1      	b.n	ba174 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   ba190:	2000      	movs	r0, #0
   ba192:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   ba194:	2001      	movs	r0, #1
}
   ba196:	4770      	bx	lr

000ba198 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   ba198:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   ba19a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   ba19e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   ba1a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   ba1a6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   ba1aa:	2304      	movs	r3, #4
   ba1ac:	6041      	str	r1, [r0, #4]
   ba1ae:	7503      	strb	r3, [r0, #20]
}
   ba1b0:	bd10      	pop	{r4, pc}
	...

000ba1b4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   ba1b4:	b507      	push	{r0, r1, r2, lr}
   ba1b6:	4b06      	ldr	r3, [pc, #24]	; (ba1d0 <_ZN9IPAddressC1EPKh+0x1c>)
   ba1b8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   ba1ba:	78cb      	ldrb	r3, [r1, #3]
   ba1bc:	9300      	str	r3, [sp, #0]
   ba1be:	788b      	ldrb	r3, [r1, #2]
   ba1c0:	784a      	ldrb	r2, [r1, #1]
   ba1c2:	7809      	ldrb	r1, [r1, #0]
   ba1c4:	f7ff ffe8 	bl	ba198 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   ba1c8:	b003      	add	sp, #12
   ba1ca:	f85d fb04 	ldr.w	pc, [sp], #4
   ba1ce:	bf00      	nop
   ba1d0:	000beb40 	.word	0x000beb40

000ba1d4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   ba1d4:	4b01      	ldr	r3, [pc, #4]	; (ba1dc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   ba1d6:	4a02      	ldr	r2, [pc, #8]	; (ba1e0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   ba1d8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   ba1da:	4770      	bx	lr
   ba1dc:	2003e6d0 	.word	0x2003e6d0
   ba1e0:	000beb4c 	.word	0x000beb4c

000ba1e4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   ba1e4:	2300      	movs	r3, #0
   ba1e6:	6840      	ldr	r0, [r0, #4]
   ba1e8:	461a      	mov	r2, r3
   ba1ea:	f7fe bc39 	b.w	b8a60 <network_connect>

000ba1ee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   ba1ee:	6840      	ldr	r0, [r0, #4]
   ba1f0:	2200      	movs	r2, #0
   ba1f2:	2102      	movs	r1, #2
   ba1f4:	f7fe bc44 	b.w	b8a80 <network_disconnect>

000ba1f8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   ba1f8:	2200      	movs	r2, #0
   ba1fa:	6840      	ldr	r0, [r0, #4]
   ba1fc:	4611      	mov	r1, r2
   ba1fe:	f7fe bc37 	b.w	b8a70 <network_connecting>

000ba202 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   ba202:	2200      	movs	r2, #0
   ba204:	6840      	ldr	r0, [r0, #4]
   ba206:	4611      	mov	r1, r2
   ba208:	f7fe bc42 	b.w	b8a90 <network_ready>

000ba20c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   ba20c:	2300      	movs	r3, #0
   ba20e:	6840      	ldr	r0, [r0, #4]
   ba210:	461a      	mov	r2, r3
   ba212:	4619      	mov	r1, r3
   ba214:	f7fe bc44 	b.w	b8aa0 <network_on>

000ba218 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   ba218:	2300      	movs	r3, #0
   ba21a:	6840      	ldr	r0, [r0, #4]
   ba21c:	461a      	mov	r2, r3
   ba21e:	4619      	mov	r1, r3
   ba220:	f7fe bc46 	b.w	b8ab0 <network_off>

000ba224 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   ba224:	6840      	ldr	r0, [r0, #4]
   ba226:	2100      	movs	r1, #0
   ba228:	f7fe bc7a 	b.w	b8b20 <network_is_on>

000ba22c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   ba22c:	6840      	ldr	r0, [r0, #4]
   ba22e:	2100      	movs	r1, #0
   ba230:	f7fe bc7e 	b.w	b8b30 <network_is_off>

000ba234 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   ba234:	6840      	ldr	r0, [r0, #4]
   ba236:	2200      	movs	r2, #0
   ba238:	f081 0101 	eor.w	r1, r1, #1
   ba23c:	f7fe bc40 	b.w	b8ac0 <network_listen>

000ba240 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   ba240:	6840      	ldr	r0, [r0, #4]
   ba242:	2200      	movs	r2, #0
   ba244:	f7fe bc5c 	b.w	b8b00 <network_set_listen_timeout>

000ba248 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   ba248:	2200      	movs	r2, #0
   ba24a:	6840      	ldr	r0, [r0, #4]
   ba24c:	4611      	mov	r1, r2
   ba24e:	f7fe bc5f 	b.w	b8b10 <network_get_listen_timeout>

000ba252 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   ba252:	2200      	movs	r2, #0
   ba254:	6840      	ldr	r0, [r0, #4]
   ba256:	4611      	mov	r1, r2
   ba258:	f7fe bc3a 	b.w	b8ad0 <network_listening>

000ba25c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   ba25c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba260:	b095      	sub	sp, #84	; 0x54
   ba262:	4614      	mov	r4, r2
   ba264:	460d      	mov	r5, r1
   ba266:	4607      	mov	r7, r0
    IPAddress addr;
   ba268:	f7ff ff60 	bl	ba12c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ba26c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   ba26e:	221c      	movs	r2, #28
   ba270:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   ba272:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   ba274:	f001 fff2 	bl	bc25c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   ba278:	2340      	movs	r3, #64	; 0x40
   ba27a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   ba27c:	4620      	mov	r0, r4
   ba27e:	466b      	mov	r3, sp
   ba280:	aa0c      	add	r2, sp, #48	; 0x30
   ba282:	2100      	movs	r1, #0
   ba284:	f7fe fb08 	bl	b8898 <netdb_getaddrinfo>
    if (!r) {
   ba288:	4604      	mov	r4, r0
   ba28a:	2800      	cmp	r0, #0
   ba28c:	d14b      	bne.n	ba326 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba28e:	4602      	mov	r2, r0
   ba290:	2101      	movs	r1, #1
   ba292:	6868      	ldr	r0, [r5, #4]
   ba294:	f7fe fbfc 	bl	b8a90 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba298:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba29a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba29c:	4622      	mov	r2, r4
   ba29e:	6868      	ldr	r0, [r5, #4]
   ba2a0:	f7fe fbf6 	bl	b8a90 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba2a4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba2a6:	4681      	mov	r9, r0
        bool ok = false;
   ba2a8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba2aa:	2e00      	cmp	r6, #0
   ba2ac:	d03b      	beq.n	ba326 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   ba2ae:	2900      	cmp	r1, #0
   ba2b0:	d139      	bne.n	ba326 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ba2b2:	6873      	ldr	r3, [r6, #4]
   ba2b4:	2b02      	cmp	r3, #2
   ba2b6:	d003      	beq.n	ba2c0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ba2b8:	2b0a      	cmp	r3, #10
   ba2ba:	d011      	beq.n	ba2e0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba2bc:	69f6      	ldr	r6, [r6, #28]
   ba2be:	e7f4      	b.n	ba2aa <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   ba2c0:	f1b8 0f00 	cmp.w	r8, #0
   ba2c4:	d0fa      	beq.n	ba2bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   ba2c6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   ba2c8:	a806      	add	r0, sp, #24
   ba2ca:	3104      	adds	r1, #4
class IPAddress : public Printable {
   ba2cc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   ba2ce:	f7ff ff71 	bl	ba1b4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba2d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba2d4:	1d3c      	adds	r4, r7, #4
   ba2d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba2d8:	682b      	ldr	r3, [r5, #0]
   ba2da:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba2dc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   ba2de:	e7ed      	b.n	ba2bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   ba2e0:	f1b9 0f00 	cmp.w	r9, #0
   ba2e4:	d0ea      	beq.n	ba2bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   ba2e6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   ba2e8:	2210      	movs	r2, #16
   ba2ea:	a801      	add	r0, sp, #4
   ba2ec:	f001 ffb6 	bl	bc25c <memset>
                    a.v = 6;
   ba2f0:	2306      	movs	r3, #6
   ba2f2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba2f6:	ad01      	add	r5, sp, #4
   ba2f8:	f104 0308 	add.w	r3, r4, #8
   ba2fc:	3418      	adds	r4, #24
   ba2fe:	6818      	ldr	r0, [r3, #0]
   ba300:	6859      	ldr	r1, [r3, #4]
   ba302:	462a      	mov	r2, r5
   ba304:	c203      	stmia	r2!, {r0, r1}
   ba306:	3308      	adds	r3, #8
   ba308:	42a3      	cmp	r3, r4
   ba30a:	4615      	mov	r5, r2
   ba30c:	d1f7      	bne.n	ba2fe <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   ba30e:	a901      	add	r1, sp, #4
   ba310:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   ba312:	ad07      	add	r5, sp, #28
   ba314:	f7ff ff18 	bl	ba148 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba31a:	1d3c      	adds	r4, r7, #4
   ba31c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba31e:	682b      	ldr	r3, [r5, #0]
   ba320:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba322:	4649      	mov	r1, r9
   ba324:	e7ca      	b.n	ba2bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   ba326:	9800      	ldr	r0, [sp, #0]
   ba328:	f7fe faae 	bl	b8888 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   ba32c:	4638      	mov	r0, r7
   ba32e:	b015      	add	sp, #84	; 0x54
   ba330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ba334 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   ba334:	4b02      	ldr	r3, [pc, #8]	; (ba340 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   ba336:	4a03      	ldr	r2, [pc, #12]	; (ba344 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   ba338:	601a      	str	r2, [r3, #0]
   ba33a:	2200      	movs	r2, #0
   ba33c:	605a      	str	r2, [r3, #4]

} // spark
   ba33e:	4770      	bx	lr
   ba340:	2003e6d4 	.word	0x2003e6d4
   ba344:	000beb58 	.word	0x000beb58

000ba348 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   ba348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba34a:	4606      	mov	r6, r0
   ba34c:	460d      	mov	r5, r1
  size_t n = 0;
   ba34e:	188f      	adds	r7, r1, r2
   ba350:	2400      	movs	r4, #0
  while (size--) {
   ba352:	42bd      	cmp	r5, r7
   ba354:	d00c      	beq.n	ba370 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   ba356:	6833      	ldr	r3, [r6, #0]
   ba358:	f815 1b01 	ldrb.w	r1, [r5], #1
   ba35c:	689b      	ldr	r3, [r3, #8]
   ba35e:	4630      	mov	r0, r6
   ba360:	4798      	blx	r3
     if (chunk>=0)
   ba362:	1e03      	subs	r3, r0, #0
   ba364:	db01      	blt.n	ba36a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   ba366:	441c      	add	r4, r3
  while (size--) {
   ba368:	e7f3      	b.n	ba352 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   ba36a:	2c00      	cmp	r4, #0
   ba36c:	bf08      	it	eq
   ba36e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   ba370:	4620      	mov	r0, r4
   ba372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba374 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   ba374:	b513      	push	{r0, r1, r4, lr}
   ba376:	4604      	mov	r4, r0
    }
   ba378:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   ba37a:	b159      	cbz	r1, ba394 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   ba37c:	9101      	str	r1, [sp, #4]
   ba37e:	f001 ffb5 	bl	bc2ec <strlen>
   ba382:	6823      	ldr	r3, [r4, #0]
   ba384:	9901      	ldr	r1, [sp, #4]
   ba386:	68db      	ldr	r3, [r3, #12]
   ba388:	4602      	mov	r2, r0
   ba38a:	4620      	mov	r0, r4
    }
   ba38c:	b002      	add	sp, #8
   ba38e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   ba392:	4718      	bx	r3
    }
   ba394:	b002      	add	sp, #8
   ba396:	bd10      	pop	{r4, pc}

000ba398 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   ba398:	b508      	push	{r3, lr}
  return write(str);
   ba39a:	f7ff ffeb 	bl	ba374 <_ZN5Print5writeEPKc>
}
   ba39e:	bd08      	pop	{r3, pc}

000ba3a0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   ba3a0:	6803      	ldr	r3, [r0, #0]
   ba3a2:	689b      	ldr	r3, [r3, #8]
   ba3a4:	4718      	bx	r3

000ba3a6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   ba3a6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   ba3a8:	210d      	movs	r1, #13
{
   ba3aa:	4605      	mov	r5, r0
  size_t n = print('\r');
   ba3ac:	f7ff fff8 	bl	ba3a0 <_ZN5Print5printEc>
  n += print('\n');
   ba3b0:	210a      	movs	r1, #10
  size_t n = print('\r');
   ba3b2:	4604      	mov	r4, r0
  n += print('\n');
   ba3b4:	4628      	mov	r0, r5
   ba3b6:	f7ff fff3 	bl	ba3a0 <_ZN5Print5printEc>
  return n;
}
   ba3ba:	4420      	add	r0, r4
   ba3bc:	bd38      	pop	{r3, r4, r5, pc}

000ba3be <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   ba3be:	b538      	push	{r3, r4, r5, lr}
   ba3c0:	4605      	mov	r5, r0
  return write(str);
   ba3c2:	f7ff ffd7 	bl	ba374 <_ZN5Print5writeEPKc>
   ba3c6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   ba3c8:	4628      	mov	r0, r5
   ba3ca:	f7ff ffec 	bl	ba3a6 <_ZN5Print7printlnEv>
  return n;
}
   ba3ce:	4420      	add	r0, r4
   ba3d0:	bd38      	pop	{r3, r4, r5, pc}

000ba3d2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   ba3d2:	b530      	push	{r4, r5, lr}
   ba3d4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   ba3d6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   ba3d8:	2a01      	cmp	r2, #1
  *str = '\0';
   ba3da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   ba3de:	bf98      	it	ls
   ba3e0:	220a      	movls	r2, #10
   ba3e2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   ba3e4:	460d      	mov	r5, r1
   ba3e6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   ba3ea:	fb01 5312 	mls	r3, r1, r2, r5
   ba3ee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba3f2:	2b09      	cmp	r3, #9
   ba3f4:	bf94      	ite	ls
   ba3f6:	3330      	addls	r3, #48	; 0x30
   ba3f8:	3337      	addhi	r3, #55	; 0x37
   ba3fa:	b2db      	uxtb	r3, r3
  } while(n);
   ba3fc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba3fe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   ba402:	d9ef      	bls.n	ba3e4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   ba404:	4621      	mov	r1, r4
   ba406:	f7ff ffb5 	bl	ba374 <_ZN5Print5writeEPKc>
}
   ba40a:	b00b      	add	sp, #44	; 0x2c
   ba40c:	bd30      	pop	{r4, r5, pc}

000ba40e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   ba40e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba412:	b086      	sub	sp, #24
   ba414:	af00      	add	r7, sp, #0
   ba416:	4605      	mov	r5, r0
   ba418:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   ba41a:	1d38      	adds	r0, r7, #4
   ba41c:	2114      	movs	r1, #20
{
   ba41e:	4614      	mov	r4, r2
    va_copy(args2, args);
   ba420:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   ba422:	f7fe fbad 	bl	b8b80 <vsnprintf>

    if (n<bufsize)
   ba426:	2813      	cmp	r0, #19
   ba428:	d80e      	bhi.n	ba448 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   ba42a:	1d39      	adds	r1, r7, #4
   ba42c:	4628      	mov	r0, r5
   ba42e:	f7ff ffa1 	bl	ba374 <_ZN5Print5writeEPKc>
   ba432:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   ba434:	b11e      	cbz	r6, ba43e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   ba436:	4628      	mov	r0, r5
   ba438:	f7ff ffb5 	bl	ba3a6 <_ZN5Print7printlnEv>
   ba43c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   ba43e:	4620      	mov	r0, r4
   ba440:	3718      	adds	r7, #24
   ba442:	46bd      	mov	sp, r7
   ba444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   ba448:	f100 0308 	add.w	r3, r0, #8
   ba44c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   ba450:	46e8      	mov	r8, sp
        char bigger[n+1];
   ba452:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   ba456:	4622      	mov	r2, r4
   ba458:	1c41      	adds	r1, r0, #1
   ba45a:	683b      	ldr	r3, [r7, #0]
   ba45c:	4668      	mov	r0, sp
   ba45e:	f7fe fb8f 	bl	b8b80 <vsnprintf>
  return write(str);
   ba462:	4669      	mov	r1, sp
   ba464:	4628      	mov	r0, r5
   ba466:	f7ff ff85 	bl	ba374 <_ZN5Print5writeEPKc>
   ba46a:	4604      	mov	r4, r0
   ba46c:	46c5      	mov	sp, r8
   ba46e:	e7e1      	b.n	ba434 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000ba470 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   ba470:	4b01      	ldr	r3, [pc, #4]	; (ba478 <_GLOBAL__sub_I_RGB+0x8>)
   ba472:	2200      	movs	r2, #0
   ba474:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   ba476:	4770      	bx	lr
   ba478:	2003e6dc 	.word	0x2003e6dc

000ba47c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   ba47c:	b510      	push	{r4, lr}
   ba47e:	4604      	mov	r4, r0
{
	free(buffer);
   ba480:	6800      	ldr	r0, [r0, #0]
   ba482:	f7fe fb65 	bl	b8b50 <free>
}
   ba486:	4620      	mov	r0, r4
   ba488:	bd10      	pop	{r4, pc}

000ba48a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   ba48a:	b510      	push	{r4, lr}
   ba48c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   ba48e:	6800      	ldr	r0, [r0, #0]
   ba490:	b108      	cbz	r0, ba496 <_ZN6String10invalidateEv+0xc>
   ba492:	f7fe fb5d 	bl	b8b50 <free>
	buffer = NULL;
   ba496:	2300      	movs	r3, #0
	capacity = len = 0;
   ba498:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   ba49c:	6023      	str	r3, [r4, #0]
}
   ba49e:	bd10      	pop	{r4, pc}

000ba4a0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   ba4a0:	b538      	push	{r3, r4, r5, lr}
   ba4a2:	4604      	mov	r4, r0
   ba4a4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   ba4a6:	6800      	ldr	r0, [r0, #0]
   ba4a8:	3101      	adds	r1, #1
   ba4aa:	f7fe fb59 	bl	b8b60 <realloc>
	if (newbuffer) {
   ba4ae:	b110      	cbz	r0, ba4b6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   ba4b0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   ba4b4:	2001      	movs	r0, #1
	}
	return 0;
}
   ba4b6:	bd38      	pop	{r3, r4, r5, pc}

000ba4b8 <_ZN6String7reserveEj>:
{
   ba4b8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   ba4ba:	6803      	ldr	r3, [r0, #0]
{
   ba4bc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   ba4be:	b123      	cbz	r3, ba4ca <_ZN6String7reserveEj+0x12>
   ba4c0:	6843      	ldr	r3, [r0, #4]
   ba4c2:	428b      	cmp	r3, r1
   ba4c4:	d301      	bcc.n	ba4ca <_ZN6String7reserveEj+0x12>
   ba4c6:	2001      	movs	r0, #1
}
   ba4c8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   ba4ca:	4620      	mov	r0, r4
   ba4cc:	f7ff ffe8 	bl	ba4a0 <_ZN6String12changeBufferEj>
   ba4d0:	2800      	cmp	r0, #0
   ba4d2:	d0f9      	beq.n	ba4c8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   ba4d4:	68a3      	ldr	r3, [r4, #8]
   ba4d6:	2b00      	cmp	r3, #0
   ba4d8:	d1f5      	bne.n	ba4c6 <_ZN6String7reserveEj+0xe>
   ba4da:	6822      	ldr	r2, [r4, #0]
   ba4dc:	7013      	strb	r3, [r2, #0]
   ba4de:	e7f2      	b.n	ba4c6 <_ZN6String7reserveEj+0xe>

000ba4e0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   ba4e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba4e2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   ba4e4:	4611      	mov	r1, r2
   ba4e6:	9201      	str	r2, [sp, #4]
{
   ba4e8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   ba4ea:	f7ff ffe5 	bl	ba4b8 <_ZN6String7reserveEj>
   ba4ee:	9a01      	ldr	r2, [sp, #4]
   ba4f0:	b928      	cbnz	r0, ba4fe <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   ba4f2:	4620      	mov	r0, r4
   ba4f4:	f7ff ffc9 	bl	ba48a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   ba4f8:	4620      	mov	r0, r4
   ba4fa:	b003      	add	sp, #12
   ba4fc:	bd30      	pop	{r4, r5, pc}
	len = length;
   ba4fe:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   ba500:	4629      	mov	r1, r5
   ba502:	6820      	ldr	r0, [r4, #0]
   ba504:	f001 fe82 	bl	bc20c <memcpy>
	buffer[len] = 0;
   ba508:	6822      	ldr	r2, [r4, #0]
   ba50a:	68a3      	ldr	r3, [r4, #8]
   ba50c:	2100      	movs	r1, #0
   ba50e:	54d1      	strb	r1, [r2, r3]
	return *this;
   ba510:	e7f2      	b.n	ba4f8 <_ZN6String4copyEPKcj+0x18>

000ba512 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   ba512:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   ba514:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   ba516:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   ba51a:	4604      	mov	r4, r0
	len = 0;
   ba51c:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba51e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   ba520:	b141      	cbz	r1, ba534 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   ba522:	4608      	mov	r0, r1
   ba524:	9101      	str	r1, [sp, #4]
   ba526:	f001 fee1 	bl	bc2ec <strlen>
   ba52a:	9901      	ldr	r1, [sp, #4]
   ba52c:	4602      	mov	r2, r0
   ba52e:	4620      	mov	r0, r4
   ba530:	f7ff ffd6 	bl	ba4e0 <_ZN6String4copyEPKcj>
}
   ba534:	4620      	mov	r0, r4
   ba536:	b002      	add	sp, #8
   ba538:	bd10      	pop	{r4, pc}

000ba53a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   ba53a:	b538      	push	{r3, r4, r5, lr}
   ba53c:	4605      	mov	r5, r0
	if (buffer) {
   ba53e:	6800      	ldr	r0, [r0, #0]
{
   ba540:	460c      	mov	r4, r1
	if (buffer) {
   ba542:	b168      	cbz	r0, ba560 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   ba544:	686a      	ldr	r2, [r5, #4]
   ba546:	688b      	ldr	r3, [r1, #8]
   ba548:	429a      	cmp	r2, r3
   ba54a:	d307      	bcc.n	ba55c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   ba54c:	6809      	ldr	r1, [r1, #0]
   ba54e:	f001 fec5 	bl	bc2dc <strcpy>
			len = rhs.len;
   ba552:	68a3      	ldr	r3, [r4, #8]
   ba554:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   ba556:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   ba558:	60a3      	str	r3, [r4, #8]
}
   ba55a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   ba55c:	f7fe faf8 	bl	b8b50 <free>
	buffer = rhs.buffer;
   ba560:	6823      	ldr	r3, [r4, #0]
   ba562:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   ba564:	6863      	ldr	r3, [r4, #4]
   ba566:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   ba568:	68a3      	ldr	r3, [r4, #8]
   ba56a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   ba56c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   ba56e:	e9c4 3300 	strd	r3, r3, [r4]
   ba572:	e7f1      	b.n	ba558 <_ZN6String4moveERS_+0x1e>

000ba574 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   ba574:	4288      	cmp	r0, r1
{
   ba576:	b510      	push	{r4, lr}
   ba578:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   ba57a:	d005      	beq.n	ba588 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   ba57c:	680b      	ldr	r3, [r1, #0]
   ba57e:	b12b      	cbz	r3, ba58c <_ZN6StringaSERKS_+0x18>
   ba580:	688a      	ldr	r2, [r1, #8]
   ba582:	4619      	mov	r1, r3
   ba584:	f7ff ffac 	bl	ba4e0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba588:	4620      	mov	r0, r4
   ba58a:	bd10      	pop	{r4, pc}
	else invalidate();
   ba58c:	f7ff ff7d 	bl	ba48a <_ZN6String10invalidateEv>
   ba590:	e7fa      	b.n	ba588 <_ZN6StringaSERKS_+0x14>

000ba592 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   ba592:	4288      	cmp	r0, r1
{
   ba594:	b510      	push	{r4, lr}
   ba596:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   ba598:	d001      	beq.n	ba59e <_ZN6StringaSEOS_+0xc>
   ba59a:	f7ff ffce 	bl	ba53a <_ZN6String4moveERS_>
	return *this;
}
   ba59e:	4620      	mov	r0, r4
   ba5a0:	bd10      	pop	{r4, pc}

000ba5a2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   ba5a2:	b513      	push	{r0, r1, r4, lr}
   ba5a4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   ba5a6:	b159      	cbz	r1, ba5c0 <_ZN6StringaSEPKc+0x1e>
   ba5a8:	4608      	mov	r0, r1
   ba5aa:	9101      	str	r1, [sp, #4]
   ba5ac:	f001 fe9e 	bl	bc2ec <strlen>
   ba5b0:	9901      	ldr	r1, [sp, #4]
   ba5b2:	4602      	mov	r2, r0
   ba5b4:	4620      	mov	r0, r4
   ba5b6:	f7ff ff93 	bl	ba4e0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba5ba:	4620      	mov	r0, r4
   ba5bc:	b002      	add	sp, #8
   ba5be:	bd10      	pop	{r4, pc}
	else invalidate();
   ba5c0:	f7ff ff63 	bl	ba48a <_ZN6String10invalidateEv>
   ba5c4:	e7f9      	b.n	ba5ba <_ZN6StringaSEPKc+0x18>

000ba5c6 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   ba5c6:	b510      	push	{r4, lr}
   ba5c8:	4604      	mov	r4, r0
   ba5ca:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   ba5cc:	2300      	movs	r3, #0
	capacity = 0;
   ba5ce:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   ba5d2:	60a3      	str	r3, [r4, #8]
	flags = 0;
   ba5d4:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   ba5d6:	4608      	mov	r0, r1
	itoa(value, buf, base);
   ba5d8:	a901      	add	r1, sp, #4
   ba5da:	f000 fd15 	bl	bb008 <itoa>
	*this = buf;
   ba5de:	a901      	add	r1, sp, #4
   ba5e0:	4620      	mov	r0, r4
   ba5e2:	f7ff ffde 	bl	ba5a2 <_ZN6StringaSEPKc>
}
   ba5e6:	4620      	mov	r0, r4
   ba5e8:	b00a      	add	sp, #40	; 0x28
   ba5ea:	bd10      	pop	{r4, pc}

000ba5ec <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   ba5ec:	b570      	push	{r4, r5, r6, lr}
   ba5ee:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   ba5f0:	460e      	mov	r6, r1
   ba5f2:	b909      	cbnz	r1, ba5f8 <_ZN6String6concatEPKcj+0xc>
   ba5f4:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   ba5f6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   ba5f8:	b16a      	cbz	r2, ba616 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   ba5fa:	6884      	ldr	r4, [r0, #8]
   ba5fc:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   ba5fe:	4621      	mov	r1, r4
   ba600:	f7ff ff5a 	bl	ba4b8 <_ZN6String7reserveEj>
   ba604:	2800      	cmp	r0, #0
   ba606:	d0f5      	beq.n	ba5f4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   ba608:	6828      	ldr	r0, [r5, #0]
   ba60a:	68ab      	ldr	r3, [r5, #8]
   ba60c:	4631      	mov	r1, r6
   ba60e:	4418      	add	r0, r3
   ba610:	f001 fe64 	bl	bc2dc <strcpy>
	len = newlen;
   ba614:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   ba616:	2001      	movs	r0, #1
   ba618:	e7ed      	b.n	ba5f6 <_ZN6String6concatEPKcj+0xa>

000ba61a <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   ba61a:	688a      	ldr	r2, [r1, #8]
   ba61c:	6809      	ldr	r1, [r1, #0]
   ba61e:	f7ff bfe5 	b.w	ba5ec <_ZN6String6concatEPKcj>

000ba622 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   ba622:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   ba624:	2300      	movs	r3, #0
	buf[0] = c;
   ba626:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   ba62a:	2201      	movs	r2, #1
   ba62c:	a901      	add	r1, sp, #4
	buf[1] = 0;
   ba62e:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   ba632:	f7ff ffdb 	bl	ba5ec <_ZN6String6concatEPKcj>
}
   ba636:	b003      	add	sp, #12
   ba638:	f85d fb04 	ldr.w	pc, [sp], #4

000ba63c <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   ba63c:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba63e:	688a      	ldr	r2, [r1, #8]
   ba640:	6809      	ldr	r1, [r1, #0]
{
   ba642:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba644:	f7ff ffd2 	bl	ba5ec <_ZN6String6concatEPKcj>
   ba648:	b910      	cbnz	r0, ba650 <_ZplRK15StringSumHelperRK6String+0x14>
   ba64a:	4620      	mov	r0, r4
   ba64c:	f7ff ff1d 	bl	ba48a <_ZN6String10invalidateEv>
	return a;
}
   ba650:	4620      	mov	r0, r4
   ba652:	bd10      	pop	{r4, pc}

000ba654 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   ba654:	b513      	push	{r0, r1, r4, lr}
   ba656:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba658:	b929      	cbnz	r1, ba666 <_ZplRK15StringSumHelperPKc+0x12>
   ba65a:	4620      	mov	r0, r4
   ba65c:	f7ff ff15 	bl	ba48a <_ZN6String10invalidateEv>
	return a;
}
   ba660:	4620      	mov	r0, r4
   ba662:	b002      	add	sp, #8
   ba664:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba666:	4608      	mov	r0, r1
   ba668:	9101      	str	r1, [sp, #4]
   ba66a:	f001 fe3f 	bl	bc2ec <strlen>
   ba66e:	9901      	ldr	r1, [sp, #4]
   ba670:	4602      	mov	r2, r0
   ba672:	4620      	mov	r0, r4
   ba674:	f7ff ffba 	bl	ba5ec <_ZN6String6concatEPKcj>
   ba678:	2800      	cmp	r0, #0
   ba67a:	d0ee      	beq.n	ba65a <_ZplRK15StringSumHelperPKc+0x6>
   ba67c:	e7f0      	b.n	ba660 <_ZplRK15StringSumHelperPKc+0xc>

000ba67e <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   ba67e:	6802      	ldr	r2, [r0, #0]
{
   ba680:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   ba682:	6809      	ldr	r1, [r1, #0]
   ba684:	b162      	cbz	r2, ba6a0 <_ZNK6String9compareToERKS_+0x22>
   ba686:	b941      	cbnz	r1, ba69a <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   ba688:	6880      	ldr	r0, [r0, #8]
   ba68a:	b160      	cbz	r0, ba6a6 <_ZNK6String9compareToERKS_+0x28>
   ba68c:	7810      	ldrb	r0, [r2, #0]
   ba68e:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   ba690:	6898      	ldr	r0, [r3, #8]
   ba692:	b140      	cbz	r0, ba6a6 <_ZNK6String9compareToERKS_+0x28>
   ba694:	7809      	ldrb	r1, [r1, #0]
   ba696:	4248      	negs	r0, r1
   ba698:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   ba69a:	4610      	mov	r0, r2
   ba69c:	f001 be14 	b.w	bc2c8 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   ba6a0:	2900      	cmp	r1, #0
   ba6a2:	d1f5      	bne.n	ba690 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   ba6a4:	4608      	mov	r0, r1
}
   ba6a6:	4770      	bx	lr

000ba6a8 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   ba6a8:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   ba6aa:	6882      	ldr	r2, [r0, #8]
   ba6ac:	688b      	ldr	r3, [r1, #8]
   ba6ae:	429a      	cmp	r2, r3
   ba6b0:	d105      	bne.n	ba6be <_ZNK6String6equalsERKS_+0x16>
   ba6b2:	f7ff ffe4 	bl	ba67e <_ZNK6String9compareToERKS_>
   ba6b6:	fab0 f080 	clz	r0, r0
   ba6ba:	0940      	lsrs	r0, r0, #5
}
   ba6bc:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   ba6be:	2000      	movs	r0, #0
   ba6c0:	e7fc      	b.n	ba6bc <_ZNK6String6equalsERKS_+0x14>

000ba6c2 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   ba6c2:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   ba6c4:	6882      	ldr	r2, [r0, #8]
   ba6c6:	b93a      	cbnz	r2, ba6d8 <_ZNK6String6equalsEPKc+0x16>
   ba6c8:	b121      	cbz	r1, ba6d4 <_ZNK6String6equalsEPKc+0x12>
   ba6ca:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   ba6cc:	fab0 f080 	clz	r0, r0
   ba6d0:	0940      	lsrs	r0, r0, #5
   ba6d2:	e000      	b.n	ba6d6 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   ba6d4:	2001      	movs	r0, #1
}
   ba6d6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   ba6d8:	6800      	ldr	r0, [r0, #0]
   ba6da:	b909      	cbnz	r1, ba6e0 <_ZNK6String6equalsEPKc+0x1e>
   ba6dc:	7800      	ldrb	r0, [r0, #0]
   ba6de:	e7f5      	b.n	ba6cc <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   ba6e0:	f001 fdf2 	bl	bc2c8 <strcmp>
   ba6e4:	e7f2      	b.n	ba6cc <_ZNK6String6equalsEPKc+0xa>

000ba6e6 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   ba6e6:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   ba6e8:	6883      	ldr	r3, [r0, #8]
   ba6ea:	4293      	cmp	r3, r2
   ba6ec:	d907      	bls.n	ba6fe <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   ba6ee:	6804      	ldr	r4, [r0, #0]
   ba6f0:	6809      	ldr	r1, [r1, #0]
   ba6f2:	18a0      	adds	r0, r4, r2
   ba6f4:	f001 fe22 	bl	bc33c <strstr>
	if (found == NULL) return -1;
   ba6f8:	b108      	cbz	r0, ba6fe <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   ba6fa:	1b00      	subs	r0, r0, r4
}
   ba6fc:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   ba6fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba702:	e7fb      	b.n	ba6fc <_ZNK6String7indexOfERKS_j+0x16>

000ba704 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   ba704:	2200      	movs	r2, #0
   ba706:	f7ff bfee 	b.w	ba6e6 <_ZNK6String7indexOfERKS_j>
	...

000ba70c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   ba70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   ba70e:	429a      	cmp	r2, r3
{
   ba710:	460f      	mov	r7, r1
   ba712:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   ba714:	490c      	ldr	r1, [pc, #48]	; (ba748 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   ba716:	bf88      	it	hi
   ba718:	4613      	movhi	r3, r2
{
   ba71a:	4614      	mov	r4, r2
   ba71c:	4606      	mov	r6, r0
	if (left > right) {
   ba71e:	bf84      	itt	hi
   ba720:	462c      	movhi	r4, r5
   ba722:	461d      	movhi	r5, r3
	String out;
   ba724:	f7ff fef5 	bl	ba512 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   ba728:	68bb      	ldr	r3, [r7, #8]
   ba72a:	42a3      	cmp	r3, r4
   ba72c:	d30a      	bcc.n	ba744 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   ba72e:	6839      	ldr	r1, [r7, #0]
   ba730:	42ab      	cmp	r3, r5
   ba732:	bf94      	ite	ls
   ba734:	ebc4 0203 	rsbls	r2, r4, r3
   ba738:	ebc4 0205 	rsbhi	r2, r4, r5
   ba73c:	4421      	add	r1, r4
   ba73e:	4630      	mov	r0, r6
   ba740:	f7ff fece 	bl	ba4e0 <_ZN6String4copyEPKcj>
	return out;
}
   ba744:	4630      	mov	r0, r6
   ba746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba748:	000be8be 	.word	0x000be8be

000ba74c <_ZNK6String9substringEj>:
{
   ba74c:	b510      	push	{r4, lr}
   ba74e:	4604      	mov	r4, r0
	return substring(left, len);
   ba750:	688b      	ldr	r3, [r1, #8]
   ba752:	f7ff ffdb 	bl	ba70c <_ZNK6String9substringEjj>
}
   ba756:	4620      	mov	r0, r4
   ba758:	bd10      	pop	{r4, pc}
	...

000ba75c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   ba75c:	4b05      	ldr	r3, [pc, #20]	; (ba774 <_GLOBAL__sub_I_System+0x18>)
   ba75e:	2202      	movs	r2, #2
   ba760:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   ba762:	4b05      	ldr	r3, [pc, #20]	; (ba778 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   ba764:	4a05      	ldr	r2, [pc, #20]	; (ba77c <_GLOBAL__sub_I_System+0x20>)
   ba766:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   ba768:	2000      	movs	r0, #0
   ba76a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   ba76e:	f7fe b94b 	b.w	b8a08 <set_system_mode>
   ba772:	bf00      	nop
   ba774:	2003e6f8 	.word	0x2003e6f8
   ba778:	2003e6ec 	.word	0x2003e6ec
   ba77c:	ffff0000 	.word	0xffff0000

000ba780 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   ba780:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   ba782:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   ba784:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   ba788:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   ba78a:	2201      	movs	r2, #1
   ba78c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba790:	f10d 0107 	add.w	r1, sp, #7
   ba794:	47a0      	blx	r4
}
   ba796:	b002      	add	sp, #8
   ba798:	bd10      	pop	{r4, pc}

000ba79a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   ba79a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   ba79c:	6803      	ldr	r3, [r0, #0]
   ba79e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   ba7a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba7a4:	46a4      	mov	ip, r4
}
   ba7a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   ba7aa:	4760      	bx	ip

000ba7ac <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   ba7ac:	b513      	push	{r0, r1, r4, lr}
   ba7ae:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   ba7b0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   ba7b2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   ba7b6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   ba7b8:	f10d 0107 	add.w	r1, sp, #7
   ba7bc:	2201      	movs	r2, #1
   ba7be:	47a0      	blx	r4
}
   ba7c0:	b002      	add	sp, #8
   ba7c2:	bd10      	pop	{r4, pc}

000ba7c4 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   ba7c4:	b510      	push	{r4, lr}
      { return _M_ptr; }
   ba7c6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   ba7c8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba7cc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   ba7d0:	429a      	cmp	r2, r3
int TCPClient::read() {
   ba7d2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   ba7d4:	d008      	beq.n	ba7e8 <_ZN9TCPClient4readEv+0x24>
   ba7d6:	6963      	ldr	r3, [r4, #20]
   ba7d8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   ba7dc:	1c51      	adds	r1, r2, #1
   ba7de:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   ba7e2:	4413      	add	r3, r2
   ba7e4:	7918      	ldrb	r0, [r3, #4]
}
   ba7e6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   ba7e8:	6803      	ldr	r3, [r0, #0]
   ba7ea:	691b      	ldr	r3, [r3, #16]
   ba7ec:	4798      	blx	r3
   ba7ee:	2800      	cmp	r0, #0
   ba7f0:	d1f1      	bne.n	ba7d6 <_ZN9TCPClient4readEv+0x12>
   ba7f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba7f6:	e7f6      	b.n	ba7e6 <_ZN9TCPClient4readEv+0x22>

000ba7f8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   ba7f8:	4770      	bx	lr

000ba7fa <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   ba7fa:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   ba7fc:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   ba7fe:	43c0      	mvns	r0, r0
   ba800:	0fc0      	lsrs	r0, r0, #31
   ba802:	4770      	bx	lr

000ba804 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba804:	4770      	bx	lr
	...

000ba808 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   ba808:	4b06      	ldr	r3, [pc, #24]	; (ba824 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   ba80a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   ba80c:	b510      	push	{r4, lr}
   ba80e:	f100 040c 	add.w	r4, r0, #12
	    ||
   ba812:	d005      	beq.n	ba820 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   ba814:	4608      	mov	r0, r1
   ba816:	f000 fd1d 	bl	bb254 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   ba81a:	2800      	cmp	r0, #0
   ba81c:	bf08      	it	eq
   ba81e:	2400      	moveq	r4, #0
      }
   ba820:	4620      	mov	r0, r4
   ba822:	bd10      	pop	{r4, pc}
   ba824:	000bea94 	.word	0x000bea94

000ba828 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba828:	b510      	push	{r4, lr}
   ba82a:	21ac      	movs	r1, #172	; 0xac
   ba82c:	4604      	mov	r4, r0
   ba82e:	f7f9 fc38 	bl	b40a2 <_ZdlPvj>
   ba832:	4620      	mov	r0, r4
   ba834:	bd10      	pop	{r4, pc}

000ba836 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   ba836:	21ac      	movs	r1, #172	; 0xac
   ba838:	f7f9 bc33 	b.w	b40a2 <_ZdlPvj>

000ba83c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   ba83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   ba840:	f04f 0800 	mov.w	r8, #0
   ba844:	b086      	sub	sp, #24
   ba846:	461c      	mov	r4, r3
   ba848:	f8c0 8004 	str.w	r8, [r0, #4]
   ba84c:	4605      	mov	r5, r0
   ba84e:	460e      	mov	r6, r1
   ba850:	4617      	mov	r7, r2
    struct timeval tv = {};
   ba852:	4641      	mov	r1, r8
   ba854:	2210      	movs	r2, #16
   ba856:	a802      	add	r0, sp, #8
   ba858:	f001 fd00 	bl	bc25c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   ba85c:	1c63      	adds	r3, r4, #1
   ba85e:	d009      	beq.n	ba874 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   ba860:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba864:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   ba868:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   ba86c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   ba870:	435c      	muls	r4, r3
   ba872:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   ba874:	6968      	ldr	r0, [r5, #20]
   ba876:	2310      	movs	r3, #16
   ba878:	9300      	str	r3, [sp, #0]
   ba87a:	6800      	ldr	r0, [r0, #0]
   ba87c:	ab02      	add	r3, sp, #8
   ba87e:	f241 0205 	movw	r2, #4101	; 0x1005
   ba882:	f640 71ff 	movw	r1, #4095	; 0xfff
   ba886:	f7fe f80f 	bl	b88a8 <sock_setsockopt>
    if (ret < 0) {
   ba88a:	2800      	cmp	r0, #0
   ba88c:	da07      	bge.n	ba89e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   ba88e:	f7fe f98f 	bl	b8bb0 <__errno>
   ba892:	6803      	ldr	r3, [r0, #0]
   ba894:	606b      	str	r3, [r5, #4]
        return 0;
   ba896:	2000      	movs	r0, #0
}
   ba898:	b006      	add	sp, #24
   ba89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   ba89e:	6968      	ldr	r0, [r5, #20]
   ba8a0:	2300      	movs	r3, #0
   ba8a2:	6800      	ldr	r0, [r0, #0]
   ba8a4:	463a      	mov	r2, r7
   ba8a6:	4631      	mov	r1, r6
   ba8a8:	f7fe f81e 	bl	b88e8 <sock_send>
    if (ret < 0) {
   ba8ac:	1e03      	subs	r3, r0, #0
   ba8ae:	dbee      	blt.n	ba88e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   ba8b0:	4618      	mov	r0, r3
   ba8b2:	e7f1      	b.n	ba898 <_ZN9TCPClient5writeEPKhjm+0x5c>

000ba8b4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   ba8b4:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   ba8b6:	6984      	ldr	r4, [r0, #24]
   ba8b8:	4b0a      	ldr	r3, [pc, #40]	; (ba8e4 <_ZN9TCPClientD1Ev+0x30>)
   ba8ba:	6003      	str	r3, [r0, #0]
   ba8bc:	4605      	mov	r5, r0
   ba8be:	b17c      	cbz	r4, ba8e0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   ba8c0:	6863      	ldr	r3, [r4, #4]
   ba8c2:	3b01      	subs	r3, #1
   ba8c4:	6063      	str	r3, [r4, #4]
   ba8c6:	b95b      	cbnz	r3, ba8e0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   ba8c8:	6823      	ldr	r3, [r4, #0]
   ba8ca:	4620      	mov	r0, r4
   ba8cc:	689b      	ldr	r3, [r3, #8]
   ba8ce:	4798      	blx	r3
          if (--_M_weak_count == 0)
   ba8d0:	68a3      	ldr	r3, [r4, #8]
   ba8d2:	3b01      	subs	r3, #1
   ba8d4:	60a3      	str	r3, [r4, #8]
   ba8d6:	b91b      	cbnz	r3, ba8e0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   ba8d8:	6823      	ldr	r3, [r4, #0]
   ba8da:	4620      	mov	r0, r4
   ba8dc:	68db      	ldr	r3, [r3, #12]
   ba8de:	4798      	blx	r3
   ba8e0:	4628      	mov	r0, r5
   ba8e2:	bd38      	pop	{r3, r4, r5, pc}
   ba8e4:	000bebc8 	.word	0x000bebc8

000ba8e8 <_ZN9TCPClientD0Ev>:
   ba8e8:	b510      	push	{r4, lr}
   ba8ea:	4604      	mov	r4, r0
   ba8ec:	f7ff ffe2 	bl	ba8b4 <_ZN9TCPClientD1Ev>
   ba8f0:	4620      	mov	r0, r4
   ba8f2:	211c      	movs	r1, #28
   ba8f4:	f7f9 fbd5 	bl	b40a2 <_ZdlPvj>
   ba8f8:	4620      	mov	r0, r4
   ba8fa:	bd10      	pop	{r4, pc}

000ba8fc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   ba8fc:	b530      	push	{r4, r5, lr}
   ba8fe:	b087      	sub	sp, #28
   ba900:	4604      	mov	r4, r0
class IPAddress : public Printable {
   ba902:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   ba904:	4668      	mov	r0, sp
   ba906:	f7ff fc55 	bl	ba1b4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba90a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba90c:	3404      	adds	r4, #4
   ba90e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba910:	682b      	ldr	r3, [r5, #0]
   ba912:	7023      	strb	r3, [r4, #0]
    }
   ba914:	b007      	add	sp, #28
   ba916:	bd30      	pop	{r4, r5, pc}

000ba918 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   ba918:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   ba91a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   ba91c:	4b05      	ldr	r3, [pc, #20]	; (ba934 <_ZN9TCPClient8remoteIPEv+0x1c>)
   ba91e:	4604      	mov	r4, r0
   ba920:	358c      	adds	r5, #140	; 0x8c
   ba922:	f844 3b04 	str.w	r3, [r4], #4
   ba926:	4606      	mov	r6, r0
   ba928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba92a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba92c:	682b      	ldr	r3, [r5, #0]
   ba92e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   ba930:	4630      	mov	r0, r6
   ba932:	bd70      	pop	{r4, r5, r6, pc}
   ba934:	000beb40 	.word	0x000beb40

000ba938 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   ba938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba93c:	4698      	mov	r8, r3
    stop();
   ba93e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   ba940:	b093      	sub	sp, #76	; 0x4c
   ba942:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   ba944:	2400      	movs	r4, #0
    stop();
   ba946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   ba948:	4606      	mov	r6, r0
   ba94a:	4617      	mov	r7, r2
    stop();
   ba94c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   ba94e:	4628      	mov	r0, r5
   ba950:	466b      	mov	r3, sp
   ba952:	4622      	mov	r2, r4
   ba954:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   ba956:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   ba958:	f7fd ff9e 	bl	b8898 <netdb_getaddrinfo>
   ba95c:	4605      	mov	r5, r0
   ba95e:	2800      	cmp	r0, #0
   ba960:	d163      	bne.n	baa2a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   ba962:	9b00      	ldr	r3, [sp, #0]
   ba964:	2b00      	cmp	r3, #0
   ba966:	d04b      	beq.n	baa00 <_ZN9TCPClient7connectEPKctm+0xc8>
   ba968:	695b      	ldr	r3, [r3, #20]
   ba96a:	2b00      	cmp	r3, #0
   ba96c:	d048      	beq.n	baa00 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   ba96e:	a806      	add	r0, sp, #24
   ba970:	f7ff fbdc 	bl	ba12c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   ba974:	9b00      	ldr	r3, [sp, #0]
   ba976:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   ba978:	7863      	ldrb	r3, [r4, #1]
   ba97a:	2b02      	cmp	r3, #2
   ba97c:	d104      	bne.n	ba988 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   ba97e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   ba980:	a806      	add	r0, sp, #24
   ba982:	f7ff ffbb 	bl	ba8fc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   ba986:	e026      	b.n	ba9d6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   ba988:	2b0a      	cmp	r3, #10
   ba98a:	d124      	bne.n	ba9d6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   ba98c:	2211      	movs	r2, #17
   ba98e:	4629      	mov	r1, r5
   ba990:	a801      	add	r0, sp, #4
   ba992:	f001 fc63 	bl	bc25c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   ba996:	68a3      	ldr	r3, [r4, #8]
   ba998:	2b00      	cmp	r3, #0
   ba99a:	d038      	beq.n	baa0e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba99c:	f104 0308 	add.w	r3, r4, #8
   ba9a0:	f10d 0c04 	add.w	ip, sp, #4
   ba9a4:	3418      	adds	r4, #24
   ba9a6:	6818      	ldr	r0, [r3, #0]
   ba9a8:	6859      	ldr	r1, [r3, #4]
   ba9aa:	4662      	mov	r2, ip
   ba9ac:	c203      	stmia	r2!, {r0, r1}
   ba9ae:	3308      	adds	r3, #8
   ba9b0:	42a3      	cmp	r3, r4
   ba9b2:	4694      	mov	ip, r2
   ba9b4:	d1f7      	bne.n	ba9a6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   ba9b6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   ba9b8:	a901      	add	r1, sp, #4
   ba9ba:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   ba9bc:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   ba9c0:	f7ff fbc2 	bl	ba148 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba9c4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   ba9c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   ba9cc:	ac07      	add	r4, sp, #28
   ba9ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba9d0:	f8dc 3000 	ldr.w	r3, [ip]
   ba9d4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   ba9d6:	a806      	add	r0, sp, #24
   ba9d8:	f7ff fbc8 	bl	ba16c <_ZNK9IPAddresscvbEv>
        if (addr) {
   ba9dc:	b180      	cbz	r0, baa00 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   ba9de:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   ba9e0:	ad07      	add	r5, sp, #28
   ba9e2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   ba9e6:	4b12      	ldr	r3, [pc, #72]	; (baa30 <_ZN9TCPClient7connectEPKctm+0xf8>)
   ba9e8:	930c      	str	r3, [sp, #48]	; 0x30
   ba9ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba9ec:	ac0d      	add	r4, sp, #52	; 0x34
   ba9ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba9f0:	682b      	ldr	r3, [r5, #0]
   ba9f2:	7023      	strb	r3, [r4, #0]
   ba9f4:	463a      	mov	r2, r7
   ba9f6:	4643      	mov	r3, r8
   ba9f8:	a90c      	add	r1, sp, #48	; 0x30
   ba9fa:	4630      	mov	r0, r6
   ba9fc:	47c8      	blx	r9
   ba9fe:	4605      	mov	r5, r0
    SCOPE_GUARD({
   baa00:	9800      	ldr	r0, [sp, #0]
   baa02:	f7fd ff41 	bl	b8888 <netdb_freeaddrinfo>
}
   baa06:	4628      	mov	r0, r5
   baa08:	b013      	add	sp, #76	; 0x4c
   baa0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   baa0e:	68e3      	ldr	r3, [r4, #12]
   baa10:	2b00      	cmp	r3, #0
   baa12:	d1c3      	bne.n	ba99c <_ZN9TCPClient7connectEPKctm+0x64>
   baa14:	f64f 70ff 	movw	r0, #65535	; 0xffff
   baa18:	f8d4 9010 	ldr.w	r9, [r4, #16]
   baa1c:	f7fd ff24 	bl	b8868 <inet_htonl>
   baa20:	4581      	cmp	r9, r0
   baa22:	d1bb      	bne.n	ba99c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   baa24:	f104 0114 	add.w	r1, r4, #20
   baa28:	e7aa      	b.n	ba980 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   baa2a:	4625      	mov	r5, r4
   baa2c:	e7e8      	b.n	baa00 <_ZN9TCPClient7connectEPKctm+0xc8>
   baa2e:	bf00      	nop
   baa30:	000beb40 	.word	0x000beb40

000baa34 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   baa34:	b538      	push	{r3, r4, r5, lr}
   baa36:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   baa38:	681a      	ldr	r2, [r3, #0]
   baa3a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   baa3c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   baa3e:	da10      	bge.n	baa62 <_ZN9TCPClient9connectedEv+0x2e>
   baa40:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   baa44:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   baa48:	429a      	cmp	r2, r3
   baa4a:	d10a      	bne.n	baa62 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   baa4c:	6803      	ldr	r3, [r0, #0]
   baa4e:	691b      	ldr	r3, [r3, #16]
   baa50:	4798      	blx	r3
        if (!rv) {
   baa52:	4604      	mov	r4, r0
   baa54:	b928      	cbnz	r0, baa62 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   baa56:	682b      	ldr	r3, [r5, #0]
   baa58:	4628      	mov	r0, r5
   baa5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   baa5c:	4798      	blx	r3
        rv = available();
   baa5e:	4620      	mov	r0, r4
}
   baa60:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   baa62:	2001      	movs	r0, #1
   baa64:	e7fc      	b.n	baa60 <_ZN9TCPClient9connectedEv+0x2c>

000baa66 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   baa66:	b510      	push	{r4, lr}
   baa68:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   baa6a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   baa6e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   baa72:	429a      	cmp	r2, r3
int TCPClient::peek() {
   baa74:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   baa76:	d005      	beq.n	baa84 <_ZN9TCPClient4peekEv+0x1e>
   baa78:	6963      	ldr	r3, [r4, #20]
   baa7a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   baa7e:	4413      	add	r3, r2
   baa80:	7918      	ldrb	r0, [r3, #4]
}
   baa82:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   baa84:	6803      	ldr	r3, [r0, #0]
   baa86:	691b      	ldr	r3, [r3, #16]
   baa88:	4798      	blx	r3
   baa8a:	2800      	cmp	r0, #0
   baa8c:	d1f4      	bne.n	baa78 <_ZN9TCPClient4peekEv+0x12>
   baa8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   baa92:	e7f6      	b.n	baa82 <_ZN9TCPClient4peekEv+0x1c>

000baa94 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   baa94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baa96:	6943      	ldr	r3, [r0, #20]
   baa98:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   baa9a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   baa9e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   baaa2:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   baaa4:	4605      	mov	r5, r0
   baaa6:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   baaa8:	d016      	beq.n	baad8 <_ZN9TCPClient4readEPhj+0x44>
   baaaa:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   baaac:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   baab0:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   baab4:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   baab6:	42bc      	cmp	r4, r7
   baab8:	bf28      	it	cs
   baaba:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   baabc:	3304      	adds	r3, #4
   baabe:	4622      	mov	r2, r4
   baac0:	4419      	add	r1, r3
   baac2:	4630      	mov	r0, r6
   baac4:	f001 fba2 	bl	bc20c <memcpy>
   baac8:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   baaca:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   baace:	4423      	add	r3, r4
   baad0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   baad4:	4620      	mov	r0, r4
   baad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   baad8:	6803      	ldr	r3, [r0, #0]
   baada:	691b      	ldr	r3, [r3, #16]
   baadc:	4798      	blx	r3
   baade:	2800      	cmp	r0, #0
   baae0:	d1e3      	bne.n	baaaa <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   baae2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   baae6:	e7f5      	b.n	baad4 <_ZN9TCPClient4readEPhj+0x40>

000baae8 <_ZN9TCPClient12flush_bufferEv>:
   baae8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   baaea:	2300      	movs	r3, #0
   baaec:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   baaf0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   baaf2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   baaf6:	4770      	bx	lr

000baaf8 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   baaf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   baafc:	461f      	mov	r7, r3
    stop();
   baafe:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   bab00:	460c      	mov	r4, r1
    stop();
   bab02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   bab04:	b08a      	sub	sp, #40	; 0x28
   bab06:	4605      	mov	r5, r0
   bab08:	4616      	mov	r6, r2
    stop();
   bab0a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   bab0c:	7d23      	ldrb	r3, [r4, #20]
   bab0e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   bab12:	2b04      	cmp	r3, #4
   bab14:	bf0c      	ite	eq
   bab16:	2002      	moveq	r0, #2
   bab18:	200a      	movne	r0, #10
   bab1a:	2206      	movs	r2, #6
   bab1c:	2101      	movs	r1, #1
   bab1e:	f7fd feeb 	bl	b88f8 <sock_socket>
   bab22:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   bab26:	696b      	ldr	r3, [r5, #20]
   bab28:	681b      	ldr	r3, [r3, #0]
   bab2a:	2b00      	cmp	r3, #0
   bab2c:	da08      	bge.n	bab40 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   bab2e:	682b      	ldr	r3, [r5, #0]
   bab30:	4628      	mov	r0, r5
   bab32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   bab34:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   bab36:	4798      	blx	r3
}
   bab38:	4620      	mov	r0, r4
   bab3a:	b00a      	add	sp, #40	; 0x28
   bab3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   bab40:	4628      	mov	r0, r5
   bab42:	f7ff ffd1 	bl	baae8 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   bab46:	b1b7      	cbz	r7, bab76 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   bab48:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   bab4a:	a903      	add	r1, sp, #12
   bab4c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   bab4e:	9303      	str	r3, [sp, #12]
   bab50:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   bab54:	f7fd fe78 	bl	b8848 <if_index_to_name>
   bab58:	2800      	cmp	r0, #0
   bab5a:	d1e8      	bne.n	bab2e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   bab5c:	6968      	ldr	r0, [r5, #20]
   bab5e:	2306      	movs	r3, #6
   bab60:	9300      	str	r3, [sp, #0]
   bab62:	6800      	ldr	r0, [r0, #0]
   bab64:	ab03      	add	r3, sp, #12
   bab66:	f241 020b 	movw	r2, #4107	; 0x100b
   bab6a:	f640 71ff 	movw	r1, #4095	; 0xfff
   bab6e:	f7fd fe9b 	bl	b88a8 <sock_setsockopt>
   bab72:	2800      	cmp	r0, #0
   bab74:	d1db      	bne.n	bab2e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   bab76:	221c      	movs	r2, #28
   bab78:	2100      	movs	r1, #0
   bab7a:	a803      	add	r0, sp, #12
   bab7c:	f001 fb6e 	bl	bc25c <memset>
    if (ip.version() == 4) {
   bab80:	7d23      	ldrb	r3, [r4, #20]
   bab82:	2b04      	cmp	r3, #4
   bab84:	d11d      	bne.n	babc2 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   bab86:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   bab8a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   bab8c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   bab90:	f7fd fe72 	bl	b8878 <inet_htons>
   bab94:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   bab98:	6860      	ldr	r0, [r4, #4]
   bab9a:	f7fd fe65 	bl	b8868 <inet_htonl>
   bab9e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   baba0:	696b      	ldr	r3, [r5, #20]
   baba2:	221c      	movs	r2, #28
   baba4:	6818      	ldr	r0, [r3, #0]
   baba6:	a903      	add	r1, sp, #12
   baba8:	f7fd fe8e 	bl	b88c8 <sock_connect>
   babac:	2800      	cmp	r0, #0
   babae:	d1be      	bne.n	bab2e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   babb0:	3404      	adds	r4, #4
   babb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   babb4:	696d      	ldr	r5, [r5, #20]
   babb6:	358c      	adds	r5, #140	; 0x8c
   babb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   babba:	6823      	ldr	r3, [r4, #0]
   babbc:	702b      	strb	r3, [r5, #0]
    return 1; // success
   babbe:	2401      	movs	r4, #1
   babc0:	e7ba      	b.n	bab38 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   babc2:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   babc6:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   babc8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   babcc:	f7fd fe54 	bl	b8878 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   babd0:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   babd2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   babd6:	1d23      	adds	r3, r4, #4
   babd8:	f104 0714 	add.w	r7, r4, #20
   babdc:	6818      	ldr	r0, [r3, #0]
   babde:	6859      	ldr	r1, [r3, #4]
   babe0:	4632      	mov	r2, r6
   babe2:	c203      	stmia	r2!, {r0, r1}
   babe4:	3308      	adds	r3, #8
   babe6:	42bb      	cmp	r3, r7
   babe8:	4616      	mov	r6, r2
   babea:	d1f7      	bne.n	babdc <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   babec:	e7d8      	b.n	baba0 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000babf0 <_ZN9TCPClient9availableEv>:
{
   babf0:	b530      	push	{r4, r5, lr}
   babf2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   babf4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   babf8:	b08b      	sub	sp, #44	; 0x2c
   babfa:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   babfc:	b12b      	cbz	r3, bac0a <_ZN9TCPClient9availableEv+0x1a>
   babfe:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   bac02:	429a      	cmp	r2, r3
   bac04:	d101      	bne.n	bac0a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   bac06:	f7ff ff6f 	bl	baae8 <_ZN9TCPClient12flush_bufferEv>
   bac0a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   bac0c:	6808      	ldr	r0, [r1, #0]
   bac0e:	2800      	cmp	r0, #0
   bac10:	db18      	blt.n	bac44 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   bac12:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   bac16:	2d7f      	cmp	r5, #127	; 0x7f
   bac18:	d814      	bhi.n	bac44 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   bac1a:	3104      	adds	r1, #4
   bac1c:	2308      	movs	r3, #8
   bac1e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   bac22:	4429      	add	r1, r5
   bac24:	f7fd fe58 	bl	b88d8 <sock_recv>
            if (ret > 0) {
   bac28:	2800      	cmp	r0, #0
   bac2a:	dd13      	ble.n	bac54 <_ZN9TCPClient9availableEv+0x64>
   bac2c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   bac2e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bac32:	b90a      	cbnz	r2, bac38 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   bac34:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   bac38:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   bac3a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   bac3e:	4410      	add	r0, r2
   bac40:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   bac44:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   bac46:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   bac4a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   bac4e:	1ac0      	subs	r0, r0, r3
   bac50:	b00b      	add	sp, #44	; 0x2c
   bac52:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   bac54:	f7fd ffac 	bl	b8bb0 <__errno>
   bac58:	6803      	ldr	r3, [r0, #0]
   bac5a:	2b0b      	cmp	r3, #11
   bac5c:	d0f2      	beq.n	bac44 <_ZN9TCPClient9availableEv+0x54>
   bac5e:	f7fd ffa7 	bl	b8bb0 <__errno>
   bac62:	6803      	ldr	r3, [r0, #0]
   bac64:	2b0b      	cmp	r3, #11
   bac66:	d0ed      	beq.n	bac44 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   bac68:	2320      	movs	r3, #32
   bac6a:	2500      	movs	r5, #0
   bac6c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   bac70:	f7fd ff9e 	bl	b8bb0 <__errno>
   bac74:	6803      	ldr	r3, [r0, #0]
   bac76:	9301      	str	r3, [sp, #4]
   bac78:	4b08      	ldr	r3, [pc, #32]	; (bac9c <_ZN9TCPClient9availableEv+0xac>)
   bac7a:	4909      	ldr	r1, [pc, #36]	; (baca0 <_ZN9TCPClient9availableEv+0xb0>)
   bac7c:	9300      	str	r3, [sp, #0]
   bac7e:	aa02      	add	r2, sp, #8
   bac80:	462b      	mov	r3, r5
   bac82:	2032      	movs	r0, #50	; 0x32
   bac84:	f7fd feb8 	bl	b89f8 <log_message>
                    sock_close(d_->sock);
   bac88:	6963      	ldr	r3, [r4, #20]
   bac8a:	6818      	ldr	r0, [r3, #0]
   bac8c:	f7fd fe14 	bl	b88b8 <sock_close>
   bac90:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   bac92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bac96:	601a      	str	r2, [r3, #0]
   bac98:	e7d4      	b.n	bac44 <_ZN9TCPClient9availableEv+0x54>
   bac9a:	bf00      	nop
   bac9c:	000beb93 	.word	0x000beb93
   baca0:	000beb8c 	.word	0x000beb8c

000baca4 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   baca4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   baca6:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   baca8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   bacaa:	6818      	ldr	r0, [r3, #0]
   bacac:	2800      	cmp	r0, #0
   bacae:	db01      	blt.n	bacb4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   bacb0:	f7fd fe02 	bl	b88b8 <sock_close>
   bacb4:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   bacb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bacba:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   bacbc:	6960      	ldr	r0, [r4, #20]
   bacbe:	2211      	movs	r2, #17
   bacc0:	2100      	movs	r1, #0
   bacc2:	308c      	adds	r0, #140	; 0x8c
   bacc4:	f001 faca 	bl	bc25c <memset>
    flush_buffer();
   bacc8:	4620      	mov	r0, r4
}
   bacca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   bacce:	f7ff bf0b 	b.w	baae8 <_ZN9TCPClient12flush_bufferEv>

000bacd2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   bacd2:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   bacd4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   bacd6:	4604      	mov	r4, r0
          total(0) {
   bacd8:	6001      	str	r1, [r0, #0]
   bacda:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   bacde:	3088      	adds	r0, #136	; 0x88
   bace0:	f7ff fa24 	bl	ba12c <_ZN9IPAddressC1Ev>
}
   bace4:	4620      	mov	r0, r4
   bace6:	bd10      	pop	{r4, pc}

000bace8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   bace8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bacea:	2300      	movs	r3, #0
   bacec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   bacf0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   bacf4:	4a0e      	ldr	r2, [pc, #56]	; (bad30 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   bacf6:	6103      	str	r3, [r0, #16]
   bacf8:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bacfa:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   bacfc:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bacfe:	20ac      	movs	r0, #172	; 0xac
   bad00:	9101      	str	r1, [sp, #4]
   bad02:	f7f9 f9c8 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bad06:	1e05      	subs	r5, r0, #0
   bad08:	f105 060c 	add.w	r6, r5, #12
   bad0c:	d008      	beq.n	bad20 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   bad0e:	2301      	movs	r3, #1
   bad10:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   bad14:	4b07      	ldr	r3, [pc, #28]	; (bad34 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bad16:	9901      	ldr	r1, [sp, #4]
   bad18:	602b      	str	r3, [r5, #0]
   bad1a:	4630      	mov	r0, r6
   bad1c:	f7ff ffd9 	bl	bacd2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   bad20:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   bad22:	e9c4 6505 	strd	r6, r5, [r4, #20]
   bad26:	f7ff fedf 	bl	baae8 <_ZN9TCPClient12flush_bufferEv>
}
   bad2a:	b002      	add	sp, #8
   bad2c:	bd70      	pop	{r4, r5, r6, pc}
   bad2e:	bf00      	nop
   bad30:	000bebc8 	.word	0x000bebc8
   bad34:	000bebac 	.word	0x000bebac

000bad38 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   bad38:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   bad3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   bad3e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   bad40:	f7ff ffd2 	bl	bace8 <_ZN9TCPClientC1Ei>
}
   bad44:	4620      	mov	r0, r4
   bad46:	bd10      	pop	{r4, pc}

000bad48 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   bad48:	b510      	push	{r4, lr}
   bad4a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   bad4c:	6800      	ldr	r0, [r0, #0]
   bad4e:	2800      	cmp	r0, #0
   bad50:	db01      	blt.n	bad56 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   bad52:	f7fd fdb1 	bl	b88b8 <sock_close>
    }
}
   bad56:	4620      	mov	r0, r4
   bad58:	bd10      	pop	{r4, pc}

000bad5a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   bad5a:	300c      	adds	r0, #12
   bad5c:	f7ff bff4 	b.w	bad48 <_ZN9TCPClient4DataD1Ev>

000bad60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bad60:	4b02      	ldr	r3, [pc, #8]	; (bad6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bad62:	681a      	ldr	r2, [r3, #0]
   bad64:	4b02      	ldr	r3, [pc, #8]	; (bad70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bad66:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bad68:	4770      	bx	lr
   bad6a:	bf00      	nop
   bad6c:	200350c0 	.word	0x200350c0
   bad70:	2003e6fc 	.word	0x2003e6fc

000bad74 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bad74:	4770      	bx	lr

000bad76 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bad76:	7441      	strb	r1, [r0, #17]
}
   bad78:	4770      	bx	lr

000bad7a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bad7a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bad7c:	7c00      	ldrb	r0, [r0, #16]
   bad7e:	f7fd fdeb 	bl	b8958 <hal_usart_available_data_for_write>
}
   bad82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bad86:	bd08      	pop	{r3, pc}

000bad88 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bad88:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bad8a:	7c00      	ldrb	r0, [r0, #16]
   bad8c:	f7fd fdc4 	bl	b8918 <hal_usart_available>
}
   bad90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bad94:	bd08      	pop	{r3, pc}

000bad96 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bad96:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bad98:	7c00      	ldrb	r0, [r0, #16]
   bad9a:	f7fd fdcd 	bl	b8938 <hal_usart_peek>
}
   bad9e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bada2:	bd08      	pop	{r3, pc}

000bada4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bada4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bada6:	7c00      	ldrb	r0, [r0, #16]
   bada8:	f7fd fdbe 	bl	b8928 <hal_usart_read>
}
   badac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   badb0:	bd08      	pop	{r3, pc}

000badb2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   badb2:	7c00      	ldrb	r0, [r0, #16]
   badb4:	f7fd bdc8 	b.w	b8948 <hal_usart_flush>

000badb8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   badb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   badba:	7c45      	ldrb	r5, [r0, #17]
{
   badbc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   badbe:	b12d      	cbz	r5, badcc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   badc0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   badc2:	b003      	add	sp, #12
   badc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   badc8:	f7fd bd9e 	b.w	b8908 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   badcc:	7c00      	ldrb	r0, [r0, #16]
   badce:	9101      	str	r1, [sp, #4]
   badd0:	f7fd fdc2 	bl	b8958 <hal_usart_available_data_for_write>
   badd4:	2800      	cmp	r0, #0
   badd6:	9901      	ldr	r1, [sp, #4]
   badd8:	dcf2      	bgt.n	badc0 <_ZN11USARTSerial5writeEh+0x8>
}
   badda:	4628      	mov	r0, r5
   baddc:	b003      	add	sp, #12
   badde:	bd30      	pop	{r4, r5, pc}

000bade0 <_ZN11USARTSerialD0Ev>:
   bade0:	b510      	push	{r4, lr}
   bade2:	2114      	movs	r1, #20
   bade4:	4604      	mov	r4, r0
   bade6:	f7f9 f95c 	bl	b40a2 <_ZdlPvj>
   badea:	4620      	mov	r0, r4
   badec:	bd10      	pop	{r4, pc}
	...

000badf0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   badf0:	b510      	push	{r4, lr}
   badf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   badf6:	4604      	mov	r4, r0
   badf8:	4608      	mov	r0, r1
   badfa:	4611      	mov	r1, r2
   badfc:	2200      	movs	r2, #0
   badfe:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bae02:	4b04      	ldr	r3, [pc, #16]	; (bae14 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bae04:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bae06:	2301      	movs	r3, #1
  _serial = serial;
   bae08:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bae0a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bae0c:	f7fd fdac 	bl	b8968 <hal_usart_init_ex>
}
   bae10:	4620      	mov	r0, r4
   bae12:	bd10      	pop	{r4, pc}
   bae14:	000bec30 	.word	0x000bec30

000bae18 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bae18:	7441      	strb	r1, [r0, #17]
}
   bae1a:	4770      	bx	lr

000bae1c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bae1c:	4770      	bx	lr

000bae1e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bae1e:	4770      	bx	lr

000bae20 <_ZN9USBSerial4readEv>:
{
   bae20:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bae22:	2100      	movs	r1, #0
   bae24:	7c00      	ldrb	r0, [r0, #16]
   bae26:	f7fd fdc7 	bl	b89b8 <HAL_USB_USART_Receive_Data>
}
   bae2a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bae2e:	bd08      	pop	{r3, pc}

000bae30 <_ZN9USBSerial4peekEv>:
{
   bae30:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bae32:	2101      	movs	r1, #1
   bae34:	7c00      	ldrb	r0, [r0, #16]
   bae36:	f7fd fdbf 	bl	b89b8 <HAL_USB_USART_Receive_Data>
}
   bae3a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bae3e:	bd08      	pop	{r3, pc}

000bae40 <_ZN9USBSerial17availableForWriteEv>:
{
   bae40:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bae42:	7c00      	ldrb	r0, [r0, #16]
   bae44:	f7fd fdb0 	bl	b89a8 <HAL_USB_USART_Available_Data_For_Write>
}
   bae48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bae4c:	bd08      	pop	{r3, pc}

000bae4e <_ZN9USBSerial9availableEv>:
{
   bae4e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bae50:	7c00      	ldrb	r0, [r0, #16]
   bae52:	f7fd fda1 	bl	b8998 <HAL_USB_USART_Available_Data>
}
   bae56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bae5a:	bd08      	pop	{r3, pc}

000bae5c <_ZN9USBSerial5writeEh>:
{
   bae5c:	b513      	push	{r0, r1, r4, lr}
   bae5e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bae60:	7c00      	ldrb	r0, [r0, #16]
{
   bae62:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bae64:	f7fd fda0 	bl	b89a8 <HAL_USB_USART_Available_Data_For_Write>
   bae68:	2800      	cmp	r0, #0
   bae6a:	9901      	ldr	r1, [sp, #4]
   bae6c:	dc01      	bgt.n	bae72 <_ZN9USBSerial5writeEh+0x16>
   bae6e:	7c60      	ldrb	r0, [r4, #17]
   bae70:	b120      	cbz	r0, bae7c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bae72:	7c20      	ldrb	r0, [r4, #16]
   bae74:	f7fd fda8 	bl	b89c8 <HAL_USB_USART_Send_Data>
   bae78:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bae7c:	b002      	add	sp, #8
   bae7e:	bd10      	pop	{r4, pc}

000bae80 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bae80:	7c00      	ldrb	r0, [r0, #16]
   bae82:	f7fd bda9 	b.w	b89d8 <HAL_USB_USART_Flush_Data>

000bae86 <_ZN9USBSerialD0Ev>:
   bae86:	b510      	push	{r4, lr}
   bae88:	2114      	movs	r1, #20
   bae8a:	4604      	mov	r4, r0
   bae8c:	f7f9 f909 	bl	b40a2 <_ZdlPvj>
   bae90:	4620      	mov	r0, r4
   bae92:	bd10      	pop	{r4, pc}

000bae94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bae94:	b510      	push	{r4, lr}
   bae96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bae9a:	4604      	mov	r4, r0
   bae9c:	4608      	mov	r0, r1
   bae9e:	2100      	movs	r1, #0
   baea0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   baea4:	4b04      	ldr	r3, [pc, #16]	; (baeb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   baea6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   baea8:	2301      	movs	r3, #1
  _serial = serial;
   baeaa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   baeac:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   baeae:	4611      	mov	r1, r2
   baeb0:	f7fd fd62 	bl	b8978 <HAL_USB_USART_Init>
}
   baeb4:	4620      	mov	r0, r4
   baeb6:	bd10      	pop	{r4, pc}
   baeb8:	000bec60 	.word	0x000bec60

000baebc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   baebc:	7c00      	ldrb	r0, [r0, #16]
   baebe:	2200      	movs	r2, #0
   baec0:	f7fd bd62 	b.w	b8988 <HAL_USB_USART_Begin>

000baec4 <_Z19acquireSerialBufferv>:
{
   baec4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   baec6:	2214      	movs	r2, #20
{
   baec8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   baeca:	2100      	movs	r1, #0
   baecc:	f001 f9c6 	bl	bc25c <memset>
}
   baed0:	4620      	mov	r0, r4
   baed2:	bd10      	pop	{r4, pc}

000baed4 <_Z16_fetch_usbserialv>:
{
   baed4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   baed6:	4c0f      	ldr	r4, [pc, #60]	; (baf14 <_Z16_fetch_usbserialv+0x40>)
{
   baed8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   baeda:	a803      	add	r0, sp, #12
   baedc:	f7ff fff2 	bl	baec4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   baee0:	7821      	ldrb	r1, [r4, #0]
   baee2:	f3bf 8f5b 	dmb	ish
   baee6:	f011 0101 	ands.w	r1, r1, #1
   baeea:	d10f      	bne.n	baf0c <_Z16_fetch_usbserialv+0x38>
   baeec:	4620      	mov	r0, r4
   baeee:	9101      	str	r1, [sp, #4]
   baef0:	f7f9 f8d9 	bl	b40a6 <__cxa_guard_acquire>
   baef4:	9901      	ldr	r1, [sp, #4]
   baef6:	b148      	cbz	r0, baf0c <_Z16_fetch_usbserialv+0x38>
   baef8:	aa03      	add	r2, sp, #12
   baefa:	4807      	ldr	r0, [pc, #28]	; (baf18 <_Z16_fetch_usbserialv+0x44>)
   baefc:	f7ff ffca 	bl	bae94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   baf00:	4620      	mov	r0, r4
   baf02:	f7f9 f8d5 	bl	b40b0 <__cxa_guard_release>
   baf06:	4805      	ldr	r0, [pc, #20]	; (baf1c <_Z16_fetch_usbserialv+0x48>)
   baf08:	f001 f966 	bl	bc1d8 <atexit>
	return _usbserial;
}
   baf0c:	4802      	ldr	r0, [pc, #8]	; (baf18 <_Z16_fetch_usbserialv+0x44>)
   baf0e:	b008      	add	sp, #32
   baf10:	bd10      	pop	{r4, pc}
   baf12:	bf00      	nop
   baf14:	2003e700 	.word	0x2003e700
   baf18:	2003e704 	.word	0x2003e704
   baf1c:	000bae1d 	.word	0x000bae1d

000baf20 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   baf20:	2200      	movs	r2, #0
   baf22:	6840      	ldr	r0, [r0, #4]
   baf24:	4611      	mov	r1, r2
   baf26:	f7fd bdb3 	b.w	b8a90 <network_ready>

000baf2a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   baf2a:	2200      	movs	r2, #0
   baf2c:	6840      	ldr	r0, [r0, #4]
   baf2e:	4611      	mov	r1, r2
   baf30:	f7fd bdce 	b.w	b8ad0 <network_listening>

000baf34 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   baf34:	2200      	movs	r2, #0
   baf36:	6840      	ldr	r0, [r0, #4]
   baf38:	4611      	mov	r1, r2
   baf3a:	f7fd bde9 	b.w	b8b10 <network_get_listen_timeout>

000baf3e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   baf3e:	6840      	ldr	r0, [r0, #4]
   baf40:	2200      	movs	r2, #0
   baf42:	f7fd bddd 	b.w	b8b00 <network_set_listen_timeout>

000baf46 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   baf46:	6840      	ldr	r0, [r0, #4]
   baf48:	2200      	movs	r2, #0
   baf4a:	f081 0101 	eor.w	r1, r1, #1
   baf4e:	f7fd bdb7 	b.w	b8ac0 <network_listen>

000baf52 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   baf52:	2300      	movs	r3, #0
   baf54:	6840      	ldr	r0, [r0, #4]
   baf56:	461a      	mov	r2, r3
   baf58:	4619      	mov	r1, r3
   baf5a:	f7fd bda9 	b.w	b8ab0 <network_off>

000baf5e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   baf5e:	2300      	movs	r3, #0
   baf60:	6840      	ldr	r0, [r0, #4]
   baf62:	461a      	mov	r2, r3
   baf64:	4619      	mov	r1, r3
   baf66:	f7fd bd9b 	b.w	b8aa0 <network_on>

000baf6a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   baf6a:	2200      	movs	r2, #0
   baf6c:	6840      	ldr	r0, [r0, #4]
   baf6e:	4611      	mov	r1, r2
   baf70:	f7fd bd7e 	b.w	b8a70 <network_connecting>

000baf74 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   baf74:	6840      	ldr	r0, [r0, #4]
   baf76:	2200      	movs	r2, #0
   baf78:	2102      	movs	r1, #2
   baf7a:	f7fd bd81 	b.w	b8a80 <network_disconnect>

000baf7e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   baf7e:	2300      	movs	r3, #0
   baf80:	6840      	ldr	r0, [r0, #4]
   baf82:	461a      	mov	r2, r3
   baf84:	f7fd bd6c 	b.w	b8a60 <network_connect>

000baf88 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   baf88:	4b02      	ldr	r3, [pc, #8]	; (baf94 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   baf8a:	2204      	movs	r2, #4
   baf8c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   baf8e:	4a02      	ldr	r2, [pc, #8]	; (baf98 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   baf90:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   baf92:	4770      	bx	lr
   baf94:	2003e718 	.word	0x2003e718
   baf98:	000bec90 	.word	0x000bec90

000baf9c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   baf9c:	b510      	push	{r4, lr}
   baf9e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   bafa0:	f001 f9a4 	bl	bc2ec <strlen>
   bafa4:	3801      	subs	r0, #1
   bafa6:	1823      	adds	r3, r4, r0
   bafa8:	4620      	mov	r0, r4
	while(i<j){
   bafaa:	4283      	cmp	r3, r0
   bafac:	d906      	bls.n	bafbc <_Z11str_reversePc+0x20>
		c = *i;
   bafae:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   bafb0:	7819      	ldrb	r1, [r3, #0]
   bafb2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   bafb6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   bafba:	e7f6      	b.n	bafaa <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   bafbc:	bd10      	pop	{r4, pc}

000bafbe <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   bafbe:	b570      	push	{r4, r5, r6, lr}
   bafc0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   bafc2:	1e91      	subs	r1, r2, #2
   bafc4:	2922      	cmp	r1, #34	; 0x22
   bafc6:	d81d      	bhi.n	bb004 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   bafc8:	4625      	mov	r5, r4

	div_t result;
	while(a){
   bafca:	b930      	cbnz	r0, bafda <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   bafcc:	4423      	add	r3, r4
            *ptr++ = '0';
   bafce:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   bafd0:	429d      	cmp	r5, r3
   bafd2:	d210      	bcs.n	baff6 <ultoa+0x38>
            *ptr++ = '0';
   bafd4:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   bafd8:	e7fa      	b.n	bafd0 <ultoa+0x12>
            result.quot = a/radix;
   bafda:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   bafde:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   bafe2:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   bafe4:	2809      	cmp	r0, #9
                *ptr += '0';
   bafe6:	bf94      	ite	ls
   bafe8:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   bafea:	3157      	addhi	r1, #87	; 0x57
   bafec:	b2c9      	uxtb	r1, r1
   bafee:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   baff2:	4630      	mov	r0, r6
	while(a){
   baff4:	e7e9      	b.n	bafca <ultoa+0xc>

	*ptr = '\0';
   baff6:	2300      	movs	r3, #0
	str_reverse(buffer);
   baff8:	4620      	mov	r0, r4
	*ptr = '\0';
   baffa:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   baffc:	f7ff ffce 	bl	baf9c <_Z11str_reversePc>
	return buffer;
   bb000:	4620      	mov	r0, r4
}
   bb002:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   bb004:	2000      	movs	r0, #0
   bb006:	e7fc      	b.n	bb002 <ultoa+0x44>

000bb008 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   bb008:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   bb00a:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   bb00c:	460c      	mov	r4, r1
   bb00e:	4615      	mov	r5, r2
	if(a<0){
   bb010:	da0e      	bge.n	bb030 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   bb012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   bb016:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   bb01a:	bf14      	ite	ne
   bb01c:	4258      	negne	r0, r3
   bb01e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   bb020:	2301      	movs	r3, #1
		*buffer = '-';
   bb022:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   bb024:	462a      	mov	r2, r5
   bb026:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   bb028:	f7ff ffc9 	bl	bafbe <ultoa>
	}
	return buffer;
}
   bb02c:	4620      	mov	r0, r4
   bb02e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   bb030:	2301      	movs	r3, #1
   bb032:	e7f9      	b.n	bb028 <itoa+0x20>

000bb034 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bb034:	4b01      	ldr	r3, [pc, #4]	; (bb03c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bb036:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bb038:	4770      	bx	lr
   bb03a:	bf00      	nop
   bb03c:	200350c8 	.word	0x200350c8

000bb040 <serialEventRun>:
{
   bb040:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bb042:	4b0b      	ldr	r3, [pc, #44]	; (bb070 <serialEventRun+0x30>)
   bb044:	b143      	cbz	r3, bb058 <serialEventRun+0x18>
   bb046:	f7ff ff45 	bl	baed4 <_Z16_fetch_usbserialv>
   bb04a:	6803      	ldr	r3, [r0, #0]
   bb04c:	691b      	ldr	r3, [r3, #16]
   bb04e:	4798      	blx	r3
   bb050:	2800      	cmp	r0, #0
   bb052:	dd01      	ble.n	bb058 <serialEventRun+0x18>
        serialEvent();
   bb054:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bb058:	4b06      	ldr	r3, [pc, #24]	; (bb074 <serialEventRun+0x34>)
   bb05a:	b143      	cbz	r3, bb06e <serialEventRun+0x2e>
   bb05c:	f000 f8c8 	bl	bb1f0 <_Z22__fetch_global_Serial1v>
   bb060:	6803      	ldr	r3, [r0, #0]
   bb062:	691b      	ldr	r3, [r3, #16]
   bb064:	4798      	blx	r3
   bb066:	2800      	cmp	r0, #0
   bb068:	dd01      	ble.n	bb06e <serialEventRun+0x2e>
        serialEvent1();
   bb06a:	f3af 8000 	nop.w
}
   bb06e:	bd08      	pop	{r3, pc}
	...

000bb078 <_post_loop>:
{
   bb078:	b508      	push	{r3, lr}
	serialEventRun();
   bb07a:	f7ff ffe1 	bl	bb040 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bb07e:	f7fd fb8b 	bl	b8798 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bb082:	4b01      	ldr	r3, [pc, #4]	; (bb088 <_post_loop+0x10>)
   bb084:	6018      	str	r0, [r3, #0]
}
   bb086:	bd08      	pop	{r3, pc}
   bb088:	2003e728 	.word	0x2003e728

000bb08c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb08c:	4805      	ldr	r0, [pc, #20]	; (bb0a4 <_Z33system_initialize_user_backup_ramv+0x18>)
   bb08e:	4a06      	ldr	r2, [pc, #24]	; (bb0a8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bb090:	4906      	ldr	r1, [pc, #24]	; (bb0ac <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bb092:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb094:	1a12      	subs	r2, r2, r0
   bb096:	f001 f8b9 	bl	bc20c <memcpy>
    __backup_sram_signature = signature;
   bb09a:	4b05      	ldr	r3, [pc, #20]	; (bb0b0 <_Z33system_initialize_user_backup_ramv+0x24>)
   bb09c:	4a05      	ldr	r2, [pc, #20]	; (bb0b4 <_Z33system_initialize_user_backup_ramv+0x28>)
   bb09e:	601a      	str	r2, [r3, #0]
}
   bb0a0:	bd08      	pop	{r3, pc}
   bb0a2:	bf00      	nop
   bb0a4:	2003f400 	.word	0x2003f400
   bb0a8:	2003f404 	.word	0x2003f404
   bb0ac:	000bf1d4 	.word	0x000bf1d4
   bb0b0:	2003f400 	.word	0x2003f400
   bb0b4:	9a271c1e 	.word	0x9a271c1e

000bb0b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bb0b8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb0ba:	2300      	movs	r3, #0
   bb0bc:	9300      	str	r3, [sp, #0]
   bb0be:	461a      	mov	r2, r3
   bb0c0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb0c4:	f7fd fcba 	bl	b8a3c <system_ctrl_set_result>
}
   bb0c8:	b003      	add	sp, #12
   bb0ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb0d0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bb0d0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bb0d2:	8843      	ldrh	r3, [r0, #2]
   bb0d4:	2b0a      	cmp	r3, #10
   bb0d6:	d008      	beq.n	bb0ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bb0d8:	2b50      	cmp	r3, #80	; 0x50
   bb0da:	d10b      	bne.n	bb0f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bb0dc:	4b09      	ldr	r3, [pc, #36]	; (bb104 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bb0de:	681b      	ldr	r3, [r3, #0]
   bb0e0:	b14b      	cbz	r3, bb0f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bb0e2:	b003      	add	sp, #12
   bb0e4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bb0e8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bb0ea:	f7ff ffe5 	bl	bb0b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bb0ee:	b003      	add	sp, #12
   bb0f0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb0f4:	2300      	movs	r3, #0
   bb0f6:	9300      	str	r3, [sp, #0]
   bb0f8:	461a      	mov	r2, r3
   bb0fa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb0fe:	f7fd fc9d 	bl	b8a3c <system_ctrl_set_result>
}
   bb102:	e7f4      	b.n	bb0ee <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bb104:	2003e724 	.word	0x2003e724

000bb108 <module_user_init_hook>:
{
   bb108:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bb10a:	4812      	ldr	r0, [pc, #72]	; (bb154 <module_user_init_hook+0x4c>)
   bb10c:	2100      	movs	r1, #0
   bb10e:	f7fd fd5f 	bl	b8bd0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bb112:	4b11      	ldr	r3, [pc, #68]	; (bb158 <module_user_init_hook+0x50>)
   bb114:	681a      	ldr	r2, [r3, #0]
   bb116:	4b11      	ldr	r3, [pc, #68]	; (bb15c <module_user_init_hook+0x54>)
   bb118:	429a      	cmp	r2, r3
   bb11a:	4b11      	ldr	r3, [pc, #68]	; (bb160 <module_user_init_hook+0x58>)
   bb11c:	bf0c      	ite	eq
   bb11e:	2201      	moveq	r2, #1
   bb120:	2200      	movne	r2, #0
   bb122:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bb124:	d001      	beq.n	bb12a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bb126:	f7ff ffb1 	bl	bb08c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bb12a:	f7fd fb25 	bl	b8778 <HAL_RNG_GetRandomNumber>
   bb12e:	4604      	mov	r4, r0
    srand(seed);
   bb130:	f001 f89c 	bl	bc26c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bb134:	4b0b      	ldr	r3, [pc, #44]	; (bb164 <module_user_init_hook+0x5c>)
   bb136:	b113      	cbz	r3, bb13e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bb138:	4620      	mov	r0, r4
   bb13a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bb13e:	2100      	movs	r1, #0
   bb140:	4808      	ldr	r0, [pc, #32]	; (bb164 <module_user_init_hook+0x5c>)
   bb142:	f7fd fc85 	bl	b8a50 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bb146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bb14a:	4807      	ldr	r0, [pc, #28]	; (bb168 <module_user_init_hook+0x60>)
   bb14c:	2100      	movs	r1, #0
   bb14e:	f7fd bc6b 	b.w	b8a28 <system_ctrl_set_app_request_handler>
   bb152:	bf00      	nop
   bb154:	000bb035 	.word	0x000bb035
   bb158:	2003f400 	.word	0x2003f400
   bb15c:	9a271c1e 	.word	0x9a271c1e
   bb160:	2003e720 	.word	0x2003e720
   bb164:	00000000 	.word	0x00000000
   bb168:	000bb0d1 	.word	0x000bb0d1

000bb16c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb16c:	4770      	bx	lr
	...

000bb170 <_Z19__fetch_global_Wirev>:
{
   bb170:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb172:	4d0e      	ldr	r5, [pc, #56]	; (bb1ac <_Z19__fetch_global_Wirev+0x3c>)
   bb174:	7829      	ldrb	r1, [r5, #0]
   bb176:	f3bf 8f5b 	dmb	ish
   bb17a:	f011 0401 	ands.w	r4, r1, #1
{
   bb17e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb180:	d111      	bne.n	bb1a6 <_Z19__fetch_global_Wirev+0x36>
   bb182:	4628      	mov	r0, r5
   bb184:	f7f8 ff8f 	bl	b40a6 <__cxa_guard_acquire>
   bb188:	b168      	cbz	r0, bb1a6 <_Z19__fetch_global_Wirev+0x36>
   bb18a:	a801      	add	r0, sp, #4
   bb18c:	f7f9 fac6 	bl	b471c <_Z17acquireWireBufferv>
   bb190:	aa01      	add	r2, sp, #4
   bb192:	4621      	mov	r1, r4
   bb194:	4806      	ldr	r0, [pc, #24]	; (bb1b0 <_Z19__fetch_global_Wirev+0x40>)
   bb196:	f7fe ff3d 	bl	ba014 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb19a:	4628      	mov	r0, r5
   bb19c:	f7f8 ff88 	bl	b40b0 <__cxa_guard_release>
   bb1a0:	4804      	ldr	r0, [pc, #16]	; (bb1b4 <_Z19__fetch_global_Wirev+0x44>)
   bb1a2:	f001 f819 	bl	bc1d8 <atexit>
	return wire;
}
   bb1a6:	4802      	ldr	r0, [pc, #8]	; (bb1b0 <_Z19__fetch_global_Wirev+0x40>)
   bb1a8:	b007      	add	sp, #28
   bb1aa:	bd30      	pop	{r4, r5, pc}
   bb1ac:	2003e72c 	.word	0x2003e72c
   bb1b0:	2003e730 	.word	0x2003e730
   bb1b4:	000bb16d 	.word	0x000bb16d

000bb1b8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb1b8:	4770      	bx	lr
	...

000bb1bc <_Z20acquireSerial1Bufferv>:
{
   bb1bc:	b538      	push	{r3, r4, r5, lr}
   bb1be:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bb1c0:	2514      	movs	r5, #20
   bb1c2:	462a      	mov	r2, r5
   bb1c4:	2100      	movs	r1, #0
   bb1c6:	f001 f849 	bl	bc25c <memset>
   bb1ca:	8025      	strh	r5, [r4, #0]
   bb1cc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb1ce:	4907      	ldr	r1, [pc, #28]	; (bb1ec <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bb1d0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb1d2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bb1d4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb1d6:	f000 f82f 	bl	bb238 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb1da:	4904      	ldr	r1, [pc, #16]	; (bb1ec <_Z20acquireSerial1Bufferv+0x30>)
    };
   bb1dc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb1de:	4628      	mov	r0, r5
   bb1e0:	f000 f82a 	bl	bb238 <_ZnajRKSt9nothrow_t>
    };
   bb1e4:	60e0      	str	r0, [r4, #12]
}
   bb1e6:	4620      	mov	r0, r4
   bb1e8:	bd38      	pop	{r3, r4, r5, pc}
   bb1ea:	bf00      	nop
   bb1ec:	000becc4 	.word	0x000becc4

000bb1f0 <_Z22__fetch_global_Serial1v>:
{
   bb1f0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb1f2:	4d0e      	ldr	r5, [pc, #56]	; (bb22c <_Z22__fetch_global_Serial1v+0x3c>)
   bb1f4:	7829      	ldrb	r1, [r5, #0]
   bb1f6:	f3bf 8f5b 	dmb	ish
   bb1fa:	f011 0401 	ands.w	r4, r1, #1
{
   bb1fe:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb200:	d111      	bne.n	bb226 <_Z22__fetch_global_Serial1v+0x36>
   bb202:	4628      	mov	r0, r5
   bb204:	f7f8 ff4f 	bl	b40a6 <__cxa_guard_acquire>
   bb208:	b168      	cbz	r0, bb226 <_Z22__fetch_global_Serial1v+0x36>
   bb20a:	a801      	add	r0, sp, #4
   bb20c:	f7ff ffd6 	bl	bb1bc <_Z20acquireSerial1Bufferv>
   bb210:	aa01      	add	r2, sp, #4
   bb212:	4621      	mov	r1, r4
   bb214:	4806      	ldr	r0, [pc, #24]	; (bb230 <_Z22__fetch_global_Serial1v+0x40>)
   bb216:	f7ff fdeb 	bl	badf0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bb21a:	4628      	mov	r0, r5
   bb21c:	f7f8 ff48 	bl	b40b0 <__cxa_guard_release>
   bb220:	4804      	ldr	r0, [pc, #16]	; (bb234 <_Z22__fetch_global_Serial1v+0x44>)
   bb222:	f000 ffd9 	bl	bc1d8 <atexit>
    return serial1;
}
   bb226:	4802      	ldr	r0, [pc, #8]	; (bb230 <_Z22__fetch_global_Serial1v+0x40>)
   bb228:	b007      	add	sp, #28
   bb22a:	bd30      	pop	{r4, r5, pc}
   bb22c:	2003e744 	.word	0x2003e744
   bb230:	2003e748 	.word	0x2003e748
   bb234:	000bb1b9 	.word	0x000bb1b9

000bb238 <_ZnajRKSt9nothrow_t>:
   bb238:	f7f8 bf2f 	b.w	b409a <_Znaj>

000bb23c <_ZSt17__throw_bad_allocv>:
   bb23c:	b508      	push	{r3, lr}
   bb23e:	f7fd fca7 	bl	b8b90 <abort>

000bb242 <_ZSt19__throw_logic_errorPKc>:
   bb242:	b508      	push	{r3, lr}
   bb244:	f7fd fca4 	bl	b8b90 <abort>

000bb248 <_ZSt20__throw_length_errorPKc>:
   bb248:	b508      	push	{r3, lr}
   bb24a:	f7fd fca1 	bl	b8b90 <abort>

000bb24e <_ZSt25__throw_bad_function_callv>:
   bb24e:	b508      	push	{r3, lr}
   bb250:	f7fd fc9e 	bl	b8b90 <abort>

000bb254 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bb254:	4901      	ldr	r1, [pc, #4]	; (bb25c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bb256:	f000 b963 	b.w	bb520 <_ZNKSt9type_infoeqERKS_>
   bb25a:	bf00      	nop
   bb25c:	000bece0 	.word	0x000bece0

000bb260 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   bb260:	b10a      	cbz	r2, bb266 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   bb262:	f000 bfd3 	b.w	bc20c <memcpy>
   bb266:	4770      	bx	lr

000bb268 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   bb268:	b508      	push	{r3, lr}
   bb26a:	680b      	ldr	r3, [r1, #0]
   bb26c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   bb270:	d302      	bcc.n	bb278 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   bb272:	480d      	ldr	r0, [pc, #52]	; (bb2a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   bb274:	f7ff ffe8 	bl	bb248 <_ZSt20__throw_length_errorPKc>
   bb278:	4293      	cmp	r3, r2
   bb27a:	d90b      	bls.n	bb294 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   bb27c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   bb280:	ea4f 0042 	mov.w	r0, r2, lsl #1
   bb284:	d206      	bcs.n	bb294 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   bb286:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   bb28a:	bf2a      	itet	cs
   bb28c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   bb290:	6008      	strcc	r0, [r1, #0]
   bb292:	600b      	strcs	r3, [r1, #0]
   bb294:	6808      	ldr	r0, [r1, #0]
   bb296:	3001      	adds	r0, #1
   bb298:	d501      	bpl.n	bb29e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   bb29a:	f7ff ffcf 	bl	bb23c <_ZSt17__throw_bad_allocv>
   bb29e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bb2a2:	f7f8 bef8 	b.w	b4096 <_Znwj>
   bb2a6:	bf00      	nop
   bb2a8:	000bece8 	.word	0x000bece8

000bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   bb2ac:	f850 3b08 	ldr.w	r3, [r0], #8
   bb2b0:	4283      	cmp	r3, r0
   bb2b2:	d002      	beq.n	bb2ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   bb2b4:	4618      	mov	r0, r3
   bb2b6:	f7f8 bef2 	b.w	b409e <_ZdlPv>
   bb2ba:	4770      	bx	lr

000bb2bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   bb2bc:	2a01      	cmp	r2, #1
   bb2be:	b410      	push	{r4}
   bb2c0:	d104      	bne.n	bb2cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   bb2c2:	780a      	ldrb	r2, [r1, #0]
   bb2c4:	f85d 4b04 	ldr.w	r4, [sp], #4
   bb2c8:	7002      	strb	r2, [r0, #0]
   bb2ca:	4770      	bx	lr
   bb2cc:	f85d 4b04 	ldr.w	r4, [sp], #4
   bb2d0:	f7ff bfc6 	b.w	bb260 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000bb2d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
   bb2d4:	b508      	push	{r3, lr}
   bb2d6:	1a52      	subs	r2, r2, r1
   bb2d8:	f7ff fff0 	bl	bb2bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   bb2dc:	bd08      	pop	{r3, pc}

000bb2de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   bb2de:	b508      	push	{r3, lr}
   bb2e0:	1a52      	subs	r2, r2, r1
   bb2e2:	f7ff ffeb 	bl	bb2bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   bb2e6:	bd08      	pop	{r3, pc}

000bb2e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   bb2e8:	4288      	cmp	r0, r1
   bb2ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb2ec:	4604      	mov	r4, r0
   bb2ee:	460e      	mov	r6, r1
   bb2f0:	d01e      	beq.n	bb330 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   bb2f2:	4603      	mov	r3, r0
   bb2f4:	684d      	ldr	r5, [r1, #4]
   bb2f6:	f853 2b08 	ldr.w	r2, [r3], #8
   bb2fa:	429a      	cmp	r2, r3
   bb2fc:	bf14      	ite	ne
   bb2fe:	6882      	ldrne	r2, [r0, #8]
   bb300:	220f      	moveq	r2, #15
   bb302:	42aa      	cmp	r2, r5
   bb304:	d20a      	bcs.n	bb31c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   bb306:	a901      	add	r1, sp, #4
   bb308:	9501      	str	r5, [sp, #4]
   bb30a:	f7ff ffad 	bl	bb268 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   bb30e:	4607      	mov	r7, r0
   bb310:	4620      	mov	r0, r4
   bb312:	f7ff ffcb 	bl	bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   bb316:	9b01      	ldr	r3, [sp, #4]
   bb318:	6027      	str	r7, [r4, #0]
   bb31a:	60a3      	str	r3, [r4, #8]
   bb31c:	b125      	cbz	r5, bb328 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   bb31e:	6831      	ldr	r1, [r6, #0]
   bb320:	6820      	ldr	r0, [r4, #0]
   bb322:	462a      	mov	r2, r5
   bb324:	f7ff ffca 	bl	bb2bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   bb328:	6823      	ldr	r3, [r4, #0]
   bb32a:	6065      	str	r5, [r4, #4]
   bb32c:	2200      	movs	r2, #0
   bb32e:	555a      	strb	r2, [r3, r5]
   bb330:	b003      	add	sp, #12
   bb332:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb334 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bb334:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bb336:	2400      	movs	r4, #0
   bb338:	2310      	movs	r3, #16
   bb33a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bb33e:	6803      	ldr	r3, [r0, #0]
   bb340:	4615      	mov	r5, r2
   bb342:	699e      	ldr	r6, [r3, #24]
   bb344:	6812      	ldr	r2, [r2, #0]
   bb346:	466b      	mov	r3, sp
   bb348:	e9cd 4400 	strd	r4, r4, [sp]
   bb34c:	47b0      	blx	r6
   bb34e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bb352:	f003 0306 	and.w	r3, r3, #6
   bb356:	2b06      	cmp	r3, #6
   bb358:	bf03      	ittte	eq
   bb35a:	9b00      	ldreq	r3, [sp, #0]
   bb35c:	602b      	streq	r3, [r5, #0]
   bb35e:	2001      	moveq	r0, #1
   bb360:	4620      	movne	r0, r4
   bb362:	b004      	add	sp, #16
   bb364:	bd70      	pop	{r4, r5, r6, pc}

000bb366 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bb366:	9800      	ldr	r0, [sp, #0]
   bb368:	4290      	cmp	r0, r2
   bb36a:	bf14      	ite	ne
   bb36c:	2001      	movne	r0, #1
   bb36e:	2006      	moveq	r0, #6
   bb370:	4770      	bx	lr
	...

000bb374 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bb374:	b510      	push	{r4, lr}
   bb376:	4b03      	ldr	r3, [pc, #12]	; (bb384 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bb378:	6003      	str	r3, [r0, #0]
   bb37a:	4604      	mov	r4, r0
   bb37c:	f000 f8cd 	bl	bb51a <_ZNSt9type_infoD1Ev>
   bb380:	4620      	mov	r0, r4
   bb382:	bd10      	pop	{r4, pc}
   bb384:	000bed38 	.word	0x000bed38

000bb388 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bb388:	b510      	push	{r4, lr}
   bb38a:	4604      	mov	r4, r0
   bb38c:	f7ff fff2 	bl	bb374 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb390:	4620      	mov	r0, r4
   bb392:	2108      	movs	r1, #8
   bb394:	f7f8 fe85 	bl	b40a2 <_ZdlPvj>
   bb398:	4620      	mov	r0, r4
   bb39a:	bd10      	pop	{r4, pc}

000bb39c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bb39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb3a0:	461f      	mov	r7, r3
   bb3a2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bb3a6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bb3aa:	4598      	cmp	r8, r3
   bb3ac:	4606      	mov	r6, r0
   bb3ae:	4615      	mov	r5, r2
   bb3b0:	d107      	bne.n	bb3c2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb3b2:	9907      	ldr	r1, [sp, #28]
   bb3b4:	f000 f8b4 	bl	bb520 <_ZNKSt9type_infoeqERKS_>
   bb3b8:	b118      	cbz	r0, bb3c2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb3ba:	7165      	strb	r5, [r4, #5]
   bb3bc:	2000      	movs	r0, #0
   bb3be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb3c2:	4639      	mov	r1, r7
   bb3c4:	4630      	mov	r0, r6
   bb3c6:	f000 f8ab 	bl	bb520 <_ZNKSt9type_infoeqERKS_>
   bb3ca:	2800      	cmp	r0, #0
   bb3cc:	d0f6      	beq.n	bb3bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bb3ce:	2301      	movs	r3, #1
   bb3d0:	f8c4 8000 	str.w	r8, [r4]
   bb3d4:	7125      	strb	r5, [r4, #4]
   bb3d6:	71a3      	strb	r3, [r4, #6]
   bb3d8:	e7f0      	b.n	bb3bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bb3da <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bb3da:	b538      	push	{r3, r4, r5, lr}
   bb3dc:	4615      	mov	r5, r2
   bb3de:	461c      	mov	r4, r3
   bb3e0:	f000 f89e 	bl	bb520 <_ZNKSt9type_infoeqERKS_>
   bb3e4:	b120      	cbz	r0, bb3f0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bb3e6:	2308      	movs	r3, #8
   bb3e8:	60e3      	str	r3, [r4, #12]
   bb3ea:	2306      	movs	r3, #6
   bb3ec:	6025      	str	r5, [r4, #0]
   bb3ee:	7123      	strb	r3, [r4, #4]
   bb3f0:	bd38      	pop	{r3, r4, r5, pc}

000bb3f2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bb3f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb3f4:	4605      	mov	r5, r0
   bb3f6:	460c      	mov	r4, r1
   bb3f8:	9201      	str	r2, [sp, #4]
   bb3fa:	461e      	mov	r6, r3
   bb3fc:	f000 f890 	bl	bb520 <_ZNKSt9type_infoeqERKS_>
   bb400:	b950      	cbnz	r0, bb418 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb402:	2e03      	cmp	r6, #3
   bb404:	d808      	bhi.n	bb418 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb406:	6823      	ldr	r3, [r4, #0]
   bb408:	9a01      	ldr	r2, [sp, #4]
   bb40a:	695b      	ldr	r3, [r3, #20]
   bb40c:	4629      	mov	r1, r5
   bb40e:	4620      	mov	r0, r4
   bb410:	b002      	add	sp, #8
   bb412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb416:	4718      	bx	r3
   bb418:	b002      	add	sp, #8
   bb41a:	bd70      	pop	{r4, r5, r6, pc}

000bb41c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bb41c:	b510      	push	{r4, lr}
   bb41e:	4b03      	ldr	r3, [pc, #12]	; (bb42c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bb420:	6003      	str	r3, [r0, #0]
   bb422:	4604      	mov	r4, r0
   bb424:	f7ff ffa6 	bl	bb374 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb428:	4620      	mov	r0, r4
   bb42a:	bd10      	pop	{r4, pc}
   bb42c:	000bed98 	.word	0x000bed98

000bb430 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bb430:	b510      	push	{r4, lr}
   bb432:	4604      	mov	r4, r0
   bb434:	f7ff fff2 	bl	bb41c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bb438:	4620      	mov	r0, r4
   bb43a:	210c      	movs	r1, #12
   bb43c:	f7f8 fe31 	bl	b40a2 <_ZdlPvj>
   bb440:	4620      	mov	r0, r4
   bb442:	bd10      	pop	{r4, pc}

000bb444 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bb444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb446:	9f08      	ldr	r7, [sp, #32]
   bb448:	4297      	cmp	r7, r2
   bb44a:	4605      	mov	r5, r0
   bb44c:	460e      	mov	r6, r1
   bb44e:	4614      	mov	r4, r2
   bb450:	d00a      	beq.n	bb468 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bb452:	68a8      	ldr	r0, [r5, #8]
   bb454:	6802      	ldr	r2, [r0, #0]
   bb456:	9708      	str	r7, [sp, #32]
   bb458:	6a15      	ldr	r5, [r2, #32]
   bb45a:	4631      	mov	r1, r6
   bb45c:	4622      	mov	r2, r4
   bb45e:	46ac      	mov	ip, r5
   bb460:	b003      	add	sp, #12
   bb462:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bb466:	4760      	bx	ip
   bb468:	4619      	mov	r1, r3
   bb46a:	9301      	str	r3, [sp, #4]
   bb46c:	f000 f858 	bl	bb520 <_ZNKSt9type_infoeqERKS_>
   bb470:	9b01      	ldr	r3, [sp, #4]
   bb472:	2800      	cmp	r0, #0
   bb474:	d0ed      	beq.n	bb452 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bb476:	2006      	movs	r0, #6
   bb478:	b003      	add	sp, #12
   bb47a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb47c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bb47c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb480:	460d      	mov	r5, r1
   bb482:	4619      	mov	r1, r3
   bb484:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bb488:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bb48c:	4681      	mov	r9, r0
   bb48e:	4617      	mov	r7, r2
   bb490:	4698      	mov	r8, r3
   bb492:	f000 f845 	bl	bb520 <_ZNKSt9type_infoeqERKS_>
   bb496:	b190      	cbz	r0, bb4be <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bb498:	2d00      	cmp	r5, #0
   bb49a:	6034      	str	r4, [r6, #0]
   bb49c:	7137      	strb	r7, [r6, #4]
   bb49e:	db09      	blt.n	bb4b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bb4a0:	1961      	adds	r1, r4, r5
   bb4a2:	458a      	cmp	sl, r1
   bb4a4:	bf0c      	ite	eq
   bb4a6:	2106      	moveq	r1, #6
   bb4a8:	2101      	movne	r1, #1
   bb4aa:	71b1      	strb	r1, [r6, #6]
   bb4ac:	2000      	movs	r0, #0
   bb4ae:	b001      	add	sp, #4
   bb4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb4b4:	3502      	adds	r5, #2
   bb4b6:	d1f9      	bne.n	bb4ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb4b8:	2301      	movs	r3, #1
   bb4ba:	71b3      	strb	r3, [r6, #6]
   bb4bc:	e7f6      	b.n	bb4ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb4be:	4554      	cmp	r4, sl
   bb4c0:	d106      	bne.n	bb4d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb4c2:	4659      	mov	r1, fp
   bb4c4:	4648      	mov	r0, r9
   bb4c6:	f000 f82b 	bl	bb520 <_ZNKSt9type_infoeqERKS_>
   bb4ca:	b108      	cbz	r0, bb4d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb4cc:	7177      	strb	r7, [r6, #5]
   bb4ce:	e7ed      	b.n	bb4ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb4d0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bb4d4:	6803      	ldr	r3, [r0, #0]
   bb4d6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bb4da:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bb4de:	69dc      	ldr	r4, [r3, #28]
   bb4e0:	463a      	mov	r2, r7
   bb4e2:	4643      	mov	r3, r8
   bb4e4:	4629      	mov	r1, r5
   bb4e6:	46a4      	mov	ip, r4
   bb4e8:	b001      	add	sp, #4
   bb4ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb4ee:	4760      	bx	ip

000bb4f0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bb4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb4f4:	4607      	mov	r7, r0
   bb4f6:	460c      	mov	r4, r1
   bb4f8:	4615      	mov	r5, r2
   bb4fa:	461e      	mov	r6, r3
   bb4fc:	f7ff ff6d 	bl	bb3da <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bb500:	b948      	cbnz	r0, bb516 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bb502:	68b8      	ldr	r0, [r7, #8]
   bb504:	6803      	ldr	r3, [r0, #0]
   bb506:	699f      	ldr	r7, [r3, #24]
   bb508:	462a      	mov	r2, r5
   bb50a:	4633      	mov	r3, r6
   bb50c:	4621      	mov	r1, r4
   bb50e:	46bc      	mov	ip, r7
   bb510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bb514:	4760      	bx	ip
   bb516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb51a <_ZNSt9type_infoD1Ev>:
   bb51a:	4770      	bx	lr

000bb51c <_ZNKSt9type_info14__is_pointer_pEv>:
   bb51c:	2000      	movs	r0, #0
   bb51e:	4770      	bx	lr

000bb520 <_ZNKSt9type_infoeqERKS_>:
   bb520:	4281      	cmp	r1, r0
   bb522:	b508      	push	{r3, lr}
   bb524:	d00e      	beq.n	bb544 <_ZNKSt9type_infoeqERKS_+0x24>
   bb526:	6840      	ldr	r0, [r0, #4]
   bb528:	7803      	ldrb	r3, [r0, #0]
   bb52a:	2b2a      	cmp	r3, #42	; 0x2a
   bb52c:	d00c      	beq.n	bb548 <_ZNKSt9type_infoeqERKS_+0x28>
   bb52e:	6849      	ldr	r1, [r1, #4]
   bb530:	780b      	ldrb	r3, [r1, #0]
   bb532:	2b2a      	cmp	r3, #42	; 0x2a
   bb534:	bf08      	it	eq
   bb536:	3101      	addeq	r1, #1
   bb538:	f000 fec6 	bl	bc2c8 <strcmp>
   bb53c:	fab0 f080 	clz	r0, r0
   bb540:	0940      	lsrs	r0, r0, #5
   bb542:	bd08      	pop	{r3, pc}
   bb544:	2001      	movs	r0, #1
   bb546:	e7fc      	b.n	bb542 <_ZNKSt9type_infoeqERKS_+0x22>
   bb548:	2000      	movs	r0, #0
   bb54a:	e7fa      	b.n	bb542 <_ZNKSt9type_infoeqERKS_+0x22>

000bb54c <floorf>:
   bb54c:	ee10 2a10 	vmov	r2, s0
   bb550:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   bb554:	3b7f      	subs	r3, #127	; 0x7f
   bb556:	2b16      	cmp	r3, #22
   bb558:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   bb55c:	dc28      	bgt.n	bb5b0 <floorf+0x64>
   bb55e:	2b00      	cmp	r3, #0
   bb560:	db18      	blt.n	bb594 <floorf+0x48>
   bb562:	491a      	ldr	r1, [pc, #104]	; (bb5cc <floorf+0x80>)
   bb564:	4119      	asrs	r1, r3
   bb566:	420a      	tst	r2, r1
   bb568:	d021      	beq.n	bb5ae <floorf+0x62>
   bb56a:	eddf 7a19 	vldr	s15, [pc, #100]	; bb5d0 <floorf+0x84>
   bb56e:	ee70 7a27 	vadd.f32	s15, s0, s15
   bb572:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bb576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb57a:	dd18      	ble.n	bb5ae <floorf+0x62>
   bb57c:	2a00      	cmp	r2, #0
   bb57e:	da04      	bge.n	bb58a <floorf+0x3e>
   bb580:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   bb584:	fa40 f303 	asr.w	r3, r0, r3
   bb588:	441a      	add	r2, r3
   bb58a:	ea22 0301 	bic.w	r3, r2, r1
   bb58e:	ee00 3a10 	vmov	s0, r3
   bb592:	4770      	bx	lr
   bb594:	eddf 7a0e 	vldr	s15, [pc, #56]	; bb5d0 <floorf+0x84>
   bb598:	ee70 7a27 	vadd.f32	s15, s0, s15
   bb59c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bb5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb5a4:	dd03      	ble.n	bb5ae <floorf+0x62>
   bb5a6:	2a00      	cmp	r2, #0
   bb5a8:	db08      	blt.n	bb5bc <floorf+0x70>
   bb5aa:	ed9f 0a0a 	vldr	s0, [pc, #40]	; bb5d4 <floorf+0x88>
   bb5ae:	4770      	bx	lr
   bb5b0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   bb5b4:	d3fb      	bcc.n	bb5ae <floorf+0x62>
   bb5b6:	ee30 0a00 	vadd.f32	s0, s0, s0
   bb5ba:	4770      	bx	lr
   bb5bc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   bb5c0:	2900      	cmp	r1, #0
   bb5c2:	bf18      	it	ne
   bb5c4:	eeb0 0a67 	vmovne.f32	s0, s15
   bb5c8:	4770      	bx	lr
   bb5ca:	bf00      	nop
   bb5cc:	007fffff 	.word	0x007fffff
   bb5d0:	7149f2ca 	.word	0x7149f2ca
   bb5d4:	00000000 	.word	0x00000000

000bb5d8 <sqrt>:
   bb5d8:	b538      	push	{r3, r4, r5, lr}
   bb5da:	ed2d 8b02 	vpush	{d8}
   bb5de:	ec55 4b10 	vmov	r4, r5, d0
   bb5e2:	f000 f833 	bl	bb64c <__ieee754_sqrt>
   bb5e6:	4b18      	ldr	r3, [pc, #96]	; (bb648 <sqrt+0x70>)
   bb5e8:	eeb0 8a40 	vmov.f32	s16, s0
   bb5ec:	eef0 8a60 	vmov.f32	s17, s1
   bb5f0:	f993 3000 	ldrsb.w	r3, [r3]
   bb5f4:	3301      	adds	r3, #1
   bb5f6:	d00d      	beq.n	bb614 <sqrt+0x3c>
   bb5f8:	4622      	mov	r2, r4
   bb5fa:	462b      	mov	r3, r5
   bb5fc:	4620      	mov	r0, r4
   bb5fe:	4629      	mov	r1, r5
   bb600:	f000 fd46 	bl	bc090 <__aeabi_dcmpun>
   bb604:	b930      	cbnz	r0, bb614 <sqrt+0x3c>
   bb606:	2200      	movs	r2, #0
   bb608:	2300      	movs	r3, #0
   bb60a:	4620      	mov	r0, r4
   bb60c:	4629      	mov	r1, r5
   bb60e:	f000 fd17 	bl	bc040 <__aeabi_dcmplt>
   bb612:	b930      	cbnz	r0, bb622 <sqrt+0x4a>
   bb614:	eeb0 0a48 	vmov.f32	s0, s16
   bb618:	eef0 0a68 	vmov.f32	s1, s17
   bb61c:	ecbd 8b02 	vpop	{d8}
   bb620:	bd38      	pop	{r3, r4, r5, pc}
   bb622:	f7fd fac5 	bl	b8bb0 <__errno>
   bb626:	2200      	movs	r2, #0
   bb628:	2300      	movs	r3, #0
   bb62a:	2121      	movs	r1, #33	; 0x21
   bb62c:	6001      	str	r1, [r0, #0]
   bb62e:	4610      	mov	r0, r2
   bb630:	4619      	mov	r1, r3
   bb632:	f000 fbbd 	bl	bbdb0 <__aeabi_ddiv>
   bb636:	ec41 0b18 	vmov	d8, r0, r1
   bb63a:	eeb0 0a48 	vmov.f32	s0, s16
   bb63e:	eef0 0a68 	vmov.f32	s1, s17
   bb642:	ecbd 8b02 	vpop	{d8}
   bb646:	bd38      	pop	{r3, r4, r5, pc}
   bb648:	200350c4 	.word	0x200350c4

000bb64c <__ieee754_sqrt>:
   bb64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb650:	4a63      	ldr	r2, [pc, #396]	; (bb7e0 <__ieee754_sqrt+0x194>)
   bb652:	ec55 4b10 	vmov	r4, r5, d0
   bb656:	43aa      	bics	r2, r5
   bb658:	f000 809f 	beq.w	bb79a <__ieee754_sqrt+0x14e>
   bb65c:	2d00      	cmp	r5, #0
   bb65e:	ee10 ca10 	vmov	ip, s0
   bb662:	462b      	mov	r3, r5
   bb664:	dd54      	ble.n	bb710 <__ieee754_sqrt+0xc4>
   bb666:	1529      	asrs	r1, r5, #20
   bb668:	d063      	beq.n	bb732 <__ieee754_sqrt+0xe6>
   bb66a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bb66e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   bb672:	07c9      	lsls	r1, r1, #31
   bb674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb678:	d404      	bmi.n	bb684 <__ieee754_sqrt+0x38>
   bb67a:	005b      	lsls	r3, r3, #1
   bb67c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bb680:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bb684:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   bb688:	2600      	movs	r6, #0
   bb68a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   bb68e:	107f      	asrs	r7, r7, #1
   bb690:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bb694:	f04f 0e16 	mov.w	lr, #22
   bb698:	4634      	mov	r4, r6
   bb69a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   bb69e:	18a1      	adds	r1, r4, r2
   bb6a0:	4299      	cmp	r1, r3
   bb6a2:	dc02      	bgt.n	bb6aa <__ieee754_sqrt+0x5e>
   bb6a4:	1a5b      	subs	r3, r3, r1
   bb6a6:	188c      	adds	r4, r1, r2
   bb6a8:	4416      	add	r6, r2
   bb6aa:	005b      	lsls	r3, r3, #1
   bb6ac:	f1be 0e01 	subs.w	lr, lr, #1
   bb6b0:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bb6b4:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bb6b8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bb6bc:	d1ef      	bne.n	bb69e <__ieee754_sqrt+0x52>
   bb6be:	4675      	mov	r5, lr
   bb6c0:	2020      	movs	r0, #32
   bb6c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   bb6c6:	e00a      	b.n	bb6de <__ieee754_sqrt+0x92>
   bb6c8:	d044      	beq.n	bb754 <__ieee754_sqrt+0x108>
   bb6ca:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   bb6ce:	3801      	subs	r0, #1
   bb6d0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   bb6d4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bb6d8:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bb6dc:	d043      	beq.n	bb766 <__ieee754_sqrt+0x11a>
   bb6de:	42a3      	cmp	r3, r4
   bb6e0:	eb02 010e 	add.w	r1, r2, lr
   bb6e4:	ddf0      	ble.n	bb6c8 <__ieee754_sqrt+0x7c>
   bb6e6:	2900      	cmp	r1, #0
   bb6e8:	eb01 0e02 	add.w	lr, r1, r2
   bb6ec:	db0a      	blt.n	bb704 <__ieee754_sqrt+0xb8>
   bb6ee:	46a0      	mov	r8, r4
   bb6f0:	1b1b      	subs	r3, r3, r4
   bb6f2:	4561      	cmp	r1, ip
   bb6f4:	bf88      	it	hi
   bb6f6:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   bb6fa:	ebac 0c01 	sub.w	ip, ip, r1
   bb6fe:	4415      	add	r5, r2
   bb700:	4644      	mov	r4, r8
   bb702:	e7e2      	b.n	bb6ca <__ieee754_sqrt+0x7e>
   bb704:	f1be 0f00 	cmp.w	lr, #0
   bb708:	dbf1      	blt.n	bb6ee <__ieee754_sqrt+0xa2>
   bb70a:	f104 0801 	add.w	r8, r4, #1
   bb70e:	e7ef      	b.n	bb6f0 <__ieee754_sqrt+0xa4>
   bb710:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   bb714:	4322      	orrs	r2, r4
   bb716:	d038      	beq.n	bb78a <__ieee754_sqrt+0x13e>
   bb718:	2d00      	cmp	r5, #0
   bb71a:	d14e      	bne.n	bb7ba <__ieee754_sqrt+0x16e>
   bb71c:	4629      	mov	r1, r5
   bb71e:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   bb722:	3915      	subs	r1, #21
   bb724:	4613      	mov	r3, r2
   bb726:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   bb72a:	2a00      	cmp	r2, #0
   bb72c:	d0f7      	beq.n	bb71e <__ieee754_sqrt+0xd2>
   bb72e:	02d6      	lsls	r6, r2, #11
   bb730:	d450      	bmi.n	bb7d4 <__ieee754_sqrt+0x188>
   bb732:	2000      	movs	r0, #0
   bb734:	005b      	lsls	r3, r3, #1
   bb736:	02dd      	lsls	r5, r3, #11
   bb738:	4604      	mov	r4, r0
   bb73a:	f100 0001 	add.w	r0, r0, #1
   bb73e:	d5f9      	bpl.n	bb734 <__ieee754_sqrt+0xe8>
   bb740:	461a      	mov	r2, r3
   bb742:	4663      	mov	r3, ip
   bb744:	fa0c fc00 	lsl.w	ip, ip, r0
   bb748:	f1c0 0020 	rsb	r0, r0, #32
   bb74c:	40c3      	lsrs	r3, r0
   bb74e:	1b09      	subs	r1, r1, r4
   bb750:	4313      	orrs	r3, r2
   bb752:	e78a      	b.n	bb66a <__ieee754_sqrt+0x1e>
   bb754:	4561      	cmp	r1, ip
   bb756:	d8b8      	bhi.n	bb6ca <__ieee754_sqrt+0x7e>
   bb758:	2900      	cmp	r1, #0
   bb75a:	eb01 0e02 	add.w	lr, r1, r2
   bb75e:	dbd1      	blt.n	bb704 <__ieee754_sqrt+0xb8>
   bb760:	4698      	mov	r8, r3
   bb762:	2300      	movs	r3, #0
   bb764:	e7c9      	b.n	bb6fa <__ieee754_sqrt+0xae>
   bb766:	ea53 030c 	orrs.w	r3, r3, ip
   bb76a:	d110      	bne.n	bb78e <__ieee754_sqrt+0x142>
   bb76c:	0868      	lsrs	r0, r5, #1
   bb76e:	1071      	asrs	r1, r6, #1
   bb770:	07f3      	lsls	r3, r6, #31
   bb772:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   bb776:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   bb77a:	bf48      	it	mi
   bb77c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   bb780:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   bb784:	4602      	mov	r2, r0
   bb786:	ec43 2b10 	vmov	d0, r2, r3
   bb78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb78e:	1c6a      	adds	r2, r5, #1
   bb790:	bf16      	itet	ne
   bb792:	1c68      	addne	r0, r5, #1
   bb794:	3601      	addeq	r6, #1
   bb796:	0840      	lsrne	r0, r0, #1
   bb798:	e7e9      	b.n	bb76e <__ieee754_sqrt+0x122>
   bb79a:	ee10 2a10 	vmov	r2, s0
   bb79e:	ee10 0a10 	vmov	r0, s0
   bb7a2:	462b      	mov	r3, r5
   bb7a4:	4629      	mov	r1, r5
   bb7a6:	f000 f9d9 	bl	bbb5c <__aeabi_dmul>
   bb7aa:	4622      	mov	r2, r4
   bb7ac:	462b      	mov	r3, r5
   bb7ae:	f000 f81f 	bl	bb7f0 <__adddf3>
   bb7b2:	ec41 0b10 	vmov	d0, r0, r1
   bb7b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb7ba:	ee10 2a10 	vmov	r2, s0
   bb7be:	4620      	mov	r0, r4
   bb7c0:	4629      	mov	r1, r5
   bb7c2:	f000 f813 	bl	bb7ec <__aeabi_dsub>
   bb7c6:	4602      	mov	r2, r0
   bb7c8:	460b      	mov	r3, r1
   bb7ca:	f000 faf1 	bl	bbdb0 <__aeabi_ddiv>
   bb7ce:	ec41 0b10 	vmov	d0, r0, r1
   bb7d2:	e7da      	b.n	bb78a <__ieee754_sqrt+0x13e>
   bb7d4:	4663      	mov	r3, ip
   bb7d6:	2020      	movs	r0, #32
   bb7d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bb7dc:	e7b6      	b.n	bb74c <__ieee754_sqrt+0x100>
   bb7de:	bf00      	nop
   bb7e0:	7ff00000 	.word	0x7ff00000

000bb7e4 <__aeabi_drsub>:
   bb7e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bb7e8:	e002      	b.n	bb7f0 <__adddf3>
   bb7ea:	bf00      	nop

000bb7ec <__aeabi_dsub>:
   bb7ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bb7f0 <__adddf3>:
   bb7f0:	b530      	push	{r4, r5, lr}
   bb7f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bb7f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bb7fa:	ea94 0f05 	teq	r4, r5
   bb7fe:	bf08      	it	eq
   bb800:	ea90 0f02 	teqeq	r0, r2
   bb804:	bf1f      	itttt	ne
   bb806:	ea54 0c00 	orrsne.w	ip, r4, r0
   bb80a:	ea55 0c02 	orrsne.w	ip, r5, r2
   bb80e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bb812:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb816:	f000 80e2 	beq.w	bb9de <__adddf3+0x1ee>
   bb81a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bb81e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bb822:	bfb8      	it	lt
   bb824:	426d      	neglt	r5, r5
   bb826:	dd0c      	ble.n	bb842 <__adddf3+0x52>
   bb828:	442c      	add	r4, r5
   bb82a:	ea80 0202 	eor.w	r2, r0, r2
   bb82e:	ea81 0303 	eor.w	r3, r1, r3
   bb832:	ea82 0000 	eor.w	r0, r2, r0
   bb836:	ea83 0101 	eor.w	r1, r3, r1
   bb83a:	ea80 0202 	eor.w	r2, r0, r2
   bb83e:	ea81 0303 	eor.w	r3, r1, r3
   bb842:	2d36      	cmp	r5, #54	; 0x36
   bb844:	bf88      	it	hi
   bb846:	bd30      	pophi	{r4, r5, pc}
   bb848:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb84c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb850:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bb854:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bb858:	d002      	beq.n	bb860 <__adddf3+0x70>
   bb85a:	4240      	negs	r0, r0
   bb85c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb860:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bb864:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb868:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bb86c:	d002      	beq.n	bb874 <__adddf3+0x84>
   bb86e:	4252      	negs	r2, r2
   bb870:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bb874:	ea94 0f05 	teq	r4, r5
   bb878:	f000 80a7 	beq.w	bb9ca <__adddf3+0x1da>
   bb87c:	f1a4 0401 	sub.w	r4, r4, #1
   bb880:	f1d5 0e20 	rsbs	lr, r5, #32
   bb884:	db0d      	blt.n	bb8a2 <__adddf3+0xb2>
   bb886:	fa02 fc0e 	lsl.w	ip, r2, lr
   bb88a:	fa22 f205 	lsr.w	r2, r2, r5
   bb88e:	1880      	adds	r0, r0, r2
   bb890:	f141 0100 	adc.w	r1, r1, #0
   bb894:	fa03 f20e 	lsl.w	r2, r3, lr
   bb898:	1880      	adds	r0, r0, r2
   bb89a:	fa43 f305 	asr.w	r3, r3, r5
   bb89e:	4159      	adcs	r1, r3
   bb8a0:	e00e      	b.n	bb8c0 <__adddf3+0xd0>
   bb8a2:	f1a5 0520 	sub.w	r5, r5, #32
   bb8a6:	f10e 0e20 	add.w	lr, lr, #32
   bb8aa:	2a01      	cmp	r2, #1
   bb8ac:	fa03 fc0e 	lsl.w	ip, r3, lr
   bb8b0:	bf28      	it	cs
   bb8b2:	f04c 0c02 	orrcs.w	ip, ip, #2
   bb8b6:	fa43 f305 	asr.w	r3, r3, r5
   bb8ba:	18c0      	adds	r0, r0, r3
   bb8bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bb8c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb8c4:	d507      	bpl.n	bb8d6 <__adddf3+0xe6>
   bb8c6:	f04f 0e00 	mov.w	lr, #0
   bb8ca:	f1dc 0c00 	rsbs	ip, ip, #0
   bb8ce:	eb7e 0000 	sbcs.w	r0, lr, r0
   bb8d2:	eb6e 0101 	sbc.w	r1, lr, r1
   bb8d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bb8da:	d31b      	bcc.n	bb914 <__adddf3+0x124>
   bb8dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bb8e0:	d30c      	bcc.n	bb8fc <__adddf3+0x10c>
   bb8e2:	0849      	lsrs	r1, r1, #1
   bb8e4:	ea5f 0030 	movs.w	r0, r0, rrx
   bb8e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bb8ec:	f104 0401 	add.w	r4, r4, #1
   bb8f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bb8f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bb8f8:	f080 809a 	bcs.w	bba30 <__adddf3+0x240>
   bb8fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bb900:	bf08      	it	eq
   bb902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb906:	f150 0000 	adcs.w	r0, r0, #0
   bb90a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb90e:	ea41 0105 	orr.w	r1, r1, r5
   bb912:	bd30      	pop	{r4, r5, pc}
   bb914:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bb918:	4140      	adcs	r0, r0
   bb91a:	eb41 0101 	adc.w	r1, r1, r1
   bb91e:	3c01      	subs	r4, #1
   bb920:	bf28      	it	cs
   bb922:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bb926:	d2e9      	bcs.n	bb8fc <__adddf3+0x10c>
   bb928:	f091 0f00 	teq	r1, #0
   bb92c:	bf04      	itt	eq
   bb92e:	4601      	moveq	r1, r0
   bb930:	2000      	moveq	r0, #0
   bb932:	fab1 f381 	clz	r3, r1
   bb936:	bf08      	it	eq
   bb938:	3320      	addeq	r3, #32
   bb93a:	f1a3 030b 	sub.w	r3, r3, #11
   bb93e:	f1b3 0220 	subs.w	r2, r3, #32
   bb942:	da0c      	bge.n	bb95e <__adddf3+0x16e>
   bb944:	320c      	adds	r2, #12
   bb946:	dd08      	ble.n	bb95a <__adddf3+0x16a>
   bb948:	f102 0c14 	add.w	ip, r2, #20
   bb94c:	f1c2 020c 	rsb	r2, r2, #12
   bb950:	fa01 f00c 	lsl.w	r0, r1, ip
   bb954:	fa21 f102 	lsr.w	r1, r1, r2
   bb958:	e00c      	b.n	bb974 <__adddf3+0x184>
   bb95a:	f102 0214 	add.w	r2, r2, #20
   bb95e:	bfd8      	it	le
   bb960:	f1c2 0c20 	rsble	ip, r2, #32
   bb964:	fa01 f102 	lsl.w	r1, r1, r2
   bb968:	fa20 fc0c 	lsr.w	ip, r0, ip
   bb96c:	bfdc      	itt	le
   bb96e:	ea41 010c 	orrle.w	r1, r1, ip
   bb972:	4090      	lslle	r0, r2
   bb974:	1ae4      	subs	r4, r4, r3
   bb976:	bfa2      	ittt	ge
   bb978:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bb97c:	4329      	orrge	r1, r5
   bb97e:	bd30      	popge	{r4, r5, pc}
   bb980:	ea6f 0404 	mvn.w	r4, r4
   bb984:	3c1f      	subs	r4, #31
   bb986:	da1c      	bge.n	bb9c2 <__adddf3+0x1d2>
   bb988:	340c      	adds	r4, #12
   bb98a:	dc0e      	bgt.n	bb9aa <__adddf3+0x1ba>
   bb98c:	f104 0414 	add.w	r4, r4, #20
   bb990:	f1c4 0220 	rsb	r2, r4, #32
   bb994:	fa20 f004 	lsr.w	r0, r0, r4
   bb998:	fa01 f302 	lsl.w	r3, r1, r2
   bb99c:	ea40 0003 	orr.w	r0, r0, r3
   bb9a0:	fa21 f304 	lsr.w	r3, r1, r4
   bb9a4:	ea45 0103 	orr.w	r1, r5, r3
   bb9a8:	bd30      	pop	{r4, r5, pc}
   bb9aa:	f1c4 040c 	rsb	r4, r4, #12
   bb9ae:	f1c4 0220 	rsb	r2, r4, #32
   bb9b2:	fa20 f002 	lsr.w	r0, r0, r2
   bb9b6:	fa01 f304 	lsl.w	r3, r1, r4
   bb9ba:	ea40 0003 	orr.w	r0, r0, r3
   bb9be:	4629      	mov	r1, r5
   bb9c0:	bd30      	pop	{r4, r5, pc}
   bb9c2:	fa21 f004 	lsr.w	r0, r1, r4
   bb9c6:	4629      	mov	r1, r5
   bb9c8:	bd30      	pop	{r4, r5, pc}
   bb9ca:	f094 0f00 	teq	r4, #0
   bb9ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bb9d2:	bf06      	itte	eq
   bb9d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bb9d8:	3401      	addeq	r4, #1
   bb9da:	3d01      	subne	r5, #1
   bb9dc:	e74e      	b.n	bb87c <__adddf3+0x8c>
   bb9de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb9e2:	bf18      	it	ne
   bb9e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb9e8:	d029      	beq.n	bba3e <__adddf3+0x24e>
   bb9ea:	ea94 0f05 	teq	r4, r5
   bb9ee:	bf08      	it	eq
   bb9f0:	ea90 0f02 	teqeq	r0, r2
   bb9f4:	d005      	beq.n	bba02 <__adddf3+0x212>
   bb9f6:	ea54 0c00 	orrs.w	ip, r4, r0
   bb9fa:	bf04      	itt	eq
   bb9fc:	4619      	moveq	r1, r3
   bb9fe:	4610      	moveq	r0, r2
   bba00:	bd30      	pop	{r4, r5, pc}
   bba02:	ea91 0f03 	teq	r1, r3
   bba06:	bf1e      	ittt	ne
   bba08:	2100      	movne	r1, #0
   bba0a:	2000      	movne	r0, #0
   bba0c:	bd30      	popne	{r4, r5, pc}
   bba0e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bba12:	d105      	bne.n	bba20 <__adddf3+0x230>
   bba14:	0040      	lsls	r0, r0, #1
   bba16:	4149      	adcs	r1, r1
   bba18:	bf28      	it	cs
   bba1a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bba1e:	bd30      	pop	{r4, r5, pc}
   bba20:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bba24:	bf3c      	itt	cc
   bba26:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bba2a:	bd30      	popcc	{r4, r5, pc}
   bba2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bba30:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bba34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bba38:	f04f 0000 	mov.w	r0, #0
   bba3c:	bd30      	pop	{r4, r5, pc}
   bba3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bba42:	bf1a      	itte	ne
   bba44:	4619      	movne	r1, r3
   bba46:	4610      	movne	r0, r2
   bba48:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bba4c:	bf1c      	itt	ne
   bba4e:	460b      	movne	r3, r1
   bba50:	4602      	movne	r2, r0
   bba52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bba56:	bf06      	itte	eq
   bba58:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bba5c:	ea91 0f03 	teqeq	r1, r3
   bba60:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bba64:	bd30      	pop	{r4, r5, pc}
   bba66:	bf00      	nop

000bba68 <__aeabi_ui2d>:
   bba68:	f090 0f00 	teq	r0, #0
   bba6c:	bf04      	itt	eq
   bba6e:	2100      	moveq	r1, #0
   bba70:	4770      	bxeq	lr
   bba72:	b530      	push	{r4, r5, lr}
   bba74:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bba78:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bba7c:	f04f 0500 	mov.w	r5, #0
   bba80:	f04f 0100 	mov.w	r1, #0
   bba84:	e750      	b.n	bb928 <__adddf3+0x138>
   bba86:	bf00      	nop

000bba88 <__aeabi_i2d>:
   bba88:	f090 0f00 	teq	r0, #0
   bba8c:	bf04      	itt	eq
   bba8e:	2100      	moveq	r1, #0
   bba90:	4770      	bxeq	lr
   bba92:	b530      	push	{r4, r5, lr}
   bba94:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bba98:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bba9c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bbaa0:	bf48      	it	mi
   bbaa2:	4240      	negmi	r0, r0
   bbaa4:	f04f 0100 	mov.w	r1, #0
   bbaa8:	e73e      	b.n	bb928 <__adddf3+0x138>
   bbaaa:	bf00      	nop

000bbaac <__aeabi_f2d>:
   bbaac:	0042      	lsls	r2, r0, #1
   bbaae:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bbab2:	ea4f 0131 	mov.w	r1, r1, rrx
   bbab6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bbaba:	bf1f      	itttt	ne
   bbabc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bbac0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bbac4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bbac8:	4770      	bxne	lr
   bbaca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bbace:	bf08      	it	eq
   bbad0:	4770      	bxeq	lr
   bbad2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bbad6:	bf04      	itt	eq
   bbad8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bbadc:	4770      	bxeq	lr
   bbade:	b530      	push	{r4, r5, lr}
   bbae0:	f44f 7460 	mov.w	r4, #896	; 0x380
   bbae4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bbae8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bbaec:	e71c      	b.n	bb928 <__adddf3+0x138>
   bbaee:	bf00      	nop

000bbaf0 <__aeabi_ul2d>:
   bbaf0:	ea50 0201 	orrs.w	r2, r0, r1
   bbaf4:	bf08      	it	eq
   bbaf6:	4770      	bxeq	lr
   bbaf8:	b530      	push	{r4, r5, lr}
   bbafa:	f04f 0500 	mov.w	r5, #0
   bbafe:	e00a      	b.n	bbb16 <__aeabi_l2d+0x16>

000bbb00 <__aeabi_l2d>:
   bbb00:	ea50 0201 	orrs.w	r2, r0, r1
   bbb04:	bf08      	it	eq
   bbb06:	4770      	bxeq	lr
   bbb08:	b530      	push	{r4, r5, lr}
   bbb0a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bbb0e:	d502      	bpl.n	bbb16 <__aeabi_l2d+0x16>
   bbb10:	4240      	negs	r0, r0
   bbb12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bbb16:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bbb1a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bbb1e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bbb22:	f43f aed8 	beq.w	bb8d6 <__adddf3+0xe6>
   bbb26:	f04f 0203 	mov.w	r2, #3
   bbb2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bbb2e:	bf18      	it	ne
   bbb30:	3203      	addne	r2, #3
   bbb32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bbb36:	bf18      	it	ne
   bbb38:	3203      	addne	r2, #3
   bbb3a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bbb3e:	f1c2 0320 	rsb	r3, r2, #32
   bbb42:	fa00 fc03 	lsl.w	ip, r0, r3
   bbb46:	fa20 f002 	lsr.w	r0, r0, r2
   bbb4a:	fa01 fe03 	lsl.w	lr, r1, r3
   bbb4e:	ea40 000e 	orr.w	r0, r0, lr
   bbb52:	fa21 f102 	lsr.w	r1, r1, r2
   bbb56:	4414      	add	r4, r2
   bbb58:	e6bd      	b.n	bb8d6 <__adddf3+0xe6>
   bbb5a:	bf00      	nop

000bbb5c <__aeabi_dmul>:
   bbb5c:	b570      	push	{r4, r5, r6, lr}
   bbb5e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bbb62:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bbb66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bbb6a:	bf1d      	ittte	ne
   bbb6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bbb70:	ea94 0f0c 	teqne	r4, ip
   bbb74:	ea95 0f0c 	teqne	r5, ip
   bbb78:	f000 f8de 	bleq	bbd38 <__aeabi_dmul+0x1dc>
   bbb7c:	442c      	add	r4, r5
   bbb7e:	ea81 0603 	eor.w	r6, r1, r3
   bbb82:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bbb86:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bbb8a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bbb8e:	bf18      	it	ne
   bbb90:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bbb94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbb98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bbb9c:	d038      	beq.n	bbc10 <__aeabi_dmul+0xb4>
   bbb9e:	fba0 ce02 	umull	ip, lr, r0, r2
   bbba2:	f04f 0500 	mov.w	r5, #0
   bbba6:	fbe1 e502 	umlal	lr, r5, r1, r2
   bbbaa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bbbae:	fbe0 e503 	umlal	lr, r5, r0, r3
   bbbb2:	f04f 0600 	mov.w	r6, #0
   bbbb6:	fbe1 5603 	umlal	r5, r6, r1, r3
   bbbba:	f09c 0f00 	teq	ip, #0
   bbbbe:	bf18      	it	ne
   bbbc0:	f04e 0e01 	orrne.w	lr, lr, #1
   bbbc4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bbbc8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bbbcc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bbbd0:	d204      	bcs.n	bbbdc <__aeabi_dmul+0x80>
   bbbd2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bbbd6:	416d      	adcs	r5, r5
   bbbd8:	eb46 0606 	adc.w	r6, r6, r6
   bbbdc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bbbe0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bbbe4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bbbe8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bbbec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bbbf0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bbbf4:	bf88      	it	hi
   bbbf6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bbbfa:	d81e      	bhi.n	bbc3a <__aeabi_dmul+0xde>
   bbbfc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bbc00:	bf08      	it	eq
   bbc02:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bbc06:	f150 0000 	adcs.w	r0, r0, #0
   bbc0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbc0e:	bd70      	pop	{r4, r5, r6, pc}
   bbc10:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bbc14:	ea46 0101 	orr.w	r1, r6, r1
   bbc18:	ea40 0002 	orr.w	r0, r0, r2
   bbc1c:	ea81 0103 	eor.w	r1, r1, r3
   bbc20:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bbc24:	bfc2      	ittt	gt
   bbc26:	ebd4 050c 	rsbsgt	r5, r4, ip
   bbc2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bbc2e:	bd70      	popgt	{r4, r5, r6, pc}
   bbc30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbc34:	f04f 0e00 	mov.w	lr, #0
   bbc38:	3c01      	subs	r4, #1
   bbc3a:	f300 80ab 	bgt.w	bbd94 <__aeabi_dmul+0x238>
   bbc3e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bbc42:	bfde      	ittt	le
   bbc44:	2000      	movle	r0, #0
   bbc46:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bbc4a:	bd70      	pople	{r4, r5, r6, pc}
   bbc4c:	f1c4 0400 	rsb	r4, r4, #0
   bbc50:	3c20      	subs	r4, #32
   bbc52:	da35      	bge.n	bbcc0 <__aeabi_dmul+0x164>
   bbc54:	340c      	adds	r4, #12
   bbc56:	dc1b      	bgt.n	bbc90 <__aeabi_dmul+0x134>
   bbc58:	f104 0414 	add.w	r4, r4, #20
   bbc5c:	f1c4 0520 	rsb	r5, r4, #32
   bbc60:	fa00 f305 	lsl.w	r3, r0, r5
   bbc64:	fa20 f004 	lsr.w	r0, r0, r4
   bbc68:	fa01 f205 	lsl.w	r2, r1, r5
   bbc6c:	ea40 0002 	orr.w	r0, r0, r2
   bbc70:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bbc74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bbc78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bbc7c:	fa21 f604 	lsr.w	r6, r1, r4
   bbc80:	eb42 0106 	adc.w	r1, r2, r6
   bbc84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bbc88:	bf08      	it	eq
   bbc8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bbc8e:	bd70      	pop	{r4, r5, r6, pc}
   bbc90:	f1c4 040c 	rsb	r4, r4, #12
   bbc94:	f1c4 0520 	rsb	r5, r4, #32
   bbc98:	fa00 f304 	lsl.w	r3, r0, r4
   bbc9c:	fa20 f005 	lsr.w	r0, r0, r5
   bbca0:	fa01 f204 	lsl.w	r2, r1, r4
   bbca4:	ea40 0002 	orr.w	r0, r0, r2
   bbca8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbcac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bbcb0:	f141 0100 	adc.w	r1, r1, #0
   bbcb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bbcb8:	bf08      	it	eq
   bbcba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bbcbe:	bd70      	pop	{r4, r5, r6, pc}
   bbcc0:	f1c4 0520 	rsb	r5, r4, #32
   bbcc4:	fa00 f205 	lsl.w	r2, r0, r5
   bbcc8:	ea4e 0e02 	orr.w	lr, lr, r2
   bbccc:	fa20 f304 	lsr.w	r3, r0, r4
   bbcd0:	fa01 f205 	lsl.w	r2, r1, r5
   bbcd4:	ea43 0302 	orr.w	r3, r3, r2
   bbcd8:	fa21 f004 	lsr.w	r0, r1, r4
   bbcdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbce0:	fa21 f204 	lsr.w	r2, r1, r4
   bbce4:	ea20 0002 	bic.w	r0, r0, r2
   bbce8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bbcec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bbcf0:	bf08      	it	eq
   bbcf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bbcf6:	bd70      	pop	{r4, r5, r6, pc}
   bbcf8:	f094 0f00 	teq	r4, #0
   bbcfc:	d10f      	bne.n	bbd1e <__aeabi_dmul+0x1c2>
   bbcfe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bbd02:	0040      	lsls	r0, r0, #1
   bbd04:	eb41 0101 	adc.w	r1, r1, r1
   bbd08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbd0c:	bf08      	it	eq
   bbd0e:	3c01      	subeq	r4, #1
   bbd10:	d0f7      	beq.n	bbd02 <__aeabi_dmul+0x1a6>
   bbd12:	ea41 0106 	orr.w	r1, r1, r6
   bbd16:	f095 0f00 	teq	r5, #0
   bbd1a:	bf18      	it	ne
   bbd1c:	4770      	bxne	lr
   bbd1e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bbd22:	0052      	lsls	r2, r2, #1
   bbd24:	eb43 0303 	adc.w	r3, r3, r3
   bbd28:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bbd2c:	bf08      	it	eq
   bbd2e:	3d01      	subeq	r5, #1
   bbd30:	d0f7      	beq.n	bbd22 <__aeabi_dmul+0x1c6>
   bbd32:	ea43 0306 	orr.w	r3, r3, r6
   bbd36:	4770      	bx	lr
   bbd38:	ea94 0f0c 	teq	r4, ip
   bbd3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bbd40:	bf18      	it	ne
   bbd42:	ea95 0f0c 	teqne	r5, ip
   bbd46:	d00c      	beq.n	bbd62 <__aeabi_dmul+0x206>
   bbd48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbd4c:	bf18      	it	ne
   bbd4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbd52:	d1d1      	bne.n	bbcf8 <__aeabi_dmul+0x19c>
   bbd54:	ea81 0103 	eor.w	r1, r1, r3
   bbd58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbd5c:	f04f 0000 	mov.w	r0, #0
   bbd60:	bd70      	pop	{r4, r5, r6, pc}
   bbd62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbd66:	bf06      	itte	eq
   bbd68:	4610      	moveq	r0, r2
   bbd6a:	4619      	moveq	r1, r3
   bbd6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbd70:	d019      	beq.n	bbda6 <__aeabi_dmul+0x24a>
   bbd72:	ea94 0f0c 	teq	r4, ip
   bbd76:	d102      	bne.n	bbd7e <__aeabi_dmul+0x222>
   bbd78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bbd7c:	d113      	bne.n	bbda6 <__aeabi_dmul+0x24a>
   bbd7e:	ea95 0f0c 	teq	r5, ip
   bbd82:	d105      	bne.n	bbd90 <__aeabi_dmul+0x234>
   bbd84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bbd88:	bf1c      	itt	ne
   bbd8a:	4610      	movne	r0, r2
   bbd8c:	4619      	movne	r1, r3
   bbd8e:	d10a      	bne.n	bbda6 <__aeabi_dmul+0x24a>
   bbd90:	ea81 0103 	eor.w	r1, r1, r3
   bbd94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbd98:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bbd9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bbda0:	f04f 0000 	mov.w	r0, #0
   bbda4:	bd70      	pop	{r4, r5, r6, pc}
   bbda6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bbdaa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bbdae:	bd70      	pop	{r4, r5, r6, pc}

000bbdb0 <__aeabi_ddiv>:
   bbdb0:	b570      	push	{r4, r5, r6, lr}
   bbdb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bbdb6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bbdba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bbdbe:	bf1d      	ittte	ne
   bbdc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bbdc4:	ea94 0f0c 	teqne	r4, ip
   bbdc8:	ea95 0f0c 	teqne	r5, ip
   bbdcc:	f000 f8a7 	bleq	bbf1e <__aeabi_ddiv+0x16e>
   bbdd0:	eba4 0405 	sub.w	r4, r4, r5
   bbdd4:	ea81 0e03 	eor.w	lr, r1, r3
   bbdd8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bbddc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bbde0:	f000 8088 	beq.w	bbef4 <__aeabi_ddiv+0x144>
   bbde4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bbde8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bbdec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bbdf0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bbdf4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bbdf8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bbdfc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bbe00:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bbe04:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bbe08:	429d      	cmp	r5, r3
   bbe0a:	bf08      	it	eq
   bbe0c:	4296      	cmpeq	r6, r2
   bbe0e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bbe12:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bbe16:	d202      	bcs.n	bbe1e <__aeabi_ddiv+0x6e>
   bbe18:	085b      	lsrs	r3, r3, #1
   bbe1a:	ea4f 0232 	mov.w	r2, r2, rrx
   bbe1e:	1ab6      	subs	r6, r6, r2
   bbe20:	eb65 0503 	sbc.w	r5, r5, r3
   bbe24:	085b      	lsrs	r3, r3, #1
   bbe26:	ea4f 0232 	mov.w	r2, r2, rrx
   bbe2a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bbe2e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bbe32:	ebb6 0e02 	subs.w	lr, r6, r2
   bbe36:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbe3a:	bf22      	ittt	cs
   bbe3c:	1ab6      	subcs	r6, r6, r2
   bbe3e:	4675      	movcs	r5, lr
   bbe40:	ea40 000c 	orrcs.w	r0, r0, ip
   bbe44:	085b      	lsrs	r3, r3, #1
   bbe46:	ea4f 0232 	mov.w	r2, r2, rrx
   bbe4a:	ebb6 0e02 	subs.w	lr, r6, r2
   bbe4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbe52:	bf22      	ittt	cs
   bbe54:	1ab6      	subcs	r6, r6, r2
   bbe56:	4675      	movcs	r5, lr
   bbe58:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bbe5c:	085b      	lsrs	r3, r3, #1
   bbe5e:	ea4f 0232 	mov.w	r2, r2, rrx
   bbe62:	ebb6 0e02 	subs.w	lr, r6, r2
   bbe66:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbe6a:	bf22      	ittt	cs
   bbe6c:	1ab6      	subcs	r6, r6, r2
   bbe6e:	4675      	movcs	r5, lr
   bbe70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bbe74:	085b      	lsrs	r3, r3, #1
   bbe76:	ea4f 0232 	mov.w	r2, r2, rrx
   bbe7a:	ebb6 0e02 	subs.w	lr, r6, r2
   bbe7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbe82:	bf22      	ittt	cs
   bbe84:	1ab6      	subcs	r6, r6, r2
   bbe86:	4675      	movcs	r5, lr
   bbe88:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bbe8c:	ea55 0e06 	orrs.w	lr, r5, r6
   bbe90:	d018      	beq.n	bbec4 <__aeabi_ddiv+0x114>
   bbe92:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bbe96:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bbe9a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bbe9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bbea2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bbea6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bbeaa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bbeae:	d1c0      	bne.n	bbe32 <__aeabi_ddiv+0x82>
   bbeb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbeb4:	d10b      	bne.n	bbece <__aeabi_ddiv+0x11e>
   bbeb6:	ea41 0100 	orr.w	r1, r1, r0
   bbeba:	f04f 0000 	mov.w	r0, #0
   bbebe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bbec2:	e7b6      	b.n	bbe32 <__aeabi_ddiv+0x82>
   bbec4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbec8:	bf04      	itt	eq
   bbeca:	4301      	orreq	r1, r0
   bbecc:	2000      	moveq	r0, #0
   bbece:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bbed2:	bf88      	it	hi
   bbed4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bbed8:	f63f aeaf 	bhi.w	bbc3a <__aeabi_dmul+0xde>
   bbedc:	ebb5 0c03 	subs.w	ip, r5, r3
   bbee0:	bf04      	itt	eq
   bbee2:	ebb6 0c02 	subseq.w	ip, r6, r2
   bbee6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bbeea:	f150 0000 	adcs.w	r0, r0, #0
   bbeee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbef2:	bd70      	pop	{r4, r5, r6, pc}
   bbef4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bbef8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bbefc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bbf00:	bfc2      	ittt	gt
   bbf02:	ebd4 050c 	rsbsgt	r5, r4, ip
   bbf06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bbf0a:	bd70      	popgt	{r4, r5, r6, pc}
   bbf0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbf10:	f04f 0e00 	mov.w	lr, #0
   bbf14:	3c01      	subs	r4, #1
   bbf16:	e690      	b.n	bbc3a <__aeabi_dmul+0xde>
   bbf18:	ea45 0e06 	orr.w	lr, r5, r6
   bbf1c:	e68d      	b.n	bbc3a <__aeabi_dmul+0xde>
   bbf1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bbf22:	ea94 0f0c 	teq	r4, ip
   bbf26:	bf08      	it	eq
   bbf28:	ea95 0f0c 	teqeq	r5, ip
   bbf2c:	f43f af3b 	beq.w	bbda6 <__aeabi_dmul+0x24a>
   bbf30:	ea94 0f0c 	teq	r4, ip
   bbf34:	d10a      	bne.n	bbf4c <__aeabi_ddiv+0x19c>
   bbf36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bbf3a:	f47f af34 	bne.w	bbda6 <__aeabi_dmul+0x24a>
   bbf3e:	ea95 0f0c 	teq	r5, ip
   bbf42:	f47f af25 	bne.w	bbd90 <__aeabi_dmul+0x234>
   bbf46:	4610      	mov	r0, r2
   bbf48:	4619      	mov	r1, r3
   bbf4a:	e72c      	b.n	bbda6 <__aeabi_dmul+0x24a>
   bbf4c:	ea95 0f0c 	teq	r5, ip
   bbf50:	d106      	bne.n	bbf60 <__aeabi_ddiv+0x1b0>
   bbf52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bbf56:	f43f aefd 	beq.w	bbd54 <__aeabi_dmul+0x1f8>
   bbf5a:	4610      	mov	r0, r2
   bbf5c:	4619      	mov	r1, r3
   bbf5e:	e722      	b.n	bbda6 <__aeabi_dmul+0x24a>
   bbf60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbf64:	bf18      	it	ne
   bbf66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbf6a:	f47f aec5 	bne.w	bbcf8 <__aeabi_dmul+0x19c>
   bbf6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bbf72:	f47f af0d 	bne.w	bbd90 <__aeabi_dmul+0x234>
   bbf76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bbf7a:	f47f aeeb 	bne.w	bbd54 <__aeabi_dmul+0x1f8>
   bbf7e:	e712      	b.n	bbda6 <__aeabi_dmul+0x24a>

000bbf80 <__gedf2>:
   bbf80:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bbf84:	e006      	b.n	bbf94 <__cmpdf2+0x4>
   bbf86:	bf00      	nop

000bbf88 <__ledf2>:
   bbf88:	f04f 0c01 	mov.w	ip, #1
   bbf8c:	e002      	b.n	bbf94 <__cmpdf2+0x4>
   bbf8e:	bf00      	nop

000bbf90 <__cmpdf2>:
   bbf90:	f04f 0c01 	mov.w	ip, #1
   bbf94:	f84d cd04 	str.w	ip, [sp, #-4]!
   bbf98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbf9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbfa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbfa4:	bf18      	it	ne
   bbfa6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bbfaa:	d01b      	beq.n	bbfe4 <__cmpdf2+0x54>
   bbfac:	b001      	add	sp, #4
   bbfae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bbfb2:	bf0c      	ite	eq
   bbfb4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bbfb8:	ea91 0f03 	teqne	r1, r3
   bbfbc:	bf02      	ittt	eq
   bbfbe:	ea90 0f02 	teqeq	r0, r2
   bbfc2:	2000      	moveq	r0, #0
   bbfc4:	4770      	bxeq	lr
   bbfc6:	f110 0f00 	cmn.w	r0, #0
   bbfca:	ea91 0f03 	teq	r1, r3
   bbfce:	bf58      	it	pl
   bbfd0:	4299      	cmppl	r1, r3
   bbfd2:	bf08      	it	eq
   bbfd4:	4290      	cmpeq	r0, r2
   bbfd6:	bf2c      	ite	cs
   bbfd8:	17d8      	asrcs	r0, r3, #31
   bbfda:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bbfde:	f040 0001 	orr.w	r0, r0, #1
   bbfe2:	4770      	bx	lr
   bbfe4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbfe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbfec:	d102      	bne.n	bbff4 <__cmpdf2+0x64>
   bbfee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bbff2:	d107      	bne.n	bc004 <__cmpdf2+0x74>
   bbff4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbff8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbffc:	d1d6      	bne.n	bbfac <__cmpdf2+0x1c>
   bbffe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bc002:	d0d3      	beq.n	bbfac <__cmpdf2+0x1c>
   bc004:	f85d 0b04 	ldr.w	r0, [sp], #4
   bc008:	4770      	bx	lr
   bc00a:	bf00      	nop

000bc00c <__aeabi_cdrcmple>:
   bc00c:	4684      	mov	ip, r0
   bc00e:	4610      	mov	r0, r2
   bc010:	4662      	mov	r2, ip
   bc012:	468c      	mov	ip, r1
   bc014:	4619      	mov	r1, r3
   bc016:	4663      	mov	r3, ip
   bc018:	e000      	b.n	bc01c <__aeabi_cdcmpeq>
   bc01a:	bf00      	nop

000bc01c <__aeabi_cdcmpeq>:
   bc01c:	b501      	push	{r0, lr}
   bc01e:	f7ff ffb7 	bl	bbf90 <__cmpdf2>
   bc022:	2800      	cmp	r0, #0
   bc024:	bf48      	it	mi
   bc026:	f110 0f00 	cmnmi.w	r0, #0
   bc02a:	bd01      	pop	{r0, pc}

000bc02c <__aeabi_dcmpeq>:
   bc02c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc030:	f7ff fff4 	bl	bc01c <__aeabi_cdcmpeq>
   bc034:	bf0c      	ite	eq
   bc036:	2001      	moveq	r0, #1
   bc038:	2000      	movne	r0, #0
   bc03a:	f85d fb08 	ldr.w	pc, [sp], #8
   bc03e:	bf00      	nop

000bc040 <__aeabi_dcmplt>:
   bc040:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc044:	f7ff ffea 	bl	bc01c <__aeabi_cdcmpeq>
   bc048:	bf34      	ite	cc
   bc04a:	2001      	movcc	r0, #1
   bc04c:	2000      	movcs	r0, #0
   bc04e:	f85d fb08 	ldr.w	pc, [sp], #8
   bc052:	bf00      	nop

000bc054 <__aeabi_dcmple>:
   bc054:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc058:	f7ff ffe0 	bl	bc01c <__aeabi_cdcmpeq>
   bc05c:	bf94      	ite	ls
   bc05e:	2001      	movls	r0, #1
   bc060:	2000      	movhi	r0, #0
   bc062:	f85d fb08 	ldr.w	pc, [sp], #8
   bc066:	bf00      	nop

000bc068 <__aeabi_dcmpge>:
   bc068:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc06c:	f7ff ffce 	bl	bc00c <__aeabi_cdrcmple>
   bc070:	bf94      	ite	ls
   bc072:	2001      	movls	r0, #1
   bc074:	2000      	movhi	r0, #0
   bc076:	f85d fb08 	ldr.w	pc, [sp], #8
   bc07a:	bf00      	nop

000bc07c <__aeabi_dcmpgt>:
   bc07c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc080:	f7ff ffc4 	bl	bc00c <__aeabi_cdrcmple>
   bc084:	bf34      	ite	cc
   bc086:	2001      	movcc	r0, #1
   bc088:	2000      	movcs	r0, #0
   bc08a:	f85d fb08 	ldr.w	pc, [sp], #8
   bc08e:	bf00      	nop

000bc090 <__aeabi_dcmpun>:
   bc090:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bc094:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc098:	d102      	bne.n	bc0a0 <__aeabi_dcmpun+0x10>
   bc09a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bc09e:	d10a      	bne.n	bc0b6 <__aeabi_dcmpun+0x26>
   bc0a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bc0a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc0a8:	d102      	bne.n	bc0b0 <__aeabi_dcmpun+0x20>
   bc0aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bc0ae:	d102      	bne.n	bc0b6 <__aeabi_dcmpun+0x26>
   bc0b0:	f04f 0000 	mov.w	r0, #0
   bc0b4:	4770      	bx	lr
   bc0b6:	f04f 0001 	mov.w	r0, #1
   bc0ba:	4770      	bx	lr

000bc0bc <__aeabi_d2uiz>:
   bc0bc:	004a      	lsls	r2, r1, #1
   bc0be:	d211      	bcs.n	bc0e4 <__aeabi_d2uiz+0x28>
   bc0c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bc0c4:	d211      	bcs.n	bc0ea <__aeabi_d2uiz+0x2e>
   bc0c6:	d50d      	bpl.n	bc0e4 <__aeabi_d2uiz+0x28>
   bc0c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bc0cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bc0d0:	d40e      	bmi.n	bc0f0 <__aeabi_d2uiz+0x34>
   bc0d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bc0d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bc0da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bc0de:	fa23 f002 	lsr.w	r0, r3, r2
   bc0e2:	4770      	bx	lr
   bc0e4:	f04f 0000 	mov.w	r0, #0
   bc0e8:	4770      	bx	lr
   bc0ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bc0ee:	d102      	bne.n	bc0f6 <__aeabi_d2uiz+0x3a>
   bc0f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc0f4:	4770      	bx	lr
   bc0f6:	f04f 0000 	mov.w	r0, #0
   bc0fa:	4770      	bx	lr

000bc0fc <__aeabi_d2f>:
   bc0fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bc100:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bc104:	bf24      	itt	cs
   bc106:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bc10a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bc10e:	d90d      	bls.n	bc12c <__aeabi_d2f+0x30>
   bc110:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bc114:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bc118:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bc11c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bc120:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bc124:	bf08      	it	eq
   bc126:	f020 0001 	biceq.w	r0, r0, #1
   bc12a:	4770      	bx	lr
   bc12c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bc130:	d121      	bne.n	bc176 <__aeabi_d2f+0x7a>
   bc132:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bc136:	bfbc      	itt	lt
   bc138:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bc13c:	4770      	bxlt	lr
   bc13e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc142:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bc146:	f1c2 0218 	rsb	r2, r2, #24
   bc14a:	f1c2 0c20 	rsb	ip, r2, #32
   bc14e:	fa10 f30c 	lsls.w	r3, r0, ip
   bc152:	fa20 f002 	lsr.w	r0, r0, r2
   bc156:	bf18      	it	ne
   bc158:	f040 0001 	orrne.w	r0, r0, #1
   bc15c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bc160:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bc164:	fa03 fc0c 	lsl.w	ip, r3, ip
   bc168:	ea40 000c 	orr.w	r0, r0, ip
   bc16c:	fa23 f302 	lsr.w	r3, r3, r2
   bc170:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bc174:	e7cc      	b.n	bc110 <__aeabi_d2f+0x14>
   bc176:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bc17a:	d107      	bne.n	bc18c <__aeabi_d2f+0x90>
   bc17c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bc180:	bf1e      	ittt	ne
   bc182:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bc186:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bc18a:	4770      	bxne	lr
   bc18c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bc190:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bc194:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bc198:	4770      	bx	lr
   bc19a:	bf00      	nop

000bc19c <__aeabi_d2ulz>:
   bc19c:	b5d0      	push	{r4, r6, r7, lr}
   bc19e:	4b0c      	ldr	r3, [pc, #48]	; (bc1d0 <__aeabi_d2ulz+0x34>)
   bc1a0:	2200      	movs	r2, #0
   bc1a2:	4606      	mov	r6, r0
   bc1a4:	460f      	mov	r7, r1
   bc1a6:	f7ff fcd9 	bl	bbb5c <__aeabi_dmul>
   bc1aa:	f7ff ff87 	bl	bc0bc <__aeabi_d2uiz>
   bc1ae:	4604      	mov	r4, r0
   bc1b0:	f7ff fc5a 	bl	bba68 <__aeabi_ui2d>
   bc1b4:	4b07      	ldr	r3, [pc, #28]	; (bc1d4 <__aeabi_d2ulz+0x38>)
   bc1b6:	2200      	movs	r2, #0
   bc1b8:	f7ff fcd0 	bl	bbb5c <__aeabi_dmul>
   bc1bc:	4602      	mov	r2, r0
   bc1be:	460b      	mov	r3, r1
   bc1c0:	4630      	mov	r0, r6
   bc1c2:	4639      	mov	r1, r7
   bc1c4:	f7ff fb12 	bl	bb7ec <__aeabi_dsub>
   bc1c8:	f7ff ff78 	bl	bc0bc <__aeabi_d2uiz>
   bc1cc:	4621      	mov	r1, r4
   bc1ce:	bdd0      	pop	{r4, r6, r7, pc}
   bc1d0:	3df00000 	.word	0x3df00000
   bc1d4:	41f00000 	.word	0x41f00000

000bc1d8 <atexit>:
   bc1d8:	2300      	movs	r3, #0
   bc1da:	4601      	mov	r1, r0
   bc1dc:	461a      	mov	r2, r3
   bc1de:	4618      	mov	r0, r3
   bc1e0:	f000 bfcc 	b.w	bd17c <__register_exitproc>

000bc1e4 <atoi>:
   bc1e4:	220a      	movs	r2, #10
   bc1e6:	2100      	movs	r1, #0
   bc1e8:	f000 bfbe 	b.w	bd168 <strtol>

000bc1ec <memcmp>:
   bc1ec:	b510      	push	{r4, lr}
   bc1ee:	3901      	subs	r1, #1
   bc1f0:	4402      	add	r2, r0
   bc1f2:	4290      	cmp	r0, r2
   bc1f4:	d101      	bne.n	bc1fa <memcmp+0xe>
   bc1f6:	2000      	movs	r0, #0
   bc1f8:	e005      	b.n	bc206 <memcmp+0x1a>
   bc1fa:	7803      	ldrb	r3, [r0, #0]
   bc1fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bc200:	42a3      	cmp	r3, r4
   bc202:	d001      	beq.n	bc208 <memcmp+0x1c>
   bc204:	1b18      	subs	r0, r3, r4
   bc206:	bd10      	pop	{r4, pc}
   bc208:	3001      	adds	r0, #1
   bc20a:	e7f2      	b.n	bc1f2 <memcmp+0x6>

000bc20c <memcpy>:
   bc20c:	440a      	add	r2, r1
   bc20e:	4291      	cmp	r1, r2
   bc210:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bc214:	d100      	bne.n	bc218 <memcpy+0xc>
   bc216:	4770      	bx	lr
   bc218:	b510      	push	{r4, lr}
   bc21a:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc21e:	f803 4f01 	strb.w	r4, [r3, #1]!
   bc222:	4291      	cmp	r1, r2
   bc224:	d1f9      	bne.n	bc21a <memcpy+0xe>
   bc226:	bd10      	pop	{r4, pc}

000bc228 <memmove>:
   bc228:	4288      	cmp	r0, r1
   bc22a:	b510      	push	{r4, lr}
   bc22c:	eb01 0402 	add.w	r4, r1, r2
   bc230:	d902      	bls.n	bc238 <memmove+0x10>
   bc232:	4284      	cmp	r4, r0
   bc234:	4623      	mov	r3, r4
   bc236:	d807      	bhi.n	bc248 <memmove+0x20>
   bc238:	1e43      	subs	r3, r0, #1
   bc23a:	42a1      	cmp	r1, r4
   bc23c:	d008      	beq.n	bc250 <memmove+0x28>
   bc23e:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc242:	f803 2f01 	strb.w	r2, [r3, #1]!
   bc246:	e7f8      	b.n	bc23a <memmove+0x12>
   bc248:	4402      	add	r2, r0
   bc24a:	4601      	mov	r1, r0
   bc24c:	428a      	cmp	r2, r1
   bc24e:	d100      	bne.n	bc252 <memmove+0x2a>
   bc250:	bd10      	pop	{r4, pc}
   bc252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bc256:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bc25a:	e7f7      	b.n	bc24c <memmove+0x24>

000bc25c <memset>:
   bc25c:	4402      	add	r2, r0
   bc25e:	4603      	mov	r3, r0
   bc260:	4293      	cmp	r3, r2
   bc262:	d100      	bne.n	bc266 <memset+0xa>
   bc264:	4770      	bx	lr
   bc266:	f803 1b01 	strb.w	r1, [r3], #1
   bc26a:	e7f9      	b.n	bc260 <memset+0x4>

000bc26c <srand>:
   bc26c:	b538      	push	{r3, r4, r5, lr}
   bc26e:	4b10      	ldr	r3, [pc, #64]	; (bc2b0 <srand+0x44>)
   bc270:	681d      	ldr	r5, [r3, #0]
   bc272:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc274:	4604      	mov	r4, r0
   bc276:	b9b3      	cbnz	r3, bc2a6 <srand+0x3a>
   bc278:	2018      	movs	r0, #24
   bc27a:	f7fc fc61 	bl	b8b40 <malloc>
   bc27e:	4602      	mov	r2, r0
   bc280:	63a8      	str	r0, [r5, #56]	; 0x38
   bc282:	b920      	cbnz	r0, bc28e <srand+0x22>
   bc284:	4b0b      	ldr	r3, [pc, #44]	; (bc2b4 <srand+0x48>)
   bc286:	480c      	ldr	r0, [pc, #48]	; (bc2b8 <srand+0x4c>)
   bc288:	2142      	movs	r1, #66	; 0x42
   bc28a:	f7fc fc99 	bl	b8bc0 <__assert_func>
   bc28e:	490b      	ldr	r1, [pc, #44]	; (bc2bc <srand+0x50>)
   bc290:	4b0b      	ldr	r3, [pc, #44]	; (bc2c0 <srand+0x54>)
   bc292:	e9c0 1300 	strd	r1, r3, [r0]
   bc296:	4b0b      	ldr	r3, [pc, #44]	; (bc2c4 <srand+0x58>)
   bc298:	6083      	str	r3, [r0, #8]
   bc29a:	230b      	movs	r3, #11
   bc29c:	8183      	strh	r3, [r0, #12]
   bc29e:	2100      	movs	r1, #0
   bc2a0:	2001      	movs	r0, #1
   bc2a2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bc2a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc2a8:	2200      	movs	r2, #0
   bc2aa:	611c      	str	r4, [r3, #16]
   bc2ac:	615a      	str	r2, [r3, #20]
   bc2ae:	bd38      	pop	{r3, r4, r5, pc}
   bc2b0:	200350c8 	.word	0x200350c8
   bc2b4:	000bedd1 	.word	0x000bedd1
   bc2b8:	000bede8 	.word	0x000bede8
   bc2bc:	abcd330e 	.word	0xabcd330e
   bc2c0:	e66d1234 	.word	0xe66d1234
   bc2c4:	0005deec 	.word	0x0005deec

000bc2c8 <strcmp>:
   bc2c8:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc2cc:	f811 3b01 	ldrb.w	r3, [r1], #1
   bc2d0:	2a01      	cmp	r2, #1
   bc2d2:	bf28      	it	cs
   bc2d4:	429a      	cmpcs	r2, r3
   bc2d6:	d0f7      	beq.n	bc2c8 <strcmp>
   bc2d8:	1ad0      	subs	r0, r2, r3
   bc2da:	4770      	bx	lr

000bc2dc <strcpy>:
   bc2dc:	4603      	mov	r3, r0
   bc2de:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc2e2:	f803 2b01 	strb.w	r2, [r3], #1
   bc2e6:	2a00      	cmp	r2, #0
   bc2e8:	d1f9      	bne.n	bc2de <strcpy+0x2>
   bc2ea:	4770      	bx	lr

000bc2ec <strlen>:
   bc2ec:	4603      	mov	r3, r0
   bc2ee:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc2f2:	2a00      	cmp	r2, #0
   bc2f4:	d1fb      	bne.n	bc2ee <strlen+0x2>
   bc2f6:	1a18      	subs	r0, r3, r0
   bc2f8:	3801      	subs	r0, #1
   bc2fa:	4770      	bx	lr

000bc2fc <strncmp>:
   bc2fc:	b510      	push	{r4, lr}
   bc2fe:	b17a      	cbz	r2, bc320 <strncmp+0x24>
   bc300:	4603      	mov	r3, r0
   bc302:	3901      	subs	r1, #1
   bc304:	1884      	adds	r4, r0, r2
   bc306:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc30a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bc30e:	4290      	cmp	r0, r2
   bc310:	d101      	bne.n	bc316 <strncmp+0x1a>
   bc312:	42a3      	cmp	r3, r4
   bc314:	d101      	bne.n	bc31a <strncmp+0x1e>
   bc316:	1a80      	subs	r0, r0, r2
   bc318:	bd10      	pop	{r4, pc}
   bc31a:	2800      	cmp	r0, #0
   bc31c:	d1f3      	bne.n	bc306 <strncmp+0xa>
   bc31e:	e7fa      	b.n	bc316 <strncmp+0x1a>
   bc320:	4610      	mov	r0, r2
   bc322:	e7f9      	b.n	bc318 <strncmp+0x1c>

000bc324 <strnlen>:
   bc324:	b510      	push	{r4, lr}
   bc326:	4602      	mov	r2, r0
   bc328:	4401      	add	r1, r0
   bc32a:	428a      	cmp	r2, r1
   bc32c:	4613      	mov	r3, r2
   bc32e:	d003      	beq.n	bc338 <strnlen+0x14>
   bc330:	781c      	ldrb	r4, [r3, #0]
   bc332:	3201      	adds	r2, #1
   bc334:	2c00      	cmp	r4, #0
   bc336:	d1f8      	bne.n	bc32a <strnlen+0x6>
   bc338:	1a18      	subs	r0, r3, r0
   bc33a:	bd10      	pop	{r4, pc}

000bc33c <strstr>:
   bc33c:	780a      	ldrb	r2, [r1, #0]
   bc33e:	b570      	push	{r4, r5, r6, lr}
   bc340:	b96a      	cbnz	r2, bc35e <strstr+0x22>
   bc342:	bd70      	pop	{r4, r5, r6, pc}
   bc344:	429a      	cmp	r2, r3
   bc346:	d109      	bne.n	bc35c <strstr+0x20>
   bc348:	460c      	mov	r4, r1
   bc34a:	4605      	mov	r5, r0
   bc34c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bc350:	2b00      	cmp	r3, #0
   bc352:	d0f6      	beq.n	bc342 <strstr+0x6>
   bc354:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bc358:	429e      	cmp	r6, r3
   bc35a:	d0f7      	beq.n	bc34c <strstr+0x10>
   bc35c:	3001      	adds	r0, #1
   bc35e:	7803      	ldrb	r3, [r0, #0]
   bc360:	2b00      	cmp	r3, #0
   bc362:	d1ef      	bne.n	bc344 <strstr+0x8>
   bc364:	4618      	mov	r0, r3
   bc366:	e7ec      	b.n	bc342 <strstr+0x6>

000bc368 <sulp>:
   bc368:	b570      	push	{r4, r5, r6, lr}
   bc36a:	4604      	mov	r4, r0
   bc36c:	460d      	mov	r5, r1
   bc36e:	ec45 4b10 	vmov	d0, r4, r5
   bc372:	4616      	mov	r6, r2
   bc374:	f001 fe5c 	bl	be030 <__ulp>
   bc378:	ec51 0b10 	vmov	r0, r1, d0
   bc37c:	b17e      	cbz	r6, bc39e <sulp+0x36>
   bc37e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bc382:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bc386:	2b00      	cmp	r3, #0
   bc388:	dd09      	ble.n	bc39e <sulp+0x36>
   bc38a:	051b      	lsls	r3, r3, #20
   bc38c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bc390:	2400      	movs	r4, #0
   bc392:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bc396:	4622      	mov	r2, r4
   bc398:	462b      	mov	r3, r5
   bc39a:	f7ff fbdf 	bl	bbb5c <__aeabi_dmul>
   bc39e:	bd70      	pop	{r4, r5, r6, pc}

000bc3a0 <_strtod_l>:
   bc3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc3a4:	ed2d 8b02 	vpush	{d8}
   bc3a8:	b09d      	sub	sp, #116	; 0x74
   bc3aa:	461f      	mov	r7, r3
   bc3ac:	2300      	movs	r3, #0
   bc3ae:	9318      	str	r3, [sp, #96]	; 0x60
   bc3b0:	4ba2      	ldr	r3, [pc, #648]	; (bc63c <_strtod_l+0x29c>)
   bc3b2:	9213      	str	r2, [sp, #76]	; 0x4c
   bc3b4:	681b      	ldr	r3, [r3, #0]
   bc3b6:	9305      	str	r3, [sp, #20]
   bc3b8:	4604      	mov	r4, r0
   bc3ba:	4618      	mov	r0, r3
   bc3bc:	4688      	mov	r8, r1
   bc3be:	f7ff ff95 	bl	bc2ec <strlen>
   bc3c2:	f04f 0a00 	mov.w	sl, #0
   bc3c6:	4605      	mov	r5, r0
   bc3c8:	f04f 0b00 	mov.w	fp, #0
   bc3cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc3d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc3d2:	781a      	ldrb	r2, [r3, #0]
   bc3d4:	2a2b      	cmp	r2, #43	; 0x2b
   bc3d6:	d04e      	beq.n	bc476 <_strtod_l+0xd6>
   bc3d8:	d83b      	bhi.n	bc452 <_strtod_l+0xb2>
   bc3da:	2a0d      	cmp	r2, #13
   bc3dc:	d834      	bhi.n	bc448 <_strtod_l+0xa8>
   bc3de:	2a08      	cmp	r2, #8
   bc3e0:	d834      	bhi.n	bc44c <_strtod_l+0xac>
   bc3e2:	2a00      	cmp	r2, #0
   bc3e4:	d03e      	beq.n	bc464 <_strtod_l+0xc4>
   bc3e6:	2300      	movs	r3, #0
   bc3e8:	930a      	str	r3, [sp, #40]	; 0x28
   bc3ea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bc3ec:	7833      	ldrb	r3, [r6, #0]
   bc3ee:	2b30      	cmp	r3, #48	; 0x30
   bc3f0:	f040 80b0 	bne.w	bc554 <_strtod_l+0x1b4>
   bc3f4:	7873      	ldrb	r3, [r6, #1]
   bc3f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc3fa:	2b58      	cmp	r3, #88	; 0x58
   bc3fc:	d168      	bne.n	bc4d0 <_strtod_l+0x130>
   bc3fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bc400:	9301      	str	r3, [sp, #4]
   bc402:	ab18      	add	r3, sp, #96	; 0x60
   bc404:	9702      	str	r7, [sp, #8]
   bc406:	9300      	str	r3, [sp, #0]
   bc408:	4a8d      	ldr	r2, [pc, #564]	; (bc640 <_strtod_l+0x2a0>)
   bc40a:	ab19      	add	r3, sp, #100	; 0x64
   bc40c:	a917      	add	r1, sp, #92	; 0x5c
   bc40e:	4620      	mov	r0, r4
   bc410:	f000 ff7e 	bl	bd310 <__gethex>
   bc414:	f010 0707 	ands.w	r7, r0, #7
   bc418:	4605      	mov	r5, r0
   bc41a:	d005      	beq.n	bc428 <_strtod_l+0x88>
   bc41c:	2f06      	cmp	r7, #6
   bc41e:	d12c      	bne.n	bc47a <_strtod_l+0xda>
   bc420:	3601      	adds	r6, #1
   bc422:	2300      	movs	r3, #0
   bc424:	9617      	str	r6, [sp, #92]	; 0x5c
   bc426:	930a      	str	r3, [sp, #40]	; 0x28
   bc428:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bc42a:	2b00      	cmp	r3, #0
   bc42c:	f040 8590 	bne.w	bcf50 <_strtod_l+0xbb0>
   bc430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bc432:	b1eb      	cbz	r3, bc470 <_strtod_l+0xd0>
   bc434:	4652      	mov	r2, sl
   bc436:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bc43a:	ec43 2b10 	vmov	d0, r2, r3
   bc43e:	b01d      	add	sp, #116	; 0x74
   bc440:	ecbd 8b02 	vpop	{d8}
   bc444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc448:	2a20      	cmp	r2, #32
   bc44a:	d1cc      	bne.n	bc3e6 <_strtod_l+0x46>
   bc44c:	3301      	adds	r3, #1
   bc44e:	9317      	str	r3, [sp, #92]	; 0x5c
   bc450:	e7be      	b.n	bc3d0 <_strtod_l+0x30>
   bc452:	2a2d      	cmp	r2, #45	; 0x2d
   bc454:	d1c7      	bne.n	bc3e6 <_strtod_l+0x46>
   bc456:	2201      	movs	r2, #1
   bc458:	920a      	str	r2, [sp, #40]	; 0x28
   bc45a:	1c5a      	adds	r2, r3, #1
   bc45c:	9217      	str	r2, [sp, #92]	; 0x5c
   bc45e:	785b      	ldrb	r3, [r3, #1]
   bc460:	2b00      	cmp	r3, #0
   bc462:	d1c2      	bne.n	bc3ea <_strtod_l+0x4a>
   bc464:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bc466:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc46a:	2b00      	cmp	r3, #0
   bc46c:	f040 856e 	bne.w	bcf4c <_strtod_l+0xbac>
   bc470:	4652      	mov	r2, sl
   bc472:	465b      	mov	r3, fp
   bc474:	e7e1      	b.n	bc43a <_strtod_l+0x9a>
   bc476:	2200      	movs	r2, #0
   bc478:	e7ee      	b.n	bc458 <_strtod_l+0xb8>
   bc47a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bc47c:	b13a      	cbz	r2, bc48e <_strtod_l+0xee>
   bc47e:	2135      	movs	r1, #53	; 0x35
   bc480:	a81a      	add	r0, sp, #104	; 0x68
   bc482:	f001 fee0 	bl	be246 <__copybits>
   bc486:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc488:	4620      	mov	r0, r4
   bc48a:	f001 fa9f 	bl	bd9cc <_Bfree>
   bc48e:	3f01      	subs	r7, #1
   bc490:	2f04      	cmp	r7, #4
   bc492:	d806      	bhi.n	bc4a2 <_strtod_l+0x102>
   bc494:	e8df f007 	tbb	[pc, r7]
   bc498:	1714030a 	.word	0x1714030a
   bc49c:	0a          	.byte	0x0a
   bc49d:	00          	.byte	0x00
   bc49e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bc4a2:	0728      	lsls	r0, r5, #28
   bc4a4:	d5c0      	bpl.n	bc428 <_strtod_l+0x88>
   bc4a6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bc4aa:	e7bd      	b.n	bc428 <_strtod_l+0x88>
   bc4ac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bc4b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bc4b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bc4b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bc4ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bc4be:	e7f0      	b.n	bc4a2 <_strtod_l+0x102>
   bc4c0:	f8df b180 	ldr.w	fp, [pc, #384]	; bc644 <_strtod_l+0x2a4>
   bc4c4:	e7ed      	b.n	bc4a2 <_strtod_l+0x102>
   bc4c6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bc4ca:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc4ce:	e7e8      	b.n	bc4a2 <_strtod_l+0x102>
   bc4d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc4d2:	1c5a      	adds	r2, r3, #1
   bc4d4:	9217      	str	r2, [sp, #92]	; 0x5c
   bc4d6:	785b      	ldrb	r3, [r3, #1]
   bc4d8:	2b30      	cmp	r3, #48	; 0x30
   bc4da:	d0f9      	beq.n	bc4d0 <_strtod_l+0x130>
   bc4dc:	2b00      	cmp	r3, #0
   bc4de:	d0a3      	beq.n	bc428 <_strtod_l+0x88>
   bc4e0:	2301      	movs	r3, #1
   bc4e2:	f04f 0900 	mov.w	r9, #0
   bc4e6:	9304      	str	r3, [sp, #16]
   bc4e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc4ea:	9308      	str	r3, [sp, #32]
   bc4ec:	f8cd 901c 	str.w	r9, [sp, #28]
   bc4f0:	464f      	mov	r7, r9
   bc4f2:	220a      	movs	r2, #10
   bc4f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bc4f6:	7806      	ldrb	r6, [r0, #0]
   bc4f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bc4fc:	b2d9      	uxtb	r1, r3
   bc4fe:	2909      	cmp	r1, #9
   bc500:	d92a      	bls.n	bc558 <_strtod_l+0x1b8>
   bc502:	9905      	ldr	r1, [sp, #20]
   bc504:	462a      	mov	r2, r5
   bc506:	f7ff fef9 	bl	bc2fc <strncmp>
   bc50a:	b398      	cbz	r0, bc574 <_strtod_l+0x1d4>
   bc50c:	2000      	movs	r0, #0
   bc50e:	4632      	mov	r2, r6
   bc510:	463d      	mov	r5, r7
   bc512:	9005      	str	r0, [sp, #20]
   bc514:	4603      	mov	r3, r0
   bc516:	2a65      	cmp	r2, #101	; 0x65
   bc518:	d001      	beq.n	bc51e <_strtod_l+0x17e>
   bc51a:	2a45      	cmp	r2, #69	; 0x45
   bc51c:	d118      	bne.n	bc550 <_strtod_l+0x1b0>
   bc51e:	b91d      	cbnz	r5, bc528 <_strtod_l+0x188>
   bc520:	9a04      	ldr	r2, [sp, #16]
   bc522:	4302      	orrs	r2, r0
   bc524:	d09e      	beq.n	bc464 <_strtod_l+0xc4>
   bc526:	2500      	movs	r5, #0
   bc528:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bc52c:	f108 0201 	add.w	r2, r8, #1
   bc530:	9217      	str	r2, [sp, #92]	; 0x5c
   bc532:	f898 2001 	ldrb.w	r2, [r8, #1]
   bc536:	2a2b      	cmp	r2, #43	; 0x2b
   bc538:	d075      	beq.n	bc626 <_strtod_l+0x286>
   bc53a:	2a2d      	cmp	r2, #45	; 0x2d
   bc53c:	d07b      	beq.n	bc636 <_strtod_l+0x296>
   bc53e:	f04f 0c00 	mov.w	ip, #0
   bc542:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bc546:	2909      	cmp	r1, #9
   bc548:	f240 8082 	bls.w	bc650 <_strtod_l+0x2b0>
   bc54c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc550:	2600      	movs	r6, #0
   bc552:	e09d      	b.n	bc690 <_strtod_l+0x2f0>
   bc554:	2300      	movs	r3, #0
   bc556:	e7c4      	b.n	bc4e2 <_strtod_l+0x142>
   bc558:	2f08      	cmp	r7, #8
   bc55a:	bfd8      	it	le
   bc55c:	9907      	ldrle	r1, [sp, #28]
   bc55e:	f100 0001 	add.w	r0, r0, #1
   bc562:	bfda      	itte	le
   bc564:	fb02 3301 	mlale	r3, r2, r1, r3
   bc568:	9307      	strle	r3, [sp, #28]
   bc56a:	fb02 3909 	mlagt	r9, r2, r9, r3
   bc56e:	3701      	adds	r7, #1
   bc570:	9017      	str	r0, [sp, #92]	; 0x5c
   bc572:	e7bf      	b.n	bc4f4 <_strtod_l+0x154>
   bc574:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc576:	195a      	adds	r2, r3, r5
   bc578:	9217      	str	r2, [sp, #92]	; 0x5c
   bc57a:	5d5a      	ldrb	r2, [r3, r5]
   bc57c:	2f00      	cmp	r7, #0
   bc57e:	d037      	beq.n	bc5f0 <_strtod_l+0x250>
   bc580:	9005      	str	r0, [sp, #20]
   bc582:	463d      	mov	r5, r7
   bc584:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bc588:	2b09      	cmp	r3, #9
   bc58a:	d912      	bls.n	bc5b2 <_strtod_l+0x212>
   bc58c:	2301      	movs	r3, #1
   bc58e:	e7c2      	b.n	bc516 <_strtod_l+0x176>
   bc590:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc592:	1c5a      	adds	r2, r3, #1
   bc594:	9217      	str	r2, [sp, #92]	; 0x5c
   bc596:	785a      	ldrb	r2, [r3, #1]
   bc598:	3001      	adds	r0, #1
   bc59a:	2a30      	cmp	r2, #48	; 0x30
   bc59c:	d0f8      	beq.n	bc590 <_strtod_l+0x1f0>
   bc59e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bc5a2:	2b08      	cmp	r3, #8
   bc5a4:	f200 84d9 	bhi.w	bcf5a <_strtod_l+0xbba>
   bc5a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc5aa:	9005      	str	r0, [sp, #20]
   bc5ac:	2000      	movs	r0, #0
   bc5ae:	9308      	str	r3, [sp, #32]
   bc5b0:	4605      	mov	r5, r0
   bc5b2:	3a30      	subs	r2, #48	; 0x30
   bc5b4:	f100 0301 	add.w	r3, r0, #1
   bc5b8:	d014      	beq.n	bc5e4 <_strtod_l+0x244>
   bc5ba:	9905      	ldr	r1, [sp, #20]
   bc5bc:	4419      	add	r1, r3
   bc5be:	9105      	str	r1, [sp, #20]
   bc5c0:	462b      	mov	r3, r5
   bc5c2:	eb00 0e05 	add.w	lr, r0, r5
   bc5c6:	210a      	movs	r1, #10
   bc5c8:	4573      	cmp	r3, lr
   bc5ca:	d113      	bne.n	bc5f4 <_strtod_l+0x254>
   bc5cc:	182b      	adds	r3, r5, r0
   bc5ce:	2b08      	cmp	r3, #8
   bc5d0:	f105 0501 	add.w	r5, r5, #1
   bc5d4:	4405      	add	r5, r0
   bc5d6:	dc1c      	bgt.n	bc612 <_strtod_l+0x272>
   bc5d8:	9907      	ldr	r1, [sp, #28]
   bc5da:	230a      	movs	r3, #10
   bc5dc:	fb03 2301 	mla	r3, r3, r1, r2
   bc5e0:	9307      	str	r3, [sp, #28]
   bc5e2:	2300      	movs	r3, #0
   bc5e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc5e6:	1c51      	adds	r1, r2, #1
   bc5e8:	9117      	str	r1, [sp, #92]	; 0x5c
   bc5ea:	7852      	ldrb	r2, [r2, #1]
   bc5ec:	4618      	mov	r0, r3
   bc5ee:	e7c9      	b.n	bc584 <_strtod_l+0x1e4>
   bc5f0:	4638      	mov	r0, r7
   bc5f2:	e7d2      	b.n	bc59a <_strtod_l+0x1fa>
   bc5f4:	2b08      	cmp	r3, #8
   bc5f6:	dc04      	bgt.n	bc602 <_strtod_l+0x262>
   bc5f8:	9e07      	ldr	r6, [sp, #28]
   bc5fa:	434e      	muls	r6, r1
   bc5fc:	9607      	str	r6, [sp, #28]
   bc5fe:	3301      	adds	r3, #1
   bc600:	e7e2      	b.n	bc5c8 <_strtod_l+0x228>
   bc602:	f103 0c01 	add.w	ip, r3, #1
   bc606:	f1bc 0f10 	cmp.w	ip, #16
   bc60a:	bfd8      	it	le
   bc60c:	fb01 f909 	mulle.w	r9, r1, r9
   bc610:	e7f5      	b.n	bc5fe <_strtod_l+0x25e>
   bc612:	2d10      	cmp	r5, #16
   bc614:	bfdc      	itt	le
   bc616:	230a      	movle	r3, #10
   bc618:	fb03 2909 	mlale	r9, r3, r9, r2
   bc61c:	e7e1      	b.n	bc5e2 <_strtod_l+0x242>
   bc61e:	2300      	movs	r3, #0
   bc620:	9305      	str	r3, [sp, #20]
   bc622:	2301      	movs	r3, #1
   bc624:	e77c      	b.n	bc520 <_strtod_l+0x180>
   bc626:	f04f 0c00 	mov.w	ip, #0
   bc62a:	f108 0202 	add.w	r2, r8, #2
   bc62e:	9217      	str	r2, [sp, #92]	; 0x5c
   bc630:	f898 2002 	ldrb.w	r2, [r8, #2]
   bc634:	e785      	b.n	bc542 <_strtod_l+0x1a2>
   bc636:	f04f 0c01 	mov.w	ip, #1
   bc63a:	e7f6      	b.n	bc62a <_strtod_l+0x28a>
   bc63c:	000bf014 	.word	0x000bf014
   bc640:	000bee50 	.word	0x000bee50
   bc644:	7ff00000 	.word	0x7ff00000
   bc648:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc64a:	1c51      	adds	r1, r2, #1
   bc64c:	9117      	str	r1, [sp, #92]	; 0x5c
   bc64e:	7852      	ldrb	r2, [r2, #1]
   bc650:	2a30      	cmp	r2, #48	; 0x30
   bc652:	d0f9      	beq.n	bc648 <_strtod_l+0x2a8>
   bc654:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bc658:	2908      	cmp	r1, #8
   bc65a:	f63f af79 	bhi.w	bc550 <_strtod_l+0x1b0>
   bc65e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bc662:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc664:	9206      	str	r2, [sp, #24]
   bc666:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc668:	1c51      	adds	r1, r2, #1
   bc66a:	9117      	str	r1, [sp, #92]	; 0x5c
   bc66c:	7852      	ldrb	r2, [r2, #1]
   bc66e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bc672:	2e09      	cmp	r6, #9
   bc674:	d937      	bls.n	bc6e6 <_strtod_l+0x346>
   bc676:	9e06      	ldr	r6, [sp, #24]
   bc678:	1b89      	subs	r1, r1, r6
   bc67a:	2908      	cmp	r1, #8
   bc67c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bc680:	dc02      	bgt.n	bc688 <_strtod_l+0x2e8>
   bc682:	4576      	cmp	r6, lr
   bc684:	bfa8      	it	ge
   bc686:	4676      	movge	r6, lr
   bc688:	f1bc 0f00 	cmp.w	ip, #0
   bc68c:	d000      	beq.n	bc690 <_strtod_l+0x2f0>
   bc68e:	4276      	negs	r6, r6
   bc690:	2d00      	cmp	r5, #0
   bc692:	d14d      	bne.n	bc730 <_strtod_l+0x390>
   bc694:	9904      	ldr	r1, [sp, #16]
   bc696:	4301      	orrs	r1, r0
   bc698:	f47f aec6 	bne.w	bc428 <_strtod_l+0x88>
   bc69c:	2b00      	cmp	r3, #0
   bc69e:	f47f aee1 	bne.w	bc464 <_strtod_l+0xc4>
   bc6a2:	2a69      	cmp	r2, #105	; 0x69
   bc6a4:	d027      	beq.n	bc6f6 <_strtod_l+0x356>
   bc6a6:	dc24      	bgt.n	bc6f2 <_strtod_l+0x352>
   bc6a8:	2a49      	cmp	r2, #73	; 0x49
   bc6aa:	d024      	beq.n	bc6f6 <_strtod_l+0x356>
   bc6ac:	2a4e      	cmp	r2, #78	; 0x4e
   bc6ae:	f47f aed9 	bne.w	bc464 <_strtod_l+0xc4>
   bc6b2:	499f      	ldr	r1, [pc, #636]	; (bc930 <_strtod_l+0x590>)
   bc6b4:	a817      	add	r0, sp, #92	; 0x5c
   bc6b6:	f001 f883 	bl	bd7c0 <__match>
   bc6ba:	2800      	cmp	r0, #0
   bc6bc:	f43f aed2 	beq.w	bc464 <_strtod_l+0xc4>
   bc6c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc6c2:	781b      	ldrb	r3, [r3, #0]
   bc6c4:	2b28      	cmp	r3, #40	; 0x28
   bc6c6:	d12d      	bne.n	bc724 <_strtod_l+0x384>
   bc6c8:	499a      	ldr	r1, [pc, #616]	; (bc934 <_strtod_l+0x594>)
   bc6ca:	aa1a      	add	r2, sp, #104	; 0x68
   bc6cc:	a817      	add	r0, sp, #92	; 0x5c
   bc6ce:	f001 f88b 	bl	bd7e8 <__hexnan>
   bc6d2:	2805      	cmp	r0, #5
   bc6d4:	d126      	bne.n	bc724 <_strtod_l+0x384>
   bc6d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bc6d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bc6dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bc6e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bc6e4:	e6a0      	b.n	bc428 <_strtod_l+0x88>
   bc6e6:	210a      	movs	r1, #10
   bc6e8:	fb01 2e0e 	mla	lr, r1, lr, r2
   bc6ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bc6f0:	e7b9      	b.n	bc666 <_strtod_l+0x2c6>
   bc6f2:	2a6e      	cmp	r2, #110	; 0x6e
   bc6f4:	e7db      	b.n	bc6ae <_strtod_l+0x30e>
   bc6f6:	4990      	ldr	r1, [pc, #576]	; (bc938 <_strtod_l+0x598>)
   bc6f8:	a817      	add	r0, sp, #92	; 0x5c
   bc6fa:	f001 f861 	bl	bd7c0 <__match>
   bc6fe:	2800      	cmp	r0, #0
   bc700:	f43f aeb0 	beq.w	bc464 <_strtod_l+0xc4>
   bc704:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc706:	498d      	ldr	r1, [pc, #564]	; (bc93c <_strtod_l+0x59c>)
   bc708:	3b01      	subs	r3, #1
   bc70a:	a817      	add	r0, sp, #92	; 0x5c
   bc70c:	9317      	str	r3, [sp, #92]	; 0x5c
   bc70e:	f001 f857 	bl	bd7c0 <__match>
   bc712:	b910      	cbnz	r0, bc71a <_strtod_l+0x37a>
   bc714:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc716:	3301      	adds	r3, #1
   bc718:	9317      	str	r3, [sp, #92]	; 0x5c
   bc71a:	f8df b230 	ldr.w	fp, [pc, #560]	; bc94c <_strtod_l+0x5ac>
   bc71e:	f04f 0a00 	mov.w	sl, #0
   bc722:	e681      	b.n	bc428 <_strtod_l+0x88>
   bc724:	4886      	ldr	r0, [pc, #536]	; (bc940 <_strtod_l+0x5a0>)
   bc726:	f001 fde3 	bl	be2f0 <nan>
   bc72a:	ec5b ab10 	vmov	sl, fp, d0
   bc72e:	e67b      	b.n	bc428 <_strtod_l+0x88>
   bc730:	9b05      	ldr	r3, [sp, #20]
   bc732:	9807      	ldr	r0, [sp, #28]
   bc734:	1af3      	subs	r3, r6, r3
   bc736:	2f00      	cmp	r7, #0
   bc738:	bf08      	it	eq
   bc73a:	462f      	moveq	r7, r5
   bc73c:	2d10      	cmp	r5, #16
   bc73e:	9306      	str	r3, [sp, #24]
   bc740:	46a8      	mov	r8, r5
   bc742:	bfa8      	it	ge
   bc744:	f04f 0810 	movge.w	r8, #16
   bc748:	f7ff f98e 	bl	bba68 <__aeabi_ui2d>
   bc74c:	2d09      	cmp	r5, #9
   bc74e:	4682      	mov	sl, r0
   bc750:	468b      	mov	fp, r1
   bc752:	dd13      	ble.n	bc77c <_strtod_l+0x3dc>
   bc754:	4b7b      	ldr	r3, [pc, #492]	; (bc944 <_strtod_l+0x5a4>)
   bc756:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bc75a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bc75e:	f7ff f9fd 	bl	bbb5c <__aeabi_dmul>
   bc762:	4682      	mov	sl, r0
   bc764:	4648      	mov	r0, r9
   bc766:	468b      	mov	fp, r1
   bc768:	f7ff f97e 	bl	bba68 <__aeabi_ui2d>
   bc76c:	4602      	mov	r2, r0
   bc76e:	460b      	mov	r3, r1
   bc770:	4650      	mov	r0, sl
   bc772:	4659      	mov	r1, fp
   bc774:	f7ff f83c 	bl	bb7f0 <__adddf3>
   bc778:	4682      	mov	sl, r0
   bc77a:	468b      	mov	fp, r1
   bc77c:	2d0f      	cmp	r5, #15
   bc77e:	dc38      	bgt.n	bc7f2 <_strtod_l+0x452>
   bc780:	9b06      	ldr	r3, [sp, #24]
   bc782:	2b00      	cmp	r3, #0
   bc784:	f43f ae50 	beq.w	bc428 <_strtod_l+0x88>
   bc788:	dd24      	ble.n	bc7d4 <_strtod_l+0x434>
   bc78a:	2b16      	cmp	r3, #22
   bc78c:	dc0b      	bgt.n	bc7a6 <_strtod_l+0x406>
   bc78e:	496d      	ldr	r1, [pc, #436]	; (bc944 <_strtod_l+0x5a4>)
   bc790:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc794:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc798:	4652      	mov	r2, sl
   bc79a:	465b      	mov	r3, fp
   bc79c:	f7ff f9de 	bl	bbb5c <__aeabi_dmul>
   bc7a0:	4682      	mov	sl, r0
   bc7a2:	468b      	mov	fp, r1
   bc7a4:	e640      	b.n	bc428 <_strtod_l+0x88>
   bc7a6:	9a06      	ldr	r2, [sp, #24]
   bc7a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bc7ac:	4293      	cmp	r3, r2
   bc7ae:	db20      	blt.n	bc7f2 <_strtod_l+0x452>
   bc7b0:	4c64      	ldr	r4, [pc, #400]	; (bc944 <_strtod_l+0x5a4>)
   bc7b2:	f1c5 050f 	rsb	r5, r5, #15
   bc7b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bc7ba:	4652      	mov	r2, sl
   bc7bc:	465b      	mov	r3, fp
   bc7be:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc7c2:	f7ff f9cb 	bl	bbb5c <__aeabi_dmul>
   bc7c6:	9b06      	ldr	r3, [sp, #24]
   bc7c8:	1b5d      	subs	r5, r3, r5
   bc7ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bc7ce:	e9d4 2300 	ldrd	r2, r3, [r4]
   bc7d2:	e7e3      	b.n	bc79c <_strtod_l+0x3fc>
   bc7d4:	9b06      	ldr	r3, [sp, #24]
   bc7d6:	3316      	adds	r3, #22
   bc7d8:	db0b      	blt.n	bc7f2 <_strtod_l+0x452>
   bc7da:	9b05      	ldr	r3, [sp, #20]
   bc7dc:	1b9e      	subs	r6, r3, r6
   bc7de:	4b59      	ldr	r3, [pc, #356]	; (bc944 <_strtod_l+0x5a4>)
   bc7e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bc7e4:	e9d6 2300 	ldrd	r2, r3, [r6]
   bc7e8:	4650      	mov	r0, sl
   bc7ea:	4659      	mov	r1, fp
   bc7ec:	f7ff fae0 	bl	bbdb0 <__aeabi_ddiv>
   bc7f0:	e7d6      	b.n	bc7a0 <_strtod_l+0x400>
   bc7f2:	9b06      	ldr	r3, [sp, #24]
   bc7f4:	eba5 0808 	sub.w	r8, r5, r8
   bc7f8:	4498      	add	r8, r3
   bc7fa:	f1b8 0f00 	cmp.w	r8, #0
   bc7fe:	dd74      	ble.n	bc8ea <_strtod_l+0x54a>
   bc800:	f018 030f 	ands.w	r3, r8, #15
   bc804:	d00a      	beq.n	bc81c <_strtod_l+0x47c>
   bc806:	494f      	ldr	r1, [pc, #316]	; (bc944 <_strtod_l+0x5a4>)
   bc808:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc80c:	4652      	mov	r2, sl
   bc80e:	465b      	mov	r3, fp
   bc810:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc814:	f7ff f9a2 	bl	bbb5c <__aeabi_dmul>
   bc818:	4682      	mov	sl, r0
   bc81a:	468b      	mov	fp, r1
   bc81c:	f038 080f 	bics.w	r8, r8, #15
   bc820:	d04f      	beq.n	bc8c2 <_strtod_l+0x522>
   bc822:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bc826:	dd22      	ble.n	bc86e <_strtod_l+0x4ce>
   bc828:	2500      	movs	r5, #0
   bc82a:	462e      	mov	r6, r5
   bc82c:	9507      	str	r5, [sp, #28]
   bc82e:	9505      	str	r5, [sp, #20]
   bc830:	2322      	movs	r3, #34	; 0x22
   bc832:	f8df b118 	ldr.w	fp, [pc, #280]	; bc94c <_strtod_l+0x5ac>
   bc836:	6023      	str	r3, [r4, #0]
   bc838:	f04f 0a00 	mov.w	sl, #0
   bc83c:	9b07      	ldr	r3, [sp, #28]
   bc83e:	2b00      	cmp	r3, #0
   bc840:	f43f adf2 	beq.w	bc428 <_strtod_l+0x88>
   bc844:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc846:	4620      	mov	r0, r4
   bc848:	f001 f8c0 	bl	bd9cc <_Bfree>
   bc84c:	9905      	ldr	r1, [sp, #20]
   bc84e:	4620      	mov	r0, r4
   bc850:	f001 f8bc 	bl	bd9cc <_Bfree>
   bc854:	4631      	mov	r1, r6
   bc856:	4620      	mov	r0, r4
   bc858:	f001 f8b8 	bl	bd9cc <_Bfree>
   bc85c:	9907      	ldr	r1, [sp, #28]
   bc85e:	4620      	mov	r0, r4
   bc860:	f001 f8b4 	bl	bd9cc <_Bfree>
   bc864:	4629      	mov	r1, r5
   bc866:	4620      	mov	r0, r4
   bc868:	f001 f8b0 	bl	bd9cc <_Bfree>
   bc86c:	e5dc      	b.n	bc428 <_strtod_l+0x88>
   bc86e:	4b36      	ldr	r3, [pc, #216]	; (bc948 <_strtod_l+0x5a8>)
   bc870:	9304      	str	r3, [sp, #16]
   bc872:	2300      	movs	r3, #0
   bc874:	ea4f 1828 	mov.w	r8, r8, asr #4
   bc878:	4650      	mov	r0, sl
   bc87a:	4659      	mov	r1, fp
   bc87c:	4699      	mov	r9, r3
   bc87e:	f1b8 0f01 	cmp.w	r8, #1
   bc882:	dc21      	bgt.n	bc8c8 <_strtod_l+0x528>
   bc884:	b10b      	cbz	r3, bc88a <_strtod_l+0x4ea>
   bc886:	4682      	mov	sl, r0
   bc888:	468b      	mov	fp, r1
   bc88a:	4b2f      	ldr	r3, [pc, #188]	; (bc948 <_strtod_l+0x5a8>)
   bc88c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bc890:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bc894:	4652      	mov	r2, sl
   bc896:	465b      	mov	r3, fp
   bc898:	e9d9 0100 	ldrd	r0, r1, [r9]
   bc89c:	f7ff f95e 	bl	bbb5c <__aeabi_dmul>
   bc8a0:	4b2a      	ldr	r3, [pc, #168]	; (bc94c <_strtod_l+0x5ac>)
   bc8a2:	460a      	mov	r2, r1
   bc8a4:	400b      	ands	r3, r1
   bc8a6:	492a      	ldr	r1, [pc, #168]	; (bc950 <_strtod_l+0x5b0>)
   bc8a8:	428b      	cmp	r3, r1
   bc8aa:	4682      	mov	sl, r0
   bc8ac:	d8bc      	bhi.n	bc828 <_strtod_l+0x488>
   bc8ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bc8b2:	428b      	cmp	r3, r1
   bc8b4:	bf86      	itte	hi
   bc8b6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bc954 <_strtod_l+0x5b4>
   bc8ba:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bc8be:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bc8c2:	2300      	movs	r3, #0
   bc8c4:	9304      	str	r3, [sp, #16]
   bc8c6:	e084      	b.n	bc9d2 <_strtod_l+0x632>
   bc8c8:	f018 0f01 	tst.w	r8, #1
   bc8cc:	d005      	beq.n	bc8da <_strtod_l+0x53a>
   bc8ce:	9b04      	ldr	r3, [sp, #16]
   bc8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc8d4:	f7ff f942 	bl	bbb5c <__aeabi_dmul>
   bc8d8:	2301      	movs	r3, #1
   bc8da:	9a04      	ldr	r2, [sp, #16]
   bc8dc:	3208      	adds	r2, #8
   bc8de:	f109 0901 	add.w	r9, r9, #1
   bc8e2:	ea4f 0868 	mov.w	r8, r8, asr #1
   bc8e6:	9204      	str	r2, [sp, #16]
   bc8e8:	e7c9      	b.n	bc87e <_strtod_l+0x4de>
   bc8ea:	d0ea      	beq.n	bc8c2 <_strtod_l+0x522>
   bc8ec:	f1c8 0800 	rsb	r8, r8, #0
   bc8f0:	f018 020f 	ands.w	r2, r8, #15
   bc8f4:	d00a      	beq.n	bc90c <_strtod_l+0x56c>
   bc8f6:	4b13      	ldr	r3, [pc, #76]	; (bc944 <_strtod_l+0x5a4>)
   bc8f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bc8fc:	4650      	mov	r0, sl
   bc8fe:	4659      	mov	r1, fp
   bc900:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc904:	f7ff fa54 	bl	bbdb0 <__aeabi_ddiv>
   bc908:	4682      	mov	sl, r0
   bc90a:	468b      	mov	fp, r1
   bc90c:	ea5f 1828 	movs.w	r8, r8, asr #4
   bc910:	d0d7      	beq.n	bc8c2 <_strtod_l+0x522>
   bc912:	f1b8 0f1f 	cmp.w	r8, #31
   bc916:	dd1f      	ble.n	bc958 <_strtod_l+0x5b8>
   bc918:	2500      	movs	r5, #0
   bc91a:	462e      	mov	r6, r5
   bc91c:	9507      	str	r5, [sp, #28]
   bc91e:	9505      	str	r5, [sp, #20]
   bc920:	2322      	movs	r3, #34	; 0x22
   bc922:	f04f 0a00 	mov.w	sl, #0
   bc926:	f04f 0b00 	mov.w	fp, #0
   bc92a:	6023      	str	r3, [r4, #0]
   bc92c:	e786      	b.n	bc83c <_strtod_l+0x49c>
   bc92e:	bf00      	nop
   bc930:	000bee4a 	.word	0x000bee4a
   bc934:	000bee64 	.word	0x000bee64
   bc938:	000bee41 	.word	0x000bee41
   bc93c:	000bee44 	.word	0x000bee44
   bc940:	000be8be 	.word	0x000be8be
   bc944:	000bf0b0 	.word	0x000bf0b0
   bc948:	000bf088 	.word	0x000bf088
   bc94c:	7ff00000 	.word	0x7ff00000
   bc950:	7ca00000 	.word	0x7ca00000
   bc954:	7fefffff 	.word	0x7fefffff
   bc958:	f018 0310 	ands.w	r3, r8, #16
   bc95c:	bf18      	it	ne
   bc95e:	236a      	movne	r3, #106	; 0x6a
   bc960:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bcd10 <_strtod_l+0x970>
   bc964:	9304      	str	r3, [sp, #16]
   bc966:	4650      	mov	r0, sl
   bc968:	4659      	mov	r1, fp
   bc96a:	2300      	movs	r3, #0
   bc96c:	f018 0f01 	tst.w	r8, #1
   bc970:	d004      	beq.n	bc97c <_strtod_l+0x5dc>
   bc972:	e9d9 2300 	ldrd	r2, r3, [r9]
   bc976:	f7ff f8f1 	bl	bbb5c <__aeabi_dmul>
   bc97a:	2301      	movs	r3, #1
   bc97c:	ea5f 0868 	movs.w	r8, r8, asr #1
   bc980:	f109 0908 	add.w	r9, r9, #8
   bc984:	d1f2      	bne.n	bc96c <_strtod_l+0x5cc>
   bc986:	b10b      	cbz	r3, bc98c <_strtod_l+0x5ec>
   bc988:	4682      	mov	sl, r0
   bc98a:	468b      	mov	fp, r1
   bc98c:	9b04      	ldr	r3, [sp, #16]
   bc98e:	b1c3      	cbz	r3, bc9c2 <_strtod_l+0x622>
   bc990:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bc994:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bc998:	2b00      	cmp	r3, #0
   bc99a:	4659      	mov	r1, fp
   bc99c:	dd11      	ble.n	bc9c2 <_strtod_l+0x622>
   bc99e:	2b1f      	cmp	r3, #31
   bc9a0:	f340 8124 	ble.w	bcbec <_strtod_l+0x84c>
   bc9a4:	2b34      	cmp	r3, #52	; 0x34
   bc9a6:	bfde      	ittt	le
   bc9a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bc9ac:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bc9b0:	fa03 f202 	lslle.w	r2, r3, r2
   bc9b4:	f04f 0a00 	mov.w	sl, #0
   bc9b8:	bfcc      	ite	gt
   bc9ba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bc9be:	ea02 0b01 	andle.w	fp, r2, r1
   bc9c2:	2200      	movs	r2, #0
   bc9c4:	2300      	movs	r3, #0
   bc9c6:	4650      	mov	r0, sl
   bc9c8:	4659      	mov	r1, fp
   bc9ca:	f7ff fb2f 	bl	bc02c <__aeabi_dcmpeq>
   bc9ce:	2800      	cmp	r0, #0
   bc9d0:	d1a2      	bne.n	bc918 <_strtod_l+0x578>
   bc9d2:	9b07      	ldr	r3, [sp, #28]
   bc9d4:	9300      	str	r3, [sp, #0]
   bc9d6:	9908      	ldr	r1, [sp, #32]
   bc9d8:	462b      	mov	r3, r5
   bc9da:	463a      	mov	r2, r7
   bc9dc:	4620      	mov	r0, r4
   bc9de:	f001 f85d 	bl	bda9c <__s2b>
   bc9e2:	9007      	str	r0, [sp, #28]
   bc9e4:	2800      	cmp	r0, #0
   bc9e6:	f43f af1f 	beq.w	bc828 <_strtod_l+0x488>
   bc9ea:	9b05      	ldr	r3, [sp, #20]
   bc9ec:	1b9e      	subs	r6, r3, r6
   bc9ee:	9b06      	ldr	r3, [sp, #24]
   bc9f0:	2b00      	cmp	r3, #0
   bc9f2:	bfb4      	ite	lt
   bc9f4:	4633      	movlt	r3, r6
   bc9f6:	2300      	movge	r3, #0
   bc9f8:	930c      	str	r3, [sp, #48]	; 0x30
   bc9fa:	9b06      	ldr	r3, [sp, #24]
   bc9fc:	2500      	movs	r5, #0
   bc9fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bca02:	9312      	str	r3, [sp, #72]	; 0x48
   bca04:	462e      	mov	r6, r5
   bca06:	9b07      	ldr	r3, [sp, #28]
   bca08:	4620      	mov	r0, r4
   bca0a:	6859      	ldr	r1, [r3, #4]
   bca0c:	f000 ff9e 	bl	bd94c <_Balloc>
   bca10:	9005      	str	r0, [sp, #20]
   bca12:	2800      	cmp	r0, #0
   bca14:	f43f af0c 	beq.w	bc830 <_strtod_l+0x490>
   bca18:	9b07      	ldr	r3, [sp, #28]
   bca1a:	691a      	ldr	r2, [r3, #16]
   bca1c:	3202      	adds	r2, #2
   bca1e:	f103 010c 	add.w	r1, r3, #12
   bca22:	0092      	lsls	r2, r2, #2
   bca24:	300c      	adds	r0, #12
   bca26:	f7ff fbf1 	bl	bc20c <memcpy>
   bca2a:	ec4b ab10 	vmov	d0, sl, fp
   bca2e:	aa1a      	add	r2, sp, #104	; 0x68
   bca30:	a919      	add	r1, sp, #100	; 0x64
   bca32:	4620      	mov	r0, r4
   bca34:	f001 fb78 	bl	be128 <__d2b>
   bca38:	ec4b ab18 	vmov	d8, sl, fp
   bca3c:	9018      	str	r0, [sp, #96]	; 0x60
   bca3e:	2800      	cmp	r0, #0
   bca40:	f43f aef6 	beq.w	bc830 <_strtod_l+0x490>
   bca44:	2101      	movs	r1, #1
   bca46:	4620      	mov	r0, r4
   bca48:	f001 f8c2 	bl	bdbd0 <__i2b>
   bca4c:	4606      	mov	r6, r0
   bca4e:	2800      	cmp	r0, #0
   bca50:	f43f aeee 	beq.w	bc830 <_strtod_l+0x490>
   bca54:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bca56:	9904      	ldr	r1, [sp, #16]
   bca58:	2b00      	cmp	r3, #0
   bca5a:	bfab      	itete	ge
   bca5c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bca5e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bca60:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bca62:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bca66:	bfac      	ite	ge
   bca68:	eb03 0902 	addge.w	r9, r3, r2
   bca6c:	1ad7      	sublt	r7, r2, r3
   bca6e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bca70:	eba3 0801 	sub.w	r8, r3, r1
   bca74:	4490      	add	r8, r2
   bca76:	4ba1      	ldr	r3, [pc, #644]	; (bccfc <_strtod_l+0x95c>)
   bca78:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bca7c:	4598      	cmp	r8, r3
   bca7e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bca82:	f280 80c7 	bge.w	bcc14 <_strtod_l+0x874>
   bca86:	eba3 0308 	sub.w	r3, r3, r8
   bca8a:	2b1f      	cmp	r3, #31
   bca8c:	eba2 0203 	sub.w	r2, r2, r3
   bca90:	f04f 0101 	mov.w	r1, #1
   bca94:	f300 80b1 	bgt.w	bcbfa <_strtod_l+0x85a>
   bca98:	fa01 f303 	lsl.w	r3, r1, r3
   bca9c:	930d      	str	r3, [sp, #52]	; 0x34
   bca9e:	2300      	movs	r3, #0
   bcaa0:	9308      	str	r3, [sp, #32]
   bcaa2:	eb09 0802 	add.w	r8, r9, r2
   bcaa6:	9b04      	ldr	r3, [sp, #16]
   bcaa8:	45c1      	cmp	r9, r8
   bcaaa:	4417      	add	r7, r2
   bcaac:	441f      	add	r7, r3
   bcaae:	464b      	mov	r3, r9
   bcab0:	bfa8      	it	ge
   bcab2:	4643      	movge	r3, r8
   bcab4:	42bb      	cmp	r3, r7
   bcab6:	bfa8      	it	ge
   bcab8:	463b      	movge	r3, r7
   bcaba:	2b00      	cmp	r3, #0
   bcabc:	bfc2      	ittt	gt
   bcabe:	eba8 0803 	subgt.w	r8, r8, r3
   bcac2:	1aff      	subgt	r7, r7, r3
   bcac4:	eba9 0903 	subgt.w	r9, r9, r3
   bcac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bcaca:	2b00      	cmp	r3, #0
   bcacc:	dd17      	ble.n	bcafe <_strtod_l+0x75e>
   bcace:	4631      	mov	r1, r6
   bcad0:	461a      	mov	r2, r3
   bcad2:	4620      	mov	r0, r4
   bcad4:	f001 f93c 	bl	bdd50 <__pow5mult>
   bcad8:	4606      	mov	r6, r0
   bcada:	2800      	cmp	r0, #0
   bcadc:	f43f aea8 	beq.w	bc830 <_strtod_l+0x490>
   bcae0:	4601      	mov	r1, r0
   bcae2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bcae4:	4620      	mov	r0, r4
   bcae6:	f001 f889 	bl	bdbfc <__multiply>
   bcaea:	900b      	str	r0, [sp, #44]	; 0x2c
   bcaec:	2800      	cmp	r0, #0
   bcaee:	f43f ae9f 	beq.w	bc830 <_strtod_l+0x490>
   bcaf2:	9918      	ldr	r1, [sp, #96]	; 0x60
   bcaf4:	4620      	mov	r0, r4
   bcaf6:	f000 ff69 	bl	bd9cc <_Bfree>
   bcafa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcafc:	9318      	str	r3, [sp, #96]	; 0x60
   bcafe:	f1b8 0f00 	cmp.w	r8, #0
   bcb02:	f300 808c 	bgt.w	bcc1e <_strtod_l+0x87e>
   bcb06:	9b06      	ldr	r3, [sp, #24]
   bcb08:	2b00      	cmp	r3, #0
   bcb0a:	dd08      	ble.n	bcb1e <_strtod_l+0x77e>
   bcb0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bcb0e:	9905      	ldr	r1, [sp, #20]
   bcb10:	4620      	mov	r0, r4
   bcb12:	f001 f91d 	bl	bdd50 <__pow5mult>
   bcb16:	9005      	str	r0, [sp, #20]
   bcb18:	2800      	cmp	r0, #0
   bcb1a:	f43f ae89 	beq.w	bc830 <_strtod_l+0x490>
   bcb1e:	2f00      	cmp	r7, #0
   bcb20:	dd08      	ble.n	bcb34 <_strtod_l+0x794>
   bcb22:	9905      	ldr	r1, [sp, #20]
   bcb24:	463a      	mov	r2, r7
   bcb26:	4620      	mov	r0, r4
   bcb28:	f001 f96c 	bl	bde04 <__lshift>
   bcb2c:	9005      	str	r0, [sp, #20]
   bcb2e:	2800      	cmp	r0, #0
   bcb30:	f43f ae7e 	beq.w	bc830 <_strtod_l+0x490>
   bcb34:	f1b9 0f00 	cmp.w	r9, #0
   bcb38:	dd08      	ble.n	bcb4c <_strtod_l+0x7ac>
   bcb3a:	4631      	mov	r1, r6
   bcb3c:	464a      	mov	r2, r9
   bcb3e:	4620      	mov	r0, r4
   bcb40:	f001 f960 	bl	bde04 <__lshift>
   bcb44:	4606      	mov	r6, r0
   bcb46:	2800      	cmp	r0, #0
   bcb48:	f43f ae72 	beq.w	bc830 <_strtod_l+0x490>
   bcb4c:	9a05      	ldr	r2, [sp, #20]
   bcb4e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bcb50:	4620      	mov	r0, r4
   bcb52:	f001 f9e3 	bl	bdf1c <__mdiff>
   bcb56:	4605      	mov	r5, r0
   bcb58:	2800      	cmp	r0, #0
   bcb5a:	f43f ae69 	beq.w	bc830 <_strtod_l+0x490>
   bcb5e:	68c3      	ldr	r3, [r0, #12]
   bcb60:	930b      	str	r3, [sp, #44]	; 0x2c
   bcb62:	2300      	movs	r3, #0
   bcb64:	60c3      	str	r3, [r0, #12]
   bcb66:	4631      	mov	r1, r6
   bcb68:	f001 f9bc 	bl	bdee4 <__mcmp>
   bcb6c:	2800      	cmp	r0, #0
   bcb6e:	da60      	bge.n	bcc32 <_strtod_l+0x892>
   bcb70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcb72:	ea53 030a 	orrs.w	r3, r3, sl
   bcb76:	f040 8082 	bne.w	bcc7e <_strtod_l+0x8de>
   bcb7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bcb7e:	2b00      	cmp	r3, #0
   bcb80:	d17d      	bne.n	bcc7e <_strtod_l+0x8de>
   bcb82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bcb86:	0d1b      	lsrs	r3, r3, #20
   bcb88:	051b      	lsls	r3, r3, #20
   bcb8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bcb8e:	d976      	bls.n	bcc7e <_strtod_l+0x8de>
   bcb90:	696b      	ldr	r3, [r5, #20]
   bcb92:	b913      	cbnz	r3, bcb9a <_strtod_l+0x7fa>
   bcb94:	692b      	ldr	r3, [r5, #16]
   bcb96:	2b01      	cmp	r3, #1
   bcb98:	dd71      	ble.n	bcc7e <_strtod_l+0x8de>
   bcb9a:	4629      	mov	r1, r5
   bcb9c:	2201      	movs	r2, #1
   bcb9e:	4620      	mov	r0, r4
   bcba0:	f001 f930 	bl	bde04 <__lshift>
   bcba4:	4631      	mov	r1, r6
   bcba6:	4605      	mov	r5, r0
   bcba8:	f001 f99c 	bl	bdee4 <__mcmp>
   bcbac:	2800      	cmp	r0, #0
   bcbae:	dd66      	ble.n	bcc7e <_strtod_l+0x8de>
   bcbb0:	9904      	ldr	r1, [sp, #16]
   bcbb2:	4a53      	ldr	r2, [pc, #332]	; (bcd00 <_strtod_l+0x960>)
   bcbb4:	465b      	mov	r3, fp
   bcbb6:	2900      	cmp	r1, #0
   bcbb8:	f000 8081 	beq.w	bccbe <_strtod_l+0x91e>
   bcbbc:	ea02 010b 	and.w	r1, r2, fp
   bcbc0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bcbc4:	dc7b      	bgt.n	bccbe <_strtod_l+0x91e>
   bcbc6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bcbca:	f77f aea9 	ble.w	bc920 <_strtod_l+0x580>
   bcbce:	4b4d      	ldr	r3, [pc, #308]	; (bcd04 <_strtod_l+0x964>)
   bcbd0:	4650      	mov	r0, sl
   bcbd2:	4659      	mov	r1, fp
   bcbd4:	2200      	movs	r2, #0
   bcbd6:	f7fe ffc1 	bl	bbb5c <__aeabi_dmul>
   bcbda:	460b      	mov	r3, r1
   bcbdc:	4303      	orrs	r3, r0
   bcbde:	bf08      	it	eq
   bcbe0:	2322      	moveq	r3, #34	; 0x22
   bcbe2:	4682      	mov	sl, r0
   bcbe4:	468b      	mov	fp, r1
   bcbe6:	bf08      	it	eq
   bcbe8:	6023      	streq	r3, [r4, #0]
   bcbea:	e62b      	b.n	bc844 <_strtod_l+0x4a4>
   bcbec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bcbf0:	fa02 f303 	lsl.w	r3, r2, r3
   bcbf4:	ea03 0a0a 	and.w	sl, r3, sl
   bcbf8:	e6e3      	b.n	bc9c2 <_strtod_l+0x622>
   bcbfa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bcbfe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bcc02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bcc06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bcc0a:	fa01 f308 	lsl.w	r3, r1, r8
   bcc0e:	9308      	str	r3, [sp, #32]
   bcc10:	910d      	str	r1, [sp, #52]	; 0x34
   bcc12:	e746      	b.n	bcaa2 <_strtod_l+0x702>
   bcc14:	2300      	movs	r3, #0
   bcc16:	9308      	str	r3, [sp, #32]
   bcc18:	2301      	movs	r3, #1
   bcc1a:	930d      	str	r3, [sp, #52]	; 0x34
   bcc1c:	e741      	b.n	bcaa2 <_strtod_l+0x702>
   bcc1e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bcc20:	4642      	mov	r2, r8
   bcc22:	4620      	mov	r0, r4
   bcc24:	f001 f8ee 	bl	bde04 <__lshift>
   bcc28:	9018      	str	r0, [sp, #96]	; 0x60
   bcc2a:	2800      	cmp	r0, #0
   bcc2c:	f47f af6b 	bne.w	bcb06 <_strtod_l+0x766>
   bcc30:	e5fe      	b.n	bc830 <_strtod_l+0x490>
   bcc32:	465f      	mov	r7, fp
   bcc34:	d16e      	bne.n	bcd14 <_strtod_l+0x974>
   bcc36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bcc38:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bcc3c:	b342      	cbz	r2, bcc90 <_strtod_l+0x8f0>
   bcc3e:	4a32      	ldr	r2, [pc, #200]	; (bcd08 <_strtod_l+0x968>)
   bcc40:	4293      	cmp	r3, r2
   bcc42:	d128      	bne.n	bcc96 <_strtod_l+0x8f6>
   bcc44:	9b04      	ldr	r3, [sp, #16]
   bcc46:	4651      	mov	r1, sl
   bcc48:	b1eb      	cbz	r3, bcc86 <_strtod_l+0x8e6>
   bcc4a:	4b2d      	ldr	r3, [pc, #180]	; (bcd00 <_strtod_l+0x960>)
   bcc4c:	403b      	ands	r3, r7
   bcc4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bcc52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bcc56:	d819      	bhi.n	bcc8c <_strtod_l+0x8ec>
   bcc58:	0d1b      	lsrs	r3, r3, #20
   bcc5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bcc5e:	fa02 f303 	lsl.w	r3, r2, r3
   bcc62:	4299      	cmp	r1, r3
   bcc64:	d117      	bne.n	bcc96 <_strtod_l+0x8f6>
   bcc66:	4b29      	ldr	r3, [pc, #164]	; (bcd0c <_strtod_l+0x96c>)
   bcc68:	429f      	cmp	r7, r3
   bcc6a:	d102      	bne.n	bcc72 <_strtod_l+0x8d2>
   bcc6c:	3101      	adds	r1, #1
   bcc6e:	f43f addf 	beq.w	bc830 <_strtod_l+0x490>
   bcc72:	4b23      	ldr	r3, [pc, #140]	; (bcd00 <_strtod_l+0x960>)
   bcc74:	403b      	ands	r3, r7
   bcc76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bcc7a:	f04f 0a00 	mov.w	sl, #0
   bcc7e:	9b04      	ldr	r3, [sp, #16]
   bcc80:	2b00      	cmp	r3, #0
   bcc82:	d1a4      	bne.n	bcbce <_strtod_l+0x82e>
   bcc84:	e5de      	b.n	bc844 <_strtod_l+0x4a4>
   bcc86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bcc8a:	e7ea      	b.n	bcc62 <_strtod_l+0x8c2>
   bcc8c:	4613      	mov	r3, r2
   bcc8e:	e7e8      	b.n	bcc62 <_strtod_l+0x8c2>
   bcc90:	ea53 030a 	orrs.w	r3, r3, sl
   bcc94:	d08c      	beq.n	bcbb0 <_strtod_l+0x810>
   bcc96:	9b08      	ldr	r3, [sp, #32]
   bcc98:	b1db      	cbz	r3, bccd2 <_strtod_l+0x932>
   bcc9a:	423b      	tst	r3, r7
   bcc9c:	d0ef      	beq.n	bcc7e <_strtod_l+0x8de>
   bcc9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcca0:	9a04      	ldr	r2, [sp, #16]
   bcca2:	4650      	mov	r0, sl
   bcca4:	4659      	mov	r1, fp
   bcca6:	b1c3      	cbz	r3, bccda <_strtod_l+0x93a>
   bcca8:	f7ff fb5e 	bl	bc368 <sulp>
   bccac:	4602      	mov	r2, r0
   bccae:	460b      	mov	r3, r1
   bccb0:	ec51 0b18 	vmov	r0, r1, d8
   bccb4:	f7fe fd9c 	bl	bb7f0 <__adddf3>
   bccb8:	4682      	mov	sl, r0
   bccba:	468b      	mov	fp, r1
   bccbc:	e7df      	b.n	bcc7e <_strtod_l+0x8de>
   bccbe:	4013      	ands	r3, r2
   bccc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bccc4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bccc8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bcccc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bccd0:	e7d5      	b.n	bcc7e <_strtod_l+0x8de>
   bccd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bccd4:	ea13 0f0a 	tst.w	r3, sl
   bccd8:	e7e0      	b.n	bcc9c <_strtod_l+0x8fc>
   bccda:	f7ff fb45 	bl	bc368 <sulp>
   bccde:	4602      	mov	r2, r0
   bcce0:	460b      	mov	r3, r1
   bcce2:	ec51 0b18 	vmov	r0, r1, d8
   bcce6:	f7fe fd81 	bl	bb7ec <__aeabi_dsub>
   bccea:	2200      	movs	r2, #0
   bccec:	2300      	movs	r3, #0
   bccee:	4682      	mov	sl, r0
   bccf0:	468b      	mov	fp, r1
   bccf2:	f7ff f99b 	bl	bc02c <__aeabi_dcmpeq>
   bccf6:	2800      	cmp	r0, #0
   bccf8:	d0c1      	beq.n	bcc7e <_strtod_l+0x8de>
   bccfa:	e611      	b.n	bc920 <_strtod_l+0x580>
   bccfc:	fffffc02 	.word	0xfffffc02
   bcd00:	7ff00000 	.word	0x7ff00000
   bcd04:	39500000 	.word	0x39500000
   bcd08:	000fffff 	.word	0x000fffff
   bcd0c:	7fefffff 	.word	0x7fefffff
   bcd10:	000bee78 	.word	0x000bee78
   bcd14:	4631      	mov	r1, r6
   bcd16:	4628      	mov	r0, r5
   bcd18:	f001 fa62 	bl	be1e0 <__ratio>
   bcd1c:	ec59 8b10 	vmov	r8, r9, d0
   bcd20:	ee10 0a10 	vmov	r0, s0
   bcd24:	2200      	movs	r2, #0
   bcd26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bcd2a:	4649      	mov	r1, r9
   bcd2c:	f7ff f992 	bl	bc054 <__aeabi_dcmple>
   bcd30:	2800      	cmp	r0, #0
   bcd32:	d07a      	beq.n	bce2a <_strtod_l+0xa8a>
   bcd34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcd36:	2b00      	cmp	r3, #0
   bcd38:	d04a      	beq.n	bcdd0 <_strtod_l+0xa30>
   bcd3a:	4b95      	ldr	r3, [pc, #596]	; (bcf90 <_strtod_l+0xbf0>)
   bcd3c:	2200      	movs	r2, #0
   bcd3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bcd42:	f8df 924c 	ldr.w	r9, [pc, #588]	; bcf90 <_strtod_l+0xbf0>
   bcd46:	f04f 0800 	mov.w	r8, #0
   bcd4a:	4b92      	ldr	r3, [pc, #584]	; (bcf94 <_strtod_l+0xbf4>)
   bcd4c:	403b      	ands	r3, r7
   bcd4e:	930d      	str	r3, [sp, #52]	; 0x34
   bcd50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bcd52:	4b91      	ldr	r3, [pc, #580]	; (bcf98 <_strtod_l+0xbf8>)
   bcd54:	429a      	cmp	r2, r3
   bcd56:	f040 80b0 	bne.w	bceba <_strtod_l+0xb1a>
   bcd5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bcd5e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bcd62:	ec4b ab10 	vmov	d0, sl, fp
   bcd66:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bcd6a:	f001 f961 	bl	be030 <__ulp>
   bcd6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bcd72:	ec53 2b10 	vmov	r2, r3, d0
   bcd76:	f7fe fef1 	bl	bbb5c <__aeabi_dmul>
   bcd7a:	4652      	mov	r2, sl
   bcd7c:	465b      	mov	r3, fp
   bcd7e:	f7fe fd37 	bl	bb7f0 <__adddf3>
   bcd82:	460b      	mov	r3, r1
   bcd84:	4983      	ldr	r1, [pc, #524]	; (bcf94 <_strtod_l+0xbf4>)
   bcd86:	4a85      	ldr	r2, [pc, #532]	; (bcf9c <_strtod_l+0xbfc>)
   bcd88:	4019      	ands	r1, r3
   bcd8a:	4291      	cmp	r1, r2
   bcd8c:	4682      	mov	sl, r0
   bcd8e:	d960      	bls.n	bce52 <_strtod_l+0xab2>
   bcd90:	ee18 3a90 	vmov	r3, s17
   bcd94:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bcd98:	4293      	cmp	r3, r2
   bcd9a:	d104      	bne.n	bcda6 <_strtod_l+0xa06>
   bcd9c:	ee18 3a10 	vmov	r3, s16
   bcda0:	3301      	adds	r3, #1
   bcda2:	f43f ad45 	beq.w	bc830 <_strtod_l+0x490>
   bcda6:	f8df b200 	ldr.w	fp, [pc, #512]	; bcfa8 <_strtod_l+0xc08>
   bcdaa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bcdae:	9918      	ldr	r1, [sp, #96]	; 0x60
   bcdb0:	4620      	mov	r0, r4
   bcdb2:	f000 fe0b 	bl	bd9cc <_Bfree>
   bcdb6:	9905      	ldr	r1, [sp, #20]
   bcdb8:	4620      	mov	r0, r4
   bcdba:	f000 fe07 	bl	bd9cc <_Bfree>
   bcdbe:	4631      	mov	r1, r6
   bcdc0:	4620      	mov	r0, r4
   bcdc2:	f000 fe03 	bl	bd9cc <_Bfree>
   bcdc6:	4629      	mov	r1, r5
   bcdc8:	4620      	mov	r0, r4
   bcdca:	f000 fdff 	bl	bd9cc <_Bfree>
   bcdce:	e61a      	b.n	bca06 <_strtod_l+0x666>
   bcdd0:	f1ba 0f00 	cmp.w	sl, #0
   bcdd4:	d11b      	bne.n	bce0e <_strtod_l+0xa6e>
   bcdd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bcdda:	b9f3      	cbnz	r3, bce1a <_strtod_l+0xa7a>
   bcddc:	4b6c      	ldr	r3, [pc, #432]	; (bcf90 <_strtod_l+0xbf0>)
   bcdde:	2200      	movs	r2, #0
   bcde0:	4640      	mov	r0, r8
   bcde2:	4649      	mov	r1, r9
   bcde4:	f7ff f92c 	bl	bc040 <__aeabi_dcmplt>
   bcde8:	b9d0      	cbnz	r0, bce20 <_strtod_l+0xa80>
   bcdea:	4640      	mov	r0, r8
   bcdec:	4649      	mov	r1, r9
   bcdee:	4b6c      	ldr	r3, [pc, #432]	; (bcfa0 <_strtod_l+0xc00>)
   bcdf0:	2200      	movs	r2, #0
   bcdf2:	f7fe feb3 	bl	bbb5c <__aeabi_dmul>
   bcdf6:	4680      	mov	r8, r0
   bcdf8:	4689      	mov	r9, r1
   bcdfa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bcdfe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bce02:	9315      	str	r3, [sp, #84]	; 0x54
   bce04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bce08:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bce0c:	e79d      	b.n	bcd4a <_strtod_l+0x9aa>
   bce0e:	f1ba 0f01 	cmp.w	sl, #1
   bce12:	d102      	bne.n	bce1a <_strtod_l+0xa7a>
   bce14:	2f00      	cmp	r7, #0
   bce16:	f43f ad83 	beq.w	bc920 <_strtod_l+0x580>
   bce1a:	4b62      	ldr	r3, [pc, #392]	; (bcfa4 <_strtod_l+0xc04>)
   bce1c:	2200      	movs	r2, #0
   bce1e:	e78e      	b.n	bcd3e <_strtod_l+0x99e>
   bce20:	f8df 917c 	ldr.w	r9, [pc, #380]	; bcfa0 <_strtod_l+0xc00>
   bce24:	f04f 0800 	mov.w	r8, #0
   bce28:	e7e7      	b.n	bcdfa <_strtod_l+0xa5a>
   bce2a:	4b5d      	ldr	r3, [pc, #372]	; (bcfa0 <_strtod_l+0xc00>)
   bce2c:	4640      	mov	r0, r8
   bce2e:	4649      	mov	r1, r9
   bce30:	2200      	movs	r2, #0
   bce32:	f7fe fe93 	bl	bbb5c <__aeabi_dmul>
   bce36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bce38:	4680      	mov	r8, r0
   bce3a:	4689      	mov	r9, r1
   bce3c:	b933      	cbnz	r3, bce4c <_strtod_l+0xaac>
   bce3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bce42:	900e      	str	r0, [sp, #56]	; 0x38
   bce44:	930f      	str	r3, [sp, #60]	; 0x3c
   bce46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bce4a:	e7dd      	b.n	bce08 <_strtod_l+0xa68>
   bce4c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bce50:	e7f9      	b.n	bce46 <_strtod_l+0xaa6>
   bce52:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bce56:	9b04      	ldr	r3, [sp, #16]
   bce58:	2b00      	cmp	r3, #0
   bce5a:	d1a8      	bne.n	bcdae <_strtod_l+0xa0e>
   bce5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bce60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bce62:	0d1b      	lsrs	r3, r3, #20
   bce64:	051b      	lsls	r3, r3, #20
   bce66:	429a      	cmp	r2, r3
   bce68:	d1a1      	bne.n	bcdae <_strtod_l+0xa0e>
   bce6a:	4640      	mov	r0, r8
   bce6c:	4649      	mov	r1, r9
   bce6e:	f001 fa5b 	bl	be328 <__aeabi_d2lz>
   bce72:	f7fe fe45 	bl	bbb00 <__aeabi_l2d>
   bce76:	4602      	mov	r2, r0
   bce78:	460b      	mov	r3, r1
   bce7a:	4640      	mov	r0, r8
   bce7c:	4649      	mov	r1, r9
   bce7e:	f7fe fcb5 	bl	bb7ec <__aeabi_dsub>
   bce82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bce84:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bce88:	ea43 030a 	orr.w	r3, r3, sl
   bce8c:	4313      	orrs	r3, r2
   bce8e:	4680      	mov	r8, r0
   bce90:	4689      	mov	r9, r1
   bce92:	d055      	beq.n	bcf40 <_strtod_l+0xba0>
   bce94:	a336      	add	r3, pc, #216	; (adr r3, bcf70 <_strtod_l+0xbd0>)
   bce96:	e9d3 2300 	ldrd	r2, r3, [r3]
   bce9a:	f7ff f8d1 	bl	bc040 <__aeabi_dcmplt>
   bce9e:	2800      	cmp	r0, #0
   bcea0:	f47f acd0 	bne.w	bc844 <_strtod_l+0x4a4>
   bcea4:	a334      	add	r3, pc, #208	; (adr r3, bcf78 <_strtod_l+0xbd8>)
   bcea6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bceaa:	4640      	mov	r0, r8
   bceac:	4649      	mov	r1, r9
   bceae:	f7ff f8e5 	bl	bc07c <__aeabi_dcmpgt>
   bceb2:	2800      	cmp	r0, #0
   bceb4:	f43f af7b 	beq.w	bcdae <_strtod_l+0xa0e>
   bceb8:	e4c4      	b.n	bc844 <_strtod_l+0x4a4>
   bceba:	9b04      	ldr	r3, [sp, #16]
   bcebc:	b333      	cbz	r3, bcf0c <_strtod_l+0xb6c>
   bcebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bcec0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bcec4:	d822      	bhi.n	bcf0c <_strtod_l+0xb6c>
   bcec6:	a32e      	add	r3, pc, #184	; (adr r3, bcf80 <_strtod_l+0xbe0>)
   bcec8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcecc:	4640      	mov	r0, r8
   bcece:	4649      	mov	r1, r9
   bced0:	f7ff f8c0 	bl	bc054 <__aeabi_dcmple>
   bced4:	b1a0      	cbz	r0, bcf00 <_strtod_l+0xb60>
   bced6:	4649      	mov	r1, r9
   bced8:	4640      	mov	r0, r8
   bceda:	f7ff f8ef 	bl	bc0bc <__aeabi_d2uiz>
   bcede:	2801      	cmp	r0, #1
   bcee0:	bf38      	it	cc
   bcee2:	2001      	movcc	r0, #1
   bcee4:	f7fe fdc0 	bl	bba68 <__aeabi_ui2d>
   bcee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bceea:	4680      	mov	r8, r0
   bceec:	4689      	mov	r9, r1
   bceee:	bb23      	cbnz	r3, bcf3a <_strtod_l+0xb9a>
   bcef0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bcef4:	9010      	str	r0, [sp, #64]	; 0x40
   bcef6:	9311      	str	r3, [sp, #68]	; 0x44
   bcef8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bcefc:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bcf00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bcf02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bcf04:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bcf08:	1a9b      	subs	r3, r3, r2
   bcf0a:	9309      	str	r3, [sp, #36]	; 0x24
   bcf0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bcf10:	eeb0 0a48 	vmov.f32	s0, s16
   bcf14:	eef0 0a68 	vmov.f32	s1, s17
   bcf18:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bcf1c:	f001 f888 	bl	be030 <__ulp>
   bcf20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bcf24:	ec53 2b10 	vmov	r2, r3, d0
   bcf28:	f7fe fe18 	bl	bbb5c <__aeabi_dmul>
   bcf2c:	ec53 2b18 	vmov	r2, r3, d8
   bcf30:	f7fe fc5e 	bl	bb7f0 <__adddf3>
   bcf34:	4682      	mov	sl, r0
   bcf36:	468b      	mov	fp, r1
   bcf38:	e78d      	b.n	bce56 <_strtod_l+0xab6>
   bcf3a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bcf3e:	e7db      	b.n	bcef8 <_strtod_l+0xb58>
   bcf40:	a311      	add	r3, pc, #68	; (adr r3, bcf88 <_strtod_l+0xbe8>)
   bcf42:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcf46:	f7ff f87b 	bl	bc040 <__aeabi_dcmplt>
   bcf4a:	e7b2      	b.n	bceb2 <_strtod_l+0xb12>
   bcf4c:	2300      	movs	r3, #0
   bcf4e:	930a      	str	r3, [sp, #40]	; 0x28
   bcf50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bcf52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bcf54:	6013      	str	r3, [r2, #0]
   bcf56:	f7ff ba6b 	b.w	bc430 <_strtod_l+0x90>
   bcf5a:	2a65      	cmp	r2, #101	; 0x65
   bcf5c:	f43f ab5f 	beq.w	bc61e <_strtod_l+0x27e>
   bcf60:	2a45      	cmp	r2, #69	; 0x45
   bcf62:	f43f ab5c 	beq.w	bc61e <_strtod_l+0x27e>
   bcf66:	2301      	movs	r3, #1
   bcf68:	f7ff bb94 	b.w	bc694 <_strtod_l+0x2f4>
   bcf6c:	f3af 8000 	nop.w
   bcf70:	94a03595 	.word	0x94a03595
   bcf74:	3fdfffff 	.word	0x3fdfffff
   bcf78:	35afe535 	.word	0x35afe535
   bcf7c:	3fe00000 	.word	0x3fe00000
   bcf80:	ffc00000 	.word	0xffc00000
   bcf84:	41dfffff 	.word	0x41dfffff
   bcf88:	94a03595 	.word	0x94a03595
   bcf8c:	3fcfffff 	.word	0x3fcfffff
   bcf90:	3ff00000 	.word	0x3ff00000
   bcf94:	7ff00000 	.word	0x7ff00000
   bcf98:	7fe00000 	.word	0x7fe00000
   bcf9c:	7c9fffff 	.word	0x7c9fffff
   bcfa0:	3fe00000 	.word	0x3fe00000
   bcfa4:	bff00000 	.word	0xbff00000
   bcfa8:	7fefffff 	.word	0x7fefffff

000bcfac <strtof>:
   bcfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcfb0:	f8df 80ac 	ldr.w	r8, [pc, #172]	; bd060 <strtof+0xb4>
   bcfb4:	4b26      	ldr	r3, [pc, #152]	; (bd050 <strtof+0xa4>)
   bcfb6:	460a      	mov	r2, r1
   bcfb8:	ed2d 8b02 	vpush	{d8}
   bcfbc:	4601      	mov	r1, r0
   bcfbe:	f8d8 0000 	ldr.w	r0, [r8]
   bcfc2:	f7ff f9ed 	bl	bc3a0 <_strtod_l>
   bcfc6:	ec55 4b10 	vmov	r4, r5, d0
   bcfca:	ee10 2a10 	vmov	r2, s0
   bcfce:	ee10 0a10 	vmov	r0, s0
   bcfd2:	462b      	mov	r3, r5
   bcfd4:	4629      	mov	r1, r5
   bcfd6:	f7ff f85b 	bl	bc090 <__aeabi_dcmpun>
   bcfda:	b190      	cbz	r0, bd002 <strtof+0x56>
   bcfdc:	2d00      	cmp	r5, #0
   bcfde:	481d      	ldr	r0, [pc, #116]	; (bd054 <strtof+0xa8>)
   bcfe0:	da09      	bge.n	bcff6 <strtof+0x4a>
   bcfe2:	f001 f98d 	bl	be300 <nanf>
   bcfe6:	eeb1 8a40 	vneg.f32	s16, s0
   bcfea:	eeb0 0a48 	vmov.f32	s0, s16
   bcfee:	ecbd 8b02 	vpop	{d8}
   bcff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcff6:	ecbd 8b02 	vpop	{d8}
   bcffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bcffe:	f001 b97f 	b.w	be300 <nanf>
   bd002:	4620      	mov	r0, r4
   bd004:	4629      	mov	r1, r5
   bd006:	f7ff f879 	bl	bc0fc <__aeabi_d2f>
   bd00a:	ee08 0a10 	vmov	s16, r0
   bd00e:	eddf 7a12 	vldr	s15, [pc, #72]	; bd058 <strtof+0xac>
   bd012:	eeb0 7ac8 	vabs.f32	s14, s16
   bd016:	eeb4 7a67 	vcmp.f32	s14, s15
   bd01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bd01e:	dde4      	ble.n	bcfea <strtof+0x3e>
   bd020:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   bd024:	4b0d      	ldr	r3, [pc, #52]	; (bd05c <strtof+0xb0>)
   bd026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd02a:	4620      	mov	r0, r4
   bd02c:	4639      	mov	r1, r7
   bd02e:	f7ff f82f 	bl	bc090 <__aeabi_dcmpun>
   bd032:	b940      	cbnz	r0, bd046 <strtof+0x9a>
   bd034:	4b09      	ldr	r3, [pc, #36]	; (bd05c <strtof+0xb0>)
   bd036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd03a:	4620      	mov	r0, r4
   bd03c:	4639      	mov	r1, r7
   bd03e:	f7ff f809 	bl	bc054 <__aeabi_dcmple>
   bd042:	2800      	cmp	r0, #0
   bd044:	d0d1      	beq.n	bcfea <strtof+0x3e>
   bd046:	f8d8 3000 	ldr.w	r3, [r8]
   bd04a:	2222      	movs	r2, #34	; 0x22
   bd04c:	601a      	str	r2, [r3, #0]
   bd04e:	e7cc      	b.n	bcfea <strtof+0x3e>
   bd050:	20035134 	.word	0x20035134
   bd054:	000be8be 	.word	0x000be8be
   bd058:	7f7fffff 	.word	0x7f7fffff
   bd05c:	7fefffff 	.word	0x7fefffff
   bd060:	200350c8 	.word	0x200350c8

000bd064 <_strtol_l.constprop.0>:
   bd064:	2b01      	cmp	r3, #1
   bd066:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd06a:	d001      	beq.n	bd070 <_strtol_l.constprop.0+0xc>
   bd06c:	2b24      	cmp	r3, #36	; 0x24
   bd06e:	d906      	bls.n	bd07e <_strtol_l.constprop.0+0x1a>
   bd070:	f7fb fd9e 	bl	b8bb0 <__errno>
   bd074:	2316      	movs	r3, #22
   bd076:	6003      	str	r3, [r0, #0]
   bd078:	2000      	movs	r0, #0
   bd07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd07e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bd164 <_strtol_l.constprop.0+0x100>
   bd082:	460d      	mov	r5, r1
   bd084:	462e      	mov	r6, r5
   bd086:	f815 4b01 	ldrb.w	r4, [r5], #1
   bd08a:	f814 700c 	ldrb.w	r7, [r4, ip]
   bd08e:	f017 0708 	ands.w	r7, r7, #8
   bd092:	d1f7      	bne.n	bd084 <_strtol_l.constprop.0+0x20>
   bd094:	2c2d      	cmp	r4, #45	; 0x2d
   bd096:	d132      	bne.n	bd0fe <_strtol_l.constprop.0+0x9a>
   bd098:	782c      	ldrb	r4, [r5, #0]
   bd09a:	2701      	movs	r7, #1
   bd09c:	1cb5      	adds	r5, r6, #2
   bd09e:	2b00      	cmp	r3, #0
   bd0a0:	d05b      	beq.n	bd15a <_strtol_l.constprop.0+0xf6>
   bd0a2:	2b10      	cmp	r3, #16
   bd0a4:	d109      	bne.n	bd0ba <_strtol_l.constprop.0+0x56>
   bd0a6:	2c30      	cmp	r4, #48	; 0x30
   bd0a8:	d107      	bne.n	bd0ba <_strtol_l.constprop.0+0x56>
   bd0aa:	782c      	ldrb	r4, [r5, #0]
   bd0ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bd0b0:	2c58      	cmp	r4, #88	; 0x58
   bd0b2:	d14d      	bne.n	bd150 <_strtol_l.constprop.0+0xec>
   bd0b4:	786c      	ldrb	r4, [r5, #1]
   bd0b6:	2310      	movs	r3, #16
   bd0b8:	3502      	adds	r5, #2
   bd0ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bd0be:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bd0c2:	f04f 0c00 	mov.w	ip, #0
   bd0c6:	fbb8 f9f3 	udiv	r9, r8, r3
   bd0ca:	4666      	mov	r6, ip
   bd0cc:	fb03 8a19 	mls	sl, r3, r9, r8
   bd0d0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bd0d4:	f1be 0f09 	cmp.w	lr, #9
   bd0d8:	d816      	bhi.n	bd108 <_strtol_l.constprop.0+0xa4>
   bd0da:	4674      	mov	r4, lr
   bd0dc:	42a3      	cmp	r3, r4
   bd0de:	dd24      	ble.n	bd12a <_strtol_l.constprop.0+0xc6>
   bd0e0:	f1bc 0f00 	cmp.w	ip, #0
   bd0e4:	db1e      	blt.n	bd124 <_strtol_l.constprop.0+0xc0>
   bd0e6:	45b1      	cmp	r9, r6
   bd0e8:	d31c      	bcc.n	bd124 <_strtol_l.constprop.0+0xc0>
   bd0ea:	d101      	bne.n	bd0f0 <_strtol_l.constprop.0+0x8c>
   bd0ec:	45a2      	cmp	sl, r4
   bd0ee:	db19      	blt.n	bd124 <_strtol_l.constprop.0+0xc0>
   bd0f0:	fb06 4603 	mla	r6, r6, r3, r4
   bd0f4:	f04f 0c01 	mov.w	ip, #1
   bd0f8:	f815 4b01 	ldrb.w	r4, [r5], #1
   bd0fc:	e7e8      	b.n	bd0d0 <_strtol_l.constprop.0+0x6c>
   bd0fe:	2c2b      	cmp	r4, #43	; 0x2b
   bd100:	bf04      	itt	eq
   bd102:	782c      	ldrbeq	r4, [r5, #0]
   bd104:	1cb5      	addeq	r5, r6, #2
   bd106:	e7ca      	b.n	bd09e <_strtol_l.constprop.0+0x3a>
   bd108:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bd10c:	f1be 0f19 	cmp.w	lr, #25
   bd110:	d801      	bhi.n	bd116 <_strtol_l.constprop.0+0xb2>
   bd112:	3c37      	subs	r4, #55	; 0x37
   bd114:	e7e2      	b.n	bd0dc <_strtol_l.constprop.0+0x78>
   bd116:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bd11a:	f1be 0f19 	cmp.w	lr, #25
   bd11e:	d804      	bhi.n	bd12a <_strtol_l.constprop.0+0xc6>
   bd120:	3c57      	subs	r4, #87	; 0x57
   bd122:	e7db      	b.n	bd0dc <_strtol_l.constprop.0+0x78>
   bd124:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bd128:	e7e6      	b.n	bd0f8 <_strtol_l.constprop.0+0x94>
   bd12a:	f1bc 0f00 	cmp.w	ip, #0
   bd12e:	da05      	bge.n	bd13c <_strtol_l.constprop.0+0xd8>
   bd130:	2322      	movs	r3, #34	; 0x22
   bd132:	6003      	str	r3, [r0, #0]
   bd134:	4646      	mov	r6, r8
   bd136:	b942      	cbnz	r2, bd14a <_strtol_l.constprop.0+0xe6>
   bd138:	4630      	mov	r0, r6
   bd13a:	e79e      	b.n	bd07a <_strtol_l.constprop.0+0x16>
   bd13c:	b107      	cbz	r7, bd140 <_strtol_l.constprop.0+0xdc>
   bd13e:	4276      	negs	r6, r6
   bd140:	2a00      	cmp	r2, #0
   bd142:	d0f9      	beq.n	bd138 <_strtol_l.constprop.0+0xd4>
   bd144:	f1bc 0f00 	cmp.w	ip, #0
   bd148:	d000      	beq.n	bd14c <_strtol_l.constprop.0+0xe8>
   bd14a:	1e69      	subs	r1, r5, #1
   bd14c:	6011      	str	r1, [r2, #0]
   bd14e:	e7f3      	b.n	bd138 <_strtol_l.constprop.0+0xd4>
   bd150:	2430      	movs	r4, #48	; 0x30
   bd152:	2b00      	cmp	r3, #0
   bd154:	d1b1      	bne.n	bd0ba <_strtol_l.constprop.0+0x56>
   bd156:	2308      	movs	r3, #8
   bd158:	e7af      	b.n	bd0ba <_strtol_l.constprop.0+0x56>
   bd15a:	2c30      	cmp	r4, #48	; 0x30
   bd15c:	d0a5      	beq.n	bd0aa <_strtol_l.constprop.0+0x46>
   bd15e:	230a      	movs	r3, #10
   bd160:	e7ab      	b.n	bd0ba <_strtol_l.constprop.0+0x56>
   bd162:	bf00      	nop
   bd164:	000beea1 	.word	0x000beea1

000bd168 <strtol>:
   bd168:	4613      	mov	r3, r2
   bd16a:	460a      	mov	r2, r1
   bd16c:	4601      	mov	r1, r0
   bd16e:	4802      	ldr	r0, [pc, #8]	; (bd178 <strtol+0x10>)
   bd170:	6800      	ldr	r0, [r0, #0]
   bd172:	f7ff bf77 	b.w	bd064 <_strtol_l.constprop.0>
   bd176:	bf00      	nop
   bd178:	200350c8 	.word	0x200350c8

000bd17c <__register_exitproc>:
   bd17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd180:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bd23c <__register_exitproc+0xc0>
   bd184:	4606      	mov	r6, r0
   bd186:	f8d8 0000 	ldr.w	r0, [r8]
   bd18a:	461f      	mov	r7, r3
   bd18c:	460d      	mov	r5, r1
   bd18e:	4691      	mov	r9, r2
   bd190:	f000 fbc6 	bl	bd920 <__retarget_lock_acquire_recursive>
   bd194:	4b25      	ldr	r3, [pc, #148]	; (bd22c <__register_exitproc+0xb0>)
   bd196:	681c      	ldr	r4, [r3, #0]
   bd198:	b934      	cbnz	r4, bd1a8 <__register_exitproc+0x2c>
   bd19a:	4c25      	ldr	r4, [pc, #148]	; (bd230 <__register_exitproc+0xb4>)
   bd19c:	601c      	str	r4, [r3, #0]
   bd19e:	4b25      	ldr	r3, [pc, #148]	; (bd234 <__register_exitproc+0xb8>)
   bd1a0:	b113      	cbz	r3, bd1a8 <__register_exitproc+0x2c>
   bd1a2:	681b      	ldr	r3, [r3, #0]
   bd1a4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bd1a8:	6863      	ldr	r3, [r4, #4]
   bd1aa:	2b1f      	cmp	r3, #31
   bd1ac:	dd07      	ble.n	bd1be <__register_exitproc+0x42>
   bd1ae:	f8d8 0000 	ldr.w	r0, [r8]
   bd1b2:	f000 fbb7 	bl	bd924 <__retarget_lock_release_recursive>
   bd1b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bd1ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd1be:	b34e      	cbz	r6, bd214 <__register_exitproc+0x98>
   bd1c0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bd1c4:	b988      	cbnz	r0, bd1ea <__register_exitproc+0x6e>
   bd1c6:	4b1c      	ldr	r3, [pc, #112]	; (bd238 <__register_exitproc+0xbc>)
   bd1c8:	b923      	cbnz	r3, bd1d4 <__register_exitproc+0x58>
   bd1ca:	f8d8 0000 	ldr.w	r0, [r8]
   bd1ce:	f000 fba8 	bl	bd922 <__retarget_lock_release>
   bd1d2:	e7f0      	b.n	bd1b6 <__register_exitproc+0x3a>
   bd1d4:	f44f 7084 	mov.w	r0, #264	; 0x108
   bd1d8:	f7fb fcb2 	bl	b8b40 <malloc>
   bd1dc:	2800      	cmp	r0, #0
   bd1de:	d0f4      	beq.n	bd1ca <__register_exitproc+0x4e>
   bd1e0:	2300      	movs	r3, #0
   bd1e2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bd1e6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bd1ea:	6863      	ldr	r3, [r4, #4]
   bd1ec:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bd1f0:	2201      	movs	r2, #1
   bd1f2:	409a      	lsls	r2, r3
   bd1f4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bd1f8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bd1fc:	4313      	orrs	r3, r2
   bd1fe:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bd202:	2e02      	cmp	r6, #2
   bd204:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bd208:	bf02      	ittt	eq
   bd20a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bd20e:	4313      	orreq	r3, r2
   bd210:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bd214:	6863      	ldr	r3, [r4, #4]
   bd216:	f8d8 0000 	ldr.w	r0, [r8]
   bd21a:	1c5a      	adds	r2, r3, #1
   bd21c:	3302      	adds	r3, #2
   bd21e:	6062      	str	r2, [r4, #4]
   bd220:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bd224:	f000 fb7e 	bl	bd924 <__retarget_lock_release_recursive>
   bd228:	2000      	movs	r0, #0
   bd22a:	e7c6      	b.n	bd1ba <__register_exitproc+0x3e>
   bd22c:	2003e7e8 	.word	0x2003e7e8
   bd230:	2003e75c 	.word	0x2003e75c
   bd234:	00000000 	.word	0x00000000
   bd238:	000b8b41 	.word	0x000b8b41
   bd23c:	2003512c 	.word	0x2003512c

000bd240 <rshift>:
   bd240:	6903      	ldr	r3, [r0, #16]
   bd242:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bd246:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd24a:	ea4f 1261 	mov.w	r2, r1, asr #5
   bd24e:	f100 0414 	add.w	r4, r0, #20
   bd252:	dd45      	ble.n	bd2e0 <rshift+0xa0>
   bd254:	f011 011f 	ands.w	r1, r1, #31
   bd258:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bd25c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bd260:	d10c      	bne.n	bd27c <rshift+0x3c>
   bd262:	f100 0710 	add.w	r7, r0, #16
   bd266:	4629      	mov	r1, r5
   bd268:	42b1      	cmp	r1, r6
   bd26a:	d334      	bcc.n	bd2d6 <rshift+0x96>
   bd26c:	1a9b      	subs	r3, r3, r2
   bd26e:	009b      	lsls	r3, r3, #2
   bd270:	1eea      	subs	r2, r5, #3
   bd272:	4296      	cmp	r6, r2
   bd274:	bf38      	it	cc
   bd276:	2300      	movcc	r3, #0
   bd278:	4423      	add	r3, r4
   bd27a:	e015      	b.n	bd2a8 <rshift+0x68>
   bd27c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bd280:	f1c1 0820 	rsb	r8, r1, #32
   bd284:	40cf      	lsrs	r7, r1
   bd286:	f105 0e04 	add.w	lr, r5, #4
   bd28a:	46a1      	mov	r9, r4
   bd28c:	4576      	cmp	r6, lr
   bd28e:	46f4      	mov	ip, lr
   bd290:	d815      	bhi.n	bd2be <rshift+0x7e>
   bd292:	1a9a      	subs	r2, r3, r2
   bd294:	0092      	lsls	r2, r2, #2
   bd296:	3a04      	subs	r2, #4
   bd298:	3501      	adds	r5, #1
   bd29a:	42ae      	cmp	r6, r5
   bd29c:	bf38      	it	cc
   bd29e:	2200      	movcc	r2, #0
   bd2a0:	18a3      	adds	r3, r4, r2
   bd2a2:	50a7      	str	r7, [r4, r2]
   bd2a4:	b107      	cbz	r7, bd2a8 <rshift+0x68>
   bd2a6:	3304      	adds	r3, #4
   bd2a8:	1b1a      	subs	r2, r3, r4
   bd2aa:	42a3      	cmp	r3, r4
   bd2ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bd2b0:	bf08      	it	eq
   bd2b2:	2300      	moveq	r3, #0
   bd2b4:	6102      	str	r2, [r0, #16]
   bd2b6:	bf08      	it	eq
   bd2b8:	6143      	streq	r3, [r0, #20]
   bd2ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd2be:	f8dc c000 	ldr.w	ip, [ip]
   bd2c2:	fa0c fc08 	lsl.w	ip, ip, r8
   bd2c6:	ea4c 0707 	orr.w	r7, ip, r7
   bd2ca:	f849 7b04 	str.w	r7, [r9], #4
   bd2ce:	f85e 7b04 	ldr.w	r7, [lr], #4
   bd2d2:	40cf      	lsrs	r7, r1
   bd2d4:	e7da      	b.n	bd28c <rshift+0x4c>
   bd2d6:	f851 cb04 	ldr.w	ip, [r1], #4
   bd2da:	f847 cf04 	str.w	ip, [r7, #4]!
   bd2de:	e7c3      	b.n	bd268 <rshift+0x28>
   bd2e0:	4623      	mov	r3, r4
   bd2e2:	e7e1      	b.n	bd2a8 <rshift+0x68>

000bd2e4 <__hexdig_fun>:
   bd2e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bd2e8:	2b09      	cmp	r3, #9
   bd2ea:	d802      	bhi.n	bd2f2 <__hexdig_fun+0xe>
   bd2ec:	3820      	subs	r0, #32
   bd2ee:	b2c0      	uxtb	r0, r0
   bd2f0:	4770      	bx	lr
   bd2f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bd2f6:	2b05      	cmp	r3, #5
   bd2f8:	d801      	bhi.n	bd2fe <__hexdig_fun+0x1a>
   bd2fa:	3847      	subs	r0, #71	; 0x47
   bd2fc:	e7f7      	b.n	bd2ee <__hexdig_fun+0xa>
   bd2fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bd302:	2b05      	cmp	r3, #5
   bd304:	d801      	bhi.n	bd30a <__hexdig_fun+0x26>
   bd306:	3827      	subs	r0, #39	; 0x27
   bd308:	e7f1      	b.n	bd2ee <__hexdig_fun+0xa>
   bd30a:	2000      	movs	r0, #0
   bd30c:	4770      	bx	lr
	...

000bd310 <__gethex>:
   bd310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd314:	ed2d 8b02 	vpush	{d8}
   bd318:	b089      	sub	sp, #36	; 0x24
   bd31a:	ee08 0a10 	vmov	s16, r0
   bd31e:	9304      	str	r3, [sp, #16]
   bd320:	4bb4      	ldr	r3, [pc, #720]	; (bd5f4 <__gethex+0x2e4>)
   bd322:	681b      	ldr	r3, [r3, #0]
   bd324:	9301      	str	r3, [sp, #4]
   bd326:	4618      	mov	r0, r3
   bd328:	468b      	mov	fp, r1
   bd32a:	4690      	mov	r8, r2
   bd32c:	f7fe ffde 	bl	bc2ec <strlen>
   bd330:	9b01      	ldr	r3, [sp, #4]
   bd332:	f8db 2000 	ldr.w	r2, [fp]
   bd336:	4403      	add	r3, r0
   bd338:	4682      	mov	sl, r0
   bd33a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bd33e:	9305      	str	r3, [sp, #20]
   bd340:	1c93      	adds	r3, r2, #2
   bd342:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bd346:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bd34a:	32fe      	adds	r2, #254	; 0xfe
   bd34c:	18d1      	adds	r1, r2, r3
   bd34e:	461f      	mov	r7, r3
   bd350:	f813 0b01 	ldrb.w	r0, [r3], #1
   bd354:	9100      	str	r1, [sp, #0]
   bd356:	2830      	cmp	r0, #48	; 0x30
   bd358:	d0f8      	beq.n	bd34c <__gethex+0x3c>
   bd35a:	f7ff ffc3 	bl	bd2e4 <__hexdig_fun>
   bd35e:	4604      	mov	r4, r0
   bd360:	2800      	cmp	r0, #0
   bd362:	d13a      	bne.n	bd3da <__gethex+0xca>
   bd364:	9901      	ldr	r1, [sp, #4]
   bd366:	4652      	mov	r2, sl
   bd368:	4638      	mov	r0, r7
   bd36a:	f7fe ffc7 	bl	bc2fc <strncmp>
   bd36e:	4605      	mov	r5, r0
   bd370:	2800      	cmp	r0, #0
   bd372:	d168      	bne.n	bd446 <__gethex+0x136>
   bd374:	f817 000a 	ldrb.w	r0, [r7, sl]
   bd378:	eb07 060a 	add.w	r6, r7, sl
   bd37c:	f7ff ffb2 	bl	bd2e4 <__hexdig_fun>
   bd380:	2800      	cmp	r0, #0
   bd382:	d062      	beq.n	bd44a <__gethex+0x13a>
   bd384:	4633      	mov	r3, r6
   bd386:	7818      	ldrb	r0, [r3, #0]
   bd388:	2830      	cmp	r0, #48	; 0x30
   bd38a:	461f      	mov	r7, r3
   bd38c:	f103 0301 	add.w	r3, r3, #1
   bd390:	d0f9      	beq.n	bd386 <__gethex+0x76>
   bd392:	f7ff ffa7 	bl	bd2e4 <__hexdig_fun>
   bd396:	2301      	movs	r3, #1
   bd398:	fab0 f480 	clz	r4, r0
   bd39c:	0964      	lsrs	r4, r4, #5
   bd39e:	4635      	mov	r5, r6
   bd3a0:	9300      	str	r3, [sp, #0]
   bd3a2:	463a      	mov	r2, r7
   bd3a4:	4616      	mov	r6, r2
   bd3a6:	3201      	adds	r2, #1
   bd3a8:	7830      	ldrb	r0, [r6, #0]
   bd3aa:	f7ff ff9b 	bl	bd2e4 <__hexdig_fun>
   bd3ae:	2800      	cmp	r0, #0
   bd3b0:	d1f8      	bne.n	bd3a4 <__gethex+0x94>
   bd3b2:	9901      	ldr	r1, [sp, #4]
   bd3b4:	4652      	mov	r2, sl
   bd3b6:	4630      	mov	r0, r6
   bd3b8:	f7fe ffa0 	bl	bc2fc <strncmp>
   bd3bc:	b980      	cbnz	r0, bd3e0 <__gethex+0xd0>
   bd3be:	b94d      	cbnz	r5, bd3d4 <__gethex+0xc4>
   bd3c0:	eb06 050a 	add.w	r5, r6, sl
   bd3c4:	462a      	mov	r2, r5
   bd3c6:	4616      	mov	r6, r2
   bd3c8:	3201      	adds	r2, #1
   bd3ca:	7830      	ldrb	r0, [r6, #0]
   bd3cc:	f7ff ff8a 	bl	bd2e4 <__hexdig_fun>
   bd3d0:	2800      	cmp	r0, #0
   bd3d2:	d1f8      	bne.n	bd3c6 <__gethex+0xb6>
   bd3d4:	1bad      	subs	r5, r5, r6
   bd3d6:	00ad      	lsls	r5, r5, #2
   bd3d8:	e004      	b.n	bd3e4 <__gethex+0xd4>
   bd3da:	2400      	movs	r4, #0
   bd3dc:	4625      	mov	r5, r4
   bd3de:	e7e0      	b.n	bd3a2 <__gethex+0x92>
   bd3e0:	2d00      	cmp	r5, #0
   bd3e2:	d1f7      	bne.n	bd3d4 <__gethex+0xc4>
   bd3e4:	7833      	ldrb	r3, [r6, #0]
   bd3e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bd3ea:	2b50      	cmp	r3, #80	; 0x50
   bd3ec:	d13b      	bne.n	bd466 <__gethex+0x156>
   bd3ee:	7873      	ldrb	r3, [r6, #1]
   bd3f0:	2b2b      	cmp	r3, #43	; 0x2b
   bd3f2:	d02c      	beq.n	bd44e <__gethex+0x13e>
   bd3f4:	2b2d      	cmp	r3, #45	; 0x2d
   bd3f6:	d02e      	beq.n	bd456 <__gethex+0x146>
   bd3f8:	1c71      	adds	r1, r6, #1
   bd3fa:	f04f 0900 	mov.w	r9, #0
   bd3fe:	7808      	ldrb	r0, [r1, #0]
   bd400:	f7ff ff70 	bl	bd2e4 <__hexdig_fun>
   bd404:	1e43      	subs	r3, r0, #1
   bd406:	b2db      	uxtb	r3, r3
   bd408:	2b18      	cmp	r3, #24
   bd40a:	d82c      	bhi.n	bd466 <__gethex+0x156>
   bd40c:	f1a0 0210 	sub.w	r2, r0, #16
   bd410:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bd414:	f7ff ff66 	bl	bd2e4 <__hexdig_fun>
   bd418:	1e43      	subs	r3, r0, #1
   bd41a:	b2db      	uxtb	r3, r3
   bd41c:	2b18      	cmp	r3, #24
   bd41e:	d91d      	bls.n	bd45c <__gethex+0x14c>
   bd420:	f1b9 0f00 	cmp.w	r9, #0
   bd424:	d000      	beq.n	bd428 <__gethex+0x118>
   bd426:	4252      	negs	r2, r2
   bd428:	4415      	add	r5, r2
   bd42a:	f8cb 1000 	str.w	r1, [fp]
   bd42e:	b1e4      	cbz	r4, bd46a <__gethex+0x15a>
   bd430:	9b00      	ldr	r3, [sp, #0]
   bd432:	2b00      	cmp	r3, #0
   bd434:	bf14      	ite	ne
   bd436:	2700      	movne	r7, #0
   bd438:	2706      	moveq	r7, #6
   bd43a:	4638      	mov	r0, r7
   bd43c:	b009      	add	sp, #36	; 0x24
   bd43e:	ecbd 8b02 	vpop	{d8}
   bd442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd446:	463e      	mov	r6, r7
   bd448:	4625      	mov	r5, r4
   bd44a:	2401      	movs	r4, #1
   bd44c:	e7ca      	b.n	bd3e4 <__gethex+0xd4>
   bd44e:	f04f 0900 	mov.w	r9, #0
   bd452:	1cb1      	adds	r1, r6, #2
   bd454:	e7d3      	b.n	bd3fe <__gethex+0xee>
   bd456:	f04f 0901 	mov.w	r9, #1
   bd45a:	e7fa      	b.n	bd452 <__gethex+0x142>
   bd45c:	230a      	movs	r3, #10
   bd45e:	fb03 0202 	mla	r2, r3, r2, r0
   bd462:	3a10      	subs	r2, #16
   bd464:	e7d4      	b.n	bd410 <__gethex+0x100>
   bd466:	4631      	mov	r1, r6
   bd468:	e7df      	b.n	bd42a <__gethex+0x11a>
   bd46a:	1bf3      	subs	r3, r6, r7
   bd46c:	3b01      	subs	r3, #1
   bd46e:	4621      	mov	r1, r4
   bd470:	2b07      	cmp	r3, #7
   bd472:	dc0b      	bgt.n	bd48c <__gethex+0x17c>
   bd474:	ee18 0a10 	vmov	r0, s16
   bd478:	f000 fa68 	bl	bd94c <_Balloc>
   bd47c:	4604      	mov	r4, r0
   bd47e:	b940      	cbnz	r0, bd492 <__gethex+0x182>
   bd480:	4b5d      	ldr	r3, [pc, #372]	; (bd5f8 <__gethex+0x2e8>)
   bd482:	4602      	mov	r2, r0
   bd484:	21de      	movs	r1, #222	; 0xde
   bd486:	485d      	ldr	r0, [pc, #372]	; (bd5fc <__gethex+0x2ec>)
   bd488:	f7fb fb9a 	bl	b8bc0 <__assert_func>
   bd48c:	3101      	adds	r1, #1
   bd48e:	105b      	asrs	r3, r3, #1
   bd490:	e7ee      	b.n	bd470 <__gethex+0x160>
   bd492:	f100 0914 	add.w	r9, r0, #20
   bd496:	f04f 0b00 	mov.w	fp, #0
   bd49a:	f1ca 0301 	rsb	r3, sl, #1
   bd49e:	f8cd 9008 	str.w	r9, [sp, #8]
   bd4a2:	f8cd b000 	str.w	fp, [sp]
   bd4a6:	9306      	str	r3, [sp, #24]
   bd4a8:	42b7      	cmp	r7, r6
   bd4aa:	d340      	bcc.n	bd52e <__gethex+0x21e>
   bd4ac:	9802      	ldr	r0, [sp, #8]
   bd4ae:	9b00      	ldr	r3, [sp, #0]
   bd4b0:	f840 3b04 	str.w	r3, [r0], #4
   bd4b4:	eba0 0009 	sub.w	r0, r0, r9
   bd4b8:	1080      	asrs	r0, r0, #2
   bd4ba:	0146      	lsls	r6, r0, #5
   bd4bc:	6120      	str	r0, [r4, #16]
   bd4be:	4618      	mov	r0, r3
   bd4c0:	f000 fb36 	bl	bdb30 <__hi0bits>
   bd4c4:	1a30      	subs	r0, r6, r0
   bd4c6:	f8d8 6000 	ldr.w	r6, [r8]
   bd4ca:	42b0      	cmp	r0, r6
   bd4cc:	dd63      	ble.n	bd596 <__gethex+0x286>
   bd4ce:	1b87      	subs	r7, r0, r6
   bd4d0:	4639      	mov	r1, r7
   bd4d2:	4620      	mov	r0, r4
   bd4d4:	f000 feda 	bl	be28c <__any_on>
   bd4d8:	4682      	mov	sl, r0
   bd4da:	b1a8      	cbz	r0, bd508 <__gethex+0x1f8>
   bd4dc:	1e7b      	subs	r3, r7, #1
   bd4de:	1159      	asrs	r1, r3, #5
   bd4e0:	f003 021f 	and.w	r2, r3, #31
   bd4e4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bd4e8:	f04f 0a01 	mov.w	sl, #1
   bd4ec:	fa0a f202 	lsl.w	r2, sl, r2
   bd4f0:	420a      	tst	r2, r1
   bd4f2:	d009      	beq.n	bd508 <__gethex+0x1f8>
   bd4f4:	4553      	cmp	r3, sl
   bd4f6:	dd05      	ble.n	bd504 <__gethex+0x1f4>
   bd4f8:	1eb9      	subs	r1, r7, #2
   bd4fa:	4620      	mov	r0, r4
   bd4fc:	f000 fec6 	bl	be28c <__any_on>
   bd500:	2800      	cmp	r0, #0
   bd502:	d145      	bne.n	bd590 <__gethex+0x280>
   bd504:	f04f 0a02 	mov.w	sl, #2
   bd508:	4639      	mov	r1, r7
   bd50a:	4620      	mov	r0, r4
   bd50c:	f7ff fe98 	bl	bd240 <rshift>
   bd510:	443d      	add	r5, r7
   bd512:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bd516:	42ab      	cmp	r3, r5
   bd518:	da4c      	bge.n	bd5b4 <__gethex+0x2a4>
   bd51a:	ee18 0a10 	vmov	r0, s16
   bd51e:	4621      	mov	r1, r4
   bd520:	f000 fa54 	bl	bd9cc <_Bfree>
   bd524:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd526:	2300      	movs	r3, #0
   bd528:	6013      	str	r3, [r2, #0]
   bd52a:	27a3      	movs	r7, #163	; 0xa3
   bd52c:	e785      	b.n	bd43a <__gethex+0x12a>
   bd52e:	1e73      	subs	r3, r6, #1
   bd530:	9a05      	ldr	r2, [sp, #20]
   bd532:	9303      	str	r3, [sp, #12]
   bd534:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bd538:	4293      	cmp	r3, r2
   bd53a:	d019      	beq.n	bd570 <__gethex+0x260>
   bd53c:	f1bb 0f20 	cmp.w	fp, #32
   bd540:	d107      	bne.n	bd552 <__gethex+0x242>
   bd542:	9b02      	ldr	r3, [sp, #8]
   bd544:	9a00      	ldr	r2, [sp, #0]
   bd546:	f843 2b04 	str.w	r2, [r3], #4
   bd54a:	9302      	str	r3, [sp, #8]
   bd54c:	2300      	movs	r3, #0
   bd54e:	9300      	str	r3, [sp, #0]
   bd550:	469b      	mov	fp, r3
   bd552:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bd556:	f7ff fec5 	bl	bd2e4 <__hexdig_fun>
   bd55a:	9b00      	ldr	r3, [sp, #0]
   bd55c:	f000 000f 	and.w	r0, r0, #15
   bd560:	fa00 f00b 	lsl.w	r0, r0, fp
   bd564:	4303      	orrs	r3, r0
   bd566:	9300      	str	r3, [sp, #0]
   bd568:	f10b 0b04 	add.w	fp, fp, #4
   bd56c:	9b03      	ldr	r3, [sp, #12]
   bd56e:	e00d      	b.n	bd58c <__gethex+0x27c>
   bd570:	9b03      	ldr	r3, [sp, #12]
   bd572:	9a06      	ldr	r2, [sp, #24]
   bd574:	4413      	add	r3, r2
   bd576:	42bb      	cmp	r3, r7
   bd578:	d3e0      	bcc.n	bd53c <__gethex+0x22c>
   bd57a:	4618      	mov	r0, r3
   bd57c:	9901      	ldr	r1, [sp, #4]
   bd57e:	9307      	str	r3, [sp, #28]
   bd580:	4652      	mov	r2, sl
   bd582:	f7fe febb 	bl	bc2fc <strncmp>
   bd586:	9b07      	ldr	r3, [sp, #28]
   bd588:	2800      	cmp	r0, #0
   bd58a:	d1d7      	bne.n	bd53c <__gethex+0x22c>
   bd58c:	461e      	mov	r6, r3
   bd58e:	e78b      	b.n	bd4a8 <__gethex+0x198>
   bd590:	f04f 0a03 	mov.w	sl, #3
   bd594:	e7b8      	b.n	bd508 <__gethex+0x1f8>
   bd596:	da0a      	bge.n	bd5ae <__gethex+0x29e>
   bd598:	1a37      	subs	r7, r6, r0
   bd59a:	4621      	mov	r1, r4
   bd59c:	ee18 0a10 	vmov	r0, s16
   bd5a0:	463a      	mov	r2, r7
   bd5a2:	f000 fc2f 	bl	bde04 <__lshift>
   bd5a6:	1bed      	subs	r5, r5, r7
   bd5a8:	4604      	mov	r4, r0
   bd5aa:	f100 0914 	add.w	r9, r0, #20
   bd5ae:	f04f 0a00 	mov.w	sl, #0
   bd5b2:	e7ae      	b.n	bd512 <__gethex+0x202>
   bd5b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bd5b8:	42a8      	cmp	r0, r5
   bd5ba:	dd72      	ble.n	bd6a2 <__gethex+0x392>
   bd5bc:	1b45      	subs	r5, r0, r5
   bd5be:	42ae      	cmp	r6, r5
   bd5c0:	dc36      	bgt.n	bd630 <__gethex+0x320>
   bd5c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd5c6:	2b02      	cmp	r3, #2
   bd5c8:	d02a      	beq.n	bd620 <__gethex+0x310>
   bd5ca:	2b03      	cmp	r3, #3
   bd5cc:	d02c      	beq.n	bd628 <__gethex+0x318>
   bd5ce:	2b01      	cmp	r3, #1
   bd5d0:	d11c      	bne.n	bd60c <__gethex+0x2fc>
   bd5d2:	42ae      	cmp	r6, r5
   bd5d4:	d11a      	bne.n	bd60c <__gethex+0x2fc>
   bd5d6:	2e01      	cmp	r6, #1
   bd5d8:	d112      	bne.n	bd600 <__gethex+0x2f0>
   bd5da:	9a04      	ldr	r2, [sp, #16]
   bd5dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bd5e0:	6013      	str	r3, [r2, #0]
   bd5e2:	2301      	movs	r3, #1
   bd5e4:	6123      	str	r3, [r4, #16]
   bd5e6:	f8c9 3000 	str.w	r3, [r9]
   bd5ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd5ec:	2762      	movs	r7, #98	; 0x62
   bd5ee:	601c      	str	r4, [r3, #0]
   bd5f0:	e723      	b.n	bd43a <__gethex+0x12a>
   bd5f2:	bf00      	nop
   bd5f4:	000bf014 	.word	0x000bf014
   bd5f8:	000befa1 	.word	0x000befa1
   bd5fc:	000befb2 	.word	0x000befb2
   bd600:	1e71      	subs	r1, r6, #1
   bd602:	4620      	mov	r0, r4
   bd604:	f000 fe42 	bl	be28c <__any_on>
   bd608:	2800      	cmp	r0, #0
   bd60a:	d1e6      	bne.n	bd5da <__gethex+0x2ca>
   bd60c:	ee18 0a10 	vmov	r0, s16
   bd610:	4621      	mov	r1, r4
   bd612:	f000 f9db 	bl	bd9cc <_Bfree>
   bd616:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd618:	2300      	movs	r3, #0
   bd61a:	6013      	str	r3, [r2, #0]
   bd61c:	2750      	movs	r7, #80	; 0x50
   bd61e:	e70c      	b.n	bd43a <__gethex+0x12a>
   bd620:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd622:	2b00      	cmp	r3, #0
   bd624:	d1f2      	bne.n	bd60c <__gethex+0x2fc>
   bd626:	e7d8      	b.n	bd5da <__gethex+0x2ca>
   bd628:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd62a:	2b00      	cmp	r3, #0
   bd62c:	d1d5      	bne.n	bd5da <__gethex+0x2ca>
   bd62e:	e7ed      	b.n	bd60c <__gethex+0x2fc>
   bd630:	1e6f      	subs	r7, r5, #1
   bd632:	f1ba 0f00 	cmp.w	sl, #0
   bd636:	d131      	bne.n	bd69c <__gethex+0x38c>
   bd638:	b127      	cbz	r7, bd644 <__gethex+0x334>
   bd63a:	4639      	mov	r1, r7
   bd63c:	4620      	mov	r0, r4
   bd63e:	f000 fe25 	bl	be28c <__any_on>
   bd642:	4682      	mov	sl, r0
   bd644:	117b      	asrs	r3, r7, #5
   bd646:	2101      	movs	r1, #1
   bd648:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bd64c:	f007 071f 	and.w	r7, r7, #31
   bd650:	fa01 f707 	lsl.w	r7, r1, r7
   bd654:	421f      	tst	r7, r3
   bd656:	4629      	mov	r1, r5
   bd658:	4620      	mov	r0, r4
   bd65a:	bf18      	it	ne
   bd65c:	f04a 0a02 	orrne.w	sl, sl, #2
   bd660:	1b76      	subs	r6, r6, r5
   bd662:	f7ff fded 	bl	bd240 <rshift>
   bd666:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bd66a:	2702      	movs	r7, #2
   bd66c:	f1ba 0f00 	cmp.w	sl, #0
   bd670:	d048      	beq.n	bd704 <__gethex+0x3f4>
   bd672:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd676:	2b02      	cmp	r3, #2
   bd678:	d015      	beq.n	bd6a6 <__gethex+0x396>
   bd67a:	2b03      	cmp	r3, #3
   bd67c:	d017      	beq.n	bd6ae <__gethex+0x39e>
   bd67e:	2b01      	cmp	r3, #1
   bd680:	d109      	bne.n	bd696 <__gethex+0x386>
   bd682:	f01a 0f02 	tst.w	sl, #2
   bd686:	d006      	beq.n	bd696 <__gethex+0x386>
   bd688:	f8d9 0000 	ldr.w	r0, [r9]
   bd68c:	ea4a 0a00 	orr.w	sl, sl, r0
   bd690:	f01a 0f01 	tst.w	sl, #1
   bd694:	d10e      	bne.n	bd6b4 <__gethex+0x3a4>
   bd696:	f047 0710 	orr.w	r7, r7, #16
   bd69a:	e033      	b.n	bd704 <__gethex+0x3f4>
   bd69c:	f04f 0a01 	mov.w	sl, #1
   bd6a0:	e7d0      	b.n	bd644 <__gethex+0x334>
   bd6a2:	2701      	movs	r7, #1
   bd6a4:	e7e2      	b.n	bd66c <__gethex+0x35c>
   bd6a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd6a8:	f1c3 0301 	rsb	r3, r3, #1
   bd6ac:	9315      	str	r3, [sp, #84]	; 0x54
   bd6ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd6b0:	2b00      	cmp	r3, #0
   bd6b2:	d0f0      	beq.n	bd696 <__gethex+0x386>
   bd6b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bd6b8:	f104 0314 	add.w	r3, r4, #20
   bd6bc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bd6c0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bd6c4:	f04f 0c00 	mov.w	ip, #0
   bd6c8:	4618      	mov	r0, r3
   bd6ca:	f853 2b04 	ldr.w	r2, [r3], #4
   bd6ce:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bd6d2:	d01c      	beq.n	bd70e <__gethex+0x3fe>
   bd6d4:	3201      	adds	r2, #1
   bd6d6:	6002      	str	r2, [r0, #0]
   bd6d8:	2f02      	cmp	r7, #2
   bd6da:	f104 0314 	add.w	r3, r4, #20
   bd6de:	d13f      	bne.n	bd760 <__gethex+0x450>
   bd6e0:	f8d8 2000 	ldr.w	r2, [r8]
   bd6e4:	3a01      	subs	r2, #1
   bd6e6:	42b2      	cmp	r2, r6
   bd6e8:	d10a      	bne.n	bd700 <__gethex+0x3f0>
   bd6ea:	1171      	asrs	r1, r6, #5
   bd6ec:	2201      	movs	r2, #1
   bd6ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bd6f2:	f006 061f 	and.w	r6, r6, #31
   bd6f6:	fa02 f606 	lsl.w	r6, r2, r6
   bd6fa:	421e      	tst	r6, r3
   bd6fc:	bf18      	it	ne
   bd6fe:	4617      	movne	r7, r2
   bd700:	f047 0720 	orr.w	r7, r7, #32
   bd704:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd706:	601c      	str	r4, [r3, #0]
   bd708:	9b04      	ldr	r3, [sp, #16]
   bd70a:	601d      	str	r5, [r3, #0]
   bd70c:	e695      	b.n	bd43a <__gethex+0x12a>
   bd70e:	4299      	cmp	r1, r3
   bd710:	f843 cc04 	str.w	ip, [r3, #-4]
   bd714:	d8d8      	bhi.n	bd6c8 <__gethex+0x3b8>
   bd716:	68a3      	ldr	r3, [r4, #8]
   bd718:	459b      	cmp	fp, r3
   bd71a:	db19      	blt.n	bd750 <__gethex+0x440>
   bd71c:	6861      	ldr	r1, [r4, #4]
   bd71e:	ee18 0a10 	vmov	r0, s16
   bd722:	3101      	adds	r1, #1
   bd724:	f000 f912 	bl	bd94c <_Balloc>
   bd728:	4681      	mov	r9, r0
   bd72a:	b918      	cbnz	r0, bd734 <__gethex+0x424>
   bd72c:	4b1a      	ldr	r3, [pc, #104]	; (bd798 <__gethex+0x488>)
   bd72e:	4602      	mov	r2, r0
   bd730:	2184      	movs	r1, #132	; 0x84
   bd732:	e6a8      	b.n	bd486 <__gethex+0x176>
   bd734:	6922      	ldr	r2, [r4, #16]
   bd736:	3202      	adds	r2, #2
   bd738:	f104 010c 	add.w	r1, r4, #12
   bd73c:	0092      	lsls	r2, r2, #2
   bd73e:	300c      	adds	r0, #12
   bd740:	f7fe fd64 	bl	bc20c <memcpy>
   bd744:	4621      	mov	r1, r4
   bd746:	ee18 0a10 	vmov	r0, s16
   bd74a:	f000 f93f 	bl	bd9cc <_Bfree>
   bd74e:	464c      	mov	r4, r9
   bd750:	6923      	ldr	r3, [r4, #16]
   bd752:	1c5a      	adds	r2, r3, #1
   bd754:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bd758:	6122      	str	r2, [r4, #16]
   bd75a:	2201      	movs	r2, #1
   bd75c:	615a      	str	r2, [r3, #20]
   bd75e:	e7bb      	b.n	bd6d8 <__gethex+0x3c8>
   bd760:	6922      	ldr	r2, [r4, #16]
   bd762:	455a      	cmp	r2, fp
   bd764:	dd0b      	ble.n	bd77e <__gethex+0x46e>
   bd766:	2101      	movs	r1, #1
   bd768:	4620      	mov	r0, r4
   bd76a:	f7ff fd69 	bl	bd240 <rshift>
   bd76e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bd772:	3501      	adds	r5, #1
   bd774:	42ab      	cmp	r3, r5
   bd776:	f6ff aed0 	blt.w	bd51a <__gethex+0x20a>
   bd77a:	2701      	movs	r7, #1
   bd77c:	e7c0      	b.n	bd700 <__gethex+0x3f0>
   bd77e:	f016 061f 	ands.w	r6, r6, #31
   bd782:	d0fa      	beq.n	bd77a <__gethex+0x46a>
   bd784:	4453      	add	r3, sl
   bd786:	f1c6 0620 	rsb	r6, r6, #32
   bd78a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bd78e:	f000 f9cf 	bl	bdb30 <__hi0bits>
   bd792:	42b0      	cmp	r0, r6
   bd794:	dbe7      	blt.n	bd766 <__gethex+0x456>
   bd796:	e7f0      	b.n	bd77a <__gethex+0x46a>
   bd798:	000befa1 	.word	0x000befa1

000bd79c <L_shift>:
   bd79c:	f1c2 0208 	rsb	r2, r2, #8
   bd7a0:	0092      	lsls	r2, r2, #2
   bd7a2:	b570      	push	{r4, r5, r6, lr}
   bd7a4:	f1c2 0620 	rsb	r6, r2, #32
   bd7a8:	6843      	ldr	r3, [r0, #4]
   bd7aa:	6804      	ldr	r4, [r0, #0]
   bd7ac:	fa03 f506 	lsl.w	r5, r3, r6
   bd7b0:	432c      	orrs	r4, r5
   bd7b2:	40d3      	lsrs	r3, r2
   bd7b4:	6004      	str	r4, [r0, #0]
   bd7b6:	f840 3f04 	str.w	r3, [r0, #4]!
   bd7ba:	4288      	cmp	r0, r1
   bd7bc:	d3f4      	bcc.n	bd7a8 <L_shift+0xc>
   bd7be:	bd70      	pop	{r4, r5, r6, pc}

000bd7c0 <__match>:
   bd7c0:	b530      	push	{r4, r5, lr}
   bd7c2:	6803      	ldr	r3, [r0, #0]
   bd7c4:	3301      	adds	r3, #1
   bd7c6:	f811 4b01 	ldrb.w	r4, [r1], #1
   bd7ca:	b914      	cbnz	r4, bd7d2 <__match+0x12>
   bd7cc:	6003      	str	r3, [r0, #0]
   bd7ce:	2001      	movs	r0, #1
   bd7d0:	bd30      	pop	{r4, r5, pc}
   bd7d2:	f813 2b01 	ldrb.w	r2, [r3], #1
   bd7d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bd7da:	2d19      	cmp	r5, #25
   bd7dc:	bf98      	it	ls
   bd7de:	3220      	addls	r2, #32
   bd7e0:	42a2      	cmp	r2, r4
   bd7e2:	d0f0      	beq.n	bd7c6 <__match+0x6>
   bd7e4:	2000      	movs	r0, #0
   bd7e6:	e7f3      	b.n	bd7d0 <__match+0x10>

000bd7e8 <__hexnan>:
   bd7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd7ec:	680b      	ldr	r3, [r1, #0]
   bd7ee:	115e      	asrs	r6, r3, #5
   bd7f0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bd7f4:	f013 031f 	ands.w	r3, r3, #31
   bd7f8:	b087      	sub	sp, #28
   bd7fa:	bf18      	it	ne
   bd7fc:	3604      	addne	r6, #4
   bd7fe:	2500      	movs	r5, #0
   bd800:	1f37      	subs	r7, r6, #4
   bd802:	4690      	mov	r8, r2
   bd804:	6802      	ldr	r2, [r0, #0]
   bd806:	9301      	str	r3, [sp, #4]
   bd808:	4682      	mov	sl, r0
   bd80a:	f846 5c04 	str.w	r5, [r6, #-4]
   bd80e:	46b9      	mov	r9, r7
   bd810:	463c      	mov	r4, r7
   bd812:	9502      	str	r5, [sp, #8]
   bd814:	46ab      	mov	fp, r5
   bd816:	7851      	ldrb	r1, [r2, #1]
   bd818:	1c53      	adds	r3, r2, #1
   bd81a:	9303      	str	r3, [sp, #12]
   bd81c:	b341      	cbz	r1, bd870 <__hexnan+0x88>
   bd81e:	4608      	mov	r0, r1
   bd820:	9205      	str	r2, [sp, #20]
   bd822:	9104      	str	r1, [sp, #16]
   bd824:	f7ff fd5e 	bl	bd2e4 <__hexdig_fun>
   bd828:	2800      	cmp	r0, #0
   bd82a:	d14f      	bne.n	bd8cc <__hexnan+0xe4>
   bd82c:	9904      	ldr	r1, [sp, #16]
   bd82e:	9a05      	ldr	r2, [sp, #20]
   bd830:	2920      	cmp	r1, #32
   bd832:	d818      	bhi.n	bd866 <__hexnan+0x7e>
   bd834:	9b02      	ldr	r3, [sp, #8]
   bd836:	459b      	cmp	fp, r3
   bd838:	dd13      	ble.n	bd862 <__hexnan+0x7a>
   bd83a:	454c      	cmp	r4, r9
   bd83c:	d206      	bcs.n	bd84c <__hexnan+0x64>
   bd83e:	2d07      	cmp	r5, #7
   bd840:	dc04      	bgt.n	bd84c <__hexnan+0x64>
   bd842:	462a      	mov	r2, r5
   bd844:	4649      	mov	r1, r9
   bd846:	4620      	mov	r0, r4
   bd848:	f7ff ffa8 	bl	bd79c <L_shift>
   bd84c:	4544      	cmp	r4, r8
   bd84e:	d950      	bls.n	bd8f2 <__hexnan+0x10a>
   bd850:	2300      	movs	r3, #0
   bd852:	f1a4 0904 	sub.w	r9, r4, #4
   bd856:	f844 3c04 	str.w	r3, [r4, #-4]
   bd85a:	f8cd b008 	str.w	fp, [sp, #8]
   bd85e:	464c      	mov	r4, r9
   bd860:	461d      	mov	r5, r3
   bd862:	9a03      	ldr	r2, [sp, #12]
   bd864:	e7d7      	b.n	bd816 <__hexnan+0x2e>
   bd866:	2929      	cmp	r1, #41	; 0x29
   bd868:	d156      	bne.n	bd918 <__hexnan+0x130>
   bd86a:	3202      	adds	r2, #2
   bd86c:	f8ca 2000 	str.w	r2, [sl]
   bd870:	f1bb 0f00 	cmp.w	fp, #0
   bd874:	d050      	beq.n	bd918 <__hexnan+0x130>
   bd876:	454c      	cmp	r4, r9
   bd878:	d206      	bcs.n	bd888 <__hexnan+0xa0>
   bd87a:	2d07      	cmp	r5, #7
   bd87c:	dc04      	bgt.n	bd888 <__hexnan+0xa0>
   bd87e:	462a      	mov	r2, r5
   bd880:	4649      	mov	r1, r9
   bd882:	4620      	mov	r0, r4
   bd884:	f7ff ff8a 	bl	bd79c <L_shift>
   bd888:	4544      	cmp	r4, r8
   bd88a:	d934      	bls.n	bd8f6 <__hexnan+0x10e>
   bd88c:	f1a8 0204 	sub.w	r2, r8, #4
   bd890:	4623      	mov	r3, r4
   bd892:	f853 1b04 	ldr.w	r1, [r3], #4
   bd896:	f842 1f04 	str.w	r1, [r2, #4]!
   bd89a:	429f      	cmp	r7, r3
   bd89c:	d2f9      	bcs.n	bd892 <__hexnan+0xaa>
   bd89e:	1b3b      	subs	r3, r7, r4
   bd8a0:	f023 0303 	bic.w	r3, r3, #3
   bd8a4:	3304      	adds	r3, #4
   bd8a6:	3401      	adds	r4, #1
   bd8a8:	3e03      	subs	r6, #3
   bd8aa:	42b4      	cmp	r4, r6
   bd8ac:	bf88      	it	hi
   bd8ae:	2304      	movhi	r3, #4
   bd8b0:	4443      	add	r3, r8
   bd8b2:	2200      	movs	r2, #0
   bd8b4:	f843 2b04 	str.w	r2, [r3], #4
   bd8b8:	429f      	cmp	r7, r3
   bd8ba:	d2fb      	bcs.n	bd8b4 <__hexnan+0xcc>
   bd8bc:	683b      	ldr	r3, [r7, #0]
   bd8be:	b91b      	cbnz	r3, bd8c8 <__hexnan+0xe0>
   bd8c0:	4547      	cmp	r7, r8
   bd8c2:	d127      	bne.n	bd914 <__hexnan+0x12c>
   bd8c4:	2301      	movs	r3, #1
   bd8c6:	603b      	str	r3, [r7, #0]
   bd8c8:	2005      	movs	r0, #5
   bd8ca:	e026      	b.n	bd91a <__hexnan+0x132>
   bd8cc:	3501      	adds	r5, #1
   bd8ce:	2d08      	cmp	r5, #8
   bd8d0:	f10b 0b01 	add.w	fp, fp, #1
   bd8d4:	dd06      	ble.n	bd8e4 <__hexnan+0xfc>
   bd8d6:	4544      	cmp	r4, r8
   bd8d8:	d9c3      	bls.n	bd862 <__hexnan+0x7a>
   bd8da:	2300      	movs	r3, #0
   bd8dc:	f844 3c04 	str.w	r3, [r4, #-4]
   bd8e0:	2501      	movs	r5, #1
   bd8e2:	3c04      	subs	r4, #4
   bd8e4:	6822      	ldr	r2, [r4, #0]
   bd8e6:	f000 000f 	and.w	r0, r0, #15
   bd8ea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bd8ee:	6022      	str	r2, [r4, #0]
   bd8f0:	e7b7      	b.n	bd862 <__hexnan+0x7a>
   bd8f2:	2508      	movs	r5, #8
   bd8f4:	e7b5      	b.n	bd862 <__hexnan+0x7a>
   bd8f6:	9b01      	ldr	r3, [sp, #4]
   bd8f8:	2b00      	cmp	r3, #0
   bd8fa:	d0df      	beq.n	bd8bc <__hexnan+0xd4>
   bd8fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd900:	f1c3 0320 	rsb	r3, r3, #32
   bd904:	fa22 f303 	lsr.w	r3, r2, r3
   bd908:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bd90c:	401a      	ands	r2, r3
   bd90e:	f846 2c04 	str.w	r2, [r6, #-4]
   bd912:	e7d3      	b.n	bd8bc <__hexnan+0xd4>
   bd914:	3f04      	subs	r7, #4
   bd916:	e7d1      	b.n	bd8bc <__hexnan+0xd4>
   bd918:	2004      	movs	r0, #4
   bd91a:	b007      	add	sp, #28
   bd91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd920 <__retarget_lock_acquire_recursive>:
   bd920:	4770      	bx	lr

000bd922 <__retarget_lock_release>:
   bd922:	4770      	bx	lr

000bd924 <__retarget_lock_release_recursive>:
   bd924:	4770      	bx	lr

000bd926 <__ascii_mbtowc>:
   bd926:	b082      	sub	sp, #8
   bd928:	b901      	cbnz	r1, bd92c <__ascii_mbtowc+0x6>
   bd92a:	a901      	add	r1, sp, #4
   bd92c:	b142      	cbz	r2, bd940 <__ascii_mbtowc+0x1a>
   bd92e:	b14b      	cbz	r3, bd944 <__ascii_mbtowc+0x1e>
   bd930:	7813      	ldrb	r3, [r2, #0]
   bd932:	600b      	str	r3, [r1, #0]
   bd934:	7812      	ldrb	r2, [r2, #0]
   bd936:	1e10      	subs	r0, r2, #0
   bd938:	bf18      	it	ne
   bd93a:	2001      	movne	r0, #1
   bd93c:	b002      	add	sp, #8
   bd93e:	4770      	bx	lr
   bd940:	4610      	mov	r0, r2
   bd942:	e7fb      	b.n	bd93c <__ascii_mbtowc+0x16>
   bd944:	f06f 0001 	mvn.w	r0, #1
   bd948:	e7f8      	b.n	bd93c <__ascii_mbtowc+0x16>
	...

000bd94c <_Balloc>:
   bd94c:	b570      	push	{r4, r5, r6, lr}
   bd94e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd950:	4604      	mov	r4, r0
   bd952:	460d      	mov	r5, r1
   bd954:	b976      	cbnz	r6, bd974 <_Balloc+0x28>
   bd956:	2010      	movs	r0, #16
   bd958:	f7fb f8f2 	bl	b8b40 <malloc>
   bd95c:	4602      	mov	r2, r0
   bd95e:	6260      	str	r0, [r4, #36]	; 0x24
   bd960:	b920      	cbnz	r0, bd96c <_Balloc+0x20>
   bd962:	4b18      	ldr	r3, [pc, #96]	; (bd9c4 <_Balloc+0x78>)
   bd964:	4818      	ldr	r0, [pc, #96]	; (bd9c8 <_Balloc+0x7c>)
   bd966:	2166      	movs	r1, #102	; 0x66
   bd968:	f7fb f92a 	bl	b8bc0 <__assert_func>
   bd96c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd970:	6006      	str	r6, [r0, #0]
   bd972:	60c6      	str	r6, [r0, #12]
   bd974:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bd976:	68f3      	ldr	r3, [r6, #12]
   bd978:	b183      	cbz	r3, bd99c <_Balloc+0x50>
   bd97a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd97c:	68db      	ldr	r3, [r3, #12]
   bd97e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bd982:	b9b8      	cbnz	r0, bd9b4 <_Balloc+0x68>
   bd984:	2101      	movs	r1, #1
   bd986:	fa01 f605 	lsl.w	r6, r1, r5
   bd98a:	1d72      	adds	r2, r6, #5
   bd98c:	0092      	lsls	r2, r2, #2
   bd98e:	4620      	mov	r0, r4
   bd990:	f000 fc9d 	bl	be2ce <_calloc_r>
   bd994:	b160      	cbz	r0, bd9b0 <_Balloc+0x64>
   bd996:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bd99a:	e00e      	b.n	bd9ba <_Balloc+0x6e>
   bd99c:	2221      	movs	r2, #33	; 0x21
   bd99e:	2104      	movs	r1, #4
   bd9a0:	4620      	mov	r0, r4
   bd9a2:	f000 fc94 	bl	be2ce <_calloc_r>
   bd9a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd9a8:	60f0      	str	r0, [r6, #12]
   bd9aa:	68db      	ldr	r3, [r3, #12]
   bd9ac:	2b00      	cmp	r3, #0
   bd9ae:	d1e4      	bne.n	bd97a <_Balloc+0x2e>
   bd9b0:	2000      	movs	r0, #0
   bd9b2:	bd70      	pop	{r4, r5, r6, pc}
   bd9b4:	6802      	ldr	r2, [r0, #0]
   bd9b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bd9ba:	2300      	movs	r3, #0
   bd9bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bd9c0:	e7f7      	b.n	bd9b2 <_Balloc+0x66>
   bd9c2:	bf00      	nop
   bd9c4:	000bedd1 	.word	0x000bedd1
   bd9c8:	000bf028 	.word	0x000bf028

000bd9cc <_Bfree>:
   bd9cc:	b570      	push	{r4, r5, r6, lr}
   bd9ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd9d0:	4605      	mov	r5, r0
   bd9d2:	460c      	mov	r4, r1
   bd9d4:	b976      	cbnz	r6, bd9f4 <_Bfree+0x28>
   bd9d6:	2010      	movs	r0, #16
   bd9d8:	f7fb f8b2 	bl	b8b40 <malloc>
   bd9dc:	4602      	mov	r2, r0
   bd9de:	6268      	str	r0, [r5, #36]	; 0x24
   bd9e0:	b920      	cbnz	r0, bd9ec <_Bfree+0x20>
   bd9e2:	4b09      	ldr	r3, [pc, #36]	; (bda08 <_Bfree+0x3c>)
   bd9e4:	4809      	ldr	r0, [pc, #36]	; (bda0c <_Bfree+0x40>)
   bd9e6:	218a      	movs	r1, #138	; 0x8a
   bd9e8:	f7fb f8ea 	bl	b8bc0 <__assert_func>
   bd9ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd9f0:	6006      	str	r6, [r0, #0]
   bd9f2:	60c6      	str	r6, [r0, #12]
   bd9f4:	b13c      	cbz	r4, bda06 <_Bfree+0x3a>
   bd9f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bd9f8:	6862      	ldr	r2, [r4, #4]
   bd9fa:	68db      	ldr	r3, [r3, #12]
   bd9fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bda00:	6021      	str	r1, [r4, #0]
   bda02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bda06:	bd70      	pop	{r4, r5, r6, pc}
   bda08:	000bedd1 	.word	0x000bedd1
   bda0c:	000bf028 	.word	0x000bf028

000bda10 <__multadd>:
   bda10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bda14:	690d      	ldr	r5, [r1, #16]
   bda16:	4607      	mov	r7, r0
   bda18:	460c      	mov	r4, r1
   bda1a:	461e      	mov	r6, r3
   bda1c:	f101 0c14 	add.w	ip, r1, #20
   bda20:	2000      	movs	r0, #0
   bda22:	f8dc 3000 	ldr.w	r3, [ip]
   bda26:	b299      	uxth	r1, r3
   bda28:	fb02 6101 	mla	r1, r2, r1, r6
   bda2c:	0c1e      	lsrs	r6, r3, #16
   bda2e:	0c0b      	lsrs	r3, r1, #16
   bda30:	fb02 3306 	mla	r3, r2, r6, r3
   bda34:	b289      	uxth	r1, r1
   bda36:	3001      	adds	r0, #1
   bda38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bda3c:	4285      	cmp	r5, r0
   bda3e:	f84c 1b04 	str.w	r1, [ip], #4
   bda42:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bda46:	dcec      	bgt.n	bda22 <__multadd+0x12>
   bda48:	b30e      	cbz	r6, bda8e <__multadd+0x7e>
   bda4a:	68a3      	ldr	r3, [r4, #8]
   bda4c:	42ab      	cmp	r3, r5
   bda4e:	dc19      	bgt.n	bda84 <__multadd+0x74>
   bda50:	6861      	ldr	r1, [r4, #4]
   bda52:	4638      	mov	r0, r7
   bda54:	3101      	adds	r1, #1
   bda56:	f7ff ff79 	bl	bd94c <_Balloc>
   bda5a:	4680      	mov	r8, r0
   bda5c:	b928      	cbnz	r0, bda6a <__multadd+0x5a>
   bda5e:	4602      	mov	r2, r0
   bda60:	4b0c      	ldr	r3, [pc, #48]	; (bda94 <__multadd+0x84>)
   bda62:	480d      	ldr	r0, [pc, #52]	; (bda98 <__multadd+0x88>)
   bda64:	21b5      	movs	r1, #181	; 0xb5
   bda66:	f7fb f8ab 	bl	b8bc0 <__assert_func>
   bda6a:	6922      	ldr	r2, [r4, #16]
   bda6c:	3202      	adds	r2, #2
   bda6e:	f104 010c 	add.w	r1, r4, #12
   bda72:	0092      	lsls	r2, r2, #2
   bda74:	300c      	adds	r0, #12
   bda76:	f7fe fbc9 	bl	bc20c <memcpy>
   bda7a:	4621      	mov	r1, r4
   bda7c:	4638      	mov	r0, r7
   bda7e:	f7ff ffa5 	bl	bd9cc <_Bfree>
   bda82:	4644      	mov	r4, r8
   bda84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bda88:	3501      	adds	r5, #1
   bda8a:	615e      	str	r6, [r3, #20]
   bda8c:	6125      	str	r5, [r4, #16]
   bda8e:	4620      	mov	r0, r4
   bda90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bda94:	000befa1 	.word	0x000befa1
   bda98:	000bf028 	.word	0x000bf028

000bda9c <__s2b>:
   bda9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bdaa0:	460c      	mov	r4, r1
   bdaa2:	4615      	mov	r5, r2
   bdaa4:	461f      	mov	r7, r3
   bdaa6:	2209      	movs	r2, #9
   bdaa8:	3308      	adds	r3, #8
   bdaaa:	4606      	mov	r6, r0
   bdaac:	fb93 f3f2 	sdiv	r3, r3, r2
   bdab0:	2100      	movs	r1, #0
   bdab2:	2201      	movs	r2, #1
   bdab4:	429a      	cmp	r2, r3
   bdab6:	db09      	blt.n	bdacc <__s2b+0x30>
   bdab8:	4630      	mov	r0, r6
   bdaba:	f7ff ff47 	bl	bd94c <_Balloc>
   bdabe:	b940      	cbnz	r0, bdad2 <__s2b+0x36>
   bdac0:	4602      	mov	r2, r0
   bdac2:	4b19      	ldr	r3, [pc, #100]	; (bdb28 <__s2b+0x8c>)
   bdac4:	4819      	ldr	r0, [pc, #100]	; (bdb2c <__s2b+0x90>)
   bdac6:	21ce      	movs	r1, #206	; 0xce
   bdac8:	f7fb f87a 	bl	b8bc0 <__assert_func>
   bdacc:	0052      	lsls	r2, r2, #1
   bdace:	3101      	adds	r1, #1
   bdad0:	e7f0      	b.n	bdab4 <__s2b+0x18>
   bdad2:	9b08      	ldr	r3, [sp, #32]
   bdad4:	6143      	str	r3, [r0, #20]
   bdad6:	2d09      	cmp	r5, #9
   bdad8:	f04f 0301 	mov.w	r3, #1
   bdadc:	6103      	str	r3, [r0, #16]
   bdade:	dd16      	ble.n	bdb0e <__s2b+0x72>
   bdae0:	f104 0909 	add.w	r9, r4, #9
   bdae4:	46c8      	mov	r8, r9
   bdae6:	442c      	add	r4, r5
   bdae8:	f818 3b01 	ldrb.w	r3, [r8], #1
   bdaec:	4601      	mov	r1, r0
   bdaee:	3b30      	subs	r3, #48	; 0x30
   bdaf0:	220a      	movs	r2, #10
   bdaf2:	4630      	mov	r0, r6
   bdaf4:	f7ff ff8c 	bl	bda10 <__multadd>
   bdaf8:	45a0      	cmp	r8, r4
   bdafa:	d1f5      	bne.n	bdae8 <__s2b+0x4c>
   bdafc:	f1a5 0408 	sub.w	r4, r5, #8
   bdb00:	444c      	add	r4, r9
   bdb02:	1b2d      	subs	r5, r5, r4
   bdb04:	1963      	adds	r3, r4, r5
   bdb06:	42bb      	cmp	r3, r7
   bdb08:	db04      	blt.n	bdb14 <__s2b+0x78>
   bdb0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bdb0e:	340a      	adds	r4, #10
   bdb10:	2509      	movs	r5, #9
   bdb12:	e7f6      	b.n	bdb02 <__s2b+0x66>
   bdb14:	f814 3b01 	ldrb.w	r3, [r4], #1
   bdb18:	4601      	mov	r1, r0
   bdb1a:	3b30      	subs	r3, #48	; 0x30
   bdb1c:	220a      	movs	r2, #10
   bdb1e:	4630      	mov	r0, r6
   bdb20:	f7ff ff76 	bl	bda10 <__multadd>
   bdb24:	e7ee      	b.n	bdb04 <__s2b+0x68>
   bdb26:	bf00      	nop
   bdb28:	000befa1 	.word	0x000befa1
   bdb2c:	000bf028 	.word	0x000bf028

000bdb30 <__hi0bits>:
   bdb30:	0c03      	lsrs	r3, r0, #16
   bdb32:	041b      	lsls	r3, r3, #16
   bdb34:	b9d3      	cbnz	r3, bdb6c <__hi0bits+0x3c>
   bdb36:	0400      	lsls	r0, r0, #16
   bdb38:	2310      	movs	r3, #16
   bdb3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bdb3e:	bf04      	itt	eq
   bdb40:	0200      	lsleq	r0, r0, #8
   bdb42:	3308      	addeq	r3, #8
   bdb44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bdb48:	bf04      	itt	eq
   bdb4a:	0100      	lsleq	r0, r0, #4
   bdb4c:	3304      	addeq	r3, #4
   bdb4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bdb52:	bf04      	itt	eq
   bdb54:	0080      	lsleq	r0, r0, #2
   bdb56:	3302      	addeq	r3, #2
   bdb58:	2800      	cmp	r0, #0
   bdb5a:	db05      	blt.n	bdb68 <__hi0bits+0x38>
   bdb5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bdb60:	f103 0301 	add.w	r3, r3, #1
   bdb64:	bf08      	it	eq
   bdb66:	2320      	moveq	r3, #32
   bdb68:	4618      	mov	r0, r3
   bdb6a:	4770      	bx	lr
   bdb6c:	2300      	movs	r3, #0
   bdb6e:	e7e4      	b.n	bdb3a <__hi0bits+0xa>

000bdb70 <__lo0bits>:
   bdb70:	6803      	ldr	r3, [r0, #0]
   bdb72:	f013 0207 	ands.w	r2, r3, #7
   bdb76:	4601      	mov	r1, r0
   bdb78:	d00b      	beq.n	bdb92 <__lo0bits+0x22>
   bdb7a:	07da      	lsls	r2, r3, #31
   bdb7c:	d423      	bmi.n	bdbc6 <__lo0bits+0x56>
   bdb7e:	0798      	lsls	r0, r3, #30
   bdb80:	bf49      	itett	mi
   bdb82:	085b      	lsrmi	r3, r3, #1
   bdb84:	089b      	lsrpl	r3, r3, #2
   bdb86:	2001      	movmi	r0, #1
   bdb88:	600b      	strmi	r3, [r1, #0]
   bdb8a:	bf5c      	itt	pl
   bdb8c:	600b      	strpl	r3, [r1, #0]
   bdb8e:	2002      	movpl	r0, #2
   bdb90:	4770      	bx	lr
   bdb92:	b298      	uxth	r0, r3
   bdb94:	b9a8      	cbnz	r0, bdbc2 <__lo0bits+0x52>
   bdb96:	0c1b      	lsrs	r3, r3, #16
   bdb98:	2010      	movs	r0, #16
   bdb9a:	b2da      	uxtb	r2, r3
   bdb9c:	b90a      	cbnz	r2, bdba2 <__lo0bits+0x32>
   bdb9e:	3008      	adds	r0, #8
   bdba0:	0a1b      	lsrs	r3, r3, #8
   bdba2:	071a      	lsls	r2, r3, #28
   bdba4:	bf04      	itt	eq
   bdba6:	091b      	lsreq	r3, r3, #4
   bdba8:	3004      	addeq	r0, #4
   bdbaa:	079a      	lsls	r2, r3, #30
   bdbac:	bf04      	itt	eq
   bdbae:	089b      	lsreq	r3, r3, #2
   bdbb0:	3002      	addeq	r0, #2
   bdbb2:	07da      	lsls	r2, r3, #31
   bdbb4:	d403      	bmi.n	bdbbe <__lo0bits+0x4e>
   bdbb6:	085b      	lsrs	r3, r3, #1
   bdbb8:	f100 0001 	add.w	r0, r0, #1
   bdbbc:	d005      	beq.n	bdbca <__lo0bits+0x5a>
   bdbbe:	600b      	str	r3, [r1, #0]
   bdbc0:	4770      	bx	lr
   bdbc2:	4610      	mov	r0, r2
   bdbc4:	e7e9      	b.n	bdb9a <__lo0bits+0x2a>
   bdbc6:	2000      	movs	r0, #0
   bdbc8:	4770      	bx	lr
   bdbca:	2020      	movs	r0, #32
   bdbcc:	4770      	bx	lr
	...

000bdbd0 <__i2b>:
   bdbd0:	b510      	push	{r4, lr}
   bdbd2:	460c      	mov	r4, r1
   bdbd4:	2101      	movs	r1, #1
   bdbd6:	f7ff feb9 	bl	bd94c <_Balloc>
   bdbda:	4602      	mov	r2, r0
   bdbdc:	b928      	cbnz	r0, bdbea <__i2b+0x1a>
   bdbde:	4b05      	ldr	r3, [pc, #20]	; (bdbf4 <__i2b+0x24>)
   bdbe0:	4805      	ldr	r0, [pc, #20]	; (bdbf8 <__i2b+0x28>)
   bdbe2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bdbe6:	f7fa ffeb 	bl	b8bc0 <__assert_func>
   bdbea:	2301      	movs	r3, #1
   bdbec:	6144      	str	r4, [r0, #20]
   bdbee:	6103      	str	r3, [r0, #16]
   bdbf0:	bd10      	pop	{r4, pc}
   bdbf2:	bf00      	nop
   bdbf4:	000befa1 	.word	0x000befa1
   bdbf8:	000bf028 	.word	0x000bf028

000bdbfc <__multiply>:
   bdbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdc00:	4691      	mov	r9, r2
   bdc02:	690a      	ldr	r2, [r1, #16]
   bdc04:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bdc08:	429a      	cmp	r2, r3
   bdc0a:	bfb8      	it	lt
   bdc0c:	460b      	movlt	r3, r1
   bdc0e:	460c      	mov	r4, r1
   bdc10:	bfbc      	itt	lt
   bdc12:	464c      	movlt	r4, r9
   bdc14:	4699      	movlt	r9, r3
   bdc16:	6927      	ldr	r7, [r4, #16]
   bdc18:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bdc1c:	68a3      	ldr	r3, [r4, #8]
   bdc1e:	6861      	ldr	r1, [r4, #4]
   bdc20:	eb07 060a 	add.w	r6, r7, sl
   bdc24:	42b3      	cmp	r3, r6
   bdc26:	b085      	sub	sp, #20
   bdc28:	bfb8      	it	lt
   bdc2a:	3101      	addlt	r1, #1
   bdc2c:	f7ff fe8e 	bl	bd94c <_Balloc>
   bdc30:	b930      	cbnz	r0, bdc40 <__multiply+0x44>
   bdc32:	4602      	mov	r2, r0
   bdc34:	4b44      	ldr	r3, [pc, #272]	; (bdd48 <__multiply+0x14c>)
   bdc36:	4845      	ldr	r0, [pc, #276]	; (bdd4c <__multiply+0x150>)
   bdc38:	f240 115d 	movw	r1, #349	; 0x15d
   bdc3c:	f7fa ffc0 	bl	b8bc0 <__assert_func>
   bdc40:	f100 0514 	add.w	r5, r0, #20
   bdc44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bdc48:	462b      	mov	r3, r5
   bdc4a:	2200      	movs	r2, #0
   bdc4c:	4543      	cmp	r3, r8
   bdc4e:	d321      	bcc.n	bdc94 <__multiply+0x98>
   bdc50:	f104 0314 	add.w	r3, r4, #20
   bdc54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bdc58:	f109 0314 	add.w	r3, r9, #20
   bdc5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bdc60:	9202      	str	r2, [sp, #8]
   bdc62:	1b3a      	subs	r2, r7, r4
   bdc64:	3a15      	subs	r2, #21
   bdc66:	f022 0203 	bic.w	r2, r2, #3
   bdc6a:	3204      	adds	r2, #4
   bdc6c:	f104 0115 	add.w	r1, r4, #21
   bdc70:	428f      	cmp	r7, r1
   bdc72:	bf38      	it	cc
   bdc74:	2204      	movcc	r2, #4
   bdc76:	9201      	str	r2, [sp, #4]
   bdc78:	9a02      	ldr	r2, [sp, #8]
   bdc7a:	9303      	str	r3, [sp, #12]
   bdc7c:	429a      	cmp	r2, r3
   bdc7e:	d80c      	bhi.n	bdc9a <__multiply+0x9e>
   bdc80:	2e00      	cmp	r6, #0
   bdc82:	dd03      	ble.n	bdc8c <__multiply+0x90>
   bdc84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bdc88:	2b00      	cmp	r3, #0
   bdc8a:	d05a      	beq.n	bdd42 <__multiply+0x146>
   bdc8c:	6106      	str	r6, [r0, #16]
   bdc8e:	b005      	add	sp, #20
   bdc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bdc94:	f843 2b04 	str.w	r2, [r3], #4
   bdc98:	e7d8      	b.n	bdc4c <__multiply+0x50>
   bdc9a:	f8b3 a000 	ldrh.w	sl, [r3]
   bdc9e:	f1ba 0f00 	cmp.w	sl, #0
   bdca2:	d024      	beq.n	bdcee <__multiply+0xf2>
   bdca4:	f104 0e14 	add.w	lr, r4, #20
   bdca8:	46a9      	mov	r9, r5
   bdcaa:	f04f 0c00 	mov.w	ip, #0
   bdcae:	f85e 2b04 	ldr.w	r2, [lr], #4
   bdcb2:	f8d9 1000 	ldr.w	r1, [r9]
   bdcb6:	fa1f fb82 	uxth.w	fp, r2
   bdcba:	b289      	uxth	r1, r1
   bdcbc:	fb0a 110b 	mla	r1, sl, fp, r1
   bdcc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bdcc4:	f8d9 2000 	ldr.w	r2, [r9]
   bdcc8:	4461      	add	r1, ip
   bdcca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bdcce:	fb0a c20b 	mla	r2, sl, fp, ip
   bdcd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bdcd6:	b289      	uxth	r1, r1
   bdcd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bdcdc:	4577      	cmp	r7, lr
   bdcde:	f849 1b04 	str.w	r1, [r9], #4
   bdce2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bdce6:	d8e2      	bhi.n	bdcae <__multiply+0xb2>
   bdce8:	9a01      	ldr	r2, [sp, #4]
   bdcea:	f845 c002 	str.w	ip, [r5, r2]
   bdcee:	9a03      	ldr	r2, [sp, #12]
   bdcf0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bdcf4:	3304      	adds	r3, #4
   bdcf6:	f1b9 0f00 	cmp.w	r9, #0
   bdcfa:	d020      	beq.n	bdd3e <__multiply+0x142>
   bdcfc:	6829      	ldr	r1, [r5, #0]
   bdcfe:	f104 0c14 	add.w	ip, r4, #20
   bdd02:	46ae      	mov	lr, r5
   bdd04:	f04f 0a00 	mov.w	sl, #0
   bdd08:	f8bc b000 	ldrh.w	fp, [ip]
   bdd0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bdd10:	fb09 220b 	mla	r2, r9, fp, r2
   bdd14:	4492      	add	sl, r2
   bdd16:	b289      	uxth	r1, r1
   bdd18:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bdd1c:	f84e 1b04 	str.w	r1, [lr], #4
   bdd20:	f85c 2b04 	ldr.w	r2, [ip], #4
   bdd24:	f8be 1000 	ldrh.w	r1, [lr]
   bdd28:	0c12      	lsrs	r2, r2, #16
   bdd2a:	fb09 1102 	mla	r1, r9, r2, r1
   bdd2e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bdd32:	4567      	cmp	r7, ip
   bdd34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bdd38:	d8e6      	bhi.n	bdd08 <__multiply+0x10c>
   bdd3a:	9a01      	ldr	r2, [sp, #4]
   bdd3c:	50a9      	str	r1, [r5, r2]
   bdd3e:	3504      	adds	r5, #4
   bdd40:	e79a      	b.n	bdc78 <__multiply+0x7c>
   bdd42:	3e01      	subs	r6, #1
   bdd44:	e79c      	b.n	bdc80 <__multiply+0x84>
   bdd46:	bf00      	nop
   bdd48:	000befa1 	.word	0x000befa1
   bdd4c:	000bf028 	.word	0x000bf028

000bdd50 <__pow5mult>:
   bdd50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bdd54:	4615      	mov	r5, r2
   bdd56:	f012 0203 	ands.w	r2, r2, #3
   bdd5a:	4606      	mov	r6, r0
   bdd5c:	460f      	mov	r7, r1
   bdd5e:	d007      	beq.n	bdd70 <__pow5mult+0x20>
   bdd60:	4c25      	ldr	r4, [pc, #148]	; (bddf8 <__pow5mult+0xa8>)
   bdd62:	3a01      	subs	r2, #1
   bdd64:	2300      	movs	r3, #0
   bdd66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bdd6a:	f7ff fe51 	bl	bda10 <__multadd>
   bdd6e:	4607      	mov	r7, r0
   bdd70:	10ad      	asrs	r5, r5, #2
   bdd72:	d03d      	beq.n	bddf0 <__pow5mult+0xa0>
   bdd74:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bdd76:	b97c      	cbnz	r4, bdd98 <__pow5mult+0x48>
   bdd78:	2010      	movs	r0, #16
   bdd7a:	f7fa fee1 	bl	b8b40 <malloc>
   bdd7e:	4602      	mov	r2, r0
   bdd80:	6270      	str	r0, [r6, #36]	; 0x24
   bdd82:	b928      	cbnz	r0, bdd90 <__pow5mult+0x40>
   bdd84:	4b1d      	ldr	r3, [pc, #116]	; (bddfc <__pow5mult+0xac>)
   bdd86:	481e      	ldr	r0, [pc, #120]	; (bde00 <__pow5mult+0xb0>)
   bdd88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bdd8c:	f7fa ff18 	bl	b8bc0 <__assert_func>
   bdd90:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bdd94:	6004      	str	r4, [r0, #0]
   bdd96:	60c4      	str	r4, [r0, #12]
   bdd98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bdd9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bdda0:	b94c      	cbnz	r4, bddb6 <__pow5mult+0x66>
   bdda2:	f240 2171 	movw	r1, #625	; 0x271
   bdda6:	4630      	mov	r0, r6
   bdda8:	f7ff ff12 	bl	bdbd0 <__i2b>
   bddac:	2300      	movs	r3, #0
   bddae:	f8c8 0008 	str.w	r0, [r8, #8]
   bddb2:	4604      	mov	r4, r0
   bddb4:	6003      	str	r3, [r0, #0]
   bddb6:	f04f 0900 	mov.w	r9, #0
   bddba:	07eb      	lsls	r3, r5, #31
   bddbc:	d50a      	bpl.n	bddd4 <__pow5mult+0x84>
   bddbe:	4639      	mov	r1, r7
   bddc0:	4622      	mov	r2, r4
   bddc2:	4630      	mov	r0, r6
   bddc4:	f7ff ff1a 	bl	bdbfc <__multiply>
   bddc8:	4639      	mov	r1, r7
   bddca:	4680      	mov	r8, r0
   bddcc:	4630      	mov	r0, r6
   bddce:	f7ff fdfd 	bl	bd9cc <_Bfree>
   bddd2:	4647      	mov	r7, r8
   bddd4:	106d      	asrs	r5, r5, #1
   bddd6:	d00b      	beq.n	bddf0 <__pow5mult+0xa0>
   bddd8:	6820      	ldr	r0, [r4, #0]
   bddda:	b938      	cbnz	r0, bddec <__pow5mult+0x9c>
   bdddc:	4622      	mov	r2, r4
   bddde:	4621      	mov	r1, r4
   bdde0:	4630      	mov	r0, r6
   bdde2:	f7ff ff0b 	bl	bdbfc <__multiply>
   bdde6:	6020      	str	r0, [r4, #0]
   bdde8:	f8c0 9000 	str.w	r9, [r0]
   bddec:	4604      	mov	r4, r0
   bddee:	e7e4      	b.n	bddba <__pow5mult+0x6a>
   bddf0:	4638      	mov	r0, r7
   bddf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bddf6:	bf00      	nop
   bddf8:	000bf178 	.word	0x000bf178
   bddfc:	000bedd1 	.word	0x000bedd1
   bde00:	000bf028 	.word	0x000bf028

000bde04 <__lshift>:
   bde04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bde08:	460c      	mov	r4, r1
   bde0a:	6849      	ldr	r1, [r1, #4]
   bde0c:	6923      	ldr	r3, [r4, #16]
   bde0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bde12:	68a3      	ldr	r3, [r4, #8]
   bde14:	4607      	mov	r7, r0
   bde16:	4691      	mov	r9, r2
   bde18:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bde1c:	f108 0601 	add.w	r6, r8, #1
   bde20:	42b3      	cmp	r3, r6
   bde22:	db0b      	blt.n	bde3c <__lshift+0x38>
   bde24:	4638      	mov	r0, r7
   bde26:	f7ff fd91 	bl	bd94c <_Balloc>
   bde2a:	4605      	mov	r5, r0
   bde2c:	b948      	cbnz	r0, bde42 <__lshift+0x3e>
   bde2e:	4602      	mov	r2, r0
   bde30:	4b2a      	ldr	r3, [pc, #168]	; (bdedc <__lshift+0xd8>)
   bde32:	482b      	ldr	r0, [pc, #172]	; (bdee0 <__lshift+0xdc>)
   bde34:	f240 11d9 	movw	r1, #473	; 0x1d9
   bde38:	f7fa fec2 	bl	b8bc0 <__assert_func>
   bde3c:	3101      	adds	r1, #1
   bde3e:	005b      	lsls	r3, r3, #1
   bde40:	e7ee      	b.n	bde20 <__lshift+0x1c>
   bde42:	2300      	movs	r3, #0
   bde44:	f100 0114 	add.w	r1, r0, #20
   bde48:	f100 0210 	add.w	r2, r0, #16
   bde4c:	4618      	mov	r0, r3
   bde4e:	4553      	cmp	r3, sl
   bde50:	db37      	blt.n	bdec2 <__lshift+0xbe>
   bde52:	6920      	ldr	r0, [r4, #16]
   bde54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bde58:	f104 0314 	add.w	r3, r4, #20
   bde5c:	f019 091f 	ands.w	r9, r9, #31
   bde60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bde64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bde68:	d02f      	beq.n	bdeca <__lshift+0xc6>
   bde6a:	f1c9 0e20 	rsb	lr, r9, #32
   bde6e:	468a      	mov	sl, r1
   bde70:	f04f 0c00 	mov.w	ip, #0
   bde74:	681a      	ldr	r2, [r3, #0]
   bde76:	fa02 f209 	lsl.w	r2, r2, r9
   bde7a:	ea42 020c 	orr.w	r2, r2, ip
   bde7e:	f84a 2b04 	str.w	r2, [sl], #4
   bde82:	f853 2b04 	ldr.w	r2, [r3], #4
   bde86:	4298      	cmp	r0, r3
   bde88:	fa22 fc0e 	lsr.w	ip, r2, lr
   bde8c:	d8f2      	bhi.n	bde74 <__lshift+0x70>
   bde8e:	1b03      	subs	r3, r0, r4
   bde90:	3b15      	subs	r3, #21
   bde92:	f023 0303 	bic.w	r3, r3, #3
   bde96:	3304      	adds	r3, #4
   bde98:	f104 0215 	add.w	r2, r4, #21
   bde9c:	4290      	cmp	r0, r2
   bde9e:	bf38      	it	cc
   bdea0:	2304      	movcc	r3, #4
   bdea2:	f841 c003 	str.w	ip, [r1, r3]
   bdea6:	f1bc 0f00 	cmp.w	ip, #0
   bdeaa:	d001      	beq.n	bdeb0 <__lshift+0xac>
   bdeac:	f108 0602 	add.w	r6, r8, #2
   bdeb0:	3e01      	subs	r6, #1
   bdeb2:	4638      	mov	r0, r7
   bdeb4:	612e      	str	r6, [r5, #16]
   bdeb6:	4621      	mov	r1, r4
   bdeb8:	f7ff fd88 	bl	bd9cc <_Bfree>
   bdebc:	4628      	mov	r0, r5
   bdebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bdec2:	f842 0f04 	str.w	r0, [r2, #4]!
   bdec6:	3301      	adds	r3, #1
   bdec8:	e7c1      	b.n	bde4e <__lshift+0x4a>
   bdeca:	3904      	subs	r1, #4
   bdecc:	f853 2b04 	ldr.w	r2, [r3], #4
   bded0:	f841 2f04 	str.w	r2, [r1, #4]!
   bded4:	4298      	cmp	r0, r3
   bded6:	d8f9      	bhi.n	bdecc <__lshift+0xc8>
   bded8:	e7ea      	b.n	bdeb0 <__lshift+0xac>
   bdeda:	bf00      	nop
   bdedc:	000befa1 	.word	0x000befa1
   bdee0:	000bf028 	.word	0x000bf028

000bdee4 <__mcmp>:
   bdee4:	b530      	push	{r4, r5, lr}
   bdee6:	6902      	ldr	r2, [r0, #16]
   bdee8:	690c      	ldr	r4, [r1, #16]
   bdeea:	1b12      	subs	r2, r2, r4
   bdeec:	d10e      	bne.n	bdf0c <__mcmp+0x28>
   bdeee:	f100 0314 	add.w	r3, r0, #20
   bdef2:	3114      	adds	r1, #20
   bdef4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bdef8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bdefc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bdf00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bdf04:	42a5      	cmp	r5, r4
   bdf06:	d003      	beq.n	bdf10 <__mcmp+0x2c>
   bdf08:	d305      	bcc.n	bdf16 <__mcmp+0x32>
   bdf0a:	2201      	movs	r2, #1
   bdf0c:	4610      	mov	r0, r2
   bdf0e:	bd30      	pop	{r4, r5, pc}
   bdf10:	4283      	cmp	r3, r0
   bdf12:	d3f3      	bcc.n	bdefc <__mcmp+0x18>
   bdf14:	e7fa      	b.n	bdf0c <__mcmp+0x28>
   bdf16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bdf1a:	e7f7      	b.n	bdf0c <__mcmp+0x28>

000bdf1c <__mdiff>:
   bdf1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdf20:	460c      	mov	r4, r1
   bdf22:	4606      	mov	r6, r0
   bdf24:	4611      	mov	r1, r2
   bdf26:	4620      	mov	r0, r4
   bdf28:	4690      	mov	r8, r2
   bdf2a:	f7ff ffdb 	bl	bdee4 <__mcmp>
   bdf2e:	1e05      	subs	r5, r0, #0
   bdf30:	d110      	bne.n	bdf54 <__mdiff+0x38>
   bdf32:	4629      	mov	r1, r5
   bdf34:	4630      	mov	r0, r6
   bdf36:	f7ff fd09 	bl	bd94c <_Balloc>
   bdf3a:	b930      	cbnz	r0, bdf4a <__mdiff+0x2e>
   bdf3c:	4b3a      	ldr	r3, [pc, #232]	; (be028 <__mdiff+0x10c>)
   bdf3e:	4602      	mov	r2, r0
   bdf40:	f240 2132 	movw	r1, #562	; 0x232
   bdf44:	4839      	ldr	r0, [pc, #228]	; (be02c <__mdiff+0x110>)
   bdf46:	f7fa fe3b 	bl	b8bc0 <__assert_func>
   bdf4a:	2301      	movs	r3, #1
   bdf4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bdf50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bdf54:	bfa4      	itt	ge
   bdf56:	4643      	movge	r3, r8
   bdf58:	46a0      	movge	r8, r4
   bdf5a:	4630      	mov	r0, r6
   bdf5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bdf60:	bfa6      	itte	ge
   bdf62:	461c      	movge	r4, r3
   bdf64:	2500      	movge	r5, #0
   bdf66:	2501      	movlt	r5, #1
   bdf68:	f7ff fcf0 	bl	bd94c <_Balloc>
   bdf6c:	b920      	cbnz	r0, bdf78 <__mdiff+0x5c>
   bdf6e:	4b2e      	ldr	r3, [pc, #184]	; (be028 <__mdiff+0x10c>)
   bdf70:	4602      	mov	r2, r0
   bdf72:	f44f 7110 	mov.w	r1, #576	; 0x240
   bdf76:	e7e5      	b.n	bdf44 <__mdiff+0x28>
   bdf78:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bdf7c:	6926      	ldr	r6, [r4, #16]
   bdf7e:	60c5      	str	r5, [r0, #12]
   bdf80:	f104 0914 	add.w	r9, r4, #20
   bdf84:	f108 0514 	add.w	r5, r8, #20
   bdf88:	f100 0e14 	add.w	lr, r0, #20
   bdf8c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bdf90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bdf94:	f108 0210 	add.w	r2, r8, #16
   bdf98:	46f2      	mov	sl, lr
   bdf9a:	2100      	movs	r1, #0
   bdf9c:	f859 3b04 	ldr.w	r3, [r9], #4
   bdfa0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bdfa4:	fa1f f883 	uxth.w	r8, r3
   bdfa8:	fa11 f18b 	uxtah	r1, r1, fp
   bdfac:	0c1b      	lsrs	r3, r3, #16
   bdfae:	eba1 0808 	sub.w	r8, r1, r8
   bdfb2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bdfb6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bdfba:	fa1f f888 	uxth.w	r8, r8
   bdfbe:	1419      	asrs	r1, r3, #16
   bdfc0:	454e      	cmp	r6, r9
   bdfc2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bdfc6:	f84a 3b04 	str.w	r3, [sl], #4
   bdfca:	d8e7      	bhi.n	bdf9c <__mdiff+0x80>
   bdfcc:	1b33      	subs	r3, r6, r4
   bdfce:	3b15      	subs	r3, #21
   bdfd0:	f023 0303 	bic.w	r3, r3, #3
   bdfd4:	3304      	adds	r3, #4
   bdfd6:	3415      	adds	r4, #21
   bdfd8:	42a6      	cmp	r6, r4
   bdfda:	bf38      	it	cc
   bdfdc:	2304      	movcc	r3, #4
   bdfde:	441d      	add	r5, r3
   bdfe0:	4473      	add	r3, lr
   bdfe2:	469e      	mov	lr, r3
   bdfe4:	462e      	mov	r6, r5
   bdfe6:	4566      	cmp	r6, ip
   bdfe8:	d30e      	bcc.n	be008 <__mdiff+0xec>
   bdfea:	f10c 0203 	add.w	r2, ip, #3
   bdfee:	1b52      	subs	r2, r2, r5
   bdff0:	f022 0203 	bic.w	r2, r2, #3
   bdff4:	3d03      	subs	r5, #3
   bdff6:	45ac      	cmp	ip, r5
   bdff8:	bf38      	it	cc
   bdffa:	2200      	movcc	r2, #0
   bdffc:	441a      	add	r2, r3
   bdffe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   be002:	b17b      	cbz	r3, be024 <__mdiff+0x108>
   be004:	6107      	str	r7, [r0, #16]
   be006:	e7a3      	b.n	bdf50 <__mdiff+0x34>
   be008:	f856 8b04 	ldr.w	r8, [r6], #4
   be00c:	fa11 f288 	uxtah	r2, r1, r8
   be010:	1414      	asrs	r4, r2, #16
   be012:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   be016:	b292      	uxth	r2, r2
   be018:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   be01c:	f84e 2b04 	str.w	r2, [lr], #4
   be020:	1421      	asrs	r1, r4, #16
   be022:	e7e0      	b.n	bdfe6 <__mdiff+0xca>
   be024:	3f01      	subs	r7, #1
   be026:	e7ea      	b.n	bdffe <__mdiff+0xe2>
   be028:	000befa1 	.word	0x000befa1
   be02c:	000bf028 	.word	0x000bf028

000be030 <__ulp>:
   be030:	b082      	sub	sp, #8
   be032:	ed8d 0b00 	vstr	d0, [sp]
   be036:	9b01      	ldr	r3, [sp, #4]
   be038:	4912      	ldr	r1, [pc, #72]	; (be084 <__ulp+0x54>)
   be03a:	4019      	ands	r1, r3
   be03c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   be040:	2900      	cmp	r1, #0
   be042:	dd05      	ble.n	be050 <__ulp+0x20>
   be044:	2200      	movs	r2, #0
   be046:	460b      	mov	r3, r1
   be048:	ec43 2b10 	vmov	d0, r2, r3
   be04c:	b002      	add	sp, #8
   be04e:	4770      	bx	lr
   be050:	4249      	negs	r1, r1
   be052:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   be056:	ea4f 5021 	mov.w	r0, r1, asr #20
   be05a:	f04f 0200 	mov.w	r2, #0
   be05e:	f04f 0300 	mov.w	r3, #0
   be062:	da04      	bge.n	be06e <__ulp+0x3e>
   be064:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   be068:	fa41 f300 	asr.w	r3, r1, r0
   be06c:	e7ec      	b.n	be048 <__ulp+0x18>
   be06e:	f1a0 0114 	sub.w	r1, r0, #20
   be072:	291e      	cmp	r1, #30
   be074:	bfda      	itte	le
   be076:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   be07a:	fa20 f101 	lsrle.w	r1, r0, r1
   be07e:	2101      	movgt	r1, #1
   be080:	460a      	mov	r2, r1
   be082:	e7e1      	b.n	be048 <__ulp+0x18>
   be084:	7ff00000 	.word	0x7ff00000

000be088 <__b2d>:
   be088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be08a:	6905      	ldr	r5, [r0, #16]
   be08c:	f100 0714 	add.w	r7, r0, #20
   be090:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   be094:	1f2e      	subs	r6, r5, #4
   be096:	f855 4c04 	ldr.w	r4, [r5, #-4]
   be09a:	4620      	mov	r0, r4
   be09c:	f7ff fd48 	bl	bdb30 <__hi0bits>
   be0a0:	f1c0 0320 	rsb	r3, r0, #32
   be0a4:	280a      	cmp	r0, #10
   be0a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; be124 <__b2d+0x9c>
   be0aa:	600b      	str	r3, [r1, #0]
   be0ac:	dc14      	bgt.n	be0d8 <__b2d+0x50>
   be0ae:	f1c0 0e0b 	rsb	lr, r0, #11
   be0b2:	fa24 f10e 	lsr.w	r1, r4, lr
   be0b6:	42b7      	cmp	r7, r6
   be0b8:	ea41 030c 	orr.w	r3, r1, ip
   be0bc:	bf34      	ite	cc
   be0be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   be0c2:	2100      	movcs	r1, #0
   be0c4:	3015      	adds	r0, #21
   be0c6:	fa04 f000 	lsl.w	r0, r4, r0
   be0ca:	fa21 f10e 	lsr.w	r1, r1, lr
   be0ce:	ea40 0201 	orr.w	r2, r0, r1
   be0d2:	ec43 2b10 	vmov	d0, r2, r3
   be0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   be0d8:	42b7      	cmp	r7, r6
   be0da:	bf3a      	itte	cc
   be0dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   be0e0:	f1a5 0608 	subcc.w	r6, r5, #8
   be0e4:	2100      	movcs	r1, #0
   be0e6:	380b      	subs	r0, #11
   be0e8:	d017      	beq.n	be11a <__b2d+0x92>
   be0ea:	f1c0 0c20 	rsb	ip, r0, #32
   be0ee:	fa04 f500 	lsl.w	r5, r4, r0
   be0f2:	42be      	cmp	r6, r7
   be0f4:	fa21 f40c 	lsr.w	r4, r1, ip
   be0f8:	ea45 0504 	orr.w	r5, r5, r4
   be0fc:	bf8c      	ite	hi
   be0fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   be102:	2400      	movls	r4, #0
   be104:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   be108:	fa01 f000 	lsl.w	r0, r1, r0
   be10c:	fa24 f40c 	lsr.w	r4, r4, ip
   be110:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   be114:	ea40 0204 	orr.w	r2, r0, r4
   be118:	e7db      	b.n	be0d2 <__b2d+0x4a>
   be11a:	ea44 030c 	orr.w	r3, r4, ip
   be11e:	460a      	mov	r2, r1
   be120:	e7d7      	b.n	be0d2 <__b2d+0x4a>
   be122:	bf00      	nop
   be124:	3ff00000 	.word	0x3ff00000

000be128 <__d2b>:
   be128:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   be12c:	4689      	mov	r9, r1
   be12e:	2101      	movs	r1, #1
   be130:	ec57 6b10 	vmov	r6, r7, d0
   be134:	4690      	mov	r8, r2
   be136:	f7ff fc09 	bl	bd94c <_Balloc>
   be13a:	4604      	mov	r4, r0
   be13c:	b930      	cbnz	r0, be14c <__d2b+0x24>
   be13e:	4602      	mov	r2, r0
   be140:	4b25      	ldr	r3, [pc, #148]	; (be1d8 <__d2b+0xb0>)
   be142:	4826      	ldr	r0, [pc, #152]	; (be1dc <__d2b+0xb4>)
   be144:	f240 310a 	movw	r1, #778	; 0x30a
   be148:	f7fa fd3a 	bl	b8bc0 <__assert_func>
   be14c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   be150:	f3c7 0313 	ubfx	r3, r7, #0, #20
   be154:	bb35      	cbnz	r5, be1a4 <__d2b+0x7c>
   be156:	2e00      	cmp	r6, #0
   be158:	9301      	str	r3, [sp, #4]
   be15a:	d028      	beq.n	be1ae <__d2b+0x86>
   be15c:	4668      	mov	r0, sp
   be15e:	9600      	str	r6, [sp, #0]
   be160:	f7ff fd06 	bl	bdb70 <__lo0bits>
   be164:	9900      	ldr	r1, [sp, #0]
   be166:	b300      	cbz	r0, be1aa <__d2b+0x82>
   be168:	9a01      	ldr	r2, [sp, #4]
   be16a:	f1c0 0320 	rsb	r3, r0, #32
   be16e:	fa02 f303 	lsl.w	r3, r2, r3
   be172:	430b      	orrs	r3, r1
   be174:	40c2      	lsrs	r2, r0
   be176:	6163      	str	r3, [r4, #20]
   be178:	9201      	str	r2, [sp, #4]
   be17a:	9b01      	ldr	r3, [sp, #4]
   be17c:	61a3      	str	r3, [r4, #24]
   be17e:	2b00      	cmp	r3, #0
   be180:	bf14      	ite	ne
   be182:	2202      	movne	r2, #2
   be184:	2201      	moveq	r2, #1
   be186:	6122      	str	r2, [r4, #16]
   be188:	b1d5      	cbz	r5, be1c0 <__d2b+0x98>
   be18a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   be18e:	4405      	add	r5, r0
   be190:	f8c9 5000 	str.w	r5, [r9]
   be194:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   be198:	f8c8 0000 	str.w	r0, [r8]
   be19c:	4620      	mov	r0, r4
   be19e:	b003      	add	sp, #12
   be1a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   be1a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   be1a8:	e7d5      	b.n	be156 <__d2b+0x2e>
   be1aa:	6161      	str	r1, [r4, #20]
   be1ac:	e7e5      	b.n	be17a <__d2b+0x52>
   be1ae:	a801      	add	r0, sp, #4
   be1b0:	f7ff fcde 	bl	bdb70 <__lo0bits>
   be1b4:	9b01      	ldr	r3, [sp, #4]
   be1b6:	6163      	str	r3, [r4, #20]
   be1b8:	2201      	movs	r2, #1
   be1ba:	6122      	str	r2, [r4, #16]
   be1bc:	3020      	adds	r0, #32
   be1be:	e7e3      	b.n	be188 <__d2b+0x60>
   be1c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   be1c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   be1c8:	f8c9 0000 	str.w	r0, [r9]
   be1cc:	6918      	ldr	r0, [r3, #16]
   be1ce:	f7ff fcaf 	bl	bdb30 <__hi0bits>
   be1d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   be1d6:	e7df      	b.n	be198 <__d2b+0x70>
   be1d8:	000befa1 	.word	0x000befa1
   be1dc:	000bf028 	.word	0x000bf028

000be1e0 <__ratio>:
   be1e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be1e4:	4688      	mov	r8, r1
   be1e6:	4669      	mov	r1, sp
   be1e8:	4681      	mov	r9, r0
   be1ea:	f7ff ff4d 	bl	be088 <__b2d>
   be1ee:	a901      	add	r1, sp, #4
   be1f0:	4640      	mov	r0, r8
   be1f2:	ec55 4b10 	vmov	r4, r5, d0
   be1f6:	f7ff ff47 	bl	be088 <__b2d>
   be1fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
   be1fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
   be202:	eba3 0c02 	sub.w	ip, r3, r2
   be206:	e9dd 3200 	ldrd	r3, r2, [sp]
   be20a:	1a9b      	subs	r3, r3, r2
   be20c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   be210:	ec51 0b10 	vmov	r0, r1, d0
   be214:	2b00      	cmp	r3, #0
   be216:	bfd6      	itet	le
   be218:	460a      	movle	r2, r1
   be21a:	462a      	movgt	r2, r5
   be21c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   be220:	468b      	mov	fp, r1
   be222:	462f      	mov	r7, r5
   be224:	bfd4      	ite	le
   be226:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   be22a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   be22e:	4620      	mov	r0, r4
   be230:	ee10 2a10 	vmov	r2, s0
   be234:	465b      	mov	r3, fp
   be236:	4639      	mov	r1, r7
   be238:	f7fd fdba 	bl	bbdb0 <__aeabi_ddiv>
   be23c:	ec41 0b10 	vmov	d0, r0, r1
   be240:	b003      	add	sp, #12
   be242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000be246 <__copybits>:
   be246:	3901      	subs	r1, #1
   be248:	b570      	push	{r4, r5, r6, lr}
   be24a:	1149      	asrs	r1, r1, #5
   be24c:	6914      	ldr	r4, [r2, #16]
   be24e:	3101      	adds	r1, #1
   be250:	f102 0314 	add.w	r3, r2, #20
   be254:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   be258:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   be25c:	1f05      	subs	r5, r0, #4
   be25e:	42a3      	cmp	r3, r4
   be260:	d30c      	bcc.n	be27c <__copybits+0x36>
   be262:	1aa3      	subs	r3, r4, r2
   be264:	3b11      	subs	r3, #17
   be266:	f023 0303 	bic.w	r3, r3, #3
   be26a:	3211      	adds	r2, #17
   be26c:	42a2      	cmp	r2, r4
   be26e:	bf88      	it	hi
   be270:	2300      	movhi	r3, #0
   be272:	4418      	add	r0, r3
   be274:	2300      	movs	r3, #0
   be276:	4288      	cmp	r0, r1
   be278:	d305      	bcc.n	be286 <__copybits+0x40>
   be27a:	bd70      	pop	{r4, r5, r6, pc}
   be27c:	f853 6b04 	ldr.w	r6, [r3], #4
   be280:	f845 6f04 	str.w	r6, [r5, #4]!
   be284:	e7eb      	b.n	be25e <__copybits+0x18>
   be286:	f840 3b04 	str.w	r3, [r0], #4
   be28a:	e7f4      	b.n	be276 <__copybits+0x30>

000be28c <__any_on>:
   be28c:	f100 0214 	add.w	r2, r0, #20
   be290:	6900      	ldr	r0, [r0, #16]
   be292:	114b      	asrs	r3, r1, #5
   be294:	4298      	cmp	r0, r3
   be296:	b510      	push	{r4, lr}
   be298:	db11      	blt.n	be2be <__any_on+0x32>
   be29a:	dd0a      	ble.n	be2b2 <__any_on+0x26>
   be29c:	f011 011f 	ands.w	r1, r1, #31
   be2a0:	d007      	beq.n	be2b2 <__any_on+0x26>
   be2a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   be2a6:	fa24 f001 	lsr.w	r0, r4, r1
   be2aa:	fa00 f101 	lsl.w	r1, r0, r1
   be2ae:	428c      	cmp	r4, r1
   be2b0:	d10b      	bne.n	be2ca <__any_on+0x3e>
   be2b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   be2b6:	4293      	cmp	r3, r2
   be2b8:	d803      	bhi.n	be2c2 <__any_on+0x36>
   be2ba:	2000      	movs	r0, #0
   be2bc:	bd10      	pop	{r4, pc}
   be2be:	4603      	mov	r3, r0
   be2c0:	e7f7      	b.n	be2b2 <__any_on+0x26>
   be2c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   be2c6:	2900      	cmp	r1, #0
   be2c8:	d0f5      	beq.n	be2b6 <__any_on+0x2a>
   be2ca:	2001      	movs	r0, #1
   be2cc:	e7f6      	b.n	be2bc <__any_on+0x30>

000be2ce <_calloc_r>:
   be2ce:	b513      	push	{r0, r1, r4, lr}
   be2d0:	434a      	muls	r2, r1
   be2d2:	4611      	mov	r1, r2
   be2d4:	9201      	str	r2, [sp, #4]
   be2d6:	f7fa fc63 	bl	b8ba0 <_malloc_r>
   be2da:	4604      	mov	r4, r0
   be2dc:	b118      	cbz	r0, be2e6 <_calloc_r+0x18>
   be2de:	9a01      	ldr	r2, [sp, #4]
   be2e0:	2100      	movs	r1, #0
   be2e2:	f7fd ffbb 	bl	bc25c <memset>
   be2e6:	4620      	mov	r0, r4
   be2e8:	b002      	add	sp, #8
   be2ea:	bd10      	pop	{r4, pc}
   be2ec:	0000      	movs	r0, r0
	...

000be2f0 <nan>:
   be2f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; be2f8 <nan+0x8>
   be2f4:	4770      	bx	lr
   be2f6:	bf00      	nop
   be2f8:	00000000 	.word	0x00000000
   be2fc:	7ff80000 	.word	0x7ff80000

000be300 <nanf>:
   be300:	ed9f 0a01 	vldr	s0, [pc, #4]	; be308 <nanf+0x8>
   be304:	4770      	bx	lr
   be306:	bf00      	nop
   be308:	7fc00000 	.word	0x7fc00000

000be30c <__ascii_wctomb>:
   be30c:	b149      	cbz	r1, be322 <__ascii_wctomb+0x16>
   be30e:	2aff      	cmp	r2, #255	; 0xff
   be310:	bf85      	ittet	hi
   be312:	238a      	movhi	r3, #138	; 0x8a
   be314:	6003      	strhi	r3, [r0, #0]
   be316:	700a      	strbls	r2, [r1, #0]
   be318:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   be31c:	bf98      	it	ls
   be31e:	2001      	movls	r0, #1
   be320:	4770      	bx	lr
   be322:	4608      	mov	r0, r1
   be324:	4770      	bx	lr
	...

000be328 <__aeabi_d2lz>:
   be328:	b538      	push	{r3, r4, r5, lr}
   be32a:	2200      	movs	r2, #0
   be32c:	2300      	movs	r3, #0
   be32e:	4604      	mov	r4, r0
   be330:	460d      	mov	r5, r1
   be332:	f7fd fe85 	bl	bc040 <__aeabi_dcmplt>
   be336:	b928      	cbnz	r0, be344 <__aeabi_d2lz+0x1c>
   be338:	4620      	mov	r0, r4
   be33a:	4629      	mov	r1, r5
   be33c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   be340:	f7fd bf2c 	b.w	bc19c <__aeabi_d2ulz>
   be344:	4620      	mov	r0, r4
   be346:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   be34a:	f7fd ff27 	bl	bc19c <__aeabi_d2ulz>
   be34e:	4240      	negs	r0, r0
   be350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be354:	bd38      	pop	{r3, r4, r5, pc}
   be356:	bf00      	nop

000be358 <dynalib_user>:
   be358:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   be368:	0000 0000 6162 6973 5f63 7473 6972 676e     ....basic_string
   be378:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   be388:	6c75 206c 6f6e 2074 6176 696c 0064 6c73     ull not valid.sl
   be398:	7661 4365 756f 746e 203a 6925 0a00 6572     aveCount: %i..re
   be3a8:	7571 7365 2074 6f63 6564 3120 202c 6461     quest code 1, ad
   be3b8:	7264 7365 3a73 0020 7274 6e61 6d73 7369     dress: .transmis
   be3c8:	6973 6e6f 7220 6365 6569 6576 2064 7266     sion recieved fr
   be3d8:	6d6f 203a 6400 7665 6369 2065 6469 203a     om: .device id: 
   be3e8:	7400 6172 736e 696d 7373 6f69 206e 6573     .transmission se
   be3f8:	746e 7420 3a6f 0020 6572 7571 7365 2074     nt to: .request 
   be408:	6f63 6564 3220 202c 6461 7264 7365 3a73     code 2, address:
   be418:	0020 6f63 666e 696c 7463 7620 7265 6669      .conflict verif
   be428:	6369 7461 6f69 3a6e 0020 6170 7373 0a00     ication: .pass..
   be438:	6f43 6e6e 6365 6574 2064 6f74 203a 6300     Connected to: .c
   be448:	6e61 6f6e 2074 7263 6165 6574 7320 6474     annot create std
   be458:	3a3a 6576 7463 726f 6c20 7261 6567 2072     ::vector larger 
   be468:	6874 6e61 6d20 7861 735f 7a69 2865 0029     than max_size().
   be478:	6b6f 7700 6669 3a69 2c00 5300 4953 3a44     ok.wifi:.,.SSID:
   be488:	2520 2c73 7020 7361 7773 726f 3a64 2520      %s, password: %
   be498:	0073 6963 7974 003a 6e69 6f63 7272 6365     s.city:.incorrec
   be4a8:	2074 6963 7974 6e20 6d61 0065 6c73 7661     t city name.slav
   be4b8:	2065 6461 7264 7365 6573 2073 6f73 7472     e addresses sort
   be4c8:	6465 6300 7469 3a79 2520 0073 6f63 6f6c     ed.city: %s.colo
   be4d8:	3a72 6300 7469 2079 6f6e 2074 6573 0074     r:.city not set.
   be4e8:	7267 6565 316e 6700 6572 6e65 6700 6572     green1.green.gre
   be4f8:	6e65 0032 6172 6c69 6177 2079 6e69 6564     en2.railway inde
   be508:	3a78 2520 0069 6e69 6f63 7272 6365 2074     x: %i.incorrect 
   be518:	6172 6c69 6177 2079 6f63 6f6c 0072 6461     railway color.ad
   be528:	7264 7365 3a73 2520 0069 4c42 2045 6966     dress: %i.BLE fi
   be538:	696e 6873 6465 7200 7365 7465 7400 7275     nished.reset.tur
   be548:	696e 676e 6f20 6666 203a 6925 7200 7365     ning off: %i.res
   be558:	7465 6420 6e6f 0065 6572 0064 4646 3030     et done.red.FF00
   be568:	3030 3000 3041 3030 0030 6c62 6575 3000     00.0A0000.blue.0
   be578:	3030 4630 0046 3030 3030 4130 6200 6f72     000FF.00000A.bro
   be588:	6e77 4600 4646 3046 0030 4130 4130 3030     wn.FFFF00.0A0A00
   be598:	3000 4630 3046 0030 3030 4130 3030 6f00     .00FF00.000A00.o
   be5a8:	6172 676e 0065 4646 3038 3030 3000 3041     range.FF8000.0A0
   be5b8:	3035 0030 7570 7072 656c 3200 3030 4630     500.purple.2000F
   be5c8:	0046 3230 3030 4130 7000 6e69 006b 4646     F.02000A.pink.FF
   be5d8:	3038 3038 3000 3041 3035 0035 3761 6233     8080.0A0505.a73b
   be5e8:	3161 3130 382d 3931 2d32 6134 3135 622d     a101-8192-4a51-b
   be5f8:	3234 2d64 6561 6339 3164 6234 3431 3561     42d-ae9cd14b14a5
   be608:	3600 3445 3030 3030 2d32 3542 3341 462d     .6E400002-B5A3-F
   be618:	3933 2d33 3045 3941 452d 3035 3245 4434     393-E0A9-E50E24D
   be628:	4343 3941 0045 4536 3034 3030 3330 422d     CCA9E.6E400003-B
   be638:	4135 2d33 3346 3339 452d 4130 2d39 3545     5A3-F393-E0A9-E5
   be648:	4530 3432 4344 4143 4539 7400 0078 7872     0E24DCCA9E.tx.rx
   be658:	7400 6572 2e6b 6874 7765 6c63 632e 6d6f     .trek.thewcl.com
   be668:	6300 6174 6d00 7462 0061 6f6c 706f 7320     .cta.mbta.loop s
   be678:	6174 7472 2500 2c69 0020 6c2f 6f6f 2d70     tart.%i, ./loop-
   be688:	7274 6361 736b 002f 6c3f 6e69 7365 003d     tracks/.?lines=.
   be698:	4547 0054 6170 7372 6e69 0067 6170 7372     GET.parsing.pars
   be6a8:	6e69 2067 6166 6c69 6465 6c00 6e69 7365     ing failed.lines
   be6b8:	7400 6172 6e69 0073 656e 7478 735f 6f74     .trains.next_sto
   be6c8:	0070 6564 7473 6e69 7461 6f69 006e 6964     p.destination.di
   be6d8:	6572 7463 6f69 006e 616c 6974 7574 6564     rection.latitude
   be6e8:	6c00 6e6f 6967 7574 6564 6200 6572 6b61     .longitude.break
   be6f8:	2500 2073 6172 6c69 7020 7261 2074 6925     .%s rail part %i
   be708:	203a 0000                                   : ..

000be70c <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   be714:	40b9 000b 40cd 000b 6341 6563 7470 2f00     .@...@..Accept./
   be724:	2f2a 0000 0019 0000 0003 0000 0007 0000     */..............
   be734:	0005 0000 000c 0000 0008 0000 0005 0000     ................
   be744:	0005 0000 0005 0000 0019 0000 0005 0000     ................
   be754:	000f 0000 000a 0000 000a 0000 000a 0000     ................
   be764:	000a 0000 0014 0000 0000 0000 0028 0000     ............(...
   be774:	0000 0000 0002 0000 0006 0000 0000 0000     ................
   be784:	0000 0000 000f 0000 000a 0000 000a 0000     ................
   be794:	000f 0000 000f 0000 000f 0000 0014 0000     ................
   be7a4:	0000 0000 0001 0000 0003 0000 0000 0000     ................
   be7b4:	0000 0000 000c 0000 0007 0000 0001 0000     ................
   be7c4:	000a 0000 000a 0000 000a 0000 000a 0000     ................
   be7d4:	000c 0000 0000 0000 0028 0000 0008 0000     ........(.......
   be7e4:	0003 0000 0007 0000 0001 0000 0003 0000     ................
   be7f4:	0007 0000 0007 0000 0006 0000 000a 0000     ................
   be804:	000a 0000 000a 0000 000a 0000 000e 0000     ................
   be814:	0000 0000 0028 0000 0006 0000 0003 0000     ....(...........
   be824:	0007 0000 0002 0000 0003 0000 0005 0000     ................
   be834:	000a 0000 0005 0000 000a 0000 000a 0000     ................
   be844:	000a 0000 0014 0000 000a 0000 000a 0000     ................
   be854:	000a 0000 0005 0000 000a 0000 000a 0000     ................
   be864:	000a 0000 000a 0000 000a 0000 000a 0000     ................
   be874:	000a 0000 000a 0000 000a 0000 000a 0000     ................
   be884:	4820 5454 2f50 2e31 0d30 000a 6c63 736f      HTTP/1.0...clos
   be894:	0065 6f43 6e6e 6365 6974 6e6f 4800 534f     e.Connection.HOS
   be8a4:	0054 6f43 746e 6e65 2d74 654c 676e 6874     T.Content-Length
   be8b4:	5000 534f 0054 0a0d 0a0d 2500 3430 0078     .POST......%04x.

000be8c4 <_ZTV10JsonBuffer>:
	...
   be8cc:	7d0d 000b 7d29 000b                         .}..)}..

000be8d4 <_ZTV10JsonParser>:
	...
   be8dc:	7d3d 000b 7d61 000b                         =}..a}..

000be8e4 <_ZTV13JsonReference>:
	...
   be8ec:	7cfd 000b 7cff 000b 7341 6573 7472 6f69     .|...|..Assertio
   be8fc:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   be90c:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   be91c:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   be92c:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   be93c:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   be94c:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   be95c:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   be96c:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   be97c:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   be98c:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   be99c:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   be9ac:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   be9bc:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   be9cc:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   be9dc:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   be9ec:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   be9fc:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   bea0c:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   bea1c:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   bea2c:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   bea3c:	6369 002e                                   ic..

000bea40 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bea48:	8bed 000b 8c51 000b 8d37 000b 8c7b 000b     ....Q...7...{...
   bea58:	8bf1 000b                                   ....

000bea5c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bea64:	8be9 000b 8c5f 000b 8beb 000b 8c81 000b     ...._...........
   bea74:	8c11 000b                                   ....

000bea78 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bea80:	8be7 000b 8c6d 000b 94f1 000b 8c87 000b     ....m...........
   bea90:	8c31 000b                                   1...

000bea94 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   beaa0:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000beab2 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   beab2:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000beac2 <_ZN8particle7BleUuid9BASE_UUIDE>:
   beac2:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000bead4 <_ZTVN5spark13EthernetClassE>:
	...
   beadc:	9f9f 000b 9f95 000b 9f8b 000b 9f81 000b     ................
   beaec:	9f75 000b 9f69 000b a225 000b a22d 000b     u...i...%...-...
   beafc:	9f5d 000b 9f55 000b 9f4b 000b 9f41 000b     ]...U...K...A...
   beb0c:	a25d 000b                                   ]...

000beb10 <_ZTV7TwoWire>:
	...
   beb18:	9fbd 000b a007 000b 9fdf 000b 9fbf 000b     ................
   beb28:	9fe7 000b 9fef 000b 9ff7 000b 9fff 000b     ................

000beb38 <_ZTV9IPAddress>:
	...
   beb40:	a0c9 000b a0b9 000b a0bb 000b 7061 0070     ............app.

000beb50 <_ZTVN5spark12NetworkClassE>:
	...
   beb58:	a1e5 000b a1ef 000b a1f9 000b a203 000b     ................
   beb68:	a20d 000b a219 000b a225 000b a22d 000b     ........%...-...
   beb78:	a235 000b a241 000b a249 000b a253 000b     5...A...I...S...
   beb88:	a25d 000b 6977 6972 676e 7200 6365 2076     ]...wiring.recv 
   beb98:	7265 6f72 2072 203d 6425 0000               error = %d..

000beba4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bebac:	a805 000b a829 000b ad5b 000b a837 000b     ....)...[...7...
   bebbc:	a809 000b                                   ....

000bebc0 <_ZTV9TCPClient>:
	...
   bebc8:	a8b5 000b a8e9 000b a781 000b a79b 000b     ................
   bebd8:	abf1 000b a7c5 000b aa67 000b a7f9 000b     ........g.......
   bebe8:	aaf9 000b a939 000b aa95 000b aca5 000b     ....9...........
   bebf8:	aa35 000b a7fb 000b a7ad 000b a83d 000b     5...........=...
   bec08:	a919 000b 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
   bec18:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bec28 <_ZTV11USARTSerial>:
	...
   bec30:	ad75 000b ade1 000b adb9 000b a349 000b     u...........I...
   bec40:	ad89 000b ada5 000b ad97 000b adb3 000b     ................
   bec50:	ad77 000b ad7b 000b                         w...{...

000bec58 <_ZTV9USBSerial>:
	...
   bec60:	ae1f 000b ae87 000b ae5d 000b a349 000b     ........]...I...
   bec70:	ae4f 000b ae21 000b ae31 000b ae81 000b     O...!...1.......
   bec80:	ae41 000b ae19 000b                         A.......

000bec88 <_ZTVN5spark9WiFiClassE>:
	...
   bec90:	af7f 000b af75 000b af6b 000b af21 000b     ....u...k...!...
   beca0:	af5f 000b af53 000b a225 000b a22d 000b     _...S...%...-...
   becb0:	af47 000b af3f 000b af35 000b af2b 000b     G...?...5...+...
   becc0:	a25d 000b                                   ]...

000becc4 <_ZSt7nothrow>:
	...

000becc5 <_ZTSSt19_Sp_make_shared_tag>:
   becc5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   becd5:	6572 5f64 6174 0067 0000                     red_tag....

000bece0 <_ZTISt19_Sp_make_shared_tag>:
   bece0:	ed38 000b ecc5 000b 6162 6973 5f63 7473     8.......basic_st
   becf0:	6972 676e 3a3a 4d5f 635f 6572 7461 0065     ring::_M_create.

000bed00 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bed00:	ed98 000b ed0c 000b edbc 000b               ............

000bed0c <_ZTSN10__cxxabiv117__class_type_infoE>:
   bed0c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bed1c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bed2c:	0045 0000                                   E...

000bed30 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bed30:	0000 0000 ed00 000b b375 000b b389 000b     ........u.......
   bed40:	b51d 000b b51d 000b b3f3 000b b335 000b     ............5...
   bed50:	b3db 000b b39d 000b b367 000b               ........g...

000bed5c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bed5c:	ed98 000b ed68 000b ed00 000b               ....h.......

000bed68 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bed68:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bed78:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bed88:	666e 456f 0000 0000                         nfoE....

000bed90 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bed90:	0000 0000 ed5c 000b b41d 000b b431 000b     ....\.......1...
   beda0:	b51d 000b b51d 000b b3f3 000b b335 000b     ............5...
   bedb0:	b4f1 000b b47d 000b b445 000b               ....}...E...

000bedbc <_ZTISt9type_info>:
   bedbc:	ed38 000b edc4 000b                         8.......

000bedc4 <_ZTSSt9type_info>:
   bedc4:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bedd4:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bede4:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   bedf4:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bee04:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bee14:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bee24:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bee34:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   bee44:	6e69 7469 0079 6e61 0000 0000               inity.an....

000bee50 <fpi.1>:
   bee50:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bee60:	0000 0000                                   ....

000bee64 <fpinan.0>:
   bee64:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   bee74:	0000 0000                                   ....

000bee78 <tinytens>:
   bee78:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bee88:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bee98:	6f43 64ac 0628 1168                         Co.d(.h.

000beea0 <_ctype_>:
   beea0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   beeb0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   beec0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   beed0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   beee0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   beef0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bef00:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bef10:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bef20:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   befa0:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   befb0:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   befc0:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   befd0:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   befe0:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   beff0:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bf000:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bf010:	632e 0000                                   .c..

000bf014 <_C_numeric_locale>:
   bf014:	ea3e 000b e8be 000b 5130 2003 0043 4f50     >.......0Q. C.PO
   bf024:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   bf034:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bf044:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bf054:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bf064:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bf074:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   bf084:	0000 0000                                   ....

000bf088 <__mprec_bigtens>:
   bf088:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bf098:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bf0a8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bf0b0 <__mprec_tens>:
   bf0b0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bf0c0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bf0d0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bf0e0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bf0f0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bf100:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bf110:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bf120:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bf130:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bf140:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bf150:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bf160:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bf170:	9db4 79d9 7843 44ea                         ...yCx.D

000bf178 <p05.0>:
   bf178:	0005 0000 0019 0000 007d 0000               ........}...

000bf184 <link_const_variable_data_end>:
   bf184:	000b6fe5 	.word	0x000b6fe5
   bf188:	000b9f31 	.word	0x000b9f31
   bf18c:	000b9fa9 	.word	0x000b9fa9
   bf190:	000ba1d5 	.word	0x000ba1d5
   bf194:	000ba335 	.word	0x000ba335
   bf198:	000ba471 	.word	0x000ba471
   bf19c:	000ba75d 	.word	0x000ba75d
   bf1a0:	000bad61 	.word	0x000bad61
   bf1a4:	000baf89 	.word	0x000baf89

000bf1a8 <link_constructors_end>:
	...
