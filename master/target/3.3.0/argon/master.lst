
/Users/sainihome/Documents/GitHub/loop-tracks/master/target/3.3.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009950  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd970  000bd970  0000d970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bd994  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f0  2003209c  000bd998  0001209c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000c564  2003228c  2003228c  0002228c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bdb88  000bdb88  0001db88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bdbb0  000bdbb0  0001dbb0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00139734  00000000  00000000  0001dbb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00012c19  00000000  00000000  001572e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00046b58  00000000  00000000  00169f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003280  00000000  00000000  001b0a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000c960  00000000  00000000  001b3cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000366ff  00000000  00000000  001c0639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00043b28  00000000  00000000  001f6d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014ec2e  00000000  00000000  0023a860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000ac20  00000000  00000000  00389490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f006 fd44 	bl	baabe <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f006 fd66 	bl	bab0e <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003209c 	.word	0x2003209c
   b404c:	000bd998 	.word	0x000bd998
   b4050:	2003228c 	.word	0x2003228c
   b4054:	2003228c 	.word	0x2003228c
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f005 fbf3 	bl	b984c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bd93c 	.word	0x000bd93c
   b4080:	000bd964 	.word	0x000bd964

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 bc6a 	b.w	b595c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 fd45 	bl	b5b18 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f005 bb93 	b.w	b97bc <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 b92d 	b.w	b72f4 <malloc>

000b409a <_Znaj>:
   b409a:	f003 b92b 	b.w	b72f4 <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f003 b931 	b.w	b7304 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f003 b92f 	b.w	b7304 <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_ZN16JsonParserStaticILj15000ELj1500EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40b8:	b510      	push	{r4, lr}
   b40ba:	4b03      	ldr	r3, [pc, #12]	; (b40c8 <_ZN16JsonParserStaticILj15000ELj1500EED1Ev+0x10>)
   b40bc:	6003      	str	r3, [r0, #0]
   b40be:	4604      	mov	r4, r0
   b40c0:	f002 fa66 	bl	b6590 <_ZN10JsonParserD1Ev>
   b40c4:	4620      	mov	r0, r4
   b40c6:	bd10      	pop	{r4, pc}
   b40c8:	000bcf40 	.word	0x000bcf40

000b40cc <_ZN16JsonParserStaticILj15000ELj1500EED0Ev>:
   b40cc:	b510      	push	{r4, lr}
   b40ce:	4604      	mov	r4, r0
   b40d0:	f7ff fff2 	bl	b40b8 <_ZN16JsonParserStaticILj15000ELj1500EED1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f649 0184 	movw	r1, #39044	; 0x9884
   b40da:	f7ff ffe2 	bl	b40a2 <_ZdlPvj>
   b40de:	4620      	mov	r0, r4
   b40e0:	bd10      	pop	{r4, pc}

000b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b40e2:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40e4:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b40e6:	4606      	mov	r6, r0
   b40e8:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b40ea:	da0b      	bge.n	b4104 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b40ec:	2a0a      	cmp	r2, #10
   b40ee:	d109      	bne.n	b4104 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b40f0:	212d      	movs	r1, #45	; 0x2d
   b40f2:	f004 fd2f 	bl	b8b54 <_ZN5Print5printEc>
            val = -n;
   b40f6:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40f8:	b2ea      	uxtb	r2, r5
   b40fa:	4630      	mov	r0, r6
    }
}
   b40fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b4100:	f004 bd41 	b.w	b8b86 <_ZN5Print11printNumberEmh>
            val = n;
   b4104:	4621      	mov	r1, r4
   b4106:	e7f7      	b.n	b40f8 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>:

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4108:	f100 0308 	add.w	r3, r0, #8
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b410c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b410e:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b4110:	6003      	str	r3, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b4112:	460d      	mov	r5, r1
   b4114:	b1d9      	cbz	r1, b414e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x46>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b4116:	4608      	mov	r0, r1
   b4118:	f006 fd42 	bl	baba0 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b411c:	280f      	cmp	r0, #15
   b411e:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4122:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4124:	d907      	bls.n	b4136 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b4126:	2200      	movs	r2, #0
   b4128:	a901      	add	r1, sp, #4
   b412a:	4620      	mov	r0, r4
   b412c:	f005 fcee 	bl	b9b0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4130:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4132:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4134:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4136:	4632      	mov	r2, r6
   b4138:	4629      	mov	r1, r5
   b413a:	6820      	ldr	r0, [r4, #0]
   b413c:	f005 fd21 	bl	b9b82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b4140:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b4142:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4144:	6063      	str	r3, [r4, #4]
   b4146:	2100      	movs	r1, #0
   b4148:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b414a:	b002      	add	sp, #8
   b414c:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b414e:	4801      	ldr	r0, [pc, #4]	; (b4154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x4c>)
   b4150:	f005 fc19 	bl	b9986 <_ZSt19__throw_logic_errorPKc>
   b4154:	000bcb78 	.word	0x000bcb78

000b4158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   b4158:	b508      	push	{r3, lr}
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b415a:	4603      	mov	r3, r0
   b415c:	b150      	cbz	r0, b4174 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x1c>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
	if (__n > this->_M_max_size())
   b415e:	4a06      	ldr	r2, [pc, #24]	; (b4178 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x20>)
   b4160:	4290      	cmp	r0, r2
   b4162:	d901      	bls.n	b4168 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4164:	f005 fc0c 	bl	b9980 <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4168:	2018      	movs	r0, #24
   b416a:	4358      	muls	r0, r3
      }
   b416c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4170:	f7ff bf91 	b.w	b4096 <_Znwj>
   b4174:	bd08      	pop	{r3, pc}
   b4176:	bf00      	nop
   b4178:	05555555 	.word	0x05555555

000b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b417c:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b417e:	b148      	cbz	r0, b4194 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b4180:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b4184:	d301      	bcc.n	b418a <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b4186:	f005 fbfb 	bl	b9980 <_ZSt17__throw_bad_allocv>
      }
   b418a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b418e:	0080      	lsls	r0, r0, #2
   b4190:	f7ff bf81 	b.w	b4096 <_Znwj>
   b4194:	bd08      	pop	{r3, pc}

000b4196 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4196:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4198:	b148      	cbz	r0, b41ae <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b419a:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   b419e:	d301      	bcc.n	b41a4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41a0:	f005 fbee 	bl	b9980 <_ZSt17__throw_bad_allocv>
      }
   b41a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41a8:	00c0      	lsls	r0, r0, #3
   b41aa:	f7ff bf74 	b.w	b4096 <_Znwj>
   b41ae:	bd08      	pop	{r3, pc}

000b41b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
   b41b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b41b2:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b41b6:	6003      	str	r3, [r0, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b41b8:	e9d1 5300 	ldrd	r5, r3, [r1]
      basic_string(const basic_string& __str)
   b41bc:	4604      	mov	r4, r0
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b41be:	18ee      	adds	r6, r5, r3
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   b41c0:	b91d      	cbnz	r5, b41ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
   b41c2:	b116      	cbz	r6, b41ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
	  std::__throw_logic_error(__N("basic_string::"
   b41c4:	480c      	ldr	r0, [pc, #48]	; (b41f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x48>)
   b41c6:	f005 fbde 	bl	b9986 <_ZSt19__throw_logic_errorPKc>
	if (__dnew > size_type(_S_local_capacity))
   b41ca:	2b0f      	cmp	r3, #15
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b41cc:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b41ce:	d907      	bls.n	b41e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x30>
	    _M_data(_M_create(__dnew, size_type(0)));
   b41d0:	2200      	movs	r2, #0
   b41d2:	a901      	add	r1, sp, #4
   b41d4:	4620      	mov	r0, r4
   b41d6:	f005 fc99 	bl	b9b0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b41da:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b41dc:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b41de:	60a3      	str	r3, [r4, #8]
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b41e0:	4632      	mov	r2, r6
   b41e2:	4629      	mov	r1, r5
   b41e4:	6820      	ldr	r0, [r4, #0]
   b41e6:	f005 fcc7 	bl	b9b78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
   b41ea:	9b01      	ldr	r3, [sp, #4]
   b41ec:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b41ee:	6063      	str	r3, [r4, #4]
   b41f0:	2100      	movs	r1, #0
   b41f2:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b41f4:	b002      	add	sp, #8
   b41f6:	bd70      	pop	{r4, r5, r6, pc}
   b41f8:	000bcb78 	.word	0x000bcb78

000b41fc <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b41fc:	6803      	ldr	r3, [r0, #0]
   b41fe:	b2c9      	uxtb	r1, r1
   b4200:	689b      	ldr	r3, [r3, #8]
   b4202:	4718      	bx	r3

000b4204 <_ZN5Print5writeEPKc.isra.0>:
    size_t write(const char *str) {
   b4204:	b513      	push	{r0, r1, r4, lr}
   b4206:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b4208:	b161      	cbz	r1, b4224 <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b420a:	4608      	mov	r0, r1
   b420c:	9101      	str	r1, [sp, #4]
   b420e:	f006 fcc7 	bl	baba0 <strlen>
   b4212:	6823      	ldr	r3, [r4, #0]
   b4214:	9901      	ldr	r1, [sp, #4]
   b4216:	68db      	ldr	r3, [r3, #12]
   b4218:	4602      	mov	r2, r0
   b421a:	4620      	mov	r0, r4
    }
   b421c:	b002      	add	sp, #8
   b421e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4222:	4718      	bx	r3
    }
   b4224:	b002      	add	sp, #8
   b4226:	bd10      	pop	{r4, pc}

000b4228 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   b4228:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b422a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b422c:	4604      	mov	r4, r0
   b422e:	460d      	mov	r5, r1
      if (&__x != this)
   b4230:	d025      	beq.n	b427e <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x56>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4232:	e9d1 7100 	ldrd	r7, r1, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   b4236:	6800      	ldr	r0, [r0, #0]
   b4238:	68a3      	ldr	r3, [r4, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b423a:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b423c:	1a1b      	subs	r3, r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   b423e:	429e      	cmp	r6, r3
   b4240:	d91e      	bls.n	b4280 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   b4242:	10f0      	asrs	r0, r6, #3
   b4244:	f7ff ffa7 	bl	b4196 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
   b4248:	2300      	movs	r3, #0
   b424a:	4605      	mov	r5, r0
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   b424c:	429e      	cmp	r6, r3
   b424e:	d00a      	beq.n	b4266 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x3e>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4250:	18ea      	adds	r2, r5, r3
   b4252:	bf1c      	itt	ne
   b4254:	18f9      	addne	r1, r7, r3
   b4256:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b425a:	f103 0308 	add.w	r3, r3, #8
   b425e:	bf18      	it	ne
   b4260:	e9c2 0100 	strdne	r0, r1, [r2]
   b4264:	e7f2      	b.n	b424c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x24>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4266:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4268:	b118      	cbz	r0, b4272 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x4a>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
   b426a:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b426c:	1a09      	subs	r1, r1, r0
   b426e:	f7ff ff18 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4272:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4274:	4435      	add	r5, r6
   b4276:	60a5      	str	r5, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4278:	6823      	ldr	r3, [r4, #0]
   b427a:	4433      	add	r3, r6
   b427c:	6063      	str	r3, [r4, #4]
	}
      return *this;
    }
   b427e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4280:	6862      	ldr	r2, [r4, #4]
   b4282:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   b4284:	4296      	cmp	r6, r2
   b4286:	d806      	bhi.n	b4296 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x6e>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b4288:	42b9      	cmp	r1, r7
   b428a:	d0f5      	beq.n	b4278 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b428c:	4632      	mov	r2, r6
   b428e:	4639      	mov	r1, r7
   b4290:	f006 fc23 	bl	baada <memmove>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4294:	e7f0      	b.n	b4278 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	  if (_Num)
   b4296:	b112      	cbz	r2, b429e <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x76>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4298:	4639      	mov	r1, r7
   b429a:	f006 fc1e 	bl	baada <memmove>
   b429e:	e9d4 2700 	ldrd	r2, r7, [r4]
   b42a2:	1abb      	subs	r3, r7, r2
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b42a4:	682a      	ldr	r2, [r5, #0]
   b42a6:	686d      	ldr	r5, [r5, #4]
   b42a8:	441a      	add	r2, r3
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b42aa:	1aad      	subs	r5, r5, r2
					  __x._M_impl._M_finish,
   b42ac:	2300      	movs	r3, #0
	      for (; __first != __last; ++__first, (void)++__cur)
   b42ae:	429d      	cmp	r5, r3
   b42b0:	d0e2      	beq.n	b4278 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
   b42b2:	eb17 0c03 	adds.w	ip, r7, r3
   b42b6:	bf1c      	itt	ne
   b42b8:	18d1      	addne	r1, r2, r3
   b42ba:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b42be:	f103 0308 	add.w	r3, r3, #8
   b42c2:	bf18      	it	ne
   b42c4:	e9cc 0100 	strdne	r0, r1, [ip]
   b42c8:	e7f1      	b.n	b42ae <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x86>
	...

000b42cc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>:
      if (&__x != this)
   b42cc:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b42ce:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b42d2:	4604      	mov	r4, r0
   b42d4:	468a      	mov	sl, r1
      if (&__x != this)
   b42d6:	d036      	beq.n	b4346 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7a>
   b42d8:	e9d1 5b00 	ldrd	r5, fp, [r1]
			 - this->_M_impl._M_start); }
   b42dc:	f8d0 9000 	ldr.w	r9, [r0]
   b42e0:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b42e2:	4a39      	ldr	r2, [pc, #228]	; (b43c8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xfc>)
   b42e4:	ebab 0705 	sub.w	r7, fp, r5
			 - this->_M_impl._M_start); }
   b42e8:	eba3 0309 	sub.w	r3, r3, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b42ec:	ea4f 08e7 	mov.w	r8, r7, asr #3
	  if (__xlen > capacity())
   b42f0:	42bb      	cmp	r3, r7
   b42f2:	fb02 f808 	mul.w	r8, r2, r8
   b42f6:	d228      	bcs.n	b434a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7e>
	  pointer __result = this->_M_allocate(__n);
   b42f8:	4640      	mov	r0, r8
   b42fa:	f7ff ff2d 	bl	b4158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
   b42fe:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b4300:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b4302:	45ab      	cmp	fp, r5
   b4304:	d00a      	beq.n	b431c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x50>
   b4306:	f1b8 0f00 	cmp.w	r8, #0
   b430a:	d003      	beq.n	b4314 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x48>
   b430c:	4629      	mov	r1, r5
   b430e:	4640      	mov	r0, r8
   b4310:	f7ff ff4e 	bl	b41b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4314:	f108 0818 	add.w	r8, r8, #24
   b4318:	3518      	adds	r5, #24
   b431a:	e7f2      	b.n	b4302 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x36>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b431c:	e9d4 5800 	ldrd	r5, r8, [r4]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b4320:	45a8      	cmp	r8, r5
   b4322:	d004      	beq.n	b432e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x62>
      { _M_dispose(); }
   b4324:	4628      	mov	r0, r5
   b4326:	f005 fc13 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b432a:	3518      	adds	r5, #24
   b432c:	e7f8      	b.n	b4320 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x54>
	      _M_deallocate(this->_M_impl._M_start,
   b432e:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4330:	b118      	cbz	r0, b433a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x6e>
			    - this->_M_impl._M_start);
   b4332:	68a1      	ldr	r1, [r4, #8]
   b4334:	1a09      	subs	r1, r1, r0
   b4336:	f7ff feb4 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b433a:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b433c:	443e      	add	r6, r7
   b433e:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4340:	6823      	ldr	r3, [r4, #0]
   b4342:	443b      	add	r3, r7
   b4344:	6063      	str	r3, [r4, #4]
    }
   b4346:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b434a:	6846      	ldr	r6, [r0, #4]
   b434c:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b4350:	42b7      	cmp	r7, r6
   b4352:	d819      	bhi.n	b4388 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xbc>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4354:	4646      	mov	r6, r8
   b4356:	46ca      	mov	sl, r9
   b4358:	2e00      	cmp	r6, #0
   b435a:	dd08      	ble.n	b436e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xa2>
		  }
	      }
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
	  }
#endif
	this->_M_assign(__str);
   b435c:	4629      	mov	r1, r5
   b435e:	4650      	mov	r0, sl
   b4360:	f005 fc14 	bl	b9b8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b4364:	3518      	adds	r5, #24
	      ++__result;
   b4366:	f10a 0a18 	add.w	sl, sl, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b436a:	3e01      	subs	r6, #1
   b436c:	e7f4      	b.n	b4358 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x8c>
   b436e:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   b4372:	2518      	movs	r5, #24
      : _M_current(__i) { }
   b4374:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4376:	fb05 9508 	mla	r5, r5, r8, r9
	  for (; __first != __last; ++__first)
   b437a:	42ae      	cmp	r6, r5
   b437c:	d0e0      	beq.n	b4340 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
      { _M_dispose(); }
   b437e:	4628      	mov	r0, r5
   b4380:	f005 fbe6 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b4384:	3518      	adds	r5, #24
      {
	++_M_current;
	return *this;
   b4386:	e7f8      	b.n	b437a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xae>
   b4388:	10f6      	asrs	r6, r6, #3
   b438a:	4356      	muls	r6, r2
   b438c:	2e00      	cmp	r6, #0
   b438e:	dd08      	ble.n	b43a2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xd6>
	this->_M_assign(__str);
   b4390:	4629      	mov	r1, r5
   b4392:	4648      	mov	r0, r9
   b4394:	f005 fbfa 	bl	b9b8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b4398:	3518      	adds	r5, #24
	      ++__result;
   b439a:	f109 0918 	add.w	r9, r9, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b439e:	3e01      	subs	r6, #1
   b43a0:	e7f4      	b.n	b438c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xc0>
   b43a2:	e9d4 5600 	ldrd	r5, r6, [r4]
   b43a6:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43a8:	f8da 5000 	ldr.w	r5, [sl]
					  __x._M_impl._M_finish,
   b43ac:	f8da 8004 	ldr.w	r8, [sl, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43b0:	440d      	add	r5, r1
   b43b2:	45a8      	cmp	r8, r5
   b43b4:	d0c4      	beq.n	b4340 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b43b6:	b11e      	cbz	r6, b43c0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xf4>
   b43b8:	4629      	mov	r1, r5
   b43ba:	4630      	mov	r0, r6
   b43bc:	f7ff fef8 	bl	b41b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b43c0:	3518      	adds	r5, #24
   b43c2:	3618      	adds	r6, #24
   b43c4:	e7f5      	b.n	b43b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xe6>
   b43c6:	bf00      	nop
   b43c8:	aaaaaaab 	.word	0xaaaaaaab

000b43cc <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43cc:	b40e      	push	{r1, r2, r3}
   b43ce:	b503      	push	{r0, r1, lr}
   b43d0:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b43d2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43d4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b43d8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b43da:	f004 fbf2 	bl	b8bc2 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b43de:	b002      	add	sp, #8
   b43e0:	f85d eb04 	ldr.w	lr, [sp], #4
   b43e4:	b003      	add	sp, #12
   b43e6:	4770      	bx	lr

000b43e8 <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43e8:	b40e      	push	{r1, r2, r3}
   b43ea:	b503      	push	{r0, r1, lr}
   b43ec:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   b43ee:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43f0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b43f4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b43f6:	f004 fbe4 	bl	b8bc2 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b43fa:	b002      	add	sp, #8
   b43fc:	f85d eb04 	ldr.w	lr, [sp], #4
   b4400:	b003      	add	sp, #12
   b4402:	4770      	bx	lr

000b4404 <_Z16randomizeAddressv>:
  Serial.println();
  delay(1000);
}

//clears up conflicts with multiple i2c slaves having the same address
void randomizeAddress(){
   b4404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while(slaveCount != slaveCountExpected){
   b4408:	4d9e      	ldr	r5, [pc, #632]	; (b4684 <_Z16randomizeAddressv+0x280>)

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b440a:	f8df 829c 	ldr.w	r8, [pc, #668]	; b46a8 <_Z16randomizeAddressv+0x2a4>
void randomizeAddress(){
   b440e:	b08c      	sub	sp, #48	; 0x30
  while(slaveCount != slaveCountExpected){
   b4410:	682b      	ldr	r3, [r5, #0]
   b4412:	2b01      	cmp	r3, #1
   b4414:	f000 80fd 	beq.w	b4612 <_Z16randomizeAddressv+0x20e>
    slaveCount = 0;
   b4418:	2300      	movs	r3, #0
   b441a:	f8df 9290 	ldr.w	r9, [pc, #656]	; b46ac <_Z16randomizeAddressv+0x2a8>
      if(Wire.available() > 0){
        Serial.println("transmission recieved from: " + String(i));

        slaveCount++;

        String inputBuffer = "";
   b441e:	4f9a      	ldr	r7, [pc, #616]	; (b4688 <_Z16randomizeAddressv+0x284>)
    slaveCount = 0;
   b4420:	602b      	str	r3, [r5, #0]
    for(int i = 8; i <= 119; i++){
   b4422:	2408      	movs	r4, #8
      Serial.println("\nrequest code 1, address: " + String(i));
   b4424:	f005 f8f8 	bl	b9618 <_Z16_fetch_usbserialv>
   b4428:	4641      	mov	r1, r8
   b442a:	4606      	mov	r6, r0
   b442c:	a808      	add	r0, sp, #32
   b442e:	f004 fc4a 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4432:	220a      	movs	r2, #10
   b4434:	4621      	mov	r1, r4
   b4436:	a804      	add	r0, sp, #16
   b4438:	f004 fc85 	bl	b8d46 <_ZN6StringC1Eih>
   b443c:	a904      	add	r1, sp, #16
   b443e:	a808      	add	r0, sp, #32
   b4440:	f004 fcbc 	bl	b8dbc <_ZplRK15StringSumHelperRK6String>
   b4444:	6801      	ldr	r1, [r0, #0]
   b4446:	4630      	mov	r0, r6
   b4448:	f004 fb93 	bl	b8b72 <_ZN5Print7printlnEPKc>
   b444c:	a804      	add	r0, sp, #16
   b444e:	f004 fbef 	bl	b8c30 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4452:	a808      	add	r0, sp, #32
   b4454:	f004 fbec 	bl	b8c30 <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   b4458:	f005 fa2c 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b445c:	4621      	mov	r1, r4
   b445e:	f004 f9fb 	bl	b8858 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   b4462:	f005 fa27 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b4466:	2131      	movs	r1, #49	; 0x31
   b4468:	f7ff fec8 	bl	b41fc <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b446c:	fa5f fa84 	uxtb.w	sl, r4
   b4470:	f005 fa20 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b4474:	f004 f9f7 	bl	b8866 <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   b4478:	f005 fa1c 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b447c:	2218      	movs	r2, #24
   b447e:	4651      	mov	r1, sl
   b4480:	f004 f9e3 	bl	b884a <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   b4484:	f005 fa16 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b4488:	6803      	ldr	r3, [r0, #0]
   b448a:	691b      	ldr	r3, [r3, #16]
   b448c:	4798      	blx	r3
   b448e:	2800      	cmp	r0, #0
   b4490:	f340 80ba 	ble.w	b4608 <_Z16randomizeAddressv+0x204>
        Serial.println("transmission recieved from: " + String(i));
   b4494:	f005 f8c0 	bl	b9618 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4498:	4649      	mov	r1, r9
   b449a:	4606      	mov	r6, r0
   b449c:	a808      	add	r0, sp, #32
   b449e:	f004 fc12 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b44a2:	220a      	movs	r2, #10
   b44a4:	4621      	mov	r1, r4
   b44a6:	a804      	add	r0, sp, #16
   b44a8:	f004 fc4d 	bl	b8d46 <_ZN6StringC1Eih>
   b44ac:	a904      	add	r1, sp, #16
   b44ae:	a808      	add	r0, sp, #32
   b44b0:	f004 fc84 	bl	b8dbc <_ZplRK15StringSumHelperRK6String>
   b44b4:	6801      	ldr	r1, [r0, #0]
   b44b6:	4630      	mov	r0, r6
   b44b8:	f004 fb5b 	bl	b8b72 <_ZN5Print7printlnEPKc>
   b44bc:	a804      	add	r0, sp, #16
   b44be:	f004 fbb7 	bl	b8c30 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b44c2:	a808      	add	r0, sp, #32
   b44c4:	f004 fbb4 	bl	b8c30 <_ZN6StringD1Ev>
        slaveCount++;
   b44c8:	682b      	ldr	r3, [r5, #0]
        String inputBuffer = "";
   b44ca:	4639      	mov	r1, r7
        slaveCount++;
   b44cc:	3301      	adds	r3, #1
        String inputBuffer = "";
   b44ce:	4668      	mov	r0, sp
        slaveCount++;
   b44d0:	602b      	str	r3, [r5, #0]
        String inputBuffer = "";
   b44d2:	f004 fbf8 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b44d6:	2618      	movs	r6, #24
        char c;
        for(int j = 0; j < 24; j++){
          c = Wire.read();
   b44d8:	f005 f9ec 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b44dc:	6803      	ldr	r3, [r0, #0]
   b44de:	695b      	ldr	r3, [r3, #20]
   b44e0:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b44e2:	b2c1      	uxtb	r1, r0
   b44e4:	4668      	mov	r0, sp
   b44e6:	f004 fc5c 	bl	b8da2 <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   b44ea:	3e01      	subs	r6, #1
   b44ec:	d1f4      	bne.n	b44d8 <_Z16randomizeAddressv+0xd4>
          inputBuffer += c;
        }
        Wire.beginTransmission(i);
   b44ee:	f005 f9e1 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b44f2:	4621      	mov	r1, r4
   b44f4:	f004 f9b0 	bl	b8858 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   b44f8:	f005 f9dc 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b44fc:	9900      	ldr	r1, [sp, #0]
   b44fe:	f7ff fe81 	bl	b4204 <_ZN5Print5writeEPKc.isra.0>
        Serial.println("device id: " + inputBuffer);
   b4502:	f005 f889 	bl	b9618 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4506:	4961      	ldr	r1, [pc, #388]	; (b468c <_Z16randomizeAddressv+0x288>)
   b4508:	4606      	mov	r6, r0
   b450a:	a808      	add	r0, sp, #32
   b450c:	f004 fbdb 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4510:	4669      	mov	r1, sp
   b4512:	a808      	add	r0, sp, #32
   b4514:	f004 fc52 	bl	b8dbc <_ZplRK15StringSumHelperRK6String>
   b4518:	6801      	ldr	r1, [r0, #0]
   b451a:	4630      	mov	r0, r6
   b451c:	f004 fb29 	bl	b8b72 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4520:	a808      	add	r0, sp, #32
   b4522:	f004 fb85 	bl	b8c30 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b4526:	f005 f9c5 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b452a:	f004 f99c 	bl	b8866 <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   b452e:	f005 f873 	bl	b9618 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4532:	4957      	ldr	r1, [pc, #348]	; (b4690 <_Z16randomizeAddressv+0x28c>)
   b4534:	4606      	mov	r6, r0
   b4536:	a808      	add	r0, sp, #32
   b4538:	f004 fbc5 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b453c:	220a      	movs	r2, #10
   b453e:	4621      	mov	r1, r4
   b4540:	a804      	add	r0, sp, #16
   b4542:	f004 fc00 	bl	b8d46 <_ZN6StringC1Eih>
   b4546:	a904      	add	r1, sp, #16
   b4548:	a808      	add	r0, sp, #32
   b454a:	f004 fc37 	bl	b8dbc <_ZplRK15StringSumHelperRK6String>
   b454e:	6801      	ldr	r1, [r0, #0]
   b4550:	4630      	mov	r0, r6
   b4552:	f004 fb0e 	bl	b8b72 <_ZN5Print7printlnEPKc>
   b4556:	a804      	add	r0, sp, #16
   b4558:	f004 fb6a 	bl	b8c30 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b455c:	a808      	add	r0, sp, #32
   b455e:	f004 fb67 	bl	b8c30 <_ZN6StringD1Ev>

        Wire.beginTransmission(i);
   b4562:	f005 f9a7 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b4566:	4621      	mov	r1, r4
   b4568:	f004 f976 	bl	b8858 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   b456c:	f005 f9a2 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b4570:	2132      	movs	r1, #50	; 0x32
   b4572:	f7ff fe43 	bl	b41fc <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b4576:	f005 f99d 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b457a:	f004 f974 	bl	b8866 <_ZN7TwoWire15endTransmissionEv>

        Serial.println("request code 2, address: " + String(i));
   b457e:	f005 f84b 	bl	b9618 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4582:	4944      	ldr	r1, [pc, #272]	; (b4694 <_Z16randomizeAddressv+0x290>)
   b4584:	4606      	mov	r6, r0
   b4586:	a808      	add	r0, sp, #32
   b4588:	f004 fb9d 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b458c:	220a      	movs	r2, #10
   b458e:	4621      	mov	r1, r4
   b4590:	a804      	add	r0, sp, #16
   b4592:	f004 fbd8 	bl	b8d46 <_ZN6StringC1Eih>
   b4596:	a904      	add	r1, sp, #16
   b4598:	a808      	add	r0, sp, #32
   b459a:	f004 fc0f 	bl	b8dbc <_ZplRK15StringSumHelperRK6String>
   b459e:	6801      	ldr	r1, [r0, #0]
   b45a0:	4630      	mov	r0, r6
   b45a2:	f004 fae6 	bl	b8b72 <_ZN5Print7printlnEPKc>
   b45a6:	a804      	add	r0, sp, #16
   b45a8:	f004 fb42 	bl	b8c30 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45ac:	a808      	add	r0, sp, #32
   b45ae:	f004 fb3f 	bl	b8c30 <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   b45b2:	f005 f97f 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b45b6:	2204      	movs	r2, #4
   b45b8:	4651      	mov	r1, sl
   b45ba:	f004 f946 	bl	b884a <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   b45be:	4639      	mov	r1, r7
   b45c0:	4668      	mov	r0, sp
   b45c2:	f004 fbae 	bl	b8d22 <_ZN6StringaSEPKc>
   b45c6:	2604      	movs	r6, #4
        for(int j = 0; j < 4; j++){
          inputBuffer += (char)Wire.read();
   b45c8:	f005 f974 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b45cc:	6803      	ldr	r3, [r0, #0]
   b45ce:	695b      	ldr	r3, [r3, #20]
   b45d0:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b45d2:	b2c1      	uxtb	r1, r0
   b45d4:	4668      	mov	r0, sp
   b45d6:	f004 fbe4 	bl	b8da2 <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   b45da:	3e01      	subs	r6, #1
   b45dc:	d1f4      	bne.n	b45c8 <_Z16randomizeAddressv+0x1c4>
        }
        
        Serial.println("conflict verification: " + inputBuffer);
   b45de:	f005 f81b 	bl	b9618 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b45e2:	492d      	ldr	r1, [pc, #180]	; (b4698 <_Z16randomizeAddressv+0x294>)
   b45e4:	4606      	mov	r6, r0
   b45e6:	a808      	add	r0, sp, #32
   b45e8:	f004 fb6d 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b45ec:	4669      	mov	r1, sp
   b45ee:	a808      	add	r0, sp, #32
   b45f0:	f004 fbe4 	bl	b8dbc <_ZplRK15StringSumHelperRK6String>
   b45f4:	6801      	ldr	r1, [r0, #0]
   b45f6:	4630      	mov	r0, r6
   b45f8:	f004 fabb 	bl	b8b72 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b45fc:	a808      	add	r0, sp, #32
   b45fe:	f004 fb17 	bl	b8c30 <_ZN6StringD1Ev>
        String inputBuffer = "";
   b4602:	4668      	mov	r0, sp
   b4604:	f004 fb14 	bl	b8c30 <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   b4608:	3401      	adds	r4, #1
   b460a:	2c78      	cmp	r4, #120	; 0x78
   b460c:	f47f af0a 	bne.w	b4424 <_Z16randomizeAddressv+0x20>
   b4610:	e6fe      	b.n	b4410 <_Z16randomizeAddressv+0xc>
      }
    }
  }

  Serial.println("\nConnected to: ");
   b4612:	f005 f801 	bl	b9618 <_Z16_fetch_usbserialv>
   b4616:	4921      	ldr	r1, [pc, #132]	; (b469c <_Z16randomizeAddressv+0x298>)
    Wire.endTransmission();

    Wire.requestFrom(i, 24);
    if(Wire.available() > 0){
      Serial.print(i);
      Serial.print(", ");
   b4618:	4e21      	ldr	r6, [pc, #132]	; (b46a0 <_Z16randomizeAddressv+0x29c>)

      addressArr[count] = i;
   b461a:	4f22      	ldr	r7, [pc, #136]	; (b46a4 <_Z16randomizeAddressv+0x2a0>)
  Serial.println("\nConnected to: ");
   b461c:	f004 faa9 	bl	b8b72 <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   b4620:	2408      	movs	r4, #8
  int count = 0;
   b4622:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   b4624:	f005 f946 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b4628:	4621      	mov	r1, r4
   b462a:	f004 f915 	bl	b8858 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   b462e:	f005 f941 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b4632:	2131      	movs	r1, #49	; 0x31
   b4634:	f7ff fde2 	bl	b41fc <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b4638:	f005 f93c 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b463c:	f004 f913 	bl	b8866 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   b4640:	f005 f938 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b4644:	2218      	movs	r2, #24
   b4646:	b2e1      	uxtb	r1, r4
   b4648:	f004 f8ff 	bl	b884a <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   b464c:	f005 f932 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b4650:	6803      	ldr	r3, [r0, #0]
   b4652:	691b      	ldr	r3, [r3, #16]
   b4654:	4798      	blx	r3
   b4656:	2800      	cmp	r0, #0
   b4658:	dd0d      	ble.n	b4676 <_Z16randomizeAddressv+0x272>
      Serial.print(i);
   b465a:	f004 ffdd 	bl	b9618 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   b465e:	220a      	movs	r2, #10
   b4660:	4621      	mov	r1, r4
   b4662:	f7ff fd3e 	bl	b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      Serial.print(", ");
   b4666:	f004 ffd7 	bl	b9618 <_Z16_fetch_usbserialv>
   b466a:	4631      	mov	r1, r6
   b466c:	f004 fa6e 	bl	b8b4c <_ZN5Print5printEPKc>
      addressArr[count] = i;
   b4670:	f847 4025 	str.w	r4, [r7, r5, lsl #2]

      count++;
   b4674:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   b4676:	3401      	adds	r4, #1
   b4678:	2c78      	cmp	r4, #120	; 0x78
   b467a:	d1d3      	bne.n	b4624 <_Z16randomizeAddressv+0x220>
    }
  }
}
   b467c:	b00c      	add	sp, #48	; 0x30
   b467e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4682:	bf00      	nop
   b4684:	2003e6a4 	.word	0x2003e6a4
   b4688:	000bcffe 	.word	0x000bcffe
   b468c:	000bcbda 	.word	0x000bcbda
   b4690:	000bcbe6 	.word	0x000bcbe6
   b4694:	000bcbfd 	.word	0x000bcbfd
   b4698:	000bcc17 	.word	0x000bcc17
   b469c:	000bcc2f 	.word	0x000bcc2f
   b46a0:	000bcc3f 	.word	0x000bcc3f
   b46a4:	200322c8 	.word	0x200322c8
   b46a8:	000bcba2 	.word	0x000bcba2
   b46ac:	000bcbbd 	.word	0x000bcbbd

000b46b0 <_Z17acquireWireBufferv>:
  }

  bleCount++;
}

hal_i2c_config_t acquireWireBuffer() {
   b46b0:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b46b2:	f44f 7500 	mov.w	r5, #512	; 0x200
   b46b6:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b46b8:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b46ba:	6003      	str	r3, [r0, #0]
   b46bc:	6085      	str	r5, [r0, #8]
   b46be:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b46c0:	4905      	ldr	r1, [pc, #20]	; (b46d8 <_Z17acquireWireBufferv+0x28>)
   b46c2:	4628      	mov	r0, r5
   b46c4:	f005 f95a 	bl	b997c <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b46c8:	4903      	ldr	r1, [pc, #12]	; (b46d8 <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b46ca:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b46cc:	4628      	mov	r0, r5
   b46ce:	f005 f955 	bl	b997c <_ZnajRKSt9nothrow_t>
    };
   b46d2:	60e0      	str	r0, [r4, #12]
    return config;
   b46d4:	4620      	mov	r0, r4
   b46d6:	bd38      	pop	{r3, r4, r5, pc}
   b46d8:	000bd404 	.word	0x000bd404

000b46dc <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b46dc:	b510      	push	{r4, lr}
   b46de:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b46e0:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b46e2:	b118      	cbz	r0, b46ec <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b46e4:	68a1      	ldr	r1, [r4, #8]
   b46e6:	1a09      	subs	r1, r1, r0
   b46e8:	f7ff fcdb 	bl	b40a2 <_ZdlPvj>
      }
   b46ec:	4620      	mov	r0, r4
   b46ee:	bd10      	pop	{r4, pc}

000b46f0 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b46f0:	b510      	push	{r4, lr}
   b46f2:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b46f4:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b46f6:	b118      	cbz	r0, b4700 <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b46f8:	68a1      	ldr	r1, [r4, #8]
   b46fa:	1a09      	subs	r1, r1, r0
   b46fc:	f7ff fcd1 	bl	b40a2 <_ZdlPvj>
      }
   b4700:	4620      	mov	r0, r4
   b4702:	bd10      	pop	{r4, pc}

000b4704 <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4704:	b510      	push	{r4, lr}
   b4706:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4708:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b470a:	b118      	cbz	r0, b4714 <_ZNSt12_Vector_baseIiSaIiEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b470c:	68a1      	ldr	r1, [r4, #8]
   b470e:	1a09      	subs	r1, r1, r0
   b4710:	f7ff fcc7 	bl	b40a2 <_ZdlPvj>
      }
   b4714:	4620      	mov	r0, r4
   b4716:	bd10      	pop	{r4, pc}

000b4718 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b4718:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b471a:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b471e:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   b4720:	42ae      	cmp	r6, r5
   b4722:	d004      	beq.n	b472e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x16>
      { _M_dispose(); }
   b4724:	4628      	mov	r0, r5
   b4726:	f005 fa13 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b472a:	3518      	adds	r5, #24
   b472c:	e7f8      	b.n	b4720 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b472e:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4730:	b118      	cbz	r0, b473a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4732:	68a1      	ldr	r1, [r4, #8]
   b4734:	1a09      	subs	r1, r1, r0
   b4736:	f7ff fcb4 	bl	b40a2 <_ZdlPvj>
      }
   b473a:	4620      	mov	r0, r4
   b473c:	bd70      	pop	{r4, r5, r6, pc}

000b473e <_ZN7RailwayD1Ev>:
#include "Checkpoint.cpp"
#include <string>

//container for all data for each rail line
class Railway{
   b473e:	b510      	push	{r4, lr}
   b4740:	4604      	mov	r4, r0
   b4742:	3048      	adds	r0, #72	; 0x48
   b4744:	f7ff ffe8 	bl	b4718 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b4748:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b474c:	f005 fa00 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4750:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b4754:	f7ff ffd6 	bl	b4704 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4758:	f104 0018 	add.w	r0, r4, #24
   b475c:	f7ff ffd2 	bl	b4704 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4760:	f104 000c 	add.w	r0, r4, #12
   b4764:	f7ff ffc4 	bl	b46f0 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4768:	4620      	mov	r0, r4
   b476a:	f7ff ffb7 	bl	b46dc <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b476e:	4620      	mov	r0, r4
   b4770:	bd10      	pop	{r4, pc}
	...

000b4774 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   b4774:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4778:	2400      	movs	r4, #0
      vector(initializer_list<value_type> __l,
   b477a:	ab02      	add	r3, sp, #8
   b477c:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4780:	e9c0 4400 	strd	r4, r4, [r0]
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   b4784:	4613      	mov	r3, r2
      vector(initializer_list<value_type> __l,
   b4786:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4788:	6084      	str	r4, [r0, #8]
   b478a:	00d7      	lsls	r7, r2, #3
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b478c:	f342 001c 	sbfx	r0, r2, #0, #29

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4790:	4a10      	ldr	r2, [pc, #64]	; (b47d4 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x60>)
   b4792:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   b4796:	4688      	mov	r8, r1
   b4798:	d202      	bcs.n	b47a0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x2c>
	  __throw_length_error(
   b479a:	480f      	ldr	r0, [pc, #60]	; (b47d8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x64>)
   b479c:	f005 f8f6 	bl	b998c <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b47a0:	f7ff fcf9 	bl	b4196 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47a4:	19c6      	adds	r6, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b47a6:	4602      	mov	r2, r0
   b47a8:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47aa:	60ae      	str	r6, [r5, #8]
   b47ac:	4623      	mov	r3, r4
   b47ae:	429f      	cmp	r7, r3
   b47b0:	d00b      	beq.n	b47ca <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x56>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b47b2:	18d4      	adds	r4, r2, r3
   b47b4:	bf1c      	itt	ne
   b47b6:	eb08 0103 	addne.w	r1, r8, r3
   b47ba:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b47be:	f103 0308 	add.w	r3, r3, #8
   b47c2:	bf18      	it	ne
   b47c4:	e9c4 0100 	strdne	r0, r1, [r4]
   b47c8:	e7f1      	b.n	b47ae <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x3a>
      }
   b47ca:	4628      	mov	r0, r5
	  this->_M_impl._M_finish =
   b47cc:	606e      	str	r6, [r5, #4]
      }
   b47ce:	b002      	add	sp, #8
   b47d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b47d4:	7ffffff8 	.word	0x7ffffff8
   b47d8:	000bcc42 	.word	0x000bcc42

000b47dc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>:
      vector(initializer_list<value_type> __l,
   b47dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b47e0:	ab02      	add	r3, sp, #8
   b47e2:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47e6:	2300      	movs	r3, #0
   b47e8:	e9c0 3300 	strd	r3, r3, [r0]
   b47ec:	6083      	str	r3, [r0, #8]
   b47ee:	4616      	mov	r6, r2
   b47f0:	2318      	movs	r3, #24
   b47f2:	435e      	muls	r6, r3
   b47f4:	4b10      	ldr	r3, [pc, #64]	; (b4838 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x5c>)
      vector(initializer_list<value_type> __l,
   b47f6:	4604      	mov	r4, r0
   b47f8:	10f0      	asrs	r0, r6, #3
   b47fa:	4358      	muls	r0, r3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b47fc:	4b0f      	ldr	r3, [pc, #60]	; (b483c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x60>)
   b47fe:	429e      	cmp	r6, r3
   b4800:	460f      	mov	r7, r1
   b4802:	eb01 0806 	add.w	r8, r1, r6
   b4806:	d902      	bls.n	b480e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x32>
	  __throw_length_error(
   b4808:	480d      	ldr	r0, [pc, #52]	; (b4840 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x64>)
   b480a:	f005 f8bf 	bl	b998c <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b480e:	f7ff fca3 	bl	b4158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4812:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4814:	4605      	mov	r5, r0
   b4816:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4818:	60a6      	str	r6, [r4, #8]
   b481a:	45b8      	cmp	r8, r7
   b481c:	d007      	beq.n	b482e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x52>
   b481e:	b11d      	cbz	r5, b4828 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x4c>
   b4820:	4639      	mov	r1, r7
   b4822:	4628      	mov	r0, r5
   b4824:	f7ff fcc4 	bl	b41b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4828:	3718      	adds	r7, #24
   b482a:	3518      	adds	r5, #24
   b482c:	e7f5      	b.n	b481a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x3e>
      }
   b482e:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
   b4830:	6065      	str	r5, [r4, #4]
      }
   b4832:	b002      	add	sp, #8
   b4834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4838:	aaaaaaab 	.word	0xaaaaaaab
   b483c:	7ffffff8 	.word	0x7ffffff8
   b4840:	000bcc42 	.word	0x000bcc42

000b4844 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b4844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4846:	e9d1 3700 	ldrd	r3, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b484a:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b484c:	1aff      	subs	r7, r7, r3
      vector(const vector& __x)
   b484e:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4850:	e9c0 5500 	strd	r5, r5, [r0]
   b4854:	6085      	str	r5, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4856:	10f8      	asrs	r0, r7, #3
      vector(const vector& __x)
   b4858:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b485a:	f7ff fc9c 	bl	b4196 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b485e:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4862:	4407      	add	r7, r0
   b4864:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4866:	e9d6 7600 	ldrd	r7, r6, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b486a:	4602      	mov	r2, r0
   b486c:	1bf6      	subs	r6, r6, r7
      : _M_current(__i) { }
   b486e:	462b      	mov	r3, r5
   b4870:	42b3      	cmp	r3, r6
   b4872:	eb02 0503 	add.w	r5, r2, r3
   b4876:	d006      	beq.n	b4886 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x42>
   b4878:	b11d      	cbz	r5, b4882 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x3e>
   b487a:	18f9      	adds	r1, r7, r3
   b487c:	c903      	ldmia	r1, {r0, r1}
   b487e:	e885 0003 	stmia.w	r5, {r0, r1}
   b4882:	3308      	adds	r3, #8
   b4884:	e7f4      	b.n	b4870 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b4886:	6065      	str	r5, [r4, #4]
      }
   b4888:	4620      	mov	r0, r4
   b488a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b488c <_ZNSt6vectorI7RailwaySaIS0_EE2atEj>:
      at(size_type __n)
   b488c:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b488e:	e9d0 4200 	ldrd	r4, r2, [r0]
   b4892:	4806      	ldr	r0, [pc, #24]	; (b48ac <_ZNSt6vectorI7RailwaySaIS0_EE2atEj+0x20>)
   b4894:	1b12      	subs	r2, r2, r4
   b4896:	1092      	asrs	r2, r2, #2
   b4898:	4342      	muls	r2, r0
	if (__n >= this->size())
   b489a:	4291      	cmp	r1, r2
   b489c:	d302      	bcc.n	b48a4 <_ZNSt6vectorI7RailwaySaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b489e:	4804      	ldr	r0, [pc, #16]	; (b48b0 <_ZNSt6vectorI7RailwaySaIS0_EE2atEj+0x24>)
   b48a0:	f005 f877 	bl	b9992 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b48a4:	2064      	movs	r0, #100	; 0x64
   b48a6:	fb00 4001 	mla	r0, r0, r1, r4
   b48aa:	bd10      	pop	{r4, pc}
   b48ac:	c28f5c29 	.word	0xc28f5c29
   b48b0:	000bcc73 	.word	0x000bcc73

000b48b4 <_ZNSt6vectorIfSaIfEE2atEj>:
      at(size_type __n)
   b48b4:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48b6:	e9d0 5400 	ldrd	r5, r4, [r0]
   b48ba:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
   b48bc:	ebb1 0fa4 	cmp.w	r1, r4, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48c0:	ea4f 02a4 	mov.w	r2, r4, asr #2
	if (__n >= this->size())
   b48c4:	d302      	bcc.n	b48cc <_ZNSt6vectorIfSaIfEE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b48c6:	4803      	ldr	r0, [pc, #12]	; (b48d4 <_ZNSt6vectorIfSaIfEE2atEj+0x20>)
   b48c8:	f005 f863 	bl	b9992 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b48cc:	eb05 0081 	add.w	r0, r5, r1, lsl #2
   b48d0:	bd38      	pop	{r3, r4, r5, pc}
   b48d2:	bf00      	nop
   b48d4:	000bcc73 	.word	0x000bcc73

000b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>:
      at(size_type __n)
   b48d8:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48da:	e9d0 5400 	ldrd	r5, r4, [r0]
   b48de:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
   b48e0:	ebb1 0fe4 	cmp.w	r1, r4, asr #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48e4:	ea4f 02e4 	mov.w	r2, r4, asr #3
	if (__n >= this->size())
   b48e8:	d302      	bcc.n	b48f0 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b48ea:	4803      	ldr	r0, [pc, #12]	; (b48f8 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj+0x20>)
   b48ec:	f005 f851 	bl	b9992 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b48f0:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
   b48f4:	bd38      	pop	{r3, r4, r5, pc}
   b48f6:	bf00      	nop
   b48f8:	000bcc73 	.word	0x000bcc73

000b48fc <_ZNSt6vectorIiSaIiEE2atEj>:
      at(size_type __n)
   b48fc:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48fe:	e9d0 5400 	ldrd	r5, r4, [r0]
   b4902:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
   b4904:	ebb1 0fa4 	cmp.w	r1, r4, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4908:	ea4f 02a4 	mov.w	r2, r4, asr #2
	if (__n >= this->size())
   b490c:	d302      	bcc.n	b4914 <_ZNSt6vectorIiSaIiEE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b490e:	4803      	ldr	r0, [pc, #12]	; (b491c <_ZNSt6vectorIiSaIiEE2atEj+0x20>)
   b4910:	f005 f83f 	bl	b9992 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4914:	eb05 0081 	add.w	r0, r5, r1, lsl #2
   b4918:	bd38      	pop	{r3, r4, r5, pc}
   b491a:	bf00      	nop
   b491c:	000bcc73 	.word	0x000bcc73

000b4920 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>:
      at(size_type __n)
   b4920:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4922:	e9d0 4200 	ldrd	r4, r2, [r0]
   b4926:	4806      	ldr	r0, [pc, #24]	; (b4940 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj+0x20>)
   b4928:	1b12      	subs	r2, r2, r4
   b492a:	10d2      	asrs	r2, r2, #3
   b492c:	4342      	muls	r2, r0
	if (__n >= this->size())
   b492e:	4291      	cmp	r1, r2
   b4930:	d302      	bcc.n	b4938 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b4932:	4804      	ldr	r0, [pc, #16]	; (b4944 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj+0x24>)
   b4934:	f005 f82d 	bl	b9992 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4938:	2018      	movs	r0, #24
   b493a:	fb00 4001 	mla	r0, r0, r1, r4
   b493e:	bd10      	pop	{r4, pc}
   b4940:	aaaaaaab 	.word	0xaaaaaaab
   b4944:	000bcc73 	.word	0x000bcc73

000b4948 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(bleCount <= slaveCountExpected){
   b494c:	4c5e      	ldr	r4, [pc, #376]	; (b4ac8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x180>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b494e:	b088      	sub	sp, #32
   b4950:	4680      	mov	r8, r0
   b4952:	460d      	mov	r5, r1
  String inputBuffer = "";
   b4954:	4668      	mov	r0, sp
   b4956:	495d      	ldr	r1, [pc, #372]	; (b4acc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x184>)
   b4958:	f004 f9b5 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
  if(bleCount <= slaveCountExpected){
   b495c:	6823      	ldr	r3, [r4, #0]
   b495e:	2b01      	cmp	r3, #1
   b4960:	f300 809c 	bgt.w	b4a9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x154>
    for(int i = 0; i < len - 1; i++){
   b4964:	2700      	movs	r7, #0
   b4966:	3d01      	subs	r5, #1
   b4968:	42bd      	cmp	r5, r7
   b496a:	d906      	bls.n	b497a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x32>
	String & operator += (char c)			{concat(c); return (*this);}
   b496c:	f818 1007 	ldrb.w	r1, [r8, r7]
   b4970:	4668      	mov	r0, sp
   b4972:	f004 fa16 	bl	b8da2 <_ZN6String6concatEc>
   b4976:	3701      	adds	r7, #1
   b4978:	e7f6      	b.n	b4968 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x20>
    if(bleCount < slaveCountExpected){
   b497a:	6823      	ldr	r3, [r4, #0]
   b497c:	2b00      	cmp	r3, #0
   b497e:	dc04      	bgt.n	b498a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x42>
      txCharacteristic.setValue("\nEnter the line color of the device with the blinking LED: ");
   b4980:	4953      	ldr	r1, [pc, #332]	; (b4ad0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x188>)
   b4982:	4854      	ldr	r0, [pc, #336]	; (b4ad4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18c>)
   b4984:	2200      	movs	r2, #0
   b4986:	f002 ffaf 	bl	b78e8 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    Wire.beginTransmission(addressArr[bleCount]);
   b498a:	f004 ff93 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b498e:	4d52      	ldr	r5, [pc, #328]	; (b4ad8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x190>)
   b4990:	6823      	ldr	r3, [r4, #0]
   b4992:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   b4996:	f003 ff5f 	bl	b8858 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('3');
   b499a:	f004 ff8b 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b499e:	2133      	movs	r1, #51	; 0x33
   b49a0:	f7ff fc2c 	bl	b41fc <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b49a4:	f004 ff86 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b49a8:	f003 ff5d 	bl	b8866 <_ZN7TwoWire15endTransmissionEv>
    if(bleCount > 0){
   b49ac:	6823      	ldr	r3, [r4, #0]
   b49ae:	2b00      	cmp	r3, #0
   b49b0:	dd74      	ble.n	b4a9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x154>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b49b2:	494a      	ldr	r1, [pc, #296]	; (b4adc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x194>)
   b49b4:	4668      	mov	r0, sp
   b49b6:	f004 fa22 	bl	b8dfe <_ZNK6String6equalsEPKc>
      if(inputBuffer == "red"){
   b49ba:	2800      	cmp	r0, #0
   b49bc:	d077      	beq.n	b4aae <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x166>
        Serial.println("receive red");
   b49be:	f004 fe2b 	bl	b9618 <_Z16_fetch_usbserialv>
   b49c2:	4947      	ldr	r1, [pc, #284]	; (b4ae0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x198>)
   b49c4:	f004 f8d5 	bl	b8b72 <_ZN5Print7printlnEPKc>
        colorAdr = 0;
   b49c8:	2600      	movs	r6, #0
      Wire.beginTransmission(addressArr[bleCount - 1]);
   b49ca:	f004 ff73 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b49ce:	6823      	ldr	r3, [r4, #0]
   b49d0:	3b01      	subs	r3, #1
   b49d2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   b49d6:	f003 ff3f 	bl	b8858 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(String(railways.at(colorAdr).colors.at(0).c_str()));
   b49da:	f004 ff6b 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b49de:	4631      	mov	r1, r6
   b49e0:	4607      	mov	r7, r0
   b49e2:	4840      	ldr	r0, [pc, #256]	; (b4ae4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x19c>)
   b49e4:	f7ff ff52 	bl	b488c <_ZNSt6vectorI7RailwaySaIS0_EE2atEj>
   b49e8:	2100      	movs	r1, #0
   b49ea:	3048      	adds	r0, #72	; 0x48
   b49ec:	f7ff ff98 	bl	b4920 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
   b49f0:	6801      	ldr	r1, [r0, #0]
   b49f2:	a804      	add	r0, sp, #16
   b49f4:	f004 f967 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b49f8:	9904      	ldr	r1, [sp, #16]
   b49fa:	4638      	mov	r0, r7
   b49fc:	f7ff fc02 	bl	b4204 <_ZN5Print5writeEPKc.isra.0>
   b4a00:	a804      	add	r0, sp, #16
   b4a02:	f004 f915 	bl	b8c30 <_ZN6StringD1Ev>
      Wire.write(String(railways.at(colorAdr).colors.at(1).c_str()));
   b4a06:	f004 ff55 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b4a0a:	4631      	mov	r1, r6
   b4a0c:	4607      	mov	r7, r0
   b4a0e:	4835      	ldr	r0, [pc, #212]	; (b4ae4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x19c>)
   b4a10:	f7ff ff3c 	bl	b488c <_ZNSt6vectorI7RailwaySaIS0_EE2atEj>
   b4a14:	2101      	movs	r1, #1
   b4a16:	3048      	adds	r0, #72	; 0x48
   b4a18:	f7ff ff82 	bl	b4920 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE2atEj>
   b4a1c:	6801      	ldr	r1, [r0, #0]
   b4a1e:	a804      	add	r0, sp, #16
   b4a20:	f004 f951 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4a24:	9904      	ldr	r1, [sp, #16]
   b4a26:	4638      	mov	r0, r7
   b4a28:	f7ff fbec 	bl	b4204 <_ZN5Print5writeEPKc.isra.0>
   b4a2c:	a804      	add	r0, sp, #16
   b4a2e:	f004 f8ff 	bl	b8c30 <_ZN6StringD1Ev>
      Wire.endTransmission();
   b4a32:	f004 ff3f 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b4a36:	f003 ff16 	bl	b8866 <_ZN7TwoWire15endTransmissionEv>
      sequenceArr[bleCount - 1] = addressArr[colorAdr];
   b4a3a:	6823      	ldr	r3, [r4, #0]
   b4a3c:	4f2a      	ldr	r7, [pc, #168]	; (b4ae8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1a0>)
   b4a3e:	f855 2026 	ldr.w	r2, [r5, r6, lsl #2]
   b4a42:	3b01      	subs	r3, #1
   b4a44:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
      Wire.beginTransmission(addressArr[bleCount - 1]);
   b4a48:	f004 ff34 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b4a4c:	6823      	ldr	r3, [r4, #0]
   b4a4e:	3b01      	subs	r3, #1
   b4a50:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   b4a54:	f003 ff00 	bl	b8858 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b4a58:	f004 ff2c 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b4a5c:	2134      	movs	r1, #52	; 0x34
   b4a5e:	f7ff fbcd 	bl	b41fc <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4a62:	f004 ff27 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b4a66:	f003 fefe 	bl	b8866 <_ZN7TwoWire15endTransmissionEv>
      if(bleCount == slaveCountExpected){
   b4a6a:	6823      	ldr	r3, [r4, #0]
   b4a6c:	2b01      	cmp	r3, #1
   b4a6e:	d115      	bne.n	b4a9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x154>
        userInput = true;
   b4a70:	4a1e      	ldr	r2, [pc, #120]	; (b4aec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1a4>)
    delay(1000);
   b4a72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
        userInput = true;
   b4a76:	7013      	strb	r3, [r2, #0]
    delay(1000);
   b4a78:	f002 fc8c 	bl	b7394 <delay>
    Serial.println("\nSequence: ");
   b4a7c:	f004 fdcc 	bl	b9618 <_Z16_fetch_usbserialv>
   b4a80:	491b      	ldr	r1, [pc, #108]	; (b4af0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1a8>)
   b4a82:	f004 f876 	bl	b8b72 <_ZN5Print7printlnEPKc>
      Serial.print(sequenceArr[i]);
   b4a86:	f004 fdc7 	bl	b9618 <_Z16_fetch_usbserialv>
   b4a8a:	6839      	ldr	r1, [r7, #0]
   b4a8c:	220a      	movs	r2, #10
   b4a8e:	f7ff fb28 	bl	b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      Serial.print(", ");
   b4a92:	f004 fdc1 	bl	b9618 <_Z16_fetch_usbserialv>
   b4a96:	4917      	ldr	r1, [pc, #92]	; (b4af4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ac>)
   b4a98:	f004 f858 	bl	b8b4c <_ZN5Print5printEPKc>
  bleCount++;
   b4a9c:	6823      	ldr	r3, [r4, #0]
  String inputBuffer = "";
   b4a9e:	4668      	mov	r0, sp
  bleCount++;
   b4aa0:	3301      	adds	r3, #1
   b4aa2:	6023      	str	r3, [r4, #0]
  String inputBuffer = "";
   b4aa4:	f004 f8c4 	bl	b8c30 <_ZN6StringD1Ev>
}
   b4aa8:	b008      	add	sp, #32
   b4aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4aae:	4912      	ldr	r1, [pc, #72]	; (b4af8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b0>)
   b4ab0:	4668      	mov	r0, sp
   b4ab2:	f004 f9a4 	bl	b8dfe <_ZNK6String6equalsEPKc>
      }else if(inputBuffer == "blue"){
   b4ab6:	2800      	cmp	r0, #0
   b4ab8:	d087      	beq.n	b49ca <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x82>
        Serial.println("receive blue");
   b4aba:	f004 fdad 	bl	b9618 <_Z16_fetch_usbserialv>
   b4abe:	490f      	ldr	r1, [pc, #60]	; (b4afc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1b4>)
   b4ac0:	f004 f857 	bl	b8b72 <_ZN5Print7printlnEPKc>
        colorAdr = 1;
   b4ac4:	2601      	movs	r6, #1
   b4ac6:	e780      	b.n	b49ca <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x82>
   b4ac8:	200322cc 	.word	0x200322cc
   b4acc:	000bcffe 	.word	0x000bcffe
   b4ad0:	000bccbd 	.word	0x000bccbd
   b4ad4:	2003e6a8 	.word	0x2003e6a8
   b4ad8:	200322c8 	.word	0x200322c8
   b4adc:	000bcd01 	.word	0x000bcd01
   b4ae0:	000bccf9 	.word	0x000bccf9
   b4ae4:	2003e5c8 	.word	0x2003e5c8
   b4ae8:	2003e6a0 	.word	0x2003e6a0
   b4aec:	2003e6b0 	.word	0x2003e6b0
   b4af0:	000bcd12 	.word	0x000bcd12
   b4af4:	000bcc3f 	.word	0x000bcc3f
   b4af8:	000bcd0d 	.word	0x000bcd0d
   b4afc:	000bcd05 	.word	0x000bcd05

000b4b00 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4b00:	2900      	cmp	r1, #0
      _M_create_storage(size_t __n)
   b4b02:	b538      	push	{r3, r4, r5, lr}
   b4b04:	4604      	mov	r4, r0
      _M_allocate(size_t __n)
   b4b06:	ea4f 0581 	mov.w	r5, r1, lsl #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4b0a:	d00c      	beq.n	b4b26 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x26>
	if (__n > this->_M_max_size())
   b4b0c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   b4b10:	d301      	bcc.n	b4b16 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
   b4b12:	f004 ff35 	bl	b9980 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4b16:	4628      	mov	r0, r5
   b4b18:	f7ff fabd 	bl	b4096 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4b1c:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4b20:	4428      	add	r0, r5
   b4b22:	60a0      	str	r0, [r4, #8]
      }
   b4b24:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4b26:	4608      	mov	r0, r1
   b4b28:	e7f8      	b.n	b4b1c <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x1c>

000b4b2a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b4b2a:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b4b2c:	b510      	push	{r4, lr}
   b4b2e:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b4b30:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b4b34:	d005      	beq.n	b4b42 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4b36:	4601      	mov	r1, r0
   b4b38:	4622      	mov	r2, r4
   b4b3a:	4618      	mov	r0, r3
   b4b3c:	f005 ffcd 	bl	baada <memmove>
   b4b40:	4603      	mov	r3, r0
	  return __result + _Num;
	}
   b4b42:	1918      	adds	r0, r3, r4
   b4b44:	bd10      	pop	{r4, pc}

000b4b46 <_ZNSt6vectorIiSaIiEEC1ERKS1_>:
      vector(const vector& __x)
   b4b46:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4b48:	e9d1 3600 	ldrd	r3, r6, [r1]
   b4b4c:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4b4e:	2300      	movs	r3, #0
      vector(const vector& __x)
   b4b50:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4b52:	e9c0 3300 	strd	r3, r3, [r0]
   b4b56:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4b58:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   b4b5a:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4b5c:	f7ff fb0e 	bl	b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4b60:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4b64:	4406      	add	r6, r0
   b4b66:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4b68:	4602      	mov	r2, r0
      if (std::is_constant_evaluated())
	return std::__copy_move<_IsMove, false, _Category>::
	  __copy_m(__first, __last, __result);
#endif
      return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
			      _Category>::__copy_m(__first, __last, __result);
   b4b6a:	e9d5 0100 	ldrd	r0, r1, [r5]
   b4b6e:	f7ff ffdc 	bl	b4b2a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
   b4b72:	6060      	str	r0, [r4, #4]
      }
   b4b74:	4620      	mov	r0, r4
   b4b76:	bd70      	pop	{r4, r5, r6, pc}

000b4b78 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>:
      vector(initializer_list<value_type> __l,
   b4b78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b4b7a:	ab04      	add	r3, sp, #16
   b4b7c:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4b80:	2300      	movs	r3, #0
   b4b82:	e9c0 3300 	strd	r3, r3, [r0]
   b4b86:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b4b88:	4604      	mov	r4, r0
   b4b8a:	4613      	mov	r3, r2
   b4b8c:	460e      	mov	r6, r1
   b4b8e:	0095      	lsls	r5, r2, #2
   b4b90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b4b94:	f342 001d 	sbfx	r0, r2, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4b98:	4a0a      	ldr	r2, [pc, #40]	; (b4bc4 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_+0x4c>)
   b4b9a:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b4b9e:	d202      	bcs.n	b4ba6 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_+0x2e>
	  __throw_length_error(
   b4ba0:	4809      	ldr	r0, [pc, #36]	; (b4bc8 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_+0x50>)
   b4ba2:	f004 fef3 	bl	b998c <_ZSt20__throw_length_errorPKc>
   b4ba6:	9101      	str	r1, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4ba8:	f7ff fae8 	bl	b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4bac:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4bae:	4602      	mov	r2, r0
   b4bb0:	6020      	str	r0, [r4, #0]
   b4bb2:	9901      	ldr	r1, [sp, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4bb4:	60a5      	str	r5, [r4, #8]
   b4bb6:	4630      	mov	r0, r6
   b4bb8:	f7ff ffb7 	bl	b4b2a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
   b4bbc:	6060      	str	r0, [r4, #4]
      }
   b4bbe:	4620      	mov	r0, r4
   b4bc0:	b004      	add	sp, #16
   b4bc2:	bd70      	pop	{r4, r5, r6, pc}
   b4bc4:	7ffffffc 	.word	0x7ffffffc
   b4bc8:	000bcc42 	.word	0x000bcc42

000b4bcc <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>:
      if (&__x != this)
   b4bcc:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b4bce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4bd0:	4604      	mov	r4, r0
   b4bd2:	460d      	mov	r5, r1
      if (&__x != this)
   b4bd4:	d01d      	beq.n	b4c12 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x46>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4bd6:	e9d1 7100 	ldrd	r7, r1, [r1]
			 - this->_M_impl._M_start); }
   b4bda:	6802      	ldr	r2, [r0, #0]
   b4bdc:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4bde:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b4be0:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b4be2:	429e      	cmp	r6, r3
   b4be4:	d917      	bls.n	b4c16 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x4a>
	  pointer __result = this->_M_allocate(__n);
   b4be6:	10b0      	asrs	r0, r6, #2
   b4be8:	9101      	str	r1, [sp, #4]
   b4bea:	f7ff fac7 	bl	b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
   b4bee:	9901      	ldr	r1, [sp, #4]
   b4bf0:	4602      	mov	r2, r0
   b4bf2:	4605      	mov	r5, r0
   b4bf4:	4638      	mov	r0, r7
   b4bf6:	f7ff ff98 	bl	b4b2a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4bfa:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4bfc:	b118      	cbz	r0, b4c06 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x3a>
			    - this->_M_impl._M_start);
   b4bfe:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b4c00:	1a09      	subs	r1, r1, r0
   b4c02:	f7ff fa4e 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4c06:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4c08:	4435      	add	r5, r6
   b4c0a:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4c0c:	6823      	ldr	r3, [r4, #0]
   b4c0e:	4433      	add	r3, r6
   b4c10:	6063      	str	r3, [r4, #4]
    }
   b4c12:	b003      	add	sp, #12
   b4c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c16:	6843      	ldr	r3, [r0, #4]
   b4c18:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b4c1a:	429e      	cmp	r6, r3
   b4c1c:	d803      	bhi.n	b4c26 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x5a>
   b4c1e:	4638      	mov	r0, r7
   b4c20:	f7ff ff83 	bl	b4b2a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   b4c24:	e7f2      	b.n	b4c0c <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x40>
   b4c26:	18f9      	adds	r1, r7, r3
   b4c28:	4638      	mov	r0, r7
   b4c2a:	f7ff ff7e 	bl	b4b2a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
   b4c2e:	e9d4 0200 	ldrd	r0, r2, [r4]
   b4c32:	e9d5 3100 	ldrd	r3, r1, [r5]
   b4c36:	1a10      	subs	r0, r2, r0
   b4c38:	4418      	add	r0, r3
   b4c3a:	e7f1      	b.n	b4c20 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x54>

000b4c3c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>:
    std::vector<std::string> colors;
    int tripleIndex = -1;
    int loopIndex = -1;
    int lowerLoopBound, upperLoopBound;

    Railway(std::vector<Checkpoint> checkpointInput, std::vector<int> scalerInput, int outputSize, std::string nameInput, std::vector<std::string> colorInput, std::vector<int> loopBoundInput = {0, 0}){
   b4c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4c40:	2500      	movs	r5, #0
   b4c42:	461e      	mov	r6, r3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4c44:	f100 0338 	add.w	r3, r0, #56	; 0x38
      { _M_string_length = __length; }
   b4c48:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   b4c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4c50:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
   b4c54:	4604      	mov	r4, r0
   b4c56:	e9c0 5500 	strd	r5, r5, [r0]
   b4c5a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b4c5e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b4c62:	e9c0 5506 	strd	r5, r5, [r0, #24]
   b4c66:	e9c0 5508 	strd	r5, r5, [r0, #32]
   b4c6a:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
   b4c6e:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
   b4c72:	b089      	sub	sp, #36	; 0x24
   b4c74:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
   b4c78:	6505      	str	r5, [r0, #80]	; 0x50
   b4c7a:	4617      	mov	r7, r2
   b4c7c:	f100 0a18 	add.w	sl, r0, #24
   b4c80:	f100 0930 	add.w	r9, r0, #48	; 0x30
   b4c84:	f100 0848 	add.w	r8, r0, #72	; 0x48
      checkpoints = checkpointInput;
   b4c88:	f7ff face 	bl	b4228 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c8c:	e9d4 2300 	ldrd	r2, r3, [r4]
   b4c90:	1a9b      	subs	r3, r3, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4c92:	42ab      	cmp	r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c94:	ea4f 01e3 	mov.w	r1, r3, asr #3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4c98:	da02      	bge.n	b4ca0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x64>
	  __throw_length_error(
   b4c9a:	4833      	ldr	r0, [pc, #204]	; (b4d68 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x12c>)
   b4c9c:	f004 fe76 	bl	b998c <_ZSt20__throw_length_errorPKc>
      { _M_create_storage(__n); }
   b4ca0:	a802      	add	r0, sp, #8
   b4ca2:	9101      	str	r1, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4ca4:	e9cd 5502 	strd	r5, r5, [sp, #8]
   b4ca8:	9504      	str	r5, [sp, #16]
      { _M_create_storage(__n); }
   b4caa:	f7ff ff29 	bl	b4b00 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   b4cae:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
   b4cb2:	b131      	cbz	r1, b4cc2 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x86>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   b4cb4:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
	*__first = __tmp;
   b4cb8:	008a      	lsls	r2, r1, #2
   b4cba:	4629      	mov	r1, r5
   b4cbc:	f005 ff27 	bl	bab0e <memset>
   b4cc0:	4658      	mov	r0, fp
	  _M_finish = __x._M_finish;
   b4cc2:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
	  _M_start = __x._M_start;
   b4cc6:	9902      	ldr	r1, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4cc8:	6963      	ldr	r3, [r4, #20]
   b4cca:	9307      	str	r3, [sp, #28]
	  _M_finish = __x._M_finish;
   b4ccc:	e9c4 1003 	strd	r1, r0, [r4, #12]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4cd0:	9904      	ldr	r1, [sp, #16]
   b4cd2:	6161      	str	r1, [r4, #20]
	  _M_finish = __x._M_finish;
   b4cd4:	e9cd 5205 	strd	r5, r2, [sp, #20]
      }
   b4cd8:	a805      	add	r0, sp, #20
	  _M_start = __x._M_start;
   b4cda:	2500      	movs	r5, #0
	  _M_finish = __x._M_finish;
   b4cdc:	e9cd 5502 	strd	r5, r5, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4ce0:	9504      	str	r5, [sp, #16]
      }
   b4ce2:	f7ff fd05 	bl	b46f0 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4ce6:	a802      	add	r0, sp, #8
   b4ce8:	f7ff fd02 	bl	b46f0 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      distances = std::vector<float>(checkpoints.size(), 0);
      scalers = scalerInput;
   b4cec:	4639      	mov	r1, r7
   b4cee:	4650      	mov	r0, sl
   b4cf0:	f7ff ff6c 	bl	b4bcc <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4cf4:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
   b4cf8:	d2cf      	bcs.n	b4c9a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x5e>
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4cfa:	4630      	mov	r0, r6
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4cfc:	e9cd 5502 	strd	r5, r5, [sp, #8]
   b4d00:	9504      	str	r5, [sp, #16]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4d02:	f7ff fa3b 	bl	b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4d06:	00b2      	lsls	r2, r6, #2
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4d08:	4607      	mov	r7, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4d0a:	eb00 0a86 	add.w	sl, r0, r6, lsl #2
      if (__n <= 0)
   b4d0e:	b34e      	cbz	r6, b4d64 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x128>
	*__first = __tmp;
   b4d10:	4629      	mov	r1, r5
   b4d12:	f005 fefc 	bl	bab0e <memset>
   b4d16:	4653      	mov	r3, sl
	  _M_finish = __x._M_finish;
   b4d18:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b4d1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   b4d1e:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
	  _M_finish = __x._M_finish;
   b4d22:	e9cd 0105 	strd	r0, r1, [sp, #20]
   b4d26:	e9c4 7309 	strd	r7, r3, [r4, #36]	; 0x24
      }
   b4d2a:	a805      	add	r0, sp, #20
	  _M_start = __x._M_start;
   b4d2c:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
   b4d2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4d32:	9207      	str	r2, [sp, #28]
   b4d34:	9304      	str	r3, [sp, #16]
      }
   b4d36:	f7ff fce5 	bl	b4704 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4d3a:	a802      	add	r0, sp, #8
   b4d3c:	f7ff fce2 	bl	b4704 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
	this->_M_assign(__str);
   b4d40:	9912      	ldr	r1, [sp, #72]	; 0x48
   b4d42:	4648      	mov	r0, r9
   b4d44:	f004 ff22 	bl	b9b8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      outputs = std::vector<int>(outputSize, 0);
      name = nameInput;
      colors = colorInput;
   b4d48:	4640      	mov	r0, r8
   b4d4a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   b4d4c:	f7ff fabe 	bl	b42cc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
	return *(this->_M_impl._M_start + __n);
   b4d50:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b4d52:	681b      	ldr	r3, [r3, #0]
      lowerLoopBound = loopBoundInput[0];
   b4d54:	681a      	ldr	r2, [r3, #0]
      upperLoopBound = loopBoundInput[1];
   b4d56:	685b      	ldr	r3, [r3, #4]
      lowerLoopBound = loopBoundInput[0];
   b4d58:	65e2      	str	r2, [r4, #92]	; 0x5c
    }
   b4d5a:	4620      	mov	r0, r4
      upperLoopBound = loopBoundInput[1];
   b4d5c:	6623      	str	r3, [r4, #96]	; 0x60
    }
   b4d5e:	b009      	add	sp, #36	; 0x24
   b4d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4d64:	4603      	mov	r3, r0
   b4d66:	e7d7      	b.n	b4d18 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0xdc>
   b4d68:	000bcc42 	.word	0x000bcc42

000b4d6c <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   b4d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4d70:	ed2d 8b08 	vpush	{d8-d11}
   b4d74:	2801      	cmp	r0, #1
   b4d76:	b0f7      	sub	sp, #476	; 0x1dc
   b4d78:	f040 849a 	bne.w	b56b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x944>
  public:
    float lat;
    float lon;

    Checkpoint(float la, float lo){
      lat = la;
   b4d7c:	4bad      	ldr	r3, [pc, #692]	; (b5034 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2c8>)
   b4d7e:	935a      	str	r3, [sp, #360]	; 0x168
      lon = lo;
   b4d80:	4bad      	ldr	r3, [pc, #692]	; (b5038 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2cc>)
   b4d82:	935b      	str	r3, [sp, #364]	; 0x16c
      lat = la;
   b4d84:	4bad      	ldr	r3, [pc, #692]	; (b503c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2d0>)
   b4d86:	935c      	str	r3, [sp, #368]	; 0x170
      lon = lo;
   b4d88:	4bad      	ldr	r3, [pc, #692]	; (b5040 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2d4>)
   b4d8a:	935d      	str	r3, [sp, #372]	; 0x174
      lat = la;
   b4d8c:	4bad      	ldr	r3, [pc, #692]	; (b5044 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2d8>)
   b4d8e:	935e      	str	r3, [sp, #376]	; 0x178
      lon = lo;
   b4d90:	4bad      	ldr	r3, [pc, #692]	; (b5048 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2dc>)
   b4d92:	935f      	str	r3, [sp, #380]	; 0x17c
      lat = la;
   b4d94:	4bad      	ldr	r3, [pc, #692]	; (b504c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e0>)
   b4d96:	9360      	str	r3, [sp, #384]	; 0x180
      lon = lo;
   b4d98:	4bad      	ldr	r3, [pc, #692]	; (b5050 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e4>)
   b4d9a:	9361      	str	r3, [sp, #388]	; 0x184
      lat = la;
   b4d9c:	4bad      	ldr	r3, [pc, #692]	; (b5054 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e8>)
   b4d9e:	9362      	str	r3, [sp, #392]	; 0x188
      lon = lo;
   b4da0:	4bad      	ldr	r3, [pc, #692]	; (b5058 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2ec>)
   b4da2:	9363      	str	r3, [sp, #396]	; 0x18c
);
   b4da4:	ab5a      	add	r3, sp, #360	; 0x168
   b4da6:	ad4a      	add	r5, sp, #296	; 0x128
   b4da8:	933f      	str	r3, [sp, #252]	; 0xfc
   b4daa:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
   b4dae:	2305      	movs	r3, #5
   b4db0:	993f      	ldr	r1, [sp, #252]	; 0xfc
   b4db2:	9340      	str	r3, [sp, #256]	; 0x100
   b4db4:	2205      	movs	r2, #5
   b4db6:	464b      	mov	r3, r9
   b4db8:	4628      	mov	r0, r5
   b4dba:	f7ff fcdb 	bl	b4774 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b4dbe:	4ba7      	ldr	r3, [pc, #668]	; (b505c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f0>)
      lat = la;
   b4dc0:	eddf 8aa7 	vldr	s17, [pc, #668]	; b5060 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f4>
      lon = lo;
   b4dc4:	ed9f 8aa7 	vldr	s16, [pc, #668]	; b5064 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f8>
      lat = la;
   b4dc8:	eddf aaa7 	vldr	s21, [pc, #668]	; b5068 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2fc>
      lon = lo;
   b4dcc:	ed9f aaa7 	vldr	s20, [pc, #668]	; b506c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x300>
      lat = la;
   b4dd0:	eddf 9aa7 	vldr	s19, [pc, #668]	; b5070 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x304>
      lon = lo;
   b4dd4:	ed9f 9aa7 	vldr	s18, [pc, #668]	; b5074 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x308>
      lat = la;
   b4dd8:	eddf baa7 	vldr	s23, [pc, #668]	; b5078 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x30c>
      lon = lo;
   b4ddc:	ed9f baa7 	vldr	s22, [pc, #668]	; b507c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x310>
   b4de0:	461f      	mov	r7, r3
   b4de2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4de4:	ac4d      	add	r4, sp, #308	; 0x134
   b4de6:	f10d 08cc 	add.w	r8, sp, #204	; 0xcc
   b4dea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b4dee:	2204      	movs	r2, #4
   b4df0:	4643      	mov	r3, r8
   b4df2:	4621      	mov	r1, r4
   b4df4:	a847      	add	r0, sp, #284	; 0x11c
   b4df6:	923e      	str	r2, [sp, #248]	; 0xf8
   b4df8:	943d      	str	r4, [sp, #244]	; 0xf4
   b4dfa:	f7ff febd 	bl	b4b78 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
   b4dfe:	49a0      	ldr	r1, [pc, #640]	; (b5080 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>)
   b4e00:	a853      	add	r0, sp, #332	; 0x14c
   b4e02:	f7ff f981 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b4e06:	499f      	ldr	r1, [pc, #636]	; (b5084 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x318>)
   b4e08:	a866      	add	r0, sp, #408	; 0x198
   b4e0a:	f7ff f97d 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b4e0e:	499e      	ldr	r1, [pc, #632]	; (b5088 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x31c>)
   b4e10:	a86c      	add	r0, sp, #432	; 0x1b0
   b4e12:	f7ff f979 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b4e16:	aa66      	add	r2, sp, #408	; 0x198
   b4e18:	923b      	str	r2, [sp, #236]	; 0xec
   b4e1a:	f10d 0bdc 	add.w	fp, sp, #220	; 0xdc
   b4e1e:	ae2f      	add	r6, sp, #188	; 0xbc
   b4e20:	2202      	movs	r2, #2
   b4e22:	993b      	ldr	r1, [sp, #236]	; 0xec
   b4e24:	923c      	str	r2, [sp, #240]	; 0xf0
   b4e26:	ab31      	add	r3, sp, #196	; 0xc4
   b4e28:	a844      	add	r0, sp, #272	; 0x110
   b4e2a:	f04f 0a00 	mov.w	sl, #0
   b4e2e:	f7ff fcd5 	bl	b47dc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b4e32:	2202      	movs	r2, #2
   b4e34:	4633      	mov	r3, r6
   b4e36:	4659      	mov	r1, fp
   b4e38:	a841      	add	r0, sp, #260	; 0x104
   b4e3a:	f8cd b0e4 	str.w	fp, [sp, #228]	; 0xe4
   b4e3e:	923a      	str	r2, [sp, #232]	; 0xe8
   b4e40:	e9cd aa37 	strd	sl, sl, [sp, #220]	; 0xdc
   b4e44:	f7ff fe98 	bl	b4b78 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
Railway redLine = Railway(
   b4e48:	aa41      	add	r2, sp, #260	; 0x104
   b4e4a:	9202      	str	r2, [sp, #8]
   b4e4c:	aa44      	add	r2, sp, #272	; 0x110
   b4e4e:	9201      	str	r2, [sp, #4]
   b4e50:	aa53      	add	r2, sp, #332	; 0x14c
   b4e52:	4629      	mov	r1, r5
   b4e54:	2328      	movs	r3, #40	; 0x28
   b4e56:	9200      	str	r2, [sp, #0]
   b4e58:	488c      	ldr	r0, [pc, #560]	; (b508c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>)
   b4e5a:	aa47      	add	r2, sp, #284	; 0x11c
   b4e5c:	f7ff feee 	bl	b4c3c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b4e60:	a841      	add	r0, sp, #260	; 0x104
   b4e62:	f7ff fc4f 	bl	b4704 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b4e66:	a844      	add	r0, sp, #272	; 0x110
   b4e68:	f7ff fc56 	bl	b4718 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b4e6c:	a86c      	add	r0, sp, #432	; 0x1b0
   b4e6e:	f004 fe6f 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4e72:	a866      	add	r0, sp, #408	; 0x198
   b4e74:	f004 fe6c 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4e78:	a853      	add	r0, sp, #332	; 0x14c
   b4e7a:	f004 fe69 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4e7e:	a847      	add	r0, sp, #284	; 0x11c
   b4e80:	f7ff fc40 	bl	b4704 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4e84:	4628      	mov	r0, r5
   b4e86:	f7ff fc29 	bl	b46dc <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b4e8a:	4b81      	ldr	r3, [pc, #516]	; (b5090 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>)
   b4e8c:	9366      	str	r3, [sp, #408]	; 0x198
      lon = lo;
   b4e8e:	4b81      	ldr	r3, [pc, #516]	; (b5094 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>)
   b4e90:	9367      	str	r3, [sp, #412]	; 0x19c
      lat = la;
   b4e92:	4b81      	ldr	r3, [pc, #516]	; (b5098 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>)
   b4e94:	9368      	str	r3, [sp, #416]	; 0x1a0
      lon = lo;
   b4e96:	4b81      	ldr	r3, [pc, #516]	; (b509c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>)
   b4e98:	9369      	str	r3, [sp, #420]	; 0x1a4
      lat = la;
   b4e9a:	4b81      	ldr	r3, [pc, #516]	; (b50a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>)
   b4e9c:	936a      	str	r3, [sp, #424]	; 0x1a8
      lon = lo;
   b4e9e:	4b81      	ldr	r3, [pc, #516]	; (b50a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>)
   b4ea0:	936b      	str	r3, [sp, #428]	; 0x1ac
      lat = la;
   b4ea2:	4b81      	ldr	r3, [pc, #516]	; (b50a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>)
   b4ea4:	936c      	str	r3, [sp, #432]	; 0x1b0
      lon = lo;
   b4ea6:	4b81      	ldr	r3, [pc, #516]	; (b50ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>)
   b4ea8:	936d      	str	r3, [sp, #436]	; 0x1b4
      lat = la;
   b4eaa:	4b81      	ldr	r3, [pc, #516]	; (b50b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>)
   b4eac:	936e      	str	r3, [sp, #440]	; 0x1b8
);
   b4eae:	aa66      	add	r2, sp, #408	; 0x198
      lon = lo;
   b4eb0:	4b80      	ldr	r3, [pc, #512]	; (b50b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>)
   b4eb2:	9237      	str	r2, [sp, #220]	; 0xdc
   b4eb4:	936f      	str	r3, [sp, #444]	; 0x1bc
   b4eb6:	2206      	movs	r2, #6
      lat = la;
   b4eb8:	4b7f      	ldr	r3, [pc, #508]	; (b50b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>)
   b4eba:	9238      	str	r2, [sp, #224]	; 0xe0
   b4ebc:	9370      	str	r3, [sp, #448]	; 0x1c0
   b4ebe:	aa2d      	add	r2, sp, #180	; 0xb4
      lon = lo;
   b4ec0:	4b7e      	ldr	r3, [pc, #504]	; (b50bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>)
   b4ec2:	9371      	str	r3, [sp, #452]	; 0x1c4
   b4ec4:	4628      	mov	r0, r5
   b4ec6:	4613      	mov	r3, r2
   b4ec8:	e89b 0006 	ldmia.w	fp, {r1, r2}
   b4ecc:	f7ff fc52 	bl	b4774 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b4ed0:	f107 0c10 	add.w	ip, r7, #16
   b4ed4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4ed8:	4627      	mov	r7, r4
   b4eda:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b4edc:	2205      	movs	r2, #5
   b4ede:	f8dc 3000 	ldr.w	r3, [ip]
   b4ee2:	9435      	str	r4, [sp, #212]	; 0xd4
   b4ee4:	9236      	str	r2, [sp, #216]	; 0xd8
   b4ee6:	aa2b      	add	r2, sp, #172	; 0xac
   b4ee8:	603b      	str	r3, [r7, #0]
   b4eea:	a847      	add	r0, sp, #284	; 0x11c
   b4eec:	4613      	mov	r3, r2
   b4eee:	e899 0006 	ldmia.w	r9, {r1, r2}
   b4ef2:	9705      	str	r7, [sp, #20]
   b4ef4:	f7ff fe40 	bl	b4b78 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
   b4ef8:	4971      	ldr	r1, [pc, #452]	; (b50c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
   b4efa:	a853      	add	r0, sp, #332	; 0x14c
   b4efc:	f7ff f904 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b4f00:	4970      	ldr	r1, [pc, #448]	; (b50c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>)
   b4f02:	a85a      	add	r0, sp, #360	; 0x168
   b4f04:	f7ff f900 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b4f08:	496f      	ldr	r1, [pc, #444]	; (b50c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x35c>)
   b4f0a:	a860      	add	r0, sp, #384	; 0x180
   b4f0c:	f7ff f8fc 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b4f10:	aa5a      	add	r2, sp, #360	; 0x168
   b4f12:	9233      	str	r2, [sp, #204]	; 0xcc
   b4f14:	2202      	movs	r2, #2
   b4f16:	f10d 0ba4 	add.w	fp, sp, #164	; 0xa4
   b4f1a:	9234      	str	r2, [sp, #208]	; 0xd0
   b4f1c:	e898 0006 	ldmia.w	r8, {r1, r2}
   b4f20:	465b      	mov	r3, fp
   b4f22:	a844      	add	r0, sp, #272	; 0x110
   b4f24:	f7ff fc5a 	bl	b47dc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b4f28:	2202      	movs	r2, #2
   b4f2a:	f10d 089c 	add.w	r8, sp, #156	; 0x9c
   b4f2e:	9631      	str	r6, [sp, #196]	; 0xc4
   b4f30:	9232      	str	r2, [sp, #200]	; 0xc8
   b4f32:	aa31      	add	r2, sp, #196	; 0xc4
   b4f34:	ca06      	ldmia	r2, {r1, r2}
   b4f36:	4643      	mov	r3, r8
   b4f38:	a841      	add	r0, sp, #260	; 0x104
   b4f3a:	e9cd aa2f 	strd	sl, sl, [sp, #188]	; 0xbc
   b4f3e:	f7ff fe1b 	bl	b4b78 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
Railway blueLine = Railway(
   b4f42:	aa41      	add	r2, sp, #260	; 0x104
   b4f44:	9202      	str	r2, [sp, #8]
   b4f46:	aa44      	add	r2, sp, #272	; 0x110
   b4f48:	9201      	str	r2, [sp, #4]
   b4f4a:	aa53      	add	r2, sp, #332	; 0x14c
   b4f4c:	4629      	mov	r1, r5
   b4f4e:	233c      	movs	r3, #60	; 0x3c
   b4f50:	9200      	str	r2, [sp, #0]
   b4f52:	485e      	ldr	r0, [pc, #376]	; (b50cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x360>)
   b4f54:	aa47      	add	r2, sp, #284	; 0x11c
   b4f56:	f7ff fe71 	bl	b4c3c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b4f5a:	a841      	add	r0, sp, #260	; 0x104
   b4f5c:	f7ff fbd2 	bl	b4704 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b4f60:	a844      	add	r0, sp, #272	; 0x110
   b4f62:	f7ff fbd9 	bl	b4718 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b4f66:	a860      	add	r0, sp, #384	; 0x180
   b4f68:	f004 fdf2 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4f6c:	a85a      	add	r0, sp, #360	; 0x168
   b4f6e:	f004 fdef 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4f72:	a853      	add	r0, sp, #332	; 0x14c
   b4f74:	f004 fdec 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4f78:	a847      	add	r0, sp, #284	; 0x11c
   b4f7a:	f7ff fbc3 	bl	b4704 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4f7e:	4628      	mov	r0, r5
   b4f80:	f7ff fbac 	bl	b46dc <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b4f84:	4b52      	ldr	r3, [pc, #328]	; (b50d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x364>)
   b4f86:	9370      	str	r3, [sp, #448]	; 0x1c0
);
   b4f88:	aa66      	add	r2, sp, #408	; 0x198
      lon = lo;
   b4f8a:	4b52      	ldr	r3, [pc, #328]	; (b50d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x368>)
   b4f8c:	922f      	str	r2, [sp, #188]	; 0xbc
   b4f8e:	9371      	str	r3, [sp, #452]	; 0x1c4
   b4f90:	2207      	movs	r2, #7
      lat = la;
   b4f92:	4b51      	ldr	r3, [pc, #324]	; (b50d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
   b4f94:	9372      	str	r3, [sp, #456]	; 0x1c8
   b4f96:	f10d 0994 	add.w	r9, sp, #148	; 0x94
      lon = lo;
   b4f9a:	4b50      	ldr	r3, [pc, #320]	; (b50dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x370>)
   b4f9c:	9230      	str	r2, [sp, #192]	; 0xc0
   b4f9e:	e896 0006 	ldmia.w	r6, {r1, r2}
   b4fa2:	9373      	str	r3, [sp, #460]	; 0x1cc
   b4fa4:	4628      	mov	r0, r5
   b4fa6:	464b      	mov	r3, r9
      lat = la;
   b4fa8:	edcd 8a66 	vstr	s17, [sp, #408]	; 0x198
      lon = lo;
   b4fac:	ed8d 8a67 	vstr	s16, [sp, #412]	; 0x19c
      lat = la;
   b4fb0:	edcd aa68 	vstr	s21, [sp, #416]	; 0x1a0
      lon = lo;
   b4fb4:	ed8d aa69 	vstr	s20, [sp, #420]	; 0x1a4
      lat = la;
   b4fb8:	edcd 9a6a 	vstr	s19, [sp, #424]	; 0x1a8
      lon = lo;
   b4fbc:	ed8d 9a6b 	vstr	s18, [sp, #428]	; 0x1ac
      lat = la;
   b4fc0:	edcd ba6c 	vstr	s23, [sp, #432]	; 0x1b0
      lon = lo;
   b4fc4:	ed8d ba6d 	vstr	s22, [sp, #436]	; 0x1b4
      lat = la;
   b4fc8:	edcd 8a6e 	vstr	s17, [sp, #440]	; 0x1b8
      lon = lo;
   b4fcc:	ed8d 8a6f 	vstr	s16, [sp, #444]	; 0x1bc
   b4fd0:	f7ff fbd0 	bl	b4774 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b4fd4:	4b21      	ldr	r3, [pc, #132]	; (b505c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f0>)
   b4fd6:	aa53      	add	r2, sp, #332	; 0x14c
   b4fd8:	f103 0624 	add.w	r6, r3, #36	; 0x24
   b4fdc:	9204      	str	r2, [sp, #16]
   b4fde:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4fe0:	9f04      	ldr	r7, [sp, #16]
   b4fe2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b4fe4:	aa53      	add	r2, sp, #332	; 0x14c
   b4fe6:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4fea:	922d      	str	r2, [sp, #180]	; 0xb4
   b4fec:	2206      	movs	r2, #6
   b4fee:	922e      	str	r2, [sp, #184]	; 0xb8
   b4ff0:	aa23      	add	r2, sp, #140	; 0x8c
   b4ff2:	4613      	mov	r3, r2
   b4ff4:	aa2d      	add	r2, sp, #180	; 0xb4
   b4ff6:	e9c7 0100 	strd	r0, r1, [r7]
   b4ffa:	ca06      	ldmia	r2, {r1, r2}
   b4ffc:	a847      	add	r0, sp, #284	; 0x11c
   b4ffe:	9704      	str	r7, [sp, #16]
   b5000:	f7ff fdba 	bl	b4b78 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
   b5004:	4620      	mov	r0, r4
   b5006:	4936      	ldr	r1, [pc, #216]	; (b50e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>)
   b5008:	f7ff f87e 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b500c:	4935      	ldr	r1, [pc, #212]	; (b50e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x378>)
   b500e:	a85a      	add	r0, sp, #360	; 0x168
   b5010:	f7ff f87a 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5014:	4934      	ldr	r1, [pc, #208]	; (b50e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x37c>)
   b5016:	a860      	add	r0, sp, #384	; 0x180
   b5018:	f7ff f876 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b501c:	aa5a      	add	r2, sp, #360	; 0x168
   b501e:	922b      	str	r2, [sp, #172]	; 0xac
   b5020:	2202      	movs	r2, #2
   b5022:	922c      	str	r2, [sp, #176]	; 0xb0
   b5024:	af21      	add	r7, sp, #132	; 0x84
   b5026:	aa2b      	add	r2, sp, #172	; 0xac
   b5028:	ca06      	ldmia	r2, {r1, r2}
   b502a:	463b      	mov	r3, r7
   b502c:	a844      	add	r0, sp, #272	; 0x110
   b502e:	f7ff fbd5 	bl	b47dc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5032:	e05b      	b.n	b50ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x380>
   b5034:	42276980 	.word	0x42276980
   b5038:	c2af431e 	.word	0xc2af431e
   b503c:	42279dcc 	.word	0x42279dcc
   b5040:	c2af4202 	.word	0xc2af4202
   b5044:	42279d95 	.word	0x42279d95
   b5048:	c2af476d 	.word	0xc2af476d
   b504c:	4227a7a9 	.word	0x4227a7a9
   b5050:	c2af4e05 	.word	0xc2af4e05
   b5054:	4227b382 	.word	0x4227b382
   b5058:	c2af4e44 	.word	0xc2af4e44
   b505c:	000bcf54 	.word	0x000bcf54
   b5060:	42278b1a 	.word	0x42278b1a
   b5064:	c2af449a 	.word	0xc2af449a
   b5068:	42278b2f 	.word	0x42278b2f
   b506c:	c2af4095 	.word	0xc2af4095
   b5070:	422781d8 	.word	0x422781d8
   b5074:	c2af4044 	.word	0xc2af4044
   b5078:	42278216 	.word	0x42278216
   b507c:	c2af44c1 	.word	0xc2af44c1
   b5080:	000bcd01 	.word	0x000bcd01
   b5084:	000bcd1e 	.word	0x000bcd1e
   b5088:	000bcd25 	.word	0x000bcd25
   b508c:	2003e5d4 	.word	0x2003e5d4
   b5090:	42277ec5 	.word	0x42277ec5
   b5094:	c2af738a 	.word	0xc2af738a
   b5098:	4227808d 	.word	0x4227808d
   b509c:	c2af482f 	.word	0xc2af482f
   b50a0:	42278158 	.word	0x42278158
   b50a4:	c2af41a5 	.word	0xc2af41a5
   b50a8:	42278b4c 	.word	0x42278b4c
   b50ac:	c2af4277 	.word	0xc2af4277
   b50b0:	42278af9 	.word	0x42278af9
   b50b4:	c2af479e 	.word	0xc2af479e
   b50b8:	4227aa25 	.word	0x4227aa25
   b50bc:	c2af5fee 	.word	0xc2af5fee
   b50c0:	000bcd0d 	.word	0x000bcd0d
   b50c4:	000bcd2c 	.word	0x000bcd2c
   b50c8:	000bcd33 	.word	0x000bcd33
   b50cc:	200322d0 	.word	0x200322d0
   b50d0:	4227a437 	.word	0x4227a437
   b50d4:	c2af4659 	.word	0xc2af4659
   b50d8:	4227a49e 	.word	0x4227a49e
   b50dc:	c2af4bd0 	.word	0xc2af4bd0
   b50e0:	000bcd3a 	.word	0x000bcd3a
   b50e4:	000bcd3e 	.word	0x000bcd3e
   b50e8:	000bcd45 	.word	0x000bcd45
   b50ec:	2204      	movs	r2, #4
   b50ee:	e9cd 2828 	strd	r2, r8, [sp, #160]	; 0xa0
   b50f2:	2202      	movs	r2, #2
   b50f4:	ae1f      	add	r6, sp, #124	; 0x7c
   b50f6:	922a      	str	r2, [sp, #168]	; 0xa8
   b50f8:	e89b 0006 	ldmia.w	fp, {r1, r2}
   b50fc:	4633      	mov	r3, r6
   b50fe:	a841      	add	r0, sp, #260	; 0x104
   b5100:	f8cd a09c 	str.w	sl, [sp, #156]	; 0x9c
   b5104:	f7ff fd38 	bl	b4b78 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
Railway brownLine = Railway(
   b5108:	aa41      	add	r2, sp, #260	; 0x104
   b510a:	9202      	str	r2, [sp, #8]
   b510c:	aa44      	add	r2, sp, #272	; 0x110
   b510e:	4629      	mov	r1, r5
   b5110:	2328      	movs	r3, #40	; 0x28
   b5112:	e9cd 4200 	strd	r4, r2, [sp]
   b5116:	48bc      	ldr	r0, [pc, #752]	; (b5408 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x69c>)
   b5118:	aa47      	add	r2, sp, #284	; 0x11c
   b511a:	f7ff fd8f 	bl	b4c3c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b511e:	a841      	add	r0, sp, #260	; 0x104
   b5120:	f7ff faf0 	bl	b4704 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5124:	a844      	add	r0, sp, #272	; 0x110
   b5126:	f7ff faf7 	bl	b4718 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b512a:	a860      	add	r0, sp, #384	; 0x180
   b512c:	f004 fd10 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5130:	a85a      	add	r0, sp, #360	; 0x168
   b5132:	f004 fd0d 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5136:	4620      	mov	r0, r4
   b5138:	f004 fd0a 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b513c:	a847      	add	r0, sp, #284	; 0x11c
   b513e:	f7ff fae1 	bl	b4704 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5142:	4628      	mov	r0, r5
   b5144:	f7ff faca 	bl	b46dc <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5148:	4bb0      	ldr	r3, [pc, #704]	; (b540c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a0>)
   b514a:	935a      	str	r3, [sp, #360]	; 0x168
);
   b514c:	aa5a      	add	r2, sp, #360	; 0x168
      lon = lo;
   b514e:	4bb0      	ldr	r3, [pc, #704]	; (b5410 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a4>)
   b5150:	9227      	str	r2, [sp, #156]	; 0x9c
   b5152:	935b      	str	r3, [sp, #364]	; 0x16c
   b5154:	2203      	movs	r2, #3
      lat = la;
   b5156:	4baf      	ldr	r3, [pc, #700]	; (b5414 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a8>)
   b5158:	935e      	str	r3, [sp, #376]	; 0x178
   b515a:	f10d 0b74 	add.w	fp, sp, #116	; 0x74
      lon = lo;
   b515e:	4bae      	ldr	r3, [pc, #696]	; (b5418 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ac>)
   b5160:	9228      	str	r2, [sp, #160]	; 0xa0
   b5162:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5166:	935f      	str	r3, [sp, #380]	; 0x17c
   b5168:	4620      	mov	r0, r4
   b516a:	465b      	mov	r3, fp
      lat = la;
   b516c:	edcd aa5c 	vstr	s21, [sp, #368]	; 0x170
      lon = lo;
   b5170:	ed8d aa5d 	vstr	s20, [sp, #372]	; 0x174
   b5174:	f7ff fafe 	bl	b4774 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5178:	2217      	movs	r2, #23
   b517a:	2311      	movs	r3, #17
   b517c:	e9cd 2341 	strd	r2, r3, [sp, #260]	; 0x104
   b5180:	aa41      	add	r2, sp, #260	; 0x104
   b5182:	9225      	str	r2, [sp, #148]	; 0x94
   b5184:	2202      	movs	r2, #2
   b5186:	9226      	str	r2, [sp, #152]	; 0x98
   b5188:	aa1b      	add	r2, sp, #108	; 0x6c
   b518a:	4613      	mov	r3, r2
   b518c:	4628      	mov	r0, r5
   b518e:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5192:	f7ff fcf1 	bl	b4b78 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
   b5196:	49a1      	ldr	r1, [pc, #644]	; (b541c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b0>)
   b5198:	a853      	add	r0, sp, #332	; 0x14c
   b519a:	f7fe ffb5 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b519e:	49a0      	ldr	r1, [pc, #640]	; (b5420 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b4>)
   b51a0:	a866      	add	r0, sp, #408	; 0x198
   b51a2:	f7fe ffb1 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b51a6:	499f      	ldr	r1, [pc, #636]	; (b5424 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b8>)
   b51a8:	a86c      	add	r0, sp, #432	; 0x1b0
   b51aa:	f7fe ffad 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b51ae:	aa66      	add	r2, sp, #408	; 0x198
   b51b0:	9223      	str	r2, [sp, #140]	; 0x8c
   b51b2:	2202      	movs	r2, #2
   b51b4:	9224      	str	r2, [sp, #144]	; 0x90
   b51b6:	f10d 0864 	add.w	r8, sp, #100	; 0x64
   b51ba:	aa23      	add	r2, sp, #140	; 0x8c
   b51bc:	ca06      	ldmia	r2, {r1, r2}
   b51be:	4643      	mov	r3, r8
   b51c0:	a847      	add	r0, sp, #284	; 0x11c
   b51c2:	f7ff fb0b 	bl	b47dc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b51c6:	2202      	movs	r2, #2
   b51c8:	f10d 095c 	add.w	r9, sp, #92	; 0x5c
   b51cc:	9621      	str	r6, [sp, #132]	; 0x84
   b51ce:	9222      	str	r2, [sp, #136]	; 0x88
   b51d0:	e897 0006 	ldmia.w	r7, {r1, r2}
   b51d4:	464b      	mov	r3, r9
   b51d6:	a844      	add	r0, sp, #272	; 0x110
   b51d8:	e9cd aa1f 	strd	sl, sl, [sp, #124]	; 0x7c
   b51dc:	f7ff fccc 	bl	b4b78 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
Railway greenLine = Railway(
   b51e0:	aa44      	add	r2, sp, #272	; 0x110
   b51e2:	9202      	str	r2, [sp, #8]
   b51e4:	aa47      	add	r2, sp, #284	; 0x11c
   b51e6:	9201      	str	r2, [sp, #4]
   b51e8:	aa53      	add	r2, sp, #332	; 0x14c
   b51ea:	4621      	mov	r1, r4
   b51ec:	2328      	movs	r3, #40	; 0x28
   b51ee:	9200      	str	r2, [sp, #0]
   b51f0:	488d      	ldr	r0, [pc, #564]	; (b5428 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6bc>)
   b51f2:	462a      	mov	r2, r5
   b51f4:	f7ff fd22 	bl	b4c3c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b51f8:	a844      	add	r0, sp, #272	; 0x110
   b51fa:	f7ff fa83 	bl	b4704 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b51fe:	a847      	add	r0, sp, #284	; 0x11c
   b5200:	f7ff fa8a 	bl	b4718 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5204:	a86c      	add	r0, sp, #432	; 0x1b0
   b5206:	f004 fca3 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b520a:	a866      	add	r0, sp, #408	; 0x198
   b520c:	f004 fca0 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5210:	a853      	add	r0, sp, #332	; 0x14c
   b5212:	f004 fc9d 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5216:	4628      	mov	r0, r5
   b5218:	f7ff fa74 	bl	b4704 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b521c:	4620      	mov	r0, r4
   b521e:	f7ff fa5d 	bl	b46dc <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5222:	4b82      	ldr	r3, [pc, #520]	; (b542c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c0>)
   b5224:	9366      	str	r3, [sp, #408]	; 0x198
);
   b5226:	aa66      	add	r2, sp, #408	; 0x198
      lon = lo;
   b5228:	4b81      	ldr	r3, [pc, #516]	; (b5430 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c4>)
   b522a:	921f      	str	r2, [sp, #124]	; 0x7c
   b522c:	9367      	str	r3, [sp, #412]	; 0x19c
   b522e:	2207      	movs	r2, #7
      lat = la;
   b5230:	4b80      	ldr	r3, [pc, #512]	; (b5434 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c8>)
   b5232:	9368      	str	r3, [sp, #416]	; 0x1a0
   b5234:	af15      	add	r7, sp, #84	; 0x54
      lon = lo;
   b5236:	4b80      	ldr	r3, [pc, #512]	; (b5438 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6cc>)
   b5238:	9220      	str	r2, [sp, #128]	; 0x80
   b523a:	e896 0006 	ldmia.w	r6, {r1, r2}
   b523e:	9369      	str	r3, [sp, #420]	; 0x1a4
   b5240:	4628      	mov	r0, r5
   b5242:	463b      	mov	r3, r7
      lat = la;
   b5244:	edcd 9a6a 	vstr	s19, [sp, #424]	; 0x1a8
      lon = lo;
   b5248:	ed8d 9a6b 	vstr	s18, [sp, #428]	; 0x1ac
      lat = la;
   b524c:	edcd aa6c 	vstr	s21, [sp, #432]	; 0x1b0
      lon = lo;
   b5250:	ed8d aa6d 	vstr	s20, [sp, #436]	; 0x1b4
      lat = la;
   b5254:	edcd 8a6e 	vstr	s17, [sp, #440]	; 0x1b8
      lon = lo;
   b5258:	ed8d 8a6f 	vstr	s16, [sp, #444]	; 0x1bc
      lat = la;
   b525c:	edcd ba70 	vstr	s23, [sp, #448]	; 0x1c0
      lon = lo;
   b5260:	ed8d ba71 	vstr	s22, [sp, #452]	; 0x1c4
      lat = la;
   b5264:	edcd 9a72 	vstr	s19, [sp, #456]	; 0x1c8
      lon = lo;
   b5268:	ed8d 9a73 	vstr	s18, [sp, #460]	; 0x1cc
   b526c:	f7ff fa82 	bl	b4774 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5270:	4b72      	ldr	r3, [pc, #456]	; (b543c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d0>)
   b5272:	f103 063c 	add.w	r6, r3, #60	; 0x3c
   b5276:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5278:	f50d 7ca6 	add.w	ip, sp, #332	; 0x14c
   b527c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5280:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5284:	9a04      	ldr	r2, [sp, #16]
   b5286:	e882 0003 	stmia.w	r2, {r0, r1}
   b528a:	aa53      	add	r2, sp, #332	; 0x14c
   b528c:	921d      	str	r2, [sp, #116]	; 0x74
   b528e:	2206      	movs	r2, #6
   b5290:	ae13      	add	r6, sp, #76	; 0x4c
   b5292:	921e      	str	r2, [sp, #120]	; 0x78
   b5294:	e89b 0006 	ldmia.w	fp, {r1, r2}
   b5298:	4633      	mov	r3, r6
   b529a:	a847      	add	r0, sp, #284	; 0x11c
   b529c:	f7ff fc6c 	bl	b4b78 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
   b52a0:	4620      	mov	r0, r4
   b52a2:	4967      	ldr	r1, [pc, #412]	; (b5440 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d4>)
   b52a4:	f7fe ff30 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b52a8:	4966      	ldr	r1, [pc, #408]	; (b5444 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d8>)
   b52aa:	a85a      	add	r0, sp, #360	; 0x168
   b52ac:	f7fe ff2c 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b52b0:	4965      	ldr	r1, [pc, #404]	; (b5448 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6dc>)
   b52b2:	a860      	add	r0, sp, #384	; 0x180
   b52b4:	f7fe ff28 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b52b8:	aa5a      	add	r2, sp, #360	; 0x168
   b52ba:	921b      	str	r2, [sp, #108]	; 0x6c
   b52bc:	2202      	movs	r2, #2
   b52be:	921c      	str	r2, [sp, #112]	; 0x70
   b52c0:	f10d 0b44 	add.w	fp, sp, #68	; 0x44
   b52c4:	aa1b      	add	r2, sp, #108	; 0x6c
   b52c6:	ca06      	ldmia	r2, {r1, r2}
   b52c8:	465b      	mov	r3, fp
   b52ca:	a844      	add	r0, sp, #272	; 0x110
   b52cc:	f7ff fa86 	bl	b47dc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b52d0:	2102      	movs	r1, #2
   b52d2:	2206      	movs	r2, #6
   b52d4:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
   b52d8:	2202      	movs	r2, #2
   b52da:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
   b52de:	921a      	str	r2, [sp, #104]	; 0x68
   b52e0:	aa0f      	add	r2, sp, #60	; 0x3c
   b52e2:	4613      	mov	r3, r2
   b52e4:	a841      	add	r0, sp, #260	; 0x104
   b52e6:	e898 0006 	ldmia.w	r8, {r1, r2}
   b52ea:	f7ff fc45 	bl	b4b78 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
Railway orangeLine = Railway(
   b52ee:	aa41      	add	r2, sp, #260	; 0x104
   b52f0:	9202      	str	r2, [sp, #8]
   b52f2:	aa44      	add	r2, sp, #272	; 0x110
   b52f4:	2328      	movs	r3, #40	; 0x28
   b52f6:	4629      	mov	r1, r5
   b52f8:	e9cd 4200 	strd	r4, r2, [sp]
   b52fc:	4853      	ldr	r0, [pc, #332]	; (b544c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e0>)
   b52fe:	aa47      	add	r2, sp, #284	; 0x11c
   b5300:	f7ff fc9c 	bl	b4c3c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5304:	a841      	add	r0, sp, #260	; 0x104
   b5306:	f7ff f9fd 	bl	b4704 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b530a:	a844      	add	r0, sp, #272	; 0x110
   b530c:	f7ff fa04 	bl	b4718 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5310:	a860      	add	r0, sp, #384	; 0x180
   b5312:	f004 fc1d 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5316:	a85a      	add	r0, sp, #360	; 0x168
   b5318:	f004 fc1a 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b531c:	4620      	mov	r0, r4
   b531e:	f004 fc17 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5322:	a847      	add	r0, sp, #284	; 0x11c
   b5324:	f7ff f9ee 	bl	b4704 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5328:	4628      	mov	r0, r5
   b532a:	f7ff f9d7 	bl	b46dc <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b532e:	4948      	ldr	r1, [pc, #288]	; (b5450 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e4>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5330:	f8cd a154 	str.w	sl, [sp, #340]	; 0x154
   b5334:	a85a      	add	r0, sp, #360	; 0x168
   b5336:	e9cd aa53 	strd	sl, sl, [sp, #332]	; 0x14c
   b533a:	e9cd aa4d 	strd	sl, sl, [sp, #308]	; 0x134
   b533e:	f8cd a13c 	str.w	sl, [sp, #316]	; 0x13c
   b5342:	f7fe fee1 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5346:	4943      	ldr	r1, [pc, #268]	; (b5454 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e8>)
   b5348:	a866      	add	r0, sp, #408	; 0x198
   b534a:	f7fe fedd 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b534e:	4942      	ldr	r1, [pc, #264]	; (b5458 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ec>)
   b5350:	a86c      	add	r0, sp, #432	; 0x1b0
   b5352:	f7fe fed9 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5356:	aa66      	add	r2, sp, #408	; 0x198
   b5358:	9217      	str	r2, [sp, #92]	; 0x5c
   b535a:	2202      	movs	r2, #2
   b535c:	9218      	str	r2, [sp, #96]	; 0x60
   b535e:	aa41      	add	r2, sp, #260	; 0x104
   b5360:	4613      	mov	r3, r2
   b5362:	4628      	mov	r0, r5
   b5364:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5368:	f7ff fa38 	bl	b47dc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b536c:	aa44      	add	r2, sp, #272	; 0x110
   b536e:	9215      	str	r2, [sp, #84]	; 0x54
   b5370:	2202      	movs	r2, #2
   b5372:	9216      	str	r2, [sp, #88]	; 0x58
   b5374:	e897 0006 	ldmia.w	r7, {r1, r2}
   b5378:	4633      	mov	r3, r6
   b537a:	a847      	add	r0, sp, #284	; 0x11c
   b537c:	e9cd aa44 	strd	sl, sl, [sp, #272]	; 0x110
   b5380:	f7ff fbfa 	bl	b4b78 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
Railway purpleLine = Railway(
   b5384:	aa47      	add	r2, sp, #284	; 0x11c
   b5386:	e9cd 5201 	strd	r5, r2, [sp, #4]
   b538a:	aa5a      	add	r2, sp, #360	; 0x168
   b538c:	2328      	movs	r3, #40	; 0x28
   b538e:	a953      	add	r1, sp, #332	; 0x14c
   b5390:	9200      	str	r2, [sp, #0]
   b5392:	4832      	ldr	r0, [pc, #200]	; (b545c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f0>)
   b5394:	4622      	mov	r2, r4
   b5396:	f7ff fc51 	bl	b4c3c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b539a:	a847      	add	r0, sp, #284	; 0x11c
   b539c:	f7ff f9b2 	bl	b4704 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b53a0:	4628      	mov	r0, r5
   b53a2:	f7ff f9b9 	bl	b4718 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b53a6:	a86c      	add	r0, sp, #432	; 0x1b0
   b53a8:	f004 fbd2 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b53ac:	a866      	add	r0, sp, #408	; 0x198
   b53ae:	f004 fbcf 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b53b2:	a85a      	add	r0, sp, #360	; 0x168
   b53b4:	f004 fbcc 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b53b8:	4620      	mov	r0, r4
   b53ba:	f7ff f9a3 	bl	b4704 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b53be:	a853      	add	r0, sp, #332	; 0x14c
   b53c0:	f7ff f98c 	bl	b46dc <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b53c4:	4b26      	ldr	r3, [pc, #152]	; (b5460 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f4>)
   b53c6:	9366      	str	r3, [sp, #408]	; 0x198
      lon = lo;
   b53c8:	4b26      	ldr	r3, [pc, #152]	; (b5464 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f8>)
   b53ca:	9367      	str	r3, [sp, #412]	; 0x19c
      lat = la;
   b53cc:	4b26      	ldr	r3, [pc, #152]	; (b5468 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6fc>)
   b53ce:	9368      	str	r3, [sp, #416]	; 0x1a0
      lon = lo;
   b53d0:	4b26      	ldr	r3, [pc, #152]	; (b546c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x700>)
   b53d2:	9369      	str	r3, [sp, #420]	; 0x1a4
      lat = la;
   b53d4:	4b26      	ldr	r3, [pc, #152]	; (b5470 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x704>)
   b53d6:	936a      	str	r3, [sp, #424]	; 0x1a8
      lon = lo;
   b53d8:	4b26      	ldr	r3, [pc, #152]	; (b5474 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x708>)
   b53da:	936b      	str	r3, [sp, #428]	; 0x1ac
);
   b53dc:	aa66      	add	r2, sp, #408	; 0x198
   b53de:	2308      	movs	r3, #8
   b53e0:	9314      	str	r3, [sp, #80]	; 0x50
   b53e2:	9213      	str	r2, [sp, #76]	; 0x4c
   b53e4:	e896 0006 	ldmia.w	r6, {r1, r2}
   b53e8:	ab0a      	add	r3, sp, #40	; 0x28
   b53ea:	4628      	mov	r0, r5
      lat = la;
   b53ec:	edcd 8a6c 	vstr	s17, [sp, #432]	; 0x1b0
      lon = lo;
   b53f0:	ed8d 8a6d 	vstr	s16, [sp, #436]	; 0x1b4
      lat = la;
   b53f4:	edcd aa6e 	vstr	s21, [sp, #440]	; 0x1b8
      lon = lo;
   b53f8:	ed8d aa6f 	vstr	s20, [sp, #444]	; 0x1bc
      lat = la;
   b53fc:	edcd 9a70 	vstr	s19, [sp, #448]	; 0x1c0
      lon = lo;
   b5400:	ed8d 9a71 	vstr	s18, [sp, #452]	; 0x1c4
   b5404:	e038      	b.n	b5478 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x70c>
   b5406:	bf00      	nop
   b5408:	20032334 	.word	0x20032334
   b540c:	42276997 	.word	0x42276997
   b5410:	c2af40b8 	.word	0xc2af40b8
   b5414:	42278971 	.word	0x42278971
   b5418:	c2af6479 	.word	0xc2af6479
   b541c:	000bd2d1 	.word	0x000bd2d1
   b5420:	000bcd4c 	.word	0x000bcd4c
   b5424:	000bcd53 	.word	0x000bcd53
   b5428:	20032398 	.word	0x20032398
   b542c:	4227631a 	.word	0x4227631a
   b5430:	c2af4bd2 	.word	0xc2af4bd2
   b5434:	42276ec4 	.word	0x42276ec4
   b5438:	c2af4115 	.word	0xc2af4115
   b543c:	000bcf54 	.word	0x000bcf54
   b5440:	000bcd5a 	.word	0x000bcd5a
   b5444:	000bcd5e 	.word	0x000bcd5e
   b5448:	000bcd65 	.word	0x000bcd65
   b544c:	20034c18 	.word	0x20034c18
   b5450:	000bd28e 	.word	0x000bd28e
   b5454:	000bcd6c 	.word	0x000bcd6c
   b5458:	000bcd73 	.word	0x000bcd73
   b545c:	2003e564 	.word	0x2003e564
   b5460:	42276a76 	.word	0x42276a76
   b5464:	c2af692b 	.word	0xc2af692b
   b5468:	42276b5f 	.word	0x42276b5f
   b546c:	c2af56cd 	.word	0xc2af56cd
   b5470:	42278a2d 	.word	0x42278a2d
   b5474:	c2af56d8 	.word	0xc2af56d8
      lat = la;
   b5478:	edcd ba72 	vstr	s23, [sp, #456]	; 0x1c8
      lon = lo;
   b547c:	ed8d ba73 	vstr	s22, [sp, #460]	; 0x1cc
      lat = la;
   b5480:	edcd 8a74 	vstr	s17, [sp, #464]	; 0x1d0
      lon = lo;
   b5484:	ed8d 8a75 	vstr	s16, [sp, #468]	; 0x1d4
   b5488:	f7ff f974 	bl	b4774 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b548c:	4ba2      	ldr	r3, [pc, #648]	; (b5718 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9ac>)
   b548e:	f103 0654 	add.w	r6, r3, #84	; 0x54
   b5492:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5494:	af53      	add	r7, sp, #332	; 0x14c
   b5496:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b5498:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   b549c:	9b04      	ldr	r3, [sp, #16]
   b549e:	4f9f      	ldr	r7, [pc, #636]	; (b571c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9b0>)
   b54a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b54a4:	ab53      	add	r3, sp, #332	; 0x14c
   b54a6:	9311      	str	r3, [sp, #68]	; 0x44
   b54a8:	2307      	movs	r3, #7
   b54aa:	9312      	str	r3, [sp, #72]	; 0x48
   b54ac:	e89b 0006 	ldmia.w	fp, {r1, r2}
   b54b0:	ab09      	add	r3, sp, #36	; 0x24
   b54b2:	a847      	add	r0, sp, #284	; 0x11c
   b54b4:	f7ff fb60 	bl	b4b78 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
   b54b8:	4620      	mov	r0, r4
   b54ba:	4999      	ldr	r1, [pc, #612]	; (b5720 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9b4>)
   b54bc:	f7fe fe24 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b54c0:	4998      	ldr	r1, [pc, #608]	; (b5724 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9b8>)
   b54c2:	a85a      	add	r0, sp, #360	; 0x168
   b54c4:	f7fe fe20 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b54c8:	4997      	ldr	r1, [pc, #604]	; (b5728 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9bc>)
   b54ca:	a860      	add	r0, sp, #384	; 0x180
   b54cc:	f7fe fe1c 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b54d0:	ab5a      	add	r3, sp, #360	; 0x168
   b54d2:	930f      	str	r3, [sp, #60]	; 0x3c
   b54d4:	2302      	movs	r3, #2
   b54d6:	9310      	str	r3, [sp, #64]	; 0x40
   b54d8:	aa0f      	add	r2, sp, #60	; 0x3c
   b54da:	ca06      	ldmia	r2, {r1, r2}
   b54dc:	ab08      	add	r3, sp, #32
   b54de:	a844      	add	r0, sp, #272	; 0x110
   b54e0:	f7ff f97c 	bl	b47dc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b54e4:	ab0b      	add	r3, sp, #44	; 0x2c
   b54e6:	930d      	str	r3, [sp, #52]	; 0x34
   b54e8:	2003      	movs	r0, #3
   b54ea:	2207      	movs	r2, #7
   b54ec:	2302      	movs	r3, #2
   b54ee:	e9cd 020b 	strd	r0, r2, [sp, #44]	; 0x2c
   b54f2:	930e      	str	r3, [sp, #56]	; 0x38
   b54f4:	aa0d      	add	r2, sp, #52	; 0x34
   b54f6:	ca06      	ldmia	r2, {r1, r2}
   b54f8:	ab07      	add	r3, sp, #28
   b54fa:	a841      	add	r0, sp, #260	; 0x104
   b54fc:	f7ff fb3c 	bl	b4b78 <_ZNSt6vectorIiSaIiEEC1ESt16initializer_listIiERKS0_>
Railway pinkLine = Railway(
   b5500:	ab41      	add	r3, sp, #260	; 0x104
   b5502:	9302      	str	r3, [sp, #8]
   b5504:	ab44      	add	r3, sp, #272	; 0x110
   b5506:	aa47      	add	r2, sp, #284	; 0x11c
   b5508:	4629      	mov	r1, r5
   b550a:	e9cd 4300 	strd	r4, r3, [sp]
   b550e:	4887      	ldr	r0, [pc, #540]	; (b572c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9c0>)
   b5510:	2341      	movs	r3, #65	; 0x41
   b5512:	f7ff fb93 	bl	b4c3c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEEiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5516:	a841      	add	r0, sp, #260	; 0x104
   b5518:	f7ff f8f4 	bl	b4704 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b551c:	a844      	add	r0, sp, #272	; 0x110
   b551e:	f7ff f8fb 	bl	b4718 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5522:	a860      	add	r0, sp, #384	; 0x180
   b5524:	f004 fb14 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5528:	a85a      	add	r0, sp, #360	; 0x168
   b552a:	f004 fb11 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b552e:	4620      	mov	r0, r4
   b5530:	f004 fb0e 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5534:	a847      	add	r0, sp, #284	; 0x11c
   b5536:	f7ff f8e5 	bl	b4704 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b553a:	4628      	mov	r0, r5
   b553c:	f7ff f8ce 	bl	b46dc <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5540:	4b7b      	ldr	r3, [pc, #492]	; (b5730 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9c4>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b5542:	497c      	ldr	r1, [pc, #496]	; (b5734 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9c8>)
   b5544:	f8c3 a008 	str.w	sl, [r3, #8]
   b5548:	e9c3 aa00 	strd	sl, sl, [r3]
   b554c:	4873      	ldr	r0, [pc, #460]	; (b571c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9b0>)
   b554e:	4d7a      	ldr	r5, [pc, #488]	; (b5738 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9cc>)
   b5550:	f002 f92c 	bl	b77ac <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b5554:	4979      	ldr	r1, [pc, #484]	; (b573c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9d0>)
   b5556:	487a      	ldr	r0, [pc, #488]	; (b5740 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9d4>)
   b5558:	f002 f928 	bl	b77ac <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b555c:	4979      	ldr	r1, [pc, #484]	; (b5744 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9d8>)
   b555e:	4876      	ldr	r0, [pc, #472]	; (b5738 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9cc>)
   b5560:	f002 f924 	bl	b77ac <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b5564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5566:	4626      	mov	r6, r4
   b5568:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b556a:	9b05      	ldr	r3, [sp, #20]
   b556c:	f8d5 c000 	ldr.w	ip, [r5]
   b5570:	f8c3 c000 	str.w	ip, [r3]
   b5574:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5576:	ad53      	add	r5, sp, #332	; 0x14c
   b5578:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b557a:	46b8      	mov	r8, r7
   b557c:	9b04      	ldr	r3, [sp, #16]
   b557e:	f858 9910 	ldr.w	r9, [r8], #-16
   b5582:	f8c3 9000 	str.w	r9, [r3]
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b5586:	4625      	mov	r5, r4
   b5588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b558a:	ae5a      	add	r6, sp, #360	; 0x168
   b558c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b558e:	f8df e20c 	ldr.w	lr, [pc, #524]	; b579c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa30>
      constexpr __shared_count() noexcept : _M_pi(0)
   b5592:	e9ce aa00 	strd	sl, sl, [lr]
   b5596:	f8c6 c000 	str.w	ip, [r6]
        BleUuid sUuid(svcUuid);
   b559a:	f50d 7ca6 	add.w	ip, sp, #332	; 0x14c
   b559e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b55a2:	ad66      	add	r5, sp, #408	; 0x198
   b55a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b55a6:	ab66      	add	r3, sp, #408	; 0x198
        BleUuid sUuid(svcUuid);
   b55a8:	f8c5 9000 	str.w	r9, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b55ac:	4670      	mov	r0, lr
   b55ae:	4966      	ldr	r1, [pc, #408]	; (b5748 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9dc>)
   b55b0:	9300      	str	r3, [sp, #0]
   b55b2:	f04f 0210 	mov.w	r2, #16
   b55b6:	ab5a      	add	r3, sp, #360	; 0x168
   b55b8:	e9cd aa01 	strd	sl, sl, [sp, #4]
   b55bc:	f002 fe60 	bl	b8280 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b55c0:	f8df c17c 	ldr.w	ip, [pc, #380]	; b5740 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9d4>
   b55c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b55c8:	46a6      	mov	lr, r4
   b55ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b55ce:	9b05      	ldr	r3, [sp, #20]
   b55d0:	f8dc c000 	ldr.w	ip, [ip]
   b55d4:	f8c3 c000 	str.w	ip, [r3]
   b55d8:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b55dc:	f50d 7ea6 	add.w	lr, sp, #332	; 0x14c
   b55e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b55e4:	9b04      	ldr	r3, [sp, #16]
   b55e6:	f8d7 e000 	ldr.w	lr, [r7]
   b55ea:	f8c3 e000 	str.w	lr, [r3]
        BleUuid cUuid(charUuid);
   b55ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b55f0:	f8df 81a4 	ldr.w	r8, [pc, #420]	; b5798 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa2c>
   b55f4:	af5a      	add	r7, sp, #360	; 0x168
        BleUuid sUuid(svcUuid);
   b55f6:	ac53      	add	r4, sp, #332	; 0x14c
        BleUuid cUuid(charUuid);
   b55f8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
      constexpr __shared_count() noexcept : _M_pi(0)
   b55fa:	e9c8 aa00 	strd	sl, sl, [r8]
   b55fe:	f8c6 c000 	str.w	ip, [r6]
        BleUuid sUuid(svcUuid);
   b5602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5604:	ae66      	add	r6, sp, #408	; 0x198
   b5606:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5608:	4b50      	ldr	r3, [pc, #320]	; (b574c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9e0>)
        BleUuid sUuid(svcUuid);
   b560a:	f8c5 e000 	str.w	lr, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b560e:	9301      	str	r3, [sp, #4]
   b5610:	ab66      	add	r3, sp, #408	; 0x198
   b5612:	f04f 0204 	mov.w	r2, #4
   b5616:	494e      	ldr	r1, [pc, #312]	; (b5750 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9e4>)
   b5618:	9300      	str	r3, [sp, #0]
   b561a:	4640      	mov	r0, r8
   b561c:	ab5a      	add	r3, sp, #360	; 0x168
   b561e:	f8cd a008 	str.w	sl, [sp, #8]
   b5622:	f002 fe2d 	bl	b8280 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b5626:	494b      	ldr	r1, [pc, #300]	; (b5754 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9e8>)
   b5628:	484b      	ldr	r0, [pc, #300]	; (b5758 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9ec>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b562a:	4c4c      	ldr	r4, [pc, #304]	; (b575c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9f0>)
   b562c:	f003 fb4b 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b5630:	484b      	ldr	r0, [pc, #300]	; (b5760 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9f4>)
   b5632:	f003 f955 	bl	b88e0 <_ZN9IPAddressC1Ev>
   b5636:	4947      	ldr	r1, [pc, #284]	; (b5754 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9e8>)
   b5638:	484a      	ldr	r0, [pc, #296]	; (b5764 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9f8>)
   b563a:	f003 fb44 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b563e:	4945      	ldr	r1, [pc, #276]	; (b5754 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9e8>)
   b5640:	4849      	ldr	r0, [pc, #292]	; (b5768 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9fc>)
   b5642:	f003 fb40 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b5646:	4943      	ldr	r1, [pc, #268]	; (b5754 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9e8>)
   b5648:	4848      	ldr	r0, [pc, #288]	; (b576c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa00>)
   b564a:	f003 fb3c 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
HttpClient http;
   b564e:	4848      	ldr	r0, [pc, #288]	; (b5770 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa04>)
   b5650:	f000 fe1e 	bl	b6290 <_ZN10HttpClientC1Ev>
   b5654:	f240 53dc 	movw	r3, #1500	; 0x5dc
   b5658:	9300      	str	r3, [sp, #0]
   b565a:	f643 2298 	movw	r2, #15000	; 0x3a98
   b565e:	4b45      	ldr	r3, [pc, #276]	; (b5774 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa08>)
   b5660:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b5664:	4620      	mov	r0, r4
   b5666:	f000 ffeb 	bl	b6640 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b566a:	4b43      	ldr	r3, [pc, #268]	; (b5778 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa0c>)
   b566c:	6023      	str	r3, [r4, #0]
   b566e:	b077      	add	sp, #476	; 0x1dc
   b5670:	ecbd 8b08 	vpop	{d8-d11}
   b5674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_M_deallocate(_M_impl._M_start,
   b5678:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b567a:	b118      	cbz	r0, b5684 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x918>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b567c:	68a1      	ldr	r1, [r4, #8]
   b567e:	1a09      	subs	r1, r1, r0
   b5680:	f7fe fd0f 	bl	b40a2 <_ZdlPvj>
Railway pinkLine = Railway(
   b5684:	4829      	ldr	r0, [pc, #164]	; (b572c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9c0>)
   b5686:	f7ff f85a 	bl	b473e <_ZN7RailwayD1Ev>
Railway purpleLine = Railway(
   b568a:	483c      	ldr	r0, [pc, #240]	; (b577c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa10>)
   b568c:	f7ff f857 	bl	b473e <_ZN7RailwayD1Ev>
Railway orangeLine = Railway(
   b5690:	483b      	ldr	r0, [pc, #236]	; (b5780 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa14>)
   b5692:	f7ff f854 	bl	b473e <_ZN7RailwayD1Ev>
Railway greenLine = Railway(
   b5696:	483b      	ldr	r0, [pc, #236]	; (b5784 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa18>)
   b5698:	f7ff f851 	bl	b473e <_ZN7RailwayD1Ev>
Railway brownLine = Railway(
   b569c:	483a      	ldr	r0, [pc, #232]	; (b5788 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa1c>)
   b569e:	f7ff f84e 	bl	b473e <_ZN7RailwayD1Ev>
Railway blueLine = Railway(
   b56a2:	483a      	ldr	r0, [pc, #232]	; (b578c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa20>)
   b56a4:	f7ff f84b 	bl	b473e <_ZN7RailwayD1Ev>
Railway redLine = Railway(
   b56a8:	4839      	ldr	r0, [pc, #228]	; (b5790 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa24>)
   b56aa:	f7ff f848 	bl	b473e <_ZN7RailwayD1Ev>
   b56ae:	e7de      	b.n	b566e <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x902>
JsonParserStatic<15000, 1500> parser;
   b56b0:	482a      	ldr	r0, [pc, #168]	; (b575c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9f0>)
   b56b2:	f7fe fd01 	bl	b40b8 <_ZN16JsonParserStaticILj15000ELj1500EED1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b56b6:	4b2e      	ldr	r3, [pc, #184]	; (b5770 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa04>)
   b56b8:	4a36      	ldr	r2, [pc, #216]	; (b5794 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa28>)
	if (_M_pi != nullptr)
   b56ba:	699c      	ldr	r4, [r3, #24]
   b56bc:	601a      	str	r2, [r3, #0]
   b56be:	b17c      	cbz	r4, b56e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x974>
      if (--_M_use_count == 0)
   b56c0:	6863      	ldr	r3, [r4, #4]
   b56c2:	3b01      	subs	r3, #1
   b56c4:	6063      	str	r3, [r4, #4]
   b56c6:	b95b      	cbnz	r3, b56e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x974>
          _M_dispose();
   b56c8:	6823      	ldr	r3, [r4, #0]
   b56ca:	4620      	mov	r0, r4
   b56cc:	689b      	ldr	r3, [r3, #8]
   b56ce:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b56d0:	68a3      	ldr	r3, [r4, #8]
   b56d2:	3b01      	subs	r3, #1
   b56d4:	60a3      	str	r3, [r4, #8]
   b56d6:	b91b      	cbnz	r3, b56e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x974>
            _M_destroy();
   b56d8:	6823      	ldr	r3, [r4, #0]
   b56da:	4620      	mov	r0, r4
   b56dc:	68db      	ldr	r3, [r3, #12]
   b56de:	4798      	blx	r3
   b56e0:	4822      	ldr	r0, [pc, #136]	; (b576c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa00>)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b56e2:	4c13      	ldr	r4, [pc, #76]	; (b5730 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9c4>)
   b56e4:	f003 faa4 	bl	b8c30 <_ZN6StringD1Ev>
} http_request_t;
   b56e8:	481f      	ldr	r0, [pc, #124]	; (b5768 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9fc>)
   b56ea:	f003 faa1 	bl	b8c30 <_ZN6StringD1Ev>
   b56ee:	481d      	ldr	r0, [pc, #116]	; (b5764 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9f8>)
   b56f0:	f003 fa9e 	bl	b8c30 <_ZN6StringD1Ev>
   b56f4:	4818      	ldr	r0, [pc, #96]	; (b5758 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x9ec>)
   b56f6:	f003 fa9b 	bl	b8c30 <_ZN6StringD1Ev>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b56fa:	4827      	ldr	r0, [pc, #156]	; (b5798 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa2c>)
   b56fc:	f002 faa7 	bl	b7c4e <_ZN8particle17BleCharacteristicD1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b5700:	4826      	ldr	r0, [pc, #152]	; (b579c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa30>)
   b5702:	f002 faa4 	bl	b7c4e <_ZN8particle17BleCharacteristicD1Ev>
   b5706:	e9d4 5600 	ldrd	r5, r6, [r4]
	  for (; __first != __last; ++__first)
   b570a:	42ae      	cmp	r6, r5
   b570c:	d0b4      	beq.n	b5678 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x90c>
      __pointer->~_Tp();
   b570e:	4628      	mov	r0, r5
   b5710:	f7ff f815 	bl	b473e <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b5714:	3564      	adds	r5, #100	; 0x64
   b5716:	e7f8      	b.n	b570a <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x99e>
   b5718:	000bcf54 	.word	0x000bcf54
   b571c:	2003228c 	.word	0x2003228c
   b5720:	000bcd7a 	.word	0x000bcd7a
   b5724:	000bcd7f 	.word	0x000bcd7f
   b5728:	000bcd86 	.word	0x000bcd86
   b572c:	2003e500 	.word	0x2003e500
   b5730:	2003e5c8 	.word	0x2003e5c8
   b5734:	000bcd8d 	.word	0x000bcd8d
   b5738:	200322b4 	.word	0x200322b4
   b573c:	000bcdb2 	.word	0x000bcdb2
   b5740:	200322a0 	.word	0x200322a0
   b5744:	000bcdd7 	.word	0x000bcdd7
   b5748:	000bcdfc 	.word	0x000bcdfc
   b574c:	000b4949 	.word	0x000b4949
   b5750:	000bcdff 	.word	0x000bcdff
   b5754:	000bcffe 	.word	0x000bcffe
   b5758:	2003e638 	.word	0x2003e638
   b575c:	20034c7c 	.word	0x20034c7c
   b5760:	2003e648 	.word	0x2003e648
   b5764:	2003e660 	.word	0x2003e660
   b5768:	2003e674 	.word	0x2003e674
   b576c:	2003e688 	.word	0x2003e688
   b5770:	200323fc 	.word	0x200323fc
   b5774:	20038740 	.word	0x20038740
   b5778:	000bcf40 	.word	0x000bcf40
   b577c:	2003e564 	.word	0x2003e564
   b5780:	20034c18 	.word	0x20034c18
   b5784:	20032398 	.word	0x20032398
   b5788:	20032334 	.word	0x20032334
   b578c:	200322d0 	.word	0x200322d0
   b5790:	2003e5d4 	.word	0x2003e5d4
   b5794:	000bd308 	.word	0x000bd308
   b5798:	2003e698 	.word	0x2003e698
   b579c:	2003e6a8 	.word	0x2003e6a8

000b57a0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b57a0:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b57a2:	b510      	push	{r4, lr}
   b57a4:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b57a6:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b57aa:	d005      	beq.n	b57b8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b57ac:	4601      	mov	r1, r0
   b57ae:	4622      	mov	r2, r4
   b57b0:	4618      	mov	r0, r3
   b57b2:	f005 f992 	bl	baada <memmove>
   b57b6:	4603      	mov	r3, r0
	}
   b57b8:	1918      	adds	r0, r3, r4
   b57ba:	bd10      	pop	{r4, pc}

000b57bc <_ZN7RailwayC1ERKS_>:
class Railway{
   b57bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b57c0:	460d      	mov	r5, r1
   b57c2:	4604      	mov	r4, r0
   b57c4:	f7ff f83e 	bl	b4844 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b57c8:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b57cc:	2600      	movs	r6, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b57ce:	1ac9      	subs	r1, r1, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b57d0:	e9c4 6603 	strd	r6, r6, [r4, #12]
   b57d4:	6166      	str	r6, [r4, #20]
      { _M_create_storage(__n); }
   b57d6:	1089      	asrs	r1, r1, #2
   b57d8:	f104 000c 	add.w	r0, r4, #12
   b57dc:	f7ff f990 	bl	b4b00 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
			      _Category>::__copy_m(__first, __last, __result);
   b57e0:	68e2      	ldr	r2, [r4, #12]
   b57e2:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
   b57e6:	f7ff ffdb 	bl	b57a0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b57ea:	f105 0118 	add.w	r1, r5, #24
	this->_M_impl._M_finish =
   b57ee:	6120      	str	r0, [r4, #16]
   b57f0:	f104 0018 	add.w	r0, r4, #24
   b57f4:	f7ff f9a7 	bl	b4b46 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b57f8:	f105 0124 	add.w	r1, r5, #36	; 0x24
   b57fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5800:	f7ff f9a1 	bl	b4b46 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5804:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b5808:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b580c:	f7fe fcd0 	bl	b41b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5810:	e9d5 3712 	ldrd	r3, r7, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5814:	4812      	ldr	r0, [pc, #72]	; (b5860 <_ZN7RailwayC1ERKS_+0xa4>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5816:	6526      	str	r6, [r4, #80]	; 0x50
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5818:	1aff      	subs	r7, r7, r3
   b581a:	10fb      	asrs	r3, r7, #3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b581c:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5820:	4358      	muls	r0, r3
   b5822:	f7fe fc99 	bl	b4158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5826:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b582a:	4407      	add	r7, r0
   b582c:	6527      	str	r7, [r4, #80]	; 0x50
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b582e:	e9d5 7812 	ldrd	r7, r8, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5832:	4606      	mov	r6, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b5834:	45b8      	cmp	r8, r7
   b5836:	d007      	beq.n	b5848 <_ZN7RailwayC1ERKS_+0x8c>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5838:	b11e      	cbz	r6, b5842 <_ZN7RailwayC1ERKS_+0x86>
   b583a:	4639      	mov	r1, r7
   b583c:	4630      	mov	r0, r6
   b583e:	f7fe fcb7 	bl	b41b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b5842:	3618      	adds	r6, #24
   b5844:	3718      	adds	r7, #24
   b5846:	e7f5      	b.n	b5834 <_ZN7RailwayC1ERKS_+0x78>
	this->_M_impl._M_finish =
   b5848:	64e6      	str	r6, [r4, #76]	; 0x4c
   b584a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b584c:	6563      	str	r3, [r4, #84]	; 0x54
   b584e:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b5850:	65a3      	str	r3, [r4, #88]	; 0x58
   b5852:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b5854:	65e3      	str	r3, [r4, #92]	; 0x5c
   b5856:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b5858:	6623      	str	r3, [r4, #96]	; 0x60
   b585a:	4620      	mov	r0, r4
   b585c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5860:	aaaaaaab 	.word	0xaaaaaaab

000b5864 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b5864:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5868:	1a0e      	subs	r6, r1, r0
   b586a:	493a      	ldr	r1, [pc, #232]	; (b5954 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xf0>)
	if (__n > this->_M_max_size())
   b586c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; b5958 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xf4>
   b5870:	10b6      	asrs	r6, r6, #2
	__copy_m(_II __first, _II __last, _OI __result)
   b5872:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5874:	434e      	muls	r6, r1
   b5876:	4614      	mov	r4, r2
   b5878:	2e00      	cmp	r6, #0
   b587a:	dd66      	ble.n	b594a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xe6>
   b587c:	4629      	mov	r1, r5
   b587e:	4620      	mov	r0, r4
   b5880:	f7fe fcd2 	bl	b4228 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      if (&__x != this)
   b5884:	42a5      	cmp	r5, r4
   b5886:	d026      	beq.n	b58d6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x72>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5888:	e9d5 a103 	ldrd	sl, r1, [r5, #12]
			 - this->_M_impl._M_start); }
   b588c:	68e2      	ldr	r2, [r4, #12]
   b588e:	6963      	ldr	r3, [r4, #20]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5890:	eba1 070a 	sub.w	r7, r1, sl
			 - this->_M_impl._M_start); }
   b5894:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b5896:	429f      	cmp	r7, r3
   b5898:	d943      	bls.n	b5922 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xbe>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b589a:	2f00      	cmp	r7, #0
   b589c:	d03f      	beq.n	b591e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xba>
   b589e:	454f      	cmp	r7, r9
   b58a0:	d901      	bls.n	b58a6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x42>
	  std::__throw_bad_alloc();
   b58a2:	f004 f86d 	bl	b9980 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b58a6:	4638      	mov	r0, r7
   b58a8:	9101      	str	r1, [sp, #4]
   b58aa:	f7fe fbf4 	bl	b4096 <_Znwj>
   b58ae:	9901      	ldr	r1, [sp, #4]
   b58b0:	4680      	mov	r8, r0
			      _Category>::__copy_m(__first, __last, __result);
   b58b2:	4642      	mov	r2, r8
   b58b4:	4650      	mov	r0, sl
   b58b6:	f7ff ff73 	bl	b57a0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b58ba:	68e0      	ldr	r0, [r4, #12]
	if (__p)
   b58bc:	b118      	cbz	r0, b58c6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x62>
			    - this->_M_impl._M_start);
   b58be:	6961      	ldr	r1, [r4, #20]
	::operator delete(__p
   b58c0:	1a09      	subs	r1, r1, r0
   b58c2:	f7fe fbee 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b58c6:	eb08 0007 	add.w	r0, r8, r7
	      this->_M_impl._M_start = __tmp;
   b58ca:	f8c4 800c 	str.w	r8, [r4, #12]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b58ce:	6160      	str	r0, [r4, #20]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b58d0:	68e3      	ldr	r3, [r4, #12]
   b58d2:	443b      	add	r3, r7
   b58d4:	6123      	str	r3, [r4, #16]
   b58d6:	f105 0118 	add.w	r1, r5, #24
   b58da:	f104 0018 	add.w	r0, r4, #24
   b58de:	f7ff f975 	bl	b4bcc <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
   b58e2:	f105 0124 	add.w	r1, r5, #36	; 0x24
   b58e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b58ea:	f7ff f96f 	bl	b4bcc <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	this->_M_assign(__str);
   b58ee:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b58f2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b58f6:	f004 f949 	bl	b9b8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b58fa:	f105 0148 	add.w	r1, r5, #72	; 0x48
   b58fe:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b5902:	f7fe fce3 	bl	b42cc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
   b5906:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b5908:	6563      	str	r3, [r4, #84]	; 0x54
   b590a:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b590c:	65a3      	str	r3, [r4, #88]	; 0x58
   b590e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b5910:	65e3      	str	r3, [r4, #92]	; 0x5c
   b5912:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b5914:	6623      	str	r3, [r4, #96]	; 0x60
	      ++__first;
   b5916:	3564      	adds	r5, #100	; 0x64
	      ++__result;
   b5918:	3464      	adds	r4, #100	; 0x64
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b591a:	3e01      	subs	r6, #1
   b591c:	e7ac      	b.n	b5878 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x14>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b591e:	46b8      	mov	r8, r7
   b5920:	e7c7      	b.n	b58b2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x4e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5922:	6923      	ldr	r3, [r4, #16]
   b5924:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b5926:	429f      	cmp	r7, r3
   b5928:	d803      	bhi.n	b5932 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xce>
			      _Category>::__copy_m(__first, __last, __result);
   b592a:	4650      	mov	r0, sl
   b592c:	f7ff ff38 	bl	b57a0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
    { return std::uninitialized_copy(__first, __last, __result); }
   b5930:	e7ce      	b.n	b58d0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x6c>
   b5932:	eb0a 0103 	add.w	r1, sl, r3
   b5936:	4650      	mov	r0, sl
   b5938:	f7ff ff32 	bl	b57a0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b593c:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
   b5940:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
   b5944:	1a10      	subs	r0, r2, r0
   b5946:	4418      	add	r0, r3
   b5948:	e7f0      	b.n	b592c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xc8>
	}
   b594a:	4620      	mov	r0, r4
   b594c:	b002      	add	sp, #8
   b594e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5952:	bf00      	nop
   b5954:	c28f5c29 	.word	0xc28f5c29
   b5958:	7ffffffc 	.word	0x7ffffffc

000b595c <setup>:
void setup() {
   b595c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b595e:	b0a5      	sub	sp, #148	; 0x94
  Serial.begin(9600);
   b5960:	f003 fe5a 	bl	b9618 <_Z16_fetch_usbserialv>
   b5964:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5968:	f003 fe4a 	bl	b9600 <_ZN9USBSerial5beginEl>
  delay(2000);
   b596c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5970:	f001 fd10 	bl	b7394 <delay>
  BLE.on();
   b5974:	f002 f87a 	bl	b7a6c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5978:	f002 f8c2 	bl	b7b00 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   b597c:	f002 f876 	bl	b7a6c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5980:	4a5a      	ldr	r2, [pc, #360]	; (b5aec <setup+0x190>)
   b5982:	4c5b      	ldr	r4, [pc, #364]	; (b5af0 <setup+0x194>)
   b5984:	4601      	mov	r1, r0
   b5986:	a80b      	add	r0, sp, #44	; 0x2c
   b5988:	f002 fda4 	bl	b84d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b598c:	a80b      	add	r0, sp, #44	; 0x2c
   b598e:	f002 f95e 	bl	b7c4e <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b5992:	f002 f86b 	bl	b7a6c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5996:	4a57      	ldr	r2, [pc, #348]	; (b5af4 <setup+0x198>)
   b5998:	4601      	mov	r1, r0
   b599a:	a80b      	add	r0, sp, #44	; 0x2c
   b599c:	f002 fd9a 	bl	b84d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b59a0:	a80b      	add	r0, sp, #44	; 0x2c
   b59a2:	f002 f954 	bl	b7c4e <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   b59a6:	a803      	add	r0, sp, #12
   b59a8:	f002 fa87 	bl	b7eba <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b59ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b59ae:	ad06      	add	r5, sp, #24
   b59b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        BleUuid tempUUID(uuid);
   b59b2:	ad06      	add	r5, sp, #24
   b59b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b59b6:	6826      	ldr	r6, [r4, #0]
   b59b8:	ac0b      	add	r4, sp, #44	; 0x2c
   b59ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b59bc:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b59be:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b59c0:	f001 fe56 	bl	b7670 <_ZNK8particle7BleUuid4typeEv>
   b59c4:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b59c6:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b59c8:	2c00      	cmp	r4, #0
   b59ca:	d14a      	bne.n	b5a62 <setup+0x106>
            uint16_t uuid16 = tempUUID.shorted();
   b59cc:	f001 fe6c 	bl	b76a8 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b59d0:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b59d2:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b59d6:	2302      	movs	r3, #2
   b59d8:	f10d 020a 	add.w	r2, sp, #10
   b59dc:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b59de:	a803      	add	r0, sp, #12
   b59e0:	f002 fa60 	bl	b7ea4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   b59e4:	f002 f842 	bl	b7a6c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b59e8:	2200      	movs	r2, #0
   b59ea:	a903      	add	r1, sp, #12
   b59ec:	f002 f8d2 	bl	b7b94 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  request.hostname = "lapi.transitchicago.com";
   b59f0:	4c41      	ldr	r4, [pc, #260]	; (b5af8 <setup+0x19c>)
  acquireWireBuffer();
   b59f2:	a80b      	add	r0, sp, #44	; 0x2c
   b59f4:	f7fe fe5c 	bl	b46b0 <_Z17acquireWireBufferv>
  Wire.begin();
   b59f8:	f003 ff5c 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b59fc:	f002 fef6 	bl	b87ec <_ZN7TwoWire5beginEv>
  randomizeAddress();
   b5a00:	f7fe fd00 	bl	b4404 <_Z16randomizeAddressv>
  request.hostname = "lapi.transitchicago.com";
   b5a04:	493d      	ldr	r1, [pc, #244]	; (b5afc <setup+0x1a0>)
   b5a06:	4620      	mov	r0, r4
   b5a08:	f003 f98b 	bl	b8d22 <_ZN6StringaSEPKc>
  request.port = 80;
   b5a0c:	2350      	movs	r3, #80	; 0x50
   b5a0e:	63a3      	str	r3, [r4, #56]	; 0x38

    //loopIndex must point to either the first or last checkpoint, tripleIndex cannot be 0
    void setLoopIndex(int triple, int loop){
        tripleIndex = triple;
   b5a10:	4b3b      	ldr	r3, [pc, #236]	; (b5b00 <setup+0x1a4>)
        loopIndex = loop;
   b5a12:	2104      	movs	r1, #4
   b5a14:	2200      	movs	r2, #0
   b5a16:	e9c3 1215 	strd	r1, r2, [r3, #84]	; 0x54
        tripleIndex = triple;
   b5a1a:	493a      	ldr	r1, [pc, #232]	; (b5b04 <setup+0x1a8>)
        loopIndex = loop;
   b5a1c:	2002      	movs	r0, #2
   b5a1e:	2306      	movs	r3, #6
   b5a20:	e9c1 0315 	strd	r0, r3, [r1, #84]	; 0x54
        tripleIndex = triple;
   b5a24:	4b38      	ldr	r3, [pc, #224]	; (b5b08 <setup+0x1ac>)
        loopIndex = loop;
   b5a26:	2207      	movs	r2, #7
   b5a28:	2403      	movs	r4, #3
   b5a2a:	e9c3 4215 	strd	r4, r2, [r3, #84]	; 0x54
			 - this->_M_impl._M_start); }
   b5a2e:	4c37      	ldr	r4, [pc, #220]	; (b5b0c <setup+0x1b0>)
  railways = {orangeLine};
   b5a30:	a80b      	add	r0, sp, #44	; 0x2c
   b5a32:	f7ff fec3 	bl	b57bc <_ZN7RailwayC1ERKS_>
   b5a36:	6822      	ldr	r2, [r4, #0]
   b5a38:	68a3      	ldr	r3, [r4, #8]
   b5a3a:	1a9b      	subs	r3, r3, r2
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);

	if (__len > capacity())
   b5a3c:	2b63      	cmp	r3, #99	; 0x63
   b5a3e:	d82b      	bhi.n	b5a98 <setup+0x13c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5a40:	2064      	movs	r0, #100	; 0x64
   b5a42:	f7fe fb28 	bl	b4096 <_Znwj>
   b5a46:	4605      	mov	r5, r0
   b5a48:	b110      	cbz	r0, b5a50 <setup+0xf4>
   b5a4a:	a90b      	add	r1, sp, #44	; 0x2c
   b5a4c:	f7ff feb6 	bl	b57bc <_ZN7RailwayC1ERKS_>
	  {
	    _S_check_init_len(__len, _M_get_Tp_allocator());
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5a50:	e9d4 6700 	ldrd	r6, r7, [r4]
	  for (; __first != __last; ++__first)
   b5a54:	42b7      	cmp	r7, r6
   b5a56:	d00c      	beq.n	b5a72 <setup+0x116>
      __pointer->~_Tp();
   b5a58:	4630      	mov	r0, r6
   b5a5a:	f7fe fe70 	bl	b473e <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b5a5e:	3664      	adds	r6, #100	; 0x64
   b5a60:	e7f8      	b.n	b5a54 <setup+0xf8>
   b5a62:	f001 fe23 	bl	b76ac <_ZNK8particle7BleUuid8rawBytesEv>
   b5a66:	2300      	movs	r3, #0
   b5a68:	9300      	str	r3, [sp, #0]
   b5a6a:	4602      	mov	r2, r0
   b5a6c:	2310      	movs	r3, #16
   b5a6e:	2107      	movs	r1, #7
   b5a70:	e7b5      	b.n	b59de <setup+0x82>
			  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
   b5a72:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b5a74:	b118      	cbz	r0, b5a7e <setup+0x122>
			  this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_start);
   b5a76:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b5a78:	1a09      	subs	r1, r1, r0
   b5a7a:	f7fe fb12 	bl	b40a2 <_ZdlPvj>
	      for (; __first != __last; ++__first, (void)++__cur)
   b5a7e:	f105 0364 	add.w	r3, r5, #100	; 0x64
	    this->_M_impl._M_start = __tmp;
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b5a82:	e9c4 5300 	strd	r5, r3, [r4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b5a86:	60a3      	str	r3, [r4, #8]
   b5a88:	a80b      	add	r0, sp, #44	; 0x2c
   b5a8a:	f7fe fe58 	bl	b473e <_ZN7RailwayD1Ev>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b5a8e:	9803      	ldr	r0, [sp, #12]
   b5a90:	f001 fc38 	bl	b7304 <free>
}
   b5a94:	b025      	add	sp, #148	; 0x94
   b5a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5a98:	6865      	ldr	r5, [r4, #4]
   b5a9a:	1aad      	subs	r5, r5, r2
	  }
	else if (size() >= __len)
   b5a9c:	2d63      	cmp	r5, #99	; 0x63
   b5a9e:	d910      	bls.n	b5ac2 <setup+0x166>
			      _Category>::__copy_m(__first, __last, __result);
   b5aa0:	a924      	add	r1, sp, #144	; 0x90
   b5aa2:	a80b      	add	r0, sp, #44	; 0x2c
   b5aa4:	f7ff fede 	bl	b5864 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b5aa8:	6867      	ldr	r7, [r4, #4]
   b5aaa:	42b8      	cmp	r0, r7
   b5aac:	4605      	mov	r5, r0
   b5aae:	d0eb      	beq.n	b5a88 <setup+0x12c>
   b5ab0:	4606      	mov	r6, r0
      __pointer->~_Tp();
   b5ab2:	4630      	mov	r0, r6
	  for (; __first != __last; ++__first)
   b5ab4:	3664      	adds	r6, #100	; 0x64
      __pointer->~_Tp();
   b5ab6:	f7fe fe42 	bl	b473e <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b5aba:	42b7      	cmp	r7, r6
   b5abc:	d1f9      	bne.n	b5ab2 <setup+0x156>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b5abe:	6065      	str	r5, [r4, #4]
   b5ac0:	e7e2      	b.n	b5a88 <setup+0x12c>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b5ac2:	ab0b      	add	r3, sp, #44	; 0x2c
   b5ac4:	441d      	add	r5, r3
   b5ac6:	4629      	mov	r1, r5
   b5ac8:	4618      	mov	r0, r3
   b5aca:	f7ff fecb 	bl	b5864 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5ace:	6866      	ldr	r6, [r4, #4]
   b5ad0:	ab24      	add	r3, sp, #144	; 0x90
   b5ad2:	429d      	cmp	r5, r3
   b5ad4:	d007      	beq.n	b5ae6 <setup+0x18a>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5ad6:	b11e      	cbz	r6, b5ae0 <setup+0x184>
   b5ad8:	4629      	mov	r1, r5
   b5ada:	4630      	mov	r0, r6
   b5adc:	f7ff fe6e 	bl	b57bc <_ZN7RailwayC1ERKS_>
   b5ae0:	3564      	adds	r5, #100	; 0x64
   b5ae2:	3664      	adds	r6, #100	; 0x64
   b5ae4:	e7f4      	b.n	b5ad0 <setup+0x174>
	    _ForwardIterator __mid = __first;
	    std::advance(__mid, size());
	    std::copy(__first, __mid, this->_M_impl._M_start);
	    const size_type __attribute__((__unused__)) __n = __len - size();
	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	    this->_M_impl._M_finish =
   b5ae6:	6066      	str	r6, [r4, #4]
   b5ae8:	e7ce      	b.n	b5a88 <setup+0x12c>
   b5aea:	bf00      	nop
   b5aec:	2003e6a8 	.word	0x2003e6a8
   b5af0:	2003228c 	.word	0x2003228c
   b5af4:	2003e698 	.word	0x2003e698
   b5af8:	2003e638 	.word	0x2003e638
   b5afc:	000bce02 	.word	0x000bce02
   b5b00:	20032334 	.word	0x20032334
   b5b04:	20034c18 	.word	0x20034c18
   b5b08:	2003e500 	.word	0x2003e500
   b5b0c:	2003e5c8 	.word	0x2003e5c8

000b5b10 <_GLOBAL__sub_I_redLine>:
   b5b10:	2001      	movs	r0, #1
   b5b12:	f7ff b92b 	b.w	b4d6c <_Z41__static_initialization_and_destruction_0ii.constprop.0>
	...

000b5b18 <loop>:
void loop() {
   b5b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5b1c:	ed2d 8b04 	vpush	{d8-d9}
   b5b20:	b0bb      	sub	sp, #236	; 0xec
  Serial.println("loop start");
   b5b22:	f003 fd79 	bl	b9618 <_Z16_fetch_usbserialv>
   b5b26:	49a2      	ldr	r1, [pc, #648]	; (b5db0 <loop+0x298>)
   b5b28:	f8df a2ec 	ldr.w	sl, [pc, #748]	; b5e18 <loop+0x300>
   b5b2c:	f003 f821 	bl	b8b72 <_ZN5Print7printlnEPKc>
  while(userInput){
   b5b30:	4ba0      	ldr	r3, [pc, #640]	; (b5db4 <loop+0x29c>)
   b5b32:	781b      	ldrb	r3, [r3, #0]
   b5b34:	2b00      	cmp	r3, #0
   b5b36:	f000 8397 	beq.w	b6268 <loop+0x750>
   b5b3a:	4b9f      	ldr	r3, [pc, #636]	; (b5db8 <loop+0x2a0>)
   b5b3c:	9307      	str	r3, [sp, #28]
    for(int j = 0; j < railways.size(); j++){
   b5b3e:	2300      	movs	r3, #0
   b5b40:	9303      	str	r3, [sp, #12]
   b5b42:	e9da 2300 	ldrd	r2, r3, [sl]
   b5b46:	1a9b      	subs	r3, r3, r2
   b5b48:	4a9c      	ldr	r2, [pc, #624]	; (b5dbc <loop+0x2a4>)
   b5b4a:	109b      	asrs	r3, r3, #2
   b5b4c:	4353      	muls	r3, r2
   b5b4e:	9a03      	ldr	r2, [sp, #12]
   b5b50:	4293      	cmp	r3, r2
   b5b52:	f240 8384 	bls.w	b625e <loop+0x746>
      delay(2500);
   b5b56:	f640 10c4 	movw	r0, #2500	; 0x9c4
   b5b5a:	f001 fc1b 	bl	b7394 <delay>
	StringSumHelper(const char *p) : String(p) {}
   b5b5e:	4998      	ldr	r1, [pc, #608]	; (b5dc0 <loop+0x2a8>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b5b60:	4d98      	ldr	r5, [pc, #608]	; (b5dc4 <loop+0x2ac>)
   b5b62:	a821      	add	r0, sp, #132	; 0x84
   b5b64:	f003 f8af 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
      request.path = "/api/1.0/ttpositions.aspx?key=00ff09063caa46748434d5fa321d048f&rt=" + String(railways.at(j).name.c_str()) + "&outputType=JSON";
   b5b68:	9903      	ldr	r1, [sp, #12]
   b5b6a:	4650      	mov	r0, sl
   b5b6c:	f7fe fe8e 	bl	b488c <_ZNSt6vectorI7RailwaySaIS0_EE2atEj>
   b5b70:	6b01      	ldr	r1, [r0, #48]	; 0x30
   b5b72:	a81d      	add	r0, sp, #116	; 0x74
   b5b74:	f003 f8a7 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b5b78:	a91d      	add	r1, sp, #116	; 0x74
   b5b7a:	a821      	add	r0, sp, #132	; 0x84
   b5b7c:	f003 f91e 	bl	b8dbc <_ZplRK15StringSumHelperRK6String>
   b5b80:	4991      	ldr	r1, [pc, #580]	; (b5dc8 <loop+0x2b0>)
   b5b82:	f003 f927 	bl	b8dd4 <_ZplRK15StringSumHelperPKc>
   b5b86:	4601      	mov	r1, r0
   b5b88:	4890      	ldr	r0, [pc, #576]	; (b5dcc <loop+0x2b4>)
   b5b8a:	f003 f8b0 	bl	b8cee <_ZN6StringaSERKS_>
   b5b8e:	a81d      	add	r0, sp, #116	; 0x74
   b5b90:	f003 f84e 	bl	b8c30 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b5b94:	a821      	add	r0, sp, #132	; 0x84
   b5b96:	f003 f84b 	bl	b8c30 <_ZN6StringD1Ev>
   b5b9a:	4b8d      	ldr	r3, [pc, #564]	; (b5dd0 <loop+0x2b8>)
   b5b9c:	498d      	ldr	r1, [pc, #564]	; (b5dd4 <loop+0x2bc>)
   b5b9e:	488e      	ldr	r0, [pc, #568]	; (b5dd8 <loop+0x2c0>)
   b5ba0:	9300      	str	r3, [sp, #0]
   b5ba2:	462a      	mov	r2, r5
   b5ba4:	4b8d      	ldr	r3, [pc, #564]	; (b5ddc <loop+0x2c4>)
   b5ba6:	f000 fba9 	bl	b62fc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("parsing");
   b5baa:	f003 fd35 	bl	b9618 <_Z16_fetch_usbserialv>
   b5bae:	498c      	ldr	r1, [pc, #560]	; (b5de0 <loop+0x2c8>)
   b5bb0:	f002 ffdf 	bl	b8b72 <_ZN5Print7printlnEPKc>
      parser.clear();
   b5bb4:	488b      	ldr	r0, [pc, #556]	; (b5de4 <loop+0x2cc>)
   b5bb6:	f000 fd39 	bl	b662c <_ZN10JsonBuffer5clearEv>
	const char * c_str() const { return buffer; }
   b5bba:	6869      	ldr	r1, [r5, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b5bbc:	9104      	str	r1, [sp, #16]
   b5bbe:	4608      	mov	r0, r1
   b5bc0:	f004 ffee 	bl	baba0 <strlen>
   b5bc4:	9904      	ldr	r1, [sp, #16]
   b5bc6:	4602      	mov	r2, r0
   b5bc8:	4886      	ldr	r0, [pc, #536]	; (b5de4 <loop+0x2cc>)
   b5bca:	f000 fd12 	bl	b65f2 <_ZN10JsonBuffer7addDataEPKcj>
      if(!parser.parse()){
   b5bce:	4885      	ldr	r0, [pc, #532]	; (b5de4 <loop+0x2cc>)
   b5bd0:	f001 f8cc 	bl	b6d6c <_ZN10JsonParser5parseEv>
   b5bd4:	4605      	mov	r5, r0
   b5bd6:	b948      	cbnz	r0, b5bec <loop+0xd4>
        Serial.println("parsing failed");
   b5bd8:	f003 fd1e 	bl	b9618 <_Z16_fetch_usbserialv>
   b5bdc:	4982      	ldr	r1, [pc, #520]	; (b5de8 <loop+0x2d0>)
}
   b5bde:	b03b      	add	sp, #236	; 0xec
   b5be0:	ecbd 8b04 	vpop	{d8-d9}
   b5be4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("parsing failed");
   b5be8:	f002 bfc3 	b.w	b8b72 <_ZN5Print7printlnEPKc>
      Railway currentRailway = railways.at(j);
   b5bec:	9903      	ldr	r1, [sp, #12]
   b5bee:	4650      	mov	r0, sl
   b5bf0:	f7fe fe4c 	bl	b488c <_ZNSt6vectorI7RailwaySaIS0_EE2atEj>
   b5bf4:	4601      	mov	r1, r0
   b5bf6:	a821      	add	r0, sp, #132	; 0x84
   b5bf8:	f7ff fde0 	bl	b57bc <_ZN7RailwayC1ERKS_>
      std::vector<Checkpoint> currentCheckpoints = currentRailway.checkpoints;
   b5bfc:	a921      	add	r1, sp, #132	; 0x84
   b5bfe:	a809      	add	r0, sp, #36	; 0x24
   b5c00:	f7fe fe20 	bl	b4844 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      int count = 0;
   b5c04:	2300      	movs	r3, #0
   b5c06:	9304      	str	r3, [sp, #16]
        Serial.println("while");
   b5c08:	f003 fd06 	bl	b9618 <_Z16_fetch_usbserialv>
   b5c0c:	4977      	ldr	r1, [pc, #476]	; (b5dec <loop+0x2d4>)
   b5c0e:	f002 ffb0 	bl	b8b72 <_ZN5Print7printlnEPKc>
        JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   b5c12:	4974      	ldr	r1, [pc, #464]	; (b5de4 <loop+0x2cc>)
   b5c14:	a80f      	add	r0, sp, #60	; 0x3c
   b5c16:	f000 fd23 	bl	b6660 <_ZNK10JsonParser12getReferenceEv>
   b5c1a:	4a75      	ldr	r2, [pc, #468]	; (b5df0 <loop+0x2d8>)
   b5c1c:	a90f      	add	r1, sp, #60	; 0x3c
   b5c1e:	a812      	add	r0, sp, #72	; 0x48
   b5c20:	f000 fe9e 	bl	b6960 <_ZNK13JsonReference3keyEPKc>
   b5c24:	4a73      	ldr	r2, [pc, #460]	; (b5df4 <loop+0x2dc>)
   b5c26:	a912      	add	r1, sp, #72	; 0x48
   b5c28:	a815      	add	r0, sp, #84	; 0x54
   b5c2a:	f000 fe99 	bl	b6960 <_ZNK13JsonReference3keyEPKc>
   b5c2e:	2200      	movs	r2, #0
   b5c30:	a915      	add	r1, sp, #84	; 0x54
   b5c32:	a819      	add	r0, sp, #100	; 0x64
   b5c34:	f000 fd82 	bl	b673c <_ZNK13JsonReference5indexEj>
   b5c38:	4a6f      	ldr	r2, [pc, #444]	; (b5df8 <loop+0x2e0>)
   b5c3a:	a919      	add	r1, sp, #100	; 0x64
   b5c3c:	a81d      	add	r0, sp, #116	; 0x74
   b5c3e:	f000 fe8f 	bl	b6960 <_ZNK13JsonReference3keyEPKc>
   b5c42:	9a04      	ldr	r2, [sp, #16]
   b5c44:	a91d      	add	r1, sp, #116	; 0x74
   b5c46:	a80c      	add	r0, sp, #48	; 0x30
   b5c48:	f000 fd78 	bl	b673c <_ZNK13JsonReference5indexEj>
   b5c4c:	a81d      	add	r0, sp, #116	; 0x74
   b5c4e:	f000 fc7f 	bl	b6550 <_ZN13JsonReferenceD1Ev>
   b5c52:	a819      	add	r0, sp, #100	; 0x64
   b5c54:	f000 fc7c 	bl	b6550 <_ZN13JsonReferenceD1Ev>
   b5c58:	a815      	add	r0, sp, #84	; 0x54
   b5c5a:	f000 fc79 	bl	b6550 <_ZN13JsonReferenceD1Ev>
   b5c5e:	a812      	add	r0, sp, #72	; 0x48
   b5c60:	f000 fc76 	bl	b6550 <_ZN13JsonReferenceD1Ev>
   b5c64:	a80f      	add	r0, sp, #60	; 0x3c
   b5c66:	f000 fc73 	bl	b6550 <_ZN13JsonReferenceD1Ev>
        String nextStation = train.key("nextStaNm").valueString();
   b5c6a:	4a64      	ldr	r2, [pc, #400]	; (b5dfc <loop+0x2e4>)
   b5c6c:	a90c      	add	r1, sp, #48	; 0x30
   b5c6e:	a81d      	add	r0, sp, #116	; 0x74
   b5c70:	f000 fe76 	bl	b6960 <_ZNK13JsonReference3keyEPKc>
   b5c74:	a91d      	add	r1, sp, #116	; 0x74
   b5c76:	a815      	add	r0, sp, #84	; 0x54
   b5c78:	f000 fe8c 	bl	b6994 <_ZNK13JsonReference11valueStringEv>
   b5c7c:	a81d      	add	r0, sp, #116	; 0x74
   b5c7e:	f000 fc67 	bl	b6550 <_ZN13JsonReferenceD1Ev>
        Serial.println(nextStation);
   b5c82:	f003 fcc9 	bl	b9618 <_Z16_fetch_usbserialv>
   b5c86:	9915      	ldr	r1, [sp, #84]	; 0x54
   b5c88:	f002 ff73 	bl	b8b72 <_ZN5Print7printlnEPKc>
        Serial.println("traindir");
   b5c8c:	f003 fcc4 	bl	b9618 <_Z16_fetch_usbserialv>
   b5c90:	495b      	ldr	r1, [pc, #364]	; (b5e00 <loop+0x2e8>)
   b5c92:	f002 ff6e 	bl	b8b72 <_ZN5Print7printlnEPKc>
        int trainDir = train.key("trDr").valueString().toInt();
   b5c96:	4a5b      	ldr	r2, [pc, #364]	; (b5e04 <loop+0x2ec>)
   b5c98:	a90c      	add	r1, sp, #48	; 0x30
   b5c9a:	a819      	add	r0, sp, #100	; 0x64
   b5c9c:	f000 fe60 	bl	b6960 <_ZNK13JsonReference3keyEPKc>
   b5ca0:	a919      	add	r1, sp, #100	; 0x64
   b5ca2:	a81d      	add	r0, sp, #116	; 0x74
   b5ca4:	f000 fe76 	bl	b6994 <_ZNK13JsonReference11valueStringEv>
   b5ca8:	a81d      	add	r0, sp, #116	; 0x74
   b5caa:	f003 f8f4 	bl	b8e96 <_ZNK6String5toIntEv>
   b5cae:	9006      	str	r0, [sp, #24]
   b5cb0:	a81d      	add	r0, sp, #116	; 0x74
   b5cb2:	f002 ffbd 	bl	b8c30 <_ZN6StringD1Ev>
   b5cb6:	a819      	add	r0, sp, #100	; 0x64
   b5cb8:	f000 fc4a 	bl	b6550 <_ZN13JsonReferenceD1Ev>
        Serial.println("lat");
   b5cbc:	f003 fcac 	bl	b9618 <_Z16_fetch_usbserialv>
   b5cc0:	4951      	ldr	r1, [pc, #324]	; (b5e08 <loop+0x2f0>)
   b5cc2:	f002 ff56 	bl	b8b72 <_ZN5Print7printlnEPKc>
        float lat = atof(train.key("lat").valueString().c_str());
   b5cc6:	4a50      	ldr	r2, [pc, #320]	; (b5e08 <loop+0x2f0>)
   b5cc8:	a90c      	add	r1, sp, #48	; 0x30
   b5cca:	a819      	add	r0, sp, #100	; 0x64
   b5ccc:	f000 fe48 	bl	b6960 <_ZNK13JsonReference3keyEPKc>
   b5cd0:	a919      	add	r1, sp, #100	; 0x64
   b5cd2:	a81d      	add	r0, sp, #116	; 0x74
   b5cd4:	f000 fe5e 	bl	b6994 <_ZNK13JsonReference11valueStringEv>
   b5cd8:	981d      	ldr	r0, [sp, #116]	; 0x74
   b5cda:	f004 fed5 	bl	baa88 <atof>
   b5cde:	ec51 0b10 	vmov	r0, r1, d0
   b5ce2:	f004 fe5d 	bl	ba9a0 <__aeabi_d2f>
   b5ce6:	ee08 0a90 	vmov	s17, r0
   b5cea:	a81d      	add	r0, sp, #116	; 0x74
   b5cec:	f002 ffa0 	bl	b8c30 <_ZN6StringD1Ev>
   b5cf0:	a819      	add	r0, sp, #100	; 0x64
   b5cf2:	f000 fc2d 	bl	b6550 <_ZN13JsonReferenceD1Ev>
        Serial.println("lon");
   b5cf6:	f003 fc8f 	bl	b9618 <_Z16_fetch_usbserialv>
   b5cfa:	4944      	ldr	r1, [pc, #272]	; (b5e0c <loop+0x2f4>)
   b5cfc:	f002 ff39 	bl	b8b72 <_ZN5Print7printlnEPKc>
        float lon = atof(train.key("lon").valueString().c_str());
   b5d00:	4a42      	ldr	r2, [pc, #264]	; (b5e0c <loop+0x2f4>)
   b5d02:	a90c      	add	r1, sp, #48	; 0x30
   b5d04:	a819      	add	r0, sp, #100	; 0x64
   b5d06:	f000 fe2b 	bl	b6960 <_ZNK13JsonReference3keyEPKc>
   b5d0a:	a919      	add	r1, sp, #100	; 0x64
   b5d0c:	a81d      	add	r0, sp, #116	; 0x74
   b5d0e:	f000 fe41 	bl	b6994 <_ZNK13JsonReference11valueStringEv>
   b5d12:	981d      	ldr	r0, [sp, #116]	; 0x74
   b5d14:	f004 feb8 	bl	baa88 <atof>
   b5d18:	ec51 0b10 	vmov	r0, r1, d0
   b5d1c:	f004 fe40 	bl	ba9a0 <__aeabi_d2f>
   b5d20:	ee08 0a10 	vmov	s16, r0
   b5d24:	a81d      	add	r0, sp, #116	; 0x74
   b5d26:	f002 ff83 	bl	b8c30 <_ZN6StringD1Ev>
   b5d2a:	a819      	add	r0, sp, #100	; 0x64
   b5d2c:	f000 fc10 	bl	b6550 <_ZN13JsonReferenceD1Ev>
        Serial.println("get data");
   b5d30:	f003 fc72 	bl	b9618 <_Z16_fetch_usbserialv>
   b5d34:	4936      	ldr	r1, [pc, #216]	; (b5e10 <loop+0x2f8>)
   b5d36:	f002 ff1c 	bl	b8b72 <_ZN5Print7printlnEPKc>
        if(nextStation.length() <= 1){
   b5d3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b5d3c:	2b01      	cmp	r3, #1
   b5d3e:	d86d      	bhi.n	b5e1c <loop+0x304>
          Serial.println("break");
   b5d40:	f003 fc6a 	bl	b9618 <_Z16_fetch_usbserialv>
   b5d44:	4933      	ldr	r1, [pc, #204]	; (b5e14 <loop+0x2fc>)
   b5d46:	f002 ff14 	bl	b8b72 <_ZN5Print7printlnEPKc>
          break;
   b5d4a:	a815      	add	r0, sp, #84	; 0x54
   b5d4c:	f002 ff70 	bl	b8c30 <_ZN6StringD1Ev>
   b5d50:	a80c      	add	r0, sp, #48	; 0x30
   b5d52:	f000 fbfd 	bl	b6550 <_ZN13JsonReferenceD1Ev>
      Wire.beginTransmission(sequenceArr[j]);
   b5d56:	f003 fdad 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b5d5a:	9b07      	ldr	r3, [sp, #28]
   b5d5c:	f853 1b04 	ldr.w	r1, [r3], #4
   b5d60:	9307      	str	r3, [sp, #28]
   b5d62:	f002 fd79 	bl	b8858 <_ZN7TwoWire17beginTransmissionEi>
      for(int i = 0; i < currentRailway.outputs.size(); i++){
   b5d66:	2500      	movs	r5, #0
        currentRailway.outputs.at(i) = 0;
   b5d68:	462e      	mov	r6, r5
   b5d6a:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
   b5d6e:	1a9b      	subs	r3, r3, r2
      for(int i = 0; i < currentRailway.outputs.size(); i++){
   b5d70:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
   b5d74:	f080 825d 	bcs.w	b6232 <loop+0x71a>
        Wire.write((char)currentRailway.outputs.at(i) + '0');
   b5d78:	f003 fd9c 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b5d7c:	4629      	mov	r1, r5
   b5d7e:	4607      	mov	r7, r0
   b5d80:	a82a      	add	r0, sp, #168	; 0xa8
   b5d82:	f7fe fdbb 	bl	b48fc <_ZNSt6vectorIiSaIiEE2atEj>
   b5d86:	7801      	ldrb	r1, [r0, #0]
   b5d88:	4638      	mov	r0, r7
   b5d8a:	3130      	adds	r1, #48	; 0x30
   b5d8c:	f7fe fa36 	bl	b41fc <_ZN7TwoWire5writeEi.isra.0>
        Serial.print(currentRailway.outputs[i]);
   b5d90:	f003 fc42 	bl	b9618 <_Z16_fetch_usbserialv>
   b5d94:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   b5d96:	220a      	movs	r2, #10
   b5d98:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   b5d9c:	f7fe f9a1 	bl	b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        currentRailway.outputs.at(i) = 0;
   b5da0:	4629      	mov	r1, r5
   b5da2:	a82a      	add	r0, sp, #168	; 0xa8
   b5da4:	f7fe fdaa 	bl	b48fc <_ZNSt6vectorIiSaIiEE2atEj>
      for(int i = 0; i < currentRailway.outputs.size(); i++){
   b5da8:	3501      	adds	r5, #1
        currentRailway.outputs.at(i) = 0;
   b5daa:	6006      	str	r6, [r0, #0]
      for(int i = 0; i < currentRailway.outputs.size(); i++){
   b5dac:	e7dd      	b.n	b5d6a <loop+0x252>
   b5dae:	bf00      	nop
   b5db0:	000bce1a 	.word	0x000bce1a
   b5db4:	2003e6b0 	.word	0x2003e6b0
   b5db8:	2003e6a0 	.word	0x2003e6a0
   b5dbc:	c28f5c29 	.word	0xc28f5c29
   b5dc0:	000bce25 	.word	0x000bce25
   b5dc4:	2003e684 	.word	0x2003e684
   b5dc8:	000bce68 	.word	0x000bce68
   b5dcc:	2003e660 	.word	0x2003e660
   b5dd0:	000bce79 	.word	0x000bce79
   b5dd4:	2003e638 	.word	0x2003e638
   b5dd8:	200323fc 	.word	0x200323fc
   b5ddc:	2003209c 	.word	0x2003209c
   b5de0:	000bce7d 	.word	0x000bce7d
   b5de4:	20034c7c 	.word	0x20034c7c
   b5de8:	000bce85 	.word	0x000bce85
   b5dec:	000bce94 	.word	0x000bce94
   b5df0:	000bce9a 	.word	0x000bce9a
   b5df4:	000bcea0 	.word	0x000bcea0
   b5df8:	000bcea6 	.word	0x000bcea6
   b5dfc:	000bceac 	.word	0x000bceac
   b5e00:	000bceb6 	.word	0x000bceb6
   b5e04:	000bcebf 	.word	0x000bcebf
   b5e08:	000bcec4 	.word	0x000bcec4
   b5e0c:	000bcec8 	.word	0x000bcec8
   b5e10:	000bcecc 	.word	0x000bcecc
   b5e14:	000bced5 	.word	0x000bced5
   b5e18:	2003e5c8 	.word	0x2003e5c8
        Serial.print(String(currentRailway.name.c_str()) + " ");
   b5e1c:	f003 fbfc 	bl	b9618 <_Z16_fetch_usbserialv>
   b5e20:	992d      	ldr	r1, [sp, #180]	; 0xb4
   b5e22:	4606      	mov	r6, r0
   b5e24:	a819      	add	r0, sp, #100	; 0x64
   b5e26:	f002 ff4e 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
	StringSumHelper(const String &s) : String(s) {}
   b5e2a:	a919      	add	r1, sp, #100	; 0x64
   b5e2c:	a81d      	add	r0, sp, #116	; 0x74
   b5e2e:	f002 ff6d 	bl	b8d0c <_ZN6StringC1ERKS_>
   b5e32:	49cb      	ldr	r1, [pc, #812]	; (b6160 <loop+0x648>)
   b5e34:	a81d      	add	r0, sp, #116	; 0x74
   b5e36:	f002 ffcd 	bl	b8dd4 <_ZplRK15StringSumHelperPKc>
   b5e3a:	6801      	ldr	r1, [r0, #0]
   b5e3c:	4630      	mov	r0, r6
   b5e3e:	f002 fe85 	bl	b8b4c <_ZN5Print5printEPKc>
class StringSumHelper : public String
   b5e42:	a81d      	add	r0, sp, #116	; 0x74
   b5e44:	f002 fef4 	bl	b8c30 <_ZN6StringD1Ev>
   b5e48:	a819      	add	r0, sp, #100	; 0x64
   b5e4a:	f002 fef1 	bl	b8c30 <_ZN6StringD1Ev>
        Serial.printf("train %i: ", count);
   b5e4e:	f003 fbe3 	bl	b9618 <_Z16_fetch_usbserialv>
   b5e52:	9a04      	ldr	r2, [sp, #16]
   b5e54:	49c3      	ldr	r1, [pc, #780]	; (b6164 <loop+0x64c>)
   b5e56:	f7fe fab9 	bl	b43cc <_ZN5Print6printfEPKcz>
   b5e5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   b5e5e:	1a9b      	subs	r3, r3, r2
   b5e60:	10db      	asrs	r3, r3, #3
   b5e62:	9305      	str	r3, [sp, #20]
        for(int i = 0; i < checkpointCount; i++){
   b5e64:	f04f 0b00 	mov.w	fp, #0
   b5e68:	9b05      	ldr	r3, [sp, #20]
   b5e6a:	459b      	cmp	fp, r3
   b5e6c:	da3c      	bge.n	b5ee8 <loop+0x3d0>
          currentRailway.distances.at(i) = currentCheckpoints.at(i).getDistance(lat, lon);
   b5e6e:	4659      	mov	r1, fp
   b5e70:	a809      	add	r0, sp, #36	; 0x24
   b5e72:	f7fe fd31 	bl	b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
    }

    float getDistance(float trainLat, float trainLon){
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b5e76:	edd0 7a00 	vldr	s15, [r0]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b5e7a:	ee78 7ae7 	vsub.f32	s15, s17, s15
   b5e7e:	4606      	mov	r6, r0
   b5e80:	ee17 0a90 	vmov	r0, s15
   b5e84:	f004 fa64 	bl	ba350 <__aeabi_f2d>
   b5e88:	edd6 7a01 	vldr	s15, [r6, #4]
   b5e8c:	ee78 7a67 	vsub.f32	s15, s16, s15
   b5e90:	4680      	mov	r8, r0
   b5e92:	ee17 0a90 	vmov	r0, s15
   b5e96:	4689      	mov	r9, r1
   b5e98:	f004 fa5a 	bl	ba350 <__aeabi_f2d>
   b5e9c:	4602      	mov	r2, r0
   b5e9e:	460b      	mov	r3, r1
   b5ea0:	f004 faae 	bl	ba400 <__aeabi_dmul>
   b5ea4:	4642      	mov	r2, r8
   b5ea6:	4606      	mov	r6, r0
   b5ea8:	460f      	mov	r7, r1
   b5eaa:	464b      	mov	r3, r9
   b5eac:	4640      	mov	r0, r8
   b5eae:	4649      	mov	r1, r9
   b5eb0:	f004 faa6 	bl	ba400 <__aeabi_dmul>
   b5eb4:	4602      	mov	r2, r0
   b5eb6:	460b      	mov	r3, r1
   b5eb8:	4630      	mov	r0, r6
   b5eba:	4639      	mov	r1, r7
   b5ebc:	f004 f8ea 	bl	ba094 <__adddf3>
   b5ec0:	ec41 0b10 	vmov	d0, r0, r1
   b5ec4:	f003 ffda 	bl	b9e7c <sqrt>
   b5ec8:	4659      	mov	r1, fp
   b5eca:	a824      	add	r0, sp, #144	; 0x90
   b5ecc:	ec57 6b10 	vmov	r6, r7, d0
   b5ed0:	f7fe fcf0 	bl	b48b4 <_ZNSt6vectorIfSaIfEE2atEj>
   b5ed4:	4639      	mov	r1, r7
   b5ed6:	4680      	mov	r8, r0
   b5ed8:	4630      	mov	r0, r6
   b5eda:	f004 fd61 	bl	ba9a0 <__aeabi_d2f>
        for(int i = 0; i < checkpointCount; i++){
   b5ede:	f10b 0b01 	add.w	fp, fp, #1
   b5ee2:	f8c8 0000 	str.w	r0, [r8]
   b5ee6:	e7bf      	b.n	b5e68 <loop+0x350>
        Serial.println("distance calculation");
   b5ee8:	f003 fb96 	bl	b9618 <_Z16_fetch_usbserialv>
   b5eec:	499e      	ldr	r1, [pc, #632]	; (b6168 <loop+0x650>)
   b5eee:	f002 fe40 	bl	b8b72 <_ZN5Print7printlnEPKc>
      : _M_current(__i) { }
   b5ef2:	e9dd 2624 	ldrd	r2, r6, [sp, #144]	; 0x90
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
   b5ef6:	42b2      	cmp	r2, r6
   b5ef8:	d011      	beq.n	b5f1e <loop+0x406>
   b5efa:	1d11      	adds	r1, r2, #4
   b5efc:	4613      	mov	r3, r2
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
   b5efe:	428e      	cmp	r6, r1
	++_M_current;
   b5f00:	4608      	mov	r0, r1
   b5f02:	d00d      	beq.n	b5f20 <loop+0x408>
	if (__comp(__first, __result))
   b5f04:	edd3 7a00 	vldr	s15, [r3]
   b5f08:	ed90 7a00 	vldr	s14, [r0]
   b5f0c:	eeb4 7a67 	vcmp.f32	s14, s15
   b5f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5f14:	f101 0104 	add.w	r1, r1, #4
   b5f18:	bf48      	it	mi
   b5f1a:	4603      	movmi	r3, r0
   b5f1c:	e7ef      	b.n	b5efe <loop+0x3e6>
   b5f1e:	4613      	mov	r3, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b5f20:	1a9b      	subs	r3, r3, r2
        if(closestIndex == currentRailway.tripleIndex){
   b5f22:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   b5f24:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
   b5f28:	ea4f 06a3 	mov.w	r6, r3, asr #2
          closestIndex = currentRailway.loopIndex;
   b5f2c:	bf08      	it	eq
   b5f2e:	9e37      	ldreq	r6, [sp, #220]	; 0xdc
        Serial.println("closest index");
   b5f30:	f003 fb72 	bl	b9618 <_Z16_fetch_usbserialv>
   b5f34:	498d      	ldr	r1, [pc, #564]	; (b616c <loop+0x654>)
   b5f36:	f002 fe1c 	bl	b8b72 <_ZN5Print7printlnEPKc>
        x1 = currentCheckpoints.at(closestIndex).lat;
   b5f3a:	4631      	mov	r1, r6
   b5f3c:	a809      	add	r0, sp, #36	; 0x24
   b5f3e:	f7fe fccb 	bl	b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
   b5f42:	edd0 7a00 	vldr	s15, [r0]
        y1 = currentCheckpoints.at(closestIndex).lon;
   b5f46:	ed90 7a01 	vldr	s14, [r0, #4]
        if(currentCheckpoints.at(closestIndex).lat > lat){
   b5f4a:	eef4 8ae7 	vcmpe.f32	s17, s15
   b5f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          slope = (y1 - y) / (x1 - x);
   b5f52:	bf4b      	itete	mi
   b5f54:	ee77 7ae8 	vsubmi.f32	s15, s15, s17
          slope = (y - y1) / (x - x1);
   b5f58:	ee78 7ae7 	vsubpl.f32	s15, s17, s15
          slope = (y1 - y) / (x1 - x);
   b5f5c:	ee37 7a48 	vsubmi.f32	s14, s14, s16
          slope = (y - y1) / (x - x1);
   b5f60:	ee38 7a47 	vsubpl.f32	s14, s16, s14
   b5f64:	eec7 9a27 	vdiv.f32	s19, s14, s15
        Serial.println("slope");
   b5f68:	f003 fb56 	bl	b9618 <_Z16_fetch_usbserialv>
   b5f6c:	4980      	ldr	r1, [pc, #512]	; (b6170 <loop+0x658>)
   b5f6e:	f002 fe00 	bl	b8b72 <_ZN5Print7printlnEPKc>
        if(closestIndex == 0){
   b5f72:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
          pointSide = (-1 / slope * (currentCheckpoints.at(closestIndex + 1).lat - x) + y) > currentCheckpoints.at(closestIndex + 1).lon;
   b5f76:	ee87 9aa9 	vdiv.f32	s18, s15, s19
        if(closestIndex == 0){
   b5f7a:	2e00      	cmp	r6, #0
   b5f7c:	f040 808a 	bne.w	b6094 <loop+0x57c>
          pointSide = (-1 / slope * (currentCheckpoints.at(closestIndex + 1).lat - x) + y) > currentCheckpoints.at(closestIndex + 1).lon;
   b5f80:	2101      	movs	r1, #1
   b5f82:	a809      	add	r0, sp, #36	; 0x24
   b5f84:	f7fe fca8 	bl	b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
          nearestSide = (-1 / slope * (currentCheckpoints.at(closestIndex).lat - x) + y) > currentCheckpoints.at(closestIndex).lon;
   b5f88:	4631      	mov	r1, r6
          pointSide = (-1 / slope * (currentCheckpoints.at(closestIndex + 1).lat - x) + y) > currentCheckpoints.at(closestIndex + 1).lon;
   b5f8a:	edd0 7a00 	vldr	s15, [r0]
   b5f8e:	ee77 7ae8 	vsub.f32	s15, s15, s17
   b5f92:	eeb0 7a48 	vmov.f32	s14, s16
   b5f96:	eea9 7a27 	vfma.f32	s14, s18, s15
   b5f9a:	edd0 7a01 	vldr	s15, [r0, #4]
   b5f9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b5fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          nearestSide = (-1 / slope * (currentCheckpoints.at(closestIndex).lat - x) + y) > currentCheckpoints.at(closestIndex).lon;
   b5fa6:	a809      	add	r0, sp, #36	; 0x24
          pointSide = (-1 / slope * (currentCheckpoints.at(closestIndex + 1).lat - x) + y) > currentCheckpoints.at(closestIndex + 1).lon;
   b5fa8:	bfcc      	ite	gt
   b5faa:	2701      	movgt	r7, #1
   b5fac:	2700      	movle	r7, #0
          nearestSide = (-1 / slope * (currentCheckpoints.at(closestIndex).lat - x) + y) > currentCheckpoints.at(closestIndex).lon;
   b5fae:	f7fe fc93 	bl	b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
   b5fb2:	edd0 7a00 	vldr	s15, [r0]
          if(currentRailway.loopIndex == closestIndex){
   b5fb6:	f8dd 90dc 	ldr.w	r9, [sp, #220]	; 0xdc
          nearestSide = (-1 / slope * (currentCheckpoints.at(closestIndex).lat - x) + y) > currentCheckpoints.at(closestIndex).lon;
   b5fba:	ee77 7ae8 	vsub.f32	s15, s15, s17
   b5fbe:	eeb0 7a48 	vmov.f32	s14, s16
   b5fc2:	eea9 7a27 	vfma.f32	s14, s18, s15
   b5fc6:	edd0 7a01 	vldr	s15, [r0, #4]
   b5fca:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b5fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5fd2:	bfcc      	ite	gt
   b5fd4:	f04f 0801 	movgt.w	r8, #1
   b5fd8:	f04f 0800 	movle.w	r8, #0
          if(currentRailway.loopIndex == closestIndex){
   b5fdc:	f1b9 0f00 	cmp.w	r9, #0
   b5fe0:	d11c      	bne.n	b601c <loop+0x504>
            loopPointSide = (-1 / slope * (currentCheckpoints.at(currentRailway.tripleIndex - 1).lat - x) + y) > currentCheckpoints.at(currentRailway.tripleIndex - 1).lon;
   b5fe2:	9e36      	ldr	r6, [sp, #216]	; 0xd8
   b5fe4:	1e74      	subs	r4, r6, #1
   b5fe6:	4621      	mov	r1, r4
   b5fe8:	a809      	add	r0, sp, #36	; 0x24
   b5fea:	f7fe fc75 	bl	b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
            if(nearestSide != pointSide){
   b5fee:	4547      	cmp	r7, r8
            loopPointSide = (-1 / slope * (currentCheckpoints.at(currentRailway.tripleIndex - 1).lat - x) + y) > currentCheckpoints.at(currentRailway.tripleIndex - 1).lon;
   b5ff0:	edd0 7a00 	vldr	s15, [r0]
   b5ff4:	ed90 7a01 	vldr	s14, [r0, #4]
            if(nearestSide != pointSide){
   b5ff8:	f040 80ae 	bne.w	b6158 <loop+0x640>
            loopPointSide = (-1 / slope * (currentCheckpoints.at(currentRailway.tripleIndex - 1).lat - x) + y) > currentCheckpoints.at(currentRailway.tripleIndex - 1).lon;
   b5ffc:	ee77 8ae8 	vsub.f32	s17, s15, s17
   b6000:	eea9 8a28 	vfma.f32	s16, s18, s17
   b6004:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b6008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            }else if(nearestSide != loopPointSide){
   b600c:	bfcc      	ite	gt
   b600e:	2301      	movgt	r3, #1
   b6010:	2300      	movle	r3, #0
   b6012:	42bb      	cmp	r3, r7
   b6014:	f040 8082 	bne.w	b611c <loop+0x604>
              secondClosestIndex = closestIndex + 1;
   b6018:	1c74      	adds	r4, r6, #1
   b601a:	e07f      	b.n	b611c <loop+0x604>
              validTrain = false;
   b601c:	4547      	cmp	r7, r8
   b601e:	bf16      	itet	ne
   b6020:	46a8      	movne	r8, r5
   b6022:	f04f 0800 	moveq.w	r8, #0
   b6026:	2401      	movne	r4, #1
        Serial.println("second closest index");
   b6028:	f003 faf6 	bl	b9618 <_Z16_fetch_usbserialv>
   b602c:	4951      	ldr	r1, [pc, #324]	; (b6174 <loop+0x65c>)
   b602e:	f002 fda0 	bl	b8b72 <_ZN5Print7printlnEPKc>
        if(validTrain){
   b6032:	f1b8 0f00 	cmp.w	r8, #0
   b6036:	f000 80ed 	beq.w	b6214 <loop+0x6fc>
          if(closestIndex < secondClosestIndex){
   b603a:	42a6      	cmp	r6, r4
   b603c:	f280 809c 	bge.w	b6178 <loop+0x660>
            segmentPos = currentRailway.distances.at(closestIndex) / (currentRailway.distances.at(closestIndex) + currentRailway.distances.at(secondClosestIndex));
   b6040:	4631      	mov	r1, r6
   b6042:	a824      	add	r0, sp, #144	; 0x90
   b6044:	f7fe fc36 	bl	b48b4 <_ZNSt6vectorIfSaIfEE2atEj>
   b6048:	4621      	mov	r1, r4
   b604a:	edd0 8a00 	vldr	s17, [r0]
   b604e:	a824      	add	r0, sp, #144	; 0x90
   b6050:	f7fe fc30 	bl	b48b4 <_ZNSt6vectorIfSaIfEE2atEj>
   b6054:	edd0 7a00 	vldr	s15, [r0]
   b6058:	ee78 7aa7 	vadd.f32	s15, s17, s15
            segmentPos *= currentRailway.scalers.at(closestIndex);
   b605c:	4631      	mov	r1, r6
            segmentPos = currentRailway.distances.at(closestIndex) / (currentRailway.distances.at(closestIndex) + currentRailway.distances.at(secondClosestIndex));
   b605e:	ee88 9aa7 	vdiv.f32	s18, s17, s15
            segmentPos *= currentRailway.scalers.at(closestIndex);
   b6062:	a827      	add	r0, sp, #156	; 0x9c
   b6064:	f7fe fc4a 	bl	b48fc <_ZNSt6vectorIiSaIiEE2atEj>
            for(int i = 0; i < closestIndex; i++){
   b6068:	2700      	movs	r7, #0
            segmentPos *= currentRailway.scalers.at(closestIndex);
   b606a:	ed90 8a00 	vldr	s16, [r0]
   b606e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   b6072:	ee28 8a09 	vmul.f32	s16, s16, s18
            for(int i = 0; i < closestIndex; i++){
   b6076:	42be      	cmp	r6, r7
   b6078:	f340 80a7 	ble.w	b61ca <loop+0x6b2>
              segmentPos += currentRailway.scalers.at(i);
   b607c:	4639      	mov	r1, r7
   b607e:	a827      	add	r0, sp, #156	; 0x9c
   b6080:	f7fe fc3c 	bl	b48fc <_ZNSt6vectorIiSaIiEE2atEj>
   b6084:	edd0 7a00 	vldr	s15, [r0]
   b6088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            for(int i = 0; i < closestIndex; i++){
   b608c:	3701      	adds	r7, #1
              segmentPos += currentRailway.scalers.at(i);
   b608e:	ee38 8a27 	vadd.f32	s16, s16, s15
            for(int i = 0; i < closestIndex; i++){
   b6092:	e7f0      	b.n	b6076 <loop+0x55e>
          pointSide = (-1 / slope * (currentCheckpoints.at(closestIndex - 1).lat - x) + y) > currentCheckpoints.at(closestIndex - 1).lon;
   b6094:	1e77      	subs	r7, r6, #1
   b6096:	4639      	mov	r1, r7
   b6098:	a809      	add	r0, sp, #36	; 0x24
   b609a:	f7fe fc1d 	bl	b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
   b609e:	edd0 7a00 	vldr	s15, [r0]
   b60a2:	ee77 7ae8 	vsub.f32	s15, s15, s17
   b60a6:	eeb0 7a48 	vmov.f32	s14, s16
   b60aa:	eea9 7a27 	vfma.f32	s14, s18, s15
          nearestSide = (-1 / slope * (currentCheckpoints.at(closestIndex).lat - x) + y) > currentCheckpoints.at(closestIndex).lon;
   b60ae:	4631      	mov	r1, r6
          pointSide = (-1 / slope * (currentCheckpoints.at(closestIndex - 1).lat - x) + y) > currentCheckpoints.at(closestIndex - 1).lon;
   b60b0:	edd0 7a01 	vldr	s15, [r0, #4]
   b60b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b60b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          nearestSide = (-1 / slope * (currentCheckpoints.at(closestIndex).lat - x) + y) > currentCheckpoints.at(closestIndex).lon;
   b60bc:	a809      	add	r0, sp, #36	; 0x24
          pointSide = (-1 / slope * (currentCheckpoints.at(closestIndex - 1).lat - x) + y) > currentCheckpoints.at(closestIndex - 1).lon;
   b60be:	bfcc      	ite	gt
   b60c0:	f04f 0801 	movgt.w	r8, #1
   b60c4:	f04f 0800 	movle.w	r8, #0
          nearestSide = (-1 / slope * (currentCheckpoints.at(closestIndex).lat - x) + y) > currentCheckpoints.at(closestIndex).lon;
   b60c8:	f7fe fc06 	bl	b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
   b60cc:	edd0 7a00 	vldr	s15, [r0]
          if(closestIndex == checkpointCount - 1){
   b60d0:	9b05      	ldr	r3, [sp, #20]
          nearestSide = (-1 / slope * (currentCheckpoints.at(closestIndex).lat - x) + y) > currentCheckpoints.at(closestIndex).lon;
   b60d2:	ee77 7ae8 	vsub.f32	s15, s15, s17
   b60d6:	eeb0 7a48 	vmov.f32	s14, s16
   b60da:	eea9 7a27 	vfma.f32	s14, s18, s15
          if(closestIndex == checkpointCount - 1){
   b60de:	3b01      	subs	r3, #1
          nearestSide = (-1 / slope * (currentCheckpoints.at(closestIndex).lat - x) + y) > currentCheckpoints.at(closestIndex).lon;
   b60e0:	edd0 7a01 	vldr	s15, [r0, #4]
   b60e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b60e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b60ec:	bfcc      	ite	gt
   b60ee:	f04f 0901 	movgt.w	r9, #1
   b60f2:	f04f 0900 	movle.w	r9, #0
          if(closestIndex == checkpointCount - 1){
   b60f6:	42b3      	cmp	r3, r6
   b60f8:	d128      	bne.n	b614c <loop+0x634>
            if(closestIndex == currentRailway.loopIndex){
   b60fa:	9b37      	ldr	r3, [sp, #220]	; 0xdc
   b60fc:	42b3      	cmp	r3, r6
   b60fe:	d120      	bne.n	b6142 <loop+0x62a>
              loopPointSide = (-1 / slope * (currentCheckpoints.at(currentRailway.tripleIndex - 1).lat - x) + y) > currentCheckpoints.at(currentRailway.tripleIndex - 1).lon;
   b6100:	9f36      	ldr	r7, [sp, #216]	; 0xd8
   b6102:	1e7c      	subs	r4, r7, #1
   b6104:	4621      	mov	r1, r4
   b6106:	a809      	add	r0, sp, #36	; 0x24
   b6108:	f7fe fbe6 	bl	b48d8 <_ZNSt6vectorI10CheckpointSaIS0_EE2atEj>
              if(nearestSide != pointSide){
   b610c:	45c8      	cmp	r8, r9
              loopPointSide = (-1 / slope * (currentCheckpoints.at(currentRailway.tripleIndex - 1).lat - x) + y) > currentCheckpoints.at(currentRailway.tripleIndex - 1).lon;
   b610e:	edd0 7a00 	vldr	s15, [r0]
   b6112:	ed90 7a01 	vldr	s14, [r0, #4]
              if(nearestSide != pointSide){
   b6116:	d003      	beq.n	b6120 <loop+0x608>
                secondClosestIndex = checkpointCount - 2;
   b6118:	9b05      	ldr	r3, [sp, #20]
   b611a:	1e9c      	subs	r4, r3, #2
        bool validTrain = true;
   b611c:	46a8      	mov	r8, r5
   b611e:	e783      	b.n	b6028 <loop+0x510>
              loopPointSide = (-1 / slope * (currentCheckpoints.at(currentRailway.tripleIndex - 1).lat - x) + y) > currentCheckpoints.at(currentRailway.tripleIndex - 1).lon;
   b6120:	ee77 8ae8 	vsub.f32	s17, s15, s17
   b6124:	eea9 8a28 	vfma.f32	s16, s18, s17
   b6128:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b612c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              }else if(nearestSide != loopPointSide){
   b6130:	bfcc      	ite	gt
   b6132:	2301      	movgt	r3, #1
   b6134:	2300      	movle	r3, #0
   b6136:	4543      	cmp	r3, r8
   b6138:	d100      	bne.n	b613c <loop+0x624>
                secondClosestIndex = currentRailway.tripleIndex + 1;
   b613a:	1c7c      	adds	r4, r7, #1
        bool validTrain = true;
   b613c:	46a8      	mov	r8, r5
                closestIndex = currentRailway.tripleIndex;
   b613e:	463e      	mov	r6, r7
   b6140:	e772      	b.n	b6028 <loop+0x510>
              if(pointSide == nearestSide){
   b6142:	45c8      	cmp	r8, r9
   b6144:	d1e8      	bne.n	b6118 <loop+0x600>
                validTrain = false;
   b6146:	f04f 0800 	mov.w	r8, #0
   b614a:	e76d      	b.n	b6028 <loop+0x510>
            if(pointSide == nearestSide){
   b614c:	45c8      	cmp	r8, r9
   b614e:	f43f af63 	beq.w	b6018 <loop+0x500>
        bool validTrain = true;
   b6152:	46a8      	mov	r8, r5
              secondClosestIndex = closestIndex - 1;
   b6154:	463c      	mov	r4, r7
   b6156:	e767      	b.n	b6028 <loop+0x510>
        bool validTrain = true;
   b6158:	46a8      	mov	r8, r5
   b615a:	464e      	mov	r6, r9
              secondClosestIndex = 1;
   b615c:	2401      	movs	r4, #1
   b615e:	e763      	b.n	b6028 <loop+0x510>
   b6160:	000bd48f 	.word	0x000bd48f
   b6164:	000bcedb 	.word	0x000bcedb
   b6168:	000bcee6 	.word	0x000bcee6
   b616c:	000bcf08 	.word	0x000bcf08
   b6170:	000bcefb 	.word	0x000bcefb
   b6174:	000bcf01 	.word	0x000bcf01
            segmentPos = currentRailway.distances.at(secondClosestIndex) / (currentRailway.distances.at(closestIndex) + currentRailway.distances.at(secondClosestIndex));
   b6178:	4621      	mov	r1, r4
   b617a:	a824      	add	r0, sp, #144	; 0x90
   b617c:	f7fe fb9a 	bl	b48b4 <_ZNSt6vectorIfSaIfEE2atEj>
   b6180:	4631      	mov	r1, r6
   b6182:	edd0 8a00 	vldr	s17, [r0]
   b6186:	a824      	add	r0, sp, #144	; 0x90
   b6188:	f7fe fb94 	bl	b48b4 <_ZNSt6vectorIfSaIfEE2atEj>
   b618c:	edd0 7a00 	vldr	s15, [r0]
   b6190:	ee78 7aa7 	vadd.f32	s15, s17, s15
            segmentPos *= currentRailway.scalers.at(secondClosestIndex);
   b6194:	4621      	mov	r1, r4
            segmentPos = currentRailway.distances.at(secondClosestIndex) / (currentRailway.distances.at(closestIndex) + currentRailway.distances.at(secondClosestIndex));
   b6196:	ee88 9aa7 	vdiv.f32	s18, s17, s15
            segmentPos *= currentRailway.scalers.at(secondClosestIndex);
   b619a:	a827      	add	r0, sp, #156	; 0x9c
   b619c:	f7fe fbae 	bl	b48fc <_ZNSt6vectorIiSaIiEE2atEj>
            for(int i = 0; i < secondClosestIndex; i++){
   b61a0:	2700      	movs	r7, #0
            segmentPos *= currentRailway.scalers.at(secondClosestIndex);
   b61a2:	ed90 8a00 	vldr	s16, [r0]
   b61a6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   b61aa:	ee28 8a09 	vmul.f32	s16, s16, s18
            for(int i = 0; i < secondClosestIndex; i++){
   b61ae:	42bc      	cmp	r4, r7
   b61b0:	dd0b      	ble.n	b61ca <loop+0x6b2>
              segmentPos += currentRailway.scalers.at(i);
   b61b2:	4639      	mov	r1, r7
   b61b4:	a827      	add	r0, sp, #156	; 0x9c
   b61b6:	f7fe fba1 	bl	b48fc <_ZNSt6vectorIiSaIiEE2atEj>
   b61ba:	edd0 7a00 	vldr	s15, [r0]
   b61be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            for(int i = 0; i < secondClosestIndex; i++){
   b61c2:	3701      	adds	r7, #1
              segmentPos += currentRailway.scalers.at(i);
   b61c4:	ee38 8a27 	vadd.f32	s16, s16, s15
            for(int i = 0; i < secondClosestIndex; i++){
   b61c8:	e7f1      	b.n	b61ae <loop+0x696>
          if(currentRailway.loopIndex == 0 && closestIndex >= currentRailway.lowerLoopBound && closestIndex <= currentRailway.upperLoopBound && secondClosestIndex >= currentRailway.lowerLoopBound && secondClosestIndex <= currentRailway.upperLoopBound){
   b61ca:	9b37      	ldr	r3, [sp, #220]	; 0xdc
   b61cc:	b96b      	cbnz	r3, b61ea <loop+0x6d2>
   b61ce:	9a38      	ldr	r2, [sp, #224]	; 0xe0
   b61d0:	42b2      	cmp	r2, r6
   b61d2:	dc0a      	bgt.n	b61ea <loop+0x6d2>
   b61d4:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   b61d6:	42b3      	cmp	r3, r6
   b61d8:	db07      	blt.n	b61ea <loop+0x6d2>
   b61da:	42a2      	cmp	r2, r4
   b61dc:	dc05      	bgt.n	b61ea <loop+0x6d2>
   b61de:	42a3      	cmp	r3, r4
            trainDir = 6 - trainDir;
   b61e0:	bfa2      	ittt	ge
   b61e2:	9b06      	ldrge	r3, [sp, #24]
   b61e4:	f1c3 0306 	rsbge	r3, r3, #6
   b61e8:	9306      	strge	r3, [sp, #24]
  { return __builtin_floorf(__x); }
   b61ea:	eeb0 0a48 	vmov.f32	s0, s16
   b61ee:	f003 fdff 	bl	b9df0 <floorf>
          currentRailway.outputs.at((int)floor(segmentPos) + 1) = trainDir;
   b61f2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b61f6:	a82a      	add	r0, sp, #168	; 0xa8
   b61f8:	ee17 1a90 	vmov	r1, s15
   b61fc:	3101      	adds	r1, #1
   b61fe:	f7fe fb7d 	bl	b48fc <_ZNSt6vectorIiSaIiEE2atEj>
   b6202:	9b06      	ldr	r3, [sp, #24]
   b6204:	6003      	str	r3, [r0, #0]
          Serial.printlnf("%i, %i", closestIndex, secondClosestIndex);
   b6206:	f003 fa07 	bl	b9618 <_Z16_fetch_usbserialv>
   b620a:	491e      	ldr	r1, [pc, #120]	; (b6284 <loop+0x76c>)
   b620c:	4623      	mov	r3, r4
   b620e:	4632      	mov	r2, r6
   b6210:	f7fe f8ea 	bl	b43e8 <_ZN5Print8printlnfEPKcz>
        Serial.println("segment pos");
   b6214:	f003 fa00 	bl	b9618 <_Z16_fetch_usbserialv>
   b6218:	491b      	ldr	r1, [pc, #108]	; (b6288 <loop+0x770>)
   b621a:	f002 fcaa 	bl	b8b72 <_ZN5Print7printlnEPKc>
        count++;
   b621e:	9b04      	ldr	r3, [sp, #16]
        String nextStation = train.key("nextStaNm").valueString();
   b6220:	a815      	add	r0, sp, #84	; 0x54
        count++;
   b6222:	3301      	adds	r3, #1
   b6224:	9304      	str	r3, [sp, #16]
        String nextStation = train.key("nextStaNm").valueString();
   b6226:	f002 fd03 	bl	b8c30 <_ZN6StringD1Ev>
        JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   b622a:	a80c      	add	r0, sp, #48	; 0x30
   b622c:	f000 f990 	bl	b6550 <_ZN13JsonReferenceD1Ev>
   b6230:	e4ea      	b.n	b5c08 <loop+0xf0>
      Wire.endTransmission();
   b6232:	f003 fb3f 	bl	b98b4 <_Z19__fetch_global_Wirev>
   b6236:	f002 fb16 	bl	b8866 <_ZN7TwoWire15endTransmissionEv>
      Serial.println();
   b623a:	f003 f9ed 	bl	b9618 <_Z16_fetch_usbserialv>
   b623e:	f002 fc8c 	bl	b8b5a <_ZN5Print7printlnEv>
      Serial.println("send to slave");
   b6242:	f003 f9e9 	bl	b9618 <_Z16_fetch_usbserialv>
   b6246:	4911      	ldr	r1, [pc, #68]	; (b628c <loop+0x774>)
   b6248:	f002 fc93 	bl	b8b72 <_ZN5Print7printlnEPKc>
      }
   b624c:	a809      	add	r0, sp, #36	; 0x24
   b624e:	f7fe fa45 	bl	b46dc <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      Railway currentRailway = railways.at(j);
   b6252:	a821      	add	r0, sp, #132	; 0x84
   b6254:	f7fe fa73 	bl	b473e <_ZN7RailwayD1Ev>
    for(int j = 0; j < railways.size(); j++){
   b6258:	9b03      	ldr	r3, [sp, #12]
   b625a:	3301      	adds	r3, #1
   b625c:	e470      	b.n	b5b40 <loop+0x28>
    Serial.println();
   b625e:	f003 f9db 	bl	b9618 <_Z16_fetch_usbserialv>
   b6262:	f002 fc7a 	bl	b8b5a <_ZN5Print7printlnEv>
  while(userInput){
   b6266:	e463      	b.n	b5b30 <loop+0x18>
  Serial.println();
   b6268:	f003 f9d6 	bl	b9618 <_Z16_fetch_usbserialv>
   b626c:	f002 fc75 	bl	b8b5a <_ZN5Print7printlnEv>
  delay(1000);
   b6270:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b6274:	b03b      	add	sp, #236	; 0xec
   b6276:	ecbd 8b04 	vpop	{d8-d9}
   b627a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  delay(1000);
   b627e:	f001 b889 	b.w	b7394 <delay>
   b6282:	bf00      	nop
   b6284:	000bcf16 	.word	0x000bcf16
   b6288:	000bcf1d 	.word	0x000bcf1d
   b628c:	000bcf29 	.word	0x000bcf29

000b6290 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b6290:	b510      	push	{r4, lr}
   b6292:	4604      	mov	r4, r0
   b6294:	f003 f8f2 	bl	b947c <_ZN9TCPClientC1Ev>
{

}
   b6298:	4620      	mov	r0, r4
   b629a:	bd10      	pop	{r4, pc}

000b629c <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b629c:	b538      	push	{r3, r4, r5, lr}
   b629e:	4604      	mov	r4, r0
   b62a0:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b62a2:	f002 fc53 	bl	b8b4c <_ZN5Print5printEPKc>
    client.print(": ");
   b62a6:	4905      	ldr	r1, [pc, #20]	; (b62bc <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b62a8:	4620      	mov	r0, r4
   b62aa:	f002 fc4f 	bl	b8b4c <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b62ae:	4629      	mov	r1, r5
   b62b0:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b62b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b62b6:	f002 bc5c 	b.w	b8b72 <_ZN5Print7printlnEPKc>
   b62ba:	bf00      	nop
   b62bc:	000bccf6 	.word	0x000bccf6

000b62c0 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b62c0:	b538      	push	{r3, r4, r5, lr}
   b62c2:	4605      	mov	r5, r0
   b62c4:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b62c6:	f002 fc41 	bl	b8b4c <_ZN5Print5printEPKc>
    client.print(": ");
   b62ca:	490b      	ldr	r1, [pc, #44]	; (b62f8 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b62cc:	4628      	mov	r0, r5
   b62ce:	f002 fc3d 	bl	b8b4c <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b62d2:	2c00      	cmp	r4, #0
   b62d4:	da0d      	bge.n	b62f2 <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b62d6:	212d      	movs	r1, #45	; 0x2d
   b62d8:	4628      	mov	r0, r5
   b62da:	f002 fc3b 	bl	b8b54 <_ZN5Print5printEc>
            val = -n;
   b62de:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b62e0:	4628      	mov	r0, r5
   b62e2:	220a      	movs	r2, #10
   b62e4:	f002 fc4f 	bl	b8b86 <_ZN5Print11printNumberEmh>
        n += println();
   b62e8:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b62ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b62ee:	f002 bc34 	b.w	b8b5a <_ZN5Print7printlnEv>
            val = n;
   b62f2:	4621      	mov	r1, r4
   b62f4:	e7f4      	b.n	b62e0 <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b62f6:	bf00      	nop
   b62f8:	000bccf6 	.word	0x000bccf6

000b62fc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b62fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6300:	460e      	mov	r6, r1
   b6302:	b091      	sub	sp, #68	; 0x44
   b6304:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b6306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b630a:	6013      	str	r3, [r2, #0]
{
   b630c:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b630e:	2100      	movs	r1, #0
   b6310:	4630      	mov	r0, r6
   b6312:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b6316:	4617      	mov	r7, r2
   b6318:	f002 fd71 	bl	b8dfe <_ZNK6String6equalsEPKc>
   b631c:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b6320:	4603      	mov	r3, r0
   b6322:	b998      	cbnz	r0, b634c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b6324:	f1be 0f00 	cmp.w	lr, #0
   b6328:	bf14      	ite	ne
   b632a:	4672      	movne	r2, lr
   b632c:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b632e:	6831      	ldr	r1, [r6, #0]
   b6330:	b292      	uxth	r2, r2
   b6332:	4620      	mov	r0, r4
   b6334:	f002 fea2 	bl	b907c <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b6338:	1e05      	subs	r5, r0, #0
   b633a:	bf18      	it	ne
   b633c:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b633e:	b9c5      	cbnz	r5, b6372 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b6340:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b6342:	b011      	add	sp, #68	; 0x44
   b6344:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b6348:	f003 b84e 	b.w	b93e8 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b634c:	4b76      	ldr	r3, [pc, #472]	; (b6528 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b634e:	930a      	str	r3, [sp, #40]	; 0x28
   b6350:	f106 0c14 	add.w	ip, r6, #20
   b6354:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6358:	ad0b      	add	r5, sp, #44	; 0x2c
   b635a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b635c:	f8dc 3000 	ldr.w	r3, [ip]
   b6360:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b6362:	fa1f f28e 	uxth.w	r2, lr
   b6366:	2300      	movs	r3, #0
   b6368:	a90a      	add	r1, sp, #40	; 0x28
   b636a:	4620      	mov	r0, r4
   b636c:	f002 ff66 	bl	b923c <_ZN9TCPClient7connectE9IPAddresstm>
   b6370:	e7e2      	b.n	b6338 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b6372:	4649      	mov	r1, r9
   b6374:	4620      	mov	r0, r4
   b6376:	f002 fbe9 	bl	b8b4c <_ZN5Print5printEPKc>
    client.print(" ");
   b637a:	496c      	ldr	r1, [pc, #432]	; (b652c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b637c:	4620      	mov	r0, r4
   b637e:	f002 fbe5 	bl	b8b4c <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b6382:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b6384:	4620      	mov	r0, r4
   b6386:	f002 fbe1 	bl	b8b4c <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b638a:	4969      	ldr	r1, [pc, #420]	; (b6530 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b638c:	4620      	mov	r0, r4
   b638e:	f002 fbdd 	bl	b8b4c <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b6392:	4968      	ldr	r1, [pc, #416]	; (b6534 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b6394:	4a68      	ldr	r2, [pc, #416]	; (b6538 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b6396:	4620      	mov	r0, r4
   b6398:	f7ff ff80 	bl	b629c <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b639c:	2100      	movs	r1, #0
   b639e:	4630      	mov	r0, r6
   b63a0:	f002 fd2d 	bl	b8dfe <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b63a4:	b920      	cbnz	r0, b63b0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b63a6:	6832      	ldr	r2, [r6, #0]
   b63a8:	4964      	ldr	r1, [pc, #400]	; (b653c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b63aa:	4620      	mov	r0, r4
   b63ac:	f7ff ff76 	bl	b629c <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b63b0:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b63b4:	2100      	movs	r1, #0
   b63b6:	4650      	mov	r0, sl
   b63b8:	f002 fd21 	bl	b8dfe <_ZNK6String6equalsEPKc>
   b63bc:	b928      	cbnz	r0, b63ca <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b63be:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b63c0:	495f      	ldr	r1, [pc, #380]	; (b6540 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b63c2:	4620      	mov	r0, r4
   b63c4:	f7ff ff7c 	bl	b62c0 <_ZN10HttpClient10sendHeaderEPKci>
   b63c8:	e006      	b.n	b63d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b63ca:	495e      	ldr	r1, [pc, #376]	; (b6544 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b63cc:	4648      	mov	r0, r9
   b63ce:	f004 fbd5 	bl	bab7c <strcmp>
   b63d2:	4602      	mov	r2, r0
   b63d4:	2800      	cmp	r0, #0
   b63d6:	d0f3      	beq.n	b63c0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b63d8:	f1b8 0f00 	cmp.w	r8, #0
   b63dc:	d00e      	beq.n	b63fc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b63de:	f8d8 1000 	ldr.w	r1, [r8]
   b63e2:	b159      	cbz	r1, b63fc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b63e4:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b63e8:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b63ea:	b122      	cbz	r2, b63f6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b63ec:	f7ff ff56 	bl	b629c <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b63f0:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b63f4:	e7f3      	b.n	b63de <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b63f6:	f002 fbbc 	bl	b8b72 <_ZN5Print7printlnEPKc>
}
   b63fa:	e7f9      	b.n	b63f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b63fc:	4620      	mov	r0, r4
   b63fe:	f002 fbac 	bl	b8b5a <_ZN5Print7printlnEv>
    client.flush();
   b6402:	4620      	mov	r0, r4
   b6404:	f002 fd9a 	bl	b8f3c <_ZN9TCPClient5flushEv>
   b6408:	2100      	movs	r1, #0
   b640a:	4650      	mov	r0, sl
   b640c:	f002 fcf7 	bl	b8dfe <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b6410:	b918      	cbnz	r0, b641a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b6412:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b6414:	4620      	mov	r0, r4
   b6416:	f002 fbac 	bl	b8b72 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b641a:	f104 0a1c 	add.w	sl, r4, #28
   b641e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   b6422:	2100      	movs	r1, #0
   b6424:	4650      	mov	r0, sl
   b6426:	f004 fb72 	bl	bab0e <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b642a:	f000 fd97 	bl	b6f5c <HAL_Timer_Get_Milli_Seconds>
   b642e:	9001      	str	r0, [sp, #4]
   b6430:	f000 fd94 	bl	b6f5c <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b6434:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b6438:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b643a:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b643e:	4620      	mov	r0, r4
   b6440:	f002 ff78 	bl	b9334 <_ZN9TCPClient9availableEv>
   b6444:	b1e8      	cbz	r0, b6482 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   b6446:	4620      	mov	r0, r4
   b6448:	f002 fd5e 	bl	b8f08 <_ZN9TCPClient4readEv>
   b644c:	4681      	mov	r9, r0
   b644e:	f000 fd85 	bl	b6f5c <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b6452:	f242 73fe 	movw	r3, #10238	; 0x27fe
   b6456:	429e      	cmp	r6, r3
   b6458:	9001      	str	r0, [sp, #4]
   b645a:	d804      	bhi.n	b6466 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b645c:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b645e:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b6462:	3601      	adds	r6, #1
        while (client.available()) {
   b6464:	e7eb      	b.n	b643e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b6466:	f242 73ff 	movw	r3, #10239	; 0x27ff
   b646a:	429e      	cmp	r6, r3
   b646c:	d1f9      	bne.n	b6462 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b646e:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   b6472:	2200      	movs	r2, #0
   b6474:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
                client.stop();
   b6478:	4620      	mov	r0, r4
   b647a:	f002 ffb5 	bl	b93e8 <_ZN9TCPClient4stopEv>
                error = true;
   b647e:	46a8      	mov	r8, r5
   b6480:	e7ef      	b.n	b6462 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b6482:	19a3      	adds	r3, r4, r6
   b6484:	7718      	strb	r0, [r3, #28]
   b6486:	f000 fd69 	bl	b6f5c <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b648a:	9b01      	ldr	r3, [sp, #4]
   b648c:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b6490:	f1b8 0f00 	cmp.w	r8, #0
   b6494:	d104      	bne.n	b64a0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
   b6496:	45d9      	cmp	r9, fp
   b6498:	d802      	bhi.n	b64a0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
            delay(200);
   b649a:	20c8      	movs	r0, #200	; 0xc8
   b649c:	f000 ff7a 	bl	b7394 <delay>
    } while (client.connected() && !timeout && !error);
   b64a0:	4620      	mov	r0, r4
   b64a2:	f002 fe69 	bl	b9178 <_ZN9TCPClient9connectedEv>
   b64a6:	b120      	cbz	r0, b64b2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b64a8:	45d9      	cmp	r9, fp
   b64aa:	d802      	bhi.n	b64b2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b64ac:	f1b8 0f00 	cmp.w	r8, #0
   b64b0:	d0c5      	beq.n	b643e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b64b2:	4620      	mov	r0, r4
   b64b4:	f002 ff98 	bl	b93e8 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b64b8:	4651      	mov	r1, sl
   b64ba:	a802      	add	r0, sp, #8
   b64bc:	f002 fc03 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b64c0:	230c      	movs	r3, #12
   b64c2:	2209      	movs	r2, #9
   b64c4:	a902      	add	r1, sp, #8
   b64c6:	a806      	add	r0, sp, #24
   b64c8:	f002 fcbe 	bl	b8e48 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b64cc:	491e      	ldr	r1, [pc, #120]	; (b6548 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b64ce:	a80a      	add	r0, sp, #40	; 0x28
   b64d0:	f002 fbf9 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b64d4:	a90a      	add	r1, sp, #40	; 0x28
   b64d6:	a802      	add	r0, sp, #8
   b64d8:	f002 fcb2 	bl	b8e40 <_ZNK6String7indexOfERKS_>
   b64dc:	4604      	mov	r4, r0
   b64de:	a80a      	add	r0, sp, #40	; 0x28
   b64e0:	f002 fba6 	bl	b8c30 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b64e4:	1c63      	adds	r3, r4, #1
   b64e6:	d108      	bne.n	b64fa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fe>
    String statusCode = raw_response.substring(9,12);
   b64e8:	a806      	add	r0, sp, #24
   b64ea:	f002 fba1 	bl	b8c30 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b64ee:	a802      	add	r0, sp, #8
   b64f0:	f002 fb9e 	bl	b8c30 <_ZN6StringD1Ev>
}
   b64f4:	b011      	add	sp, #68	; 0x44
   b64f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b64fa:	1d3d      	adds	r5, r7, #4
   b64fc:	4913      	ldr	r1, [pc, #76]	; (b654c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b64fe:	4628      	mov	r0, r5
   b6500:	f002 fc0f 	bl	b8d22 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b6504:	1d22      	adds	r2, r4, #4
   b6506:	a902      	add	r1, sp, #8
   b6508:	a80a      	add	r0, sp, #40	; 0x28
   b650a:	f002 fcbd 	bl	b8e88 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b650e:	a90a      	add	r1, sp, #40	; 0x28
   b6510:	4628      	mov	r0, r5
   b6512:	f002 fc42 	bl	b8d9a <_ZN6String6concatERKS_>
   b6516:	a80a      	add	r0, sp, #40	; 0x28
   b6518:	f002 fb8a 	bl	b8c30 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b651c:	9806      	ldr	r0, [sp, #24]
   b651e:	f004 fab6 	bl	baa8e <atoi>
   b6522:	6038      	str	r0, [r7, #0]
   b6524:	e7e0      	b.n	b64e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ec>
   b6526:	bf00      	nop
   b6528:	000bd280 	.word	0x000bd280
   b652c:	000bd48f 	.word	0x000bd48f
   b6530:	000bcfc4 	.word	0x000bcfc4
   b6534:	000bcfd6 	.word	0x000bcfd6
   b6538:	000bcfd0 	.word	0x000bcfd0
   b653c:	000bcfe1 	.word	0x000bcfe1
   b6540:	000bcfe6 	.word	0x000bcfe6
   b6544:	000bcff5 	.word	0x000bcff5
   b6548:	000bcffa 	.word	0x000bcffa
   b654c:	000bcffe 	.word	0x000bcffe

000b6550 <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   b6550:	4770      	bx	lr

000b6552 <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   b6552:	b510      	push	{r4, lr}
}
   b6554:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   b6556:	4604      	mov	r4, r0
}
   b6558:	f7fd fda3 	bl	b40a2 <_ZdlPvj>
   b655c:	4620      	mov	r0, r4
   b655e:	bd10      	pop	{r4, pc}

000b6560 <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   b6560:	b510      	push	{r4, lr}
   b6562:	4b05      	ldr	r3, [pc, #20]	; (b6578 <_ZN10JsonBufferD1Ev+0x18>)
   b6564:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b6566:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b6568:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b656a:	b91b      	cbnz	r3, b6574 <_ZN10JsonBufferD1Ev+0x14>
   b656c:	6840      	ldr	r0, [r0, #4]
   b656e:	b108      	cbz	r0, b6574 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b6570:	f000 fec8 	bl	b7304 <free>
}
   b6574:	4620      	mov	r0, r4
   b6576:	bd10      	pop	{r4, pc}
   b6578:	000bd00c 	.word	0x000bd00c

000b657c <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b657c:	b510      	push	{r4, lr}
   b657e:	4604      	mov	r4, r0
}
   b6580:	f7ff ffee 	bl	b6560 <_ZN10JsonBufferD1Ev>
   b6584:	4620      	mov	r0, r4
   b6586:	2114      	movs	r1, #20
   b6588:	f7fd fd8b 	bl	b40a2 <_ZdlPvj>
   b658c:	4620      	mov	r0, r4
   b658e:	bd10      	pop	{r4, pc}

000b6590 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b6590:	b510      	push	{r4, lr}
   b6592:	4b07      	ldr	r3, [pc, #28]	; (b65b0 <_ZN10JsonParserD1Ev+0x20>)
   b6594:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b6596:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b6598:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b659a:	b91b      	cbnz	r3, b65a4 <_ZN10JsonParserD1Ev+0x14>
   b659c:	6940      	ldr	r0, [r0, #20]
   b659e:	b108      	cbz	r0, b65a4 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b65a0:	f000 feb0 	bl	b7304 <free>
JsonParser::~JsonParser() {
   b65a4:	4620      	mov	r0, r4
   b65a6:	f7ff ffdb 	bl	b6560 <_ZN10JsonBufferD1Ev>
}
   b65aa:	4620      	mov	r0, r4
   b65ac:	bd10      	pop	{r4, pc}
   b65ae:	bf00      	nop
   b65b0:	000bd01c 	.word	0x000bd01c

000b65b4 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b65b4:	b510      	push	{r4, lr}
   b65b6:	4604      	mov	r4, r0
}
   b65b8:	f7ff ffea 	bl	b6590 <_ZN10JsonParserD1Ev>
   b65bc:	4620      	mov	r0, r4
   b65be:	212c      	movs	r1, #44	; 0x2c
   b65c0:	f7fd fd6f 	bl	b40a2 <_ZdlPvj>
   b65c4:	4620      	mov	r0, r4
   b65c6:	bd10      	pop	{r4, pc}

000b65c8 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b65c8:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b65ca:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b65cc:	4604      	mov	r4, r0
   b65ce:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b65d0:	b10b      	cbz	r3, b65d6 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b65d2:	2000      	movs	r0, #0
}
   b65d4:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b65d6:	6840      	ldr	r0, [r0, #4]
   b65d8:	b138      	cbz	r0, b65ea <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b65da:	f000 fe9b 	bl	b7314 <realloc>
		if (newBuffer) {
   b65de:	2800      	cmp	r0, #0
   b65e0:	d0f7      	beq.n	b65d2 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b65e2:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b65e6:	2001      	movs	r0, #1
   b65e8:	e7f4      	b.n	b65d4 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b65ea:	4608      	mov	r0, r1
   b65ec:	f000 fe82 	bl	b72f4 <malloc>
   b65f0:	e7f5      	b.n	b65de <_ZN10JsonBuffer8allocateEj+0x16>

000b65f2 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b65f2:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b65f4:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b65f6:	460e      	mov	r6, r1
   b65f8:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b65fa:	18d1      	adds	r1, r2, r3
   b65fc:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b65fe:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b6600:	b172      	cbz	r2, b6620 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b6602:	6882      	ldr	r2, [r0, #8]
   b6604:	428a      	cmp	r2, r1
   b6606:	d30b      	bcc.n	b6620 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b6608:	6860      	ldr	r0, [r4, #4]
   b660a:	68e3      	ldr	r3, [r4, #12]
   b660c:	462a      	mov	r2, r5
   b660e:	4631      	mov	r1, r6
   b6610:	4418      	add	r0, r3
   b6612:	f004 fa54 	bl	baabe <memcpy>
	offset += dataLen;
   b6616:	68e2      	ldr	r2, [r4, #12]
   b6618:	442a      	add	r2, r5
   b661a:	60e2      	str	r2, [r4, #12]
	return true;
   b661c:	2001      	movs	r0, #1
}
   b661e:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b6620:	4620      	mov	r0, r4
   b6622:	f7ff ffd1 	bl	b65c8 <_ZN10JsonBuffer8allocateEj>
   b6626:	2800      	cmp	r0, #0
   b6628:	d1ee      	bne.n	b6608 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b662a:	e7f8      	b.n	b661e <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b662c <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b662c:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b662e:	2100      	movs	r1, #0
   b6630:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b6632:	b123      	cbz	r3, b663e <_ZN10JsonBuffer5clearEv+0x12>
   b6634:	6882      	ldr	r2, [r0, #8]
   b6636:	b112      	cbz	r2, b663e <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b6638:	4618      	mov	r0, r3
   b663a:	f004 ba68 	b.w	bab0e <memset>
}
   b663e:	4770      	bx	lr

000b6640 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b6640:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b6642:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b6646:	2200      	movs	r2, #0
   b6648:	60c2      	str	r2, [r0, #12]
   b664a:	2201      	movs	r2, #1
   b664c:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b664e:	6143      	str	r3, [r0, #20]
   b6650:	4a02      	ldr	r2, [pc, #8]	; (b665c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b6652:	9b02      	ldr	r3, [sp, #8]
   b6654:	6002      	str	r2, [r0, #0]
   b6656:	61c3      	str	r3, [r0, #28]
}
   b6658:	bd10      	pop	{r4, pc}
   b665a:	bf00      	nop
   b665c:	000bd01c 	.word	0x000bd01c

000b6660 <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   b6660:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   b6664:	429a      	cmp	r2, r3
   b6666:	4b04      	ldr	r3, [pc, #16]	; (b6678 <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b6668:	bf38      	it	cc
   b666a:	6082      	strcc	r2, [r0, #8]
   b666c:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6670:	bf24      	itt	cs
   b6672:	2300      	movcs	r3, #0
   b6674:	6083      	strcs	r3, [r0, #8]
}
   b6676:	4770      	bx	lr
   b6678:	000bd02c 	.word	0x000bd02c

000b667c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b667c:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b667e:	6813      	ldr	r3, [r2, #0]
   b6680:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b6682:	6813      	ldr	r3, [r2, #0]
   b6684:	f103 0410 	add.w	r4, r3, #16
   b6688:	6014      	str	r4, [r2, #0]
   b668a:	6986      	ldr	r6, [r0, #24]
   b668c:	42b4      	cmp	r4, r6
   b668e:	d20a      	bcs.n	b66a6 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b6690:	699b      	ldr	r3, [r3, #24]
   b6692:	688c      	ldr	r4, [r1, #8]
   b6694:	42a3      	cmp	r3, r4
   b6696:	da01      	bge.n	b669c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b6698:	42ab      	cmp	r3, r5
   b669a:	ddf2      	ble.n	b6682 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b669c:	42a3      	cmp	r3, r4
   b669e:	bfcc      	ite	gt
   b66a0:	2000      	movgt	r0, #0
   b66a2:	2001      	movle	r0, #1
   b66a4:	e000      	b.n	b66a8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b66a6:	2000      	movs	r0, #0
}
   b66a8:	bd70      	pop	{r4, r5, r6, pc}

000b66aa <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b66aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b66ae:	9d08      	ldr	r5, [sp, #32]
   b66b0:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b66b2:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b66b6:	4604      	mov	r4, r0
   b66b8:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b66ba:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b66bc:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b66be:	9801      	ldr	r0, [sp, #4]
   b66c0:	69a3      	ldr	r3, [r4, #24]
   b66c2:	4283      	cmp	r3, r0
   b66c4:	d91a      	bls.n	b66fc <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b66c6:	6882      	ldr	r2, [r0, #8]
   b66c8:	688b      	ldr	r3, [r1, #8]
   b66ca:	429a      	cmp	r2, r3
   b66cc:	da16      	bge.n	b66fc <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b66ce:	42ae      	cmp	r6, r5
   b66d0:	d10b      	bne.n	b66ea <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b66d2:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b66d4:	aa01      	add	r2, sp, #4
   b66d6:	4620      	mov	r0, r4
   b66d8:	f7ff ffd0 	bl	b667c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b66dc:	b128      	cbz	r0, b66ea <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b66de:	9b01      	ldr	r3, [sp, #4]
   b66e0:	f8c8 3000 	str.w	r3, [r8]
}
   b66e4:	b002      	add	sp, #8
   b66e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b66ea:	aa01      	add	r2, sp, #4
   b66ec:	4620      	mov	r0, r4
   b66ee:	f7ff ffc5 	bl	b667c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b66f2:	4620      	mov	r0, r4
		index++;
   b66f4:	3601      	adds	r6, #1
		skipObject(container, token);
   b66f6:	f7ff ffc1 	bl	b667c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b66fa:	e7e0      	b.n	b66be <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b66fc:	2000      	movs	r0, #0
   b66fe:	e7f1      	b.n	b66e4 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b6700 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6702:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6704:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6708:	4604      	mov	r4, r0
   b670a:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b670c:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b670e:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b6710:	9b01      	ldr	r3, [sp, #4]
   b6712:	69a2      	ldr	r2, [r4, #24]
   b6714:	429a      	cmp	r2, r3
   b6716:	d90f      	bls.n	b6738 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b6718:	6898      	ldr	r0, [r3, #8]
   b671a:	688a      	ldr	r2, [r1, #8]
   b671c:	4290      	cmp	r0, r2
   b671e:	da0b      	bge.n	b6738 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b6720:	42b5      	cmp	r5, r6
   b6722:	d103      	bne.n	b672c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b6724:	603b      	str	r3, [r7, #0]
			return true;
   b6726:	2001      	movs	r0, #1
}
   b6728:	b003      	add	sp, #12
   b672a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b672c:	aa01      	add	r2, sp, #4
   b672e:	4620      	mov	r0, r4
		index++;
   b6730:	3501      	adds	r5, #1
		skipObject(container, token);
   b6732:	f7ff ffa3 	bl	b667c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b6736:	e7eb      	b.n	b6710 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b6738:	2000      	movs	r0, #0
   b673a:	e7f5      	b.n	b6728 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b673c <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   b673c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b673e:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b6740:	6889      	ldr	r1, [r1, #8]
   b6742:	4e0a      	ldr	r6, [pc, #40]	; (b676c <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   b6744:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b6746:	b161      	cbz	r1, b6762 <_ZNK13JsonReference5indexEj+0x26>
   b6748:	6868      	ldr	r0, [r5, #4]
   b674a:	ab01      	add	r3, sp, #4
   b674c:	f7ff ffd8 	bl	b6700 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b6750:	b138      	cbz	r0, b6762 <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   b6752:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b6754:	e9c4 6300 	strd	r6, r3, [r4]
   b6758:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b675a:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   b675c:	4620      	mov	r0, r4
   b675e:	b002      	add	sp, #8
   b6760:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b6762:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6764:	e9c4 6300 	strd	r6, r3, [r4]
   b6768:	2300      	movs	r3, #0
   b676a:	e7f6      	b.n	b675a <_ZNK13JsonReference5indexEj+0x1e>
   b676c:	000bd02c 	.word	0x000bd02c

000b6770 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b6770:	b510      	push	{r4, lr}
   b6772:	4604      	mov	r4, r0
	if (str) {
   b6774:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b6776:	460b      	mov	r3, r1
	if (str) {
   b6778:	b128      	cbz	r0, b6786 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b677a:	f002 fb12 	bl	b8da2 <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b677e:	68e3      	ldr	r3, [r4, #12]
   b6780:	3301      	adds	r3, #1
   b6782:	60e3      	str	r3, [r4, #12]
	}
}
   b6784:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b6786:	6860      	ldr	r0, [r4, #4]
   b6788:	2800      	cmp	r0, #0
   b678a:	d0f8      	beq.n	b677e <_ZN16JsonParserString6appendEc+0xe>
   b678c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b6790:	3a01      	subs	r2, #1
   b6792:	428a      	cmp	r2, r1
			buf[length] = ch;
   b6794:	bf88      	it	hi
   b6796:	5443      	strbhi	r3, [r0, r1]
   b6798:	e7f1      	b.n	b677e <_ZN16JsonParserString6appendEc+0xe>

000b679a <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b679a:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b679c:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b679e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b67a0:	4608      	mov	r0, r1
		str.append((char)unicode);
   b67a2:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b67a4:	d804      	bhi.n	b67b0 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b67a6:	b003      	add	sp, #12
   b67a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b67ac:	f7ff bfe0 	b.w	b6770 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b67b0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b67b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b67b8:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b67bc:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b67c0:	d207      	bcs.n	b67d2 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b67c2:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b67c6:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b67c8:	f7ff ffd2 	bl	b6770 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b67cc:	9801      	ldr	r0, [sp, #4]
   b67ce:	4621      	mov	r1, r4
   b67d0:	e7e9      	b.n	b67a6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b67d2:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b67d4:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b67d8:	9001      	str	r0, [sp, #4]
   b67da:	f7ff ffc9 	bl	b6770 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b67de:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b67e2:	9801      	ldr	r0, [sp, #4]
   b67e4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b67e8:	e7ee      	b.n	b67c8 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b67ec <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b67ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b67f0:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b67f2:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b67f4:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b68c4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b67f8:	4680      	mov	r8, r0
   b67fa:	460f      	mov	r7, r1
   b67fc:	4615      	mov	r5, r2
			escape = false;
   b67fe:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b6800:	68b8      	ldr	r0, [r7, #8]
   b6802:	42b0      	cmp	r0, r6
   b6804:	dd5a      	ble.n	b68bc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b6806:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b680a:	5d99      	ldrb	r1, [r3, r6]
   b680c:	199a      	adds	r2, r3, r6
		if (escape) {
   b680e:	2c00      	cmp	r4, #0
   b6810:	d04b      	beq.n	b68aa <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b6812:	2975      	cmp	r1, #117	; 0x75
   b6814:	d805      	bhi.n	b6822 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b6816:	296d      	cmp	r1, #109	; 0x6d
   b6818:	d807      	bhi.n	b682a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b681a:	2962      	cmp	r1, #98	; 0x62
   b681c:	d01e      	beq.n	b685c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b681e:	2966      	cmp	r1, #102	; 0x66
   b6820:	d01e      	beq.n	b6860 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b6822:	4628      	mov	r0, r5
   b6824:	f7ff ffa4 	bl	b6770 <_ZN16JsonParserString6appendEc>
				break;
   b6828:	e03d      	b.n	b68a6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b682a:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b682e:	2c07      	cmp	r4, #7
   b6830:	d8f7      	bhi.n	b6822 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b6832:	f20f 0c08 	addw	ip, pc, #8
   b6836:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b683a:	bf00      	nop
   b683c:	000b6865 	.word	0x000b6865
   b6840:	000b6823 	.word	0x000b6823
   b6844:	000b6823 	.word	0x000b6823
   b6848:	000b6823 	.word	0x000b6823
   b684c:	000b6869 	.word	0x000b6869
   b6850:	000b6823 	.word	0x000b6823
   b6854:	000b686d 	.word	0x000b686d
   b6858:	000b6871 	.word	0x000b6871
				str.append('\b');
   b685c:	2108      	movs	r1, #8
   b685e:	e7e0      	b.n	b6822 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b6860:	210c      	movs	r1, #12
   b6862:	e7de      	b.n	b6822 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b6864:	210a      	movs	r1, #10
   b6866:	e7dc      	b.n	b6822 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b6868:	210d      	movs	r1, #13
   b686a:	e7da      	b.n	b6822 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b686c:	2109      	movs	r1, #9
   b686e:	e7d8      	b.n	b6822 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b6870:	1d31      	adds	r1, r6, #4
   b6872:	4288      	cmp	r0, r1
   b6874:	dd17      	ble.n	b68a6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b6876:	a902      	add	r1, sp, #8
   b6878:	3304      	adds	r3, #4
   b687a:	4433      	add	r3, r6
   b687c:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b687e:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b6882:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b6886:	429a      	cmp	r2, r3
   b6888:	d1f9      	bne.n	b687e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b688a:	aa01      	add	r2, sp, #4
   b688c:	4651      	mov	r1, sl
					tmp[4] = 0;
   b688e:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b6892:	f000 fd47 	bl	b7324 <sscanf>
   b6896:	2801      	cmp	r0, #1
   b6898:	d105      	bne.n	b68a6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b689a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b689e:	4629      	mov	r1, r5
   b68a0:	f7ff ff7b 	bl	b679a <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b68a4:	3605      	adds	r6, #5
			escape = false;
   b68a6:	2400      	movs	r4, #0
   b68a8:	e004      	b.n	b68b4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b68aa:	295c      	cmp	r1, #92	; 0x5c
   b68ac:	d004      	beq.n	b68b8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b68ae:	4628      	mov	r0, r5
   b68b0:	f7ff ff5e 	bl	b6770 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b68b4:	3601      	adds	r6, #1
   b68b6:	e7a3      	b.n	b6800 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b68b8:	2401      	movs	r4, #1
   b68ba:	e7fb      	b.n	b68b4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b68bc:	2001      	movs	r0, #1
   b68be:	b004      	add	sp, #16
   b68c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b68c4:	000bcfff 	.word	0x000bcfff

000b68c8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b68c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b68ca:	460c      	mov	r4, r1
   b68cc:	4606      	mov	r6, r0
	result = "";
   b68ce:	490c      	ldr	r1, [pc, #48]	; (b6900 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b68d0:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b68d2:	4615      	mov	r5, r2
	result = "";
   b68d4:	f002 fa25 	bl	b8d22 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b68d8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b68dc:	1ac9      	subs	r1, r1, r3
   b68de:	3101      	adds	r1, #1
   b68e0:	4628      	mov	r0, r5
   b68e2:	f002 f9c3 	bl	b8c6c <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b68e6:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b68e8:	466a      	mov	r2, sp
   b68ea:	4621      	mov	r1, r4
   b68ec:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b68ee:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b68f2:	9500      	str	r5, [sp, #0]
   b68f4:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b68f6:	f7ff ff79 	bl	b67ec <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b68fa:	b004      	add	sp, #16
   b68fc:	bd70      	pop	{r4, r5, r6, pc}
   b68fe:	bf00      	nop
   b6900:	000bcffe 	.word	0x000bcffe

000b6904 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6908:	b089      	sub	sp, #36	; 0x24
   b690a:	4605      	mov	r5, r0
   b690c:	4688      	mov	r8, r1
	String keyName;
   b690e:	a804      	add	r0, sp, #16
   b6910:	4912      	ldr	r1, [pc, #72]	; (b695c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6912:	4616      	mov	r6, r2
   b6914:	4699      	mov	r9, r3
	String keyName;
   b6916:	f002 f9d6 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b691a:	2700      	movs	r7, #0
   b691c:	9700      	str	r7, [sp, #0]
   b691e:	464b      	mov	r3, r9
   b6920:	aa03      	add	r2, sp, #12
   b6922:	4641      	mov	r1, r8
   b6924:	4628      	mov	r0, r5
   b6926:	f7ff fec0 	bl	b66aa <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b692a:	4604      	mov	r4, r0
   b692c:	b170      	cbz	r0, b694c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b692e:	9903      	ldr	r1, [sp, #12]
   b6930:	aa04      	add	r2, sp, #16
   b6932:	4628      	mov	r0, r5
   b6934:	f7ff ffc8 	bl	b68c8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b6938:	4604      	mov	r4, r0
   b693a:	b908      	cbnz	r0, b6940 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b693c:	3701      	adds	r7, #1
   b693e:	e7ed      	b.n	b691c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b6940:	4631      	mov	r1, r6
   b6942:	a804      	add	r0, sp, #16
   b6944:	f002 fa5b 	bl	b8dfe <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b6948:	2800      	cmp	r0, #0
   b694a:	d0f7      	beq.n	b693c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b694c:	a804      	add	r0, sp, #16
   b694e:	f002 f96f 	bl	b8c30 <_ZN6StringD1Ev>
}
   b6952:	4620      	mov	r0, r4
   b6954:	b009      	add	sp, #36	; 0x24
   b6956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b695a:	bf00      	nop
   b695c:	000bcffe 	.word	0x000bcffe

000b6960 <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   b6960:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6962:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b6964:	6889      	ldr	r1, [r1, #8]
   b6966:	4e0a      	ldr	r6, [pc, #40]	; (b6990 <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   b6968:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b696a:	b161      	cbz	r1, b6986 <_ZNK13JsonReference3keyEPKc+0x26>
   b696c:	6868      	ldr	r0, [r5, #4]
   b696e:	ab01      	add	r3, sp, #4
   b6970:	f7ff ffc8 	bl	b6904 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b6974:	b138      	cbz	r0, b6986 <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   b6976:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b6978:	e9c4 6300 	strd	r6, r3, [r4]
   b697c:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b697e:	60a3      	str	r3, [r4, #8]
}
   b6980:	4620      	mov	r0, r4
   b6982:	b002      	add	sp, #8
   b6984:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b6986:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6988:	e9c4 6300 	strd	r6, r3, [r4]
   b698c:	2300      	movs	r3, #0
   b698e:	e7f6      	b.n	b697e <_ZNK13JsonReference3keyEPKc+0x1e>
   b6990:	000bd02c 	.word	0x000bd02c

000b6994 <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   b6994:	b538      	push	{r3, r4, r5, lr}
   b6996:	460d      	mov	r5, r1
	String result;
   b6998:	4905      	ldr	r1, [pc, #20]	; (b69b0 <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   b699a:	4604      	mov	r4, r0
	String result;
   b699c:	f002 f993 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   b69a0:	68a9      	ldr	r1, [r5, #8]
   b69a2:	b119      	cbz	r1, b69ac <_ZNK13JsonReference11valueStringEv+0x18>
   b69a4:	6868      	ldr	r0, [r5, #4]
   b69a6:	4622      	mov	r2, r4
   b69a8:	f7ff ff8e 	bl	b68c8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   b69ac:	4620      	mov	r0, r4
   b69ae:	bd38      	pop	{r3, r4, r5, pc}
   b69b0:	000bcffe 	.word	0x000bcffe

000b69b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b69b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b69b8:	6844      	ldr	r4, [r0, #4]
   b69ba:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b69be:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b69c2:	f8d0 e000 	ldr.w	lr, [r0]
   b69c6:	4596      	cmp	lr, r2
   b69c8:	f080 81b9 	bcs.w	b6d3e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b69cc:	f811 800e 	ldrb.w	r8, [r1, lr]
   b69d0:	f1b8 0f00 	cmp.w	r8, #0
   b69d4:	f000 81b3 	beq.w	b6d3e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b69d8:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b69dc:	f000 8098 	beq.w	b6b10 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b69e0:	d833      	bhi.n	b6a4a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b69e2:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b69e6:	f000 80a6 	beq.w	b6b36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b69ea:	d810      	bhi.n	b6a0e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b69ec:	f1a8 0809 	sub.w	r8, r8, #9
   b69f0:	fa5f f888 	uxtb.w	r8, r8
   b69f4:	f1b8 0f17 	cmp.w	r8, #23
   b69f8:	d80d      	bhi.n	b6a16 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b69fa:	4d9f      	ldr	r5, [pc, #636]	; (b6c78 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b69fc:	fa0c f808 	lsl.w	r8, ip, r8
   b6a00:	ea18 0f05 	tst.w	r8, r5
   b6a04:	d007      	beq.n	b6a16 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6a06:	6805      	ldr	r5, [r0, #0]
   b6a08:	3501      	adds	r5, #1
   b6a0a:	6005      	str	r5, [r0, #0]
   b6a0c:	e7d9      	b.n	b69c2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b6a0e:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b6a12:	f000 8133 	beq.w	b6c7c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6a16:	f8d0 8000 	ldr.w	r8, [r0]
   b6a1a:	4542      	cmp	r2, r8
   b6a1c:	d90e      	bls.n	b6a3c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b6a1e:	f811 5008 	ldrb.w	r5, [r1, r8]
   b6a22:	b15d      	cbz	r5, b6a3c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b6a24:	2d3a      	cmp	r5, #58	; 0x3a
   b6a26:	f200 8169 	bhi.w	b6cfc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b6a2a:	2d1f      	cmp	r5, #31
   b6a2c:	f200 8151 	bhi.w	b6cd2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b6a30:	2d0a      	cmp	r5, #10
   b6a32:	f200 8160 	bhi.w	b6cf6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b6a36:	2d08      	cmp	r5, #8
   b6a38:	f240 8156 	bls.w	b6ce8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b6a3c:	2b00      	cmp	r3, #0
   b6a3e:	f040 8162 	bne.w	b6d06 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b6a42:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b6a46:	6005      	str	r5, [r0, #0]
   b6a48:	e0a5      	b.n	b6b96 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b6a4a:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b6a4e:	d037      	beq.n	b6ac0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b6a50:	d82e      	bhi.n	b6ab0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b6a52:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b6a56:	d033      	beq.n	b6ac0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b6a58:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b6a5c:	d1db      	bne.n	b6a16 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b6a5e:	2b00      	cmp	r3, #0
   b6a60:	d0d1      	beq.n	b6a06 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b6a62:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b6a66:	6845      	ldr	r5, [r0, #4]
   b6a68:	3d01      	subs	r5, #1
   b6a6a:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b6a6e:	2d00      	cmp	r5, #0
   b6a70:	db55      	blt.n	b6b1e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b6a72:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b6a76:	3701      	adds	r7, #1
   b6a78:	d04d      	beq.n	b6b16 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b6a7a:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b6a7e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b6a82:	d148      	bne.n	b6b16 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b6a84:	f898 b000 	ldrb.w	fp, [r8]
   b6a88:	45cb      	cmp	fp, r9
   b6a8a:	d14b      	bne.n	b6b24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b6a8c:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b6a90:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b6a94:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b6a98:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b6a9c:	f8de 7004 	ldr.w	r7, [lr, #4]
   b6aa0:	3701      	adds	r7, #1
   b6aa2:	d042      	beq.n	b6b2a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b6aa4:	f8de 7008 	ldr.w	r7, [lr, #8]
   b6aa8:	3701      	adds	r7, #1
   b6aaa:	d13e      	bne.n	b6b2a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b6aac:	6085      	str	r5, [r0, #8]
				break;
   b6aae:	e7aa      	b.n	b6a06 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b6ab0:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b6ab4:	d1af      	bne.n	b6a16 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b6ab6:	2b00      	cmp	r3, #0
   b6ab8:	d0a5      	beq.n	b6a06 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b6aba:	f04f 0901 	mov.w	r9, #1
   b6abe:	e7d2      	b.n	b6a66 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b6ac0:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b6ac2:	2b00      	cmp	r3, #0
   b6ac4:	d09f      	beq.n	b6a06 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b6ac6:	6845      	ldr	r5, [r0, #4]
   b6ac8:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b6aca:	42af      	cmp	r7, r5
   b6acc:	d94a      	bls.n	b6b64 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b6ace:	f105 0e01 	add.w	lr, r5, #1
   b6ad2:	f8c0 e004 	str.w	lr, [r0, #4]
   b6ad6:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b6ada:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b6ade:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b6ae2:	2500      	movs	r5, #0
   b6ae4:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b6ae8:	6885      	ldr	r5, [r0, #8]
   b6aea:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b6aec:	bf1f      	itttt	ne
   b6aee:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b6af2:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b6af6:	3501      	addne	r5, #1
   b6af8:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b6afc:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b6b00:	bf0c      	ite	eq
   b6b02:	2501      	moveq	r5, #1
   b6b04:	2502      	movne	r5, #2
   b6b06:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b6b0a:	6805      	ldr	r5, [r0, #0]
   b6b0c:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b6b10:	6845      	ldr	r5, [r0, #4]
   b6b12:	3d01      	subs	r5, #1
   b6b14:	e7ca      	b.n	b6aac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b6b16:	3d01      	subs	r5, #1
   b6b18:	f1a8 0810 	sub.w	r8, r8, #16
   b6b1c:	e7a7      	b.n	b6a6e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b6b1e:	3501      	adds	r5, #1
   b6b20:	f47f af71 	bne.w	b6a06 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b6b24:	f06f 0401 	mvn.w	r4, #1
   b6b28:	e01e      	b.n	b6b68 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b6b2a:	3d01      	subs	r5, #1
   b6b2c:	1c6f      	adds	r7, r5, #1
   b6b2e:	f1ae 0e10 	sub.w	lr, lr, #16
   b6b32:	d1b3      	bne.n	b6a9c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b6b34:	e767      	b.n	b6a06 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b6b36:	f10e 0901 	add.w	r9, lr, #1
   b6b3a:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6b3e:	f8d0 8000 	ldr.w	r8, [r0]
   b6b42:	4542      	cmp	r2, r8
   b6b44:	f240 8093 	bls.w	b6c6e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b6b48:	f811 5008 	ldrb.w	r5, [r1, r8]
   b6b4c:	2d00      	cmp	r5, #0
   b6b4e:	f000 808e 	beq.w	b6c6e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b6b52:	2d22      	cmp	r5, #34	; 0x22
   b6b54:	d130      	bne.n	b6bb8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b6b56:	b1f3      	cbz	r3, b6b96 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b6b58:	6845      	ldr	r5, [r0, #4]
   b6b5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b6b5c:	42af      	cmp	r7, r5
   b6b5e:	d806      	bhi.n	b6b6e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b6b60:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b6b64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b6b68:	4620      	mov	r0, r4
   b6b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b6b6e:	f105 0e01 	add.w	lr, r5, #1
   b6b72:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b6b76:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b6b7a:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b6b7e:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b6b82:	2700      	movs	r7, #0
   b6b84:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b6b86:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b6b8a:	f04f 0a03 	mov.w	sl, #3
   b6b8e:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b6b92:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b6b96:	6885      	ldr	r5, [r0, #8]
   b6b98:	1c6f      	adds	r7, r5, #1
				count++;
   b6b9a:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b6b9e:	f43f af32 	beq.w	b6a06 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b6ba2:	2b00      	cmp	r3, #0
   b6ba4:	f43f af2f 	beq.w	b6a06 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b6ba8:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b6bac:	f8de 500c 	ldr.w	r5, [lr, #12]
   b6bb0:	3501      	adds	r5, #1
   b6bb2:	f8ce 500c 	str.w	r5, [lr, #12]
   b6bb6:	e726      	b.n	b6a06 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b6bb8:	2d5c      	cmp	r5, #92	; 0x5c
   b6bba:	d111      	bne.n	b6be0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b6bbc:	f108 0501 	add.w	r5, r8, #1
   b6bc0:	42aa      	cmp	r2, r5
   b6bc2:	d90d      	bls.n	b6be0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b6bc4:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b6bc6:	5d4d      	ldrb	r5, [r1, r5]
   b6bc8:	2d75      	cmp	r5, #117	; 0x75
   b6bca:	d82b      	bhi.n	b6c24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b6bcc:	2d6d      	cmp	r5, #109	; 0x6d
   b6bce:	d80b      	bhi.n	b6be8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b6bd0:	2d66      	cmp	r5, #102	; 0x66
   b6bd2:	d827      	bhi.n	b6c24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b6bd4:	2d5b      	cmp	r5, #91	; 0x5b
   b6bd6:	d81d      	bhi.n	b6c14 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b6bd8:	2d22      	cmp	r5, #34	; 0x22
   b6bda:	d001      	beq.n	b6be0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b6bdc:	2d2f      	cmp	r5, #47	; 0x2f
   b6bde:	d121      	bne.n	b6c24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6be0:	6805      	ldr	r5, [r0, #0]
   b6be2:	3501      	adds	r5, #1
   b6be4:	6005      	str	r5, [r0, #0]
   b6be6:	e7aa      	b.n	b6b3e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b6be8:	3d6e      	subs	r5, #110	; 0x6e
   b6bea:	2d07      	cmp	r5, #7
   b6bec:	d81a      	bhi.n	b6c24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b6bee:	a701      	add	r7, pc, #4	; (adr r7, b6bf4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b6bf0:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b6bf4:	000b6be1 	.word	0x000b6be1
   b6bf8:	000b6c25 	.word	0x000b6c25
   b6bfc:	000b6c25 	.word	0x000b6c25
   b6c00:	000b6c25 	.word	0x000b6c25
   b6c04:	000b6be1 	.word	0x000b6be1
   b6c08:	000b6c25 	.word	0x000b6c25
   b6c0c:	000b6be1 	.word	0x000b6be1
   b6c10:	000b6c2b 	.word	0x000b6c2b
   b6c14:	3d5c      	subs	r5, #92	; 0x5c
   b6c16:	b2ed      	uxtb	r5, r5
   b6c18:	fa0c f505 	lsl.w	r5, ip, r5
   b6c1c:	f240 4741 	movw	r7, #1089	; 0x441
   b6c20:	423d      	tst	r5, r7
   b6c22:	d1dd      	bne.n	b6be0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b6c24:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b6c28:	e77c      	b.n	b6b24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b6c2a:	f108 0502 	add.w	r5, r8, #2
   b6c2e:	6005      	str	r5, [r0, #0]
   b6c30:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b6c34:	f8d0 8000 	ldr.w	r8, [r0]
   b6c38:	4542      	cmp	r2, r8
   b6c3a:	d803      	bhi.n	b6c44 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b6c3c:	6805      	ldr	r5, [r0, #0]
   b6c3e:	3d01      	subs	r5, #1
   b6c40:	6005      	str	r5, [r0, #0]
					break;
   b6c42:	e7cd      	b.n	b6be0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b6c44:	f811 5008 	ldrb.w	r5, [r1, r8]
   b6c48:	2d00      	cmp	r5, #0
   b6c4a:	d0f7      	beq.n	b6c3c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b6c4c:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b6c50:	f1bb 0f09 	cmp.w	fp, #9
   b6c54:	d904      	bls.n	b6c60 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b6c56:	f025 0520 	bic.w	r5, r5, #32
   b6c5a:	3d41      	subs	r5, #65	; 0x41
   b6c5c:	2d05      	cmp	r5, #5
   b6c5e:	d8e1      	bhi.n	b6c24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b6c60:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b6c64:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b6c68:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b6c6a:	d1e3      	bne.n	b6c34 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b6c6c:	e7e6      	b.n	b6c3c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b6c6e:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b6c72:	f06f 0402 	mvn.w	r4, #2
   b6c76:	e777      	b.n	b6b68 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b6c78:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b6c7c:	2b00      	cmp	r3, #0
   b6c7e:	f43f aec2 	beq.w	b6a06 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b6c82:	6885      	ldr	r5, [r0, #8]
   b6c84:	1c6f      	adds	r7, r5, #1
   b6c86:	f43f aebe 	beq.w	b6a06 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b6c8a:	012d      	lsls	r5, r5, #4
   b6c8c:	5d5d      	ldrb	r5, [r3, r5]
   b6c8e:	3d01      	subs	r5, #1
   b6c90:	2d01      	cmp	r5, #1
   b6c92:	f67f aeb8 	bls.w	b6a06 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b6c96:	6845      	ldr	r5, [r0, #4]
   b6c98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b6c9c:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b6ca0:	f1b8 0f00 	cmp.w	r8, #0
   b6ca4:	f6ff aeaf 	blt.w	b6a06 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b6ca8:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b6cac:	3d01      	subs	r5, #1
   b6cae:	2d01      	cmp	r5, #1
   b6cb0:	d80a      	bhi.n	b6cc8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b6cb2:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b6cb6:	3501      	adds	r5, #1
   b6cb8:	d006      	beq.n	b6cc8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b6cba:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b6cbe:	3501      	adds	r5, #1
   b6cc0:	d102      	bne.n	b6cc8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b6cc2:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b6cc6:	e69e      	b.n	b6a06 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b6cc8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6ccc:	f1ae 0e10 	sub.w	lr, lr, #16
   b6cd0:	e7e6      	b.n	b6ca0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b6cd2:	f1a5 0920 	sub.w	r9, r5, #32
   b6cd6:	4f24      	ldr	r7, [pc, #144]	; (b6d68 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b6cd8:	fa5f f989 	uxtb.w	r9, r9
   b6cdc:	fa0c f909 	lsl.w	r9, ip, r9
   b6ce0:	ea19 0f07 	tst.w	r9, r7
   b6ce4:	f47f aeaa 	bne.w	b6a3c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b6ce8:	3d20      	subs	r5, #32
   b6cea:	2d5e      	cmp	r5, #94	; 0x5e
   b6cec:	d89a      	bhi.n	b6c24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6cee:	f108 0501 	add.w	r5, r8, #1
   b6cf2:	6005      	str	r5, [r0, #0]
   b6cf4:	e68f      	b.n	b6a16 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b6cf6:	2d0d      	cmp	r5, #13
   b6cf8:	d1f6      	bne.n	b6ce8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b6cfa:	e69f      	b.n	b6a3c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b6cfc:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b6d00:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b6d04:	e7f8      	b.n	b6cf8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b6d06:	6845      	ldr	r5, [r0, #4]
   b6d08:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b6d0a:	42af      	cmp	r7, r5
   b6d0c:	f67f af28 	bls.w	b6b60 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b6d10:	f105 0801 	add.w	r8, r5, #1
   b6d14:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b6d18:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b6d1c:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b6d20:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b6d24:	2700      	movs	r7, #0
   b6d26:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b6d28:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b6d2c:	f04f 0a04 	mov.w	sl, #4
   b6d30:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b6d34:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b6d38:	6805      	ldr	r5, [r0, #0]
   b6d3a:	3d01      	subs	r5, #1
   b6d3c:	e683      	b.n	b6a46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b6d3e:	2b00      	cmp	r3, #0
   b6d40:	f43f af12 	beq.w	b6b68 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b6d44:	6842      	ldr	r2, [r0, #4]
   b6d46:	1e51      	subs	r1, r2, #1
   b6d48:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b6d4c:	2900      	cmp	r1, #0
   b6d4e:	f6ff af0b 	blt.w	b6b68 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b6d52:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b6d56:	3201      	adds	r2, #1
   b6d58:	d003      	beq.n	b6d62 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b6d5a:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b6d5e:	3201      	adds	r2, #1
   b6d60:	d087      	beq.n	b6c72 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b6d62:	3901      	subs	r1, #1
   b6d64:	3b10      	subs	r3, #16
   b6d66:	e7f1      	b.n	b6d4c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b6d68:	04001001 	.word	0x04001001

000b6d6c <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b6d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b6d6e:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b6d70:	4604      	mov	r4, r0
	if (offset == 0) {
   b6d72:	b912      	cbnz	r2, b6d7a <_ZN10JsonParser5parseEv+0xe>
		return false;
   b6d74:	2000      	movs	r0, #0
}
   b6d76:	b003      	add	sp, #12
   b6d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b6d7a:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b6d7c:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b6d80:	b1ab      	cbz	r3, b6dae <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b6d82:	2100      	movs	r1, #0
	parser->toknext = 0;
   b6d84:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b6d88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b6d8c:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b6d8e:	69c1      	ldr	r1, [r0, #28]
   b6d90:	9100      	str	r1, [sp, #0]
   b6d92:	6841      	ldr	r1, [r0, #4]
   b6d94:	4630      	mov	r0, r6
   b6d96:	f7ff fe0d 	bl	b69b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b6d9a:	1c43      	adds	r3, r0, #1
   b6d9c:	d128      	bne.n	b6df0 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b6d9e:	7c25      	ldrb	r5, [r4, #16]
   b6da0:	2d00      	cmp	r5, #0
   b6da2:	d1e7      	bne.n	b6d74 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b6da4:	6960      	ldr	r0, [r4, #20]
   b6da6:	f000 faad 	bl	b7304 <free>
			tokens = 0;
   b6daa:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b6dac:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b6dae:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b6db0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b6db4:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b6db8:	68e2      	ldr	r2, [r4, #12]
   b6dba:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b6dbc:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b6dbe:	9500      	str	r5, [sp, #0]
   b6dc0:	462b      	mov	r3, r5
   b6dc2:	4630      	mov	r0, r6
   b6dc4:	f7ff fdf6 	bl	b69b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b6dc8:	2800      	cmp	r0, #0
   b6dca:	dbd3      	blt.n	b6d74 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b6dcc:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b6dce:	d017      	beq.n	b6e00 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b6dd0:	0100      	lsls	r0, r0, #4
   b6dd2:	f000 fa8f 	bl	b72f4 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b6dd6:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b6dd8:	6160      	str	r0, [r4, #20]
   b6dda:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b6ddc:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b6dde:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b6de2:	68e2      	ldr	r2, [r4, #12]
   b6de4:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b6de6:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b6de8:	4630      	mov	r0, r6
   b6dea:	f7ff fde3 	bl	b69b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b6dee:	e001      	b.n	b6df4 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b6df0:	2800      	cmp	r0, #0
   b6df2:	dbbf      	blt.n	b6d74 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b6df4:	6963      	ldr	r3, [r4, #20]
   b6df6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b6dfa:	61a0      	str	r0, [r4, #24]
	return true;
   b6dfc:	2001      	movs	r0, #1
   b6dfe:	e7ba      	b.n	b6d76 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b6e00:	6963      	ldr	r3, [r4, #20]
   b6e02:	61a3      	str	r3, [r4, #24]
   b6e04:	e7fa      	b.n	b6dfc <_ZN10JsonParser5parseEv+0x90>
	...

000b6e08 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b6e08:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b6e0a:	f000 f8af 	bl	b6f6c <HAL_Pin_Map>
   b6e0e:	4b01      	ldr	r3, [pc, #4]	; (b6e14 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b6e10:	6018      	str	r0, [r3, #0]
}
   b6e12:	bd08      	pop	{r3, pc}
   b6e14:	2003e6b4 	.word	0x2003e6b4

000b6e18 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b6e18:	b508      	push	{r3, lr}
   b6e1a:	4b02      	ldr	r3, [pc, #8]	; (b6e24 <hal_ble_stack_init+0xc>)
   b6e1c:	681b      	ldr	r3, [r3, #0]
   b6e1e:	689b      	ldr	r3, [r3, #8]
   b6e20:	9301      	str	r3, [sp, #4]
   b6e22:	bd08      	pop	{r3, pc}
   b6e24:	00030278 	.word	0x00030278

000b6e28 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b6e28:	b508      	push	{r3, lr}
   b6e2a:	4b02      	ldr	r3, [pc, #8]	; (b6e34 <hal_ble_gap_set_advertising_data+0xc>)
   b6e2c:	681b      	ldr	r3, [r3, #0]
   b6e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6e30:	9301      	str	r3, [sp, #4]
   b6e32:	bd08      	pop	{r3, pc}
   b6e34:	00030278 	.word	0x00030278

000b6e38 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b6e38:	b508      	push	{r3, lr}
   b6e3a:	4b02      	ldr	r3, [pc, #8]	; (b6e44 <hal_ble_gap_set_scan_response_data+0xc>)
   b6e3c:	681b      	ldr	r3, [r3, #0]
   b6e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6e40:	9301      	str	r3, [sp, #4]
   b6e42:	bd08      	pop	{r3, pc}
   b6e44:	00030278 	.word	0x00030278

000b6e48 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b6e48:	b508      	push	{r3, lr}
   b6e4a:	4b02      	ldr	r3, [pc, #8]	; (b6e54 <hal_ble_gap_start_advertising+0xc>)
   b6e4c:	681b      	ldr	r3, [r3, #0]
   b6e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b6e50:	9301      	str	r3, [sp, #4]
   b6e52:	bd08      	pop	{r3, pc}
   b6e54:	00030278 	.word	0x00030278

000b6e58 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b6e58:	b508      	push	{r3, lr}
   b6e5a:	4b03      	ldr	r3, [pc, #12]	; (b6e68 <hal_ble_gap_disconnect+0x10>)
   b6e5c:	681b      	ldr	r3, [r3, #0]
   b6e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b6e62:	9301      	str	r3, [sp, #4]
   b6e64:	bd08      	pop	{r3, pc}
   b6e66:	0000      	.short	0x0000
   b6e68:	00030278 	.word	0x00030278

000b6e6c <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b6e6c:	b508      	push	{r3, lr}
   b6e6e:	4b03      	ldr	r3, [pc, #12]	; (b6e7c <hal_ble_gatt_server_add_service+0x10>)
   b6e70:	681b      	ldr	r3, [r3, #0]
   b6e72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b6e76:	9301      	str	r3, [sp, #4]
   b6e78:	bd08      	pop	{r3, pc}
   b6e7a:	0000      	.short	0x0000
   b6e7c:	00030278 	.word	0x00030278

000b6e80 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6e80:	b508      	push	{r3, lr}
   b6e82:	4b03      	ldr	r3, [pc, #12]	; (b6e90 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b6e84:	681b      	ldr	r3, [r3, #0]
   b6e86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b6e8a:	9301      	str	r3, [sp, #4]
   b6e8c:	bd08      	pop	{r3, pc}
   b6e8e:	0000      	.short	0x0000
   b6e90:	00030278 	.word	0x00030278

000b6e94 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6e94:	b508      	push	{r3, lr}
   b6e96:	4b03      	ldr	r3, [pc, #12]	; (b6ea4 <hal_ble_gatt_client_write_with_response+0x10>)
   b6e98:	681b      	ldr	r3, [r3, #0]
   b6e9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b6e9e:	9301      	str	r3, [sp, #4]
   b6ea0:	bd08      	pop	{r3, pc}
   b6ea2:	0000      	.short	0x0000
   b6ea4:	00030278 	.word	0x00030278

000b6ea8 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6ea8:	b508      	push	{r3, lr}
   b6eaa:	4b03      	ldr	r3, [pc, #12]	; (b6eb8 <hal_ble_gatt_client_write_without_response+0x10>)
   b6eac:	681b      	ldr	r3, [r3, #0]
   b6eae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b6eb2:	9301      	str	r3, [sp, #4]
   b6eb4:	bd08      	pop	{r3, pc}
   b6eb6:	0000      	.short	0x0000
   b6eb8:	00030278 	.word	0x00030278

000b6ebc <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b6ebc:	b508      	push	{r3, lr}
   b6ebe:	4b03      	ldr	r3, [pc, #12]	; (b6ecc <hal_ble_gatt_server_add_characteristic+0x10>)
   b6ec0:	681b      	ldr	r3, [r3, #0]
   b6ec2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b6ec6:	9301      	str	r3, [sp, #4]
   b6ec8:	bd08      	pop	{r3, pc}
   b6eca:	0000      	.short	0x0000
   b6ecc:	00030278 	.word	0x00030278

000b6ed0 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b6ed0:	b508      	push	{r3, lr}
   b6ed2:	4b03      	ldr	r3, [pc, #12]	; (b6ee0 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b6ed4:	681b      	ldr	r3, [r3, #0]
   b6ed6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b6eda:	9301      	str	r3, [sp, #4]
   b6edc:	bd08      	pop	{r3, pc}
   b6ede:	0000      	.short	0x0000
   b6ee0:	00030278 	.word	0x00030278

000b6ee4 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6ee4:	b508      	push	{r3, lr}
   b6ee6:	4b03      	ldr	r3, [pc, #12]	; (b6ef4 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b6ee8:	681b      	ldr	r3, [r3, #0]
   b6eea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b6eee:	9301      	str	r3, [sp, #4]
   b6ef0:	bd08      	pop	{r3, pc}
   b6ef2:	0000      	.short	0x0000
   b6ef4:	00030278 	.word	0x00030278

000b6ef8 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6ef8:	b508      	push	{r3, lr}
   b6efa:	4b03      	ldr	r3, [pc, #12]	; (b6f08 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b6efc:	681b      	ldr	r3, [r3, #0]
   b6efe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b6f02:	9301      	str	r3, [sp, #4]
   b6f04:	bd08      	pop	{r3, pc}
   b6f06:	0000      	.short	0x0000
   b6f08:	00030278 	.word	0x00030278

000b6f0c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6f0c:	b508      	push	{r3, lr}
   b6f0e:	4b02      	ldr	r3, [pc, #8]	; (b6f18 <os_mutex_recursive_create+0xc>)
   b6f10:	681b      	ldr	r3, [r3, #0]
   b6f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6f14:	9301      	str	r3, [sp, #4]
   b6f16:	bd08      	pop	{r3, pc}
   b6f18:	00030248 	.word	0x00030248

000b6f1c <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b6f1c:	b508      	push	{r3, lr}
   b6f1e:	4b02      	ldr	r3, [pc, #8]	; (b6f28 <os_mutex_recursive_lock+0xc>)
   b6f20:	681b      	ldr	r3, [r3, #0]
   b6f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6f24:	9301      	str	r3, [sp, #4]
   b6f26:	bd08      	pop	{r3, pc}
   b6f28:	00030248 	.word	0x00030248

000b6f2c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b6f2c:	b508      	push	{r3, lr}
   b6f2e:	4b02      	ldr	r3, [pc, #8]	; (b6f38 <os_mutex_recursive_unlock+0xc>)
   b6f30:	681b      	ldr	r3, [r3, #0]
   b6f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6f34:	9301      	str	r3, [sp, #4]
   b6f36:	bd08      	pop	{r3, pc}
   b6f38:	00030248 	.word	0x00030248

000b6f3c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6f3c:	b508      	push	{r3, lr}
   b6f3e:	4b02      	ldr	r3, [pc, #8]	; (b6f48 <HAL_RNG_GetRandomNumber+0xc>)
   b6f40:	681b      	ldr	r3, [r3, #0]
   b6f42:	685b      	ldr	r3, [r3, #4]
   b6f44:	9301      	str	r3, [sp, #4]
   b6f46:	bd08      	pop	{r3, pc}
   b6f48:	00030218 	.word	0x00030218

000b6f4c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6f4c:	b508      	push	{r3, lr}
   b6f4e:	4b02      	ldr	r3, [pc, #8]	; (b6f58 <HAL_Delay_Microseconds+0xc>)
   b6f50:	681b      	ldr	r3, [r3, #0]
   b6f52:	68db      	ldr	r3, [r3, #12]
   b6f54:	9301      	str	r3, [sp, #4]
   b6f56:	bd08      	pop	{r3, pc}
   b6f58:	00030218 	.word	0x00030218

000b6f5c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6f5c:	b508      	push	{r3, lr}
   b6f5e:	4b02      	ldr	r3, [pc, #8]	; (b6f68 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6f60:	681b      	ldr	r3, [r3, #0]
   b6f62:	695b      	ldr	r3, [r3, #20]
   b6f64:	9301      	str	r3, [sp, #4]
   b6f66:	bd08      	pop	{r3, pc}
   b6f68:	00030218 	.word	0x00030218

000b6f6c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b6f6c:	b508      	push	{r3, lr}
   b6f6e:	4b02      	ldr	r3, [pc, #8]	; (b6f78 <HAL_Pin_Map+0xc>)
   b6f70:	681b      	ldr	r3, [r3, #0]
   b6f72:	681b      	ldr	r3, [r3, #0]
   b6f74:	9301      	str	r3, [sp, #4]
   b6f76:	bd08      	pop	{r3, pc}
   b6f78:	0003022c 	.word	0x0003022c

000b6f7c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6f7c:	b508      	push	{r3, lr}
   b6f7e:	4b02      	ldr	r3, [pc, #8]	; (b6f88 <hal_i2c_begin+0xc>)
   b6f80:	681b      	ldr	r3, [r3, #0]
   b6f82:	68db      	ldr	r3, [r3, #12]
   b6f84:	9301      	str	r3, [sp, #4]
   b6f86:	bd08      	pop	{r3, pc}
   b6f88:	00030228 	.word	0x00030228

000b6f8c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6f8c:	b508      	push	{r3, lr}
   b6f8e:	4b02      	ldr	r3, [pc, #8]	; (b6f98 <hal_i2c_begin_transmission+0xc>)
   b6f90:	681b      	ldr	r3, [r3, #0]
   b6f92:	699b      	ldr	r3, [r3, #24]
   b6f94:	9301      	str	r3, [sp, #4]
   b6f96:	bd08      	pop	{r3, pc}
   b6f98:	00030228 	.word	0x00030228

000b6f9c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6f9c:	b508      	push	{r3, lr}
   b6f9e:	4b02      	ldr	r3, [pc, #8]	; (b6fa8 <hal_i2c_end_transmission+0xc>)
   b6fa0:	681b      	ldr	r3, [r3, #0]
   b6fa2:	69db      	ldr	r3, [r3, #28]
   b6fa4:	9301      	str	r3, [sp, #4]
   b6fa6:	bd08      	pop	{r3, pc}
   b6fa8:	00030228 	.word	0x00030228

000b6fac <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6fac:	b508      	push	{r3, lr}
   b6fae:	4b02      	ldr	r3, [pc, #8]	; (b6fb8 <hal_i2c_write+0xc>)
   b6fb0:	681b      	ldr	r3, [r3, #0]
   b6fb2:	6a1b      	ldr	r3, [r3, #32]
   b6fb4:	9301      	str	r3, [sp, #4]
   b6fb6:	bd08      	pop	{r3, pc}
   b6fb8:	00030228 	.word	0x00030228

000b6fbc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6fbc:	b508      	push	{r3, lr}
   b6fbe:	4b02      	ldr	r3, [pc, #8]	; (b6fc8 <hal_i2c_available+0xc>)
   b6fc0:	681b      	ldr	r3, [r3, #0]
   b6fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6fc4:	9301      	str	r3, [sp, #4]
   b6fc6:	bd08      	pop	{r3, pc}
   b6fc8:	00030228 	.word	0x00030228

000b6fcc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6fcc:	b508      	push	{r3, lr}
   b6fce:	4b02      	ldr	r3, [pc, #8]	; (b6fd8 <hal_i2c_read+0xc>)
   b6fd0:	681b      	ldr	r3, [r3, #0]
   b6fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6fd4:	9301      	str	r3, [sp, #4]
   b6fd6:	bd08      	pop	{r3, pc}
   b6fd8:	00030228 	.word	0x00030228

000b6fdc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6fdc:	b508      	push	{r3, lr}
   b6fde:	4b02      	ldr	r3, [pc, #8]	; (b6fe8 <hal_i2c_peek+0xc>)
   b6fe0:	681b      	ldr	r3, [r3, #0]
   b6fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6fe4:	9301      	str	r3, [sp, #4]
   b6fe6:	bd08      	pop	{r3, pc}
   b6fe8:	00030228 	.word	0x00030228

000b6fec <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6fec:	b508      	push	{r3, lr}
   b6fee:	4b02      	ldr	r3, [pc, #8]	; (b6ff8 <hal_i2c_flush+0xc>)
   b6ff0:	681b      	ldr	r3, [r3, #0]
   b6ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6ff4:	9301      	str	r3, [sp, #4]
   b6ff6:	bd08      	pop	{r3, pc}
   b6ff8:	00030228 	.word	0x00030228

000b6ffc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6ffc:	b508      	push	{r3, lr}
   b6ffe:	4b02      	ldr	r3, [pc, #8]	; (b7008 <hal_i2c_init+0xc>)
   b7000:	681b      	ldr	r3, [r3, #0]
   b7002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7004:	9301      	str	r3, [sp, #4]
   b7006:	bd08      	pop	{r3, pc}
   b7008:	00030228 	.word	0x00030228

000b700c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b700c:	b508      	push	{r3, lr}
   b700e:	4b02      	ldr	r3, [pc, #8]	; (b7018 <hal_i2c_request_ex+0xc>)
   b7010:	681b      	ldr	r3, [r3, #0]
   b7012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7014:	9301      	str	r3, [sp, #4]
   b7016:	bd08      	pop	{r3, pc}
   b7018:	00030228 	.word	0x00030228

000b701c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b701c:	b508      	push	{r3, lr}
   b701e:	4b02      	ldr	r3, [pc, #8]	; (b7028 <if_index_to_name+0xc>)
   b7020:	681b      	ldr	r3, [r3, #0]
   b7022:	695b      	ldr	r3, [r3, #20]
   b7024:	9301      	str	r3, [sp, #4]
   b7026:	bd08      	pop	{r3, pc}
   b7028:	0003026c 	.word	0x0003026c

000b702c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b702c:	b508      	push	{r3, lr}
   b702e:	4b02      	ldr	r3, [pc, #8]	; (b7038 <inet_inet_ntop+0xc>)
   b7030:	681b      	ldr	r3, [r3, #0]
   b7032:	695b      	ldr	r3, [r3, #20]
   b7034:	9301      	str	r3, [sp, #4]
   b7036:	bd08      	pop	{r3, pc}
   b7038:	00030264 	.word	0x00030264

000b703c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b703c:	b508      	push	{r3, lr}
   b703e:	4b02      	ldr	r3, [pc, #8]	; (b7048 <inet_htonl+0xc>)
   b7040:	681b      	ldr	r3, [r3, #0]
   b7042:	6a1b      	ldr	r3, [r3, #32]
   b7044:	9301      	str	r3, [sp, #4]
   b7046:	bd08      	pop	{r3, pc}
   b7048:	00030264 	.word	0x00030264

000b704c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b704c:	b508      	push	{r3, lr}
   b704e:	4b02      	ldr	r3, [pc, #8]	; (b7058 <inet_htons+0xc>)
   b7050:	681b      	ldr	r3, [r3, #0]
   b7052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7054:	9301      	str	r3, [sp, #4]
   b7056:	bd08      	pop	{r3, pc}
   b7058:	00030264 	.word	0x00030264

000b705c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b705c:	b508      	push	{r3, lr}
   b705e:	4b02      	ldr	r3, [pc, #8]	; (b7068 <netdb_freeaddrinfo+0xc>)
   b7060:	681b      	ldr	r3, [r3, #0]
   b7062:	689b      	ldr	r3, [r3, #8]
   b7064:	9301      	str	r3, [sp, #4]
   b7066:	bd08      	pop	{r3, pc}
   b7068:	00030268 	.word	0x00030268

000b706c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b706c:	b508      	push	{r3, lr}
   b706e:	4b02      	ldr	r3, [pc, #8]	; (b7078 <netdb_getaddrinfo+0xc>)
   b7070:	681b      	ldr	r3, [r3, #0]
   b7072:	68db      	ldr	r3, [r3, #12]
   b7074:	9301      	str	r3, [sp, #4]
   b7076:	bd08      	pop	{r3, pc}
   b7078:	00030268 	.word	0x00030268

000b707c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b707c:	b508      	push	{r3, lr}
   b707e:	4b02      	ldr	r3, [pc, #8]	; (b7088 <sock_setsockopt+0xc>)
   b7080:	681b      	ldr	r3, [r3, #0]
   b7082:	699b      	ldr	r3, [r3, #24]
   b7084:	9301      	str	r3, [sp, #4]
   b7086:	bd08      	pop	{r3, pc}
   b7088:	00030238 	.word	0x00030238

000b708c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b708c:	b508      	push	{r3, lr}
   b708e:	4b02      	ldr	r3, [pc, #8]	; (b7098 <sock_close+0xc>)
   b7090:	681b      	ldr	r3, [r3, #0]
   b7092:	69db      	ldr	r3, [r3, #28]
   b7094:	9301      	str	r3, [sp, #4]
   b7096:	bd08      	pop	{r3, pc}
   b7098:	00030238 	.word	0x00030238

000b709c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b709c:	b508      	push	{r3, lr}
   b709e:	4b02      	ldr	r3, [pc, #8]	; (b70a8 <sock_connect+0xc>)
   b70a0:	681b      	ldr	r3, [r3, #0]
   b70a2:	6a1b      	ldr	r3, [r3, #32]
   b70a4:	9301      	str	r3, [sp, #4]
   b70a6:	bd08      	pop	{r3, pc}
   b70a8:	00030238 	.word	0x00030238

000b70ac <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b70ac:	b508      	push	{r3, lr}
   b70ae:	4b02      	ldr	r3, [pc, #8]	; (b70b8 <sock_recv+0xc>)
   b70b0:	681b      	ldr	r3, [r3, #0]
   b70b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b70b4:	9301      	str	r3, [sp, #4]
   b70b6:	bd08      	pop	{r3, pc}
   b70b8:	00030238 	.word	0x00030238

000b70bc <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b70bc:	b508      	push	{r3, lr}
   b70be:	4b02      	ldr	r3, [pc, #8]	; (b70c8 <sock_send+0xc>)
   b70c0:	681b      	ldr	r3, [r3, #0]
   b70c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b70c4:	9301      	str	r3, [sp, #4]
   b70c6:	bd08      	pop	{r3, pc}
   b70c8:	00030238 	.word	0x00030238

000b70cc <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b70cc:	b508      	push	{r3, lr}
   b70ce:	4b02      	ldr	r3, [pc, #8]	; (b70d8 <sock_socket+0xc>)
   b70d0:	681b      	ldr	r3, [r3, #0]
   b70d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b70d4:	9301      	str	r3, [sp, #4]
   b70d6:	bd08      	pop	{r3, pc}
   b70d8:	00030238 	.word	0x00030238

000b70dc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b70dc:	b508      	push	{r3, lr}
   b70de:	4b02      	ldr	r3, [pc, #8]	; (b70e8 <hal_usart_write+0xc>)
   b70e0:	681b      	ldr	r3, [r3, #0]
   b70e2:	68db      	ldr	r3, [r3, #12]
   b70e4:	9301      	str	r3, [sp, #4]
   b70e6:	bd08      	pop	{r3, pc}
   b70e8:	0003023c 	.word	0x0003023c

000b70ec <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b70ec:	b508      	push	{r3, lr}
   b70ee:	4b02      	ldr	r3, [pc, #8]	; (b70f8 <hal_usart_available+0xc>)
   b70f0:	681b      	ldr	r3, [r3, #0]
   b70f2:	691b      	ldr	r3, [r3, #16]
   b70f4:	9301      	str	r3, [sp, #4]
   b70f6:	bd08      	pop	{r3, pc}
   b70f8:	0003023c 	.word	0x0003023c

000b70fc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b70fc:	b508      	push	{r3, lr}
   b70fe:	4b02      	ldr	r3, [pc, #8]	; (b7108 <hal_usart_read+0xc>)
   b7100:	681b      	ldr	r3, [r3, #0]
   b7102:	695b      	ldr	r3, [r3, #20]
   b7104:	9301      	str	r3, [sp, #4]
   b7106:	bd08      	pop	{r3, pc}
   b7108:	0003023c 	.word	0x0003023c

000b710c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b710c:	b508      	push	{r3, lr}
   b710e:	4b02      	ldr	r3, [pc, #8]	; (b7118 <hal_usart_peek+0xc>)
   b7110:	681b      	ldr	r3, [r3, #0]
   b7112:	699b      	ldr	r3, [r3, #24]
   b7114:	9301      	str	r3, [sp, #4]
   b7116:	bd08      	pop	{r3, pc}
   b7118:	0003023c 	.word	0x0003023c

000b711c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b711c:	b508      	push	{r3, lr}
   b711e:	4b02      	ldr	r3, [pc, #8]	; (b7128 <hal_usart_flush+0xc>)
   b7120:	681b      	ldr	r3, [r3, #0]
   b7122:	69db      	ldr	r3, [r3, #28]
   b7124:	9301      	str	r3, [sp, #4]
   b7126:	bd08      	pop	{r3, pc}
   b7128:	0003023c 	.word	0x0003023c

000b712c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b712c:	b508      	push	{r3, lr}
   b712e:	4b02      	ldr	r3, [pc, #8]	; (b7138 <hal_usart_available_data_for_write+0xc>)
   b7130:	681b      	ldr	r3, [r3, #0]
   b7132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7134:	9301      	str	r3, [sp, #4]
   b7136:	bd08      	pop	{r3, pc}
   b7138:	0003023c 	.word	0x0003023c

000b713c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b713c:	b508      	push	{r3, lr}
   b713e:	4b02      	ldr	r3, [pc, #8]	; (b7148 <hal_usart_init_ex+0xc>)
   b7140:	681b      	ldr	r3, [r3, #0]
   b7142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7144:	9301      	str	r3, [sp, #4]
   b7146:	bd08      	pop	{r3, pc}
   b7148:	0003023c 	.word	0x0003023c

000b714c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b714c:	b508      	push	{r3, lr}
   b714e:	4b02      	ldr	r3, [pc, #8]	; (b7158 <HAL_USB_USART_Init+0xc>)
   b7150:	681b      	ldr	r3, [r3, #0]
   b7152:	681b      	ldr	r3, [r3, #0]
   b7154:	9301      	str	r3, [sp, #4]
   b7156:	bd08      	pop	{r3, pc}
   b7158:	0003024c 	.word	0x0003024c

000b715c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b715c:	b508      	push	{r3, lr}
   b715e:	4b02      	ldr	r3, [pc, #8]	; (b7168 <HAL_USB_USART_Begin+0xc>)
   b7160:	681b      	ldr	r3, [r3, #0]
   b7162:	685b      	ldr	r3, [r3, #4]
   b7164:	9301      	str	r3, [sp, #4]
   b7166:	bd08      	pop	{r3, pc}
   b7168:	0003024c 	.word	0x0003024c

000b716c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b716c:	b508      	push	{r3, lr}
   b716e:	4b02      	ldr	r3, [pc, #8]	; (b7178 <HAL_USB_USART_Available_Data+0xc>)
   b7170:	681b      	ldr	r3, [r3, #0]
   b7172:	691b      	ldr	r3, [r3, #16]
   b7174:	9301      	str	r3, [sp, #4]
   b7176:	bd08      	pop	{r3, pc}
   b7178:	0003024c 	.word	0x0003024c

000b717c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b717c:	b508      	push	{r3, lr}
   b717e:	4b02      	ldr	r3, [pc, #8]	; (b7188 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7180:	681b      	ldr	r3, [r3, #0]
   b7182:	695b      	ldr	r3, [r3, #20]
   b7184:	9301      	str	r3, [sp, #4]
   b7186:	bd08      	pop	{r3, pc}
   b7188:	0003024c 	.word	0x0003024c

000b718c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b718c:	b508      	push	{r3, lr}
   b718e:	4b02      	ldr	r3, [pc, #8]	; (b7198 <HAL_USB_USART_Receive_Data+0xc>)
   b7190:	681b      	ldr	r3, [r3, #0]
   b7192:	699b      	ldr	r3, [r3, #24]
   b7194:	9301      	str	r3, [sp, #4]
   b7196:	bd08      	pop	{r3, pc}
   b7198:	0003024c 	.word	0x0003024c

000b719c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b719c:	b508      	push	{r3, lr}
   b719e:	4b02      	ldr	r3, [pc, #8]	; (b71a8 <HAL_USB_USART_Send_Data+0xc>)
   b71a0:	681b      	ldr	r3, [r3, #0]
   b71a2:	69db      	ldr	r3, [r3, #28]
   b71a4:	9301      	str	r3, [sp, #4]
   b71a6:	bd08      	pop	{r3, pc}
   b71a8:	0003024c 	.word	0x0003024c

000b71ac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b71ac:	b508      	push	{r3, lr}
   b71ae:	4b02      	ldr	r3, [pc, #8]	; (b71b8 <HAL_USB_USART_Flush_Data+0xc>)
   b71b0:	681b      	ldr	r3, [r3, #0]
   b71b2:	6a1b      	ldr	r3, [r3, #32]
   b71b4:	9301      	str	r3, [sp, #4]
   b71b6:	bd08      	pop	{r3, pc}
   b71b8:	0003024c 	.word	0x0003024c

000b71bc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b71bc:	b508      	push	{r3, lr}
   b71be:	4b02      	ldr	r3, [pc, #8]	; (b71c8 <panic_+0xc>)
   b71c0:	681b      	ldr	r3, [r3, #0]
   b71c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b71c4:	9301      	str	r3, [sp, #4]
   b71c6:	bd08      	pop	{r3, pc}
   b71c8:	00030260 	.word	0x00030260

000b71cc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b71cc:	b508      	push	{r3, lr}
   b71ce:	4b02      	ldr	r3, [pc, #8]	; (b71d8 <log_message+0xc>)
   b71d0:	681b      	ldr	r3, [r3, #0]
   b71d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b71d4:	9301      	str	r3, [sp, #4]
   b71d6:	bd08      	pop	{r3, pc}
   b71d8:	00030260 	.word	0x00030260

000b71dc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b71dc:	b508      	push	{r3, lr}
   b71de:	4b02      	ldr	r3, [pc, #8]	; (b71e8 <set_system_mode+0xc>)
   b71e0:	681b      	ldr	r3, [r3, #0]
   b71e2:	685b      	ldr	r3, [r3, #4]
   b71e4:	9301      	str	r3, [sp, #4]
   b71e6:	bd08      	pop	{r3, pc}
   b71e8:	00030220 	.word	0x00030220

000b71ec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b71ec:	b508      	push	{r3, lr}
   b71ee:	4b02      	ldr	r3, [pc, #8]	; (b71f8 <system_delay_ms+0xc>)
   b71f0:	681b      	ldr	r3, [r3, #0]
   b71f2:	695b      	ldr	r3, [r3, #20]
   b71f4:	9301      	str	r3, [sp, #4]
   b71f6:	bd08      	pop	{r3, pc}
   b71f8:	00030220 	.word	0x00030220

000b71fc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b71fc:	b508      	push	{r3, lr}
   b71fe:	4b03      	ldr	r3, [pc, #12]	; (b720c <system_ctrl_set_app_request_handler+0x10>)
   b7200:	681b      	ldr	r3, [r3, #0]
   b7202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7206:	9301      	str	r3, [sp, #4]
   b7208:	bd08      	pop	{r3, pc}
   b720a:	0000      	.short	0x0000
   b720c:	00030220 	.word	0x00030220

000b7210 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7210:	b508      	push	{r3, lr}
   b7212:	4b03      	ldr	r3, [pc, #12]	; (b7220 <system_ctrl_set_result+0x10>)
   b7214:	681b      	ldr	r3, [r3, #0]
   b7216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b721a:	9301      	str	r3, [sp, #4]
   b721c:	bd08      	pop	{r3, pc}
   b721e:	0000      	.short	0x0000
   b7220:	00030220 	.word	0x00030220

000b7224 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7224:	b508      	push	{r3, lr}
   b7226:	4b02      	ldr	r3, [pc, #8]	; (b7230 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7228:	681b      	ldr	r3, [r3, #0]
   b722a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b722c:	9301      	str	r3, [sp, #4]
   b722e:	bd08      	pop	{r3, pc}
   b7230:	00030244 	.word	0x00030244

000b7234 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7234:	b508      	push	{r3, lr}
   b7236:	4b02      	ldr	r3, [pc, #8]	; (b7240 <network_connect+0xc>)
   b7238:	681b      	ldr	r3, [r3, #0]
   b723a:	685b      	ldr	r3, [r3, #4]
   b723c:	9301      	str	r3, [sp, #4]
   b723e:	bd08      	pop	{r3, pc}
   b7240:	00030240 	.word	0x00030240

000b7244 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7244:	b508      	push	{r3, lr}
   b7246:	4b02      	ldr	r3, [pc, #8]	; (b7250 <network_connecting+0xc>)
   b7248:	681b      	ldr	r3, [r3, #0]
   b724a:	689b      	ldr	r3, [r3, #8]
   b724c:	9301      	str	r3, [sp, #4]
   b724e:	bd08      	pop	{r3, pc}
   b7250:	00030240 	.word	0x00030240

000b7254 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7254:	b508      	push	{r3, lr}
   b7256:	4b02      	ldr	r3, [pc, #8]	; (b7260 <network_disconnect+0xc>)
   b7258:	681b      	ldr	r3, [r3, #0]
   b725a:	68db      	ldr	r3, [r3, #12]
   b725c:	9301      	str	r3, [sp, #4]
   b725e:	bd08      	pop	{r3, pc}
   b7260:	00030240 	.word	0x00030240

000b7264 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7264:	b508      	push	{r3, lr}
   b7266:	4b02      	ldr	r3, [pc, #8]	; (b7270 <network_ready+0xc>)
   b7268:	681b      	ldr	r3, [r3, #0]
   b726a:	691b      	ldr	r3, [r3, #16]
   b726c:	9301      	str	r3, [sp, #4]
   b726e:	bd08      	pop	{r3, pc}
   b7270:	00030240 	.word	0x00030240

000b7274 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7274:	b508      	push	{r3, lr}
   b7276:	4b02      	ldr	r3, [pc, #8]	; (b7280 <network_on+0xc>)
   b7278:	681b      	ldr	r3, [r3, #0]
   b727a:	695b      	ldr	r3, [r3, #20]
   b727c:	9301      	str	r3, [sp, #4]
   b727e:	bd08      	pop	{r3, pc}
   b7280:	00030240 	.word	0x00030240

000b7284 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7284:	b508      	push	{r3, lr}
   b7286:	4b02      	ldr	r3, [pc, #8]	; (b7290 <network_off+0xc>)
   b7288:	681b      	ldr	r3, [r3, #0]
   b728a:	699b      	ldr	r3, [r3, #24]
   b728c:	9301      	str	r3, [sp, #4]
   b728e:	bd08      	pop	{r3, pc}
   b7290:	00030240 	.word	0x00030240

000b7294 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7294:	b508      	push	{r3, lr}
   b7296:	4b02      	ldr	r3, [pc, #8]	; (b72a0 <network_listen+0xc>)
   b7298:	681b      	ldr	r3, [r3, #0]
   b729a:	69db      	ldr	r3, [r3, #28]
   b729c:	9301      	str	r3, [sp, #4]
   b729e:	bd08      	pop	{r3, pc}
   b72a0:	00030240 	.word	0x00030240

000b72a4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b72a4:	b508      	push	{r3, lr}
   b72a6:	4b02      	ldr	r3, [pc, #8]	; (b72b0 <network_listening+0xc>)
   b72a8:	681b      	ldr	r3, [r3, #0]
   b72aa:	6a1b      	ldr	r3, [r3, #32]
   b72ac:	9301      	str	r3, [sp, #4]
   b72ae:	bd08      	pop	{r3, pc}
   b72b0:	00030240 	.word	0x00030240

000b72b4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b72b4:	b508      	push	{r3, lr}
   b72b6:	4b02      	ldr	r3, [pc, #8]	; (b72c0 <network_set_listen_timeout+0xc>)
   b72b8:	681b      	ldr	r3, [r3, #0]
   b72ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b72bc:	9301      	str	r3, [sp, #4]
   b72be:	bd08      	pop	{r3, pc}
   b72c0:	00030240 	.word	0x00030240

000b72c4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b72c4:	b508      	push	{r3, lr}
   b72c6:	4b02      	ldr	r3, [pc, #8]	; (b72d0 <network_get_listen_timeout+0xc>)
   b72c8:	681b      	ldr	r3, [r3, #0]
   b72ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b72cc:	9301      	str	r3, [sp, #4]
   b72ce:	bd08      	pop	{r3, pc}
   b72d0:	00030240 	.word	0x00030240

000b72d4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b72d4:	b508      	push	{r3, lr}
   b72d6:	4b02      	ldr	r3, [pc, #8]	; (b72e0 <network_is_on+0xc>)
   b72d8:	681b      	ldr	r3, [r3, #0]
   b72da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b72dc:	9301      	str	r3, [sp, #4]
   b72de:	bd08      	pop	{r3, pc}
   b72e0:	00030240 	.word	0x00030240

000b72e4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b72e4:	b508      	push	{r3, lr}
   b72e6:	4b02      	ldr	r3, [pc, #8]	; (b72f0 <network_is_off+0xc>)
   b72e8:	681b      	ldr	r3, [r3, #0]
   b72ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b72ec:	9301      	str	r3, [sp, #4]
   b72ee:	bd08      	pop	{r3, pc}
   b72f0:	00030240 	.word	0x00030240

000b72f4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b72f4:	b508      	push	{r3, lr}
   b72f6:	4b02      	ldr	r3, [pc, #8]	; (b7300 <malloc+0xc>)
   b72f8:	681b      	ldr	r3, [r3, #0]
   b72fa:	681b      	ldr	r3, [r3, #0]
   b72fc:	9301      	str	r3, [sp, #4]
   b72fe:	bd08      	pop	{r3, pc}
   b7300:	0003021c 	.word	0x0003021c

000b7304 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7304:	b508      	push	{r3, lr}
   b7306:	4b02      	ldr	r3, [pc, #8]	; (b7310 <free+0xc>)
   b7308:	681b      	ldr	r3, [r3, #0]
   b730a:	685b      	ldr	r3, [r3, #4]
   b730c:	9301      	str	r3, [sp, #4]
   b730e:	bd08      	pop	{r3, pc}
   b7310:	0003021c 	.word	0x0003021c

000b7314 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7314:	b508      	push	{r3, lr}
   b7316:	4b02      	ldr	r3, [pc, #8]	; (b7320 <realloc+0xc>)
   b7318:	681b      	ldr	r3, [r3, #0]
   b731a:	689b      	ldr	r3, [r3, #8]
   b731c:	9301      	str	r3, [sp, #4]
   b731e:	bd08      	pop	{r3, pc}
   b7320:	0003021c 	.word	0x0003021c

000b7324 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b7324:	b508      	push	{r3, lr}
   b7326:	4b02      	ldr	r3, [pc, #8]	; (b7330 <sscanf+0xc>)
   b7328:	681b      	ldr	r3, [r3, #0]
   b732a:	695b      	ldr	r3, [r3, #20]
   b732c:	9301      	str	r3, [sp, #4]
   b732e:	bd08      	pop	{r3, pc}
   b7330:	0003021c 	.word	0x0003021c

000b7334 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7334:	b508      	push	{r3, lr}
   b7336:	4b02      	ldr	r3, [pc, #8]	; (b7340 <vsnprintf+0xc>)
   b7338:	681b      	ldr	r3, [r3, #0]
   b733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b733c:	9301      	str	r3, [sp, #4]
   b733e:	bd08      	pop	{r3, pc}
   b7340:	0003021c 	.word	0x0003021c

000b7344 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7344:	b508      	push	{r3, lr}
   b7346:	4b02      	ldr	r3, [pc, #8]	; (b7350 <abort+0xc>)
   b7348:	681b      	ldr	r3, [r3, #0]
   b734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b734c:	9301      	str	r3, [sp, #4]
   b734e:	bd08      	pop	{r3, pc}
   b7350:	0003021c 	.word	0x0003021c

000b7354 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7354:	b508      	push	{r3, lr}
   b7356:	4b02      	ldr	r3, [pc, #8]	; (b7360 <_malloc_r+0xc>)
   b7358:	681b      	ldr	r3, [r3, #0]
   b735a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b735c:	9301      	str	r3, [sp, #4]
   b735e:	bd08      	pop	{r3, pc}
   b7360:	0003021c 	.word	0x0003021c

000b7364 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7364:	b508      	push	{r3, lr}
   b7366:	4b02      	ldr	r3, [pc, #8]	; (b7370 <__errno+0xc>)
   b7368:	681b      	ldr	r3, [r3, #0]
   b736a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b736c:	9301      	str	r3, [sp, #4]
   b736e:	bd08      	pop	{r3, pc}
   b7370:	0003021c 	.word	0x0003021c

000b7374 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7374:	b508      	push	{r3, lr}
   b7376:	4b02      	ldr	r3, [pc, #8]	; (b7380 <__assert_func+0xc>)
   b7378:	681b      	ldr	r3, [r3, #0]
   b737a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b737c:	9301      	str	r3, [sp, #4]
   b737e:	bd08      	pop	{r3, pc}
   b7380:	0003021c 	.word	0x0003021c

000b7384 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7384:	b508      	push	{r3, lr}
   b7386:	4b02      	ldr	r3, [pc, #8]	; (b7390 <newlib_impure_ptr_callback+0xc>)
   b7388:	681b      	ldr	r3, [r3, #0]
   b738a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b738c:	9301      	str	r3, [sp, #4]
   b738e:	bd08      	pop	{r3, pc}
   b7390:	0003021c 	.word	0x0003021c

000b7394 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7394:	2100      	movs	r1, #0
   b7396:	f7ff bf29 	b.w	b71ec <system_delay_ms>

000b739a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b739a:	4770      	bx	lr

000b739c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b739c:	4770      	bx	lr

000b739e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b739e:	4770      	bx	lr

000b73a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b73a0:	4770      	bx	lr
	...

000b73a4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b73a4:	4b06      	ldr	r3, [pc, #24]	; (b73c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b73a6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b73a8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b73aa:	f100 040c 	add.w	r4, r0, #12
	    ||
   b73ae:	d005      	beq.n	b73bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b73b0:	4608      	mov	r0, r1
   b73b2:	f002 fb0d 	bl	b99d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b73b6:	2800      	cmp	r0, #0
   b73b8:	bf08      	it	eq
   b73ba:	2400      	moveq	r4, #0
      }
   b73bc:	4620      	mov	r0, r4
   b73be:	bd10      	pop	{r4, pc}
   b73c0:	000bd1d4 	.word	0x000bd1d4

000b73c4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b73c4:	4b06      	ldr	r3, [pc, #24]	; (b73e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b73c6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b73c8:	b510      	push	{r4, lr}
   b73ca:	f100 040c 	add.w	r4, r0, #12
	    ||
   b73ce:	d005      	beq.n	b73dc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b73d0:	4608      	mov	r0, r1
   b73d2:	f002 fafd 	bl	b99d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b73d6:	2800      	cmp	r0, #0
   b73d8:	bf08      	it	eq
   b73da:	2400      	moveq	r4, #0
      }
   b73dc:	4620      	mov	r0, r4
   b73de:	bd10      	pop	{r4, pc}
   b73e0:	000bd1d4 	.word	0x000bd1d4

000b73e4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b73e4:	4b06      	ldr	r3, [pc, #24]	; (b7400 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b73e6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b73e8:	b510      	push	{r4, lr}
   b73ea:	f100 040c 	add.w	r4, r0, #12
	    ||
   b73ee:	d005      	beq.n	b73fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b73f0:	4608      	mov	r0, r1
   b73f2:	f002 faed 	bl	b99d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b73f6:	2800      	cmp	r0, #0
   b73f8:	bf08      	it	eq
   b73fa:	2400      	moveq	r4, #0
      }
   b73fc:	4620      	mov	r0, r4
   b73fe:	bd10      	pop	{r4, pc}
   b7400:	000bd1d4 	.word	0x000bd1d4

000b7404 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7404:	b510      	push	{r4, lr}
   b7406:	2168      	movs	r1, #104	; 0x68
   b7408:	4604      	mov	r4, r0
   b740a:	f7fc fe4a 	bl	b40a2 <_ZdlPvj>
   b740e:	4620      	mov	r0, r4
   b7410:	bd10      	pop	{r4, pc}

000b7412 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7412:	b510      	push	{r4, lr}
   b7414:	2128      	movs	r1, #40	; 0x28
   b7416:	4604      	mov	r4, r0
   b7418:	f7fc fe43 	bl	b40a2 <_ZdlPvj>
   b741c:	4620      	mov	r0, r4
   b741e:	bd10      	pop	{r4, pc}

000b7420 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7420:	b510      	push	{r4, lr}
   b7422:	2130      	movs	r1, #48	; 0x30
   b7424:	4604      	mov	r4, r0
   b7426:	f7fc fe3c 	bl	b40a2 <_ZdlPvj>
   b742a:	4620      	mov	r0, r4
   b742c:	bd10      	pop	{r4, pc}

000b742e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b742e:	2168      	movs	r1, #104	; 0x68
   b7430:	f7fc be37 	b.w	b40a2 <_ZdlPvj>

000b7434 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7434:	2128      	movs	r1, #40	; 0x28
   b7436:	f7fc be34 	b.w	b40a2 <_ZdlPvj>

000b743a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b743a:	2130      	movs	r1, #48	; 0x30
   b743c:	f7fc be31 	b.w	b40a2 <_ZdlPvj>

000b7440 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b7440:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7442:	2500      	movs	r5, #0
   b7444:	1cec      	adds	r4, r5, #3
   b7446:	428c      	cmp	r4, r1
   b7448:	d80d      	bhi.n	b7466 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b744a:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b744c:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b744e:	5d87      	ldrb	r7, [r0, r6]
   b7450:	4297      	cmp	r7, r2
   b7452:	d105      	bne.n	b7460 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b7454:	4426      	add	r6, r4
   b7456:	42b1      	cmp	r1, r6
   b7458:	d305      	bcc.n	b7466 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b745a:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b745c:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b745e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b7460:	3401      	adds	r4, #1
   b7462:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7464:	e7ee      	b.n	b7444 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b7466:	2000      	movs	r0, #0
   b7468:	e7f9      	b.n	b745e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b746c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b746c:	4a02      	ldr	r2, [pc, #8]	; (b7478 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b746e:	4903      	ldr	r1, [pc, #12]	; (b747c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b7470:	200a      	movs	r0, #10
   b7472:	f7ff bea3 	b.w	b71bc <panic_>
   b7476:	bf00      	nop
   b7478:	000b6f4d 	.word	0x000b6f4d
   b747c:	000bd034 	.word	0x000bd034

000b7480 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7480:	b430      	push	{r4, r5}
   b7482:	460d      	mov	r5, r1
   b7484:	4611      	mov	r1, r2
   b7486:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b7488:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b748a:	6809      	ldr	r1, [r1, #0]
   b748c:	6828      	ldr	r0, [r5, #0]
   b748e:	e9d3 4300 	ldrd	r4, r3, [r3]
   b7492:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b7494:	bc30      	pop	{r4, r5}
   b7496:	4760      	bx	ip

000b7498 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b7498:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b749a:	b538      	push	{r3, r4, r5, lr}
   b749c:	4604      	mov	r4, r0
	switch (__op)
   b749e:	d102      	bne.n	b74a6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b74a0:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b74a2:	6023      	str	r3, [r4, #0]
	}
   b74a4:	e003      	b.n	b74ae <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b74a6:	2a02      	cmp	r2, #2
   b74a8:	d003      	beq.n	b74b2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b74aa:	2a03      	cmp	r2, #3
   b74ac:	d00d      	beq.n	b74ca <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b74ae:	2000      	movs	r0, #0
   b74b0:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b74b2:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b74b4:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b74b6:	f7fc fdee 	bl	b4096 <_Znwj>
   b74ba:	4603      	mov	r3, r0
   b74bc:	2800      	cmp	r0, #0
   b74be:	d0f0      	beq.n	b74a2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b74c0:	e895 0003 	ldmia.w	r5, {r0, r1}
   b74c4:	e883 0003 	stmia.w	r3, {r0, r1}
   b74c8:	e7eb      	b.n	b74a2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b74ca:	6800      	ldr	r0, [r0, #0]
   b74cc:	2800      	cmp	r0, #0
   b74ce:	d0ee      	beq.n	b74ae <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b74d0:	2108      	movs	r1, #8
   b74d2:	f7fc fde6 	bl	b40a2 <_ZdlPvj>
   b74d6:	e7ea      	b.n	b74ae <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b74d8 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b74d8:	b510      	push	{r4, lr}
      if (_M_manager)
   b74da:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b74dc:	4604      	mov	r4, r0
      if (_M_manager)
   b74de:	b113      	cbz	r3, b74e6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b74e0:	2203      	movs	r2, #3
   b74e2:	4601      	mov	r1, r0
   b74e4:	4798      	blx	r3
    }
   b74e6:	4620      	mov	r0, r4
   b74e8:	bd10      	pop	{r4, pc}

000b74ea <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b74ea:	b510      	push	{r4, lr}
   b74ec:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b74ee:	3058      	adds	r0, #88	; 0x58
   b74f0:	f7ff fff2 	bl	b74d8 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b74f4:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b74f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b74fc:	f001 bb98 	b.w	b8c30 <_ZN6StringD1Ev>

000b7500 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b7500:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b7502:	6843      	ldr	r3, [r0, #4]
   b7504:	3b01      	subs	r3, #1
    {
   b7506:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b7508:	6043      	str	r3, [r0, #4]
   b750a:	b963      	cbnz	r3, b7526 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b750c:	6803      	ldr	r3, [r0, #0]
   b750e:	689b      	ldr	r3, [r3, #8]
   b7510:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7512:	68a3      	ldr	r3, [r4, #8]
   b7514:	3b01      	subs	r3, #1
   b7516:	60a3      	str	r3, [r4, #8]
   b7518:	b92b      	cbnz	r3, b7526 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b751a:	6823      	ldr	r3, [r4, #0]
   b751c:	4620      	mov	r0, r4
   b751e:	68db      	ldr	r3, [r3, #12]
    }
   b7520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b7524:	4718      	bx	r3
    }
   b7526:	bd10      	pop	{r4, pc}

000b7528 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b7528:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b752c:	b2da      	uxtb	r2, r3
   b752e:	2a09      	cmp	r2, #9
   b7530:	d801      	bhi.n	b7536 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b7532:	4618      	mov	r0, r3
   b7534:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b7536:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b753a:	2b05      	cmp	r3, #5
   b753c:	d801      	bhi.n	b7542 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b753e:	3857      	subs	r0, #87	; 0x57
   b7540:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b7542:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b7546:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b7548:	bf94      	ite	ls
   b754a:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b754c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b7550:	4770      	bx	lr
	...

000b7554 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b7554:	b510      	push	{r4, lr}
            locked_(false) {
   b7556:	2300      	movs	r3, #0
   b7558:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b755a:	4b04      	ldr	r3, [pc, #16]	; (b756c <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b755c:	4604      	mov	r4, r0
   b755e:	6818      	ldr	r0, [r3, #0]
   b7560:	f7ff fcdc 	bl	b6f1c <os_mutex_recursive_lock>
        locked_ = true;
   b7564:	2301      	movs	r3, #1
   b7566:	7023      	strb	r3, [r4, #0]
    }
   b7568:	4620      	mov	r0, r4
   b756a:	bd10      	pop	{r4, pc}
   b756c:	2003e6c0 	.word	0x2003e6c0

000b7570 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b7570:	b510      	push	{r4, lr}
        if (locked_) {
   b7572:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b7574:	4604      	mov	r4, r0
        if (locked_) {
   b7576:	b11b      	cbz	r3, b7580 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7578:	4b02      	ldr	r3, [pc, #8]	; (b7584 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b757a:	6818      	ldr	r0, [r3, #0]
   b757c:	f7ff fcd6 	bl	b6f2c <os_mutex_recursive_unlock>
    }
   b7580:	4620      	mov	r0, r4
   b7582:	bd10      	pop	{r4, pc}
   b7584:	2003e6c0 	.word	0x2003e6c0

000b7588 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b7588:	b082      	sub	sp, #8
   b758a:	4603      	mov	r3, r0
    address_ = addr;
   b758c:	6808      	ldr	r0, [r1, #0]
   b758e:	6849      	ldr	r1, [r1, #4]
   b7590:	466a      	mov	r2, sp
   b7592:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b7594:	466a      	mov	r2, sp
   b7596:	ca03      	ldmia	r2!, {r0, r1}
   b7598:	6018      	str	r0, [r3, #0]
}
   b759a:	4618      	mov	r0, r3
    address_ = addr.address_;
   b759c:	6059      	str	r1, [r3, #4]
}
   b759e:	b002      	add	sp, #8
   b75a0:	4770      	bx	lr

000b75a2 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b75a2:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b75a4:	7982      	ldrb	r2, [r0, #6]
   b75a6:	798b      	ldrb	r3, [r1, #6]
   b75a8:	429a      	cmp	r2, r3
   b75aa:	d106      	bne.n	b75ba <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b75ac:	2206      	movs	r2, #6
   b75ae:	f003 fa76 	bl	baa9e <memcmp>
   b75b2:	fab0 f080 	clz	r0, r0
   b75b6:	0940      	lsrs	r0, r0, #5
}
   b75b8:	bd08      	pop	{r3, pc}
    return false;
   b75ba:	2000      	movs	r0, #0
   b75bc:	e7fc      	b.n	b75b8 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b75be <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b75be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b75c2:	6003      	str	r3, [r0, #0]
   b75c4:	8083      	strh	r3, [r0, #4]
}
   b75c6:	2000      	movs	r0, #0
   b75c8:	4770      	bx	lr

000b75ca <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b75ca:	b508      	push	{r3, lr}
   b75cc:	4602      	mov	r2, r0
        : address_{} {
   b75ce:	2100      	movs	r1, #0
   b75d0:	6001      	str	r1, [r0, #0]
   b75d2:	6041      	str	r1, [r0, #4]
    clear();
   b75d4:	f7ff fff3 	bl	b75be <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b75d8:	7191      	strb	r1, [r2, #6]
}
   b75da:	4610      	mov	r0, r2
   b75dc:	bd08      	pop	{r3, pc}
	...

000b75e0 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b75e0:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b75e2:	2301      	movs	r3, #1
   b75e4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b75e6:	4b05      	ldr	r3, [pc, #20]	; (b75fc <_ZN8particle7BleUuidC1Ev+0x1c>)
   b75e8:	4602      	mov	r2, r0
   b75ea:	f103 0110 	add.w	r1, r3, #16
   b75ee:	f853 4b04 	ldr.w	r4, [r3], #4
   b75f2:	f842 4b04 	str.w	r4, [r2], #4
   b75f6:	428b      	cmp	r3, r1
   b75f8:	d1f9      	bne.n	b75ee <_ZN8particle7BleUuidC1Ev+0xe>
}
   b75fa:	bd10      	pop	{r4, pc}
   b75fc:	000bd1e2 	.word	0x000bd1e2

000b7600 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7600:	b510      	push	{r4, lr}
    if (uuid128) {
   b7602:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7604:	4604      	mov	r4, r0
    if (uuid128) {
   b7606:	b1b1      	cbz	r1, b7636 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b7608:	2a01      	cmp	r2, #1
   b760a:	f101 0210 	add.w	r2, r1, #16
   b760e:	d10a      	bne.n	b7626 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7610:	4601      	mov	r1, r0
   b7612:	f853 0b04 	ldr.w	r0, [r3], #4
   b7616:	f841 0b04 	str.w	r0, [r1], #4
   b761a:	4293      	cmp	r3, r2
   b761c:	d1f9      	bne.n	b7612 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b761e:	2301      	movs	r3, #1
   b7620:	6123      	str	r3, [r4, #16]
}
   b7622:	4620      	mov	r0, r4
   b7624:	bd10      	pop	{r4, pc}
   b7626:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b7628:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b762c:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b7630:	429a      	cmp	r2, r3
   b7632:	d1f9      	bne.n	b7628 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b7634:	e7f3      	b.n	b761e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b7636:	2210      	movs	r2, #16
   b7638:	f003 fa69 	bl	bab0e <memset>
   b763c:	e7f1      	b.n	b7622 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b763e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b763e:	b538      	push	{r3, r4, r5, lr}
   b7640:	4604      	mov	r4, r0
   b7642:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b7644:	461a      	mov	r2, r3
   b7646:	f7ff ffdb 	bl	b7600 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b764a:	81a5      	strh	r5, [r4, #12]
}
   b764c:	4620      	mov	r0, r4
   b764e:	bd38      	pop	{r3, r4, r5, pc}

000b7650 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b7650:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b7652:	6902      	ldr	r2, [r0, #16]
   b7654:	b922      	cbnz	r2, b7660 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b7656:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7658:	3800      	subs	r0, #0
   b765a:	bf18      	it	ne
   b765c:	2001      	movne	r0, #1
}
   b765e:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7660:	4902      	ldr	r1, [pc, #8]	; (b766c <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b7662:	2210      	movs	r2, #16
   b7664:	f003 fa1b 	bl	baa9e <memcmp>
   b7668:	e7f6      	b.n	b7658 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b766a:	bf00      	nop
   b766c:	000bd202 	.word	0x000bd202

000b7670 <_ZNK8particle7BleUuid4typeEv>:
}
   b7670:	6900      	ldr	r0, [r0, #16]
   b7672:	4770      	bx	lr

000b7674 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b7674:	b538      	push	{r3, r4, r5, lr}
   b7676:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b7678:	2214      	movs	r2, #20
   b767a:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b767c:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b767e:	f003 fa46 	bl	bab0e <memset>
    if (type_ == BleUuidType::SHORT) {
   b7682:	6923      	ldr	r3, [r4, #16]
   b7684:	b91b      	cbnz	r3, b768e <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b7686:	89a3      	ldrh	r3, [r4, #12]
   b7688:	802b      	strh	r3, [r5, #0]
}
   b768a:	4628      	mov	r0, r5
   b768c:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b768e:	2301      	movs	r3, #1
   b7690:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b7692:	4621      	mov	r1, r4
   b7694:	462b      	mov	r3, r5
   b7696:	f104 0210 	add.w	r2, r4, #16
   b769a:	f851 0b04 	ldr.w	r0, [r1], #4
   b769e:	f843 0b04 	str.w	r0, [r3], #4
   b76a2:	4291      	cmp	r1, r2
   b76a4:	d1f9      	bne.n	b769a <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b76a6:	e7f0      	b.n	b768a <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b76a8 <_ZNK8particle7BleUuid7shortedEv>:
}
   b76a8:	8980      	ldrh	r0, [r0, #12]
   b76aa:	4770      	bx	lr

000b76ac <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b76ac:	4770      	bx	lr

000b76ae <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b76ae:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b76b0:	6902      	ldr	r2, [r0, #16]
   b76b2:	690b      	ldr	r3, [r1, #16]
   b76b4:	429a      	cmp	r2, r3
   b76b6:	d106      	bne.n	b76c6 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b76b8:	2210      	movs	r2, #16
   b76ba:	f003 f9f0 	bl	baa9e <memcmp>
   b76be:	fab0 f080 	clz	r0, r0
   b76c2:	0940      	lsrs	r0, r0, #5
}
   b76c4:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b76c6:	2000      	movs	r0, #0
   b76c8:	e7fc      	b.n	b76c4 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b76cc <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b76cc:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b76ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b76d2:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b76d4:	4b34      	ldr	r3, [pc, #208]	; (b77a8 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b76d6:	460c      	mov	r4, r1
   b76d8:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b76da:	4602      	mov	r2, r0
   b76dc:	f103 0110 	add.w	r1, r3, #16
   b76e0:	f853 0b04 	ldr.w	r0, [r3], #4
   b76e4:	f842 0b04 	str.w	r0, [r2], #4
   b76e8:	428b      	cmp	r3, r1
   b76ea:	d1f9      	bne.n	b76e0 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b76ec:	b344      	cbz	r4, b7740 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b76ee:	2124      	movs	r1, #36	; 0x24
   b76f0:	4620      	mov	r0, r4
   b76f2:	f003 fa71 	bl	babd8 <strnlen>
   b76f6:	2804      	cmp	r0, #4
   b76f8:	f04f 0500 	mov.w	r5, #0
   b76fc:	d123      	bne.n	b7746 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b76fe:	f8ad 5004 	strh.w	r5, [sp, #4]
   b7702:	af01      	add	r7, sp, #4
   b7704:	1ca5      	adds	r5, r4, #2
   b7706:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b7708:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b770c:	f7ff ff0c 	bl	b7528 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b7710:	f1b0 0800 	subs.w	r8, r0, #0
   b7714:	db12      	blt.n	b773c <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b7716:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b771a:	f7ff ff05 	bl	b7528 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b771e:	2800      	cmp	r0, #0
   b7720:	db0c      	blt.n	b773c <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b7722:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7724:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b7728:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b772a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b772e:	d1eb      	bne.n	b7708 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b7730:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b7734:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b7736:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b773a:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b773c:	2300      	movs	r3, #0
   b773e:	6133      	str	r3, [r6, #16]
}
   b7740:	b002      	add	sp, #8
   b7742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b7746:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b774a:	2124      	movs	r1, #36	; 0x24
   b774c:	4620      	mov	r0, r4
   b774e:	f003 fa43 	bl	babd8 <strnlen>
   b7752:	42a8      	cmp	r0, r5
   b7754:	d807      	bhi.n	b7766 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b7756:	4642      	mov	r2, r8
   b7758:	2100      	movs	r1, #0
   b775a:	4630      	mov	r0, r6
}
   b775c:	b002      	add	sp, #8
   b775e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b7762:	f003 b9d4 	b.w	bab0e <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7766:	f1b8 0f00 	cmp.w	r8, #0
   b776a:	d0e9      	beq.n	b7740 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b776c:	5d60      	ldrb	r0, [r4, r5]
   b776e:	f7ff fedb 	bl	b7528 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b7772:	0603      	lsls	r3, r0, #24
   b7774:	d415      	bmi.n	b77a2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b7776:	0100      	lsls	r0, r0, #4
   b7778:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b777c:	b2c7      	uxtb	r7, r0
   b777e:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b7782:	2124      	movs	r1, #36	; 0x24
   b7784:	4620      	mov	r0, r4
   b7786:	f003 fa27 	bl	babd8 <strnlen>
   b778a:	3501      	adds	r5, #1
   b778c:	42a8      	cmp	r0, r5
   b778e:	d908      	bls.n	b77a2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b7790:	5d60      	ldrb	r0, [r4, r5]
   b7792:	f7ff fec9 	bl	b7528 <_ZN8particle11hexToNibbleEc>
   b7796:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b7798:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b779a:	bfa4      	itt	ge
   b779c:	4338      	orrge	r0, r7
   b779e:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b77a2:	3501      	adds	r5, #1
   b77a4:	e7d1      	b.n	b774a <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b77a6:	bf00      	nop
   b77a8:	000bd1e2 	.word	0x000bd1e2

000b77ac <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b77ac:	b513      	push	{r0, r1, r4, lr}
   b77ae:	4604      	mov	r4, r0
   b77b0:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b77b2:	f7ff ff15 	bl	b75e0 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b77b6:	4620      	mov	r0, r4
   b77b8:	9901      	ldr	r1, [sp, #4]
   b77ba:	f7ff ff87 	bl	b76cc <_ZN8particle7BleUuid9constructEPKc>
}
   b77be:	4620      	mov	r0, r4
   b77c0:	b002      	add	sp, #8
   b77c2:	bd10      	pop	{r4, pc}

000b77c4 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b77c4:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b77c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b77ca:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b77cc:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b77ce:	8043      	strh	r3, [r0, #2]
   b77d0:	220e      	movs	r2, #14
   b77d2:	4629      	mov	r1, r5
   b77d4:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b77d6:	7105      	strb	r5, [r0, #4]
   b77d8:	3006      	adds	r0, #6
   b77da:	f003 f998 	bl	bab0e <memset>
   b77de:	f104 0014 	add.w	r0, r4, #20
   b77e2:	f7ff fefd 	bl	b75e0 <_ZN8particle7BleUuidC1Ev>
   b77e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b77ea:	f7ff fef9 	bl	b75e0 <_ZN8particle7BleUuidC1Ev>
   b77ee:	4904      	ldr	r1, [pc, #16]	; (b7800 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b77f0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b77f4:	f001 fa67 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b77f8:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b77fa:	4620      	mov	r0, r4
   b77fc:	bd38      	pop	{r3, r4, r5, pc}
   b77fe:	bf00      	nop
   b7800:	000bcffe 	.word	0x000bcffe

000b7804 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b7804:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b7806:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b780a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b780e:	4293      	cmp	r3, r2
   b7810:	4618      	mov	r0, r3
   b7812:	d006      	beq.n	b7822 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b7814:	6804      	ldr	r4, [r0, #0]
   b7816:	8824      	ldrh	r4, [r4, #0]
   b7818:	428c      	cmp	r4, r1
   b781a:	f103 0308 	add.w	r3, r3, #8
   b781e:	d1f6      	bne.n	b780e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b7820:	bd10      	pop	{r4, pc}
        return nullptr;
   b7822:	2000      	movs	r0, #0
   b7824:	e7fc      	b.n	b7820 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b7828 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b7828:	b5f0      	push	{r4, r5, r6, r7, lr}
   b782a:	4606      	mov	r6, r0
   b782c:	b085      	sub	sp, #20
   b782e:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b7830:	460d      	mov	r5, r1
   b7832:	2900      	cmp	r1, #0
   b7834:	d050      	beq.n	b78d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b7836:	2a00      	cmp	r2, #0
   b7838:	d04e      	beq.n	b78d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b783a:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b783c:	7823      	ldrb	r3, [r4, #0]
   b783e:	2af4      	cmp	r2, #244	; 0xf4
   b7840:	bf28      	it	cs
   b7842:	22f4      	movcs	r2, #244	; 0xf4
   b7844:	b343      	cbz	r3, b7898 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b7846:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b7848:	0798      	lsls	r0, r3, #30
   b784a:	d509      	bpl.n	b7860 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b784c:	89a0      	ldrh	r0, [r4, #12]
   b784e:	9203      	str	r2, [sp, #12]
   b7850:	2300      	movs	r3, #0
   b7852:	f7ff fb15 	bl	b6e80 <hal_ble_gatt_server_set_characteristic_value>
   b7856:	2800      	cmp	r0, #0
   b7858:	9a03      	ldr	r2, [sp, #12]
   b785a:	da03      	bge.n	b7864 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b785c:	b005      	add	sp, #20
   b785e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b7860:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7864:	6834      	ldr	r4, [r6, #0]
   b7866:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b7868:	06d9      	lsls	r1, r3, #27
   b786a:	d509      	bpl.n	b7880 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b786c:	2f01      	cmp	r7, #1
   b786e:	d007      	beq.n	b7880 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7870:	89a0      	ldrh	r0, [r4, #12]
   b7872:	2300      	movs	r3, #0
   b7874:	4629      	mov	r1, r5
}
   b7876:	b005      	add	sp, #20
   b7878:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b787c:	f7ff bb32 	b.w	b6ee4 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b7880:	069b      	lsls	r3, r3, #26
   b7882:	d5eb      	bpl.n	b785c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7884:	2f02      	cmp	r7, #2
   b7886:	d0e9      	beq.n	b785c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7888:	89a0      	ldrh	r0, [r4, #12]
   b788a:	2300      	movs	r3, #0
   b788c:	4629      	mov	r1, r5
}
   b788e:	b005      	add	sp, #20
   b7890:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7894:	f7ff bb30 	b.w	b6ef8 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b7898:	8860      	ldrh	r0, [r4, #2]
   b789a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b789e:	4288      	cmp	r0, r1
   b78a0:	d01c      	beq.n	b78dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b78a2:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b78a4:	074e      	lsls	r6, r1, #29
   b78a6:	d501      	bpl.n	b78ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b78a8:	2f01      	cmp	r7, #1
   b78aa:	d104      	bne.n	b78b6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b78ac:	070b      	lsls	r3, r1, #28
   b78ae:	d409      	bmi.n	b78c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b78b0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b78b4:	e7d2      	b.n	b785c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b78b6:	89a1      	ldrh	r1, [r4, #12]
   b78b8:	9300      	str	r3, [sp, #0]
   b78ba:	4613      	mov	r3, r2
   b78bc:	462a      	mov	r2, r5
   b78be:	f7ff faf3 	bl	b6ea8 <hal_ble_gatt_client_write_without_response>
   b78c2:	e7cb      	b.n	b785c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b78c4:	2f02      	cmp	r7, #2
   b78c6:	d0f3      	beq.n	b78b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b78c8:	2300      	movs	r3, #0
   b78ca:	89a1      	ldrh	r1, [r4, #12]
   b78cc:	9300      	str	r3, [sp, #0]
   b78ce:	4613      	mov	r3, r2
   b78d0:	462a      	mov	r2, r5
   b78d2:	f7ff fadf 	bl	b6e94 <hal_ble_gatt_client_write_with_response>
   b78d6:	e7c1      	b.n	b785c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b78d8:	4802      	ldr	r0, [pc, #8]	; (b78e4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b78da:	e7bf      	b.n	b785c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b78dc:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b78e0:	e7bc      	b.n	b785c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b78e2:	bf00      	nop
   b78e4:	fffffef2 	.word	0xfffffef2

000b78e8 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b78e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b78ea:	460c      	mov	r4, r1
   b78ec:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b78ee:	21f4      	movs	r1, #244	; 0xf4
   b78f0:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b78f2:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b78f4:	f003 f970 	bl	babd8 <strnlen>
   b78f8:	9b01      	ldr	r3, [sp, #4]
   b78fa:	4602      	mov	r2, r0
   b78fc:	4621      	mov	r1, r4
   b78fe:	4628      	mov	r0, r5
}
   b7900:	b003      	add	sp, #12
   b7902:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b7906:	f7ff bf8f 	b.w	b7828 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b790c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b790c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7910:	2600      	movs	r6, #0
   b7912:	6006      	str	r6, [r0, #0]
   b7914:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7916:	2028      	movs	r0, #40	; 0x28
   b7918:	460c      	mov	r4, r1
   b791a:	f7fc fbbc 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b791e:	1e05      	subs	r5, r0, #0
   b7920:	f105 080c 	add.w	r8, r5, #12
   b7924:	d00f      	beq.n	b7946 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b7926:	2301      	movs	r3, #1
   b7928:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b792c:	4b08      	ldr	r3, [pc, #32]	; (b7950 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b792e:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b7930:	4640      	mov	r0, r8
   b7932:	f7ff fe55 	bl	b75e0 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b7936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b7938:	622e      	str	r6, [r5, #32]
   b793a:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b793e:	4646      	mov	r6, r8
   b7940:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b7942:	6823      	ldr	r3, [r4, #0]
   b7944:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b7946:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b794a:	4638      	mov	r0, r7
   b794c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7950:	000bd1a4 	.word	0x000bd1a4

000b7954 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b7954:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7956:	2500      	movs	r5, #0
   b7958:	6005      	str	r5, [r0, #0]
   b795a:	4606      	mov	r6, r0
   b795c:	2030      	movs	r0, #48	; 0x30
   b795e:	f7fc fb9a 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7962:	4604      	mov	r4, r0
   b7964:	b188      	cbz	r0, b798a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b7966:	2301      	movs	r3, #1
   b7968:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b796c:	4b09      	ldr	r3, [pc, #36]	; (b7994 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b796e:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b7970:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7974:	8183      	strh	r3, [r0, #12]
   b7976:	300e      	adds	r0, #14
   b7978:	f7ff fe27 	bl	b75ca <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b797c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b7980:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b7984:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b7988:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b798a:	6074      	str	r4, [r6, #4]
   b798c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b798e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b7990:	4630      	mov	r0, r6
   b7992:	bd70      	pop	{r4, r5, r6, pc}
   b7994:	000bd1c0 	.word	0x000bd1c0

000b7998 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b7998:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b799a:	460d      	mov	r5, r1
   b799c:	4604      	mov	r4, r0
    WiringBleLock lk;
   b799e:	a801      	add	r0, sp, #4
   b79a0:	f7ff fdd8 	bl	b7554 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b79a4:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b79a6:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b79aa:	6023      	str	r3, [r4, #0]
   b79ac:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b79b0:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b79b2:	a801      	add	r0, sp, #4
   b79b4:	f7ff fddc 	bl	b7570 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b79b8:	4620      	mov	r0, r4
   b79ba:	b003      	add	sp, #12
   b79bc:	bd30      	pop	{r4, r5, pc}

000b79be <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b79be:	b530      	push	{r4, r5, lr}
   b79c0:	4605      	mov	r5, r0
   b79c2:	b087      	sub	sp, #28
   b79c4:	460c      	mov	r4, r1
    WiringBleLock lk;
   b79c6:	a801      	add	r0, sp, #4
   b79c8:	f7ff fdc4 	bl	b7554 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b79cc:	682a      	ldr	r2, [r5, #0]
   b79ce:	6823      	ldr	r3, [r4, #0]
   b79d0:	8812      	ldrh	r2, [r2, #0]
   b79d2:	881b      	ldrh	r3, [r3, #0]
   b79d4:	429a      	cmp	r2, r3
   b79d6:	d10d      	bne.n	b79f4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b79d8:	4629      	mov	r1, r5
   b79da:	a802      	add	r0, sp, #8
   b79dc:	f7ff ffdc 	bl	b7998 <_ZNK8particle13BlePeerDevice7addressEv>
   b79e0:	4621      	mov	r1, r4
   b79e2:	a804      	add	r0, sp, #16
   b79e4:	f7ff ffd8 	bl	b7998 <_ZNK8particle13BlePeerDevice7addressEv>
   b79e8:	a904      	add	r1, sp, #16
   b79ea:	a802      	add	r0, sp, #8
   b79ec:	f7ff fdd9 	bl	b75a2 <_ZNK8particle10BleAddresseqERKS0_>
   b79f0:	4604      	mov	r4, r0
   b79f2:	b900      	cbnz	r0, b79f6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b79f4:	2400      	movs	r4, #0
    WiringBleLock lk;
   b79f6:	a801      	add	r0, sp, #4
   b79f8:	f7ff fdba 	bl	b7570 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b79fc:	4620      	mov	r0, r4
   b79fe:	b007      	add	sp, #28
   b7a00:	bd30      	pop	{r4, r5, pc}
	...

000b7a04 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b7a04:	b510      	push	{r4, lr}
   b7a06:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b7a08:	2064      	movs	r0, #100	; 0x64
   b7a0a:	f7fc fb44 	bl	b4096 <_Znwj>
   b7a0e:	b168      	cbz	r0, b7a2c <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b7a10:	2300      	movs	r3, #0
   b7a12:	e9c0 3300 	strd	r3, r3, [r0]
   b7a16:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b7a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b7a1e:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b7a22:	6203      	str	r3, [r0, #32]
   b7a24:	62c3      	str	r3, [r0, #44]	; 0x2c
   b7a26:	63c3      	str	r3, [r0, #60]	; 0x3c
   b7a28:	64c3      	str	r3, [r0, #76]	; 0x4c
   b7a2a:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b7a2c:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b7a2e:	b920      	cbnz	r0, b7a3a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b7a30:	4a0a      	ldr	r2, [pc, #40]	; (b7a5c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b7a32:	490b      	ldr	r1, [pc, #44]	; (b7a60 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b7a34:	200a      	movs	r0, #10
   b7a36:	f7ff fbc1 	bl	b71bc <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b7a3a:	2000      	movs	r0, #0
   b7a3c:	f7ff f9ec 	bl	b6e18 <hal_ble_stack_init>
   b7a40:	b120      	cbz	r0, b7a4c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b7a42:	4a06      	ldr	r2, [pc, #24]	; (b7a5c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b7a44:	4907      	ldr	r1, [pc, #28]	; (b7a64 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b7a46:	200a      	movs	r0, #10
   b7a48:	f7ff fbb8 	bl	b71bc <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b7a4c:	6821      	ldr	r1, [r4, #0]
   b7a4e:	4806      	ldr	r0, [pc, #24]	; (b7a68 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b7a50:	2200      	movs	r2, #0
   b7a52:	f7ff fa3d 	bl	b6ed0 <hal_ble_set_callback_on_periph_link_events>
}
   b7a56:	4620      	mov	r0, r4
   b7a58:	bd10      	pop	{r4, pc}
   b7a5a:	bf00      	nop
   b7a5c:	000b6f4d 	.word	0x000b6f4d
   b7a60:	000bd034 	.word	0x000bd034
   b7a64:	000bd072 	.word	0x000bd072
   b7a68:	000b7fed 	.word	0x000b7fed

000b7a6c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b7a6c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b7a6e:	4c0a      	ldr	r4, [pc, #40]	; (b7a98 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b7a70:	7823      	ldrb	r3, [r4, #0]
   b7a72:	f3bf 8f5b 	dmb	ish
   b7a76:	07db      	lsls	r3, r3, #31
   b7a78:	d40c      	bmi.n	b7a94 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7a7a:	4620      	mov	r0, r4
   b7a7c:	f7fc fb13 	bl	b40a6 <__cxa_guard_acquire>
   b7a80:	b140      	cbz	r0, b7a94 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7a82:	4806      	ldr	r0, [pc, #24]	; (b7a9c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7a84:	f7ff ffbe 	bl	b7a04 <_ZN8particle14BleLocalDeviceC1Ev>
   b7a88:	4620      	mov	r0, r4
   b7a8a:	f7fc fb11 	bl	b40b0 <__cxa_guard_release>
   b7a8e:	4804      	ldr	r0, [pc, #16]	; (b7aa0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b7a90:	f002 fff4 	bl	baa7c <atexit>
    return instance;
}
   b7a94:	4801      	ldr	r0, [pc, #4]	; (b7a9c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7a96:	bd10      	pop	{r4, pc}
   b7a98:	2003e6b8 	.word	0x2003e6b8
   b7a9c:	2003e6c4 	.word	0x2003e6c4
   b7aa0:	000b7cb9 	.word	0x000b7cb9

000b7aa4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7aa4:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b7aa6:	6803      	ldr	r3, [r0, #0]
   b7aa8:	3b09      	subs	r3, #9
   b7aaa:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7aac:	b08d      	sub	sp, #52	; 0x34
   b7aae:	4604      	mov	r4, r0
   b7ab0:	460d      	mov	r5, r1
    switch (event->type) {
   b7ab2:	d811      	bhi.n	b7ad8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b7ab4:	f7ff ffda 	bl	b7a6c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b7ab8:	88a1      	ldrh	r1, [r4, #4]
   b7aba:	6800      	ldr	r0, [r0, #0]
   b7abc:	f7ff fea2 	bl	b7804 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b7ac0:	4603      	mov	r3, r0
   b7ac2:	b958      	cbnz	r0, b7adc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b7ac4:	2220      	movs	r2, #32
   b7ac6:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b7aca:	4a0b      	ldr	r2, [pc, #44]	; (b7af8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b7acc:	9200      	str	r2, [sp, #0]
   b7ace:	490b      	ldr	r1, [pc, #44]	; (b7afc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b7ad0:	aa04      	add	r2, sp, #16
   b7ad2:	2032      	movs	r0, #50	; 0x32
   b7ad4:	f7ff fb7a 	bl	b71cc <log_message>
}
   b7ad8:	b00d      	add	sp, #52	; 0x34
   b7ada:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b7adc:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b7ade:	2a00      	cmp	r2, #0
   b7ae0:	d0fa      	beq.n	b7ad8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b7ae2:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7ae6:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b7aea:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b7aee:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b7af0:	aa04      	add	r2, sp, #16
   b7af2:	a903      	add	r1, sp, #12
   b7af4:	47a0      	blx	r4
}
   b7af6:	e7ef      	b.n	b7ad8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b7af8:	000bd0b4 	.word	0x000bd0b4
   b7afc:	000bd04b 	.word	0x000bd04b

000b7b00 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b7b00:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b7b02:	2000      	movs	r0, #0
   b7b04:	f7ff f988 	bl	b6e18 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b7b08:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b7b0c:	bd08      	pop	{r3, pc}

000b7b0e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b7b0e:	b919      	cbnz	r1, b7b18 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b7b10:	460a      	mov	r2, r1
   b7b12:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b7b14:	f7ff b988 	b.w	b6e28 <hal_ble_gap_set_advertising_data>
   b7b18:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7b1c:	2200      	movs	r2, #0
   b7b1e:	e7f9      	b.n	b7b14 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b7b20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7b20:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b7b22:	1e14      	subs	r4, r2, #0
   b7b24:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7b26:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b7b28:	db02      	blt.n	b7b30 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b7b2a:	1862      	adds	r2, r4, r1
   b7b2c:	429a      	cmp	r2, r3
   b7b2e:	dd00      	ble.n	b7b32 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b7b30:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b7b32:	682a      	ldr	r2, [r5, #0]
   b7b34:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b7b36:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b7b38:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7b3a:	1a52      	subs	r2, r2, r1
   b7b3c:	f002 ffcd 	bl	baada <memmove>
    size_ -= n;
   b7b40:	686a      	ldr	r2, [r5, #4]
   b7b42:	1b12      	subs	r2, r2, r4
   b7b44:	606a      	str	r2, [r5, #4]
}
   b7b46:	bd38      	pop	{r3, r4, r5, pc}

000b7b48 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b7b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b7b4a:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b7b4c:	4604      	mov	r4, r0
   b7b4e:	460d      	mov	r5, r1
   b7b50:	ab01      	add	r3, sp, #4
   b7b52:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7b56:	f7ff fc73 	bl	b7440 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b7b5a:	4602      	mov	r2, r0
   b7b5c:	b138      	cbz	r0, b7b6e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b7b5e:	9901      	ldr	r1, [sp, #4]
   b7b60:	4620      	mov	r0, r4
   b7b62:	f7ff ffdd 	bl	b7b20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b7b66:	4629      	mov	r1, r5
   b7b68:	4620      	mov	r0, r4
   b7b6a:	f7ff ffed 	bl	b7b48 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b7b6e:	b003      	add	sp, #12
   b7b70:	bd30      	pop	{r4, r5, pc}

000b7b72 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b7b72:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b7b74:	460c      	mov	r4, r1
   b7b76:	b929      	cbnz	r1, b7b84 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b7b78:	460a      	mov	r2, r1
   b7b7a:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b7b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7b80:	f7ff b95a 	b.w	b6e38 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b7b84:	2101      	movs	r1, #1
   b7b86:	4620      	mov	r0, r4
   b7b88:	f7ff ffde 	bl	b7b48 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7b8c:	e9d4 0100 	ldrd	r0, r1, [r4]
   b7b90:	2200      	movs	r2, #0
   b7b92:	e7f3      	b.n	b7b7c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b7b94 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b7b94:	b538      	push	{r3, r4, r5, lr}
   b7b96:	4604      	mov	r4, r0
   b7b98:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b7b9a:	f7ff ffb8 	bl	b7b0e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b7b9e:	2800      	cmp	r0, #0
   b7ba0:	db0a      	blt.n	b7bb8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b7ba2:	4629      	mov	r1, r5
   b7ba4:	4620      	mov	r0, r4
   b7ba6:	f7ff ffe4 	bl	b7b72 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b7baa:	2800      	cmp	r0, #0
   b7bac:	db04      	blt.n	b7bb8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b7bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b7bb2:	2000      	movs	r0, #0
   b7bb4:	f7ff b948 	b.w	b6e48 <hal_ble_gap_start_advertising>
}
   b7bb8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b7bbc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b7bbc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b7bbe:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7bc0:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7bc2:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7bc4:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b7bc6:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7bc8:	f7fc fa65 	bl	b4096 <_Znwj>
   b7bcc:	b118      	cbz	r0, b7bd6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b7bce:	682b      	ldr	r3, [r5, #0]
   b7bd0:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7bd2:	686b      	ldr	r3, [r5, #4]
   b7bd4:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b7bd6:	4b03      	ldr	r3, [pc, #12]	; (b7be4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b7bd8:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b7bda:	4b03      	ldr	r3, [pc, #12]	; (b7be8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7bdc:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b7bde:	60a3      	str	r3, [r4, #8]
      }
   b7be0:	4620      	mov	r0, r4
   b7be2:	bd38      	pop	{r3, r4, r5, pc}
   b7be4:	000b7481 	.word	0x000b7481
   b7be8:	000b7499 	.word	0x000b7499

000b7bec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b7bec:	680b      	ldr	r3, [r1, #0]
   b7bee:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b7bf0:	b113      	cbz	r3, b7bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b7bf2:	685a      	ldr	r2, [r3, #4]
   b7bf4:	3201      	adds	r2, #1
   b7bf6:	605a      	str	r2, [r3, #4]
      }
   b7bf8:	4770      	bx	lr

000b7bfa <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b7bfa:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7bfc:	f851 3b04 	ldr.w	r3, [r1], #4
   b7c00:	4604      	mov	r4, r0
   b7c02:	f840 3b04 	str.w	r3, [r0], #4
   b7c06:	f7ff fff1 	bl	b7bec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b7c0a:	6823      	ldr	r3, [r4, #0]
   b7c0c:	b90b      	cbnz	r3, b7c12 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b7c0e:	f7ff fc2d 	bl	b746c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b7c12:	4620      	mov	r0, r4
   b7c14:	bd10      	pop	{r4, pc}

000b7c16 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b7c16:	b510      	push	{r4, lr}
   b7c18:	f851 3b04 	ldr.w	r3, [r1], #4
   b7c1c:	4604      	mov	r4, r0
   b7c1e:	f840 3b04 	str.w	r3, [r0], #4
   b7c22:	f7ff ffe3 	bl	b7bec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b7c26:	4620      	mov	r0, r4
   b7c28:	bd10      	pop	{r4, pc}

000b7c2a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b7c2a:	b510      	push	{r4, lr}
   b7c2c:	f851 3b04 	ldr.w	r3, [r1], #4
   b7c30:	4604      	mov	r4, r0
   b7c32:	f840 3b04 	str.w	r3, [r0], #4
   b7c36:	f7ff ffd9 	bl	b7bec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b7c3a:	4620      	mov	r0, r4
   b7c3c:	bd10      	pop	{r4, pc}

000b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b7c3e:	b510      	push	{r4, lr}
   b7c40:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b7c42:	6800      	ldr	r0, [r0, #0]
   b7c44:	b108      	cbz	r0, b7c4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b7c46:	f7ff fc5b 	bl	b7500 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b7c4a:	4620      	mov	r0, r4
   b7c4c:	bd10      	pop	{r4, pc}

000b7c4e <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b7c4e:	b510      	push	{r4, lr}
   b7c50:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7c52:	3004      	adds	r0, #4
   b7c54:	f7ff fff3 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7c58:	4620      	mov	r0, r4
   b7c5a:	bd10      	pop	{r4, pc}

000b7c5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7c5c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7c5e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7c62:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7c64:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7c68:	42ae      	cmp	r6, r5
   b7c6a:	d004      	beq.n	b7c76 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b7c6c:	1d28      	adds	r0, r5, #4
   b7c6e:	f7ff ffe6 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7c72:	3508      	adds	r5, #8
   b7c74:	e7f8      	b.n	b7c68 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7c76:	6820      	ldr	r0, [r4, #0]
   b7c78:	f7ff fb44 	bl	b7304 <free>
}
   b7c7c:	4620      	mov	r0, r4
   b7c7e:	bd70      	pop	{r4, r5, r6, pc}

000b7c80 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7c80:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7c82:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7c86:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7c88:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7c8c:	42ae      	cmp	r6, r5
   b7c8e:	d004      	beq.n	b7c9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b7c90:	1d28      	adds	r0, r5, #4
   b7c92:	f7ff ffd4 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7c96:	3508      	adds	r5, #8
   b7c98:	e7f8      	b.n	b7c8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7c9a:	6820      	ldr	r0, [r4, #0]
   b7c9c:	f7ff fb32 	bl	b7304 <free>
}
   b7ca0:	4620      	mov	r0, r4
   b7ca2:	bd70      	pop	{r4, r5, r6, pc}

000b7ca4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7ca4:	b510      	push	{r4, lr}
   b7ca6:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b7ca8:	3024      	adds	r0, #36	; 0x24
   b7caa:	f7ff ffe9 	bl	b7c80 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7cae:	f104 0018 	add.w	r0, r4, #24
   b7cb2:	f7ff ffd3 	bl	b7c5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b7cb6:	bd10      	pop	{r4, pc}

000b7cb8 <__tcf_0>:
    static BleLocalDevice instance;
   b7cb8:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b7cba:	4b17      	ldr	r3, [pc, #92]	; (b7d18 <__tcf_0+0x60>)
   b7cbc:	681c      	ldr	r4, [r3, #0]
   b7cbe:	b354      	cbz	r4, b7d16 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b7cc0:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7cc4:	f7ff fc08 	bl	b74d8 <_ZNSt14_Function_baseD1Ev>
   b7cc8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7ccc:	f7ff fc04 	bl	b74d8 <_ZNSt14_Function_baseD1Ev>
   b7cd0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7cd4:	f7ff fc00 	bl	b74d8 <_ZNSt14_Function_baseD1Ev>
   b7cd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7cdc:	f7ff fbfc 	bl	b74d8 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b7ce0:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b7ce4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7ce8:	42ae      	cmp	r6, r5
   b7cea:	d004      	beq.n	b7cf6 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b7cec:	1d28      	adds	r0, r5, #4
   b7cee:	f7ff ffa6 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7cf2:	3508      	adds	r5, #8
   b7cf4:	e7f8      	b.n	b7ce8 <__tcf_0+0x30>
    ::free(ptr);
   b7cf6:	69a0      	ldr	r0, [r4, #24]
   b7cf8:	f7ff fb04 	bl	b7304 <free>
    ~BleLocalDeviceImpl() = default;
   b7cfc:	f104 000c 	add.w	r0, r4, #12
   b7d00:	f7ff ffbe 	bl	b7c80 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7d04:	4620      	mov	r0, r4
   b7d06:	f7ff ffa9 	bl	b7c5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b7d0a:	4620      	mov	r0, r4
   b7d0c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b7d0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7d12:	f7fc b9c6 	b.w	b40a2 <_ZdlPvj>
   b7d16:	bd70      	pop	{r4, r5, r6, pc}
   b7d18:	2003e6c4 	.word	0x2003e6c4

000b7d1c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b7d1c:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b7d1e:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7d20:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b7d24:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b7d28:	6803      	ldr	r3, [r0, #0]
   b7d2a:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b7d2c:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7d2e:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b7d30:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b7d32:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b7d34:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b7d36:	f7ff ff82 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b7d3a:	b002      	add	sp, #8
   b7d3c:	bd10      	pop	{r4, pc}

000b7d3e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b7d3e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7d40:	b510      	push	{r4, lr}
      if (_M_empty())
   b7d42:	b90a      	cbnz	r2, b7d48 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b7d44:	f001 fe41 	bl	b99ca <_ZSt25__throw_bad_function_callv>
    }
   b7d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7d4c:	68c3      	ldr	r3, [r0, #12]
   b7d4e:	4718      	bx	r3

000b7d50 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b7d50:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b7d52:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b7d54:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7d56:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7d58:	dd03      	ble.n	b7d62 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b7d5a:	f7ff fadb 	bl	b7314 <realloc>
            if (!d) {
   b7d5e:	b918      	cbnz	r0, b7d68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b7d60:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b7d62:	f7ff facf 	bl	b7304 <free>
        T* d = nullptr;
   b7d66:	2000      	movs	r0, #0
        data_ = d;
   b7d68:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7d6a:	60a5      	str	r5, [r4, #8]
        return true;
   b7d6c:	2001      	movs	r0, #1
   b7d6e:	e7f7      	b.n	b7d60 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b7d70 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b7d70:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b7d72:	6883      	ldr	r3, [r0, #8]
   b7d74:	428b      	cmp	r3, r1
   b7d76:	da02      	bge.n	b7d7e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b7d78:	f7ff ffea 	bl	b7d50 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b7d7c:	bd08      	pop	{r3, pc}
    return true;
   b7d7e:	2001      	movs	r0, #1
   b7d80:	e7fc      	b.n	b7d7c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b7d82 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7d86:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7d88:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7d8a:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7d8c:	4419      	add	r1, r3
   b7d8e:	6883      	ldr	r3, [r0, #8]
   b7d90:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7d92:	4604      	mov	r4, r0
   b7d94:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7d96:	dc12      	bgt.n	b7dbe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b7d98:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7d9a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7d9c:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7d9e:	1bd2      	subs	r2, r2, r7
   b7da0:	4631      	mov	r1, r6
   b7da2:	1970      	adds	r0, r6, r5
   b7da4:	f002 fe99 	bl	baada <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7da8:	462a      	mov	r2, r5
   b7daa:	4641      	mov	r1, r8
   b7dac:	4630      	mov	r0, r6
   b7dae:	f002 fe86 	bl	baabe <memcpy>
    size_ += n;
   b7db2:	6863      	ldr	r3, [r4, #4]
   b7db4:	442b      	add	r3, r5
   b7db6:	6063      	str	r3, [r4, #4]
    return true;
   b7db8:	2001      	movs	r0, #1
}
   b7dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7dbe:	f7ff ffc7 	bl	b7d50 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7dc2:	2800      	cmp	r0, #0
   b7dc4:	d1e8      	bne.n	b7d98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b7dc6:	e7f8      	b.n	b7dba <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b7dc8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7dca:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7dcc:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b7dd0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7dd2:	4604      	mov	r4, r0
   b7dd4:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7dd6:	da0b      	bge.n	b7df0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b7dd8:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7dda:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7ddc:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7dde:	1b52      	subs	r2, r2, r5
   b7de0:	1c48      	adds	r0, r1, #1
   b7de2:	f002 fe7a 	bl	baada <memmove>
    new(p) T(std::move(value));
   b7de6:	557e      	strb	r6, [r7, r5]
    ++size_;
   b7de8:	6863      	ldr	r3, [r4, #4]
   b7dea:	3301      	adds	r3, #1
   b7dec:	6063      	str	r3, [r4, #4]
}
   b7dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7df0:	3101      	adds	r1, #1
   b7df2:	f7ff ffad 	bl	b7d50 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7df6:	2800      	cmp	r0, #0
   b7df8:	d1ee      	bne.n	b7dd8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b7dfa:	e7f8      	b.n	b7dee <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b7dfc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7dfc:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b7dfe:	6841      	ldr	r1, [r0, #4]
   b7e00:	f7ff bfe2 	b.w	b7dc8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b7e04 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7e04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7e08:	4604      	mov	r4, r0
   b7e0a:	461d      	mov	r5, r3
   b7e0c:	460f      	mov	r7, r1
   b7e0e:	ab01      	add	r3, sp, #4
   b7e10:	4690      	mov	r8, r2
   b7e12:	460a      	mov	r2, r1
   b7e14:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7e18:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b7e1c:	f7ff fb10 	bl	b7440 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b7e20:	1cae      	adds	r6, r5, #2
   b7e22:	6863      	ldr	r3, [r4, #4]
   b7e24:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b7e26:	f1b9 0f00 	cmp.w	r9, #0
   b7e2a:	d126      	bne.n	b7e7a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b7e2c:	b328      	cbz	r0, b7e7a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7e2e:	4433      	add	r3, r6
   b7e30:	1a1b      	subs	r3, r3, r0
   b7e32:	2bff      	cmp	r3, #255	; 0xff
   b7e34:	d809      	bhi.n	b7e4a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b7e36:	9901      	ldr	r1, [sp, #4]
   b7e38:	4620      	mov	r0, r4
   b7e3a:	f7ff fe71 	bl	b7b20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7e3e:	6861      	ldr	r1, [r4, #4]
   b7e40:	4620      	mov	r0, r4
   b7e42:	4431      	add	r1, r6
   b7e44:	f7ff ff94 	bl	b7d70 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7e48:	b918      	cbnz	r0, b7e52 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b7e4a:	6860      	ldr	r0, [r4, #4]
}
   b7e4c:	b003      	add	sp, #12
   b7e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b7e52:	1c6a      	adds	r2, r5, #1
   b7e54:	9901      	ldr	r1, [sp, #4]
   b7e56:	b2d2      	uxtb	r2, r2
   b7e58:	4620      	mov	r0, r4
   b7e5a:	f7ff ffb5 	bl	b7dc8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b7e5e:	9901      	ldr	r1, [sp, #4]
   b7e60:	463a      	mov	r2, r7
   b7e62:	3101      	adds	r1, #1
   b7e64:	4620      	mov	r0, r4
   b7e66:	f7ff ffaf 	bl	b7dc8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b7e6a:	9901      	ldr	r1, [sp, #4]
   b7e6c:	462b      	mov	r3, r5
   b7e6e:	4642      	mov	r2, r8
   b7e70:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b7e72:	4620      	mov	r0, r4
   b7e74:	f7ff ff85 	bl	b7d82 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b7e78:	e7e7      	b.n	b7e4a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7e7a:	18f1      	adds	r1, r6, r3
   b7e7c:	29ff      	cmp	r1, #255	; 0xff
   b7e7e:	d8e4      	bhi.n	b7e4a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7e80:	4620      	mov	r0, r4
   b7e82:	f7ff ff75 	bl	b7d70 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7e86:	2800      	cmp	r0, #0
   b7e88:	d0df      	beq.n	b7e4a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b7e8a:	1c69      	adds	r1, r5, #1
   b7e8c:	b2c9      	uxtb	r1, r1
   b7e8e:	4620      	mov	r0, r4
   b7e90:	f7ff ffb4 	bl	b7dfc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b7e94:	4639      	mov	r1, r7
   b7e96:	4620      	mov	r0, r4
   b7e98:	f7ff ffb0 	bl	b7dfc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b7e9c:	6861      	ldr	r1, [r4, #4]
   b7e9e:	462b      	mov	r3, r5
   b7ea0:	4642      	mov	r2, r8
   b7ea2:	e7e6      	b.n	b7e72 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b7ea4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7ea4:	b430      	push	{r4, r5}
   b7ea6:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b7eaa:	b11a      	cbz	r2, b7eb4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b7eac:	9502      	str	r5, [sp, #8]
}
   b7eae:	bc30      	pop	{r4, r5}
   b7eb0:	f7ff bfa8 	b.w	b7e04 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b7eb4:	6840      	ldr	r0, [r0, #4]
}
   b7eb6:	bc30      	pop	{r4, r5}
   b7eb8:	4770      	bx	lr

000b7eba <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b7eba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b7ebc:	2300      	movs	r3, #0
   b7ebe:	e9c0 3300 	strd	r3, r3, [r0]
   b7ec2:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7ec4:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7ec6:	9300      	str	r3, [sp, #0]
   b7ec8:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7eca:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7ece:	4619      	mov	r1, r3
   b7ed0:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b7ed4:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7ed6:	f7ff ffe5 	bl	b7ea4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7eda:	4620      	mov	r0, r4
   b7edc:	b004      	add	sp, #16
   b7ede:	bd10      	pop	{r4, pc}

000b7ee0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7ee0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7ee4:	4604      	mov	r4, r0
   b7ee6:	460d      	mov	r5, r1
   b7ee8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7eea:	d914      	bls.n	b7f16 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7eec:	4290      	cmp	r0, r2
   b7eee:	d213      	bcs.n	b7f18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7ef0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7ef4:	1a75      	subs	r5, r6, r1
   b7ef6:	f1a1 0708 	sub.w	r7, r1, #8
   b7efa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7efc:	42b7      	cmp	r7, r6
   b7efe:	d018      	beq.n	b7f32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7f00:	b11c      	cbz	r4, b7f0a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7f02:	4631      	mov	r1, r6
   b7f04:	4620      	mov	r0, r4
   b7f06:	f7ff fe90 	bl	b7c2a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b7f0a:	1d30      	adds	r0, r6, #4
   b7f0c:	f7ff fe97 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7f10:	3e08      	subs	r6, #8
   b7f12:	3c08      	subs	r4, #8
   b7f14:	e7f2      	b.n	b7efc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7f16:	d00c      	beq.n	b7f32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7f18:	42b5      	cmp	r5, r6
   b7f1a:	d00a      	beq.n	b7f32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7f1c:	b11c      	cbz	r4, b7f26 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7f1e:	4629      	mov	r1, r5
   b7f20:	4620      	mov	r0, r4
   b7f22:	f7ff fe82 	bl	b7c2a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7f26:	1d28      	adds	r0, r5, #4
   b7f28:	f7ff fe89 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7f2c:	3508      	adds	r5, #8
   b7f2e:	3408      	adds	r4, #8
   b7f30:	e7f2      	b.n	b7f18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7f34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7f36:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7f38:	6846      	ldr	r6, [r0, #4]
   b7f3a:	4668      	mov	r0, sp
   b7f3c:	f7ff fe75 	bl	b7c2a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7f40:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7f44:	429f      	cmp	r7, r3
   b7f46:	db12      	blt.n	b7f6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7f48:	3701      	adds	r7, #1
        if (n > 0) {
   b7f4a:	2f00      	cmp	r7, #0
   b7f4c:	dd29      	ble.n	b7fa2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b7f4e:	00f8      	lsls	r0, r7, #3
   b7f50:	f7ff f9d0 	bl	b72f4 <malloc>
            if (!d) {
   b7f54:	4605      	mov	r5, r0
   b7f56:	b1f0      	cbz	r0, b7f96 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7f58:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7f5c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7f60:	f7ff ffbe 	bl	b7ee0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7f64:	6820      	ldr	r0, [r4, #0]
   b7f66:	f7ff f9cd 	bl	b7304 <free>
        data_ = d;
   b7f6a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7f6c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b7f6e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7f70:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7f72:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7f76:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7f7a:	4631      	mov	r1, r6
   b7f7c:	f106 0008 	add.w	r0, r6, #8
   b7f80:	f7ff ffae 	bl	b7ee0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7f84:	b11e      	cbz	r6, b7f8e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b7f86:	4669      	mov	r1, sp
   b7f88:	4630      	mov	r0, r6
   b7f8a:	f7ff fe4e 	bl	b7c2a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b7f8e:	6863      	ldr	r3, [r4, #4]
   b7f90:	3301      	adds	r3, #1
   b7f92:	6063      	str	r3, [r4, #4]
    return true;
   b7f94:	2501      	movs	r5, #1
   b7f96:	a801      	add	r0, sp, #4
   b7f98:	f7ff fe51 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7f9c:	4628      	mov	r0, r5
   b7f9e:	b003      	add	sp, #12
   b7fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b7fa2:	2500      	movs	r5, #0
   b7fa4:	e7de      	b.n	b7f64 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b7fa6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b7fa8:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7fac:	4605      	mov	r5, r0
   b7fae:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b7fb0:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b7fb4:	42a6      	cmp	r6, r4
   b7fb6:	d005      	beq.n	b7fc4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b7fb8:	4639      	mov	r1, r7
   b7fba:	4620      	mov	r0, r4
   b7fbc:	f7ff fcff 	bl	b79be <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b7fc0:	b108      	cbz	r0, b7fc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b7fc2:	b914      	cbnz	r4, b7fca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b7fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b7fc6:	3408      	adds	r4, #8
   b7fc8:	e7f4      	b.n	b7fb4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b7fca:	1d20      	adds	r0, r4, #4
   b7fcc:	f7ff fe37 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b7fd0:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7fd4:	f104 0108 	add.w	r1, r4, #8
   b7fd8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7fdc:	4620      	mov	r0, r4
   b7fde:	f7ff ff7f 	bl	b7ee0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b7fe2:	686b      	ldr	r3, [r5, #4]
   b7fe4:	3b01      	subs	r3, #1
   b7fe6:	606b      	str	r3, [r5, #4]
    return true;
   b7fe8:	e7ec      	b.n	b7fc4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b7fec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7ff0:	4605      	mov	r5, r0
   b7ff2:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b7ff4:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7ff6:	460c      	mov	r4, r1
        WiringBleLock lk;
   b7ff8:	f7ff faac 	bl	b7554 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7ffc:	682e      	ldr	r6, [r5, #0]
   b7ffe:	1ef3      	subs	r3, r6, #3
   b8000:	2b0d      	cmp	r3, #13
   b8002:	d83c      	bhi.n	b807e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8004:	e8df f013 	tbh	[pc, r3, lsl #1]
   b8008:	0053000e 	.word	0x0053000e
   b800c:	00d1003b 	.word	0x00d1003b
   b8010:	003b003b 	.word	0x003b003b
   b8014:	003b003b 	.word	0x003b003b
   b8018:	009b003b 	.word	0x009b003b
   b801c:	009b009b 	.word	0x009b009b
   b8020:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b8024:	a804      	add	r0, sp, #16
   b8026:	f7ff fc95 	bl	b7954 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b802a:	9b04      	ldr	r3, [sp, #16]
   b802c:	89aa      	ldrh	r2, [r5, #12]
   b802e:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b8030:	6869      	ldr	r1, [r5, #4]
   b8032:	9804      	ldr	r0, [sp, #16]
   b8034:	3108      	adds	r1, #8
   b8036:	3002      	adds	r0, #2
   b8038:	f7ff faa6 	bl	b7588 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b803c:	a904      	add	r1, sp, #16
   b803e:	a806      	add	r0, sp, #24
   b8040:	f7ff fdf3 	bl	b7c2a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b8044:	a906      	add	r1, sp, #24
   b8046:	f104 0018 	add.w	r0, r4, #24
   b804a:	f7ff ff73 	bl	b7f34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b804e:	4605      	mov	r5, r0
   b8050:	a807      	add	r0, sp, #28
   b8052:	f7ff fdf4 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8056:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b8058:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b805a:	b9b5      	cbnz	r5, b808a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b805c:	4b5d      	ldr	r3, [pc, #372]	; (b81d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b805e:	495e      	ldr	r1, [pc, #376]	; (b81d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8060:	9300      	str	r3, [sp, #0]
   b8062:	2032      	movs	r0, #50	; 0x32
   b8064:	462b      	mov	r3, r5
   b8066:	aa06      	add	r2, sp, #24
   b8068:	9507      	str	r5, [sp, #28]
   b806a:	f7ff f8af 	bl	b71cc <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b806e:	9b04      	ldr	r3, [sp, #16]
   b8070:	4629      	mov	r1, r5
   b8072:	8818      	ldrh	r0, [r3, #0]
   b8074:	f7fe fef0 	bl	b6e58 <hal_ble_gap_disconnect>
   b8078:	a805      	add	r0, sp, #20
   b807a:	f7ff fde0 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b807e:	a803      	add	r0, sp, #12
   b8080:	f7ff fa76 	bl	b7570 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b8084:	b00e      	add	sp, #56	; 0x38
   b8086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b808a:	4a54      	ldr	r2, [pc, #336]	; (b81dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b808c:	9200      	str	r2, [sp, #0]
   b808e:	2300      	movs	r3, #0
   b8090:	4951      	ldr	r1, [pc, #324]	; (b81d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8092:	9307      	str	r3, [sp, #28]
   b8094:	aa06      	add	r2, sp, #24
   b8096:	2001      	movs	r0, #1
   b8098:	f7ff f898 	bl	b71cc <log_message>
                if (impl->connectedCallback_) {
   b809c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b809e:	2b00      	cmp	r3, #0
   b80a0:	d0ea      	beq.n	b8078 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b80a2:	a904      	add	r1, sp, #16
   b80a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b80a8:	f7ff fe49 	bl	b7d3e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b80ac:	e7e4      	b.n	b8078 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b80ae:	89a9      	ldrh	r1, [r5, #12]
   b80b0:	4620      	mov	r0, r4
   b80b2:	f7ff fba7 	bl	b7804 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b80b6:	4606      	mov	r6, r0
   b80b8:	2800      	cmp	r0, #0
   b80ba:	d0e0      	beq.n	b807e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b80bc:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b80be:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b80c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b80c6:	8029      	strh	r1, [r5, #0]
   b80c8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b80cc:	429a      	cmp	r2, r3
   b80ce:	d003      	beq.n	b80d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b80d0:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b80d4:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b80d6:	e7f9      	b.n	b80cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b80d8:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b80dc:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b80e0:	45b8      	cmp	r8, r7
   b80e2:	d004      	beq.n	b80ee <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b80e4:	1d38      	adds	r0, r7, #4
   b80e6:	f7ff fdaa 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b80ea:	3708      	adds	r7, #8
   b80ec:	e7f8      	b.n	b80e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b80ee:	2300      	movs	r3, #0
   b80f0:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b80f2:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b80f6:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b80fa:	45b8      	cmp	r8, r7
   b80fc:	d004      	beq.n	b8108 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b80fe:	1d38      	adds	r0, r7, #4
   b8100:	f7ff fd9d 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8104:	3708      	adds	r7, #8
   b8106:	e7f8      	b.n	b80fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b8108:	2300      	movs	r3, #0
   b810a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b810c:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b810e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8110:	b123      	cbz	r3, b811c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b8112:	4631      	mov	r1, r6
   b8114:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8118:	f7ff fe11 	bl	b7d3e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b811c:	2300      	movs	r3, #0
   b811e:	2220      	movs	r2, #32
   b8120:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b8124:	4a2e      	ldr	r2, [pc, #184]	; (b81e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b8126:	9200      	str	r2, [sp, #0]
   b8128:	492b      	ldr	r1, [pc, #172]	; (b81d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b812a:	aa06      	add	r2, sp, #24
   b812c:	2001      	movs	r0, #1
   b812e:	f7ff f84d 	bl	b71cc <log_message>
                    impl->peers_.removeOne(*peer);
   b8132:	4631      	mov	r1, r6
   b8134:	f104 0018 	add.w	r0, r4, #24
   b8138:	f7ff ff35 	bl	b7fa6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b813c:	e79f      	b.n	b807e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b813e:	89a9      	ldrh	r1, [r5, #12]
   b8140:	4620      	mov	r0, r4
   b8142:	f7ff fb5f 	bl	b7804 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8146:	2800      	cmp	r0, #0
   b8148:	d099      	beq.n	b807e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b814a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b814c:	2b00      	cmp	r3, #0
   b814e:	d096      	beq.n	b807e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b8150:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8152:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b8154:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8158:	d001      	beq.n	b815e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b815a:	2e10      	cmp	r6, #16
   b815c:	d117      	bne.n	b818e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b815e:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b8160:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b8162:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b8164:	2506      	movs	r5, #6
                        };
   b8166:	f88d 3015 	strb.w	r3, [sp, #21]
   b816a:	9104      	str	r1, [sp, #16]
   b816c:	f88d 2014 	strb.w	r2, [sp, #20]
   b8170:	9006      	str	r0, [sp, #24]
   b8172:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b8176:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b8178:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b817c:	9508      	str	r5, [sp, #32]
   b817e:	e883 0003 	stmia.w	r3, {r0, r1}
   b8182:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b8184:	a906      	add	r1, sp, #24
   b8186:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b818a:	4798      	blx	r3
   b818c:	e777      	b.n	b807e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b818e:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8190:	bf01      	itttt	eq
   b8192:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b8194:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8196:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b819a:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b819c:	bf0f      	iteee	eq
   b819e:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b81a2:	461a      	movne	r2, r3
   b81a4:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b81a6:	461d      	movne	r5, r3
   b81a8:	e7dd      	b.n	b8166 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b81aa:	89a9      	ldrh	r1, [r5, #12]
   b81ac:	4620      	mov	r0, r4
   b81ae:	f7ff fb29 	bl	b7804 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b81b2:	4601      	mov	r1, r0
   b81b4:	2800      	cmp	r0, #0
   b81b6:	f43f af62 	beq.w	b807e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b81ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b81bc:	2b00      	cmp	r3, #0
   b81be:	f43f af5e 	beq.w	b807e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b81c2:	686b      	ldr	r3, [r5, #4]
   b81c4:	9306      	str	r3, [sp, #24]
   b81c6:	aa06      	add	r2, sp, #24
   b81c8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b81ca:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b81ce:	4798      	blx	r3
   b81d0:	e755      	b.n	b807e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b81d2:	bf00      	nop
   b81d4:	000bd0cc 	.word	0x000bd0cc
   b81d8:	000bd04b 	.word	0x000bd04b
   b81dc:	000bd0f2 	.word	0x000bd0f2
   b81e0:	000bd10f 	.word	0x000bd10f

000b81e4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b81e4:	b513      	push	{r0, r1, r4, lr}
   b81e6:	460b      	mov	r3, r1
   b81e8:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b81ea:	e9d0 0100 	ldrd	r0, r1, [r0]
   b81ee:	466c      	mov	r4, sp
   b81f0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b81f4:	e893 0003 	ldmia.w	r3, {r0, r1}
   b81f8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b81fc:	e894 0003 	ldmia.w	r4, {r0, r1}
   b8200:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b8204:	b002      	add	sp, #8
   b8206:	bd10      	pop	{r4, pc}

000b8208 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b8208:	b538      	push	{r3, r4, r5, lr}
   b820a:	4605      	mov	r5, r0
   b820c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b820e:	f7ff ffe9 	bl	b81e4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8212:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8214:	68a2      	ldr	r2, [r4, #8]
   b8216:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8218:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b821a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b821c:	68e2      	ldr	r2, [r4, #12]
   b821e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8220:	60e3      	str	r3, [r4, #12]
      }
   b8222:	bd38      	pop	{r3, r4, r5, pc}

000b8224 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b8224:	b570      	push	{r4, r5, r6, lr}
   b8226:	4604      	mov	r4, r0
   b8228:	b08c      	sub	sp, #48	; 0x30
   b822a:	460e      	mov	r6, r1
   b822c:	9201      	str	r2, [sp, #4]
   b822e:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b8230:	f7ff fac8 	bl	b77c4 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b8234:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b8236:	9901      	ldr	r1, [sp, #4]
   b8238:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b823c:	f000 fd71 	bl	b8d22 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b8240:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b8244:	b1cd      	cbz	r5, b827a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b8246:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8248:	9502      	str	r5, [sp, #8]
   b824a:	a902      	add	r1, sp, #8
   b824c:	a804      	add	r0, sp, #16
   b824e:	9303      	str	r3, [sp, #12]
   b8250:	f7ff fcb4 	bl	b7bbc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b8254:	2300      	movs	r3, #0
	__x.swap(*this);
   b8256:	a908      	add	r1, sp, #32
   b8258:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b825a:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b825c:	f7ff ffd4 	bl	b8208 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b8260:	4631      	mov	r1, r6
   b8262:	a808      	add	r0, sp, #32
   b8264:	f7ff ffd0 	bl	b8208 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b8268:	a808      	add	r0, sp, #32
   b826a:	f7ff f935 	bl	b74d8 <_ZNSt14_Function_baseD1Ev>
   b826e:	a804      	add	r0, sp, #16
   b8270:	f7ff f932 	bl	b74d8 <_ZNSt14_Function_baseD1Ev>
    }
   b8274:	4620      	mov	r0, r4
   b8276:	b00c      	add	sp, #48	; 0x30
   b8278:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b827a:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b827c:	e7ea      	b.n	b8254 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b8280 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b8280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8284:	b087      	sub	sp, #28
   b8286:	461d      	mov	r5, r3
   b8288:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b828c:	4680      	mov	r8, r0
   b828e:	468b      	mov	fp, r1
   b8290:	4692      	mov	sl, r2
   b8292:	9912      	ldr	r1, [sp, #72]	; 0x48
   b8294:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8296:	2200      	movs	r2, #0
   b8298:	2068      	movs	r0, #104	; 0x68
   b829a:	9102      	str	r1, [sp, #8]
   b829c:	9204      	str	r2, [sp, #16]
   b829e:	f7fb fefa 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b82a2:	1e06      	subs	r6, r0, #0
   b82a4:	f106 090c 	add.w	r9, r6, #12
   b82a8:	d018      	beq.n	b82dc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b82aa:	2201      	movs	r2, #1
	: _M_impl(__a)
   b82ac:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b82ae:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b82b2:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b82b4:	4a15      	ldr	r2, [pc, #84]	; (b830c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b82b6:	f847 2b20 	str.w	r2, [r7], #32
   b82ba:	9b03      	ldr	r3, [sp, #12]
   b82bc:	9100      	str	r1, [sp, #0]
   b82be:	465a      	mov	r2, fp
   b82c0:	4651      	mov	r1, sl
   b82c2:	4648      	mov	r0, r9
   b82c4:	f7ff ffae 	bl	b8224 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b82c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b82ca:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b82cc:	682b      	ldr	r3, [r5, #0]
   b82ce:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b82d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b82d2:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b82d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b82d8:	6823      	ldr	r3, [r4, #0]
   b82da:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b82dc:	a904      	add	r1, sp, #16
   b82de:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b82e0:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b82e4:	f7ff fd1a 	bl	b7d1c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b82e8:	a805      	add	r0, sp, #20
   b82ea:	f7ff fca8 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b82ee:	f8d8 3000 	ldr.w	r3, [r8]
   b82f2:	b93b      	cbnz	r3, b8304 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b82f4:	4a06      	ldr	r2, [pc, #24]	; (b8310 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b82f6:	4907      	ldr	r1, [pc, #28]	; (b8314 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b82f8:	200a      	movs	r0, #10
}
   b82fa:	b007      	add	sp, #28
   b82fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b8300:	f7fe bf5c 	b.w	b71bc <panic_>
}
   b8304:	b007      	add	sp, #28
   b8306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b830a:	bf00      	nop
   b830c:	000bd188 	.word	0x000bd188
   b8310:	000b6f4d 	.word	0x000b6f4d
   b8314:	000bd034 	.word	0x000bd034

000b8318 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8318:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b831a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b831c:	4604      	mov	r4, r0
   b831e:	460d      	mov	r5, r1
   b8320:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8322:	d914      	bls.n	b834e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8324:	4290      	cmp	r0, r2
   b8326:	d213      	bcs.n	b8350 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8328:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b832c:	1a75      	subs	r5, r6, r1
   b832e:	f1a1 0708 	sub.w	r7, r1, #8
   b8332:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8334:	42b7      	cmp	r7, r6
   b8336:	d018      	beq.n	b836a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8338:	b11c      	cbz	r4, b8342 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b833a:	4631      	mov	r1, r6
   b833c:	4620      	mov	r0, r4
   b833e:	f7ff fc6a 	bl	b7c16 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8342:	1d30      	adds	r0, r6, #4
   b8344:	f7ff fc7b 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8348:	3e08      	subs	r6, #8
   b834a:	3c08      	subs	r4, #8
   b834c:	e7f2      	b.n	b8334 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b834e:	d00c      	beq.n	b836a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8350:	42b5      	cmp	r5, r6
   b8352:	d00a      	beq.n	b836a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8354:	b11c      	cbz	r4, b835e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8356:	4629      	mov	r1, r5
   b8358:	4620      	mov	r0, r4
   b835a:	f7ff fc5c 	bl	b7c16 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b835e:	1d28      	adds	r0, r5, #4
   b8360:	f7ff fc6d 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8364:	3508      	adds	r5, #8
   b8366:	3408      	adds	r4, #8
   b8368:	e7f2      	b.n	b8350 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b836a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b836c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b836c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b836e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8370:	4605      	mov	r5, r0
        if (n > 0) {
   b8372:	dd11      	ble.n	b8398 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8374:	00f0      	lsls	r0, r6, #3
   b8376:	f7fe ffbd 	bl	b72f4 <malloc>
            if (!d) {
   b837a:	4604      	mov	r4, r0
   b837c:	b158      	cbz	r0, b8396 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b837e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8382:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8386:	f7ff ffc7 	bl	b8318 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b838a:	6828      	ldr	r0, [r5, #0]
   b838c:	f7fe ffba 	bl	b7304 <free>
        data_ = d;
   b8390:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8392:	60ae      	str	r6, [r5, #8]
        return true;
   b8394:	2001      	movs	r0, #1
    }
   b8396:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8398:	2400      	movs	r4, #0
   b839a:	e7f6      	b.n	b838a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b839c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b839c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b839e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b83a0:	6845      	ldr	r5, [r0, #4]
   b83a2:	4668      	mov	r0, sp
   b83a4:	f7ff fc37 	bl	b7c16 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b83a8:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b83ac:	4299      	cmp	r1, r3
   b83ae:	da10      	bge.n	b83d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b83b0:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b83b2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b83b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b83b8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b83bc:	4629      	mov	r1, r5
   b83be:	f105 0008 	add.w	r0, r5, #8
   b83c2:	f7ff ffa9 	bl	b8318 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b83c6:	b98d      	cbnz	r5, b83ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b83c8:	6863      	ldr	r3, [r4, #4]
   b83ca:	3301      	adds	r3, #1
   b83cc:	6063      	str	r3, [r4, #4]
    return true;
   b83ce:	2601      	movs	r6, #1
   b83d0:	e006      	b.n	b83e0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b83d2:	3101      	adds	r1, #1
   b83d4:	4620      	mov	r0, r4
   b83d6:	f7ff ffc9 	bl	b836c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b83da:	4606      	mov	r6, r0
   b83dc:	2800      	cmp	r0, #0
   b83de:	d1e7      	bne.n	b83b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b83e0:	a801      	add	r0, sp, #4
   b83e2:	f7ff fc2c 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b83e6:	4630      	mov	r0, r6
   b83e8:	b002      	add	sp, #8
   b83ea:	bd70      	pop	{r4, r5, r6, pc}
   b83ec:	4669      	mov	r1, sp
   b83ee:	4628      	mov	r0, r5
   b83f0:	f7ff fc11 	bl	b7c16 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b83f4:	e7e8      	b.n	b83c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b83f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b83f6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b83f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b83fa:	4604      	mov	r4, r0
   b83fc:	460d      	mov	r5, r1
   b83fe:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8400:	d914      	bls.n	b842c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8402:	4290      	cmp	r0, r2
   b8404:	d213      	bcs.n	b842e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8406:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b840a:	1a75      	subs	r5, r6, r1
   b840c:	f1a1 0708 	sub.w	r7, r1, #8
   b8410:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8412:	42b7      	cmp	r7, r6
   b8414:	d018      	beq.n	b8448 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8416:	b11c      	cbz	r4, b8420 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b8418:	4631      	mov	r1, r6
   b841a:	4620      	mov	r0, r4
   b841c:	f7ff fbed 	bl	b7bfa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8420:	1d30      	adds	r0, r6, #4
   b8422:	f7ff fc0c 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8426:	3e08      	subs	r6, #8
   b8428:	3c08      	subs	r4, #8
   b842a:	e7f2      	b.n	b8412 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b842c:	d00c      	beq.n	b8448 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b842e:	42b5      	cmp	r5, r6
   b8430:	d00a      	beq.n	b8448 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8432:	b11c      	cbz	r4, b843c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8434:	4629      	mov	r1, r5
   b8436:	4620      	mov	r0, r4
   b8438:	f7ff fbdf 	bl	b7bfa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b843c:	1d28      	adds	r0, r5, #4
   b843e:	f7ff fbfe 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8442:	3508      	adds	r5, #8
   b8444:	3408      	adds	r4, #8
   b8446:	e7f2      	b.n	b842e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b844a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b844a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b844c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b844e:	4605      	mov	r5, r0
        if (n > 0) {
   b8450:	dd11      	ble.n	b8476 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8452:	00f0      	lsls	r0, r6, #3
   b8454:	f7fe ff4e 	bl	b72f4 <malloc>
            if (!d) {
   b8458:	4604      	mov	r4, r0
   b845a:	b158      	cbz	r0, b8474 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b845c:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8460:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8464:	f7ff ffc7 	bl	b83f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8468:	6828      	ldr	r0, [r5, #0]
   b846a:	f7fe ff4b 	bl	b7304 <free>
        data_ = d;
   b846e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8470:	60ae      	str	r6, [r5, #8]
        return true;
   b8472:	2001      	movs	r0, #1
    }
   b8474:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8476:	2400      	movs	r4, #0
   b8478:	e7f6      	b.n	b8468 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b847a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b847a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b847c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b847e:	6845      	ldr	r5, [r0, #4]
   b8480:	4668      	mov	r0, sp
   b8482:	f7ff fbba 	bl	b7bfa <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8486:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b848a:	4299      	cmp	r1, r3
   b848c:	da10      	bge.n	b84b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b848e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8490:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8492:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8496:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b849a:	4629      	mov	r1, r5
   b849c:	f105 0008 	add.w	r0, r5, #8
   b84a0:	f7ff ffa9 	bl	b83f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b84a4:	b98d      	cbnz	r5, b84ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b84a6:	6863      	ldr	r3, [r4, #4]
   b84a8:	3301      	adds	r3, #1
   b84aa:	6063      	str	r3, [r4, #4]
    return true;
   b84ac:	2601      	movs	r6, #1
   b84ae:	e006      	b.n	b84be <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b84b0:	3101      	adds	r1, #1
   b84b2:	4620      	mov	r0, r4
   b84b4:	f7ff ffc9 	bl	b844a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b84b8:	4606      	mov	r6, r0
   b84ba:	2800      	cmp	r0, #0
   b84bc:	d1e7      	bne.n	b848e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b84be:	a801      	add	r0, sp, #4
   b84c0:	f7ff fbbd 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b84c4:	4630      	mov	r0, r6
   b84c6:	b002      	add	sp, #8
   b84c8:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b84ca:	4669      	mov	r1, sp
   b84cc:	4628      	mov	r0, r5
   b84ce:	f7ff fb94 	bl	b7bfa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b84d2:	e7e8      	b.n	b84a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b84d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b84d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b84d8:	4617      	mov	r7, r2
   b84da:	b0a1      	sub	sp, #132	; 0x84
   b84dc:	4680      	mov	r8, r0
    WiringBleLock lk;
   b84de:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b84e0:	460e      	mov	r6, r1
    WiringBleLock lk;
   b84e2:	f7ff f837 	bl	b7554 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b84e6:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b84e8:	7923      	ldrb	r3, [r4, #4]
   b84ea:	b953      	cbnz	r3, b8502 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b84ec:	4639      	mov	r1, r7
   b84ee:	4640      	mov	r0, r8
   b84f0:	f7ff fb83 	bl	b7bfa <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b84f4:	a80a      	add	r0, sp, #40	; 0x28
   b84f6:	f7ff f83b 	bl	b7570 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b84fa:	4640      	mov	r0, r8
   b84fc:	b021      	add	sp, #132	; 0x84
   b84fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8502:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b8504:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b8508:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b850c:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b850e:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b8512:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b8516:	9b03      	ldr	r3, [sp, #12]
   b8518:	429d      	cmp	r5, r3
   b851a:	d021      	beq.n	b8560 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b851c:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b8520:	4658      	mov	r0, fp
   b8522:	f109 0114 	add.w	r1, r9, #20
   b8526:	f7ff f8c2 	bl	b76ae <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b852a:	b1b8      	cbz	r0, b855c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b852c:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b8530:	4650      	mov	r0, sl
   b8532:	f7ff f8bc 	bl	b76ae <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b8536:	b188      	cbz	r0, b855c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b8538:	6823      	ldr	r3, [r4, #0]
   b853a:	f8d9 2000 	ldr.w	r2, [r9]
   b853e:	4053      	eors	r3, r2
   b8540:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b8544:	d10a      	bne.n	b855c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b8546:	2220      	movs	r2, #32
   b8548:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b854c:	4a5e      	ldr	r2, [pc, #376]	; (b86c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b854e:	9200      	str	r2, [sp, #0]
   b8550:	aa15      	add	r2, sp, #84	; 0x54
   b8552:	495e      	ldr	r1, [pc, #376]	; (b86cc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b8554:	2032      	movs	r0, #50	; 0x32
   b8556:	f7fe fe39 	bl	b71cc <log_message>
   b855a:	e7c7      	b.n	b84ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b855c:	3508      	adds	r5, #8
   b855e:	e7da      	b.n	b8516 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b8560:	4650      	mov	r0, sl
   b8562:	f7ff f875 	bl	b7650 <_ZNK8particle7BleUuid7isValidEv>
   b8566:	b960      	cbnz	r0, b8582 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b8568:	4959      	ldr	r1, [pc, #356]	; (b86d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b856a:	2201      	movs	r2, #1
   b856c:	a815      	add	r0, sp, #84	; 0x54
   b856e:	ad15      	add	r5, sp, #84	; 0x54
   b8570:	f7ff f846 	bl	b7600 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b8574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8576:	46d4      	mov	ip, sl
   b8578:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b857c:	682b      	ldr	r3, [r5, #0]
   b857e:	f8cc 3000 	str.w	r3, [ip]
   b8582:	6833      	ldr	r3, [r6, #0]
   b8584:	e9d3 5300 	ldrd	r5, r3, [r3]
   b8588:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b858c:	455d      	cmp	r5, fp
   b858e:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b8590:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b8592:	d06e      	beq.n	b8672 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b8594:	f855 0b08 	ldr.w	r0, [r5], #8
   b8598:	f7ff f889 	bl	b76ae <_ZNK8particle7BleUuideqERKS0_>
   b859c:	2800      	cmp	r0, #0
   b859e:	d0f5      	beq.n	b858c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b85a0:	f104 0a14 	add.w	sl, r4, #20
   b85a4:	4650      	mov	r0, sl
   b85a6:	f7ff f853 	bl	b7650 <_ZNK8particle7BleUuid7isValidEv>
   b85aa:	b988      	cbnz	r0, b85d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b85ac:	4b49      	ldr	r3, [pc, #292]	; (b86d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b85ae:	4948      	ldr	r1, [pc, #288]	; (b86d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b85b0:	881a      	ldrh	r2, [r3, #0]
   b85b2:	3201      	adds	r2, #1
   b85b4:	b292      	uxth	r2, r2
   b85b6:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b85b8:	a815      	add	r0, sp, #84	; 0x54
   b85ba:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b85bc:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b85be:	f7ff f83e 	bl	b763e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b85c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b85c4:	46d4      	mov	ip, sl
   b85c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b85ca:	682b      	ldr	r3, [r5, #0]
   b85cc:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b85d0:	4b41      	ldr	r3, [pc, #260]	; (b86d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b85d2:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b85d4:	2228      	movs	r2, #40	; 0x28
   b85d6:	2100      	movs	r1, #0
   b85d8:	a816      	add	r0, sp, #88	; 0x58
   b85da:	f002 fa98 	bl	bab0e <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b85de:	4651      	mov	r1, sl
   b85e0:	a804      	add	r0, sp, #16
   b85e2:	f7ff f847 	bl	b7674 <_ZN8particle7BleUuid7halUUIDEv>
   b85e6:	ab04      	add	r3, sp, #16
   b85e8:	aa18      	add	r2, sp, #96	; 0x60
   b85ea:	f10d 0c20 	add.w	ip, sp, #32
   b85ee:	6818      	ldr	r0, [r3, #0]
   b85f0:	6859      	ldr	r1, [r3, #4]
   b85f2:	4615      	mov	r5, r2
   b85f4:	c503      	stmia	r5!, {r0, r1}
   b85f6:	3308      	adds	r3, #8
   b85f8:	4563      	cmp	r3, ip
   b85fa:	462a      	mov	r2, r5
   b85fc:	d1f7      	bne.n	b85ee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b85fe:	6818      	ldr	r0, [r3, #0]
   b8600:	6028      	str	r0, [r5, #0]
    return value_;
   b8602:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b8604:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b8608:	f8d9 3000 	ldr.w	r3, [r9]
   b860c:	8a9b      	ldrh	r3, [r3, #20]
   b860e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b8612:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8614:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b8616:	4b31      	ldr	r3, [pc, #196]	; (b86dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8618:	2200      	movs	r2, #0
   b861a:	1da1      	adds	r1, r4, #6
   b861c:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b861e:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8622:	f7fe fc4b 	bl	b6ebc <hal_ble_gatt_server_add_characteristic>
   b8626:	2800      	cmp	r0, #0
   b8628:	f47f af60 	bne.w	b84ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b862c:	2301      	movs	r3, #1
   b862e:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b8630:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b8632:	4639      	mov	r1, r7
        return characteristics_;
   b8634:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b8636:	a80d      	add	r0, sp, #52	; 0x34
   b8638:	f7ff fadf 	bl	b7bfa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b863c:	4620      	mov	r0, r4
   b863e:	a90d      	add	r1, sp, #52	; 0x34
   b8640:	f7ff ff1b 	bl	b847a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b8644:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8646:	a80e      	add	r0, sp, #56	; 0x38
   b8648:	f7ff faf9 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b864c:	2c00      	cmp	r4, #0
   b864e:	f47f af4d 	bne.w	b84ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b8652:	2320      	movs	r3, #32
   b8654:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b8658:	4b21      	ldr	r3, [pc, #132]	; (b86e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b865a:	9300      	str	r3, [sp, #0]
   b865c:	aa0d      	add	r2, sp, #52	; 0x34
   b865e:	4623      	mov	r3, r4
   b8660:	e777      	b.n	b8552 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b8662:	4639      	mov	r1, r7
   b8664:	4640      	mov	r0, r8
   b8666:	f7ff fac8 	bl	b7bfa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b866a:	a80c      	add	r0, sp, #48	; 0x30
   b866c:	f7ff fae7 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8670:	e740      	b.n	b84f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b8672:	a80b      	add	r0, sp, #44	; 0x2c
   b8674:	f7ff f94a 	bl	b790c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b8678:	4651      	mov	r1, sl
   b867a:	a815      	add	r0, sp, #84	; 0x54
   b867c:	f7fe fffa 	bl	b7674 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b8680:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8682:	2300      	movs	r3, #0
   b8684:	3214      	adds	r2, #20
   b8686:	a915      	add	r1, sp, #84	; 0x54
   b8688:	2001      	movs	r0, #1
   b868a:	f7fe fbef 	bl	b6e6c <hal_ble_gatt_server_add_service>
   b868e:	2800      	cmp	r0, #0
   b8690:	d1e7      	bne.n	b8662 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b8692:	6835      	ldr	r5, [r6, #0]
   b8694:	a90b      	add	r1, sp, #44	; 0x2c
   b8696:	a80d      	add	r0, sp, #52	; 0x34
   b8698:	f7ff fabd 	bl	b7c16 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b869c:	4628      	mov	r0, r5
   b869e:	a90d      	add	r1, sp, #52	; 0x34
   b86a0:	f7ff fe7c 	bl	b839c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b86a4:	4605      	mov	r5, r0
   b86a6:	a80e      	add	r0, sp, #56	; 0x38
   b86a8:	f7ff fac9 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b86ac:	2d00      	cmp	r5, #0
   b86ae:	d0d8      	beq.n	b8662 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b86b0:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b86b2:	6853      	ldr	r3, [r2, #4]
   b86b4:	6812      	ldr	r2, [r2, #0]
   b86b6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b86ba:	3b01      	subs	r3, #1
   b86bc:	a80c      	add	r0, sp, #48	; 0x30
   b86be:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b86c2:	f7ff fabc 	bl	b7c3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b86c6:	e76b      	b.n	b85a0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b86c8:	000bd12e 	.word	0x000bd12e
   b86cc:	000bd04b 	.word	0x000bd04b
   b86d0:	000bd1f2 	.word	0x000bd1f2
   b86d4:	2003e6bc 	.word	0x2003e6bc
   b86d8:	002c0003 	.word	0x002c0003
   b86dc:	000b7aa5 	.word	0x000b7aa5
   b86e0:	000bd159 	.word	0x000bd159

000b86e4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b86e4:	4802      	ldr	r0, [pc, #8]	; (b86f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b86e6:	2300      	movs	r3, #0
   b86e8:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b86ea:	f7fe bc0f 	b.w	b6f0c <os_mutex_recursive_create>
   b86ee:	bf00      	nop
   b86f0:	2003e6c0 	.word	0x2003e6c0

000b86f4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b86f4:	2200      	movs	r2, #0
   b86f6:	6840      	ldr	r0, [r0, #4]
   b86f8:	4611      	mov	r1, r2
   b86fa:	f7fe bdd3 	b.w	b72a4 <network_listening>

000b86fe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b86fe:	2200      	movs	r2, #0
   b8700:	6840      	ldr	r0, [r0, #4]
   b8702:	4611      	mov	r1, r2
   b8704:	f7fe bdde 	b.w	b72c4 <network_get_listen_timeout>

000b8708 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8708:	6840      	ldr	r0, [r0, #4]
   b870a:	2200      	movs	r2, #0
   b870c:	f7fe bdd2 	b.w	b72b4 <network_set_listen_timeout>

000b8710 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8710:	6840      	ldr	r0, [r0, #4]
   b8712:	2200      	movs	r2, #0
   b8714:	f081 0101 	eor.w	r1, r1, #1
   b8718:	f7fe bdbc 	b.w	b7294 <network_listen>

000b871c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b871c:	2300      	movs	r3, #0
   b871e:	6840      	ldr	r0, [r0, #4]
   b8720:	461a      	mov	r2, r3
   b8722:	4619      	mov	r1, r3
   b8724:	f7fe bdae 	b.w	b7284 <network_off>

000b8728 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8728:	2300      	movs	r3, #0
   b872a:	6840      	ldr	r0, [r0, #4]
   b872c:	461a      	mov	r2, r3
   b872e:	4619      	mov	r1, r3
   b8730:	f7fe bda0 	b.w	b7274 <network_on>

000b8734 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8734:	2200      	movs	r2, #0
   b8736:	6840      	ldr	r0, [r0, #4]
   b8738:	4611      	mov	r1, r2
   b873a:	f7fe bd93 	b.w	b7264 <network_ready>

000b873e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b873e:	2200      	movs	r2, #0
   b8740:	6840      	ldr	r0, [r0, #4]
   b8742:	4611      	mov	r1, r2
   b8744:	f7fe bd7e 	b.w	b7244 <network_connecting>

000b8748 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8748:	6840      	ldr	r0, [r0, #4]
   b874a:	2200      	movs	r2, #0
   b874c:	2102      	movs	r1, #2
   b874e:	f7fe bd81 	b.w	b7254 <network_disconnect>

000b8752 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8752:	2300      	movs	r3, #0
   b8754:	6840      	ldr	r0, [r0, #4]
   b8756:	461a      	mov	r2, r3
   b8758:	f7fe bd6c 	b.w	b7234 <network_connect>

000b875c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b875c:	4b02      	ldr	r3, [pc, #8]	; (b8768 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b875e:	2203      	movs	r2, #3
   b8760:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b8762:	4a02      	ldr	r2, [pc, #8]	; (b876c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8764:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8766:	4770      	bx	lr
   b8768:	2003e6c8 	.word	0x2003e6c8
   b876c:	000bd21c 	.word	0x000bd21c

000b8770 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8770:	4770      	bx	lr

000b8772 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8774:	4606      	mov	r6, r0
   b8776:	4615      	mov	r5, r2
   b8778:	460c      	mov	r4, r1
   b877a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b877c:	42bc      	cmp	r4, r7
   b877e:	d006      	beq.n	b878e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8780:	6833      	ldr	r3, [r6, #0]
   b8782:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8786:	689b      	ldr	r3, [r3, #8]
   b8788:	4630      	mov	r0, r6
   b878a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b878c:	e7f6      	b.n	b877c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b878e:	4628      	mov	r0, r5
   b8790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8792 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8792:	7c00      	ldrb	r0, [r0, #16]
   b8794:	2200      	movs	r2, #0
   b8796:	f7fe bc09 	b.w	b6fac <hal_i2c_write>

000b879a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b879a:	7c00      	ldrb	r0, [r0, #16]
   b879c:	2100      	movs	r1, #0
   b879e:	f7fe bc0d 	b.w	b6fbc <hal_i2c_available>

000b87a2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b87a2:	7c00      	ldrb	r0, [r0, #16]
   b87a4:	2100      	movs	r1, #0
   b87a6:	f7fe bc11 	b.w	b6fcc <hal_i2c_read>

000b87aa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b87aa:	7c00      	ldrb	r0, [r0, #16]
   b87ac:	2100      	movs	r1, #0
   b87ae:	f7fe bc15 	b.w	b6fdc <hal_i2c_peek>

000b87b2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b87b2:	7c00      	ldrb	r0, [r0, #16]
   b87b4:	2100      	movs	r1, #0
   b87b6:	f7fe bc19 	b.w	b6fec <hal_i2c_flush>

000b87ba <_ZN7TwoWireD0Ev>:
   b87ba:	b510      	push	{r4, lr}
   b87bc:	2114      	movs	r1, #20
   b87be:	4604      	mov	r4, r0
   b87c0:	f7fb fc6f 	bl	b40a2 <_ZdlPvj>
   b87c4:	4620      	mov	r0, r4
   b87c6:	bd10      	pop	{r4, pc}

000b87c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b87c8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b87ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b87ce:	4604      	mov	r4, r0
   b87d0:	4608      	mov	r0, r1
   b87d2:	2100      	movs	r1, #0
   b87d4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b87d8:	4b03      	ldr	r3, [pc, #12]	; (b87e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b87da:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b87dc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b87de:	4611      	mov	r1, r2
   b87e0:	f7fe fc0c 	bl	b6ffc <hal_i2c_init>
}
   b87e4:	4620      	mov	r0, r4
   b87e6:	bd10      	pop	{r4, pc}
   b87e8:	000bd258 	.word	0x000bd258

000b87ec <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b87ec:	2300      	movs	r3, #0
   b87ee:	7c00      	ldrb	r0, [r0, #16]
   b87f0:	461a      	mov	r2, r3
   b87f2:	4619      	mov	r1, r3
   b87f4:	f7fe bbc2 	b.w	b6f7c <hal_i2c_begin>

000b87f8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b87f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b87fa:	2200      	movs	r2, #0
   b87fc:	2314      	movs	r3, #20
   b87fe:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b8802:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b8806:	780b      	ldrb	r3, [r1, #0]
   b8808:	f88d 3008 	strb.w	r3, [sp, #8]
   b880c:	684b      	ldr	r3, [r1, #4]
   b880e:	9303      	str	r3, [sp, #12]
   b8810:	68cb      	ldr	r3, [r1, #12]
   b8812:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b8814:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b8816:	7a0b      	ldrb	r3, [r1, #8]
   b8818:	9305      	str	r3, [sp, #20]
   b881a:	a901      	add	r1, sp, #4
   b881c:	f7fe fbf6 	bl	b700c <hal_i2c_request_ex>
}
   b8820:	b007      	add	sp, #28
   b8822:	f85d fb04 	ldr.w	pc, [sp], #4

000b8826 <_ZN7TwoWire11requestFromEhjh>:
{
   b8826:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b8828:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b882a:	f88d 1000 	strb.w	r1, [sp]
   b882e:	f04f 0164 	mov.w	r1, #100	; 0x64
   b8832:	9103      	str	r1, [sp, #12]
   b8834:	bf18      	it	ne
   b8836:	2301      	movne	r3, #1
   b8838:	4669      	mov	r1, sp
    size_ = size;
   b883a:	9201      	str	r2, [sp, #4]
   b883c:	f88d 3008 	strb.w	r3, [sp, #8]
   b8840:	f7ff ffda 	bl	b87f8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b8844:	b005      	add	sp, #20
   b8846:	f85d fb04 	ldr.w	pc, [sp], #4

000b884a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b884a:	2301      	movs	r3, #1
   b884c:	f7ff bfeb 	b.w	b8826 <_ZN7TwoWire11requestFromEhjh>

000b8850 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b8850:	7c00      	ldrb	r0, [r0, #16]
   b8852:	2200      	movs	r2, #0
   b8854:	f7fe bb9a 	b.w	b6f8c <hal_i2c_begin_transmission>

000b8858 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8858:	b2c9      	uxtb	r1, r1
   b885a:	f7ff bff9 	b.w	b8850 <_ZN7TwoWire17beginTransmissionEh>

000b885e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b885e:	7c00      	ldrb	r0, [r0, #16]
   b8860:	2200      	movs	r2, #0
   b8862:	f7fe bb9b 	b.w	b6f9c <hal_i2c_end_transmission>

000b8866 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b8866:	2101      	movs	r1, #1
   b8868:	f7ff bff9 	b.w	b885e <_ZN7TwoWire15endTransmissionEh>

000b886c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b886c:	4770      	bx	lr

000b886e <_ZN9IPAddressD0Ev>:
   b886e:	b510      	push	{r4, lr}
   b8870:	2118      	movs	r1, #24
   b8872:	4604      	mov	r4, r0
   b8874:	f7fb fc15 	bl	b40a2 <_ZdlPvj>
   b8878:	4620      	mov	r0, r4
   b887a:	bd10      	pop	{r4, pc}

000b887c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b887c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b887e:	7d03      	ldrb	r3, [r0, #20]
   b8880:	2b06      	cmp	r3, #6
{
   b8882:	b08d      	sub	sp, #52	; 0x34
   b8884:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8886:	f100 0704 	add.w	r7, r0, #4
   b888a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b888e:	d012      	beq.n	b88b6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b8890:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8894:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8898:	220a      	movs	r2, #10
   b889a:	4630      	mov	r0, r6
   b889c:	f000 f973 	bl	b8b86 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b88a0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b88a2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b88a4:	d019      	beq.n	b88da <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b88a6:	2c00      	cmp	r4, #0
   b88a8:	d0f4      	beq.n	b8894 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b88aa:	212e      	movs	r1, #46	; 0x2e
   b88ac:	4630      	mov	r0, r6
   b88ae:	f000 f951 	bl	b8b54 <_ZN5Print5printEc>
   b88b2:	4404      	add	r4, r0
   b88b4:	e7ee      	b.n	b8894 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b88b6:	232f      	movs	r3, #47	; 0x2f
   b88b8:	466a      	mov	r2, sp
   b88ba:	4639      	mov	r1, r7
   b88bc:	200a      	movs	r0, #10
		buf[0] = 0;
   b88be:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b88c2:	f7fe fbb3 	bl	b702c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b88c6:	4668      	mov	r0, sp
   b88c8:	f002 f96a 	bl	baba0 <strlen>
   b88cc:	6833      	ldr	r3, [r6, #0]
   b88ce:	4602      	mov	r2, r0
   b88d0:	68db      	ldr	r3, [r3, #12]
   b88d2:	4669      	mov	r1, sp
   b88d4:	4630      	mov	r0, r6
   b88d6:	4798      	blx	r3
   b88d8:	4604      	mov	r4, r0
    }
    return n;
}
   b88da:	4620      	mov	r0, r4
   b88dc:	b00d      	add	sp, #52	; 0x34
   b88de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b88e0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b88e0:	b510      	push	{r4, lr}
   b88e2:	4b05      	ldr	r3, [pc, #20]	; (b88f8 <_ZN9IPAddressC1Ev+0x18>)
   b88e4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b88e6:	2211      	movs	r2, #17
   b88e8:	f840 3b04 	str.w	r3, [r0], #4
   b88ec:	2100      	movs	r1, #0
   b88ee:	f002 f90e 	bl	bab0e <memset>
}
   b88f2:	4620      	mov	r0, r4
   b88f4:	bd10      	pop	{r4, pc}
   b88f6:	bf00      	nop
   b88f8:	000bd280 	.word	0x000bd280

000b88fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b88fc:	4603      	mov	r3, r0
   b88fe:	4a07      	ldr	r2, [pc, #28]	; (b891c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8900:	b510      	push	{r4, lr}
   b8902:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b8906:	f101 0210 	add.w	r2, r1, #16
   b890a:	f851 4b04 	ldr.w	r4, [r1], #4
   b890e:	f843 4b04 	str.w	r4, [r3], #4
   b8912:	4291      	cmp	r1, r2
   b8914:	d1f9      	bne.n	b890a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b8916:	780a      	ldrb	r2, [r1, #0]
   b8918:	701a      	strb	r2, [r3, #0]
}
   b891a:	bd10      	pop	{r4, pc}
   b891c:	000bd280 	.word	0x000bd280

000b8920 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b8920:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b8922:	2b04      	cmp	r3, #4
   b8924:	d104      	bne.n	b8930 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b8926:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8928:	3800      	subs	r0, #0
   b892a:	bf18      	it	ne
   b892c:	2001      	movne	r0, #1
   b892e:	4770      	bx	lr
    } else if (version() == 6) {
   b8930:	2b06      	cmp	r3, #6
   b8932:	d107      	bne.n	b8944 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8934:	6843      	ldr	r3, [r0, #4]
   b8936:	b93b      	cbnz	r3, b8948 <_ZNK9IPAddresscvbEv+0x28>
   b8938:	6883      	ldr	r3, [r0, #8]
   b893a:	b92b      	cbnz	r3, b8948 <_ZNK9IPAddresscvbEv+0x28>
   b893c:	68c3      	ldr	r3, [r0, #12]
   b893e:	b91b      	cbnz	r3, b8948 <_ZNK9IPAddresscvbEv+0x28>
   b8940:	6900      	ldr	r0, [r0, #16]
   b8942:	e7f1      	b.n	b8928 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b8944:	2000      	movs	r0, #0
   b8946:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8948:	2001      	movs	r0, #1
}
   b894a:	4770      	bx	lr

000b894c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b894c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b894e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b8952:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8956:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b895a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b895e:	2304      	movs	r3, #4
   b8960:	6041      	str	r1, [r0, #4]
   b8962:	7503      	strb	r3, [r0, #20]
}
   b8964:	bd10      	pop	{r4, pc}
	...

000b8968 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8968:	b507      	push	{r0, r1, r2, lr}
   b896a:	4b06      	ldr	r3, [pc, #24]	; (b8984 <_ZN9IPAddressC1EPKh+0x1c>)
   b896c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b896e:	78cb      	ldrb	r3, [r1, #3]
   b8970:	9300      	str	r3, [sp, #0]
   b8972:	788b      	ldrb	r3, [r1, #2]
   b8974:	784a      	ldrb	r2, [r1, #1]
   b8976:	7809      	ldrb	r1, [r1, #0]
   b8978:	f7ff ffe8 	bl	b894c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b897c:	b003      	add	sp, #12
   b897e:	f85d fb04 	ldr.w	pc, [sp], #4
   b8982:	bf00      	nop
   b8984:	000bd280 	.word	0x000bd280

000b8988 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8988:	4b01      	ldr	r3, [pc, #4]	; (b8990 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b898a:	4a02      	ldr	r2, [pc, #8]	; (b8994 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b898c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b898e:	4770      	bx	lr
   b8990:	2003e6d0 	.word	0x2003e6d0
   b8994:	000bd28c 	.word	0x000bd28c

000b8998 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8998:	2300      	movs	r3, #0
   b899a:	6840      	ldr	r0, [r0, #4]
   b899c:	461a      	mov	r2, r3
   b899e:	f7fe bc49 	b.w	b7234 <network_connect>

000b89a2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b89a2:	6840      	ldr	r0, [r0, #4]
   b89a4:	2200      	movs	r2, #0
   b89a6:	2102      	movs	r1, #2
   b89a8:	f7fe bc54 	b.w	b7254 <network_disconnect>

000b89ac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b89ac:	2200      	movs	r2, #0
   b89ae:	6840      	ldr	r0, [r0, #4]
   b89b0:	4611      	mov	r1, r2
   b89b2:	f7fe bc47 	b.w	b7244 <network_connecting>

000b89b6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b89b6:	2200      	movs	r2, #0
   b89b8:	6840      	ldr	r0, [r0, #4]
   b89ba:	4611      	mov	r1, r2
   b89bc:	f7fe bc52 	b.w	b7264 <network_ready>

000b89c0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b89c0:	2300      	movs	r3, #0
   b89c2:	6840      	ldr	r0, [r0, #4]
   b89c4:	461a      	mov	r2, r3
   b89c6:	4619      	mov	r1, r3
   b89c8:	f7fe bc54 	b.w	b7274 <network_on>

000b89cc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b89cc:	2300      	movs	r3, #0
   b89ce:	6840      	ldr	r0, [r0, #4]
   b89d0:	461a      	mov	r2, r3
   b89d2:	4619      	mov	r1, r3
   b89d4:	f7fe bc56 	b.w	b7284 <network_off>

000b89d8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b89d8:	6840      	ldr	r0, [r0, #4]
   b89da:	2100      	movs	r1, #0
   b89dc:	f7fe bc7a 	b.w	b72d4 <network_is_on>

000b89e0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b89e0:	6840      	ldr	r0, [r0, #4]
   b89e2:	2100      	movs	r1, #0
   b89e4:	f7fe bc7e 	b.w	b72e4 <network_is_off>

000b89e8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b89e8:	6840      	ldr	r0, [r0, #4]
   b89ea:	2200      	movs	r2, #0
   b89ec:	f081 0101 	eor.w	r1, r1, #1
   b89f0:	f7fe bc50 	b.w	b7294 <network_listen>

000b89f4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b89f4:	6840      	ldr	r0, [r0, #4]
   b89f6:	2200      	movs	r2, #0
   b89f8:	f7fe bc5c 	b.w	b72b4 <network_set_listen_timeout>

000b89fc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b89fc:	2200      	movs	r2, #0
   b89fe:	6840      	ldr	r0, [r0, #4]
   b8a00:	4611      	mov	r1, r2
   b8a02:	f7fe bc5f 	b.w	b72c4 <network_get_listen_timeout>

000b8a06 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8a06:	2200      	movs	r2, #0
   b8a08:	6840      	ldr	r0, [r0, #4]
   b8a0a:	4611      	mov	r1, r2
   b8a0c:	f7fe bc4a 	b.w	b72a4 <network_listening>

000b8a10 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b8a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8a14:	b095      	sub	sp, #84	; 0x54
   b8a16:	4614      	mov	r4, r2
   b8a18:	460d      	mov	r5, r1
   b8a1a:	4607      	mov	r7, r0
    IPAddress addr;
   b8a1c:	f7ff ff60 	bl	b88e0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b8a20:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b8a22:	221c      	movs	r2, #28
   b8a24:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8a26:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8a28:	f002 f871 	bl	bab0e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8a2c:	2340      	movs	r3, #64	; 0x40
   b8a2e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b8a30:	4620      	mov	r0, r4
   b8a32:	466b      	mov	r3, sp
   b8a34:	aa0c      	add	r2, sp, #48	; 0x30
   b8a36:	2100      	movs	r1, #0
   b8a38:	f7fe fb18 	bl	b706c <netdb_getaddrinfo>
    if (!r) {
   b8a3c:	4604      	mov	r4, r0
   b8a3e:	2800      	cmp	r0, #0
   b8a40:	d14b      	bne.n	b8ada <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8a42:	4602      	mov	r2, r0
   b8a44:	2101      	movs	r1, #1
   b8a46:	6868      	ldr	r0, [r5, #4]
   b8a48:	f7fe fc0c 	bl	b7264 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8a4c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8a4e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8a50:	4622      	mov	r2, r4
   b8a52:	6868      	ldr	r0, [r5, #4]
   b8a54:	f7fe fc06 	bl	b7264 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8a58:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8a5a:	4681      	mov	r9, r0
        bool ok = false;
   b8a5c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8a5e:	2e00      	cmp	r6, #0
   b8a60:	d03b      	beq.n	b8ada <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b8a62:	2900      	cmp	r1, #0
   b8a64:	d139      	bne.n	b8ada <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8a66:	6873      	ldr	r3, [r6, #4]
   b8a68:	2b02      	cmp	r3, #2
   b8a6a:	d003      	beq.n	b8a74 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8a6c:	2b0a      	cmp	r3, #10
   b8a6e:	d011      	beq.n	b8a94 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8a70:	69f6      	ldr	r6, [r6, #28]
   b8a72:	e7f4      	b.n	b8a5e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8a74:	f1b8 0f00 	cmp.w	r8, #0
   b8a78:	d0fa      	beq.n	b8a70 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b8a7a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8a7c:	a806      	add	r0, sp, #24
   b8a7e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b8a80:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b8a82:	f7ff ff71 	bl	b8968 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8a86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8a88:	1d3c      	adds	r4, r7, #4
   b8a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8a8c:	682b      	ldr	r3, [r5, #0]
   b8a8e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8a90:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b8a92:	e7ed      	b.n	b8a70 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8a94:	f1b9 0f00 	cmp.w	r9, #0
   b8a98:	d0ea      	beq.n	b8a70 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b8a9a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8a9c:	2210      	movs	r2, #16
   b8a9e:	a801      	add	r0, sp, #4
   b8aa0:	f002 f835 	bl	bab0e <memset>
                    a.v = 6;
   b8aa4:	2306      	movs	r3, #6
   b8aa6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8aaa:	ad01      	add	r5, sp, #4
   b8aac:	f104 0308 	add.w	r3, r4, #8
   b8ab0:	3418      	adds	r4, #24
   b8ab2:	6818      	ldr	r0, [r3, #0]
   b8ab4:	6859      	ldr	r1, [r3, #4]
   b8ab6:	462a      	mov	r2, r5
   b8ab8:	c203      	stmia	r2!, {r0, r1}
   b8aba:	3308      	adds	r3, #8
   b8abc:	42a3      	cmp	r3, r4
   b8abe:	4615      	mov	r5, r2
   b8ac0:	d1f7      	bne.n	b8ab2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b8ac2:	a901      	add	r1, sp, #4
   b8ac4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8ac6:	ad07      	add	r5, sp, #28
   b8ac8:	f7ff ff18 	bl	b88fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8ace:	1d3c      	adds	r4, r7, #4
   b8ad0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8ad2:	682b      	ldr	r3, [r5, #0]
   b8ad4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8ad6:	4649      	mov	r1, r9
   b8ad8:	e7ca      	b.n	b8a70 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b8ada:	9800      	ldr	r0, [sp, #0]
   b8adc:	f7fe fabe 	bl	b705c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8ae0:	4638      	mov	r0, r7
   b8ae2:	b015      	add	sp, #84	; 0x54
   b8ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8ae8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8ae8:	4b02      	ldr	r3, [pc, #8]	; (b8af4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b8aea:	4a03      	ldr	r2, [pc, #12]	; (b8af8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8aec:	601a      	str	r2, [r3, #0]
   b8aee:	2200      	movs	r2, #0
   b8af0:	605a      	str	r2, [r3, #4]

} // spark
   b8af2:	4770      	bx	lr
   b8af4:	2003e6d4 	.word	0x2003e6d4
   b8af8:	000bd298 	.word	0x000bd298

000b8afc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8afe:	4606      	mov	r6, r0
   b8b00:	460d      	mov	r5, r1
  size_t n = 0;
   b8b02:	188f      	adds	r7, r1, r2
   b8b04:	2400      	movs	r4, #0
  while (size--) {
   b8b06:	42bd      	cmp	r5, r7
   b8b08:	d00c      	beq.n	b8b24 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8b0a:	6833      	ldr	r3, [r6, #0]
   b8b0c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8b10:	689b      	ldr	r3, [r3, #8]
   b8b12:	4630      	mov	r0, r6
   b8b14:	4798      	blx	r3
     if (chunk>=0)
   b8b16:	1e03      	subs	r3, r0, #0
   b8b18:	db01      	blt.n	b8b1e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8b1a:	441c      	add	r4, r3
  while (size--) {
   b8b1c:	e7f3      	b.n	b8b06 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b8b1e:	2c00      	cmp	r4, #0
   b8b20:	bf08      	it	eq
   b8b22:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8b24:	4620      	mov	r0, r4
   b8b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8b28 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b8b28:	b513      	push	{r0, r1, r4, lr}
   b8b2a:	4604      	mov	r4, r0
    }
   b8b2c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b8b2e:	b159      	cbz	r1, b8b48 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8b30:	9101      	str	r1, [sp, #4]
   b8b32:	f002 f835 	bl	baba0 <strlen>
   b8b36:	6823      	ldr	r3, [r4, #0]
   b8b38:	9901      	ldr	r1, [sp, #4]
   b8b3a:	68db      	ldr	r3, [r3, #12]
   b8b3c:	4602      	mov	r2, r0
   b8b3e:	4620      	mov	r0, r4
    }
   b8b40:	b002      	add	sp, #8
   b8b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8b46:	4718      	bx	r3
    }
   b8b48:	b002      	add	sp, #8
   b8b4a:	bd10      	pop	{r4, pc}

000b8b4c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b8b4c:	b508      	push	{r3, lr}
  return write(str);
   b8b4e:	f7ff ffeb 	bl	b8b28 <_ZN5Print5writeEPKc>
}
   b8b52:	bd08      	pop	{r3, pc}

000b8b54 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b8b54:	6803      	ldr	r3, [r0, #0]
   b8b56:	689b      	ldr	r3, [r3, #8]
   b8b58:	4718      	bx	r3

000b8b5a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8b5a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8b5c:	210d      	movs	r1, #13
{
   b8b5e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8b60:	f7ff fff8 	bl	b8b54 <_ZN5Print5printEc>
  n += print('\n');
   b8b64:	210a      	movs	r1, #10
  size_t n = print('\r');
   b8b66:	4604      	mov	r4, r0
  n += print('\n');
   b8b68:	4628      	mov	r0, r5
   b8b6a:	f7ff fff3 	bl	b8b54 <_ZN5Print5printEc>
  return n;
}
   b8b6e:	4420      	add	r0, r4
   b8b70:	bd38      	pop	{r3, r4, r5, pc}

000b8b72 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b8b72:	b538      	push	{r3, r4, r5, lr}
   b8b74:	4605      	mov	r5, r0
  return write(str);
   b8b76:	f7ff ffd7 	bl	b8b28 <_ZN5Print5writeEPKc>
   b8b7a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8b7c:	4628      	mov	r0, r5
   b8b7e:	f7ff ffec 	bl	b8b5a <_ZN5Print7printlnEv>
  return n;
}
   b8b82:	4420      	add	r0, r4
   b8b84:	bd38      	pop	{r3, r4, r5, pc}

000b8b86 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b8b86:	b530      	push	{r4, r5, lr}
   b8b88:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b8b8a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8b8c:	2a01      	cmp	r2, #1
  *str = '\0';
   b8b8e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b8b92:	bf98      	it	ls
   b8b94:	220a      	movls	r2, #10
   b8b96:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8b98:	460d      	mov	r5, r1
   b8b9a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b8b9e:	fb01 5312 	mls	r3, r1, r2, r5
   b8ba2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8ba6:	2b09      	cmp	r3, #9
   b8ba8:	bf94      	ite	ls
   b8baa:	3330      	addls	r3, #48	; 0x30
   b8bac:	3337      	addhi	r3, #55	; 0x37
   b8bae:	b2db      	uxtb	r3, r3
  } while(n);
   b8bb0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8bb2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b8bb6:	d9ef      	bls.n	b8b98 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8bb8:	4621      	mov	r1, r4
   b8bba:	f7ff ffb5 	bl	b8b28 <_ZN5Print5writeEPKc>
}
   b8bbe:	b00b      	add	sp, #44	; 0x2c
   b8bc0:	bd30      	pop	{r4, r5, pc}

000b8bc2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b8bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8bc6:	b086      	sub	sp, #24
   b8bc8:	af00      	add	r7, sp, #0
   b8bca:	4605      	mov	r5, r0
   b8bcc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b8bce:	1d38      	adds	r0, r7, #4
   b8bd0:	2114      	movs	r1, #20
{
   b8bd2:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8bd4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b8bd6:	f7fe fbad 	bl	b7334 <vsnprintf>

    if (n<bufsize)
   b8bda:	2813      	cmp	r0, #19
   b8bdc:	d80e      	bhi.n	b8bfc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b8bde:	1d39      	adds	r1, r7, #4
   b8be0:	4628      	mov	r0, r5
   b8be2:	f7ff ffa1 	bl	b8b28 <_ZN5Print5writeEPKc>
   b8be6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8be8:	b11e      	cbz	r6, b8bf2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b8bea:	4628      	mov	r0, r5
   b8bec:	f7ff ffb5 	bl	b8b5a <_ZN5Print7printlnEv>
   b8bf0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8bf2:	4620      	mov	r0, r4
   b8bf4:	3718      	adds	r7, #24
   b8bf6:	46bd      	mov	sp, r7
   b8bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b8bfc:	f100 0308 	add.w	r3, r0, #8
   b8c00:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8c04:	46e8      	mov	r8, sp
        char bigger[n+1];
   b8c06:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b8c0a:	4622      	mov	r2, r4
   b8c0c:	1c41      	adds	r1, r0, #1
   b8c0e:	683b      	ldr	r3, [r7, #0]
   b8c10:	4668      	mov	r0, sp
   b8c12:	f7fe fb8f 	bl	b7334 <vsnprintf>
  return write(str);
   b8c16:	4669      	mov	r1, sp
   b8c18:	4628      	mov	r0, r5
   b8c1a:	f7ff ff85 	bl	b8b28 <_ZN5Print5writeEPKc>
   b8c1e:	4604      	mov	r4, r0
   b8c20:	46c5      	mov	sp, r8
   b8c22:	e7e1      	b.n	b8be8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8c24 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b8c24:	4b01      	ldr	r3, [pc, #4]	; (b8c2c <_GLOBAL__sub_I_RGB+0x8>)
   b8c26:	2200      	movs	r2, #0
   b8c28:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b8c2a:	4770      	bx	lr
   b8c2c:	2003e6dc 	.word	0x2003e6dc

000b8c30 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8c30:	b510      	push	{r4, lr}
   b8c32:	4604      	mov	r4, r0
{
	free(buffer);
   b8c34:	6800      	ldr	r0, [r0, #0]
   b8c36:	f7fe fb65 	bl	b7304 <free>
}
   b8c3a:	4620      	mov	r0, r4
   b8c3c:	bd10      	pop	{r4, pc}

000b8c3e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b8c3e:	b510      	push	{r4, lr}
   b8c40:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8c42:	6800      	ldr	r0, [r0, #0]
   b8c44:	b108      	cbz	r0, b8c4a <_ZN6String10invalidateEv+0xc>
   b8c46:	f7fe fb5d 	bl	b7304 <free>
	buffer = NULL;
   b8c4a:	2300      	movs	r3, #0
	capacity = len = 0;
   b8c4c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8c50:	6023      	str	r3, [r4, #0]
}
   b8c52:	bd10      	pop	{r4, pc}

000b8c54 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8c54:	b538      	push	{r3, r4, r5, lr}
   b8c56:	4604      	mov	r4, r0
   b8c58:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b8c5a:	6800      	ldr	r0, [r0, #0]
   b8c5c:	3101      	adds	r1, #1
   b8c5e:	f7fe fb59 	bl	b7314 <realloc>
	if (newbuffer) {
   b8c62:	b110      	cbz	r0, b8c6a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8c64:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8c68:	2001      	movs	r0, #1
	}
	return 0;
}
   b8c6a:	bd38      	pop	{r3, r4, r5, pc}

000b8c6c <_ZN6String7reserveEj>:
{
   b8c6c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8c6e:	6803      	ldr	r3, [r0, #0]
{
   b8c70:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8c72:	b123      	cbz	r3, b8c7e <_ZN6String7reserveEj+0x12>
   b8c74:	6843      	ldr	r3, [r0, #4]
   b8c76:	428b      	cmp	r3, r1
   b8c78:	d301      	bcc.n	b8c7e <_ZN6String7reserveEj+0x12>
   b8c7a:	2001      	movs	r0, #1
}
   b8c7c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8c7e:	4620      	mov	r0, r4
   b8c80:	f7ff ffe8 	bl	b8c54 <_ZN6String12changeBufferEj>
   b8c84:	2800      	cmp	r0, #0
   b8c86:	d0f9      	beq.n	b8c7c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8c88:	68a3      	ldr	r3, [r4, #8]
   b8c8a:	2b00      	cmp	r3, #0
   b8c8c:	d1f5      	bne.n	b8c7a <_ZN6String7reserveEj+0xe>
   b8c8e:	6822      	ldr	r2, [r4, #0]
   b8c90:	7013      	strb	r3, [r2, #0]
   b8c92:	e7f2      	b.n	b8c7a <_ZN6String7reserveEj+0xe>

000b8c94 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8c96:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8c98:	4611      	mov	r1, r2
   b8c9a:	9201      	str	r2, [sp, #4]
{
   b8c9c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8c9e:	f7ff ffe5 	bl	b8c6c <_ZN6String7reserveEj>
   b8ca2:	9a01      	ldr	r2, [sp, #4]
   b8ca4:	b928      	cbnz	r0, b8cb2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8ca6:	4620      	mov	r0, r4
   b8ca8:	f7ff ffc9 	bl	b8c3e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8cac:	4620      	mov	r0, r4
   b8cae:	b003      	add	sp, #12
   b8cb0:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8cb2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8cb4:	4629      	mov	r1, r5
   b8cb6:	6820      	ldr	r0, [r4, #0]
   b8cb8:	f001 ff01 	bl	baabe <memcpy>
	buffer[len] = 0;
   b8cbc:	6822      	ldr	r2, [r4, #0]
   b8cbe:	68a3      	ldr	r3, [r4, #8]
   b8cc0:	2100      	movs	r1, #0
   b8cc2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8cc4:	e7f2      	b.n	b8cac <_ZN6String4copyEPKcj+0x18>

000b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8cc6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8cc8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8cca:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8cce:	4604      	mov	r4, r0
	len = 0;
   b8cd0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8cd2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8cd4:	b141      	cbz	r1, b8ce8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8cd6:	4608      	mov	r0, r1
   b8cd8:	9101      	str	r1, [sp, #4]
   b8cda:	f001 ff61 	bl	baba0 <strlen>
   b8cde:	9901      	ldr	r1, [sp, #4]
   b8ce0:	4602      	mov	r2, r0
   b8ce2:	4620      	mov	r0, r4
   b8ce4:	f7ff ffd6 	bl	b8c94 <_ZN6String4copyEPKcj>
}
   b8ce8:	4620      	mov	r0, r4
   b8cea:	b002      	add	sp, #8
   b8cec:	bd10      	pop	{r4, pc}

000b8cee <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b8cee:	4288      	cmp	r0, r1
{
   b8cf0:	b510      	push	{r4, lr}
   b8cf2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8cf4:	d005      	beq.n	b8d02 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b8cf6:	680b      	ldr	r3, [r1, #0]
   b8cf8:	b12b      	cbz	r3, b8d06 <_ZN6StringaSERKS_+0x18>
   b8cfa:	688a      	ldr	r2, [r1, #8]
   b8cfc:	4619      	mov	r1, r3
   b8cfe:	f7ff ffc9 	bl	b8c94 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8d02:	4620      	mov	r0, r4
   b8d04:	bd10      	pop	{r4, pc}
	else invalidate();
   b8d06:	f7ff ff9a 	bl	b8c3e <_ZN6String10invalidateEv>
   b8d0a:	e7fa      	b.n	b8d02 <_ZN6StringaSERKS_+0x14>

000b8d0c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8d0c:	b510      	push	{r4, lr}
	buffer = NULL;
   b8d0e:	2300      	movs	r3, #0
String::String(const String &value)
   b8d10:	4604      	mov	r4, r0
	capacity = 0;
   b8d12:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b8d16:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8d18:	7303      	strb	r3, [r0, #12]
	*this = value;
   b8d1a:	f7ff ffe8 	bl	b8cee <_ZN6StringaSERKS_>
}
   b8d1e:	4620      	mov	r0, r4
   b8d20:	bd10      	pop	{r4, pc}

000b8d22 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8d22:	b513      	push	{r0, r1, r4, lr}
   b8d24:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b8d26:	b159      	cbz	r1, b8d40 <_ZN6StringaSEPKc+0x1e>
   b8d28:	4608      	mov	r0, r1
   b8d2a:	9101      	str	r1, [sp, #4]
   b8d2c:	f001 ff38 	bl	baba0 <strlen>
   b8d30:	9901      	ldr	r1, [sp, #4]
   b8d32:	4602      	mov	r2, r0
   b8d34:	4620      	mov	r0, r4
   b8d36:	f7ff ffad 	bl	b8c94 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8d3a:	4620      	mov	r0, r4
   b8d3c:	b002      	add	sp, #8
   b8d3e:	bd10      	pop	{r4, pc}
	else invalidate();
   b8d40:	f7ff ff7d 	bl	b8c3e <_ZN6String10invalidateEv>
   b8d44:	e7f9      	b.n	b8d3a <_ZN6StringaSEPKc+0x18>

000b8d46 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b8d46:	b510      	push	{r4, lr}
   b8d48:	4604      	mov	r4, r0
   b8d4a:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b8d4c:	2300      	movs	r3, #0
	capacity = 0;
   b8d4e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b8d52:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b8d54:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b8d56:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b8d58:	a901      	add	r1, sp, #4
   b8d5a:	f000 fcf7 	bl	b974c <itoa>
	*this = buf;
   b8d5e:	a901      	add	r1, sp, #4
   b8d60:	4620      	mov	r0, r4
   b8d62:	f7ff ffde 	bl	b8d22 <_ZN6StringaSEPKc>
}
   b8d66:	4620      	mov	r0, r4
   b8d68:	b00a      	add	sp, #40	; 0x28
   b8d6a:	bd10      	pop	{r4, pc}

000b8d6c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b8d6c:	b570      	push	{r4, r5, r6, lr}
   b8d6e:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b8d70:	460e      	mov	r6, r1
   b8d72:	b909      	cbnz	r1, b8d78 <_ZN6String6concatEPKcj+0xc>
   b8d74:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b8d76:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b8d78:	b16a      	cbz	r2, b8d96 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b8d7a:	6884      	ldr	r4, [r0, #8]
   b8d7c:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b8d7e:	4621      	mov	r1, r4
   b8d80:	f7ff ff74 	bl	b8c6c <_ZN6String7reserveEj>
   b8d84:	2800      	cmp	r0, #0
   b8d86:	d0f5      	beq.n	b8d74 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8d88:	6828      	ldr	r0, [r5, #0]
   b8d8a:	68ab      	ldr	r3, [r5, #8]
   b8d8c:	4631      	mov	r1, r6
   b8d8e:	4418      	add	r0, r3
   b8d90:	f001 fefe 	bl	bab90 <strcpy>
	len = newlen;
   b8d94:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b8d96:	2001      	movs	r0, #1
   b8d98:	e7ed      	b.n	b8d76 <_ZN6String6concatEPKcj+0xa>

000b8d9a <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b8d9a:	688a      	ldr	r2, [r1, #8]
   b8d9c:	6809      	ldr	r1, [r1, #0]
   b8d9e:	f7ff bfe5 	b.w	b8d6c <_ZN6String6concatEPKcj>

000b8da2 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b8da2:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b8da4:	2300      	movs	r3, #0
	buf[0] = c;
   b8da6:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b8daa:	2201      	movs	r2, #1
   b8dac:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b8dae:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b8db2:	f7ff ffdb 	bl	b8d6c <_ZN6String6concatEPKcj>
}
   b8db6:	b003      	add	sp, #12
   b8db8:	f85d fb04 	ldr.w	pc, [sp], #4

000b8dbc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b8dbc:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b8dbe:	688a      	ldr	r2, [r1, #8]
   b8dc0:	6809      	ldr	r1, [r1, #0]
{
   b8dc2:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b8dc4:	f7ff ffd2 	bl	b8d6c <_ZN6String6concatEPKcj>
   b8dc8:	b910      	cbnz	r0, b8dd0 <_ZplRK15StringSumHelperRK6String+0x14>
   b8dca:	4620      	mov	r0, r4
   b8dcc:	f7ff ff37 	bl	b8c3e <_ZN6String10invalidateEv>
	return a;
}
   b8dd0:	4620      	mov	r0, r4
   b8dd2:	bd10      	pop	{r4, pc}

000b8dd4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b8dd4:	b513      	push	{r0, r1, r4, lr}
   b8dd6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8dd8:	b929      	cbnz	r1, b8de6 <_ZplRK15StringSumHelperPKc+0x12>
   b8dda:	4620      	mov	r0, r4
   b8ddc:	f7ff ff2f 	bl	b8c3e <_ZN6String10invalidateEv>
	return a;
}
   b8de0:	4620      	mov	r0, r4
   b8de2:	b002      	add	sp, #8
   b8de4:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8de6:	4608      	mov	r0, r1
   b8de8:	9101      	str	r1, [sp, #4]
   b8dea:	f001 fed9 	bl	baba0 <strlen>
   b8dee:	9901      	ldr	r1, [sp, #4]
   b8df0:	4602      	mov	r2, r0
   b8df2:	4620      	mov	r0, r4
   b8df4:	f7ff ffba 	bl	b8d6c <_ZN6String6concatEPKcj>
   b8df8:	2800      	cmp	r0, #0
   b8dfa:	d0ee      	beq.n	b8dda <_ZplRK15StringSumHelperPKc+0x6>
   b8dfc:	e7f0      	b.n	b8de0 <_ZplRK15StringSumHelperPKc+0xc>

000b8dfe <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b8dfe:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8e00:	6882      	ldr	r2, [r0, #8]
   b8e02:	b93a      	cbnz	r2, b8e14 <_ZNK6String6equalsEPKc+0x16>
   b8e04:	b121      	cbz	r1, b8e10 <_ZNK6String6equalsEPKc+0x12>
   b8e06:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b8e08:	fab0 f080 	clz	r0, r0
   b8e0c:	0940      	lsrs	r0, r0, #5
   b8e0e:	e000      	b.n	b8e12 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8e10:	2001      	movs	r0, #1
}
   b8e12:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b8e14:	6800      	ldr	r0, [r0, #0]
   b8e16:	b909      	cbnz	r1, b8e1c <_ZNK6String6equalsEPKc+0x1e>
   b8e18:	7800      	ldrb	r0, [r0, #0]
   b8e1a:	e7f5      	b.n	b8e08 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b8e1c:	f001 feae 	bl	bab7c <strcmp>
   b8e20:	e7f2      	b.n	b8e08 <_ZNK6String6equalsEPKc+0xa>

000b8e22 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b8e22:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b8e24:	6883      	ldr	r3, [r0, #8]
   b8e26:	4293      	cmp	r3, r2
   b8e28:	d907      	bls.n	b8e3a <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b8e2a:	6804      	ldr	r4, [r0, #0]
   b8e2c:	6809      	ldr	r1, [r1, #0]
   b8e2e:	18a0      	adds	r0, r4, r2
   b8e30:	f001 fede 	bl	babf0 <strstr>
	if (found == NULL) return -1;
   b8e34:	b108      	cbz	r0, b8e3a <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b8e36:	1b00      	subs	r0, r0, r4
}
   b8e38:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b8e3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8e3e:	e7fb      	b.n	b8e38 <_ZNK6String7indexOfERKS_j+0x16>

000b8e40 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b8e40:	2200      	movs	r2, #0
   b8e42:	f7ff bfee 	b.w	b8e22 <_ZNK6String7indexOfERKS_j>
	...

000b8e48 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b8e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b8e4a:	429a      	cmp	r2, r3
{
   b8e4c:	460f      	mov	r7, r1
   b8e4e:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b8e50:	490c      	ldr	r1, [pc, #48]	; (b8e84 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b8e52:	bf88      	it	hi
   b8e54:	4613      	movhi	r3, r2
{
   b8e56:	4614      	mov	r4, r2
   b8e58:	4606      	mov	r6, r0
	if (left > right) {
   b8e5a:	bf84      	itt	hi
   b8e5c:	462c      	movhi	r4, r5
   b8e5e:	461d      	movhi	r5, r3
	String out;
   b8e60:	f7ff ff31 	bl	b8cc6 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b8e64:	68bb      	ldr	r3, [r7, #8]
   b8e66:	42a3      	cmp	r3, r4
   b8e68:	d30a      	bcc.n	b8e80 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b8e6a:	6839      	ldr	r1, [r7, #0]
   b8e6c:	42ab      	cmp	r3, r5
   b8e6e:	bf94      	ite	ls
   b8e70:	ebc4 0203 	rsbls	r2, r4, r3
   b8e74:	ebc4 0205 	rsbhi	r2, r4, r5
   b8e78:	4421      	add	r1, r4
   b8e7a:	4630      	mov	r0, r6
   b8e7c:	f7ff ff0a 	bl	b8c94 <_ZN6String4copyEPKcj>
	return out;
}
   b8e80:	4630      	mov	r0, r6
   b8e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8e84:	000bcffe 	.word	0x000bcffe

000b8e88 <_ZNK6String9substringEj>:
{
   b8e88:	b510      	push	{r4, lr}
   b8e8a:	4604      	mov	r4, r0
	return substring(left, len);
   b8e8c:	688b      	ldr	r3, [r1, #8]
   b8e8e:	f7ff ffdb 	bl	b8e48 <_ZNK6String9substringEjj>
}
   b8e92:	4620      	mov	r0, r4
   b8e94:	bd10      	pop	{r4, pc}

000b8e96 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b8e96:	6800      	ldr	r0, [r0, #0]
   b8e98:	b108      	cbz	r0, b8e9e <_ZNK6String5toIntEv+0x8>
   b8e9a:	f001 bdfc 	b.w	baa96 <atol>
	return 0;
}
   b8e9e:	4770      	bx	lr

000b8ea0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8ea0:	4b05      	ldr	r3, [pc, #20]	; (b8eb8 <_GLOBAL__sub_I_System+0x18>)
   b8ea2:	2202      	movs	r2, #2
   b8ea4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8ea6:	4b05      	ldr	r3, [pc, #20]	; (b8ebc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8ea8:	4a05      	ldr	r2, [pc, #20]	; (b8ec0 <_GLOBAL__sub_I_System+0x20>)
   b8eaa:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8eac:	2000      	movs	r0, #0
   b8eae:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8eb2:	f7fe b993 	b.w	b71dc <set_system_mode>
   b8eb6:	bf00      	nop
   b8eb8:	2003e6f8 	.word	0x2003e6f8
   b8ebc:	2003e6ec 	.word	0x2003e6ec
   b8ec0:	ffff0000 	.word	0xffff0000

000b8ec4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b8ec4:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8ec6:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b8ec8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8ecc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8ece:	2201      	movs	r2, #1
   b8ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8ed4:	f10d 0107 	add.w	r1, sp, #7
   b8ed8:	47a0      	blx	r4
}
   b8eda:	b002      	add	sp, #8
   b8edc:	bd10      	pop	{r4, pc}

000b8ede <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b8ede:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8ee0:	6803      	ldr	r3, [r0, #0]
   b8ee2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8ee8:	46a4      	mov	ip, r4
}
   b8eea:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8eee:	4760      	bx	ip

000b8ef0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8ef0:	b513      	push	{r0, r1, r4, lr}
   b8ef2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b8ef4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8ef6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b8efa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8efc:	f10d 0107 	add.w	r1, sp, #7
   b8f00:	2201      	movs	r2, #1
   b8f02:	47a0      	blx	r4
}
   b8f04:	b002      	add	sp, #8
   b8f06:	bd10      	pop	{r4, pc}

000b8f08 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b8f08:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b8f0a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8f0c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8f10:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8f14:	429a      	cmp	r2, r3
int TCPClient::read() {
   b8f16:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8f18:	d008      	beq.n	b8f2c <_ZN9TCPClient4readEv+0x24>
   b8f1a:	6963      	ldr	r3, [r4, #20]
   b8f1c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8f20:	1c51      	adds	r1, r2, #1
   b8f22:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b8f26:	4413      	add	r3, r2
   b8f28:	7918      	ldrb	r0, [r3, #4]
}
   b8f2a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8f2c:	6803      	ldr	r3, [r0, #0]
   b8f2e:	691b      	ldr	r3, [r3, #16]
   b8f30:	4798      	blx	r3
   b8f32:	2800      	cmp	r0, #0
   b8f34:	d1f1      	bne.n	b8f1a <_ZN9TCPClient4readEv+0x12>
   b8f36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8f3a:	e7f6      	b.n	b8f2a <_ZN9TCPClient4readEv+0x22>

000b8f3c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b8f3c:	4770      	bx	lr

000b8f3e <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b8f3e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b8f40:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b8f42:	43c0      	mvns	r0, r0
   b8f44:	0fc0      	lsrs	r0, r0, #31
   b8f46:	4770      	bx	lr

000b8f48 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8f48:	4770      	bx	lr
	...

000b8f4c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8f4c:	4b06      	ldr	r3, [pc, #24]	; (b8f68 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8f4e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8f50:	b510      	push	{r4, lr}
   b8f52:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8f56:	d005      	beq.n	b8f64 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8f58:	4608      	mov	r0, r1
   b8f5a:	f000 fd39 	bl	b99d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8f5e:	2800      	cmp	r0, #0
   b8f60:	bf08      	it	eq
   b8f62:	2400      	moveq	r4, #0
      }
   b8f64:	4620      	mov	r0, r4
   b8f66:	bd10      	pop	{r4, pc}
   b8f68:	000bd1d4 	.word	0x000bd1d4

000b8f6c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8f6c:	b510      	push	{r4, lr}
   b8f6e:	21ac      	movs	r1, #172	; 0xac
   b8f70:	4604      	mov	r4, r0
   b8f72:	f7fb f896 	bl	b40a2 <_ZdlPvj>
   b8f76:	4620      	mov	r0, r4
   b8f78:	bd10      	pop	{r4, pc}

000b8f7a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b8f7a:	21ac      	movs	r1, #172	; 0xac
   b8f7c:	f7fb b891 	b.w	b40a2 <_ZdlPvj>

000b8f80 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b8f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b8f84:	f04f 0800 	mov.w	r8, #0
   b8f88:	b086      	sub	sp, #24
   b8f8a:	461c      	mov	r4, r3
   b8f8c:	f8c0 8004 	str.w	r8, [r0, #4]
   b8f90:	4605      	mov	r5, r0
   b8f92:	460e      	mov	r6, r1
   b8f94:	4617      	mov	r7, r2
    struct timeval tv = {};
   b8f96:	4641      	mov	r1, r8
   b8f98:	2210      	movs	r2, #16
   b8f9a:	a802      	add	r0, sp, #8
   b8f9c:	f001 fdb7 	bl	bab0e <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b8fa0:	1c63      	adds	r3, r4, #1
   b8fa2:	d009      	beq.n	b8fb8 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b8fa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8fa8:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b8fac:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b8fb0:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b8fb4:	435c      	muls	r4, r3
   b8fb6:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b8fb8:	6968      	ldr	r0, [r5, #20]
   b8fba:	2310      	movs	r3, #16
   b8fbc:	9300      	str	r3, [sp, #0]
   b8fbe:	6800      	ldr	r0, [r0, #0]
   b8fc0:	ab02      	add	r3, sp, #8
   b8fc2:	f241 0205 	movw	r2, #4101	; 0x1005
   b8fc6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8fca:	f7fe f857 	bl	b707c <sock_setsockopt>
    if (ret < 0) {
   b8fce:	2800      	cmp	r0, #0
   b8fd0:	da07      	bge.n	b8fe2 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b8fd2:	f7fe f9c7 	bl	b7364 <__errno>
   b8fd6:	6803      	ldr	r3, [r0, #0]
   b8fd8:	606b      	str	r3, [r5, #4]
        return 0;
   b8fda:	2000      	movs	r0, #0
}
   b8fdc:	b006      	add	sp, #24
   b8fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b8fe2:	6968      	ldr	r0, [r5, #20]
   b8fe4:	2300      	movs	r3, #0
   b8fe6:	6800      	ldr	r0, [r0, #0]
   b8fe8:	463a      	mov	r2, r7
   b8fea:	4631      	mov	r1, r6
   b8fec:	f7fe f866 	bl	b70bc <sock_send>
    if (ret < 0) {
   b8ff0:	1e03      	subs	r3, r0, #0
   b8ff2:	dbee      	blt.n	b8fd2 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b8ff4:	4618      	mov	r0, r3
   b8ff6:	e7f1      	b.n	b8fdc <_ZN9TCPClient5writeEPKhjm+0x5c>

000b8ff8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b8ff8:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b8ffa:	6984      	ldr	r4, [r0, #24]
   b8ffc:	4b0a      	ldr	r3, [pc, #40]	; (b9028 <_ZN9TCPClientD1Ev+0x30>)
   b8ffe:	6003      	str	r3, [r0, #0]
   b9000:	4605      	mov	r5, r0
   b9002:	b17c      	cbz	r4, b9024 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b9004:	6863      	ldr	r3, [r4, #4]
   b9006:	3b01      	subs	r3, #1
   b9008:	6063      	str	r3, [r4, #4]
   b900a:	b95b      	cbnz	r3, b9024 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b900c:	6823      	ldr	r3, [r4, #0]
   b900e:	4620      	mov	r0, r4
   b9010:	689b      	ldr	r3, [r3, #8]
   b9012:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b9014:	68a3      	ldr	r3, [r4, #8]
   b9016:	3b01      	subs	r3, #1
   b9018:	60a3      	str	r3, [r4, #8]
   b901a:	b91b      	cbnz	r3, b9024 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b901c:	6823      	ldr	r3, [r4, #0]
   b901e:	4620      	mov	r0, r4
   b9020:	68db      	ldr	r3, [r3, #12]
   b9022:	4798      	blx	r3
   b9024:	4628      	mov	r0, r5
   b9026:	bd38      	pop	{r3, r4, r5, pc}
   b9028:	000bd308 	.word	0x000bd308

000b902c <_ZN9TCPClientD0Ev>:
   b902c:	b510      	push	{r4, lr}
   b902e:	4604      	mov	r4, r0
   b9030:	f7ff ffe2 	bl	b8ff8 <_ZN9TCPClientD1Ev>
   b9034:	4620      	mov	r0, r4
   b9036:	211c      	movs	r1, #28
   b9038:	f7fb f833 	bl	b40a2 <_ZdlPvj>
   b903c:	4620      	mov	r0, r4
   b903e:	bd10      	pop	{r4, pc}

000b9040 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b9040:	b530      	push	{r4, r5, lr}
   b9042:	b087      	sub	sp, #28
   b9044:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b9046:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b9048:	4668      	mov	r0, sp
   b904a:	f7ff fc8d 	bl	b8968 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b904e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9050:	3404      	adds	r4, #4
   b9052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9054:	682b      	ldr	r3, [r5, #0]
   b9056:	7023      	strb	r3, [r4, #0]
    }
   b9058:	b007      	add	sp, #28
   b905a:	bd30      	pop	{r4, r5, pc}

000b905c <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b905c:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b905e:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b9060:	4b05      	ldr	r3, [pc, #20]	; (b9078 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b9062:	4604      	mov	r4, r0
   b9064:	358c      	adds	r5, #140	; 0x8c
   b9066:	f844 3b04 	str.w	r3, [r4], #4
   b906a:	4606      	mov	r6, r0
   b906c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b906e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9070:	682b      	ldr	r3, [r5, #0]
   b9072:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b9074:	4630      	mov	r0, r6
   b9076:	bd70      	pop	{r4, r5, r6, pc}
   b9078:	000bd280 	.word	0x000bd280

000b907c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b907c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9080:	4698      	mov	r8, r3
    stop();
   b9082:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9084:	b093      	sub	sp, #76	; 0x4c
   b9086:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b9088:	2400      	movs	r4, #0
    stop();
   b908a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b908c:	4606      	mov	r6, r0
   b908e:	4617      	mov	r7, r2
    stop();
   b9090:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9092:	4628      	mov	r0, r5
   b9094:	466b      	mov	r3, sp
   b9096:	4622      	mov	r2, r4
   b9098:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b909a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b909c:	f7fd ffe6 	bl	b706c <netdb_getaddrinfo>
   b90a0:	4605      	mov	r5, r0
   b90a2:	2800      	cmp	r0, #0
   b90a4:	d163      	bne.n	b916e <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b90a6:	9b00      	ldr	r3, [sp, #0]
   b90a8:	2b00      	cmp	r3, #0
   b90aa:	d04b      	beq.n	b9144 <_ZN9TCPClient7connectEPKctm+0xc8>
   b90ac:	695b      	ldr	r3, [r3, #20]
   b90ae:	2b00      	cmp	r3, #0
   b90b0:	d048      	beq.n	b9144 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b90b2:	a806      	add	r0, sp, #24
   b90b4:	f7ff fc14 	bl	b88e0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b90b8:	9b00      	ldr	r3, [sp, #0]
   b90ba:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b90bc:	7863      	ldrb	r3, [r4, #1]
   b90be:	2b02      	cmp	r3, #2
   b90c0:	d104      	bne.n	b90cc <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b90c2:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b90c4:	a806      	add	r0, sp, #24
   b90c6:	f7ff ffbb 	bl	b9040 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b90ca:	e026      	b.n	b911a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b90cc:	2b0a      	cmp	r3, #10
   b90ce:	d124      	bne.n	b911a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b90d0:	2211      	movs	r2, #17
   b90d2:	4629      	mov	r1, r5
   b90d4:	a801      	add	r0, sp, #4
   b90d6:	f001 fd1a 	bl	bab0e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b90da:	68a3      	ldr	r3, [r4, #8]
   b90dc:	2b00      	cmp	r3, #0
   b90de:	d038      	beq.n	b9152 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b90e0:	f104 0308 	add.w	r3, r4, #8
   b90e4:	f10d 0c04 	add.w	ip, sp, #4
   b90e8:	3418      	adds	r4, #24
   b90ea:	6818      	ldr	r0, [r3, #0]
   b90ec:	6859      	ldr	r1, [r3, #4]
   b90ee:	4662      	mov	r2, ip
   b90f0:	c203      	stmia	r2!, {r0, r1}
   b90f2:	3308      	adds	r3, #8
   b90f4:	42a3      	cmp	r3, r4
   b90f6:	4694      	mov	ip, r2
   b90f8:	d1f7      	bne.n	b90ea <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b90fa:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b90fc:	a901      	add	r1, sp, #4
   b90fe:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b9100:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b9104:	f7ff fbfa 	bl	b88fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9108:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b910c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9110:	ac07      	add	r4, sp, #28
   b9112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9114:	f8dc 3000 	ldr.w	r3, [ip]
   b9118:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b911a:	a806      	add	r0, sp, #24
   b911c:	f7ff fc00 	bl	b8920 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b9120:	b180      	cbz	r0, b9144 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b9122:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b9124:	ad07      	add	r5, sp, #28
   b9126:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b912a:	4b12      	ldr	r3, [pc, #72]	; (b9174 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b912c:	930c      	str	r3, [sp, #48]	; 0x30
   b912e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9130:	ac0d      	add	r4, sp, #52	; 0x34
   b9132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9134:	682b      	ldr	r3, [r5, #0]
   b9136:	7023      	strb	r3, [r4, #0]
   b9138:	463a      	mov	r2, r7
   b913a:	4643      	mov	r3, r8
   b913c:	a90c      	add	r1, sp, #48	; 0x30
   b913e:	4630      	mov	r0, r6
   b9140:	47c8      	blx	r9
   b9142:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b9144:	9800      	ldr	r0, [sp, #0]
   b9146:	f7fd ff89 	bl	b705c <netdb_freeaddrinfo>
}
   b914a:	4628      	mov	r0, r5
   b914c:	b013      	add	sp, #76	; 0x4c
   b914e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9152:	68e3      	ldr	r3, [r4, #12]
   b9154:	2b00      	cmp	r3, #0
   b9156:	d1c3      	bne.n	b90e0 <_ZN9TCPClient7connectEPKctm+0x64>
   b9158:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b915c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b9160:	f7fd ff6c 	bl	b703c <inet_htonl>
   b9164:	4581      	cmp	r9, r0
   b9166:	d1bb      	bne.n	b90e0 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b9168:	f104 0114 	add.w	r1, r4, #20
   b916c:	e7aa      	b.n	b90c4 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b916e:	4625      	mov	r5, r4
   b9170:	e7e8      	b.n	b9144 <_ZN9TCPClient7connectEPKctm+0xc8>
   b9172:	bf00      	nop
   b9174:	000bd280 	.word	0x000bd280

000b9178 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b9178:	b538      	push	{r3, r4, r5, lr}
   b917a:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b917c:	681a      	ldr	r2, [r3, #0]
   b917e:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b9180:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b9182:	da10      	bge.n	b91a6 <_ZN9TCPClient9connectedEv+0x2e>
   b9184:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9188:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b918c:	429a      	cmp	r2, r3
   b918e:	d10a      	bne.n	b91a6 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b9190:	6803      	ldr	r3, [r0, #0]
   b9192:	691b      	ldr	r3, [r3, #16]
   b9194:	4798      	blx	r3
        if (!rv) {
   b9196:	4604      	mov	r4, r0
   b9198:	b928      	cbnz	r0, b91a6 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b919a:	682b      	ldr	r3, [r5, #0]
   b919c:	4628      	mov	r0, r5
   b919e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b91a0:	4798      	blx	r3
        rv = available();
   b91a2:	4620      	mov	r0, r4
}
   b91a4:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b91a6:	2001      	movs	r0, #1
   b91a8:	e7fc      	b.n	b91a4 <_ZN9TCPClient9connectedEv+0x2c>

000b91aa <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b91aa:	b510      	push	{r4, lr}
   b91ac:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b91ae:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b91b2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b91b6:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b91b8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b91ba:	d005      	beq.n	b91c8 <_ZN9TCPClient4peekEv+0x1e>
   b91bc:	6963      	ldr	r3, [r4, #20]
   b91be:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b91c2:	4413      	add	r3, r2
   b91c4:	7918      	ldrb	r0, [r3, #4]
}
   b91c6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b91c8:	6803      	ldr	r3, [r0, #0]
   b91ca:	691b      	ldr	r3, [r3, #16]
   b91cc:	4798      	blx	r3
   b91ce:	2800      	cmp	r0, #0
   b91d0:	d1f4      	bne.n	b91bc <_ZN9TCPClient4peekEv+0x12>
   b91d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b91d6:	e7f6      	b.n	b91c6 <_ZN9TCPClient4peekEv+0x1c>

000b91d8 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b91d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b91da:	6943      	ldr	r3, [r0, #20]
   b91dc:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b91de:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b91e2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b91e6:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b91e8:	4605      	mov	r5, r0
   b91ea:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b91ec:	d016      	beq.n	b921c <_ZN9TCPClient4readEPhj+0x44>
   b91ee:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b91f0:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b91f4:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b91f8:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b91fa:	42bc      	cmp	r4, r7
   b91fc:	bf28      	it	cs
   b91fe:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b9200:	3304      	adds	r3, #4
   b9202:	4622      	mov	r2, r4
   b9204:	4419      	add	r1, r3
   b9206:	4630      	mov	r0, r6
   b9208:	f001 fc59 	bl	baabe <memcpy>
   b920c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b920e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b9212:	4423      	add	r3, r4
   b9214:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b9218:	4620      	mov	r0, r4
   b921a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b921c:	6803      	ldr	r3, [r0, #0]
   b921e:	691b      	ldr	r3, [r3, #16]
   b9220:	4798      	blx	r3
   b9222:	2800      	cmp	r0, #0
   b9224:	d1e3      	bne.n	b91ee <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b9226:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b922a:	e7f5      	b.n	b9218 <_ZN9TCPClient4readEPhj+0x40>

000b922c <_ZN9TCPClient12flush_bufferEv>:
   b922c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b922e:	2300      	movs	r3, #0
   b9230:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9234:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b9236:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b923a:	4770      	bx	lr

000b923c <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b923c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9240:	461f      	mov	r7, r3
    stop();
   b9242:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9244:	460c      	mov	r4, r1
    stop();
   b9246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9248:	b08a      	sub	sp, #40	; 0x28
   b924a:	4605      	mov	r5, r0
   b924c:	4616      	mov	r6, r2
    stop();
   b924e:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b9250:	7d23      	ldrb	r3, [r4, #20]
   b9252:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b9256:	2b04      	cmp	r3, #4
   b9258:	bf0c      	ite	eq
   b925a:	2002      	moveq	r0, #2
   b925c:	200a      	movne	r0, #10
   b925e:	2206      	movs	r2, #6
   b9260:	2101      	movs	r1, #1
   b9262:	f7fd ff33 	bl	b70cc <sock_socket>
   b9266:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b926a:	696b      	ldr	r3, [r5, #20]
   b926c:	681b      	ldr	r3, [r3, #0]
   b926e:	2b00      	cmp	r3, #0
   b9270:	da08      	bge.n	b9284 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b9272:	682b      	ldr	r3, [r5, #0]
   b9274:	4628      	mov	r0, r5
   b9276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9278:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b927a:	4798      	blx	r3
}
   b927c:	4620      	mov	r0, r4
   b927e:	b00a      	add	sp, #40	; 0x28
   b9280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b9284:	4628      	mov	r0, r5
   b9286:	f7ff ffd1 	bl	b922c <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b928a:	b1b7      	cbz	r7, b92ba <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b928c:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b928e:	a903      	add	r1, sp, #12
   b9290:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b9292:	9303      	str	r3, [sp, #12]
   b9294:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9298:	f7fd fec0 	bl	b701c <if_index_to_name>
   b929c:	2800      	cmp	r0, #0
   b929e:	d1e8      	bne.n	b9272 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b92a0:	6968      	ldr	r0, [r5, #20]
   b92a2:	2306      	movs	r3, #6
   b92a4:	9300      	str	r3, [sp, #0]
   b92a6:	6800      	ldr	r0, [r0, #0]
   b92a8:	ab03      	add	r3, sp, #12
   b92aa:	f241 020b 	movw	r2, #4107	; 0x100b
   b92ae:	f640 71ff 	movw	r1, #4095	; 0xfff
   b92b2:	f7fd fee3 	bl	b707c <sock_setsockopt>
   b92b6:	2800      	cmp	r0, #0
   b92b8:	d1db      	bne.n	b9272 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b92ba:	221c      	movs	r2, #28
   b92bc:	2100      	movs	r1, #0
   b92be:	a803      	add	r0, sp, #12
   b92c0:	f001 fc25 	bl	bab0e <memset>
    if (ip.version() == 4) {
   b92c4:	7d23      	ldrb	r3, [r4, #20]
   b92c6:	2b04      	cmp	r3, #4
   b92c8:	d11d      	bne.n	b9306 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b92ca:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b92ce:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b92d0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b92d4:	f7fd feba 	bl	b704c <inet_htons>
   b92d8:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b92dc:	6860      	ldr	r0, [r4, #4]
   b92de:	f7fd fead 	bl	b703c <inet_htonl>
   b92e2:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b92e4:	696b      	ldr	r3, [r5, #20]
   b92e6:	221c      	movs	r2, #28
   b92e8:	6818      	ldr	r0, [r3, #0]
   b92ea:	a903      	add	r1, sp, #12
   b92ec:	f7fd fed6 	bl	b709c <sock_connect>
   b92f0:	2800      	cmp	r0, #0
   b92f2:	d1be      	bne.n	b9272 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b92f4:	3404      	adds	r4, #4
   b92f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b92f8:	696d      	ldr	r5, [r5, #20]
   b92fa:	358c      	adds	r5, #140	; 0x8c
   b92fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b92fe:	6823      	ldr	r3, [r4, #0]
   b9300:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b9302:	2401      	movs	r4, #1
   b9304:	e7ba      	b.n	b927c <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b9306:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b930a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b930c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b9310:	f7fd fe9c 	bl	b704c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9314:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b9316:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b931a:	1d23      	adds	r3, r4, #4
   b931c:	f104 0714 	add.w	r7, r4, #20
   b9320:	6818      	ldr	r0, [r3, #0]
   b9322:	6859      	ldr	r1, [r3, #4]
   b9324:	4632      	mov	r2, r6
   b9326:	c203      	stmia	r2!, {r0, r1}
   b9328:	3308      	adds	r3, #8
   b932a:	42bb      	cmp	r3, r7
   b932c:	4616      	mov	r6, r2
   b932e:	d1f7      	bne.n	b9320 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b9330:	e7d8      	b.n	b92e4 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b9334 <_ZN9TCPClient9availableEv>:
{
   b9334:	b530      	push	{r4, r5, lr}
   b9336:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b9338:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b933c:	b08b      	sub	sp, #44	; 0x2c
   b933e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b9340:	b12b      	cbz	r3, b934e <_ZN9TCPClient9availableEv+0x1a>
   b9342:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b9346:	429a      	cmp	r2, r3
   b9348:	d101      	bne.n	b934e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b934a:	f7ff ff6f 	bl	b922c <_ZN9TCPClient12flush_bufferEv>
   b934e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b9350:	6808      	ldr	r0, [r1, #0]
   b9352:	2800      	cmp	r0, #0
   b9354:	db18      	blt.n	b9388 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b9356:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b935a:	2d7f      	cmp	r5, #127	; 0x7f
   b935c:	d814      	bhi.n	b9388 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b935e:	3104      	adds	r1, #4
   b9360:	2308      	movs	r3, #8
   b9362:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b9366:	4429      	add	r1, r5
   b9368:	f7fd fea0 	bl	b70ac <sock_recv>
            if (ret > 0) {
   b936c:	2800      	cmp	r0, #0
   b936e:	dd13      	ble.n	b9398 <_ZN9TCPClient9availableEv+0x64>
   b9370:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b9372:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9376:	b90a      	cbnz	r2, b937c <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b9378:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b937c:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b937e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9382:	4410      	add	r0, r2
   b9384:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b9388:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b938a:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b938e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b9392:	1ac0      	subs	r0, r0, r3
   b9394:	b00b      	add	sp, #44	; 0x2c
   b9396:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b9398:	f7fd ffe4 	bl	b7364 <__errno>
   b939c:	6803      	ldr	r3, [r0, #0]
   b939e:	2b0b      	cmp	r3, #11
   b93a0:	d0f2      	beq.n	b9388 <_ZN9TCPClient9availableEv+0x54>
   b93a2:	f7fd ffdf 	bl	b7364 <__errno>
   b93a6:	6803      	ldr	r3, [r0, #0]
   b93a8:	2b0b      	cmp	r3, #11
   b93aa:	d0ed      	beq.n	b9388 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b93ac:	2320      	movs	r3, #32
   b93ae:	2500      	movs	r5, #0
   b93b0:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b93b4:	f7fd ffd6 	bl	b7364 <__errno>
   b93b8:	6803      	ldr	r3, [r0, #0]
   b93ba:	9301      	str	r3, [sp, #4]
   b93bc:	4b08      	ldr	r3, [pc, #32]	; (b93e0 <_ZN9TCPClient9availableEv+0xac>)
   b93be:	4909      	ldr	r1, [pc, #36]	; (b93e4 <_ZN9TCPClient9availableEv+0xb0>)
   b93c0:	9300      	str	r3, [sp, #0]
   b93c2:	aa02      	add	r2, sp, #8
   b93c4:	462b      	mov	r3, r5
   b93c6:	2032      	movs	r0, #50	; 0x32
   b93c8:	f7fd ff00 	bl	b71cc <log_message>
                    sock_close(d_->sock);
   b93cc:	6963      	ldr	r3, [r4, #20]
   b93ce:	6818      	ldr	r0, [r3, #0]
   b93d0:	f7fd fe5c 	bl	b708c <sock_close>
   b93d4:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b93d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b93da:	601a      	str	r2, [r3, #0]
   b93dc:	e7d4      	b.n	b9388 <_ZN9TCPClient9availableEv+0x54>
   b93de:	bf00      	nop
   b93e0:	000bd2d3 	.word	0x000bd2d3
   b93e4:	000bd2cc 	.word	0x000bd2cc

000b93e8 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b93e8:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b93ea:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b93ec:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b93ee:	6818      	ldr	r0, [r3, #0]
   b93f0:	2800      	cmp	r0, #0
   b93f2:	db01      	blt.n	b93f8 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b93f4:	f7fd fe4a 	bl	b708c <sock_close>
   b93f8:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b93fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b93fe:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b9400:	6960      	ldr	r0, [r4, #20]
   b9402:	2211      	movs	r2, #17
   b9404:	2100      	movs	r1, #0
   b9406:	308c      	adds	r0, #140	; 0x8c
   b9408:	f001 fb81 	bl	bab0e <memset>
    flush_buffer();
   b940c:	4620      	mov	r0, r4
}
   b940e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b9412:	f7ff bf0b 	b.w	b922c <_ZN9TCPClient12flush_bufferEv>

000b9416 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b9416:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b9418:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b941a:	4604      	mov	r4, r0
          total(0) {
   b941c:	6001      	str	r1, [r0, #0]
   b941e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b9422:	3088      	adds	r0, #136	; 0x88
   b9424:	f7ff fa5c 	bl	b88e0 <_ZN9IPAddressC1Ev>
}
   b9428:	4620      	mov	r0, r4
   b942a:	bd10      	pop	{r4, pc}

000b942c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b942c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b942e:	2300      	movs	r3, #0
   b9430:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9434:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b9438:	4a0e      	ldr	r2, [pc, #56]	; (b9474 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b943a:	6103      	str	r3, [r0, #16]
   b943c:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b943e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b9440:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9442:	20ac      	movs	r0, #172	; 0xac
   b9444:	9101      	str	r1, [sp, #4]
   b9446:	f7fa fe26 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b944a:	1e05      	subs	r5, r0, #0
   b944c:	f105 060c 	add.w	r6, r5, #12
   b9450:	d008      	beq.n	b9464 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b9452:	2301      	movs	r3, #1
   b9454:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9458:	4b07      	ldr	r3, [pc, #28]	; (b9478 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b945a:	9901      	ldr	r1, [sp, #4]
   b945c:	602b      	str	r3, [r5, #0]
   b945e:	4630      	mov	r0, r6
   b9460:	f7ff ffd9 	bl	b9416 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b9464:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b9466:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b946a:	f7ff fedf 	bl	b922c <_ZN9TCPClient12flush_bufferEv>
}
   b946e:	b002      	add	sp, #8
   b9470:	bd70      	pop	{r4, r5, r6, pc}
   b9472:	bf00      	nop
   b9474:	000bd308 	.word	0x000bd308
   b9478:	000bd2ec 	.word	0x000bd2ec

000b947c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b947c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b947e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b9482:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b9484:	f7ff ffd2 	bl	b942c <_ZN9TCPClientC1Ei>
}
   b9488:	4620      	mov	r0, r4
   b948a:	bd10      	pop	{r4, pc}

000b948c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b948c:	b510      	push	{r4, lr}
   b948e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b9490:	6800      	ldr	r0, [r0, #0]
   b9492:	2800      	cmp	r0, #0
   b9494:	db01      	blt.n	b949a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b9496:	f7fd fdf9 	bl	b708c <sock_close>
    }
}
   b949a:	4620      	mov	r0, r4
   b949c:	bd10      	pop	{r4, pc}

000b949e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b949e:	300c      	adds	r0, #12
   b94a0:	f7ff bff4 	b.w	b948c <_ZN9TCPClient4DataD1Ev>

000b94a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b94a4:	4b02      	ldr	r3, [pc, #8]	; (b94b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b94a6:	681a      	ldr	r2, [r3, #0]
   b94a8:	4b02      	ldr	r3, [pc, #8]	; (b94b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b94aa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b94ac:	4770      	bx	lr
   b94ae:	bf00      	nop
   b94b0:	200320ac 	.word	0x200320ac
   b94b4:	2003e6fc 	.word	0x2003e6fc

000b94b8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b94b8:	4770      	bx	lr

000b94ba <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b94ba:	7441      	strb	r1, [r0, #17]
}
   b94bc:	4770      	bx	lr

000b94be <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b94be:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b94c0:	7c00      	ldrb	r0, [r0, #16]
   b94c2:	f7fd fe33 	bl	b712c <hal_usart_available_data_for_write>
}
   b94c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b94ca:	bd08      	pop	{r3, pc}

000b94cc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b94cc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b94ce:	7c00      	ldrb	r0, [r0, #16]
   b94d0:	f7fd fe0c 	bl	b70ec <hal_usart_available>
}
   b94d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b94d8:	bd08      	pop	{r3, pc}

000b94da <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b94da:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b94dc:	7c00      	ldrb	r0, [r0, #16]
   b94de:	f7fd fe15 	bl	b710c <hal_usart_peek>
}
   b94e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b94e6:	bd08      	pop	{r3, pc}

000b94e8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b94e8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b94ea:	7c00      	ldrb	r0, [r0, #16]
   b94ec:	f7fd fe06 	bl	b70fc <hal_usart_read>
}
   b94f0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b94f4:	bd08      	pop	{r3, pc}

000b94f6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b94f6:	7c00      	ldrb	r0, [r0, #16]
   b94f8:	f7fd be10 	b.w	b711c <hal_usart_flush>

000b94fc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b94fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b94fe:	7c45      	ldrb	r5, [r0, #17]
{
   b9500:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9502:	b12d      	cbz	r5, b9510 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b9504:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b9506:	b003      	add	sp, #12
   b9508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b950c:	f7fd bde6 	b.w	b70dc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9510:	7c00      	ldrb	r0, [r0, #16]
   b9512:	9101      	str	r1, [sp, #4]
   b9514:	f7fd fe0a 	bl	b712c <hal_usart_available_data_for_write>
   b9518:	2800      	cmp	r0, #0
   b951a:	9901      	ldr	r1, [sp, #4]
   b951c:	dcf2      	bgt.n	b9504 <_ZN11USARTSerial5writeEh+0x8>
}
   b951e:	4628      	mov	r0, r5
   b9520:	b003      	add	sp, #12
   b9522:	bd30      	pop	{r4, r5, pc}

000b9524 <_ZN11USARTSerialD0Ev>:
   b9524:	b510      	push	{r4, lr}
   b9526:	2114      	movs	r1, #20
   b9528:	4604      	mov	r4, r0
   b952a:	f7fa fdba 	bl	b40a2 <_ZdlPvj>
   b952e:	4620      	mov	r0, r4
   b9530:	bd10      	pop	{r4, pc}
	...

000b9534 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b9534:	b510      	push	{r4, lr}
   b9536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b953a:	4604      	mov	r4, r0
   b953c:	4608      	mov	r0, r1
   b953e:	4611      	mov	r1, r2
   b9540:	2200      	movs	r2, #0
   b9542:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b9546:	4b04      	ldr	r3, [pc, #16]	; (b9558 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b9548:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b954a:	2301      	movs	r3, #1
  _serial = serial;
   b954c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b954e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b9550:	f7fd fdf4 	bl	b713c <hal_usart_init_ex>
}
   b9554:	4620      	mov	r0, r4
   b9556:	bd10      	pop	{r4, pc}
   b9558:	000bd370 	.word	0x000bd370

000b955c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b955c:	7441      	strb	r1, [r0, #17]
}
   b955e:	4770      	bx	lr

000b9560 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9560:	4770      	bx	lr

000b9562 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b9562:	4770      	bx	lr

000b9564 <_ZN9USBSerial4readEv>:
{
   b9564:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b9566:	2100      	movs	r1, #0
   b9568:	7c00      	ldrb	r0, [r0, #16]
   b956a:	f7fd fe0f 	bl	b718c <HAL_USB_USART_Receive_Data>
}
   b956e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9572:	bd08      	pop	{r3, pc}

000b9574 <_ZN9USBSerial4peekEv>:
{
   b9574:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b9576:	2101      	movs	r1, #1
   b9578:	7c00      	ldrb	r0, [r0, #16]
   b957a:	f7fd fe07 	bl	b718c <HAL_USB_USART_Receive_Data>
}
   b957e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9582:	bd08      	pop	{r3, pc}

000b9584 <_ZN9USBSerial17availableForWriteEv>:
{
   b9584:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b9586:	7c00      	ldrb	r0, [r0, #16]
   b9588:	f7fd fdf8 	bl	b717c <HAL_USB_USART_Available_Data_For_Write>
}
   b958c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9590:	bd08      	pop	{r3, pc}

000b9592 <_ZN9USBSerial9availableEv>:
{
   b9592:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b9594:	7c00      	ldrb	r0, [r0, #16]
   b9596:	f7fd fde9 	bl	b716c <HAL_USB_USART_Available_Data>
}
   b959a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b959e:	bd08      	pop	{r3, pc}

000b95a0 <_ZN9USBSerial5writeEh>:
{
   b95a0:	b513      	push	{r0, r1, r4, lr}
   b95a2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b95a4:	7c00      	ldrb	r0, [r0, #16]
{
   b95a6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b95a8:	f7fd fde8 	bl	b717c <HAL_USB_USART_Available_Data_For_Write>
   b95ac:	2800      	cmp	r0, #0
   b95ae:	9901      	ldr	r1, [sp, #4]
   b95b0:	dc01      	bgt.n	b95b6 <_ZN9USBSerial5writeEh+0x16>
   b95b2:	7c60      	ldrb	r0, [r4, #17]
   b95b4:	b120      	cbz	r0, b95c0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b95b6:	7c20      	ldrb	r0, [r4, #16]
   b95b8:	f7fd fdf0 	bl	b719c <HAL_USB_USART_Send_Data>
   b95bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b95c0:	b002      	add	sp, #8
   b95c2:	bd10      	pop	{r4, pc}

000b95c4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b95c4:	7c00      	ldrb	r0, [r0, #16]
   b95c6:	f7fd bdf1 	b.w	b71ac <HAL_USB_USART_Flush_Data>

000b95ca <_ZN9USBSerialD0Ev>:
   b95ca:	b510      	push	{r4, lr}
   b95cc:	2114      	movs	r1, #20
   b95ce:	4604      	mov	r4, r0
   b95d0:	f7fa fd67 	bl	b40a2 <_ZdlPvj>
   b95d4:	4620      	mov	r0, r4
   b95d6:	bd10      	pop	{r4, pc}

000b95d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b95d8:	b510      	push	{r4, lr}
   b95da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b95de:	4604      	mov	r4, r0
   b95e0:	4608      	mov	r0, r1
   b95e2:	2100      	movs	r1, #0
   b95e4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b95e8:	4b04      	ldr	r3, [pc, #16]	; (b95fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b95ea:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b95ec:	2301      	movs	r3, #1
  _serial = serial;
   b95ee:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b95f0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b95f2:	4611      	mov	r1, r2
   b95f4:	f7fd fdaa 	bl	b714c <HAL_USB_USART_Init>
}
   b95f8:	4620      	mov	r0, r4
   b95fa:	bd10      	pop	{r4, pc}
   b95fc:	000bd3a0 	.word	0x000bd3a0

000b9600 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b9600:	7c00      	ldrb	r0, [r0, #16]
   b9602:	2200      	movs	r2, #0
   b9604:	f7fd bdaa 	b.w	b715c <HAL_USB_USART_Begin>

000b9608 <_Z19acquireSerialBufferv>:
{
   b9608:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b960a:	2214      	movs	r2, #20
{
   b960c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b960e:	2100      	movs	r1, #0
   b9610:	f001 fa7d 	bl	bab0e <memset>
}
   b9614:	4620      	mov	r0, r4
   b9616:	bd10      	pop	{r4, pc}

000b9618 <_Z16_fetch_usbserialv>:
{
   b9618:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b961a:	4c0f      	ldr	r4, [pc, #60]	; (b9658 <_Z16_fetch_usbserialv+0x40>)
{
   b961c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b961e:	a803      	add	r0, sp, #12
   b9620:	f7ff fff2 	bl	b9608 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9624:	7821      	ldrb	r1, [r4, #0]
   b9626:	f3bf 8f5b 	dmb	ish
   b962a:	f011 0101 	ands.w	r1, r1, #1
   b962e:	d10f      	bne.n	b9650 <_Z16_fetch_usbserialv+0x38>
   b9630:	4620      	mov	r0, r4
   b9632:	9101      	str	r1, [sp, #4]
   b9634:	f7fa fd37 	bl	b40a6 <__cxa_guard_acquire>
   b9638:	9901      	ldr	r1, [sp, #4]
   b963a:	b148      	cbz	r0, b9650 <_Z16_fetch_usbserialv+0x38>
   b963c:	aa03      	add	r2, sp, #12
   b963e:	4807      	ldr	r0, [pc, #28]	; (b965c <_Z16_fetch_usbserialv+0x44>)
   b9640:	f7ff ffca 	bl	b95d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9644:	4620      	mov	r0, r4
   b9646:	f7fa fd33 	bl	b40b0 <__cxa_guard_release>
   b964a:	4805      	ldr	r0, [pc, #20]	; (b9660 <_Z16_fetch_usbserialv+0x48>)
   b964c:	f001 fa16 	bl	baa7c <atexit>
	return _usbserial;
}
   b9650:	4802      	ldr	r0, [pc, #8]	; (b965c <_Z16_fetch_usbserialv+0x44>)
   b9652:	b008      	add	sp, #32
   b9654:	bd10      	pop	{r4, pc}
   b9656:	bf00      	nop
   b9658:	2003e700 	.word	0x2003e700
   b965c:	2003e704 	.word	0x2003e704
   b9660:	000b9561 	.word	0x000b9561

000b9664 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b9664:	2200      	movs	r2, #0
   b9666:	6840      	ldr	r0, [r0, #4]
   b9668:	4611      	mov	r1, r2
   b966a:	f7fd bdfb 	b.w	b7264 <network_ready>

000b966e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b966e:	2200      	movs	r2, #0
   b9670:	6840      	ldr	r0, [r0, #4]
   b9672:	4611      	mov	r1, r2
   b9674:	f7fd be16 	b.w	b72a4 <network_listening>

000b9678 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9678:	2200      	movs	r2, #0
   b967a:	6840      	ldr	r0, [r0, #4]
   b967c:	4611      	mov	r1, r2
   b967e:	f7fd be21 	b.w	b72c4 <network_get_listen_timeout>

000b9682 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9682:	6840      	ldr	r0, [r0, #4]
   b9684:	2200      	movs	r2, #0
   b9686:	f7fd be15 	b.w	b72b4 <network_set_listen_timeout>

000b968a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b968a:	6840      	ldr	r0, [r0, #4]
   b968c:	2200      	movs	r2, #0
   b968e:	f081 0101 	eor.w	r1, r1, #1
   b9692:	f7fd bdff 	b.w	b7294 <network_listen>

000b9696 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9696:	2300      	movs	r3, #0
   b9698:	6840      	ldr	r0, [r0, #4]
   b969a:	461a      	mov	r2, r3
   b969c:	4619      	mov	r1, r3
   b969e:	f7fd bdf1 	b.w	b7284 <network_off>

000b96a2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b96a2:	2300      	movs	r3, #0
   b96a4:	6840      	ldr	r0, [r0, #4]
   b96a6:	461a      	mov	r2, r3
   b96a8:	4619      	mov	r1, r3
   b96aa:	f7fd bde3 	b.w	b7274 <network_on>

000b96ae <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b96ae:	2200      	movs	r2, #0
   b96b0:	6840      	ldr	r0, [r0, #4]
   b96b2:	4611      	mov	r1, r2
   b96b4:	f7fd bdc6 	b.w	b7244 <network_connecting>

000b96b8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b96b8:	6840      	ldr	r0, [r0, #4]
   b96ba:	2200      	movs	r2, #0
   b96bc:	2102      	movs	r1, #2
   b96be:	f7fd bdc9 	b.w	b7254 <network_disconnect>

000b96c2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b96c2:	2300      	movs	r3, #0
   b96c4:	6840      	ldr	r0, [r0, #4]
   b96c6:	461a      	mov	r2, r3
   b96c8:	f7fd bdb4 	b.w	b7234 <network_connect>

000b96cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b96cc:	4b02      	ldr	r3, [pc, #8]	; (b96d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b96ce:	2204      	movs	r2, #4
   b96d0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b96d2:	4a02      	ldr	r2, [pc, #8]	; (b96dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b96d4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b96d6:	4770      	bx	lr
   b96d8:	2003e718 	.word	0x2003e718
   b96dc:	000bd3d0 	.word	0x000bd3d0

000b96e0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b96e0:	b510      	push	{r4, lr}
   b96e2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b96e4:	f001 fa5c 	bl	baba0 <strlen>
   b96e8:	3801      	subs	r0, #1
   b96ea:	1823      	adds	r3, r4, r0
   b96ec:	4620      	mov	r0, r4
	while(i<j){
   b96ee:	4283      	cmp	r3, r0
   b96f0:	d906      	bls.n	b9700 <_Z11str_reversePc+0x20>
		c = *i;
   b96f2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b96f4:	7819      	ldrb	r1, [r3, #0]
   b96f6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b96fa:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b96fe:	e7f6      	b.n	b96ee <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b9700:	bd10      	pop	{r4, pc}

000b9702 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b9702:	b570      	push	{r4, r5, r6, lr}
   b9704:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b9706:	1e91      	subs	r1, r2, #2
   b9708:	2922      	cmp	r1, #34	; 0x22
   b970a:	d81d      	bhi.n	b9748 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b970c:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b970e:	b930      	cbnz	r0, b971e <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b9710:	4423      	add	r3, r4
            *ptr++ = '0';
   b9712:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b9714:	429d      	cmp	r5, r3
   b9716:	d210      	bcs.n	b973a <ultoa+0x38>
            *ptr++ = '0';
   b9718:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b971c:	e7fa      	b.n	b9714 <ultoa+0x12>
            result.quot = a/radix;
   b971e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b9722:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b9726:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b9728:	2809      	cmp	r0, #9
                *ptr += '0';
   b972a:	bf94      	ite	ls
   b972c:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b972e:	3157      	addhi	r1, #87	; 0x57
   b9730:	b2c9      	uxtb	r1, r1
   b9732:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b9736:	4630      	mov	r0, r6
	while(a){
   b9738:	e7e9      	b.n	b970e <ultoa+0xc>

	*ptr = '\0';
   b973a:	2300      	movs	r3, #0
	str_reverse(buffer);
   b973c:	4620      	mov	r0, r4
	*ptr = '\0';
   b973e:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b9740:	f7ff ffce 	bl	b96e0 <_Z11str_reversePc>
	return buffer;
   b9744:	4620      	mov	r0, r4
}
   b9746:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b9748:	2000      	movs	r0, #0
   b974a:	e7fc      	b.n	b9746 <ultoa+0x44>

000b974c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b974c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b974e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b9750:	460c      	mov	r4, r1
   b9752:	4615      	mov	r5, r2
	if(a<0){
   b9754:	da0e      	bge.n	b9774 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b9756:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b975a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b975e:	bf14      	ite	ne
   b9760:	4258      	negne	r0, r3
   b9762:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b9764:	2301      	movs	r3, #1
		*buffer = '-';
   b9766:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b9768:	462a      	mov	r2, r5
   b976a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b976c:	f7ff ffc9 	bl	b9702 <ultoa>
	}
	return buffer;
}
   b9770:	4620      	mov	r0, r4
   b9772:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b9774:	2301      	movs	r3, #1
   b9776:	e7f9      	b.n	b976c <itoa+0x20>

000b9778 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b9778:	4b01      	ldr	r3, [pc, #4]	; (b9780 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b977a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b977c:	4770      	bx	lr
   b977e:	bf00      	nop
   b9780:	200320b4 	.word	0x200320b4

000b9784 <serialEventRun>:
{
   b9784:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b9786:	4b0b      	ldr	r3, [pc, #44]	; (b97b4 <serialEventRun+0x30>)
   b9788:	b143      	cbz	r3, b979c <serialEventRun+0x18>
   b978a:	f7ff ff45 	bl	b9618 <_Z16_fetch_usbserialv>
   b978e:	6803      	ldr	r3, [r0, #0]
   b9790:	691b      	ldr	r3, [r3, #16]
   b9792:	4798      	blx	r3
   b9794:	2800      	cmp	r0, #0
   b9796:	dd01      	ble.n	b979c <serialEventRun+0x18>
        serialEvent();
   b9798:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b979c:	4b06      	ldr	r3, [pc, #24]	; (b97b8 <serialEventRun+0x34>)
   b979e:	b143      	cbz	r3, b97b2 <serialEventRun+0x2e>
   b97a0:	f000 f8c8 	bl	b9934 <_Z22__fetch_global_Serial1v>
   b97a4:	6803      	ldr	r3, [r0, #0]
   b97a6:	691b      	ldr	r3, [r3, #16]
   b97a8:	4798      	blx	r3
   b97aa:	2800      	cmp	r0, #0
   b97ac:	dd01      	ble.n	b97b2 <serialEventRun+0x2e>
        serialEvent1();
   b97ae:	f3af 8000 	nop.w
}
   b97b2:	bd08      	pop	{r3, pc}
	...

000b97bc <_post_loop>:
{
   b97bc:	b508      	push	{r3, lr}
	serialEventRun();
   b97be:	f7ff ffe1 	bl	b9784 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b97c2:	f7fd fbcb 	bl	b6f5c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b97c6:	4b01      	ldr	r3, [pc, #4]	; (b97cc <_post_loop+0x10>)
   b97c8:	6018      	str	r0, [r3, #0]
}
   b97ca:	bd08      	pop	{r3, pc}
   b97cc:	2003e728 	.word	0x2003e728

000b97d0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b97d0:	4805      	ldr	r0, [pc, #20]	; (b97e8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b97d2:	4a06      	ldr	r2, [pc, #24]	; (b97ec <_Z33system_initialize_user_backup_ramv+0x1c>)
   b97d4:	4906      	ldr	r1, [pc, #24]	; (b97f0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b97d6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b97d8:	1a12      	subs	r2, r2, r0
   b97da:	f001 f970 	bl	baabe <memcpy>
    __backup_sram_signature = signature;
   b97de:	4b05      	ldr	r3, [pc, #20]	; (b97f4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b97e0:	4a05      	ldr	r2, [pc, #20]	; (b97f8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b97e2:	601a      	str	r2, [r3, #0]
}
   b97e4:	bd08      	pop	{r3, pc}
   b97e6:	bf00      	nop
   b97e8:	2003f400 	.word	0x2003f400
   b97ec:	2003f404 	.word	0x2003f404
   b97f0:	000bd994 	.word	0x000bd994
   b97f4:	2003f400 	.word	0x2003f400
   b97f8:	9a271c1e 	.word	0x9a271c1e

000b97fc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b97fc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b97fe:	2300      	movs	r3, #0
   b9800:	9300      	str	r3, [sp, #0]
   b9802:	461a      	mov	r2, r3
   b9804:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9808:	f7fd fd02 	bl	b7210 <system_ctrl_set_result>
}
   b980c:	b003      	add	sp, #12
   b980e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9814 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b9814:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b9816:	8843      	ldrh	r3, [r0, #2]
   b9818:	2b0a      	cmp	r3, #10
   b981a:	d008      	beq.n	b982e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b981c:	2b50      	cmp	r3, #80	; 0x50
   b981e:	d10b      	bne.n	b9838 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b9820:	4b09      	ldr	r3, [pc, #36]	; (b9848 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b9822:	681b      	ldr	r3, [r3, #0]
   b9824:	b14b      	cbz	r3, b983a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b9826:	b003      	add	sp, #12
   b9828:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b982c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b982e:	f7ff ffe5 	bl	b97fc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b9832:	b003      	add	sp, #12
   b9834:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9838:	2300      	movs	r3, #0
   b983a:	9300      	str	r3, [sp, #0]
   b983c:	461a      	mov	r2, r3
   b983e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9842:	f7fd fce5 	bl	b7210 <system_ctrl_set_result>
}
   b9846:	e7f4      	b.n	b9832 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b9848:	2003e724 	.word	0x2003e724

000b984c <module_user_init_hook>:
{
   b984c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b984e:	4812      	ldr	r0, [pc, #72]	; (b9898 <module_user_init_hook+0x4c>)
   b9850:	2100      	movs	r1, #0
   b9852:	f7fd fd97 	bl	b7384 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b9856:	4b11      	ldr	r3, [pc, #68]	; (b989c <module_user_init_hook+0x50>)
   b9858:	681a      	ldr	r2, [r3, #0]
   b985a:	4b11      	ldr	r3, [pc, #68]	; (b98a0 <module_user_init_hook+0x54>)
   b985c:	429a      	cmp	r2, r3
   b985e:	4b11      	ldr	r3, [pc, #68]	; (b98a4 <module_user_init_hook+0x58>)
   b9860:	bf0c      	ite	eq
   b9862:	2201      	moveq	r2, #1
   b9864:	2200      	movne	r2, #0
   b9866:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b9868:	d001      	beq.n	b986e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b986a:	f7ff ffb1 	bl	b97d0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b986e:	f7fd fb65 	bl	b6f3c <HAL_RNG_GetRandomNumber>
   b9872:	4604      	mov	r4, r0
    srand(seed);
   b9874:	f001 f954 	bl	bab20 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b9878:	4b0b      	ldr	r3, [pc, #44]	; (b98a8 <module_user_init_hook+0x5c>)
   b987a:	b113      	cbz	r3, b9882 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b987c:	4620      	mov	r0, r4
   b987e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b9882:	2100      	movs	r1, #0
   b9884:	4808      	ldr	r0, [pc, #32]	; (b98a8 <module_user_init_hook+0x5c>)
   b9886:	f7fd fccd 	bl	b7224 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b988a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b988e:	4807      	ldr	r0, [pc, #28]	; (b98ac <module_user_init_hook+0x60>)
   b9890:	2100      	movs	r1, #0
   b9892:	f7fd bcb3 	b.w	b71fc <system_ctrl_set_app_request_handler>
   b9896:	bf00      	nop
   b9898:	000b9779 	.word	0x000b9779
   b989c:	2003f400 	.word	0x2003f400
   b98a0:	9a271c1e 	.word	0x9a271c1e
   b98a4:	2003e720 	.word	0x2003e720
   b98a8:	00000000 	.word	0x00000000
   b98ac:	000b9815 	.word	0x000b9815

000b98b0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b98b0:	4770      	bx	lr
	...

000b98b4 <_Z19__fetch_global_Wirev>:
{
   b98b4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b98b6:	4d0e      	ldr	r5, [pc, #56]	; (b98f0 <_Z19__fetch_global_Wirev+0x3c>)
   b98b8:	7829      	ldrb	r1, [r5, #0]
   b98ba:	f3bf 8f5b 	dmb	ish
   b98be:	f011 0401 	ands.w	r4, r1, #1
{
   b98c2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b98c4:	d111      	bne.n	b98ea <_Z19__fetch_global_Wirev+0x36>
   b98c6:	4628      	mov	r0, r5
   b98c8:	f7fa fbed 	bl	b40a6 <__cxa_guard_acquire>
   b98cc:	b168      	cbz	r0, b98ea <_Z19__fetch_global_Wirev+0x36>
   b98ce:	a801      	add	r0, sp, #4
   b98d0:	f7fa feee 	bl	b46b0 <_Z17acquireWireBufferv>
   b98d4:	aa01      	add	r2, sp, #4
   b98d6:	4621      	mov	r1, r4
   b98d8:	4806      	ldr	r0, [pc, #24]	; (b98f4 <_Z19__fetch_global_Wirev+0x40>)
   b98da:	f7fe ff75 	bl	b87c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b98de:	4628      	mov	r0, r5
   b98e0:	f7fa fbe6 	bl	b40b0 <__cxa_guard_release>
   b98e4:	4804      	ldr	r0, [pc, #16]	; (b98f8 <_Z19__fetch_global_Wirev+0x44>)
   b98e6:	f001 f8c9 	bl	baa7c <atexit>
	return wire;
}
   b98ea:	4802      	ldr	r0, [pc, #8]	; (b98f4 <_Z19__fetch_global_Wirev+0x40>)
   b98ec:	b007      	add	sp, #28
   b98ee:	bd30      	pop	{r4, r5, pc}
   b98f0:	2003e72c 	.word	0x2003e72c
   b98f4:	2003e730 	.word	0x2003e730
   b98f8:	000b98b1 	.word	0x000b98b1

000b98fc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b98fc:	4770      	bx	lr
	...

000b9900 <_Z20acquireSerial1Bufferv>:
{
   b9900:	b538      	push	{r3, r4, r5, lr}
   b9902:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b9904:	2514      	movs	r5, #20
   b9906:	462a      	mov	r2, r5
   b9908:	2100      	movs	r1, #0
   b990a:	f001 f900 	bl	bab0e <memset>
   b990e:	8025      	strh	r5, [r4, #0]
   b9910:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9912:	4907      	ldr	r1, [pc, #28]	; (b9930 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b9914:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9916:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b9918:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b991a:	f000 f82f 	bl	b997c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b991e:	4904      	ldr	r1, [pc, #16]	; (b9930 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b9920:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9922:	4628      	mov	r0, r5
   b9924:	f000 f82a 	bl	b997c <_ZnajRKSt9nothrow_t>
    };
   b9928:	60e0      	str	r0, [r4, #12]
}
   b992a:	4620      	mov	r0, r4
   b992c:	bd38      	pop	{r3, r4, r5, pc}
   b992e:	bf00      	nop
   b9930:	000bd404 	.word	0x000bd404

000b9934 <_Z22__fetch_global_Serial1v>:
{
   b9934:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9936:	4d0e      	ldr	r5, [pc, #56]	; (b9970 <_Z22__fetch_global_Serial1v+0x3c>)
   b9938:	7829      	ldrb	r1, [r5, #0]
   b993a:	f3bf 8f5b 	dmb	ish
   b993e:	f011 0401 	ands.w	r4, r1, #1
{
   b9942:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9944:	d111      	bne.n	b996a <_Z22__fetch_global_Serial1v+0x36>
   b9946:	4628      	mov	r0, r5
   b9948:	f7fa fbad 	bl	b40a6 <__cxa_guard_acquire>
   b994c:	b168      	cbz	r0, b996a <_Z22__fetch_global_Serial1v+0x36>
   b994e:	a801      	add	r0, sp, #4
   b9950:	f7ff ffd6 	bl	b9900 <_Z20acquireSerial1Bufferv>
   b9954:	aa01      	add	r2, sp, #4
   b9956:	4621      	mov	r1, r4
   b9958:	4806      	ldr	r0, [pc, #24]	; (b9974 <_Z22__fetch_global_Serial1v+0x40>)
   b995a:	f7ff fdeb 	bl	b9534 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b995e:	4628      	mov	r0, r5
   b9960:	f7fa fba6 	bl	b40b0 <__cxa_guard_release>
   b9964:	4804      	ldr	r0, [pc, #16]	; (b9978 <_Z22__fetch_global_Serial1v+0x44>)
   b9966:	f001 f889 	bl	baa7c <atexit>
    return serial1;
}
   b996a:	4802      	ldr	r0, [pc, #8]	; (b9974 <_Z22__fetch_global_Serial1v+0x40>)
   b996c:	b007      	add	sp, #28
   b996e:	bd30      	pop	{r4, r5, pc}
   b9970:	2003e744 	.word	0x2003e744
   b9974:	2003e748 	.word	0x2003e748
   b9978:	000b98fd 	.word	0x000b98fd

000b997c <_ZnajRKSt9nothrow_t>:
   b997c:	f7fa bb8d 	b.w	b409a <_Znaj>

000b9980 <_ZSt17__throw_bad_allocv>:
   b9980:	b508      	push	{r3, lr}
   b9982:	f7fd fcdf 	bl	b7344 <abort>

000b9986 <_ZSt19__throw_logic_errorPKc>:
   b9986:	b508      	push	{r3, lr}
   b9988:	f7fd fcdc 	bl	b7344 <abort>

000b998c <_ZSt20__throw_length_errorPKc>:
   b998c:	b508      	push	{r3, lr}
   b998e:	f7fd fcd9 	bl	b7344 <abort>

000b9992 <_ZSt24__throw_out_of_range_fmtPKcz>:
   b9992:	b40f      	push	{r0, r1, r2, r3}
   b9994:	b580      	push	{r7, lr}
   b9996:	b084      	sub	sp, #16
   b9998:	af00      	add	r7, sp, #0
   b999a:	f107 0418 	add.w	r4, r7, #24
   b999e:	f854 2b04 	ldr.w	r2, [r4], #4
   b99a2:	607a      	str	r2, [r7, #4]
   b99a4:	4610      	mov	r0, r2
   b99a6:	f001 f8fb 	bl	baba0 <strlen>
   b99aa:	f200 2307 	addw	r3, r0, #519	; 0x207
   b99ae:	f023 0307 	bic.w	r3, r3, #7
   b99b2:	ebad 0d03 	sub.w	sp, sp, r3
   b99b6:	f500 7100 	add.w	r1, r0, #512	; 0x200
   b99ba:	687a      	ldr	r2, [r7, #4]
   b99bc:	60fc      	str	r4, [r7, #12]
   b99be:	4623      	mov	r3, r4
   b99c0:	4668      	mov	r0, sp
   b99c2:	f000 f85d 	bl	b9a80 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   b99c6:	f7fd fcbd 	bl	b7344 <abort>

000b99ca <_ZSt25__throw_bad_function_callv>:
   b99ca:	b508      	push	{r3, lr}
   b99cc:	f7fd fcba 	bl	b7344 <abort>

000b99d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b99d0:	4901      	ldr	r1, [pc, #4]	; (b99d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b99d2:	f000 b9f7 	b.w	b9dc4 <_ZNKSt9type_infoeqERKS_>
   b99d6:	bf00      	nop
   b99d8:	000bd420 	.word	0x000bd420

000b99dc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   b99dc:	b580      	push	{r7, lr}
   b99de:	b09c      	sub	sp, #112	; 0x70
   b99e0:	4606      	mov	r6, r0
   b99e2:	af00      	add	r7, sp, #0
   b99e4:	460c      	mov	r4, r1
   b99e6:	1ba4      	subs	r4, r4, r6
   b99e8:	490e      	ldr	r1, [pc, #56]	; (b9a24 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   b99ea:	2269      	movs	r2, #105	; 0x69
   b99ec:	1d38      	adds	r0, r7, #4
   b99ee:	f001 f866 	bl	baabe <memcpy>
   b99f2:	f104 0370 	add.w	r3, r4, #112	; 0x70
   b99f6:	f023 0307 	bic.w	r3, r3, #7
   b99fa:	ebad 0d03 	sub.w	sp, sp, r3
   b99fe:	466d      	mov	r5, sp
   b9a00:	2268      	movs	r2, #104	; 0x68
   b9a02:	1d39      	adds	r1, r7, #4
   b9a04:	4628      	mov	r0, r5
   b9a06:	f001 f85a 	bl	baabe <memcpy>
   b9a0a:	4622      	mov	r2, r4
   b9a0c:	4631      	mov	r1, r6
   b9a0e:	f105 0068 	add.w	r0, r5, #104	; 0x68
   b9a12:	442c      	add	r4, r5
   b9a14:	f001 f853 	bl	baabe <memcpy>
   b9a18:	2300      	movs	r3, #0
   b9a1a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b9a1e:	4628      	mov	r0, r5
   b9a20:	f7ff ffb1 	bl	b9986 <_ZSt19__throw_logic_errorPKc>
   b9a24:	000bd428 	.word	0x000bd428

000b9a28 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   b9a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9a2c:	af00      	add	r7, sp, #0
   b9a2e:	b084      	sub	sp, #16
   b9a30:	466d      	mov	r5, sp
   b9a32:	f105 040c 	add.w	r4, r5, #12
   b9a36:	f8df 8044 	ldr.w	r8, [pc, #68]	; b9a7c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   b9a3a:	4623      	mov	r3, r4
   b9a3c:	f04f 0c0a 	mov.w	ip, #10
   b9a40:	fbb2 f6fc 	udiv	r6, r2, ip
   b9a44:	fb0c 2e16 	mls	lr, ip, r6, r2
   b9a48:	f818 e00e 	ldrb.w	lr, [r8, lr]
   b9a4c:	f803 ed01 	strb.w	lr, [r3, #-1]!
   b9a50:	4696      	mov	lr, r2
   b9a52:	f1be 0f09 	cmp.w	lr, #9
   b9a56:	4632      	mov	r2, r6
   b9a58:	d8f2      	bhi.n	b9a40 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   b9a5a:	1ae4      	subs	r4, r4, r3
   b9a5c:	428c      	cmp	r4, r1
   b9a5e:	d809      	bhi.n	b9a74 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   b9a60:	f1c4 030c 	rsb	r3, r4, #12
   b9a64:	4622      	mov	r2, r4
   b9a66:	18e9      	adds	r1, r5, r3
   b9a68:	f001 f829 	bl	baabe <memcpy>
   b9a6c:	4620      	mov	r0, r4
   b9a6e:	46bd      	mov	sp, r7
   b9a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9a74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9a78:	e7f8      	b.n	b9a6c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   b9a7a:	bf00      	nop
   b9a7c:	000bd491 	.word	0x000bd491

000b9a80 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   b9a80:	3901      	subs	r1, #1
   b9a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9a86:	4607      	mov	r7, r0
   b9a88:	4615      	mov	r5, r2
   b9a8a:	eb00 0801 	add.w	r8, r0, r1
   b9a8e:	4604      	mov	r4, r0
   b9a90:	782a      	ldrb	r2, [r5, #0]
   b9a92:	b392      	cbz	r2, b9afa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   b9a94:	4544      	cmp	r4, r8
   b9a96:	d22a      	bcs.n	b9aee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b9a98:	2a25      	cmp	r2, #37	; 0x25
   b9a9a:	d107      	bne.n	b9aac <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b9a9c:	786a      	ldrb	r2, [r5, #1]
   b9a9e:	2a73      	cmp	r2, #115	; 0x73
   b9aa0:	d009      	beq.n	b9ab6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   b9aa2:	2a7a      	cmp	r2, #122	; 0x7a
   b9aa4:	d012      	beq.n	b9acc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   b9aa6:	2a25      	cmp	r2, #37	; 0x25
   b9aa8:	d100      	bne.n	b9aac <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b9aaa:	3501      	adds	r5, #1
   b9aac:	f815 2b01 	ldrb.w	r2, [r5], #1
   b9ab0:	f804 2b01 	strb.w	r2, [r4], #1
   b9ab4:	e7ec      	b.n	b9a90 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b9ab6:	f853 2b04 	ldr.w	r2, [r3], #4
   b9aba:	3a01      	subs	r2, #1
   b9abc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   b9ac0:	b1c9      	cbz	r1, b9af6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   b9ac2:	4544      	cmp	r4, r8
   b9ac4:	d013      	beq.n	b9aee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b9ac6:	f804 1b01 	strb.w	r1, [r4], #1
   b9aca:	e7f7      	b.n	b9abc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   b9acc:	78aa      	ldrb	r2, [r5, #2]
   b9ace:	2a75      	cmp	r2, #117	; 0x75
   b9ad0:	d1ec      	bne.n	b9aac <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b9ad2:	461e      	mov	r6, r3
   b9ad4:	eba8 0104 	sub.w	r1, r8, r4
   b9ad8:	f856 2b04 	ldr.w	r2, [r6], #4
   b9adc:	4620      	mov	r0, r4
   b9ade:	f7ff ffa3 	bl	b9a28 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   b9ae2:	2800      	cmp	r0, #0
   b9ae4:	dd03      	ble.n	b9aee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b9ae6:	4404      	add	r4, r0
   b9ae8:	3503      	adds	r5, #3
   b9aea:	4633      	mov	r3, r6
   b9aec:	e7d0      	b.n	b9a90 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b9aee:	4621      	mov	r1, r4
   b9af0:	4638      	mov	r0, r7
   b9af2:	f7ff ff73 	bl	b99dc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   b9af6:	3502      	adds	r5, #2
   b9af8:	e7ca      	b.n	b9a90 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b9afa:	7022      	strb	r2, [r4, #0]
   b9afc:	1be0      	subs	r0, r4, r7
   b9afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9b02 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   b9b02:	b10a      	cbz	r2, b9b08 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   b9b04:	f000 bfdb 	b.w	baabe <memcpy>
   b9b08:	4770      	bx	lr
	...

000b9b0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   b9b0c:	b508      	push	{r3, lr}
   b9b0e:	680b      	ldr	r3, [r1, #0]
   b9b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   b9b14:	d302      	bcc.n	b9b1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   b9b16:	480d      	ldr	r0, [pc, #52]	; (b9b4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   b9b18:	f7ff ff38 	bl	b998c <_ZSt20__throw_length_errorPKc>
   b9b1c:	4293      	cmp	r3, r2
   b9b1e:	d90b      	bls.n	b9b38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b9b20:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   b9b24:	ea4f 0042 	mov.w	r0, r2, lsl #1
   b9b28:	d206      	bcs.n	b9b38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b9b2a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   b9b2e:	bf2a      	itet	cs
   b9b30:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   b9b34:	6008      	strcc	r0, [r1, #0]
   b9b36:	600b      	strcs	r3, [r1, #0]
   b9b38:	6808      	ldr	r0, [r1, #0]
   b9b3a:	3001      	adds	r0, #1
   b9b3c:	d501      	bpl.n	b9b42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   b9b3e:	f7ff ff1f 	bl	b9980 <_ZSt17__throw_bad_allocv>
   b9b42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b9b46:	f7fa baa6 	b.w	b4096 <_Znwj>
   b9b4a:	bf00      	nop
   b9b4c:	000bd49c 	.word	0x000bd49c

000b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   b9b50:	f850 3b08 	ldr.w	r3, [r0], #8
   b9b54:	4283      	cmp	r3, r0
   b9b56:	d002      	beq.n	b9b5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   b9b58:	4618      	mov	r0, r3
   b9b5a:	f7fa baa0 	b.w	b409e <_ZdlPv>
   b9b5e:	4770      	bx	lr

000b9b60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   b9b60:	2a01      	cmp	r2, #1
   b9b62:	b410      	push	{r4}
   b9b64:	d104      	bne.n	b9b70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   b9b66:	780a      	ldrb	r2, [r1, #0]
   b9b68:	f85d 4b04 	ldr.w	r4, [sp], #4
   b9b6c:	7002      	strb	r2, [r0, #0]
   b9b6e:	4770      	bx	lr
   b9b70:	f85d 4b04 	ldr.w	r4, [sp], #4
   b9b74:	f7ff bfc5 	b.w	b9b02 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000b9b78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
   b9b78:	b508      	push	{r3, lr}
   b9b7a:	1a52      	subs	r2, r2, r1
   b9b7c:	f7ff fff0 	bl	b9b60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b9b80:	bd08      	pop	{r3, pc}

000b9b82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   b9b82:	b508      	push	{r3, lr}
   b9b84:	1a52      	subs	r2, r2, r1
   b9b86:	f7ff ffeb 	bl	b9b60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b9b8a:	bd08      	pop	{r3, pc}

000b9b8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   b9b8c:	4288      	cmp	r0, r1
   b9b8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9b90:	4604      	mov	r4, r0
   b9b92:	460e      	mov	r6, r1
   b9b94:	d01e      	beq.n	b9bd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   b9b96:	4603      	mov	r3, r0
   b9b98:	684d      	ldr	r5, [r1, #4]
   b9b9a:	f853 2b08 	ldr.w	r2, [r3], #8
   b9b9e:	429a      	cmp	r2, r3
   b9ba0:	bf14      	ite	ne
   b9ba2:	6882      	ldrne	r2, [r0, #8]
   b9ba4:	220f      	moveq	r2, #15
   b9ba6:	42aa      	cmp	r2, r5
   b9ba8:	d20a      	bcs.n	b9bc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   b9baa:	a901      	add	r1, sp, #4
   b9bac:	9501      	str	r5, [sp, #4]
   b9bae:	f7ff ffad 	bl	b9b0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b9bb2:	4607      	mov	r7, r0
   b9bb4:	4620      	mov	r0, r4
   b9bb6:	f7ff ffcb 	bl	b9b50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b9bba:	9b01      	ldr	r3, [sp, #4]
   b9bbc:	6027      	str	r7, [r4, #0]
   b9bbe:	60a3      	str	r3, [r4, #8]
   b9bc0:	b125      	cbz	r5, b9bcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   b9bc2:	6831      	ldr	r1, [r6, #0]
   b9bc4:	6820      	ldr	r0, [r4, #0]
   b9bc6:	462a      	mov	r2, r5
   b9bc8:	f7ff ffca 	bl	b9b60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b9bcc:	6823      	ldr	r3, [r4, #0]
   b9bce:	6065      	str	r5, [r4, #4]
   b9bd0:	2200      	movs	r2, #0
   b9bd2:	555a      	strb	r2, [r3, r5]
   b9bd4:	b003      	add	sp, #12
   b9bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9bd8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b9bd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9bda:	2400      	movs	r4, #0
   b9bdc:	2310      	movs	r3, #16
   b9bde:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b9be2:	6803      	ldr	r3, [r0, #0]
   b9be4:	4615      	mov	r5, r2
   b9be6:	699e      	ldr	r6, [r3, #24]
   b9be8:	6812      	ldr	r2, [r2, #0]
   b9bea:	466b      	mov	r3, sp
   b9bec:	e9cd 4400 	strd	r4, r4, [sp]
   b9bf0:	47b0      	blx	r6
   b9bf2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b9bf6:	f003 0306 	and.w	r3, r3, #6
   b9bfa:	2b06      	cmp	r3, #6
   b9bfc:	bf03      	ittte	eq
   b9bfe:	9b00      	ldreq	r3, [sp, #0]
   b9c00:	602b      	streq	r3, [r5, #0]
   b9c02:	2001      	moveq	r0, #1
   b9c04:	4620      	movne	r0, r4
   b9c06:	b004      	add	sp, #16
   b9c08:	bd70      	pop	{r4, r5, r6, pc}

000b9c0a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b9c0a:	9800      	ldr	r0, [sp, #0]
   b9c0c:	4290      	cmp	r0, r2
   b9c0e:	bf14      	ite	ne
   b9c10:	2001      	movne	r0, #1
   b9c12:	2006      	moveq	r0, #6
   b9c14:	4770      	bx	lr
	...

000b9c18 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b9c18:	b510      	push	{r4, lr}
   b9c1a:	4b03      	ldr	r3, [pc, #12]	; (b9c28 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b9c1c:	6003      	str	r3, [r0, #0]
   b9c1e:	4604      	mov	r4, r0
   b9c20:	f000 f8cd 	bl	b9dbe <_ZNSt9type_infoD1Ev>
   b9c24:	4620      	mov	r0, r4
   b9c26:	bd10      	pop	{r4, pc}
   b9c28:	000bd4ec 	.word	0x000bd4ec

000b9c2c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b9c2c:	b510      	push	{r4, lr}
   b9c2e:	4604      	mov	r4, r0
   b9c30:	f7ff fff2 	bl	b9c18 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9c34:	4620      	mov	r0, r4
   b9c36:	2108      	movs	r1, #8
   b9c38:	f7fa fa33 	bl	b40a2 <_ZdlPvj>
   b9c3c:	4620      	mov	r0, r4
   b9c3e:	bd10      	pop	{r4, pc}

000b9c40 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9c44:	461f      	mov	r7, r3
   b9c46:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b9c4a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b9c4e:	4598      	cmp	r8, r3
   b9c50:	4606      	mov	r6, r0
   b9c52:	4615      	mov	r5, r2
   b9c54:	d107      	bne.n	b9c66 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9c56:	9907      	ldr	r1, [sp, #28]
   b9c58:	f000 f8b4 	bl	b9dc4 <_ZNKSt9type_infoeqERKS_>
   b9c5c:	b118      	cbz	r0, b9c66 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9c5e:	7165      	strb	r5, [r4, #5]
   b9c60:	2000      	movs	r0, #0
   b9c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9c66:	4639      	mov	r1, r7
   b9c68:	4630      	mov	r0, r6
   b9c6a:	f000 f8ab 	bl	b9dc4 <_ZNKSt9type_infoeqERKS_>
   b9c6e:	2800      	cmp	r0, #0
   b9c70:	d0f6      	beq.n	b9c60 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b9c72:	2301      	movs	r3, #1
   b9c74:	f8c4 8000 	str.w	r8, [r4]
   b9c78:	7125      	strb	r5, [r4, #4]
   b9c7a:	71a3      	strb	r3, [r4, #6]
   b9c7c:	e7f0      	b.n	b9c60 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9c7e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9c7e:	b538      	push	{r3, r4, r5, lr}
   b9c80:	4615      	mov	r5, r2
   b9c82:	461c      	mov	r4, r3
   b9c84:	f000 f89e 	bl	b9dc4 <_ZNKSt9type_infoeqERKS_>
   b9c88:	b120      	cbz	r0, b9c94 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9c8a:	2308      	movs	r3, #8
   b9c8c:	60e3      	str	r3, [r4, #12]
   b9c8e:	2306      	movs	r3, #6
   b9c90:	6025      	str	r5, [r4, #0]
   b9c92:	7123      	strb	r3, [r4, #4]
   b9c94:	bd38      	pop	{r3, r4, r5, pc}

000b9c96 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b9c96:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9c98:	4605      	mov	r5, r0
   b9c9a:	460c      	mov	r4, r1
   b9c9c:	9201      	str	r2, [sp, #4]
   b9c9e:	461e      	mov	r6, r3
   b9ca0:	f000 f890 	bl	b9dc4 <_ZNKSt9type_infoeqERKS_>
   b9ca4:	b950      	cbnz	r0, b9cbc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9ca6:	2e03      	cmp	r6, #3
   b9ca8:	d808      	bhi.n	b9cbc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9caa:	6823      	ldr	r3, [r4, #0]
   b9cac:	9a01      	ldr	r2, [sp, #4]
   b9cae:	695b      	ldr	r3, [r3, #20]
   b9cb0:	4629      	mov	r1, r5
   b9cb2:	4620      	mov	r0, r4
   b9cb4:	b002      	add	sp, #8
   b9cb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9cba:	4718      	bx	r3
   b9cbc:	b002      	add	sp, #8
   b9cbe:	bd70      	pop	{r4, r5, r6, pc}

000b9cc0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9cc0:	b510      	push	{r4, lr}
   b9cc2:	4b03      	ldr	r3, [pc, #12]	; (b9cd0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b9cc4:	6003      	str	r3, [r0, #0]
   b9cc6:	4604      	mov	r4, r0
   b9cc8:	f7ff ffa6 	bl	b9c18 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9ccc:	4620      	mov	r0, r4
   b9cce:	bd10      	pop	{r4, pc}
   b9cd0:	000bd54c 	.word	0x000bd54c

000b9cd4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b9cd4:	b510      	push	{r4, lr}
   b9cd6:	4604      	mov	r4, r0
   b9cd8:	f7ff fff2 	bl	b9cc0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9cdc:	4620      	mov	r0, r4
   b9cde:	210c      	movs	r1, #12
   b9ce0:	f7fa f9df 	bl	b40a2 <_ZdlPvj>
   b9ce4:	4620      	mov	r0, r4
   b9ce6:	bd10      	pop	{r4, pc}

000b9ce8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b9ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9cea:	9f08      	ldr	r7, [sp, #32]
   b9cec:	4297      	cmp	r7, r2
   b9cee:	4605      	mov	r5, r0
   b9cf0:	460e      	mov	r6, r1
   b9cf2:	4614      	mov	r4, r2
   b9cf4:	d00a      	beq.n	b9d0c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b9cf6:	68a8      	ldr	r0, [r5, #8]
   b9cf8:	6802      	ldr	r2, [r0, #0]
   b9cfa:	9708      	str	r7, [sp, #32]
   b9cfc:	6a15      	ldr	r5, [r2, #32]
   b9cfe:	4631      	mov	r1, r6
   b9d00:	4622      	mov	r2, r4
   b9d02:	46ac      	mov	ip, r5
   b9d04:	b003      	add	sp, #12
   b9d06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9d0a:	4760      	bx	ip
   b9d0c:	4619      	mov	r1, r3
   b9d0e:	9301      	str	r3, [sp, #4]
   b9d10:	f000 f858 	bl	b9dc4 <_ZNKSt9type_infoeqERKS_>
   b9d14:	9b01      	ldr	r3, [sp, #4]
   b9d16:	2800      	cmp	r0, #0
   b9d18:	d0ed      	beq.n	b9cf6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b9d1a:	2006      	movs	r0, #6
   b9d1c:	b003      	add	sp, #12
   b9d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9d20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b9d20:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9d24:	460d      	mov	r5, r1
   b9d26:	4619      	mov	r1, r3
   b9d28:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b9d2c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b9d30:	4681      	mov	r9, r0
   b9d32:	4617      	mov	r7, r2
   b9d34:	4698      	mov	r8, r3
   b9d36:	f000 f845 	bl	b9dc4 <_ZNKSt9type_infoeqERKS_>
   b9d3a:	b190      	cbz	r0, b9d62 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9d3c:	2d00      	cmp	r5, #0
   b9d3e:	6034      	str	r4, [r6, #0]
   b9d40:	7137      	strb	r7, [r6, #4]
   b9d42:	db09      	blt.n	b9d58 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9d44:	1961      	adds	r1, r4, r5
   b9d46:	458a      	cmp	sl, r1
   b9d48:	bf0c      	ite	eq
   b9d4a:	2106      	moveq	r1, #6
   b9d4c:	2101      	movne	r1, #1
   b9d4e:	71b1      	strb	r1, [r6, #6]
   b9d50:	2000      	movs	r0, #0
   b9d52:	b001      	add	sp, #4
   b9d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9d58:	3502      	adds	r5, #2
   b9d5a:	d1f9      	bne.n	b9d50 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9d5c:	2301      	movs	r3, #1
   b9d5e:	71b3      	strb	r3, [r6, #6]
   b9d60:	e7f6      	b.n	b9d50 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9d62:	4554      	cmp	r4, sl
   b9d64:	d106      	bne.n	b9d74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9d66:	4659      	mov	r1, fp
   b9d68:	4648      	mov	r0, r9
   b9d6a:	f000 f82b 	bl	b9dc4 <_ZNKSt9type_infoeqERKS_>
   b9d6e:	b108      	cbz	r0, b9d74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9d70:	7177      	strb	r7, [r6, #5]
   b9d72:	e7ed      	b.n	b9d50 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9d74:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9d78:	6803      	ldr	r3, [r0, #0]
   b9d7a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b9d7e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b9d82:	69dc      	ldr	r4, [r3, #28]
   b9d84:	463a      	mov	r2, r7
   b9d86:	4643      	mov	r3, r8
   b9d88:	4629      	mov	r1, r5
   b9d8a:	46a4      	mov	ip, r4
   b9d8c:	b001      	add	sp, #4
   b9d8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9d92:	4760      	bx	ip

000b9d94 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b9d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9d98:	4607      	mov	r7, r0
   b9d9a:	460c      	mov	r4, r1
   b9d9c:	4615      	mov	r5, r2
   b9d9e:	461e      	mov	r6, r3
   b9da0:	f7ff ff6d 	bl	b9c7e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b9da4:	b948      	cbnz	r0, b9dba <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b9da6:	68b8      	ldr	r0, [r7, #8]
   b9da8:	6803      	ldr	r3, [r0, #0]
   b9daa:	699f      	ldr	r7, [r3, #24]
   b9dac:	462a      	mov	r2, r5
   b9dae:	4633      	mov	r3, r6
   b9db0:	4621      	mov	r1, r4
   b9db2:	46bc      	mov	ip, r7
   b9db4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9db8:	4760      	bx	ip
   b9dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9dbe <_ZNSt9type_infoD1Ev>:
   b9dbe:	4770      	bx	lr

000b9dc0 <_ZNKSt9type_info14__is_pointer_pEv>:
   b9dc0:	2000      	movs	r0, #0
   b9dc2:	4770      	bx	lr

000b9dc4 <_ZNKSt9type_infoeqERKS_>:
   b9dc4:	4281      	cmp	r1, r0
   b9dc6:	b508      	push	{r3, lr}
   b9dc8:	d00e      	beq.n	b9de8 <_ZNKSt9type_infoeqERKS_+0x24>
   b9dca:	6840      	ldr	r0, [r0, #4]
   b9dcc:	7803      	ldrb	r3, [r0, #0]
   b9dce:	2b2a      	cmp	r3, #42	; 0x2a
   b9dd0:	d00c      	beq.n	b9dec <_ZNKSt9type_infoeqERKS_+0x28>
   b9dd2:	6849      	ldr	r1, [r1, #4]
   b9dd4:	780b      	ldrb	r3, [r1, #0]
   b9dd6:	2b2a      	cmp	r3, #42	; 0x2a
   b9dd8:	bf08      	it	eq
   b9dda:	3101      	addeq	r1, #1
   b9ddc:	f000 fece 	bl	bab7c <strcmp>
   b9de0:	fab0 f080 	clz	r0, r0
   b9de4:	0940      	lsrs	r0, r0, #5
   b9de6:	bd08      	pop	{r3, pc}
   b9de8:	2001      	movs	r0, #1
   b9dea:	e7fc      	b.n	b9de6 <_ZNKSt9type_infoeqERKS_+0x22>
   b9dec:	2000      	movs	r0, #0
   b9dee:	e7fa      	b.n	b9de6 <_ZNKSt9type_infoeqERKS_+0x22>

000b9df0 <floorf>:
   b9df0:	ee10 2a10 	vmov	r2, s0
   b9df4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   b9df8:	3b7f      	subs	r3, #127	; 0x7f
   b9dfa:	2b16      	cmp	r3, #22
   b9dfc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   b9e00:	dc28      	bgt.n	b9e54 <floorf+0x64>
   b9e02:	2b00      	cmp	r3, #0
   b9e04:	db18      	blt.n	b9e38 <floorf+0x48>
   b9e06:	491a      	ldr	r1, [pc, #104]	; (b9e70 <floorf+0x80>)
   b9e08:	4119      	asrs	r1, r3
   b9e0a:	420a      	tst	r2, r1
   b9e0c:	d021      	beq.n	b9e52 <floorf+0x62>
   b9e0e:	eddf 7a19 	vldr	s15, [pc, #100]	; b9e74 <floorf+0x84>
   b9e12:	ee70 7a27 	vadd.f32	s15, s0, s15
   b9e16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b9e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9e1e:	dd18      	ble.n	b9e52 <floorf+0x62>
   b9e20:	2a00      	cmp	r2, #0
   b9e22:	da04      	bge.n	b9e2e <floorf+0x3e>
   b9e24:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   b9e28:	fa40 f303 	asr.w	r3, r0, r3
   b9e2c:	441a      	add	r2, r3
   b9e2e:	ea22 0301 	bic.w	r3, r2, r1
   b9e32:	ee00 3a10 	vmov	s0, r3
   b9e36:	4770      	bx	lr
   b9e38:	eddf 7a0e 	vldr	s15, [pc, #56]	; b9e74 <floorf+0x84>
   b9e3c:	ee70 7a27 	vadd.f32	s15, s0, s15
   b9e40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b9e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b9e48:	dd03      	ble.n	b9e52 <floorf+0x62>
   b9e4a:	2a00      	cmp	r2, #0
   b9e4c:	db08      	blt.n	b9e60 <floorf+0x70>
   b9e4e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; b9e78 <floorf+0x88>
   b9e52:	4770      	bx	lr
   b9e54:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   b9e58:	d3fb      	bcc.n	b9e52 <floorf+0x62>
   b9e5a:	ee30 0a00 	vadd.f32	s0, s0, s0
   b9e5e:	4770      	bx	lr
   b9e60:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b9e64:	2900      	cmp	r1, #0
   b9e66:	bf18      	it	ne
   b9e68:	eeb0 0a67 	vmovne.f32	s0, s15
   b9e6c:	4770      	bx	lr
   b9e6e:	bf00      	nop
   b9e70:	007fffff 	.word	0x007fffff
   b9e74:	7149f2ca 	.word	0x7149f2ca
   b9e78:	00000000 	.word	0x00000000

000b9e7c <sqrt>:
   b9e7c:	b538      	push	{r3, r4, r5, lr}
   b9e7e:	ed2d 8b02 	vpush	{d8}
   b9e82:	ec55 4b10 	vmov	r4, r5, d0
   b9e86:	f000 f833 	bl	b9ef0 <__ieee754_sqrt>
   b9e8a:	4b18      	ldr	r3, [pc, #96]	; (b9eec <sqrt+0x70>)
   b9e8c:	eeb0 8a40 	vmov.f32	s16, s0
   b9e90:	eef0 8a60 	vmov.f32	s17, s1
   b9e94:	f993 3000 	ldrsb.w	r3, [r3]
   b9e98:	3301      	adds	r3, #1
   b9e9a:	d00d      	beq.n	b9eb8 <sqrt+0x3c>
   b9e9c:	4622      	mov	r2, r4
   b9e9e:	462b      	mov	r3, r5
   b9ea0:	4620      	mov	r0, r4
   b9ea2:	4629      	mov	r1, r5
   b9ea4:	f000 fd46 	bl	ba934 <__aeabi_dcmpun>
   b9ea8:	b930      	cbnz	r0, b9eb8 <sqrt+0x3c>
   b9eaa:	2200      	movs	r2, #0
   b9eac:	2300      	movs	r3, #0
   b9eae:	4620      	mov	r0, r4
   b9eb0:	4629      	mov	r1, r5
   b9eb2:	f000 fd17 	bl	ba8e4 <__aeabi_dcmplt>
   b9eb6:	b930      	cbnz	r0, b9ec6 <sqrt+0x4a>
   b9eb8:	eeb0 0a48 	vmov.f32	s0, s16
   b9ebc:	eef0 0a68 	vmov.f32	s1, s17
   b9ec0:	ecbd 8b02 	vpop	{d8}
   b9ec4:	bd38      	pop	{r3, r4, r5, pc}
   b9ec6:	f7fd fa4d 	bl	b7364 <__errno>
   b9eca:	2200      	movs	r2, #0
   b9ecc:	2300      	movs	r3, #0
   b9ece:	2121      	movs	r1, #33	; 0x21
   b9ed0:	6001      	str	r1, [r0, #0]
   b9ed2:	4610      	mov	r0, r2
   b9ed4:	4619      	mov	r1, r3
   b9ed6:	f000 fbbd 	bl	ba654 <__aeabi_ddiv>
   b9eda:	ec41 0b18 	vmov	d8, r0, r1
   b9ede:	eeb0 0a48 	vmov.f32	s0, s16
   b9ee2:	eef0 0a68 	vmov.f32	s1, s17
   b9ee6:	ecbd 8b02 	vpop	{d8}
   b9eea:	bd38      	pop	{r3, r4, r5, pc}
   b9eec:	200320b0 	.word	0x200320b0

000b9ef0 <__ieee754_sqrt>:
   b9ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9ef4:	4a63      	ldr	r2, [pc, #396]	; (ba084 <__ieee754_sqrt+0x194>)
   b9ef6:	ec55 4b10 	vmov	r4, r5, d0
   b9efa:	43aa      	bics	r2, r5
   b9efc:	f000 809f 	beq.w	ba03e <__ieee754_sqrt+0x14e>
   b9f00:	2d00      	cmp	r5, #0
   b9f02:	ee10 ca10 	vmov	ip, s0
   b9f06:	462b      	mov	r3, r5
   b9f08:	dd54      	ble.n	b9fb4 <__ieee754_sqrt+0xc4>
   b9f0a:	1529      	asrs	r1, r5, #20
   b9f0c:	d063      	beq.n	b9fd6 <__ieee754_sqrt+0xe6>
   b9f0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b9f12:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b9f16:	07c9      	lsls	r1, r1, #31
   b9f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9f1c:	d404      	bmi.n	b9f28 <__ieee754_sqrt+0x38>
   b9f1e:	005b      	lsls	r3, r3, #1
   b9f20:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b9f24:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b9f28:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b9f2c:	2600      	movs	r6, #0
   b9f2e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b9f32:	107f      	asrs	r7, r7, #1
   b9f34:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b9f38:	f04f 0e16 	mov.w	lr, #22
   b9f3c:	4634      	mov	r4, r6
   b9f3e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b9f42:	18a1      	adds	r1, r4, r2
   b9f44:	4299      	cmp	r1, r3
   b9f46:	dc02      	bgt.n	b9f4e <__ieee754_sqrt+0x5e>
   b9f48:	1a5b      	subs	r3, r3, r1
   b9f4a:	188c      	adds	r4, r1, r2
   b9f4c:	4416      	add	r6, r2
   b9f4e:	005b      	lsls	r3, r3, #1
   b9f50:	f1be 0e01 	subs.w	lr, lr, #1
   b9f54:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b9f58:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b9f5c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b9f60:	d1ef      	bne.n	b9f42 <__ieee754_sqrt+0x52>
   b9f62:	4675      	mov	r5, lr
   b9f64:	2020      	movs	r0, #32
   b9f66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b9f6a:	e00a      	b.n	b9f82 <__ieee754_sqrt+0x92>
   b9f6c:	d044      	beq.n	b9ff8 <__ieee754_sqrt+0x108>
   b9f6e:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b9f72:	3801      	subs	r0, #1
   b9f74:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b9f78:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b9f7c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b9f80:	d043      	beq.n	ba00a <__ieee754_sqrt+0x11a>
   b9f82:	42a3      	cmp	r3, r4
   b9f84:	eb02 010e 	add.w	r1, r2, lr
   b9f88:	ddf0      	ble.n	b9f6c <__ieee754_sqrt+0x7c>
   b9f8a:	2900      	cmp	r1, #0
   b9f8c:	eb01 0e02 	add.w	lr, r1, r2
   b9f90:	db0a      	blt.n	b9fa8 <__ieee754_sqrt+0xb8>
   b9f92:	46a0      	mov	r8, r4
   b9f94:	1b1b      	subs	r3, r3, r4
   b9f96:	4561      	cmp	r1, ip
   b9f98:	bf88      	it	hi
   b9f9a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   b9f9e:	ebac 0c01 	sub.w	ip, ip, r1
   b9fa2:	4415      	add	r5, r2
   b9fa4:	4644      	mov	r4, r8
   b9fa6:	e7e2      	b.n	b9f6e <__ieee754_sqrt+0x7e>
   b9fa8:	f1be 0f00 	cmp.w	lr, #0
   b9fac:	dbf1      	blt.n	b9f92 <__ieee754_sqrt+0xa2>
   b9fae:	f104 0801 	add.w	r8, r4, #1
   b9fb2:	e7ef      	b.n	b9f94 <__ieee754_sqrt+0xa4>
   b9fb4:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b9fb8:	4322      	orrs	r2, r4
   b9fba:	d038      	beq.n	ba02e <__ieee754_sqrt+0x13e>
   b9fbc:	2d00      	cmp	r5, #0
   b9fbe:	d14e      	bne.n	ba05e <__ieee754_sqrt+0x16e>
   b9fc0:	4629      	mov	r1, r5
   b9fc2:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b9fc6:	3915      	subs	r1, #21
   b9fc8:	4613      	mov	r3, r2
   b9fca:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b9fce:	2a00      	cmp	r2, #0
   b9fd0:	d0f7      	beq.n	b9fc2 <__ieee754_sqrt+0xd2>
   b9fd2:	02d6      	lsls	r6, r2, #11
   b9fd4:	d450      	bmi.n	ba078 <__ieee754_sqrt+0x188>
   b9fd6:	2000      	movs	r0, #0
   b9fd8:	005b      	lsls	r3, r3, #1
   b9fda:	02dd      	lsls	r5, r3, #11
   b9fdc:	4604      	mov	r4, r0
   b9fde:	f100 0001 	add.w	r0, r0, #1
   b9fe2:	d5f9      	bpl.n	b9fd8 <__ieee754_sqrt+0xe8>
   b9fe4:	461a      	mov	r2, r3
   b9fe6:	4663      	mov	r3, ip
   b9fe8:	fa0c fc00 	lsl.w	ip, ip, r0
   b9fec:	f1c0 0020 	rsb	r0, r0, #32
   b9ff0:	40c3      	lsrs	r3, r0
   b9ff2:	1b09      	subs	r1, r1, r4
   b9ff4:	4313      	orrs	r3, r2
   b9ff6:	e78a      	b.n	b9f0e <__ieee754_sqrt+0x1e>
   b9ff8:	4561      	cmp	r1, ip
   b9ffa:	d8b8      	bhi.n	b9f6e <__ieee754_sqrt+0x7e>
   b9ffc:	2900      	cmp	r1, #0
   b9ffe:	eb01 0e02 	add.w	lr, r1, r2
   ba002:	dbd1      	blt.n	b9fa8 <__ieee754_sqrt+0xb8>
   ba004:	4698      	mov	r8, r3
   ba006:	2300      	movs	r3, #0
   ba008:	e7c9      	b.n	b9f9e <__ieee754_sqrt+0xae>
   ba00a:	ea53 030c 	orrs.w	r3, r3, ip
   ba00e:	d110      	bne.n	ba032 <__ieee754_sqrt+0x142>
   ba010:	0868      	lsrs	r0, r5, #1
   ba012:	1071      	asrs	r1, r6, #1
   ba014:	07f3      	lsls	r3, r6, #31
   ba016:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   ba01a:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   ba01e:	bf48      	it	mi
   ba020:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   ba024:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   ba028:	4602      	mov	r2, r0
   ba02a:	ec43 2b10 	vmov	d0, r2, r3
   ba02e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba032:	1c6a      	adds	r2, r5, #1
   ba034:	bf16      	itet	ne
   ba036:	1c68      	addne	r0, r5, #1
   ba038:	3601      	addeq	r6, #1
   ba03a:	0840      	lsrne	r0, r0, #1
   ba03c:	e7e9      	b.n	ba012 <__ieee754_sqrt+0x122>
   ba03e:	ee10 2a10 	vmov	r2, s0
   ba042:	ee10 0a10 	vmov	r0, s0
   ba046:	462b      	mov	r3, r5
   ba048:	4629      	mov	r1, r5
   ba04a:	f000 f9d9 	bl	ba400 <__aeabi_dmul>
   ba04e:	4622      	mov	r2, r4
   ba050:	462b      	mov	r3, r5
   ba052:	f000 f81f 	bl	ba094 <__adddf3>
   ba056:	ec41 0b10 	vmov	d0, r0, r1
   ba05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba05e:	ee10 2a10 	vmov	r2, s0
   ba062:	4620      	mov	r0, r4
   ba064:	4629      	mov	r1, r5
   ba066:	f000 f813 	bl	ba090 <__aeabi_dsub>
   ba06a:	4602      	mov	r2, r0
   ba06c:	460b      	mov	r3, r1
   ba06e:	f000 faf1 	bl	ba654 <__aeabi_ddiv>
   ba072:	ec41 0b10 	vmov	d0, r0, r1
   ba076:	e7da      	b.n	ba02e <__ieee754_sqrt+0x13e>
   ba078:	4663      	mov	r3, ip
   ba07a:	2020      	movs	r0, #32
   ba07c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   ba080:	e7b6      	b.n	b9ff0 <__ieee754_sqrt+0x100>
   ba082:	bf00      	nop
   ba084:	7ff00000 	.word	0x7ff00000

000ba088 <__aeabi_drsub>:
   ba088:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   ba08c:	e002      	b.n	ba094 <__adddf3>
   ba08e:	bf00      	nop

000ba090 <__aeabi_dsub>:
   ba090:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000ba094 <__adddf3>:
   ba094:	b530      	push	{r4, r5, lr}
   ba096:	ea4f 0441 	mov.w	r4, r1, lsl #1
   ba09a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   ba09e:	ea94 0f05 	teq	r4, r5
   ba0a2:	bf08      	it	eq
   ba0a4:	ea90 0f02 	teqeq	r0, r2
   ba0a8:	bf1f      	itttt	ne
   ba0aa:	ea54 0c00 	orrsne.w	ip, r4, r0
   ba0ae:	ea55 0c02 	orrsne.w	ip, r5, r2
   ba0b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   ba0b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba0ba:	f000 80e2 	beq.w	ba282 <__adddf3+0x1ee>
   ba0be:	ea4f 5454 	mov.w	r4, r4, lsr #21
   ba0c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   ba0c6:	bfb8      	it	lt
   ba0c8:	426d      	neglt	r5, r5
   ba0ca:	dd0c      	ble.n	ba0e6 <__adddf3+0x52>
   ba0cc:	442c      	add	r4, r5
   ba0ce:	ea80 0202 	eor.w	r2, r0, r2
   ba0d2:	ea81 0303 	eor.w	r3, r1, r3
   ba0d6:	ea82 0000 	eor.w	r0, r2, r0
   ba0da:	ea83 0101 	eor.w	r1, r3, r1
   ba0de:	ea80 0202 	eor.w	r2, r0, r2
   ba0e2:	ea81 0303 	eor.w	r3, r1, r3
   ba0e6:	2d36      	cmp	r5, #54	; 0x36
   ba0e8:	bf88      	it	hi
   ba0ea:	bd30      	pophi	{r4, r5, pc}
   ba0ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   ba0f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba0f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   ba0f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   ba0fc:	d002      	beq.n	ba104 <__adddf3+0x70>
   ba0fe:	4240      	negs	r0, r0
   ba100:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba104:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   ba108:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba10c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   ba110:	d002      	beq.n	ba118 <__adddf3+0x84>
   ba112:	4252      	negs	r2, r2
   ba114:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   ba118:	ea94 0f05 	teq	r4, r5
   ba11c:	f000 80a7 	beq.w	ba26e <__adddf3+0x1da>
   ba120:	f1a4 0401 	sub.w	r4, r4, #1
   ba124:	f1d5 0e20 	rsbs	lr, r5, #32
   ba128:	db0d      	blt.n	ba146 <__adddf3+0xb2>
   ba12a:	fa02 fc0e 	lsl.w	ip, r2, lr
   ba12e:	fa22 f205 	lsr.w	r2, r2, r5
   ba132:	1880      	adds	r0, r0, r2
   ba134:	f141 0100 	adc.w	r1, r1, #0
   ba138:	fa03 f20e 	lsl.w	r2, r3, lr
   ba13c:	1880      	adds	r0, r0, r2
   ba13e:	fa43 f305 	asr.w	r3, r3, r5
   ba142:	4159      	adcs	r1, r3
   ba144:	e00e      	b.n	ba164 <__adddf3+0xd0>
   ba146:	f1a5 0520 	sub.w	r5, r5, #32
   ba14a:	f10e 0e20 	add.w	lr, lr, #32
   ba14e:	2a01      	cmp	r2, #1
   ba150:	fa03 fc0e 	lsl.w	ip, r3, lr
   ba154:	bf28      	it	cs
   ba156:	f04c 0c02 	orrcs.w	ip, ip, #2
   ba15a:	fa43 f305 	asr.w	r3, r3, r5
   ba15e:	18c0      	adds	r0, r0, r3
   ba160:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   ba164:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba168:	d507      	bpl.n	ba17a <__adddf3+0xe6>
   ba16a:	f04f 0e00 	mov.w	lr, #0
   ba16e:	f1dc 0c00 	rsbs	ip, ip, #0
   ba172:	eb7e 0000 	sbcs.w	r0, lr, r0
   ba176:	eb6e 0101 	sbc.w	r1, lr, r1
   ba17a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   ba17e:	d31b      	bcc.n	ba1b8 <__adddf3+0x124>
   ba180:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   ba184:	d30c      	bcc.n	ba1a0 <__adddf3+0x10c>
   ba186:	0849      	lsrs	r1, r1, #1
   ba188:	ea5f 0030 	movs.w	r0, r0, rrx
   ba18c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   ba190:	f104 0401 	add.w	r4, r4, #1
   ba194:	ea4f 5244 	mov.w	r2, r4, lsl #21
   ba198:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   ba19c:	f080 809a 	bcs.w	ba2d4 <__adddf3+0x240>
   ba1a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   ba1a4:	bf08      	it	eq
   ba1a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba1aa:	f150 0000 	adcs.w	r0, r0, #0
   ba1ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba1b2:	ea41 0105 	orr.w	r1, r1, r5
   ba1b6:	bd30      	pop	{r4, r5, pc}
   ba1b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   ba1bc:	4140      	adcs	r0, r0
   ba1be:	eb41 0101 	adc.w	r1, r1, r1
   ba1c2:	3c01      	subs	r4, #1
   ba1c4:	bf28      	it	cs
   ba1c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   ba1ca:	d2e9      	bcs.n	ba1a0 <__adddf3+0x10c>
   ba1cc:	f091 0f00 	teq	r1, #0
   ba1d0:	bf04      	itt	eq
   ba1d2:	4601      	moveq	r1, r0
   ba1d4:	2000      	moveq	r0, #0
   ba1d6:	fab1 f381 	clz	r3, r1
   ba1da:	bf08      	it	eq
   ba1dc:	3320      	addeq	r3, #32
   ba1de:	f1a3 030b 	sub.w	r3, r3, #11
   ba1e2:	f1b3 0220 	subs.w	r2, r3, #32
   ba1e6:	da0c      	bge.n	ba202 <__adddf3+0x16e>
   ba1e8:	320c      	adds	r2, #12
   ba1ea:	dd08      	ble.n	ba1fe <__adddf3+0x16a>
   ba1ec:	f102 0c14 	add.w	ip, r2, #20
   ba1f0:	f1c2 020c 	rsb	r2, r2, #12
   ba1f4:	fa01 f00c 	lsl.w	r0, r1, ip
   ba1f8:	fa21 f102 	lsr.w	r1, r1, r2
   ba1fc:	e00c      	b.n	ba218 <__adddf3+0x184>
   ba1fe:	f102 0214 	add.w	r2, r2, #20
   ba202:	bfd8      	it	le
   ba204:	f1c2 0c20 	rsble	ip, r2, #32
   ba208:	fa01 f102 	lsl.w	r1, r1, r2
   ba20c:	fa20 fc0c 	lsr.w	ip, r0, ip
   ba210:	bfdc      	itt	le
   ba212:	ea41 010c 	orrle.w	r1, r1, ip
   ba216:	4090      	lslle	r0, r2
   ba218:	1ae4      	subs	r4, r4, r3
   ba21a:	bfa2      	ittt	ge
   ba21c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   ba220:	4329      	orrge	r1, r5
   ba222:	bd30      	popge	{r4, r5, pc}
   ba224:	ea6f 0404 	mvn.w	r4, r4
   ba228:	3c1f      	subs	r4, #31
   ba22a:	da1c      	bge.n	ba266 <__adddf3+0x1d2>
   ba22c:	340c      	adds	r4, #12
   ba22e:	dc0e      	bgt.n	ba24e <__adddf3+0x1ba>
   ba230:	f104 0414 	add.w	r4, r4, #20
   ba234:	f1c4 0220 	rsb	r2, r4, #32
   ba238:	fa20 f004 	lsr.w	r0, r0, r4
   ba23c:	fa01 f302 	lsl.w	r3, r1, r2
   ba240:	ea40 0003 	orr.w	r0, r0, r3
   ba244:	fa21 f304 	lsr.w	r3, r1, r4
   ba248:	ea45 0103 	orr.w	r1, r5, r3
   ba24c:	bd30      	pop	{r4, r5, pc}
   ba24e:	f1c4 040c 	rsb	r4, r4, #12
   ba252:	f1c4 0220 	rsb	r2, r4, #32
   ba256:	fa20 f002 	lsr.w	r0, r0, r2
   ba25a:	fa01 f304 	lsl.w	r3, r1, r4
   ba25e:	ea40 0003 	orr.w	r0, r0, r3
   ba262:	4629      	mov	r1, r5
   ba264:	bd30      	pop	{r4, r5, pc}
   ba266:	fa21 f004 	lsr.w	r0, r1, r4
   ba26a:	4629      	mov	r1, r5
   ba26c:	bd30      	pop	{r4, r5, pc}
   ba26e:	f094 0f00 	teq	r4, #0
   ba272:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   ba276:	bf06      	itte	eq
   ba278:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   ba27c:	3401      	addeq	r4, #1
   ba27e:	3d01      	subne	r5, #1
   ba280:	e74e      	b.n	ba120 <__adddf3+0x8c>
   ba282:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba286:	bf18      	it	ne
   ba288:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba28c:	d029      	beq.n	ba2e2 <__adddf3+0x24e>
   ba28e:	ea94 0f05 	teq	r4, r5
   ba292:	bf08      	it	eq
   ba294:	ea90 0f02 	teqeq	r0, r2
   ba298:	d005      	beq.n	ba2a6 <__adddf3+0x212>
   ba29a:	ea54 0c00 	orrs.w	ip, r4, r0
   ba29e:	bf04      	itt	eq
   ba2a0:	4619      	moveq	r1, r3
   ba2a2:	4610      	moveq	r0, r2
   ba2a4:	bd30      	pop	{r4, r5, pc}
   ba2a6:	ea91 0f03 	teq	r1, r3
   ba2aa:	bf1e      	ittt	ne
   ba2ac:	2100      	movne	r1, #0
   ba2ae:	2000      	movne	r0, #0
   ba2b0:	bd30      	popne	{r4, r5, pc}
   ba2b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   ba2b6:	d105      	bne.n	ba2c4 <__adddf3+0x230>
   ba2b8:	0040      	lsls	r0, r0, #1
   ba2ba:	4149      	adcs	r1, r1
   ba2bc:	bf28      	it	cs
   ba2be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   ba2c2:	bd30      	pop	{r4, r5, pc}
   ba2c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   ba2c8:	bf3c      	itt	cc
   ba2ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   ba2ce:	bd30      	popcc	{r4, r5, pc}
   ba2d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba2d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   ba2d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ba2dc:	f04f 0000 	mov.w	r0, #0
   ba2e0:	bd30      	pop	{r4, r5, pc}
   ba2e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba2e6:	bf1a      	itte	ne
   ba2e8:	4619      	movne	r1, r3
   ba2ea:	4610      	movne	r0, r2
   ba2ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   ba2f0:	bf1c      	itt	ne
   ba2f2:	460b      	movne	r3, r1
   ba2f4:	4602      	movne	r2, r0
   ba2f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba2fa:	bf06      	itte	eq
   ba2fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   ba300:	ea91 0f03 	teqeq	r1, r3
   ba304:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   ba308:	bd30      	pop	{r4, r5, pc}
   ba30a:	bf00      	nop

000ba30c <__aeabi_ui2d>:
   ba30c:	f090 0f00 	teq	r0, #0
   ba310:	bf04      	itt	eq
   ba312:	2100      	moveq	r1, #0
   ba314:	4770      	bxeq	lr
   ba316:	b530      	push	{r4, r5, lr}
   ba318:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba31c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba320:	f04f 0500 	mov.w	r5, #0
   ba324:	f04f 0100 	mov.w	r1, #0
   ba328:	e750      	b.n	ba1cc <__adddf3+0x138>
   ba32a:	bf00      	nop

000ba32c <__aeabi_i2d>:
   ba32c:	f090 0f00 	teq	r0, #0
   ba330:	bf04      	itt	eq
   ba332:	2100      	moveq	r1, #0
   ba334:	4770      	bxeq	lr
   ba336:	b530      	push	{r4, r5, lr}
   ba338:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba33c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba340:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   ba344:	bf48      	it	mi
   ba346:	4240      	negmi	r0, r0
   ba348:	f04f 0100 	mov.w	r1, #0
   ba34c:	e73e      	b.n	ba1cc <__adddf3+0x138>
   ba34e:	bf00      	nop

000ba350 <__aeabi_f2d>:
   ba350:	0042      	lsls	r2, r0, #1
   ba352:	ea4f 01e2 	mov.w	r1, r2, asr #3
   ba356:	ea4f 0131 	mov.w	r1, r1, rrx
   ba35a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   ba35e:	bf1f      	itttt	ne
   ba360:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   ba364:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   ba368:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   ba36c:	4770      	bxne	lr
   ba36e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   ba372:	bf08      	it	eq
   ba374:	4770      	bxeq	lr
   ba376:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   ba37a:	bf04      	itt	eq
   ba37c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   ba380:	4770      	bxeq	lr
   ba382:	b530      	push	{r4, r5, lr}
   ba384:	f44f 7460 	mov.w	r4, #896	; 0x380
   ba388:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba38c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ba390:	e71c      	b.n	ba1cc <__adddf3+0x138>
   ba392:	bf00      	nop

000ba394 <__aeabi_ul2d>:
   ba394:	ea50 0201 	orrs.w	r2, r0, r1
   ba398:	bf08      	it	eq
   ba39a:	4770      	bxeq	lr
   ba39c:	b530      	push	{r4, r5, lr}
   ba39e:	f04f 0500 	mov.w	r5, #0
   ba3a2:	e00a      	b.n	ba3ba <__aeabi_l2d+0x16>

000ba3a4 <__aeabi_l2d>:
   ba3a4:	ea50 0201 	orrs.w	r2, r0, r1
   ba3a8:	bf08      	it	eq
   ba3aa:	4770      	bxeq	lr
   ba3ac:	b530      	push	{r4, r5, lr}
   ba3ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   ba3b2:	d502      	bpl.n	ba3ba <__aeabi_l2d+0x16>
   ba3b4:	4240      	negs	r0, r0
   ba3b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba3ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba3be:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba3c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   ba3c6:	f43f aed8 	beq.w	ba17a <__adddf3+0xe6>
   ba3ca:	f04f 0203 	mov.w	r2, #3
   ba3ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ba3d2:	bf18      	it	ne
   ba3d4:	3203      	addne	r2, #3
   ba3d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ba3da:	bf18      	it	ne
   ba3dc:	3203      	addne	r2, #3
   ba3de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   ba3e2:	f1c2 0320 	rsb	r3, r2, #32
   ba3e6:	fa00 fc03 	lsl.w	ip, r0, r3
   ba3ea:	fa20 f002 	lsr.w	r0, r0, r2
   ba3ee:	fa01 fe03 	lsl.w	lr, r1, r3
   ba3f2:	ea40 000e 	orr.w	r0, r0, lr
   ba3f6:	fa21 f102 	lsr.w	r1, r1, r2
   ba3fa:	4414      	add	r4, r2
   ba3fc:	e6bd      	b.n	ba17a <__adddf3+0xe6>
   ba3fe:	bf00      	nop

000ba400 <__aeabi_dmul>:
   ba400:	b570      	push	{r4, r5, r6, lr}
   ba402:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ba406:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ba40a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ba40e:	bf1d      	ittte	ne
   ba410:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ba414:	ea94 0f0c 	teqne	r4, ip
   ba418:	ea95 0f0c 	teqne	r5, ip
   ba41c:	f000 f8de 	bleq	ba5dc <__aeabi_dmul+0x1dc>
   ba420:	442c      	add	r4, r5
   ba422:	ea81 0603 	eor.w	r6, r1, r3
   ba426:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   ba42a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   ba42e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   ba432:	bf18      	it	ne
   ba434:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   ba438:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba43c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba440:	d038      	beq.n	ba4b4 <__aeabi_dmul+0xb4>
   ba442:	fba0 ce02 	umull	ip, lr, r0, r2
   ba446:	f04f 0500 	mov.w	r5, #0
   ba44a:	fbe1 e502 	umlal	lr, r5, r1, r2
   ba44e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   ba452:	fbe0 e503 	umlal	lr, r5, r0, r3
   ba456:	f04f 0600 	mov.w	r6, #0
   ba45a:	fbe1 5603 	umlal	r5, r6, r1, r3
   ba45e:	f09c 0f00 	teq	ip, #0
   ba462:	bf18      	it	ne
   ba464:	f04e 0e01 	orrne.w	lr, lr, #1
   ba468:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   ba46c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   ba470:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   ba474:	d204      	bcs.n	ba480 <__aeabi_dmul+0x80>
   ba476:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   ba47a:	416d      	adcs	r5, r5
   ba47c:	eb46 0606 	adc.w	r6, r6, r6
   ba480:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   ba484:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   ba488:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   ba48c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   ba490:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   ba494:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ba498:	bf88      	it	hi
   ba49a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ba49e:	d81e      	bhi.n	ba4de <__aeabi_dmul+0xde>
   ba4a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   ba4a4:	bf08      	it	eq
   ba4a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   ba4aa:	f150 0000 	adcs.w	r0, r0, #0
   ba4ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba4b2:	bd70      	pop	{r4, r5, r6, pc}
   ba4b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   ba4b8:	ea46 0101 	orr.w	r1, r6, r1
   ba4bc:	ea40 0002 	orr.w	r0, r0, r2
   ba4c0:	ea81 0103 	eor.w	r1, r1, r3
   ba4c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   ba4c8:	bfc2      	ittt	gt
   ba4ca:	ebd4 050c 	rsbsgt	r5, r4, ip
   ba4ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ba4d2:	bd70      	popgt	{r4, r5, r6, pc}
   ba4d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba4d8:	f04f 0e00 	mov.w	lr, #0
   ba4dc:	3c01      	subs	r4, #1
   ba4de:	f300 80ab 	bgt.w	ba638 <__aeabi_dmul+0x238>
   ba4e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   ba4e6:	bfde      	ittt	le
   ba4e8:	2000      	movle	r0, #0
   ba4ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   ba4ee:	bd70      	pople	{r4, r5, r6, pc}
   ba4f0:	f1c4 0400 	rsb	r4, r4, #0
   ba4f4:	3c20      	subs	r4, #32
   ba4f6:	da35      	bge.n	ba564 <__aeabi_dmul+0x164>
   ba4f8:	340c      	adds	r4, #12
   ba4fa:	dc1b      	bgt.n	ba534 <__aeabi_dmul+0x134>
   ba4fc:	f104 0414 	add.w	r4, r4, #20
   ba500:	f1c4 0520 	rsb	r5, r4, #32
   ba504:	fa00 f305 	lsl.w	r3, r0, r5
   ba508:	fa20 f004 	lsr.w	r0, r0, r4
   ba50c:	fa01 f205 	lsl.w	r2, r1, r5
   ba510:	ea40 0002 	orr.w	r0, r0, r2
   ba514:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   ba518:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ba51c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ba520:	fa21 f604 	lsr.w	r6, r1, r4
   ba524:	eb42 0106 	adc.w	r1, r2, r6
   ba528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba52c:	bf08      	it	eq
   ba52e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba532:	bd70      	pop	{r4, r5, r6, pc}
   ba534:	f1c4 040c 	rsb	r4, r4, #12
   ba538:	f1c4 0520 	rsb	r5, r4, #32
   ba53c:	fa00 f304 	lsl.w	r3, r0, r4
   ba540:	fa20 f005 	lsr.w	r0, r0, r5
   ba544:	fa01 f204 	lsl.w	r2, r1, r4
   ba548:	ea40 0002 	orr.w	r0, r0, r2
   ba54c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba550:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ba554:	f141 0100 	adc.w	r1, r1, #0
   ba558:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba55c:	bf08      	it	eq
   ba55e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba562:	bd70      	pop	{r4, r5, r6, pc}
   ba564:	f1c4 0520 	rsb	r5, r4, #32
   ba568:	fa00 f205 	lsl.w	r2, r0, r5
   ba56c:	ea4e 0e02 	orr.w	lr, lr, r2
   ba570:	fa20 f304 	lsr.w	r3, r0, r4
   ba574:	fa01 f205 	lsl.w	r2, r1, r5
   ba578:	ea43 0302 	orr.w	r3, r3, r2
   ba57c:	fa21 f004 	lsr.w	r0, r1, r4
   ba580:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba584:	fa21 f204 	lsr.w	r2, r1, r4
   ba588:	ea20 0002 	bic.w	r0, r0, r2
   ba58c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   ba590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba594:	bf08      	it	eq
   ba596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba59a:	bd70      	pop	{r4, r5, r6, pc}
   ba59c:	f094 0f00 	teq	r4, #0
   ba5a0:	d10f      	bne.n	ba5c2 <__aeabi_dmul+0x1c2>
   ba5a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   ba5a6:	0040      	lsls	r0, r0, #1
   ba5a8:	eb41 0101 	adc.w	r1, r1, r1
   ba5ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba5b0:	bf08      	it	eq
   ba5b2:	3c01      	subeq	r4, #1
   ba5b4:	d0f7      	beq.n	ba5a6 <__aeabi_dmul+0x1a6>
   ba5b6:	ea41 0106 	orr.w	r1, r1, r6
   ba5ba:	f095 0f00 	teq	r5, #0
   ba5be:	bf18      	it	ne
   ba5c0:	4770      	bxne	lr
   ba5c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   ba5c6:	0052      	lsls	r2, r2, #1
   ba5c8:	eb43 0303 	adc.w	r3, r3, r3
   ba5cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   ba5d0:	bf08      	it	eq
   ba5d2:	3d01      	subeq	r5, #1
   ba5d4:	d0f7      	beq.n	ba5c6 <__aeabi_dmul+0x1c6>
   ba5d6:	ea43 0306 	orr.w	r3, r3, r6
   ba5da:	4770      	bx	lr
   ba5dc:	ea94 0f0c 	teq	r4, ip
   ba5e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ba5e4:	bf18      	it	ne
   ba5e6:	ea95 0f0c 	teqne	r5, ip
   ba5ea:	d00c      	beq.n	ba606 <__aeabi_dmul+0x206>
   ba5ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba5f0:	bf18      	it	ne
   ba5f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba5f6:	d1d1      	bne.n	ba59c <__aeabi_dmul+0x19c>
   ba5f8:	ea81 0103 	eor.w	r1, r1, r3
   ba5fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba600:	f04f 0000 	mov.w	r0, #0
   ba604:	bd70      	pop	{r4, r5, r6, pc}
   ba606:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba60a:	bf06      	itte	eq
   ba60c:	4610      	moveq	r0, r2
   ba60e:	4619      	moveq	r1, r3
   ba610:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba614:	d019      	beq.n	ba64a <__aeabi_dmul+0x24a>
   ba616:	ea94 0f0c 	teq	r4, ip
   ba61a:	d102      	bne.n	ba622 <__aeabi_dmul+0x222>
   ba61c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   ba620:	d113      	bne.n	ba64a <__aeabi_dmul+0x24a>
   ba622:	ea95 0f0c 	teq	r5, ip
   ba626:	d105      	bne.n	ba634 <__aeabi_dmul+0x234>
   ba628:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   ba62c:	bf1c      	itt	ne
   ba62e:	4610      	movne	r0, r2
   ba630:	4619      	movne	r1, r3
   ba632:	d10a      	bne.n	ba64a <__aeabi_dmul+0x24a>
   ba634:	ea81 0103 	eor.w	r1, r1, r3
   ba638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   ba63c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ba640:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ba644:	f04f 0000 	mov.w	r0, #0
   ba648:	bd70      	pop	{r4, r5, r6, pc}
   ba64a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   ba64e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   ba652:	bd70      	pop	{r4, r5, r6, pc}

000ba654 <__aeabi_ddiv>:
   ba654:	b570      	push	{r4, r5, r6, lr}
   ba656:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ba65a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ba65e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ba662:	bf1d      	ittte	ne
   ba664:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ba668:	ea94 0f0c 	teqne	r4, ip
   ba66c:	ea95 0f0c 	teqne	r5, ip
   ba670:	f000 f8a7 	bleq	ba7c2 <__aeabi_ddiv+0x16e>
   ba674:	eba4 0405 	sub.w	r4, r4, r5
   ba678:	ea81 0e03 	eor.w	lr, r1, r3
   ba67c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ba680:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba684:	f000 8088 	beq.w	ba798 <__aeabi_ddiv+0x144>
   ba688:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba68c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   ba690:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   ba694:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   ba698:	ea4f 2202 	mov.w	r2, r2, lsl #8
   ba69c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   ba6a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   ba6a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   ba6a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   ba6ac:	429d      	cmp	r5, r3
   ba6ae:	bf08      	it	eq
   ba6b0:	4296      	cmpeq	r6, r2
   ba6b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   ba6b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   ba6ba:	d202      	bcs.n	ba6c2 <__aeabi_ddiv+0x6e>
   ba6bc:	085b      	lsrs	r3, r3, #1
   ba6be:	ea4f 0232 	mov.w	r2, r2, rrx
   ba6c2:	1ab6      	subs	r6, r6, r2
   ba6c4:	eb65 0503 	sbc.w	r5, r5, r3
   ba6c8:	085b      	lsrs	r3, r3, #1
   ba6ca:	ea4f 0232 	mov.w	r2, r2, rrx
   ba6ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   ba6d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   ba6d6:	ebb6 0e02 	subs.w	lr, r6, r2
   ba6da:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba6de:	bf22      	ittt	cs
   ba6e0:	1ab6      	subcs	r6, r6, r2
   ba6e2:	4675      	movcs	r5, lr
   ba6e4:	ea40 000c 	orrcs.w	r0, r0, ip
   ba6e8:	085b      	lsrs	r3, r3, #1
   ba6ea:	ea4f 0232 	mov.w	r2, r2, rrx
   ba6ee:	ebb6 0e02 	subs.w	lr, r6, r2
   ba6f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba6f6:	bf22      	ittt	cs
   ba6f8:	1ab6      	subcs	r6, r6, r2
   ba6fa:	4675      	movcs	r5, lr
   ba6fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   ba700:	085b      	lsrs	r3, r3, #1
   ba702:	ea4f 0232 	mov.w	r2, r2, rrx
   ba706:	ebb6 0e02 	subs.w	lr, r6, r2
   ba70a:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba70e:	bf22      	ittt	cs
   ba710:	1ab6      	subcs	r6, r6, r2
   ba712:	4675      	movcs	r5, lr
   ba714:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   ba718:	085b      	lsrs	r3, r3, #1
   ba71a:	ea4f 0232 	mov.w	r2, r2, rrx
   ba71e:	ebb6 0e02 	subs.w	lr, r6, r2
   ba722:	eb75 0e03 	sbcs.w	lr, r5, r3
   ba726:	bf22      	ittt	cs
   ba728:	1ab6      	subcs	r6, r6, r2
   ba72a:	4675      	movcs	r5, lr
   ba72c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   ba730:	ea55 0e06 	orrs.w	lr, r5, r6
   ba734:	d018      	beq.n	ba768 <__aeabi_ddiv+0x114>
   ba736:	ea4f 1505 	mov.w	r5, r5, lsl #4
   ba73a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   ba73e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   ba742:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   ba746:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   ba74a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   ba74e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   ba752:	d1c0      	bne.n	ba6d6 <__aeabi_ddiv+0x82>
   ba754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba758:	d10b      	bne.n	ba772 <__aeabi_ddiv+0x11e>
   ba75a:	ea41 0100 	orr.w	r1, r1, r0
   ba75e:	f04f 0000 	mov.w	r0, #0
   ba762:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   ba766:	e7b6      	b.n	ba6d6 <__aeabi_ddiv+0x82>
   ba768:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   ba76c:	bf04      	itt	eq
   ba76e:	4301      	orreq	r1, r0
   ba770:	2000      	moveq	r0, #0
   ba772:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ba776:	bf88      	it	hi
   ba778:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ba77c:	f63f aeaf 	bhi.w	ba4de <__aeabi_dmul+0xde>
   ba780:	ebb5 0c03 	subs.w	ip, r5, r3
   ba784:	bf04      	itt	eq
   ba786:	ebb6 0c02 	subseq.w	ip, r6, r2
   ba78a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba78e:	f150 0000 	adcs.w	r0, r0, #0
   ba792:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba796:	bd70      	pop	{r4, r5, r6, pc}
   ba798:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   ba79c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   ba7a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   ba7a4:	bfc2      	ittt	gt
   ba7a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   ba7aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ba7ae:	bd70      	popgt	{r4, r5, r6, pc}
   ba7b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba7b4:	f04f 0e00 	mov.w	lr, #0
   ba7b8:	3c01      	subs	r4, #1
   ba7ba:	e690      	b.n	ba4de <__aeabi_dmul+0xde>
   ba7bc:	ea45 0e06 	orr.w	lr, r5, r6
   ba7c0:	e68d      	b.n	ba4de <__aeabi_dmul+0xde>
   ba7c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   ba7c6:	ea94 0f0c 	teq	r4, ip
   ba7ca:	bf08      	it	eq
   ba7cc:	ea95 0f0c 	teqeq	r5, ip
   ba7d0:	f43f af3b 	beq.w	ba64a <__aeabi_dmul+0x24a>
   ba7d4:	ea94 0f0c 	teq	r4, ip
   ba7d8:	d10a      	bne.n	ba7f0 <__aeabi_ddiv+0x19c>
   ba7da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba7de:	f47f af34 	bne.w	ba64a <__aeabi_dmul+0x24a>
   ba7e2:	ea95 0f0c 	teq	r5, ip
   ba7e6:	f47f af25 	bne.w	ba634 <__aeabi_dmul+0x234>
   ba7ea:	4610      	mov	r0, r2
   ba7ec:	4619      	mov	r1, r3
   ba7ee:	e72c      	b.n	ba64a <__aeabi_dmul+0x24a>
   ba7f0:	ea95 0f0c 	teq	r5, ip
   ba7f4:	d106      	bne.n	ba804 <__aeabi_ddiv+0x1b0>
   ba7f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ba7fa:	f43f aefd 	beq.w	ba5f8 <__aeabi_dmul+0x1f8>
   ba7fe:	4610      	mov	r0, r2
   ba800:	4619      	mov	r1, r3
   ba802:	e722      	b.n	ba64a <__aeabi_dmul+0x24a>
   ba804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba808:	bf18      	it	ne
   ba80a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba80e:	f47f aec5 	bne.w	ba59c <__aeabi_dmul+0x19c>
   ba812:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   ba816:	f47f af0d 	bne.w	ba634 <__aeabi_dmul+0x234>
   ba81a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   ba81e:	f47f aeeb 	bne.w	ba5f8 <__aeabi_dmul+0x1f8>
   ba822:	e712      	b.n	ba64a <__aeabi_dmul+0x24a>

000ba824 <__gedf2>:
   ba824:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   ba828:	e006      	b.n	ba838 <__cmpdf2+0x4>
   ba82a:	bf00      	nop

000ba82c <__ledf2>:
   ba82c:	f04f 0c01 	mov.w	ip, #1
   ba830:	e002      	b.n	ba838 <__cmpdf2+0x4>
   ba832:	bf00      	nop

000ba834 <__cmpdf2>:
   ba834:	f04f 0c01 	mov.w	ip, #1
   ba838:	f84d cd04 	str.w	ip, [sp, #-4]!
   ba83c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba840:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba844:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba848:	bf18      	it	ne
   ba84a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   ba84e:	d01b      	beq.n	ba888 <__cmpdf2+0x54>
   ba850:	b001      	add	sp, #4
   ba852:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   ba856:	bf0c      	ite	eq
   ba858:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   ba85c:	ea91 0f03 	teqne	r1, r3
   ba860:	bf02      	ittt	eq
   ba862:	ea90 0f02 	teqeq	r0, r2
   ba866:	2000      	moveq	r0, #0
   ba868:	4770      	bxeq	lr
   ba86a:	f110 0f00 	cmn.w	r0, #0
   ba86e:	ea91 0f03 	teq	r1, r3
   ba872:	bf58      	it	pl
   ba874:	4299      	cmppl	r1, r3
   ba876:	bf08      	it	eq
   ba878:	4290      	cmpeq	r0, r2
   ba87a:	bf2c      	ite	cs
   ba87c:	17d8      	asrcs	r0, r3, #31
   ba87e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   ba882:	f040 0001 	orr.w	r0, r0, #1
   ba886:	4770      	bx	lr
   ba888:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba88c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba890:	d102      	bne.n	ba898 <__cmpdf2+0x64>
   ba892:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   ba896:	d107      	bne.n	ba8a8 <__cmpdf2+0x74>
   ba898:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba89c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba8a0:	d1d6      	bne.n	ba850 <__cmpdf2+0x1c>
   ba8a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   ba8a6:	d0d3      	beq.n	ba850 <__cmpdf2+0x1c>
   ba8a8:	f85d 0b04 	ldr.w	r0, [sp], #4
   ba8ac:	4770      	bx	lr
   ba8ae:	bf00      	nop

000ba8b0 <__aeabi_cdrcmple>:
   ba8b0:	4684      	mov	ip, r0
   ba8b2:	4610      	mov	r0, r2
   ba8b4:	4662      	mov	r2, ip
   ba8b6:	468c      	mov	ip, r1
   ba8b8:	4619      	mov	r1, r3
   ba8ba:	4663      	mov	r3, ip
   ba8bc:	e000      	b.n	ba8c0 <__aeabi_cdcmpeq>
   ba8be:	bf00      	nop

000ba8c0 <__aeabi_cdcmpeq>:
   ba8c0:	b501      	push	{r0, lr}
   ba8c2:	f7ff ffb7 	bl	ba834 <__cmpdf2>
   ba8c6:	2800      	cmp	r0, #0
   ba8c8:	bf48      	it	mi
   ba8ca:	f110 0f00 	cmnmi.w	r0, #0
   ba8ce:	bd01      	pop	{r0, pc}

000ba8d0 <__aeabi_dcmpeq>:
   ba8d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba8d4:	f7ff fff4 	bl	ba8c0 <__aeabi_cdcmpeq>
   ba8d8:	bf0c      	ite	eq
   ba8da:	2001      	moveq	r0, #1
   ba8dc:	2000      	movne	r0, #0
   ba8de:	f85d fb08 	ldr.w	pc, [sp], #8
   ba8e2:	bf00      	nop

000ba8e4 <__aeabi_dcmplt>:
   ba8e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba8e8:	f7ff ffea 	bl	ba8c0 <__aeabi_cdcmpeq>
   ba8ec:	bf34      	ite	cc
   ba8ee:	2001      	movcc	r0, #1
   ba8f0:	2000      	movcs	r0, #0
   ba8f2:	f85d fb08 	ldr.w	pc, [sp], #8
   ba8f6:	bf00      	nop

000ba8f8 <__aeabi_dcmple>:
   ba8f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba8fc:	f7ff ffe0 	bl	ba8c0 <__aeabi_cdcmpeq>
   ba900:	bf94      	ite	ls
   ba902:	2001      	movls	r0, #1
   ba904:	2000      	movhi	r0, #0
   ba906:	f85d fb08 	ldr.w	pc, [sp], #8
   ba90a:	bf00      	nop

000ba90c <__aeabi_dcmpge>:
   ba90c:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba910:	f7ff ffce 	bl	ba8b0 <__aeabi_cdrcmple>
   ba914:	bf94      	ite	ls
   ba916:	2001      	movls	r0, #1
   ba918:	2000      	movhi	r0, #0
   ba91a:	f85d fb08 	ldr.w	pc, [sp], #8
   ba91e:	bf00      	nop

000ba920 <__aeabi_dcmpgt>:
   ba920:	f84d ed08 	str.w	lr, [sp, #-8]!
   ba924:	f7ff ffc4 	bl	ba8b0 <__aeabi_cdrcmple>
   ba928:	bf34      	ite	cc
   ba92a:	2001      	movcc	r0, #1
   ba92c:	2000      	movcs	r0, #0
   ba92e:	f85d fb08 	ldr.w	pc, [sp], #8
   ba932:	bf00      	nop

000ba934 <__aeabi_dcmpun>:
   ba934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   ba938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba93c:	d102      	bne.n	ba944 <__aeabi_dcmpun+0x10>
   ba93e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   ba942:	d10a      	bne.n	ba95a <__aeabi_dcmpun+0x26>
   ba944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   ba948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   ba94c:	d102      	bne.n	ba954 <__aeabi_dcmpun+0x20>
   ba94e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   ba952:	d102      	bne.n	ba95a <__aeabi_dcmpun+0x26>
   ba954:	f04f 0000 	mov.w	r0, #0
   ba958:	4770      	bx	lr
   ba95a:	f04f 0001 	mov.w	r0, #1
   ba95e:	4770      	bx	lr

000ba960 <__aeabi_d2uiz>:
   ba960:	004a      	lsls	r2, r1, #1
   ba962:	d211      	bcs.n	ba988 <__aeabi_d2uiz+0x28>
   ba964:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   ba968:	d211      	bcs.n	ba98e <__aeabi_d2uiz+0x2e>
   ba96a:	d50d      	bpl.n	ba988 <__aeabi_d2uiz+0x28>
   ba96c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   ba970:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   ba974:	d40e      	bmi.n	ba994 <__aeabi_d2uiz+0x34>
   ba976:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   ba97a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   ba97e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   ba982:	fa23 f002 	lsr.w	r0, r3, r2
   ba986:	4770      	bx	lr
   ba988:	f04f 0000 	mov.w	r0, #0
   ba98c:	4770      	bx	lr
   ba98e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   ba992:	d102      	bne.n	ba99a <__aeabi_d2uiz+0x3a>
   ba994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba998:	4770      	bx	lr
   ba99a:	f04f 0000 	mov.w	r0, #0
   ba99e:	4770      	bx	lr

000ba9a0 <__aeabi_d2f>:
   ba9a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   ba9a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   ba9a8:	bf24      	itt	cs
   ba9aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   ba9ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   ba9b2:	d90d      	bls.n	ba9d0 <__aeabi_d2f+0x30>
   ba9b4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   ba9b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   ba9bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   ba9c0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   ba9c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   ba9c8:	bf08      	it	eq
   ba9ca:	f020 0001 	biceq.w	r0, r0, #1
   ba9ce:	4770      	bx	lr
   ba9d0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   ba9d4:	d121      	bne.n	baa1a <__aeabi_d2f+0x7a>
   ba9d6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   ba9da:	bfbc      	itt	lt
   ba9dc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   ba9e0:	4770      	bxlt	lr
   ba9e2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba9e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   ba9ea:	f1c2 0218 	rsb	r2, r2, #24
   ba9ee:	f1c2 0c20 	rsb	ip, r2, #32
   ba9f2:	fa10 f30c 	lsls.w	r3, r0, ip
   ba9f6:	fa20 f002 	lsr.w	r0, r0, r2
   ba9fa:	bf18      	it	ne
   ba9fc:	f040 0001 	orrne.w	r0, r0, #1
   baa00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   baa04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   baa08:	fa03 fc0c 	lsl.w	ip, r3, ip
   baa0c:	ea40 000c 	orr.w	r0, r0, ip
   baa10:	fa23 f302 	lsr.w	r3, r3, r2
   baa14:	ea4f 0343 	mov.w	r3, r3, lsl #1
   baa18:	e7cc      	b.n	ba9b4 <__aeabi_d2f+0x14>
   baa1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   baa1e:	d107      	bne.n	baa30 <__aeabi_d2f+0x90>
   baa20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   baa24:	bf1e      	ittt	ne
   baa26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   baa2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   baa2e:	4770      	bxne	lr
   baa30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   baa34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   baa38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   baa3c:	4770      	bx	lr
   baa3e:	bf00      	nop

000baa40 <__aeabi_d2ulz>:
   baa40:	b5d0      	push	{r4, r6, r7, lr}
   baa42:	4b0c      	ldr	r3, [pc, #48]	; (baa74 <__aeabi_d2ulz+0x34>)
   baa44:	2200      	movs	r2, #0
   baa46:	4606      	mov	r6, r0
   baa48:	460f      	mov	r7, r1
   baa4a:	f7ff fcd9 	bl	ba400 <__aeabi_dmul>
   baa4e:	f7ff ff87 	bl	ba960 <__aeabi_d2uiz>
   baa52:	4604      	mov	r4, r0
   baa54:	f7ff fc5a 	bl	ba30c <__aeabi_ui2d>
   baa58:	4b07      	ldr	r3, [pc, #28]	; (baa78 <__aeabi_d2ulz+0x38>)
   baa5a:	2200      	movs	r2, #0
   baa5c:	f7ff fcd0 	bl	ba400 <__aeabi_dmul>
   baa60:	4602      	mov	r2, r0
   baa62:	460b      	mov	r3, r1
   baa64:	4630      	mov	r0, r6
   baa66:	4639      	mov	r1, r7
   baa68:	f7ff fb12 	bl	ba090 <__aeabi_dsub>
   baa6c:	f7ff ff78 	bl	ba960 <__aeabi_d2uiz>
   baa70:	4621      	mov	r1, r4
   baa72:	bdd0      	pop	{r4, r6, r7, pc}
   baa74:	3df00000 	.word	0x3df00000
   baa78:	41f00000 	.word	0x41f00000

000baa7c <atexit>:
   baa7c:	2300      	movs	r3, #0
   baa7e:	4601      	mov	r1, r0
   baa80:	461a      	mov	r2, r3
   baa82:	4618      	mov	r0, r3
   baa84:	f000 bf86 	b.w	bb994 <__register_exitproc>

000baa88 <atof>:
   baa88:	2100      	movs	r1, #0
   baa8a:	f000 beeb 	b.w	bb864 <strtod>

000baa8e <atoi>:
   baa8e:	220a      	movs	r2, #10
   baa90:	2100      	movs	r1, #0
   baa92:	f000 bf75 	b.w	bb980 <strtol>

000baa96 <atol>:
   baa96:	220a      	movs	r2, #10
   baa98:	2100      	movs	r1, #0
   baa9a:	f000 bf71 	b.w	bb980 <strtol>

000baa9e <memcmp>:
   baa9e:	b510      	push	{r4, lr}
   baaa0:	3901      	subs	r1, #1
   baaa2:	4402      	add	r2, r0
   baaa4:	4290      	cmp	r0, r2
   baaa6:	d101      	bne.n	baaac <memcmp+0xe>
   baaa8:	2000      	movs	r0, #0
   baaaa:	e005      	b.n	baab8 <memcmp+0x1a>
   baaac:	7803      	ldrb	r3, [r0, #0]
   baaae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   baab2:	42a3      	cmp	r3, r4
   baab4:	d001      	beq.n	baaba <memcmp+0x1c>
   baab6:	1b18      	subs	r0, r3, r4
   baab8:	bd10      	pop	{r4, pc}
   baaba:	3001      	adds	r0, #1
   baabc:	e7f2      	b.n	baaa4 <memcmp+0x6>

000baabe <memcpy>:
   baabe:	440a      	add	r2, r1
   baac0:	4291      	cmp	r1, r2
   baac2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   baac6:	d100      	bne.n	baaca <memcpy+0xc>
   baac8:	4770      	bx	lr
   baaca:	b510      	push	{r4, lr}
   baacc:	f811 4b01 	ldrb.w	r4, [r1], #1
   baad0:	f803 4f01 	strb.w	r4, [r3, #1]!
   baad4:	4291      	cmp	r1, r2
   baad6:	d1f9      	bne.n	baacc <memcpy+0xe>
   baad8:	bd10      	pop	{r4, pc}

000baada <memmove>:
   baada:	4288      	cmp	r0, r1
   baadc:	b510      	push	{r4, lr}
   baade:	eb01 0402 	add.w	r4, r1, r2
   baae2:	d902      	bls.n	baaea <memmove+0x10>
   baae4:	4284      	cmp	r4, r0
   baae6:	4623      	mov	r3, r4
   baae8:	d807      	bhi.n	baafa <memmove+0x20>
   baaea:	1e43      	subs	r3, r0, #1
   baaec:	42a1      	cmp	r1, r4
   baaee:	d008      	beq.n	bab02 <memmove+0x28>
   baaf0:	f811 2b01 	ldrb.w	r2, [r1], #1
   baaf4:	f803 2f01 	strb.w	r2, [r3, #1]!
   baaf8:	e7f8      	b.n	baaec <memmove+0x12>
   baafa:	4402      	add	r2, r0
   baafc:	4601      	mov	r1, r0
   baafe:	428a      	cmp	r2, r1
   bab00:	d100      	bne.n	bab04 <memmove+0x2a>
   bab02:	bd10      	pop	{r4, pc}
   bab04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bab08:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bab0c:	e7f7      	b.n	baafe <memmove+0x24>

000bab0e <memset>:
   bab0e:	4402      	add	r2, r0
   bab10:	4603      	mov	r3, r0
   bab12:	4293      	cmp	r3, r2
   bab14:	d100      	bne.n	bab18 <memset+0xa>
   bab16:	4770      	bx	lr
   bab18:	f803 1b01 	strb.w	r1, [r3], #1
   bab1c:	e7f9      	b.n	bab12 <memset+0x4>
	...

000bab20 <srand>:
   bab20:	b538      	push	{r3, r4, r5, lr}
   bab22:	4b10      	ldr	r3, [pc, #64]	; (bab64 <srand+0x44>)
   bab24:	681d      	ldr	r5, [r3, #0]
   bab26:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bab28:	4604      	mov	r4, r0
   bab2a:	b9b3      	cbnz	r3, bab5a <srand+0x3a>
   bab2c:	2018      	movs	r0, #24
   bab2e:	f7fc fbe1 	bl	b72f4 <malloc>
   bab32:	4602      	mov	r2, r0
   bab34:	63a8      	str	r0, [r5, #56]	; 0x38
   bab36:	b920      	cbnz	r0, bab42 <srand+0x22>
   bab38:	4b0b      	ldr	r3, [pc, #44]	; (bab68 <srand+0x48>)
   bab3a:	480c      	ldr	r0, [pc, #48]	; (bab6c <srand+0x4c>)
   bab3c:	2142      	movs	r1, #66	; 0x42
   bab3e:	f7fc fc19 	bl	b7374 <__assert_func>
   bab42:	490b      	ldr	r1, [pc, #44]	; (bab70 <srand+0x50>)
   bab44:	4b0b      	ldr	r3, [pc, #44]	; (bab74 <srand+0x54>)
   bab46:	e9c0 1300 	strd	r1, r3, [r0]
   bab4a:	4b0b      	ldr	r3, [pc, #44]	; (bab78 <srand+0x58>)
   bab4c:	6083      	str	r3, [r0, #8]
   bab4e:	230b      	movs	r3, #11
   bab50:	8183      	strh	r3, [r0, #12]
   bab52:	2100      	movs	r1, #0
   bab54:	2001      	movs	r0, #1
   bab56:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bab5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bab5c:	2200      	movs	r2, #0
   bab5e:	611c      	str	r4, [r3, #16]
   bab60:	615a      	str	r2, [r3, #20]
   bab62:	bd38      	pop	{r3, r4, r5, pc}
   bab64:	200320b4 	.word	0x200320b4
   bab68:	000bd585 	.word	0x000bd585
   bab6c:	000bd59c 	.word	0x000bd59c
   bab70:	abcd330e 	.word	0xabcd330e
   bab74:	e66d1234 	.word	0xe66d1234
   bab78:	0005deec 	.word	0x0005deec

000bab7c <strcmp>:
   bab7c:	f810 2b01 	ldrb.w	r2, [r0], #1
   bab80:	f811 3b01 	ldrb.w	r3, [r1], #1
   bab84:	2a01      	cmp	r2, #1
   bab86:	bf28      	it	cs
   bab88:	429a      	cmpcs	r2, r3
   bab8a:	d0f7      	beq.n	bab7c <strcmp>
   bab8c:	1ad0      	subs	r0, r2, r3
   bab8e:	4770      	bx	lr

000bab90 <strcpy>:
   bab90:	4603      	mov	r3, r0
   bab92:	f811 2b01 	ldrb.w	r2, [r1], #1
   bab96:	f803 2b01 	strb.w	r2, [r3], #1
   bab9a:	2a00      	cmp	r2, #0
   bab9c:	d1f9      	bne.n	bab92 <strcpy+0x2>
   bab9e:	4770      	bx	lr

000baba0 <strlen>:
   baba0:	4603      	mov	r3, r0
   baba2:	f813 2b01 	ldrb.w	r2, [r3], #1
   baba6:	2a00      	cmp	r2, #0
   baba8:	d1fb      	bne.n	baba2 <strlen+0x2>
   babaa:	1a18      	subs	r0, r3, r0
   babac:	3801      	subs	r0, #1
   babae:	4770      	bx	lr

000babb0 <strncmp>:
   babb0:	b510      	push	{r4, lr}
   babb2:	b17a      	cbz	r2, babd4 <strncmp+0x24>
   babb4:	4603      	mov	r3, r0
   babb6:	3901      	subs	r1, #1
   babb8:	1884      	adds	r4, r0, r2
   babba:	f813 0b01 	ldrb.w	r0, [r3], #1
   babbe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   babc2:	4290      	cmp	r0, r2
   babc4:	d101      	bne.n	babca <strncmp+0x1a>
   babc6:	42a3      	cmp	r3, r4
   babc8:	d101      	bne.n	babce <strncmp+0x1e>
   babca:	1a80      	subs	r0, r0, r2
   babcc:	bd10      	pop	{r4, pc}
   babce:	2800      	cmp	r0, #0
   babd0:	d1f3      	bne.n	babba <strncmp+0xa>
   babd2:	e7fa      	b.n	babca <strncmp+0x1a>
   babd4:	4610      	mov	r0, r2
   babd6:	e7f9      	b.n	babcc <strncmp+0x1c>

000babd8 <strnlen>:
   babd8:	b510      	push	{r4, lr}
   babda:	4602      	mov	r2, r0
   babdc:	4401      	add	r1, r0
   babde:	428a      	cmp	r2, r1
   babe0:	4613      	mov	r3, r2
   babe2:	d003      	beq.n	babec <strnlen+0x14>
   babe4:	781c      	ldrb	r4, [r3, #0]
   babe6:	3201      	adds	r2, #1
   babe8:	2c00      	cmp	r4, #0
   babea:	d1f8      	bne.n	babde <strnlen+0x6>
   babec:	1a18      	subs	r0, r3, r0
   babee:	bd10      	pop	{r4, pc}

000babf0 <strstr>:
   babf0:	780a      	ldrb	r2, [r1, #0]
   babf2:	b570      	push	{r4, r5, r6, lr}
   babf4:	b96a      	cbnz	r2, bac12 <strstr+0x22>
   babf6:	bd70      	pop	{r4, r5, r6, pc}
   babf8:	429a      	cmp	r2, r3
   babfa:	d109      	bne.n	bac10 <strstr+0x20>
   babfc:	460c      	mov	r4, r1
   babfe:	4605      	mov	r5, r0
   bac00:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bac04:	2b00      	cmp	r3, #0
   bac06:	d0f6      	beq.n	babf6 <strstr+0x6>
   bac08:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bac0c:	429e      	cmp	r6, r3
   bac0e:	d0f7      	beq.n	bac00 <strstr+0x10>
   bac10:	3001      	adds	r0, #1
   bac12:	7803      	ldrb	r3, [r0, #0]
   bac14:	2b00      	cmp	r3, #0
   bac16:	d1ef      	bne.n	babf8 <strstr+0x8>
   bac18:	4618      	mov	r0, r3
   bac1a:	e7ec      	b.n	babf6 <strstr+0x6>

000bac1c <sulp>:
   bac1c:	b570      	push	{r4, r5, r6, lr}
   bac1e:	4604      	mov	r4, r0
   bac20:	460d      	mov	r5, r1
   bac22:	ec45 4b10 	vmov	d0, r4, r5
   bac26:	4616      	mov	r6, r2
   bac28:	f001 fe0e 	bl	bc848 <__ulp>
   bac2c:	ec51 0b10 	vmov	r0, r1, d0
   bac30:	b17e      	cbz	r6, bac52 <sulp+0x36>
   bac32:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bac36:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bac3a:	2b00      	cmp	r3, #0
   bac3c:	dd09      	ble.n	bac52 <sulp+0x36>
   bac3e:	051b      	lsls	r3, r3, #20
   bac40:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bac44:	2400      	movs	r4, #0
   bac46:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bac4a:	4622      	mov	r2, r4
   bac4c:	462b      	mov	r3, r5
   bac4e:	f7ff fbd7 	bl	ba400 <__aeabi_dmul>
   bac52:	bd70      	pop	{r4, r5, r6, pc}
   bac54:	0000      	movs	r0, r0
	...

000bac58 <_strtod_l>:
   bac58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bac5c:	ed2d 8b02 	vpush	{d8}
   bac60:	b09d      	sub	sp, #116	; 0x74
   bac62:	461f      	mov	r7, r3
   bac64:	2300      	movs	r3, #0
   bac66:	9318      	str	r3, [sp, #96]	; 0x60
   bac68:	4ba2      	ldr	r3, [pc, #648]	; (baef4 <_strtod_l+0x29c>)
   bac6a:	9213      	str	r2, [sp, #76]	; 0x4c
   bac6c:	681b      	ldr	r3, [r3, #0]
   bac6e:	9305      	str	r3, [sp, #20]
   bac70:	4604      	mov	r4, r0
   bac72:	4618      	mov	r0, r3
   bac74:	4688      	mov	r8, r1
   bac76:	f7ff ff93 	bl	baba0 <strlen>
   bac7a:	f04f 0a00 	mov.w	sl, #0
   bac7e:	4605      	mov	r5, r0
   bac80:	f04f 0b00 	mov.w	fp, #0
   bac84:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bac88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bac8a:	781a      	ldrb	r2, [r3, #0]
   bac8c:	2a2b      	cmp	r2, #43	; 0x2b
   bac8e:	d04e      	beq.n	bad2e <_strtod_l+0xd6>
   bac90:	d83b      	bhi.n	bad0a <_strtod_l+0xb2>
   bac92:	2a0d      	cmp	r2, #13
   bac94:	d834      	bhi.n	bad00 <_strtod_l+0xa8>
   bac96:	2a08      	cmp	r2, #8
   bac98:	d834      	bhi.n	bad04 <_strtod_l+0xac>
   bac9a:	2a00      	cmp	r2, #0
   bac9c:	d03e      	beq.n	bad1c <_strtod_l+0xc4>
   bac9e:	2300      	movs	r3, #0
   baca0:	930a      	str	r3, [sp, #40]	; 0x28
   baca2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   baca4:	7833      	ldrb	r3, [r6, #0]
   baca6:	2b30      	cmp	r3, #48	; 0x30
   baca8:	f040 80b0 	bne.w	bae0c <_strtod_l+0x1b4>
   bacac:	7873      	ldrb	r3, [r6, #1]
   bacae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bacb2:	2b58      	cmp	r3, #88	; 0x58
   bacb4:	d168      	bne.n	bad88 <_strtod_l+0x130>
   bacb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bacb8:	9301      	str	r3, [sp, #4]
   bacba:	ab18      	add	r3, sp, #96	; 0x60
   bacbc:	9702      	str	r7, [sp, #8]
   bacbe:	9300      	str	r3, [sp, #0]
   bacc0:	4a8d      	ldr	r2, [pc, #564]	; (baef8 <_strtod_l+0x2a0>)
   bacc2:	ab19      	add	r3, sp, #100	; 0x64
   bacc4:	a917      	add	r1, sp, #92	; 0x5c
   bacc6:	4620      	mov	r0, r4
   bacc8:	f000 ff2e 	bl	bbb28 <__gethex>
   baccc:	f010 0707 	ands.w	r7, r0, #7
   bacd0:	4605      	mov	r5, r0
   bacd2:	d005      	beq.n	bace0 <_strtod_l+0x88>
   bacd4:	2f06      	cmp	r7, #6
   bacd6:	d12c      	bne.n	bad32 <_strtod_l+0xda>
   bacd8:	3601      	adds	r6, #1
   bacda:	2300      	movs	r3, #0
   bacdc:	9617      	str	r6, [sp, #92]	; 0x5c
   bacde:	930a      	str	r3, [sp, #40]	; 0x28
   bace0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bace2:	2b00      	cmp	r3, #0
   bace4:	f040 8590 	bne.w	bb808 <_strtod_l+0xbb0>
   bace8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bacea:	b1eb      	cbz	r3, bad28 <_strtod_l+0xd0>
   bacec:	4652      	mov	r2, sl
   bacee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bacf2:	ec43 2b10 	vmov	d0, r2, r3
   bacf6:	b01d      	add	sp, #116	; 0x74
   bacf8:	ecbd 8b02 	vpop	{d8}
   bacfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bad00:	2a20      	cmp	r2, #32
   bad02:	d1cc      	bne.n	bac9e <_strtod_l+0x46>
   bad04:	3301      	adds	r3, #1
   bad06:	9317      	str	r3, [sp, #92]	; 0x5c
   bad08:	e7be      	b.n	bac88 <_strtod_l+0x30>
   bad0a:	2a2d      	cmp	r2, #45	; 0x2d
   bad0c:	d1c7      	bne.n	bac9e <_strtod_l+0x46>
   bad0e:	2201      	movs	r2, #1
   bad10:	920a      	str	r2, [sp, #40]	; 0x28
   bad12:	1c5a      	adds	r2, r3, #1
   bad14:	9217      	str	r2, [sp, #92]	; 0x5c
   bad16:	785b      	ldrb	r3, [r3, #1]
   bad18:	2b00      	cmp	r3, #0
   bad1a:	d1c2      	bne.n	baca2 <_strtod_l+0x4a>
   bad1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bad1e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bad22:	2b00      	cmp	r3, #0
   bad24:	f040 856e 	bne.w	bb804 <_strtod_l+0xbac>
   bad28:	4652      	mov	r2, sl
   bad2a:	465b      	mov	r3, fp
   bad2c:	e7e1      	b.n	bacf2 <_strtod_l+0x9a>
   bad2e:	2200      	movs	r2, #0
   bad30:	e7ee      	b.n	bad10 <_strtod_l+0xb8>
   bad32:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bad34:	b13a      	cbz	r2, bad46 <_strtod_l+0xee>
   bad36:	2135      	movs	r1, #53	; 0x35
   bad38:	a81a      	add	r0, sp, #104	; 0x68
   bad3a:	f001 fe90 	bl	bca5e <__copybits>
   bad3e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bad40:	4620      	mov	r0, r4
   bad42:	f001 fa4f 	bl	bc1e4 <_Bfree>
   bad46:	3f01      	subs	r7, #1
   bad48:	2f04      	cmp	r7, #4
   bad4a:	d806      	bhi.n	bad5a <_strtod_l+0x102>
   bad4c:	e8df f007 	tbb	[pc, r7]
   bad50:	1714030a 	.word	0x1714030a
   bad54:	0a          	.byte	0x0a
   bad55:	00          	.byte	0x00
   bad56:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bad5a:	0728      	lsls	r0, r5, #28
   bad5c:	d5c0      	bpl.n	bace0 <_strtod_l+0x88>
   bad5e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bad62:	e7bd      	b.n	bace0 <_strtod_l+0x88>
   bad64:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bad68:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bad6a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bad6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bad72:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bad76:	e7f0      	b.n	bad5a <_strtod_l+0x102>
   bad78:	f8df b180 	ldr.w	fp, [pc, #384]	; baefc <_strtod_l+0x2a4>
   bad7c:	e7ed      	b.n	bad5a <_strtod_l+0x102>
   bad7e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bad82:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bad86:	e7e8      	b.n	bad5a <_strtod_l+0x102>
   bad88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bad8a:	1c5a      	adds	r2, r3, #1
   bad8c:	9217      	str	r2, [sp, #92]	; 0x5c
   bad8e:	785b      	ldrb	r3, [r3, #1]
   bad90:	2b30      	cmp	r3, #48	; 0x30
   bad92:	d0f9      	beq.n	bad88 <_strtod_l+0x130>
   bad94:	2b00      	cmp	r3, #0
   bad96:	d0a3      	beq.n	bace0 <_strtod_l+0x88>
   bad98:	2301      	movs	r3, #1
   bad9a:	f04f 0900 	mov.w	r9, #0
   bad9e:	9304      	str	r3, [sp, #16]
   bada0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bada2:	9308      	str	r3, [sp, #32]
   bada4:	f8cd 901c 	str.w	r9, [sp, #28]
   bada8:	464f      	mov	r7, r9
   badaa:	220a      	movs	r2, #10
   badac:	9817      	ldr	r0, [sp, #92]	; 0x5c
   badae:	7806      	ldrb	r6, [r0, #0]
   badb0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   badb4:	b2d9      	uxtb	r1, r3
   badb6:	2909      	cmp	r1, #9
   badb8:	d92a      	bls.n	bae10 <_strtod_l+0x1b8>
   badba:	9905      	ldr	r1, [sp, #20]
   badbc:	462a      	mov	r2, r5
   badbe:	f7ff fef7 	bl	babb0 <strncmp>
   badc2:	b398      	cbz	r0, bae2c <_strtod_l+0x1d4>
   badc4:	2000      	movs	r0, #0
   badc6:	4632      	mov	r2, r6
   badc8:	463d      	mov	r5, r7
   badca:	9005      	str	r0, [sp, #20]
   badcc:	4603      	mov	r3, r0
   badce:	2a65      	cmp	r2, #101	; 0x65
   badd0:	d001      	beq.n	badd6 <_strtod_l+0x17e>
   badd2:	2a45      	cmp	r2, #69	; 0x45
   badd4:	d118      	bne.n	bae08 <_strtod_l+0x1b0>
   badd6:	b91d      	cbnz	r5, bade0 <_strtod_l+0x188>
   badd8:	9a04      	ldr	r2, [sp, #16]
   badda:	4302      	orrs	r2, r0
   baddc:	d09e      	beq.n	bad1c <_strtod_l+0xc4>
   badde:	2500      	movs	r5, #0
   bade0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bade4:	f108 0201 	add.w	r2, r8, #1
   bade8:	9217      	str	r2, [sp, #92]	; 0x5c
   badea:	f898 2001 	ldrb.w	r2, [r8, #1]
   badee:	2a2b      	cmp	r2, #43	; 0x2b
   badf0:	d075      	beq.n	baede <_strtod_l+0x286>
   badf2:	2a2d      	cmp	r2, #45	; 0x2d
   badf4:	d07b      	beq.n	baeee <_strtod_l+0x296>
   badf6:	f04f 0c00 	mov.w	ip, #0
   badfa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   badfe:	2909      	cmp	r1, #9
   bae00:	f240 8082 	bls.w	baf08 <_strtod_l+0x2b0>
   bae04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bae08:	2600      	movs	r6, #0
   bae0a:	e09d      	b.n	baf48 <_strtod_l+0x2f0>
   bae0c:	2300      	movs	r3, #0
   bae0e:	e7c4      	b.n	bad9a <_strtod_l+0x142>
   bae10:	2f08      	cmp	r7, #8
   bae12:	bfd8      	it	le
   bae14:	9907      	ldrle	r1, [sp, #28]
   bae16:	f100 0001 	add.w	r0, r0, #1
   bae1a:	bfda      	itte	le
   bae1c:	fb02 3301 	mlale	r3, r2, r1, r3
   bae20:	9307      	strle	r3, [sp, #28]
   bae22:	fb02 3909 	mlagt	r9, r2, r9, r3
   bae26:	3701      	adds	r7, #1
   bae28:	9017      	str	r0, [sp, #92]	; 0x5c
   bae2a:	e7bf      	b.n	badac <_strtod_l+0x154>
   bae2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bae2e:	195a      	adds	r2, r3, r5
   bae30:	9217      	str	r2, [sp, #92]	; 0x5c
   bae32:	5d5a      	ldrb	r2, [r3, r5]
   bae34:	2f00      	cmp	r7, #0
   bae36:	d037      	beq.n	baea8 <_strtod_l+0x250>
   bae38:	9005      	str	r0, [sp, #20]
   bae3a:	463d      	mov	r5, r7
   bae3c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bae40:	2b09      	cmp	r3, #9
   bae42:	d912      	bls.n	bae6a <_strtod_l+0x212>
   bae44:	2301      	movs	r3, #1
   bae46:	e7c2      	b.n	badce <_strtod_l+0x176>
   bae48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bae4a:	1c5a      	adds	r2, r3, #1
   bae4c:	9217      	str	r2, [sp, #92]	; 0x5c
   bae4e:	785a      	ldrb	r2, [r3, #1]
   bae50:	3001      	adds	r0, #1
   bae52:	2a30      	cmp	r2, #48	; 0x30
   bae54:	d0f8      	beq.n	bae48 <_strtod_l+0x1f0>
   bae56:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bae5a:	2b08      	cmp	r3, #8
   bae5c:	f200 84d9 	bhi.w	bb812 <_strtod_l+0xbba>
   bae60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bae62:	9005      	str	r0, [sp, #20]
   bae64:	2000      	movs	r0, #0
   bae66:	9308      	str	r3, [sp, #32]
   bae68:	4605      	mov	r5, r0
   bae6a:	3a30      	subs	r2, #48	; 0x30
   bae6c:	f100 0301 	add.w	r3, r0, #1
   bae70:	d014      	beq.n	bae9c <_strtod_l+0x244>
   bae72:	9905      	ldr	r1, [sp, #20]
   bae74:	4419      	add	r1, r3
   bae76:	9105      	str	r1, [sp, #20]
   bae78:	462b      	mov	r3, r5
   bae7a:	eb00 0e05 	add.w	lr, r0, r5
   bae7e:	210a      	movs	r1, #10
   bae80:	4573      	cmp	r3, lr
   bae82:	d113      	bne.n	baeac <_strtod_l+0x254>
   bae84:	182b      	adds	r3, r5, r0
   bae86:	2b08      	cmp	r3, #8
   bae88:	f105 0501 	add.w	r5, r5, #1
   bae8c:	4405      	add	r5, r0
   bae8e:	dc1c      	bgt.n	baeca <_strtod_l+0x272>
   bae90:	9907      	ldr	r1, [sp, #28]
   bae92:	230a      	movs	r3, #10
   bae94:	fb03 2301 	mla	r3, r3, r1, r2
   bae98:	9307      	str	r3, [sp, #28]
   bae9a:	2300      	movs	r3, #0
   bae9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bae9e:	1c51      	adds	r1, r2, #1
   baea0:	9117      	str	r1, [sp, #92]	; 0x5c
   baea2:	7852      	ldrb	r2, [r2, #1]
   baea4:	4618      	mov	r0, r3
   baea6:	e7c9      	b.n	bae3c <_strtod_l+0x1e4>
   baea8:	4638      	mov	r0, r7
   baeaa:	e7d2      	b.n	bae52 <_strtod_l+0x1fa>
   baeac:	2b08      	cmp	r3, #8
   baeae:	dc04      	bgt.n	baeba <_strtod_l+0x262>
   baeb0:	9e07      	ldr	r6, [sp, #28]
   baeb2:	434e      	muls	r6, r1
   baeb4:	9607      	str	r6, [sp, #28]
   baeb6:	3301      	adds	r3, #1
   baeb8:	e7e2      	b.n	bae80 <_strtod_l+0x228>
   baeba:	f103 0c01 	add.w	ip, r3, #1
   baebe:	f1bc 0f10 	cmp.w	ip, #16
   baec2:	bfd8      	it	le
   baec4:	fb01 f909 	mulle.w	r9, r1, r9
   baec8:	e7f5      	b.n	baeb6 <_strtod_l+0x25e>
   baeca:	2d10      	cmp	r5, #16
   baecc:	bfdc      	itt	le
   baece:	230a      	movle	r3, #10
   baed0:	fb03 2909 	mlale	r9, r3, r9, r2
   baed4:	e7e1      	b.n	bae9a <_strtod_l+0x242>
   baed6:	2300      	movs	r3, #0
   baed8:	9305      	str	r3, [sp, #20]
   baeda:	2301      	movs	r3, #1
   baedc:	e77c      	b.n	badd8 <_strtod_l+0x180>
   baede:	f04f 0c00 	mov.w	ip, #0
   baee2:	f108 0202 	add.w	r2, r8, #2
   baee6:	9217      	str	r2, [sp, #92]	; 0x5c
   baee8:	f898 2002 	ldrb.w	r2, [r8, #2]
   baeec:	e785      	b.n	badfa <_strtod_l+0x1a2>
   baeee:	f04f 0c01 	mov.w	ip, #1
   baef2:	e7f6      	b.n	baee2 <_strtod_l+0x28a>
   baef4:	000bd7cc 	.word	0x000bd7cc
   baef8:	000bd604 	.word	0x000bd604
   baefc:	7ff00000 	.word	0x7ff00000
   baf00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   baf02:	1c51      	adds	r1, r2, #1
   baf04:	9117      	str	r1, [sp, #92]	; 0x5c
   baf06:	7852      	ldrb	r2, [r2, #1]
   baf08:	2a30      	cmp	r2, #48	; 0x30
   baf0a:	d0f9      	beq.n	baf00 <_strtod_l+0x2a8>
   baf0c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   baf10:	2908      	cmp	r1, #8
   baf12:	f63f af79 	bhi.w	bae08 <_strtod_l+0x1b0>
   baf16:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   baf1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   baf1c:	9206      	str	r2, [sp, #24]
   baf1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   baf20:	1c51      	adds	r1, r2, #1
   baf22:	9117      	str	r1, [sp, #92]	; 0x5c
   baf24:	7852      	ldrb	r2, [r2, #1]
   baf26:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   baf2a:	2e09      	cmp	r6, #9
   baf2c:	d937      	bls.n	baf9e <_strtod_l+0x346>
   baf2e:	9e06      	ldr	r6, [sp, #24]
   baf30:	1b89      	subs	r1, r1, r6
   baf32:	2908      	cmp	r1, #8
   baf34:	f644 661f 	movw	r6, #19999	; 0x4e1f
   baf38:	dc02      	bgt.n	baf40 <_strtod_l+0x2e8>
   baf3a:	4576      	cmp	r6, lr
   baf3c:	bfa8      	it	ge
   baf3e:	4676      	movge	r6, lr
   baf40:	f1bc 0f00 	cmp.w	ip, #0
   baf44:	d000      	beq.n	baf48 <_strtod_l+0x2f0>
   baf46:	4276      	negs	r6, r6
   baf48:	2d00      	cmp	r5, #0
   baf4a:	d14d      	bne.n	bafe8 <_strtod_l+0x390>
   baf4c:	9904      	ldr	r1, [sp, #16]
   baf4e:	4301      	orrs	r1, r0
   baf50:	f47f aec6 	bne.w	bace0 <_strtod_l+0x88>
   baf54:	2b00      	cmp	r3, #0
   baf56:	f47f aee1 	bne.w	bad1c <_strtod_l+0xc4>
   baf5a:	2a69      	cmp	r2, #105	; 0x69
   baf5c:	d027      	beq.n	bafae <_strtod_l+0x356>
   baf5e:	dc24      	bgt.n	bafaa <_strtod_l+0x352>
   baf60:	2a49      	cmp	r2, #73	; 0x49
   baf62:	d024      	beq.n	bafae <_strtod_l+0x356>
   baf64:	2a4e      	cmp	r2, #78	; 0x4e
   baf66:	f47f aed9 	bne.w	bad1c <_strtod_l+0xc4>
   baf6a:	499f      	ldr	r1, [pc, #636]	; (bb1e8 <_strtod_l+0x590>)
   baf6c:	a817      	add	r0, sp, #92	; 0x5c
   baf6e:	f001 f833 	bl	bbfd8 <__match>
   baf72:	2800      	cmp	r0, #0
   baf74:	f43f aed2 	beq.w	bad1c <_strtod_l+0xc4>
   baf78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   baf7a:	781b      	ldrb	r3, [r3, #0]
   baf7c:	2b28      	cmp	r3, #40	; 0x28
   baf7e:	d12d      	bne.n	bafdc <_strtod_l+0x384>
   baf80:	499a      	ldr	r1, [pc, #616]	; (bb1ec <_strtod_l+0x594>)
   baf82:	aa1a      	add	r2, sp, #104	; 0x68
   baf84:	a817      	add	r0, sp, #92	; 0x5c
   baf86:	f001 f83b 	bl	bc000 <__hexnan>
   baf8a:	2805      	cmp	r0, #5
   baf8c:	d126      	bne.n	bafdc <_strtod_l+0x384>
   baf8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   baf90:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   baf94:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   baf98:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   baf9c:	e6a0      	b.n	bace0 <_strtod_l+0x88>
   baf9e:	210a      	movs	r1, #10
   bafa0:	fb01 2e0e 	mla	lr, r1, lr, r2
   bafa4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bafa8:	e7b9      	b.n	baf1e <_strtod_l+0x2c6>
   bafaa:	2a6e      	cmp	r2, #110	; 0x6e
   bafac:	e7db      	b.n	baf66 <_strtod_l+0x30e>
   bafae:	4990      	ldr	r1, [pc, #576]	; (bb1f0 <_strtod_l+0x598>)
   bafb0:	a817      	add	r0, sp, #92	; 0x5c
   bafb2:	f001 f811 	bl	bbfd8 <__match>
   bafb6:	2800      	cmp	r0, #0
   bafb8:	f43f aeb0 	beq.w	bad1c <_strtod_l+0xc4>
   bafbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bafbe:	498d      	ldr	r1, [pc, #564]	; (bb1f4 <_strtod_l+0x59c>)
   bafc0:	3b01      	subs	r3, #1
   bafc2:	a817      	add	r0, sp, #92	; 0x5c
   bafc4:	9317      	str	r3, [sp, #92]	; 0x5c
   bafc6:	f001 f807 	bl	bbfd8 <__match>
   bafca:	b910      	cbnz	r0, bafd2 <_strtod_l+0x37a>
   bafcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bafce:	3301      	adds	r3, #1
   bafd0:	9317      	str	r3, [sp, #92]	; 0x5c
   bafd2:	f8df b230 	ldr.w	fp, [pc, #560]	; bb204 <_strtod_l+0x5ac>
   bafd6:	f04f 0a00 	mov.w	sl, #0
   bafda:	e681      	b.n	bace0 <_strtod_l+0x88>
   bafdc:	4886      	ldr	r0, [pc, #536]	; (bb1f8 <_strtod_l+0x5a0>)
   bafde:	f001 fd93 	bl	bcb08 <nan>
   bafe2:	ec5b ab10 	vmov	sl, fp, d0
   bafe6:	e67b      	b.n	bace0 <_strtod_l+0x88>
   bafe8:	9b05      	ldr	r3, [sp, #20]
   bafea:	9807      	ldr	r0, [sp, #28]
   bafec:	1af3      	subs	r3, r6, r3
   bafee:	2f00      	cmp	r7, #0
   baff0:	bf08      	it	eq
   baff2:	462f      	moveq	r7, r5
   baff4:	2d10      	cmp	r5, #16
   baff6:	9306      	str	r3, [sp, #24]
   baff8:	46a8      	mov	r8, r5
   baffa:	bfa8      	it	ge
   baffc:	f04f 0810 	movge.w	r8, #16
   bb000:	f7ff f984 	bl	ba30c <__aeabi_ui2d>
   bb004:	2d09      	cmp	r5, #9
   bb006:	4682      	mov	sl, r0
   bb008:	468b      	mov	fp, r1
   bb00a:	dd13      	ble.n	bb034 <_strtod_l+0x3dc>
   bb00c:	4b7b      	ldr	r3, [pc, #492]	; (bb1fc <_strtod_l+0x5a4>)
   bb00e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bb012:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bb016:	f7ff f9f3 	bl	ba400 <__aeabi_dmul>
   bb01a:	4682      	mov	sl, r0
   bb01c:	4648      	mov	r0, r9
   bb01e:	468b      	mov	fp, r1
   bb020:	f7ff f974 	bl	ba30c <__aeabi_ui2d>
   bb024:	4602      	mov	r2, r0
   bb026:	460b      	mov	r3, r1
   bb028:	4650      	mov	r0, sl
   bb02a:	4659      	mov	r1, fp
   bb02c:	f7ff f832 	bl	ba094 <__adddf3>
   bb030:	4682      	mov	sl, r0
   bb032:	468b      	mov	fp, r1
   bb034:	2d0f      	cmp	r5, #15
   bb036:	dc38      	bgt.n	bb0aa <_strtod_l+0x452>
   bb038:	9b06      	ldr	r3, [sp, #24]
   bb03a:	2b00      	cmp	r3, #0
   bb03c:	f43f ae50 	beq.w	bace0 <_strtod_l+0x88>
   bb040:	dd24      	ble.n	bb08c <_strtod_l+0x434>
   bb042:	2b16      	cmp	r3, #22
   bb044:	dc0b      	bgt.n	bb05e <_strtod_l+0x406>
   bb046:	496d      	ldr	r1, [pc, #436]	; (bb1fc <_strtod_l+0x5a4>)
   bb048:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb04c:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb050:	4652      	mov	r2, sl
   bb052:	465b      	mov	r3, fp
   bb054:	f7ff f9d4 	bl	ba400 <__aeabi_dmul>
   bb058:	4682      	mov	sl, r0
   bb05a:	468b      	mov	fp, r1
   bb05c:	e640      	b.n	bace0 <_strtod_l+0x88>
   bb05e:	9a06      	ldr	r2, [sp, #24]
   bb060:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bb064:	4293      	cmp	r3, r2
   bb066:	db20      	blt.n	bb0aa <_strtod_l+0x452>
   bb068:	4c64      	ldr	r4, [pc, #400]	; (bb1fc <_strtod_l+0x5a4>)
   bb06a:	f1c5 050f 	rsb	r5, r5, #15
   bb06e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bb072:	4652      	mov	r2, sl
   bb074:	465b      	mov	r3, fp
   bb076:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb07a:	f7ff f9c1 	bl	ba400 <__aeabi_dmul>
   bb07e:	9b06      	ldr	r3, [sp, #24]
   bb080:	1b5d      	subs	r5, r3, r5
   bb082:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bb086:	e9d4 2300 	ldrd	r2, r3, [r4]
   bb08a:	e7e3      	b.n	bb054 <_strtod_l+0x3fc>
   bb08c:	9b06      	ldr	r3, [sp, #24]
   bb08e:	3316      	adds	r3, #22
   bb090:	db0b      	blt.n	bb0aa <_strtod_l+0x452>
   bb092:	9b05      	ldr	r3, [sp, #20]
   bb094:	1b9e      	subs	r6, r3, r6
   bb096:	4b59      	ldr	r3, [pc, #356]	; (bb1fc <_strtod_l+0x5a4>)
   bb098:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bb09c:	e9d6 2300 	ldrd	r2, r3, [r6]
   bb0a0:	4650      	mov	r0, sl
   bb0a2:	4659      	mov	r1, fp
   bb0a4:	f7ff fad6 	bl	ba654 <__aeabi_ddiv>
   bb0a8:	e7d6      	b.n	bb058 <_strtod_l+0x400>
   bb0aa:	9b06      	ldr	r3, [sp, #24]
   bb0ac:	eba5 0808 	sub.w	r8, r5, r8
   bb0b0:	4498      	add	r8, r3
   bb0b2:	f1b8 0f00 	cmp.w	r8, #0
   bb0b6:	dd74      	ble.n	bb1a2 <_strtod_l+0x54a>
   bb0b8:	f018 030f 	ands.w	r3, r8, #15
   bb0bc:	d00a      	beq.n	bb0d4 <_strtod_l+0x47c>
   bb0be:	494f      	ldr	r1, [pc, #316]	; (bb1fc <_strtod_l+0x5a4>)
   bb0c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb0c4:	4652      	mov	r2, sl
   bb0c6:	465b      	mov	r3, fp
   bb0c8:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb0cc:	f7ff f998 	bl	ba400 <__aeabi_dmul>
   bb0d0:	4682      	mov	sl, r0
   bb0d2:	468b      	mov	fp, r1
   bb0d4:	f038 080f 	bics.w	r8, r8, #15
   bb0d8:	d04f      	beq.n	bb17a <_strtod_l+0x522>
   bb0da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bb0de:	dd22      	ble.n	bb126 <_strtod_l+0x4ce>
   bb0e0:	2500      	movs	r5, #0
   bb0e2:	462e      	mov	r6, r5
   bb0e4:	9507      	str	r5, [sp, #28]
   bb0e6:	9505      	str	r5, [sp, #20]
   bb0e8:	2322      	movs	r3, #34	; 0x22
   bb0ea:	f8df b118 	ldr.w	fp, [pc, #280]	; bb204 <_strtod_l+0x5ac>
   bb0ee:	6023      	str	r3, [r4, #0]
   bb0f0:	f04f 0a00 	mov.w	sl, #0
   bb0f4:	9b07      	ldr	r3, [sp, #28]
   bb0f6:	2b00      	cmp	r3, #0
   bb0f8:	f43f adf2 	beq.w	bace0 <_strtod_l+0x88>
   bb0fc:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb0fe:	4620      	mov	r0, r4
   bb100:	f001 f870 	bl	bc1e4 <_Bfree>
   bb104:	9905      	ldr	r1, [sp, #20]
   bb106:	4620      	mov	r0, r4
   bb108:	f001 f86c 	bl	bc1e4 <_Bfree>
   bb10c:	4631      	mov	r1, r6
   bb10e:	4620      	mov	r0, r4
   bb110:	f001 f868 	bl	bc1e4 <_Bfree>
   bb114:	9907      	ldr	r1, [sp, #28]
   bb116:	4620      	mov	r0, r4
   bb118:	f001 f864 	bl	bc1e4 <_Bfree>
   bb11c:	4629      	mov	r1, r5
   bb11e:	4620      	mov	r0, r4
   bb120:	f001 f860 	bl	bc1e4 <_Bfree>
   bb124:	e5dc      	b.n	bace0 <_strtod_l+0x88>
   bb126:	4b36      	ldr	r3, [pc, #216]	; (bb200 <_strtod_l+0x5a8>)
   bb128:	9304      	str	r3, [sp, #16]
   bb12a:	2300      	movs	r3, #0
   bb12c:	ea4f 1828 	mov.w	r8, r8, asr #4
   bb130:	4650      	mov	r0, sl
   bb132:	4659      	mov	r1, fp
   bb134:	4699      	mov	r9, r3
   bb136:	f1b8 0f01 	cmp.w	r8, #1
   bb13a:	dc21      	bgt.n	bb180 <_strtod_l+0x528>
   bb13c:	b10b      	cbz	r3, bb142 <_strtod_l+0x4ea>
   bb13e:	4682      	mov	sl, r0
   bb140:	468b      	mov	fp, r1
   bb142:	4b2f      	ldr	r3, [pc, #188]	; (bb200 <_strtod_l+0x5a8>)
   bb144:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bb148:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bb14c:	4652      	mov	r2, sl
   bb14e:	465b      	mov	r3, fp
   bb150:	e9d9 0100 	ldrd	r0, r1, [r9]
   bb154:	f7ff f954 	bl	ba400 <__aeabi_dmul>
   bb158:	4b2a      	ldr	r3, [pc, #168]	; (bb204 <_strtod_l+0x5ac>)
   bb15a:	460a      	mov	r2, r1
   bb15c:	400b      	ands	r3, r1
   bb15e:	492a      	ldr	r1, [pc, #168]	; (bb208 <_strtod_l+0x5b0>)
   bb160:	428b      	cmp	r3, r1
   bb162:	4682      	mov	sl, r0
   bb164:	d8bc      	bhi.n	bb0e0 <_strtod_l+0x488>
   bb166:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bb16a:	428b      	cmp	r3, r1
   bb16c:	bf86      	itte	hi
   bb16e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bb20c <_strtod_l+0x5b4>
   bb172:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bb176:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bb17a:	2300      	movs	r3, #0
   bb17c:	9304      	str	r3, [sp, #16]
   bb17e:	e084      	b.n	bb28a <_strtod_l+0x632>
   bb180:	f018 0f01 	tst.w	r8, #1
   bb184:	d005      	beq.n	bb192 <_strtod_l+0x53a>
   bb186:	9b04      	ldr	r3, [sp, #16]
   bb188:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb18c:	f7ff f938 	bl	ba400 <__aeabi_dmul>
   bb190:	2301      	movs	r3, #1
   bb192:	9a04      	ldr	r2, [sp, #16]
   bb194:	3208      	adds	r2, #8
   bb196:	f109 0901 	add.w	r9, r9, #1
   bb19a:	ea4f 0868 	mov.w	r8, r8, asr #1
   bb19e:	9204      	str	r2, [sp, #16]
   bb1a0:	e7c9      	b.n	bb136 <_strtod_l+0x4de>
   bb1a2:	d0ea      	beq.n	bb17a <_strtod_l+0x522>
   bb1a4:	f1c8 0800 	rsb	r8, r8, #0
   bb1a8:	f018 020f 	ands.w	r2, r8, #15
   bb1ac:	d00a      	beq.n	bb1c4 <_strtod_l+0x56c>
   bb1ae:	4b13      	ldr	r3, [pc, #76]	; (bb1fc <_strtod_l+0x5a4>)
   bb1b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bb1b4:	4650      	mov	r0, sl
   bb1b6:	4659      	mov	r1, fp
   bb1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb1bc:	f7ff fa4a 	bl	ba654 <__aeabi_ddiv>
   bb1c0:	4682      	mov	sl, r0
   bb1c2:	468b      	mov	fp, r1
   bb1c4:	ea5f 1828 	movs.w	r8, r8, asr #4
   bb1c8:	d0d7      	beq.n	bb17a <_strtod_l+0x522>
   bb1ca:	f1b8 0f1f 	cmp.w	r8, #31
   bb1ce:	dd1f      	ble.n	bb210 <_strtod_l+0x5b8>
   bb1d0:	2500      	movs	r5, #0
   bb1d2:	462e      	mov	r6, r5
   bb1d4:	9507      	str	r5, [sp, #28]
   bb1d6:	9505      	str	r5, [sp, #20]
   bb1d8:	2322      	movs	r3, #34	; 0x22
   bb1da:	f04f 0a00 	mov.w	sl, #0
   bb1de:	f04f 0b00 	mov.w	fp, #0
   bb1e2:	6023      	str	r3, [r4, #0]
   bb1e4:	e786      	b.n	bb0f4 <_strtod_l+0x49c>
   bb1e6:	bf00      	nop
   bb1e8:	000bd5fe 	.word	0x000bd5fe
   bb1ec:	000bd618 	.word	0x000bd618
   bb1f0:	000bd5f5 	.word	0x000bd5f5
   bb1f4:	000bd5f8 	.word	0x000bd5f8
   bb1f8:	000bcffe 	.word	0x000bcffe
   bb1fc:	000bd868 	.word	0x000bd868
   bb200:	000bd840 	.word	0x000bd840
   bb204:	7ff00000 	.word	0x7ff00000
   bb208:	7ca00000 	.word	0x7ca00000
   bb20c:	7fefffff 	.word	0x7fefffff
   bb210:	f018 0310 	ands.w	r3, r8, #16
   bb214:	bf18      	it	ne
   bb216:	236a      	movne	r3, #106	; 0x6a
   bb218:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bb5c8 <_strtod_l+0x970>
   bb21c:	9304      	str	r3, [sp, #16]
   bb21e:	4650      	mov	r0, sl
   bb220:	4659      	mov	r1, fp
   bb222:	2300      	movs	r3, #0
   bb224:	f018 0f01 	tst.w	r8, #1
   bb228:	d004      	beq.n	bb234 <_strtod_l+0x5dc>
   bb22a:	e9d9 2300 	ldrd	r2, r3, [r9]
   bb22e:	f7ff f8e7 	bl	ba400 <__aeabi_dmul>
   bb232:	2301      	movs	r3, #1
   bb234:	ea5f 0868 	movs.w	r8, r8, asr #1
   bb238:	f109 0908 	add.w	r9, r9, #8
   bb23c:	d1f2      	bne.n	bb224 <_strtod_l+0x5cc>
   bb23e:	b10b      	cbz	r3, bb244 <_strtod_l+0x5ec>
   bb240:	4682      	mov	sl, r0
   bb242:	468b      	mov	fp, r1
   bb244:	9b04      	ldr	r3, [sp, #16]
   bb246:	b1c3      	cbz	r3, bb27a <_strtod_l+0x622>
   bb248:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bb24c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bb250:	2b00      	cmp	r3, #0
   bb252:	4659      	mov	r1, fp
   bb254:	dd11      	ble.n	bb27a <_strtod_l+0x622>
   bb256:	2b1f      	cmp	r3, #31
   bb258:	f340 8124 	ble.w	bb4a4 <_strtod_l+0x84c>
   bb25c:	2b34      	cmp	r3, #52	; 0x34
   bb25e:	bfde      	ittt	le
   bb260:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bb264:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bb268:	fa03 f202 	lslle.w	r2, r3, r2
   bb26c:	f04f 0a00 	mov.w	sl, #0
   bb270:	bfcc      	ite	gt
   bb272:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bb276:	ea02 0b01 	andle.w	fp, r2, r1
   bb27a:	2200      	movs	r2, #0
   bb27c:	2300      	movs	r3, #0
   bb27e:	4650      	mov	r0, sl
   bb280:	4659      	mov	r1, fp
   bb282:	f7ff fb25 	bl	ba8d0 <__aeabi_dcmpeq>
   bb286:	2800      	cmp	r0, #0
   bb288:	d1a2      	bne.n	bb1d0 <_strtod_l+0x578>
   bb28a:	9b07      	ldr	r3, [sp, #28]
   bb28c:	9300      	str	r3, [sp, #0]
   bb28e:	9908      	ldr	r1, [sp, #32]
   bb290:	462b      	mov	r3, r5
   bb292:	463a      	mov	r2, r7
   bb294:	4620      	mov	r0, r4
   bb296:	f001 f80d 	bl	bc2b4 <__s2b>
   bb29a:	9007      	str	r0, [sp, #28]
   bb29c:	2800      	cmp	r0, #0
   bb29e:	f43f af1f 	beq.w	bb0e0 <_strtod_l+0x488>
   bb2a2:	9b05      	ldr	r3, [sp, #20]
   bb2a4:	1b9e      	subs	r6, r3, r6
   bb2a6:	9b06      	ldr	r3, [sp, #24]
   bb2a8:	2b00      	cmp	r3, #0
   bb2aa:	bfb4      	ite	lt
   bb2ac:	4633      	movlt	r3, r6
   bb2ae:	2300      	movge	r3, #0
   bb2b0:	930c      	str	r3, [sp, #48]	; 0x30
   bb2b2:	9b06      	ldr	r3, [sp, #24]
   bb2b4:	2500      	movs	r5, #0
   bb2b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bb2ba:	9312      	str	r3, [sp, #72]	; 0x48
   bb2bc:	462e      	mov	r6, r5
   bb2be:	9b07      	ldr	r3, [sp, #28]
   bb2c0:	4620      	mov	r0, r4
   bb2c2:	6859      	ldr	r1, [r3, #4]
   bb2c4:	f000 ff4e 	bl	bc164 <_Balloc>
   bb2c8:	9005      	str	r0, [sp, #20]
   bb2ca:	2800      	cmp	r0, #0
   bb2cc:	f43f af0c 	beq.w	bb0e8 <_strtod_l+0x490>
   bb2d0:	9b07      	ldr	r3, [sp, #28]
   bb2d2:	691a      	ldr	r2, [r3, #16]
   bb2d4:	3202      	adds	r2, #2
   bb2d6:	f103 010c 	add.w	r1, r3, #12
   bb2da:	0092      	lsls	r2, r2, #2
   bb2dc:	300c      	adds	r0, #12
   bb2de:	f7ff fbee 	bl	baabe <memcpy>
   bb2e2:	ec4b ab10 	vmov	d0, sl, fp
   bb2e6:	aa1a      	add	r2, sp, #104	; 0x68
   bb2e8:	a919      	add	r1, sp, #100	; 0x64
   bb2ea:	4620      	mov	r0, r4
   bb2ec:	f001 fb28 	bl	bc940 <__d2b>
   bb2f0:	ec4b ab18 	vmov	d8, sl, fp
   bb2f4:	9018      	str	r0, [sp, #96]	; 0x60
   bb2f6:	2800      	cmp	r0, #0
   bb2f8:	f43f aef6 	beq.w	bb0e8 <_strtod_l+0x490>
   bb2fc:	2101      	movs	r1, #1
   bb2fe:	4620      	mov	r0, r4
   bb300:	f001 f872 	bl	bc3e8 <__i2b>
   bb304:	4606      	mov	r6, r0
   bb306:	2800      	cmp	r0, #0
   bb308:	f43f aeee 	beq.w	bb0e8 <_strtod_l+0x490>
   bb30c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bb30e:	9904      	ldr	r1, [sp, #16]
   bb310:	2b00      	cmp	r3, #0
   bb312:	bfab      	itete	ge
   bb314:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bb316:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bb318:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bb31a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bb31e:	bfac      	ite	ge
   bb320:	eb03 0902 	addge.w	r9, r3, r2
   bb324:	1ad7      	sublt	r7, r2, r3
   bb326:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bb328:	eba3 0801 	sub.w	r8, r3, r1
   bb32c:	4490      	add	r8, r2
   bb32e:	4ba1      	ldr	r3, [pc, #644]	; (bb5b4 <_strtod_l+0x95c>)
   bb330:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bb334:	4598      	cmp	r8, r3
   bb336:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bb33a:	f280 80c7 	bge.w	bb4cc <_strtod_l+0x874>
   bb33e:	eba3 0308 	sub.w	r3, r3, r8
   bb342:	2b1f      	cmp	r3, #31
   bb344:	eba2 0203 	sub.w	r2, r2, r3
   bb348:	f04f 0101 	mov.w	r1, #1
   bb34c:	f300 80b1 	bgt.w	bb4b2 <_strtod_l+0x85a>
   bb350:	fa01 f303 	lsl.w	r3, r1, r3
   bb354:	930d      	str	r3, [sp, #52]	; 0x34
   bb356:	2300      	movs	r3, #0
   bb358:	9308      	str	r3, [sp, #32]
   bb35a:	eb09 0802 	add.w	r8, r9, r2
   bb35e:	9b04      	ldr	r3, [sp, #16]
   bb360:	45c1      	cmp	r9, r8
   bb362:	4417      	add	r7, r2
   bb364:	441f      	add	r7, r3
   bb366:	464b      	mov	r3, r9
   bb368:	bfa8      	it	ge
   bb36a:	4643      	movge	r3, r8
   bb36c:	42bb      	cmp	r3, r7
   bb36e:	bfa8      	it	ge
   bb370:	463b      	movge	r3, r7
   bb372:	2b00      	cmp	r3, #0
   bb374:	bfc2      	ittt	gt
   bb376:	eba8 0803 	subgt.w	r8, r8, r3
   bb37a:	1aff      	subgt	r7, r7, r3
   bb37c:	eba9 0903 	subgt.w	r9, r9, r3
   bb380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bb382:	2b00      	cmp	r3, #0
   bb384:	dd17      	ble.n	bb3b6 <_strtod_l+0x75e>
   bb386:	4631      	mov	r1, r6
   bb388:	461a      	mov	r2, r3
   bb38a:	4620      	mov	r0, r4
   bb38c:	f001 f8ec 	bl	bc568 <__pow5mult>
   bb390:	4606      	mov	r6, r0
   bb392:	2800      	cmp	r0, #0
   bb394:	f43f aea8 	beq.w	bb0e8 <_strtod_l+0x490>
   bb398:	4601      	mov	r1, r0
   bb39a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb39c:	4620      	mov	r0, r4
   bb39e:	f001 f839 	bl	bc414 <__multiply>
   bb3a2:	900b      	str	r0, [sp, #44]	; 0x2c
   bb3a4:	2800      	cmp	r0, #0
   bb3a6:	f43f ae9f 	beq.w	bb0e8 <_strtod_l+0x490>
   bb3aa:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb3ac:	4620      	mov	r0, r4
   bb3ae:	f000 ff19 	bl	bc1e4 <_Bfree>
   bb3b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb3b4:	9318      	str	r3, [sp, #96]	; 0x60
   bb3b6:	f1b8 0f00 	cmp.w	r8, #0
   bb3ba:	f300 808c 	bgt.w	bb4d6 <_strtod_l+0x87e>
   bb3be:	9b06      	ldr	r3, [sp, #24]
   bb3c0:	2b00      	cmp	r3, #0
   bb3c2:	dd08      	ble.n	bb3d6 <_strtod_l+0x77e>
   bb3c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bb3c6:	9905      	ldr	r1, [sp, #20]
   bb3c8:	4620      	mov	r0, r4
   bb3ca:	f001 f8cd 	bl	bc568 <__pow5mult>
   bb3ce:	9005      	str	r0, [sp, #20]
   bb3d0:	2800      	cmp	r0, #0
   bb3d2:	f43f ae89 	beq.w	bb0e8 <_strtod_l+0x490>
   bb3d6:	2f00      	cmp	r7, #0
   bb3d8:	dd08      	ble.n	bb3ec <_strtod_l+0x794>
   bb3da:	9905      	ldr	r1, [sp, #20]
   bb3dc:	463a      	mov	r2, r7
   bb3de:	4620      	mov	r0, r4
   bb3e0:	f001 f91c 	bl	bc61c <__lshift>
   bb3e4:	9005      	str	r0, [sp, #20]
   bb3e6:	2800      	cmp	r0, #0
   bb3e8:	f43f ae7e 	beq.w	bb0e8 <_strtod_l+0x490>
   bb3ec:	f1b9 0f00 	cmp.w	r9, #0
   bb3f0:	dd08      	ble.n	bb404 <_strtod_l+0x7ac>
   bb3f2:	4631      	mov	r1, r6
   bb3f4:	464a      	mov	r2, r9
   bb3f6:	4620      	mov	r0, r4
   bb3f8:	f001 f910 	bl	bc61c <__lshift>
   bb3fc:	4606      	mov	r6, r0
   bb3fe:	2800      	cmp	r0, #0
   bb400:	f43f ae72 	beq.w	bb0e8 <_strtod_l+0x490>
   bb404:	9a05      	ldr	r2, [sp, #20]
   bb406:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb408:	4620      	mov	r0, r4
   bb40a:	f001 f993 	bl	bc734 <__mdiff>
   bb40e:	4605      	mov	r5, r0
   bb410:	2800      	cmp	r0, #0
   bb412:	f43f ae69 	beq.w	bb0e8 <_strtod_l+0x490>
   bb416:	68c3      	ldr	r3, [r0, #12]
   bb418:	930b      	str	r3, [sp, #44]	; 0x2c
   bb41a:	2300      	movs	r3, #0
   bb41c:	60c3      	str	r3, [r0, #12]
   bb41e:	4631      	mov	r1, r6
   bb420:	f001 f96c 	bl	bc6fc <__mcmp>
   bb424:	2800      	cmp	r0, #0
   bb426:	da60      	bge.n	bb4ea <_strtod_l+0x892>
   bb428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb42a:	ea53 030a 	orrs.w	r3, r3, sl
   bb42e:	f040 8082 	bne.w	bb536 <_strtod_l+0x8de>
   bb432:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb436:	2b00      	cmp	r3, #0
   bb438:	d17d      	bne.n	bb536 <_strtod_l+0x8de>
   bb43a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bb43e:	0d1b      	lsrs	r3, r3, #20
   bb440:	051b      	lsls	r3, r3, #20
   bb442:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bb446:	d976      	bls.n	bb536 <_strtod_l+0x8de>
   bb448:	696b      	ldr	r3, [r5, #20]
   bb44a:	b913      	cbnz	r3, bb452 <_strtod_l+0x7fa>
   bb44c:	692b      	ldr	r3, [r5, #16]
   bb44e:	2b01      	cmp	r3, #1
   bb450:	dd71      	ble.n	bb536 <_strtod_l+0x8de>
   bb452:	4629      	mov	r1, r5
   bb454:	2201      	movs	r2, #1
   bb456:	4620      	mov	r0, r4
   bb458:	f001 f8e0 	bl	bc61c <__lshift>
   bb45c:	4631      	mov	r1, r6
   bb45e:	4605      	mov	r5, r0
   bb460:	f001 f94c 	bl	bc6fc <__mcmp>
   bb464:	2800      	cmp	r0, #0
   bb466:	dd66      	ble.n	bb536 <_strtod_l+0x8de>
   bb468:	9904      	ldr	r1, [sp, #16]
   bb46a:	4a53      	ldr	r2, [pc, #332]	; (bb5b8 <_strtod_l+0x960>)
   bb46c:	465b      	mov	r3, fp
   bb46e:	2900      	cmp	r1, #0
   bb470:	f000 8081 	beq.w	bb576 <_strtod_l+0x91e>
   bb474:	ea02 010b 	and.w	r1, r2, fp
   bb478:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bb47c:	dc7b      	bgt.n	bb576 <_strtod_l+0x91e>
   bb47e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bb482:	f77f aea9 	ble.w	bb1d8 <_strtod_l+0x580>
   bb486:	4b4d      	ldr	r3, [pc, #308]	; (bb5bc <_strtod_l+0x964>)
   bb488:	4650      	mov	r0, sl
   bb48a:	4659      	mov	r1, fp
   bb48c:	2200      	movs	r2, #0
   bb48e:	f7fe ffb7 	bl	ba400 <__aeabi_dmul>
   bb492:	460b      	mov	r3, r1
   bb494:	4303      	orrs	r3, r0
   bb496:	bf08      	it	eq
   bb498:	2322      	moveq	r3, #34	; 0x22
   bb49a:	4682      	mov	sl, r0
   bb49c:	468b      	mov	fp, r1
   bb49e:	bf08      	it	eq
   bb4a0:	6023      	streq	r3, [r4, #0]
   bb4a2:	e62b      	b.n	bb0fc <_strtod_l+0x4a4>
   bb4a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb4a8:	fa02 f303 	lsl.w	r3, r2, r3
   bb4ac:	ea03 0a0a 	and.w	sl, r3, sl
   bb4b0:	e6e3      	b.n	bb27a <_strtod_l+0x622>
   bb4b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bb4b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bb4ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bb4be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bb4c2:	fa01 f308 	lsl.w	r3, r1, r8
   bb4c6:	9308      	str	r3, [sp, #32]
   bb4c8:	910d      	str	r1, [sp, #52]	; 0x34
   bb4ca:	e746      	b.n	bb35a <_strtod_l+0x702>
   bb4cc:	2300      	movs	r3, #0
   bb4ce:	9308      	str	r3, [sp, #32]
   bb4d0:	2301      	movs	r3, #1
   bb4d2:	930d      	str	r3, [sp, #52]	; 0x34
   bb4d4:	e741      	b.n	bb35a <_strtod_l+0x702>
   bb4d6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb4d8:	4642      	mov	r2, r8
   bb4da:	4620      	mov	r0, r4
   bb4dc:	f001 f89e 	bl	bc61c <__lshift>
   bb4e0:	9018      	str	r0, [sp, #96]	; 0x60
   bb4e2:	2800      	cmp	r0, #0
   bb4e4:	f47f af6b 	bne.w	bb3be <_strtod_l+0x766>
   bb4e8:	e5fe      	b.n	bb0e8 <_strtod_l+0x490>
   bb4ea:	465f      	mov	r7, fp
   bb4ec:	d16e      	bne.n	bb5cc <_strtod_l+0x974>
   bb4ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bb4f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb4f4:	b342      	cbz	r2, bb548 <_strtod_l+0x8f0>
   bb4f6:	4a32      	ldr	r2, [pc, #200]	; (bb5c0 <_strtod_l+0x968>)
   bb4f8:	4293      	cmp	r3, r2
   bb4fa:	d128      	bne.n	bb54e <_strtod_l+0x8f6>
   bb4fc:	9b04      	ldr	r3, [sp, #16]
   bb4fe:	4651      	mov	r1, sl
   bb500:	b1eb      	cbz	r3, bb53e <_strtod_l+0x8e6>
   bb502:	4b2d      	ldr	r3, [pc, #180]	; (bb5b8 <_strtod_l+0x960>)
   bb504:	403b      	ands	r3, r7
   bb506:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bb50a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb50e:	d819      	bhi.n	bb544 <_strtod_l+0x8ec>
   bb510:	0d1b      	lsrs	r3, r3, #20
   bb512:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bb516:	fa02 f303 	lsl.w	r3, r2, r3
   bb51a:	4299      	cmp	r1, r3
   bb51c:	d117      	bne.n	bb54e <_strtod_l+0x8f6>
   bb51e:	4b29      	ldr	r3, [pc, #164]	; (bb5c4 <_strtod_l+0x96c>)
   bb520:	429f      	cmp	r7, r3
   bb522:	d102      	bne.n	bb52a <_strtod_l+0x8d2>
   bb524:	3101      	adds	r1, #1
   bb526:	f43f addf 	beq.w	bb0e8 <_strtod_l+0x490>
   bb52a:	4b23      	ldr	r3, [pc, #140]	; (bb5b8 <_strtod_l+0x960>)
   bb52c:	403b      	ands	r3, r7
   bb52e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bb532:	f04f 0a00 	mov.w	sl, #0
   bb536:	9b04      	ldr	r3, [sp, #16]
   bb538:	2b00      	cmp	r3, #0
   bb53a:	d1a4      	bne.n	bb486 <_strtod_l+0x82e>
   bb53c:	e5de      	b.n	bb0fc <_strtod_l+0x4a4>
   bb53e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bb542:	e7ea      	b.n	bb51a <_strtod_l+0x8c2>
   bb544:	4613      	mov	r3, r2
   bb546:	e7e8      	b.n	bb51a <_strtod_l+0x8c2>
   bb548:	ea53 030a 	orrs.w	r3, r3, sl
   bb54c:	d08c      	beq.n	bb468 <_strtod_l+0x810>
   bb54e:	9b08      	ldr	r3, [sp, #32]
   bb550:	b1db      	cbz	r3, bb58a <_strtod_l+0x932>
   bb552:	423b      	tst	r3, r7
   bb554:	d0ef      	beq.n	bb536 <_strtod_l+0x8de>
   bb556:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb558:	9a04      	ldr	r2, [sp, #16]
   bb55a:	4650      	mov	r0, sl
   bb55c:	4659      	mov	r1, fp
   bb55e:	b1c3      	cbz	r3, bb592 <_strtod_l+0x93a>
   bb560:	f7ff fb5c 	bl	bac1c <sulp>
   bb564:	4602      	mov	r2, r0
   bb566:	460b      	mov	r3, r1
   bb568:	ec51 0b18 	vmov	r0, r1, d8
   bb56c:	f7fe fd92 	bl	ba094 <__adddf3>
   bb570:	4682      	mov	sl, r0
   bb572:	468b      	mov	fp, r1
   bb574:	e7df      	b.n	bb536 <_strtod_l+0x8de>
   bb576:	4013      	ands	r3, r2
   bb578:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bb57c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bb580:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bb584:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bb588:	e7d5      	b.n	bb536 <_strtod_l+0x8de>
   bb58a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bb58c:	ea13 0f0a 	tst.w	r3, sl
   bb590:	e7e0      	b.n	bb554 <_strtod_l+0x8fc>
   bb592:	f7ff fb43 	bl	bac1c <sulp>
   bb596:	4602      	mov	r2, r0
   bb598:	460b      	mov	r3, r1
   bb59a:	ec51 0b18 	vmov	r0, r1, d8
   bb59e:	f7fe fd77 	bl	ba090 <__aeabi_dsub>
   bb5a2:	2200      	movs	r2, #0
   bb5a4:	2300      	movs	r3, #0
   bb5a6:	4682      	mov	sl, r0
   bb5a8:	468b      	mov	fp, r1
   bb5aa:	f7ff f991 	bl	ba8d0 <__aeabi_dcmpeq>
   bb5ae:	2800      	cmp	r0, #0
   bb5b0:	d0c1      	beq.n	bb536 <_strtod_l+0x8de>
   bb5b2:	e611      	b.n	bb1d8 <_strtod_l+0x580>
   bb5b4:	fffffc02 	.word	0xfffffc02
   bb5b8:	7ff00000 	.word	0x7ff00000
   bb5bc:	39500000 	.word	0x39500000
   bb5c0:	000fffff 	.word	0x000fffff
   bb5c4:	7fefffff 	.word	0x7fefffff
   bb5c8:	000bd630 	.word	0x000bd630
   bb5cc:	4631      	mov	r1, r6
   bb5ce:	4628      	mov	r0, r5
   bb5d0:	f001 fa12 	bl	bc9f8 <__ratio>
   bb5d4:	ec59 8b10 	vmov	r8, r9, d0
   bb5d8:	ee10 0a10 	vmov	r0, s0
   bb5dc:	2200      	movs	r2, #0
   bb5de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bb5e2:	4649      	mov	r1, r9
   bb5e4:	f7ff f988 	bl	ba8f8 <__aeabi_dcmple>
   bb5e8:	2800      	cmp	r0, #0
   bb5ea:	d07a      	beq.n	bb6e2 <_strtod_l+0xa8a>
   bb5ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb5ee:	2b00      	cmp	r3, #0
   bb5f0:	d04a      	beq.n	bb688 <_strtod_l+0xa30>
   bb5f2:	4b95      	ldr	r3, [pc, #596]	; (bb848 <_strtod_l+0xbf0>)
   bb5f4:	2200      	movs	r2, #0
   bb5f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb5fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; bb848 <_strtod_l+0xbf0>
   bb5fe:	f04f 0800 	mov.w	r8, #0
   bb602:	4b92      	ldr	r3, [pc, #584]	; (bb84c <_strtod_l+0xbf4>)
   bb604:	403b      	ands	r3, r7
   bb606:	930d      	str	r3, [sp, #52]	; 0x34
   bb608:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb60a:	4b91      	ldr	r3, [pc, #580]	; (bb850 <_strtod_l+0xbf8>)
   bb60c:	429a      	cmp	r2, r3
   bb60e:	f040 80b0 	bne.w	bb772 <_strtod_l+0xb1a>
   bb612:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb616:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bb61a:	ec4b ab10 	vmov	d0, sl, fp
   bb61e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bb622:	f001 f911 	bl	bc848 <__ulp>
   bb626:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb62a:	ec53 2b10 	vmov	r2, r3, d0
   bb62e:	f7fe fee7 	bl	ba400 <__aeabi_dmul>
   bb632:	4652      	mov	r2, sl
   bb634:	465b      	mov	r3, fp
   bb636:	f7fe fd2d 	bl	ba094 <__adddf3>
   bb63a:	460b      	mov	r3, r1
   bb63c:	4983      	ldr	r1, [pc, #524]	; (bb84c <_strtod_l+0xbf4>)
   bb63e:	4a85      	ldr	r2, [pc, #532]	; (bb854 <_strtod_l+0xbfc>)
   bb640:	4019      	ands	r1, r3
   bb642:	4291      	cmp	r1, r2
   bb644:	4682      	mov	sl, r0
   bb646:	d960      	bls.n	bb70a <_strtod_l+0xab2>
   bb648:	ee18 3a90 	vmov	r3, s17
   bb64c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bb650:	4293      	cmp	r3, r2
   bb652:	d104      	bne.n	bb65e <_strtod_l+0xa06>
   bb654:	ee18 3a10 	vmov	r3, s16
   bb658:	3301      	adds	r3, #1
   bb65a:	f43f ad45 	beq.w	bb0e8 <_strtod_l+0x490>
   bb65e:	f8df b200 	ldr.w	fp, [pc, #512]	; bb860 <_strtod_l+0xc08>
   bb662:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bb666:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb668:	4620      	mov	r0, r4
   bb66a:	f000 fdbb 	bl	bc1e4 <_Bfree>
   bb66e:	9905      	ldr	r1, [sp, #20]
   bb670:	4620      	mov	r0, r4
   bb672:	f000 fdb7 	bl	bc1e4 <_Bfree>
   bb676:	4631      	mov	r1, r6
   bb678:	4620      	mov	r0, r4
   bb67a:	f000 fdb3 	bl	bc1e4 <_Bfree>
   bb67e:	4629      	mov	r1, r5
   bb680:	4620      	mov	r0, r4
   bb682:	f000 fdaf 	bl	bc1e4 <_Bfree>
   bb686:	e61a      	b.n	bb2be <_strtod_l+0x666>
   bb688:	f1ba 0f00 	cmp.w	sl, #0
   bb68c:	d11b      	bne.n	bb6c6 <_strtod_l+0xa6e>
   bb68e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb692:	b9f3      	cbnz	r3, bb6d2 <_strtod_l+0xa7a>
   bb694:	4b6c      	ldr	r3, [pc, #432]	; (bb848 <_strtod_l+0xbf0>)
   bb696:	2200      	movs	r2, #0
   bb698:	4640      	mov	r0, r8
   bb69a:	4649      	mov	r1, r9
   bb69c:	f7ff f922 	bl	ba8e4 <__aeabi_dcmplt>
   bb6a0:	b9d0      	cbnz	r0, bb6d8 <_strtod_l+0xa80>
   bb6a2:	4640      	mov	r0, r8
   bb6a4:	4649      	mov	r1, r9
   bb6a6:	4b6c      	ldr	r3, [pc, #432]	; (bb858 <_strtod_l+0xc00>)
   bb6a8:	2200      	movs	r2, #0
   bb6aa:	f7fe fea9 	bl	ba400 <__aeabi_dmul>
   bb6ae:	4680      	mov	r8, r0
   bb6b0:	4689      	mov	r9, r1
   bb6b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bb6b6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bb6ba:	9315      	str	r3, [sp, #84]	; 0x54
   bb6bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bb6c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb6c4:	e79d      	b.n	bb602 <_strtod_l+0x9aa>
   bb6c6:	f1ba 0f01 	cmp.w	sl, #1
   bb6ca:	d102      	bne.n	bb6d2 <_strtod_l+0xa7a>
   bb6cc:	2f00      	cmp	r7, #0
   bb6ce:	f43f ad83 	beq.w	bb1d8 <_strtod_l+0x580>
   bb6d2:	4b62      	ldr	r3, [pc, #392]	; (bb85c <_strtod_l+0xc04>)
   bb6d4:	2200      	movs	r2, #0
   bb6d6:	e78e      	b.n	bb5f6 <_strtod_l+0x99e>
   bb6d8:	f8df 917c 	ldr.w	r9, [pc, #380]	; bb858 <_strtod_l+0xc00>
   bb6dc:	f04f 0800 	mov.w	r8, #0
   bb6e0:	e7e7      	b.n	bb6b2 <_strtod_l+0xa5a>
   bb6e2:	4b5d      	ldr	r3, [pc, #372]	; (bb858 <_strtod_l+0xc00>)
   bb6e4:	4640      	mov	r0, r8
   bb6e6:	4649      	mov	r1, r9
   bb6e8:	2200      	movs	r2, #0
   bb6ea:	f7fe fe89 	bl	ba400 <__aeabi_dmul>
   bb6ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb6f0:	4680      	mov	r8, r0
   bb6f2:	4689      	mov	r9, r1
   bb6f4:	b933      	cbnz	r3, bb704 <_strtod_l+0xaac>
   bb6f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bb6fa:	900e      	str	r0, [sp, #56]	; 0x38
   bb6fc:	930f      	str	r3, [sp, #60]	; 0x3c
   bb6fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bb702:	e7dd      	b.n	bb6c0 <_strtod_l+0xa68>
   bb704:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bb708:	e7f9      	b.n	bb6fe <_strtod_l+0xaa6>
   bb70a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bb70e:	9b04      	ldr	r3, [sp, #16]
   bb710:	2b00      	cmp	r3, #0
   bb712:	d1a8      	bne.n	bb666 <_strtod_l+0xa0e>
   bb714:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bb718:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb71a:	0d1b      	lsrs	r3, r3, #20
   bb71c:	051b      	lsls	r3, r3, #20
   bb71e:	429a      	cmp	r2, r3
   bb720:	d1a1      	bne.n	bb666 <_strtod_l+0xa0e>
   bb722:	4640      	mov	r0, r8
   bb724:	4649      	mov	r1, r9
   bb726:	f001 fa05 	bl	bcb34 <__aeabi_d2lz>
   bb72a:	f7fe fe3b 	bl	ba3a4 <__aeabi_l2d>
   bb72e:	4602      	mov	r2, r0
   bb730:	460b      	mov	r3, r1
   bb732:	4640      	mov	r0, r8
   bb734:	4649      	mov	r1, r9
   bb736:	f7fe fcab 	bl	ba090 <__aeabi_dsub>
   bb73a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bb73c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb740:	ea43 030a 	orr.w	r3, r3, sl
   bb744:	4313      	orrs	r3, r2
   bb746:	4680      	mov	r8, r0
   bb748:	4689      	mov	r9, r1
   bb74a:	d055      	beq.n	bb7f8 <_strtod_l+0xba0>
   bb74c:	a336      	add	r3, pc, #216	; (adr r3, bb828 <_strtod_l+0xbd0>)
   bb74e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb752:	f7ff f8c7 	bl	ba8e4 <__aeabi_dcmplt>
   bb756:	2800      	cmp	r0, #0
   bb758:	f47f acd0 	bne.w	bb0fc <_strtod_l+0x4a4>
   bb75c:	a334      	add	r3, pc, #208	; (adr r3, bb830 <_strtod_l+0xbd8>)
   bb75e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb762:	4640      	mov	r0, r8
   bb764:	4649      	mov	r1, r9
   bb766:	f7ff f8db 	bl	ba920 <__aeabi_dcmpgt>
   bb76a:	2800      	cmp	r0, #0
   bb76c:	f43f af7b 	beq.w	bb666 <_strtod_l+0xa0e>
   bb770:	e4c4      	b.n	bb0fc <_strtod_l+0x4a4>
   bb772:	9b04      	ldr	r3, [sp, #16]
   bb774:	b333      	cbz	r3, bb7c4 <_strtod_l+0xb6c>
   bb776:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bb778:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bb77c:	d822      	bhi.n	bb7c4 <_strtod_l+0xb6c>
   bb77e:	a32e      	add	r3, pc, #184	; (adr r3, bb838 <_strtod_l+0xbe0>)
   bb780:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb784:	4640      	mov	r0, r8
   bb786:	4649      	mov	r1, r9
   bb788:	f7ff f8b6 	bl	ba8f8 <__aeabi_dcmple>
   bb78c:	b1a0      	cbz	r0, bb7b8 <_strtod_l+0xb60>
   bb78e:	4649      	mov	r1, r9
   bb790:	4640      	mov	r0, r8
   bb792:	f7ff f8e5 	bl	ba960 <__aeabi_d2uiz>
   bb796:	2801      	cmp	r0, #1
   bb798:	bf38      	it	cc
   bb79a:	2001      	movcc	r0, #1
   bb79c:	f7fe fdb6 	bl	ba30c <__aeabi_ui2d>
   bb7a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb7a2:	4680      	mov	r8, r0
   bb7a4:	4689      	mov	r9, r1
   bb7a6:	bb23      	cbnz	r3, bb7f2 <_strtod_l+0xb9a>
   bb7a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bb7ac:	9010      	str	r0, [sp, #64]	; 0x40
   bb7ae:	9311      	str	r3, [sp, #68]	; 0x44
   bb7b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bb7b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb7b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bb7ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb7bc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bb7c0:	1a9b      	subs	r3, r3, r2
   bb7c2:	9309      	str	r3, [sp, #36]	; 0x24
   bb7c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb7c8:	eeb0 0a48 	vmov.f32	s0, s16
   bb7cc:	eef0 0a68 	vmov.f32	s1, s17
   bb7d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bb7d4:	f001 f838 	bl	bc848 <__ulp>
   bb7d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb7dc:	ec53 2b10 	vmov	r2, r3, d0
   bb7e0:	f7fe fe0e 	bl	ba400 <__aeabi_dmul>
   bb7e4:	ec53 2b18 	vmov	r2, r3, d8
   bb7e8:	f7fe fc54 	bl	ba094 <__adddf3>
   bb7ec:	4682      	mov	sl, r0
   bb7ee:	468b      	mov	fp, r1
   bb7f0:	e78d      	b.n	bb70e <_strtod_l+0xab6>
   bb7f2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bb7f6:	e7db      	b.n	bb7b0 <_strtod_l+0xb58>
   bb7f8:	a311      	add	r3, pc, #68	; (adr r3, bb840 <_strtod_l+0xbe8>)
   bb7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb7fe:	f7ff f871 	bl	ba8e4 <__aeabi_dcmplt>
   bb802:	e7b2      	b.n	bb76a <_strtod_l+0xb12>
   bb804:	2300      	movs	r3, #0
   bb806:	930a      	str	r3, [sp, #40]	; 0x28
   bb808:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bb80a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb80c:	6013      	str	r3, [r2, #0]
   bb80e:	f7ff ba6b 	b.w	bace8 <_strtod_l+0x90>
   bb812:	2a65      	cmp	r2, #101	; 0x65
   bb814:	f43f ab5f 	beq.w	baed6 <_strtod_l+0x27e>
   bb818:	2a45      	cmp	r2, #69	; 0x45
   bb81a:	f43f ab5c 	beq.w	baed6 <_strtod_l+0x27e>
   bb81e:	2301      	movs	r3, #1
   bb820:	f7ff bb94 	b.w	baf4c <_strtod_l+0x2f4>
   bb824:	f3af 8000 	nop.w
   bb828:	94a03595 	.word	0x94a03595
   bb82c:	3fdfffff 	.word	0x3fdfffff
   bb830:	35afe535 	.word	0x35afe535
   bb834:	3fe00000 	.word	0x3fe00000
   bb838:	ffc00000 	.word	0xffc00000
   bb83c:	41dfffff 	.word	0x41dfffff
   bb840:	94a03595 	.word	0x94a03595
   bb844:	3fcfffff 	.word	0x3fcfffff
   bb848:	3ff00000 	.word	0x3ff00000
   bb84c:	7ff00000 	.word	0x7ff00000
   bb850:	7fe00000 	.word	0x7fe00000
   bb854:	7c9fffff 	.word	0x7c9fffff
   bb858:	3fe00000 	.word	0x3fe00000
   bb85c:	bff00000 	.word	0xbff00000
   bb860:	7fefffff 	.word	0x7fefffff

000bb864 <strtod>:
   bb864:	460a      	mov	r2, r1
   bb866:	4601      	mov	r1, r0
   bb868:	4802      	ldr	r0, [pc, #8]	; (bb874 <strtod+0x10>)
   bb86a:	4b03      	ldr	r3, [pc, #12]	; (bb878 <strtod+0x14>)
   bb86c:	6800      	ldr	r0, [r0, #0]
   bb86e:	f7ff b9f3 	b.w	bac58 <_strtod_l>
   bb872:	bf00      	nop
   bb874:	200320b4 	.word	0x200320b4
   bb878:	20032120 	.word	0x20032120

000bb87c <_strtol_l.constprop.0>:
   bb87c:	2b01      	cmp	r3, #1
   bb87e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb882:	d001      	beq.n	bb888 <_strtol_l.constprop.0+0xc>
   bb884:	2b24      	cmp	r3, #36	; 0x24
   bb886:	d906      	bls.n	bb896 <_strtol_l.constprop.0+0x1a>
   bb888:	f7fb fd6c 	bl	b7364 <__errno>
   bb88c:	2316      	movs	r3, #22
   bb88e:	6003      	str	r3, [r0, #0]
   bb890:	2000      	movs	r0, #0
   bb892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb896:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bb97c <_strtol_l.constprop.0+0x100>
   bb89a:	460d      	mov	r5, r1
   bb89c:	462e      	mov	r6, r5
   bb89e:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb8a2:	f814 700c 	ldrb.w	r7, [r4, ip]
   bb8a6:	f017 0708 	ands.w	r7, r7, #8
   bb8aa:	d1f7      	bne.n	bb89c <_strtol_l.constprop.0+0x20>
   bb8ac:	2c2d      	cmp	r4, #45	; 0x2d
   bb8ae:	d132      	bne.n	bb916 <_strtol_l.constprop.0+0x9a>
   bb8b0:	782c      	ldrb	r4, [r5, #0]
   bb8b2:	2701      	movs	r7, #1
   bb8b4:	1cb5      	adds	r5, r6, #2
   bb8b6:	2b00      	cmp	r3, #0
   bb8b8:	d05b      	beq.n	bb972 <_strtol_l.constprop.0+0xf6>
   bb8ba:	2b10      	cmp	r3, #16
   bb8bc:	d109      	bne.n	bb8d2 <_strtol_l.constprop.0+0x56>
   bb8be:	2c30      	cmp	r4, #48	; 0x30
   bb8c0:	d107      	bne.n	bb8d2 <_strtol_l.constprop.0+0x56>
   bb8c2:	782c      	ldrb	r4, [r5, #0]
   bb8c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bb8c8:	2c58      	cmp	r4, #88	; 0x58
   bb8ca:	d14d      	bne.n	bb968 <_strtol_l.constprop.0+0xec>
   bb8cc:	786c      	ldrb	r4, [r5, #1]
   bb8ce:	2310      	movs	r3, #16
   bb8d0:	3502      	adds	r5, #2
   bb8d2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bb8d6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bb8da:	f04f 0c00 	mov.w	ip, #0
   bb8de:	fbb8 f9f3 	udiv	r9, r8, r3
   bb8e2:	4666      	mov	r6, ip
   bb8e4:	fb03 8a19 	mls	sl, r3, r9, r8
   bb8e8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bb8ec:	f1be 0f09 	cmp.w	lr, #9
   bb8f0:	d816      	bhi.n	bb920 <_strtol_l.constprop.0+0xa4>
   bb8f2:	4674      	mov	r4, lr
   bb8f4:	42a3      	cmp	r3, r4
   bb8f6:	dd24      	ble.n	bb942 <_strtol_l.constprop.0+0xc6>
   bb8f8:	f1bc 0f00 	cmp.w	ip, #0
   bb8fc:	db1e      	blt.n	bb93c <_strtol_l.constprop.0+0xc0>
   bb8fe:	45b1      	cmp	r9, r6
   bb900:	d31c      	bcc.n	bb93c <_strtol_l.constprop.0+0xc0>
   bb902:	d101      	bne.n	bb908 <_strtol_l.constprop.0+0x8c>
   bb904:	45a2      	cmp	sl, r4
   bb906:	db19      	blt.n	bb93c <_strtol_l.constprop.0+0xc0>
   bb908:	fb06 4603 	mla	r6, r6, r3, r4
   bb90c:	f04f 0c01 	mov.w	ip, #1
   bb910:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb914:	e7e8      	b.n	bb8e8 <_strtol_l.constprop.0+0x6c>
   bb916:	2c2b      	cmp	r4, #43	; 0x2b
   bb918:	bf04      	itt	eq
   bb91a:	782c      	ldrbeq	r4, [r5, #0]
   bb91c:	1cb5      	addeq	r5, r6, #2
   bb91e:	e7ca      	b.n	bb8b6 <_strtol_l.constprop.0+0x3a>
   bb920:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bb924:	f1be 0f19 	cmp.w	lr, #25
   bb928:	d801      	bhi.n	bb92e <_strtol_l.constprop.0+0xb2>
   bb92a:	3c37      	subs	r4, #55	; 0x37
   bb92c:	e7e2      	b.n	bb8f4 <_strtol_l.constprop.0+0x78>
   bb92e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bb932:	f1be 0f19 	cmp.w	lr, #25
   bb936:	d804      	bhi.n	bb942 <_strtol_l.constprop.0+0xc6>
   bb938:	3c57      	subs	r4, #87	; 0x57
   bb93a:	e7db      	b.n	bb8f4 <_strtol_l.constprop.0+0x78>
   bb93c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bb940:	e7e6      	b.n	bb910 <_strtol_l.constprop.0+0x94>
   bb942:	f1bc 0f00 	cmp.w	ip, #0
   bb946:	da05      	bge.n	bb954 <_strtol_l.constprop.0+0xd8>
   bb948:	2322      	movs	r3, #34	; 0x22
   bb94a:	6003      	str	r3, [r0, #0]
   bb94c:	4646      	mov	r6, r8
   bb94e:	b942      	cbnz	r2, bb962 <_strtol_l.constprop.0+0xe6>
   bb950:	4630      	mov	r0, r6
   bb952:	e79e      	b.n	bb892 <_strtol_l.constprop.0+0x16>
   bb954:	b107      	cbz	r7, bb958 <_strtol_l.constprop.0+0xdc>
   bb956:	4276      	negs	r6, r6
   bb958:	2a00      	cmp	r2, #0
   bb95a:	d0f9      	beq.n	bb950 <_strtol_l.constprop.0+0xd4>
   bb95c:	f1bc 0f00 	cmp.w	ip, #0
   bb960:	d000      	beq.n	bb964 <_strtol_l.constprop.0+0xe8>
   bb962:	1e69      	subs	r1, r5, #1
   bb964:	6011      	str	r1, [r2, #0]
   bb966:	e7f3      	b.n	bb950 <_strtol_l.constprop.0+0xd4>
   bb968:	2430      	movs	r4, #48	; 0x30
   bb96a:	2b00      	cmp	r3, #0
   bb96c:	d1b1      	bne.n	bb8d2 <_strtol_l.constprop.0+0x56>
   bb96e:	2308      	movs	r3, #8
   bb970:	e7af      	b.n	bb8d2 <_strtol_l.constprop.0+0x56>
   bb972:	2c30      	cmp	r4, #48	; 0x30
   bb974:	d0a5      	beq.n	bb8c2 <_strtol_l.constprop.0+0x46>
   bb976:	230a      	movs	r3, #10
   bb978:	e7ab      	b.n	bb8d2 <_strtol_l.constprop.0+0x56>
   bb97a:	bf00      	nop
   bb97c:	000bd659 	.word	0x000bd659

000bb980 <strtol>:
   bb980:	4613      	mov	r3, r2
   bb982:	460a      	mov	r2, r1
   bb984:	4601      	mov	r1, r0
   bb986:	4802      	ldr	r0, [pc, #8]	; (bb990 <strtol+0x10>)
   bb988:	6800      	ldr	r0, [r0, #0]
   bb98a:	f7ff bf77 	b.w	bb87c <_strtol_l.constprop.0>
   bb98e:	bf00      	nop
   bb990:	200320b4 	.word	0x200320b4

000bb994 <__register_exitproc>:
   bb994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb998:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bba54 <__register_exitproc+0xc0>
   bb99c:	4606      	mov	r6, r0
   bb99e:	f8d8 0000 	ldr.w	r0, [r8]
   bb9a2:	461f      	mov	r7, r3
   bb9a4:	460d      	mov	r5, r1
   bb9a6:	4691      	mov	r9, r2
   bb9a8:	f000 fbc6 	bl	bc138 <__retarget_lock_acquire_recursive>
   bb9ac:	4b25      	ldr	r3, [pc, #148]	; (bba44 <__register_exitproc+0xb0>)
   bb9ae:	681c      	ldr	r4, [r3, #0]
   bb9b0:	b934      	cbnz	r4, bb9c0 <__register_exitproc+0x2c>
   bb9b2:	4c25      	ldr	r4, [pc, #148]	; (bba48 <__register_exitproc+0xb4>)
   bb9b4:	601c      	str	r4, [r3, #0]
   bb9b6:	4b25      	ldr	r3, [pc, #148]	; (bba4c <__register_exitproc+0xb8>)
   bb9b8:	b113      	cbz	r3, bb9c0 <__register_exitproc+0x2c>
   bb9ba:	681b      	ldr	r3, [r3, #0]
   bb9bc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bb9c0:	6863      	ldr	r3, [r4, #4]
   bb9c2:	2b1f      	cmp	r3, #31
   bb9c4:	dd07      	ble.n	bb9d6 <__register_exitproc+0x42>
   bb9c6:	f8d8 0000 	ldr.w	r0, [r8]
   bb9ca:	f000 fbb7 	bl	bc13c <__retarget_lock_release_recursive>
   bb9ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb9d6:	b34e      	cbz	r6, bba2c <__register_exitproc+0x98>
   bb9d8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bb9dc:	b988      	cbnz	r0, bba02 <__register_exitproc+0x6e>
   bb9de:	4b1c      	ldr	r3, [pc, #112]	; (bba50 <__register_exitproc+0xbc>)
   bb9e0:	b923      	cbnz	r3, bb9ec <__register_exitproc+0x58>
   bb9e2:	f8d8 0000 	ldr.w	r0, [r8]
   bb9e6:	f000 fba8 	bl	bc13a <__retarget_lock_release>
   bb9ea:	e7f0      	b.n	bb9ce <__register_exitproc+0x3a>
   bb9ec:	f44f 7084 	mov.w	r0, #264	; 0x108
   bb9f0:	f7fb fc80 	bl	b72f4 <malloc>
   bb9f4:	2800      	cmp	r0, #0
   bb9f6:	d0f4      	beq.n	bb9e2 <__register_exitproc+0x4e>
   bb9f8:	2300      	movs	r3, #0
   bb9fa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bb9fe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bba02:	6863      	ldr	r3, [r4, #4]
   bba04:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bba08:	2201      	movs	r2, #1
   bba0a:	409a      	lsls	r2, r3
   bba0c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bba10:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bba14:	4313      	orrs	r3, r2
   bba16:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bba1a:	2e02      	cmp	r6, #2
   bba1c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bba20:	bf02      	ittt	eq
   bba22:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bba26:	4313      	orreq	r3, r2
   bba28:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bba2c:	6863      	ldr	r3, [r4, #4]
   bba2e:	f8d8 0000 	ldr.w	r0, [r8]
   bba32:	1c5a      	adds	r2, r3, #1
   bba34:	3302      	adds	r3, #2
   bba36:	6062      	str	r2, [r4, #4]
   bba38:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bba3c:	f000 fb7e 	bl	bc13c <__retarget_lock_release_recursive>
   bba40:	2000      	movs	r0, #0
   bba42:	e7c6      	b.n	bb9d2 <__register_exitproc+0x3e>
   bba44:	2003e7e8 	.word	0x2003e7e8
   bba48:	2003e75c 	.word	0x2003e75c
   bba4c:	00000000 	.word	0x00000000
   bba50:	000b72f5 	.word	0x000b72f5
   bba54:	20032118 	.word	0x20032118

000bba58 <rshift>:
   bba58:	6903      	ldr	r3, [r0, #16]
   bba5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bba5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bba62:	ea4f 1261 	mov.w	r2, r1, asr #5
   bba66:	f100 0414 	add.w	r4, r0, #20
   bba6a:	dd45      	ble.n	bbaf8 <rshift+0xa0>
   bba6c:	f011 011f 	ands.w	r1, r1, #31
   bba70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bba74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bba78:	d10c      	bne.n	bba94 <rshift+0x3c>
   bba7a:	f100 0710 	add.w	r7, r0, #16
   bba7e:	4629      	mov	r1, r5
   bba80:	42b1      	cmp	r1, r6
   bba82:	d334      	bcc.n	bbaee <rshift+0x96>
   bba84:	1a9b      	subs	r3, r3, r2
   bba86:	009b      	lsls	r3, r3, #2
   bba88:	1eea      	subs	r2, r5, #3
   bba8a:	4296      	cmp	r6, r2
   bba8c:	bf38      	it	cc
   bba8e:	2300      	movcc	r3, #0
   bba90:	4423      	add	r3, r4
   bba92:	e015      	b.n	bbac0 <rshift+0x68>
   bba94:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bba98:	f1c1 0820 	rsb	r8, r1, #32
   bba9c:	40cf      	lsrs	r7, r1
   bba9e:	f105 0e04 	add.w	lr, r5, #4
   bbaa2:	46a1      	mov	r9, r4
   bbaa4:	4576      	cmp	r6, lr
   bbaa6:	46f4      	mov	ip, lr
   bbaa8:	d815      	bhi.n	bbad6 <rshift+0x7e>
   bbaaa:	1a9a      	subs	r2, r3, r2
   bbaac:	0092      	lsls	r2, r2, #2
   bbaae:	3a04      	subs	r2, #4
   bbab0:	3501      	adds	r5, #1
   bbab2:	42ae      	cmp	r6, r5
   bbab4:	bf38      	it	cc
   bbab6:	2200      	movcc	r2, #0
   bbab8:	18a3      	adds	r3, r4, r2
   bbaba:	50a7      	str	r7, [r4, r2]
   bbabc:	b107      	cbz	r7, bbac0 <rshift+0x68>
   bbabe:	3304      	adds	r3, #4
   bbac0:	1b1a      	subs	r2, r3, r4
   bbac2:	42a3      	cmp	r3, r4
   bbac4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bbac8:	bf08      	it	eq
   bbaca:	2300      	moveq	r3, #0
   bbacc:	6102      	str	r2, [r0, #16]
   bbace:	bf08      	it	eq
   bbad0:	6143      	streq	r3, [r0, #20]
   bbad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bbad6:	f8dc c000 	ldr.w	ip, [ip]
   bbada:	fa0c fc08 	lsl.w	ip, ip, r8
   bbade:	ea4c 0707 	orr.w	r7, ip, r7
   bbae2:	f849 7b04 	str.w	r7, [r9], #4
   bbae6:	f85e 7b04 	ldr.w	r7, [lr], #4
   bbaea:	40cf      	lsrs	r7, r1
   bbaec:	e7da      	b.n	bbaa4 <rshift+0x4c>
   bbaee:	f851 cb04 	ldr.w	ip, [r1], #4
   bbaf2:	f847 cf04 	str.w	ip, [r7, #4]!
   bbaf6:	e7c3      	b.n	bba80 <rshift+0x28>
   bbaf8:	4623      	mov	r3, r4
   bbafa:	e7e1      	b.n	bbac0 <rshift+0x68>

000bbafc <__hexdig_fun>:
   bbafc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bbb00:	2b09      	cmp	r3, #9
   bbb02:	d802      	bhi.n	bbb0a <__hexdig_fun+0xe>
   bbb04:	3820      	subs	r0, #32
   bbb06:	b2c0      	uxtb	r0, r0
   bbb08:	4770      	bx	lr
   bbb0a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bbb0e:	2b05      	cmp	r3, #5
   bbb10:	d801      	bhi.n	bbb16 <__hexdig_fun+0x1a>
   bbb12:	3847      	subs	r0, #71	; 0x47
   bbb14:	e7f7      	b.n	bbb06 <__hexdig_fun+0xa>
   bbb16:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bbb1a:	2b05      	cmp	r3, #5
   bbb1c:	d801      	bhi.n	bbb22 <__hexdig_fun+0x26>
   bbb1e:	3827      	subs	r0, #39	; 0x27
   bbb20:	e7f1      	b.n	bbb06 <__hexdig_fun+0xa>
   bbb22:	2000      	movs	r0, #0
   bbb24:	4770      	bx	lr
	...

000bbb28 <__gethex>:
   bbb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbb2c:	ed2d 8b02 	vpush	{d8}
   bbb30:	b089      	sub	sp, #36	; 0x24
   bbb32:	ee08 0a10 	vmov	s16, r0
   bbb36:	9304      	str	r3, [sp, #16]
   bbb38:	4bb4      	ldr	r3, [pc, #720]	; (bbe0c <__gethex+0x2e4>)
   bbb3a:	681b      	ldr	r3, [r3, #0]
   bbb3c:	9301      	str	r3, [sp, #4]
   bbb3e:	4618      	mov	r0, r3
   bbb40:	468b      	mov	fp, r1
   bbb42:	4690      	mov	r8, r2
   bbb44:	f7ff f82c 	bl	baba0 <strlen>
   bbb48:	9b01      	ldr	r3, [sp, #4]
   bbb4a:	f8db 2000 	ldr.w	r2, [fp]
   bbb4e:	4403      	add	r3, r0
   bbb50:	4682      	mov	sl, r0
   bbb52:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bbb56:	9305      	str	r3, [sp, #20]
   bbb58:	1c93      	adds	r3, r2, #2
   bbb5a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bbb5e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bbb62:	32fe      	adds	r2, #254	; 0xfe
   bbb64:	18d1      	adds	r1, r2, r3
   bbb66:	461f      	mov	r7, r3
   bbb68:	f813 0b01 	ldrb.w	r0, [r3], #1
   bbb6c:	9100      	str	r1, [sp, #0]
   bbb6e:	2830      	cmp	r0, #48	; 0x30
   bbb70:	d0f8      	beq.n	bbb64 <__gethex+0x3c>
   bbb72:	f7ff ffc3 	bl	bbafc <__hexdig_fun>
   bbb76:	4604      	mov	r4, r0
   bbb78:	2800      	cmp	r0, #0
   bbb7a:	d13a      	bne.n	bbbf2 <__gethex+0xca>
   bbb7c:	9901      	ldr	r1, [sp, #4]
   bbb7e:	4652      	mov	r2, sl
   bbb80:	4638      	mov	r0, r7
   bbb82:	f7ff f815 	bl	babb0 <strncmp>
   bbb86:	4605      	mov	r5, r0
   bbb88:	2800      	cmp	r0, #0
   bbb8a:	d168      	bne.n	bbc5e <__gethex+0x136>
   bbb8c:	f817 000a 	ldrb.w	r0, [r7, sl]
   bbb90:	eb07 060a 	add.w	r6, r7, sl
   bbb94:	f7ff ffb2 	bl	bbafc <__hexdig_fun>
   bbb98:	2800      	cmp	r0, #0
   bbb9a:	d062      	beq.n	bbc62 <__gethex+0x13a>
   bbb9c:	4633      	mov	r3, r6
   bbb9e:	7818      	ldrb	r0, [r3, #0]
   bbba0:	2830      	cmp	r0, #48	; 0x30
   bbba2:	461f      	mov	r7, r3
   bbba4:	f103 0301 	add.w	r3, r3, #1
   bbba8:	d0f9      	beq.n	bbb9e <__gethex+0x76>
   bbbaa:	f7ff ffa7 	bl	bbafc <__hexdig_fun>
   bbbae:	2301      	movs	r3, #1
   bbbb0:	fab0 f480 	clz	r4, r0
   bbbb4:	0964      	lsrs	r4, r4, #5
   bbbb6:	4635      	mov	r5, r6
   bbbb8:	9300      	str	r3, [sp, #0]
   bbbba:	463a      	mov	r2, r7
   bbbbc:	4616      	mov	r6, r2
   bbbbe:	3201      	adds	r2, #1
   bbbc0:	7830      	ldrb	r0, [r6, #0]
   bbbc2:	f7ff ff9b 	bl	bbafc <__hexdig_fun>
   bbbc6:	2800      	cmp	r0, #0
   bbbc8:	d1f8      	bne.n	bbbbc <__gethex+0x94>
   bbbca:	9901      	ldr	r1, [sp, #4]
   bbbcc:	4652      	mov	r2, sl
   bbbce:	4630      	mov	r0, r6
   bbbd0:	f7fe ffee 	bl	babb0 <strncmp>
   bbbd4:	b980      	cbnz	r0, bbbf8 <__gethex+0xd0>
   bbbd6:	b94d      	cbnz	r5, bbbec <__gethex+0xc4>
   bbbd8:	eb06 050a 	add.w	r5, r6, sl
   bbbdc:	462a      	mov	r2, r5
   bbbde:	4616      	mov	r6, r2
   bbbe0:	3201      	adds	r2, #1
   bbbe2:	7830      	ldrb	r0, [r6, #0]
   bbbe4:	f7ff ff8a 	bl	bbafc <__hexdig_fun>
   bbbe8:	2800      	cmp	r0, #0
   bbbea:	d1f8      	bne.n	bbbde <__gethex+0xb6>
   bbbec:	1bad      	subs	r5, r5, r6
   bbbee:	00ad      	lsls	r5, r5, #2
   bbbf0:	e004      	b.n	bbbfc <__gethex+0xd4>
   bbbf2:	2400      	movs	r4, #0
   bbbf4:	4625      	mov	r5, r4
   bbbf6:	e7e0      	b.n	bbbba <__gethex+0x92>
   bbbf8:	2d00      	cmp	r5, #0
   bbbfa:	d1f7      	bne.n	bbbec <__gethex+0xc4>
   bbbfc:	7833      	ldrb	r3, [r6, #0]
   bbbfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bbc02:	2b50      	cmp	r3, #80	; 0x50
   bbc04:	d13b      	bne.n	bbc7e <__gethex+0x156>
   bbc06:	7873      	ldrb	r3, [r6, #1]
   bbc08:	2b2b      	cmp	r3, #43	; 0x2b
   bbc0a:	d02c      	beq.n	bbc66 <__gethex+0x13e>
   bbc0c:	2b2d      	cmp	r3, #45	; 0x2d
   bbc0e:	d02e      	beq.n	bbc6e <__gethex+0x146>
   bbc10:	1c71      	adds	r1, r6, #1
   bbc12:	f04f 0900 	mov.w	r9, #0
   bbc16:	7808      	ldrb	r0, [r1, #0]
   bbc18:	f7ff ff70 	bl	bbafc <__hexdig_fun>
   bbc1c:	1e43      	subs	r3, r0, #1
   bbc1e:	b2db      	uxtb	r3, r3
   bbc20:	2b18      	cmp	r3, #24
   bbc22:	d82c      	bhi.n	bbc7e <__gethex+0x156>
   bbc24:	f1a0 0210 	sub.w	r2, r0, #16
   bbc28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bbc2c:	f7ff ff66 	bl	bbafc <__hexdig_fun>
   bbc30:	1e43      	subs	r3, r0, #1
   bbc32:	b2db      	uxtb	r3, r3
   bbc34:	2b18      	cmp	r3, #24
   bbc36:	d91d      	bls.n	bbc74 <__gethex+0x14c>
   bbc38:	f1b9 0f00 	cmp.w	r9, #0
   bbc3c:	d000      	beq.n	bbc40 <__gethex+0x118>
   bbc3e:	4252      	negs	r2, r2
   bbc40:	4415      	add	r5, r2
   bbc42:	f8cb 1000 	str.w	r1, [fp]
   bbc46:	b1e4      	cbz	r4, bbc82 <__gethex+0x15a>
   bbc48:	9b00      	ldr	r3, [sp, #0]
   bbc4a:	2b00      	cmp	r3, #0
   bbc4c:	bf14      	ite	ne
   bbc4e:	2700      	movne	r7, #0
   bbc50:	2706      	moveq	r7, #6
   bbc52:	4638      	mov	r0, r7
   bbc54:	b009      	add	sp, #36	; 0x24
   bbc56:	ecbd 8b02 	vpop	{d8}
   bbc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbc5e:	463e      	mov	r6, r7
   bbc60:	4625      	mov	r5, r4
   bbc62:	2401      	movs	r4, #1
   bbc64:	e7ca      	b.n	bbbfc <__gethex+0xd4>
   bbc66:	f04f 0900 	mov.w	r9, #0
   bbc6a:	1cb1      	adds	r1, r6, #2
   bbc6c:	e7d3      	b.n	bbc16 <__gethex+0xee>
   bbc6e:	f04f 0901 	mov.w	r9, #1
   bbc72:	e7fa      	b.n	bbc6a <__gethex+0x142>
   bbc74:	230a      	movs	r3, #10
   bbc76:	fb03 0202 	mla	r2, r3, r2, r0
   bbc7a:	3a10      	subs	r2, #16
   bbc7c:	e7d4      	b.n	bbc28 <__gethex+0x100>
   bbc7e:	4631      	mov	r1, r6
   bbc80:	e7df      	b.n	bbc42 <__gethex+0x11a>
   bbc82:	1bf3      	subs	r3, r6, r7
   bbc84:	3b01      	subs	r3, #1
   bbc86:	4621      	mov	r1, r4
   bbc88:	2b07      	cmp	r3, #7
   bbc8a:	dc0b      	bgt.n	bbca4 <__gethex+0x17c>
   bbc8c:	ee18 0a10 	vmov	r0, s16
   bbc90:	f000 fa68 	bl	bc164 <_Balloc>
   bbc94:	4604      	mov	r4, r0
   bbc96:	b940      	cbnz	r0, bbcaa <__gethex+0x182>
   bbc98:	4b5d      	ldr	r3, [pc, #372]	; (bbe10 <__gethex+0x2e8>)
   bbc9a:	4602      	mov	r2, r0
   bbc9c:	21de      	movs	r1, #222	; 0xde
   bbc9e:	485d      	ldr	r0, [pc, #372]	; (bbe14 <__gethex+0x2ec>)
   bbca0:	f7fb fb68 	bl	b7374 <__assert_func>
   bbca4:	3101      	adds	r1, #1
   bbca6:	105b      	asrs	r3, r3, #1
   bbca8:	e7ee      	b.n	bbc88 <__gethex+0x160>
   bbcaa:	f100 0914 	add.w	r9, r0, #20
   bbcae:	f04f 0b00 	mov.w	fp, #0
   bbcb2:	f1ca 0301 	rsb	r3, sl, #1
   bbcb6:	f8cd 9008 	str.w	r9, [sp, #8]
   bbcba:	f8cd b000 	str.w	fp, [sp]
   bbcbe:	9306      	str	r3, [sp, #24]
   bbcc0:	42b7      	cmp	r7, r6
   bbcc2:	d340      	bcc.n	bbd46 <__gethex+0x21e>
   bbcc4:	9802      	ldr	r0, [sp, #8]
   bbcc6:	9b00      	ldr	r3, [sp, #0]
   bbcc8:	f840 3b04 	str.w	r3, [r0], #4
   bbccc:	eba0 0009 	sub.w	r0, r0, r9
   bbcd0:	1080      	asrs	r0, r0, #2
   bbcd2:	0146      	lsls	r6, r0, #5
   bbcd4:	6120      	str	r0, [r4, #16]
   bbcd6:	4618      	mov	r0, r3
   bbcd8:	f000 fb36 	bl	bc348 <__hi0bits>
   bbcdc:	1a30      	subs	r0, r6, r0
   bbcde:	f8d8 6000 	ldr.w	r6, [r8]
   bbce2:	42b0      	cmp	r0, r6
   bbce4:	dd63      	ble.n	bbdae <__gethex+0x286>
   bbce6:	1b87      	subs	r7, r0, r6
   bbce8:	4639      	mov	r1, r7
   bbcea:	4620      	mov	r0, r4
   bbcec:	f000 feda 	bl	bcaa4 <__any_on>
   bbcf0:	4682      	mov	sl, r0
   bbcf2:	b1a8      	cbz	r0, bbd20 <__gethex+0x1f8>
   bbcf4:	1e7b      	subs	r3, r7, #1
   bbcf6:	1159      	asrs	r1, r3, #5
   bbcf8:	f003 021f 	and.w	r2, r3, #31
   bbcfc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bbd00:	f04f 0a01 	mov.w	sl, #1
   bbd04:	fa0a f202 	lsl.w	r2, sl, r2
   bbd08:	420a      	tst	r2, r1
   bbd0a:	d009      	beq.n	bbd20 <__gethex+0x1f8>
   bbd0c:	4553      	cmp	r3, sl
   bbd0e:	dd05      	ble.n	bbd1c <__gethex+0x1f4>
   bbd10:	1eb9      	subs	r1, r7, #2
   bbd12:	4620      	mov	r0, r4
   bbd14:	f000 fec6 	bl	bcaa4 <__any_on>
   bbd18:	2800      	cmp	r0, #0
   bbd1a:	d145      	bne.n	bbda8 <__gethex+0x280>
   bbd1c:	f04f 0a02 	mov.w	sl, #2
   bbd20:	4639      	mov	r1, r7
   bbd22:	4620      	mov	r0, r4
   bbd24:	f7ff fe98 	bl	bba58 <rshift>
   bbd28:	443d      	add	r5, r7
   bbd2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bbd2e:	42ab      	cmp	r3, r5
   bbd30:	da4c      	bge.n	bbdcc <__gethex+0x2a4>
   bbd32:	ee18 0a10 	vmov	r0, s16
   bbd36:	4621      	mov	r1, r4
   bbd38:	f000 fa54 	bl	bc1e4 <_Bfree>
   bbd3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bbd3e:	2300      	movs	r3, #0
   bbd40:	6013      	str	r3, [r2, #0]
   bbd42:	27a3      	movs	r7, #163	; 0xa3
   bbd44:	e785      	b.n	bbc52 <__gethex+0x12a>
   bbd46:	1e73      	subs	r3, r6, #1
   bbd48:	9a05      	ldr	r2, [sp, #20]
   bbd4a:	9303      	str	r3, [sp, #12]
   bbd4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bbd50:	4293      	cmp	r3, r2
   bbd52:	d019      	beq.n	bbd88 <__gethex+0x260>
   bbd54:	f1bb 0f20 	cmp.w	fp, #32
   bbd58:	d107      	bne.n	bbd6a <__gethex+0x242>
   bbd5a:	9b02      	ldr	r3, [sp, #8]
   bbd5c:	9a00      	ldr	r2, [sp, #0]
   bbd5e:	f843 2b04 	str.w	r2, [r3], #4
   bbd62:	9302      	str	r3, [sp, #8]
   bbd64:	2300      	movs	r3, #0
   bbd66:	9300      	str	r3, [sp, #0]
   bbd68:	469b      	mov	fp, r3
   bbd6a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bbd6e:	f7ff fec5 	bl	bbafc <__hexdig_fun>
   bbd72:	9b00      	ldr	r3, [sp, #0]
   bbd74:	f000 000f 	and.w	r0, r0, #15
   bbd78:	fa00 f00b 	lsl.w	r0, r0, fp
   bbd7c:	4303      	orrs	r3, r0
   bbd7e:	9300      	str	r3, [sp, #0]
   bbd80:	f10b 0b04 	add.w	fp, fp, #4
   bbd84:	9b03      	ldr	r3, [sp, #12]
   bbd86:	e00d      	b.n	bbda4 <__gethex+0x27c>
   bbd88:	9b03      	ldr	r3, [sp, #12]
   bbd8a:	9a06      	ldr	r2, [sp, #24]
   bbd8c:	4413      	add	r3, r2
   bbd8e:	42bb      	cmp	r3, r7
   bbd90:	d3e0      	bcc.n	bbd54 <__gethex+0x22c>
   bbd92:	4618      	mov	r0, r3
   bbd94:	9901      	ldr	r1, [sp, #4]
   bbd96:	9307      	str	r3, [sp, #28]
   bbd98:	4652      	mov	r2, sl
   bbd9a:	f7fe ff09 	bl	babb0 <strncmp>
   bbd9e:	9b07      	ldr	r3, [sp, #28]
   bbda0:	2800      	cmp	r0, #0
   bbda2:	d1d7      	bne.n	bbd54 <__gethex+0x22c>
   bbda4:	461e      	mov	r6, r3
   bbda6:	e78b      	b.n	bbcc0 <__gethex+0x198>
   bbda8:	f04f 0a03 	mov.w	sl, #3
   bbdac:	e7b8      	b.n	bbd20 <__gethex+0x1f8>
   bbdae:	da0a      	bge.n	bbdc6 <__gethex+0x29e>
   bbdb0:	1a37      	subs	r7, r6, r0
   bbdb2:	4621      	mov	r1, r4
   bbdb4:	ee18 0a10 	vmov	r0, s16
   bbdb8:	463a      	mov	r2, r7
   bbdba:	f000 fc2f 	bl	bc61c <__lshift>
   bbdbe:	1bed      	subs	r5, r5, r7
   bbdc0:	4604      	mov	r4, r0
   bbdc2:	f100 0914 	add.w	r9, r0, #20
   bbdc6:	f04f 0a00 	mov.w	sl, #0
   bbdca:	e7ae      	b.n	bbd2a <__gethex+0x202>
   bbdcc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bbdd0:	42a8      	cmp	r0, r5
   bbdd2:	dd72      	ble.n	bbeba <__gethex+0x392>
   bbdd4:	1b45      	subs	r5, r0, r5
   bbdd6:	42ae      	cmp	r6, r5
   bbdd8:	dc36      	bgt.n	bbe48 <__gethex+0x320>
   bbdda:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bbdde:	2b02      	cmp	r3, #2
   bbde0:	d02a      	beq.n	bbe38 <__gethex+0x310>
   bbde2:	2b03      	cmp	r3, #3
   bbde4:	d02c      	beq.n	bbe40 <__gethex+0x318>
   bbde6:	2b01      	cmp	r3, #1
   bbde8:	d11c      	bne.n	bbe24 <__gethex+0x2fc>
   bbdea:	42ae      	cmp	r6, r5
   bbdec:	d11a      	bne.n	bbe24 <__gethex+0x2fc>
   bbdee:	2e01      	cmp	r6, #1
   bbdf0:	d112      	bne.n	bbe18 <__gethex+0x2f0>
   bbdf2:	9a04      	ldr	r2, [sp, #16]
   bbdf4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bbdf8:	6013      	str	r3, [r2, #0]
   bbdfa:	2301      	movs	r3, #1
   bbdfc:	6123      	str	r3, [r4, #16]
   bbdfe:	f8c9 3000 	str.w	r3, [r9]
   bbe02:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bbe04:	2762      	movs	r7, #98	; 0x62
   bbe06:	601c      	str	r4, [r3, #0]
   bbe08:	e723      	b.n	bbc52 <__gethex+0x12a>
   bbe0a:	bf00      	nop
   bbe0c:	000bd7cc 	.word	0x000bd7cc
   bbe10:	000bd759 	.word	0x000bd759
   bbe14:	000bd76a 	.word	0x000bd76a
   bbe18:	1e71      	subs	r1, r6, #1
   bbe1a:	4620      	mov	r0, r4
   bbe1c:	f000 fe42 	bl	bcaa4 <__any_on>
   bbe20:	2800      	cmp	r0, #0
   bbe22:	d1e6      	bne.n	bbdf2 <__gethex+0x2ca>
   bbe24:	ee18 0a10 	vmov	r0, s16
   bbe28:	4621      	mov	r1, r4
   bbe2a:	f000 f9db 	bl	bc1e4 <_Bfree>
   bbe2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bbe30:	2300      	movs	r3, #0
   bbe32:	6013      	str	r3, [r2, #0]
   bbe34:	2750      	movs	r7, #80	; 0x50
   bbe36:	e70c      	b.n	bbc52 <__gethex+0x12a>
   bbe38:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bbe3a:	2b00      	cmp	r3, #0
   bbe3c:	d1f2      	bne.n	bbe24 <__gethex+0x2fc>
   bbe3e:	e7d8      	b.n	bbdf2 <__gethex+0x2ca>
   bbe40:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bbe42:	2b00      	cmp	r3, #0
   bbe44:	d1d5      	bne.n	bbdf2 <__gethex+0x2ca>
   bbe46:	e7ed      	b.n	bbe24 <__gethex+0x2fc>
   bbe48:	1e6f      	subs	r7, r5, #1
   bbe4a:	f1ba 0f00 	cmp.w	sl, #0
   bbe4e:	d131      	bne.n	bbeb4 <__gethex+0x38c>
   bbe50:	b127      	cbz	r7, bbe5c <__gethex+0x334>
   bbe52:	4639      	mov	r1, r7
   bbe54:	4620      	mov	r0, r4
   bbe56:	f000 fe25 	bl	bcaa4 <__any_on>
   bbe5a:	4682      	mov	sl, r0
   bbe5c:	117b      	asrs	r3, r7, #5
   bbe5e:	2101      	movs	r1, #1
   bbe60:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bbe64:	f007 071f 	and.w	r7, r7, #31
   bbe68:	fa01 f707 	lsl.w	r7, r1, r7
   bbe6c:	421f      	tst	r7, r3
   bbe6e:	4629      	mov	r1, r5
   bbe70:	4620      	mov	r0, r4
   bbe72:	bf18      	it	ne
   bbe74:	f04a 0a02 	orrne.w	sl, sl, #2
   bbe78:	1b76      	subs	r6, r6, r5
   bbe7a:	f7ff fded 	bl	bba58 <rshift>
   bbe7e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bbe82:	2702      	movs	r7, #2
   bbe84:	f1ba 0f00 	cmp.w	sl, #0
   bbe88:	d048      	beq.n	bbf1c <__gethex+0x3f4>
   bbe8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bbe8e:	2b02      	cmp	r3, #2
   bbe90:	d015      	beq.n	bbebe <__gethex+0x396>
   bbe92:	2b03      	cmp	r3, #3
   bbe94:	d017      	beq.n	bbec6 <__gethex+0x39e>
   bbe96:	2b01      	cmp	r3, #1
   bbe98:	d109      	bne.n	bbeae <__gethex+0x386>
   bbe9a:	f01a 0f02 	tst.w	sl, #2
   bbe9e:	d006      	beq.n	bbeae <__gethex+0x386>
   bbea0:	f8d9 0000 	ldr.w	r0, [r9]
   bbea4:	ea4a 0a00 	orr.w	sl, sl, r0
   bbea8:	f01a 0f01 	tst.w	sl, #1
   bbeac:	d10e      	bne.n	bbecc <__gethex+0x3a4>
   bbeae:	f047 0710 	orr.w	r7, r7, #16
   bbeb2:	e033      	b.n	bbf1c <__gethex+0x3f4>
   bbeb4:	f04f 0a01 	mov.w	sl, #1
   bbeb8:	e7d0      	b.n	bbe5c <__gethex+0x334>
   bbeba:	2701      	movs	r7, #1
   bbebc:	e7e2      	b.n	bbe84 <__gethex+0x35c>
   bbebe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bbec0:	f1c3 0301 	rsb	r3, r3, #1
   bbec4:	9315      	str	r3, [sp, #84]	; 0x54
   bbec6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bbec8:	2b00      	cmp	r3, #0
   bbeca:	d0f0      	beq.n	bbeae <__gethex+0x386>
   bbecc:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bbed0:	f104 0314 	add.w	r3, r4, #20
   bbed4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bbed8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bbedc:	f04f 0c00 	mov.w	ip, #0
   bbee0:	4618      	mov	r0, r3
   bbee2:	f853 2b04 	ldr.w	r2, [r3], #4
   bbee6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bbeea:	d01c      	beq.n	bbf26 <__gethex+0x3fe>
   bbeec:	3201      	adds	r2, #1
   bbeee:	6002      	str	r2, [r0, #0]
   bbef0:	2f02      	cmp	r7, #2
   bbef2:	f104 0314 	add.w	r3, r4, #20
   bbef6:	d13f      	bne.n	bbf78 <__gethex+0x450>
   bbef8:	f8d8 2000 	ldr.w	r2, [r8]
   bbefc:	3a01      	subs	r2, #1
   bbefe:	42b2      	cmp	r2, r6
   bbf00:	d10a      	bne.n	bbf18 <__gethex+0x3f0>
   bbf02:	1171      	asrs	r1, r6, #5
   bbf04:	2201      	movs	r2, #1
   bbf06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bbf0a:	f006 061f 	and.w	r6, r6, #31
   bbf0e:	fa02 f606 	lsl.w	r6, r2, r6
   bbf12:	421e      	tst	r6, r3
   bbf14:	bf18      	it	ne
   bbf16:	4617      	movne	r7, r2
   bbf18:	f047 0720 	orr.w	r7, r7, #32
   bbf1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bbf1e:	601c      	str	r4, [r3, #0]
   bbf20:	9b04      	ldr	r3, [sp, #16]
   bbf22:	601d      	str	r5, [r3, #0]
   bbf24:	e695      	b.n	bbc52 <__gethex+0x12a>
   bbf26:	4299      	cmp	r1, r3
   bbf28:	f843 cc04 	str.w	ip, [r3, #-4]
   bbf2c:	d8d8      	bhi.n	bbee0 <__gethex+0x3b8>
   bbf2e:	68a3      	ldr	r3, [r4, #8]
   bbf30:	459b      	cmp	fp, r3
   bbf32:	db19      	blt.n	bbf68 <__gethex+0x440>
   bbf34:	6861      	ldr	r1, [r4, #4]
   bbf36:	ee18 0a10 	vmov	r0, s16
   bbf3a:	3101      	adds	r1, #1
   bbf3c:	f000 f912 	bl	bc164 <_Balloc>
   bbf40:	4681      	mov	r9, r0
   bbf42:	b918      	cbnz	r0, bbf4c <__gethex+0x424>
   bbf44:	4b1a      	ldr	r3, [pc, #104]	; (bbfb0 <__gethex+0x488>)
   bbf46:	4602      	mov	r2, r0
   bbf48:	2184      	movs	r1, #132	; 0x84
   bbf4a:	e6a8      	b.n	bbc9e <__gethex+0x176>
   bbf4c:	6922      	ldr	r2, [r4, #16]
   bbf4e:	3202      	adds	r2, #2
   bbf50:	f104 010c 	add.w	r1, r4, #12
   bbf54:	0092      	lsls	r2, r2, #2
   bbf56:	300c      	adds	r0, #12
   bbf58:	f7fe fdb1 	bl	baabe <memcpy>
   bbf5c:	4621      	mov	r1, r4
   bbf5e:	ee18 0a10 	vmov	r0, s16
   bbf62:	f000 f93f 	bl	bc1e4 <_Bfree>
   bbf66:	464c      	mov	r4, r9
   bbf68:	6923      	ldr	r3, [r4, #16]
   bbf6a:	1c5a      	adds	r2, r3, #1
   bbf6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bbf70:	6122      	str	r2, [r4, #16]
   bbf72:	2201      	movs	r2, #1
   bbf74:	615a      	str	r2, [r3, #20]
   bbf76:	e7bb      	b.n	bbef0 <__gethex+0x3c8>
   bbf78:	6922      	ldr	r2, [r4, #16]
   bbf7a:	455a      	cmp	r2, fp
   bbf7c:	dd0b      	ble.n	bbf96 <__gethex+0x46e>
   bbf7e:	2101      	movs	r1, #1
   bbf80:	4620      	mov	r0, r4
   bbf82:	f7ff fd69 	bl	bba58 <rshift>
   bbf86:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bbf8a:	3501      	adds	r5, #1
   bbf8c:	42ab      	cmp	r3, r5
   bbf8e:	f6ff aed0 	blt.w	bbd32 <__gethex+0x20a>
   bbf92:	2701      	movs	r7, #1
   bbf94:	e7c0      	b.n	bbf18 <__gethex+0x3f0>
   bbf96:	f016 061f 	ands.w	r6, r6, #31
   bbf9a:	d0fa      	beq.n	bbf92 <__gethex+0x46a>
   bbf9c:	4453      	add	r3, sl
   bbf9e:	f1c6 0620 	rsb	r6, r6, #32
   bbfa2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bbfa6:	f000 f9cf 	bl	bc348 <__hi0bits>
   bbfaa:	42b0      	cmp	r0, r6
   bbfac:	dbe7      	blt.n	bbf7e <__gethex+0x456>
   bbfae:	e7f0      	b.n	bbf92 <__gethex+0x46a>
   bbfb0:	000bd759 	.word	0x000bd759

000bbfb4 <L_shift>:
   bbfb4:	f1c2 0208 	rsb	r2, r2, #8
   bbfb8:	0092      	lsls	r2, r2, #2
   bbfba:	b570      	push	{r4, r5, r6, lr}
   bbfbc:	f1c2 0620 	rsb	r6, r2, #32
   bbfc0:	6843      	ldr	r3, [r0, #4]
   bbfc2:	6804      	ldr	r4, [r0, #0]
   bbfc4:	fa03 f506 	lsl.w	r5, r3, r6
   bbfc8:	432c      	orrs	r4, r5
   bbfca:	40d3      	lsrs	r3, r2
   bbfcc:	6004      	str	r4, [r0, #0]
   bbfce:	f840 3f04 	str.w	r3, [r0, #4]!
   bbfd2:	4288      	cmp	r0, r1
   bbfd4:	d3f4      	bcc.n	bbfc0 <L_shift+0xc>
   bbfd6:	bd70      	pop	{r4, r5, r6, pc}

000bbfd8 <__match>:
   bbfd8:	b530      	push	{r4, r5, lr}
   bbfda:	6803      	ldr	r3, [r0, #0]
   bbfdc:	3301      	adds	r3, #1
   bbfde:	f811 4b01 	ldrb.w	r4, [r1], #1
   bbfe2:	b914      	cbnz	r4, bbfea <__match+0x12>
   bbfe4:	6003      	str	r3, [r0, #0]
   bbfe6:	2001      	movs	r0, #1
   bbfe8:	bd30      	pop	{r4, r5, pc}
   bbfea:	f813 2b01 	ldrb.w	r2, [r3], #1
   bbfee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bbff2:	2d19      	cmp	r5, #25
   bbff4:	bf98      	it	ls
   bbff6:	3220      	addls	r2, #32
   bbff8:	42a2      	cmp	r2, r4
   bbffa:	d0f0      	beq.n	bbfde <__match+0x6>
   bbffc:	2000      	movs	r0, #0
   bbffe:	e7f3      	b.n	bbfe8 <__match+0x10>

000bc000 <__hexnan>:
   bc000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc004:	680b      	ldr	r3, [r1, #0]
   bc006:	115e      	asrs	r6, r3, #5
   bc008:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bc00c:	f013 031f 	ands.w	r3, r3, #31
   bc010:	b087      	sub	sp, #28
   bc012:	bf18      	it	ne
   bc014:	3604      	addne	r6, #4
   bc016:	2500      	movs	r5, #0
   bc018:	1f37      	subs	r7, r6, #4
   bc01a:	4690      	mov	r8, r2
   bc01c:	6802      	ldr	r2, [r0, #0]
   bc01e:	9301      	str	r3, [sp, #4]
   bc020:	4682      	mov	sl, r0
   bc022:	f846 5c04 	str.w	r5, [r6, #-4]
   bc026:	46b9      	mov	r9, r7
   bc028:	463c      	mov	r4, r7
   bc02a:	9502      	str	r5, [sp, #8]
   bc02c:	46ab      	mov	fp, r5
   bc02e:	7851      	ldrb	r1, [r2, #1]
   bc030:	1c53      	adds	r3, r2, #1
   bc032:	9303      	str	r3, [sp, #12]
   bc034:	b341      	cbz	r1, bc088 <__hexnan+0x88>
   bc036:	4608      	mov	r0, r1
   bc038:	9205      	str	r2, [sp, #20]
   bc03a:	9104      	str	r1, [sp, #16]
   bc03c:	f7ff fd5e 	bl	bbafc <__hexdig_fun>
   bc040:	2800      	cmp	r0, #0
   bc042:	d14f      	bne.n	bc0e4 <__hexnan+0xe4>
   bc044:	9904      	ldr	r1, [sp, #16]
   bc046:	9a05      	ldr	r2, [sp, #20]
   bc048:	2920      	cmp	r1, #32
   bc04a:	d818      	bhi.n	bc07e <__hexnan+0x7e>
   bc04c:	9b02      	ldr	r3, [sp, #8]
   bc04e:	459b      	cmp	fp, r3
   bc050:	dd13      	ble.n	bc07a <__hexnan+0x7a>
   bc052:	454c      	cmp	r4, r9
   bc054:	d206      	bcs.n	bc064 <__hexnan+0x64>
   bc056:	2d07      	cmp	r5, #7
   bc058:	dc04      	bgt.n	bc064 <__hexnan+0x64>
   bc05a:	462a      	mov	r2, r5
   bc05c:	4649      	mov	r1, r9
   bc05e:	4620      	mov	r0, r4
   bc060:	f7ff ffa8 	bl	bbfb4 <L_shift>
   bc064:	4544      	cmp	r4, r8
   bc066:	d950      	bls.n	bc10a <__hexnan+0x10a>
   bc068:	2300      	movs	r3, #0
   bc06a:	f1a4 0904 	sub.w	r9, r4, #4
   bc06e:	f844 3c04 	str.w	r3, [r4, #-4]
   bc072:	f8cd b008 	str.w	fp, [sp, #8]
   bc076:	464c      	mov	r4, r9
   bc078:	461d      	mov	r5, r3
   bc07a:	9a03      	ldr	r2, [sp, #12]
   bc07c:	e7d7      	b.n	bc02e <__hexnan+0x2e>
   bc07e:	2929      	cmp	r1, #41	; 0x29
   bc080:	d156      	bne.n	bc130 <__hexnan+0x130>
   bc082:	3202      	adds	r2, #2
   bc084:	f8ca 2000 	str.w	r2, [sl]
   bc088:	f1bb 0f00 	cmp.w	fp, #0
   bc08c:	d050      	beq.n	bc130 <__hexnan+0x130>
   bc08e:	454c      	cmp	r4, r9
   bc090:	d206      	bcs.n	bc0a0 <__hexnan+0xa0>
   bc092:	2d07      	cmp	r5, #7
   bc094:	dc04      	bgt.n	bc0a0 <__hexnan+0xa0>
   bc096:	462a      	mov	r2, r5
   bc098:	4649      	mov	r1, r9
   bc09a:	4620      	mov	r0, r4
   bc09c:	f7ff ff8a 	bl	bbfb4 <L_shift>
   bc0a0:	4544      	cmp	r4, r8
   bc0a2:	d934      	bls.n	bc10e <__hexnan+0x10e>
   bc0a4:	f1a8 0204 	sub.w	r2, r8, #4
   bc0a8:	4623      	mov	r3, r4
   bc0aa:	f853 1b04 	ldr.w	r1, [r3], #4
   bc0ae:	f842 1f04 	str.w	r1, [r2, #4]!
   bc0b2:	429f      	cmp	r7, r3
   bc0b4:	d2f9      	bcs.n	bc0aa <__hexnan+0xaa>
   bc0b6:	1b3b      	subs	r3, r7, r4
   bc0b8:	f023 0303 	bic.w	r3, r3, #3
   bc0bc:	3304      	adds	r3, #4
   bc0be:	3401      	adds	r4, #1
   bc0c0:	3e03      	subs	r6, #3
   bc0c2:	42b4      	cmp	r4, r6
   bc0c4:	bf88      	it	hi
   bc0c6:	2304      	movhi	r3, #4
   bc0c8:	4443      	add	r3, r8
   bc0ca:	2200      	movs	r2, #0
   bc0cc:	f843 2b04 	str.w	r2, [r3], #4
   bc0d0:	429f      	cmp	r7, r3
   bc0d2:	d2fb      	bcs.n	bc0cc <__hexnan+0xcc>
   bc0d4:	683b      	ldr	r3, [r7, #0]
   bc0d6:	b91b      	cbnz	r3, bc0e0 <__hexnan+0xe0>
   bc0d8:	4547      	cmp	r7, r8
   bc0da:	d127      	bne.n	bc12c <__hexnan+0x12c>
   bc0dc:	2301      	movs	r3, #1
   bc0de:	603b      	str	r3, [r7, #0]
   bc0e0:	2005      	movs	r0, #5
   bc0e2:	e026      	b.n	bc132 <__hexnan+0x132>
   bc0e4:	3501      	adds	r5, #1
   bc0e6:	2d08      	cmp	r5, #8
   bc0e8:	f10b 0b01 	add.w	fp, fp, #1
   bc0ec:	dd06      	ble.n	bc0fc <__hexnan+0xfc>
   bc0ee:	4544      	cmp	r4, r8
   bc0f0:	d9c3      	bls.n	bc07a <__hexnan+0x7a>
   bc0f2:	2300      	movs	r3, #0
   bc0f4:	f844 3c04 	str.w	r3, [r4, #-4]
   bc0f8:	2501      	movs	r5, #1
   bc0fa:	3c04      	subs	r4, #4
   bc0fc:	6822      	ldr	r2, [r4, #0]
   bc0fe:	f000 000f 	and.w	r0, r0, #15
   bc102:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bc106:	6022      	str	r2, [r4, #0]
   bc108:	e7b7      	b.n	bc07a <__hexnan+0x7a>
   bc10a:	2508      	movs	r5, #8
   bc10c:	e7b5      	b.n	bc07a <__hexnan+0x7a>
   bc10e:	9b01      	ldr	r3, [sp, #4]
   bc110:	2b00      	cmp	r3, #0
   bc112:	d0df      	beq.n	bc0d4 <__hexnan+0xd4>
   bc114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc118:	f1c3 0320 	rsb	r3, r3, #32
   bc11c:	fa22 f303 	lsr.w	r3, r2, r3
   bc120:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bc124:	401a      	ands	r2, r3
   bc126:	f846 2c04 	str.w	r2, [r6, #-4]
   bc12a:	e7d3      	b.n	bc0d4 <__hexnan+0xd4>
   bc12c:	3f04      	subs	r7, #4
   bc12e:	e7d1      	b.n	bc0d4 <__hexnan+0xd4>
   bc130:	2004      	movs	r0, #4
   bc132:	b007      	add	sp, #28
   bc134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc138 <__retarget_lock_acquire_recursive>:
   bc138:	4770      	bx	lr

000bc13a <__retarget_lock_release>:
   bc13a:	4770      	bx	lr

000bc13c <__retarget_lock_release_recursive>:
   bc13c:	4770      	bx	lr

000bc13e <__ascii_mbtowc>:
   bc13e:	b082      	sub	sp, #8
   bc140:	b901      	cbnz	r1, bc144 <__ascii_mbtowc+0x6>
   bc142:	a901      	add	r1, sp, #4
   bc144:	b142      	cbz	r2, bc158 <__ascii_mbtowc+0x1a>
   bc146:	b14b      	cbz	r3, bc15c <__ascii_mbtowc+0x1e>
   bc148:	7813      	ldrb	r3, [r2, #0]
   bc14a:	600b      	str	r3, [r1, #0]
   bc14c:	7812      	ldrb	r2, [r2, #0]
   bc14e:	1e10      	subs	r0, r2, #0
   bc150:	bf18      	it	ne
   bc152:	2001      	movne	r0, #1
   bc154:	b002      	add	sp, #8
   bc156:	4770      	bx	lr
   bc158:	4610      	mov	r0, r2
   bc15a:	e7fb      	b.n	bc154 <__ascii_mbtowc+0x16>
   bc15c:	f06f 0001 	mvn.w	r0, #1
   bc160:	e7f8      	b.n	bc154 <__ascii_mbtowc+0x16>
	...

000bc164 <_Balloc>:
   bc164:	b570      	push	{r4, r5, r6, lr}
   bc166:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bc168:	4604      	mov	r4, r0
   bc16a:	460d      	mov	r5, r1
   bc16c:	b976      	cbnz	r6, bc18c <_Balloc+0x28>
   bc16e:	2010      	movs	r0, #16
   bc170:	f7fb f8c0 	bl	b72f4 <malloc>
   bc174:	4602      	mov	r2, r0
   bc176:	6260      	str	r0, [r4, #36]	; 0x24
   bc178:	b920      	cbnz	r0, bc184 <_Balloc+0x20>
   bc17a:	4b18      	ldr	r3, [pc, #96]	; (bc1dc <_Balloc+0x78>)
   bc17c:	4818      	ldr	r0, [pc, #96]	; (bc1e0 <_Balloc+0x7c>)
   bc17e:	2166      	movs	r1, #102	; 0x66
   bc180:	f7fb f8f8 	bl	b7374 <__assert_func>
   bc184:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bc188:	6006      	str	r6, [r0, #0]
   bc18a:	60c6      	str	r6, [r0, #12]
   bc18c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bc18e:	68f3      	ldr	r3, [r6, #12]
   bc190:	b183      	cbz	r3, bc1b4 <_Balloc+0x50>
   bc192:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc194:	68db      	ldr	r3, [r3, #12]
   bc196:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bc19a:	b9b8      	cbnz	r0, bc1cc <_Balloc+0x68>
   bc19c:	2101      	movs	r1, #1
   bc19e:	fa01 f605 	lsl.w	r6, r1, r5
   bc1a2:	1d72      	adds	r2, r6, #5
   bc1a4:	0092      	lsls	r2, r2, #2
   bc1a6:	4620      	mov	r0, r4
   bc1a8:	f000 fc9d 	bl	bcae6 <_calloc_r>
   bc1ac:	b160      	cbz	r0, bc1c8 <_Balloc+0x64>
   bc1ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bc1b2:	e00e      	b.n	bc1d2 <_Balloc+0x6e>
   bc1b4:	2221      	movs	r2, #33	; 0x21
   bc1b6:	2104      	movs	r1, #4
   bc1b8:	4620      	mov	r0, r4
   bc1ba:	f000 fc94 	bl	bcae6 <_calloc_r>
   bc1be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc1c0:	60f0      	str	r0, [r6, #12]
   bc1c2:	68db      	ldr	r3, [r3, #12]
   bc1c4:	2b00      	cmp	r3, #0
   bc1c6:	d1e4      	bne.n	bc192 <_Balloc+0x2e>
   bc1c8:	2000      	movs	r0, #0
   bc1ca:	bd70      	pop	{r4, r5, r6, pc}
   bc1cc:	6802      	ldr	r2, [r0, #0]
   bc1ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bc1d2:	2300      	movs	r3, #0
   bc1d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bc1d8:	e7f7      	b.n	bc1ca <_Balloc+0x66>
   bc1da:	bf00      	nop
   bc1dc:	000bd585 	.word	0x000bd585
   bc1e0:	000bd7e0 	.word	0x000bd7e0

000bc1e4 <_Bfree>:
   bc1e4:	b570      	push	{r4, r5, r6, lr}
   bc1e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bc1e8:	4605      	mov	r5, r0
   bc1ea:	460c      	mov	r4, r1
   bc1ec:	b976      	cbnz	r6, bc20c <_Bfree+0x28>
   bc1ee:	2010      	movs	r0, #16
   bc1f0:	f7fb f880 	bl	b72f4 <malloc>
   bc1f4:	4602      	mov	r2, r0
   bc1f6:	6268      	str	r0, [r5, #36]	; 0x24
   bc1f8:	b920      	cbnz	r0, bc204 <_Bfree+0x20>
   bc1fa:	4b09      	ldr	r3, [pc, #36]	; (bc220 <_Bfree+0x3c>)
   bc1fc:	4809      	ldr	r0, [pc, #36]	; (bc224 <_Bfree+0x40>)
   bc1fe:	218a      	movs	r1, #138	; 0x8a
   bc200:	f7fb f8b8 	bl	b7374 <__assert_func>
   bc204:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bc208:	6006      	str	r6, [r0, #0]
   bc20a:	60c6      	str	r6, [r0, #12]
   bc20c:	b13c      	cbz	r4, bc21e <_Bfree+0x3a>
   bc20e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bc210:	6862      	ldr	r2, [r4, #4]
   bc212:	68db      	ldr	r3, [r3, #12]
   bc214:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bc218:	6021      	str	r1, [r4, #0]
   bc21a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bc21e:	bd70      	pop	{r4, r5, r6, pc}
   bc220:	000bd585 	.word	0x000bd585
   bc224:	000bd7e0 	.word	0x000bd7e0

000bc228 <__multadd>:
   bc228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc22c:	690d      	ldr	r5, [r1, #16]
   bc22e:	4607      	mov	r7, r0
   bc230:	460c      	mov	r4, r1
   bc232:	461e      	mov	r6, r3
   bc234:	f101 0c14 	add.w	ip, r1, #20
   bc238:	2000      	movs	r0, #0
   bc23a:	f8dc 3000 	ldr.w	r3, [ip]
   bc23e:	b299      	uxth	r1, r3
   bc240:	fb02 6101 	mla	r1, r2, r1, r6
   bc244:	0c1e      	lsrs	r6, r3, #16
   bc246:	0c0b      	lsrs	r3, r1, #16
   bc248:	fb02 3306 	mla	r3, r2, r6, r3
   bc24c:	b289      	uxth	r1, r1
   bc24e:	3001      	adds	r0, #1
   bc250:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bc254:	4285      	cmp	r5, r0
   bc256:	f84c 1b04 	str.w	r1, [ip], #4
   bc25a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bc25e:	dcec      	bgt.n	bc23a <__multadd+0x12>
   bc260:	b30e      	cbz	r6, bc2a6 <__multadd+0x7e>
   bc262:	68a3      	ldr	r3, [r4, #8]
   bc264:	42ab      	cmp	r3, r5
   bc266:	dc19      	bgt.n	bc29c <__multadd+0x74>
   bc268:	6861      	ldr	r1, [r4, #4]
   bc26a:	4638      	mov	r0, r7
   bc26c:	3101      	adds	r1, #1
   bc26e:	f7ff ff79 	bl	bc164 <_Balloc>
   bc272:	4680      	mov	r8, r0
   bc274:	b928      	cbnz	r0, bc282 <__multadd+0x5a>
   bc276:	4602      	mov	r2, r0
   bc278:	4b0c      	ldr	r3, [pc, #48]	; (bc2ac <__multadd+0x84>)
   bc27a:	480d      	ldr	r0, [pc, #52]	; (bc2b0 <__multadd+0x88>)
   bc27c:	21b5      	movs	r1, #181	; 0xb5
   bc27e:	f7fb f879 	bl	b7374 <__assert_func>
   bc282:	6922      	ldr	r2, [r4, #16]
   bc284:	3202      	adds	r2, #2
   bc286:	f104 010c 	add.w	r1, r4, #12
   bc28a:	0092      	lsls	r2, r2, #2
   bc28c:	300c      	adds	r0, #12
   bc28e:	f7fe fc16 	bl	baabe <memcpy>
   bc292:	4621      	mov	r1, r4
   bc294:	4638      	mov	r0, r7
   bc296:	f7ff ffa5 	bl	bc1e4 <_Bfree>
   bc29a:	4644      	mov	r4, r8
   bc29c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bc2a0:	3501      	adds	r5, #1
   bc2a2:	615e      	str	r6, [r3, #20]
   bc2a4:	6125      	str	r5, [r4, #16]
   bc2a6:	4620      	mov	r0, r4
   bc2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc2ac:	000bd759 	.word	0x000bd759
   bc2b0:	000bd7e0 	.word	0x000bd7e0

000bc2b4 <__s2b>:
   bc2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc2b8:	460c      	mov	r4, r1
   bc2ba:	4615      	mov	r5, r2
   bc2bc:	461f      	mov	r7, r3
   bc2be:	2209      	movs	r2, #9
   bc2c0:	3308      	adds	r3, #8
   bc2c2:	4606      	mov	r6, r0
   bc2c4:	fb93 f3f2 	sdiv	r3, r3, r2
   bc2c8:	2100      	movs	r1, #0
   bc2ca:	2201      	movs	r2, #1
   bc2cc:	429a      	cmp	r2, r3
   bc2ce:	db09      	blt.n	bc2e4 <__s2b+0x30>
   bc2d0:	4630      	mov	r0, r6
   bc2d2:	f7ff ff47 	bl	bc164 <_Balloc>
   bc2d6:	b940      	cbnz	r0, bc2ea <__s2b+0x36>
   bc2d8:	4602      	mov	r2, r0
   bc2da:	4b19      	ldr	r3, [pc, #100]	; (bc340 <__s2b+0x8c>)
   bc2dc:	4819      	ldr	r0, [pc, #100]	; (bc344 <__s2b+0x90>)
   bc2de:	21ce      	movs	r1, #206	; 0xce
   bc2e0:	f7fb f848 	bl	b7374 <__assert_func>
   bc2e4:	0052      	lsls	r2, r2, #1
   bc2e6:	3101      	adds	r1, #1
   bc2e8:	e7f0      	b.n	bc2cc <__s2b+0x18>
   bc2ea:	9b08      	ldr	r3, [sp, #32]
   bc2ec:	6143      	str	r3, [r0, #20]
   bc2ee:	2d09      	cmp	r5, #9
   bc2f0:	f04f 0301 	mov.w	r3, #1
   bc2f4:	6103      	str	r3, [r0, #16]
   bc2f6:	dd16      	ble.n	bc326 <__s2b+0x72>
   bc2f8:	f104 0909 	add.w	r9, r4, #9
   bc2fc:	46c8      	mov	r8, r9
   bc2fe:	442c      	add	r4, r5
   bc300:	f818 3b01 	ldrb.w	r3, [r8], #1
   bc304:	4601      	mov	r1, r0
   bc306:	3b30      	subs	r3, #48	; 0x30
   bc308:	220a      	movs	r2, #10
   bc30a:	4630      	mov	r0, r6
   bc30c:	f7ff ff8c 	bl	bc228 <__multadd>
   bc310:	45a0      	cmp	r8, r4
   bc312:	d1f5      	bne.n	bc300 <__s2b+0x4c>
   bc314:	f1a5 0408 	sub.w	r4, r5, #8
   bc318:	444c      	add	r4, r9
   bc31a:	1b2d      	subs	r5, r5, r4
   bc31c:	1963      	adds	r3, r4, r5
   bc31e:	42bb      	cmp	r3, r7
   bc320:	db04      	blt.n	bc32c <__s2b+0x78>
   bc322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc326:	340a      	adds	r4, #10
   bc328:	2509      	movs	r5, #9
   bc32a:	e7f6      	b.n	bc31a <__s2b+0x66>
   bc32c:	f814 3b01 	ldrb.w	r3, [r4], #1
   bc330:	4601      	mov	r1, r0
   bc332:	3b30      	subs	r3, #48	; 0x30
   bc334:	220a      	movs	r2, #10
   bc336:	4630      	mov	r0, r6
   bc338:	f7ff ff76 	bl	bc228 <__multadd>
   bc33c:	e7ee      	b.n	bc31c <__s2b+0x68>
   bc33e:	bf00      	nop
   bc340:	000bd759 	.word	0x000bd759
   bc344:	000bd7e0 	.word	0x000bd7e0

000bc348 <__hi0bits>:
   bc348:	0c03      	lsrs	r3, r0, #16
   bc34a:	041b      	lsls	r3, r3, #16
   bc34c:	b9d3      	cbnz	r3, bc384 <__hi0bits+0x3c>
   bc34e:	0400      	lsls	r0, r0, #16
   bc350:	2310      	movs	r3, #16
   bc352:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bc356:	bf04      	itt	eq
   bc358:	0200      	lsleq	r0, r0, #8
   bc35a:	3308      	addeq	r3, #8
   bc35c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bc360:	bf04      	itt	eq
   bc362:	0100      	lsleq	r0, r0, #4
   bc364:	3304      	addeq	r3, #4
   bc366:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bc36a:	bf04      	itt	eq
   bc36c:	0080      	lsleq	r0, r0, #2
   bc36e:	3302      	addeq	r3, #2
   bc370:	2800      	cmp	r0, #0
   bc372:	db05      	blt.n	bc380 <__hi0bits+0x38>
   bc374:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bc378:	f103 0301 	add.w	r3, r3, #1
   bc37c:	bf08      	it	eq
   bc37e:	2320      	moveq	r3, #32
   bc380:	4618      	mov	r0, r3
   bc382:	4770      	bx	lr
   bc384:	2300      	movs	r3, #0
   bc386:	e7e4      	b.n	bc352 <__hi0bits+0xa>

000bc388 <__lo0bits>:
   bc388:	6803      	ldr	r3, [r0, #0]
   bc38a:	f013 0207 	ands.w	r2, r3, #7
   bc38e:	4601      	mov	r1, r0
   bc390:	d00b      	beq.n	bc3aa <__lo0bits+0x22>
   bc392:	07da      	lsls	r2, r3, #31
   bc394:	d423      	bmi.n	bc3de <__lo0bits+0x56>
   bc396:	0798      	lsls	r0, r3, #30
   bc398:	bf49      	itett	mi
   bc39a:	085b      	lsrmi	r3, r3, #1
   bc39c:	089b      	lsrpl	r3, r3, #2
   bc39e:	2001      	movmi	r0, #1
   bc3a0:	600b      	strmi	r3, [r1, #0]
   bc3a2:	bf5c      	itt	pl
   bc3a4:	600b      	strpl	r3, [r1, #0]
   bc3a6:	2002      	movpl	r0, #2
   bc3a8:	4770      	bx	lr
   bc3aa:	b298      	uxth	r0, r3
   bc3ac:	b9a8      	cbnz	r0, bc3da <__lo0bits+0x52>
   bc3ae:	0c1b      	lsrs	r3, r3, #16
   bc3b0:	2010      	movs	r0, #16
   bc3b2:	b2da      	uxtb	r2, r3
   bc3b4:	b90a      	cbnz	r2, bc3ba <__lo0bits+0x32>
   bc3b6:	3008      	adds	r0, #8
   bc3b8:	0a1b      	lsrs	r3, r3, #8
   bc3ba:	071a      	lsls	r2, r3, #28
   bc3bc:	bf04      	itt	eq
   bc3be:	091b      	lsreq	r3, r3, #4
   bc3c0:	3004      	addeq	r0, #4
   bc3c2:	079a      	lsls	r2, r3, #30
   bc3c4:	bf04      	itt	eq
   bc3c6:	089b      	lsreq	r3, r3, #2
   bc3c8:	3002      	addeq	r0, #2
   bc3ca:	07da      	lsls	r2, r3, #31
   bc3cc:	d403      	bmi.n	bc3d6 <__lo0bits+0x4e>
   bc3ce:	085b      	lsrs	r3, r3, #1
   bc3d0:	f100 0001 	add.w	r0, r0, #1
   bc3d4:	d005      	beq.n	bc3e2 <__lo0bits+0x5a>
   bc3d6:	600b      	str	r3, [r1, #0]
   bc3d8:	4770      	bx	lr
   bc3da:	4610      	mov	r0, r2
   bc3dc:	e7e9      	b.n	bc3b2 <__lo0bits+0x2a>
   bc3de:	2000      	movs	r0, #0
   bc3e0:	4770      	bx	lr
   bc3e2:	2020      	movs	r0, #32
   bc3e4:	4770      	bx	lr
	...

000bc3e8 <__i2b>:
   bc3e8:	b510      	push	{r4, lr}
   bc3ea:	460c      	mov	r4, r1
   bc3ec:	2101      	movs	r1, #1
   bc3ee:	f7ff feb9 	bl	bc164 <_Balloc>
   bc3f2:	4602      	mov	r2, r0
   bc3f4:	b928      	cbnz	r0, bc402 <__i2b+0x1a>
   bc3f6:	4b05      	ldr	r3, [pc, #20]	; (bc40c <__i2b+0x24>)
   bc3f8:	4805      	ldr	r0, [pc, #20]	; (bc410 <__i2b+0x28>)
   bc3fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bc3fe:	f7fa ffb9 	bl	b7374 <__assert_func>
   bc402:	2301      	movs	r3, #1
   bc404:	6144      	str	r4, [r0, #20]
   bc406:	6103      	str	r3, [r0, #16]
   bc408:	bd10      	pop	{r4, pc}
   bc40a:	bf00      	nop
   bc40c:	000bd759 	.word	0x000bd759
   bc410:	000bd7e0 	.word	0x000bd7e0

000bc414 <__multiply>:
   bc414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc418:	4691      	mov	r9, r2
   bc41a:	690a      	ldr	r2, [r1, #16]
   bc41c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bc420:	429a      	cmp	r2, r3
   bc422:	bfb8      	it	lt
   bc424:	460b      	movlt	r3, r1
   bc426:	460c      	mov	r4, r1
   bc428:	bfbc      	itt	lt
   bc42a:	464c      	movlt	r4, r9
   bc42c:	4699      	movlt	r9, r3
   bc42e:	6927      	ldr	r7, [r4, #16]
   bc430:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bc434:	68a3      	ldr	r3, [r4, #8]
   bc436:	6861      	ldr	r1, [r4, #4]
   bc438:	eb07 060a 	add.w	r6, r7, sl
   bc43c:	42b3      	cmp	r3, r6
   bc43e:	b085      	sub	sp, #20
   bc440:	bfb8      	it	lt
   bc442:	3101      	addlt	r1, #1
   bc444:	f7ff fe8e 	bl	bc164 <_Balloc>
   bc448:	b930      	cbnz	r0, bc458 <__multiply+0x44>
   bc44a:	4602      	mov	r2, r0
   bc44c:	4b44      	ldr	r3, [pc, #272]	; (bc560 <__multiply+0x14c>)
   bc44e:	4845      	ldr	r0, [pc, #276]	; (bc564 <__multiply+0x150>)
   bc450:	f240 115d 	movw	r1, #349	; 0x15d
   bc454:	f7fa ff8e 	bl	b7374 <__assert_func>
   bc458:	f100 0514 	add.w	r5, r0, #20
   bc45c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bc460:	462b      	mov	r3, r5
   bc462:	2200      	movs	r2, #0
   bc464:	4543      	cmp	r3, r8
   bc466:	d321      	bcc.n	bc4ac <__multiply+0x98>
   bc468:	f104 0314 	add.w	r3, r4, #20
   bc46c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bc470:	f109 0314 	add.w	r3, r9, #20
   bc474:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bc478:	9202      	str	r2, [sp, #8]
   bc47a:	1b3a      	subs	r2, r7, r4
   bc47c:	3a15      	subs	r2, #21
   bc47e:	f022 0203 	bic.w	r2, r2, #3
   bc482:	3204      	adds	r2, #4
   bc484:	f104 0115 	add.w	r1, r4, #21
   bc488:	428f      	cmp	r7, r1
   bc48a:	bf38      	it	cc
   bc48c:	2204      	movcc	r2, #4
   bc48e:	9201      	str	r2, [sp, #4]
   bc490:	9a02      	ldr	r2, [sp, #8]
   bc492:	9303      	str	r3, [sp, #12]
   bc494:	429a      	cmp	r2, r3
   bc496:	d80c      	bhi.n	bc4b2 <__multiply+0x9e>
   bc498:	2e00      	cmp	r6, #0
   bc49a:	dd03      	ble.n	bc4a4 <__multiply+0x90>
   bc49c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bc4a0:	2b00      	cmp	r3, #0
   bc4a2:	d05a      	beq.n	bc55a <__multiply+0x146>
   bc4a4:	6106      	str	r6, [r0, #16]
   bc4a6:	b005      	add	sp, #20
   bc4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc4ac:	f843 2b04 	str.w	r2, [r3], #4
   bc4b0:	e7d8      	b.n	bc464 <__multiply+0x50>
   bc4b2:	f8b3 a000 	ldrh.w	sl, [r3]
   bc4b6:	f1ba 0f00 	cmp.w	sl, #0
   bc4ba:	d024      	beq.n	bc506 <__multiply+0xf2>
   bc4bc:	f104 0e14 	add.w	lr, r4, #20
   bc4c0:	46a9      	mov	r9, r5
   bc4c2:	f04f 0c00 	mov.w	ip, #0
   bc4c6:	f85e 2b04 	ldr.w	r2, [lr], #4
   bc4ca:	f8d9 1000 	ldr.w	r1, [r9]
   bc4ce:	fa1f fb82 	uxth.w	fp, r2
   bc4d2:	b289      	uxth	r1, r1
   bc4d4:	fb0a 110b 	mla	r1, sl, fp, r1
   bc4d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bc4dc:	f8d9 2000 	ldr.w	r2, [r9]
   bc4e0:	4461      	add	r1, ip
   bc4e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bc4e6:	fb0a c20b 	mla	r2, sl, fp, ip
   bc4ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bc4ee:	b289      	uxth	r1, r1
   bc4f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bc4f4:	4577      	cmp	r7, lr
   bc4f6:	f849 1b04 	str.w	r1, [r9], #4
   bc4fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bc4fe:	d8e2      	bhi.n	bc4c6 <__multiply+0xb2>
   bc500:	9a01      	ldr	r2, [sp, #4]
   bc502:	f845 c002 	str.w	ip, [r5, r2]
   bc506:	9a03      	ldr	r2, [sp, #12]
   bc508:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bc50c:	3304      	adds	r3, #4
   bc50e:	f1b9 0f00 	cmp.w	r9, #0
   bc512:	d020      	beq.n	bc556 <__multiply+0x142>
   bc514:	6829      	ldr	r1, [r5, #0]
   bc516:	f104 0c14 	add.w	ip, r4, #20
   bc51a:	46ae      	mov	lr, r5
   bc51c:	f04f 0a00 	mov.w	sl, #0
   bc520:	f8bc b000 	ldrh.w	fp, [ip]
   bc524:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bc528:	fb09 220b 	mla	r2, r9, fp, r2
   bc52c:	4492      	add	sl, r2
   bc52e:	b289      	uxth	r1, r1
   bc530:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bc534:	f84e 1b04 	str.w	r1, [lr], #4
   bc538:	f85c 2b04 	ldr.w	r2, [ip], #4
   bc53c:	f8be 1000 	ldrh.w	r1, [lr]
   bc540:	0c12      	lsrs	r2, r2, #16
   bc542:	fb09 1102 	mla	r1, r9, r2, r1
   bc546:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bc54a:	4567      	cmp	r7, ip
   bc54c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bc550:	d8e6      	bhi.n	bc520 <__multiply+0x10c>
   bc552:	9a01      	ldr	r2, [sp, #4]
   bc554:	50a9      	str	r1, [r5, r2]
   bc556:	3504      	adds	r5, #4
   bc558:	e79a      	b.n	bc490 <__multiply+0x7c>
   bc55a:	3e01      	subs	r6, #1
   bc55c:	e79c      	b.n	bc498 <__multiply+0x84>
   bc55e:	bf00      	nop
   bc560:	000bd759 	.word	0x000bd759
   bc564:	000bd7e0 	.word	0x000bd7e0

000bc568 <__pow5mult>:
   bc568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc56c:	4615      	mov	r5, r2
   bc56e:	f012 0203 	ands.w	r2, r2, #3
   bc572:	4606      	mov	r6, r0
   bc574:	460f      	mov	r7, r1
   bc576:	d007      	beq.n	bc588 <__pow5mult+0x20>
   bc578:	4c25      	ldr	r4, [pc, #148]	; (bc610 <__pow5mult+0xa8>)
   bc57a:	3a01      	subs	r2, #1
   bc57c:	2300      	movs	r3, #0
   bc57e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bc582:	f7ff fe51 	bl	bc228 <__multadd>
   bc586:	4607      	mov	r7, r0
   bc588:	10ad      	asrs	r5, r5, #2
   bc58a:	d03d      	beq.n	bc608 <__pow5mult+0xa0>
   bc58c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bc58e:	b97c      	cbnz	r4, bc5b0 <__pow5mult+0x48>
   bc590:	2010      	movs	r0, #16
   bc592:	f7fa feaf 	bl	b72f4 <malloc>
   bc596:	4602      	mov	r2, r0
   bc598:	6270      	str	r0, [r6, #36]	; 0x24
   bc59a:	b928      	cbnz	r0, bc5a8 <__pow5mult+0x40>
   bc59c:	4b1d      	ldr	r3, [pc, #116]	; (bc614 <__pow5mult+0xac>)
   bc59e:	481e      	ldr	r0, [pc, #120]	; (bc618 <__pow5mult+0xb0>)
   bc5a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bc5a4:	f7fa fee6 	bl	b7374 <__assert_func>
   bc5a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bc5ac:	6004      	str	r4, [r0, #0]
   bc5ae:	60c4      	str	r4, [r0, #12]
   bc5b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bc5b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bc5b8:	b94c      	cbnz	r4, bc5ce <__pow5mult+0x66>
   bc5ba:	f240 2171 	movw	r1, #625	; 0x271
   bc5be:	4630      	mov	r0, r6
   bc5c0:	f7ff ff12 	bl	bc3e8 <__i2b>
   bc5c4:	2300      	movs	r3, #0
   bc5c6:	f8c8 0008 	str.w	r0, [r8, #8]
   bc5ca:	4604      	mov	r4, r0
   bc5cc:	6003      	str	r3, [r0, #0]
   bc5ce:	f04f 0900 	mov.w	r9, #0
   bc5d2:	07eb      	lsls	r3, r5, #31
   bc5d4:	d50a      	bpl.n	bc5ec <__pow5mult+0x84>
   bc5d6:	4639      	mov	r1, r7
   bc5d8:	4622      	mov	r2, r4
   bc5da:	4630      	mov	r0, r6
   bc5dc:	f7ff ff1a 	bl	bc414 <__multiply>
   bc5e0:	4639      	mov	r1, r7
   bc5e2:	4680      	mov	r8, r0
   bc5e4:	4630      	mov	r0, r6
   bc5e6:	f7ff fdfd 	bl	bc1e4 <_Bfree>
   bc5ea:	4647      	mov	r7, r8
   bc5ec:	106d      	asrs	r5, r5, #1
   bc5ee:	d00b      	beq.n	bc608 <__pow5mult+0xa0>
   bc5f0:	6820      	ldr	r0, [r4, #0]
   bc5f2:	b938      	cbnz	r0, bc604 <__pow5mult+0x9c>
   bc5f4:	4622      	mov	r2, r4
   bc5f6:	4621      	mov	r1, r4
   bc5f8:	4630      	mov	r0, r6
   bc5fa:	f7ff ff0b 	bl	bc414 <__multiply>
   bc5fe:	6020      	str	r0, [r4, #0]
   bc600:	f8c0 9000 	str.w	r9, [r0]
   bc604:	4604      	mov	r4, r0
   bc606:	e7e4      	b.n	bc5d2 <__pow5mult+0x6a>
   bc608:	4638      	mov	r0, r7
   bc60a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc60e:	bf00      	nop
   bc610:	000bd930 	.word	0x000bd930
   bc614:	000bd585 	.word	0x000bd585
   bc618:	000bd7e0 	.word	0x000bd7e0

000bc61c <__lshift>:
   bc61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc620:	460c      	mov	r4, r1
   bc622:	6849      	ldr	r1, [r1, #4]
   bc624:	6923      	ldr	r3, [r4, #16]
   bc626:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bc62a:	68a3      	ldr	r3, [r4, #8]
   bc62c:	4607      	mov	r7, r0
   bc62e:	4691      	mov	r9, r2
   bc630:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bc634:	f108 0601 	add.w	r6, r8, #1
   bc638:	42b3      	cmp	r3, r6
   bc63a:	db0b      	blt.n	bc654 <__lshift+0x38>
   bc63c:	4638      	mov	r0, r7
   bc63e:	f7ff fd91 	bl	bc164 <_Balloc>
   bc642:	4605      	mov	r5, r0
   bc644:	b948      	cbnz	r0, bc65a <__lshift+0x3e>
   bc646:	4602      	mov	r2, r0
   bc648:	4b2a      	ldr	r3, [pc, #168]	; (bc6f4 <__lshift+0xd8>)
   bc64a:	482b      	ldr	r0, [pc, #172]	; (bc6f8 <__lshift+0xdc>)
   bc64c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bc650:	f7fa fe90 	bl	b7374 <__assert_func>
   bc654:	3101      	adds	r1, #1
   bc656:	005b      	lsls	r3, r3, #1
   bc658:	e7ee      	b.n	bc638 <__lshift+0x1c>
   bc65a:	2300      	movs	r3, #0
   bc65c:	f100 0114 	add.w	r1, r0, #20
   bc660:	f100 0210 	add.w	r2, r0, #16
   bc664:	4618      	mov	r0, r3
   bc666:	4553      	cmp	r3, sl
   bc668:	db37      	blt.n	bc6da <__lshift+0xbe>
   bc66a:	6920      	ldr	r0, [r4, #16]
   bc66c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bc670:	f104 0314 	add.w	r3, r4, #20
   bc674:	f019 091f 	ands.w	r9, r9, #31
   bc678:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bc67c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bc680:	d02f      	beq.n	bc6e2 <__lshift+0xc6>
   bc682:	f1c9 0e20 	rsb	lr, r9, #32
   bc686:	468a      	mov	sl, r1
   bc688:	f04f 0c00 	mov.w	ip, #0
   bc68c:	681a      	ldr	r2, [r3, #0]
   bc68e:	fa02 f209 	lsl.w	r2, r2, r9
   bc692:	ea42 020c 	orr.w	r2, r2, ip
   bc696:	f84a 2b04 	str.w	r2, [sl], #4
   bc69a:	f853 2b04 	ldr.w	r2, [r3], #4
   bc69e:	4298      	cmp	r0, r3
   bc6a0:	fa22 fc0e 	lsr.w	ip, r2, lr
   bc6a4:	d8f2      	bhi.n	bc68c <__lshift+0x70>
   bc6a6:	1b03      	subs	r3, r0, r4
   bc6a8:	3b15      	subs	r3, #21
   bc6aa:	f023 0303 	bic.w	r3, r3, #3
   bc6ae:	3304      	adds	r3, #4
   bc6b0:	f104 0215 	add.w	r2, r4, #21
   bc6b4:	4290      	cmp	r0, r2
   bc6b6:	bf38      	it	cc
   bc6b8:	2304      	movcc	r3, #4
   bc6ba:	f841 c003 	str.w	ip, [r1, r3]
   bc6be:	f1bc 0f00 	cmp.w	ip, #0
   bc6c2:	d001      	beq.n	bc6c8 <__lshift+0xac>
   bc6c4:	f108 0602 	add.w	r6, r8, #2
   bc6c8:	3e01      	subs	r6, #1
   bc6ca:	4638      	mov	r0, r7
   bc6cc:	612e      	str	r6, [r5, #16]
   bc6ce:	4621      	mov	r1, r4
   bc6d0:	f7ff fd88 	bl	bc1e4 <_Bfree>
   bc6d4:	4628      	mov	r0, r5
   bc6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc6da:	f842 0f04 	str.w	r0, [r2, #4]!
   bc6de:	3301      	adds	r3, #1
   bc6e0:	e7c1      	b.n	bc666 <__lshift+0x4a>
   bc6e2:	3904      	subs	r1, #4
   bc6e4:	f853 2b04 	ldr.w	r2, [r3], #4
   bc6e8:	f841 2f04 	str.w	r2, [r1, #4]!
   bc6ec:	4298      	cmp	r0, r3
   bc6ee:	d8f9      	bhi.n	bc6e4 <__lshift+0xc8>
   bc6f0:	e7ea      	b.n	bc6c8 <__lshift+0xac>
   bc6f2:	bf00      	nop
   bc6f4:	000bd759 	.word	0x000bd759
   bc6f8:	000bd7e0 	.word	0x000bd7e0

000bc6fc <__mcmp>:
   bc6fc:	b530      	push	{r4, r5, lr}
   bc6fe:	6902      	ldr	r2, [r0, #16]
   bc700:	690c      	ldr	r4, [r1, #16]
   bc702:	1b12      	subs	r2, r2, r4
   bc704:	d10e      	bne.n	bc724 <__mcmp+0x28>
   bc706:	f100 0314 	add.w	r3, r0, #20
   bc70a:	3114      	adds	r1, #20
   bc70c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bc710:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bc714:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bc718:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bc71c:	42a5      	cmp	r5, r4
   bc71e:	d003      	beq.n	bc728 <__mcmp+0x2c>
   bc720:	d305      	bcc.n	bc72e <__mcmp+0x32>
   bc722:	2201      	movs	r2, #1
   bc724:	4610      	mov	r0, r2
   bc726:	bd30      	pop	{r4, r5, pc}
   bc728:	4283      	cmp	r3, r0
   bc72a:	d3f3      	bcc.n	bc714 <__mcmp+0x18>
   bc72c:	e7fa      	b.n	bc724 <__mcmp+0x28>
   bc72e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc732:	e7f7      	b.n	bc724 <__mcmp+0x28>

000bc734 <__mdiff>:
   bc734:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc738:	460c      	mov	r4, r1
   bc73a:	4606      	mov	r6, r0
   bc73c:	4611      	mov	r1, r2
   bc73e:	4620      	mov	r0, r4
   bc740:	4690      	mov	r8, r2
   bc742:	f7ff ffdb 	bl	bc6fc <__mcmp>
   bc746:	1e05      	subs	r5, r0, #0
   bc748:	d110      	bne.n	bc76c <__mdiff+0x38>
   bc74a:	4629      	mov	r1, r5
   bc74c:	4630      	mov	r0, r6
   bc74e:	f7ff fd09 	bl	bc164 <_Balloc>
   bc752:	b930      	cbnz	r0, bc762 <__mdiff+0x2e>
   bc754:	4b3a      	ldr	r3, [pc, #232]	; (bc840 <__mdiff+0x10c>)
   bc756:	4602      	mov	r2, r0
   bc758:	f240 2132 	movw	r1, #562	; 0x232
   bc75c:	4839      	ldr	r0, [pc, #228]	; (bc844 <__mdiff+0x110>)
   bc75e:	f7fa fe09 	bl	b7374 <__assert_func>
   bc762:	2301      	movs	r3, #1
   bc764:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bc768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc76c:	bfa4      	itt	ge
   bc76e:	4643      	movge	r3, r8
   bc770:	46a0      	movge	r8, r4
   bc772:	4630      	mov	r0, r6
   bc774:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bc778:	bfa6      	itte	ge
   bc77a:	461c      	movge	r4, r3
   bc77c:	2500      	movge	r5, #0
   bc77e:	2501      	movlt	r5, #1
   bc780:	f7ff fcf0 	bl	bc164 <_Balloc>
   bc784:	b920      	cbnz	r0, bc790 <__mdiff+0x5c>
   bc786:	4b2e      	ldr	r3, [pc, #184]	; (bc840 <__mdiff+0x10c>)
   bc788:	4602      	mov	r2, r0
   bc78a:	f44f 7110 	mov.w	r1, #576	; 0x240
   bc78e:	e7e5      	b.n	bc75c <__mdiff+0x28>
   bc790:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bc794:	6926      	ldr	r6, [r4, #16]
   bc796:	60c5      	str	r5, [r0, #12]
   bc798:	f104 0914 	add.w	r9, r4, #20
   bc79c:	f108 0514 	add.w	r5, r8, #20
   bc7a0:	f100 0e14 	add.w	lr, r0, #20
   bc7a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bc7a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bc7ac:	f108 0210 	add.w	r2, r8, #16
   bc7b0:	46f2      	mov	sl, lr
   bc7b2:	2100      	movs	r1, #0
   bc7b4:	f859 3b04 	ldr.w	r3, [r9], #4
   bc7b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bc7bc:	fa1f f883 	uxth.w	r8, r3
   bc7c0:	fa11 f18b 	uxtah	r1, r1, fp
   bc7c4:	0c1b      	lsrs	r3, r3, #16
   bc7c6:	eba1 0808 	sub.w	r8, r1, r8
   bc7ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bc7ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bc7d2:	fa1f f888 	uxth.w	r8, r8
   bc7d6:	1419      	asrs	r1, r3, #16
   bc7d8:	454e      	cmp	r6, r9
   bc7da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bc7de:	f84a 3b04 	str.w	r3, [sl], #4
   bc7e2:	d8e7      	bhi.n	bc7b4 <__mdiff+0x80>
   bc7e4:	1b33      	subs	r3, r6, r4
   bc7e6:	3b15      	subs	r3, #21
   bc7e8:	f023 0303 	bic.w	r3, r3, #3
   bc7ec:	3304      	adds	r3, #4
   bc7ee:	3415      	adds	r4, #21
   bc7f0:	42a6      	cmp	r6, r4
   bc7f2:	bf38      	it	cc
   bc7f4:	2304      	movcc	r3, #4
   bc7f6:	441d      	add	r5, r3
   bc7f8:	4473      	add	r3, lr
   bc7fa:	469e      	mov	lr, r3
   bc7fc:	462e      	mov	r6, r5
   bc7fe:	4566      	cmp	r6, ip
   bc800:	d30e      	bcc.n	bc820 <__mdiff+0xec>
   bc802:	f10c 0203 	add.w	r2, ip, #3
   bc806:	1b52      	subs	r2, r2, r5
   bc808:	f022 0203 	bic.w	r2, r2, #3
   bc80c:	3d03      	subs	r5, #3
   bc80e:	45ac      	cmp	ip, r5
   bc810:	bf38      	it	cc
   bc812:	2200      	movcc	r2, #0
   bc814:	441a      	add	r2, r3
   bc816:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bc81a:	b17b      	cbz	r3, bc83c <__mdiff+0x108>
   bc81c:	6107      	str	r7, [r0, #16]
   bc81e:	e7a3      	b.n	bc768 <__mdiff+0x34>
   bc820:	f856 8b04 	ldr.w	r8, [r6], #4
   bc824:	fa11 f288 	uxtah	r2, r1, r8
   bc828:	1414      	asrs	r4, r2, #16
   bc82a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bc82e:	b292      	uxth	r2, r2
   bc830:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bc834:	f84e 2b04 	str.w	r2, [lr], #4
   bc838:	1421      	asrs	r1, r4, #16
   bc83a:	e7e0      	b.n	bc7fe <__mdiff+0xca>
   bc83c:	3f01      	subs	r7, #1
   bc83e:	e7ea      	b.n	bc816 <__mdiff+0xe2>
   bc840:	000bd759 	.word	0x000bd759
   bc844:	000bd7e0 	.word	0x000bd7e0

000bc848 <__ulp>:
   bc848:	b082      	sub	sp, #8
   bc84a:	ed8d 0b00 	vstr	d0, [sp]
   bc84e:	9b01      	ldr	r3, [sp, #4]
   bc850:	4912      	ldr	r1, [pc, #72]	; (bc89c <__ulp+0x54>)
   bc852:	4019      	ands	r1, r3
   bc854:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bc858:	2900      	cmp	r1, #0
   bc85a:	dd05      	ble.n	bc868 <__ulp+0x20>
   bc85c:	2200      	movs	r2, #0
   bc85e:	460b      	mov	r3, r1
   bc860:	ec43 2b10 	vmov	d0, r2, r3
   bc864:	b002      	add	sp, #8
   bc866:	4770      	bx	lr
   bc868:	4249      	negs	r1, r1
   bc86a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bc86e:	ea4f 5021 	mov.w	r0, r1, asr #20
   bc872:	f04f 0200 	mov.w	r2, #0
   bc876:	f04f 0300 	mov.w	r3, #0
   bc87a:	da04      	bge.n	bc886 <__ulp+0x3e>
   bc87c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bc880:	fa41 f300 	asr.w	r3, r1, r0
   bc884:	e7ec      	b.n	bc860 <__ulp+0x18>
   bc886:	f1a0 0114 	sub.w	r1, r0, #20
   bc88a:	291e      	cmp	r1, #30
   bc88c:	bfda      	itte	le
   bc88e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bc892:	fa20 f101 	lsrle.w	r1, r0, r1
   bc896:	2101      	movgt	r1, #1
   bc898:	460a      	mov	r2, r1
   bc89a:	e7e1      	b.n	bc860 <__ulp+0x18>
   bc89c:	7ff00000 	.word	0x7ff00000

000bc8a0 <__b2d>:
   bc8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc8a2:	6905      	ldr	r5, [r0, #16]
   bc8a4:	f100 0714 	add.w	r7, r0, #20
   bc8a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bc8ac:	1f2e      	subs	r6, r5, #4
   bc8ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bc8b2:	4620      	mov	r0, r4
   bc8b4:	f7ff fd48 	bl	bc348 <__hi0bits>
   bc8b8:	f1c0 0320 	rsb	r3, r0, #32
   bc8bc:	280a      	cmp	r0, #10
   bc8be:	f8df c07c 	ldr.w	ip, [pc, #124]	; bc93c <__b2d+0x9c>
   bc8c2:	600b      	str	r3, [r1, #0]
   bc8c4:	dc14      	bgt.n	bc8f0 <__b2d+0x50>
   bc8c6:	f1c0 0e0b 	rsb	lr, r0, #11
   bc8ca:	fa24 f10e 	lsr.w	r1, r4, lr
   bc8ce:	42b7      	cmp	r7, r6
   bc8d0:	ea41 030c 	orr.w	r3, r1, ip
   bc8d4:	bf34      	ite	cc
   bc8d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc8da:	2100      	movcs	r1, #0
   bc8dc:	3015      	adds	r0, #21
   bc8de:	fa04 f000 	lsl.w	r0, r4, r0
   bc8e2:	fa21 f10e 	lsr.w	r1, r1, lr
   bc8e6:	ea40 0201 	orr.w	r2, r0, r1
   bc8ea:	ec43 2b10 	vmov	d0, r2, r3
   bc8ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc8f0:	42b7      	cmp	r7, r6
   bc8f2:	bf3a      	itte	cc
   bc8f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc8f8:	f1a5 0608 	subcc.w	r6, r5, #8
   bc8fc:	2100      	movcs	r1, #0
   bc8fe:	380b      	subs	r0, #11
   bc900:	d017      	beq.n	bc932 <__b2d+0x92>
   bc902:	f1c0 0c20 	rsb	ip, r0, #32
   bc906:	fa04 f500 	lsl.w	r5, r4, r0
   bc90a:	42be      	cmp	r6, r7
   bc90c:	fa21 f40c 	lsr.w	r4, r1, ip
   bc910:	ea45 0504 	orr.w	r5, r5, r4
   bc914:	bf8c      	ite	hi
   bc916:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bc91a:	2400      	movls	r4, #0
   bc91c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bc920:	fa01 f000 	lsl.w	r0, r1, r0
   bc924:	fa24 f40c 	lsr.w	r4, r4, ip
   bc928:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bc92c:	ea40 0204 	orr.w	r2, r0, r4
   bc930:	e7db      	b.n	bc8ea <__b2d+0x4a>
   bc932:	ea44 030c 	orr.w	r3, r4, ip
   bc936:	460a      	mov	r2, r1
   bc938:	e7d7      	b.n	bc8ea <__b2d+0x4a>
   bc93a:	bf00      	nop
   bc93c:	3ff00000 	.word	0x3ff00000

000bc940 <__d2b>:
   bc940:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bc944:	4689      	mov	r9, r1
   bc946:	2101      	movs	r1, #1
   bc948:	ec57 6b10 	vmov	r6, r7, d0
   bc94c:	4690      	mov	r8, r2
   bc94e:	f7ff fc09 	bl	bc164 <_Balloc>
   bc952:	4604      	mov	r4, r0
   bc954:	b930      	cbnz	r0, bc964 <__d2b+0x24>
   bc956:	4602      	mov	r2, r0
   bc958:	4b25      	ldr	r3, [pc, #148]	; (bc9f0 <__d2b+0xb0>)
   bc95a:	4826      	ldr	r0, [pc, #152]	; (bc9f4 <__d2b+0xb4>)
   bc95c:	f240 310a 	movw	r1, #778	; 0x30a
   bc960:	f7fa fd08 	bl	b7374 <__assert_func>
   bc964:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bc968:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bc96c:	bb35      	cbnz	r5, bc9bc <__d2b+0x7c>
   bc96e:	2e00      	cmp	r6, #0
   bc970:	9301      	str	r3, [sp, #4]
   bc972:	d028      	beq.n	bc9c6 <__d2b+0x86>
   bc974:	4668      	mov	r0, sp
   bc976:	9600      	str	r6, [sp, #0]
   bc978:	f7ff fd06 	bl	bc388 <__lo0bits>
   bc97c:	9900      	ldr	r1, [sp, #0]
   bc97e:	b300      	cbz	r0, bc9c2 <__d2b+0x82>
   bc980:	9a01      	ldr	r2, [sp, #4]
   bc982:	f1c0 0320 	rsb	r3, r0, #32
   bc986:	fa02 f303 	lsl.w	r3, r2, r3
   bc98a:	430b      	orrs	r3, r1
   bc98c:	40c2      	lsrs	r2, r0
   bc98e:	6163      	str	r3, [r4, #20]
   bc990:	9201      	str	r2, [sp, #4]
   bc992:	9b01      	ldr	r3, [sp, #4]
   bc994:	61a3      	str	r3, [r4, #24]
   bc996:	2b00      	cmp	r3, #0
   bc998:	bf14      	ite	ne
   bc99a:	2202      	movne	r2, #2
   bc99c:	2201      	moveq	r2, #1
   bc99e:	6122      	str	r2, [r4, #16]
   bc9a0:	b1d5      	cbz	r5, bc9d8 <__d2b+0x98>
   bc9a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bc9a6:	4405      	add	r5, r0
   bc9a8:	f8c9 5000 	str.w	r5, [r9]
   bc9ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bc9b0:	f8c8 0000 	str.w	r0, [r8]
   bc9b4:	4620      	mov	r0, r4
   bc9b6:	b003      	add	sp, #12
   bc9b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc9bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc9c0:	e7d5      	b.n	bc96e <__d2b+0x2e>
   bc9c2:	6161      	str	r1, [r4, #20]
   bc9c4:	e7e5      	b.n	bc992 <__d2b+0x52>
   bc9c6:	a801      	add	r0, sp, #4
   bc9c8:	f7ff fcde 	bl	bc388 <__lo0bits>
   bc9cc:	9b01      	ldr	r3, [sp, #4]
   bc9ce:	6163      	str	r3, [r4, #20]
   bc9d0:	2201      	movs	r2, #1
   bc9d2:	6122      	str	r2, [r4, #16]
   bc9d4:	3020      	adds	r0, #32
   bc9d6:	e7e3      	b.n	bc9a0 <__d2b+0x60>
   bc9d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bc9dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bc9e0:	f8c9 0000 	str.w	r0, [r9]
   bc9e4:	6918      	ldr	r0, [r3, #16]
   bc9e6:	f7ff fcaf 	bl	bc348 <__hi0bits>
   bc9ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bc9ee:	e7df      	b.n	bc9b0 <__d2b+0x70>
   bc9f0:	000bd759 	.word	0x000bd759
   bc9f4:	000bd7e0 	.word	0x000bd7e0

000bc9f8 <__ratio>:
   bc9f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc9fc:	4688      	mov	r8, r1
   bc9fe:	4669      	mov	r1, sp
   bca00:	4681      	mov	r9, r0
   bca02:	f7ff ff4d 	bl	bc8a0 <__b2d>
   bca06:	a901      	add	r1, sp, #4
   bca08:	4640      	mov	r0, r8
   bca0a:	ec55 4b10 	vmov	r4, r5, d0
   bca0e:	f7ff ff47 	bl	bc8a0 <__b2d>
   bca12:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bca16:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bca1a:	eba3 0c02 	sub.w	ip, r3, r2
   bca1e:	e9dd 3200 	ldrd	r3, r2, [sp]
   bca22:	1a9b      	subs	r3, r3, r2
   bca24:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bca28:	ec51 0b10 	vmov	r0, r1, d0
   bca2c:	2b00      	cmp	r3, #0
   bca2e:	bfd6      	itet	le
   bca30:	460a      	movle	r2, r1
   bca32:	462a      	movgt	r2, r5
   bca34:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bca38:	468b      	mov	fp, r1
   bca3a:	462f      	mov	r7, r5
   bca3c:	bfd4      	ite	le
   bca3e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bca42:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bca46:	4620      	mov	r0, r4
   bca48:	ee10 2a10 	vmov	r2, s0
   bca4c:	465b      	mov	r3, fp
   bca4e:	4639      	mov	r1, r7
   bca50:	f7fd fe00 	bl	ba654 <__aeabi_ddiv>
   bca54:	ec41 0b10 	vmov	d0, r0, r1
   bca58:	b003      	add	sp, #12
   bca5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bca5e <__copybits>:
   bca5e:	3901      	subs	r1, #1
   bca60:	b570      	push	{r4, r5, r6, lr}
   bca62:	1149      	asrs	r1, r1, #5
   bca64:	6914      	ldr	r4, [r2, #16]
   bca66:	3101      	adds	r1, #1
   bca68:	f102 0314 	add.w	r3, r2, #20
   bca6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bca70:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bca74:	1f05      	subs	r5, r0, #4
   bca76:	42a3      	cmp	r3, r4
   bca78:	d30c      	bcc.n	bca94 <__copybits+0x36>
   bca7a:	1aa3      	subs	r3, r4, r2
   bca7c:	3b11      	subs	r3, #17
   bca7e:	f023 0303 	bic.w	r3, r3, #3
   bca82:	3211      	adds	r2, #17
   bca84:	42a2      	cmp	r2, r4
   bca86:	bf88      	it	hi
   bca88:	2300      	movhi	r3, #0
   bca8a:	4418      	add	r0, r3
   bca8c:	2300      	movs	r3, #0
   bca8e:	4288      	cmp	r0, r1
   bca90:	d305      	bcc.n	bca9e <__copybits+0x40>
   bca92:	bd70      	pop	{r4, r5, r6, pc}
   bca94:	f853 6b04 	ldr.w	r6, [r3], #4
   bca98:	f845 6f04 	str.w	r6, [r5, #4]!
   bca9c:	e7eb      	b.n	bca76 <__copybits+0x18>
   bca9e:	f840 3b04 	str.w	r3, [r0], #4
   bcaa2:	e7f4      	b.n	bca8e <__copybits+0x30>

000bcaa4 <__any_on>:
   bcaa4:	f100 0214 	add.w	r2, r0, #20
   bcaa8:	6900      	ldr	r0, [r0, #16]
   bcaaa:	114b      	asrs	r3, r1, #5
   bcaac:	4298      	cmp	r0, r3
   bcaae:	b510      	push	{r4, lr}
   bcab0:	db11      	blt.n	bcad6 <__any_on+0x32>
   bcab2:	dd0a      	ble.n	bcaca <__any_on+0x26>
   bcab4:	f011 011f 	ands.w	r1, r1, #31
   bcab8:	d007      	beq.n	bcaca <__any_on+0x26>
   bcaba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bcabe:	fa24 f001 	lsr.w	r0, r4, r1
   bcac2:	fa00 f101 	lsl.w	r1, r0, r1
   bcac6:	428c      	cmp	r4, r1
   bcac8:	d10b      	bne.n	bcae2 <__any_on+0x3e>
   bcaca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bcace:	4293      	cmp	r3, r2
   bcad0:	d803      	bhi.n	bcada <__any_on+0x36>
   bcad2:	2000      	movs	r0, #0
   bcad4:	bd10      	pop	{r4, pc}
   bcad6:	4603      	mov	r3, r0
   bcad8:	e7f7      	b.n	bcaca <__any_on+0x26>
   bcada:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bcade:	2900      	cmp	r1, #0
   bcae0:	d0f5      	beq.n	bcace <__any_on+0x2a>
   bcae2:	2001      	movs	r0, #1
   bcae4:	e7f6      	b.n	bcad4 <__any_on+0x30>

000bcae6 <_calloc_r>:
   bcae6:	b513      	push	{r0, r1, r4, lr}
   bcae8:	434a      	muls	r2, r1
   bcaea:	4611      	mov	r1, r2
   bcaec:	9201      	str	r2, [sp, #4]
   bcaee:	f7fa fc31 	bl	b7354 <_malloc_r>
   bcaf2:	4604      	mov	r4, r0
   bcaf4:	b118      	cbz	r0, bcafe <_calloc_r+0x18>
   bcaf6:	9a01      	ldr	r2, [sp, #4]
   bcaf8:	2100      	movs	r1, #0
   bcafa:	f7fe f808 	bl	bab0e <memset>
   bcafe:	4620      	mov	r0, r4
   bcb00:	b002      	add	sp, #8
   bcb02:	bd10      	pop	{r4, pc}
   bcb04:	0000      	movs	r0, r0
	...

000bcb08 <nan>:
   bcb08:	ed9f 0b01 	vldr	d0, [pc, #4]	; bcb10 <nan+0x8>
   bcb0c:	4770      	bx	lr
   bcb0e:	bf00      	nop
   bcb10:	00000000 	.word	0x00000000
   bcb14:	7ff80000 	.word	0x7ff80000

000bcb18 <__ascii_wctomb>:
   bcb18:	b149      	cbz	r1, bcb2e <__ascii_wctomb+0x16>
   bcb1a:	2aff      	cmp	r2, #255	; 0xff
   bcb1c:	bf85      	ittet	hi
   bcb1e:	238a      	movhi	r3, #138	; 0x8a
   bcb20:	6003      	strhi	r3, [r0, #0]
   bcb22:	700a      	strbls	r2, [r1, #0]
   bcb24:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bcb28:	bf98      	it	ls
   bcb2a:	2001      	movls	r0, #1
   bcb2c:	4770      	bx	lr
   bcb2e:	4608      	mov	r0, r1
   bcb30:	4770      	bx	lr
	...

000bcb34 <__aeabi_d2lz>:
   bcb34:	b538      	push	{r3, r4, r5, lr}
   bcb36:	2200      	movs	r2, #0
   bcb38:	2300      	movs	r3, #0
   bcb3a:	4604      	mov	r4, r0
   bcb3c:	460d      	mov	r5, r1
   bcb3e:	f7fd fed1 	bl	ba8e4 <__aeabi_dcmplt>
   bcb42:	b928      	cbnz	r0, bcb50 <__aeabi_d2lz+0x1c>
   bcb44:	4620      	mov	r0, r4
   bcb46:	4629      	mov	r1, r5
   bcb48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bcb4c:	f7fd bf78 	b.w	baa40 <__aeabi_d2ulz>
   bcb50:	4620      	mov	r0, r4
   bcb52:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bcb56:	f7fd ff73 	bl	baa40 <__aeabi_d2ulz>
   bcb5a:	4240      	negs	r0, r0
   bcb5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bcb60:	bd38      	pop	{r3, r4, r5, pc}
   bcb62:	bf00      	nop

000bcb64 <dynalib_user>:
   bcb64:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bcb74:	0000 0000 6162 6973 5f63 7473 6972 676e     ....basic_string
   bcb84:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   bcb94:	6c75 206c 6f6e 2074 6176 696c 0064 720a     ull not valid..r
   bcba4:	7165 6575 7473 6320 646f 2065 2c31 6120     equest code 1, a
   bcbb4:	6464 6572 7373 203a 7400 6172 736e 696d     ddress: .transmi
   bcbc4:	7373 6f69 206e 6572 6963 7665 6465 6620     ssion recieved f
   bcbd4:	6f72 3a6d 0020 6564 6976 6563 6920 3a64     rom: .device id:
   bcbe4:	0020 7274 6e61 6d73 7369 6973 6e6f 7320      .transmission s
   bcbf4:	6e65 2074 6f74 203a 7200 7165 6575 7473     ent to: .request
   bcc04:	6320 646f 2065 2c32 6120 6464 6572 7373      code 2, address
   bcc14:	203a 6300 6e6f 6c66 6369 2074 6576 6972     : .conflict veri
   bcc24:	6966 6163 6974 6e6f 203a 0a00 6f43 6e6e     fication: ..Conn
   bcc34:	6365 6574 2064 6f74 203a 2c00 0020 6163     ected to: ., .ca
   bcc44:	6e6e 746f 6320 6572 7461 2065 7473 3a64     nnot create std:
   bcc54:	763a 6365 6f74 2072 616c 6772 7265 7420     :vector larger t
   bcc64:	6168 206e 616d 5f78 6973 657a 2928 7600     han max_size().v
   bcc74:	6365 6f74 3a72 5f3a 5f4d 6172 676e 5f65     ector::_M_range_
   bcc84:	6863 6365 3a6b 5f20 6e5f 2820 6877 6369     check: __n (whic
   bcc94:	2068 7369 2520 757a 2029 3d3e 7420 6968     h is %zu) >= thi
   bcca4:	2d73 733e 7a69 2865 2029 7728 6968 6863     s->size() (which
   bccb4:	6920 2073 7a25 2975 0a00 6e45 6574 2072      is %zu)..Enter 
   bccc4:	6874 2065 696c 656e 6320 6c6f 726f 6f20     the line color o
   bccd4:	2066 6874 2065 6564 6976 6563 7720 7469     f the device wit
   bcce4:	2068 6874 2065 6c62 6e69 696b 676e 4c20     h the blinking L
   bccf4:	4445 203a 7200 6365 6965 6576 7220 6465     ED: .receive red
   bcd04:	7200 6365 6965 6576 6220 756c 0065 530a     .receive blue..S
   bcd14:	7165 6575 636e 3a65 0020 4646 3030 3030     equence: .FF0000
   bcd24:	3000 3041 3030 0030 3030 3030 4646 3000     .0A0000.0000FF.0
   bcd34:	3030 3030 0041 7262 006e 4646 4646 3030     0000A.brn.FFFF00
   bcd44:	3000 3041 3041 0030 3030 4646 3030 3000     .0A0A00.00FF00.0
   bcd54:	3030 3041 0030 726f 0067 4646 3038 3030     00A00.org.FF8000
   bcd64:	3000 3041 3035 0030 3038 3030 3038 3000     .0A0500.800080.0
   bcd74:	3035 3030 0035 6970 6b6e 4600 3846 4630     50005.pink.FF80F
   bcd84:	0046 4130 3530 4130 3600 3445 3030 3030     F.0A050A.6E40000
   bcd94:	2d31 3542 3341 462d 3933 2d33 3045 3941     1-B5A3-F393-E0A9
   bcda4:	452d 3035 3245 4434 4343 3941 0045 4536     -E50E24DCCA9E.6E
   bcdb4:	3034 3030 3230 422d 4135 2d33 3346 3339     400002-B5A3-F393
   bcdc4:	452d 4130 2d39 3545 4530 3432 4344 4143     -E0A9-E50E24DCCA
   bcdd4:	4539 3600 3445 3030 3030 2d33 3542 3341     9E.6E400003-B5A3
   bcde4:	462d 3933 2d33 3045 3941 452d 3035 3245     -F393-E0A9-E50E2
   bcdf4:	4434 4343 3941 0045 7874 7200 0078 616c     4DCCA9E.tx.rx.la
   bce04:	6970 742e 6172 736e 7469 6863 6369 6761     pi.transitchicag
   bce14:	2e6f 6f63 006d 6f6c 706f 7320 6174 7472     o.com.loop start
   bce24:	2f00 7061 2f69 2e31 2f30 7474 6f70 6973     ./api/1.0/ttposi
   bce34:	6974 6e6f 2e73 7361 7870 6b3f 7965 303d     tions.aspx?key=0
   bce44:	6630 3066 3039 3336 6163 3461 3736 3834     0ff09063caa46748
   bce54:	3334 6434 6635 3361 3132 3064 3834 2666     434d5fa321d048f&
   bce64:	7472 003d 6f26 7475 7570 5474 7079 3d65     rt=.&outputType=
   bce74:	534a 4e4f 4700 5445 7000 7261 6973 676e     JSON.GET.parsing
   bce84:	7000 7261 6973 676e 6620 6961 656c 0064     .parsing failed.
   bce94:	6877 6c69 0065 7463 7461 0074 6f72 7475     while.ctatt.rout
   bcea4:	0065 7274 6961 006e 656e 7478 7453 4e61     e.train.nextStaN
   bceb4:	006d 7274 6961 646e 7269 7400 4472 0072     m.traindir.trDr.
   bcec4:	616c 0074 6f6c 006e 6567 2074 6164 6174     lat.lon.get data
   bced4:	6200 6572 6b61 7400 6172 6e69 2520 3a69     .break.train %i:
   bcee4:	0020 6964 7473 6e61 6563 6320 6c61 7563      .distance calcu
   bcef4:	616c 6974 6e6f 7300 6f6c 6570 7300 6365     lation.slope.sec
   bcf04:	6e6f 2064 6c63 736f 7365 2074 6e69 6564     ond closest inde
   bcf14:	0078 6925 202c 6925 7300 6765 656d 746e     x.%i, %i.segment
   bcf24:	7020 736f 7300 6e65 2064 6f74 7320 616c      pos.send to sla
   bcf34:	6576 0000                                   ve..

000bcf38 <_ZTV16JsonParserStaticILj15000ELj1500EE>:
	...
   bcf40:	40b9 000b 40cd 000b 6341 6563 7470 2f00     .@...@..Accept./
   bcf50:	2f2a 0000 0019 0000 0003 0000 0007 0000     */..............
   bcf60:	0005 0000 0014 0000 0005 0000 0005 0000     ................
   bcf70:	0005 0000 0019 0000 0005 0000 0005 0000     ................
   bcf80:	0005 0000 0005 0000 000f 0000 0005 0000     ................
   bcf90:	000d 0000 0007 0000 0005 0000 0005 0000     ................
   bcfa0:	0005 0000 0005 0000 000f 0000 000f 0000     ................
   bcfb0:	000f 0000 0005 0000 0005 0000 0005 0000     ................
   bcfc0:	0005 0000 4820 5454 2f50 2e31 0d30 000a     .... HTTP/1.0...
   bcfd0:	6c63 736f 0065 6f43 6e6e 6365 6974 6e6f     close.Connection
   bcfe0:	4800 534f 0054 6f43 746e 6e65 2d74 654c     .HOST.Content-Le
   bcff0:	676e 6874 5000 534f 0054 0a0d 0a0d 2500     ngth.POST......%
   bd000:	3430 0078                                   04x.

000bd004 <_ZTV10JsonBuffer>:
	...
   bd00c:	6561 000b 657d 000b                         ae..}e..

000bd014 <_ZTV10JsonParser>:
	...
   bd01c:	6591 000b 65b5 000b                         .e...e..

000bd024 <_ZTV13JsonReference>:
	...
   bd02c:	6551 000b 6553 000b 7341 6573 7472 6f69     Qe..Se..Assertio
   bd03c:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   bd04c:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   bd05c:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   bd06c:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   bd07c:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   bd08c:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   bd09c:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   bd0ac:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   bd0bc:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   bd0cc:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   bd0dc:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   bd0ec:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   bd0fc:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   bd10c:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   bd11c:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   bd12c:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   bd13c:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   bd14c:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   bd15c:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   bd16c:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   bd17c:	6369 002e                                   ic..

000bd180 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd188:	73a1 000b 7405 000b 74eb 000b 742f 000b     .s...t...t../t..
   bd198:	73a5 000b                                   .s..

000bd19c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd1a4:	739d 000b 7413 000b 739f 000b 7435 000b     .s...t...s..5t..
   bd1b4:	73c5 000b                                   .s..

000bd1b8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd1c0:	739b 000b 7421 000b 7ca5 000b 743b 000b     .s..!t...|..;t..
   bd1d0:	73e5 000b                                   .s..

000bd1d4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bd1e0:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bd1f2 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bd1f2:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bd202 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bd202:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000bd214 <_ZTVN5spark13EthernetClassE>:
	...
   bd21c:	8753 000b 8749 000b 873f 000b 8735 000b     S...I...?...5...
   bd22c:	8729 000b 871d 000b 89d9 000b 89e1 000b     )...............
   bd23c:	8711 000b 8709 000b 86ff 000b 86f5 000b     ................
   bd24c:	8a11 000b                                   ....

000bd250 <_ZTV7TwoWire>:
	...
   bd258:	8771 000b 87bb 000b 8793 000b 8773 000b     q...........s...
   bd268:	879b 000b 87a3 000b 87ab 000b 87b3 000b     ................

000bd278 <_ZTV9IPAddress>:
	...
   bd280:	887d 000b 886d 000b 886f 000b 7061 0070     }...m...o...app.

000bd290 <_ZTVN5spark12NetworkClassE>:
	...
   bd298:	8999 000b 89a3 000b 89ad 000b 89b7 000b     ................
   bd2a8:	89c1 000b 89cd 000b 89d9 000b 89e1 000b     ................
   bd2b8:	89e9 000b 89f5 000b 89fd 000b 8a07 000b     ................
   bd2c8:	8a11 000b 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   bd2d8:	7265 6f72 2072 203d 6425 0000               error = %d..

000bd2e4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd2ec:	8f49 000b 8f6d 000b 949f 000b 8f7b 000b     I...m.......{...
   bd2fc:	8f4d 000b                                   M...

000bd300 <_ZTV9TCPClient>:
	...
   bd308:	8ff9 000b 902d 000b 8ec5 000b 8edf 000b     ....-...........
   bd318:	9335 000b 8f09 000b 91ab 000b 8f3d 000b     5...........=...
   bd328:	923d 000b 907d 000b 91d9 000b 93e9 000b     =...}...........
   bd338:	9179 000b 8f3f 000b 8ef1 000b 8f81 000b     y...?...........
   bd348:	905d 000b 5925 252d 2d6d 6425 2554 3a48     ]...%Y-%m-%dT%H:
   bd358:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bd368 <_ZTV11USARTSerial>:
	...
   bd370:	94b9 000b 9525 000b 94fd 000b 8afd 000b     ....%...........
   bd380:	94cd 000b 94e9 000b 94db 000b 94f7 000b     ................
   bd390:	94bb 000b 94bf 000b                         ........

000bd398 <_ZTV9USBSerial>:
	...
   bd3a0:	9563 000b 95cb 000b 95a1 000b 8afd 000b     c...............
   bd3b0:	9593 000b 9565 000b 9575 000b 95c5 000b     ....e...u.......
   bd3c0:	9585 000b 955d 000b                         ....]...

000bd3c8 <_ZTVN5spark9WiFiClassE>:
	...
   bd3d0:	96c3 000b 96b9 000b 96af 000b 9665 000b     ............e...
   bd3e0:	96a3 000b 9697 000b 89d9 000b 89e1 000b     ................
   bd3f0:	968b 000b 9683 000b 9679 000b 966f 000b     ........y...o...
   bd400:	8a11 000b                                   ....

000bd404 <_ZSt7nothrow>:
	...

000bd405 <_ZTSSt19_Sp_make_shared_tag>:
   bd405:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bd415:	6572 5f64 6174 0067 0000                     red_tag....

000bd420 <_ZTISt19_Sp_make_shared_tag>:
   bd420:	d4ec 000b d405 000b 6f6e 2074 6e65 756f     ........not enou
   bd430:	6867 7320 6170 6563 6620 726f 6620 726f     gh space for for
   bd440:	616d 2074 7865 6170 736e 6f69 206e 5028     mat expansion (P
   bd450:	656c 7361 2065 7573 6d62 7469 6620 6c75     lease submit ful
   bd460:	206c 7562 2067 6572 6f70 7472 6120 2074     l bug report at 
   bd470:	7468 7074 3a73 2f2f 6367 2e63 6e67 2e75     https://gcc.gnu.
   bd480:	726f 2f67 7562 7367 292f 0a3a 2020 2020     org/bugs/):.    
   bd490:	3000 3231 3433 3635 3837 0039 6162 6973     .0123456789.basi
   bd4a0:	5f63 7473 6972 676e 3a3a 4d5f 635f 6572     c_string::_M_cre
   bd4b0:	7461 0065                                   ate.

000bd4b4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bd4b4:	d54c 000b d4c0 000b d570 000b               L.......p...

000bd4c0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bd4c0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bd4d0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bd4e0:	0045 0000                                   E...

000bd4e4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bd4e4:	0000 0000 d4b4 000b 9c19 000b 9c2d 000b     ............-...
   bd4f4:	9dc1 000b 9dc1 000b 9c97 000b 9bd9 000b     ................
   bd504:	9c7f 000b 9c41 000b 9c0b 000b               ....A.......

000bd510 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bd510:	d54c 000b d51c 000b d4b4 000b               L...........

000bd51c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bd51c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bd52c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bd53c:	666e 456f 0000 0000                         nfoE....

000bd544 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bd544:	0000 0000 d510 000b 9cc1 000b 9cd5 000b     ................
   bd554:	9dc1 000b 9dc1 000b 9c97 000b 9bd9 000b     ................
   bd564:	9d95 000b 9d21 000b 9ce9 000b               ....!.......

000bd570 <_ZTISt9type_info>:
   bd570:	d4ec 000b d578 000b                         ....x...

000bd578 <_ZTSSt9type_info>:
   bd578:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bd588:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bd598:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   bd5a8:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bd5b8:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bd5c8:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bd5d8:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bd5e8:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   bd5f8:	6e69 7469 0079 6e61 0000 0000               inity.an....

000bd604 <fpi.1>:
   bd604:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bd614:	0000 0000                                   ....

000bd618 <fpinan.0>:
   bd618:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000bd630 <tinytens>:
   bd630:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bd640:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bd650:	6f43 64ac 0628 1168                         Co.d(.h.

000bd658 <_ctype_>:
   bd658:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bd668:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bd678:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bd688:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bd698:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bd6a8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bd6b8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bd6c8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bd6d8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bd758:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bd768:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   bd778:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bd788:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bd798:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bd7a8:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bd7b8:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bd7c8:	632e 0000                                   .c..

000bd7cc <_C_numeric_locale>:
   bd7cc:	d17e 000b cffe 000b 211c 2003 0043 4f50     ~........!. C.PO
   bd7dc:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   bd7ec:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bd7fc:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bd80c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bd81c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bd82c:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   bd83c:	0000 0000                                   ....

000bd840 <__mprec_bigtens>:
   bd840:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bd850:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bd860:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bd868 <__mprec_tens>:
   bd868:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bd878:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bd888:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bd898:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bd8a8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bd8b8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bd8c8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bd8d8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bd8e8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bd8f8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bd908:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bd918:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bd928:	9db4 79d9 7843 44ea                         ...yCx.D

000bd930 <p05.0>:
   bd930:	0005 0000 0019 0000 007d 0000               ........}...

000bd93c <link_const_variable_data_end>:
   bd93c:	000b5b11 	.word	0x000b5b11
   bd940:	000b6e09 	.word	0x000b6e09
   bd944:	000b86e5 	.word	0x000b86e5
   bd948:	000b875d 	.word	0x000b875d
   bd94c:	000b8989 	.word	0x000b8989
   bd950:	000b8ae9 	.word	0x000b8ae9
   bd954:	000b8c25 	.word	0x000b8c25
   bd958:	000b8ea1 	.word	0x000b8ea1
   bd95c:	000b94a5 	.word	0x000b94a5
   bd960:	000b96cd 	.word	0x000b96cd

000bd964 <link_constructors_end>:
	...
