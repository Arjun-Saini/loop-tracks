
/Users/sainihome/Documents/GitHub/loop-tracks/master/target/3.3.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007bf0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bbc10  000bbc10  0000bc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bbc34  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f0  20035608  000bbc38  00015608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00008ff8  200357f8  200357f8  000257f8  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bbe28  000bbe28  0001be28  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bbe50  000bbe50  0001be50  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00116645  00000000  00000000  0001be54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00012ac4  00000000  00000000  00132499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003b9b0  00000000  00000000  00144f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003190  00000000  00000000  0018090d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000ae70  00000000  00000000  00183a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000380e8  00000000  00000000  0018e90d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000400b2  00000000  00000000  001c69f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00133b1d  00000000  00000000  00206aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000940c  00000000  00000000  0033a5c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 ffd4 	bl	b8fde <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 fff6 	bl	b902e <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	20035608 	.word	0x20035608
   b404c:	000bbc38 	.word	0x000bbc38
   b4050:	200357f8 	.word	0x200357f8
   b4054:	200357f8 	.word	0x200357f8
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f003 ffef 	bl	b8044 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bbbe4 	.word	0x000bbbe4
   b4080:	000bbc0c 	.word	0x000bbc0c

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 ba66 	b.w	b4554 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fbc3 	bl	b4814 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f003 bf8f 	b.w	b7fb4 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 bd4b 	b.w	b5b30 <malloc>

000b409a <_Znaj>:
   b409a:	f001 bd49 	b.w	b5b30 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 bd4f 	b.w	b5b40 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr
	...

000b40b4 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40b4:	b510      	push	{r4, lr}
   b40b6:	4b03      	ldr	r3, [pc, #12]	; (b40c4 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   b40b8:	6003      	str	r3, [r0, #0]
   b40ba:	4604      	mov	r4, r0
   b40bc:	f000 fe86 	bl	b4dcc <_ZN10JsonParserD1Ev>
   b40c0:	4620      	mov	r0, r4
   b40c2:	bd10      	pop	{r4, pc}
   b40c4:	000bb2e8 	.word	0x000bb2e8

000b40c8 <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   b40c8:	b510      	push	{r4, lr}
   b40ca:	4604      	mov	r4, r0
   b40cc:	f7ff fff2 	bl	b40b4 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   b40d0:	4620      	mov	r0, r4
   b40d2:	f246 51bc 	movw	r1, #26044	; 0x65bc
   b40d6:	f7ff ffe2 	bl	b409e <_ZdlPvj>
   b40da:	4620      	mov	r0, r4
   b40dc:	bd10      	pop	{r4, pc}

000b40de <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b40de:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40e0:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b40e2:	4606      	mov	r6, r0
   b40e4:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b40e6:	da0b      	bge.n	b4100 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b40e8:	2a0a      	cmp	r2, #10
   b40ea:	d109      	bne.n	b4100 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b40ec:	212d      	movs	r1, #45	; 0x2d
   b40ee:	f003 f94f 	bl	b7390 <_ZN5Print5printEc>
            val = -n;
   b40f2:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40f4:	b2ea      	uxtb	r2, r5
   b40f6:	4630      	mov	r0, r6
    }
}
   b40f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b40fc:	f003 b961 	b.w	b73c2 <_ZN5Print11printNumberEmh>
            val = n;
   b4100:	4621      	mov	r1, r4
   b4102:	e7f7      	b.n	b40f4 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b4104 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4104:	6803      	ldr	r3, [r0, #0]
   b4106:	b2c9      	uxtb	r1, r1
   b4108:	689b      	ldr	r3, [r3, #8]
   b410a:	4718      	bx	r3

000b410c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
      count++;
    }
  }
}

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b410c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  String inputBuffer = "";

  if(bleCount <= slaveCountExpected){
   b4110:	4c46      	ldr	r4, [pc, #280]	; (b422c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x120>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4112:	4680      	mov	r8, r0
   b4114:	460e      	mov	r6, r1
  String inputBuffer = "";
   b4116:	4668      	mov	r0, sp
   b4118:	4945      	ldr	r1, [pc, #276]	; (b4230 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x124>)
   b411a:	f003 f9f2 	bl	b7502 <_ZN6StringC1EPK19__FlashStringHelper>
  if(bleCount <= slaveCountExpected){
   b411e:	6823      	ldr	r3, [r4, #0]
   b4120:	2b01      	cmp	r3, #1
   b4122:	dc7a      	bgt.n	b421a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10e>
    int input;

    for(int i = 0; i < len - 1; i++){
   b4124:	2700      	movs	r7, #0
   b4126:	3e01      	subs	r6, #1
   b4128:	42be      	cmp	r6, r7
   b412a:	d90a      	bls.n	b4142 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x36>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b412c:	f818 1007 	ldrb.w	r1, [r8, r7]
   b4130:	4668      	mov	r0, sp
   b4132:	f003 fa3a 	bl	b75aa <_ZN6String6concatEc>
      inputBuffer += (char)data[i];
      input = atoi(inputBuffer);
   b4136:	9800      	ldr	r0, [sp, #0]
   b4138:	f004 ff3d 	bl	b8fb6 <atoi>
    for(int i = 0; i < len - 1; i++){
   b413c:	3701      	adds	r7, #1
      input = atoi(inputBuffer);
   b413e:	4605      	mov	r5, r0
    for(int i = 0; i < len - 1; i++){
   b4140:	e7f2      	b.n	b4128 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c>
    }

    if(bleCount < slaveCountExpected){
   b4142:	6823      	ldr	r3, [r4, #0]
   b4144:	2b00      	cmp	r3, #0
   b4146:	dc04      	bgt.n	b4152 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x46>
      txCharacteristic.setValue("\nEnter the position of the device with the blue LED as an integer (first device is at 1, second is at 2, etc): ");
   b4148:	493a      	ldr	r1, [pc, #232]	; (b4234 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
   b414a:	483b      	ldr	r0, [pc, #236]	; (b4238 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b414c:	2200      	movs	r2, #0
   b414e:	f001 ffe9 	bl	b6124 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    }

    Wire.beginTransmission(addressArr[bleCount]);
   b4152:	f003 ffab 	bl	b80ac <_Z19__fetch_global_Wirev>
   b4156:	4e39      	ldr	r6, [pc, #228]	; (b423c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
   b4158:	6823      	ldr	r3, [r4, #0]
   b415a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   b415e:	f002 ff99 	bl	b7094 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('3');
   b4162:	f003 ffa3 	bl	b80ac <_Z19__fetch_global_Wirev>
   b4166:	2133      	movs	r1, #51	; 0x33
   b4168:	f7ff ffcc 	bl	b4104 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b416c:	f003 ff9e 	bl	b80ac <_Z19__fetch_global_Wirev>
   b4170:	f002 ff97 	bl	b70a2 <_ZN7TwoWire15endTransmissionEv>

    if(bleCount > 0){
   b4174:	6823      	ldr	r3, [r4, #0]
   b4176:	2b00      	cmp	r3, #0
   b4178:	dd17      	ble.n	b41aa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9e>
      sequenceArr[input - 1] = addressArr[bleCount - 1];
   b417a:	3b01      	subs	r3, #1
   b417c:	3d01      	subs	r5, #1
   b417e:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   b4182:	4b2f      	ldr	r3, [pc, #188]	; (b4240 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
   b4184:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
      
      Wire.beginTransmission(addressArr[bleCount - 1]);
   b4188:	f003 ff90 	bl	b80ac <_Z19__fetch_global_Wirev>
   b418c:	6823      	ldr	r3, [r4, #0]
   b418e:	3b01      	subs	r3, #1
   b4190:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   b4194:	f002 ff7e 	bl	b7094 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b4198:	f003 ff88 	bl	b80ac <_Z19__fetch_global_Wirev>
   b419c:	2134      	movs	r1, #52	; 0x34
   b419e:	f7ff ffb1 	bl	b4104 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b41a2:	f003 ff83 	bl	b80ac <_Z19__fetch_global_Wirev>
   b41a6:	f002 ff7c 	bl	b70a2 <_ZN7TwoWire15endTransmissionEv>
    }
  }

  if(bleCount == slaveCountExpected){
   b41aa:	6823      	ldr	r3, [r4, #0]
   b41ac:	2b01      	cmp	r3, #1
   b41ae:	d134      	bne.n	b421a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10e>
    delay(1000);
    Serial.println("\nSequence: ");
    for(int i = 0; i < slaveCountExpected; i++){
      Serial.print(sequenceArr[i]);
   b41b0:	4d23      	ldr	r5, [pc, #140]	; (b4240 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
    delay(1000);
   b41b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b41b6:	f001 fd0b 	bl	b5bd0 <delay>
    Serial.println("\nSequence: ");
   b41ba:	f003 fe29 	bl	b7e10 <_Z16_fetch_usbserialv>
   b41be:	4921      	ldr	r1, [pc, #132]	; (b4244 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   b41c0:	f003 f8f5 	bl	b73ae <_ZN5Print7printlnEPKc>
      Serial.print(sequenceArr[i]);
   b41c4:	f003 fe24 	bl	b7e10 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   b41c8:	220a      	movs	r2, #10
   b41ca:	6829      	ldr	r1, [r5, #0]
   b41cc:	f7ff ff87 	bl	b40de <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      Serial.print(", ");
   b41d0:	f003 fe1e 	bl	b7e10 <_Z16_fetch_usbserialv>
   b41d4:	491c      	ldr	r1, [pc, #112]	; (b4248 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b41d6:	f003 f8d7 	bl	b7388 <_ZN5Print5printEPKc>

      Wire.beginTransmission(sequenceArr[i]);
   b41da:	f003 ff67 	bl	b80ac <_Z19__fetch_global_Wirev>
   b41de:	6829      	ldr	r1, [r5, #0]
   b41e0:	f002 ff58 	bl	b7094 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('3');
   b41e4:	f003 ff62 	bl	b80ac <_Z19__fetch_global_Wirev>
   b41e8:	2133      	movs	r1, #51	; 0x33
   b41ea:	f7ff ff8b 	bl	b4104 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b41ee:	f003 ff5d 	bl	b80ac <_Z19__fetch_global_Wirev>
   b41f2:	f002 ff56 	bl	b70a2 <_ZN7TwoWire15endTransmissionEv>
      delay(2000);
   b41f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b41fa:	f001 fce9 	bl	b5bd0 <delay>
      Wire.beginTransmission(sequenceArr[i]);
   b41fe:	f003 ff55 	bl	b80ac <_Z19__fetch_global_Wirev>
   b4202:	6829      	ldr	r1, [r5, #0]
   b4204:	f002 ff46 	bl	b7094 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b4208:	f003 ff50 	bl	b80ac <_Z19__fetch_global_Wirev>
   b420c:	2134      	movs	r1, #52	; 0x34
   b420e:	f7ff ff79 	bl	b4104 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4212:	f003 ff4b 	bl	b80ac <_Z19__fetch_global_Wirev>
   b4216:	f002 ff44 	bl	b70a2 <_ZN7TwoWire15endTransmissionEv>
    }
    //BLE.disconnect();
    //BLE.off();
  }

  bleCount++;
   b421a:	6823      	ldr	r3, [r4, #0]
  String inputBuffer = "";
   b421c:	4668      	mov	r0, sp
  bleCount++;
   b421e:	3301      	adds	r3, #1
   b4220:	6023      	str	r3, [r4, #0]
  String inputBuffer = "";
   b4222:	f003 f923 	bl	b746c <_ZN6StringD1Ev>
}
   b4226:	b004      	add	sp, #16
   b4228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b422c:	20035838 	.word	0x20035838
   b4230:	000bb335 	.word	0x000bb335
   b4234:	000bb098 	.word	0x000bb098
   b4238:	2003e6ac 	.word	0x2003e6ac
   b423c:	20035834 	.word	0x20035834
   b4240:	2003e6a4 	.word	0x2003e6a4
   b4244:	000bb108 	.word	0x000bb108
   b4248:	000bb114 	.word	0x000bb114

000b424c <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b424c:	b40e      	push	{r1, r2, r3}
   b424e:	b503      	push	{r0, r1, lr}
   b4250:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4252:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4254:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4258:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b425a:	f003 f8d0 	bl	b73fe <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b425e:	b002      	add	sp, #8
   b4260:	f85d eb04 	ldr.w	lr, [sp], #4
   b4264:	b003      	add	sp, #12
   b4266:	4770      	bx	lr

000b4268 <_Z16randomizeAddressv>:
void randomizeAddress(){
   b4268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while(slaveCount != slaveCountExpected){
   b426c:	4da3      	ldr	r5, [pc, #652]	; (b44fc <_Z16randomizeAddressv+0x294>)

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b426e:	f8df 82b0 	ldr.w	r8, [pc, #688]	; b4520 <_Z16randomizeAddressv+0x2b8>
void randomizeAddress(){
   b4272:	b08e      	sub	sp, #56	; 0x38
  while(slaveCount != slaveCountExpected){
   b4274:	682b      	ldr	r3, [r5, #0]
   b4276:	2b01      	cmp	r3, #1
   b4278:	f000 8107 	beq.w	b448a <_Z16randomizeAddressv+0x222>
    slaveCount = 0;
   b427c:	2300      	movs	r3, #0
   b427e:	f8df 92a4 	ldr.w	r9, [pc, #676]	; b4524 <_Z16randomizeAddressv+0x2bc>
        String inputBuffer = "";
   b4282:	4f9f      	ldr	r7, [pc, #636]	; (b4500 <_Z16randomizeAddressv+0x298>)
    slaveCount = 0;
   b4284:	602b      	str	r3, [r5, #0]
    for(int i = 8; i <= 119; i++){
   b4286:	2408      	movs	r4, #8
      Serial.println("\nrequest code 1, address: " + String(i));
   b4288:	f003 fdc2 	bl	b7e10 <_Z16_fetch_usbserialv>
   b428c:	4641      	mov	r1, r8
   b428e:	4606      	mov	r6, r0
   b4290:	a80a      	add	r0, sp, #40	; 0x28
   b4292:	f003 f936 	bl	b7502 <_ZN6StringC1EPK19__FlashStringHelper>
   b4296:	220a      	movs	r2, #10
   b4298:	4621      	mov	r1, r4
   b429a:	a806      	add	r0, sp, #24
   b429c:	f003 f957 	bl	b754e <_ZN6StringC1Eih>
   b42a0:	a906      	add	r1, sp, #24
   b42a2:	a80a      	add	r0, sp, #40	; 0x28
   b42a4:	f003 f98e 	bl	b75c4 <_ZplRK15StringSumHelperRK6String>
   b42a8:	6801      	ldr	r1, [r0, #0]
   b42aa:	4630      	mov	r0, r6
   b42ac:	f003 f87f 	bl	b73ae <_ZN5Print7printlnEPKc>
   b42b0:	a806      	add	r0, sp, #24
   b42b2:	f003 f8db 	bl	b746c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b42b6:	a80a      	add	r0, sp, #40	; 0x28
   b42b8:	f003 f8d8 	bl	b746c <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   b42bc:	f003 fef6 	bl	b80ac <_Z19__fetch_global_Wirev>
   b42c0:	4621      	mov	r1, r4
   b42c2:	f002 fee7 	bl	b7094 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   b42c6:	f003 fef1 	bl	b80ac <_Z19__fetch_global_Wirev>
   b42ca:	2131      	movs	r1, #49	; 0x31
   b42cc:	f7ff ff1a 	bl	b4104 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b42d0:	fa5f fa84 	uxtb.w	sl, r4
   b42d4:	f003 feea 	bl	b80ac <_Z19__fetch_global_Wirev>
   b42d8:	f002 fee3 	bl	b70a2 <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   b42dc:	f003 fee6 	bl	b80ac <_Z19__fetch_global_Wirev>
   b42e0:	2218      	movs	r2, #24
   b42e2:	4651      	mov	r1, sl
   b42e4:	f002 fecf 	bl	b7086 <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   b42e8:	f003 fee0 	bl	b80ac <_Z19__fetch_global_Wirev>
   b42ec:	6803      	ldr	r3, [r0, #0]
   b42ee:	691b      	ldr	r3, [r3, #16]
   b42f0:	4798      	blx	r3
   b42f2:	2800      	cmp	r0, #0
   b42f4:	f340 80c4 	ble.w	b4480 <_Z16randomizeAddressv+0x218>
        Serial.println("transmission recieved from: " + String(i));
   b42f8:	f003 fd8a 	bl	b7e10 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b42fc:	4649      	mov	r1, r9
   b42fe:	4606      	mov	r6, r0
   b4300:	a80a      	add	r0, sp, #40	; 0x28
   b4302:	f003 f8fe 	bl	b7502 <_ZN6StringC1EPK19__FlashStringHelper>
   b4306:	220a      	movs	r2, #10
   b4308:	4621      	mov	r1, r4
   b430a:	a806      	add	r0, sp, #24
   b430c:	f003 f91f 	bl	b754e <_ZN6StringC1Eih>
   b4310:	a906      	add	r1, sp, #24
   b4312:	a80a      	add	r0, sp, #40	; 0x28
   b4314:	f003 f956 	bl	b75c4 <_ZplRK15StringSumHelperRK6String>
   b4318:	6801      	ldr	r1, [r0, #0]
   b431a:	4630      	mov	r0, r6
   b431c:	f003 f847 	bl	b73ae <_ZN5Print7printlnEPKc>
   b4320:	a806      	add	r0, sp, #24
   b4322:	f003 f8a3 	bl	b746c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4326:	a80a      	add	r0, sp, #40	; 0x28
   b4328:	f003 f8a0 	bl	b746c <_ZN6StringD1Ev>
        slaveCount++;
   b432c:	682b      	ldr	r3, [r5, #0]
        String inputBuffer = "";
   b432e:	4639      	mov	r1, r7
        slaveCount++;
   b4330:	3301      	adds	r3, #1
        String inputBuffer = "";
   b4332:	a802      	add	r0, sp, #8
        slaveCount++;
   b4334:	602b      	str	r3, [r5, #0]
        String inputBuffer = "";
   b4336:	f003 f8e4 	bl	b7502 <_ZN6StringC1EPK19__FlashStringHelper>
   b433a:	2618      	movs	r6, #24
          c = Wire.read();
   b433c:	f003 feb6 	bl	b80ac <_Z19__fetch_global_Wirev>
   b4340:	6803      	ldr	r3, [r0, #0]
   b4342:	695b      	ldr	r3, [r3, #20]
   b4344:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b4346:	b2c1      	uxtb	r1, r0
   b4348:	a802      	add	r0, sp, #8
   b434a:	f003 f92e 	bl	b75aa <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   b434e:	3e01      	subs	r6, #1
   b4350:	d1f4      	bne.n	b433c <_Z16randomizeAddressv+0xd4>
        Wire.beginTransmission(i);
   b4352:	f003 feab 	bl	b80ac <_Z19__fetch_global_Wirev>
   b4356:	4621      	mov	r1, r4
   b4358:	f002 fe9c 	bl	b7094 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   b435c:	f003 fea6 	bl	b80ac <_Z19__fetch_global_Wirev>
	const char * c_str() const { return buffer; }
   b4360:	9902      	ldr	r1, [sp, #8]
   b4362:	4606      	mov	r6, r0
      if (str == NULL) return 0;
   b4364:	b149      	cbz	r1, b437a <_Z16randomizeAddressv+0x112>
      return write((const uint8_t *)str, strlen(str));
   b4366:	4608      	mov	r0, r1
   b4368:	9101      	str	r1, [sp, #4]
   b436a:	f004 fea9 	bl	b90c0 <strlen>
   b436e:	6833      	ldr	r3, [r6, #0]
   b4370:	9901      	ldr	r1, [sp, #4]
   b4372:	68db      	ldr	r3, [r3, #12]
   b4374:	4602      	mov	r2, r0
   b4376:	4630      	mov	r0, r6
   b4378:	4798      	blx	r3
        Serial.println("device id: " + inputBuffer);
   b437a:	f003 fd49 	bl	b7e10 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b437e:	4961      	ldr	r1, [pc, #388]	; (b4504 <_Z16randomizeAddressv+0x29c>)
   b4380:	4606      	mov	r6, r0
   b4382:	a80a      	add	r0, sp, #40	; 0x28
   b4384:	f003 f8bd 	bl	b7502 <_ZN6StringC1EPK19__FlashStringHelper>
   b4388:	a902      	add	r1, sp, #8
   b438a:	a80a      	add	r0, sp, #40	; 0x28
   b438c:	f003 f91a 	bl	b75c4 <_ZplRK15StringSumHelperRK6String>
   b4390:	6801      	ldr	r1, [r0, #0]
   b4392:	4630      	mov	r0, r6
   b4394:	f003 f80b 	bl	b73ae <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4398:	a80a      	add	r0, sp, #40	; 0x28
   b439a:	f003 f867 	bl	b746c <_ZN6StringD1Ev>
        Wire.endTransmission();
   b439e:	f003 fe85 	bl	b80ac <_Z19__fetch_global_Wirev>
   b43a2:	f002 fe7e 	bl	b70a2 <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   b43a6:	f003 fd33 	bl	b7e10 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b43aa:	4957      	ldr	r1, [pc, #348]	; (b4508 <_Z16randomizeAddressv+0x2a0>)
   b43ac:	4606      	mov	r6, r0
   b43ae:	a80a      	add	r0, sp, #40	; 0x28
   b43b0:	f003 f8a7 	bl	b7502 <_ZN6StringC1EPK19__FlashStringHelper>
   b43b4:	220a      	movs	r2, #10
   b43b6:	4621      	mov	r1, r4
   b43b8:	a806      	add	r0, sp, #24
   b43ba:	f003 f8c8 	bl	b754e <_ZN6StringC1Eih>
   b43be:	a906      	add	r1, sp, #24
   b43c0:	a80a      	add	r0, sp, #40	; 0x28
   b43c2:	f003 f8ff 	bl	b75c4 <_ZplRK15StringSumHelperRK6String>
   b43c6:	6801      	ldr	r1, [r0, #0]
   b43c8:	4630      	mov	r0, r6
   b43ca:	f002 fff0 	bl	b73ae <_ZN5Print7printlnEPKc>
   b43ce:	a806      	add	r0, sp, #24
   b43d0:	f003 f84c 	bl	b746c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b43d4:	a80a      	add	r0, sp, #40	; 0x28
   b43d6:	f003 f849 	bl	b746c <_ZN6StringD1Ev>
        Wire.beginTransmission(i);
   b43da:	f003 fe67 	bl	b80ac <_Z19__fetch_global_Wirev>
   b43de:	4621      	mov	r1, r4
   b43e0:	f002 fe58 	bl	b7094 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   b43e4:	f003 fe62 	bl	b80ac <_Z19__fetch_global_Wirev>
   b43e8:	2132      	movs	r1, #50	; 0x32
   b43ea:	f7ff fe8b 	bl	b4104 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b43ee:	f003 fe5d 	bl	b80ac <_Z19__fetch_global_Wirev>
   b43f2:	f002 fe56 	bl	b70a2 <_ZN7TwoWire15endTransmissionEv>
        Serial.println("request code 2, address: " + String(i));
   b43f6:	f003 fd0b 	bl	b7e10 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b43fa:	4944      	ldr	r1, [pc, #272]	; (b450c <_Z16randomizeAddressv+0x2a4>)
   b43fc:	4606      	mov	r6, r0
   b43fe:	a80a      	add	r0, sp, #40	; 0x28
   b4400:	f003 f87f 	bl	b7502 <_ZN6StringC1EPK19__FlashStringHelper>
   b4404:	220a      	movs	r2, #10
   b4406:	4621      	mov	r1, r4
   b4408:	a806      	add	r0, sp, #24
   b440a:	f003 f8a0 	bl	b754e <_ZN6StringC1Eih>
   b440e:	a906      	add	r1, sp, #24
   b4410:	a80a      	add	r0, sp, #40	; 0x28
   b4412:	f003 f8d7 	bl	b75c4 <_ZplRK15StringSumHelperRK6String>
   b4416:	6801      	ldr	r1, [r0, #0]
   b4418:	4630      	mov	r0, r6
   b441a:	f002 ffc8 	bl	b73ae <_ZN5Print7printlnEPKc>
   b441e:	a806      	add	r0, sp, #24
   b4420:	f003 f824 	bl	b746c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4424:	a80a      	add	r0, sp, #40	; 0x28
   b4426:	f003 f821 	bl	b746c <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   b442a:	f003 fe3f 	bl	b80ac <_Z19__fetch_global_Wirev>
   b442e:	2204      	movs	r2, #4
   b4430:	4651      	mov	r1, sl
   b4432:	f002 fe28 	bl	b7086 <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   b4436:	4639      	mov	r1, r7
   b4438:	a802      	add	r0, sp, #8
   b443a:	f003 f876 	bl	b752a <_ZN6StringaSEPKc>
   b443e:	2604      	movs	r6, #4
          inputBuffer += (char)Wire.read();
   b4440:	f003 fe34 	bl	b80ac <_Z19__fetch_global_Wirev>
   b4444:	6803      	ldr	r3, [r0, #0]
   b4446:	695b      	ldr	r3, [r3, #20]
   b4448:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b444a:	b2c1      	uxtb	r1, r0
   b444c:	a802      	add	r0, sp, #8
   b444e:	f003 f8ac 	bl	b75aa <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   b4452:	3e01      	subs	r6, #1
   b4454:	d1f4      	bne.n	b4440 <_Z16randomizeAddressv+0x1d8>
        Serial.println("conflict verification: " + inputBuffer);
   b4456:	f003 fcdb 	bl	b7e10 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b445a:	492d      	ldr	r1, [pc, #180]	; (b4510 <_Z16randomizeAddressv+0x2a8>)
   b445c:	4606      	mov	r6, r0
   b445e:	a80a      	add	r0, sp, #40	; 0x28
   b4460:	f003 f84f 	bl	b7502 <_ZN6StringC1EPK19__FlashStringHelper>
   b4464:	a902      	add	r1, sp, #8
   b4466:	a80a      	add	r0, sp, #40	; 0x28
   b4468:	f003 f8ac 	bl	b75c4 <_ZplRK15StringSumHelperRK6String>
   b446c:	6801      	ldr	r1, [r0, #0]
   b446e:	4630      	mov	r0, r6
   b4470:	f002 ff9d 	bl	b73ae <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4474:	a80a      	add	r0, sp, #40	; 0x28
   b4476:	f002 fff9 	bl	b746c <_ZN6StringD1Ev>
        String inputBuffer = "";
   b447a:	a802      	add	r0, sp, #8
   b447c:	f002 fff6 	bl	b746c <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   b4480:	3401      	adds	r4, #1
   b4482:	2c78      	cmp	r4, #120	; 0x78
   b4484:	f47f af00 	bne.w	b4288 <_Z16randomizeAddressv+0x20>
   b4488:	e6f4      	b.n	b4274 <_Z16randomizeAddressv+0xc>
  Serial.println("\nConnected to: ");
   b448a:	f003 fcc1 	bl	b7e10 <_Z16_fetch_usbserialv>
   b448e:	4921      	ldr	r1, [pc, #132]	; (b4514 <_Z16randomizeAddressv+0x2ac>)
      Serial.print(", ");
   b4490:	4e21      	ldr	r6, [pc, #132]	; (b4518 <_Z16randomizeAddressv+0x2b0>)
      addressArr[count] = i;
   b4492:	4f22      	ldr	r7, [pc, #136]	; (b451c <_Z16randomizeAddressv+0x2b4>)
  Serial.println("\nConnected to: ");
   b4494:	f002 ff8b 	bl	b73ae <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   b4498:	2408      	movs	r4, #8
  int count = 0;
   b449a:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   b449c:	f003 fe06 	bl	b80ac <_Z19__fetch_global_Wirev>
   b44a0:	4621      	mov	r1, r4
   b44a2:	f002 fdf7 	bl	b7094 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   b44a6:	f003 fe01 	bl	b80ac <_Z19__fetch_global_Wirev>
   b44aa:	2131      	movs	r1, #49	; 0x31
   b44ac:	f7ff fe2a 	bl	b4104 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b44b0:	f003 fdfc 	bl	b80ac <_Z19__fetch_global_Wirev>
   b44b4:	f002 fdf5 	bl	b70a2 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   b44b8:	f003 fdf8 	bl	b80ac <_Z19__fetch_global_Wirev>
   b44bc:	2218      	movs	r2, #24
   b44be:	b2e1      	uxtb	r1, r4
   b44c0:	f002 fde1 	bl	b7086 <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   b44c4:	f003 fdf2 	bl	b80ac <_Z19__fetch_global_Wirev>
   b44c8:	6803      	ldr	r3, [r0, #0]
   b44ca:	691b      	ldr	r3, [r3, #16]
   b44cc:	4798      	blx	r3
   b44ce:	2800      	cmp	r0, #0
   b44d0:	dd0d      	ble.n	b44ee <_Z16randomizeAddressv+0x286>
      Serial.print(i);
   b44d2:	f003 fc9d 	bl	b7e10 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   b44d6:	220a      	movs	r2, #10
   b44d8:	4621      	mov	r1, r4
   b44da:	f7ff fe00 	bl	b40de <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      Serial.print(", ");
   b44de:	f003 fc97 	bl	b7e10 <_Z16_fetch_usbserialv>
   b44e2:	4631      	mov	r1, r6
   b44e4:	f002 ff50 	bl	b7388 <_ZN5Print5printEPKc>
      addressArr[count] = i;
   b44e8:	f847 4025 	str.w	r4, [r7, r5, lsl #2]
      count++;
   b44ec:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   b44ee:	3401      	adds	r4, #1
   b44f0:	2c78      	cmp	r4, #120	; 0x78
   b44f2:	d1d3      	bne.n	b449c <_Z16randomizeAddressv+0x234>
}
   b44f4:	b00e      	add	sp, #56	; 0x38
   b44f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b44fa:	bf00      	nop
   b44fc:	2003e6a8 	.word	0x2003e6a8
   b4500:	000bb335 	.word	0x000bb335
   b4504:	000bb14f 	.word	0x000bb14f
   b4508:	000bb15b 	.word	0x000bb15b
   b450c:	000bb172 	.word	0x000bb172
   b4510:	000bb18c 	.word	0x000bb18c
   b4514:	000bb1a4 	.word	0x000bb1a4
   b4518:	000bb114 	.word	0x000bb114
   b451c:	20035834 	.word	0x20035834
   b4520:	000bb117 	.word	0x000bb117
   b4524:	000bb132 	.word	0x000bb132

000b4528 <_Z17acquireWireBufferv>:

hal_i2c_config_t acquireWireBuffer() {
   b4528:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b452a:	f44f 7500 	mov.w	r5, #512	; 0x200
   b452e:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b4530:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b4532:	6003      	str	r3, [r0, #0]
   b4534:	6085      	str	r5, [r0, #8]
   b4536:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4538:	4905      	ldr	r1, [pc, #20]	; (b4550 <_Z17acquireWireBufferv+0x28>)
   b453a:	4628      	mov	r0, r5
   b453c:	f003 fe1a 	bl	b8174 <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4540:	4903      	ldr	r1, [pc, #12]	; (b4550 <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b4542:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4544:	4628      	mov	r0, r5
   b4546:	f003 fe15 	bl	b8174 <_ZnajRKSt9nothrow_t>
    };
   b454a:	60e0      	str	r0, [r4, #12]
    return config;
   b454c:	4620      	mov	r0, r4
   b454e:	bd38      	pop	{r3, r4, r5, pc}
   b4550:	000bb73c 	.word	0x000bb73c

000b4554 <setup>:
void setup() {
   b4554:	b570      	push	{r4, r5, r6, lr}
   b4556:	b090      	sub	sp, #64	; 0x40
  Serial.begin(9600);
   b4558:	f003 fc5a 	bl	b7e10 <_Z16_fetch_usbserialv>
   b455c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4560:	f003 fc4a 	bl	b7df8 <_ZN9USBSerial5beginEl>
  delay(2000);
   b4564:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4568:	f001 fb32 	bl	b5bd0 <delay>
  BLE.on();
   b456c:	f001 fe9c 	bl	b62a8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4570:	f001 fee4 	bl	b633c <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   b4574:	f001 fe98 	bl	b62a8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4578:	4a2c      	ldr	r2, [pc, #176]	; (b462c <setup+0xd8>)
   b457a:	4c2d      	ldr	r4, [pc, #180]	; (b4630 <setup+0xdc>)
   b457c:	4601      	mov	r1, r0
   b457e:	a80b      	add	r0, sp, #44	; 0x2c
   b4580:	f002 fbc6 	bl	b6d10 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4584:	a80b      	add	r0, sp, #44	; 0x2c
   b4586:	f001 ff80 	bl	b648a <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b458a:	f001 fe8d 	bl	b62a8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b458e:	4a29      	ldr	r2, [pc, #164]	; (b4634 <setup+0xe0>)
   b4590:	4601      	mov	r1, r0
   b4592:	a80b      	add	r0, sp, #44	; 0x2c
   b4594:	f002 fbbc 	bl	b6d10 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4598:	a80b      	add	r0, sp, #44	; 0x2c
   b459a:	f001 ff76 	bl	b648a <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   b459e:	a803      	add	r0, sp, #12
   b45a0:	f002 f8a9 	bl	b66f6 <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b45a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b45a6:	ad06      	add	r5, sp, #24
   b45a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b45aa:	ad06      	add	r5, sp, #24
   b45ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b45ae:	6826      	ldr	r6, [r4, #0]
   b45b0:	ac0b      	add	r4, sp, #44	; 0x2c
   b45b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b45b4:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b45b6:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b45b8:	f001 fc78 	bl	b5eac <_ZNK8particle7BleUuid4typeEv>
   b45bc:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b45be:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b45c0:	bb5c      	cbnz	r4, b461a <setup+0xc6>
            uint16_t uuid16 = tempUUID.shorted();
   b45c2:	f001 fc8f 	bl	b5ee4 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b45c6:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b45c8:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b45cc:	2302      	movs	r3, #2
   b45ce:	f10d 020a 	add.w	r2, sp, #10
   b45d2:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b45d4:	a803      	add	r0, sp, #12
   b45d6:	f002 f883 	bl	b66e0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   b45da:	f001 fe65 	bl	b62a8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b45de:	2200      	movs	r2, #0
   b45e0:	a903      	add	r1, sp, #12
   b45e2:	f001 fef5 	bl	b63d0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  request.hostname = "lapi.transitchicago.com";
   b45e6:	4c14      	ldr	r4, [pc, #80]	; (b4638 <setup+0xe4>)
  acquireWireBuffer();
   b45e8:	a80b      	add	r0, sp, #44	; 0x2c
   b45ea:	f7ff ff9d 	bl	b4528 <_Z17acquireWireBufferv>
  Wire.begin();
   b45ee:	f003 fd5d 	bl	b80ac <_Z19__fetch_global_Wirev>
   b45f2:	f002 fd19 	bl	b7028 <_ZN7TwoWire5beginEv>
  randomizeAddress();
   b45f6:	f7ff fe37 	bl	b4268 <_Z16randomizeAddressv>
  request.hostname = "lapi.transitchicago.com";
   b45fa:	4910      	ldr	r1, [pc, #64]	; (b463c <setup+0xe8>)
   b45fc:	4620      	mov	r0, r4
   b45fe:	f002 ff94 	bl	b752a <_ZN6StringaSEPKc>
  request.port = 80;
   b4602:	2350      	movs	r3, #80	; 0x50
  request.path = "/api/1.0/ttpositions.aspx?key=00ff09063caa46748434d5fa321d048f&rt=red&outputType=JSON";
   b4604:	490e      	ldr	r1, [pc, #56]	; (b4640 <setup+0xec>)
  request.port = 80;
   b4606:	63a3      	str	r3, [r4, #56]	; 0x38
  request.path = "/api/1.0/ttpositions.aspx?key=00ff09063caa46748434d5fa321d048f&rt=red&outputType=JSON";
   b4608:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b460c:	f002 ff8d 	bl	b752a <_ZN6StringaSEPKc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4610:	9803      	ldr	r0, [sp, #12]
   b4612:	f001 fa95 	bl	b5b40 <free>
}
   b4616:	b010      	add	sp, #64	; 0x40
   b4618:	bd70      	pop	{r4, r5, r6, pc}
   b461a:	f001 fc65 	bl	b5ee8 <_ZNK8particle7BleUuid8rawBytesEv>
   b461e:	2300      	movs	r3, #0
   b4620:	9300      	str	r3, [sp, #0]
   b4622:	4602      	mov	r2, r0
   b4624:	2310      	movs	r3, #16
   b4626:	2107      	movs	r1, #7
   b4628:	e7d4      	b.n	b45d4 <setup+0x80>
   b462a:	bf00      	nop
   b462c:	2003e6ac 	.word	0x2003e6ac
   b4630:	200357f8 	.word	0x200357f8
   b4634:	2003e69c 	.word	0x2003e69c
   b4638:	2003e63c 	.word	0x2003e63c
   b463c:	000bb1b4 	.word	0x000bb1b4
   b4640:	000bb1cc 	.word	0x000bb1cc

000b4644 <_GLOBAL__sub_I_addressArr>:
   b4644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b4648:	4c55      	ldr	r4, [pc, #340]	; (b47a0 <_GLOBAL__sub_I_addressArr+0x15c>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b464a:	4d56      	ldr	r5, [pc, #344]	; (b47a4 <_GLOBAL__sub_I_addressArr+0x160>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b464c:	4956      	ldr	r1, [pc, #344]	; (b47a8 <_GLOBAL__sub_I_addressArr+0x164>)
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b464e:	4e57      	ldr	r6, [pc, #348]	; (b47ac <_GLOBAL__sub_I_addressArr+0x168>)
   b4650:	b098      	sub	sp, #96	; 0x60
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b4652:	4620      	mov	r0, r4
   b4654:	f001 fcc8 	bl	b5fe8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b4658:	4955      	ldr	r1, [pc, #340]	; (b47b0 <_GLOBAL__sub_I_addressArr+0x16c>)
   b465a:	4628      	mov	r0, r5
   b465c:	f001 fcc4 	bl	b5fe8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b4660:	4954      	ldr	r1, [pc, #336]	; (b47b4 <_GLOBAL__sub_I_addressArr+0x170>)
   b4662:	4630      	mov	r0, r6
   b4664:	f001 fcc0 	bl	b5fe8 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b4668:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b466a:	af04      	add	r7, sp, #16
   b466c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b466e:	f8d6 c000 	ldr.w	ip, [r6]
   b4672:	f8c7 c000 	str.w	ip, [r7]
   b4676:	4627      	mov	r7, r4
   b4678:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b467a:	ae09      	add	r6, sp, #36	; 0x24
   b467c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b467e:	f10d 0a10 	add.w	sl, sp, #16
   b4682:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
   b4686:	f8d7 9000 	ldr.w	r9, [r7]
   b468a:	f8c6 9000 	str.w	r9, [r6]
   b468e:	ae0e      	add	r6, sp, #56	; 0x38
   b4690:	c60f      	stmia	r6!, {r0, r1, r2, r3}
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b4692:	f8df e17c 	ldr.w	lr, [pc, #380]	; b4810 <_GLOBAL__sub_I_addressArr+0x1cc>
   b4696:	f8c6 c000 	str.w	ip, [r6]
   b469a:	f04f 0800 	mov.w	r8, #0
        BleUuid sUuid(svcUuid);
   b469e:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b46a2:	e9ce 8800 	strd	r8, r8, [lr]
   b46a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b46aa:	ae13      	add	r6, sp, #76	; 0x4c
   b46ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b46ae:	f8c6 9000 	str.w	r9, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b46b2:	ae13      	add	r6, sp, #76	; 0x4c
   b46b4:	ab0e      	add	r3, sp, #56	; 0x38
   b46b6:	4670      	mov	r0, lr
   b46b8:	e9cd 8801 	strd	r8, r8, [sp, #4]
   b46bc:	493e      	ldr	r1, [pc, #248]	; (b47b8 <_GLOBAL__sub_I_addressArr+0x174>)
   b46be:	9600      	str	r6, [sp, #0]
   b46c0:	f04f 0210 	mov.w	r2, #16
   b46c4:	f002 f9fa 	bl	b6abc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b46c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b46ca:	f10d 0c10 	add.w	ip, sp, #16
   b46ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b46d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b46d4:	f8d5 e000 	ldr.w	lr, [r5]
   b46d8:	f8cc e000 	str.w	lr, [ip]
   b46dc:	ad09      	add	r5, sp, #36	; 0x24
   b46de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b46e0:	f8d7 c000 	ldr.w	ip, [r7]
   b46e4:	f8c5 c000 	str.w	ip, [r5]
        BleUuid cUuid(charUuid);
   b46e8:	ad04      	add	r5, sp, #16
   b46ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b46ec:	ac0e      	add	r4, sp, #56	; 0x38
   b46ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b46f0:	4f32      	ldr	r7, [pc, #200]	; (b47bc <_GLOBAL__sub_I_addressArr+0x178>)
   b46f2:	f8c4 e000 	str.w	lr, [r4]
        BleUuid sUuid(svcUuid);
   b46f6:	ad09      	add	r5, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b46f8:	e9c7 8800 	strd	r8, r8, [r7]
   b46fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b46fe:	4634      	mov	r4, r6
   b4700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4702:	4b2f      	ldr	r3, [pc, #188]	; (b47c0 <_GLOBAL__sub_I_addressArr+0x17c>)
        BleUuid sUuid(svcUuid);
   b4704:	f8c4 c000 	str.w	ip, [r4]
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b4708:	4c2e      	ldr	r4, [pc, #184]	; (b47c4 <_GLOBAL__sub_I_addressArr+0x180>)
        construct(desc, properties, cUuid, sUuid, callback, context);
   b470a:	492f      	ldr	r1, [pc, #188]	; (b47c8 <_GLOBAL__sub_I_addressArr+0x184>)
   b470c:	f8cd 8008 	str.w	r8, [sp, #8]
   b4710:	f04f 0204 	mov.w	r2, #4
   b4714:	e9cd 6300 	strd	r6, r3, [sp]
   b4718:	4638      	mov	r0, r7
   b471a:	ab0e      	add	r3, sp, #56	; 0x38
   b471c:	f002 f9ce 	bl	b6abc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b4720:	492a      	ldr	r1, [pc, #168]	; (b47cc <_GLOBAL__sub_I_addressArr+0x188>)
   b4722:	4620      	mov	r0, r4
   b4724:	f002 feed 	bl	b7502 <_ZN6StringC1EPK19__FlashStringHelper>
   b4728:	f104 0010 	add.w	r0, r4, #16
   b472c:	f002 fcf6 	bl	b711c <_ZN9IPAddressC1Ev>
   b4730:	4926      	ldr	r1, [pc, #152]	; (b47cc <_GLOBAL__sub_I_addressArr+0x188>)
   b4732:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b4736:	f002 fee4 	bl	b7502 <_ZN6StringC1EPK19__FlashStringHelper>
   b473a:	4924      	ldr	r1, [pc, #144]	; (b47cc <_GLOBAL__sub_I_addressArr+0x188>)
   b473c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b4740:	f002 fedf 	bl	b7502 <_ZN6StringC1EPK19__FlashStringHelper>
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b4744:	4921      	ldr	r1, [pc, #132]	; (b47cc <_GLOBAL__sub_I_addressArr+0x188>)
   b4746:	4822      	ldr	r0, [pc, #136]	; (b47d0 <_GLOBAL__sub_I_addressArr+0x18c>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b4748:	4c22      	ldr	r4, [pc, #136]	; (b47d4 <_GLOBAL__sub_I_addressArr+0x190>)
   b474a:	f002 feda 	bl	b7502 <_ZN6StringC1EPK19__FlashStringHelper>
      lat = la;
   b474e:	4b22      	ldr	r3, [pc, #136]	; (b47d8 <_GLOBAL__sub_I_addressArr+0x194>)
   b4750:	4a22      	ldr	r2, [pc, #136]	; (b47dc <_GLOBAL__sub_I_addressArr+0x198>)
   b4752:	601a      	str	r2, [r3, #0]
      lon = lo;
   b4754:	4a22      	ldr	r2, [pc, #136]	; (b47e0 <_GLOBAL__sub_I_addressArr+0x19c>)
   b4756:	605a      	str	r2, [r3, #4]
      lat = la;
   b4758:	4a22      	ldr	r2, [pc, #136]	; (b47e4 <_GLOBAL__sub_I_addressArr+0x1a0>)
   b475a:	609a      	str	r2, [r3, #8]
      lon = lo;
   b475c:	4a22      	ldr	r2, [pc, #136]	; (b47e8 <_GLOBAL__sub_I_addressArr+0x1a4>)
   b475e:	60da      	str	r2, [r3, #12]
      lat = la;
   b4760:	4a22      	ldr	r2, [pc, #136]	; (b47ec <_GLOBAL__sub_I_addressArr+0x1a8>)
   b4762:	611a      	str	r2, [r3, #16]
      lon = lo;
   b4764:	4a22      	ldr	r2, [pc, #136]	; (b47f0 <_GLOBAL__sub_I_addressArr+0x1ac>)
   b4766:	615a      	str	r2, [r3, #20]
      lat = la;
   b4768:	4a22      	ldr	r2, [pc, #136]	; (b47f4 <_GLOBAL__sub_I_addressArr+0x1b0>)
   b476a:	619a      	str	r2, [r3, #24]
      lon = lo;
   b476c:	4a22      	ldr	r2, [pc, #136]	; (b47f8 <_GLOBAL__sub_I_addressArr+0x1b4>)
   b476e:	61da      	str	r2, [r3, #28]
      lat = la;
   b4770:	4a22      	ldr	r2, [pc, #136]	; (b47fc <_GLOBAL__sub_I_addressArr+0x1b8>)
   b4772:	621a      	str	r2, [r3, #32]
      lon = lo;
   b4774:	4a22      	ldr	r2, [pc, #136]	; (b4800 <_GLOBAL__sub_I_addressArr+0x1bc>)
   b4776:	625a      	str	r2, [r3, #36]	; 0x24
HttpClient http;
   b4778:	4822      	ldr	r0, [pc, #136]	; (b4804 <_GLOBAL__sub_I_addressArr+0x1c0>)
   b477a:	f000 f9a7 	bl	b4acc <_ZN10HttpClientC1Ev>
   b477e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4782:	9300      	str	r3, [sp, #0]
   b4784:	f242 7210 	movw	r2, #10000	; 0x2710
   b4788:	4b1f      	ldr	r3, [pc, #124]	; (b4808 <_GLOBAL__sub_I_addressArr+0x1c4>)
   b478a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b478e:	4620      	mov	r0, r4
   b4790:	f000 fb74 	bl	b4e7c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b4794:	4b1d      	ldr	r3, [pc, #116]	; (b480c <_GLOBAL__sub_I_addressArr+0x1c8>)
   b4796:	6023      	str	r3, [r4, #0]
   b4798:	b018      	add	sp, #96	; 0x60
   b479a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b479e:	bf00      	nop
   b47a0:	200357f8 	.word	0x200357f8
   b47a4:	2003580c 	.word	0x2003580c
   b47a8:	000bb222 	.word	0x000bb222
   b47ac:	20035820 	.word	0x20035820
   b47b0:	000bb247 	.word	0x000bb247
   b47b4:	000bb26c 	.word	0x000bb26c
   b47b8:	000bb291 	.word	0x000bb291
   b47bc:	2003e69c 	.word	0x2003e69c
   b47c0:	000b410d 	.word	0x000b410d
   b47c4:	2003e63c 	.word	0x2003e63c
   b47c8:	000bb294 	.word	0x000bb294
   b47cc:	000bb335 	.word	0x000bb335
   b47d0:	2003e68c 	.word	0x2003e68c
   b47d4:	20038058 	.word	0x20038058
   b47d8:	2003e614 	.word	0x2003e614
   b47dc:	42276980 	.word	0x42276980
   b47e0:	c2af431e 	.word	0xc2af431e
   b47e4:	42279dcc 	.word	0x42279dcc
   b47e8:	c2af4202 	.word	0xc2af4202
   b47ec:	42279d95 	.word	0x42279d95
   b47f0:	c2af476d 	.word	0xc2af476d
   b47f4:	4227a7a9 	.word	0x4227a7a9
   b47f8:	c2af4e05 	.word	0xc2af4e05
   b47fc:	4227b2ce 	.word	0x4227b2ce
   b4800:	c2af6f18 	.word	0xc2af6f18
   b4804:	2003583c 	.word	0x2003583c
   b4808:	2003a794 	.word	0x2003a794
   b480c:	000bb2e8 	.word	0x000bb2e8
   b4810:	2003e6ac 	.word	0x2003e6ac

000b4814 <loop>:
void loop() {
   b4814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4818:	ed2d 8b04 	vpush	{d8-d9}
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b481c:	4c9b      	ldr	r4, [pc, #620]	; (b4a8c <loop+0x278>)
   b481e:	4b9c      	ldr	r3, [pc, #624]	; (b4a90 <loop+0x27c>)
   b4820:	499c      	ldr	r1, [pc, #624]	; (b4a94 <loop+0x280>)
   b4822:	489d      	ldr	r0, [pc, #628]	; (b4a98 <loop+0x284>)
   b4824:	b09b      	sub	sp, #108	; 0x6c
   b4826:	4622      	mov	r2, r4
   b4828:	af02      	add	r7, sp, #8
   b482a:	9300      	str	r3, [sp, #0]
   b482c:	4b9b      	ldr	r3, [pc, #620]	; (b4a9c <loop+0x288>)
   b482e:	f000 f983 	bl	b4b38 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
  parser.clear();
   b4832:	489b      	ldr	r0, [pc, #620]	; (b4aa0 <loop+0x28c>)
   b4834:	f000 fb18 	bl	b4e68 <_ZN10JsonBuffer5clearEv>
	const char * c_str() const { return buffer; }
   b4838:	6861      	ldr	r1, [r4, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b483a:	6079      	str	r1, [r7, #4]
   b483c:	4608      	mov	r0, r1
   b483e:	f004 fc3f 	bl	b90c0 <strlen>
   b4842:	6879      	ldr	r1, [r7, #4]
   b4844:	4602      	mov	r2, r0
   b4846:	4896      	ldr	r0, [pc, #600]	; (b4aa0 <loop+0x28c>)
   b4848:	f000 faf1 	bl	b4e2e <_ZN10JsonBuffer7addDataEPKcj>
  if (!parser.parse()) {
   b484c:	4894      	ldr	r0, [pc, #592]	; (b4aa0 <loop+0x28c>)
   b484e:	f000 feab 	bl	b55a8 <_ZN10JsonParser5parseEv>
   b4852:	b950      	cbnz	r0, b486a <loop+0x56>
		Serial.println("parsing failed");
   b4854:	f003 fadc 	bl	b7e10 <_Z16_fetch_usbserialv>
   b4858:	4992      	ldr	r1, [pc, #584]	; (b4aa4 <loop+0x290>)
}
   b485a:	3764      	adds	r7, #100	; 0x64
   b485c:	46bd      	mov	sp, r7
   b485e:	ecbd 8b04 	vpop	{d8-d9}
   b4862:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		Serial.println("parsing failed");
   b4866:	f002 bda2 	b.w	b73ae <_ZN5Print7printlnEPKc>
  int count = 0;
   b486a:	2600      	movs	r6, #0
    JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   b486c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
   b4870:	498b      	ldr	r1, [pc, #556]	; (b4aa0 <loop+0x28c>)
   b4872:	4620      	mov	r0, r4
   b4874:	f000 fb12 	bl	b4e9c <_ZNK10JsonParser12getReferenceEv>
   b4878:	4a8b      	ldr	r2, [pc, #556]	; (b4aa8 <loop+0x294>)
   b487a:	4621      	mov	r1, r4
   b487c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   b4880:	f000 fc8c 	bl	b519c <_ZNK13JsonReference3keyEPKc>
   b4884:	4a89      	ldr	r2, [pc, #548]	; (b4aac <loop+0x298>)
   b4886:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   b488a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   b488e:	f000 fc85 	bl	b519c <_ZNK13JsonReference3keyEPKc>
   b4892:	2200      	movs	r2, #0
   b4894:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   b4898:	f107 0020 	add.w	r0, r7, #32
   b489c:	f000 fb6c 	bl	b4f78 <_ZNK13JsonReference5indexEj>
   b48a0:	4a83      	ldr	r2, [pc, #524]	; (b4ab0 <loop+0x29c>)
   b48a2:	f107 0120 	add.w	r1, r7, #32
   b48a6:	f107 0014 	add.w	r0, r7, #20
   b48aa:	f000 fc77 	bl	b519c <_ZNK13JsonReference3keyEPKc>
   b48ae:	4632      	mov	r2, r6
   b48b0:	f107 0114 	add.w	r1, r7, #20
   b48b4:	f107 0008 	add.w	r0, r7, #8
   b48b8:	f000 fb5e 	bl	b4f78 <_ZNK13JsonReference5indexEj>
   b48bc:	f107 0014 	add.w	r0, r7, #20
   b48c0:	f000 fa64 	bl	b4d8c <_ZN13JsonReferenceD1Ev>
   b48c4:	f107 0020 	add.w	r0, r7, #32
   b48c8:	f000 fa60 	bl	b4d8c <_ZN13JsonReferenceD1Ev>
   b48cc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   b48d0:	f000 fa5c 	bl	b4d8c <_ZN13JsonReferenceD1Ev>
   b48d4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   b48d8:	f000 fa58 	bl	b4d8c <_ZN13JsonReferenceD1Ev>
   b48dc:	4620      	mov	r0, r4
   b48de:	f000 fa55 	bl	b4d8c <_ZN13JsonReferenceD1Ev>
    String nextStation = train.key("nextStaNm").valueString();
   b48e2:	4a74      	ldr	r2, [pc, #464]	; (b4ab4 <loop+0x2a0>)
   b48e4:	f107 0108 	add.w	r1, r7, #8
   b48e8:	4620      	mov	r0, r4
   b48ea:	f000 fc57 	bl	b519c <_ZNK13JsonReference3keyEPKc>
   b48ee:	4621      	mov	r1, r4
   b48f0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   b48f4:	f000 fc6c 	bl	b51d0 <_ZNK13JsonReference11valueStringEv>
   b48f8:	4620      	mov	r0, r4
   b48fa:	f000 fa47 	bl	b4d8c <_ZN13JsonReferenceD1Ev>
    String trainDir = train.key("trDr").valueString();
   b48fe:	4a6e      	ldr	r2, [pc, #440]	; (b4ab8 <loop+0x2a4>)
   b4900:	f107 0108 	add.w	r1, r7, #8
   b4904:	4620      	mov	r0, r4
   b4906:	f000 fc49 	bl	b519c <_ZNK13JsonReference3keyEPKc>
   b490a:	4621      	mov	r1, r4
   b490c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   b4910:	f000 fc5e 	bl	b51d0 <_ZNK13JsonReference11valueStringEv>
   b4914:	4620      	mov	r0, r4
   b4916:	f000 fa39 	bl	b4d8c <_ZN13JsonReferenceD1Ev>
    float lat = train.key("lat").valueString().toFloat();
   b491a:	4a68      	ldr	r2, [pc, #416]	; (b4abc <loop+0x2a8>)
   b491c:	f107 0108 	add.w	r1, r7, #8
   b4920:	f107 0020 	add.w	r0, r7, #32
   b4924:	f000 fc3a 	bl	b519c <_ZNK13JsonReference3keyEPKc>
   b4928:	f107 0120 	add.w	r1, r7, #32
   b492c:	4620      	mov	r0, r4
   b492e:	f000 fc4f 	bl	b51d0 <_ZNK13JsonReference11valueStringEv>
   b4932:	4620      	mov	r0, r4
   b4934:	f002 fe9e 	bl	b7674 <_ZNK6String7toFloatEv>
   b4938:	4620      	mov	r0, r4
   b493a:	eef0 8a40 	vmov.f32	s17, s0
   b493e:	f002 fd95 	bl	b746c <_ZN6StringD1Ev>
   b4942:	f107 0020 	add.w	r0, r7, #32
   b4946:	f000 fa21 	bl	b4d8c <_ZN13JsonReferenceD1Ev>
    float lon = train.key("lon").valueString().toFloat();
   b494a:	4a5d      	ldr	r2, [pc, #372]	; (b4ac0 <loop+0x2ac>)
   b494c:	f107 0108 	add.w	r1, r7, #8
   b4950:	f107 0020 	add.w	r0, r7, #32
   b4954:	f000 fc22 	bl	b519c <_ZNK13JsonReference3keyEPKc>
   b4958:	f107 0120 	add.w	r1, r7, #32
   b495c:	4620      	mov	r0, r4
   b495e:	f000 fc37 	bl	b51d0 <_ZNK13JsonReference11valueStringEv>
   b4962:	4620      	mov	r0, r4
   b4964:	f002 fe86 	bl	b7674 <_ZNK6String7toFloatEv>
   b4968:	4620      	mov	r0, r4
   b496a:	eeb0 8a40 	vmov.f32	s16, s0
   b496e:	f002 fd7d 	bl	b746c <_ZN6StringD1Ev>
   b4972:	f107 0020 	add.w	r0, r7, #32
   b4976:	f000 fa09 	bl	b4d8c <_ZN13JsonReferenceD1Ev>
    if(nextStation.length() <= 1){
   b497a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   b497c:	2b01      	cmp	r3, #1
  }
   b497e:	46eb      	mov	fp, sp
    if(nextStation.length() <= 1){
   b4980:	d96e      	bls.n	b4a60 <loop+0x24c>
    Serial.printf("Train %i: ", count);
   b4982:	f003 fa45 	bl	b7e10 <_Z16_fetch_usbserialv>
   b4986:	494f      	ldr	r1, [pc, #316]	; (b4ac4 <loop+0x2b0>)
   b4988:	4632      	mov	r2, r6
   b498a:	f7ff fc5f 	bl	b424c <_ZN5Print6printfEPKcz>
    for(int i = 0; i < arrSize; i++){
   b498e:	4b4e      	ldr	r3, [pc, #312]	; (b4ac8 <loop+0x2b4>)
   b4990:	607b      	str	r3, [r7, #4]
   b4992:	46a2      	mov	sl, r4
   b4994:	2500      	movs	r5, #0
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b4996:	687b      	ldr	r3, [r7, #4]
   b4998:	edd3 7a00 	vldr	s15, [r3]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b499c:	ee78 7ae7 	vsub.f32	s15, s17, s15
    for(int i = 0; i < arrSize; i++){
   b49a0:	3501      	adds	r5, #1
   b49a2:	ee17 0a90 	vmov	r0, s15
   b49a6:	f003 ff67 	bl	b8878 <__aeabi_f2d>
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b49aa:	687b      	ldr	r3, [r7, #4]
   b49ac:	edd3 7a01 	vldr	s15, [r3, #4]
   b49b0:	ee78 7a67 	vsub.f32	s15, s16, s15
   b49b4:	ec41 0b19 	vmov	d9, r0, r1
   b49b8:	ee17 0a90 	vmov	r0, s15
   b49bc:	f003 ff5c 	bl	b8878 <__aeabi_f2d>
   b49c0:	4602      	mov	r2, r0
   b49c2:	460b      	mov	r3, r1
   b49c4:	f003 ffb0 	bl	b8928 <__aeabi_dmul>
   b49c8:	ec53 2b19 	vmov	r2, r3, d9
   b49cc:	4680      	mov	r8, r0
   b49ce:	4689      	mov	r9, r1
   b49d0:	ee19 0a10 	vmov	r0, s18
   b49d4:	4619      	mov	r1, r3
   b49d6:	f003 ffa7 	bl	b8928 <__aeabi_dmul>
   b49da:	460b      	mov	r3, r1
   b49dc:	4602      	mov	r2, r0
   b49de:	4649      	mov	r1, r9
   b49e0:	4640      	mov	r0, r8
   b49e2:	f003 fdeb 	bl	b85bc <__adddf3>
   b49e6:	ec41 0b10 	vmov	d0, r0, r1
   b49ea:	f003 fcdb 	bl	b83a4 <sqrt>
   b49ee:	ec51 0b10 	vmov	r0, r1, d0
   b49f2:	f004 fa69 	bl	b8ec8 <__aeabi_d2f>
    for(int i = 0; i < arrSize; i++){
   b49f6:	687b      	ldr	r3, [r7, #4]
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b49f8:	f84a 0b04 	str.w	r0, [sl], #4
    for(int i = 0; i < arrSize; i++){
   b49fc:	3308      	adds	r3, #8
   b49fe:	2d05      	cmp	r5, #5
   b4a00:	607b      	str	r3, [r7, #4]
   b4a02:	d1c8      	bne.n	b4996 <loop+0x182>
   b4a04:	f107 0350 	add.w	r3, r7, #80	; 0x50
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
	return __first;
      _ForwardIterator __result = __first;
   b4a08:	46a0      	mov	r8, r4
      while (++__first != __last)
   b4a0a:	3d01      	subs	r5, #1
   b4a0c:	461a      	mov	r2, r3
   b4a0e:	d00c      	beq.n	b4a2a <loop+0x216>
	if (__comp(__first, __result))
   b4a10:	ed92 7a00 	vldr	s14, [r2]
   b4a14:	edd8 7a00 	vldr	s15, [r8]
   b4a18:	eeb4 7a67 	vcmp.f32	s14, s15
   b4a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4a20:	bf58      	it	pl
   b4a22:	4642      	movpl	r2, r8
   b4a24:	3304      	adds	r3, #4
   b4a26:	4690      	mov	r8, r2
   b4a28:	e7ef      	b.n	b4a0a <loop+0x1f6>
    Serial.println(closestCheckpoint - checkpointDistances);
   b4a2a:	f003 f9f1 	bl	b7e10 <_Z16_fetch_usbserialv>
   b4a2e:	4643      	mov	r3, r8
   b4a30:	1b19      	subs	r1, r3, r4
   b4a32:	220a      	movs	r2, #10
   b4a34:	1089      	asrs	r1, r1, #2
   b4a36:	4605      	mov	r5, r0
   b4a38:	f7ff fb51 	bl	b40de <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b4a3c:	4628      	mov	r0, r5
   b4a3e:	f002 fcaa 	bl	b7396 <_ZN5Print7printlnEv>
    String trainDir = train.key("trDr").valueString();
   b4a42:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   b4a46:	f002 fd11 	bl	b746c <_ZN6StringD1Ev>
    String nextStation = train.key("nextStaNm").valueString();
   b4a4a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   b4a4e:	f002 fd0d 	bl	b746c <_ZN6StringD1Ev>
    JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   b4a52:	f107 0008 	add.w	r0, r7, #8
   b4a56:	f000 f999 	bl	b4d8c <_ZN13JsonReferenceD1Ev>
    count++;
   b4a5a:	3601      	adds	r6, #1
   b4a5c:	46dd      	mov	sp, fp
   b4a5e:	e705      	b.n	b486c <loop+0x58>
   b4a60:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   b4a64:	f002 fd02 	bl	b746c <_ZN6StringD1Ev>
   b4a68:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   b4a6c:	f002 fcfe 	bl	b746c <_ZN6StringD1Ev>
   b4a70:	f107 0008 	add.w	r0, r7, #8
   b4a74:	f000 f98a 	bl	b4d8c <_ZN13JsonReferenceD1Ev>
  delay(5000);
   b4a78:	f241 3088 	movw	r0, #5000	; 0x1388
}
   b4a7c:	3764      	adds	r7, #100	; 0x64
   b4a7e:	46bd      	mov	sp, r7
   b4a80:	ecbd 8b04 	vpop	{d8-d9}
   b4a84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  delay(5000);
   b4a88:	f001 b8a2 	b.w	b5bd0 <delay>
   b4a8c:	2003e688 	.word	0x2003e688
   b4a90:	000bb297 	.word	0x000bb297
   b4a94:	2003e63c 	.word	0x2003e63c
   b4a98:	2003583c 	.word	0x2003583c
   b4a9c:	20035608 	.word	0x20035608
   b4aa0:	20038058 	.word	0x20038058
   b4aa4:	000bb29b 	.word	0x000bb29b
   b4aa8:	000bb2aa 	.word	0x000bb2aa
   b4aac:	000bb2b0 	.word	0x000bb2b0
   b4ab0:	000bb2b6 	.word	0x000bb2b6
   b4ab4:	000bb2bc 	.word	0x000bb2bc
   b4ab8:	000bb2c6 	.word	0x000bb2c6
   b4abc:	000bb2cb 	.word	0x000bb2cb
   b4ac0:	000bb2cf 	.word	0x000bb2cf
   b4ac4:	000bb2d3 	.word	0x000bb2d3
   b4ac8:	2003e614 	.word	0x2003e614

000b4acc <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b4acc:	b510      	push	{r4, lr}
   b4ace:	4604      	mov	r4, r0
   b4ad0:	f003 f8d0 	bl	b7c74 <_ZN9TCPClientC1Ev>
{

}
   b4ad4:	4620      	mov	r0, r4
   b4ad6:	bd10      	pop	{r4, pc}

000b4ad8 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b4ad8:	b538      	push	{r3, r4, r5, lr}
   b4ada:	4604      	mov	r4, r0
   b4adc:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b4ade:	f002 fc53 	bl	b7388 <_ZN5Print5printEPKc>
    client.print(": ");
   b4ae2:	4905      	ldr	r1, [pc, #20]	; (b4af8 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b4ae4:	4620      	mov	r0, r4
   b4ae6:	f002 fc4f 	bl	b7388 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b4aea:	4629      	mov	r1, r5
   b4aec:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b4aee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b4af2:	f002 bc5c 	b.w	b73ae <_ZN5Print7printlnEPKc>
   b4af6:	bf00      	nop
   b4af8:	000bb105 	.word	0x000bb105

000b4afc <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b4afc:	b538      	push	{r3, r4, r5, lr}
   b4afe:	4605      	mov	r5, r0
   b4b00:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b4b02:	f002 fc41 	bl	b7388 <_ZN5Print5printEPKc>
    client.print(": ");
   b4b06:	490b      	ldr	r1, [pc, #44]	; (b4b34 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b4b08:	4628      	mov	r0, r5
   b4b0a:	f002 fc3d 	bl	b7388 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b4b0e:	2c00      	cmp	r4, #0
   b4b10:	da0d      	bge.n	b4b2e <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b4b12:	212d      	movs	r1, #45	; 0x2d
   b4b14:	4628      	mov	r0, r5
   b4b16:	f002 fc3b 	bl	b7390 <_ZN5Print5printEc>
            val = -n;
   b4b1a:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b4b1c:	4628      	mov	r0, r5
   b4b1e:	220a      	movs	r2, #10
   b4b20:	f002 fc4f 	bl	b73c2 <_ZN5Print11printNumberEmh>
        n += println();
   b4b24:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b4b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4b2a:	f002 bc34 	b.w	b7396 <_ZN5Print7printlnEv>
            val = n;
   b4b2e:	4621      	mov	r1, r4
   b4b30:	e7f4      	b.n	b4b1c <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b4b32:	bf00      	nop
   b4b34:	000bb105 	.word	0x000bb105

000b4b38 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b4b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4b3c:	460e      	mov	r6, r1
   b4b3e:	b091      	sub	sp, #68	; 0x44
   b4b40:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b4b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4b46:	6013      	str	r3, [r2, #0]
{
   b4b48:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b4b4a:	2100      	movs	r1, #0
   b4b4c:	4630      	mov	r0, r6
   b4b4e:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b4b52:	4617      	mov	r7, r2
   b4b54:	f002 fd42 	bl	b75dc <_ZNK6String6equalsEPKc>
   b4b58:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b4b5c:	4603      	mov	r3, r0
   b4b5e:	b998      	cbnz	r0, b4b88 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b4b60:	f1be 0f00 	cmp.w	lr, #0
   b4b64:	bf14      	ite	ne
   b4b66:	4672      	movne	r2, lr
   b4b68:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b4b6a:	6831      	ldr	r1, [r6, #0]
   b4b6c:	b292      	uxth	r2, r2
   b4b6e:	4620      	mov	r0, r4
   b4b70:	f002 fe80 	bl	b7874 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b4b74:	1e05      	subs	r5, r0, #0
   b4b76:	bf18      	it	ne
   b4b78:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b4b7a:	b9c5      	cbnz	r5, b4bae <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b4b7c:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b4b7e:	b011      	add	sp, #68	; 0x44
   b4b80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b4b84:	f003 b82c 	b.w	b7be0 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b4b88:	4b76      	ldr	r3, [pc, #472]	; (b4d64 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b4b8a:	930a      	str	r3, [sp, #40]	; 0x28
   b4b8c:	f106 0c14 	add.w	ip, r6, #20
   b4b90:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4b94:	ad0b      	add	r5, sp, #44	; 0x2c
   b4b96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4b98:	f8dc 3000 	ldr.w	r3, [ip]
   b4b9c:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b4b9e:	fa1f f28e 	uxth.w	r2, lr
   b4ba2:	2300      	movs	r3, #0
   b4ba4:	a90a      	add	r1, sp, #40	; 0x28
   b4ba6:	4620      	mov	r0, r4
   b4ba8:	f002 ff44 	bl	b7a34 <_ZN9TCPClient7connectE9IPAddresstm>
   b4bac:	e7e2      	b.n	b4b74 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b4bae:	4649      	mov	r1, r9
   b4bb0:	4620      	mov	r0, r4
   b4bb2:	f002 fbe9 	bl	b7388 <_ZN5Print5printEPKc>
    client.print(" ");
   b4bb6:	496c      	ldr	r1, [pc, #432]	; (b4d68 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b4bb8:	4620      	mov	r0, r4
   b4bba:	f002 fbe5 	bl	b7388 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b4bbe:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b4bc0:	4620      	mov	r0, r4
   b4bc2:	f002 fbe1 	bl	b7388 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b4bc6:	4969      	ldr	r1, [pc, #420]	; (b4d6c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b4bc8:	4620      	mov	r0, r4
   b4bca:	f002 fbdd 	bl	b7388 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b4bce:	4968      	ldr	r1, [pc, #416]	; (b4d70 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b4bd0:	4a68      	ldr	r2, [pc, #416]	; (b4d74 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b4bd2:	4620      	mov	r0, r4
   b4bd4:	f7ff ff80 	bl	b4ad8 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b4bd8:	2100      	movs	r1, #0
   b4bda:	4630      	mov	r0, r6
   b4bdc:	f002 fcfe 	bl	b75dc <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b4be0:	b920      	cbnz	r0, b4bec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b4be2:	6832      	ldr	r2, [r6, #0]
   b4be4:	4964      	ldr	r1, [pc, #400]	; (b4d78 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b4be6:	4620      	mov	r0, r4
   b4be8:	f7ff ff76 	bl	b4ad8 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b4bec:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b4bf0:	2100      	movs	r1, #0
   b4bf2:	4650      	mov	r0, sl
   b4bf4:	f002 fcf2 	bl	b75dc <_ZNK6String6equalsEPKc>
   b4bf8:	b928      	cbnz	r0, b4c06 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b4bfa:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b4bfc:	495f      	ldr	r1, [pc, #380]	; (b4d7c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b4bfe:	4620      	mov	r0, r4
   b4c00:	f7ff ff7c 	bl	b4afc <_ZN10HttpClient10sendHeaderEPKci>
   b4c04:	e006      	b.n	b4c14 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b4c06:	495e      	ldr	r1, [pc, #376]	; (b4d80 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b4c08:	4648      	mov	r0, r9
   b4c0a:	f004 fa47 	bl	b909c <strcmp>
   b4c0e:	4602      	mov	r2, r0
   b4c10:	2800      	cmp	r0, #0
   b4c12:	d0f3      	beq.n	b4bfc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b4c14:	f1b8 0f00 	cmp.w	r8, #0
   b4c18:	d00e      	beq.n	b4c38 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b4c1a:	f8d8 1000 	ldr.w	r1, [r8]
   b4c1e:	b159      	cbz	r1, b4c38 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b4c20:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b4c24:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b4c26:	b122      	cbz	r2, b4c32 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b4c28:	f7ff ff56 	bl	b4ad8 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b4c2c:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b4c30:	e7f3      	b.n	b4c1a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b4c32:	f002 fbbc 	bl	b73ae <_ZN5Print7printlnEPKc>
}
   b4c36:	e7f9      	b.n	b4c2c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b4c38:	4620      	mov	r0, r4
   b4c3a:	f002 fbac 	bl	b7396 <_ZN5Print7printlnEv>
    client.flush();
   b4c3e:	4620      	mov	r0, r4
   b4c40:	f002 fd78 	bl	b7734 <_ZN9TCPClient5flushEv>
   b4c44:	2100      	movs	r1, #0
   b4c46:	4650      	mov	r0, sl
   b4c48:	f002 fcc8 	bl	b75dc <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b4c4c:	b918      	cbnz	r0, b4c56 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b4c4e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b4c50:	4620      	mov	r0, r4
   b4c52:	f002 fbac 	bl	b73ae <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b4c56:	f104 0a1c 	add.w	sl, r4, #28
   b4c5a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   b4c5e:	2100      	movs	r1, #0
   b4c60:	4650      	mov	r0, sl
   b4c62:	f004 f9e4 	bl	b902e <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4c66:	f000 fd97 	bl	b5798 <HAL_Timer_Get_Milli_Seconds>
   b4c6a:	9001      	str	r0, [sp, #4]
   b4c6c:	f000 fd94 	bl	b5798 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b4c70:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b4c74:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b4c76:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b4c7a:	4620      	mov	r0, r4
   b4c7c:	f002 ff56 	bl	b7b2c <_ZN9TCPClient9availableEv>
   b4c80:	b1e8      	cbz	r0, b4cbe <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   b4c82:	4620      	mov	r0, r4
   b4c84:	f002 fd3c 	bl	b7700 <_ZN9TCPClient4readEv>
   b4c88:	4681      	mov	r9, r0
   b4c8a:	f000 fd85 	bl	b5798 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b4c8e:	f242 73fe 	movw	r3, #10238	; 0x27fe
   b4c92:	429e      	cmp	r6, r3
   b4c94:	9001      	str	r0, [sp, #4]
   b4c96:	d804      	bhi.n	b4ca2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b4c98:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b4c9a:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b4c9e:	3601      	adds	r6, #1
        while (client.available()) {
   b4ca0:	e7eb      	b.n	b4c7a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b4ca2:	f242 73ff 	movw	r3, #10239	; 0x27ff
   b4ca6:	429e      	cmp	r6, r3
   b4ca8:	d1f9      	bne.n	b4c9e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b4caa:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   b4cae:	2200      	movs	r2, #0
   b4cb0:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
                client.stop();
   b4cb4:	4620      	mov	r0, r4
   b4cb6:	f002 ff93 	bl	b7be0 <_ZN9TCPClient4stopEv>
                error = true;
   b4cba:	46a8      	mov	r8, r5
   b4cbc:	e7ef      	b.n	b4c9e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b4cbe:	19a3      	adds	r3, r4, r6
   b4cc0:	7718      	strb	r0, [r3, #28]
   b4cc2:	f000 fd69 	bl	b5798 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b4cc6:	9b01      	ldr	r3, [sp, #4]
   b4cc8:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b4ccc:	f1b8 0f00 	cmp.w	r8, #0
   b4cd0:	d104      	bne.n	b4cdc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
   b4cd2:	45d9      	cmp	r9, fp
   b4cd4:	d802      	bhi.n	b4cdc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
            delay(200);
   b4cd6:	20c8      	movs	r0, #200	; 0xc8
   b4cd8:	f000 ff7a 	bl	b5bd0 <delay>
    } while (client.connected() && !timeout && !error);
   b4cdc:	4620      	mov	r0, r4
   b4cde:	f002 fe47 	bl	b7970 <_ZN9TCPClient9connectedEv>
   b4ce2:	b120      	cbz	r0, b4cee <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b4ce4:	45d9      	cmp	r9, fp
   b4ce6:	d802      	bhi.n	b4cee <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b4ce8:	f1b8 0f00 	cmp.w	r8, #0
   b4cec:	d0c5      	beq.n	b4c7a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b4cee:	4620      	mov	r0, r4
   b4cf0:	f002 ff76 	bl	b7be0 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b4cf4:	4651      	mov	r1, sl
   b4cf6:	a802      	add	r0, sp, #8
   b4cf8:	f002 fc03 	bl	b7502 <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b4cfc:	230c      	movs	r3, #12
   b4cfe:	2209      	movs	r2, #9
   b4d00:	a902      	add	r1, sp, #8
   b4d02:	a806      	add	r0, sp, #24
   b4d04:	f002 fc8e 	bl	b7624 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b4d08:	491e      	ldr	r1, [pc, #120]	; (b4d84 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b4d0a:	a80a      	add	r0, sp, #40	; 0x28
   b4d0c:	f002 fbf9 	bl	b7502 <_ZN6StringC1EPK19__FlashStringHelper>
   b4d10:	a90a      	add	r1, sp, #40	; 0x28
   b4d12:	a802      	add	r0, sp, #8
   b4d14:	f002 fc83 	bl	b761e <_ZNK6String7indexOfERKS_>
   b4d18:	4604      	mov	r4, r0
   b4d1a:	a80a      	add	r0, sp, #40	; 0x28
   b4d1c:	f002 fba6 	bl	b746c <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b4d20:	1c63      	adds	r3, r4, #1
   b4d22:	d108      	bne.n	b4d36 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fe>
    String statusCode = raw_response.substring(9,12);
   b4d24:	a806      	add	r0, sp, #24
   b4d26:	f002 fba1 	bl	b746c <_ZN6StringD1Ev>
    String raw_response(buffer);
   b4d2a:	a802      	add	r0, sp, #8
   b4d2c:	f002 fb9e 	bl	b746c <_ZN6StringD1Ev>
}
   b4d30:	b011      	add	sp, #68	; 0x44
   b4d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b4d36:	1d3d      	adds	r5, r7, #4
   b4d38:	4913      	ldr	r1, [pc, #76]	; (b4d88 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b4d3a:	4628      	mov	r0, r5
   b4d3c:	f002 fbf5 	bl	b752a <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b4d40:	1d22      	adds	r2, r4, #4
   b4d42:	a902      	add	r1, sp, #8
   b4d44:	a80a      	add	r0, sp, #40	; 0x28
   b4d46:	f002 fc8d 	bl	b7664 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b4d4a:	a90a      	add	r1, sp, #40	; 0x28
   b4d4c:	4628      	mov	r0, r5
   b4d4e:	f002 fc28 	bl	b75a2 <_ZN6String6concatERKS_>
   b4d52:	a80a      	add	r0, sp, #40	; 0x28
   b4d54:	f002 fb8a 	bl	b746c <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b4d58:	9806      	ldr	r0, [sp, #24]
   b4d5a:	f004 f92c 	bl	b8fb6 <atoi>
   b4d5e:	6038      	str	r0, [r7, #0]
   b4d60:	e7e0      	b.n	b4d24 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ec>
   b4d62:	bf00      	nop
   b4d64:	000bb5b8 	.word	0x000bb5b8
   b4d68:	000bb115 	.word	0x000bb115
   b4d6c:	000bb2fb 	.word	0x000bb2fb
   b4d70:	000bb30d 	.word	0x000bb30d
   b4d74:	000bb307 	.word	0x000bb307
   b4d78:	000bb318 	.word	0x000bb318
   b4d7c:	000bb31d 	.word	0x000bb31d
   b4d80:	000bb32c 	.word	0x000bb32c
   b4d84:	000bb331 	.word	0x000bb331
   b4d88:	000bb335 	.word	0x000bb335

000b4d8c <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   b4d8c:	4770      	bx	lr

000b4d8e <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   b4d8e:	b510      	push	{r4, lr}
}
   b4d90:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   b4d92:	4604      	mov	r4, r0
}
   b4d94:	f7ff f983 	bl	b409e <_ZdlPvj>
   b4d98:	4620      	mov	r0, r4
   b4d9a:	bd10      	pop	{r4, pc}

000b4d9c <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   b4d9c:	b510      	push	{r4, lr}
   b4d9e:	4b05      	ldr	r3, [pc, #20]	; (b4db4 <_ZN10JsonBufferD1Ev+0x18>)
   b4da0:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b4da2:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b4da4:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b4da6:	b91b      	cbnz	r3, b4db0 <_ZN10JsonBufferD1Ev+0x14>
   b4da8:	6840      	ldr	r0, [r0, #4]
   b4daa:	b108      	cbz	r0, b4db0 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b4dac:	f000 fec8 	bl	b5b40 <free>
}
   b4db0:	4620      	mov	r0, r4
   b4db2:	bd10      	pop	{r4, pc}
   b4db4:	000bb344 	.word	0x000bb344

000b4db8 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b4db8:	b510      	push	{r4, lr}
   b4dba:	4604      	mov	r4, r0
}
   b4dbc:	f7ff ffee 	bl	b4d9c <_ZN10JsonBufferD1Ev>
   b4dc0:	4620      	mov	r0, r4
   b4dc2:	2114      	movs	r1, #20
   b4dc4:	f7ff f96b 	bl	b409e <_ZdlPvj>
   b4dc8:	4620      	mov	r0, r4
   b4dca:	bd10      	pop	{r4, pc}

000b4dcc <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b4dcc:	b510      	push	{r4, lr}
   b4dce:	4b07      	ldr	r3, [pc, #28]	; (b4dec <_ZN10JsonParserD1Ev+0x20>)
   b4dd0:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b4dd2:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b4dd4:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b4dd6:	b91b      	cbnz	r3, b4de0 <_ZN10JsonParserD1Ev+0x14>
   b4dd8:	6940      	ldr	r0, [r0, #20]
   b4dda:	b108      	cbz	r0, b4de0 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b4ddc:	f000 feb0 	bl	b5b40 <free>
JsonParser::~JsonParser() {
   b4de0:	4620      	mov	r0, r4
   b4de2:	f7ff ffdb 	bl	b4d9c <_ZN10JsonBufferD1Ev>
}
   b4de6:	4620      	mov	r0, r4
   b4de8:	bd10      	pop	{r4, pc}
   b4dea:	bf00      	nop
   b4dec:	000bb354 	.word	0x000bb354

000b4df0 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b4df0:	b510      	push	{r4, lr}
   b4df2:	4604      	mov	r4, r0
}
   b4df4:	f7ff ffea 	bl	b4dcc <_ZN10JsonParserD1Ev>
   b4df8:	4620      	mov	r0, r4
   b4dfa:	212c      	movs	r1, #44	; 0x2c
   b4dfc:	f7ff f94f 	bl	b409e <_ZdlPvj>
   b4e00:	4620      	mov	r0, r4
   b4e02:	bd10      	pop	{r4, pc}

000b4e04 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b4e04:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b4e06:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b4e08:	4604      	mov	r4, r0
   b4e0a:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b4e0c:	b10b      	cbz	r3, b4e12 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b4e0e:	2000      	movs	r0, #0
}
   b4e10:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b4e12:	6840      	ldr	r0, [r0, #4]
   b4e14:	b138      	cbz	r0, b4e26 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b4e16:	f000 fe9b 	bl	b5b50 <realloc>
		if (newBuffer) {
   b4e1a:	2800      	cmp	r0, #0
   b4e1c:	d0f7      	beq.n	b4e0e <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b4e1e:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b4e22:	2001      	movs	r0, #1
   b4e24:	e7f4      	b.n	b4e10 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b4e26:	4608      	mov	r0, r1
   b4e28:	f000 fe82 	bl	b5b30 <malloc>
   b4e2c:	e7f5      	b.n	b4e1a <_ZN10JsonBuffer8allocateEj+0x16>

000b4e2e <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b4e2e:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b4e30:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b4e32:	460e      	mov	r6, r1
   b4e34:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b4e36:	18d1      	adds	r1, r2, r3
   b4e38:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b4e3a:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b4e3c:	b172      	cbz	r2, b4e5c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b4e3e:	6882      	ldr	r2, [r0, #8]
   b4e40:	428a      	cmp	r2, r1
   b4e42:	d30b      	bcc.n	b4e5c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b4e44:	6860      	ldr	r0, [r4, #4]
   b4e46:	68e3      	ldr	r3, [r4, #12]
   b4e48:	462a      	mov	r2, r5
   b4e4a:	4631      	mov	r1, r6
   b4e4c:	4418      	add	r0, r3
   b4e4e:	f004 f8c6 	bl	b8fde <memcpy>
	offset += dataLen;
   b4e52:	68e2      	ldr	r2, [r4, #12]
   b4e54:	442a      	add	r2, r5
   b4e56:	60e2      	str	r2, [r4, #12]
	return true;
   b4e58:	2001      	movs	r0, #1
}
   b4e5a:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b4e5c:	4620      	mov	r0, r4
   b4e5e:	f7ff ffd1 	bl	b4e04 <_ZN10JsonBuffer8allocateEj>
   b4e62:	2800      	cmp	r0, #0
   b4e64:	d1ee      	bne.n	b4e44 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b4e66:	e7f8      	b.n	b4e5a <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b4e68 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b4e68:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b4e6a:	2100      	movs	r1, #0
   b4e6c:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b4e6e:	b123      	cbz	r3, b4e7a <_ZN10JsonBuffer5clearEv+0x12>
   b4e70:	6882      	ldr	r2, [r0, #8]
   b4e72:	b112      	cbz	r2, b4e7a <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b4e74:	4618      	mov	r0, r3
   b4e76:	f004 b8da 	b.w	b902e <memset>
}
   b4e7a:	4770      	bx	lr

000b4e7c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b4e7c:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b4e7e:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b4e82:	2200      	movs	r2, #0
   b4e84:	60c2      	str	r2, [r0, #12]
   b4e86:	2201      	movs	r2, #1
   b4e88:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b4e8a:	6143      	str	r3, [r0, #20]
   b4e8c:	4a02      	ldr	r2, [pc, #8]	; (b4e98 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b4e8e:	9b02      	ldr	r3, [sp, #8]
   b4e90:	6002      	str	r2, [r0, #0]
   b4e92:	61c3      	str	r3, [r0, #28]
}
   b4e94:	bd10      	pop	{r4, pc}
   b4e96:	bf00      	nop
   b4e98:	000bb354 	.word	0x000bb354

000b4e9c <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   b4e9c:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   b4ea0:	429a      	cmp	r2, r3
   b4ea2:	4b04      	ldr	r3, [pc, #16]	; (b4eb4 <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b4ea4:	bf38      	it	cc
   b4ea6:	6082      	strcc	r2, [r0, #8]
   b4ea8:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b4eac:	bf24      	itt	cs
   b4eae:	2300      	movcs	r3, #0
   b4eb0:	6083      	strcs	r3, [r0, #8]
}
   b4eb2:	4770      	bx	lr
   b4eb4:	000bb364 	.word	0x000bb364

000b4eb8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b4eb8:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b4eba:	6813      	ldr	r3, [r2, #0]
   b4ebc:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b4ebe:	6813      	ldr	r3, [r2, #0]
   b4ec0:	f103 0410 	add.w	r4, r3, #16
   b4ec4:	6014      	str	r4, [r2, #0]
   b4ec6:	6986      	ldr	r6, [r0, #24]
   b4ec8:	42b4      	cmp	r4, r6
   b4eca:	d20a      	bcs.n	b4ee2 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b4ecc:	699b      	ldr	r3, [r3, #24]
   b4ece:	688c      	ldr	r4, [r1, #8]
   b4ed0:	42a3      	cmp	r3, r4
   b4ed2:	da01      	bge.n	b4ed8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b4ed4:	42ab      	cmp	r3, r5
   b4ed6:	ddf2      	ble.n	b4ebe <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b4ed8:	42a3      	cmp	r3, r4
   b4eda:	bfcc      	ite	gt
   b4edc:	2000      	movgt	r0, #0
   b4ede:	2001      	movle	r0, #1
   b4ee0:	e000      	b.n	b4ee4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b4ee2:	2000      	movs	r0, #0
}
   b4ee4:	bd70      	pop	{r4, r5, r6, pc}

000b4ee6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b4ee6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4eea:	9d08      	ldr	r5, [sp, #32]
   b4eec:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b4eee:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b4ef2:	4604      	mov	r4, r0
   b4ef4:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b4ef6:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b4ef8:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b4efa:	9801      	ldr	r0, [sp, #4]
   b4efc:	69a3      	ldr	r3, [r4, #24]
   b4efe:	4283      	cmp	r3, r0
   b4f00:	d91a      	bls.n	b4f38 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b4f02:	6882      	ldr	r2, [r0, #8]
   b4f04:	688b      	ldr	r3, [r1, #8]
   b4f06:	429a      	cmp	r2, r3
   b4f08:	da16      	bge.n	b4f38 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b4f0a:	42ae      	cmp	r6, r5
   b4f0c:	d10b      	bne.n	b4f26 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b4f0e:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b4f10:	aa01      	add	r2, sp, #4
   b4f12:	4620      	mov	r0, r4
   b4f14:	f7ff ffd0 	bl	b4eb8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b4f18:	b128      	cbz	r0, b4f26 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b4f1a:	9b01      	ldr	r3, [sp, #4]
   b4f1c:	f8c8 3000 	str.w	r3, [r8]
}
   b4f20:	b002      	add	sp, #8
   b4f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b4f26:	aa01      	add	r2, sp, #4
   b4f28:	4620      	mov	r0, r4
   b4f2a:	f7ff ffc5 	bl	b4eb8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b4f2e:	4620      	mov	r0, r4
		index++;
   b4f30:	3601      	adds	r6, #1
		skipObject(container, token);
   b4f32:	f7ff ffc1 	bl	b4eb8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b4f36:	e7e0      	b.n	b4efa <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b4f38:	2000      	movs	r0, #0
   b4f3a:	e7f1      	b.n	b4f20 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b4f3c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b4f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4f3e:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b4f40:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b4f44:	4604      	mov	r4, r0
   b4f46:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b4f48:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b4f4a:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b4f4c:	9b01      	ldr	r3, [sp, #4]
   b4f4e:	69a2      	ldr	r2, [r4, #24]
   b4f50:	429a      	cmp	r2, r3
   b4f52:	d90f      	bls.n	b4f74 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b4f54:	6898      	ldr	r0, [r3, #8]
   b4f56:	688a      	ldr	r2, [r1, #8]
   b4f58:	4290      	cmp	r0, r2
   b4f5a:	da0b      	bge.n	b4f74 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b4f5c:	42b5      	cmp	r5, r6
   b4f5e:	d103      	bne.n	b4f68 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b4f60:	603b      	str	r3, [r7, #0]
			return true;
   b4f62:	2001      	movs	r0, #1
}
   b4f64:	b003      	add	sp, #12
   b4f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b4f68:	aa01      	add	r2, sp, #4
   b4f6a:	4620      	mov	r0, r4
		index++;
   b4f6c:	3501      	adds	r5, #1
		skipObject(container, token);
   b4f6e:	f7ff ffa3 	bl	b4eb8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b4f72:	e7eb      	b.n	b4f4c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b4f74:	2000      	movs	r0, #0
   b4f76:	e7f5      	b.n	b4f64 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b4f78 <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   b4f78:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4f7a:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b4f7c:	6889      	ldr	r1, [r1, #8]
   b4f7e:	4e0a      	ldr	r6, [pc, #40]	; (b4fa8 <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   b4f80:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b4f82:	b161      	cbz	r1, b4f9e <_ZNK13JsonReference5indexEj+0x26>
   b4f84:	6868      	ldr	r0, [r5, #4]
   b4f86:	ab01      	add	r3, sp, #4
   b4f88:	f7ff ffd8 	bl	b4f3c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b4f8c:	b138      	cbz	r0, b4f9e <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   b4f8e:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b4f90:	e9c4 6300 	strd	r6, r3, [r4]
   b4f94:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b4f96:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   b4f98:	4620      	mov	r0, r4
   b4f9a:	b002      	add	sp, #8
   b4f9c:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b4f9e:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b4fa0:	e9c4 6300 	strd	r6, r3, [r4]
   b4fa4:	2300      	movs	r3, #0
   b4fa6:	e7f6      	b.n	b4f96 <_ZNK13JsonReference5indexEj+0x1e>
   b4fa8:	000bb364 	.word	0x000bb364

000b4fac <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b4fac:	b510      	push	{r4, lr}
   b4fae:	4604      	mov	r4, r0
	if (str) {
   b4fb0:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b4fb2:	460b      	mov	r3, r1
	if (str) {
   b4fb4:	b128      	cbz	r0, b4fc2 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b4fb6:	f002 faf8 	bl	b75aa <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b4fba:	68e3      	ldr	r3, [r4, #12]
   b4fbc:	3301      	adds	r3, #1
   b4fbe:	60e3      	str	r3, [r4, #12]
	}
}
   b4fc0:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b4fc2:	6860      	ldr	r0, [r4, #4]
   b4fc4:	2800      	cmp	r0, #0
   b4fc6:	d0f8      	beq.n	b4fba <_ZN16JsonParserString6appendEc+0xe>
   b4fc8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b4fcc:	3a01      	subs	r2, #1
   b4fce:	428a      	cmp	r2, r1
			buf[length] = ch;
   b4fd0:	bf88      	it	hi
   b4fd2:	5443      	strbhi	r3, [r0, r1]
   b4fd4:	e7f1      	b.n	b4fba <_ZN16JsonParserString6appendEc+0xe>

000b4fd6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b4fd6:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b4fd8:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b4fda:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4fdc:	4608      	mov	r0, r1
		str.append((char)unicode);
   b4fde:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b4fe0:	d804      	bhi.n	b4fec <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b4fe2:	b003      	add	sp, #12
   b4fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b4fe8:	f7ff bfe0 	b.w	b4fac <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b4fec:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b4ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b4ff4:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b4ff8:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b4ffc:	d207      	bcs.n	b500e <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b4ffe:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b5002:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b5004:	f7ff ffd2 	bl	b4fac <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b5008:	9801      	ldr	r0, [sp, #4]
   b500a:	4621      	mov	r1, r4
   b500c:	e7e9      	b.n	b4fe2 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b500e:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b5010:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b5014:	9001      	str	r0, [sp, #4]
   b5016:	f7ff ffc9 	bl	b4fac <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b501a:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b501e:	9801      	ldr	r0, [sp, #4]
   b5020:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b5024:	e7ee      	b.n	b5004 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b5028 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b5028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b502c:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b502e:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b5030:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b5100 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b5034:	4680      	mov	r8, r0
   b5036:	460f      	mov	r7, r1
   b5038:	4615      	mov	r5, r2
			escape = false;
   b503a:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b503c:	68b8      	ldr	r0, [r7, #8]
   b503e:	42b0      	cmp	r0, r6
   b5040:	dd5a      	ble.n	b50f8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b5042:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b5046:	5d99      	ldrb	r1, [r3, r6]
   b5048:	199a      	adds	r2, r3, r6
		if (escape) {
   b504a:	2c00      	cmp	r4, #0
   b504c:	d04b      	beq.n	b50e6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b504e:	2975      	cmp	r1, #117	; 0x75
   b5050:	d805      	bhi.n	b505e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b5052:	296d      	cmp	r1, #109	; 0x6d
   b5054:	d807      	bhi.n	b5066 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b5056:	2962      	cmp	r1, #98	; 0x62
   b5058:	d01e      	beq.n	b5098 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b505a:	2966      	cmp	r1, #102	; 0x66
   b505c:	d01e      	beq.n	b509c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b505e:	4628      	mov	r0, r5
   b5060:	f7ff ffa4 	bl	b4fac <_ZN16JsonParserString6appendEc>
				break;
   b5064:	e03d      	b.n	b50e2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b5066:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b506a:	2c07      	cmp	r4, #7
   b506c:	d8f7      	bhi.n	b505e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b506e:	f20f 0c08 	addw	ip, pc, #8
   b5072:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b5076:	bf00      	nop
   b5078:	000b50a1 	.word	0x000b50a1
   b507c:	000b505f 	.word	0x000b505f
   b5080:	000b505f 	.word	0x000b505f
   b5084:	000b505f 	.word	0x000b505f
   b5088:	000b50a5 	.word	0x000b50a5
   b508c:	000b505f 	.word	0x000b505f
   b5090:	000b50a9 	.word	0x000b50a9
   b5094:	000b50ad 	.word	0x000b50ad
				str.append('\b');
   b5098:	2108      	movs	r1, #8
   b509a:	e7e0      	b.n	b505e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b509c:	210c      	movs	r1, #12
   b509e:	e7de      	b.n	b505e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b50a0:	210a      	movs	r1, #10
   b50a2:	e7dc      	b.n	b505e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b50a4:	210d      	movs	r1, #13
   b50a6:	e7da      	b.n	b505e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b50a8:	2109      	movs	r1, #9
   b50aa:	e7d8      	b.n	b505e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b50ac:	1d31      	adds	r1, r6, #4
   b50ae:	4288      	cmp	r0, r1
   b50b0:	dd17      	ble.n	b50e2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b50b2:	a902      	add	r1, sp, #8
   b50b4:	3304      	adds	r3, #4
   b50b6:	4433      	add	r3, r6
   b50b8:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b50ba:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b50be:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b50c2:	429a      	cmp	r2, r3
   b50c4:	d1f9      	bne.n	b50ba <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b50c6:	aa01      	add	r2, sp, #4
   b50c8:	4651      	mov	r1, sl
					tmp[4] = 0;
   b50ca:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b50ce:	f000 fd47 	bl	b5b60 <sscanf>
   b50d2:	2801      	cmp	r0, #1
   b50d4:	d105      	bne.n	b50e2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b50d6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b50da:	4629      	mov	r1, r5
   b50dc:	f7ff ff7b 	bl	b4fd6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b50e0:	3605      	adds	r6, #5
			escape = false;
   b50e2:	2400      	movs	r4, #0
   b50e4:	e004      	b.n	b50f0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b50e6:	295c      	cmp	r1, #92	; 0x5c
   b50e8:	d004      	beq.n	b50f4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b50ea:	4628      	mov	r0, r5
   b50ec:	f7ff ff5e 	bl	b4fac <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b50f0:	3601      	adds	r6, #1
   b50f2:	e7a3      	b.n	b503c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b50f4:	2401      	movs	r4, #1
   b50f6:	e7fb      	b.n	b50f0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b50f8:	2001      	movs	r0, #1
   b50fa:	b004      	add	sp, #16
   b50fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5100:	000bb336 	.word	0x000bb336

000b5104 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b5104:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b5106:	460c      	mov	r4, r1
   b5108:	4606      	mov	r6, r0
	result = "";
   b510a:	490c      	ldr	r1, [pc, #48]	; (b513c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b510c:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b510e:	4615      	mov	r5, r2
	result = "";
   b5110:	f002 fa0b 	bl	b752a <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b5114:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b5118:	1ac9      	subs	r1, r1, r3
   b511a:	3101      	adds	r1, #1
   b511c:	4628      	mov	r0, r5
   b511e:	f002 f9c3 	bl	b74a8 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b5122:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b5124:	466a      	mov	r2, sp
   b5126:	4621      	mov	r1, r4
   b5128:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b512a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b512e:	9500      	str	r5, [sp, #0]
   b5130:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b5132:	f7ff ff79 	bl	b5028 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b5136:	b004      	add	sp, #16
   b5138:	bd70      	pop	{r4, r5, r6, pc}
   b513a:	bf00      	nop
   b513c:	000bb335 	.word	0x000bb335

000b5140 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b5140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5144:	b089      	sub	sp, #36	; 0x24
   b5146:	4605      	mov	r5, r0
   b5148:	4688      	mov	r8, r1
	String keyName;
   b514a:	a804      	add	r0, sp, #16
   b514c:	4912      	ldr	r1, [pc, #72]	; (b5198 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b514e:	4616      	mov	r6, r2
   b5150:	4699      	mov	r9, r3
	String keyName;
   b5152:	f002 f9d6 	bl	b7502 <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b5156:	2700      	movs	r7, #0
   b5158:	9700      	str	r7, [sp, #0]
   b515a:	464b      	mov	r3, r9
   b515c:	aa03      	add	r2, sp, #12
   b515e:	4641      	mov	r1, r8
   b5160:	4628      	mov	r0, r5
   b5162:	f7ff fec0 	bl	b4ee6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b5166:	4604      	mov	r4, r0
   b5168:	b170      	cbz	r0, b5188 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b516a:	9903      	ldr	r1, [sp, #12]
   b516c:	aa04      	add	r2, sp, #16
   b516e:	4628      	mov	r0, r5
   b5170:	f7ff ffc8 	bl	b5104 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b5174:	4604      	mov	r4, r0
   b5176:	b908      	cbnz	r0, b517c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b5178:	3701      	adds	r7, #1
   b517a:	e7ed      	b.n	b5158 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b517c:	4631      	mov	r1, r6
   b517e:	a804      	add	r0, sp, #16
   b5180:	f002 fa2c 	bl	b75dc <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b5184:	2800      	cmp	r0, #0
   b5186:	d0f7      	beq.n	b5178 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b5188:	a804      	add	r0, sp, #16
   b518a:	f002 f96f 	bl	b746c <_ZN6StringD1Ev>
}
   b518e:	4620      	mov	r0, r4
   b5190:	b009      	add	sp, #36	; 0x24
   b5192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5196:	bf00      	nop
   b5198:	000bb335 	.word	0x000bb335

000b519c <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   b519c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b519e:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b51a0:	6889      	ldr	r1, [r1, #8]
   b51a2:	4e0a      	ldr	r6, [pc, #40]	; (b51cc <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   b51a4:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b51a6:	b161      	cbz	r1, b51c2 <_ZNK13JsonReference3keyEPKc+0x26>
   b51a8:	6868      	ldr	r0, [r5, #4]
   b51aa:	ab01      	add	r3, sp, #4
   b51ac:	f7ff ffc8 	bl	b5140 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b51b0:	b138      	cbz	r0, b51c2 <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   b51b2:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b51b4:	e9c4 6300 	strd	r6, r3, [r4]
   b51b8:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b51ba:	60a3      	str	r3, [r4, #8]
}
   b51bc:	4620      	mov	r0, r4
   b51be:	b002      	add	sp, #8
   b51c0:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b51c2:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b51c4:	e9c4 6300 	strd	r6, r3, [r4]
   b51c8:	2300      	movs	r3, #0
   b51ca:	e7f6      	b.n	b51ba <_ZNK13JsonReference3keyEPKc+0x1e>
   b51cc:	000bb364 	.word	0x000bb364

000b51d0 <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   b51d0:	b538      	push	{r3, r4, r5, lr}
   b51d2:	460d      	mov	r5, r1
	String result;
   b51d4:	4905      	ldr	r1, [pc, #20]	; (b51ec <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   b51d6:	4604      	mov	r4, r0
	String result;
   b51d8:	f002 f993 	bl	b7502 <_ZN6StringC1EPK19__FlashStringHelper>
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   b51dc:	68a9      	ldr	r1, [r5, #8]
   b51de:	b119      	cbz	r1, b51e8 <_ZNK13JsonReference11valueStringEv+0x18>
   b51e0:	6868      	ldr	r0, [r5, #4]
   b51e2:	4622      	mov	r2, r4
   b51e4:	f7ff ff8e 	bl	b5104 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   b51e8:	4620      	mov	r0, r4
   b51ea:	bd38      	pop	{r3, r4, r5, pc}
   b51ec:	000bb335 	.word	0x000bb335

000b51f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b51f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b51f4:	6844      	ldr	r4, [r0, #4]
   b51f6:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b51fa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b51fe:	f8d0 e000 	ldr.w	lr, [r0]
   b5202:	4596      	cmp	lr, r2
   b5204:	f080 81b9 	bcs.w	b557a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b5208:	f811 800e 	ldrb.w	r8, [r1, lr]
   b520c:	f1b8 0f00 	cmp.w	r8, #0
   b5210:	f000 81b3 	beq.w	b557a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b5214:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b5218:	f000 8098 	beq.w	b534c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b521c:	d833      	bhi.n	b5286 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b521e:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b5222:	f000 80a6 	beq.w	b5372 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b5226:	d810      	bhi.n	b524a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b5228:	f1a8 0809 	sub.w	r8, r8, #9
   b522c:	fa5f f888 	uxtb.w	r8, r8
   b5230:	f1b8 0f17 	cmp.w	r8, #23
   b5234:	d80d      	bhi.n	b5252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b5236:	4d9f      	ldr	r5, [pc, #636]	; (b54b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b5238:	fa0c f808 	lsl.w	r8, ip, r8
   b523c:	ea18 0f05 	tst.w	r8, r5
   b5240:	d007      	beq.n	b5252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5242:	6805      	ldr	r5, [r0, #0]
   b5244:	3501      	adds	r5, #1
   b5246:	6005      	str	r5, [r0, #0]
   b5248:	e7d9      	b.n	b51fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b524a:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b524e:	f000 8133 	beq.w	b54b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5252:	f8d0 8000 	ldr.w	r8, [r0]
   b5256:	4542      	cmp	r2, r8
   b5258:	d90e      	bls.n	b5278 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b525a:	f811 5008 	ldrb.w	r5, [r1, r8]
   b525e:	b15d      	cbz	r5, b5278 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b5260:	2d3a      	cmp	r5, #58	; 0x3a
   b5262:	f200 8169 	bhi.w	b5538 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b5266:	2d1f      	cmp	r5, #31
   b5268:	f200 8151 	bhi.w	b550e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b526c:	2d0a      	cmp	r5, #10
   b526e:	f200 8160 	bhi.w	b5532 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b5272:	2d08      	cmp	r5, #8
   b5274:	f240 8156 	bls.w	b5524 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b5278:	2b00      	cmp	r3, #0
   b527a:	f040 8162 	bne.w	b5542 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b527e:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b5282:	6005      	str	r5, [r0, #0]
   b5284:	e0a5      	b.n	b53d2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b5286:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b528a:	d037      	beq.n	b52fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b528c:	d82e      	bhi.n	b52ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b528e:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b5292:	d033      	beq.n	b52fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b5294:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b5298:	d1db      	bne.n	b5252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b529a:	2b00      	cmp	r3, #0
   b529c:	d0d1      	beq.n	b5242 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b529e:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b52a2:	6845      	ldr	r5, [r0, #4]
   b52a4:	3d01      	subs	r5, #1
   b52a6:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b52aa:	2d00      	cmp	r5, #0
   b52ac:	db55      	blt.n	b535a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b52ae:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b52b2:	3701      	adds	r7, #1
   b52b4:	d04d      	beq.n	b5352 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b52b6:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b52ba:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b52be:	d148      	bne.n	b5352 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b52c0:	f898 b000 	ldrb.w	fp, [r8]
   b52c4:	45cb      	cmp	fp, r9
   b52c6:	d14b      	bne.n	b5360 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b52c8:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b52cc:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b52d0:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b52d4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b52d8:	f8de 7004 	ldr.w	r7, [lr, #4]
   b52dc:	3701      	adds	r7, #1
   b52de:	d042      	beq.n	b5366 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b52e0:	f8de 7008 	ldr.w	r7, [lr, #8]
   b52e4:	3701      	adds	r7, #1
   b52e6:	d13e      	bne.n	b5366 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b52e8:	6085      	str	r5, [r0, #8]
				break;
   b52ea:	e7aa      	b.n	b5242 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b52ec:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b52f0:	d1af      	bne.n	b5252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b52f2:	2b00      	cmp	r3, #0
   b52f4:	d0a5      	beq.n	b5242 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b52f6:	f04f 0901 	mov.w	r9, #1
   b52fa:	e7d2      	b.n	b52a2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b52fc:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b52fe:	2b00      	cmp	r3, #0
   b5300:	d09f      	beq.n	b5242 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b5302:	6845      	ldr	r5, [r0, #4]
   b5304:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b5306:	42af      	cmp	r7, r5
   b5308:	d94a      	bls.n	b53a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b530a:	f105 0e01 	add.w	lr, r5, #1
   b530e:	f8c0 e004 	str.w	lr, [r0, #4]
   b5312:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b5316:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b531a:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b531e:	2500      	movs	r5, #0
   b5320:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b5324:	6885      	ldr	r5, [r0, #8]
   b5326:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b5328:	bf1f      	itttt	ne
   b532a:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b532e:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b5332:	3501      	addne	r5, #1
   b5334:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b5338:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b533c:	bf0c      	ite	eq
   b533e:	2501      	moveq	r5, #1
   b5340:	2502      	movne	r5, #2
   b5342:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b5346:	6805      	ldr	r5, [r0, #0]
   b5348:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b534c:	6845      	ldr	r5, [r0, #4]
   b534e:	3d01      	subs	r5, #1
   b5350:	e7ca      	b.n	b52e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b5352:	3d01      	subs	r5, #1
   b5354:	f1a8 0810 	sub.w	r8, r8, #16
   b5358:	e7a7      	b.n	b52aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b535a:	3501      	adds	r5, #1
   b535c:	f47f af71 	bne.w	b5242 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b5360:	f06f 0401 	mvn.w	r4, #1
   b5364:	e01e      	b.n	b53a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b5366:	3d01      	subs	r5, #1
   b5368:	1c6f      	adds	r7, r5, #1
   b536a:	f1ae 0e10 	sub.w	lr, lr, #16
   b536e:	d1b3      	bne.n	b52d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b5370:	e767      	b.n	b5242 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b5372:	f10e 0901 	add.w	r9, lr, #1
   b5376:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b537a:	f8d0 8000 	ldr.w	r8, [r0]
   b537e:	4542      	cmp	r2, r8
   b5380:	f240 8093 	bls.w	b54aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b5384:	f811 5008 	ldrb.w	r5, [r1, r8]
   b5388:	2d00      	cmp	r5, #0
   b538a:	f000 808e 	beq.w	b54aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b538e:	2d22      	cmp	r5, #34	; 0x22
   b5390:	d130      	bne.n	b53f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b5392:	b1f3      	cbz	r3, b53d2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b5394:	6845      	ldr	r5, [r0, #4]
   b5396:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b5398:	42af      	cmp	r7, r5
   b539a:	d806      	bhi.n	b53aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b539c:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b53a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b53a4:	4620      	mov	r0, r4
   b53a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b53aa:	f105 0e01 	add.w	lr, r5, #1
   b53ae:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b53b2:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b53b6:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b53ba:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b53be:	2700      	movs	r7, #0
   b53c0:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b53c2:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b53c6:	f04f 0a03 	mov.w	sl, #3
   b53ca:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b53ce:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b53d2:	6885      	ldr	r5, [r0, #8]
   b53d4:	1c6f      	adds	r7, r5, #1
				count++;
   b53d6:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b53da:	f43f af32 	beq.w	b5242 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b53de:	2b00      	cmp	r3, #0
   b53e0:	f43f af2f 	beq.w	b5242 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b53e4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b53e8:	f8de 500c 	ldr.w	r5, [lr, #12]
   b53ec:	3501      	adds	r5, #1
   b53ee:	f8ce 500c 	str.w	r5, [lr, #12]
   b53f2:	e726      	b.n	b5242 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b53f4:	2d5c      	cmp	r5, #92	; 0x5c
   b53f6:	d111      	bne.n	b541c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b53f8:	f108 0501 	add.w	r5, r8, #1
   b53fc:	42aa      	cmp	r2, r5
   b53fe:	d90d      	bls.n	b541c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b5400:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b5402:	5d4d      	ldrb	r5, [r1, r5]
   b5404:	2d75      	cmp	r5, #117	; 0x75
   b5406:	d82b      	bhi.n	b5460 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b5408:	2d6d      	cmp	r5, #109	; 0x6d
   b540a:	d80b      	bhi.n	b5424 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b540c:	2d66      	cmp	r5, #102	; 0x66
   b540e:	d827      	bhi.n	b5460 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b5410:	2d5b      	cmp	r5, #91	; 0x5b
   b5412:	d81d      	bhi.n	b5450 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b5414:	2d22      	cmp	r5, #34	; 0x22
   b5416:	d001      	beq.n	b541c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b5418:	2d2f      	cmp	r5, #47	; 0x2f
   b541a:	d121      	bne.n	b5460 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b541c:	6805      	ldr	r5, [r0, #0]
   b541e:	3501      	adds	r5, #1
   b5420:	6005      	str	r5, [r0, #0]
   b5422:	e7aa      	b.n	b537a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b5424:	3d6e      	subs	r5, #110	; 0x6e
   b5426:	2d07      	cmp	r5, #7
   b5428:	d81a      	bhi.n	b5460 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b542a:	a701      	add	r7, pc, #4	; (adr r7, b5430 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b542c:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b5430:	000b541d 	.word	0x000b541d
   b5434:	000b5461 	.word	0x000b5461
   b5438:	000b5461 	.word	0x000b5461
   b543c:	000b5461 	.word	0x000b5461
   b5440:	000b541d 	.word	0x000b541d
   b5444:	000b5461 	.word	0x000b5461
   b5448:	000b541d 	.word	0x000b541d
   b544c:	000b5467 	.word	0x000b5467
   b5450:	3d5c      	subs	r5, #92	; 0x5c
   b5452:	b2ed      	uxtb	r5, r5
   b5454:	fa0c f505 	lsl.w	r5, ip, r5
   b5458:	f240 4741 	movw	r7, #1089	; 0x441
   b545c:	423d      	tst	r5, r7
   b545e:	d1dd      	bne.n	b541c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b5460:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b5464:	e77c      	b.n	b5360 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b5466:	f108 0502 	add.w	r5, r8, #2
   b546a:	6005      	str	r5, [r0, #0]
   b546c:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b5470:	f8d0 8000 	ldr.w	r8, [r0]
   b5474:	4542      	cmp	r2, r8
   b5476:	d803      	bhi.n	b5480 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b5478:	6805      	ldr	r5, [r0, #0]
   b547a:	3d01      	subs	r5, #1
   b547c:	6005      	str	r5, [r0, #0]
					break;
   b547e:	e7cd      	b.n	b541c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b5480:	f811 5008 	ldrb.w	r5, [r1, r8]
   b5484:	2d00      	cmp	r5, #0
   b5486:	d0f7      	beq.n	b5478 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b5488:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b548c:	f1bb 0f09 	cmp.w	fp, #9
   b5490:	d904      	bls.n	b549c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b5492:	f025 0520 	bic.w	r5, r5, #32
   b5496:	3d41      	subs	r5, #65	; 0x41
   b5498:	2d05      	cmp	r5, #5
   b549a:	d8e1      	bhi.n	b5460 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b549c:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b54a0:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b54a4:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b54a6:	d1e3      	bne.n	b5470 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b54a8:	e7e6      	b.n	b5478 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b54aa:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b54ae:	f06f 0402 	mvn.w	r4, #2
   b54b2:	e777      	b.n	b53a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b54b4:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b54b8:	2b00      	cmp	r3, #0
   b54ba:	f43f aec2 	beq.w	b5242 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b54be:	6885      	ldr	r5, [r0, #8]
   b54c0:	1c6f      	adds	r7, r5, #1
   b54c2:	f43f aebe 	beq.w	b5242 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b54c6:	012d      	lsls	r5, r5, #4
   b54c8:	5d5d      	ldrb	r5, [r3, r5]
   b54ca:	3d01      	subs	r5, #1
   b54cc:	2d01      	cmp	r5, #1
   b54ce:	f67f aeb8 	bls.w	b5242 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b54d2:	6845      	ldr	r5, [r0, #4]
   b54d4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b54d8:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b54dc:	f1b8 0f00 	cmp.w	r8, #0
   b54e0:	f6ff aeaf 	blt.w	b5242 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b54e4:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b54e8:	3d01      	subs	r5, #1
   b54ea:	2d01      	cmp	r5, #1
   b54ec:	d80a      	bhi.n	b5504 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b54ee:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b54f2:	3501      	adds	r5, #1
   b54f4:	d006      	beq.n	b5504 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b54f6:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b54fa:	3501      	adds	r5, #1
   b54fc:	d102      	bne.n	b5504 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b54fe:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b5502:	e69e      	b.n	b5242 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b5504:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b5508:	f1ae 0e10 	sub.w	lr, lr, #16
   b550c:	e7e6      	b.n	b54dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b550e:	f1a5 0920 	sub.w	r9, r5, #32
   b5512:	4f24      	ldr	r7, [pc, #144]	; (b55a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b5514:	fa5f f989 	uxtb.w	r9, r9
   b5518:	fa0c f909 	lsl.w	r9, ip, r9
   b551c:	ea19 0f07 	tst.w	r9, r7
   b5520:	f47f aeaa 	bne.w	b5278 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b5524:	3d20      	subs	r5, #32
   b5526:	2d5e      	cmp	r5, #94	; 0x5e
   b5528:	d89a      	bhi.n	b5460 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b552a:	f108 0501 	add.w	r5, r8, #1
   b552e:	6005      	str	r5, [r0, #0]
   b5530:	e68f      	b.n	b5252 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b5532:	2d0d      	cmp	r5, #13
   b5534:	d1f6      	bne.n	b5524 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b5536:	e69f      	b.n	b5278 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b5538:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b553c:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b5540:	e7f8      	b.n	b5534 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b5542:	6845      	ldr	r5, [r0, #4]
   b5544:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b5546:	42af      	cmp	r7, r5
   b5548:	f67f af28 	bls.w	b539c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b554c:	f105 0801 	add.w	r8, r5, #1
   b5550:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b5554:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b5558:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b555c:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b5560:	2700      	movs	r7, #0
   b5562:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b5564:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b5568:	f04f 0a04 	mov.w	sl, #4
   b556c:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b5570:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b5574:	6805      	ldr	r5, [r0, #0]
   b5576:	3d01      	subs	r5, #1
   b5578:	e683      	b.n	b5282 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b557a:	2b00      	cmp	r3, #0
   b557c:	f43f af12 	beq.w	b53a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b5580:	6842      	ldr	r2, [r0, #4]
   b5582:	1e51      	subs	r1, r2, #1
   b5584:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b5588:	2900      	cmp	r1, #0
   b558a:	f6ff af0b 	blt.w	b53a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b558e:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b5592:	3201      	adds	r2, #1
   b5594:	d003      	beq.n	b559e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b5596:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b559a:	3201      	adds	r2, #1
   b559c:	d087      	beq.n	b54ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b559e:	3901      	subs	r1, #1
   b55a0:	3b10      	subs	r3, #16
   b55a2:	e7f1      	b.n	b5588 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b55a4:	04001001 	.word	0x04001001

000b55a8 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b55a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b55aa:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b55ac:	4604      	mov	r4, r0
	if (offset == 0) {
   b55ae:	b912      	cbnz	r2, b55b6 <_ZN10JsonParser5parseEv+0xe>
		return false;
   b55b0:	2000      	movs	r0, #0
}
   b55b2:	b003      	add	sp, #12
   b55b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b55b6:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b55b8:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b55bc:	b1ab      	cbz	r3, b55ea <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b55be:	2100      	movs	r1, #0
	parser->toknext = 0;
   b55c0:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b55c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b55c8:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b55ca:	69c1      	ldr	r1, [r0, #28]
   b55cc:	9100      	str	r1, [sp, #0]
   b55ce:	6841      	ldr	r1, [r0, #4]
   b55d0:	4630      	mov	r0, r6
   b55d2:	f7ff fe0d 	bl	b51f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b55d6:	1c43      	adds	r3, r0, #1
   b55d8:	d128      	bne.n	b562c <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b55da:	7c25      	ldrb	r5, [r4, #16]
   b55dc:	2d00      	cmp	r5, #0
   b55de:	d1e7      	bne.n	b55b0 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b55e0:	6960      	ldr	r0, [r4, #20]
   b55e2:	f000 faad 	bl	b5b40 <free>
			tokens = 0;
   b55e6:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b55e8:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b55ea:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b55ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b55f0:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b55f4:	68e2      	ldr	r2, [r4, #12]
   b55f6:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b55f8:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b55fa:	9500      	str	r5, [sp, #0]
   b55fc:	462b      	mov	r3, r5
   b55fe:	4630      	mov	r0, r6
   b5600:	f7ff fdf6 	bl	b51f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b5604:	2800      	cmp	r0, #0
   b5606:	dbd3      	blt.n	b55b0 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b5608:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b560a:	d017      	beq.n	b563c <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b560c:	0100      	lsls	r0, r0, #4
   b560e:	f000 fa8f 	bl	b5b30 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5612:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b5614:	6160      	str	r0, [r4, #20]
   b5616:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5618:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b561a:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b561e:	68e2      	ldr	r2, [r4, #12]
   b5620:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b5622:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5624:	4630      	mov	r0, r6
   b5626:	f7ff fde3 	bl	b51f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b562a:	e001      	b.n	b5630 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b562c:	2800      	cmp	r0, #0
   b562e:	dbbf      	blt.n	b55b0 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b5630:	6963      	ldr	r3, [r4, #20]
   b5632:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b5636:	61a0      	str	r0, [r4, #24]
	return true;
   b5638:	2001      	movs	r0, #1
   b563a:	e7ba      	b.n	b55b2 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b563c:	6963      	ldr	r3, [r4, #20]
   b563e:	61a3      	str	r3, [r4, #24]
   b5640:	e7fa      	b.n	b5638 <_ZN10JsonParser5parseEv+0x90>
	...

000b5644 <_GLOBAL__sub_I_PIN_MAP2>:
// Return pointer to the library's pixel data buffer.  Use carefully,
// much opportunity for mayhem.  It's mostly for code that needs fast
// transfers, e.g. SD card to LEDs.  Color data is in BGR order.
uint8_t *Adafruit_DotStar::getPixels(void) const {
  return pixels;
}
   b5644:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b5646:	f000 f8af 	bl	b57a8 <HAL_Pin_Map>
   b564a:	4b01      	ldr	r3, [pc, #4]	; (b5650 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b564c:	6018      	str	r0, [r3, #0]
}
   b564e:	bd08      	pop	{r3, pc}
   b5650:	2003e6b4 	.word	0x2003e6b4

000b5654 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b5654:	b508      	push	{r3, lr}
   b5656:	4b02      	ldr	r3, [pc, #8]	; (b5660 <hal_ble_stack_init+0xc>)
   b5658:	681b      	ldr	r3, [r3, #0]
   b565a:	689b      	ldr	r3, [r3, #8]
   b565c:	9301      	str	r3, [sp, #4]
   b565e:	bd08      	pop	{r3, pc}
   b5660:	00030278 	.word	0x00030278

000b5664 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b5664:	b508      	push	{r3, lr}
   b5666:	4b02      	ldr	r3, [pc, #8]	; (b5670 <hal_ble_gap_set_advertising_data+0xc>)
   b5668:	681b      	ldr	r3, [r3, #0]
   b566a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b566c:	9301      	str	r3, [sp, #4]
   b566e:	bd08      	pop	{r3, pc}
   b5670:	00030278 	.word	0x00030278

000b5674 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b5674:	b508      	push	{r3, lr}
   b5676:	4b02      	ldr	r3, [pc, #8]	; (b5680 <hal_ble_gap_set_scan_response_data+0xc>)
   b5678:	681b      	ldr	r3, [r3, #0]
   b567a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b567c:	9301      	str	r3, [sp, #4]
   b567e:	bd08      	pop	{r3, pc}
   b5680:	00030278 	.word	0x00030278

000b5684 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b5684:	b508      	push	{r3, lr}
   b5686:	4b02      	ldr	r3, [pc, #8]	; (b5690 <hal_ble_gap_start_advertising+0xc>)
   b5688:	681b      	ldr	r3, [r3, #0]
   b568a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b568c:	9301      	str	r3, [sp, #4]
   b568e:	bd08      	pop	{r3, pc}
   b5690:	00030278 	.word	0x00030278

000b5694 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b5694:	b508      	push	{r3, lr}
   b5696:	4b03      	ldr	r3, [pc, #12]	; (b56a4 <hal_ble_gap_disconnect+0x10>)
   b5698:	681b      	ldr	r3, [r3, #0]
   b569a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b569e:	9301      	str	r3, [sp, #4]
   b56a0:	bd08      	pop	{r3, pc}
   b56a2:	0000      	.short	0x0000
   b56a4:	00030278 	.word	0x00030278

000b56a8 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b56a8:	b508      	push	{r3, lr}
   b56aa:	4b03      	ldr	r3, [pc, #12]	; (b56b8 <hal_ble_gatt_server_add_service+0x10>)
   b56ac:	681b      	ldr	r3, [r3, #0]
   b56ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b56b2:	9301      	str	r3, [sp, #4]
   b56b4:	bd08      	pop	{r3, pc}
   b56b6:	0000      	.short	0x0000
   b56b8:	00030278 	.word	0x00030278

000b56bc <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b56bc:	b508      	push	{r3, lr}
   b56be:	4b03      	ldr	r3, [pc, #12]	; (b56cc <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b56c0:	681b      	ldr	r3, [r3, #0]
   b56c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b56c6:	9301      	str	r3, [sp, #4]
   b56c8:	bd08      	pop	{r3, pc}
   b56ca:	0000      	.short	0x0000
   b56cc:	00030278 	.word	0x00030278

000b56d0 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b56d0:	b508      	push	{r3, lr}
   b56d2:	4b03      	ldr	r3, [pc, #12]	; (b56e0 <hal_ble_gatt_client_write_with_response+0x10>)
   b56d4:	681b      	ldr	r3, [r3, #0]
   b56d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b56da:	9301      	str	r3, [sp, #4]
   b56dc:	bd08      	pop	{r3, pc}
   b56de:	0000      	.short	0x0000
   b56e0:	00030278 	.word	0x00030278

000b56e4 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b56e4:	b508      	push	{r3, lr}
   b56e6:	4b03      	ldr	r3, [pc, #12]	; (b56f4 <hal_ble_gatt_client_write_without_response+0x10>)
   b56e8:	681b      	ldr	r3, [r3, #0]
   b56ea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b56ee:	9301      	str	r3, [sp, #4]
   b56f0:	bd08      	pop	{r3, pc}
   b56f2:	0000      	.short	0x0000
   b56f4:	00030278 	.word	0x00030278

000b56f8 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b56f8:	b508      	push	{r3, lr}
   b56fa:	4b03      	ldr	r3, [pc, #12]	; (b5708 <hal_ble_gatt_server_add_characteristic+0x10>)
   b56fc:	681b      	ldr	r3, [r3, #0]
   b56fe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b5702:	9301      	str	r3, [sp, #4]
   b5704:	bd08      	pop	{r3, pc}
   b5706:	0000      	.short	0x0000
   b5708:	00030278 	.word	0x00030278

000b570c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b570c:	b508      	push	{r3, lr}
   b570e:	4b03      	ldr	r3, [pc, #12]	; (b571c <hal_ble_set_callback_on_periph_link_events+0x10>)
   b5710:	681b      	ldr	r3, [r3, #0]
   b5712:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b5716:	9301      	str	r3, [sp, #4]
   b5718:	bd08      	pop	{r3, pc}
   b571a:	0000      	.short	0x0000
   b571c:	00030278 	.word	0x00030278

000b5720 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5720:	b508      	push	{r3, lr}
   b5722:	4b03      	ldr	r3, [pc, #12]	; (b5730 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b5724:	681b      	ldr	r3, [r3, #0]
   b5726:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b572a:	9301      	str	r3, [sp, #4]
   b572c:	bd08      	pop	{r3, pc}
   b572e:	0000      	.short	0x0000
   b5730:	00030278 	.word	0x00030278

000b5734 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5734:	b508      	push	{r3, lr}
   b5736:	4b03      	ldr	r3, [pc, #12]	; (b5744 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b5738:	681b      	ldr	r3, [r3, #0]
   b573a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b573e:	9301      	str	r3, [sp, #4]
   b5740:	bd08      	pop	{r3, pc}
   b5742:	0000      	.short	0x0000
   b5744:	00030278 	.word	0x00030278

000b5748 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5748:	b508      	push	{r3, lr}
   b574a:	4b02      	ldr	r3, [pc, #8]	; (b5754 <os_mutex_recursive_create+0xc>)
   b574c:	681b      	ldr	r3, [r3, #0]
   b574e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5750:	9301      	str	r3, [sp, #4]
   b5752:	bd08      	pop	{r3, pc}
   b5754:	00030248 	.word	0x00030248

000b5758 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5758:	b508      	push	{r3, lr}
   b575a:	4b02      	ldr	r3, [pc, #8]	; (b5764 <os_mutex_recursive_lock+0xc>)
   b575c:	681b      	ldr	r3, [r3, #0]
   b575e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5760:	9301      	str	r3, [sp, #4]
   b5762:	bd08      	pop	{r3, pc}
   b5764:	00030248 	.word	0x00030248

000b5768 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5768:	b508      	push	{r3, lr}
   b576a:	4b02      	ldr	r3, [pc, #8]	; (b5774 <os_mutex_recursive_unlock+0xc>)
   b576c:	681b      	ldr	r3, [r3, #0]
   b576e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5770:	9301      	str	r3, [sp, #4]
   b5772:	bd08      	pop	{r3, pc}
   b5774:	00030248 	.word	0x00030248

000b5778 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5778:	b508      	push	{r3, lr}
   b577a:	4b02      	ldr	r3, [pc, #8]	; (b5784 <HAL_RNG_GetRandomNumber+0xc>)
   b577c:	681b      	ldr	r3, [r3, #0]
   b577e:	685b      	ldr	r3, [r3, #4]
   b5780:	9301      	str	r3, [sp, #4]
   b5782:	bd08      	pop	{r3, pc}
   b5784:	00030218 	.word	0x00030218

000b5788 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5788:	b508      	push	{r3, lr}
   b578a:	4b02      	ldr	r3, [pc, #8]	; (b5794 <HAL_Delay_Microseconds+0xc>)
   b578c:	681b      	ldr	r3, [r3, #0]
   b578e:	68db      	ldr	r3, [r3, #12]
   b5790:	9301      	str	r3, [sp, #4]
   b5792:	bd08      	pop	{r3, pc}
   b5794:	00030218 	.word	0x00030218

000b5798 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5798:	b508      	push	{r3, lr}
   b579a:	4b02      	ldr	r3, [pc, #8]	; (b57a4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b579c:	681b      	ldr	r3, [r3, #0]
   b579e:	695b      	ldr	r3, [r3, #20]
   b57a0:	9301      	str	r3, [sp, #4]
   b57a2:	bd08      	pop	{r3, pc}
   b57a4:	00030218 	.word	0x00030218

000b57a8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b57a8:	b508      	push	{r3, lr}
   b57aa:	4b02      	ldr	r3, [pc, #8]	; (b57b4 <HAL_Pin_Map+0xc>)
   b57ac:	681b      	ldr	r3, [r3, #0]
   b57ae:	681b      	ldr	r3, [r3, #0]
   b57b0:	9301      	str	r3, [sp, #4]
   b57b2:	bd08      	pop	{r3, pc}
   b57b4:	0003022c 	.word	0x0003022c

000b57b8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b57b8:	b508      	push	{r3, lr}
   b57ba:	4b02      	ldr	r3, [pc, #8]	; (b57c4 <hal_i2c_begin+0xc>)
   b57bc:	681b      	ldr	r3, [r3, #0]
   b57be:	68db      	ldr	r3, [r3, #12]
   b57c0:	9301      	str	r3, [sp, #4]
   b57c2:	bd08      	pop	{r3, pc}
   b57c4:	00030228 	.word	0x00030228

000b57c8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b57c8:	b508      	push	{r3, lr}
   b57ca:	4b02      	ldr	r3, [pc, #8]	; (b57d4 <hal_i2c_begin_transmission+0xc>)
   b57cc:	681b      	ldr	r3, [r3, #0]
   b57ce:	699b      	ldr	r3, [r3, #24]
   b57d0:	9301      	str	r3, [sp, #4]
   b57d2:	bd08      	pop	{r3, pc}
   b57d4:	00030228 	.word	0x00030228

000b57d8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b57d8:	b508      	push	{r3, lr}
   b57da:	4b02      	ldr	r3, [pc, #8]	; (b57e4 <hal_i2c_end_transmission+0xc>)
   b57dc:	681b      	ldr	r3, [r3, #0]
   b57de:	69db      	ldr	r3, [r3, #28]
   b57e0:	9301      	str	r3, [sp, #4]
   b57e2:	bd08      	pop	{r3, pc}
   b57e4:	00030228 	.word	0x00030228

000b57e8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b57e8:	b508      	push	{r3, lr}
   b57ea:	4b02      	ldr	r3, [pc, #8]	; (b57f4 <hal_i2c_write+0xc>)
   b57ec:	681b      	ldr	r3, [r3, #0]
   b57ee:	6a1b      	ldr	r3, [r3, #32]
   b57f0:	9301      	str	r3, [sp, #4]
   b57f2:	bd08      	pop	{r3, pc}
   b57f4:	00030228 	.word	0x00030228

000b57f8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b57f8:	b508      	push	{r3, lr}
   b57fa:	4b02      	ldr	r3, [pc, #8]	; (b5804 <hal_i2c_available+0xc>)
   b57fc:	681b      	ldr	r3, [r3, #0]
   b57fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5800:	9301      	str	r3, [sp, #4]
   b5802:	bd08      	pop	{r3, pc}
   b5804:	00030228 	.word	0x00030228

000b5808 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5808:	b508      	push	{r3, lr}
   b580a:	4b02      	ldr	r3, [pc, #8]	; (b5814 <hal_i2c_read+0xc>)
   b580c:	681b      	ldr	r3, [r3, #0]
   b580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5810:	9301      	str	r3, [sp, #4]
   b5812:	bd08      	pop	{r3, pc}
   b5814:	00030228 	.word	0x00030228

000b5818 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5818:	b508      	push	{r3, lr}
   b581a:	4b02      	ldr	r3, [pc, #8]	; (b5824 <hal_i2c_peek+0xc>)
   b581c:	681b      	ldr	r3, [r3, #0]
   b581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5820:	9301      	str	r3, [sp, #4]
   b5822:	bd08      	pop	{r3, pc}
   b5824:	00030228 	.word	0x00030228

000b5828 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5828:	b508      	push	{r3, lr}
   b582a:	4b02      	ldr	r3, [pc, #8]	; (b5834 <hal_i2c_flush+0xc>)
   b582c:	681b      	ldr	r3, [r3, #0]
   b582e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5830:	9301      	str	r3, [sp, #4]
   b5832:	bd08      	pop	{r3, pc}
   b5834:	00030228 	.word	0x00030228

000b5838 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5838:	b508      	push	{r3, lr}
   b583a:	4b02      	ldr	r3, [pc, #8]	; (b5844 <hal_i2c_init+0xc>)
   b583c:	681b      	ldr	r3, [r3, #0]
   b583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5840:	9301      	str	r3, [sp, #4]
   b5842:	bd08      	pop	{r3, pc}
   b5844:	00030228 	.word	0x00030228

000b5848 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5848:	b508      	push	{r3, lr}
   b584a:	4b02      	ldr	r3, [pc, #8]	; (b5854 <hal_i2c_request_ex+0xc>)
   b584c:	681b      	ldr	r3, [r3, #0]
   b584e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5850:	9301      	str	r3, [sp, #4]
   b5852:	bd08      	pop	{r3, pc}
   b5854:	00030228 	.word	0x00030228

000b5858 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5858:	b508      	push	{r3, lr}
   b585a:	4b02      	ldr	r3, [pc, #8]	; (b5864 <if_index_to_name+0xc>)
   b585c:	681b      	ldr	r3, [r3, #0]
   b585e:	695b      	ldr	r3, [r3, #20]
   b5860:	9301      	str	r3, [sp, #4]
   b5862:	bd08      	pop	{r3, pc}
   b5864:	0003026c 	.word	0x0003026c

000b5868 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5868:	b508      	push	{r3, lr}
   b586a:	4b02      	ldr	r3, [pc, #8]	; (b5874 <inet_inet_ntop+0xc>)
   b586c:	681b      	ldr	r3, [r3, #0]
   b586e:	695b      	ldr	r3, [r3, #20]
   b5870:	9301      	str	r3, [sp, #4]
   b5872:	bd08      	pop	{r3, pc}
   b5874:	00030264 	.word	0x00030264

000b5878 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5878:	b508      	push	{r3, lr}
   b587a:	4b02      	ldr	r3, [pc, #8]	; (b5884 <inet_htonl+0xc>)
   b587c:	681b      	ldr	r3, [r3, #0]
   b587e:	6a1b      	ldr	r3, [r3, #32]
   b5880:	9301      	str	r3, [sp, #4]
   b5882:	bd08      	pop	{r3, pc}
   b5884:	00030264 	.word	0x00030264

000b5888 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5888:	b508      	push	{r3, lr}
   b588a:	4b02      	ldr	r3, [pc, #8]	; (b5894 <inet_htons+0xc>)
   b588c:	681b      	ldr	r3, [r3, #0]
   b588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5890:	9301      	str	r3, [sp, #4]
   b5892:	bd08      	pop	{r3, pc}
   b5894:	00030264 	.word	0x00030264

000b5898 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5898:	b508      	push	{r3, lr}
   b589a:	4b02      	ldr	r3, [pc, #8]	; (b58a4 <netdb_freeaddrinfo+0xc>)
   b589c:	681b      	ldr	r3, [r3, #0]
   b589e:	689b      	ldr	r3, [r3, #8]
   b58a0:	9301      	str	r3, [sp, #4]
   b58a2:	bd08      	pop	{r3, pc}
   b58a4:	00030268 	.word	0x00030268

000b58a8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b58a8:	b508      	push	{r3, lr}
   b58aa:	4b02      	ldr	r3, [pc, #8]	; (b58b4 <netdb_getaddrinfo+0xc>)
   b58ac:	681b      	ldr	r3, [r3, #0]
   b58ae:	68db      	ldr	r3, [r3, #12]
   b58b0:	9301      	str	r3, [sp, #4]
   b58b2:	bd08      	pop	{r3, pc}
   b58b4:	00030268 	.word	0x00030268

000b58b8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b58b8:	b508      	push	{r3, lr}
   b58ba:	4b02      	ldr	r3, [pc, #8]	; (b58c4 <sock_setsockopt+0xc>)
   b58bc:	681b      	ldr	r3, [r3, #0]
   b58be:	699b      	ldr	r3, [r3, #24]
   b58c0:	9301      	str	r3, [sp, #4]
   b58c2:	bd08      	pop	{r3, pc}
   b58c4:	00030238 	.word	0x00030238

000b58c8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b58c8:	b508      	push	{r3, lr}
   b58ca:	4b02      	ldr	r3, [pc, #8]	; (b58d4 <sock_close+0xc>)
   b58cc:	681b      	ldr	r3, [r3, #0]
   b58ce:	69db      	ldr	r3, [r3, #28]
   b58d0:	9301      	str	r3, [sp, #4]
   b58d2:	bd08      	pop	{r3, pc}
   b58d4:	00030238 	.word	0x00030238

000b58d8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b58d8:	b508      	push	{r3, lr}
   b58da:	4b02      	ldr	r3, [pc, #8]	; (b58e4 <sock_connect+0xc>)
   b58dc:	681b      	ldr	r3, [r3, #0]
   b58de:	6a1b      	ldr	r3, [r3, #32]
   b58e0:	9301      	str	r3, [sp, #4]
   b58e2:	bd08      	pop	{r3, pc}
   b58e4:	00030238 	.word	0x00030238

000b58e8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b58e8:	b508      	push	{r3, lr}
   b58ea:	4b02      	ldr	r3, [pc, #8]	; (b58f4 <sock_recv+0xc>)
   b58ec:	681b      	ldr	r3, [r3, #0]
   b58ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b58f0:	9301      	str	r3, [sp, #4]
   b58f2:	bd08      	pop	{r3, pc}
   b58f4:	00030238 	.word	0x00030238

000b58f8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b58f8:	b508      	push	{r3, lr}
   b58fa:	4b02      	ldr	r3, [pc, #8]	; (b5904 <sock_send+0xc>)
   b58fc:	681b      	ldr	r3, [r3, #0]
   b58fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5900:	9301      	str	r3, [sp, #4]
   b5902:	bd08      	pop	{r3, pc}
   b5904:	00030238 	.word	0x00030238

000b5908 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5908:	b508      	push	{r3, lr}
   b590a:	4b02      	ldr	r3, [pc, #8]	; (b5914 <sock_socket+0xc>)
   b590c:	681b      	ldr	r3, [r3, #0]
   b590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5910:	9301      	str	r3, [sp, #4]
   b5912:	bd08      	pop	{r3, pc}
   b5914:	00030238 	.word	0x00030238

000b5918 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5918:	b508      	push	{r3, lr}
   b591a:	4b02      	ldr	r3, [pc, #8]	; (b5924 <hal_usart_write+0xc>)
   b591c:	681b      	ldr	r3, [r3, #0]
   b591e:	68db      	ldr	r3, [r3, #12]
   b5920:	9301      	str	r3, [sp, #4]
   b5922:	bd08      	pop	{r3, pc}
   b5924:	0003023c 	.word	0x0003023c

000b5928 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5928:	b508      	push	{r3, lr}
   b592a:	4b02      	ldr	r3, [pc, #8]	; (b5934 <hal_usart_available+0xc>)
   b592c:	681b      	ldr	r3, [r3, #0]
   b592e:	691b      	ldr	r3, [r3, #16]
   b5930:	9301      	str	r3, [sp, #4]
   b5932:	bd08      	pop	{r3, pc}
   b5934:	0003023c 	.word	0x0003023c

000b5938 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5938:	b508      	push	{r3, lr}
   b593a:	4b02      	ldr	r3, [pc, #8]	; (b5944 <hal_usart_read+0xc>)
   b593c:	681b      	ldr	r3, [r3, #0]
   b593e:	695b      	ldr	r3, [r3, #20]
   b5940:	9301      	str	r3, [sp, #4]
   b5942:	bd08      	pop	{r3, pc}
   b5944:	0003023c 	.word	0x0003023c

000b5948 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5948:	b508      	push	{r3, lr}
   b594a:	4b02      	ldr	r3, [pc, #8]	; (b5954 <hal_usart_peek+0xc>)
   b594c:	681b      	ldr	r3, [r3, #0]
   b594e:	699b      	ldr	r3, [r3, #24]
   b5950:	9301      	str	r3, [sp, #4]
   b5952:	bd08      	pop	{r3, pc}
   b5954:	0003023c 	.word	0x0003023c

000b5958 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5958:	b508      	push	{r3, lr}
   b595a:	4b02      	ldr	r3, [pc, #8]	; (b5964 <hal_usart_flush+0xc>)
   b595c:	681b      	ldr	r3, [r3, #0]
   b595e:	69db      	ldr	r3, [r3, #28]
   b5960:	9301      	str	r3, [sp, #4]
   b5962:	bd08      	pop	{r3, pc}
   b5964:	0003023c 	.word	0x0003023c

000b5968 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5968:	b508      	push	{r3, lr}
   b596a:	4b02      	ldr	r3, [pc, #8]	; (b5974 <hal_usart_available_data_for_write+0xc>)
   b596c:	681b      	ldr	r3, [r3, #0]
   b596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5970:	9301      	str	r3, [sp, #4]
   b5972:	bd08      	pop	{r3, pc}
   b5974:	0003023c 	.word	0x0003023c

000b5978 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5978:	b508      	push	{r3, lr}
   b597a:	4b02      	ldr	r3, [pc, #8]	; (b5984 <hal_usart_init_ex+0xc>)
   b597c:	681b      	ldr	r3, [r3, #0]
   b597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5980:	9301      	str	r3, [sp, #4]
   b5982:	bd08      	pop	{r3, pc}
   b5984:	0003023c 	.word	0x0003023c

000b5988 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5988:	b508      	push	{r3, lr}
   b598a:	4b02      	ldr	r3, [pc, #8]	; (b5994 <HAL_USB_USART_Init+0xc>)
   b598c:	681b      	ldr	r3, [r3, #0]
   b598e:	681b      	ldr	r3, [r3, #0]
   b5990:	9301      	str	r3, [sp, #4]
   b5992:	bd08      	pop	{r3, pc}
   b5994:	0003024c 	.word	0x0003024c

000b5998 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5998:	b508      	push	{r3, lr}
   b599a:	4b02      	ldr	r3, [pc, #8]	; (b59a4 <HAL_USB_USART_Begin+0xc>)
   b599c:	681b      	ldr	r3, [r3, #0]
   b599e:	685b      	ldr	r3, [r3, #4]
   b59a0:	9301      	str	r3, [sp, #4]
   b59a2:	bd08      	pop	{r3, pc}
   b59a4:	0003024c 	.word	0x0003024c

000b59a8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b59a8:	b508      	push	{r3, lr}
   b59aa:	4b02      	ldr	r3, [pc, #8]	; (b59b4 <HAL_USB_USART_Available_Data+0xc>)
   b59ac:	681b      	ldr	r3, [r3, #0]
   b59ae:	691b      	ldr	r3, [r3, #16]
   b59b0:	9301      	str	r3, [sp, #4]
   b59b2:	bd08      	pop	{r3, pc}
   b59b4:	0003024c 	.word	0x0003024c

000b59b8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b59b8:	b508      	push	{r3, lr}
   b59ba:	4b02      	ldr	r3, [pc, #8]	; (b59c4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b59bc:	681b      	ldr	r3, [r3, #0]
   b59be:	695b      	ldr	r3, [r3, #20]
   b59c0:	9301      	str	r3, [sp, #4]
   b59c2:	bd08      	pop	{r3, pc}
   b59c4:	0003024c 	.word	0x0003024c

000b59c8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b59c8:	b508      	push	{r3, lr}
   b59ca:	4b02      	ldr	r3, [pc, #8]	; (b59d4 <HAL_USB_USART_Receive_Data+0xc>)
   b59cc:	681b      	ldr	r3, [r3, #0]
   b59ce:	699b      	ldr	r3, [r3, #24]
   b59d0:	9301      	str	r3, [sp, #4]
   b59d2:	bd08      	pop	{r3, pc}
   b59d4:	0003024c 	.word	0x0003024c

000b59d8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b59d8:	b508      	push	{r3, lr}
   b59da:	4b02      	ldr	r3, [pc, #8]	; (b59e4 <HAL_USB_USART_Send_Data+0xc>)
   b59dc:	681b      	ldr	r3, [r3, #0]
   b59de:	69db      	ldr	r3, [r3, #28]
   b59e0:	9301      	str	r3, [sp, #4]
   b59e2:	bd08      	pop	{r3, pc}
   b59e4:	0003024c 	.word	0x0003024c

000b59e8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b59e8:	b508      	push	{r3, lr}
   b59ea:	4b02      	ldr	r3, [pc, #8]	; (b59f4 <HAL_USB_USART_Flush_Data+0xc>)
   b59ec:	681b      	ldr	r3, [r3, #0]
   b59ee:	6a1b      	ldr	r3, [r3, #32]
   b59f0:	9301      	str	r3, [sp, #4]
   b59f2:	bd08      	pop	{r3, pc}
   b59f4:	0003024c 	.word	0x0003024c

000b59f8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b59f8:	b508      	push	{r3, lr}
   b59fa:	4b02      	ldr	r3, [pc, #8]	; (b5a04 <panic_+0xc>)
   b59fc:	681b      	ldr	r3, [r3, #0]
   b59fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5a00:	9301      	str	r3, [sp, #4]
   b5a02:	bd08      	pop	{r3, pc}
   b5a04:	00030260 	.word	0x00030260

000b5a08 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5a08:	b508      	push	{r3, lr}
   b5a0a:	4b02      	ldr	r3, [pc, #8]	; (b5a14 <log_message+0xc>)
   b5a0c:	681b      	ldr	r3, [r3, #0]
   b5a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5a10:	9301      	str	r3, [sp, #4]
   b5a12:	bd08      	pop	{r3, pc}
   b5a14:	00030260 	.word	0x00030260

000b5a18 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5a18:	b508      	push	{r3, lr}
   b5a1a:	4b02      	ldr	r3, [pc, #8]	; (b5a24 <set_system_mode+0xc>)
   b5a1c:	681b      	ldr	r3, [r3, #0]
   b5a1e:	685b      	ldr	r3, [r3, #4]
   b5a20:	9301      	str	r3, [sp, #4]
   b5a22:	bd08      	pop	{r3, pc}
   b5a24:	00030220 	.word	0x00030220

000b5a28 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5a28:	b508      	push	{r3, lr}
   b5a2a:	4b02      	ldr	r3, [pc, #8]	; (b5a34 <system_delay_ms+0xc>)
   b5a2c:	681b      	ldr	r3, [r3, #0]
   b5a2e:	695b      	ldr	r3, [r3, #20]
   b5a30:	9301      	str	r3, [sp, #4]
   b5a32:	bd08      	pop	{r3, pc}
   b5a34:	00030220 	.word	0x00030220

000b5a38 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5a38:	b508      	push	{r3, lr}
   b5a3a:	4b03      	ldr	r3, [pc, #12]	; (b5a48 <system_ctrl_set_app_request_handler+0x10>)
   b5a3c:	681b      	ldr	r3, [r3, #0]
   b5a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5a42:	9301      	str	r3, [sp, #4]
   b5a44:	bd08      	pop	{r3, pc}
   b5a46:	0000      	.short	0x0000
   b5a48:	00030220 	.word	0x00030220

000b5a4c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5a4c:	b508      	push	{r3, lr}
   b5a4e:	4b03      	ldr	r3, [pc, #12]	; (b5a5c <system_ctrl_set_result+0x10>)
   b5a50:	681b      	ldr	r3, [r3, #0]
   b5a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5a56:	9301      	str	r3, [sp, #4]
   b5a58:	bd08      	pop	{r3, pc}
   b5a5a:	0000      	.short	0x0000
   b5a5c:	00030220 	.word	0x00030220

000b5a60 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5a60:	b508      	push	{r3, lr}
   b5a62:	4b02      	ldr	r3, [pc, #8]	; (b5a6c <spark_set_random_seed_from_cloud_handler+0xc>)
   b5a64:	681b      	ldr	r3, [r3, #0]
   b5a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5a68:	9301      	str	r3, [sp, #4]
   b5a6a:	bd08      	pop	{r3, pc}
   b5a6c:	00030244 	.word	0x00030244

000b5a70 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5a70:	b508      	push	{r3, lr}
   b5a72:	4b02      	ldr	r3, [pc, #8]	; (b5a7c <network_connect+0xc>)
   b5a74:	681b      	ldr	r3, [r3, #0]
   b5a76:	685b      	ldr	r3, [r3, #4]
   b5a78:	9301      	str	r3, [sp, #4]
   b5a7a:	bd08      	pop	{r3, pc}
   b5a7c:	00030240 	.word	0x00030240

000b5a80 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5a80:	b508      	push	{r3, lr}
   b5a82:	4b02      	ldr	r3, [pc, #8]	; (b5a8c <network_connecting+0xc>)
   b5a84:	681b      	ldr	r3, [r3, #0]
   b5a86:	689b      	ldr	r3, [r3, #8]
   b5a88:	9301      	str	r3, [sp, #4]
   b5a8a:	bd08      	pop	{r3, pc}
   b5a8c:	00030240 	.word	0x00030240

000b5a90 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5a90:	b508      	push	{r3, lr}
   b5a92:	4b02      	ldr	r3, [pc, #8]	; (b5a9c <network_disconnect+0xc>)
   b5a94:	681b      	ldr	r3, [r3, #0]
   b5a96:	68db      	ldr	r3, [r3, #12]
   b5a98:	9301      	str	r3, [sp, #4]
   b5a9a:	bd08      	pop	{r3, pc}
   b5a9c:	00030240 	.word	0x00030240

000b5aa0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5aa0:	b508      	push	{r3, lr}
   b5aa2:	4b02      	ldr	r3, [pc, #8]	; (b5aac <network_ready+0xc>)
   b5aa4:	681b      	ldr	r3, [r3, #0]
   b5aa6:	691b      	ldr	r3, [r3, #16]
   b5aa8:	9301      	str	r3, [sp, #4]
   b5aaa:	bd08      	pop	{r3, pc}
   b5aac:	00030240 	.word	0x00030240

000b5ab0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5ab0:	b508      	push	{r3, lr}
   b5ab2:	4b02      	ldr	r3, [pc, #8]	; (b5abc <network_on+0xc>)
   b5ab4:	681b      	ldr	r3, [r3, #0]
   b5ab6:	695b      	ldr	r3, [r3, #20]
   b5ab8:	9301      	str	r3, [sp, #4]
   b5aba:	bd08      	pop	{r3, pc}
   b5abc:	00030240 	.word	0x00030240

000b5ac0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5ac0:	b508      	push	{r3, lr}
   b5ac2:	4b02      	ldr	r3, [pc, #8]	; (b5acc <network_off+0xc>)
   b5ac4:	681b      	ldr	r3, [r3, #0]
   b5ac6:	699b      	ldr	r3, [r3, #24]
   b5ac8:	9301      	str	r3, [sp, #4]
   b5aca:	bd08      	pop	{r3, pc}
   b5acc:	00030240 	.word	0x00030240

000b5ad0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5ad0:	b508      	push	{r3, lr}
   b5ad2:	4b02      	ldr	r3, [pc, #8]	; (b5adc <network_listen+0xc>)
   b5ad4:	681b      	ldr	r3, [r3, #0]
   b5ad6:	69db      	ldr	r3, [r3, #28]
   b5ad8:	9301      	str	r3, [sp, #4]
   b5ada:	bd08      	pop	{r3, pc}
   b5adc:	00030240 	.word	0x00030240

000b5ae0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5ae0:	b508      	push	{r3, lr}
   b5ae2:	4b02      	ldr	r3, [pc, #8]	; (b5aec <network_listening+0xc>)
   b5ae4:	681b      	ldr	r3, [r3, #0]
   b5ae6:	6a1b      	ldr	r3, [r3, #32]
   b5ae8:	9301      	str	r3, [sp, #4]
   b5aea:	bd08      	pop	{r3, pc}
   b5aec:	00030240 	.word	0x00030240

000b5af0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5af0:	b508      	push	{r3, lr}
   b5af2:	4b02      	ldr	r3, [pc, #8]	; (b5afc <network_set_listen_timeout+0xc>)
   b5af4:	681b      	ldr	r3, [r3, #0]
   b5af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5af8:	9301      	str	r3, [sp, #4]
   b5afa:	bd08      	pop	{r3, pc}
   b5afc:	00030240 	.word	0x00030240

000b5b00 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5b00:	b508      	push	{r3, lr}
   b5b02:	4b02      	ldr	r3, [pc, #8]	; (b5b0c <network_get_listen_timeout+0xc>)
   b5b04:	681b      	ldr	r3, [r3, #0]
   b5b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5b08:	9301      	str	r3, [sp, #4]
   b5b0a:	bd08      	pop	{r3, pc}
   b5b0c:	00030240 	.word	0x00030240

000b5b10 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5b10:	b508      	push	{r3, lr}
   b5b12:	4b02      	ldr	r3, [pc, #8]	; (b5b1c <network_is_on+0xc>)
   b5b14:	681b      	ldr	r3, [r3, #0]
   b5b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5b18:	9301      	str	r3, [sp, #4]
   b5b1a:	bd08      	pop	{r3, pc}
   b5b1c:	00030240 	.word	0x00030240

000b5b20 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5b20:	b508      	push	{r3, lr}
   b5b22:	4b02      	ldr	r3, [pc, #8]	; (b5b2c <network_is_off+0xc>)
   b5b24:	681b      	ldr	r3, [r3, #0]
   b5b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5b28:	9301      	str	r3, [sp, #4]
   b5b2a:	bd08      	pop	{r3, pc}
   b5b2c:	00030240 	.word	0x00030240

000b5b30 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5b30:	b508      	push	{r3, lr}
   b5b32:	4b02      	ldr	r3, [pc, #8]	; (b5b3c <malloc+0xc>)
   b5b34:	681b      	ldr	r3, [r3, #0]
   b5b36:	681b      	ldr	r3, [r3, #0]
   b5b38:	9301      	str	r3, [sp, #4]
   b5b3a:	bd08      	pop	{r3, pc}
   b5b3c:	0003021c 	.word	0x0003021c

000b5b40 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5b40:	b508      	push	{r3, lr}
   b5b42:	4b02      	ldr	r3, [pc, #8]	; (b5b4c <free+0xc>)
   b5b44:	681b      	ldr	r3, [r3, #0]
   b5b46:	685b      	ldr	r3, [r3, #4]
   b5b48:	9301      	str	r3, [sp, #4]
   b5b4a:	bd08      	pop	{r3, pc}
   b5b4c:	0003021c 	.word	0x0003021c

000b5b50 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5b50:	b508      	push	{r3, lr}
   b5b52:	4b02      	ldr	r3, [pc, #8]	; (b5b5c <realloc+0xc>)
   b5b54:	681b      	ldr	r3, [r3, #0]
   b5b56:	689b      	ldr	r3, [r3, #8]
   b5b58:	9301      	str	r3, [sp, #4]
   b5b5a:	bd08      	pop	{r3, pc}
   b5b5c:	0003021c 	.word	0x0003021c

000b5b60 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b5b60:	b508      	push	{r3, lr}
   b5b62:	4b02      	ldr	r3, [pc, #8]	; (b5b6c <sscanf+0xc>)
   b5b64:	681b      	ldr	r3, [r3, #0]
   b5b66:	695b      	ldr	r3, [r3, #20]
   b5b68:	9301      	str	r3, [sp, #4]
   b5b6a:	bd08      	pop	{r3, pc}
   b5b6c:	0003021c 	.word	0x0003021c

000b5b70 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5b70:	b508      	push	{r3, lr}
   b5b72:	4b02      	ldr	r3, [pc, #8]	; (b5b7c <vsnprintf+0xc>)
   b5b74:	681b      	ldr	r3, [r3, #0]
   b5b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5b78:	9301      	str	r3, [sp, #4]
   b5b7a:	bd08      	pop	{r3, pc}
   b5b7c:	0003021c 	.word	0x0003021c

000b5b80 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5b80:	b508      	push	{r3, lr}
   b5b82:	4b02      	ldr	r3, [pc, #8]	; (b5b8c <abort+0xc>)
   b5b84:	681b      	ldr	r3, [r3, #0]
   b5b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5b88:	9301      	str	r3, [sp, #4]
   b5b8a:	bd08      	pop	{r3, pc}
   b5b8c:	0003021c 	.word	0x0003021c

000b5b90 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b5b90:	b508      	push	{r3, lr}
   b5b92:	4b02      	ldr	r3, [pc, #8]	; (b5b9c <_malloc_r+0xc>)
   b5b94:	681b      	ldr	r3, [r3, #0]
   b5b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5b98:	9301      	str	r3, [sp, #4]
   b5b9a:	bd08      	pop	{r3, pc}
   b5b9c:	0003021c 	.word	0x0003021c

000b5ba0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5ba0:	b508      	push	{r3, lr}
   b5ba2:	4b02      	ldr	r3, [pc, #8]	; (b5bac <__errno+0xc>)
   b5ba4:	681b      	ldr	r3, [r3, #0]
   b5ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5ba8:	9301      	str	r3, [sp, #4]
   b5baa:	bd08      	pop	{r3, pc}
   b5bac:	0003021c 	.word	0x0003021c

000b5bb0 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5bb0:	b508      	push	{r3, lr}
   b5bb2:	4b02      	ldr	r3, [pc, #8]	; (b5bbc <__assert_func+0xc>)
   b5bb4:	681b      	ldr	r3, [r3, #0]
   b5bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5bb8:	9301      	str	r3, [sp, #4]
   b5bba:	bd08      	pop	{r3, pc}
   b5bbc:	0003021c 	.word	0x0003021c

000b5bc0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5bc0:	b508      	push	{r3, lr}
   b5bc2:	4b02      	ldr	r3, [pc, #8]	; (b5bcc <newlib_impure_ptr_callback+0xc>)
   b5bc4:	681b      	ldr	r3, [r3, #0]
   b5bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5bc8:	9301      	str	r3, [sp, #4]
   b5bca:	bd08      	pop	{r3, pc}
   b5bcc:	0003021c 	.word	0x0003021c

000b5bd0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5bd0:	2100      	movs	r1, #0
   b5bd2:	f7ff bf29 	b.w	b5a28 <system_delay_ms>

000b5bd6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5bd6:	4770      	bx	lr

000b5bd8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b5bd8:	4770      	bx	lr

000b5bda <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b5bda:	4770      	bx	lr

000b5bdc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5bdc:	4770      	bx	lr
	...

000b5be0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5be0:	4b06      	ldr	r3, [pc, #24]	; (b5bfc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5be2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5be4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5be6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5bea:	d005      	beq.n	b5bf8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5bec:	4608      	mov	r0, r1
   b5bee:	f002 fac7 	bl	b8180 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5bf2:	2800      	cmp	r0, #0
   b5bf4:	bf08      	it	eq
   b5bf6:	2400      	moveq	r4, #0
      }
   b5bf8:	4620      	mov	r0, r4
   b5bfa:	bd10      	pop	{r4, pc}
   b5bfc:	000bb50c 	.word	0x000bb50c

000b5c00 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5c00:	4b06      	ldr	r3, [pc, #24]	; (b5c1c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5c02:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5c04:	b510      	push	{r4, lr}
   b5c06:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5c0a:	d005      	beq.n	b5c18 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5c0c:	4608      	mov	r0, r1
   b5c0e:	f002 fab7 	bl	b8180 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5c12:	2800      	cmp	r0, #0
   b5c14:	bf08      	it	eq
   b5c16:	2400      	moveq	r4, #0
      }
   b5c18:	4620      	mov	r0, r4
   b5c1a:	bd10      	pop	{r4, pc}
   b5c1c:	000bb50c 	.word	0x000bb50c

000b5c20 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5c20:	4b06      	ldr	r3, [pc, #24]	; (b5c3c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5c22:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5c24:	b510      	push	{r4, lr}
   b5c26:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5c2a:	d005      	beq.n	b5c38 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5c2c:	4608      	mov	r0, r1
   b5c2e:	f002 faa7 	bl	b8180 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5c32:	2800      	cmp	r0, #0
   b5c34:	bf08      	it	eq
   b5c36:	2400      	moveq	r4, #0
      }
   b5c38:	4620      	mov	r0, r4
   b5c3a:	bd10      	pop	{r4, pc}
   b5c3c:	000bb50c 	.word	0x000bb50c

000b5c40 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5c40:	b510      	push	{r4, lr}
   b5c42:	2168      	movs	r1, #104	; 0x68
   b5c44:	4604      	mov	r4, r0
   b5c46:	f7fe fa2a 	bl	b409e <_ZdlPvj>
   b5c4a:	4620      	mov	r0, r4
   b5c4c:	bd10      	pop	{r4, pc}

000b5c4e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b5c4e:	b510      	push	{r4, lr}
   b5c50:	2128      	movs	r1, #40	; 0x28
   b5c52:	4604      	mov	r4, r0
   b5c54:	f7fe fa23 	bl	b409e <_ZdlPvj>
   b5c58:	4620      	mov	r0, r4
   b5c5a:	bd10      	pop	{r4, pc}

000b5c5c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b5c5c:	b510      	push	{r4, lr}
   b5c5e:	2130      	movs	r1, #48	; 0x30
   b5c60:	4604      	mov	r4, r0
   b5c62:	f7fe fa1c 	bl	b409e <_ZdlPvj>
   b5c66:	4620      	mov	r0, r4
   b5c68:	bd10      	pop	{r4, pc}

000b5c6a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5c6a:	2168      	movs	r1, #104	; 0x68
   b5c6c:	f7fe ba17 	b.w	b409e <_ZdlPvj>

000b5c70 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b5c70:	2128      	movs	r1, #40	; 0x28
   b5c72:	f7fe ba14 	b.w	b409e <_ZdlPvj>

000b5c76 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b5c76:	2130      	movs	r1, #48	; 0x30
   b5c78:	f7fe ba11 	b.w	b409e <_ZdlPvj>

000b5c7c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b5c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b5c7e:	2500      	movs	r5, #0
   b5c80:	1cec      	adds	r4, r5, #3
   b5c82:	428c      	cmp	r4, r1
   b5c84:	d80d      	bhi.n	b5ca2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b5c86:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b5c88:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b5c8a:	5d87      	ldrb	r7, [r0, r6]
   b5c8c:	4297      	cmp	r7, r2
   b5c8e:	d105      	bne.n	b5c9c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b5c90:	4426      	add	r6, r4
   b5c92:	42b1      	cmp	r1, r6
   b5c94:	d305      	bcc.n	b5ca2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b5c96:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b5c98:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b5c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b5c9c:	3401      	adds	r4, #1
   b5c9e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b5ca0:	e7ee      	b.n	b5c80 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b5ca2:	2000      	movs	r0, #0
   b5ca4:	e7f9      	b.n	b5c9a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b5ca8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b5ca8:	4a02      	ldr	r2, [pc, #8]	; (b5cb4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b5caa:	4903      	ldr	r1, [pc, #12]	; (b5cb8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b5cac:	200a      	movs	r0, #10
   b5cae:	f7ff bea3 	b.w	b59f8 <panic_>
   b5cb2:	bf00      	nop
   b5cb4:	000b5789 	.word	0x000b5789
   b5cb8:	000bb36c 	.word	0x000bb36c

000b5cbc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5cbc:	b430      	push	{r4, r5}
   b5cbe:	460d      	mov	r5, r1
   b5cc0:	4611      	mov	r1, r2
   b5cc2:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b5cc4:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5cc6:	6809      	ldr	r1, [r1, #0]
   b5cc8:	6828      	ldr	r0, [r5, #0]
   b5cca:	e9d3 4300 	ldrd	r4, r3, [r3]
   b5cce:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b5cd0:	bc30      	pop	{r4, r5}
   b5cd2:	4760      	bx	ip

000b5cd4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b5cd4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5cd6:	b538      	push	{r3, r4, r5, lr}
   b5cd8:	4604      	mov	r4, r0
	switch (__op)
   b5cda:	d102      	bne.n	b5ce2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b5cdc:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b5cde:	6023      	str	r3, [r4, #0]
	}
   b5ce0:	e003      	b.n	b5cea <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b5ce2:	2a02      	cmp	r2, #2
   b5ce4:	d003      	beq.n	b5cee <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b5ce6:	2a03      	cmp	r2, #3
   b5ce8:	d00d      	beq.n	b5d06 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b5cea:	2000      	movs	r0, #0
   b5cec:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b5cee:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b5cf0:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5cf2:	f7fe f9d0 	bl	b4096 <_Znwj>
   b5cf6:	4603      	mov	r3, r0
   b5cf8:	2800      	cmp	r0, #0
   b5cfa:	d0f0      	beq.n	b5cde <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b5cfc:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5d00:	e883 0003 	stmia.w	r3, {r0, r1}
   b5d04:	e7eb      	b.n	b5cde <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b5d06:	6800      	ldr	r0, [r0, #0]
   b5d08:	2800      	cmp	r0, #0
   b5d0a:	d0ee      	beq.n	b5cea <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b5d0c:	2108      	movs	r1, #8
   b5d0e:	f7fe f9c6 	bl	b409e <_ZdlPvj>
   b5d12:	e7ea      	b.n	b5cea <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b5d14 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5d14:	b510      	push	{r4, lr}
      if (_M_manager)
   b5d16:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5d18:	4604      	mov	r4, r0
      if (_M_manager)
   b5d1a:	b113      	cbz	r3, b5d22 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5d1c:	2203      	movs	r2, #3
   b5d1e:	4601      	mov	r1, r0
   b5d20:	4798      	blx	r3
    }
   b5d22:	4620      	mov	r0, r4
   b5d24:	bd10      	pop	{r4, pc}

000b5d26 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5d26:	b510      	push	{r4, lr}
   b5d28:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b5d2a:	3058      	adds	r0, #88	; 0x58
   b5d2c:	f7ff fff2 	bl	b5d14 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b5d30:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b5d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5d38:	f001 bb98 	b.w	b746c <_ZN6StringD1Ev>

000b5d3c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b5d3c:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5d3e:	6843      	ldr	r3, [r0, #4]
   b5d40:	3b01      	subs	r3, #1
    {
   b5d42:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5d44:	6043      	str	r3, [r0, #4]
   b5d46:	b963      	cbnz	r3, b5d62 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b5d48:	6803      	ldr	r3, [r0, #0]
   b5d4a:	689b      	ldr	r3, [r3, #8]
   b5d4c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5d4e:	68a3      	ldr	r3, [r4, #8]
   b5d50:	3b01      	subs	r3, #1
   b5d52:	60a3      	str	r3, [r4, #8]
   b5d54:	b92b      	cbnz	r3, b5d62 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5d56:	6823      	ldr	r3, [r4, #0]
   b5d58:	4620      	mov	r0, r4
   b5d5a:	68db      	ldr	r3, [r3, #12]
    }
   b5d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5d60:	4718      	bx	r3
    }
   b5d62:	bd10      	pop	{r4, pc}

000b5d64 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b5d64:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b5d68:	b2da      	uxtb	r2, r3
   b5d6a:	2a09      	cmp	r2, #9
   b5d6c:	d801      	bhi.n	b5d72 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b5d6e:	4618      	mov	r0, r3
   b5d70:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b5d72:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b5d76:	2b05      	cmp	r3, #5
   b5d78:	d801      	bhi.n	b5d7e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b5d7a:	3857      	subs	r0, #87	; 0x57
   b5d7c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b5d7e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b5d82:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b5d84:	bf94      	ite	ls
   b5d86:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b5d88:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b5d8c:	4770      	bx	lr
	...

000b5d90 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b5d90:	b510      	push	{r4, lr}
            locked_(false) {
   b5d92:	2300      	movs	r3, #0
   b5d94:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5d96:	4b04      	ldr	r3, [pc, #16]	; (b5da8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b5d98:	4604      	mov	r4, r0
   b5d9a:	6818      	ldr	r0, [r3, #0]
   b5d9c:	f7ff fcdc 	bl	b5758 <os_mutex_recursive_lock>
        locked_ = true;
   b5da0:	2301      	movs	r3, #1
   b5da2:	7023      	strb	r3, [r4, #0]
    }
   b5da4:	4620      	mov	r0, r4
   b5da6:	bd10      	pop	{r4, pc}
   b5da8:	2003e6c0 	.word	0x2003e6c0

000b5dac <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b5dac:	b510      	push	{r4, lr}
        if (locked_) {
   b5dae:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b5db0:	4604      	mov	r4, r0
        if (locked_) {
   b5db2:	b11b      	cbz	r3, b5dbc <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5db4:	4b02      	ldr	r3, [pc, #8]	; (b5dc0 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b5db6:	6818      	ldr	r0, [r3, #0]
   b5db8:	f7ff fcd6 	bl	b5768 <os_mutex_recursive_unlock>
    }
   b5dbc:	4620      	mov	r0, r4
   b5dbe:	bd10      	pop	{r4, pc}
   b5dc0:	2003e6c0 	.word	0x2003e6c0

000b5dc4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b5dc4:	b082      	sub	sp, #8
   b5dc6:	4603      	mov	r3, r0
    address_ = addr;
   b5dc8:	6808      	ldr	r0, [r1, #0]
   b5dca:	6849      	ldr	r1, [r1, #4]
   b5dcc:	466a      	mov	r2, sp
   b5dce:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b5dd0:	466a      	mov	r2, sp
   b5dd2:	ca03      	ldmia	r2!, {r0, r1}
   b5dd4:	6018      	str	r0, [r3, #0]
}
   b5dd6:	4618      	mov	r0, r3
    address_ = addr.address_;
   b5dd8:	6059      	str	r1, [r3, #4]
}
   b5dda:	b002      	add	sp, #8
   b5ddc:	4770      	bx	lr

000b5dde <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b5dde:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b5de0:	7982      	ldrb	r2, [r0, #6]
   b5de2:	798b      	ldrb	r3, [r1, #6]
   b5de4:	429a      	cmp	r2, r3
   b5de6:	d106      	bne.n	b5df6 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b5de8:	2206      	movs	r2, #6
   b5dea:	f003 f8e8 	bl	b8fbe <memcmp>
   b5dee:	fab0 f080 	clz	r0, r0
   b5df2:	0940      	lsrs	r0, r0, #5
}
   b5df4:	bd08      	pop	{r3, pc}
    return false;
   b5df6:	2000      	movs	r0, #0
   b5df8:	e7fc      	b.n	b5df4 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b5dfa <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b5dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5dfe:	6003      	str	r3, [r0, #0]
   b5e00:	8083      	strh	r3, [r0, #4]
}
   b5e02:	2000      	movs	r0, #0
   b5e04:	4770      	bx	lr

000b5e06 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b5e06:	b508      	push	{r3, lr}
   b5e08:	4602      	mov	r2, r0
        : address_{} {
   b5e0a:	2100      	movs	r1, #0
   b5e0c:	6001      	str	r1, [r0, #0]
   b5e0e:	6041      	str	r1, [r0, #4]
    clear();
   b5e10:	f7ff fff3 	bl	b5dfa <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b5e14:	7191      	strb	r1, [r2, #6]
}
   b5e16:	4610      	mov	r0, r2
   b5e18:	bd08      	pop	{r3, pc}
	...

000b5e1c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b5e1c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b5e1e:	2301      	movs	r3, #1
   b5e20:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5e22:	4b05      	ldr	r3, [pc, #20]	; (b5e38 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b5e24:	4602      	mov	r2, r0
   b5e26:	f103 0110 	add.w	r1, r3, #16
   b5e2a:	f853 4b04 	ldr.w	r4, [r3], #4
   b5e2e:	f842 4b04 	str.w	r4, [r2], #4
   b5e32:	428b      	cmp	r3, r1
   b5e34:	d1f9      	bne.n	b5e2a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b5e36:	bd10      	pop	{r4, pc}
   b5e38:	000bb51a 	.word	0x000bb51a

000b5e3c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b5e3c:	b510      	push	{r4, lr}
    if (uuid128) {
   b5e3e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b5e40:	4604      	mov	r4, r0
    if (uuid128) {
   b5e42:	b1b1      	cbz	r1, b5e72 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b5e44:	2a01      	cmp	r2, #1
   b5e46:	f101 0210 	add.w	r2, r1, #16
   b5e4a:	d10a      	bne.n	b5e62 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b5e4c:	4601      	mov	r1, r0
   b5e4e:	f853 0b04 	ldr.w	r0, [r3], #4
   b5e52:	f841 0b04 	str.w	r0, [r1], #4
   b5e56:	4293      	cmp	r3, r2
   b5e58:	d1f9      	bne.n	b5e4e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b5e5a:	2301      	movs	r3, #1
   b5e5c:	6123      	str	r3, [r4, #16]
}
   b5e5e:	4620      	mov	r0, r4
   b5e60:	bd10      	pop	{r4, pc}
   b5e62:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b5e64:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b5e68:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b5e6c:	429a      	cmp	r2, r3
   b5e6e:	d1f9      	bne.n	b5e64 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b5e70:	e7f3      	b.n	b5e5a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b5e72:	2210      	movs	r2, #16
   b5e74:	f003 f8db 	bl	b902e <memset>
   b5e78:	e7f1      	b.n	b5e5e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b5e7a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b5e7a:	b538      	push	{r3, r4, r5, lr}
   b5e7c:	4604      	mov	r4, r0
   b5e7e:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b5e80:	461a      	mov	r2, r3
   b5e82:	f7ff ffdb 	bl	b5e3c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b5e86:	81a5      	strh	r5, [r4, #12]
}
   b5e88:	4620      	mov	r0, r4
   b5e8a:	bd38      	pop	{r3, r4, r5, pc}

000b5e8c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b5e8c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b5e8e:	6902      	ldr	r2, [r0, #16]
   b5e90:	b922      	cbnz	r2, b5e9c <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b5e92:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5e94:	3800      	subs	r0, #0
   b5e96:	bf18      	it	ne
   b5e98:	2001      	movne	r0, #1
}
   b5e9a:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5e9c:	4902      	ldr	r1, [pc, #8]	; (b5ea8 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b5e9e:	2210      	movs	r2, #16
   b5ea0:	f003 f88d 	bl	b8fbe <memcmp>
   b5ea4:	e7f6      	b.n	b5e94 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b5ea6:	bf00      	nop
   b5ea8:	000bb53a 	.word	0x000bb53a

000b5eac <_ZNK8particle7BleUuid4typeEv>:
}
   b5eac:	6900      	ldr	r0, [r0, #16]
   b5eae:	4770      	bx	lr

000b5eb0 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b5eb0:	b538      	push	{r3, r4, r5, lr}
   b5eb2:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b5eb4:	2214      	movs	r2, #20
   b5eb6:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b5eb8:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b5eba:	f003 f8b8 	bl	b902e <memset>
    if (type_ == BleUuidType::SHORT) {
   b5ebe:	6923      	ldr	r3, [r4, #16]
   b5ec0:	b91b      	cbnz	r3, b5eca <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b5ec2:	89a3      	ldrh	r3, [r4, #12]
   b5ec4:	802b      	strh	r3, [r5, #0]
}
   b5ec6:	4628      	mov	r0, r5
   b5ec8:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b5eca:	2301      	movs	r3, #1
   b5ecc:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b5ece:	4621      	mov	r1, r4
   b5ed0:	462b      	mov	r3, r5
   b5ed2:	f104 0210 	add.w	r2, r4, #16
   b5ed6:	f851 0b04 	ldr.w	r0, [r1], #4
   b5eda:	f843 0b04 	str.w	r0, [r3], #4
   b5ede:	4291      	cmp	r1, r2
   b5ee0:	d1f9      	bne.n	b5ed6 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b5ee2:	e7f0      	b.n	b5ec6 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b5ee4 <_ZNK8particle7BleUuid7shortedEv>:
}
   b5ee4:	8980      	ldrh	r0, [r0, #12]
   b5ee6:	4770      	bx	lr

000b5ee8 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b5ee8:	4770      	bx	lr

000b5eea <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b5eea:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b5eec:	6902      	ldr	r2, [r0, #16]
   b5eee:	690b      	ldr	r3, [r1, #16]
   b5ef0:	429a      	cmp	r2, r3
   b5ef2:	d106      	bne.n	b5f02 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b5ef4:	2210      	movs	r2, #16
   b5ef6:	f003 f862 	bl	b8fbe <memcmp>
   b5efa:	fab0 f080 	clz	r0, r0
   b5efe:	0940      	lsrs	r0, r0, #5
}
   b5f00:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b5f02:	2000      	movs	r0, #0
   b5f04:	e7fc      	b.n	b5f00 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b5f08 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b5f08:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b5f0a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b5f0e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5f10:	4b34      	ldr	r3, [pc, #208]	; (b5fe4 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b5f12:	460c      	mov	r4, r1
   b5f14:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5f16:	4602      	mov	r2, r0
   b5f18:	f103 0110 	add.w	r1, r3, #16
   b5f1c:	f853 0b04 	ldr.w	r0, [r3], #4
   b5f20:	f842 0b04 	str.w	r0, [r2], #4
   b5f24:	428b      	cmp	r3, r1
   b5f26:	d1f9      	bne.n	b5f1c <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b5f28:	b344      	cbz	r4, b5f7c <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b5f2a:	2124      	movs	r1, #36	; 0x24
   b5f2c:	4620      	mov	r0, r4
   b5f2e:	f003 f8e3 	bl	b90f8 <strnlen>
   b5f32:	2804      	cmp	r0, #4
   b5f34:	f04f 0500 	mov.w	r5, #0
   b5f38:	d123      	bne.n	b5f82 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b5f3a:	f8ad 5004 	strh.w	r5, [sp, #4]
   b5f3e:	af01      	add	r7, sp, #4
   b5f40:	1ca5      	adds	r5, r4, #2
   b5f42:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b5f44:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b5f48:	f7ff ff0c 	bl	b5d64 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b5f4c:	f1b0 0800 	subs.w	r8, r0, #0
   b5f50:	db12      	blt.n	b5f78 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b5f52:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b5f56:	f7ff ff05 	bl	b5d64 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b5f5a:	2800      	cmp	r0, #0
   b5f5c:	db0c      	blt.n	b5f78 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b5f5e:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b5f60:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b5f64:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b5f66:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b5f6a:	d1eb      	bne.n	b5f44 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b5f6c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b5f70:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b5f72:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5f76:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b5f78:	2300      	movs	r3, #0
   b5f7a:	6133      	str	r3, [r6, #16]
}
   b5f7c:	b002      	add	sp, #8
   b5f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b5f82:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5f86:	2124      	movs	r1, #36	; 0x24
   b5f88:	4620      	mov	r0, r4
   b5f8a:	f003 f8b5 	bl	b90f8 <strnlen>
   b5f8e:	42a8      	cmp	r0, r5
   b5f90:	d807      	bhi.n	b5fa2 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b5f92:	4642      	mov	r2, r8
   b5f94:	2100      	movs	r1, #0
   b5f96:	4630      	mov	r0, r6
}
   b5f98:	b002      	add	sp, #8
   b5f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b5f9e:	f003 b846 	b.w	b902e <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5fa2:	f1b8 0f00 	cmp.w	r8, #0
   b5fa6:	d0e9      	beq.n	b5f7c <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b5fa8:	5d60      	ldrb	r0, [r4, r5]
   b5faa:	f7ff fedb 	bl	b5d64 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b5fae:	0603      	lsls	r3, r0, #24
   b5fb0:	d415      	bmi.n	b5fde <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b5fb2:	0100      	lsls	r0, r0, #4
   b5fb4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b5fb8:	b2c7      	uxtb	r7, r0
   b5fba:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b5fbe:	2124      	movs	r1, #36	; 0x24
   b5fc0:	4620      	mov	r0, r4
   b5fc2:	f003 f899 	bl	b90f8 <strnlen>
   b5fc6:	3501      	adds	r5, #1
   b5fc8:	42a8      	cmp	r0, r5
   b5fca:	d908      	bls.n	b5fde <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b5fcc:	5d60      	ldrb	r0, [r4, r5]
   b5fce:	f7ff fec9 	bl	b5d64 <_ZN8particle11hexToNibbleEc>
   b5fd2:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b5fd4:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b5fd6:	bfa4      	itt	ge
   b5fd8:	4338      	orrge	r0, r7
   b5fda:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5fde:	3501      	adds	r5, #1
   b5fe0:	e7d1      	b.n	b5f86 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b5fe2:	bf00      	nop
   b5fe4:	000bb51a 	.word	0x000bb51a

000b5fe8 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b5fe8:	b513      	push	{r0, r1, r4, lr}
   b5fea:	4604      	mov	r4, r0
   b5fec:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b5fee:	f7ff ff15 	bl	b5e1c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b5ff2:	4620      	mov	r0, r4
   b5ff4:	9901      	ldr	r1, [sp, #4]
   b5ff6:	f7ff ff87 	bl	b5f08 <_ZN8particle7BleUuid9constructEPKc>
}
   b5ffa:	4620      	mov	r0, r4
   b5ffc:	b002      	add	sp, #8
   b5ffe:	bd10      	pop	{r4, pc}

000b6000 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b6000:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b6002:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6006:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b6008:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b600a:	8043      	strh	r3, [r0, #2]
   b600c:	220e      	movs	r2, #14
   b600e:	4629      	mov	r1, r5
   b6010:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b6012:	7105      	strb	r5, [r0, #4]
   b6014:	3006      	adds	r0, #6
   b6016:	f003 f80a 	bl	b902e <memset>
   b601a:	f104 0014 	add.w	r0, r4, #20
   b601e:	f7ff fefd 	bl	b5e1c <_ZN8particle7BleUuidC1Ev>
   b6022:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6026:	f7ff fef9 	bl	b5e1c <_ZN8particle7BleUuidC1Ev>
   b602a:	4904      	ldr	r1, [pc, #16]	; (b603c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b602c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6030:	f001 fa67 	bl	b7502 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b6034:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b6036:	4620      	mov	r0, r4
   b6038:	bd38      	pop	{r3, r4, r5, pc}
   b603a:	bf00      	nop
   b603c:	000bb335 	.word	0x000bb335

000b6040 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b6040:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b6042:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b6046:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b604a:	4293      	cmp	r3, r2
   b604c:	4618      	mov	r0, r3
   b604e:	d006      	beq.n	b605e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b6050:	6804      	ldr	r4, [r0, #0]
   b6052:	8824      	ldrh	r4, [r4, #0]
   b6054:	428c      	cmp	r4, r1
   b6056:	f103 0308 	add.w	r3, r3, #8
   b605a:	d1f6      	bne.n	b604a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b605c:	bd10      	pop	{r4, pc}
        return nullptr;
   b605e:	2000      	movs	r0, #0
   b6060:	e7fc      	b.n	b605c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b6064 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b6064:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6066:	4606      	mov	r6, r0
   b6068:	b085      	sub	sp, #20
   b606a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b606c:	460d      	mov	r5, r1
   b606e:	2900      	cmp	r1, #0
   b6070:	d050      	beq.n	b6114 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b6072:	2a00      	cmp	r2, #0
   b6074:	d04e      	beq.n	b6114 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6076:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b6078:	7823      	ldrb	r3, [r4, #0]
   b607a:	2af4      	cmp	r2, #244	; 0xf4
   b607c:	bf28      	it	cs
   b607e:	22f4      	movcs	r2, #244	; 0xf4
   b6080:	b343      	cbz	r3, b60d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b6082:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b6084:	0798      	lsls	r0, r3, #30
   b6086:	d509      	bpl.n	b609c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b6088:	89a0      	ldrh	r0, [r4, #12]
   b608a:	9203      	str	r2, [sp, #12]
   b608c:	2300      	movs	r3, #0
   b608e:	f7ff fb15 	bl	b56bc <hal_ble_gatt_server_set_characteristic_value>
   b6092:	2800      	cmp	r0, #0
   b6094:	9a03      	ldr	r2, [sp, #12]
   b6096:	da03      	bge.n	b60a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b6098:	b005      	add	sp, #20
   b609a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b609c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b60a0:	6834      	ldr	r4, [r6, #0]
   b60a2:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b60a4:	06d9      	lsls	r1, r3, #27
   b60a6:	d509      	bpl.n	b60bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b60a8:	2f01      	cmp	r7, #1
   b60aa:	d007      	beq.n	b60bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b60ac:	89a0      	ldrh	r0, [r4, #12]
   b60ae:	2300      	movs	r3, #0
   b60b0:	4629      	mov	r1, r5
}
   b60b2:	b005      	add	sp, #20
   b60b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b60b8:	f7ff bb32 	b.w	b5720 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b60bc:	069b      	lsls	r3, r3, #26
   b60be:	d5eb      	bpl.n	b6098 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b60c0:	2f02      	cmp	r7, #2
   b60c2:	d0e9      	beq.n	b6098 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b60c4:	89a0      	ldrh	r0, [r4, #12]
   b60c6:	2300      	movs	r3, #0
   b60c8:	4629      	mov	r1, r5
}
   b60ca:	b005      	add	sp, #20
   b60cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b60d0:	f7ff bb30 	b.w	b5734 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b60d4:	8860      	ldrh	r0, [r4, #2]
   b60d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b60da:	4288      	cmp	r0, r1
   b60dc:	d01c      	beq.n	b6118 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b60de:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b60e0:	074e      	lsls	r6, r1, #29
   b60e2:	d501      	bpl.n	b60e8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b60e4:	2f01      	cmp	r7, #1
   b60e6:	d104      	bne.n	b60f2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b60e8:	070b      	lsls	r3, r1, #28
   b60ea:	d409      	bmi.n	b6100 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b60ec:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b60f0:	e7d2      	b.n	b6098 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b60f2:	89a1      	ldrh	r1, [r4, #12]
   b60f4:	9300      	str	r3, [sp, #0]
   b60f6:	4613      	mov	r3, r2
   b60f8:	462a      	mov	r2, r5
   b60fa:	f7ff faf3 	bl	b56e4 <hal_ble_gatt_client_write_without_response>
   b60fe:	e7cb      	b.n	b6098 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6100:	2f02      	cmp	r7, #2
   b6102:	d0f3      	beq.n	b60ec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6104:	2300      	movs	r3, #0
   b6106:	89a1      	ldrh	r1, [r4, #12]
   b6108:	9300      	str	r3, [sp, #0]
   b610a:	4613      	mov	r3, r2
   b610c:	462a      	mov	r2, r5
   b610e:	f7ff fadf 	bl	b56d0 <hal_ble_gatt_client_write_with_response>
   b6112:	e7c1      	b.n	b6098 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b6114:	4802      	ldr	r0, [pc, #8]	; (b6120 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b6116:	e7bf      	b.n	b6098 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b6118:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b611c:	e7bc      	b.n	b6098 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b611e:	bf00      	nop
   b6120:	fffffef2 	.word	0xfffffef2

000b6124 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b6124:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6126:	460c      	mov	r4, r1
   b6128:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b612a:	21f4      	movs	r1, #244	; 0xf4
   b612c:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b612e:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6130:	f002 ffe2 	bl	b90f8 <strnlen>
   b6134:	9b01      	ldr	r3, [sp, #4]
   b6136:	4602      	mov	r2, r0
   b6138:	4621      	mov	r1, r4
   b613a:	4628      	mov	r0, r5
}
   b613c:	b003      	add	sp, #12
   b613e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b6142:	f7ff bf8f 	b.w	b6064 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b6148 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b6148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b614c:	2600      	movs	r6, #0
   b614e:	6006      	str	r6, [r0, #0]
   b6150:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6152:	2028      	movs	r0, #40	; 0x28
   b6154:	460c      	mov	r4, r1
   b6156:	f7fd ff9e 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b615a:	1e05      	subs	r5, r0, #0
   b615c:	f105 080c 	add.w	r8, r5, #12
   b6160:	d00f      	beq.n	b6182 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b6162:	2301      	movs	r3, #1
   b6164:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6168:	4b08      	ldr	r3, [pc, #32]	; (b618c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b616a:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b616c:	4640      	mov	r0, r8
   b616e:	f7ff fe55 	bl	b5e1c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b6172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b6174:	622e      	str	r6, [r5, #32]
   b6176:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b617a:	4646      	mov	r6, r8
   b617c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b617e:	6823      	ldr	r3, [r4, #0]
   b6180:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b6182:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6186:	4638      	mov	r0, r7
   b6188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b618c:	000bb4dc 	.word	0x000bb4dc

000b6190 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b6190:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6192:	2500      	movs	r5, #0
   b6194:	6005      	str	r5, [r0, #0]
   b6196:	4606      	mov	r6, r0
   b6198:	2030      	movs	r0, #48	; 0x30
   b619a:	f7fd ff7c 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b619e:	4604      	mov	r4, r0
   b61a0:	b188      	cbz	r0, b61c6 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b61a2:	2301      	movs	r3, #1
   b61a4:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b61a8:	4b09      	ldr	r3, [pc, #36]	; (b61d0 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b61aa:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b61ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b61b0:	8183      	strh	r3, [r0, #12]
   b61b2:	300e      	adds	r0, #14
   b61b4:	f7ff fe27 	bl	b5e06 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b61b8:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b61bc:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b61c0:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b61c4:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b61c6:	6074      	str	r4, [r6, #4]
   b61c8:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b61ca:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b61cc:	4630      	mov	r0, r6
   b61ce:	bd70      	pop	{r4, r5, r6, pc}
   b61d0:	000bb4f8 	.word	0x000bb4f8

000b61d4 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b61d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b61d6:	460d      	mov	r5, r1
   b61d8:	4604      	mov	r4, r0
    WiringBleLock lk;
   b61da:	a801      	add	r0, sp, #4
   b61dc:	f7ff fdd8 	bl	b5d90 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b61e0:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b61e2:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b61e6:	6023      	str	r3, [r4, #0]
   b61e8:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b61ec:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b61ee:	a801      	add	r0, sp, #4
   b61f0:	f7ff fddc 	bl	b5dac <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b61f4:	4620      	mov	r0, r4
   b61f6:	b003      	add	sp, #12
   b61f8:	bd30      	pop	{r4, r5, pc}

000b61fa <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b61fa:	b530      	push	{r4, r5, lr}
   b61fc:	4605      	mov	r5, r0
   b61fe:	b087      	sub	sp, #28
   b6200:	460c      	mov	r4, r1
    WiringBleLock lk;
   b6202:	a801      	add	r0, sp, #4
   b6204:	f7ff fdc4 	bl	b5d90 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b6208:	682a      	ldr	r2, [r5, #0]
   b620a:	6823      	ldr	r3, [r4, #0]
   b620c:	8812      	ldrh	r2, [r2, #0]
   b620e:	881b      	ldrh	r3, [r3, #0]
   b6210:	429a      	cmp	r2, r3
   b6212:	d10d      	bne.n	b6230 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b6214:	4629      	mov	r1, r5
   b6216:	a802      	add	r0, sp, #8
   b6218:	f7ff ffdc 	bl	b61d4 <_ZNK8particle13BlePeerDevice7addressEv>
   b621c:	4621      	mov	r1, r4
   b621e:	a804      	add	r0, sp, #16
   b6220:	f7ff ffd8 	bl	b61d4 <_ZNK8particle13BlePeerDevice7addressEv>
   b6224:	a904      	add	r1, sp, #16
   b6226:	a802      	add	r0, sp, #8
   b6228:	f7ff fdd9 	bl	b5dde <_ZNK8particle10BleAddresseqERKS0_>
   b622c:	4604      	mov	r4, r0
   b622e:	b900      	cbnz	r0, b6232 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b6230:	2400      	movs	r4, #0
    WiringBleLock lk;
   b6232:	a801      	add	r0, sp, #4
   b6234:	f7ff fdba 	bl	b5dac <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6238:	4620      	mov	r0, r4
   b623a:	b007      	add	sp, #28
   b623c:	bd30      	pop	{r4, r5, pc}
	...

000b6240 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b6240:	b510      	push	{r4, lr}
   b6242:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b6244:	2064      	movs	r0, #100	; 0x64
   b6246:	f7fd ff26 	bl	b4096 <_Znwj>
   b624a:	b168      	cbz	r0, b6268 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b624c:	2300      	movs	r3, #0
   b624e:	e9c0 3300 	strd	r3, r3, [r0]
   b6252:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6256:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b625a:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b625e:	6203      	str	r3, [r0, #32]
   b6260:	62c3      	str	r3, [r0, #44]	; 0x2c
   b6262:	63c3      	str	r3, [r0, #60]	; 0x3c
   b6264:	64c3      	str	r3, [r0, #76]	; 0x4c
   b6266:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6268:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b626a:	b920      	cbnz	r0, b6276 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b626c:	4a0a      	ldr	r2, [pc, #40]	; (b6298 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b626e:	490b      	ldr	r1, [pc, #44]	; (b629c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b6270:	200a      	movs	r0, #10
   b6272:	f7ff fbc1 	bl	b59f8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b6276:	2000      	movs	r0, #0
   b6278:	f7ff f9ec 	bl	b5654 <hal_ble_stack_init>
   b627c:	b120      	cbz	r0, b6288 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b627e:	4a06      	ldr	r2, [pc, #24]	; (b6298 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6280:	4907      	ldr	r1, [pc, #28]	; (b62a0 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b6282:	200a      	movs	r0, #10
   b6284:	f7ff fbb8 	bl	b59f8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b6288:	6821      	ldr	r1, [r4, #0]
   b628a:	4806      	ldr	r0, [pc, #24]	; (b62a4 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b628c:	2200      	movs	r2, #0
   b628e:	f7ff fa3d 	bl	b570c <hal_ble_set_callback_on_periph_link_events>
}
   b6292:	4620      	mov	r0, r4
   b6294:	bd10      	pop	{r4, pc}
   b6296:	bf00      	nop
   b6298:	000b5789 	.word	0x000b5789
   b629c:	000bb36c 	.word	0x000bb36c
   b62a0:	000bb3aa 	.word	0x000bb3aa
   b62a4:	000b6829 	.word	0x000b6829

000b62a8 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b62a8:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b62aa:	4c0a      	ldr	r4, [pc, #40]	; (b62d4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b62ac:	7823      	ldrb	r3, [r4, #0]
   b62ae:	f3bf 8f5b 	dmb	ish
   b62b2:	07db      	lsls	r3, r3, #31
   b62b4:	d40c      	bmi.n	b62d0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b62b6:	4620      	mov	r0, r4
   b62b8:	f7fd fef3 	bl	b40a2 <__cxa_guard_acquire>
   b62bc:	b140      	cbz	r0, b62d0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b62be:	4806      	ldr	r0, [pc, #24]	; (b62d8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b62c0:	f7ff ffbe 	bl	b6240 <_ZN8particle14BleLocalDeviceC1Ev>
   b62c4:	4620      	mov	r0, r4
   b62c6:	f7fd fef1 	bl	b40ac <__cxa_guard_release>
   b62ca:	4804      	ldr	r0, [pc, #16]	; (b62dc <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b62cc:	f002 fe6a 	bl	b8fa4 <atexit>
    return instance;
}
   b62d0:	4801      	ldr	r0, [pc, #4]	; (b62d8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b62d2:	bd10      	pop	{r4, pc}
   b62d4:	2003e6b8 	.word	0x2003e6b8
   b62d8:	2003e6c4 	.word	0x2003e6c4
   b62dc:	000b64f5 	.word	0x000b64f5

000b62e0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b62e0:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b62e2:	6803      	ldr	r3, [r0, #0]
   b62e4:	3b09      	subs	r3, #9
   b62e6:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b62e8:	b08d      	sub	sp, #52	; 0x34
   b62ea:	4604      	mov	r4, r0
   b62ec:	460d      	mov	r5, r1
    switch (event->type) {
   b62ee:	d811      	bhi.n	b6314 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b62f0:	f7ff ffda 	bl	b62a8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b62f4:	88a1      	ldrh	r1, [r4, #4]
   b62f6:	6800      	ldr	r0, [r0, #0]
   b62f8:	f7ff fea2 	bl	b6040 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b62fc:	4603      	mov	r3, r0
   b62fe:	b958      	cbnz	r0, b6318 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b6300:	2220      	movs	r2, #32
   b6302:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b6306:	4a0b      	ldr	r2, [pc, #44]	; (b6334 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b6308:	9200      	str	r2, [sp, #0]
   b630a:	490b      	ldr	r1, [pc, #44]	; (b6338 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b630c:	aa04      	add	r2, sp, #16
   b630e:	2032      	movs	r0, #50	; 0x32
   b6310:	f7ff fb7a 	bl	b5a08 <log_message>
}
   b6314:	b00d      	add	sp, #52	; 0x34
   b6316:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b6318:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b631a:	2a00      	cmp	r2, #0
   b631c:	d0fa      	beq.n	b6314 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b631e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6322:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b6326:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b632a:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b632c:	aa04      	add	r2, sp, #16
   b632e:	a903      	add	r1, sp, #12
   b6330:	47a0      	blx	r4
}
   b6332:	e7ef      	b.n	b6314 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b6334:	000bb3ec 	.word	0x000bb3ec
   b6338:	000bb383 	.word	0x000bb383

000b633c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b633c:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b633e:	2000      	movs	r0, #0
   b6340:	f7ff f988 	bl	b5654 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b6344:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6348:	bd08      	pop	{r3, pc}

000b634a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b634a:	b919      	cbnz	r1, b6354 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b634c:	460a      	mov	r2, r1
   b634e:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b6350:	f7ff b988 	b.w	b5664 <hal_ble_gap_set_advertising_data>
   b6354:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6358:	2200      	movs	r2, #0
   b635a:	e7f9      	b.n	b6350 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b635c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b635c:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b635e:	1e14      	subs	r4, r2, #0
   b6360:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6362:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b6364:	db02      	blt.n	b636c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b6366:	1862      	adds	r2, r4, r1
   b6368:	429a      	cmp	r2, r3
   b636a:	dd00      	ble.n	b636e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b636c:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b636e:	682a      	ldr	r2, [r5, #0]
   b6370:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b6372:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b6374:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6376:	1a52      	subs	r2, r2, r1
   b6378:	f002 fe3f 	bl	b8ffa <memmove>
    size_ -= n;
   b637c:	686a      	ldr	r2, [r5, #4]
   b637e:	1b12      	subs	r2, r2, r4
   b6380:	606a      	str	r2, [r5, #4]
}
   b6382:	bd38      	pop	{r3, r4, r5, pc}

000b6384 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6384:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b6386:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6388:	4604      	mov	r4, r0
   b638a:	460d      	mov	r5, r1
   b638c:	ab01      	add	r3, sp, #4
   b638e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6392:	f7ff fc73 	bl	b5c7c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b6396:	4602      	mov	r2, r0
   b6398:	b138      	cbz	r0, b63aa <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b639a:	9901      	ldr	r1, [sp, #4]
   b639c:	4620      	mov	r0, r4
   b639e:	f7ff ffdd 	bl	b635c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b63a2:	4629      	mov	r1, r5
   b63a4:	4620      	mov	r0, r4
   b63a6:	f7ff ffed 	bl	b6384 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b63aa:	b003      	add	sp, #12
   b63ac:	bd30      	pop	{r4, r5, pc}

000b63ae <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b63ae:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b63b0:	460c      	mov	r4, r1
   b63b2:	b929      	cbnz	r1, b63c0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b63b4:	460a      	mov	r2, r1
   b63b6:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b63b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b63bc:	f7ff b95a 	b.w	b5674 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b63c0:	2101      	movs	r1, #1
   b63c2:	4620      	mov	r0, r4
   b63c4:	f7ff ffde 	bl	b6384 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b63c8:	e9d4 0100 	ldrd	r0, r1, [r4]
   b63cc:	2200      	movs	r2, #0
   b63ce:	e7f3      	b.n	b63b8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b63d0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b63d0:	b538      	push	{r3, r4, r5, lr}
   b63d2:	4604      	mov	r4, r0
   b63d4:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b63d6:	f7ff ffb8 	bl	b634a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b63da:	2800      	cmp	r0, #0
   b63dc:	db0a      	blt.n	b63f4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b63de:	4629      	mov	r1, r5
   b63e0:	4620      	mov	r0, r4
   b63e2:	f7ff ffe4 	bl	b63ae <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b63e6:	2800      	cmp	r0, #0
   b63e8:	db04      	blt.n	b63f4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b63ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b63ee:	2000      	movs	r0, #0
   b63f0:	f7ff b948 	b.w	b5684 <hal_ble_gap_start_advertising>
}
   b63f4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b63f8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b63f8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b63fa:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b63fc:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b63fe:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6400:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b6402:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6404:	f7fd fe47 	bl	b4096 <_Znwj>
   b6408:	b118      	cbz	r0, b6412 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b640a:	682b      	ldr	r3, [r5, #0]
   b640c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b640e:	686b      	ldr	r3, [r5, #4]
   b6410:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b6412:	4b03      	ldr	r3, [pc, #12]	; (b6420 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b6414:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6416:	4b03      	ldr	r3, [pc, #12]	; (b6424 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6418:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b641a:	60a3      	str	r3, [r4, #8]
      }
   b641c:	4620      	mov	r0, r4
   b641e:	bd38      	pop	{r3, r4, r5, pc}
   b6420:	000b5cbd 	.word	0x000b5cbd
   b6424:	000b5cd5 	.word	0x000b5cd5

000b6428 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b6428:	680b      	ldr	r3, [r1, #0]
   b642a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b642c:	b113      	cbz	r3, b6434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b642e:	685a      	ldr	r2, [r3, #4]
   b6430:	3201      	adds	r2, #1
   b6432:	605a      	str	r2, [r3, #4]
      }
   b6434:	4770      	bx	lr

000b6436 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b6436:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6438:	f851 3b04 	ldr.w	r3, [r1], #4
   b643c:	4604      	mov	r4, r0
   b643e:	f840 3b04 	str.w	r3, [r0], #4
   b6442:	f7ff fff1 	bl	b6428 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b6446:	6823      	ldr	r3, [r4, #0]
   b6448:	b90b      	cbnz	r3, b644e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b644a:	f7ff fc2d 	bl	b5ca8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b644e:	4620      	mov	r0, r4
   b6450:	bd10      	pop	{r4, pc}

000b6452 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6452:	b510      	push	{r4, lr}
   b6454:	f851 3b04 	ldr.w	r3, [r1], #4
   b6458:	4604      	mov	r4, r0
   b645a:	f840 3b04 	str.w	r3, [r0], #4
   b645e:	f7ff ffe3 	bl	b6428 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6462:	4620      	mov	r0, r4
   b6464:	bd10      	pop	{r4, pc}

000b6466 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6466:	b510      	push	{r4, lr}
   b6468:	f851 3b04 	ldr.w	r3, [r1], #4
   b646c:	4604      	mov	r4, r0
   b646e:	f840 3b04 	str.w	r3, [r0], #4
   b6472:	f7ff ffd9 	bl	b6428 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6476:	4620      	mov	r0, r4
   b6478:	bd10      	pop	{r4, pc}

000b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b647a:	b510      	push	{r4, lr}
   b647c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b647e:	6800      	ldr	r0, [r0, #0]
   b6480:	b108      	cbz	r0, b6486 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b6482:	f7ff fc5b 	bl	b5d3c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b6486:	4620      	mov	r0, r4
   b6488:	bd10      	pop	{r4, pc}

000b648a <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b648a:	b510      	push	{r4, lr}
   b648c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b648e:	3004      	adds	r0, #4
   b6490:	f7ff fff3 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6494:	4620      	mov	r0, r4
   b6496:	bd10      	pop	{r4, pc}

000b6498 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6498:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b649a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b649e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b64a0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b64a4:	42ae      	cmp	r6, r5
   b64a6:	d004      	beq.n	b64b2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b64a8:	1d28      	adds	r0, r5, #4
   b64aa:	f7ff ffe6 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b64ae:	3508      	adds	r5, #8
   b64b0:	e7f8      	b.n	b64a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b64b2:	6820      	ldr	r0, [r4, #0]
   b64b4:	f7ff fb44 	bl	b5b40 <free>
}
   b64b8:	4620      	mov	r0, r4
   b64ba:	bd70      	pop	{r4, r5, r6, pc}

000b64bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b64bc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b64be:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b64c2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b64c4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b64c8:	42ae      	cmp	r6, r5
   b64ca:	d004      	beq.n	b64d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b64cc:	1d28      	adds	r0, r5, #4
   b64ce:	f7ff ffd4 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b64d2:	3508      	adds	r5, #8
   b64d4:	e7f8      	b.n	b64c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b64d6:	6820      	ldr	r0, [r4, #0]
   b64d8:	f7ff fb32 	bl	b5b40 <free>
}
   b64dc:	4620      	mov	r0, r4
   b64de:	bd70      	pop	{r4, r5, r6, pc}

000b64e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b64e0:	b510      	push	{r4, lr}
   b64e2:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b64e4:	3024      	adds	r0, #36	; 0x24
   b64e6:	f7ff ffe9 	bl	b64bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b64ea:	f104 0018 	add.w	r0, r4, #24
   b64ee:	f7ff ffd3 	bl	b6498 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b64f2:	bd10      	pop	{r4, pc}

000b64f4 <__tcf_0>:
    static BleLocalDevice instance;
   b64f4:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b64f6:	4b17      	ldr	r3, [pc, #92]	; (b6554 <__tcf_0+0x60>)
   b64f8:	681c      	ldr	r4, [r3, #0]
   b64fa:	b354      	cbz	r4, b6552 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b64fc:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6500:	f7ff fc08 	bl	b5d14 <_ZNSt14_Function_baseD1Ev>
   b6504:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6508:	f7ff fc04 	bl	b5d14 <_ZNSt14_Function_baseD1Ev>
   b650c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6510:	f7ff fc00 	bl	b5d14 <_ZNSt14_Function_baseD1Ev>
   b6514:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6518:	f7ff fbfc 	bl	b5d14 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b651c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b6520:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6524:	42ae      	cmp	r6, r5
   b6526:	d004      	beq.n	b6532 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b6528:	1d28      	adds	r0, r5, #4
   b652a:	f7ff ffa6 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b652e:	3508      	adds	r5, #8
   b6530:	e7f8      	b.n	b6524 <__tcf_0+0x30>
    ::free(ptr);
   b6532:	69a0      	ldr	r0, [r4, #24]
   b6534:	f7ff fb04 	bl	b5b40 <free>
    ~BleLocalDeviceImpl() = default;
   b6538:	f104 000c 	add.w	r0, r4, #12
   b653c:	f7ff ffbe 	bl	b64bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6540:	4620      	mov	r0, r4
   b6542:	f7ff ffa9 	bl	b6498 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b6546:	4620      	mov	r0, r4
   b6548:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b654a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b654e:	f7fd bda6 	b.w	b409e <_ZdlPvj>
   b6552:	bd70      	pop	{r4, r5, r6, pc}
   b6554:	2003e6c4 	.word	0x2003e6c4

000b6558 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b6558:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b655a:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b655c:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b6560:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b6564:	6803      	ldr	r3, [r0, #0]
   b6566:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6568:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b656a:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b656c:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b656e:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b6570:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b6572:	f7ff ff82 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b6576:	b002      	add	sp, #8
   b6578:	bd10      	pop	{r4, pc}

000b657a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b657a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b657c:	b510      	push	{r4, lr}
      if (_M_empty())
   b657e:	b90a      	cbnz	r2, b6584 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b6580:	f001 fdfa 	bl	b8178 <_ZSt25__throw_bad_function_callv>
    }
   b6584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6588:	68c3      	ldr	r3, [r0, #12]
   b658a:	4718      	bx	r3

000b658c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b658c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b658e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b6590:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b6592:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b6594:	dd03      	ble.n	b659e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b6596:	f7ff fadb 	bl	b5b50 <realloc>
            if (!d) {
   b659a:	b918      	cbnz	r0, b65a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b659c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b659e:	f7ff facf 	bl	b5b40 <free>
        T* d = nullptr;
   b65a2:	2000      	movs	r0, #0
        data_ = d;
   b65a4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b65a6:	60a5      	str	r5, [r4, #8]
        return true;
   b65a8:	2001      	movs	r0, #1
   b65aa:	e7f7      	b.n	b659c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b65ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b65ac:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b65ae:	6883      	ldr	r3, [r0, #8]
   b65b0:	428b      	cmp	r3, r1
   b65b2:	da02      	bge.n	b65ba <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b65b4:	f7ff ffea 	bl	b658c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b65b8:	bd08      	pop	{r3, pc}
    return true;
   b65ba:	2001      	movs	r0, #1
   b65bc:	e7fc      	b.n	b65b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b65be <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b65be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b65c2:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b65c4:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b65c6:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b65c8:	4419      	add	r1, r3
   b65ca:	6883      	ldr	r3, [r0, #8]
   b65cc:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b65ce:	4604      	mov	r4, r0
   b65d0:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b65d2:	dc12      	bgt.n	b65fa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b65d4:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b65d6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b65d8:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b65da:	1bd2      	subs	r2, r2, r7
   b65dc:	4631      	mov	r1, r6
   b65de:	1970      	adds	r0, r6, r5
   b65e0:	f002 fd0b 	bl	b8ffa <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b65e4:	462a      	mov	r2, r5
   b65e6:	4641      	mov	r1, r8
   b65e8:	4630      	mov	r0, r6
   b65ea:	f002 fcf8 	bl	b8fde <memcpy>
    size_ += n;
   b65ee:	6863      	ldr	r3, [r4, #4]
   b65f0:	442b      	add	r3, r5
   b65f2:	6063      	str	r3, [r4, #4]
    return true;
   b65f4:	2001      	movs	r0, #1
}
   b65f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b65fa:	f7ff ffc7 	bl	b658c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b65fe:	2800      	cmp	r0, #0
   b6600:	d1e8      	bne.n	b65d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b6602:	e7f8      	b.n	b65f6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b6604 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6606:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6608:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b660c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b660e:	4604      	mov	r4, r0
   b6610:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6612:	da0b      	bge.n	b662c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b6614:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6616:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6618:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b661a:	1b52      	subs	r2, r2, r5
   b661c:	1c48      	adds	r0, r1, #1
   b661e:	f002 fcec 	bl	b8ffa <memmove>
    new(p) T(std::move(value));
   b6622:	557e      	strb	r6, [r7, r5]
    ++size_;
   b6624:	6863      	ldr	r3, [r4, #4]
   b6626:	3301      	adds	r3, #1
   b6628:	6063      	str	r3, [r4, #4]
}
   b662a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b662c:	3101      	adds	r1, #1
   b662e:	f7ff ffad 	bl	b658c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6632:	2800      	cmp	r0, #0
   b6634:	d1ee      	bne.n	b6614 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b6636:	e7f8      	b.n	b662a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b6638 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6638:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b663a:	6841      	ldr	r1, [r0, #4]
   b663c:	f7ff bfe2 	b.w	b6604 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b6640 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6640:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6644:	4604      	mov	r4, r0
   b6646:	461d      	mov	r5, r3
   b6648:	460f      	mov	r7, r1
   b664a:	ab01      	add	r3, sp, #4
   b664c:	4690      	mov	r8, r2
   b664e:	460a      	mov	r2, r1
   b6650:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6654:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b6658:	f7ff fb10 	bl	b5c7c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b665c:	1cae      	adds	r6, r5, #2
   b665e:	6863      	ldr	r3, [r4, #4]
   b6660:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b6662:	f1b9 0f00 	cmp.w	r9, #0
   b6666:	d126      	bne.n	b66b6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b6668:	b328      	cbz	r0, b66b6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b666a:	4433      	add	r3, r6
   b666c:	1a1b      	subs	r3, r3, r0
   b666e:	2bff      	cmp	r3, #255	; 0xff
   b6670:	d809      	bhi.n	b6686 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b6672:	9901      	ldr	r1, [sp, #4]
   b6674:	4620      	mov	r0, r4
   b6676:	f7ff fe71 	bl	b635c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b667a:	6861      	ldr	r1, [r4, #4]
   b667c:	4620      	mov	r0, r4
   b667e:	4431      	add	r1, r6
   b6680:	f7ff ff94 	bl	b65ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b6684:	b918      	cbnz	r0, b668e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b6686:	6860      	ldr	r0, [r4, #4]
}
   b6688:	b003      	add	sp, #12
   b668a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b668e:	1c6a      	adds	r2, r5, #1
   b6690:	9901      	ldr	r1, [sp, #4]
   b6692:	b2d2      	uxtb	r2, r2
   b6694:	4620      	mov	r0, r4
   b6696:	f7ff ffb5 	bl	b6604 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b669a:	9901      	ldr	r1, [sp, #4]
   b669c:	463a      	mov	r2, r7
   b669e:	3101      	adds	r1, #1
   b66a0:	4620      	mov	r0, r4
   b66a2:	f7ff ffaf 	bl	b6604 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b66a6:	9901      	ldr	r1, [sp, #4]
   b66a8:	462b      	mov	r3, r5
   b66aa:	4642      	mov	r2, r8
   b66ac:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b66ae:	4620      	mov	r0, r4
   b66b0:	f7ff ff85 	bl	b65be <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b66b4:	e7e7      	b.n	b6686 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b66b6:	18f1      	adds	r1, r6, r3
   b66b8:	29ff      	cmp	r1, #255	; 0xff
   b66ba:	d8e4      	bhi.n	b6686 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b66bc:	4620      	mov	r0, r4
   b66be:	f7ff ff75 	bl	b65ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b66c2:	2800      	cmp	r0, #0
   b66c4:	d0df      	beq.n	b6686 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b66c6:	1c69      	adds	r1, r5, #1
   b66c8:	b2c9      	uxtb	r1, r1
   b66ca:	4620      	mov	r0, r4
   b66cc:	f7ff ffb4 	bl	b6638 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b66d0:	4639      	mov	r1, r7
   b66d2:	4620      	mov	r0, r4
   b66d4:	f7ff ffb0 	bl	b6638 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b66d8:	6861      	ldr	r1, [r4, #4]
   b66da:	462b      	mov	r3, r5
   b66dc:	4642      	mov	r2, r8
   b66de:	e7e6      	b.n	b66ae <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b66e0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b66e0:	b430      	push	{r4, r5}
   b66e2:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b66e6:	b11a      	cbz	r2, b66f0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b66e8:	9502      	str	r5, [sp, #8]
}
   b66ea:	bc30      	pop	{r4, r5}
   b66ec:	f7ff bfa8 	b.w	b6640 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b66f0:	6840      	ldr	r0, [r0, #4]
}
   b66f2:	bc30      	pop	{r4, r5}
   b66f4:	4770      	bx	lr

000b66f6 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b66f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b66f8:	2300      	movs	r3, #0
   b66fa:	e9c0 3300 	strd	r3, r3, [r0]
   b66fe:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6700:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6702:	9300      	str	r3, [sp, #0]
   b6704:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6706:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b670a:	4619      	mov	r1, r3
   b670c:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b6710:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6712:	f7ff ffe5 	bl	b66e0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b6716:	4620      	mov	r0, r4
   b6718:	b004      	add	sp, #16
   b671a:	bd10      	pop	{r4, pc}

000b671c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b671c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b671e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6720:	4604      	mov	r4, r0
   b6722:	460d      	mov	r5, r1
   b6724:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6726:	d914      	bls.n	b6752 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6728:	4290      	cmp	r0, r2
   b672a:	d213      	bcs.n	b6754 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b672c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6730:	1a75      	subs	r5, r6, r1
   b6732:	f1a1 0708 	sub.w	r7, r1, #8
   b6736:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6738:	42b7      	cmp	r7, r6
   b673a:	d018      	beq.n	b676e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b673c:	b11c      	cbz	r4, b6746 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b673e:	4631      	mov	r1, r6
   b6740:	4620      	mov	r0, r4
   b6742:	f7ff fe90 	bl	b6466 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b6746:	1d30      	adds	r0, r6, #4
   b6748:	f7ff fe97 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b674c:	3e08      	subs	r6, #8
   b674e:	3c08      	subs	r4, #8
   b6750:	e7f2      	b.n	b6738 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6752:	d00c      	beq.n	b676e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6754:	42b5      	cmp	r5, r6
   b6756:	d00a      	beq.n	b676e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6758:	b11c      	cbz	r4, b6762 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b675a:	4629      	mov	r1, r5
   b675c:	4620      	mov	r0, r4
   b675e:	f7ff fe82 	bl	b6466 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6762:	1d28      	adds	r0, r5, #4
   b6764:	f7ff fe89 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6768:	3508      	adds	r5, #8
   b676a:	3408      	adds	r4, #8
   b676c:	e7f2      	b.n	b6754 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b676e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6770 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6772:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6774:	6846      	ldr	r6, [r0, #4]
   b6776:	4668      	mov	r0, sp
   b6778:	f7ff fe75 	bl	b6466 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b677c:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b6780:	429f      	cmp	r7, r3
   b6782:	db12      	blt.n	b67aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b6784:	3701      	adds	r7, #1
        if (n > 0) {
   b6786:	2f00      	cmp	r7, #0
   b6788:	dd29      	ble.n	b67de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b678a:	00f8      	lsls	r0, r7, #3
   b678c:	f7ff f9d0 	bl	b5b30 <malloc>
            if (!d) {
   b6790:	4605      	mov	r5, r0
   b6792:	b1f0      	cbz	r0, b67d2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b6794:	e9d4 1200 	ldrd	r1, r2, [r4]
   b6798:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b679c:	f7ff ffbe 	bl	b671c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b67a0:	6820      	ldr	r0, [r4, #0]
   b67a2:	f7ff f9cd 	bl	b5b40 <free>
        data_ = d;
   b67a6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b67a8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b67aa:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b67ac:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b67ae:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b67b2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b67b6:	4631      	mov	r1, r6
   b67b8:	f106 0008 	add.w	r0, r6, #8
   b67bc:	f7ff ffae 	bl	b671c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b67c0:	b11e      	cbz	r6, b67ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b67c2:	4669      	mov	r1, sp
   b67c4:	4630      	mov	r0, r6
   b67c6:	f7ff fe4e 	bl	b6466 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b67ca:	6863      	ldr	r3, [r4, #4]
   b67cc:	3301      	adds	r3, #1
   b67ce:	6063      	str	r3, [r4, #4]
    return true;
   b67d0:	2501      	movs	r5, #1
   b67d2:	a801      	add	r0, sp, #4
   b67d4:	f7ff fe51 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b67d8:	4628      	mov	r0, r5
   b67da:	b003      	add	sp, #12
   b67dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b67de:	2500      	movs	r5, #0
   b67e0:	e7de      	b.n	b67a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b67e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b67e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b67e4:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b67e8:	4605      	mov	r5, r0
   b67ea:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b67ec:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b67f0:	42a6      	cmp	r6, r4
   b67f2:	d005      	beq.n	b6800 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b67f4:	4639      	mov	r1, r7
   b67f6:	4620      	mov	r0, r4
   b67f8:	f7ff fcff 	bl	b61fa <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b67fc:	b108      	cbz	r0, b6802 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b67fe:	b914      	cbnz	r4, b6806 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b6800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b6802:	3408      	adds	r4, #8
   b6804:	e7f4      	b.n	b67f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b6806:	1d20      	adds	r0, r4, #4
   b6808:	f7ff fe37 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b680c:	e9d5 3200 	ldrd	r3, r2, [r5]
   b6810:	f104 0108 	add.w	r1, r4, #8
   b6814:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6818:	4620      	mov	r0, r4
   b681a:	f7ff ff7f 	bl	b671c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b681e:	686b      	ldr	r3, [r5, #4]
   b6820:	3b01      	subs	r3, #1
   b6822:	606b      	str	r3, [r5, #4]
    return true;
   b6824:	e7ec      	b.n	b6800 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b6828 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b6828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b682c:	4605      	mov	r5, r0
   b682e:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b6830:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b6832:	460c      	mov	r4, r1
        WiringBleLock lk;
   b6834:	f7ff faac 	bl	b5d90 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b6838:	682e      	ldr	r6, [r5, #0]
   b683a:	1ef3      	subs	r3, r6, #3
   b683c:	2b0d      	cmp	r3, #13
   b683e:	d83c      	bhi.n	b68ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b6840:	e8df f013 	tbh	[pc, r3, lsl #1]
   b6844:	0053000e 	.word	0x0053000e
   b6848:	00d1003b 	.word	0x00d1003b
   b684c:	003b003b 	.word	0x003b003b
   b6850:	003b003b 	.word	0x003b003b
   b6854:	009b003b 	.word	0x009b003b
   b6858:	009b009b 	.word	0x009b009b
   b685c:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b6860:	a804      	add	r0, sp, #16
   b6862:	f7ff fc95 	bl	b6190 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b6866:	9b04      	ldr	r3, [sp, #16]
   b6868:	89aa      	ldrh	r2, [r5, #12]
   b686a:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b686c:	6869      	ldr	r1, [r5, #4]
   b686e:	9804      	ldr	r0, [sp, #16]
   b6870:	3108      	adds	r1, #8
   b6872:	3002      	adds	r0, #2
   b6874:	f7ff faa6 	bl	b5dc4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b6878:	a904      	add	r1, sp, #16
   b687a:	a806      	add	r0, sp, #24
   b687c:	f7ff fdf3 	bl	b6466 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b6880:	a906      	add	r1, sp, #24
   b6882:	f104 0018 	add.w	r0, r4, #24
   b6886:	f7ff ff73 	bl	b6770 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b688a:	4605      	mov	r5, r0
   b688c:	a807      	add	r0, sp, #28
   b688e:	f7ff fdf4 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6892:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b6894:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b6896:	b9b5      	cbnz	r5, b68c6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b6898:	4b5d      	ldr	r3, [pc, #372]	; (b6a10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b689a:	495e      	ldr	r1, [pc, #376]	; (b6a14 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b689c:	9300      	str	r3, [sp, #0]
   b689e:	2032      	movs	r0, #50	; 0x32
   b68a0:	462b      	mov	r3, r5
   b68a2:	aa06      	add	r2, sp, #24
   b68a4:	9507      	str	r5, [sp, #28]
   b68a6:	f7ff f8af 	bl	b5a08 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b68aa:	9b04      	ldr	r3, [sp, #16]
   b68ac:	4629      	mov	r1, r5
   b68ae:	8818      	ldrh	r0, [r3, #0]
   b68b0:	f7fe fef0 	bl	b5694 <hal_ble_gap_disconnect>
   b68b4:	a805      	add	r0, sp, #20
   b68b6:	f7ff fde0 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b68ba:	a803      	add	r0, sp, #12
   b68bc:	f7ff fa76 	bl	b5dac <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b68c0:	b00e      	add	sp, #56	; 0x38
   b68c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b68c6:	4a54      	ldr	r2, [pc, #336]	; (b6a18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b68c8:	9200      	str	r2, [sp, #0]
   b68ca:	2300      	movs	r3, #0
   b68cc:	4951      	ldr	r1, [pc, #324]	; (b6a14 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b68ce:	9307      	str	r3, [sp, #28]
   b68d0:	aa06      	add	r2, sp, #24
   b68d2:	2001      	movs	r0, #1
   b68d4:	f7ff f898 	bl	b5a08 <log_message>
                if (impl->connectedCallback_) {
   b68d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b68da:	2b00      	cmp	r3, #0
   b68dc:	d0ea      	beq.n	b68b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b68de:	a904      	add	r1, sp, #16
   b68e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b68e4:	f7ff fe49 	bl	b657a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b68e8:	e7e4      	b.n	b68b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b68ea:	89a9      	ldrh	r1, [r5, #12]
   b68ec:	4620      	mov	r0, r4
   b68ee:	f7ff fba7 	bl	b6040 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b68f2:	4606      	mov	r6, r0
   b68f4:	2800      	cmp	r0, #0
   b68f6:	d0e0      	beq.n	b68ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b68f8:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b68fa:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b68fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6902:	8029      	strh	r1, [r5, #0]
   b6904:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b6908:	429a      	cmp	r2, r3
   b690a:	d003      	beq.n	b6914 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b690c:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b6910:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b6912:	e7f9      	b.n	b6908 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b6914:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b6918:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b691c:	45b8      	cmp	r8, r7
   b691e:	d004      	beq.n	b692a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b6920:	1d38      	adds	r0, r7, #4
   b6922:	f7ff fdaa 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6926:	3708      	adds	r7, #8
   b6928:	e7f8      	b.n	b691c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b692a:	2300      	movs	r3, #0
   b692c:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b692e:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b6932:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b6936:	45b8      	cmp	r8, r7
   b6938:	d004      	beq.n	b6944 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b693a:	1d38      	adds	r0, r7, #4
   b693c:	f7ff fd9d 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6940:	3708      	adds	r7, #8
   b6942:	e7f8      	b.n	b6936 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b6944:	2300      	movs	r3, #0
   b6946:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b6948:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b694a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b694c:	b123      	cbz	r3, b6958 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b694e:	4631      	mov	r1, r6
   b6950:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6954:	f7ff fe11 	bl	b657a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b6958:	2300      	movs	r3, #0
   b695a:	2220      	movs	r2, #32
   b695c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b6960:	4a2e      	ldr	r2, [pc, #184]	; (b6a1c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b6962:	9200      	str	r2, [sp, #0]
   b6964:	492b      	ldr	r1, [pc, #172]	; (b6a14 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b6966:	aa06      	add	r2, sp, #24
   b6968:	2001      	movs	r0, #1
   b696a:	f7ff f84d 	bl	b5a08 <log_message>
                    impl->peers_.removeOne(*peer);
   b696e:	4631      	mov	r1, r6
   b6970:	f104 0018 	add.w	r0, r4, #24
   b6974:	f7ff ff35 	bl	b67e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b6978:	e79f      	b.n	b68ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b697a:	89a9      	ldrh	r1, [r5, #12]
   b697c:	4620      	mov	r0, r4
   b697e:	f7ff fb5f 	bl	b6040 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b6982:	2800      	cmp	r0, #0
   b6984:	d099      	beq.n	b68ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b6986:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b6988:	2b00      	cmp	r3, #0
   b698a:	d096      	beq.n	b68ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b698c:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b698e:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b6990:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b6994:	d001      	beq.n	b699a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b6996:	2e10      	cmp	r6, #16
   b6998:	d117      	bne.n	b69ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b699a:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b699c:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b699e:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b69a0:	2506      	movs	r5, #6
                        };
   b69a2:	f88d 3015 	strb.w	r3, [sp, #21]
   b69a6:	9104      	str	r1, [sp, #16]
   b69a8:	f88d 2014 	strb.w	r2, [sp, #20]
   b69ac:	9006      	str	r0, [sp, #24]
   b69ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b69b2:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b69b4:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b69b8:	9508      	str	r5, [sp, #32]
   b69ba:	e883 0003 	stmia.w	r3, {r0, r1}
   b69be:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b69c0:	a906      	add	r1, sp, #24
   b69c2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b69c6:	4798      	blx	r3
   b69c8:	e777      	b.n	b68ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b69ca:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b69cc:	bf01      	itttt	eq
   b69ce:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b69d0:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b69d2:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b69d6:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b69d8:	bf0f      	iteee	eq
   b69da:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b69de:	461a      	movne	r2, r3
   b69e0:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b69e2:	461d      	movne	r5, r3
   b69e4:	e7dd      	b.n	b69a2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b69e6:	89a9      	ldrh	r1, [r5, #12]
   b69e8:	4620      	mov	r0, r4
   b69ea:	f7ff fb29 	bl	b6040 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b69ee:	4601      	mov	r1, r0
   b69f0:	2800      	cmp	r0, #0
   b69f2:	f43f af62 	beq.w	b68ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b69f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b69f8:	2b00      	cmp	r3, #0
   b69fa:	f43f af5e 	beq.w	b68ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b69fe:	686b      	ldr	r3, [r5, #4]
   b6a00:	9306      	str	r3, [sp, #24]
   b6a02:	aa06      	add	r2, sp, #24
   b6a04:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b6a06:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6a0a:	4798      	blx	r3
   b6a0c:	e755      	b.n	b68ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b6a0e:	bf00      	nop
   b6a10:	000bb404 	.word	0x000bb404
   b6a14:	000bb383 	.word	0x000bb383
   b6a18:	000bb42a 	.word	0x000bb42a
   b6a1c:	000bb447 	.word	0x000bb447

000b6a20 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b6a20:	b513      	push	{r0, r1, r4, lr}
   b6a22:	460b      	mov	r3, r1
   b6a24:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6a26:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6a2a:	466c      	mov	r4, sp
   b6a2c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6a30:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6a34:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6a38:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6a3c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6a40:	b002      	add	sp, #8
   b6a42:	bd10      	pop	{r4, pc}

000b6a44 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b6a44:	b538      	push	{r3, r4, r5, lr}
   b6a46:	4605      	mov	r5, r0
   b6a48:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b6a4a:	f7ff ffe9 	bl	b6a20 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6a4e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6a50:	68a2      	ldr	r2, [r4, #8]
   b6a52:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6a54:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6a56:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6a58:	68e2      	ldr	r2, [r4, #12]
   b6a5a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6a5c:	60e3      	str	r3, [r4, #12]
      }
   b6a5e:	bd38      	pop	{r3, r4, r5, pc}

000b6a60 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b6a60:	b570      	push	{r4, r5, r6, lr}
   b6a62:	4604      	mov	r4, r0
   b6a64:	b08c      	sub	sp, #48	; 0x30
   b6a66:	460e      	mov	r6, r1
   b6a68:	9201      	str	r2, [sp, #4]
   b6a6a:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b6a6c:	f7ff fac8 	bl	b6000 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b6a70:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b6a72:	9901      	ldr	r1, [sp, #4]
   b6a74:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6a78:	f000 fd57 	bl	b752a <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b6a7c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b6a80:	b1cd      	cbz	r5, b6ab6 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b6a82:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6a84:	9502      	str	r5, [sp, #8]
   b6a86:	a902      	add	r1, sp, #8
   b6a88:	a804      	add	r0, sp, #16
   b6a8a:	9303      	str	r3, [sp, #12]
   b6a8c:	f7ff fcb4 	bl	b63f8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b6a90:	2300      	movs	r3, #0
	__x.swap(*this);
   b6a92:	a908      	add	r1, sp, #32
   b6a94:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b6a96:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b6a98:	f7ff ffd4 	bl	b6a44 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b6a9c:	4631      	mov	r1, r6
   b6a9e:	a808      	add	r0, sp, #32
   b6aa0:	f7ff ffd0 	bl	b6a44 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b6aa4:	a808      	add	r0, sp, #32
   b6aa6:	f7ff f935 	bl	b5d14 <_ZNSt14_Function_baseD1Ev>
   b6aaa:	a804      	add	r0, sp, #16
   b6aac:	f7ff f932 	bl	b5d14 <_ZNSt14_Function_baseD1Ev>
    }
   b6ab0:	4620      	mov	r0, r4
   b6ab2:	b00c      	add	sp, #48	; 0x30
   b6ab4:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b6ab6:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b6ab8:	e7ea      	b.n	b6a90 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b6abc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b6abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6ac0:	b087      	sub	sp, #28
   b6ac2:	461d      	mov	r5, r3
   b6ac4:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b6ac8:	4680      	mov	r8, r0
   b6aca:	468b      	mov	fp, r1
   b6acc:	4692      	mov	sl, r2
   b6ace:	9912      	ldr	r1, [sp, #72]	; 0x48
   b6ad0:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6ad2:	2200      	movs	r2, #0
   b6ad4:	2068      	movs	r0, #104	; 0x68
   b6ad6:	9102      	str	r1, [sp, #8]
   b6ad8:	9204      	str	r2, [sp, #16]
   b6ada:	f7fd fadc 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6ade:	1e06      	subs	r6, r0, #0
   b6ae0:	f106 090c 	add.w	r9, r6, #12
   b6ae4:	d018      	beq.n	b6b18 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b6ae6:	2201      	movs	r2, #1
	: _M_impl(__a)
   b6ae8:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b6aea:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b6aee:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b6af0:	4a15      	ldr	r2, [pc, #84]	; (b6b48 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b6af2:	f847 2b20 	str.w	r2, [r7], #32
   b6af6:	9b03      	ldr	r3, [sp, #12]
   b6af8:	9100      	str	r1, [sp, #0]
   b6afa:	465a      	mov	r2, fp
   b6afc:	4651      	mov	r1, sl
   b6afe:	4648      	mov	r0, r9
   b6b00:	f7ff ffae 	bl	b6a60 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b6b04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6b06:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b6b08:	682b      	ldr	r3, [r5, #0]
   b6b0a:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b6b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6b0e:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b6b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6b14:	6823      	ldr	r3, [r4, #0]
   b6b16:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b6b18:	a904      	add	r1, sp, #16
   b6b1a:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b6b1c:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b6b20:	f7ff fd1a 	bl	b6558 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b6b24:	a805      	add	r0, sp, #20
   b6b26:	f7ff fca8 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b6b2a:	f8d8 3000 	ldr.w	r3, [r8]
   b6b2e:	b93b      	cbnz	r3, b6b40 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b6b30:	4a06      	ldr	r2, [pc, #24]	; (b6b4c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b6b32:	4907      	ldr	r1, [pc, #28]	; (b6b50 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b6b34:	200a      	movs	r0, #10
}
   b6b36:	b007      	add	sp, #28
   b6b38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b6b3c:	f7fe bf5c 	b.w	b59f8 <panic_>
}
   b6b40:	b007      	add	sp, #28
   b6b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6b46:	bf00      	nop
   b6b48:	000bb4c0 	.word	0x000bb4c0
   b6b4c:	000b5789 	.word	0x000b5789
   b6b50:	000bb36c 	.word	0x000bb36c

000b6b54 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6b54:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6b58:	4604      	mov	r4, r0
   b6b5a:	460d      	mov	r5, r1
   b6b5c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6b5e:	d914      	bls.n	b6b8a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6b60:	4290      	cmp	r0, r2
   b6b62:	d213      	bcs.n	b6b8c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6b64:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6b68:	1a75      	subs	r5, r6, r1
   b6b6a:	f1a1 0708 	sub.w	r7, r1, #8
   b6b6e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6b70:	42b7      	cmp	r7, r6
   b6b72:	d018      	beq.n	b6ba6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6b74:	b11c      	cbz	r4, b6b7e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6b76:	4631      	mov	r1, r6
   b6b78:	4620      	mov	r0, r4
   b6b7a:	f7ff fc6a 	bl	b6452 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6b7e:	1d30      	adds	r0, r6, #4
   b6b80:	f7ff fc7b 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6b84:	3e08      	subs	r6, #8
   b6b86:	3c08      	subs	r4, #8
   b6b88:	e7f2      	b.n	b6b70 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6b8a:	d00c      	beq.n	b6ba6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6b8c:	42b5      	cmp	r5, r6
   b6b8e:	d00a      	beq.n	b6ba6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6b90:	b11c      	cbz	r4, b6b9a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6b92:	4629      	mov	r1, r5
   b6b94:	4620      	mov	r0, r4
   b6b96:	f7ff fc5c 	bl	b6452 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6b9a:	1d28      	adds	r0, r5, #4
   b6b9c:	f7ff fc6d 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6ba0:	3508      	adds	r5, #8
   b6ba2:	3408      	adds	r4, #8
   b6ba4:	e7f2      	b.n	b6b8c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6ba8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6ba8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6baa:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6bac:	4605      	mov	r5, r0
        if (n > 0) {
   b6bae:	dd11      	ble.n	b6bd4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6bb0:	00f0      	lsls	r0, r6, #3
   b6bb2:	f7fe ffbd 	bl	b5b30 <malloc>
            if (!d) {
   b6bb6:	4604      	mov	r4, r0
   b6bb8:	b158      	cbz	r0, b6bd2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6bba:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6bbe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6bc2:	f7ff ffc7 	bl	b6b54 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6bc6:	6828      	ldr	r0, [r5, #0]
   b6bc8:	f7fe ffba 	bl	b5b40 <free>
        data_ = d;
   b6bcc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6bce:	60ae      	str	r6, [r5, #8]
        return true;
   b6bd0:	2001      	movs	r0, #1
    }
   b6bd2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6bd4:	2400      	movs	r4, #0
   b6bd6:	e7f6      	b.n	b6bc6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b6bd8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6bd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6bda:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6bdc:	6845      	ldr	r5, [r0, #4]
   b6bde:	4668      	mov	r0, sp
   b6be0:	f7ff fc37 	bl	b6452 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6be4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b6be8:	4299      	cmp	r1, r3
   b6bea:	da10      	bge.n	b6c0e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b6bec:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6bee:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6bf0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b6bf4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6bf8:	4629      	mov	r1, r5
   b6bfa:	f105 0008 	add.w	r0, r5, #8
   b6bfe:	f7ff ffa9 	bl	b6b54 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6c02:	b98d      	cbnz	r5, b6c28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b6c04:	6863      	ldr	r3, [r4, #4]
   b6c06:	3301      	adds	r3, #1
   b6c08:	6063      	str	r3, [r4, #4]
    return true;
   b6c0a:	2601      	movs	r6, #1
   b6c0c:	e006      	b.n	b6c1c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6c0e:	3101      	adds	r1, #1
   b6c10:	4620      	mov	r0, r4
   b6c12:	f7ff ffc9 	bl	b6ba8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6c16:	4606      	mov	r6, r0
   b6c18:	2800      	cmp	r0, #0
   b6c1a:	d1e7      	bne.n	b6bec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b6c1c:	a801      	add	r0, sp, #4
   b6c1e:	f7ff fc2c 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6c22:	4630      	mov	r0, r6
   b6c24:	b002      	add	sp, #8
   b6c26:	bd70      	pop	{r4, r5, r6, pc}
   b6c28:	4669      	mov	r1, sp
   b6c2a:	4628      	mov	r0, r5
   b6c2c:	f7ff fc11 	bl	b6452 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6c30:	e7e8      	b.n	b6c04 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b6c32 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6c32:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6c36:	4604      	mov	r4, r0
   b6c38:	460d      	mov	r5, r1
   b6c3a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6c3c:	d914      	bls.n	b6c68 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6c3e:	4290      	cmp	r0, r2
   b6c40:	d213      	bcs.n	b6c6a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6c42:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6c46:	1a75      	subs	r5, r6, r1
   b6c48:	f1a1 0708 	sub.w	r7, r1, #8
   b6c4c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6c4e:	42b7      	cmp	r7, r6
   b6c50:	d018      	beq.n	b6c84 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6c52:	b11c      	cbz	r4, b6c5c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b6c54:	4631      	mov	r1, r6
   b6c56:	4620      	mov	r0, r4
   b6c58:	f7ff fbed 	bl	b6436 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6c5c:	1d30      	adds	r0, r6, #4
   b6c5e:	f7ff fc0c 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6c62:	3e08      	subs	r6, #8
   b6c64:	3c08      	subs	r4, #8
   b6c66:	e7f2      	b.n	b6c4e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6c68:	d00c      	beq.n	b6c84 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6c6a:	42b5      	cmp	r5, r6
   b6c6c:	d00a      	beq.n	b6c84 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6c6e:	b11c      	cbz	r4, b6c78 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6c70:	4629      	mov	r1, r5
   b6c72:	4620      	mov	r0, r4
   b6c74:	f7ff fbdf 	bl	b6436 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6c78:	1d28      	adds	r0, r5, #4
   b6c7a:	f7ff fbfe 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6c7e:	3508      	adds	r5, #8
   b6c80:	3408      	adds	r4, #8
   b6c82:	e7f2      	b.n	b6c6a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6c86 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6c86:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6c88:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6c8a:	4605      	mov	r5, r0
        if (n > 0) {
   b6c8c:	dd11      	ble.n	b6cb2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6c8e:	00f0      	lsls	r0, r6, #3
   b6c90:	f7fe ff4e 	bl	b5b30 <malloc>
            if (!d) {
   b6c94:	4604      	mov	r4, r0
   b6c96:	b158      	cbz	r0, b6cb0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6c98:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6c9c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6ca0:	f7ff ffc7 	bl	b6c32 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6ca4:	6828      	ldr	r0, [r5, #0]
   b6ca6:	f7fe ff4b 	bl	b5b40 <free>
        data_ = d;
   b6caa:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6cac:	60ae      	str	r6, [r5, #8]
        return true;
   b6cae:	2001      	movs	r0, #1
    }
   b6cb0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6cb2:	2400      	movs	r4, #0
   b6cb4:	e7f6      	b.n	b6ca4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b6cb6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6cb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6cb8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6cba:	6845      	ldr	r5, [r0, #4]
   b6cbc:	4668      	mov	r0, sp
   b6cbe:	f7ff fbba 	bl	b6436 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6cc2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b6cc6:	4299      	cmp	r1, r3
   b6cc8:	da10      	bge.n	b6cec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b6cca:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6ccc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6cce:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b6cd2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6cd6:	4629      	mov	r1, r5
   b6cd8:	f105 0008 	add.w	r0, r5, #8
   b6cdc:	f7ff ffa9 	bl	b6c32 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6ce0:	b98d      	cbnz	r5, b6d06 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b6ce2:	6863      	ldr	r3, [r4, #4]
   b6ce4:	3301      	adds	r3, #1
   b6ce6:	6063      	str	r3, [r4, #4]
    return true;
   b6ce8:	2601      	movs	r6, #1
   b6cea:	e006      	b.n	b6cfa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6cec:	3101      	adds	r1, #1
   b6cee:	4620      	mov	r0, r4
   b6cf0:	f7ff ffc9 	bl	b6c86 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6cf4:	4606      	mov	r6, r0
   b6cf6:	2800      	cmp	r0, #0
   b6cf8:	d1e7      	bne.n	b6cca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b6cfa:	a801      	add	r0, sp, #4
   b6cfc:	f7ff fbbd 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6d00:	4630      	mov	r0, r6
   b6d02:	b002      	add	sp, #8
   b6d04:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b6d06:	4669      	mov	r1, sp
   b6d08:	4628      	mov	r0, r5
   b6d0a:	f7ff fb94 	bl	b6436 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6d0e:	e7e8      	b.n	b6ce2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b6d10 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b6d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d14:	4617      	mov	r7, r2
   b6d16:	b0a1      	sub	sp, #132	; 0x84
   b6d18:	4680      	mov	r8, r0
    WiringBleLock lk;
   b6d1a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b6d1c:	460e      	mov	r6, r1
    WiringBleLock lk;
   b6d1e:	f7ff f837 	bl	b5d90 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6d22:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b6d24:	7923      	ldrb	r3, [r4, #4]
   b6d26:	b953      	cbnz	r3, b6d3e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b6d28:	4639      	mov	r1, r7
   b6d2a:	4640      	mov	r0, r8
   b6d2c:	f7ff fb83 	bl	b6436 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b6d30:	a80a      	add	r0, sp, #40	; 0x28
   b6d32:	f7ff f83b 	bl	b5dac <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b6d36:	4640      	mov	r0, r8
   b6d38:	b021      	add	sp, #132	; 0x84
   b6d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6d3e:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b6d40:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b6d44:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b6d48:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b6d4a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b6d4e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b6d52:	9b03      	ldr	r3, [sp, #12]
   b6d54:	429d      	cmp	r5, r3
   b6d56:	d021      	beq.n	b6d9c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b6d58:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b6d5c:	4658      	mov	r0, fp
   b6d5e:	f109 0114 	add.w	r1, r9, #20
   b6d62:	f7ff f8c2 	bl	b5eea <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b6d66:	b1b8      	cbz	r0, b6d98 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b6d68:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b6d6c:	4650      	mov	r0, sl
   b6d6e:	f7ff f8bc 	bl	b5eea <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b6d72:	b188      	cbz	r0, b6d98 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b6d74:	6823      	ldr	r3, [r4, #0]
   b6d76:	f8d9 2000 	ldr.w	r2, [r9]
   b6d7a:	4053      	eors	r3, r2
   b6d7c:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b6d80:	d10a      	bne.n	b6d98 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b6d82:	2220      	movs	r2, #32
   b6d84:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b6d88:	4a5e      	ldr	r2, [pc, #376]	; (b6f04 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b6d8a:	9200      	str	r2, [sp, #0]
   b6d8c:	aa15      	add	r2, sp, #84	; 0x54
   b6d8e:	495e      	ldr	r1, [pc, #376]	; (b6f08 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b6d90:	2032      	movs	r0, #50	; 0x32
   b6d92:	f7fe fe39 	bl	b5a08 <log_message>
   b6d96:	e7c7      	b.n	b6d28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b6d98:	3508      	adds	r5, #8
   b6d9a:	e7da      	b.n	b6d52 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b6d9c:	4650      	mov	r0, sl
   b6d9e:	f7ff f875 	bl	b5e8c <_ZNK8particle7BleUuid7isValidEv>
   b6da2:	b960      	cbnz	r0, b6dbe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b6da4:	4959      	ldr	r1, [pc, #356]	; (b6f0c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b6da6:	2201      	movs	r2, #1
   b6da8:	a815      	add	r0, sp, #84	; 0x54
   b6daa:	ad15      	add	r5, sp, #84	; 0x54
   b6dac:	f7ff f846 	bl	b5e3c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b6db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6db2:	46d4      	mov	ip, sl
   b6db4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6db8:	682b      	ldr	r3, [r5, #0]
   b6dba:	f8cc 3000 	str.w	r3, [ip]
   b6dbe:	6833      	ldr	r3, [r6, #0]
   b6dc0:	e9d3 5300 	ldrd	r5, r3, [r3]
   b6dc4:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b6dc8:	455d      	cmp	r5, fp
   b6dca:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b6dcc:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b6dce:	d06e      	beq.n	b6eae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b6dd0:	f855 0b08 	ldr.w	r0, [r5], #8
   b6dd4:	f7ff f889 	bl	b5eea <_ZNK8particle7BleUuideqERKS0_>
   b6dd8:	2800      	cmp	r0, #0
   b6dda:	d0f5      	beq.n	b6dc8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b6ddc:	f104 0a14 	add.w	sl, r4, #20
   b6de0:	4650      	mov	r0, sl
   b6de2:	f7ff f853 	bl	b5e8c <_ZNK8particle7BleUuid7isValidEv>
   b6de6:	b988      	cbnz	r0, b6e0c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b6de8:	4b49      	ldr	r3, [pc, #292]	; (b6f10 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b6dea:	4948      	ldr	r1, [pc, #288]	; (b6f0c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b6dec:	881a      	ldrh	r2, [r3, #0]
   b6dee:	3201      	adds	r2, #1
   b6df0:	b292      	uxth	r2, r2
   b6df2:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b6df4:	a815      	add	r0, sp, #84	; 0x54
   b6df6:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b6df8:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b6dfa:	f7ff f83e 	bl	b5e7a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b6dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6e00:	46d4      	mov	ip, sl
   b6e02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6e06:	682b      	ldr	r3, [r5, #0]
   b6e08:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b6e0c:	4b41      	ldr	r3, [pc, #260]	; (b6f14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b6e0e:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b6e10:	2228      	movs	r2, #40	; 0x28
   b6e12:	2100      	movs	r1, #0
   b6e14:	a816      	add	r0, sp, #88	; 0x58
   b6e16:	f002 f90a 	bl	b902e <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b6e1a:	4651      	mov	r1, sl
   b6e1c:	a804      	add	r0, sp, #16
   b6e1e:	f7ff f847 	bl	b5eb0 <_ZN8particle7BleUuid7halUUIDEv>
   b6e22:	ab04      	add	r3, sp, #16
   b6e24:	aa18      	add	r2, sp, #96	; 0x60
   b6e26:	f10d 0c20 	add.w	ip, sp, #32
   b6e2a:	6818      	ldr	r0, [r3, #0]
   b6e2c:	6859      	ldr	r1, [r3, #4]
   b6e2e:	4615      	mov	r5, r2
   b6e30:	c503      	stmia	r5!, {r0, r1}
   b6e32:	3308      	adds	r3, #8
   b6e34:	4563      	cmp	r3, ip
   b6e36:	462a      	mov	r2, r5
   b6e38:	d1f7      	bne.n	b6e2a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b6e3a:	6818      	ldr	r0, [r3, #0]
   b6e3c:	6028      	str	r0, [r5, #0]
    return value_;
   b6e3e:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b6e40:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b6e44:	f8d9 3000 	ldr.w	r3, [r9]
   b6e48:	8a9b      	ldrh	r3, [r3, #20]
   b6e4a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b6e4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b6e50:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b6e52:	4b31      	ldr	r3, [pc, #196]	; (b6f18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b6e54:	2200      	movs	r2, #0
   b6e56:	1da1      	adds	r1, r4, #6
   b6e58:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b6e5a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b6e5e:	f7fe fc4b 	bl	b56f8 <hal_ble_gatt_server_add_characteristic>
   b6e62:	2800      	cmp	r0, #0
   b6e64:	f47f af60 	bne.w	b6d28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b6e68:	2301      	movs	r3, #1
   b6e6a:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b6e6c:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b6e6e:	4639      	mov	r1, r7
        return characteristics_;
   b6e70:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b6e72:	a80d      	add	r0, sp, #52	; 0x34
   b6e74:	f7ff fadf 	bl	b6436 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6e78:	4620      	mov	r0, r4
   b6e7a:	a90d      	add	r1, sp, #52	; 0x34
   b6e7c:	f7ff ff1b 	bl	b6cb6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b6e80:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6e82:	a80e      	add	r0, sp, #56	; 0x38
   b6e84:	f7ff faf9 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6e88:	2c00      	cmp	r4, #0
   b6e8a:	f47f af4d 	bne.w	b6d28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b6e8e:	2320      	movs	r3, #32
   b6e90:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b6e94:	4b21      	ldr	r3, [pc, #132]	; (b6f1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b6e96:	9300      	str	r3, [sp, #0]
   b6e98:	aa0d      	add	r2, sp, #52	; 0x34
   b6e9a:	4623      	mov	r3, r4
   b6e9c:	e777      	b.n	b6d8e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b6e9e:	4639      	mov	r1, r7
   b6ea0:	4640      	mov	r0, r8
   b6ea2:	f7ff fac8 	bl	b6436 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6ea6:	a80c      	add	r0, sp, #48	; 0x30
   b6ea8:	f7ff fae7 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6eac:	e740      	b.n	b6d30 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b6eae:	a80b      	add	r0, sp, #44	; 0x2c
   b6eb0:	f7ff f94a 	bl	b6148 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b6eb4:	4651      	mov	r1, sl
   b6eb6:	a815      	add	r0, sp, #84	; 0x54
   b6eb8:	f7fe fffa 	bl	b5eb0 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b6ebc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6ebe:	2300      	movs	r3, #0
   b6ec0:	3214      	adds	r2, #20
   b6ec2:	a915      	add	r1, sp, #84	; 0x54
   b6ec4:	2001      	movs	r0, #1
   b6ec6:	f7fe fbef 	bl	b56a8 <hal_ble_gatt_server_add_service>
   b6eca:	2800      	cmp	r0, #0
   b6ecc:	d1e7      	bne.n	b6e9e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b6ece:	6835      	ldr	r5, [r6, #0]
   b6ed0:	a90b      	add	r1, sp, #44	; 0x2c
   b6ed2:	a80d      	add	r0, sp, #52	; 0x34
   b6ed4:	f7ff fabd 	bl	b6452 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b6ed8:	4628      	mov	r0, r5
   b6eda:	a90d      	add	r1, sp, #52	; 0x34
   b6edc:	f7ff fe7c 	bl	b6bd8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b6ee0:	4605      	mov	r5, r0
   b6ee2:	a80e      	add	r0, sp, #56	; 0x38
   b6ee4:	f7ff fac9 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6ee8:	2d00      	cmp	r5, #0
   b6eea:	d0d8      	beq.n	b6e9e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b6eec:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b6eee:	6853      	ldr	r3, [r2, #4]
   b6ef0:	6812      	ldr	r2, [r2, #0]
   b6ef2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b6ef6:	3b01      	subs	r3, #1
   b6ef8:	a80c      	add	r0, sp, #48	; 0x30
   b6efa:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b6efe:	f7ff fabc 	bl	b647a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6f02:	e76b      	b.n	b6ddc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b6f04:	000bb466 	.word	0x000bb466
   b6f08:	000bb383 	.word	0x000bb383
   b6f0c:	000bb52a 	.word	0x000bb52a
   b6f10:	2003e6bc 	.word	0x2003e6bc
   b6f14:	002c0003 	.word	0x002c0003
   b6f18:	000b62e1 	.word	0x000b62e1
   b6f1c:	000bb491 	.word	0x000bb491

000b6f20 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b6f20:	4802      	ldr	r0, [pc, #8]	; (b6f2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6f22:	2300      	movs	r3, #0
   b6f24:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b6f26:	f7fe bc0f 	b.w	b5748 <os_mutex_recursive_create>
   b6f2a:	bf00      	nop
   b6f2c:	2003e6c0 	.word	0x2003e6c0

000b6f30 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6f30:	2200      	movs	r2, #0
   b6f32:	6840      	ldr	r0, [r0, #4]
   b6f34:	4611      	mov	r1, r2
   b6f36:	f7fe bdd3 	b.w	b5ae0 <network_listening>

000b6f3a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6f3a:	2200      	movs	r2, #0
   b6f3c:	6840      	ldr	r0, [r0, #4]
   b6f3e:	4611      	mov	r1, r2
   b6f40:	f7fe bdde 	b.w	b5b00 <network_get_listen_timeout>

000b6f44 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6f44:	6840      	ldr	r0, [r0, #4]
   b6f46:	2200      	movs	r2, #0
   b6f48:	f7fe bdd2 	b.w	b5af0 <network_set_listen_timeout>

000b6f4c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6f4c:	6840      	ldr	r0, [r0, #4]
   b6f4e:	2200      	movs	r2, #0
   b6f50:	f081 0101 	eor.w	r1, r1, #1
   b6f54:	f7fe bdbc 	b.w	b5ad0 <network_listen>

000b6f58 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6f58:	2300      	movs	r3, #0
   b6f5a:	6840      	ldr	r0, [r0, #4]
   b6f5c:	461a      	mov	r2, r3
   b6f5e:	4619      	mov	r1, r3
   b6f60:	f7fe bdae 	b.w	b5ac0 <network_off>

000b6f64 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6f64:	2300      	movs	r3, #0
   b6f66:	6840      	ldr	r0, [r0, #4]
   b6f68:	461a      	mov	r2, r3
   b6f6a:	4619      	mov	r1, r3
   b6f6c:	f7fe bda0 	b.w	b5ab0 <network_on>

000b6f70 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6f70:	2200      	movs	r2, #0
   b6f72:	6840      	ldr	r0, [r0, #4]
   b6f74:	4611      	mov	r1, r2
   b6f76:	f7fe bd93 	b.w	b5aa0 <network_ready>

000b6f7a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6f7a:	2200      	movs	r2, #0
   b6f7c:	6840      	ldr	r0, [r0, #4]
   b6f7e:	4611      	mov	r1, r2
   b6f80:	f7fe bd7e 	b.w	b5a80 <network_connecting>

000b6f84 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6f84:	6840      	ldr	r0, [r0, #4]
   b6f86:	2200      	movs	r2, #0
   b6f88:	2102      	movs	r1, #2
   b6f8a:	f7fe bd81 	b.w	b5a90 <network_disconnect>

000b6f8e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6f8e:	2300      	movs	r3, #0
   b6f90:	6840      	ldr	r0, [r0, #4]
   b6f92:	461a      	mov	r2, r3
   b6f94:	f7fe bd6c 	b.w	b5a70 <network_connect>

000b6f98 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6f98:	4b02      	ldr	r3, [pc, #8]	; (b6fa4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6f9a:	2203      	movs	r2, #3
   b6f9c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6f9e:	4a02      	ldr	r2, [pc, #8]	; (b6fa8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6fa0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6fa2:	4770      	bx	lr
   b6fa4:	2003e6c8 	.word	0x2003e6c8
   b6fa8:	000bb554 	.word	0x000bb554

000b6fac <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6fac:	4770      	bx	lr

000b6fae <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6fb0:	4606      	mov	r6, r0
   b6fb2:	4615      	mov	r5, r2
   b6fb4:	460c      	mov	r4, r1
   b6fb6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6fb8:	42bc      	cmp	r4, r7
   b6fba:	d006      	beq.n	b6fca <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6fbc:	6833      	ldr	r3, [r6, #0]
   b6fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6fc2:	689b      	ldr	r3, [r3, #8]
   b6fc4:	4630      	mov	r0, r6
   b6fc6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6fc8:	e7f6      	b.n	b6fb8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6fca:	4628      	mov	r0, r5
   b6fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6fce <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6fce:	7c00      	ldrb	r0, [r0, #16]
   b6fd0:	2200      	movs	r2, #0
   b6fd2:	f7fe bc09 	b.w	b57e8 <hal_i2c_write>

000b6fd6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6fd6:	7c00      	ldrb	r0, [r0, #16]
   b6fd8:	2100      	movs	r1, #0
   b6fda:	f7fe bc0d 	b.w	b57f8 <hal_i2c_available>

000b6fde <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6fde:	7c00      	ldrb	r0, [r0, #16]
   b6fe0:	2100      	movs	r1, #0
   b6fe2:	f7fe bc11 	b.w	b5808 <hal_i2c_read>

000b6fe6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6fe6:	7c00      	ldrb	r0, [r0, #16]
   b6fe8:	2100      	movs	r1, #0
   b6fea:	f7fe bc15 	b.w	b5818 <hal_i2c_peek>

000b6fee <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6fee:	7c00      	ldrb	r0, [r0, #16]
   b6ff0:	2100      	movs	r1, #0
   b6ff2:	f7fe bc19 	b.w	b5828 <hal_i2c_flush>

000b6ff6 <_ZN7TwoWireD0Ev>:
   b6ff6:	b510      	push	{r4, lr}
   b6ff8:	2114      	movs	r1, #20
   b6ffa:	4604      	mov	r4, r0
   b6ffc:	f7fd f84f 	bl	b409e <_ZdlPvj>
   b7000:	4620      	mov	r0, r4
   b7002:	bd10      	pop	{r4, pc}

000b7004 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7004:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b700a:	4604      	mov	r4, r0
   b700c:	4608      	mov	r0, r1
   b700e:	2100      	movs	r1, #0
   b7010:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7014:	4b03      	ldr	r3, [pc, #12]	; (b7024 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7016:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7018:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b701a:	4611      	mov	r1, r2
   b701c:	f7fe fc0c 	bl	b5838 <hal_i2c_init>
}
   b7020:	4620      	mov	r0, r4
   b7022:	bd10      	pop	{r4, pc}
   b7024:	000bb590 	.word	0x000bb590

000b7028 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7028:	2300      	movs	r3, #0
   b702a:	7c00      	ldrb	r0, [r0, #16]
   b702c:	461a      	mov	r2, r3
   b702e:	4619      	mov	r1, r3
   b7030:	f7fe bbc2 	b.w	b57b8 <hal_i2c_begin>

000b7034 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b7034:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b7036:	2200      	movs	r2, #0
   b7038:	2314      	movs	r3, #20
   b703a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b703e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b7042:	780b      	ldrb	r3, [r1, #0]
   b7044:	f88d 3008 	strb.w	r3, [sp, #8]
   b7048:	684b      	ldr	r3, [r1, #4]
   b704a:	9303      	str	r3, [sp, #12]
   b704c:	68cb      	ldr	r3, [r1, #12]
   b704e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b7050:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b7052:	7a0b      	ldrb	r3, [r1, #8]
   b7054:	9305      	str	r3, [sp, #20]
   b7056:	a901      	add	r1, sp, #4
   b7058:	f7fe fbf6 	bl	b5848 <hal_i2c_request_ex>
}
   b705c:	b007      	add	sp, #28
   b705e:	f85d fb04 	ldr.w	pc, [sp], #4

000b7062 <_ZN7TwoWire11requestFromEhjh>:
{
   b7062:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b7064:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b7066:	f88d 1000 	strb.w	r1, [sp]
   b706a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b706e:	9103      	str	r1, [sp, #12]
   b7070:	bf18      	it	ne
   b7072:	2301      	movne	r3, #1
   b7074:	4669      	mov	r1, sp
    size_ = size;
   b7076:	9201      	str	r2, [sp, #4]
   b7078:	f88d 3008 	strb.w	r3, [sp, #8]
   b707c:	f7ff ffda 	bl	b7034 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b7080:	b005      	add	sp, #20
   b7082:	f85d fb04 	ldr.w	pc, [sp], #4

000b7086 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b7086:	2301      	movs	r3, #1
   b7088:	f7ff bfeb 	b.w	b7062 <_ZN7TwoWire11requestFromEhjh>

000b708c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b708c:	7c00      	ldrb	r0, [r0, #16]
   b708e:	2200      	movs	r2, #0
   b7090:	f7fe bb9a 	b.w	b57c8 <hal_i2c_begin_transmission>

000b7094 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7094:	b2c9      	uxtb	r1, r1
   b7096:	f7ff bff9 	b.w	b708c <_ZN7TwoWire17beginTransmissionEh>

000b709a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b709a:	7c00      	ldrb	r0, [r0, #16]
   b709c:	2200      	movs	r2, #0
   b709e:	f7fe bb9b 	b.w	b57d8 <hal_i2c_end_transmission>

000b70a2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b70a2:	2101      	movs	r1, #1
   b70a4:	f7ff bff9 	b.w	b709a <_ZN7TwoWire15endTransmissionEh>

000b70a8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b70a8:	4770      	bx	lr

000b70aa <_ZN9IPAddressD0Ev>:
   b70aa:	b510      	push	{r4, lr}
   b70ac:	2118      	movs	r1, #24
   b70ae:	4604      	mov	r4, r0
   b70b0:	f7fc fff5 	bl	b409e <_ZdlPvj>
   b70b4:	4620      	mov	r0, r4
   b70b6:	bd10      	pop	{r4, pc}

000b70b8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b70b8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b70ba:	7d03      	ldrb	r3, [r0, #20]
   b70bc:	2b06      	cmp	r3, #6
{
   b70be:	b08d      	sub	sp, #52	; 0x34
   b70c0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b70c2:	f100 0704 	add.w	r7, r0, #4
   b70c6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b70ca:	d012      	beq.n	b70f2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b70cc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b70d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b70d4:	220a      	movs	r2, #10
   b70d6:	4630      	mov	r0, r6
   b70d8:	f000 f973 	bl	b73c2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b70dc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b70de:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b70e0:	d019      	beq.n	b7116 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b70e2:	2c00      	cmp	r4, #0
   b70e4:	d0f4      	beq.n	b70d0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b70e6:	212e      	movs	r1, #46	; 0x2e
   b70e8:	4630      	mov	r0, r6
   b70ea:	f000 f951 	bl	b7390 <_ZN5Print5printEc>
   b70ee:	4404      	add	r4, r0
   b70f0:	e7ee      	b.n	b70d0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b70f2:	232f      	movs	r3, #47	; 0x2f
   b70f4:	466a      	mov	r2, sp
   b70f6:	4639      	mov	r1, r7
   b70f8:	200a      	movs	r0, #10
		buf[0] = 0;
   b70fa:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b70fe:	f7fe fbb3 	bl	b5868 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7102:	4668      	mov	r0, sp
   b7104:	f001 ffdc 	bl	b90c0 <strlen>
   b7108:	6833      	ldr	r3, [r6, #0]
   b710a:	4602      	mov	r2, r0
   b710c:	68db      	ldr	r3, [r3, #12]
   b710e:	4669      	mov	r1, sp
   b7110:	4630      	mov	r0, r6
   b7112:	4798      	blx	r3
   b7114:	4604      	mov	r4, r0
    }
    return n;
}
   b7116:	4620      	mov	r0, r4
   b7118:	b00d      	add	sp, #52	; 0x34
   b711a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b711c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b711c:	b510      	push	{r4, lr}
   b711e:	4b05      	ldr	r3, [pc, #20]	; (b7134 <_ZN9IPAddressC1Ev+0x18>)
   b7120:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7122:	2211      	movs	r2, #17
   b7124:	f840 3b04 	str.w	r3, [r0], #4
   b7128:	2100      	movs	r1, #0
   b712a:	f001 ff80 	bl	b902e <memset>
}
   b712e:	4620      	mov	r0, r4
   b7130:	bd10      	pop	{r4, pc}
   b7132:	bf00      	nop
   b7134:	000bb5b8 	.word	0x000bb5b8

000b7138 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7138:	4603      	mov	r3, r0
   b713a:	4a07      	ldr	r2, [pc, #28]	; (b7158 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b713c:	b510      	push	{r4, lr}
   b713e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7142:	f101 0210 	add.w	r2, r1, #16
   b7146:	f851 4b04 	ldr.w	r4, [r1], #4
   b714a:	f843 4b04 	str.w	r4, [r3], #4
   b714e:	4291      	cmp	r1, r2
   b7150:	d1f9      	bne.n	b7146 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7152:	780a      	ldrb	r2, [r1, #0]
   b7154:	701a      	strb	r2, [r3, #0]
}
   b7156:	bd10      	pop	{r4, pc}
   b7158:	000bb5b8 	.word	0x000bb5b8

000b715c <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b715c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b715e:	2b04      	cmp	r3, #4
   b7160:	d104      	bne.n	b716c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b7162:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7164:	3800      	subs	r0, #0
   b7166:	bf18      	it	ne
   b7168:	2001      	movne	r0, #1
   b716a:	4770      	bx	lr
    } else if (version() == 6) {
   b716c:	2b06      	cmp	r3, #6
   b716e:	d107      	bne.n	b7180 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7170:	6843      	ldr	r3, [r0, #4]
   b7172:	b93b      	cbnz	r3, b7184 <_ZNK9IPAddresscvbEv+0x28>
   b7174:	6883      	ldr	r3, [r0, #8]
   b7176:	b92b      	cbnz	r3, b7184 <_ZNK9IPAddresscvbEv+0x28>
   b7178:	68c3      	ldr	r3, [r0, #12]
   b717a:	b91b      	cbnz	r3, b7184 <_ZNK9IPAddresscvbEv+0x28>
   b717c:	6900      	ldr	r0, [r0, #16]
   b717e:	e7f1      	b.n	b7164 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b7180:	2000      	movs	r0, #0
   b7182:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7184:	2001      	movs	r0, #1
}
   b7186:	4770      	bx	lr

000b7188 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7188:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b718a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b718e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7192:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7196:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b719a:	2304      	movs	r3, #4
   b719c:	6041      	str	r1, [r0, #4]
   b719e:	7503      	strb	r3, [r0, #20]
}
   b71a0:	bd10      	pop	{r4, pc}
	...

000b71a4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b71a4:	b507      	push	{r0, r1, r2, lr}
   b71a6:	4b06      	ldr	r3, [pc, #24]	; (b71c0 <_ZN9IPAddressC1EPKh+0x1c>)
   b71a8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b71aa:	78cb      	ldrb	r3, [r1, #3]
   b71ac:	9300      	str	r3, [sp, #0]
   b71ae:	788b      	ldrb	r3, [r1, #2]
   b71b0:	784a      	ldrb	r2, [r1, #1]
   b71b2:	7809      	ldrb	r1, [r1, #0]
   b71b4:	f7ff ffe8 	bl	b7188 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b71b8:	b003      	add	sp, #12
   b71ba:	f85d fb04 	ldr.w	pc, [sp], #4
   b71be:	bf00      	nop
   b71c0:	000bb5b8 	.word	0x000bb5b8

000b71c4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b71c4:	4b01      	ldr	r3, [pc, #4]	; (b71cc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b71c6:	4a02      	ldr	r2, [pc, #8]	; (b71d0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b71c8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b71ca:	4770      	bx	lr
   b71cc:	2003e6d0 	.word	0x2003e6d0
   b71d0:	000bb5c4 	.word	0x000bb5c4

000b71d4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b71d4:	2300      	movs	r3, #0
   b71d6:	6840      	ldr	r0, [r0, #4]
   b71d8:	461a      	mov	r2, r3
   b71da:	f7fe bc49 	b.w	b5a70 <network_connect>

000b71de <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b71de:	6840      	ldr	r0, [r0, #4]
   b71e0:	2200      	movs	r2, #0
   b71e2:	2102      	movs	r1, #2
   b71e4:	f7fe bc54 	b.w	b5a90 <network_disconnect>

000b71e8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b71e8:	2200      	movs	r2, #0
   b71ea:	6840      	ldr	r0, [r0, #4]
   b71ec:	4611      	mov	r1, r2
   b71ee:	f7fe bc47 	b.w	b5a80 <network_connecting>

000b71f2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b71f2:	2200      	movs	r2, #0
   b71f4:	6840      	ldr	r0, [r0, #4]
   b71f6:	4611      	mov	r1, r2
   b71f8:	f7fe bc52 	b.w	b5aa0 <network_ready>

000b71fc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b71fc:	2300      	movs	r3, #0
   b71fe:	6840      	ldr	r0, [r0, #4]
   b7200:	461a      	mov	r2, r3
   b7202:	4619      	mov	r1, r3
   b7204:	f7fe bc54 	b.w	b5ab0 <network_on>

000b7208 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7208:	2300      	movs	r3, #0
   b720a:	6840      	ldr	r0, [r0, #4]
   b720c:	461a      	mov	r2, r3
   b720e:	4619      	mov	r1, r3
   b7210:	f7fe bc56 	b.w	b5ac0 <network_off>

000b7214 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7214:	6840      	ldr	r0, [r0, #4]
   b7216:	2100      	movs	r1, #0
   b7218:	f7fe bc7a 	b.w	b5b10 <network_is_on>

000b721c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b721c:	6840      	ldr	r0, [r0, #4]
   b721e:	2100      	movs	r1, #0
   b7220:	f7fe bc7e 	b.w	b5b20 <network_is_off>

000b7224 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7224:	6840      	ldr	r0, [r0, #4]
   b7226:	2200      	movs	r2, #0
   b7228:	f081 0101 	eor.w	r1, r1, #1
   b722c:	f7fe bc50 	b.w	b5ad0 <network_listen>

000b7230 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7230:	6840      	ldr	r0, [r0, #4]
   b7232:	2200      	movs	r2, #0
   b7234:	f7fe bc5c 	b.w	b5af0 <network_set_listen_timeout>

000b7238 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7238:	2200      	movs	r2, #0
   b723a:	6840      	ldr	r0, [r0, #4]
   b723c:	4611      	mov	r1, r2
   b723e:	f7fe bc5f 	b.w	b5b00 <network_get_listen_timeout>

000b7242 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7242:	2200      	movs	r2, #0
   b7244:	6840      	ldr	r0, [r0, #4]
   b7246:	4611      	mov	r1, r2
   b7248:	f7fe bc4a 	b.w	b5ae0 <network_listening>

000b724c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b724c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7250:	b095      	sub	sp, #84	; 0x54
   b7252:	4614      	mov	r4, r2
   b7254:	460d      	mov	r5, r1
   b7256:	4607      	mov	r7, r0
    IPAddress addr;
   b7258:	f7ff ff60 	bl	b711c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b725c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b725e:	221c      	movs	r2, #28
   b7260:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7262:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7264:	f001 fee3 	bl	b902e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7268:	2340      	movs	r3, #64	; 0x40
   b726a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b726c:	4620      	mov	r0, r4
   b726e:	466b      	mov	r3, sp
   b7270:	aa0c      	add	r2, sp, #48	; 0x30
   b7272:	2100      	movs	r1, #0
   b7274:	f7fe fb18 	bl	b58a8 <netdb_getaddrinfo>
    if (!r) {
   b7278:	4604      	mov	r4, r0
   b727a:	2800      	cmp	r0, #0
   b727c:	d14b      	bne.n	b7316 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b727e:	4602      	mov	r2, r0
   b7280:	2101      	movs	r1, #1
   b7282:	6868      	ldr	r0, [r5, #4]
   b7284:	f7fe fc0c 	bl	b5aa0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7288:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b728a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b728c:	4622      	mov	r2, r4
   b728e:	6868      	ldr	r0, [r5, #4]
   b7290:	f7fe fc06 	bl	b5aa0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7294:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7296:	4681      	mov	r9, r0
        bool ok = false;
   b7298:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b729a:	2e00      	cmp	r6, #0
   b729c:	d03b      	beq.n	b7316 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b729e:	2900      	cmp	r1, #0
   b72a0:	d139      	bne.n	b7316 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b72a2:	6873      	ldr	r3, [r6, #4]
   b72a4:	2b02      	cmp	r3, #2
   b72a6:	d003      	beq.n	b72b0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b72a8:	2b0a      	cmp	r3, #10
   b72aa:	d011      	beq.n	b72d0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b72ac:	69f6      	ldr	r6, [r6, #28]
   b72ae:	e7f4      	b.n	b729a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b72b0:	f1b8 0f00 	cmp.w	r8, #0
   b72b4:	d0fa      	beq.n	b72ac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b72b6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b72b8:	a806      	add	r0, sp, #24
   b72ba:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b72bc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b72be:	f7ff ff71 	bl	b71a4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b72c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b72c4:	1d3c      	adds	r4, r7, #4
   b72c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b72c8:	682b      	ldr	r3, [r5, #0]
   b72ca:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b72cc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b72ce:	e7ed      	b.n	b72ac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b72d0:	f1b9 0f00 	cmp.w	r9, #0
   b72d4:	d0ea      	beq.n	b72ac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b72d6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b72d8:	2210      	movs	r2, #16
   b72da:	a801      	add	r0, sp, #4
   b72dc:	f001 fea7 	bl	b902e <memset>
                    a.v = 6;
   b72e0:	2306      	movs	r3, #6
   b72e2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b72e6:	ad01      	add	r5, sp, #4
   b72e8:	f104 0308 	add.w	r3, r4, #8
   b72ec:	3418      	adds	r4, #24
   b72ee:	6818      	ldr	r0, [r3, #0]
   b72f0:	6859      	ldr	r1, [r3, #4]
   b72f2:	462a      	mov	r2, r5
   b72f4:	c203      	stmia	r2!, {r0, r1}
   b72f6:	3308      	adds	r3, #8
   b72f8:	42a3      	cmp	r3, r4
   b72fa:	4615      	mov	r5, r2
   b72fc:	d1f7      	bne.n	b72ee <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b72fe:	a901      	add	r1, sp, #4
   b7300:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7302:	ad07      	add	r5, sp, #28
   b7304:	f7ff ff18 	bl	b7138 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b730a:	1d3c      	adds	r4, r7, #4
   b730c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b730e:	682b      	ldr	r3, [r5, #0]
   b7310:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7312:	4649      	mov	r1, r9
   b7314:	e7ca      	b.n	b72ac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7316:	9800      	ldr	r0, [sp, #0]
   b7318:	f7fe fabe 	bl	b5898 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b731c:	4638      	mov	r0, r7
   b731e:	b015      	add	sp, #84	; 0x54
   b7320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7324 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7324:	4b02      	ldr	r3, [pc, #8]	; (b7330 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7326:	4a03      	ldr	r2, [pc, #12]	; (b7334 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7328:	601a      	str	r2, [r3, #0]
   b732a:	2200      	movs	r2, #0
   b732c:	605a      	str	r2, [r3, #4]

} // spark
   b732e:	4770      	bx	lr
   b7330:	2003e6d4 	.word	0x2003e6d4
   b7334:	000bb5d0 	.word	0x000bb5d0

000b7338 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b733a:	4606      	mov	r6, r0
   b733c:	460d      	mov	r5, r1
  size_t n = 0;
   b733e:	188f      	adds	r7, r1, r2
   b7340:	2400      	movs	r4, #0
  while (size--) {
   b7342:	42bd      	cmp	r5, r7
   b7344:	d00c      	beq.n	b7360 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7346:	6833      	ldr	r3, [r6, #0]
   b7348:	f815 1b01 	ldrb.w	r1, [r5], #1
   b734c:	689b      	ldr	r3, [r3, #8]
   b734e:	4630      	mov	r0, r6
   b7350:	4798      	blx	r3
     if (chunk>=0)
   b7352:	1e03      	subs	r3, r0, #0
   b7354:	db01      	blt.n	b735a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7356:	441c      	add	r4, r3
  while (size--) {
   b7358:	e7f3      	b.n	b7342 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b735a:	2c00      	cmp	r4, #0
   b735c:	bf08      	it	eq
   b735e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7360:	4620      	mov	r0, r4
   b7362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7364 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7364:	b513      	push	{r0, r1, r4, lr}
   b7366:	4604      	mov	r4, r0
    }
   b7368:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b736a:	b159      	cbz	r1, b7384 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b736c:	9101      	str	r1, [sp, #4]
   b736e:	f001 fea7 	bl	b90c0 <strlen>
   b7372:	6823      	ldr	r3, [r4, #0]
   b7374:	9901      	ldr	r1, [sp, #4]
   b7376:	68db      	ldr	r3, [r3, #12]
   b7378:	4602      	mov	r2, r0
   b737a:	4620      	mov	r0, r4
    }
   b737c:	b002      	add	sp, #8
   b737e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7382:	4718      	bx	r3
    }
   b7384:	b002      	add	sp, #8
   b7386:	bd10      	pop	{r4, pc}

000b7388 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b7388:	b508      	push	{r3, lr}
  return write(str);
   b738a:	f7ff ffeb 	bl	b7364 <_ZN5Print5writeEPKc>
}
   b738e:	bd08      	pop	{r3, pc}

000b7390 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7390:	6803      	ldr	r3, [r0, #0]
   b7392:	689b      	ldr	r3, [r3, #8]
   b7394:	4718      	bx	r3

000b7396 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b7396:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7398:	210d      	movs	r1, #13
{
   b739a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b739c:	f7ff fff8 	bl	b7390 <_ZN5Print5printEc>
  n += print('\n');
   b73a0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b73a2:	4604      	mov	r4, r0
  n += print('\n');
   b73a4:	4628      	mov	r0, r5
   b73a6:	f7ff fff3 	bl	b7390 <_ZN5Print5printEc>
  return n;
}
   b73aa:	4420      	add	r0, r4
   b73ac:	bd38      	pop	{r3, r4, r5, pc}

000b73ae <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b73ae:	b538      	push	{r3, r4, r5, lr}
   b73b0:	4605      	mov	r5, r0
  return write(str);
   b73b2:	f7ff ffd7 	bl	b7364 <_ZN5Print5writeEPKc>
   b73b6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b73b8:	4628      	mov	r0, r5
   b73ba:	f7ff ffec 	bl	b7396 <_ZN5Print7printlnEv>
  return n;
}
   b73be:	4420      	add	r0, r4
   b73c0:	bd38      	pop	{r3, r4, r5, pc}

000b73c2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b73c2:	b530      	push	{r4, r5, lr}
   b73c4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b73c6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b73c8:	2a01      	cmp	r2, #1
  *str = '\0';
   b73ca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b73ce:	bf98      	it	ls
   b73d0:	220a      	movls	r2, #10
   b73d2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b73d4:	460d      	mov	r5, r1
   b73d6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b73da:	fb01 5312 	mls	r3, r1, r2, r5
   b73de:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b73e2:	2b09      	cmp	r3, #9
   b73e4:	bf94      	ite	ls
   b73e6:	3330      	addls	r3, #48	; 0x30
   b73e8:	3337      	addhi	r3, #55	; 0x37
   b73ea:	b2db      	uxtb	r3, r3
  } while(n);
   b73ec:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b73ee:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b73f2:	d9ef      	bls.n	b73d4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b73f4:	4621      	mov	r1, r4
   b73f6:	f7ff ffb5 	bl	b7364 <_ZN5Print5writeEPKc>
}
   b73fa:	b00b      	add	sp, #44	; 0x2c
   b73fc:	bd30      	pop	{r4, r5, pc}

000b73fe <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b73fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7402:	b086      	sub	sp, #24
   b7404:	af00      	add	r7, sp, #0
   b7406:	4605      	mov	r5, r0
   b7408:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b740a:	1d38      	adds	r0, r7, #4
   b740c:	2114      	movs	r1, #20
{
   b740e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7410:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7412:	f7fe fbad 	bl	b5b70 <vsnprintf>

    if (n<bufsize)
   b7416:	2813      	cmp	r0, #19
   b7418:	d80e      	bhi.n	b7438 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b741a:	1d39      	adds	r1, r7, #4
   b741c:	4628      	mov	r0, r5
   b741e:	f7ff ffa1 	bl	b7364 <_ZN5Print5writeEPKc>
   b7422:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7424:	b11e      	cbz	r6, b742e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7426:	4628      	mov	r0, r5
   b7428:	f7ff ffb5 	bl	b7396 <_ZN5Print7printlnEv>
   b742c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b742e:	4620      	mov	r0, r4
   b7430:	3718      	adds	r7, #24
   b7432:	46bd      	mov	sp, r7
   b7434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7438:	f100 0308 	add.w	r3, r0, #8
   b743c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7440:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7442:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7446:	4622      	mov	r2, r4
   b7448:	1c41      	adds	r1, r0, #1
   b744a:	683b      	ldr	r3, [r7, #0]
   b744c:	4668      	mov	r0, sp
   b744e:	f7fe fb8f 	bl	b5b70 <vsnprintf>
  return write(str);
   b7452:	4669      	mov	r1, sp
   b7454:	4628      	mov	r0, r5
   b7456:	f7ff ff85 	bl	b7364 <_ZN5Print5writeEPKc>
   b745a:	4604      	mov	r4, r0
   b745c:	46c5      	mov	sp, r8
   b745e:	e7e1      	b.n	b7424 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7460 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7460:	4b01      	ldr	r3, [pc, #4]	; (b7468 <_GLOBAL__sub_I_RGB+0x8>)
   b7462:	2200      	movs	r2, #0
   b7464:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7466:	4770      	bx	lr
   b7468:	2003e6dc 	.word	0x2003e6dc

000b746c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b746c:	b510      	push	{r4, lr}
   b746e:	4604      	mov	r4, r0
{
	free(buffer);
   b7470:	6800      	ldr	r0, [r0, #0]
   b7472:	f7fe fb65 	bl	b5b40 <free>
}
   b7476:	4620      	mov	r0, r4
   b7478:	bd10      	pop	{r4, pc}

000b747a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b747a:	b510      	push	{r4, lr}
   b747c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b747e:	6800      	ldr	r0, [r0, #0]
   b7480:	b108      	cbz	r0, b7486 <_ZN6String10invalidateEv+0xc>
   b7482:	f7fe fb5d 	bl	b5b40 <free>
	buffer = NULL;
   b7486:	2300      	movs	r3, #0
	capacity = len = 0;
   b7488:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b748c:	6023      	str	r3, [r4, #0]
}
   b748e:	bd10      	pop	{r4, pc}

000b7490 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7490:	b538      	push	{r3, r4, r5, lr}
   b7492:	4604      	mov	r4, r0
   b7494:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7496:	6800      	ldr	r0, [r0, #0]
   b7498:	3101      	adds	r1, #1
   b749a:	f7fe fb59 	bl	b5b50 <realloc>
	if (newbuffer) {
   b749e:	b110      	cbz	r0, b74a6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b74a0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b74a4:	2001      	movs	r0, #1
	}
	return 0;
}
   b74a6:	bd38      	pop	{r3, r4, r5, pc}

000b74a8 <_ZN6String7reserveEj>:
{
   b74a8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b74aa:	6803      	ldr	r3, [r0, #0]
{
   b74ac:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b74ae:	b123      	cbz	r3, b74ba <_ZN6String7reserveEj+0x12>
   b74b0:	6843      	ldr	r3, [r0, #4]
   b74b2:	428b      	cmp	r3, r1
   b74b4:	d301      	bcc.n	b74ba <_ZN6String7reserveEj+0x12>
   b74b6:	2001      	movs	r0, #1
}
   b74b8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b74ba:	4620      	mov	r0, r4
   b74bc:	f7ff ffe8 	bl	b7490 <_ZN6String12changeBufferEj>
   b74c0:	2800      	cmp	r0, #0
   b74c2:	d0f9      	beq.n	b74b8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b74c4:	68a3      	ldr	r3, [r4, #8]
   b74c6:	2b00      	cmp	r3, #0
   b74c8:	d1f5      	bne.n	b74b6 <_ZN6String7reserveEj+0xe>
   b74ca:	6822      	ldr	r2, [r4, #0]
   b74cc:	7013      	strb	r3, [r2, #0]
   b74ce:	e7f2      	b.n	b74b6 <_ZN6String7reserveEj+0xe>

000b74d0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b74d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b74d2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b74d4:	4611      	mov	r1, r2
   b74d6:	9201      	str	r2, [sp, #4]
{
   b74d8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b74da:	f7ff ffe5 	bl	b74a8 <_ZN6String7reserveEj>
   b74de:	9a01      	ldr	r2, [sp, #4]
   b74e0:	b928      	cbnz	r0, b74ee <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b74e2:	4620      	mov	r0, r4
   b74e4:	f7ff ffc9 	bl	b747a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b74e8:	4620      	mov	r0, r4
   b74ea:	b003      	add	sp, #12
   b74ec:	bd30      	pop	{r4, r5, pc}
	len = length;
   b74ee:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b74f0:	4629      	mov	r1, r5
   b74f2:	6820      	ldr	r0, [r4, #0]
   b74f4:	f001 fd73 	bl	b8fde <memcpy>
	buffer[len] = 0;
   b74f8:	6822      	ldr	r2, [r4, #0]
   b74fa:	68a3      	ldr	r3, [r4, #8]
   b74fc:	2100      	movs	r1, #0
   b74fe:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7500:	e7f2      	b.n	b74e8 <_ZN6String4copyEPKcj+0x18>

000b7502 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7502:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7504:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7506:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b750a:	4604      	mov	r4, r0
	len = 0;
   b750c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b750e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7510:	b141      	cbz	r1, b7524 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7512:	4608      	mov	r0, r1
   b7514:	9101      	str	r1, [sp, #4]
   b7516:	f001 fdd3 	bl	b90c0 <strlen>
   b751a:	9901      	ldr	r1, [sp, #4]
   b751c:	4602      	mov	r2, r0
   b751e:	4620      	mov	r0, r4
   b7520:	f7ff ffd6 	bl	b74d0 <_ZN6String4copyEPKcj>
}
   b7524:	4620      	mov	r0, r4
   b7526:	b002      	add	sp, #8
   b7528:	bd10      	pop	{r4, pc}

000b752a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b752a:	b513      	push	{r0, r1, r4, lr}
   b752c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b752e:	b159      	cbz	r1, b7548 <_ZN6StringaSEPKc+0x1e>
   b7530:	4608      	mov	r0, r1
   b7532:	9101      	str	r1, [sp, #4]
   b7534:	f001 fdc4 	bl	b90c0 <strlen>
   b7538:	9901      	ldr	r1, [sp, #4]
   b753a:	4602      	mov	r2, r0
   b753c:	4620      	mov	r0, r4
   b753e:	f7ff ffc7 	bl	b74d0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7542:	4620      	mov	r0, r4
   b7544:	b002      	add	sp, #8
   b7546:	bd10      	pop	{r4, pc}
	else invalidate();
   b7548:	f7ff ff97 	bl	b747a <_ZN6String10invalidateEv>
   b754c:	e7f9      	b.n	b7542 <_ZN6StringaSEPKc+0x18>

000b754e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b754e:	b510      	push	{r4, lr}
   b7550:	4604      	mov	r4, r0
   b7552:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b7554:	2300      	movs	r3, #0
	capacity = 0;
   b7556:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b755a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b755c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b755e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b7560:	a901      	add	r1, sp, #4
   b7562:	f000 fcef 	bl	b7f44 <itoa>
	*this = buf;
   b7566:	a901      	add	r1, sp, #4
   b7568:	4620      	mov	r0, r4
   b756a:	f7ff ffde 	bl	b752a <_ZN6StringaSEPKc>
}
   b756e:	4620      	mov	r0, r4
   b7570:	b00a      	add	sp, #40	; 0x28
   b7572:	bd10      	pop	{r4, pc}

000b7574 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b7574:	b570      	push	{r4, r5, r6, lr}
   b7576:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b7578:	460e      	mov	r6, r1
   b757a:	b909      	cbnz	r1, b7580 <_ZN6String6concatEPKcj+0xc>
   b757c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b757e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b7580:	b16a      	cbz	r2, b759e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b7582:	6884      	ldr	r4, [r0, #8]
   b7584:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b7586:	4621      	mov	r1, r4
   b7588:	f7ff ff8e 	bl	b74a8 <_ZN6String7reserveEj>
   b758c:	2800      	cmp	r0, #0
   b758e:	d0f5      	beq.n	b757c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b7590:	6828      	ldr	r0, [r5, #0]
   b7592:	68ab      	ldr	r3, [r5, #8]
   b7594:	4631      	mov	r1, r6
   b7596:	4418      	add	r0, r3
   b7598:	f001 fd8a 	bl	b90b0 <strcpy>
	len = newlen;
   b759c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b759e:	2001      	movs	r0, #1
   b75a0:	e7ed      	b.n	b757e <_ZN6String6concatEPKcj+0xa>

000b75a2 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b75a2:	688a      	ldr	r2, [r1, #8]
   b75a4:	6809      	ldr	r1, [r1, #0]
   b75a6:	f7ff bfe5 	b.w	b7574 <_ZN6String6concatEPKcj>

000b75aa <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b75aa:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b75ac:	2300      	movs	r3, #0
	buf[0] = c;
   b75ae:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b75b2:	2201      	movs	r2, #1
   b75b4:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b75b6:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b75ba:	f7ff ffdb 	bl	b7574 <_ZN6String6concatEPKcj>
}
   b75be:	b003      	add	sp, #12
   b75c0:	f85d fb04 	ldr.w	pc, [sp], #4

000b75c4 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b75c4:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b75c6:	688a      	ldr	r2, [r1, #8]
   b75c8:	6809      	ldr	r1, [r1, #0]
{
   b75ca:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b75cc:	f7ff ffd2 	bl	b7574 <_ZN6String6concatEPKcj>
   b75d0:	b910      	cbnz	r0, b75d8 <_ZplRK15StringSumHelperRK6String+0x14>
   b75d2:	4620      	mov	r0, r4
   b75d4:	f7ff ff51 	bl	b747a <_ZN6String10invalidateEv>
	return a;
}
   b75d8:	4620      	mov	r0, r4
   b75da:	bd10      	pop	{r4, pc}

000b75dc <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b75dc:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b75de:	6882      	ldr	r2, [r0, #8]
   b75e0:	b93a      	cbnz	r2, b75f2 <_ZNK6String6equalsEPKc+0x16>
   b75e2:	b121      	cbz	r1, b75ee <_ZNK6String6equalsEPKc+0x12>
   b75e4:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b75e6:	fab0 f080 	clz	r0, r0
   b75ea:	0940      	lsrs	r0, r0, #5
   b75ec:	e000      	b.n	b75f0 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b75ee:	2001      	movs	r0, #1
}
   b75f0:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b75f2:	6800      	ldr	r0, [r0, #0]
   b75f4:	b909      	cbnz	r1, b75fa <_ZNK6String6equalsEPKc+0x1e>
   b75f6:	7800      	ldrb	r0, [r0, #0]
   b75f8:	e7f5      	b.n	b75e6 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b75fa:	f001 fd4f 	bl	b909c <strcmp>
   b75fe:	e7f2      	b.n	b75e6 <_ZNK6String6equalsEPKc+0xa>

000b7600 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b7600:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b7602:	6883      	ldr	r3, [r0, #8]
   b7604:	4293      	cmp	r3, r2
   b7606:	d907      	bls.n	b7618 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b7608:	6804      	ldr	r4, [r0, #0]
   b760a:	6809      	ldr	r1, [r1, #0]
   b760c:	18a0      	adds	r0, r4, r2
   b760e:	f001 fd7f 	bl	b9110 <strstr>
	if (found == NULL) return -1;
   b7612:	b108      	cbz	r0, b7618 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b7614:	1b00      	subs	r0, r0, r4
}
   b7616:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b7618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b761c:	e7fb      	b.n	b7616 <_ZNK6String7indexOfERKS_j+0x16>

000b761e <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b761e:	2200      	movs	r2, #0
   b7620:	f7ff bfee 	b.w	b7600 <_ZNK6String7indexOfERKS_j>

000b7624 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b7624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b7626:	429a      	cmp	r2, r3
{
   b7628:	460f      	mov	r7, r1
   b762a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b762c:	490c      	ldr	r1, [pc, #48]	; (b7660 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b762e:	bf88      	it	hi
   b7630:	4613      	movhi	r3, r2
{
   b7632:	4614      	mov	r4, r2
   b7634:	4606      	mov	r6, r0
	if (left > right) {
   b7636:	bf84      	itt	hi
   b7638:	462c      	movhi	r4, r5
   b763a:	461d      	movhi	r5, r3
	String out;
   b763c:	f7ff ff61 	bl	b7502 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b7640:	68bb      	ldr	r3, [r7, #8]
   b7642:	42a3      	cmp	r3, r4
   b7644:	d30a      	bcc.n	b765c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b7646:	6839      	ldr	r1, [r7, #0]
   b7648:	42ab      	cmp	r3, r5
   b764a:	bf94      	ite	ls
   b764c:	ebc4 0203 	rsbls	r2, r4, r3
   b7650:	ebc4 0205 	rsbhi	r2, r4, r5
   b7654:	4421      	add	r1, r4
   b7656:	4630      	mov	r0, r6
   b7658:	f7ff ff3a 	bl	b74d0 <_ZN6String4copyEPKcj>
	return out;
}
   b765c:	4630      	mov	r0, r6
   b765e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7660:	000bb335 	.word	0x000bb335

000b7664 <_ZNK6String9substringEj>:
{
   b7664:	b510      	push	{r4, lr}
   b7666:	4604      	mov	r4, r0
	return substring(left, len);
   b7668:	688b      	ldr	r3, [r1, #8]
   b766a:	f7ff ffdb 	bl	b7624 <_ZNK6String9substringEjj>
}
   b766e:	4620      	mov	r0, r4
   b7670:	bd10      	pop	{r4, pc}
	...

000b7674 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   b7674:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   b7676:	6800      	ldr	r0, [r0, #0]
   b7678:	b140      	cbz	r0, b768c <_ZNK6String7toFloatEv+0x18>
   b767a:	f001 fc99 	bl	b8fb0 <atof>
   b767e:	ec51 0b10 	vmov	r0, r1, d0
   b7682:	f001 fc21 	bl	b8ec8 <__aeabi_d2f>
   b7686:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   b768a:	bd08      	pop	{r3, pc}
	return 0;
   b768c:	ed9f 0a01 	vldr	s0, [pc, #4]	; b7694 <_ZNK6String7toFloatEv+0x20>
   b7690:	e7fb      	b.n	b768a <_ZNK6String7toFloatEv+0x16>
   b7692:	bf00      	nop
   b7694:	00000000 	.word	0x00000000

000b7698 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7698:	4b05      	ldr	r3, [pc, #20]	; (b76b0 <_GLOBAL__sub_I_System+0x18>)
   b769a:	2202      	movs	r2, #2
   b769c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b769e:	4b05      	ldr	r3, [pc, #20]	; (b76b4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b76a0:	4a05      	ldr	r2, [pc, #20]	; (b76b8 <_GLOBAL__sub_I_System+0x20>)
   b76a2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b76a4:	2000      	movs	r0, #0
   b76a6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b76aa:	f7fe b9b5 	b.w	b5a18 <set_system_mode>
   b76ae:	bf00      	nop
   b76b0:	2003e6f8 	.word	0x2003e6f8
   b76b4:	2003e6ec 	.word	0x2003e6ec
   b76b8:	ffff0000 	.word	0xffff0000

000b76bc <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b76bc:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b76be:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b76c0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b76c4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b76c6:	2201      	movs	r2, #1
   b76c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b76cc:	f10d 0107 	add.w	r1, sp, #7
   b76d0:	47a0      	blx	r4
}
   b76d2:	b002      	add	sp, #8
   b76d4:	bd10      	pop	{r4, pc}

000b76d6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b76d6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b76d8:	6803      	ldr	r3, [r0, #0]
   b76da:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b76dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b76e0:	46a4      	mov	ip, r4
}
   b76e2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b76e6:	4760      	bx	ip

000b76e8 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b76e8:	b513      	push	{r0, r1, r4, lr}
   b76ea:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b76ec:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b76ee:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b76f2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b76f4:	f10d 0107 	add.w	r1, sp, #7
   b76f8:	2201      	movs	r2, #1
   b76fa:	47a0      	blx	r4
}
   b76fc:	b002      	add	sp, #8
   b76fe:	bd10      	pop	{r4, pc}

000b7700 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b7700:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b7702:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7704:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7708:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b770c:	429a      	cmp	r2, r3
int TCPClient::read() {
   b770e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7710:	d008      	beq.n	b7724 <_ZN9TCPClient4readEv+0x24>
   b7712:	6963      	ldr	r3, [r4, #20]
   b7714:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7718:	1c51      	adds	r1, r2, #1
   b771a:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b771e:	4413      	add	r3, r2
   b7720:	7918      	ldrb	r0, [r3, #4]
}
   b7722:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7724:	6803      	ldr	r3, [r0, #0]
   b7726:	691b      	ldr	r3, [r3, #16]
   b7728:	4798      	blx	r3
   b772a:	2800      	cmp	r0, #0
   b772c:	d1f1      	bne.n	b7712 <_ZN9TCPClient4readEv+0x12>
   b772e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7732:	e7f6      	b.n	b7722 <_ZN9TCPClient4readEv+0x22>

000b7734 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7734:	4770      	bx	lr

000b7736 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b7736:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7738:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b773a:	43c0      	mvns	r0, r0
   b773c:	0fc0      	lsrs	r0, r0, #31
   b773e:	4770      	bx	lr

000b7740 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7740:	4770      	bx	lr
	...

000b7744 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7744:	4b06      	ldr	r3, [pc, #24]	; (b7760 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7746:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7748:	b510      	push	{r4, lr}
   b774a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b774e:	d005      	beq.n	b775c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7750:	4608      	mov	r0, r1
   b7752:	f000 fd15 	bl	b8180 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7756:	2800      	cmp	r0, #0
   b7758:	bf08      	it	eq
   b775a:	2400      	moveq	r4, #0
      }
   b775c:	4620      	mov	r0, r4
   b775e:	bd10      	pop	{r4, pc}
   b7760:	000bb50c 	.word	0x000bb50c

000b7764 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7764:	b510      	push	{r4, lr}
   b7766:	21ac      	movs	r1, #172	; 0xac
   b7768:	4604      	mov	r4, r0
   b776a:	f7fc fc98 	bl	b409e <_ZdlPvj>
   b776e:	4620      	mov	r0, r4
   b7770:	bd10      	pop	{r4, pc}

000b7772 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b7772:	21ac      	movs	r1, #172	; 0xac
   b7774:	f7fc bc93 	b.w	b409e <_ZdlPvj>

000b7778 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b7778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b777c:	f04f 0800 	mov.w	r8, #0
   b7780:	b086      	sub	sp, #24
   b7782:	461c      	mov	r4, r3
   b7784:	f8c0 8004 	str.w	r8, [r0, #4]
   b7788:	4605      	mov	r5, r0
   b778a:	460e      	mov	r6, r1
   b778c:	4617      	mov	r7, r2
    struct timeval tv = {};
   b778e:	4641      	mov	r1, r8
   b7790:	2210      	movs	r2, #16
   b7792:	a802      	add	r0, sp, #8
   b7794:	f001 fc4b 	bl	b902e <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b7798:	1c63      	adds	r3, r4, #1
   b779a:	d009      	beq.n	b77b0 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b779c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b77a0:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b77a4:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b77a8:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b77ac:	435c      	muls	r4, r3
   b77ae:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b77b0:	6968      	ldr	r0, [r5, #20]
   b77b2:	2310      	movs	r3, #16
   b77b4:	9300      	str	r3, [sp, #0]
   b77b6:	6800      	ldr	r0, [r0, #0]
   b77b8:	ab02      	add	r3, sp, #8
   b77ba:	f241 0205 	movw	r2, #4101	; 0x1005
   b77be:	f640 71ff 	movw	r1, #4095	; 0xfff
   b77c2:	f7fe f879 	bl	b58b8 <sock_setsockopt>
    if (ret < 0) {
   b77c6:	2800      	cmp	r0, #0
   b77c8:	da07      	bge.n	b77da <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b77ca:	f7fe f9e9 	bl	b5ba0 <__errno>
   b77ce:	6803      	ldr	r3, [r0, #0]
   b77d0:	606b      	str	r3, [r5, #4]
        return 0;
   b77d2:	2000      	movs	r0, #0
}
   b77d4:	b006      	add	sp, #24
   b77d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b77da:	6968      	ldr	r0, [r5, #20]
   b77dc:	2300      	movs	r3, #0
   b77de:	6800      	ldr	r0, [r0, #0]
   b77e0:	463a      	mov	r2, r7
   b77e2:	4631      	mov	r1, r6
   b77e4:	f7fe f888 	bl	b58f8 <sock_send>
    if (ret < 0) {
   b77e8:	1e03      	subs	r3, r0, #0
   b77ea:	dbee      	blt.n	b77ca <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b77ec:	4618      	mov	r0, r3
   b77ee:	e7f1      	b.n	b77d4 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b77f0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b77f0:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b77f2:	6984      	ldr	r4, [r0, #24]
   b77f4:	4b0a      	ldr	r3, [pc, #40]	; (b7820 <_ZN9TCPClientD1Ev+0x30>)
   b77f6:	6003      	str	r3, [r0, #0]
   b77f8:	4605      	mov	r5, r0
   b77fa:	b17c      	cbz	r4, b781c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b77fc:	6863      	ldr	r3, [r4, #4]
   b77fe:	3b01      	subs	r3, #1
   b7800:	6063      	str	r3, [r4, #4]
   b7802:	b95b      	cbnz	r3, b781c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b7804:	6823      	ldr	r3, [r4, #0]
   b7806:	4620      	mov	r0, r4
   b7808:	689b      	ldr	r3, [r3, #8]
   b780a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b780c:	68a3      	ldr	r3, [r4, #8]
   b780e:	3b01      	subs	r3, #1
   b7810:	60a3      	str	r3, [r4, #8]
   b7812:	b91b      	cbnz	r3, b781c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b7814:	6823      	ldr	r3, [r4, #0]
   b7816:	4620      	mov	r0, r4
   b7818:	68db      	ldr	r3, [r3, #12]
   b781a:	4798      	blx	r3
   b781c:	4628      	mov	r0, r5
   b781e:	bd38      	pop	{r3, r4, r5, pc}
   b7820:	000bb640 	.word	0x000bb640

000b7824 <_ZN9TCPClientD0Ev>:
   b7824:	b510      	push	{r4, lr}
   b7826:	4604      	mov	r4, r0
   b7828:	f7ff ffe2 	bl	b77f0 <_ZN9TCPClientD1Ev>
   b782c:	4620      	mov	r0, r4
   b782e:	211c      	movs	r1, #28
   b7830:	f7fc fc35 	bl	b409e <_ZdlPvj>
   b7834:	4620      	mov	r0, r4
   b7836:	bd10      	pop	{r4, pc}

000b7838 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7838:	b530      	push	{r4, r5, lr}
   b783a:	b087      	sub	sp, #28
   b783c:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b783e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b7840:	4668      	mov	r0, sp
   b7842:	f7ff fcaf 	bl	b71a4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7848:	3404      	adds	r4, #4
   b784a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b784c:	682b      	ldr	r3, [r5, #0]
   b784e:	7023      	strb	r3, [r4, #0]
    }
   b7850:	b007      	add	sp, #28
   b7852:	bd30      	pop	{r4, r5, pc}

000b7854 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7854:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7856:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7858:	4b05      	ldr	r3, [pc, #20]	; (b7870 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b785a:	4604      	mov	r4, r0
   b785c:	358c      	adds	r5, #140	; 0x8c
   b785e:	f844 3b04 	str.w	r3, [r4], #4
   b7862:	4606      	mov	r6, r0
   b7864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7868:	682b      	ldr	r3, [r5, #0]
   b786a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b786c:	4630      	mov	r0, r6
   b786e:	bd70      	pop	{r4, r5, r6, pc}
   b7870:	000bb5b8 	.word	0x000bb5b8

000b7874 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7878:	4698      	mov	r8, r3
    stop();
   b787a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b787c:	b093      	sub	sp, #76	; 0x4c
   b787e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b7880:	2400      	movs	r4, #0
    stop();
   b7882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7884:	4606      	mov	r6, r0
   b7886:	4617      	mov	r7, r2
    stop();
   b7888:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b788a:	4628      	mov	r0, r5
   b788c:	466b      	mov	r3, sp
   b788e:	4622      	mov	r2, r4
   b7890:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b7892:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7894:	f7fe f808 	bl	b58a8 <netdb_getaddrinfo>
   b7898:	4605      	mov	r5, r0
   b789a:	2800      	cmp	r0, #0
   b789c:	d163      	bne.n	b7966 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b789e:	9b00      	ldr	r3, [sp, #0]
   b78a0:	2b00      	cmp	r3, #0
   b78a2:	d04b      	beq.n	b793c <_ZN9TCPClient7connectEPKctm+0xc8>
   b78a4:	695b      	ldr	r3, [r3, #20]
   b78a6:	2b00      	cmp	r3, #0
   b78a8:	d048      	beq.n	b793c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b78aa:	a806      	add	r0, sp, #24
   b78ac:	f7ff fc36 	bl	b711c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b78b0:	9b00      	ldr	r3, [sp, #0]
   b78b2:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b78b4:	7863      	ldrb	r3, [r4, #1]
   b78b6:	2b02      	cmp	r3, #2
   b78b8:	d104      	bne.n	b78c4 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b78ba:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b78bc:	a806      	add	r0, sp, #24
   b78be:	f7ff ffbb 	bl	b7838 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b78c2:	e026      	b.n	b7912 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b78c4:	2b0a      	cmp	r3, #10
   b78c6:	d124      	bne.n	b7912 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b78c8:	2211      	movs	r2, #17
   b78ca:	4629      	mov	r1, r5
   b78cc:	a801      	add	r0, sp, #4
   b78ce:	f001 fbae 	bl	b902e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b78d2:	68a3      	ldr	r3, [r4, #8]
   b78d4:	2b00      	cmp	r3, #0
   b78d6:	d038      	beq.n	b794a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b78d8:	f104 0308 	add.w	r3, r4, #8
   b78dc:	f10d 0c04 	add.w	ip, sp, #4
   b78e0:	3418      	adds	r4, #24
   b78e2:	6818      	ldr	r0, [r3, #0]
   b78e4:	6859      	ldr	r1, [r3, #4]
   b78e6:	4662      	mov	r2, ip
   b78e8:	c203      	stmia	r2!, {r0, r1}
   b78ea:	3308      	adds	r3, #8
   b78ec:	42a3      	cmp	r3, r4
   b78ee:	4694      	mov	ip, r2
   b78f0:	d1f7      	bne.n	b78e2 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b78f2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b78f4:	a901      	add	r1, sp, #4
   b78f6:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b78f8:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b78fc:	f7ff fc1c 	bl	b7138 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7900:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7904:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7908:	ac07      	add	r4, sp, #28
   b790a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b790c:	f8dc 3000 	ldr.w	r3, [ip]
   b7910:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b7912:	a806      	add	r0, sp, #24
   b7914:	f7ff fc22 	bl	b715c <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7918:	b180      	cbz	r0, b793c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b791a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b791c:	ad07      	add	r5, sp, #28
   b791e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7922:	4b12      	ldr	r3, [pc, #72]	; (b796c <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7924:	930c      	str	r3, [sp, #48]	; 0x30
   b7926:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7928:	ac0d      	add	r4, sp, #52	; 0x34
   b792a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b792c:	682b      	ldr	r3, [r5, #0]
   b792e:	7023      	strb	r3, [r4, #0]
   b7930:	463a      	mov	r2, r7
   b7932:	4643      	mov	r3, r8
   b7934:	a90c      	add	r1, sp, #48	; 0x30
   b7936:	4630      	mov	r0, r6
   b7938:	47c8      	blx	r9
   b793a:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b793c:	9800      	ldr	r0, [sp, #0]
   b793e:	f7fd ffab 	bl	b5898 <netdb_freeaddrinfo>
}
   b7942:	4628      	mov	r0, r5
   b7944:	b013      	add	sp, #76	; 0x4c
   b7946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b794a:	68e3      	ldr	r3, [r4, #12]
   b794c:	2b00      	cmp	r3, #0
   b794e:	d1c3      	bne.n	b78d8 <_ZN9TCPClient7connectEPKctm+0x64>
   b7950:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7954:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7958:	f7fd ff8e 	bl	b5878 <inet_htonl>
   b795c:	4581      	cmp	r9, r0
   b795e:	d1bb      	bne.n	b78d8 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b7960:	f104 0114 	add.w	r1, r4, #20
   b7964:	e7aa      	b.n	b78bc <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7966:	4625      	mov	r5, r4
   b7968:	e7e8      	b.n	b793c <_ZN9TCPClient7connectEPKctm+0xc8>
   b796a:	bf00      	nop
   b796c:	000bb5b8 	.word	0x000bb5b8

000b7970 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b7970:	b538      	push	{r3, r4, r5, lr}
   b7972:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7974:	681a      	ldr	r2, [r3, #0]
   b7976:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7978:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b797a:	da10      	bge.n	b799e <_ZN9TCPClient9connectedEv+0x2e>
   b797c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7980:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7984:	429a      	cmp	r2, r3
   b7986:	d10a      	bne.n	b799e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7988:	6803      	ldr	r3, [r0, #0]
   b798a:	691b      	ldr	r3, [r3, #16]
   b798c:	4798      	blx	r3
        if (!rv) {
   b798e:	4604      	mov	r4, r0
   b7990:	b928      	cbnz	r0, b799e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7992:	682b      	ldr	r3, [r5, #0]
   b7994:	4628      	mov	r0, r5
   b7996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7998:	4798      	blx	r3
        rv = available();
   b799a:	4620      	mov	r0, r4
}
   b799c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b799e:	2001      	movs	r0, #1
   b79a0:	e7fc      	b.n	b799c <_ZN9TCPClient9connectedEv+0x2c>

000b79a2 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b79a2:	b510      	push	{r4, lr}
   b79a4:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b79a6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b79aa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b79ae:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b79b0:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b79b2:	d005      	beq.n	b79c0 <_ZN9TCPClient4peekEv+0x1e>
   b79b4:	6963      	ldr	r3, [r4, #20]
   b79b6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b79ba:	4413      	add	r3, r2
   b79bc:	7918      	ldrb	r0, [r3, #4]
}
   b79be:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b79c0:	6803      	ldr	r3, [r0, #0]
   b79c2:	691b      	ldr	r3, [r3, #16]
   b79c4:	4798      	blx	r3
   b79c6:	2800      	cmp	r0, #0
   b79c8:	d1f4      	bne.n	b79b4 <_ZN9TCPClient4peekEv+0x12>
   b79ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b79ce:	e7f6      	b.n	b79be <_ZN9TCPClient4peekEv+0x1c>

000b79d0 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b79d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b79d2:	6943      	ldr	r3, [r0, #20]
   b79d4:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b79d6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b79da:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b79de:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b79e0:	4605      	mov	r5, r0
   b79e2:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b79e4:	d016      	beq.n	b7a14 <_ZN9TCPClient4readEPhj+0x44>
   b79e6:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b79e8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b79ec:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b79f0:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b79f2:	42bc      	cmp	r4, r7
   b79f4:	bf28      	it	cs
   b79f6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b79f8:	3304      	adds	r3, #4
   b79fa:	4622      	mov	r2, r4
   b79fc:	4419      	add	r1, r3
   b79fe:	4630      	mov	r0, r6
   b7a00:	f001 faed 	bl	b8fde <memcpy>
   b7a04:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7a06:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7a0a:	4423      	add	r3, r4
   b7a0c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7a10:	4620      	mov	r0, r4
   b7a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7a14:	6803      	ldr	r3, [r0, #0]
   b7a16:	691b      	ldr	r3, [r3, #16]
   b7a18:	4798      	blx	r3
   b7a1a:	2800      	cmp	r0, #0
   b7a1c:	d1e3      	bne.n	b79e6 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b7a1e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b7a22:	e7f5      	b.n	b7a10 <_ZN9TCPClient4readEPhj+0x40>

000b7a24 <_ZN9TCPClient12flush_bufferEv>:
   b7a24:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7a26:	2300      	movs	r3, #0
   b7a28:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7a2c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b7a2e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b7a32:	4770      	bx	lr

000b7a34 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7a38:	461f      	mov	r7, r3
    stop();
   b7a3a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7a3c:	460c      	mov	r4, r1
    stop();
   b7a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7a40:	b08a      	sub	sp, #40	; 0x28
   b7a42:	4605      	mov	r5, r0
   b7a44:	4616      	mov	r6, r2
    stop();
   b7a46:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7a48:	7d23      	ldrb	r3, [r4, #20]
   b7a4a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b7a4e:	2b04      	cmp	r3, #4
   b7a50:	bf0c      	ite	eq
   b7a52:	2002      	moveq	r0, #2
   b7a54:	200a      	movne	r0, #10
   b7a56:	2206      	movs	r2, #6
   b7a58:	2101      	movs	r1, #1
   b7a5a:	f7fd ff55 	bl	b5908 <sock_socket>
   b7a5e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7a62:	696b      	ldr	r3, [r5, #20]
   b7a64:	681b      	ldr	r3, [r3, #0]
   b7a66:	2b00      	cmp	r3, #0
   b7a68:	da08      	bge.n	b7a7c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7a6a:	682b      	ldr	r3, [r5, #0]
   b7a6c:	4628      	mov	r0, r5
   b7a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7a70:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7a72:	4798      	blx	r3
}
   b7a74:	4620      	mov	r0, r4
   b7a76:	b00a      	add	sp, #40	; 0x28
   b7a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7a7c:	4628      	mov	r0, r5
   b7a7e:	f7ff ffd1 	bl	b7a24 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7a82:	b1b7      	cbz	r7, b7ab2 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7a84:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7a86:	a903      	add	r1, sp, #12
   b7a88:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7a8a:	9303      	str	r3, [sp, #12]
   b7a8c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7a90:	f7fd fee2 	bl	b5858 <if_index_to_name>
   b7a94:	2800      	cmp	r0, #0
   b7a96:	d1e8      	bne.n	b7a6a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7a98:	6968      	ldr	r0, [r5, #20]
   b7a9a:	2306      	movs	r3, #6
   b7a9c:	9300      	str	r3, [sp, #0]
   b7a9e:	6800      	ldr	r0, [r0, #0]
   b7aa0:	ab03      	add	r3, sp, #12
   b7aa2:	f241 020b 	movw	r2, #4107	; 0x100b
   b7aa6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7aaa:	f7fd ff05 	bl	b58b8 <sock_setsockopt>
   b7aae:	2800      	cmp	r0, #0
   b7ab0:	d1db      	bne.n	b7a6a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7ab2:	221c      	movs	r2, #28
   b7ab4:	2100      	movs	r1, #0
   b7ab6:	a803      	add	r0, sp, #12
   b7ab8:	f001 fab9 	bl	b902e <memset>
    if (ip.version() == 4) {
   b7abc:	7d23      	ldrb	r3, [r4, #20]
   b7abe:	2b04      	cmp	r3, #4
   b7ac0:	d11d      	bne.n	b7afe <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7ac2:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7ac6:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7ac8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7acc:	f7fd fedc 	bl	b5888 <inet_htons>
   b7ad0:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7ad4:	6860      	ldr	r0, [r4, #4]
   b7ad6:	f7fd fecf 	bl	b5878 <inet_htonl>
   b7ada:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7adc:	696b      	ldr	r3, [r5, #20]
   b7ade:	221c      	movs	r2, #28
   b7ae0:	6818      	ldr	r0, [r3, #0]
   b7ae2:	a903      	add	r1, sp, #12
   b7ae4:	f7fd fef8 	bl	b58d8 <sock_connect>
   b7ae8:	2800      	cmp	r0, #0
   b7aea:	d1be      	bne.n	b7a6a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7aec:	3404      	adds	r4, #4
   b7aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7af0:	696d      	ldr	r5, [r5, #20]
   b7af2:	358c      	adds	r5, #140	; 0x8c
   b7af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7af6:	6823      	ldr	r3, [r4, #0]
   b7af8:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b7afa:	2401      	movs	r4, #1
   b7afc:	e7ba      	b.n	b7a74 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b7afe:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7b02:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7b04:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7b08:	f7fd febe 	bl	b5888 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7b0c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b7b0e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7b12:	1d23      	adds	r3, r4, #4
   b7b14:	f104 0714 	add.w	r7, r4, #20
   b7b18:	6818      	ldr	r0, [r3, #0]
   b7b1a:	6859      	ldr	r1, [r3, #4]
   b7b1c:	4632      	mov	r2, r6
   b7b1e:	c203      	stmia	r2!, {r0, r1}
   b7b20:	3308      	adds	r3, #8
   b7b22:	42bb      	cmp	r3, r7
   b7b24:	4616      	mov	r6, r2
   b7b26:	d1f7      	bne.n	b7b18 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7b28:	e7d8      	b.n	b7adc <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7b2c <_ZN9TCPClient9availableEv>:
{
   b7b2c:	b530      	push	{r4, r5, lr}
   b7b2e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7b30:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7b34:	b08b      	sub	sp, #44	; 0x2c
   b7b36:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7b38:	b12b      	cbz	r3, b7b46 <_ZN9TCPClient9availableEv+0x1a>
   b7b3a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b7b3e:	429a      	cmp	r2, r3
   b7b40:	d101      	bne.n	b7b46 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b7b42:	f7ff ff6f 	bl	b7a24 <_ZN9TCPClient12flush_bufferEv>
   b7b46:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7b48:	6808      	ldr	r0, [r1, #0]
   b7b4a:	2800      	cmp	r0, #0
   b7b4c:	db18      	blt.n	b7b80 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b7b4e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7b52:	2d7f      	cmp	r5, #127	; 0x7f
   b7b54:	d814      	bhi.n	b7b80 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7b56:	3104      	adds	r1, #4
   b7b58:	2308      	movs	r3, #8
   b7b5a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b7b5e:	4429      	add	r1, r5
   b7b60:	f7fd fec2 	bl	b58e8 <sock_recv>
            if (ret > 0) {
   b7b64:	2800      	cmp	r0, #0
   b7b66:	dd13      	ble.n	b7b90 <_ZN9TCPClient9availableEv+0x64>
   b7b68:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7b6a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7b6e:	b90a      	cbnz	r2, b7b74 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7b70:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7b74:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7b76:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7b7a:	4410      	add	r0, r2
   b7b7c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7b80:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7b82:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7b86:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7b8a:	1ac0      	subs	r0, r0, r3
   b7b8c:	b00b      	add	sp, #44	; 0x2c
   b7b8e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7b90:	f7fe f806 	bl	b5ba0 <__errno>
   b7b94:	6803      	ldr	r3, [r0, #0]
   b7b96:	2b0b      	cmp	r3, #11
   b7b98:	d0f2      	beq.n	b7b80 <_ZN9TCPClient9availableEv+0x54>
   b7b9a:	f7fe f801 	bl	b5ba0 <__errno>
   b7b9e:	6803      	ldr	r3, [r0, #0]
   b7ba0:	2b0b      	cmp	r3, #11
   b7ba2:	d0ed      	beq.n	b7b80 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7ba4:	2320      	movs	r3, #32
   b7ba6:	2500      	movs	r5, #0
   b7ba8:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7bac:	f7fd fff8 	bl	b5ba0 <__errno>
   b7bb0:	6803      	ldr	r3, [r0, #0]
   b7bb2:	9301      	str	r3, [sp, #4]
   b7bb4:	4b08      	ldr	r3, [pc, #32]	; (b7bd8 <_ZN9TCPClient9availableEv+0xac>)
   b7bb6:	4909      	ldr	r1, [pc, #36]	; (b7bdc <_ZN9TCPClient9availableEv+0xb0>)
   b7bb8:	9300      	str	r3, [sp, #0]
   b7bba:	aa02      	add	r2, sp, #8
   b7bbc:	462b      	mov	r3, r5
   b7bbe:	2032      	movs	r0, #50	; 0x32
   b7bc0:	f7fd ff22 	bl	b5a08 <log_message>
                    sock_close(d_->sock);
   b7bc4:	6963      	ldr	r3, [r4, #20]
   b7bc6:	6818      	ldr	r0, [r3, #0]
   b7bc8:	f7fd fe7e 	bl	b58c8 <sock_close>
   b7bcc:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7bce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7bd2:	601a      	str	r2, [r3, #0]
   b7bd4:	e7d4      	b.n	b7b80 <_ZN9TCPClient9availableEv+0x54>
   b7bd6:	bf00      	nop
   b7bd8:	000bb60b 	.word	0x000bb60b
   b7bdc:	000bb604 	.word	0x000bb604

000b7be0 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7be0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7be2:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7be4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7be6:	6818      	ldr	r0, [r3, #0]
   b7be8:	2800      	cmp	r0, #0
   b7bea:	db01      	blt.n	b7bf0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7bec:	f7fd fe6c 	bl	b58c8 <sock_close>
   b7bf0:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7bf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7bf6:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b7bf8:	6960      	ldr	r0, [r4, #20]
   b7bfa:	2211      	movs	r2, #17
   b7bfc:	2100      	movs	r1, #0
   b7bfe:	308c      	adds	r0, #140	; 0x8c
   b7c00:	f001 fa15 	bl	b902e <memset>
    flush_buffer();
   b7c04:	4620      	mov	r0, r4
}
   b7c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7c0a:	f7ff bf0b 	b.w	b7a24 <_ZN9TCPClient12flush_bufferEv>

000b7c0e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7c0e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7c10:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7c12:	4604      	mov	r4, r0
          total(0) {
   b7c14:	6001      	str	r1, [r0, #0]
   b7c16:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7c1a:	3088      	adds	r0, #136	; 0x88
   b7c1c:	f7ff fa7e 	bl	b711c <_ZN9IPAddressC1Ev>
}
   b7c20:	4620      	mov	r0, r4
   b7c22:	bd10      	pop	{r4, pc}

000b7c24 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7c24:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7c26:	2300      	movs	r3, #0
   b7c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7c2c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7c30:	4a0e      	ldr	r2, [pc, #56]	; (b7c6c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7c32:	6103      	str	r3, [r0, #16]
   b7c34:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7c36:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7c38:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7c3a:	20ac      	movs	r0, #172	; 0xac
   b7c3c:	9101      	str	r1, [sp, #4]
   b7c3e:	f7fc fa2a 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7c42:	1e05      	subs	r5, r0, #0
   b7c44:	f105 060c 	add.w	r6, r5, #12
   b7c48:	d008      	beq.n	b7c5c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7c4a:	2301      	movs	r3, #1
   b7c4c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7c50:	4b07      	ldr	r3, [pc, #28]	; (b7c70 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7c52:	9901      	ldr	r1, [sp, #4]
   b7c54:	602b      	str	r3, [r5, #0]
   b7c56:	4630      	mov	r0, r6
   b7c58:	f7ff ffd9 	bl	b7c0e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7c5c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b7c5e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7c62:	f7ff fedf 	bl	b7a24 <_ZN9TCPClient12flush_bufferEv>
}
   b7c66:	b002      	add	sp, #8
   b7c68:	bd70      	pop	{r4, r5, r6, pc}
   b7c6a:	bf00      	nop
   b7c6c:	000bb640 	.word	0x000bb640
   b7c70:	000bb624 	.word	0x000bb624

000b7c74 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7c74:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7c76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b7c7a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7c7c:	f7ff ffd2 	bl	b7c24 <_ZN9TCPClientC1Ei>
}
   b7c80:	4620      	mov	r0, r4
   b7c82:	bd10      	pop	{r4, pc}

000b7c84 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7c84:	b510      	push	{r4, lr}
   b7c86:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7c88:	6800      	ldr	r0, [r0, #0]
   b7c8a:	2800      	cmp	r0, #0
   b7c8c:	db01      	blt.n	b7c92 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b7c8e:	f7fd fe1b 	bl	b58c8 <sock_close>
    }
}
   b7c92:	4620      	mov	r0, r4
   b7c94:	bd10      	pop	{r4, pc}

000b7c96 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7c96:	300c      	adds	r0, #12
   b7c98:	f7ff bff4 	b.w	b7c84 <_ZN9TCPClient4DataD1Ev>

000b7c9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7c9c:	4b02      	ldr	r3, [pc, #8]	; (b7ca8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7c9e:	681a      	ldr	r2, [r3, #0]
   b7ca0:	4b02      	ldr	r3, [pc, #8]	; (b7cac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7ca2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7ca4:	4770      	bx	lr
   b7ca6:	bf00      	nop
   b7ca8:	20035618 	.word	0x20035618
   b7cac:	2003e6fc 	.word	0x2003e6fc

000b7cb0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7cb0:	4770      	bx	lr

000b7cb2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7cb2:	7441      	strb	r1, [r0, #17]
}
   b7cb4:	4770      	bx	lr

000b7cb6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7cb6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7cb8:	7c00      	ldrb	r0, [r0, #16]
   b7cba:	f7fd fe55 	bl	b5968 <hal_usart_available_data_for_write>
}
   b7cbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7cc2:	bd08      	pop	{r3, pc}

000b7cc4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7cc4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7cc6:	7c00      	ldrb	r0, [r0, #16]
   b7cc8:	f7fd fe2e 	bl	b5928 <hal_usart_available>
}
   b7ccc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7cd0:	bd08      	pop	{r3, pc}

000b7cd2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7cd2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7cd4:	7c00      	ldrb	r0, [r0, #16]
   b7cd6:	f7fd fe37 	bl	b5948 <hal_usart_peek>
}
   b7cda:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7cde:	bd08      	pop	{r3, pc}

000b7ce0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7ce0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7ce2:	7c00      	ldrb	r0, [r0, #16]
   b7ce4:	f7fd fe28 	bl	b5938 <hal_usart_read>
}
   b7ce8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7cec:	bd08      	pop	{r3, pc}

000b7cee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7cee:	7c00      	ldrb	r0, [r0, #16]
   b7cf0:	f7fd be32 	b.w	b5958 <hal_usart_flush>

000b7cf4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7cf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7cf6:	7c45      	ldrb	r5, [r0, #17]
{
   b7cf8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7cfa:	b12d      	cbz	r5, b7d08 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7cfc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7cfe:	b003      	add	sp, #12
   b7d00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7d04:	f7fd be08 	b.w	b5918 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7d08:	7c00      	ldrb	r0, [r0, #16]
   b7d0a:	9101      	str	r1, [sp, #4]
   b7d0c:	f7fd fe2c 	bl	b5968 <hal_usart_available_data_for_write>
   b7d10:	2800      	cmp	r0, #0
   b7d12:	9901      	ldr	r1, [sp, #4]
   b7d14:	dcf2      	bgt.n	b7cfc <_ZN11USARTSerial5writeEh+0x8>
}
   b7d16:	4628      	mov	r0, r5
   b7d18:	b003      	add	sp, #12
   b7d1a:	bd30      	pop	{r4, r5, pc}

000b7d1c <_ZN11USARTSerialD0Ev>:
   b7d1c:	b510      	push	{r4, lr}
   b7d1e:	2114      	movs	r1, #20
   b7d20:	4604      	mov	r4, r0
   b7d22:	f7fc f9bc 	bl	b409e <_ZdlPvj>
   b7d26:	4620      	mov	r0, r4
   b7d28:	bd10      	pop	{r4, pc}
	...

000b7d2c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7d2c:	b510      	push	{r4, lr}
   b7d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7d32:	4604      	mov	r4, r0
   b7d34:	4608      	mov	r0, r1
   b7d36:	4611      	mov	r1, r2
   b7d38:	2200      	movs	r2, #0
   b7d3a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7d3e:	4b04      	ldr	r3, [pc, #16]	; (b7d50 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7d40:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7d42:	2301      	movs	r3, #1
  _serial = serial;
   b7d44:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7d46:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7d48:	f7fd fe16 	bl	b5978 <hal_usart_init_ex>
}
   b7d4c:	4620      	mov	r0, r4
   b7d4e:	bd10      	pop	{r4, pc}
   b7d50:	000bb6a8 	.word	0x000bb6a8

000b7d54 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7d54:	7441      	strb	r1, [r0, #17]
}
   b7d56:	4770      	bx	lr

000b7d58 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7d58:	4770      	bx	lr

000b7d5a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7d5a:	4770      	bx	lr

000b7d5c <_ZN9USBSerial4readEv>:
{
   b7d5c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7d5e:	2100      	movs	r1, #0
   b7d60:	7c00      	ldrb	r0, [r0, #16]
   b7d62:	f7fd fe31 	bl	b59c8 <HAL_USB_USART_Receive_Data>
}
   b7d66:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7d6a:	bd08      	pop	{r3, pc}

000b7d6c <_ZN9USBSerial4peekEv>:
{
   b7d6c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7d6e:	2101      	movs	r1, #1
   b7d70:	7c00      	ldrb	r0, [r0, #16]
   b7d72:	f7fd fe29 	bl	b59c8 <HAL_USB_USART_Receive_Data>
}
   b7d76:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7d7a:	bd08      	pop	{r3, pc}

000b7d7c <_ZN9USBSerial17availableForWriteEv>:
{
   b7d7c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7d7e:	7c00      	ldrb	r0, [r0, #16]
   b7d80:	f7fd fe1a 	bl	b59b8 <HAL_USB_USART_Available_Data_For_Write>
}
   b7d84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7d88:	bd08      	pop	{r3, pc}

000b7d8a <_ZN9USBSerial9availableEv>:
{
   b7d8a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7d8c:	7c00      	ldrb	r0, [r0, #16]
   b7d8e:	f7fd fe0b 	bl	b59a8 <HAL_USB_USART_Available_Data>
}
   b7d92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7d96:	bd08      	pop	{r3, pc}

000b7d98 <_ZN9USBSerial5writeEh>:
{
   b7d98:	b513      	push	{r0, r1, r4, lr}
   b7d9a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7d9c:	7c00      	ldrb	r0, [r0, #16]
{
   b7d9e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7da0:	f7fd fe0a 	bl	b59b8 <HAL_USB_USART_Available_Data_For_Write>
   b7da4:	2800      	cmp	r0, #0
   b7da6:	9901      	ldr	r1, [sp, #4]
   b7da8:	dc01      	bgt.n	b7dae <_ZN9USBSerial5writeEh+0x16>
   b7daa:	7c60      	ldrb	r0, [r4, #17]
   b7dac:	b120      	cbz	r0, b7db8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7dae:	7c20      	ldrb	r0, [r4, #16]
   b7db0:	f7fd fe12 	bl	b59d8 <HAL_USB_USART_Send_Data>
   b7db4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7db8:	b002      	add	sp, #8
   b7dba:	bd10      	pop	{r4, pc}

000b7dbc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7dbc:	7c00      	ldrb	r0, [r0, #16]
   b7dbe:	f7fd be13 	b.w	b59e8 <HAL_USB_USART_Flush_Data>

000b7dc2 <_ZN9USBSerialD0Ev>:
   b7dc2:	b510      	push	{r4, lr}
   b7dc4:	2114      	movs	r1, #20
   b7dc6:	4604      	mov	r4, r0
   b7dc8:	f7fc f969 	bl	b409e <_ZdlPvj>
   b7dcc:	4620      	mov	r0, r4
   b7dce:	bd10      	pop	{r4, pc}

000b7dd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7dd0:	b510      	push	{r4, lr}
   b7dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7dd6:	4604      	mov	r4, r0
   b7dd8:	4608      	mov	r0, r1
   b7dda:	2100      	movs	r1, #0
   b7ddc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7de0:	4b04      	ldr	r3, [pc, #16]	; (b7df4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7de2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7de4:	2301      	movs	r3, #1
  _serial = serial;
   b7de6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7de8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7dea:	4611      	mov	r1, r2
   b7dec:	f7fd fdcc 	bl	b5988 <HAL_USB_USART_Init>
}
   b7df0:	4620      	mov	r0, r4
   b7df2:	bd10      	pop	{r4, pc}
   b7df4:	000bb6d8 	.word	0x000bb6d8

000b7df8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7df8:	7c00      	ldrb	r0, [r0, #16]
   b7dfa:	2200      	movs	r2, #0
   b7dfc:	f7fd bdcc 	b.w	b5998 <HAL_USB_USART_Begin>

000b7e00 <_Z19acquireSerialBufferv>:
{
   b7e00:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7e02:	2214      	movs	r2, #20
{
   b7e04:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7e06:	2100      	movs	r1, #0
   b7e08:	f001 f911 	bl	b902e <memset>
}
   b7e0c:	4620      	mov	r0, r4
   b7e0e:	bd10      	pop	{r4, pc}

000b7e10 <_Z16_fetch_usbserialv>:
{
   b7e10:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7e12:	4c0f      	ldr	r4, [pc, #60]	; (b7e50 <_Z16_fetch_usbserialv+0x40>)
{
   b7e14:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7e16:	a803      	add	r0, sp, #12
   b7e18:	f7ff fff2 	bl	b7e00 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7e1c:	7821      	ldrb	r1, [r4, #0]
   b7e1e:	f3bf 8f5b 	dmb	ish
   b7e22:	f011 0101 	ands.w	r1, r1, #1
   b7e26:	d10f      	bne.n	b7e48 <_Z16_fetch_usbserialv+0x38>
   b7e28:	4620      	mov	r0, r4
   b7e2a:	9101      	str	r1, [sp, #4]
   b7e2c:	f7fc f939 	bl	b40a2 <__cxa_guard_acquire>
   b7e30:	9901      	ldr	r1, [sp, #4]
   b7e32:	b148      	cbz	r0, b7e48 <_Z16_fetch_usbserialv+0x38>
   b7e34:	aa03      	add	r2, sp, #12
   b7e36:	4807      	ldr	r0, [pc, #28]	; (b7e54 <_Z16_fetch_usbserialv+0x44>)
   b7e38:	f7ff ffca 	bl	b7dd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7e3c:	4620      	mov	r0, r4
   b7e3e:	f7fc f935 	bl	b40ac <__cxa_guard_release>
   b7e42:	4805      	ldr	r0, [pc, #20]	; (b7e58 <_Z16_fetch_usbserialv+0x48>)
   b7e44:	f001 f8ae 	bl	b8fa4 <atexit>
	return _usbserial;
}
   b7e48:	4802      	ldr	r0, [pc, #8]	; (b7e54 <_Z16_fetch_usbserialv+0x44>)
   b7e4a:	b008      	add	sp, #32
   b7e4c:	bd10      	pop	{r4, pc}
   b7e4e:	bf00      	nop
   b7e50:	2003e700 	.word	0x2003e700
   b7e54:	2003e704 	.word	0x2003e704
   b7e58:	000b7d59 	.word	0x000b7d59

000b7e5c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7e5c:	2200      	movs	r2, #0
   b7e5e:	6840      	ldr	r0, [r0, #4]
   b7e60:	4611      	mov	r1, r2
   b7e62:	f7fd be1d 	b.w	b5aa0 <network_ready>

000b7e66 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7e66:	2200      	movs	r2, #0
   b7e68:	6840      	ldr	r0, [r0, #4]
   b7e6a:	4611      	mov	r1, r2
   b7e6c:	f7fd be38 	b.w	b5ae0 <network_listening>

000b7e70 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7e70:	2200      	movs	r2, #0
   b7e72:	6840      	ldr	r0, [r0, #4]
   b7e74:	4611      	mov	r1, r2
   b7e76:	f7fd be43 	b.w	b5b00 <network_get_listen_timeout>

000b7e7a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7e7a:	6840      	ldr	r0, [r0, #4]
   b7e7c:	2200      	movs	r2, #0
   b7e7e:	f7fd be37 	b.w	b5af0 <network_set_listen_timeout>

000b7e82 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7e82:	6840      	ldr	r0, [r0, #4]
   b7e84:	2200      	movs	r2, #0
   b7e86:	f081 0101 	eor.w	r1, r1, #1
   b7e8a:	f7fd be21 	b.w	b5ad0 <network_listen>

000b7e8e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7e8e:	2300      	movs	r3, #0
   b7e90:	6840      	ldr	r0, [r0, #4]
   b7e92:	461a      	mov	r2, r3
   b7e94:	4619      	mov	r1, r3
   b7e96:	f7fd be13 	b.w	b5ac0 <network_off>

000b7e9a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7e9a:	2300      	movs	r3, #0
   b7e9c:	6840      	ldr	r0, [r0, #4]
   b7e9e:	461a      	mov	r2, r3
   b7ea0:	4619      	mov	r1, r3
   b7ea2:	f7fd be05 	b.w	b5ab0 <network_on>

000b7ea6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7ea6:	2200      	movs	r2, #0
   b7ea8:	6840      	ldr	r0, [r0, #4]
   b7eaa:	4611      	mov	r1, r2
   b7eac:	f7fd bde8 	b.w	b5a80 <network_connecting>

000b7eb0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7eb0:	6840      	ldr	r0, [r0, #4]
   b7eb2:	2200      	movs	r2, #0
   b7eb4:	2102      	movs	r1, #2
   b7eb6:	f7fd bdeb 	b.w	b5a90 <network_disconnect>

000b7eba <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7eba:	2300      	movs	r3, #0
   b7ebc:	6840      	ldr	r0, [r0, #4]
   b7ebe:	461a      	mov	r2, r3
   b7ec0:	f7fd bdd6 	b.w	b5a70 <network_connect>

000b7ec4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7ec4:	4b02      	ldr	r3, [pc, #8]	; (b7ed0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7ec6:	2204      	movs	r2, #4
   b7ec8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7eca:	4a02      	ldr	r2, [pc, #8]	; (b7ed4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7ecc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7ece:	4770      	bx	lr
   b7ed0:	2003e718 	.word	0x2003e718
   b7ed4:	000bb708 	.word	0x000bb708

000b7ed8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b7ed8:	b510      	push	{r4, lr}
   b7eda:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7edc:	f001 f8f0 	bl	b90c0 <strlen>
   b7ee0:	3801      	subs	r0, #1
   b7ee2:	1823      	adds	r3, r4, r0
   b7ee4:	4620      	mov	r0, r4
	while(i<j){
   b7ee6:	4283      	cmp	r3, r0
   b7ee8:	d906      	bls.n	b7ef8 <_Z11str_reversePc+0x20>
		c = *i;
   b7eea:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7eec:	7819      	ldrb	r1, [r3, #0]
   b7eee:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b7ef2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7ef6:	e7f6      	b.n	b7ee6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7ef8:	bd10      	pop	{r4, pc}

000b7efa <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b7efa:	b570      	push	{r4, r5, r6, lr}
   b7efc:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b7efe:	1e91      	subs	r1, r2, #2
   b7f00:	2922      	cmp	r1, #34	; 0x22
   b7f02:	d81d      	bhi.n	b7f40 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7f04:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7f06:	b930      	cbnz	r0, b7f16 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7f08:	4423      	add	r3, r4
            *ptr++ = '0';
   b7f0a:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7f0c:	429d      	cmp	r5, r3
   b7f0e:	d210      	bcs.n	b7f32 <ultoa+0x38>
            *ptr++ = '0';
   b7f10:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b7f14:	e7fa      	b.n	b7f0c <ultoa+0x12>
            result.quot = a/radix;
   b7f16:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b7f1a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b7f1e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b7f20:	2809      	cmp	r0, #9
                *ptr += '0';
   b7f22:	bf94      	ite	ls
   b7f24:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b7f26:	3157      	addhi	r1, #87	; 0x57
   b7f28:	b2c9      	uxtb	r1, r1
   b7f2a:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b7f2e:	4630      	mov	r0, r6
	while(a){
   b7f30:	e7e9      	b.n	b7f06 <ultoa+0xc>

	*ptr = '\0';
   b7f32:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7f34:	4620      	mov	r0, r4
	*ptr = '\0';
   b7f36:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7f38:	f7ff ffce 	bl	b7ed8 <_Z11str_reversePc>
	return buffer;
   b7f3c:	4620      	mov	r0, r4
}
   b7f3e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b7f40:	2000      	movs	r0, #0
   b7f42:	e7fc      	b.n	b7f3e <ultoa+0x44>

000b7f44 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7f44:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b7f46:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7f48:	460c      	mov	r4, r1
   b7f4a:	4615      	mov	r5, r2
	if(a<0){
   b7f4c:	da0e      	bge.n	b7f6c <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7f4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b7f52:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7f56:	bf14      	ite	ne
   b7f58:	4258      	negne	r0, r3
   b7f5a:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b7f5c:	2301      	movs	r3, #1
		*buffer = '-';
   b7f5e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b7f60:	462a      	mov	r2, r5
   b7f62:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b7f64:	f7ff ffc9 	bl	b7efa <ultoa>
	}
	return buffer;
}
   b7f68:	4620      	mov	r0, r4
   b7f6a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b7f6c:	2301      	movs	r3, #1
   b7f6e:	e7f9      	b.n	b7f64 <itoa+0x20>

000b7f70 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7f70:	4b01      	ldr	r3, [pc, #4]	; (b7f78 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7f72:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7f74:	4770      	bx	lr
   b7f76:	bf00      	nop
   b7f78:	20035620 	.word	0x20035620

000b7f7c <serialEventRun>:
{
   b7f7c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7f7e:	4b0b      	ldr	r3, [pc, #44]	; (b7fac <serialEventRun+0x30>)
   b7f80:	b143      	cbz	r3, b7f94 <serialEventRun+0x18>
   b7f82:	f7ff ff45 	bl	b7e10 <_Z16_fetch_usbserialv>
   b7f86:	6803      	ldr	r3, [r0, #0]
   b7f88:	691b      	ldr	r3, [r3, #16]
   b7f8a:	4798      	blx	r3
   b7f8c:	2800      	cmp	r0, #0
   b7f8e:	dd01      	ble.n	b7f94 <serialEventRun+0x18>
        serialEvent();
   b7f90:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7f94:	4b06      	ldr	r3, [pc, #24]	; (b7fb0 <serialEventRun+0x34>)
   b7f96:	b143      	cbz	r3, b7faa <serialEventRun+0x2e>
   b7f98:	f000 f8c8 	bl	b812c <_Z22__fetch_global_Serial1v>
   b7f9c:	6803      	ldr	r3, [r0, #0]
   b7f9e:	691b      	ldr	r3, [r3, #16]
   b7fa0:	4798      	blx	r3
   b7fa2:	2800      	cmp	r0, #0
   b7fa4:	dd01      	ble.n	b7faa <serialEventRun+0x2e>
        serialEvent1();
   b7fa6:	f3af 8000 	nop.w
}
   b7faa:	bd08      	pop	{r3, pc}
	...

000b7fb4 <_post_loop>:
{
   b7fb4:	b508      	push	{r3, lr}
	serialEventRun();
   b7fb6:	f7ff ffe1 	bl	b7f7c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7fba:	f7fd fbed 	bl	b5798 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7fbe:	4b01      	ldr	r3, [pc, #4]	; (b7fc4 <_post_loop+0x10>)
   b7fc0:	6018      	str	r0, [r3, #0]
}
   b7fc2:	bd08      	pop	{r3, pc}
   b7fc4:	2003e728 	.word	0x2003e728

000b7fc8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7fc8:	4805      	ldr	r0, [pc, #20]	; (b7fe0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7fca:	4a06      	ldr	r2, [pc, #24]	; (b7fe4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7fcc:	4906      	ldr	r1, [pc, #24]	; (b7fe8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7fce:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7fd0:	1a12      	subs	r2, r2, r0
   b7fd2:	f001 f804 	bl	b8fde <memcpy>
    __backup_sram_signature = signature;
   b7fd6:	4b05      	ldr	r3, [pc, #20]	; (b7fec <_Z33system_initialize_user_backup_ramv+0x24>)
   b7fd8:	4a05      	ldr	r2, [pc, #20]	; (b7ff0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7fda:	601a      	str	r2, [r3, #0]
}
   b7fdc:	bd08      	pop	{r3, pc}
   b7fde:	bf00      	nop
   b7fe0:	2003f400 	.word	0x2003f400
   b7fe4:	2003f404 	.word	0x2003f404
   b7fe8:	000bbc34 	.word	0x000bbc34
   b7fec:	2003f400 	.word	0x2003f400
   b7ff0:	9a271c1e 	.word	0x9a271c1e

000b7ff4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7ff4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7ff6:	2300      	movs	r3, #0
   b7ff8:	9300      	str	r3, [sp, #0]
   b7ffa:	461a      	mov	r2, r3
   b7ffc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8000:	f7fd fd24 	bl	b5a4c <system_ctrl_set_result>
}
   b8004:	b003      	add	sp, #12
   b8006:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b800c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b800c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b800e:	8843      	ldrh	r3, [r0, #2]
   b8010:	2b0a      	cmp	r3, #10
   b8012:	d008      	beq.n	b8026 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8014:	2b50      	cmp	r3, #80	; 0x50
   b8016:	d10b      	bne.n	b8030 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8018:	4b09      	ldr	r3, [pc, #36]	; (b8040 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b801a:	681b      	ldr	r3, [r3, #0]
   b801c:	b14b      	cbz	r3, b8032 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b801e:	b003      	add	sp, #12
   b8020:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8024:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b8026:	f7ff ffe5 	bl	b7ff4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b802a:	b003      	add	sp, #12
   b802c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8030:	2300      	movs	r3, #0
   b8032:	9300      	str	r3, [sp, #0]
   b8034:	461a      	mov	r2, r3
   b8036:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b803a:	f7fd fd07 	bl	b5a4c <system_ctrl_set_result>
}
   b803e:	e7f4      	b.n	b802a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8040:	2003e724 	.word	0x2003e724

000b8044 <module_user_init_hook>:
{
   b8044:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b8046:	4812      	ldr	r0, [pc, #72]	; (b8090 <module_user_init_hook+0x4c>)
   b8048:	2100      	movs	r1, #0
   b804a:	f7fd fdb9 	bl	b5bc0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b804e:	4b11      	ldr	r3, [pc, #68]	; (b8094 <module_user_init_hook+0x50>)
   b8050:	681a      	ldr	r2, [r3, #0]
   b8052:	4b11      	ldr	r3, [pc, #68]	; (b8098 <module_user_init_hook+0x54>)
   b8054:	429a      	cmp	r2, r3
   b8056:	4b11      	ldr	r3, [pc, #68]	; (b809c <module_user_init_hook+0x58>)
   b8058:	bf0c      	ite	eq
   b805a:	2201      	moveq	r2, #1
   b805c:	2200      	movne	r2, #0
   b805e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8060:	d001      	beq.n	b8066 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8062:	f7ff ffb1 	bl	b7fc8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8066:	f7fd fb87 	bl	b5778 <HAL_RNG_GetRandomNumber>
   b806a:	4604      	mov	r4, r0
    srand(seed);
   b806c:	f000 ffe8 	bl	b9040 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8070:	4b0b      	ldr	r3, [pc, #44]	; (b80a0 <module_user_init_hook+0x5c>)
   b8072:	b113      	cbz	r3, b807a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8074:	4620      	mov	r0, r4
   b8076:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b807a:	2100      	movs	r1, #0
   b807c:	4808      	ldr	r0, [pc, #32]	; (b80a0 <module_user_init_hook+0x5c>)
   b807e:	f7fd fcef 	bl	b5a60 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8086:	4807      	ldr	r0, [pc, #28]	; (b80a4 <module_user_init_hook+0x60>)
   b8088:	2100      	movs	r1, #0
   b808a:	f7fd bcd5 	b.w	b5a38 <system_ctrl_set_app_request_handler>
   b808e:	bf00      	nop
   b8090:	000b7f71 	.word	0x000b7f71
   b8094:	2003f400 	.word	0x2003f400
   b8098:	9a271c1e 	.word	0x9a271c1e
   b809c:	2003e720 	.word	0x2003e720
   b80a0:	00000000 	.word	0x00000000
   b80a4:	000b800d 	.word	0x000b800d

000b80a8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b80a8:	4770      	bx	lr
	...

000b80ac <_Z19__fetch_global_Wirev>:
{
   b80ac:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b80ae:	4d0e      	ldr	r5, [pc, #56]	; (b80e8 <_Z19__fetch_global_Wirev+0x3c>)
   b80b0:	7829      	ldrb	r1, [r5, #0]
   b80b2:	f3bf 8f5b 	dmb	ish
   b80b6:	f011 0401 	ands.w	r4, r1, #1
{
   b80ba:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b80bc:	d111      	bne.n	b80e2 <_Z19__fetch_global_Wirev+0x36>
   b80be:	4628      	mov	r0, r5
   b80c0:	f7fb ffef 	bl	b40a2 <__cxa_guard_acquire>
   b80c4:	b168      	cbz	r0, b80e2 <_Z19__fetch_global_Wirev+0x36>
   b80c6:	a801      	add	r0, sp, #4
   b80c8:	f7fc fa2e 	bl	b4528 <_Z17acquireWireBufferv>
   b80cc:	aa01      	add	r2, sp, #4
   b80ce:	4621      	mov	r1, r4
   b80d0:	4806      	ldr	r0, [pc, #24]	; (b80ec <_Z19__fetch_global_Wirev+0x40>)
   b80d2:	f7fe ff97 	bl	b7004 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b80d6:	4628      	mov	r0, r5
   b80d8:	f7fb ffe8 	bl	b40ac <__cxa_guard_release>
   b80dc:	4804      	ldr	r0, [pc, #16]	; (b80f0 <_Z19__fetch_global_Wirev+0x44>)
   b80de:	f000 ff61 	bl	b8fa4 <atexit>
	return wire;
}
   b80e2:	4802      	ldr	r0, [pc, #8]	; (b80ec <_Z19__fetch_global_Wirev+0x40>)
   b80e4:	b007      	add	sp, #28
   b80e6:	bd30      	pop	{r4, r5, pc}
   b80e8:	2003e72c 	.word	0x2003e72c
   b80ec:	2003e730 	.word	0x2003e730
   b80f0:	000b80a9 	.word	0x000b80a9

000b80f4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b80f4:	4770      	bx	lr
	...

000b80f8 <_Z20acquireSerial1Bufferv>:
{
   b80f8:	b538      	push	{r3, r4, r5, lr}
   b80fa:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b80fc:	2514      	movs	r5, #20
   b80fe:	462a      	mov	r2, r5
   b8100:	2100      	movs	r1, #0
   b8102:	f000 ff94 	bl	b902e <memset>
   b8106:	8025      	strh	r5, [r4, #0]
   b8108:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b810a:	4907      	ldr	r1, [pc, #28]	; (b8128 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b810c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b810e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8110:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8112:	f000 f82f 	bl	b8174 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8116:	4904      	ldr	r1, [pc, #16]	; (b8128 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8118:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b811a:	4628      	mov	r0, r5
   b811c:	f000 f82a 	bl	b8174 <_ZnajRKSt9nothrow_t>
    };
   b8120:	60e0      	str	r0, [r4, #12]
}
   b8122:	4620      	mov	r0, r4
   b8124:	bd38      	pop	{r3, r4, r5, pc}
   b8126:	bf00      	nop
   b8128:	000bb73c 	.word	0x000bb73c

000b812c <_Z22__fetch_global_Serial1v>:
{
   b812c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b812e:	4d0e      	ldr	r5, [pc, #56]	; (b8168 <_Z22__fetch_global_Serial1v+0x3c>)
   b8130:	7829      	ldrb	r1, [r5, #0]
   b8132:	f3bf 8f5b 	dmb	ish
   b8136:	f011 0401 	ands.w	r4, r1, #1
{
   b813a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b813c:	d111      	bne.n	b8162 <_Z22__fetch_global_Serial1v+0x36>
   b813e:	4628      	mov	r0, r5
   b8140:	f7fb ffaf 	bl	b40a2 <__cxa_guard_acquire>
   b8144:	b168      	cbz	r0, b8162 <_Z22__fetch_global_Serial1v+0x36>
   b8146:	a801      	add	r0, sp, #4
   b8148:	f7ff ffd6 	bl	b80f8 <_Z20acquireSerial1Bufferv>
   b814c:	aa01      	add	r2, sp, #4
   b814e:	4621      	mov	r1, r4
   b8150:	4806      	ldr	r0, [pc, #24]	; (b816c <_Z22__fetch_global_Serial1v+0x40>)
   b8152:	f7ff fdeb 	bl	b7d2c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8156:	4628      	mov	r0, r5
   b8158:	f7fb ffa8 	bl	b40ac <__cxa_guard_release>
   b815c:	4804      	ldr	r0, [pc, #16]	; (b8170 <_Z22__fetch_global_Serial1v+0x44>)
   b815e:	f000 ff21 	bl	b8fa4 <atexit>
    return serial1;
}
   b8162:	4802      	ldr	r0, [pc, #8]	; (b816c <_Z22__fetch_global_Serial1v+0x40>)
   b8164:	b007      	add	sp, #28
   b8166:	bd30      	pop	{r4, r5, pc}
   b8168:	2003e744 	.word	0x2003e744
   b816c:	2003e748 	.word	0x2003e748
   b8170:	000b80f5 	.word	0x000b80f5

000b8174 <_ZnajRKSt9nothrow_t>:
   b8174:	f7fb bf91 	b.w	b409a <_Znaj>

000b8178 <_ZSt25__throw_bad_function_callv>:
   b8178:	b508      	push	{r3, lr}
   b817a:	f7fd fd01 	bl	b5b80 <abort>
	...

000b8180 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8180:	4901      	ldr	r1, [pc, #4]	; (b8188 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8182:	f000 b8f9 	b.w	b8378 <_ZNKSt9type_infoeqERKS_>
   b8186:	bf00      	nop
   b8188:	000bb758 	.word	0x000bb758

000b818c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b818c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b818e:	2400      	movs	r4, #0
   b8190:	2310      	movs	r3, #16
   b8192:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b8196:	6803      	ldr	r3, [r0, #0]
   b8198:	4615      	mov	r5, r2
   b819a:	699e      	ldr	r6, [r3, #24]
   b819c:	6812      	ldr	r2, [r2, #0]
   b819e:	466b      	mov	r3, sp
   b81a0:	e9cd 4400 	strd	r4, r4, [sp]
   b81a4:	47b0      	blx	r6
   b81a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b81aa:	f003 0306 	and.w	r3, r3, #6
   b81ae:	2b06      	cmp	r3, #6
   b81b0:	bf03      	ittte	eq
   b81b2:	9b00      	ldreq	r3, [sp, #0]
   b81b4:	602b      	streq	r3, [r5, #0]
   b81b6:	2001      	moveq	r0, #1
   b81b8:	4620      	movne	r0, r4
   b81ba:	b004      	add	sp, #16
   b81bc:	bd70      	pop	{r4, r5, r6, pc}

000b81be <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b81be:	9800      	ldr	r0, [sp, #0]
   b81c0:	4290      	cmp	r0, r2
   b81c2:	bf14      	ite	ne
   b81c4:	2001      	movne	r0, #1
   b81c6:	2006      	moveq	r0, #6
   b81c8:	4770      	bx	lr
	...

000b81cc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b81cc:	b510      	push	{r4, lr}
   b81ce:	4b03      	ldr	r3, [pc, #12]	; (b81dc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b81d0:	6003      	str	r3, [r0, #0]
   b81d2:	4604      	mov	r4, r0
   b81d4:	f000 f8cd 	bl	b8372 <_ZNSt9type_infoD1Ev>
   b81d8:	4620      	mov	r0, r4
   b81da:	bd10      	pop	{r4, pc}
   b81dc:	000bb798 	.word	0x000bb798

000b81e0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b81e0:	b510      	push	{r4, lr}
   b81e2:	4604      	mov	r4, r0
   b81e4:	f7ff fff2 	bl	b81cc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b81e8:	4620      	mov	r0, r4
   b81ea:	2108      	movs	r1, #8
   b81ec:	f7fb ff57 	bl	b409e <_ZdlPvj>
   b81f0:	4620      	mov	r0, r4
   b81f2:	bd10      	pop	{r4, pc}

000b81f4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b81f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b81f8:	461f      	mov	r7, r3
   b81fa:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b81fe:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8202:	4598      	cmp	r8, r3
   b8204:	4606      	mov	r6, r0
   b8206:	4615      	mov	r5, r2
   b8208:	d107      	bne.n	b821a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b820a:	9907      	ldr	r1, [sp, #28]
   b820c:	f000 f8b4 	bl	b8378 <_ZNKSt9type_infoeqERKS_>
   b8210:	b118      	cbz	r0, b821a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8212:	7165      	strb	r5, [r4, #5]
   b8214:	2000      	movs	r0, #0
   b8216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b821a:	4639      	mov	r1, r7
   b821c:	4630      	mov	r0, r6
   b821e:	f000 f8ab 	bl	b8378 <_ZNKSt9type_infoeqERKS_>
   b8222:	2800      	cmp	r0, #0
   b8224:	d0f6      	beq.n	b8214 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b8226:	2301      	movs	r3, #1
   b8228:	f8c4 8000 	str.w	r8, [r4]
   b822c:	7125      	strb	r5, [r4, #4]
   b822e:	71a3      	strb	r3, [r4, #6]
   b8230:	e7f0      	b.n	b8214 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8232 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8232:	b538      	push	{r3, r4, r5, lr}
   b8234:	4615      	mov	r5, r2
   b8236:	461c      	mov	r4, r3
   b8238:	f000 f89e 	bl	b8378 <_ZNKSt9type_infoeqERKS_>
   b823c:	b120      	cbz	r0, b8248 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b823e:	2308      	movs	r3, #8
   b8240:	60e3      	str	r3, [r4, #12]
   b8242:	2306      	movs	r3, #6
   b8244:	6025      	str	r5, [r4, #0]
   b8246:	7123      	strb	r3, [r4, #4]
   b8248:	bd38      	pop	{r3, r4, r5, pc}

000b824a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b824a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b824c:	4605      	mov	r5, r0
   b824e:	460c      	mov	r4, r1
   b8250:	9201      	str	r2, [sp, #4]
   b8252:	461e      	mov	r6, r3
   b8254:	f000 f890 	bl	b8378 <_ZNKSt9type_infoeqERKS_>
   b8258:	b950      	cbnz	r0, b8270 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b825a:	2e03      	cmp	r6, #3
   b825c:	d808      	bhi.n	b8270 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b825e:	6823      	ldr	r3, [r4, #0]
   b8260:	9a01      	ldr	r2, [sp, #4]
   b8262:	695b      	ldr	r3, [r3, #20]
   b8264:	4629      	mov	r1, r5
   b8266:	4620      	mov	r0, r4
   b8268:	b002      	add	sp, #8
   b826a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b826e:	4718      	bx	r3
   b8270:	b002      	add	sp, #8
   b8272:	bd70      	pop	{r4, r5, r6, pc}

000b8274 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8274:	b510      	push	{r4, lr}
   b8276:	4b03      	ldr	r3, [pc, #12]	; (b8284 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8278:	6003      	str	r3, [r0, #0]
   b827a:	4604      	mov	r4, r0
   b827c:	f7ff ffa6 	bl	b81cc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8280:	4620      	mov	r0, r4
   b8282:	bd10      	pop	{r4, pc}
   b8284:	000bb7f8 	.word	0x000bb7f8

000b8288 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8288:	b510      	push	{r4, lr}
   b828a:	4604      	mov	r4, r0
   b828c:	f7ff fff2 	bl	b8274 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8290:	4620      	mov	r0, r4
   b8292:	210c      	movs	r1, #12
   b8294:	f7fb ff03 	bl	b409e <_ZdlPvj>
   b8298:	4620      	mov	r0, r4
   b829a:	bd10      	pop	{r4, pc}

000b829c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b829c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b829e:	9f08      	ldr	r7, [sp, #32]
   b82a0:	4297      	cmp	r7, r2
   b82a2:	4605      	mov	r5, r0
   b82a4:	460e      	mov	r6, r1
   b82a6:	4614      	mov	r4, r2
   b82a8:	d00a      	beq.n	b82c0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b82aa:	68a8      	ldr	r0, [r5, #8]
   b82ac:	6802      	ldr	r2, [r0, #0]
   b82ae:	9708      	str	r7, [sp, #32]
   b82b0:	6a15      	ldr	r5, [r2, #32]
   b82b2:	4631      	mov	r1, r6
   b82b4:	4622      	mov	r2, r4
   b82b6:	46ac      	mov	ip, r5
   b82b8:	b003      	add	sp, #12
   b82ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b82be:	4760      	bx	ip
   b82c0:	4619      	mov	r1, r3
   b82c2:	9301      	str	r3, [sp, #4]
   b82c4:	f000 f858 	bl	b8378 <_ZNKSt9type_infoeqERKS_>
   b82c8:	9b01      	ldr	r3, [sp, #4]
   b82ca:	2800      	cmp	r0, #0
   b82cc:	d0ed      	beq.n	b82aa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b82ce:	2006      	movs	r0, #6
   b82d0:	b003      	add	sp, #12
   b82d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b82d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b82d4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b82d8:	460d      	mov	r5, r1
   b82da:	4619      	mov	r1, r3
   b82dc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b82e0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b82e4:	4681      	mov	r9, r0
   b82e6:	4617      	mov	r7, r2
   b82e8:	4698      	mov	r8, r3
   b82ea:	f000 f845 	bl	b8378 <_ZNKSt9type_infoeqERKS_>
   b82ee:	b190      	cbz	r0, b8316 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b82f0:	2d00      	cmp	r5, #0
   b82f2:	6034      	str	r4, [r6, #0]
   b82f4:	7137      	strb	r7, [r6, #4]
   b82f6:	db09      	blt.n	b830c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b82f8:	1961      	adds	r1, r4, r5
   b82fa:	458a      	cmp	sl, r1
   b82fc:	bf0c      	ite	eq
   b82fe:	2106      	moveq	r1, #6
   b8300:	2101      	movne	r1, #1
   b8302:	71b1      	strb	r1, [r6, #6]
   b8304:	2000      	movs	r0, #0
   b8306:	b001      	add	sp, #4
   b8308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b830c:	3502      	adds	r5, #2
   b830e:	d1f9      	bne.n	b8304 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8310:	2301      	movs	r3, #1
   b8312:	71b3      	strb	r3, [r6, #6]
   b8314:	e7f6      	b.n	b8304 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8316:	4554      	cmp	r4, sl
   b8318:	d106      	bne.n	b8328 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b831a:	4659      	mov	r1, fp
   b831c:	4648      	mov	r0, r9
   b831e:	f000 f82b 	bl	b8378 <_ZNKSt9type_infoeqERKS_>
   b8322:	b108      	cbz	r0, b8328 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8324:	7177      	strb	r7, [r6, #5]
   b8326:	e7ed      	b.n	b8304 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8328:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b832c:	6803      	ldr	r3, [r0, #0]
   b832e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8332:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b8336:	69dc      	ldr	r4, [r3, #28]
   b8338:	463a      	mov	r2, r7
   b833a:	4643      	mov	r3, r8
   b833c:	4629      	mov	r1, r5
   b833e:	46a4      	mov	ip, r4
   b8340:	b001      	add	sp, #4
   b8342:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8346:	4760      	bx	ip

000b8348 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b834c:	4607      	mov	r7, r0
   b834e:	460c      	mov	r4, r1
   b8350:	4615      	mov	r5, r2
   b8352:	461e      	mov	r6, r3
   b8354:	f7ff ff6d 	bl	b8232 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8358:	b948      	cbnz	r0, b836e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b835a:	68b8      	ldr	r0, [r7, #8]
   b835c:	6803      	ldr	r3, [r0, #0]
   b835e:	699f      	ldr	r7, [r3, #24]
   b8360:	462a      	mov	r2, r5
   b8362:	4633      	mov	r3, r6
   b8364:	4621      	mov	r1, r4
   b8366:	46bc      	mov	ip, r7
   b8368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b836c:	4760      	bx	ip
   b836e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8372 <_ZNSt9type_infoD1Ev>:
   b8372:	4770      	bx	lr

000b8374 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8374:	2000      	movs	r0, #0
   b8376:	4770      	bx	lr

000b8378 <_ZNKSt9type_infoeqERKS_>:
   b8378:	4281      	cmp	r1, r0
   b837a:	b508      	push	{r3, lr}
   b837c:	d00e      	beq.n	b839c <_ZNKSt9type_infoeqERKS_+0x24>
   b837e:	6840      	ldr	r0, [r0, #4]
   b8380:	7803      	ldrb	r3, [r0, #0]
   b8382:	2b2a      	cmp	r3, #42	; 0x2a
   b8384:	d00c      	beq.n	b83a0 <_ZNKSt9type_infoeqERKS_+0x28>
   b8386:	6849      	ldr	r1, [r1, #4]
   b8388:	780b      	ldrb	r3, [r1, #0]
   b838a:	2b2a      	cmp	r3, #42	; 0x2a
   b838c:	bf08      	it	eq
   b838e:	3101      	addeq	r1, #1
   b8390:	f000 fe84 	bl	b909c <strcmp>
   b8394:	fab0 f080 	clz	r0, r0
   b8398:	0940      	lsrs	r0, r0, #5
   b839a:	bd08      	pop	{r3, pc}
   b839c:	2001      	movs	r0, #1
   b839e:	e7fc      	b.n	b839a <_ZNKSt9type_infoeqERKS_+0x22>
   b83a0:	2000      	movs	r0, #0
   b83a2:	e7fa      	b.n	b839a <_ZNKSt9type_infoeqERKS_+0x22>

000b83a4 <sqrt>:
   b83a4:	b538      	push	{r3, r4, r5, lr}
   b83a6:	ed2d 8b02 	vpush	{d8}
   b83aa:	ec55 4b10 	vmov	r4, r5, d0
   b83ae:	f000 f833 	bl	b8418 <__ieee754_sqrt>
   b83b2:	4b18      	ldr	r3, [pc, #96]	; (b8414 <sqrt+0x70>)
   b83b4:	eeb0 8a40 	vmov.f32	s16, s0
   b83b8:	eef0 8a60 	vmov.f32	s17, s1
   b83bc:	f993 3000 	ldrsb.w	r3, [r3]
   b83c0:	3301      	adds	r3, #1
   b83c2:	d00d      	beq.n	b83e0 <sqrt+0x3c>
   b83c4:	4622      	mov	r2, r4
   b83c6:	462b      	mov	r3, r5
   b83c8:	4620      	mov	r0, r4
   b83ca:	4629      	mov	r1, r5
   b83cc:	f000 fd46 	bl	b8e5c <__aeabi_dcmpun>
   b83d0:	b930      	cbnz	r0, b83e0 <sqrt+0x3c>
   b83d2:	2200      	movs	r2, #0
   b83d4:	2300      	movs	r3, #0
   b83d6:	4620      	mov	r0, r4
   b83d8:	4629      	mov	r1, r5
   b83da:	f000 fd17 	bl	b8e0c <__aeabi_dcmplt>
   b83de:	b930      	cbnz	r0, b83ee <sqrt+0x4a>
   b83e0:	eeb0 0a48 	vmov.f32	s0, s16
   b83e4:	eef0 0a68 	vmov.f32	s1, s17
   b83e8:	ecbd 8b02 	vpop	{d8}
   b83ec:	bd38      	pop	{r3, r4, r5, pc}
   b83ee:	f7fd fbd7 	bl	b5ba0 <__errno>
   b83f2:	2200      	movs	r2, #0
   b83f4:	2300      	movs	r3, #0
   b83f6:	2121      	movs	r1, #33	; 0x21
   b83f8:	6001      	str	r1, [r0, #0]
   b83fa:	4610      	mov	r0, r2
   b83fc:	4619      	mov	r1, r3
   b83fe:	f000 fbbd 	bl	b8b7c <__aeabi_ddiv>
   b8402:	ec41 0b18 	vmov	d8, r0, r1
   b8406:	eeb0 0a48 	vmov.f32	s0, s16
   b840a:	eef0 0a68 	vmov.f32	s1, s17
   b840e:	ecbd 8b02 	vpop	{d8}
   b8412:	bd38      	pop	{r3, r4, r5, pc}
   b8414:	2003561c 	.word	0x2003561c

000b8418 <__ieee754_sqrt>:
   b8418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b841c:	4a63      	ldr	r2, [pc, #396]	; (b85ac <__ieee754_sqrt+0x194>)
   b841e:	ec55 4b10 	vmov	r4, r5, d0
   b8422:	43aa      	bics	r2, r5
   b8424:	f000 809f 	beq.w	b8566 <__ieee754_sqrt+0x14e>
   b8428:	2d00      	cmp	r5, #0
   b842a:	ee10 ca10 	vmov	ip, s0
   b842e:	462b      	mov	r3, r5
   b8430:	dd54      	ble.n	b84dc <__ieee754_sqrt+0xc4>
   b8432:	1529      	asrs	r1, r5, #20
   b8434:	d063      	beq.n	b84fe <__ieee754_sqrt+0xe6>
   b8436:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b843a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b843e:	07c9      	lsls	r1, r1, #31
   b8440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8444:	d404      	bmi.n	b8450 <__ieee754_sqrt+0x38>
   b8446:	005b      	lsls	r3, r3, #1
   b8448:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b844c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8450:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b8454:	2600      	movs	r6, #0
   b8456:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b845a:	107f      	asrs	r7, r7, #1
   b845c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8460:	f04f 0e16 	mov.w	lr, #22
   b8464:	4634      	mov	r4, r6
   b8466:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b846a:	18a1      	adds	r1, r4, r2
   b846c:	4299      	cmp	r1, r3
   b846e:	dc02      	bgt.n	b8476 <__ieee754_sqrt+0x5e>
   b8470:	1a5b      	subs	r3, r3, r1
   b8472:	188c      	adds	r4, r1, r2
   b8474:	4416      	add	r6, r2
   b8476:	005b      	lsls	r3, r3, #1
   b8478:	f1be 0e01 	subs.w	lr, lr, #1
   b847c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b8480:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b8484:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8488:	d1ef      	bne.n	b846a <__ieee754_sqrt+0x52>
   b848a:	4675      	mov	r5, lr
   b848c:	2020      	movs	r0, #32
   b848e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b8492:	e00a      	b.n	b84aa <__ieee754_sqrt+0x92>
   b8494:	d044      	beq.n	b8520 <__ieee754_sqrt+0x108>
   b8496:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b849a:	3801      	subs	r0, #1
   b849c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b84a0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b84a4:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b84a8:	d043      	beq.n	b8532 <__ieee754_sqrt+0x11a>
   b84aa:	42a3      	cmp	r3, r4
   b84ac:	eb02 010e 	add.w	r1, r2, lr
   b84b0:	ddf0      	ble.n	b8494 <__ieee754_sqrt+0x7c>
   b84b2:	2900      	cmp	r1, #0
   b84b4:	eb01 0e02 	add.w	lr, r1, r2
   b84b8:	db0a      	blt.n	b84d0 <__ieee754_sqrt+0xb8>
   b84ba:	46a0      	mov	r8, r4
   b84bc:	1b1b      	subs	r3, r3, r4
   b84be:	4561      	cmp	r1, ip
   b84c0:	bf88      	it	hi
   b84c2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   b84c6:	ebac 0c01 	sub.w	ip, ip, r1
   b84ca:	4415      	add	r5, r2
   b84cc:	4644      	mov	r4, r8
   b84ce:	e7e2      	b.n	b8496 <__ieee754_sqrt+0x7e>
   b84d0:	f1be 0f00 	cmp.w	lr, #0
   b84d4:	dbf1      	blt.n	b84ba <__ieee754_sqrt+0xa2>
   b84d6:	f104 0801 	add.w	r8, r4, #1
   b84da:	e7ef      	b.n	b84bc <__ieee754_sqrt+0xa4>
   b84dc:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b84e0:	4322      	orrs	r2, r4
   b84e2:	d038      	beq.n	b8556 <__ieee754_sqrt+0x13e>
   b84e4:	2d00      	cmp	r5, #0
   b84e6:	d14e      	bne.n	b8586 <__ieee754_sqrt+0x16e>
   b84e8:	4629      	mov	r1, r5
   b84ea:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b84ee:	3915      	subs	r1, #21
   b84f0:	4613      	mov	r3, r2
   b84f2:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b84f6:	2a00      	cmp	r2, #0
   b84f8:	d0f7      	beq.n	b84ea <__ieee754_sqrt+0xd2>
   b84fa:	02d6      	lsls	r6, r2, #11
   b84fc:	d450      	bmi.n	b85a0 <__ieee754_sqrt+0x188>
   b84fe:	2000      	movs	r0, #0
   b8500:	005b      	lsls	r3, r3, #1
   b8502:	02dd      	lsls	r5, r3, #11
   b8504:	4604      	mov	r4, r0
   b8506:	f100 0001 	add.w	r0, r0, #1
   b850a:	d5f9      	bpl.n	b8500 <__ieee754_sqrt+0xe8>
   b850c:	461a      	mov	r2, r3
   b850e:	4663      	mov	r3, ip
   b8510:	fa0c fc00 	lsl.w	ip, ip, r0
   b8514:	f1c0 0020 	rsb	r0, r0, #32
   b8518:	40c3      	lsrs	r3, r0
   b851a:	1b09      	subs	r1, r1, r4
   b851c:	4313      	orrs	r3, r2
   b851e:	e78a      	b.n	b8436 <__ieee754_sqrt+0x1e>
   b8520:	4561      	cmp	r1, ip
   b8522:	d8b8      	bhi.n	b8496 <__ieee754_sqrt+0x7e>
   b8524:	2900      	cmp	r1, #0
   b8526:	eb01 0e02 	add.w	lr, r1, r2
   b852a:	dbd1      	blt.n	b84d0 <__ieee754_sqrt+0xb8>
   b852c:	4698      	mov	r8, r3
   b852e:	2300      	movs	r3, #0
   b8530:	e7c9      	b.n	b84c6 <__ieee754_sqrt+0xae>
   b8532:	ea53 030c 	orrs.w	r3, r3, ip
   b8536:	d110      	bne.n	b855a <__ieee754_sqrt+0x142>
   b8538:	0868      	lsrs	r0, r5, #1
   b853a:	1071      	asrs	r1, r6, #1
   b853c:	07f3      	lsls	r3, r6, #31
   b853e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b8542:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b8546:	bf48      	it	mi
   b8548:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b854c:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b8550:	4602      	mov	r2, r0
   b8552:	ec43 2b10 	vmov	d0, r2, r3
   b8556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b855a:	1c6a      	adds	r2, r5, #1
   b855c:	bf16      	itet	ne
   b855e:	1c68      	addne	r0, r5, #1
   b8560:	3601      	addeq	r6, #1
   b8562:	0840      	lsrne	r0, r0, #1
   b8564:	e7e9      	b.n	b853a <__ieee754_sqrt+0x122>
   b8566:	ee10 2a10 	vmov	r2, s0
   b856a:	ee10 0a10 	vmov	r0, s0
   b856e:	462b      	mov	r3, r5
   b8570:	4629      	mov	r1, r5
   b8572:	f000 f9d9 	bl	b8928 <__aeabi_dmul>
   b8576:	4622      	mov	r2, r4
   b8578:	462b      	mov	r3, r5
   b857a:	f000 f81f 	bl	b85bc <__adddf3>
   b857e:	ec41 0b10 	vmov	d0, r0, r1
   b8582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8586:	ee10 2a10 	vmov	r2, s0
   b858a:	4620      	mov	r0, r4
   b858c:	4629      	mov	r1, r5
   b858e:	f000 f813 	bl	b85b8 <__aeabi_dsub>
   b8592:	4602      	mov	r2, r0
   b8594:	460b      	mov	r3, r1
   b8596:	f000 faf1 	bl	b8b7c <__aeabi_ddiv>
   b859a:	ec41 0b10 	vmov	d0, r0, r1
   b859e:	e7da      	b.n	b8556 <__ieee754_sqrt+0x13e>
   b85a0:	4663      	mov	r3, ip
   b85a2:	2020      	movs	r0, #32
   b85a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b85a8:	e7b6      	b.n	b8518 <__ieee754_sqrt+0x100>
   b85aa:	bf00      	nop
   b85ac:	7ff00000 	.word	0x7ff00000

000b85b0 <__aeabi_drsub>:
   b85b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b85b4:	e002      	b.n	b85bc <__adddf3>
   b85b6:	bf00      	nop

000b85b8 <__aeabi_dsub>:
   b85b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b85bc <__adddf3>:
   b85bc:	b530      	push	{r4, r5, lr}
   b85be:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b85c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b85c6:	ea94 0f05 	teq	r4, r5
   b85ca:	bf08      	it	eq
   b85cc:	ea90 0f02 	teqeq	r0, r2
   b85d0:	bf1f      	itttt	ne
   b85d2:	ea54 0c00 	orrsne.w	ip, r4, r0
   b85d6:	ea55 0c02 	orrsne.w	ip, r5, r2
   b85da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b85de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b85e2:	f000 80e2 	beq.w	b87aa <__adddf3+0x1ee>
   b85e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b85ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b85ee:	bfb8      	it	lt
   b85f0:	426d      	neglt	r5, r5
   b85f2:	dd0c      	ble.n	b860e <__adddf3+0x52>
   b85f4:	442c      	add	r4, r5
   b85f6:	ea80 0202 	eor.w	r2, r0, r2
   b85fa:	ea81 0303 	eor.w	r3, r1, r3
   b85fe:	ea82 0000 	eor.w	r0, r2, r0
   b8602:	ea83 0101 	eor.w	r1, r3, r1
   b8606:	ea80 0202 	eor.w	r2, r0, r2
   b860a:	ea81 0303 	eor.w	r3, r1, r3
   b860e:	2d36      	cmp	r5, #54	; 0x36
   b8610:	bf88      	it	hi
   b8612:	bd30      	pophi	{r4, r5, pc}
   b8614:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b861c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b8620:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8624:	d002      	beq.n	b862c <__adddf3+0x70>
   b8626:	4240      	negs	r0, r0
   b8628:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b862c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b8630:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8634:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b8638:	d002      	beq.n	b8640 <__adddf3+0x84>
   b863a:	4252      	negs	r2, r2
   b863c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8640:	ea94 0f05 	teq	r4, r5
   b8644:	f000 80a7 	beq.w	b8796 <__adddf3+0x1da>
   b8648:	f1a4 0401 	sub.w	r4, r4, #1
   b864c:	f1d5 0e20 	rsbs	lr, r5, #32
   b8650:	db0d      	blt.n	b866e <__adddf3+0xb2>
   b8652:	fa02 fc0e 	lsl.w	ip, r2, lr
   b8656:	fa22 f205 	lsr.w	r2, r2, r5
   b865a:	1880      	adds	r0, r0, r2
   b865c:	f141 0100 	adc.w	r1, r1, #0
   b8660:	fa03 f20e 	lsl.w	r2, r3, lr
   b8664:	1880      	adds	r0, r0, r2
   b8666:	fa43 f305 	asr.w	r3, r3, r5
   b866a:	4159      	adcs	r1, r3
   b866c:	e00e      	b.n	b868c <__adddf3+0xd0>
   b866e:	f1a5 0520 	sub.w	r5, r5, #32
   b8672:	f10e 0e20 	add.w	lr, lr, #32
   b8676:	2a01      	cmp	r2, #1
   b8678:	fa03 fc0e 	lsl.w	ip, r3, lr
   b867c:	bf28      	it	cs
   b867e:	f04c 0c02 	orrcs.w	ip, ip, #2
   b8682:	fa43 f305 	asr.w	r3, r3, r5
   b8686:	18c0      	adds	r0, r0, r3
   b8688:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b868c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8690:	d507      	bpl.n	b86a2 <__adddf3+0xe6>
   b8692:	f04f 0e00 	mov.w	lr, #0
   b8696:	f1dc 0c00 	rsbs	ip, ip, #0
   b869a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b869e:	eb6e 0101 	sbc.w	r1, lr, r1
   b86a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b86a6:	d31b      	bcc.n	b86e0 <__adddf3+0x124>
   b86a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b86ac:	d30c      	bcc.n	b86c8 <__adddf3+0x10c>
   b86ae:	0849      	lsrs	r1, r1, #1
   b86b0:	ea5f 0030 	movs.w	r0, r0, rrx
   b86b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b86b8:	f104 0401 	add.w	r4, r4, #1
   b86bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b86c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b86c4:	f080 809a 	bcs.w	b87fc <__adddf3+0x240>
   b86c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b86cc:	bf08      	it	eq
   b86ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b86d2:	f150 0000 	adcs.w	r0, r0, #0
   b86d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b86da:	ea41 0105 	orr.w	r1, r1, r5
   b86de:	bd30      	pop	{r4, r5, pc}
   b86e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b86e4:	4140      	adcs	r0, r0
   b86e6:	eb41 0101 	adc.w	r1, r1, r1
   b86ea:	3c01      	subs	r4, #1
   b86ec:	bf28      	it	cs
   b86ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b86f2:	d2e9      	bcs.n	b86c8 <__adddf3+0x10c>
   b86f4:	f091 0f00 	teq	r1, #0
   b86f8:	bf04      	itt	eq
   b86fa:	4601      	moveq	r1, r0
   b86fc:	2000      	moveq	r0, #0
   b86fe:	fab1 f381 	clz	r3, r1
   b8702:	bf08      	it	eq
   b8704:	3320      	addeq	r3, #32
   b8706:	f1a3 030b 	sub.w	r3, r3, #11
   b870a:	f1b3 0220 	subs.w	r2, r3, #32
   b870e:	da0c      	bge.n	b872a <__adddf3+0x16e>
   b8710:	320c      	adds	r2, #12
   b8712:	dd08      	ble.n	b8726 <__adddf3+0x16a>
   b8714:	f102 0c14 	add.w	ip, r2, #20
   b8718:	f1c2 020c 	rsb	r2, r2, #12
   b871c:	fa01 f00c 	lsl.w	r0, r1, ip
   b8720:	fa21 f102 	lsr.w	r1, r1, r2
   b8724:	e00c      	b.n	b8740 <__adddf3+0x184>
   b8726:	f102 0214 	add.w	r2, r2, #20
   b872a:	bfd8      	it	le
   b872c:	f1c2 0c20 	rsble	ip, r2, #32
   b8730:	fa01 f102 	lsl.w	r1, r1, r2
   b8734:	fa20 fc0c 	lsr.w	ip, r0, ip
   b8738:	bfdc      	itt	le
   b873a:	ea41 010c 	orrle.w	r1, r1, ip
   b873e:	4090      	lslle	r0, r2
   b8740:	1ae4      	subs	r4, r4, r3
   b8742:	bfa2      	ittt	ge
   b8744:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b8748:	4329      	orrge	r1, r5
   b874a:	bd30      	popge	{r4, r5, pc}
   b874c:	ea6f 0404 	mvn.w	r4, r4
   b8750:	3c1f      	subs	r4, #31
   b8752:	da1c      	bge.n	b878e <__adddf3+0x1d2>
   b8754:	340c      	adds	r4, #12
   b8756:	dc0e      	bgt.n	b8776 <__adddf3+0x1ba>
   b8758:	f104 0414 	add.w	r4, r4, #20
   b875c:	f1c4 0220 	rsb	r2, r4, #32
   b8760:	fa20 f004 	lsr.w	r0, r0, r4
   b8764:	fa01 f302 	lsl.w	r3, r1, r2
   b8768:	ea40 0003 	orr.w	r0, r0, r3
   b876c:	fa21 f304 	lsr.w	r3, r1, r4
   b8770:	ea45 0103 	orr.w	r1, r5, r3
   b8774:	bd30      	pop	{r4, r5, pc}
   b8776:	f1c4 040c 	rsb	r4, r4, #12
   b877a:	f1c4 0220 	rsb	r2, r4, #32
   b877e:	fa20 f002 	lsr.w	r0, r0, r2
   b8782:	fa01 f304 	lsl.w	r3, r1, r4
   b8786:	ea40 0003 	orr.w	r0, r0, r3
   b878a:	4629      	mov	r1, r5
   b878c:	bd30      	pop	{r4, r5, pc}
   b878e:	fa21 f004 	lsr.w	r0, r1, r4
   b8792:	4629      	mov	r1, r5
   b8794:	bd30      	pop	{r4, r5, pc}
   b8796:	f094 0f00 	teq	r4, #0
   b879a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b879e:	bf06      	itte	eq
   b87a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b87a4:	3401      	addeq	r4, #1
   b87a6:	3d01      	subne	r5, #1
   b87a8:	e74e      	b.n	b8648 <__adddf3+0x8c>
   b87aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b87ae:	bf18      	it	ne
   b87b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b87b4:	d029      	beq.n	b880a <__adddf3+0x24e>
   b87b6:	ea94 0f05 	teq	r4, r5
   b87ba:	bf08      	it	eq
   b87bc:	ea90 0f02 	teqeq	r0, r2
   b87c0:	d005      	beq.n	b87ce <__adddf3+0x212>
   b87c2:	ea54 0c00 	orrs.w	ip, r4, r0
   b87c6:	bf04      	itt	eq
   b87c8:	4619      	moveq	r1, r3
   b87ca:	4610      	moveq	r0, r2
   b87cc:	bd30      	pop	{r4, r5, pc}
   b87ce:	ea91 0f03 	teq	r1, r3
   b87d2:	bf1e      	ittt	ne
   b87d4:	2100      	movne	r1, #0
   b87d6:	2000      	movne	r0, #0
   b87d8:	bd30      	popne	{r4, r5, pc}
   b87da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b87de:	d105      	bne.n	b87ec <__adddf3+0x230>
   b87e0:	0040      	lsls	r0, r0, #1
   b87e2:	4149      	adcs	r1, r1
   b87e4:	bf28      	it	cs
   b87e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b87ea:	bd30      	pop	{r4, r5, pc}
   b87ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b87f0:	bf3c      	itt	cc
   b87f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b87f6:	bd30      	popcc	{r4, r5, pc}
   b87f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b87fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b8800:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8804:	f04f 0000 	mov.w	r0, #0
   b8808:	bd30      	pop	{r4, r5, pc}
   b880a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b880e:	bf1a      	itte	ne
   b8810:	4619      	movne	r1, r3
   b8812:	4610      	movne	r0, r2
   b8814:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b8818:	bf1c      	itt	ne
   b881a:	460b      	movne	r3, r1
   b881c:	4602      	movne	r2, r0
   b881e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8822:	bf06      	itte	eq
   b8824:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b8828:	ea91 0f03 	teqeq	r1, r3
   b882c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b8830:	bd30      	pop	{r4, r5, pc}
   b8832:	bf00      	nop

000b8834 <__aeabi_ui2d>:
   b8834:	f090 0f00 	teq	r0, #0
   b8838:	bf04      	itt	eq
   b883a:	2100      	moveq	r1, #0
   b883c:	4770      	bxeq	lr
   b883e:	b530      	push	{r4, r5, lr}
   b8840:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8844:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8848:	f04f 0500 	mov.w	r5, #0
   b884c:	f04f 0100 	mov.w	r1, #0
   b8850:	e750      	b.n	b86f4 <__adddf3+0x138>
   b8852:	bf00      	nop

000b8854 <__aeabi_i2d>:
   b8854:	f090 0f00 	teq	r0, #0
   b8858:	bf04      	itt	eq
   b885a:	2100      	moveq	r1, #0
   b885c:	4770      	bxeq	lr
   b885e:	b530      	push	{r4, r5, lr}
   b8860:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8864:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8868:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b886c:	bf48      	it	mi
   b886e:	4240      	negmi	r0, r0
   b8870:	f04f 0100 	mov.w	r1, #0
   b8874:	e73e      	b.n	b86f4 <__adddf3+0x138>
   b8876:	bf00      	nop

000b8878 <__aeabi_f2d>:
   b8878:	0042      	lsls	r2, r0, #1
   b887a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b887e:	ea4f 0131 	mov.w	r1, r1, rrx
   b8882:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b8886:	bf1f      	itttt	ne
   b8888:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b888c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b8890:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b8894:	4770      	bxne	lr
   b8896:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b889a:	bf08      	it	eq
   b889c:	4770      	bxeq	lr
   b889e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b88a2:	bf04      	itt	eq
   b88a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b88a8:	4770      	bxeq	lr
   b88aa:	b530      	push	{r4, r5, lr}
   b88ac:	f44f 7460 	mov.w	r4, #896	; 0x380
   b88b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b88b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b88b8:	e71c      	b.n	b86f4 <__adddf3+0x138>
   b88ba:	bf00      	nop

000b88bc <__aeabi_ul2d>:
   b88bc:	ea50 0201 	orrs.w	r2, r0, r1
   b88c0:	bf08      	it	eq
   b88c2:	4770      	bxeq	lr
   b88c4:	b530      	push	{r4, r5, lr}
   b88c6:	f04f 0500 	mov.w	r5, #0
   b88ca:	e00a      	b.n	b88e2 <__aeabi_l2d+0x16>

000b88cc <__aeabi_l2d>:
   b88cc:	ea50 0201 	orrs.w	r2, r0, r1
   b88d0:	bf08      	it	eq
   b88d2:	4770      	bxeq	lr
   b88d4:	b530      	push	{r4, r5, lr}
   b88d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b88da:	d502      	bpl.n	b88e2 <__aeabi_l2d+0x16>
   b88dc:	4240      	negs	r0, r0
   b88de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b88e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b88e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b88ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b88ee:	f43f aed8 	beq.w	b86a2 <__adddf3+0xe6>
   b88f2:	f04f 0203 	mov.w	r2, #3
   b88f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b88fa:	bf18      	it	ne
   b88fc:	3203      	addne	r2, #3
   b88fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8902:	bf18      	it	ne
   b8904:	3203      	addne	r2, #3
   b8906:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b890a:	f1c2 0320 	rsb	r3, r2, #32
   b890e:	fa00 fc03 	lsl.w	ip, r0, r3
   b8912:	fa20 f002 	lsr.w	r0, r0, r2
   b8916:	fa01 fe03 	lsl.w	lr, r1, r3
   b891a:	ea40 000e 	orr.w	r0, r0, lr
   b891e:	fa21 f102 	lsr.w	r1, r1, r2
   b8922:	4414      	add	r4, r2
   b8924:	e6bd      	b.n	b86a2 <__adddf3+0xe6>
   b8926:	bf00      	nop

000b8928 <__aeabi_dmul>:
   b8928:	b570      	push	{r4, r5, r6, lr}
   b892a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b892e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8932:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8936:	bf1d      	ittte	ne
   b8938:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b893c:	ea94 0f0c 	teqne	r4, ip
   b8940:	ea95 0f0c 	teqne	r5, ip
   b8944:	f000 f8de 	bleq	b8b04 <__aeabi_dmul+0x1dc>
   b8948:	442c      	add	r4, r5
   b894a:	ea81 0603 	eor.w	r6, r1, r3
   b894e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b8952:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b8956:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b895a:	bf18      	it	ne
   b895c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b8960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8964:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8968:	d038      	beq.n	b89dc <__aeabi_dmul+0xb4>
   b896a:	fba0 ce02 	umull	ip, lr, r0, r2
   b896e:	f04f 0500 	mov.w	r5, #0
   b8972:	fbe1 e502 	umlal	lr, r5, r1, r2
   b8976:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b897a:	fbe0 e503 	umlal	lr, r5, r0, r3
   b897e:	f04f 0600 	mov.w	r6, #0
   b8982:	fbe1 5603 	umlal	r5, r6, r1, r3
   b8986:	f09c 0f00 	teq	ip, #0
   b898a:	bf18      	it	ne
   b898c:	f04e 0e01 	orrne.w	lr, lr, #1
   b8990:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b8994:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b8998:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b899c:	d204      	bcs.n	b89a8 <__aeabi_dmul+0x80>
   b899e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b89a2:	416d      	adcs	r5, r5
   b89a4:	eb46 0606 	adc.w	r6, r6, r6
   b89a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b89ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b89b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b89b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b89b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b89bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b89c0:	bf88      	it	hi
   b89c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b89c6:	d81e      	bhi.n	b8a06 <__aeabi_dmul+0xde>
   b89c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b89cc:	bf08      	it	eq
   b89ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b89d2:	f150 0000 	adcs.w	r0, r0, #0
   b89d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b89da:	bd70      	pop	{r4, r5, r6, pc}
   b89dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b89e0:	ea46 0101 	orr.w	r1, r6, r1
   b89e4:	ea40 0002 	orr.w	r0, r0, r2
   b89e8:	ea81 0103 	eor.w	r1, r1, r3
   b89ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b89f0:	bfc2      	ittt	gt
   b89f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b89f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b89fa:	bd70      	popgt	{r4, r5, r6, pc}
   b89fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8a00:	f04f 0e00 	mov.w	lr, #0
   b8a04:	3c01      	subs	r4, #1
   b8a06:	f300 80ab 	bgt.w	b8b60 <__aeabi_dmul+0x238>
   b8a0a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b8a0e:	bfde      	ittt	le
   b8a10:	2000      	movle	r0, #0
   b8a12:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b8a16:	bd70      	pople	{r4, r5, r6, pc}
   b8a18:	f1c4 0400 	rsb	r4, r4, #0
   b8a1c:	3c20      	subs	r4, #32
   b8a1e:	da35      	bge.n	b8a8c <__aeabi_dmul+0x164>
   b8a20:	340c      	adds	r4, #12
   b8a22:	dc1b      	bgt.n	b8a5c <__aeabi_dmul+0x134>
   b8a24:	f104 0414 	add.w	r4, r4, #20
   b8a28:	f1c4 0520 	rsb	r5, r4, #32
   b8a2c:	fa00 f305 	lsl.w	r3, r0, r5
   b8a30:	fa20 f004 	lsr.w	r0, r0, r4
   b8a34:	fa01 f205 	lsl.w	r2, r1, r5
   b8a38:	ea40 0002 	orr.w	r0, r0, r2
   b8a3c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b8a40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8a44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8a48:	fa21 f604 	lsr.w	r6, r1, r4
   b8a4c:	eb42 0106 	adc.w	r1, r2, r6
   b8a50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8a54:	bf08      	it	eq
   b8a56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8a5a:	bd70      	pop	{r4, r5, r6, pc}
   b8a5c:	f1c4 040c 	rsb	r4, r4, #12
   b8a60:	f1c4 0520 	rsb	r5, r4, #32
   b8a64:	fa00 f304 	lsl.w	r3, r0, r4
   b8a68:	fa20 f005 	lsr.w	r0, r0, r5
   b8a6c:	fa01 f204 	lsl.w	r2, r1, r4
   b8a70:	ea40 0002 	orr.w	r0, r0, r2
   b8a74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8a78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8a7c:	f141 0100 	adc.w	r1, r1, #0
   b8a80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8a84:	bf08      	it	eq
   b8a86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8a8a:	bd70      	pop	{r4, r5, r6, pc}
   b8a8c:	f1c4 0520 	rsb	r5, r4, #32
   b8a90:	fa00 f205 	lsl.w	r2, r0, r5
   b8a94:	ea4e 0e02 	orr.w	lr, lr, r2
   b8a98:	fa20 f304 	lsr.w	r3, r0, r4
   b8a9c:	fa01 f205 	lsl.w	r2, r1, r5
   b8aa0:	ea43 0302 	orr.w	r3, r3, r2
   b8aa4:	fa21 f004 	lsr.w	r0, r1, r4
   b8aa8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8aac:	fa21 f204 	lsr.w	r2, r1, r4
   b8ab0:	ea20 0002 	bic.w	r0, r0, r2
   b8ab4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b8ab8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8abc:	bf08      	it	eq
   b8abe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8ac2:	bd70      	pop	{r4, r5, r6, pc}
   b8ac4:	f094 0f00 	teq	r4, #0
   b8ac8:	d10f      	bne.n	b8aea <__aeabi_dmul+0x1c2>
   b8aca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b8ace:	0040      	lsls	r0, r0, #1
   b8ad0:	eb41 0101 	adc.w	r1, r1, r1
   b8ad4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8ad8:	bf08      	it	eq
   b8ada:	3c01      	subeq	r4, #1
   b8adc:	d0f7      	beq.n	b8ace <__aeabi_dmul+0x1a6>
   b8ade:	ea41 0106 	orr.w	r1, r1, r6
   b8ae2:	f095 0f00 	teq	r5, #0
   b8ae6:	bf18      	it	ne
   b8ae8:	4770      	bxne	lr
   b8aea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b8aee:	0052      	lsls	r2, r2, #1
   b8af0:	eb43 0303 	adc.w	r3, r3, r3
   b8af4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b8af8:	bf08      	it	eq
   b8afa:	3d01      	subeq	r5, #1
   b8afc:	d0f7      	beq.n	b8aee <__aeabi_dmul+0x1c6>
   b8afe:	ea43 0306 	orr.w	r3, r3, r6
   b8b02:	4770      	bx	lr
   b8b04:	ea94 0f0c 	teq	r4, ip
   b8b08:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8b0c:	bf18      	it	ne
   b8b0e:	ea95 0f0c 	teqne	r5, ip
   b8b12:	d00c      	beq.n	b8b2e <__aeabi_dmul+0x206>
   b8b14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8b18:	bf18      	it	ne
   b8b1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8b1e:	d1d1      	bne.n	b8ac4 <__aeabi_dmul+0x19c>
   b8b20:	ea81 0103 	eor.w	r1, r1, r3
   b8b24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8b28:	f04f 0000 	mov.w	r0, #0
   b8b2c:	bd70      	pop	{r4, r5, r6, pc}
   b8b2e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8b32:	bf06      	itte	eq
   b8b34:	4610      	moveq	r0, r2
   b8b36:	4619      	moveq	r1, r3
   b8b38:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8b3c:	d019      	beq.n	b8b72 <__aeabi_dmul+0x24a>
   b8b3e:	ea94 0f0c 	teq	r4, ip
   b8b42:	d102      	bne.n	b8b4a <__aeabi_dmul+0x222>
   b8b44:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b8b48:	d113      	bne.n	b8b72 <__aeabi_dmul+0x24a>
   b8b4a:	ea95 0f0c 	teq	r5, ip
   b8b4e:	d105      	bne.n	b8b5c <__aeabi_dmul+0x234>
   b8b50:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b8b54:	bf1c      	itt	ne
   b8b56:	4610      	movne	r0, r2
   b8b58:	4619      	movne	r1, r3
   b8b5a:	d10a      	bne.n	b8b72 <__aeabi_dmul+0x24a>
   b8b5c:	ea81 0103 	eor.w	r1, r1, r3
   b8b60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8b64:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8b68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8b6c:	f04f 0000 	mov.w	r0, #0
   b8b70:	bd70      	pop	{r4, r5, r6, pc}
   b8b72:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8b76:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b8b7a:	bd70      	pop	{r4, r5, r6, pc}

000b8b7c <__aeabi_ddiv>:
   b8b7c:	b570      	push	{r4, r5, r6, lr}
   b8b7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8b82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8b86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8b8a:	bf1d      	ittte	ne
   b8b8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8b90:	ea94 0f0c 	teqne	r4, ip
   b8b94:	ea95 0f0c 	teqne	r5, ip
   b8b98:	f000 f8a7 	bleq	b8cea <__aeabi_ddiv+0x16e>
   b8b9c:	eba4 0405 	sub.w	r4, r4, r5
   b8ba0:	ea81 0e03 	eor.w	lr, r1, r3
   b8ba4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8ba8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8bac:	f000 8088 	beq.w	b8cc0 <__aeabi_ddiv+0x144>
   b8bb0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8bb4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b8bb8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b8bbc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b8bc0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b8bc4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b8bc8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b8bcc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b8bd0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b8bd4:	429d      	cmp	r5, r3
   b8bd6:	bf08      	it	eq
   b8bd8:	4296      	cmpeq	r6, r2
   b8bda:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b8bde:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b8be2:	d202      	bcs.n	b8bea <__aeabi_ddiv+0x6e>
   b8be4:	085b      	lsrs	r3, r3, #1
   b8be6:	ea4f 0232 	mov.w	r2, r2, rrx
   b8bea:	1ab6      	subs	r6, r6, r2
   b8bec:	eb65 0503 	sbc.w	r5, r5, r3
   b8bf0:	085b      	lsrs	r3, r3, #1
   b8bf2:	ea4f 0232 	mov.w	r2, r2, rrx
   b8bf6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b8bfa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b8bfe:	ebb6 0e02 	subs.w	lr, r6, r2
   b8c02:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8c06:	bf22      	ittt	cs
   b8c08:	1ab6      	subcs	r6, r6, r2
   b8c0a:	4675      	movcs	r5, lr
   b8c0c:	ea40 000c 	orrcs.w	r0, r0, ip
   b8c10:	085b      	lsrs	r3, r3, #1
   b8c12:	ea4f 0232 	mov.w	r2, r2, rrx
   b8c16:	ebb6 0e02 	subs.w	lr, r6, r2
   b8c1a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8c1e:	bf22      	ittt	cs
   b8c20:	1ab6      	subcs	r6, r6, r2
   b8c22:	4675      	movcs	r5, lr
   b8c24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b8c28:	085b      	lsrs	r3, r3, #1
   b8c2a:	ea4f 0232 	mov.w	r2, r2, rrx
   b8c2e:	ebb6 0e02 	subs.w	lr, r6, r2
   b8c32:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8c36:	bf22      	ittt	cs
   b8c38:	1ab6      	subcs	r6, r6, r2
   b8c3a:	4675      	movcs	r5, lr
   b8c3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b8c40:	085b      	lsrs	r3, r3, #1
   b8c42:	ea4f 0232 	mov.w	r2, r2, rrx
   b8c46:	ebb6 0e02 	subs.w	lr, r6, r2
   b8c4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8c4e:	bf22      	ittt	cs
   b8c50:	1ab6      	subcs	r6, r6, r2
   b8c52:	4675      	movcs	r5, lr
   b8c54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b8c58:	ea55 0e06 	orrs.w	lr, r5, r6
   b8c5c:	d018      	beq.n	b8c90 <__aeabi_ddiv+0x114>
   b8c5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b8c62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b8c66:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b8c6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b8c6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b8c72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b8c76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b8c7a:	d1c0      	bne.n	b8bfe <__aeabi_ddiv+0x82>
   b8c7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8c80:	d10b      	bne.n	b8c9a <__aeabi_ddiv+0x11e>
   b8c82:	ea41 0100 	orr.w	r1, r1, r0
   b8c86:	f04f 0000 	mov.w	r0, #0
   b8c8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b8c8e:	e7b6      	b.n	b8bfe <__aeabi_ddiv+0x82>
   b8c90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8c94:	bf04      	itt	eq
   b8c96:	4301      	orreq	r1, r0
   b8c98:	2000      	moveq	r0, #0
   b8c9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8c9e:	bf88      	it	hi
   b8ca0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8ca4:	f63f aeaf 	bhi.w	b8a06 <__aeabi_dmul+0xde>
   b8ca8:	ebb5 0c03 	subs.w	ip, r5, r3
   b8cac:	bf04      	itt	eq
   b8cae:	ebb6 0c02 	subseq.w	ip, r6, r2
   b8cb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8cb6:	f150 0000 	adcs.w	r0, r0, #0
   b8cba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8cbe:	bd70      	pop	{r4, r5, r6, pc}
   b8cc0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b8cc4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b8cc8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b8ccc:	bfc2      	ittt	gt
   b8cce:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8cd2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8cd6:	bd70      	popgt	{r4, r5, r6, pc}
   b8cd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8cdc:	f04f 0e00 	mov.w	lr, #0
   b8ce0:	3c01      	subs	r4, #1
   b8ce2:	e690      	b.n	b8a06 <__aeabi_dmul+0xde>
   b8ce4:	ea45 0e06 	orr.w	lr, r5, r6
   b8ce8:	e68d      	b.n	b8a06 <__aeabi_dmul+0xde>
   b8cea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8cee:	ea94 0f0c 	teq	r4, ip
   b8cf2:	bf08      	it	eq
   b8cf4:	ea95 0f0c 	teqeq	r5, ip
   b8cf8:	f43f af3b 	beq.w	b8b72 <__aeabi_dmul+0x24a>
   b8cfc:	ea94 0f0c 	teq	r4, ip
   b8d00:	d10a      	bne.n	b8d18 <__aeabi_ddiv+0x19c>
   b8d02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8d06:	f47f af34 	bne.w	b8b72 <__aeabi_dmul+0x24a>
   b8d0a:	ea95 0f0c 	teq	r5, ip
   b8d0e:	f47f af25 	bne.w	b8b5c <__aeabi_dmul+0x234>
   b8d12:	4610      	mov	r0, r2
   b8d14:	4619      	mov	r1, r3
   b8d16:	e72c      	b.n	b8b72 <__aeabi_dmul+0x24a>
   b8d18:	ea95 0f0c 	teq	r5, ip
   b8d1c:	d106      	bne.n	b8d2c <__aeabi_ddiv+0x1b0>
   b8d1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8d22:	f43f aefd 	beq.w	b8b20 <__aeabi_dmul+0x1f8>
   b8d26:	4610      	mov	r0, r2
   b8d28:	4619      	mov	r1, r3
   b8d2a:	e722      	b.n	b8b72 <__aeabi_dmul+0x24a>
   b8d2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8d30:	bf18      	it	ne
   b8d32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8d36:	f47f aec5 	bne.w	b8ac4 <__aeabi_dmul+0x19c>
   b8d3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b8d3e:	f47f af0d 	bne.w	b8b5c <__aeabi_dmul+0x234>
   b8d42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b8d46:	f47f aeeb 	bne.w	b8b20 <__aeabi_dmul+0x1f8>
   b8d4a:	e712      	b.n	b8b72 <__aeabi_dmul+0x24a>

000b8d4c <__gedf2>:
   b8d4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8d50:	e006      	b.n	b8d60 <__cmpdf2+0x4>
   b8d52:	bf00      	nop

000b8d54 <__ledf2>:
   b8d54:	f04f 0c01 	mov.w	ip, #1
   b8d58:	e002      	b.n	b8d60 <__cmpdf2+0x4>
   b8d5a:	bf00      	nop

000b8d5c <__cmpdf2>:
   b8d5c:	f04f 0c01 	mov.w	ip, #1
   b8d60:	f84d cd04 	str.w	ip, [sp, #-4]!
   b8d64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8d68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8d6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8d70:	bf18      	it	ne
   b8d72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b8d76:	d01b      	beq.n	b8db0 <__cmpdf2+0x54>
   b8d78:	b001      	add	sp, #4
   b8d7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b8d7e:	bf0c      	ite	eq
   b8d80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b8d84:	ea91 0f03 	teqne	r1, r3
   b8d88:	bf02      	ittt	eq
   b8d8a:	ea90 0f02 	teqeq	r0, r2
   b8d8e:	2000      	moveq	r0, #0
   b8d90:	4770      	bxeq	lr
   b8d92:	f110 0f00 	cmn.w	r0, #0
   b8d96:	ea91 0f03 	teq	r1, r3
   b8d9a:	bf58      	it	pl
   b8d9c:	4299      	cmppl	r1, r3
   b8d9e:	bf08      	it	eq
   b8da0:	4290      	cmpeq	r0, r2
   b8da2:	bf2c      	ite	cs
   b8da4:	17d8      	asrcs	r0, r3, #31
   b8da6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b8daa:	f040 0001 	orr.w	r0, r0, #1
   b8dae:	4770      	bx	lr
   b8db0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8db4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8db8:	d102      	bne.n	b8dc0 <__cmpdf2+0x64>
   b8dba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b8dbe:	d107      	bne.n	b8dd0 <__cmpdf2+0x74>
   b8dc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8dc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8dc8:	d1d6      	bne.n	b8d78 <__cmpdf2+0x1c>
   b8dca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b8dce:	d0d3      	beq.n	b8d78 <__cmpdf2+0x1c>
   b8dd0:	f85d 0b04 	ldr.w	r0, [sp], #4
   b8dd4:	4770      	bx	lr
   b8dd6:	bf00      	nop

000b8dd8 <__aeabi_cdrcmple>:
   b8dd8:	4684      	mov	ip, r0
   b8dda:	4610      	mov	r0, r2
   b8ddc:	4662      	mov	r2, ip
   b8dde:	468c      	mov	ip, r1
   b8de0:	4619      	mov	r1, r3
   b8de2:	4663      	mov	r3, ip
   b8de4:	e000      	b.n	b8de8 <__aeabi_cdcmpeq>
   b8de6:	bf00      	nop

000b8de8 <__aeabi_cdcmpeq>:
   b8de8:	b501      	push	{r0, lr}
   b8dea:	f7ff ffb7 	bl	b8d5c <__cmpdf2>
   b8dee:	2800      	cmp	r0, #0
   b8df0:	bf48      	it	mi
   b8df2:	f110 0f00 	cmnmi.w	r0, #0
   b8df6:	bd01      	pop	{r0, pc}

000b8df8 <__aeabi_dcmpeq>:
   b8df8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8dfc:	f7ff fff4 	bl	b8de8 <__aeabi_cdcmpeq>
   b8e00:	bf0c      	ite	eq
   b8e02:	2001      	moveq	r0, #1
   b8e04:	2000      	movne	r0, #0
   b8e06:	f85d fb08 	ldr.w	pc, [sp], #8
   b8e0a:	bf00      	nop

000b8e0c <__aeabi_dcmplt>:
   b8e0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8e10:	f7ff ffea 	bl	b8de8 <__aeabi_cdcmpeq>
   b8e14:	bf34      	ite	cc
   b8e16:	2001      	movcc	r0, #1
   b8e18:	2000      	movcs	r0, #0
   b8e1a:	f85d fb08 	ldr.w	pc, [sp], #8
   b8e1e:	bf00      	nop

000b8e20 <__aeabi_dcmple>:
   b8e20:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8e24:	f7ff ffe0 	bl	b8de8 <__aeabi_cdcmpeq>
   b8e28:	bf94      	ite	ls
   b8e2a:	2001      	movls	r0, #1
   b8e2c:	2000      	movhi	r0, #0
   b8e2e:	f85d fb08 	ldr.w	pc, [sp], #8
   b8e32:	bf00      	nop

000b8e34 <__aeabi_dcmpge>:
   b8e34:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8e38:	f7ff ffce 	bl	b8dd8 <__aeabi_cdrcmple>
   b8e3c:	bf94      	ite	ls
   b8e3e:	2001      	movls	r0, #1
   b8e40:	2000      	movhi	r0, #0
   b8e42:	f85d fb08 	ldr.w	pc, [sp], #8
   b8e46:	bf00      	nop

000b8e48 <__aeabi_dcmpgt>:
   b8e48:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8e4c:	f7ff ffc4 	bl	b8dd8 <__aeabi_cdrcmple>
   b8e50:	bf34      	ite	cc
   b8e52:	2001      	movcc	r0, #1
   b8e54:	2000      	movcs	r0, #0
   b8e56:	f85d fb08 	ldr.w	pc, [sp], #8
   b8e5a:	bf00      	nop

000b8e5c <__aeabi_dcmpun>:
   b8e5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8e60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8e64:	d102      	bne.n	b8e6c <__aeabi_dcmpun+0x10>
   b8e66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b8e6a:	d10a      	bne.n	b8e82 <__aeabi_dcmpun+0x26>
   b8e6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8e70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8e74:	d102      	bne.n	b8e7c <__aeabi_dcmpun+0x20>
   b8e76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b8e7a:	d102      	bne.n	b8e82 <__aeabi_dcmpun+0x26>
   b8e7c:	f04f 0000 	mov.w	r0, #0
   b8e80:	4770      	bx	lr
   b8e82:	f04f 0001 	mov.w	r0, #1
   b8e86:	4770      	bx	lr

000b8e88 <__aeabi_d2uiz>:
   b8e88:	004a      	lsls	r2, r1, #1
   b8e8a:	d211      	bcs.n	b8eb0 <__aeabi_d2uiz+0x28>
   b8e8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b8e90:	d211      	bcs.n	b8eb6 <__aeabi_d2uiz+0x2e>
   b8e92:	d50d      	bpl.n	b8eb0 <__aeabi_d2uiz+0x28>
   b8e94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b8e98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b8e9c:	d40e      	bmi.n	b8ebc <__aeabi_d2uiz+0x34>
   b8e9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8ea2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8ea6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b8eaa:	fa23 f002 	lsr.w	r0, r3, r2
   b8eae:	4770      	bx	lr
   b8eb0:	f04f 0000 	mov.w	r0, #0
   b8eb4:	4770      	bx	lr
   b8eb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b8eba:	d102      	bne.n	b8ec2 <__aeabi_d2uiz+0x3a>
   b8ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8ec0:	4770      	bx	lr
   b8ec2:	f04f 0000 	mov.w	r0, #0
   b8ec6:	4770      	bx	lr

000b8ec8 <__aeabi_d2f>:
   b8ec8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b8ecc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b8ed0:	bf24      	itt	cs
   b8ed2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b8ed6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b8eda:	d90d      	bls.n	b8ef8 <__aeabi_d2f+0x30>
   b8edc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b8ee0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b8ee4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b8ee8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b8eec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b8ef0:	bf08      	it	eq
   b8ef2:	f020 0001 	biceq.w	r0, r0, #1
   b8ef6:	4770      	bx	lr
   b8ef8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b8efc:	d121      	bne.n	b8f42 <__aeabi_d2f+0x7a>
   b8efe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b8f02:	bfbc      	itt	lt
   b8f04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b8f08:	4770      	bxlt	lr
   b8f0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8f0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b8f12:	f1c2 0218 	rsb	r2, r2, #24
   b8f16:	f1c2 0c20 	rsb	ip, r2, #32
   b8f1a:	fa10 f30c 	lsls.w	r3, r0, ip
   b8f1e:	fa20 f002 	lsr.w	r0, r0, r2
   b8f22:	bf18      	it	ne
   b8f24:	f040 0001 	orrne.w	r0, r0, #1
   b8f28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8f2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b8f30:	fa03 fc0c 	lsl.w	ip, r3, ip
   b8f34:	ea40 000c 	orr.w	r0, r0, ip
   b8f38:	fa23 f302 	lsr.w	r3, r3, r2
   b8f3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b8f40:	e7cc      	b.n	b8edc <__aeabi_d2f+0x14>
   b8f42:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b8f46:	d107      	bne.n	b8f58 <__aeabi_d2f+0x90>
   b8f48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b8f4c:	bf1e      	ittt	ne
   b8f4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b8f52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b8f56:	4770      	bxne	lr
   b8f58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b8f5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b8f60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b8f64:	4770      	bx	lr
   b8f66:	bf00      	nop

000b8f68 <__aeabi_d2ulz>:
   b8f68:	b5d0      	push	{r4, r6, r7, lr}
   b8f6a:	4b0c      	ldr	r3, [pc, #48]	; (b8f9c <__aeabi_d2ulz+0x34>)
   b8f6c:	2200      	movs	r2, #0
   b8f6e:	4606      	mov	r6, r0
   b8f70:	460f      	mov	r7, r1
   b8f72:	f7ff fcd9 	bl	b8928 <__aeabi_dmul>
   b8f76:	f7ff ff87 	bl	b8e88 <__aeabi_d2uiz>
   b8f7a:	4604      	mov	r4, r0
   b8f7c:	f7ff fc5a 	bl	b8834 <__aeabi_ui2d>
   b8f80:	4b07      	ldr	r3, [pc, #28]	; (b8fa0 <__aeabi_d2ulz+0x38>)
   b8f82:	2200      	movs	r2, #0
   b8f84:	f7ff fcd0 	bl	b8928 <__aeabi_dmul>
   b8f88:	4602      	mov	r2, r0
   b8f8a:	460b      	mov	r3, r1
   b8f8c:	4630      	mov	r0, r6
   b8f8e:	4639      	mov	r1, r7
   b8f90:	f7ff fb12 	bl	b85b8 <__aeabi_dsub>
   b8f94:	f7ff ff78 	bl	b8e88 <__aeabi_d2uiz>
   b8f98:	4621      	mov	r1, r4
   b8f9a:	bdd0      	pop	{r4, r6, r7, pc}
   b8f9c:	3df00000 	.word	0x3df00000
   b8fa0:	41f00000 	.word	0x41f00000

000b8fa4 <atexit>:
   b8fa4:	2300      	movs	r3, #0
   b8fa6:	4601      	mov	r1, r0
   b8fa8:	461a      	mov	r2, r3
   b8faa:	4618      	mov	r0, r3
   b8fac:	f000 bf82 	b.w	b9eb4 <__register_exitproc>

000b8fb0 <atof>:
   b8fb0:	2100      	movs	r1, #0
   b8fb2:	f000 bee7 	b.w	b9d84 <strtod>

000b8fb6 <atoi>:
   b8fb6:	220a      	movs	r2, #10
   b8fb8:	2100      	movs	r1, #0
   b8fba:	f000 bf71 	b.w	b9ea0 <strtol>

000b8fbe <memcmp>:
   b8fbe:	b510      	push	{r4, lr}
   b8fc0:	3901      	subs	r1, #1
   b8fc2:	4402      	add	r2, r0
   b8fc4:	4290      	cmp	r0, r2
   b8fc6:	d101      	bne.n	b8fcc <memcmp+0xe>
   b8fc8:	2000      	movs	r0, #0
   b8fca:	e005      	b.n	b8fd8 <memcmp+0x1a>
   b8fcc:	7803      	ldrb	r3, [r0, #0]
   b8fce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8fd2:	42a3      	cmp	r3, r4
   b8fd4:	d001      	beq.n	b8fda <memcmp+0x1c>
   b8fd6:	1b18      	subs	r0, r3, r4
   b8fd8:	bd10      	pop	{r4, pc}
   b8fda:	3001      	adds	r0, #1
   b8fdc:	e7f2      	b.n	b8fc4 <memcmp+0x6>

000b8fde <memcpy>:
   b8fde:	440a      	add	r2, r1
   b8fe0:	4291      	cmp	r1, r2
   b8fe2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8fe6:	d100      	bne.n	b8fea <memcpy+0xc>
   b8fe8:	4770      	bx	lr
   b8fea:	b510      	push	{r4, lr}
   b8fec:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8ff4:	4291      	cmp	r1, r2
   b8ff6:	d1f9      	bne.n	b8fec <memcpy+0xe>
   b8ff8:	bd10      	pop	{r4, pc}

000b8ffa <memmove>:
   b8ffa:	4288      	cmp	r0, r1
   b8ffc:	b510      	push	{r4, lr}
   b8ffe:	eb01 0402 	add.w	r4, r1, r2
   b9002:	d902      	bls.n	b900a <memmove+0x10>
   b9004:	4284      	cmp	r4, r0
   b9006:	4623      	mov	r3, r4
   b9008:	d807      	bhi.n	b901a <memmove+0x20>
   b900a:	1e43      	subs	r3, r0, #1
   b900c:	42a1      	cmp	r1, r4
   b900e:	d008      	beq.n	b9022 <memmove+0x28>
   b9010:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9014:	f803 2f01 	strb.w	r2, [r3, #1]!
   b9018:	e7f8      	b.n	b900c <memmove+0x12>
   b901a:	4402      	add	r2, r0
   b901c:	4601      	mov	r1, r0
   b901e:	428a      	cmp	r2, r1
   b9020:	d100      	bne.n	b9024 <memmove+0x2a>
   b9022:	bd10      	pop	{r4, pc}
   b9024:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b9028:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b902c:	e7f7      	b.n	b901e <memmove+0x24>

000b902e <memset>:
   b902e:	4402      	add	r2, r0
   b9030:	4603      	mov	r3, r0
   b9032:	4293      	cmp	r3, r2
   b9034:	d100      	bne.n	b9038 <memset+0xa>
   b9036:	4770      	bx	lr
   b9038:	f803 1b01 	strb.w	r1, [r3], #1
   b903c:	e7f9      	b.n	b9032 <memset+0x4>
	...

000b9040 <srand>:
   b9040:	b538      	push	{r3, r4, r5, lr}
   b9042:	4b10      	ldr	r3, [pc, #64]	; (b9084 <srand+0x44>)
   b9044:	681d      	ldr	r5, [r3, #0]
   b9046:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9048:	4604      	mov	r4, r0
   b904a:	b9b3      	cbnz	r3, b907a <srand+0x3a>
   b904c:	2018      	movs	r0, #24
   b904e:	f7fc fd6f 	bl	b5b30 <malloc>
   b9052:	4602      	mov	r2, r0
   b9054:	63a8      	str	r0, [r5, #56]	; 0x38
   b9056:	b920      	cbnz	r0, b9062 <srand+0x22>
   b9058:	4b0b      	ldr	r3, [pc, #44]	; (b9088 <srand+0x48>)
   b905a:	480c      	ldr	r0, [pc, #48]	; (b908c <srand+0x4c>)
   b905c:	2142      	movs	r1, #66	; 0x42
   b905e:	f7fc fda7 	bl	b5bb0 <__assert_func>
   b9062:	490b      	ldr	r1, [pc, #44]	; (b9090 <srand+0x50>)
   b9064:	4b0b      	ldr	r3, [pc, #44]	; (b9094 <srand+0x54>)
   b9066:	e9c0 1300 	strd	r1, r3, [r0]
   b906a:	4b0b      	ldr	r3, [pc, #44]	; (b9098 <srand+0x58>)
   b906c:	6083      	str	r3, [r0, #8]
   b906e:	230b      	movs	r3, #11
   b9070:	8183      	strh	r3, [r0, #12]
   b9072:	2100      	movs	r1, #0
   b9074:	2001      	movs	r0, #1
   b9076:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b907a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b907c:	2200      	movs	r2, #0
   b907e:	611c      	str	r4, [r3, #16]
   b9080:	615a      	str	r2, [r3, #20]
   b9082:	bd38      	pop	{r3, r4, r5, pc}
   b9084:	20035620 	.word	0x20035620
   b9088:	000bb831 	.word	0x000bb831
   b908c:	000bb848 	.word	0x000bb848
   b9090:	abcd330e 	.word	0xabcd330e
   b9094:	e66d1234 	.word	0xe66d1234
   b9098:	0005deec 	.word	0x0005deec

000b909c <strcmp>:
   b909c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b90a0:	f811 3b01 	ldrb.w	r3, [r1], #1
   b90a4:	2a01      	cmp	r2, #1
   b90a6:	bf28      	it	cs
   b90a8:	429a      	cmpcs	r2, r3
   b90aa:	d0f7      	beq.n	b909c <strcmp>
   b90ac:	1ad0      	subs	r0, r2, r3
   b90ae:	4770      	bx	lr

000b90b0 <strcpy>:
   b90b0:	4603      	mov	r3, r0
   b90b2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b90b6:	f803 2b01 	strb.w	r2, [r3], #1
   b90ba:	2a00      	cmp	r2, #0
   b90bc:	d1f9      	bne.n	b90b2 <strcpy+0x2>
   b90be:	4770      	bx	lr

000b90c0 <strlen>:
   b90c0:	4603      	mov	r3, r0
   b90c2:	f813 2b01 	ldrb.w	r2, [r3], #1
   b90c6:	2a00      	cmp	r2, #0
   b90c8:	d1fb      	bne.n	b90c2 <strlen+0x2>
   b90ca:	1a18      	subs	r0, r3, r0
   b90cc:	3801      	subs	r0, #1
   b90ce:	4770      	bx	lr

000b90d0 <strncmp>:
   b90d0:	b510      	push	{r4, lr}
   b90d2:	b17a      	cbz	r2, b90f4 <strncmp+0x24>
   b90d4:	4603      	mov	r3, r0
   b90d6:	3901      	subs	r1, #1
   b90d8:	1884      	adds	r4, r0, r2
   b90da:	f813 0b01 	ldrb.w	r0, [r3], #1
   b90de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b90e2:	4290      	cmp	r0, r2
   b90e4:	d101      	bne.n	b90ea <strncmp+0x1a>
   b90e6:	42a3      	cmp	r3, r4
   b90e8:	d101      	bne.n	b90ee <strncmp+0x1e>
   b90ea:	1a80      	subs	r0, r0, r2
   b90ec:	bd10      	pop	{r4, pc}
   b90ee:	2800      	cmp	r0, #0
   b90f0:	d1f3      	bne.n	b90da <strncmp+0xa>
   b90f2:	e7fa      	b.n	b90ea <strncmp+0x1a>
   b90f4:	4610      	mov	r0, r2
   b90f6:	e7f9      	b.n	b90ec <strncmp+0x1c>

000b90f8 <strnlen>:
   b90f8:	b510      	push	{r4, lr}
   b90fa:	4602      	mov	r2, r0
   b90fc:	4401      	add	r1, r0
   b90fe:	428a      	cmp	r2, r1
   b9100:	4613      	mov	r3, r2
   b9102:	d003      	beq.n	b910c <strnlen+0x14>
   b9104:	781c      	ldrb	r4, [r3, #0]
   b9106:	3201      	adds	r2, #1
   b9108:	2c00      	cmp	r4, #0
   b910a:	d1f8      	bne.n	b90fe <strnlen+0x6>
   b910c:	1a18      	subs	r0, r3, r0
   b910e:	bd10      	pop	{r4, pc}

000b9110 <strstr>:
   b9110:	780a      	ldrb	r2, [r1, #0]
   b9112:	b570      	push	{r4, r5, r6, lr}
   b9114:	b96a      	cbnz	r2, b9132 <strstr+0x22>
   b9116:	bd70      	pop	{r4, r5, r6, pc}
   b9118:	429a      	cmp	r2, r3
   b911a:	d109      	bne.n	b9130 <strstr+0x20>
   b911c:	460c      	mov	r4, r1
   b911e:	4605      	mov	r5, r0
   b9120:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   b9124:	2b00      	cmp	r3, #0
   b9126:	d0f6      	beq.n	b9116 <strstr+0x6>
   b9128:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   b912c:	429e      	cmp	r6, r3
   b912e:	d0f7      	beq.n	b9120 <strstr+0x10>
   b9130:	3001      	adds	r0, #1
   b9132:	7803      	ldrb	r3, [r0, #0]
   b9134:	2b00      	cmp	r3, #0
   b9136:	d1ef      	bne.n	b9118 <strstr+0x8>
   b9138:	4618      	mov	r0, r3
   b913a:	e7ec      	b.n	b9116 <strstr+0x6>

000b913c <sulp>:
   b913c:	b570      	push	{r4, r5, r6, lr}
   b913e:	4604      	mov	r4, r0
   b9140:	460d      	mov	r5, r1
   b9142:	ec45 4b10 	vmov	d0, r4, r5
   b9146:	4616      	mov	r6, r2
   b9148:	f001 fe0e 	bl	bad68 <__ulp>
   b914c:	ec51 0b10 	vmov	r0, r1, d0
   b9150:	b17e      	cbz	r6, b9172 <sulp+0x36>
   b9152:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b9156:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b915a:	2b00      	cmp	r3, #0
   b915c:	dd09      	ble.n	b9172 <sulp+0x36>
   b915e:	051b      	lsls	r3, r3, #20
   b9160:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b9164:	2400      	movs	r4, #0
   b9166:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b916a:	4622      	mov	r2, r4
   b916c:	462b      	mov	r3, r5
   b916e:	f7ff fbdb 	bl	b8928 <__aeabi_dmul>
   b9172:	bd70      	pop	{r4, r5, r6, pc}
   b9174:	0000      	movs	r0, r0
	...

000b9178 <_strtod_l>:
   b9178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b917c:	ed2d 8b02 	vpush	{d8}
   b9180:	b09d      	sub	sp, #116	; 0x74
   b9182:	461f      	mov	r7, r3
   b9184:	2300      	movs	r3, #0
   b9186:	9318      	str	r3, [sp, #96]	; 0x60
   b9188:	4ba2      	ldr	r3, [pc, #648]	; (b9414 <_strtod_l+0x29c>)
   b918a:	9213      	str	r2, [sp, #76]	; 0x4c
   b918c:	681b      	ldr	r3, [r3, #0]
   b918e:	9305      	str	r3, [sp, #20]
   b9190:	4604      	mov	r4, r0
   b9192:	4618      	mov	r0, r3
   b9194:	4688      	mov	r8, r1
   b9196:	f7ff ff93 	bl	b90c0 <strlen>
   b919a:	f04f 0a00 	mov.w	sl, #0
   b919e:	4605      	mov	r5, r0
   b91a0:	f04f 0b00 	mov.w	fp, #0
   b91a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b91a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b91aa:	781a      	ldrb	r2, [r3, #0]
   b91ac:	2a2b      	cmp	r2, #43	; 0x2b
   b91ae:	d04e      	beq.n	b924e <_strtod_l+0xd6>
   b91b0:	d83b      	bhi.n	b922a <_strtod_l+0xb2>
   b91b2:	2a0d      	cmp	r2, #13
   b91b4:	d834      	bhi.n	b9220 <_strtod_l+0xa8>
   b91b6:	2a08      	cmp	r2, #8
   b91b8:	d834      	bhi.n	b9224 <_strtod_l+0xac>
   b91ba:	2a00      	cmp	r2, #0
   b91bc:	d03e      	beq.n	b923c <_strtod_l+0xc4>
   b91be:	2300      	movs	r3, #0
   b91c0:	930a      	str	r3, [sp, #40]	; 0x28
   b91c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b91c4:	7833      	ldrb	r3, [r6, #0]
   b91c6:	2b30      	cmp	r3, #48	; 0x30
   b91c8:	f040 80b0 	bne.w	b932c <_strtod_l+0x1b4>
   b91cc:	7873      	ldrb	r3, [r6, #1]
   b91ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b91d2:	2b58      	cmp	r3, #88	; 0x58
   b91d4:	d168      	bne.n	b92a8 <_strtod_l+0x130>
   b91d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b91d8:	9301      	str	r3, [sp, #4]
   b91da:	ab18      	add	r3, sp, #96	; 0x60
   b91dc:	9702      	str	r7, [sp, #8]
   b91de:	9300      	str	r3, [sp, #0]
   b91e0:	4a8d      	ldr	r2, [pc, #564]	; (b9418 <_strtod_l+0x2a0>)
   b91e2:	ab19      	add	r3, sp, #100	; 0x64
   b91e4:	a917      	add	r1, sp, #92	; 0x5c
   b91e6:	4620      	mov	r0, r4
   b91e8:	f000 ff2e 	bl	ba048 <__gethex>
   b91ec:	f010 0707 	ands.w	r7, r0, #7
   b91f0:	4605      	mov	r5, r0
   b91f2:	d005      	beq.n	b9200 <_strtod_l+0x88>
   b91f4:	2f06      	cmp	r7, #6
   b91f6:	d12c      	bne.n	b9252 <_strtod_l+0xda>
   b91f8:	3601      	adds	r6, #1
   b91fa:	2300      	movs	r3, #0
   b91fc:	9617      	str	r6, [sp, #92]	; 0x5c
   b91fe:	930a      	str	r3, [sp, #40]	; 0x28
   b9200:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b9202:	2b00      	cmp	r3, #0
   b9204:	f040 8590 	bne.w	b9d28 <_strtod_l+0xbb0>
   b9208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b920a:	b1eb      	cbz	r3, b9248 <_strtod_l+0xd0>
   b920c:	4652      	mov	r2, sl
   b920e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b9212:	ec43 2b10 	vmov	d0, r2, r3
   b9216:	b01d      	add	sp, #116	; 0x74
   b9218:	ecbd 8b02 	vpop	{d8}
   b921c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9220:	2a20      	cmp	r2, #32
   b9222:	d1cc      	bne.n	b91be <_strtod_l+0x46>
   b9224:	3301      	adds	r3, #1
   b9226:	9317      	str	r3, [sp, #92]	; 0x5c
   b9228:	e7be      	b.n	b91a8 <_strtod_l+0x30>
   b922a:	2a2d      	cmp	r2, #45	; 0x2d
   b922c:	d1c7      	bne.n	b91be <_strtod_l+0x46>
   b922e:	2201      	movs	r2, #1
   b9230:	920a      	str	r2, [sp, #40]	; 0x28
   b9232:	1c5a      	adds	r2, r3, #1
   b9234:	9217      	str	r2, [sp, #92]	; 0x5c
   b9236:	785b      	ldrb	r3, [r3, #1]
   b9238:	2b00      	cmp	r3, #0
   b923a:	d1c2      	bne.n	b91c2 <_strtod_l+0x4a>
   b923c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b923e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9242:	2b00      	cmp	r3, #0
   b9244:	f040 856e 	bne.w	b9d24 <_strtod_l+0xbac>
   b9248:	4652      	mov	r2, sl
   b924a:	465b      	mov	r3, fp
   b924c:	e7e1      	b.n	b9212 <_strtod_l+0x9a>
   b924e:	2200      	movs	r2, #0
   b9250:	e7ee      	b.n	b9230 <_strtod_l+0xb8>
   b9252:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b9254:	b13a      	cbz	r2, b9266 <_strtod_l+0xee>
   b9256:	2135      	movs	r1, #53	; 0x35
   b9258:	a81a      	add	r0, sp, #104	; 0x68
   b925a:	f001 fe90 	bl	baf7e <__copybits>
   b925e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9260:	4620      	mov	r0, r4
   b9262:	f001 fa4f 	bl	ba704 <_Bfree>
   b9266:	3f01      	subs	r7, #1
   b9268:	2f04      	cmp	r7, #4
   b926a:	d806      	bhi.n	b927a <_strtod_l+0x102>
   b926c:	e8df f007 	tbb	[pc, r7]
   b9270:	1714030a 	.word	0x1714030a
   b9274:	0a          	.byte	0x0a
   b9275:	00          	.byte	0x00
   b9276:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b927a:	0728      	lsls	r0, r5, #28
   b927c:	d5c0      	bpl.n	b9200 <_strtod_l+0x88>
   b927e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b9282:	e7bd      	b.n	b9200 <_strtod_l+0x88>
   b9284:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b9288:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b928a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b928e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b9292:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b9296:	e7f0      	b.n	b927a <_strtod_l+0x102>
   b9298:	f8df b180 	ldr.w	fp, [pc, #384]	; b941c <_strtod_l+0x2a4>
   b929c:	e7ed      	b.n	b927a <_strtod_l+0x102>
   b929e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b92a2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b92a6:	e7e8      	b.n	b927a <_strtod_l+0x102>
   b92a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b92aa:	1c5a      	adds	r2, r3, #1
   b92ac:	9217      	str	r2, [sp, #92]	; 0x5c
   b92ae:	785b      	ldrb	r3, [r3, #1]
   b92b0:	2b30      	cmp	r3, #48	; 0x30
   b92b2:	d0f9      	beq.n	b92a8 <_strtod_l+0x130>
   b92b4:	2b00      	cmp	r3, #0
   b92b6:	d0a3      	beq.n	b9200 <_strtod_l+0x88>
   b92b8:	2301      	movs	r3, #1
   b92ba:	f04f 0900 	mov.w	r9, #0
   b92be:	9304      	str	r3, [sp, #16]
   b92c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b92c2:	9308      	str	r3, [sp, #32]
   b92c4:	f8cd 901c 	str.w	r9, [sp, #28]
   b92c8:	464f      	mov	r7, r9
   b92ca:	220a      	movs	r2, #10
   b92cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b92ce:	7806      	ldrb	r6, [r0, #0]
   b92d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b92d4:	b2d9      	uxtb	r1, r3
   b92d6:	2909      	cmp	r1, #9
   b92d8:	d92a      	bls.n	b9330 <_strtod_l+0x1b8>
   b92da:	9905      	ldr	r1, [sp, #20]
   b92dc:	462a      	mov	r2, r5
   b92de:	f7ff fef7 	bl	b90d0 <strncmp>
   b92e2:	b398      	cbz	r0, b934c <_strtod_l+0x1d4>
   b92e4:	2000      	movs	r0, #0
   b92e6:	4632      	mov	r2, r6
   b92e8:	463d      	mov	r5, r7
   b92ea:	9005      	str	r0, [sp, #20]
   b92ec:	4603      	mov	r3, r0
   b92ee:	2a65      	cmp	r2, #101	; 0x65
   b92f0:	d001      	beq.n	b92f6 <_strtod_l+0x17e>
   b92f2:	2a45      	cmp	r2, #69	; 0x45
   b92f4:	d118      	bne.n	b9328 <_strtod_l+0x1b0>
   b92f6:	b91d      	cbnz	r5, b9300 <_strtod_l+0x188>
   b92f8:	9a04      	ldr	r2, [sp, #16]
   b92fa:	4302      	orrs	r2, r0
   b92fc:	d09e      	beq.n	b923c <_strtod_l+0xc4>
   b92fe:	2500      	movs	r5, #0
   b9300:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b9304:	f108 0201 	add.w	r2, r8, #1
   b9308:	9217      	str	r2, [sp, #92]	; 0x5c
   b930a:	f898 2001 	ldrb.w	r2, [r8, #1]
   b930e:	2a2b      	cmp	r2, #43	; 0x2b
   b9310:	d075      	beq.n	b93fe <_strtod_l+0x286>
   b9312:	2a2d      	cmp	r2, #45	; 0x2d
   b9314:	d07b      	beq.n	b940e <_strtod_l+0x296>
   b9316:	f04f 0c00 	mov.w	ip, #0
   b931a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b931e:	2909      	cmp	r1, #9
   b9320:	f240 8082 	bls.w	b9428 <_strtod_l+0x2b0>
   b9324:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9328:	2600      	movs	r6, #0
   b932a:	e09d      	b.n	b9468 <_strtod_l+0x2f0>
   b932c:	2300      	movs	r3, #0
   b932e:	e7c4      	b.n	b92ba <_strtod_l+0x142>
   b9330:	2f08      	cmp	r7, #8
   b9332:	bfd8      	it	le
   b9334:	9907      	ldrle	r1, [sp, #28]
   b9336:	f100 0001 	add.w	r0, r0, #1
   b933a:	bfda      	itte	le
   b933c:	fb02 3301 	mlale	r3, r2, r1, r3
   b9340:	9307      	strle	r3, [sp, #28]
   b9342:	fb02 3909 	mlagt	r9, r2, r9, r3
   b9346:	3701      	adds	r7, #1
   b9348:	9017      	str	r0, [sp, #92]	; 0x5c
   b934a:	e7bf      	b.n	b92cc <_strtod_l+0x154>
   b934c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b934e:	195a      	adds	r2, r3, r5
   b9350:	9217      	str	r2, [sp, #92]	; 0x5c
   b9352:	5d5a      	ldrb	r2, [r3, r5]
   b9354:	2f00      	cmp	r7, #0
   b9356:	d037      	beq.n	b93c8 <_strtod_l+0x250>
   b9358:	9005      	str	r0, [sp, #20]
   b935a:	463d      	mov	r5, r7
   b935c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b9360:	2b09      	cmp	r3, #9
   b9362:	d912      	bls.n	b938a <_strtod_l+0x212>
   b9364:	2301      	movs	r3, #1
   b9366:	e7c2      	b.n	b92ee <_strtod_l+0x176>
   b9368:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b936a:	1c5a      	adds	r2, r3, #1
   b936c:	9217      	str	r2, [sp, #92]	; 0x5c
   b936e:	785a      	ldrb	r2, [r3, #1]
   b9370:	3001      	adds	r0, #1
   b9372:	2a30      	cmp	r2, #48	; 0x30
   b9374:	d0f8      	beq.n	b9368 <_strtod_l+0x1f0>
   b9376:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b937a:	2b08      	cmp	r3, #8
   b937c:	f200 84d9 	bhi.w	b9d32 <_strtod_l+0xbba>
   b9380:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9382:	9005      	str	r0, [sp, #20]
   b9384:	2000      	movs	r0, #0
   b9386:	9308      	str	r3, [sp, #32]
   b9388:	4605      	mov	r5, r0
   b938a:	3a30      	subs	r2, #48	; 0x30
   b938c:	f100 0301 	add.w	r3, r0, #1
   b9390:	d014      	beq.n	b93bc <_strtod_l+0x244>
   b9392:	9905      	ldr	r1, [sp, #20]
   b9394:	4419      	add	r1, r3
   b9396:	9105      	str	r1, [sp, #20]
   b9398:	462b      	mov	r3, r5
   b939a:	eb00 0e05 	add.w	lr, r0, r5
   b939e:	210a      	movs	r1, #10
   b93a0:	4573      	cmp	r3, lr
   b93a2:	d113      	bne.n	b93cc <_strtod_l+0x254>
   b93a4:	182b      	adds	r3, r5, r0
   b93a6:	2b08      	cmp	r3, #8
   b93a8:	f105 0501 	add.w	r5, r5, #1
   b93ac:	4405      	add	r5, r0
   b93ae:	dc1c      	bgt.n	b93ea <_strtod_l+0x272>
   b93b0:	9907      	ldr	r1, [sp, #28]
   b93b2:	230a      	movs	r3, #10
   b93b4:	fb03 2301 	mla	r3, r3, r1, r2
   b93b8:	9307      	str	r3, [sp, #28]
   b93ba:	2300      	movs	r3, #0
   b93bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b93be:	1c51      	adds	r1, r2, #1
   b93c0:	9117      	str	r1, [sp, #92]	; 0x5c
   b93c2:	7852      	ldrb	r2, [r2, #1]
   b93c4:	4618      	mov	r0, r3
   b93c6:	e7c9      	b.n	b935c <_strtod_l+0x1e4>
   b93c8:	4638      	mov	r0, r7
   b93ca:	e7d2      	b.n	b9372 <_strtod_l+0x1fa>
   b93cc:	2b08      	cmp	r3, #8
   b93ce:	dc04      	bgt.n	b93da <_strtod_l+0x262>
   b93d0:	9e07      	ldr	r6, [sp, #28]
   b93d2:	434e      	muls	r6, r1
   b93d4:	9607      	str	r6, [sp, #28]
   b93d6:	3301      	adds	r3, #1
   b93d8:	e7e2      	b.n	b93a0 <_strtod_l+0x228>
   b93da:	f103 0c01 	add.w	ip, r3, #1
   b93de:	f1bc 0f10 	cmp.w	ip, #16
   b93e2:	bfd8      	it	le
   b93e4:	fb01 f909 	mulle.w	r9, r1, r9
   b93e8:	e7f5      	b.n	b93d6 <_strtod_l+0x25e>
   b93ea:	2d10      	cmp	r5, #16
   b93ec:	bfdc      	itt	le
   b93ee:	230a      	movle	r3, #10
   b93f0:	fb03 2909 	mlale	r9, r3, r9, r2
   b93f4:	e7e1      	b.n	b93ba <_strtod_l+0x242>
   b93f6:	2300      	movs	r3, #0
   b93f8:	9305      	str	r3, [sp, #20]
   b93fa:	2301      	movs	r3, #1
   b93fc:	e77c      	b.n	b92f8 <_strtod_l+0x180>
   b93fe:	f04f 0c00 	mov.w	ip, #0
   b9402:	f108 0202 	add.w	r2, r8, #2
   b9406:	9217      	str	r2, [sp, #92]	; 0x5c
   b9408:	f898 2002 	ldrb.w	r2, [r8, #2]
   b940c:	e785      	b.n	b931a <_strtod_l+0x1a2>
   b940e:	f04f 0c01 	mov.w	ip, #1
   b9412:	e7f6      	b.n	b9402 <_strtod_l+0x28a>
   b9414:	000bba74 	.word	0x000bba74
   b9418:	000bb8b0 	.word	0x000bb8b0
   b941c:	7ff00000 	.word	0x7ff00000
   b9420:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9422:	1c51      	adds	r1, r2, #1
   b9424:	9117      	str	r1, [sp, #92]	; 0x5c
   b9426:	7852      	ldrb	r2, [r2, #1]
   b9428:	2a30      	cmp	r2, #48	; 0x30
   b942a:	d0f9      	beq.n	b9420 <_strtod_l+0x2a8>
   b942c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b9430:	2908      	cmp	r1, #8
   b9432:	f63f af79 	bhi.w	b9328 <_strtod_l+0x1b0>
   b9436:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b943a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b943c:	9206      	str	r2, [sp, #24]
   b943e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9440:	1c51      	adds	r1, r2, #1
   b9442:	9117      	str	r1, [sp, #92]	; 0x5c
   b9444:	7852      	ldrb	r2, [r2, #1]
   b9446:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b944a:	2e09      	cmp	r6, #9
   b944c:	d937      	bls.n	b94be <_strtod_l+0x346>
   b944e:	9e06      	ldr	r6, [sp, #24]
   b9450:	1b89      	subs	r1, r1, r6
   b9452:	2908      	cmp	r1, #8
   b9454:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b9458:	dc02      	bgt.n	b9460 <_strtod_l+0x2e8>
   b945a:	4576      	cmp	r6, lr
   b945c:	bfa8      	it	ge
   b945e:	4676      	movge	r6, lr
   b9460:	f1bc 0f00 	cmp.w	ip, #0
   b9464:	d000      	beq.n	b9468 <_strtod_l+0x2f0>
   b9466:	4276      	negs	r6, r6
   b9468:	2d00      	cmp	r5, #0
   b946a:	d14d      	bne.n	b9508 <_strtod_l+0x390>
   b946c:	9904      	ldr	r1, [sp, #16]
   b946e:	4301      	orrs	r1, r0
   b9470:	f47f aec6 	bne.w	b9200 <_strtod_l+0x88>
   b9474:	2b00      	cmp	r3, #0
   b9476:	f47f aee1 	bne.w	b923c <_strtod_l+0xc4>
   b947a:	2a69      	cmp	r2, #105	; 0x69
   b947c:	d027      	beq.n	b94ce <_strtod_l+0x356>
   b947e:	dc24      	bgt.n	b94ca <_strtod_l+0x352>
   b9480:	2a49      	cmp	r2, #73	; 0x49
   b9482:	d024      	beq.n	b94ce <_strtod_l+0x356>
   b9484:	2a4e      	cmp	r2, #78	; 0x4e
   b9486:	f47f aed9 	bne.w	b923c <_strtod_l+0xc4>
   b948a:	499f      	ldr	r1, [pc, #636]	; (b9708 <_strtod_l+0x590>)
   b948c:	a817      	add	r0, sp, #92	; 0x5c
   b948e:	f001 f833 	bl	ba4f8 <__match>
   b9492:	2800      	cmp	r0, #0
   b9494:	f43f aed2 	beq.w	b923c <_strtod_l+0xc4>
   b9498:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b949a:	781b      	ldrb	r3, [r3, #0]
   b949c:	2b28      	cmp	r3, #40	; 0x28
   b949e:	d12d      	bne.n	b94fc <_strtod_l+0x384>
   b94a0:	499a      	ldr	r1, [pc, #616]	; (b970c <_strtod_l+0x594>)
   b94a2:	aa1a      	add	r2, sp, #104	; 0x68
   b94a4:	a817      	add	r0, sp, #92	; 0x5c
   b94a6:	f001 f83b 	bl	ba520 <__hexnan>
   b94aa:	2805      	cmp	r0, #5
   b94ac:	d126      	bne.n	b94fc <_strtod_l+0x384>
   b94ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b94b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b94b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b94b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b94bc:	e6a0      	b.n	b9200 <_strtod_l+0x88>
   b94be:	210a      	movs	r1, #10
   b94c0:	fb01 2e0e 	mla	lr, r1, lr, r2
   b94c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b94c8:	e7b9      	b.n	b943e <_strtod_l+0x2c6>
   b94ca:	2a6e      	cmp	r2, #110	; 0x6e
   b94cc:	e7db      	b.n	b9486 <_strtod_l+0x30e>
   b94ce:	4990      	ldr	r1, [pc, #576]	; (b9710 <_strtod_l+0x598>)
   b94d0:	a817      	add	r0, sp, #92	; 0x5c
   b94d2:	f001 f811 	bl	ba4f8 <__match>
   b94d6:	2800      	cmp	r0, #0
   b94d8:	f43f aeb0 	beq.w	b923c <_strtod_l+0xc4>
   b94dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b94de:	498d      	ldr	r1, [pc, #564]	; (b9714 <_strtod_l+0x59c>)
   b94e0:	3b01      	subs	r3, #1
   b94e2:	a817      	add	r0, sp, #92	; 0x5c
   b94e4:	9317      	str	r3, [sp, #92]	; 0x5c
   b94e6:	f001 f807 	bl	ba4f8 <__match>
   b94ea:	b910      	cbnz	r0, b94f2 <_strtod_l+0x37a>
   b94ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b94ee:	3301      	adds	r3, #1
   b94f0:	9317      	str	r3, [sp, #92]	; 0x5c
   b94f2:	f8df b230 	ldr.w	fp, [pc, #560]	; b9724 <_strtod_l+0x5ac>
   b94f6:	f04f 0a00 	mov.w	sl, #0
   b94fa:	e681      	b.n	b9200 <_strtod_l+0x88>
   b94fc:	4886      	ldr	r0, [pc, #536]	; (b9718 <_strtod_l+0x5a0>)
   b94fe:	f001 fd93 	bl	bb028 <nan>
   b9502:	ec5b ab10 	vmov	sl, fp, d0
   b9506:	e67b      	b.n	b9200 <_strtod_l+0x88>
   b9508:	9b05      	ldr	r3, [sp, #20]
   b950a:	9807      	ldr	r0, [sp, #28]
   b950c:	1af3      	subs	r3, r6, r3
   b950e:	2f00      	cmp	r7, #0
   b9510:	bf08      	it	eq
   b9512:	462f      	moveq	r7, r5
   b9514:	2d10      	cmp	r5, #16
   b9516:	9306      	str	r3, [sp, #24]
   b9518:	46a8      	mov	r8, r5
   b951a:	bfa8      	it	ge
   b951c:	f04f 0810 	movge.w	r8, #16
   b9520:	f7ff f988 	bl	b8834 <__aeabi_ui2d>
   b9524:	2d09      	cmp	r5, #9
   b9526:	4682      	mov	sl, r0
   b9528:	468b      	mov	fp, r1
   b952a:	dd13      	ble.n	b9554 <_strtod_l+0x3dc>
   b952c:	4b7b      	ldr	r3, [pc, #492]	; (b971c <_strtod_l+0x5a4>)
   b952e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b9532:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b9536:	f7ff f9f7 	bl	b8928 <__aeabi_dmul>
   b953a:	4682      	mov	sl, r0
   b953c:	4648      	mov	r0, r9
   b953e:	468b      	mov	fp, r1
   b9540:	f7ff f978 	bl	b8834 <__aeabi_ui2d>
   b9544:	4602      	mov	r2, r0
   b9546:	460b      	mov	r3, r1
   b9548:	4650      	mov	r0, sl
   b954a:	4659      	mov	r1, fp
   b954c:	f7ff f836 	bl	b85bc <__adddf3>
   b9550:	4682      	mov	sl, r0
   b9552:	468b      	mov	fp, r1
   b9554:	2d0f      	cmp	r5, #15
   b9556:	dc38      	bgt.n	b95ca <_strtod_l+0x452>
   b9558:	9b06      	ldr	r3, [sp, #24]
   b955a:	2b00      	cmp	r3, #0
   b955c:	f43f ae50 	beq.w	b9200 <_strtod_l+0x88>
   b9560:	dd24      	ble.n	b95ac <_strtod_l+0x434>
   b9562:	2b16      	cmp	r3, #22
   b9564:	dc0b      	bgt.n	b957e <_strtod_l+0x406>
   b9566:	496d      	ldr	r1, [pc, #436]	; (b971c <_strtod_l+0x5a4>)
   b9568:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b956c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9570:	4652      	mov	r2, sl
   b9572:	465b      	mov	r3, fp
   b9574:	f7ff f9d8 	bl	b8928 <__aeabi_dmul>
   b9578:	4682      	mov	sl, r0
   b957a:	468b      	mov	fp, r1
   b957c:	e640      	b.n	b9200 <_strtod_l+0x88>
   b957e:	9a06      	ldr	r2, [sp, #24]
   b9580:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b9584:	4293      	cmp	r3, r2
   b9586:	db20      	blt.n	b95ca <_strtod_l+0x452>
   b9588:	4c64      	ldr	r4, [pc, #400]	; (b971c <_strtod_l+0x5a4>)
   b958a:	f1c5 050f 	rsb	r5, r5, #15
   b958e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b9592:	4652      	mov	r2, sl
   b9594:	465b      	mov	r3, fp
   b9596:	e9d1 0100 	ldrd	r0, r1, [r1]
   b959a:	f7ff f9c5 	bl	b8928 <__aeabi_dmul>
   b959e:	9b06      	ldr	r3, [sp, #24]
   b95a0:	1b5d      	subs	r5, r3, r5
   b95a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b95a6:	e9d4 2300 	ldrd	r2, r3, [r4]
   b95aa:	e7e3      	b.n	b9574 <_strtod_l+0x3fc>
   b95ac:	9b06      	ldr	r3, [sp, #24]
   b95ae:	3316      	adds	r3, #22
   b95b0:	db0b      	blt.n	b95ca <_strtod_l+0x452>
   b95b2:	9b05      	ldr	r3, [sp, #20]
   b95b4:	1b9e      	subs	r6, r3, r6
   b95b6:	4b59      	ldr	r3, [pc, #356]	; (b971c <_strtod_l+0x5a4>)
   b95b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b95bc:	e9d6 2300 	ldrd	r2, r3, [r6]
   b95c0:	4650      	mov	r0, sl
   b95c2:	4659      	mov	r1, fp
   b95c4:	f7ff fada 	bl	b8b7c <__aeabi_ddiv>
   b95c8:	e7d6      	b.n	b9578 <_strtod_l+0x400>
   b95ca:	9b06      	ldr	r3, [sp, #24]
   b95cc:	eba5 0808 	sub.w	r8, r5, r8
   b95d0:	4498      	add	r8, r3
   b95d2:	f1b8 0f00 	cmp.w	r8, #0
   b95d6:	dd74      	ble.n	b96c2 <_strtod_l+0x54a>
   b95d8:	f018 030f 	ands.w	r3, r8, #15
   b95dc:	d00a      	beq.n	b95f4 <_strtod_l+0x47c>
   b95de:	494f      	ldr	r1, [pc, #316]	; (b971c <_strtod_l+0x5a4>)
   b95e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b95e4:	4652      	mov	r2, sl
   b95e6:	465b      	mov	r3, fp
   b95e8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b95ec:	f7ff f99c 	bl	b8928 <__aeabi_dmul>
   b95f0:	4682      	mov	sl, r0
   b95f2:	468b      	mov	fp, r1
   b95f4:	f038 080f 	bics.w	r8, r8, #15
   b95f8:	d04f      	beq.n	b969a <_strtod_l+0x522>
   b95fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b95fe:	dd22      	ble.n	b9646 <_strtod_l+0x4ce>
   b9600:	2500      	movs	r5, #0
   b9602:	462e      	mov	r6, r5
   b9604:	9507      	str	r5, [sp, #28]
   b9606:	9505      	str	r5, [sp, #20]
   b9608:	2322      	movs	r3, #34	; 0x22
   b960a:	f8df b118 	ldr.w	fp, [pc, #280]	; b9724 <_strtod_l+0x5ac>
   b960e:	6023      	str	r3, [r4, #0]
   b9610:	f04f 0a00 	mov.w	sl, #0
   b9614:	9b07      	ldr	r3, [sp, #28]
   b9616:	2b00      	cmp	r3, #0
   b9618:	f43f adf2 	beq.w	b9200 <_strtod_l+0x88>
   b961c:	9918      	ldr	r1, [sp, #96]	; 0x60
   b961e:	4620      	mov	r0, r4
   b9620:	f001 f870 	bl	ba704 <_Bfree>
   b9624:	9905      	ldr	r1, [sp, #20]
   b9626:	4620      	mov	r0, r4
   b9628:	f001 f86c 	bl	ba704 <_Bfree>
   b962c:	4631      	mov	r1, r6
   b962e:	4620      	mov	r0, r4
   b9630:	f001 f868 	bl	ba704 <_Bfree>
   b9634:	9907      	ldr	r1, [sp, #28]
   b9636:	4620      	mov	r0, r4
   b9638:	f001 f864 	bl	ba704 <_Bfree>
   b963c:	4629      	mov	r1, r5
   b963e:	4620      	mov	r0, r4
   b9640:	f001 f860 	bl	ba704 <_Bfree>
   b9644:	e5dc      	b.n	b9200 <_strtod_l+0x88>
   b9646:	4b36      	ldr	r3, [pc, #216]	; (b9720 <_strtod_l+0x5a8>)
   b9648:	9304      	str	r3, [sp, #16]
   b964a:	2300      	movs	r3, #0
   b964c:	ea4f 1828 	mov.w	r8, r8, asr #4
   b9650:	4650      	mov	r0, sl
   b9652:	4659      	mov	r1, fp
   b9654:	4699      	mov	r9, r3
   b9656:	f1b8 0f01 	cmp.w	r8, #1
   b965a:	dc21      	bgt.n	b96a0 <_strtod_l+0x528>
   b965c:	b10b      	cbz	r3, b9662 <_strtod_l+0x4ea>
   b965e:	4682      	mov	sl, r0
   b9660:	468b      	mov	fp, r1
   b9662:	4b2f      	ldr	r3, [pc, #188]	; (b9720 <_strtod_l+0x5a8>)
   b9664:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b9668:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b966c:	4652      	mov	r2, sl
   b966e:	465b      	mov	r3, fp
   b9670:	e9d9 0100 	ldrd	r0, r1, [r9]
   b9674:	f7ff f958 	bl	b8928 <__aeabi_dmul>
   b9678:	4b2a      	ldr	r3, [pc, #168]	; (b9724 <_strtod_l+0x5ac>)
   b967a:	460a      	mov	r2, r1
   b967c:	400b      	ands	r3, r1
   b967e:	492a      	ldr	r1, [pc, #168]	; (b9728 <_strtod_l+0x5b0>)
   b9680:	428b      	cmp	r3, r1
   b9682:	4682      	mov	sl, r0
   b9684:	d8bc      	bhi.n	b9600 <_strtod_l+0x488>
   b9686:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b968a:	428b      	cmp	r3, r1
   b968c:	bf86      	itte	hi
   b968e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b972c <_strtod_l+0x5b4>
   b9692:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   b9696:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b969a:	2300      	movs	r3, #0
   b969c:	9304      	str	r3, [sp, #16]
   b969e:	e084      	b.n	b97aa <_strtod_l+0x632>
   b96a0:	f018 0f01 	tst.w	r8, #1
   b96a4:	d005      	beq.n	b96b2 <_strtod_l+0x53a>
   b96a6:	9b04      	ldr	r3, [sp, #16]
   b96a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b96ac:	f7ff f93c 	bl	b8928 <__aeabi_dmul>
   b96b0:	2301      	movs	r3, #1
   b96b2:	9a04      	ldr	r2, [sp, #16]
   b96b4:	3208      	adds	r2, #8
   b96b6:	f109 0901 	add.w	r9, r9, #1
   b96ba:	ea4f 0868 	mov.w	r8, r8, asr #1
   b96be:	9204      	str	r2, [sp, #16]
   b96c0:	e7c9      	b.n	b9656 <_strtod_l+0x4de>
   b96c2:	d0ea      	beq.n	b969a <_strtod_l+0x522>
   b96c4:	f1c8 0800 	rsb	r8, r8, #0
   b96c8:	f018 020f 	ands.w	r2, r8, #15
   b96cc:	d00a      	beq.n	b96e4 <_strtod_l+0x56c>
   b96ce:	4b13      	ldr	r3, [pc, #76]	; (b971c <_strtod_l+0x5a4>)
   b96d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b96d4:	4650      	mov	r0, sl
   b96d6:	4659      	mov	r1, fp
   b96d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b96dc:	f7ff fa4e 	bl	b8b7c <__aeabi_ddiv>
   b96e0:	4682      	mov	sl, r0
   b96e2:	468b      	mov	fp, r1
   b96e4:	ea5f 1828 	movs.w	r8, r8, asr #4
   b96e8:	d0d7      	beq.n	b969a <_strtod_l+0x522>
   b96ea:	f1b8 0f1f 	cmp.w	r8, #31
   b96ee:	dd1f      	ble.n	b9730 <_strtod_l+0x5b8>
   b96f0:	2500      	movs	r5, #0
   b96f2:	462e      	mov	r6, r5
   b96f4:	9507      	str	r5, [sp, #28]
   b96f6:	9505      	str	r5, [sp, #20]
   b96f8:	2322      	movs	r3, #34	; 0x22
   b96fa:	f04f 0a00 	mov.w	sl, #0
   b96fe:	f04f 0b00 	mov.w	fp, #0
   b9702:	6023      	str	r3, [r4, #0]
   b9704:	e786      	b.n	b9614 <_strtod_l+0x49c>
   b9706:	bf00      	nop
   b9708:	000bb8aa 	.word	0x000bb8aa
   b970c:	000bb8c4 	.word	0x000bb8c4
   b9710:	000bb8a1 	.word	0x000bb8a1
   b9714:	000bb8a4 	.word	0x000bb8a4
   b9718:	000bb335 	.word	0x000bb335
   b971c:	000bbb10 	.word	0x000bbb10
   b9720:	000bbae8 	.word	0x000bbae8
   b9724:	7ff00000 	.word	0x7ff00000
   b9728:	7ca00000 	.word	0x7ca00000
   b972c:	7fefffff 	.word	0x7fefffff
   b9730:	f018 0310 	ands.w	r3, r8, #16
   b9734:	bf18      	it	ne
   b9736:	236a      	movne	r3, #106	; 0x6a
   b9738:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b9ae8 <_strtod_l+0x970>
   b973c:	9304      	str	r3, [sp, #16]
   b973e:	4650      	mov	r0, sl
   b9740:	4659      	mov	r1, fp
   b9742:	2300      	movs	r3, #0
   b9744:	f018 0f01 	tst.w	r8, #1
   b9748:	d004      	beq.n	b9754 <_strtod_l+0x5dc>
   b974a:	e9d9 2300 	ldrd	r2, r3, [r9]
   b974e:	f7ff f8eb 	bl	b8928 <__aeabi_dmul>
   b9752:	2301      	movs	r3, #1
   b9754:	ea5f 0868 	movs.w	r8, r8, asr #1
   b9758:	f109 0908 	add.w	r9, r9, #8
   b975c:	d1f2      	bne.n	b9744 <_strtod_l+0x5cc>
   b975e:	b10b      	cbz	r3, b9764 <_strtod_l+0x5ec>
   b9760:	4682      	mov	sl, r0
   b9762:	468b      	mov	fp, r1
   b9764:	9b04      	ldr	r3, [sp, #16]
   b9766:	b1c3      	cbz	r3, b979a <_strtod_l+0x622>
   b9768:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b976c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b9770:	2b00      	cmp	r3, #0
   b9772:	4659      	mov	r1, fp
   b9774:	dd11      	ble.n	b979a <_strtod_l+0x622>
   b9776:	2b1f      	cmp	r3, #31
   b9778:	f340 8124 	ble.w	b99c4 <_strtod_l+0x84c>
   b977c:	2b34      	cmp	r3, #52	; 0x34
   b977e:	bfde      	ittt	le
   b9780:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b9784:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   b9788:	fa03 f202 	lslle.w	r2, r3, r2
   b978c:	f04f 0a00 	mov.w	sl, #0
   b9790:	bfcc      	ite	gt
   b9792:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b9796:	ea02 0b01 	andle.w	fp, r2, r1
   b979a:	2200      	movs	r2, #0
   b979c:	2300      	movs	r3, #0
   b979e:	4650      	mov	r0, sl
   b97a0:	4659      	mov	r1, fp
   b97a2:	f7ff fb29 	bl	b8df8 <__aeabi_dcmpeq>
   b97a6:	2800      	cmp	r0, #0
   b97a8:	d1a2      	bne.n	b96f0 <_strtod_l+0x578>
   b97aa:	9b07      	ldr	r3, [sp, #28]
   b97ac:	9300      	str	r3, [sp, #0]
   b97ae:	9908      	ldr	r1, [sp, #32]
   b97b0:	462b      	mov	r3, r5
   b97b2:	463a      	mov	r2, r7
   b97b4:	4620      	mov	r0, r4
   b97b6:	f001 f80d 	bl	ba7d4 <__s2b>
   b97ba:	9007      	str	r0, [sp, #28]
   b97bc:	2800      	cmp	r0, #0
   b97be:	f43f af1f 	beq.w	b9600 <_strtod_l+0x488>
   b97c2:	9b05      	ldr	r3, [sp, #20]
   b97c4:	1b9e      	subs	r6, r3, r6
   b97c6:	9b06      	ldr	r3, [sp, #24]
   b97c8:	2b00      	cmp	r3, #0
   b97ca:	bfb4      	ite	lt
   b97cc:	4633      	movlt	r3, r6
   b97ce:	2300      	movge	r3, #0
   b97d0:	930c      	str	r3, [sp, #48]	; 0x30
   b97d2:	9b06      	ldr	r3, [sp, #24]
   b97d4:	2500      	movs	r5, #0
   b97d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b97da:	9312      	str	r3, [sp, #72]	; 0x48
   b97dc:	462e      	mov	r6, r5
   b97de:	9b07      	ldr	r3, [sp, #28]
   b97e0:	4620      	mov	r0, r4
   b97e2:	6859      	ldr	r1, [r3, #4]
   b97e4:	f000 ff4e 	bl	ba684 <_Balloc>
   b97e8:	9005      	str	r0, [sp, #20]
   b97ea:	2800      	cmp	r0, #0
   b97ec:	f43f af0c 	beq.w	b9608 <_strtod_l+0x490>
   b97f0:	9b07      	ldr	r3, [sp, #28]
   b97f2:	691a      	ldr	r2, [r3, #16]
   b97f4:	3202      	adds	r2, #2
   b97f6:	f103 010c 	add.w	r1, r3, #12
   b97fa:	0092      	lsls	r2, r2, #2
   b97fc:	300c      	adds	r0, #12
   b97fe:	f7ff fbee 	bl	b8fde <memcpy>
   b9802:	ec4b ab10 	vmov	d0, sl, fp
   b9806:	aa1a      	add	r2, sp, #104	; 0x68
   b9808:	a919      	add	r1, sp, #100	; 0x64
   b980a:	4620      	mov	r0, r4
   b980c:	f001 fb28 	bl	bae60 <__d2b>
   b9810:	ec4b ab18 	vmov	d8, sl, fp
   b9814:	9018      	str	r0, [sp, #96]	; 0x60
   b9816:	2800      	cmp	r0, #0
   b9818:	f43f aef6 	beq.w	b9608 <_strtod_l+0x490>
   b981c:	2101      	movs	r1, #1
   b981e:	4620      	mov	r0, r4
   b9820:	f001 f872 	bl	ba908 <__i2b>
   b9824:	4606      	mov	r6, r0
   b9826:	2800      	cmp	r0, #0
   b9828:	f43f aeee 	beq.w	b9608 <_strtod_l+0x490>
   b982c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b982e:	9904      	ldr	r1, [sp, #16]
   b9830:	2b00      	cmp	r3, #0
   b9832:	bfab      	itete	ge
   b9834:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b9836:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b9838:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b983a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b983e:	bfac      	ite	ge
   b9840:	eb03 0902 	addge.w	r9, r3, r2
   b9844:	1ad7      	sublt	r7, r2, r3
   b9846:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b9848:	eba3 0801 	sub.w	r8, r3, r1
   b984c:	4490      	add	r8, r2
   b984e:	4ba1      	ldr	r3, [pc, #644]	; (b9ad4 <_strtod_l+0x95c>)
   b9850:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9854:	4598      	cmp	r8, r3
   b9856:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b985a:	f280 80c7 	bge.w	b99ec <_strtod_l+0x874>
   b985e:	eba3 0308 	sub.w	r3, r3, r8
   b9862:	2b1f      	cmp	r3, #31
   b9864:	eba2 0203 	sub.w	r2, r2, r3
   b9868:	f04f 0101 	mov.w	r1, #1
   b986c:	f300 80b1 	bgt.w	b99d2 <_strtod_l+0x85a>
   b9870:	fa01 f303 	lsl.w	r3, r1, r3
   b9874:	930d      	str	r3, [sp, #52]	; 0x34
   b9876:	2300      	movs	r3, #0
   b9878:	9308      	str	r3, [sp, #32]
   b987a:	eb09 0802 	add.w	r8, r9, r2
   b987e:	9b04      	ldr	r3, [sp, #16]
   b9880:	45c1      	cmp	r9, r8
   b9882:	4417      	add	r7, r2
   b9884:	441f      	add	r7, r3
   b9886:	464b      	mov	r3, r9
   b9888:	bfa8      	it	ge
   b988a:	4643      	movge	r3, r8
   b988c:	42bb      	cmp	r3, r7
   b988e:	bfa8      	it	ge
   b9890:	463b      	movge	r3, r7
   b9892:	2b00      	cmp	r3, #0
   b9894:	bfc2      	ittt	gt
   b9896:	eba8 0803 	subgt.w	r8, r8, r3
   b989a:	1aff      	subgt	r7, r7, r3
   b989c:	eba9 0903 	subgt.w	r9, r9, r3
   b98a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b98a2:	2b00      	cmp	r3, #0
   b98a4:	dd17      	ble.n	b98d6 <_strtod_l+0x75e>
   b98a6:	4631      	mov	r1, r6
   b98a8:	461a      	mov	r2, r3
   b98aa:	4620      	mov	r0, r4
   b98ac:	f001 f8ec 	bl	baa88 <__pow5mult>
   b98b0:	4606      	mov	r6, r0
   b98b2:	2800      	cmp	r0, #0
   b98b4:	f43f aea8 	beq.w	b9608 <_strtod_l+0x490>
   b98b8:	4601      	mov	r1, r0
   b98ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b98bc:	4620      	mov	r0, r4
   b98be:	f001 f839 	bl	ba934 <__multiply>
   b98c2:	900b      	str	r0, [sp, #44]	; 0x2c
   b98c4:	2800      	cmp	r0, #0
   b98c6:	f43f ae9f 	beq.w	b9608 <_strtod_l+0x490>
   b98ca:	9918      	ldr	r1, [sp, #96]	; 0x60
   b98cc:	4620      	mov	r0, r4
   b98ce:	f000 ff19 	bl	ba704 <_Bfree>
   b98d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b98d4:	9318      	str	r3, [sp, #96]	; 0x60
   b98d6:	f1b8 0f00 	cmp.w	r8, #0
   b98da:	f300 808c 	bgt.w	b99f6 <_strtod_l+0x87e>
   b98de:	9b06      	ldr	r3, [sp, #24]
   b98e0:	2b00      	cmp	r3, #0
   b98e2:	dd08      	ble.n	b98f6 <_strtod_l+0x77e>
   b98e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b98e6:	9905      	ldr	r1, [sp, #20]
   b98e8:	4620      	mov	r0, r4
   b98ea:	f001 f8cd 	bl	baa88 <__pow5mult>
   b98ee:	9005      	str	r0, [sp, #20]
   b98f0:	2800      	cmp	r0, #0
   b98f2:	f43f ae89 	beq.w	b9608 <_strtod_l+0x490>
   b98f6:	2f00      	cmp	r7, #0
   b98f8:	dd08      	ble.n	b990c <_strtod_l+0x794>
   b98fa:	9905      	ldr	r1, [sp, #20]
   b98fc:	463a      	mov	r2, r7
   b98fe:	4620      	mov	r0, r4
   b9900:	f001 f91c 	bl	bab3c <__lshift>
   b9904:	9005      	str	r0, [sp, #20]
   b9906:	2800      	cmp	r0, #0
   b9908:	f43f ae7e 	beq.w	b9608 <_strtod_l+0x490>
   b990c:	f1b9 0f00 	cmp.w	r9, #0
   b9910:	dd08      	ble.n	b9924 <_strtod_l+0x7ac>
   b9912:	4631      	mov	r1, r6
   b9914:	464a      	mov	r2, r9
   b9916:	4620      	mov	r0, r4
   b9918:	f001 f910 	bl	bab3c <__lshift>
   b991c:	4606      	mov	r6, r0
   b991e:	2800      	cmp	r0, #0
   b9920:	f43f ae72 	beq.w	b9608 <_strtod_l+0x490>
   b9924:	9a05      	ldr	r2, [sp, #20]
   b9926:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9928:	4620      	mov	r0, r4
   b992a:	f001 f993 	bl	bac54 <__mdiff>
   b992e:	4605      	mov	r5, r0
   b9930:	2800      	cmp	r0, #0
   b9932:	f43f ae69 	beq.w	b9608 <_strtod_l+0x490>
   b9936:	68c3      	ldr	r3, [r0, #12]
   b9938:	930b      	str	r3, [sp, #44]	; 0x2c
   b993a:	2300      	movs	r3, #0
   b993c:	60c3      	str	r3, [r0, #12]
   b993e:	4631      	mov	r1, r6
   b9940:	f001 f96c 	bl	bac1c <__mcmp>
   b9944:	2800      	cmp	r0, #0
   b9946:	da60      	bge.n	b9a0a <_strtod_l+0x892>
   b9948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b994a:	ea53 030a 	orrs.w	r3, r3, sl
   b994e:	f040 8082 	bne.w	b9a56 <_strtod_l+0x8de>
   b9952:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9956:	2b00      	cmp	r3, #0
   b9958:	d17d      	bne.n	b9a56 <_strtod_l+0x8de>
   b995a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b995e:	0d1b      	lsrs	r3, r3, #20
   b9960:	051b      	lsls	r3, r3, #20
   b9962:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b9966:	d976      	bls.n	b9a56 <_strtod_l+0x8de>
   b9968:	696b      	ldr	r3, [r5, #20]
   b996a:	b913      	cbnz	r3, b9972 <_strtod_l+0x7fa>
   b996c:	692b      	ldr	r3, [r5, #16]
   b996e:	2b01      	cmp	r3, #1
   b9970:	dd71      	ble.n	b9a56 <_strtod_l+0x8de>
   b9972:	4629      	mov	r1, r5
   b9974:	2201      	movs	r2, #1
   b9976:	4620      	mov	r0, r4
   b9978:	f001 f8e0 	bl	bab3c <__lshift>
   b997c:	4631      	mov	r1, r6
   b997e:	4605      	mov	r5, r0
   b9980:	f001 f94c 	bl	bac1c <__mcmp>
   b9984:	2800      	cmp	r0, #0
   b9986:	dd66      	ble.n	b9a56 <_strtod_l+0x8de>
   b9988:	9904      	ldr	r1, [sp, #16]
   b998a:	4a53      	ldr	r2, [pc, #332]	; (b9ad8 <_strtod_l+0x960>)
   b998c:	465b      	mov	r3, fp
   b998e:	2900      	cmp	r1, #0
   b9990:	f000 8081 	beq.w	b9a96 <_strtod_l+0x91e>
   b9994:	ea02 010b 	and.w	r1, r2, fp
   b9998:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b999c:	dc7b      	bgt.n	b9a96 <_strtod_l+0x91e>
   b999e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b99a2:	f77f aea9 	ble.w	b96f8 <_strtod_l+0x580>
   b99a6:	4b4d      	ldr	r3, [pc, #308]	; (b9adc <_strtod_l+0x964>)
   b99a8:	4650      	mov	r0, sl
   b99aa:	4659      	mov	r1, fp
   b99ac:	2200      	movs	r2, #0
   b99ae:	f7fe ffbb 	bl	b8928 <__aeabi_dmul>
   b99b2:	460b      	mov	r3, r1
   b99b4:	4303      	orrs	r3, r0
   b99b6:	bf08      	it	eq
   b99b8:	2322      	moveq	r3, #34	; 0x22
   b99ba:	4682      	mov	sl, r0
   b99bc:	468b      	mov	fp, r1
   b99be:	bf08      	it	eq
   b99c0:	6023      	streq	r3, [r4, #0]
   b99c2:	e62b      	b.n	b961c <_strtod_l+0x4a4>
   b99c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b99c8:	fa02 f303 	lsl.w	r3, r2, r3
   b99cc:	ea03 0a0a 	and.w	sl, r3, sl
   b99d0:	e6e3      	b.n	b979a <_strtod_l+0x622>
   b99d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b99d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b99da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b99de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b99e2:	fa01 f308 	lsl.w	r3, r1, r8
   b99e6:	9308      	str	r3, [sp, #32]
   b99e8:	910d      	str	r1, [sp, #52]	; 0x34
   b99ea:	e746      	b.n	b987a <_strtod_l+0x702>
   b99ec:	2300      	movs	r3, #0
   b99ee:	9308      	str	r3, [sp, #32]
   b99f0:	2301      	movs	r3, #1
   b99f2:	930d      	str	r3, [sp, #52]	; 0x34
   b99f4:	e741      	b.n	b987a <_strtod_l+0x702>
   b99f6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b99f8:	4642      	mov	r2, r8
   b99fa:	4620      	mov	r0, r4
   b99fc:	f001 f89e 	bl	bab3c <__lshift>
   b9a00:	9018      	str	r0, [sp, #96]	; 0x60
   b9a02:	2800      	cmp	r0, #0
   b9a04:	f47f af6b 	bne.w	b98de <_strtod_l+0x766>
   b9a08:	e5fe      	b.n	b9608 <_strtod_l+0x490>
   b9a0a:	465f      	mov	r7, fp
   b9a0c:	d16e      	bne.n	b9aec <_strtod_l+0x974>
   b9a0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9a10:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9a14:	b342      	cbz	r2, b9a68 <_strtod_l+0x8f0>
   b9a16:	4a32      	ldr	r2, [pc, #200]	; (b9ae0 <_strtod_l+0x968>)
   b9a18:	4293      	cmp	r3, r2
   b9a1a:	d128      	bne.n	b9a6e <_strtod_l+0x8f6>
   b9a1c:	9b04      	ldr	r3, [sp, #16]
   b9a1e:	4651      	mov	r1, sl
   b9a20:	b1eb      	cbz	r3, b9a5e <_strtod_l+0x8e6>
   b9a22:	4b2d      	ldr	r3, [pc, #180]	; (b9ad8 <_strtod_l+0x960>)
   b9a24:	403b      	ands	r3, r7
   b9a26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b9a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9a2e:	d819      	bhi.n	b9a64 <_strtod_l+0x8ec>
   b9a30:	0d1b      	lsrs	r3, r3, #20
   b9a32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b9a36:	fa02 f303 	lsl.w	r3, r2, r3
   b9a3a:	4299      	cmp	r1, r3
   b9a3c:	d117      	bne.n	b9a6e <_strtod_l+0x8f6>
   b9a3e:	4b29      	ldr	r3, [pc, #164]	; (b9ae4 <_strtod_l+0x96c>)
   b9a40:	429f      	cmp	r7, r3
   b9a42:	d102      	bne.n	b9a4a <_strtod_l+0x8d2>
   b9a44:	3101      	adds	r1, #1
   b9a46:	f43f addf 	beq.w	b9608 <_strtod_l+0x490>
   b9a4a:	4b23      	ldr	r3, [pc, #140]	; (b9ad8 <_strtod_l+0x960>)
   b9a4c:	403b      	ands	r3, r7
   b9a4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b9a52:	f04f 0a00 	mov.w	sl, #0
   b9a56:	9b04      	ldr	r3, [sp, #16]
   b9a58:	2b00      	cmp	r3, #0
   b9a5a:	d1a4      	bne.n	b99a6 <_strtod_l+0x82e>
   b9a5c:	e5de      	b.n	b961c <_strtod_l+0x4a4>
   b9a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9a62:	e7ea      	b.n	b9a3a <_strtod_l+0x8c2>
   b9a64:	4613      	mov	r3, r2
   b9a66:	e7e8      	b.n	b9a3a <_strtod_l+0x8c2>
   b9a68:	ea53 030a 	orrs.w	r3, r3, sl
   b9a6c:	d08c      	beq.n	b9988 <_strtod_l+0x810>
   b9a6e:	9b08      	ldr	r3, [sp, #32]
   b9a70:	b1db      	cbz	r3, b9aaa <_strtod_l+0x932>
   b9a72:	423b      	tst	r3, r7
   b9a74:	d0ef      	beq.n	b9a56 <_strtod_l+0x8de>
   b9a76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9a78:	9a04      	ldr	r2, [sp, #16]
   b9a7a:	4650      	mov	r0, sl
   b9a7c:	4659      	mov	r1, fp
   b9a7e:	b1c3      	cbz	r3, b9ab2 <_strtod_l+0x93a>
   b9a80:	f7ff fb5c 	bl	b913c <sulp>
   b9a84:	4602      	mov	r2, r0
   b9a86:	460b      	mov	r3, r1
   b9a88:	ec51 0b18 	vmov	r0, r1, d8
   b9a8c:	f7fe fd96 	bl	b85bc <__adddf3>
   b9a90:	4682      	mov	sl, r0
   b9a92:	468b      	mov	fp, r1
   b9a94:	e7df      	b.n	b9a56 <_strtod_l+0x8de>
   b9a96:	4013      	ands	r3, r2
   b9a98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b9a9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b9aa0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b9aa4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b9aa8:	e7d5      	b.n	b9a56 <_strtod_l+0x8de>
   b9aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9aac:	ea13 0f0a 	tst.w	r3, sl
   b9ab0:	e7e0      	b.n	b9a74 <_strtod_l+0x8fc>
   b9ab2:	f7ff fb43 	bl	b913c <sulp>
   b9ab6:	4602      	mov	r2, r0
   b9ab8:	460b      	mov	r3, r1
   b9aba:	ec51 0b18 	vmov	r0, r1, d8
   b9abe:	f7fe fd7b 	bl	b85b8 <__aeabi_dsub>
   b9ac2:	2200      	movs	r2, #0
   b9ac4:	2300      	movs	r3, #0
   b9ac6:	4682      	mov	sl, r0
   b9ac8:	468b      	mov	fp, r1
   b9aca:	f7ff f995 	bl	b8df8 <__aeabi_dcmpeq>
   b9ace:	2800      	cmp	r0, #0
   b9ad0:	d0c1      	beq.n	b9a56 <_strtod_l+0x8de>
   b9ad2:	e611      	b.n	b96f8 <_strtod_l+0x580>
   b9ad4:	fffffc02 	.word	0xfffffc02
   b9ad8:	7ff00000 	.word	0x7ff00000
   b9adc:	39500000 	.word	0x39500000
   b9ae0:	000fffff 	.word	0x000fffff
   b9ae4:	7fefffff 	.word	0x7fefffff
   b9ae8:	000bb8d8 	.word	0x000bb8d8
   b9aec:	4631      	mov	r1, r6
   b9aee:	4628      	mov	r0, r5
   b9af0:	f001 fa12 	bl	baf18 <__ratio>
   b9af4:	ec59 8b10 	vmov	r8, r9, d0
   b9af8:	ee10 0a10 	vmov	r0, s0
   b9afc:	2200      	movs	r2, #0
   b9afe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b9b02:	4649      	mov	r1, r9
   b9b04:	f7ff f98c 	bl	b8e20 <__aeabi_dcmple>
   b9b08:	2800      	cmp	r0, #0
   b9b0a:	d07a      	beq.n	b9c02 <_strtod_l+0xa8a>
   b9b0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9b0e:	2b00      	cmp	r3, #0
   b9b10:	d04a      	beq.n	b9ba8 <_strtod_l+0xa30>
   b9b12:	4b95      	ldr	r3, [pc, #596]	; (b9d68 <_strtod_l+0xbf0>)
   b9b14:	2200      	movs	r2, #0
   b9b16:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9b1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; b9d68 <_strtod_l+0xbf0>
   b9b1e:	f04f 0800 	mov.w	r8, #0
   b9b22:	4b92      	ldr	r3, [pc, #584]	; (b9d6c <_strtod_l+0xbf4>)
   b9b24:	403b      	ands	r3, r7
   b9b26:	930d      	str	r3, [sp, #52]	; 0x34
   b9b28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9b2a:	4b91      	ldr	r3, [pc, #580]	; (b9d70 <_strtod_l+0xbf8>)
   b9b2c:	429a      	cmp	r2, r3
   b9b2e:	f040 80b0 	bne.w	b9c92 <_strtod_l+0xb1a>
   b9b32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9b36:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b9b3a:	ec4b ab10 	vmov	d0, sl, fp
   b9b3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b9b42:	f001 f911 	bl	bad68 <__ulp>
   b9b46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9b4a:	ec53 2b10 	vmov	r2, r3, d0
   b9b4e:	f7fe feeb 	bl	b8928 <__aeabi_dmul>
   b9b52:	4652      	mov	r2, sl
   b9b54:	465b      	mov	r3, fp
   b9b56:	f7fe fd31 	bl	b85bc <__adddf3>
   b9b5a:	460b      	mov	r3, r1
   b9b5c:	4983      	ldr	r1, [pc, #524]	; (b9d6c <_strtod_l+0xbf4>)
   b9b5e:	4a85      	ldr	r2, [pc, #532]	; (b9d74 <_strtod_l+0xbfc>)
   b9b60:	4019      	ands	r1, r3
   b9b62:	4291      	cmp	r1, r2
   b9b64:	4682      	mov	sl, r0
   b9b66:	d960      	bls.n	b9c2a <_strtod_l+0xab2>
   b9b68:	ee18 3a90 	vmov	r3, s17
   b9b6c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b9b70:	4293      	cmp	r3, r2
   b9b72:	d104      	bne.n	b9b7e <_strtod_l+0xa06>
   b9b74:	ee18 3a10 	vmov	r3, s16
   b9b78:	3301      	adds	r3, #1
   b9b7a:	f43f ad45 	beq.w	b9608 <_strtod_l+0x490>
   b9b7e:	f8df b200 	ldr.w	fp, [pc, #512]	; b9d80 <_strtod_l+0xc08>
   b9b82:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b9b86:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9b88:	4620      	mov	r0, r4
   b9b8a:	f000 fdbb 	bl	ba704 <_Bfree>
   b9b8e:	9905      	ldr	r1, [sp, #20]
   b9b90:	4620      	mov	r0, r4
   b9b92:	f000 fdb7 	bl	ba704 <_Bfree>
   b9b96:	4631      	mov	r1, r6
   b9b98:	4620      	mov	r0, r4
   b9b9a:	f000 fdb3 	bl	ba704 <_Bfree>
   b9b9e:	4629      	mov	r1, r5
   b9ba0:	4620      	mov	r0, r4
   b9ba2:	f000 fdaf 	bl	ba704 <_Bfree>
   b9ba6:	e61a      	b.n	b97de <_strtod_l+0x666>
   b9ba8:	f1ba 0f00 	cmp.w	sl, #0
   b9bac:	d11b      	bne.n	b9be6 <_strtod_l+0xa6e>
   b9bae:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9bb2:	b9f3      	cbnz	r3, b9bf2 <_strtod_l+0xa7a>
   b9bb4:	4b6c      	ldr	r3, [pc, #432]	; (b9d68 <_strtod_l+0xbf0>)
   b9bb6:	2200      	movs	r2, #0
   b9bb8:	4640      	mov	r0, r8
   b9bba:	4649      	mov	r1, r9
   b9bbc:	f7ff f926 	bl	b8e0c <__aeabi_dcmplt>
   b9bc0:	b9d0      	cbnz	r0, b9bf8 <_strtod_l+0xa80>
   b9bc2:	4640      	mov	r0, r8
   b9bc4:	4649      	mov	r1, r9
   b9bc6:	4b6c      	ldr	r3, [pc, #432]	; (b9d78 <_strtod_l+0xc00>)
   b9bc8:	2200      	movs	r2, #0
   b9bca:	f7fe fead 	bl	b8928 <__aeabi_dmul>
   b9bce:	4680      	mov	r8, r0
   b9bd0:	4689      	mov	r9, r1
   b9bd2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b9bd6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b9bda:	9315      	str	r3, [sp, #84]	; 0x54
   b9bdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b9be0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9be4:	e79d      	b.n	b9b22 <_strtod_l+0x9aa>
   b9be6:	f1ba 0f01 	cmp.w	sl, #1
   b9bea:	d102      	bne.n	b9bf2 <_strtod_l+0xa7a>
   b9bec:	2f00      	cmp	r7, #0
   b9bee:	f43f ad83 	beq.w	b96f8 <_strtod_l+0x580>
   b9bf2:	4b62      	ldr	r3, [pc, #392]	; (b9d7c <_strtod_l+0xc04>)
   b9bf4:	2200      	movs	r2, #0
   b9bf6:	e78e      	b.n	b9b16 <_strtod_l+0x99e>
   b9bf8:	f8df 917c 	ldr.w	r9, [pc, #380]	; b9d78 <_strtod_l+0xc00>
   b9bfc:	f04f 0800 	mov.w	r8, #0
   b9c00:	e7e7      	b.n	b9bd2 <_strtod_l+0xa5a>
   b9c02:	4b5d      	ldr	r3, [pc, #372]	; (b9d78 <_strtod_l+0xc00>)
   b9c04:	4640      	mov	r0, r8
   b9c06:	4649      	mov	r1, r9
   b9c08:	2200      	movs	r2, #0
   b9c0a:	f7fe fe8d 	bl	b8928 <__aeabi_dmul>
   b9c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9c10:	4680      	mov	r8, r0
   b9c12:	4689      	mov	r9, r1
   b9c14:	b933      	cbnz	r3, b9c24 <_strtod_l+0xaac>
   b9c16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b9c1a:	900e      	str	r0, [sp, #56]	; 0x38
   b9c1c:	930f      	str	r3, [sp, #60]	; 0x3c
   b9c1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b9c22:	e7dd      	b.n	b9be0 <_strtod_l+0xa68>
   b9c24:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b9c28:	e7f9      	b.n	b9c1e <_strtod_l+0xaa6>
   b9c2a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b9c2e:	9b04      	ldr	r3, [sp, #16]
   b9c30:	2b00      	cmp	r3, #0
   b9c32:	d1a8      	bne.n	b9b86 <_strtod_l+0xa0e>
   b9c34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9c38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9c3a:	0d1b      	lsrs	r3, r3, #20
   b9c3c:	051b      	lsls	r3, r3, #20
   b9c3e:	429a      	cmp	r2, r3
   b9c40:	d1a1      	bne.n	b9b86 <_strtod_l+0xa0e>
   b9c42:	4640      	mov	r0, r8
   b9c44:	4649      	mov	r1, r9
   b9c46:	f001 fa05 	bl	bb054 <__aeabi_d2lz>
   b9c4a:	f7fe fe3f 	bl	b88cc <__aeabi_l2d>
   b9c4e:	4602      	mov	r2, r0
   b9c50:	460b      	mov	r3, r1
   b9c52:	4640      	mov	r0, r8
   b9c54:	4649      	mov	r1, r9
   b9c56:	f7fe fcaf 	bl	b85b8 <__aeabi_dsub>
   b9c5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9c5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9c60:	ea43 030a 	orr.w	r3, r3, sl
   b9c64:	4313      	orrs	r3, r2
   b9c66:	4680      	mov	r8, r0
   b9c68:	4689      	mov	r9, r1
   b9c6a:	d055      	beq.n	b9d18 <_strtod_l+0xba0>
   b9c6c:	a336      	add	r3, pc, #216	; (adr r3, b9d48 <_strtod_l+0xbd0>)
   b9c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9c72:	f7ff f8cb 	bl	b8e0c <__aeabi_dcmplt>
   b9c76:	2800      	cmp	r0, #0
   b9c78:	f47f acd0 	bne.w	b961c <_strtod_l+0x4a4>
   b9c7c:	a334      	add	r3, pc, #208	; (adr r3, b9d50 <_strtod_l+0xbd8>)
   b9c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9c82:	4640      	mov	r0, r8
   b9c84:	4649      	mov	r1, r9
   b9c86:	f7ff f8df 	bl	b8e48 <__aeabi_dcmpgt>
   b9c8a:	2800      	cmp	r0, #0
   b9c8c:	f43f af7b 	beq.w	b9b86 <_strtod_l+0xa0e>
   b9c90:	e4c4      	b.n	b961c <_strtod_l+0x4a4>
   b9c92:	9b04      	ldr	r3, [sp, #16]
   b9c94:	b333      	cbz	r3, b9ce4 <_strtod_l+0xb6c>
   b9c96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9c98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b9c9c:	d822      	bhi.n	b9ce4 <_strtod_l+0xb6c>
   b9c9e:	a32e      	add	r3, pc, #184	; (adr r3, b9d58 <_strtod_l+0xbe0>)
   b9ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9ca4:	4640      	mov	r0, r8
   b9ca6:	4649      	mov	r1, r9
   b9ca8:	f7ff f8ba 	bl	b8e20 <__aeabi_dcmple>
   b9cac:	b1a0      	cbz	r0, b9cd8 <_strtod_l+0xb60>
   b9cae:	4649      	mov	r1, r9
   b9cb0:	4640      	mov	r0, r8
   b9cb2:	f7ff f8e9 	bl	b8e88 <__aeabi_d2uiz>
   b9cb6:	2801      	cmp	r0, #1
   b9cb8:	bf38      	it	cc
   b9cba:	2001      	movcc	r0, #1
   b9cbc:	f7fe fdba 	bl	b8834 <__aeabi_ui2d>
   b9cc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9cc2:	4680      	mov	r8, r0
   b9cc4:	4689      	mov	r9, r1
   b9cc6:	bb23      	cbnz	r3, b9d12 <_strtod_l+0xb9a>
   b9cc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b9ccc:	9010      	str	r0, [sp, #64]	; 0x40
   b9cce:	9311      	str	r3, [sp, #68]	; 0x44
   b9cd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b9cd4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b9cda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b9cdc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b9ce0:	1a9b      	subs	r3, r3, r2
   b9ce2:	9309      	str	r3, [sp, #36]	; 0x24
   b9ce4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9ce8:	eeb0 0a48 	vmov.f32	s0, s16
   b9cec:	eef0 0a68 	vmov.f32	s1, s17
   b9cf0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b9cf4:	f001 f838 	bl	bad68 <__ulp>
   b9cf8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9cfc:	ec53 2b10 	vmov	r2, r3, d0
   b9d00:	f7fe fe12 	bl	b8928 <__aeabi_dmul>
   b9d04:	ec53 2b18 	vmov	r2, r3, d8
   b9d08:	f7fe fc58 	bl	b85bc <__adddf3>
   b9d0c:	4682      	mov	sl, r0
   b9d0e:	468b      	mov	fp, r1
   b9d10:	e78d      	b.n	b9c2e <_strtod_l+0xab6>
   b9d12:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b9d16:	e7db      	b.n	b9cd0 <_strtod_l+0xb58>
   b9d18:	a311      	add	r3, pc, #68	; (adr r3, b9d60 <_strtod_l+0xbe8>)
   b9d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9d1e:	f7ff f875 	bl	b8e0c <__aeabi_dcmplt>
   b9d22:	e7b2      	b.n	b9c8a <_strtod_l+0xb12>
   b9d24:	2300      	movs	r3, #0
   b9d26:	930a      	str	r3, [sp, #40]	; 0x28
   b9d28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b9d2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9d2c:	6013      	str	r3, [r2, #0]
   b9d2e:	f7ff ba6b 	b.w	b9208 <_strtod_l+0x90>
   b9d32:	2a65      	cmp	r2, #101	; 0x65
   b9d34:	f43f ab5f 	beq.w	b93f6 <_strtod_l+0x27e>
   b9d38:	2a45      	cmp	r2, #69	; 0x45
   b9d3a:	f43f ab5c 	beq.w	b93f6 <_strtod_l+0x27e>
   b9d3e:	2301      	movs	r3, #1
   b9d40:	f7ff bb94 	b.w	b946c <_strtod_l+0x2f4>
   b9d44:	f3af 8000 	nop.w
   b9d48:	94a03595 	.word	0x94a03595
   b9d4c:	3fdfffff 	.word	0x3fdfffff
   b9d50:	35afe535 	.word	0x35afe535
   b9d54:	3fe00000 	.word	0x3fe00000
   b9d58:	ffc00000 	.word	0xffc00000
   b9d5c:	41dfffff 	.word	0x41dfffff
   b9d60:	94a03595 	.word	0x94a03595
   b9d64:	3fcfffff 	.word	0x3fcfffff
   b9d68:	3ff00000 	.word	0x3ff00000
   b9d6c:	7ff00000 	.word	0x7ff00000
   b9d70:	7fe00000 	.word	0x7fe00000
   b9d74:	7c9fffff 	.word	0x7c9fffff
   b9d78:	3fe00000 	.word	0x3fe00000
   b9d7c:	bff00000 	.word	0xbff00000
   b9d80:	7fefffff 	.word	0x7fefffff

000b9d84 <strtod>:
   b9d84:	460a      	mov	r2, r1
   b9d86:	4601      	mov	r1, r0
   b9d88:	4802      	ldr	r0, [pc, #8]	; (b9d94 <strtod+0x10>)
   b9d8a:	4b03      	ldr	r3, [pc, #12]	; (b9d98 <strtod+0x14>)
   b9d8c:	6800      	ldr	r0, [r0, #0]
   b9d8e:	f7ff b9f3 	b.w	b9178 <_strtod_l>
   b9d92:	bf00      	nop
   b9d94:	20035620 	.word	0x20035620
   b9d98:	2003568c 	.word	0x2003568c

000b9d9c <_strtol_l.constprop.0>:
   b9d9c:	2b01      	cmp	r3, #1
   b9d9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9da2:	d001      	beq.n	b9da8 <_strtol_l.constprop.0+0xc>
   b9da4:	2b24      	cmp	r3, #36	; 0x24
   b9da6:	d906      	bls.n	b9db6 <_strtol_l.constprop.0+0x1a>
   b9da8:	f7fb fefa 	bl	b5ba0 <__errno>
   b9dac:	2316      	movs	r3, #22
   b9dae:	6003      	str	r3, [r0, #0]
   b9db0:	2000      	movs	r0, #0
   b9db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9db6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b9e9c <_strtol_l.constprop.0+0x100>
   b9dba:	460d      	mov	r5, r1
   b9dbc:	462e      	mov	r6, r5
   b9dbe:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9dc2:	f814 700c 	ldrb.w	r7, [r4, ip]
   b9dc6:	f017 0708 	ands.w	r7, r7, #8
   b9dca:	d1f7      	bne.n	b9dbc <_strtol_l.constprop.0+0x20>
   b9dcc:	2c2d      	cmp	r4, #45	; 0x2d
   b9dce:	d132      	bne.n	b9e36 <_strtol_l.constprop.0+0x9a>
   b9dd0:	782c      	ldrb	r4, [r5, #0]
   b9dd2:	2701      	movs	r7, #1
   b9dd4:	1cb5      	adds	r5, r6, #2
   b9dd6:	2b00      	cmp	r3, #0
   b9dd8:	d05b      	beq.n	b9e92 <_strtol_l.constprop.0+0xf6>
   b9dda:	2b10      	cmp	r3, #16
   b9ddc:	d109      	bne.n	b9df2 <_strtol_l.constprop.0+0x56>
   b9dde:	2c30      	cmp	r4, #48	; 0x30
   b9de0:	d107      	bne.n	b9df2 <_strtol_l.constprop.0+0x56>
   b9de2:	782c      	ldrb	r4, [r5, #0]
   b9de4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b9de8:	2c58      	cmp	r4, #88	; 0x58
   b9dea:	d14d      	bne.n	b9e88 <_strtol_l.constprop.0+0xec>
   b9dec:	786c      	ldrb	r4, [r5, #1]
   b9dee:	2310      	movs	r3, #16
   b9df0:	3502      	adds	r5, #2
   b9df2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b9df6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9dfa:	f04f 0c00 	mov.w	ip, #0
   b9dfe:	fbb8 f9f3 	udiv	r9, r8, r3
   b9e02:	4666      	mov	r6, ip
   b9e04:	fb03 8a19 	mls	sl, r3, r9, r8
   b9e08:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b9e0c:	f1be 0f09 	cmp.w	lr, #9
   b9e10:	d816      	bhi.n	b9e40 <_strtol_l.constprop.0+0xa4>
   b9e12:	4674      	mov	r4, lr
   b9e14:	42a3      	cmp	r3, r4
   b9e16:	dd24      	ble.n	b9e62 <_strtol_l.constprop.0+0xc6>
   b9e18:	f1bc 0f00 	cmp.w	ip, #0
   b9e1c:	db1e      	blt.n	b9e5c <_strtol_l.constprop.0+0xc0>
   b9e1e:	45b1      	cmp	r9, r6
   b9e20:	d31c      	bcc.n	b9e5c <_strtol_l.constprop.0+0xc0>
   b9e22:	d101      	bne.n	b9e28 <_strtol_l.constprop.0+0x8c>
   b9e24:	45a2      	cmp	sl, r4
   b9e26:	db19      	blt.n	b9e5c <_strtol_l.constprop.0+0xc0>
   b9e28:	fb06 4603 	mla	r6, r6, r3, r4
   b9e2c:	f04f 0c01 	mov.w	ip, #1
   b9e30:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9e34:	e7e8      	b.n	b9e08 <_strtol_l.constprop.0+0x6c>
   b9e36:	2c2b      	cmp	r4, #43	; 0x2b
   b9e38:	bf04      	itt	eq
   b9e3a:	782c      	ldrbeq	r4, [r5, #0]
   b9e3c:	1cb5      	addeq	r5, r6, #2
   b9e3e:	e7ca      	b.n	b9dd6 <_strtol_l.constprop.0+0x3a>
   b9e40:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9e44:	f1be 0f19 	cmp.w	lr, #25
   b9e48:	d801      	bhi.n	b9e4e <_strtol_l.constprop.0+0xb2>
   b9e4a:	3c37      	subs	r4, #55	; 0x37
   b9e4c:	e7e2      	b.n	b9e14 <_strtol_l.constprop.0+0x78>
   b9e4e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9e52:	f1be 0f19 	cmp.w	lr, #25
   b9e56:	d804      	bhi.n	b9e62 <_strtol_l.constprop.0+0xc6>
   b9e58:	3c57      	subs	r4, #87	; 0x57
   b9e5a:	e7db      	b.n	b9e14 <_strtol_l.constprop.0+0x78>
   b9e5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9e60:	e7e6      	b.n	b9e30 <_strtol_l.constprop.0+0x94>
   b9e62:	f1bc 0f00 	cmp.w	ip, #0
   b9e66:	da05      	bge.n	b9e74 <_strtol_l.constprop.0+0xd8>
   b9e68:	2322      	movs	r3, #34	; 0x22
   b9e6a:	6003      	str	r3, [r0, #0]
   b9e6c:	4646      	mov	r6, r8
   b9e6e:	b942      	cbnz	r2, b9e82 <_strtol_l.constprop.0+0xe6>
   b9e70:	4630      	mov	r0, r6
   b9e72:	e79e      	b.n	b9db2 <_strtol_l.constprop.0+0x16>
   b9e74:	b107      	cbz	r7, b9e78 <_strtol_l.constprop.0+0xdc>
   b9e76:	4276      	negs	r6, r6
   b9e78:	2a00      	cmp	r2, #0
   b9e7a:	d0f9      	beq.n	b9e70 <_strtol_l.constprop.0+0xd4>
   b9e7c:	f1bc 0f00 	cmp.w	ip, #0
   b9e80:	d000      	beq.n	b9e84 <_strtol_l.constprop.0+0xe8>
   b9e82:	1e69      	subs	r1, r5, #1
   b9e84:	6011      	str	r1, [r2, #0]
   b9e86:	e7f3      	b.n	b9e70 <_strtol_l.constprop.0+0xd4>
   b9e88:	2430      	movs	r4, #48	; 0x30
   b9e8a:	2b00      	cmp	r3, #0
   b9e8c:	d1b1      	bne.n	b9df2 <_strtol_l.constprop.0+0x56>
   b9e8e:	2308      	movs	r3, #8
   b9e90:	e7af      	b.n	b9df2 <_strtol_l.constprop.0+0x56>
   b9e92:	2c30      	cmp	r4, #48	; 0x30
   b9e94:	d0a5      	beq.n	b9de2 <_strtol_l.constprop.0+0x46>
   b9e96:	230a      	movs	r3, #10
   b9e98:	e7ab      	b.n	b9df2 <_strtol_l.constprop.0+0x56>
   b9e9a:	bf00      	nop
   b9e9c:	000bb901 	.word	0x000bb901

000b9ea0 <strtol>:
   b9ea0:	4613      	mov	r3, r2
   b9ea2:	460a      	mov	r2, r1
   b9ea4:	4601      	mov	r1, r0
   b9ea6:	4802      	ldr	r0, [pc, #8]	; (b9eb0 <strtol+0x10>)
   b9ea8:	6800      	ldr	r0, [r0, #0]
   b9eaa:	f7ff bf77 	b.w	b9d9c <_strtol_l.constprop.0>
   b9eae:	bf00      	nop
   b9eb0:	20035620 	.word	0x20035620

000b9eb4 <__register_exitproc>:
   b9eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9eb8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9f74 <__register_exitproc+0xc0>
   b9ebc:	4606      	mov	r6, r0
   b9ebe:	f8d8 0000 	ldr.w	r0, [r8]
   b9ec2:	461f      	mov	r7, r3
   b9ec4:	460d      	mov	r5, r1
   b9ec6:	4691      	mov	r9, r2
   b9ec8:	f000 fbc6 	bl	ba658 <__retarget_lock_acquire_recursive>
   b9ecc:	4b25      	ldr	r3, [pc, #148]	; (b9f64 <__register_exitproc+0xb0>)
   b9ece:	681c      	ldr	r4, [r3, #0]
   b9ed0:	b934      	cbnz	r4, b9ee0 <__register_exitproc+0x2c>
   b9ed2:	4c25      	ldr	r4, [pc, #148]	; (b9f68 <__register_exitproc+0xb4>)
   b9ed4:	601c      	str	r4, [r3, #0]
   b9ed6:	4b25      	ldr	r3, [pc, #148]	; (b9f6c <__register_exitproc+0xb8>)
   b9ed8:	b113      	cbz	r3, b9ee0 <__register_exitproc+0x2c>
   b9eda:	681b      	ldr	r3, [r3, #0]
   b9edc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9ee0:	6863      	ldr	r3, [r4, #4]
   b9ee2:	2b1f      	cmp	r3, #31
   b9ee4:	dd07      	ble.n	b9ef6 <__register_exitproc+0x42>
   b9ee6:	f8d8 0000 	ldr.w	r0, [r8]
   b9eea:	f000 fbb7 	bl	ba65c <__retarget_lock_release_recursive>
   b9eee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9ef6:	b34e      	cbz	r6, b9f4c <__register_exitproc+0x98>
   b9ef8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9efc:	b988      	cbnz	r0, b9f22 <__register_exitproc+0x6e>
   b9efe:	4b1c      	ldr	r3, [pc, #112]	; (b9f70 <__register_exitproc+0xbc>)
   b9f00:	b923      	cbnz	r3, b9f0c <__register_exitproc+0x58>
   b9f02:	f8d8 0000 	ldr.w	r0, [r8]
   b9f06:	f000 fba8 	bl	ba65a <__retarget_lock_release>
   b9f0a:	e7f0      	b.n	b9eee <__register_exitproc+0x3a>
   b9f0c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9f10:	f7fb fe0e 	bl	b5b30 <malloc>
   b9f14:	2800      	cmp	r0, #0
   b9f16:	d0f4      	beq.n	b9f02 <__register_exitproc+0x4e>
   b9f18:	2300      	movs	r3, #0
   b9f1a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9f1e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9f22:	6863      	ldr	r3, [r4, #4]
   b9f24:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9f28:	2201      	movs	r2, #1
   b9f2a:	409a      	lsls	r2, r3
   b9f2c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9f30:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9f34:	4313      	orrs	r3, r2
   b9f36:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9f3a:	2e02      	cmp	r6, #2
   b9f3c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9f40:	bf02      	ittt	eq
   b9f42:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9f46:	4313      	orreq	r3, r2
   b9f48:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9f4c:	6863      	ldr	r3, [r4, #4]
   b9f4e:	f8d8 0000 	ldr.w	r0, [r8]
   b9f52:	1c5a      	adds	r2, r3, #1
   b9f54:	3302      	adds	r3, #2
   b9f56:	6062      	str	r2, [r4, #4]
   b9f58:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9f5c:	f000 fb7e 	bl	ba65c <__retarget_lock_release_recursive>
   b9f60:	2000      	movs	r0, #0
   b9f62:	e7c6      	b.n	b9ef2 <__register_exitproc+0x3e>
   b9f64:	2003e7e8 	.word	0x2003e7e8
   b9f68:	2003e75c 	.word	0x2003e75c
   b9f6c:	00000000 	.word	0x00000000
   b9f70:	000b5b31 	.word	0x000b5b31
   b9f74:	20035684 	.word	0x20035684

000b9f78 <rshift>:
   b9f78:	6903      	ldr	r3, [r0, #16]
   b9f7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b9f7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9f82:	ea4f 1261 	mov.w	r2, r1, asr #5
   b9f86:	f100 0414 	add.w	r4, r0, #20
   b9f8a:	dd45      	ble.n	ba018 <rshift+0xa0>
   b9f8c:	f011 011f 	ands.w	r1, r1, #31
   b9f90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b9f94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b9f98:	d10c      	bne.n	b9fb4 <rshift+0x3c>
   b9f9a:	f100 0710 	add.w	r7, r0, #16
   b9f9e:	4629      	mov	r1, r5
   b9fa0:	42b1      	cmp	r1, r6
   b9fa2:	d334      	bcc.n	ba00e <rshift+0x96>
   b9fa4:	1a9b      	subs	r3, r3, r2
   b9fa6:	009b      	lsls	r3, r3, #2
   b9fa8:	1eea      	subs	r2, r5, #3
   b9faa:	4296      	cmp	r6, r2
   b9fac:	bf38      	it	cc
   b9fae:	2300      	movcc	r3, #0
   b9fb0:	4423      	add	r3, r4
   b9fb2:	e015      	b.n	b9fe0 <rshift+0x68>
   b9fb4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b9fb8:	f1c1 0820 	rsb	r8, r1, #32
   b9fbc:	40cf      	lsrs	r7, r1
   b9fbe:	f105 0e04 	add.w	lr, r5, #4
   b9fc2:	46a1      	mov	r9, r4
   b9fc4:	4576      	cmp	r6, lr
   b9fc6:	46f4      	mov	ip, lr
   b9fc8:	d815      	bhi.n	b9ff6 <rshift+0x7e>
   b9fca:	1a9a      	subs	r2, r3, r2
   b9fcc:	0092      	lsls	r2, r2, #2
   b9fce:	3a04      	subs	r2, #4
   b9fd0:	3501      	adds	r5, #1
   b9fd2:	42ae      	cmp	r6, r5
   b9fd4:	bf38      	it	cc
   b9fd6:	2200      	movcc	r2, #0
   b9fd8:	18a3      	adds	r3, r4, r2
   b9fda:	50a7      	str	r7, [r4, r2]
   b9fdc:	b107      	cbz	r7, b9fe0 <rshift+0x68>
   b9fde:	3304      	adds	r3, #4
   b9fe0:	1b1a      	subs	r2, r3, r4
   b9fe2:	42a3      	cmp	r3, r4
   b9fe4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b9fe8:	bf08      	it	eq
   b9fea:	2300      	moveq	r3, #0
   b9fec:	6102      	str	r2, [r0, #16]
   b9fee:	bf08      	it	eq
   b9ff0:	6143      	streq	r3, [r0, #20]
   b9ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b9ff6:	f8dc c000 	ldr.w	ip, [ip]
   b9ffa:	fa0c fc08 	lsl.w	ip, ip, r8
   b9ffe:	ea4c 0707 	orr.w	r7, ip, r7
   ba002:	f849 7b04 	str.w	r7, [r9], #4
   ba006:	f85e 7b04 	ldr.w	r7, [lr], #4
   ba00a:	40cf      	lsrs	r7, r1
   ba00c:	e7da      	b.n	b9fc4 <rshift+0x4c>
   ba00e:	f851 cb04 	ldr.w	ip, [r1], #4
   ba012:	f847 cf04 	str.w	ip, [r7, #4]!
   ba016:	e7c3      	b.n	b9fa0 <rshift+0x28>
   ba018:	4623      	mov	r3, r4
   ba01a:	e7e1      	b.n	b9fe0 <rshift+0x68>

000ba01c <__hexdig_fun>:
   ba01c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   ba020:	2b09      	cmp	r3, #9
   ba022:	d802      	bhi.n	ba02a <__hexdig_fun+0xe>
   ba024:	3820      	subs	r0, #32
   ba026:	b2c0      	uxtb	r0, r0
   ba028:	4770      	bx	lr
   ba02a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   ba02e:	2b05      	cmp	r3, #5
   ba030:	d801      	bhi.n	ba036 <__hexdig_fun+0x1a>
   ba032:	3847      	subs	r0, #71	; 0x47
   ba034:	e7f7      	b.n	ba026 <__hexdig_fun+0xa>
   ba036:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   ba03a:	2b05      	cmp	r3, #5
   ba03c:	d801      	bhi.n	ba042 <__hexdig_fun+0x26>
   ba03e:	3827      	subs	r0, #39	; 0x27
   ba040:	e7f1      	b.n	ba026 <__hexdig_fun+0xa>
   ba042:	2000      	movs	r0, #0
   ba044:	4770      	bx	lr
	...

000ba048 <__gethex>:
   ba048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba04c:	ed2d 8b02 	vpush	{d8}
   ba050:	b089      	sub	sp, #36	; 0x24
   ba052:	ee08 0a10 	vmov	s16, r0
   ba056:	9304      	str	r3, [sp, #16]
   ba058:	4bb4      	ldr	r3, [pc, #720]	; (ba32c <__gethex+0x2e4>)
   ba05a:	681b      	ldr	r3, [r3, #0]
   ba05c:	9301      	str	r3, [sp, #4]
   ba05e:	4618      	mov	r0, r3
   ba060:	468b      	mov	fp, r1
   ba062:	4690      	mov	r8, r2
   ba064:	f7ff f82c 	bl	b90c0 <strlen>
   ba068:	9b01      	ldr	r3, [sp, #4]
   ba06a:	f8db 2000 	ldr.w	r2, [fp]
   ba06e:	4403      	add	r3, r0
   ba070:	4682      	mov	sl, r0
   ba072:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   ba076:	9305      	str	r3, [sp, #20]
   ba078:	1c93      	adds	r3, r2, #2
   ba07a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   ba07e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   ba082:	32fe      	adds	r2, #254	; 0xfe
   ba084:	18d1      	adds	r1, r2, r3
   ba086:	461f      	mov	r7, r3
   ba088:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba08c:	9100      	str	r1, [sp, #0]
   ba08e:	2830      	cmp	r0, #48	; 0x30
   ba090:	d0f8      	beq.n	ba084 <__gethex+0x3c>
   ba092:	f7ff ffc3 	bl	ba01c <__hexdig_fun>
   ba096:	4604      	mov	r4, r0
   ba098:	2800      	cmp	r0, #0
   ba09a:	d13a      	bne.n	ba112 <__gethex+0xca>
   ba09c:	9901      	ldr	r1, [sp, #4]
   ba09e:	4652      	mov	r2, sl
   ba0a0:	4638      	mov	r0, r7
   ba0a2:	f7ff f815 	bl	b90d0 <strncmp>
   ba0a6:	4605      	mov	r5, r0
   ba0a8:	2800      	cmp	r0, #0
   ba0aa:	d168      	bne.n	ba17e <__gethex+0x136>
   ba0ac:	f817 000a 	ldrb.w	r0, [r7, sl]
   ba0b0:	eb07 060a 	add.w	r6, r7, sl
   ba0b4:	f7ff ffb2 	bl	ba01c <__hexdig_fun>
   ba0b8:	2800      	cmp	r0, #0
   ba0ba:	d062      	beq.n	ba182 <__gethex+0x13a>
   ba0bc:	4633      	mov	r3, r6
   ba0be:	7818      	ldrb	r0, [r3, #0]
   ba0c0:	2830      	cmp	r0, #48	; 0x30
   ba0c2:	461f      	mov	r7, r3
   ba0c4:	f103 0301 	add.w	r3, r3, #1
   ba0c8:	d0f9      	beq.n	ba0be <__gethex+0x76>
   ba0ca:	f7ff ffa7 	bl	ba01c <__hexdig_fun>
   ba0ce:	2301      	movs	r3, #1
   ba0d0:	fab0 f480 	clz	r4, r0
   ba0d4:	0964      	lsrs	r4, r4, #5
   ba0d6:	4635      	mov	r5, r6
   ba0d8:	9300      	str	r3, [sp, #0]
   ba0da:	463a      	mov	r2, r7
   ba0dc:	4616      	mov	r6, r2
   ba0de:	3201      	adds	r2, #1
   ba0e0:	7830      	ldrb	r0, [r6, #0]
   ba0e2:	f7ff ff9b 	bl	ba01c <__hexdig_fun>
   ba0e6:	2800      	cmp	r0, #0
   ba0e8:	d1f8      	bne.n	ba0dc <__gethex+0x94>
   ba0ea:	9901      	ldr	r1, [sp, #4]
   ba0ec:	4652      	mov	r2, sl
   ba0ee:	4630      	mov	r0, r6
   ba0f0:	f7fe ffee 	bl	b90d0 <strncmp>
   ba0f4:	b980      	cbnz	r0, ba118 <__gethex+0xd0>
   ba0f6:	b94d      	cbnz	r5, ba10c <__gethex+0xc4>
   ba0f8:	eb06 050a 	add.w	r5, r6, sl
   ba0fc:	462a      	mov	r2, r5
   ba0fe:	4616      	mov	r6, r2
   ba100:	3201      	adds	r2, #1
   ba102:	7830      	ldrb	r0, [r6, #0]
   ba104:	f7ff ff8a 	bl	ba01c <__hexdig_fun>
   ba108:	2800      	cmp	r0, #0
   ba10a:	d1f8      	bne.n	ba0fe <__gethex+0xb6>
   ba10c:	1bad      	subs	r5, r5, r6
   ba10e:	00ad      	lsls	r5, r5, #2
   ba110:	e004      	b.n	ba11c <__gethex+0xd4>
   ba112:	2400      	movs	r4, #0
   ba114:	4625      	mov	r5, r4
   ba116:	e7e0      	b.n	ba0da <__gethex+0x92>
   ba118:	2d00      	cmp	r5, #0
   ba11a:	d1f7      	bne.n	ba10c <__gethex+0xc4>
   ba11c:	7833      	ldrb	r3, [r6, #0]
   ba11e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba122:	2b50      	cmp	r3, #80	; 0x50
   ba124:	d13b      	bne.n	ba19e <__gethex+0x156>
   ba126:	7873      	ldrb	r3, [r6, #1]
   ba128:	2b2b      	cmp	r3, #43	; 0x2b
   ba12a:	d02c      	beq.n	ba186 <__gethex+0x13e>
   ba12c:	2b2d      	cmp	r3, #45	; 0x2d
   ba12e:	d02e      	beq.n	ba18e <__gethex+0x146>
   ba130:	1c71      	adds	r1, r6, #1
   ba132:	f04f 0900 	mov.w	r9, #0
   ba136:	7808      	ldrb	r0, [r1, #0]
   ba138:	f7ff ff70 	bl	ba01c <__hexdig_fun>
   ba13c:	1e43      	subs	r3, r0, #1
   ba13e:	b2db      	uxtb	r3, r3
   ba140:	2b18      	cmp	r3, #24
   ba142:	d82c      	bhi.n	ba19e <__gethex+0x156>
   ba144:	f1a0 0210 	sub.w	r2, r0, #16
   ba148:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   ba14c:	f7ff ff66 	bl	ba01c <__hexdig_fun>
   ba150:	1e43      	subs	r3, r0, #1
   ba152:	b2db      	uxtb	r3, r3
   ba154:	2b18      	cmp	r3, #24
   ba156:	d91d      	bls.n	ba194 <__gethex+0x14c>
   ba158:	f1b9 0f00 	cmp.w	r9, #0
   ba15c:	d000      	beq.n	ba160 <__gethex+0x118>
   ba15e:	4252      	negs	r2, r2
   ba160:	4415      	add	r5, r2
   ba162:	f8cb 1000 	str.w	r1, [fp]
   ba166:	b1e4      	cbz	r4, ba1a2 <__gethex+0x15a>
   ba168:	9b00      	ldr	r3, [sp, #0]
   ba16a:	2b00      	cmp	r3, #0
   ba16c:	bf14      	ite	ne
   ba16e:	2700      	movne	r7, #0
   ba170:	2706      	moveq	r7, #6
   ba172:	4638      	mov	r0, r7
   ba174:	b009      	add	sp, #36	; 0x24
   ba176:	ecbd 8b02 	vpop	{d8}
   ba17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba17e:	463e      	mov	r6, r7
   ba180:	4625      	mov	r5, r4
   ba182:	2401      	movs	r4, #1
   ba184:	e7ca      	b.n	ba11c <__gethex+0xd4>
   ba186:	f04f 0900 	mov.w	r9, #0
   ba18a:	1cb1      	adds	r1, r6, #2
   ba18c:	e7d3      	b.n	ba136 <__gethex+0xee>
   ba18e:	f04f 0901 	mov.w	r9, #1
   ba192:	e7fa      	b.n	ba18a <__gethex+0x142>
   ba194:	230a      	movs	r3, #10
   ba196:	fb03 0202 	mla	r2, r3, r2, r0
   ba19a:	3a10      	subs	r2, #16
   ba19c:	e7d4      	b.n	ba148 <__gethex+0x100>
   ba19e:	4631      	mov	r1, r6
   ba1a0:	e7df      	b.n	ba162 <__gethex+0x11a>
   ba1a2:	1bf3      	subs	r3, r6, r7
   ba1a4:	3b01      	subs	r3, #1
   ba1a6:	4621      	mov	r1, r4
   ba1a8:	2b07      	cmp	r3, #7
   ba1aa:	dc0b      	bgt.n	ba1c4 <__gethex+0x17c>
   ba1ac:	ee18 0a10 	vmov	r0, s16
   ba1b0:	f000 fa68 	bl	ba684 <_Balloc>
   ba1b4:	4604      	mov	r4, r0
   ba1b6:	b940      	cbnz	r0, ba1ca <__gethex+0x182>
   ba1b8:	4b5d      	ldr	r3, [pc, #372]	; (ba330 <__gethex+0x2e8>)
   ba1ba:	4602      	mov	r2, r0
   ba1bc:	21de      	movs	r1, #222	; 0xde
   ba1be:	485d      	ldr	r0, [pc, #372]	; (ba334 <__gethex+0x2ec>)
   ba1c0:	f7fb fcf6 	bl	b5bb0 <__assert_func>
   ba1c4:	3101      	adds	r1, #1
   ba1c6:	105b      	asrs	r3, r3, #1
   ba1c8:	e7ee      	b.n	ba1a8 <__gethex+0x160>
   ba1ca:	f100 0914 	add.w	r9, r0, #20
   ba1ce:	f04f 0b00 	mov.w	fp, #0
   ba1d2:	f1ca 0301 	rsb	r3, sl, #1
   ba1d6:	f8cd 9008 	str.w	r9, [sp, #8]
   ba1da:	f8cd b000 	str.w	fp, [sp]
   ba1de:	9306      	str	r3, [sp, #24]
   ba1e0:	42b7      	cmp	r7, r6
   ba1e2:	d340      	bcc.n	ba266 <__gethex+0x21e>
   ba1e4:	9802      	ldr	r0, [sp, #8]
   ba1e6:	9b00      	ldr	r3, [sp, #0]
   ba1e8:	f840 3b04 	str.w	r3, [r0], #4
   ba1ec:	eba0 0009 	sub.w	r0, r0, r9
   ba1f0:	1080      	asrs	r0, r0, #2
   ba1f2:	0146      	lsls	r6, r0, #5
   ba1f4:	6120      	str	r0, [r4, #16]
   ba1f6:	4618      	mov	r0, r3
   ba1f8:	f000 fb36 	bl	ba868 <__hi0bits>
   ba1fc:	1a30      	subs	r0, r6, r0
   ba1fe:	f8d8 6000 	ldr.w	r6, [r8]
   ba202:	42b0      	cmp	r0, r6
   ba204:	dd63      	ble.n	ba2ce <__gethex+0x286>
   ba206:	1b87      	subs	r7, r0, r6
   ba208:	4639      	mov	r1, r7
   ba20a:	4620      	mov	r0, r4
   ba20c:	f000 feda 	bl	bafc4 <__any_on>
   ba210:	4682      	mov	sl, r0
   ba212:	b1a8      	cbz	r0, ba240 <__gethex+0x1f8>
   ba214:	1e7b      	subs	r3, r7, #1
   ba216:	1159      	asrs	r1, r3, #5
   ba218:	f003 021f 	and.w	r2, r3, #31
   ba21c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   ba220:	f04f 0a01 	mov.w	sl, #1
   ba224:	fa0a f202 	lsl.w	r2, sl, r2
   ba228:	420a      	tst	r2, r1
   ba22a:	d009      	beq.n	ba240 <__gethex+0x1f8>
   ba22c:	4553      	cmp	r3, sl
   ba22e:	dd05      	ble.n	ba23c <__gethex+0x1f4>
   ba230:	1eb9      	subs	r1, r7, #2
   ba232:	4620      	mov	r0, r4
   ba234:	f000 fec6 	bl	bafc4 <__any_on>
   ba238:	2800      	cmp	r0, #0
   ba23a:	d145      	bne.n	ba2c8 <__gethex+0x280>
   ba23c:	f04f 0a02 	mov.w	sl, #2
   ba240:	4639      	mov	r1, r7
   ba242:	4620      	mov	r0, r4
   ba244:	f7ff fe98 	bl	b9f78 <rshift>
   ba248:	443d      	add	r5, r7
   ba24a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba24e:	42ab      	cmp	r3, r5
   ba250:	da4c      	bge.n	ba2ec <__gethex+0x2a4>
   ba252:	ee18 0a10 	vmov	r0, s16
   ba256:	4621      	mov	r1, r4
   ba258:	f000 fa54 	bl	ba704 <_Bfree>
   ba25c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba25e:	2300      	movs	r3, #0
   ba260:	6013      	str	r3, [r2, #0]
   ba262:	27a3      	movs	r7, #163	; 0xa3
   ba264:	e785      	b.n	ba172 <__gethex+0x12a>
   ba266:	1e73      	subs	r3, r6, #1
   ba268:	9a05      	ldr	r2, [sp, #20]
   ba26a:	9303      	str	r3, [sp, #12]
   ba26c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   ba270:	4293      	cmp	r3, r2
   ba272:	d019      	beq.n	ba2a8 <__gethex+0x260>
   ba274:	f1bb 0f20 	cmp.w	fp, #32
   ba278:	d107      	bne.n	ba28a <__gethex+0x242>
   ba27a:	9b02      	ldr	r3, [sp, #8]
   ba27c:	9a00      	ldr	r2, [sp, #0]
   ba27e:	f843 2b04 	str.w	r2, [r3], #4
   ba282:	9302      	str	r3, [sp, #8]
   ba284:	2300      	movs	r3, #0
   ba286:	9300      	str	r3, [sp, #0]
   ba288:	469b      	mov	fp, r3
   ba28a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   ba28e:	f7ff fec5 	bl	ba01c <__hexdig_fun>
   ba292:	9b00      	ldr	r3, [sp, #0]
   ba294:	f000 000f 	and.w	r0, r0, #15
   ba298:	fa00 f00b 	lsl.w	r0, r0, fp
   ba29c:	4303      	orrs	r3, r0
   ba29e:	9300      	str	r3, [sp, #0]
   ba2a0:	f10b 0b04 	add.w	fp, fp, #4
   ba2a4:	9b03      	ldr	r3, [sp, #12]
   ba2a6:	e00d      	b.n	ba2c4 <__gethex+0x27c>
   ba2a8:	9b03      	ldr	r3, [sp, #12]
   ba2aa:	9a06      	ldr	r2, [sp, #24]
   ba2ac:	4413      	add	r3, r2
   ba2ae:	42bb      	cmp	r3, r7
   ba2b0:	d3e0      	bcc.n	ba274 <__gethex+0x22c>
   ba2b2:	4618      	mov	r0, r3
   ba2b4:	9901      	ldr	r1, [sp, #4]
   ba2b6:	9307      	str	r3, [sp, #28]
   ba2b8:	4652      	mov	r2, sl
   ba2ba:	f7fe ff09 	bl	b90d0 <strncmp>
   ba2be:	9b07      	ldr	r3, [sp, #28]
   ba2c0:	2800      	cmp	r0, #0
   ba2c2:	d1d7      	bne.n	ba274 <__gethex+0x22c>
   ba2c4:	461e      	mov	r6, r3
   ba2c6:	e78b      	b.n	ba1e0 <__gethex+0x198>
   ba2c8:	f04f 0a03 	mov.w	sl, #3
   ba2cc:	e7b8      	b.n	ba240 <__gethex+0x1f8>
   ba2ce:	da0a      	bge.n	ba2e6 <__gethex+0x29e>
   ba2d0:	1a37      	subs	r7, r6, r0
   ba2d2:	4621      	mov	r1, r4
   ba2d4:	ee18 0a10 	vmov	r0, s16
   ba2d8:	463a      	mov	r2, r7
   ba2da:	f000 fc2f 	bl	bab3c <__lshift>
   ba2de:	1bed      	subs	r5, r5, r7
   ba2e0:	4604      	mov	r4, r0
   ba2e2:	f100 0914 	add.w	r9, r0, #20
   ba2e6:	f04f 0a00 	mov.w	sl, #0
   ba2ea:	e7ae      	b.n	ba24a <__gethex+0x202>
   ba2ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
   ba2f0:	42a8      	cmp	r0, r5
   ba2f2:	dd72      	ble.n	ba3da <__gethex+0x392>
   ba2f4:	1b45      	subs	r5, r0, r5
   ba2f6:	42ae      	cmp	r6, r5
   ba2f8:	dc36      	bgt.n	ba368 <__gethex+0x320>
   ba2fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba2fe:	2b02      	cmp	r3, #2
   ba300:	d02a      	beq.n	ba358 <__gethex+0x310>
   ba302:	2b03      	cmp	r3, #3
   ba304:	d02c      	beq.n	ba360 <__gethex+0x318>
   ba306:	2b01      	cmp	r3, #1
   ba308:	d11c      	bne.n	ba344 <__gethex+0x2fc>
   ba30a:	42ae      	cmp	r6, r5
   ba30c:	d11a      	bne.n	ba344 <__gethex+0x2fc>
   ba30e:	2e01      	cmp	r6, #1
   ba310:	d112      	bne.n	ba338 <__gethex+0x2f0>
   ba312:	9a04      	ldr	r2, [sp, #16]
   ba314:	f8d8 3004 	ldr.w	r3, [r8, #4]
   ba318:	6013      	str	r3, [r2, #0]
   ba31a:	2301      	movs	r3, #1
   ba31c:	6123      	str	r3, [r4, #16]
   ba31e:	f8c9 3000 	str.w	r3, [r9]
   ba322:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba324:	2762      	movs	r7, #98	; 0x62
   ba326:	601c      	str	r4, [r3, #0]
   ba328:	e723      	b.n	ba172 <__gethex+0x12a>
   ba32a:	bf00      	nop
   ba32c:	000bba74 	.word	0x000bba74
   ba330:	000bba01 	.word	0x000bba01
   ba334:	000bba12 	.word	0x000bba12
   ba338:	1e71      	subs	r1, r6, #1
   ba33a:	4620      	mov	r0, r4
   ba33c:	f000 fe42 	bl	bafc4 <__any_on>
   ba340:	2800      	cmp	r0, #0
   ba342:	d1e6      	bne.n	ba312 <__gethex+0x2ca>
   ba344:	ee18 0a10 	vmov	r0, s16
   ba348:	4621      	mov	r1, r4
   ba34a:	f000 f9db 	bl	ba704 <_Bfree>
   ba34e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba350:	2300      	movs	r3, #0
   ba352:	6013      	str	r3, [r2, #0]
   ba354:	2750      	movs	r7, #80	; 0x50
   ba356:	e70c      	b.n	ba172 <__gethex+0x12a>
   ba358:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba35a:	2b00      	cmp	r3, #0
   ba35c:	d1f2      	bne.n	ba344 <__gethex+0x2fc>
   ba35e:	e7d8      	b.n	ba312 <__gethex+0x2ca>
   ba360:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba362:	2b00      	cmp	r3, #0
   ba364:	d1d5      	bne.n	ba312 <__gethex+0x2ca>
   ba366:	e7ed      	b.n	ba344 <__gethex+0x2fc>
   ba368:	1e6f      	subs	r7, r5, #1
   ba36a:	f1ba 0f00 	cmp.w	sl, #0
   ba36e:	d131      	bne.n	ba3d4 <__gethex+0x38c>
   ba370:	b127      	cbz	r7, ba37c <__gethex+0x334>
   ba372:	4639      	mov	r1, r7
   ba374:	4620      	mov	r0, r4
   ba376:	f000 fe25 	bl	bafc4 <__any_on>
   ba37a:	4682      	mov	sl, r0
   ba37c:	117b      	asrs	r3, r7, #5
   ba37e:	2101      	movs	r1, #1
   ba380:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   ba384:	f007 071f 	and.w	r7, r7, #31
   ba388:	fa01 f707 	lsl.w	r7, r1, r7
   ba38c:	421f      	tst	r7, r3
   ba38e:	4629      	mov	r1, r5
   ba390:	4620      	mov	r0, r4
   ba392:	bf18      	it	ne
   ba394:	f04a 0a02 	orrne.w	sl, sl, #2
   ba398:	1b76      	subs	r6, r6, r5
   ba39a:	f7ff fded 	bl	b9f78 <rshift>
   ba39e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   ba3a2:	2702      	movs	r7, #2
   ba3a4:	f1ba 0f00 	cmp.w	sl, #0
   ba3a8:	d048      	beq.n	ba43c <__gethex+0x3f4>
   ba3aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ba3ae:	2b02      	cmp	r3, #2
   ba3b0:	d015      	beq.n	ba3de <__gethex+0x396>
   ba3b2:	2b03      	cmp	r3, #3
   ba3b4:	d017      	beq.n	ba3e6 <__gethex+0x39e>
   ba3b6:	2b01      	cmp	r3, #1
   ba3b8:	d109      	bne.n	ba3ce <__gethex+0x386>
   ba3ba:	f01a 0f02 	tst.w	sl, #2
   ba3be:	d006      	beq.n	ba3ce <__gethex+0x386>
   ba3c0:	f8d9 0000 	ldr.w	r0, [r9]
   ba3c4:	ea4a 0a00 	orr.w	sl, sl, r0
   ba3c8:	f01a 0f01 	tst.w	sl, #1
   ba3cc:	d10e      	bne.n	ba3ec <__gethex+0x3a4>
   ba3ce:	f047 0710 	orr.w	r7, r7, #16
   ba3d2:	e033      	b.n	ba43c <__gethex+0x3f4>
   ba3d4:	f04f 0a01 	mov.w	sl, #1
   ba3d8:	e7d0      	b.n	ba37c <__gethex+0x334>
   ba3da:	2701      	movs	r7, #1
   ba3dc:	e7e2      	b.n	ba3a4 <__gethex+0x35c>
   ba3de:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba3e0:	f1c3 0301 	rsb	r3, r3, #1
   ba3e4:	9315      	str	r3, [sp, #84]	; 0x54
   ba3e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ba3e8:	2b00      	cmp	r3, #0
   ba3ea:	d0f0      	beq.n	ba3ce <__gethex+0x386>
   ba3ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
   ba3f0:	f104 0314 	add.w	r3, r4, #20
   ba3f4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   ba3f8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   ba3fc:	f04f 0c00 	mov.w	ip, #0
   ba400:	4618      	mov	r0, r3
   ba402:	f853 2b04 	ldr.w	r2, [r3], #4
   ba406:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   ba40a:	d01c      	beq.n	ba446 <__gethex+0x3fe>
   ba40c:	3201      	adds	r2, #1
   ba40e:	6002      	str	r2, [r0, #0]
   ba410:	2f02      	cmp	r7, #2
   ba412:	f104 0314 	add.w	r3, r4, #20
   ba416:	d13f      	bne.n	ba498 <__gethex+0x450>
   ba418:	f8d8 2000 	ldr.w	r2, [r8]
   ba41c:	3a01      	subs	r2, #1
   ba41e:	42b2      	cmp	r2, r6
   ba420:	d10a      	bne.n	ba438 <__gethex+0x3f0>
   ba422:	1171      	asrs	r1, r6, #5
   ba424:	2201      	movs	r2, #1
   ba426:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   ba42a:	f006 061f 	and.w	r6, r6, #31
   ba42e:	fa02 f606 	lsl.w	r6, r2, r6
   ba432:	421e      	tst	r6, r3
   ba434:	bf18      	it	ne
   ba436:	4617      	movne	r7, r2
   ba438:	f047 0720 	orr.w	r7, r7, #32
   ba43c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ba43e:	601c      	str	r4, [r3, #0]
   ba440:	9b04      	ldr	r3, [sp, #16]
   ba442:	601d      	str	r5, [r3, #0]
   ba444:	e695      	b.n	ba172 <__gethex+0x12a>
   ba446:	4299      	cmp	r1, r3
   ba448:	f843 cc04 	str.w	ip, [r3, #-4]
   ba44c:	d8d8      	bhi.n	ba400 <__gethex+0x3b8>
   ba44e:	68a3      	ldr	r3, [r4, #8]
   ba450:	459b      	cmp	fp, r3
   ba452:	db19      	blt.n	ba488 <__gethex+0x440>
   ba454:	6861      	ldr	r1, [r4, #4]
   ba456:	ee18 0a10 	vmov	r0, s16
   ba45a:	3101      	adds	r1, #1
   ba45c:	f000 f912 	bl	ba684 <_Balloc>
   ba460:	4681      	mov	r9, r0
   ba462:	b918      	cbnz	r0, ba46c <__gethex+0x424>
   ba464:	4b1a      	ldr	r3, [pc, #104]	; (ba4d0 <__gethex+0x488>)
   ba466:	4602      	mov	r2, r0
   ba468:	2184      	movs	r1, #132	; 0x84
   ba46a:	e6a8      	b.n	ba1be <__gethex+0x176>
   ba46c:	6922      	ldr	r2, [r4, #16]
   ba46e:	3202      	adds	r2, #2
   ba470:	f104 010c 	add.w	r1, r4, #12
   ba474:	0092      	lsls	r2, r2, #2
   ba476:	300c      	adds	r0, #12
   ba478:	f7fe fdb1 	bl	b8fde <memcpy>
   ba47c:	4621      	mov	r1, r4
   ba47e:	ee18 0a10 	vmov	r0, s16
   ba482:	f000 f93f 	bl	ba704 <_Bfree>
   ba486:	464c      	mov	r4, r9
   ba488:	6923      	ldr	r3, [r4, #16]
   ba48a:	1c5a      	adds	r2, r3, #1
   ba48c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   ba490:	6122      	str	r2, [r4, #16]
   ba492:	2201      	movs	r2, #1
   ba494:	615a      	str	r2, [r3, #20]
   ba496:	e7bb      	b.n	ba410 <__gethex+0x3c8>
   ba498:	6922      	ldr	r2, [r4, #16]
   ba49a:	455a      	cmp	r2, fp
   ba49c:	dd0b      	ble.n	ba4b6 <__gethex+0x46e>
   ba49e:	2101      	movs	r1, #1
   ba4a0:	4620      	mov	r0, r4
   ba4a2:	f7ff fd69 	bl	b9f78 <rshift>
   ba4a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba4aa:	3501      	adds	r5, #1
   ba4ac:	42ab      	cmp	r3, r5
   ba4ae:	f6ff aed0 	blt.w	ba252 <__gethex+0x20a>
   ba4b2:	2701      	movs	r7, #1
   ba4b4:	e7c0      	b.n	ba438 <__gethex+0x3f0>
   ba4b6:	f016 061f 	ands.w	r6, r6, #31
   ba4ba:	d0fa      	beq.n	ba4b2 <__gethex+0x46a>
   ba4bc:	4453      	add	r3, sl
   ba4be:	f1c6 0620 	rsb	r6, r6, #32
   ba4c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   ba4c6:	f000 f9cf 	bl	ba868 <__hi0bits>
   ba4ca:	42b0      	cmp	r0, r6
   ba4cc:	dbe7      	blt.n	ba49e <__gethex+0x456>
   ba4ce:	e7f0      	b.n	ba4b2 <__gethex+0x46a>
   ba4d0:	000bba01 	.word	0x000bba01

000ba4d4 <L_shift>:
   ba4d4:	f1c2 0208 	rsb	r2, r2, #8
   ba4d8:	0092      	lsls	r2, r2, #2
   ba4da:	b570      	push	{r4, r5, r6, lr}
   ba4dc:	f1c2 0620 	rsb	r6, r2, #32
   ba4e0:	6843      	ldr	r3, [r0, #4]
   ba4e2:	6804      	ldr	r4, [r0, #0]
   ba4e4:	fa03 f506 	lsl.w	r5, r3, r6
   ba4e8:	432c      	orrs	r4, r5
   ba4ea:	40d3      	lsrs	r3, r2
   ba4ec:	6004      	str	r4, [r0, #0]
   ba4ee:	f840 3f04 	str.w	r3, [r0, #4]!
   ba4f2:	4288      	cmp	r0, r1
   ba4f4:	d3f4      	bcc.n	ba4e0 <L_shift+0xc>
   ba4f6:	bd70      	pop	{r4, r5, r6, pc}

000ba4f8 <__match>:
   ba4f8:	b530      	push	{r4, r5, lr}
   ba4fa:	6803      	ldr	r3, [r0, #0]
   ba4fc:	3301      	adds	r3, #1
   ba4fe:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba502:	b914      	cbnz	r4, ba50a <__match+0x12>
   ba504:	6003      	str	r3, [r0, #0]
   ba506:	2001      	movs	r0, #1
   ba508:	bd30      	pop	{r4, r5, pc}
   ba50a:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba50e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   ba512:	2d19      	cmp	r5, #25
   ba514:	bf98      	it	ls
   ba516:	3220      	addls	r2, #32
   ba518:	42a2      	cmp	r2, r4
   ba51a:	d0f0      	beq.n	ba4fe <__match+0x6>
   ba51c:	2000      	movs	r0, #0
   ba51e:	e7f3      	b.n	ba508 <__match+0x10>

000ba520 <__hexnan>:
   ba520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba524:	680b      	ldr	r3, [r1, #0]
   ba526:	115e      	asrs	r6, r3, #5
   ba528:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   ba52c:	f013 031f 	ands.w	r3, r3, #31
   ba530:	b087      	sub	sp, #28
   ba532:	bf18      	it	ne
   ba534:	3604      	addne	r6, #4
   ba536:	2500      	movs	r5, #0
   ba538:	1f37      	subs	r7, r6, #4
   ba53a:	4690      	mov	r8, r2
   ba53c:	6802      	ldr	r2, [r0, #0]
   ba53e:	9301      	str	r3, [sp, #4]
   ba540:	4682      	mov	sl, r0
   ba542:	f846 5c04 	str.w	r5, [r6, #-4]
   ba546:	46b9      	mov	r9, r7
   ba548:	463c      	mov	r4, r7
   ba54a:	9502      	str	r5, [sp, #8]
   ba54c:	46ab      	mov	fp, r5
   ba54e:	7851      	ldrb	r1, [r2, #1]
   ba550:	1c53      	adds	r3, r2, #1
   ba552:	9303      	str	r3, [sp, #12]
   ba554:	b341      	cbz	r1, ba5a8 <__hexnan+0x88>
   ba556:	4608      	mov	r0, r1
   ba558:	9205      	str	r2, [sp, #20]
   ba55a:	9104      	str	r1, [sp, #16]
   ba55c:	f7ff fd5e 	bl	ba01c <__hexdig_fun>
   ba560:	2800      	cmp	r0, #0
   ba562:	d14f      	bne.n	ba604 <__hexnan+0xe4>
   ba564:	9904      	ldr	r1, [sp, #16]
   ba566:	9a05      	ldr	r2, [sp, #20]
   ba568:	2920      	cmp	r1, #32
   ba56a:	d818      	bhi.n	ba59e <__hexnan+0x7e>
   ba56c:	9b02      	ldr	r3, [sp, #8]
   ba56e:	459b      	cmp	fp, r3
   ba570:	dd13      	ble.n	ba59a <__hexnan+0x7a>
   ba572:	454c      	cmp	r4, r9
   ba574:	d206      	bcs.n	ba584 <__hexnan+0x64>
   ba576:	2d07      	cmp	r5, #7
   ba578:	dc04      	bgt.n	ba584 <__hexnan+0x64>
   ba57a:	462a      	mov	r2, r5
   ba57c:	4649      	mov	r1, r9
   ba57e:	4620      	mov	r0, r4
   ba580:	f7ff ffa8 	bl	ba4d4 <L_shift>
   ba584:	4544      	cmp	r4, r8
   ba586:	d950      	bls.n	ba62a <__hexnan+0x10a>
   ba588:	2300      	movs	r3, #0
   ba58a:	f1a4 0904 	sub.w	r9, r4, #4
   ba58e:	f844 3c04 	str.w	r3, [r4, #-4]
   ba592:	f8cd b008 	str.w	fp, [sp, #8]
   ba596:	464c      	mov	r4, r9
   ba598:	461d      	mov	r5, r3
   ba59a:	9a03      	ldr	r2, [sp, #12]
   ba59c:	e7d7      	b.n	ba54e <__hexnan+0x2e>
   ba59e:	2929      	cmp	r1, #41	; 0x29
   ba5a0:	d156      	bne.n	ba650 <__hexnan+0x130>
   ba5a2:	3202      	adds	r2, #2
   ba5a4:	f8ca 2000 	str.w	r2, [sl]
   ba5a8:	f1bb 0f00 	cmp.w	fp, #0
   ba5ac:	d050      	beq.n	ba650 <__hexnan+0x130>
   ba5ae:	454c      	cmp	r4, r9
   ba5b0:	d206      	bcs.n	ba5c0 <__hexnan+0xa0>
   ba5b2:	2d07      	cmp	r5, #7
   ba5b4:	dc04      	bgt.n	ba5c0 <__hexnan+0xa0>
   ba5b6:	462a      	mov	r2, r5
   ba5b8:	4649      	mov	r1, r9
   ba5ba:	4620      	mov	r0, r4
   ba5bc:	f7ff ff8a 	bl	ba4d4 <L_shift>
   ba5c0:	4544      	cmp	r4, r8
   ba5c2:	d934      	bls.n	ba62e <__hexnan+0x10e>
   ba5c4:	f1a8 0204 	sub.w	r2, r8, #4
   ba5c8:	4623      	mov	r3, r4
   ba5ca:	f853 1b04 	ldr.w	r1, [r3], #4
   ba5ce:	f842 1f04 	str.w	r1, [r2, #4]!
   ba5d2:	429f      	cmp	r7, r3
   ba5d4:	d2f9      	bcs.n	ba5ca <__hexnan+0xaa>
   ba5d6:	1b3b      	subs	r3, r7, r4
   ba5d8:	f023 0303 	bic.w	r3, r3, #3
   ba5dc:	3304      	adds	r3, #4
   ba5de:	3401      	adds	r4, #1
   ba5e0:	3e03      	subs	r6, #3
   ba5e2:	42b4      	cmp	r4, r6
   ba5e4:	bf88      	it	hi
   ba5e6:	2304      	movhi	r3, #4
   ba5e8:	4443      	add	r3, r8
   ba5ea:	2200      	movs	r2, #0
   ba5ec:	f843 2b04 	str.w	r2, [r3], #4
   ba5f0:	429f      	cmp	r7, r3
   ba5f2:	d2fb      	bcs.n	ba5ec <__hexnan+0xcc>
   ba5f4:	683b      	ldr	r3, [r7, #0]
   ba5f6:	b91b      	cbnz	r3, ba600 <__hexnan+0xe0>
   ba5f8:	4547      	cmp	r7, r8
   ba5fa:	d127      	bne.n	ba64c <__hexnan+0x12c>
   ba5fc:	2301      	movs	r3, #1
   ba5fe:	603b      	str	r3, [r7, #0]
   ba600:	2005      	movs	r0, #5
   ba602:	e026      	b.n	ba652 <__hexnan+0x132>
   ba604:	3501      	adds	r5, #1
   ba606:	2d08      	cmp	r5, #8
   ba608:	f10b 0b01 	add.w	fp, fp, #1
   ba60c:	dd06      	ble.n	ba61c <__hexnan+0xfc>
   ba60e:	4544      	cmp	r4, r8
   ba610:	d9c3      	bls.n	ba59a <__hexnan+0x7a>
   ba612:	2300      	movs	r3, #0
   ba614:	f844 3c04 	str.w	r3, [r4, #-4]
   ba618:	2501      	movs	r5, #1
   ba61a:	3c04      	subs	r4, #4
   ba61c:	6822      	ldr	r2, [r4, #0]
   ba61e:	f000 000f 	and.w	r0, r0, #15
   ba622:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   ba626:	6022      	str	r2, [r4, #0]
   ba628:	e7b7      	b.n	ba59a <__hexnan+0x7a>
   ba62a:	2508      	movs	r5, #8
   ba62c:	e7b5      	b.n	ba59a <__hexnan+0x7a>
   ba62e:	9b01      	ldr	r3, [sp, #4]
   ba630:	2b00      	cmp	r3, #0
   ba632:	d0df      	beq.n	ba5f4 <__hexnan+0xd4>
   ba634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba638:	f1c3 0320 	rsb	r3, r3, #32
   ba63c:	fa22 f303 	lsr.w	r3, r2, r3
   ba640:	f856 2c04 	ldr.w	r2, [r6, #-4]
   ba644:	401a      	ands	r2, r3
   ba646:	f846 2c04 	str.w	r2, [r6, #-4]
   ba64a:	e7d3      	b.n	ba5f4 <__hexnan+0xd4>
   ba64c:	3f04      	subs	r7, #4
   ba64e:	e7d1      	b.n	ba5f4 <__hexnan+0xd4>
   ba650:	2004      	movs	r0, #4
   ba652:	b007      	add	sp, #28
   ba654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba658 <__retarget_lock_acquire_recursive>:
   ba658:	4770      	bx	lr

000ba65a <__retarget_lock_release>:
   ba65a:	4770      	bx	lr

000ba65c <__retarget_lock_release_recursive>:
   ba65c:	4770      	bx	lr

000ba65e <__ascii_mbtowc>:
   ba65e:	b082      	sub	sp, #8
   ba660:	b901      	cbnz	r1, ba664 <__ascii_mbtowc+0x6>
   ba662:	a901      	add	r1, sp, #4
   ba664:	b142      	cbz	r2, ba678 <__ascii_mbtowc+0x1a>
   ba666:	b14b      	cbz	r3, ba67c <__ascii_mbtowc+0x1e>
   ba668:	7813      	ldrb	r3, [r2, #0]
   ba66a:	600b      	str	r3, [r1, #0]
   ba66c:	7812      	ldrb	r2, [r2, #0]
   ba66e:	1e10      	subs	r0, r2, #0
   ba670:	bf18      	it	ne
   ba672:	2001      	movne	r0, #1
   ba674:	b002      	add	sp, #8
   ba676:	4770      	bx	lr
   ba678:	4610      	mov	r0, r2
   ba67a:	e7fb      	b.n	ba674 <__ascii_mbtowc+0x16>
   ba67c:	f06f 0001 	mvn.w	r0, #1
   ba680:	e7f8      	b.n	ba674 <__ascii_mbtowc+0x16>
	...

000ba684 <_Balloc>:
   ba684:	b570      	push	{r4, r5, r6, lr}
   ba686:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba688:	4604      	mov	r4, r0
   ba68a:	460d      	mov	r5, r1
   ba68c:	b976      	cbnz	r6, ba6ac <_Balloc+0x28>
   ba68e:	2010      	movs	r0, #16
   ba690:	f7fb fa4e 	bl	b5b30 <malloc>
   ba694:	4602      	mov	r2, r0
   ba696:	6260      	str	r0, [r4, #36]	; 0x24
   ba698:	b920      	cbnz	r0, ba6a4 <_Balloc+0x20>
   ba69a:	4b18      	ldr	r3, [pc, #96]	; (ba6fc <_Balloc+0x78>)
   ba69c:	4818      	ldr	r0, [pc, #96]	; (ba700 <_Balloc+0x7c>)
   ba69e:	2166      	movs	r1, #102	; 0x66
   ba6a0:	f7fb fa86 	bl	b5bb0 <__assert_func>
   ba6a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   ba6a8:	6006      	str	r6, [r0, #0]
   ba6aa:	60c6      	str	r6, [r0, #12]
   ba6ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba6ae:	68f3      	ldr	r3, [r6, #12]
   ba6b0:	b183      	cbz	r3, ba6d4 <_Balloc+0x50>
   ba6b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba6b4:	68db      	ldr	r3, [r3, #12]
   ba6b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   ba6ba:	b9b8      	cbnz	r0, ba6ec <_Balloc+0x68>
   ba6bc:	2101      	movs	r1, #1
   ba6be:	fa01 f605 	lsl.w	r6, r1, r5
   ba6c2:	1d72      	adds	r2, r6, #5
   ba6c4:	0092      	lsls	r2, r2, #2
   ba6c6:	4620      	mov	r0, r4
   ba6c8:	f000 fc9d 	bl	bb006 <_calloc_r>
   ba6cc:	b160      	cbz	r0, ba6e8 <_Balloc+0x64>
   ba6ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
   ba6d2:	e00e      	b.n	ba6f2 <_Balloc+0x6e>
   ba6d4:	2221      	movs	r2, #33	; 0x21
   ba6d6:	2104      	movs	r1, #4
   ba6d8:	4620      	mov	r0, r4
   ba6da:	f000 fc94 	bl	bb006 <_calloc_r>
   ba6de:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba6e0:	60f0      	str	r0, [r6, #12]
   ba6e2:	68db      	ldr	r3, [r3, #12]
   ba6e4:	2b00      	cmp	r3, #0
   ba6e6:	d1e4      	bne.n	ba6b2 <_Balloc+0x2e>
   ba6e8:	2000      	movs	r0, #0
   ba6ea:	bd70      	pop	{r4, r5, r6, pc}
   ba6ec:	6802      	ldr	r2, [r0, #0]
   ba6ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   ba6f2:	2300      	movs	r3, #0
   ba6f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   ba6f8:	e7f7      	b.n	ba6ea <_Balloc+0x66>
   ba6fa:	bf00      	nop
   ba6fc:	000bb831 	.word	0x000bb831
   ba700:	000bba88 	.word	0x000bba88

000ba704 <_Bfree>:
   ba704:	b570      	push	{r4, r5, r6, lr}
   ba706:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba708:	4605      	mov	r5, r0
   ba70a:	460c      	mov	r4, r1
   ba70c:	b976      	cbnz	r6, ba72c <_Bfree+0x28>
   ba70e:	2010      	movs	r0, #16
   ba710:	f7fb fa0e 	bl	b5b30 <malloc>
   ba714:	4602      	mov	r2, r0
   ba716:	6268      	str	r0, [r5, #36]	; 0x24
   ba718:	b920      	cbnz	r0, ba724 <_Bfree+0x20>
   ba71a:	4b09      	ldr	r3, [pc, #36]	; (ba740 <_Bfree+0x3c>)
   ba71c:	4809      	ldr	r0, [pc, #36]	; (ba744 <_Bfree+0x40>)
   ba71e:	218a      	movs	r1, #138	; 0x8a
   ba720:	f7fb fa46 	bl	b5bb0 <__assert_func>
   ba724:	e9c0 6601 	strd	r6, r6, [r0, #4]
   ba728:	6006      	str	r6, [r0, #0]
   ba72a:	60c6      	str	r6, [r0, #12]
   ba72c:	b13c      	cbz	r4, ba73e <_Bfree+0x3a>
   ba72e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   ba730:	6862      	ldr	r2, [r4, #4]
   ba732:	68db      	ldr	r3, [r3, #12]
   ba734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   ba738:	6021      	str	r1, [r4, #0]
   ba73a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   ba73e:	bd70      	pop	{r4, r5, r6, pc}
   ba740:	000bb831 	.word	0x000bb831
   ba744:	000bba88 	.word	0x000bba88

000ba748 <__multadd>:
   ba748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba74c:	690d      	ldr	r5, [r1, #16]
   ba74e:	4607      	mov	r7, r0
   ba750:	460c      	mov	r4, r1
   ba752:	461e      	mov	r6, r3
   ba754:	f101 0c14 	add.w	ip, r1, #20
   ba758:	2000      	movs	r0, #0
   ba75a:	f8dc 3000 	ldr.w	r3, [ip]
   ba75e:	b299      	uxth	r1, r3
   ba760:	fb02 6101 	mla	r1, r2, r1, r6
   ba764:	0c1e      	lsrs	r6, r3, #16
   ba766:	0c0b      	lsrs	r3, r1, #16
   ba768:	fb02 3306 	mla	r3, r2, r6, r3
   ba76c:	b289      	uxth	r1, r1
   ba76e:	3001      	adds	r0, #1
   ba770:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   ba774:	4285      	cmp	r5, r0
   ba776:	f84c 1b04 	str.w	r1, [ip], #4
   ba77a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   ba77e:	dcec      	bgt.n	ba75a <__multadd+0x12>
   ba780:	b30e      	cbz	r6, ba7c6 <__multadd+0x7e>
   ba782:	68a3      	ldr	r3, [r4, #8]
   ba784:	42ab      	cmp	r3, r5
   ba786:	dc19      	bgt.n	ba7bc <__multadd+0x74>
   ba788:	6861      	ldr	r1, [r4, #4]
   ba78a:	4638      	mov	r0, r7
   ba78c:	3101      	adds	r1, #1
   ba78e:	f7ff ff79 	bl	ba684 <_Balloc>
   ba792:	4680      	mov	r8, r0
   ba794:	b928      	cbnz	r0, ba7a2 <__multadd+0x5a>
   ba796:	4602      	mov	r2, r0
   ba798:	4b0c      	ldr	r3, [pc, #48]	; (ba7cc <__multadd+0x84>)
   ba79a:	480d      	ldr	r0, [pc, #52]	; (ba7d0 <__multadd+0x88>)
   ba79c:	21b5      	movs	r1, #181	; 0xb5
   ba79e:	f7fb fa07 	bl	b5bb0 <__assert_func>
   ba7a2:	6922      	ldr	r2, [r4, #16]
   ba7a4:	3202      	adds	r2, #2
   ba7a6:	f104 010c 	add.w	r1, r4, #12
   ba7aa:	0092      	lsls	r2, r2, #2
   ba7ac:	300c      	adds	r0, #12
   ba7ae:	f7fe fc16 	bl	b8fde <memcpy>
   ba7b2:	4621      	mov	r1, r4
   ba7b4:	4638      	mov	r0, r7
   ba7b6:	f7ff ffa5 	bl	ba704 <_Bfree>
   ba7ba:	4644      	mov	r4, r8
   ba7bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   ba7c0:	3501      	adds	r5, #1
   ba7c2:	615e      	str	r6, [r3, #20]
   ba7c4:	6125      	str	r5, [r4, #16]
   ba7c6:	4620      	mov	r0, r4
   ba7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba7cc:	000bba01 	.word	0x000bba01
   ba7d0:	000bba88 	.word	0x000bba88

000ba7d4 <__s2b>:
   ba7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba7d8:	460c      	mov	r4, r1
   ba7da:	4615      	mov	r5, r2
   ba7dc:	461f      	mov	r7, r3
   ba7de:	2209      	movs	r2, #9
   ba7e0:	3308      	adds	r3, #8
   ba7e2:	4606      	mov	r6, r0
   ba7e4:	fb93 f3f2 	sdiv	r3, r3, r2
   ba7e8:	2100      	movs	r1, #0
   ba7ea:	2201      	movs	r2, #1
   ba7ec:	429a      	cmp	r2, r3
   ba7ee:	db09      	blt.n	ba804 <__s2b+0x30>
   ba7f0:	4630      	mov	r0, r6
   ba7f2:	f7ff ff47 	bl	ba684 <_Balloc>
   ba7f6:	b940      	cbnz	r0, ba80a <__s2b+0x36>
   ba7f8:	4602      	mov	r2, r0
   ba7fa:	4b19      	ldr	r3, [pc, #100]	; (ba860 <__s2b+0x8c>)
   ba7fc:	4819      	ldr	r0, [pc, #100]	; (ba864 <__s2b+0x90>)
   ba7fe:	21ce      	movs	r1, #206	; 0xce
   ba800:	f7fb f9d6 	bl	b5bb0 <__assert_func>
   ba804:	0052      	lsls	r2, r2, #1
   ba806:	3101      	adds	r1, #1
   ba808:	e7f0      	b.n	ba7ec <__s2b+0x18>
   ba80a:	9b08      	ldr	r3, [sp, #32]
   ba80c:	6143      	str	r3, [r0, #20]
   ba80e:	2d09      	cmp	r5, #9
   ba810:	f04f 0301 	mov.w	r3, #1
   ba814:	6103      	str	r3, [r0, #16]
   ba816:	dd16      	ble.n	ba846 <__s2b+0x72>
   ba818:	f104 0909 	add.w	r9, r4, #9
   ba81c:	46c8      	mov	r8, r9
   ba81e:	442c      	add	r4, r5
   ba820:	f818 3b01 	ldrb.w	r3, [r8], #1
   ba824:	4601      	mov	r1, r0
   ba826:	3b30      	subs	r3, #48	; 0x30
   ba828:	220a      	movs	r2, #10
   ba82a:	4630      	mov	r0, r6
   ba82c:	f7ff ff8c 	bl	ba748 <__multadd>
   ba830:	45a0      	cmp	r8, r4
   ba832:	d1f5      	bne.n	ba820 <__s2b+0x4c>
   ba834:	f1a5 0408 	sub.w	r4, r5, #8
   ba838:	444c      	add	r4, r9
   ba83a:	1b2d      	subs	r5, r5, r4
   ba83c:	1963      	adds	r3, r4, r5
   ba83e:	42bb      	cmp	r3, r7
   ba840:	db04      	blt.n	ba84c <__s2b+0x78>
   ba842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba846:	340a      	adds	r4, #10
   ba848:	2509      	movs	r5, #9
   ba84a:	e7f6      	b.n	ba83a <__s2b+0x66>
   ba84c:	f814 3b01 	ldrb.w	r3, [r4], #1
   ba850:	4601      	mov	r1, r0
   ba852:	3b30      	subs	r3, #48	; 0x30
   ba854:	220a      	movs	r2, #10
   ba856:	4630      	mov	r0, r6
   ba858:	f7ff ff76 	bl	ba748 <__multadd>
   ba85c:	e7ee      	b.n	ba83c <__s2b+0x68>
   ba85e:	bf00      	nop
   ba860:	000bba01 	.word	0x000bba01
   ba864:	000bba88 	.word	0x000bba88

000ba868 <__hi0bits>:
   ba868:	0c03      	lsrs	r3, r0, #16
   ba86a:	041b      	lsls	r3, r3, #16
   ba86c:	b9d3      	cbnz	r3, ba8a4 <__hi0bits+0x3c>
   ba86e:	0400      	lsls	r0, r0, #16
   ba870:	2310      	movs	r3, #16
   ba872:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   ba876:	bf04      	itt	eq
   ba878:	0200      	lsleq	r0, r0, #8
   ba87a:	3308      	addeq	r3, #8
   ba87c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   ba880:	bf04      	itt	eq
   ba882:	0100      	lsleq	r0, r0, #4
   ba884:	3304      	addeq	r3, #4
   ba886:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   ba88a:	bf04      	itt	eq
   ba88c:	0080      	lsleq	r0, r0, #2
   ba88e:	3302      	addeq	r3, #2
   ba890:	2800      	cmp	r0, #0
   ba892:	db05      	blt.n	ba8a0 <__hi0bits+0x38>
   ba894:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   ba898:	f103 0301 	add.w	r3, r3, #1
   ba89c:	bf08      	it	eq
   ba89e:	2320      	moveq	r3, #32
   ba8a0:	4618      	mov	r0, r3
   ba8a2:	4770      	bx	lr
   ba8a4:	2300      	movs	r3, #0
   ba8a6:	e7e4      	b.n	ba872 <__hi0bits+0xa>

000ba8a8 <__lo0bits>:
   ba8a8:	6803      	ldr	r3, [r0, #0]
   ba8aa:	f013 0207 	ands.w	r2, r3, #7
   ba8ae:	4601      	mov	r1, r0
   ba8b0:	d00b      	beq.n	ba8ca <__lo0bits+0x22>
   ba8b2:	07da      	lsls	r2, r3, #31
   ba8b4:	d423      	bmi.n	ba8fe <__lo0bits+0x56>
   ba8b6:	0798      	lsls	r0, r3, #30
   ba8b8:	bf49      	itett	mi
   ba8ba:	085b      	lsrmi	r3, r3, #1
   ba8bc:	089b      	lsrpl	r3, r3, #2
   ba8be:	2001      	movmi	r0, #1
   ba8c0:	600b      	strmi	r3, [r1, #0]
   ba8c2:	bf5c      	itt	pl
   ba8c4:	600b      	strpl	r3, [r1, #0]
   ba8c6:	2002      	movpl	r0, #2
   ba8c8:	4770      	bx	lr
   ba8ca:	b298      	uxth	r0, r3
   ba8cc:	b9a8      	cbnz	r0, ba8fa <__lo0bits+0x52>
   ba8ce:	0c1b      	lsrs	r3, r3, #16
   ba8d0:	2010      	movs	r0, #16
   ba8d2:	b2da      	uxtb	r2, r3
   ba8d4:	b90a      	cbnz	r2, ba8da <__lo0bits+0x32>
   ba8d6:	3008      	adds	r0, #8
   ba8d8:	0a1b      	lsrs	r3, r3, #8
   ba8da:	071a      	lsls	r2, r3, #28
   ba8dc:	bf04      	itt	eq
   ba8de:	091b      	lsreq	r3, r3, #4
   ba8e0:	3004      	addeq	r0, #4
   ba8e2:	079a      	lsls	r2, r3, #30
   ba8e4:	bf04      	itt	eq
   ba8e6:	089b      	lsreq	r3, r3, #2
   ba8e8:	3002      	addeq	r0, #2
   ba8ea:	07da      	lsls	r2, r3, #31
   ba8ec:	d403      	bmi.n	ba8f6 <__lo0bits+0x4e>
   ba8ee:	085b      	lsrs	r3, r3, #1
   ba8f0:	f100 0001 	add.w	r0, r0, #1
   ba8f4:	d005      	beq.n	ba902 <__lo0bits+0x5a>
   ba8f6:	600b      	str	r3, [r1, #0]
   ba8f8:	4770      	bx	lr
   ba8fa:	4610      	mov	r0, r2
   ba8fc:	e7e9      	b.n	ba8d2 <__lo0bits+0x2a>
   ba8fe:	2000      	movs	r0, #0
   ba900:	4770      	bx	lr
   ba902:	2020      	movs	r0, #32
   ba904:	4770      	bx	lr
	...

000ba908 <__i2b>:
   ba908:	b510      	push	{r4, lr}
   ba90a:	460c      	mov	r4, r1
   ba90c:	2101      	movs	r1, #1
   ba90e:	f7ff feb9 	bl	ba684 <_Balloc>
   ba912:	4602      	mov	r2, r0
   ba914:	b928      	cbnz	r0, ba922 <__i2b+0x1a>
   ba916:	4b05      	ldr	r3, [pc, #20]	; (ba92c <__i2b+0x24>)
   ba918:	4805      	ldr	r0, [pc, #20]	; (ba930 <__i2b+0x28>)
   ba91a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   ba91e:	f7fb f947 	bl	b5bb0 <__assert_func>
   ba922:	2301      	movs	r3, #1
   ba924:	6144      	str	r4, [r0, #20]
   ba926:	6103      	str	r3, [r0, #16]
   ba928:	bd10      	pop	{r4, pc}
   ba92a:	bf00      	nop
   ba92c:	000bba01 	.word	0x000bba01
   ba930:	000bba88 	.word	0x000bba88

000ba934 <__multiply>:
   ba934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba938:	4691      	mov	r9, r2
   ba93a:	690a      	ldr	r2, [r1, #16]
   ba93c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ba940:	429a      	cmp	r2, r3
   ba942:	bfb8      	it	lt
   ba944:	460b      	movlt	r3, r1
   ba946:	460c      	mov	r4, r1
   ba948:	bfbc      	itt	lt
   ba94a:	464c      	movlt	r4, r9
   ba94c:	4699      	movlt	r9, r3
   ba94e:	6927      	ldr	r7, [r4, #16]
   ba950:	f8d9 a010 	ldr.w	sl, [r9, #16]
   ba954:	68a3      	ldr	r3, [r4, #8]
   ba956:	6861      	ldr	r1, [r4, #4]
   ba958:	eb07 060a 	add.w	r6, r7, sl
   ba95c:	42b3      	cmp	r3, r6
   ba95e:	b085      	sub	sp, #20
   ba960:	bfb8      	it	lt
   ba962:	3101      	addlt	r1, #1
   ba964:	f7ff fe8e 	bl	ba684 <_Balloc>
   ba968:	b930      	cbnz	r0, ba978 <__multiply+0x44>
   ba96a:	4602      	mov	r2, r0
   ba96c:	4b44      	ldr	r3, [pc, #272]	; (baa80 <__multiply+0x14c>)
   ba96e:	4845      	ldr	r0, [pc, #276]	; (baa84 <__multiply+0x150>)
   ba970:	f240 115d 	movw	r1, #349	; 0x15d
   ba974:	f7fb f91c 	bl	b5bb0 <__assert_func>
   ba978:	f100 0514 	add.w	r5, r0, #20
   ba97c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   ba980:	462b      	mov	r3, r5
   ba982:	2200      	movs	r2, #0
   ba984:	4543      	cmp	r3, r8
   ba986:	d321      	bcc.n	ba9cc <__multiply+0x98>
   ba988:	f104 0314 	add.w	r3, r4, #20
   ba98c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   ba990:	f109 0314 	add.w	r3, r9, #20
   ba994:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   ba998:	9202      	str	r2, [sp, #8]
   ba99a:	1b3a      	subs	r2, r7, r4
   ba99c:	3a15      	subs	r2, #21
   ba99e:	f022 0203 	bic.w	r2, r2, #3
   ba9a2:	3204      	adds	r2, #4
   ba9a4:	f104 0115 	add.w	r1, r4, #21
   ba9a8:	428f      	cmp	r7, r1
   ba9aa:	bf38      	it	cc
   ba9ac:	2204      	movcc	r2, #4
   ba9ae:	9201      	str	r2, [sp, #4]
   ba9b0:	9a02      	ldr	r2, [sp, #8]
   ba9b2:	9303      	str	r3, [sp, #12]
   ba9b4:	429a      	cmp	r2, r3
   ba9b6:	d80c      	bhi.n	ba9d2 <__multiply+0x9e>
   ba9b8:	2e00      	cmp	r6, #0
   ba9ba:	dd03      	ble.n	ba9c4 <__multiply+0x90>
   ba9bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   ba9c0:	2b00      	cmp	r3, #0
   ba9c2:	d05a      	beq.n	baa7a <__multiply+0x146>
   ba9c4:	6106      	str	r6, [r0, #16]
   ba9c6:	b005      	add	sp, #20
   ba9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba9cc:	f843 2b04 	str.w	r2, [r3], #4
   ba9d0:	e7d8      	b.n	ba984 <__multiply+0x50>
   ba9d2:	f8b3 a000 	ldrh.w	sl, [r3]
   ba9d6:	f1ba 0f00 	cmp.w	sl, #0
   ba9da:	d024      	beq.n	baa26 <__multiply+0xf2>
   ba9dc:	f104 0e14 	add.w	lr, r4, #20
   ba9e0:	46a9      	mov	r9, r5
   ba9e2:	f04f 0c00 	mov.w	ip, #0
   ba9e6:	f85e 2b04 	ldr.w	r2, [lr], #4
   ba9ea:	f8d9 1000 	ldr.w	r1, [r9]
   ba9ee:	fa1f fb82 	uxth.w	fp, r2
   ba9f2:	b289      	uxth	r1, r1
   ba9f4:	fb0a 110b 	mla	r1, sl, fp, r1
   ba9f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   ba9fc:	f8d9 2000 	ldr.w	r2, [r9]
   baa00:	4461      	add	r1, ip
   baa02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   baa06:	fb0a c20b 	mla	r2, sl, fp, ip
   baa0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   baa0e:	b289      	uxth	r1, r1
   baa10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   baa14:	4577      	cmp	r7, lr
   baa16:	f849 1b04 	str.w	r1, [r9], #4
   baa1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   baa1e:	d8e2      	bhi.n	ba9e6 <__multiply+0xb2>
   baa20:	9a01      	ldr	r2, [sp, #4]
   baa22:	f845 c002 	str.w	ip, [r5, r2]
   baa26:	9a03      	ldr	r2, [sp, #12]
   baa28:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   baa2c:	3304      	adds	r3, #4
   baa2e:	f1b9 0f00 	cmp.w	r9, #0
   baa32:	d020      	beq.n	baa76 <__multiply+0x142>
   baa34:	6829      	ldr	r1, [r5, #0]
   baa36:	f104 0c14 	add.w	ip, r4, #20
   baa3a:	46ae      	mov	lr, r5
   baa3c:	f04f 0a00 	mov.w	sl, #0
   baa40:	f8bc b000 	ldrh.w	fp, [ip]
   baa44:	f8be 2002 	ldrh.w	r2, [lr, #2]
   baa48:	fb09 220b 	mla	r2, r9, fp, r2
   baa4c:	4492      	add	sl, r2
   baa4e:	b289      	uxth	r1, r1
   baa50:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   baa54:	f84e 1b04 	str.w	r1, [lr], #4
   baa58:	f85c 2b04 	ldr.w	r2, [ip], #4
   baa5c:	f8be 1000 	ldrh.w	r1, [lr]
   baa60:	0c12      	lsrs	r2, r2, #16
   baa62:	fb09 1102 	mla	r1, r9, r2, r1
   baa66:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   baa6a:	4567      	cmp	r7, ip
   baa6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   baa70:	d8e6      	bhi.n	baa40 <__multiply+0x10c>
   baa72:	9a01      	ldr	r2, [sp, #4]
   baa74:	50a9      	str	r1, [r5, r2]
   baa76:	3504      	adds	r5, #4
   baa78:	e79a      	b.n	ba9b0 <__multiply+0x7c>
   baa7a:	3e01      	subs	r6, #1
   baa7c:	e79c      	b.n	ba9b8 <__multiply+0x84>
   baa7e:	bf00      	nop
   baa80:	000bba01 	.word	0x000bba01
   baa84:	000bba88 	.word	0x000bba88

000baa88 <__pow5mult>:
   baa88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   baa8c:	4615      	mov	r5, r2
   baa8e:	f012 0203 	ands.w	r2, r2, #3
   baa92:	4606      	mov	r6, r0
   baa94:	460f      	mov	r7, r1
   baa96:	d007      	beq.n	baaa8 <__pow5mult+0x20>
   baa98:	4c25      	ldr	r4, [pc, #148]	; (bab30 <__pow5mult+0xa8>)
   baa9a:	3a01      	subs	r2, #1
   baa9c:	2300      	movs	r3, #0
   baa9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   baaa2:	f7ff fe51 	bl	ba748 <__multadd>
   baaa6:	4607      	mov	r7, r0
   baaa8:	10ad      	asrs	r5, r5, #2
   baaaa:	d03d      	beq.n	bab28 <__pow5mult+0xa0>
   baaac:	6a74      	ldr	r4, [r6, #36]	; 0x24
   baaae:	b97c      	cbnz	r4, baad0 <__pow5mult+0x48>
   baab0:	2010      	movs	r0, #16
   baab2:	f7fb f83d 	bl	b5b30 <malloc>
   baab6:	4602      	mov	r2, r0
   baab8:	6270      	str	r0, [r6, #36]	; 0x24
   baaba:	b928      	cbnz	r0, baac8 <__pow5mult+0x40>
   baabc:	4b1d      	ldr	r3, [pc, #116]	; (bab34 <__pow5mult+0xac>)
   baabe:	481e      	ldr	r0, [pc, #120]	; (bab38 <__pow5mult+0xb0>)
   baac0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   baac4:	f7fb f874 	bl	b5bb0 <__assert_func>
   baac8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   baacc:	6004      	str	r4, [r0, #0]
   baace:	60c4      	str	r4, [r0, #12]
   baad0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   baad4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   baad8:	b94c      	cbnz	r4, baaee <__pow5mult+0x66>
   baada:	f240 2171 	movw	r1, #625	; 0x271
   baade:	4630      	mov	r0, r6
   baae0:	f7ff ff12 	bl	ba908 <__i2b>
   baae4:	2300      	movs	r3, #0
   baae6:	f8c8 0008 	str.w	r0, [r8, #8]
   baaea:	4604      	mov	r4, r0
   baaec:	6003      	str	r3, [r0, #0]
   baaee:	f04f 0900 	mov.w	r9, #0
   baaf2:	07eb      	lsls	r3, r5, #31
   baaf4:	d50a      	bpl.n	bab0c <__pow5mult+0x84>
   baaf6:	4639      	mov	r1, r7
   baaf8:	4622      	mov	r2, r4
   baafa:	4630      	mov	r0, r6
   baafc:	f7ff ff1a 	bl	ba934 <__multiply>
   bab00:	4639      	mov	r1, r7
   bab02:	4680      	mov	r8, r0
   bab04:	4630      	mov	r0, r6
   bab06:	f7ff fdfd 	bl	ba704 <_Bfree>
   bab0a:	4647      	mov	r7, r8
   bab0c:	106d      	asrs	r5, r5, #1
   bab0e:	d00b      	beq.n	bab28 <__pow5mult+0xa0>
   bab10:	6820      	ldr	r0, [r4, #0]
   bab12:	b938      	cbnz	r0, bab24 <__pow5mult+0x9c>
   bab14:	4622      	mov	r2, r4
   bab16:	4621      	mov	r1, r4
   bab18:	4630      	mov	r0, r6
   bab1a:	f7ff ff0b 	bl	ba934 <__multiply>
   bab1e:	6020      	str	r0, [r4, #0]
   bab20:	f8c0 9000 	str.w	r9, [r0]
   bab24:	4604      	mov	r4, r0
   bab26:	e7e4      	b.n	baaf2 <__pow5mult+0x6a>
   bab28:	4638      	mov	r0, r7
   bab2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bab2e:	bf00      	nop
   bab30:	000bbbd8 	.word	0x000bbbd8
   bab34:	000bb831 	.word	0x000bb831
   bab38:	000bba88 	.word	0x000bba88

000bab3c <__lshift>:
   bab3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bab40:	460c      	mov	r4, r1
   bab42:	6849      	ldr	r1, [r1, #4]
   bab44:	6923      	ldr	r3, [r4, #16]
   bab46:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bab4a:	68a3      	ldr	r3, [r4, #8]
   bab4c:	4607      	mov	r7, r0
   bab4e:	4691      	mov	r9, r2
   bab50:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bab54:	f108 0601 	add.w	r6, r8, #1
   bab58:	42b3      	cmp	r3, r6
   bab5a:	db0b      	blt.n	bab74 <__lshift+0x38>
   bab5c:	4638      	mov	r0, r7
   bab5e:	f7ff fd91 	bl	ba684 <_Balloc>
   bab62:	4605      	mov	r5, r0
   bab64:	b948      	cbnz	r0, bab7a <__lshift+0x3e>
   bab66:	4602      	mov	r2, r0
   bab68:	4b2a      	ldr	r3, [pc, #168]	; (bac14 <__lshift+0xd8>)
   bab6a:	482b      	ldr	r0, [pc, #172]	; (bac18 <__lshift+0xdc>)
   bab6c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bab70:	f7fb f81e 	bl	b5bb0 <__assert_func>
   bab74:	3101      	adds	r1, #1
   bab76:	005b      	lsls	r3, r3, #1
   bab78:	e7ee      	b.n	bab58 <__lshift+0x1c>
   bab7a:	2300      	movs	r3, #0
   bab7c:	f100 0114 	add.w	r1, r0, #20
   bab80:	f100 0210 	add.w	r2, r0, #16
   bab84:	4618      	mov	r0, r3
   bab86:	4553      	cmp	r3, sl
   bab88:	db37      	blt.n	babfa <__lshift+0xbe>
   bab8a:	6920      	ldr	r0, [r4, #16]
   bab8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bab90:	f104 0314 	add.w	r3, r4, #20
   bab94:	f019 091f 	ands.w	r9, r9, #31
   bab98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bab9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   baba0:	d02f      	beq.n	bac02 <__lshift+0xc6>
   baba2:	f1c9 0e20 	rsb	lr, r9, #32
   baba6:	468a      	mov	sl, r1
   baba8:	f04f 0c00 	mov.w	ip, #0
   babac:	681a      	ldr	r2, [r3, #0]
   babae:	fa02 f209 	lsl.w	r2, r2, r9
   babb2:	ea42 020c 	orr.w	r2, r2, ip
   babb6:	f84a 2b04 	str.w	r2, [sl], #4
   babba:	f853 2b04 	ldr.w	r2, [r3], #4
   babbe:	4298      	cmp	r0, r3
   babc0:	fa22 fc0e 	lsr.w	ip, r2, lr
   babc4:	d8f2      	bhi.n	babac <__lshift+0x70>
   babc6:	1b03      	subs	r3, r0, r4
   babc8:	3b15      	subs	r3, #21
   babca:	f023 0303 	bic.w	r3, r3, #3
   babce:	3304      	adds	r3, #4
   babd0:	f104 0215 	add.w	r2, r4, #21
   babd4:	4290      	cmp	r0, r2
   babd6:	bf38      	it	cc
   babd8:	2304      	movcc	r3, #4
   babda:	f841 c003 	str.w	ip, [r1, r3]
   babde:	f1bc 0f00 	cmp.w	ip, #0
   babe2:	d001      	beq.n	babe8 <__lshift+0xac>
   babe4:	f108 0602 	add.w	r6, r8, #2
   babe8:	3e01      	subs	r6, #1
   babea:	4638      	mov	r0, r7
   babec:	612e      	str	r6, [r5, #16]
   babee:	4621      	mov	r1, r4
   babf0:	f7ff fd88 	bl	ba704 <_Bfree>
   babf4:	4628      	mov	r0, r5
   babf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   babfa:	f842 0f04 	str.w	r0, [r2, #4]!
   babfe:	3301      	adds	r3, #1
   bac00:	e7c1      	b.n	bab86 <__lshift+0x4a>
   bac02:	3904      	subs	r1, #4
   bac04:	f853 2b04 	ldr.w	r2, [r3], #4
   bac08:	f841 2f04 	str.w	r2, [r1, #4]!
   bac0c:	4298      	cmp	r0, r3
   bac0e:	d8f9      	bhi.n	bac04 <__lshift+0xc8>
   bac10:	e7ea      	b.n	babe8 <__lshift+0xac>
   bac12:	bf00      	nop
   bac14:	000bba01 	.word	0x000bba01
   bac18:	000bba88 	.word	0x000bba88

000bac1c <__mcmp>:
   bac1c:	b530      	push	{r4, r5, lr}
   bac1e:	6902      	ldr	r2, [r0, #16]
   bac20:	690c      	ldr	r4, [r1, #16]
   bac22:	1b12      	subs	r2, r2, r4
   bac24:	d10e      	bne.n	bac44 <__mcmp+0x28>
   bac26:	f100 0314 	add.w	r3, r0, #20
   bac2a:	3114      	adds	r1, #20
   bac2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bac30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bac34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bac38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bac3c:	42a5      	cmp	r5, r4
   bac3e:	d003      	beq.n	bac48 <__mcmp+0x2c>
   bac40:	d305      	bcc.n	bac4e <__mcmp+0x32>
   bac42:	2201      	movs	r2, #1
   bac44:	4610      	mov	r0, r2
   bac46:	bd30      	pop	{r4, r5, pc}
   bac48:	4283      	cmp	r3, r0
   bac4a:	d3f3      	bcc.n	bac34 <__mcmp+0x18>
   bac4c:	e7fa      	b.n	bac44 <__mcmp+0x28>
   bac4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bac52:	e7f7      	b.n	bac44 <__mcmp+0x28>

000bac54 <__mdiff>:
   bac54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bac58:	460c      	mov	r4, r1
   bac5a:	4606      	mov	r6, r0
   bac5c:	4611      	mov	r1, r2
   bac5e:	4620      	mov	r0, r4
   bac60:	4690      	mov	r8, r2
   bac62:	f7ff ffdb 	bl	bac1c <__mcmp>
   bac66:	1e05      	subs	r5, r0, #0
   bac68:	d110      	bne.n	bac8c <__mdiff+0x38>
   bac6a:	4629      	mov	r1, r5
   bac6c:	4630      	mov	r0, r6
   bac6e:	f7ff fd09 	bl	ba684 <_Balloc>
   bac72:	b930      	cbnz	r0, bac82 <__mdiff+0x2e>
   bac74:	4b3a      	ldr	r3, [pc, #232]	; (bad60 <__mdiff+0x10c>)
   bac76:	4602      	mov	r2, r0
   bac78:	f240 2132 	movw	r1, #562	; 0x232
   bac7c:	4839      	ldr	r0, [pc, #228]	; (bad64 <__mdiff+0x110>)
   bac7e:	f7fa ff97 	bl	b5bb0 <__assert_func>
   bac82:	2301      	movs	r3, #1
   bac84:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bac88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bac8c:	bfa4      	itt	ge
   bac8e:	4643      	movge	r3, r8
   bac90:	46a0      	movge	r8, r4
   bac92:	4630      	mov	r0, r6
   bac94:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bac98:	bfa6      	itte	ge
   bac9a:	461c      	movge	r4, r3
   bac9c:	2500      	movge	r5, #0
   bac9e:	2501      	movlt	r5, #1
   baca0:	f7ff fcf0 	bl	ba684 <_Balloc>
   baca4:	b920      	cbnz	r0, bacb0 <__mdiff+0x5c>
   baca6:	4b2e      	ldr	r3, [pc, #184]	; (bad60 <__mdiff+0x10c>)
   baca8:	4602      	mov	r2, r0
   bacaa:	f44f 7110 	mov.w	r1, #576	; 0x240
   bacae:	e7e5      	b.n	bac7c <__mdiff+0x28>
   bacb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bacb4:	6926      	ldr	r6, [r4, #16]
   bacb6:	60c5      	str	r5, [r0, #12]
   bacb8:	f104 0914 	add.w	r9, r4, #20
   bacbc:	f108 0514 	add.w	r5, r8, #20
   bacc0:	f100 0e14 	add.w	lr, r0, #20
   bacc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bacc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   baccc:	f108 0210 	add.w	r2, r8, #16
   bacd0:	46f2      	mov	sl, lr
   bacd2:	2100      	movs	r1, #0
   bacd4:	f859 3b04 	ldr.w	r3, [r9], #4
   bacd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bacdc:	fa1f f883 	uxth.w	r8, r3
   bace0:	fa11 f18b 	uxtah	r1, r1, fp
   bace4:	0c1b      	lsrs	r3, r3, #16
   bace6:	eba1 0808 	sub.w	r8, r1, r8
   bacea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bacee:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bacf2:	fa1f f888 	uxth.w	r8, r8
   bacf6:	1419      	asrs	r1, r3, #16
   bacf8:	454e      	cmp	r6, r9
   bacfa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bacfe:	f84a 3b04 	str.w	r3, [sl], #4
   bad02:	d8e7      	bhi.n	bacd4 <__mdiff+0x80>
   bad04:	1b33      	subs	r3, r6, r4
   bad06:	3b15      	subs	r3, #21
   bad08:	f023 0303 	bic.w	r3, r3, #3
   bad0c:	3304      	adds	r3, #4
   bad0e:	3415      	adds	r4, #21
   bad10:	42a6      	cmp	r6, r4
   bad12:	bf38      	it	cc
   bad14:	2304      	movcc	r3, #4
   bad16:	441d      	add	r5, r3
   bad18:	4473      	add	r3, lr
   bad1a:	469e      	mov	lr, r3
   bad1c:	462e      	mov	r6, r5
   bad1e:	4566      	cmp	r6, ip
   bad20:	d30e      	bcc.n	bad40 <__mdiff+0xec>
   bad22:	f10c 0203 	add.w	r2, ip, #3
   bad26:	1b52      	subs	r2, r2, r5
   bad28:	f022 0203 	bic.w	r2, r2, #3
   bad2c:	3d03      	subs	r5, #3
   bad2e:	45ac      	cmp	ip, r5
   bad30:	bf38      	it	cc
   bad32:	2200      	movcc	r2, #0
   bad34:	441a      	add	r2, r3
   bad36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bad3a:	b17b      	cbz	r3, bad5c <__mdiff+0x108>
   bad3c:	6107      	str	r7, [r0, #16]
   bad3e:	e7a3      	b.n	bac88 <__mdiff+0x34>
   bad40:	f856 8b04 	ldr.w	r8, [r6], #4
   bad44:	fa11 f288 	uxtah	r2, r1, r8
   bad48:	1414      	asrs	r4, r2, #16
   bad4a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bad4e:	b292      	uxth	r2, r2
   bad50:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bad54:	f84e 2b04 	str.w	r2, [lr], #4
   bad58:	1421      	asrs	r1, r4, #16
   bad5a:	e7e0      	b.n	bad1e <__mdiff+0xca>
   bad5c:	3f01      	subs	r7, #1
   bad5e:	e7ea      	b.n	bad36 <__mdiff+0xe2>
   bad60:	000bba01 	.word	0x000bba01
   bad64:	000bba88 	.word	0x000bba88

000bad68 <__ulp>:
   bad68:	b082      	sub	sp, #8
   bad6a:	ed8d 0b00 	vstr	d0, [sp]
   bad6e:	9b01      	ldr	r3, [sp, #4]
   bad70:	4912      	ldr	r1, [pc, #72]	; (badbc <__ulp+0x54>)
   bad72:	4019      	ands	r1, r3
   bad74:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bad78:	2900      	cmp	r1, #0
   bad7a:	dd05      	ble.n	bad88 <__ulp+0x20>
   bad7c:	2200      	movs	r2, #0
   bad7e:	460b      	mov	r3, r1
   bad80:	ec43 2b10 	vmov	d0, r2, r3
   bad84:	b002      	add	sp, #8
   bad86:	4770      	bx	lr
   bad88:	4249      	negs	r1, r1
   bad8a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bad8e:	ea4f 5021 	mov.w	r0, r1, asr #20
   bad92:	f04f 0200 	mov.w	r2, #0
   bad96:	f04f 0300 	mov.w	r3, #0
   bad9a:	da04      	bge.n	bada6 <__ulp+0x3e>
   bad9c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bada0:	fa41 f300 	asr.w	r3, r1, r0
   bada4:	e7ec      	b.n	bad80 <__ulp+0x18>
   bada6:	f1a0 0114 	sub.w	r1, r0, #20
   badaa:	291e      	cmp	r1, #30
   badac:	bfda      	itte	le
   badae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   badb2:	fa20 f101 	lsrle.w	r1, r0, r1
   badb6:	2101      	movgt	r1, #1
   badb8:	460a      	mov	r2, r1
   badba:	e7e1      	b.n	bad80 <__ulp+0x18>
   badbc:	7ff00000 	.word	0x7ff00000

000badc0 <__b2d>:
   badc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   badc2:	6905      	ldr	r5, [r0, #16]
   badc4:	f100 0714 	add.w	r7, r0, #20
   badc8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   badcc:	1f2e      	subs	r6, r5, #4
   badce:	f855 4c04 	ldr.w	r4, [r5, #-4]
   badd2:	4620      	mov	r0, r4
   badd4:	f7ff fd48 	bl	ba868 <__hi0bits>
   badd8:	f1c0 0320 	rsb	r3, r0, #32
   baddc:	280a      	cmp	r0, #10
   badde:	f8df c07c 	ldr.w	ip, [pc, #124]	; bae5c <__b2d+0x9c>
   bade2:	600b      	str	r3, [r1, #0]
   bade4:	dc14      	bgt.n	bae10 <__b2d+0x50>
   bade6:	f1c0 0e0b 	rsb	lr, r0, #11
   badea:	fa24 f10e 	lsr.w	r1, r4, lr
   badee:	42b7      	cmp	r7, r6
   badf0:	ea41 030c 	orr.w	r3, r1, ip
   badf4:	bf34      	ite	cc
   badf6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   badfa:	2100      	movcs	r1, #0
   badfc:	3015      	adds	r0, #21
   badfe:	fa04 f000 	lsl.w	r0, r4, r0
   bae02:	fa21 f10e 	lsr.w	r1, r1, lr
   bae06:	ea40 0201 	orr.w	r2, r0, r1
   bae0a:	ec43 2b10 	vmov	d0, r2, r3
   bae0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bae10:	42b7      	cmp	r7, r6
   bae12:	bf3a      	itte	cc
   bae14:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bae18:	f1a5 0608 	subcc.w	r6, r5, #8
   bae1c:	2100      	movcs	r1, #0
   bae1e:	380b      	subs	r0, #11
   bae20:	d017      	beq.n	bae52 <__b2d+0x92>
   bae22:	f1c0 0c20 	rsb	ip, r0, #32
   bae26:	fa04 f500 	lsl.w	r5, r4, r0
   bae2a:	42be      	cmp	r6, r7
   bae2c:	fa21 f40c 	lsr.w	r4, r1, ip
   bae30:	ea45 0504 	orr.w	r5, r5, r4
   bae34:	bf8c      	ite	hi
   bae36:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bae3a:	2400      	movls	r4, #0
   bae3c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bae40:	fa01 f000 	lsl.w	r0, r1, r0
   bae44:	fa24 f40c 	lsr.w	r4, r4, ip
   bae48:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bae4c:	ea40 0204 	orr.w	r2, r0, r4
   bae50:	e7db      	b.n	bae0a <__b2d+0x4a>
   bae52:	ea44 030c 	orr.w	r3, r4, ip
   bae56:	460a      	mov	r2, r1
   bae58:	e7d7      	b.n	bae0a <__b2d+0x4a>
   bae5a:	bf00      	nop
   bae5c:	3ff00000 	.word	0x3ff00000

000bae60 <__d2b>:
   bae60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bae64:	4689      	mov	r9, r1
   bae66:	2101      	movs	r1, #1
   bae68:	ec57 6b10 	vmov	r6, r7, d0
   bae6c:	4690      	mov	r8, r2
   bae6e:	f7ff fc09 	bl	ba684 <_Balloc>
   bae72:	4604      	mov	r4, r0
   bae74:	b930      	cbnz	r0, bae84 <__d2b+0x24>
   bae76:	4602      	mov	r2, r0
   bae78:	4b25      	ldr	r3, [pc, #148]	; (baf10 <__d2b+0xb0>)
   bae7a:	4826      	ldr	r0, [pc, #152]	; (baf14 <__d2b+0xb4>)
   bae7c:	f240 310a 	movw	r1, #778	; 0x30a
   bae80:	f7fa fe96 	bl	b5bb0 <__assert_func>
   bae84:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bae88:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bae8c:	bb35      	cbnz	r5, baedc <__d2b+0x7c>
   bae8e:	2e00      	cmp	r6, #0
   bae90:	9301      	str	r3, [sp, #4]
   bae92:	d028      	beq.n	baee6 <__d2b+0x86>
   bae94:	4668      	mov	r0, sp
   bae96:	9600      	str	r6, [sp, #0]
   bae98:	f7ff fd06 	bl	ba8a8 <__lo0bits>
   bae9c:	9900      	ldr	r1, [sp, #0]
   bae9e:	b300      	cbz	r0, baee2 <__d2b+0x82>
   baea0:	9a01      	ldr	r2, [sp, #4]
   baea2:	f1c0 0320 	rsb	r3, r0, #32
   baea6:	fa02 f303 	lsl.w	r3, r2, r3
   baeaa:	430b      	orrs	r3, r1
   baeac:	40c2      	lsrs	r2, r0
   baeae:	6163      	str	r3, [r4, #20]
   baeb0:	9201      	str	r2, [sp, #4]
   baeb2:	9b01      	ldr	r3, [sp, #4]
   baeb4:	61a3      	str	r3, [r4, #24]
   baeb6:	2b00      	cmp	r3, #0
   baeb8:	bf14      	ite	ne
   baeba:	2202      	movne	r2, #2
   baebc:	2201      	moveq	r2, #1
   baebe:	6122      	str	r2, [r4, #16]
   baec0:	b1d5      	cbz	r5, baef8 <__d2b+0x98>
   baec2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   baec6:	4405      	add	r5, r0
   baec8:	f8c9 5000 	str.w	r5, [r9]
   baecc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   baed0:	f8c8 0000 	str.w	r0, [r8]
   baed4:	4620      	mov	r0, r4
   baed6:	b003      	add	sp, #12
   baed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   baedc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   baee0:	e7d5      	b.n	bae8e <__d2b+0x2e>
   baee2:	6161      	str	r1, [r4, #20]
   baee4:	e7e5      	b.n	baeb2 <__d2b+0x52>
   baee6:	a801      	add	r0, sp, #4
   baee8:	f7ff fcde 	bl	ba8a8 <__lo0bits>
   baeec:	9b01      	ldr	r3, [sp, #4]
   baeee:	6163      	str	r3, [r4, #20]
   baef0:	2201      	movs	r2, #1
   baef2:	6122      	str	r2, [r4, #16]
   baef4:	3020      	adds	r0, #32
   baef6:	e7e3      	b.n	baec0 <__d2b+0x60>
   baef8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   baefc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   baf00:	f8c9 0000 	str.w	r0, [r9]
   baf04:	6918      	ldr	r0, [r3, #16]
   baf06:	f7ff fcaf 	bl	ba868 <__hi0bits>
   baf0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   baf0e:	e7df      	b.n	baed0 <__d2b+0x70>
   baf10:	000bba01 	.word	0x000bba01
   baf14:	000bba88 	.word	0x000bba88

000baf18 <__ratio>:
   baf18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   baf1c:	4688      	mov	r8, r1
   baf1e:	4669      	mov	r1, sp
   baf20:	4681      	mov	r9, r0
   baf22:	f7ff ff4d 	bl	badc0 <__b2d>
   baf26:	a901      	add	r1, sp, #4
   baf28:	4640      	mov	r0, r8
   baf2a:	ec55 4b10 	vmov	r4, r5, d0
   baf2e:	f7ff ff47 	bl	badc0 <__b2d>
   baf32:	f8d9 3010 	ldr.w	r3, [r9, #16]
   baf36:	f8d8 2010 	ldr.w	r2, [r8, #16]
   baf3a:	eba3 0c02 	sub.w	ip, r3, r2
   baf3e:	e9dd 3200 	ldrd	r3, r2, [sp]
   baf42:	1a9b      	subs	r3, r3, r2
   baf44:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   baf48:	ec51 0b10 	vmov	r0, r1, d0
   baf4c:	2b00      	cmp	r3, #0
   baf4e:	bfd6      	itet	le
   baf50:	460a      	movle	r2, r1
   baf52:	462a      	movgt	r2, r5
   baf54:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   baf58:	468b      	mov	fp, r1
   baf5a:	462f      	mov	r7, r5
   baf5c:	bfd4      	ite	le
   baf5e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   baf62:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   baf66:	4620      	mov	r0, r4
   baf68:	ee10 2a10 	vmov	r2, s0
   baf6c:	465b      	mov	r3, fp
   baf6e:	4639      	mov	r1, r7
   baf70:	f7fd fe04 	bl	b8b7c <__aeabi_ddiv>
   baf74:	ec41 0b10 	vmov	d0, r0, r1
   baf78:	b003      	add	sp, #12
   baf7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000baf7e <__copybits>:
   baf7e:	3901      	subs	r1, #1
   baf80:	b570      	push	{r4, r5, r6, lr}
   baf82:	1149      	asrs	r1, r1, #5
   baf84:	6914      	ldr	r4, [r2, #16]
   baf86:	3101      	adds	r1, #1
   baf88:	f102 0314 	add.w	r3, r2, #20
   baf8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   baf90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   baf94:	1f05      	subs	r5, r0, #4
   baf96:	42a3      	cmp	r3, r4
   baf98:	d30c      	bcc.n	bafb4 <__copybits+0x36>
   baf9a:	1aa3      	subs	r3, r4, r2
   baf9c:	3b11      	subs	r3, #17
   baf9e:	f023 0303 	bic.w	r3, r3, #3
   bafa2:	3211      	adds	r2, #17
   bafa4:	42a2      	cmp	r2, r4
   bafa6:	bf88      	it	hi
   bafa8:	2300      	movhi	r3, #0
   bafaa:	4418      	add	r0, r3
   bafac:	2300      	movs	r3, #0
   bafae:	4288      	cmp	r0, r1
   bafb0:	d305      	bcc.n	bafbe <__copybits+0x40>
   bafb2:	bd70      	pop	{r4, r5, r6, pc}
   bafb4:	f853 6b04 	ldr.w	r6, [r3], #4
   bafb8:	f845 6f04 	str.w	r6, [r5, #4]!
   bafbc:	e7eb      	b.n	baf96 <__copybits+0x18>
   bafbe:	f840 3b04 	str.w	r3, [r0], #4
   bafc2:	e7f4      	b.n	bafae <__copybits+0x30>

000bafc4 <__any_on>:
   bafc4:	f100 0214 	add.w	r2, r0, #20
   bafc8:	6900      	ldr	r0, [r0, #16]
   bafca:	114b      	asrs	r3, r1, #5
   bafcc:	4298      	cmp	r0, r3
   bafce:	b510      	push	{r4, lr}
   bafd0:	db11      	blt.n	baff6 <__any_on+0x32>
   bafd2:	dd0a      	ble.n	bafea <__any_on+0x26>
   bafd4:	f011 011f 	ands.w	r1, r1, #31
   bafd8:	d007      	beq.n	bafea <__any_on+0x26>
   bafda:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bafde:	fa24 f001 	lsr.w	r0, r4, r1
   bafe2:	fa00 f101 	lsl.w	r1, r0, r1
   bafe6:	428c      	cmp	r4, r1
   bafe8:	d10b      	bne.n	bb002 <__any_on+0x3e>
   bafea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bafee:	4293      	cmp	r3, r2
   baff0:	d803      	bhi.n	baffa <__any_on+0x36>
   baff2:	2000      	movs	r0, #0
   baff4:	bd10      	pop	{r4, pc}
   baff6:	4603      	mov	r3, r0
   baff8:	e7f7      	b.n	bafea <__any_on+0x26>
   baffa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   baffe:	2900      	cmp	r1, #0
   bb000:	d0f5      	beq.n	bafee <__any_on+0x2a>
   bb002:	2001      	movs	r0, #1
   bb004:	e7f6      	b.n	baff4 <__any_on+0x30>

000bb006 <_calloc_r>:
   bb006:	b513      	push	{r0, r1, r4, lr}
   bb008:	434a      	muls	r2, r1
   bb00a:	4611      	mov	r1, r2
   bb00c:	9201      	str	r2, [sp, #4]
   bb00e:	f7fa fdbf 	bl	b5b90 <_malloc_r>
   bb012:	4604      	mov	r4, r0
   bb014:	b118      	cbz	r0, bb01e <_calloc_r+0x18>
   bb016:	9a01      	ldr	r2, [sp, #4]
   bb018:	2100      	movs	r1, #0
   bb01a:	f7fe f808 	bl	b902e <memset>
   bb01e:	4620      	mov	r0, r4
   bb020:	b002      	add	sp, #8
   bb022:	bd10      	pop	{r4, pc}
   bb024:	0000      	movs	r0, r0
	...

000bb028 <nan>:
   bb028:	ed9f 0b01 	vldr	d0, [pc, #4]	; bb030 <nan+0x8>
   bb02c:	4770      	bx	lr
   bb02e:	bf00      	nop
   bb030:	00000000 	.word	0x00000000
   bb034:	7ff80000 	.word	0x7ff80000

000bb038 <__ascii_wctomb>:
   bb038:	b149      	cbz	r1, bb04e <__ascii_wctomb+0x16>
   bb03a:	2aff      	cmp	r2, #255	; 0xff
   bb03c:	bf85      	ittet	hi
   bb03e:	238a      	movhi	r3, #138	; 0x8a
   bb040:	6003      	strhi	r3, [r0, #0]
   bb042:	700a      	strbls	r2, [r1, #0]
   bb044:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bb048:	bf98      	it	ls
   bb04a:	2001      	movls	r0, #1
   bb04c:	4770      	bx	lr
   bb04e:	4608      	mov	r0, r1
   bb050:	4770      	bx	lr
	...

000bb054 <__aeabi_d2lz>:
   bb054:	b538      	push	{r3, r4, r5, lr}
   bb056:	2200      	movs	r2, #0
   bb058:	2300      	movs	r3, #0
   bb05a:	4604      	mov	r4, r0
   bb05c:	460d      	mov	r5, r1
   bb05e:	f7fd fed5 	bl	b8e0c <__aeabi_dcmplt>
   bb062:	b928      	cbnz	r0, bb070 <__aeabi_d2lz+0x1c>
   bb064:	4620      	mov	r0, r4
   bb066:	4629      	mov	r1, r5
   bb068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bb06c:	f7fd bf7c 	b.w	b8f68 <__aeabi_d2ulz>
   bb070:	4620      	mov	r0, r4
   bb072:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bb076:	f7fd ff77 	bl	b8f68 <__aeabi_d2ulz>
   bb07a:	4240      	negs	r0, r0
   bb07c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb080:	bd38      	pop	{r3, r4, r5, pc}
   bb082:	bf00      	nop

000bb084 <dynalib_user>:
   bb084:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bb094:	0000 0000 450a 746e 7265 7420 6568 7020     .....Enter the p
   bb0a4:	736f 7469 6f69 206e 666f 7420 6568 6420     osition of the d
   bb0b4:	7665 6369 2065 6977 6874 7420 6568 6220     evice with the b
   bb0c4:	756c 2065 454c 2044 7361 6120 206e 6e69     lue LED as an in
   bb0d4:	6574 6567 2072 6628 7269 7473 6420 7665     teger (first dev
   bb0e4:	6369 2065 7369 6120 2074 2c31 7320 6365     ice is at 1, sec
   bb0f4:	6e6f 2064 7369 6120 2074 2c32 6520 6374     ond is at 2, etc
   bb104:	3a29 0020 530a 7165 6575 636e 3a65 0020     ): ..Sequence: .
   bb114:	202c 0a00 6572 7571 7365 2074 6f63 6564     , ..request code
   bb124:	3120 202c 6461 7264 7365 3a73 0020 7274      1, address: .tr
   bb134:	6e61 6d73 7369 6973 6e6f 7220 6365 6569     ansmission recie
   bb144:	6576 2064 7266 6d6f 203a 6400 7665 6369     ved from: .devic
   bb154:	2065 6469 203a 7400 6172 736e 696d 7373     e id: .transmiss
   bb164:	6f69 206e 6573 746e 7420 3a6f 0020 6572     ion sent to: .re
   bb174:	7571 7365 2074 6f63 6564 3220 202c 6461     quest code 2, ad
   bb184:	7264 7365 3a73 0020 6f63 666e 696c 7463     dress: .conflict
   bb194:	7620 7265 6669 6369 7461 6f69 3a6e 0020      verification: .
   bb1a4:	430a 6e6f 656e 7463 6465 7420 3a6f 0020     .Connected to: .
   bb1b4:	616c 6970 742e 6172 736e 7469 6863 6369     lapi.transitchic
   bb1c4:	6761 2e6f 6f63 006d 612f 6970 312f 302e     ago.com./api/1.0
   bb1d4:	742f 7074 736f 7469 6f69 736e 612e 7073     /ttpositions.asp
   bb1e4:	3f78 656b 3d79 3030 6666 3930 3630 6333     x?key=00ff09063c
   bb1f4:	6161 3634 3437 3438 3433 3564 6166 3233     aa46748434d5fa32
   bb204:	6431 3430 6638 7226 3d74 6572 2664 756f     1d048f&rt=red&ou
   bb214:	7074 7475 7954 6570 4a3d 4f53 004e 4536     tputType=JSON.6E
   bb224:	3034 3030 3130 422d 4135 2d33 3346 3339     400001-B5A3-F393
   bb234:	452d 4130 2d39 3545 4530 3432 4344 4143     -E0A9-E50E24DCCA
   bb244:	4539 3600 3445 3030 3030 2d32 3542 3341     9E.6E400002-B5A3
   bb254:	462d 3933 2d33 3045 3941 452d 3035 3245     -F393-E0A9-E50E2
   bb264:	4434 4343 3941 0045 4536 3034 3030 3330     4DCCA9E.6E400003
   bb274:	422d 4135 2d33 3346 3339 452d 4130 2d39     -B5A3-F393-E0A9-
   bb284:	3545 4530 3432 4344 4143 4539 7400 0078     E50E24DCCA9E.tx.
   bb294:	7872 4700 5445 7000 7261 6973 676e 6620     rx.GET.parsing f
   bb2a4:	6961 656c 0064 7463 7461 0074 6f72 7475     ailed.ctatt.rout
   bb2b4:	0065 7274 6961 006e 656e 7478 7453 4e61     e.train.nextStaN
   bb2c4:	006d 7274 7244 6c00 7461 6c00 6e6f 5400     m.trDr.lat.lon.T
   bb2d4:	6172 6e69 2520 3a69 0020 0000               rain %i: ...

000bb2e0 <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   bb2e8:	40b5 000b 40c9 000b 6341 6563 7470 2f00     .@...@..Accept./
   bb2f8:	2f2a 2000 5448 5054 312f 302e 0a0d 6300     */. HTTP/1.0...c
   bb308:	6f6c 6573 4300 6e6f 656e 7463 6f69 006e     lose.Connection.
   bb318:	4f48 5453 4300 6e6f 6574 746e 4c2d 6e65     HOST.Content-Len
   bb328:	7467 0068 4f50 5453 0d00 0d0a 000a 3025     gth.POST......%0
   bb338:	7834 0000                                   4x..

000bb33c <_ZTV10JsonBuffer>:
	...
   bb344:	4d9d 000b 4db9 000b                         .M...M..

000bb34c <_ZTV10JsonParser>:
	...
   bb354:	4dcd 000b 4df1 000b                         .M...M..

000bb35c <_ZTV13JsonReference>:
	...
   bb364:	4d8d 000b 4d8f 000b 7341 6573 7472 6f69     .M...M..Assertio
   bb374:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   bb384:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   bb394:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   bb3a4:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   bb3b4:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   bb3c4:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   bb3d4:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   bb3e4:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   bb3f4:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   bb404:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   bb414:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   bb424:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   bb434:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   bb444:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   bb454:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   bb464:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   bb474:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   bb484:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   bb494:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   bb4a4:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   bb4b4:	6369 002e                                   ic..

000bb4b8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb4c0:	5bdd 000b 5c41 000b 5d27 000b 5c6b 000b     .[..A\..']..k\..
   bb4d0:	5be1 000b                                   .[..

000bb4d4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb4dc:	5bd9 000b 5c4f 000b 5bdb 000b 5c71 000b     .[..O\...[..q\..
   bb4ec:	5c01 000b                                   .\..

000bb4f0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb4f8:	5bd7 000b 5c5d 000b 64e1 000b 5c77 000b     .[..]\...d..w\..
   bb508:	5c21 000b                                   !\..

000bb50c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bb518:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bb52a <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bb52a:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bb53a <_ZN8particle7BleUuid9BASE_UUIDE>:
   bb53a:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000bb54c <_ZTVN5spark13EthernetClassE>:
	...
   bb554:	6f8f 000b 6f85 000b 6f7b 000b 6f71 000b     .o...o..{o..qo..
   bb564:	6f65 000b 6f59 000b 7215 000b 721d 000b     eo..Yo...r...r..
   bb574:	6f4d 000b 6f45 000b 6f3b 000b 6f31 000b     Mo..Eo..;o..1o..
   bb584:	724d 000b                                   Mr..

000bb588 <_ZTV7TwoWire>:
	...
   bb590:	6fad 000b 6ff7 000b 6fcf 000b 6faf 000b     .o...o...o...o..
   bb5a0:	6fd7 000b 6fdf 000b 6fe7 000b 6fef 000b     .o...o...o...o..

000bb5b0 <_ZTV9IPAddress>:
	...
   bb5b8:	70b9 000b 70a9 000b 70ab 000b 7061 0070     .p...p...p..app.

000bb5c8 <_ZTVN5spark12NetworkClassE>:
	...
   bb5d0:	71d5 000b 71df 000b 71e9 000b 71f3 000b     .q...q...q...q..
   bb5e0:	71fd 000b 7209 000b 7215 000b 721d 000b     .q...r...r...r..
   bb5f0:	7225 000b 7231 000b 7239 000b 7243 000b     %r..1r..9r..Cr..
   bb600:	724d 000b 6977 6972 676e 7200 6365 2076     Mr..wiring.recv 
   bb610:	7265 6f72 2072 203d 6425 0000               error = %d..

000bb61c <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb624:	7741 000b 7765 000b 7c97 000b 7773 000b     Aw..ew...|..sw..
   bb634:	7745 000b                                   Ew..

000bb638 <_ZTV9TCPClient>:
	...
   bb640:	77f1 000b 7825 000b 76bd 000b 76d7 000b     .w..%x...v...v..
   bb650:	7b2d 000b 7701 000b 79a3 000b 7735 000b     -{...w...y..5w..
   bb660:	7a35 000b 7875 000b 79d1 000b 7be1 000b     5z..ux...y...{..
   bb670:	7971 000b 7737 000b 76e9 000b 7779 000b     qy..7w...v..yw..
   bb680:	7855 000b 5925 252d 2d6d 6425 2554 3a48     Ux..%Y-%m-%dT%H:
   bb690:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bb6a0 <_ZTV11USARTSerial>:
	...
   bb6a8:	7cb1 000b 7d1d 000b 7cf5 000b 7339 000b     .|...}...|..9s..
   bb6b8:	7cc5 000b 7ce1 000b 7cd3 000b 7cef 000b     .|...|...|...|..
   bb6c8:	7cb3 000b 7cb7 000b                         .|...|..

000bb6d0 <_ZTV9USBSerial>:
	...
   bb6d8:	7d5b 000b 7dc3 000b 7d99 000b 7339 000b     [}...}...}..9s..
   bb6e8:	7d8b 000b 7d5d 000b 7d6d 000b 7dbd 000b     .}..]}..m}...}..
   bb6f8:	7d7d 000b 7d55 000b                         }}..U}..

000bb700 <_ZTVN5spark9WiFiClassE>:
	...
   bb708:	7ebb 000b 7eb1 000b 7ea7 000b 7e5d 000b     .~...~...~..]~..
   bb718:	7e9b 000b 7e8f 000b 7215 000b 721d 000b     .~...~...r...r..
   bb728:	7e83 000b 7e7b 000b 7e71 000b 7e67 000b     .~..{~..q~..g~..
   bb738:	724d 000b                                   Mr..

000bb73c <_ZSt7nothrow>:
	...

000bb73d <_ZTSSt19_Sp_make_shared_tag>:
   bb73d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bb74d:	6572 5f64 6174 0067 0000                     red_tag....

000bb758 <_ZTISt19_Sp_make_shared_tag>:
   bb758:	b798 000b b73d 000b                         ....=...

000bb760 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bb760:	b7f8 000b b76c 000b b81c 000b               ....l.......

000bb76c <_ZTSN10__cxxabiv117__class_type_infoE>:
   bb76c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bb77c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bb78c:	0045 0000                                   E...

000bb790 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bb790:	0000 0000 b760 000b 81cd 000b 81e1 000b     ....`...........
   bb7a0:	8375 000b 8375 000b 824b 000b 818d 000b     u...u...K.......
   bb7b0:	8233 000b 81f5 000b 81bf 000b               3...........

000bb7bc <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bb7bc:	b7f8 000b b7c8 000b b760 000b               ........`...

000bb7c8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bb7c8:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bb7d8:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bb7e8:	666e 456f 0000 0000                         nfoE....

000bb7f0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bb7f0:	0000 0000 b7bc 000b 8275 000b 8289 000b     ........u.......
   bb800:	8375 000b 8375 000b 824b 000b 818d 000b     u...u...K.......
   bb810:	8349 000b 82d5 000b 829d 000b               I...........

000bb81c <_ZTISt9type_info>:
   bb81c:	b798 000b b824 000b                         ....$...

000bb824 <_ZTSSt9type_info>:
   bb824:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bb834:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bb844:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   bb854:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bb864:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bb874:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bb884:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bb894:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   bb8a4:	6e69 7469 0079 6e61 0000 0000               inity.an....

000bb8b0 <fpi.1>:
   bb8b0:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bb8c0:	0000 0000                                   ....

000bb8c4 <fpinan.0>:
   bb8c4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   bb8d4:	0000 0000                                   ....

000bb8d8 <tinytens>:
   bb8d8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bb8e8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bb8f8:	6f43 64ac 0628 1168                         Co.d(.h.

000bb900 <_ctype_>:
   bb900:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bb910:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bb920:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bb930:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bb940:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bb950:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bb960:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bb970:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bb980:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bba00:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bba10:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   bba20:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bba30:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bba40:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bba50:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bba60:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bba70:	632e 0000                                   .c..

000bba74 <_C_numeric_locale>:
   bba74:	b4b6 000b b335 000b 5688 2003 0043 4f50     ....5....V. C.PO
   bba84:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   bba94:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bbaa4:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bbab4:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bbac4:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bbad4:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   bbae4:	0000 0000                                   ....

000bbae8 <__mprec_bigtens>:
   bbae8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bbaf8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bbb08:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bbb10 <__mprec_tens>:
   bbb10:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bbb20:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bbb30:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bbb40:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bbb50:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bbb60:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bbb70:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bbb80:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bbb90:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bbba0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bbbb0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bbbc0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bbbd0:	9db4 79d9 7843 44ea                         ...yCx.D

000bbbd8 <p05.0>:
   bbbd8:	0005 0000 0019 0000 007d 0000               ........}...

000bbbe4 <link_const_variable_data_end>:
   bbbe4:	000b4645 	.word	0x000b4645
   bbbe8:	000b5645 	.word	0x000b5645
   bbbec:	000b6f21 	.word	0x000b6f21
   bbbf0:	000b6f99 	.word	0x000b6f99
   bbbf4:	000b71c5 	.word	0x000b71c5
   bbbf8:	000b7325 	.word	0x000b7325
   bbbfc:	000b7461 	.word	0x000b7461
   bbc00:	000b7699 	.word	0x000b7699
   bbc04:	000b7c9d 	.word	0x000b7c9d
   bbc08:	000b7ec5 	.word	0x000b7ec5

000bbc0c <link_constructors_end>:
   bbc0c:	00000000 	.word	0x00000000
