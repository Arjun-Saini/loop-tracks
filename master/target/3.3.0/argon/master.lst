
/Users/sainihome/Documents/GitHub/loop-tracks/master/target/3.3.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a4a0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000be4c0  000be4c0  0000e4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000be4e4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  200352c8  000be4e8  000152c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00009330  200354c0  200354c0  000254c0  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000be6e0  000be6e0  0001e6e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000be708  000be708  0001e708  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00145c6f  00000000  00000000  0001e70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00011ee3  00000000  00000000  0016437b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004ab0a  00000000  00000000  0017625e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003098  00000000  00000000  001c0d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d3f0  00000000  00000000  001c3e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034efe  00000000  00000000  001d11f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004272f  00000000  00000000  002060ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015685e  00000000  00000000  0024881d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a7f0  00000000  00000000  0039f07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 fb07 	bl	bb644 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 fb29 	bl	bb694 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	200352c8 	.word	0x200352c8
   b404c:	000be4e8 	.word	0x000be4e8
   b4050:	200354c0 	.word	0x200354c0
   b4054:	200354c0 	.word	0x200354c0
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f006 fa6d 	bl	ba540 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000be494 	.word	0x000be494
   b4080:	000be4b8 	.word	0x000be4b8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f002 b952 	b.w	b632c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f002 fab9 	bl	b6600 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f006 ba0d 	b.w	ba4b0 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 bff7 	b.w	b8088 <malloc>

000b409a <_Znaj>:
   b409a:	f003 bff5 	b.w	b8088 <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f003 bffb 	b.w	b8098 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f003 bff9 	b.w	b8098 <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40b8:	b510      	push	{r4, lr}
   b40ba:	4b03      	ldr	r3, [pc, #12]	; (b40c8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   b40bc:	6003      	str	r3, [r0, #0]
   b40be:	4604      	mov	r4, r0
   b40c0:	f003 f90a 	bl	b72d8 <_ZN10JsonParserD1Ev>
   b40c4:	4620      	mov	r0, r4
   b40c6:	bd10      	pop	{r4, pc}
   b40c8:	000bda74 	.word	0x000bda74

000b40cc <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   b40cc:	b510      	push	{r4, lr}
   b40ce:	4604      	mov	r4, r0
   b40d0:	f7ff fff2 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f246 51bc 	movw	r1, #26044	; 0x65bc
   b40da:	f7ff ffe2 	bl	b40a2 <_ZdlPvj>
   b40de:	4620      	mov	r0, r4
   b40e0:	bd10      	pop	{r4, pc}
	...

000b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   b40e4:	b508      	push	{r3, lr}
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b40e6:	4603      	mov	r3, r0
   b40e8:	b150      	cbz	r0, b4100 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x1c>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
	if (__n > this->_M_max_size())
   b40ea:	4a06      	ldr	r2, [pc, #24]	; (b4104 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x20>)
   b40ec:	4290      	cmp	r0, r2
   b40ee:	d901      	bls.n	b40f4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b40f0:	f006 fac0 	bl	ba674 <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b40f4:	200c      	movs	r0, #12
   b40f6:	4358      	muls	r0, r3
      }
   b40f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b40fc:	f7ff bfcb 	b.w	b4096 <_Znwj>
   b4100:	bd08      	pop	{r3, pc}
   b4102:	bf00      	nop
   b4104:	0aaaaaaa 	.word	0x0aaaaaaa

000b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>:

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4108:	f100 0308 	add.w	r3, r0, #8
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b410c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b410e:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b4110:	6003      	str	r3, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b4112:	460d      	mov	r5, r1
   b4114:	b1d9      	cbz	r1, b414e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x46>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b4116:	4608      	mov	r0, r1
   b4118:	f007 fb04 	bl	bb724 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b411c:	280f      	cmp	r0, #15
   b411e:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4122:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4124:	d907      	bls.n	b4136 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b4126:	2200      	movs	r2, #0
   b4128:	a901      	add	r1, sp, #4
   b412a:	4620      	mov	r0, r4
   b412c:	f006 fab8 	bl	ba6a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4130:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4132:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4134:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4136:	4632      	mov	r2, r6
   b4138:	4629      	mov	r1, r5
   b413a:	6820      	ldr	r0, [r4, #0]
   b413c:	f006 faeb 	bl	ba716 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b4140:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b4142:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4144:	6063      	str	r3, [r4, #4]
   b4146:	2100      	movs	r1, #0
   b4148:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b414a:	b002      	add	sp, #8
   b414c:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b414e:	4801      	ldr	r0, [pc, #4]	; (b4154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x4c>)
   b4150:	f006 fa93 	bl	ba67a <_ZSt19__throw_logic_errorPKc>
   b4154:	000bd7a4 	.word	0x000bd7a4

000b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4158:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b415a:	4603      	mov	r3, r0
   b415c:	b150      	cbz	r0, b4174 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b415e:	4a06      	ldr	r2, [pc, #24]	; (b4178 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x20>)
   b4160:	4290      	cmp	r0, r2
   b4162:	d901      	bls.n	b4168 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4164:	f006 fa86 	bl	ba674 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4168:	206c      	movs	r0, #108	; 0x6c
   b416a:	4358      	muls	r0, r3
      }
   b416c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4170:	f7ff bf91 	b.w	b4096 <_Znwj>
   b4174:	bd08      	pop	{r3, pc}
   b4176:	bf00      	nop
   b4178:	012f684b 	.word	0x012f684b

000b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b417c:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b417e:	4603      	mov	r3, r0
   b4180:	b150      	cbz	r0, b4198 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b4182:	4a06      	ldr	r2, [pc, #24]	; (b419c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x20>)
   b4184:	4290      	cmp	r0, r2
   b4186:	d901      	bls.n	b418c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4188:	f006 fa74 	bl	ba674 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b418c:	2018      	movs	r0, #24
   b418e:	4358      	muls	r0, r3
      }
   b4190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4194:	f7ff bf7f 	b.w	b4096 <_Znwj>
   b4198:	bd08      	pop	{r3, pc}
   b419a:	bf00      	nop
   b419c:	05555555 	.word	0x05555555

000b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41a0:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41a2:	b148      	cbz	r0, b41b8 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41a4:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b41a8:	d301      	bcc.n	b41ae <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41aa:	f006 fa63 	bl	ba674 <_ZSt17__throw_bad_allocv>
      }
   b41ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41b2:	0080      	lsls	r0, r0, #2
   b41b4:	f7ff bf6f 	b.w	b4096 <_Znwj>
   b41b8:	bd08      	pop	{r3, pc}

000b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41ba:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41bc:	b148      	cbz	r0, b41d2 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41be:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   b41c2:	d301      	bcc.n	b41c8 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41c4:	f006 fa56 	bl	ba674 <_ZSt17__throw_bad_allocv>
      }
   b41c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41cc:	00c0      	lsls	r0, r0, #3
   b41ce:	f7ff bf62 	b.w	b4096 <_Znwj>
   b41d2:	bd08      	pop	{r3, pc}

000b41d4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b41d4:	b570      	push	{r4, r5, r6, lr}
   b41d6:	4606      	mov	r6, r0
   b41d8:	460c      	mov	r4, r1
{
    if (base == 0) {
   b41da:	4615      	mov	r5, r2
   b41dc:	b92a      	cbnz	r2, b41ea <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b41de:	6803      	ldr	r3, [r0, #0]
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
   b41e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(n);
   b41e4:	689b      	ldr	r3, [r3, #8]
   b41e6:	b2c9      	uxtb	r1, r1
   b41e8:	4718      	bx	r3
        if (n < 0 && base == 10) {
   b41ea:	2900      	cmp	r1, #0
   b41ec:	da0b      	bge.n	b4206 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
   b41ee:	2a0a      	cmp	r2, #10
   b41f0:	d109      	bne.n	b4206 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
            t = print('-');
   b41f2:	212d      	movs	r1, #45	; 0x2d
   b41f4:	f005 fb06 	bl	b9804 <_ZN5Print5printEc>
            val = -n;
   b41f8:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b41fa:	b2ea      	uxtb	r2, r5
   b41fc:	4630      	mov	r0, r6
}
   b41fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b4202:	f005 bb18 	b.w	b9836 <_ZN5Print11printNumberEmh>
            val = n;
   b4206:	4621      	mov	r1, r4
   b4208:	e7f7      	b.n	b41fa <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x26>

000b420a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b420a:	b510      	push	{r4, lr}
   b420c:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b420e:	f7ff ffe1 	bl	b41d4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
        n += println();
   b4212:	4620      	mov	r0, r4
    }
   b4214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b4218:	f005 baf7 	b.w	b980a <_ZN5Print7printlnEv>

000b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
   b421c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b421e:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b4222:	6003      	str	r3, [r0, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b4224:	e9d1 5300 	ldrd	r5, r3, [r1]
      basic_string(const basic_string& __str)
   b4228:	4604      	mov	r4, r0
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b422a:	18ee      	adds	r6, r5, r3
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   b422c:	b91d      	cbnz	r5, b4236 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
   b422e:	b116      	cbz	r6, b4236 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
	  std::__throw_logic_error(__N("basic_string::"
   b4230:	480c      	ldr	r0, [pc, #48]	; (b4264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x48>)
   b4232:	f006 fa22 	bl	ba67a <_ZSt19__throw_logic_errorPKc>
	if (__dnew > size_type(_S_local_capacity))
   b4236:	2b0f      	cmp	r3, #15
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4238:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b423a:	d907      	bls.n	b424c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x30>
	    _M_data(_M_create(__dnew, size_type(0)));
   b423c:	2200      	movs	r2, #0
   b423e:	a901      	add	r1, sp, #4
   b4240:	4620      	mov	r0, r4
   b4242:	f006 fa2d 	bl	ba6a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4246:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4248:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b424a:	60a3      	str	r3, [r4, #8]
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b424c:	4632      	mov	r2, r6
   b424e:	4629      	mov	r1, r5
   b4250:	6820      	ldr	r0, [r4, #0]
   b4252:	f006 fa5b 	bl	ba70c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
   b4256:	9b01      	ldr	r3, [sp, #4]
   b4258:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b425a:	6063      	str	r3, [r4, #4]
   b425c:	2100      	movs	r1, #0
   b425e:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b4260:	b002      	add	sp, #8
   b4262:	bd70      	pop	{r4, r5, r6, pc}
   b4264:	000bd7a4 	.word	0x000bd7a4

000b4268 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4268:	6803      	ldr	r3, [r0, #0]
   b426a:	b2c9      	uxtb	r1, r1
   b426c:	689b      	ldr	r3, [r3, #8]
   b426e:	4718      	bx	r3

000b4270 <_ZN5Print5writeEPKc.isra.0>:
    size_t write(const char *str) {
   b4270:	b513      	push	{r0, r1, r4, lr}
   b4272:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b4274:	b161      	cbz	r1, b4290 <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4276:	4608      	mov	r0, r1
   b4278:	9101      	str	r1, [sp, #4]
   b427a:	f007 fa53 	bl	bb724 <strlen>
   b427e:	6823      	ldr	r3, [r4, #0]
   b4280:	9901      	ldr	r1, [sp, #4]
   b4282:	68db      	ldr	r3, [r3, #12]
   b4284:	4602      	mov	r2, r0
   b4286:	4620      	mov	r0, r4
    }
   b4288:	b002      	add	sp, #8
   b428a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b428e:	4718      	bx	r3
    }
   b4290:	b002      	add	sp, #8
   b4292:	bd10      	pop	{r4, pc}

000b4294 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   b4294:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b4296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4298:	4604      	mov	r4, r0
   b429a:	460d      	mov	r5, r1
      if (&__x != this)
   b429c:	d025      	beq.n	b42ea <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x56>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b429e:	e9d1 7100 	ldrd	r7, r1, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   b42a2:	6800      	ldr	r0, [r0, #0]
   b42a4:	68a3      	ldr	r3, [r4, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b42a6:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b42a8:	1a1b      	subs	r3, r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   b42aa:	429e      	cmp	r6, r3
   b42ac:	d91e      	bls.n	b42ec <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   b42ae:	10f0      	asrs	r0, r6, #3
   b42b0:	f7ff ff83 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
   b42b4:	2300      	movs	r3, #0
   b42b6:	4605      	mov	r5, r0
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   b42b8:	429e      	cmp	r6, r3
   b42ba:	d00a      	beq.n	b42d2 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x3e>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b42bc:	18ea      	adds	r2, r5, r3
   b42be:	bf1c      	itt	ne
   b42c0:	18f9      	addne	r1, r7, r3
   b42c2:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b42c6:	f103 0308 	add.w	r3, r3, #8
   b42ca:	bf18      	it	ne
   b42cc:	e9c2 0100 	strdne	r0, r1, [r2]
   b42d0:	e7f2      	b.n	b42b8 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x24>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b42d2:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b42d4:	b118      	cbz	r0, b42de <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x4a>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
   b42d6:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b42d8:	1a09      	subs	r1, r1, r0
   b42da:	f7ff fee2 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b42de:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b42e0:	4435      	add	r5, r6
   b42e2:	60a5      	str	r5, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b42e4:	6823      	ldr	r3, [r4, #0]
   b42e6:	4433      	add	r3, r6
   b42e8:	6063      	str	r3, [r4, #4]
	}
      return *this;
    }
   b42ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b42ec:	6862      	ldr	r2, [r4, #4]
   b42ee:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   b42f0:	4296      	cmp	r6, r2
   b42f2:	d806      	bhi.n	b4302 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x6e>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b42f4:	42b9      	cmp	r1, r7
   b42f6:	d0f5      	beq.n	b42e4 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b42f8:	4632      	mov	r2, r6
   b42fa:	4639      	mov	r1, r7
   b42fc:	f007 f9b0 	bl	bb660 <memmove>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4300:	e7f0      	b.n	b42e4 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	  if (_Num)
   b4302:	b112      	cbz	r2, b430a <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x76>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4304:	4639      	mov	r1, r7
   b4306:	f007 f9ab 	bl	bb660 <memmove>
   b430a:	e9d4 2700 	ldrd	r2, r7, [r4]
   b430e:	1abb      	subs	r3, r7, r2
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4310:	682a      	ldr	r2, [r5, #0]
   b4312:	686d      	ldr	r5, [r5, #4]
   b4314:	441a      	add	r2, r3
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b4316:	1aad      	subs	r5, r5, r2
					  __x._M_impl._M_finish,
   b4318:	2300      	movs	r3, #0
	      for (; __first != __last; ++__first, (void)++__cur)
   b431a:	429d      	cmp	r5, r3
   b431c:	d0e2      	beq.n	b42e4 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
   b431e:	eb17 0c03 	adds.w	ip, r7, r3
   b4322:	bf1c      	itt	ne
   b4324:	18d1      	addne	r1, r2, r3
   b4326:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b432a:	f103 0308 	add.w	r3, r3, #8
   b432e:	bf18      	it	ne
   b4330:	e9cc 0100 	strdne	r0, r1, [ip]
   b4334:	e7f1      	b.n	b431a <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x86>
	...

000b4338 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>:
      if (&__x != this)
   b4338:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b433a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b433e:	4604      	mov	r4, r0
   b4340:	468a      	mov	sl, r1
      if (&__x != this)
   b4342:	d036      	beq.n	b43b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7a>
   b4344:	e9d1 5b00 	ldrd	r5, fp, [r1]
			 - this->_M_impl._M_start); }
   b4348:	f8d0 9000 	ldr.w	r9, [r0]
   b434c:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b434e:	4a39      	ldr	r2, [pc, #228]	; (b4434 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xfc>)
   b4350:	ebab 0705 	sub.w	r7, fp, r5
			 - this->_M_impl._M_start); }
   b4354:	eba3 0309 	sub.w	r3, r3, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4358:	ea4f 08e7 	mov.w	r8, r7, asr #3
	  if (__xlen > capacity())
   b435c:	42bb      	cmp	r3, r7
   b435e:	fb02 f808 	mul.w	r8, r2, r8
   b4362:	d228      	bcs.n	b43b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7e>
	  pointer __result = this->_M_allocate(__n);
   b4364:	4640      	mov	r0, r8
   b4366:	f7ff ff09 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
   b436a:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b436c:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b436e:	45ab      	cmp	fp, r5
   b4370:	d00a      	beq.n	b4388 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x50>
   b4372:	f1b8 0f00 	cmp.w	r8, #0
   b4376:	d003      	beq.n	b4380 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x48>
   b4378:	4629      	mov	r1, r5
   b437a:	4640      	mov	r0, r8
   b437c:	f7ff ff4e 	bl	b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4380:	f108 0818 	add.w	r8, r8, #24
   b4384:	3518      	adds	r5, #24
   b4386:	e7f2      	b.n	b436e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x36>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4388:	e9d4 5800 	ldrd	r5, r8, [r4]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b438c:	45a8      	cmp	r8, r5
   b438e:	d004      	beq.n	b439a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x62>
      { _M_dispose(); }
   b4390:	4628      	mov	r0, r5
   b4392:	f006 f9a7 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4396:	3518      	adds	r5, #24
   b4398:	e7f8      	b.n	b438c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x54>
	      _M_deallocate(this->_M_impl._M_start,
   b439a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b439c:	b118      	cbz	r0, b43a6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x6e>
			    - this->_M_impl._M_start);
   b439e:	68a1      	ldr	r1, [r4, #8]
   b43a0:	1a09      	subs	r1, r1, r0
   b43a2:	f7ff fe7e 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b43a6:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b43a8:	443e      	add	r6, r7
   b43aa:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b43ac:	6823      	ldr	r3, [r4, #0]
   b43ae:	443b      	add	r3, r7
   b43b0:	6063      	str	r3, [r4, #4]
    }
   b43b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b43b6:	6846      	ldr	r6, [r0, #4]
   b43b8:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b43bc:	42b7      	cmp	r7, r6
   b43be:	d819      	bhi.n	b43f4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xbc>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b43c0:	4646      	mov	r6, r8
   b43c2:	46ca      	mov	sl, r9
   b43c4:	2e00      	cmp	r6, #0
   b43c6:	dd08      	ble.n	b43da <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xa2>
		  }
	      }
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
	  }
#endif
	this->_M_assign(__str);
   b43c8:	4629      	mov	r1, r5
   b43ca:	4650      	mov	r0, sl
   b43cc:	f006 f9a8 	bl	ba720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b43d0:	3518      	adds	r5, #24
	      ++__result;
   b43d2:	f10a 0a18 	add.w	sl, sl, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b43d6:	3e01      	subs	r6, #1
   b43d8:	e7f4      	b.n	b43c4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x8c>
   b43da:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   b43de:	2518      	movs	r5, #24
      : _M_current(__i) { }
   b43e0:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b43e2:	fb05 9508 	mla	r5, r5, r8, r9
	  for (; __first != __last; ++__first)
   b43e6:	42ae      	cmp	r6, r5
   b43e8:	d0e0      	beq.n	b43ac <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
      { _M_dispose(); }
   b43ea:	4628      	mov	r0, r5
   b43ec:	f006 f97a 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b43f0:	3518      	adds	r5, #24
      {
	++_M_current;
	return *this;
   b43f2:	e7f8      	b.n	b43e6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xae>
   b43f4:	10f6      	asrs	r6, r6, #3
   b43f6:	4356      	muls	r6, r2
   b43f8:	2e00      	cmp	r6, #0
   b43fa:	dd08      	ble.n	b440e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xd6>
	this->_M_assign(__str);
   b43fc:	4629      	mov	r1, r5
   b43fe:	4648      	mov	r0, r9
   b4400:	f006 f98e 	bl	ba720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b4404:	3518      	adds	r5, #24
	      ++__result;
   b4406:	f109 0918 	add.w	r9, r9, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b440a:	3e01      	subs	r6, #1
   b440c:	e7f4      	b.n	b43f8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xc0>
   b440e:	e9d4 5600 	ldrd	r5, r6, [r4]
   b4412:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4414:	f8da 5000 	ldr.w	r5, [sl]
					  __x._M_impl._M_finish,
   b4418:	f8da 8004 	ldr.w	r8, [sl, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b441c:	440d      	add	r5, r1
   b441e:	45a8      	cmp	r8, r5
   b4420:	d0c4      	beq.n	b43ac <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4422:	b11e      	cbz	r6, b442c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xf4>
   b4424:	4629      	mov	r1, r5
   b4426:	4630      	mov	r0, r6
   b4428:	f7ff fef8 	bl	b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b442c:	3518      	adds	r5, #24
   b442e:	3618      	adds	r6, #24
   b4430:	e7f5      	b.n	b441e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xe6>
   b4432:	bf00      	nop
   b4434:	aaaaaaab 	.word	0xaaaaaaab

000b4438 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4438:	b40e      	push	{r1, r2, r3}
   b443a:	b503      	push	{r0, r1, lr}
   b443c:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b443e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4440:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4444:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4446:	f005 fa14 	bl	b9872 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b444a:	b002      	add	sp, #8
   b444c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4450:	b003      	add	sp, #12
   b4452:	4770      	bx	lr

000b4454 <_Z16randomizeAddressv>:
    Serial.println();
  }
}

//clears up conflicts with multiple i2c slaves having the same address
void randomizeAddress(){
   b4454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return *(this->_M_impl._M_start + __n);
   b4458:	f8df 82b0 	ldr.w	r8, [pc, #688]	; b470c <_Z16randomizeAddressv+0x2b8>
  while(slaveCount != slaveCountExpected[cityIndex]){
   b445c:	4da1      	ldr	r5, [pc, #644]	; (b46e4 <_Z16randomizeAddressv+0x290>)
void randomizeAddress(){
   b445e:	b08d      	sub	sp, #52	; 0x34
  while(slaveCount != slaveCountExpected[cityIndex]){
   b4460:	4ba1      	ldr	r3, [pc, #644]	; (b46e8 <_Z16randomizeAddressv+0x294>)
   b4462:	681a      	ldr	r2, [r3, #0]
   b4464:	f8d8 3000 	ldr.w	r3, [r8]
   b4468:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   b446c:	682b      	ldr	r3, [r5, #0]
   b446e:	429a      	cmp	r2, r3
   b4470:	f000 80ff 	beq.w	b4672 <_Z16randomizeAddressv+0x21e>
    slaveCount = 0;
   b4474:	2300      	movs	r3, #0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4476:	f8df 9298 	ldr.w	r9, [pc, #664]	; b4710 <_Z16randomizeAddressv+0x2bc>
   b447a:	f8df a298 	ldr.w	sl, [pc, #664]	; b4714 <_Z16randomizeAddressv+0x2c0>
      if(Wire.available() > 0){
        Serial.println("transmission recieved from: " + String(i));

        slaveCount++;

        String inputBuffer = "";
   b447e:	4f9b      	ldr	r7, [pc, #620]	; (b46ec <_Z16randomizeAddressv+0x298>)
    slaveCount = 0;
   b4480:	602b      	str	r3, [r5, #0]
    for(int i = 8; i <= 119; i++){
   b4482:	2408      	movs	r4, #8
      Serial.println("\nrequest code 1, address: " + String(i));
   b4484:	f005 ff42 	bl	ba30c <_Z16_fetch_usbserialv>
   b4488:	4649      	mov	r1, r9
   b448a:	4606      	mov	r6, r0
   b448c:	a808      	add	r0, sp, #32
   b448e:	f005 fa72 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
   b4492:	220a      	movs	r2, #10
   b4494:	4621      	mov	r1, r4
   b4496:	a804      	add	r0, sp, #16
   b4498:	f005 fac7 	bl	b9a2a <_ZN6StringC1Eih>
   b449c:	a904      	add	r1, sp, #16
   b449e:	a808      	add	r0, sp, #32
   b44a0:	f005 fafe 	bl	b9aa0 <_ZplRK15StringSumHelperRK6String>
   b44a4:	6801      	ldr	r1, [r0, #0]
   b44a6:	4630      	mov	r0, r6
   b44a8:	f005 f9bb 	bl	b9822 <_ZN5Print7printlnEPKc>
   b44ac:	a804      	add	r0, sp, #16
   b44ae:	f005 fa17 	bl	b98e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b44b2:	a808      	add	r0, sp, #32
   b44b4:	f005 fa14 	bl	b98e0 <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   b44b8:	f006 f876 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b44bc:	4621      	mov	r1, r4
   b44be:	f005 f823 	bl	b9508 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   b44c2:	f006 f871 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b44c6:	2131      	movs	r1, #49	; 0x31
   b44c8:	f7ff fece 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b44cc:	fa5f fb84 	uxtb.w	fp, r4
   b44d0:	f006 f86a 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b44d4:	f005 f81f 	bl	b9516 <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   b44d8:	f006 f866 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b44dc:	2218      	movs	r2, #24
   b44de:	4659      	mov	r1, fp
   b44e0:	f005 f80b 	bl	b94fa <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   b44e4:	f006 f860 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b44e8:	6803      	ldr	r3, [r0, #0]
   b44ea:	691b      	ldr	r3, [r3, #16]
   b44ec:	4798      	blx	r3
   b44ee:	2800      	cmp	r0, #0
   b44f0:	f340 80ba 	ble.w	b4668 <_Z16randomizeAddressv+0x214>
        Serial.println("transmission recieved from: " + String(i));
   b44f4:	f005 ff0a 	bl	ba30c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b44f8:	4651      	mov	r1, sl
   b44fa:	4606      	mov	r6, r0
   b44fc:	a808      	add	r0, sp, #32
   b44fe:	f005 fa3a 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
   b4502:	220a      	movs	r2, #10
   b4504:	4621      	mov	r1, r4
   b4506:	a804      	add	r0, sp, #16
   b4508:	f005 fa8f 	bl	b9a2a <_ZN6StringC1Eih>
   b450c:	a904      	add	r1, sp, #16
   b450e:	a808      	add	r0, sp, #32
   b4510:	f005 fac6 	bl	b9aa0 <_ZplRK15StringSumHelperRK6String>
   b4514:	6801      	ldr	r1, [r0, #0]
   b4516:	4630      	mov	r0, r6
   b4518:	f005 f983 	bl	b9822 <_ZN5Print7printlnEPKc>
   b451c:	a804      	add	r0, sp, #16
   b451e:	f005 f9df 	bl	b98e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4522:	a808      	add	r0, sp, #32
   b4524:	f005 f9dc 	bl	b98e0 <_ZN6StringD1Ev>
        slaveCount++;
   b4528:	682b      	ldr	r3, [r5, #0]
        String inputBuffer = "";
   b452a:	4639      	mov	r1, r7
        slaveCount++;
   b452c:	3301      	adds	r3, #1
        String inputBuffer = "";
   b452e:	4668      	mov	r0, sp
        slaveCount++;
   b4530:	602b      	str	r3, [r5, #0]
        String inputBuffer = "";
   b4532:	f005 fa20 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
   b4536:	2618      	movs	r6, #24
        char c;
        for(int j = 0; j < 24; j++){
          c = Wire.read();
   b4538:	f006 f836 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b453c:	6803      	ldr	r3, [r0, #0]
   b453e:	695b      	ldr	r3, [r3, #20]
   b4540:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b4542:	b2c1      	uxtb	r1, r0
   b4544:	4668      	mov	r0, sp
   b4546:	f005 fa9e 	bl	b9a86 <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   b454a:	3e01      	subs	r6, #1
   b454c:	d1f4      	bne.n	b4538 <_Z16randomizeAddressv+0xe4>
          inputBuffer += c;
        }
        Wire.beginTransmission(i);
   b454e:	f006 f82b 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b4552:	4621      	mov	r1, r4
   b4554:	f004 ffd8 	bl	b9508 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   b4558:	f006 f826 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b455c:	9900      	ldr	r1, [sp, #0]
   b455e:	f7ff fe87 	bl	b4270 <_ZN5Print5writeEPKc.isra.0>
        Serial.println("device id: " + inputBuffer);
   b4562:	f005 fed3 	bl	ba30c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4566:	4962      	ldr	r1, [pc, #392]	; (b46f0 <_Z16randomizeAddressv+0x29c>)
   b4568:	4606      	mov	r6, r0
   b456a:	a808      	add	r0, sp, #32
   b456c:	f005 fa03 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
   b4570:	4669      	mov	r1, sp
   b4572:	a808      	add	r0, sp, #32
   b4574:	f005 fa94 	bl	b9aa0 <_ZplRK15StringSumHelperRK6String>
   b4578:	6801      	ldr	r1, [r0, #0]
   b457a:	4630      	mov	r0, r6
   b457c:	f005 f951 	bl	b9822 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4580:	a808      	add	r0, sp, #32
   b4582:	f005 f9ad 	bl	b98e0 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b4586:	f006 f80f 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b458a:	f004 ffc4 	bl	b9516 <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   b458e:	f005 febd 	bl	ba30c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4592:	4958      	ldr	r1, [pc, #352]	; (b46f4 <_Z16randomizeAddressv+0x2a0>)
   b4594:	4606      	mov	r6, r0
   b4596:	a808      	add	r0, sp, #32
   b4598:	f005 f9ed 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
   b459c:	220a      	movs	r2, #10
   b459e:	4621      	mov	r1, r4
   b45a0:	a804      	add	r0, sp, #16
   b45a2:	f005 fa42 	bl	b9a2a <_ZN6StringC1Eih>
   b45a6:	a904      	add	r1, sp, #16
   b45a8:	a808      	add	r0, sp, #32
   b45aa:	f005 fa79 	bl	b9aa0 <_ZplRK15StringSumHelperRK6String>
   b45ae:	6801      	ldr	r1, [r0, #0]
   b45b0:	4630      	mov	r0, r6
   b45b2:	f005 f936 	bl	b9822 <_ZN5Print7printlnEPKc>
   b45b6:	a804      	add	r0, sp, #16
   b45b8:	f005 f992 	bl	b98e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45bc:	a808      	add	r0, sp, #32
   b45be:	f005 f98f 	bl	b98e0 <_ZN6StringD1Ev>

        Wire.beginTransmission(i);
   b45c2:	f005 fff1 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b45c6:	4621      	mov	r1, r4
   b45c8:	f004 ff9e 	bl	b9508 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   b45cc:	f005 ffec 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b45d0:	2132      	movs	r1, #50	; 0x32
   b45d2:	f7ff fe49 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b45d6:	f005 ffe7 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b45da:	f004 ff9c 	bl	b9516 <_ZN7TwoWire15endTransmissionEv>

        Serial.println("request code 2, address: " + String(i));
   b45de:	f005 fe95 	bl	ba30c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b45e2:	4945      	ldr	r1, [pc, #276]	; (b46f8 <_Z16randomizeAddressv+0x2a4>)
   b45e4:	4606      	mov	r6, r0
   b45e6:	a808      	add	r0, sp, #32
   b45e8:	f005 f9c5 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
   b45ec:	220a      	movs	r2, #10
   b45ee:	4621      	mov	r1, r4
   b45f0:	a804      	add	r0, sp, #16
   b45f2:	f005 fa1a 	bl	b9a2a <_ZN6StringC1Eih>
   b45f6:	a904      	add	r1, sp, #16
   b45f8:	a808      	add	r0, sp, #32
   b45fa:	f005 fa51 	bl	b9aa0 <_ZplRK15StringSumHelperRK6String>
   b45fe:	6801      	ldr	r1, [r0, #0]
   b4600:	4630      	mov	r0, r6
   b4602:	f005 f90e 	bl	b9822 <_ZN5Print7printlnEPKc>
   b4606:	a804      	add	r0, sp, #16
   b4608:	f005 f96a 	bl	b98e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b460c:	a808      	add	r0, sp, #32
   b460e:	f005 f967 	bl	b98e0 <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   b4612:	f005 ffc9 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b4616:	2204      	movs	r2, #4
   b4618:	4659      	mov	r1, fp
   b461a:	f004 ff6e 	bl	b94fa <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   b461e:	4639      	mov	r1, r7
   b4620:	4668      	mov	r0, sp
   b4622:	f005 f9f0 	bl	b9a06 <_ZN6StringaSEPKc>
   b4626:	2604      	movs	r6, #4
        for(int j = 0; j < 4; j++){
          inputBuffer += (char)Wire.read();
   b4628:	f005 ffbe 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b462c:	6803      	ldr	r3, [r0, #0]
   b462e:	695b      	ldr	r3, [r3, #20]
   b4630:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b4632:	b2c1      	uxtb	r1, r0
   b4634:	4668      	mov	r0, sp
   b4636:	f005 fa26 	bl	b9a86 <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   b463a:	3e01      	subs	r6, #1
   b463c:	d1f4      	bne.n	b4628 <_Z16randomizeAddressv+0x1d4>
        }
        
        Serial.println("conflict verification: " + inputBuffer);
   b463e:	f005 fe65 	bl	ba30c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4642:	492e      	ldr	r1, [pc, #184]	; (b46fc <_Z16randomizeAddressv+0x2a8>)
   b4644:	4606      	mov	r6, r0
   b4646:	a808      	add	r0, sp, #32
   b4648:	f005 f995 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
   b464c:	4669      	mov	r1, sp
   b464e:	a808      	add	r0, sp, #32
   b4650:	f005 fa26 	bl	b9aa0 <_ZplRK15StringSumHelperRK6String>
   b4654:	6801      	ldr	r1, [r0, #0]
   b4656:	4630      	mov	r0, r6
   b4658:	f005 f8e3 	bl	b9822 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b465c:	a808      	add	r0, sp, #32
   b465e:	f005 f93f 	bl	b98e0 <_ZN6StringD1Ev>
        String inputBuffer = "";
   b4662:	4668      	mov	r0, sp
   b4664:	f005 f93c 	bl	b98e0 <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   b4668:	3401      	adds	r4, #1
   b466a:	2c78      	cmp	r4, #120	; 0x78
   b466c:	f47f af0a 	bne.w	b4484 <_Z16randomizeAddressv+0x30>
   b4670:	e6f6      	b.n	b4460 <_Z16randomizeAddressv+0xc>
      }
    }
  }

  Serial.println("\nConnected to: ");
   b4672:	f005 fe4b 	bl	ba30c <_Z16_fetch_usbserialv>
   b4676:	4922      	ldr	r1, [pc, #136]	; (b4700 <_Z16randomizeAddressv+0x2ac>)
    Wire.endTransmission();

    Wire.requestFrom(i, 24);
    if(Wire.available() > 0){
      Serial.print(i);
      Serial.print(", ");
   b4678:	4e22      	ldr	r6, [pc, #136]	; (b4704 <_Z16randomizeAddressv+0x2b0>)
   b467a:	4f23      	ldr	r7, [pc, #140]	; (b4708 <_Z16randomizeAddressv+0x2b4>)
  Serial.println("\nConnected to: ");
   b467c:	f005 f8d1 	bl	b9822 <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   b4680:	2408      	movs	r4, #8
  int count = 0;
   b4682:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   b4684:	f005 ff90 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b4688:	4621      	mov	r1, r4
   b468a:	f004 ff3d 	bl	b9508 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   b468e:	f005 ff8b 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b4692:	2131      	movs	r1, #49	; 0x31
   b4694:	f7ff fde8 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b4698:	f005 ff86 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b469c:	f004 ff3b 	bl	b9516 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   b46a0:	f005 ff82 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b46a4:	2218      	movs	r2, #24
   b46a6:	b2e1      	uxtb	r1, r4
   b46a8:	f004 ff27 	bl	b94fa <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   b46ac:	f005 ff7c 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b46b0:	6803      	ldr	r3, [r0, #0]
   b46b2:	691b      	ldr	r3, [r3, #16]
   b46b4:	4798      	blx	r3
   b46b6:	2800      	cmp	r0, #0
   b46b8:	dd0e      	ble.n	b46d8 <_Z16randomizeAddressv+0x284>
      Serial.print(i);
   b46ba:	f005 fe27 	bl	ba30c <_Z16_fetch_usbserialv>
   b46be:	220a      	movs	r2, #10
   b46c0:	4621      	mov	r1, r4
   b46c2:	f7ff fd87 	bl	b41d4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
      Serial.print(", ");
   b46c6:	f005 fe21 	bl	ba30c <_Z16_fetch_usbserialv>
   b46ca:	4631      	mov	r1, r6
   b46cc:	f005 f896 	bl	b97fc <_ZN5Print5printEPKc>

      addressArr[count++] = i;
   b46d0:	683b      	ldr	r3, [r7, #0]
   b46d2:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
   b46d6:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   b46d8:	3401      	adds	r4, #1
   b46da:	2c78      	cmp	r4, #120	; 0x78
   b46dc:	d1d2      	bne.n	b4684 <_Z16randomizeAddressv+0x230>
    }
  }
}
   b46de:	b00d      	add	sp, #52	; 0x34
   b46e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b46e4:	2003e69c 	.word	0x2003e69c
   b46e8:	200352c8 	.word	0x200352c8
   b46ec:	000bdbca 	.word	0x000bdbca
   b46f0:	000bd806 	.word	0x000bd806
   b46f4:	000bd812 	.word	0x000bd812
   b46f8:	000bd829 	.word	0x000bd829
   b46fc:	000bd843 	.word	0x000bd843
   b4700:	000bd85b 	.word	0x000bd85b
   b4704:	000bd9d5 	.word	0x000bd9d5
   b4708:	20035518 	.word	0x20035518
   b470c:	2003e6a0 	.word	0x2003e6a0
   b4710:	000bd7ce 	.word	0x000bd7ce
   b4714:	000bd7e9 	.word	0x000bd7e9

000b4718 <_Z17acquireWireBufferv>:
    }
  }
  bleCount++;
}

hal_i2c_config_t acquireWireBuffer() {
   b4718:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b471a:	f44f 7500 	mov.w	r5, #512	; 0x200
   b471e:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b4720:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b4722:	6003      	str	r3, [r0, #0]
   b4724:	6085      	str	r5, [r0, #8]
   b4726:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4728:	4905      	ldr	r1, [pc, #20]	; (b4740 <_Z17acquireWireBufferv+0x28>)
   b472a:	4628      	mov	r0, r5
   b472c:	f005 ffa0 	bl	ba670 <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4730:	4903      	ldr	r1, [pc, #12]	; (b4740 <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b4732:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4734:	4628      	mov	r0, r5
   b4736:	f005 ff9b 	bl	ba670 <_ZnajRKSt9nothrow_t>
    };
   b473a:	60e0      	str	r0, [r4, #12]
    return config;
   b473c:	4620      	mov	r0, r4
   b473e:	bd38      	pop	{r3, r4, r5, pc}
   b4740:	000bdfd0 	.word	0x000bdfd0

000b4744 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4744:	b510      	push	{r4, lr}
   b4746:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4748:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b474a:	b118      	cbz	r0, b4754 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b474c:	68a1      	ldr	r1, [r4, #8]
   b474e:	1a09      	subs	r1, r1, r0
   b4750:	f7ff fca7 	bl	b40a2 <_ZdlPvj>
      }
   b4754:	4620      	mov	r0, r4
   b4756:	bd10      	pop	{r4, pc}

000b4758 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4758:	b510      	push	{r4, lr}
   b475a:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b475c:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b475e:	b118      	cbz	r0, b4768 <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4760:	68a1      	ldr	r1, [r4, #8]
   b4762:	1a09      	subs	r1, r1, r0
   b4764:	f7ff fc9d 	bl	b40a2 <_ZdlPvj>
      }
   b4768:	4620      	mov	r0, r4
   b476a:	bd10      	pop	{r4, pc}

000b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b476c:	b510      	push	{r4, lr}
   b476e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4770:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4772:	b118      	cbz	r0, b477c <_ZNSt12_Vector_baseIiSaIiEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4774:	68a1      	ldr	r1, [r4, #8]
   b4776:	1a09      	subs	r1, r1, r0
   b4778:	f7ff fc93 	bl	b40a2 <_ZdlPvj>
      }
   b477c:	4620      	mov	r0, r4
   b477e:	bd10      	pop	{r4, pc}

000b4780 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
   b4780:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
   b4782:	680d      	ldr	r5, [r1, #0]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4784:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
   b4786:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
   b478a:	6005      	str	r5, [r0, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
   b478c:	b085      	sub	sp, #20
	  _M_finish = __x._M_finish;
   b478e:	684d      	ldr	r5, [r1, #4]
   b4790:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4792:	688d      	ldr	r5, [r1, #8]
   b4794:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
   b4796:	2300      	movs	r3, #0
	  _M_end_of_storage = __x._M_end_of_storage;
   b4798:	6085      	str	r5, [r0, #8]
	  _M_finish = __x._M_finish;
   b479a:	e9c1 3300 	strd	r3, r3, [r1]
	  _M_end_of_storage = __x._M_end_of_storage;
   b479e:	608b      	str	r3, [r1, #8]
      }
   b47a0:	a801      	add	r0, sp, #4
	  _M_finish = __x._M_finish;
   b47a2:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
   b47a6:	f7ff ffe1 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      }
   b47aa:	b005      	add	sp, #20
   b47ac:	bd30      	pop	{r4, r5, pc}

000b47ae <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b47ae:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b47b0:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b47b4:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   b47b6:	42ae      	cmp	r6, r5
   b47b8:	d004      	beq.n	b47c4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x16>
      { _M_dispose(); }
   b47ba:	4628      	mov	r0, r5
   b47bc:	f005 ff92 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b47c0:	3518      	adds	r5, #24
   b47c2:	e7f8      	b.n	b47b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b47c4:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b47c6:	b118      	cbz	r0, b47d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b47c8:	68a1      	ldr	r1, [r4, #8]
   b47ca:	1a09      	subs	r1, r1, r0
   b47cc:	f7ff fc69 	bl	b40a2 <_ZdlPvj>
      }
   b47d0:	4620      	mov	r0, r4
   b47d2:	bd70      	pop	{r4, r5, r6, pc}

000b47d4 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>:

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b47d4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      vector(size_type __n, const value_type& __value,
   b47d8:	b570      	push	{r4, r5, r6, lr}
   b47da:	4604      	mov	r4, r0
   b47dc:	460d      	mov	r5, r1
   b47de:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b47e0:	d302      	bcc.n	b47e8 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x14>
	  __throw_length_error(
   b47e2:	480c      	ldr	r0, [pc, #48]	; (b4814 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x40>)
   b47e4:	f005 ff4c 	bl	ba680 <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47e8:	2300      	movs	r3, #0
   b47ea:	e9c0 3300 	strd	r3, r3, [r0]
   b47ee:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b47f0:	4608      	mov	r0, r1
   b47f2:	f7ff fcd5 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47f6:	eb00 0385 	add.w	r3, r0, r5, lsl #2
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b47fa:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47fe:	60a3      	str	r3, [r4, #8]
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   b4800:	b12d      	cbz	r5, b480e <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   b4802:	6832      	ldr	r2, [r6, #0]
      for (; __first != __last; ++__first)
   b4804:	4283      	cmp	r3, r0
   b4806:	d002      	beq.n	b480e <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
	*__first = __tmp;
   b4808:	f840 2b04 	str.w	r2, [r0], #4
      for (; __first != __last; ++__first)
   b480c:	e7fa      	b.n	b4804 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x30>
	this->_M_impl._M_finish =
   b480e:	6060      	str	r0, [r4, #4]
      { _M_fill_initialize(__n, __value); }
   b4810:	4620      	mov	r0, r4
   b4812:	bd70      	pop	{r4, r5, r6, pc}
   b4814:	000bd86b 	.word	0x000bd86b

000b4818 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   b4818:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b481c:	2400      	movs	r4, #0
      vector(initializer_list<value_type> __l,
   b481e:	ab02      	add	r3, sp, #8
   b4820:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4824:	e9c0 4400 	strd	r4, r4, [r0]
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   b4828:	4613      	mov	r3, r2
      vector(initializer_list<value_type> __l,
   b482a:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b482c:	6084      	str	r4, [r0, #8]
   b482e:	00d7      	lsls	r7, r2, #3
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b4830:	f342 001c 	sbfx	r0, r2, #0, #29
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4834:	4a10      	ldr	r2, [pc, #64]	; (b4878 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x60>)
   b4836:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   b483a:	4688      	mov	r8, r1
   b483c:	d202      	bcs.n	b4844 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x2c>
	  __throw_length_error(
   b483e:	480f      	ldr	r0, [pc, #60]	; (b487c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x64>)
   b4840:	f005 ff1e 	bl	ba680 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4844:	f7ff fcb9 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4848:	19c6      	adds	r6, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b484a:	4602      	mov	r2, r0
   b484c:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b484e:	60ae      	str	r6, [r5, #8]
   b4850:	4623      	mov	r3, r4
   b4852:	429f      	cmp	r7, r3
   b4854:	d00b      	beq.n	b486e <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x56>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4856:	18d4      	adds	r4, r2, r3
   b4858:	bf1c      	itt	ne
   b485a:	eb08 0103 	addne.w	r1, r8, r3
   b485e:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b4862:	f103 0308 	add.w	r3, r3, #8
   b4866:	bf18      	it	ne
   b4868:	e9c4 0100 	strdne	r0, r1, [r4]
   b486c:	e7f1      	b.n	b4852 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x3a>
      }
   b486e:	4628      	mov	r0, r5
	  this->_M_impl._M_finish =
   b4870:	606e      	str	r6, [r5, #4]
      }
   b4872:	b002      	add	sp, #8
   b4874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4878:	7ffffff8 	.word	0x7ffffff8
   b487c:	000bd86b 	.word	0x000bd86b

000b4880 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>:
      vector(initializer_list<value_type> __l,
   b4880:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4884:	ab02      	add	r3, sp, #8
   b4886:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b488a:	2300      	movs	r3, #0
   b488c:	e9c0 3300 	strd	r3, r3, [r0]
   b4890:	6083      	str	r3, [r0, #8]
   b4892:	4616      	mov	r6, r2
   b4894:	2318      	movs	r3, #24
   b4896:	435e      	muls	r6, r3
   b4898:	4b10      	ldr	r3, [pc, #64]	; (b48dc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x5c>)
      vector(initializer_list<value_type> __l,
   b489a:	4604      	mov	r4, r0
   b489c:	10f0      	asrs	r0, r6, #3
   b489e:	4358      	muls	r0, r3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b48a0:	4b0f      	ldr	r3, [pc, #60]	; (b48e0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x60>)
   b48a2:	429e      	cmp	r6, r3
   b48a4:	460f      	mov	r7, r1
   b48a6:	eb01 0806 	add.w	r8, r1, r6
   b48aa:	d902      	bls.n	b48b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x32>
	  __throw_length_error(
   b48ac:	480d      	ldr	r0, [pc, #52]	; (b48e4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x64>)
   b48ae:	f005 fee7 	bl	ba680 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b48b2:	f7ff fc63 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b48b6:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b48b8:	4605      	mov	r5, r0
   b48ba:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b48bc:	60a6      	str	r6, [r4, #8]
   b48be:	45b8      	cmp	r8, r7
   b48c0:	d007      	beq.n	b48d2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x52>
   b48c2:	b11d      	cbz	r5, b48cc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x4c>
   b48c4:	4639      	mov	r1, r7
   b48c6:	4628      	mov	r0, r5
   b48c8:	f7ff fca8 	bl	b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b48cc:	3718      	adds	r7, #24
   b48ce:	3518      	adds	r5, #24
   b48d0:	e7f5      	b.n	b48be <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x3e>
      }
   b48d2:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
   b48d4:	6065      	str	r5, [r4, #4]
      }
   b48d6:	b002      	add	sp, #8
   b48d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b48dc:	aaaaaaab 	.word	0xaaaaaaab
   b48e0:	7ffffff8 	.word	0x7ffffff8
   b48e4:	000bd86b 	.word	0x000bd86b

000b48e8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b48e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48ea:	e9d1 3700 	ldrd	r3, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48ee:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48f0:	1aff      	subs	r7, r7, r3
      vector(const vector& __x)
   b48f2:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48f4:	e9c0 5500 	strd	r5, r5, [r0]
   b48f8:	6085      	str	r5, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48fa:	10f8      	asrs	r0, r7, #3
      vector(const vector& __x)
   b48fc:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48fe:	f7ff fc5c 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4902:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4906:	4407      	add	r7, r0
   b4908:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b490a:	e9d6 7600 	ldrd	r7, r6, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b490e:	4602      	mov	r2, r0
   b4910:	1bf6      	subs	r6, r6, r7
      : _M_current(__i) { }
   b4912:	462b      	mov	r3, r5
   b4914:	42b3      	cmp	r3, r6
   b4916:	eb02 0503 	add.w	r5, r2, r3
   b491a:	d006      	beq.n	b492a <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x42>
   b491c:	b11d      	cbz	r5, b4926 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x3e>
   b491e:	18f9      	adds	r1, r7, r3
   b4920:	c903      	ldmia	r1, {r0, r1}
   b4922:	e885 0003 	stmia.w	r5, {r0, r1}
   b4926:	3308      	adds	r3, #8
   b4928:	e7f4      	b.n	b4914 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b492a:	6065      	str	r5, [r4, #4]
      }
   b492c:	4620      	mov	r0, r4
   b492e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4930 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
   b4930:	b508      	push	{r3, lr}
      { return _M_string_length; }
   b4932:	6842      	ldr	r2, [r0, #4]
	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
    { return (__lhs.size() == __rhs.size()
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b4934:	684b      	ldr	r3, [r1, #4]
   b4936:	429a      	cmp	r2, r3
   b4938:	d108      	bne.n	b494c <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1c>
	if (__n == 0)
   b493a:	b14a      	cbz	r2, b4950 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x20>
	return __builtin_memcmp(__s1, __s2, __n);
   b493c:	6809      	ldr	r1, [r1, #0]
   b493e:	6800      	ldr	r0, [r0, #0]
   b4940:	f006 fe70 	bl	bb624 <memcmp>
   b4944:	fab0 f080 	clz	r0, r0
   b4948:	0940      	lsrs	r0, r0, #5
						    __lhs.size())); }
   b494a:	bd08      	pop	{r3, pc}
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b494c:	2000      	movs	r0, #0
   b494e:	e7fc      	b.n	b494a <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>
   b4950:	2001      	movs	r0, #1
   b4952:	e7fa      	b.n	b494a <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>

000b4954 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4958:	b0a3      	sub	sp, #140	; 0x8c
   b495a:	460c      	mov	r4, r1
   b495c:	4606      	mov	r6, r0
  String inputBuffer = "";
   b495e:	499e      	ldr	r1, [pc, #632]	; (b4bd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x284>)
   b4960:	a803      	add	r0, sp, #12
   b4962:	f005 f808 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
  String nameBuffer;
   b4966:	499c      	ldr	r1, [pc, #624]	; (b4bd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x284>)
   b4968:	a807      	add	r0, sp, #28
   b496a:	f005 f804 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
  for(int i = 0; i < len - 1; i++){
   b496e:	2500      	movs	r5, #0
   b4970:	3c01      	subs	r4, #1
   b4972:	42ac      	cmp	r4, r5
   b4974:	d905      	bls.n	b4982 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
	String & operator += (char c)			{concat(c); return (*this);}
   b4976:	5d71      	ldrb	r1, [r6, r5]
   b4978:	a803      	add	r0, sp, #12
   b497a:	f005 f884 	bl	b9a86 <_ZN6String6concatEc>
   b497e:	3501      	adds	r5, #1
   b4980:	e7f7      	b.n	b4972 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e>
  switch(bleCount){
   b4982:	4c96      	ldr	r4, [pc, #600]	; (b4bdc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x288>)
  Serial.println(inputBuffer);
   b4984:	f005 fcc2 	bl	ba30c <_Z16_fetch_usbserialv>
   b4988:	9903      	ldr	r1, [sp, #12]
   b498a:	f004 ff4a 	bl	b9822 <_ZN5Print7printlnEPKc>
  switch(bleCount){
   b498e:	6823      	ldr	r3, [r4, #0]
   b4990:	2b01      	cmp	r3, #1
   b4992:	d014      	beq.n	b49be <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6a>
   b4994:	2b02      	cmp	r3, #2
   b4996:	d041      	beq.n	b4a1c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc8>
      nameBuffer = inputBuffer;
   b4998:	a903      	add	r1, sp, #12
  switch(bleCount){
   b499a:	2b00      	cmp	r3, #0
   b499c:	f040 80a4 	bne.w	b4ae8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x194>
      SSID = inputBuffer;
   b49a0:	488f      	ldr	r0, [pc, #572]	; (b4be0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28c>)
   b49a2:	f005 f819 	bl	b99d8 <_ZN6StringaSERKS_>
  bleCount++;
   b49a6:	6823      	ldr	r3, [r4, #0]
  String nameBuffer;
   b49a8:	a807      	add	r0, sp, #28
  bleCount++;
   b49aa:	3301      	adds	r3, #1
   b49ac:	6023      	str	r3, [r4, #0]
  String nameBuffer;
   b49ae:	f004 ff97 	bl	b98e0 <_ZN6StringD1Ev>
  String inputBuffer = "";
   b49b2:	a803      	add	r0, sp, #12
   b49b4:	f004 ff94 	bl	b98e0 <_ZN6StringD1Ev>
}
   b49b8:	b023      	add	sp, #140	; 0x8c
   b49ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      password = inputBuffer;
   b49be:	4d89      	ldr	r5, [pc, #548]	; (b4be4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x290>)
   b49c0:	a903      	add	r1, sp, #12
   b49c2:	4628      	mov	r0, r5
   b49c4:	f005 f808 	bl	b99d8 <_ZN6StringaSERKS_>
	const char * c_str() const { return buffer; }
   b49c8:	4b85      	ldr	r3, [pc, #532]	; (b4be0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28c>)
   b49ca:	682e      	ldr	r6, [r5, #0]
   b49cc:	f8d3 8000 	ldr.w	r8, [r3]
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b49d0:	f1b8 0f00 	cmp.w	r8, #0
   b49d4:	d01e      	beq.n	b4a14 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc0>
   b49d6:	4640      	mov	r0, r8
   b49d8:	f006 fea4 	bl	bb724 <strlen>
   b49dc:	4607      	mov	r7, r0
   b49de:	b1de      	cbz	r6, b4a18 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc4>
   b49e0:	4630      	mov	r0, r6
   b49e2:	f006 fe9f 	bl	bb724 <strlen>
   b49e6:	4605      	mov	r5, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b49e8:	2238      	movs	r2, #56	; 0x38
   b49ea:	2100      	movs	r1, #0
   b49ec:	a814      	add	r0, sp, #80	; 0x50
   b49ee:	f006 fe51 	bl	bb694 <memset>
        creds.size = sizeof(creds);
   b49f2:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b49f4:	e9cd 380f 	strd	r3, r8, [sp, #60]	; 0x3c
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b49f8:	487b      	ldr	r0, [pc, #492]	; (b4be8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x294>)
        creds.password_len = passwordLen;
   b49fa:	9513      	str	r5, [sp, #76]	; 0x4c
        creds.security = WLanSecurityType(security);
   b49fc:	2303      	movs	r3, #3
   b49fe:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a02:	2300      	movs	r3, #0
   b4a04:	aa0f      	add	r2, sp, #60	; 0x3c
   b4a06:	4619      	mov	r1, r3
   b4a08:	6840      	ldr	r0, [r0, #4]
        creds.password = password;
   b4a0a:	e9cd 7611 	strd	r7, r6, [sp, #68]	; 0x44
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a0e:	f003 fb0b 	bl	b8028 <network_set_credentials>
   b4a12:	e7c8      	b.n	b49a6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x52>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4a14:	4647      	mov	r7, r8
   b4a16:	e7e2      	b.n	b49de <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8a>
   b4a18:	4635      	mov	r5, r6
   b4a1a:	e7e5      	b.n	b49e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4a1c:	4e73      	ldr	r6, [pc, #460]	; (b4bec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x298>)
   b4a1e:	4f74      	ldr	r7, [pc, #464]	; (b4bf0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x29c>)
  switch(bleCount){
   b4a20:	2500      	movs	r5, #0
   b4a22:	e9d6 2300 	ldrd	r2, r3, [r6]
   b4a26:	1a9b      	subs	r3, r3, r2
   b4a28:	109b      	asrs	r3, r3, #2
   b4a2a:	437b      	muls	r3, r7
      for(int i = 0; i < cities.size(); i++){
   b4a2c:	42ab      	cmp	r3, r5
   b4a2e:	d913      	bls.n	b4a58 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x104>
      { return _M_dataplus._M_p; }
   b4a30:	2324      	movs	r3, #36	; 0x24
   b4a32:	fb03 2205 	mla	r2, r3, r5, r2
        if(inputBuffer == String(cities[i].name.c_str())){
   b4a36:	a80f      	add	r0, sp, #60	; 0x3c
   b4a38:	68d1      	ldr	r1, [r2, #12]
   b4a3a:	f004 ff9c 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4a3e:	a90f      	add	r1, sp, #60	; 0x3c
   b4a40:	a803      	add	r0, sp, #12
   b4a42:	f005 f84e 	bl	b9ae2 <_ZNK6String6equalsERKS_>
   b4a46:	4680      	mov	r8, r0
   b4a48:	a80f      	add	r0, sp, #60	; 0x3c
   b4a4a:	f004 ff49 	bl	b98e0 <_ZN6StringD1Ev>
   b4a4e:	f1b8 0f00 	cmp.w	r8, #0
   b4a52:	d009      	beq.n	b4a68 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x114>
          cityIndex = i;
   b4a54:	4b67      	ldr	r3, [pc, #412]	; (b4bf4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a0>)
   b4a56:	601d      	str	r5, [r3, #0]
      if(cityIndex == -1){
   b4a58:	4d66      	ldr	r5, [pc, #408]	; (b4bf4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a0>)
   b4a5a:	682b      	ldr	r3, [r5, #0]
   b4a5c:	1c5a      	adds	r2, r3, #1
   b4a5e:	d105      	bne.n	b4a6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x118>
          bleCount--;
   b4a60:	6823      	ldr	r3, [r4, #0]
   b4a62:	3b01      	subs	r3, #1
   b4a64:	6023      	str	r3, [r4, #0]
          break;
   b4a66:	e79e      	b.n	b49a6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x52>
      for(int i = 0; i < cities.size(); i++){
   b4a68:	3501      	adds	r5, #1
   b4a6a:	e7da      	b.n	b4a22 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xce>
	return *(this->_M_impl._M_start + __n);
   b4a6c:	2224      	movs	r2, #36	; 0x24
   b4a6e:	4353      	muls	r3, r2
   b4a70:	6832      	ldr	r2, [r6, #0]
   b4a72:	18d1      	adds	r1, r2, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4a74:	58d3      	ldr	r3, [r2, r3]
   b4a76:	6849      	ldr	r1, [r1, #4]
   b4a78:	1ac9      	subs	r1, r1, r3
   b4a7a:	4b5f      	ldr	r3, [pc, #380]	; (b4bf8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a4>)
   b4a7c:	1089      	asrs	r1, r1, #2
   b4a7e:	4359      	muls	r1, r3
      sequenceArr = std::vector<int>(cities[cityIndex].railways.size() * 2, 0);
   b4a80:	aa0b      	add	r2, sp, #44	; 0x2c
   b4a82:	ab02      	add	r3, sp, #8
   b4a84:	2600      	movs	r6, #0
   b4a86:	0049      	lsls	r1, r1, #1
   b4a88:	a80f      	add	r0, sp, #60	; 0x3c
   b4a8a:	960b      	str	r6, [sp, #44]	; 0x2c
   b4a8c:	f7ff fea2 	bl	b47d4 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4a90:	a90f      	add	r1, sp, #60	; 0x3c
   b4a92:	485a      	ldr	r0, [pc, #360]	; (b4bfc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a8>)
   b4a94:	f7ff fe74 	bl	b4780 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>
      }
   b4a98:	a80f      	add	r0, sp, #60	; 0x3c
   b4a9a:	f7ff fe67 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      addressArr = std::vector<int>(slaveCountExpected[cityIndex], 0);
   b4a9e:	4b58      	ldr	r3, [pc, #352]	; (b4c00 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ac>)
	return *(this->_M_impl._M_start + __n);
   b4aa0:	682a      	ldr	r2, [r5, #0]
   b4aa2:	681b      	ldr	r3, [r3, #0]
   b4aa4:	4d57      	ldr	r5, [pc, #348]	; (b4c04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>)
   b4aa6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b4aaa:	960b      	str	r6, [sp, #44]	; 0x2c
   b4aac:	aa0b      	add	r2, sp, #44	; 0x2c
   b4aae:	ab02      	add	r3, sp, #8
   b4ab0:	a80f      	add	r0, sp, #60	; 0x3c
   b4ab2:	f7ff fe8f 	bl	b47d4 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4ab6:	a90f      	add	r1, sp, #60	; 0x3c
   b4ab8:	4628      	mov	r0, r5
   b4aba:	f7ff fe61 	bl	b4780 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>
      }
   b4abe:	a80f      	add	r0, sp, #60	; 0x3c
   b4ac0:	f7ff fe54 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      randomizeAddress();
   b4ac4:	f7ff fcc6 	bl	b4454 <_Z16randomizeAddressv>
      Wire.beginTransmission(addressArr[0]);
   b4ac8:	f005 fd6e 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b4acc:	682b      	ldr	r3, [r5, #0]
   b4ace:	6819      	ldr	r1, [r3, #0]
   b4ad0:	f004 fd1a 	bl	b9508 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('3');
   b4ad4:	f005 fd68 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b4ad8:	2133      	movs	r1, #51	; 0x33
   b4ada:	f7ff fbc5 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4ade:	f005 fd63 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b4ae2:	f004 fd18 	bl	b9516 <_ZN7TwoWire15endTransmissionEv>
      break;
   b4ae6:	e75e      	b.n	b49a6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x52>
      if(index < cities[cityIndex].railways.size()){
   b4ae8:	4f42      	ldr	r7, [pc, #264]	; (b4bf4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a0>)
	return *(this->_M_impl._M_start + __n);
   b4aea:	f8df 8100 	ldr.w	r8, [pc, #256]	; b4bec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x298>
      nameBuffer = inputBuffer;
   b4aee:	a807      	add	r0, sp, #28
   b4af0:	f004 ff72 	bl	b99d8 <_ZN6StringaSERKS_>
      if(index < cities[cityIndex].railways.size()){
   b4af4:	6839      	ldr	r1, [r7, #0]
   b4af6:	f8d8 0000 	ldr.w	r0, [r8]
      int index = bleCount - 3;
   b4afa:	6826      	ldr	r6, [r4, #0]
   b4afc:	2224      	movs	r2, #36	; 0x24
   b4afe:	434a      	muls	r2, r1
   b4b00:	1883      	adds	r3, r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4b02:	5882      	ldr	r2, [r0, r2]
   b4b04:	685b      	ldr	r3, [r3, #4]
   b4b06:	1a9b      	subs	r3, r3, r2
   b4b08:	4a3b      	ldr	r2, [pc, #236]	; (b4bf8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a4>)
   b4b0a:	109b      	asrs	r3, r3, #2
   b4b0c:	3e03      	subs	r6, #3
   b4b0e:	4353      	muls	r3, r2
      if(index < cities[cityIndex].railways.size()){
   b4b10:	429e      	cmp	r6, r3
   b4b12:	f080 80da 	bcs.w	b4cca <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x376>
        if(cityIndex == 0 && (inputBuffer == "green1" || inputBuffer == "green2")){
   b4b16:	b981      	cbnz	r1, b4b3a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e6>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4b18:	493b      	ldr	r1, [pc, #236]	; (b4c08 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b4>)
   b4b1a:	a803      	add	r0, sp, #12
   b4b1c:	f004 ffee 	bl	b9afc <_ZNK6String6equalsEPKc>
   b4b20:	b370      	cbz	r0, b4b80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x22c>
          nameBuffer = String(greenLineCTA.name.c_str());
   b4b22:	4b3a      	ldr	r3, [pc, #232]	; (b4c0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   b4b24:	a80f      	add	r0, sp, #60	; 0x3c
   b4b26:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4b28:	f004 ff25 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
   b4b2c:	a90f      	add	r1, sp, #60	; 0x3c
   b4b2e:	a807      	add	r0, sp, #28
   b4b30:	f004 ff61 	bl	b99f6 <_ZN6StringaSEOS_>
   b4b34:	a80f      	add	r0, sp, #60	; 0x3c
   b4b36:	f004 fed3 	bl	b98e0 <_ZN6StringD1Ev>
            railwayIndex = i;
   b4b3a:	f8df b0dc 	ldr.w	fp, [pc, #220]	; b4c18 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c4>
  switch(bleCount){
   b4b3e:	f04f 0a00 	mov.w	sl, #0
	return *(this->_M_impl._M_start + __n);
   b4b42:	f04f 0924 	mov.w	r9, #36	; 0x24
        for(int i = 0; i < cities[cityIndex].railways.size(); i++){
   b4b46:	683d      	ldr	r5, [r7, #0]
   b4b48:	f8d8 0000 	ldr.w	r0, [r8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4b4c:	4b2a      	ldr	r3, [pc, #168]	; (b4bf8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a4>)
	return *(this->_M_impl._M_start + __n);
   b4b4e:	fb09 f105 	mul.w	r1, r9, r5
   b4b52:	1842      	adds	r2, r0, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4b54:	5841      	ldr	r1, [r0, r1]
   b4b56:	6852      	ldr	r2, [r2, #4]
   b4b58:	1a52      	subs	r2, r2, r1
   b4b5a:	1092      	asrs	r2, r2, #2
   b4b5c:	435a      	muls	r2, r3
   b4b5e:	4552      	cmp	r2, sl
   b4b60:	d95c      	bls.n	b4c1c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>
          if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4b62:	b9a5      	cbnz	r5, b4b8e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x23a>
   b4b64:	4b2a      	ldr	r3, [pc, #168]	; (b4c10 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2bc>)
   b4b66:	a80b      	add	r0, sp, #44	; 0x2c
   b4b68:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4b6a:	f004 ff04 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
   b4b6e:	a90b      	add	r1, sp, #44	; 0x2c
   b4b70:	a807      	add	r0, sp, #28
   b4b72:	f004 ffb6 	bl	b9ae2 <_ZNK6String6equalsERKS_>
   b4b76:	b360      	cbz	r0, b4bd2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x27e>
   b4b78:	a80b      	add	r0, sp, #44	; 0x2c
   b4b7a:	f004 feb1 	bl	b98e0 <_ZN6StringD1Ev>
   b4b7e:	e022      	b.n	b4bc6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x272>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4b80:	4924      	ldr	r1, [pc, #144]	; (b4c14 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c0>)
   b4b82:	a803      	add	r0, sp, #12
   b4b84:	f004 ffba 	bl	b9afc <_ZNK6String6equalsEPKc>
        if(cityIndex == 0 && (inputBuffer == "green1" || inputBuffer == "green2")){
   b4b88:	2800      	cmp	r0, #0
   b4b8a:	d1ca      	bne.n	b4b22 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ce>
   b4b8c:	e7d5      	b.n	b4b3a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e6>
          if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4b8e:	2200      	movs	r2, #0
	return *(this->_M_impl._M_start + __n);
   b4b90:	6839      	ldr	r1, [r7, #0]
   b4b92:	f8d8 0000 	ldr.w	r0, [r8]
   b4b96:	9201      	str	r2, [sp, #4]
   b4b98:	fb09 f101 	mul.w	r1, r9, r1
   b4b9c:	5841      	ldr	r1, [r0, r1]
   b4b9e:	206c      	movs	r0, #108	; 0x6c
   b4ba0:	fb00 110a 	mla	r1, r0, sl, r1
   b4ba4:	a80f      	add	r0, sp, #60	; 0x3c
   b4ba6:	6b09      	ldr	r1, [r1, #48]	; 0x30
   b4ba8:	f004 fee5 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4bac:	a907      	add	r1, sp, #28
   b4bae:	a80f      	add	r0, sp, #60	; 0x3c
   b4bb0:	f004 ff97 	bl	b9ae2 <_ZNK6String6equalsERKS_>
   b4bb4:	1e05      	subs	r5, r0, #0
   b4bb6:	a80f      	add	r0, sp, #60	; 0x3c
   b4bb8:	bf18      	it	ne
   b4bba:	2501      	movne	r5, #1
   b4bbc:	f004 fe90 	bl	b98e0 <_ZN6StringD1Ev>
   b4bc0:	9a01      	ldr	r2, [sp, #4]
   b4bc2:	2a00      	cmp	r2, #0
   b4bc4:	d1d8      	bne.n	b4b78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x224>
   b4bc6:	b10d      	cbz	r5, b4bcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>
            railwayIndex = i;
   b4bc8:	f8cb a000 	str.w	sl, [fp]
        for(int i = 0; i < cities[cityIndex].railways.size(); i++){
   b4bcc:	f10a 0a01 	add.w	sl, sl, #1
   b4bd0:	e7b9      	b.n	b4b46 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1f2>
          if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4bd2:	2201      	movs	r2, #1
   b4bd4:	e7dc      	b.n	b4b90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x23c>
   b4bd6:	bf00      	nop
   b4bd8:	000bdbca 	.word	0x000bdbca
   b4bdc:	20035524 	.word	0x20035524
   b4be0:	200354c0 	.word	0x200354c0
   b4be4:	2003e4d4 	.word	0x2003e4d4
   b4be8:	2003e718 	.word	0x2003e718
   b4bec:	20035604 	.word	0x20035604
   b4bf0:	38e38e39 	.word	0x38e38e39
   b4bf4:	200352c8 	.word	0x200352c8
   b4bf8:	684bda13 	.word	0x684bda13
   b4bfc:	2003e690 	.word	0x2003e690
   b4c00:	2003e6a0 	.word	0x2003e6a0
   b4c04:	20035518 	.word	0x20035518
   b4c08:	000bd89c 	.word	0x000bd89c
   b4c0c:	2003561c 	.word	0x2003561c
   b4c10:	2003e550 	.word	0x2003e550
   b4c14:	000bd8a3 	.word	0x000bd8a3
   b4c18:	200352dc 	.word	0x200352dc
        if(railwayIndex == -1){
   b4c1c:	f8df b1b4 	ldr.w	fp, [pc, #436]	; b4dd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x480>
   b4c20:	f8db 3000 	ldr.w	r3, [fp]
   b4c24:	3301      	adds	r3, #1
   b4c26:	f43f af1b 	beq.w	b4a60 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>
   b4c2a:	00b3      	lsls	r3, r6, #2
   b4c2c:	f8df a1a8 	ldr.w	sl, [pc, #424]	; b4dd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x484>
   b4c30:	9301      	str	r3, [sp, #4]
        for(int i = 0; i < 2; i++){
   b4c32:	2500      	movs	r5, #0
          if(cities[cityIndex].railways[railwayIndex].outputs[i].size() == 0 || (cityIndex == 0 && cities[cityIndex].railways[railwayIndex].name == purpleLineCTA.name)){
   b4c34:	6839      	ldr	r1, [r7, #0]
   b4c36:	f8d8 2000 	ldr.w	r2, [r8]
   b4c3a:	f8db 3000 	ldr.w	r3, [fp]
   b4c3e:	2024      	movs	r0, #36	; 0x24
   b4c40:	4348      	muls	r0, r1
   b4c42:	ea4f 0943 	mov.w	r9, r3, lsl #1
   b4c46:	5810      	ldr	r0, [r2, r0]
   b4c48:	226c      	movs	r2, #108	; 0x6c
   b4c4a:	fb02 0003 	mla	r0, r2, r3, r0
   b4c4e:	220c      	movs	r2, #12
   b4c50:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
   b4c54:	436a      	muls	r2, r5
   b4c56:	eb0c 0e02 	add.w	lr, ip, r2
   b4c5a:	f85c 2002 	ldr.w	r2, [ip, r2]
   b4c5e:	f8de e004 	ldr.w	lr, [lr, #4]
   b4c62:	4596      	cmp	lr, r2
   b4c64:	d007      	beq.n	b4c76 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x322>
   b4c66:	2900      	cmp	r1, #0
   b4c68:	d157      	bne.n	b4d1a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c6>
   b4c6a:	494f      	ldr	r1, [pc, #316]	; (b4da8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x454>)
   b4c6c:	3030      	adds	r0, #48	; 0x30
   b4c6e:	f7ff fe5f 	bl	b4930 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b4c72:	2800      	cmp	r0, #0
   b4c74:	d051      	beq.n	b4d1a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c6>
            sequenceArr[2 * railwayIndex + i] = 0;
   b4c76:	f8da 2000 	ldr.w	r2, [sl]
   b4c7a:	44a9      	add	r9, r5
   b4c7c:	2100      	movs	r1, #0
   b4c7e:	f842 1029 	str.w	r1, [r2, r9, lsl #2]
        for(int i = 0; i < 2; i++){
   b4c82:	2d00      	cmp	r5, #0
   b4c84:	d047      	beq.n	b4d16 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c2>
   b4c86:	4d49      	ldr	r5, [pc, #292]	; (b4dac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x458>)
        Wire.beginTransmission(addressArr[index]);
   b4c88:	f005 fc8e 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b4c8c:	682b      	ldr	r3, [r5, #0]
   b4c8e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   b4c92:	f004 fc39 	bl	b9508 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('4');
   b4c96:	f005 fc87 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b4c9a:	2134      	movs	r1, #52	; 0x34
   b4c9c:	f7ff fae4 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b4ca0:	f005 fc82 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b4ca4:	f004 fc37 	bl	b9516 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(addressArr[index + 1]);
   b4ca8:	f005 fc7e 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b4cac:	9a01      	ldr	r2, [sp, #4]
   b4cae:	682b      	ldr	r3, [r5, #0]
   b4cb0:	4413      	add	r3, r2
   b4cb2:	6859      	ldr	r1, [r3, #4]
   b4cb4:	f004 fc28 	bl	b9508 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('3');
   b4cb8:	f005 fc76 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b4cbc:	2133      	movs	r1, #51	; 0x33
   b4cbe:	f7ff fad3 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b4cc2:	f005 fc71 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b4cc6:	f004 fc26 	bl	b9516 <_ZN7TwoWire15endTransmissionEv>
   b4cca:	683a      	ldr	r2, [r7, #0]
   b4ccc:	f8d8 1000 	ldr.w	r1, [r8]
   b4cd0:	2324      	movs	r3, #36	; 0x24
   b4cd2:	435a      	muls	r2, r3
   b4cd4:	188b      	adds	r3, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4cd6:	588a      	ldr	r2, [r1, r2]
   b4cd8:	685b      	ldr	r3, [r3, #4]
   b4cda:	1a9b      	subs	r3, r3, r2
   b4cdc:	4a34      	ldr	r2, [pc, #208]	; (b4db0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x45c>)
   b4cde:	109b      	asrs	r3, r3, #2
   b4ce0:	4353      	muls	r3, r2
      if(index == cities[cityIndex].railways.size() - 1){
   b4ce2:	3b01      	subs	r3, #1
   b4ce4:	429e      	cmp	r6, r3
   b4ce6:	f47f ae5e 	bne.w	b49a6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x52>
        Serial.println("BLE finished");
   b4cea:	f005 fb0f 	bl	ba30c <_Z16_fetch_usbserialv>
   b4cee:	4931      	ldr	r1, [pc, #196]	; (b4db4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x460>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4cf0:	4d31      	ldr	r5, [pc, #196]	; (b4db8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x464>)
   b4cf2:	f004 fd96 	bl	b9822 <_ZN5Print7printlnEPKc>
        userInput = true;
   b4cf6:	4b31      	ldr	r3, [pc, #196]	; (b4dbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x468>)
        network_on(*this, 0, 0, NULL);
   b4cf8:	6868      	ldr	r0, [r5, #4]
   b4cfa:	2201      	movs	r2, #1
   b4cfc:	701a      	strb	r2, [r3, #0]
   b4cfe:	2300      	movs	r3, #0
   b4d00:	461a      	mov	r2, r3
   b4d02:	4619      	mov	r1, r3
   b4d04:	f003 f968 	bl	b7fd8 <network_on>
        network_connect(*this, flags, 0, NULL);
   b4d08:	2300      	movs	r3, #0
   b4d0a:	6868      	ldr	r0, [r5, #4]
   b4d0c:	461a      	mov	r2, r3
   b4d0e:	4619      	mov	r1, r3
   b4d10:	f003 f942 	bl	b7f98 <network_connect>
    }
   b4d14:	e647      	b.n	b49a6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x52>
   b4d16:	2501      	movs	r5, #1
   b4d18:	e78c      	b.n	b4c34 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e0>
            sequenceArr[2 * railwayIndex + i] = addressArr[index];
   b4d1a:	4b24      	ldr	r3, [pc, #144]	; (b4dac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x458>)
   b4d1c:	681a      	ldr	r2, [r3, #0]
   b4d1e:	9b01      	ldr	r3, [sp, #4]
	return *(this->_M_impl._M_start + __n);
   b4d20:	44a9      	add	r9, r5
   b4d22:	58d1      	ldr	r1, [r2, r3]
   b4d24:	f8da 2000 	ldr.w	r2, [sl]
   b4d28:	f842 1029 	str.w	r1, [r2, r9, lsl #2]
            if(cityIndex == 0){
   b4d2c:	683a      	ldr	r2, [r7, #0]
   b4d2e:	2a00      	cmp	r2, #0
   b4d30:	d1a7      	bne.n	b4c82 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x32e>
              if(inputBuffer == String(brownLineCTA.name.c_str())){
   b4d32:	4b23      	ldr	r3, [pc, #140]	; (b4dc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x46c>)
   b4d34:	a80f      	add	r0, sp, #60	; 0x3c
   b4d36:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4d38:	f004 fe1d 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
   b4d3c:	a90f      	add	r1, sp, #60	; 0x3c
   b4d3e:	a803      	add	r0, sp, #12
   b4d40:	f004 fecf 	bl	b9ae2 <_ZNK6String6equalsERKS_>
   b4d44:	4681      	mov	r9, r0
   b4d46:	a80f      	add	r0, sp, #60	; 0x3c
   b4d48:	f004 fdca 	bl	b98e0 <_ZN6StringD1Ev>
   b4d4c:	f1b9 0f00 	cmp.w	r9, #0
   b4d50:	d00a      	beq.n	b4d68 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x414>
              brownLineCTAAdr = sequenceArr[2 * railwayIndex + i];
   b4d52:	f8db 2000 	ldr.w	r2, [fp]
   b4d56:	f8da 1000 	ldr.w	r1, [sl]
   b4d5a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   b4d5e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   b4d62:	4a18      	ldr	r2, [pc, #96]	; (b4dc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x470>)
                greenLineCTAAdr[0] = sequenceArr[2 * railwayIndex];
   b4d64:	6011      	str	r1, [r2, #0]
   b4d66:	e78c      	b.n	b4c82 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x32e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4d68:	4917      	ldr	r1, [pc, #92]	; (b4dc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x474>)
   b4d6a:	a803      	add	r0, sp, #12
   b4d6c:	f004 fec6 	bl	b9afc <_ZNK6String6equalsEPKc>
              }else if(inputBuffer == "green1"){
   b4d70:	b138      	cbz	r0, b4d82 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x42e>
                greenLineCTAAdr[0] = sequenceArr[2 * railwayIndex];
   b4d72:	f8da 2000 	ldr.w	r2, [sl]
   b4d76:	f8db 1000 	ldr.w	r1, [fp]
   b4d7a:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
   b4d7e:	4a13      	ldr	r2, [pc, #76]	; (b4dcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x478>)
   b4d80:	e7f0      	b.n	b4d64 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x410>
   b4d82:	4913      	ldr	r1, [pc, #76]	; (b4dd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x47c>)
   b4d84:	a803      	add	r0, sp, #12
   b4d86:	f004 feb9 	bl	b9afc <_ZNK6String6equalsEPKc>
              }else if(inputBuffer == "green2"){
   b4d8a:	2800      	cmp	r0, #0
   b4d8c:	f43f af79 	beq.w	b4c82 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x32e>
                greenLineCTAAdr[1] = sequenceArr[2 * railwayIndex + 1];
   b4d90:	f8db 2000 	ldr.w	r2, [fp]
   b4d94:	f8da 1000 	ldr.w	r1, [sl]
   b4d98:	0052      	lsls	r2, r2, #1
   b4d9a:	3201      	adds	r2, #1
   b4d9c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   b4da0:	4a0a      	ldr	r2, [pc, #40]	; (b4dcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x478>)
   b4da2:	6051      	str	r1, [r2, #4]
   b4da4:	e76d      	b.n	b4c82 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x32e>
   b4da6:	bf00      	nop
   b4da8:	2003e580 	.word	0x2003e580
   b4dac:	20035518 	.word	0x20035518
   b4db0:	684bda13 	.word	0x684bda13
   b4db4:	000bd8aa 	.word	0x000bd8aa
   b4db8:	2003e718 	.word	0x2003e718
   b4dbc:	2003e6b4 	.word	0x2003e6b4
   b4dc0:	20035594 	.word	0x20035594
   b4dc4:	20035600 	.word	0x20035600
   b4dc8:	000bd89c 	.word	0x000bd89c
   b4dcc:	20035688 	.word	0x20035688
   b4dd0:	000bd8a3 	.word	0x000bd8a3
   b4dd4:	200352dc 	.word	0x200352dc
   b4dd8:	2003e690 	.word	0x2003e690

000b4ddc <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4ddc:	2900      	cmp	r1, #0
      _M_create_storage(size_t __n)
   b4dde:	b538      	push	{r3, r4, r5, lr}
   b4de0:	4604      	mov	r4, r0
      _M_allocate(size_t __n)
   b4de2:	ea4f 0581 	mov.w	r5, r1, lsl #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4de6:	d00c      	beq.n	b4e02 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x26>
	if (__n > this->_M_max_size())
   b4de8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   b4dec:	d301      	bcc.n	b4df2 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
   b4dee:	f005 fc41 	bl	ba674 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4df2:	4628      	mov	r0, r5
   b4df4:	f7ff f94f 	bl	b4096 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4df8:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4dfc:	4428      	add	r0, r5
   b4dfe:	60a0      	str	r0, [r4, #8]
      }
   b4e00:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4e02:	4608      	mov	r0, r1
   b4e04:	e7f8      	b.n	b4df8 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x1c>

000b4e06 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4e06:	b538      	push	{r3, r4, r5, lr}
   b4e08:	4604      	mov	r4, r0
   b4e0a:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b4e0c:	42ac      	cmp	r4, r5
   b4e0e:	d004      	beq.n	b4e1a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x14>
      }
   b4e10:	4620      	mov	r0, r4
   b4e12:	f7ff fcab 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4e16:	340c      	adds	r4, #12
   b4e18:	e7f8      	b.n	b4e0c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x6>
	    std::_Destroy(std::__addressof(*__first));
	}
   b4e1a:	bd38      	pop	{r3, r4, r5, pc}

000b4e1c <_ZN7RailwayD1Ev>:
#include "Checkpoint.cpp"
#include <string>

//container for all data for each rail line
class Railway{
   b4e1c:	b510      	push	{r4, lr}
   b4e1e:	4604      	mov	r4, r0
   b4e20:	3048      	adds	r0, #72	; 0x48
   b4e22:	f7ff fcc4 	bl	b47ae <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b4e26:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b4e2a:	f005 fc5b 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   b4e2e:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b4e32:	f7ff ffe8 	bl	b4e06 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	_M_deallocate(_M_impl._M_start,
   b4e36:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b4e38:	b118      	cbz	r0, b4e42 <_ZN7RailwayD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4e3a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	::operator delete(__p
   b4e3c:	1a09      	subs	r1, r1, r0
   b4e3e:	f7ff f930 	bl	b40a2 <_ZdlPvj>
      }
   b4e42:	f104 0018 	add.w	r0, r4, #24
   b4e46:	f7ff fc91 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4e4a:	f104 000c 	add.w	r0, r4, #12
   b4e4e:	f7ff fc83 	bl	b4758 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4e52:	4620      	mov	r0, r4
   b4e54:	f7ff fc76 	bl	b4744 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b4e58:	4620      	mov	r0, r4
   b4e5a:	bd10      	pop	{r4, pc}

000b4e5c <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4e5c:	b538      	push	{r3, r4, r5, lr}
   b4e5e:	4604      	mov	r4, r0
   b4e60:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b4e62:	42ac      	cmp	r4, r5
   b4e64:	d004      	beq.n	b4e70 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_+0x14>
      __pointer->~_Tp();
   b4e66:	4620      	mov	r0, r4
   b4e68:	f7ff ffd8 	bl	b4e1c <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b4e6c:	346c      	adds	r4, #108	; 0x6c
   b4e6e:	e7f8      	b.n	b4e62 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_+0x6>
	}
   b4e70:	bd38      	pop	{r3, r4, r5, pc}

000b4e72 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b4e72:	b510      	push	{r4, lr}
   b4e74:	4604      	mov	r4, r0
	__destroy(__first, __last);
   b4e76:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4e7a:	f7ff ffef 	bl	b4e5c <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   b4e7e:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4e80:	b118      	cbz	r0, b4e8a <_ZNSt6vectorI7RailwaySaIS0_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4e82:	68a1      	ldr	r1, [r4, #8]
   b4e84:	1a09      	subs	r1, r1, r0
   b4e86:	f7ff f90c 	bl	b40a2 <_ZdlPvj>
      }
   b4e8a:	4620      	mov	r0, r4
   b4e8c:	bd10      	pop	{r4, pc}

000b4e8e <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4e8e:	b538      	push	{r3, r4, r5, lr}
   b4e90:	4604      	mov	r4, r0
   b4e92:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b4e94:	42ac      	cmp	r4, r5
   b4e96:	d008      	beq.n	b4eaa <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_+0x1c>
   b4e98:	f104 000c 	add.w	r0, r4, #12
   b4e9c:	f005 fc22 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#include "Railway.cpp"

class City{
   b4ea0:	4620      	mov	r0, r4
   b4ea2:	f7ff ffe6 	bl	b4e72 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b4ea6:	3424      	adds	r4, #36	; 0x24
   b4ea8:	e7f4      	b.n	b4e94 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_+0x6>
	}
   b4eaa:	bd38      	pop	{r3, r4, r5, pc}

000b4eac <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b4eac:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b4eae:	b510      	push	{r4, lr}
   b4eb0:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b4eb2:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b4eb6:	d005      	beq.n	b4ec4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4eb8:	4601      	mov	r1, r0
   b4eba:	4622      	mov	r2, r4
   b4ebc:	4618      	mov	r0, r3
   b4ebe:	f006 fbcf 	bl	bb660 <memmove>
   b4ec2:	4603      	mov	r3, r0
	}
   b4ec4:	1918      	adds	r0, r3, r4
   b4ec6:	bd10      	pop	{r4, pc}

000b4ec8 <_ZNSt6vectorIiSaIiEEC1ERKS1_>:
      vector(const vector& __x)
   b4ec8:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4eca:	e9d1 3600 	ldrd	r3, r6, [r1]
   b4ece:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4ed0:	2300      	movs	r3, #0
      vector(const vector& __x)
   b4ed2:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4ed4:	e9c0 3300 	strd	r3, r3, [r0]
   b4ed8:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4eda:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   b4edc:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4ede:	f7ff f95f 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4ee2:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4ee6:	4406      	add	r6, r0
   b4ee8:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4eea:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
   b4eec:	e9d5 0100 	ldrd	r0, r1, [r5]
   b4ef0:	f7ff ffdc 	bl	b4eac <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
   b4ef4:	6060      	str	r0, [r4, #4]
      }
   b4ef6:	4620      	mov	r0, r4
   b4ef8:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>:
      vector(initializer_list<value_type> __l,
   b4efc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b4efe:	ab04      	add	r3, sp, #16
   b4f00:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4f04:	2300      	movs	r3, #0
   b4f06:	e9c0 3300 	strd	r3, r3, [r0]
   b4f0a:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b4f0c:	4604      	mov	r4, r0
   b4f0e:	4613      	mov	r3, r2
   b4f10:	460e      	mov	r6, r1
   b4f12:	0095      	lsls	r5, r2, #2
   b4f14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b4f18:	f342 001d 	sbfx	r0, r2, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4f1c:	4a0a      	ldr	r2, [pc, #40]	; (b4f48 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x4c>)
   b4f1e:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b4f22:	d202      	bcs.n	b4f2a <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x2e>
	  __throw_length_error(
   b4f24:	4809      	ldr	r0, [pc, #36]	; (b4f4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x50>)
   b4f26:	f005 fbab 	bl	ba680 <_ZSt20__throw_length_errorPKc>
   b4f2a:	9101      	str	r1, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4f2c:	f7ff f938 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4f30:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4f32:	4602      	mov	r2, r0
   b4f34:	6020      	str	r0, [r4, #0]
   b4f36:	9901      	ldr	r1, [sp, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4f38:	60a5      	str	r5, [r4, #8]
   b4f3a:	4630      	mov	r0, r6
   b4f3c:	f7ff ffb6 	bl	b4eac <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
   b4f40:	6060      	str	r0, [r4, #4]
      }
   b4f42:	b004      	add	sp, #16
   b4f44:	bd70      	pop	{r4, r5, r6, pc}
   b4f46:	bf00      	nop
   b4f48:	7ffffffc 	.word	0x7ffffffc
   b4f4c:	000bd86b 	.word	0x000bd86b

000b4f50 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>:
      if (&__x != this)
   b4f50:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b4f52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4f54:	4604      	mov	r4, r0
   b4f56:	460d      	mov	r5, r1
      if (&__x != this)
   b4f58:	d01d      	beq.n	b4f96 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x46>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f5a:	e9d1 7100 	ldrd	r7, r1, [r1]
			 - this->_M_impl._M_start); }
   b4f5e:	6802      	ldr	r2, [r0, #0]
   b4f60:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f62:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b4f64:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b4f66:	429e      	cmp	r6, r3
   b4f68:	d917      	bls.n	b4f9a <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x4a>
	  pointer __result = this->_M_allocate(__n);
   b4f6a:	10b0      	asrs	r0, r6, #2
   b4f6c:	9101      	str	r1, [sp, #4]
   b4f6e:	f7ff f917 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
   b4f72:	9901      	ldr	r1, [sp, #4]
   b4f74:	4602      	mov	r2, r0
   b4f76:	4605      	mov	r5, r0
   b4f78:	4638      	mov	r0, r7
   b4f7a:	f7ff ff97 	bl	b4eac <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4f7e:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4f80:	b118      	cbz	r0, b4f8a <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x3a>
			    - this->_M_impl._M_start);
   b4f82:	68a1      	ldr	r1, [r4, #8]
   b4f84:	1a09      	subs	r1, r1, r0
   b4f86:	f7ff f88c 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4f8a:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4f8c:	4435      	add	r5, r6
   b4f8e:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4f90:	6823      	ldr	r3, [r4, #0]
   b4f92:	4433      	add	r3, r6
   b4f94:	6063      	str	r3, [r4, #4]
    }
   b4f96:	b003      	add	sp, #12
   b4f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f9a:	6843      	ldr	r3, [r0, #4]
   b4f9c:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b4f9e:	429e      	cmp	r6, r3
   b4fa0:	d803      	bhi.n	b4faa <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x5a>
   b4fa2:	4638      	mov	r0, r7
   b4fa4:	f7ff ff82 	bl	b4eac <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   b4fa8:	e7f2      	b.n	b4f90 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x40>
   b4faa:	18f9      	adds	r1, r7, r3
   b4fac:	4638      	mov	r0, r7
   b4fae:	f7ff ff7d 	bl	b4eac <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
   b4fb2:	e9d4 0200 	ldrd	r0, r2, [r4]
   b4fb6:	e9d5 3100 	ldrd	r3, r1, [r5]
   b4fba:	1a10      	subs	r0, r2, r0
   b4fbc:	4418      	add	r0, r3
   b4fbe:	e7f1      	b.n	b4fa4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x54>

000b4fc0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b4fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4fc4:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b4fc6:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4fc8:	480b      	ldr	r0, [pc, #44]	; (b4ff8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x38>)
   b4fca:	10a4      	asrs	r4, r4, #2
   b4fcc:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b4fce:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4fd0:	4627      	mov	r7, r4
   b4fd2:	4690      	mov	r8, r2
   b4fd4:	2f00      	cmp	r7, #0
   b4fd6:	dd08      	ble.n	b4fea <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x2a>
	      *__result = *__first;
   b4fd8:	4629      	mov	r1, r5
   b4fda:	4640      	mov	r0, r8
   b4fdc:	f7ff ffb8 	bl	b4f50 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b4fe0:	350c      	adds	r5, #12
	      ++__result;
   b4fe2:	f108 080c 	add.w	r8, r8, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4fe6:	3f01      	subs	r7, #1
   b4fe8:	e7f4      	b.n	b4fd4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x14>
	  return __result;
   b4fea:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b4fee:	200c      	movs	r0, #12
   b4ff0:	fb00 6004 	mla	r0, r0, r4, r6
   b4ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4ff8:	aaaaaaab 	.word	0xaaaaaaab

000b4ffc <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>:
    std::vector<std::string> colors;
    int tripleIndex = -1;
    int loopIndex = -1;
    int lowerLoopBound, upperLoopBound, lowerGreenBound, upperGreenBound;

    Railway(std::vector<Checkpoint> checkpointInput, std::vector<int> scalerInput, std::vector<int> outputSize, std::string nameInput, std::vector<std::string> colorInput, std::vector<int> boundInput = {0, 0, 0, 0}){
   b4ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5000:	2500      	movs	r5, #0
   b5002:	4699      	mov	r9, r3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b5004:	f100 0338 	add.w	r3, r0, #56	; 0x38
      { _M_string_length = __length; }
   b5008:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   b500c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5010:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
   b5014:	4604      	mov	r4, r0
   b5016:	e9c0 5500 	strd	r5, r5, [r0]
   b501a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b501e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5022:	e9c0 5506 	strd	r5, r5, [r0, #24]
   b5026:	e9c0 5508 	strd	r5, r5, [r0, #32]
   b502a:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
   b502e:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
   b5032:	b099      	sub	sp, #100	; 0x64
      { __c1 = __c2; }
   b5034:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
   b5038:	6505      	str	r5, [r0, #80]	; 0x50
   b503a:	4692      	mov	sl, r2
   b503c:	f100 0b18 	add.w	fp, r0, #24
   b5040:	f100 0830 	add.w	r8, r0, #48	; 0x30
   b5044:	f100 0748 	add.w	r7, r0, #72	; 0x48
      checkpoints = checkpointInput;
   b5048:	f7ff f924 	bl	b4294 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b504c:	e9d4 2300 	ldrd	r2, r3, [r4]
   b5050:	1a9b      	subs	r3, r3, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b5052:	42ab      	cmp	r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5054:	ea4f 01e3 	mov.w	r1, r3, asr #3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b5058:	da02      	bge.n	b5060 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x64>
	  __throw_length_error(
   b505a:	485f      	ldr	r0, [pc, #380]	; (b51d8 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1dc>)
   b505c:	f005 fb10 	bl	ba680 <_ZSt20__throw_length_errorPKc>
      { _M_create_storage(__n); }
   b5060:	a809      	add	r0, sp, #36	; 0x24
   b5062:	9101      	str	r1, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5064:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b5068:	950b      	str	r5, [sp, #44]	; 0x2c
      { _M_create_storage(__n); }
   b506a:	f7ff feb7 	bl	b4ddc <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
      if (__n <= 0)
   b506e:	9901      	ldr	r1, [sp, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
   b5070:	9809      	ldr	r0, [sp, #36]	; 0x24
   b5072:	b131      	cbz	r1, b5082 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x86>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   b5074:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	*__first = __tmp;
   b5078:	008a      	lsls	r2, r1, #2
   b507a:	4629      	mov	r1, r5
   b507c:	f006 fb0a 	bl	bb694 <memset>
   b5080:	4630      	mov	r0, r6
	  _M_finish = __x._M_finish;
   b5082:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
	  _M_start = __x._M_start;
   b5086:	9909      	ldr	r1, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b5088:	6963      	ldr	r3, [r4, #20]
   b508a:	930e      	str	r3, [sp, #56]	; 0x38
	  _M_finish = __x._M_finish;
   b508c:	e9c4 1003 	strd	r1, r0, [r4, #12]
      }
   b5090:	ae0c      	add	r6, sp, #48	; 0x30
	  _M_end_of_storage = __x._M_end_of_storage;
   b5092:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b5094:	6161      	str	r1, [r4, #20]
	  _M_finish = __x._M_finish;
   b5096:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
      }
   b509a:	4630      	mov	r0, r6
	  _M_start = __x._M_start;
   b509c:	2500      	movs	r5, #0
	  _M_finish = __x._M_finish;
   b509e:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b50a2:	950b      	str	r5, [sp, #44]	; 0x2c
      }
   b50a4:	f7ff fb58 	bl	b4758 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b50a8:	a809      	add	r0, sp, #36	; 0x24
   b50aa:	f7ff fb55 	bl	b4758 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      distances = std::vector<float>(checkpoints.size(), 0);
      scalers = scalerInput;
   b50ae:	4651      	mov	r1, sl
   b50b0:	4658      	mov	r0, fp
   b50b2:	f7ff ff4d 	bl	b4f50 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      outputs = {std::vector<int>(outputSize[0], 0), std::vector<int>(outputSize[1], 0), std::vector<int>(outputSize[2], 0), std::vector<int>(outputSize[3], 0)};
   b50b6:	f8d9 1000 	ldr.w	r1, [r9]
   b50ba:	9506      	str	r5, [sp, #24]
   b50bc:	6809      	ldr	r1, [r1, #0]
   b50be:	ab02      	add	r3, sp, #8
   b50c0:	aa06      	add	r2, sp, #24
   b50c2:	4630      	mov	r0, r6
   b50c4:	f7ff fb86 	bl	b47d4 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b50c8:	f8d9 1000 	ldr.w	r1, [r9]
   b50cc:	9507      	str	r5, [sp, #28]
   b50ce:	6849      	ldr	r1, [r1, #4]
   b50d0:	ab03      	add	r3, sp, #12
   b50d2:	aa07      	add	r2, sp, #28
   b50d4:	a80f      	add	r0, sp, #60	; 0x3c
   b50d6:	f7ff fb7d 	bl	b47d4 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b50da:	f8d9 1000 	ldr.w	r1, [r9]
   b50de:	9508      	str	r5, [sp, #32]
   b50e0:	6889      	ldr	r1, [r1, #8]
   b50e2:	ab04      	add	r3, sp, #16
   b50e4:	aa08      	add	r2, sp, #32
   b50e6:	a812      	add	r0, sp, #72	; 0x48
   b50e8:	f7ff fb74 	bl	b47d4 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b50ec:	f8d9 1000 	ldr.w	r1, [r9]
   b50f0:	9509      	str	r5, [sp, #36]	; 0x24
   b50f2:	ab05      	add	r3, sp, #20
   b50f4:	aa09      	add	r2, sp, #36	; 0x24
   b50f6:	68c9      	ldr	r1, [r1, #12]
   b50f8:	a815      	add	r0, sp, #84	; 0x54
   b50fa:	f7ff fb6b 	bl	b47d4 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
			 - this->_M_impl._M_start); }
   b50fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b5100:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b5102:	1a9b      	subs	r3, r3, r2
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);

	if (__len > capacity())
   b5104:	2b2f      	cmp	r3, #47	; 0x2f
   b5106:	d83f      	bhi.n	b5188 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x18c>
	  pointer __result = this->_M_allocate(__n);
   b5108:	2004      	movs	r0, #4
   b510a:	f7fe ffeb 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b510e:	46b3      	mov	fp, r6
   b5110:	4605      	mov	r5, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b5112:	f100 0a30 	add.w	sl, r0, #48	; 0x30
	  _ForwardIterator __cur = __result;
   b5116:	4681      	mov	r9, r0
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5118:	f1b9 0f00 	cmp.w	r9, #0
   b511c:	d003      	beq.n	b5126 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x12a>
   b511e:	4659      	mov	r1, fp
   b5120:	4648      	mov	r0, r9
   b5122:	f7ff fed1 	bl	b4ec8 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b5126:	f109 090c 	add.w	r9, r9, #12
   b512a:	45d1      	cmp	r9, sl
   b512c:	f10b 0b0c 	add.w	fp, fp, #12
   b5130:	d1f2      	bne.n	b5118 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x11c>
	__destroy(__first, __last);
   b5132:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b5136:	f7ff fe66 	bl	b4e06 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	    _S_check_init_len(__len, _M_get_Tp_allocator());
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
   b513a:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b513c:	b118      	cbz	r0, b5146 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x14a>
			  this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_start);
   b513e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b5140:	1a09      	subs	r1, r1, r0
   b5142:	f7fe ffae 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b5146:	e9c4 5a09 	strd	r5, sl, [r4, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b514a:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
   b514e:	ad18      	add	r5, sp, #96	; 0x60
   b5150:	3d0c      	subs	r5, #12
      }
   b5152:	4628      	mov	r0, r5
   b5154:	f7ff fb0a 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5158:	42b5      	cmp	r5, r6
   b515a:	d1f9      	bne.n	b5150 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x154>
	this->_M_assign(__str);
   b515c:	9922      	ldr	r1, [sp, #136]	; 0x88
   b515e:	4640      	mov	r0, r8
   b5160:	f005 fade 	bl	ba720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      name = nameInput;
      colors = colorInput;
   b5164:	4638      	mov	r0, r7
   b5166:	9923      	ldr	r1, [sp, #140]	; 0x8c
   b5168:	f7ff f8e6 	bl	b4338 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
	return *(this->_M_impl._M_start + __n);
   b516c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b516e:	681b      	ldr	r3, [r3, #0]
      lowerLoopBound = boundInput[0];
   b5170:	681a      	ldr	r2, [r3, #0]
   b5172:	65e2      	str	r2, [r4, #92]	; 0x5c
      upperLoopBound = boundInput[1];
   b5174:	685a      	ldr	r2, [r3, #4]
   b5176:	6622      	str	r2, [r4, #96]	; 0x60
      lowerGreenBound = boundInput[2];
   b5178:	689a      	ldr	r2, [r3, #8]
      upperGreenBound = boundInput[3];
   b517a:	68db      	ldr	r3, [r3, #12]
      lowerGreenBound = boundInput[2];
   b517c:	6662      	str	r2, [r4, #100]	; 0x64
    }
   b517e:	4620      	mov	r0, r4
      upperGreenBound = boundInput[3];
   b5180:	66a3      	str	r3, [r4, #104]	; 0x68
    }
   b5182:	b019      	add	sp, #100	; 0x64
   b5184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5188:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   b518a:	1aad      	subs	r5, r5, r2
	  }
	else if (size() >= __len)
   b518c:	2d2f      	cmp	r5, #47	; 0x2f
   b518e:	d90b      	bls.n	b51a8 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ac>
			      _Category>::__copy_m(__first, __last, __result);
   b5190:	a918      	add	r1, sp, #96	; 0x60
   b5192:	4630      	mov	r0, r6
   b5194:	f7ff ff14 	bl	b4fc0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b5198:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b519a:	4288      	cmp	r0, r1
   b519c:	4605      	mov	r5, r0
   b519e:	d0d6      	beq.n	b514e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b51a0:	f7ff fe31 	bl	b4e06 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b51a4:	62a5      	str	r5, [r4, #40]	; 0x28
   b51a6:	e7d2      	b.n	b514e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b51a8:	4435      	add	r5, r6
   b51aa:	4629      	mov	r1, r5
   b51ac:	4630      	mov	r0, r6
   b51ae:	f7ff ff07 	bl	b4fc0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b51b2:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
   b51b6:	ab18      	add	r3, sp, #96	; 0x60
   b51b8:	429d      	cmp	r5, r3
   b51ba:	d00a      	beq.n	b51d2 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1d6>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b51bc:	f1b9 0f00 	cmp.w	r9, #0
   b51c0:	d003      	beq.n	b51ca <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ce>
   b51c2:	4629      	mov	r1, r5
   b51c4:	4648      	mov	r0, r9
   b51c6:	f7ff fe7f 	bl	b4ec8 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b51ca:	350c      	adds	r5, #12
   b51cc:	f109 090c 	add.w	r9, r9, #12
   b51d0:	e7f1      	b.n	b51b6 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ba>
	    _ForwardIterator __mid = __first;
	    std::advance(__mid, size());
	    std::copy(__first, __mid, this->_M_impl._M_start);
	    const size_type __attribute__((__unused__)) __n = __len - size();
	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	    this->_M_impl._M_finish =
   b51d2:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
   b51d6:	e7ba      	b.n	b514e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b51d8:	000bd86b 	.word	0x000bd86b

000b51dc <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   b51dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b51e0:	ed2d 8b0e 	vpush	{d8-d14}
   b51e4:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
   b51e8:	2801      	cmp	r0, #1
   b51ea:	4eb3      	ldr	r6, [pc, #716]	; (b54b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2dc>)
   b51ec:	9007      	str	r0, [sp, #28]
   b51ee:	f040 85be 	bne.w	b5d6e <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb92>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b51f2:	2500      	movs	r5, #0
    SleepResult() {}
   b51f4:	f1a0 1301 	sub.w	r3, r0, #65537	; 0x10001
              error_(SYSTEM_ERROR_NONE) {
   b51f8:	e9c6 5500 	strd	r5, r5, [r6]
    SleepResult() {}
   b51fc:	60b3      	str	r3, [r6, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b51fe:	2003      	movs	r0, #3
   b5200:	f002 fe9e 	bl	b7f40 <set_system_mode>
  public:
    float lat;
    float lon;

    Checkpoint(float la, float lo){
      lat = la;
   b5204:	4bad      	ldr	r3, [pc, #692]	; (b54bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e0>)
   b5206:	9374      	str	r3, [sp, #464]	; 0x1d0
      lon = lo;
   b5208:	4bad      	ldr	r3, [pc, #692]	; (b54c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e4>)
   b520a:	9375      	str	r3, [sp, #468]	; 0x1d4
      lat = la;
   b520c:	4bad      	ldr	r3, [pc, #692]	; (b54c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e8>)
   b520e:	9376      	str	r3, [sp, #472]	; 0x1d8
      lon = lo;
   b5210:	4bad      	ldr	r3, [pc, #692]	; (b54c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2ec>)
   b5212:	9377      	str	r3, [sp, #476]	; 0x1dc
      lat = la;
   b5214:	4bad      	ldr	r3, [pc, #692]	; (b54cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f0>)
   b5216:	9378      	str	r3, [sp, #480]	; 0x1e0
      lon = lo;
   b5218:	4bad      	ldr	r3, [pc, #692]	; (b54d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f4>)
   b521a:	9379      	str	r3, [sp, #484]	; 0x1e4
      lat = la;
   b521c:	4bad      	ldr	r3, [pc, #692]	; (b54d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f8>)
   b521e:	937a      	str	r3, [sp, #488]	; 0x1e8
      lon = lo;
   b5220:	4bad      	ldr	r3, [pc, #692]	; (b54d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2fc>)
   b5222:	937b      	str	r3, [sp, #492]	; 0x1ec
      lat = la;
   b5224:	4bad      	ldr	r3, [pc, #692]	; (b54dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x300>)
   b5226:	937c      	str	r3, [sp, #496]	; 0x1f0
      lon = lo;
   b5228:	4bad      	ldr	r3, [pc, #692]	; (b54e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x304>)
   b522a:	937d      	str	r3, [sp, #500]	; 0x1f4
);
   b522c:	ab74      	add	r3, sp, #464	; 0x1d0
   b522e:	934e      	str	r3, [sp, #312]	; 0x138
   b5230:	2305      	movs	r3, #5
   b5232:	f8df a33c 	ldr.w	sl, [pc, #828]	; b5570 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>
   b5236:	934f      	str	r3, [sp, #316]	; 0x13c
   b5238:	f50d 7888 	add.w	r8, sp, #272	; 0x110
   b523c:	aa4e      	add	r2, sp, #312	; 0x138
   b523e:	4643      	mov	r3, r8
   b5240:	ca06      	ldmia	r2, {r1, r2}
   b5242:	a85c      	add	r0, sp, #368	; 0x170
   b5244:	f7ff fae8 	bl	b4818 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5248:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
   b524c:	ac67      	add	r4, sp, #412	; 0x19c
   b524e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b5252:	2204      	movs	r2, #4
   b5254:	ab4c      	add	r3, sp, #304	; 0x130
   b5256:	944c      	str	r4, [sp, #304]	; 0x130
   b5258:	924d      	str	r2, [sp, #308]	; 0x134
   b525a:	e893 0006 	ldmia.w	r3, {r1, r2}
   b525e:	a859      	add	r0, sp, #356	; 0x164
   b5260:	f7ff fe4c 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5264:	aa63      	add	r2, sp, #396	; 0x18c
   b5266:	924a      	str	r2, [sp, #296]	; 0x128
   b5268:	2328      	movs	r3, #40	; 0x28
   b526a:	2204      	movs	r2, #4
   b526c:	e9cd 3564 	strd	r3, r5, [sp, #400]	; 0x190
   b5270:	924b      	str	r2, [sp, #300]	; 0x12c
   b5272:	ab4a      	add	r3, sp, #296	; 0x128
   b5274:	f50d 7bda 	add.w	fp, sp, #436	; 0x1b4
   b5278:	e893 0006 	ldmia.w	r3, {r1, r2}
   b527c:	a856      	add	r0, sp, #344	; 0x158
   b527e:	9563      	str	r5, [sp, #396]	; 0x18c
   b5280:	9566      	str	r5, [sp, #408]	; 0x198
   b5282:	f7ff fe3b 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5286:	4658      	mov	r0, fp
   b5288:	4996      	ldr	r1, [pc, #600]	; (b54e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x308>)
      lat = la;
   b528a:	eddf 8a97 	vldr	s17, [pc, #604]	; b54e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x30c>
      lon = lo;
   b528e:	ed9f 8a97 	vldr	s16, [pc, #604]	; b54ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x310>
      lat = la;
   b5292:	eddf 9a97 	vldr	s19, [pc, #604]	; b54f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>
      lon = lo;
   b5296:	ed9f 9a97 	vldr	s18, [pc, #604]	; b54f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x318>
      lat = la;
   b529a:	eddf aa97 	vldr	s21, [pc, #604]	; b54f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x31c>
      lon = lo;
   b529e:	ed9f aa97 	vldr	s20, [pc, #604]	; b54fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>
      lat = la;
   b52a2:	eddf ba97 	vldr	s23, [pc, #604]	; b5500 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>
      lon = lo;
   b52a6:	ed9f ba97 	vldr	s22, [pc, #604]	; b5504 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>
      lat = la;
   b52aa:	eddf da97 	vldr	s27, [pc, #604]	; b5508 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>
      lon = lo;
   b52ae:	ed9f da97 	vldr	s26, [pc, #604]	; b550c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>
      lat = la;
   b52b2:	eddf ca97 	vldr	s25, [pc, #604]	; b5510 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>
      lon = lo;
   b52b6:	ed9f ca97 	vldr	s24, [pc, #604]	; b5514 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>
   b52ba:	ed9f ea97 	vldr	s28, [pc, #604]	; b5518 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>
   b52be:	f7fe ff23 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b52c2:	a880      	add	r0, sp, #512	; 0x200
   b52c4:	4995      	ldr	r1, [pc, #596]	; (b551c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>)
   b52c6:	f7fe ff1f 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b52ca:	a886      	add	r0, sp, #536	; 0x218
   b52cc:	4994      	ldr	r1, [pc, #592]	; (b5520 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>)
   b52ce:	f7fe ff1b 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b52d2:	ab80      	add	r3, sp, #512	; 0x200
   b52d4:	9348      	str	r3, [sp, #288]	; 0x120
   b52d6:	2302      	movs	r3, #2
   b52d8:	9349      	str	r3, [sp, #292]	; 0x124
   b52da:	aa48      	add	r2, sp, #288	; 0x120
   b52dc:	f50d 79be 	add.w	r9, sp, #380	; 0x17c
   b52e0:	ab42      	add	r3, sp, #264	; 0x108
   b52e2:	ca06      	ldmia	r2, {r1, r2}
   b52e4:	a853      	add	r0, sp, #332	; 0x14c
   b52e6:	f7ff facb 	bl	b4880 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b52ea:	4629      	mov	r1, r5
   b52ec:	2210      	movs	r2, #16
   b52ee:	4648      	mov	r0, r9
   b52f0:	f006 f9d0 	bl	bb694 <memset>
   b52f4:	2204      	movs	r2, #4
   b52f6:	ab46      	add	r3, sp, #280	; 0x118
   b52f8:	f8cd 9118 	str.w	r9, [sp, #280]	; 0x118
   b52fc:	9247      	str	r2, [sp, #284]	; 0x11c
   b52fe:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5302:	a850      	add	r0, sp, #320	; 0x140
   b5304:	f7ff fdfa 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLineCTA = Railway(
   b5308:	ab50      	add	r3, sp, #320	; 0x140
   b530a:	9302      	str	r3, [sp, #8]
   b530c:	ab53      	add	r3, sp, #332	; 0x14c
   b530e:	aa59      	add	r2, sp, #356	; 0x164
   b5310:	a95c      	add	r1, sp, #368	; 0x170
   b5312:	e9cd b300 	strd	fp, r3, [sp]
   b5316:	4883      	ldr	r0, [pc, #524]	; (b5524 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>)
   b5318:	ab56      	add	r3, sp, #344	; 0x158
   b531a:	f7ff fe6f 	bl	b4ffc <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b531e:	a850      	add	r0, sp, #320	; 0x140
   b5320:	f7ff fa24 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5324:	a853      	add	r0, sp, #332	; 0x14c
   b5326:	f7ff fa42 	bl	b47ae <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b532a:	a886      	add	r0, sp, #536	; 0x218
   b532c:	f005 f9da 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5330:	a880      	add	r0, sp, #512	; 0x200
   b5332:	f005 f9d7 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5336:	4658      	mov	r0, fp
   b5338:	f005 f9d4 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b533c:	a856      	add	r0, sp, #344	; 0x158
   b533e:	f7ff fa15 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5342:	a859      	add	r0, sp, #356	; 0x164
   b5344:	f7ff fa12 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5348:	a85c      	add	r0, sp, #368	; 0x170
   b534a:	f7ff f9fb 	bl	b4744 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b534e:	4b76      	ldr	r3, [pc, #472]	; (b5528 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>)
   b5350:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b5352:	4b76      	ldr	r3, [pc, #472]	; (b552c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>)
   b5354:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b5356:	4b76      	ldr	r3, [pc, #472]	; (b5530 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
   b5358:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b535a:	4b76      	ldr	r3, [pc, #472]	; (b5534 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>)
   b535c:	9383      	str	r3, [sp, #524]	; 0x20c
      lat = la;
   b535e:	4b76      	ldr	r3, [pc, #472]	; (b5538 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x35c>)
   b5360:	9384      	str	r3, [sp, #528]	; 0x210
      lon = lo;
   b5362:	4b76      	ldr	r3, [pc, #472]	; (b553c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x360>)
   b5364:	9385      	str	r3, [sp, #532]	; 0x214
      lat = la;
   b5366:	4b76      	ldr	r3, [pc, #472]	; (b5540 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x364>)
   b5368:	9386      	str	r3, [sp, #536]	; 0x218
      lon = lo;
   b536a:	4b76      	ldr	r3, [pc, #472]	; (b5544 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x368>)
   b536c:	9387      	str	r3, [sp, #540]	; 0x21c
      lat = la;
   b536e:	4b76      	ldr	r3, [pc, #472]	; (b5548 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
   b5370:	9388      	str	r3, [sp, #544]	; 0x220
      lon = lo;
   b5372:	4b76      	ldr	r3, [pc, #472]	; (b554c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x370>)
   b5374:	9389      	str	r3, [sp, #548]	; 0x224
      lat = la;
   b5376:	4b76      	ldr	r3, [pc, #472]	; (b5550 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>)
   b5378:	938a      	str	r3, [sp, #552]	; 0x228
      lon = lo;
   b537a:	4b76      	ldr	r3, [pc, #472]	; (b5554 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x378>)
   b537c:	938b      	str	r3, [sp, #556]	; 0x22c
      lat = la;
   b537e:	4b76      	ldr	r3, [pc, #472]	; (b5558 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x37c>)
   b5380:	938c      	str	r3, [sp, #560]	; 0x230
      lon = lo;
   b5382:	4b76      	ldr	r3, [pc, #472]	; (b555c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x380>)
   b5384:	938d      	str	r3, [sp, #564]	; 0x234
);
   b5386:	ab80      	add	r3, sp, #512	; 0x200
   b5388:	9344      	str	r3, [sp, #272]	; 0x110
   b538a:	2307      	movs	r3, #7
   b538c:	9345      	str	r3, [sp, #276]	; 0x114
   b538e:	af3a      	add	r7, sp, #232	; 0xe8
   b5390:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5394:	463b      	mov	r3, r7
   b5396:	a85c      	add	r0, sp, #368	; 0x170
   b5398:	f7ff fa3e 	bl	b4818 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b539c:	f10a 0c10 	add.w	ip, sl, #16
   b53a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b53a4:	465e      	mov	r6, fp
   b53a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b53a8:	e89c 0003 	ldmia.w	ip, {r0, r1}
   b53ac:	2306      	movs	r3, #6
   b53ae:	9343      	str	r3, [sp, #268]	; 0x10c
   b53b0:	f8cd b108 	str.w	fp, [sp, #264]	; 0x108
   b53b4:	ab42      	add	r3, sp, #264	; 0x108
   b53b6:	e9c6 0100 	strd	r0, r1, [r6]
   b53ba:	e893 0006 	ldmia.w	r3, {r1, r2}
   b53be:	a859      	add	r0, sp, #356	; 0x164
   b53c0:	9605      	str	r6, [sp, #20]
   b53c2:	f7ff fd9b 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b53c6:	aa63      	add	r2, sp, #396	; 0x18c
   b53c8:	9240      	str	r2, [sp, #256]	; 0x100
   b53ca:	233c      	movs	r3, #60	; 0x3c
   b53cc:	2204      	movs	r2, #4
   b53ce:	e9cd 3564 	strd	r3, r5, [sp, #400]	; 0x190
   b53d2:	9241      	str	r2, [sp, #260]	; 0x104
   b53d4:	ab40      	add	r3, sp, #256	; 0x100
   b53d6:	e893 0006 	ldmia.w	r3, {r1, r2}
   b53da:	a856      	add	r0, sp, #344	; 0x158
   b53dc:	9563      	str	r5, [sp, #396]	; 0x18c
   b53de:	9566      	str	r5, [sp, #408]	; 0x198
   b53e0:	f7ff fd8c 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b53e4:	4620      	mov	r0, r4
   b53e6:	495e      	ldr	r1, [pc, #376]	; (b5560 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x384>)
   b53e8:	f7fe fe8e 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b53ec:	a874      	add	r0, sp, #464	; 0x1d0
   b53ee:	495d      	ldr	r1, [pc, #372]	; (b5564 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x388>)
   b53f0:	f7fe fe8a 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b53f4:	a87a      	add	r0, sp, #488	; 0x1e8
   b53f6:	495c      	ldr	r1, [pc, #368]	; (b5568 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x38c>)
   b53f8:	f7fe fe86 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b53fc:	ab74      	add	r3, sp, #464	; 0x1d0
   b53fe:	933e      	str	r3, [sp, #248]	; 0xf8
   b5400:	2302      	movs	r3, #2
   b5402:	933f      	str	r3, [sp, #252]	; 0xfc
   b5404:	ae38      	add	r6, sp, #224	; 0xe0
   b5406:	aa3e      	add	r2, sp, #248	; 0xf8
   b5408:	4633      	mov	r3, r6
   b540a:	ca06      	ldmia	r2, {r1, r2}
   b540c:	a853      	add	r0, sp, #332	; 0x14c
   b540e:	f7ff fa37 	bl	b4880 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5412:	4629      	mov	r1, r5
   b5414:	2210      	movs	r2, #16
   b5416:	4648      	mov	r0, r9
   b5418:	f006 f93c 	bl	bb694 <memset>
   b541c:	2204      	movs	r2, #4
   b541e:	ab3c      	add	r3, sp, #240	; 0xf0
   b5420:	f8cd 90f0 	str.w	r9, [sp, #240]	; 0xf0
   b5424:	923d      	str	r2, [sp, #244]	; 0xf4
   b5426:	e893 0006 	ldmia.w	r3, {r1, r2}
   b542a:	a850      	add	r0, sp, #320	; 0x140
   b542c:	f7ff fd66 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLineCTA = Railway(
   b5430:	ab50      	add	r3, sp, #320	; 0x140
   b5432:	9302      	str	r3, [sp, #8]
   b5434:	ab53      	add	r3, sp, #332	; 0x14c
   b5436:	aa59      	add	r2, sp, #356	; 0x164
   b5438:	a95c      	add	r1, sp, #368	; 0x170
   b543a:	e9cd 4300 	strd	r4, r3, [sp]
   b543e:	484b      	ldr	r0, [pc, #300]	; (b556c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x390>)
   b5440:	ab56      	add	r3, sp, #344	; 0x158
   b5442:	f7ff fddb 	bl	b4ffc <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5446:	a850      	add	r0, sp, #320	; 0x140
   b5448:	f7ff f990 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b544c:	a853      	add	r0, sp, #332	; 0x14c
   b544e:	f7ff f9ae 	bl	b47ae <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5452:	a87a      	add	r0, sp, #488	; 0x1e8
   b5454:	f005 f946 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5458:	a874      	add	r0, sp, #464	; 0x1d0
   b545a:	f005 f943 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b545e:	4620      	mov	r0, r4
   b5460:	f005 f940 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5464:	a856      	add	r0, sp, #344	; 0x158
   b5466:	f7ff f981 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b546a:	a859      	add	r0, sp, #356	; 0x164
   b546c:	f7ff f97e 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5470:	a85c      	add	r0, sp, #368	; 0x170
   b5472:	f7ff f967 	bl	b4744 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b5476:	ab80      	add	r3, sp, #512	; 0x200
   b5478:	933a      	str	r3, [sp, #232]	; 0xe8
   b547a:	2307      	movs	r3, #7
   b547c:	933b      	str	r3, [sp, #236]	; 0xec
   b547e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
   b5482:	e897 0006 	ldmia.w	r7, {r1, r2}
   b5486:	4643      	mov	r3, r8
   b5488:	a85c      	add	r0, sp, #368	; 0x170
      lat = la;
   b548a:	edcd da80 	vstr	s27, [sp, #512]	; 0x200
      lon = lo;
   b548e:	ed8d da81 	vstr	s26, [sp, #516]	; 0x204
      lat = la;
   b5492:	edcd ca82 	vstr	s25, [sp, #520]	; 0x208
      lon = lo;
   b5496:	ed8d ca83 	vstr	s24, [sp, #524]	; 0x20c
      lat = la;
   b549a:	edcd 8a84 	vstr	s17, [sp, #528]	; 0x210
      lon = lo;
   b549e:	ed8d 8a85 	vstr	s16, [sp, #532]	; 0x214
      lat = la;
   b54a2:	edcd ba86 	vstr	s23, [sp, #536]	; 0x218
      lon = lo;
   b54a6:	ed8d ba87 	vstr	s22, [sp, #540]	; 0x21c
      lat = la;
   b54aa:	edcd aa88 	vstr	s21, [sp, #544]	; 0x220
      lon = lo;
   b54ae:	ed8d aa89 	vstr	s20, [sp, #548]	; 0x224
      lat = la;
   b54b2:	edcd 9a8a 	vstr	s19, [sp, #552]	; 0x228
   b54b6:	e05d      	b.n	b5574 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x398>
   b54b8:	200354d0 	.word	0x200354d0
   b54bc:	42276980 	.word	0x42276980
   b54c0:	c2af431e 	.word	0xc2af431e
   b54c4:	42279dcc 	.word	0x42279dcc
   b54c8:	c2af4202 	.word	0xc2af4202
   b54cc:	42279d95 	.word	0x42279d95
   b54d0:	c2af476d 	.word	0xc2af476d
   b54d4:	4227a7a9 	.word	0x4227a7a9
   b54d8:	c2af4e05 	.word	0xc2af4e05
   b54dc:	4227b382 	.word	0x4227b382
   b54e0:	c2af4e44 	.word	0xc2af4e44
   b54e4:	000bd8b7 	.word	0x000bd8b7
   b54e8:	42278b1a 	.word	0x42278b1a
   b54ec:	c2af449a 	.word	0xc2af449a
   b54f0:	42278b2f 	.word	0x42278b2f
   b54f4:	c2af4095 	.word	0xc2af4095
   b54f8:	422781d8 	.word	0x422781d8
   b54fc:	c2af4044 	.word	0xc2af4044
   b5500:	42278216 	.word	0x42278216
   b5504:	c2af44c1 	.word	0xc2af44c1
   b5508:	4227a49e 	.word	0x4227a49e
   b550c:	c2af4bd0 	.word	0xc2af4bd0
   b5510:	4227a437 	.word	0x4227a437
   b5514:	c2af4659 	.word	0xc2af4659
   b5518:	c2af4089 	.word	0xc2af4089
   b551c:	000bd8bb 	.word	0x000bd8bb
   b5520:	000bd8c2 	.word	0x000bd8c2
   b5524:	2003e5bc 	.word	0x2003e5bc
   b5528:	42277e9d 	.word	0x42277e9d
   b552c:	c2af74b3 	.word	0xc2af74b3
   b5530:	422780af 	.word	0x422780af
   b5534:	c2af588e 	.word	0xc2af588e
   b5538:	4227804d 	.word	0x4227804d
   b553c:	c2af482e 	.word	0xc2af482e
   b5540:	422780ad 	.word	0x422780ad
   b5544:	c2af4157 	.word	0xc2af4157
   b5548:	42278aff 	.word	0x42278aff
   b554c:	c2af4253 	.word	0xc2af4253
   b5550:	42278af4 	.word	0x42278af4
   b5554:	c2af4798 	.word	0xc2af4798
   b5558:	4227a978 	.word	0x4227a978
   b555c:	c2af5f5d 	.word	0xc2af5f5d
   b5560:	000bd8c9 	.word	0x000bd8c9
   b5564:	000bd8ce 	.word	0x000bd8ce
   b5568:	000bd8d5 	.word	0x000bd8d5
   b556c:	20035528 	.word	0x20035528
   b5570:	000bda88 	.word	0x000bda88
      lon = lo;
   b5574:	ed8d 9a8b 	vstr	s18, [sp, #556]	; 0x22c
      lat = la;
   b5578:	edcd 8a8c 	vstr	s17, [sp, #560]	; 0x230
      lon = lo;
   b557c:	ed8d 8a8d 	vstr	s16, [sp, #564]	; 0x234
   b5580:	f7ff f94a 	bl	b4818 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5584:	f10a 0328 	add.w	r3, sl, #40	; 0x28
   b5588:	461f      	mov	r7, r3
   b558a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b558c:	46dc      	mov	ip, fp
   b558e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5592:	e9d7 0100 	ldrd	r0, r1, [r7]
   b5596:	9b05      	ldr	r3, [sp, #20]
   b5598:	f8cd b0e0 	str.w	fp, [sp, #224]	; 0xe0
   b559c:	e883 0003 	stmia.w	r3, {r0, r1}
   b55a0:	2306      	movs	r3, #6
   b55a2:	9339      	str	r3, [sp, #228]	; 0xe4
   b55a4:	e896 0006 	ldmia.w	r6, {r1, r2}
   b55a8:	a859      	add	r0, sp, #356	; 0x164
   b55aa:	9706      	str	r7, [sp, #24]
   b55ac:	f7ff fca6 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b55b0:	f107 0308 	add.w	r3, r7, #8
   b55b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b55b6:	ae63      	add	r6, sp, #396	; 0x18c
   b55b8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b55bc:	2204      	movs	r2, #4
   b55be:	ab36      	add	r3, sp, #216	; 0xd8
   b55c0:	9636      	str	r6, [sp, #216]	; 0xd8
   b55c2:	9237      	str	r2, [sp, #220]	; 0xdc
   b55c4:	e893 0006 	ldmia.w	r3, {r1, r2}
   b55c8:	a856      	add	r0, sp, #344	; 0x158
   b55ca:	f7ff fc97 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b55ce:	4620      	mov	r0, r4
   b55d0:	49b2      	ldr	r1, [pc, #712]	; (b589c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c0>)
   b55d2:	f7fe fd99 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b55d6:	a874      	add	r0, sp, #464	; 0x1d0
   b55d8:	49b1      	ldr	r1, [pc, #708]	; (b58a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c4>)
   b55da:	f7fe fd95 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b55de:	a87a      	add	r0, sp, #488	; 0x1e8
   b55e0:	49b0      	ldr	r1, [pc, #704]	; (b58a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c8>)
   b55e2:	f7fe fd91 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b55e6:	a974      	add	r1, sp, #464	; 0x1d0
   b55e8:	9134      	str	r1, [sp, #208]	; 0xd0
   b55ea:	2102      	movs	r1, #2
   b55ec:	ae2e      	add	r6, sp, #184	; 0xb8
   b55ee:	9135      	str	r1, [sp, #212]	; 0xd4
   b55f0:	aa34      	add	r2, sp, #208	; 0xd0
   b55f2:	ca06      	ldmia	r2, {r1, r2}
   b55f4:	4633      	mov	r3, r6
   b55f6:	a853      	add	r0, sp, #332	; 0x14c
   b55f8:	f7ff f942 	bl	b4880 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b55fc:	f107 0218 	add.w	r2, r7, #24
   b5600:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b5602:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5606:	2104      	movs	r1, #4
   b5608:	ab32      	add	r3, sp, #200	; 0xc8
   b560a:	f8cd 90c8 	str.w	r9, [sp, #200]	; 0xc8
   b560e:	9133      	str	r1, [sp, #204]	; 0xcc
   b5610:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5614:	a850      	add	r0, sp, #320	; 0x140
   b5616:	f7ff fc71 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway brownLineCTA = Railway(
   b561a:	a950      	add	r1, sp, #320	; 0x140
   b561c:	9102      	str	r1, [sp, #8]
   b561e:	a953      	add	r1, sp, #332	; 0x14c
   b5620:	e9cd 4100 	strd	r4, r1, [sp]
   b5624:	a956      	add	r1, sp, #344	; 0x158
   b5626:	460b      	mov	r3, r1
   b5628:	a959      	add	r1, sp, #356	; 0x164
   b562a:	460a      	mov	r2, r1
   b562c:	489e      	ldr	r0, [pc, #632]	; (b58a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6cc>)
   b562e:	a95c      	add	r1, sp, #368	; 0x170
   b5630:	f7ff fce4 	bl	b4ffc <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5634:	a850      	add	r0, sp, #320	; 0x140
   b5636:	f7ff f899 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b563a:	a853      	add	r0, sp, #332	; 0x14c
   b563c:	f7ff f8b7 	bl	b47ae <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5640:	a87a      	add	r0, sp, #488	; 0x1e8
   b5642:	f005 f84f 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5646:	a874      	add	r0, sp, #464	; 0x1d0
   b5648:	f005 f84c 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b564c:	4620      	mov	r0, r4
   b564e:	f005 f849 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5652:	a856      	add	r0, sp, #344	; 0x158
   b5654:	f7ff f88a 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5658:	a859      	add	r0, sp, #356	; 0x164
   b565a:	f7ff f887 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b565e:	a85c      	add	r0, sp, #368	; 0x170
   b5660:	f7ff f870 	bl	b4744 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5664:	4b91      	ldr	r3, [pc, #580]	; (b58ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d0>)
   b5666:	9374      	str	r3, [sp, #464]	; 0x1d0
      lon = lo;
   b5668:	4b91      	ldr	r3, [pc, #580]	; (b58b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d4>)
   b566a:	9375      	str	r3, [sp, #468]	; 0x1d4
      lat = la;
   b566c:	4b91      	ldr	r3, [pc, #580]	; (b58b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d8>)
   b566e:	9376      	str	r3, [sp, #472]	; 0x1d8
   b5670:	4b91      	ldr	r3, [pc, #580]	; (b58b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6dc>)
   b5672:	937a      	str	r3, [sp, #488]	; 0x1e8
);
   b5674:	a974      	add	r1, sp, #464	; 0x1d0
      lon = lo;
   b5676:	4b91      	ldr	r3, [pc, #580]	; (b58bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e0>)
   b5678:	9130      	str	r1, [sp, #192]	; 0xc0
   b567a:	937b      	str	r3, [sp, #492]	; 0x1ec
   b567c:	2105      	movs	r1, #5
      lat = la;
   b567e:	4b90      	ldr	r3, [pc, #576]	; (b58c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e4>)
   b5680:	937c      	str	r3, [sp, #496]	; 0x1f0
   b5682:	af26      	add	r7, sp, #152	; 0x98
   b5684:	9131      	str	r1, [sp, #196]	; 0xc4
      lon = lo;
   b5686:	4b8f      	ldr	r3, [pc, #572]	; (b58c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e8>)
   b5688:	937d      	str	r3, [sp, #500]	; 0x1f4
   b568a:	e898 0006 	ldmia.w	r8, {r1, r2}
   b568e:	463b      	mov	r3, r7
   b5690:	a85c      	add	r0, sp, #368	; 0x170
   b5692:	ed8d ea77 	vstr	s28, [sp, #476]	; 0x1dc
      lat = la;
   b5696:	edcd 9a78 	vstr	s19, [sp, #480]	; 0x1e0
      lon = lo;
   b569a:	ed8d 9a79 	vstr	s18, [sp, #484]	; 0x1e4
   b569e:	f7ff f8bb 	bl	b4818 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b56a2:	f10a 0360 	add.w	r3, sl, #96	; 0x60
   b56a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b56a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b56ac:	2104      	movs	r1, #4
   b56ae:	942e      	str	r4, [sp, #184]	; 0xb8
   b56b0:	912f      	str	r1, [sp, #188]	; 0xbc
   b56b2:	e896 0006 	ldmia.w	r6, {r1, r2}
   b56b6:	a859      	add	r0, sp, #356	; 0x164
   b56b8:	f7ff fc20 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b56bc:	f10a 0370 	add.w	r3, sl, #112	; 0x70
   b56c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b56c2:	ae63      	add	r6, sp, #396	; 0x18c
   b56c4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b56c8:	2104      	movs	r1, #4
   b56ca:	ab2c      	add	r3, sp, #176	; 0xb0
   b56cc:	962c      	str	r6, [sp, #176]	; 0xb0
   b56ce:	912d      	str	r1, [sp, #180]	; 0xb4
   b56d0:	e893 0006 	ldmia.w	r3, {r1, r2}
   b56d4:	a856      	add	r0, sp, #344	; 0x158
   b56d6:	f7ff fc11 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b56da:	4658      	mov	r0, fp
   b56dc:	497a      	ldr	r1, [pc, #488]	; (b58c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ec>)
   b56de:	f7fe fd13 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b56e2:	a880      	add	r0, sp, #512	; 0x200
   b56e4:	4979      	ldr	r1, [pc, #484]	; (b58cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f0>)
   b56e6:	f7fe fd0f 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b56ea:	a886      	add	r0, sp, #536	; 0x218
   b56ec:	4978      	ldr	r1, [pc, #480]	; (b58d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f4>)
   b56ee:	f7fe fd0b 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b56f2:	a980      	add	r1, sp, #512	; 0x200
   b56f4:	912a      	str	r1, [sp, #168]	; 0xa8
   b56f6:	2102      	movs	r1, #2
   b56f8:	ae24      	add	r6, sp, #144	; 0x90
   b56fa:	912b      	str	r1, [sp, #172]	; 0xac
   b56fc:	aa2a      	add	r2, sp, #168	; 0xa8
   b56fe:	4633      	mov	r3, r6
   b5700:	ca06      	ldmia	r2, {r1, r2}
   b5702:	a853      	add	r0, sp, #332	; 0x14c
   b5704:	f7ff f8bc 	bl	b4880 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5708:	f10a 0380 	add.w	r3, sl, #128	; 0x80
   b570c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b570e:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5712:	2104      	movs	r1, #4
   b5714:	ab28      	add	r3, sp, #160	; 0xa0
   b5716:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
   b571a:	9129      	str	r1, [sp, #164]	; 0xa4
   b571c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5720:	a850      	add	r0, sp, #320	; 0x140
   b5722:	f7ff fbeb 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLineCTA = Railway(
   b5726:	a950      	add	r1, sp, #320	; 0x140
   b5728:	9102      	str	r1, [sp, #8]
   b572a:	a953      	add	r1, sp, #332	; 0x14c
   b572c:	e9cd b100 	strd	fp, r1, [sp]
   b5730:	a956      	add	r1, sp, #344	; 0x158
   b5732:	460b      	mov	r3, r1
   b5734:	a959      	add	r1, sp, #356	; 0x164
   b5736:	460a      	mov	r2, r1
   b5738:	4866      	ldr	r0, [pc, #408]	; (b58d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f8>)
   b573a:	a95c      	add	r1, sp, #368	; 0x170
   b573c:	f7ff fc5e 	bl	b4ffc <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5740:	a850      	add	r0, sp, #320	; 0x140
   b5742:	f7ff f813 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5746:	a853      	add	r0, sp, #332	; 0x14c
   b5748:	f7ff f831 	bl	b47ae <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b574c:	a886      	add	r0, sp, #536	; 0x218
   b574e:	f004 ffc9 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5752:	a880      	add	r0, sp, #512	; 0x200
   b5754:	f004 ffc6 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5758:	4658      	mov	r0, fp
   b575a:	f004 ffc3 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b575e:	a856      	add	r0, sp, #344	; 0x158
   b5760:	f7ff f804 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5764:	a859      	add	r0, sp, #356	; 0x164
   b5766:	f7ff f801 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b576a:	a85c      	add	r0, sp, #368	; 0x170
   b576c:	f7fe ffea 	bl	b4744 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5770:	4b59      	ldr	r3, [pc, #356]	; (b58d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6fc>)
   b5772:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b5774:	4b59      	ldr	r3, [pc, #356]	; (b58dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x700>)
   b5776:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b5778:	4b59      	ldr	r3, [pc, #356]	; (b58e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x704>)
   b577a:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b577c:	4b59      	ldr	r3, [pc, #356]	; (b58e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x708>)
   b577e:	9383      	str	r3, [sp, #524]	; 0x20c
      lat = la;
   b5780:	4b59      	ldr	r3, [pc, #356]	; (b58e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x70c>)
   b5782:	9384      	str	r3, [sp, #528]	; 0x210
      lon = lo;
   b5784:	4b59      	ldr	r3, [pc, #356]	; (b58ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x710>)
   b5786:	9385      	str	r3, [sp, #532]	; 0x214
);
   b5788:	a980      	add	r1, sp, #512	; 0x200
      lat = la;
   b578a:	4b59      	ldr	r3, [pc, #356]	; (b58f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x714>)
   b578c:	9126      	str	r1, [sp, #152]	; 0x98
   b578e:	9386      	str	r3, [sp, #536]	; 0x218
   b5790:	2108      	movs	r1, #8
   b5792:	4b58      	ldr	r3, [pc, #352]	; (b58f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x718>)
   b5794:	938c      	str	r3, [sp, #560]	; 0x230
   b5796:	f10d 0870 	add.w	r8, sp, #112	; 0x70
   b579a:	9127      	str	r1, [sp, #156]	; 0x9c
      lon = lo;
   b579c:	4b56      	ldr	r3, [pc, #344]	; (b58f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x71c>)
   b579e:	938d      	str	r3, [sp, #564]	; 0x234
   b57a0:	e897 0006 	ldmia.w	r7, {r1, r2}
   b57a4:	4643      	mov	r3, r8
   b57a6:	a85c      	add	r0, sp, #368	; 0x170
   b57a8:	f10a 0790 	add.w	r7, sl, #144	; 0x90
   b57ac:	ed8d ea87 	vstr	s28, [sp, #540]	; 0x21c
      lat = la;
   b57b0:	edcd 9a88 	vstr	s19, [sp, #544]	; 0x220
      lon = lo;
   b57b4:	ed8d 9a89 	vstr	s18, [sp, #548]	; 0x224
      lat = la;
   b57b8:	edcd 8a8a 	vstr	s17, [sp, #552]	; 0x228
      lon = lo;
   b57bc:	ed8d 8a8b 	vstr	s16, [sp, #556]	; 0x22c
      lat = la;
   b57c0:	edcd aa8e 	vstr	s21, [sp, #568]	; 0x238
      lon = lo;
   b57c4:	ed8d aa8f 	vstr	s20, [sp, #572]	; 0x23c
   b57c8:	f7ff f826 	bl	b4818 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b57cc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b57ce:	46dc      	mov	ip, fp
   b57d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b57d4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   b57d8:	9f05      	ldr	r7, [sp, #20]
   b57da:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
   b57de:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b57e2:	2107      	movs	r1, #7
   b57e4:	9125      	str	r1, [sp, #148]	; 0x94
   b57e6:	e896 0006 	ldmia.w	r6, {r1, r2}
   b57ea:	a859      	add	r0, sp, #356	; 0x164
   b57ec:	f7ff fb86 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b57f0:	f10a 03ac 	add.w	r3, sl, #172	; 0xac
   b57f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b57f6:	ae63      	add	r6, sp, #396	; 0x18c
   b57f8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b57fc:	2104      	movs	r1, #4
   b57fe:	ab22      	add	r3, sp, #136	; 0x88
   b5800:	9622      	str	r6, [sp, #136]	; 0x88
   b5802:	9123      	str	r1, [sp, #140]	; 0x8c
   b5804:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5808:	a856      	add	r0, sp, #344	; 0x158
   b580a:	f7ff fb77 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b580e:	4620      	mov	r0, r4
   b5810:	493a      	ldr	r1, [pc, #232]	; (b58fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x720>)
   b5812:	f7fe fc79 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5816:	a874      	add	r0, sp, #464	; 0x1d0
   b5818:	4939      	ldr	r1, [pc, #228]	; (b5900 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x724>)
   b581a:	f7fe fc75 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b581e:	a87a      	add	r0, sp, #488	; 0x1e8
   b5820:	4938      	ldr	r1, [pc, #224]	; (b5904 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x728>)
   b5822:	f7fe fc71 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5826:	a974      	add	r1, sp, #464	; 0x1d0
   b5828:	9120      	str	r1, [sp, #128]	; 0x80
   b582a:	2102      	movs	r1, #2
   b582c:	af1a      	add	r7, sp, #104	; 0x68
   b582e:	9121      	str	r1, [sp, #132]	; 0x84
   b5830:	aa20      	add	r2, sp, #128	; 0x80
   b5832:	463b      	mov	r3, r7
   b5834:	ca06      	ldmia	r2, {r1, r2}
   b5836:	a853      	add	r0, sp, #332	; 0x14c
   b5838:	f7ff f822 	bl	b4880 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b583c:	f10a 03bc 	add.w	r3, sl, #188	; 0xbc
   b5840:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5842:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5846:	2104      	movs	r1, #4
   b5848:	ab1e      	add	r3, sp, #120	; 0x78
   b584a:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   b584e:	911f      	str	r1, [sp, #124]	; 0x7c
   b5850:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5854:	a850      	add	r0, sp, #320	; 0x140
   b5856:	f7ff fb51 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLineCTA = Railway(
   b585a:	a950      	add	r1, sp, #320	; 0x140
   b585c:	9102      	str	r1, [sp, #8]
   b585e:	a953      	add	r1, sp, #332	; 0x14c
   b5860:	e9cd 4100 	strd	r4, r1, [sp]
   b5864:	a956      	add	r1, sp, #344	; 0x158
   b5866:	460b      	mov	r3, r1
   b5868:	a959      	add	r1, sp, #356	; 0x164
   b586a:	460a      	mov	r2, r1
   b586c:	4826      	ldr	r0, [pc, #152]	; (b5908 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x72c>)
   b586e:	a95c      	add	r1, sp, #368	; 0x170
   b5870:	f7ff fbc4 	bl	b4ffc <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5874:	a850      	add	r0, sp, #320	; 0x140
   b5876:	f7fe ff79 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b587a:	a853      	add	r0, sp, #332	; 0x14c
   b587c:	f7fe ff97 	bl	b47ae <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5880:	a87a      	add	r0, sp, #488	; 0x1e8
   b5882:	f004 ff2f 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5886:	a874      	add	r0, sp, #464	; 0x1d0
   b5888:	f004 ff2c 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b588c:	4620      	mov	r0, r4
   b588e:	f004 ff29 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5892:	a856      	add	r0, sp, #344	; 0x158
   b5894:	f7fe ff6a 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5898:	a859      	add	r0, sp, #356	; 0x164
   b589a:	e037      	b.n	b590c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x730>
   b589c:	000bd8dc 	.word	0x000bd8dc
   b58a0:	000bd8e2 	.word	0x000bd8e2
   b58a4:	000bd8e9 	.word	0x000bd8e9
   b58a8:	20035594 	.word	0x20035594
   b58ac:	42276997 	.word	0x42276997
   b58b0:	c2af40b8 	.word	0xc2af40b8
   b58b4:	422781fe 	.word	0x422781fe
   b58b8:	42278afb 	.word	0x42278afb
   b58bc:	c2af4494 	.word	0xc2af4494
   b58c0:	42278971 	.word	0x42278971
   b58c4:	c2af6479 	.word	0xc2af6479
   b58c8:	000bda54 	.word	0x000bda54
   b58cc:	000bd8f0 	.word	0x000bd8f0
   b58d0:	000bd8f7 	.word	0x000bd8f7
   b58d4:	2003561c 	.word	0x2003561c
   b58d8:	4227631a 	.word	0x4227631a
   b58dc:	c2af4bd2 	.word	0xc2af4bd2
   b58e0:	42276ec4 	.word	0x42276ec4
   b58e4:	c2af4115 	.word	0xc2af4115
   b58e8:	422780b5 	.word	0x422780b5
   b58ec:	c2af4086 	.word	0xc2af4086
   b58f0:	42278200 	.word	0x42278200
   b58f4:	422781e1 	.word	0x422781e1
   b58f8:	c2af4476 	.word	0xc2af4476
   b58fc:	000bd8fe 	.word	0x000bd8fe
   b5900:	000bd905 	.word	0x000bd905
   b5904:	000bd90c 	.word	0x000bd90c
   b5908:	20037eac 	.word	0x20037eac
   b590c:	f7fe ff2e 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5910:	a85c      	add	r0, sp, #368	; 0x170
   b5912:	f7fe ff17 	bl	b4744 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b5916:	a980      	add	r1, sp, #512	; 0x200
   b5918:	911c      	str	r1, [sp, #112]	; 0x70
   b591a:	2107      	movs	r1, #7
   b591c:	ae12      	add	r6, sp, #72	; 0x48
   b591e:	911d      	str	r1, [sp, #116]	; 0x74
   b5920:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5924:	4633      	mov	r3, r6
   b5926:	a85c      	add	r0, sp, #368	; 0x170
      lat = la;
   b5928:	edcd da80 	vstr	s27, [sp, #512]	; 0x200
      lon = lo;
   b592c:	ed8d da81 	vstr	s26, [sp, #516]	; 0x204
      lat = la;
   b5930:	edcd ca82 	vstr	s25, [sp, #520]	; 0x208
      lon = lo;
   b5934:	ed8d ca83 	vstr	s24, [sp, #524]	; 0x20c
      lat = la;
   b5938:	edcd 8a84 	vstr	s17, [sp, #528]	; 0x210
      lon = lo;
   b593c:	ed8d 8a85 	vstr	s16, [sp, #532]	; 0x214
      lat = la;
   b5940:	edcd ba86 	vstr	s23, [sp, #536]	; 0x218
      lon = lo;
   b5944:	ed8d ba87 	vstr	s22, [sp, #540]	; 0x21c
      lat = la;
   b5948:	edcd aa88 	vstr	s21, [sp, #544]	; 0x220
      lon = lo;
   b594c:	ed8d aa89 	vstr	s20, [sp, #548]	; 0x224
      lat = la;
   b5950:	edcd 9a8a 	vstr	s19, [sp, #552]	; 0x228
      lon = lo;
   b5954:	ed8d 9a8b 	vstr	s18, [sp, #556]	; 0x22c
      lat = la;
   b5958:	edcd 8a8c 	vstr	s17, [sp, #560]	; 0x230
      lon = lo;
   b595c:	ed8d 8a8d 	vstr	s16, [sp, #564]	; 0x234
   b5960:	f7fe ff5a 	bl	b4818 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5964:	f10a 0e28 	add.w	lr, sl, #40	; 0x28
   b5968:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b596c:	46dc      	mov	ip, fp
   b596e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5972:	9906      	ldr	r1, [sp, #24]
   b5974:	9a05      	ldr	r2, [sp, #20]
   b5976:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
   b597a:	c903      	ldmia	r1, {r0, r1}
   b597c:	e9c2 0100 	strd	r0, r1, [r2]
   b5980:	2106      	movs	r1, #6
   b5982:	911b      	str	r1, [sp, #108]	; 0x6c
   b5984:	e897 0006 	ldmia.w	r7, {r1, r2}
   b5988:	a859      	add	r0, sp, #356	; 0x164
   b598a:	f7ff fab7 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b598e:	f10a 0340 	add.w	r3, sl, #64	; 0x40
   b5992:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5994:	af63      	add	r7, sp, #396	; 0x18c
   b5996:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b599a:	2104      	movs	r1, #4
   b599c:	ab18      	add	r3, sp, #96	; 0x60
   b599e:	9718      	str	r7, [sp, #96]	; 0x60
   b59a0:	9119      	str	r1, [sp, #100]	; 0x64
   b59a2:	e893 0006 	ldmia.w	r3, {r1, r2}
   b59a6:	a856      	add	r0, sp, #344	; 0x158
   b59a8:	f7ff faa8 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b59ac:	4620      	mov	r0, r4
   b59ae:	49b8      	ldr	r1, [pc, #736]	; (b5c90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab4>)
   b59b0:	f8df 832c 	ldr.w	r8, [pc, #812]	; b5ce0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb04>
   b59b4:	f7fe fba8 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b59b8:	a874      	add	r0, sp, #464	; 0x1d0
   b59ba:	49b6      	ldr	r1, [pc, #728]	; (b5c94 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab8>)
   b59bc:	f7fe fba4 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b59c0:	a87a      	add	r0, sp, #488	; 0x1e8
   b59c2:	49b5      	ldr	r1, [pc, #724]	; (b5c98 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xabc>)
   b59c4:	f7fe fba0 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b59c8:	ab74      	add	r3, sp, #464	; 0x1d0
   b59ca:	9316      	str	r3, [sp, #88]	; 0x58
   b59cc:	2302      	movs	r3, #2
   b59ce:	9317      	str	r3, [sp, #92]	; 0x5c
   b59d0:	af10      	add	r7, sp, #64	; 0x40
   b59d2:	aa16      	add	r2, sp, #88	; 0x58
   b59d4:	ca06      	ldmia	r2, {r1, r2}
   b59d6:	463b      	mov	r3, r7
   b59d8:	a853      	add	r0, sp, #332	; 0x14c
   b59da:	f7fe ff51 	bl	b4880 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b59de:	f10a 0250 	add.w	r2, sl, #80	; 0x50
   b59e2:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b59e4:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b59e8:	2204      	movs	r2, #4
   b59ea:	ab14      	add	r3, sp, #80	; 0x50
   b59ec:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
   b59f0:	9215      	str	r2, [sp, #84]	; 0x54
   b59f2:	e893 0006 	ldmia.w	r3, {r1, r2}
   b59f6:	a850      	add	r0, sp, #320	; 0x140
   b59f8:	f7ff fa80 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway purpleLineCTA = Railway(
   b59fc:	ab50      	add	r3, sp, #320	; 0x140
   b59fe:	9302      	str	r3, [sp, #8]
   b5a00:	ab53      	add	r3, sp, #332	; 0x14c
   b5a02:	aa59      	add	r2, sp, #356	; 0x164
   b5a04:	a95c      	add	r1, sp, #368	; 0x170
   b5a06:	e9cd 4300 	strd	r4, r3, [sp]
   b5a0a:	48a4      	ldr	r0, [pc, #656]	; (b5c9c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xac0>)
   b5a0c:	ab56      	add	r3, sp, #344	; 0x158
   b5a0e:	f7ff faf5 	bl	b4ffc <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5a12:	a850      	add	r0, sp, #320	; 0x140
   b5a14:	f7fe feaa 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5a18:	a853      	add	r0, sp, #332	; 0x14c
   b5a1a:	f7fe fec8 	bl	b47ae <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5a1e:	a87a      	add	r0, sp, #488	; 0x1e8
   b5a20:	f004 fe60 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5a24:	a874      	add	r0, sp, #464	; 0x1d0
   b5a26:	f004 fe5d 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5a2a:	4620      	mov	r0, r4
   b5a2c:	f004 fe5a 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5a30:	a856      	add	r0, sp, #344	; 0x158
   b5a32:	f7fe fe9b 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5a36:	a859      	add	r0, sp, #356	; 0x164
   b5a38:	f7fe fe98 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5a3c:	a85c      	add	r0, sp, #368	; 0x170
   b5a3e:	f7fe fe81 	bl	b4744 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5a42:	4b97      	ldr	r3, [pc, #604]	; (b5ca0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xac4>)
   b5a44:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b5a46:	4b97      	ldr	r3, [pc, #604]	; (b5ca4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xac8>)
   b5a48:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b5a4a:	4b97      	ldr	r3, [pc, #604]	; (b5ca8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xacc>)
   b5a4c:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b5a4e:	4b97      	ldr	r3, [pc, #604]	; (b5cac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xad0>)
   b5a50:	9383      	str	r3, [sp, #524]	; 0x20c
      lat = la;
   b5a52:	4b97      	ldr	r3, [pc, #604]	; (b5cb0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xad4>)
   b5a54:	9384      	str	r3, [sp, #528]	; 0x210
      lon = lo;
   b5a56:	4b97      	ldr	r3, [pc, #604]	; (b5cb4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xad8>)
   b5a58:	9385      	str	r3, [sp, #532]	; 0x214
);
   b5a5a:	ab80      	add	r3, sp, #512	; 0x200
   b5a5c:	9312      	str	r3, [sp, #72]	; 0x48
   b5a5e:	2308      	movs	r3, #8
   b5a60:	9313      	str	r3, [sp, #76]	; 0x4c
   b5a62:	e896 0006 	ldmia.w	r6, {r1, r2}
   b5a66:	ab09      	add	r3, sp, #36	; 0x24
   b5a68:	a85c      	add	r0, sp, #368	; 0x170
   b5a6a:	f10a 06cc 	add.w	r6, sl, #204	; 0xcc
      lat = la;
   b5a6e:	edcd 8a86 	vstr	s17, [sp, #536]	; 0x218
      lon = lo;
   b5a72:	ed8d 8a87 	vstr	s16, [sp, #540]	; 0x21c
      lat = la;
   b5a76:	edcd 9a88 	vstr	s19, [sp, #544]	; 0x220
      lon = lo;
   b5a7a:	ed8d 9a89 	vstr	s18, [sp, #548]	; 0x224
      lat = la;
   b5a7e:	edcd aa8a 	vstr	s21, [sp, #552]	; 0x228
      lon = lo;
   b5a82:	ed8d aa8b 	vstr	s20, [sp, #556]	; 0x22c
      lat = la;
   b5a86:	edcd ba8c 	vstr	s23, [sp, #560]	; 0x230
      lon = lo;
   b5a8a:	ed8d ba8d 	vstr	s22, [sp, #564]	; 0x234
      lat = la;
   b5a8e:	edcd 8a8e 	vstr	s17, [sp, #568]	; 0x238
      lon = lo;
   b5a92:	ed8d 8a8f 	vstr	s16, [sp, #572]	; 0x23c
   b5a96:	f7fe febf 	bl	b4818 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5a9a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5a9c:	46dc      	mov	ip, fp
   b5a9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5aa2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   b5aa6:	9b05      	ldr	r3, [sp, #20]
   b5aa8:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
   b5aac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b5ab0:	2307      	movs	r3, #7
   b5ab2:	9311      	str	r3, [sp, #68]	; 0x44
   b5ab4:	e897 0006 	ldmia.w	r7, {r1, r2}
   b5ab8:	a859      	add	r0, sp, #356	; 0x164
   b5aba:	f7ff fa1f 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5abe:	f10a 03e8 	add.w	r3, sl, #232	; 0xe8
   b5ac2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5ac4:	ae63      	add	r6, sp, #396	; 0x18c
   b5ac6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b5aca:	2204      	movs	r2, #4
   b5acc:	ab0e      	add	r3, sp, #56	; 0x38
   b5ace:	960e      	str	r6, [sp, #56]	; 0x38
   b5ad0:	920f      	str	r2, [sp, #60]	; 0x3c
   b5ad2:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5ad6:	a856      	add	r0, sp, #344	; 0x158
   b5ad8:	f7ff fa10 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5adc:	4620      	mov	r0, r4
   b5ade:	4976      	ldr	r1, [pc, #472]	; (b5cb8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xadc>)
   b5ae0:	f7fe fb12 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5ae4:	a874      	add	r0, sp, #464	; 0x1d0
   b5ae6:	4975      	ldr	r1, [pc, #468]	; (b5cbc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae0>)
   b5ae8:	f7fe fb0e 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5aec:	a87a      	add	r0, sp, #488	; 0x1e8
   b5aee:	4974      	ldr	r1, [pc, #464]	; (b5cc0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae4>)
   b5af0:	f7fe fb0a 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5af4:	ab74      	add	r3, sp, #464	; 0x1d0
   b5af6:	930c      	str	r3, [sp, #48]	; 0x30
   b5af8:	2302      	movs	r3, #2
   b5afa:	930d      	str	r3, [sp, #52]	; 0x34
   b5afc:	aa0c      	add	r2, sp, #48	; 0x30
   b5afe:	ab08      	add	r3, sp, #32
   b5b00:	ca06      	ldmia	r2, {r1, r2}
   b5b02:	a853      	add	r0, sp, #332	; 0x14c
   b5b04:	f10a 0af8 	add.w	sl, sl, #248	; 0xf8
   b5b08:	f7fe feba 	bl	b4880 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5b0c:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
   b5b10:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5b14:	2204      	movs	r2, #4
   b5b16:	ab0a      	add	r3, sp, #40	; 0x28
   b5b18:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b5b1c:	920b      	str	r2, [sp, #44]	; 0x2c
   b5b1e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5b22:	a850      	add	r0, sp, #320	; 0x140
   b5b24:	f7ff f9ea 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway pinkLineCTA = Railway(
   b5b28:	ab50      	add	r3, sp, #320	; 0x140
   b5b2a:	9302      	str	r3, [sp, #8]
   b5b2c:	ab53      	add	r3, sp, #332	; 0x14c
   b5b2e:	aa59      	add	r2, sp, #356	; 0x164
   b5b30:	a95c      	add	r1, sp, #368	; 0x170
   b5b32:	e9cd 4300 	strd	r4, r3, [sp]
   b5b36:	4863      	ldr	r0, [pc, #396]	; (b5cc4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae8>)
   b5b38:	ab56      	add	r3, sp, #344	; 0x158
   b5b3a:	f7ff fa5f 	bl	b4ffc <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5b3e:	a850      	add	r0, sp, #320	; 0x140
   b5b40:	f7fe fe14 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5b44:	a853      	add	r0, sp, #332	; 0x14c
   b5b46:	f7fe fe32 	bl	b47ae <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5b4a:	a87a      	add	r0, sp, #488	; 0x1e8
   b5b4c:	f004 fdca 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b50:	a874      	add	r0, sp, #464	; 0x1d0
   b5b52:	f004 fdc7 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b56:	4620      	mov	r0, r4
   b5b58:	f004 fdc4 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b5c:	a856      	add	r0, sp, #344	; 0x158
   b5b5e:	f7fe fe05 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5b62:	a859      	add	r0, sp, #356	; 0x164
   b5b64:	f7fe fe02 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5b68:	a85c      	add	r0, sp, #368	; 0x170
   b5b6a:	f7fe fdeb 	bl	b4744 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5b6e:	4b56      	ldr	r3, [pc, #344]	; (b5cc8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaec>)
std::vector<int> slaveCountExpected = {5}; //green adds 2, purple adds 0, every other line adds 1 (7 for full CTA without yellow line)
   b5b70:	4856      	ldr	r0, [pc, #344]	; (b5ccc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaf0>)
   b5b72:	609d      	str	r5, [r3, #8]
   b5b74:	e9c3 5500 	strd	r5, r5, [r3]
   b5b78:	4b55      	ldr	r3, [pc, #340]	; (b5cd0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaf4>)
   b5b7a:	e9c3 5500 	strd	r5, r5, [r3]
   b5b7e:	609d      	str	r5, [r3, #8]
   b5b80:	2305      	movs	r3, #5
   b5b82:	9380      	str	r3, [sp, #512]	; 0x200
   b5b84:	ab80      	add	r3, sp, #512	; 0x200
   b5b86:	9363      	str	r3, [sp, #396]	; 0x18c
   b5b88:	9b07      	ldr	r3, [sp, #28]
   b5b8a:	9364      	str	r3, [sp, #400]	; 0x190
   b5b8c:	e9d6 1200 	ldrd	r1, r2, [r6]
   b5b90:	f7ff f9b4 	bl	b4efc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5b94:	4b4f      	ldr	r3, [pc, #316]	; (b5cd4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaf8>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b5b96:	4950      	ldr	r1, [pc, #320]	; (b5cd8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xafc>)
   b5b98:	609d      	str	r5, [r3, #8]
   b5b9a:	e9c3 5500 	strd	r5, r5, [r3]
   b5b9e:	4b4f      	ldr	r3, [pc, #316]	; (b5cdc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb00>)
   b5ba0:	484f      	ldr	r0, [pc, #316]	; (b5ce0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb04>)
   b5ba2:	609d      	str	r5, [r3, #8]
   b5ba4:	e9c3 5500 	strd	r5, r5, [r3]
   b5ba8:	f002 fcca 	bl	b8540 <_ZN8particle7BleUuidC1EPKc>
   b5bac:	4e4d      	ldr	r6, [pc, #308]	; (b5ce4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb08>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b5bae:	494e      	ldr	r1, [pc, #312]	; (b5ce8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb0c>)
   b5bb0:	484e      	ldr	r0, [pc, #312]	; (b5cec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb10>)
   b5bb2:	f002 fcc5 	bl	b8540 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b5bb6:	494e      	ldr	r1, [pc, #312]	; (b5cf0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb14>)
   b5bb8:	484a      	ldr	r0, [pc, #296]	; (b5ce4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb08>)
   b5bba:	f002 fcc1 	bl	b8540 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b5bbe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5bc0:	46a2      	mov	sl, r4
   b5bc2:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
   b5bc6:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b5bca:	46c1      	mov	r9, r8
   b5bcc:	f8d6 c000 	ldr.w	ip, [r6]
   b5bd0:	f8ca c000 	str.w	ip, [sl]
   b5bd4:	465e      	mov	r6, fp
   b5bd6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5bd8:	f859 3910 	ldr.w	r3, [r9], #-16
   b5bdc:	9306      	str	r3, [sp, #24]
   b5bde:	9b05      	ldr	r3, [sp, #20]
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b5be0:	f8df e128 	ldr.w	lr, [pc, #296]	; b5d0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb30>
   b5be4:	461a      	mov	r2, r3
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b5be6:	4626      	mov	r6, r4
   b5be8:	9b06      	ldr	r3, [sp, #24]
   b5bea:	6013      	str	r3, [r2, #0]
   b5bec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5bee:	af74      	add	r7, sp, #464	; 0x1d0
      constexpr __shared_count() noexcept : _M_pi(0)
   b5bf0:	e9ce 5500 	strd	r5, r5, [lr]
   b5bf4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b5bf6:	f8c7 c000 	str.w	ip, [r7]
        BleUuid sUuid(svcUuid);
   b5bfa:	46dc      	mov	ip, fp
   b5bfc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5c00:	ae80      	add	r6, sp, #512	; 0x200
   b5c02:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5c04:	9b06      	ldr	r3, [sp, #24]
   b5c06:	6033      	str	r3, [r6, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5c08:	ab80      	add	r3, sp, #512	; 0x200
   b5c0a:	9300      	str	r3, [sp, #0]
   b5c0c:	4670      	mov	r0, lr
   b5c0e:	ab74      	add	r3, sp, #464	; 0x1d0
   b5c10:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5c14:	4937      	ldr	r1, [pc, #220]	; (b5cf4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb18>)
   b5c16:	f04f 0210 	mov.w	r2, #16
   b5c1a:	f003 f989 	bl	b8f30 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b5c1e:	f8df c0cc 	ldr.w	ip, [pc, #204]	; b5cec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb10>
   b5c22:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5c26:	46a6      	mov	lr, r4
   b5c28:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5c2c:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b5c30:	f8dc e000 	ldr.w	lr, [ip]
   b5c34:	f8ca e000 	str.w	lr, [sl]
   b5c38:	46dc      	mov	ip, fp
   b5c3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5c3e:	9b05      	ldr	r3, [sp, #20]
   b5c40:	f8d8 9000 	ldr.w	r9, [r8]
   b5c44:	f8c3 9000 	str.w	r9, [r3]
        BleUuid cUuid(charUuid);
   b5c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b5c4a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; b5d10 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb34>
   b5c4e:	f50d 7ce8 	add.w	ip, sp, #464	; 0x1d0
        BleUuid sUuid(svcUuid);
   b5c52:	465c      	mov	r4, fp
        BleUuid cUuid(charUuid);
   b5c54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
      constexpr __shared_count() noexcept : _M_pi(0)
   b5c58:	e9c8 5500 	strd	r5, r5, [r8]
   b5c5c:	f8c7 e000 	str.w	lr, [r7]
        BleUuid sUuid(svcUuid);
   b5c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5c62:	af80      	add	r7, sp, #512	; 0x200
   b5c64:	c70f      	stmia	r7!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5c66:	4b24      	ldr	r3, [pc, #144]	; (b5cf8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb1c>)
        BleUuid sUuid(svcUuid);
   b5c68:	f8c6 9000 	str.w	r9, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5c6c:	9301      	str	r3, [sp, #4]
   b5c6e:	ab80      	add	r3, sp, #512	; 0x200
   b5c70:	f04f 0204 	mov.w	r2, #4
   b5c74:	9300      	str	r3, [sp, #0]
   b5c76:	4640      	mov	r0, r8
   b5c78:	ab74      	add	r3, sp, #464	; 0x1d0
   b5c7a:	4920      	ldr	r1, [pc, #128]	; (b5cfc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb20>)
   b5c7c:	9502      	str	r5, [sp, #8]
   b5c7e:	f003 f957 	bl	b8f30 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b5c82:	491f      	ldr	r1, [pc, #124]	; (b5d00 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb24>)
   b5c84:	481f      	ldr	r0, [pc, #124]	; (b5d04 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb28>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b5c86:	4c20      	ldr	r4, [pc, #128]	; (b5d08 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb2c>)
   b5c88:	f003 fe75 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
   b5c8c:	e042      	b.n	b5d14 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb38>
   b5c8e:	bf00      	nop
   b5c90:	000bd913 	.word	0x000bd913
   b5c94:	000bd91a 	.word	0x000bd91a
   b5c98:	000bd921 	.word	0x000bd921
   b5c9c:	2003e550 	.word	0x2003e550
   b5ca0:	42276a76 	.word	0x42276a76
   b5ca4:	c2af692b 	.word	0xc2af692b
   b5ca8:	42276b5f 	.word	0x42276b5f
   b5cac:	c2af56cd 	.word	0xc2af56cd
   b5cb0:	42278a2d 	.word	0x42278a2d
   b5cb4:	c2af56d8 	.word	0xc2af56d8
   b5cb8:	000bd928 	.word	0x000bd928
   b5cbc:	000bd92d 	.word	0x000bd92d
   b5cc0:	000bd934 	.word	0x000bd934
   b5cc4:	2003e4e4 	.word	0x2003e4e4
   b5cc8:	20035604 	.word	0x20035604
   b5ccc:	2003e6a0 	.word	0x2003e6a0
   b5cd0:	20035610 	.word	0x20035610
   b5cd4:	20035518 	.word	0x20035518
   b5cd8:	000bd93b 	.word	0x000bd93b
   b5cdc:	2003e690 	.word	0x2003e690
   b5ce0:	200354dc 	.word	0x200354dc
   b5ce4:	20035504 	.word	0x20035504
   b5ce8:	000bd960 	.word	0x000bd960
   b5cec:	200354f0 	.word	0x200354f0
   b5cf0:	000bd985 	.word	0x000bd985
   b5cf4:	000bd9aa 	.word	0x000bd9aa
   b5cf8:	000b4955 	.word	0x000b4955
   b5cfc:	000bd9ad 	.word	0x000bd9ad
   b5d00:	000bdbca 	.word	0x000bdbca
   b5d04:	2003e628 	.word	0x2003e628
   b5d08:	20037f18 	.word	0x20037f18
   b5d0c:	2003e6ac 	.word	0x2003e6ac
   b5d10:	2003e688 	.word	0x2003e688
   b5d14:	484c      	ldr	r0, [pc, #304]	; (b5e48 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc6c>)
   b5d16:	f003 fc3b 	bl	b9590 <_ZN9IPAddressC1Ev>
   b5d1a:	494c      	ldr	r1, [pc, #304]	; (b5e4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc70>)
   b5d1c:	484c      	ldr	r0, [pc, #304]	; (b5e50 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc74>)
   b5d1e:	f003 fe2a 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
   b5d22:	494a      	ldr	r1, [pc, #296]	; (b5e4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc70>)
   b5d24:	484b      	ldr	r0, [pc, #300]	; (b5e54 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc78>)
   b5d26:	f003 fe26 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b5d2a:	4948      	ldr	r1, [pc, #288]	; (b5e4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc70>)
   b5d2c:	484a      	ldr	r0, [pc, #296]	; (b5e58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc7c>)
   b5d2e:	f003 fe22 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
HttpClient http;
   b5d32:	484a      	ldr	r0, [pc, #296]	; (b5e5c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc80>)
   b5d34:	f001 f950 	bl	b6fd8 <_ZN10HttpClientC1Ev>
   b5d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5d3c:	9300      	str	r3, [sp, #0]
   b5d3e:	f242 7210 	movw	r2, #10000	; 0x2710
   b5d42:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b5d46:	4b46      	ldr	r3, [pc, #280]	; (b5e60 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc84>)
   b5d48:	4620      	mov	r0, r4
   b5d4a:	f001 fb1d 	bl	b7388 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b5d4e:	4b45      	ldr	r3, [pc, #276]	; (b5e64 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc88>)
String SSID = "";
   b5d50:	493e      	ldr	r1, [pc, #248]	; (b5e4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc70>)
   b5d52:	6023      	str	r3, [r4, #0]
   b5d54:	4844      	ldr	r0, [pc, #272]	; (b5e68 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc8c>)
   b5d56:	f003 fe0e 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
String password = "";
   b5d5a:	493c      	ldr	r1, [pc, #240]	; (b5e4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc70>)
   b5d5c:	4843      	ldr	r0, [pc, #268]	; (b5e6c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc90>)
   b5d5e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
   b5d62:	ecbd 8b0e 	vpop	{d8-d14}
   b5d66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
String password = "";
   b5d6a:	f003 be04 	b.w	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
   b5d6e:	483f      	ldr	r0, [pc, #252]	; (b5e6c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc90>)
   b5d70:	f003 fdb6 	bl	b98e0 <_ZN6StringD1Ev>
String SSID = "";
   b5d74:	483c      	ldr	r0, [pc, #240]	; (b5e68 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc8c>)
   b5d76:	f003 fdb3 	bl	b98e0 <_ZN6StringD1Ev>
JsonParserStatic<10000, 1000> parser;
   b5d7a:	483d      	ldr	r0, [pc, #244]	; (b5e70 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc94>)
   b5d7c:	f7fe f99c 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5d80:	4b36      	ldr	r3, [pc, #216]	; (b5e5c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc80>)
   b5d82:	4a3c      	ldr	r2, [pc, #240]	; (b5e74 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc98>)
	if (_M_pi != nullptr)
   b5d84:	699c      	ldr	r4, [r3, #24]
   b5d86:	601a      	str	r2, [r3, #0]
   b5d88:	b17c      	cbz	r4, b5daa <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbce>
      if (--_M_use_count == 0)
   b5d8a:	6863      	ldr	r3, [r4, #4]
   b5d8c:	3b01      	subs	r3, #1
   b5d8e:	6063      	str	r3, [r4, #4]
   b5d90:	b95b      	cbnz	r3, b5daa <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbce>
          _M_dispose();
   b5d92:	6823      	ldr	r3, [r4, #0]
   b5d94:	4620      	mov	r0, r4
   b5d96:	689b      	ldr	r3, [r3, #8]
   b5d98:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5d9a:	68a3      	ldr	r3, [r4, #8]
   b5d9c:	3b01      	subs	r3, #1
   b5d9e:	60a3      	str	r3, [r4, #8]
   b5da0:	b91b      	cbnz	r3, b5daa <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbce>
            _M_destroy();
   b5da2:	6823      	ldr	r3, [r4, #0]
   b5da4:	4620      	mov	r0, r4
   b5da6:	68db      	ldr	r3, [r3, #12]
   b5da8:	4798      	blx	r3
   b5daa:	482b      	ldr	r0, [pc, #172]	; (b5e58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc7c>)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5dac:	4c32      	ldr	r4, [pc, #200]	; (b5e78 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc9c>)
   b5dae:	f003 fd97 	bl	b98e0 <_ZN6StringD1Ev>
} http_request_t;
   b5db2:	4828      	ldr	r0, [pc, #160]	; (b5e54 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc78>)
   b5db4:	f003 fd94 	bl	b98e0 <_ZN6StringD1Ev>
   b5db8:	4825      	ldr	r0, [pc, #148]	; (b5e50 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc74>)
   b5dba:	f003 fd91 	bl	b98e0 <_ZN6StringD1Ev>
   b5dbe:	482f      	ldr	r0, [pc, #188]	; (b5e7c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xca0>)
   b5dc0:	f003 fd8e 	bl	b98e0 <_ZN6StringD1Ev>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b5dc4:	482e      	ldr	r0, [pc, #184]	; (b5e80 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xca4>)
   b5dc6:	f002 fd9a 	bl	b88fe <_ZN8particle17BleCharacteristicD1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b5dca:	482e      	ldr	r0, [pc, #184]	; (b5e84 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xca8>)
   b5dcc:	f002 fd97 	bl	b88fe <_ZN8particle17BleCharacteristicD1Ev>
      }
   b5dd0:	482d      	ldr	r0, [pc, #180]	; (b5e88 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcac>)
   b5dd2:	f7fe fccb 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5dd6:	482d      	ldr	r0, [pc, #180]	; (b5e8c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcb0>)
   b5dd8:	f7fe fcc8 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5ddc:	482c      	ldr	r0, [pc, #176]	; (b5e90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcb4>)
   b5dde:	f7fe fcc5 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
std::vector<Railway> ctaRailways;
   b5de2:	482c      	ldr	r0, [pc, #176]	; (b5e94 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcb8>)
   b5de4:	f7ff f845 	bl	b4e72 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
	__destroy(__first, __last);
   b5de8:	e9d4 0100 	ldrd	r0, r1, [r4]
   b5dec:	f7ff f84f 	bl	b4e8e <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   b5df0:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b5df2:	b118      	cbz	r0, b5dfc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b5df4:	68a1      	ldr	r1, [r4, #8]
   b5df6:	1a09      	subs	r1, r1, r0
   b5df8:	f7fe f953 	bl	b40a2 <_ZdlPvj>
Railway pinkLineCTA = Railway(
   b5dfc:	4826      	ldr	r0, [pc, #152]	; (b5e98 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcbc>)
   b5dfe:	f7ff f80d 	bl	b4e1c <_ZN7RailwayD1Ev>
Railway purpleLineCTA = Railway(
   b5e02:	4826      	ldr	r0, [pc, #152]	; (b5e9c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcc0>)
   b5e04:	f7ff f80a 	bl	b4e1c <_ZN7RailwayD1Ev>
Railway orangeLineCTA = Railway(
   b5e08:	4825      	ldr	r0, [pc, #148]	; (b5ea0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcc4>)
   b5e0a:	f7ff f807 	bl	b4e1c <_ZN7RailwayD1Ev>
Railway greenLineCTA = Railway(
   b5e0e:	4825      	ldr	r0, [pc, #148]	; (b5ea4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcc8>)
   b5e10:	f7ff f804 	bl	b4e1c <_ZN7RailwayD1Ev>
Railway brownLineCTA = Railway(
   b5e14:	4824      	ldr	r0, [pc, #144]	; (b5ea8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xccc>)
   b5e16:	f7ff f801 	bl	b4e1c <_ZN7RailwayD1Ev>
Railway blueLineCTA = Railway(
   b5e1a:	4824      	ldr	r0, [pc, #144]	; (b5eac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcd0>)
   b5e1c:	f7fe fffe 	bl	b4e1c <_ZN7RailwayD1Ev>
Railway redLineCTA = Railway(
   b5e20:	4823      	ldr	r0, [pc, #140]	; (b5eb0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcd4>)
   b5e22:	f7fe fffb 	bl	b4e1c <_ZN7RailwayD1Ev>
        if (wakeupSource_) {
   b5e26:	6830      	ldr	r0, [r6, #0]
   b5e28:	b138      	cbz	r0, b5e3a <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc5e>
   b5e2a:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
   b5e2e:	ecbd 8b0e 	vpop	{d8-d14}
   b5e32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            free(wakeupSource_);
   b5e36:	f002 b92f 	b.w	b8098 <free>
   b5e3a:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
   b5e3e:	ecbd 8b0e 	vpop	{d8-d14}
   b5e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5e46:	bf00      	nop
   b5e48:	2003e638 	.word	0x2003e638
   b5e4c:	000bdbca 	.word	0x000bdbca
   b5e50:	2003e650 	.word	0x2003e650
   b5e54:	2003e664 	.word	0x2003e664
   b5e58:	2003e678 	.word	0x2003e678
   b5e5c:	20035690 	.word	0x20035690
   b5e60:	2003a654 	.word	0x2003a654
   b5e64:	000bda74 	.word	0x000bda74
   b5e68:	200354c0 	.word	0x200354c0
   b5e6c:	2003e4d4 	.word	0x2003e4d4
   b5e70:	20037f18 	.word	0x20037f18
   b5e74:	000bded4 	.word	0x000bded4
   b5e78:	20035604 	.word	0x20035604
   b5e7c:	2003e628 	.word	0x2003e628
   b5e80:	2003e688 	.word	0x2003e688
   b5e84:	2003e6ac 	.word	0x2003e6ac
   b5e88:	2003e690 	.word	0x2003e690
   b5e8c:	20035518 	.word	0x20035518
   b5e90:	2003e6a0 	.word	0x2003e6a0
   b5e94:	20035610 	.word	0x20035610
   b5e98:	2003e4e4 	.word	0x2003e4e4
   b5e9c:	2003e550 	.word	0x2003e550
   b5ea0:	20037eac 	.word	0x20037eac
   b5ea4:	2003561c 	.word	0x2003561c
   b5ea8:	20035594 	.word	0x20035594
   b5eac:	20035528 	.word	0x20035528
   b5eb0:	2003e5bc 	.word	0x2003e5bc

000b5eb4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b5eb4:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b5eb6:	b510      	push	{r4, lr}
   b5eb8:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b5eba:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b5ebe:	d005      	beq.n	b5ecc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b5ec0:	4601      	mov	r1, r0
   b5ec2:	4622      	mov	r2, r4
   b5ec4:	4618      	mov	r0, r3
   b5ec6:	f005 fbcb 	bl	bb660 <memmove>
   b5eca:	4603      	mov	r3, r0
	}
   b5ecc:	1918      	adds	r0, r3, r4
   b5ece:	bd10      	pop	{r4, pc}

000b5ed0 <_ZN7RailwayC1ERKS_>:
class Railway{
   b5ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5ed4:	460d      	mov	r5, r1
   b5ed6:	4604      	mov	r4, r0
   b5ed8:	f7fe fd06 	bl	b48e8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5edc:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5ee0:	2600      	movs	r6, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5ee2:	1ac9      	subs	r1, r1, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5ee4:	e9c4 6603 	strd	r6, r6, [r4, #12]
   b5ee8:	6166      	str	r6, [r4, #20]
      { _M_create_storage(__n); }
   b5eea:	1089      	asrs	r1, r1, #2
   b5eec:	f104 000c 	add.w	r0, r4, #12
   b5ef0:	f7fe ff74 	bl	b4ddc <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
			      _Category>::__copy_m(__first, __last, __result);
   b5ef4:	68e2      	ldr	r2, [r4, #12]
   b5ef6:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
   b5efa:	f7ff ffdb 	bl	b5eb4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b5efe:	f105 0118 	add.w	r1, r5, #24
	this->_M_impl._M_finish =
   b5f02:	6120      	str	r0, [r4, #16]
   b5f04:	f104 0018 	add.w	r0, r4, #24
   b5f08:	f7fe ffde 	bl	b4ec8 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f0c:	e9d5 3709 	ldrd	r3, r7, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5f10:	4826      	ldr	r0, [pc, #152]	; (b5fac <_ZN7RailwayC1ERKS_+0xdc>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5f12:	62e6      	str	r6, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f14:	1aff      	subs	r7, r7, r3
   b5f16:	10bb      	asrs	r3, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5f18:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5f1c:	4358      	muls	r0, r3
   b5f1e:	f7fe f8e1 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5f22:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5f26:	4407      	add	r7, r0
   b5f28:	62e7      	str	r7, [r4, #44]	; 0x2c
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5f2a:	e9d5 7809 	ldrd	r7, r8, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5f2e:	4606      	mov	r6, r0
   b5f30:	45b8      	cmp	r8, r7
   b5f32:	d007      	beq.n	b5f44 <_ZN7RailwayC1ERKS_+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5f34:	b11e      	cbz	r6, b5f3e <_ZN7RailwayC1ERKS_+0x6e>
   b5f36:	4639      	mov	r1, r7
   b5f38:	4630      	mov	r0, r6
   b5f3a:	f7fe ffc5 	bl	b4ec8 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5f3e:	360c      	adds	r6, #12
   b5f40:	370c      	adds	r7, #12
   b5f42:	e7f5      	b.n	b5f30 <_ZN7RailwayC1ERKS_+0x60>
	this->_M_impl._M_finish =
   b5f44:	62a6      	str	r6, [r4, #40]	; 0x28
   b5f46:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b5f4a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b5f4e:	f7fe f965 	bl	b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f52:	e9d5 3712 	ldrd	r3, r7, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5f56:	4815      	ldr	r0, [pc, #84]	; (b5fac <_ZN7RailwayC1ERKS_+0xdc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f58:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5f5a:	2300      	movs	r3, #0
   b5f5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b5f60:	6523      	str	r3, [r4, #80]	; 0x50
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f62:	10fb      	asrs	r3, r7, #3
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5f64:	4358      	muls	r0, r3
   b5f66:	f7fe f909 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5f6a:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5f6e:	4407      	add	r7, r0
   b5f70:	6527      	str	r7, [r4, #80]	; 0x50
   b5f72:	e9d5 7812 	ldrd	r7, r8, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5f76:	4606      	mov	r6, r0
   b5f78:	45b8      	cmp	r8, r7
   b5f7a:	d007      	beq.n	b5f8c <_ZN7RailwayC1ERKS_+0xbc>
   b5f7c:	b11e      	cbz	r6, b5f86 <_ZN7RailwayC1ERKS_+0xb6>
   b5f7e:	4639      	mov	r1, r7
   b5f80:	4630      	mov	r0, r6
   b5f82:	f7fe f94b 	bl	b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b5f86:	3618      	adds	r6, #24
   b5f88:	3718      	adds	r7, #24
   b5f8a:	e7f5      	b.n	b5f78 <_ZN7RailwayC1ERKS_+0xa8>
	this->_M_impl._M_finish =
   b5f8c:	64e6      	str	r6, [r4, #76]	; 0x4c
   b5f8e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b5f90:	6563      	str	r3, [r4, #84]	; 0x54
   b5f92:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b5f94:	65a3      	str	r3, [r4, #88]	; 0x58
   b5f96:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b5f98:	65e3      	str	r3, [r4, #92]	; 0x5c
   b5f9a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b5f9c:	6623      	str	r3, [r4, #96]	; 0x60
   b5f9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b5fa0:	6663      	str	r3, [r4, #100]	; 0x64
   b5fa2:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b5fa4:	66a3      	str	r3, [r4, #104]	; 0x68
   b5fa6:	4620      	mov	r0, r4
   b5fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5fac:	aaaaaaab 	.word	0xaaaaaaab

000b5fb0 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b5fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5fb2:	e9d1 3700 	ldrd	r3, r7, [r1]
   b5fb6:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5fb8:	2300      	movs	r3, #0
   b5fba:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   b5fbe:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5fc0:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5fc2:	480d      	ldr	r0, [pc, #52]	; (b5ff8 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x48>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5fc4:	10bb      	asrs	r3, r7, #2
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5fc6:	4358      	muls	r0, r3
      vector(const vector& __x)
   b5fc8:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5fca:	f7fe f8c5 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5fce:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5fd2:	4407      	add	r7, r0
   b5fd4:	60a7      	str	r7, [r4, #8]
   b5fd6:	e9d6 6700 	ldrd	r6, r7, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5fda:	4605      	mov	r5, r0
   b5fdc:	42b7      	cmp	r7, r6
   b5fde:	d007      	beq.n	b5ff0 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x40>
   b5fe0:	b11d      	cbz	r5, b5fea <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x3a>
   b5fe2:	4631      	mov	r1, r6
   b5fe4:	4628      	mov	r0, r5
   b5fe6:	f7ff ff73 	bl	b5ed0 <_ZN7RailwayC1ERKS_>
   b5fea:	356c      	adds	r5, #108	; 0x6c
   b5fec:	366c      	adds	r6, #108	; 0x6c
   b5fee:	e7f5      	b.n	b5fdc <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b5ff0:	6065      	str	r5, [r4, #4]
      }
   b5ff2:	4620      	mov	r0, r4
   b5ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5ff6:	bf00      	nop
   b5ff8:	684bda13 	.word	0x684bda13

000b5ffc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b5ffc:	b570      	push	{r4, r5, r6, lr}
   b5ffe:	4605      	mov	r5, r0
   b6000:	460e      	mov	r6, r1
   b6002:	4614      	mov	r4, r2
	      for (; __first != __last; ++__first, (void)++__cur)
   b6004:	42b5      	cmp	r5, r6
   b6006:	d00d      	beq.n	b6024 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x28>
   b6008:	b14c      	cbz	r4, b601e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x22>
   b600a:	4629      	mov	r1, r5
   b600c:	4620      	mov	r0, r4
   b600e:	f7ff ffcf 	bl	b5fb0 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b6012:	f105 010c 	add.w	r1, r5, #12
   b6016:	f104 000c 	add.w	r0, r4, #12
   b601a:	f7fe f8ff 	bl	b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b601e:	3524      	adds	r5, #36	; 0x24
   b6020:	3424      	adds	r4, #36	; 0x24
   b6022:	e7ef      	b.n	b6004 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x8>
	}
   b6024:	4620      	mov	r0, r4
   b6026:	bd70      	pop	{r4, r5, r6, pc}

000b6028 <_ZN7RailwayaSERKS_.isra.0>:
   b6028:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b602c:	4604      	mov	r4, r0
   b602e:	460d      	mov	r5, r1
   b6030:	f7fe f930 	bl	b4294 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
   b6034:	f105 020c 	add.w	r2, r5, #12
   b6038:	f104 030c 	add.w	r3, r4, #12
      if (&__x != this)
   b603c:	429a      	cmp	r2, r3
   b603e:	d025      	beq.n	b608c <_ZN7RailwayaSERKS_.isra.0+0x64>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6040:	e9d5 8103 	ldrd	r8, r1, [r5, #12]
			 - this->_M_impl._M_start); }
   b6044:	68e2      	ldr	r2, [r4, #12]
   b6046:	6963      	ldr	r3, [r4, #20]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6048:	eba1 0608 	sub.w	r6, r1, r8
			 - this->_M_impl._M_start); }
   b604c:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b604e:	429e      	cmp	r6, r3
   b6050:	d94a      	bls.n	b60e8 <_ZN7RailwayaSERKS_.isra.0+0xc0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6052:	2e00      	cmp	r6, #0
   b6054:	d046      	beq.n	b60e4 <_ZN7RailwayaSERKS_.isra.0+0xbc>
	if (__n > this->_M_max_size())
   b6056:	4b5d      	ldr	r3, [pc, #372]	; (b61cc <_ZN7RailwayaSERKS_.isra.0+0x1a4>)
   b6058:	429e      	cmp	r6, r3
   b605a:	d901      	bls.n	b6060 <_ZN7RailwayaSERKS_.isra.0+0x38>
	  std::__throw_bad_alloc();
   b605c:	f004 fb0a 	bl	ba674 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6060:	4630      	mov	r0, r6
   b6062:	9101      	str	r1, [sp, #4]
   b6064:	f7fe f817 	bl	b4096 <_Znwj>
   b6068:	9901      	ldr	r1, [sp, #4]
   b606a:	4607      	mov	r7, r0
   b606c:	463a      	mov	r2, r7
   b606e:	4640      	mov	r0, r8
   b6070:	f7ff ff20 	bl	b5eb4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b6074:	68e0      	ldr	r0, [r4, #12]
	if (__p)
   b6076:	b118      	cbz	r0, b6080 <_ZN7RailwayaSERKS_.isra.0+0x58>
			    - this->_M_impl._M_start);
   b6078:	6961      	ldr	r1, [r4, #20]
	::operator delete(__p
   b607a:	1a09      	subs	r1, r1, r0
   b607c:	f7fe f811 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b6080:	60e7      	str	r7, [r4, #12]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b6082:	4437      	add	r7, r6
   b6084:	6167      	str	r7, [r4, #20]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b6086:	68e3      	ldr	r3, [r4, #12]
   b6088:	4433      	add	r3, r6
   b608a:	6123      	str	r3, [r4, #16]
   b608c:	f105 0118 	add.w	r1, r5, #24
   b6090:	f104 0018 	add.w	r0, r4, #24
   b6094:	f7fe ff5c 	bl	b4f50 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
   b6098:	f105 0324 	add.w	r3, r5, #36	; 0x24
   b609c:	f104 0224 	add.w	r2, r4, #36	; 0x24
      if (&__x != this)
   b60a0:	4293      	cmp	r3, r2
   b60a2:	d045      	beq.n	b6130 <_ZN7RailwayaSERKS_.isra.0+0x108>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b60a4:	e9d5 6a09 	ldrd	r6, sl, [r5, #36]	; 0x24
			 - this->_M_impl._M_start); }
   b60a8:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   b60ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b60ae:	ebaa 0806 	sub.w	r8, sl, r6
			 - this->_M_impl._M_start); }
   b60b2:	eba3 0309 	sub.w	r3, r3, r9
	  if (__xlen > capacity())
   b60b6:	4543      	cmp	r3, r8
   b60b8:	d255      	bcs.n	b6166 <_ZN7RailwayaSERKS_.isra.0+0x13e>
	  pointer __result = this->_M_allocate(__n);
   b60ba:	4845      	ldr	r0, [pc, #276]	; (b61d0 <_ZN7RailwayaSERKS_.isra.0+0x1a8>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b60bc:	ea4f 03a8 	mov.w	r3, r8, asr #2
	  pointer __result = this->_M_allocate(__n);
   b60c0:	4358      	muls	r0, r3
   b60c2:	f7fe f80f 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b60c6:	4607      	mov	r7, r0
	  _ForwardIterator __cur = __result;
   b60c8:	4681      	mov	r9, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b60ca:	45b2      	cmp	sl, r6
   b60cc:	d020      	beq.n	b6110 <_ZN7RailwayaSERKS_.isra.0+0xe8>
   b60ce:	f1b9 0f00 	cmp.w	r9, #0
   b60d2:	d003      	beq.n	b60dc <_ZN7RailwayaSERKS_.isra.0+0xb4>
   b60d4:	4631      	mov	r1, r6
   b60d6:	4648      	mov	r0, r9
   b60d8:	f7fe fef6 	bl	b4ec8 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b60dc:	f109 090c 	add.w	r9, r9, #12
   b60e0:	360c      	adds	r6, #12
   b60e2:	e7f2      	b.n	b60ca <_ZN7RailwayaSERKS_.isra.0+0xa2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b60e4:	4637      	mov	r7, r6
   b60e6:	e7c1      	b.n	b606c <_ZN7RailwayaSERKS_.isra.0+0x44>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b60e8:	6923      	ldr	r3, [r4, #16]
   b60ea:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b60ec:	429e      	cmp	r6, r3
   b60ee:	d803      	bhi.n	b60f8 <_ZN7RailwayaSERKS_.isra.0+0xd0>
   b60f0:	4640      	mov	r0, r8
   b60f2:	f7ff fedf 	bl	b5eb4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
    { return std::uninitialized_copy(__first, __last, __result); }
   b60f6:	e7c6      	b.n	b6086 <_ZN7RailwayaSERKS_.isra.0+0x5e>
   b60f8:	eb08 0103 	add.w	r1, r8, r3
   b60fc:	4640      	mov	r0, r8
   b60fe:	f7ff fed9 	bl	b5eb4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b6102:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
   b6106:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
   b610a:	1a10      	subs	r0, r2, r0
   b610c:	4418      	add	r0, r3
   b610e:	e7f0      	b.n	b60f2 <_ZN7RailwayaSERKS_.isra.0+0xca>
	__destroy(__first, __last);
   b6110:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b6114:	f7fe fe77 	bl	b4e06 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	      _M_deallocate(this->_M_impl._M_start,
   b6118:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b611a:	b118      	cbz	r0, b6124 <_ZN7RailwayaSERKS_.isra.0+0xfc>
			    - this->_M_impl._M_start);
   b611c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b611e:	1a09      	subs	r1, r1, r0
   b6120:	f7fd ffbf 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b6124:	6267      	str	r7, [r4, #36]	; 0x24
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b6126:	4447      	add	r7, r8
   b6128:	62e7      	str	r7, [r4, #44]	; 0x2c
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b612a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b612c:	4443      	add	r3, r8
   b612e:	62a3      	str	r3, [r4, #40]	; 0x28
	this->_M_assign(__str);
   b6130:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b6134:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b6138:	f004 faf2 	bl	ba720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b613c:	f105 0148 	add.w	r1, r5, #72	; 0x48
   b6140:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b6144:	f7fe f8f8 	bl	b4338 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
   b6148:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b614a:	6563      	str	r3, [r4, #84]	; 0x54
   b614c:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b614e:	65a3      	str	r3, [r4, #88]	; 0x58
   b6150:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b6152:	65e3      	str	r3, [r4, #92]	; 0x5c
   b6154:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b6156:	6623      	str	r3, [r4, #96]	; 0x60
   b6158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b615a:	6663      	str	r3, [r4, #100]	; 0x64
   b615c:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b615e:	66a3      	str	r3, [r4, #104]	; 0x68
   b6160:	b002      	add	sp, #8
   b6162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6166:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   b6168:	eba7 0709 	sub.w	r7, r7, r9
	  else if (size() >= __xlen)
   b616c:	45b8      	cmp	r8, r7
   b616e:	d80d      	bhi.n	b618c <_ZN7RailwayaSERKS_.isra.0+0x164>
   b6170:	4630      	mov	r0, r6
   b6172:	464a      	mov	r2, r9
   b6174:	4651      	mov	r1, sl
   b6176:	f7fe ff23 	bl	b4fc0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      : _M_current(__i) { }
   b617a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b617c:	4606      	mov	r6, r0
	  for (; __first != __last; ++__first)
   b617e:	42b7      	cmp	r7, r6
   b6180:	d0d3      	beq.n	b612a <_ZN7RailwayaSERKS_.isra.0+0x102>
      }
   b6182:	4630      	mov	r0, r6
   b6184:	f7fe faf2 	bl	b476c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b6188:	360c      	adds	r6, #12
	return *this;
   b618a:	e7f8      	b.n	b617e <_ZN7RailwayaSERKS_.isra.0+0x156>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b618c:	4b10      	ldr	r3, [pc, #64]	; (b61d0 <_ZN7RailwayaSERKS_.isra.0+0x1a8>)
   b618e:	10bf      	asrs	r7, r7, #2
   b6190:	435f      	muls	r7, r3
   b6192:	2f00      	cmp	r7, #0
   b6194:	dd08      	ble.n	b61a8 <_ZN7RailwayaSERKS_.isra.0+0x180>
	      *__result = *__first;
   b6196:	4631      	mov	r1, r6
   b6198:	4648      	mov	r0, r9
   b619a:	f7fe fed9 	bl	b4f50 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b619e:	360c      	adds	r6, #12
	      ++__result;
   b61a0:	f109 090c 	add.w	r9, r9, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b61a4:	3f01      	subs	r7, #1
   b61a6:	e7f4      	b.n	b6192 <_ZN7RailwayaSERKS_.isra.0+0x16a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b61a8:	e9d4 6709 	ldrd	r6, r7, [r4, #36]	; 0x24
   b61ac:	1bb9      	subs	r1, r7, r6
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b61ae:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					  __x._M_impl._M_finish,
   b61b0:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b61b4:	440e      	add	r6, r1
	      for (; __first != __last; ++__first, (void)++__cur)
   b61b6:	45b1      	cmp	r9, r6
   b61b8:	d0b7      	beq.n	b612a <_ZN7RailwayaSERKS_.isra.0+0x102>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b61ba:	b11f      	cbz	r7, b61c4 <_ZN7RailwayaSERKS_.isra.0+0x19c>
   b61bc:	4631      	mov	r1, r6
   b61be:	4638      	mov	r0, r7
   b61c0:	f7fe fe82 	bl	b4ec8 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b61c4:	360c      	adds	r6, #12
   b61c6:	370c      	adds	r7, #12
   b61c8:	e7f5      	b.n	b61b6 <_ZN7RailwayaSERKS_.isra.0+0x18e>
   b61ca:	bf00      	nop
   b61cc:	7ffffffc 	.word	0x7ffffffc
   b61d0:	aaaaaaab 	.word	0xaaaaaaab

000b61d4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b61d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b61d8:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b61da:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b61dc:	480b      	ldr	r0, [pc, #44]	; (b620c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x38>)
   b61de:	10a4      	asrs	r4, r4, #2
   b61e0:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b61e2:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b61e4:	4627      	mov	r7, r4
   b61e6:	4690      	mov	r8, r2
   b61e8:	2f00      	cmp	r7, #0
   b61ea:	dd08      	ble.n	b61fe <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x2a>
	      *__result = *__first;
   b61ec:	4629      	mov	r1, r5
   b61ee:	4640      	mov	r0, r8
   b61f0:	f7ff ff1a 	bl	b6028 <_ZN7RailwayaSERKS_.isra.0>
	      ++__first;
   b61f4:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b61f6:	f108 086c 	add.w	r8, r8, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b61fa:	3f01      	subs	r7, #1
   b61fc:	e7f4      	b.n	b61e8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x14>
	  return __result;
   b61fe:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b6202:	206c      	movs	r0, #108	; 0x6c
   b6204:	fb00 6004 	mla	r0, r0, r4, r6
   b6208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b620c:	684bda13 	.word	0x684bda13

000b6210 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>:
      if (&__x != this)
   b6210:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b6212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6216:	4604      	mov	r4, r0
   b6218:	460f      	mov	r7, r1
      if (&__x != this)
   b621a:	d02c      	beq.n	b6276 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x66>
   b621c:	e9d1 5a00 	ldrd	r5, sl, [r1]
			 - this->_M_impl._M_start); }
   b6220:	f8d0 9000 	ldr.w	r9, [r0]
   b6224:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6226:	ebaa 0805 	sub.w	r8, sl, r5
			 - this->_M_impl._M_start); }
   b622a:	eba3 0309 	sub.w	r3, r3, r9
	  if (__xlen > capacity())
   b622e:	4543      	cmp	r3, r8
   b6230:	d223      	bcs.n	b627a <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x6a>
	  pointer __result = this->_M_allocate(__n);
   b6232:	482a      	ldr	r0, [pc, #168]	; (b62dc <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xcc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6234:	ea4f 03a8 	mov.w	r3, r8, asr #2
	  pointer __result = this->_M_allocate(__n);
   b6238:	4358      	muls	r0, r3
   b623a:	f7fd ff8d 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
   b623e:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b6240:	4607      	mov	r7, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b6242:	45aa      	cmp	sl, r5
   b6244:	d007      	beq.n	b6256 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x46>
   b6246:	b11f      	cbz	r7, b6250 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x40>
   b6248:	4629      	mov	r1, r5
   b624a:	4638      	mov	r0, r7
   b624c:	f7ff fe40 	bl	b5ed0 <_ZN7RailwayC1ERKS_>
   b6250:	376c      	adds	r7, #108	; 0x6c
   b6252:	356c      	adds	r5, #108	; 0x6c
   b6254:	e7f5      	b.n	b6242 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x32>
	__destroy(__first, __last);
   b6256:	e9d4 0100 	ldrd	r0, r1, [r4]
   b625a:	f7fe fdff 	bl	b4e5c <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	      _M_deallocate(this->_M_impl._M_start,
   b625e:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6260:	b118      	cbz	r0, b626a <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x5a>
			    - this->_M_impl._M_start);
   b6262:	68a1      	ldr	r1, [r4, #8]
   b6264:	1a09      	subs	r1, r1, r0
   b6266:	f7fd ff1c 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b626a:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b626c:	4446      	add	r6, r8
   b626e:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b6270:	6823      	ldr	r3, [r4, #0]
   b6272:	4443      	add	r3, r8
   b6274:	6063      	str	r3, [r4, #4]
    }
   b6276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b627a:	6846      	ldr	r6, [r0, #4]
   b627c:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b6280:	45b0      	cmp	r8, r6
   b6282:	d80d      	bhi.n	b62a0 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x90>
			      _Category>::__copy_m(__first, __last, __result);
   b6284:	4628      	mov	r0, r5
   b6286:	464a      	mov	r2, r9
   b6288:	4651      	mov	r1, sl
   b628a:	f7ff ffa3 	bl	b61d4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      : _M_current(__i) { }
   b628e:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b6290:	4605      	mov	r5, r0
	  for (; __first != __last; ++__first)
   b6292:	42ae      	cmp	r6, r5
   b6294:	d0ec      	beq.n	b6270 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x60>
      __pointer->~_Tp();
   b6296:	4628      	mov	r0, r5
   b6298:	f7fe fdc0 	bl	b4e1c <_ZN7RailwayD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b629c:	356c      	adds	r5, #108	; 0x6c
	return *this;
   b629e:	e7f8      	b.n	b6292 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x82>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b62a0:	4b0e      	ldr	r3, [pc, #56]	; (b62dc <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xcc>)
   b62a2:	10b6      	asrs	r6, r6, #2
   b62a4:	435e      	muls	r6, r3
   b62a6:	2e00      	cmp	r6, #0
   b62a8:	dd08      	ble.n	b62bc <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xac>
	      *__result = *__first;
   b62aa:	4629      	mov	r1, r5
   b62ac:	4648      	mov	r0, r9
   b62ae:	f7ff febb 	bl	b6028 <_ZN7RailwayaSERKS_.isra.0>
	      ++__first;
   b62b2:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b62b4:	f109 096c 	add.w	r9, r9, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b62b8:	3e01      	subs	r6, #1
   b62ba:	e7f4      	b.n	b62a6 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x96>
   b62bc:	e9d4 5600 	ldrd	r5, r6, [r4]
   b62c0:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b62c2:	683d      	ldr	r5, [r7, #0]
					  __x._M_impl._M_finish,
   b62c4:	687f      	ldr	r7, [r7, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b62c6:	440d      	add	r5, r1
   b62c8:	42af      	cmp	r7, r5
   b62ca:	d0d1      	beq.n	b6270 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x60>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b62cc:	b11e      	cbz	r6, b62d6 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xc6>
   b62ce:	4629      	mov	r1, r5
   b62d0:	4630      	mov	r0, r6
   b62d2:	f7ff fdfd 	bl	b5ed0 <_ZN7RailwayC1ERKS_>
   b62d6:	356c      	adds	r5, #108	; 0x6c
   b62d8:	366c      	adds	r6, #108	; 0x6c
   b62da:	e7f5      	b.n	b62c8 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xb8>
   b62dc:	684bda13 	.word	0x684bda13

000b62e0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b62e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b62e4:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b62e6:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b62e8:	480f      	ldr	r0, [pc, #60]	; (b6328 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x48>)
   b62ea:	10a4      	asrs	r4, r4, #2
   b62ec:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b62ee:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b62f0:	46a0      	mov	r8, r4
   b62f2:	4617      	mov	r7, r2
   b62f4:	f1b8 0f00 	cmp.w	r8, #0
   b62f8:	dd0e      	ble.n	b6318 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x38>
   b62fa:	4629      	mov	r1, r5
   b62fc:	4638      	mov	r0, r7
   b62fe:	f7ff ff87 	bl	b6210 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
   b6302:	f105 010c 	add.w	r1, r5, #12
   b6306:	f107 000c 	add.w	r0, r7, #12
   b630a:	f004 fa09 	bl	ba720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b630e:	3524      	adds	r5, #36	; 0x24
	      ++__result;
   b6310:	3724      	adds	r7, #36	; 0x24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6312:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6316:	e7ed      	b.n	b62f4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x14>
	  return __result;
   b6318:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b631c:	2024      	movs	r0, #36	; 0x24
   b631e:	fb00 6004 	mla	r0, r0, r4, r6
   b6322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6326:	bf00      	nop
   b6328:	38e38e39 	.word	0x38e38e39

000b632c <setup>:
void setup() {
   b632c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6330:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
  Serial.begin(9600);
   b6334:	f003 ffea 	bl	ba30c <_Z16_fetch_usbserialv>
   b6338:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b633c:	f003 ffda 	bl	ba2f4 <_ZN9USBSerial5beginEl>
  delay(500);
   b6340:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6344:	f001 fef0 	bl	b8128 <delay>
  BLE.on();
   b6348:	f002 f9e8 	bl	b871c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b634c:	f002 fa30 	bl	b87b0 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   b6350:	f002 f9e4 	bl	b871c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6354:	4a9a      	ldr	r2, [pc, #616]	; (b65c0 <setup+0x294>)
   b6356:	4d9b      	ldr	r5, [pc, #620]	; (b65c4 <setup+0x298>)
   b6358:	4601      	mov	r1, r0
   b635a:	a80f      	add	r0, sp, #60	; 0x3c
   b635c:	f002 ff12 	bl	b9184 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6360:	a80f      	add	r0, sp, #60	; 0x3c
   b6362:	f002 facc 	bl	b88fe <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b6366:	f002 f9d9 	bl	b871c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b636a:	4a97      	ldr	r2, [pc, #604]	; (b65c8 <setup+0x29c>)
   b636c:	4601      	mov	r1, r0
   b636e:	a80f      	add	r0, sp, #60	; 0x3c
   b6370:	f002 ff08 	bl	b9184 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6374:	a80f      	add	r0, sp, #60	; 0x3c
   b6376:	f002 fac2 	bl	b88fe <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   b637a:	a803      	add	r0, sp, #12
   b637c:	f002 fbf5 	bl	b8b6a <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b6380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6382:	ac09      	add	r4, sp, #36	; 0x24
   b6384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6386:	682e      	ldr	r6, [r5, #0]
   b6388:	6026      	str	r6, [r4, #0]
        BleUuid tempUUID(uuid);
   b638a:	ad09      	add	r5, sp, #36	; 0x24
   b638c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b638e:	ac0f      	add	r4, sp, #60	; 0x3c
   b6390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6392:	a80f      	add	r0, sp, #60	; 0x3c
        BleUuid tempUUID(uuid);
   b6394:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6396:	f002 f835 	bl	b8404 <_ZNK8particle7BleUuid4typeEv>
   b639a:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b639c:	a80f      	add	r0, sp, #60	; 0x3c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b639e:	2c00      	cmp	r4, #0
   b63a0:	f040 80c3 	bne.w	b652a <setup+0x1fe>
            uint16_t uuid16 = tempUUID.shorted();
   b63a4:	f002 f84a 	bl	b843c <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b63a8:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b63aa:	f8ad 0018 	strh.w	r0, [sp, #24]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b63ae:	2302      	movs	r3, #2
   b63b0:	aa06      	add	r2, sp, #24
   b63b2:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b63b4:	a803      	add	r0, sp, #12
   b63b6:	f002 fbcd 	bl	b8b54 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   b63ba:	f002 f9af 	bl	b871c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b63be:	2200      	movs	r2, #0
   b63c0:	a903      	add	r1, sp, #12
   b63c2:	f002 fa3f 	bl	b8844 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  request.hostname = "trek.thewcl.com";
   b63c6:	4c81      	ldr	r4, [pc, #516]	; (b65cc <setup+0x2a0>)

    //loopIndex must point to either the first or last checkpoint, tripleIndex cannot be 0
    void setLoopIndex(int triple, int loop){
        tripleIndex = triple;
   b63c8:	4e81      	ldr	r6, [pc, #516]	; (b65d0 <setup+0x2a4>)
  acquireWireBuffer();
   b63ca:	a80f      	add	r0, sp, #60	; 0x3c
   b63cc:	f7fe f9a4 	bl	b4718 <_Z17acquireWireBufferv>
  Wire.begin();
   b63d0:	f004 f8ea 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b63d4:	f003 f862 	bl	b949c <_ZN7TwoWire5beginEv>
  request.hostname = "trek.thewcl.com";
   b63d8:	497e      	ldr	r1, [pc, #504]	; (b65d4 <setup+0x2a8>)
   b63da:	4620      	mov	r0, r4
   b63dc:	f003 fb13 	bl	b9a06 <_ZN6StringaSEPKc>
  request.port = 80;
   b63e0:	2350      	movs	r3, #80	; 0x50
   b63e2:	497d      	ldr	r1, [pc, #500]	; (b65d8 <setup+0x2ac>)
   b63e4:	63a3      	str	r3, [r4, #56]	; 0x38
   b63e6:	4c7d      	ldr	r4, [pc, #500]	; (b65dc <setup+0x2b0>)
        loopIndex = loop;
   b63e8:	2502      	movs	r5, #2
   b63ea:	2006      	movs	r0, #6
   b63ec:	e9c1 5015 	strd	r5, r0, [r1, #84]	; 0x54
   b63f0:	e9c4 5015 	strd	r5, r0, [r4, #84]	; 0x54
        tripleIndex = triple;
   b63f4:	4d7a      	ldr	r5, [pc, #488]	; (b65e0 <setup+0x2b4>)
        loopIndex = loop;
   b63f6:	2203      	movs	r2, #3
   b63f8:	2307      	movs	r3, #7
  ctaRailways = {brownLineCTA, orangeLineCTA, pinkLineCTA, purpleLineCTA, greenLineCTA};
   b63fa:	a80f      	add	r0, sp, #60	; 0x3c
   b63fc:	e9c6 2315 	strd	r2, r3, [r6, #84]	; 0x54
   b6400:	e9c5 2315 	strd	r2, r3, [r5, #84]	; 0x54
   b6404:	f7ff fd64 	bl	b5ed0 <_ZN7RailwayC1ERKS_>
   b6408:	4631      	mov	r1, r6
   b640a:	a82a      	add	r0, sp, #168	; 0xa8
   b640c:	f7ff fd60 	bl	b5ed0 <_ZN7RailwayC1ERKS_>
   b6410:	4629      	mov	r1, r5
   b6412:	a845      	add	r0, sp, #276	; 0x114
   b6414:	f7ff fd5c 	bl	b5ed0 <_ZN7RailwayC1ERKS_>
   b6418:	4621      	mov	r1, r4
   b641a:	a860      	add	r0, sp, #384	; 0x180
			 - this->_M_impl._M_start); }
   b641c:	4c71      	ldr	r4, [pc, #452]	; (b65e4 <setup+0x2b8>)
   b641e:	f7ff fd57 	bl	b5ed0 <_ZN7RailwayC1ERKS_>
   b6422:	4971      	ldr	r1, [pc, #452]	; (b65e8 <setup+0x2bc>)
   b6424:	a87b      	add	r0, sp, #492	; 0x1ec
   b6426:	f7ff fd53 	bl	b5ed0 <_ZN7RailwayC1ERKS_>
   b642a:	6822      	ldr	r2, [r4, #0]
   b642c:	68a3      	ldr	r3, [r4, #8]
   b642e:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b6430:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
   b6434:	f080 8081 	bcs.w	b653a <setup+0x20e>
	  pointer __result = this->_M_allocate(__n);
   b6438:	2005      	movs	r0, #5
   b643a:	f7fd fe8d 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
   b643e:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
   b6442:	4605      	mov	r5, r0
   b6444:	f500 7707 	add.w	r7, r0, #540	; 0x21c
	  _ForwardIterator __cur = __result;
   b6448:	4606      	mov	r6, r0
   b644a:	b11e      	cbz	r6, b6454 <setup+0x128>
   b644c:	4641      	mov	r1, r8
   b644e:	4630      	mov	r0, r6
   b6450:	f7ff fd3e 	bl	b5ed0 <_ZN7RailwayC1ERKS_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b6454:	366c      	adds	r6, #108	; 0x6c
   b6456:	42b7      	cmp	r7, r6
   b6458:	f108 086c 	add.w	r8, r8, #108	; 0x6c
   b645c:	d1f5      	bne.n	b644a <setup+0x11e>
	__destroy(__first, __last);
   b645e:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6462:	f7fe fcfb 	bl	b4e5c <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	    _M_deallocate(this->_M_impl._M_start,
   b6466:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6468:	b118      	cbz	r0, b6472 <setup+0x146>
			  - this->_M_impl._M_start);
   b646a:	68a1      	ldr	r1, [r4, #8]
   b646c:	1a09      	subs	r1, r1, r0
   b646e:	f7fd fe18 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b6472:	e9c4 5700 	strd	r5, r7, [r4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b6476:	60a7      	str	r7, [r4, #8]
	  pointer __result = this->_M_allocate(__n);
   b6478:	2404      	movs	r4, #4
   b647a:	256c      	movs	r5, #108	; 0x6c
   b647c:	ab0f      	add	r3, sp, #60	; 0x3c
   b647e:	fb05 3004 	mla	r0, r5, r4, r3
   b6482:	f7fe fccb 	bl	b4e1c <_ZN7RailwayD1Ev>
   b6486:	3c01      	subs	r4, #1
   b6488:	d2f8      	bcs.n	b647c <setup+0x150>
  cities = {City(ctaRailways, "chicago")};
   b648a:	4956      	ldr	r1, [pc, #344]	; (b65e4 <setup+0x2b8>)
			 - this->_M_impl._M_start); }
   b648c:	4c57      	ldr	r4, [pc, #348]	; (b65ec <setup+0x2c0>)
   b648e:	a806      	add	r0, sp, #24
   b6490:	f7ff fd8e 	bl	b5fb0 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b6494:	4956      	ldr	r1, [pc, #344]	; (b65f0 <setup+0x2c4>)
   b6496:	a809      	add	r0, sp, #36	; 0x24
   b6498:	f7fd fe36 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b649c:	2300      	movs	r3, #0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b649e:	aa14      	add	r2, sp, #80	; 0x50
    public:
        std::vector<Railway> railways;
        std::string name;

        City(std::vector<Railway> railwaysInput, std::string nameInput){
            railways = railwaysInput;
   b64a0:	a906      	add	r1, sp, #24
   b64a2:	a80f      	add	r0, sp, #60	; 0x3c
      { _M_string_length = __length; }
   b64a4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   b64a8:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   b64ac:	9311      	str	r3, [sp, #68]	; 0x44
   b64ae:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
   b64b2:	f7ff fead 	bl	b6210 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
	this->_M_assign(__str);
   b64b6:	a909      	add	r1, sp, #36	; 0x24
   b64b8:	a812      	add	r0, sp, #72	; 0x48
   b64ba:	f004 f931 	bl	ba720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
			 - this->_M_impl._M_start); }
   b64be:	6822      	ldr	r2, [r4, #0]
   b64c0:	68a3      	ldr	r3, [r4, #8]
   b64c2:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b64c4:	2b23      	cmp	r3, #35	; 0x23
   b64c6:	d85d      	bhi.n	b6584 <setup+0x258>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b64c8:	2024      	movs	r0, #36	; 0x24
   b64ca:	f7fd fde4 	bl	b4096 <_Znwj>
	__uninit_copy(__first, __last, __result);
   b64ce:	a918      	add	r1, sp, #96	; 0x60
   b64d0:	4602      	mov	r2, r0
   b64d2:	4605      	mov	r5, r0
   b64d4:	a80f      	add	r0, sp, #60	; 0x3c
   b64d6:	f7ff fd91 	bl	b5ffc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>
   b64da:	e9d4 0100 	ldrd	r0, r1, [r4]
   b64de:	f7fe fcd6 	bl	b4e8e <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	    _M_deallocate(this->_M_impl._M_start,
   b64e2:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b64e4:	b118      	cbz	r0, b64ee <setup+0x1c2>
			  - this->_M_impl._M_start);
   b64e6:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b64e8:	1a09      	subs	r1, r1, r0
   b64ea:	f7fd fdda 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
   b64ee:	6025      	str	r5, [r4, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b64f0:	3524      	adds	r5, #36	; 0x24
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b64f2:	e9c4 5501 	strd	r5, r5, [r4, #4]
      { _M_dispose(); }
   b64f6:	a812      	add	r0, sp, #72	; 0x48
   b64f8:	f004 f8f4 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
class City{
   b64fc:	a80f      	add	r0, sp, #60	; 0x3c
   b64fe:	f7fe fcb8 	bl	b4e72 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b6502:	a809      	add	r0, sp, #36	; 0x24
   b6504:	f004 f8ee 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6508:	a806      	add	r0, sp, #24
   b650a:	f7fe fcb2 	bl	b4e72 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   b650e:	4839      	ldr	r0, [pc, #228]	; (b65f4 <setup+0x2c8>)
   b6510:	2300      	movs	r3, #0
   b6512:	461a      	mov	r2, r3
   b6514:	4619      	mov	r1, r3
   b6516:	6840      	ldr	r0, [r0, #4]
   b6518:	f001 fd8e 	bl	b8038 <network_clear_credentials>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b651c:	9803      	ldr	r0, [sp, #12]
   b651e:	f001 fdbb 	bl	b8098 <free>
}
   b6522:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
   b6526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b652a:	f001 ff89 	bl	b8440 <_ZNK8particle7BleUuid8rawBytesEv>
   b652e:	2300      	movs	r3, #0
   b6530:	9300      	str	r3, [sp, #0]
   b6532:	4602      	mov	r2, r0
   b6534:	2310      	movs	r3, #16
   b6536:	2107      	movs	r1, #7
   b6538:	e73c      	b.n	b63b4 <setup+0x88>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b653a:	6865      	ldr	r5, [r4, #4]
   b653c:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b653e:	f5b5 7f07 	cmp.w	r5, #540	; 0x21c
   b6542:	d30b      	bcc.n	b655c <setup+0x230>
			      _Category>::__copy_m(__first, __last, __result);
   b6544:	a996      	add	r1, sp, #600	; 0x258
   b6546:	a80f      	add	r0, sp, #60	; 0x3c
   b6548:	f7ff fe44 	bl	b61d4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b654c:	6861      	ldr	r1, [r4, #4]
   b654e:	4288      	cmp	r0, r1
   b6550:	4605      	mov	r5, r0
   b6552:	d091      	beq.n	b6478 <setup+0x14c>
   b6554:	f7fe fc82 	bl	b4e5c <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	    this->_M_impl._M_finish = __pos;
   b6558:	6065      	str	r5, [r4, #4]
   b655a:	e78d      	b.n	b6478 <setup+0x14c>
   b655c:	ab0f      	add	r3, sp, #60	; 0x3c
   b655e:	441d      	add	r5, r3
   b6560:	4629      	mov	r1, r5
   b6562:	4618      	mov	r0, r3
   b6564:	f7ff fe36 	bl	b61d4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6568:	6866      	ldr	r6, [r4, #4]
	      for (; __first != __last; ++__first, (void)++__cur)
   b656a:	ab96      	add	r3, sp, #600	; 0x258
   b656c:	429d      	cmp	r5, r3
   b656e:	d007      	beq.n	b6580 <setup+0x254>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6570:	b11e      	cbz	r6, b657a <setup+0x24e>
   b6572:	4629      	mov	r1, r5
   b6574:	4630      	mov	r0, r6
   b6576:	f7ff fcab 	bl	b5ed0 <_ZN7RailwayC1ERKS_>
   b657a:	356c      	adds	r5, #108	; 0x6c
   b657c:	366c      	adds	r6, #108	; 0x6c
   b657e:	e7f4      	b.n	b656a <setup+0x23e>
	    this->_M_impl._M_finish =
   b6580:	6066      	str	r6, [r4, #4]
   b6582:	e779      	b.n	b6478 <setup+0x14c>
   b6584:	6865      	ldr	r5, [r4, #4]
   b6586:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b6588:	2d23      	cmp	r5, #35	; 0x23
   b658a:	d90b      	bls.n	b65a4 <setup+0x278>
   b658c:	a918      	add	r1, sp, #96	; 0x60
   b658e:	a80f      	add	r0, sp, #60	; 0x3c
   b6590:	f7ff fea6 	bl	b62e0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b6594:	6861      	ldr	r1, [r4, #4]
   b6596:	4288      	cmp	r0, r1
   b6598:	4605      	mov	r5, r0
   b659a:	d0ac      	beq.n	b64f6 <setup+0x1ca>
	__destroy(__first, __last);
   b659c:	f7fe fc77 	bl	b4e8e <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	    this->_M_impl._M_finish = __pos;
   b65a0:	6065      	str	r5, [r4, #4]
   b65a2:	e7a8      	b.n	b64f6 <setup+0x1ca>
   b65a4:	ab0f      	add	r3, sp, #60	; 0x3c
   b65a6:	441d      	add	r5, r3
   b65a8:	4629      	mov	r1, r5
   b65aa:	4618      	mov	r0, r3
   b65ac:	f7ff fe98 	bl	b62e0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>
	__uninit_copy(__first, __last, __result);
   b65b0:	6862      	ldr	r2, [r4, #4]
   b65b2:	a918      	add	r1, sp, #96	; 0x60
   b65b4:	4628      	mov	r0, r5
   b65b6:	f7ff fd21 	bl	b5ffc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>
	    this->_M_impl._M_finish =
   b65ba:	6060      	str	r0, [r4, #4]
   b65bc:	e79b      	b.n	b64f6 <setup+0x1ca>
   b65be:	bf00      	nop
   b65c0:	2003e6ac 	.word	0x2003e6ac
   b65c4:	200354dc 	.word	0x200354dc
   b65c8:	2003e688 	.word	0x2003e688
   b65cc:	2003e628 	.word	0x2003e628
   b65d0:	20037eac 	.word	0x20037eac
   b65d4:	000bd9b0 	.word	0x000bd9b0
   b65d8:	20035594 	.word	0x20035594
   b65dc:	2003e550 	.word	0x2003e550
   b65e0:	2003e4e4 	.word	0x2003e4e4
   b65e4:	20035610 	.word	0x20035610
   b65e8:	2003561c 	.word	0x2003561c
   b65ec:	20035604 	.word	0x20035604
   b65f0:	000bd9c0 	.word	0x000bd9c0
   b65f4:	2003e718 	.word	0x2003e718

000b65f8 <_GLOBAL__sub_I_SystemMode>:
   b65f8:	2001      	movs	r0, #1
   b65fa:	f7fe bdef 	b.w	b51dc <_Z41__static_initialization_and_destruction_0ii.constprop.0>
	...

000b6600 <loop>:
void loop(){
   b6600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6604:	ed2d 8b06 	vpush	{d8-d10}
        return network_has_credentials(*this, 0, NULL);
   b6608:	4b4e      	ldr	r3, [pc, #312]	; (b6744 <loop+0x144>)
   b660a:	2200      	movs	r2, #0
   b660c:	b0b7      	sub	sp, #220	; 0xdc
   b660e:	6858      	ldr	r0, [r3, #4]
   b6610:	4611      	mov	r1, r2
   b6612:	f001 fd01 	bl	b8018 <network_has_credentials>
  if(WiFi.hasCredentials() && userInput){
   b6616:	2800      	cmp	r0, #0
   b6618:	f000 84cc 	beq.w	b6fb4 <loop+0x9b4>
   b661c:	4b4a      	ldr	r3, [pc, #296]	; (b6748 <loop+0x148>)
   b661e:	781b      	ldrb	r3, [r3, #0]
   b6620:	2b00      	cmp	r3, #0
   b6622:	f000 84c7 	beq.w	b6fb4 <loop+0x9b4>
      : _M_current(__i) { }
   b6626:	f8df b164 	ldr.w	fp, [pc, #356]	; b678c <loop+0x18c>
      Serial.printf("%i, ", i);
   b662a:	4d48      	ldr	r5, [pc, #288]	; (b674c <loop+0x14c>)
    Serial.println("loop start");
   b662c:	f003 fe6e 	bl	ba30c <_Z16_fetch_usbserialv>
   b6630:	4947      	ldr	r1, [pc, #284]	; (b6750 <loop+0x150>)
   b6632:	f003 f8f6 	bl	b9822 <_ZN5Print7printlnEPKc>
   b6636:	e9db 4600 	ldrd	r4, r6, [fp]
    for(int i : sequenceArr){
   b663a:	42b4      	cmp	r4, r6
   b663c:	d009      	beq.n	b6652 <loop+0x52>
   b663e:	f854 2b04 	ldr.w	r2, [r4], #4
   b6642:	9203      	str	r2, [sp, #12]
      Serial.printf("%i, ", i);
   b6644:	f003 fe62 	bl	ba30c <_Z16_fetch_usbserialv>
   b6648:	9a03      	ldr	r2, [sp, #12]
   b664a:	4629      	mov	r1, r5
   b664c:	f7fd fef4 	bl	b4438 <_ZN5Print6printfEPKcz>
	return *this;
   b6650:	e7f3      	b.n	b663a <loop+0x3a>
    Serial.println();
   b6652:	f003 fe5b 	bl	ba30c <_Z16_fetch_usbserialv>
   b6656:	f003 f8d8 	bl	b980a <_ZN5Print7printlnEv>
    Serial.println(brownLineCTAAdr);
   b665a:	f003 fe57 	bl	ba30c <_Z16_fetch_usbserialv>
   b665e:	4b3d      	ldr	r3, [pc, #244]	; (b6754 <loop+0x154>)
    Serial.println(greenLineCTAAdr[0]);
   b6660:	4c3d      	ldr	r4, [pc, #244]	; (b6758 <loop+0x158>)
    Serial.println(brownLineCTAAdr);
   b6662:	6819      	ldr	r1, [r3, #0]
   b6664:	220a      	movs	r2, #10
   b6666:	f7fd fdd0 	bl	b420a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    Serial.println(greenLineCTAAdr[0]);
   b666a:	f003 fe4f 	bl	ba30c <_Z16_fetch_usbserialv>
   b666e:	6821      	ldr	r1, [r4, #0]
   b6670:	220a      	movs	r2, #10
   b6672:	f7fd fdca 	bl	b420a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    Serial.println(greenLineCTAAdr[1]);
   b6676:	f003 fe49 	bl	ba30c <_Z16_fetch_usbserialv>
   b667a:	6861      	ldr	r1, [r4, #4]
   b667c:	220a      	movs	r2, #10
   b667e:	f7fd fdc4 	bl	b420a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    for(int j = 0; j < cities[cityIndex].railways.size(); j++){
   b6682:	f04f 0900 	mov.w	r9, #0
   b6686:	4f35      	ldr	r7, [pc, #212]	; (b675c <loop+0x15c>)
	return *(this->_M_impl._M_start + __n);
   b6688:	4e35      	ldr	r6, [pc, #212]	; (b6760 <loop+0x160>)
   b668a:	683a      	ldr	r2, [r7, #0]
   b668c:	6831      	ldr	r1, [r6, #0]
   b668e:	2524      	movs	r5, #36	; 0x24
   b6690:	436a      	muls	r2, r5
   b6692:	188b      	adds	r3, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6694:	588a      	ldr	r2, [r1, r2]
   b6696:	685b      	ldr	r3, [r3, #4]
   b6698:	1a9b      	subs	r3, r3, r2
   b669a:	4a32      	ldr	r2, [pc, #200]	; (b6764 <loop+0x164>)
   b669c:	109b      	asrs	r3, r3, #2
   b669e:	4353      	muls	r3, r2
   b66a0:	454b      	cmp	r3, r9
   b66a2:	f240 8439 	bls.w	b6f18 <loop+0x918>
      delay(1000);
   b66a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b66aa:	f001 fd3d 	bl	b8128 <delay>
	StringSumHelper(const char *p) : String(p) {}
   b66ae:	492e      	ldr	r1, [pc, #184]	; (b6768 <loop+0x168>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b66b0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; b6790 <loop+0x190>
   b66b4:	a81b      	add	r0, sp, #108	; 0x6c
   b66b6:	f003 f95e 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
	return *(this->_M_impl._M_start + __n);
   b66ba:	683b      	ldr	r3, [r7, #0]
   b66bc:	6832      	ldr	r2, [r6, #0]
   b66be:	436b      	muls	r3, r5
   b66c0:	246c      	movs	r4, #108	; 0x6c
      { return _M_dataplus._M_p; }
   b66c2:	58d3      	ldr	r3, [r2, r3]
   b66c4:	fb04 f409 	mul.w	r4, r4, r9
   b66c8:	4423      	add	r3, r4
      request.path = "/loop-tracks/cta?lines=" + String(cities[cityIndex].railways[j].name.c_str());
   b66ca:	a817      	add	r0, sp, #92	; 0x5c
   b66cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b66ce:	f003 f952 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
   b66d2:	a917      	add	r1, sp, #92	; 0x5c
   b66d4:	a81b      	add	r0, sp, #108	; 0x6c
   b66d6:	f003 f9e3 	bl	b9aa0 <_ZplRK15StringSumHelperRK6String>
   b66da:	4601      	mov	r1, r0
   b66dc:	4823      	ldr	r0, [pc, #140]	; (b676c <loop+0x16c>)
   b66de:	f003 f97b 	bl	b99d8 <_ZN6StringaSERKS_>
   b66e2:	a817      	add	r0, sp, #92	; 0x5c
   b66e4:	f003 f8fc 	bl	b98e0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b66e8:	a81b      	add	r0, sp, #108	; 0x6c
   b66ea:	f003 f8f9 	bl	b98e0 <_ZN6StringD1Ev>
   b66ee:	4b20      	ldr	r3, [pc, #128]	; (b6770 <loop+0x170>)
   b66f0:	4920      	ldr	r1, [pc, #128]	; (b6774 <loop+0x174>)
   b66f2:	4821      	ldr	r0, [pc, #132]	; (b6778 <loop+0x178>)
   b66f4:	9300      	str	r3, [sp, #0]
   b66f6:	4642      	mov	r2, r8
   b66f8:	4b20      	ldr	r3, [pc, #128]	; (b677c <loop+0x17c>)
   b66fa:	f000 fca3 	bl	b7044 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("parsing");
   b66fe:	f003 fe05 	bl	ba30c <_Z16_fetch_usbserialv>
   b6702:	491f      	ldr	r1, [pc, #124]	; (b6780 <loop+0x180>)
   b6704:	f003 f88d 	bl	b9822 <_ZN5Print7printlnEPKc>
      parser.clear();
   b6708:	481e      	ldr	r0, [pc, #120]	; (b6784 <loop+0x184>)
   b670a:	f000 fe33 	bl	b7374 <_ZN10JsonBuffer5clearEv>
	const char * c_str() const { return buffer; }
   b670e:	f8d8 1004 	ldr.w	r1, [r8, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b6712:	9103      	str	r1, [sp, #12]
   b6714:	4608      	mov	r0, r1
   b6716:	f005 f805 	bl	bb724 <strlen>
   b671a:	9903      	ldr	r1, [sp, #12]
   b671c:	4602      	mov	r2, r0
   b671e:	4819      	ldr	r0, [pc, #100]	; (b6784 <loop+0x184>)
   b6720:	f000 fe0b 	bl	b733a <_ZN10JsonBuffer7addDataEPKcj>
      if(!parser.parse()){
   b6724:	4817      	ldr	r0, [pc, #92]	; (b6784 <loop+0x184>)
   b6726:	f001 fa15 	bl	b7b54 <_ZN10JsonParser5parseEv>
   b672a:	9003      	str	r0, [sp, #12]
   b672c:	bba0      	cbnz	r0, b6798 <loop+0x198>
        Serial.println("parsing failed");
   b672e:	f003 fded 	bl	ba30c <_Z16_fetch_usbserialv>
   b6732:	4915      	ldr	r1, [pc, #84]	; (b6788 <loop+0x188>)
}
   b6734:	b037      	add	sp, #220	; 0xdc
   b6736:	ecbd 8b06 	vpop	{d8-d10}
   b673a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("parsing failed");
   b673e:	f003 b870 	b.w	b9822 <_ZN5Print7printlnEPKc>
   b6742:	bf00      	nop
   b6744:	2003e718 	.word	0x2003e718
   b6748:	2003e6b4 	.word	0x2003e6b4
   b674c:	000bd9d3 	.word	0x000bd9d3
   b6750:	000bd9c8 	.word	0x000bd9c8
   b6754:	20035600 	.word	0x20035600
   b6758:	20035688 	.word	0x20035688
   b675c:	200352c8 	.word	0x200352c8
   b6760:	20035604 	.word	0x20035604
   b6764:	684bda13 	.word	0x684bda13
   b6768:	000bd9d8 	.word	0x000bd9d8
   b676c:	2003e650 	.word	0x2003e650
   b6770:	000bd9f0 	.word	0x000bd9f0
   b6774:	2003e628 	.word	0x2003e628
   b6778:	20035690 	.word	0x20035690
   b677c:	200352cc 	.word	0x200352cc
   b6780:	000bd9f4 	.word	0x000bd9f4
   b6784:	20037f18 	.word	0x20037f18
   b6788:	000bd9fc 	.word	0x000bd9fc
   b678c:	2003e690 	.word	0x2003e690
   b6790:	2003e674 	.word	0x2003e674
   b6794:	00000000 	.word	0x00000000
   b6798:	683b      	ldr	r3, [r7, #0]
   b679a:	6832      	ldr	r2, [r6, #0]
        float lat = train.key("latitude").valueFloat();
   b679c:	ed1f 9a03 	vldr	s18, [pc, #-12]	; b6794 <loop+0x194>
   b67a0:	435d      	muls	r5, r3
      Railway currentRailway = cities[cityIndex].railways[j];
   b67a2:	a81b      	add	r0, sp, #108	; 0x6c
   b67a4:	5951      	ldr	r1, [r2, r5]
   b67a6:	4421      	add	r1, r4
   b67a8:	f7ff fb92 	bl	b5ed0 <_ZN7RailwayC1ERKS_>
      std::vector<Checkpoint> currentCheckpoints = currentRailway.checkpoints;
   b67ac:	a91b      	add	r1, sp, #108	; 0x6c
   b67ae:	a807      	add	r0, sp, #28
   b67b0:	f7fe f89a 	bl	b48e8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      int count = 0;
   b67b4:	f04f 0800 	mov.w	r8, #0
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b67b8:	49a3      	ldr	r1, [pc, #652]	; (b6a48 <loop+0x448>)
   b67ba:	a80d      	add	r0, sp, #52	; 0x34
   b67bc:	f000 fdf4 	bl	b73a8 <_ZNK10JsonParser12getReferenceEv>
   b67c0:	4aa2      	ldr	r2, [pc, #648]	; (b6a4c <loop+0x44c>)
   b67c2:	a90d      	add	r1, sp, #52	; 0x34
   b67c4:	a810      	add	r0, sp, #64	; 0x40
   b67c6:	f000 ffbf 	bl	b7748 <_ZNK13JsonReference3keyEPKc>
   b67ca:	2200      	movs	r2, #0
   b67cc:	a910      	add	r1, sp, #64	; 0x40
   b67ce:	a813      	add	r0, sp, #76	; 0x4c
   b67d0:	f000 fe8e 	bl	b74f0 <_ZNK13JsonReference5indexEj>
   b67d4:	4a9e      	ldr	r2, [pc, #632]	; (b6a50 <loop+0x450>)
   b67d6:	a913      	add	r1, sp, #76	; 0x4c
   b67d8:	a817      	add	r0, sp, #92	; 0x5c
   b67da:	f000 ffb5 	bl	b7748 <_ZNK13JsonReference3keyEPKc>
   b67de:	4642      	mov	r2, r8
   b67e0:	a917      	add	r1, sp, #92	; 0x5c
   b67e2:	a80a      	add	r0, sp, #40	; 0x28
   b67e4:	f000 fe84 	bl	b74f0 <_ZNK13JsonReference5indexEj>
   b67e8:	a817      	add	r0, sp, #92	; 0x5c
   b67ea:	f000 fd55 	bl	b7298 <_ZN13JsonReferenceD1Ev>
   b67ee:	a813      	add	r0, sp, #76	; 0x4c
   b67f0:	f000 fd52 	bl	b7298 <_ZN13JsonReferenceD1Ev>
   b67f4:	a810      	add	r0, sp, #64	; 0x40
   b67f6:	f000 fd4f 	bl	b7298 <_ZN13JsonReferenceD1Ev>
   b67fa:	a80d      	add	r0, sp, #52	; 0x34
   b67fc:	f000 fd4c 	bl	b7298 <_ZN13JsonReferenceD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b6800:	4a94      	ldr	r2, [pc, #592]	; (b6a54 <loop+0x454>)
   b6802:	a90a      	add	r1, sp, #40	; 0x28
   b6804:	a817      	add	r0, sp, #92	; 0x5c
   b6806:	f000 ff9f 	bl	b7748 <_ZNK13JsonReference3keyEPKc>
   b680a:	a917      	add	r1, sp, #92	; 0x5c
   b680c:	a813      	add	r0, sp, #76	; 0x4c
   b680e:	f000 ffb5 	bl	b777c <_ZNK13JsonReference11valueStringEv>
   b6812:	a817      	add	r0, sp, #92	; 0x5c
   b6814:	f000 fd40 	bl	b7298 <_ZN13JsonReferenceD1Ev>
        String destNm = train.key("destination").valueString();
   b6818:	4a8f      	ldr	r2, [pc, #572]	; (b6a58 <loop+0x458>)
   b681a:	a90a      	add	r1, sp, #40	; 0x28
   b681c:	a810      	add	r0, sp, #64	; 0x40
   b681e:	f000 ff93 	bl	b7748 <_ZNK13JsonReference3keyEPKc>
   b6822:	a910      	add	r1, sp, #64	; 0x40
   b6824:	a817      	add	r0, sp, #92	; 0x5c
   b6826:	f000 ffa9 	bl	b777c <_ZNK13JsonReference11valueStringEv>
   b682a:	a810      	add	r0, sp, #64	; 0x40
   b682c:	f000 fd34 	bl	b7298 <_ZN13JsonReferenceD1Ev>
        int trainDir = train.key("direction").valueInt();
   b6830:	4a8a      	ldr	r2, [pc, #552]	; (b6a5c <loop+0x45c>)
   b6832:	a90a      	add	r1, sp, #40	; 0x28
   b6834:	a810      	add	r0, sp, #64	; 0x40
   b6836:	f000 ff87 	bl	b7748 <_ZNK13JsonReference3keyEPKc>
   b683a:	2100      	movs	r1, #0
   b683c:	a810      	add	r0, sp, #64	; 0x40
   b683e:	f000 fe71 	bl	b7524 <_ZNK13JsonReference8valueIntEi>
   b6842:	4604      	mov	r4, r0
   b6844:	a810      	add	r0, sp, #64	; 0x40
   b6846:	f000 fd27 	bl	b7298 <_ZN13JsonReferenceD1Ev>
        float lat = train.key("latitude").valueFloat();
   b684a:	4a85      	ldr	r2, [pc, #532]	; (b6a60 <loop+0x460>)
   b684c:	a90a      	add	r1, sp, #40	; 0x28
   b684e:	a810      	add	r0, sp, #64	; 0x40
   b6850:	f000 ff7a 	bl	b7748 <_ZNK13JsonReference3keyEPKc>
   b6854:	a810      	add	r0, sp, #64	; 0x40
   b6856:	eeb0 0a49 	vmov.f32	s0, s18
   b685a:	f000 fe6f 	bl	b753c <_ZNK13JsonReference10valueFloatEf>
   b685e:	a810      	add	r0, sp, #64	; 0x40
   b6860:	eef0 8a40 	vmov.f32	s17, s0
   b6864:	f000 fd18 	bl	b7298 <_ZN13JsonReferenceD1Ev>
        float lon = train.key("longitude").valueFloat();
   b6868:	4a7e      	ldr	r2, [pc, #504]	; (b6a64 <loop+0x464>)
   b686a:	a90a      	add	r1, sp, #40	; 0x28
   b686c:	a810      	add	r0, sp, #64	; 0x40
   b686e:	f000 ff6b 	bl	b7748 <_ZNK13JsonReference3keyEPKc>
   b6872:	a810      	add	r0, sp, #64	; 0x40
   b6874:	eeb0 0a49 	vmov.f32	s0, s18
   b6878:	f000 fe60 	bl	b753c <_ZNK13JsonReference10valueFloatEf>
   b687c:	a810      	add	r0, sp, #64	; 0x40
   b687e:	eeb0 8a40 	vmov.f32	s16, s0
   b6882:	f000 fd09 	bl	b7298 <_ZN13JsonReferenceD1Ev>
        if(nextStation.length() <= 1){
   b6886:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b6888:	2b01      	cmp	r3, #1
   b688a:	f200 8082 	bhi.w	b6992 <loop+0x392>
          Serial.println("break");
   b688e:	f003 fd3d 	bl	ba30c <_Z16_fetch_usbserialv>
   b6892:	4975      	ldr	r1, [pc, #468]	; (b6a68 <loop+0x468>)
        if(cityIndex == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b6894:	f8df 81e4 	ldr.w	r8, [pc, #484]	; b6a7c <loop+0x47c>
          Serial.println("break");
   b6898:	f002 ffc3 	bl	b9822 <_ZN5Print7printlnEPKc>
          break;
   b689c:	a817      	add	r0, sp, #92	; 0x5c
   b689e:	f003 f81f 	bl	b98e0 <_ZN6StringD1Ev>
   b68a2:	a813      	add	r0, sp, #76	; 0x4c
   b68a4:	f003 f81c 	bl	b98e0 <_ZN6StringD1Ev>
   b68a8:	a80a      	add	r0, sp, #40	; 0x28
   b68aa:	f000 fcf5 	bl	b7298 <_ZN13JsonReferenceD1Ev>
      for(int i = 0; i < 4; i++){
   b68ae:	ea4f 06c9 	mov.w	r6, r9, lsl #3
   b68b2:	2500      	movs	r5, #0
        if(cityIndex == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b68b4:	f8d8 3000 	ldr.w	r3, [r8]
   b68b8:	2b00      	cmp	r3, #0
   b68ba:	f040 826c 	bne.w	b6d96 <loop+0x796>
   b68be:	2d02      	cmp	r5, #2
   b68c0:	d006      	beq.n	b68d0 <loop+0x2d0>
   b68c2:	496a      	ldr	r1, [pc, #424]	; (b6a6c <loop+0x46c>)
   b68c4:	a827      	add	r0, sp, #156	; 0x9c
   b68c6:	f7fe f833 	bl	b4930 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b68ca:	2800      	cmp	r0, #0
   b68cc:	f000 8253 	beq.w	b6d76 <loop+0x776>
          Wire.beginTransmission(brownLineCTAAdr);
   b68d0:	f003 fe6a 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b68d4:	4b66      	ldr	r3, [pc, #408]	; (b6a70 <loop+0x470>)
   b68d6:	6819      	ldr	r1, [r3, #0]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b68d8:	f002 fe16 	bl	b9508 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(String(currentRailway.colors[0].c_str()));
   b68dc:	f003 fe64 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b68e0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   b68e2:	4604      	mov	r4, r0
   b68e4:	6819      	ldr	r1, [r3, #0]
   b68e6:	a817      	add	r0, sp, #92	; 0x5c
   b68e8:	f003 f845 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
   b68ec:	9917      	ldr	r1, [sp, #92]	; 0x5c
   b68ee:	4620      	mov	r0, r4
   b68f0:	f7fd fcbe 	bl	b4270 <_ZN5Print5writeEPKc.isra.0>
   b68f4:	a817      	add	r0, sp, #92	; 0x5c
   b68f6:	f002 fff3 	bl	b98e0 <_ZN6StringD1Ev>
        Wire.write(String(currentRailway.colors[1].c_str()));
   b68fa:	f003 fe55 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b68fe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   b6900:	4604      	mov	r4, r0
   b6902:	6999      	ldr	r1, [r3, #24]
   b6904:	a817      	add	r0, sp, #92	; 0x5c
   b6906:	f003 f836 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
   b690a:	9917      	ldr	r1, [sp, #92]	; 0x5c
   b690c:	4620      	mov	r0, r4
   b690e:	f7fd fcaf 	bl	b4270 <_ZN5Print5writeEPKc.isra.0>
   b6912:	a817      	add	r0, sp, #92	; 0x5c
   b6914:	f002 ffe4 	bl	b98e0 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b6918:	f003 fe46 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b691c:	f002 fdfb 	bl	b9516 <_ZN7TwoWire15endTransmissionEv>
        if(cityIndex == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b6920:	f8d8 3000 	ldr.w	r3, [r8]
   b6924:	2b00      	cmp	r3, #0
   b6926:	f040 824c 	bne.w	b6dc2 <loop+0x7c2>
   b692a:	2d02      	cmp	r5, #2
   b692c:	d006      	beq.n	b693c <loop+0x33c>
   b692e:	494f      	ldr	r1, [pc, #316]	; (b6a6c <loop+0x46c>)
   b6930:	a827      	add	r0, sp, #156	; 0x9c
   b6932:	f7fd fffd 	bl	b4930 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6936:	2800      	cmp	r0, #0
   b6938:	f000 8233 	beq.w	b6da2 <loop+0x7a2>
          Wire.beginTransmission(brownLineCTAAdr);
   b693c:	f003 fe34 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b6940:	4b4b      	ldr	r3, [pc, #300]	; (b6a70 <loop+0x470>)
   b6942:	6819      	ldr	r1, [r3, #0]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b6944:	f002 fde0 	bl	b9508 <_ZN7TwoWire17beginTransmissionEi>
        if(cityIndex == 0){
   b6948:	f8d8 4000 	ldr.w	r4, [r8]
   b694c:	2c00      	cmp	r4, #0
   b694e:	f040 82ec 	bne.w	b6f2a <loop+0x92a>
          if(i == 2){
   b6952:	2d02      	cmp	r5, #2
   b6954:	f040 8268 	bne.w	b6e28 <loop+0x828>
            if(currentRailway.name == greenLineCTA.name){
   b6958:	4946      	ldr	r1, [pc, #280]	; (b6a74 <loop+0x474>)
   b695a:	4f47      	ldr	r7, [pc, #284]	; (b6a78 <loop+0x478>)
   b695c:	a827      	add	r0, sp, #156	; 0x9c
   b695e:	f7fd ffe7 	bl	b4930 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6962:	2800      	cmp	r0, #0
   b6964:	f000 8233 	beq.w	b6dce <loop+0x7ce>
   b6968:	6a79      	ldr	r1, [r7, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b696a:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   b696e:	1a9b      	subs	r3, r3, r2
   b6970:	109a      	asrs	r2, r3, #2
   b6972:	e9d1 1300 	ldrd	r1, r3, [r1]
   b6976:	1a5b      	subs	r3, r3, r1
   b6978:	109b      	asrs	r3, r3, #2
              for(int j = 0; j < brownLineCTA.outputs[0].size() + (brownLineCTA.outputs[2].size() / 2); j++){
   b697a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   b697e:	42a3      	cmp	r3, r4
   b6980:	f240 82d3 	bls.w	b6f2a <loop+0x92a>
                Wire.write('0');
   b6984:	f003 fe10 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b6988:	2130      	movs	r1, #48	; 0x30
   b698a:	f7fd fc6d 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size() + (brownLineCTA.outputs[2].size() / 2); j++){
   b698e:	3401      	adds	r4, #1
   b6990:	e7ea      	b.n	b6968 <loop+0x368>
   b6992:	e9dd 3507 	ldrd	r3, r5, [sp, #28]
   b6996:	1aed      	subs	r5, r5, r3
   b6998:	10ed      	asrs	r5, r5, #3
        for(int i = 0; i < checkpointCount; i++){
   b699a:	f04f 0a00 	mov.w	sl, #0
   b699e:	45aa      	cmp	sl, r5
	return *(this->_M_impl._M_start + __n);
   b69a0:	9907      	ldr	r1, [sp, #28]
   b69a2:	da3b      	bge.n	b6a1c <loop+0x41c>
   b69a4:	eb01 06ca 	add.w	r6, r1, sl, lsl #3
    }

    float getDistance(float trainLat, float trainLon){
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b69a8:	edd6 7a00 	vldr	s15, [r6]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b69ac:	ee78 7ae7 	vsub.f32	s15, s17, s15
   b69b0:	ee17 0a90 	vmov	r0, s15
   b69b4:	f004 fa96 	bl	baee4 <__aeabi_f2d>
   b69b8:	edd6 7a01 	vldr	s15, [r6, #4]
   b69bc:	ee78 7a67 	vsub.f32	s15, s16, s15
   b69c0:	4602      	mov	r2, r0
   b69c2:	460b      	mov	r3, r1
   b69c4:	ee17 0a90 	vmov	r0, s15
   b69c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b69cc:	f004 fa8a 	bl	baee4 <__aeabi_f2d>
   b69d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b69d4:	ec41 0b1a 	vmov	d10, r0, r1
   b69d8:	4610      	mov	r0, r2
   b69da:	4619      	mov	r1, r3
   b69dc:	f004 fada 	bl	baf94 <__aeabi_dmul>
   b69e0:	ec53 2b1a 	vmov	r2, r3, d10
   b69e4:	4606      	mov	r6, r0
   b69e6:	460f      	mov	r7, r1
   b69e8:	ee1a 0a10 	vmov	r0, s20
   b69ec:	4619      	mov	r1, r3
   b69ee:	f004 fad1 	bl	baf94 <__aeabi_dmul>
   b69f2:	4602      	mov	r2, r0
   b69f4:	460b      	mov	r3, r1
   b69f6:	4630      	mov	r0, r6
   b69f8:	4639      	mov	r1, r7
   b69fa:	f004 f915 	bl	bac28 <__adddf3>
   b69fe:	ec41 0b10 	vmov	d0, r0, r1
   b6a02:	f004 f805 	bl	baa10 <sqrt>
          currentRailway.distances[i] = currentCheckpoints[i].getDistance(lat, lon);
   b6a06:	9e1e      	ldr	r6, [sp, #120]	; 0x78
   b6a08:	ec51 0b10 	vmov	r0, r1, d0
   b6a0c:	f004 fd92 	bl	bb534 <__aeabi_d2f>
   b6a10:	eb06 068a 	add.w	r6, r6, sl, lsl #2
        for(int i = 0; i < checkpointCount; i++){
   b6a14:	f10a 0a01 	add.w	sl, sl, #1
   b6a18:	6030      	str	r0, [r6, #0]
   b6a1a:	e7c0      	b.n	b699e <loop+0x39e>
      : _M_current(__i) { }
   b6a1c:	e9dd 761e 	ldrd	r7, r6, [sp, #120]	; 0x78
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
   b6a20:	42b7      	cmp	r7, r6
   b6a22:	d02f      	beq.n	b6a84 <loop+0x484>
   b6a24:	1d3a      	adds	r2, r7, #4
   b6a26:	463b      	mov	r3, r7
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
   b6a28:	4296      	cmp	r6, r2
	++_M_current;
   b6a2a:	4610      	mov	r0, r2
   b6a2c:	d02b      	beq.n	b6a86 <loop+0x486>
	if (__comp(__first, __result))
   b6a2e:	edd3 7a00 	vldr	s15, [r3]
   b6a32:	ed90 7a00 	vldr	s14, [r0]
   b6a36:	eeb4 7a67 	vcmp.f32	s14, s15
   b6a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6a3e:	f102 0204 	add.w	r2, r2, #4
   b6a42:	bf48      	it	mi
   b6a44:	4603      	movmi	r3, r0
   b6a46:	e7ef      	b.n	b6a28 <loop+0x428>
   b6a48:	20037f18 	.word	0x20037f18
   b6a4c:	000bda0b 	.word	0x000bda0b
   b6a50:	000bda11 	.word	0x000bda11
   b6a54:	000bda18 	.word	0x000bda18
   b6a58:	000bda22 	.word	0x000bda22
   b6a5c:	000bda2e 	.word	0x000bda2e
   b6a60:	000bda38 	.word	0x000bda38
   b6a64:	000bda41 	.word	0x000bda41
   b6a68:	000bda4b 	.word	0x000bda4b
   b6a6c:	2003e580 	.word	0x2003e580
   b6a70:	20035600 	.word	0x20035600
   b6a74:	2003564c 	.word	0x2003564c
   b6a78:	20035594 	.word	0x20035594
   b6a7c:	200352c8 	.word	0x200352c8
   b6a80:	7dcccccc 	.word	0x7dcccccc
   b6a84:	463b      	mov	r3, r7
        if(closestIndex == currentRailway.tripleIndex){
   b6a86:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b6a88:	1bdb      	subs	r3, r3, r7
   b6a8a:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
   b6a8e:	ea4f 00a3 	mov.w	r0, r3, asr #2
          closestIndex = currentRailway.loopIndex;
   b6a92:	bf08      	it	eq
   b6a94:	9831      	ldreq	r0, [sp, #196]	; 0xc4
   b6a96:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
        x1 = currentCheckpoints[closestIndex].lat;
   b6a9a:	edd3 7a00 	vldr	s15, [r3]
        y1 = currentCheckpoints[closestIndex].lon;
   b6a9e:	edd3 6a01 	vldr	s13, [r3, #4]
        if(currentCheckpoints[closestIndex].lat > lat){
   b6aa2:	eef4 8ae7 	vcmpe.f32	s17, s15
   b6aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          slope = (y1 - y) / (x1 - x);
   b6aaa:	ee77 5ae8 	vsub.f32	s11, s15, s17
          slope = (y - y1) / (x - x1);
   b6aae:	bf55      	itete	pl
   b6ab0:	ee38 6a66 	vsubpl.f32	s12, s16, s13
          slope = (y1 - y) / (x1 - x);
   b6ab4:	ee76 7ac8 	vsubmi.f32	s15, s13, s16
          slope = (y - y1) / (x - x1);
   b6ab8:	ee78 7ae7 	vsubpl.f32	s15, s17, s15
          slope = (y1 - y) / (x1 - x);
   b6abc:	ee87 7aa5 	vdivmi.f32	s14, s15, s11
   b6ac0:	ea4f 06c0 	mov.w	r6, r0, lsl #3
          slope = (y - y1) / (x - x1);
   b6ac4:	bf58      	it	pl
   b6ac6:	ee86 7a27 	vdivpl.f32	s14, s12, s15
        if(slope == 0){
   b6aca:	ed5f 7a13 	vldr	s15, [pc, #-76]	; b6a80 <loop+0x480>
   b6ace:	eeb5 7a40 	vcmp.f32	s14, #0.0
   b6ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6ad6:	d00a      	beq.n	b6aee <loop+0x4ee>
        }else if(slope >= __FLT_MAX__ / 10){
   b6ad8:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b6adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          perpendicularSlope = -1 / slope;
   b6ae0:	bfba      	itte	lt
   b6ae2:	eebf 6a00 	vmovlt.f32	s12, #240	; 0xbf800000 -1.0
   b6ae6:	eec6 7a07 	vdivlt.f32	s15, s12, s14
          perpendicularSlope = 0;
   b6aea:	eef0 7a49 	vmovge.f32	s15, s18
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b6aee:	eeb0 7a48 	vmov.f32	s14, s16
   b6af2:	eea7 7aa5 	vfma.f32	s14, s15, s11
   b6af6:	eef4 6ac7 	vcmpe.f32	s13, s14
   b6afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6afe:	bf4c      	ite	mi
   b6b00:	f04f 0c01 	movmi.w	ip, #1
   b6b04:	f04f 0c00 	movpl.w	ip, #0
        if(closestIndex == 0){
   b6b08:	2800      	cmp	r0, #0
   b6b0a:	d169      	bne.n	b6be0 <loop+0x5e0>
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b6b0c:	ed91 7a02 	vldr	s14, [r1, #8]
          if(currentRailway.loopIndex == closestIndex){
   b6b10:	9e31      	ldr	r6, [sp, #196]	; 0xc4
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b6b12:	ee37 7a68 	vsub.f32	s14, s14, s17
   b6b16:	eef0 6a48 	vmov.f32	s13, s16
   b6b1a:	eee7 6a27 	vfma.f32	s13, s14, s15
   b6b1e:	ed91 7a03 	vldr	s14, [r1, #12]
   b6b22:	eef4 6ac7 	vcmpe.f32	s13, s14
   b6b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6b2a:	bfcc      	ite	gt
   b6b2c:	2501      	movgt	r5, #1
   b6b2e:	2500      	movle	r5, #0
          if(currentRailway.loopIndex == closestIndex){
   b6b30:	b9ee      	cbnz	r6, b6b6e <loop+0x56e>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6b32:	1e53      	subs	r3, r2, #1
   b6b34:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
            if(nearestSide != pointSide){
   b6b38:	4565      	cmp	r5, ip
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6b3a:	ed91 0a00 	vldr	s0, [r1]
   b6b3e:	ed91 7a01 	vldr	s14, [r1, #4]
            if(nearestSide != pointSide){
   b6b42:	f040 8093 	bne.w	b6c6c <loop+0x66c>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6b46:	ee70 8a68 	vsub.f32	s17, s0, s17
   b6b4a:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b6b4e:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b6b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            }else if(nearestSide != loopPointSide){
   b6b56:	bfcc      	ite	gt
   b6b58:	2101      	movgt	r1, #1
   b6b5a:	2100      	movle	r1, #0
   b6b5c:	42a9      	cmp	r1, r5
              }else if(nearestSide != loopPointSide){
   b6b5e:	d100      	bne.n	b6b62 <loop+0x562>
                secondClosestIndex = currentRailway.tripleIndex + 1;
   b6b60:	1c53      	adds	r3, r2, #1
          if(closestIndex < secondClosestIndex){
   b6b62:	429a      	cmp	r2, r3
   b6b64:	f2c0 8084 	blt.w	b6c70 <loop+0x670>
   b6b68:	4611      	mov	r1, r2
   b6b6a:	461e      	mov	r6, r3
   b6b6c:	e005      	b.n	b6b7a <loop+0x57a>
            if(pointSide == nearestSide){
   b6b6e:	4565      	cmp	r5, ip
   b6b70:	d06c      	beq.n	b6c4c <loop+0x64c>
   b6b72:	4602      	mov	r2, r0
   b6b74:	4606      	mov	r6, r0
   b6b76:	2301      	movs	r3, #1
   b6b78:	4619      	mov	r1, r3
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b6b7a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   b6b7e:	eb07 0086 	add.w	r0, r7, r6, lsl #2
   b6b82:	ed90 7a00 	vldr	s14, [r0]
   b6b86:	edd1 7a00 	vldr	s15, [r1]
          segmentPos *= currentRailway.scalers[lowerIndex];
   b6b8a:	9921      	ldr	r1, [sp, #132]	; 0x84
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b6b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
          segmentPos *= currentRailway.scalers[lowerIndex];
   b6b90:	eb01 0186 	add.w	r1, r1, r6, lsl #2
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b6b94:	eec7 6a27 	vdiv.f32	s13, s14, s15
          segmentPos *= currentRailway.scalers[lowerIndex];
   b6b98:	ed91 8a00 	vldr	s16, [r1]
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b6b9c:	9935      	ldr	r1, [sp, #212]	; 0xd4
          segmentPos *= currentRailway.scalers[lowerIndex];
   b6b9e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b6ba2:	4291      	cmp	r1, r2
          segmentPos *= currentRailway.scalers[lowerIndex];
   b6ba4:	ee28 8a26 	vmul.f32	s16, s16, s13
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b6ba8:	db65      	blt.n	b6c76 <loop+0x676>
   b6baa:	9d34      	ldr	r5, [sp, #208]	; 0xd0
   b6bac:	4295      	cmp	r5, r2
   b6bae:	dc62      	bgt.n	b6c76 <loop+0x676>
   b6bb0:	4299      	cmp	r1, r3
   b6bb2:	db60      	blt.n	b6c76 <loop+0x676>
   b6bb4:	429d      	cmp	r5, r3
   b6bb6:	dc5e      	bgt.n	b6c76 <loop+0x676>
            Serial.println("in green");
   b6bb8:	f003 fba8 	bl	ba30c <_Z16_fetch_usbserialv>
   b6bbc:	49a8      	ldr	r1, [pc, #672]	; (b6e60 <loop+0x860>)
   b6bbe:	f002 fe30 	bl	b9822 <_ZN5Print7printlnEPKc>
            pcbSegment = 3;
   b6bc2:	2703      	movs	r7, #3
        bool inLoop = false;
   b6bc4:	2300      	movs	r3, #0
   b6bc6:	9a21      	ldr	r2, [sp, #132]	; 0x84
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b6bc8:	42ae      	cmp	r6, r5
   b6bca:	dd69      	ble.n	b6ca0 <loop+0x6a0>
            segmentPos += currentRailway.scalers[i];
   b6bcc:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
   b6bd0:	ee07 1a90 	vmov	s15, r1
   b6bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b6bd8:	3501      	adds	r5, #1
            segmentPos += currentRailway.scalers[i];
   b6bda:	ee38 8a27 	vadd.f32	s16, s16, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b6bde:	e7f3      	b.n	b6bc8 <loop+0x5c8>
   b6be0:	3e08      	subs	r6, #8
   b6be2:	440e      	add	r6, r1
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b6be4:	ed96 7a00 	vldr	s14, [r6]
   b6be8:	ee37 7a68 	vsub.f32	s14, s14, s17
   b6bec:	eef0 6a48 	vmov.f32	s13, s16
   b6bf0:	eee7 6a27 	vfma.f32	s13, s14, s15
          if(closestIndex == checkpointCount - 1){
   b6bf4:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b6bf8:	1e43      	subs	r3, r0, #1
   b6bfa:	ed96 7a01 	vldr	s14, [r6, #4]
   b6bfe:	eef4 6ac7 	vcmpe.f32	s13, s14
   b6c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6c06:	bfcc      	ite	gt
   b6c08:	2601      	movgt	r6, #1
   b6c0a:	2600      	movle	r6, #0
          if(closestIndex == checkpointCount - 1){
   b6c0c:	4586      	cmp	lr, r0
   b6c0e:	d129      	bne.n	b6c64 <loop+0x664>
            if(closestIndex == currentRailway.loopIndex){
   b6c10:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   b6c12:	4283      	cmp	r3, r0
   b6c14:	d118      	bne.n	b6c48 <loop+0x648>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6c16:	1e53      	subs	r3, r2, #1
   b6c18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
              if(nearestSide != pointSide){
   b6c1c:	4566      	cmp	r6, ip
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6c1e:	ed91 0a00 	vldr	s0, [r1]
   b6c22:	ed91 7a01 	vldr	s14, [r1, #4]
              if(nearestSide != pointSide){
   b6c26:	d002      	beq.n	b6c2e <loop+0x62e>
                secondClosestIndex = checkpointCount - 2;
   b6c28:	1eab      	subs	r3, r5, #2
   b6c2a:	4602      	mov	r2, r0
   b6c2c:	e799      	b.n	b6b62 <loop+0x562>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6c2e:	ee70 8a68 	vsub.f32	s17, s0, s17
   b6c32:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b6c36:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b6c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              }else if(nearestSide != loopPointSide){
   b6c3e:	bfcc      	ite	gt
   b6c40:	2101      	movgt	r1, #1
   b6c42:	2100      	movle	r1, #0
   b6c44:	42b1      	cmp	r1, r6
   b6c46:	e78a      	b.n	b6b5e <loop+0x55e>
              if(pointSide == nearestSide){
   b6c48:	4566      	cmp	r6, ip
   b6c4a:	d1ed      	bne.n	b6c28 <loop+0x628>
        String destNm = train.key("destination").valueString();
   b6c4c:	a817      	add	r0, sp, #92	; 0x5c
   b6c4e:	f002 fe47 	bl	b98e0 <_ZN6StringD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b6c52:	a813      	add	r0, sp, #76	; 0x4c
   b6c54:	f002 fe44 	bl	b98e0 <_ZN6StringD1Ev>
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b6c58:	a80a      	add	r0, sp, #40	; 0x28
        count++;
   b6c5a:	f108 0801 	add.w	r8, r8, #1
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b6c5e:	f000 fb1b 	bl	b7298 <_ZN13JsonReferenceD1Ev>
   b6c62:	e5a9      	b.n	b67b8 <loop+0x1b8>
            if(pointSide == nearestSide){
   b6c64:	4566      	cmp	r6, ip
   b6c66:	d1e0      	bne.n	b6c2a <loop+0x62a>
              secondClosestIndex = closestIndex + 1;
   b6c68:	1c43      	adds	r3, r0, #1
   b6c6a:	e7de      	b.n	b6c2a <loop+0x62a>
   b6c6c:	4602      	mov	r2, r0
   b6c6e:	e782      	b.n	b6b76 <loop+0x576>
   b6c70:	4619      	mov	r1, r3
   b6c72:	4616      	mov	r6, r2
   b6c74:	e781      	b.n	b6b7a <loop+0x57a>
          else if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b6c76:	9932      	ldr	r1, [sp, #200]	; 0xc8
   b6c78:	4291      	cmp	r1, r2
   b6c7a:	dc0a      	bgt.n	b6c92 <loop+0x692>
   b6c7c:	4299      	cmp	r1, r3
   b6c7e:	dc08      	bgt.n	b6c92 <loop+0x692>
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b6c80:	9d33      	ldr	r5, [sp, #204]	; 0xcc
   b6c82:	4295      	cmp	r5, r2
   b6c84:	db09      	blt.n	b6c9a <loop+0x69a>
   b6c86:	429d      	cmp	r5, r3
   b6c88:	db07      	blt.n	b6c9a <loop+0x69a>
            inLoop = true;
   b6c8a:	9b03      	ldr	r3, [sp, #12]
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b6c8c:	460d      	mov	r5, r1
            pcbSegment = 2;
   b6c8e:	2702      	movs	r7, #2
   b6c90:	e799      	b.n	b6bc6 <loop+0x5c6>
            lowerScaleBound = 0;
   b6c92:	2500      	movs	r5, #0
        bool inLoop = false;
   b6c94:	462b      	mov	r3, r5
            pcbSegment = 0;
   b6c96:	462f      	mov	r7, r5
   b6c98:	e795      	b.n	b6bc6 <loop+0x5c6>
        bool inLoop = false;
   b6c9a:	2300      	movs	r3, #0
            pcbSegment = 1;
   b6c9c:	2701      	movs	r7, #1
   b6c9e:	e792      	b.n	b6bc6 <loop+0x5c6>
   b6ca0:	9d24      	ldr	r5, [sp, #144]	; 0x90
          if(inLoop){
   b6ca2:	2b00      	cmp	r3, #0
   b6ca4:	d043      	beq.n	b6d2e <loop+0x72e>
            if(currentRailway.name == pinkLineCTA.name){
   b6ca6:	496f      	ldr	r1, [pc, #444]	; (b6e64 <loop+0x864>)
   b6ca8:	a827      	add	r0, sp, #156	; 0x9c
   b6caa:	f7fd fe41 	bl	b4930 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6cae:	b1f0      	cbz	r0, b6cee <loop+0x6ee>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6cb0:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b6cb4:	1a9b      	subs	r3, r3, r2
   b6cb6:	109b      	asrs	r3, r3, #2
              segmentPos = (float)currentRailway.outputs[2].size() - segmentPos;
   b6cb8:	ee07 3a90 	vmov	s15, r3
   b6cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b6cc0:	ee37 8ac8 	vsub.f32	s16, s15, s16
          if(pcbSegment == 1 && currentRailway.name == greenLineCTA.name){
   b6cc4:	2f01      	cmp	r7, #1
   b6cc6:	d140      	bne.n	b6d4a <loop+0x74a>
   b6cc8:	4967      	ldr	r1, [pc, #412]	; (b6e68 <loop+0x868>)
   b6cca:	a827      	add	r0, sp, #156	; 0x9c
   b6ccc:	f7fd fe30 	bl	b4930 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6cd0:	2800      	cmp	r0, #0
   b6cd2:	d042      	beq.n	b6d5a <loop+0x75a>
   b6cd4:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   b6cd8:	1a9b      	subs	r3, r3, r2
   b6cda:	109b      	asrs	r3, r3, #2
            segmentPos = (float)currentRailway.outputs[1].size() - segmentPos;
   b6cdc:	ee07 3a90 	vmov	s15, r3
   b6ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b6ce4:	ee37 8ac8 	vsub.f32	s16, s15, s16
            trainDir = 6 - trainDir;
   b6ce8:	f1c4 0406 	rsb	r4, r4, #6
   b6cec:	e035      	b.n	b6d5a <loop+0x75a>
            }else if(currentRailway.name == orangeLineCTA.name){
   b6cee:	495f      	ldr	r1, [pc, #380]	; (b6e6c <loop+0x86c>)
   b6cf0:	a827      	add	r0, sp, #156	; 0x9c
   b6cf2:	f7fd fe1d 	bl	b4930 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6cf6:	2800      	cmp	r0, #0
   b6cf8:	d0e4      	beq.n	b6cc4 <loop+0x6c4>
	return *(this->_M_impl._M_start + __n);
   b6cfa:	4b5d      	ldr	r3, [pc, #372]	; (b6e70 <loop+0x870>)
   b6cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6cfe:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   b6d02:	1ad2      	subs	r2, r2, r3
   b6d04:	1092      	asrs	r2, r2, #2
              segmentPos = (int)(segmentPos + orangeLineCTA.outputs[2].size() / 2) % orangeLineCTA.outputs[2].size();
   b6d06:	0853      	lsrs	r3, r2, #1
   b6d08:	ee07 3a90 	vmov	s15, r3
   b6d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b6d10:	ee37 8a88 	vadd.f32	s16, s15, s16
   b6d14:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   b6d18:	ee17 3a90 	vmov	r3, s15
   b6d1c:	fbb3 f1f2 	udiv	r1, r3, r2
   b6d20:	fb02 3311 	mls	r3, r2, r1, r3
   b6d24:	ee08 3a10 	vmov	s16, r3
   b6d28:	eeb8 8a48 	vcvt.f32.u32	s16, s16
   b6d2c:	e7ca      	b.n	b6cc4 <loop+0x6c4>
            if(currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name){
   b6d2e:	4951      	ldr	r1, [pc, #324]	; (b6e74 <loop+0x874>)
   b6d30:	a827      	add	r0, sp, #156	; 0x9c
   b6d32:	f7fd fdfd 	bl	b4930 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6d36:	b928      	cbnz	r0, b6d44 <loop+0x744>
   b6d38:	494f      	ldr	r1, [pc, #316]	; (b6e78 <loop+0x878>)
   b6d3a:	a827      	add	r0, sp, #156	; 0x9c
   b6d3c:	f7fd fdf8 	bl	b4930 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6d40:	2800      	cmp	r0, #0
   b6d42:	d0bf      	beq.n	b6cc4 <loop+0x6c4>
              trainDir = 6 - trainDir;
   b6d44:	f1c4 0406 	rsb	r4, r4, #6
   b6d48:	e7bc      	b.n	b6cc4 <loop+0x6c4>
          if(pcbSegment == 3 && currentRailway.name == pinkLineCTA.name){
   b6d4a:	2f03      	cmp	r7, #3
   b6d4c:	d105      	bne.n	b6d5a <loop+0x75a>
   b6d4e:	4945      	ldr	r1, [pc, #276]	; (b6e64 <loop+0x864>)
   b6d50:	a827      	add	r0, sp, #156	; 0x9c
   b6d52:	f7fd fded 	bl	b4930 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6d56:	2800      	cmp	r0, #0
   b6d58:	d1c6      	bne.n	b6ce8 <loop+0x6e8>
  { return __builtin_floorf(__x); }
   b6d5a:	eeb0 0a48 	vmov.f32	s0, s16
   b6d5e:	f003 fe11 	bl	ba984 <floorf>
	return *(this->_M_impl._M_start + __n);
   b6d62:	230c      	movs	r3, #12
          currentRailway.outputs[pcbSegment][(int)floor(segmentPos)] = trainDir;
   b6d64:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b6d68:	435f      	muls	r7, r3
   b6d6a:	ee10 2a10 	vmov	r2, s0
   b6d6e:	59eb      	ldr	r3, [r5, r7]
   b6d70:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b6d74:	e76a      	b.n	b6c4c <loop+0x64c>
        }else if(cityIndex == 0 && i == 3){
   b6d76:	2d03      	cmp	r5, #3
   b6d78:	d10d      	bne.n	b6d96 <loop+0x796>
          if(currentRailway.name == orangeLineCTA.name){
   b6d7a:	493c      	ldr	r1, [pc, #240]	; (b6e6c <loop+0x86c>)
   b6d7c:	4c3f      	ldr	r4, [pc, #252]	; (b6e7c <loop+0x87c>)
   b6d7e:	a827      	add	r0, sp, #156	; 0x9c
   b6d80:	f7fd fdd6 	bl	b4930 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6d84:	b118      	cbz	r0, b6d8e <loop+0x78e>
            Wire.beginTransmission(greenLineCTAAdr[0]);
   b6d86:	f003 fc0f 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b6d8a:	6821      	ldr	r1, [r4, #0]
   b6d8c:	e5a4      	b.n	b68d8 <loop+0x2d8>
            Wire.beginTransmission(greenLineCTAAdr[1]);
   b6d8e:	f003 fc0b 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b6d92:	6861      	ldr	r1, [r4, #4]
   b6d94:	e5a0      	b.n	b68d8 <loop+0x2d8>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b6d96:	f003 fc07 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b6d9a:	f8db 3000 	ldr.w	r3, [fp]
   b6d9e:	5999      	ldr	r1, [r3, r6]
   b6da0:	e59a      	b.n	b68d8 <loop+0x2d8>
        }else if(cityIndex == 0 && i == 3){
   b6da2:	2d03      	cmp	r5, #3
   b6da4:	d10d      	bne.n	b6dc2 <loop+0x7c2>
          if(currentRailway.name == orangeLineCTA.name){
   b6da6:	4931      	ldr	r1, [pc, #196]	; (b6e6c <loop+0x86c>)
   b6da8:	4c34      	ldr	r4, [pc, #208]	; (b6e7c <loop+0x87c>)
   b6daa:	a827      	add	r0, sp, #156	; 0x9c
   b6dac:	f7fd fdc0 	bl	b4930 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6db0:	b118      	cbz	r0, b6dba <loop+0x7ba>
            Wire.beginTransmission(greenLineCTAAdr[0]);
   b6db2:	f003 fbf9 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b6db6:	6821      	ldr	r1, [r4, #0]
   b6db8:	e5c4      	b.n	b6944 <loop+0x344>
            Wire.beginTransmission(greenLineCTAAdr[1]);
   b6dba:	f003 fbf5 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b6dbe:	6861      	ldr	r1, [r4, #4]
   b6dc0:	e5c0      	b.n	b6944 <loop+0x344>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b6dc2:	f003 fbf1 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b6dc6:	f8db 3000 	ldr.w	r3, [fp]
   b6dca:	5999      	ldr	r1, [r3, r6]
   b6dcc:	e5ba      	b.n	b6944 <loop+0x344>
            else if(currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name){
   b6dce:	f107 0130 	add.w	r1, r7, #48	; 0x30
   b6dd2:	a827      	add	r0, sp, #156	; 0x9c
   b6dd4:	f7fd fdac 	bl	b4930 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6dd8:	b920      	cbnz	r0, b6de4 <loop+0x7e4>
   b6dda:	4927      	ldr	r1, [pc, #156]	; (b6e78 <loop+0x878>)
   b6ddc:	a827      	add	r0, sp, #156	; 0x9c
   b6dde:	f7fd fda7 	bl	b4930 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6de2:	b190      	cbz	r0, b6e0a <loop+0x80a>
   b6de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6de6:	e9d2 2300 	ldrd	r2, r3, [r2]
   b6dea:	1a9b      	subs	r3, r3, r2
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b6dec:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b6df0:	f080 809b 	bcs.w	b6f2a <loop+0x92a>
                Wire.write((char)currentRailway.outputs[0][j] + '0');
   b6df4:	f003 fbd8 	bl	ba5a8 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b6df8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b6dfa:	681b      	ldr	r3, [r3, #0]
   b6dfc:	f813 1024 	ldrb.w	r1, [r3, r4, lsl #2]
   b6e00:	3130      	adds	r1, #48	; 0x30
   b6e02:	f7fd fa31 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b6e06:	3401      	adds	r4, #1
   b6e08:	e7ec      	b.n	b6de4 <loop+0x7e4>
   b6e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6e0c:	e9d2 2300 	ldrd	r2, r3, [r2]
   b6e10:	1a9b      	subs	r3, r3, r2
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b6e12:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b6e16:	f080 8088 	bcs.w	b6f2a <loop+0x92a>
                Wire.write('0');
   b6e1a:	f003 fbc5 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b6e1e:	2130      	movs	r1, #48	; 0x30
   b6e20:	f7fd fa22 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b6e24:	3401      	adds	r4, #1
   b6e26:	e7f0      	b.n	b6e0a <loop+0x80a>
          if(i == 1 && (currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name)){
   b6e28:	2d01      	cmp	r5, #1
   b6e2a:	f040 80a4 	bne.w	b6f76 <loop+0x976>
   b6e2e:	4911      	ldr	r1, [pc, #68]	; (b6e74 <loop+0x874>)
   b6e30:	a827      	add	r0, sp, #156	; 0x9c
   b6e32:	f7fd fd7d 	bl	b4930 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6e36:	b928      	cbnz	r0, b6e44 <loop+0x844>
   b6e38:	490f      	ldr	r1, [pc, #60]	; (b6e78 <loop+0x878>)
   b6e3a:	a827      	add	r0, sp, #156	; 0x9c
   b6e3c:	f7fd fd78 	bl	b4930 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6e40:	2800      	cmp	r0, #0
   b6e42:	d072      	beq.n	b6f2a <loop+0x92a>
	return *(this->_M_impl._M_start + __n);
   b6e44:	9a24      	ldr	r2, [sp, #144]	; 0x90
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6e46:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
   b6e4a:	1a9b      	subs	r3, r3, r2
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b6e4c:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b6e50:	d26b      	bcs.n	b6f2a <loop+0x92a>
              Wire.write('0');
   b6e52:	f003 fba9 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b6e56:	2130      	movs	r1, #48	; 0x30
   b6e58:	f7fd fa06 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b6e5c:	3401      	adds	r4, #1
   b6e5e:	e7f1      	b.n	b6e44 <loop+0x844>
   b6e60:	000bda51 	.word	0x000bda51
   b6e64:	2003e514 	.word	0x2003e514
   b6e68:	2003564c 	.word	0x2003564c
   b6e6c:	20037edc 	.word	0x20037edc
   b6e70:	20037eac 	.word	0x20037eac
   b6e74:	200355c4 	.word	0x200355c4
   b6e78:	2003e580 	.word	0x2003e580
   b6e7c:	20035688 	.word	0x20035688
          }else if(i == 3 && currentRailway.name == pinkLineCTA.name){
   b6e80:	494f      	ldr	r1, [pc, #316]	; (b6fc0 <loop+0x9c0>)
   b6e82:	a827      	add	r0, sp, #156	; 0x9c
   b6e84:	f7fd fd54 	bl	b4930 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6e88:	2800      	cmp	r0, #0
   b6e8a:	d04e      	beq.n	b6f2a <loop+0x92a>
	return *(this->_M_impl._M_start + __n);
   b6e8c:	4f4d      	ldr	r7, [pc, #308]	; (b6fc4 <loop+0x9c4>)
   b6e8e:	f8df a144 	ldr.w	sl, [pc, #324]	; b6fd4 <loop+0x9d4>
   b6e92:	6a78      	ldr	r0, [r7, #36]	; 0x24
   b6e94:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6e98:	e9d0 3200 	ldrd	r3, r2, [r0]
   b6e9c:	1ad2      	subs	r2, r2, r3
   b6e9e:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b6ea2:	1a5b      	subs	r3, r3, r1
   b6ea4:	109b      	asrs	r3, r3, #2
            for(int j = 0; j < greenLineCTA.outputs[0].size() - pinkLineCTA.outputs[3].size(); j++){
   b6ea6:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b6eaa:	42a3      	cmp	r3, r4
   b6eac:	d93d      	bls.n	b6f2a <loop+0x92a>
              Wire.write('0');
   b6eae:	f003 fb7b 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b6eb2:	2130      	movs	r1, #48	; 0x30
   b6eb4:	f7fd f9d8 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < greenLineCTA.outputs[0].size() - pinkLineCTA.outputs[3].size(); j++){
   b6eb8:	3401      	adds	r4, #1
   b6eba:	e7ea      	b.n	b6e92 <loop+0x892>
        Serial.println();
   b6ebc:	f003 fa26 	bl	ba30c <_Z16_fetch_usbserialv>
   b6ec0:	f002 fca3 	bl	b980a <_ZN5Print7printlnEv>
      for(int i = 0; i < 4; i++){
   b6ec4:	3501      	adds	r5, #1
        Wire.endTransmission();
   b6ec6:	f003 fb6f 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b6eca:	f002 fb24 	bl	b9516 <_ZN7TwoWire15endTransmissionEv>
      for(int i = 0; i < 4; i++){
   b6ece:	2d04      	cmp	r5, #4
   b6ed0:	f106 0604 	add.w	r6, r6, #4
   b6ed4:	f47f acee 	bne.w	b68b4 <loop+0x2b4>
   b6ed8:	2300      	movs	r3, #0
          currentRailway.outputs[i][j] = 0;
   b6eda:	461c      	mov	r4, r3
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6edc:	2200      	movs	r2, #0
	return *(this->_M_impl._M_start + __n);
   b6ede:	9924      	ldr	r1, [sp, #144]	; 0x90
   b6ee0:	18cd      	adds	r5, r1, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6ee2:	58c8      	ldr	r0, [r1, r3]
   b6ee4:	6869      	ldr	r1, [r5, #4]
   b6ee6:	1a09      	subs	r1, r1, r0
   b6ee8:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
   b6eec:	d203      	bcs.n	b6ef6 <loop+0x8f6>
          currentRailway.outputs[i][j] = 0;
   b6eee:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6ef2:	3201      	adds	r2, #1
   b6ef4:	e7f3      	b.n	b6ede <loop+0x8de>
      for(int i = 0; i < 4; i++){
   b6ef6:	330c      	adds	r3, #12
   b6ef8:	2b30      	cmp	r3, #48	; 0x30
   b6efa:	d1ef      	bne.n	b6edc <loop+0x8dc>
      Serial.println();
   b6efc:	f003 fa06 	bl	ba30c <_Z16_fetch_usbserialv>
   b6f00:	f002 fc83 	bl	b980a <_ZN5Print7printlnEv>
      }
   b6f04:	a807      	add	r0, sp, #28
   b6f06:	f7fd fc1d 	bl	b4744 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      Railway currentRailway = cities[cityIndex].railways[j];
   b6f0a:	a81b      	add	r0, sp, #108	; 0x6c
   b6f0c:	f7fd ff86 	bl	b4e1c <_ZN7RailwayD1Ev>
    for(int j = 0; j < cities[cityIndex].railways.size(); j++){
   b6f10:	f109 0901 	add.w	r9, r9, #1
   b6f14:	f7ff bbb7 	b.w	b6686 <loop+0x86>
    Serial.println();
   b6f18:	f003 f9f8 	bl	ba30c <_Z16_fetch_usbserialv>
}
   b6f1c:	b037      	add	sp, #220	; 0xdc
   b6f1e:	ecbd 8b06 	vpop	{d8-d10}
   b6f22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Serial.println();
   b6f26:	f002 bc70 	b.w	b980a <_ZN5Print7printlnEv>
        Serial.printf("%s rail part %i: ", currentRailway.name.c_str(), i);
   b6f2a:	f003 f9ef 	bl	ba30c <_Z16_fetch_usbserialv>
   b6f2e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   b6f30:	4925      	ldr	r1, [pc, #148]	; (b6fc8 <loop+0x9c8>)
   b6f32:	462b      	mov	r3, r5
   b6f34:	f7fd fa80 	bl	b4438 <_ZN5Print6printfEPKcz>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6f38:	240c      	movs	r4, #12
   b6f3a:	436c      	muls	r4, r5
   b6f3c:	2700      	movs	r7, #0
	return *(this->_M_impl._M_start + __n);
   b6f3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   b6f40:	1913      	adds	r3, r2, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6f42:	5912      	ldr	r2, [r2, r4]
   b6f44:	685b      	ldr	r3, [r3, #4]
   b6f46:	1a9b      	subs	r3, r3, r2
   b6f48:	ebb7 0fa3 	cmp.w	r7, r3, asr #2
   b6f4c:	d2b6      	bcs.n	b6ebc <loop+0x8bc>
          Wire.write((char)currentRailway.outputs[i][j] + '0');
   b6f4e:	f003 fb2b 	bl	ba5a8 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b6f52:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b6f54:	591b      	ldr	r3, [r3, r4]
   b6f56:	f813 1027 	ldrb.w	r1, [r3, r7, lsl #2]
   b6f5a:	3130      	adds	r1, #48	; 0x30
   b6f5c:	f7fd f984 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
          Serial.print(currentRailway.outputs[i][j]);
   b6f60:	f003 f9d4 	bl	ba30c <_Z16_fetch_usbserialv>
   b6f64:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b6f66:	591b      	ldr	r3, [r3, r4]
   b6f68:	220a      	movs	r2, #10
   b6f6a:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
   b6f6e:	f7fd f931 	bl	b41d4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6f72:	3701      	adds	r7, #1
   b6f74:	e7e3      	b.n	b6f3e <loop+0x93e>
          if(i == 3 && currentRailway.name == orangeLineCTA.name){
   b6f76:	2d03      	cmp	r5, #3
   b6f78:	d1d7      	bne.n	b6f2a <loop+0x92a>
   b6f7a:	4914      	ldr	r1, [pc, #80]	; (b6fcc <loop+0x9cc>)
   b6f7c:	a827      	add	r0, sp, #156	; 0x9c
   b6f7e:	f7fd fcd7 	bl	b4930 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6f82:	2800      	cmp	r0, #0
   b6f84:	f43f af7c 	beq.w	b6e80 <loop+0x880>
   b6f88:	4f0e      	ldr	r7, [pc, #56]	; (b6fc4 <loop+0x9c4>)
   b6f8a:	4b11      	ldr	r3, [pc, #68]	; (b6fd0 <loop+0x9d0>)
   b6f8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   b6f8e:	6a59      	ldr	r1, [r3, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6f90:	e9d0 3200 	ldrd	r3, r2, [r0]
   b6f94:	1ad2      	subs	r2, r2, r3
   b6f96:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b6f9a:	1a5b      	subs	r3, r3, r1
   b6f9c:	109b      	asrs	r3, r3, #2
            for(int j = 0; j < greenLineCTA.outputs[0].size() - orangeLineCTA.outputs[3].size(); j++){
   b6f9e:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b6fa2:	42a3      	cmp	r3, r4
   b6fa4:	d9c1      	bls.n	b6f2a <loop+0x92a>
              Wire.write('0');
   b6fa6:	f003 faff 	bl	ba5a8 <_Z19__fetch_global_Wirev>
   b6faa:	2130      	movs	r1, #48	; 0x30
   b6fac:	f7fd f95c 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < greenLineCTA.outputs[0].size() - orangeLineCTA.outputs[3].size(); j++){
   b6fb0:	3401      	adds	r4, #1
   b6fb2:	e7ea      	b.n	b6f8a <loop+0x98a>
}
   b6fb4:	b037      	add	sp, #220	; 0xdc
   b6fb6:	ecbd 8b06 	vpop	{d8-d10}
   b6fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6fbe:	bf00      	nop
   b6fc0:	2003e514 	.word	0x2003e514
   b6fc4:	2003561c 	.word	0x2003561c
   b6fc8:	000bda5a 	.word	0x000bda5a
   b6fcc:	20037edc 	.word	0x20037edc
   b6fd0:	20037eac 	.word	0x20037eac
   b6fd4:	2003e4e4 	.word	0x2003e4e4

000b6fd8 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b6fd8:	b510      	push	{r4, lr}
   b6fda:	4604      	mov	r4, r0
   b6fdc:	f003 f8c8 	bl	ba170 <_ZN9TCPClientC1Ev>
{

}
   b6fe0:	4620      	mov	r0, r4
   b6fe2:	bd10      	pop	{r4, pc}

000b6fe4 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b6fe4:	b538      	push	{r3, r4, r5, lr}
   b6fe6:	4604      	mov	r4, r0
   b6fe8:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b6fea:	f002 fc07 	bl	b97fc <_ZN5Print5printEPKc>
    client.print(": ");
   b6fee:	4905      	ldr	r1, [pc, #20]	; (b7004 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b6ff0:	4620      	mov	r0, r4
   b6ff2:	f002 fc03 	bl	b97fc <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b6ff6:	4629      	mov	r1, r5
   b6ff8:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b6ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b6ffe:	f002 bc10 	b.w	b9822 <_ZN5Print7printlnEPKc>
   b7002:	bf00      	nop
   b7004:	000bd80f 	.word	0x000bd80f

000b7008 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b7008:	b538      	push	{r3, r4, r5, lr}
   b700a:	4605      	mov	r5, r0
   b700c:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b700e:	f002 fbf5 	bl	b97fc <_ZN5Print5printEPKc>
    client.print(": ");
   b7012:	490b      	ldr	r1, [pc, #44]	; (b7040 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b7014:	4628      	mov	r0, r5
   b7016:	f002 fbf1 	bl	b97fc <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b701a:	2c00      	cmp	r4, #0
   b701c:	da0d      	bge.n	b703a <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b701e:	212d      	movs	r1, #45	; 0x2d
   b7020:	4628      	mov	r0, r5
   b7022:	f002 fbef 	bl	b9804 <_ZN5Print5printEc>
            val = -n;
   b7026:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b7028:	4628      	mov	r0, r5
   b702a:	220a      	movs	r2, #10
   b702c:	f002 fc03 	bl	b9836 <_ZN5Print11printNumberEmh>
        n += println();
   b7030:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b7032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7036:	f002 bbe8 	b.w	b980a <_ZN5Print7printlnEv>
            val = n;
   b703a:	4621      	mov	r1, r4
   b703c:	e7f4      	b.n	b7028 <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b703e:	bf00      	nop
   b7040:	000bd80f 	.word	0x000bd80f

000b7044 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b7044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7048:	460e      	mov	r6, r1
   b704a:	b091      	sub	sp, #68	; 0x44
   b704c:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b704e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7052:	6013      	str	r3, [r2, #0]
{
   b7054:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b7056:	2100      	movs	r1, #0
   b7058:	4630      	mov	r0, r6
   b705a:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b705e:	4617      	mov	r7, r2
   b7060:	f002 fd4c 	bl	b9afc <_ZNK6String6equalsEPKc>
   b7064:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b7068:	4603      	mov	r3, r0
   b706a:	b998      	cbnz	r0, b7094 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b706c:	f1be 0f00 	cmp.w	lr, #0
   b7070:	bf14      	ite	ne
   b7072:	4672      	movne	r2, lr
   b7074:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b7076:	6831      	ldr	r1, [r6, #0]
   b7078:	b292      	uxth	r2, r2
   b707a:	4620      	mov	r0, r4
   b707c:	f002 fe78 	bl	b9d70 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b7080:	1e05      	subs	r5, r0, #0
   b7082:	bf18      	it	ne
   b7084:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b7086:	b9c5      	cbnz	r5, b70ba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b7088:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b708a:	b011      	add	sp, #68	; 0x44
   b708c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b7090:	f003 b824 	b.w	ba0dc <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b7094:	4b76      	ldr	r3, [pc, #472]	; (b7270 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b7096:	930a      	str	r3, [sp, #40]	; 0x28
   b7098:	f106 0c14 	add.w	ip, r6, #20
   b709c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b70a0:	ad0b      	add	r5, sp, #44	; 0x2c
   b70a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b70a4:	f8dc 3000 	ldr.w	r3, [ip]
   b70a8:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b70aa:	fa1f f28e 	uxth.w	r2, lr
   b70ae:	2300      	movs	r3, #0
   b70b0:	a90a      	add	r1, sp, #40	; 0x28
   b70b2:	4620      	mov	r0, r4
   b70b4:	f002 ff3c 	bl	b9f30 <_ZN9TCPClient7connectE9IPAddresstm>
   b70b8:	e7e2      	b.n	b7080 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b70ba:	4649      	mov	r1, r9
   b70bc:	4620      	mov	r0, r4
   b70be:	f002 fb9d 	bl	b97fc <_ZN5Print5printEPKc>
    client.print(" ");
   b70c2:	496c      	ldr	r1, [pc, #432]	; (b7274 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b70c4:	4620      	mov	r0, r4
   b70c6:	f002 fb99 	bl	b97fc <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b70ca:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b70cc:	4620      	mov	r0, r4
   b70ce:	f002 fb95 	bl	b97fc <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b70d2:	4969      	ldr	r1, [pc, #420]	; (b7278 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b70d4:	4620      	mov	r0, r4
   b70d6:	f002 fb91 	bl	b97fc <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b70da:	4968      	ldr	r1, [pc, #416]	; (b727c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b70dc:	4a68      	ldr	r2, [pc, #416]	; (b7280 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b70de:	4620      	mov	r0, r4
   b70e0:	f7ff ff80 	bl	b6fe4 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b70e4:	2100      	movs	r1, #0
   b70e6:	4630      	mov	r0, r6
   b70e8:	f002 fd08 	bl	b9afc <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b70ec:	b920      	cbnz	r0, b70f8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b70ee:	6832      	ldr	r2, [r6, #0]
   b70f0:	4964      	ldr	r1, [pc, #400]	; (b7284 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b70f2:	4620      	mov	r0, r4
   b70f4:	f7ff ff76 	bl	b6fe4 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b70f8:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b70fc:	2100      	movs	r1, #0
   b70fe:	4650      	mov	r0, sl
   b7100:	f002 fcfc 	bl	b9afc <_ZNK6String6equalsEPKc>
   b7104:	b928      	cbnz	r0, b7112 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b7106:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b7108:	495f      	ldr	r1, [pc, #380]	; (b7288 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b710a:	4620      	mov	r0, r4
   b710c:	f7ff ff7c 	bl	b7008 <_ZN10HttpClient10sendHeaderEPKci>
   b7110:	e006      	b.n	b7120 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b7112:	495e      	ldr	r1, [pc, #376]	; (b728c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b7114:	4648      	mov	r0, r9
   b7116:	f004 faf3 	bl	bb700 <strcmp>
   b711a:	4602      	mov	r2, r0
   b711c:	2800      	cmp	r0, #0
   b711e:	d0f3      	beq.n	b7108 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b7120:	f1b8 0f00 	cmp.w	r8, #0
   b7124:	d00e      	beq.n	b7144 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b7126:	f8d8 1000 	ldr.w	r1, [r8]
   b712a:	b159      	cbz	r1, b7144 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b712c:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b7130:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b7132:	b122      	cbz	r2, b713e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b7134:	f7ff ff56 	bl	b6fe4 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b7138:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b713c:	e7f3      	b.n	b7126 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b713e:	f002 fb70 	bl	b9822 <_ZN5Print7printlnEPKc>
}
   b7142:	e7f9      	b.n	b7138 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b7144:	4620      	mov	r0, r4
   b7146:	f002 fb60 	bl	b980a <_ZN5Print7printlnEv>
    client.flush();
   b714a:	4620      	mov	r0, r4
   b714c:	f002 fd70 	bl	b9c30 <_ZN9TCPClient5flushEv>
   b7150:	2100      	movs	r1, #0
   b7152:	4650      	mov	r0, sl
   b7154:	f002 fcd2 	bl	b9afc <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b7158:	b918      	cbnz	r0, b7162 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b715a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b715c:	4620      	mov	r0, r4
   b715e:	f002 fb60 	bl	b9822 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b7162:	f104 0a1c 	add.w	sl, r4, #28
   b7166:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   b716a:	2100      	movs	r1, #0
   b716c:	4650      	mov	r0, sl
   b716e:	f004 fa91 	bl	bb694 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7172:	f000 fdad 	bl	b7cd0 <HAL_Timer_Get_Milli_Seconds>
   b7176:	9001      	str	r0, [sp, #4]
   b7178:	f000 fdaa 	bl	b7cd0 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b717c:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b7180:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b7182:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b7186:	4620      	mov	r0, r4
   b7188:	f002 ff4e 	bl	ba028 <_ZN9TCPClient9availableEv>
   b718c:	b1e8      	cbz	r0, b71ca <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   b718e:	4620      	mov	r0, r4
   b7190:	f002 fd34 	bl	b9bfc <_ZN9TCPClient4readEv>
   b7194:	4681      	mov	r9, r0
   b7196:	f000 fd9b 	bl	b7cd0 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b719a:	f242 73fe 	movw	r3, #10238	; 0x27fe
   b719e:	429e      	cmp	r6, r3
   b71a0:	9001      	str	r0, [sp, #4]
   b71a2:	d804      	bhi.n	b71ae <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b71a4:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b71a6:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b71aa:	3601      	adds	r6, #1
        while (client.available()) {
   b71ac:	e7eb      	b.n	b7186 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b71ae:	f242 73ff 	movw	r3, #10239	; 0x27ff
   b71b2:	429e      	cmp	r6, r3
   b71b4:	d1f9      	bne.n	b71aa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b71b6:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   b71ba:	2200      	movs	r2, #0
   b71bc:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
                client.stop();
   b71c0:	4620      	mov	r0, r4
   b71c2:	f002 ff8b 	bl	ba0dc <_ZN9TCPClient4stopEv>
                error = true;
   b71c6:	46a8      	mov	r8, r5
   b71c8:	e7ef      	b.n	b71aa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b71ca:	19a3      	adds	r3, r4, r6
   b71cc:	7718      	strb	r0, [r3, #28]
   b71ce:	f000 fd7f 	bl	b7cd0 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b71d2:	9b01      	ldr	r3, [sp, #4]
   b71d4:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b71d8:	f1b8 0f00 	cmp.w	r8, #0
   b71dc:	d104      	bne.n	b71e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
   b71de:	45d9      	cmp	r9, fp
   b71e0:	d802      	bhi.n	b71e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
            delay(200);
   b71e2:	20c8      	movs	r0, #200	; 0xc8
   b71e4:	f000 ffa0 	bl	b8128 <delay>
    } while (client.connected() && !timeout && !error);
   b71e8:	4620      	mov	r0, r4
   b71ea:	f002 fe3f 	bl	b9e6c <_ZN9TCPClient9connectedEv>
   b71ee:	b120      	cbz	r0, b71fa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b71f0:	45d9      	cmp	r9, fp
   b71f2:	d802      	bhi.n	b71fa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b71f4:	f1b8 0f00 	cmp.w	r8, #0
   b71f8:	d0c5      	beq.n	b7186 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b71fa:	4620      	mov	r0, r4
   b71fc:	f002 ff6e 	bl	ba0dc <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b7200:	4651      	mov	r1, sl
   b7202:	a802      	add	r0, sp, #8
   b7204:	f002 fbb7 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b7208:	230c      	movs	r3, #12
   b720a:	2209      	movs	r2, #9
   b720c:	a902      	add	r1, sp, #8
   b720e:	a806      	add	r0, sp, #24
   b7210:	f002 fc98 	bl	b9b44 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b7214:	491e      	ldr	r1, [pc, #120]	; (b7290 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b7216:	a80a      	add	r0, sp, #40	; 0x28
   b7218:	f002 fbad 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
   b721c:	a90a      	add	r1, sp, #40	; 0x28
   b721e:	a802      	add	r0, sp, #8
   b7220:	f002 fc8d 	bl	b9b3e <_ZNK6String7indexOfERKS_>
   b7224:	4604      	mov	r4, r0
   b7226:	a80a      	add	r0, sp, #40	; 0x28
   b7228:	f002 fb5a 	bl	b98e0 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b722c:	1c63      	adds	r3, r4, #1
   b722e:	d108      	bne.n	b7242 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fe>
    String statusCode = raw_response.substring(9,12);
   b7230:	a806      	add	r0, sp, #24
   b7232:	f002 fb55 	bl	b98e0 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b7236:	a802      	add	r0, sp, #8
   b7238:	f002 fb52 	bl	b98e0 <_ZN6StringD1Ev>
}
   b723c:	b011      	add	sp, #68	; 0x44
   b723e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b7242:	1d3d      	adds	r5, r7, #4
   b7244:	4913      	ldr	r1, [pc, #76]	; (b7294 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b7246:	4628      	mov	r0, r5
   b7248:	f002 fbdd 	bl	b9a06 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b724c:	1d22      	adds	r2, r4, #4
   b724e:	a902      	add	r1, sp, #8
   b7250:	a80a      	add	r0, sp, #40	; 0x28
   b7252:	f002 fc97 	bl	b9b84 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b7256:	a90a      	add	r1, sp, #40	; 0x28
   b7258:	4628      	mov	r0, r5
   b725a:	f002 fc10 	bl	b9a7e <_ZN6String6concatERKS_>
   b725e:	a80a      	add	r0, sp, #40	; 0x28
   b7260:	f002 fb3e 	bl	b98e0 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b7264:	9806      	ldr	r0, [sp, #24]
   b7266:	f004 f9d9 	bl	bb61c <atoi>
   b726a:	6038      	str	r0, [r7, #0]
   b726c:	e7e0      	b.n	b7230 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ec>
   b726e:	bf00      	nop
   b7270:	000bde4c 	.word	0x000bde4c
   b7274:	000bd9d6 	.word	0x000bd9d6
   b7278:	000bdb90 	.word	0x000bdb90
   b727c:	000bdba2 	.word	0x000bdba2
   b7280:	000bdb9c 	.word	0x000bdb9c
   b7284:	000bdbad 	.word	0x000bdbad
   b7288:	000bdbb2 	.word	0x000bdbb2
   b728c:	000bdbc1 	.word	0x000bdbc1
   b7290:	000bdbc6 	.word	0x000bdbc6
   b7294:	000bdbca 	.word	0x000bdbca

000b7298 <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   b7298:	4770      	bx	lr

000b729a <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   b729a:	b510      	push	{r4, lr}
}
   b729c:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   b729e:	4604      	mov	r4, r0
}
   b72a0:	f7fc feff 	bl	b40a2 <_ZdlPvj>
   b72a4:	4620      	mov	r0, r4
   b72a6:	bd10      	pop	{r4, pc}

000b72a8 <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   b72a8:	b510      	push	{r4, lr}
   b72aa:	4b05      	ldr	r3, [pc, #20]	; (b72c0 <_ZN10JsonBufferD1Ev+0x18>)
   b72ac:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b72ae:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b72b0:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b72b2:	b91b      	cbnz	r3, b72bc <_ZN10JsonBufferD1Ev+0x14>
   b72b4:	6840      	ldr	r0, [r0, #4]
   b72b6:	b108      	cbz	r0, b72bc <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b72b8:	f000 feee 	bl	b8098 <free>
}
   b72bc:	4620      	mov	r0, r4
   b72be:	bd10      	pop	{r4, pc}
   b72c0:	000bdbd8 	.word	0x000bdbd8

000b72c4 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b72c4:	b510      	push	{r4, lr}
   b72c6:	4604      	mov	r4, r0
}
   b72c8:	f7ff ffee 	bl	b72a8 <_ZN10JsonBufferD1Ev>
   b72cc:	4620      	mov	r0, r4
   b72ce:	2114      	movs	r1, #20
   b72d0:	f7fc fee7 	bl	b40a2 <_ZdlPvj>
   b72d4:	4620      	mov	r0, r4
   b72d6:	bd10      	pop	{r4, pc}

000b72d8 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b72d8:	b510      	push	{r4, lr}
   b72da:	4b07      	ldr	r3, [pc, #28]	; (b72f8 <_ZN10JsonParserD1Ev+0x20>)
   b72dc:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b72de:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b72e0:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b72e2:	b91b      	cbnz	r3, b72ec <_ZN10JsonParserD1Ev+0x14>
   b72e4:	6940      	ldr	r0, [r0, #20]
   b72e6:	b108      	cbz	r0, b72ec <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b72e8:	f000 fed6 	bl	b8098 <free>
JsonParser::~JsonParser() {
   b72ec:	4620      	mov	r0, r4
   b72ee:	f7ff ffdb 	bl	b72a8 <_ZN10JsonBufferD1Ev>
}
   b72f2:	4620      	mov	r0, r4
   b72f4:	bd10      	pop	{r4, pc}
   b72f6:	bf00      	nop
   b72f8:	000bdbe8 	.word	0x000bdbe8

000b72fc <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b72fc:	b510      	push	{r4, lr}
   b72fe:	4604      	mov	r4, r0
}
   b7300:	f7ff ffea 	bl	b72d8 <_ZN10JsonParserD1Ev>
   b7304:	4620      	mov	r0, r4
   b7306:	212c      	movs	r1, #44	; 0x2c
   b7308:	f7fc fecb 	bl	b40a2 <_ZdlPvj>
   b730c:	4620      	mov	r0, r4
   b730e:	bd10      	pop	{r4, pc}

000b7310 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b7310:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b7312:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b7314:	4604      	mov	r4, r0
   b7316:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b7318:	b10b      	cbz	r3, b731e <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b731a:	2000      	movs	r0, #0
}
   b731c:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b731e:	6840      	ldr	r0, [r0, #4]
   b7320:	b138      	cbz	r0, b7332 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b7322:	f000 fec1 	bl	b80a8 <realloc>
		if (newBuffer) {
   b7326:	2800      	cmp	r0, #0
   b7328:	d0f7      	beq.n	b731a <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b732a:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b732e:	2001      	movs	r0, #1
   b7330:	e7f4      	b.n	b731c <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b7332:	4608      	mov	r0, r1
   b7334:	f000 fea8 	bl	b8088 <malloc>
   b7338:	e7f5      	b.n	b7326 <_ZN10JsonBuffer8allocateEj+0x16>

000b733a <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b733a:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b733c:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b733e:	460e      	mov	r6, r1
   b7340:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7342:	18d1      	adds	r1, r2, r3
   b7344:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7346:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7348:	b172      	cbz	r2, b7368 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b734a:	6882      	ldr	r2, [r0, #8]
   b734c:	428a      	cmp	r2, r1
   b734e:	d30b      	bcc.n	b7368 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b7350:	6860      	ldr	r0, [r4, #4]
   b7352:	68e3      	ldr	r3, [r4, #12]
   b7354:	462a      	mov	r2, r5
   b7356:	4631      	mov	r1, r6
   b7358:	4418      	add	r0, r3
   b735a:	f004 f973 	bl	bb644 <memcpy>
	offset += dataLen;
   b735e:	68e2      	ldr	r2, [r4, #12]
   b7360:	442a      	add	r2, r5
   b7362:	60e2      	str	r2, [r4, #12]
	return true;
   b7364:	2001      	movs	r0, #1
}
   b7366:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b7368:	4620      	mov	r0, r4
   b736a:	f7ff ffd1 	bl	b7310 <_ZN10JsonBuffer8allocateEj>
   b736e:	2800      	cmp	r0, #0
   b7370:	d1ee      	bne.n	b7350 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b7372:	e7f8      	b.n	b7366 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b7374 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b7374:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b7376:	2100      	movs	r1, #0
   b7378:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b737a:	b123      	cbz	r3, b7386 <_ZN10JsonBuffer5clearEv+0x12>
   b737c:	6882      	ldr	r2, [r0, #8]
   b737e:	b112      	cbz	r2, b7386 <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b7380:	4618      	mov	r0, r3
   b7382:	f004 b987 	b.w	bb694 <memset>
}
   b7386:	4770      	bx	lr

000b7388 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b7388:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b738a:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b738e:	2200      	movs	r2, #0
   b7390:	60c2      	str	r2, [r0, #12]
   b7392:	2201      	movs	r2, #1
   b7394:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b7396:	6143      	str	r3, [r0, #20]
   b7398:	4a02      	ldr	r2, [pc, #8]	; (b73a4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b739a:	9b02      	ldr	r3, [sp, #8]
   b739c:	6002      	str	r2, [r0, #0]
   b739e:	61c3      	str	r3, [r0, #28]
}
   b73a0:	bd10      	pop	{r4, pc}
   b73a2:	bf00      	nop
   b73a4:	000bdbe8 	.word	0x000bdbe8

000b73a8 <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   b73a8:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   b73ac:	429a      	cmp	r2, r3
   b73ae:	4b04      	ldr	r3, [pc, #16]	; (b73c0 <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b73b0:	bf38      	it	cc
   b73b2:	6082      	strcc	r2, [r0, #8]
   b73b4:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b73b8:	bf24      	itt	cs
   b73ba:	2300      	movcs	r3, #0
   b73bc:	6083      	strcs	r3, [r0, #8]
}
   b73be:	4770      	bx	lr
   b73c0:	000bdbf8 	.word	0x000bdbf8

000b73c4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b73c4:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b73c6:	6813      	ldr	r3, [r2, #0]
   b73c8:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b73ca:	6813      	ldr	r3, [r2, #0]
   b73cc:	f103 0410 	add.w	r4, r3, #16
   b73d0:	6014      	str	r4, [r2, #0]
   b73d2:	6986      	ldr	r6, [r0, #24]
   b73d4:	42b4      	cmp	r4, r6
   b73d6:	d20a      	bcs.n	b73ee <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b73d8:	699b      	ldr	r3, [r3, #24]
   b73da:	688c      	ldr	r4, [r1, #8]
   b73dc:	42a3      	cmp	r3, r4
   b73de:	da01      	bge.n	b73e4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b73e0:	42ab      	cmp	r3, r5
   b73e2:	ddf2      	ble.n	b73ca <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b73e4:	42a3      	cmp	r3, r4
   b73e6:	bfcc      	ite	gt
   b73e8:	2000      	movgt	r0, #0
   b73ea:	2001      	movle	r0, #1
   b73ec:	e000      	b.n	b73f0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b73ee:	2000      	movs	r0, #0
}
   b73f0:	bd70      	pop	{r4, r5, r6, pc}

000b73f2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b73f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b73f6:	9d08      	ldr	r5, [sp, #32]
   b73f8:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b73fa:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b73fe:	4604      	mov	r4, r0
   b7400:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7402:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7404:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b7406:	9801      	ldr	r0, [sp, #4]
   b7408:	69a3      	ldr	r3, [r4, #24]
   b740a:	4283      	cmp	r3, r0
   b740c:	d91a      	bls.n	b7444 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b740e:	6882      	ldr	r2, [r0, #8]
   b7410:	688b      	ldr	r3, [r1, #8]
   b7412:	429a      	cmp	r2, r3
   b7414:	da16      	bge.n	b7444 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b7416:	42ae      	cmp	r6, r5
   b7418:	d10b      	bne.n	b7432 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b741a:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b741c:	aa01      	add	r2, sp, #4
   b741e:	4620      	mov	r0, r4
   b7420:	f7ff ffd0 	bl	b73c4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b7424:	b128      	cbz	r0, b7432 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b7426:	9b01      	ldr	r3, [sp, #4]
   b7428:	f8c8 3000 	str.w	r3, [r8]
}
   b742c:	b002      	add	sp, #8
   b742e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b7432:	aa01      	add	r2, sp, #4
   b7434:	4620      	mov	r0, r4
   b7436:	f7ff ffc5 	bl	b73c4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b743a:	4620      	mov	r0, r4
		index++;
   b743c:	3601      	adds	r6, #1
		skipObject(container, token);
   b743e:	f7ff ffc1 	bl	b73c4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7442:	e7e0      	b.n	b7406 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b7444:	2000      	movs	r0, #0
   b7446:	e7f1      	b.n	b742c <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b7448 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b744a:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b744c:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7450:	4604      	mov	r4, r0
   b7452:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7454:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7456:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b7458:	9b01      	ldr	r3, [sp, #4]
   b745a:	69a2      	ldr	r2, [r4, #24]
   b745c:	429a      	cmp	r2, r3
   b745e:	d90f      	bls.n	b7480 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b7460:	6898      	ldr	r0, [r3, #8]
   b7462:	688a      	ldr	r2, [r1, #8]
   b7464:	4290      	cmp	r0, r2
   b7466:	da0b      	bge.n	b7480 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b7468:	42b5      	cmp	r5, r6
   b746a:	d103      	bne.n	b7474 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b746c:	603b      	str	r3, [r7, #0]
			return true;
   b746e:	2001      	movs	r0, #1
}
   b7470:	b003      	add	sp, #12
   b7472:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b7474:	aa01      	add	r2, sp, #4
   b7476:	4620      	mov	r0, r4
		index++;
   b7478:	3501      	adds	r5, #1
		skipObject(container, token);
   b747a:	f7ff ffa3 	bl	b73c4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b747e:	e7eb      	b.n	b7458 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b7480:	2000      	movs	r0, #0
   b7482:	e7f5      	b.n	b7470 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b7484 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b7484:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b7486:	3b01      	subs	r3, #1
   b7488:	2400      	movs	r4, #0
   b748a:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b748e:	1bf6      	subs	r6, r6, r7
   b7490:	42a6      	cmp	r6, r4
   b7492:	dd08      	ble.n	b74a6 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b7494:	42a3      	cmp	r3, r4
   b7496:	dd06      	ble.n	b74a6 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b7498:	6845      	ldr	r5, [r0, #4]
   b749a:	443d      	add	r5, r7
   b749c:	5d2d      	ldrb	r5, [r5, r4]
   b749e:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b74a2:	3401      	adds	r4, #1
   b74a4:	e7f1      	b.n	b748a <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b74a6:	2300      	movs	r3, #0
   b74a8:	7013      	strb	r3, [r2, #0]
}
   b74aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b74ac <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b74ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b74ae:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b74b0:	2310      	movs	r3, #16
   b74b2:	466a      	mov	r2, sp
   b74b4:	f7ff ffe6 	bl	b7484 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b74b8:	4904      	ldr	r1, [pc, #16]	; (b74cc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b74ba:	4622      	mov	r2, r4
   b74bc:	4668      	mov	r0, sp
   b74be:	f000 fdfb 	bl	b80b8 <sscanf>
}
   b74c2:	1e43      	subs	r3, r0, #1
   b74c4:	4258      	negs	r0, r3
   b74c6:	4158      	adcs	r0, r3
   b74c8:	b004      	add	sp, #16
   b74ca:	bd10      	pop	{r4, pc}
   b74cc:	000bdeac 	.word	0x000bdeac

000b74d0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
   b74d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b74d2:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b74d4:	2310      	movs	r3, #16
   b74d6:	466a      	mov	r2, sp
   b74d8:	f7ff ffd4 	bl	b7484 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
   b74dc:	4668      	mov	r0, sp
   b74de:	2100      	movs	r1, #0
   b74e0:	f004 ff80 	bl	bc3e4 <strtof>
}
   b74e4:	2001      	movs	r0, #1
	result = strtof(tmp, 0);
   b74e6:	ed84 0a00 	vstr	s0, [r4]
}
   b74ea:	b004      	add	sp, #16
   b74ec:	bd10      	pop	{r4, pc}
	...

000b74f0 <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   b74f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b74f2:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b74f4:	6889      	ldr	r1, [r1, #8]
   b74f6:	4e0a      	ldr	r6, [pc, #40]	; (b7520 <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   b74f8:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b74fa:	b161      	cbz	r1, b7516 <_ZNK13JsonReference5indexEj+0x26>
   b74fc:	6868      	ldr	r0, [r5, #4]
   b74fe:	ab01      	add	r3, sp, #4
   b7500:	f7ff ffa2 	bl	b7448 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b7504:	b138      	cbz	r0, b7516 <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   b7506:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b7508:	e9c4 6300 	strd	r6, r3, [r4]
   b750c:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b750e:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   b7510:	4620      	mov	r0, r4
   b7512:	b002      	add	sp, #8
   b7514:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b7516:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7518:	e9c4 6300 	strd	r6, r3, [r4]
   b751c:	2300      	movs	r3, #0
   b751e:	e7f6      	b.n	b750e <_ZNK13JsonReference5indexEj+0x1e>
   b7520:	000bdbf8 	.word	0x000bdbf8

000b7524 <_ZNK13JsonReference8valueIntEi>:
bool JsonReference::valueBool(bool result) const {
	(void) value(result);
	return result;
}

int JsonReference::valueInt(int result) const {
   b7524:	b507      	push	{r0, r1, r2, lr}
   b7526:	9101      	str	r1, [sp, #4]
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   b7528:	6881      	ldr	r1, [r0, #8]
   b752a:	b119      	cbz	r1, b7534 <_ZNK13JsonReference8valueIntEi+0x10>
   b752c:	6840      	ldr	r0, [r0, #4]
   b752e:	aa01      	add	r2, sp, #4
   b7530:	f7ff ffbc 	bl	b74ac <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	(void) value(result);
	return result;
}
   b7534:	9801      	ldr	r0, [sp, #4]
   b7536:	b003      	add	sp, #12
   b7538:	f85d fb04 	ldr.w	pc, [sp], #4

000b753c <_ZNK13JsonReference10valueFloatEf>:
unsigned long JsonReference::valueUnsignedLong(unsigned long result) const {
	(void) value(result);
	return result;
}

float JsonReference::valueFloat(float result) const {
   b753c:	b507      	push	{r0, r1, r2, lr}
   b753e:	6881      	ldr	r1, [r0, #8]
   b7540:	ed8d 0a01 	vstr	s0, [sp, #4]
   b7544:	b119      	cbz	r1, b754e <_ZNK13JsonReference10valueFloatEf+0x12>
   b7546:	6840      	ldr	r0, [r0, #4]
   b7548:	aa01      	add	r2, sp, #4
   b754a:	f7ff ffc1 	bl	b74d0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
	(void) value(result);
	return result;
}
   b754e:	ed9d 0a01 	vldr	s0, [sp, #4]
   b7552:	b003      	add	sp, #12
   b7554:	f85d fb04 	ldr.w	pc, [sp], #4

000b7558 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b7558:	b510      	push	{r4, lr}
   b755a:	4604      	mov	r4, r0
	if (str) {
   b755c:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b755e:	460b      	mov	r3, r1
	if (str) {
   b7560:	b128      	cbz	r0, b756e <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b7562:	f002 fa90 	bl	b9a86 <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b7566:	68e3      	ldr	r3, [r4, #12]
   b7568:	3301      	adds	r3, #1
   b756a:	60e3      	str	r3, [r4, #12]
	}
}
   b756c:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b756e:	6860      	ldr	r0, [r4, #4]
   b7570:	2800      	cmp	r0, #0
   b7572:	d0f8      	beq.n	b7566 <_ZN16JsonParserString6appendEc+0xe>
   b7574:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b7578:	3a01      	subs	r2, #1
   b757a:	428a      	cmp	r2, r1
			buf[length] = ch;
   b757c:	bf88      	it	hi
   b757e:	5443      	strbhi	r3, [r0, r1]
   b7580:	e7f1      	b.n	b7566 <_ZN16JsonParserString6appendEc+0xe>

000b7582 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b7582:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b7584:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b7586:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7588:	4608      	mov	r0, r1
		str.append((char)unicode);
   b758a:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b758c:	d804      	bhi.n	b7598 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b758e:	b003      	add	sp, #12
   b7590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b7594:	f7ff bfe0 	b.w	b7558 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b7598:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b759c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b75a0:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b75a4:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b75a8:	d207      	bcs.n	b75ba <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b75aa:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b75ae:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b75b0:	f7ff ffd2 	bl	b7558 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b75b4:	9801      	ldr	r0, [sp, #4]
   b75b6:	4621      	mov	r1, r4
   b75b8:	e7e9      	b.n	b758e <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b75ba:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b75bc:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b75c0:	9001      	str	r0, [sp, #4]
   b75c2:	f7ff ffc9 	bl	b7558 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b75c6:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b75ca:	9801      	ldr	r0, [sp, #4]
   b75cc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b75d0:	e7ee      	b.n	b75b0 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b75d4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b75d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b75d8:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b75da:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b75dc:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b76ac <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b75e0:	4680      	mov	r8, r0
   b75e2:	460f      	mov	r7, r1
   b75e4:	4615      	mov	r5, r2
			escape = false;
   b75e6:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b75e8:	68b8      	ldr	r0, [r7, #8]
   b75ea:	42b0      	cmp	r0, r6
   b75ec:	dd5a      	ble.n	b76a4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b75ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b75f2:	5d99      	ldrb	r1, [r3, r6]
   b75f4:	199a      	adds	r2, r3, r6
		if (escape) {
   b75f6:	2c00      	cmp	r4, #0
   b75f8:	d04b      	beq.n	b7692 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b75fa:	2975      	cmp	r1, #117	; 0x75
   b75fc:	d805      	bhi.n	b760a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b75fe:	296d      	cmp	r1, #109	; 0x6d
   b7600:	d807      	bhi.n	b7612 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b7602:	2962      	cmp	r1, #98	; 0x62
   b7604:	d01e      	beq.n	b7644 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b7606:	2966      	cmp	r1, #102	; 0x66
   b7608:	d01e      	beq.n	b7648 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b760a:	4628      	mov	r0, r5
   b760c:	f7ff ffa4 	bl	b7558 <_ZN16JsonParserString6appendEc>
				break;
   b7610:	e03d      	b.n	b768e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b7612:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b7616:	2c07      	cmp	r4, #7
   b7618:	d8f7      	bhi.n	b760a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b761a:	f20f 0c08 	addw	ip, pc, #8
   b761e:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b7622:	bf00      	nop
   b7624:	000b764d 	.word	0x000b764d
   b7628:	000b760b 	.word	0x000b760b
   b762c:	000b760b 	.word	0x000b760b
   b7630:	000b760b 	.word	0x000b760b
   b7634:	000b7651 	.word	0x000b7651
   b7638:	000b760b 	.word	0x000b760b
   b763c:	000b7655 	.word	0x000b7655
   b7640:	000b7659 	.word	0x000b7659
				str.append('\b');
   b7644:	2108      	movs	r1, #8
   b7646:	e7e0      	b.n	b760a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b7648:	210c      	movs	r1, #12
   b764a:	e7de      	b.n	b760a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b764c:	210a      	movs	r1, #10
   b764e:	e7dc      	b.n	b760a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b7650:	210d      	movs	r1, #13
   b7652:	e7da      	b.n	b760a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b7654:	2109      	movs	r1, #9
   b7656:	e7d8      	b.n	b760a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b7658:	1d31      	adds	r1, r6, #4
   b765a:	4288      	cmp	r0, r1
   b765c:	dd17      	ble.n	b768e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b765e:	a902      	add	r1, sp, #8
   b7660:	3304      	adds	r3, #4
   b7662:	4433      	add	r3, r6
   b7664:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b7666:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b766a:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b766e:	429a      	cmp	r2, r3
   b7670:	d1f9      	bne.n	b7666 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7672:	aa01      	add	r2, sp, #4
   b7674:	4651      	mov	r1, sl
					tmp[4] = 0;
   b7676:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b767a:	f000 fd1d 	bl	b80b8 <sscanf>
   b767e:	2801      	cmp	r0, #1
   b7680:	d105      	bne.n	b768e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b7682:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b7686:	4629      	mov	r1, r5
   b7688:	f7ff ff7b 	bl	b7582 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b768c:	3605      	adds	r6, #5
			escape = false;
   b768e:	2400      	movs	r4, #0
   b7690:	e004      	b.n	b769c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b7692:	295c      	cmp	r1, #92	; 0x5c
   b7694:	d004      	beq.n	b76a0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b7696:	4628      	mov	r0, r5
   b7698:	f7ff ff5e 	bl	b7558 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b769c:	3601      	adds	r6, #1
   b769e:	e7a3      	b.n	b75e8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b76a0:	2401      	movs	r4, #1
   b76a2:	e7fb      	b.n	b769c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b76a4:	2001      	movs	r0, #1
   b76a6:	b004      	add	sp, #16
   b76a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b76ac:	000bdbcb 	.word	0x000bdbcb

000b76b0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b76b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b76b2:	460c      	mov	r4, r1
   b76b4:	4606      	mov	r6, r0
	result = "";
   b76b6:	490c      	ldr	r1, [pc, #48]	; (b76e8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b76b8:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b76ba:	4615      	mov	r5, r2
	result = "";
   b76bc:	f002 f9a3 	bl	b9a06 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b76c0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b76c4:	1ac9      	subs	r1, r1, r3
   b76c6:	3101      	adds	r1, #1
   b76c8:	4628      	mov	r0, r5
   b76ca:	f002 f927 	bl	b991c <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b76ce:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b76d0:	466a      	mov	r2, sp
   b76d2:	4621      	mov	r1, r4
   b76d4:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b76d6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b76da:	9500      	str	r5, [sp, #0]
   b76dc:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b76de:	f7ff ff79 	bl	b75d4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b76e2:	b004      	add	sp, #16
   b76e4:	bd70      	pop	{r4, r5, r6, pc}
   b76e6:	bf00      	nop
   b76e8:	000bdbca 	.word	0x000bdbca

000b76ec <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b76ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b76f0:	b089      	sub	sp, #36	; 0x24
   b76f2:	4605      	mov	r5, r0
   b76f4:	4688      	mov	r8, r1
	String keyName;
   b76f6:	a804      	add	r0, sp, #16
   b76f8:	4912      	ldr	r1, [pc, #72]	; (b7744 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b76fa:	4616      	mov	r6, r2
   b76fc:	4699      	mov	r9, r3
	String keyName;
   b76fe:	f002 f93a 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b7702:	2700      	movs	r7, #0
   b7704:	9700      	str	r7, [sp, #0]
   b7706:	464b      	mov	r3, r9
   b7708:	aa03      	add	r2, sp, #12
   b770a:	4641      	mov	r1, r8
   b770c:	4628      	mov	r0, r5
   b770e:	f7ff fe70 	bl	b73f2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b7712:	4604      	mov	r4, r0
   b7714:	b170      	cbz	r0, b7734 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b7716:	9903      	ldr	r1, [sp, #12]
   b7718:	aa04      	add	r2, sp, #16
   b771a:	4628      	mov	r0, r5
   b771c:	f7ff ffc8 	bl	b76b0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b7720:	4604      	mov	r4, r0
   b7722:	b908      	cbnz	r0, b7728 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b7724:	3701      	adds	r7, #1
   b7726:	e7ed      	b.n	b7704 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b7728:	4631      	mov	r1, r6
   b772a:	a804      	add	r0, sp, #16
   b772c:	f002 f9e6 	bl	b9afc <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b7730:	2800      	cmp	r0, #0
   b7732:	d0f7      	beq.n	b7724 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b7734:	a804      	add	r0, sp, #16
   b7736:	f002 f8d3 	bl	b98e0 <_ZN6StringD1Ev>
}
   b773a:	4620      	mov	r0, r4
   b773c:	b009      	add	sp, #36	; 0x24
   b773e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7742:	bf00      	nop
   b7744:	000bdbca 	.word	0x000bdbca

000b7748 <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   b7748:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b774a:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b774c:	6889      	ldr	r1, [r1, #8]
   b774e:	4e0a      	ldr	r6, [pc, #40]	; (b7778 <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   b7750:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b7752:	b161      	cbz	r1, b776e <_ZNK13JsonReference3keyEPKc+0x26>
   b7754:	6868      	ldr	r0, [r5, #4]
   b7756:	ab01      	add	r3, sp, #4
   b7758:	f7ff ffc8 	bl	b76ec <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b775c:	b138      	cbz	r0, b776e <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   b775e:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b7760:	e9c4 6300 	strd	r6, r3, [r4]
   b7764:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7766:	60a3      	str	r3, [r4, #8]
}
   b7768:	4620      	mov	r0, r4
   b776a:	b002      	add	sp, #8
   b776c:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b776e:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7770:	e9c4 6300 	strd	r6, r3, [r4]
   b7774:	2300      	movs	r3, #0
   b7776:	e7f6      	b.n	b7766 <_ZNK13JsonReference3keyEPKc+0x1e>
   b7778:	000bdbf8 	.word	0x000bdbf8

000b777c <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   b777c:	b538      	push	{r3, r4, r5, lr}
   b777e:	460d      	mov	r5, r1
	String result;
   b7780:	4905      	ldr	r1, [pc, #20]	; (b7798 <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   b7782:	4604      	mov	r4, r0
	String result;
   b7784:	f002 f8f7 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
   b7788:	68a9      	ldr	r1, [r5, #8]
   b778a:	b119      	cbz	r1, b7794 <_ZNK13JsonReference11valueStringEv+0x18>
   b778c:	6868      	ldr	r0, [r5, #4]
   b778e:	4622      	mov	r2, r4
   b7790:	f7ff ff8e 	bl	b76b0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   b7794:	4620      	mov	r0, r4
   b7796:	bd38      	pop	{r3, r4, r5, pc}
   b7798:	000bdbca 	.word	0x000bdbca

000b779c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b779c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b77a0:	6844      	ldr	r4, [r0, #4]
   b77a2:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b77a6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b77aa:	f8d0 e000 	ldr.w	lr, [r0]
   b77ae:	4596      	cmp	lr, r2
   b77b0:	f080 81b9 	bcs.w	b7b26 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b77b4:	f811 800e 	ldrb.w	r8, [r1, lr]
   b77b8:	f1b8 0f00 	cmp.w	r8, #0
   b77bc:	f000 81b3 	beq.w	b7b26 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b77c0:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b77c4:	f000 8098 	beq.w	b78f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b77c8:	d833      	bhi.n	b7832 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b77ca:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b77ce:	f000 80a6 	beq.w	b791e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b77d2:	d810      	bhi.n	b77f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b77d4:	f1a8 0809 	sub.w	r8, r8, #9
   b77d8:	fa5f f888 	uxtb.w	r8, r8
   b77dc:	f1b8 0f17 	cmp.w	r8, #23
   b77e0:	d80d      	bhi.n	b77fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b77e2:	4d9f      	ldr	r5, [pc, #636]	; (b7a60 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b77e4:	fa0c f808 	lsl.w	r8, ip, r8
   b77e8:	ea18 0f05 	tst.w	r8, r5
   b77ec:	d007      	beq.n	b77fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b77ee:	6805      	ldr	r5, [r0, #0]
   b77f0:	3501      	adds	r5, #1
   b77f2:	6005      	str	r5, [r0, #0]
   b77f4:	e7d9      	b.n	b77aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b77f6:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b77fa:	f000 8133 	beq.w	b7a64 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b77fe:	f8d0 8000 	ldr.w	r8, [r0]
   b7802:	4542      	cmp	r2, r8
   b7804:	d90e      	bls.n	b7824 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b7806:	f811 5008 	ldrb.w	r5, [r1, r8]
   b780a:	b15d      	cbz	r5, b7824 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b780c:	2d3a      	cmp	r5, #58	; 0x3a
   b780e:	f200 8169 	bhi.w	b7ae4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b7812:	2d1f      	cmp	r5, #31
   b7814:	f200 8151 	bhi.w	b7aba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b7818:	2d0a      	cmp	r5, #10
   b781a:	f200 8160 	bhi.w	b7ade <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b781e:	2d08      	cmp	r5, #8
   b7820:	f240 8156 	bls.w	b7ad0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b7824:	2b00      	cmp	r3, #0
   b7826:	f040 8162 	bne.w	b7aee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b782a:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b782e:	6005      	str	r5, [r0, #0]
   b7830:	e0a5      	b.n	b797e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b7832:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b7836:	d037      	beq.n	b78a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b7838:	d82e      	bhi.n	b7898 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b783a:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b783e:	d033      	beq.n	b78a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b7840:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b7844:	d1db      	bne.n	b77fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b7846:	2b00      	cmp	r3, #0
   b7848:	d0d1      	beq.n	b77ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b784a:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b784e:	6845      	ldr	r5, [r0, #4]
   b7850:	3d01      	subs	r5, #1
   b7852:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b7856:	2d00      	cmp	r5, #0
   b7858:	db55      	blt.n	b7906 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b785a:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b785e:	3701      	adds	r7, #1
   b7860:	d04d      	beq.n	b78fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b7862:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b7866:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b786a:	d148      	bne.n	b78fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b786c:	f898 b000 	ldrb.w	fp, [r8]
   b7870:	45cb      	cmp	fp, r9
   b7872:	d14b      	bne.n	b790c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b7874:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b7878:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b787c:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b7880:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b7884:	f8de 7004 	ldr.w	r7, [lr, #4]
   b7888:	3701      	adds	r7, #1
   b788a:	d042      	beq.n	b7912 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b788c:	f8de 7008 	ldr.w	r7, [lr, #8]
   b7890:	3701      	adds	r7, #1
   b7892:	d13e      	bne.n	b7912 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b7894:	6085      	str	r5, [r0, #8]
				break;
   b7896:	e7aa      	b.n	b77ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b7898:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b789c:	d1af      	bne.n	b77fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b789e:	2b00      	cmp	r3, #0
   b78a0:	d0a5      	beq.n	b77ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b78a2:	f04f 0901 	mov.w	r9, #1
   b78a6:	e7d2      	b.n	b784e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b78a8:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b78aa:	2b00      	cmp	r3, #0
   b78ac:	d09f      	beq.n	b77ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b78ae:	6845      	ldr	r5, [r0, #4]
   b78b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b78b2:	42af      	cmp	r7, r5
   b78b4:	d94a      	bls.n	b794c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b78b6:	f105 0e01 	add.w	lr, r5, #1
   b78ba:	f8c0 e004 	str.w	lr, [r0, #4]
   b78be:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b78c2:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b78c6:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b78ca:	2500      	movs	r5, #0
   b78cc:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b78d0:	6885      	ldr	r5, [r0, #8]
   b78d2:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b78d4:	bf1f      	itttt	ne
   b78d6:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b78da:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b78de:	3501      	addne	r5, #1
   b78e0:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b78e4:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b78e8:	bf0c      	ite	eq
   b78ea:	2501      	moveq	r5, #1
   b78ec:	2502      	movne	r5, #2
   b78ee:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b78f2:	6805      	ldr	r5, [r0, #0]
   b78f4:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b78f8:	6845      	ldr	r5, [r0, #4]
   b78fa:	3d01      	subs	r5, #1
   b78fc:	e7ca      	b.n	b7894 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b78fe:	3d01      	subs	r5, #1
   b7900:	f1a8 0810 	sub.w	r8, r8, #16
   b7904:	e7a7      	b.n	b7856 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b7906:	3501      	adds	r5, #1
   b7908:	f47f af71 	bne.w	b77ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b790c:	f06f 0401 	mvn.w	r4, #1
   b7910:	e01e      	b.n	b7950 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b7912:	3d01      	subs	r5, #1
   b7914:	1c6f      	adds	r7, r5, #1
   b7916:	f1ae 0e10 	sub.w	lr, lr, #16
   b791a:	d1b3      	bne.n	b7884 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b791c:	e767      	b.n	b77ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b791e:	f10e 0901 	add.w	r9, lr, #1
   b7922:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7926:	f8d0 8000 	ldr.w	r8, [r0]
   b792a:	4542      	cmp	r2, r8
   b792c:	f240 8093 	bls.w	b7a56 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b7930:	f811 5008 	ldrb.w	r5, [r1, r8]
   b7934:	2d00      	cmp	r5, #0
   b7936:	f000 808e 	beq.w	b7a56 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b793a:	2d22      	cmp	r5, #34	; 0x22
   b793c:	d130      	bne.n	b79a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b793e:	b1f3      	cbz	r3, b797e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b7940:	6845      	ldr	r5, [r0, #4]
   b7942:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b7944:	42af      	cmp	r7, r5
   b7946:	d806      	bhi.n	b7956 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b7948:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b794c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b7950:	4620      	mov	r0, r4
   b7952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b7956:	f105 0e01 	add.w	lr, r5, #1
   b795a:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b795e:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b7962:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b7966:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b796a:	2700      	movs	r7, #0
   b796c:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b796e:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b7972:	f04f 0a03 	mov.w	sl, #3
   b7976:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b797a:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b797e:	6885      	ldr	r5, [r0, #8]
   b7980:	1c6f      	adds	r7, r5, #1
				count++;
   b7982:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b7986:	f43f af32 	beq.w	b77ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b798a:	2b00      	cmp	r3, #0
   b798c:	f43f af2f 	beq.w	b77ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b7990:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b7994:	f8de 500c 	ldr.w	r5, [lr, #12]
   b7998:	3501      	adds	r5, #1
   b799a:	f8ce 500c 	str.w	r5, [lr, #12]
   b799e:	e726      	b.n	b77ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b79a0:	2d5c      	cmp	r5, #92	; 0x5c
   b79a2:	d111      	bne.n	b79c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b79a4:	f108 0501 	add.w	r5, r8, #1
   b79a8:	42aa      	cmp	r2, r5
   b79aa:	d90d      	bls.n	b79c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b79ac:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b79ae:	5d4d      	ldrb	r5, [r1, r5]
   b79b0:	2d75      	cmp	r5, #117	; 0x75
   b79b2:	d82b      	bhi.n	b7a0c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b79b4:	2d6d      	cmp	r5, #109	; 0x6d
   b79b6:	d80b      	bhi.n	b79d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b79b8:	2d66      	cmp	r5, #102	; 0x66
   b79ba:	d827      	bhi.n	b7a0c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b79bc:	2d5b      	cmp	r5, #91	; 0x5b
   b79be:	d81d      	bhi.n	b79fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b79c0:	2d22      	cmp	r5, #34	; 0x22
   b79c2:	d001      	beq.n	b79c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b79c4:	2d2f      	cmp	r5, #47	; 0x2f
   b79c6:	d121      	bne.n	b7a0c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b79c8:	6805      	ldr	r5, [r0, #0]
   b79ca:	3501      	adds	r5, #1
   b79cc:	6005      	str	r5, [r0, #0]
   b79ce:	e7aa      	b.n	b7926 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b79d0:	3d6e      	subs	r5, #110	; 0x6e
   b79d2:	2d07      	cmp	r5, #7
   b79d4:	d81a      	bhi.n	b7a0c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b79d6:	a701      	add	r7, pc, #4	; (adr r7, b79dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b79d8:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b79dc:	000b79c9 	.word	0x000b79c9
   b79e0:	000b7a0d 	.word	0x000b7a0d
   b79e4:	000b7a0d 	.word	0x000b7a0d
   b79e8:	000b7a0d 	.word	0x000b7a0d
   b79ec:	000b79c9 	.word	0x000b79c9
   b79f0:	000b7a0d 	.word	0x000b7a0d
   b79f4:	000b79c9 	.word	0x000b79c9
   b79f8:	000b7a13 	.word	0x000b7a13
   b79fc:	3d5c      	subs	r5, #92	; 0x5c
   b79fe:	b2ed      	uxtb	r5, r5
   b7a00:	fa0c f505 	lsl.w	r5, ip, r5
   b7a04:	f240 4741 	movw	r7, #1089	; 0x441
   b7a08:	423d      	tst	r5, r7
   b7a0a:	d1dd      	bne.n	b79c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b7a0c:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b7a10:	e77c      	b.n	b790c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b7a12:	f108 0502 	add.w	r5, r8, #2
   b7a16:	6005      	str	r5, [r0, #0]
   b7a18:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b7a1c:	f8d0 8000 	ldr.w	r8, [r0]
   b7a20:	4542      	cmp	r2, r8
   b7a22:	d803      	bhi.n	b7a2c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b7a24:	6805      	ldr	r5, [r0, #0]
   b7a26:	3d01      	subs	r5, #1
   b7a28:	6005      	str	r5, [r0, #0]
					break;
   b7a2a:	e7cd      	b.n	b79c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b7a2c:	f811 5008 	ldrb.w	r5, [r1, r8]
   b7a30:	2d00      	cmp	r5, #0
   b7a32:	d0f7      	beq.n	b7a24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b7a34:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b7a38:	f1bb 0f09 	cmp.w	fp, #9
   b7a3c:	d904      	bls.n	b7a48 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b7a3e:	f025 0520 	bic.w	r5, r5, #32
   b7a42:	3d41      	subs	r5, #65	; 0x41
   b7a44:	2d05      	cmp	r5, #5
   b7a46:	d8e1      	bhi.n	b7a0c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b7a48:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b7a4c:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b7a50:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b7a52:	d1e3      	bne.n	b7a1c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b7a54:	e7e6      	b.n	b7a24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b7a56:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b7a5a:	f06f 0402 	mvn.w	r4, #2
   b7a5e:	e777      	b.n	b7950 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b7a60:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b7a64:	2b00      	cmp	r3, #0
   b7a66:	f43f aec2 	beq.w	b77ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b7a6a:	6885      	ldr	r5, [r0, #8]
   b7a6c:	1c6f      	adds	r7, r5, #1
   b7a6e:	f43f aebe 	beq.w	b77ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b7a72:	012d      	lsls	r5, r5, #4
   b7a74:	5d5d      	ldrb	r5, [r3, r5]
   b7a76:	3d01      	subs	r5, #1
   b7a78:	2d01      	cmp	r5, #1
   b7a7a:	f67f aeb8 	bls.w	b77ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b7a7e:	6845      	ldr	r5, [r0, #4]
   b7a80:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b7a84:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b7a88:	f1b8 0f00 	cmp.w	r8, #0
   b7a8c:	f6ff aeaf 	blt.w	b77ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b7a90:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b7a94:	3d01      	subs	r5, #1
   b7a96:	2d01      	cmp	r5, #1
   b7a98:	d80a      	bhi.n	b7ab0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b7a9a:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b7a9e:	3501      	adds	r5, #1
   b7aa0:	d006      	beq.n	b7ab0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b7aa2:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b7aa6:	3501      	adds	r5, #1
   b7aa8:	d102      	bne.n	b7ab0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b7aaa:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b7aae:	e69e      	b.n	b77ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b7ab0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7ab4:	f1ae 0e10 	sub.w	lr, lr, #16
   b7ab8:	e7e6      	b.n	b7a88 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b7aba:	f1a5 0920 	sub.w	r9, r5, #32
   b7abe:	4f24      	ldr	r7, [pc, #144]	; (b7b50 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b7ac0:	fa5f f989 	uxtb.w	r9, r9
   b7ac4:	fa0c f909 	lsl.w	r9, ip, r9
   b7ac8:	ea19 0f07 	tst.w	r9, r7
   b7acc:	f47f aeaa 	bne.w	b7824 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b7ad0:	3d20      	subs	r5, #32
   b7ad2:	2d5e      	cmp	r5, #94	; 0x5e
   b7ad4:	d89a      	bhi.n	b7a0c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7ad6:	f108 0501 	add.w	r5, r8, #1
   b7ada:	6005      	str	r5, [r0, #0]
   b7adc:	e68f      	b.n	b77fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b7ade:	2d0d      	cmp	r5, #13
   b7ae0:	d1f6      	bne.n	b7ad0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b7ae2:	e69f      	b.n	b7824 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b7ae4:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b7ae8:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b7aec:	e7f8      	b.n	b7ae0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b7aee:	6845      	ldr	r5, [r0, #4]
   b7af0:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b7af2:	42af      	cmp	r7, r5
   b7af4:	f67f af28 	bls.w	b7948 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b7af8:	f105 0801 	add.w	r8, r5, #1
   b7afc:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b7b00:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b7b04:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b7b08:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b7b0c:	2700      	movs	r7, #0
   b7b0e:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b7b10:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b7b14:	f04f 0a04 	mov.w	sl, #4
   b7b18:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b7b1c:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b7b20:	6805      	ldr	r5, [r0, #0]
   b7b22:	3d01      	subs	r5, #1
   b7b24:	e683      	b.n	b782e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b7b26:	2b00      	cmp	r3, #0
   b7b28:	f43f af12 	beq.w	b7950 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b7b2c:	6842      	ldr	r2, [r0, #4]
   b7b2e:	1e51      	subs	r1, r2, #1
   b7b30:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b7b34:	2900      	cmp	r1, #0
   b7b36:	f6ff af0b 	blt.w	b7950 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b7b3a:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b7b3e:	3201      	adds	r2, #1
   b7b40:	d003      	beq.n	b7b4a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b7b42:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b7b46:	3201      	adds	r2, #1
   b7b48:	d087      	beq.n	b7a5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b7b4a:	3901      	subs	r1, #1
   b7b4c:	3b10      	subs	r3, #16
   b7b4e:	e7f1      	b.n	b7b34 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b7b50:	04001001 	.word	0x04001001

000b7b54 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b7b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b7b56:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b7b58:	4604      	mov	r4, r0
	if (offset == 0) {
   b7b5a:	b912      	cbnz	r2, b7b62 <_ZN10JsonParser5parseEv+0xe>
		return false;
   b7b5c:	2000      	movs	r0, #0
}
   b7b5e:	b003      	add	sp, #12
   b7b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b7b62:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b7b64:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b7b68:	b1ab      	cbz	r3, b7b96 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b7b6a:	2100      	movs	r1, #0
	parser->toknext = 0;
   b7b6c:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b7b70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b7b74:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7b76:	69c1      	ldr	r1, [r0, #28]
   b7b78:	9100      	str	r1, [sp, #0]
   b7b7a:	6841      	ldr	r1, [r0, #4]
   b7b7c:	4630      	mov	r0, r6
   b7b7e:	f7ff fe0d 	bl	b779c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b7b82:	1c43      	adds	r3, r0, #1
   b7b84:	d128      	bne.n	b7bd8 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b7b86:	7c25      	ldrb	r5, [r4, #16]
   b7b88:	2d00      	cmp	r5, #0
   b7b8a:	d1e7      	bne.n	b7b5c <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b7b8c:	6960      	ldr	r0, [r4, #20]
   b7b8e:	f000 fa83 	bl	b8098 <free>
			tokens = 0;
   b7b92:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b7b94:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b7b96:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b7b98:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b7b9c:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b7ba0:	68e2      	ldr	r2, [r4, #12]
   b7ba2:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b7ba4:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b7ba6:	9500      	str	r5, [sp, #0]
   b7ba8:	462b      	mov	r3, r5
   b7baa:	4630      	mov	r0, r6
   b7bac:	f7ff fdf6 	bl	b779c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b7bb0:	2800      	cmp	r0, #0
   b7bb2:	dbd3      	blt.n	b7b5c <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b7bb4:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b7bb6:	d017      	beq.n	b7be8 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b7bb8:	0100      	lsls	r0, r0, #4
   b7bba:	f000 fa65 	bl	b8088 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7bbe:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b7bc0:	6160      	str	r0, [r4, #20]
   b7bc2:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7bc4:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b7bc6:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7bca:	68e2      	ldr	r2, [r4, #12]
   b7bcc:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b7bce:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7bd0:	4630      	mov	r0, r6
   b7bd2:	f7ff fde3 	bl	b779c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b7bd6:	e001      	b.n	b7bdc <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b7bd8:	2800      	cmp	r0, #0
   b7bda:	dbbf      	blt.n	b7b5c <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b7bdc:	6963      	ldr	r3, [r4, #20]
   b7bde:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b7be2:	61a0      	str	r0, [r4, #24]
	return true;
   b7be4:	2001      	movs	r0, #1
   b7be6:	e7ba      	b.n	b7b5e <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b7be8:	6963      	ldr	r3, [r4, #20]
   b7bea:	61a3      	str	r3, [r4, #24]
   b7bec:	e7fa      	b.n	b7be4 <_ZN10JsonParser5parseEv+0x90>
	...

000b7bf0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b7bf0:	b508      	push	{r3, lr}
   b7bf2:	4b02      	ldr	r3, [pc, #8]	; (b7bfc <hal_ble_stack_init+0xc>)
   b7bf4:	681b      	ldr	r3, [r3, #0]
   b7bf6:	689b      	ldr	r3, [r3, #8]
   b7bf8:	9301      	str	r3, [sp, #4]
   b7bfa:	bd08      	pop	{r3, pc}
   b7bfc:	00030278 	.word	0x00030278

000b7c00 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b7c00:	b508      	push	{r3, lr}
   b7c02:	4b02      	ldr	r3, [pc, #8]	; (b7c0c <hal_ble_gap_set_advertising_data+0xc>)
   b7c04:	681b      	ldr	r3, [r3, #0]
   b7c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7c08:	9301      	str	r3, [sp, #4]
   b7c0a:	bd08      	pop	{r3, pc}
   b7c0c:	00030278 	.word	0x00030278

000b7c10 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b7c10:	b508      	push	{r3, lr}
   b7c12:	4b02      	ldr	r3, [pc, #8]	; (b7c1c <hal_ble_gap_set_scan_response_data+0xc>)
   b7c14:	681b      	ldr	r3, [r3, #0]
   b7c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7c18:	9301      	str	r3, [sp, #4]
   b7c1a:	bd08      	pop	{r3, pc}
   b7c1c:	00030278 	.word	0x00030278

000b7c20 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b7c20:	b508      	push	{r3, lr}
   b7c22:	4b02      	ldr	r3, [pc, #8]	; (b7c2c <hal_ble_gap_start_advertising+0xc>)
   b7c24:	681b      	ldr	r3, [r3, #0]
   b7c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b7c28:	9301      	str	r3, [sp, #4]
   b7c2a:	bd08      	pop	{r3, pc}
   b7c2c:	00030278 	.word	0x00030278

000b7c30 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b7c30:	b508      	push	{r3, lr}
   b7c32:	4b03      	ldr	r3, [pc, #12]	; (b7c40 <hal_ble_gap_disconnect+0x10>)
   b7c34:	681b      	ldr	r3, [r3, #0]
   b7c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b7c3a:	9301      	str	r3, [sp, #4]
   b7c3c:	bd08      	pop	{r3, pc}
   b7c3e:	0000      	.short	0x0000
   b7c40:	00030278 	.word	0x00030278

000b7c44 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b7c44:	b508      	push	{r3, lr}
   b7c46:	4b03      	ldr	r3, [pc, #12]	; (b7c54 <hal_ble_gatt_server_add_service+0x10>)
   b7c48:	681b      	ldr	r3, [r3, #0]
   b7c4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b7c4e:	9301      	str	r3, [sp, #4]
   b7c50:	bd08      	pop	{r3, pc}
   b7c52:	0000      	.short	0x0000
   b7c54:	00030278 	.word	0x00030278

000b7c58 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b7c58:	b508      	push	{r3, lr}
   b7c5a:	4b03      	ldr	r3, [pc, #12]	; (b7c68 <hal_ble_gatt_server_add_characteristic+0x10>)
   b7c5c:	681b      	ldr	r3, [r3, #0]
   b7c5e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b7c62:	9301      	str	r3, [sp, #4]
   b7c64:	bd08      	pop	{r3, pc}
   b7c66:	0000      	.short	0x0000
   b7c68:	00030278 	.word	0x00030278

000b7c6c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b7c6c:	b508      	push	{r3, lr}
   b7c6e:	4b03      	ldr	r3, [pc, #12]	; (b7c7c <hal_ble_set_callback_on_periph_link_events+0x10>)
   b7c70:	681b      	ldr	r3, [r3, #0]
   b7c72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b7c76:	9301      	str	r3, [sp, #4]
   b7c78:	bd08      	pop	{r3, pc}
   b7c7a:	0000      	.short	0x0000
   b7c7c:	00030278 	.word	0x00030278

000b7c80 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7c80:	b508      	push	{r3, lr}
   b7c82:	4b02      	ldr	r3, [pc, #8]	; (b7c8c <os_mutex_recursive_create+0xc>)
   b7c84:	681b      	ldr	r3, [r3, #0]
   b7c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7c88:	9301      	str	r3, [sp, #4]
   b7c8a:	bd08      	pop	{r3, pc}
   b7c8c:	00030248 	.word	0x00030248

000b7c90 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b7c90:	b508      	push	{r3, lr}
   b7c92:	4b02      	ldr	r3, [pc, #8]	; (b7c9c <os_mutex_recursive_lock+0xc>)
   b7c94:	681b      	ldr	r3, [r3, #0]
   b7c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7c98:	9301      	str	r3, [sp, #4]
   b7c9a:	bd08      	pop	{r3, pc}
   b7c9c:	00030248 	.word	0x00030248

000b7ca0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b7ca0:	b508      	push	{r3, lr}
   b7ca2:	4b02      	ldr	r3, [pc, #8]	; (b7cac <os_mutex_recursive_unlock+0xc>)
   b7ca4:	681b      	ldr	r3, [r3, #0]
   b7ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7ca8:	9301      	str	r3, [sp, #4]
   b7caa:	bd08      	pop	{r3, pc}
   b7cac:	00030248 	.word	0x00030248

000b7cb0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7cb0:	b508      	push	{r3, lr}
   b7cb2:	4b02      	ldr	r3, [pc, #8]	; (b7cbc <HAL_RNG_GetRandomNumber+0xc>)
   b7cb4:	681b      	ldr	r3, [r3, #0]
   b7cb6:	685b      	ldr	r3, [r3, #4]
   b7cb8:	9301      	str	r3, [sp, #4]
   b7cba:	bd08      	pop	{r3, pc}
   b7cbc:	00030218 	.word	0x00030218

000b7cc0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7cc0:	b508      	push	{r3, lr}
   b7cc2:	4b02      	ldr	r3, [pc, #8]	; (b7ccc <HAL_Delay_Microseconds+0xc>)
   b7cc4:	681b      	ldr	r3, [r3, #0]
   b7cc6:	68db      	ldr	r3, [r3, #12]
   b7cc8:	9301      	str	r3, [sp, #4]
   b7cca:	bd08      	pop	{r3, pc}
   b7ccc:	00030218 	.word	0x00030218

000b7cd0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7cd0:	b508      	push	{r3, lr}
   b7cd2:	4b02      	ldr	r3, [pc, #8]	; (b7cdc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7cd4:	681b      	ldr	r3, [r3, #0]
   b7cd6:	695b      	ldr	r3, [r3, #20]
   b7cd8:	9301      	str	r3, [sp, #4]
   b7cda:	bd08      	pop	{r3, pc}
   b7cdc:	00030218 	.word	0x00030218

000b7ce0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7ce0:	b508      	push	{r3, lr}
   b7ce2:	4b02      	ldr	r3, [pc, #8]	; (b7cec <hal_i2c_begin+0xc>)
   b7ce4:	681b      	ldr	r3, [r3, #0]
   b7ce6:	68db      	ldr	r3, [r3, #12]
   b7ce8:	9301      	str	r3, [sp, #4]
   b7cea:	bd08      	pop	{r3, pc}
   b7cec:	00030228 	.word	0x00030228

000b7cf0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b7cf0:	b508      	push	{r3, lr}
   b7cf2:	4b02      	ldr	r3, [pc, #8]	; (b7cfc <hal_i2c_begin_transmission+0xc>)
   b7cf4:	681b      	ldr	r3, [r3, #0]
   b7cf6:	699b      	ldr	r3, [r3, #24]
   b7cf8:	9301      	str	r3, [sp, #4]
   b7cfa:	bd08      	pop	{r3, pc}
   b7cfc:	00030228 	.word	0x00030228

000b7d00 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b7d00:	b508      	push	{r3, lr}
   b7d02:	4b02      	ldr	r3, [pc, #8]	; (b7d0c <hal_i2c_end_transmission+0xc>)
   b7d04:	681b      	ldr	r3, [r3, #0]
   b7d06:	69db      	ldr	r3, [r3, #28]
   b7d08:	9301      	str	r3, [sp, #4]
   b7d0a:	bd08      	pop	{r3, pc}
   b7d0c:	00030228 	.word	0x00030228

000b7d10 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7d10:	b508      	push	{r3, lr}
   b7d12:	4b02      	ldr	r3, [pc, #8]	; (b7d1c <hal_i2c_write+0xc>)
   b7d14:	681b      	ldr	r3, [r3, #0]
   b7d16:	6a1b      	ldr	r3, [r3, #32]
   b7d18:	9301      	str	r3, [sp, #4]
   b7d1a:	bd08      	pop	{r3, pc}
   b7d1c:	00030228 	.word	0x00030228

000b7d20 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7d20:	b508      	push	{r3, lr}
   b7d22:	4b02      	ldr	r3, [pc, #8]	; (b7d2c <hal_i2c_available+0xc>)
   b7d24:	681b      	ldr	r3, [r3, #0]
   b7d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7d28:	9301      	str	r3, [sp, #4]
   b7d2a:	bd08      	pop	{r3, pc}
   b7d2c:	00030228 	.word	0x00030228

000b7d30 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7d30:	b508      	push	{r3, lr}
   b7d32:	4b02      	ldr	r3, [pc, #8]	; (b7d3c <hal_i2c_read+0xc>)
   b7d34:	681b      	ldr	r3, [r3, #0]
   b7d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7d38:	9301      	str	r3, [sp, #4]
   b7d3a:	bd08      	pop	{r3, pc}
   b7d3c:	00030228 	.word	0x00030228

000b7d40 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7d40:	b508      	push	{r3, lr}
   b7d42:	4b02      	ldr	r3, [pc, #8]	; (b7d4c <hal_i2c_peek+0xc>)
   b7d44:	681b      	ldr	r3, [r3, #0]
   b7d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7d48:	9301      	str	r3, [sp, #4]
   b7d4a:	bd08      	pop	{r3, pc}
   b7d4c:	00030228 	.word	0x00030228

000b7d50 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7d50:	b508      	push	{r3, lr}
   b7d52:	4b02      	ldr	r3, [pc, #8]	; (b7d5c <hal_i2c_flush+0xc>)
   b7d54:	681b      	ldr	r3, [r3, #0]
   b7d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7d58:	9301      	str	r3, [sp, #4]
   b7d5a:	bd08      	pop	{r3, pc}
   b7d5c:	00030228 	.word	0x00030228

000b7d60 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7d60:	b508      	push	{r3, lr}
   b7d62:	4b02      	ldr	r3, [pc, #8]	; (b7d6c <hal_i2c_init+0xc>)
   b7d64:	681b      	ldr	r3, [r3, #0]
   b7d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7d68:	9301      	str	r3, [sp, #4]
   b7d6a:	bd08      	pop	{r3, pc}
   b7d6c:	00030228 	.word	0x00030228

000b7d70 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b7d70:	b508      	push	{r3, lr}
   b7d72:	4b02      	ldr	r3, [pc, #8]	; (b7d7c <hal_i2c_request_ex+0xc>)
   b7d74:	681b      	ldr	r3, [r3, #0]
   b7d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7d78:	9301      	str	r3, [sp, #4]
   b7d7a:	bd08      	pop	{r3, pc}
   b7d7c:	00030228 	.word	0x00030228

000b7d80 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b7d80:	b508      	push	{r3, lr}
   b7d82:	4b02      	ldr	r3, [pc, #8]	; (b7d8c <if_index_to_name+0xc>)
   b7d84:	681b      	ldr	r3, [r3, #0]
   b7d86:	695b      	ldr	r3, [r3, #20]
   b7d88:	9301      	str	r3, [sp, #4]
   b7d8a:	bd08      	pop	{r3, pc}
   b7d8c:	0003026c 	.word	0x0003026c

000b7d90 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7d90:	b508      	push	{r3, lr}
   b7d92:	4b02      	ldr	r3, [pc, #8]	; (b7d9c <inet_inet_ntop+0xc>)
   b7d94:	681b      	ldr	r3, [r3, #0]
   b7d96:	695b      	ldr	r3, [r3, #20]
   b7d98:	9301      	str	r3, [sp, #4]
   b7d9a:	bd08      	pop	{r3, pc}
   b7d9c:	00030264 	.word	0x00030264

000b7da0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b7da0:	b508      	push	{r3, lr}
   b7da2:	4b02      	ldr	r3, [pc, #8]	; (b7dac <inet_htonl+0xc>)
   b7da4:	681b      	ldr	r3, [r3, #0]
   b7da6:	6a1b      	ldr	r3, [r3, #32]
   b7da8:	9301      	str	r3, [sp, #4]
   b7daa:	bd08      	pop	{r3, pc}
   b7dac:	00030264 	.word	0x00030264

000b7db0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b7db0:	b508      	push	{r3, lr}
   b7db2:	4b02      	ldr	r3, [pc, #8]	; (b7dbc <inet_htons+0xc>)
   b7db4:	681b      	ldr	r3, [r3, #0]
   b7db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7db8:	9301      	str	r3, [sp, #4]
   b7dba:	bd08      	pop	{r3, pc}
   b7dbc:	00030264 	.word	0x00030264

000b7dc0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7dc0:	b508      	push	{r3, lr}
   b7dc2:	4b02      	ldr	r3, [pc, #8]	; (b7dcc <netdb_freeaddrinfo+0xc>)
   b7dc4:	681b      	ldr	r3, [r3, #0]
   b7dc6:	689b      	ldr	r3, [r3, #8]
   b7dc8:	9301      	str	r3, [sp, #4]
   b7dca:	bd08      	pop	{r3, pc}
   b7dcc:	00030268 	.word	0x00030268

000b7dd0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7dd0:	b508      	push	{r3, lr}
   b7dd2:	4b02      	ldr	r3, [pc, #8]	; (b7ddc <netdb_getaddrinfo+0xc>)
   b7dd4:	681b      	ldr	r3, [r3, #0]
   b7dd6:	68db      	ldr	r3, [r3, #12]
   b7dd8:	9301      	str	r3, [sp, #4]
   b7dda:	bd08      	pop	{r3, pc}
   b7ddc:	00030268 	.word	0x00030268

000b7de0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b7de0:	b508      	push	{r3, lr}
   b7de2:	4b02      	ldr	r3, [pc, #8]	; (b7dec <sock_setsockopt+0xc>)
   b7de4:	681b      	ldr	r3, [r3, #0]
   b7de6:	699b      	ldr	r3, [r3, #24]
   b7de8:	9301      	str	r3, [sp, #4]
   b7dea:	bd08      	pop	{r3, pc}
   b7dec:	00030238 	.word	0x00030238

000b7df0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b7df0:	b508      	push	{r3, lr}
   b7df2:	4b02      	ldr	r3, [pc, #8]	; (b7dfc <sock_close+0xc>)
   b7df4:	681b      	ldr	r3, [r3, #0]
   b7df6:	69db      	ldr	r3, [r3, #28]
   b7df8:	9301      	str	r3, [sp, #4]
   b7dfa:	bd08      	pop	{r3, pc}
   b7dfc:	00030238 	.word	0x00030238

000b7e00 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b7e00:	b508      	push	{r3, lr}
   b7e02:	4b02      	ldr	r3, [pc, #8]	; (b7e0c <sock_connect+0xc>)
   b7e04:	681b      	ldr	r3, [r3, #0]
   b7e06:	6a1b      	ldr	r3, [r3, #32]
   b7e08:	9301      	str	r3, [sp, #4]
   b7e0a:	bd08      	pop	{r3, pc}
   b7e0c:	00030238 	.word	0x00030238

000b7e10 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b7e10:	b508      	push	{r3, lr}
   b7e12:	4b02      	ldr	r3, [pc, #8]	; (b7e1c <sock_recv+0xc>)
   b7e14:	681b      	ldr	r3, [r3, #0]
   b7e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7e18:	9301      	str	r3, [sp, #4]
   b7e1a:	bd08      	pop	{r3, pc}
   b7e1c:	00030238 	.word	0x00030238

000b7e20 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b7e20:	b508      	push	{r3, lr}
   b7e22:	4b02      	ldr	r3, [pc, #8]	; (b7e2c <sock_send+0xc>)
   b7e24:	681b      	ldr	r3, [r3, #0]
   b7e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7e28:	9301      	str	r3, [sp, #4]
   b7e2a:	bd08      	pop	{r3, pc}
   b7e2c:	00030238 	.word	0x00030238

000b7e30 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b7e30:	b508      	push	{r3, lr}
   b7e32:	4b02      	ldr	r3, [pc, #8]	; (b7e3c <sock_socket+0xc>)
   b7e34:	681b      	ldr	r3, [r3, #0]
   b7e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7e38:	9301      	str	r3, [sp, #4]
   b7e3a:	bd08      	pop	{r3, pc}
   b7e3c:	00030238 	.word	0x00030238

000b7e40 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7e40:	b508      	push	{r3, lr}
   b7e42:	4b02      	ldr	r3, [pc, #8]	; (b7e4c <hal_usart_write+0xc>)
   b7e44:	681b      	ldr	r3, [r3, #0]
   b7e46:	68db      	ldr	r3, [r3, #12]
   b7e48:	9301      	str	r3, [sp, #4]
   b7e4a:	bd08      	pop	{r3, pc}
   b7e4c:	0003023c 	.word	0x0003023c

000b7e50 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7e50:	b508      	push	{r3, lr}
   b7e52:	4b02      	ldr	r3, [pc, #8]	; (b7e5c <hal_usart_available+0xc>)
   b7e54:	681b      	ldr	r3, [r3, #0]
   b7e56:	691b      	ldr	r3, [r3, #16]
   b7e58:	9301      	str	r3, [sp, #4]
   b7e5a:	bd08      	pop	{r3, pc}
   b7e5c:	0003023c 	.word	0x0003023c

000b7e60 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7e60:	b508      	push	{r3, lr}
   b7e62:	4b02      	ldr	r3, [pc, #8]	; (b7e6c <hal_usart_read+0xc>)
   b7e64:	681b      	ldr	r3, [r3, #0]
   b7e66:	695b      	ldr	r3, [r3, #20]
   b7e68:	9301      	str	r3, [sp, #4]
   b7e6a:	bd08      	pop	{r3, pc}
   b7e6c:	0003023c 	.word	0x0003023c

000b7e70 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7e70:	b508      	push	{r3, lr}
   b7e72:	4b02      	ldr	r3, [pc, #8]	; (b7e7c <hal_usart_peek+0xc>)
   b7e74:	681b      	ldr	r3, [r3, #0]
   b7e76:	699b      	ldr	r3, [r3, #24]
   b7e78:	9301      	str	r3, [sp, #4]
   b7e7a:	bd08      	pop	{r3, pc}
   b7e7c:	0003023c 	.word	0x0003023c

000b7e80 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7e80:	b508      	push	{r3, lr}
   b7e82:	4b02      	ldr	r3, [pc, #8]	; (b7e8c <hal_usart_flush+0xc>)
   b7e84:	681b      	ldr	r3, [r3, #0]
   b7e86:	69db      	ldr	r3, [r3, #28]
   b7e88:	9301      	str	r3, [sp, #4]
   b7e8a:	bd08      	pop	{r3, pc}
   b7e8c:	0003023c 	.word	0x0003023c

000b7e90 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7e90:	b508      	push	{r3, lr}
   b7e92:	4b02      	ldr	r3, [pc, #8]	; (b7e9c <hal_usart_available_data_for_write+0xc>)
   b7e94:	681b      	ldr	r3, [r3, #0]
   b7e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7e98:	9301      	str	r3, [sp, #4]
   b7e9a:	bd08      	pop	{r3, pc}
   b7e9c:	0003023c 	.word	0x0003023c

000b7ea0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7ea0:	b508      	push	{r3, lr}
   b7ea2:	4b02      	ldr	r3, [pc, #8]	; (b7eac <hal_usart_init_ex+0xc>)
   b7ea4:	681b      	ldr	r3, [r3, #0]
   b7ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7ea8:	9301      	str	r3, [sp, #4]
   b7eaa:	bd08      	pop	{r3, pc}
   b7eac:	0003023c 	.word	0x0003023c

000b7eb0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7eb0:	b508      	push	{r3, lr}
   b7eb2:	4b02      	ldr	r3, [pc, #8]	; (b7ebc <HAL_USB_USART_Init+0xc>)
   b7eb4:	681b      	ldr	r3, [r3, #0]
   b7eb6:	681b      	ldr	r3, [r3, #0]
   b7eb8:	9301      	str	r3, [sp, #4]
   b7eba:	bd08      	pop	{r3, pc}
   b7ebc:	0003024c 	.word	0x0003024c

000b7ec0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7ec0:	b508      	push	{r3, lr}
   b7ec2:	4b02      	ldr	r3, [pc, #8]	; (b7ecc <HAL_USB_USART_Begin+0xc>)
   b7ec4:	681b      	ldr	r3, [r3, #0]
   b7ec6:	685b      	ldr	r3, [r3, #4]
   b7ec8:	9301      	str	r3, [sp, #4]
   b7eca:	bd08      	pop	{r3, pc}
   b7ecc:	0003024c 	.word	0x0003024c

000b7ed0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7ed0:	b508      	push	{r3, lr}
   b7ed2:	4b02      	ldr	r3, [pc, #8]	; (b7edc <HAL_USB_USART_Available_Data+0xc>)
   b7ed4:	681b      	ldr	r3, [r3, #0]
   b7ed6:	691b      	ldr	r3, [r3, #16]
   b7ed8:	9301      	str	r3, [sp, #4]
   b7eda:	bd08      	pop	{r3, pc}
   b7edc:	0003024c 	.word	0x0003024c

000b7ee0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7ee0:	b508      	push	{r3, lr}
   b7ee2:	4b02      	ldr	r3, [pc, #8]	; (b7eec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7ee4:	681b      	ldr	r3, [r3, #0]
   b7ee6:	695b      	ldr	r3, [r3, #20]
   b7ee8:	9301      	str	r3, [sp, #4]
   b7eea:	bd08      	pop	{r3, pc}
   b7eec:	0003024c 	.word	0x0003024c

000b7ef0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7ef0:	b508      	push	{r3, lr}
   b7ef2:	4b02      	ldr	r3, [pc, #8]	; (b7efc <HAL_USB_USART_Receive_Data+0xc>)
   b7ef4:	681b      	ldr	r3, [r3, #0]
   b7ef6:	699b      	ldr	r3, [r3, #24]
   b7ef8:	9301      	str	r3, [sp, #4]
   b7efa:	bd08      	pop	{r3, pc}
   b7efc:	0003024c 	.word	0x0003024c

000b7f00 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7f00:	b508      	push	{r3, lr}
   b7f02:	4b02      	ldr	r3, [pc, #8]	; (b7f0c <HAL_USB_USART_Send_Data+0xc>)
   b7f04:	681b      	ldr	r3, [r3, #0]
   b7f06:	69db      	ldr	r3, [r3, #28]
   b7f08:	9301      	str	r3, [sp, #4]
   b7f0a:	bd08      	pop	{r3, pc}
   b7f0c:	0003024c 	.word	0x0003024c

000b7f10 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7f10:	b508      	push	{r3, lr}
   b7f12:	4b02      	ldr	r3, [pc, #8]	; (b7f1c <HAL_USB_USART_Flush_Data+0xc>)
   b7f14:	681b      	ldr	r3, [r3, #0]
   b7f16:	6a1b      	ldr	r3, [r3, #32]
   b7f18:	9301      	str	r3, [sp, #4]
   b7f1a:	bd08      	pop	{r3, pc}
   b7f1c:	0003024c 	.word	0x0003024c

000b7f20 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7f20:	b508      	push	{r3, lr}
   b7f22:	4b02      	ldr	r3, [pc, #8]	; (b7f2c <panic_+0xc>)
   b7f24:	681b      	ldr	r3, [r3, #0]
   b7f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7f28:	9301      	str	r3, [sp, #4]
   b7f2a:	bd08      	pop	{r3, pc}
   b7f2c:	00030260 	.word	0x00030260

000b7f30 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7f30:	b508      	push	{r3, lr}
   b7f32:	4b02      	ldr	r3, [pc, #8]	; (b7f3c <log_message+0xc>)
   b7f34:	681b      	ldr	r3, [r3, #0]
   b7f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7f38:	9301      	str	r3, [sp, #4]
   b7f3a:	bd08      	pop	{r3, pc}
   b7f3c:	00030260 	.word	0x00030260

000b7f40 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7f40:	b508      	push	{r3, lr}
   b7f42:	4b02      	ldr	r3, [pc, #8]	; (b7f4c <set_system_mode+0xc>)
   b7f44:	681b      	ldr	r3, [r3, #0]
   b7f46:	685b      	ldr	r3, [r3, #4]
   b7f48:	9301      	str	r3, [sp, #4]
   b7f4a:	bd08      	pop	{r3, pc}
   b7f4c:	00030220 	.word	0x00030220

000b7f50 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7f50:	b508      	push	{r3, lr}
   b7f52:	4b02      	ldr	r3, [pc, #8]	; (b7f5c <system_delay_ms+0xc>)
   b7f54:	681b      	ldr	r3, [r3, #0]
   b7f56:	695b      	ldr	r3, [r3, #20]
   b7f58:	9301      	str	r3, [sp, #4]
   b7f5a:	bd08      	pop	{r3, pc}
   b7f5c:	00030220 	.word	0x00030220

000b7f60 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7f60:	b508      	push	{r3, lr}
   b7f62:	4b03      	ldr	r3, [pc, #12]	; (b7f70 <system_ctrl_set_app_request_handler+0x10>)
   b7f64:	681b      	ldr	r3, [r3, #0]
   b7f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7f6a:	9301      	str	r3, [sp, #4]
   b7f6c:	bd08      	pop	{r3, pc}
   b7f6e:	0000      	.short	0x0000
   b7f70:	00030220 	.word	0x00030220

000b7f74 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7f74:	b508      	push	{r3, lr}
   b7f76:	4b03      	ldr	r3, [pc, #12]	; (b7f84 <system_ctrl_set_result+0x10>)
   b7f78:	681b      	ldr	r3, [r3, #0]
   b7f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7f7e:	9301      	str	r3, [sp, #4]
   b7f80:	bd08      	pop	{r3, pc}
   b7f82:	0000      	.short	0x0000
   b7f84:	00030220 	.word	0x00030220

000b7f88 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7f88:	b508      	push	{r3, lr}
   b7f8a:	4b02      	ldr	r3, [pc, #8]	; (b7f94 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7f8c:	681b      	ldr	r3, [r3, #0]
   b7f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7f90:	9301      	str	r3, [sp, #4]
   b7f92:	bd08      	pop	{r3, pc}
   b7f94:	00030244 	.word	0x00030244

000b7f98 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7f98:	b508      	push	{r3, lr}
   b7f9a:	4b02      	ldr	r3, [pc, #8]	; (b7fa4 <network_connect+0xc>)
   b7f9c:	681b      	ldr	r3, [r3, #0]
   b7f9e:	685b      	ldr	r3, [r3, #4]
   b7fa0:	9301      	str	r3, [sp, #4]
   b7fa2:	bd08      	pop	{r3, pc}
   b7fa4:	00030240 	.word	0x00030240

000b7fa8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7fa8:	b508      	push	{r3, lr}
   b7faa:	4b02      	ldr	r3, [pc, #8]	; (b7fb4 <network_connecting+0xc>)
   b7fac:	681b      	ldr	r3, [r3, #0]
   b7fae:	689b      	ldr	r3, [r3, #8]
   b7fb0:	9301      	str	r3, [sp, #4]
   b7fb2:	bd08      	pop	{r3, pc}
   b7fb4:	00030240 	.word	0x00030240

000b7fb8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7fb8:	b508      	push	{r3, lr}
   b7fba:	4b02      	ldr	r3, [pc, #8]	; (b7fc4 <network_disconnect+0xc>)
   b7fbc:	681b      	ldr	r3, [r3, #0]
   b7fbe:	68db      	ldr	r3, [r3, #12]
   b7fc0:	9301      	str	r3, [sp, #4]
   b7fc2:	bd08      	pop	{r3, pc}
   b7fc4:	00030240 	.word	0x00030240

000b7fc8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7fc8:	b508      	push	{r3, lr}
   b7fca:	4b02      	ldr	r3, [pc, #8]	; (b7fd4 <network_ready+0xc>)
   b7fcc:	681b      	ldr	r3, [r3, #0]
   b7fce:	691b      	ldr	r3, [r3, #16]
   b7fd0:	9301      	str	r3, [sp, #4]
   b7fd2:	bd08      	pop	{r3, pc}
   b7fd4:	00030240 	.word	0x00030240

000b7fd8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7fd8:	b508      	push	{r3, lr}
   b7fda:	4b02      	ldr	r3, [pc, #8]	; (b7fe4 <network_on+0xc>)
   b7fdc:	681b      	ldr	r3, [r3, #0]
   b7fde:	695b      	ldr	r3, [r3, #20]
   b7fe0:	9301      	str	r3, [sp, #4]
   b7fe2:	bd08      	pop	{r3, pc}
   b7fe4:	00030240 	.word	0x00030240

000b7fe8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7fe8:	b508      	push	{r3, lr}
   b7fea:	4b02      	ldr	r3, [pc, #8]	; (b7ff4 <network_off+0xc>)
   b7fec:	681b      	ldr	r3, [r3, #0]
   b7fee:	699b      	ldr	r3, [r3, #24]
   b7ff0:	9301      	str	r3, [sp, #4]
   b7ff2:	bd08      	pop	{r3, pc}
   b7ff4:	00030240 	.word	0x00030240

000b7ff8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7ff8:	b508      	push	{r3, lr}
   b7ffa:	4b02      	ldr	r3, [pc, #8]	; (b8004 <network_listen+0xc>)
   b7ffc:	681b      	ldr	r3, [r3, #0]
   b7ffe:	69db      	ldr	r3, [r3, #28]
   b8000:	9301      	str	r3, [sp, #4]
   b8002:	bd08      	pop	{r3, pc}
   b8004:	00030240 	.word	0x00030240

000b8008 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b8008:	b508      	push	{r3, lr}
   b800a:	4b02      	ldr	r3, [pc, #8]	; (b8014 <network_listening+0xc>)
   b800c:	681b      	ldr	r3, [r3, #0]
   b800e:	6a1b      	ldr	r3, [r3, #32]
   b8010:	9301      	str	r3, [sp, #4]
   b8012:	bd08      	pop	{r3, pc}
   b8014:	00030240 	.word	0x00030240

000b8018 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   b8018:	b508      	push	{r3, lr}
   b801a:	4b02      	ldr	r3, [pc, #8]	; (b8024 <network_has_credentials+0xc>)
   b801c:	681b      	ldr	r3, [r3, #0]
   b801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8020:	9301      	str	r3, [sp, #4]
   b8022:	bd08      	pop	{r3, pc}
   b8024:	00030240 	.word	0x00030240

000b8028 <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b8028:	b508      	push	{r3, lr}
   b802a:	4b02      	ldr	r3, [pc, #8]	; (b8034 <network_set_credentials+0xc>)
   b802c:	681b      	ldr	r3, [r3, #0]
   b802e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8030:	9301      	str	r3, [sp, #4]
   b8032:	bd08      	pop	{r3, pc}
   b8034:	00030240 	.word	0x00030240

000b8038 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b8038:	b508      	push	{r3, lr}
   b803a:	4b02      	ldr	r3, [pc, #8]	; (b8044 <network_clear_credentials+0xc>)
   b803c:	681b      	ldr	r3, [r3, #0]
   b803e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8040:	9301      	str	r3, [sp, #4]
   b8042:	bd08      	pop	{r3, pc}
   b8044:	00030240 	.word	0x00030240

000b8048 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b8048:	b508      	push	{r3, lr}
   b804a:	4b02      	ldr	r3, [pc, #8]	; (b8054 <network_set_listen_timeout+0xc>)
   b804c:	681b      	ldr	r3, [r3, #0]
   b804e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8050:	9301      	str	r3, [sp, #4]
   b8052:	bd08      	pop	{r3, pc}
   b8054:	00030240 	.word	0x00030240

000b8058 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8058:	b508      	push	{r3, lr}
   b805a:	4b02      	ldr	r3, [pc, #8]	; (b8064 <network_get_listen_timeout+0xc>)
   b805c:	681b      	ldr	r3, [r3, #0]
   b805e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8060:	9301      	str	r3, [sp, #4]
   b8062:	bd08      	pop	{r3, pc}
   b8064:	00030240 	.word	0x00030240

000b8068 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8068:	b508      	push	{r3, lr}
   b806a:	4b02      	ldr	r3, [pc, #8]	; (b8074 <network_is_on+0xc>)
   b806c:	681b      	ldr	r3, [r3, #0]
   b806e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8070:	9301      	str	r3, [sp, #4]
   b8072:	bd08      	pop	{r3, pc}
   b8074:	00030240 	.word	0x00030240

000b8078 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8078:	b508      	push	{r3, lr}
   b807a:	4b02      	ldr	r3, [pc, #8]	; (b8084 <network_is_off+0xc>)
   b807c:	681b      	ldr	r3, [r3, #0]
   b807e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8080:	9301      	str	r3, [sp, #4]
   b8082:	bd08      	pop	{r3, pc}
   b8084:	00030240 	.word	0x00030240

000b8088 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8088:	b508      	push	{r3, lr}
   b808a:	4b02      	ldr	r3, [pc, #8]	; (b8094 <malloc+0xc>)
   b808c:	681b      	ldr	r3, [r3, #0]
   b808e:	681b      	ldr	r3, [r3, #0]
   b8090:	9301      	str	r3, [sp, #4]
   b8092:	bd08      	pop	{r3, pc}
   b8094:	0003021c 	.word	0x0003021c

000b8098 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8098:	b508      	push	{r3, lr}
   b809a:	4b02      	ldr	r3, [pc, #8]	; (b80a4 <free+0xc>)
   b809c:	681b      	ldr	r3, [r3, #0]
   b809e:	685b      	ldr	r3, [r3, #4]
   b80a0:	9301      	str	r3, [sp, #4]
   b80a2:	bd08      	pop	{r3, pc}
   b80a4:	0003021c 	.word	0x0003021c

000b80a8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b80a8:	b508      	push	{r3, lr}
   b80aa:	4b02      	ldr	r3, [pc, #8]	; (b80b4 <realloc+0xc>)
   b80ac:	681b      	ldr	r3, [r3, #0]
   b80ae:	689b      	ldr	r3, [r3, #8]
   b80b0:	9301      	str	r3, [sp, #4]
   b80b2:	bd08      	pop	{r3, pc}
   b80b4:	0003021c 	.word	0x0003021c

000b80b8 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b80b8:	b508      	push	{r3, lr}
   b80ba:	4b02      	ldr	r3, [pc, #8]	; (b80c4 <sscanf+0xc>)
   b80bc:	681b      	ldr	r3, [r3, #0]
   b80be:	695b      	ldr	r3, [r3, #20]
   b80c0:	9301      	str	r3, [sp, #4]
   b80c2:	bd08      	pop	{r3, pc}
   b80c4:	0003021c 	.word	0x0003021c

000b80c8 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b80c8:	b508      	push	{r3, lr}
   b80ca:	4b02      	ldr	r3, [pc, #8]	; (b80d4 <vsnprintf+0xc>)
   b80cc:	681b      	ldr	r3, [r3, #0]
   b80ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b80d0:	9301      	str	r3, [sp, #4]
   b80d2:	bd08      	pop	{r3, pc}
   b80d4:	0003021c 	.word	0x0003021c

000b80d8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b80d8:	b508      	push	{r3, lr}
   b80da:	4b02      	ldr	r3, [pc, #8]	; (b80e4 <abort+0xc>)
   b80dc:	681b      	ldr	r3, [r3, #0]
   b80de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b80e0:	9301      	str	r3, [sp, #4]
   b80e2:	bd08      	pop	{r3, pc}
   b80e4:	0003021c 	.word	0x0003021c

000b80e8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b80e8:	b508      	push	{r3, lr}
   b80ea:	4b02      	ldr	r3, [pc, #8]	; (b80f4 <_malloc_r+0xc>)
   b80ec:	681b      	ldr	r3, [r3, #0]
   b80ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b80f0:	9301      	str	r3, [sp, #4]
   b80f2:	bd08      	pop	{r3, pc}
   b80f4:	0003021c 	.word	0x0003021c

000b80f8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b80f8:	b508      	push	{r3, lr}
   b80fa:	4b02      	ldr	r3, [pc, #8]	; (b8104 <__errno+0xc>)
   b80fc:	681b      	ldr	r3, [r3, #0]
   b80fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8100:	9301      	str	r3, [sp, #4]
   b8102:	bd08      	pop	{r3, pc}
   b8104:	0003021c 	.word	0x0003021c

000b8108 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b8108:	b508      	push	{r3, lr}
   b810a:	4b02      	ldr	r3, [pc, #8]	; (b8114 <__assert_func+0xc>)
   b810c:	681b      	ldr	r3, [r3, #0]
   b810e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8110:	9301      	str	r3, [sp, #4]
   b8112:	bd08      	pop	{r3, pc}
   b8114:	0003021c 	.word	0x0003021c

000b8118 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b8118:	b508      	push	{r3, lr}
   b811a:	4b02      	ldr	r3, [pc, #8]	; (b8124 <newlib_impure_ptr_callback+0xc>)
   b811c:	681b      	ldr	r3, [r3, #0]
   b811e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8120:	9301      	str	r3, [sp, #4]
   b8122:	bd08      	pop	{r3, pc}
   b8124:	0003021c 	.word	0x0003021c

000b8128 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8128:	2100      	movs	r1, #0
   b812a:	f7ff bf11 	b.w	b7f50 <system_delay_ms>

000b812e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b812e:	4770      	bx	lr

000b8130 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b8130:	4770      	bx	lr

000b8132 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b8132:	4770      	bx	lr

000b8134 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8134:	4770      	bx	lr
	...

000b8138 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8138:	4b06      	ldr	r3, [pc, #24]	; (b8154 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b813a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b813c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b813e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8142:	d005      	beq.n	b8150 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8144:	4608      	mov	r0, r1
   b8146:	f002 faa1 	bl	ba68c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b814a:	2800      	cmp	r0, #0
   b814c:	bf08      	it	eq
   b814e:	2400      	moveq	r4, #0
      }
   b8150:	4620      	mov	r0, r4
   b8152:	bd10      	pop	{r4, pc}
   b8154:	000bdda0 	.word	0x000bdda0

000b8158 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8158:	4b06      	ldr	r3, [pc, #24]	; (b8174 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b815a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b815c:	b510      	push	{r4, lr}
   b815e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8162:	d005      	beq.n	b8170 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8164:	4608      	mov	r0, r1
   b8166:	f002 fa91 	bl	ba68c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b816a:	2800      	cmp	r0, #0
   b816c:	bf08      	it	eq
   b816e:	2400      	moveq	r4, #0
      }
   b8170:	4620      	mov	r0, r4
   b8172:	bd10      	pop	{r4, pc}
   b8174:	000bdda0 	.word	0x000bdda0

000b8178 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8178:	4b06      	ldr	r3, [pc, #24]	; (b8194 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b817a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b817c:	b510      	push	{r4, lr}
   b817e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8182:	d005      	beq.n	b8190 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8184:	4608      	mov	r0, r1
   b8186:	f002 fa81 	bl	ba68c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b818a:	2800      	cmp	r0, #0
   b818c:	bf08      	it	eq
   b818e:	2400      	moveq	r4, #0
      }
   b8190:	4620      	mov	r0, r4
   b8192:	bd10      	pop	{r4, pc}
   b8194:	000bdda0 	.word	0x000bdda0

000b8198 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8198:	b510      	push	{r4, lr}
   b819a:	2168      	movs	r1, #104	; 0x68
   b819c:	4604      	mov	r4, r0
   b819e:	f7fb ff80 	bl	b40a2 <_ZdlPvj>
   b81a2:	4620      	mov	r0, r4
   b81a4:	bd10      	pop	{r4, pc}

000b81a6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b81a6:	b510      	push	{r4, lr}
   b81a8:	2128      	movs	r1, #40	; 0x28
   b81aa:	4604      	mov	r4, r0
   b81ac:	f7fb ff79 	bl	b40a2 <_ZdlPvj>
   b81b0:	4620      	mov	r0, r4
   b81b2:	bd10      	pop	{r4, pc}

000b81b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b81b4:	b510      	push	{r4, lr}
   b81b6:	2130      	movs	r1, #48	; 0x30
   b81b8:	4604      	mov	r4, r0
   b81ba:	f7fb ff72 	bl	b40a2 <_ZdlPvj>
   b81be:	4620      	mov	r0, r4
   b81c0:	bd10      	pop	{r4, pc}

000b81c2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b81c2:	2168      	movs	r1, #104	; 0x68
   b81c4:	f7fb bf6d 	b.w	b40a2 <_ZdlPvj>

000b81c8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b81c8:	2128      	movs	r1, #40	; 0x28
   b81ca:	f7fb bf6a 	b.w	b40a2 <_ZdlPvj>

000b81ce <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b81ce:	2130      	movs	r1, #48	; 0x30
   b81d0:	f7fb bf67 	b.w	b40a2 <_ZdlPvj>

000b81d4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b81d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b81d6:	2500      	movs	r5, #0
   b81d8:	1cec      	adds	r4, r5, #3
   b81da:	428c      	cmp	r4, r1
   b81dc:	d80d      	bhi.n	b81fa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b81de:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b81e0:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b81e2:	5d87      	ldrb	r7, [r0, r6]
   b81e4:	4297      	cmp	r7, r2
   b81e6:	d105      	bne.n	b81f4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b81e8:	4426      	add	r6, r4
   b81ea:	42b1      	cmp	r1, r6
   b81ec:	d305      	bcc.n	b81fa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b81ee:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b81f0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b81f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b81f4:	3401      	adds	r4, #1
   b81f6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b81f8:	e7ee      	b.n	b81d8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b81fa:	2000      	movs	r0, #0
   b81fc:	e7f9      	b.n	b81f2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b8200 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b8200:	4a02      	ldr	r2, [pc, #8]	; (b820c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b8202:	4903      	ldr	r1, [pc, #12]	; (b8210 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b8204:	200a      	movs	r0, #10
   b8206:	f7ff be8b 	b.w	b7f20 <panic_>
   b820a:	bf00      	nop
   b820c:	000b7cc1 	.word	0x000b7cc1
   b8210:	000bdc00 	.word	0x000bdc00

000b8214 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8214:	b430      	push	{r4, r5}
   b8216:	460d      	mov	r5, r1
   b8218:	4611      	mov	r1, r2
   b821a:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b821c:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b821e:	6809      	ldr	r1, [r1, #0]
   b8220:	6828      	ldr	r0, [r5, #0]
   b8222:	e9d3 4300 	ldrd	r4, r3, [r3]
   b8226:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b8228:	bc30      	pop	{r4, r5}
   b822a:	4760      	bx	ip

000b822c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b822c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b822e:	b538      	push	{r3, r4, r5, lr}
   b8230:	4604      	mov	r4, r0
	switch (__op)
   b8232:	d102      	bne.n	b823a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b8234:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b8236:	6023      	str	r3, [r4, #0]
	}
   b8238:	e003      	b.n	b8242 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b823a:	2a02      	cmp	r2, #2
   b823c:	d003      	beq.n	b8246 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b823e:	2a03      	cmp	r2, #3
   b8240:	d00d      	beq.n	b825e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b8242:	2000      	movs	r0, #0
   b8244:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b8246:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b8248:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b824a:	f7fb ff24 	bl	b4096 <_Znwj>
   b824e:	4603      	mov	r3, r0
   b8250:	2800      	cmp	r0, #0
   b8252:	d0f0      	beq.n	b8236 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b8254:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8258:	e883 0003 	stmia.w	r3, {r0, r1}
   b825c:	e7eb      	b.n	b8236 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b825e:	6800      	ldr	r0, [r0, #0]
   b8260:	2800      	cmp	r0, #0
   b8262:	d0ee      	beq.n	b8242 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b8264:	2108      	movs	r1, #8
   b8266:	f7fb ff1c 	bl	b40a2 <_ZdlPvj>
   b826a:	e7ea      	b.n	b8242 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b826c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b826c:	b510      	push	{r4, lr}
      if (_M_manager)
   b826e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b8270:	4604      	mov	r4, r0
      if (_M_manager)
   b8272:	b113      	cbz	r3, b827a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b8274:	2203      	movs	r2, #3
   b8276:	4601      	mov	r1, r0
   b8278:	4798      	blx	r3
    }
   b827a:	4620      	mov	r0, r4
   b827c:	bd10      	pop	{r4, pc}

000b827e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b827e:	b510      	push	{r4, lr}
   b8280:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b8282:	3058      	adds	r0, #88	; 0x58
   b8284:	f7ff fff2 	bl	b826c <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b8288:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b828c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8290:	f001 bb26 	b.w	b98e0 <_ZN6StringD1Ev>

000b8294 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b8294:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b8296:	6843      	ldr	r3, [r0, #4]
   b8298:	3b01      	subs	r3, #1
    {
   b829a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b829c:	6043      	str	r3, [r0, #4]
   b829e:	b963      	cbnz	r3, b82ba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b82a0:	6803      	ldr	r3, [r0, #0]
   b82a2:	689b      	ldr	r3, [r3, #8]
   b82a4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b82a6:	68a3      	ldr	r3, [r4, #8]
   b82a8:	3b01      	subs	r3, #1
   b82aa:	60a3      	str	r3, [r4, #8]
   b82ac:	b92b      	cbnz	r3, b82ba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b82ae:	6823      	ldr	r3, [r4, #0]
   b82b0:	4620      	mov	r0, r4
   b82b2:	68db      	ldr	r3, [r3, #12]
    }
   b82b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b82b8:	4718      	bx	r3
    }
   b82ba:	bd10      	pop	{r4, pc}

000b82bc <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b82bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b82c0:	b2da      	uxtb	r2, r3
   b82c2:	2a09      	cmp	r2, #9
   b82c4:	d801      	bhi.n	b82ca <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b82c6:	4618      	mov	r0, r3
   b82c8:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b82ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b82ce:	2b05      	cmp	r3, #5
   b82d0:	d801      	bhi.n	b82d6 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b82d2:	3857      	subs	r0, #87	; 0x57
   b82d4:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b82d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b82da:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b82dc:	bf94      	ite	ls
   b82de:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b82e0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b82e4:	4770      	bx	lr
	...

000b82e8 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b82e8:	b510      	push	{r4, lr}
            locked_(false) {
   b82ea:	2300      	movs	r3, #0
   b82ec:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b82ee:	4b04      	ldr	r3, [pc, #16]	; (b8300 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b82f0:	4604      	mov	r4, r0
   b82f2:	6818      	ldr	r0, [r3, #0]
   b82f4:	f7ff fccc 	bl	b7c90 <os_mutex_recursive_lock>
        locked_ = true;
   b82f8:	2301      	movs	r3, #1
   b82fa:	7023      	strb	r3, [r4, #0]
    }
   b82fc:	4620      	mov	r0, r4
   b82fe:	bd10      	pop	{r4, pc}
   b8300:	2003e6c0 	.word	0x2003e6c0

000b8304 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b8304:	b510      	push	{r4, lr}
        if (locked_) {
   b8306:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b8308:	4604      	mov	r4, r0
        if (locked_) {
   b830a:	b11b      	cbz	r3, b8314 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b830c:	4b02      	ldr	r3, [pc, #8]	; (b8318 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b830e:	6818      	ldr	r0, [r3, #0]
   b8310:	f7ff fcc6 	bl	b7ca0 <os_mutex_recursive_unlock>
    }
   b8314:	4620      	mov	r0, r4
   b8316:	bd10      	pop	{r4, pc}
   b8318:	2003e6c0 	.word	0x2003e6c0

000b831c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b831c:	b082      	sub	sp, #8
   b831e:	4603      	mov	r3, r0
    address_ = addr;
   b8320:	6808      	ldr	r0, [r1, #0]
   b8322:	6849      	ldr	r1, [r1, #4]
   b8324:	466a      	mov	r2, sp
   b8326:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b8328:	466a      	mov	r2, sp
   b832a:	ca03      	ldmia	r2!, {r0, r1}
   b832c:	6018      	str	r0, [r3, #0]
}
   b832e:	4618      	mov	r0, r3
    address_ = addr.address_;
   b8330:	6059      	str	r1, [r3, #4]
}
   b8332:	b002      	add	sp, #8
   b8334:	4770      	bx	lr

000b8336 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b8336:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b8338:	7982      	ldrb	r2, [r0, #6]
   b833a:	798b      	ldrb	r3, [r1, #6]
   b833c:	429a      	cmp	r2, r3
   b833e:	d106      	bne.n	b834e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b8340:	2206      	movs	r2, #6
   b8342:	f003 f96f 	bl	bb624 <memcmp>
   b8346:	fab0 f080 	clz	r0, r0
   b834a:	0940      	lsrs	r0, r0, #5
}
   b834c:	bd08      	pop	{r3, pc}
    return false;
   b834e:	2000      	movs	r0, #0
   b8350:	e7fc      	b.n	b834c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b8352 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b8352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8356:	6003      	str	r3, [r0, #0]
   b8358:	8083      	strh	r3, [r0, #4]
}
   b835a:	2000      	movs	r0, #0
   b835c:	4770      	bx	lr

000b835e <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b835e:	b508      	push	{r3, lr}
   b8360:	4602      	mov	r2, r0
        : address_{} {
   b8362:	2100      	movs	r1, #0
   b8364:	6001      	str	r1, [r0, #0]
   b8366:	6041      	str	r1, [r0, #4]
    clear();
   b8368:	f7ff fff3 	bl	b8352 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b836c:	7191      	strb	r1, [r2, #6]
}
   b836e:	4610      	mov	r0, r2
   b8370:	bd08      	pop	{r3, pc}
	...

000b8374 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b8374:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b8376:	2301      	movs	r3, #1
   b8378:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b837a:	4b05      	ldr	r3, [pc, #20]	; (b8390 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b837c:	4602      	mov	r2, r0
   b837e:	f103 0110 	add.w	r1, r3, #16
   b8382:	f853 4b04 	ldr.w	r4, [r3], #4
   b8386:	f842 4b04 	str.w	r4, [r2], #4
   b838a:	428b      	cmp	r3, r1
   b838c:	d1f9      	bne.n	b8382 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b838e:	bd10      	pop	{r4, pc}
   b8390:	000bddae 	.word	0x000bddae

000b8394 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b8394:	b510      	push	{r4, lr}
    if (uuid128) {
   b8396:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b8398:	4604      	mov	r4, r0
    if (uuid128) {
   b839a:	b1b1      	cbz	r1, b83ca <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b839c:	2a01      	cmp	r2, #1
   b839e:	f101 0210 	add.w	r2, r1, #16
   b83a2:	d10a      	bne.n	b83ba <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b83a4:	4601      	mov	r1, r0
   b83a6:	f853 0b04 	ldr.w	r0, [r3], #4
   b83aa:	f841 0b04 	str.w	r0, [r1], #4
   b83ae:	4293      	cmp	r3, r2
   b83b0:	d1f9      	bne.n	b83a6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b83b2:	2301      	movs	r3, #1
   b83b4:	6123      	str	r3, [r4, #16]
}
   b83b6:	4620      	mov	r0, r4
   b83b8:	bd10      	pop	{r4, pc}
   b83ba:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b83bc:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b83c0:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b83c4:	429a      	cmp	r2, r3
   b83c6:	d1f9      	bne.n	b83bc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b83c8:	e7f3      	b.n	b83b2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b83ca:	2210      	movs	r2, #16
   b83cc:	f003 f962 	bl	bb694 <memset>
   b83d0:	e7f1      	b.n	b83b6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b83d2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b83d2:	b538      	push	{r3, r4, r5, lr}
   b83d4:	4604      	mov	r4, r0
   b83d6:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b83d8:	461a      	mov	r2, r3
   b83da:	f7ff ffdb 	bl	b8394 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b83de:	81a5      	strh	r5, [r4, #12]
}
   b83e0:	4620      	mov	r0, r4
   b83e2:	bd38      	pop	{r3, r4, r5, pc}

000b83e4 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b83e4:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b83e6:	6902      	ldr	r2, [r0, #16]
   b83e8:	b922      	cbnz	r2, b83f4 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b83ea:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b83ec:	3800      	subs	r0, #0
   b83ee:	bf18      	it	ne
   b83f0:	2001      	movne	r0, #1
}
   b83f2:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b83f4:	4902      	ldr	r1, [pc, #8]	; (b8400 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b83f6:	2210      	movs	r2, #16
   b83f8:	f003 f914 	bl	bb624 <memcmp>
   b83fc:	e7f6      	b.n	b83ec <_ZNK8particle7BleUuid7isValidEv+0x8>
   b83fe:	bf00      	nop
   b8400:	000bddce 	.word	0x000bddce

000b8404 <_ZNK8particle7BleUuid4typeEv>:
}
   b8404:	6900      	ldr	r0, [r0, #16]
   b8406:	4770      	bx	lr

000b8408 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b8408:	b538      	push	{r3, r4, r5, lr}
   b840a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b840c:	2214      	movs	r2, #20
   b840e:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b8410:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b8412:	f003 f93f 	bl	bb694 <memset>
    if (type_ == BleUuidType::SHORT) {
   b8416:	6923      	ldr	r3, [r4, #16]
   b8418:	b91b      	cbnz	r3, b8422 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b841a:	89a3      	ldrh	r3, [r4, #12]
   b841c:	802b      	strh	r3, [r5, #0]
}
   b841e:	4628      	mov	r0, r5
   b8420:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b8422:	2301      	movs	r3, #1
   b8424:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b8426:	4621      	mov	r1, r4
   b8428:	462b      	mov	r3, r5
   b842a:	f104 0210 	add.w	r2, r4, #16
   b842e:	f851 0b04 	ldr.w	r0, [r1], #4
   b8432:	f843 0b04 	str.w	r0, [r3], #4
   b8436:	4291      	cmp	r1, r2
   b8438:	d1f9      	bne.n	b842e <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b843a:	e7f0      	b.n	b841e <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b843c <_ZNK8particle7BleUuid7shortedEv>:
}
   b843c:	8980      	ldrh	r0, [r0, #12]
   b843e:	4770      	bx	lr

000b8440 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b8440:	4770      	bx	lr

000b8442 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b8442:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b8444:	6902      	ldr	r2, [r0, #16]
   b8446:	690b      	ldr	r3, [r1, #16]
   b8448:	429a      	cmp	r2, r3
   b844a:	d106      	bne.n	b845a <_ZNK8particle7BleUuideqERKS0_+0x18>
   b844c:	2210      	movs	r2, #16
   b844e:	f003 f8e9 	bl	bb624 <memcmp>
   b8452:	fab0 f080 	clz	r0, r0
   b8456:	0940      	lsrs	r0, r0, #5
}
   b8458:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b845a:	2000      	movs	r0, #0
   b845c:	e7fc      	b.n	b8458 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b8460 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b8460:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b8462:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b8466:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8468:	4b34      	ldr	r3, [pc, #208]	; (b853c <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b846a:	460c      	mov	r4, r1
   b846c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b846e:	4602      	mov	r2, r0
   b8470:	f103 0110 	add.w	r1, r3, #16
   b8474:	f853 0b04 	ldr.w	r0, [r3], #4
   b8478:	f842 0b04 	str.w	r0, [r2], #4
   b847c:	428b      	cmp	r3, r1
   b847e:	d1f9      	bne.n	b8474 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b8480:	b344      	cbz	r4, b84d4 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b8482:	2124      	movs	r1, #36	; 0x24
   b8484:	4620      	mov	r0, r4
   b8486:	f003 f969 	bl	bb75c <strnlen>
   b848a:	2804      	cmp	r0, #4
   b848c:	f04f 0500 	mov.w	r5, #0
   b8490:	d123      	bne.n	b84da <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b8492:	f8ad 5004 	strh.w	r5, [sp, #4]
   b8496:	af01      	add	r7, sp, #4
   b8498:	1ca5      	adds	r5, r4, #2
   b849a:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b849c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b84a0:	f7ff ff0c 	bl	b82bc <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b84a4:	f1b0 0800 	subs.w	r8, r0, #0
   b84a8:	db12      	blt.n	b84d0 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b84aa:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b84ae:	f7ff ff05 	bl	b82bc <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b84b2:	2800      	cmp	r0, #0
   b84b4:	db0c      	blt.n	b84d0 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b84b6:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b84b8:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b84bc:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b84be:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b84c2:	d1eb      	bne.n	b849c <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b84c4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b84c8:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b84ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b84ce:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b84d0:	2300      	movs	r3, #0
   b84d2:	6133      	str	r3, [r6, #16]
}
   b84d4:	b002      	add	sp, #8
   b84d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b84da:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b84de:	2124      	movs	r1, #36	; 0x24
   b84e0:	4620      	mov	r0, r4
   b84e2:	f003 f93b 	bl	bb75c <strnlen>
   b84e6:	42a8      	cmp	r0, r5
   b84e8:	d807      	bhi.n	b84fa <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b84ea:	4642      	mov	r2, r8
   b84ec:	2100      	movs	r1, #0
   b84ee:	4630      	mov	r0, r6
}
   b84f0:	b002      	add	sp, #8
   b84f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b84f6:	f003 b8cd 	b.w	bb694 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b84fa:	f1b8 0f00 	cmp.w	r8, #0
   b84fe:	d0e9      	beq.n	b84d4 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b8500:	5d60      	ldrb	r0, [r4, r5]
   b8502:	f7ff fedb 	bl	b82bc <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b8506:	0603      	lsls	r3, r0, #24
   b8508:	d415      	bmi.n	b8536 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b850a:	0100      	lsls	r0, r0, #4
   b850c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8510:	b2c7      	uxtb	r7, r0
   b8512:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b8516:	2124      	movs	r1, #36	; 0x24
   b8518:	4620      	mov	r0, r4
   b851a:	f003 f91f 	bl	bb75c <strnlen>
   b851e:	3501      	adds	r5, #1
   b8520:	42a8      	cmp	r0, r5
   b8522:	d908      	bls.n	b8536 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b8524:	5d60      	ldrb	r0, [r4, r5]
   b8526:	f7ff fec9 	bl	b82bc <_ZN8particle11hexToNibbleEc>
   b852a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b852c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b852e:	bfa4      	itt	ge
   b8530:	4338      	orrge	r0, r7
   b8532:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8536:	3501      	adds	r5, #1
   b8538:	e7d1      	b.n	b84de <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b853a:	bf00      	nop
   b853c:	000bddae 	.word	0x000bddae

000b8540 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b8540:	b513      	push	{r0, r1, r4, lr}
   b8542:	4604      	mov	r4, r0
   b8544:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b8546:	f7ff ff15 	bl	b8374 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b854a:	4620      	mov	r0, r4
   b854c:	9901      	ldr	r1, [sp, #4]
   b854e:	f7ff ff87 	bl	b8460 <_ZN8particle7BleUuid9constructEPKc>
}
   b8552:	4620      	mov	r0, r4
   b8554:	b002      	add	sp, #8
   b8556:	bd10      	pop	{r4, pc}

000b8558 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b8558:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b855a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b855e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b8560:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b8562:	8043      	strh	r3, [r0, #2]
   b8564:	220e      	movs	r2, #14
   b8566:	4629      	mov	r1, r5
   b8568:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b856a:	7105      	strb	r5, [r0, #4]
   b856c:	3006      	adds	r0, #6
   b856e:	f003 f891 	bl	bb694 <memset>
   b8572:	f104 0014 	add.w	r0, r4, #20
   b8576:	f7ff fefd 	bl	b8374 <_ZN8particle7BleUuidC1Ev>
   b857a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b857e:	f7ff fef9 	bl	b8374 <_ZN8particle7BleUuidC1Ev>
   b8582:	4904      	ldr	r1, [pc, #16]	; (b8594 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b8584:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8588:	f001 f9f5 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b858c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b858e:	4620      	mov	r0, r4
   b8590:	bd38      	pop	{r3, r4, r5, pc}
   b8592:	bf00      	nop
   b8594:	000bdbca 	.word	0x000bdbca

000b8598 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b8598:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b859a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b859e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b85a2:	4293      	cmp	r3, r2
   b85a4:	4618      	mov	r0, r3
   b85a6:	d006      	beq.n	b85b6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b85a8:	6804      	ldr	r4, [r0, #0]
   b85aa:	8824      	ldrh	r4, [r4, #0]
   b85ac:	428c      	cmp	r4, r1
   b85ae:	f103 0308 	add.w	r3, r3, #8
   b85b2:	d1f6      	bne.n	b85a2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b85b4:	bd10      	pop	{r4, pc}
        return nullptr;
   b85b6:	2000      	movs	r0, #0
   b85b8:	e7fc      	b.n	b85b4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b85bc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b85bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b85c0:	2600      	movs	r6, #0
   b85c2:	6006      	str	r6, [r0, #0]
   b85c4:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b85c6:	2028      	movs	r0, #40	; 0x28
   b85c8:	460c      	mov	r4, r1
   b85ca:	f7fb fd64 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b85ce:	1e05      	subs	r5, r0, #0
   b85d0:	f105 080c 	add.w	r8, r5, #12
   b85d4:	d00f      	beq.n	b85f6 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b85d6:	2301      	movs	r3, #1
   b85d8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b85dc:	4b08      	ldr	r3, [pc, #32]	; (b8600 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b85de:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b85e0:	4640      	mov	r0, r8
   b85e2:	f7ff fec7 	bl	b8374 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b85e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b85e8:	622e      	str	r6, [r5, #32]
   b85ea:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b85ee:	4646      	mov	r6, r8
   b85f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b85f2:	6823      	ldr	r3, [r4, #0]
   b85f4:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b85f6:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b85fa:	4638      	mov	r0, r7
   b85fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8600:	000bdd70 	.word	0x000bdd70

000b8604 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b8604:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8606:	2500      	movs	r5, #0
   b8608:	6005      	str	r5, [r0, #0]
   b860a:	4606      	mov	r6, r0
   b860c:	2030      	movs	r0, #48	; 0x30
   b860e:	f7fb fd42 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8612:	4604      	mov	r4, r0
   b8614:	b188      	cbz	r0, b863a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b8616:	2301      	movs	r3, #1
   b8618:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b861c:	4b09      	ldr	r3, [pc, #36]	; (b8644 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b861e:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b8620:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8624:	8183      	strh	r3, [r0, #12]
   b8626:	300e      	adds	r0, #14
   b8628:	f7ff fe99 	bl	b835e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b862c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b8630:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b8634:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b8638:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b863a:	6074      	str	r4, [r6, #4]
   b863c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b863e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b8640:	4630      	mov	r0, r6
   b8642:	bd70      	pop	{r4, r5, r6, pc}
   b8644:	000bdd8c 	.word	0x000bdd8c

000b8648 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b8648:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b864a:	460d      	mov	r5, r1
   b864c:	4604      	mov	r4, r0
    WiringBleLock lk;
   b864e:	a801      	add	r0, sp, #4
   b8650:	f7ff fe4a 	bl	b82e8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8654:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b8656:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b865a:	6023      	str	r3, [r4, #0]
   b865c:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b8660:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b8662:	a801      	add	r0, sp, #4
   b8664:	f7ff fe4e 	bl	b8304 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b8668:	4620      	mov	r0, r4
   b866a:	b003      	add	sp, #12
   b866c:	bd30      	pop	{r4, r5, pc}

000b866e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b866e:	b530      	push	{r4, r5, lr}
   b8670:	4605      	mov	r5, r0
   b8672:	b087      	sub	sp, #28
   b8674:	460c      	mov	r4, r1
    WiringBleLock lk;
   b8676:	a801      	add	r0, sp, #4
   b8678:	f7ff fe36 	bl	b82e8 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b867c:	682a      	ldr	r2, [r5, #0]
   b867e:	6823      	ldr	r3, [r4, #0]
   b8680:	8812      	ldrh	r2, [r2, #0]
   b8682:	881b      	ldrh	r3, [r3, #0]
   b8684:	429a      	cmp	r2, r3
   b8686:	d10d      	bne.n	b86a4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b8688:	4629      	mov	r1, r5
   b868a:	a802      	add	r0, sp, #8
   b868c:	f7ff ffdc 	bl	b8648 <_ZNK8particle13BlePeerDevice7addressEv>
   b8690:	4621      	mov	r1, r4
   b8692:	a804      	add	r0, sp, #16
   b8694:	f7ff ffd8 	bl	b8648 <_ZNK8particle13BlePeerDevice7addressEv>
   b8698:	a904      	add	r1, sp, #16
   b869a:	a802      	add	r0, sp, #8
   b869c:	f7ff fe4b 	bl	b8336 <_ZNK8particle10BleAddresseqERKS0_>
   b86a0:	4604      	mov	r4, r0
   b86a2:	b900      	cbnz	r0, b86a6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b86a4:	2400      	movs	r4, #0
    WiringBleLock lk;
   b86a6:	a801      	add	r0, sp, #4
   b86a8:	f7ff fe2c 	bl	b8304 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b86ac:	4620      	mov	r0, r4
   b86ae:	b007      	add	sp, #28
   b86b0:	bd30      	pop	{r4, r5, pc}
	...

000b86b4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b86b4:	b510      	push	{r4, lr}
   b86b6:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b86b8:	2064      	movs	r0, #100	; 0x64
   b86ba:	f7fb fcec 	bl	b4096 <_Znwj>
   b86be:	b168      	cbz	r0, b86dc <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b86c0:	2300      	movs	r3, #0
   b86c2:	e9c0 3300 	strd	r3, r3, [r0]
   b86c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b86ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b86ce:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b86d2:	6203      	str	r3, [r0, #32]
   b86d4:	62c3      	str	r3, [r0, #44]	; 0x2c
   b86d6:	63c3      	str	r3, [r0, #60]	; 0x3c
   b86d8:	64c3      	str	r3, [r0, #76]	; 0x4c
   b86da:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b86dc:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b86de:	b920      	cbnz	r0, b86ea <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b86e0:	4a0a      	ldr	r2, [pc, #40]	; (b870c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b86e2:	490b      	ldr	r1, [pc, #44]	; (b8710 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b86e4:	200a      	movs	r0, #10
   b86e6:	f7ff fc1b 	bl	b7f20 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b86ea:	2000      	movs	r0, #0
   b86ec:	f7ff fa80 	bl	b7bf0 <hal_ble_stack_init>
   b86f0:	b120      	cbz	r0, b86fc <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b86f2:	4a06      	ldr	r2, [pc, #24]	; (b870c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b86f4:	4907      	ldr	r1, [pc, #28]	; (b8714 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b86f6:	200a      	movs	r0, #10
   b86f8:	f7ff fc12 	bl	b7f20 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b86fc:	6821      	ldr	r1, [r4, #0]
   b86fe:	4806      	ldr	r0, [pc, #24]	; (b8718 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b8700:	2200      	movs	r2, #0
   b8702:	f7ff fab3 	bl	b7c6c <hal_ble_set_callback_on_periph_link_events>
}
   b8706:	4620      	mov	r0, r4
   b8708:	bd10      	pop	{r4, pc}
   b870a:	bf00      	nop
   b870c:	000b7cc1 	.word	0x000b7cc1
   b8710:	000bdc00 	.word	0x000bdc00
   b8714:	000bdc3e 	.word	0x000bdc3e
   b8718:	000b8c9d 	.word	0x000b8c9d

000b871c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b871c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b871e:	4c0a      	ldr	r4, [pc, #40]	; (b8748 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b8720:	7823      	ldrb	r3, [r4, #0]
   b8722:	f3bf 8f5b 	dmb	ish
   b8726:	07db      	lsls	r3, r3, #31
   b8728:	d40c      	bmi.n	b8744 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b872a:	4620      	mov	r0, r4
   b872c:	f7fb fcbb 	bl	b40a6 <__cxa_guard_acquire>
   b8730:	b140      	cbz	r0, b8744 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b8732:	4806      	ldr	r0, [pc, #24]	; (b874c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b8734:	f7ff ffbe 	bl	b86b4 <_ZN8particle14BleLocalDeviceC1Ev>
   b8738:	4620      	mov	r0, r4
   b873a:	f7fb fcb9 	bl	b40b0 <__cxa_guard_release>
   b873e:	4804      	ldr	r0, [pc, #16]	; (b8750 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b8740:	f002 ff66 	bl	bb610 <atexit>
    return instance;
}
   b8744:	4801      	ldr	r0, [pc, #4]	; (b874c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b8746:	bd10      	pop	{r4, pc}
   b8748:	2003e6b8 	.word	0x2003e6b8
   b874c:	2003e6c4 	.word	0x2003e6c4
   b8750:	000b8969 	.word	0x000b8969

000b8754 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b8754:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b8756:	6803      	ldr	r3, [r0, #0]
   b8758:	3b09      	subs	r3, #9
   b875a:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b875c:	b08d      	sub	sp, #52	; 0x34
   b875e:	4604      	mov	r4, r0
   b8760:	460d      	mov	r5, r1
    switch (event->type) {
   b8762:	d811      	bhi.n	b8788 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b8764:	f7ff ffda 	bl	b871c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b8768:	88a1      	ldrh	r1, [r4, #4]
   b876a:	6800      	ldr	r0, [r0, #0]
   b876c:	f7ff ff14 	bl	b8598 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b8770:	4603      	mov	r3, r0
   b8772:	b958      	cbnz	r0, b878c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b8774:	2220      	movs	r2, #32
   b8776:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b877a:	4a0b      	ldr	r2, [pc, #44]	; (b87a8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b877c:	9200      	str	r2, [sp, #0]
   b877e:	490b      	ldr	r1, [pc, #44]	; (b87ac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b8780:	aa04      	add	r2, sp, #16
   b8782:	2032      	movs	r0, #50	; 0x32
   b8784:	f7ff fbd4 	bl	b7f30 <log_message>
}
   b8788:	b00d      	add	sp, #52	; 0x34
   b878a:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b878c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b878e:	2a00      	cmp	r2, #0
   b8790:	d0fa      	beq.n	b8788 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b8792:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8796:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b879a:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b879e:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b87a0:	aa04      	add	r2, sp, #16
   b87a2:	a903      	add	r1, sp, #12
   b87a4:	47a0      	blx	r4
}
   b87a6:	e7ef      	b.n	b8788 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b87a8:	000bdc80 	.word	0x000bdc80
   b87ac:	000bdc17 	.word	0x000bdc17

000b87b0 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b87b0:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b87b2:	2000      	movs	r0, #0
   b87b4:	f7ff fa1c 	bl	b7bf0 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b87b8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b87bc:	bd08      	pop	{r3, pc}

000b87be <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b87be:	b919      	cbnz	r1, b87c8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b87c0:	460a      	mov	r2, r1
   b87c2:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b87c4:	f7ff ba1c 	b.w	b7c00 <hal_ble_gap_set_advertising_data>
   b87c8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b87cc:	2200      	movs	r2, #0
   b87ce:	e7f9      	b.n	b87c4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b87d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b87d0:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b87d2:	1e14      	subs	r4, r2, #0
   b87d4:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b87d6:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b87d8:	db02      	blt.n	b87e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b87da:	1862      	adds	r2, r4, r1
   b87dc:	429a      	cmp	r2, r3
   b87de:	dd00      	ble.n	b87e2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b87e0:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b87e2:	682a      	ldr	r2, [r5, #0]
   b87e4:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b87e6:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b87e8:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b87ea:	1a52      	subs	r2, r2, r1
   b87ec:	f002 ff38 	bl	bb660 <memmove>
    size_ -= n;
   b87f0:	686a      	ldr	r2, [r5, #4]
   b87f2:	1b12      	subs	r2, r2, r4
   b87f4:	606a      	str	r2, [r5, #4]
}
   b87f6:	bd38      	pop	{r3, r4, r5, pc}

000b87f8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b87f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b87fa:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b87fc:	4604      	mov	r4, r0
   b87fe:	460d      	mov	r5, r1
   b8800:	ab01      	add	r3, sp, #4
   b8802:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8806:	f7ff fce5 	bl	b81d4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b880a:	4602      	mov	r2, r0
   b880c:	b138      	cbz	r0, b881e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b880e:	9901      	ldr	r1, [sp, #4]
   b8810:	4620      	mov	r0, r4
   b8812:	f7ff ffdd 	bl	b87d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b8816:	4629      	mov	r1, r5
   b8818:	4620      	mov	r0, r4
   b881a:	f7ff ffed 	bl	b87f8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b881e:	b003      	add	sp, #12
   b8820:	bd30      	pop	{r4, r5, pc}

000b8822 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b8822:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b8824:	460c      	mov	r4, r1
   b8826:	b929      	cbnz	r1, b8834 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b8828:	460a      	mov	r2, r1
   b882a:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b882c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b8830:	f7ff b9ee 	b.w	b7c10 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b8834:	2101      	movs	r1, #1
   b8836:	4620      	mov	r0, r4
   b8838:	f7ff ffde 	bl	b87f8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b883c:	e9d4 0100 	ldrd	r0, r1, [r4]
   b8840:	2200      	movs	r2, #0
   b8842:	e7f3      	b.n	b882c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b8844 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b8844:	b538      	push	{r3, r4, r5, lr}
   b8846:	4604      	mov	r4, r0
   b8848:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b884a:	f7ff ffb8 	bl	b87be <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b884e:	2800      	cmp	r0, #0
   b8850:	db0a      	blt.n	b8868 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b8852:	4629      	mov	r1, r5
   b8854:	4620      	mov	r0, r4
   b8856:	f7ff ffe4 	bl	b8822 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b885a:	2800      	cmp	r0, #0
   b885c:	db04      	blt.n	b8868 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b885e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b8862:	2000      	movs	r0, #0
   b8864:	f7ff b9dc 	b.w	b7c20 <hal_ble_gap_start_advertising>
}
   b8868:	bd38      	pop	{r3, r4, r5, pc}
	...

000b886c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b886c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b886e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b8870:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b8872:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8874:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b8876:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8878:	f7fb fc0d 	bl	b4096 <_Znwj>
   b887c:	b118      	cbz	r0, b8886 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b887e:	682b      	ldr	r3, [r5, #0]
   b8880:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8882:	686b      	ldr	r3, [r5, #4]
   b8884:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b8886:	4b03      	ldr	r3, [pc, #12]	; (b8894 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b8888:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b888a:	4b03      	ldr	r3, [pc, #12]	; (b8898 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b888c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b888e:	60a3      	str	r3, [r4, #8]
      }
   b8890:	4620      	mov	r0, r4
   b8892:	bd38      	pop	{r3, r4, r5, pc}
   b8894:	000b8215 	.word	0x000b8215
   b8898:	000b822d 	.word	0x000b822d

000b889c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b889c:	680b      	ldr	r3, [r1, #0]
   b889e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b88a0:	b113      	cbz	r3, b88a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b88a2:	685a      	ldr	r2, [r3, #4]
   b88a4:	3201      	adds	r2, #1
   b88a6:	605a      	str	r2, [r3, #4]
      }
   b88a8:	4770      	bx	lr

000b88aa <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b88aa:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b88ac:	f851 3b04 	ldr.w	r3, [r1], #4
   b88b0:	4604      	mov	r4, r0
   b88b2:	f840 3b04 	str.w	r3, [r0], #4
   b88b6:	f7ff fff1 	bl	b889c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b88ba:	6823      	ldr	r3, [r4, #0]
   b88bc:	b90b      	cbnz	r3, b88c2 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b88be:	f7ff fc9f 	bl	b8200 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b88c2:	4620      	mov	r0, r4
   b88c4:	bd10      	pop	{r4, pc}

000b88c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b88c6:	b510      	push	{r4, lr}
   b88c8:	f851 3b04 	ldr.w	r3, [r1], #4
   b88cc:	4604      	mov	r4, r0
   b88ce:	f840 3b04 	str.w	r3, [r0], #4
   b88d2:	f7ff ffe3 	bl	b889c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b88d6:	4620      	mov	r0, r4
   b88d8:	bd10      	pop	{r4, pc}

000b88da <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b88da:	b510      	push	{r4, lr}
   b88dc:	f851 3b04 	ldr.w	r3, [r1], #4
   b88e0:	4604      	mov	r4, r0
   b88e2:	f840 3b04 	str.w	r3, [r0], #4
   b88e6:	f7ff ffd9 	bl	b889c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b88ea:	4620      	mov	r0, r4
   b88ec:	bd10      	pop	{r4, pc}

000b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b88ee:	b510      	push	{r4, lr}
   b88f0:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b88f2:	6800      	ldr	r0, [r0, #0]
   b88f4:	b108      	cbz	r0, b88fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b88f6:	f7ff fccd 	bl	b8294 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b88fa:	4620      	mov	r0, r4
   b88fc:	bd10      	pop	{r4, pc}

000b88fe <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b88fe:	b510      	push	{r4, lr}
   b8900:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8902:	3004      	adds	r0, #4
   b8904:	f7ff fff3 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8908:	4620      	mov	r0, r4
   b890a:	bd10      	pop	{r4, pc}

000b890c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b890c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b890e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8912:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8914:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8918:	42ae      	cmp	r6, r5
   b891a:	d004      	beq.n	b8926 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b891c:	1d28      	adds	r0, r5, #4
   b891e:	f7ff ffe6 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8922:	3508      	adds	r5, #8
   b8924:	e7f8      	b.n	b8918 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8926:	6820      	ldr	r0, [r4, #0]
   b8928:	f7ff fbb6 	bl	b8098 <free>
}
   b892c:	4620      	mov	r0, r4
   b892e:	bd70      	pop	{r4, r5, r6, pc}

000b8930 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8930:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8932:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8936:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8938:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b893c:	42ae      	cmp	r6, r5
   b893e:	d004      	beq.n	b894a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b8940:	1d28      	adds	r0, r5, #4
   b8942:	f7ff ffd4 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8946:	3508      	adds	r5, #8
   b8948:	e7f8      	b.n	b893c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b894a:	6820      	ldr	r0, [r4, #0]
   b894c:	f7ff fba4 	bl	b8098 <free>
}
   b8950:	4620      	mov	r0, r4
   b8952:	bd70      	pop	{r4, r5, r6, pc}

000b8954 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8954:	b510      	push	{r4, lr}
   b8956:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b8958:	3024      	adds	r0, #36	; 0x24
   b895a:	f7ff ffe9 	bl	b8930 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b895e:	f104 0018 	add.w	r0, r4, #24
   b8962:	f7ff ffd3 	bl	b890c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b8966:	bd10      	pop	{r4, pc}

000b8968 <__tcf_0>:
    static BleLocalDevice instance;
   b8968:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b896a:	4b17      	ldr	r3, [pc, #92]	; (b89c8 <__tcf_0+0x60>)
   b896c:	681c      	ldr	r4, [r3, #0]
   b896e:	b354      	cbz	r4, b89c6 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b8970:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8974:	f7ff fc7a 	bl	b826c <_ZNSt14_Function_baseD1Ev>
   b8978:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b897c:	f7ff fc76 	bl	b826c <_ZNSt14_Function_baseD1Ev>
   b8980:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8984:	f7ff fc72 	bl	b826c <_ZNSt14_Function_baseD1Ev>
   b8988:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b898c:	f7ff fc6e 	bl	b826c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b8990:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b8994:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8998:	42ae      	cmp	r6, r5
   b899a:	d004      	beq.n	b89a6 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b899c:	1d28      	adds	r0, r5, #4
   b899e:	f7ff ffa6 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b89a2:	3508      	adds	r5, #8
   b89a4:	e7f8      	b.n	b8998 <__tcf_0+0x30>
    ::free(ptr);
   b89a6:	69a0      	ldr	r0, [r4, #24]
   b89a8:	f7ff fb76 	bl	b8098 <free>
    ~BleLocalDeviceImpl() = default;
   b89ac:	f104 000c 	add.w	r0, r4, #12
   b89b0:	f7ff ffbe 	bl	b8930 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b89b4:	4620      	mov	r0, r4
   b89b6:	f7ff ffa9 	bl	b890c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b89ba:	4620      	mov	r0, r4
   b89bc:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b89be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b89c2:	f7fb bb6e 	b.w	b40a2 <_ZdlPvj>
   b89c6:	bd70      	pop	{r4, r5, r6, pc}
   b89c8:	2003e6c4 	.word	0x2003e6c4

000b89cc <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b89cc:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b89ce:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b89d0:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b89d4:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b89d8:	6803      	ldr	r3, [r0, #0]
   b89da:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b89dc:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b89de:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b89e0:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b89e2:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b89e4:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b89e6:	f7ff ff82 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b89ea:	b002      	add	sp, #8
   b89ec:	bd10      	pop	{r4, pc}

000b89ee <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b89ee:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b89f0:	b510      	push	{r4, lr}
      if (_M_empty())
   b89f2:	b90a      	cbnz	r2, b89f8 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b89f4:	f001 fe47 	bl	ba686 <_ZSt25__throw_bad_function_callv>
    }
   b89f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b89fc:	68c3      	ldr	r3, [r0, #12]
   b89fe:	4718      	bx	r3

000b8a00 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b8a00:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b8a02:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b8a04:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b8a06:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8a08:	dd03      	ble.n	b8a12 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b8a0a:	f7ff fb4d 	bl	b80a8 <realloc>
            if (!d) {
   b8a0e:	b918      	cbnz	r0, b8a18 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b8a10:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b8a12:	f7ff fb41 	bl	b8098 <free>
        T* d = nullptr;
   b8a16:	2000      	movs	r0, #0
        data_ = d;
   b8a18:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8a1a:	60a5      	str	r5, [r4, #8]
        return true;
   b8a1c:	2001      	movs	r0, #1
   b8a1e:	e7f7      	b.n	b8a10 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b8a20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b8a20:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b8a22:	6883      	ldr	r3, [r0, #8]
   b8a24:	428b      	cmp	r3, r1
   b8a26:	da02      	bge.n	b8a2e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b8a28:	f7ff ffea 	bl	b8a00 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b8a2c:	bd08      	pop	{r3, pc}
    return true;
   b8a2e:	2001      	movs	r0, #1
   b8a30:	e7fc      	b.n	b8a2c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b8a32 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8a36:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8a38:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8a3a:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8a3c:	4419      	add	r1, r3
   b8a3e:	6883      	ldr	r3, [r0, #8]
   b8a40:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8a42:	4604      	mov	r4, r0
   b8a44:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8a46:	dc12      	bgt.n	b8a6e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b8a48:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8a4a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8a4c:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8a4e:	1bd2      	subs	r2, r2, r7
   b8a50:	4631      	mov	r1, r6
   b8a52:	1970      	adds	r0, r6, r5
   b8a54:	f002 fe04 	bl	bb660 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b8a58:	462a      	mov	r2, r5
   b8a5a:	4641      	mov	r1, r8
   b8a5c:	4630      	mov	r0, r6
   b8a5e:	f002 fdf1 	bl	bb644 <memcpy>
    size_ += n;
   b8a62:	6863      	ldr	r3, [r4, #4]
   b8a64:	442b      	add	r3, r5
   b8a66:	6063      	str	r3, [r4, #4]
    return true;
   b8a68:	2001      	movs	r0, #1
}
   b8a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8a6e:	f7ff ffc7 	bl	b8a00 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8a72:	2800      	cmp	r0, #0
   b8a74:	d1e8      	bne.n	b8a48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b8a76:	e7f8      	b.n	b8a6a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b8a78 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8a7a:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8a7c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b8a80:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8a82:	4604      	mov	r4, r0
   b8a84:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8a86:	da0b      	bge.n	b8aa0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b8a88:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8a8a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8a8c:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8a8e:	1b52      	subs	r2, r2, r5
   b8a90:	1c48      	adds	r0, r1, #1
   b8a92:	f002 fde5 	bl	bb660 <memmove>
    new(p) T(std::move(value));
   b8a96:	557e      	strb	r6, [r7, r5]
    ++size_;
   b8a98:	6863      	ldr	r3, [r4, #4]
   b8a9a:	3301      	adds	r3, #1
   b8a9c:	6063      	str	r3, [r4, #4]
}
   b8a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8aa0:	3101      	adds	r1, #1
   b8aa2:	f7ff ffad 	bl	b8a00 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8aa6:	2800      	cmp	r0, #0
   b8aa8:	d1ee      	bne.n	b8a88 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b8aaa:	e7f8      	b.n	b8a9e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b8aac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8aac:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b8aae:	6841      	ldr	r1, [r0, #4]
   b8ab0:	f7ff bfe2 	b.w	b8a78 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b8ab4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8ab4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8ab8:	4604      	mov	r4, r0
   b8aba:	461d      	mov	r5, r3
   b8abc:	460f      	mov	r7, r1
   b8abe:	ab01      	add	r3, sp, #4
   b8ac0:	4690      	mov	r8, r2
   b8ac2:	460a      	mov	r2, r1
   b8ac4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8ac8:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b8acc:	f7ff fb82 	bl	b81d4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b8ad0:	1cae      	adds	r6, r5, #2
   b8ad2:	6863      	ldr	r3, [r4, #4]
   b8ad4:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b8ad6:	f1b9 0f00 	cmp.w	r9, #0
   b8ada:	d126      	bne.n	b8b2a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b8adc:	b328      	cbz	r0, b8b2a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8ade:	4433      	add	r3, r6
   b8ae0:	1a1b      	subs	r3, r3, r0
   b8ae2:	2bff      	cmp	r3, #255	; 0xff
   b8ae4:	d809      	bhi.n	b8afa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b8ae6:	9901      	ldr	r1, [sp, #4]
   b8ae8:	4620      	mov	r0, r4
   b8aea:	f7ff fe71 	bl	b87d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8aee:	6861      	ldr	r1, [r4, #4]
   b8af0:	4620      	mov	r0, r4
   b8af2:	4431      	add	r1, r6
   b8af4:	f7ff ff94 	bl	b8a20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8af8:	b918      	cbnz	r0, b8b02 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b8afa:	6860      	ldr	r0, [r4, #4]
}
   b8afc:	b003      	add	sp, #12
   b8afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b8b02:	1c6a      	adds	r2, r5, #1
   b8b04:	9901      	ldr	r1, [sp, #4]
   b8b06:	b2d2      	uxtb	r2, r2
   b8b08:	4620      	mov	r0, r4
   b8b0a:	f7ff ffb5 	bl	b8a78 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b8b0e:	9901      	ldr	r1, [sp, #4]
   b8b10:	463a      	mov	r2, r7
   b8b12:	3101      	adds	r1, #1
   b8b14:	4620      	mov	r0, r4
   b8b16:	f7ff ffaf 	bl	b8a78 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b8b1a:	9901      	ldr	r1, [sp, #4]
   b8b1c:	462b      	mov	r3, r5
   b8b1e:	4642      	mov	r2, r8
   b8b20:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b8b22:	4620      	mov	r0, r4
   b8b24:	f7ff ff85 	bl	b8a32 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b8b28:	e7e7      	b.n	b8afa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8b2a:	18f1      	adds	r1, r6, r3
   b8b2c:	29ff      	cmp	r1, #255	; 0xff
   b8b2e:	d8e4      	bhi.n	b8afa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8b30:	4620      	mov	r0, r4
   b8b32:	f7ff ff75 	bl	b8a20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8b36:	2800      	cmp	r0, #0
   b8b38:	d0df      	beq.n	b8afa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b8b3a:	1c69      	adds	r1, r5, #1
   b8b3c:	b2c9      	uxtb	r1, r1
   b8b3e:	4620      	mov	r0, r4
   b8b40:	f7ff ffb4 	bl	b8aac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b8b44:	4639      	mov	r1, r7
   b8b46:	4620      	mov	r0, r4
   b8b48:	f7ff ffb0 	bl	b8aac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b8b4c:	6861      	ldr	r1, [r4, #4]
   b8b4e:	462b      	mov	r3, r5
   b8b50:	4642      	mov	r2, r8
   b8b52:	e7e6      	b.n	b8b22 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b8b54 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8b54:	b430      	push	{r4, r5}
   b8b56:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b8b5a:	b11a      	cbz	r2, b8b64 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b8b5c:	9502      	str	r5, [sp, #8]
}
   b8b5e:	bc30      	pop	{r4, r5}
   b8b60:	f7ff bfa8 	b.w	b8ab4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b8b64:	6840      	ldr	r0, [r0, #4]
}
   b8b66:	bc30      	pop	{r4, r5}
   b8b68:	4770      	bx	lr

000b8b6a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b8b6a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b8b6c:	2300      	movs	r3, #0
   b8b6e:	e9c0 3300 	strd	r3, r3, [r0]
   b8b72:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8b74:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8b76:	9300      	str	r3, [sp, #0]
   b8b78:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8b7a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8b7e:	4619      	mov	r1, r3
   b8b80:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b8b84:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8b86:	f7ff ffe5 	bl	b8b54 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b8b8a:	4620      	mov	r0, r4
   b8b8c:	b004      	add	sp, #16
   b8b8e:	bd10      	pop	{r4, pc}

000b8b90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8b90:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8b94:	4604      	mov	r4, r0
   b8b96:	460d      	mov	r5, r1
   b8b98:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8b9a:	d914      	bls.n	b8bc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8b9c:	4290      	cmp	r0, r2
   b8b9e:	d213      	bcs.n	b8bc8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8ba0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8ba4:	1a75      	subs	r5, r6, r1
   b8ba6:	f1a1 0708 	sub.w	r7, r1, #8
   b8baa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8bac:	42b7      	cmp	r7, r6
   b8bae:	d018      	beq.n	b8be2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8bb0:	b11c      	cbz	r4, b8bba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8bb2:	4631      	mov	r1, r6
   b8bb4:	4620      	mov	r0, r4
   b8bb6:	f7ff fe90 	bl	b88da <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b8bba:	1d30      	adds	r0, r6, #4
   b8bbc:	f7ff fe97 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8bc0:	3e08      	subs	r6, #8
   b8bc2:	3c08      	subs	r4, #8
   b8bc4:	e7f2      	b.n	b8bac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8bc6:	d00c      	beq.n	b8be2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8bc8:	42b5      	cmp	r5, r6
   b8bca:	d00a      	beq.n	b8be2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8bcc:	b11c      	cbz	r4, b8bd6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8bce:	4629      	mov	r1, r5
   b8bd0:	4620      	mov	r0, r4
   b8bd2:	f7ff fe82 	bl	b88da <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8bd6:	1d28      	adds	r0, r5, #4
   b8bd8:	f7ff fe89 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8bdc:	3508      	adds	r5, #8
   b8bde:	3408      	adds	r4, #8
   b8be0:	e7f2      	b.n	b8bc8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8be4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8be6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8be8:	6846      	ldr	r6, [r0, #4]
   b8bea:	4668      	mov	r0, sp
   b8bec:	f7ff fe75 	bl	b88da <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8bf0:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b8bf4:	429f      	cmp	r7, r3
   b8bf6:	db12      	blt.n	b8c1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b8bf8:	3701      	adds	r7, #1
        if (n > 0) {
   b8bfa:	2f00      	cmp	r7, #0
   b8bfc:	dd29      	ble.n	b8c52 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b8bfe:	00f8      	lsls	r0, r7, #3
   b8c00:	f7ff fa42 	bl	b8088 <malloc>
            if (!d) {
   b8c04:	4605      	mov	r5, r0
   b8c06:	b1f0      	cbz	r0, b8c46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b8c08:	e9d4 1200 	ldrd	r1, r2, [r4]
   b8c0c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8c10:	f7ff ffbe 	bl	b8b90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8c14:	6820      	ldr	r0, [r4, #0]
   b8c16:	f7ff fa3f 	bl	b8098 <free>
        data_ = d;
   b8c1a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b8c1c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b8c1e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8c20:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8c22:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b8c26:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8c2a:	4631      	mov	r1, r6
   b8c2c:	f106 0008 	add.w	r0, r6, #8
   b8c30:	f7ff ffae 	bl	b8b90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8c34:	b11e      	cbz	r6, b8c3e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b8c36:	4669      	mov	r1, sp
   b8c38:	4630      	mov	r0, r6
   b8c3a:	f7ff fe4e 	bl	b88da <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b8c3e:	6863      	ldr	r3, [r4, #4]
   b8c40:	3301      	adds	r3, #1
   b8c42:	6063      	str	r3, [r4, #4]
    return true;
   b8c44:	2501      	movs	r5, #1
   b8c46:	a801      	add	r0, sp, #4
   b8c48:	f7ff fe51 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8c4c:	4628      	mov	r0, r5
   b8c4e:	b003      	add	sp, #12
   b8c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b8c52:	2500      	movs	r5, #0
   b8c54:	e7de      	b.n	b8c14 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b8c56 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b8c58:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8c5c:	4605      	mov	r5, r0
   b8c5e:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b8c60:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b8c64:	42a6      	cmp	r6, r4
   b8c66:	d005      	beq.n	b8c74 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b8c68:	4639      	mov	r1, r7
   b8c6a:	4620      	mov	r0, r4
   b8c6c:	f7ff fcff 	bl	b866e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b8c70:	b108      	cbz	r0, b8c76 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b8c72:	b914      	cbnz	r4, b8c7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b8c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b8c76:	3408      	adds	r4, #8
   b8c78:	e7f4      	b.n	b8c64 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b8c7a:	1d20      	adds	r0, r4, #4
   b8c7c:	f7ff fe37 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b8c80:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8c84:	f104 0108 	add.w	r1, r4, #8
   b8c88:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8c8c:	4620      	mov	r0, r4
   b8c8e:	f7ff ff7f 	bl	b8b90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b8c92:	686b      	ldr	r3, [r5, #4]
   b8c94:	3b01      	subs	r3, #1
   b8c96:	606b      	str	r3, [r5, #4]
    return true;
   b8c98:	e7ec      	b.n	b8c74 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b8c9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8ca0:	4605      	mov	r5, r0
   b8ca2:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b8ca4:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8ca6:	460c      	mov	r4, r1
        WiringBleLock lk;
   b8ca8:	f7ff fb1e 	bl	b82e8 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b8cac:	682e      	ldr	r6, [r5, #0]
   b8cae:	1ef3      	subs	r3, r6, #3
   b8cb0:	2b0d      	cmp	r3, #13
   b8cb2:	d83c      	bhi.n	b8d2e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8cb4:	e8df f013 	tbh	[pc, r3, lsl #1]
   b8cb8:	0053000e 	.word	0x0053000e
   b8cbc:	00d1003b 	.word	0x00d1003b
   b8cc0:	003b003b 	.word	0x003b003b
   b8cc4:	003b003b 	.word	0x003b003b
   b8cc8:	009b003b 	.word	0x009b003b
   b8ccc:	009b009b 	.word	0x009b009b
   b8cd0:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b8cd4:	a804      	add	r0, sp, #16
   b8cd6:	f7ff fc95 	bl	b8604 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b8cda:	9b04      	ldr	r3, [sp, #16]
   b8cdc:	89aa      	ldrh	r2, [r5, #12]
   b8cde:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b8ce0:	6869      	ldr	r1, [r5, #4]
   b8ce2:	9804      	ldr	r0, [sp, #16]
   b8ce4:	3108      	adds	r1, #8
   b8ce6:	3002      	adds	r0, #2
   b8ce8:	f7ff fb18 	bl	b831c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b8cec:	a904      	add	r1, sp, #16
   b8cee:	a806      	add	r0, sp, #24
   b8cf0:	f7ff fdf3 	bl	b88da <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b8cf4:	a906      	add	r1, sp, #24
   b8cf6:	f104 0018 	add.w	r0, r4, #24
   b8cfa:	f7ff ff73 	bl	b8be4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b8cfe:	4605      	mov	r5, r0
   b8d00:	a807      	add	r0, sp, #28
   b8d02:	f7ff fdf4 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8d06:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b8d08:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b8d0a:	b9b5      	cbnz	r5, b8d3a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b8d0c:	4b5d      	ldr	r3, [pc, #372]	; (b8e84 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b8d0e:	495e      	ldr	r1, [pc, #376]	; (b8e88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8d10:	9300      	str	r3, [sp, #0]
   b8d12:	2032      	movs	r0, #50	; 0x32
   b8d14:	462b      	mov	r3, r5
   b8d16:	aa06      	add	r2, sp, #24
   b8d18:	9507      	str	r5, [sp, #28]
   b8d1a:	f7ff f909 	bl	b7f30 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b8d1e:	9b04      	ldr	r3, [sp, #16]
   b8d20:	4629      	mov	r1, r5
   b8d22:	8818      	ldrh	r0, [r3, #0]
   b8d24:	f7fe ff84 	bl	b7c30 <hal_ble_gap_disconnect>
   b8d28:	a805      	add	r0, sp, #20
   b8d2a:	f7ff fde0 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b8d2e:	a803      	add	r0, sp, #12
   b8d30:	f7ff fae8 	bl	b8304 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b8d34:	b00e      	add	sp, #56	; 0x38
   b8d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b8d3a:	4a54      	ldr	r2, [pc, #336]	; (b8e8c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b8d3c:	9200      	str	r2, [sp, #0]
   b8d3e:	2300      	movs	r3, #0
   b8d40:	4951      	ldr	r1, [pc, #324]	; (b8e88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8d42:	9307      	str	r3, [sp, #28]
   b8d44:	aa06      	add	r2, sp, #24
   b8d46:	2001      	movs	r0, #1
   b8d48:	f7ff f8f2 	bl	b7f30 <log_message>
                if (impl->connectedCallback_) {
   b8d4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b8d4e:	2b00      	cmp	r3, #0
   b8d50:	d0ea      	beq.n	b8d28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b8d52:	a904      	add	r1, sp, #16
   b8d54:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8d58:	f7ff fe49 	bl	b89ee <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b8d5c:	e7e4      	b.n	b8d28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8d5e:	89a9      	ldrh	r1, [r5, #12]
   b8d60:	4620      	mov	r0, r4
   b8d62:	f7ff fc19 	bl	b8598 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8d66:	4606      	mov	r6, r0
   b8d68:	2800      	cmp	r0, #0
   b8d6a:	d0e0      	beq.n	b8d2e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b8d6c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b8d6e:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b8d72:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8d76:	8029      	strh	r1, [r5, #0]
   b8d78:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b8d7c:	429a      	cmp	r2, r3
   b8d7e:	d003      	beq.n	b8d88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b8d80:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b8d84:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b8d86:	e7f9      	b.n	b8d7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b8d88:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b8d8c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8d90:	45b8      	cmp	r8, r7
   b8d92:	d004      	beq.n	b8d9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b8d94:	1d38      	adds	r0, r7, #4
   b8d96:	f7ff fdaa 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8d9a:	3708      	adds	r7, #8
   b8d9c:	e7f8      	b.n	b8d90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b8d9e:	2300      	movs	r3, #0
   b8da0:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b8da2:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b8da6:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8daa:	45b8      	cmp	r8, r7
   b8dac:	d004      	beq.n	b8db8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b8dae:	1d38      	adds	r0, r7, #4
   b8db0:	f7ff fd9d 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8db4:	3708      	adds	r7, #8
   b8db6:	e7f8      	b.n	b8daa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b8db8:	2300      	movs	r3, #0
   b8dba:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b8dbc:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b8dbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8dc0:	b123      	cbz	r3, b8dcc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b8dc2:	4631      	mov	r1, r6
   b8dc4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8dc8:	f7ff fe11 	bl	b89ee <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b8dcc:	2300      	movs	r3, #0
   b8dce:	2220      	movs	r2, #32
   b8dd0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b8dd4:	4a2e      	ldr	r2, [pc, #184]	; (b8e90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b8dd6:	9200      	str	r2, [sp, #0]
   b8dd8:	492b      	ldr	r1, [pc, #172]	; (b8e88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8dda:	aa06      	add	r2, sp, #24
   b8ddc:	2001      	movs	r0, #1
   b8dde:	f7ff f8a7 	bl	b7f30 <log_message>
                    impl->peers_.removeOne(*peer);
   b8de2:	4631      	mov	r1, r6
   b8de4:	f104 0018 	add.w	r0, r4, #24
   b8de8:	f7ff ff35 	bl	b8c56 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b8dec:	e79f      	b.n	b8d2e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8dee:	89a9      	ldrh	r1, [r5, #12]
   b8df0:	4620      	mov	r0, r4
   b8df2:	f7ff fbd1 	bl	b8598 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8df6:	2800      	cmp	r0, #0
   b8df8:	d099      	beq.n	b8d2e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b8dfa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b8dfc:	2b00      	cmp	r3, #0
   b8dfe:	d096      	beq.n	b8d2e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b8e00:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8e02:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b8e04:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8e08:	d001      	beq.n	b8e0e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b8e0a:	2e10      	cmp	r6, #16
   b8e0c:	d117      	bne.n	b8e3e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b8e0e:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b8e10:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b8e12:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b8e14:	2506      	movs	r5, #6
                        };
   b8e16:	f88d 3015 	strb.w	r3, [sp, #21]
   b8e1a:	9104      	str	r1, [sp, #16]
   b8e1c:	f88d 2014 	strb.w	r2, [sp, #20]
   b8e20:	9006      	str	r0, [sp, #24]
   b8e22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b8e26:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b8e28:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b8e2c:	9508      	str	r5, [sp, #32]
   b8e2e:	e883 0003 	stmia.w	r3, {r0, r1}
   b8e32:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b8e34:	a906      	add	r1, sp, #24
   b8e36:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8e3a:	4798      	blx	r3
   b8e3c:	e777      	b.n	b8d2e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b8e3e:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8e40:	bf01      	itttt	eq
   b8e42:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b8e44:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8e46:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b8e4a:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b8e4c:	bf0f      	iteee	eq
   b8e4e:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b8e52:	461a      	movne	r2, r3
   b8e54:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b8e56:	461d      	movne	r5, r3
   b8e58:	e7dd      	b.n	b8e16 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8e5a:	89a9      	ldrh	r1, [r5, #12]
   b8e5c:	4620      	mov	r0, r4
   b8e5e:	f7ff fb9b 	bl	b8598 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b8e62:	4601      	mov	r1, r0
   b8e64:	2800      	cmp	r0, #0
   b8e66:	f43f af62 	beq.w	b8d2e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8e6a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b8e6c:	2b00      	cmp	r3, #0
   b8e6e:	f43f af5e 	beq.w	b8d2e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b8e72:	686b      	ldr	r3, [r5, #4]
   b8e74:	9306      	str	r3, [sp, #24]
   b8e76:	aa06      	add	r2, sp, #24
   b8e78:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b8e7a:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8e7e:	4798      	blx	r3
   b8e80:	e755      	b.n	b8d2e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8e82:	bf00      	nop
   b8e84:	000bdc98 	.word	0x000bdc98
   b8e88:	000bdc17 	.word	0x000bdc17
   b8e8c:	000bdcbe 	.word	0x000bdcbe
   b8e90:	000bdcdb 	.word	0x000bdcdb

000b8e94 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b8e94:	b513      	push	{r0, r1, r4, lr}
   b8e96:	460b      	mov	r3, r1
   b8e98:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8e9a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8e9e:	466c      	mov	r4, sp
   b8ea0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b8ea4:	e893 0003 	ldmia.w	r3, {r0, r1}
   b8ea8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b8eac:	e894 0003 	ldmia.w	r4, {r0, r1}
   b8eb0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b8eb4:	b002      	add	sp, #8
   b8eb6:	bd10      	pop	{r4, pc}

000b8eb8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b8eb8:	b538      	push	{r3, r4, r5, lr}
   b8eba:	4605      	mov	r5, r0
   b8ebc:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b8ebe:	f7ff ffe9 	bl	b8e94 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8ec2:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8ec4:	68a2      	ldr	r2, [r4, #8]
   b8ec6:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8ec8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8eca:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8ecc:	68e2      	ldr	r2, [r4, #12]
   b8ece:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8ed0:	60e3      	str	r3, [r4, #12]
      }
   b8ed2:	bd38      	pop	{r3, r4, r5, pc}

000b8ed4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b8ed4:	b570      	push	{r4, r5, r6, lr}
   b8ed6:	4604      	mov	r4, r0
   b8ed8:	b08c      	sub	sp, #48	; 0x30
   b8eda:	460e      	mov	r6, r1
   b8edc:	9201      	str	r2, [sp, #4]
   b8ede:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b8ee0:	f7ff fb3a 	bl	b8558 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b8ee4:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b8ee6:	9901      	ldr	r1, [sp, #4]
   b8ee8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8eec:	f000 fd8b 	bl	b9a06 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b8ef0:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b8ef4:	b1cd      	cbz	r5, b8f2a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b8ef6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8ef8:	9502      	str	r5, [sp, #8]
   b8efa:	a902      	add	r1, sp, #8
   b8efc:	a804      	add	r0, sp, #16
   b8efe:	9303      	str	r3, [sp, #12]
   b8f00:	f7ff fcb4 	bl	b886c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b8f04:	2300      	movs	r3, #0
	__x.swap(*this);
   b8f06:	a908      	add	r1, sp, #32
   b8f08:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b8f0a:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b8f0c:	f7ff ffd4 	bl	b8eb8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b8f10:	4631      	mov	r1, r6
   b8f12:	a808      	add	r0, sp, #32
   b8f14:	f7ff ffd0 	bl	b8eb8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b8f18:	a808      	add	r0, sp, #32
   b8f1a:	f7ff f9a7 	bl	b826c <_ZNSt14_Function_baseD1Ev>
   b8f1e:	a804      	add	r0, sp, #16
   b8f20:	f7ff f9a4 	bl	b826c <_ZNSt14_Function_baseD1Ev>
    }
   b8f24:	4620      	mov	r0, r4
   b8f26:	b00c      	add	sp, #48	; 0x30
   b8f28:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b8f2a:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b8f2c:	e7ea      	b.n	b8f04 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b8f30 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b8f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8f34:	b087      	sub	sp, #28
   b8f36:	461d      	mov	r5, r3
   b8f38:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b8f3c:	4680      	mov	r8, r0
   b8f3e:	468b      	mov	fp, r1
   b8f40:	4692      	mov	sl, r2
   b8f42:	9912      	ldr	r1, [sp, #72]	; 0x48
   b8f44:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8f46:	2200      	movs	r2, #0
   b8f48:	2068      	movs	r0, #104	; 0x68
   b8f4a:	9102      	str	r1, [sp, #8]
   b8f4c:	9204      	str	r2, [sp, #16]
   b8f4e:	f7fb f8a2 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8f52:	1e06      	subs	r6, r0, #0
   b8f54:	f106 090c 	add.w	r9, r6, #12
   b8f58:	d018      	beq.n	b8f8c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b8f5a:	2201      	movs	r2, #1
	: _M_impl(__a)
   b8f5c:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b8f5e:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b8f62:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b8f64:	4a15      	ldr	r2, [pc, #84]	; (b8fbc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b8f66:	f847 2b20 	str.w	r2, [r7], #32
   b8f6a:	9b03      	ldr	r3, [sp, #12]
   b8f6c:	9100      	str	r1, [sp, #0]
   b8f6e:	465a      	mov	r2, fp
   b8f70:	4651      	mov	r1, sl
   b8f72:	4648      	mov	r0, r9
   b8f74:	f7ff ffae 	bl	b8ed4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b8f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f7a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b8f7c:	682b      	ldr	r3, [r5, #0]
   b8f7e:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b8f80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8f82:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b8f86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8f88:	6823      	ldr	r3, [r4, #0]
   b8f8a:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b8f8c:	a904      	add	r1, sp, #16
   b8f8e:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b8f90:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b8f94:	f7ff fd1a 	bl	b89cc <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b8f98:	a805      	add	r0, sp, #20
   b8f9a:	f7ff fca8 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b8f9e:	f8d8 3000 	ldr.w	r3, [r8]
   b8fa2:	b93b      	cbnz	r3, b8fb4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b8fa4:	4a06      	ldr	r2, [pc, #24]	; (b8fc0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b8fa6:	4907      	ldr	r1, [pc, #28]	; (b8fc4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b8fa8:	200a      	movs	r0, #10
}
   b8faa:	b007      	add	sp, #28
   b8fac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b8fb0:	f7fe bfb6 	b.w	b7f20 <panic_>
}
   b8fb4:	b007      	add	sp, #28
   b8fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8fba:	bf00      	nop
   b8fbc:	000bdd54 	.word	0x000bdd54
   b8fc0:	000b7cc1 	.word	0x000b7cc1
   b8fc4:	000bdc00 	.word	0x000bdc00

000b8fc8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8fc8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8fca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8fcc:	4604      	mov	r4, r0
   b8fce:	460d      	mov	r5, r1
   b8fd0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8fd2:	d914      	bls.n	b8ffe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8fd4:	4290      	cmp	r0, r2
   b8fd6:	d213      	bcs.n	b9000 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8fd8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8fdc:	1a75      	subs	r5, r6, r1
   b8fde:	f1a1 0708 	sub.w	r7, r1, #8
   b8fe2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8fe4:	42b7      	cmp	r7, r6
   b8fe6:	d018      	beq.n	b901a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8fe8:	b11c      	cbz	r4, b8ff2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8fea:	4631      	mov	r1, r6
   b8fec:	4620      	mov	r0, r4
   b8fee:	f7ff fc6a 	bl	b88c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8ff2:	1d30      	adds	r0, r6, #4
   b8ff4:	f7ff fc7b 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8ff8:	3e08      	subs	r6, #8
   b8ffa:	3c08      	subs	r4, #8
   b8ffc:	e7f2      	b.n	b8fe4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8ffe:	d00c      	beq.n	b901a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b9000:	42b5      	cmp	r5, r6
   b9002:	d00a      	beq.n	b901a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9004:	b11c      	cbz	r4, b900e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9006:	4629      	mov	r1, r5
   b9008:	4620      	mov	r0, r4
   b900a:	f7ff fc5c 	bl	b88c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b900e:	1d28      	adds	r0, r5, #4
   b9010:	f7ff fc6d 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9014:	3508      	adds	r5, #8
   b9016:	3408      	adds	r4, #8
   b9018:	e7f2      	b.n	b9000 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b901a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b901c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b901c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b901e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9020:	4605      	mov	r5, r0
        if (n > 0) {
   b9022:	dd11      	ble.n	b9048 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9024:	00f0      	lsls	r0, r6, #3
   b9026:	f7ff f82f 	bl	b8088 <malloc>
            if (!d) {
   b902a:	4604      	mov	r4, r0
   b902c:	b158      	cbz	r0, b9046 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b902e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9032:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9036:	f7ff ffc7 	bl	b8fc8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b903a:	6828      	ldr	r0, [r5, #0]
   b903c:	f7ff f82c 	bl	b8098 <free>
        data_ = d;
   b9040:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9042:	60ae      	str	r6, [r5, #8]
        return true;
   b9044:	2001      	movs	r0, #1
    }
   b9046:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9048:	2400      	movs	r4, #0
   b904a:	e7f6      	b.n	b903a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b904c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b904c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b904e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b9050:	6845      	ldr	r5, [r0, #4]
   b9052:	4668      	mov	r0, sp
   b9054:	f7ff fc37 	bl	b88c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9058:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b905c:	4299      	cmp	r1, r3
   b905e:	da10      	bge.n	b9082 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b9060:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9062:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9064:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b9068:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b906c:	4629      	mov	r1, r5
   b906e:	f105 0008 	add.w	r0, r5, #8
   b9072:	f7ff ffa9 	bl	b8fc8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9076:	b98d      	cbnz	r5, b909c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b9078:	6863      	ldr	r3, [r4, #4]
   b907a:	3301      	adds	r3, #1
   b907c:	6063      	str	r3, [r4, #4]
    return true;
   b907e:	2601      	movs	r6, #1
   b9080:	e006      	b.n	b9090 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9082:	3101      	adds	r1, #1
   b9084:	4620      	mov	r0, r4
   b9086:	f7ff ffc9 	bl	b901c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b908a:	4606      	mov	r6, r0
   b908c:	2800      	cmp	r0, #0
   b908e:	d1e7      	bne.n	b9060 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b9090:	a801      	add	r0, sp, #4
   b9092:	f7ff fc2c 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9096:	4630      	mov	r0, r6
   b9098:	b002      	add	sp, #8
   b909a:	bd70      	pop	{r4, r5, r6, pc}
   b909c:	4669      	mov	r1, sp
   b909e:	4628      	mov	r0, r5
   b90a0:	f7ff fc11 	bl	b88c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b90a4:	e7e8      	b.n	b9078 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b90a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b90a6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b90a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b90aa:	4604      	mov	r4, r0
   b90ac:	460d      	mov	r5, r1
   b90ae:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b90b0:	d914      	bls.n	b90dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b90b2:	4290      	cmp	r0, r2
   b90b4:	d213      	bcs.n	b90de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b90b6:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b90ba:	1a75      	subs	r5, r6, r1
   b90bc:	f1a1 0708 	sub.w	r7, r1, #8
   b90c0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b90c2:	42b7      	cmp	r7, r6
   b90c4:	d018      	beq.n	b90f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b90c6:	b11c      	cbz	r4, b90d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b90c8:	4631      	mov	r1, r6
   b90ca:	4620      	mov	r0, r4
   b90cc:	f7ff fbed 	bl	b88aa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b90d0:	1d30      	adds	r0, r6, #4
   b90d2:	f7ff fc0c 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b90d6:	3e08      	subs	r6, #8
   b90d8:	3c08      	subs	r4, #8
   b90da:	e7f2      	b.n	b90c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b90dc:	d00c      	beq.n	b90f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b90de:	42b5      	cmp	r5, r6
   b90e0:	d00a      	beq.n	b90f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b90e2:	b11c      	cbz	r4, b90ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b90e4:	4629      	mov	r1, r5
   b90e6:	4620      	mov	r0, r4
   b90e8:	f7ff fbdf 	bl	b88aa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b90ec:	1d28      	adds	r0, r5, #4
   b90ee:	f7ff fbfe 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b90f2:	3508      	adds	r5, #8
   b90f4:	3408      	adds	r4, #8
   b90f6:	e7f2      	b.n	b90de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b90f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b90fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b90fa:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b90fc:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b90fe:	4605      	mov	r5, r0
        if (n > 0) {
   b9100:	dd11      	ble.n	b9126 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9102:	00f0      	lsls	r0, r6, #3
   b9104:	f7fe ffc0 	bl	b8088 <malloc>
            if (!d) {
   b9108:	4604      	mov	r4, r0
   b910a:	b158      	cbz	r0, b9124 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b910c:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9110:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9114:	f7ff ffc7 	bl	b90a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9118:	6828      	ldr	r0, [r5, #0]
   b911a:	f7fe ffbd 	bl	b8098 <free>
        data_ = d;
   b911e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9120:	60ae      	str	r6, [r5, #8]
        return true;
   b9122:	2001      	movs	r0, #1
    }
   b9124:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9126:	2400      	movs	r4, #0
   b9128:	e7f6      	b.n	b9118 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b912a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b912a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b912c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b912e:	6845      	ldr	r5, [r0, #4]
   b9130:	4668      	mov	r0, sp
   b9132:	f7ff fbba 	bl	b88aa <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9136:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b913a:	4299      	cmp	r1, r3
   b913c:	da10      	bge.n	b9160 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b913e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9140:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9142:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b9146:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b914a:	4629      	mov	r1, r5
   b914c:	f105 0008 	add.w	r0, r5, #8
   b9150:	f7ff ffa9 	bl	b90a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9154:	b98d      	cbnz	r5, b917a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b9156:	6863      	ldr	r3, [r4, #4]
   b9158:	3301      	adds	r3, #1
   b915a:	6063      	str	r3, [r4, #4]
    return true;
   b915c:	2601      	movs	r6, #1
   b915e:	e006      	b.n	b916e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9160:	3101      	adds	r1, #1
   b9162:	4620      	mov	r0, r4
   b9164:	f7ff ffc9 	bl	b90fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9168:	4606      	mov	r6, r0
   b916a:	2800      	cmp	r0, #0
   b916c:	d1e7      	bne.n	b913e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b916e:	a801      	add	r0, sp, #4
   b9170:	f7ff fbbd 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9174:	4630      	mov	r0, r6
   b9176:	b002      	add	sp, #8
   b9178:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b917a:	4669      	mov	r1, sp
   b917c:	4628      	mov	r0, r5
   b917e:	f7ff fb94 	bl	b88aa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9182:	e7e8      	b.n	b9156 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9184 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9188:	4617      	mov	r7, r2
   b918a:	b0a1      	sub	sp, #132	; 0x84
   b918c:	4680      	mov	r8, r0
    WiringBleLock lk;
   b918e:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9190:	460e      	mov	r6, r1
    WiringBleLock lk;
   b9192:	f7ff f8a9 	bl	b82e8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b9196:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b9198:	7923      	ldrb	r3, [r4, #4]
   b919a:	b953      	cbnz	r3, b91b2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b919c:	4639      	mov	r1, r7
   b919e:	4640      	mov	r0, r8
   b91a0:	f7ff fb83 	bl	b88aa <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b91a4:	a80a      	add	r0, sp, #40	; 0x28
   b91a6:	f7ff f8ad 	bl	b8304 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b91aa:	4640      	mov	r0, r8
   b91ac:	b021      	add	sp, #132	; 0x84
   b91ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b91b2:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b91b4:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b91b8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b91bc:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b91be:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b91c2:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b91c6:	9b03      	ldr	r3, [sp, #12]
   b91c8:	429d      	cmp	r5, r3
   b91ca:	d021      	beq.n	b9210 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b91cc:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b91d0:	4658      	mov	r0, fp
   b91d2:	f109 0114 	add.w	r1, r9, #20
   b91d6:	f7ff f934 	bl	b8442 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b91da:	b1b8      	cbz	r0, b920c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b91dc:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b91e0:	4650      	mov	r0, sl
   b91e2:	f7ff f92e 	bl	b8442 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b91e6:	b188      	cbz	r0, b920c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b91e8:	6823      	ldr	r3, [r4, #0]
   b91ea:	f8d9 2000 	ldr.w	r2, [r9]
   b91ee:	4053      	eors	r3, r2
   b91f0:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b91f4:	d10a      	bne.n	b920c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b91f6:	2220      	movs	r2, #32
   b91f8:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b91fc:	4a5e      	ldr	r2, [pc, #376]	; (b9378 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b91fe:	9200      	str	r2, [sp, #0]
   b9200:	aa15      	add	r2, sp, #84	; 0x54
   b9202:	495e      	ldr	r1, [pc, #376]	; (b937c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b9204:	2032      	movs	r0, #50	; 0x32
   b9206:	f7fe fe93 	bl	b7f30 <log_message>
   b920a:	e7c7      	b.n	b919c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b920c:	3508      	adds	r5, #8
   b920e:	e7da      	b.n	b91c6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b9210:	4650      	mov	r0, sl
   b9212:	f7ff f8e7 	bl	b83e4 <_ZNK8particle7BleUuid7isValidEv>
   b9216:	b960      	cbnz	r0, b9232 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b9218:	4959      	ldr	r1, [pc, #356]	; (b9380 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b921a:	2201      	movs	r2, #1
   b921c:	a815      	add	r0, sp, #84	; 0x54
   b921e:	ad15      	add	r5, sp, #84	; 0x54
   b9220:	f7ff f8b8 	bl	b8394 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b9224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9226:	46d4      	mov	ip, sl
   b9228:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b922c:	682b      	ldr	r3, [r5, #0]
   b922e:	f8cc 3000 	str.w	r3, [ip]
   b9232:	6833      	ldr	r3, [r6, #0]
   b9234:	e9d3 5300 	ldrd	r5, r3, [r3]
   b9238:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b923c:	455d      	cmp	r5, fp
   b923e:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b9240:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b9242:	d06e      	beq.n	b9322 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b9244:	f855 0b08 	ldr.w	r0, [r5], #8
   b9248:	f7ff f8fb 	bl	b8442 <_ZNK8particle7BleUuideqERKS0_>
   b924c:	2800      	cmp	r0, #0
   b924e:	d0f5      	beq.n	b923c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b9250:	f104 0a14 	add.w	sl, r4, #20
   b9254:	4650      	mov	r0, sl
   b9256:	f7ff f8c5 	bl	b83e4 <_ZNK8particle7BleUuid7isValidEv>
   b925a:	b988      	cbnz	r0, b9280 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b925c:	4b49      	ldr	r3, [pc, #292]	; (b9384 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b925e:	4948      	ldr	r1, [pc, #288]	; (b9380 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b9260:	881a      	ldrh	r2, [r3, #0]
   b9262:	3201      	adds	r2, #1
   b9264:	b292      	uxth	r2, r2
   b9266:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9268:	a815      	add	r0, sp, #84	; 0x54
   b926a:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b926c:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b926e:	f7ff f8b0 	bl	b83d2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b9272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9274:	46d4      	mov	ip, sl
   b9276:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b927a:	682b      	ldr	r3, [r5, #0]
   b927c:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b9280:	4b41      	ldr	r3, [pc, #260]	; (b9388 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b9282:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b9284:	2228      	movs	r2, #40	; 0x28
   b9286:	2100      	movs	r1, #0
   b9288:	a816      	add	r0, sp, #88	; 0x58
   b928a:	f002 fa03 	bl	bb694 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b928e:	4651      	mov	r1, sl
   b9290:	a804      	add	r0, sp, #16
   b9292:	f7ff f8b9 	bl	b8408 <_ZN8particle7BleUuid7halUUIDEv>
   b9296:	ab04      	add	r3, sp, #16
   b9298:	aa18      	add	r2, sp, #96	; 0x60
   b929a:	f10d 0c20 	add.w	ip, sp, #32
   b929e:	6818      	ldr	r0, [r3, #0]
   b92a0:	6859      	ldr	r1, [r3, #4]
   b92a2:	4615      	mov	r5, r2
   b92a4:	c503      	stmia	r5!, {r0, r1}
   b92a6:	3308      	adds	r3, #8
   b92a8:	4563      	cmp	r3, ip
   b92aa:	462a      	mov	r2, r5
   b92ac:	d1f7      	bne.n	b929e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b92ae:	6818      	ldr	r0, [r3, #0]
   b92b0:	6028      	str	r0, [r5, #0]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   b92b2:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b92b4:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b92b8:	f8d9 3000 	ldr.w	r3, [r9]
   b92bc:	8a9b      	ldrh	r3, [r3, #20]
   b92be:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b92c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b92c4:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b92c6:	4b31      	ldr	r3, [pc, #196]	; (b938c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b92c8:	2200      	movs	r2, #0
   b92ca:	1da1      	adds	r1, r4, #6
   b92cc:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b92ce:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b92d2:	f7fe fcc1 	bl	b7c58 <hal_ble_gatt_server_add_characteristic>
   b92d6:	2800      	cmp	r0, #0
   b92d8:	f47f af60 	bne.w	b919c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b92dc:	2301      	movs	r3, #1
   b92de:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b92e0:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b92e2:	4639      	mov	r1, r7
        return characteristics_;
   b92e4:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b92e6:	a80d      	add	r0, sp, #52	; 0x34
   b92e8:	f7ff fadf 	bl	b88aa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b92ec:	4620      	mov	r0, r4
   b92ee:	a90d      	add	r1, sp, #52	; 0x34
   b92f0:	f7ff ff1b 	bl	b912a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b92f4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b92f6:	a80e      	add	r0, sp, #56	; 0x38
   b92f8:	f7ff faf9 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b92fc:	2c00      	cmp	r4, #0
   b92fe:	f47f af4d 	bne.w	b919c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b9302:	2320      	movs	r3, #32
   b9304:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b9308:	4b21      	ldr	r3, [pc, #132]	; (b9390 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b930a:	9300      	str	r3, [sp, #0]
   b930c:	aa0d      	add	r2, sp, #52	; 0x34
   b930e:	4623      	mov	r3, r4
   b9310:	e777      	b.n	b9202 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b9312:	4639      	mov	r1, r7
   b9314:	4640      	mov	r0, r8
   b9316:	f7ff fac8 	bl	b88aa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b931a:	a80c      	add	r0, sp, #48	; 0x30
   b931c:	f7ff fae7 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9320:	e740      	b.n	b91a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b9322:	a80b      	add	r0, sp, #44	; 0x2c
   b9324:	f7ff f94a 	bl	b85bc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b9328:	4651      	mov	r1, sl
   b932a:	a815      	add	r0, sp, #84	; 0x54
   b932c:	f7ff f86c 	bl	b8408 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b9330:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9332:	2300      	movs	r3, #0
   b9334:	3214      	adds	r2, #20
   b9336:	a915      	add	r1, sp, #84	; 0x54
   b9338:	2001      	movs	r0, #1
   b933a:	f7fe fc83 	bl	b7c44 <hal_ble_gatt_server_add_service>
   b933e:	2800      	cmp	r0, #0
   b9340:	d1e7      	bne.n	b9312 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b9342:	6835      	ldr	r5, [r6, #0]
   b9344:	a90b      	add	r1, sp, #44	; 0x2c
   b9346:	a80d      	add	r0, sp, #52	; 0x34
   b9348:	f7ff fabd 	bl	b88c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b934c:	4628      	mov	r0, r5
   b934e:	a90d      	add	r1, sp, #52	; 0x34
   b9350:	f7ff fe7c 	bl	b904c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b9354:	4605      	mov	r5, r0
   b9356:	a80e      	add	r0, sp, #56	; 0x38
   b9358:	f7ff fac9 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b935c:	2d00      	cmp	r5, #0
   b935e:	d0d8      	beq.n	b9312 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b9360:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b9362:	6853      	ldr	r3, [r2, #4]
   b9364:	6812      	ldr	r2, [r2, #0]
   b9366:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b936a:	3b01      	subs	r3, #1
   b936c:	a80c      	add	r0, sp, #48	; 0x30
   b936e:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b9372:	f7ff fabc 	bl	b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9376:	e76b      	b.n	b9250 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b9378:	000bdcfa 	.word	0x000bdcfa
   b937c:	000bdc17 	.word	0x000bdc17
   b9380:	000bddbe 	.word	0x000bddbe
   b9384:	2003e6bc 	.word	0x2003e6bc
   b9388:	002c0003 	.word	0x002c0003
   b938c:	000b8755 	.word	0x000b8755
   b9390:	000bdd25 	.word	0x000bdd25

000b9394 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b9394:	4802      	ldr	r0, [pc, #8]	; (b93a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b9396:	2300      	movs	r3, #0
   b9398:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b939a:	f7fe bc71 	b.w	b7c80 <os_mutex_recursive_create>
   b939e:	bf00      	nop
   b93a0:	2003e6c0 	.word	0x2003e6c0

000b93a4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b93a4:	2200      	movs	r2, #0
   b93a6:	6840      	ldr	r0, [r0, #4]
   b93a8:	4611      	mov	r1, r2
   b93aa:	f7fe be2d 	b.w	b8008 <network_listening>

000b93ae <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b93ae:	2200      	movs	r2, #0
   b93b0:	6840      	ldr	r0, [r0, #4]
   b93b2:	4611      	mov	r1, r2
   b93b4:	f7fe be50 	b.w	b8058 <network_get_listen_timeout>

000b93b8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b93b8:	6840      	ldr	r0, [r0, #4]
   b93ba:	2200      	movs	r2, #0
   b93bc:	f7fe be44 	b.w	b8048 <network_set_listen_timeout>

000b93c0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b93c0:	6840      	ldr	r0, [r0, #4]
   b93c2:	2200      	movs	r2, #0
   b93c4:	f081 0101 	eor.w	r1, r1, #1
   b93c8:	f7fe be16 	b.w	b7ff8 <network_listen>

000b93cc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b93cc:	2300      	movs	r3, #0
   b93ce:	6840      	ldr	r0, [r0, #4]
   b93d0:	461a      	mov	r2, r3
   b93d2:	4619      	mov	r1, r3
   b93d4:	f7fe be08 	b.w	b7fe8 <network_off>

000b93d8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b93d8:	2300      	movs	r3, #0
   b93da:	6840      	ldr	r0, [r0, #4]
   b93dc:	461a      	mov	r2, r3
   b93de:	4619      	mov	r1, r3
   b93e0:	f7fe bdfa 	b.w	b7fd8 <network_on>

000b93e4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b93e4:	2200      	movs	r2, #0
   b93e6:	6840      	ldr	r0, [r0, #4]
   b93e8:	4611      	mov	r1, r2
   b93ea:	f7fe bded 	b.w	b7fc8 <network_ready>

000b93ee <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b93ee:	2200      	movs	r2, #0
   b93f0:	6840      	ldr	r0, [r0, #4]
   b93f2:	4611      	mov	r1, r2
   b93f4:	f7fe bdd8 	b.w	b7fa8 <network_connecting>

000b93f8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b93f8:	6840      	ldr	r0, [r0, #4]
   b93fa:	2200      	movs	r2, #0
   b93fc:	2102      	movs	r1, #2
   b93fe:	f7fe bddb 	b.w	b7fb8 <network_disconnect>

000b9402 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9402:	2300      	movs	r3, #0
   b9404:	6840      	ldr	r0, [r0, #4]
   b9406:	461a      	mov	r2, r3
   b9408:	f7fe bdc6 	b.w	b7f98 <network_connect>

000b940c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b940c:	4b02      	ldr	r3, [pc, #8]	; (b9418 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b940e:	2203      	movs	r2, #3
   b9410:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b9412:	4a02      	ldr	r2, [pc, #8]	; (b941c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b9414:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b9416:	4770      	bx	lr
   b9418:	2003e6c8 	.word	0x2003e6c8
   b941c:	000bdde8 	.word	0x000bdde8

000b9420 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9420:	4770      	bx	lr

000b9422 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9424:	4606      	mov	r6, r0
   b9426:	4615      	mov	r5, r2
   b9428:	460c      	mov	r4, r1
   b942a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b942c:	42bc      	cmp	r4, r7
   b942e:	d006      	beq.n	b943e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9430:	6833      	ldr	r3, [r6, #0]
   b9432:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9436:	689b      	ldr	r3, [r3, #8]
   b9438:	4630      	mov	r0, r6
   b943a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b943c:	e7f6      	b.n	b942c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b943e:	4628      	mov	r0, r5
   b9440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9442 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b9442:	7c00      	ldrb	r0, [r0, #16]
   b9444:	2200      	movs	r2, #0
   b9446:	f7fe bc63 	b.w	b7d10 <hal_i2c_write>

000b944a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b944a:	7c00      	ldrb	r0, [r0, #16]
   b944c:	2100      	movs	r1, #0
   b944e:	f7fe bc67 	b.w	b7d20 <hal_i2c_available>

000b9452 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b9452:	7c00      	ldrb	r0, [r0, #16]
   b9454:	2100      	movs	r1, #0
   b9456:	f7fe bc6b 	b.w	b7d30 <hal_i2c_read>

000b945a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b945a:	7c00      	ldrb	r0, [r0, #16]
   b945c:	2100      	movs	r1, #0
   b945e:	f7fe bc6f 	b.w	b7d40 <hal_i2c_peek>

000b9462 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b9462:	7c00      	ldrb	r0, [r0, #16]
   b9464:	2100      	movs	r1, #0
   b9466:	f7fe bc73 	b.w	b7d50 <hal_i2c_flush>

000b946a <_ZN7TwoWireD0Ev>:
   b946a:	b510      	push	{r4, lr}
   b946c:	2114      	movs	r1, #20
   b946e:	4604      	mov	r4, r0
   b9470:	f7fa fe17 	bl	b40a2 <_ZdlPvj>
   b9474:	4620      	mov	r0, r4
   b9476:	bd10      	pop	{r4, pc}

000b9478 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9478:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b947a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b947e:	4604      	mov	r4, r0
   b9480:	4608      	mov	r0, r1
   b9482:	2100      	movs	r1, #0
   b9484:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9488:	4b03      	ldr	r3, [pc, #12]	; (b9498 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b948a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b948c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b948e:	4611      	mov	r1, r2
   b9490:	f7fe fc66 	bl	b7d60 <hal_i2c_init>
}
   b9494:	4620      	mov	r0, r4
   b9496:	bd10      	pop	{r4, pc}
   b9498:	000bde24 	.word	0x000bde24

000b949c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b949c:	2300      	movs	r3, #0
   b949e:	7c00      	ldrb	r0, [r0, #16]
   b94a0:	461a      	mov	r2, r3
   b94a2:	4619      	mov	r1, r3
   b94a4:	f7fe bc1c 	b.w	b7ce0 <hal_i2c_begin>

000b94a8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b94a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b94aa:	2200      	movs	r2, #0
   b94ac:	2314      	movs	r3, #20
   b94ae:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b94b2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b94b6:	780b      	ldrb	r3, [r1, #0]
   b94b8:	f88d 3008 	strb.w	r3, [sp, #8]
   b94bc:	684b      	ldr	r3, [r1, #4]
   b94be:	9303      	str	r3, [sp, #12]
   b94c0:	68cb      	ldr	r3, [r1, #12]
   b94c2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b94c4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b94c6:	7a0b      	ldrb	r3, [r1, #8]
   b94c8:	9305      	str	r3, [sp, #20]
   b94ca:	a901      	add	r1, sp, #4
   b94cc:	f7fe fc50 	bl	b7d70 <hal_i2c_request_ex>
}
   b94d0:	b007      	add	sp, #28
   b94d2:	f85d fb04 	ldr.w	pc, [sp], #4

000b94d6 <_ZN7TwoWire11requestFromEhjh>:
{
   b94d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b94d8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b94da:	f88d 1000 	strb.w	r1, [sp]
   b94de:	f04f 0164 	mov.w	r1, #100	; 0x64
   b94e2:	9103      	str	r1, [sp, #12]
   b94e4:	bf18      	it	ne
   b94e6:	2301      	movne	r3, #1
   b94e8:	4669      	mov	r1, sp
    size_ = size;
   b94ea:	9201      	str	r2, [sp, #4]
   b94ec:	f88d 3008 	strb.w	r3, [sp, #8]
   b94f0:	f7ff ffda 	bl	b94a8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b94f4:	b005      	add	sp, #20
   b94f6:	f85d fb04 	ldr.w	pc, [sp], #4

000b94fa <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b94fa:	2301      	movs	r3, #1
   b94fc:	f7ff bfeb 	b.w	b94d6 <_ZN7TwoWire11requestFromEhjh>

000b9500 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b9500:	7c00      	ldrb	r0, [r0, #16]
   b9502:	2200      	movs	r2, #0
   b9504:	f7fe bbf4 	b.w	b7cf0 <hal_i2c_begin_transmission>

000b9508 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b9508:	b2c9      	uxtb	r1, r1
   b950a:	f7ff bff9 	b.w	b9500 <_ZN7TwoWire17beginTransmissionEh>

000b950e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b950e:	7c00      	ldrb	r0, [r0, #16]
   b9510:	2200      	movs	r2, #0
   b9512:	f7fe bbf5 	b.w	b7d00 <hal_i2c_end_transmission>

000b9516 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b9516:	2101      	movs	r1, #1
   b9518:	f7ff bff9 	b.w	b950e <_ZN7TwoWire15endTransmissionEh>

000b951c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b951c:	4770      	bx	lr

000b951e <_ZN9IPAddressD0Ev>:
   b951e:	b510      	push	{r4, lr}
   b9520:	2118      	movs	r1, #24
   b9522:	4604      	mov	r4, r0
   b9524:	f7fa fdbd 	bl	b40a2 <_ZdlPvj>
   b9528:	4620      	mov	r0, r4
   b952a:	bd10      	pop	{r4, pc}

000b952c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b952c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b952e:	7d03      	ldrb	r3, [r0, #20]
   b9530:	2b06      	cmp	r3, #6
{
   b9532:	b08d      	sub	sp, #52	; 0x34
   b9534:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9536:	f100 0704 	add.w	r7, r0, #4
   b953a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b953e:	d012      	beq.n	b9566 <_ZNK9IPAddress7printToER5Print+0x3a>
   b9540:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b9544:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b9548:	220a      	movs	r2, #10
   b954a:	4630      	mov	r0, r6
   b954c:	f000 f973 	bl	b9836 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b9550:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b9552:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b9554:	d019      	beq.n	b958a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b9556:	2c00      	cmp	r4, #0
   b9558:	d0f4      	beq.n	b9544 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b955a:	212e      	movs	r1, #46	; 0x2e
   b955c:	4630      	mov	r0, r6
   b955e:	f000 f951 	bl	b9804 <_ZN5Print5printEc>
   b9562:	4404      	add	r4, r0
   b9564:	e7ee      	b.n	b9544 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9566:	232f      	movs	r3, #47	; 0x2f
   b9568:	466a      	mov	r2, sp
   b956a:	4639      	mov	r1, r7
   b956c:	200a      	movs	r0, #10
		buf[0] = 0;
   b956e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9572:	f7fe fc0d 	bl	b7d90 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b9576:	4668      	mov	r0, sp
   b9578:	f002 f8d4 	bl	bb724 <strlen>
   b957c:	6833      	ldr	r3, [r6, #0]
   b957e:	4602      	mov	r2, r0
   b9580:	68db      	ldr	r3, [r3, #12]
   b9582:	4669      	mov	r1, sp
   b9584:	4630      	mov	r0, r6
   b9586:	4798      	blx	r3
   b9588:	4604      	mov	r4, r0
    }
    return n;
}
   b958a:	4620      	mov	r0, r4
   b958c:	b00d      	add	sp, #52	; 0x34
   b958e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9590 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b9590:	b510      	push	{r4, lr}
   b9592:	4b05      	ldr	r3, [pc, #20]	; (b95a8 <_ZN9IPAddressC1Ev+0x18>)
   b9594:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b9596:	2211      	movs	r2, #17
   b9598:	f840 3b04 	str.w	r3, [r0], #4
   b959c:	2100      	movs	r1, #0
   b959e:	f002 f879 	bl	bb694 <memset>
}
   b95a2:	4620      	mov	r0, r4
   b95a4:	bd10      	pop	{r4, pc}
   b95a6:	bf00      	nop
   b95a8:	000bde4c 	.word	0x000bde4c

000b95ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b95ac:	4603      	mov	r3, r0
   b95ae:	4a07      	ldr	r2, [pc, #28]	; (b95cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b95b0:	b510      	push	{r4, lr}
   b95b2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b95b6:	f101 0210 	add.w	r2, r1, #16
   b95ba:	f851 4b04 	ldr.w	r4, [r1], #4
   b95be:	f843 4b04 	str.w	r4, [r3], #4
   b95c2:	4291      	cmp	r1, r2
   b95c4:	d1f9      	bne.n	b95ba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b95c6:	780a      	ldrb	r2, [r1, #0]
   b95c8:	701a      	strb	r2, [r3, #0]
}
   b95ca:	bd10      	pop	{r4, pc}
   b95cc:	000bde4c 	.word	0x000bde4c

000b95d0 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b95d0:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b95d2:	2b04      	cmp	r3, #4
   b95d4:	d104      	bne.n	b95e0 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b95d6:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b95d8:	3800      	subs	r0, #0
   b95da:	bf18      	it	ne
   b95dc:	2001      	movne	r0, #1
   b95de:	4770      	bx	lr
    } else if (version() == 6) {
   b95e0:	2b06      	cmp	r3, #6
   b95e2:	d107      	bne.n	b95f4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b95e4:	6843      	ldr	r3, [r0, #4]
   b95e6:	b93b      	cbnz	r3, b95f8 <_ZNK9IPAddresscvbEv+0x28>
   b95e8:	6883      	ldr	r3, [r0, #8]
   b95ea:	b92b      	cbnz	r3, b95f8 <_ZNK9IPAddresscvbEv+0x28>
   b95ec:	68c3      	ldr	r3, [r0, #12]
   b95ee:	b91b      	cbnz	r3, b95f8 <_ZNK9IPAddresscvbEv+0x28>
   b95f0:	6900      	ldr	r0, [r0, #16]
   b95f2:	e7f1      	b.n	b95d8 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b95f4:	2000      	movs	r0, #0
   b95f6:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b95f8:	2001      	movs	r0, #1
}
   b95fa:	4770      	bx	lr

000b95fc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b95fc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b95fe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b9602:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b9606:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b960a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b960e:	2304      	movs	r3, #4
   b9610:	6041      	str	r1, [r0, #4]
   b9612:	7503      	strb	r3, [r0, #20]
}
   b9614:	bd10      	pop	{r4, pc}
	...

000b9618 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b9618:	b507      	push	{r0, r1, r2, lr}
   b961a:	4b06      	ldr	r3, [pc, #24]	; (b9634 <_ZN9IPAddressC1EPKh+0x1c>)
   b961c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b961e:	78cb      	ldrb	r3, [r1, #3]
   b9620:	9300      	str	r3, [sp, #0]
   b9622:	788b      	ldrb	r3, [r1, #2]
   b9624:	784a      	ldrb	r2, [r1, #1]
   b9626:	7809      	ldrb	r1, [r1, #0]
   b9628:	f7ff ffe8 	bl	b95fc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b962c:	b003      	add	sp, #12
   b962e:	f85d fb04 	ldr.w	pc, [sp], #4
   b9632:	bf00      	nop
   b9634:	000bde4c 	.word	0x000bde4c

000b9638 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b9638:	4b01      	ldr	r3, [pc, #4]	; (b9640 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b963a:	4a02      	ldr	r2, [pc, #8]	; (b9644 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b963c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b963e:	4770      	bx	lr
   b9640:	2003e6d0 	.word	0x2003e6d0
   b9644:	000bde58 	.word	0x000bde58

000b9648 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9648:	2300      	movs	r3, #0
   b964a:	6840      	ldr	r0, [r0, #4]
   b964c:	461a      	mov	r2, r3
   b964e:	f7fe bca3 	b.w	b7f98 <network_connect>

000b9652 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b9652:	6840      	ldr	r0, [r0, #4]
   b9654:	2200      	movs	r2, #0
   b9656:	2102      	movs	r1, #2
   b9658:	f7fe bcae 	b.w	b7fb8 <network_disconnect>

000b965c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b965c:	2200      	movs	r2, #0
   b965e:	6840      	ldr	r0, [r0, #4]
   b9660:	4611      	mov	r1, r2
   b9662:	f7fe bca1 	b.w	b7fa8 <network_connecting>

000b9666 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b9666:	2200      	movs	r2, #0
   b9668:	6840      	ldr	r0, [r0, #4]
   b966a:	4611      	mov	r1, r2
   b966c:	f7fe bcac 	b.w	b7fc8 <network_ready>

000b9670 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b9670:	2300      	movs	r3, #0
   b9672:	6840      	ldr	r0, [r0, #4]
   b9674:	461a      	mov	r2, r3
   b9676:	4619      	mov	r1, r3
   b9678:	f7fe bcae 	b.w	b7fd8 <network_on>

000b967c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b967c:	2300      	movs	r3, #0
   b967e:	6840      	ldr	r0, [r0, #4]
   b9680:	461a      	mov	r2, r3
   b9682:	4619      	mov	r1, r3
   b9684:	f7fe bcb0 	b.w	b7fe8 <network_off>

000b9688 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9688:	6840      	ldr	r0, [r0, #4]
   b968a:	2100      	movs	r1, #0
   b968c:	f7fe bcec 	b.w	b8068 <network_is_on>

000b9690 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b9690:	6840      	ldr	r0, [r0, #4]
   b9692:	2100      	movs	r1, #0
   b9694:	f7fe bcf0 	b.w	b8078 <network_is_off>

000b9698 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b9698:	6840      	ldr	r0, [r0, #4]
   b969a:	2200      	movs	r2, #0
   b969c:	f081 0101 	eor.w	r1, r1, #1
   b96a0:	f7fe bcaa 	b.w	b7ff8 <network_listen>

000b96a4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b96a4:	6840      	ldr	r0, [r0, #4]
   b96a6:	2200      	movs	r2, #0
   b96a8:	f7fe bcce 	b.w	b8048 <network_set_listen_timeout>

000b96ac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b96ac:	2200      	movs	r2, #0
   b96ae:	6840      	ldr	r0, [r0, #4]
   b96b0:	4611      	mov	r1, r2
   b96b2:	f7fe bcd1 	b.w	b8058 <network_get_listen_timeout>

000b96b6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b96b6:	2200      	movs	r2, #0
   b96b8:	6840      	ldr	r0, [r0, #4]
   b96ba:	4611      	mov	r1, r2
   b96bc:	f7fe bca4 	b.w	b8008 <network_listening>

000b96c0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b96c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b96c4:	b095      	sub	sp, #84	; 0x54
   b96c6:	4614      	mov	r4, r2
   b96c8:	460d      	mov	r5, r1
   b96ca:	4607      	mov	r7, r0
    IPAddress addr;
   b96cc:	f7ff ff60 	bl	b9590 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b96d0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b96d2:	221c      	movs	r2, #28
   b96d4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b96d6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b96d8:	f001 ffdc 	bl	bb694 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b96dc:	2340      	movs	r3, #64	; 0x40
   b96de:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b96e0:	4620      	mov	r0, r4
   b96e2:	466b      	mov	r3, sp
   b96e4:	aa0c      	add	r2, sp, #48	; 0x30
   b96e6:	2100      	movs	r1, #0
   b96e8:	f7fe fb72 	bl	b7dd0 <netdb_getaddrinfo>
    if (!r) {
   b96ec:	4604      	mov	r4, r0
   b96ee:	2800      	cmp	r0, #0
   b96f0:	d14b      	bne.n	b978a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b96f2:	4602      	mov	r2, r0
   b96f4:	2101      	movs	r1, #1
   b96f6:	6868      	ldr	r0, [r5, #4]
   b96f8:	f7fe fc66 	bl	b7fc8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b96fc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b96fe:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9700:	4622      	mov	r2, r4
   b9702:	6868      	ldr	r0, [r5, #4]
   b9704:	f7fe fc60 	bl	b7fc8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9708:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b970a:	4681      	mov	r9, r0
        bool ok = false;
   b970c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b970e:	2e00      	cmp	r6, #0
   b9710:	d03b      	beq.n	b978a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b9712:	2900      	cmp	r1, #0
   b9714:	d139      	bne.n	b978a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b9716:	6873      	ldr	r3, [r6, #4]
   b9718:	2b02      	cmp	r3, #2
   b971a:	d003      	beq.n	b9724 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b971c:	2b0a      	cmp	r3, #10
   b971e:	d011      	beq.n	b9744 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9720:	69f6      	ldr	r6, [r6, #28]
   b9722:	e7f4      	b.n	b970e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b9724:	f1b8 0f00 	cmp.w	r8, #0
   b9728:	d0fa      	beq.n	b9720 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b972a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b972c:	a806      	add	r0, sp, #24
   b972e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b9730:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b9732:	f7ff ff71 	bl	b9618 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9738:	1d3c      	adds	r4, r7, #4
   b973a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b973c:	682b      	ldr	r3, [r5, #0]
   b973e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9740:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b9742:	e7ed      	b.n	b9720 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b9744:	f1b9 0f00 	cmp.w	r9, #0
   b9748:	d0ea      	beq.n	b9720 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b974a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b974c:	2210      	movs	r2, #16
   b974e:	a801      	add	r0, sp, #4
   b9750:	f001 ffa0 	bl	bb694 <memset>
                    a.v = 6;
   b9754:	2306      	movs	r3, #6
   b9756:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b975a:	ad01      	add	r5, sp, #4
   b975c:	f104 0308 	add.w	r3, r4, #8
   b9760:	3418      	adds	r4, #24
   b9762:	6818      	ldr	r0, [r3, #0]
   b9764:	6859      	ldr	r1, [r3, #4]
   b9766:	462a      	mov	r2, r5
   b9768:	c203      	stmia	r2!, {r0, r1}
   b976a:	3308      	adds	r3, #8
   b976c:	42a3      	cmp	r3, r4
   b976e:	4615      	mov	r5, r2
   b9770:	d1f7      	bne.n	b9762 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b9772:	a901      	add	r1, sp, #4
   b9774:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b9776:	ad07      	add	r5, sp, #28
   b9778:	f7ff ff18 	bl	b95ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b977c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b977e:	1d3c      	adds	r4, r7, #4
   b9780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9782:	682b      	ldr	r3, [r5, #0]
   b9784:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9786:	4649      	mov	r1, r9
   b9788:	e7ca      	b.n	b9720 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b978a:	9800      	ldr	r0, [sp, #0]
   b978c:	f7fe fb18 	bl	b7dc0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b9790:	4638      	mov	r0, r7
   b9792:	b015      	add	sp, #84	; 0x54
   b9794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b9798 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b9798:	4b02      	ldr	r3, [pc, #8]	; (b97a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b979a:	4a03      	ldr	r2, [pc, #12]	; (b97a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b979c:	601a      	str	r2, [r3, #0]
   b979e:	2200      	movs	r2, #0
   b97a0:	605a      	str	r2, [r3, #4]

} // spark
   b97a2:	4770      	bx	lr
   b97a4:	2003e6d4 	.word	0x2003e6d4
   b97a8:	000bde64 	.word	0x000bde64

000b97ac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b97ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b97ae:	4606      	mov	r6, r0
   b97b0:	460d      	mov	r5, r1
  size_t n = 0;
   b97b2:	188f      	adds	r7, r1, r2
   b97b4:	2400      	movs	r4, #0
  while (size--) {
   b97b6:	42bd      	cmp	r5, r7
   b97b8:	d00c      	beq.n	b97d4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b97ba:	6833      	ldr	r3, [r6, #0]
   b97bc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b97c0:	689b      	ldr	r3, [r3, #8]
   b97c2:	4630      	mov	r0, r6
   b97c4:	4798      	blx	r3
     if (chunk>=0)
   b97c6:	1e03      	subs	r3, r0, #0
   b97c8:	db01      	blt.n	b97ce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b97ca:	441c      	add	r4, r3
  while (size--) {
   b97cc:	e7f3      	b.n	b97b6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b97ce:	2c00      	cmp	r4, #0
   b97d0:	bf08      	it	eq
   b97d2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b97d4:	4620      	mov	r0, r4
   b97d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b97d8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b97d8:	b513      	push	{r0, r1, r4, lr}
   b97da:	4604      	mov	r4, r0
    }
   b97dc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b97de:	b159      	cbz	r1, b97f8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b97e0:	9101      	str	r1, [sp, #4]
   b97e2:	f001 ff9f 	bl	bb724 <strlen>
   b97e6:	6823      	ldr	r3, [r4, #0]
   b97e8:	9901      	ldr	r1, [sp, #4]
   b97ea:	68db      	ldr	r3, [r3, #12]
   b97ec:	4602      	mov	r2, r0
   b97ee:	4620      	mov	r0, r4
    }
   b97f0:	b002      	add	sp, #8
   b97f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b97f6:	4718      	bx	r3
    }
   b97f8:	b002      	add	sp, #8
   b97fa:	bd10      	pop	{r4, pc}

000b97fc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b97fc:	b508      	push	{r3, lr}
  return write(str);
   b97fe:	f7ff ffeb 	bl	b97d8 <_ZN5Print5writeEPKc>
}
   b9802:	bd08      	pop	{r3, pc}

000b9804 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b9804:	6803      	ldr	r3, [r0, #0]
   b9806:	689b      	ldr	r3, [r3, #8]
   b9808:	4718      	bx	r3

000b980a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b980a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b980c:	210d      	movs	r1, #13
{
   b980e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b9810:	f7ff fff8 	bl	b9804 <_ZN5Print5printEc>
  n += print('\n');
   b9814:	210a      	movs	r1, #10
  size_t n = print('\r');
   b9816:	4604      	mov	r4, r0
  n += print('\n');
   b9818:	4628      	mov	r0, r5
   b981a:	f7ff fff3 	bl	b9804 <_ZN5Print5printEc>
  return n;
}
   b981e:	4420      	add	r0, r4
   b9820:	bd38      	pop	{r3, r4, r5, pc}

000b9822 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b9822:	b538      	push	{r3, r4, r5, lr}
   b9824:	4605      	mov	r5, r0
  return write(str);
   b9826:	f7ff ffd7 	bl	b97d8 <_ZN5Print5writeEPKc>
   b982a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b982c:	4628      	mov	r0, r5
   b982e:	f7ff ffec 	bl	b980a <_ZN5Print7printlnEv>
  return n;
}
   b9832:	4420      	add	r0, r4
   b9834:	bd38      	pop	{r3, r4, r5, pc}

000b9836 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b9836:	b530      	push	{r4, r5, lr}
   b9838:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b983a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b983c:	2a01      	cmp	r2, #1
  *str = '\0';
   b983e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b9842:	bf98      	it	ls
   b9844:	220a      	movls	r2, #10
   b9846:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b9848:	460d      	mov	r5, r1
   b984a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b984e:	fb01 5312 	mls	r3, r1, r2, r5
   b9852:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9856:	2b09      	cmp	r3, #9
   b9858:	bf94      	ite	ls
   b985a:	3330      	addls	r3, #48	; 0x30
   b985c:	3337      	addhi	r3, #55	; 0x37
   b985e:	b2db      	uxtb	r3, r3
  } while(n);
   b9860:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9862:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b9866:	d9ef      	bls.n	b9848 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9868:	4621      	mov	r1, r4
   b986a:	f7ff ffb5 	bl	b97d8 <_ZN5Print5writeEPKc>
}
   b986e:	b00b      	add	sp, #44	; 0x2c
   b9870:	bd30      	pop	{r4, r5, pc}

000b9872 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b9872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9876:	b086      	sub	sp, #24
   b9878:	af00      	add	r7, sp, #0
   b987a:	4605      	mov	r5, r0
   b987c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b987e:	1d38      	adds	r0, r7, #4
   b9880:	2114      	movs	r1, #20
{
   b9882:	4614      	mov	r4, r2
    va_copy(args2, args);
   b9884:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b9886:	f7fe fc1f 	bl	b80c8 <vsnprintf>

    if (n<bufsize)
   b988a:	2813      	cmp	r0, #19
   b988c:	d80e      	bhi.n	b98ac <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b988e:	1d39      	adds	r1, r7, #4
   b9890:	4628      	mov	r0, r5
   b9892:	f7ff ffa1 	bl	b97d8 <_ZN5Print5writeEPKc>
   b9896:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b9898:	b11e      	cbz	r6, b98a2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b989a:	4628      	mov	r0, r5
   b989c:	f7ff ffb5 	bl	b980a <_ZN5Print7printlnEv>
   b98a0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b98a2:	4620      	mov	r0, r4
   b98a4:	3718      	adds	r7, #24
   b98a6:	46bd      	mov	sp, r7
   b98a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b98ac:	f100 0308 	add.w	r3, r0, #8
   b98b0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b98b4:	46e8      	mov	r8, sp
        char bigger[n+1];
   b98b6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b98ba:	4622      	mov	r2, r4
   b98bc:	1c41      	adds	r1, r0, #1
   b98be:	683b      	ldr	r3, [r7, #0]
   b98c0:	4668      	mov	r0, sp
   b98c2:	f7fe fc01 	bl	b80c8 <vsnprintf>
  return write(str);
   b98c6:	4669      	mov	r1, sp
   b98c8:	4628      	mov	r0, r5
   b98ca:	f7ff ff85 	bl	b97d8 <_ZN5Print5writeEPKc>
   b98ce:	4604      	mov	r4, r0
   b98d0:	46c5      	mov	sp, r8
   b98d2:	e7e1      	b.n	b9898 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b98d4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b98d4:	4b01      	ldr	r3, [pc, #4]	; (b98dc <_GLOBAL__sub_I_RGB+0x8>)
   b98d6:	2200      	movs	r2, #0
   b98d8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b98da:	4770      	bx	lr
   b98dc:	2003e6dc 	.word	0x2003e6dc

000b98e0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b98e0:	b510      	push	{r4, lr}
   b98e2:	4604      	mov	r4, r0
{
	free(buffer);
   b98e4:	6800      	ldr	r0, [r0, #0]
   b98e6:	f7fe fbd7 	bl	b8098 <free>
}
   b98ea:	4620      	mov	r0, r4
   b98ec:	bd10      	pop	{r4, pc}

000b98ee <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b98ee:	b510      	push	{r4, lr}
   b98f0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b98f2:	6800      	ldr	r0, [r0, #0]
   b98f4:	b108      	cbz	r0, b98fa <_ZN6String10invalidateEv+0xc>
   b98f6:	f7fe fbcf 	bl	b8098 <free>
	buffer = NULL;
   b98fa:	2300      	movs	r3, #0
	capacity = len = 0;
   b98fc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b9900:	6023      	str	r3, [r4, #0]
}
   b9902:	bd10      	pop	{r4, pc}

000b9904 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b9904:	b538      	push	{r3, r4, r5, lr}
   b9906:	4604      	mov	r4, r0
   b9908:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b990a:	6800      	ldr	r0, [r0, #0]
   b990c:	3101      	adds	r1, #1
   b990e:	f7fe fbcb 	bl	b80a8 <realloc>
	if (newbuffer) {
   b9912:	b110      	cbz	r0, b991a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b9914:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b9918:	2001      	movs	r0, #1
	}
	return 0;
}
   b991a:	bd38      	pop	{r3, r4, r5, pc}

000b991c <_ZN6String7reserveEj>:
{
   b991c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b991e:	6803      	ldr	r3, [r0, #0]
{
   b9920:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b9922:	b123      	cbz	r3, b992e <_ZN6String7reserveEj+0x12>
   b9924:	6843      	ldr	r3, [r0, #4]
   b9926:	428b      	cmp	r3, r1
   b9928:	d301      	bcc.n	b992e <_ZN6String7reserveEj+0x12>
   b992a:	2001      	movs	r0, #1
}
   b992c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b992e:	4620      	mov	r0, r4
   b9930:	f7ff ffe8 	bl	b9904 <_ZN6String12changeBufferEj>
   b9934:	2800      	cmp	r0, #0
   b9936:	d0f9      	beq.n	b992c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b9938:	68a3      	ldr	r3, [r4, #8]
   b993a:	2b00      	cmp	r3, #0
   b993c:	d1f5      	bne.n	b992a <_ZN6String7reserveEj+0xe>
   b993e:	6822      	ldr	r2, [r4, #0]
   b9940:	7013      	strb	r3, [r2, #0]
   b9942:	e7f2      	b.n	b992a <_ZN6String7reserveEj+0xe>

000b9944 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b9944:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9946:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b9948:	4611      	mov	r1, r2
   b994a:	9201      	str	r2, [sp, #4]
{
   b994c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b994e:	f7ff ffe5 	bl	b991c <_ZN6String7reserveEj>
   b9952:	9a01      	ldr	r2, [sp, #4]
   b9954:	b928      	cbnz	r0, b9962 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b9956:	4620      	mov	r0, r4
   b9958:	f7ff ffc9 	bl	b98ee <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b995c:	4620      	mov	r0, r4
   b995e:	b003      	add	sp, #12
   b9960:	bd30      	pop	{r4, r5, pc}
	len = length;
   b9962:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b9964:	4629      	mov	r1, r5
   b9966:	6820      	ldr	r0, [r4, #0]
   b9968:	f001 fe6c 	bl	bb644 <memcpy>
	buffer[len] = 0;
   b996c:	6822      	ldr	r2, [r4, #0]
   b996e:	68a3      	ldr	r3, [r4, #8]
   b9970:	2100      	movs	r1, #0
   b9972:	54d1      	strb	r1, [r2, r3]
	return *this;
   b9974:	e7f2      	b.n	b995c <_ZN6String4copyEPKcj+0x18>

000b9976 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b9976:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b9978:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b997a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b997e:	4604      	mov	r4, r0
	len = 0;
   b9980:	6083      	str	r3, [r0, #8]
	flags = 0;
   b9982:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b9984:	b141      	cbz	r1, b9998 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b9986:	4608      	mov	r0, r1
   b9988:	9101      	str	r1, [sp, #4]
   b998a:	f001 fecb 	bl	bb724 <strlen>
   b998e:	9901      	ldr	r1, [sp, #4]
   b9990:	4602      	mov	r2, r0
   b9992:	4620      	mov	r0, r4
   b9994:	f7ff ffd6 	bl	b9944 <_ZN6String4copyEPKcj>
}
   b9998:	4620      	mov	r0, r4
   b999a:	b002      	add	sp, #8
   b999c:	bd10      	pop	{r4, pc}

000b999e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b999e:	b538      	push	{r3, r4, r5, lr}
   b99a0:	4605      	mov	r5, r0
	if (buffer) {
   b99a2:	6800      	ldr	r0, [r0, #0]
{
   b99a4:	460c      	mov	r4, r1
	if (buffer) {
   b99a6:	b168      	cbz	r0, b99c4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b99a8:	686a      	ldr	r2, [r5, #4]
   b99aa:	688b      	ldr	r3, [r1, #8]
   b99ac:	429a      	cmp	r2, r3
   b99ae:	d307      	bcc.n	b99c0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b99b0:	6809      	ldr	r1, [r1, #0]
   b99b2:	f001 feaf 	bl	bb714 <strcpy>
			len = rhs.len;
   b99b6:	68a3      	ldr	r3, [r4, #8]
   b99b8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b99ba:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b99bc:	60a3      	str	r3, [r4, #8]
}
   b99be:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b99c0:	f7fe fb6a 	bl	b8098 <free>
	buffer = rhs.buffer;
   b99c4:	6823      	ldr	r3, [r4, #0]
   b99c6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b99c8:	6863      	ldr	r3, [r4, #4]
   b99ca:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b99cc:	68a3      	ldr	r3, [r4, #8]
   b99ce:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b99d0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b99d2:	e9c4 3300 	strd	r3, r3, [r4]
   b99d6:	e7f1      	b.n	b99bc <_ZN6String4moveERS_+0x1e>

000b99d8 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b99d8:	4288      	cmp	r0, r1
{
   b99da:	b510      	push	{r4, lr}
   b99dc:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b99de:	d005      	beq.n	b99ec <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b99e0:	680b      	ldr	r3, [r1, #0]
   b99e2:	b12b      	cbz	r3, b99f0 <_ZN6StringaSERKS_+0x18>
   b99e4:	688a      	ldr	r2, [r1, #8]
   b99e6:	4619      	mov	r1, r3
   b99e8:	f7ff ffac 	bl	b9944 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b99ec:	4620      	mov	r0, r4
   b99ee:	bd10      	pop	{r4, pc}
	else invalidate();
   b99f0:	f7ff ff7d 	bl	b98ee <_ZN6String10invalidateEv>
   b99f4:	e7fa      	b.n	b99ec <_ZN6StringaSERKS_+0x14>

000b99f6 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b99f6:	4288      	cmp	r0, r1
{
   b99f8:	b510      	push	{r4, lr}
   b99fa:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b99fc:	d001      	beq.n	b9a02 <_ZN6StringaSEOS_+0xc>
   b99fe:	f7ff ffce 	bl	b999e <_ZN6String4moveERS_>
	return *this;
}
   b9a02:	4620      	mov	r0, r4
   b9a04:	bd10      	pop	{r4, pc}

000b9a06 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b9a06:	b513      	push	{r0, r1, r4, lr}
   b9a08:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b9a0a:	b159      	cbz	r1, b9a24 <_ZN6StringaSEPKc+0x1e>
   b9a0c:	4608      	mov	r0, r1
   b9a0e:	9101      	str	r1, [sp, #4]
   b9a10:	f001 fe88 	bl	bb724 <strlen>
   b9a14:	9901      	ldr	r1, [sp, #4]
   b9a16:	4602      	mov	r2, r0
   b9a18:	4620      	mov	r0, r4
   b9a1a:	f7ff ff93 	bl	b9944 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b9a1e:	4620      	mov	r0, r4
   b9a20:	b002      	add	sp, #8
   b9a22:	bd10      	pop	{r4, pc}
	else invalidate();
   b9a24:	f7ff ff63 	bl	b98ee <_ZN6String10invalidateEv>
   b9a28:	e7f9      	b.n	b9a1e <_ZN6StringaSEPKc+0x18>

000b9a2a <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b9a2a:	b510      	push	{r4, lr}
   b9a2c:	4604      	mov	r4, r0
   b9a2e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b9a30:	2300      	movs	r3, #0
	capacity = 0;
   b9a32:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b9a36:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b9a38:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b9a3a:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b9a3c:	a901      	add	r1, sp, #4
   b9a3e:	f000 fcff 	bl	ba440 <itoa>
	*this = buf;
   b9a42:	a901      	add	r1, sp, #4
   b9a44:	4620      	mov	r0, r4
   b9a46:	f7ff ffde 	bl	b9a06 <_ZN6StringaSEPKc>
}
   b9a4a:	4620      	mov	r0, r4
   b9a4c:	b00a      	add	sp, #40	; 0x28
   b9a4e:	bd10      	pop	{r4, pc}

000b9a50 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b9a50:	b570      	push	{r4, r5, r6, lr}
   b9a52:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b9a54:	460e      	mov	r6, r1
   b9a56:	b909      	cbnz	r1, b9a5c <_ZN6String6concatEPKcj+0xc>
   b9a58:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b9a5a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b9a5c:	b16a      	cbz	r2, b9a7a <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b9a5e:	6884      	ldr	r4, [r0, #8]
   b9a60:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b9a62:	4621      	mov	r1, r4
   b9a64:	f7ff ff5a 	bl	b991c <_ZN6String7reserveEj>
   b9a68:	2800      	cmp	r0, #0
   b9a6a:	d0f5      	beq.n	b9a58 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b9a6c:	6828      	ldr	r0, [r5, #0]
   b9a6e:	68ab      	ldr	r3, [r5, #8]
   b9a70:	4631      	mov	r1, r6
   b9a72:	4418      	add	r0, r3
   b9a74:	f001 fe4e 	bl	bb714 <strcpy>
	len = newlen;
   b9a78:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b9a7a:	2001      	movs	r0, #1
   b9a7c:	e7ed      	b.n	b9a5a <_ZN6String6concatEPKcj+0xa>

000b9a7e <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b9a7e:	688a      	ldr	r2, [r1, #8]
   b9a80:	6809      	ldr	r1, [r1, #0]
   b9a82:	f7ff bfe5 	b.w	b9a50 <_ZN6String6concatEPKcj>

000b9a86 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b9a86:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b9a88:	2300      	movs	r3, #0
	buf[0] = c;
   b9a8a:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b9a8e:	2201      	movs	r2, #1
   b9a90:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b9a92:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b9a96:	f7ff ffdb 	bl	b9a50 <_ZN6String6concatEPKcj>
}
   b9a9a:	b003      	add	sp, #12
   b9a9c:	f85d fb04 	ldr.w	pc, [sp], #4

000b9aa0 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b9aa0:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b9aa2:	688a      	ldr	r2, [r1, #8]
   b9aa4:	6809      	ldr	r1, [r1, #0]
{
   b9aa6:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b9aa8:	f7ff ffd2 	bl	b9a50 <_ZN6String6concatEPKcj>
   b9aac:	b910      	cbnz	r0, b9ab4 <_ZplRK15StringSumHelperRK6String+0x14>
   b9aae:	4620      	mov	r0, r4
   b9ab0:	f7ff ff1d 	bl	b98ee <_ZN6String10invalidateEv>
	return a;
}
   b9ab4:	4620      	mov	r0, r4
   b9ab6:	bd10      	pop	{r4, pc}

000b9ab8 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b9ab8:	6802      	ldr	r2, [r0, #0]
{
   b9aba:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b9abc:	6809      	ldr	r1, [r1, #0]
   b9abe:	b162      	cbz	r2, b9ada <_ZNK6String9compareToERKS_+0x22>
   b9ac0:	b941      	cbnz	r1, b9ad4 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b9ac2:	6880      	ldr	r0, [r0, #8]
   b9ac4:	b160      	cbz	r0, b9ae0 <_ZNK6String9compareToERKS_+0x28>
   b9ac6:	7810      	ldrb	r0, [r2, #0]
   b9ac8:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b9aca:	6898      	ldr	r0, [r3, #8]
   b9acc:	b140      	cbz	r0, b9ae0 <_ZNK6String9compareToERKS_+0x28>
   b9ace:	7809      	ldrb	r1, [r1, #0]
   b9ad0:	4248      	negs	r0, r1
   b9ad2:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b9ad4:	4610      	mov	r0, r2
   b9ad6:	f001 be13 	b.w	bb700 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b9ada:	2900      	cmp	r1, #0
   b9adc:	d1f5      	bne.n	b9aca <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b9ade:	4608      	mov	r0, r1
}
   b9ae0:	4770      	bx	lr

000b9ae2 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b9ae2:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b9ae4:	6882      	ldr	r2, [r0, #8]
   b9ae6:	688b      	ldr	r3, [r1, #8]
   b9ae8:	429a      	cmp	r2, r3
   b9aea:	d105      	bne.n	b9af8 <_ZNK6String6equalsERKS_+0x16>
   b9aec:	f7ff ffe4 	bl	b9ab8 <_ZNK6String9compareToERKS_>
   b9af0:	fab0 f080 	clz	r0, r0
   b9af4:	0940      	lsrs	r0, r0, #5
}
   b9af6:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b9af8:	2000      	movs	r0, #0
   b9afa:	e7fc      	b.n	b9af6 <_ZNK6String6equalsERKS_+0x14>

000b9afc <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   b9afc:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b9afe:	6882      	ldr	r2, [r0, #8]
   b9b00:	b93a      	cbnz	r2, b9b12 <_ZNK6String6equalsEPKc+0x16>
   b9b02:	b121      	cbz	r1, b9b0e <_ZNK6String6equalsEPKc+0x12>
   b9b04:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b9b06:	fab0 f080 	clz	r0, r0
   b9b0a:	0940      	lsrs	r0, r0, #5
   b9b0c:	e000      	b.n	b9b10 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b9b0e:	2001      	movs	r0, #1
}
   b9b10:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b9b12:	6800      	ldr	r0, [r0, #0]
   b9b14:	b909      	cbnz	r1, b9b1a <_ZNK6String6equalsEPKc+0x1e>
   b9b16:	7800      	ldrb	r0, [r0, #0]
   b9b18:	e7f5      	b.n	b9b06 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b9b1a:	f001 fdf1 	bl	bb700 <strcmp>
   b9b1e:	e7f2      	b.n	b9b06 <_ZNK6String6equalsEPKc+0xa>

000b9b20 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b9b20:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b9b22:	6883      	ldr	r3, [r0, #8]
   b9b24:	4293      	cmp	r3, r2
   b9b26:	d907      	bls.n	b9b38 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b9b28:	6804      	ldr	r4, [r0, #0]
   b9b2a:	6809      	ldr	r1, [r1, #0]
   b9b2c:	18a0      	adds	r0, r4, r2
   b9b2e:	f001 fe21 	bl	bb774 <strstr>
	if (found == NULL) return -1;
   b9b32:	b108      	cbz	r0, b9b38 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b9b34:	1b00      	subs	r0, r0, r4
}
   b9b36:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b9b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9b3c:	e7fb      	b.n	b9b36 <_ZNK6String7indexOfERKS_j+0x16>

000b9b3e <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b9b3e:	2200      	movs	r2, #0
   b9b40:	f7ff bfee 	b.w	b9b20 <_ZNK6String7indexOfERKS_j>

000b9b44 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b9b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b9b46:	429a      	cmp	r2, r3
{
   b9b48:	460f      	mov	r7, r1
   b9b4a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b9b4c:	490c      	ldr	r1, [pc, #48]	; (b9b80 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b9b4e:	bf88      	it	hi
   b9b50:	4613      	movhi	r3, r2
{
   b9b52:	4614      	mov	r4, r2
   b9b54:	4606      	mov	r6, r0
	if (left > right) {
   b9b56:	bf84      	itt	hi
   b9b58:	462c      	movhi	r4, r5
   b9b5a:	461d      	movhi	r5, r3
	String out;
   b9b5c:	f7ff ff0b 	bl	b9976 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b9b60:	68bb      	ldr	r3, [r7, #8]
   b9b62:	42a3      	cmp	r3, r4
   b9b64:	d30a      	bcc.n	b9b7c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b9b66:	6839      	ldr	r1, [r7, #0]
   b9b68:	42ab      	cmp	r3, r5
   b9b6a:	bf94      	ite	ls
   b9b6c:	ebc4 0203 	rsbls	r2, r4, r3
   b9b70:	ebc4 0205 	rsbhi	r2, r4, r5
   b9b74:	4421      	add	r1, r4
   b9b76:	4630      	mov	r0, r6
   b9b78:	f7ff fee4 	bl	b9944 <_ZN6String4copyEPKcj>
	return out;
}
   b9b7c:	4630      	mov	r0, r6
   b9b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9b80:	000bdbca 	.word	0x000bdbca

000b9b84 <_ZNK6String9substringEj>:
{
   b9b84:	b510      	push	{r4, lr}
   b9b86:	4604      	mov	r4, r0
	return substring(left, len);
   b9b88:	688b      	ldr	r3, [r1, #8]
   b9b8a:	f7ff ffdb 	bl	b9b44 <_ZNK6String9substringEjj>
}
   b9b8e:	4620      	mov	r0, r4
   b9b90:	bd10      	pop	{r4, pc}
	...

000b9b94 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b9b94:	4b05      	ldr	r3, [pc, #20]	; (b9bac <_GLOBAL__sub_I_System+0x18>)
   b9b96:	2202      	movs	r2, #2
   b9b98:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b9b9a:	4b05      	ldr	r3, [pc, #20]	; (b9bb0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b9b9c:	4a05      	ldr	r2, [pc, #20]	; (b9bb4 <_GLOBAL__sub_I_System+0x20>)
   b9b9e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b9ba0:	2000      	movs	r0, #0
   b9ba2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b9ba6:	f7fe b9cb 	b.w	b7f40 <set_system_mode>
   b9baa:	bf00      	nop
   b9bac:	2003e6f8 	.word	0x2003e6f8
   b9bb0:	2003e6ec 	.word	0x2003e6ec
   b9bb4:	ffff0000 	.word	0xffff0000

000b9bb8 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b9bb8:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9bba:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b9bbc:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9bc0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b9bc2:	2201      	movs	r2, #1
   b9bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9bc8:	f10d 0107 	add.w	r1, sp, #7
   b9bcc:	47a0      	blx	r4
}
   b9bce:	b002      	add	sp, #8
   b9bd0:	bd10      	pop	{r4, pc}

000b9bd2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b9bd2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b9bd4:	6803      	ldr	r3, [r0, #0]
   b9bd6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b9bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9bdc:	46a4      	mov	ip, r4
}
   b9bde:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b9be2:	4760      	bx	ip

000b9be4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9be4:	b513      	push	{r0, r1, r4, lr}
   b9be6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b9be8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9bea:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b9bee:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b9bf0:	f10d 0107 	add.w	r1, sp, #7
   b9bf4:	2201      	movs	r2, #1
   b9bf6:	47a0      	blx	r4
}
   b9bf8:	b002      	add	sp, #8
   b9bfa:	bd10      	pop	{r4, pc}

000b9bfc <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b9bfc:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b9bfe:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9c00:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9c04:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9c08:	429a      	cmp	r2, r3
int TCPClient::read() {
   b9c0a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9c0c:	d008      	beq.n	b9c20 <_ZN9TCPClient4readEv+0x24>
   b9c0e:	6963      	ldr	r3, [r4, #20]
   b9c10:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9c14:	1c51      	adds	r1, r2, #1
   b9c16:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b9c1a:	4413      	add	r3, r2
   b9c1c:	7918      	ldrb	r0, [r3, #4]
}
   b9c1e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9c20:	6803      	ldr	r3, [r0, #0]
   b9c22:	691b      	ldr	r3, [r3, #16]
   b9c24:	4798      	blx	r3
   b9c26:	2800      	cmp	r0, #0
   b9c28:	d1f1      	bne.n	b9c0e <_ZN9TCPClient4readEv+0x12>
   b9c2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9c2e:	e7f6      	b.n	b9c1e <_ZN9TCPClient4readEv+0x22>

000b9c30 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b9c30:	4770      	bx	lr

000b9c32 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b9c32:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b9c34:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b9c36:	43c0      	mvns	r0, r0
   b9c38:	0fc0      	lsrs	r0, r0, #31
   b9c3a:	4770      	bx	lr

000b9c3c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9c3c:	4770      	bx	lr
	...

000b9c40 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9c40:	4b06      	ldr	r3, [pc, #24]	; (b9c5c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9c42:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9c44:	b510      	push	{r4, lr}
   b9c46:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9c4a:	d005      	beq.n	b9c58 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9c4c:	4608      	mov	r0, r1
   b9c4e:	f000 fd1d 	bl	ba68c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9c52:	2800      	cmp	r0, #0
   b9c54:	bf08      	it	eq
   b9c56:	2400      	moveq	r4, #0
      }
   b9c58:	4620      	mov	r0, r4
   b9c5a:	bd10      	pop	{r4, pc}
   b9c5c:	000bdda0 	.word	0x000bdda0

000b9c60 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9c60:	b510      	push	{r4, lr}
   b9c62:	21ac      	movs	r1, #172	; 0xac
   b9c64:	4604      	mov	r4, r0
   b9c66:	f7fa fa1c 	bl	b40a2 <_ZdlPvj>
   b9c6a:	4620      	mov	r0, r4
   b9c6c:	bd10      	pop	{r4, pc}

000b9c6e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b9c6e:	21ac      	movs	r1, #172	; 0xac
   b9c70:	f7fa ba17 	b.w	b40a2 <_ZdlPvj>

000b9c74 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b9c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b9c78:	f04f 0800 	mov.w	r8, #0
   b9c7c:	b086      	sub	sp, #24
   b9c7e:	461c      	mov	r4, r3
   b9c80:	f8c0 8004 	str.w	r8, [r0, #4]
   b9c84:	4605      	mov	r5, r0
   b9c86:	460e      	mov	r6, r1
   b9c88:	4617      	mov	r7, r2
    struct timeval tv = {};
   b9c8a:	4641      	mov	r1, r8
   b9c8c:	2210      	movs	r2, #16
   b9c8e:	a802      	add	r0, sp, #8
   b9c90:	f001 fd00 	bl	bb694 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b9c94:	1c63      	adds	r3, r4, #1
   b9c96:	d009      	beq.n	b9cac <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b9c98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9c9c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b9ca0:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b9ca4:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b9ca8:	435c      	muls	r4, r3
   b9caa:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b9cac:	6968      	ldr	r0, [r5, #20]
   b9cae:	2310      	movs	r3, #16
   b9cb0:	9300      	str	r3, [sp, #0]
   b9cb2:	6800      	ldr	r0, [r0, #0]
   b9cb4:	ab02      	add	r3, sp, #8
   b9cb6:	f241 0205 	movw	r2, #4101	; 0x1005
   b9cba:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9cbe:	f7fe f88f 	bl	b7de0 <sock_setsockopt>
    if (ret < 0) {
   b9cc2:	2800      	cmp	r0, #0
   b9cc4:	da07      	bge.n	b9cd6 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b9cc6:	f7fe fa17 	bl	b80f8 <__errno>
   b9cca:	6803      	ldr	r3, [r0, #0]
   b9ccc:	606b      	str	r3, [r5, #4]
        return 0;
   b9cce:	2000      	movs	r0, #0
}
   b9cd0:	b006      	add	sp, #24
   b9cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b9cd6:	6968      	ldr	r0, [r5, #20]
   b9cd8:	2300      	movs	r3, #0
   b9cda:	6800      	ldr	r0, [r0, #0]
   b9cdc:	463a      	mov	r2, r7
   b9cde:	4631      	mov	r1, r6
   b9ce0:	f7fe f89e 	bl	b7e20 <sock_send>
    if (ret < 0) {
   b9ce4:	1e03      	subs	r3, r0, #0
   b9ce6:	dbee      	blt.n	b9cc6 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b9ce8:	4618      	mov	r0, r3
   b9cea:	e7f1      	b.n	b9cd0 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b9cec <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b9cec:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b9cee:	6984      	ldr	r4, [r0, #24]
   b9cf0:	4b0a      	ldr	r3, [pc, #40]	; (b9d1c <_ZN9TCPClientD1Ev+0x30>)
   b9cf2:	6003      	str	r3, [r0, #0]
   b9cf4:	4605      	mov	r5, r0
   b9cf6:	b17c      	cbz	r4, b9d18 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b9cf8:	6863      	ldr	r3, [r4, #4]
   b9cfa:	3b01      	subs	r3, #1
   b9cfc:	6063      	str	r3, [r4, #4]
   b9cfe:	b95b      	cbnz	r3, b9d18 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b9d00:	6823      	ldr	r3, [r4, #0]
   b9d02:	4620      	mov	r0, r4
   b9d04:	689b      	ldr	r3, [r3, #8]
   b9d06:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b9d08:	68a3      	ldr	r3, [r4, #8]
   b9d0a:	3b01      	subs	r3, #1
   b9d0c:	60a3      	str	r3, [r4, #8]
   b9d0e:	b91b      	cbnz	r3, b9d18 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b9d10:	6823      	ldr	r3, [r4, #0]
   b9d12:	4620      	mov	r0, r4
   b9d14:	68db      	ldr	r3, [r3, #12]
   b9d16:	4798      	blx	r3
   b9d18:	4628      	mov	r0, r5
   b9d1a:	bd38      	pop	{r3, r4, r5, pc}
   b9d1c:	000bded4 	.word	0x000bded4

000b9d20 <_ZN9TCPClientD0Ev>:
   b9d20:	b510      	push	{r4, lr}
   b9d22:	4604      	mov	r4, r0
   b9d24:	f7ff ffe2 	bl	b9cec <_ZN9TCPClientD1Ev>
   b9d28:	4620      	mov	r0, r4
   b9d2a:	211c      	movs	r1, #28
   b9d2c:	f7fa f9b9 	bl	b40a2 <_ZdlPvj>
   b9d30:	4620      	mov	r0, r4
   b9d32:	bd10      	pop	{r4, pc}

000b9d34 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b9d34:	b530      	push	{r4, r5, lr}
   b9d36:	b087      	sub	sp, #28
   b9d38:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b9d3a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b9d3c:	4668      	mov	r0, sp
   b9d3e:	f7ff fc6b 	bl	b9618 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9d42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9d44:	3404      	adds	r4, #4
   b9d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9d48:	682b      	ldr	r3, [r5, #0]
   b9d4a:	7023      	strb	r3, [r4, #0]
    }
   b9d4c:	b007      	add	sp, #28
   b9d4e:	bd30      	pop	{r4, r5, pc}

000b9d50 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b9d50:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b9d52:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b9d54:	4b05      	ldr	r3, [pc, #20]	; (b9d6c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b9d56:	4604      	mov	r4, r0
   b9d58:	358c      	adds	r5, #140	; 0x8c
   b9d5a:	f844 3b04 	str.w	r3, [r4], #4
   b9d5e:	4606      	mov	r6, r0
   b9d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9d64:	682b      	ldr	r3, [r5, #0]
   b9d66:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b9d68:	4630      	mov	r0, r6
   b9d6a:	bd70      	pop	{r4, r5, r6, pc}
   b9d6c:	000bde4c 	.word	0x000bde4c

000b9d70 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9d74:	4698      	mov	r8, r3
    stop();
   b9d76:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9d78:	b093      	sub	sp, #76	; 0x4c
   b9d7a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b9d7c:	2400      	movs	r4, #0
    stop();
   b9d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9d80:	4606      	mov	r6, r0
   b9d82:	4617      	mov	r7, r2
    stop();
   b9d84:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9d86:	4628      	mov	r0, r5
   b9d88:	466b      	mov	r3, sp
   b9d8a:	4622      	mov	r2, r4
   b9d8c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b9d8e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9d90:	f7fe f81e 	bl	b7dd0 <netdb_getaddrinfo>
   b9d94:	4605      	mov	r5, r0
   b9d96:	2800      	cmp	r0, #0
   b9d98:	d163      	bne.n	b9e62 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b9d9a:	9b00      	ldr	r3, [sp, #0]
   b9d9c:	2b00      	cmp	r3, #0
   b9d9e:	d04b      	beq.n	b9e38 <_ZN9TCPClient7connectEPKctm+0xc8>
   b9da0:	695b      	ldr	r3, [r3, #20]
   b9da2:	2b00      	cmp	r3, #0
   b9da4:	d048      	beq.n	b9e38 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b9da6:	a806      	add	r0, sp, #24
   b9da8:	f7ff fbf2 	bl	b9590 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b9dac:	9b00      	ldr	r3, [sp, #0]
   b9dae:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b9db0:	7863      	ldrb	r3, [r4, #1]
   b9db2:	2b02      	cmp	r3, #2
   b9db4:	d104      	bne.n	b9dc0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b9db6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b9db8:	a806      	add	r0, sp, #24
   b9dba:	f7ff ffbb 	bl	b9d34 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b9dbe:	e026      	b.n	b9e0e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b9dc0:	2b0a      	cmp	r3, #10
   b9dc2:	d124      	bne.n	b9e0e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b9dc4:	2211      	movs	r2, #17
   b9dc6:	4629      	mov	r1, r5
   b9dc8:	a801      	add	r0, sp, #4
   b9dca:	f001 fc63 	bl	bb694 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9dce:	68a3      	ldr	r3, [r4, #8]
   b9dd0:	2b00      	cmp	r3, #0
   b9dd2:	d038      	beq.n	b9e46 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9dd4:	f104 0308 	add.w	r3, r4, #8
   b9dd8:	f10d 0c04 	add.w	ip, sp, #4
   b9ddc:	3418      	adds	r4, #24
   b9dde:	6818      	ldr	r0, [r3, #0]
   b9de0:	6859      	ldr	r1, [r3, #4]
   b9de2:	4662      	mov	r2, ip
   b9de4:	c203      	stmia	r2!, {r0, r1}
   b9de6:	3308      	adds	r3, #8
   b9de8:	42a3      	cmp	r3, r4
   b9dea:	4694      	mov	ip, r2
   b9dec:	d1f7      	bne.n	b9dde <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b9dee:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b9df0:	a901      	add	r1, sp, #4
   b9df2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b9df4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b9df8:	f7ff fbd8 	bl	b95ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9dfc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9e00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9e04:	ac07      	add	r4, sp, #28
   b9e06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9e08:	f8dc 3000 	ldr.w	r3, [ip]
   b9e0c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b9e0e:	a806      	add	r0, sp, #24
   b9e10:	f7ff fbde 	bl	b95d0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b9e14:	b180      	cbz	r0, b9e38 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b9e16:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b9e18:	ad07      	add	r5, sp, #28
   b9e1a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b9e1e:	4b12      	ldr	r3, [pc, #72]	; (b9e68 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b9e20:	930c      	str	r3, [sp, #48]	; 0x30
   b9e22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9e24:	ac0d      	add	r4, sp, #52	; 0x34
   b9e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9e28:	682b      	ldr	r3, [r5, #0]
   b9e2a:	7023      	strb	r3, [r4, #0]
   b9e2c:	463a      	mov	r2, r7
   b9e2e:	4643      	mov	r3, r8
   b9e30:	a90c      	add	r1, sp, #48	; 0x30
   b9e32:	4630      	mov	r0, r6
   b9e34:	47c8      	blx	r9
   b9e36:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b9e38:	9800      	ldr	r0, [sp, #0]
   b9e3a:	f7fd ffc1 	bl	b7dc0 <netdb_freeaddrinfo>
}
   b9e3e:	4628      	mov	r0, r5
   b9e40:	b013      	add	sp, #76	; 0x4c
   b9e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9e46:	68e3      	ldr	r3, [r4, #12]
   b9e48:	2b00      	cmp	r3, #0
   b9e4a:	d1c3      	bne.n	b9dd4 <_ZN9TCPClient7connectEPKctm+0x64>
   b9e4c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9e50:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b9e54:	f7fd ffa4 	bl	b7da0 <inet_htonl>
   b9e58:	4581      	cmp	r9, r0
   b9e5a:	d1bb      	bne.n	b9dd4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b9e5c:	f104 0114 	add.w	r1, r4, #20
   b9e60:	e7aa      	b.n	b9db8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9e62:	4625      	mov	r5, r4
   b9e64:	e7e8      	b.n	b9e38 <_ZN9TCPClient7connectEPKctm+0xc8>
   b9e66:	bf00      	nop
   b9e68:	000bde4c 	.word	0x000bde4c

000b9e6c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b9e6c:	b538      	push	{r3, r4, r5, lr}
   b9e6e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b9e70:	681a      	ldr	r2, [r3, #0]
   b9e72:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b9e74:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b9e76:	da10      	bge.n	b9e9a <_ZN9TCPClient9connectedEv+0x2e>
   b9e78:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9e7c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9e80:	429a      	cmp	r2, r3
   b9e82:	d10a      	bne.n	b9e9a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b9e84:	6803      	ldr	r3, [r0, #0]
   b9e86:	691b      	ldr	r3, [r3, #16]
   b9e88:	4798      	blx	r3
        if (!rv) {
   b9e8a:	4604      	mov	r4, r0
   b9e8c:	b928      	cbnz	r0, b9e9a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b9e8e:	682b      	ldr	r3, [r5, #0]
   b9e90:	4628      	mov	r0, r5
   b9e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9e94:	4798      	blx	r3
        rv = available();
   b9e96:	4620      	mov	r0, r4
}
   b9e98:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b9e9a:	2001      	movs	r0, #1
   b9e9c:	e7fc      	b.n	b9e98 <_ZN9TCPClient9connectedEv+0x2c>

000b9e9e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b9e9e:	b510      	push	{r4, lr}
   b9ea0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9ea2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9ea6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9eaa:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b9eac:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9eae:	d005      	beq.n	b9ebc <_ZN9TCPClient4peekEv+0x1e>
   b9eb0:	6963      	ldr	r3, [r4, #20]
   b9eb2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9eb6:	4413      	add	r3, r2
   b9eb8:	7918      	ldrb	r0, [r3, #4]
}
   b9eba:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9ebc:	6803      	ldr	r3, [r0, #0]
   b9ebe:	691b      	ldr	r3, [r3, #16]
   b9ec0:	4798      	blx	r3
   b9ec2:	2800      	cmp	r0, #0
   b9ec4:	d1f4      	bne.n	b9eb0 <_ZN9TCPClient4peekEv+0x12>
   b9ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9eca:	e7f6      	b.n	b9eba <_ZN9TCPClient4peekEv+0x1c>

000b9ecc <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9ece:	6943      	ldr	r3, [r0, #20]
   b9ed0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b9ed2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9ed6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9eda:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9edc:	4605      	mov	r5, r0
   b9ede:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b9ee0:	d016      	beq.n	b9f10 <_ZN9TCPClient4readEPhj+0x44>
   b9ee2:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b9ee4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b9ee8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b9eec:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b9eee:	42bc      	cmp	r4, r7
   b9ef0:	bf28      	it	cs
   b9ef2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b9ef4:	3304      	adds	r3, #4
   b9ef6:	4622      	mov	r2, r4
   b9ef8:	4419      	add	r1, r3
   b9efa:	4630      	mov	r0, r6
   b9efc:	f001 fba2 	bl	bb644 <memcpy>
   b9f00:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b9f02:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b9f06:	4423      	add	r3, r4
   b9f08:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b9f0c:	4620      	mov	r0, r4
   b9f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b9f10:	6803      	ldr	r3, [r0, #0]
   b9f12:	691b      	ldr	r3, [r3, #16]
   b9f14:	4798      	blx	r3
   b9f16:	2800      	cmp	r0, #0
   b9f18:	d1e3      	bne.n	b9ee2 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b9f1a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9f1e:	e7f5      	b.n	b9f0c <_ZN9TCPClient4readEPhj+0x40>

000b9f20 <_ZN9TCPClient12flush_bufferEv>:
   b9f20:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b9f22:	2300      	movs	r3, #0
   b9f24:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9f28:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b9f2a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b9f2e:	4770      	bx	lr

000b9f30 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9f34:	461f      	mov	r7, r3
    stop();
   b9f36:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9f38:	460c      	mov	r4, r1
    stop();
   b9f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9f3c:	b08a      	sub	sp, #40	; 0x28
   b9f3e:	4605      	mov	r5, r0
   b9f40:	4616      	mov	r6, r2
    stop();
   b9f42:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b9f44:	7d23      	ldrb	r3, [r4, #20]
   b9f46:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b9f4a:	2b04      	cmp	r3, #4
   b9f4c:	bf0c      	ite	eq
   b9f4e:	2002      	moveq	r0, #2
   b9f50:	200a      	movne	r0, #10
   b9f52:	2206      	movs	r2, #6
   b9f54:	2101      	movs	r1, #1
   b9f56:	f7fd ff6b 	bl	b7e30 <sock_socket>
   b9f5a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b9f5e:	696b      	ldr	r3, [r5, #20]
   b9f60:	681b      	ldr	r3, [r3, #0]
   b9f62:	2b00      	cmp	r3, #0
   b9f64:	da08      	bge.n	b9f78 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b9f66:	682b      	ldr	r3, [r5, #0]
   b9f68:	4628      	mov	r0, r5
   b9f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9f6c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b9f6e:	4798      	blx	r3
}
   b9f70:	4620      	mov	r0, r4
   b9f72:	b00a      	add	sp, #40	; 0x28
   b9f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b9f78:	4628      	mov	r0, r5
   b9f7a:	f7ff ffd1 	bl	b9f20 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b9f7e:	b1b7      	cbz	r7, b9fae <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b9f80:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9f82:	a903      	add	r1, sp, #12
   b9f84:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b9f86:	9303      	str	r3, [sp, #12]
   b9f88:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9f8c:	f7fd fef8 	bl	b7d80 <if_index_to_name>
   b9f90:	2800      	cmp	r0, #0
   b9f92:	d1e8      	bne.n	b9f66 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b9f94:	6968      	ldr	r0, [r5, #20]
   b9f96:	2306      	movs	r3, #6
   b9f98:	9300      	str	r3, [sp, #0]
   b9f9a:	6800      	ldr	r0, [r0, #0]
   b9f9c:	ab03      	add	r3, sp, #12
   b9f9e:	f241 020b 	movw	r2, #4107	; 0x100b
   b9fa2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9fa6:	f7fd ff1b 	bl	b7de0 <sock_setsockopt>
   b9faa:	2800      	cmp	r0, #0
   b9fac:	d1db      	bne.n	b9f66 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b9fae:	221c      	movs	r2, #28
   b9fb0:	2100      	movs	r1, #0
   b9fb2:	a803      	add	r0, sp, #12
   b9fb4:	f001 fb6e 	bl	bb694 <memset>
    if (ip.version() == 4) {
   b9fb8:	7d23      	ldrb	r3, [r4, #20]
   b9fba:	2b04      	cmp	r3, #4
   b9fbc:	d11d      	bne.n	b9ffa <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b9fbe:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b9fc2:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b9fc4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b9fc8:	f7fd fef2 	bl	b7db0 <inet_htons>
   b9fcc:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b9fd0:	6860      	ldr	r0, [r4, #4]
   b9fd2:	f7fd fee5 	bl	b7da0 <inet_htonl>
   b9fd6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b9fd8:	696b      	ldr	r3, [r5, #20]
   b9fda:	221c      	movs	r2, #28
   b9fdc:	6818      	ldr	r0, [r3, #0]
   b9fde:	a903      	add	r1, sp, #12
   b9fe0:	f7fd ff0e 	bl	b7e00 <sock_connect>
   b9fe4:	2800      	cmp	r0, #0
   b9fe6:	d1be      	bne.n	b9f66 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b9fe8:	3404      	adds	r4, #4
   b9fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9fec:	696d      	ldr	r5, [r5, #20]
   b9fee:	358c      	adds	r5, #140	; 0x8c
   b9ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9ff2:	6823      	ldr	r3, [r4, #0]
   b9ff4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b9ff6:	2401      	movs	r4, #1
   b9ff8:	e7ba      	b.n	b9f70 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b9ffa:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b9ffe:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   ba000:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   ba004:	f7fd fed4 	bl	b7db0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   ba008:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   ba00a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   ba00e:	1d23      	adds	r3, r4, #4
   ba010:	f104 0714 	add.w	r7, r4, #20
   ba014:	6818      	ldr	r0, [r3, #0]
   ba016:	6859      	ldr	r1, [r3, #4]
   ba018:	4632      	mov	r2, r6
   ba01a:	c203      	stmia	r2!, {r0, r1}
   ba01c:	3308      	adds	r3, #8
   ba01e:	42bb      	cmp	r3, r7
   ba020:	4616      	mov	r6, r2
   ba022:	d1f7      	bne.n	ba014 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   ba024:	e7d8      	b.n	b9fd8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000ba028 <_ZN9TCPClient9availableEv>:
{
   ba028:	b530      	push	{r4, r5, lr}
   ba02a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   ba02c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   ba030:	b08b      	sub	sp, #44	; 0x2c
   ba032:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   ba034:	b12b      	cbz	r3, ba042 <_ZN9TCPClient9availableEv+0x1a>
   ba036:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   ba03a:	429a      	cmp	r2, r3
   ba03c:	d101      	bne.n	ba042 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   ba03e:	f7ff ff6f 	bl	b9f20 <_ZN9TCPClient12flush_bufferEv>
   ba042:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   ba044:	6808      	ldr	r0, [r1, #0]
   ba046:	2800      	cmp	r0, #0
   ba048:	db18      	blt.n	ba07c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   ba04a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   ba04e:	2d7f      	cmp	r5, #127	; 0x7f
   ba050:	d814      	bhi.n	ba07c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   ba052:	3104      	adds	r1, #4
   ba054:	2308      	movs	r3, #8
   ba056:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   ba05a:	4429      	add	r1, r5
   ba05c:	f7fd fed8 	bl	b7e10 <sock_recv>
            if (ret > 0) {
   ba060:	2800      	cmp	r0, #0
   ba062:	dd13      	ble.n	ba08c <_ZN9TCPClient9availableEv+0x64>
   ba064:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   ba066:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba06a:	b90a      	cbnz	r2, ba070 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   ba06c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   ba070:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   ba072:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba076:	4410      	add	r0, r2
   ba078:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   ba07c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   ba07e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   ba082:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   ba086:	1ac0      	subs	r0, r0, r3
   ba088:	b00b      	add	sp, #44	; 0x2c
   ba08a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   ba08c:	f7fe f834 	bl	b80f8 <__errno>
   ba090:	6803      	ldr	r3, [r0, #0]
   ba092:	2b0b      	cmp	r3, #11
   ba094:	d0f2      	beq.n	ba07c <_ZN9TCPClient9availableEv+0x54>
   ba096:	f7fe f82f 	bl	b80f8 <__errno>
   ba09a:	6803      	ldr	r3, [r0, #0]
   ba09c:	2b0b      	cmp	r3, #11
   ba09e:	d0ed      	beq.n	ba07c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   ba0a0:	2320      	movs	r3, #32
   ba0a2:	2500      	movs	r5, #0
   ba0a4:	e9cd 3502 	strd	r3, r5, [sp, #8]
   ba0a8:	f7fe f826 	bl	b80f8 <__errno>
   ba0ac:	6803      	ldr	r3, [r0, #0]
   ba0ae:	9301      	str	r3, [sp, #4]
   ba0b0:	4b08      	ldr	r3, [pc, #32]	; (ba0d4 <_ZN9TCPClient9availableEv+0xac>)
   ba0b2:	4909      	ldr	r1, [pc, #36]	; (ba0d8 <_ZN9TCPClient9availableEv+0xb0>)
   ba0b4:	9300      	str	r3, [sp, #0]
   ba0b6:	aa02      	add	r2, sp, #8
   ba0b8:	462b      	mov	r3, r5
   ba0ba:	2032      	movs	r0, #50	; 0x32
   ba0bc:	f7fd ff38 	bl	b7f30 <log_message>
                    sock_close(d_->sock);
   ba0c0:	6963      	ldr	r3, [r4, #20]
   ba0c2:	6818      	ldr	r0, [r3, #0]
   ba0c4:	f7fd fe94 	bl	b7df0 <sock_close>
   ba0c8:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   ba0ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba0ce:	601a      	str	r2, [r3, #0]
   ba0d0:	e7d4      	b.n	ba07c <_ZN9TCPClient9availableEv+0x54>
   ba0d2:	bf00      	nop
   ba0d4:	000bde9f 	.word	0x000bde9f
   ba0d8:	000bde98 	.word	0x000bde98

000ba0dc <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   ba0dc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   ba0de:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   ba0e0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   ba0e2:	6818      	ldr	r0, [r3, #0]
   ba0e4:	2800      	cmp	r0, #0
   ba0e6:	db01      	blt.n	ba0ec <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   ba0e8:	f7fd fe82 	bl	b7df0 <sock_close>
   ba0ec:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   ba0ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba0f2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   ba0f4:	6960      	ldr	r0, [r4, #20]
   ba0f6:	2211      	movs	r2, #17
   ba0f8:	2100      	movs	r1, #0
   ba0fa:	308c      	adds	r0, #140	; 0x8c
   ba0fc:	f001 faca 	bl	bb694 <memset>
    flush_buffer();
   ba100:	4620      	mov	r0, r4
}
   ba102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   ba106:	f7ff bf0b 	b.w	b9f20 <_ZN9TCPClient12flush_bufferEv>

000ba10a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   ba10a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   ba10c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   ba10e:	4604      	mov	r4, r0
          total(0) {
   ba110:	6001      	str	r1, [r0, #0]
   ba112:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   ba116:	3088      	adds	r0, #136	; 0x88
   ba118:	f7ff fa3a 	bl	b9590 <_ZN9IPAddressC1Ev>
}
   ba11c:	4620      	mov	r0, r4
   ba11e:	bd10      	pop	{r4, pc}

000ba120 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   ba120:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba122:	2300      	movs	r3, #0
   ba124:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   ba128:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   ba12c:	4a0e      	ldr	r2, [pc, #56]	; (ba168 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   ba12e:	6103      	str	r3, [r0, #16]
   ba130:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba132:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   ba134:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba136:	20ac      	movs	r0, #172	; 0xac
   ba138:	9101      	str	r1, [sp, #4]
   ba13a:	f7f9 ffac 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba13e:	1e05      	subs	r5, r0, #0
   ba140:	f105 060c 	add.w	r6, r5, #12
   ba144:	d008      	beq.n	ba158 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   ba146:	2301      	movs	r3, #1
   ba148:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   ba14c:	4b07      	ldr	r3, [pc, #28]	; (ba16c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba14e:	9901      	ldr	r1, [sp, #4]
   ba150:	602b      	str	r3, [r5, #0]
   ba152:	4630      	mov	r0, r6
   ba154:	f7ff ffd9 	bl	ba10a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   ba158:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   ba15a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   ba15e:	f7ff fedf 	bl	b9f20 <_ZN9TCPClient12flush_bufferEv>
}
   ba162:	b002      	add	sp, #8
   ba164:	bd70      	pop	{r4, r5, r6, pc}
   ba166:	bf00      	nop
   ba168:	000bded4 	.word	0x000bded4
   ba16c:	000bdeb8 	.word	0x000bdeb8

000ba170 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   ba170:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   ba172:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   ba176:	4604      	mov	r4, r0
        : TCPClient(-1) {
   ba178:	f7ff ffd2 	bl	ba120 <_ZN9TCPClientC1Ei>
}
   ba17c:	4620      	mov	r0, r4
   ba17e:	bd10      	pop	{r4, pc}

000ba180 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   ba180:	b510      	push	{r4, lr}
   ba182:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   ba184:	6800      	ldr	r0, [r0, #0]
   ba186:	2800      	cmp	r0, #0
   ba188:	db01      	blt.n	ba18e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   ba18a:	f7fd fe31 	bl	b7df0 <sock_close>
    }
}
   ba18e:	4620      	mov	r0, r4
   ba190:	bd10      	pop	{r4, pc}

000ba192 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   ba192:	300c      	adds	r0, #12
   ba194:	f7ff bff4 	b.w	ba180 <_ZN9TCPClient4DataD1Ev>

000ba198 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   ba198:	4b02      	ldr	r3, [pc, #8]	; (ba1a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   ba19a:	681a      	ldr	r2, [r3, #0]
   ba19c:	4b02      	ldr	r3, [pc, #8]	; (ba1a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   ba19e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   ba1a0:	4770      	bx	lr
   ba1a2:	bf00      	nop
   ba1a4:	200352e0 	.word	0x200352e0
   ba1a8:	2003e6fc 	.word	0x2003e6fc

000ba1ac <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   ba1ac:	4770      	bx	lr

000ba1ae <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba1ae:	7441      	strb	r1, [r0, #17]
}
   ba1b0:	4770      	bx	lr

000ba1b2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   ba1b2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   ba1b4:	7c00      	ldrb	r0, [r0, #16]
   ba1b6:	f7fd fe6b 	bl	b7e90 <hal_usart_available_data_for_write>
}
   ba1ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba1be:	bd08      	pop	{r3, pc}

000ba1c0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   ba1c0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   ba1c2:	7c00      	ldrb	r0, [r0, #16]
   ba1c4:	f7fd fe44 	bl	b7e50 <hal_usart_available>
}
   ba1c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba1cc:	bd08      	pop	{r3, pc}

000ba1ce <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   ba1ce:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   ba1d0:	7c00      	ldrb	r0, [r0, #16]
   ba1d2:	f7fd fe4d 	bl	b7e70 <hal_usart_peek>
}
   ba1d6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba1da:	bd08      	pop	{r3, pc}

000ba1dc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   ba1dc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   ba1de:	7c00      	ldrb	r0, [r0, #16]
   ba1e0:	f7fd fe3e 	bl	b7e60 <hal_usart_read>
}
   ba1e4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba1e8:	bd08      	pop	{r3, pc}

000ba1ea <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   ba1ea:	7c00      	ldrb	r0, [r0, #16]
   ba1ec:	f7fd be48 	b.w	b7e80 <hal_usart_flush>

000ba1f0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   ba1f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba1f2:	7c45      	ldrb	r5, [r0, #17]
{
   ba1f4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba1f6:	b12d      	cbz	r5, ba204 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   ba1f8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   ba1fa:	b003      	add	sp, #12
   ba1fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   ba200:	f7fd be1e 	b.w	b7e40 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba204:	7c00      	ldrb	r0, [r0, #16]
   ba206:	9101      	str	r1, [sp, #4]
   ba208:	f7fd fe42 	bl	b7e90 <hal_usart_available_data_for_write>
   ba20c:	2800      	cmp	r0, #0
   ba20e:	9901      	ldr	r1, [sp, #4]
   ba210:	dcf2      	bgt.n	ba1f8 <_ZN11USARTSerial5writeEh+0x8>
}
   ba212:	4628      	mov	r0, r5
   ba214:	b003      	add	sp, #12
   ba216:	bd30      	pop	{r4, r5, pc}

000ba218 <_ZN11USARTSerialD0Ev>:
   ba218:	b510      	push	{r4, lr}
   ba21a:	2114      	movs	r1, #20
   ba21c:	4604      	mov	r4, r0
   ba21e:	f7f9 ff40 	bl	b40a2 <_ZdlPvj>
   ba222:	4620      	mov	r0, r4
   ba224:	bd10      	pop	{r4, pc}
	...

000ba228 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   ba228:	b510      	push	{r4, lr}
   ba22a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba22e:	4604      	mov	r4, r0
   ba230:	4608      	mov	r0, r1
   ba232:	4611      	mov	r1, r2
   ba234:	2200      	movs	r2, #0
   ba236:	e9c4 2301 	strd	r2, r3, [r4, #4]
   ba23a:	4b04      	ldr	r3, [pc, #16]	; (ba24c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   ba23c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba23e:	2301      	movs	r3, #1
  _serial = serial;
   ba240:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba242:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   ba244:	f7fd fe2c 	bl	b7ea0 <hal_usart_init_ex>
}
   ba248:	4620      	mov	r0, r4
   ba24a:	bd10      	pop	{r4, pc}
   ba24c:	000bdf3c 	.word	0x000bdf3c

000ba250 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba250:	7441      	strb	r1, [r0, #17]
}
   ba252:	4770      	bx	lr

000ba254 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba254:	4770      	bx	lr

000ba256 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   ba256:	4770      	bx	lr

000ba258 <_ZN9USBSerial4readEv>:
{
   ba258:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   ba25a:	2100      	movs	r1, #0
   ba25c:	7c00      	ldrb	r0, [r0, #16]
   ba25e:	f7fd fe47 	bl	b7ef0 <HAL_USB_USART_Receive_Data>
}
   ba262:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba266:	bd08      	pop	{r3, pc}

000ba268 <_ZN9USBSerial4peekEv>:
{
   ba268:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   ba26a:	2101      	movs	r1, #1
   ba26c:	7c00      	ldrb	r0, [r0, #16]
   ba26e:	f7fd fe3f 	bl	b7ef0 <HAL_USB_USART_Receive_Data>
}
   ba272:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba276:	bd08      	pop	{r3, pc}

000ba278 <_ZN9USBSerial17availableForWriteEv>:
{
   ba278:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   ba27a:	7c00      	ldrb	r0, [r0, #16]
   ba27c:	f7fd fe30 	bl	b7ee0 <HAL_USB_USART_Available_Data_For_Write>
}
   ba280:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba284:	bd08      	pop	{r3, pc}

000ba286 <_ZN9USBSerial9availableEv>:
{
   ba286:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   ba288:	7c00      	ldrb	r0, [r0, #16]
   ba28a:	f7fd fe21 	bl	b7ed0 <HAL_USB_USART_Available_Data>
}
   ba28e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba292:	bd08      	pop	{r3, pc}

000ba294 <_ZN9USBSerial5writeEh>:
{
   ba294:	b513      	push	{r0, r1, r4, lr}
   ba296:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba298:	7c00      	ldrb	r0, [r0, #16]
{
   ba29a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba29c:	f7fd fe20 	bl	b7ee0 <HAL_USB_USART_Available_Data_For_Write>
   ba2a0:	2800      	cmp	r0, #0
   ba2a2:	9901      	ldr	r1, [sp, #4]
   ba2a4:	dc01      	bgt.n	ba2aa <_ZN9USBSerial5writeEh+0x16>
   ba2a6:	7c60      	ldrb	r0, [r4, #17]
   ba2a8:	b120      	cbz	r0, ba2b4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   ba2aa:	7c20      	ldrb	r0, [r4, #16]
   ba2ac:	f7fd fe28 	bl	b7f00 <HAL_USB_USART_Send_Data>
   ba2b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   ba2b4:	b002      	add	sp, #8
   ba2b6:	bd10      	pop	{r4, pc}

000ba2b8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   ba2b8:	7c00      	ldrb	r0, [r0, #16]
   ba2ba:	f7fd be29 	b.w	b7f10 <HAL_USB_USART_Flush_Data>

000ba2be <_ZN9USBSerialD0Ev>:
   ba2be:	b510      	push	{r4, lr}
   ba2c0:	2114      	movs	r1, #20
   ba2c2:	4604      	mov	r4, r0
   ba2c4:	f7f9 feed 	bl	b40a2 <_ZdlPvj>
   ba2c8:	4620      	mov	r0, r4
   ba2ca:	bd10      	pop	{r4, pc}

000ba2cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   ba2cc:	b510      	push	{r4, lr}
   ba2ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba2d2:	4604      	mov	r4, r0
   ba2d4:	4608      	mov	r0, r1
   ba2d6:	2100      	movs	r1, #0
   ba2d8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba2dc:	4b04      	ldr	r3, [pc, #16]	; (ba2f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   ba2de:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba2e0:	2301      	movs	r3, #1
  _serial = serial;
   ba2e2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba2e4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   ba2e6:	4611      	mov	r1, r2
   ba2e8:	f7fd fde2 	bl	b7eb0 <HAL_USB_USART_Init>
}
   ba2ec:	4620      	mov	r0, r4
   ba2ee:	bd10      	pop	{r4, pc}
   ba2f0:	000bdf6c 	.word	0x000bdf6c

000ba2f4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   ba2f4:	7c00      	ldrb	r0, [r0, #16]
   ba2f6:	2200      	movs	r2, #0
   ba2f8:	f7fd bde2 	b.w	b7ec0 <HAL_USB_USART_Begin>

000ba2fc <_Z19acquireSerialBufferv>:
{
   ba2fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   ba2fe:	2214      	movs	r2, #20
{
   ba300:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   ba302:	2100      	movs	r1, #0
   ba304:	f001 f9c6 	bl	bb694 <memset>
}
   ba308:	4620      	mov	r0, r4
   ba30a:	bd10      	pop	{r4, pc}

000ba30c <_Z16_fetch_usbserialv>:
{
   ba30c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba30e:	4c0f      	ldr	r4, [pc, #60]	; (ba34c <_Z16_fetch_usbserialv+0x40>)
{
   ba310:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   ba312:	a803      	add	r0, sp, #12
   ba314:	f7ff fff2 	bl	ba2fc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba318:	7821      	ldrb	r1, [r4, #0]
   ba31a:	f3bf 8f5b 	dmb	ish
   ba31e:	f011 0101 	ands.w	r1, r1, #1
   ba322:	d10f      	bne.n	ba344 <_Z16_fetch_usbserialv+0x38>
   ba324:	4620      	mov	r0, r4
   ba326:	9101      	str	r1, [sp, #4]
   ba328:	f7f9 febd 	bl	b40a6 <__cxa_guard_acquire>
   ba32c:	9901      	ldr	r1, [sp, #4]
   ba32e:	b148      	cbz	r0, ba344 <_Z16_fetch_usbserialv+0x38>
   ba330:	aa03      	add	r2, sp, #12
   ba332:	4807      	ldr	r0, [pc, #28]	; (ba350 <_Z16_fetch_usbserialv+0x44>)
   ba334:	f7ff ffca 	bl	ba2cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   ba338:	4620      	mov	r0, r4
   ba33a:	f7f9 feb9 	bl	b40b0 <__cxa_guard_release>
   ba33e:	4805      	ldr	r0, [pc, #20]	; (ba354 <_Z16_fetch_usbserialv+0x48>)
   ba340:	f001 f966 	bl	bb610 <atexit>
	return _usbserial;
}
   ba344:	4802      	ldr	r0, [pc, #8]	; (ba350 <_Z16_fetch_usbserialv+0x44>)
   ba346:	b008      	add	sp, #32
   ba348:	bd10      	pop	{r4, pc}
   ba34a:	bf00      	nop
   ba34c:	2003e700 	.word	0x2003e700
   ba350:	2003e704 	.word	0x2003e704
   ba354:	000ba255 	.word	0x000ba255

000ba358 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   ba358:	2200      	movs	r2, #0
   ba35a:	6840      	ldr	r0, [r0, #4]
   ba35c:	4611      	mov	r1, r2
   ba35e:	f7fd be33 	b.w	b7fc8 <network_ready>

000ba362 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   ba362:	2200      	movs	r2, #0
   ba364:	6840      	ldr	r0, [r0, #4]
   ba366:	4611      	mov	r1, r2
   ba368:	f7fd be4e 	b.w	b8008 <network_listening>

000ba36c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   ba36c:	2200      	movs	r2, #0
   ba36e:	6840      	ldr	r0, [r0, #4]
   ba370:	4611      	mov	r1, r2
   ba372:	f7fd be71 	b.w	b8058 <network_get_listen_timeout>

000ba376 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   ba376:	6840      	ldr	r0, [r0, #4]
   ba378:	2200      	movs	r2, #0
   ba37a:	f7fd be65 	b.w	b8048 <network_set_listen_timeout>

000ba37e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   ba37e:	6840      	ldr	r0, [r0, #4]
   ba380:	2200      	movs	r2, #0
   ba382:	f081 0101 	eor.w	r1, r1, #1
   ba386:	f7fd be37 	b.w	b7ff8 <network_listen>

000ba38a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   ba38a:	2300      	movs	r3, #0
   ba38c:	6840      	ldr	r0, [r0, #4]
   ba38e:	461a      	mov	r2, r3
   ba390:	4619      	mov	r1, r3
   ba392:	f7fd be29 	b.w	b7fe8 <network_off>

000ba396 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   ba396:	2300      	movs	r3, #0
   ba398:	6840      	ldr	r0, [r0, #4]
   ba39a:	461a      	mov	r2, r3
   ba39c:	4619      	mov	r1, r3
   ba39e:	f7fd be1b 	b.w	b7fd8 <network_on>

000ba3a2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   ba3a2:	2200      	movs	r2, #0
   ba3a4:	6840      	ldr	r0, [r0, #4]
   ba3a6:	4611      	mov	r1, r2
   ba3a8:	f7fd bdfe 	b.w	b7fa8 <network_connecting>

000ba3ac <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   ba3ac:	6840      	ldr	r0, [r0, #4]
   ba3ae:	2200      	movs	r2, #0
   ba3b0:	2102      	movs	r1, #2
   ba3b2:	f7fd be01 	b.w	b7fb8 <network_disconnect>

000ba3b6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   ba3b6:	2300      	movs	r3, #0
   ba3b8:	6840      	ldr	r0, [r0, #4]
   ba3ba:	461a      	mov	r2, r3
   ba3bc:	f7fd bdec 	b.w	b7f98 <network_connect>

000ba3c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   ba3c0:	4b02      	ldr	r3, [pc, #8]	; (ba3cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   ba3c2:	2204      	movs	r2, #4
   ba3c4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   ba3c6:	4a02      	ldr	r2, [pc, #8]	; (ba3d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   ba3c8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   ba3ca:	4770      	bx	lr
   ba3cc:	2003e718 	.word	0x2003e718
   ba3d0:	000bdf9c 	.word	0x000bdf9c

000ba3d4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   ba3d4:	b510      	push	{r4, lr}
   ba3d6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   ba3d8:	f001 f9a4 	bl	bb724 <strlen>
   ba3dc:	3801      	subs	r0, #1
   ba3de:	1823      	adds	r3, r4, r0
   ba3e0:	4620      	mov	r0, r4
	while(i<j){
   ba3e2:	4283      	cmp	r3, r0
   ba3e4:	d906      	bls.n	ba3f4 <_Z11str_reversePc+0x20>
		c = *i;
   ba3e6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   ba3e8:	7819      	ldrb	r1, [r3, #0]
   ba3ea:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   ba3ee:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   ba3f2:	e7f6      	b.n	ba3e2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   ba3f4:	bd10      	pop	{r4, pc}

000ba3f6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   ba3f6:	b570      	push	{r4, r5, r6, lr}
   ba3f8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   ba3fa:	1e91      	subs	r1, r2, #2
   ba3fc:	2922      	cmp	r1, #34	; 0x22
   ba3fe:	d81d      	bhi.n	ba43c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   ba400:	4625      	mov	r5, r4

	div_t result;
	while(a){
   ba402:	b930      	cbnz	r0, ba412 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   ba404:	4423      	add	r3, r4
            *ptr++ = '0';
   ba406:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   ba408:	429d      	cmp	r5, r3
   ba40a:	d210      	bcs.n	ba42e <ultoa+0x38>
            *ptr++ = '0';
   ba40c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   ba410:	e7fa      	b.n	ba408 <ultoa+0x12>
            result.quot = a/radix;
   ba412:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   ba416:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   ba41a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   ba41c:	2809      	cmp	r0, #9
                *ptr += '0';
   ba41e:	bf94      	ite	ls
   ba420:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   ba422:	3157      	addhi	r1, #87	; 0x57
   ba424:	b2c9      	uxtb	r1, r1
   ba426:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   ba42a:	4630      	mov	r0, r6
	while(a){
   ba42c:	e7e9      	b.n	ba402 <ultoa+0xc>

	*ptr = '\0';
   ba42e:	2300      	movs	r3, #0
	str_reverse(buffer);
   ba430:	4620      	mov	r0, r4
	*ptr = '\0';
   ba432:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   ba434:	f7ff ffce 	bl	ba3d4 <_Z11str_reversePc>
	return buffer;
   ba438:	4620      	mov	r0, r4
}
   ba43a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   ba43c:	2000      	movs	r0, #0
   ba43e:	e7fc      	b.n	ba43a <ultoa+0x44>

000ba440 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   ba440:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   ba442:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   ba444:	460c      	mov	r4, r1
   ba446:	4615      	mov	r5, r2
	if(a<0){
   ba448:	da0e      	bge.n	ba468 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   ba44a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   ba44e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   ba452:	bf14      	ite	ne
   ba454:	4258      	negne	r0, r3
   ba456:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   ba458:	2301      	movs	r3, #1
		*buffer = '-';
   ba45a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   ba45c:	462a      	mov	r2, r5
   ba45e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   ba460:	f7ff ffc9 	bl	ba3f6 <ultoa>
	}
	return buffer;
}
   ba464:	4620      	mov	r0, r4
   ba466:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   ba468:	2301      	movs	r3, #1
   ba46a:	e7f9      	b.n	ba460 <itoa+0x20>

000ba46c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   ba46c:	4b01      	ldr	r3, [pc, #4]	; (ba474 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   ba46e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   ba470:	4770      	bx	lr
   ba472:	bf00      	nop
   ba474:	200352e8 	.word	0x200352e8

000ba478 <serialEventRun>:
{
   ba478:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   ba47a:	4b0b      	ldr	r3, [pc, #44]	; (ba4a8 <serialEventRun+0x30>)
   ba47c:	b143      	cbz	r3, ba490 <serialEventRun+0x18>
   ba47e:	f7ff ff45 	bl	ba30c <_Z16_fetch_usbserialv>
   ba482:	6803      	ldr	r3, [r0, #0]
   ba484:	691b      	ldr	r3, [r3, #16]
   ba486:	4798      	blx	r3
   ba488:	2800      	cmp	r0, #0
   ba48a:	dd01      	ble.n	ba490 <serialEventRun+0x18>
        serialEvent();
   ba48c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   ba490:	4b06      	ldr	r3, [pc, #24]	; (ba4ac <serialEventRun+0x34>)
   ba492:	b143      	cbz	r3, ba4a6 <serialEventRun+0x2e>
   ba494:	f000 f8c8 	bl	ba628 <_Z22__fetch_global_Serial1v>
   ba498:	6803      	ldr	r3, [r0, #0]
   ba49a:	691b      	ldr	r3, [r3, #16]
   ba49c:	4798      	blx	r3
   ba49e:	2800      	cmp	r0, #0
   ba4a0:	dd01      	ble.n	ba4a6 <serialEventRun+0x2e>
        serialEvent1();
   ba4a2:	f3af 8000 	nop.w
}
   ba4a6:	bd08      	pop	{r3, pc}
	...

000ba4b0 <_post_loop>:
{
   ba4b0:	b508      	push	{r3, lr}
	serialEventRun();
   ba4b2:	f7ff ffe1 	bl	ba478 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   ba4b6:	f7fd fc0b 	bl	b7cd0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   ba4ba:	4b01      	ldr	r3, [pc, #4]	; (ba4c0 <_post_loop+0x10>)
   ba4bc:	6018      	str	r0, [r3, #0]
}
   ba4be:	bd08      	pop	{r3, pc}
   ba4c0:	2003e728 	.word	0x2003e728

000ba4c4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba4c4:	4805      	ldr	r0, [pc, #20]	; (ba4dc <_Z33system_initialize_user_backup_ramv+0x18>)
   ba4c6:	4a06      	ldr	r2, [pc, #24]	; (ba4e0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   ba4c8:	4906      	ldr	r1, [pc, #24]	; (ba4e4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   ba4ca:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba4cc:	1a12      	subs	r2, r2, r0
   ba4ce:	f001 f8b9 	bl	bb644 <memcpy>
    __backup_sram_signature = signature;
   ba4d2:	4b05      	ldr	r3, [pc, #20]	; (ba4e8 <_Z33system_initialize_user_backup_ramv+0x24>)
   ba4d4:	4a05      	ldr	r2, [pc, #20]	; (ba4ec <_Z33system_initialize_user_backup_ramv+0x28>)
   ba4d6:	601a      	str	r2, [r3, #0]
}
   ba4d8:	bd08      	pop	{r3, pc}
   ba4da:	bf00      	nop
   ba4dc:	2003f400 	.word	0x2003f400
   ba4e0:	2003f404 	.word	0x2003f404
   ba4e4:	000be4e4 	.word	0x000be4e4
   ba4e8:	2003f400 	.word	0x2003f400
   ba4ec:	9a271c1e 	.word	0x9a271c1e

000ba4f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   ba4f0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba4f2:	2300      	movs	r3, #0
   ba4f4:	9300      	str	r3, [sp, #0]
   ba4f6:	461a      	mov	r2, r3
   ba4f8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba4fc:	f7fd fd3a 	bl	b7f74 <system_ctrl_set_result>
}
   ba500:	b003      	add	sp, #12
   ba502:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba508 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   ba508:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   ba50a:	8843      	ldrh	r3, [r0, #2]
   ba50c:	2b0a      	cmp	r3, #10
   ba50e:	d008      	beq.n	ba522 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   ba510:	2b50      	cmp	r3, #80	; 0x50
   ba512:	d10b      	bne.n	ba52c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   ba514:	4b09      	ldr	r3, [pc, #36]	; (ba53c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   ba516:	681b      	ldr	r3, [r3, #0]
   ba518:	b14b      	cbz	r3, ba52e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   ba51a:	b003      	add	sp, #12
   ba51c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   ba520:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   ba522:	f7ff ffe5 	bl	ba4f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   ba526:	b003      	add	sp, #12
   ba528:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba52c:	2300      	movs	r3, #0
   ba52e:	9300      	str	r3, [sp, #0]
   ba530:	461a      	mov	r2, r3
   ba532:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba536:	f7fd fd1d 	bl	b7f74 <system_ctrl_set_result>
}
   ba53a:	e7f4      	b.n	ba526 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   ba53c:	2003e724 	.word	0x2003e724

000ba540 <module_user_init_hook>:
{
   ba540:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   ba542:	4812      	ldr	r0, [pc, #72]	; (ba58c <module_user_init_hook+0x4c>)
   ba544:	2100      	movs	r1, #0
   ba546:	f7fd fde7 	bl	b8118 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   ba54a:	4b11      	ldr	r3, [pc, #68]	; (ba590 <module_user_init_hook+0x50>)
   ba54c:	681a      	ldr	r2, [r3, #0]
   ba54e:	4b11      	ldr	r3, [pc, #68]	; (ba594 <module_user_init_hook+0x54>)
   ba550:	429a      	cmp	r2, r3
   ba552:	4b11      	ldr	r3, [pc, #68]	; (ba598 <module_user_init_hook+0x58>)
   ba554:	bf0c      	ite	eq
   ba556:	2201      	moveq	r2, #1
   ba558:	2200      	movne	r2, #0
   ba55a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   ba55c:	d001      	beq.n	ba562 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   ba55e:	f7ff ffb1 	bl	ba4c4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   ba562:	f7fd fba5 	bl	b7cb0 <HAL_RNG_GetRandomNumber>
   ba566:	4604      	mov	r4, r0
    srand(seed);
   ba568:	f001 f89c 	bl	bb6a4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   ba56c:	4b0b      	ldr	r3, [pc, #44]	; (ba59c <module_user_init_hook+0x5c>)
   ba56e:	b113      	cbz	r3, ba576 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   ba570:	4620      	mov	r0, r4
   ba572:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   ba576:	2100      	movs	r1, #0
   ba578:	4808      	ldr	r0, [pc, #32]	; (ba59c <module_user_init_hook+0x5c>)
   ba57a:	f7fd fd05 	bl	b7f88 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   ba57e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   ba582:	4807      	ldr	r0, [pc, #28]	; (ba5a0 <module_user_init_hook+0x60>)
   ba584:	2100      	movs	r1, #0
   ba586:	f7fd bceb 	b.w	b7f60 <system_ctrl_set_app_request_handler>
   ba58a:	bf00      	nop
   ba58c:	000ba46d 	.word	0x000ba46d
   ba590:	2003f400 	.word	0x2003f400
   ba594:	9a271c1e 	.word	0x9a271c1e
   ba598:	2003e720 	.word	0x2003e720
   ba59c:	00000000 	.word	0x00000000
   ba5a0:	000ba509 	.word	0x000ba509

000ba5a4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba5a4:	4770      	bx	lr
	...

000ba5a8 <_Z19__fetch_global_Wirev>:
{
   ba5a8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba5aa:	4d0e      	ldr	r5, [pc, #56]	; (ba5e4 <_Z19__fetch_global_Wirev+0x3c>)
   ba5ac:	7829      	ldrb	r1, [r5, #0]
   ba5ae:	f3bf 8f5b 	dmb	ish
   ba5b2:	f011 0401 	ands.w	r4, r1, #1
{
   ba5b6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba5b8:	d111      	bne.n	ba5de <_Z19__fetch_global_Wirev+0x36>
   ba5ba:	4628      	mov	r0, r5
   ba5bc:	f7f9 fd73 	bl	b40a6 <__cxa_guard_acquire>
   ba5c0:	b168      	cbz	r0, ba5de <_Z19__fetch_global_Wirev+0x36>
   ba5c2:	a801      	add	r0, sp, #4
   ba5c4:	f7fa f8a8 	bl	b4718 <_Z17acquireWireBufferv>
   ba5c8:	aa01      	add	r2, sp, #4
   ba5ca:	4621      	mov	r1, r4
   ba5cc:	4806      	ldr	r0, [pc, #24]	; (ba5e8 <_Z19__fetch_global_Wirev+0x40>)
   ba5ce:	f7fe ff53 	bl	b9478 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   ba5d2:	4628      	mov	r0, r5
   ba5d4:	f7f9 fd6c 	bl	b40b0 <__cxa_guard_release>
   ba5d8:	4804      	ldr	r0, [pc, #16]	; (ba5ec <_Z19__fetch_global_Wirev+0x44>)
   ba5da:	f001 f819 	bl	bb610 <atexit>
	return wire;
}
   ba5de:	4802      	ldr	r0, [pc, #8]	; (ba5e8 <_Z19__fetch_global_Wirev+0x40>)
   ba5e0:	b007      	add	sp, #28
   ba5e2:	bd30      	pop	{r4, r5, pc}
   ba5e4:	2003e72c 	.word	0x2003e72c
   ba5e8:	2003e730 	.word	0x2003e730
   ba5ec:	000ba5a5 	.word	0x000ba5a5

000ba5f0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba5f0:	4770      	bx	lr
	...

000ba5f4 <_Z20acquireSerial1Bufferv>:
{
   ba5f4:	b538      	push	{r3, r4, r5, lr}
   ba5f6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   ba5f8:	2514      	movs	r5, #20
   ba5fa:	462a      	mov	r2, r5
   ba5fc:	2100      	movs	r1, #0
   ba5fe:	f001 f849 	bl	bb694 <memset>
   ba602:	8025      	strh	r5, [r4, #0]
   ba604:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba606:	4907      	ldr	r1, [pc, #28]	; (ba624 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   ba608:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba60a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   ba60c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba60e:	f000 f82f 	bl	ba670 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba612:	4904      	ldr	r1, [pc, #16]	; (ba624 <_Z20acquireSerial1Bufferv+0x30>)
    };
   ba614:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba616:	4628      	mov	r0, r5
   ba618:	f000 f82a 	bl	ba670 <_ZnajRKSt9nothrow_t>
    };
   ba61c:	60e0      	str	r0, [r4, #12]
}
   ba61e:	4620      	mov	r0, r4
   ba620:	bd38      	pop	{r3, r4, r5, pc}
   ba622:	bf00      	nop
   ba624:	000bdfd0 	.word	0x000bdfd0

000ba628 <_Z22__fetch_global_Serial1v>:
{
   ba628:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba62a:	4d0e      	ldr	r5, [pc, #56]	; (ba664 <_Z22__fetch_global_Serial1v+0x3c>)
   ba62c:	7829      	ldrb	r1, [r5, #0]
   ba62e:	f3bf 8f5b 	dmb	ish
   ba632:	f011 0401 	ands.w	r4, r1, #1
{
   ba636:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba638:	d111      	bne.n	ba65e <_Z22__fetch_global_Serial1v+0x36>
   ba63a:	4628      	mov	r0, r5
   ba63c:	f7f9 fd33 	bl	b40a6 <__cxa_guard_acquire>
   ba640:	b168      	cbz	r0, ba65e <_Z22__fetch_global_Serial1v+0x36>
   ba642:	a801      	add	r0, sp, #4
   ba644:	f7ff ffd6 	bl	ba5f4 <_Z20acquireSerial1Bufferv>
   ba648:	aa01      	add	r2, sp, #4
   ba64a:	4621      	mov	r1, r4
   ba64c:	4806      	ldr	r0, [pc, #24]	; (ba668 <_Z22__fetch_global_Serial1v+0x40>)
   ba64e:	f7ff fdeb 	bl	ba228 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   ba652:	4628      	mov	r0, r5
   ba654:	f7f9 fd2c 	bl	b40b0 <__cxa_guard_release>
   ba658:	4804      	ldr	r0, [pc, #16]	; (ba66c <_Z22__fetch_global_Serial1v+0x44>)
   ba65a:	f000 ffd9 	bl	bb610 <atexit>
    return serial1;
}
   ba65e:	4802      	ldr	r0, [pc, #8]	; (ba668 <_Z22__fetch_global_Serial1v+0x40>)
   ba660:	b007      	add	sp, #28
   ba662:	bd30      	pop	{r4, r5, pc}
   ba664:	2003e744 	.word	0x2003e744
   ba668:	2003e748 	.word	0x2003e748
   ba66c:	000ba5f1 	.word	0x000ba5f1

000ba670 <_ZnajRKSt9nothrow_t>:
   ba670:	f7f9 bd13 	b.w	b409a <_Znaj>

000ba674 <_ZSt17__throw_bad_allocv>:
   ba674:	b508      	push	{r3, lr}
   ba676:	f7fd fd2f 	bl	b80d8 <abort>

000ba67a <_ZSt19__throw_logic_errorPKc>:
   ba67a:	b508      	push	{r3, lr}
   ba67c:	f7fd fd2c 	bl	b80d8 <abort>

000ba680 <_ZSt20__throw_length_errorPKc>:
   ba680:	b508      	push	{r3, lr}
   ba682:	f7fd fd29 	bl	b80d8 <abort>

000ba686 <_ZSt25__throw_bad_function_callv>:
   ba686:	b508      	push	{r3, lr}
   ba688:	f7fd fd26 	bl	b80d8 <abort>

000ba68c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   ba68c:	4901      	ldr	r1, [pc, #4]	; (ba694 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   ba68e:	f000 b963 	b.w	ba958 <_ZNKSt9type_infoeqERKS_>
   ba692:	bf00      	nop
   ba694:	000bdfec 	.word	0x000bdfec

000ba698 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   ba698:	b10a      	cbz	r2, ba69e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   ba69a:	f000 bfd3 	b.w	bb644 <memcpy>
   ba69e:	4770      	bx	lr

000ba6a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   ba6a0:	b508      	push	{r3, lr}
   ba6a2:	680b      	ldr	r3, [r1, #0]
   ba6a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   ba6a8:	d302      	bcc.n	ba6b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   ba6aa:	480d      	ldr	r0, [pc, #52]	; (ba6e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   ba6ac:	f7ff ffe8 	bl	ba680 <_ZSt20__throw_length_errorPKc>
   ba6b0:	4293      	cmp	r3, r2
   ba6b2:	d90b      	bls.n	ba6cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   ba6b4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   ba6b8:	ea4f 0042 	mov.w	r0, r2, lsl #1
   ba6bc:	d206      	bcs.n	ba6cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   ba6be:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   ba6c2:	bf2a      	itet	cs
   ba6c4:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   ba6c8:	6008      	strcc	r0, [r1, #0]
   ba6ca:	600b      	strcs	r3, [r1, #0]
   ba6cc:	6808      	ldr	r0, [r1, #0]
   ba6ce:	3001      	adds	r0, #1
   ba6d0:	d501      	bpl.n	ba6d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   ba6d2:	f7ff ffcf 	bl	ba674 <_ZSt17__throw_bad_allocv>
   ba6d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba6da:	f7f9 bcdc 	b.w	b4096 <_Znwj>
   ba6de:	bf00      	nop
   ba6e0:	000bdff4 	.word	0x000bdff4

000ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   ba6e4:	f850 3b08 	ldr.w	r3, [r0], #8
   ba6e8:	4283      	cmp	r3, r0
   ba6ea:	d002      	beq.n	ba6f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   ba6ec:	4618      	mov	r0, r3
   ba6ee:	f7f9 bcd6 	b.w	b409e <_ZdlPv>
   ba6f2:	4770      	bx	lr

000ba6f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   ba6f4:	2a01      	cmp	r2, #1
   ba6f6:	b410      	push	{r4}
   ba6f8:	d104      	bne.n	ba704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   ba6fa:	780a      	ldrb	r2, [r1, #0]
   ba6fc:	f85d 4b04 	ldr.w	r4, [sp], #4
   ba700:	7002      	strb	r2, [r0, #0]
   ba702:	4770      	bx	lr
   ba704:	f85d 4b04 	ldr.w	r4, [sp], #4
   ba708:	f7ff bfc6 	b.w	ba698 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000ba70c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
   ba70c:	b508      	push	{r3, lr}
   ba70e:	1a52      	subs	r2, r2, r1
   ba710:	f7ff fff0 	bl	ba6f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba714:	bd08      	pop	{r3, pc}

000ba716 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   ba716:	b508      	push	{r3, lr}
   ba718:	1a52      	subs	r2, r2, r1
   ba71a:	f7ff ffeb 	bl	ba6f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba71e:	bd08      	pop	{r3, pc}

000ba720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   ba720:	4288      	cmp	r0, r1
   ba722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba724:	4604      	mov	r4, r0
   ba726:	460e      	mov	r6, r1
   ba728:	d01e      	beq.n	ba768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   ba72a:	4603      	mov	r3, r0
   ba72c:	684d      	ldr	r5, [r1, #4]
   ba72e:	f853 2b08 	ldr.w	r2, [r3], #8
   ba732:	429a      	cmp	r2, r3
   ba734:	bf14      	ite	ne
   ba736:	6882      	ldrne	r2, [r0, #8]
   ba738:	220f      	moveq	r2, #15
   ba73a:	42aa      	cmp	r2, r5
   ba73c:	d20a      	bcs.n	ba754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   ba73e:	a901      	add	r1, sp, #4
   ba740:	9501      	str	r5, [sp, #4]
   ba742:	f7ff ffad 	bl	ba6a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   ba746:	4607      	mov	r7, r0
   ba748:	4620      	mov	r0, r4
   ba74a:	f7ff ffcb 	bl	ba6e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   ba74e:	9b01      	ldr	r3, [sp, #4]
   ba750:	6027      	str	r7, [r4, #0]
   ba752:	60a3      	str	r3, [r4, #8]
   ba754:	b125      	cbz	r5, ba760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   ba756:	6831      	ldr	r1, [r6, #0]
   ba758:	6820      	ldr	r0, [r4, #0]
   ba75a:	462a      	mov	r2, r5
   ba75c:	f7ff ffca 	bl	ba6f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba760:	6823      	ldr	r3, [r4, #0]
   ba762:	6065      	str	r5, [r4, #4]
   ba764:	2200      	movs	r2, #0
   ba766:	555a      	strb	r2, [r3, r5]
   ba768:	b003      	add	sp, #12
   ba76a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba76c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   ba76c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   ba76e:	2400      	movs	r4, #0
   ba770:	2310      	movs	r3, #16
   ba772:	e9cd 3402 	strd	r3, r4, [sp, #8]
   ba776:	6803      	ldr	r3, [r0, #0]
   ba778:	4615      	mov	r5, r2
   ba77a:	699e      	ldr	r6, [r3, #24]
   ba77c:	6812      	ldr	r2, [r2, #0]
   ba77e:	466b      	mov	r3, sp
   ba780:	e9cd 4400 	strd	r4, r4, [sp]
   ba784:	47b0      	blx	r6
   ba786:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba78a:	f003 0306 	and.w	r3, r3, #6
   ba78e:	2b06      	cmp	r3, #6
   ba790:	bf03      	ittte	eq
   ba792:	9b00      	ldreq	r3, [sp, #0]
   ba794:	602b      	streq	r3, [r5, #0]
   ba796:	2001      	moveq	r0, #1
   ba798:	4620      	movne	r0, r4
   ba79a:	b004      	add	sp, #16
   ba79c:	bd70      	pop	{r4, r5, r6, pc}

000ba79e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   ba79e:	9800      	ldr	r0, [sp, #0]
   ba7a0:	4290      	cmp	r0, r2
   ba7a2:	bf14      	ite	ne
   ba7a4:	2001      	movne	r0, #1
   ba7a6:	2006      	moveq	r0, #6
   ba7a8:	4770      	bx	lr
	...

000ba7ac <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   ba7ac:	b510      	push	{r4, lr}
   ba7ae:	4b03      	ldr	r3, [pc, #12]	; (ba7bc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   ba7b0:	6003      	str	r3, [r0, #0]
   ba7b2:	4604      	mov	r4, r0
   ba7b4:	f000 f8cd 	bl	ba952 <_ZNSt9type_infoD1Ev>
   ba7b8:	4620      	mov	r0, r4
   ba7ba:	bd10      	pop	{r4, pc}
   ba7bc:	000be044 	.word	0x000be044

000ba7c0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   ba7c0:	b510      	push	{r4, lr}
   ba7c2:	4604      	mov	r4, r0
   ba7c4:	f7ff fff2 	bl	ba7ac <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba7c8:	4620      	mov	r0, r4
   ba7ca:	2108      	movs	r1, #8
   ba7cc:	f7f9 fc69 	bl	b40a2 <_ZdlPvj>
   ba7d0:	4620      	mov	r0, r4
   ba7d2:	bd10      	pop	{r4, pc}

000ba7d4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   ba7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba7d8:	461f      	mov	r7, r3
   ba7da:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   ba7de:	f8dd 8018 	ldr.w	r8, [sp, #24]
   ba7e2:	4598      	cmp	r8, r3
   ba7e4:	4606      	mov	r6, r0
   ba7e6:	4615      	mov	r5, r2
   ba7e8:	d107      	bne.n	ba7fa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba7ea:	9907      	ldr	r1, [sp, #28]
   ba7ec:	f000 f8b4 	bl	ba958 <_ZNKSt9type_infoeqERKS_>
   ba7f0:	b118      	cbz	r0, ba7fa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba7f2:	7165      	strb	r5, [r4, #5]
   ba7f4:	2000      	movs	r0, #0
   ba7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba7fa:	4639      	mov	r1, r7
   ba7fc:	4630      	mov	r0, r6
   ba7fe:	f000 f8ab 	bl	ba958 <_ZNKSt9type_infoeqERKS_>
   ba802:	2800      	cmp	r0, #0
   ba804:	d0f6      	beq.n	ba7f4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   ba806:	2301      	movs	r3, #1
   ba808:	f8c4 8000 	str.w	r8, [r4]
   ba80c:	7125      	strb	r5, [r4, #4]
   ba80e:	71a3      	strb	r3, [r4, #6]
   ba810:	e7f0      	b.n	ba7f4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000ba812 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   ba812:	b538      	push	{r3, r4, r5, lr}
   ba814:	4615      	mov	r5, r2
   ba816:	461c      	mov	r4, r3
   ba818:	f000 f89e 	bl	ba958 <_ZNKSt9type_infoeqERKS_>
   ba81c:	b120      	cbz	r0, ba828 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   ba81e:	2308      	movs	r3, #8
   ba820:	60e3      	str	r3, [r4, #12]
   ba822:	2306      	movs	r3, #6
   ba824:	6025      	str	r5, [r4, #0]
   ba826:	7123      	strb	r3, [r4, #4]
   ba828:	bd38      	pop	{r3, r4, r5, pc}

000ba82a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   ba82a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba82c:	4605      	mov	r5, r0
   ba82e:	460c      	mov	r4, r1
   ba830:	9201      	str	r2, [sp, #4]
   ba832:	461e      	mov	r6, r3
   ba834:	f000 f890 	bl	ba958 <_ZNKSt9type_infoeqERKS_>
   ba838:	b950      	cbnz	r0, ba850 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba83a:	2e03      	cmp	r6, #3
   ba83c:	d808      	bhi.n	ba850 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba83e:	6823      	ldr	r3, [r4, #0]
   ba840:	9a01      	ldr	r2, [sp, #4]
   ba842:	695b      	ldr	r3, [r3, #20]
   ba844:	4629      	mov	r1, r5
   ba846:	4620      	mov	r0, r4
   ba848:	b002      	add	sp, #8
   ba84a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba84e:	4718      	bx	r3
   ba850:	b002      	add	sp, #8
   ba852:	bd70      	pop	{r4, r5, r6, pc}

000ba854 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   ba854:	b510      	push	{r4, lr}
   ba856:	4b03      	ldr	r3, [pc, #12]	; (ba864 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   ba858:	6003      	str	r3, [r0, #0]
   ba85a:	4604      	mov	r4, r0
   ba85c:	f7ff ffa6 	bl	ba7ac <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba860:	4620      	mov	r0, r4
   ba862:	bd10      	pop	{r4, pc}
   ba864:	000be0a4 	.word	0x000be0a4

000ba868 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   ba868:	b510      	push	{r4, lr}
   ba86a:	4604      	mov	r4, r0
   ba86c:	f7ff fff2 	bl	ba854 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   ba870:	4620      	mov	r0, r4
   ba872:	210c      	movs	r1, #12
   ba874:	f7f9 fc15 	bl	b40a2 <_ZdlPvj>
   ba878:	4620      	mov	r0, r4
   ba87a:	bd10      	pop	{r4, pc}

000ba87c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   ba87c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba87e:	9f08      	ldr	r7, [sp, #32]
   ba880:	4297      	cmp	r7, r2
   ba882:	4605      	mov	r5, r0
   ba884:	460e      	mov	r6, r1
   ba886:	4614      	mov	r4, r2
   ba888:	d00a      	beq.n	ba8a0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   ba88a:	68a8      	ldr	r0, [r5, #8]
   ba88c:	6802      	ldr	r2, [r0, #0]
   ba88e:	9708      	str	r7, [sp, #32]
   ba890:	6a15      	ldr	r5, [r2, #32]
   ba892:	4631      	mov	r1, r6
   ba894:	4622      	mov	r2, r4
   ba896:	46ac      	mov	ip, r5
   ba898:	b003      	add	sp, #12
   ba89a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   ba89e:	4760      	bx	ip
   ba8a0:	4619      	mov	r1, r3
   ba8a2:	9301      	str	r3, [sp, #4]
   ba8a4:	f000 f858 	bl	ba958 <_ZNKSt9type_infoeqERKS_>
   ba8a8:	9b01      	ldr	r3, [sp, #4]
   ba8aa:	2800      	cmp	r0, #0
   ba8ac:	d0ed      	beq.n	ba88a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   ba8ae:	2006      	movs	r0, #6
   ba8b0:	b003      	add	sp, #12
   ba8b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba8b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   ba8b4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba8b8:	460d      	mov	r5, r1
   ba8ba:	4619      	mov	r1, r3
   ba8bc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   ba8c0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   ba8c4:	4681      	mov	r9, r0
   ba8c6:	4617      	mov	r7, r2
   ba8c8:	4698      	mov	r8, r3
   ba8ca:	f000 f845 	bl	ba958 <_ZNKSt9type_infoeqERKS_>
   ba8ce:	b190      	cbz	r0, ba8f6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   ba8d0:	2d00      	cmp	r5, #0
   ba8d2:	6034      	str	r4, [r6, #0]
   ba8d4:	7137      	strb	r7, [r6, #4]
   ba8d6:	db09      	blt.n	ba8ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   ba8d8:	1961      	adds	r1, r4, r5
   ba8da:	458a      	cmp	sl, r1
   ba8dc:	bf0c      	ite	eq
   ba8de:	2106      	moveq	r1, #6
   ba8e0:	2101      	movne	r1, #1
   ba8e2:	71b1      	strb	r1, [r6, #6]
   ba8e4:	2000      	movs	r0, #0
   ba8e6:	b001      	add	sp, #4
   ba8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba8ec:	3502      	adds	r5, #2
   ba8ee:	d1f9      	bne.n	ba8e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba8f0:	2301      	movs	r3, #1
   ba8f2:	71b3      	strb	r3, [r6, #6]
   ba8f4:	e7f6      	b.n	ba8e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba8f6:	4554      	cmp	r4, sl
   ba8f8:	d106      	bne.n	ba908 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba8fa:	4659      	mov	r1, fp
   ba8fc:	4648      	mov	r0, r9
   ba8fe:	f000 f82b 	bl	ba958 <_ZNKSt9type_infoeqERKS_>
   ba902:	b108      	cbz	r0, ba908 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba904:	7177      	strb	r7, [r6, #5]
   ba906:	e7ed      	b.n	ba8e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba908:	f8d9 0008 	ldr.w	r0, [r9, #8]
   ba90c:	6803      	ldr	r3, [r0, #0]
   ba90e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   ba912:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   ba916:	69dc      	ldr	r4, [r3, #28]
   ba918:	463a      	mov	r2, r7
   ba91a:	4643      	mov	r3, r8
   ba91c:	4629      	mov	r1, r5
   ba91e:	46a4      	mov	ip, r4
   ba920:	b001      	add	sp, #4
   ba922:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba926:	4760      	bx	ip

000ba928 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   ba928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba92c:	4607      	mov	r7, r0
   ba92e:	460c      	mov	r4, r1
   ba930:	4615      	mov	r5, r2
   ba932:	461e      	mov	r6, r3
   ba934:	f7ff ff6d 	bl	ba812 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   ba938:	b948      	cbnz	r0, ba94e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   ba93a:	68b8      	ldr	r0, [r7, #8]
   ba93c:	6803      	ldr	r3, [r0, #0]
   ba93e:	699f      	ldr	r7, [r3, #24]
   ba940:	462a      	mov	r2, r5
   ba942:	4633      	mov	r3, r6
   ba944:	4621      	mov	r1, r4
   ba946:	46bc      	mov	ip, r7
   ba948:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba94c:	4760      	bx	ip
   ba94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba952 <_ZNSt9type_infoD1Ev>:
   ba952:	4770      	bx	lr

000ba954 <_ZNKSt9type_info14__is_pointer_pEv>:
   ba954:	2000      	movs	r0, #0
   ba956:	4770      	bx	lr

000ba958 <_ZNKSt9type_infoeqERKS_>:
   ba958:	4281      	cmp	r1, r0
   ba95a:	b508      	push	{r3, lr}
   ba95c:	d00e      	beq.n	ba97c <_ZNKSt9type_infoeqERKS_+0x24>
   ba95e:	6840      	ldr	r0, [r0, #4]
   ba960:	7803      	ldrb	r3, [r0, #0]
   ba962:	2b2a      	cmp	r3, #42	; 0x2a
   ba964:	d00c      	beq.n	ba980 <_ZNKSt9type_infoeqERKS_+0x28>
   ba966:	6849      	ldr	r1, [r1, #4]
   ba968:	780b      	ldrb	r3, [r1, #0]
   ba96a:	2b2a      	cmp	r3, #42	; 0x2a
   ba96c:	bf08      	it	eq
   ba96e:	3101      	addeq	r1, #1
   ba970:	f000 fec6 	bl	bb700 <strcmp>
   ba974:	fab0 f080 	clz	r0, r0
   ba978:	0940      	lsrs	r0, r0, #5
   ba97a:	bd08      	pop	{r3, pc}
   ba97c:	2001      	movs	r0, #1
   ba97e:	e7fc      	b.n	ba97a <_ZNKSt9type_infoeqERKS_+0x22>
   ba980:	2000      	movs	r0, #0
   ba982:	e7fa      	b.n	ba97a <_ZNKSt9type_infoeqERKS_+0x22>

000ba984 <floorf>:
   ba984:	ee10 2a10 	vmov	r2, s0
   ba988:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   ba98c:	3b7f      	subs	r3, #127	; 0x7f
   ba98e:	2b16      	cmp	r3, #22
   ba990:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   ba994:	dc28      	bgt.n	ba9e8 <floorf+0x64>
   ba996:	2b00      	cmp	r3, #0
   ba998:	db18      	blt.n	ba9cc <floorf+0x48>
   ba99a:	491a      	ldr	r1, [pc, #104]	; (baa04 <floorf+0x80>)
   ba99c:	4119      	asrs	r1, r3
   ba99e:	420a      	tst	r2, r1
   ba9a0:	d021      	beq.n	ba9e6 <floorf+0x62>
   ba9a2:	eddf 7a19 	vldr	s15, [pc, #100]	; baa08 <floorf+0x84>
   ba9a6:	ee70 7a27 	vadd.f32	s15, s0, s15
   ba9aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba9ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba9b2:	dd18      	ble.n	ba9e6 <floorf+0x62>
   ba9b4:	2a00      	cmp	r2, #0
   ba9b6:	da04      	bge.n	ba9c2 <floorf+0x3e>
   ba9b8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   ba9bc:	fa40 f303 	asr.w	r3, r0, r3
   ba9c0:	441a      	add	r2, r3
   ba9c2:	ea22 0301 	bic.w	r3, r2, r1
   ba9c6:	ee00 3a10 	vmov	s0, r3
   ba9ca:	4770      	bx	lr
   ba9cc:	eddf 7a0e 	vldr	s15, [pc, #56]	; baa08 <floorf+0x84>
   ba9d0:	ee70 7a27 	vadd.f32	s15, s0, s15
   ba9d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba9d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba9dc:	dd03      	ble.n	ba9e6 <floorf+0x62>
   ba9de:	2a00      	cmp	r2, #0
   ba9e0:	db08      	blt.n	ba9f4 <floorf+0x70>
   ba9e2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; baa0c <floorf+0x88>
   ba9e6:	4770      	bx	lr
   ba9e8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   ba9ec:	d3fb      	bcc.n	ba9e6 <floorf+0x62>
   ba9ee:	ee30 0a00 	vadd.f32	s0, s0, s0
   ba9f2:	4770      	bx	lr
   ba9f4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   ba9f8:	2900      	cmp	r1, #0
   ba9fa:	bf18      	it	ne
   ba9fc:	eeb0 0a67 	vmovne.f32	s0, s15
   baa00:	4770      	bx	lr
   baa02:	bf00      	nop
   baa04:	007fffff 	.word	0x007fffff
   baa08:	7149f2ca 	.word	0x7149f2ca
   baa0c:	00000000 	.word	0x00000000

000baa10 <sqrt>:
   baa10:	b538      	push	{r3, r4, r5, lr}
   baa12:	ed2d 8b02 	vpush	{d8}
   baa16:	ec55 4b10 	vmov	r4, r5, d0
   baa1a:	f000 f833 	bl	baa84 <__ieee754_sqrt>
   baa1e:	4b18      	ldr	r3, [pc, #96]	; (baa80 <sqrt+0x70>)
   baa20:	eeb0 8a40 	vmov.f32	s16, s0
   baa24:	eef0 8a60 	vmov.f32	s17, s1
   baa28:	f993 3000 	ldrsb.w	r3, [r3]
   baa2c:	3301      	adds	r3, #1
   baa2e:	d00d      	beq.n	baa4c <sqrt+0x3c>
   baa30:	4622      	mov	r2, r4
   baa32:	462b      	mov	r3, r5
   baa34:	4620      	mov	r0, r4
   baa36:	4629      	mov	r1, r5
   baa38:	f000 fd46 	bl	bb4c8 <__aeabi_dcmpun>
   baa3c:	b930      	cbnz	r0, baa4c <sqrt+0x3c>
   baa3e:	2200      	movs	r2, #0
   baa40:	2300      	movs	r3, #0
   baa42:	4620      	mov	r0, r4
   baa44:	4629      	mov	r1, r5
   baa46:	f000 fd17 	bl	bb478 <__aeabi_dcmplt>
   baa4a:	b930      	cbnz	r0, baa5a <sqrt+0x4a>
   baa4c:	eeb0 0a48 	vmov.f32	s0, s16
   baa50:	eef0 0a68 	vmov.f32	s1, s17
   baa54:	ecbd 8b02 	vpop	{d8}
   baa58:	bd38      	pop	{r3, r4, r5, pc}
   baa5a:	f7fd fb4d 	bl	b80f8 <__errno>
   baa5e:	2200      	movs	r2, #0
   baa60:	2300      	movs	r3, #0
   baa62:	2121      	movs	r1, #33	; 0x21
   baa64:	6001      	str	r1, [r0, #0]
   baa66:	4610      	mov	r0, r2
   baa68:	4619      	mov	r1, r3
   baa6a:	f000 fbbd 	bl	bb1e8 <__aeabi_ddiv>
   baa6e:	ec41 0b18 	vmov	d8, r0, r1
   baa72:	eeb0 0a48 	vmov.f32	s0, s16
   baa76:	eef0 0a68 	vmov.f32	s1, s17
   baa7a:	ecbd 8b02 	vpop	{d8}
   baa7e:	bd38      	pop	{r3, r4, r5, pc}
   baa80:	200352e4 	.word	0x200352e4

000baa84 <__ieee754_sqrt>:
   baa84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   baa88:	4a63      	ldr	r2, [pc, #396]	; (bac18 <__ieee754_sqrt+0x194>)
   baa8a:	ec55 4b10 	vmov	r4, r5, d0
   baa8e:	43aa      	bics	r2, r5
   baa90:	f000 809f 	beq.w	babd2 <__ieee754_sqrt+0x14e>
   baa94:	2d00      	cmp	r5, #0
   baa96:	ee10 ca10 	vmov	ip, s0
   baa9a:	462b      	mov	r3, r5
   baa9c:	dd54      	ble.n	bab48 <__ieee754_sqrt+0xc4>
   baa9e:	1529      	asrs	r1, r5, #20
   baaa0:	d063      	beq.n	bab6a <__ieee754_sqrt+0xe6>
   baaa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   baaa6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   baaaa:	07c9      	lsls	r1, r1, #31
   baaac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   baab0:	d404      	bmi.n	baabc <__ieee754_sqrt+0x38>
   baab2:	005b      	lsls	r3, r3, #1
   baab4:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   baab8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   baabc:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   baac0:	2600      	movs	r6, #0
   baac2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   baac6:	107f      	asrs	r7, r7, #1
   baac8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   baacc:	f04f 0e16 	mov.w	lr, #22
   baad0:	4634      	mov	r4, r6
   baad2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   baad6:	18a1      	adds	r1, r4, r2
   baad8:	4299      	cmp	r1, r3
   baada:	dc02      	bgt.n	baae2 <__ieee754_sqrt+0x5e>
   baadc:	1a5b      	subs	r3, r3, r1
   baade:	188c      	adds	r4, r1, r2
   baae0:	4416      	add	r6, r2
   baae2:	005b      	lsls	r3, r3, #1
   baae4:	f1be 0e01 	subs.w	lr, lr, #1
   baae8:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   baaec:	ea4f 0252 	mov.w	r2, r2, lsr #1
   baaf0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   baaf4:	d1ef      	bne.n	baad6 <__ieee754_sqrt+0x52>
   baaf6:	4675      	mov	r5, lr
   baaf8:	2020      	movs	r0, #32
   baafa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   baafe:	e00a      	b.n	bab16 <__ieee754_sqrt+0x92>
   bab00:	d044      	beq.n	bab8c <__ieee754_sqrt+0x108>
   bab02:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   bab06:	3801      	subs	r0, #1
   bab08:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   bab0c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bab10:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bab14:	d043      	beq.n	bab9e <__ieee754_sqrt+0x11a>
   bab16:	42a3      	cmp	r3, r4
   bab18:	eb02 010e 	add.w	r1, r2, lr
   bab1c:	ddf0      	ble.n	bab00 <__ieee754_sqrt+0x7c>
   bab1e:	2900      	cmp	r1, #0
   bab20:	eb01 0e02 	add.w	lr, r1, r2
   bab24:	db0a      	blt.n	bab3c <__ieee754_sqrt+0xb8>
   bab26:	46a0      	mov	r8, r4
   bab28:	1b1b      	subs	r3, r3, r4
   bab2a:	4561      	cmp	r1, ip
   bab2c:	bf88      	it	hi
   bab2e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   bab32:	ebac 0c01 	sub.w	ip, ip, r1
   bab36:	4415      	add	r5, r2
   bab38:	4644      	mov	r4, r8
   bab3a:	e7e2      	b.n	bab02 <__ieee754_sqrt+0x7e>
   bab3c:	f1be 0f00 	cmp.w	lr, #0
   bab40:	dbf1      	blt.n	bab26 <__ieee754_sqrt+0xa2>
   bab42:	f104 0801 	add.w	r8, r4, #1
   bab46:	e7ef      	b.n	bab28 <__ieee754_sqrt+0xa4>
   bab48:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   bab4c:	4322      	orrs	r2, r4
   bab4e:	d038      	beq.n	babc2 <__ieee754_sqrt+0x13e>
   bab50:	2d00      	cmp	r5, #0
   bab52:	d14e      	bne.n	babf2 <__ieee754_sqrt+0x16e>
   bab54:	4629      	mov	r1, r5
   bab56:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   bab5a:	3915      	subs	r1, #21
   bab5c:	4613      	mov	r3, r2
   bab5e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   bab62:	2a00      	cmp	r2, #0
   bab64:	d0f7      	beq.n	bab56 <__ieee754_sqrt+0xd2>
   bab66:	02d6      	lsls	r6, r2, #11
   bab68:	d450      	bmi.n	bac0c <__ieee754_sqrt+0x188>
   bab6a:	2000      	movs	r0, #0
   bab6c:	005b      	lsls	r3, r3, #1
   bab6e:	02dd      	lsls	r5, r3, #11
   bab70:	4604      	mov	r4, r0
   bab72:	f100 0001 	add.w	r0, r0, #1
   bab76:	d5f9      	bpl.n	bab6c <__ieee754_sqrt+0xe8>
   bab78:	461a      	mov	r2, r3
   bab7a:	4663      	mov	r3, ip
   bab7c:	fa0c fc00 	lsl.w	ip, ip, r0
   bab80:	f1c0 0020 	rsb	r0, r0, #32
   bab84:	40c3      	lsrs	r3, r0
   bab86:	1b09      	subs	r1, r1, r4
   bab88:	4313      	orrs	r3, r2
   bab8a:	e78a      	b.n	baaa2 <__ieee754_sqrt+0x1e>
   bab8c:	4561      	cmp	r1, ip
   bab8e:	d8b8      	bhi.n	bab02 <__ieee754_sqrt+0x7e>
   bab90:	2900      	cmp	r1, #0
   bab92:	eb01 0e02 	add.w	lr, r1, r2
   bab96:	dbd1      	blt.n	bab3c <__ieee754_sqrt+0xb8>
   bab98:	4698      	mov	r8, r3
   bab9a:	2300      	movs	r3, #0
   bab9c:	e7c9      	b.n	bab32 <__ieee754_sqrt+0xae>
   bab9e:	ea53 030c 	orrs.w	r3, r3, ip
   baba2:	d110      	bne.n	babc6 <__ieee754_sqrt+0x142>
   baba4:	0868      	lsrs	r0, r5, #1
   baba6:	1071      	asrs	r1, r6, #1
   baba8:	07f3      	lsls	r3, r6, #31
   babaa:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   babae:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   babb2:	bf48      	it	mi
   babb4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   babb8:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   babbc:	4602      	mov	r2, r0
   babbe:	ec43 2b10 	vmov	d0, r2, r3
   babc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   babc6:	1c6a      	adds	r2, r5, #1
   babc8:	bf16      	itet	ne
   babca:	1c68      	addne	r0, r5, #1
   babcc:	3601      	addeq	r6, #1
   babce:	0840      	lsrne	r0, r0, #1
   babd0:	e7e9      	b.n	baba6 <__ieee754_sqrt+0x122>
   babd2:	ee10 2a10 	vmov	r2, s0
   babd6:	ee10 0a10 	vmov	r0, s0
   babda:	462b      	mov	r3, r5
   babdc:	4629      	mov	r1, r5
   babde:	f000 f9d9 	bl	baf94 <__aeabi_dmul>
   babe2:	4622      	mov	r2, r4
   babe4:	462b      	mov	r3, r5
   babe6:	f000 f81f 	bl	bac28 <__adddf3>
   babea:	ec41 0b10 	vmov	d0, r0, r1
   babee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   babf2:	ee10 2a10 	vmov	r2, s0
   babf6:	4620      	mov	r0, r4
   babf8:	4629      	mov	r1, r5
   babfa:	f000 f813 	bl	bac24 <__aeabi_dsub>
   babfe:	4602      	mov	r2, r0
   bac00:	460b      	mov	r3, r1
   bac02:	f000 faf1 	bl	bb1e8 <__aeabi_ddiv>
   bac06:	ec41 0b10 	vmov	d0, r0, r1
   bac0a:	e7da      	b.n	babc2 <__ieee754_sqrt+0x13e>
   bac0c:	4663      	mov	r3, ip
   bac0e:	2020      	movs	r0, #32
   bac10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bac14:	e7b6      	b.n	bab84 <__ieee754_sqrt+0x100>
   bac16:	bf00      	nop
   bac18:	7ff00000 	.word	0x7ff00000

000bac1c <__aeabi_drsub>:
   bac1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bac20:	e002      	b.n	bac28 <__adddf3>
   bac22:	bf00      	nop

000bac24 <__aeabi_dsub>:
   bac24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bac28 <__adddf3>:
   bac28:	b530      	push	{r4, r5, lr}
   bac2a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bac2e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bac32:	ea94 0f05 	teq	r4, r5
   bac36:	bf08      	it	eq
   bac38:	ea90 0f02 	teqeq	r0, r2
   bac3c:	bf1f      	itttt	ne
   bac3e:	ea54 0c00 	orrsne.w	ip, r4, r0
   bac42:	ea55 0c02 	orrsne.w	ip, r5, r2
   bac46:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bac4a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bac4e:	f000 80e2 	beq.w	bae16 <__adddf3+0x1ee>
   bac52:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bac56:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bac5a:	bfb8      	it	lt
   bac5c:	426d      	neglt	r5, r5
   bac5e:	dd0c      	ble.n	bac7a <__adddf3+0x52>
   bac60:	442c      	add	r4, r5
   bac62:	ea80 0202 	eor.w	r2, r0, r2
   bac66:	ea81 0303 	eor.w	r3, r1, r3
   bac6a:	ea82 0000 	eor.w	r0, r2, r0
   bac6e:	ea83 0101 	eor.w	r1, r3, r1
   bac72:	ea80 0202 	eor.w	r2, r0, r2
   bac76:	ea81 0303 	eor.w	r3, r1, r3
   bac7a:	2d36      	cmp	r5, #54	; 0x36
   bac7c:	bf88      	it	hi
   bac7e:	bd30      	pophi	{r4, r5, pc}
   bac80:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bac84:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bac88:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bac8c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bac90:	d002      	beq.n	bac98 <__adddf3+0x70>
   bac92:	4240      	negs	r0, r0
   bac94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bac98:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bac9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   baca0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   baca4:	d002      	beq.n	bacac <__adddf3+0x84>
   baca6:	4252      	negs	r2, r2
   baca8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bacac:	ea94 0f05 	teq	r4, r5
   bacb0:	f000 80a7 	beq.w	bae02 <__adddf3+0x1da>
   bacb4:	f1a4 0401 	sub.w	r4, r4, #1
   bacb8:	f1d5 0e20 	rsbs	lr, r5, #32
   bacbc:	db0d      	blt.n	bacda <__adddf3+0xb2>
   bacbe:	fa02 fc0e 	lsl.w	ip, r2, lr
   bacc2:	fa22 f205 	lsr.w	r2, r2, r5
   bacc6:	1880      	adds	r0, r0, r2
   bacc8:	f141 0100 	adc.w	r1, r1, #0
   baccc:	fa03 f20e 	lsl.w	r2, r3, lr
   bacd0:	1880      	adds	r0, r0, r2
   bacd2:	fa43 f305 	asr.w	r3, r3, r5
   bacd6:	4159      	adcs	r1, r3
   bacd8:	e00e      	b.n	bacf8 <__adddf3+0xd0>
   bacda:	f1a5 0520 	sub.w	r5, r5, #32
   bacde:	f10e 0e20 	add.w	lr, lr, #32
   bace2:	2a01      	cmp	r2, #1
   bace4:	fa03 fc0e 	lsl.w	ip, r3, lr
   bace8:	bf28      	it	cs
   bacea:	f04c 0c02 	orrcs.w	ip, ip, #2
   bacee:	fa43 f305 	asr.w	r3, r3, r5
   bacf2:	18c0      	adds	r0, r0, r3
   bacf4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bacf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bacfc:	d507      	bpl.n	bad0e <__adddf3+0xe6>
   bacfe:	f04f 0e00 	mov.w	lr, #0
   bad02:	f1dc 0c00 	rsbs	ip, ip, #0
   bad06:	eb7e 0000 	sbcs.w	r0, lr, r0
   bad0a:	eb6e 0101 	sbc.w	r1, lr, r1
   bad0e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bad12:	d31b      	bcc.n	bad4c <__adddf3+0x124>
   bad14:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bad18:	d30c      	bcc.n	bad34 <__adddf3+0x10c>
   bad1a:	0849      	lsrs	r1, r1, #1
   bad1c:	ea5f 0030 	movs.w	r0, r0, rrx
   bad20:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bad24:	f104 0401 	add.w	r4, r4, #1
   bad28:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bad2c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bad30:	f080 809a 	bcs.w	bae68 <__adddf3+0x240>
   bad34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bad38:	bf08      	it	eq
   bad3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bad3e:	f150 0000 	adcs.w	r0, r0, #0
   bad42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bad46:	ea41 0105 	orr.w	r1, r1, r5
   bad4a:	bd30      	pop	{r4, r5, pc}
   bad4c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bad50:	4140      	adcs	r0, r0
   bad52:	eb41 0101 	adc.w	r1, r1, r1
   bad56:	3c01      	subs	r4, #1
   bad58:	bf28      	it	cs
   bad5a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bad5e:	d2e9      	bcs.n	bad34 <__adddf3+0x10c>
   bad60:	f091 0f00 	teq	r1, #0
   bad64:	bf04      	itt	eq
   bad66:	4601      	moveq	r1, r0
   bad68:	2000      	moveq	r0, #0
   bad6a:	fab1 f381 	clz	r3, r1
   bad6e:	bf08      	it	eq
   bad70:	3320      	addeq	r3, #32
   bad72:	f1a3 030b 	sub.w	r3, r3, #11
   bad76:	f1b3 0220 	subs.w	r2, r3, #32
   bad7a:	da0c      	bge.n	bad96 <__adddf3+0x16e>
   bad7c:	320c      	adds	r2, #12
   bad7e:	dd08      	ble.n	bad92 <__adddf3+0x16a>
   bad80:	f102 0c14 	add.w	ip, r2, #20
   bad84:	f1c2 020c 	rsb	r2, r2, #12
   bad88:	fa01 f00c 	lsl.w	r0, r1, ip
   bad8c:	fa21 f102 	lsr.w	r1, r1, r2
   bad90:	e00c      	b.n	badac <__adddf3+0x184>
   bad92:	f102 0214 	add.w	r2, r2, #20
   bad96:	bfd8      	it	le
   bad98:	f1c2 0c20 	rsble	ip, r2, #32
   bad9c:	fa01 f102 	lsl.w	r1, r1, r2
   bada0:	fa20 fc0c 	lsr.w	ip, r0, ip
   bada4:	bfdc      	itt	le
   bada6:	ea41 010c 	orrle.w	r1, r1, ip
   badaa:	4090      	lslle	r0, r2
   badac:	1ae4      	subs	r4, r4, r3
   badae:	bfa2      	ittt	ge
   badb0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   badb4:	4329      	orrge	r1, r5
   badb6:	bd30      	popge	{r4, r5, pc}
   badb8:	ea6f 0404 	mvn.w	r4, r4
   badbc:	3c1f      	subs	r4, #31
   badbe:	da1c      	bge.n	badfa <__adddf3+0x1d2>
   badc0:	340c      	adds	r4, #12
   badc2:	dc0e      	bgt.n	bade2 <__adddf3+0x1ba>
   badc4:	f104 0414 	add.w	r4, r4, #20
   badc8:	f1c4 0220 	rsb	r2, r4, #32
   badcc:	fa20 f004 	lsr.w	r0, r0, r4
   badd0:	fa01 f302 	lsl.w	r3, r1, r2
   badd4:	ea40 0003 	orr.w	r0, r0, r3
   badd8:	fa21 f304 	lsr.w	r3, r1, r4
   baddc:	ea45 0103 	orr.w	r1, r5, r3
   bade0:	bd30      	pop	{r4, r5, pc}
   bade2:	f1c4 040c 	rsb	r4, r4, #12
   bade6:	f1c4 0220 	rsb	r2, r4, #32
   badea:	fa20 f002 	lsr.w	r0, r0, r2
   badee:	fa01 f304 	lsl.w	r3, r1, r4
   badf2:	ea40 0003 	orr.w	r0, r0, r3
   badf6:	4629      	mov	r1, r5
   badf8:	bd30      	pop	{r4, r5, pc}
   badfa:	fa21 f004 	lsr.w	r0, r1, r4
   badfe:	4629      	mov	r1, r5
   bae00:	bd30      	pop	{r4, r5, pc}
   bae02:	f094 0f00 	teq	r4, #0
   bae06:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bae0a:	bf06      	itte	eq
   bae0c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bae10:	3401      	addeq	r4, #1
   bae12:	3d01      	subne	r5, #1
   bae14:	e74e      	b.n	bacb4 <__adddf3+0x8c>
   bae16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bae1a:	bf18      	it	ne
   bae1c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bae20:	d029      	beq.n	bae76 <__adddf3+0x24e>
   bae22:	ea94 0f05 	teq	r4, r5
   bae26:	bf08      	it	eq
   bae28:	ea90 0f02 	teqeq	r0, r2
   bae2c:	d005      	beq.n	bae3a <__adddf3+0x212>
   bae2e:	ea54 0c00 	orrs.w	ip, r4, r0
   bae32:	bf04      	itt	eq
   bae34:	4619      	moveq	r1, r3
   bae36:	4610      	moveq	r0, r2
   bae38:	bd30      	pop	{r4, r5, pc}
   bae3a:	ea91 0f03 	teq	r1, r3
   bae3e:	bf1e      	ittt	ne
   bae40:	2100      	movne	r1, #0
   bae42:	2000      	movne	r0, #0
   bae44:	bd30      	popne	{r4, r5, pc}
   bae46:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bae4a:	d105      	bne.n	bae58 <__adddf3+0x230>
   bae4c:	0040      	lsls	r0, r0, #1
   bae4e:	4149      	adcs	r1, r1
   bae50:	bf28      	it	cs
   bae52:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bae56:	bd30      	pop	{r4, r5, pc}
   bae58:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bae5c:	bf3c      	itt	cc
   bae5e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bae62:	bd30      	popcc	{r4, r5, pc}
   bae64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bae68:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bae6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bae70:	f04f 0000 	mov.w	r0, #0
   bae74:	bd30      	pop	{r4, r5, pc}
   bae76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bae7a:	bf1a      	itte	ne
   bae7c:	4619      	movne	r1, r3
   bae7e:	4610      	movne	r0, r2
   bae80:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bae84:	bf1c      	itt	ne
   bae86:	460b      	movne	r3, r1
   bae88:	4602      	movne	r2, r0
   bae8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bae8e:	bf06      	itte	eq
   bae90:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bae94:	ea91 0f03 	teqeq	r1, r3
   bae98:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bae9c:	bd30      	pop	{r4, r5, pc}
   bae9e:	bf00      	nop

000baea0 <__aeabi_ui2d>:
   baea0:	f090 0f00 	teq	r0, #0
   baea4:	bf04      	itt	eq
   baea6:	2100      	moveq	r1, #0
   baea8:	4770      	bxeq	lr
   baeaa:	b530      	push	{r4, r5, lr}
   baeac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baeb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baeb4:	f04f 0500 	mov.w	r5, #0
   baeb8:	f04f 0100 	mov.w	r1, #0
   baebc:	e750      	b.n	bad60 <__adddf3+0x138>
   baebe:	bf00      	nop

000baec0 <__aeabi_i2d>:
   baec0:	f090 0f00 	teq	r0, #0
   baec4:	bf04      	itt	eq
   baec6:	2100      	moveq	r1, #0
   baec8:	4770      	bxeq	lr
   baeca:	b530      	push	{r4, r5, lr}
   baecc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baed0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baed4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   baed8:	bf48      	it	mi
   baeda:	4240      	negmi	r0, r0
   baedc:	f04f 0100 	mov.w	r1, #0
   baee0:	e73e      	b.n	bad60 <__adddf3+0x138>
   baee2:	bf00      	nop

000baee4 <__aeabi_f2d>:
   baee4:	0042      	lsls	r2, r0, #1
   baee6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   baeea:	ea4f 0131 	mov.w	r1, r1, rrx
   baeee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   baef2:	bf1f      	itttt	ne
   baef4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   baef8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   baefc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   baf00:	4770      	bxne	lr
   baf02:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   baf06:	bf08      	it	eq
   baf08:	4770      	bxeq	lr
   baf0a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   baf0e:	bf04      	itt	eq
   baf10:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   baf14:	4770      	bxeq	lr
   baf16:	b530      	push	{r4, r5, lr}
   baf18:	f44f 7460 	mov.w	r4, #896	; 0x380
   baf1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   baf20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   baf24:	e71c      	b.n	bad60 <__adddf3+0x138>
   baf26:	bf00      	nop

000baf28 <__aeabi_ul2d>:
   baf28:	ea50 0201 	orrs.w	r2, r0, r1
   baf2c:	bf08      	it	eq
   baf2e:	4770      	bxeq	lr
   baf30:	b530      	push	{r4, r5, lr}
   baf32:	f04f 0500 	mov.w	r5, #0
   baf36:	e00a      	b.n	baf4e <__aeabi_l2d+0x16>

000baf38 <__aeabi_l2d>:
   baf38:	ea50 0201 	orrs.w	r2, r0, r1
   baf3c:	bf08      	it	eq
   baf3e:	4770      	bxeq	lr
   baf40:	b530      	push	{r4, r5, lr}
   baf42:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   baf46:	d502      	bpl.n	baf4e <__aeabi_l2d+0x16>
   baf48:	4240      	negs	r0, r0
   baf4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   baf4e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baf52:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baf56:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   baf5a:	f43f aed8 	beq.w	bad0e <__adddf3+0xe6>
   baf5e:	f04f 0203 	mov.w	r2, #3
   baf62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   baf66:	bf18      	it	ne
   baf68:	3203      	addne	r2, #3
   baf6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   baf6e:	bf18      	it	ne
   baf70:	3203      	addne	r2, #3
   baf72:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   baf76:	f1c2 0320 	rsb	r3, r2, #32
   baf7a:	fa00 fc03 	lsl.w	ip, r0, r3
   baf7e:	fa20 f002 	lsr.w	r0, r0, r2
   baf82:	fa01 fe03 	lsl.w	lr, r1, r3
   baf86:	ea40 000e 	orr.w	r0, r0, lr
   baf8a:	fa21 f102 	lsr.w	r1, r1, r2
   baf8e:	4414      	add	r4, r2
   baf90:	e6bd      	b.n	bad0e <__adddf3+0xe6>
   baf92:	bf00      	nop

000baf94 <__aeabi_dmul>:
   baf94:	b570      	push	{r4, r5, r6, lr}
   baf96:	f04f 0cff 	mov.w	ip, #255	; 0xff
   baf9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   baf9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bafa2:	bf1d      	ittte	ne
   bafa4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bafa8:	ea94 0f0c 	teqne	r4, ip
   bafac:	ea95 0f0c 	teqne	r5, ip
   bafb0:	f000 f8de 	bleq	bb170 <__aeabi_dmul+0x1dc>
   bafb4:	442c      	add	r4, r5
   bafb6:	ea81 0603 	eor.w	r6, r1, r3
   bafba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bafbe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bafc2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bafc6:	bf18      	it	ne
   bafc8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bafcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bafd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bafd4:	d038      	beq.n	bb048 <__aeabi_dmul+0xb4>
   bafd6:	fba0 ce02 	umull	ip, lr, r0, r2
   bafda:	f04f 0500 	mov.w	r5, #0
   bafde:	fbe1 e502 	umlal	lr, r5, r1, r2
   bafe2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bafe6:	fbe0 e503 	umlal	lr, r5, r0, r3
   bafea:	f04f 0600 	mov.w	r6, #0
   bafee:	fbe1 5603 	umlal	r5, r6, r1, r3
   baff2:	f09c 0f00 	teq	ip, #0
   baff6:	bf18      	it	ne
   baff8:	f04e 0e01 	orrne.w	lr, lr, #1
   baffc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bb000:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bb004:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bb008:	d204      	bcs.n	bb014 <__aeabi_dmul+0x80>
   bb00a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bb00e:	416d      	adcs	r5, r5
   bb010:	eb46 0606 	adc.w	r6, r6, r6
   bb014:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bb018:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bb01c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bb020:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bb024:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bb028:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb02c:	bf88      	it	hi
   bb02e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb032:	d81e      	bhi.n	bb072 <__aeabi_dmul+0xde>
   bb034:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bb038:	bf08      	it	eq
   bb03a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bb03e:	f150 0000 	adcs.w	r0, r0, #0
   bb042:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb046:	bd70      	pop	{r4, r5, r6, pc}
   bb048:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bb04c:	ea46 0101 	orr.w	r1, r6, r1
   bb050:	ea40 0002 	orr.w	r0, r0, r2
   bb054:	ea81 0103 	eor.w	r1, r1, r3
   bb058:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bb05c:	bfc2      	ittt	gt
   bb05e:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb062:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb066:	bd70      	popgt	{r4, r5, r6, pc}
   bb068:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb06c:	f04f 0e00 	mov.w	lr, #0
   bb070:	3c01      	subs	r4, #1
   bb072:	f300 80ab 	bgt.w	bb1cc <__aeabi_dmul+0x238>
   bb076:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bb07a:	bfde      	ittt	le
   bb07c:	2000      	movle	r0, #0
   bb07e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bb082:	bd70      	pople	{r4, r5, r6, pc}
   bb084:	f1c4 0400 	rsb	r4, r4, #0
   bb088:	3c20      	subs	r4, #32
   bb08a:	da35      	bge.n	bb0f8 <__aeabi_dmul+0x164>
   bb08c:	340c      	adds	r4, #12
   bb08e:	dc1b      	bgt.n	bb0c8 <__aeabi_dmul+0x134>
   bb090:	f104 0414 	add.w	r4, r4, #20
   bb094:	f1c4 0520 	rsb	r5, r4, #32
   bb098:	fa00 f305 	lsl.w	r3, r0, r5
   bb09c:	fa20 f004 	lsr.w	r0, r0, r4
   bb0a0:	fa01 f205 	lsl.w	r2, r1, r5
   bb0a4:	ea40 0002 	orr.w	r0, r0, r2
   bb0a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bb0ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb0b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb0b4:	fa21 f604 	lsr.w	r6, r1, r4
   bb0b8:	eb42 0106 	adc.w	r1, r2, r6
   bb0bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb0c0:	bf08      	it	eq
   bb0c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb0c6:	bd70      	pop	{r4, r5, r6, pc}
   bb0c8:	f1c4 040c 	rsb	r4, r4, #12
   bb0cc:	f1c4 0520 	rsb	r5, r4, #32
   bb0d0:	fa00 f304 	lsl.w	r3, r0, r4
   bb0d4:	fa20 f005 	lsr.w	r0, r0, r5
   bb0d8:	fa01 f204 	lsl.w	r2, r1, r4
   bb0dc:	ea40 0002 	orr.w	r0, r0, r2
   bb0e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb0e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb0e8:	f141 0100 	adc.w	r1, r1, #0
   bb0ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb0f0:	bf08      	it	eq
   bb0f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb0f6:	bd70      	pop	{r4, r5, r6, pc}
   bb0f8:	f1c4 0520 	rsb	r5, r4, #32
   bb0fc:	fa00 f205 	lsl.w	r2, r0, r5
   bb100:	ea4e 0e02 	orr.w	lr, lr, r2
   bb104:	fa20 f304 	lsr.w	r3, r0, r4
   bb108:	fa01 f205 	lsl.w	r2, r1, r5
   bb10c:	ea43 0302 	orr.w	r3, r3, r2
   bb110:	fa21 f004 	lsr.w	r0, r1, r4
   bb114:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb118:	fa21 f204 	lsr.w	r2, r1, r4
   bb11c:	ea20 0002 	bic.w	r0, r0, r2
   bb120:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bb124:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb128:	bf08      	it	eq
   bb12a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb12e:	bd70      	pop	{r4, r5, r6, pc}
   bb130:	f094 0f00 	teq	r4, #0
   bb134:	d10f      	bne.n	bb156 <__aeabi_dmul+0x1c2>
   bb136:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bb13a:	0040      	lsls	r0, r0, #1
   bb13c:	eb41 0101 	adc.w	r1, r1, r1
   bb140:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb144:	bf08      	it	eq
   bb146:	3c01      	subeq	r4, #1
   bb148:	d0f7      	beq.n	bb13a <__aeabi_dmul+0x1a6>
   bb14a:	ea41 0106 	orr.w	r1, r1, r6
   bb14e:	f095 0f00 	teq	r5, #0
   bb152:	bf18      	it	ne
   bb154:	4770      	bxne	lr
   bb156:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bb15a:	0052      	lsls	r2, r2, #1
   bb15c:	eb43 0303 	adc.w	r3, r3, r3
   bb160:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bb164:	bf08      	it	eq
   bb166:	3d01      	subeq	r5, #1
   bb168:	d0f7      	beq.n	bb15a <__aeabi_dmul+0x1c6>
   bb16a:	ea43 0306 	orr.w	r3, r3, r6
   bb16e:	4770      	bx	lr
   bb170:	ea94 0f0c 	teq	r4, ip
   bb174:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb178:	bf18      	it	ne
   bb17a:	ea95 0f0c 	teqne	r5, ip
   bb17e:	d00c      	beq.n	bb19a <__aeabi_dmul+0x206>
   bb180:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb184:	bf18      	it	ne
   bb186:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb18a:	d1d1      	bne.n	bb130 <__aeabi_dmul+0x19c>
   bb18c:	ea81 0103 	eor.w	r1, r1, r3
   bb190:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb194:	f04f 0000 	mov.w	r0, #0
   bb198:	bd70      	pop	{r4, r5, r6, pc}
   bb19a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb19e:	bf06      	itte	eq
   bb1a0:	4610      	moveq	r0, r2
   bb1a2:	4619      	moveq	r1, r3
   bb1a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb1a8:	d019      	beq.n	bb1de <__aeabi_dmul+0x24a>
   bb1aa:	ea94 0f0c 	teq	r4, ip
   bb1ae:	d102      	bne.n	bb1b6 <__aeabi_dmul+0x222>
   bb1b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bb1b4:	d113      	bne.n	bb1de <__aeabi_dmul+0x24a>
   bb1b6:	ea95 0f0c 	teq	r5, ip
   bb1ba:	d105      	bne.n	bb1c8 <__aeabi_dmul+0x234>
   bb1bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bb1c0:	bf1c      	itt	ne
   bb1c2:	4610      	movne	r0, r2
   bb1c4:	4619      	movne	r1, r3
   bb1c6:	d10a      	bne.n	bb1de <__aeabi_dmul+0x24a>
   bb1c8:	ea81 0103 	eor.w	r1, r1, r3
   bb1cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb1d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb1d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb1d8:	f04f 0000 	mov.w	r0, #0
   bb1dc:	bd70      	pop	{r4, r5, r6, pc}
   bb1de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb1e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bb1e6:	bd70      	pop	{r4, r5, r6, pc}

000bb1e8 <__aeabi_ddiv>:
   bb1e8:	b570      	push	{r4, r5, r6, lr}
   bb1ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb1ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb1f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb1f6:	bf1d      	ittte	ne
   bb1f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb1fc:	ea94 0f0c 	teqne	r4, ip
   bb200:	ea95 0f0c 	teqne	r5, ip
   bb204:	f000 f8a7 	bleq	bb356 <__aeabi_ddiv+0x16e>
   bb208:	eba4 0405 	sub.w	r4, r4, r5
   bb20c:	ea81 0e03 	eor.w	lr, r1, r3
   bb210:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb214:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb218:	f000 8088 	beq.w	bb32c <__aeabi_ddiv+0x144>
   bb21c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb220:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bb224:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bb228:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bb22c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bb230:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bb234:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bb238:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bb23c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bb240:	429d      	cmp	r5, r3
   bb242:	bf08      	it	eq
   bb244:	4296      	cmpeq	r6, r2
   bb246:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bb24a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bb24e:	d202      	bcs.n	bb256 <__aeabi_ddiv+0x6e>
   bb250:	085b      	lsrs	r3, r3, #1
   bb252:	ea4f 0232 	mov.w	r2, r2, rrx
   bb256:	1ab6      	subs	r6, r6, r2
   bb258:	eb65 0503 	sbc.w	r5, r5, r3
   bb25c:	085b      	lsrs	r3, r3, #1
   bb25e:	ea4f 0232 	mov.w	r2, r2, rrx
   bb262:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bb266:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bb26a:	ebb6 0e02 	subs.w	lr, r6, r2
   bb26e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb272:	bf22      	ittt	cs
   bb274:	1ab6      	subcs	r6, r6, r2
   bb276:	4675      	movcs	r5, lr
   bb278:	ea40 000c 	orrcs.w	r0, r0, ip
   bb27c:	085b      	lsrs	r3, r3, #1
   bb27e:	ea4f 0232 	mov.w	r2, r2, rrx
   bb282:	ebb6 0e02 	subs.w	lr, r6, r2
   bb286:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb28a:	bf22      	ittt	cs
   bb28c:	1ab6      	subcs	r6, r6, r2
   bb28e:	4675      	movcs	r5, lr
   bb290:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bb294:	085b      	lsrs	r3, r3, #1
   bb296:	ea4f 0232 	mov.w	r2, r2, rrx
   bb29a:	ebb6 0e02 	subs.w	lr, r6, r2
   bb29e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb2a2:	bf22      	ittt	cs
   bb2a4:	1ab6      	subcs	r6, r6, r2
   bb2a6:	4675      	movcs	r5, lr
   bb2a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bb2ac:	085b      	lsrs	r3, r3, #1
   bb2ae:	ea4f 0232 	mov.w	r2, r2, rrx
   bb2b2:	ebb6 0e02 	subs.w	lr, r6, r2
   bb2b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb2ba:	bf22      	ittt	cs
   bb2bc:	1ab6      	subcs	r6, r6, r2
   bb2be:	4675      	movcs	r5, lr
   bb2c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bb2c4:	ea55 0e06 	orrs.w	lr, r5, r6
   bb2c8:	d018      	beq.n	bb2fc <__aeabi_ddiv+0x114>
   bb2ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bb2ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bb2d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bb2d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bb2da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bb2de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bb2e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bb2e6:	d1c0      	bne.n	bb26a <__aeabi_ddiv+0x82>
   bb2e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb2ec:	d10b      	bne.n	bb306 <__aeabi_ddiv+0x11e>
   bb2ee:	ea41 0100 	orr.w	r1, r1, r0
   bb2f2:	f04f 0000 	mov.w	r0, #0
   bb2f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bb2fa:	e7b6      	b.n	bb26a <__aeabi_ddiv+0x82>
   bb2fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb300:	bf04      	itt	eq
   bb302:	4301      	orreq	r1, r0
   bb304:	2000      	moveq	r0, #0
   bb306:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb30a:	bf88      	it	hi
   bb30c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb310:	f63f aeaf 	bhi.w	bb072 <__aeabi_dmul+0xde>
   bb314:	ebb5 0c03 	subs.w	ip, r5, r3
   bb318:	bf04      	itt	eq
   bb31a:	ebb6 0c02 	subseq.w	ip, r6, r2
   bb31e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb322:	f150 0000 	adcs.w	r0, r0, #0
   bb326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb32a:	bd70      	pop	{r4, r5, r6, pc}
   bb32c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bb330:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bb334:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bb338:	bfc2      	ittt	gt
   bb33a:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb33e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb342:	bd70      	popgt	{r4, r5, r6, pc}
   bb344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb348:	f04f 0e00 	mov.w	lr, #0
   bb34c:	3c01      	subs	r4, #1
   bb34e:	e690      	b.n	bb072 <__aeabi_dmul+0xde>
   bb350:	ea45 0e06 	orr.w	lr, r5, r6
   bb354:	e68d      	b.n	bb072 <__aeabi_dmul+0xde>
   bb356:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb35a:	ea94 0f0c 	teq	r4, ip
   bb35e:	bf08      	it	eq
   bb360:	ea95 0f0c 	teqeq	r5, ip
   bb364:	f43f af3b 	beq.w	bb1de <__aeabi_dmul+0x24a>
   bb368:	ea94 0f0c 	teq	r4, ip
   bb36c:	d10a      	bne.n	bb384 <__aeabi_ddiv+0x19c>
   bb36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb372:	f47f af34 	bne.w	bb1de <__aeabi_dmul+0x24a>
   bb376:	ea95 0f0c 	teq	r5, ip
   bb37a:	f47f af25 	bne.w	bb1c8 <__aeabi_dmul+0x234>
   bb37e:	4610      	mov	r0, r2
   bb380:	4619      	mov	r1, r3
   bb382:	e72c      	b.n	bb1de <__aeabi_dmul+0x24a>
   bb384:	ea95 0f0c 	teq	r5, ip
   bb388:	d106      	bne.n	bb398 <__aeabi_ddiv+0x1b0>
   bb38a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb38e:	f43f aefd 	beq.w	bb18c <__aeabi_dmul+0x1f8>
   bb392:	4610      	mov	r0, r2
   bb394:	4619      	mov	r1, r3
   bb396:	e722      	b.n	bb1de <__aeabi_dmul+0x24a>
   bb398:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb39c:	bf18      	it	ne
   bb39e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb3a2:	f47f aec5 	bne.w	bb130 <__aeabi_dmul+0x19c>
   bb3a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bb3aa:	f47f af0d 	bne.w	bb1c8 <__aeabi_dmul+0x234>
   bb3ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bb3b2:	f47f aeeb 	bne.w	bb18c <__aeabi_dmul+0x1f8>
   bb3b6:	e712      	b.n	bb1de <__aeabi_dmul+0x24a>

000bb3b8 <__gedf2>:
   bb3b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bb3bc:	e006      	b.n	bb3cc <__cmpdf2+0x4>
   bb3be:	bf00      	nop

000bb3c0 <__ledf2>:
   bb3c0:	f04f 0c01 	mov.w	ip, #1
   bb3c4:	e002      	b.n	bb3cc <__cmpdf2+0x4>
   bb3c6:	bf00      	nop

000bb3c8 <__cmpdf2>:
   bb3c8:	f04f 0c01 	mov.w	ip, #1
   bb3cc:	f84d cd04 	str.w	ip, [sp, #-4]!
   bb3d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb3d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb3d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb3dc:	bf18      	it	ne
   bb3de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bb3e2:	d01b      	beq.n	bb41c <__cmpdf2+0x54>
   bb3e4:	b001      	add	sp, #4
   bb3e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bb3ea:	bf0c      	ite	eq
   bb3ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bb3f0:	ea91 0f03 	teqne	r1, r3
   bb3f4:	bf02      	ittt	eq
   bb3f6:	ea90 0f02 	teqeq	r0, r2
   bb3fa:	2000      	moveq	r0, #0
   bb3fc:	4770      	bxeq	lr
   bb3fe:	f110 0f00 	cmn.w	r0, #0
   bb402:	ea91 0f03 	teq	r1, r3
   bb406:	bf58      	it	pl
   bb408:	4299      	cmppl	r1, r3
   bb40a:	bf08      	it	eq
   bb40c:	4290      	cmpeq	r0, r2
   bb40e:	bf2c      	ite	cs
   bb410:	17d8      	asrcs	r0, r3, #31
   bb412:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bb416:	f040 0001 	orr.w	r0, r0, #1
   bb41a:	4770      	bx	lr
   bb41c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb420:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb424:	d102      	bne.n	bb42c <__cmpdf2+0x64>
   bb426:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb42a:	d107      	bne.n	bb43c <__cmpdf2+0x74>
   bb42c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb430:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb434:	d1d6      	bne.n	bb3e4 <__cmpdf2+0x1c>
   bb436:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb43a:	d0d3      	beq.n	bb3e4 <__cmpdf2+0x1c>
   bb43c:	f85d 0b04 	ldr.w	r0, [sp], #4
   bb440:	4770      	bx	lr
   bb442:	bf00      	nop

000bb444 <__aeabi_cdrcmple>:
   bb444:	4684      	mov	ip, r0
   bb446:	4610      	mov	r0, r2
   bb448:	4662      	mov	r2, ip
   bb44a:	468c      	mov	ip, r1
   bb44c:	4619      	mov	r1, r3
   bb44e:	4663      	mov	r3, ip
   bb450:	e000      	b.n	bb454 <__aeabi_cdcmpeq>
   bb452:	bf00      	nop

000bb454 <__aeabi_cdcmpeq>:
   bb454:	b501      	push	{r0, lr}
   bb456:	f7ff ffb7 	bl	bb3c8 <__cmpdf2>
   bb45a:	2800      	cmp	r0, #0
   bb45c:	bf48      	it	mi
   bb45e:	f110 0f00 	cmnmi.w	r0, #0
   bb462:	bd01      	pop	{r0, pc}

000bb464 <__aeabi_dcmpeq>:
   bb464:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb468:	f7ff fff4 	bl	bb454 <__aeabi_cdcmpeq>
   bb46c:	bf0c      	ite	eq
   bb46e:	2001      	moveq	r0, #1
   bb470:	2000      	movne	r0, #0
   bb472:	f85d fb08 	ldr.w	pc, [sp], #8
   bb476:	bf00      	nop

000bb478 <__aeabi_dcmplt>:
   bb478:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb47c:	f7ff ffea 	bl	bb454 <__aeabi_cdcmpeq>
   bb480:	bf34      	ite	cc
   bb482:	2001      	movcc	r0, #1
   bb484:	2000      	movcs	r0, #0
   bb486:	f85d fb08 	ldr.w	pc, [sp], #8
   bb48a:	bf00      	nop

000bb48c <__aeabi_dcmple>:
   bb48c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb490:	f7ff ffe0 	bl	bb454 <__aeabi_cdcmpeq>
   bb494:	bf94      	ite	ls
   bb496:	2001      	movls	r0, #1
   bb498:	2000      	movhi	r0, #0
   bb49a:	f85d fb08 	ldr.w	pc, [sp], #8
   bb49e:	bf00      	nop

000bb4a0 <__aeabi_dcmpge>:
   bb4a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb4a4:	f7ff ffce 	bl	bb444 <__aeabi_cdrcmple>
   bb4a8:	bf94      	ite	ls
   bb4aa:	2001      	movls	r0, #1
   bb4ac:	2000      	movhi	r0, #0
   bb4ae:	f85d fb08 	ldr.w	pc, [sp], #8
   bb4b2:	bf00      	nop

000bb4b4 <__aeabi_dcmpgt>:
   bb4b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb4b8:	f7ff ffc4 	bl	bb444 <__aeabi_cdrcmple>
   bb4bc:	bf34      	ite	cc
   bb4be:	2001      	movcc	r0, #1
   bb4c0:	2000      	movcs	r0, #0
   bb4c2:	f85d fb08 	ldr.w	pc, [sp], #8
   bb4c6:	bf00      	nop

000bb4c8 <__aeabi_dcmpun>:
   bb4c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb4cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb4d0:	d102      	bne.n	bb4d8 <__aeabi_dcmpun+0x10>
   bb4d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb4d6:	d10a      	bne.n	bb4ee <__aeabi_dcmpun+0x26>
   bb4d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb4dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb4e0:	d102      	bne.n	bb4e8 <__aeabi_dcmpun+0x20>
   bb4e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb4e6:	d102      	bne.n	bb4ee <__aeabi_dcmpun+0x26>
   bb4e8:	f04f 0000 	mov.w	r0, #0
   bb4ec:	4770      	bx	lr
   bb4ee:	f04f 0001 	mov.w	r0, #1
   bb4f2:	4770      	bx	lr

000bb4f4 <__aeabi_d2uiz>:
   bb4f4:	004a      	lsls	r2, r1, #1
   bb4f6:	d211      	bcs.n	bb51c <__aeabi_d2uiz+0x28>
   bb4f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bb4fc:	d211      	bcs.n	bb522 <__aeabi_d2uiz+0x2e>
   bb4fe:	d50d      	bpl.n	bb51c <__aeabi_d2uiz+0x28>
   bb500:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bb504:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bb508:	d40e      	bmi.n	bb528 <__aeabi_d2uiz+0x34>
   bb50a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb50e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bb512:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bb516:	fa23 f002 	lsr.w	r0, r3, r2
   bb51a:	4770      	bx	lr
   bb51c:	f04f 0000 	mov.w	r0, #0
   bb520:	4770      	bx	lr
   bb522:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bb526:	d102      	bne.n	bb52e <__aeabi_d2uiz+0x3a>
   bb528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb52c:	4770      	bx	lr
   bb52e:	f04f 0000 	mov.w	r0, #0
   bb532:	4770      	bx	lr

000bb534 <__aeabi_d2f>:
   bb534:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bb538:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bb53c:	bf24      	itt	cs
   bb53e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bb542:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bb546:	d90d      	bls.n	bb564 <__aeabi_d2f+0x30>
   bb548:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bb54c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bb550:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bb554:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bb558:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bb55c:	bf08      	it	eq
   bb55e:	f020 0001 	biceq.w	r0, r0, #1
   bb562:	4770      	bx	lr
   bb564:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bb568:	d121      	bne.n	bb5ae <__aeabi_d2f+0x7a>
   bb56a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bb56e:	bfbc      	itt	lt
   bb570:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bb574:	4770      	bxlt	lr
   bb576:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb57a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bb57e:	f1c2 0218 	rsb	r2, r2, #24
   bb582:	f1c2 0c20 	rsb	ip, r2, #32
   bb586:	fa10 f30c 	lsls.w	r3, r0, ip
   bb58a:	fa20 f002 	lsr.w	r0, r0, r2
   bb58e:	bf18      	it	ne
   bb590:	f040 0001 	orrne.w	r0, r0, #1
   bb594:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb598:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bb59c:	fa03 fc0c 	lsl.w	ip, r3, ip
   bb5a0:	ea40 000c 	orr.w	r0, r0, ip
   bb5a4:	fa23 f302 	lsr.w	r3, r3, r2
   bb5a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bb5ac:	e7cc      	b.n	bb548 <__aeabi_d2f+0x14>
   bb5ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bb5b2:	d107      	bne.n	bb5c4 <__aeabi_d2f+0x90>
   bb5b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bb5b8:	bf1e      	ittt	ne
   bb5ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bb5be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bb5c2:	4770      	bxne	lr
   bb5c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bb5c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bb5cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bb5d0:	4770      	bx	lr
   bb5d2:	bf00      	nop

000bb5d4 <__aeabi_d2ulz>:
   bb5d4:	b5d0      	push	{r4, r6, r7, lr}
   bb5d6:	4b0c      	ldr	r3, [pc, #48]	; (bb608 <__aeabi_d2ulz+0x34>)
   bb5d8:	2200      	movs	r2, #0
   bb5da:	4606      	mov	r6, r0
   bb5dc:	460f      	mov	r7, r1
   bb5de:	f7ff fcd9 	bl	baf94 <__aeabi_dmul>
   bb5e2:	f7ff ff87 	bl	bb4f4 <__aeabi_d2uiz>
   bb5e6:	4604      	mov	r4, r0
   bb5e8:	f7ff fc5a 	bl	baea0 <__aeabi_ui2d>
   bb5ec:	4b07      	ldr	r3, [pc, #28]	; (bb60c <__aeabi_d2ulz+0x38>)
   bb5ee:	2200      	movs	r2, #0
   bb5f0:	f7ff fcd0 	bl	baf94 <__aeabi_dmul>
   bb5f4:	4602      	mov	r2, r0
   bb5f6:	460b      	mov	r3, r1
   bb5f8:	4630      	mov	r0, r6
   bb5fa:	4639      	mov	r1, r7
   bb5fc:	f7ff fb12 	bl	bac24 <__aeabi_dsub>
   bb600:	f7ff ff78 	bl	bb4f4 <__aeabi_d2uiz>
   bb604:	4621      	mov	r1, r4
   bb606:	bdd0      	pop	{r4, r6, r7, pc}
   bb608:	3df00000 	.word	0x3df00000
   bb60c:	41f00000 	.word	0x41f00000

000bb610 <atexit>:
   bb610:	2300      	movs	r3, #0
   bb612:	4601      	mov	r1, r0
   bb614:	461a      	mov	r2, r3
   bb616:	4618      	mov	r0, r3
   bb618:	f000 bfcc 	b.w	bc5b4 <__register_exitproc>

000bb61c <atoi>:
   bb61c:	220a      	movs	r2, #10
   bb61e:	2100      	movs	r1, #0
   bb620:	f000 bfbe 	b.w	bc5a0 <strtol>

000bb624 <memcmp>:
   bb624:	b510      	push	{r4, lr}
   bb626:	3901      	subs	r1, #1
   bb628:	4402      	add	r2, r0
   bb62a:	4290      	cmp	r0, r2
   bb62c:	d101      	bne.n	bb632 <memcmp+0xe>
   bb62e:	2000      	movs	r0, #0
   bb630:	e005      	b.n	bb63e <memcmp+0x1a>
   bb632:	7803      	ldrb	r3, [r0, #0]
   bb634:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bb638:	42a3      	cmp	r3, r4
   bb63a:	d001      	beq.n	bb640 <memcmp+0x1c>
   bb63c:	1b18      	subs	r0, r3, r4
   bb63e:	bd10      	pop	{r4, pc}
   bb640:	3001      	adds	r0, #1
   bb642:	e7f2      	b.n	bb62a <memcmp+0x6>

000bb644 <memcpy>:
   bb644:	440a      	add	r2, r1
   bb646:	4291      	cmp	r1, r2
   bb648:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bb64c:	d100      	bne.n	bb650 <memcpy+0xc>
   bb64e:	4770      	bx	lr
   bb650:	b510      	push	{r4, lr}
   bb652:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb656:	f803 4f01 	strb.w	r4, [r3, #1]!
   bb65a:	4291      	cmp	r1, r2
   bb65c:	d1f9      	bne.n	bb652 <memcpy+0xe>
   bb65e:	bd10      	pop	{r4, pc}

000bb660 <memmove>:
   bb660:	4288      	cmp	r0, r1
   bb662:	b510      	push	{r4, lr}
   bb664:	eb01 0402 	add.w	r4, r1, r2
   bb668:	d902      	bls.n	bb670 <memmove+0x10>
   bb66a:	4284      	cmp	r4, r0
   bb66c:	4623      	mov	r3, r4
   bb66e:	d807      	bhi.n	bb680 <memmove+0x20>
   bb670:	1e43      	subs	r3, r0, #1
   bb672:	42a1      	cmp	r1, r4
   bb674:	d008      	beq.n	bb688 <memmove+0x28>
   bb676:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb67a:	f803 2f01 	strb.w	r2, [r3, #1]!
   bb67e:	e7f8      	b.n	bb672 <memmove+0x12>
   bb680:	4402      	add	r2, r0
   bb682:	4601      	mov	r1, r0
   bb684:	428a      	cmp	r2, r1
   bb686:	d100      	bne.n	bb68a <memmove+0x2a>
   bb688:	bd10      	pop	{r4, pc}
   bb68a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bb68e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bb692:	e7f7      	b.n	bb684 <memmove+0x24>

000bb694 <memset>:
   bb694:	4402      	add	r2, r0
   bb696:	4603      	mov	r3, r0
   bb698:	4293      	cmp	r3, r2
   bb69a:	d100      	bne.n	bb69e <memset+0xa>
   bb69c:	4770      	bx	lr
   bb69e:	f803 1b01 	strb.w	r1, [r3], #1
   bb6a2:	e7f9      	b.n	bb698 <memset+0x4>

000bb6a4 <srand>:
   bb6a4:	b538      	push	{r3, r4, r5, lr}
   bb6a6:	4b10      	ldr	r3, [pc, #64]	; (bb6e8 <srand+0x44>)
   bb6a8:	681d      	ldr	r5, [r3, #0]
   bb6aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb6ac:	4604      	mov	r4, r0
   bb6ae:	b9b3      	cbnz	r3, bb6de <srand+0x3a>
   bb6b0:	2018      	movs	r0, #24
   bb6b2:	f7fc fce9 	bl	b8088 <malloc>
   bb6b6:	4602      	mov	r2, r0
   bb6b8:	63a8      	str	r0, [r5, #56]	; 0x38
   bb6ba:	b920      	cbnz	r0, bb6c6 <srand+0x22>
   bb6bc:	4b0b      	ldr	r3, [pc, #44]	; (bb6ec <srand+0x48>)
   bb6be:	480c      	ldr	r0, [pc, #48]	; (bb6f0 <srand+0x4c>)
   bb6c0:	2142      	movs	r1, #66	; 0x42
   bb6c2:	f7fc fd21 	bl	b8108 <__assert_func>
   bb6c6:	490b      	ldr	r1, [pc, #44]	; (bb6f4 <srand+0x50>)
   bb6c8:	4b0b      	ldr	r3, [pc, #44]	; (bb6f8 <srand+0x54>)
   bb6ca:	e9c0 1300 	strd	r1, r3, [r0]
   bb6ce:	4b0b      	ldr	r3, [pc, #44]	; (bb6fc <srand+0x58>)
   bb6d0:	6083      	str	r3, [r0, #8]
   bb6d2:	230b      	movs	r3, #11
   bb6d4:	8183      	strh	r3, [r0, #12]
   bb6d6:	2100      	movs	r1, #0
   bb6d8:	2001      	movs	r0, #1
   bb6da:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bb6de:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb6e0:	2200      	movs	r2, #0
   bb6e2:	611c      	str	r4, [r3, #16]
   bb6e4:	615a      	str	r2, [r3, #20]
   bb6e6:	bd38      	pop	{r3, r4, r5, pc}
   bb6e8:	200352e8 	.word	0x200352e8
   bb6ec:	000be0dd 	.word	0x000be0dd
   bb6f0:	000be0f4 	.word	0x000be0f4
   bb6f4:	abcd330e 	.word	0xabcd330e
   bb6f8:	e66d1234 	.word	0xe66d1234
   bb6fc:	0005deec 	.word	0x0005deec

000bb700 <strcmp>:
   bb700:	f810 2b01 	ldrb.w	r2, [r0], #1
   bb704:	f811 3b01 	ldrb.w	r3, [r1], #1
   bb708:	2a01      	cmp	r2, #1
   bb70a:	bf28      	it	cs
   bb70c:	429a      	cmpcs	r2, r3
   bb70e:	d0f7      	beq.n	bb700 <strcmp>
   bb710:	1ad0      	subs	r0, r2, r3
   bb712:	4770      	bx	lr

000bb714 <strcpy>:
   bb714:	4603      	mov	r3, r0
   bb716:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb71a:	f803 2b01 	strb.w	r2, [r3], #1
   bb71e:	2a00      	cmp	r2, #0
   bb720:	d1f9      	bne.n	bb716 <strcpy+0x2>
   bb722:	4770      	bx	lr

000bb724 <strlen>:
   bb724:	4603      	mov	r3, r0
   bb726:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb72a:	2a00      	cmp	r2, #0
   bb72c:	d1fb      	bne.n	bb726 <strlen+0x2>
   bb72e:	1a18      	subs	r0, r3, r0
   bb730:	3801      	subs	r0, #1
   bb732:	4770      	bx	lr

000bb734 <strncmp>:
   bb734:	b510      	push	{r4, lr}
   bb736:	b17a      	cbz	r2, bb758 <strncmp+0x24>
   bb738:	4603      	mov	r3, r0
   bb73a:	3901      	subs	r1, #1
   bb73c:	1884      	adds	r4, r0, r2
   bb73e:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb742:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bb746:	4290      	cmp	r0, r2
   bb748:	d101      	bne.n	bb74e <strncmp+0x1a>
   bb74a:	42a3      	cmp	r3, r4
   bb74c:	d101      	bne.n	bb752 <strncmp+0x1e>
   bb74e:	1a80      	subs	r0, r0, r2
   bb750:	bd10      	pop	{r4, pc}
   bb752:	2800      	cmp	r0, #0
   bb754:	d1f3      	bne.n	bb73e <strncmp+0xa>
   bb756:	e7fa      	b.n	bb74e <strncmp+0x1a>
   bb758:	4610      	mov	r0, r2
   bb75a:	e7f9      	b.n	bb750 <strncmp+0x1c>

000bb75c <strnlen>:
   bb75c:	b510      	push	{r4, lr}
   bb75e:	4602      	mov	r2, r0
   bb760:	4401      	add	r1, r0
   bb762:	428a      	cmp	r2, r1
   bb764:	4613      	mov	r3, r2
   bb766:	d003      	beq.n	bb770 <strnlen+0x14>
   bb768:	781c      	ldrb	r4, [r3, #0]
   bb76a:	3201      	adds	r2, #1
   bb76c:	2c00      	cmp	r4, #0
   bb76e:	d1f8      	bne.n	bb762 <strnlen+0x6>
   bb770:	1a18      	subs	r0, r3, r0
   bb772:	bd10      	pop	{r4, pc}

000bb774 <strstr>:
   bb774:	780a      	ldrb	r2, [r1, #0]
   bb776:	b570      	push	{r4, r5, r6, lr}
   bb778:	b96a      	cbnz	r2, bb796 <strstr+0x22>
   bb77a:	bd70      	pop	{r4, r5, r6, pc}
   bb77c:	429a      	cmp	r2, r3
   bb77e:	d109      	bne.n	bb794 <strstr+0x20>
   bb780:	460c      	mov	r4, r1
   bb782:	4605      	mov	r5, r0
   bb784:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bb788:	2b00      	cmp	r3, #0
   bb78a:	d0f6      	beq.n	bb77a <strstr+0x6>
   bb78c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bb790:	429e      	cmp	r6, r3
   bb792:	d0f7      	beq.n	bb784 <strstr+0x10>
   bb794:	3001      	adds	r0, #1
   bb796:	7803      	ldrb	r3, [r0, #0]
   bb798:	2b00      	cmp	r3, #0
   bb79a:	d1ef      	bne.n	bb77c <strstr+0x8>
   bb79c:	4618      	mov	r0, r3
   bb79e:	e7ec      	b.n	bb77a <strstr+0x6>

000bb7a0 <sulp>:
   bb7a0:	b570      	push	{r4, r5, r6, lr}
   bb7a2:	4604      	mov	r4, r0
   bb7a4:	460d      	mov	r5, r1
   bb7a6:	ec45 4b10 	vmov	d0, r4, r5
   bb7aa:	4616      	mov	r6, r2
   bb7ac:	f001 fe5c 	bl	bd468 <__ulp>
   bb7b0:	ec51 0b10 	vmov	r0, r1, d0
   bb7b4:	b17e      	cbz	r6, bb7d6 <sulp+0x36>
   bb7b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bb7ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bb7be:	2b00      	cmp	r3, #0
   bb7c0:	dd09      	ble.n	bb7d6 <sulp+0x36>
   bb7c2:	051b      	lsls	r3, r3, #20
   bb7c4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bb7c8:	2400      	movs	r4, #0
   bb7ca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bb7ce:	4622      	mov	r2, r4
   bb7d0:	462b      	mov	r3, r5
   bb7d2:	f7ff fbdf 	bl	baf94 <__aeabi_dmul>
   bb7d6:	bd70      	pop	{r4, r5, r6, pc}

000bb7d8 <_strtod_l>:
   bb7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb7dc:	ed2d 8b02 	vpush	{d8}
   bb7e0:	b09d      	sub	sp, #116	; 0x74
   bb7e2:	461f      	mov	r7, r3
   bb7e4:	2300      	movs	r3, #0
   bb7e6:	9318      	str	r3, [sp, #96]	; 0x60
   bb7e8:	4ba2      	ldr	r3, [pc, #648]	; (bba74 <_strtod_l+0x29c>)
   bb7ea:	9213      	str	r2, [sp, #76]	; 0x4c
   bb7ec:	681b      	ldr	r3, [r3, #0]
   bb7ee:	9305      	str	r3, [sp, #20]
   bb7f0:	4604      	mov	r4, r0
   bb7f2:	4618      	mov	r0, r3
   bb7f4:	4688      	mov	r8, r1
   bb7f6:	f7ff ff95 	bl	bb724 <strlen>
   bb7fa:	f04f 0a00 	mov.w	sl, #0
   bb7fe:	4605      	mov	r5, r0
   bb800:	f04f 0b00 	mov.w	fp, #0
   bb804:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb808:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb80a:	781a      	ldrb	r2, [r3, #0]
   bb80c:	2a2b      	cmp	r2, #43	; 0x2b
   bb80e:	d04e      	beq.n	bb8ae <_strtod_l+0xd6>
   bb810:	d83b      	bhi.n	bb88a <_strtod_l+0xb2>
   bb812:	2a0d      	cmp	r2, #13
   bb814:	d834      	bhi.n	bb880 <_strtod_l+0xa8>
   bb816:	2a08      	cmp	r2, #8
   bb818:	d834      	bhi.n	bb884 <_strtod_l+0xac>
   bb81a:	2a00      	cmp	r2, #0
   bb81c:	d03e      	beq.n	bb89c <_strtod_l+0xc4>
   bb81e:	2300      	movs	r3, #0
   bb820:	930a      	str	r3, [sp, #40]	; 0x28
   bb822:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bb824:	7833      	ldrb	r3, [r6, #0]
   bb826:	2b30      	cmp	r3, #48	; 0x30
   bb828:	f040 80b0 	bne.w	bb98c <_strtod_l+0x1b4>
   bb82c:	7873      	ldrb	r3, [r6, #1]
   bb82e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb832:	2b58      	cmp	r3, #88	; 0x58
   bb834:	d168      	bne.n	bb908 <_strtod_l+0x130>
   bb836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb838:	9301      	str	r3, [sp, #4]
   bb83a:	ab18      	add	r3, sp, #96	; 0x60
   bb83c:	9702      	str	r7, [sp, #8]
   bb83e:	9300      	str	r3, [sp, #0]
   bb840:	4a8d      	ldr	r2, [pc, #564]	; (bba78 <_strtod_l+0x2a0>)
   bb842:	ab19      	add	r3, sp, #100	; 0x64
   bb844:	a917      	add	r1, sp, #92	; 0x5c
   bb846:	4620      	mov	r0, r4
   bb848:	f000 ff7e 	bl	bc748 <__gethex>
   bb84c:	f010 0707 	ands.w	r7, r0, #7
   bb850:	4605      	mov	r5, r0
   bb852:	d005      	beq.n	bb860 <_strtod_l+0x88>
   bb854:	2f06      	cmp	r7, #6
   bb856:	d12c      	bne.n	bb8b2 <_strtod_l+0xda>
   bb858:	3601      	adds	r6, #1
   bb85a:	2300      	movs	r3, #0
   bb85c:	9617      	str	r6, [sp, #92]	; 0x5c
   bb85e:	930a      	str	r3, [sp, #40]	; 0x28
   bb860:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb862:	2b00      	cmp	r3, #0
   bb864:	f040 8590 	bne.w	bc388 <_strtod_l+0xbb0>
   bb868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb86a:	b1eb      	cbz	r3, bb8a8 <_strtod_l+0xd0>
   bb86c:	4652      	mov	r2, sl
   bb86e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bb872:	ec43 2b10 	vmov	d0, r2, r3
   bb876:	b01d      	add	sp, #116	; 0x74
   bb878:	ecbd 8b02 	vpop	{d8}
   bb87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb880:	2a20      	cmp	r2, #32
   bb882:	d1cc      	bne.n	bb81e <_strtod_l+0x46>
   bb884:	3301      	adds	r3, #1
   bb886:	9317      	str	r3, [sp, #92]	; 0x5c
   bb888:	e7be      	b.n	bb808 <_strtod_l+0x30>
   bb88a:	2a2d      	cmp	r2, #45	; 0x2d
   bb88c:	d1c7      	bne.n	bb81e <_strtod_l+0x46>
   bb88e:	2201      	movs	r2, #1
   bb890:	920a      	str	r2, [sp, #40]	; 0x28
   bb892:	1c5a      	adds	r2, r3, #1
   bb894:	9217      	str	r2, [sp, #92]	; 0x5c
   bb896:	785b      	ldrb	r3, [r3, #1]
   bb898:	2b00      	cmp	r3, #0
   bb89a:	d1c2      	bne.n	bb822 <_strtod_l+0x4a>
   bb89c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb89e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb8a2:	2b00      	cmp	r3, #0
   bb8a4:	f040 856e 	bne.w	bc384 <_strtod_l+0xbac>
   bb8a8:	4652      	mov	r2, sl
   bb8aa:	465b      	mov	r3, fp
   bb8ac:	e7e1      	b.n	bb872 <_strtod_l+0x9a>
   bb8ae:	2200      	movs	r2, #0
   bb8b0:	e7ee      	b.n	bb890 <_strtod_l+0xb8>
   bb8b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb8b4:	b13a      	cbz	r2, bb8c6 <_strtod_l+0xee>
   bb8b6:	2135      	movs	r1, #53	; 0x35
   bb8b8:	a81a      	add	r0, sp, #104	; 0x68
   bb8ba:	f001 fee0 	bl	bd67e <__copybits>
   bb8be:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb8c0:	4620      	mov	r0, r4
   bb8c2:	f001 fa9f 	bl	bce04 <_Bfree>
   bb8c6:	3f01      	subs	r7, #1
   bb8c8:	2f04      	cmp	r7, #4
   bb8ca:	d806      	bhi.n	bb8da <_strtod_l+0x102>
   bb8cc:	e8df f007 	tbb	[pc, r7]
   bb8d0:	1714030a 	.word	0x1714030a
   bb8d4:	0a          	.byte	0x0a
   bb8d5:	00          	.byte	0x00
   bb8d6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bb8da:	0728      	lsls	r0, r5, #28
   bb8dc:	d5c0      	bpl.n	bb860 <_strtod_l+0x88>
   bb8de:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bb8e2:	e7bd      	b.n	bb860 <_strtod_l+0x88>
   bb8e4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bb8e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bb8ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bb8ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bb8f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bb8f6:	e7f0      	b.n	bb8da <_strtod_l+0x102>
   bb8f8:	f8df b180 	ldr.w	fp, [pc, #384]	; bba7c <_strtod_l+0x2a4>
   bb8fc:	e7ed      	b.n	bb8da <_strtod_l+0x102>
   bb8fe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bb902:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bb906:	e7e8      	b.n	bb8da <_strtod_l+0x102>
   bb908:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb90a:	1c5a      	adds	r2, r3, #1
   bb90c:	9217      	str	r2, [sp, #92]	; 0x5c
   bb90e:	785b      	ldrb	r3, [r3, #1]
   bb910:	2b30      	cmp	r3, #48	; 0x30
   bb912:	d0f9      	beq.n	bb908 <_strtod_l+0x130>
   bb914:	2b00      	cmp	r3, #0
   bb916:	d0a3      	beq.n	bb860 <_strtod_l+0x88>
   bb918:	2301      	movs	r3, #1
   bb91a:	f04f 0900 	mov.w	r9, #0
   bb91e:	9304      	str	r3, [sp, #16]
   bb920:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb922:	9308      	str	r3, [sp, #32]
   bb924:	f8cd 901c 	str.w	r9, [sp, #28]
   bb928:	464f      	mov	r7, r9
   bb92a:	220a      	movs	r2, #10
   bb92c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bb92e:	7806      	ldrb	r6, [r0, #0]
   bb930:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bb934:	b2d9      	uxtb	r1, r3
   bb936:	2909      	cmp	r1, #9
   bb938:	d92a      	bls.n	bb990 <_strtod_l+0x1b8>
   bb93a:	9905      	ldr	r1, [sp, #20]
   bb93c:	462a      	mov	r2, r5
   bb93e:	f7ff fef9 	bl	bb734 <strncmp>
   bb942:	b398      	cbz	r0, bb9ac <_strtod_l+0x1d4>
   bb944:	2000      	movs	r0, #0
   bb946:	4632      	mov	r2, r6
   bb948:	463d      	mov	r5, r7
   bb94a:	9005      	str	r0, [sp, #20]
   bb94c:	4603      	mov	r3, r0
   bb94e:	2a65      	cmp	r2, #101	; 0x65
   bb950:	d001      	beq.n	bb956 <_strtod_l+0x17e>
   bb952:	2a45      	cmp	r2, #69	; 0x45
   bb954:	d118      	bne.n	bb988 <_strtod_l+0x1b0>
   bb956:	b91d      	cbnz	r5, bb960 <_strtod_l+0x188>
   bb958:	9a04      	ldr	r2, [sp, #16]
   bb95a:	4302      	orrs	r2, r0
   bb95c:	d09e      	beq.n	bb89c <_strtod_l+0xc4>
   bb95e:	2500      	movs	r5, #0
   bb960:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bb964:	f108 0201 	add.w	r2, r8, #1
   bb968:	9217      	str	r2, [sp, #92]	; 0x5c
   bb96a:	f898 2001 	ldrb.w	r2, [r8, #1]
   bb96e:	2a2b      	cmp	r2, #43	; 0x2b
   bb970:	d075      	beq.n	bba5e <_strtod_l+0x286>
   bb972:	2a2d      	cmp	r2, #45	; 0x2d
   bb974:	d07b      	beq.n	bba6e <_strtod_l+0x296>
   bb976:	f04f 0c00 	mov.w	ip, #0
   bb97a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bb97e:	2909      	cmp	r1, #9
   bb980:	f240 8082 	bls.w	bba88 <_strtod_l+0x2b0>
   bb984:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb988:	2600      	movs	r6, #0
   bb98a:	e09d      	b.n	bbac8 <_strtod_l+0x2f0>
   bb98c:	2300      	movs	r3, #0
   bb98e:	e7c4      	b.n	bb91a <_strtod_l+0x142>
   bb990:	2f08      	cmp	r7, #8
   bb992:	bfd8      	it	le
   bb994:	9907      	ldrle	r1, [sp, #28]
   bb996:	f100 0001 	add.w	r0, r0, #1
   bb99a:	bfda      	itte	le
   bb99c:	fb02 3301 	mlale	r3, r2, r1, r3
   bb9a0:	9307      	strle	r3, [sp, #28]
   bb9a2:	fb02 3909 	mlagt	r9, r2, r9, r3
   bb9a6:	3701      	adds	r7, #1
   bb9a8:	9017      	str	r0, [sp, #92]	; 0x5c
   bb9aa:	e7bf      	b.n	bb92c <_strtod_l+0x154>
   bb9ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb9ae:	195a      	adds	r2, r3, r5
   bb9b0:	9217      	str	r2, [sp, #92]	; 0x5c
   bb9b2:	5d5a      	ldrb	r2, [r3, r5]
   bb9b4:	2f00      	cmp	r7, #0
   bb9b6:	d037      	beq.n	bba28 <_strtod_l+0x250>
   bb9b8:	9005      	str	r0, [sp, #20]
   bb9ba:	463d      	mov	r5, r7
   bb9bc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bb9c0:	2b09      	cmp	r3, #9
   bb9c2:	d912      	bls.n	bb9ea <_strtod_l+0x212>
   bb9c4:	2301      	movs	r3, #1
   bb9c6:	e7c2      	b.n	bb94e <_strtod_l+0x176>
   bb9c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb9ca:	1c5a      	adds	r2, r3, #1
   bb9cc:	9217      	str	r2, [sp, #92]	; 0x5c
   bb9ce:	785a      	ldrb	r2, [r3, #1]
   bb9d0:	3001      	adds	r0, #1
   bb9d2:	2a30      	cmp	r2, #48	; 0x30
   bb9d4:	d0f8      	beq.n	bb9c8 <_strtod_l+0x1f0>
   bb9d6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bb9da:	2b08      	cmp	r3, #8
   bb9dc:	f200 84d9 	bhi.w	bc392 <_strtod_l+0xbba>
   bb9e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb9e2:	9005      	str	r0, [sp, #20]
   bb9e4:	2000      	movs	r0, #0
   bb9e6:	9308      	str	r3, [sp, #32]
   bb9e8:	4605      	mov	r5, r0
   bb9ea:	3a30      	subs	r2, #48	; 0x30
   bb9ec:	f100 0301 	add.w	r3, r0, #1
   bb9f0:	d014      	beq.n	bba1c <_strtod_l+0x244>
   bb9f2:	9905      	ldr	r1, [sp, #20]
   bb9f4:	4419      	add	r1, r3
   bb9f6:	9105      	str	r1, [sp, #20]
   bb9f8:	462b      	mov	r3, r5
   bb9fa:	eb00 0e05 	add.w	lr, r0, r5
   bb9fe:	210a      	movs	r1, #10
   bba00:	4573      	cmp	r3, lr
   bba02:	d113      	bne.n	bba2c <_strtod_l+0x254>
   bba04:	182b      	adds	r3, r5, r0
   bba06:	2b08      	cmp	r3, #8
   bba08:	f105 0501 	add.w	r5, r5, #1
   bba0c:	4405      	add	r5, r0
   bba0e:	dc1c      	bgt.n	bba4a <_strtod_l+0x272>
   bba10:	9907      	ldr	r1, [sp, #28]
   bba12:	230a      	movs	r3, #10
   bba14:	fb03 2301 	mla	r3, r3, r1, r2
   bba18:	9307      	str	r3, [sp, #28]
   bba1a:	2300      	movs	r3, #0
   bba1c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bba1e:	1c51      	adds	r1, r2, #1
   bba20:	9117      	str	r1, [sp, #92]	; 0x5c
   bba22:	7852      	ldrb	r2, [r2, #1]
   bba24:	4618      	mov	r0, r3
   bba26:	e7c9      	b.n	bb9bc <_strtod_l+0x1e4>
   bba28:	4638      	mov	r0, r7
   bba2a:	e7d2      	b.n	bb9d2 <_strtod_l+0x1fa>
   bba2c:	2b08      	cmp	r3, #8
   bba2e:	dc04      	bgt.n	bba3a <_strtod_l+0x262>
   bba30:	9e07      	ldr	r6, [sp, #28]
   bba32:	434e      	muls	r6, r1
   bba34:	9607      	str	r6, [sp, #28]
   bba36:	3301      	adds	r3, #1
   bba38:	e7e2      	b.n	bba00 <_strtod_l+0x228>
   bba3a:	f103 0c01 	add.w	ip, r3, #1
   bba3e:	f1bc 0f10 	cmp.w	ip, #16
   bba42:	bfd8      	it	le
   bba44:	fb01 f909 	mulle.w	r9, r1, r9
   bba48:	e7f5      	b.n	bba36 <_strtod_l+0x25e>
   bba4a:	2d10      	cmp	r5, #16
   bba4c:	bfdc      	itt	le
   bba4e:	230a      	movle	r3, #10
   bba50:	fb03 2909 	mlale	r9, r3, r9, r2
   bba54:	e7e1      	b.n	bba1a <_strtod_l+0x242>
   bba56:	2300      	movs	r3, #0
   bba58:	9305      	str	r3, [sp, #20]
   bba5a:	2301      	movs	r3, #1
   bba5c:	e77c      	b.n	bb958 <_strtod_l+0x180>
   bba5e:	f04f 0c00 	mov.w	ip, #0
   bba62:	f108 0202 	add.w	r2, r8, #2
   bba66:	9217      	str	r2, [sp, #92]	; 0x5c
   bba68:	f898 2002 	ldrb.w	r2, [r8, #2]
   bba6c:	e785      	b.n	bb97a <_strtod_l+0x1a2>
   bba6e:	f04f 0c01 	mov.w	ip, #1
   bba72:	e7f6      	b.n	bba62 <_strtod_l+0x28a>
   bba74:	000be324 	.word	0x000be324
   bba78:	000be15c 	.word	0x000be15c
   bba7c:	7ff00000 	.word	0x7ff00000
   bba80:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bba82:	1c51      	adds	r1, r2, #1
   bba84:	9117      	str	r1, [sp, #92]	; 0x5c
   bba86:	7852      	ldrb	r2, [r2, #1]
   bba88:	2a30      	cmp	r2, #48	; 0x30
   bba8a:	d0f9      	beq.n	bba80 <_strtod_l+0x2a8>
   bba8c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bba90:	2908      	cmp	r1, #8
   bba92:	f63f af79 	bhi.w	bb988 <_strtod_l+0x1b0>
   bba96:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bba9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bba9c:	9206      	str	r2, [sp, #24]
   bba9e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bbaa0:	1c51      	adds	r1, r2, #1
   bbaa2:	9117      	str	r1, [sp, #92]	; 0x5c
   bbaa4:	7852      	ldrb	r2, [r2, #1]
   bbaa6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bbaaa:	2e09      	cmp	r6, #9
   bbaac:	d937      	bls.n	bbb1e <_strtod_l+0x346>
   bbaae:	9e06      	ldr	r6, [sp, #24]
   bbab0:	1b89      	subs	r1, r1, r6
   bbab2:	2908      	cmp	r1, #8
   bbab4:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bbab8:	dc02      	bgt.n	bbac0 <_strtod_l+0x2e8>
   bbaba:	4576      	cmp	r6, lr
   bbabc:	bfa8      	it	ge
   bbabe:	4676      	movge	r6, lr
   bbac0:	f1bc 0f00 	cmp.w	ip, #0
   bbac4:	d000      	beq.n	bbac8 <_strtod_l+0x2f0>
   bbac6:	4276      	negs	r6, r6
   bbac8:	2d00      	cmp	r5, #0
   bbaca:	d14d      	bne.n	bbb68 <_strtod_l+0x390>
   bbacc:	9904      	ldr	r1, [sp, #16]
   bbace:	4301      	orrs	r1, r0
   bbad0:	f47f aec6 	bne.w	bb860 <_strtod_l+0x88>
   bbad4:	2b00      	cmp	r3, #0
   bbad6:	f47f aee1 	bne.w	bb89c <_strtod_l+0xc4>
   bbada:	2a69      	cmp	r2, #105	; 0x69
   bbadc:	d027      	beq.n	bbb2e <_strtod_l+0x356>
   bbade:	dc24      	bgt.n	bbb2a <_strtod_l+0x352>
   bbae0:	2a49      	cmp	r2, #73	; 0x49
   bbae2:	d024      	beq.n	bbb2e <_strtod_l+0x356>
   bbae4:	2a4e      	cmp	r2, #78	; 0x4e
   bbae6:	f47f aed9 	bne.w	bb89c <_strtod_l+0xc4>
   bbaea:	499f      	ldr	r1, [pc, #636]	; (bbd68 <_strtod_l+0x590>)
   bbaec:	a817      	add	r0, sp, #92	; 0x5c
   bbaee:	f001 f883 	bl	bcbf8 <__match>
   bbaf2:	2800      	cmp	r0, #0
   bbaf4:	f43f aed2 	beq.w	bb89c <_strtod_l+0xc4>
   bbaf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbafa:	781b      	ldrb	r3, [r3, #0]
   bbafc:	2b28      	cmp	r3, #40	; 0x28
   bbafe:	d12d      	bne.n	bbb5c <_strtod_l+0x384>
   bbb00:	499a      	ldr	r1, [pc, #616]	; (bbd6c <_strtod_l+0x594>)
   bbb02:	aa1a      	add	r2, sp, #104	; 0x68
   bbb04:	a817      	add	r0, sp, #92	; 0x5c
   bbb06:	f001 f88b 	bl	bcc20 <__hexnan>
   bbb0a:	2805      	cmp	r0, #5
   bbb0c:	d126      	bne.n	bbb5c <_strtod_l+0x384>
   bbb0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bbb10:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bbb14:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bbb18:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bbb1c:	e6a0      	b.n	bb860 <_strtod_l+0x88>
   bbb1e:	210a      	movs	r1, #10
   bbb20:	fb01 2e0e 	mla	lr, r1, lr, r2
   bbb24:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bbb28:	e7b9      	b.n	bba9e <_strtod_l+0x2c6>
   bbb2a:	2a6e      	cmp	r2, #110	; 0x6e
   bbb2c:	e7db      	b.n	bbae6 <_strtod_l+0x30e>
   bbb2e:	4990      	ldr	r1, [pc, #576]	; (bbd70 <_strtod_l+0x598>)
   bbb30:	a817      	add	r0, sp, #92	; 0x5c
   bbb32:	f001 f861 	bl	bcbf8 <__match>
   bbb36:	2800      	cmp	r0, #0
   bbb38:	f43f aeb0 	beq.w	bb89c <_strtod_l+0xc4>
   bbb3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbb3e:	498d      	ldr	r1, [pc, #564]	; (bbd74 <_strtod_l+0x59c>)
   bbb40:	3b01      	subs	r3, #1
   bbb42:	a817      	add	r0, sp, #92	; 0x5c
   bbb44:	9317      	str	r3, [sp, #92]	; 0x5c
   bbb46:	f001 f857 	bl	bcbf8 <__match>
   bbb4a:	b910      	cbnz	r0, bbb52 <_strtod_l+0x37a>
   bbb4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbb4e:	3301      	adds	r3, #1
   bbb50:	9317      	str	r3, [sp, #92]	; 0x5c
   bbb52:	f8df b230 	ldr.w	fp, [pc, #560]	; bbd84 <_strtod_l+0x5ac>
   bbb56:	f04f 0a00 	mov.w	sl, #0
   bbb5a:	e681      	b.n	bb860 <_strtod_l+0x88>
   bbb5c:	4886      	ldr	r0, [pc, #536]	; (bbd78 <_strtod_l+0x5a0>)
   bbb5e:	f001 fde3 	bl	bd728 <nan>
   bbb62:	ec5b ab10 	vmov	sl, fp, d0
   bbb66:	e67b      	b.n	bb860 <_strtod_l+0x88>
   bbb68:	9b05      	ldr	r3, [sp, #20]
   bbb6a:	9807      	ldr	r0, [sp, #28]
   bbb6c:	1af3      	subs	r3, r6, r3
   bbb6e:	2f00      	cmp	r7, #0
   bbb70:	bf08      	it	eq
   bbb72:	462f      	moveq	r7, r5
   bbb74:	2d10      	cmp	r5, #16
   bbb76:	9306      	str	r3, [sp, #24]
   bbb78:	46a8      	mov	r8, r5
   bbb7a:	bfa8      	it	ge
   bbb7c:	f04f 0810 	movge.w	r8, #16
   bbb80:	f7ff f98e 	bl	baea0 <__aeabi_ui2d>
   bbb84:	2d09      	cmp	r5, #9
   bbb86:	4682      	mov	sl, r0
   bbb88:	468b      	mov	fp, r1
   bbb8a:	dd13      	ble.n	bbbb4 <_strtod_l+0x3dc>
   bbb8c:	4b7b      	ldr	r3, [pc, #492]	; (bbd7c <_strtod_l+0x5a4>)
   bbb8e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bbb92:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bbb96:	f7ff f9fd 	bl	baf94 <__aeabi_dmul>
   bbb9a:	4682      	mov	sl, r0
   bbb9c:	4648      	mov	r0, r9
   bbb9e:	468b      	mov	fp, r1
   bbba0:	f7ff f97e 	bl	baea0 <__aeabi_ui2d>
   bbba4:	4602      	mov	r2, r0
   bbba6:	460b      	mov	r3, r1
   bbba8:	4650      	mov	r0, sl
   bbbaa:	4659      	mov	r1, fp
   bbbac:	f7ff f83c 	bl	bac28 <__adddf3>
   bbbb0:	4682      	mov	sl, r0
   bbbb2:	468b      	mov	fp, r1
   bbbb4:	2d0f      	cmp	r5, #15
   bbbb6:	dc38      	bgt.n	bbc2a <_strtod_l+0x452>
   bbbb8:	9b06      	ldr	r3, [sp, #24]
   bbbba:	2b00      	cmp	r3, #0
   bbbbc:	f43f ae50 	beq.w	bb860 <_strtod_l+0x88>
   bbbc0:	dd24      	ble.n	bbc0c <_strtod_l+0x434>
   bbbc2:	2b16      	cmp	r3, #22
   bbbc4:	dc0b      	bgt.n	bbbde <_strtod_l+0x406>
   bbbc6:	496d      	ldr	r1, [pc, #436]	; (bbd7c <_strtod_l+0x5a4>)
   bbbc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bbbcc:	e9d1 0100 	ldrd	r0, r1, [r1]
   bbbd0:	4652      	mov	r2, sl
   bbbd2:	465b      	mov	r3, fp
   bbbd4:	f7ff f9de 	bl	baf94 <__aeabi_dmul>
   bbbd8:	4682      	mov	sl, r0
   bbbda:	468b      	mov	fp, r1
   bbbdc:	e640      	b.n	bb860 <_strtod_l+0x88>
   bbbde:	9a06      	ldr	r2, [sp, #24]
   bbbe0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bbbe4:	4293      	cmp	r3, r2
   bbbe6:	db20      	blt.n	bbc2a <_strtod_l+0x452>
   bbbe8:	4c64      	ldr	r4, [pc, #400]	; (bbd7c <_strtod_l+0x5a4>)
   bbbea:	f1c5 050f 	rsb	r5, r5, #15
   bbbee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bbbf2:	4652      	mov	r2, sl
   bbbf4:	465b      	mov	r3, fp
   bbbf6:	e9d1 0100 	ldrd	r0, r1, [r1]
   bbbfa:	f7ff f9cb 	bl	baf94 <__aeabi_dmul>
   bbbfe:	9b06      	ldr	r3, [sp, #24]
   bbc00:	1b5d      	subs	r5, r3, r5
   bbc02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bbc06:	e9d4 2300 	ldrd	r2, r3, [r4]
   bbc0a:	e7e3      	b.n	bbbd4 <_strtod_l+0x3fc>
   bbc0c:	9b06      	ldr	r3, [sp, #24]
   bbc0e:	3316      	adds	r3, #22
   bbc10:	db0b      	blt.n	bbc2a <_strtod_l+0x452>
   bbc12:	9b05      	ldr	r3, [sp, #20]
   bbc14:	1b9e      	subs	r6, r3, r6
   bbc16:	4b59      	ldr	r3, [pc, #356]	; (bbd7c <_strtod_l+0x5a4>)
   bbc18:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bbc1c:	e9d6 2300 	ldrd	r2, r3, [r6]
   bbc20:	4650      	mov	r0, sl
   bbc22:	4659      	mov	r1, fp
   bbc24:	f7ff fae0 	bl	bb1e8 <__aeabi_ddiv>
   bbc28:	e7d6      	b.n	bbbd8 <_strtod_l+0x400>
   bbc2a:	9b06      	ldr	r3, [sp, #24]
   bbc2c:	eba5 0808 	sub.w	r8, r5, r8
   bbc30:	4498      	add	r8, r3
   bbc32:	f1b8 0f00 	cmp.w	r8, #0
   bbc36:	dd74      	ble.n	bbd22 <_strtod_l+0x54a>
   bbc38:	f018 030f 	ands.w	r3, r8, #15
   bbc3c:	d00a      	beq.n	bbc54 <_strtod_l+0x47c>
   bbc3e:	494f      	ldr	r1, [pc, #316]	; (bbd7c <_strtod_l+0x5a4>)
   bbc40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bbc44:	4652      	mov	r2, sl
   bbc46:	465b      	mov	r3, fp
   bbc48:	e9d1 0100 	ldrd	r0, r1, [r1]
   bbc4c:	f7ff f9a2 	bl	baf94 <__aeabi_dmul>
   bbc50:	4682      	mov	sl, r0
   bbc52:	468b      	mov	fp, r1
   bbc54:	f038 080f 	bics.w	r8, r8, #15
   bbc58:	d04f      	beq.n	bbcfa <_strtod_l+0x522>
   bbc5a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bbc5e:	dd22      	ble.n	bbca6 <_strtod_l+0x4ce>
   bbc60:	2500      	movs	r5, #0
   bbc62:	462e      	mov	r6, r5
   bbc64:	9507      	str	r5, [sp, #28]
   bbc66:	9505      	str	r5, [sp, #20]
   bbc68:	2322      	movs	r3, #34	; 0x22
   bbc6a:	f8df b118 	ldr.w	fp, [pc, #280]	; bbd84 <_strtod_l+0x5ac>
   bbc6e:	6023      	str	r3, [r4, #0]
   bbc70:	f04f 0a00 	mov.w	sl, #0
   bbc74:	9b07      	ldr	r3, [sp, #28]
   bbc76:	2b00      	cmp	r3, #0
   bbc78:	f43f adf2 	beq.w	bb860 <_strtod_l+0x88>
   bbc7c:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbc7e:	4620      	mov	r0, r4
   bbc80:	f001 f8c0 	bl	bce04 <_Bfree>
   bbc84:	9905      	ldr	r1, [sp, #20]
   bbc86:	4620      	mov	r0, r4
   bbc88:	f001 f8bc 	bl	bce04 <_Bfree>
   bbc8c:	4631      	mov	r1, r6
   bbc8e:	4620      	mov	r0, r4
   bbc90:	f001 f8b8 	bl	bce04 <_Bfree>
   bbc94:	9907      	ldr	r1, [sp, #28]
   bbc96:	4620      	mov	r0, r4
   bbc98:	f001 f8b4 	bl	bce04 <_Bfree>
   bbc9c:	4629      	mov	r1, r5
   bbc9e:	4620      	mov	r0, r4
   bbca0:	f001 f8b0 	bl	bce04 <_Bfree>
   bbca4:	e5dc      	b.n	bb860 <_strtod_l+0x88>
   bbca6:	4b36      	ldr	r3, [pc, #216]	; (bbd80 <_strtod_l+0x5a8>)
   bbca8:	9304      	str	r3, [sp, #16]
   bbcaa:	2300      	movs	r3, #0
   bbcac:	ea4f 1828 	mov.w	r8, r8, asr #4
   bbcb0:	4650      	mov	r0, sl
   bbcb2:	4659      	mov	r1, fp
   bbcb4:	4699      	mov	r9, r3
   bbcb6:	f1b8 0f01 	cmp.w	r8, #1
   bbcba:	dc21      	bgt.n	bbd00 <_strtod_l+0x528>
   bbcbc:	b10b      	cbz	r3, bbcc2 <_strtod_l+0x4ea>
   bbcbe:	4682      	mov	sl, r0
   bbcc0:	468b      	mov	fp, r1
   bbcc2:	4b2f      	ldr	r3, [pc, #188]	; (bbd80 <_strtod_l+0x5a8>)
   bbcc4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bbcc8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bbccc:	4652      	mov	r2, sl
   bbcce:	465b      	mov	r3, fp
   bbcd0:	e9d9 0100 	ldrd	r0, r1, [r9]
   bbcd4:	f7ff f95e 	bl	baf94 <__aeabi_dmul>
   bbcd8:	4b2a      	ldr	r3, [pc, #168]	; (bbd84 <_strtod_l+0x5ac>)
   bbcda:	460a      	mov	r2, r1
   bbcdc:	400b      	ands	r3, r1
   bbcde:	492a      	ldr	r1, [pc, #168]	; (bbd88 <_strtod_l+0x5b0>)
   bbce0:	428b      	cmp	r3, r1
   bbce2:	4682      	mov	sl, r0
   bbce4:	d8bc      	bhi.n	bbc60 <_strtod_l+0x488>
   bbce6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bbcea:	428b      	cmp	r3, r1
   bbcec:	bf86      	itte	hi
   bbcee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bbd8c <_strtod_l+0x5b4>
   bbcf2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bbcf6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bbcfa:	2300      	movs	r3, #0
   bbcfc:	9304      	str	r3, [sp, #16]
   bbcfe:	e084      	b.n	bbe0a <_strtod_l+0x632>
   bbd00:	f018 0f01 	tst.w	r8, #1
   bbd04:	d005      	beq.n	bbd12 <_strtod_l+0x53a>
   bbd06:	9b04      	ldr	r3, [sp, #16]
   bbd08:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbd0c:	f7ff f942 	bl	baf94 <__aeabi_dmul>
   bbd10:	2301      	movs	r3, #1
   bbd12:	9a04      	ldr	r2, [sp, #16]
   bbd14:	3208      	adds	r2, #8
   bbd16:	f109 0901 	add.w	r9, r9, #1
   bbd1a:	ea4f 0868 	mov.w	r8, r8, asr #1
   bbd1e:	9204      	str	r2, [sp, #16]
   bbd20:	e7c9      	b.n	bbcb6 <_strtod_l+0x4de>
   bbd22:	d0ea      	beq.n	bbcfa <_strtod_l+0x522>
   bbd24:	f1c8 0800 	rsb	r8, r8, #0
   bbd28:	f018 020f 	ands.w	r2, r8, #15
   bbd2c:	d00a      	beq.n	bbd44 <_strtod_l+0x56c>
   bbd2e:	4b13      	ldr	r3, [pc, #76]	; (bbd7c <_strtod_l+0x5a4>)
   bbd30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bbd34:	4650      	mov	r0, sl
   bbd36:	4659      	mov	r1, fp
   bbd38:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbd3c:	f7ff fa54 	bl	bb1e8 <__aeabi_ddiv>
   bbd40:	4682      	mov	sl, r0
   bbd42:	468b      	mov	fp, r1
   bbd44:	ea5f 1828 	movs.w	r8, r8, asr #4
   bbd48:	d0d7      	beq.n	bbcfa <_strtod_l+0x522>
   bbd4a:	f1b8 0f1f 	cmp.w	r8, #31
   bbd4e:	dd1f      	ble.n	bbd90 <_strtod_l+0x5b8>
   bbd50:	2500      	movs	r5, #0
   bbd52:	462e      	mov	r6, r5
   bbd54:	9507      	str	r5, [sp, #28]
   bbd56:	9505      	str	r5, [sp, #20]
   bbd58:	2322      	movs	r3, #34	; 0x22
   bbd5a:	f04f 0a00 	mov.w	sl, #0
   bbd5e:	f04f 0b00 	mov.w	fp, #0
   bbd62:	6023      	str	r3, [r4, #0]
   bbd64:	e786      	b.n	bbc74 <_strtod_l+0x49c>
   bbd66:	bf00      	nop
   bbd68:	000be156 	.word	0x000be156
   bbd6c:	000be170 	.word	0x000be170
   bbd70:	000be14d 	.word	0x000be14d
   bbd74:	000be150 	.word	0x000be150
   bbd78:	000bdbca 	.word	0x000bdbca
   bbd7c:	000be3c0 	.word	0x000be3c0
   bbd80:	000be398 	.word	0x000be398
   bbd84:	7ff00000 	.word	0x7ff00000
   bbd88:	7ca00000 	.word	0x7ca00000
   bbd8c:	7fefffff 	.word	0x7fefffff
   bbd90:	f018 0310 	ands.w	r3, r8, #16
   bbd94:	bf18      	it	ne
   bbd96:	236a      	movne	r3, #106	; 0x6a
   bbd98:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bc148 <_strtod_l+0x970>
   bbd9c:	9304      	str	r3, [sp, #16]
   bbd9e:	4650      	mov	r0, sl
   bbda0:	4659      	mov	r1, fp
   bbda2:	2300      	movs	r3, #0
   bbda4:	f018 0f01 	tst.w	r8, #1
   bbda8:	d004      	beq.n	bbdb4 <_strtod_l+0x5dc>
   bbdaa:	e9d9 2300 	ldrd	r2, r3, [r9]
   bbdae:	f7ff f8f1 	bl	baf94 <__aeabi_dmul>
   bbdb2:	2301      	movs	r3, #1
   bbdb4:	ea5f 0868 	movs.w	r8, r8, asr #1
   bbdb8:	f109 0908 	add.w	r9, r9, #8
   bbdbc:	d1f2      	bne.n	bbda4 <_strtod_l+0x5cc>
   bbdbe:	b10b      	cbz	r3, bbdc4 <_strtod_l+0x5ec>
   bbdc0:	4682      	mov	sl, r0
   bbdc2:	468b      	mov	fp, r1
   bbdc4:	9b04      	ldr	r3, [sp, #16]
   bbdc6:	b1c3      	cbz	r3, bbdfa <_strtod_l+0x622>
   bbdc8:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bbdcc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bbdd0:	2b00      	cmp	r3, #0
   bbdd2:	4659      	mov	r1, fp
   bbdd4:	dd11      	ble.n	bbdfa <_strtod_l+0x622>
   bbdd6:	2b1f      	cmp	r3, #31
   bbdd8:	f340 8124 	ble.w	bc024 <_strtod_l+0x84c>
   bbddc:	2b34      	cmp	r3, #52	; 0x34
   bbdde:	bfde      	ittt	le
   bbde0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bbde4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bbde8:	fa03 f202 	lslle.w	r2, r3, r2
   bbdec:	f04f 0a00 	mov.w	sl, #0
   bbdf0:	bfcc      	ite	gt
   bbdf2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bbdf6:	ea02 0b01 	andle.w	fp, r2, r1
   bbdfa:	2200      	movs	r2, #0
   bbdfc:	2300      	movs	r3, #0
   bbdfe:	4650      	mov	r0, sl
   bbe00:	4659      	mov	r1, fp
   bbe02:	f7ff fb2f 	bl	bb464 <__aeabi_dcmpeq>
   bbe06:	2800      	cmp	r0, #0
   bbe08:	d1a2      	bne.n	bbd50 <_strtod_l+0x578>
   bbe0a:	9b07      	ldr	r3, [sp, #28]
   bbe0c:	9300      	str	r3, [sp, #0]
   bbe0e:	9908      	ldr	r1, [sp, #32]
   bbe10:	462b      	mov	r3, r5
   bbe12:	463a      	mov	r2, r7
   bbe14:	4620      	mov	r0, r4
   bbe16:	f001 f85d 	bl	bced4 <__s2b>
   bbe1a:	9007      	str	r0, [sp, #28]
   bbe1c:	2800      	cmp	r0, #0
   bbe1e:	f43f af1f 	beq.w	bbc60 <_strtod_l+0x488>
   bbe22:	9b05      	ldr	r3, [sp, #20]
   bbe24:	1b9e      	subs	r6, r3, r6
   bbe26:	9b06      	ldr	r3, [sp, #24]
   bbe28:	2b00      	cmp	r3, #0
   bbe2a:	bfb4      	ite	lt
   bbe2c:	4633      	movlt	r3, r6
   bbe2e:	2300      	movge	r3, #0
   bbe30:	930c      	str	r3, [sp, #48]	; 0x30
   bbe32:	9b06      	ldr	r3, [sp, #24]
   bbe34:	2500      	movs	r5, #0
   bbe36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bbe3a:	9312      	str	r3, [sp, #72]	; 0x48
   bbe3c:	462e      	mov	r6, r5
   bbe3e:	9b07      	ldr	r3, [sp, #28]
   bbe40:	4620      	mov	r0, r4
   bbe42:	6859      	ldr	r1, [r3, #4]
   bbe44:	f000 ff9e 	bl	bcd84 <_Balloc>
   bbe48:	9005      	str	r0, [sp, #20]
   bbe4a:	2800      	cmp	r0, #0
   bbe4c:	f43f af0c 	beq.w	bbc68 <_strtod_l+0x490>
   bbe50:	9b07      	ldr	r3, [sp, #28]
   bbe52:	691a      	ldr	r2, [r3, #16]
   bbe54:	3202      	adds	r2, #2
   bbe56:	f103 010c 	add.w	r1, r3, #12
   bbe5a:	0092      	lsls	r2, r2, #2
   bbe5c:	300c      	adds	r0, #12
   bbe5e:	f7ff fbf1 	bl	bb644 <memcpy>
   bbe62:	ec4b ab10 	vmov	d0, sl, fp
   bbe66:	aa1a      	add	r2, sp, #104	; 0x68
   bbe68:	a919      	add	r1, sp, #100	; 0x64
   bbe6a:	4620      	mov	r0, r4
   bbe6c:	f001 fb78 	bl	bd560 <__d2b>
   bbe70:	ec4b ab18 	vmov	d8, sl, fp
   bbe74:	9018      	str	r0, [sp, #96]	; 0x60
   bbe76:	2800      	cmp	r0, #0
   bbe78:	f43f aef6 	beq.w	bbc68 <_strtod_l+0x490>
   bbe7c:	2101      	movs	r1, #1
   bbe7e:	4620      	mov	r0, r4
   bbe80:	f001 f8c2 	bl	bd008 <__i2b>
   bbe84:	4606      	mov	r6, r0
   bbe86:	2800      	cmp	r0, #0
   bbe88:	f43f aeee 	beq.w	bbc68 <_strtod_l+0x490>
   bbe8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bbe8e:	9904      	ldr	r1, [sp, #16]
   bbe90:	2b00      	cmp	r3, #0
   bbe92:	bfab      	itete	ge
   bbe94:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bbe96:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bbe98:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bbe9a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bbe9e:	bfac      	ite	ge
   bbea0:	eb03 0902 	addge.w	r9, r3, r2
   bbea4:	1ad7      	sublt	r7, r2, r3
   bbea6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bbea8:	eba3 0801 	sub.w	r8, r3, r1
   bbeac:	4490      	add	r8, r2
   bbeae:	4ba1      	ldr	r3, [pc, #644]	; (bc134 <_strtod_l+0x95c>)
   bbeb0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bbeb4:	4598      	cmp	r8, r3
   bbeb6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bbeba:	f280 80c7 	bge.w	bc04c <_strtod_l+0x874>
   bbebe:	eba3 0308 	sub.w	r3, r3, r8
   bbec2:	2b1f      	cmp	r3, #31
   bbec4:	eba2 0203 	sub.w	r2, r2, r3
   bbec8:	f04f 0101 	mov.w	r1, #1
   bbecc:	f300 80b1 	bgt.w	bc032 <_strtod_l+0x85a>
   bbed0:	fa01 f303 	lsl.w	r3, r1, r3
   bbed4:	930d      	str	r3, [sp, #52]	; 0x34
   bbed6:	2300      	movs	r3, #0
   bbed8:	9308      	str	r3, [sp, #32]
   bbeda:	eb09 0802 	add.w	r8, r9, r2
   bbede:	9b04      	ldr	r3, [sp, #16]
   bbee0:	45c1      	cmp	r9, r8
   bbee2:	4417      	add	r7, r2
   bbee4:	441f      	add	r7, r3
   bbee6:	464b      	mov	r3, r9
   bbee8:	bfa8      	it	ge
   bbeea:	4643      	movge	r3, r8
   bbeec:	42bb      	cmp	r3, r7
   bbeee:	bfa8      	it	ge
   bbef0:	463b      	movge	r3, r7
   bbef2:	2b00      	cmp	r3, #0
   bbef4:	bfc2      	ittt	gt
   bbef6:	eba8 0803 	subgt.w	r8, r8, r3
   bbefa:	1aff      	subgt	r7, r7, r3
   bbefc:	eba9 0903 	subgt.w	r9, r9, r3
   bbf00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bbf02:	2b00      	cmp	r3, #0
   bbf04:	dd17      	ble.n	bbf36 <_strtod_l+0x75e>
   bbf06:	4631      	mov	r1, r6
   bbf08:	461a      	mov	r2, r3
   bbf0a:	4620      	mov	r0, r4
   bbf0c:	f001 f93c 	bl	bd188 <__pow5mult>
   bbf10:	4606      	mov	r6, r0
   bbf12:	2800      	cmp	r0, #0
   bbf14:	f43f aea8 	beq.w	bbc68 <_strtod_l+0x490>
   bbf18:	4601      	mov	r1, r0
   bbf1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bbf1c:	4620      	mov	r0, r4
   bbf1e:	f001 f889 	bl	bd034 <__multiply>
   bbf22:	900b      	str	r0, [sp, #44]	; 0x2c
   bbf24:	2800      	cmp	r0, #0
   bbf26:	f43f ae9f 	beq.w	bbc68 <_strtod_l+0x490>
   bbf2a:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbf2c:	4620      	mov	r0, r4
   bbf2e:	f000 ff69 	bl	bce04 <_Bfree>
   bbf32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbf34:	9318      	str	r3, [sp, #96]	; 0x60
   bbf36:	f1b8 0f00 	cmp.w	r8, #0
   bbf3a:	f300 808c 	bgt.w	bc056 <_strtod_l+0x87e>
   bbf3e:	9b06      	ldr	r3, [sp, #24]
   bbf40:	2b00      	cmp	r3, #0
   bbf42:	dd08      	ble.n	bbf56 <_strtod_l+0x77e>
   bbf44:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bbf46:	9905      	ldr	r1, [sp, #20]
   bbf48:	4620      	mov	r0, r4
   bbf4a:	f001 f91d 	bl	bd188 <__pow5mult>
   bbf4e:	9005      	str	r0, [sp, #20]
   bbf50:	2800      	cmp	r0, #0
   bbf52:	f43f ae89 	beq.w	bbc68 <_strtod_l+0x490>
   bbf56:	2f00      	cmp	r7, #0
   bbf58:	dd08      	ble.n	bbf6c <_strtod_l+0x794>
   bbf5a:	9905      	ldr	r1, [sp, #20]
   bbf5c:	463a      	mov	r2, r7
   bbf5e:	4620      	mov	r0, r4
   bbf60:	f001 f96c 	bl	bd23c <__lshift>
   bbf64:	9005      	str	r0, [sp, #20]
   bbf66:	2800      	cmp	r0, #0
   bbf68:	f43f ae7e 	beq.w	bbc68 <_strtod_l+0x490>
   bbf6c:	f1b9 0f00 	cmp.w	r9, #0
   bbf70:	dd08      	ble.n	bbf84 <_strtod_l+0x7ac>
   bbf72:	4631      	mov	r1, r6
   bbf74:	464a      	mov	r2, r9
   bbf76:	4620      	mov	r0, r4
   bbf78:	f001 f960 	bl	bd23c <__lshift>
   bbf7c:	4606      	mov	r6, r0
   bbf7e:	2800      	cmp	r0, #0
   bbf80:	f43f ae72 	beq.w	bbc68 <_strtod_l+0x490>
   bbf84:	9a05      	ldr	r2, [sp, #20]
   bbf86:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbf88:	4620      	mov	r0, r4
   bbf8a:	f001 f9e3 	bl	bd354 <__mdiff>
   bbf8e:	4605      	mov	r5, r0
   bbf90:	2800      	cmp	r0, #0
   bbf92:	f43f ae69 	beq.w	bbc68 <_strtod_l+0x490>
   bbf96:	68c3      	ldr	r3, [r0, #12]
   bbf98:	930b      	str	r3, [sp, #44]	; 0x2c
   bbf9a:	2300      	movs	r3, #0
   bbf9c:	60c3      	str	r3, [r0, #12]
   bbf9e:	4631      	mov	r1, r6
   bbfa0:	f001 f9bc 	bl	bd31c <__mcmp>
   bbfa4:	2800      	cmp	r0, #0
   bbfa6:	da60      	bge.n	bc06a <_strtod_l+0x892>
   bbfa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbfaa:	ea53 030a 	orrs.w	r3, r3, sl
   bbfae:	f040 8082 	bne.w	bc0b6 <_strtod_l+0x8de>
   bbfb2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbfb6:	2b00      	cmp	r3, #0
   bbfb8:	d17d      	bne.n	bc0b6 <_strtod_l+0x8de>
   bbfba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bbfbe:	0d1b      	lsrs	r3, r3, #20
   bbfc0:	051b      	lsls	r3, r3, #20
   bbfc2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bbfc6:	d976      	bls.n	bc0b6 <_strtod_l+0x8de>
   bbfc8:	696b      	ldr	r3, [r5, #20]
   bbfca:	b913      	cbnz	r3, bbfd2 <_strtod_l+0x7fa>
   bbfcc:	692b      	ldr	r3, [r5, #16]
   bbfce:	2b01      	cmp	r3, #1
   bbfd0:	dd71      	ble.n	bc0b6 <_strtod_l+0x8de>
   bbfd2:	4629      	mov	r1, r5
   bbfd4:	2201      	movs	r2, #1
   bbfd6:	4620      	mov	r0, r4
   bbfd8:	f001 f930 	bl	bd23c <__lshift>
   bbfdc:	4631      	mov	r1, r6
   bbfde:	4605      	mov	r5, r0
   bbfe0:	f001 f99c 	bl	bd31c <__mcmp>
   bbfe4:	2800      	cmp	r0, #0
   bbfe6:	dd66      	ble.n	bc0b6 <_strtod_l+0x8de>
   bbfe8:	9904      	ldr	r1, [sp, #16]
   bbfea:	4a53      	ldr	r2, [pc, #332]	; (bc138 <_strtod_l+0x960>)
   bbfec:	465b      	mov	r3, fp
   bbfee:	2900      	cmp	r1, #0
   bbff0:	f000 8081 	beq.w	bc0f6 <_strtod_l+0x91e>
   bbff4:	ea02 010b 	and.w	r1, r2, fp
   bbff8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bbffc:	dc7b      	bgt.n	bc0f6 <_strtod_l+0x91e>
   bbffe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bc002:	f77f aea9 	ble.w	bbd58 <_strtod_l+0x580>
   bc006:	4b4d      	ldr	r3, [pc, #308]	; (bc13c <_strtod_l+0x964>)
   bc008:	4650      	mov	r0, sl
   bc00a:	4659      	mov	r1, fp
   bc00c:	2200      	movs	r2, #0
   bc00e:	f7fe ffc1 	bl	baf94 <__aeabi_dmul>
   bc012:	460b      	mov	r3, r1
   bc014:	4303      	orrs	r3, r0
   bc016:	bf08      	it	eq
   bc018:	2322      	moveq	r3, #34	; 0x22
   bc01a:	4682      	mov	sl, r0
   bc01c:	468b      	mov	fp, r1
   bc01e:	bf08      	it	eq
   bc020:	6023      	streq	r3, [r4, #0]
   bc022:	e62b      	b.n	bbc7c <_strtod_l+0x4a4>
   bc024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc028:	fa02 f303 	lsl.w	r3, r2, r3
   bc02c:	ea03 0a0a 	and.w	sl, r3, sl
   bc030:	e6e3      	b.n	bbdfa <_strtod_l+0x622>
   bc032:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bc036:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bc03a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bc03e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bc042:	fa01 f308 	lsl.w	r3, r1, r8
   bc046:	9308      	str	r3, [sp, #32]
   bc048:	910d      	str	r1, [sp, #52]	; 0x34
   bc04a:	e746      	b.n	bbeda <_strtod_l+0x702>
   bc04c:	2300      	movs	r3, #0
   bc04e:	9308      	str	r3, [sp, #32]
   bc050:	2301      	movs	r3, #1
   bc052:	930d      	str	r3, [sp, #52]	; 0x34
   bc054:	e741      	b.n	bbeda <_strtod_l+0x702>
   bc056:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc058:	4642      	mov	r2, r8
   bc05a:	4620      	mov	r0, r4
   bc05c:	f001 f8ee 	bl	bd23c <__lshift>
   bc060:	9018      	str	r0, [sp, #96]	; 0x60
   bc062:	2800      	cmp	r0, #0
   bc064:	f47f af6b 	bne.w	bbf3e <_strtod_l+0x766>
   bc068:	e5fe      	b.n	bbc68 <_strtod_l+0x490>
   bc06a:	465f      	mov	r7, fp
   bc06c:	d16e      	bne.n	bc14c <_strtod_l+0x974>
   bc06e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bc070:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc074:	b342      	cbz	r2, bc0c8 <_strtod_l+0x8f0>
   bc076:	4a32      	ldr	r2, [pc, #200]	; (bc140 <_strtod_l+0x968>)
   bc078:	4293      	cmp	r3, r2
   bc07a:	d128      	bne.n	bc0ce <_strtod_l+0x8f6>
   bc07c:	9b04      	ldr	r3, [sp, #16]
   bc07e:	4651      	mov	r1, sl
   bc080:	b1eb      	cbz	r3, bc0be <_strtod_l+0x8e6>
   bc082:	4b2d      	ldr	r3, [pc, #180]	; (bc138 <_strtod_l+0x960>)
   bc084:	403b      	ands	r3, r7
   bc086:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc08a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc08e:	d819      	bhi.n	bc0c4 <_strtod_l+0x8ec>
   bc090:	0d1b      	lsrs	r3, r3, #20
   bc092:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bc096:	fa02 f303 	lsl.w	r3, r2, r3
   bc09a:	4299      	cmp	r1, r3
   bc09c:	d117      	bne.n	bc0ce <_strtod_l+0x8f6>
   bc09e:	4b29      	ldr	r3, [pc, #164]	; (bc144 <_strtod_l+0x96c>)
   bc0a0:	429f      	cmp	r7, r3
   bc0a2:	d102      	bne.n	bc0aa <_strtod_l+0x8d2>
   bc0a4:	3101      	adds	r1, #1
   bc0a6:	f43f addf 	beq.w	bbc68 <_strtod_l+0x490>
   bc0aa:	4b23      	ldr	r3, [pc, #140]	; (bc138 <_strtod_l+0x960>)
   bc0ac:	403b      	ands	r3, r7
   bc0ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bc0b2:	f04f 0a00 	mov.w	sl, #0
   bc0b6:	9b04      	ldr	r3, [sp, #16]
   bc0b8:	2b00      	cmp	r3, #0
   bc0ba:	d1a4      	bne.n	bc006 <_strtod_l+0x82e>
   bc0bc:	e5de      	b.n	bbc7c <_strtod_l+0x4a4>
   bc0be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bc0c2:	e7ea      	b.n	bc09a <_strtod_l+0x8c2>
   bc0c4:	4613      	mov	r3, r2
   bc0c6:	e7e8      	b.n	bc09a <_strtod_l+0x8c2>
   bc0c8:	ea53 030a 	orrs.w	r3, r3, sl
   bc0cc:	d08c      	beq.n	bbfe8 <_strtod_l+0x810>
   bc0ce:	9b08      	ldr	r3, [sp, #32]
   bc0d0:	b1db      	cbz	r3, bc10a <_strtod_l+0x932>
   bc0d2:	423b      	tst	r3, r7
   bc0d4:	d0ef      	beq.n	bc0b6 <_strtod_l+0x8de>
   bc0d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc0d8:	9a04      	ldr	r2, [sp, #16]
   bc0da:	4650      	mov	r0, sl
   bc0dc:	4659      	mov	r1, fp
   bc0de:	b1c3      	cbz	r3, bc112 <_strtod_l+0x93a>
   bc0e0:	f7ff fb5e 	bl	bb7a0 <sulp>
   bc0e4:	4602      	mov	r2, r0
   bc0e6:	460b      	mov	r3, r1
   bc0e8:	ec51 0b18 	vmov	r0, r1, d8
   bc0ec:	f7fe fd9c 	bl	bac28 <__adddf3>
   bc0f0:	4682      	mov	sl, r0
   bc0f2:	468b      	mov	fp, r1
   bc0f4:	e7df      	b.n	bc0b6 <_strtod_l+0x8de>
   bc0f6:	4013      	ands	r3, r2
   bc0f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bc0fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bc100:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bc104:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc108:	e7d5      	b.n	bc0b6 <_strtod_l+0x8de>
   bc10a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc10c:	ea13 0f0a 	tst.w	r3, sl
   bc110:	e7e0      	b.n	bc0d4 <_strtod_l+0x8fc>
   bc112:	f7ff fb45 	bl	bb7a0 <sulp>
   bc116:	4602      	mov	r2, r0
   bc118:	460b      	mov	r3, r1
   bc11a:	ec51 0b18 	vmov	r0, r1, d8
   bc11e:	f7fe fd81 	bl	bac24 <__aeabi_dsub>
   bc122:	2200      	movs	r2, #0
   bc124:	2300      	movs	r3, #0
   bc126:	4682      	mov	sl, r0
   bc128:	468b      	mov	fp, r1
   bc12a:	f7ff f99b 	bl	bb464 <__aeabi_dcmpeq>
   bc12e:	2800      	cmp	r0, #0
   bc130:	d0c1      	beq.n	bc0b6 <_strtod_l+0x8de>
   bc132:	e611      	b.n	bbd58 <_strtod_l+0x580>
   bc134:	fffffc02 	.word	0xfffffc02
   bc138:	7ff00000 	.word	0x7ff00000
   bc13c:	39500000 	.word	0x39500000
   bc140:	000fffff 	.word	0x000fffff
   bc144:	7fefffff 	.word	0x7fefffff
   bc148:	000be188 	.word	0x000be188
   bc14c:	4631      	mov	r1, r6
   bc14e:	4628      	mov	r0, r5
   bc150:	f001 fa62 	bl	bd618 <__ratio>
   bc154:	ec59 8b10 	vmov	r8, r9, d0
   bc158:	ee10 0a10 	vmov	r0, s0
   bc15c:	2200      	movs	r2, #0
   bc15e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bc162:	4649      	mov	r1, r9
   bc164:	f7ff f992 	bl	bb48c <__aeabi_dcmple>
   bc168:	2800      	cmp	r0, #0
   bc16a:	d07a      	beq.n	bc262 <_strtod_l+0xa8a>
   bc16c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc16e:	2b00      	cmp	r3, #0
   bc170:	d04a      	beq.n	bc208 <_strtod_l+0xa30>
   bc172:	4b95      	ldr	r3, [pc, #596]	; (bc3c8 <_strtod_l+0xbf0>)
   bc174:	2200      	movs	r2, #0
   bc176:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc17a:	f8df 924c 	ldr.w	r9, [pc, #588]	; bc3c8 <_strtod_l+0xbf0>
   bc17e:	f04f 0800 	mov.w	r8, #0
   bc182:	4b92      	ldr	r3, [pc, #584]	; (bc3cc <_strtod_l+0xbf4>)
   bc184:	403b      	ands	r3, r7
   bc186:	930d      	str	r3, [sp, #52]	; 0x34
   bc188:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc18a:	4b91      	ldr	r3, [pc, #580]	; (bc3d0 <_strtod_l+0xbf8>)
   bc18c:	429a      	cmp	r2, r3
   bc18e:	f040 80b0 	bne.w	bc2f2 <_strtod_l+0xb1a>
   bc192:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc196:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bc19a:	ec4b ab10 	vmov	d0, sl, fp
   bc19e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc1a2:	f001 f961 	bl	bd468 <__ulp>
   bc1a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc1aa:	ec53 2b10 	vmov	r2, r3, d0
   bc1ae:	f7fe fef1 	bl	baf94 <__aeabi_dmul>
   bc1b2:	4652      	mov	r2, sl
   bc1b4:	465b      	mov	r3, fp
   bc1b6:	f7fe fd37 	bl	bac28 <__adddf3>
   bc1ba:	460b      	mov	r3, r1
   bc1bc:	4983      	ldr	r1, [pc, #524]	; (bc3cc <_strtod_l+0xbf4>)
   bc1be:	4a85      	ldr	r2, [pc, #532]	; (bc3d4 <_strtod_l+0xbfc>)
   bc1c0:	4019      	ands	r1, r3
   bc1c2:	4291      	cmp	r1, r2
   bc1c4:	4682      	mov	sl, r0
   bc1c6:	d960      	bls.n	bc28a <_strtod_l+0xab2>
   bc1c8:	ee18 3a90 	vmov	r3, s17
   bc1cc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bc1d0:	4293      	cmp	r3, r2
   bc1d2:	d104      	bne.n	bc1de <_strtod_l+0xa06>
   bc1d4:	ee18 3a10 	vmov	r3, s16
   bc1d8:	3301      	adds	r3, #1
   bc1da:	f43f ad45 	beq.w	bbc68 <_strtod_l+0x490>
   bc1de:	f8df b200 	ldr.w	fp, [pc, #512]	; bc3e0 <_strtod_l+0xc08>
   bc1e2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc1e6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc1e8:	4620      	mov	r0, r4
   bc1ea:	f000 fe0b 	bl	bce04 <_Bfree>
   bc1ee:	9905      	ldr	r1, [sp, #20]
   bc1f0:	4620      	mov	r0, r4
   bc1f2:	f000 fe07 	bl	bce04 <_Bfree>
   bc1f6:	4631      	mov	r1, r6
   bc1f8:	4620      	mov	r0, r4
   bc1fa:	f000 fe03 	bl	bce04 <_Bfree>
   bc1fe:	4629      	mov	r1, r5
   bc200:	4620      	mov	r0, r4
   bc202:	f000 fdff 	bl	bce04 <_Bfree>
   bc206:	e61a      	b.n	bbe3e <_strtod_l+0x666>
   bc208:	f1ba 0f00 	cmp.w	sl, #0
   bc20c:	d11b      	bne.n	bc246 <_strtod_l+0xa6e>
   bc20e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc212:	b9f3      	cbnz	r3, bc252 <_strtod_l+0xa7a>
   bc214:	4b6c      	ldr	r3, [pc, #432]	; (bc3c8 <_strtod_l+0xbf0>)
   bc216:	2200      	movs	r2, #0
   bc218:	4640      	mov	r0, r8
   bc21a:	4649      	mov	r1, r9
   bc21c:	f7ff f92c 	bl	bb478 <__aeabi_dcmplt>
   bc220:	b9d0      	cbnz	r0, bc258 <_strtod_l+0xa80>
   bc222:	4640      	mov	r0, r8
   bc224:	4649      	mov	r1, r9
   bc226:	4b6c      	ldr	r3, [pc, #432]	; (bc3d8 <_strtod_l+0xc00>)
   bc228:	2200      	movs	r2, #0
   bc22a:	f7fe feb3 	bl	baf94 <__aeabi_dmul>
   bc22e:	4680      	mov	r8, r0
   bc230:	4689      	mov	r9, r1
   bc232:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bc236:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bc23a:	9315      	str	r3, [sp, #84]	; 0x54
   bc23c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bc240:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc244:	e79d      	b.n	bc182 <_strtod_l+0x9aa>
   bc246:	f1ba 0f01 	cmp.w	sl, #1
   bc24a:	d102      	bne.n	bc252 <_strtod_l+0xa7a>
   bc24c:	2f00      	cmp	r7, #0
   bc24e:	f43f ad83 	beq.w	bbd58 <_strtod_l+0x580>
   bc252:	4b62      	ldr	r3, [pc, #392]	; (bc3dc <_strtod_l+0xc04>)
   bc254:	2200      	movs	r2, #0
   bc256:	e78e      	b.n	bc176 <_strtod_l+0x99e>
   bc258:	f8df 917c 	ldr.w	r9, [pc, #380]	; bc3d8 <_strtod_l+0xc00>
   bc25c:	f04f 0800 	mov.w	r8, #0
   bc260:	e7e7      	b.n	bc232 <_strtod_l+0xa5a>
   bc262:	4b5d      	ldr	r3, [pc, #372]	; (bc3d8 <_strtod_l+0xc00>)
   bc264:	4640      	mov	r0, r8
   bc266:	4649      	mov	r1, r9
   bc268:	2200      	movs	r2, #0
   bc26a:	f7fe fe93 	bl	baf94 <__aeabi_dmul>
   bc26e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc270:	4680      	mov	r8, r0
   bc272:	4689      	mov	r9, r1
   bc274:	b933      	cbnz	r3, bc284 <_strtod_l+0xaac>
   bc276:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc27a:	900e      	str	r0, [sp, #56]	; 0x38
   bc27c:	930f      	str	r3, [sp, #60]	; 0x3c
   bc27e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bc282:	e7dd      	b.n	bc240 <_strtod_l+0xa68>
   bc284:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bc288:	e7f9      	b.n	bc27e <_strtod_l+0xaa6>
   bc28a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bc28e:	9b04      	ldr	r3, [sp, #16]
   bc290:	2b00      	cmp	r3, #0
   bc292:	d1a8      	bne.n	bc1e6 <_strtod_l+0xa0e>
   bc294:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bc298:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc29a:	0d1b      	lsrs	r3, r3, #20
   bc29c:	051b      	lsls	r3, r3, #20
   bc29e:	429a      	cmp	r2, r3
   bc2a0:	d1a1      	bne.n	bc1e6 <_strtod_l+0xa0e>
   bc2a2:	4640      	mov	r0, r8
   bc2a4:	4649      	mov	r1, r9
   bc2a6:	f001 fa5b 	bl	bd760 <__aeabi_d2lz>
   bc2aa:	f7fe fe45 	bl	baf38 <__aeabi_l2d>
   bc2ae:	4602      	mov	r2, r0
   bc2b0:	460b      	mov	r3, r1
   bc2b2:	4640      	mov	r0, r8
   bc2b4:	4649      	mov	r1, r9
   bc2b6:	f7fe fcb5 	bl	bac24 <__aeabi_dsub>
   bc2ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bc2bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc2c0:	ea43 030a 	orr.w	r3, r3, sl
   bc2c4:	4313      	orrs	r3, r2
   bc2c6:	4680      	mov	r8, r0
   bc2c8:	4689      	mov	r9, r1
   bc2ca:	d055      	beq.n	bc378 <_strtod_l+0xba0>
   bc2cc:	a336      	add	r3, pc, #216	; (adr r3, bc3a8 <_strtod_l+0xbd0>)
   bc2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc2d2:	f7ff f8d1 	bl	bb478 <__aeabi_dcmplt>
   bc2d6:	2800      	cmp	r0, #0
   bc2d8:	f47f acd0 	bne.w	bbc7c <_strtod_l+0x4a4>
   bc2dc:	a334      	add	r3, pc, #208	; (adr r3, bc3b0 <_strtod_l+0xbd8>)
   bc2de:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc2e2:	4640      	mov	r0, r8
   bc2e4:	4649      	mov	r1, r9
   bc2e6:	f7ff f8e5 	bl	bb4b4 <__aeabi_dcmpgt>
   bc2ea:	2800      	cmp	r0, #0
   bc2ec:	f43f af7b 	beq.w	bc1e6 <_strtod_l+0xa0e>
   bc2f0:	e4c4      	b.n	bbc7c <_strtod_l+0x4a4>
   bc2f2:	9b04      	ldr	r3, [sp, #16]
   bc2f4:	b333      	cbz	r3, bc344 <_strtod_l+0xb6c>
   bc2f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc2f8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc2fc:	d822      	bhi.n	bc344 <_strtod_l+0xb6c>
   bc2fe:	a32e      	add	r3, pc, #184	; (adr r3, bc3b8 <_strtod_l+0xbe0>)
   bc300:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc304:	4640      	mov	r0, r8
   bc306:	4649      	mov	r1, r9
   bc308:	f7ff f8c0 	bl	bb48c <__aeabi_dcmple>
   bc30c:	b1a0      	cbz	r0, bc338 <_strtod_l+0xb60>
   bc30e:	4649      	mov	r1, r9
   bc310:	4640      	mov	r0, r8
   bc312:	f7ff f8ef 	bl	bb4f4 <__aeabi_d2uiz>
   bc316:	2801      	cmp	r0, #1
   bc318:	bf38      	it	cc
   bc31a:	2001      	movcc	r0, #1
   bc31c:	f7fe fdc0 	bl	baea0 <__aeabi_ui2d>
   bc320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc322:	4680      	mov	r8, r0
   bc324:	4689      	mov	r9, r1
   bc326:	bb23      	cbnz	r3, bc372 <_strtod_l+0xb9a>
   bc328:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc32c:	9010      	str	r0, [sp, #64]	; 0x40
   bc32e:	9311      	str	r3, [sp, #68]	; 0x44
   bc330:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bc334:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc338:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bc33a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc33c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bc340:	1a9b      	subs	r3, r3, r2
   bc342:	9309      	str	r3, [sp, #36]	; 0x24
   bc344:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc348:	eeb0 0a48 	vmov.f32	s0, s16
   bc34c:	eef0 0a68 	vmov.f32	s1, s17
   bc350:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc354:	f001 f888 	bl	bd468 <__ulp>
   bc358:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc35c:	ec53 2b10 	vmov	r2, r3, d0
   bc360:	f7fe fe18 	bl	baf94 <__aeabi_dmul>
   bc364:	ec53 2b18 	vmov	r2, r3, d8
   bc368:	f7fe fc5e 	bl	bac28 <__adddf3>
   bc36c:	4682      	mov	sl, r0
   bc36e:	468b      	mov	fp, r1
   bc370:	e78d      	b.n	bc28e <_strtod_l+0xab6>
   bc372:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bc376:	e7db      	b.n	bc330 <_strtod_l+0xb58>
   bc378:	a311      	add	r3, pc, #68	; (adr r3, bc3c0 <_strtod_l+0xbe8>)
   bc37a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc37e:	f7ff f87b 	bl	bb478 <__aeabi_dcmplt>
   bc382:	e7b2      	b.n	bc2ea <_strtod_l+0xb12>
   bc384:	2300      	movs	r3, #0
   bc386:	930a      	str	r3, [sp, #40]	; 0x28
   bc388:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bc38a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc38c:	6013      	str	r3, [r2, #0]
   bc38e:	f7ff ba6b 	b.w	bb868 <_strtod_l+0x90>
   bc392:	2a65      	cmp	r2, #101	; 0x65
   bc394:	f43f ab5f 	beq.w	bba56 <_strtod_l+0x27e>
   bc398:	2a45      	cmp	r2, #69	; 0x45
   bc39a:	f43f ab5c 	beq.w	bba56 <_strtod_l+0x27e>
   bc39e:	2301      	movs	r3, #1
   bc3a0:	f7ff bb94 	b.w	bbacc <_strtod_l+0x2f4>
   bc3a4:	f3af 8000 	nop.w
   bc3a8:	94a03595 	.word	0x94a03595
   bc3ac:	3fdfffff 	.word	0x3fdfffff
   bc3b0:	35afe535 	.word	0x35afe535
   bc3b4:	3fe00000 	.word	0x3fe00000
   bc3b8:	ffc00000 	.word	0xffc00000
   bc3bc:	41dfffff 	.word	0x41dfffff
   bc3c0:	94a03595 	.word	0x94a03595
   bc3c4:	3fcfffff 	.word	0x3fcfffff
   bc3c8:	3ff00000 	.word	0x3ff00000
   bc3cc:	7ff00000 	.word	0x7ff00000
   bc3d0:	7fe00000 	.word	0x7fe00000
   bc3d4:	7c9fffff 	.word	0x7c9fffff
   bc3d8:	3fe00000 	.word	0x3fe00000
   bc3dc:	bff00000 	.word	0xbff00000
   bc3e0:	7fefffff 	.word	0x7fefffff

000bc3e4 <strtof>:
   bc3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc3e8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; bc498 <strtof+0xb4>
   bc3ec:	4b26      	ldr	r3, [pc, #152]	; (bc488 <strtof+0xa4>)
   bc3ee:	460a      	mov	r2, r1
   bc3f0:	ed2d 8b02 	vpush	{d8}
   bc3f4:	4601      	mov	r1, r0
   bc3f6:	f8d8 0000 	ldr.w	r0, [r8]
   bc3fa:	f7ff f9ed 	bl	bb7d8 <_strtod_l>
   bc3fe:	ec55 4b10 	vmov	r4, r5, d0
   bc402:	ee10 2a10 	vmov	r2, s0
   bc406:	ee10 0a10 	vmov	r0, s0
   bc40a:	462b      	mov	r3, r5
   bc40c:	4629      	mov	r1, r5
   bc40e:	f7ff f85b 	bl	bb4c8 <__aeabi_dcmpun>
   bc412:	b190      	cbz	r0, bc43a <strtof+0x56>
   bc414:	2d00      	cmp	r5, #0
   bc416:	481d      	ldr	r0, [pc, #116]	; (bc48c <strtof+0xa8>)
   bc418:	da09      	bge.n	bc42e <strtof+0x4a>
   bc41a:	f001 f98d 	bl	bd738 <nanf>
   bc41e:	eeb1 8a40 	vneg.f32	s16, s0
   bc422:	eeb0 0a48 	vmov.f32	s0, s16
   bc426:	ecbd 8b02 	vpop	{d8}
   bc42a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc42e:	ecbd 8b02 	vpop	{d8}
   bc432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bc436:	f001 b97f 	b.w	bd738 <nanf>
   bc43a:	4620      	mov	r0, r4
   bc43c:	4629      	mov	r1, r5
   bc43e:	f7ff f879 	bl	bb534 <__aeabi_d2f>
   bc442:	ee08 0a10 	vmov	s16, r0
   bc446:	eddf 7a12 	vldr	s15, [pc, #72]	; bc490 <strtof+0xac>
   bc44a:	eeb0 7ac8 	vabs.f32	s14, s16
   bc44e:	eeb4 7a67 	vcmp.f32	s14, s15
   bc452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bc456:	dde4      	ble.n	bc422 <strtof+0x3e>
   bc458:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   bc45c:	4b0d      	ldr	r3, [pc, #52]	; (bc494 <strtof+0xb0>)
   bc45e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc462:	4620      	mov	r0, r4
   bc464:	4639      	mov	r1, r7
   bc466:	f7ff f82f 	bl	bb4c8 <__aeabi_dcmpun>
   bc46a:	b940      	cbnz	r0, bc47e <strtof+0x9a>
   bc46c:	4b09      	ldr	r3, [pc, #36]	; (bc494 <strtof+0xb0>)
   bc46e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc472:	4620      	mov	r0, r4
   bc474:	4639      	mov	r1, r7
   bc476:	f7ff f809 	bl	bb48c <__aeabi_dcmple>
   bc47a:	2800      	cmp	r0, #0
   bc47c:	d0d1      	beq.n	bc422 <strtof+0x3e>
   bc47e:	f8d8 3000 	ldr.w	r3, [r8]
   bc482:	2222      	movs	r2, #34	; 0x22
   bc484:	601a      	str	r2, [r3, #0]
   bc486:	e7cc      	b.n	bc422 <strtof+0x3e>
   bc488:	20035354 	.word	0x20035354
   bc48c:	000bdbca 	.word	0x000bdbca
   bc490:	7f7fffff 	.word	0x7f7fffff
   bc494:	7fefffff 	.word	0x7fefffff
   bc498:	200352e8 	.word	0x200352e8

000bc49c <_strtol_l.constprop.0>:
   bc49c:	2b01      	cmp	r3, #1
   bc49e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc4a2:	d001      	beq.n	bc4a8 <_strtol_l.constprop.0+0xc>
   bc4a4:	2b24      	cmp	r3, #36	; 0x24
   bc4a6:	d906      	bls.n	bc4b6 <_strtol_l.constprop.0+0x1a>
   bc4a8:	f7fb fe26 	bl	b80f8 <__errno>
   bc4ac:	2316      	movs	r3, #22
   bc4ae:	6003      	str	r3, [r0, #0]
   bc4b0:	2000      	movs	r0, #0
   bc4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc4b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bc59c <_strtol_l.constprop.0+0x100>
   bc4ba:	460d      	mov	r5, r1
   bc4bc:	462e      	mov	r6, r5
   bc4be:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc4c2:	f814 700c 	ldrb.w	r7, [r4, ip]
   bc4c6:	f017 0708 	ands.w	r7, r7, #8
   bc4ca:	d1f7      	bne.n	bc4bc <_strtol_l.constprop.0+0x20>
   bc4cc:	2c2d      	cmp	r4, #45	; 0x2d
   bc4ce:	d132      	bne.n	bc536 <_strtol_l.constprop.0+0x9a>
   bc4d0:	782c      	ldrb	r4, [r5, #0]
   bc4d2:	2701      	movs	r7, #1
   bc4d4:	1cb5      	adds	r5, r6, #2
   bc4d6:	2b00      	cmp	r3, #0
   bc4d8:	d05b      	beq.n	bc592 <_strtol_l.constprop.0+0xf6>
   bc4da:	2b10      	cmp	r3, #16
   bc4dc:	d109      	bne.n	bc4f2 <_strtol_l.constprop.0+0x56>
   bc4de:	2c30      	cmp	r4, #48	; 0x30
   bc4e0:	d107      	bne.n	bc4f2 <_strtol_l.constprop.0+0x56>
   bc4e2:	782c      	ldrb	r4, [r5, #0]
   bc4e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bc4e8:	2c58      	cmp	r4, #88	; 0x58
   bc4ea:	d14d      	bne.n	bc588 <_strtol_l.constprop.0+0xec>
   bc4ec:	786c      	ldrb	r4, [r5, #1]
   bc4ee:	2310      	movs	r3, #16
   bc4f0:	3502      	adds	r5, #2
   bc4f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bc4f6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bc4fa:	f04f 0c00 	mov.w	ip, #0
   bc4fe:	fbb8 f9f3 	udiv	r9, r8, r3
   bc502:	4666      	mov	r6, ip
   bc504:	fb03 8a19 	mls	sl, r3, r9, r8
   bc508:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bc50c:	f1be 0f09 	cmp.w	lr, #9
   bc510:	d816      	bhi.n	bc540 <_strtol_l.constprop.0+0xa4>
   bc512:	4674      	mov	r4, lr
   bc514:	42a3      	cmp	r3, r4
   bc516:	dd24      	ble.n	bc562 <_strtol_l.constprop.0+0xc6>
   bc518:	f1bc 0f00 	cmp.w	ip, #0
   bc51c:	db1e      	blt.n	bc55c <_strtol_l.constprop.0+0xc0>
   bc51e:	45b1      	cmp	r9, r6
   bc520:	d31c      	bcc.n	bc55c <_strtol_l.constprop.0+0xc0>
   bc522:	d101      	bne.n	bc528 <_strtol_l.constprop.0+0x8c>
   bc524:	45a2      	cmp	sl, r4
   bc526:	db19      	blt.n	bc55c <_strtol_l.constprop.0+0xc0>
   bc528:	fb06 4603 	mla	r6, r6, r3, r4
   bc52c:	f04f 0c01 	mov.w	ip, #1
   bc530:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc534:	e7e8      	b.n	bc508 <_strtol_l.constprop.0+0x6c>
   bc536:	2c2b      	cmp	r4, #43	; 0x2b
   bc538:	bf04      	itt	eq
   bc53a:	782c      	ldrbeq	r4, [r5, #0]
   bc53c:	1cb5      	addeq	r5, r6, #2
   bc53e:	e7ca      	b.n	bc4d6 <_strtol_l.constprop.0+0x3a>
   bc540:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bc544:	f1be 0f19 	cmp.w	lr, #25
   bc548:	d801      	bhi.n	bc54e <_strtol_l.constprop.0+0xb2>
   bc54a:	3c37      	subs	r4, #55	; 0x37
   bc54c:	e7e2      	b.n	bc514 <_strtol_l.constprop.0+0x78>
   bc54e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bc552:	f1be 0f19 	cmp.w	lr, #25
   bc556:	d804      	bhi.n	bc562 <_strtol_l.constprop.0+0xc6>
   bc558:	3c57      	subs	r4, #87	; 0x57
   bc55a:	e7db      	b.n	bc514 <_strtol_l.constprop.0+0x78>
   bc55c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bc560:	e7e6      	b.n	bc530 <_strtol_l.constprop.0+0x94>
   bc562:	f1bc 0f00 	cmp.w	ip, #0
   bc566:	da05      	bge.n	bc574 <_strtol_l.constprop.0+0xd8>
   bc568:	2322      	movs	r3, #34	; 0x22
   bc56a:	6003      	str	r3, [r0, #0]
   bc56c:	4646      	mov	r6, r8
   bc56e:	b942      	cbnz	r2, bc582 <_strtol_l.constprop.0+0xe6>
   bc570:	4630      	mov	r0, r6
   bc572:	e79e      	b.n	bc4b2 <_strtol_l.constprop.0+0x16>
   bc574:	b107      	cbz	r7, bc578 <_strtol_l.constprop.0+0xdc>
   bc576:	4276      	negs	r6, r6
   bc578:	2a00      	cmp	r2, #0
   bc57a:	d0f9      	beq.n	bc570 <_strtol_l.constprop.0+0xd4>
   bc57c:	f1bc 0f00 	cmp.w	ip, #0
   bc580:	d000      	beq.n	bc584 <_strtol_l.constprop.0+0xe8>
   bc582:	1e69      	subs	r1, r5, #1
   bc584:	6011      	str	r1, [r2, #0]
   bc586:	e7f3      	b.n	bc570 <_strtol_l.constprop.0+0xd4>
   bc588:	2430      	movs	r4, #48	; 0x30
   bc58a:	2b00      	cmp	r3, #0
   bc58c:	d1b1      	bne.n	bc4f2 <_strtol_l.constprop.0+0x56>
   bc58e:	2308      	movs	r3, #8
   bc590:	e7af      	b.n	bc4f2 <_strtol_l.constprop.0+0x56>
   bc592:	2c30      	cmp	r4, #48	; 0x30
   bc594:	d0a5      	beq.n	bc4e2 <_strtol_l.constprop.0+0x46>
   bc596:	230a      	movs	r3, #10
   bc598:	e7ab      	b.n	bc4f2 <_strtol_l.constprop.0+0x56>
   bc59a:	bf00      	nop
   bc59c:	000be1b1 	.word	0x000be1b1

000bc5a0 <strtol>:
   bc5a0:	4613      	mov	r3, r2
   bc5a2:	460a      	mov	r2, r1
   bc5a4:	4601      	mov	r1, r0
   bc5a6:	4802      	ldr	r0, [pc, #8]	; (bc5b0 <strtol+0x10>)
   bc5a8:	6800      	ldr	r0, [r0, #0]
   bc5aa:	f7ff bf77 	b.w	bc49c <_strtol_l.constprop.0>
   bc5ae:	bf00      	nop
   bc5b0:	200352e8 	.word	0x200352e8

000bc5b4 <__register_exitproc>:
   bc5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc5b8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bc674 <__register_exitproc+0xc0>
   bc5bc:	4606      	mov	r6, r0
   bc5be:	f8d8 0000 	ldr.w	r0, [r8]
   bc5c2:	461f      	mov	r7, r3
   bc5c4:	460d      	mov	r5, r1
   bc5c6:	4691      	mov	r9, r2
   bc5c8:	f000 fbc6 	bl	bcd58 <__retarget_lock_acquire_recursive>
   bc5cc:	4b25      	ldr	r3, [pc, #148]	; (bc664 <__register_exitproc+0xb0>)
   bc5ce:	681c      	ldr	r4, [r3, #0]
   bc5d0:	b934      	cbnz	r4, bc5e0 <__register_exitproc+0x2c>
   bc5d2:	4c25      	ldr	r4, [pc, #148]	; (bc668 <__register_exitproc+0xb4>)
   bc5d4:	601c      	str	r4, [r3, #0]
   bc5d6:	4b25      	ldr	r3, [pc, #148]	; (bc66c <__register_exitproc+0xb8>)
   bc5d8:	b113      	cbz	r3, bc5e0 <__register_exitproc+0x2c>
   bc5da:	681b      	ldr	r3, [r3, #0]
   bc5dc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bc5e0:	6863      	ldr	r3, [r4, #4]
   bc5e2:	2b1f      	cmp	r3, #31
   bc5e4:	dd07      	ble.n	bc5f6 <__register_exitproc+0x42>
   bc5e6:	f8d8 0000 	ldr.w	r0, [r8]
   bc5ea:	f000 fbb7 	bl	bcd5c <__retarget_lock_release_recursive>
   bc5ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc5f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc5f6:	b34e      	cbz	r6, bc64c <__register_exitproc+0x98>
   bc5f8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bc5fc:	b988      	cbnz	r0, bc622 <__register_exitproc+0x6e>
   bc5fe:	4b1c      	ldr	r3, [pc, #112]	; (bc670 <__register_exitproc+0xbc>)
   bc600:	b923      	cbnz	r3, bc60c <__register_exitproc+0x58>
   bc602:	f8d8 0000 	ldr.w	r0, [r8]
   bc606:	f000 fba8 	bl	bcd5a <__retarget_lock_release>
   bc60a:	e7f0      	b.n	bc5ee <__register_exitproc+0x3a>
   bc60c:	f44f 7084 	mov.w	r0, #264	; 0x108
   bc610:	f7fb fd3a 	bl	b8088 <malloc>
   bc614:	2800      	cmp	r0, #0
   bc616:	d0f4      	beq.n	bc602 <__register_exitproc+0x4e>
   bc618:	2300      	movs	r3, #0
   bc61a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bc61e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bc622:	6863      	ldr	r3, [r4, #4]
   bc624:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bc628:	2201      	movs	r2, #1
   bc62a:	409a      	lsls	r2, r3
   bc62c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bc630:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bc634:	4313      	orrs	r3, r2
   bc636:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bc63a:	2e02      	cmp	r6, #2
   bc63c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bc640:	bf02      	ittt	eq
   bc642:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bc646:	4313      	orreq	r3, r2
   bc648:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bc64c:	6863      	ldr	r3, [r4, #4]
   bc64e:	f8d8 0000 	ldr.w	r0, [r8]
   bc652:	1c5a      	adds	r2, r3, #1
   bc654:	3302      	adds	r3, #2
   bc656:	6062      	str	r2, [r4, #4]
   bc658:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bc65c:	f000 fb7e 	bl	bcd5c <__retarget_lock_release_recursive>
   bc660:	2000      	movs	r0, #0
   bc662:	e7c6      	b.n	bc5f2 <__register_exitproc+0x3e>
   bc664:	2003e7e8 	.word	0x2003e7e8
   bc668:	2003e75c 	.word	0x2003e75c
   bc66c:	00000000 	.word	0x00000000
   bc670:	000b8089 	.word	0x000b8089
   bc674:	2003534c 	.word	0x2003534c

000bc678 <rshift>:
   bc678:	6903      	ldr	r3, [r0, #16]
   bc67a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bc67e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc682:	ea4f 1261 	mov.w	r2, r1, asr #5
   bc686:	f100 0414 	add.w	r4, r0, #20
   bc68a:	dd45      	ble.n	bc718 <rshift+0xa0>
   bc68c:	f011 011f 	ands.w	r1, r1, #31
   bc690:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bc694:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bc698:	d10c      	bne.n	bc6b4 <rshift+0x3c>
   bc69a:	f100 0710 	add.w	r7, r0, #16
   bc69e:	4629      	mov	r1, r5
   bc6a0:	42b1      	cmp	r1, r6
   bc6a2:	d334      	bcc.n	bc70e <rshift+0x96>
   bc6a4:	1a9b      	subs	r3, r3, r2
   bc6a6:	009b      	lsls	r3, r3, #2
   bc6a8:	1eea      	subs	r2, r5, #3
   bc6aa:	4296      	cmp	r6, r2
   bc6ac:	bf38      	it	cc
   bc6ae:	2300      	movcc	r3, #0
   bc6b0:	4423      	add	r3, r4
   bc6b2:	e015      	b.n	bc6e0 <rshift+0x68>
   bc6b4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bc6b8:	f1c1 0820 	rsb	r8, r1, #32
   bc6bc:	40cf      	lsrs	r7, r1
   bc6be:	f105 0e04 	add.w	lr, r5, #4
   bc6c2:	46a1      	mov	r9, r4
   bc6c4:	4576      	cmp	r6, lr
   bc6c6:	46f4      	mov	ip, lr
   bc6c8:	d815      	bhi.n	bc6f6 <rshift+0x7e>
   bc6ca:	1a9a      	subs	r2, r3, r2
   bc6cc:	0092      	lsls	r2, r2, #2
   bc6ce:	3a04      	subs	r2, #4
   bc6d0:	3501      	adds	r5, #1
   bc6d2:	42ae      	cmp	r6, r5
   bc6d4:	bf38      	it	cc
   bc6d6:	2200      	movcc	r2, #0
   bc6d8:	18a3      	adds	r3, r4, r2
   bc6da:	50a7      	str	r7, [r4, r2]
   bc6dc:	b107      	cbz	r7, bc6e0 <rshift+0x68>
   bc6de:	3304      	adds	r3, #4
   bc6e0:	1b1a      	subs	r2, r3, r4
   bc6e2:	42a3      	cmp	r3, r4
   bc6e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bc6e8:	bf08      	it	eq
   bc6ea:	2300      	moveq	r3, #0
   bc6ec:	6102      	str	r2, [r0, #16]
   bc6ee:	bf08      	it	eq
   bc6f0:	6143      	streq	r3, [r0, #20]
   bc6f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc6f6:	f8dc c000 	ldr.w	ip, [ip]
   bc6fa:	fa0c fc08 	lsl.w	ip, ip, r8
   bc6fe:	ea4c 0707 	orr.w	r7, ip, r7
   bc702:	f849 7b04 	str.w	r7, [r9], #4
   bc706:	f85e 7b04 	ldr.w	r7, [lr], #4
   bc70a:	40cf      	lsrs	r7, r1
   bc70c:	e7da      	b.n	bc6c4 <rshift+0x4c>
   bc70e:	f851 cb04 	ldr.w	ip, [r1], #4
   bc712:	f847 cf04 	str.w	ip, [r7, #4]!
   bc716:	e7c3      	b.n	bc6a0 <rshift+0x28>
   bc718:	4623      	mov	r3, r4
   bc71a:	e7e1      	b.n	bc6e0 <rshift+0x68>

000bc71c <__hexdig_fun>:
   bc71c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bc720:	2b09      	cmp	r3, #9
   bc722:	d802      	bhi.n	bc72a <__hexdig_fun+0xe>
   bc724:	3820      	subs	r0, #32
   bc726:	b2c0      	uxtb	r0, r0
   bc728:	4770      	bx	lr
   bc72a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bc72e:	2b05      	cmp	r3, #5
   bc730:	d801      	bhi.n	bc736 <__hexdig_fun+0x1a>
   bc732:	3847      	subs	r0, #71	; 0x47
   bc734:	e7f7      	b.n	bc726 <__hexdig_fun+0xa>
   bc736:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bc73a:	2b05      	cmp	r3, #5
   bc73c:	d801      	bhi.n	bc742 <__hexdig_fun+0x26>
   bc73e:	3827      	subs	r0, #39	; 0x27
   bc740:	e7f1      	b.n	bc726 <__hexdig_fun+0xa>
   bc742:	2000      	movs	r0, #0
   bc744:	4770      	bx	lr
	...

000bc748 <__gethex>:
   bc748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc74c:	ed2d 8b02 	vpush	{d8}
   bc750:	b089      	sub	sp, #36	; 0x24
   bc752:	ee08 0a10 	vmov	s16, r0
   bc756:	9304      	str	r3, [sp, #16]
   bc758:	4bb4      	ldr	r3, [pc, #720]	; (bca2c <__gethex+0x2e4>)
   bc75a:	681b      	ldr	r3, [r3, #0]
   bc75c:	9301      	str	r3, [sp, #4]
   bc75e:	4618      	mov	r0, r3
   bc760:	468b      	mov	fp, r1
   bc762:	4690      	mov	r8, r2
   bc764:	f7fe ffde 	bl	bb724 <strlen>
   bc768:	9b01      	ldr	r3, [sp, #4]
   bc76a:	f8db 2000 	ldr.w	r2, [fp]
   bc76e:	4403      	add	r3, r0
   bc770:	4682      	mov	sl, r0
   bc772:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bc776:	9305      	str	r3, [sp, #20]
   bc778:	1c93      	adds	r3, r2, #2
   bc77a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bc77e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bc782:	32fe      	adds	r2, #254	; 0xfe
   bc784:	18d1      	adds	r1, r2, r3
   bc786:	461f      	mov	r7, r3
   bc788:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc78c:	9100      	str	r1, [sp, #0]
   bc78e:	2830      	cmp	r0, #48	; 0x30
   bc790:	d0f8      	beq.n	bc784 <__gethex+0x3c>
   bc792:	f7ff ffc3 	bl	bc71c <__hexdig_fun>
   bc796:	4604      	mov	r4, r0
   bc798:	2800      	cmp	r0, #0
   bc79a:	d13a      	bne.n	bc812 <__gethex+0xca>
   bc79c:	9901      	ldr	r1, [sp, #4]
   bc79e:	4652      	mov	r2, sl
   bc7a0:	4638      	mov	r0, r7
   bc7a2:	f7fe ffc7 	bl	bb734 <strncmp>
   bc7a6:	4605      	mov	r5, r0
   bc7a8:	2800      	cmp	r0, #0
   bc7aa:	d168      	bne.n	bc87e <__gethex+0x136>
   bc7ac:	f817 000a 	ldrb.w	r0, [r7, sl]
   bc7b0:	eb07 060a 	add.w	r6, r7, sl
   bc7b4:	f7ff ffb2 	bl	bc71c <__hexdig_fun>
   bc7b8:	2800      	cmp	r0, #0
   bc7ba:	d062      	beq.n	bc882 <__gethex+0x13a>
   bc7bc:	4633      	mov	r3, r6
   bc7be:	7818      	ldrb	r0, [r3, #0]
   bc7c0:	2830      	cmp	r0, #48	; 0x30
   bc7c2:	461f      	mov	r7, r3
   bc7c4:	f103 0301 	add.w	r3, r3, #1
   bc7c8:	d0f9      	beq.n	bc7be <__gethex+0x76>
   bc7ca:	f7ff ffa7 	bl	bc71c <__hexdig_fun>
   bc7ce:	2301      	movs	r3, #1
   bc7d0:	fab0 f480 	clz	r4, r0
   bc7d4:	0964      	lsrs	r4, r4, #5
   bc7d6:	4635      	mov	r5, r6
   bc7d8:	9300      	str	r3, [sp, #0]
   bc7da:	463a      	mov	r2, r7
   bc7dc:	4616      	mov	r6, r2
   bc7de:	3201      	adds	r2, #1
   bc7e0:	7830      	ldrb	r0, [r6, #0]
   bc7e2:	f7ff ff9b 	bl	bc71c <__hexdig_fun>
   bc7e6:	2800      	cmp	r0, #0
   bc7e8:	d1f8      	bne.n	bc7dc <__gethex+0x94>
   bc7ea:	9901      	ldr	r1, [sp, #4]
   bc7ec:	4652      	mov	r2, sl
   bc7ee:	4630      	mov	r0, r6
   bc7f0:	f7fe ffa0 	bl	bb734 <strncmp>
   bc7f4:	b980      	cbnz	r0, bc818 <__gethex+0xd0>
   bc7f6:	b94d      	cbnz	r5, bc80c <__gethex+0xc4>
   bc7f8:	eb06 050a 	add.w	r5, r6, sl
   bc7fc:	462a      	mov	r2, r5
   bc7fe:	4616      	mov	r6, r2
   bc800:	3201      	adds	r2, #1
   bc802:	7830      	ldrb	r0, [r6, #0]
   bc804:	f7ff ff8a 	bl	bc71c <__hexdig_fun>
   bc808:	2800      	cmp	r0, #0
   bc80a:	d1f8      	bne.n	bc7fe <__gethex+0xb6>
   bc80c:	1bad      	subs	r5, r5, r6
   bc80e:	00ad      	lsls	r5, r5, #2
   bc810:	e004      	b.n	bc81c <__gethex+0xd4>
   bc812:	2400      	movs	r4, #0
   bc814:	4625      	mov	r5, r4
   bc816:	e7e0      	b.n	bc7da <__gethex+0x92>
   bc818:	2d00      	cmp	r5, #0
   bc81a:	d1f7      	bne.n	bc80c <__gethex+0xc4>
   bc81c:	7833      	ldrb	r3, [r6, #0]
   bc81e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc822:	2b50      	cmp	r3, #80	; 0x50
   bc824:	d13b      	bne.n	bc89e <__gethex+0x156>
   bc826:	7873      	ldrb	r3, [r6, #1]
   bc828:	2b2b      	cmp	r3, #43	; 0x2b
   bc82a:	d02c      	beq.n	bc886 <__gethex+0x13e>
   bc82c:	2b2d      	cmp	r3, #45	; 0x2d
   bc82e:	d02e      	beq.n	bc88e <__gethex+0x146>
   bc830:	1c71      	adds	r1, r6, #1
   bc832:	f04f 0900 	mov.w	r9, #0
   bc836:	7808      	ldrb	r0, [r1, #0]
   bc838:	f7ff ff70 	bl	bc71c <__hexdig_fun>
   bc83c:	1e43      	subs	r3, r0, #1
   bc83e:	b2db      	uxtb	r3, r3
   bc840:	2b18      	cmp	r3, #24
   bc842:	d82c      	bhi.n	bc89e <__gethex+0x156>
   bc844:	f1a0 0210 	sub.w	r2, r0, #16
   bc848:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bc84c:	f7ff ff66 	bl	bc71c <__hexdig_fun>
   bc850:	1e43      	subs	r3, r0, #1
   bc852:	b2db      	uxtb	r3, r3
   bc854:	2b18      	cmp	r3, #24
   bc856:	d91d      	bls.n	bc894 <__gethex+0x14c>
   bc858:	f1b9 0f00 	cmp.w	r9, #0
   bc85c:	d000      	beq.n	bc860 <__gethex+0x118>
   bc85e:	4252      	negs	r2, r2
   bc860:	4415      	add	r5, r2
   bc862:	f8cb 1000 	str.w	r1, [fp]
   bc866:	b1e4      	cbz	r4, bc8a2 <__gethex+0x15a>
   bc868:	9b00      	ldr	r3, [sp, #0]
   bc86a:	2b00      	cmp	r3, #0
   bc86c:	bf14      	ite	ne
   bc86e:	2700      	movne	r7, #0
   bc870:	2706      	moveq	r7, #6
   bc872:	4638      	mov	r0, r7
   bc874:	b009      	add	sp, #36	; 0x24
   bc876:	ecbd 8b02 	vpop	{d8}
   bc87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc87e:	463e      	mov	r6, r7
   bc880:	4625      	mov	r5, r4
   bc882:	2401      	movs	r4, #1
   bc884:	e7ca      	b.n	bc81c <__gethex+0xd4>
   bc886:	f04f 0900 	mov.w	r9, #0
   bc88a:	1cb1      	adds	r1, r6, #2
   bc88c:	e7d3      	b.n	bc836 <__gethex+0xee>
   bc88e:	f04f 0901 	mov.w	r9, #1
   bc892:	e7fa      	b.n	bc88a <__gethex+0x142>
   bc894:	230a      	movs	r3, #10
   bc896:	fb03 0202 	mla	r2, r3, r2, r0
   bc89a:	3a10      	subs	r2, #16
   bc89c:	e7d4      	b.n	bc848 <__gethex+0x100>
   bc89e:	4631      	mov	r1, r6
   bc8a0:	e7df      	b.n	bc862 <__gethex+0x11a>
   bc8a2:	1bf3      	subs	r3, r6, r7
   bc8a4:	3b01      	subs	r3, #1
   bc8a6:	4621      	mov	r1, r4
   bc8a8:	2b07      	cmp	r3, #7
   bc8aa:	dc0b      	bgt.n	bc8c4 <__gethex+0x17c>
   bc8ac:	ee18 0a10 	vmov	r0, s16
   bc8b0:	f000 fa68 	bl	bcd84 <_Balloc>
   bc8b4:	4604      	mov	r4, r0
   bc8b6:	b940      	cbnz	r0, bc8ca <__gethex+0x182>
   bc8b8:	4b5d      	ldr	r3, [pc, #372]	; (bca30 <__gethex+0x2e8>)
   bc8ba:	4602      	mov	r2, r0
   bc8bc:	21de      	movs	r1, #222	; 0xde
   bc8be:	485d      	ldr	r0, [pc, #372]	; (bca34 <__gethex+0x2ec>)
   bc8c0:	f7fb fc22 	bl	b8108 <__assert_func>
   bc8c4:	3101      	adds	r1, #1
   bc8c6:	105b      	asrs	r3, r3, #1
   bc8c8:	e7ee      	b.n	bc8a8 <__gethex+0x160>
   bc8ca:	f100 0914 	add.w	r9, r0, #20
   bc8ce:	f04f 0b00 	mov.w	fp, #0
   bc8d2:	f1ca 0301 	rsb	r3, sl, #1
   bc8d6:	f8cd 9008 	str.w	r9, [sp, #8]
   bc8da:	f8cd b000 	str.w	fp, [sp]
   bc8de:	9306      	str	r3, [sp, #24]
   bc8e0:	42b7      	cmp	r7, r6
   bc8e2:	d340      	bcc.n	bc966 <__gethex+0x21e>
   bc8e4:	9802      	ldr	r0, [sp, #8]
   bc8e6:	9b00      	ldr	r3, [sp, #0]
   bc8e8:	f840 3b04 	str.w	r3, [r0], #4
   bc8ec:	eba0 0009 	sub.w	r0, r0, r9
   bc8f0:	1080      	asrs	r0, r0, #2
   bc8f2:	0146      	lsls	r6, r0, #5
   bc8f4:	6120      	str	r0, [r4, #16]
   bc8f6:	4618      	mov	r0, r3
   bc8f8:	f000 fb36 	bl	bcf68 <__hi0bits>
   bc8fc:	1a30      	subs	r0, r6, r0
   bc8fe:	f8d8 6000 	ldr.w	r6, [r8]
   bc902:	42b0      	cmp	r0, r6
   bc904:	dd63      	ble.n	bc9ce <__gethex+0x286>
   bc906:	1b87      	subs	r7, r0, r6
   bc908:	4639      	mov	r1, r7
   bc90a:	4620      	mov	r0, r4
   bc90c:	f000 feda 	bl	bd6c4 <__any_on>
   bc910:	4682      	mov	sl, r0
   bc912:	b1a8      	cbz	r0, bc940 <__gethex+0x1f8>
   bc914:	1e7b      	subs	r3, r7, #1
   bc916:	1159      	asrs	r1, r3, #5
   bc918:	f003 021f 	and.w	r2, r3, #31
   bc91c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bc920:	f04f 0a01 	mov.w	sl, #1
   bc924:	fa0a f202 	lsl.w	r2, sl, r2
   bc928:	420a      	tst	r2, r1
   bc92a:	d009      	beq.n	bc940 <__gethex+0x1f8>
   bc92c:	4553      	cmp	r3, sl
   bc92e:	dd05      	ble.n	bc93c <__gethex+0x1f4>
   bc930:	1eb9      	subs	r1, r7, #2
   bc932:	4620      	mov	r0, r4
   bc934:	f000 fec6 	bl	bd6c4 <__any_on>
   bc938:	2800      	cmp	r0, #0
   bc93a:	d145      	bne.n	bc9c8 <__gethex+0x280>
   bc93c:	f04f 0a02 	mov.w	sl, #2
   bc940:	4639      	mov	r1, r7
   bc942:	4620      	mov	r0, r4
   bc944:	f7ff fe98 	bl	bc678 <rshift>
   bc948:	443d      	add	r5, r7
   bc94a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc94e:	42ab      	cmp	r3, r5
   bc950:	da4c      	bge.n	bc9ec <__gethex+0x2a4>
   bc952:	ee18 0a10 	vmov	r0, s16
   bc956:	4621      	mov	r1, r4
   bc958:	f000 fa54 	bl	bce04 <_Bfree>
   bc95c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc95e:	2300      	movs	r3, #0
   bc960:	6013      	str	r3, [r2, #0]
   bc962:	27a3      	movs	r7, #163	; 0xa3
   bc964:	e785      	b.n	bc872 <__gethex+0x12a>
   bc966:	1e73      	subs	r3, r6, #1
   bc968:	9a05      	ldr	r2, [sp, #20]
   bc96a:	9303      	str	r3, [sp, #12]
   bc96c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bc970:	4293      	cmp	r3, r2
   bc972:	d019      	beq.n	bc9a8 <__gethex+0x260>
   bc974:	f1bb 0f20 	cmp.w	fp, #32
   bc978:	d107      	bne.n	bc98a <__gethex+0x242>
   bc97a:	9b02      	ldr	r3, [sp, #8]
   bc97c:	9a00      	ldr	r2, [sp, #0]
   bc97e:	f843 2b04 	str.w	r2, [r3], #4
   bc982:	9302      	str	r3, [sp, #8]
   bc984:	2300      	movs	r3, #0
   bc986:	9300      	str	r3, [sp, #0]
   bc988:	469b      	mov	fp, r3
   bc98a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bc98e:	f7ff fec5 	bl	bc71c <__hexdig_fun>
   bc992:	9b00      	ldr	r3, [sp, #0]
   bc994:	f000 000f 	and.w	r0, r0, #15
   bc998:	fa00 f00b 	lsl.w	r0, r0, fp
   bc99c:	4303      	orrs	r3, r0
   bc99e:	9300      	str	r3, [sp, #0]
   bc9a0:	f10b 0b04 	add.w	fp, fp, #4
   bc9a4:	9b03      	ldr	r3, [sp, #12]
   bc9a6:	e00d      	b.n	bc9c4 <__gethex+0x27c>
   bc9a8:	9b03      	ldr	r3, [sp, #12]
   bc9aa:	9a06      	ldr	r2, [sp, #24]
   bc9ac:	4413      	add	r3, r2
   bc9ae:	42bb      	cmp	r3, r7
   bc9b0:	d3e0      	bcc.n	bc974 <__gethex+0x22c>
   bc9b2:	4618      	mov	r0, r3
   bc9b4:	9901      	ldr	r1, [sp, #4]
   bc9b6:	9307      	str	r3, [sp, #28]
   bc9b8:	4652      	mov	r2, sl
   bc9ba:	f7fe febb 	bl	bb734 <strncmp>
   bc9be:	9b07      	ldr	r3, [sp, #28]
   bc9c0:	2800      	cmp	r0, #0
   bc9c2:	d1d7      	bne.n	bc974 <__gethex+0x22c>
   bc9c4:	461e      	mov	r6, r3
   bc9c6:	e78b      	b.n	bc8e0 <__gethex+0x198>
   bc9c8:	f04f 0a03 	mov.w	sl, #3
   bc9cc:	e7b8      	b.n	bc940 <__gethex+0x1f8>
   bc9ce:	da0a      	bge.n	bc9e6 <__gethex+0x29e>
   bc9d0:	1a37      	subs	r7, r6, r0
   bc9d2:	4621      	mov	r1, r4
   bc9d4:	ee18 0a10 	vmov	r0, s16
   bc9d8:	463a      	mov	r2, r7
   bc9da:	f000 fc2f 	bl	bd23c <__lshift>
   bc9de:	1bed      	subs	r5, r5, r7
   bc9e0:	4604      	mov	r4, r0
   bc9e2:	f100 0914 	add.w	r9, r0, #20
   bc9e6:	f04f 0a00 	mov.w	sl, #0
   bc9ea:	e7ae      	b.n	bc94a <__gethex+0x202>
   bc9ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bc9f0:	42a8      	cmp	r0, r5
   bc9f2:	dd72      	ble.n	bcada <__gethex+0x392>
   bc9f4:	1b45      	subs	r5, r0, r5
   bc9f6:	42ae      	cmp	r6, r5
   bc9f8:	dc36      	bgt.n	bca68 <__gethex+0x320>
   bc9fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc9fe:	2b02      	cmp	r3, #2
   bca00:	d02a      	beq.n	bca58 <__gethex+0x310>
   bca02:	2b03      	cmp	r3, #3
   bca04:	d02c      	beq.n	bca60 <__gethex+0x318>
   bca06:	2b01      	cmp	r3, #1
   bca08:	d11c      	bne.n	bca44 <__gethex+0x2fc>
   bca0a:	42ae      	cmp	r6, r5
   bca0c:	d11a      	bne.n	bca44 <__gethex+0x2fc>
   bca0e:	2e01      	cmp	r6, #1
   bca10:	d112      	bne.n	bca38 <__gethex+0x2f0>
   bca12:	9a04      	ldr	r2, [sp, #16]
   bca14:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bca18:	6013      	str	r3, [r2, #0]
   bca1a:	2301      	movs	r3, #1
   bca1c:	6123      	str	r3, [r4, #16]
   bca1e:	f8c9 3000 	str.w	r3, [r9]
   bca22:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bca24:	2762      	movs	r7, #98	; 0x62
   bca26:	601c      	str	r4, [r3, #0]
   bca28:	e723      	b.n	bc872 <__gethex+0x12a>
   bca2a:	bf00      	nop
   bca2c:	000be324 	.word	0x000be324
   bca30:	000be2b1 	.word	0x000be2b1
   bca34:	000be2c2 	.word	0x000be2c2
   bca38:	1e71      	subs	r1, r6, #1
   bca3a:	4620      	mov	r0, r4
   bca3c:	f000 fe42 	bl	bd6c4 <__any_on>
   bca40:	2800      	cmp	r0, #0
   bca42:	d1e6      	bne.n	bca12 <__gethex+0x2ca>
   bca44:	ee18 0a10 	vmov	r0, s16
   bca48:	4621      	mov	r1, r4
   bca4a:	f000 f9db 	bl	bce04 <_Bfree>
   bca4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bca50:	2300      	movs	r3, #0
   bca52:	6013      	str	r3, [r2, #0]
   bca54:	2750      	movs	r7, #80	; 0x50
   bca56:	e70c      	b.n	bc872 <__gethex+0x12a>
   bca58:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bca5a:	2b00      	cmp	r3, #0
   bca5c:	d1f2      	bne.n	bca44 <__gethex+0x2fc>
   bca5e:	e7d8      	b.n	bca12 <__gethex+0x2ca>
   bca60:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bca62:	2b00      	cmp	r3, #0
   bca64:	d1d5      	bne.n	bca12 <__gethex+0x2ca>
   bca66:	e7ed      	b.n	bca44 <__gethex+0x2fc>
   bca68:	1e6f      	subs	r7, r5, #1
   bca6a:	f1ba 0f00 	cmp.w	sl, #0
   bca6e:	d131      	bne.n	bcad4 <__gethex+0x38c>
   bca70:	b127      	cbz	r7, bca7c <__gethex+0x334>
   bca72:	4639      	mov	r1, r7
   bca74:	4620      	mov	r0, r4
   bca76:	f000 fe25 	bl	bd6c4 <__any_on>
   bca7a:	4682      	mov	sl, r0
   bca7c:	117b      	asrs	r3, r7, #5
   bca7e:	2101      	movs	r1, #1
   bca80:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bca84:	f007 071f 	and.w	r7, r7, #31
   bca88:	fa01 f707 	lsl.w	r7, r1, r7
   bca8c:	421f      	tst	r7, r3
   bca8e:	4629      	mov	r1, r5
   bca90:	4620      	mov	r0, r4
   bca92:	bf18      	it	ne
   bca94:	f04a 0a02 	orrne.w	sl, sl, #2
   bca98:	1b76      	subs	r6, r6, r5
   bca9a:	f7ff fded 	bl	bc678 <rshift>
   bca9e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bcaa2:	2702      	movs	r7, #2
   bcaa4:	f1ba 0f00 	cmp.w	sl, #0
   bcaa8:	d048      	beq.n	bcb3c <__gethex+0x3f4>
   bcaaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bcaae:	2b02      	cmp	r3, #2
   bcab0:	d015      	beq.n	bcade <__gethex+0x396>
   bcab2:	2b03      	cmp	r3, #3
   bcab4:	d017      	beq.n	bcae6 <__gethex+0x39e>
   bcab6:	2b01      	cmp	r3, #1
   bcab8:	d109      	bne.n	bcace <__gethex+0x386>
   bcaba:	f01a 0f02 	tst.w	sl, #2
   bcabe:	d006      	beq.n	bcace <__gethex+0x386>
   bcac0:	f8d9 0000 	ldr.w	r0, [r9]
   bcac4:	ea4a 0a00 	orr.w	sl, sl, r0
   bcac8:	f01a 0f01 	tst.w	sl, #1
   bcacc:	d10e      	bne.n	bcaec <__gethex+0x3a4>
   bcace:	f047 0710 	orr.w	r7, r7, #16
   bcad2:	e033      	b.n	bcb3c <__gethex+0x3f4>
   bcad4:	f04f 0a01 	mov.w	sl, #1
   bcad8:	e7d0      	b.n	bca7c <__gethex+0x334>
   bcada:	2701      	movs	r7, #1
   bcadc:	e7e2      	b.n	bcaa4 <__gethex+0x35c>
   bcade:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bcae0:	f1c3 0301 	rsb	r3, r3, #1
   bcae4:	9315      	str	r3, [sp, #84]	; 0x54
   bcae6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bcae8:	2b00      	cmp	r3, #0
   bcaea:	d0f0      	beq.n	bcace <__gethex+0x386>
   bcaec:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bcaf0:	f104 0314 	add.w	r3, r4, #20
   bcaf4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bcaf8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bcafc:	f04f 0c00 	mov.w	ip, #0
   bcb00:	4618      	mov	r0, r3
   bcb02:	f853 2b04 	ldr.w	r2, [r3], #4
   bcb06:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bcb0a:	d01c      	beq.n	bcb46 <__gethex+0x3fe>
   bcb0c:	3201      	adds	r2, #1
   bcb0e:	6002      	str	r2, [r0, #0]
   bcb10:	2f02      	cmp	r7, #2
   bcb12:	f104 0314 	add.w	r3, r4, #20
   bcb16:	d13f      	bne.n	bcb98 <__gethex+0x450>
   bcb18:	f8d8 2000 	ldr.w	r2, [r8]
   bcb1c:	3a01      	subs	r2, #1
   bcb1e:	42b2      	cmp	r2, r6
   bcb20:	d10a      	bne.n	bcb38 <__gethex+0x3f0>
   bcb22:	1171      	asrs	r1, r6, #5
   bcb24:	2201      	movs	r2, #1
   bcb26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bcb2a:	f006 061f 	and.w	r6, r6, #31
   bcb2e:	fa02 f606 	lsl.w	r6, r2, r6
   bcb32:	421e      	tst	r6, r3
   bcb34:	bf18      	it	ne
   bcb36:	4617      	movne	r7, r2
   bcb38:	f047 0720 	orr.w	r7, r7, #32
   bcb3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bcb3e:	601c      	str	r4, [r3, #0]
   bcb40:	9b04      	ldr	r3, [sp, #16]
   bcb42:	601d      	str	r5, [r3, #0]
   bcb44:	e695      	b.n	bc872 <__gethex+0x12a>
   bcb46:	4299      	cmp	r1, r3
   bcb48:	f843 cc04 	str.w	ip, [r3, #-4]
   bcb4c:	d8d8      	bhi.n	bcb00 <__gethex+0x3b8>
   bcb4e:	68a3      	ldr	r3, [r4, #8]
   bcb50:	459b      	cmp	fp, r3
   bcb52:	db19      	blt.n	bcb88 <__gethex+0x440>
   bcb54:	6861      	ldr	r1, [r4, #4]
   bcb56:	ee18 0a10 	vmov	r0, s16
   bcb5a:	3101      	adds	r1, #1
   bcb5c:	f000 f912 	bl	bcd84 <_Balloc>
   bcb60:	4681      	mov	r9, r0
   bcb62:	b918      	cbnz	r0, bcb6c <__gethex+0x424>
   bcb64:	4b1a      	ldr	r3, [pc, #104]	; (bcbd0 <__gethex+0x488>)
   bcb66:	4602      	mov	r2, r0
   bcb68:	2184      	movs	r1, #132	; 0x84
   bcb6a:	e6a8      	b.n	bc8be <__gethex+0x176>
   bcb6c:	6922      	ldr	r2, [r4, #16]
   bcb6e:	3202      	adds	r2, #2
   bcb70:	f104 010c 	add.w	r1, r4, #12
   bcb74:	0092      	lsls	r2, r2, #2
   bcb76:	300c      	adds	r0, #12
   bcb78:	f7fe fd64 	bl	bb644 <memcpy>
   bcb7c:	4621      	mov	r1, r4
   bcb7e:	ee18 0a10 	vmov	r0, s16
   bcb82:	f000 f93f 	bl	bce04 <_Bfree>
   bcb86:	464c      	mov	r4, r9
   bcb88:	6923      	ldr	r3, [r4, #16]
   bcb8a:	1c5a      	adds	r2, r3, #1
   bcb8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bcb90:	6122      	str	r2, [r4, #16]
   bcb92:	2201      	movs	r2, #1
   bcb94:	615a      	str	r2, [r3, #20]
   bcb96:	e7bb      	b.n	bcb10 <__gethex+0x3c8>
   bcb98:	6922      	ldr	r2, [r4, #16]
   bcb9a:	455a      	cmp	r2, fp
   bcb9c:	dd0b      	ble.n	bcbb6 <__gethex+0x46e>
   bcb9e:	2101      	movs	r1, #1
   bcba0:	4620      	mov	r0, r4
   bcba2:	f7ff fd69 	bl	bc678 <rshift>
   bcba6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bcbaa:	3501      	adds	r5, #1
   bcbac:	42ab      	cmp	r3, r5
   bcbae:	f6ff aed0 	blt.w	bc952 <__gethex+0x20a>
   bcbb2:	2701      	movs	r7, #1
   bcbb4:	e7c0      	b.n	bcb38 <__gethex+0x3f0>
   bcbb6:	f016 061f 	ands.w	r6, r6, #31
   bcbba:	d0fa      	beq.n	bcbb2 <__gethex+0x46a>
   bcbbc:	4453      	add	r3, sl
   bcbbe:	f1c6 0620 	rsb	r6, r6, #32
   bcbc2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bcbc6:	f000 f9cf 	bl	bcf68 <__hi0bits>
   bcbca:	42b0      	cmp	r0, r6
   bcbcc:	dbe7      	blt.n	bcb9e <__gethex+0x456>
   bcbce:	e7f0      	b.n	bcbb2 <__gethex+0x46a>
   bcbd0:	000be2b1 	.word	0x000be2b1

000bcbd4 <L_shift>:
   bcbd4:	f1c2 0208 	rsb	r2, r2, #8
   bcbd8:	0092      	lsls	r2, r2, #2
   bcbda:	b570      	push	{r4, r5, r6, lr}
   bcbdc:	f1c2 0620 	rsb	r6, r2, #32
   bcbe0:	6843      	ldr	r3, [r0, #4]
   bcbe2:	6804      	ldr	r4, [r0, #0]
   bcbe4:	fa03 f506 	lsl.w	r5, r3, r6
   bcbe8:	432c      	orrs	r4, r5
   bcbea:	40d3      	lsrs	r3, r2
   bcbec:	6004      	str	r4, [r0, #0]
   bcbee:	f840 3f04 	str.w	r3, [r0, #4]!
   bcbf2:	4288      	cmp	r0, r1
   bcbf4:	d3f4      	bcc.n	bcbe0 <L_shift+0xc>
   bcbf6:	bd70      	pop	{r4, r5, r6, pc}

000bcbf8 <__match>:
   bcbf8:	b530      	push	{r4, r5, lr}
   bcbfa:	6803      	ldr	r3, [r0, #0]
   bcbfc:	3301      	adds	r3, #1
   bcbfe:	f811 4b01 	ldrb.w	r4, [r1], #1
   bcc02:	b914      	cbnz	r4, bcc0a <__match+0x12>
   bcc04:	6003      	str	r3, [r0, #0]
   bcc06:	2001      	movs	r0, #1
   bcc08:	bd30      	pop	{r4, r5, pc}
   bcc0a:	f813 2b01 	ldrb.w	r2, [r3], #1
   bcc0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bcc12:	2d19      	cmp	r5, #25
   bcc14:	bf98      	it	ls
   bcc16:	3220      	addls	r2, #32
   bcc18:	42a2      	cmp	r2, r4
   bcc1a:	d0f0      	beq.n	bcbfe <__match+0x6>
   bcc1c:	2000      	movs	r0, #0
   bcc1e:	e7f3      	b.n	bcc08 <__match+0x10>

000bcc20 <__hexnan>:
   bcc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcc24:	680b      	ldr	r3, [r1, #0]
   bcc26:	115e      	asrs	r6, r3, #5
   bcc28:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bcc2c:	f013 031f 	ands.w	r3, r3, #31
   bcc30:	b087      	sub	sp, #28
   bcc32:	bf18      	it	ne
   bcc34:	3604      	addne	r6, #4
   bcc36:	2500      	movs	r5, #0
   bcc38:	1f37      	subs	r7, r6, #4
   bcc3a:	4690      	mov	r8, r2
   bcc3c:	6802      	ldr	r2, [r0, #0]
   bcc3e:	9301      	str	r3, [sp, #4]
   bcc40:	4682      	mov	sl, r0
   bcc42:	f846 5c04 	str.w	r5, [r6, #-4]
   bcc46:	46b9      	mov	r9, r7
   bcc48:	463c      	mov	r4, r7
   bcc4a:	9502      	str	r5, [sp, #8]
   bcc4c:	46ab      	mov	fp, r5
   bcc4e:	7851      	ldrb	r1, [r2, #1]
   bcc50:	1c53      	adds	r3, r2, #1
   bcc52:	9303      	str	r3, [sp, #12]
   bcc54:	b341      	cbz	r1, bcca8 <__hexnan+0x88>
   bcc56:	4608      	mov	r0, r1
   bcc58:	9205      	str	r2, [sp, #20]
   bcc5a:	9104      	str	r1, [sp, #16]
   bcc5c:	f7ff fd5e 	bl	bc71c <__hexdig_fun>
   bcc60:	2800      	cmp	r0, #0
   bcc62:	d14f      	bne.n	bcd04 <__hexnan+0xe4>
   bcc64:	9904      	ldr	r1, [sp, #16]
   bcc66:	9a05      	ldr	r2, [sp, #20]
   bcc68:	2920      	cmp	r1, #32
   bcc6a:	d818      	bhi.n	bcc9e <__hexnan+0x7e>
   bcc6c:	9b02      	ldr	r3, [sp, #8]
   bcc6e:	459b      	cmp	fp, r3
   bcc70:	dd13      	ble.n	bcc9a <__hexnan+0x7a>
   bcc72:	454c      	cmp	r4, r9
   bcc74:	d206      	bcs.n	bcc84 <__hexnan+0x64>
   bcc76:	2d07      	cmp	r5, #7
   bcc78:	dc04      	bgt.n	bcc84 <__hexnan+0x64>
   bcc7a:	462a      	mov	r2, r5
   bcc7c:	4649      	mov	r1, r9
   bcc7e:	4620      	mov	r0, r4
   bcc80:	f7ff ffa8 	bl	bcbd4 <L_shift>
   bcc84:	4544      	cmp	r4, r8
   bcc86:	d950      	bls.n	bcd2a <__hexnan+0x10a>
   bcc88:	2300      	movs	r3, #0
   bcc8a:	f1a4 0904 	sub.w	r9, r4, #4
   bcc8e:	f844 3c04 	str.w	r3, [r4, #-4]
   bcc92:	f8cd b008 	str.w	fp, [sp, #8]
   bcc96:	464c      	mov	r4, r9
   bcc98:	461d      	mov	r5, r3
   bcc9a:	9a03      	ldr	r2, [sp, #12]
   bcc9c:	e7d7      	b.n	bcc4e <__hexnan+0x2e>
   bcc9e:	2929      	cmp	r1, #41	; 0x29
   bcca0:	d156      	bne.n	bcd50 <__hexnan+0x130>
   bcca2:	3202      	adds	r2, #2
   bcca4:	f8ca 2000 	str.w	r2, [sl]
   bcca8:	f1bb 0f00 	cmp.w	fp, #0
   bccac:	d050      	beq.n	bcd50 <__hexnan+0x130>
   bccae:	454c      	cmp	r4, r9
   bccb0:	d206      	bcs.n	bccc0 <__hexnan+0xa0>
   bccb2:	2d07      	cmp	r5, #7
   bccb4:	dc04      	bgt.n	bccc0 <__hexnan+0xa0>
   bccb6:	462a      	mov	r2, r5
   bccb8:	4649      	mov	r1, r9
   bccba:	4620      	mov	r0, r4
   bccbc:	f7ff ff8a 	bl	bcbd4 <L_shift>
   bccc0:	4544      	cmp	r4, r8
   bccc2:	d934      	bls.n	bcd2e <__hexnan+0x10e>
   bccc4:	f1a8 0204 	sub.w	r2, r8, #4
   bccc8:	4623      	mov	r3, r4
   bccca:	f853 1b04 	ldr.w	r1, [r3], #4
   bccce:	f842 1f04 	str.w	r1, [r2, #4]!
   bccd2:	429f      	cmp	r7, r3
   bccd4:	d2f9      	bcs.n	bccca <__hexnan+0xaa>
   bccd6:	1b3b      	subs	r3, r7, r4
   bccd8:	f023 0303 	bic.w	r3, r3, #3
   bccdc:	3304      	adds	r3, #4
   bccde:	3401      	adds	r4, #1
   bcce0:	3e03      	subs	r6, #3
   bcce2:	42b4      	cmp	r4, r6
   bcce4:	bf88      	it	hi
   bcce6:	2304      	movhi	r3, #4
   bcce8:	4443      	add	r3, r8
   bccea:	2200      	movs	r2, #0
   bccec:	f843 2b04 	str.w	r2, [r3], #4
   bccf0:	429f      	cmp	r7, r3
   bccf2:	d2fb      	bcs.n	bccec <__hexnan+0xcc>
   bccf4:	683b      	ldr	r3, [r7, #0]
   bccf6:	b91b      	cbnz	r3, bcd00 <__hexnan+0xe0>
   bccf8:	4547      	cmp	r7, r8
   bccfa:	d127      	bne.n	bcd4c <__hexnan+0x12c>
   bccfc:	2301      	movs	r3, #1
   bccfe:	603b      	str	r3, [r7, #0]
   bcd00:	2005      	movs	r0, #5
   bcd02:	e026      	b.n	bcd52 <__hexnan+0x132>
   bcd04:	3501      	adds	r5, #1
   bcd06:	2d08      	cmp	r5, #8
   bcd08:	f10b 0b01 	add.w	fp, fp, #1
   bcd0c:	dd06      	ble.n	bcd1c <__hexnan+0xfc>
   bcd0e:	4544      	cmp	r4, r8
   bcd10:	d9c3      	bls.n	bcc9a <__hexnan+0x7a>
   bcd12:	2300      	movs	r3, #0
   bcd14:	f844 3c04 	str.w	r3, [r4, #-4]
   bcd18:	2501      	movs	r5, #1
   bcd1a:	3c04      	subs	r4, #4
   bcd1c:	6822      	ldr	r2, [r4, #0]
   bcd1e:	f000 000f 	and.w	r0, r0, #15
   bcd22:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bcd26:	6022      	str	r2, [r4, #0]
   bcd28:	e7b7      	b.n	bcc9a <__hexnan+0x7a>
   bcd2a:	2508      	movs	r5, #8
   bcd2c:	e7b5      	b.n	bcc9a <__hexnan+0x7a>
   bcd2e:	9b01      	ldr	r3, [sp, #4]
   bcd30:	2b00      	cmp	r3, #0
   bcd32:	d0df      	beq.n	bccf4 <__hexnan+0xd4>
   bcd34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bcd38:	f1c3 0320 	rsb	r3, r3, #32
   bcd3c:	fa22 f303 	lsr.w	r3, r2, r3
   bcd40:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bcd44:	401a      	ands	r2, r3
   bcd46:	f846 2c04 	str.w	r2, [r6, #-4]
   bcd4a:	e7d3      	b.n	bccf4 <__hexnan+0xd4>
   bcd4c:	3f04      	subs	r7, #4
   bcd4e:	e7d1      	b.n	bccf4 <__hexnan+0xd4>
   bcd50:	2004      	movs	r0, #4
   bcd52:	b007      	add	sp, #28
   bcd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bcd58 <__retarget_lock_acquire_recursive>:
   bcd58:	4770      	bx	lr

000bcd5a <__retarget_lock_release>:
   bcd5a:	4770      	bx	lr

000bcd5c <__retarget_lock_release_recursive>:
   bcd5c:	4770      	bx	lr

000bcd5e <__ascii_mbtowc>:
   bcd5e:	b082      	sub	sp, #8
   bcd60:	b901      	cbnz	r1, bcd64 <__ascii_mbtowc+0x6>
   bcd62:	a901      	add	r1, sp, #4
   bcd64:	b142      	cbz	r2, bcd78 <__ascii_mbtowc+0x1a>
   bcd66:	b14b      	cbz	r3, bcd7c <__ascii_mbtowc+0x1e>
   bcd68:	7813      	ldrb	r3, [r2, #0]
   bcd6a:	600b      	str	r3, [r1, #0]
   bcd6c:	7812      	ldrb	r2, [r2, #0]
   bcd6e:	1e10      	subs	r0, r2, #0
   bcd70:	bf18      	it	ne
   bcd72:	2001      	movne	r0, #1
   bcd74:	b002      	add	sp, #8
   bcd76:	4770      	bx	lr
   bcd78:	4610      	mov	r0, r2
   bcd7a:	e7fb      	b.n	bcd74 <__ascii_mbtowc+0x16>
   bcd7c:	f06f 0001 	mvn.w	r0, #1
   bcd80:	e7f8      	b.n	bcd74 <__ascii_mbtowc+0x16>
	...

000bcd84 <_Balloc>:
   bcd84:	b570      	push	{r4, r5, r6, lr}
   bcd86:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bcd88:	4604      	mov	r4, r0
   bcd8a:	460d      	mov	r5, r1
   bcd8c:	b976      	cbnz	r6, bcdac <_Balloc+0x28>
   bcd8e:	2010      	movs	r0, #16
   bcd90:	f7fb f97a 	bl	b8088 <malloc>
   bcd94:	4602      	mov	r2, r0
   bcd96:	6260      	str	r0, [r4, #36]	; 0x24
   bcd98:	b920      	cbnz	r0, bcda4 <_Balloc+0x20>
   bcd9a:	4b18      	ldr	r3, [pc, #96]	; (bcdfc <_Balloc+0x78>)
   bcd9c:	4818      	ldr	r0, [pc, #96]	; (bce00 <_Balloc+0x7c>)
   bcd9e:	2166      	movs	r1, #102	; 0x66
   bcda0:	f7fb f9b2 	bl	b8108 <__assert_func>
   bcda4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bcda8:	6006      	str	r6, [r0, #0]
   bcdaa:	60c6      	str	r6, [r0, #12]
   bcdac:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bcdae:	68f3      	ldr	r3, [r6, #12]
   bcdb0:	b183      	cbz	r3, bcdd4 <_Balloc+0x50>
   bcdb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bcdb4:	68db      	ldr	r3, [r3, #12]
   bcdb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bcdba:	b9b8      	cbnz	r0, bcdec <_Balloc+0x68>
   bcdbc:	2101      	movs	r1, #1
   bcdbe:	fa01 f605 	lsl.w	r6, r1, r5
   bcdc2:	1d72      	adds	r2, r6, #5
   bcdc4:	0092      	lsls	r2, r2, #2
   bcdc6:	4620      	mov	r0, r4
   bcdc8:	f000 fc9d 	bl	bd706 <_calloc_r>
   bcdcc:	b160      	cbz	r0, bcde8 <_Balloc+0x64>
   bcdce:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bcdd2:	e00e      	b.n	bcdf2 <_Balloc+0x6e>
   bcdd4:	2221      	movs	r2, #33	; 0x21
   bcdd6:	2104      	movs	r1, #4
   bcdd8:	4620      	mov	r0, r4
   bcdda:	f000 fc94 	bl	bd706 <_calloc_r>
   bcdde:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bcde0:	60f0      	str	r0, [r6, #12]
   bcde2:	68db      	ldr	r3, [r3, #12]
   bcde4:	2b00      	cmp	r3, #0
   bcde6:	d1e4      	bne.n	bcdb2 <_Balloc+0x2e>
   bcde8:	2000      	movs	r0, #0
   bcdea:	bd70      	pop	{r4, r5, r6, pc}
   bcdec:	6802      	ldr	r2, [r0, #0]
   bcdee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bcdf2:	2300      	movs	r3, #0
   bcdf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bcdf8:	e7f7      	b.n	bcdea <_Balloc+0x66>
   bcdfa:	bf00      	nop
   bcdfc:	000be0dd 	.word	0x000be0dd
   bce00:	000be338 	.word	0x000be338

000bce04 <_Bfree>:
   bce04:	b570      	push	{r4, r5, r6, lr}
   bce06:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bce08:	4605      	mov	r5, r0
   bce0a:	460c      	mov	r4, r1
   bce0c:	b976      	cbnz	r6, bce2c <_Bfree+0x28>
   bce0e:	2010      	movs	r0, #16
   bce10:	f7fb f93a 	bl	b8088 <malloc>
   bce14:	4602      	mov	r2, r0
   bce16:	6268      	str	r0, [r5, #36]	; 0x24
   bce18:	b920      	cbnz	r0, bce24 <_Bfree+0x20>
   bce1a:	4b09      	ldr	r3, [pc, #36]	; (bce40 <_Bfree+0x3c>)
   bce1c:	4809      	ldr	r0, [pc, #36]	; (bce44 <_Bfree+0x40>)
   bce1e:	218a      	movs	r1, #138	; 0x8a
   bce20:	f7fb f972 	bl	b8108 <__assert_func>
   bce24:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bce28:	6006      	str	r6, [r0, #0]
   bce2a:	60c6      	str	r6, [r0, #12]
   bce2c:	b13c      	cbz	r4, bce3e <_Bfree+0x3a>
   bce2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bce30:	6862      	ldr	r2, [r4, #4]
   bce32:	68db      	ldr	r3, [r3, #12]
   bce34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bce38:	6021      	str	r1, [r4, #0]
   bce3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bce3e:	bd70      	pop	{r4, r5, r6, pc}
   bce40:	000be0dd 	.word	0x000be0dd
   bce44:	000be338 	.word	0x000be338

000bce48 <__multadd>:
   bce48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bce4c:	690d      	ldr	r5, [r1, #16]
   bce4e:	4607      	mov	r7, r0
   bce50:	460c      	mov	r4, r1
   bce52:	461e      	mov	r6, r3
   bce54:	f101 0c14 	add.w	ip, r1, #20
   bce58:	2000      	movs	r0, #0
   bce5a:	f8dc 3000 	ldr.w	r3, [ip]
   bce5e:	b299      	uxth	r1, r3
   bce60:	fb02 6101 	mla	r1, r2, r1, r6
   bce64:	0c1e      	lsrs	r6, r3, #16
   bce66:	0c0b      	lsrs	r3, r1, #16
   bce68:	fb02 3306 	mla	r3, r2, r6, r3
   bce6c:	b289      	uxth	r1, r1
   bce6e:	3001      	adds	r0, #1
   bce70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bce74:	4285      	cmp	r5, r0
   bce76:	f84c 1b04 	str.w	r1, [ip], #4
   bce7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bce7e:	dcec      	bgt.n	bce5a <__multadd+0x12>
   bce80:	b30e      	cbz	r6, bcec6 <__multadd+0x7e>
   bce82:	68a3      	ldr	r3, [r4, #8]
   bce84:	42ab      	cmp	r3, r5
   bce86:	dc19      	bgt.n	bcebc <__multadd+0x74>
   bce88:	6861      	ldr	r1, [r4, #4]
   bce8a:	4638      	mov	r0, r7
   bce8c:	3101      	adds	r1, #1
   bce8e:	f7ff ff79 	bl	bcd84 <_Balloc>
   bce92:	4680      	mov	r8, r0
   bce94:	b928      	cbnz	r0, bcea2 <__multadd+0x5a>
   bce96:	4602      	mov	r2, r0
   bce98:	4b0c      	ldr	r3, [pc, #48]	; (bcecc <__multadd+0x84>)
   bce9a:	480d      	ldr	r0, [pc, #52]	; (bced0 <__multadd+0x88>)
   bce9c:	21b5      	movs	r1, #181	; 0xb5
   bce9e:	f7fb f933 	bl	b8108 <__assert_func>
   bcea2:	6922      	ldr	r2, [r4, #16]
   bcea4:	3202      	adds	r2, #2
   bcea6:	f104 010c 	add.w	r1, r4, #12
   bceaa:	0092      	lsls	r2, r2, #2
   bceac:	300c      	adds	r0, #12
   bceae:	f7fe fbc9 	bl	bb644 <memcpy>
   bceb2:	4621      	mov	r1, r4
   bceb4:	4638      	mov	r0, r7
   bceb6:	f7ff ffa5 	bl	bce04 <_Bfree>
   bceba:	4644      	mov	r4, r8
   bcebc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bcec0:	3501      	adds	r5, #1
   bcec2:	615e      	str	r6, [r3, #20]
   bcec4:	6125      	str	r5, [r4, #16]
   bcec6:	4620      	mov	r0, r4
   bcec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcecc:	000be2b1 	.word	0x000be2b1
   bced0:	000be338 	.word	0x000be338

000bced4 <__s2b>:
   bced4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bced8:	460c      	mov	r4, r1
   bceda:	4615      	mov	r5, r2
   bcedc:	461f      	mov	r7, r3
   bcede:	2209      	movs	r2, #9
   bcee0:	3308      	adds	r3, #8
   bcee2:	4606      	mov	r6, r0
   bcee4:	fb93 f3f2 	sdiv	r3, r3, r2
   bcee8:	2100      	movs	r1, #0
   bceea:	2201      	movs	r2, #1
   bceec:	429a      	cmp	r2, r3
   bceee:	db09      	blt.n	bcf04 <__s2b+0x30>
   bcef0:	4630      	mov	r0, r6
   bcef2:	f7ff ff47 	bl	bcd84 <_Balloc>
   bcef6:	b940      	cbnz	r0, bcf0a <__s2b+0x36>
   bcef8:	4602      	mov	r2, r0
   bcefa:	4b19      	ldr	r3, [pc, #100]	; (bcf60 <__s2b+0x8c>)
   bcefc:	4819      	ldr	r0, [pc, #100]	; (bcf64 <__s2b+0x90>)
   bcefe:	21ce      	movs	r1, #206	; 0xce
   bcf00:	f7fb f902 	bl	b8108 <__assert_func>
   bcf04:	0052      	lsls	r2, r2, #1
   bcf06:	3101      	adds	r1, #1
   bcf08:	e7f0      	b.n	bceec <__s2b+0x18>
   bcf0a:	9b08      	ldr	r3, [sp, #32]
   bcf0c:	6143      	str	r3, [r0, #20]
   bcf0e:	2d09      	cmp	r5, #9
   bcf10:	f04f 0301 	mov.w	r3, #1
   bcf14:	6103      	str	r3, [r0, #16]
   bcf16:	dd16      	ble.n	bcf46 <__s2b+0x72>
   bcf18:	f104 0909 	add.w	r9, r4, #9
   bcf1c:	46c8      	mov	r8, r9
   bcf1e:	442c      	add	r4, r5
   bcf20:	f818 3b01 	ldrb.w	r3, [r8], #1
   bcf24:	4601      	mov	r1, r0
   bcf26:	3b30      	subs	r3, #48	; 0x30
   bcf28:	220a      	movs	r2, #10
   bcf2a:	4630      	mov	r0, r6
   bcf2c:	f7ff ff8c 	bl	bce48 <__multadd>
   bcf30:	45a0      	cmp	r8, r4
   bcf32:	d1f5      	bne.n	bcf20 <__s2b+0x4c>
   bcf34:	f1a5 0408 	sub.w	r4, r5, #8
   bcf38:	444c      	add	r4, r9
   bcf3a:	1b2d      	subs	r5, r5, r4
   bcf3c:	1963      	adds	r3, r4, r5
   bcf3e:	42bb      	cmp	r3, r7
   bcf40:	db04      	blt.n	bcf4c <__s2b+0x78>
   bcf42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bcf46:	340a      	adds	r4, #10
   bcf48:	2509      	movs	r5, #9
   bcf4a:	e7f6      	b.n	bcf3a <__s2b+0x66>
   bcf4c:	f814 3b01 	ldrb.w	r3, [r4], #1
   bcf50:	4601      	mov	r1, r0
   bcf52:	3b30      	subs	r3, #48	; 0x30
   bcf54:	220a      	movs	r2, #10
   bcf56:	4630      	mov	r0, r6
   bcf58:	f7ff ff76 	bl	bce48 <__multadd>
   bcf5c:	e7ee      	b.n	bcf3c <__s2b+0x68>
   bcf5e:	bf00      	nop
   bcf60:	000be2b1 	.word	0x000be2b1
   bcf64:	000be338 	.word	0x000be338

000bcf68 <__hi0bits>:
   bcf68:	0c03      	lsrs	r3, r0, #16
   bcf6a:	041b      	lsls	r3, r3, #16
   bcf6c:	b9d3      	cbnz	r3, bcfa4 <__hi0bits+0x3c>
   bcf6e:	0400      	lsls	r0, r0, #16
   bcf70:	2310      	movs	r3, #16
   bcf72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bcf76:	bf04      	itt	eq
   bcf78:	0200      	lsleq	r0, r0, #8
   bcf7a:	3308      	addeq	r3, #8
   bcf7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bcf80:	bf04      	itt	eq
   bcf82:	0100      	lsleq	r0, r0, #4
   bcf84:	3304      	addeq	r3, #4
   bcf86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bcf8a:	bf04      	itt	eq
   bcf8c:	0080      	lsleq	r0, r0, #2
   bcf8e:	3302      	addeq	r3, #2
   bcf90:	2800      	cmp	r0, #0
   bcf92:	db05      	blt.n	bcfa0 <__hi0bits+0x38>
   bcf94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bcf98:	f103 0301 	add.w	r3, r3, #1
   bcf9c:	bf08      	it	eq
   bcf9e:	2320      	moveq	r3, #32
   bcfa0:	4618      	mov	r0, r3
   bcfa2:	4770      	bx	lr
   bcfa4:	2300      	movs	r3, #0
   bcfa6:	e7e4      	b.n	bcf72 <__hi0bits+0xa>

000bcfa8 <__lo0bits>:
   bcfa8:	6803      	ldr	r3, [r0, #0]
   bcfaa:	f013 0207 	ands.w	r2, r3, #7
   bcfae:	4601      	mov	r1, r0
   bcfb0:	d00b      	beq.n	bcfca <__lo0bits+0x22>
   bcfb2:	07da      	lsls	r2, r3, #31
   bcfb4:	d423      	bmi.n	bcffe <__lo0bits+0x56>
   bcfb6:	0798      	lsls	r0, r3, #30
   bcfb8:	bf49      	itett	mi
   bcfba:	085b      	lsrmi	r3, r3, #1
   bcfbc:	089b      	lsrpl	r3, r3, #2
   bcfbe:	2001      	movmi	r0, #1
   bcfc0:	600b      	strmi	r3, [r1, #0]
   bcfc2:	bf5c      	itt	pl
   bcfc4:	600b      	strpl	r3, [r1, #0]
   bcfc6:	2002      	movpl	r0, #2
   bcfc8:	4770      	bx	lr
   bcfca:	b298      	uxth	r0, r3
   bcfcc:	b9a8      	cbnz	r0, bcffa <__lo0bits+0x52>
   bcfce:	0c1b      	lsrs	r3, r3, #16
   bcfd0:	2010      	movs	r0, #16
   bcfd2:	b2da      	uxtb	r2, r3
   bcfd4:	b90a      	cbnz	r2, bcfda <__lo0bits+0x32>
   bcfd6:	3008      	adds	r0, #8
   bcfd8:	0a1b      	lsrs	r3, r3, #8
   bcfda:	071a      	lsls	r2, r3, #28
   bcfdc:	bf04      	itt	eq
   bcfde:	091b      	lsreq	r3, r3, #4
   bcfe0:	3004      	addeq	r0, #4
   bcfe2:	079a      	lsls	r2, r3, #30
   bcfe4:	bf04      	itt	eq
   bcfe6:	089b      	lsreq	r3, r3, #2
   bcfe8:	3002      	addeq	r0, #2
   bcfea:	07da      	lsls	r2, r3, #31
   bcfec:	d403      	bmi.n	bcff6 <__lo0bits+0x4e>
   bcfee:	085b      	lsrs	r3, r3, #1
   bcff0:	f100 0001 	add.w	r0, r0, #1
   bcff4:	d005      	beq.n	bd002 <__lo0bits+0x5a>
   bcff6:	600b      	str	r3, [r1, #0]
   bcff8:	4770      	bx	lr
   bcffa:	4610      	mov	r0, r2
   bcffc:	e7e9      	b.n	bcfd2 <__lo0bits+0x2a>
   bcffe:	2000      	movs	r0, #0
   bd000:	4770      	bx	lr
   bd002:	2020      	movs	r0, #32
   bd004:	4770      	bx	lr
	...

000bd008 <__i2b>:
   bd008:	b510      	push	{r4, lr}
   bd00a:	460c      	mov	r4, r1
   bd00c:	2101      	movs	r1, #1
   bd00e:	f7ff feb9 	bl	bcd84 <_Balloc>
   bd012:	4602      	mov	r2, r0
   bd014:	b928      	cbnz	r0, bd022 <__i2b+0x1a>
   bd016:	4b05      	ldr	r3, [pc, #20]	; (bd02c <__i2b+0x24>)
   bd018:	4805      	ldr	r0, [pc, #20]	; (bd030 <__i2b+0x28>)
   bd01a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bd01e:	f7fb f873 	bl	b8108 <__assert_func>
   bd022:	2301      	movs	r3, #1
   bd024:	6144      	str	r4, [r0, #20]
   bd026:	6103      	str	r3, [r0, #16]
   bd028:	bd10      	pop	{r4, pc}
   bd02a:	bf00      	nop
   bd02c:	000be2b1 	.word	0x000be2b1
   bd030:	000be338 	.word	0x000be338

000bd034 <__multiply>:
   bd034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd038:	4691      	mov	r9, r2
   bd03a:	690a      	ldr	r2, [r1, #16]
   bd03c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd040:	429a      	cmp	r2, r3
   bd042:	bfb8      	it	lt
   bd044:	460b      	movlt	r3, r1
   bd046:	460c      	mov	r4, r1
   bd048:	bfbc      	itt	lt
   bd04a:	464c      	movlt	r4, r9
   bd04c:	4699      	movlt	r9, r3
   bd04e:	6927      	ldr	r7, [r4, #16]
   bd050:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bd054:	68a3      	ldr	r3, [r4, #8]
   bd056:	6861      	ldr	r1, [r4, #4]
   bd058:	eb07 060a 	add.w	r6, r7, sl
   bd05c:	42b3      	cmp	r3, r6
   bd05e:	b085      	sub	sp, #20
   bd060:	bfb8      	it	lt
   bd062:	3101      	addlt	r1, #1
   bd064:	f7ff fe8e 	bl	bcd84 <_Balloc>
   bd068:	b930      	cbnz	r0, bd078 <__multiply+0x44>
   bd06a:	4602      	mov	r2, r0
   bd06c:	4b44      	ldr	r3, [pc, #272]	; (bd180 <__multiply+0x14c>)
   bd06e:	4845      	ldr	r0, [pc, #276]	; (bd184 <__multiply+0x150>)
   bd070:	f240 115d 	movw	r1, #349	; 0x15d
   bd074:	f7fb f848 	bl	b8108 <__assert_func>
   bd078:	f100 0514 	add.w	r5, r0, #20
   bd07c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bd080:	462b      	mov	r3, r5
   bd082:	2200      	movs	r2, #0
   bd084:	4543      	cmp	r3, r8
   bd086:	d321      	bcc.n	bd0cc <__multiply+0x98>
   bd088:	f104 0314 	add.w	r3, r4, #20
   bd08c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bd090:	f109 0314 	add.w	r3, r9, #20
   bd094:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bd098:	9202      	str	r2, [sp, #8]
   bd09a:	1b3a      	subs	r2, r7, r4
   bd09c:	3a15      	subs	r2, #21
   bd09e:	f022 0203 	bic.w	r2, r2, #3
   bd0a2:	3204      	adds	r2, #4
   bd0a4:	f104 0115 	add.w	r1, r4, #21
   bd0a8:	428f      	cmp	r7, r1
   bd0aa:	bf38      	it	cc
   bd0ac:	2204      	movcc	r2, #4
   bd0ae:	9201      	str	r2, [sp, #4]
   bd0b0:	9a02      	ldr	r2, [sp, #8]
   bd0b2:	9303      	str	r3, [sp, #12]
   bd0b4:	429a      	cmp	r2, r3
   bd0b6:	d80c      	bhi.n	bd0d2 <__multiply+0x9e>
   bd0b8:	2e00      	cmp	r6, #0
   bd0ba:	dd03      	ble.n	bd0c4 <__multiply+0x90>
   bd0bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bd0c0:	2b00      	cmp	r3, #0
   bd0c2:	d05a      	beq.n	bd17a <__multiply+0x146>
   bd0c4:	6106      	str	r6, [r0, #16]
   bd0c6:	b005      	add	sp, #20
   bd0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd0cc:	f843 2b04 	str.w	r2, [r3], #4
   bd0d0:	e7d8      	b.n	bd084 <__multiply+0x50>
   bd0d2:	f8b3 a000 	ldrh.w	sl, [r3]
   bd0d6:	f1ba 0f00 	cmp.w	sl, #0
   bd0da:	d024      	beq.n	bd126 <__multiply+0xf2>
   bd0dc:	f104 0e14 	add.w	lr, r4, #20
   bd0e0:	46a9      	mov	r9, r5
   bd0e2:	f04f 0c00 	mov.w	ip, #0
   bd0e6:	f85e 2b04 	ldr.w	r2, [lr], #4
   bd0ea:	f8d9 1000 	ldr.w	r1, [r9]
   bd0ee:	fa1f fb82 	uxth.w	fp, r2
   bd0f2:	b289      	uxth	r1, r1
   bd0f4:	fb0a 110b 	mla	r1, sl, fp, r1
   bd0f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bd0fc:	f8d9 2000 	ldr.w	r2, [r9]
   bd100:	4461      	add	r1, ip
   bd102:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bd106:	fb0a c20b 	mla	r2, sl, fp, ip
   bd10a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bd10e:	b289      	uxth	r1, r1
   bd110:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bd114:	4577      	cmp	r7, lr
   bd116:	f849 1b04 	str.w	r1, [r9], #4
   bd11a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bd11e:	d8e2      	bhi.n	bd0e6 <__multiply+0xb2>
   bd120:	9a01      	ldr	r2, [sp, #4]
   bd122:	f845 c002 	str.w	ip, [r5, r2]
   bd126:	9a03      	ldr	r2, [sp, #12]
   bd128:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bd12c:	3304      	adds	r3, #4
   bd12e:	f1b9 0f00 	cmp.w	r9, #0
   bd132:	d020      	beq.n	bd176 <__multiply+0x142>
   bd134:	6829      	ldr	r1, [r5, #0]
   bd136:	f104 0c14 	add.w	ip, r4, #20
   bd13a:	46ae      	mov	lr, r5
   bd13c:	f04f 0a00 	mov.w	sl, #0
   bd140:	f8bc b000 	ldrh.w	fp, [ip]
   bd144:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bd148:	fb09 220b 	mla	r2, r9, fp, r2
   bd14c:	4492      	add	sl, r2
   bd14e:	b289      	uxth	r1, r1
   bd150:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bd154:	f84e 1b04 	str.w	r1, [lr], #4
   bd158:	f85c 2b04 	ldr.w	r2, [ip], #4
   bd15c:	f8be 1000 	ldrh.w	r1, [lr]
   bd160:	0c12      	lsrs	r2, r2, #16
   bd162:	fb09 1102 	mla	r1, r9, r2, r1
   bd166:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bd16a:	4567      	cmp	r7, ip
   bd16c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bd170:	d8e6      	bhi.n	bd140 <__multiply+0x10c>
   bd172:	9a01      	ldr	r2, [sp, #4]
   bd174:	50a9      	str	r1, [r5, r2]
   bd176:	3504      	adds	r5, #4
   bd178:	e79a      	b.n	bd0b0 <__multiply+0x7c>
   bd17a:	3e01      	subs	r6, #1
   bd17c:	e79c      	b.n	bd0b8 <__multiply+0x84>
   bd17e:	bf00      	nop
   bd180:	000be2b1 	.word	0x000be2b1
   bd184:	000be338 	.word	0x000be338

000bd188 <__pow5mult>:
   bd188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd18c:	4615      	mov	r5, r2
   bd18e:	f012 0203 	ands.w	r2, r2, #3
   bd192:	4606      	mov	r6, r0
   bd194:	460f      	mov	r7, r1
   bd196:	d007      	beq.n	bd1a8 <__pow5mult+0x20>
   bd198:	4c25      	ldr	r4, [pc, #148]	; (bd230 <__pow5mult+0xa8>)
   bd19a:	3a01      	subs	r2, #1
   bd19c:	2300      	movs	r3, #0
   bd19e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bd1a2:	f7ff fe51 	bl	bce48 <__multadd>
   bd1a6:	4607      	mov	r7, r0
   bd1a8:	10ad      	asrs	r5, r5, #2
   bd1aa:	d03d      	beq.n	bd228 <__pow5mult+0xa0>
   bd1ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bd1ae:	b97c      	cbnz	r4, bd1d0 <__pow5mult+0x48>
   bd1b0:	2010      	movs	r0, #16
   bd1b2:	f7fa ff69 	bl	b8088 <malloc>
   bd1b6:	4602      	mov	r2, r0
   bd1b8:	6270      	str	r0, [r6, #36]	; 0x24
   bd1ba:	b928      	cbnz	r0, bd1c8 <__pow5mult+0x40>
   bd1bc:	4b1d      	ldr	r3, [pc, #116]	; (bd234 <__pow5mult+0xac>)
   bd1be:	481e      	ldr	r0, [pc, #120]	; (bd238 <__pow5mult+0xb0>)
   bd1c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bd1c4:	f7fa ffa0 	bl	b8108 <__assert_func>
   bd1c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bd1cc:	6004      	str	r4, [r0, #0]
   bd1ce:	60c4      	str	r4, [r0, #12]
   bd1d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bd1d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bd1d8:	b94c      	cbnz	r4, bd1ee <__pow5mult+0x66>
   bd1da:	f240 2171 	movw	r1, #625	; 0x271
   bd1de:	4630      	mov	r0, r6
   bd1e0:	f7ff ff12 	bl	bd008 <__i2b>
   bd1e4:	2300      	movs	r3, #0
   bd1e6:	f8c8 0008 	str.w	r0, [r8, #8]
   bd1ea:	4604      	mov	r4, r0
   bd1ec:	6003      	str	r3, [r0, #0]
   bd1ee:	f04f 0900 	mov.w	r9, #0
   bd1f2:	07eb      	lsls	r3, r5, #31
   bd1f4:	d50a      	bpl.n	bd20c <__pow5mult+0x84>
   bd1f6:	4639      	mov	r1, r7
   bd1f8:	4622      	mov	r2, r4
   bd1fa:	4630      	mov	r0, r6
   bd1fc:	f7ff ff1a 	bl	bd034 <__multiply>
   bd200:	4639      	mov	r1, r7
   bd202:	4680      	mov	r8, r0
   bd204:	4630      	mov	r0, r6
   bd206:	f7ff fdfd 	bl	bce04 <_Bfree>
   bd20a:	4647      	mov	r7, r8
   bd20c:	106d      	asrs	r5, r5, #1
   bd20e:	d00b      	beq.n	bd228 <__pow5mult+0xa0>
   bd210:	6820      	ldr	r0, [r4, #0]
   bd212:	b938      	cbnz	r0, bd224 <__pow5mult+0x9c>
   bd214:	4622      	mov	r2, r4
   bd216:	4621      	mov	r1, r4
   bd218:	4630      	mov	r0, r6
   bd21a:	f7ff ff0b 	bl	bd034 <__multiply>
   bd21e:	6020      	str	r0, [r4, #0]
   bd220:	f8c0 9000 	str.w	r9, [r0]
   bd224:	4604      	mov	r4, r0
   bd226:	e7e4      	b.n	bd1f2 <__pow5mult+0x6a>
   bd228:	4638      	mov	r0, r7
   bd22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd22e:	bf00      	nop
   bd230:	000be488 	.word	0x000be488
   bd234:	000be0dd 	.word	0x000be0dd
   bd238:	000be338 	.word	0x000be338

000bd23c <__lshift>:
   bd23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd240:	460c      	mov	r4, r1
   bd242:	6849      	ldr	r1, [r1, #4]
   bd244:	6923      	ldr	r3, [r4, #16]
   bd246:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bd24a:	68a3      	ldr	r3, [r4, #8]
   bd24c:	4607      	mov	r7, r0
   bd24e:	4691      	mov	r9, r2
   bd250:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bd254:	f108 0601 	add.w	r6, r8, #1
   bd258:	42b3      	cmp	r3, r6
   bd25a:	db0b      	blt.n	bd274 <__lshift+0x38>
   bd25c:	4638      	mov	r0, r7
   bd25e:	f7ff fd91 	bl	bcd84 <_Balloc>
   bd262:	4605      	mov	r5, r0
   bd264:	b948      	cbnz	r0, bd27a <__lshift+0x3e>
   bd266:	4602      	mov	r2, r0
   bd268:	4b2a      	ldr	r3, [pc, #168]	; (bd314 <__lshift+0xd8>)
   bd26a:	482b      	ldr	r0, [pc, #172]	; (bd318 <__lshift+0xdc>)
   bd26c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bd270:	f7fa ff4a 	bl	b8108 <__assert_func>
   bd274:	3101      	adds	r1, #1
   bd276:	005b      	lsls	r3, r3, #1
   bd278:	e7ee      	b.n	bd258 <__lshift+0x1c>
   bd27a:	2300      	movs	r3, #0
   bd27c:	f100 0114 	add.w	r1, r0, #20
   bd280:	f100 0210 	add.w	r2, r0, #16
   bd284:	4618      	mov	r0, r3
   bd286:	4553      	cmp	r3, sl
   bd288:	db37      	blt.n	bd2fa <__lshift+0xbe>
   bd28a:	6920      	ldr	r0, [r4, #16]
   bd28c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bd290:	f104 0314 	add.w	r3, r4, #20
   bd294:	f019 091f 	ands.w	r9, r9, #31
   bd298:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bd29c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bd2a0:	d02f      	beq.n	bd302 <__lshift+0xc6>
   bd2a2:	f1c9 0e20 	rsb	lr, r9, #32
   bd2a6:	468a      	mov	sl, r1
   bd2a8:	f04f 0c00 	mov.w	ip, #0
   bd2ac:	681a      	ldr	r2, [r3, #0]
   bd2ae:	fa02 f209 	lsl.w	r2, r2, r9
   bd2b2:	ea42 020c 	orr.w	r2, r2, ip
   bd2b6:	f84a 2b04 	str.w	r2, [sl], #4
   bd2ba:	f853 2b04 	ldr.w	r2, [r3], #4
   bd2be:	4298      	cmp	r0, r3
   bd2c0:	fa22 fc0e 	lsr.w	ip, r2, lr
   bd2c4:	d8f2      	bhi.n	bd2ac <__lshift+0x70>
   bd2c6:	1b03      	subs	r3, r0, r4
   bd2c8:	3b15      	subs	r3, #21
   bd2ca:	f023 0303 	bic.w	r3, r3, #3
   bd2ce:	3304      	adds	r3, #4
   bd2d0:	f104 0215 	add.w	r2, r4, #21
   bd2d4:	4290      	cmp	r0, r2
   bd2d6:	bf38      	it	cc
   bd2d8:	2304      	movcc	r3, #4
   bd2da:	f841 c003 	str.w	ip, [r1, r3]
   bd2de:	f1bc 0f00 	cmp.w	ip, #0
   bd2e2:	d001      	beq.n	bd2e8 <__lshift+0xac>
   bd2e4:	f108 0602 	add.w	r6, r8, #2
   bd2e8:	3e01      	subs	r6, #1
   bd2ea:	4638      	mov	r0, r7
   bd2ec:	612e      	str	r6, [r5, #16]
   bd2ee:	4621      	mov	r1, r4
   bd2f0:	f7ff fd88 	bl	bce04 <_Bfree>
   bd2f4:	4628      	mov	r0, r5
   bd2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd2fa:	f842 0f04 	str.w	r0, [r2, #4]!
   bd2fe:	3301      	adds	r3, #1
   bd300:	e7c1      	b.n	bd286 <__lshift+0x4a>
   bd302:	3904      	subs	r1, #4
   bd304:	f853 2b04 	ldr.w	r2, [r3], #4
   bd308:	f841 2f04 	str.w	r2, [r1, #4]!
   bd30c:	4298      	cmp	r0, r3
   bd30e:	d8f9      	bhi.n	bd304 <__lshift+0xc8>
   bd310:	e7ea      	b.n	bd2e8 <__lshift+0xac>
   bd312:	bf00      	nop
   bd314:	000be2b1 	.word	0x000be2b1
   bd318:	000be338 	.word	0x000be338

000bd31c <__mcmp>:
   bd31c:	b530      	push	{r4, r5, lr}
   bd31e:	6902      	ldr	r2, [r0, #16]
   bd320:	690c      	ldr	r4, [r1, #16]
   bd322:	1b12      	subs	r2, r2, r4
   bd324:	d10e      	bne.n	bd344 <__mcmp+0x28>
   bd326:	f100 0314 	add.w	r3, r0, #20
   bd32a:	3114      	adds	r1, #20
   bd32c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bd330:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bd334:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bd338:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bd33c:	42a5      	cmp	r5, r4
   bd33e:	d003      	beq.n	bd348 <__mcmp+0x2c>
   bd340:	d305      	bcc.n	bd34e <__mcmp+0x32>
   bd342:	2201      	movs	r2, #1
   bd344:	4610      	mov	r0, r2
   bd346:	bd30      	pop	{r4, r5, pc}
   bd348:	4283      	cmp	r3, r0
   bd34a:	d3f3      	bcc.n	bd334 <__mcmp+0x18>
   bd34c:	e7fa      	b.n	bd344 <__mcmp+0x28>
   bd34e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd352:	e7f7      	b.n	bd344 <__mcmp+0x28>

000bd354 <__mdiff>:
   bd354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd358:	460c      	mov	r4, r1
   bd35a:	4606      	mov	r6, r0
   bd35c:	4611      	mov	r1, r2
   bd35e:	4620      	mov	r0, r4
   bd360:	4690      	mov	r8, r2
   bd362:	f7ff ffdb 	bl	bd31c <__mcmp>
   bd366:	1e05      	subs	r5, r0, #0
   bd368:	d110      	bne.n	bd38c <__mdiff+0x38>
   bd36a:	4629      	mov	r1, r5
   bd36c:	4630      	mov	r0, r6
   bd36e:	f7ff fd09 	bl	bcd84 <_Balloc>
   bd372:	b930      	cbnz	r0, bd382 <__mdiff+0x2e>
   bd374:	4b3a      	ldr	r3, [pc, #232]	; (bd460 <__mdiff+0x10c>)
   bd376:	4602      	mov	r2, r0
   bd378:	f240 2132 	movw	r1, #562	; 0x232
   bd37c:	4839      	ldr	r0, [pc, #228]	; (bd464 <__mdiff+0x110>)
   bd37e:	f7fa fec3 	bl	b8108 <__assert_func>
   bd382:	2301      	movs	r3, #1
   bd384:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bd388:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd38c:	bfa4      	itt	ge
   bd38e:	4643      	movge	r3, r8
   bd390:	46a0      	movge	r8, r4
   bd392:	4630      	mov	r0, r6
   bd394:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bd398:	bfa6      	itte	ge
   bd39a:	461c      	movge	r4, r3
   bd39c:	2500      	movge	r5, #0
   bd39e:	2501      	movlt	r5, #1
   bd3a0:	f7ff fcf0 	bl	bcd84 <_Balloc>
   bd3a4:	b920      	cbnz	r0, bd3b0 <__mdiff+0x5c>
   bd3a6:	4b2e      	ldr	r3, [pc, #184]	; (bd460 <__mdiff+0x10c>)
   bd3a8:	4602      	mov	r2, r0
   bd3aa:	f44f 7110 	mov.w	r1, #576	; 0x240
   bd3ae:	e7e5      	b.n	bd37c <__mdiff+0x28>
   bd3b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bd3b4:	6926      	ldr	r6, [r4, #16]
   bd3b6:	60c5      	str	r5, [r0, #12]
   bd3b8:	f104 0914 	add.w	r9, r4, #20
   bd3bc:	f108 0514 	add.w	r5, r8, #20
   bd3c0:	f100 0e14 	add.w	lr, r0, #20
   bd3c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bd3c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bd3cc:	f108 0210 	add.w	r2, r8, #16
   bd3d0:	46f2      	mov	sl, lr
   bd3d2:	2100      	movs	r1, #0
   bd3d4:	f859 3b04 	ldr.w	r3, [r9], #4
   bd3d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bd3dc:	fa1f f883 	uxth.w	r8, r3
   bd3e0:	fa11 f18b 	uxtah	r1, r1, fp
   bd3e4:	0c1b      	lsrs	r3, r3, #16
   bd3e6:	eba1 0808 	sub.w	r8, r1, r8
   bd3ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bd3ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bd3f2:	fa1f f888 	uxth.w	r8, r8
   bd3f6:	1419      	asrs	r1, r3, #16
   bd3f8:	454e      	cmp	r6, r9
   bd3fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bd3fe:	f84a 3b04 	str.w	r3, [sl], #4
   bd402:	d8e7      	bhi.n	bd3d4 <__mdiff+0x80>
   bd404:	1b33      	subs	r3, r6, r4
   bd406:	3b15      	subs	r3, #21
   bd408:	f023 0303 	bic.w	r3, r3, #3
   bd40c:	3304      	adds	r3, #4
   bd40e:	3415      	adds	r4, #21
   bd410:	42a6      	cmp	r6, r4
   bd412:	bf38      	it	cc
   bd414:	2304      	movcc	r3, #4
   bd416:	441d      	add	r5, r3
   bd418:	4473      	add	r3, lr
   bd41a:	469e      	mov	lr, r3
   bd41c:	462e      	mov	r6, r5
   bd41e:	4566      	cmp	r6, ip
   bd420:	d30e      	bcc.n	bd440 <__mdiff+0xec>
   bd422:	f10c 0203 	add.w	r2, ip, #3
   bd426:	1b52      	subs	r2, r2, r5
   bd428:	f022 0203 	bic.w	r2, r2, #3
   bd42c:	3d03      	subs	r5, #3
   bd42e:	45ac      	cmp	ip, r5
   bd430:	bf38      	it	cc
   bd432:	2200      	movcc	r2, #0
   bd434:	441a      	add	r2, r3
   bd436:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bd43a:	b17b      	cbz	r3, bd45c <__mdiff+0x108>
   bd43c:	6107      	str	r7, [r0, #16]
   bd43e:	e7a3      	b.n	bd388 <__mdiff+0x34>
   bd440:	f856 8b04 	ldr.w	r8, [r6], #4
   bd444:	fa11 f288 	uxtah	r2, r1, r8
   bd448:	1414      	asrs	r4, r2, #16
   bd44a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bd44e:	b292      	uxth	r2, r2
   bd450:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bd454:	f84e 2b04 	str.w	r2, [lr], #4
   bd458:	1421      	asrs	r1, r4, #16
   bd45a:	e7e0      	b.n	bd41e <__mdiff+0xca>
   bd45c:	3f01      	subs	r7, #1
   bd45e:	e7ea      	b.n	bd436 <__mdiff+0xe2>
   bd460:	000be2b1 	.word	0x000be2b1
   bd464:	000be338 	.word	0x000be338

000bd468 <__ulp>:
   bd468:	b082      	sub	sp, #8
   bd46a:	ed8d 0b00 	vstr	d0, [sp]
   bd46e:	9b01      	ldr	r3, [sp, #4]
   bd470:	4912      	ldr	r1, [pc, #72]	; (bd4bc <__ulp+0x54>)
   bd472:	4019      	ands	r1, r3
   bd474:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bd478:	2900      	cmp	r1, #0
   bd47a:	dd05      	ble.n	bd488 <__ulp+0x20>
   bd47c:	2200      	movs	r2, #0
   bd47e:	460b      	mov	r3, r1
   bd480:	ec43 2b10 	vmov	d0, r2, r3
   bd484:	b002      	add	sp, #8
   bd486:	4770      	bx	lr
   bd488:	4249      	negs	r1, r1
   bd48a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bd48e:	ea4f 5021 	mov.w	r0, r1, asr #20
   bd492:	f04f 0200 	mov.w	r2, #0
   bd496:	f04f 0300 	mov.w	r3, #0
   bd49a:	da04      	bge.n	bd4a6 <__ulp+0x3e>
   bd49c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bd4a0:	fa41 f300 	asr.w	r3, r1, r0
   bd4a4:	e7ec      	b.n	bd480 <__ulp+0x18>
   bd4a6:	f1a0 0114 	sub.w	r1, r0, #20
   bd4aa:	291e      	cmp	r1, #30
   bd4ac:	bfda      	itte	le
   bd4ae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bd4b2:	fa20 f101 	lsrle.w	r1, r0, r1
   bd4b6:	2101      	movgt	r1, #1
   bd4b8:	460a      	mov	r2, r1
   bd4ba:	e7e1      	b.n	bd480 <__ulp+0x18>
   bd4bc:	7ff00000 	.word	0x7ff00000

000bd4c0 <__b2d>:
   bd4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd4c2:	6905      	ldr	r5, [r0, #16]
   bd4c4:	f100 0714 	add.w	r7, r0, #20
   bd4c8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bd4cc:	1f2e      	subs	r6, r5, #4
   bd4ce:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bd4d2:	4620      	mov	r0, r4
   bd4d4:	f7ff fd48 	bl	bcf68 <__hi0bits>
   bd4d8:	f1c0 0320 	rsb	r3, r0, #32
   bd4dc:	280a      	cmp	r0, #10
   bd4de:	f8df c07c 	ldr.w	ip, [pc, #124]	; bd55c <__b2d+0x9c>
   bd4e2:	600b      	str	r3, [r1, #0]
   bd4e4:	dc14      	bgt.n	bd510 <__b2d+0x50>
   bd4e6:	f1c0 0e0b 	rsb	lr, r0, #11
   bd4ea:	fa24 f10e 	lsr.w	r1, r4, lr
   bd4ee:	42b7      	cmp	r7, r6
   bd4f0:	ea41 030c 	orr.w	r3, r1, ip
   bd4f4:	bf34      	ite	cc
   bd4f6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd4fa:	2100      	movcs	r1, #0
   bd4fc:	3015      	adds	r0, #21
   bd4fe:	fa04 f000 	lsl.w	r0, r4, r0
   bd502:	fa21 f10e 	lsr.w	r1, r1, lr
   bd506:	ea40 0201 	orr.w	r2, r0, r1
   bd50a:	ec43 2b10 	vmov	d0, r2, r3
   bd50e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd510:	42b7      	cmp	r7, r6
   bd512:	bf3a      	itte	cc
   bd514:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd518:	f1a5 0608 	subcc.w	r6, r5, #8
   bd51c:	2100      	movcs	r1, #0
   bd51e:	380b      	subs	r0, #11
   bd520:	d017      	beq.n	bd552 <__b2d+0x92>
   bd522:	f1c0 0c20 	rsb	ip, r0, #32
   bd526:	fa04 f500 	lsl.w	r5, r4, r0
   bd52a:	42be      	cmp	r6, r7
   bd52c:	fa21 f40c 	lsr.w	r4, r1, ip
   bd530:	ea45 0504 	orr.w	r5, r5, r4
   bd534:	bf8c      	ite	hi
   bd536:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bd53a:	2400      	movls	r4, #0
   bd53c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bd540:	fa01 f000 	lsl.w	r0, r1, r0
   bd544:	fa24 f40c 	lsr.w	r4, r4, ip
   bd548:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bd54c:	ea40 0204 	orr.w	r2, r0, r4
   bd550:	e7db      	b.n	bd50a <__b2d+0x4a>
   bd552:	ea44 030c 	orr.w	r3, r4, ip
   bd556:	460a      	mov	r2, r1
   bd558:	e7d7      	b.n	bd50a <__b2d+0x4a>
   bd55a:	bf00      	nop
   bd55c:	3ff00000 	.word	0x3ff00000

000bd560 <__d2b>:
   bd560:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bd564:	4689      	mov	r9, r1
   bd566:	2101      	movs	r1, #1
   bd568:	ec57 6b10 	vmov	r6, r7, d0
   bd56c:	4690      	mov	r8, r2
   bd56e:	f7ff fc09 	bl	bcd84 <_Balloc>
   bd572:	4604      	mov	r4, r0
   bd574:	b930      	cbnz	r0, bd584 <__d2b+0x24>
   bd576:	4602      	mov	r2, r0
   bd578:	4b25      	ldr	r3, [pc, #148]	; (bd610 <__d2b+0xb0>)
   bd57a:	4826      	ldr	r0, [pc, #152]	; (bd614 <__d2b+0xb4>)
   bd57c:	f240 310a 	movw	r1, #778	; 0x30a
   bd580:	f7fa fdc2 	bl	b8108 <__assert_func>
   bd584:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bd588:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bd58c:	bb35      	cbnz	r5, bd5dc <__d2b+0x7c>
   bd58e:	2e00      	cmp	r6, #0
   bd590:	9301      	str	r3, [sp, #4]
   bd592:	d028      	beq.n	bd5e6 <__d2b+0x86>
   bd594:	4668      	mov	r0, sp
   bd596:	9600      	str	r6, [sp, #0]
   bd598:	f7ff fd06 	bl	bcfa8 <__lo0bits>
   bd59c:	9900      	ldr	r1, [sp, #0]
   bd59e:	b300      	cbz	r0, bd5e2 <__d2b+0x82>
   bd5a0:	9a01      	ldr	r2, [sp, #4]
   bd5a2:	f1c0 0320 	rsb	r3, r0, #32
   bd5a6:	fa02 f303 	lsl.w	r3, r2, r3
   bd5aa:	430b      	orrs	r3, r1
   bd5ac:	40c2      	lsrs	r2, r0
   bd5ae:	6163      	str	r3, [r4, #20]
   bd5b0:	9201      	str	r2, [sp, #4]
   bd5b2:	9b01      	ldr	r3, [sp, #4]
   bd5b4:	61a3      	str	r3, [r4, #24]
   bd5b6:	2b00      	cmp	r3, #0
   bd5b8:	bf14      	ite	ne
   bd5ba:	2202      	movne	r2, #2
   bd5bc:	2201      	moveq	r2, #1
   bd5be:	6122      	str	r2, [r4, #16]
   bd5c0:	b1d5      	cbz	r5, bd5f8 <__d2b+0x98>
   bd5c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bd5c6:	4405      	add	r5, r0
   bd5c8:	f8c9 5000 	str.w	r5, [r9]
   bd5cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bd5d0:	f8c8 0000 	str.w	r0, [r8]
   bd5d4:	4620      	mov	r0, r4
   bd5d6:	b003      	add	sp, #12
   bd5d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd5dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd5e0:	e7d5      	b.n	bd58e <__d2b+0x2e>
   bd5e2:	6161      	str	r1, [r4, #20]
   bd5e4:	e7e5      	b.n	bd5b2 <__d2b+0x52>
   bd5e6:	a801      	add	r0, sp, #4
   bd5e8:	f7ff fcde 	bl	bcfa8 <__lo0bits>
   bd5ec:	9b01      	ldr	r3, [sp, #4]
   bd5ee:	6163      	str	r3, [r4, #20]
   bd5f0:	2201      	movs	r2, #1
   bd5f2:	6122      	str	r2, [r4, #16]
   bd5f4:	3020      	adds	r0, #32
   bd5f6:	e7e3      	b.n	bd5c0 <__d2b+0x60>
   bd5f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bd5fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bd600:	f8c9 0000 	str.w	r0, [r9]
   bd604:	6918      	ldr	r0, [r3, #16]
   bd606:	f7ff fcaf 	bl	bcf68 <__hi0bits>
   bd60a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bd60e:	e7df      	b.n	bd5d0 <__d2b+0x70>
   bd610:	000be2b1 	.word	0x000be2b1
   bd614:	000be338 	.word	0x000be338

000bd618 <__ratio>:
   bd618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd61c:	4688      	mov	r8, r1
   bd61e:	4669      	mov	r1, sp
   bd620:	4681      	mov	r9, r0
   bd622:	f7ff ff4d 	bl	bd4c0 <__b2d>
   bd626:	a901      	add	r1, sp, #4
   bd628:	4640      	mov	r0, r8
   bd62a:	ec55 4b10 	vmov	r4, r5, d0
   bd62e:	f7ff ff47 	bl	bd4c0 <__b2d>
   bd632:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd636:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bd63a:	eba3 0c02 	sub.w	ip, r3, r2
   bd63e:	e9dd 3200 	ldrd	r3, r2, [sp]
   bd642:	1a9b      	subs	r3, r3, r2
   bd644:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bd648:	ec51 0b10 	vmov	r0, r1, d0
   bd64c:	2b00      	cmp	r3, #0
   bd64e:	bfd6      	itet	le
   bd650:	460a      	movle	r2, r1
   bd652:	462a      	movgt	r2, r5
   bd654:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bd658:	468b      	mov	fp, r1
   bd65a:	462f      	mov	r7, r5
   bd65c:	bfd4      	ite	le
   bd65e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bd662:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bd666:	4620      	mov	r0, r4
   bd668:	ee10 2a10 	vmov	r2, s0
   bd66c:	465b      	mov	r3, fp
   bd66e:	4639      	mov	r1, r7
   bd670:	f7fd fdba 	bl	bb1e8 <__aeabi_ddiv>
   bd674:	ec41 0b10 	vmov	d0, r0, r1
   bd678:	b003      	add	sp, #12
   bd67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd67e <__copybits>:
   bd67e:	3901      	subs	r1, #1
   bd680:	b570      	push	{r4, r5, r6, lr}
   bd682:	1149      	asrs	r1, r1, #5
   bd684:	6914      	ldr	r4, [r2, #16]
   bd686:	3101      	adds	r1, #1
   bd688:	f102 0314 	add.w	r3, r2, #20
   bd68c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bd690:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bd694:	1f05      	subs	r5, r0, #4
   bd696:	42a3      	cmp	r3, r4
   bd698:	d30c      	bcc.n	bd6b4 <__copybits+0x36>
   bd69a:	1aa3      	subs	r3, r4, r2
   bd69c:	3b11      	subs	r3, #17
   bd69e:	f023 0303 	bic.w	r3, r3, #3
   bd6a2:	3211      	adds	r2, #17
   bd6a4:	42a2      	cmp	r2, r4
   bd6a6:	bf88      	it	hi
   bd6a8:	2300      	movhi	r3, #0
   bd6aa:	4418      	add	r0, r3
   bd6ac:	2300      	movs	r3, #0
   bd6ae:	4288      	cmp	r0, r1
   bd6b0:	d305      	bcc.n	bd6be <__copybits+0x40>
   bd6b2:	bd70      	pop	{r4, r5, r6, pc}
   bd6b4:	f853 6b04 	ldr.w	r6, [r3], #4
   bd6b8:	f845 6f04 	str.w	r6, [r5, #4]!
   bd6bc:	e7eb      	b.n	bd696 <__copybits+0x18>
   bd6be:	f840 3b04 	str.w	r3, [r0], #4
   bd6c2:	e7f4      	b.n	bd6ae <__copybits+0x30>

000bd6c4 <__any_on>:
   bd6c4:	f100 0214 	add.w	r2, r0, #20
   bd6c8:	6900      	ldr	r0, [r0, #16]
   bd6ca:	114b      	asrs	r3, r1, #5
   bd6cc:	4298      	cmp	r0, r3
   bd6ce:	b510      	push	{r4, lr}
   bd6d0:	db11      	blt.n	bd6f6 <__any_on+0x32>
   bd6d2:	dd0a      	ble.n	bd6ea <__any_on+0x26>
   bd6d4:	f011 011f 	ands.w	r1, r1, #31
   bd6d8:	d007      	beq.n	bd6ea <__any_on+0x26>
   bd6da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bd6de:	fa24 f001 	lsr.w	r0, r4, r1
   bd6e2:	fa00 f101 	lsl.w	r1, r0, r1
   bd6e6:	428c      	cmp	r4, r1
   bd6e8:	d10b      	bne.n	bd702 <__any_on+0x3e>
   bd6ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bd6ee:	4293      	cmp	r3, r2
   bd6f0:	d803      	bhi.n	bd6fa <__any_on+0x36>
   bd6f2:	2000      	movs	r0, #0
   bd6f4:	bd10      	pop	{r4, pc}
   bd6f6:	4603      	mov	r3, r0
   bd6f8:	e7f7      	b.n	bd6ea <__any_on+0x26>
   bd6fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bd6fe:	2900      	cmp	r1, #0
   bd700:	d0f5      	beq.n	bd6ee <__any_on+0x2a>
   bd702:	2001      	movs	r0, #1
   bd704:	e7f6      	b.n	bd6f4 <__any_on+0x30>

000bd706 <_calloc_r>:
   bd706:	b513      	push	{r0, r1, r4, lr}
   bd708:	434a      	muls	r2, r1
   bd70a:	4611      	mov	r1, r2
   bd70c:	9201      	str	r2, [sp, #4]
   bd70e:	f7fa fceb 	bl	b80e8 <_malloc_r>
   bd712:	4604      	mov	r4, r0
   bd714:	b118      	cbz	r0, bd71e <_calloc_r+0x18>
   bd716:	9a01      	ldr	r2, [sp, #4]
   bd718:	2100      	movs	r1, #0
   bd71a:	f7fd ffbb 	bl	bb694 <memset>
   bd71e:	4620      	mov	r0, r4
   bd720:	b002      	add	sp, #8
   bd722:	bd10      	pop	{r4, pc}
   bd724:	0000      	movs	r0, r0
	...

000bd728 <nan>:
   bd728:	ed9f 0b01 	vldr	d0, [pc, #4]	; bd730 <nan+0x8>
   bd72c:	4770      	bx	lr
   bd72e:	bf00      	nop
   bd730:	00000000 	.word	0x00000000
   bd734:	7ff80000 	.word	0x7ff80000

000bd738 <nanf>:
   bd738:	ed9f 0a01 	vldr	s0, [pc, #4]	; bd740 <nanf+0x8>
   bd73c:	4770      	bx	lr
   bd73e:	bf00      	nop
   bd740:	7fc00000 	.word	0x7fc00000

000bd744 <__ascii_wctomb>:
   bd744:	b149      	cbz	r1, bd75a <__ascii_wctomb+0x16>
   bd746:	2aff      	cmp	r2, #255	; 0xff
   bd748:	bf85      	ittet	hi
   bd74a:	238a      	movhi	r3, #138	; 0x8a
   bd74c:	6003      	strhi	r3, [r0, #0]
   bd74e:	700a      	strbls	r2, [r1, #0]
   bd750:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bd754:	bf98      	it	ls
   bd756:	2001      	movls	r0, #1
   bd758:	4770      	bx	lr
   bd75a:	4608      	mov	r0, r1
   bd75c:	4770      	bx	lr
	...

000bd760 <__aeabi_d2lz>:
   bd760:	b538      	push	{r3, r4, r5, lr}
   bd762:	2200      	movs	r2, #0
   bd764:	2300      	movs	r3, #0
   bd766:	4604      	mov	r4, r0
   bd768:	460d      	mov	r5, r1
   bd76a:	f7fd fe85 	bl	bb478 <__aeabi_dcmplt>
   bd76e:	b928      	cbnz	r0, bd77c <__aeabi_d2lz+0x1c>
   bd770:	4620      	mov	r0, r4
   bd772:	4629      	mov	r1, r5
   bd774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd778:	f7fd bf2c 	b.w	bb5d4 <__aeabi_d2ulz>
   bd77c:	4620      	mov	r0, r4
   bd77e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bd782:	f7fd ff27 	bl	bb5d4 <__aeabi_d2ulz>
   bd786:	4240      	negs	r0, r0
   bd788:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd78c:	bd38      	pop	{r3, r4, r5, pc}
   bd78e:	bf00      	nop

000bd790 <dynalib_user>:
   bd790:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bd7a0:	0000 0000 6162 6973 5f63 7473 6972 676e     ....basic_string
   bd7b0:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   bd7c0:	6c75 206c 6f6e 2074 6176 696c 0064 720a     ull not valid..r
   bd7d0:	7165 6575 7473 6320 646f 2065 2c31 6120     equest code 1, a
   bd7e0:	6464 6572 7373 203a 7400 6172 736e 696d     ddress: .transmi
   bd7f0:	7373 6f69 206e 6572 6963 7665 6465 6620     ssion recieved f
   bd800:	6f72 3a6d 0020 6564 6976 6563 6920 3a64     rom: .device id:
   bd810:	0020 7274 6e61 6d73 7369 6973 6e6f 7320      .transmission s
   bd820:	6e65 2074 6f74 203a 7200 7165 6575 7473     ent to: .request
   bd830:	6320 646f 2065 2c32 6120 6464 6572 7373      code 2, address
   bd840:	203a 6300 6e6f 6c66 6369 2074 6576 6972     : .conflict veri
   bd850:	6966 6163 6974 6e6f 203a 0a00 6f43 6e6e     fication: ..Conn
   bd860:	6365 6574 2064 6f74 203a 6300 6e61 6f6e     ected to: .canno
   bd870:	2074 7263 6165 6574 7320 6474 3a3a 6576     t create std::ve
   bd880:	7463 726f 6c20 7261 6567 2072 6874 6e61     ctor larger than
   bd890:	6d20 7861 735f 7a69 2865 0029 7267 6565      max_size().gree
   bd8a0:	316e 6700 6572 6e65 0032 4c42 2045 6966     n1.green2.BLE fi
   bd8b0:	696e 6873 6465 7200 6465 4600 3046 3030     nished.red.FF000
   bd8c0:	0030 4130 3030 3030 6200 756c 0065 3030     0.0A0000.blue.00
   bd8d0:	3030 4646 3000 3030 3030 0041 7262 776f     00FF.00000A.brow
   bd8e0:	006e 4646 4646 3030 3000 3041 3041 0030     n.FFFF00.0A0A00.
   bd8f0:	3030 4646 3030 3000 3030 3041 0030 726f     00FF00.000A00.or
   bd900:	6e61 6567 4600 3846 3030 0030 4130 3530     ange.FF8000.0A05
   bd910:	3030 7000 7275 6c70 0065 3032 3030 4646     00.purple.2000FF
   bd920:	3000 3032 3030 0041 6970 6b6e 4600 3846     .02000A.pink.FF8
   bd930:	3830 0030 4130 3530 3530 3600 3445 3030     080.0A0505.6E400
   bd940:	3030 2d31 3542 3341 462d 3933 2d33 3045     001-B5A3-F393-E0
   bd950:	3941 452d 3035 3245 4434 4343 3941 0045     A9-E50E24DCCA9E.
   bd960:	4536 3034 3030 3230 422d 4135 2d33 3346     6E400002-B5A3-F3
   bd970:	3339 452d 4130 2d39 3545 4530 3432 4344     93-E0A9-E50E24DC
   bd980:	4143 4539 3600 3445 3030 3030 2d33 3542     CA9E.6E400003-B5
   bd990:	3341 462d 3933 2d33 3045 3941 452d 3035     A3-F393-E0A9-E50
   bd9a0:	3245 4434 4343 3941 0045 7874 7200 0078     E24DCCA9E.tx.rx.
   bd9b0:	7274 6b65 742e 6568 6377 2e6c 6f63 006d     trek.thewcl.com.
   bd9c0:	6863 6369 6761 006f 6f6c 706f 7320 6174     chicago.loop sta
   bd9d0:	7472 2500 2c69 0020 6c2f 6f6f 2d70 7274     rt.%i, ./loop-tr
   bd9e0:	6361 736b 632f 6174 6c3f 6e69 7365 003d     acks/cta?lines=.
   bd9f0:	4547 0054 6170 7372 6e69 0067 6170 7372     GET.parsing.pars
   bda00:	6e69 2067 6166 6c69 6465 6c00 6e69 7365     ing failed.lines
   bda10:	7400 6172 6e69 0073 656e 7478 735f 6f74     .trains.next_sto
   bda20:	0070 6564 7473 6e69 7461 6f69 006e 6964     p.destination.di
   bda30:	6572 7463 6f69 006e 616c 6974 7574 6564     rection.latitude
   bda40:	6c00 6e6f 6967 7574 6564 6200 6572 6b61     .longitude.break
   bda50:	6900 206e 7267 6565 006e 7325 7220 6961     .in green.%s rai
   bda60:	206c 6170 7472 2520 3a69 0020               l part %i: .

000bda6c <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   bda74:	40b9 000b 40cd 000b 6341 6563 7470 2f00     .@...@..Accept./
   bda84:	2f2a 0000 0019 0000 0003 0000 0007 0000     */..............
   bda94:	0005 0000 000c 0000 0008 0000 0005 0000     ................
   bdaa4:	0005 0000 0005 0000 0019 0000 0005 0000     ................
   bdab4:	000f 0000 000a 0000 000a 0000 000a 0000     ................
   bdac4:	000a 0000 0014 0000 0000 0000 0028 0000     ............(...
   bdad4:	0000 0000 0002 0000 0006 0000 0000 0000     ................
   bdae4:	0000 0000 000f 0000 000a 0000 000a 0000     ................
   bdaf4:	000f 0000 000f 0000 000f 0000 0014 0000     ................
   bdb04:	0000 0000 0001 0000 0003 0000 0000 0000     ................
   bdb14:	0000 0000 000c 0000 0007 0000 0001 0000     ................
   bdb24:	000a 0000 000a 0000 000a 0000 000a 0000     ................
   bdb34:	000c 0000 0000 0000 0028 0000 0008 0000     ........(.......
   bdb44:	0003 0000 0007 0000 0001 0000 0003 0000     ................
   bdb54:	0007 0000 0007 0000 0006 0000 000a 0000     ................
   bdb64:	000a 0000 000a 0000 000a 0000 000e 0000     ................
   bdb74:	0000 0000 0028 0000 0006 0000 0003 0000     ....(...........
   bdb84:	0007 0000 0002 0000 0003 0000 4820 5454     ............ HTT
   bdb94:	2f50 2e31 0d30 000a 6c63 736f 0065 6f43     P/1.0...close.Co
   bdba4:	6e6e 6365 6974 6e6f 4800 534f 0054 6f43     nnection.HOST.Co
   bdbb4:	746e 6e65 2d74 654c 676e 6874 5000 534f     ntent-Length.POS
   bdbc4:	0054 0a0d 0a0d 2500 3430 0078               T......%04x.

000bdbd0 <_ZTV10JsonBuffer>:
	...
   bdbd8:	72a9 000b 72c5 000b                         .r...r..

000bdbe0 <_ZTV10JsonParser>:
	...
   bdbe8:	72d9 000b 72fd 000b                         .r...r..

000bdbf0 <_ZTV13JsonReference>:
	...
   bdbf8:	7299 000b 729b 000b 7341 6573 7472 6f69     .r...r..Assertio
   bdc08:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   bdc18:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   bdc28:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   bdc38:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   bdc48:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   bdc58:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   bdc68:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   bdc78:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   bdc88:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   bdc98:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   bdca8:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   bdcb8:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   bdcc8:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   bdcd8:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   bdce8:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   bdcf8:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   bdd08:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   bdd18:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   bdd28:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   bdd38:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   bdd48:	6369 002e                                   ic..

000bdd4c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdd54:	8135 000b 8199 000b 827f 000b 81c3 000b     5...............
   bdd64:	8139 000b                                   9...

000bdd68 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdd70:	8131 000b 81a7 000b 8133 000b 81c9 000b     1.......3.......
   bdd80:	8159 000b                                   Y...

000bdd84 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdd8c:	812f 000b 81b5 000b 8955 000b 81cf 000b     /.......U.......
   bdd9c:	8179 000b                                   y...

000bdda0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bddac:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bddbe <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bddbe:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bddce <_ZN8particle7BleUuid9BASE_UUIDE>:
   bddce:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000bdde0 <_ZTVN5spark13EthernetClassE>:
	...
   bdde8:	9403 000b 93f9 000b 93ef 000b 93e5 000b     ................
   bddf8:	93d9 000b 93cd 000b 9689 000b 9691 000b     ................
   bde08:	93c1 000b 93b9 000b 93af 000b 93a5 000b     ................
   bde18:	96c1 000b                                   ....

000bde1c <_ZTV7TwoWire>:
	...
   bde24:	9421 000b 946b 000b 9443 000b 9423 000b     !...k...C...#...
   bde34:	944b 000b 9453 000b 945b 000b 9463 000b     K...S...[...c...

000bde44 <_ZTV9IPAddress>:
	...
   bde4c:	952d 000b 951d 000b 951f 000b 7061 0070     -...........app.

000bde5c <_ZTVN5spark12NetworkClassE>:
	...
   bde64:	9649 000b 9653 000b 965d 000b 9667 000b     I...S...]...g...
   bde74:	9671 000b 967d 000b 9689 000b 9691 000b     q...}...........
   bde84:	9699 000b 96a5 000b 96ad 000b 96b7 000b     ................
   bde94:	96c1 000b 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   bdea4:	7265 6f72 2072 203d 6425 0000               error = %d..

000bdeb0 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdeb8:	9c3d 000b 9c61 000b a193 000b 9c6f 000b     =...a.......o...
   bdec8:	9c41 000b                                   A...

000bdecc <_ZTV9TCPClient>:
	...
   bded4:	9ced 000b 9d21 000b 9bb9 000b 9bd3 000b     ....!...........
   bdee4:	a029 000b 9bfd 000b 9e9f 000b 9c31 000b     )...........1...
   bdef4:	9f31 000b 9d71 000b 9ecd 000b a0dd 000b     1...q...........
   bdf04:	9e6d 000b 9c33 000b 9be5 000b 9c75 000b     m...3.......u...
   bdf14:	9d51 000b 5925 252d 2d6d 6425 2554 3a48     Q...%Y-%m-%dT%H:
   bdf24:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bdf34 <_ZTV11USARTSerial>:
	...
   bdf3c:	a1ad 000b a219 000b a1f1 000b 97ad 000b     ................
   bdf4c:	a1c1 000b a1dd 000b a1cf 000b a1eb 000b     ................
   bdf5c:	a1af 000b a1b3 000b                         ........

000bdf64 <_ZTV9USBSerial>:
	...
   bdf6c:	a257 000b a2bf 000b a295 000b 97ad 000b     W...............
   bdf7c:	a287 000b a259 000b a269 000b a2b9 000b     ....Y...i.......
   bdf8c:	a279 000b a251 000b                         y...Q...

000bdf94 <_ZTVN5spark9WiFiClassE>:
	...
   bdf9c:	a3b7 000b a3ad 000b a3a3 000b a359 000b     ............Y...
   bdfac:	a397 000b a38b 000b 9689 000b 9691 000b     ................
   bdfbc:	a37f 000b a377 000b a36d 000b a363 000b     ....w...m...c...
   bdfcc:	96c1 000b                                   ....

000bdfd0 <_ZSt7nothrow>:
	...

000bdfd1 <_ZTSSt19_Sp_make_shared_tag>:
   bdfd1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bdfe1:	6572 5f64 6174 0067 0000                     red_tag....

000bdfec <_ZTISt19_Sp_make_shared_tag>:
   bdfec:	e044 000b dfd1 000b 6162 6973 5f63 7473     D.......basic_st
   bdffc:	6972 676e 3a3a 4d5f 635f 6572 7461 0065     ring::_M_create.

000be00c <_ZTIN10__cxxabiv117__class_type_infoE>:
   be00c:	e0a4 000b e018 000b e0c8 000b               ............

000be018 <_ZTSN10__cxxabiv117__class_type_infoE>:
   be018:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   be028:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   be038:	0045 0000                                   E...

000be03c <_ZTVN10__cxxabiv117__class_type_infoE>:
   be03c:	0000 0000 e00c 000b a7ad 000b a7c1 000b     ................
   be04c:	a955 000b a955 000b a82b 000b a76d 000b     U...U...+...m...
   be05c:	a813 000b a7d5 000b a79f 000b               ............

000be068 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   be068:	e0a4 000b e074 000b e00c 000b               ....t.......

000be074 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   be074:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   be084:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   be094:	666e 456f 0000 0000                         nfoE....

000be09c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   be09c:	0000 0000 e068 000b a855 000b a869 000b     ....h...U...i...
   be0ac:	a955 000b a955 000b a82b 000b a76d 000b     U...U...+...m...
   be0bc:	a929 000b a8b5 000b a87d 000b               ).......}...

000be0c8 <_ZTISt9type_info>:
   be0c8:	e044 000b e0d0 000b                         D.......

000be0d0 <_ZTSSt9type_info>:
   be0d0:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   be0e0:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   be0f0:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   be100:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   be110:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   be120:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   be130:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   be140:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   be150:	6e69 7469 0079 6e61 0000 0000               inity.an....

000be15c <fpi.1>:
   be15c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   be16c:	0000 0000                                   ....

000be170 <fpinan.0>:
   be170:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000be188 <tinytens>:
   be188:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   be198:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   be1a8:	6f43 64ac 0628 1168                         Co.d(.h.

000be1b0 <_ctype_>:
   be1b0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   be1c0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   be1d0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   be1e0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   be1f0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   be200:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   be210:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   be220:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   be230:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   be2b0:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   be2c0:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   be2d0:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   be2e0:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   be2f0:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   be300:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   be310:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   be320:	632e 0000                                   .c..

000be324 <_C_numeric_locale>:
   be324:	dd4a 000b dbca 000b 5350 2003 0043 4f50     J.......PS. C.PO
   be334:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   be344:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   be354:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   be364:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   be374:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   be384:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   be394:	0000 0000                                   ....

000be398 <__mprec_bigtens>:
   be398:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   be3a8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   be3b8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000be3c0 <__mprec_tens>:
   be3c0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   be3d0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   be3e0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   be3f0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   be400:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   be410:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   be420:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   be430:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   be440:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   be450:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   be460:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   be470:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   be480:	9db4 79d9 7843 44ea                         ...yCx.D

000be488 <p05.0>:
   be488:	0005 0000 0019 0000 007d 0000               ........}...

000be494 <link_const_variable_data_end>:
   be494:	000b65f9 	.word	0x000b65f9
   be498:	000b9395 	.word	0x000b9395
   be49c:	000b940d 	.word	0x000b940d
   be4a0:	000b9639 	.word	0x000b9639
   be4a4:	000b9799 	.word	0x000b9799
   be4a8:	000b98d5 	.word	0x000b98d5
   be4ac:	000b9b95 	.word	0x000b9b95
   be4b0:	000ba199 	.word	0x000ba199
   be4b4:	000ba3c1 	.word	0x000ba3c1

000be4b8 <link_constructors_end>:
	...
