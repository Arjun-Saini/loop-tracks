
/Users/sainihome/Documents/GitHub/loop-tracks/master/target/3.3.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a490  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000be4b0  000be4b0  0000e4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000be4d4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  200352d4  000be4d8  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00009324  200354cc  200354cc  000254cc  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000be6d0  000be6d0  0001e6d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000be6f8  000be6f8  0001e6f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00145b3b  00000000  00000000  0001e6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00011ee3  00000000  00000000  00164237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004aa18  00000000  00000000  0017611a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003098  00000000  00000000  001c0b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d3e8  00000000  00000000  001c3bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034efe  00000000  00000000  001d0fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000426f3  00000000  00000000  00205eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00156878  00000000  00000000  002485a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a7f0  00000000  00000000  0039ee1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 fb01 	bl	bb638 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 fb23 	bl	bb688 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	200352d4 	.word	0x200352d4
   b404c:	000be4d8 	.word	0x000be4d8
   b4050:	200354cc 	.word	0x200354cc
   b4054:	200354cc 	.word	0x200354cc
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f006 fa67 	bl	ba534 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000be48c 	.word	0x000be48c
   b4080:	000be4b0 	.word	0x000be4b0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f002 b94a 	b.w	b631c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f002 fab3 	bl	b65f4 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f006 ba07 	b.w	ba4a4 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 bff1 	b.w	b807c <malloc>

000b409a <_Znaj>:
   b409a:	f003 bfef 	b.w	b807c <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f003 bff5 	b.w	b808c <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f003 bff3 	b.w	b808c <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40b8:	b510      	push	{r4, lr}
   b40ba:	4b03      	ldr	r3, [pc, #12]	; (b40c8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   b40bc:	6003      	str	r3, [r0, #0]
   b40be:	4604      	mov	r4, r0
   b40c0:	f003 f904 	bl	b72cc <_ZN10JsonParserD1Ev>
   b40c4:	4620      	mov	r0, r4
   b40c6:	bd10      	pop	{r4, pc}
   b40c8:	000bda6c 	.word	0x000bda6c

000b40cc <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   b40cc:	b510      	push	{r4, lr}
   b40ce:	4604      	mov	r4, r0
   b40d0:	f7ff fff2 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f246 51bc 	movw	r1, #26044	; 0x65bc
   b40da:	f7ff ffe2 	bl	b40a2 <_ZdlPvj>
   b40de:	4620      	mov	r0, r4
   b40e0:	bd10      	pop	{r4, pc}
	...

000b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   b40e4:	b508      	push	{r3, lr}
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b40e6:	4603      	mov	r3, r0
   b40e8:	b150      	cbz	r0, b4100 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x1c>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
	if (__n > this->_M_max_size())
   b40ea:	4a06      	ldr	r2, [pc, #24]	; (b4104 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x20>)
   b40ec:	4290      	cmp	r0, r2
   b40ee:	d901      	bls.n	b40f4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b40f0:	f006 faba 	bl	ba668 <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b40f4:	200c      	movs	r0, #12
   b40f6:	4358      	muls	r0, r3
      }
   b40f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b40fc:	f7ff bfcb 	b.w	b4096 <_Znwj>
   b4100:	bd08      	pop	{r3, pc}
   b4102:	bf00      	nop
   b4104:	0aaaaaaa 	.word	0x0aaaaaaa

000b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>:

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4108:	f100 0308 	add.w	r3, r0, #8
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b410c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b410e:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b4110:	6003      	str	r3, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b4112:	460d      	mov	r5, r1
   b4114:	b1d9      	cbz	r1, b414e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x46>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b4116:	4608      	mov	r0, r1
   b4118:	f007 fafe 	bl	bb718 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b411c:	280f      	cmp	r0, #15
   b411e:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4122:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4124:	d907      	bls.n	b4136 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b4126:	2200      	movs	r2, #0
   b4128:	a901      	add	r1, sp, #4
   b412a:	4620      	mov	r0, r4
   b412c:	f006 fab2 	bl	ba694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4130:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4132:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4134:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4136:	4632      	mov	r2, r6
   b4138:	4629      	mov	r1, r5
   b413a:	6820      	ldr	r0, [r4, #0]
   b413c:	f006 fae5 	bl	ba70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b4140:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b4142:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4144:	6063      	str	r3, [r4, #4]
   b4146:	2100      	movs	r1, #0
   b4148:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b414a:	b002      	add	sp, #8
   b414c:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b414e:	4801      	ldr	r0, [pc, #4]	; (b4154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x4c>)
   b4150:	f006 fa8d 	bl	ba66e <_ZSt19__throw_logic_errorPKc>
   b4154:	000bd79c 	.word	0x000bd79c

000b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4158:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b415a:	4603      	mov	r3, r0
   b415c:	b150      	cbz	r0, b4174 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b415e:	4a06      	ldr	r2, [pc, #24]	; (b4178 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x20>)
   b4160:	4290      	cmp	r0, r2
   b4162:	d901      	bls.n	b4168 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4164:	f006 fa80 	bl	ba668 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4168:	206c      	movs	r0, #108	; 0x6c
   b416a:	4358      	muls	r0, r3
      }
   b416c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4170:	f7ff bf91 	b.w	b4096 <_Znwj>
   b4174:	bd08      	pop	{r3, pc}
   b4176:	bf00      	nop
   b4178:	012f684b 	.word	0x012f684b

000b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b417c:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b417e:	4603      	mov	r3, r0
   b4180:	b150      	cbz	r0, b4198 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b4182:	4a06      	ldr	r2, [pc, #24]	; (b419c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x20>)
   b4184:	4290      	cmp	r0, r2
   b4186:	d901      	bls.n	b418c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4188:	f006 fa6e 	bl	ba668 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b418c:	2018      	movs	r0, #24
   b418e:	4358      	muls	r0, r3
      }
   b4190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4194:	f7ff bf7f 	b.w	b4096 <_Znwj>
   b4198:	bd08      	pop	{r3, pc}
   b419a:	bf00      	nop
   b419c:	05555555 	.word	0x05555555

000b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41a0:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41a2:	b148      	cbz	r0, b41b8 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41a4:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b41a8:	d301      	bcc.n	b41ae <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41aa:	f006 fa5d 	bl	ba668 <_ZSt17__throw_bad_allocv>
      }
   b41ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41b2:	0080      	lsls	r0, r0, #2
   b41b4:	f7ff bf6f 	b.w	b4096 <_Znwj>
   b41b8:	bd08      	pop	{r3, pc}

000b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41ba:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41bc:	b148      	cbz	r0, b41d2 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41be:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   b41c2:	d301      	bcc.n	b41c8 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41c4:	f006 fa50 	bl	ba668 <_ZSt17__throw_bad_allocv>
      }
   b41c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41cc:	00c0      	lsls	r0, r0, #3
   b41ce:	f7ff bf62 	b.w	b4096 <_Znwj>
   b41d2:	bd08      	pop	{r3, pc}

000b41d4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b41d4:	b570      	push	{r4, r5, r6, lr}
   b41d6:	4606      	mov	r6, r0
   b41d8:	460c      	mov	r4, r1
{
    if (base == 0) {
   b41da:	4615      	mov	r5, r2
   b41dc:	b92a      	cbnz	r2, b41ea <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b41de:	6803      	ldr	r3, [r0, #0]
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
   b41e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(n);
   b41e4:	689b      	ldr	r3, [r3, #8]
   b41e6:	b2c9      	uxtb	r1, r1
   b41e8:	4718      	bx	r3
        if (n < 0 && base == 10) {
   b41ea:	2900      	cmp	r1, #0
   b41ec:	da0b      	bge.n	b4206 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
   b41ee:	2a0a      	cmp	r2, #10
   b41f0:	d109      	bne.n	b4206 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
            t = print('-');
   b41f2:	212d      	movs	r1, #45	; 0x2d
   b41f4:	f005 fb00 	bl	b97f8 <_ZN5Print5printEc>
            val = -n;
   b41f8:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b41fa:	b2ea      	uxtb	r2, r5
   b41fc:	4630      	mov	r0, r6
}
   b41fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b4202:	f005 bb12 	b.w	b982a <_ZN5Print11printNumberEmh>
            val = n;
   b4206:	4621      	mov	r1, r4
   b4208:	e7f7      	b.n	b41fa <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x26>

000b420a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b420a:	b510      	push	{r4, lr}
   b420c:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b420e:	f7ff ffe1 	bl	b41d4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
        n += println();
   b4212:	4620      	mov	r0, r4
    }
   b4214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b4218:	f005 baf1 	b.w	b97fe <_ZN5Print7printlnEv>

000b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
   b421c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b421e:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b4222:	6003      	str	r3, [r0, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b4224:	e9d1 5300 	ldrd	r5, r3, [r1]
      basic_string(const basic_string& __str)
   b4228:	4604      	mov	r4, r0
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b422a:	18ee      	adds	r6, r5, r3
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   b422c:	b91d      	cbnz	r5, b4236 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
   b422e:	b116      	cbz	r6, b4236 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
	  std::__throw_logic_error(__N("basic_string::"
   b4230:	480c      	ldr	r0, [pc, #48]	; (b4264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x48>)
   b4232:	f006 fa1c 	bl	ba66e <_ZSt19__throw_logic_errorPKc>
	if (__dnew > size_type(_S_local_capacity))
   b4236:	2b0f      	cmp	r3, #15
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4238:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b423a:	d907      	bls.n	b424c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x30>
	    _M_data(_M_create(__dnew, size_type(0)));
   b423c:	2200      	movs	r2, #0
   b423e:	a901      	add	r1, sp, #4
   b4240:	4620      	mov	r0, r4
   b4242:	f006 fa27 	bl	ba694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4246:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4248:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b424a:	60a3      	str	r3, [r4, #8]
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b424c:	4632      	mov	r2, r6
   b424e:	4629      	mov	r1, r5
   b4250:	6820      	ldr	r0, [r4, #0]
   b4252:	f006 fa55 	bl	ba700 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
   b4256:	9b01      	ldr	r3, [sp, #4]
   b4258:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b425a:	6063      	str	r3, [r4, #4]
   b425c:	2100      	movs	r1, #0
   b425e:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b4260:	b002      	add	sp, #8
   b4262:	bd70      	pop	{r4, r5, r6, pc}
   b4264:	000bd79c 	.word	0x000bd79c

000b4268 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4268:	6803      	ldr	r3, [r0, #0]
   b426a:	b2c9      	uxtb	r1, r1
   b426c:	689b      	ldr	r3, [r3, #8]
   b426e:	4718      	bx	r3

000b4270 <_ZN5Print5writeEPKc.isra.0>:
    size_t write(const char *str) {
   b4270:	b513      	push	{r0, r1, r4, lr}
   b4272:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b4274:	b161      	cbz	r1, b4290 <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4276:	4608      	mov	r0, r1
   b4278:	9101      	str	r1, [sp, #4]
   b427a:	f007 fa4d 	bl	bb718 <strlen>
   b427e:	6823      	ldr	r3, [r4, #0]
   b4280:	9901      	ldr	r1, [sp, #4]
   b4282:	68db      	ldr	r3, [r3, #12]
   b4284:	4602      	mov	r2, r0
   b4286:	4620      	mov	r0, r4
    }
   b4288:	b002      	add	sp, #8
   b428a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b428e:	4718      	bx	r3
    }
   b4290:	b002      	add	sp, #8
   b4292:	bd10      	pop	{r4, pc}

000b4294 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   b4294:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b4296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4298:	4604      	mov	r4, r0
   b429a:	460d      	mov	r5, r1
      if (&__x != this)
   b429c:	d025      	beq.n	b42ea <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x56>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b429e:	e9d1 7100 	ldrd	r7, r1, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   b42a2:	6800      	ldr	r0, [r0, #0]
   b42a4:	68a3      	ldr	r3, [r4, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b42a6:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b42a8:	1a1b      	subs	r3, r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   b42aa:	429e      	cmp	r6, r3
   b42ac:	d91e      	bls.n	b42ec <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   b42ae:	10f0      	asrs	r0, r6, #3
   b42b0:	f7ff ff83 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
   b42b4:	2300      	movs	r3, #0
   b42b6:	4605      	mov	r5, r0
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   b42b8:	429e      	cmp	r6, r3
   b42ba:	d00a      	beq.n	b42d2 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x3e>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b42bc:	18ea      	adds	r2, r5, r3
   b42be:	bf1c      	itt	ne
   b42c0:	18f9      	addne	r1, r7, r3
   b42c2:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b42c6:	f103 0308 	add.w	r3, r3, #8
   b42ca:	bf18      	it	ne
   b42cc:	e9c2 0100 	strdne	r0, r1, [r2]
   b42d0:	e7f2      	b.n	b42b8 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x24>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b42d2:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b42d4:	b118      	cbz	r0, b42de <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x4a>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
   b42d6:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b42d8:	1a09      	subs	r1, r1, r0
   b42da:	f7ff fee2 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b42de:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b42e0:	4435      	add	r5, r6
   b42e2:	60a5      	str	r5, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b42e4:	6823      	ldr	r3, [r4, #0]
   b42e6:	4433      	add	r3, r6
   b42e8:	6063      	str	r3, [r4, #4]
	}
      return *this;
    }
   b42ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b42ec:	6862      	ldr	r2, [r4, #4]
   b42ee:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   b42f0:	4296      	cmp	r6, r2
   b42f2:	d806      	bhi.n	b4302 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x6e>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b42f4:	42b9      	cmp	r1, r7
   b42f6:	d0f5      	beq.n	b42e4 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b42f8:	4632      	mov	r2, r6
   b42fa:	4639      	mov	r1, r7
   b42fc:	f007 f9aa 	bl	bb654 <memmove>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4300:	e7f0      	b.n	b42e4 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	  if (_Num)
   b4302:	b112      	cbz	r2, b430a <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x76>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4304:	4639      	mov	r1, r7
   b4306:	f007 f9a5 	bl	bb654 <memmove>
   b430a:	e9d4 2700 	ldrd	r2, r7, [r4]
   b430e:	1abb      	subs	r3, r7, r2
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4310:	682a      	ldr	r2, [r5, #0]
   b4312:	686d      	ldr	r5, [r5, #4]
   b4314:	441a      	add	r2, r3
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b4316:	1aad      	subs	r5, r5, r2
					  __x._M_impl._M_finish,
   b4318:	2300      	movs	r3, #0
	      for (; __first != __last; ++__first, (void)++__cur)
   b431a:	429d      	cmp	r5, r3
   b431c:	d0e2      	beq.n	b42e4 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
   b431e:	eb17 0c03 	adds.w	ip, r7, r3
   b4322:	bf1c      	itt	ne
   b4324:	18d1      	addne	r1, r2, r3
   b4326:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b432a:	f103 0308 	add.w	r3, r3, #8
   b432e:	bf18      	it	ne
   b4330:	e9cc 0100 	strdne	r0, r1, [ip]
   b4334:	e7f1      	b.n	b431a <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x86>
	...

000b4338 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>:
      if (&__x != this)
   b4338:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b433a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b433e:	4604      	mov	r4, r0
   b4340:	468a      	mov	sl, r1
      if (&__x != this)
   b4342:	d036      	beq.n	b43b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7a>
   b4344:	e9d1 5b00 	ldrd	r5, fp, [r1]
			 - this->_M_impl._M_start); }
   b4348:	f8d0 9000 	ldr.w	r9, [r0]
   b434c:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b434e:	4a39      	ldr	r2, [pc, #228]	; (b4434 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xfc>)
   b4350:	ebab 0705 	sub.w	r7, fp, r5
			 - this->_M_impl._M_start); }
   b4354:	eba3 0309 	sub.w	r3, r3, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4358:	ea4f 08e7 	mov.w	r8, r7, asr #3
	  if (__xlen > capacity())
   b435c:	42bb      	cmp	r3, r7
   b435e:	fb02 f808 	mul.w	r8, r2, r8
   b4362:	d228      	bcs.n	b43b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7e>
	  pointer __result = this->_M_allocate(__n);
   b4364:	4640      	mov	r0, r8
   b4366:	f7ff ff09 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
   b436a:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b436c:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b436e:	45ab      	cmp	fp, r5
   b4370:	d00a      	beq.n	b4388 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x50>
   b4372:	f1b8 0f00 	cmp.w	r8, #0
   b4376:	d003      	beq.n	b4380 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x48>
   b4378:	4629      	mov	r1, r5
   b437a:	4640      	mov	r0, r8
   b437c:	f7ff ff4e 	bl	b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4380:	f108 0818 	add.w	r8, r8, #24
   b4384:	3518      	adds	r5, #24
   b4386:	e7f2      	b.n	b436e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x36>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4388:	e9d4 5800 	ldrd	r5, r8, [r4]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b438c:	45a8      	cmp	r8, r5
   b438e:	d004      	beq.n	b439a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x62>
      { _M_dispose(); }
   b4390:	4628      	mov	r0, r5
   b4392:	f006 f9a1 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4396:	3518      	adds	r5, #24
   b4398:	e7f8      	b.n	b438c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x54>
	      _M_deallocate(this->_M_impl._M_start,
   b439a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b439c:	b118      	cbz	r0, b43a6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x6e>
			    - this->_M_impl._M_start);
   b439e:	68a1      	ldr	r1, [r4, #8]
   b43a0:	1a09      	subs	r1, r1, r0
   b43a2:	f7ff fe7e 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b43a6:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b43a8:	443e      	add	r6, r7
   b43aa:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b43ac:	6823      	ldr	r3, [r4, #0]
   b43ae:	443b      	add	r3, r7
   b43b0:	6063      	str	r3, [r4, #4]
    }
   b43b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b43b6:	6846      	ldr	r6, [r0, #4]
   b43b8:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b43bc:	42b7      	cmp	r7, r6
   b43be:	d819      	bhi.n	b43f4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xbc>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b43c0:	4646      	mov	r6, r8
   b43c2:	46ca      	mov	sl, r9
   b43c4:	2e00      	cmp	r6, #0
   b43c6:	dd08      	ble.n	b43da <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xa2>
		  }
	      }
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
	  }
#endif
	this->_M_assign(__str);
   b43c8:	4629      	mov	r1, r5
   b43ca:	4650      	mov	r0, sl
   b43cc:	f006 f9a2 	bl	ba714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b43d0:	3518      	adds	r5, #24
	      ++__result;
   b43d2:	f10a 0a18 	add.w	sl, sl, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b43d6:	3e01      	subs	r6, #1
   b43d8:	e7f4      	b.n	b43c4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x8c>
   b43da:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   b43de:	2518      	movs	r5, #24
      : _M_current(__i) { }
   b43e0:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b43e2:	fb05 9508 	mla	r5, r5, r8, r9
	  for (; __first != __last; ++__first)
   b43e6:	42ae      	cmp	r6, r5
   b43e8:	d0e0      	beq.n	b43ac <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
      { _M_dispose(); }
   b43ea:	4628      	mov	r0, r5
   b43ec:	f006 f974 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b43f0:	3518      	adds	r5, #24
      {
	++_M_current;
	return *this;
   b43f2:	e7f8      	b.n	b43e6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xae>
   b43f4:	10f6      	asrs	r6, r6, #3
   b43f6:	4356      	muls	r6, r2
   b43f8:	2e00      	cmp	r6, #0
   b43fa:	dd08      	ble.n	b440e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xd6>
	this->_M_assign(__str);
   b43fc:	4629      	mov	r1, r5
   b43fe:	4648      	mov	r0, r9
   b4400:	f006 f988 	bl	ba714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b4404:	3518      	adds	r5, #24
	      ++__result;
   b4406:	f109 0918 	add.w	r9, r9, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b440a:	3e01      	subs	r6, #1
   b440c:	e7f4      	b.n	b43f8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xc0>
   b440e:	e9d4 5600 	ldrd	r5, r6, [r4]
   b4412:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4414:	f8da 5000 	ldr.w	r5, [sl]
					  __x._M_impl._M_finish,
   b4418:	f8da 8004 	ldr.w	r8, [sl, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b441c:	440d      	add	r5, r1
   b441e:	45a8      	cmp	r8, r5
   b4420:	d0c4      	beq.n	b43ac <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4422:	b11e      	cbz	r6, b442c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xf4>
   b4424:	4629      	mov	r1, r5
   b4426:	4630      	mov	r0, r6
   b4428:	f7ff fef8 	bl	b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b442c:	3518      	adds	r5, #24
   b442e:	3618      	adds	r6, #24
   b4430:	e7f5      	b.n	b441e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xe6>
   b4432:	bf00      	nop
   b4434:	aaaaaaab 	.word	0xaaaaaaab

000b4438 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4438:	b40e      	push	{r1, r2, r3}
   b443a:	b503      	push	{r0, r1, lr}
   b443c:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b443e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4440:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4444:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4446:	f005 fa0e 	bl	b9866 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b444a:	b002      	add	sp, #8
   b444c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4450:	b003      	add	sp, #12
   b4452:	4770      	bx	lr

000b4454 <_Z16randomizeAddressv>:
    Serial.println();
  }
}

//clears up conflicts with multiple i2c slaves having the same address
void randomizeAddress(){
   b4454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return *(this->_M_impl._M_start + __n);
   b4458:	f8df 82b4 	ldr.w	r8, [pc, #692]	; b4710 <_Z16randomizeAddressv+0x2bc>
  while(slaveCount != cities[cityIndex].slaveCountExpected){
   b445c:	4da2      	ldr	r5, [pc, #648]	; (b46e8 <_Z16randomizeAddressv+0x294>)
void randomizeAddress(){
   b445e:	b08d      	sub	sp, #52	; 0x34
  while(slaveCount != cities[cityIndex].slaveCountExpected){
   b4460:	4ba2      	ldr	r3, [pc, #648]	; (b46ec <_Z16randomizeAddressv+0x298>)
   b4462:	681a      	ldr	r2, [r3, #0]
   b4464:	f8d8 3000 	ldr.w	r3, [r8]
   b4468:	2128      	movs	r1, #40	; 0x28
   b446a:	fb01 3302 	mla	r3, r1, r2, r3
   b446e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b4470:	682b      	ldr	r3, [r5, #0]
   b4472:	429a      	cmp	r2, r3
   b4474:	f000 80ff 	beq.w	b4676 <_Z16randomizeAddressv+0x222>
    slaveCount = 0;
   b4478:	2300      	movs	r3, #0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b447a:	f8df 9298 	ldr.w	r9, [pc, #664]	; b4714 <_Z16randomizeAddressv+0x2c0>
   b447e:	f8df a298 	ldr.w	sl, [pc, #664]	; b4718 <_Z16randomizeAddressv+0x2c4>
      if(Wire.available() > 0){
        Serial.println("transmission recieved from: " + String(i));

        slaveCount++;

        String inputBuffer = "";
   b4482:	4f9b      	ldr	r7, [pc, #620]	; (b46f0 <_Z16randomizeAddressv+0x29c>)
    slaveCount = 0;
   b4484:	602b      	str	r3, [r5, #0]
    for(int i = 8; i <= 119; i++){
   b4486:	2408      	movs	r4, #8
      Serial.println("\nrequest code 1, address: " + String(i));
   b4488:	f005 ff3a 	bl	ba300 <_Z16_fetch_usbserialv>
   b448c:	4649      	mov	r1, r9
   b448e:	4606      	mov	r6, r0
   b4490:	a808      	add	r0, sp, #32
   b4492:	f005 fa6a 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
   b4496:	220a      	movs	r2, #10
   b4498:	4621      	mov	r1, r4
   b449a:	a804      	add	r0, sp, #16
   b449c:	f005 fabf 	bl	b9a1e <_ZN6StringC1Eih>
   b44a0:	a904      	add	r1, sp, #16
   b44a2:	a808      	add	r0, sp, #32
   b44a4:	f005 faf6 	bl	b9a94 <_ZplRK15StringSumHelperRK6String>
   b44a8:	6801      	ldr	r1, [r0, #0]
   b44aa:	4630      	mov	r0, r6
   b44ac:	f005 f9b3 	bl	b9816 <_ZN5Print7printlnEPKc>
   b44b0:	a804      	add	r0, sp, #16
   b44b2:	f005 fa0f 	bl	b98d4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b44b6:	a808      	add	r0, sp, #32
   b44b8:	f005 fa0c 	bl	b98d4 <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   b44bc:	f006 f86e 	bl	ba59c <_Z19__fetch_global_Wirev>
   b44c0:	4621      	mov	r1, r4
   b44c2:	f005 f81b 	bl	b94fc <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   b44c6:	f006 f869 	bl	ba59c <_Z19__fetch_global_Wirev>
   b44ca:	2131      	movs	r1, #49	; 0x31
   b44cc:	f7ff fecc 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b44d0:	fa5f fb84 	uxtb.w	fp, r4
   b44d4:	f006 f862 	bl	ba59c <_Z19__fetch_global_Wirev>
   b44d8:	f005 f817 	bl	b950a <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   b44dc:	f006 f85e 	bl	ba59c <_Z19__fetch_global_Wirev>
   b44e0:	2218      	movs	r2, #24
   b44e2:	4659      	mov	r1, fp
   b44e4:	f005 f803 	bl	b94ee <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   b44e8:	f006 f858 	bl	ba59c <_Z19__fetch_global_Wirev>
   b44ec:	6803      	ldr	r3, [r0, #0]
   b44ee:	691b      	ldr	r3, [r3, #16]
   b44f0:	4798      	blx	r3
   b44f2:	2800      	cmp	r0, #0
   b44f4:	f340 80ba 	ble.w	b466c <_Z16randomizeAddressv+0x218>
        Serial.println("transmission recieved from: " + String(i));
   b44f8:	f005 ff02 	bl	ba300 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b44fc:	4651      	mov	r1, sl
   b44fe:	4606      	mov	r6, r0
   b4500:	a808      	add	r0, sp, #32
   b4502:	f005 fa32 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
   b4506:	220a      	movs	r2, #10
   b4508:	4621      	mov	r1, r4
   b450a:	a804      	add	r0, sp, #16
   b450c:	f005 fa87 	bl	b9a1e <_ZN6StringC1Eih>
   b4510:	a904      	add	r1, sp, #16
   b4512:	a808      	add	r0, sp, #32
   b4514:	f005 fabe 	bl	b9a94 <_ZplRK15StringSumHelperRK6String>
   b4518:	6801      	ldr	r1, [r0, #0]
   b451a:	4630      	mov	r0, r6
   b451c:	f005 f97b 	bl	b9816 <_ZN5Print7printlnEPKc>
   b4520:	a804      	add	r0, sp, #16
   b4522:	f005 f9d7 	bl	b98d4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4526:	a808      	add	r0, sp, #32
   b4528:	f005 f9d4 	bl	b98d4 <_ZN6StringD1Ev>
        slaveCount++;
   b452c:	682b      	ldr	r3, [r5, #0]
        String inputBuffer = "";
   b452e:	4639      	mov	r1, r7
        slaveCount++;
   b4530:	3301      	adds	r3, #1
        String inputBuffer = "";
   b4532:	4668      	mov	r0, sp
        slaveCount++;
   b4534:	602b      	str	r3, [r5, #0]
        String inputBuffer = "";
   b4536:	f005 fa18 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
   b453a:	2618      	movs	r6, #24
        char c;
        for(int j = 0; j < 24; j++){
          c = Wire.read();
   b453c:	f006 f82e 	bl	ba59c <_Z19__fetch_global_Wirev>
   b4540:	6803      	ldr	r3, [r0, #0]
   b4542:	695b      	ldr	r3, [r3, #20]
   b4544:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b4546:	b2c1      	uxtb	r1, r0
   b4548:	4668      	mov	r0, sp
   b454a:	f005 fa96 	bl	b9a7a <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   b454e:	3e01      	subs	r6, #1
   b4550:	d1f4      	bne.n	b453c <_Z16randomizeAddressv+0xe8>
          inputBuffer += c;
        }
        Wire.beginTransmission(i);
   b4552:	f006 f823 	bl	ba59c <_Z19__fetch_global_Wirev>
   b4556:	4621      	mov	r1, r4
   b4558:	f004 ffd0 	bl	b94fc <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   b455c:	f006 f81e 	bl	ba59c <_Z19__fetch_global_Wirev>
   b4560:	9900      	ldr	r1, [sp, #0]
   b4562:	f7ff fe85 	bl	b4270 <_ZN5Print5writeEPKc.isra.0>
        Serial.println("device id: " + inputBuffer);
   b4566:	f005 fecb 	bl	ba300 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b456a:	4962      	ldr	r1, [pc, #392]	; (b46f4 <_Z16randomizeAddressv+0x2a0>)
   b456c:	4606      	mov	r6, r0
   b456e:	a808      	add	r0, sp, #32
   b4570:	f005 f9fb 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
   b4574:	4669      	mov	r1, sp
   b4576:	a808      	add	r0, sp, #32
   b4578:	f005 fa8c 	bl	b9a94 <_ZplRK15StringSumHelperRK6String>
   b457c:	6801      	ldr	r1, [r0, #0]
   b457e:	4630      	mov	r0, r6
   b4580:	f005 f949 	bl	b9816 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4584:	a808      	add	r0, sp, #32
   b4586:	f005 f9a5 	bl	b98d4 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b458a:	f006 f807 	bl	ba59c <_Z19__fetch_global_Wirev>
   b458e:	f004 ffbc 	bl	b950a <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   b4592:	f005 feb5 	bl	ba300 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4596:	4958      	ldr	r1, [pc, #352]	; (b46f8 <_Z16randomizeAddressv+0x2a4>)
   b4598:	4606      	mov	r6, r0
   b459a:	a808      	add	r0, sp, #32
   b459c:	f005 f9e5 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
   b45a0:	220a      	movs	r2, #10
   b45a2:	4621      	mov	r1, r4
   b45a4:	a804      	add	r0, sp, #16
   b45a6:	f005 fa3a 	bl	b9a1e <_ZN6StringC1Eih>
   b45aa:	a904      	add	r1, sp, #16
   b45ac:	a808      	add	r0, sp, #32
   b45ae:	f005 fa71 	bl	b9a94 <_ZplRK15StringSumHelperRK6String>
   b45b2:	6801      	ldr	r1, [r0, #0]
   b45b4:	4630      	mov	r0, r6
   b45b6:	f005 f92e 	bl	b9816 <_ZN5Print7printlnEPKc>
   b45ba:	a804      	add	r0, sp, #16
   b45bc:	f005 f98a 	bl	b98d4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45c0:	a808      	add	r0, sp, #32
   b45c2:	f005 f987 	bl	b98d4 <_ZN6StringD1Ev>

        Wire.beginTransmission(i);
   b45c6:	f005 ffe9 	bl	ba59c <_Z19__fetch_global_Wirev>
   b45ca:	4621      	mov	r1, r4
   b45cc:	f004 ff96 	bl	b94fc <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   b45d0:	f005 ffe4 	bl	ba59c <_Z19__fetch_global_Wirev>
   b45d4:	2132      	movs	r1, #50	; 0x32
   b45d6:	f7ff fe47 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b45da:	f005 ffdf 	bl	ba59c <_Z19__fetch_global_Wirev>
   b45de:	f004 ff94 	bl	b950a <_ZN7TwoWire15endTransmissionEv>

        Serial.println("request code 2, address: " + String(i));
   b45e2:	f005 fe8d 	bl	ba300 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b45e6:	4945      	ldr	r1, [pc, #276]	; (b46fc <_Z16randomizeAddressv+0x2a8>)
   b45e8:	4606      	mov	r6, r0
   b45ea:	a808      	add	r0, sp, #32
   b45ec:	f005 f9bd 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
   b45f0:	220a      	movs	r2, #10
   b45f2:	4621      	mov	r1, r4
   b45f4:	a804      	add	r0, sp, #16
   b45f6:	f005 fa12 	bl	b9a1e <_ZN6StringC1Eih>
   b45fa:	a904      	add	r1, sp, #16
   b45fc:	a808      	add	r0, sp, #32
   b45fe:	f005 fa49 	bl	b9a94 <_ZplRK15StringSumHelperRK6String>
   b4602:	6801      	ldr	r1, [r0, #0]
   b4604:	4630      	mov	r0, r6
   b4606:	f005 f906 	bl	b9816 <_ZN5Print7printlnEPKc>
   b460a:	a804      	add	r0, sp, #16
   b460c:	f005 f962 	bl	b98d4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4610:	a808      	add	r0, sp, #32
   b4612:	f005 f95f 	bl	b98d4 <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   b4616:	f005 ffc1 	bl	ba59c <_Z19__fetch_global_Wirev>
   b461a:	2204      	movs	r2, #4
   b461c:	4659      	mov	r1, fp
   b461e:	f004 ff66 	bl	b94ee <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   b4622:	4639      	mov	r1, r7
   b4624:	4668      	mov	r0, sp
   b4626:	f005 f9e8 	bl	b99fa <_ZN6StringaSEPKc>
   b462a:	2604      	movs	r6, #4
        for(int j = 0; j < 4; j++){
          inputBuffer += (char)Wire.read();
   b462c:	f005 ffb6 	bl	ba59c <_Z19__fetch_global_Wirev>
   b4630:	6803      	ldr	r3, [r0, #0]
   b4632:	695b      	ldr	r3, [r3, #20]
   b4634:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b4636:	b2c1      	uxtb	r1, r0
   b4638:	4668      	mov	r0, sp
   b463a:	f005 fa1e 	bl	b9a7a <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   b463e:	3e01      	subs	r6, #1
   b4640:	d1f4      	bne.n	b462c <_Z16randomizeAddressv+0x1d8>
        }
        
        Serial.println("conflict verification: " + inputBuffer);
   b4642:	f005 fe5d 	bl	ba300 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4646:	492e      	ldr	r1, [pc, #184]	; (b4700 <_Z16randomizeAddressv+0x2ac>)
   b4648:	4606      	mov	r6, r0
   b464a:	a808      	add	r0, sp, #32
   b464c:	f005 f98d 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
   b4650:	4669      	mov	r1, sp
   b4652:	a808      	add	r0, sp, #32
   b4654:	f005 fa1e 	bl	b9a94 <_ZplRK15StringSumHelperRK6String>
   b4658:	6801      	ldr	r1, [r0, #0]
   b465a:	4630      	mov	r0, r6
   b465c:	f005 f8db 	bl	b9816 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4660:	a808      	add	r0, sp, #32
   b4662:	f005 f937 	bl	b98d4 <_ZN6StringD1Ev>
        String inputBuffer = "";
   b4666:	4668      	mov	r0, sp
   b4668:	f005 f934 	bl	b98d4 <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   b466c:	3401      	adds	r4, #1
   b466e:	2c78      	cmp	r4, #120	; 0x78
   b4670:	f47f af0a 	bne.w	b4488 <_Z16randomizeAddressv+0x34>
   b4674:	e6f4      	b.n	b4460 <_Z16randomizeAddressv+0xc>
      }
    }
  }

  Serial.println("\nConnected to: ");
   b4676:	f005 fe43 	bl	ba300 <_Z16_fetch_usbserialv>
   b467a:	4922      	ldr	r1, [pc, #136]	; (b4704 <_Z16randomizeAddressv+0x2b0>)
    Wire.endTransmission();

    Wire.requestFrom(i, 24);
    if(Wire.available() > 0){
      Serial.print(i);
      Serial.print(", ");
   b467c:	4e22      	ldr	r6, [pc, #136]	; (b4708 <_Z16randomizeAddressv+0x2b4>)
   b467e:	4f23      	ldr	r7, [pc, #140]	; (b470c <_Z16randomizeAddressv+0x2b8>)
  Serial.println("\nConnected to: ");
   b4680:	f005 f8c9 	bl	b9816 <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   b4684:	2408      	movs	r4, #8
  int count = 0;
   b4686:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   b4688:	f005 ff88 	bl	ba59c <_Z19__fetch_global_Wirev>
   b468c:	4621      	mov	r1, r4
   b468e:	f004 ff35 	bl	b94fc <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   b4692:	f005 ff83 	bl	ba59c <_Z19__fetch_global_Wirev>
   b4696:	2131      	movs	r1, #49	; 0x31
   b4698:	f7ff fde6 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b469c:	f005 ff7e 	bl	ba59c <_Z19__fetch_global_Wirev>
   b46a0:	f004 ff33 	bl	b950a <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   b46a4:	f005 ff7a 	bl	ba59c <_Z19__fetch_global_Wirev>
   b46a8:	2218      	movs	r2, #24
   b46aa:	b2e1      	uxtb	r1, r4
   b46ac:	f004 ff1f 	bl	b94ee <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   b46b0:	f005 ff74 	bl	ba59c <_Z19__fetch_global_Wirev>
   b46b4:	6803      	ldr	r3, [r0, #0]
   b46b6:	691b      	ldr	r3, [r3, #16]
   b46b8:	4798      	blx	r3
   b46ba:	2800      	cmp	r0, #0
   b46bc:	dd0e      	ble.n	b46dc <_Z16randomizeAddressv+0x288>
      Serial.print(i);
   b46be:	f005 fe1f 	bl	ba300 <_Z16_fetch_usbserialv>
   b46c2:	220a      	movs	r2, #10
   b46c4:	4621      	mov	r1, r4
   b46c6:	f7ff fd85 	bl	b41d4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
      Serial.print(", ");
   b46ca:	f005 fe19 	bl	ba300 <_Z16_fetch_usbserialv>
   b46ce:	4631      	mov	r1, r6
   b46d0:	f005 f88e 	bl	b97f0 <_ZN5Print5printEPKc>

      addressArr[count++] = i;
   b46d4:	683b      	ldr	r3, [r7, #0]
   b46d6:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
   b46da:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   b46dc:	3401      	adds	r4, #1
   b46de:	2c78      	cmp	r4, #120	; 0x78
   b46e0:	d1d2      	bne.n	b4688 <_Z16randomizeAddressv+0x234>
    }
  }
}
   b46e2:	b00d      	add	sp, #52	; 0x34
   b46e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b46e8:	2003e6a8 	.word	0x2003e6a8
   b46ec:	200352d4 	.word	0x200352d4
   b46f0:	000bdbc2 	.word	0x000bdbc2
   b46f4:	000bd7fe 	.word	0x000bd7fe
   b46f8:	000bd80a 	.word	0x000bd80a
   b46fc:	000bd821 	.word	0x000bd821
   b4700:	000bd83b 	.word	0x000bd83b
   b4704:	000bd853 	.word	0x000bd853
   b4708:	000bd9d3 	.word	0x000bd9d3
   b470c:	20035524 	.word	0x20035524
   b4710:	20035610 	.word	0x20035610
   b4714:	000bd7c6 	.word	0x000bd7c6
   b4718:	000bd7e1 	.word	0x000bd7e1

000b471c <_Z17acquireWireBufferv>:
    }
  }
  bleCount++;
}

hal_i2c_config_t acquireWireBuffer() {
   b471c:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b471e:	f44f 7500 	mov.w	r5, #512	; 0x200
   b4722:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b4724:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b4726:	6003      	str	r3, [r0, #0]
   b4728:	6085      	str	r5, [r0, #8]
   b472a:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b472c:	4905      	ldr	r1, [pc, #20]	; (b4744 <_Z17acquireWireBufferv+0x28>)
   b472e:	4628      	mov	r0, r5
   b4730:	f005 ff98 	bl	ba664 <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4734:	4903      	ldr	r1, [pc, #12]	; (b4744 <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b4736:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4738:	4628      	mov	r0, r5
   b473a:	f005 ff93 	bl	ba664 <_ZnajRKSt9nothrow_t>
    };
   b473e:	60e0      	str	r0, [r4, #12]
    return config;
   b4740:	4620      	mov	r0, r4
   b4742:	bd38      	pop	{r3, r4, r5, pc}
   b4744:	000bdfc8 	.word	0x000bdfc8

000b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4748:	b510      	push	{r4, lr}
   b474a:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b474c:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b474e:	b118      	cbz	r0, b4758 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4750:	68a1      	ldr	r1, [r4, #8]
   b4752:	1a09      	subs	r1, r1, r0
   b4754:	f7ff fca5 	bl	b40a2 <_ZdlPvj>
      }
   b4758:	4620      	mov	r0, r4
   b475a:	bd10      	pop	{r4, pc}

000b475c <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b475c:	b510      	push	{r4, lr}
   b475e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4760:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4762:	b118      	cbz	r0, b476c <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4764:	68a1      	ldr	r1, [r4, #8]
   b4766:	1a09      	subs	r1, r1, r0
   b4768:	f7ff fc9b 	bl	b40a2 <_ZdlPvj>
      }
   b476c:	4620      	mov	r0, r4
   b476e:	bd10      	pop	{r4, pc}

000b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4770:	b510      	push	{r4, lr}
   b4772:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4774:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4776:	b118      	cbz	r0, b4780 <_ZNSt12_Vector_baseIiSaIiEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4778:	68a1      	ldr	r1, [r4, #8]
   b477a:	1a09      	subs	r1, r1, r0
   b477c:	f7ff fc91 	bl	b40a2 <_ZdlPvj>
      }
   b4780:	4620      	mov	r0, r4
   b4782:	bd10      	pop	{r4, pc}

000b4784 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
   b4784:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
   b4786:	680d      	ldr	r5, [r1, #0]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4788:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
   b478a:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
   b478e:	6005      	str	r5, [r0, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
   b4790:	b085      	sub	sp, #20
	  _M_finish = __x._M_finish;
   b4792:	684d      	ldr	r5, [r1, #4]
   b4794:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4796:	688d      	ldr	r5, [r1, #8]
   b4798:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
   b479a:	2300      	movs	r3, #0
	  _M_end_of_storage = __x._M_end_of_storage;
   b479c:	6085      	str	r5, [r0, #8]
	  _M_finish = __x._M_finish;
   b479e:	e9c1 3300 	strd	r3, r3, [r1]
	  _M_end_of_storage = __x._M_end_of_storage;
   b47a2:	608b      	str	r3, [r1, #8]
      }
   b47a4:	a801      	add	r0, sp, #4
	  _M_finish = __x._M_finish;
   b47a6:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
   b47aa:	f7ff ffe1 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      }
   b47ae:	b005      	add	sp, #20
   b47b0:	bd30      	pop	{r4, r5, pc}

000b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b47b2:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b47b4:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b47b8:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   b47ba:	42ae      	cmp	r6, r5
   b47bc:	d004      	beq.n	b47c8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x16>
      { _M_dispose(); }
   b47be:	4628      	mov	r0, r5
   b47c0:	f005 ff8a 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b47c4:	3518      	adds	r5, #24
   b47c6:	e7f8      	b.n	b47ba <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b47c8:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b47ca:	b118      	cbz	r0, b47d4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b47cc:	68a1      	ldr	r1, [r4, #8]
   b47ce:	1a09      	subs	r1, r1, r0
   b47d0:	f7ff fc67 	bl	b40a2 <_ZdlPvj>
      }
   b47d4:	4620      	mov	r0, r4
   b47d6:	bd70      	pop	{r4, r5, r6, pc}

000b47d8 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>:

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b47d8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      vector(size_type __n, const value_type& __value,
   b47dc:	b570      	push	{r4, r5, r6, lr}
   b47de:	4604      	mov	r4, r0
   b47e0:	460d      	mov	r5, r1
   b47e2:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b47e4:	d302      	bcc.n	b47ec <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x14>
	  __throw_length_error(
   b47e6:	480c      	ldr	r0, [pc, #48]	; (b4818 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x40>)
   b47e8:	f005 ff44 	bl	ba674 <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47ec:	2300      	movs	r3, #0
   b47ee:	e9c0 3300 	strd	r3, r3, [r0]
   b47f2:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b47f4:	4608      	mov	r0, r1
   b47f6:	f7ff fcd3 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47fa:	eb00 0385 	add.w	r3, r0, r5, lsl #2
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b47fe:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4802:	60a3      	str	r3, [r4, #8]
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   b4804:	b12d      	cbz	r5, b4812 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   b4806:	6832      	ldr	r2, [r6, #0]
      for (; __first != __last; ++__first)
   b4808:	4283      	cmp	r3, r0
   b480a:	d002      	beq.n	b4812 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
	*__first = __tmp;
   b480c:	f840 2b04 	str.w	r2, [r0], #4
      for (; __first != __last; ++__first)
   b4810:	e7fa      	b.n	b4808 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x30>
	this->_M_impl._M_finish =
   b4812:	6060      	str	r0, [r4, #4]
      { _M_fill_initialize(__n, __value); }
   b4814:	4620      	mov	r0, r4
   b4816:	bd70      	pop	{r4, r5, r6, pc}
   b4818:	000bd863 	.word	0x000bd863

000b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   b481c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4820:	2400      	movs	r4, #0
      vector(initializer_list<value_type> __l,
   b4822:	ab02      	add	r3, sp, #8
   b4824:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4828:	e9c0 4400 	strd	r4, r4, [r0]
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   b482c:	4613      	mov	r3, r2
      vector(initializer_list<value_type> __l,
   b482e:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4830:	6084      	str	r4, [r0, #8]
   b4832:	00d7      	lsls	r7, r2, #3
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b4834:	f342 001c 	sbfx	r0, r2, #0, #29
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4838:	4a10      	ldr	r2, [pc, #64]	; (b487c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x60>)
   b483a:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   b483e:	4688      	mov	r8, r1
   b4840:	d202      	bcs.n	b4848 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x2c>
	  __throw_length_error(
   b4842:	480f      	ldr	r0, [pc, #60]	; (b4880 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x64>)
   b4844:	f005 ff16 	bl	ba674 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4848:	f7ff fcb7 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b484c:	19c6      	adds	r6, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b484e:	4602      	mov	r2, r0
   b4850:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4852:	60ae      	str	r6, [r5, #8]
   b4854:	4623      	mov	r3, r4
   b4856:	429f      	cmp	r7, r3
   b4858:	d00b      	beq.n	b4872 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x56>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b485a:	18d4      	adds	r4, r2, r3
   b485c:	bf1c      	itt	ne
   b485e:	eb08 0103 	addne.w	r1, r8, r3
   b4862:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b4866:	f103 0308 	add.w	r3, r3, #8
   b486a:	bf18      	it	ne
   b486c:	e9c4 0100 	strdne	r0, r1, [r4]
   b4870:	e7f1      	b.n	b4856 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x3a>
      }
   b4872:	4628      	mov	r0, r5
	  this->_M_impl._M_finish =
   b4874:	606e      	str	r6, [r5, #4]
      }
   b4876:	b002      	add	sp, #8
   b4878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b487c:	7ffffff8 	.word	0x7ffffff8
   b4880:	000bd863 	.word	0x000bd863

000b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>:
      vector(initializer_list<value_type> __l,
   b4884:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4888:	ab02      	add	r3, sp, #8
   b488a:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b488e:	2300      	movs	r3, #0
   b4890:	e9c0 3300 	strd	r3, r3, [r0]
   b4894:	6083      	str	r3, [r0, #8]
   b4896:	4616      	mov	r6, r2
   b4898:	2318      	movs	r3, #24
   b489a:	435e      	muls	r6, r3
   b489c:	4b10      	ldr	r3, [pc, #64]	; (b48e0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x5c>)
      vector(initializer_list<value_type> __l,
   b489e:	4604      	mov	r4, r0
   b48a0:	10f0      	asrs	r0, r6, #3
   b48a2:	4358      	muls	r0, r3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b48a4:	4b0f      	ldr	r3, [pc, #60]	; (b48e4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x60>)
   b48a6:	429e      	cmp	r6, r3
   b48a8:	460f      	mov	r7, r1
   b48aa:	eb01 0806 	add.w	r8, r1, r6
   b48ae:	d902      	bls.n	b48b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x32>
	  __throw_length_error(
   b48b0:	480d      	ldr	r0, [pc, #52]	; (b48e8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x64>)
   b48b2:	f005 fedf 	bl	ba674 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b48b6:	f7ff fc61 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b48ba:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b48bc:	4605      	mov	r5, r0
   b48be:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b48c0:	60a6      	str	r6, [r4, #8]
   b48c2:	45b8      	cmp	r8, r7
   b48c4:	d007      	beq.n	b48d6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x52>
   b48c6:	b11d      	cbz	r5, b48d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x4c>
   b48c8:	4639      	mov	r1, r7
   b48ca:	4628      	mov	r0, r5
   b48cc:	f7ff fca6 	bl	b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b48d0:	3718      	adds	r7, #24
   b48d2:	3518      	adds	r5, #24
   b48d4:	e7f5      	b.n	b48c2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x3e>
      }
   b48d6:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
   b48d8:	6065      	str	r5, [r4, #4]
      }
   b48da:	b002      	add	sp, #8
   b48dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b48e0:	aaaaaaab 	.word	0xaaaaaaab
   b48e4:	7ffffff8 	.word	0x7ffffff8
   b48e8:	000bd863 	.word	0x000bd863

000b48ec <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b48ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48ee:	e9d1 3700 	ldrd	r3, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48f2:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48f4:	1aff      	subs	r7, r7, r3
      vector(const vector& __x)
   b48f6:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48f8:	e9c0 5500 	strd	r5, r5, [r0]
   b48fc:	6085      	str	r5, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48fe:	10f8      	asrs	r0, r7, #3
      vector(const vector& __x)
   b4900:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4902:	f7ff fc5a 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4906:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b490a:	4407      	add	r7, r0
   b490c:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b490e:	e9d6 7600 	ldrd	r7, r6, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4912:	4602      	mov	r2, r0
   b4914:	1bf6      	subs	r6, r6, r7
      : _M_current(__i) { }
   b4916:	462b      	mov	r3, r5
   b4918:	42b3      	cmp	r3, r6
   b491a:	eb02 0503 	add.w	r5, r2, r3
   b491e:	d006      	beq.n	b492e <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x42>
   b4920:	b11d      	cbz	r5, b492a <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x3e>
   b4922:	18f9      	adds	r1, r7, r3
   b4924:	c903      	ldmia	r1, {r0, r1}
   b4926:	e885 0003 	stmia.w	r5, {r0, r1}
   b492a:	3308      	adds	r3, #8
   b492c:	e7f4      	b.n	b4918 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b492e:	6065      	str	r5, [r4, #4]
      }
   b4930:	4620      	mov	r0, r4
   b4932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
   b4934:	b508      	push	{r3, lr}
      { return _M_string_length; }
   b4936:	6842      	ldr	r2, [r0, #4]
	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
    { return (__lhs.size() == __rhs.size()
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b4938:	684b      	ldr	r3, [r1, #4]
   b493a:	429a      	cmp	r2, r3
   b493c:	d108      	bne.n	b4950 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1c>
	if (__n == 0)
   b493e:	b14a      	cbz	r2, b4954 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x20>
	return __builtin_memcmp(__s1, __s2, __n);
   b4940:	6809      	ldr	r1, [r1, #0]
   b4942:	6800      	ldr	r0, [r0, #0]
   b4944:	f006 fe68 	bl	bb618 <memcmp>
   b4948:	fab0 f080 	clz	r0, r0
   b494c:	0940      	lsrs	r0, r0, #5
						    __lhs.size())); }
   b494e:	bd08      	pop	{r3, pc}
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b4950:	2000      	movs	r0, #0
   b4952:	e7fc      	b.n	b494e <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>
   b4954:	2001      	movs	r0, #1
   b4956:	e7fa      	b.n	b494e <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>

000b4958 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b495c:	b0a3      	sub	sp, #140	; 0x8c
   b495e:	460c      	mov	r4, r1
   b4960:	4606      	mov	r6, r0
  String inputBuffer = "";
   b4962:	499f      	ldr	r1, [pc, #636]	; (b4be0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x288>)
   b4964:	a803      	add	r0, sp, #12
   b4966:	f005 f800 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
  String nameBuffer;
   b496a:	499d      	ldr	r1, [pc, #628]	; (b4be0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x288>)
   b496c:	a807      	add	r0, sp, #28
   b496e:	f004 fffc 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
  for(int i = 0; i < len - 1; i++){
   b4972:	2500      	movs	r5, #0
   b4974:	3c01      	subs	r4, #1
   b4976:	42ac      	cmp	r4, r5
   b4978:	d905      	bls.n	b4986 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
	String & operator += (char c)			{concat(c); return (*this);}
   b497a:	5d71      	ldrb	r1, [r6, r5]
   b497c:	a803      	add	r0, sp, #12
   b497e:	f005 f87c 	bl	b9a7a <_ZN6String6concatEc>
   b4982:	3501      	adds	r5, #1
   b4984:	e7f7      	b.n	b4976 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e>
  switch(bleCount){
   b4986:	4c97      	ldr	r4, [pc, #604]	; (b4be4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28c>)
  Serial.println(inputBuffer);
   b4988:	f005 fcba 	bl	ba300 <_Z16_fetch_usbserialv>
   b498c:	9903      	ldr	r1, [sp, #12]
   b498e:	f004 ff42 	bl	b9816 <_ZN5Print7printlnEPKc>
  switch(bleCount){
   b4992:	6823      	ldr	r3, [r4, #0]
   b4994:	2b01      	cmp	r3, #1
   b4996:	d014      	beq.n	b49c2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6a>
   b4998:	2b02      	cmp	r3, #2
   b499a:	d041      	beq.n	b4a20 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc8>
      nameBuffer = inputBuffer;
   b499c:	a903      	add	r1, sp, #12
  switch(bleCount){
   b499e:	2b00      	cmp	r3, #0
   b49a0:	f040 80a7 	bne.w	b4af2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x19a>
      SSID = inputBuffer;
   b49a4:	4890      	ldr	r0, [pc, #576]	; (b4be8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x290>)
   b49a6:	f005 f811 	bl	b99cc <_ZN6StringaSERKS_>
  bleCount++;
   b49aa:	6823      	ldr	r3, [r4, #0]
  String nameBuffer;
   b49ac:	a807      	add	r0, sp, #28
  bleCount++;
   b49ae:	3301      	adds	r3, #1
   b49b0:	6023      	str	r3, [r4, #0]
  String nameBuffer;
   b49b2:	f004 ff8f 	bl	b98d4 <_ZN6StringD1Ev>
  String inputBuffer = "";
   b49b6:	a803      	add	r0, sp, #12
   b49b8:	f004 ff8c 	bl	b98d4 <_ZN6StringD1Ev>
}
   b49bc:	b023      	add	sp, #140	; 0x8c
   b49be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      password = inputBuffer;
   b49c2:	4d8a      	ldr	r5, [pc, #552]	; (b4bec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x294>)
   b49c4:	a903      	add	r1, sp, #12
   b49c6:	4628      	mov	r0, r5
   b49c8:	f005 f800 	bl	b99cc <_ZN6StringaSERKS_>
	const char * c_str() const { return buffer; }
   b49cc:	4b86      	ldr	r3, [pc, #536]	; (b4be8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x290>)
   b49ce:	682e      	ldr	r6, [r5, #0]
   b49d0:	f8d3 8000 	ldr.w	r8, [r3]
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b49d4:	f1b8 0f00 	cmp.w	r8, #0
   b49d8:	d01e      	beq.n	b4a18 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc0>
   b49da:	4640      	mov	r0, r8
   b49dc:	f006 fe9c 	bl	bb718 <strlen>
   b49e0:	4607      	mov	r7, r0
   b49e2:	b1de      	cbz	r6, b4a1c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc4>
   b49e4:	4630      	mov	r0, r6
   b49e6:	f006 fe97 	bl	bb718 <strlen>
   b49ea:	4605      	mov	r5, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b49ec:	2238      	movs	r2, #56	; 0x38
   b49ee:	2100      	movs	r1, #0
   b49f0:	a814      	add	r0, sp, #80	; 0x50
   b49f2:	f006 fe49 	bl	bb688 <memset>
        creds.size = sizeof(creds);
   b49f6:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b49f8:	e9cd 380f 	strd	r3, r8, [sp, #60]	; 0x3c
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b49fc:	487c      	ldr	r0, [pc, #496]	; (b4bf0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x298>)
        creds.password_len = passwordLen;
   b49fe:	9513      	str	r5, [sp, #76]	; 0x4c
        creds.security = WLanSecurityType(security);
   b4a00:	2303      	movs	r3, #3
   b4a02:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a06:	2300      	movs	r3, #0
   b4a08:	aa0f      	add	r2, sp, #60	; 0x3c
   b4a0a:	4619      	mov	r1, r3
   b4a0c:	6840      	ldr	r0, [r0, #4]
        creds.password = password;
   b4a0e:	e9cd 7611 	strd	r7, r6, [sp, #68]	; 0x44
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a12:	f003 fb03 	bl	b801c <network_set_credentials>
   b4a16:	e7c8      	b.n	b49aa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x52>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4a18:	4647      	mov	r7, r8
   b4a1a:	e7e2      	b.n	b49e2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8a>
   b4a1c:	4635      	mov	r5, r6
   b4a1e:	e7e5      	b.n	b49ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4a20:	4d74      	ldr	r5, [pc, #464]	; (b4bf4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x29c>)
   b4a22:	4f75      	ldr	r7, [pc, #468]	; (b4bf8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a0>)
  switch(bleCount){
   b4a24:	2600      	movs	r6, #0
   b4a26:	e9d5 2300 	ldrd	r2, r3, [r5]
   b4a2a:	1a9b      	subs	r3, r3, r2
   b4a2c:	10db      	asrs	r3, r3, #3
   b4a2e:	437b      	muls	r3, r7
      for(int i = 0; i < cities.size(); i++){
   b4a30:	42b3      	cmp	r3, r6
   b4a32:	d913      	bls.n	b4a5c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x104>
      { return _M_dataplus._M_p; }
   b4a34:	2328      	movs	r3, #40	; 0x28
   b4a36:	fb03 2206 	mla	r2, r3, r6, r2
        if(inputBuffer == String(cities[i].name.c_str())){
   b4a3a:	a80f      	add	r0, sp, #60	; 0x3c
   b4a3c:	68d1      	ldr	r1, [r2, #12]
   b4a3e:	f004 ff94 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4a42:	a90f      	add	r1, sp, #60	; 0x3c
   b4a44:	a803      	add	r0, sp, #12
   b4a46:	f005 f846 	bl	b9ad6 <_ZNK6String6equalsERKS_>
   b4a4a:	4680      	mov	r8, r0
   b4a4c:	a80f      	add	r0, sp, #60	; 0x3c
   b4a4e:	f004 ff41 	bl	b98d4 <_ZN6StringD1Ev>
   b4a52:	f1b8 0f00 	cmp.w	r8, #0
   b4a56:	d009      	beq.n	b4a6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x114>
          cityIndex = i;
   b4a58:	4b68      	ldr	r3, [pc, #416]	; (b4bfc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a4>)
   b4a5a:	601e      	str	r6, [r3, #0]
      if(cityIndex == -1){
   b4a5c:	4f67      	ldr	r7, [pc, #412]	; (b4bfc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a4>)
   b4a5e:	683b      	ldr	r3, [r7, #0]
   b4a60:	1c5a      	adds	r2, r3, #1
   b4a62:	d105      	bne.n	b4a70 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x118>
          bleCount--;
   b4a64:	6823      	ldr	r3, [r4, #0]
   b4a66:	3b01      	subs	r3, #1
   b4a68:	6023      	str	r3, [r4, #0]
          break;
   b4a6a:	e79e      	b.n	b49aa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x52>
      for(int i = 0; i < cities.size(); i++){
   b4a6c:	3601      	adds	r6, #1
   b4a6e:	e7da      	b.n	b4a26 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xce>
	return *(this->_M_impl._M_start + __n);
   b4a70:	682a      	ldr	r2, [r5, #0]
   b4a72:	2628      	movs	r6, #40	; 0x28
   b4a74:	4373      	muls	r3, r6
   b4a76:	18d1      	adds	r1, r2, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4a78:	58d3      	ldr	r3, [r2, r3]
   b4a7a:	6849      	ldr	r1, [r1, #4]
   b4a7c:	1ac9      	subs	r1, r1, r3
   b4a7e:	4b60      	ldr	r3, [pc, #384]	; (b4c00 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a8>)
   b4a80:	1089      	asrs	r1, r1, #2
   b4a82:	4359      	muls	r1, r3
      sequenceArr = std::vector<int>(cities[cityIndex].railways.size() * 2, 0);
   b4a84:	aa0b      	add	r2, sp, #44	; 0x2c
   b4a86:	ab02      	add	r3, sp, #8
   b4a88:	f04f 0800 	mov.w	r8, #0
   b4a8c:	0049      	lsls	r1, r1, #1
   b4a8e:	a80f      	add	r0, sp, #60	; 0x3c
   b4a90:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   b4a94:	f7ff fea0 	bl	b47d8 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4a98:	a90f      	add	r1, sp, #60	; 0x3c
   b4a9a:	485a      	ldr	r0, [pc, #360]	; (b4c04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ac>)
   b4a9c:	f7ff fe72 	bl	b4784 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>
      }
   b4aa0:	a80f      	add	r0, sp, #60	; 0x3c
   b4aa2:	f7ff fe65 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
	return *(this->_M_impl._M_start + __n);
   b4aa6:	683a      	ldr	r2, [r7, #0]
      addressArr = std::vector<int>(cities[cityIndex].slaveCountExpected, 0);
   b4aa8:	682b      	ldr	r3, [r5, #0]
   b4aaa:	4d57      	ldr	r5, [pc, #348]	; (b4c08 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>)
   b4aac:	fb06 3602 	mla	r6, r6, r2, r3
   b4ab0:	a80f      	add	r0, sp, #60	; 0x3c
   b4ab2:	aa0b      	add	r2, sp, #44	; 0x2c
   b4ab4:	ab02      	add	r3, sp, #8
   b4ab6:	6a71      	ldr	r1, [r6, #36]	; 0x24
   b4ab8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   b4abc:	f7ff fe8c 	bl	b47d8 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4ac0:	a90f      	add	r1, sp, #60	; 0x3c
   b4ac2:	4628      	mov	r0, r5
   b4ac4:	f7ff fe5e 	bl	b4784 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>
      }
   b4ac8:	a80f      	add	r0, sp, #60	; 0x3c
   b4aca:	f7ff fe51 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      randomizeAddress();
   b4ace:	f7ff fcc1 	bl	b4454 <_Z16randomizeAddressv>
      Wire.beginTransmission(addressArr[0]);
   b4ad2:	f005 fd63 	bl	ba59c <_Z19__fetch_global_Wirev>
   b4ad6:	682b      	ldr	r3, [r5, #0]
   b4ad8:	6819      	ldr	r1, [r3, #0]
   b4ada:	f004 fd0f 	bl	b94fc <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('3');
   b4ade:	f005 fd5d 	bl	ba59c <_Z19__fetch_global_Wirev>
   b4ae2:	2133      	movs	r1, #51	; 0x33
   b4ae4:	f7ff fbc0 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4ae8:	f005 fd58 	bl	ba59c <_Z19__fetch_global_Wirev>
   b4aec:	f004 fd0d 	bl	b950a <_ZN7TwoWire15endTransmissionEv>
      break;
   b4af0:	e75b      	b.n	b49aa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x52>
      if(index < cities[cityIndex].railways.size()){
   b4af2:	4f42      	ldr	r7, [pc, #264]	; (b4bfc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a4>)
	return *(this->_M_impl._M_start + __n);
   b4af4:	f8df 80fc 	ldr.w	r8, [pc, #252]	; b4bf4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x29c>
      nameBuffer = inputBuffer;
   b4af8:	a807      	add	r0, sp, #28
   b4afa:	f004 ff67 	bl	b99cc <_ZN6StringaSERKS_>
      if(index < cities[cityIndex].railways.size()){
   b4afe:	6839      	ldr	r1, [r7, #0]
   b4b00:	f8d8 0000 	ldr.w	r0, [r8]
      int index = bleCount - 3;
   b4b04:	6826      	ldr	r6, [r4, #0]
   b4b06:	2228      	movs	r2, #40	; 0x28
   b4b08:	434a      	muls	r2, r1
   b4b0a:	1883      	adds	r3, r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4b0c:	5882      	ldr	r2, [r0, r2]
   b4b0e:	685b      	ldr	r3, [r3, #4]
   b4b10:	1a9b      	subs	r3, r3, r2
   b4b12:	4a3b      	ldr	r2, [pc, #236]	; (b4c00 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a8>)
   b4b14:	109b      	asrs	r3, r3, #2
   b4b16:	3e03      	subs	r6, #3
   b4b18:	4353      	muls	r3, r2
      if(index < cities[cityIndex].railways.size()){
   b4b1a:	429e      	cmp	r6, r3
   b4b1c:	f080 80d7 	bcs.w	b4cce <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x376>
        if(cityIndex == 0 && (inputBuffer == "green1" || inputBuffer == "green2")){
   b4b20:	b981      	cbnz	r1, b4b44 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ec>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4b22:	493a      	ldr	r1, [pc, #232]	; (b4c0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b4>)
   b4b24:	a803      	add	r0, sp, #12
   b4b26:	f004 ffe3 	bl	b9af0 <_ZNK6String6equalsEPKc>
   b4b2a:	b370      	cbz	r0, b4b8a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x232>
          nameBuffer = String(greenLineCTA.name.c_str());
   b4b2c:	4b38      	ldr	r3, [pc, #224]	; (b4c10 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   b4b2e:	a80f      	add	r0, sp, #60	; 0x3c
   b4b30:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4b32:	f004 ff1a 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
   b4b36:	a90f      	add	r1, sp, #60	; 0x3c
   b4b38:	a807      	add	r0, sp, #28
   b4b3a:	f004 ff56 	bl	b99ea <_ZN6StringaSEOS_>
   b4b3e:	a80f      	add	r0, sp, #60	; 0x3c
   b4b40:	f004 fec8 	bl	b98d4 <_ZN6StringD1Ev>
            railwayIndex = i;
   b4b44:	f8df b0d4 	ldr.w	fp, [pc, #212]	; b4c1c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c4>
  switch(bleCount){
   b4b48:	f04f 0a00 	mov.w	sl, #0
	return *(this->_M_impl._M_start + __n);
   b4b4c:	f04f 0928 	mov.w	r9, #40	; 0x28
        for(int i = 0; i < cities[cityIndex].railways.size(); i++){
   b4b50:	683d      	ldr	r5, [r7, #0]
   b4b52:	f8d8 0000 	ldr.w	r0, [r8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4b56:	4b2a      	ldr	r3, [pc, #168]	; (b4c00 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a8>)
	return *(this->_M_impl._M_start + __n);
   b4b58:	fb09 f105 	mul.w	r1, r9, r5
   b4b5c:	1842      	adds	r2, r0, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4b5e:	5841      	ldr	r1, [r0, r1]
   b4b60:	6852      	ldr	r2, [r2, #4]
   b4b62:	1a52      	subs	r2, r2, r1
   b4b64:	1092      	asrs	r2, r2, #2
   b4b66:	435a      	muls	r2, r3
   b4b68:	4552      	cmp	r2, sl
   b4b6a:	d959      	bls.n	b4c20 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c8>
          if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4b6c:	b9a5      	cbnz	r5, b4b98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x240>
   b4b6e:	4b29      	ldr	r3, [pc, #164]	; (b4c14 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2bc>)
   b4b70:	a80b      	add	r0, sp, #44	; 0x2c
   b4b72:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4b74:	f004 fef9 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
   b4b78:	a90b      	add	r1, sp, #44	; 0x2c
   b4b7a:	a807      	add	r0, sp, #28
   b4b7c:	f004 ffab 	bl	b9ad6 <_ZNK6String6equalsERKS_>
   b4b80:	b360      	cbz	r0, b4bdc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x284>
   b4b82:	a80b      	add	r0, sp, #44	; 0x2c
   b4b84:	f004 fea6 	bl	b98d4 <_ZN6StringD1Ev>
   b4b88:	e022      	b.n	b4bd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4b8a:	4923      	ldr	r1, [pc, #140]	; (b4c18 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c0>)
   b4b8c:	a803      	add	r0, sp, #12
   b4b8e:	f004 ffaf 	bl	b9af0 <_ZNK6String6equalsEPKc>
        if(cityIndex == 0 && (inputBuffer == "green1" || inputBuffer == "green2")){
   b4b92:	2800      	cmp	r0, #0
   b4b94:	d1ca      	bne.n	b4b2c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1d4>
   b4b96:	e7d5      	b.n	b4b44 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1ec>
          if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4b98:	2200      	movs	r2, #0
	return *(this->_M_impl._M_start + __n);
   b4b9a:	6839      	ldr	r1, [r7, #0]
   b4b9c:	f8d8 0000 	ldr.w	r0, [r8]
   b4ba0:	9201      	str	r2, [sp, #4]
   b4ba2:	fb09 f101 	mul.w	r1, r9, r1
   b4ba6:	5841      	ldr	r1, [r0, r1]
   b4ba8:	206c      	movs	r0, #108	; 0x6c
   b4baa:	fb00 110a 	mla	r1, r0, sl, r1
   b4bae:	a80f      	add	r0, sp, #60	; 0x3c
   b4bb0:	6b09      	ldr	r1, [r1, #48]	; 0x30
   b4bb2:	f004 feda 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4bb6:	a907      	add	r1, sp, #28
   b4bb8:	a80f      	add	r0, sp, #60	; 0x3c
   b4bba:	f004 ff8c 	bl	b9ad6 <_ZNK6String6equalsERKS_>
   b4bbe:	1e05      	subs	r5, r0, #0
   b4bc0:	a80f      	add	r0, sp, #60	; 0x3c
   b4bc2:	bf18      	it	ne
   b4bc4:	2501      	movne	r5, #1
   b4bc6:	f004 fe85 	bl	b98d4 <_ZN6StringD1Ev>
   b4bca:	9a01      	ldr	r2, [sp, #4]
   b4bcc:	2a00      	cmp	r2, #0
   b4bce:	d1d8      	bne.n	b4b82 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x22a>
   b4bd0:	b10d      	cbz	r5, b4bd6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x27e>
            railwayIndex = i;
   b4bd2:	f8cb a000 	str.w	sl, [fp]
        for(int i = 0; i < cities[cityIndex].railways.size(); i++){
   b4bd6:	f10a 0a01 	add.w	sl, sl, #1
   b4bda:	e7b9      	b.n	b4b50 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1f8>
          if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4bdc:	2201      	movs	r2, #1
   b4bde:	e7dc      	b.n	b4b9a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x242>
   b4be0:	000bdbc2 	.word	0x000bdbc2
   b4be4:	20035530 	.word	0x20035530
   b4be8:	200354cc 	.word	0x200354cc
   b4bec:	2003e4e0 	.word	0x2003e4e0
   b4bf0:	2003e718 	.word	0x2003e718
   b4bf4:	20035610 	.word	0x20035610
   b4bf8:	cccccccd 	.word	0xcccccccd
   b4bfc:	200352d4 	.word	0x200352d4
   b4c00:	684bda13 	.word	0x684bda13
   b4c04:	2003e69c 	.word	0x2003e69c
   b4c08:	20035524 	.word	0x20035524
   b4c0c:	000bd894 	.word	0x000bd894
   b4c10:	20035628 	.word	0x20035628
   b4c14:	2003e55c 	.word	0x2003e55c
   b4c18:	000bd89b 	.word	0x000bd89b
   b4c1c:	200352e8 	.word	0x200352e8
        if(railwayIndex == -1){
   b4c20:	f8df b1b4 	ldr.w	fp, [pc, #436]	; b4dd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x480>
   b4c24:	f8db 3000 	ldr.w	r3, [fp]
   b4c28:	3301      	adds	r3, #1
   b4c2a:	f43f af1b 	beq.w	b4a64 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>
   b4c2e:	00b3      	lsls	r3, r6, #2
   b4c30:	f8df a1a8 	ldr.w	sl, [pc, #424]	; b4ddc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x484>
   b4c34:	9301      	str	r3, [sp, #4]
        for(int i = 0; i < 2; i++){
   b4c36:	2500      	movs	r5, #0
          if(cities[cityIndex].railways[railwayIndex].outputs[i].size() == 0 || (cityIndex == 0 && cities[cityIndex].railways[railwayIndex].name == purpleLineCTA.name)){
   b4c38:	6839      	ldr	r1, [r7, #0]
   b4c3a:	f8d8 2000 	ldr.w	r2, [r8]
   b4c3e:	f8db 3000 	ldr.w	r3, [fp]
   b4c42:	2028      	movs	r0, #40	; 0x28
   b4c44:	4348      	muls	r0, r1
   b4c46:	ea4f 0943 	mov.w	r9, r3, lsl #1
   b4c4a:	5810      	ldr	r0, [r2, r0]
   b4c4c:	226c      	movs	r2, #108	; 0x6c
   b4c4e:	fb02 0003 	mla	r0, r2, r3, r0
   b4c52:	220c      	movs	r2, #12
   b4c54:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
   b4c58:	436a      	muls	r2, r5
   b4c5a:	eb0c 0e02 	add.w	lr, ip, r2
   b4c5e:	f85c 2002 	ldr.w	r2, [ip, r2]
   b4c62:	f8de e004 	ldr.w	lr, [lr, #4]
   b4c66:	4596      	cmp	lr, r2
   b4c68:	d007      	beq.n	b4c7a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x322>
   b4c6a:	2900      	cmp	r1, #0
   b4c6c:	d157      	bne.n	b4d1e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c6>
   b4c6e:	494f      	ldr	r1, [pc, #316]	; (b4dac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x454>)
   b4c70:	3030      	adds	r0, #48	; 0x30
   b4c72:	f7ff fe5f 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b4c76:	2800      	cmp	r0, #0
   b4c78:	d051      	beq.n	b4d1e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c6>
            sequenceArr[2 * railwayIndex + i] = 0;
   b4c7a:	f8da 2000 	ldr.w	r2, [sl]
   b4c7e:	44a9      	add	r9, r5
   b4c80:	2100      	movs	r1, #0
   b4c82:	f842 1029 	str.w	r1, [r2, r9, lsl #2]
        for(int i = 0; i < 2; i++){
   b4c86:	2d00      	cmp	r5, #0
   b4c88:	d047      	beq.n	b4d1a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c2>
   b4c8a:	4d49      	ldr	r5, [pc, #292]	; (b4db0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x458>)
        Wire.beginTransmission(addressArr[index]);
   b4c8c:	f005 fc86 	bl	ba59c <_Z19__fetch_global_Wirev>
   b4c90:	682b      	ldr	r3, [r5, #0]
   b4c92:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   b4c96:	f004 fc31 	bl	b94fc <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('4');
   b4c9a:	f005 fc7f 	bl	ba59c <_Z19__fetch_global_Wirev>
   b4c9e:	2134      	movs	r1, #52	; 0x34
   b4ca0:	f7ff fae2 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b4ca4:	f005 fc7a 	bl	ba59c <_Z19__fetch_global_Wirev>
   b4ca8:	f004 fc2f 	bl	b950a <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(addressArr[index + 1]);
   b4cac:	f005 fc76 	bl	ba59c <_Z19__fetch_global_Wirev>
   b4cb0:	9a01      	ldr	r2, [sp, #4]
   b4cb2:	682b      	ldr	r3, [r5, #0]
   b4cb4:	4413      	add	r3, r2
   b4cb6:	6859      	ldr	r1, [r3, #4]
   b4cb8:	f004 fc20 	bl	b94fc <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('3');
   b4cbc:	f005 fc6e 	bl	ba59c <_Z19__fetch_global_Wirev>
   b4cc0:	2133      	movs	r1, #51	; 0x33
   b4cc2:	f7ff fad1 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b4cc6:	f005 fc69 	bl	ba59c <_Z19__fetch_global_Wirev>
   b4cca:	f004 fc1e 	bl	b950a <_ZN7TwoWire15endTransmissionEv>
   b4cce:	683a      	ldr	r2, [r7, #0]
   b4cd0:	f8d8 1000 	ldr.w	r1, [r8]
   b4cd4:	2328      	movs	r3, #40	; 0x28
   b4cd6:	435a      	muls	r2, r3
   b4cd8:	188b      	adds	r3, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4cda:	588a      	ldr	r2, [r1, r2]
   b4cdc:	685b      	ldr	r3, [r3, #4]
   b4cde:	1a9b      	subs	r3, r3, r2
   b4ce0:	4a34      	ldr	r2, [pc, #208]	; (b4db4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x45c>)
   b4ce2:	109b      	asrs	r3, r3, #2
   b4ce4:	4353      	muls	r3, r2
      if(index == cities[cityIndex].railways.size() - 1){
   b4ce6:	3b01      	subs	r3, #1
   b4ce8:	429e      	cmp	r6, r3
   b4cea:	f47f ae5e 	bne.w	b49aa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x52>
        Serial.println("BLE finished");
   b4cee:	f005 fb07 	bl	ba300 <_Z16_fetch_usbserialv>
   b4cf2:	4931      	ldr	r1, [pc, #196]	; (b4db8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x460>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4cf4:	4d31      	ldr	r5, [pc, #196]	; (b4dbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x464>)
   b4cf6:	f004 fd8e 	bl	b9816 <_ZN5Print7printlnEPKc>
        userInput = true;
   b4cfa:	4b31      	ldr	r3, [pc, #196]	; (b4dc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x468>)
        network_on(*this, 0, 0, NULL);
   b4cfc:	6868      	ldr	r0, [r5, #4]
   b4cfe:	2201      	movs	r2, #1
   b4d00:	701a      	strb	r2, [r3, #0]
   b4d02:	2300      	movs	r3, #0
   b4d04:	461a      	mov	r2, r3
   b4d06:	4619      	mov	r1, r3
   b4d08:	f003 f960 	bl	b7fcc <network_on>
        network_connect(*this, flags, 0, NULL);
   b4d0c:	2300      	movs	r3, #0
   b4d0e:	6868      	ldr	r0, [r5, #4]
   b4d10:	461a      	mov	r2, r3
   b4d12:	4619      	mov	r1, r3
   b4d14:	f003 f93a 	bl	b7f8c <network_connect>
    }
   b4d18:	e647      	b.n	b49aa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x52>
   b4d1a:	2501      	movs	r5, #1
   b4d1c:	e78c      	b.n	b4c38 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e0>
            sequenceArr[2 * railwayIndex + i] = addressArr[index];
   b4d1e:	4b24      	ldr	r3, [pc, #144]	; (b4db0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x458>)
   b4d20:	681a      	ldr	r2, [r3, #0]
   b4d22:	9b01      	ldr	r3, [sp, #4]
	return *(this->_M_impl._M_start + __n);
   b4d24:	44a9      	add	r9, r5
   b4d26:	58d1      	ldr	r1, [r2, r3]
   b4d28:	f8da 2000 	ldr.w	r2, [sl]
   b4d2c:	f842 1029 	str.w	r1, [r2, r9, lsl #2]
            if(cityIndex == 0){
   b4d30:	683a      	ldr	r2, [r7, #0]
   b4d32:	2a00      	cmp	r2, #0
   b4d34:	d1a7      	bne.n	b4c86 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x32e>
              if(inputBuffer == String(brownLineCTA.name.c_str())){
   b4d36:	4b23      	ldr	r3, [pc, #140]	; (b4dc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x46c>)
   b4d38:	a80f      	add	r0, sp, #60	; 0x3c
   b4d3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4d3c:	f004 fe15 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
   b4d40:	a90f      	add	r1, sp, #60	; 0x3c
   b4d42:	a803      	add	r0, sp, #12
   b4d44:	f004 fec7 	bl	b9ad6 <_ZNK6String6equalsERKS_>
   b4d48:	4681      	mov	r9, r0
   b4d4a:	a80f      	add	r0, sp, #60	; 0x3c
   b4d4c:	f004 fdc2 	bl	b98d4 <_ZN6StringD1Ev>
   b4d50:	f1b9 0f00 	cmp.w	r9, #0
   b4d54:	d00a      	beq.n	b4d6c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x414>
              brownLineCTAAdr = sequenceArr[2 * railwayIndex + i];
   b4d56:	f8db 2000 	ldr.w	r2, [fp]
   b4d5a:	f8da 1000 	ldr.w	r1, [sl]
   b4d5e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   b4d62:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   b4d66:	4a18      	ldr	r2, [pc, #96]	; (b4dc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x470>)
                greenLineCTAAdr[0] = sequenceArr[2 * railwayIndex];
   b4d68:	6011      	str	r1, [r2, #0]
   b4d6a:	e78c      	b.n	b4c86 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x32e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4d6c:	4917      	ldr	r1, [pc, #92]	; (b4dcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x474>)
   b4d6e:	a803      	add	r0, sp, #12
   b4d70:	f004 febe 	bl	b9af0 <_ZNK6String6equalsEPKc>
              }else if(inputBuffer == "green1"){
   b4d74:	b138      	cbz	r0, b4d86 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x42e>
                greenLineCTAAdr[0] = sequenceArr[2 * railwayIndex];
   b4d76:	f8da 2000 	ldr.w	r2, [sl]
   b4d7a:	f8db 1000 	ldr.w	r1, [fp]
   b4d7e:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
   b4d82:	4a13      	ldr	r2, [pc, #76]	; (b4dd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x478>)
   b4d84:	e7f0      	b.n	b4d68 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x410>
   b4d86:	4913      	ldr	r1, [pc, #76]	; (b4dd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x47c>)
   b4d88:	a803      	add	r0, sp, #12
   b4d8a:	f004 feb1 	bl	b9af0 <_ZNK6String6equalsEPKc>
              }else if(inputBuffer == "green2"){
   b4d8e:	2800      	cmp	r0, #0
   b4d90:	f43f af79 	beq.w	b4c86 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x32e>
                greenLineCTAAdr[1] = sequenceArr[2 * railwayIndex + 1];
   b4d94:	f8db 2000 	ldr.w	r2, [fp]
   b4d98:	f8da 1000 	ldr.w	r1, [sl]
   b4d9c:	0052      	lsls	r2, r2, #1
   b4d9e:	3201      	adds	r2, #1
   b4da0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   b4da4:	4a0a      	ldr	r2, [pc, #40]	; (b4dd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x478>)
   b4da6:	6051      	str	r1, [r2, #4]
   b4da8:	e76d      	b.n	b4c86 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x32e>
   b4daa:	bf00      	nop
   b4dac:	2003e58c 	.word	0x2003e58c
   b4db0:	20035524 	.word	0x20035524
   b4db4:	684bda13 	.word	0x684bda13
   b4db8:	000bd8a2 	.word	0x000bd8a2
   b4dbc:	2003e718 	.word	0x2003e718
   b4dc0:	2003e6b4 	.word	0x2003e6b4
   b4dc4:	200355a0 	.word	0x200355a0
   b4dc8:	2003560c 	.word	0x2003560c
   b4dcc:	000bd894 	.word	0x000bd894
   b4dd0:	20035694 	.word	0x20035694
   b4dd4:	000bd89b 	.word	0x000bd89b
   b4dd8:	200352e8 	.word	0x200352e8
   b4ddc:	2003e69c 	.word	0x2003e69c

000b4de0 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4de0:	2900      	cmp	r1, #0
      _M_create_storage(size_t __n)
   b4de2:	b538      	push	{r3, r4, r5, lr}
   b4de4:	4604      	mov	r4, r0
      _M_allocate(size_t __n)
   b4de6:	ea4f 0581 	mov.w	r5, r1, lsl #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4dea:	d00c      	beq.n	b4e06 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x26>
	if (__n > this->_M_max_size())
   b4dec:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   b4df0:	d301      	bcc.n	b4df6 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
   b4df2:	f005 fc39 	bl	ba668 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4df6:	4628      	mov	r0, r5
   b4df8:	f7ff f94d 	bl	b4096 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4dfc:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4e00:	4428      	add	r0, r5
   b4e02:	60a0      	str	r0, [r4, #8]
      }
   b4e04:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4e06:	4608      	mov	r0, r1
   b4e08:	e7f8      	b.n	b4dfc <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x1c>

000b4e0a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4e0a:	b538      	push	{r3, r4, r5, lr}
   b4e0c:	4604      	mov	r4, r0
   b4e0e:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b4e10:	42ac      	cmp	r4, r5
   b4e12:	d004      	beq.n	b4e1e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x14>
      }
   b4e14:	4620      	mov	r0, r4
   b4e16:	f7ff fcab 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4e1a:	340c      	adds	r4, #12
   b4e1c:	e7f8      	b.n	b4e10 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x6>
	    std::_Destroy(std::__addressof(*__first));
	}
   b4e1e:	bd38      	pop	{r3, r4, r5, pc}

000b4e20 <_ZN7RailwayD1Ev>:
#include "Checkpoint.cpp"
#include <string>

//container for all data for each rail line
class Railway{
   b4e20:	b510      	push	{r4, lr}
   b4e22:	4604      	mov	r4, r0
   b4e24:	3048      	adds	r0, #72	; 0x48
   b4e26:	f7ff fcc4 	bl	b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b4e2a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b4e2e:	f005 fc53 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   b4e32:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b4e36:	f7ff ffe8 	bl	b4e0a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	_M_deallocate(_M_impl._M_start,
   b4e3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b4e3c:	b118      	cbz	r0, b4e46 <_ZN7RailwayD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4e3e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	::operator delete(__p
   b4e40:	1a09      	subs	r1, r1, r0
   b4e42:	f7ff f92e 	bl	b40a2 <_ZdlPvj>
      }
   b4e46:	f104 0018 	add.w	r0, r4, #24
   b4e4a:	f7ff fc91 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4e4e:	f104 000c 	add.w	r0, r4, #12
   b4e52:	f7ff fc83 	bl	b475c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4e56:	4620      	mov	r0, r4
   b4e58:	f7ff fc76 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b4e5c:	4620      	mov	r0, r4
   b4e5e:	bd10      	pop	{r4, pc}

000b4e60 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4e60:	b538      	push	{r3, r4, r5, lr}
   b4e62:	4604      	mov	r4, r0
   b4e64:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b4e66:	42ac      	cmp	r4, r5
   b4e68:	d004      	beq.n	b4e74 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_+0x14>
      __pointer->~_Tp();
   b4e6a:	4620      	mov	r0, r4
   b4e6c:	f7ff ffd8 	bl	b4e20 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b4e70:	346c      	adds	r4, #108	; 0x6c
   b4e72:	e7f8      	b.n	b4e66 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_+0x6>
	}
   b4e74:	bd38      	pop	{r3, r4, r5, pc}

000b4e76 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b4e76:	b510      	push	{r4, lr}
   b4e78:	4604      	mov	r4, r0
	__destroy(__first, __last);
   b4e7a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4e7e:	f7ff ffef 	bl	b4e60 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   b4e82:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4e84:	b118      	cbz	r0, b4e8e <_ZNSt6vectorI7RailwaySaIS0_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4e86:	68a1      	ldr	r1, [r4, #8]
   b4e88:	1a09      	subs	r1, r1, r0
   b4e8a:	f7ff f90a 	bl	b40a2 <_ZdlPvj>
      }
   b4e8e:	4620      	mov	r0, r4
   b4e90:	bd10      	pop	{r4, pc}

000b4e92 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4e92:	b538      	push	{r3, r4, r5, lr}
   b4e94:	4604      	mov	r4, r0
   b4e96:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b4e98:	42ac      	cmp	r4, r5
   b4e9a:	d008      	beq.n	b4eae <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_+0x1c>
   b4e9c:	f104 000c 	add.w	r0, r4, #12
   b4ea0:	f005 fc1a 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#include "Railway.cpp"

class City{
   b4ea4:	4620      	mov	r0, r4
   b4ea6:	f7ff ffe6 	bl	b4e76 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b4eaa:	3428      	adds	r4, #40	; 0x28
   b4eac:	e7f4      	b.n	b4e98 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_+0x6>
	}
   b4eae:	bd38      	pop	{r3, r4, r5, pc}

000b4eb0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b4eb0:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b4eb2:	b510      	push	{r4, lr}
   b4eb4:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b4eb6:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b4eba:	d005      	beq.n	b4ec8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4ebc:	4601      	mov	r1, r0
   b4ebe:	4622      	mov	r2, r4
   b4ec0:	4618      	mov	r0, r3
   b4ec2:	f006 fbc7 	bl	bb654 <memmove>
   b4ec6:	4603      	mov	r3, r0
	}
   b4ec8:	1918      	adds	r0, r3, r4
   b4eca:	bd10      	pop	{r4, pc}

000b4ecc <_ZNSt6vectorIiSaIiEEC1ERKS1_>:
      vector(const vector& __x)
   b4ecc:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4ece:	e9d1 3600 	ldrd	r3, r6, [r1]
   b4ed2:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4ed4:	2300      	movs	r3, #0
      vector(const vector& __x)
   b4ed6:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4ed8:	e9c0 3300 	strd	r3, r3, [r0]
   b4edc:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4ede:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   b4ee0:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4ee2:	f7ff f95d 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4ee6:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4eea:	4406      	add	r6, r0
   b4eec:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4eee:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
   b4ef0:	e9d5 0100 	ldrd	r0, r1, [r5]
   b4ef4:	f7ff ffdc 	bl	b4eb0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
   b4ef8:	6060      	str	r0, [r4, #4]
      }
   b4efa:	4620      	mov	r0, r4
   b4efc:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>:
      vector(initializer_list<value_type> __l,
   b4f00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b4f02:	ab04      	add	r3, sp, #16
   b4f04:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4f08:	2300      	movs	r3, #0
   b4f0a:	e9c0 3300 	strd	r3, r3, [r0]
   b4f0e:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b4f10:	4604      	mov	r4, r0
   b4f12:	4613      	mov	r3, r2
   b4f14:	460e      	mov	r6, r1
   b4f16:	0095      	lsls	r5, r2, #2
   b4f18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b4f1c:	f342 001d 	sbfx	r0, r2, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4f20:	4a0a      	ldr	r2, [pc, #40]	; (b4f4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x4c>)
   b4f22:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b4f26:	d202      	bcs.n	b4f2e <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x2e>
	  __throw_length_error(
   b4f28:	4809      	ldr	r0, [pc, #36]	; (b4f50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x50>)
   b4f2a:	f005 fba3 	bl	ba674 <_ZSt20__throw_length_errorPKc>
   b4f2e:	9101      	str	r1, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4f30:	f7ff f936 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4f34:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4f36:	4602      	mov	r2, r0
   b4f38:	6020      	str	r0, [r4, #0]
   b4f3a:	9901      	ldr	r1, [sp, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4f3c:	60a5      	str	r5, [r4, #8]
   b4f3e:	4630      	mov	r0, r6
   b4f40:	f7ff ffb6 	bl	b4eb0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
   b4f44:	6060      	str	r0, [r4, #4]
      }
   b4f46:	b004      	add	sp, #16
   b4f48:	bd70      	pop	{r4, r5, r6, pc}
   b4f4a:	bf00      	nop
   b4f4c:	7ffffffc 	.word	0x7ffffffc
   b4f50:	000bd863 	.word	0x000bd863

000b4f54 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>:
      if (&__x != this)
   b4f54:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b4f56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4f58:	4604      	mov	r4, r0
   b4f5a:	460d      	mov	r5, r1
      if (&__x != this)
   b4f5c:	d01d      	beq.n	b4f9a <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x46>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f5e:	e9d1 7100 	ldrd	r7, r1, [r1]
			 - this->_M_impl._M_start); }
   b4f62:	6802      	ldr	r2, [r0, #0]
   b4f64:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f66:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b4f68:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b4f6a:	429e      	cmp	r6, r3
   b4f6c:	d917      	bls.n	b4f9e <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x4a>
	  pointer __result = this->_M_allocate(__n);
   b4f6e:	10b0      	asrs	r0, r6, #2
   b4f70:	9101      	str	r1, [sp, #4]
   b4f72:	f7ff f915 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
   b4f76:	9901      	ldr	r1, [sp, #4]
   b4f78:	4602      	mov	r2, r0
   b4f7a:	4605      	mov	r5, r0
   b4f7c:	4638      	mov	r0, r7
   b4f7e:	f7ff ff97 	bl	b4eb0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4f82:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4f84:	b118      	cbz	r0, b4f8e <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x3a>
			    - this->_M_impl._M_start);
   b4f86:	68a1      	ldr	r1, [r4, #8]
   b4f88:	1a09      	subs	r1, r1, r0
   b4f8a:	f7ff f88a 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4f8e:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4f90:	4435      	add	r5, r6
   b4f92:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4f94:	6823      	ldr	r3, [r4, #0]
   b4f96:	4433      	add	r3, r6
   b4f98:	6063      	str	r3, [r4, #4]
    }
   b4f9a:	b003      	add	sp, #12
   b4f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f9e:	6843      	ldr	r3, [r0, #4]
   b4fa0:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b4fa2:	429e      	cmp	r6, r3
   b4fa4:	d803      	bhi.n	b4fae <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x5a>
   b4fa6:	4638      	mov	r0, r7
   b4fa8:	f7ff ff82 	bl	b4eb0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   b4fac:	e7f2      	b.n	b4f94 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x40>
   b4fae:	18f9      	adds	r1, r7, r3
   b4fb0:	4638      	mov	r0, r7
   b4fb2:	f7ff ff7d 	bl	b4eb0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
   b4fb6:	e9d4 0200 	ldrd	r0, r2, [r4]
   b4fba:	e9d5 3100 	ldrd	r3, r1, [r5]
   b4fbe:	1a10      	subs	r0, r2, r0
   b4fc0:	4418      	add	r0, r3
   b4fc2:	e7f1      	b.n	b4fa8 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x54>

000b4fc4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b4fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4fc8:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b4fca:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4fcc:	480b      	ldr	r0, [pc, #44]	; (b4ffc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x38>)
   b4fce:	10a4      	asrs	r4, r4, #2
   b4fd0:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b4fd2:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4fd4:	4627      	mov	r7, r4
   b4fd6:	4690      	mov	r8, r2
   b4fd8:	2f00      	cmp	r7, #0
   b4fda:	dd08      	ble.n	b4fee <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x2a>
	      *__result = *__first;
   b4fdc:	4629      	mov	r1, r5
   b4fde:	4640      	mov	r0, r8
   b4fe0:	f7ff ffb8 	bl	b4f54 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b4fe4:	350c      	adds	r5, #12
	      ++__result;
   b4fe6:	f108 080c 	add.w	r8, r8, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4fea:	3f01      	subs	r7, #1
   b4fec:	e7f4      	b.n	b4fd8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x14>
	  return __result;
   b4fee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b4ff2:	200c      	movs	r0, #12
   b4ff4:	fb00 6004 	mla	r0, r0, r4, r6
   b4ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4ffc:	aaaaaaab 	.word	0xaaaaaaab

000b5000 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>:
    std::vector<std::string> colors;
    int tripleIndex = -1;
    int loopIndex = -1;
    int lowerLoopBound, upperLoopBound, lowerGreenBound, upperGreenBound;

    Railway(std::vector<Checkpoint> checkpointInput, std::vector<int> scalerInput, std::vector<int> outputSize, std::string nameInput, std::vector<std::string> colorInput, std::vector<int> boundInput = {0, 0, 0, 0}){
   b5000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5004:	2500      	movs	r5, #0
   b5006:	4699      	mov	r9, r3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b5008:	f100 0338 	add.w	r3, r0, #56	; 0x38
      { _M_string_length = __length; }
   b500c:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   b5010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5014:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
   b5018:	4604      	mov	r4, r0
   b501a:	e9c0 5500 	strd	r5, r5, [r0]
   b501e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b5022:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5026:	e9c0 5506 	strd	r5, r5, [r0, #24]
   b502a:	e9c0 5508 	strd	r5, r5, [r0, #32]
   b502e:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
   b5032:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
   b5036:	b099      	sub	sp, #100	; 0x64
      { __c1 = __c2; }
   b5038:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
   b503c:	6505      	str	r5, [r0, #80]	; 0x50
   b503e:	4692      	mov	sl, r2
   b5040:	f100 0b18 	add.w	fp, r0, #24
   b5044:	f100 0830 	add.w	r8, r0, #48	; 0x30
   b5048:	f100 0748 	add.w	r7, r0, #72	; 0x48
      checkpoints = checkpointInput;
   b504c:	f7ff f922 	bl	b4294 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5050:	e9d4 2300 	ldrd	r2, r3, [r4]
   b5054:	1a9b      	subs	r3, r3, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b5056:	42ab      	cmp	r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5058:	ea4f 01e3 	mov.w	r1, r3, asr #3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b505c:	da02      	bge.n	b5064 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x64>
	  __throw_length_error(
   b505e:	485f      	ldr	r0, [pc, #380]	; (b51dc <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1dc>)
   b5060:	f005 fb08 	bl	ba674 <_ZSt20__throw_length_errorPKc>
      { _M_create_storage(__n); }
   b5064:	a809      	add	r0, sp, #36	; 0x24
   b5066:	9101      	str	r1, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5068:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b506c:	950b      	str	r5, [sp, #44]	; 0x2c
      { _M_create_storage(__n); }
   b506e:	f7ff feb7 	bl	b4de0 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
      if (__n <= 0)
   b5072:	9901      	ldr	r1, [sp, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
   b5074:	9809      	ldr	r0, [sp, #36]	; 0x24
   b5076:	b131      	cbz	r1, b5086 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x86>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   b5078:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	*__first = __tmp;
   b507c:	008a      	lsls	r2, r1, #2
   b507e:	4629      	mov	r1, r5
   b5080:	f006 fb02 	bl	bb688 <memset>
   b5084:	4630      	mov	r0, r6
	  _M_finish = __x._M_finish;
   b5086:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
	  _M_start = __x._M_start;
   b508a:	9909      	ldr	r1, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b508c:	6963      	ldr	r3, [r4, #20]
   b508e:	930e      	str	r3, [sp, #56]	; 0x38
	  _M_finish = __x._M_finish;
   b5090:	e9c4 1003 	strd	r1, r0, [r4, #12]
      }
   b5094:	ae0c      	add	r6, sp, #48	; 0x30
	  _M_end_of_storage = __x._M_end_of_storage;
   b5096:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b5098:	6161      	str	r1, [r4, #20]
	  _M_finish = __x._M_finish;
   b509a:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
      }
   b509e:	4630      	mov	r0, r6
	  _M_start = __x._M_start;
   b50a0:	2500      	movs	r5, #0
	  _M_finish = __x._M_finish;
   b50a2:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b50a6:	950b      	str	r5, [sp, #44]	; 0x2c
      }
   b50a8:	f7ff fb58 	bl	b475c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b50ac:	a809      	add	r0, sp, #36	; 0x24
   b50ae:	f7ff fb55 	bl	b475c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      distances = std::vector<float>(checkpoints.size(), 0);
      scalers = scalerInput;
   b50b2:	4651      	mov	r1, sl
   b50b4:	4658      	mov	r0, fp
   b50b6:	f7ff ff4d 	bl	b4f54 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      outputs = {std::vector<int>(outputSize[0], 0), std::vector<int>(outputSize[1], 0), std::vector<int>(outputSize[2], 0), std::vector<int>(outputSize[3], 0)};
   b50ba:	f8d9 1000 	ldr.w	r1, [r9]
   b50be:	9506      	str	r5, [sp, #24]
   b50c0:	6809      	ldr	r1, [r1, #0]
   b50c2:	ab02      	add	r3, sp, #8
   b50c4:	aa06      	add	r2, sp, #24
   b50c6:	4630      	mov	r0, r6
   b50c8:	f7ff fb86 	bl	b47d8 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b50cc:	f8d9 1000 	ldr.w	r1, [r9]
   b50d0:	9507      	str	r5, [sp, #28]
   b50d2:	6849      	ldr	r1, [r1, #4]
   b50d4:	ab03      	add	r3, sp, #12
   b50d6:	aa07      	add	r2, sp, #28
   b50d8:	a80f      	add	r0, sp, #60	; 0x3c
   b50da:	f7ff fb7d 	bl	b47d8 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b50de:	f8d9 1000 	ldr.w	r1, [r9]
   b50e2:	9508      	str	r5, [sp, #32]
   b50e4:	6889      	ldr	r1, [r1, #8]
   b50e6:	ab04      	add	r3, sp, #16
   b50e8:	aa08      	add	r2, sp, #32
   b50ea:	a812      	add	r0, sp, #72	; 0x48
   b50ec:	f7ff fb74 	bl	b47d8 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b50f0:	f8d9 1000 	ldr.w	r1, [r9]
   b50f4:	9509      	str	r5, [sp, #36]	; 0x24
   b50f6:	ab05      	add	r3, sp, #20
   b50f8:	aa09      	add	r2, sp, #36	; 0x24
   b50fa:	68c9      	ldr	r1, [r1, #12]
   b50fc:	a815      	add	r0, sp, #84	; 0x54
   b50fe:	f7ff fb6b 	bl	b47d8 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
			 - this->_M_impl._M_start); }
   b5102:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b5104:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b5106:	1a9b      	subs	r3, r3, r2
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);

	if (__len > capacity())
   b5108:	2b2f      	cmp	r3, #47	; 0x2f
   b510a:	d83f      	bhi.n	b518c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x18c>
	  pointer __result = this->_M_allocate(__n);
   b510c:	2004      	movs	r0, #4
   b510e:	f7fe ffe9 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b5112:	46b3      	mov	fp, r6
   b5114:	4605      	mov	r5, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b5116:	f100 0a30 	add.w	sl, r0, #48	; 0x30
	  _ForwardIterator __cur = __result;
   b511a:	4681      	mov	r9, r0
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b511c:	f1b9 0f00 	cmp.w	r9, #0
   b5120:	d003      	beq.n	b512a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x12a>
   b5122:	4659      	mov	r1, fp
   b5124:	4648      	mov	r0, r9
   b5126:	f7ff fed1 	bl	b4ecc <_ZNSt6vectorIiSaIiEEC1ERKS1_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b512a:	f109 090c 	add.w	r9, r9, #12
   b512e:	45d1      	cmp	r9, sl
   b5130:	f10b 0b0c 	add.w	fp, fp, #12
   b5134:	d1f2      	bne.n	b511c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x11c>
	__destroy(__first, __last);
   b5136:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b513a:	f7ff fe66 	bl	b4e0a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	    _S_check_init_len(__len, _M_get_Tp_allocator());
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
   b513e:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b5140:	b118      	cbz	r0, b514a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x14a>
			  this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_start);
   b5142:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b5144:	1a09      	subs	r1, r1, r0
   b5146:	f7fe ffac 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b514a:	e9c4 5a09 	strd	r5, sl, [r4, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b514e:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
   b5152:	ad18      	add	r5, sp, #96	; 0x60
   b5154:	3d0c      	subs	r5, #12
      }
   b5156:	4628      	mov	r0, r5
   b5158:	f7ff fb0a 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b515c:	42b5      	cmp	r5, r6
   b515e:	d1f9      	bne.n	b5154 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x154>
	this->_M_assign(__str);
   b5160:	9922      	ldr	r1, [sp, #136]	; 0x88
   b5162:	4640      	mov	r0, r8
   b5164:	f005 fad6 	bl	ba714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      name = nameInput;
      colors = colorInput;
   b5168:	4638      	mov	r0, r7
   b516a:	9923      	ldr	r1, [sp, #140]	; 0x8c
   b516c:	f7ff f8e4 	bl	b4338 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
	return *(this->_M_impl._M_start + __n);
   b5170:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b5172:	681b      	ldr	r3, [r3, #0]
      lowerLoopBound = boundInput[0];
   b5174:	681a      	ldr	r2, [r3, #0]
   b5176:	65e2      	str	r2, [r4, #92]	; 0x5c
      upperLoopBound = boundInput[1];
   b5178:	685a      	ldr	r2, [r3, #4]
   b517a:	6622      	str	r2, [r4, #96]	; 0x60
      lowerGreenBound = boundInput[2];
   b517c:	689a      	ldr	r2, [r3, #8]
      upperGreenBound = boundInput[3];
   b517e:	68db      	ldr	r3, [r3, #12]
      lowerGreenBound = boundInput[2];
   b5180:	6662      	str	r2, [r4, #100]	; 0x64
    }
   b5182:	4620      	mov	r0, r4
      upperGreenBound = boundInput[3];
   b5184:	66a3      	str	r3, [r4, #104]	; 0x68
    }
   b5186:	b019      	add	sp, #100	; 0x64
   b5188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b518c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   b518e:	1aad      	subs	r5, r5, r2
	  }
	else if (size() >= __len)
   b5190:	2d2f      	cmp	r5, #47	; 0x2f
   b5192:	d90b      	bls.n	b51ac <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ac>
			      _Category>::__copy_m(__first, __last, __result);
   b5194:	a918      	add	r1, sp, #96	; 0x60
   b5196:	4630      	mov	r0, r6
   b5198:	f7ff ff14 	bl	b4fc4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b519c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b519e:	4288      	cmp	r0, r1
   b51a0:	4605      	mov	r5, r0
   b51a2:	d0d6      	beq.n	b5152 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b51a4:	f7ff fe31 	bl	b4e0a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b51a8:	62a5      	str	r5, [r4, #40]	; 0x28
   b51aa:	e7d2      	b.n	b5152 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b51ac:	4435      	add	r5, r6
   b51ae:	4629      	mov	r1, r5
   b51b0:	4630      	mov	r0, r6
   b51b2:	f7ff ff07 	bl	b4fc4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b51b6:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
   b51ba:	ab18      	add	r3, sp, #96	; 0x60
   b51bc:	429d      	cmp	r5, r3
   b51be:	d00a      	beq.n	b51d6 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1d6>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b51c0:	f1b9 0f00 	cmp.w	r9, #0
   b51c4:	d003      	beq.n	b51ce <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ce>
   b51c6:	4629      	mov	r1, r5
   b51c8:	4648      	mov	r0, r9
   b51ca:	f7ff fe7f 	bl	b4ecc <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b51ce:	350c      	adds	r5, #12
   b51d0:	f109 090c 	add.w	r9, r9, #12
   b51d4:	e7f1      	b.n	b51ba <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ba>
	    _ForwardIterator __mid = __first;
	    std::advance(__mid, size());
	    std::copy(__first, __mid, this->_M_impl._M_start);
	    const size_type __attribute__((__unused__)) __n = __len - size();
	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	    this->_M_impl._M_finish =
   b51d6:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
   b51da:	e7ba      	b.n	b5152 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b51dc:	000bd863 	.word	0x000bd863

000b51e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   b51e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b51e4:	ed2d 8b0e 	vpush	{d8-d14}
   b51e8:	2801      	cmp	r0, #1
   b51ea:	4eb3      	ldr	r6, [pc, #716]	; (b54b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2d8>)
   b51ec:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   b51f0:	f040 85b8 	bne.w	b5d64 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb84>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b51f4:	2500      	movs	r5, #0
    SleepResult() {}
   b51f6:	4bb1      	ldr	r3, [pc, #708]	; (b54bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2dc>)
   b51f8:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
   b51fa:	e9c6 5500 	strd	r5, r5, [r6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b51fe:	2003      	movs	r0, #3
   b5200:	f002 fe98 	bl	b7f34 <set_system_mode>
  public:
    float lat;
    float lon;

    Checkpoint(float la, float lo){
      lat = la;
   b5204:	4bae      	ldr	r3, [pc, #696]	; (b54c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e0>)
   b5206:	9372      	str	r3, [sp, #456]	; 0x1c8
      lon = lo;
   b5208:	4bae      	ldr	r3, [pc, #696]	; (b54c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e4>)
   b520a:	9373      	str	r3, [sp, #460]	; 0x1cc
      lat = la;
   b520c:	4bae      	ldr	r3, [pc, #696]	; (b54c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e8>)
   b520e:	9374      	str	r3, [sp, #464]	; 0x1d0
      lon = lo;
   b5210:	4bae      	ldr	r3, [pc, #696]	; (b54cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2ec>)
   b5212:	9375      	str	r3, [sp, #468]	; 0x1d4
      lat = la;
   b5214:	4bae      	ldr	r3, [pc, #696]	; (b54d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f0>)
   b5216:	9376      	str	r3, [sp, #472]	; 0x1d8
      lon = lo;
   b5218:	4bae      	ldr	r3, [pc, #696]	; (b54d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f4>)
   b521a:	9377      	str	r3, [sp, #476]	; 0x1dc
      lat = la;
   b521c:	4bae      	ldr	r3, [pc, #696]	; (b54d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f8>)
   b521e:	9378      	str	r3, [sp, #480]	; 0x1e0
      lon = lo;
   b5220:	4bae      	ldr	r3, [pc, #696]	; (b54dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2fc>)
   b5222:	9379      	str	r3, [sp, #484]	; 0x1e4
      lat = la;
   b5224:	4bae      	ldr	r3, [pc, #696]	; (b54e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x300>)
   b5226:	937a      	str	r3, [sp, #488]	; 0x1e8
      lon = lo;
   b5228:	4bae      	ldr	r3, [pc, #696]	; (b54e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x304>)
   b522a:	937b      	str	r3, [sp, #492]	; 0x1ec
);
   b522c:	ab72      	add	r3, sp, #456	; 0x1c8
   b522e:	934c      	str	r3, [sp, #304]	; 0x130
   b5230:	2305      	movs	r3, #5
   b5232:	f8df a340 	ldr.w	sl, [pc, #832]	; b5574 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>
   b5236:	934d      	str	r3, [sp, #308]	; 0x134
   b5238:	f50d 7884 	add.w	r8, sp, #264	; 0x108
   b523c:	aa4c      	add	r2, sp, #304	; 0x130
   b523e:	4643      	mov	r3, r8
   b5240:	ca06      	ldmia	r2, {r1, r2}
   b5242:	a85a      	add	r0, sp, #360	; 0x168
   b5244:	f7ff faea 	bl	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5248:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
   b524c:	ac65      	add	r4, sp, #404	; 0x194
   b524e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b5252:	2204      	movs	r2, #4
   b5254:	ab4a      	add	r3, sp, #296	; 0x128
   b5256:	944a      	str	r4, [sp, #296]	; 0x128
   b5258:	924b      	str	r2, [sp, #300]	; 0x12c
   b525a:	e893 0006 	ldmia.w	r3, {r1, r2}
   b525e:	a857      	add	r0, sp, #348	; 0x15c
   b5260:	f7ff fe4e 	bl	b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5264:	aa61      	add	r2, sp, #388	; 0x184
   b5266:	9248      	str	r2, [sp, #288]	; 0x120
   b5268:	2328      	movs	r3, #40	; 0x28
   b526a:	2204      	movs	r2, #4
   b526c:	e9cd 3562 	strd	r3, r5, [sp, #392]	; 0x188
   b5270:	9249      	str	r2, [sp, #292]	; 0x124
   b5272:	ab48      	add	r3, sp, #288	; 0x120
   b5274:	f50d 7bd6 	add.w	fp, sp, #428	; 0x1ac
   b5278:	e893 0006 	ldmia.w	r3, {r1, r2}
   b527c:	a854      	add	r0, sp, #336	; 0x150
   b527e:	9561      	str	r5, [sp, #388]	; 0x184
   b5280:	9564      	str	r5, [sp, #400]	; 0x190
   b5282:	f7ff fe3d 	bl	b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5286:	4658      	mov	r0, fp
   b5288:	4997      	ldr	r1, [pc, #604]	; (b54e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x308>)
      lat = la;
   b528a:	eddf 8a98 	vldr	s17, [pc, #608]	; b54ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x30c>
      lon = lo;
   b528e:	ed9f 8a98 	vldr	s16, [pc, #608]	; b54f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x310>
      lat = la;
   b5292:	eddf 9a98 	vldr	s19, [pc, #608]	; b54f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>
      lon = lo;
   b5296:	ed9f 9a98 	vldr	s18, [pc, #608]	; b54f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x318>
      lat = la;
   b529a:	eddf aa98 	vldr	s21, [pc, #608]	; b54fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x31c>
      lon = lo;
   b529e:	ed9f aa98 	vldr	s20, [pc, #608]	; b5500 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>
      lat = la;
   b52a2:	eddf ba98 	vldr	s23, [pc, #608]	; b5504 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>
      lon = lo;
   b52a6:	ed9f ba98 	vldr	s22, [pc, #608]	; b5508 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>
      lat = la;
   b52aa:	eddf da98 	vldr	s27, [pc, #608]	; b550c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>
      lon = lo;
   b52ae:	ed9f da98 	vldr	s26, [pc, #608]	; b5510 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>
      lat = la;
   b52b2:	eddf ca98 	vldr	s25, [pc, #608]	; b5514 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>
      lon = lo;
   b52b6:	ed9f ca98 	vldr	s24, [pc, #608]	; b5518 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>
   b52ba:	ed9f ea98 	vldr	s28, [pc, #608]	; b551c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>
   b52be:	f7fe ff23 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b52c2:	a87e      	add	r0, sp, #504	; 0x1f8
   b52c4:	4996      	ldr	r1, [pc, #600]	; (b5520 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>)
   b52c6:	f7fe ff1f 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b52ca:	a884      	add	r0, sp, #528	; 0x210
   b52cc:	4995      	ldr	r1, [pc, #596]	; (b5524 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>)
   b52ce:	f7fe ff1b 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b52d2:	ab7e      	add	r3, sp, #504	; 0x1f8
   b52d4:	9346      	str	r3, [sp, #280]	; 0x118
   b52d6:	2302      	movs	r3, #2
   b52d8:	9347      	str	r3, [sp, #284]	; 0x11c
   b52da:	aa46      	add	r2, sp, #280	; 0x118
   b52dc:	f50d 79ba 	add.w	r9, sp, #372	; 0x174
   b52e0:	ab40      	add	r3, sp, #256	; 0x100
   b52e2:	ca06      	ldmia	r2, {r1, r2}
   b52e4:	a851      	add	r0, sp, #324	; 0x144
   b52e6:	f7ff facd 	bl	b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b52ea:	4629      	mov	r1, r5
   b52ec:	2210      	movs	r2, #16
   b52ee:	4648      	mov	r0, r9
   b52f0:	f006 f9ca 	bl	bb688 <memset>
   b52f4:	2204      	movs	r2, #4
   b52f6:	ab44      	add	r3, sp, #272	; 0x110
   b52f8:	f8cd 9110 	str.w	r9, [sp, #272]	; 0x110
   b52fc:	9245      	str	r2, [sp, #276]	; 0x114
   b52fe:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5302:	a84e      	add	r0, sp, #312	; 0x138
   b5304:	f7ff fdfc 	bl	b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLineCTA = Railway(
   b5308:	ab4e      	add	r3, sp, #312	; 0x138
   b530a:	9302      	str	r3, [sp, #8]
   b530c:	ab51      	add	r3, sp, #324	; 0x144
   b530e:	aa57      	add	r2, sp, #348	; 0x15c
   b5310:	a95a      	add	r1, sp, #360	; 0x168
   b5312:	e9cd b300 	strd	fp, r3, [sp]
   b5316:	4884      	ldr	r0, [pc, #528]	; (b5528 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>)
   b5318:	ab54      	add	r3, sp, #336	; 0x150
   b531a:	f7ff fe71 	bl	b5000 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b531e:	a84e      	add	r0, sp, #312	; 0x138
   b5320:	f7ff fa26 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5324:	a851      	add	r0, sp, #324	; 0x144
   b5326:	f7ff fa44 	bl	b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b532a:	a884      	add	r0, sp, #528	; 0x210
   b532c:	f005 f9d4 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5330:	a87e      	add	r0, sp, #504	; 0x1f8
   b5332:	f005 f9d1 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5336:	4658      	mov	r0, fp
   b5338:	f005 f9ce 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b533c:	a854      	add	r0, sp, #336	; 0x150
   b533e:	f7ff fa17 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5342:	a857      	add	r0, sp, #348	; 0x15c
   b5344:	f7ff fa14 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5348:	a85a      	add	r0, sp, #360	; 0x168
   b534a:	f7ff f9fd 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b534e:	4b77      	ldr	r3, [pc, #476]	; (b552c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>)
   b5350:	937e      	str	r3, [sp, #504]	; 0x1f8
      lon = lo;
   b5352:	4b77      	ldr	r3, [pc, #476]	; (b5530 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>)
   b5354:	937f      	str	r3, [sp, #508]	; 0x1fc
      lat = la;
   b5356:	4b77      	ldr	r3, [pc, #476]	; (b5534 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
   b5358:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b535a:	4b77      	ldr	r3, [pc, #476]	; (b5538 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>)
   b535c:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b535e:	4b77      	ldr	r3, [pc, #476]	; (b553c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x35c>)
   b5360:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b5362:	4b77      	ldr	r3, [pc, #476]	; (b5540 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x360>)
   b5364:	9383      	str	r3, [sp, #524]	; 0x20c
      lat = la;
   b5366:	4b77      	ldr	r3, [pc, #476]	; (b5544 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x364>)
   b5368:	9384      	str	r3, [sp, #528]	; 0x210
      lon = lo;
   b536a:	4b77      	ldr	r3, [pc, #476]	; (b5548 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x368>)
   b536c:	9385      	str	r3, [sp, #532]	; 0x214
      lat = la;
   b536e:	4b77      	ldr	r3, [pc, #476]	; (b554c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
   b5370:	9386      	str	r3, [sp, #536]	; 0x218
      lon = lo;
   b5372:	4b77      	ldr	r3, [pc, #476]	; (b5550 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x370>)
   b5374:	9387      	str	r3, [sp, #540]	; 0x21c
      lat = la;
   b5376:	4b77      	ldr	r3, [pc, #476]	; (b5554 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>)
   b5378:	9388      	str	r3, [sp, #544]	; 0x220
      lon = lo;
   b537a:	4b77      	ldr	r3, [pc, #476]	; (b5558 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x378>)
   b537c:	9389      	str	r3, [sp, #548]	; 0x224
      lat = la;
   b537e:	4b77      	ldr	r3, [pc, #476]	; (b555c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x37c>)
   b5380:	938a      	str	r3, [sp, #552]	; 0x228
      lon = lo;
   b5382:	4b77      	ldr	r3, [pc, #476]	; (b5560 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x380>)
   b5384:	938b      	str	r3, [sp, #556]	; 0x22c
);
   b5386:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5388:	9342      	str	r3, [sp, #264]	; 0x108
   b538a:	2307      	movs	r3, #7
   b538c:	9343      	str	r3, [sp, #268]	; 0x10c
   b538e:	af38      	add	r7, sp, #224	; 0xe0
   b5390:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5394:	463b      	mov	r3, r7
   b5396:	a85a      	add	r0, sp, #360	; 0x168
   b5398:	f7ff fa40 	bl	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b539c:	f10a 0c10 	add.w	ip, sl, #16
   b53a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b53a4:	465e      	mov	r6, fp
   b53a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b53a8:	e89c 0003 	ldmia.w	ip, {r0, r1}
   b53ac:	2306      	movs	r3, #6
   b53ae:	9341      	str	r3, [sp, #260]	; 0x104
   b53b0:	f8cd b100 	str.w	fp, [sp, #256]	; 0x100
   b53b4:	ab40      	add	r3, sp, #256	; 0x100
   b53b6:	e9c6 0100 	strd	r0, r1, [r6]
   b53ba:	e893 0006 	ldmia.w	r3, {r1, r2}
   b53be:	a857      	add	r0, sp, #348	; 0x15c
   b53c0:	9604      	str	r6, [sp, #16]
   b53c2:	f7ff fd9d 	bl	b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b53c6:	aa61      	add	r2, sp, #388	; 0x184
   b53c8:	923e      	str	r2, [sp, #248]	; 0xf8
   b53ca:	233c      	movs	r3, #60	; 0x3c
   b53cc:	2204      	movs	r2, #4
   b53ce:	e9cd 3562 	strd	r3, r5, [sp, #392]	; 0x188
   b53d2:	923f      	str	r2, [sp, #252]	; 0xfc
   b53d4:	ab3e      	add	r3, sp, #248	; 0xf8
   b53d6:	e893 0006 	ldmia.w	r3, {r1, r2}
   b53da:	a854      	add	r0, sp, #336	; 0x150
   b53dc:	9561      	str	r5, [sp, #388]	; 0x184
   b53de:	9564      	str	r5, [sp, #400]	; 0x190
   b53e0:	f7ff fd8e 	bl	b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b53e4:	4620      	mov	r0, r4
   b53e6:	495f      	ldr	r1, [pc, #380]	; (b5564 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x384>)
   b53e8:	f7fe fe8e 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b53ec:	a872      	add	r0, sp, #456	; 0x1c8
   b53ee:	495e      	ldr	r1, [pc, #376]	; (b5568 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x388>)
   b53f0:	f7fe fe8a 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b53f4:	a878      	add	r0, sp, #480	; 0x1e0
   b53f6:	495d      	ldr	r1, [pc, #372]	; (b556c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x38c>)
   b53f8:	f7fe fe86 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b53fc:	ab72      	add	r3, sp, #456	; 0x1c8
   b53fe:	933c      	str	r3, [sp, #240]	; 0xf0
   b5400:	2302      	movs	r3, #2
   b5402:	933d      	str	r3, [sp, #244]	; 0xf4
   b5404:	ae36      	add	r6, sp, #216	; 0xd8
   b5406:	aa3c      	add	r2, sp, #240	; 0xf0
   b5408:	4633      	mov	r3, r6
   b540a:	ca06      	ldmia	r2, {r1, r2}
   b540c:	a851      	add	r0, sp, #324	; 0x144
   b540e:	f7ff fa39 	bl	b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5412:	4629      	mov	r1, r5
   b5414:	2210      	movs	r2, #16
   b5416:	4648      	mov	r0, r9
   b5418:	f006 f936 	bl	bb688 <memset>
   b541c:	2204      	movs	r2, #4
   b541e:	ab3a      	add	r3, sp, #232	; 0xe8
   b5420:	f8cd 90e8 	str.w	r9, [sp, #232]	; 0xe8
   b5424:	923b      	str	r2, [sp, #236]	; 0xec
   b5426:	e893 0006 	ldmia.w	r3, {r1, r2}
   b542a:	a84e      	add	r0, sp, #312	; 0x138
   b542c:	f7ff fd68 	bl	b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLineCTA = Railway(
   b5430:	ab4e      	add	r3, sp, #312	; 0x138
   b5432:	9302      	str	r3, [sp, #8]
   b5434:	ab51      	add	r3, sp, #324	; 0x144
   b5436:	aa57      	add	r2, sp, #348	; 0x15c
   b5438:	a95a      	add	r1, sp, #360	; 0x168
   b543a:	e9cd 4300 	strd	r4, r3, [sp]
   b543e:	484c      	ldr	r0, [pc, #304]	; (b5570 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x390>)
   b5440:	ab54      	add	r3, sp, #336	; 0x150
   b5442:	f7ff fddd 	bl	b5000 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5446:	a84e      	add	r0, sp, #312	; 0x138
   b5448:	f7ff f992 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b544c:	a851      	add	r0, sp, #324	; 0x144
   b544e:	f7ff f9b0 	bl	b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5452:	a878      	add	r0, sp, #480	; 0x1e0
   b5454:	f005 f940 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5458:	a872      	add	r0, sp, #456	; 0x1c8
   b545a:	f005 f93d 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b545e:	4620      	mov	r0, r4
   b5460:	f005 f93a 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5464:	a854      	add	r0, sp, #336	; 0x150
   b5466:	f7ff f983 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b546a:	a857      	add	r0, sp, #348	; 0x15c
   b546c:	f7ff f980 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5470:	a85a      	add	r0, sp, #360	; 0x168
   b5472:	f7ff f969 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b5476:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5478:	9338      	str	r3, [sp, #224]	; 0xe0
   b547a:	2307      	movs	r3, #7
   b547c:	9339      	str	r3, [sp, #228]	; 0xe4
   b547e:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
   b5482:	e897 0006 	ldmia.w	r7, {r1, r2}
   b5486:	4643      	mov	r3, r8
   b5488:	a85a      	add	r0, sp, #360	; 0x168
      lat = la;
   b548a:	edcd da7e 	vstr	s27, [sp, #504]	; 0x1f8
      lon = lo;
   b548e:	ed8d da7f 	vstr	s26, [sp, #508]	; 0x1fc
      lat = la;
   b5492:	edcd ca80 	vstr	s25, [sp, #512]	; 0x200
      lon = lo;
   b5496:	ed8d ca81 	vstr	s24, [sp, #516]	; 0x204
      lat = la;
   b549a:	edcd 8a82 	vstr	s17, [sp, #520]	; 0x208
      lon = lo;
   b549e:	ed8d 8a83 	vstr	s16, [sp, #524]	; 0x20c
      lat = la;
   b54a2:	edcd ba84 	vstr	s23, [sp, #528]	; 0x210
      lon = lo;
   b54a6:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
      lat = la;
   b54aa:	edcd aa86 	vstr	s21, [sp, #536]	; 0x218
      lon = lo;
   b54ae:	ed8d aa87 	vstr	s20, [sp, #540]	; 0x21c
      lat = la;
   b54b2:	edcd 9a88 	vstr	s19, [sp, #544]	; 0x220
   b54b6:	e05f      	b.n	b5578 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x398>
   b54b8:	200354dc 	.word	0x200354dc
   b54bc:	ffff0000 	.word	0xffff0000
   b54c0:	42276980 	.word	0x42276980
   b54c4:	c2af431e 	.word	0xc2af431e
   b54c8:	42279dcc 	.word	0x42279dcc
   b54cc:	c2af4202 	.word	0xc2af4202
   b54d0:	42279d95 	.word	0x42279d95
   b54d4:	c2af476d 	.word	0xc2af476d
   b54d8:	4227a7a9 	.word	0x4227a7a9
   b54dc:	c2af4e05 	.word	0xc2af4e05
   b54e0:	4227b382 	.word	0x4227b382
   b54e4:	c2af4e44 	.word	0xc2af4e44
   b54e8:	000bd8af 	.word	0x000bd8af
   b54ec:	42278b1a 	.word	0x42278b1a
   b54f0:	c2af449a 	.word	0xc2af449a
   b54f4:	42278b2f 	.word	0x42278b2f
   b54f8:	c2af4095 	.word	0xc2af4095
   b54fc:	422781d8 	.word	0x422781d8
   b5500:	c2af4044 	.word	0xc2af4044
   b5504:	42278216 	.word	0x42278216
   b5508:	c2af44c1 	.word	0xc2af44c1
   b550c:	4227a49e 	.word	0x4227a49e
   b5510:	c2af4bd0 	.word	0xc2af4bd0
   b5514:	4227a437 	.word	0x4227a437
   b5518:	c2af4659 	.word	0xc2af4659
   b551c:	c2af4089 	.word	0xc2af4089
   b5520:	000bd8b3 	.word	0x000bd8b3
   b5524:	000bd8ba 	.word	0x000bd8ba
   b5528:	2003e5c8 	.word	0x2003e5c8
   b552c:	42277e9d 	.word	0x42277e9d
   b5530:	c2af74b3 	.word	0xc2af74b3
   b5534:	422780af 	.word	0x422780af
   b5538:	c2af588e 	.word	0xc2af588e
   b553c:	4227804d 	.word	0x4227804d
   b5540:	c2af482e 	.word	0xc2af482e
   b5544:	422780ad 	.word	0x422780ad
   b5548:	c2af4157 	.word	0xc2af4157
   b554c:	42278aff 	.word	0x42278aff
   b5550:	c2af4253 	.word	0xc2af4253
   b5554:	42278af4 	.word	0x42278af4
   b5558:	c2af4798 	.word	0xc2af4798
   b555c:	4227a978 	.word	0x4227a978
   b5560:	c2af5f5d 	.word	0xc2af5f5d
   b5564:	000bd8c1 	.word	0x000bd8c1
   b5568:	000bd8c6 	.word	0x000bd8c6
   b556c:	000bd8cd 	.word	0x000bd8cd
   b5570:	20035534 	.word	0x20035534
   b5574:	000bda80 	.word	0x000bda80
      lon = lo;
   b5578:	ed8d 9a89 	vstr	s18, [sp, #548]	; 0x224
      lat = la;
   b557c:	edcd 8a8a 	vstr	s17, [sp, #552]	; 0x228
      lon = lo;
   b5580:	ed8d 8a8b 	vstr	s16, [sp, #556]	; 0x22c
   b5584:	f7ff f94a 	bl	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5588:	f10a 0328 	add.w	r3, sl, #40	; 0x28
   b558c:	461f      	mov	r7, r3
   b558e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5590:	46dc      	mov	ip, fp
   b5592:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5596:	e9d7 0100 	ldrd	r0, r1, [r7]
   b559a:	9b04      	ldr	r3, [sp, #16]
   b559c:	f8cd b0d8 	str.w	fp, [sp, #216]	; 0xd8
   b55a0:	e883 0003 	stmia.w	r3, {r0, r1}
   b55a4:	2306      	movs	r3, #6
   b55a6:	9337      	str	r3, [sp, #220]	; 0xdc
   b55a8:	e896 0006 	ldmia.w	r6, {r1, r2}
   b55ac:	a857      	add	r0, sp, #348	; 0x15c
   b55ae:	9705      	str	r7, [sp, #20]
   b55b0:	f7ff fca6 	bl	b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b55b4:	f107 0308 	add.w	r3, r7, #8
   b55b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b55ba:	ae61      	add	r6, sp, #388	; 0x184
   b55bc:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b55c0:	2204      	movs	r2, #4
   b55c2:	ab34      	add	r3, sp, #208	; 0xd0
   b55c4:	9634      	str	r6, [sp, #208]	; 0xd0
   b55c6:	9235      	str	r2, [sp, #212]	; 0xd4
   b55c8:	e893 0006 	ldmia.w	r3, {r1, r2}
   b55cc:	a854      	add	r0, sp, #336	; 0x150
   b55ce:	f7ff fc97 	bl	b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b55d2:	4620      	mov	r0, r4
   b55d4:	49b2      	ldr	r1, [pc, #712]	; (b58a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c0>)
   b55d6:	f7fe fd97 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b55da:	a872      	add	r0, sp, #456	; 0x1c8
   b55dc:	49b1      	ldr	r1, [pc, #708]	; (b58a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c4>)
   b55de:	f7fe fd93 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b55e2:	a878      	add	r0, sp, #480	; 0x1e0
   b55e4:	49b0      	ldr	r1, [pc, #704]	; (b58a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c8>)
   b55e6:	f7fe fd8f 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b55ea:	a972      	add	r1, sp, #456	; 0x1c8
   b55ec:	9132      	str	r1, [sp, #200]	; 0xc8
   b55ee:	2102      	movs	r1, #2
   b55f0:	ae2c      	add	r6, sp, #176	; 0xb0
   b55f2:	9133      	str	r1, [sp, #204]	; 0xcc
   b55f4:	aa32      	add	r2, sp, #200	; 0xc8
   b55f6:	ca06      	ldmia	r2, {r1, r2}
   b55f8:	4633      	mov	r3, r6
   b55fa:	a851      	add	r0, sp, #324	; 0x144
   b55fc:	f7ff f942 	bl	b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5600:	f107 0218 	add.w	r2, r7, #24
   b5604:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b5606:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b560a:	2104      	movs	r1, #4
   b560c:	ab30      	add	r3, sp, #192	; 0xc0
   b560e:	f8cd 90c0 	str.w	r9, [sp, #192]	; 0xc0
   b5612:	9131      	str	r1, [sp, #196]	; 0xc4
   b5614:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5618:	a84e      	add	r0, sp, #312	; 0x138
   b561a:	f7ff fc71 	bl	b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway brownLineCTA = Railway(
   b561e:	a94e      	add	r1, sp, #312	; 0x138
   b5620:	9102      	str	r1, [sp, #8]
   b5622:	a951      	add	r1, sp, #324	; 0x144
   b5624:	e9cd 4100 	strd	r4, r1, [sp]
   b5628:	a954      	add	r1, sp, #336	; 0x150
   b562a:	460b      	mov	r3, r1
   b562c:	a957      	add	r1, sp, #348	; 0x15c
   b562e:	460a      	mov	r2, r1
   b5630:	489e      	ldr	r0, [pc, #632]	; (b58ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6cc>)
   b5632:	a95a      	add	r1, sp, #360	; 0x168
   b5634:	f7ff fce4 	bl	b5000 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5638:	a84e      	add	r0, sp, #312	; 0x138
   b563a:	f7ff f899 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b563e:	a851      	add	r0, sp, #324	; 0x144
   b5640:	f7ff f8b7 	bl	b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5644:	a878      	add	r0, sp, #480	; 0x1e0
   b5646:	f005 f847 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b564a:	a872      	add	r0, sp, #456	; 0x1c8
   b564c:	f005 f844 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5650:	4620      	mov	r0, r4
   b5652:	f005 f841 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5656:	a854      	add	r0, sp, #336	; 0x150
   b5658:	f7ff f88a 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b565c:	a857      	add	r0, sp, #348	; 0x15c
   b565e:	f7ff f887 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5662:	a85a      	add	r0, sp, #360	; 0x168
   b5664:	f7ff f870 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5668:	4b91      	ldr	r3, [pc, #580]	; (b58b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d0>)
   b566a:	9372      	str	r3, [sp, #456]	; 0x1c8
      lon = lo;
   b566c:	4b91      	ldr	r3, [pc, #580]	; (b58b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d4>)
   b566e:	9373      	str	r3, [sp, #460]	; 0x1cc
      lat = la;
   b5670:	4b91      	ldr	r3, [pc, #580]	; (b58b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d8>)
   b5672:	9374      	str	r3, [sp, #464]	; 0x1d0
   b5674:	4b91      	ldr	r3, [pc, #580]	; (b58bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6dc>)
   b5676:	9378      	str	r3, [sp, #480]	; 0x1e0
);
   b5678:	a972      	add	r1, sp, #456	; 0x1c8
      lon = lo;
   b567a:	4b91      	ldr	r3, [pc, #580]	; (b58c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e0>)
   b567c:	912e      	str	r1, [sp, #184]	; 0xb8
   b567e:	9379      	str	r3, [sp, #484]	; 0x1e4
   b5680:	2105      	movs	r1, #5
      lat = la;
   b5682:	4b90      	ldr	r3, [pc, #576]	; (b58c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e4>)
   b5684:	937a      	str	r3, [sp, #488]	; 0x1e8
   b5686:	af24      	add	r7, sp, #144	; 0x90
   b5688:	912f      	str	r1, [sp, #188]	; 0xbc
      lon = lo;
   b568a:	4b8f      	ldr	r3, [pc, #572]	; (b58c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e8>)
   b568c:	937b      	str	r3, [sp, #492]	; 0x1ec
   b568e:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5692:	463b      	mov	r3, r7
   b5694:	a85a      	add	r0, sp, #360	; 0x168
   b5696:	ed8d ea75 	vstr	s28, [sp, #468]	; 0x1d4
      lat = la;
   b569a:	edcd 9a76 	vstr	s19, [sp, #472]	; 0x1d8
      lon = lo;
   b569e:	ed8d 9a77 	vstr	s18, [sp, #476]	; 0x1dc
   b56a2:	f7ff f8bb 	bl	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b56a6:	f10a 0360 	add.w	r3, sl, #96	; 0x60
   b56aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b56ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b56b0:	2104      	movs	r1, #4
   b56b2:	942c      	str	r4, [sp, #176]	; 0xb0
   b56b4:	912d      	str	r1, [sp, #180]	; 0xb4
   b56b6:	e896 0006 	ldmia.w	r6, {r1, r2}
   b56ba:	a857      	add	r0, sp, #348	; 0x15c
   b56bc:	f7ff fc20 	bl	b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b56c0:	f10a 0370 	add.w	r3, sl, #112	; 0x70
   b56c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b56c6:	ae61      	add	r6, sp, #388	; 0x184
   b56c8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b56cc:	2104      	movs	r1, #4
   b56ce:	ab2a      	add	r3, sp, #168	; 0xa8
   b56d0:	962a      	str	r6, [sp, #168]	; 0xa8
   b56d2:	912b      	str	r1, [sp, #172]	; 0xac
   b56d4:	e893 0006 	ldmia.w	r3, {r1, r2}
   b56d8:	a854      	add	r0, sp, #336	; 0x150
   b56da:	f7ff fc11 	bl	b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b56de:	4658      	mov	r0, fp
   b56e0:	497a      	ldr	r1, [pc, #488]	; (b58cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ec>)
   b56e2:	f7fe fd11 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b56e6:	a87e      	add	r0, sp, #504	; 0x1f8
   b56e8:	4979      	ldr	r1, [pc, #484]	; (b58d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f0>)
   b56ea:	f7fe fd0d 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b56ee:	a884      	add	r0, sp, #528	; 0x210
   b56f0:	4978      	ldr	r1, [pc, #480]	; (b58d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f4>)
   b56f2:	f7fe fd09 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b56f6:	a97e      	add	r1, sp, #504	; 0x1f8
   b56f8:	9128      	str	r1, [sp, #160]	; 0xa0
   b56fa:	2102      	movs	r1, #2
   b56fc:	ae22      	add	r6, sp, #136	; 0x88
   b56fe:	9129      	str	r1, [sp, #164]	; 0xa4
   b5700:	aa28      	add	r2, sp, #160	; 0xa0
   b5702:	4633      	mov	r3, r6
   b5704:	ca06      	ldmia	r2, {r1, r2}
   b5706:	a851      	add	r0, sp, #324	; 0x144
   b5708:	f7ff f8bc 	bl	b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b570c:	f10a 0380 	add.w	r3, sl, #128	; 0x80
   b5710:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5712:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5716:	2104      	movs	r1, #4
   b5718:	ab26      	add	r3, sp, #152	; 0x98
   b571a:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
   b571e:	9127      	str	r1, [sp, #156]	; 0x9c
   b5720:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5724:	a84e      	add	r0, sp, #312	; 0x138
   b5726:	f7ff fbeb 	bl	b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLineCTA = Railway(
   b572a:	a94e      	add	r1, sp, #312	; 0x138
   b572c:	9102      	str	r1, [sp, #8]
   b572e:	a951      	add	r1, sp, #324	; 0x144
   b5730:	e9cd b100 	strd	fp, r1, [sp]
   b5734:	a954      	add	r1, sp, #336	; 0x150
   b5736:	460b      	mov	r3, r1
   b5738:	a957      	add	r1, sp, #348	; 0x15c
   b573a:	460a      	mov	r2, r1
   b573c:	4866      	ldr	r0, [pc, #408]	; (b58d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f8>)
   b573e:	a95a      	add	r1, sp, #360	; 0x168
   b5740:	f7ff fc5e 	bl	b5000 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5744:	a84e      	add	r0, sp, #312	; 0x138
   b5746:	f7ff f813 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b574a:	a851      	add	r0, sp, #324	; 0x144
   b574c:	f7ff f831 	bl	b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5750:	a884      	add	r0, sp, #528	; 0x210
   b5752:	f004 ffc1 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5756:	a87e      	add	r0, sp, #504	; 0x1f8
   b5758:	f004 ffbe 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b575c:	4658      	mov	r0, fp
   b575e:	f004 ffbb 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5762:	a854      	add	r0, sp, #336	; 0x150
   b5764:	f7ff f804 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5768:	a857      	add	r0, sp, #348	; 0x15c
   b576a:	f7ff f801 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b576e:	a85a      	add	r0, sp, #360	; 0x168
   b5770:	f7fe ffea 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5774:	4b59      	ldr	r3, [pc, #356]	; (b58dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6fc>)
   b5776:	937e      	str	r3, [sp, #504]	; 0x1f8
      lon = lo;
   b5778:	4b59      	ldr	r3, [pc, #356]	; (b58e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x700>)
   b577a:	937f      	str	r3, [sp, #508]	; 0x1fc
      lat = la;
   b577c:	4b59      	ldr	r3, [pc, #356]	; (b58e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x704>)
   b577e:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b5780:	4b59      	ldr	r3, [pc, #356]	; (b58e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x708>)
   b5782:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b5784:	4b59      	ldr	r3, [pc, #356]	; (b58ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x70c>)
   b5786:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b5788:	4b59      	ldr	r3, [pc, #356]	; (b58f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x710>)
   b578a:	9383      	str	r3, [sp, #524]	; 0x20c
);
   b578c:	a97e      	add	r1, sp, #504	; 0x1f8
      lat = la;
   b578e:	4b59      	ldr	r3, [pc, #356]	; (b58f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x714>)
   b5790:	9124      	str	r1, [sp, #144]	; 0x90
   b5792:	9384      	str	r3, [sp, #528]	; 0x210
   b5794:	2108      	movs	r1, #8
   b5796:	4b58      	ldr	r3, [pc, #352]	; (b58f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x718>)
   b5798:	938a      	str	r3, [sp, #552]	; 0x228
   b579a:	f10d 0868 	add.w	r8, sp, #104	; 0x68
   b579e:	9125      	str	r1, [sp, #148]	; 0x94
      lon = lo;
   b57a0:	4b56      	ldr	r3, [pc, #344]	; (b58fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x71c>)
   b57a2:	938b      	str	r3, [sp, #556]	; 0x22c
   b57a4:	e897 0006 	ldmia.w	r7, {r1, r2}
   b57a8:	4643      	mov	r3, r8
   b57aa:	a85a      	add	r0, sp, #360	; 0x168
   b57ac:	f10a 0790 	add.w	r7, sl, #144	; 0x90
   b57b0:	ed8d ea85 	vstr	s28, [sp, #532]	; 0x214
      lat = la;
   b57b4:	edcd 9a86 	vstr	s19, [sp, #536]	; 0x218
      lon = lo;
   b57b8:	ed8d 9a87 	vstr	s18, [sp, #540]	; 0x21c
      lat = la;
   b57bc:	edcd 8a88 	vstr	s17, [sp, #544]	; 0x220
      lon = lo;
   b57c0:	ed8d 8a89 	vstr	s16, [sp, #548]	; 0x224
      lat = la;
   b57c4:	edcd aa8c 	vstr	s21, [sp, #560]	; 0x230
      lon = lo;
   b57c8:	ed8d aa8d 	vstr	s20, [sp, #564]	; 0x234
   b57cc:	f7ff f826 	bl	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b57d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b57d2:	46dc      	mov	ip, fp
   b57d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b57d8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   b57dc:	9f04      	ldr	r7, [sp, #16]
   b57de:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
   b57e2:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b57e6:	2107      	movs	r1, #7
   b57e8:	9123      	str	r1, [sp, #140]	; 0x8c
   b57ea:	e896 0006 	ldmia.w	r6, {r1, r2}
   b57ee:	a857      	add	r0, sp, #348	; 0x15c
   b57f0:	f7ff fb86 	bl	b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b57f4:	f10a 03ac 	add.w	r3, sl, #172	; 0xac
   b57f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b57fa:	ae61      	add	r6, sp, #388	; 0x184
   b57fc:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b5800:	2104      	movs	r1, #4
   b5802:	ab20      	add	r3, sp, #128	; 0x80
   b5804:	9620      	str	r6, [sp, #128]	; 0x80
   b5806:	9121      	str	r1, [sp, #132]	; 0x84
   b5808:	e893 0006 	ldmia.w	r3, {r1, r2}
   b580c:	a854      	add	r0, sp, #336	; 0x150
   b580e:	f7ff fb77 	bl	b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5812:	4620      	mov	r0, r4
   b5814:	493a      	ldr	r1, [pc, #232]	; (b5900 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x720>)
   b5816:	f7fe fc77 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b581a:	a872      	add	r0, sp, #456	; 0x1c8
   b581c:	4939      	ldr	r1, [pc, #228]	; (b5904 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x724>)
   b581e:	f7fe fc73 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5822:	a878      	add	r0, sp, #480	; 0x1e0
   b5824:	4938      	ldr	r1, [pc, #224]	; (b5908 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x728>)
   b5826:	f7fe fc6f 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b582a:	a972      	add	r1, sp, #456	; 0x1c8
   b582c:	911e      	str	r1, [sp, #120]	; 0x78
   b582e:	2102      	movs	r1, #2
   b5830:	af18      	add	r7, sp, #96	; 0x60
   b5832:	911f      	str	r1, [sp, #124]	; 0x7c
   b5834:	aa1e      	add	r2, sp, #120	; 0x78
   b5836:	463b      	mov	r3, r7
   b5838:	ca06      	ldmia	r2, {r1, r2}
   b583a:	a851      	add	r0, sp, #324	; 0x144
   b583c:	f7ff f822 	bl	b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5840:	f10a 03bc 	add.w	r3, sl, #188	; 0xbc
   b5844:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5846:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b584a:	2104      	movs	r1, #4
   b584c:	ab1c      	add	r3, sp, #112	; 0x70
   b584e:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
   b5852:	911d      	str	r1, [sp, #116]	; 0x74
   b5854:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5858:	a84e      	add	r0, sp, #312	; 0x138
   b585a:	f7ff fb51 	bl	b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLineCTA = Railway(
   b585e:	a94e      	add	r1, sp, #312	; 0x138
   b5860:	9102      	str	r1, [sp, #8]
   b5862:	a951      	add	r1, sp, #324	; 0x144
   b5864:	e9cd 4100 	strd	r4, r1, [sp]
   b5868:	a954      	add	r1, sp, #336	; 0x150
   b586a:	460b      	mov	r3, r1
   b586c:	a957      	add	r1, sp, #348	; 0x15c
   b586e:	460a      	mov	r2, r1
   b5870:	4826      	ldr	r0, [pc, #152]	; (b590c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x72c>)
   b5872:	a95a      	add	r1, sp, #360	; 0x168
   b5874:	f7ff fbc4 	bl	b5000 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5878:	a84e      	add	r0, sp, #312	; 0x138
   b587a:	f7fe ff79 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b587e:	a851      	add	r0, sp, #324	; 0x144
   b5880:	f7fe ff97 	bl	b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5884:	a878      	add	r0, sp, #480	; 0x1e0
   b5886:	f004 ff27 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b588a:	a872      	add	r0, sp, #456	; 0x1c8
   b588c:	f004 ff24 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5890:	4620      	mov	r0, r4
   b5892:	f004 ff21 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5896:	a854      	add	r0, sp, #336	; 0x150
   b5898:	f7fe ff6a 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b589c:	a857      	add	r0, sp, #348	; 0x15c
   b589e:	e037      	b.n	b5910 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x730>
   b58a0:	000bd8d4 	.word	0x000bd8d4
   b58a4:	000bd8da 	.word	0x000bd8da
   b58a8:	000bd8e1 	.word	0x000bd8e1
   b58ac:	200355a0 	.word	0x200355a0
   b58b0:	42276997 	.word	0x42276997
   b58b4:	c2af40b8 	.word	0xc2af40b8
   b58b8:	422781fe 	.word	0x422781fe
   b58bc:	42278afb 	.word	0x42278afb
   b58c0:	c2af4494 	.word	0xc2af4494
   b58c4:	42278971 	.word	0x42278971
   b58c8:	c2af6479 	.word	0xc2af6479
   b58cc:	000bd8e8 	.word	0x000bd8e8
   b58d0:	000bd8ee 	.word	0x000bd8ee
   b58d4:	000bd8f5 	.word	0x000bd8f5
   b58d8:	20035628 	.word	0x20035628
   b58dc:	4227631a 	.word	0x4227631a
   b58e0:	c2af4bd2 	.word	0xc2af4bd2
   b58e4:	42276ec4 	.word	0x42276ec4
   b58e8:	c2af4115 	.word	0xc2af4115
   b58ec:	422780b5 	.word	0x422780b5
   b58f0:	c2af4086 	.word	0xc2af4086
   b58f4:	42278200 	.word	0x42278200
   b58f8:	422781e1 	.word	0x422781e1
   b58fc:	c2af4476 	.word	0xc2af4476
   b5900:	000bd8fc 	.word	0x000bd8fc
   b5904:	000bd903 	.word	0x000bd903
   b5908:	000bd90a 	.word	0x000bd90a
   b590c:	20037eb8 	.word	0x20037eb8
   b5910:	f7fe ff2e 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5914:	a85a      	add	r0, sp, #360	; 0x168
   b5916:	f7fe ff17 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b591a:	a97e      	add	r1, sp, #504	; 0x1f8
   b591c:	911a      	str	r1, [sp, #104]	; 0x68
   b591e:	2107      	movs	r1, #7
   b5920:	ae10      	add	r6, sp, #64	; 0x40
   b5922:	911b      	str	r1, [sp, #108]	; 0x6c
   b5924:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5928:	4633      	mov	r3, r6
   b592a:	a85a      	add	r0, sp, #360	; 0x168
      lat = la;
   b592c:	edcd da7e 	vstr	s27, [sp, #504]	; 0x1f8
      lon = lo;
   b5930:	ed8d da7f 	vstr	s26, [sp, #508]	; 0x1fc
      lat = la;
   b5934:	edcd ca80 	vstr	s25, [sp, #512]	; 0x200
      lon = lo;
   b5938:	ed8d ca81 	vstr	s24, [sp, #516]	; 0x204
      lat = la;
   b593c:	edcd 8a82 	vstr	s17, [sp, #520]	; 0x208
      lon = lo;
   b5940:	ed8d 8a83 	vstr	s16, [sp, #524]	; 0x20c
      lat = la;
   b5944:	edcd ba84 	vstr	s23, [sp, #528]	; 0x210
      lon = lo;
   b5948:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
      lat = la;
   b594c:	edcd aa86 	vstr	s21, [sp, #536]	; 0x218
      lon = lo;
   b5950:	ed8d aa87 	vstr	s20, [sp, #540]	; 0x21c
      lat = la;
   b5954:	edcd 9a88 	vstr	s19, [sp, #544]	; 0x220
      lon = lo;
   b5958:	ed8d 9a89 	vstr	s18, [sp, #548]	; 0x224
      lat = la;
   b595c:	edcd 8a8a 	vstr	s17, [sp, #552]	; 0x228
      lon = lo;
   b5960:	ed8d 8a8b 	vstr	s16, [sp, #556]	; 0x22c
   b5964:	f7fe ff5a 	bl	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5968:	f10a 0e28 	add.w	lr, sl, #40	; 0x28
   b596c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5970:	46dc      	mov	ip, fp
   b5972:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5976:	9905      	ldr	r1, [sp, #20]
   b5978:	9a04      	ldr	r2, [sp, #16]
   b597a:	f8cd b060 	str.w	fp, [sp, #96]	; 0x60
   b597e:	c903      	ldmia	r1, {r0, r1}
   b5980:	e9c2 0100 	strd	r0, r1, [r2]
   b5984:	2106      	movs	r1, #6
   b5986:	9119      	str	r1, [sp, #100]	; 0x64
   b5988:	e897 0006 	ldmia.w	r7, {r1, r2}
   b598c:	a857      	add	r0, sp, #348	; 0x15c
   b598e:	f7ff fab7 	bl	b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5992:	f10a 0340 	add.w	r3, sl, #64	; 0x40
   b5996:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5998:	af61      	add	r7, sp, #388	; 0x184
   b599a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b599e:	2104      	movs	r1, #4
   b59a0:	ab16      	add	r3, sp, #88	; 0x58
   b59a2:	9716      	str	r7, [sp, #88]	; 0x58
   b59a4:	9117      	str	r1, [sp, #92]	; 0x5c
   b59a6:	e893 0006 	ldmia.w	r3, {r1, r2}
   b59aa:	a854      	add	r0, sp, #336	; 0x150
   b59ac:	f7ff faa8 	bl	b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b59b0:	4620      	mov	r0, r4
   b59b2:	49b8      	ldr	r1, [pc, #736]	; (b5c94 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab4>)
   b59b4:	f8df 8324 	ldr.w	r8, [pc, #804]	; b5cdc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xafc>
   b59b8:	f7fe fba6 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b59bc:	a872      	add	r0, sp, #456	; 0x1c8
   b59be:	49b6      	ldr	r1, [pc, #728]	; (b5c98 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab8>)
   b59c0:	f7fe fba2 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b59c4:	a878      	add	r0, sp, #480	; 0x1e0
   b59c6:	49b5      	ldr	r1, [pc, #724]	; (b5c9c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xabc>)
   b59c8:	f7fe fb9e 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b59cc:	ab72      	add	r3, sp, #456	; 0x1c8
   b59ce:	9314      	str	r3, [sp, #80]	; 0x50
   b59d0:	2302      	movs	r3, #2
   b59d2:	9315      	str	r3, [sp, #84]	; 0x54
   b59d4:	af0e      	add	r7, sp, #56	; 0x38
   b59d6:	aa14      	add	r2, sp, #80	; 0x50
   b59d8:	ca06      	ldmia	r2, {r1, r2}
   b59da:	463b      	mov	r3, r7
   b59dc:	a851      	add	r0, sp, #324	; 0x144
   b59de:	f7fe ff51 	bl	b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b59e2:	f10a 0250 	add.w	r2, sl, #80	; 0x50
   b59e6:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b59e8:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b59ec:	2204      	movs	r2, #4
   b59ee:	ab12      	add	r3, sp, #72	; 0x48
   b59f0:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   b59f4:	9213      	str	r2, [sp, #76]	; 0x4c
   b59f6:	e893 0006 	ldmia.w	r3, {r1, r2}
   b59fa:	a84e      	add	r0, sp, #312	; 0x138
   b59fc:	f7ff fa80 	bl	b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway purpleLineCTA = Railway(
   b5a00:	ab4e      	add	r3, sp, #312	; 0x138
   b5a02:	9302      	str	r3, [sp, #8]
   b5a04:	ab51      	add	r3, sp, #324	; 0x144
   b5a06:	aa57      	add	r2, sp, #348	; 0x15c
   b5a08:	a95a      	add	r1, sp, #360	; 0x168
   b5a0a:	e9cd 4300 	strd	r4, r3, [sp]
   b5a0e:	48a4      	ldr	r0, [pc, #656]	; (b5ca0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xac0>)
   b5a10:	ab54      	add	r3, sp, #336	; 0x150
   b5a12:	f7ff faf5 	bl	b5000 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5a16:	a84e      	add	r0, sp, #312	; 0x138
   b5a18:	f7fe feaa 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5a1c:	a851      	add	r0, sp, #324	; 0x144
   b5a1e:	f7fe fec8 	bl	b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5a22:	a878      	add	r0, sp, #480	; 0x1e0
   b5a24:	f004 fe58 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5a28:	a872      	add	r0, sp, #456	; 0x1c8
   b5a2a:	f004 fe55 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5a2e:	4620      	mov	r0, r4
   b5a30:	f004 fe52 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5a34:	a854      	add	r0, sp, #336	; 0x150
   b5a36:	f7fe fe9b 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5a3a:	a857      	add	r0, sp, #348	; 0x15c
   b5a3c:	f7fe fe98 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5a40:	a85a      	add	r0, sp, #360	; 0x168
   b5a42:	f7fe fe81 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5a46:	4b97      	ldr	r3, [pc, #604]	; (b5ca4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xac4>)
   b5a48:	937e      	str	r3, [sp, #504]	; 0x1f8
      lon = lo;
   b5a4a:	4b97      	ldr	r3, [pc, #604]	; (b5ca8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xac8>)
   b5a4c:	937f      	str	r3, [sp, #508]	; 0x1fc
      lat = la;
   b5a4e:	4b97      	ldr	r3, [pc, #604]	; (b5cac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xacc>)
   b5a50:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b5a52:	4b97      	ldr	r3, [pc, #604]	; (b5cb0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xad0>)
   b5a54:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b5a56:	4b97      	ldr	r3, [pc, #604]	; (b5cb4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xad4>)
   b5a58:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b5a5a:	4b97      	ldr	r3, [pc, #604]	; (b5cb8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xad8>)
   b5a5c:	9383      	str	r3, [sp, #524]	; 0x20c
);
   b5a5e:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5a60:	9310      	str	r3, [sp, #64]	; 0x40
   b5a62:	2308      	movs	r3, #8
   b5a64:	9311      	str	r3, [sp, #68]	; 0x44
   b5a66:	e896 0006 	ldmia.w	r6, {r1, r2}
   b5a6a:	ab07      	add	r3, sp, #28
   b5a6c:	a85a      	add	r0, sp, #360	; 0x168
   b5a6e:	f10a 06cc 	add.w	r6, sl, #204	; 0xcc
      lat = la;
   b5a72:	edcd 8a84 	vstr	s17, [sp, #528]	; 0x210
      lon = lo;
   b5a76:	ed8d 8a85 	vstr	s16, [sp, #532]	; 0x214
      lat = la;
   b5a7a:	edcd 9a86 	vstr	s19, [sp, #536]	; 0x218
      lon = lo;
   b5a7e:	ed8d 9a87 	vstr	s18, [sp, #540]	; 0x21c
      lat = la;
   b5a82:	edcd aa88 	vstr	s21, [sp, #544]	; 0x220
      lon = lo;
   b5a86:	ed8d aa89 	vstr	s20, [sp, #548]	; 0x224
      lat = la;
   b5a8a:	edcd ba8a 	vstr	s23, [sp, #552]	; 0x228
      lon = lo;
   b5a8e:	ed8d ba8b 	vstr	s22, [sp, #556]	; 0x22c
      lat = la;
   b5a92:	edcd 8a8c 	vstr	s17, [sp, #560]	; 0x230
      lon = lo;
   b5a96:	ed8d 8a8d 	vstr	s16, [sp, #564]	; 0x234
   b5a9a:	f7fe febf 	bl	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5a9e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5aa0:	46dc      	mov	ip, fp
   b5aa2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5aa6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   b5aaa:	9b04      	ldr	r3, [sp, #16]
   b5aac:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   b5ab0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b5ab4:	2307      	movs	r3, #7
   b5ab6:	930f      	str	r3, [sp, #60]	; 0x3c
   b5ab8:	e897 0006 	ldmia.w	r7, {r1, r2}
   b5abc:	a857      	add	r0, sp, #348	; 0x15c
   b5abe:	f7ff fa1f 	bl	b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5ac2:	f10a 03e8 	add.w	r3, sl, #232	; 0xe8
   b5ac6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5ac8:	ae61      	add	r6, sp, #388	; 0x184
   b5aca:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b5ace:	2204      	movs	r2, #4
   b5ad0:	ab0c      	add	r3, sp, #48	; 0x30
   b5ad2:	960c      	str	r6, [sp, #48]	; 0x30
   b5ad4:	920d      	str	r2, [sp, #52]	; 0x34
   b5ad6:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5ada:	a854      	add	r0, sp, #336	; 0x150
   b5adc:	f7ff fa10 	bl	b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5ae0:	4620      	mov	r0, r4
   b5ae2:	4976      	ldr	r1, [pc, #472]	; (b5cbc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xadc>)
   b5ae4:	4e76      	ldr	r6, [pc, #472]	; (b5cc0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae0>)
   b5ae6:	f7fe fb0f 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5aea:	a872      	add	r0, sp, #456	; 0x1c8
   b5aec:	4975      	ldr	r1, [pc, #468]	; (b5cc4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae4>)
   b5aee:	f7fe fb0b 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5af2:	a878      	add	r0, sp, #480	; 0x1e0
   b5af4:	4974      	ldr	r1, [pc, #464]	; (b5cc8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae8>)
   b5af6:	f7fe fb07 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5afa:	ab72      	add	r3, sp, #456	; 0x1c8
   b5afc:	930a      	str	r3, [sp, #40]	; 0x28
   b5afe:	2302      	movs	r3, #2
   b5b00:	930b      	str	r3, [sp, #44]	; 0x2c
   b5b02:	aa0a      	add	r2, sp, #40	; 0x28
   b5b04:	ab06      	add	r3, sp, #24
   b5b06:	ca06      	ldmia	r2, {r1, r2}
   b5b08:	a851      	add	r0, sp, #324	; 0x144
   b5b0a:	f10a 0af8 	add.w	sl, sl, #248	; 0xf8
   b5b0e:	f7fe feb9 	bl	b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5b12:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
   b5b16:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5b1a:	2204      	movs	r2, #4
   b5b1c:	ab08      	add	r3, sp, #32
   b5b1e:	f8cd 9020 	str.w	r9, [sp, #32]
   b5b22:	9209      	str	r2, [sp, #36]	; 0x24
   b5b24:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5b28:	a84e      	add	r0, sp, #312	; 0x138
   b5b2a:	f7ff f9e9 	bl	b4f00 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway pinkLineCTA = Railway(
   b5b2e:	ab4e      	add	r3, sp, #312	; 0x138
   b5b30:	9302      	str	r3, [sp, #8]
   b5b32:	ab51      	add	r3, sp, #324	; 0x144
   b5b34:	aa57      	add	r2, sp, #348	; 0x15c
   b5b36:	a95a      	add	r1, sp, #360	; 0x168
   b5b38:	e9cd 4300 	strd	r4, r3, [sp]
   b5b3c:	4863      	ldr	r0, [pc, #396]	; (b5ccc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaec>)
   b5b3e:	ab54      	add	r3, sp, #336	; 0x150
   b5b40:	f7ff fa5e 	bl	b5000 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5b44:	a84e      	add	r0, sp, #312	; 0x138
   b5b46:	f7fe fe13 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5b4a:	a851      	add	r0, sp, #324	; 0x144
   b5b4c:	f7fe fe31 	bl	b47b2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5b50:	a878      	add	r0, sp, #480	; 0x1e0
   b5b52:	f004 fdc1 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b56:	a872      	add	r0, sp, #456	; 0x1c8
   b5b58:	f004 fdbe 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b5c:	4620      	mov	r0, r4
   b5b5e:	f004 fdbb 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b62:	a854      	add	r0, sp, #336	; 0x150
   b5b64:	f7fe fe04 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5b68:	a857      	add	r0, sp, #348	; 0x15c
   b5b6a:	f7fe fe01 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5b6e:	a85a      	add	r0, sp, #360	; 0x168
   b5b70:	f7fe fdea 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5b74:	4b56      	ldr	r3, [pc, #344]	; (b5cd0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaf0>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b5b76:	4957      	ldr	r1, [pc, #348]	; (b5cd4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaf4>)
   b5b78:	609d      	str	r5, [r3, #8]
   b5b7a:	e9c3 5500 	strd	r5, r5, [r3]
   b5b7e:	4b56      	ldr	r3, [pc, #344]	; (b5cd8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaf8>)
   b5b80:	4856      	ldr	r0, [pc, #344]	; (b5cdc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xafc>)
   b5b82:	609d      	str	r5, [r3, #8]
   b5b84:	e9c3 5500 	strd	r5, r5, [r3]
   b5b88:	4b55      	ldr	r3, [pc, #340]	; (b5ce0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb00>)
   b5b8a:	e9c3 5500 	strd	r5, r5, [r3]
   b5b8e:	609d      	str	r5, [r3, #8]
   b5b90:	4b54      	ldr	r3, [pc, #336]	; (b5ce4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb04>)
   b5b92:	e9c3 5500 	strd	r5, r5, [r3]
   b5b96:	609d      	str	r5, [r3, #8]
   b5b98:	f002 fccc 	bl	b8534 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b5b9c:	4952      	ldr	r1, [pc, #328]	; (b5ce8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb08>)
   b5b9e:	4853      	ldr	r0, [pc, #332]	; (b5cec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb0c>)
   b5ba0:	f002 fcc8 	bl	b8534 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b5ba4:	4952      	ldr	r1, [pc, #328]	; (b5cf0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb10>)
   b5ba6:	4846      	ldr	r0, [pc, #280]	; (b5cc0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae0>)
   b5ba8:	f002 fcc4 	bl	b8534 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b5bac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5bae:	46a2      	mov	sl, r4
   b5bb0:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
   b5bb4:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b5bb8:	46c1      	mov	r9, r8
   b5bba:	f8d6 c000 	ldr.w	ip, [r6]
   b5bbe:	f8ca c000 	str.w	ip, [sl]
   b5bc2:	465e      	mov	r6, fp
   b5bc4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5bc6:	f859 3910 	ldr.w	r3, [r9], #-16
   b5bca:	9305      	str	r3, [sp, #20]
   b5bcc:	9b04      	ldr	r3, [sp, #16]
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b5bce:	f8df e148 	ldr.w	lr, [pc, #328]	; b5d18 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb38>
   b5bd2:	461a      	mov	r2, r3
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b5bd4:	4626      	mov	r6, r4
   b5bd6:	9b05      	ldr	r3, [sp, #20]
   b5bd8:	6013      	str	r3, [r2, #0]
   b5bda:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5bdc:	af72      	add	r7, sp, #456	; 0x1c8
      constexpr __shared_count() noexcept : _M_pi(0)
   b5bde:	e9ce 5500 	strd	r5, r5, [lr]
   b5be2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b5be4:	f8c7 c000 	str.w	ip, [r7]
        BleUuid sUuid(svcUuid);
   b5be8:	46dc      	mov	ip, fp
   b5bea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5bee:	ae7e      	add	r6, sp, #504	; 0x1f8
   b5bf0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5bf2:	9b05      	ldr	r3, [sp, #20]
   b5bf4:	6033      	str	r3, [r6, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5bf6:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5bf8:	9300      	str	r3, [sp, #0]
   b5bfa:	4670      	mov	r0, lr
   b5bfc:	ab72      	add	r3, sp, #456	; 0x1c8
   b5bfe:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5c02:	493c      	ldr	r1, [pc, #240]	; (b5cf4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb14>)
   b5c04:	f04f 0210 	mov.w	r2, #16
   b5c08:	f003 f98c 	bl	b8f24 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b5c0c:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b5cec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb0c>
   b5c10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5c14:	46a6      	mov	lr, r4
   b5c16:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5c1a:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b5c1e:	f8dc e000 	ldr.w	lr, [ip]
   b5c22:	f8ca e000 	str.w	lr, [sl]
   b5c26:	46dc      	mov	ip, fp
   b5c28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5c2c:	9b04      	ldr	r3, [sp, #16]
   b5c2e:	f8d8 9000 	ldr.w	r9, [r8]
   b5c32:	f8c3 9000 	str.w	r9, [r3]
        BleUuid cUuid(charUuid);
   b5c36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b5c38:	f8df 80e0 	ldr.w	r8, [pc, #224]	; b5d1c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb3c>
   b5c3c:	f50d 7ce4 	add.w	ip, sp, #456	; 0x1c8
        BleUuid sUuid(svcUuid);
   b5c40:	465c      	mov	r4, fp
        BleUuid cUuid(charUuid);
   b5c42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
      constexpr __shared_count() noexcept : _M_pi(0)
   b5c46:	e9c8 5500 	strd	r5, r5, [r8]
   b5c4a:	f8c7 e000 	str.w	lr, [r7]
        BleUuid sUuid(svcUuid);
   b5c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5c50:	af7e      	add	r7, sp, #504	; 0x1f8
   b5c52:	c70f      	stmia	r7!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5c54:	4b28      	ldr	r3, [pc, #160]	; (b5cf8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb18>)
        BleUuid sUuid(svcUuid);
   b5c56:	f8c6 9000 	str.w	r9, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5c5a:	9301      	str	r3, [sp, #4]
   b5c5c:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5c5e:	f04f 0204 	mov.w	r2, #4
   b5c62:	9300      	str	r3, [sp, #0]
   b5c64:	4640      	mov	r0, r8
   b5c66:	ab72      	add	r3, sp, #456	; 0x1c8
   b5c68:	4924      	ldr	r1, [pc, #144]	; (b5cfc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb1c>)
   b5c6a:	9502      	str	r5, [sp, #8]
   b5c6c:	f003 f95a 	bl	b8f24 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b5c70:	4923      	ldr	r1, [pc, #140]	; (b5d00 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb20>)
   b5c72:	4824      	ldr	r0, [pc, #144]	; (b5d04 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb24>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b5c74:	4c24      	ldr	r4, [pc, #144]	; (b5d08 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb28>)
   b5c76:	f003 fe78 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
   b5c7a:	4824      	ldr	r0, [pc, #144]	; (b5d0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb2c>)
   b5c7c:	f003 fc82 	bl	b9584 <_ZN9IPAddressC1Ev>
   b5c80:	491f      	ldr	r1, [pc, #124]	; (b5d00 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb20>)
   b5c82:	4823      	ldr	r0, [pc, #140]	; (b5d10 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb30>)
   b5c84:	f003 fe71 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
   b5c88:	491d      	ldr	r1, [pc, #116]	; (b5d00 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb20>)
   b5c8a:	4822      	ldr	r0, [pc, #136]	; (b5d14 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb34>)
   b5c8c:	f003 fe6d 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
   b5c90:	e046      	b.n	b5d20 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb40>
   b5c92:	bf00      	nop
   b5c94:	000bd911 	.word	0x000bd911
   b5c98:	000bd918 	.word	0x000bd918
   b5c9c:	000bd91f 	.word	0x000bd91f
   b5ca0:	2003e55c 	.word	0x2003e55c
   b5ca4:	42276a76 	.word	0x42276a76
   b5ca8:	c2af692b 	.word	0xc2af692b
   b5cac:	42276b5f 	.word	0x42276b5f
   b5cb0:	c2af56cd 	.word	0xc2af56cd
   b5cb4:	42278a2d 	.word	0x42278a2d
   b5cb8:	c2af56d8 	.word	0xc2af56d8
   b5cbc:	000bd926 	.word	0x000bd926
   b5cc0:	20035510 	.word	0x20035510
   b5cc4:	000bd92b 	.word	0x000bd92b
   b5cc8:	000bd932 	.word	0x000bd932
   b5ccc:	2003e4f0 	.word	0x2003e4f0
   b5cd0:	20035610 	.word	0x20035610
   b5cd4:	000bd939 	.word	0x000bd939
   b5cd8:	2003561c 	.word	0x2003561c
   b5cdc:	200354e8 	.word	0x200354e8
   b5ce0:	20035524 	.word	0x20035524
   b5ce4:	2003e69c 	.word	0x2003e69c
   b5ce8:	000bd95e 	.word	0x000bd95e
   b5cec:	200354fc 	.word	0x200354fc
   b5cf0:	000bd983 	.word	0x000bd983
   b5cf4:	000bd9a8 	.word	0x000bd9a8
   b5cf8:	000b4959 	.word	0x000b4959
   b5cfc:	000bd9ab 	.word	0x000bd9ab
   b5d00:	000bdbc2 	.word	0x000bdbc2
   b5d04:	2003e634 	.word	0x2003e634
   b5d08:	20037f24 	.word	0x20037f24
   b5d0c:	2003e644 	.word	0x2003e644
   b5d10:	2003e65c 	.word	0x2003e65c
   b5d14:	2003e670 	.word	0x2003e670
   b5d18:	2003e6ac 	.word	0x2003e6ac
   b5d1c:	2003e694 	.word	0x2003e694
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b5d20:	4945      	ldr	r1, [pc, #276]	; (b5e38 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc58>)
   b5d22:	4846      	ldr	r0, [pc, #280]	; (b5e3c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc5c>)
   b5d24:	f003 fe21 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
HttpClient http;
   b5d28:	4845      	ldr	r0, [pc, #276]	; (b5e40 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc60>)
   b5d2a:	f001 f94f 	bl	b6fcc <_ZN10HttpClientC1Ev>
   b5d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5d32:	9300      	str	r3, [sp, #0]
   b5d34:	f242 7210 	movw	r2, #10000	; 0x2710
   b5d38:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b5d3c:	4b41      	ldr	r3, [pc, #260]	; (b5e44 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc64>)
   b5d3e:	4620      	mov	r0, r4
   b5d40:	f001 fb1c 	bl	b737c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b5d44:	4b40      	ldr	r3, [pc, #256]	; (b5e48 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc68>)
String SSID = "";
   b5d46:	493c      	ldr	r1, [pc, #240]	; (b5e38 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc58>)
   b5d48:	6023      	str	r3, [r4, #0]
   b5d4a:	4840      	ldr	r0, [pc, #256]	; (b5e4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc6c>)
   b5d4c:	f003 fe0d 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
String password = "";
   b5d50:	4939      	ldr	r1, [pc, #228]	; (b5e38 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc58>)
   b5d52:	483f      	ldr	r0, [pc, #252]	; (b5e50 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc70>)
   b5d54:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   b5d58:	ecbd 8b0e 	vpop	{d8-d14}
   b5d5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
String password = "";
   b5d60:	f003 be03 	b.w	b996a <_ZN6StringC1EPK19__FlashStringHelper>
   b5d64:	483a      	ldr	r0, [pc, #232]	; (b5e50 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc70>)
   b5d66:	f003 fdb5 	bl	b98d4 <_ZN6StringD1Ev>
String SSID = "";
   b5d6a:	4838      	ldr	r0, [pc, #224]	; (b5e4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc6c>)
   b5d6c:	f003 fdb2 	bl	b98d4 <_ZN6StringD1Ev>
JsonParserStatic<10000, 1000> parser;
   b5d70:	4838      	ldr	r0, [pc, #224]	; (b5e54 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc74>)
   b5d72:	f7fe f9a1 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5d76:	4b32      	ldr	r3, [pc, #200]	; (b5e40 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc60>)
   b5d78:	4a37      	ldr	r2, [pc, #220]	; (b5e58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc78>)
	if (_M_pi != nullptr)
   b5d7a:	699c      	ldr	r4, [r3, #24]
   b5d7c:	601a      	str	r2, [r3, #0]
   b5d7e:	b17c      	cbz	r4, b5da0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbc0>
      if (--_M_use_count == 0)
   b5d80:	6863      	ldr	r3, [r4, #4]
   b5d82:	3b01      	subs	r3, #1
   b5d84:	6063      	str	r3, [r4, #4]
   b5d86:	b95b      	cbnz	r3, b5da0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbc0>
          _M_dispose();
   b5d88:	6823      	ldr	r3, [r4, #0]
   b5d8a:	4620      	mov	r0, r4
   b5d8c:	689b      	ldr	r3, [r3, #8]
   b5d8e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5d90:	68a3      	ldr	r3, [r4, #8]
   b5d92:	3b01      	subs	r3, #1
   b5d94:	60a3      	str	r3, [r4, #8]
   b5d96:	b91b      	cbnz	r3, b5da0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbc0>
            _M_destroy();
   b5d98:	6823      	ldr	r3, [r4, #0]
   b5d9a:	4620      	mov	r0, r4
   b5d9c:	68db      	ldr	r3, [r3, #12]
   b5d9e:	4798      	blx	r3
   b5da0:	4826      	ldr	r0, [pc, #152]	; (b5e3c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc5c>)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5da2:	4c2e      	ldr	r4, [pc, #184]	; (b5e5c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc7c>)
   b5da4:	f003 fd96 	bl	b98d4 <_ZN6StringD1Ev>
} http_request_t;
   b5da8:	482d      	ldr	r0, [pc, #180]	; (b5e60 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc80>)
   b5daa:	f003 fd93 	bl	b98d4 <_ZN6StringD1Ev>
   b5dae:	482d      	ldr	r0, [pc, #180]	; (b5e64 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc84>)
   b5db0:	f003 fd90 	bl	b98d4 <_ZN6StringD1Ev>
   b5db4:	482c      	ldr	r0, [pc, #176]	; (b5e68 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc88>)
   b5db6:	f003 fd8d 	bl	b98d4 <_ZN6StringD1Ev>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b5dba:	482c      	ldr	r0, [pc, #176]	; (b5e6c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc8c>)
   b5dbc:	f002 fd99 	bl	b88f2 <_ZN8particle17BleCharacteristicD1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b5dc0:	482b      	ldr	r0, [pc, #172]	; (b5e70 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc90>)
   b5dc2:	f002 fd96 	bl	b88f2 <_ZN8particle17BleCharacteristicD1Ev>
      }
   b5dc6:	482b      	ldr	r0, [pc, #172]	; (b5e74 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc94>)
   b5dc8:	f7fe fcd2 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5dcc:	482a      	ldr	r0, [pc, #168]	; (b5e78 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc98>)
   b5dce:	f7fe fccf 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
std::vector<Railway> ctaRailways;
   b5dd2:	482a      	ldr	r0, [pc, #168]	; (b5e7c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc9c>)
   b5dd4:	f7ff f84f 	bl	b4e76 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
	__destroy(__first, __last);
   b5dd8:	e9d4 0100 	ldrd	r0, r1, [r4]
   b5ddc:	f7ff f859 	bl	b4e92 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   b5de0:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b5de2:	b118      	cbz	r0, b5dec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc0c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b5de4:	68a1      	ldr	r1, [r4, #8]
   b5de6:	1a09      	subs	r1, r1, r0
   b5de8:	f7fe f95b 	bl	b40a2 <_ZdlPvj>
Railway pinkLineCTA = Railway(
   b5dec:	4824      	ldr	r0, [pc, #144]	; (b5e80 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xca0>)
   b5dee:	f7ff f817 	bl	b4e20 <_ZN7RailwayD1Ev>
Railway purpleLineCTA = Railway(
   b5df2:	4824      	ldr	r0, [pc, #144]	; (b5e84 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xca4>)
   b5df4:	f7ff f814 	bl	b4e20 <_ZN7RailwayD1Ev>
Railway orangeLineCTA = Railway(
   b5df8:	4823      	ldr	r0, [pc, #140]	; (b5e88 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xca8>)
   b5dfa:	f7ff f811 	bl	b4e20 <_ZN7RailwayD1Ev>
Railway greenLineCTA = Railway(
   b5dfe:	4823      	ldr	r0, [pc, #140]	; (b5e8c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcac>)
   b5e00:	f7ff f80e 	bl	b4e20 <_ZN7RailwayD1Ev>
Railway brownLineCTA = Railway(
   b5e04:	4822      	ldr	r0, [pc, #136]	; (b5e90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcb0>)
   b5e06:	f7ff f80b 	bl	b4e20 <_ZN7RailwayD1Ev>
Railway blueLineCTA = Railway(
   b5e0a:	4822      	ldr	r0, [pc, #136]	; (b5e94 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcb4>)
   b5e0c:	f7ff f808 	bl	b4e20 <_ZN7RailwayD1Ev>
Railway redLineCTA = Railway(
   b5e10:	4821      	ldr	r0, [pc, #132]	; (b5e98 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcb8>)
   b5e12:	f7ff f805 	bl	b4e20 <_ZN7RailwayD1Ev>
        if (wakeupSource_) {
   b5e16:	6830      	ldr	r0, [r6, #0]
   b5e18:	b138      	cbz	r0, b5e2a <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc4a>
   b5e1a:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   b5e1e:	ecbd 8b0e 	vpop	{d8-d14}
   b5e22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            free(wakeupSource_);
   b5e26:	f002 b931 	b.w	b808c <free>
   b5e2a:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   b5e2e:	ecbd 8b0e 	vpop	{d8-d14}
   b5e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5e36:	bf00      	nop
   b5e38:	000bdbc2 	.word	0x000bdbc2
   b5e3c:	2003e684 	.word	0x2003e684
   b5e40:	2003569c 	.word	0x2003569c
   b5e44:	2003a660 	.word	0x2003a660
   b5e48:	000bda6c 	.word	0x000bda6c
   b5e4c:	200354cc 	.word	0x200354cc
   b5e50:	2003e4e0 	.word	0x2003e4e0
   b5e54:	20037f24 	.word	0x20037f24
   b5e58:	000bdecc 	.word	0x000bdecc
   b5e5c:	20035610 	.word	0x20035610
   b5e60:	2003e670 	.word	0x2003e670
   b5e64:	2003e65c 	.word	0x2003e65c
   b5e68:	2003e634 	.word	0x2003e634
   b5e6c:	2003e694 	.word	0x2003e694
   b5e70:	2003e6ac 	.word	0x2003e6ac
   b5e74:	2003e69c 	.word	0x2003e69c
   b5e78:	20035524 	.word	0x20035524
   b5e7c:	2003561c 	.word	0x2003561c
   b5e80:	2003e4f0 	.word	0x2003e4f0
   b5e84:	2003e55c 	.word	0x2003e55c
   b5e88:	20037eb8 	.word	0x20037eb8
   b5e8c:	20035628 	.word	0x20035628
   b5e90:	200355a0 	.word	0x200355a0
   b5e94:	20035534 	.word	0x20035534
   b5e98:	2003e5c8 	.word	0x2003e5c8

000b5e9c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b5e9c:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b5e9e:	b510      	push	{r4, lr}
   b5ea0:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b5ea2:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b5ea6:	d005      	beq.n	b5eb4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b5ea8:	4601      	mov	r1, r0
   b5eaa:	4622      	mov	r2, r4
   b5eac:	4618      	mov	r0, r3
   b5eae:	f005 fbd1 	bl	bb654 <memmove>
   b5eb2:	4603      	mov	r3, r0
	}
   b5eb4:	1918      	adds	r0, r3, r4
   b5eb6:	bd10      	pop	{r4, pc}

000b5eb8 <_ZN7RailwayC1ERKS_>:
class Railway{
   b5eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5ebc:	460d      	mov	r5, r1
   b5ebe:	4604      	mov	r4, r0
   b5ec0:	f7fe fd14 	bl	b48ec <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5ec4:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5ec8:	2600      	movs	r6, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5eca:	1ac9      	subs	r1, r1, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5ecc:	e9c4 6603 	strd	r6, r6, [r4, #12]
   b5ed0:	6166      	str	r6, [r4, #20]
      { _M_create_storage(__n); }
   b5ed2:	1089      	asrs	r1, r1, #2
   b5ed4:	f104 000c 	add.w	r0, r4, #12
   b5ed8:	f7fe ff82 	bl	b4de0 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
			      _Category>::__copy_m(__first, __last, __result);
   b5edc:	68e2      	ldr	r2, [r4, #12]
   b5ede:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
   b5ee2:	f7ff ffdb 	bl	b5e9c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b5ee6:	f105 0118 	add.w	r1, r5, #24
	this->_M_impl._M_finish =
   b5eea:	6120      	str	r0, [r4, #16]
   b5eec:	f104 0018 	add.w	r0, r4, #24
   b5ef0:	f7fe ffec 	bl	b4ecc <_ZNSt6vectorIiSaIiEEC1ERKS1_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5ef4:	e9d5 3709 	ldrd	r3, r7, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5ef8:	4826      	ldr	r0, [pc, #152]	; (b5f94 <_ZN7RailwayC1ERKS_+0xdc>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5efa:	62e6      	str	r6, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5efc:	1aff      	subs	r7, r7, r3
   b5efe:	10bb      	asrs	r3, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5f00:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5f04:	4358      	muls	r0, r3
   b5f06:	f7fe f8ed 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5f0a:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5f0e:	4407      	add	r7, r0
   b5f10:	62e7      	str	r7, [r4, #44]	; 0x2c
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5f12:	e9d5 7809 	ldrd	r7, r8, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5f16:	4606      	mov	r6, r0
   b5f18:	45b8      	cmp	r8, r7
   b5f1a:	d007      	beq.n	b5f2c <_ZN7RailwayC1ERKS_+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5f1c:	b11e      	cbz	r6, b5f26 <_ZN7RailwayC1ERKS_+0x6e>
   b5f1e:	4639      	mov	r1, r7
   b5f20:	4630      	mov	r0, r6
   b5f22:	f7fe ffd3 	bl	b4ecc <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5f26:	360c      	adds	r6, #12
   b5f28:	370c      	adds	r7, #12
   b5f2a:	e7f5      	b.n	b5f18 <_ZN7RailwayC1ERKS_+0x60>
	this->_M_impl._M_finish =
   b5f2c:	62a6      	str	r6, [r4, #40]	; 0x28
   b5f2e:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b5f32:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b5f36:	f7fe f971 	bl	b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f3a:	e9d5 3712 	ldrd	r3, r7, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5f3e:	4815      	ldr	r0, [pc, #84]	; (b5f94 <_ZN7RailwayC1ERKS_+0xdc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f40:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5f42:	2300      	movs	r3, #0
   b5f44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b5f48:	6523      	str	r3, [r4, #80]	; 0x50
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f4a:	10fb      	asrs	r3, r7, #3
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5f4c:	4358      	muls	r0, r3
   b5f4e:	f7fe f915 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5f52:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5f56:	4407      	add	r7, r0
   b5f58:	6527      	str	r7, [r4, #80]	; 0x50
   b5f5a:	e9d5 7812 	ldrd	r7, r8, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5f5e:	4606      	mov	r6, r0
   b5f60:	45b8      	cmp	r8, r7
   b5f62:	d007      	beq.n	b5f74 <_ZN7RailwayC1ERKS_+0xbc>
   b5f64:	b11e      	cbz	r6, b5f6e <_ZN7RailwayC1ERKS_+0xb6>
   b5f66:	4639      	mov	r1, r7
   b5f68:	4630      	mov	r0, r6
   b5f6a:	f7fe f957 	bl	b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b5f6e:	3618      	adds	r6, #24
   b5f70:	3718      	adds	r7, #24
   b5f72:	e7f5      	b.n	b5f60 <_ZN7RailwayC1ERKS_+0xa8>
	this->_M_impl._M_finish =
   b5f74:	64e6      	str	r6, [r4, #76]	; 0x4c
   b5f76:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b5f78:	6563      	str	r3, [r4, #84]	; 0x54
   b5f7a:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b5f7c:	65a3      	str	r3, [r4, #88]	; 0x58
   b5f7e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b5f80:	65e3      	str	r3, [r4, #92]	; 0x5c
   b5f82:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b5f84:	6623      	str	r3, [r4, #96]	; 0x60
   b5f86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b5f88:	6663      	str	r3, [r4, #100]	; 0x64
   b5f8a:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b5f8c:	66a3      	str	r3, [r4, #104]	; 0x68
   b5f8e:	4620      	mov	r0, r4
   b5f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5f94:	aaaaaaab 	.word	0xaaaaaaab

000b5f98 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b5f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f9a:	e9d1 3700 	ldrd	r3, r7, [r1]
   b5f9e:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5fa0:	2300      	movs	r3, #0
   b5fa2:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   b5fa6:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5fa8:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5faa:	480d      	ldr	r0, [pc, #52]	; (b5fe0 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x48>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5fac:	10bb      	asrs	r3, r7, #2
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5fae:	4358      	muls	r0, r3
      vector(const vector& __x)
   b5fb0:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5fb2:	f7fe f8d1 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5fb6:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5fba:	4407      	add	r7, r0
   b5fbc:	60a7      	str	r7, [r4, #8]
   b5fbe:	e9d6 6700 	ldrd	r6, r7, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5fc2:	4605      	mov	r5, r0
   b5fc4:	42b7      	cmp	r7, r6
   b5fc6:	d007      	beq.n	b5fd8 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x40>
   b5fc8:	b11d      	cbz	r5, b5fd2 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x3a>
   b5fca:	4631      	mov	r1, r6
   b5fcc:	4628      	mov	r0, r5
   b5fce:	f7ff ff73 	bl	b5eb8 <_ZN7RailwayC1ERKS_>
   b5fd2:	356c      	adds	r5, #108	; 0x6c
   b5fd4:	366c      	adds	r6, #108	; 0x6c
   b5fd6:	e7f5      	b.n	b5fc4 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b5fd8:	6065      	str	r5, [r4, #4]
      }
   b5fda:	4620      	mov	r0, r4
   b5fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5fde:	bf00      	nop
   b5fe0:	684bda13 	.word	0x684bda13

000b5fe4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b5fe4:	b570      	push	{r4, r5, r6, lr}
   b5fe6:	4605      	mov	r5, r0
   b5fe8:	460e      	mov	r6, r1
   b5fea:	4614      	mov	r4, r2
	      for (; __first != __last; ++__first, (void)++__cur)
   b5fec:	42b5      	cmp	r5, r6
   b5fee:	d00f      	beq.n	b6010 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x2c>
   b5ff0:	b15c      	cbz	r4, b600a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x26>
   b5ff2:	4629      	mov	r1, r5
   b5ff4:	4620      	mov	r0, r4
   b5ff6:	f7ff ffcf 	bl	b5f98 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b5ffa:	f105 010c 	add.w	r1, r5, #12
   b5ffe:	f104 000c 	add.w	r0, r4, #12
   b6002:	f7fe f90b 	bl	b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b6006:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b6008:	6263      	str	r3, [r4, #36]	; 0x24
   b600a:	3528      	adds	r5, #40	; 0x28
   b600c:	3428      	adds	r4, #40	; 0x28
   b600e:	e7ed      	b.n	b5fec <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x8>
	}
   b6010:	4620      	mov	r0, r4
   b6012:	bd70      	pop	{r4, r5, r6, pc}

000b6014 <_ZN7RailwayaSERKS_.isra.0>:
   b6014:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6018:	4604      	mov	r4, r0
   b601a:	460d      	mov	r5, r1
   b601c:	f7fe f93a 	bl	b4294 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
   b6020:	f105 020c 	add.w	r2, r5, #12
   b6024:	f104 030c 	add.w	r3, r4, #12
      if (&__x != this)
   b6028:	429a      	cmp	r2, r3
   b602a:	d025      	beq.n	b6078 <_ZN7RailwayaSERKS_.isra.0+0x64>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b602c:	e9d5 8103 	ldrd	r8, r1, [r5, #12]
			 - this->_M_impl._M_start); }
   b6030:	68e2      	ldr	r2, [r4, #12]
   b6032:	6963      	ldr	r3, [r4, #20]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6034:	eba1 0608 	sub.w	r6, r1, r8
			 - this->_M_impl._M_start); }
   b6038:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b603a:	429e      	cmp	r6, r3
   b603c:	d94a      	bls.n	b60d4 <_ZN7RailwayaSERKS_.isra.0+0xc0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b603e:	2e00      	cmp	r6, #0
   b6040:	d046      	beq.n	b60d0 <_ZN7RailwayaSERKS_.isra.0+0xbc>
	if (__n > this->_M_max_size())
   b6042:	4b5d      	ldr	r3, [pc, #372]	; (b61b8 <_ZN7RailwayaSERKS_.isra.0+0x1a4>)
   b6044:	429e      	cmp	r6, r3
   b6046:	d901      	bls.n	b604c <_ZN7RailwayaSERKS_.isra.0+0x38>
	  std::__throw_bad_alloc();
   b6048:	f004 fb0e 	bl	ba668 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b604c:	4630      	mov	r0, r6
   b604e:	9101      	str	r1, [sp, #4]
   b6050:	f7fe f821 	bl	b4096 <_Znwj>
   b6054:	9901      	ldr	r1, [sp, #4]
   b6056:	4607      	mov	r7, r0
   b6058:	463a      	mov	r2, r7
   b605a:	4640      	mov	r0, r8
   b605c:	f7ff ff1e 	bl	b5e9c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b6060:	68e0      	ldr	r0, [r4, #12]
	if (__p)
   b6062:	b118      	cbz	r0, b606c <_ZN7RailwayaSERKS_.isra.0+0x58>
			    - this->_M_impl._M_start);
   b6064:	6961      	ldr	r1, [r4, #20]
	::operator delete(__p
   b6066:	1a09      	subs	r1, r1, r0
   b6068:	f7fe f81b 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b606c:	60e7      	str	r7, [r4, #12]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b606e:	4437      	add	r7, r6
   b6070:	6167      	str	r7, [r4, #20]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b6072:	68e3      	ldr	r3, [r4, #12]
   b6074:	4433      	add	r3, r6
   b6076:	6123      	str	r3, [r4, #16]
   b6078:	f105 0118 	add.w	r1, r5, #24
   b607c:	f104 0018 	add.w	r0, r4, #24
   b6080:	f7fe ff68 	bl	b4f54 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
   b6084:	f105 0324 	add.w	r3, r5, #36	; 0x24
   b6088:	f104 0224 	add.w	r2, r4, #36	; 0x24
      if (&__x != this)
   b608c:	4293      	cmp	r3, r2
   b608e:	d045      	beq.n	b611c <_ZN7RailwayaSERKS_.isra.0+0x108>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6090:	e9d5 6a09 	ldrd	r6, sl, [r5, #36]	; 0x24
			 - this->_M_impl._M_start); }
   b6094:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   b6098:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b609a:	ebaa 0806 	sub.w	r8, sl, r6
			 - this->_M_impl._M_start); }
   b609e:	eba3 0309 	sub.w	r3, r3, r9
	  if (__xlen > capacity())
   b60a2:	4543      	cmp	r3, r8
   b60a4:	d255      	bcs.n	b6152 <_ZN7RailwayaSERKS_.isra.0+0x13e>
	  pointer __result = this->_M_allocate(__n);
   b60a6:	4845      	ldr	r0, [pc, #276]	; (b61bc <_ZN7RailwayaSERKS_.isra.0+0x1a8>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b60a8:	ea4f 03a8 	mov.w	r3, r8, asr #2
	  pointer __result = this->_M_allocate(__n);
   b60ac:	4358      	muls	r0, r3
   b60ae:	f7fe f819 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b60b2:	4607      	mov	r7, r0
	  _ForwardIterator __cur = __result;
   b60b4:	4681      	mov	r9, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b60b6:	45b2      	cmp	sl, r6
   b60b8:	d020      	beq.n	b60fc <_ZN7RailwayaSERKS_.isra.0+0xe8>
   b60ba:	f1b9 0f00 	cmp.w	r9, #0
   b60be:	d003      	beq.n	b60c8 <_ZN7RailwayaSERKS_.isra.0+0xb4>
   b60c0:	4631      	mov	r1, r6
   b60c2:	4648      	mov	r0, r9
   b60c4:	f7fe ff02 	bl	b4ecc <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b60c8:	f109 090c 	add.w	r9, r9, #12
   b60cc:	360c      	adds	r6, #12
   b60ce:	e7f2      	b.n	b60b6 <_ZN7RailwayaSERKS_.isra.0+0xa2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b60d0:	4637      	mov	r7, r6
   b60d2:	e7c1      	b.n	b6058 <_ZN7RailwayaSERKS_.isra.0+0x44>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b60d4:	6923      	ldr	r3, [r4, #16]
   b60d6:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b60d8:	429e      	cmp	r6, r3
   b60da:	d803      	bhi.n	b60e4 <_ZN7RailwayaSERKS_.isra.0+0xd0>
   b60dc:	4640      	mov	r0, r8
   b60de:	f7ff fedd 	bl	b5e9c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
    { return std::uninitialized_copy(__first, __last, __result); }
   b60e2:	e7c6      	b.n	b6072 <_ZN7RailwayaSERKS_.isra.0+0x5e>
   b60e4:	eb08 0103 	add.w	r1, r8, r3
   b60e8:	4640      	mov	r0, r8
   b60ea:	f7ff fed7 	bl	b5e9c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b60ee:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
   b60f2:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
   b60f6:	1a10      	subs	r0, r2, r0
   b60f8:	4418      	add	r0, r3
   b60fa:	e7f0      	b.n	b60de <_ZN7RailwayaSERKS_.isra.0+0xca>
	__destroy(__first, __last);
   b60fc:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b6100:	f7fe fe83 	bl	b4e0a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	      _M_deallocate(this->_M_impl._M_start,
   b6104:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b6106:	b118      	cbz	r0, b6110 <_ZN7RailwayaSERKS_.isra.0+0xfc>
			    - this->_M_impl._M_start);
   b6108:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b610a:	1a09      	subs	r1, r1, r0
   b610c:	f7fd ffc9 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b6110:	6267      	str	r7, [r4, #36]	; 0x24
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b6112:	4447      	add	r7, r8
   b6114:	62e7      	str	r7, [r4, #44]	; 0x2c
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b6116:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b6118:	4443      	add	r3, r8
   b611a:	62a3      	str	r3, [r4, #40]	; 0x28
	this->_M_assign(__str);
   b611c:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b6120:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b6124:	f004 faf6 	bl	ba714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b6128:	f105 0148 	add.w	r1, r5, #72	; 0x48
   b612c:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b6130:	f7fe f902 	bl	b4338 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
   b6134:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b6136:	6563      	str	r3, [r4, #84]	; 0x54
   b6138:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b613a:	65a3      	str	r3, [r4, #88]	; 0x58
   b613c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b613e:	65e3      	str	r3, [r4, #92]	; 0x5c
   b6140:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b6142:	6623      	str	r3, [r4, #96]	; 0x60
   b6144:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b6146:	6663      	str	r3, [r4, #100]	; 0x64
   b6148:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b614a:	66a3      	str	r3, [r4, #104]	; 0x68
   b614c:	b002      	add	sp, #8
   b614e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6152:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   b6154:	eba7 0709 	sub.w	r7, r7, r9
	  else if (size() >= __xlen)
   b6158:	45b8      	cmp	r8, r7
   b615a:	d80d      	bhi.n	b6178 <_ZN7RailwayaSERKS_.isra.0+0x164>
   b615c:	4630      	mov	r0, r6
   b615e:	464a      	mov	r2, r9
   b6160:	4651      	mov	r1, sl
   b6162:	f7fe ff2f 	bl	b4fc4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      : _M_current(__i) { }
   b6166:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b6168:	4606      	mov	r6, r0
	  for (; __first != __last; ++__first)
   b616a:	42b7      	cmp	r7, r6
   b616c:	d0d3      	beq.n	b6116 <_ZN7RailwayaSERKS_.isra.0+0x102>
      }
   b616e:	4630      	mov	r0, r6
   b6170:	f7fe fafe 	bl	b4770 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b6174:	360c      	adds	r6, #12
	return *this;
   b6176:	e7f8      	b.n	b616a <_ZN7RailwayaSERKS_.isra.0+0x156>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6178:	4b10      	ldr	r3, [pc, #64]	; (b61bc <_ZN7RailwayaSERKS_.isra.0+0x1a8>)
   b617a:	10bf      	asrs	r7, r7, #2
   b617c:	435f      	muls	r7, r3
   b617e:	2f00      	cmp	r7, #0
   b6180:	dd08      	ble.n	b6194 <_ZN7RailwayaSERKS_.isra.0+0x180>
	      *__result = *__first;
   b6182:	4631      	mov	r1, r6
   b6184:	4648      	mov	r0, r9
   b6186:	f7fe fee5 	bl	b4f54 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b618a:	360c      	adds	r6, #12
	      ++__result;
   b618c:	f109 090c 	add.w	r9, r9, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6190:	3f01      	subs	r7, #1
   b6192:	e7f4      	b.n	b617e <_ZN7RailwayaSERKS_.isra.0+0x16a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6194:	e9d4 6709 	ldrd	r6, r7, [r4, #36]	; 0x24
   b6198:	1bb9      	subs	r1, r7, r6
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b619a:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					  __x._M_impl._M_finish,
   b619c:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b61a0:	440e      	add	r6, r1
	      for (; __first != __last; ++__first, (void)++__cur)
   b61a2:	45b1      	cmp	r9, r6
   b61a4:	d0b7      	beq.n	b6116 <_ZN7RailwayaSERKS_.isra.0+0x102>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b61a6:	b11f      	cbz	r7, b61b0 <_ZN7RailwayaSERKS_.isra.0+0x19c>
   b61a8:	4631      	mov	r1, r6
   b61aa:	4638      	mov	r0, r7
   b61ac:	f7fe fe8e 	bl	b4ecc <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b61b0:	360c      	adds	r6, #12
   b61b2:	370c      	adds	r7, #12
   b61b4:	e7f5      	b.n	b61a2 <_ZN7RailwayaSERKS_.isra.0+0x18e>
   b61b6:	bf00      	nop
   b61b8:	7ffffffc 	.word	0x7ffffffc
   b61bc:	aaaaaaab 	.word	0xaaaaaaab

000b61c0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b61c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b61c4:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b61c6:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b61c8:	480b      	ldr	r0, [pc, #44]	; (b61f8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x38>)
   b61ca:	10a4      	asrs	r4, r4, #2
   b61cc:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b61ce:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b61d0:	4627      	mov	r7, r4
   b61d2:	4690      	mov	r8, r2
   b61d4:	2f00      	cmp	r7, #0
   b61d6:	dd08      	ble.n	b61ea <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x2a>
	      *__result = *__first;
   b61d8:	4629      	mov	r1, r5
   b61da:	4640      	mov	r0, r8
   b61dc:	f7ff ff1a 	bl	b6014 <_ZN7RailwayaSERKS_.isra.0>
	      ++__first;
   b61e0:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b61e2:	f108 086c 	add.w	r8, r8, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b61e6:	3f01      	subs	r7, #1
   b61e8:	e7f4      	b.n	b61d4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x14>
	  return __result;
   b61ea:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b61ee:	206c      	movs	r0, #108	; 0x6c
   b61f0:	fb00 6004 	mla	r0, r0, r4, r6
   b61f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b61f8:	684bda13 	.word	0x684bda13

000b61fc <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>:
      if (&__x != this)
   b61fc:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b61fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6202:	4604      	mov	r4, r0
   b6204:	460f      	mov	r7, r1
      if (&__x != this)
   b6206:	d02c      	beq.n	b6262 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x66>
   b6208:	e9d1 5a00 	ldrd	r5, sl, [r1]
			 - this->_M_impl._M_start); }
   b620c:	f8d0 9000 	ldr.w	r9, [r0]
   b6210:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6212:	ebaa 0805 	sub.w	r8, sl, r5
			 - this->_M_impl._M_start); }
   b6216:	eba3 0309 	sub.w	r3, r3, r9
	  if (__xlen > capacity())
   b621a:	4543      	cmp	r3, r8
   b621c:	d223      	bcs.n	b6266 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x6a>
	  pointer __result = this->_M_allocate(__n);
   b621e:	482a      	ldr	r0, [pc, #168]	; (b62c8 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xcc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6220:	ea4f 03a8 	mov.w	r3, r8, asr #2
	  pointer __result = this->_M_allocate(__n);
   b6224:	4358      	muls	r0, r3
   b6226:	f7fd ff97 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
   b622a:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b622c:	4607      	mov	r7, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b622e:	45aa      	cmp	sl, r5
   b6230:	d007      	beq.n	b6242 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x46>
   b6232:	b11f      	cbz	r7, b623c <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x40>
   b6234:	4629      	mov	r1, r5
   b6236:	4638      	mov	r0, r7
   b6238:	f7ff fe3e 	bl	b5eb8 <_ZN7RailwayC1ERKS_>
   b623c:	376c      	adds	r7, #108	; 0x6c
   b623e:	356c      	adds	r5, #108	; 0x6c
   b6240:	e7f5      	b.n	b622e <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x32>
	__destroy(__first, __last);
   b6242:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6246:	f7fe fe0b 	bl	b4e60 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	      _M_deallocate(this->_M_impl._M_start,
   b624a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b624c:	b118      	cbz	r0, b6256 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x5a>
			    - this->_M_impl._M_start);
   b624e:	68a1      	ldr	r1, [r4, #8]
   b6250:	1a09      	subs	r1, r1, r0
   b6252:	f7fd ff26 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b6256:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b6258:	4446      	add	r6, r8
   b625a:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b625c:	6823      	ldr	r3, [r4, #0]
   b625e:	4443      	add	r3, r8
   b6260:	6063      	str	r3, [r4, #4]
    }
   b6262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6266:	6846      	ldr	r6, [r0, #4]
   b6268:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b626c:	45b0      	cmp	r8, r6
   b626e:	d80d      	bhi.n	b628c <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x90>
			      _Category>::__copy_m(__first, __last, __result);
   b6270:	4628      	mov	r0, r5
   b6272:	464a      	mov	r2, r9
   b6274:	4651      	mov	r1, sl
   b6276:	f7ff ffa3 	bl	b61c0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      : _M_current(__i) { }
   b627a:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b627c:	4605      	mov	r5, r0
	  for (; __first != __last; ++__first)
   b627e:	42ae      	cmp	r6, r5
   b6280:	d0ec      	beq.n	b625c <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x60>
      __pointer->~_Tp();
   b6282:	4628      	mov	r0, r5
   b6284:	f7fe fdcc 	bl	b4e20 <_ZN7RailwayD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b6288:	356c      	adds	r5, #108	; 0x6c
	return *this;
   b628a:	e7f8      	b.n	b627e <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x82>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b628c:	4b0e      	ldr	r3, [pc, #56]	; (b62c8 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xcc>)
   b628e:	10b6      	asrs	r6, r6, #2
   b6290:	435e      	muls	r6, r3
   b6292:	2e00      	cmp	r6, #0
   b6294:	dd08      	ble.n	b62a8 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xac>
	      *__result = *__first;
   b6296:	4629      	mov	r1, r5
   b6298:	4648      	mov	r0, r9
   b629a:	f7ff febb 	bl	b6014 <_ZN7RailwayaSERKS_.isra.0>
	      ++__first;
   b629e:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b62a0:	f109 096c 	add.w	r9, r9, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b62a4:	3e01      	subs	r6, #1
   b62a6:	e7f4      	b.n	b6292 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x96>
   b62a8:	e9d4 5600 	ldrd	r5, r6, [r4]
   b62ac:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b62ae:	683d      	ldr	r5, [r7, #0]
					  __x._M_impl._M_finish,
   b62b0:	687f      	ldr	r7, [r7, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b62b2:	440d      	add	r5, r1
   b62b4:	42af      	cmp	r7, r5
   b62b6:	d0d1      	beq.n	b625c <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x60>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b62b8:	b11e      	cbz	r6, b62c2 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xc6>
   b62ba:	4629      	mov	r1, r5
   b62bc:	4630      	mov	r0, r6
   b62be:	f7ff fdfb 	bl	b5eb8 <_ZN7RailwayC1ERKS_>
   b62c2:	356c      	adds	r5, #108	; 0x6c
   b62c4:	366c      	adds	r6, #108	; 0x6c
   b62c6:	e7f5      	b.n	b62b4 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xb8>
   b62c8:	684bda13 	.word	0x684bda13

000b62cc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b62cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b62d0:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b62d2:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b62d4:	4810      	ldr	r0, [pc, #64]	; (b6318 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x4c>)
   b62d6:	10e4      	asrs	r4, r4, #3
   b62d8:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b62da:	4617      	mov	r7, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b62dc:	46a0      	mov	r8, r4
   b62de:	4616      	mov	r6, r2
   b62e0:	f1b8 0f00 	cmp.w	r8, #0
   b62e4:	dd10      	ble.n	b6308 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x3c>
   b62e6:	4629      	mov	r1, r5
   b62e8:	4630      	mov	r0, r6
   b62ea:	f7ff ff87 	bl	b61fc <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
   b62ee:	f105 010c 	add.w	r1, r5, #12
   b62f2:	f106 000c 	add.w	r0, r6, #12
   b62f6:	f004 fa0d 	bl	ba714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b62fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b62fc:	6273      	str	r3, [r6, #36]	; 0x24
	      ++__first;
   b62fe:	3528      	adds	r5, #40	; 0x28
	      ++__result;
   b6300:	3628      	adds	r6, #40	; 0x28
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6302:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6306:	e7eb      	b.n	b62e0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x14>
	  return __result;
   b6308:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b630c:	2028      	movs	r0, #40	; 0x28
   b630e:	fb00 7004 	mla	r0, r0, r4, r7
   b6312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6316:	bf00      	nop
   b6318:	cccccccd 	.word	0xcccccccd

000b631c <setup>:
void setup() {
   b631c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6320:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
  Serial.begin(9600);
   b6324:	f003 ffec 	bl	ba300 <_Z16_fetch_usbserialv>
   b6328:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b632c:	f003 ffdc 	bl	ba2e8 <_ZN9USBSerial5beginEl>
  delay(500);
   b6330:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6334:	f001 fef2 	bl	b811c <delay>
  BLE.on();
   b6338:	f002 f9ea 	bl	b8710 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b633c:	f002 fa32 	bl	b87a4 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   b6340:	f002 f9e6 	bl	b8710 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6344:	4a9b      	ldr	r2, [pc, #620]	; (b65b4 <setup+0x298>)
   b6346:	4d9c      	ldr	r5, [pc, #624]	; (b65b8 <setup+0x29c>)
   b6348:	4601      	mov	r1, r0
   b634a:	a80f      	add	r0, sp, #60	; 0x3c
   b634c:	f002 ff14 	bl	b9178 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6350:	a80f      	add	r0, sp, #60	; 0x3c
   b6352:	f002 face 	bl	b88f2 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b6356:	f002 f9db 	bl	b8710 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b635a:	4a98      	ldr	r2, [pc, #608]	; (b65bc <setup+0x2a0>)
   b635c:	4601      	mov	r1, r0
   b635e:	a80f      	add	r0, sp, #60	; 0x3c
   b6360:	f002 ff0a 	bl	b9178 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6364:	a80f      	add	r0, sp, #60	; 0x3c
   b6366:	f002 fac4 	bl	b88f2 <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   b636a:	a803      	add	r0, sp, #12
   b636c:	f002 fbf7 	bl	b8b5e <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b6370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6372:	ac09      	add	r4, sp, #36	; 0x24
   b6374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6376:	682e      	ldr	r6, [r5, #0]
   b6378:	6026      	str	r6, [r4, #0]
        BleUuid tempUUID(uuid);
   b637a:	ad09      	add	r5, sp, #36	; 0x24
   b637c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b637e:	ac0f      	add	r4, sp, #60	; 0x3c
   b6380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6382:	a80f      	add	r0, sp, #60	; 0x3c
        BleUuid tempUUID(uuid);
   b6384:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6386:	f002 f837 	bl	b83f8 <_ZNK8particle7BleUuid4typeEv>
   b638a:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b638c:	a80f      	add	r0, sp, #60	; 0x3c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b638e:	2c00      	cmp	r4, #0
   b6390:	f040 80c5 	bne.w	b651e <setup+0x202>
            uint16_t uuid16 = tempUUID.shorted();
   b6394:	f002 f84c 	bl	b8430 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b6398:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b639a:	f8ad 0018 	strh.w	r0, [sp, #24]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b639e:	2302      	movs	r3, #2
   b63a0:	aa06      	add	r2, sp, #24
   b63a2:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b63a4:	a803      	add	r0, sp, #12
   b63a6:	f002 fbcf 	bl	b8b48 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   b63aa:	f002 f9b1 	bl	b8710 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b63ae:	2200      	movs	r2, #0
   b63b0:	a903      	add	r1, sp, #12
   b63b2:	f002 fa41 	bl	b8838 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  request.hostname = "trek.thewcl.com";
   b63b6:	4c82      	ldr	r4, [pc, #520]	; (b65c0 <setup+0x2a4>)

    //loopIndex must point to either the first or last checkpoint, tripleIndex cannot be 0
    void setLoopIndex(int triple, int loop){
        tripleIndex = triple;
   b63b8:	4e82      	ldr	r6, [pc, #520]	; (b65c4 <setup+0x2a8>)
  acquireWireBuffer();
   b63ba:	a80f      	add	r0, sp, #60	; 0x3c
   b63bc:	f7fe f9ae 	bl	b471c <_Z17acquireWireBufferv>
  Wire.begin();
   b63c0:	f004 f8ec 	bl	ba59c <_Z19__fetch_global_Wirev>
   b63c4:	f003 f864 	bl	b9490 <_ZN7TwoWire5beginEv>
  request.hostname = "trek.thewcl.com";
   b63c8:	497f      	ldr	r1, [pc, #508]	; (b65c8 <setup+0x2ac>)
   b63ca:	4620      	mov	r0, r4
   b63cc:	f003 fb15 	bl	b99fa <_ZN6StringaSEPKc>
  request.port = 80;
   b63d0:	2350      	movs	r3, #80	; 0x50
   b63d2:	497e      	ldr	r1, [pc, #504]	; (b65cc <setup+0x2b0>)
   b63d4:	63a3      	str	r3, [r4, #56]	; 0x38
   b63d6:	4c7e      	ldr	r4, [pc, #504]	; (b65d0 <setup+0x2b4>)
        loopIndex = loop;
   b63d8:	2502      	movs	r5, #2
   b63da:	2006      	movs	r0, #6
   b63dc:	e9c1 5015 	strd	r5, r0, [r1, #84]	; 0x54
   b63e0:	e9c4 5015 	strd	r5, r0, [r4, #84]	; 0x54
        tripleIndex = triple;
   b63e4:	4d7b      	ldr	r5, [pc, #492]	; (b65d4 <setup+0x2b8>)
        loopIndex = loop;
   b63e6:	2203      	movs	r2, #3
   b63e8:	2307      	movs	r3, #7
  ctaRailways = {brownLineCTA, orangeLineCTA, pinkLineCTA, purpleLineCTA, greenLineCTA};
   b63ea:	a80f      	add	r0, sp, #60	; 0x3c
   b63ec:	e9c6 2315 	strd	r2, r3, [r6, #84]	; 0x54
   b63f0:	e9c5 2315 	strd	r2, r3, [r5, #84]	; 0x54
   b63f4:	f7ff fd60 	bl	b5eb8 <_ZN7RailwayC1ERKS_>
   b63f8:	4631      	mov	r1, r6
   b63fa:	a82a      	add	r0, sp, #168	; 0xa8
   b63fc:	f7ff fd5c 	bl	b5eb8 <_ZN7RailwayC1ERKS_>
   b6400:	4629      	mov	r1, r5
   b6402:	a845      	add	r0, sp, #276	; 0x114
   b6404:	f7ff fd58 	bl	b5eb8 <_ZN7RailwayC1ERKS_>
   b6408:	4621      	mov	r1, r4
   b640a:	a860      	add	r0, sp, #384	; 0x180
			 - this->_M_impl._M_start); }
   b640c:	4c72      	ldr	r4, [pc, #456]	; (b65d8 <setup+0x2bc>)
   b640e:	f7ff fd53 	bl	b5eb8 <_ZN7RailwayC1ERKS_>
   b6412:	4972      	ldr	r1, [pc, #456]	; (b65dc <setup+0x2c0>)
   b6414:	a87b      	add	r0, sp, #492	; 0x1ec
   b6416:	f7ff fd4f 	bl	b5eb8 <_ZN7RailwayC1ERKS_>
   b641a:	6822      	ldr	r2, [r4, #0]
   b641c:	68a3      	ldr	r3, [r4, #8]
   b641e:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b6420:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
   b6424:	f080 8083 	bcs.w	b652e <setup+0x212>
	  pointer __result = this->_M_allocate(__n);
   b6428:	2005      	movs	r0, #5
   b642a:	f7fd fe95 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
   b642e:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
   b6432:	4605      	mov	r5, r0
   b6434:	f500 7707 	add.w	r7, r0, #540	; 0x21c
	  _ForwardIterator __cur = __result;
   b6438:	4606      	mov	r6, r0
   b643a:	b11e      	cbz	r6, b6444 <setup+0x128>
   b643c:	4641      	mov	r1, r8
   b643e:	4630      	mov	r0, r6
   b6440:	f7ff fd3a 	bl	b5eb8 <_ZN7RailwayC1ERKS_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b6444:	366c      	adds	r6, #108	; 0x6c
   b6446:	42b7      	cmp	r7, r6
   b6448:	f108 086c 	add.w	r8, r8, #108	; 0x6c
   b644c:	d1f5      	bne.n	b643a <setup+0x11e>
	__destroy(__first, __last);
   b644e:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6452:	f7fe fd05 	bl	b4e60 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	    _M_deallocate(this->_M_impl._M_start,
   b6456:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6458:	b118      	cbz	r0, b6462 <setup+0x146>
			  - this->_M_impl._M_start);
   b645a:	68a1      	ldr	r1, [r4, #8]
   b645c:	1a09      	subs	r1, r1, r0
   b645e:	f7fd fe20 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b6462:	e9c4 5700 	strd	r5, r7, [r4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b6466:	60a7      	str	r7, [r4, #8]
	  pointer __result = this->_M_allocate(__n);
   b6468:	2404      	movs	r4, #4
   b646a:	256c      	movs	r5, #108	; 0x6c
   b646c:	ab0f      	add	r3, sp, #60	; 0x3c
   b646e:	fb05 3004 	mla	r0, r5, r4, r3
   b6472:	f7fe fcd5 	bl	b4e20 <_ZN7RailwayD1Ev>
   b6476:	3c01      	subs	r4, #1
   b6478:	d2f8      	bcs.n	b646c <setup+0x150>
  cities = {City(ctaRailways, "chicago", 5)};
   b647a:	4957      	ldr	r1, [pc, #348]	; (b65d8 <setup+0x2bc>)
			 - this->_M_impl._M_start); }
   b647c:	4c58      	ldr	r4, [pc, #352]	; (b65e0 <setup+0x2c4>)
   b647e:	a806      	add	r0, sp, #24
   b6480:	f7ff fd8a 	bl	b5f98 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b6484:	4957      	ldr	r1, [pc, #348]	; (b65e4 <setup+0x2c8>)
   b6486:	a809      	add	r0, sp, #36	; 0x24
   b6488:	f7fd fe3e 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b648c:	2300      	movs	r3, #0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b648e:	aa14      	add	r2, sp, #80	; 0x50
        std::vector<Railway> railways;
        std::string name;
        int slaveCountExpected;

        City(std::vector<Railway> railwaysInput, std::string nameInput, int slaveCountExpectedInput){
            railways = railwaysInput;
   b6490:	a906      	add	r1, sp, #24
   b6492:	a80f      	add	r0, sp, #60	; 0x3c
      { _M_string_length = __length; }
   b6494:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   b6498:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   b649c:	9311      	str	r3, [sp, #68]	; 0x44
   b649e:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
   b64a2:	f7ff feab 	bl	b61fc <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
	this->_M_assign(__str);
   b64a6:	a909      	add	r1, sp, #36	; 0x24
   b64a8:	a812      	add	r0, sp, #72	; 0x48
   b64aa:	f004 f933 	bl	ba714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
            name = nameInput;
            slaveCountExpected = slaveCountExpectedInput;
   b64ae:	2305      	movs	r3, #5
			 - this->_M_impl._M_start); }
   b64b0:	6822      	ldr	r2, [r4, #0]
   b64b2:	9318      	str	r3, [sp, #96]	; 0x60
   b64b4:	68a3      	ldr	r3, [r4, #8]
   b64b6:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b64b8:	2b27      	cmp	r3, #39	; 0x27
   b64ba:	d85d      	bhi.n	b6578 <setup+0x25c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b64bc:	2028      	movs	r0, #40	; 0x28
   b64be:	f7fd fdea 	bl	b4096 <_Znwj>
	__uninit_copy(__first, __last, __result);
   b64c2:	a919      	add	r1, sp, #100	; 0x64
   b64c4:	4602      	mov	r2, r0
   b64c6:	4605      	mov	r5, r0
   b64c8:	a80f      	add	r0, sp, #60	; 0x3c
   b64ca:	f7ff fd8b 	bl	b5fe4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>
   b64ce:	e9d4 0100 	ldrd	r0, r1, [r4]
   b64d2:	f7fe fcde 	bl	b4e92 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	    _M_deallocate(this->_M_impl._M_start,
   b64d6:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b64d8:	b118      	cbz	r0, b64e2 <setup+0x1c6>
			  - this->_M_impl._M_start);
   b64da:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b64dc:	1a09      	subs	r1, r1, r0
   b64de:	f7fd fde0 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
   b64e2:	6025      	str	r5, [r4, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b64e4:	3528      	adds	r5, #40	; 0x28
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b64e6:	e9c4 5501 	strd	r5, r5, [r4, #4]
      { _M_dispose(); }
   b64ea:	a812      	add	r0, sp, #72	; 0x48
   b64ec:	f004 f8f4 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
class City{
   b64f0:	a80f      	add	r0, sp, #60	; 0x3c
   b64f2:	f7fe fcc0 	bl	b4e76 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b64f6:	a809      	add	r0, sp, #36	; 0x24
   b64f8:	f004 f8ee 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b64fc:	a806      	add	r0, sp, #24
   b64fe:	f7fe fcba 	bl	b4e76 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   b6502:	4839      	ldr	r0, [pc, #228]	; (b65e8 <setup+0x2cc>)
   b6504:	2300      	movs	r3, #0
   b6506:	461a      	mov	r2, r3
   b6508:	4619      	mov	r1, r3
   b650a:	6840      	ldr	r0, [r0, #4]
   b650c:	f001 fd8e 	bl	b802c <network_clear_credentials>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b6510:	9803      	ldr	r0, [sp, #12]
   b6512:	f001 fdbb 	bl	b808c <free>
}
   b6516:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
   b651a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b651e:	f001 ff89 	bl	b8434 <_ZNK8particle7BleUuid8rawBytesEv>
   b6522:	2300      	movs	r3, #0
   b6524:	9300      	str	r3, [sp, #0]
   b6526:	4602      	mov	r2, r0
   b6528:	2310      	movs	r3, #16
   b652a:	2107      	movs	r1, #7
   b652c:	e73a      	b.n	b63a4 <setup+0x88>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b652e:	6865      	ldr	r5, [r4, #4]
   b6530:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b6532:	f5b5 7f07 	cmp.w	r5, #540	; 0x21c
   b6536:	d30b      	bcc.n	b6550 <setup+0x234>
			      _Category>::__copy_m(__first, __last, __result);
   b6538:	a996      	add	r1, sp, #600	; 0x258
   b653a:	a80f      	add	r0, sp, #60	; 0x3c
   b653c:	f7ff fe40 	bl	b61c0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b6540:	6861      	ldr	r1, [r4, #4]
   b6542:	4288      	cmp	r0, r1
   b6544:	4605      	mov	r5, r0
   b6546:	d08f      	beq.n	b6468 <setup+0x14c>
   b6548:	f7fe fc8a 	bl	b4e60 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	    this->_M_impl._M_finish = __pos;
   b654c:	6065      	str	r5, [r4, #4]
   b654e:	e78b      	b.n	b6468 <setup+0x14c>
   b6550:	ab0f      	add	r3, sp, #60	; 0x3c
   b6552:	441d      	add	r5, r3
   b6554:	4629      	mov	r1, r5
   b6556:	4618      	mov	r0, r3
   b6558:	f7ff fe32 	bl	b61c0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b655c:	6866      	ldr	r6, [r4, #4]
	      for (; __first != __last; ++__first, (void)++__cur)
   b655e:	ab96      	add	r3, sp, #600	; 0x258
   b6560:	429d      	cmp	r5, r3
   b6562:	d007      	beq.n	b6574 <setup+0x258>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6564:	b11e      	cbz	r6, b656e <setup+0x252>
   b6566:	4629      	mov	r1, r5
   b6568:	4630      	mov	r0, r6
   b656a:	f7ff fca5 	bl	b5eb8 <_ZN7RailwayC1ERKS_>
   b656e:	356c      	adds	r5, #108	; 0x6c
   b6570:	366c      	adds	r6, #108	; 0x6c
   b6572:	e7f4      	b.n	b655e <setup+0x242>
	    this->_M_impl._M_finish =
   b6574:	6066      	str	r6, [r4, #4]
   b6576:	e777      	b.n	b6468 <setup+0x14c>
   b6578:	6865      	ldr	r5, [r4, #4]
   b657a:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b657c:	2d27      	cmp	r5, #39	; 0x27
   b657e:	d90b      	bls.n	b6598 <setup+0x27c>
   b6580:	a919      	add	r1, sp, #100	; 0x64
   b6582:	a80f      	add	r0, sp, #60	; 0x3c
   b6584:	f7ff fea2 	bl	b62cc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b6588:	6861      	ldr	r1, [r4, #4]
   b658a:	4288      	cmp	r0, r1
   b658c:	4605      	mov	r5, r0
   b658e:	d0ac      	beq.n	b64ea <setup+0x1ce>
	__destroy(__first, __last);
   b6590:	f7fe fc7f 	bl	b4e92 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	    this->_M_impl._M_finish = __pos;
   b6594:	6065      	str	r5, [r4, #4]
   b6596:	e7a8      	b.n	b64ea <setup+0x1ce>
   b6598:	ab0f      	add	r3, sp, #60	; 0x3c
   b659a:	441d      	add	r5, r3
   b659c:	4629      	mov	r1, r5
   b659e:	4618      	mov	r0, r3
   b65a0:	f7ff fe94 	bl	b62cc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>
	__uninit_copy(__first, __last, __result);
   b65a4:	6862      	ldr	r2, [r4, #4]
   b65a6:	a919      	add	r1, sp, #100	; 0x64
   b65a8:	4628      	mov	r0, r5
   b65aa:	f7ff fd1b 	bl	b5fe4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>
	    this->_M_impl._M_finish =
   b65ae:	6060      	str	r0, [r4, #4]
   b65b0:	e79b      	b.n	b64ea <setup+0x1ce>
   b65b2:	bf00      	nop
   b65b4:	2003e6ac 	.word	0x2003e6ac
   b65b8:	200354e8 	.word	0x200354e8
   b65bc:	2003e694 	.word	0x2003e694
   b65c0:	2003e634 	.word	0x2003e634
   b65c4:	20037eb8 	.word	0x20037eb8
   b65c8:	000bd9ae 	.word	0x000bd9ae
   b65cc:	200355a0 	.word	0x200355a0
   b65d0:	2003e55c 	.word	0x2003e55c
   b65d4:	2003e4f0 	.word	0x2003e4f0
   b65d8:	2003561c 	.word	0x2003561c
   b65dc:	20035628 	.word	0x20035628
   b65e0:	20035610 	.word	0x20035610
   b65e4:	000bd9be 	.word	0x000bd9be
   b65e8:	2003e718 	.word	0x2003e718

000b65ec <_GLOBAL__sub_I_SystemMode>:
   b65ec:	2001      	movs	r0, #1
   b65ee:	f7fe bdf7 	b.w	b51e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0>
	...

000b65f4 <loop>:
void loop(){
   b65f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b65f8:	ed2d 8b06 	vpush	{d8-d10}
        return network_has_credentials(*this, 0, NULL);
   b65fc:	4b4e      	ldr	r3, [pc, #312]	; (b6738 <loop+0x144>)
   b65fe:	2200      	movs	r2, #0
   b6600:	b0b7      	sub	sp, #220	; 0xdc
   b6602:	6858      	ldr	r0, [r3, #4]
   b6604:	4611      	mov	r1, r2
   b6606:	f001 fd01 	bl	b800c <network_has_credentials>
  if(WiFi.hasCredentials() && userInput){
   b660a:	2800      	cmp	r0, #0
   b660c:	f000 84d3 	beq.w	b6fb6 <loop+0x9c2>
   b6610:	4b4a      	ldr	r3, [pc, #296]	; (b673c <loop+0x148>)
   b6612:	781b      	ldrb	r3, [r3, #0]
   b6614:	2b00      	cmp	r3, #0
   b6616:	f000 84ce 	beq.w	b6fb6 <loop+0x9c2>
      : _M_current(__i) { }
   b661a:	f8df b164 	ldr.w	fp, [pc, #356]	; b6780 <loop+0x18c>
      Serial.printf("%i, ", i);
   b661e:	4d48      	ldr	r5, [pc, #288]	; (b6740 <loop+0x14c>)
    Serial.println("loop start");
   b6620:	f003 fe6e 	bl	ba300 <_Z16_fetch_usbserialv>
   b6624:	4947      	ldr	r1, [pc, #284]	; (b6744 <loop+0x150>)
   b6626:	f003 f8f6 	bl	b9816 <_ZN5Print7printlnEPKc>
   b662a:	e9db 4600 	ldrd	r4, r6, [fp]
    for(int i : sequenceArr){
   b662e:	42b4      	cmp	r4, r6
   b6630:	d009      	beq.n	b6646 <loop+0x52>
   b6632:	f854 2b04 	ldr.w	r2, [r4], #4
   b6636:	9203      	str	r2, [sp, #12]
      Serial.printf("%i, ", i);
   b6638:	f003 fe62 	bl	ba300 <_Z16_fetch_usbserialv>
   b663c:	9a03      	ldr	r2, [sp, #12]
   b663e:	4629      	mov	r1, r5
   b6640:	f7fd fefa 	bl	b4438 <_ZN5Print6printfEPKcz>
	return *this;
   b6644:	e7f3      	b.n	b662e <loop+0x3a>
    Serial.println();
   b6646:	f003 fe5b 	bl	ba300 <_Z16_fetch_usbserialv>
   b664a:	f003 f8d8 	bl	b97fe <_ZN5Print7printlnEv>
    Serial.println(brownLineCTAAdr);
   b664e:	f003 fe57 	bl	ba300 <_Z16_fetch_usbserialv>
   b6652:	4b3d      	ldr	r3, [pc, #244]	; (b6748 <loop+0x154>)
    Serial.println(greenLineCTAAdr[0]);
   b6654:	4c3d      	ldr	r4, [pc, #244]	; (b674c <loop+0x158>)
    Serial.println(brownLineCTAAdr);
   b6656:	6819      	ldr	r1, [r3, #0]
   b6658:	220a      	movs	r2, #10
   b665a:	f7fd fdd6 	bl	b420a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    Serial.println(greenLineCTAAdr[0]);
   b665e:	f003 fe4f 	bl	ba300 <_Z16_fetch_usbserialv>
   b6662:	6821      	ldr	r1, [r4, #0]
   b6664:	220a      	movs	r2, #10
   b6666:	f7fd fdd0 	bl	b420a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    Serial.println(greenLineCTAAdr[1]);
   b666a:	f003 fe49 	bl	ba300 <_Z16_fetch_usbserialv>
   b666e:	6861      	ldr	r1, [r4, #4]
   b6670:	220a      	movs	r2, #10
   b6672:	f7fd fdca 	bl	b420a <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    for(int j = 0; j < cities[cityIndex].railways.size(); j++){
   b6676:	f04f 0900 	mov.w	r9, #0
   b667a:	4f35      	ldr	r7, [pc, #212]	; (b6750 <loop+0x15c>)
	return *(this->_M_impl._M_start + __n);
   b667c:	4e35      	ldr	r6, [pc, #212]	; (b6754 <loop+0x160>)
   b667e:	683a      	ldr	r2, [r7, #0]
   b6680:	6831      	ldr	r1, [r6, #0]
   b6682:	2528      	movs	r5, #40	; 0x28
   b6684:	436a      	muls	r2, r5
   b6686:	188b      	adds	r3, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6688:	588a      	ldr	r2, [r1, r2]
   b668a:	685b      	ldr	r3, [r3, #4]
   b668c:	1a9b      	subs	r3, r3, r2
   b668e:	4a32      	ldr	r2, [pc, #200]	; (b6758 <loop+0x164>)
   b6690:	109b      	asrs	r3, r3, #2
   b6692:	4353      	muls	r3, r2
   b6694:	454b      	cmp	r3, r9
   b6696:	f240 842a 	bls.w	b6eee <loop+0x8fa>
      delay(1000);
   b669a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b669e:	f001 fd3d 	bl	b811c <delay>
	StringSumHelper(const char *p) : String(p) {}
   b66a2:	492e      	ldr	r1, [pc, #184]	; (b675c <loop+0x168>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b66a4:	f8df 80dc 	ldr.w	r8, [pc, #220]	; b6784 <loop+0x190>
   b66a8:	a81b      	add	r0, sp, #108	; 0x6c
   b66aa:	f003 f95e 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
	return *(this->_M_impl._M_start + __n);
   b66ae:	683b      	ldr	r3, [r7, #0]
   b66b0:	6832      	ldr	r2, [r6, #0]
   b66b2:	436b      	muls	r3, r5
   b66b4:	246c      	movs	r4, #108	; 0x6c
      { return _M_dataplus._M_p; }
   b66b6:	58d3      	ldr	r3, [r2, r3]
   b66b8:	fb04 f409 	mul.w	r4, r4, r9
   b66bc:	4423      	add	r3, r4
      request.path = "/loop-tracks/cta?lines=" + String(cities[cityIndex].railways[j].name.c_str());
   b66be:	a817      	add	r0, sp, #92	; 0x5c
   b66c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b66c2:	f003 f952 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
   b66c6:	a917      	add	r1, sp, #92	; 0x5c
   b66c8:	a81b      	add	r0, sp, #108	; 0x6c
   b66ca:	f003 f9e3 	bl	b9a94 <_ZplRK15StringSumHelperRK6String>
   b66ce:	4601      	mov	r1, r0
   b66d0:	4823      	ldr	r0, [pc, #140]	; (b6760 <loop+0x16c>)
   b66d2:	f003 f97b 	bl	b99cc <_ZN6StringaSERKS_>
   b66d6:	a817      	add	r0, sp, #92	; 0x5c
   b66d8:	f003 f8fc 	bl	b98d4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b66dc:	a81b      	add	r0, sp, #108	; 0x6c
   b66de:	f003 f8f9 	bl	b98d4 <_ZN6StringD1Ev>
   b66e2:	4b20      	ldr	r3, [pc, #128]	; (b6764 <loop+0x170>)
   b66e4:	4920      	ldr	r1, [pc, #128]	; (b6768 <loop+0x174>)
   b66e6:	4821      	ldr	r0, [pc, #132]	; (b676c <loop+0x178>)
   b66e8:	9300      	str	r3, [sp, #0]
   b66ea:	4642      	mov	r2, r8
   b66ec:	4b20      	ldr	r3, [pc, #128]	; (b6770 <loop+0x17c>)
   b66ee:	f000 fca3 	bl	b7038 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("parsing");
   b66f2:	f003 fe05 	bl	ba300 <_Z16_fetch_usbserialv>
   b66f6:	491f      	ldr	r1, [pc, #124]	; (b6774 <loop+0x180>)
   b66f8:	f003 f88d 	bl	b9816 <_ZN5Print7printlnEPKc>
      parser.clear();
   b66fc:	481e      	ldr	r0, [pc, #120]	; (b6778 <loop+0x184>)
   b66fe:	f000 fe33 	bl	b7368 <_ZN10JsonBuffer5clearEv>
	const char * c_str() const { return buffer; }
   b6702:	f8d8 1004 	ldr.w	r1, [r8, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b6706:	9103      	str	r1, [sp, #12]
   b6708:	4608      	mov	r0, r1
   b670a:	f005 f805 	bl	bb718 <strlen>
   b670e:	9903      	ldr	r1, [sp, #12]
   b6710:	4602      	mov	r2, r0
   b6712:	4819      	ldr	r0, [pc, #100]	; (b6778 <loop+0x184>)
   b6714:	f000 fe0b 	bl	b732e <_ZN10JsonBuffer7addDataEPKcj>
      if(!parser.parse()){
   b6718:	4817      	ldr	r0, [pc, #92]	; (b6778 <loop+0x184>)
   b671a:	f001 fa15 	bl	b7b48 <_ZN10JsonParser5parseEv>
   b671e:	9003      	str	r0, [sp, #12]
   b6720:	bba0      	cbnz	r0, b678c <loop+0x198>
        Serial.println("parsing failed");
   b6722:	f003 fded 	bl	ba300 <_Z16_fetch_usbserialv>
   b6726:	4915      	ldr	r1, [pc, #84]	; (b677c <loop+0x188>)
}
   b6728:	b037      	add	sp, #220	; 0xdc
   b672a:	ecbd 8b06 	vpop	{d8-d10}
   b672e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("parsing failed");
   b6732:	f003 b870 	b.w	b9816 <_ZN5Print7printlnEPKc>
   b6736:	bf00      	nop
   b6738:	2003e718 	.word	0x2003e718
   b673c:	2003e6b4 	.word	0x2003e6b4
   b6740:	000bd9d1 	.word	0x000bd9d1
   b6744:	000bd9c6 	.word	0x000bd9c6
   b6748:	2003560c 	.word	0x2003560c
   b674c:	20035694 	.word	0x20035694
   b6750:	200352d4 	.word	0x200352d4
   b6754:	20035610 	.word	0x20035610
   b6758:	684bda13 	.word	0x684bda13
   b675c:	000bd9d6 	.word	0x000bd9d6
   b6760:	2003e65c 	.word	0x2003e65c
   b6764:	000bd9ee 	.word	0x000bd9ee
   b6768:	2003e634 	.word	0x2003e634
   b676c:	2003569c 	.word	0x2003569c
   b6770:	200352d8 	.word	0x200352d8
   b6774:	000bd9f2 	.word	0x000bd9f2
   b6778:	20037f24 	.word	0x20037f24
   b677c:	000bd9fa 	.word	0x000bd9fa
   b6780:	2003e69c 	.word	0x2003e69c
   b6784:	2003e680 	.word	0x2003e680
   b6788:	00000000 	.word	0x00000000
   b678c:	683b      	ldr	r3, [r7, #0]
   b678e:	6832      	ldr	r2, [r6, #0]
        float lat = train.key("latitude").valueFloat();
   b6790:	ed1f 9a03 	vldr	s18, [pc, #-12]	; b6788 <loop+0x194>
   b6794:	435d      	muls	r5, r3
      Railway currentRailway = cities[cityIndex].railways[j];
   b6796:	a81b      	add	r0, sp, #108	; 0x6c
   b6798:	5951      	ldr	r1, [r2, r5]
   b679a:	4421      	add	r1, r4
   b679c:	f7ff fb8c 	bl	b5eb8 <_ZN7RailwayC1ERKS_>
      std::vector<Checkpoint> currentCheckpoints = currentRailway.checkpoints;
   b67a0:	a91b      	add	r1, sp, #108	; 0x6c
   b67a2:	a807      	add	r0, sp, #28
   b67a4:	f7fe f8a2 	bl	b48ec <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      int count = 0;
   b67a8:	f04f 0800 	mov.w	r8, #0
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b67ac:	49a3      	ldr	r1, [pc, #652]	; (b6a3c <loop+0x448>)
   b67ae:	a80d      	add	r0, sp, #52	; 0x34
   b67b0:	f000 fdf4 	bl	b739c <_ZNK10JsonParser12getReferenceEv>
   b67b4:	4aa2      	ldr	r2, [pc, #648]	; (b6a40 <loop+0x44c>)
   b67b6:	a90d      	add	r1, sp, #52	; 0x34
   b67b8:	a810      	add	r0, sp, #64	; 0x40
   b67ba:	f000 ffbf 	bl	b773c <_ZNK13JsonReference3keyEPKc>
   b67be:	2200      	movs	r2, #0
   b67c0:	a910      	add	r1, sp, #64	; 0x40
   b67c2:	a813      	add	r0, sp, #76	; 0x4c
   b67c4:	f000 fe8e 	bl	b74e4 <_ZNK13JsonReference5indexEj>
   b67c8:	4a9e      	ldr	r2, [pc, #632]	; (b6a44 <loop+0x450>)
   b67ca:	a913      	add	r1, sp, #76	; 0x4c
   b67cc:	a817      	add	r0, sp, #92	; 0x5c
   b67ce:	f000 ffb5 	bl	b773c <_ZNK13JsonReference3keyEPKc>
   b67d2:	4642      	mov	r2, r8
   b67d4:	a917      	add	r1, sp, #92	; 0x5c
   b67d6:	a80a      	add	r0, sp, #40	; 0x28
   b67d8:	f000 fe84 	bl	b74e4 <_ZNK13JsonReference5indexEj>
   b67dc:	a817      	add	r0, sp, #92	; 0x5c
   b67de:	f000 fd55 	bl	b728c <_ZN13JsonReferenceD1Ev>
   b67e2:	a813      	add	r0, sp, #76	; 0x4c
   b67e4:	f000 fd52 	bl	b728c <_ZN13JsonReferenceD1Ev>
   b67e8:	a810      	add	r0, sp, #64	; 0x40
   b67ea:	f000 fd4f 	bl	b728c <_ZN13JsonReferenceD1Ev>
   b67ee:	a80d      	add	r0, sp, #52	; 0x34
   b67f0:	f000 fd4c 	bl	b728c <_ZN13JsonReferenceD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b67f4:	4a94      	ldr	r2, [pc, #592]	; (b6a48 <loop+0x454>)
   b67f6:	a90a      	add	r1, sp, #40	; 0x28
   b67f8:	a817      	add	r0, sp, #92	; 0x5c
   b67fa:	f000 ff9f 	bl	b773c <_ZNK13JsonReference3keyEPKc>
   b67fe:	a917      	add	r1, sp, #92	; 0x5c
   b6800:	a813      	add	r0, sp, #76	; 0x4c
   b6802:	f000 ffb5 	bl	b7770 <_ZNK13JsonReference11valueStringEv>
   b6806:	a817      	add	r0, sp, #92	; 0x5c
   b6808:	f000 fd40 	bl	b728c <_ZN13JsonReferenceD1Ev>
        String destNm = train.key("destination").valueString();
   b680c:	4a8f      	ldr	r2, [pc, #572]	; (b6a4c <loop+0x458>)
   b680e:	a90a      	add	r1, sp, #40	; 0x28
   b6810:	a810      	add	r0, sp, #64	; 0x40
   b6812:	f000 ff93 	bl	b773c <_ZNK13JsonReference3keyEPKc>
   b6816:	a910      	add	r1, sp, #64	; 0x40
   b6818:	a817      	add	r0, sp, #92	; 0x5c
   b681a:	f000 ffa9 	bl	b7770 <_ZNK13JsonReference11valueStringEv>
   b681e:	a810      	add	r0, sp, #64	; 0x40
   b6820:	f000 fd34 	bl	b728c <_ZN13JsonReferenceD1Ev>
        int trainDir = train.key("direction").valueInt();
   b6824:	4a8a      	ldr	r2, [pc, #552]	; (b6a50 <loop+0x45c>)
   b6826:	a90a      	add	r1, sp, #40	; 0x28
   b6828:	a810      	add	r0, sp, #64	; 0x40
   b682a:	f000 ff87 	bl	b773c <_ZNK13JsonReference3keyEPKc>
   b682e:	2100      	movs	r1, #0
   b6830:	a810      	add	r0, sp, #64	; 0x40
   b6832:	f000 fe71 	bl	b7518 <_ZNK13JsonReference8valueIntEi>
   b6836:	4604      	mov	r4, r0
   b6838:	a810      	add	r0, sp, #64	; 0x40
   b683a:	f000 fd27 	bl	b728c <_ZN13JsonReferenceD1Ev>
        float lat = train.key("latitude").valueFloat();
   b683e:	4a85      	ldr	r2, [pc, #532]	; (b6a54 <loop+0x460>)
   b6840:	a90a      	add	r1, sp, #40	; 0x28
   b6842:	a810      	add	r0, sp, #64	; 0x40
   b6844:	f000 ff7a 	bl	b773c <_ZNK13JsonReference3keyEPKc>
   b6848:	a810      	add	r0, sp, #64	; 0x40
   b684a:	eeb0 0a49 	vmov.f32	s0, s18
   b684e:	f000 fe6f 	bl	b7530 <_ZNK13JsonReference10valueFloatEf>
   b6852:	a810      	add	r0, sp, #64	; 0x40
   b6854:	eef0 8a40 	vmov.f32	s17, s0
   b6858:	f000 fd18 	bl	b728c <_ZN13JsonReferenceD1Ev>
        float lon = train.key("longitude").valueFloat();
   b685c:	4a7e      	ldr	r2, [pc, #504]	; (b6a58 <loop+0x464>)
   b685e:	a90a      	add	r1, sp, #40	; 0x28
   b6860:	a810      	add	r0, sp, #64	; 0x40
   b6862:	f000 ff6b 	bl	b773c <_ZNK13JsonReference3keyEPKc>
   b6866:	a810      	add	r0, sp, #64	; 0x40
   b6868:	eeb0 0a49 	vmov.f32	s0, s18
   b686c:	f000 fe60 	bl	b7530 <_ZNK13JsonReference10valueFloatEf>
   b6870:	a810      	add	r0, sp, #64	; 0x40
   b6872:	eeb0 8a40 	vmov.f32	s16, s0
   b6876:	f000 fd09 	bl	b728c <_ZN13JsonReferenceD1Ev>
        if(nextStation.length() <= 1){
   b687a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b687c:	2b01      	cmp	r3, #1
   b687e:	f200 8082 	bhi.w	b6986 <loop+0x392>
          Serial.println("break");
   b6882:	f003 fd3d 	bl	ba300 <_Z16_fetch_usbserialv>
   b6886:	4975      	ldr	r1, [pc, #468]	; (b6a5c <loop+0x468>)
        if(cityIndex == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b6888:	f8df 81e4 	ldr.w	r8, [pc, #484]	; b6a70 <loop+0x47c>
          Serial.println("break");
   b688c:	f002 ffc3 	bl	b9816 <_ZN5Print7printlnEPKc>
          break;
   b6890:	a817      	add	r0, sp, #92	; 0x5c
   b6892:	f003 f81f 	bl	b98d4 <_ZN6StringD1Ev>
   b6896:	a813      	add	r0, sp, #76	; 0x4c
   b6898:	f003 f81c 	bl	b98d4 <_ZN6StringD1Ev>
   b689c:	a80a      	add	r0, sp, #40	; 0x28
   b689e:	f000 fcf5 	bl	b728c <_ZN13JsonReferenceD1Ev>
      for(int i = 0; i < 4; i++){
   b68a2:	ea4f 06c9 	mov.w	r6, r9, lsl #3
   b68a6:	2500      	movs	r5, #0
        if(cityIndex == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b68a8:	f8d8 3000 	ldr.w	r3, [r8]
   b68ac:	2b00      	cmp	r3, #0
   b68ae:	f040 826e 	bne.w	b6d8e <loop+0x79a>
   b68b2:	2d02      	cmp	r5, #2
   b68b4:	d006      	beq.n	b68c4 <loop+0x2d0>
   b68b6:	496a      	ldr	r1, [pc, #424]	; (b6a60 <loop+0x46c>)
   b68b8:	a827      	add	r0, sp, #156	; 0x9c
   b68ba:	f7fe f83b 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b68be:	2800      	cmp	r0, #0
   b68c0:	f000 8255 	beq.w	b6d6e <loop+0x77a>
          Wire.beginTransmission(brownLineCTAAdr);
   b68c4:	f003 fe6a 	bl	ba59c <_Z19__fetch_global_Wirev>
   b68c8:	4b66      	ldr	r3, [pc, #408]	; (b6a64 <loop+0x470>)
   b68ca:	6819      	ldr	r1, [r3, #0]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b68cc:	f002 fe16 	bl	b94fc <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(String(currentRailway.colors[0].c_str()));
   b68d0:	f003 fe64 	bl	ba59c <_Z19__fetch_global_Wirev>
   b68d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   b68d6:	4604      	mov	r4, r0
   b68d8:	6819      	ldr	r1, [r3, #0]
   b68da:	a817      	add	r0, sp, #92	; 0x5c
   b68dc:	f003 f845 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
   b68e0:	9917      	ldr	r1, [sp, #92]	; 0x5c
   b68e2:	4620      	mov	r0, r4
   b68e4:	f7fd fcc4 	bl	b4270 <_ZN5Print5writeEPKc.isra.0>
   b68e8:	a817      	add	r0, sp, #92	; 0x5c
   b68ea:	f002 fff3 	bl	b98d4 <_ZN6StringD1Ev>
        Wire.write(String(currentRailway.colors[1].c_str()));
   b68ee:	f003 fe55 	bl	ba59c <_Z19__fetch_global_Wirev>
   b68f2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   b68f4:	4604      	mov	r4, r0
   b68f6:	6999      	ldr	r1, [r3, #24]
   b68f8:	a817      	add	r0, sp, #92	; 0x5c
   b68fa:	f003 f836 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
   b68fe:	9917      	ldr	r1, [sp, #92]	; 0x5c
   b6900:	4620      	mov	r0, r4
   b6902:	f7fd fcb5 	bl	b4270 <_ZN5Print5writeEPKc.isra.0>
   b6906:	a817      	add	r0, sp, #92	; 0x5c
   b6908:	f002 ffe4 	bl	b98d4 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b690c:	f003 fe46 	bl	ba59c <_Z19__fetch_global_Wirev>
   b6910:	f002 fdfb 	bl	b950a <_ZN7TwoWire15endTransmissionEv>
        if(cityIndex == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b6914:	f8d8 3000 	ldr.w	r3, [r8]
   b6918:	2b00      	cmp	r3, #0
   b691a:	f040 824e 	bne.w	b6dba <loop+0x7c6>
   b691e:	2d02      	cmp	r5, #2
   b6920:	d006      	beq.n	b6930 <loop+0x33c>
   b6922:	494f      	ldr	r1, [pc, #316]	; (b6a60 <loop+0x46c>)
   b6924:	a827      	add	r0, sp, #156	; 0x9c
   b6926:	f7fe f805 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b692a:	2800      	cmp	r0, #0
   b692c:	f000 8235 	beq.w	b6d9a <loop+0x7a6>
          Wire.beginTransmission(brownLineCTAAdr);
   b6930:	f003 fe34 	bl	ba59c <_Z19__fetch_global_Wirev>
   b6934:	4b4b      	ldr	r3, [pc, #300]	; (b6a64 <loop+0x470>)
   b6936:	6819      	ldr	r1, [r3, #0]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b6938:	f002 fde0 	bl	b94fc <_ZN7TwoWire17beginTransmissionEi>
        if(cityIndex == 0){
   b693c:	f8d8 4000 	ldr.w	r4, [r8]
   b6940:	2c00      	cmp	r4, #0
   b6942:	f040 82dd 	bne.w	b6f00 <loop+0x90c>
          if(i == 2){
   b6946:	2d02      	cmp	r5, #2
   b6948:	f040 8269 	bne.w	b6e1e <loop+0x82a>
            if(currentRailway.name == greenLineCTA.name){
   b694c:	4946      	ldr	r1, [pc, #280]	; (b6a68 <loop+0x474>)
   b694e:	4f47      	ldr	r7, [pc, #284]	; (b6a6c <loop+0x478>)
   b6950:	a827      	add	r0, sp, #156	; 0x9c
   b6952:	f7fd ffef 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6956:	2800      	cmp	r0, #0
   b6958:	f000 8235 	beq.w	b6dc6 <loop+0x7d2>
   b695c:	6a79      	ldr	r1, [r7, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b695e:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   b6962:	1a9b      	subs	r3, r3, r2
   b6964:	109a      	asrs	r2, r3, #2
   b6966:	e9d1 1300 	ldrd	r1, r3, [r1]
   b696a:	1a5b      	subs	r3, r3, r1
   b696c:	109b      	asrs	r3, r3, #2
              for(int j = 0; j < brownLineCTA.outputs[0].size() + (brownLineCTA.outputs[2].size() / 2); j++){
   b696e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   b6972:	42a3      	cmp	r3, r4
   b6974:	f240 82c4 	bls.w	b6f00 <loop+0x90c>
                Wire.write('0');
   b6978:	f003 fe10 	bl	ba59c <_Z19__fetch_global_Wirev>
   b697c:	2130      	movs	r1, #48	; 0x30
   b697e:	f7fd fc73 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size() + (brownLineCTA.outputs[2].size() / 2); j++){
   b6982:	3401      	adds	r4, #1
   b6984:	e7ea      	b.n	b695c <loop+0x368>
   b6986:	e9dd 3507 	ldrd	r3, r5, [sp, #28]
   b698a:	1aed      	subs	r5, r5, r3
   b698c:	10ed      	asrs	r5, r5, #3
        for(int i = 0; i < checkpointCount; i++){
   b698e:	f04f 0a00 	mov.w	sl, #0
   b6992:	45aa      	cmp	sl, r5
	return *(this->_M_impl._M_start + __n);
   b6994:	9907      	ldr	r1, [sp, #28]
   b6996:	da3b      	bge.n	b6a10 <loop+0x41c>
   b6998:	eb01 06ca 	add.w	r6, r1, sl, lsl #3
    }

    float getDistance(float trainLat, float trainLon){
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b699c:	edd6 7a00 	vldr	s15, [r6]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b69a0:	ee78 7ae7 	vsub.f32	s15, s17, s15
   b69a4:	ee17 0a90 	vmov	r0, s15
   b69a8:	f004 fa96 	bl	baed8 <__aeabi_f2d>
   b69ac:	edd6 7a01 	vldr	s15, [r6, #4]
   b69b0:	ee78 7a67 	vsub.f32	s15, s16, s15
   b69b4:	4602      	mov	r2, r0
   b69b6:	460b      	mov	r3, r1
   b69b8:	ee17 0a90 	vmov	r0, s15
   b69bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b69c0:	f004 fa8a 	bl	baed8 <__aeabi_f2d>
   b69c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b69c8:	ec41 0b1a 	vmov	d10, r0, r1
   b69cc:	4610      	mov	r0, r2
   b69ce:	4619      	mov	r1, r3
   b69d0:	f004 fada 	bl	baf88 <__aeabi_dmul>
   b69d4:	ec53 2b1a 	vmov	r2, r3, d10
   b69d8:	4606      	mov	r6, r0
   b69da:	460f      	mov	r7, r1
   b69dc:	ee1a 0a10 	vmov	r0, s20
   b69e0:	4619      	mov	r1, r3
   b69e2:	f004 fad1 	bl	baf88 <__aeabi_dmul>
   b69e6:	4602      	mov	r2, r0
   b69e8:	460b      	mov	r3, r1
   b69ea:	4630      	mov	r0, r6
   b69ec:	4639      	mov	r1, r7
   b69ee:	f004 f915 	bl	bac1c <__adddf3>
   b69f2:	ec41 0b10 	vmov	d0, r0, r1
   b69f6:	f004 f805 	bl	baa04 <sqrt>
          currentRailway.distances[i] = currentCheckpoints[i].getDistance(lat, lon);
   b69fa:	9e1e      	ldr	r6, [sp, #120]	; 0x78
   b69fc:	ec51 0b10 	vmov	r0, r1, d0
   b6a00:	f004 fd92 	bl	bb528 <__aeabi_d2f>
   b6a04:	eb06 068a 	add.w	r6, r6, sl, lsl #2
        for(int i = 0; i < checkpointCount; i++){
   b6a08:	f10a 0a01 	add.w	sl, sl, #1
   b6a0c:	6030      	str	r0, [r6, #0]
   b6a0e:	e7c0      	b.n	b6992 <loop+0x39e>
      : _M_current(__i) { }
   b6a10:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
   b6a14:	42be      	cmp	r6, r7
   b6a16:	d02f      	beq.n	b6a78 <loop+0x484>
   b6a18:	1d32      	adds	r2, r6, #4
   b6a1a:	4633      	mov	r3, r6
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
   b6a1c:	4297      	cmp	r7, r2
	++_M_current;
   b6a1e:	4610      	mov	r0, r2
   b6a20:	d02b      	beq.n	b6a7a <loop+0x486>
	if (__comp(__first, __result))
   b6a22:	edd3 7a00 	vldr	s15, [r3]
   b6a26:	ed90 7a00 	vldr	s14, [r0]
   b6a2a:	eeb4 7a67 	vcmp.f32	s14, s15
   b6a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6a32:	f102 0204 	add.w	r2, r2, #4
   b6a36:	bf48      	it	mi
   b6a38:	4603      	movmi	r3, r0
   b6a3a:	e7ef      	b.n	b6a1c <loop+0x428>
   b6a3c:	20037f24 	.word	0x20037f24
   b6a40:	000bda09 	.word	0x000bda09
   b6a44:	000bda0f 	.word	0x000bda0f
   b6a48:	000bda16 	.word	0x000bda16
   b6a4c:	000bda20 	.word	0x000bda20
   b6a50:	000bda2c 	.word	0x000bda2c
   b6a54:	000bda36 	.word	0x000bda36
   b6a58:	000bda3f 	.word	0x000bda3f
   b6a5c:	000bda49 	.word	0x000bda49
   b6a60:	2003e58c 	.word	0x2003e58c
   b6a64:	2003560c 	.word	0x2003560c
   b6a68:	20035658 	.word	0x20035658
   b6a6c:	200355a0 	.word	0x200355a0
   b6a70:	200352d4 	.word	0x200352d4
   b6a74:	7dcccccc 	.word	0x7dcccccc
   b6a78:	4633      	mov	r3, r6
        if(closestIndex == currentRailway.tripleIndex){
   b6a7a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b6a7c:	1b9b      	subs	r3, r3, r6
   b6a7e:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
   b6a82:	ea4f 00a3 	mov.w	r0, r3, asr #2
          closestIndex = currentRailway.loopIndex;
   b6a86:	bf08      	it	eq
   b6a88:	9831      	ldreq	r0, [sp, #196]	; 0xc4
   b6a8a:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
        x1 = currentCheckpoints[closestIndex].lat;
   b6a8e:	edd3 7a00 	vldr	s15, [r3]
        y1 = currentCheckpoints[closestIndex].lon;
   b6a92:	edd3 6a01 	vldr	s13, [r3, #4]
        if(currentCheckpoints[closestIndex].lat > lat){
   b6a96:	eef4 8ae7 	vcmpe.f32	s17, s15
   b6a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          slope = (y1 - y) / (x1 - x);
   b6a9e:	ee77 5ae8 	vsub.f32	s11, s15, s17
          slope = (y - y1) / (x - x1);
   b6aa2:	bf55      	itete	pl
   b6aa4:	ee38 6a66 	vsubpl.f32	s12, s16, s13
          slope = (y1 - y) / (x1 - x);
   b6aa8:	ee76 7ac8 	vsubmi.f32	s15, s13, s16
          slope = (y - y1) / (x - x1);
   b6aac:	ee78 7ae7 	vsubpl.f32	s15, s17, s15
          slope = (y1 - y) / (x1 - x);
   b6ab0:	ee87 7aa5 	vdivmi.f32	s14, s15, s11
   b6ab4:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
          slope = (y - y1) / (x - x1);
   b6ab8:	bf58      	it	pl
   b6aba:	ee86 7a27 	vdivpl.f32	s14, s12, s15
        if(slope == 0){
   b6abe:	ed5f 7a13 	vldr	s15, [pc, #-76]	; b6a74 <loop+0x480>
   b6ac2:	eeb5 7a40 	vcmp.f32	s14, #0.0
   b6ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6aca:	d00a      	beq.n	b6ae2 <loop+0x4ee>
        }else if(slope >= __FLT_MAX__ / 10){
   b6acc:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b6ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          perpendicularSlope = -1 / slope;
   b6ad4:	bfba      	itte	lt
   b6ad6:	eebf 6a00 	vmovlt.f32	s12, #240	; 0xbf800000 -1.0
   b6ada:	eec6 7a07 	vdivlt.f32	s15, s12, s14
          perpendicularSlope = 0;
   b6ade:	eef0 7a49 	vmovge.f32	s15, s18
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b6ae2:	eeb0 7a48 	vmov.f32	s14, s16
   b6ae6:	eea7 7aa5 	vfma.f32	s14, s15, s11
   b6aea:	eef4 6ac7 	vcmpe.f32	s13, s14
   b6aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6af2:	bf4c      	ite	mi
   b6af4:	2701      	movmi	r7, #1
   b6af6:	2700      	movpl	r7, #0
        if(closestIndex == 0){
   b6af8:	2800      	cmp	r0, #0
   b6afa:	d171      	bne.n	b6be0 <loop+0x5ec>
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b6afc:	ed91 7a02 	vldr	s14, [r1, #8]
          if(currentRailway.loopIndex == closestIndex){
   b6b00:	f8dd c0c4 	ldr.w	ip, [sp, #196]	; 0xc4
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b6b04:	ee37 7a68 	vsub.f32	s14, s14, s17
   b6b08:	eef0 6a48 	vmov.f32	s13, s16
   b6b0c:	eee7 6a27 	vfma.f32	s13, s14, s15
   b6b10:	ed91 7a03 	vldr	s14, [r1, #12]
   b6b14:	eef4 6ac7 	vcmpe.f32	s13, s14
   b6b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6b1c:	bfcc      	ite	gt
   b6b1e:	2501      	movgt	r5, #1
   b6b20:	2500      	movle	r5, #0
          if(currentRailway.loopIndex == closestIndex){
   b6b22:	f1bc 0f00 	cmp.w	ip, #0
   b6b26:	d11d      	bne.n	b6b64 <loop+0x570>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6b28:	1e53      	subs	r3, r2, #1
   b6b2a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
            if(nearestSide != pointSide){
   b6b2e:	42bd      	cmp	r5, r7
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6b30:	ed91 0a00 	vldr	s0, [r1]
   b6b34:	ed91 7a01 	vldr	s14, [r1, #4]
            if(nearestSide != pointSide){
   b6b38:	f040 809b 	bne.w	b6c72 <loop+0x67e>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6b3c:	ee70 8a68 	vsub.f32	s17, s0, s17
   b6b40:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b6b44:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b6b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            }else if(nearestSide != loopPointSide){
   b6b4c:	bfcc      	ite	gt
   b6b4e:	2101      	movgt	r1, #1
   b6b50:	2100      	movle	r1, #0
   b6b52:	42a9      	cmp	r1, r5
              }else if(nearestSide != loopPointSide){
   b6b54:	d100      	bne.n	b6b58 <loop+0x564>
                secondClosestIndex = currentRailway.tripleIndex + 1;
   b6b56:	1c53      	adds	r3, r2, #1
          if(closestIndex < secondClosestIndex){
   b6b58:	429a      	cmp	r2, r3
   b6b5a:	f2c0 808c 	blt.w	b6c76 <loop+0x682>
   b6b5e:	4611      	mov	r1, r2
   b6b60:	469c      	mov	ip, r3
   b6b62:	e005      	b.n	b6b70 <loop+0x57c>
            if(pointSide == nearestSide){
   b6b64:	42bd      	cmp	r5, r7
   b6b66:	d074      	beq.n	b6c52 <loop+0x65e>
   b6b68:	4602      	mov	r2, r0
   b6b6a:	4684      	mov	ip, r0
   b6b6c:	2301      	movs	r3, #1
   b6b6e:	4619      	mov	r1, r3
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b6b70:	eb06 008c 	add.w	r0, r6, ip, lsl #2
   b6b74:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   b6b78:	ed90 7a00 	vldr	s14, [r0]
   b6b7c:	edd1 7a00 	vldr	s15, [r1]
   b6b80:	9821      	ldr	r0, [sp, #132]	; 0x84
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b6b82:	9d35      	ldr	r5, [sp, #212]	; 0xd4
          segmentPos *= currentRailway.scalers[lowerIndex];
   b6b84:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b6b88:	ee77 7a27 	vadd.f32	s15, s14, s15
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b6b8c:	4295      	cmp	r5, r2
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b6b8e:	eec7 6a27 	vdiv.f32	s13, s14, s15
          segmentPos *= currentRailway.scalers[lowerIndex];
   b6b92:	ee07 1a90 	vmov	s15, r1
   b6b96:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   b6b9a:	ee28 8a26 	vmul.f32	s16, s16, s13
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b6b9e:	db06      	blt.n	b6bae <loop+0x5ba>
   b6ba0:	9934      	ldr	r1, [sp, #208]	; 0xd0
   b6ba2:	4291      	cmp	r1, r2
   b6ba4:	dc03      	bgt.n	b6bae <loop+0x5ba>
   b6ba6:	429d      	cmp	r5, r3
   b6ba8:	db01      	blt.n	b6bae <loop+0x5ba>
   b6baa:	4299      	cmp	r1, r3
   b6bac:	dd66      	ble.n	b6c7c <loop+0x688>
          else if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b6bae:	9d32      	ldr	r5, [sp, #200]	; 0xc8
   b6bb0:	4295      	cmp	r5, r2
   b6bb2:	dc66      	bgt.n	b6c82 <loop+0x68e>
   b6bb4:	429d      	cmp	r5, r3
   b6bb6:	dc64      	bgt.n	b6c82 <loop+0x68e>
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b6bb8:	9933      	ldr	r1, [sp, #204]	; 0xcc
   b6bba:	4291      	cmp	r1, r2
   b6bbc:	db65      	blt.n	b6c8a <loop+0x696>
   b6bbe:	4299      	cmp	r1, r3
   b6bc0:	db63      	blt.n	b6c8a <loop+0x696>
            inLoop = true;
   b6bc2:	9b03      	ldr	r3, [sp, #12]
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b6bc4:	4629      	mov	r1, r5
            pcbSegment = 2;
   b6bc6:	2502      	movs	r5, #2
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b6bc8:	458c      	cmp	ip, r1
   b6bca:	dd61      	ble.n	b6c90 <loop+0x69c>
            segmentPos += currentRailway.scalers[i];
   b6bcc:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   b6bd0:	ee07 2a90 	vmov	s15, r2
   b6bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b6bd8:	3101      	adds	r1, #1
            segmentPos += currentRailway.scalers[i];
   b6bda:	ee38 8a27 	vadd.f32	s16, s16, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b6bde:	e7f3      	b.n	b6bc8 <loop+0x5d4>
   b6be0:	f1ac 0c08 	sub.w	ip, ip, #8
   b6be4:	448c      	add	ip, r1
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b6be6:	ed9c 7a00 	vldr	s14, [ip]
   b6bea:	ee37 7a68 	vsub.f32	s14, s14, s17
   b6bee:	eef0 6a48 	vmov.f32	s13, s16
   b6bf2:	eee7 6a27 	vfma.f32	s13, s14, s15
          if(closestIndex == checkpointCount - 1){
   b6bf6:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b6bfa:	1e43      	subs	r3, r0, #1
   b6bfc:	ed9c 7a01 	vldr	s14, [ip, #4]
   b6c00:	eef4 6ac7 	vcmpe.f32	s13, s14
   b6c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6c08:	bfcc      	ite	gt
   b6c0a:	f04f 0c01 	movgt.w	ip, #1
   b6c0e:	f04f 0c00 	movle.w	ip, #0
          if(closestIndex == checkpointCount - 1){
   b6c12:	4586      	cmp	lr, r0
   b6c14:	d129      	bne.n	b6c6a <loop+0x676>
            if(closestIndex == currentRailway.loopIndex){
   b6c16:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   b6c18:	4283      	cmp	r3, r0
   b6c1a:	d118      	bne.n	b6c4e <loop+0x65a>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6c1c:	1e53      	subs	r3, r2, #1
   b6c1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
              if(nearestSide != pointSide){
   b6c22:	45bc      	cmp	ip, r7
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6c24:	ed91 0a00 	vldr	s0, [r1]
   b6c28:	ed91 7a01 	vldr	s14, [r1, #4]
              if(nearestSide != pointSide){
   b6c2c:	d002      	beq.n	b6c34 <loop+0x640>
                secondClosestIndex = checkpointCount - 2;
   b6c2e:	1eab      	subs	r3, r5, #2
   b6c30:	4602      	mov	r2, r0
   b6c32:	e791      	b.n	b6b58 <loop+0x564>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6c34:	ee70 8a68 	vsub.f32	s17, s0, s17
   b6c38:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b6c3c:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b6c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              }else if(nearestSide != loopPointSide){
   b6c44:	bfcc      	ite	gt
   b6c46:	2101      	movgt	r1, #1
   b6c48:	2100      	movle	r1, #0
   b6c4a:	4561      	cmp	r1, ip
   b6c4c:	e782      	b.n	b6b54 <loop+0x560>
              if(pointSide == nearestSide){
   b6c4e:	45bc      	cmp	ip, r7
   b6c50:	d1ed      	bne.n	b6c2e <loop+0x63a>
        String destNm = train.key("destination").valueString();
   b6c52:	a817      	add	r0, sp, #92	; 0x5c
   b6c54:	f002 fe3e 	bl	b98d4 <_ZN6StringD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b6c58:	a813      	add	r0, sp, #76	; 0x4c
   b6c5a:	f002 fe3b 	bl	b98d4 <_ZN6StringD1Ev>
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b6c5e:	a80a      	add	r0, sp, #40	; 0x28
        count++;
   b6c60:	f108 0801 	add.w	r8, r8, #1
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b6c64:	f000 fb12 	bl	b728c <_ZN13JsonReferenceD1Ev>
   b6c68:	e5a0      	b.n	b67ac <loop+0x1b8>
            if(pointSide == nearestSide){
   b6c6a:	45bc      	cmp	ip, r7
   b6c6c:	d1e0      	bne.n	b6c30 <loop+0x63c>
              secondClosestIndex = closestIndex + 1;
   b6c6e:	1c43      	adds	r3, r0, #1
   b6c70:	e7de      	b.n	b6c30 <loop+0x63c>
   b6c72:	4602      	mov	r2, r0
   b6c74:	e77a      	b.n	b6b6c <loop+0x578>
   b6c76:	4619      	mov	r1, r3
   b6c78:	4694      	mov	ip, r2
   b6c7a:	e779      	b.n	b6b70 <loop+0x57c>
        bool inLoop = false;
   b6c7c:	2300      	movs	r3, #0
            pcbSegment = 3;
   b6c7e:	2503      	movs	r5, #3
   b6c80:	e7a2      	b.n	b6bc8 <loop+0x5d4>
            lowerScaleBound = 0;
   b6c82:	2100      	movs	r1, #0
        bool inLoop = false;
   b6c84:	460b      	mov	r3, r1
            pcbSegment = 0;
   b6c86:	460d      	mov	r5, r1
   b6c88:	e79e      	b.n	b6bc8 <loop+0x5d4>
        bool inLoop = false;
   b6c8a:	2300      	movs	r3, #0
            pcbSegment = 1;
   b6c8c:	2501      	movs	r5, #1
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b6c8e:	e79b      	b.n	b6bc8 <loop+0x5d4>
          if(cityIndex == 0){
   b6c90:	4aae      	ldr	r2, [pc, #696]	; (b6f4c <loop+0x958>)
   b6c92:	9e24      	ldr	r6, [sp, #144]	; 0x90
   b6c94:	6812      	ldr	r2, [r2, #0]
   b6c96:	2a00      	cmp	r2, #0
   b6c98:	d15b      	bne.n	b6d52 <loop+0x75e>
            if(inLoop){
   b6c9a:	2b00      	cmp	r3, #0
   b6c9c:	d043      	beq.n	b6d26 <loop+0x732>
              if(currentRailway.name == pinkLineCTA.name){
   b6c9e:	49ac      	ldr	r1, [pc, #688]	; (b6f50 <loop+0x95c>)
   b6ca0:	a827      	add	r0, sp, #156	; 0x9c
   b6ca2:	f7fd fe47 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6ca6:	b1f0      	cbz	r0, b6ce6 <loop+0x6f2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6ca8:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
   b6cac:	1a9b      	subs	r3, r3, r2
   b6cae:	109b      	asrs	r3, r3, #2
                segmentPos = (float)currentRailway.outputs[2].size() - segmentPos;
   b6cb0:	ee07 3a90 	vmov	s15, r3
   b6cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b6cb8:	ee37 8ac8 	vsub.f32	s16, s15, s16
            if(pcbSegment == 1 && currentRailway.name == greenLineCTA.name){
   b6cbc:	2d01      	cmp	r5, #1
   b6cbe:	d140      	bne.n	b6d42 <loop+0x74e>
   b6cc0:	49a4      	ldr	r1, [pc, #656]	; (b6f54 <loop+0x960>)
   b6cc2:	a827      	add	r0, sp, #156	; 0x9c
   b6cc4:	f7fd fe36 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6cc8:	2800      	cmp	r0, #0
   b6cca:	d042      	beq.n	b6d52 <loop+0x75e>
   b6ccc:	e9d6 2303 	ldrd	r2, r3, [r6, #12]
   b6cd0:	1a9b      	subs	r3, r3, r2
   b6cd2:	109b      	asrs	r3, r3, #2
              segmentPos = (float)currentRailway.outputs[1].size() - segmentPos;
   b6cd4:	ee07 3a90 	vmov	s15, r3
   b6cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b6cdc:	ee37 8ac8 	vsub.f32	s16, s15, s16
              trainDir = 6 - trainDir;
   b6ce0:	f1c4 0406 	rsb	r4, r4, #6
   b6ce4:	e035      	b.n	b6d52 <loop+0x75e>
              }else if(currentRailway.name == orangeLineCTA.name){
   b6ce6:	499c      	ldr	r1, [pc, #624]	; (b6f58 <loop+0x964>)
   b6ce8:	a827      	add	r0, sp, #156	; 0x9c
   b6cea:	f7fd fe23 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6cee:	2800      	cmp	r0, #0
   b6cf0:	d0e4      	beq.n	b6cbc <loop+0x6c8>
	return *(this->_M_impl._M_start + __n);
   b6cf2:	4b9a      	ldr	r3, [pc, #616]	; (b6f5c <loop+0x968>)
   b6cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6cf6:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   b6cfa:	1ad2      	subs	r2, r2, r3
   b6cfc:	1092      	asrs	r2, r2, #2
                segmentPos = (int)(segmentPos + orangeLineCTA.outputs[2].size() / 2) % orangeLineCTA.outputs[2].size();
   b6cfe:	0853      	lsrs	r3, r2, #1
   b6d00:	ee07 3a90 	vmov	s15, r3
   b6d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b6d08:	ee37 8a88 	vadd.f32	s16, s15, s16
   b6d0c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   b6d10:	ee17 3a90 	vmov	r3, s15
   b6d14:	fbb3 f1f2 	udiv	r1, r3, r2
   b6d18:	fb02 3311 	mls	r3, r2, r1, r3
   b6d1c:	ee08 3a10 	vmov	s16, r3
   b6d20:	eeb8 8a48 	vcvt.f32.u32	s16, s16
   b6d24:	e7ca      	b.n	b6cbc <loop+0x6c8>
              if(currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name){
   b6d26:	498e      	ldr	r1, [pc, #568]	; (b6f60 <loop+0x96c>)
   b6d28:	a827      	add	r0, sp, #156	; 0x9c
   b6d2a:	f7fd fe03 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6d2e:	b928      	cbnz	r0, b6d3c <loop+0x748>
   b6d30:	498c      	ldr	r1, [pc, #560]	; (b6f64 <loop+0x970>)
   b6d32:	a827      	add	r0, sp, #156	; 0x9c
   b6d34:	f7fd fdfe 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6d38:	2800      	cmp	r0, #0
   b6d3a:	d0bf      	beq.n	b6cbc <loop+0x6c8>
                trainDir = 6 - trainDir;
   b6d3c:	f1c4 0406 	rsb	r4, r4, #6
   b6d40:	e7bc      	b.n	b6cbc <loop+0x6c8>
            if(pcbSegment == 3 && currentRailway.name == pinkLineCTA.name){
   b6d42:	2d03      	cmp	r5, #3
   b6d44:	d105      	bne.n	b6d52 <loop+0x75e>
   b6d46:	4982      	ldr	r1, [pc, #520]	; (b6f50 <loop+0x95c>)
   b6d48:	a827      	add	r0, sp, #156	; 0x9c
   b6d4a:	f7fd fdf3 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6d4e:	2800      	cmp	r0, #0
   b6d50:	d1c6      	bne.n	b6ce0 <loop+0x6ec>
  { return __builtin_floorf(__x); }
   b6d52:	eeb0 0a48 	vmov.f32	s0, s16
   b6d56:	f003 fe0f 	bl	ba978 <floorf>
	return *(this->_M_impl._M_start + __n);
   b6d5a:	230c      	movs	r3, #12
          currentRailway.outputs[pcbSegment][(int)floor(segmentPos)] = trainDir;
   b6d5c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b6d60:	435d      	muls	r5, r3
   b6d62:	ee10 2a10 	vmov	r2, s0
   b6d66:	5973      	ldr	r3, [r6, r5]
   b6d68:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b6d6c:	e771      	b.n	b6c52 <loop+0x65e>
        }else if(cityIndex == 0 && i == 3){
   b6d6e:	2d03      	cmp	r5, #3
   b6d70:	d10d      	bne.n	b6d8e <loop+0x79a>
          if(currentRailway.name == orangeLineCTA.name){
   b6d72:	4979      	ldr	r1, [pc, #484]	; (b6f58 <loop+0x964>)
   b6d74:	4c7c      	ldr	r4, [pc, #496]	; (b6f68 <loop+0x974>)
   b6d76:	a827      	add	r0, sp, #156	; 0x9c
   b6d78:	f7fd fddc 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6d7c:	b118      	cbz	r0, b6d86 <loop+0x792>
            Wire.beginTransmission(greenLineCTAAdr[0]);
   b6d7e:	f003 fc0d 	bl	ba59c <_Z19__fetch_global_Wirev>
   b6d82:	6821      	ldr	r1, [r4, #0]
   b6d84:	e5a2      	b.n	b68cc <loop+0x2d8>
            Wire.beginTransmission(greenLineCTAAdr[1]);
   b6d86:	f003 fc09 	bl	ba59c <_Z19__fetch_global_Wirev>
   b6d8a:	6861      	ldr	r1, [r4, #4]
   b6d8c:	e59e      	b.n	b68cc <loop+0x2d8>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b6d8e:	f003 fc05 	bl	ba59c <_Z19__fetch_global_Wirev>
   b6d92:	f8db 3000 	ldr.w	r3, [fp]
   b6d96:	5999      	ldr	r1, [r3, r6]
   b6d98:	e598      	b.n	b68cc <loop+0x2d8>
        }else if(cityIndex == 0 && i == 3){
   b6d9a:	2d03      	cmp	r5, #3
   b6d9c:	d10d      	bne.n	b6dba <loop+0x7c6>
          if(currentRailway.name == orangeLineCTA.name){
   b6d9e:	496e      	ldr	r1, [pc, #440]	; (b6f58 <loop+0x964>)
   b6da0:	4c71      	ldr	r4, [pc, #452]	; (b6f68 <loop+0x974>)
   b6da2:	a827      	add	r0, sp, #156	; 0x9c
   b6da4:	f7fd fdc6 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6da8:	b118      	cbz	r0, b6db2 <loop+0x7be>
            Wire.beginTransmission(greenLineCTAAdr[0]);
   b6daa:	f003 fbf7 	bl	ba59c <_Z19__fetch_global_Wirev>
   b6dae:	6821      	ldr	r1, [r4, #0]
   b6db0:	e5c2      	b.n	b6938 <loop+0x344>
            Wire.beginTransmission(greenLineCTAAdr[1]);
   b6db2:	f003 fbf3 	bl	ba59c <_Z19__fetch_global_Wirev>
   b6db6:	6861      	ldr	r1, [r4, #4]
   b6db8:	e5be      	b.n	b6938 <loop+0x344>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b6dba:	f003 fbef 	bl	ba59c <_Z19__fetch_global_Wirev>
   b6dbe:	f8db 3000 	ldr.w	r3, [fp]
   b6dc2:	5999      	ldr	r1, [r3, r6]
   b6dc4:	e5b8      	b.n	b6938 <loop+0x344>
            else if(currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name){
   b6dc6:	f107 0130 	add.w	r1, r7, #48	; 0x30
   b6dca:	a827      	add	r0, sp, #156	; 0x9c
   b6dcc:	f7fd fdb2 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6dd0:	b920      	cbnz	r0, b6ddc <loop+0x7e8>
   b6dd2:	4964      	ldr	r1, [pc, #400]	; (b6f64 <loop+0x970>)
   b6dd4:	a827      	add	r0, sp, #156	; 0x9c
   b6dd6:	f7fd fdad 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6dda:	b190      	cbz	r0, b6e02 <loop+0x80e>
   b6ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6dde:	e9d2 2300 	ldrd	r2, r3, [r2]
   b6de2:	1a9b      	subs	r3, r3, r2
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b6de4:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b6de8:	f080 808a 	bcs.w	b6f00 <loop+0x90c>
                Wire.write((char)currentRailway.outputs[0][j] + '0');
   b6dec:	f003 fbd6 	bl	ba59c <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b6df0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b6df2:	681b      	ldr	r3, [r3, #0]
   b6df4:	f813 1024 	ldrb.w	r1, [r3, r4, lsl #2]
   b6df8:	3130      	adds	r1, #48	; 0x30
   b6dfa:	f7fd fa35 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b6dfe:	3401      	adds	r4, #1
   b6e00:	e7ec      	b.n	b6ddc <loop+0x7e8>
   b6e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6e04:	e9d2 2300 	ldrd	r2, r3, [r2]
   b6e08:	1a9b      	subs	r3, r3, r2
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b6e0a:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b6e0e:	d277      	bcs.n	b6f00 <loop+0x90c>
                Wire.write('0');
   b6e10:	f003 fbc4 	bl	ba59c <_Z19__fetch_global_Wirev>
   b6e14:	2130      	movs	r1, #48	; 0x30
   b6e16:	f7fd fa27 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b6e1a:	3401      	adds	r4, #1
   b6e1c:	e7f1      	b.n	b6e02 <loop+0x80e>
          if(i == 1 && (currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name)){
   b6e1e:	2d01      	cmp	r5, #1
   b6e20:	f040 80aa 	bne.w	b6f78 <loop+0x984>
   b6e24:	494e      	ldr	r1, [pc, #312]	; (b6f60 <loop+0x96c>)
   b6e26:	a827      	add	r0, sp, #156	; 0x9c
   b6e28:	f7fd fd84 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6e2c:	b928      	cbnz	r0, b6e3a <loop+0x846>
   b6e2e:	494d      	ldr	r1, [pc, #308]	; (b6f64 <loop+0x970>)
   b6e30:	a827      	add	r0, sp, #156	; 0x9c
   b6e32:	f7fd fd7f 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6e36:	2800      	cmp	r0, #0
   b6e38:	d062      	beq.n	b6f00 <loop+0x90c>
	return *(this->_M_impl._M_start + __n);
   b6e3a:	9a24      	ldr	r2, [sp, #144]	; 0x90
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6e3c:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
   b6e40:	1a9b      	subs	r3, r3, r2
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b6e42:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b6e46:	d25b      	bcs.n	b6f00 <loop+0x90c>
              Wire.write('0');
   b6e48:	f003 fba8 	bl	ba59c <_Z19__fetch_global_Wirev>
   b6e4c:	2130      	movs	r1, #48	; 0x30
   b6e4e:	f7fd fa0b 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b6e52:	3401      	adds	r4, #1
   b6e54:	e7f1      	b.n	b6e3a <loop+0x846>
          }else if(i == 3 && currentRailway.name == pinkLineCTA.name){
   b6e56:	493e      	ldr	r1, [pc, #248]	; (b6f50 <loop+0x95c>)
   b6e58:	a827      	add	r0, sp, #156	; 0x9c
   b6e5a:	f7fd fd6b 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6e5e:	2800      	cmp	r0, #0
   b6e60:	d04e      	beq.n	b6f00 <loop+0x90c>
	return *(this->_M_impl._M_start + __n);
   b6e62:	4f42      	ldr	r7, [pc, #264]	; (b6f6c <loop+0x978>)
   b6e64:	f8df a10c 	ldr.w	sl, [pc, #268]	; b6f74 <loop+0x980>
   b6e68:	6a78      	ldr	r0, [r7, #36]	; 0x24
   b6e6a:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6e6e:	e9d0 3200 	ldrd	r3, r2, [r0]
   b6e72:	1ad2      	subs	r2, r2, r3
   b6e74:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b6e78:	1a5b      	subs	r3, r3, r1
   b6e7a:	109b      	asrs	r3, r3, #2
            for(int j = 0; j < greenLineCTA.outputs[0].size() - pinkLineCTA.outputs[3].size(); j++){
   b6e7c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b6e80:	42a3      	cmp	r3, r4
   b6e82:	d93d      	bls.n	b6f00 <loop+0x90c>
              Wire.write('0');
   b6e84:	f003 fb8a 	bl	ba59c <_Z19__fetch_global_Wirev>
   b6e88:	2130      	movs	r1, #48	; 0x30
   b6e8a:	f7fd f9ed 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < greenLineCTA.outputs[0].size() - pinkLineCTA.outputs[3].size(); j++){
   b6e8e:	3401      	adds	r4, #1
   b6e90:	e7ea      	b.n	b6e68 <loop+0x874>
        Serial.println();
   b6e92:	f003 fa35 	bl	ba300 <_Z16_fetch_usbserialv>
   b6e96:	f002 fcb2 	bl	b97fe <_ZN5Print7printlnEv>
      for(int i = 0; i < 4; i++){
   b6e9a:	3501      	adds	r5, #1
        Wire.endTransmission();
   b6e9c:	f003 fb7e 	bl	ba59c <_Z19__fetch_global_Wirev>
   b6ea0:	f002 fb33 	bl	b950a <_ZN7TwoWire15endTransmissionEv>
      for(int i = 0; i < 4; i++){
   b6ea4:	2d04      	cmp	r5, #4
   b6ea6:	f106 0604 	add.w	r6, r6, #4
   b6eaa:	f47f acfd 	bne.w	b68a8 <loop+0x2b4>
   b6eae:	2300      	movs	r3, #0
          currentRailway.outputs[i][j] = 0;
   b6eb0:	461c      	mov	r4, r3
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6eb2:	2200      	movs	r2, #0
	return *(this->_M_impl._M_start + __n);
   b6eb4:	9924      	ldr	r1, [sp, #144]	; 0x90
   b6eb6:	18cd      	adds	r5, r1, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6eb8:	58c8      	ldr	r0, [r1, r3]
   b6eba:	6869      	ldr	r1, [r5, #4]
   b6ebc:	1a09      	subs	r1, r1, r0
   b6ebe:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
   b6ec2:	d203      	bcs.n	b6ecc <loop+0x8d8>
          currentRailway.outputs[i][j] = 0;
   b6ec4:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6ec8:	3201      	adds	r2, #1
   b6eca:	e7f3      	b.n	b6eb4 <loop+0x8c0>
      for(int i = 0; i < 4; i++){
   b6ecc:	330c      	adds	r3, #12
   b6ece:	2b30      	cmp	r3, #48	; 0x30
   b6ed0:	d1ef      	bne.n	b6eb2 <loop+0x8be>
      Serial.println();
   b6ed2:	f003 fa15 	bl	ba300 <_Z16_fetch_usbserialv>
   b6ed6:	f002 fc92 	bl	b97fe <_ZN5Print7printlnEv>
      }
   b6eda:	a807      	add	r0, sp, #28
   b6edc:	f7fd fc34 	bl	b4748 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      Railway currentRailway = cities[cityIndex].railways[j];
   b6ee0:	a81b      	add	r0, sp, #108	; 0x6c
   b6ee2:	f7fd ff9d 	bl	b4e20 <_ZN7RailwayD1Ev>
    for(int j = 0; j < cities[cityIndex].railways.size(); j++){
   b6ee6:	f109 0901 	add.w	r9, r9, #1
   b6eea:	f7ff bbc6 	b.w	b667a <loop+0x86>
    Serial.println();
   b6eee:	f003 fa07 	bl	ba300 <_Z16_fetch_usbserialv>
}
   b6ef2:	b037      	add	sp, #220	; 0xdc
   b6ef4:	ecbd 8b06 	vpop	{d8-d10}
   b6ef8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Serial.println();
   b6efc:	f002 bc7f 	b.w	b97fe <_ZN5Print7printlnEv>
        Serial.printf("%s rail part %i: ", currentRailway.name.c_str(), i);
   b6f00:	f003 f9fe 	bl	ba300 <_Z16_fetch_usbserialv>
   b6f04:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   b6f06:	491a      	ldr	r1, [pc, #104]	; (b6f70 <loop+0x97c>)
   b6f08:	462b      	mov	r3, r5
   b6f0a:	f7fd fa95 	bl	b4438 <_ZN5Print6printfEPKcz>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6f0e:	240c      	movs	r4, #12
   b6f10:	436c      	muls	r4, r5
   b6f12:	2700      	movs	r7, #0
	return *(this->_M_impl._M_start + __n);
   b6f14:	9a24      	ldr	r2, [sp, #144]	; 0x90
   b6f16:	1913      	adds	r3, r2, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6f18:	5912      	ldr	r2, [r2, r4]
   b6f1a:	685b      	ldr	r3, [r3, #4]
   b6f1c:	1a9b      	subs	r3, r3, r2
   b6f1e:	ebb7 0fa3 	cmp.w	r7, r3, asr #2
   b6f22:	d2b6      	bcs.n	b6e92 <loop+0x89e>
          Wire.write((char)currentRailway.outputs[i][j] + '0');
   b6f24:	f003 fb3a 	bl	ba59c <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b6f28:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b6f2a:	591b      	ldr	r3, [r3, r4]
   b6f2c:	f813 1027 	ldrb.w	r1, [r3, r7, lsl #2]
   b6f30:	3130      	adds	r1, #48	; 0x30
   b6f32:	f7fd f999 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
          Serial.print(currentRailway.outputs[i][j]);
   b6f36:	f003 f9e3 	bl	ba300 <_Z16_fetch_usbserialv>
   b6f3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b6f3c:	591b      	ldr	r3, [r3, r4]
   b6f3e:	220a      	movs	r2, #10
   b6f40:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
   b6f44:	f7fd f946 	bl	b41d4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6f48:	3701      	adds	r7, #1
   b6f4a:	e7e3      	b.n	b6f14 <loop+0x920>
   b6f4c:	200352d4 	.word	0x200352d4
   b6f50:	2003e520 	.word	0x2003e520
   b6f54:	20035658 	.word	0x20035658
   b6f58:	20037ee8 	.word	0x20037ee8
   b6f5c:	20037eb8 	.word	0x20037eb8
   b6f60:	200355d0 	.word	0x200355d0
   b6f64:	2003e58c 	.word	0x2003e58c
   b6f68:	20035694 	.word	0x20035694
   b6f6c:	20035628 	.word	0x20035628
   b6f70:	000bda4f 	.word	0x000bda4f
   b6f74:	2003e4f0 	.word	0x2003e4f0
          if(i == 3 && currentRailway.name == orangeLineCTA.name){
   b6f78:	2d03      	cmp	r5, #3
   b6f7a:	d1c1      	bne.n	b6f00 <loop+0x90c>
   b6f7c:	4910      	ldr	r1, [pc, #64]	; (b6fc0 <loop+0x9cc>)
   b6f7e:	a827      	add	r0, sp, #156	; 0x9c
   b6f80:	f7fd fcd8 	bl	b4934 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6f84:	2800      	cmp	r0, #0
   b6f86:	f43f af66 	beq.w	b6e56 <loop+0x862>
   b6f8a:	4f0e      	ldr	r7, [pc, #56]	; (b6fc4 <loop+0x9d0>)
   b6f8c:	4b0e      	ldr	r3, [pc, #56]	; (b6fc8 <loop+0x9d4>)
   b6f8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
   b6f90:	6a59      	ldr	r1, [r3, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6f92:	e9d0 3200 	ldrd	r3, r2, [r0]
   b6f96:	1ad2      	subs	r2, r2, r3
   b6f98:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b6f9c:	1a5b      	subs	r3, r3, r1
   b6f9e:	109b      	asrs	r3, r3, #2
            for(int j = 0; j < greenLineCTA.outputs[0].size() - orangeLineCTA.outputs[3].size(); j++){
   b6fa0:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b6fa4:	42a3      	cmp	r3, r4
   b6fa6:	d9ab      	bls.n	b6f00 <loop+0x90c>
              Wire.write('0');
   b6fa8:	f003 faf8 	bl	ba59c <_Z19__fetch_global_Wirev>
   b6fac:	2130      	movs	r1, #48	; 0x30
   b6fae:	f7fd f95b 	bl	b4268 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < greenLineCTA.outputs[0].size() - orangeLineCTA.outputs[3].size(); j++){
   b6fb2:	3401      	adds	r4, #1
   b6fb4:	e7ea      	b.n	b6f8c <loop+0x998>
}
   b6fb6:	b037      	add	sp, #220	; 0xdc
   b6fb8:	ecbd 8b06 	vpop	{d8-d10}
   b6fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6fc0:	20037ee8 	.word	0x20037ee8
   b6fc4:	20035628 	.word	0x20035628
   b6fc8:	20037eb8 	.word	0x20037eb8

000b6fcc <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b6fcc:	b510      	push	{r4, lr}
   b6fce:	4604      	mov	r4, r0
   b6fd0:	f003 f8c8 	bl	ba164 <_ZN9TCPClientC1Ev>
{

}
   b6fd4:	4620      	mov	r0, r4
   b6fd6:	bd10      	pop	{r4, pc}

000b6fd8 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b6fd8:	b538      	push	{r3, r4, r5, lr}
   b6fda:	4604      	mov	r4, r0
   b6fdc:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b6fde:	f002 fc07 	bl	b97f0 <_ZN5Print5printEPKc>
    client.print(": ");
   b6fe2:	4905      	ldr	r1, [pc, #20]	; (b6ff8 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b6fe4:	4620      	mov	r0, r4
   b6fe6:	f002 fc03 	bl	b97f0 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b6fea:	4629      	mov	r1, r5
   b6fec:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b6fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b6ff2:	f002 bc10 	b.w	b9816 <_ZN5Print7printlnEPKc>
   b6ff6:	bf00      	nop
   b6ff8:	000bd807 	.word	0x000bd807

000b6ffc <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b6ffc:	b538      	push	{r3, r4, r5, lr}
   b6ffe:	4605      	mov	r5, r0
   b7000:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b7002:	f002 fbf5 	bl	b97f0 <_ZN5Print5printEPKc>
    client.print(": ");
   b7006:	490b      	ldr	r1, [pc, #44]	; (b7034 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b7008:	4628      	mov	r0, r5
   b700a:	f002 fbf1 	bl	b97f0 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b700e:	2c00      	cmp	r4, #0
   b7010:	da0d      	bge.n	b702e <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b7012:	212d      	movs	r1, #45	; 0x2d
   b7014:	4628      	mov	r0, r5
   b7016:	f002 fbef 	bl	b97f8 <_ZN5Print5printEc>
            val = -n;
   b701a:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b701c:	4628      	mov	r0, r5
   b701e:	220a      	movs	r2, #10
   b7020:	f002 fc03 	bl	b982a <_ZN5Print11printNumberEmh>
        n += println();
   b7024:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b7026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b702a:	f002 bbe8 	b.w	b97fe <_ZN5Print7printlnEv>
            val = n;
   b702e:	4621      	mov	r1, r4
   b7030:	e7f4      	b.n	b701c <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b7032:	bf00      	nop
   b7034:	000bd807 	.word	0x000bd807

000b7038 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b7038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b703c:	460e      	mov	r6, r1
   b703e:	b091      	sub	sp, #68	; 0x44
   b7040:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b7042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7046:	6013      	str	r3, [r2, #0]
{
   b7048:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b704a:	2100      	movs	r1, #0
   b704c:	4630      	mov	r0, r6
   b704e:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b7052:	4617      	mov	r7, r2
   b7054:	f002 fd4c 	bl	b9af0 <_ZNK6String6equalsEPKc>
   b7058:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b705c:	4603      	mov	r3, r0
   b705e:	b998      	cbnz	r0, b7088 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b7060:	f1be 0f00 	cmp.w	lr, #0
   b7064:	bf14      	ite	ne
   b7066:	4672      	movne	r2, lr
   b7068:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b706a:	6831      	ldr	r1, [r6, #0]
   b706c:	b292      	uxth	r2, r2
   b706e:	4620      	mov	r0, r4
   b7070:	f002 fe78 	bl	b9d64 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b7074:	1e05      	subs	r5, r0, #0
   b7076:	bf18      	it	ne
   b7078:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b707a:	b9c5      	cbnz	r5, b70ae <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b707c:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b707e:	b011      	add	sp, #68	; 0x44
   b7080:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b7084:	f003 b824 	b.w	ba0d0 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b7088:	4b76      	ldr	r3, [pc, #472]	; (b7264 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b708a:	930a      	str	r3, [sp, #40]	; 0x28
   b708c:	f106 0c14 	add.w	ip, r6, #20
   b7090:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7094:	ad0b      	add	r5, sp, #44	; 0x2c
   b7096:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7098:	f8dc 3000 	ldr.w	r3, [ip]
   b709c:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b709e:	fa1f f28e 	uxth.w	r2, lr
   b70a2:	2300      	movs	r3, #0
   b70a4:	a90a      	add	r1, sp, #40	; 0x28
   b70a6:	4620      	mov	r0, r4
   b70a8:	f002 ff3c 	bl	b9f24 <_ZN9TCPClient7connectE9IPAddresstm>
   b70ac:	e7e2      	b.n	b7074 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b70ae:	4649      	mov	r1, r9
   b70b0:	4620      	mov	r0, r4
   b70b2:	f002 fb9d 	bl	b97f0 <_ZN5Print5printEPKc>
    client.print(" ");
   b70b6:	496c      	ldr	r1, [pc, #432]	; (b7268 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b70b8:	4620      	mov	r0, r4
   b70ba:	f002 fb99 	bl	b97f0 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b70be:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b70c0:	4620      	mov	r0, r4
   b70c2:	f002 fb95 	bl	b97f0 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b70c6:	4969      	ldr	r1, [pc, #420]	; (b726c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b70c8:	4620      	mov	r0, r4
   b70ca:	f002 fb91 	bl	b97f0 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b70ce:	4968      	ldr	r1, [pc, #416]	; (b7270 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b70d0:	4a68      	ldr	r2, [pc, #416]	; (b7274 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b70d2:	4620      	mov	r0, r4
   b70d4:	f7ff ff80 	bl	b6fd8 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b70d8:	2100      	movs	r1, #0
   b70da:	4630      	mov	r0, r6
   b70dc:	f002 fd08 	bl	b9af0 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b70e0:	b920      	cbnz	r0, b70ec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b70e2:	6832      	ldr	r2, [r6, #0]
   b70e4:	4964      	ldr	r1, [pc, #400]	; (b7278 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b70e6:	4620      	mov	r0, r4
   b70e8:	f7ff ff76 	bl	b6fd8 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b70ec:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b70f0:	2100      	movs	r1, #0
   b70f2:	4650      	mov	r0, sl
   b70f4:	f002 fcfc 	bl	b9af0 <_ZNK6String6equalsEPKc>
   b70f8:	b928      	cbnz	r0, b7106 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b70fa:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b70fc:	495f      	ldr	r1, [pc, #380]	; (b727c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b70fe:	4620      	mov	r0, r4
   b7100:	f7ff ff7c 	bl	b6ffc <_ZN10HttpClient10sendHeaderEPKci>
   b7104:	e006      	b.n	b7114 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b7106:	495e      	ldr	r1, [pc, #376]	; (b7280 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b7108:	4648      	mov	r0, r9
   b710a:	f004 faf3 	bl	bb6f4 <strcmp>
   b710e:	4602      	mov	r2, r0
   b7110:	2800      	cmp	r0, #0
   b7112:	d0f3      	beq.n	b70fc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b7114:	f1b8 0f00 	cmp.w	r8, #0
   b7118:	d00e      	beq.n	b7138 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b711a:	f8d8 1000 	ldr.w	r1, [r8]
   b711e:	b159      	cbz	r1, b7138 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b7120:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b7124:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b7126:	b122      	cbz	r2, b7132 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b7128:	f7ff ff56 	bl	b6fd8 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b712c:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b7130:	e7f3      	b.n	b711a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b7132:	f002 fb70 	bl	b9816 <_ZN5Print7printlnEPKc>
}
   b7136:	e7f9      	b.n	b712c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b7138:	4620      	mov	r0, r4
   b713a:	f002 fb60 	bl	b97fe <_ZN5Print7printlnEv>
    client.flush();
   b713e:	4620      	mov	r0, r4
   b7140:	f002 fd70 	bl	b9c24 <_ZN9TCPClient5flushEv>
   b7144:	2100      	movs	r1, #0
   b7146:	4650      	mov	r0, sl
   b7148:	f002 fcd2 	bl	b9af0 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b714c:	b918      	cbnz	r0, b7156 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b714e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b7150:	4620      	mov	r0, r4
   b7152:	f002 fb60 	bl	b9816 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b7156:	f104 0a1c 	add.w	sl, r4, #28
   b715a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   b715e:	2100      	movs	r1, #0
   b7160:	4650      	mov	r0, sl
   b7162:	f004 fa91 	bl	bb688 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7166:	f000 fdad 	bl	b7cc4 <HAL_Timer_Get_Milli_Seconds>
   b716a:	9001      	str	r0, [sp, #4]
   b716c:	f000 fdaa 	bl	b7cc4 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b7170:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b7174:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b7176:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b717a:	4620      	mov	r0, r4
   b717c:	f002 ff4e 	bl	ba01c <_ZN9TCPClient9availableEv>
   b7180:	b1e8      	cbz	r0, b71be <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   b7182:	4620      	mov	r0, r4
   b7184:	f002 fd34 	bl	b9bf0 <_ZN9TCPClient4readEv>
   b7188:	4681      	mov	r9, r0
   b718a:	f000 fd9b 	bl	b7cc4 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b718e:	f242 73fe 	movw	r3, #10238	; 0x27fe
   b7192:	429e      	cmp	r6, r3
   b7194:	9001      	str	r0, [sp, #4]
   b7196:	d804      	bhi.n	b71a2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b7198:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b719a:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b719e:	3601      	adds	r6, #1
        while (client.available()) {
   b71a0:	e7eb      	b.n	b717a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b71a2:	f242 73ff 	movw	r3, #10239	; 0x27ff
   b71a6:	429e      	cmp	r6, r3
   b71a8:	d1f9      	bne.n	b719e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b71aa:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   b71ae:	2200      	movs	r2, #0
   b71b0:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
                client.stop();
   b71b4:	4620      	mov	r0, r4
   b71b6:	f002 ff8b 	bl	ba0d0 <_ZN9TCPClient4stopEv>
                error = true;
   b71ba:	46a8      	mov	r8, r5
   b71bc:	e7ef      	b.n	b719e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b71be:	19a3      	adds	r3, r4, r6
   b71c0:	7718      	strb	r0, [r3, #28]
   b71c2:	f000 fd7f 	bl	b7cc4 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b71c6:	9b01      	ldr	r3, [sp, #4]
   b71c8:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b71cc:	f1b8 0f00 	cmp.w	r8, #0
   b71d0:	d104      	bne.n	b71dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
   b71d2:	45d9      	cmp	r9, fp
   b71d4:	d802      	bhi.n	b71dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
            delay(200);
   b71d6:	20c8      	movs	r0, #200	; 0xc8
   b71d8:	f000 ffa0 	bl	b811c <delay>
    } while (client.connected() && !timeout && !error);
   b71dc:	4620      	mov	r0, r4
   b71de:	f002 fe3f 	bl	b9e60 <_ZN9TCPClient9connectedEv>
   b71e2:	b120      	cbz	r0, b71ee <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b71e4:	45d9      	cmp	r9, fp
   b71e6:	d802      	bhi.n	b71ee <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b71e8:	f1b8 0f00 	cmp.w	r8, #0
   b71ec:	d0c5      	beq.n	b717a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b71ee:	4620      	mov	r0, r4
   b71f0:	f002 ff6e 	bl	ba0d0 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b71f4:	4651      	mov	r1, sl
   b71f6:	a802      	add	r0, sp, #8
   b71f8:	f002 fbb7 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b71fc:	230c      	movs	r3, #12
   b71fe:	2209      	movs	r2, #9
   b7200:	a902      	add	r1, sp, #8
   b7202:	a806      	add	r0, sp, #24
   b7204:	f002 fc98 	bl	b9b38 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b7208:	491e      	ldr	r1, [pc, #120]	; (b7284 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b720a:	a80a      	add	r0, sp, #40	; 0x28
   b720c:	f002 fbad 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
   b7210:	a90a      	add	r1, sp, #40	; 0x28
   b7212:	a802      	add	r0, sp, #8
   b7214:	f002 fc8d 	bl	b9b32 <_ZNK6String7indexOfERKS_>
   b7218:	4604      	mov	r4, r0
   b721a:	a80a      	add	r0, sp, #40	; 0x28
   b721c:	f002 fb5a 	bl	b98d4 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b7220:	1c63      	adds	r3, r4, #1
   b7222:	d108      	bne.n	b7236 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fe>
    String statusCode = raw_response.substring(9,12);
   b7224:	a806      	add	r0, sp, #24
   b7226:	f002 fb55 	bl	b98d4 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b722a:	a802      	add	r0, sp, #8
   b722c:	f002 fb52 	bl	b98d4 <_ZN6StringD1Ev>
}
   b7230:	b011      	add	sp, #68	; 0x44
   b7232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b7236:	1d3d      	adds	r5, r7, #4
   b7238:	4913      	ldr	r1, [pc, #76]	; (b7288 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b723a:	4628      	mov	r0, r5
   b723c:	f002 fbdd 	bl	b99fa <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b7240:	1d22      	adds	r2, r4, #4
   b7242:	a902      	add	r1, sp, #8
   b7244:	a80a      	add	r0, sp, #40	; 0x28
   b7246:	f002 fc97 	bl	b9b78 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b724a:	a90a      	add	r1, sp, #40	; 0x28
   b724c:	4628      	mov	r0, r5
   b724e:	f002 fc10 	bl	b9a72 <_ZN6String6concatERKS_>
   b7252:	a80a      	add	r0, sp, #40	; 0x28
   b7254:	f002 fb3e 	bl	b98d4 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b7258:	9806      	ldr	r0, [sp, #24]
   b725a:	f004 f9d9 	bl	bb610 <atoi>
   b725e:	6038      	str	r0, [r7, #0]
   b7260:	e7e0      	b.n	b7224 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ec>
   b7262:	bf00      	nop
   b7264:	000bde44 	.word	0x000bde44
   b7268:	000bd9d4 	.word	0x000bd9d4
   b726c:	000bdb88 	.word	0x000bdb88
   b7270:	000bdb9a 	.word	0x000bdb9a
   b7274:	000bdb94 	.word	0x000bdb94
   b7278:	000bdba5 	.word	0x000bdba5
   b727c:	000bdbaa 	.word	0x000bdbaa
   b7280:	000bdbb9 	.word	0x000bdbb9
   b7284:	000bdbbe 	.word	0x000bdbbe
   b7288:	000bdbc2 	.word	0x000bdbc2

000b728c <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   b728c:	4770      	bx	lr

000b728e <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   b728e:	b510      	push	{r4, lr}
}
   b7290:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   b7292:	4604      	mov	r4, r0
}
   b7294:	f7fc ff05 	bl	b40a2 <_ZdlPvj>
   b7298:	4620      	mov	r0, r4
   b729a:	bd10      	pop	{r4, pc}

000b729c <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   b729c:	b510      	push	{r4, lr}
   b729e:	4b05      	ldr	r3, [pc, #20]	; (b72b4 <_ZN10JsonBufferD1Ev+0x18>)
   b72a0:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b72a2:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b72a4:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b72a6:	b91b      	cbnz	r3, b72b0 <_ZN10JsonBufferD1Ev+0x14>
   b72a8:	6840      	ldr	r0, [r0, #4]
   b72aa:	b108      	cbz	r0, b72b0 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b72ac:	f000 feee 	bl	b808c <free>
}
   b72b0:	4620      	mov	r0, r4
   b72b2:	bd10      	pop	{r4, pc}
   b72b4:	000bdbd0 	.word	0x000bdbd0

000b72b8 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b72b8:	b510      	push	{r4, lr}
   b72ba:	4604      	mov	r4, r0
}
   b72bc:	f7ff ffee 	bl	b729c <_ZN10JsonBufferD1Ev>
   b72c0:	4620      	mov	r0, r4
   b72c2:	2114      	movs	r1, #20
   b72c4:	f7fc feed 	bl	b40a2 <_ZdlPvj>
   b72c8:	4620      	mov	r0, r4
   b72ca:	bd10      	pop	{r4, pc}

000b72cc <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b72cc:	b510      	push	{r4, lr}
   b72ce:	4b07      	ldr	r3, [pc, #28]	; (b72ec <_ZN10JsonParserD1Ev+0x20>)
   b72d0:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b72d2:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b72d4:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b72d6:	b91b      	cbnz	r3, b72e0 <_ZN10JsonParserD1Ev+0x14>
   b72d8:	6940      	ldr	r0, [r0, #20]
   b72da:	b108      	cbz	r0, b72e0 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b72dc:	f000 fed6 	bl	b808c <free>
JsonParser::~JsonParser() {
   b72e0:	4620      	mov	r0, r4
   b72e2:	f7ff ffdb 	bl	b729c <_ZN10JsonBufferD1Ev>
}
   b72e6:	4620      	mov	r0, r4
   b72e8:	bd10      	pop	{r4, pc}
   b72ea:	bf00      	nop
   b72ec:	000bdbe0 	.word	0x000bdbe0

000b72f0 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b72f0:	b510      	push	{r4, lr}
   b72f2:	4604      	mov	r4, r0
}
   b72f4:	f7ff ffea 	bl	b72cc <_ZN10JsonParserD1Ev>
   b72f8:	4620      	mov	r0, r4
   b72fa:	212c      	movs	r1, #44	; 0x2c
   b72fc:	f7fc fed1 	bl	b40a2 <_ZdlPvj>
   b7300:	4620      	mov	r0, r4
   b7302:	bd10      	pop	{r4, pc}

000b7304 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b7304:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b7306:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b7308:	4604      	mov	r4, r0
   b730a:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b730c:	b10b      	cbz	r3, b7312 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b730e:	2000      	movs	r0, #0
}
   b7310:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b7312:	6840      	ldr	r0, [r0, #4]
   b7314:	b138      	cbz	r0, b7326 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b7316:	f000 fec1 	bl	b809c <realloc>
		if (newBuffer) {
   b731a:	2800      	cmp	r0, #0
   b731c:	d0f7      	beq.n	b730e <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b731e:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b7322:	2001      	movs	r0, #1
   b7324:	e7f4      	b.n	b7310 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b7326:	4608      	mov	r0, r1
   b7328:	f000 fea8 	bl	b807c <malloc>
   b732c:	e7f5      	b.n	b731a <_ZN10JsonBuffer8allocateEj+0x16>

000b732e <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b732e:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7330:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7332:	460e      	mov	r6, r1
   b7334:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7336:	18d1      	adds	r1, r2, r3
   b7338:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b733a:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b733c:	b172      	cbz	r2, b735c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b733e:	6882      	ldr	r2, [r0, #8]
   b7340:	428a      	cmp	r2, r1
   b7342:	d30b      	bcc.n	b735c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b7344:	6860      	ldr	r0, [r4, #4]
   b7346:	68e3      	ldr	r3, [r4, #12]
   b7348:	462a      	mov	r2, r5
   b734a:	4631      	mov	r1, r6
   b734c:	4418      	add	r0, r3
   b734e:	f004 f973 	bl	bb638 <memcpy>
	offset += dataLen;
   b7352:	68e2      	ldr	r2, [r4, #12]
   b7354:	442a      	add	r2, r5
   b7356:	60e2      	str	r2, [r4, #12]
	return true;
   b7358:	2001      	movs	r0, #1
}
   b735a:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b735c:	4620      	mov	r0, r4
   b735e:	f7ff ffd1 	bl	b7304 <_ZN10JsonBuffer8allocateEj>
   b7362:	2800      	cmp	r0, #0
   b7364:	d1ee      	bne.n	b7344 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b7366:	e7f8      	b.n	b735a <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b7368 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b7368:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b736a:	2100      	movs	r1, #0
   b736c:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b736e:	b123      	cbz	r3, b737a <_ZN10JsonBuffer5clearEv+0x12>
   b7370:	6882      	ldr	r2, [r0, #8]
   b7372:	b112      	cbz	r2, b737a <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b7374:	4618      	mov	r0, r3
   b7376:	f004 b987 	b.w	bb688 <memset>
}
   b737a:	4770      	bx	lr

000b737c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b737c:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b737e:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b7382:	2200      	movs	r2, #0
   b7384:	60c2      	str	r2, [r0, #12]
   b7386:	2201      	movs	r2, #1
   b7388:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b738a:	6143      	str	r3, [r0, #20]
   b738c:	4a02      	ldr	r2, [pc, #8]	; (b7398 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b738e:	9b02      	ldr	r3, [sp, #8]
   b7390:	6002      	str	r2, [r0, #0]
   b7392:	61c3      	str	r3, [r0, #28]
}
   b7394:	bd10      	pop	{r4, pc}
   b7396:	bf00      	nop
   b7398:	000bdbe0 	.word	0x000bdbe0

000b739c <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   b739c:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   b73a0:	429a      	cmp	r2, r3
   b73a2:	4b04      	ldr	r3, [pc, #16]	; (b73b4 <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b73a4:	bf38      	it	cc
   b73a6:	6082      	strcc	r2, [r0, #8]
   b73a8:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b73ac:	bf24      	itt	cs
   b73ae:	2300      	movcs	r3, #0
   b73b0:	6083      	strcs	r3, [r0, #8]
}
   b73b2:	4770      	bx	lr
   b73b4:	000bdbf0 	.word	0x000bdbf0

000b73b8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b73b8:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b73ba:	6813      	ldr	r3, [r2, #0]
   b73bc:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b73be:	6813      	ldr	r3, [r2, #0]
   b73c0:	f103 0410 	add.w	r4, r3, #16
   b73c4:	6014      	str	r4, [r2, #0]
   b73c6:	6986      	ldr	r6, [r0, #24]
   b73c8:	42b4      	cmp	r4, r6
   b73ca:	d20a      	bcs.n	b73e2 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b73cc:	699b      	ldr	r3, [r3, #24]
   b73ce:	688c      	ldr	r4, [r1, #8]
   b73d0:	42a3      	cmp	r3, r4
   b73d2:	da01      	bge.n	b73d8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b73d4:	42ab      	cmp	r3, r5
   b73d6:	ddf2      	ble.n	b73be <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b73d8:	42a3      	cmp	r3, r4
   b73da:	bfcc      	ite	gt
   b73dc:	2000      	movgt	r0, #0
   b73de:	2001      	movle	r0, #1
   b73e0:	e000      	b.n	b73e4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b73e2:	2000      	movs	r0, #0
}
   b73e4:	bd70      	pop	{r4, r5, r6, pc}

000b73e6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b73e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b73ea:	9d08      	ldr	r5, [sp, #32]
   b73ec:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b73ee:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b73f2:	4604      	mov	r4, r0
   b73f4:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b73f6:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b73f8:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b73fa:	9801      	ldr	r0, [sp, #4]
   b73fc:	69a3      	ldr	r3, [r4, #24]
   b73fe:	4283      	cmp	r3, r0
   b7400:	d91a      	bls.n	b7438 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b7402:	6882      	ldr	r2, [r0, #8]
   b7404:	688b      	ldr	r3, [r1, #8]
   b7406:	429a      	cmp	r2, r3
   b7408:	da16      	bge.n	b7438 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b740a:	42ae      	cmp	r6, r5
   b740c:	d10b      	bne.n	b7426 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b740e:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b7410:	aa01      	add	r2, sp, #4
   b7412:	4620      	mov	r0, r4
   b7414:	f7ff ffd0 	bl	b73b8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b7418:	b128      	cbz	r0, b7426 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b741a:	9b01      	ldr	r3, [sp, #4]
   b741c:	f8c8 3000 	str.w	r3, [r8]
}
   b7420:	b002      	add	sp, #8
   b7422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b7426:	aa01      	add	r2, sp, #4
   b7428:	4620      	mov	r0, r4
   b742a:	f7ff ffc5 	bl	b73b8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b742e:	4620      	mov	r0, r4
		index++;
   b7430:	3601      	adds	r6, #1
		skipObject(container, token);
   b7432:	f7ff ffc1 	bl	b73b8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7436:	e7e0      	b.n	b73fa <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b7438:	2000      	movs	r0, #0
   b743a:	e7f1      	b.n	b7420 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b743c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b743c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b743e:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7440:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7444:	4604      	mov	r4, r0
   b7446:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7448:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b744a:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b744c:	9b01      	ldr	r3, [sp, #4]
   b744e:	69a2      	ldr	r2, [r4, #24]
   b7450:	429a      	cmp	r2, r3
   b7452:	d90f      	bls.n	b7474 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b7454:	6898      	ldr	r0, [r3, #8]
   b7456:	688a      	ldr	r2, [r1, #8]
   b7458:	4290      	cmp	r0, r2
   b745a:	da0b      	bge.n	b7474 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b745c:	42b5      	cmp	r5, r6
   b745e:	d103      	bne.n	b7468 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b7460:	603b      	str	r3, [r7, #0]
			return true;
   b7462:	2001      	movs	r0, #1
}
   b7464:	b003      	add	sp, #12
   b7466:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b7468:	aa01      	add	r2, sp, #4
   b746a:	4620      	mov	r0, r4
		index++;
   b746c:	3501      	adds	r5, #1
		skipObject(container, token);
   b746e:	f7ff ffa3 	bl	b73b8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7472:	e7eb      	b.n	b744c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b7474:	2000      	movs	r0, #0
   b7476:	e7f5      	b.n	b7464 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b7478 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b7478:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b747a:	3b01      	subs	r3, #1
   b747c:	2400      	movs	r4, #0
   b747e:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b7482:	1bf6      	subs	r6, r6, r7
   b7484:	42a6      	cmp	r6, r4
   b7486:	dd08      	ble.n	b749a <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b7488:	42a3      	cmp	r3, r4
   b748a:	dd06      	ble.n	b749a <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b748c:	6845      	ldr	r5, [r0, #4]
   b748e:	443d      	add	r5, r7
   b7490:	5d2d      	ldrb	r5, [r5, r4]
   b7492:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b7496:	3401      	adds	r4, #1
   b7498:	e7f1      	b.n	b747e <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b749a:	2300      	movs	r3, #0
   b749c:	7013      	strb	r3, [r2, #0]
}
   b749e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b74a0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b74a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b74a2:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b74a4:	2310      	movs	r3, #16
   b74a6:	466a      	mov	r2, sp
   b74a8:	f7ff ffe6 	bl	b7478 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b74ac:	4904      	ldr	r1, [pc, #16]	; (b74c0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b74ae:	4622      	mov	r2, r4
   b74b0:	4668      	mov	r0, sp
   b74b2:	f000 fdfb 	bl	b80ac <sscanf>
}
   b74b6:	1e43      	subs	r3, r0, #1
   b74b8:	4258      	negs	r0, r3
   b74ba:	4158      	adcs	r0, r3
   b74bc:	b004      	add	sp, #16
   b74be:	bd10      	pop	{r4, pc}
   b74c0:	000bdea4 	.word	0x000bdea4

000b74c4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
   b74c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b74c6:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b74c8:	2310      	movs	r3, #16
   b74ca:	466a      	mov	r2, sp
   b74cc:	f7ff ffd4 	bl	b7478 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
   b74d0:	4668      	mov	r0, sp
   b74d2:	2100      	movs	r1, #0
   b74d4:	f004 ff82 	bl	bc3dc <strtof>
}
   b74d8:	2001      	movs	r0, #1
	result = strtof(tmp, 0);
   b74da:	ed84 0a00 	vstr	s0, [r4]
}
   b74de:	b004      	add	sp, #16
   b74e0:	bd10      	pop	{r4, pc}
	...

000b74e4 <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   b74e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b74e6:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b74e8:	6889      	ldr	r1, [r1, #8]
   b74ea:	4e0a      	ldr	r6, [pc, #40]	; (b7514 <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   b74ec:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b74ee:	b161      	cbz	r1, b750a <_ZNK13JsonReference5indexEj+0x26>
   b74f0:	6868      	ldr	r0, [r5, #4]
   b74f2:	ab01      	add	r3, sp, #4
   b74f4:	f7ff ffa2 	bl	b743c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b74f8:	b138      	cbz	r0, b750a <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   b74fa:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b74fc:	e9c4 6300 	strd	r6, r3, [r4]
   b7500:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7502:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   b7504:	4620      	mov	r0, r4
   b7506:	b002      	add	sp, #8
   b7508:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b750a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b750c:	e9c4 6300 	strd	r6, r3, [r4]
   b7510:	2300      	movs	r3, #0
   b7512:	e7f6      	b.n	b7502 <_ZNK13JsonReference5indexEj+0x1e>
   b7514:	000bdbf0 	.word	0x000bdbf0

000b7518 <_ZNK13JsonReference8valueIntEi>:
bool JsonReference::valueBool(bool result) const {
	(void) value(result);
	return result;
}

int JsonReference::valueInt(int result) const {
   b7518:	b507      	push	{r0, r1, r2, lr}
   b751a:	9101      	str	r1, [sp, #4]
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   b751c:	6881      	ldr	r1, [r0, #8]
   b751e:	b119      	cbz	r1, b7528 <_ZNK13JsonReference8valueIntEi+0x10>
   b7520:	6840      	ldr	r0, [r0, #4]
   b7522:	aa01      	add	r2, sp, #4
   b7524:	f7ff ffbc 	bl	b74a0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	(void) value(result);
	return result;
}
   b7528:	9801      	ldr	r0, [sp, #4]
   b752a:	b003      	add	sp, #12
   b752c:	f85d fb04 	ldr.w	pc, [sp], #4

000b7530 <_ZNK13JsonReference10valueFloatEf>:
unsigned long JsonReference::valueUnsignedLong(unsigned long result) const {
	(void) value(result);
	return result;
}

float JsonReference::valueFloat(float result) const {
   b7530:	b507      	push	{r0, r1, r2, lr}
   b7532:	6881      	ldr	r1, [r0, #8]
   b7534:	ed8d 0a01 	vstr	s0, [sp, #4]
   b7538:	b119      	cbz	r1, b7542 <_ZNK13JsonReference10valueFloatEf+0x12>
   b753a:	6840      	ldr	r0, [r0, #4]
   b753c:	aa01      	add	r2, sp, #4
   b753e:	f7ff ffc1 	bl	b74c4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
	(void) value(result);
	return result;
}
   b7542:	ed9d 0a01 	vldr	s0, [sp, #4]
   b7546:	b003      	add	sp, #12
   b7548:	f85d fb04 	ldr.w	pc, [sp], #4

000b754c <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b754c:	b510      	push	{r4, lr}
   b754e:	4604      	mov	r4, r0
	if (str) {
   b7550:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b7552:	460b      	mov	r3, r1
	if (str) {
   b7554:	b128      	cbz	r0, b7562 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b7556:	f002 fa90 	bl	b9a7a <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b755a:	68e3      	ldr	r3, [r4, #12]
   b755c:	3301      	adds	r3, #1
   b755e:	60e3      	str	r3, [r4, #12]
	}
}
   b7560:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b7562:	6860      	ldr	r0, [r4, #4]
   b7564:	2800      	cmp	r0, #0
   b7566:	d0f8      	beq.n	b755a <_ZN16JsonParserString6appendEc+0xe>
   b7568:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b756c:	3a01      	subs	r2, #1
   b756e:	428a      	cmp	r2, r1
			buf[length] = ch;
   b7570:	bf88      	it	hi
   b7572:	5443      	strbhi	r3, [r0, r1]
   b7574:	e7f1      	b.n	b755a <_ZN16JsonParserString6appendEc+0xe>

000b7576 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b7576:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b7578:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b757a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b757c:	4608      	mov	r0, r1
		str.append((char)unicode);
   b757e:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b7580:	d804      	bhi.n	b758c <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b7582:	b003      	add	sp, #12
   b7584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b7588:	f7ff bfe0 	b.w	b754c <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b758c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b7590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b7594:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b7598:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b759c:	d207      	bcs.n	b75ae <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b759e:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b75a2:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b75a4:	f7ff ffd2 	bl	b754c <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b75a8:	9801      	ldr	r0, [sp, #4]
   b75aa:	4621      	mov	r1, r4
   b75ac:	e7e9      	b.n	b7582 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b75ae:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b75b0:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b75b4:	9001      	str	r0, [sp, #4]
   b75b6:	f7ff ffc9 	bl	b754c <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b75ba:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b75be:	9801      	ldr	r0, [sp, #4]
   b75c0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b75c4:	e7ee      	b.n	b75a4 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b75c8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b75c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b75cc:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b75ce:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b75d0:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b76a0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b75d4:	4680      	mov	r8, r0
   b75d6:	460f      	mov	r7, r1
   b75d8:	4615      	mov	r5, r2
			escape = false;
   b75da:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b75dc:	68b8      	ldr	r0, [r7, #8]
   b75de:	42b0      	cmp	r0, r6
   b75e0:	dd5a      	ble.n	b7698 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b75e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b75e6:	5d99      	ldrb	r1, [r3, r6]
   b75e8:	199a      	adds	r2, r3, r6
		if (escape) {
   b75ea:	2c00      	cmp	r4, #0
   b75ec:	d04b      	beq.n	b7686 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b75ee:	2975      	cmp	r1, #117	; 0x75
   b75f0:	d805      	bhi.n	b75fe <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b75f2:	296d      	cmp	r1, #109	; 0x6d
   b75f4:	d807      	bhi.n	b7606 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b75f6:	2962      	cmp	r1, #98	; 0x62
   b75f8:	d01e      	beq.n	b7638 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b75fa:	2966      	cmp	r1, #102	; 0x66
   b75fc:	d01e      	beq.n	b763c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b75fe:	4628      	mov	r0, r5
   b7600:	f7ff ffa4 	bl	b754c <_ZN16JsonParserString6appendEc>
				break;
   b7604:	e03d      	b.n	b7682 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b7606:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b760a:	2c07      	cmp	r4, #7
   b760c:	d8f7      	bhi.n	b75fe <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b760e:	f20f 0c08 	addw	ip, pc, #8
   b7612:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b7616:	bf00      	nop
   b7618:	000b7641 	.word	0x000b7641
   b761c:	000b75ff 	.word	0x000b75ff
   b7620:	000b75ff 	.word	0x000b75ff
   b7624:	000b75ff 	.word	0x000b75ff
   b7628:	000b7645 	.word	0x000b7645
   b762c:	000b75ff 	.word	0x000b75ff
   b7630:	000b7649 	.word	0x000b7649
   b7634:	000b764d 	.word	0x000b764d
				str.append('\b');
   b7638:	2108      	movs	r1, #8
   b763a:	e7e0      	b.n	b75fe <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b763c:	210c      	movs	r1, #12
   b763e:	e7de      	b.n	b75fe <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b7640:	210a      	movs	r1, #10
   b7642:	e7dc      	b.n	b75fe <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b7644:	210d      	movs	r1, #13
   b7646:	e7da      	b.n	b75fe <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b7648:	2109      	movs	r1, #9
   b764a:	e7d8      	b.n	b75fe <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b764c:	1d31      	adds	r1, r6, #4
   b764e:	4288      	cmp	r0, r1
   b7650:	dd17      	ble.n	b7682 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b7652:	a902      	add	r1, sp, #8
   b7654:	3304      	adds	r3, #4
   b7656:	4433      	add	r3, r6
   b7658:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b765a:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b765e:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b7662:	429a      	cmp	r2, r3
   b7664:	d1f9      	bne.n	b765a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7666:	aa01      	add	r2, sp, #4
   b7668:	4651      	mov	r1, sl
					tmp[4] = 0;
   b766a:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b766e:	f000 fd1d 	bl	b80ac <sscanf>
   b7672:	2801      	cmp	r0, #1
   b7674:	d105      	bne.n	b7682 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b7676:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b767a:	4629      	mov	r1, r5
   b767c:	f7ff ff7b 	bl	b7576 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b7680:	3605      	adds	r6, #5
			escape = false;
   b7682:	2400      	movs	r4, #0
   b7684:	e004      	b.n	b7690 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b7686:	295c      	cmp	r1, #92	; 0x5c
   b7688:	d004      	beq.n	b7694 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b768a:	4628      	mov	r0, r5
   b768c:	f7ff ff5e 	bl	b754c <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b7690:	3601      	adds	r6, #1
   b7692:	e7a3      	b.n	b75dc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b7694:	2401      	movs	r4, #1
   b7696:	e7fb      	b.n	b7690 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b7698:	2001      	movs	r0, #1
   b769a:	b004      	add	sp, #16
   b769c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b76a0:	000bdbc3 	.word	0x000bdbc3

000b76a4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b76a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b76a6:	460c      	mov	r4, r1
   b76a8:	4606      	mov	r6, r0
	result = "";
   b76aa:	490c      	ldr	r1, [pc, #48]	; (b76dc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b76ac:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b76ae:	4615      	mov	r5, r2
	result = "";
   b76b0:	f002 f9a3 	bl	b99fa <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b76b4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b76b8:	1ac9      	subs	r1, r1, r3
   b76ba:	3101      	adds	r1, #1
   b76bc:	4628      	mov	r0, r5
   b76be:	f002 f927 	bl	b9910 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b76c2:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b76c4:	466a      	mov	r2, sp
   b76c6:	4621      	mov	r1, r4
   b76c8:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b76ca:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b76ce:	9500      	str	r5, [sp, #0]
   b76d0:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b76d2:	f7ff ff79 	bl	b75c8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b76d6:	b004      	add	sp, #16
   b76d8:	bd70      	pop	{r4, r5, r6, pc}
   b76da:	bf00      	nop
   b76dc:	000bdbc2 	.word	0x000bdbc2

000b76e0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b76e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b76e4:	b089      	sub	sp, #36	; 0x24
   b76e6:	4605      	mov	r5, r0
   b76e8:	4688      	mov	r8, r1
	String keyName;
   b76ea:	a804      	add	r0, sp, #16
   b76ec:	4912      	ldr	r1, [pc, #72]	; (b7738 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b76ee:	4616      	mov	r6, r2
   b76f0:	4699      	mov	r9, r3
	String keyName;
   b76f2:	f002 f93a 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b76f6:	2700      	movs	r7, #0
   b76f8:	9700      	str	r7, [sp, #0]
   b76fa:	464b      	mov	r3, r9
   b76fc:	aa03      	add	r2, sp, #12
   b76fe:	4641      	mov	r1, r8
   b7700:	4628      	mov	r0, r5
   b7702:	f7ff fe70 	bl	b73e6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b7706:	4604      	mov	r4, r0
   b7708:	b170      	cbz	r0, b7728 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b770a:	9903      	ldr	r1, [sp, #12]
   b770c:	aa04      	add	r2, sp, #16
   b770e:	4628      	mov	r0, r5
   b7710:	f7ff ffc8 	bl	b76a4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b7714:	4604      	mov	r4, r0
   b7716:	b908      	cbnz	r0, b771c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b7718:	3701      	adds	r7, #1
   b771a:	e7ed      	b.n	b76f8 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b771c:	4631      	mov	r1, r6
   b771e:	a804      	add	r0, sp, #16
   b7720:	f002 f9e6 	bl	b9af0 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b7724:	2800      	cmp	r0, #0
   b7726:	d0f7      	beq.n	b7718 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b7728:	a804      	add	r0, sp, #16
   b772a:	f002 f8d3 	bl	b98d4 <_ZN6StringD1Ev>
}
   b772e:	4620      	mov	r0, r4
   b7730:	b009      	add	sp, #36	; 0x24
   b7732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7736:	bf00      	nop
   b7738:	000bdbc2 	.word	0x000bdbc2

000b773c <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   b773c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b773e:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b7740:	6889      	ldr	r1, [r1, #8]
   b7742:	4e0a      	ldr	r6, [pc, #40]	; (b776c <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   b7744:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b7746:	b161      	cbz	r1, b7762 <_ZNK13JsonReference3keyEPKc+0x26>
   b7748:	6868      	ldr	r0, [r5, #4]
   b774a:	ab01      	add	r3, sp, #4
   b774c:	f7ff ffc8 	bl	b76e0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b7750:	b138      	cbz	r0, b7762 <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   b7752:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b7754:	e9c4 6300 	strd	r6, r3, [r4]
   b7758:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b775a:	60a3      	str	r3, [r4, #8]
}
   b775c:	4620      	mov	r0, r4
   b775e:	b002      	add	sp, #8
   b7760:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b7762:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7764:	e9c4 6300 	strd	r6, r3, [r4]
   b7768:	2300      	movs	r3, #0
   b776a:	e7f6      	b.n	b775a <_ZNK13JsonReference3keyEPKc+0x1e>
   b776c:	000bdbf0 	.word	0x000bdbf0

000b7770 <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   b7770:	b538      	push	{r3, r4, r5, lr}
   b7772:	460d      	mov	r5, r1
	String result;
   b7774:	4905      	ldr	r1, [pc, #20]	; (b778c <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   b7776:	4604      	mov	r4, r0
	String result;
   b7778:	f002 f8f7 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
   b777c:	68a9      	ldr	r1, [r5, #8]
   b777e:	b119      	cbz	r1, b7788 <_ZNK13JsonReference11valueStringEv+0x18>
   b7780:	6868      	ldr	r0, [r5, #4]
   b7782:	4622      	mov	r2, r4
   b7784:	f7ff ff8e 	bl	b76a4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   b7788:	4620      	mov	r0, r4
   b778a:	bd38      	pop	{r3, r4, r5, pc}
   b778c:	000bdbc2 	.word	0x000bdbc2

000b7790 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b7790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b7794:	6844      	ldr	r4, [r0, #4]
   b7796:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b779a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b779e:	f8d0 e000 	ldr.w	lr, [r0]
   b77a2:	4596      	cmp	lr, r2
   b77a4:	f080 81b9 	bcs.w	b7b1a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b77a8:	f811 800e 	ldrb.w	r8, [r1, lr]
   b77ac:	f1b8 0f00 	cmp.w	r8, #0
   b77b0:	f000 81b3 	beq.w	b7b1a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b77b4:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b77b8:	f000 8098 	beq.w	b78ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b77bc:	d833      	bhi.n	b7826 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b77be:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b77c2:	f000 80a6 	beq.w	b7912 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b77c6:	d810      	bhi.n	b77ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b77c8:	f1a8 0809 	sub.w	r8, r8, #9
   b77cc:	fa5f f888 	uxtb.w	r8, r8
   b77d0:	f1b8 0f17 	cmp.w	r8, #23
   b77d4:	d80d      	bhi.n	b77f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b77d6:	4d9f      	ldr	r5, [pc, #636]	; (b7a54 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b77d8:	fa0c f808 	lsl.w	r8, ip, r8
   b77dc:	ea18 0f05 	tst.w	r8, r5
   b77e0:	d007      	beq.n	b77f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b77e2:	6805      	ldr	r5, [r0, #0]
   b77e4:	3501      	adds	r5, #1
   b77e6:	6005      	str	r5, [r0, #0]
   b77e8:	e7d9      	b.n	b779e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b77ea:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b77ee:	f000 8133 	beq.w	b7a58 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b77f2:	f8d0 8000 	ldr.w	r8, [r0]
   b77f6:	4542      	cmp	r2, r8
   b77f8:	d90e      	bls.n	b7818 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b77fa:	f811 5008 	ldrb.w	r5, [r1, r8]
   b77fe:	b15d      	cbz	r5, b7818 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b7800:	2d3a      	cmp	r5, #58	; 0x3a
   b7802:	f200 8169 	bhi.w	b7ad8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b7806:	2d1f      	cmp	r5, #31
   b7808:	f200 8151 	bhi.w	b7aae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b780c:	2d0a      	cmp	r5, #10
   b780e:	f200 8160 	bhi.w	b7ad2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b7812:	2d08      	cmp	r5, #8
   b7814:	f240 8156 	bls.w	b7ac4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b7818:	2b00      	cmp	r3, #0
   b781a:	f040 8162 	bne.w	b7ae2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b781e:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b7822:	6005      	str	r5, [r0, #0]
   b7824:	e0a5      	b.n	b7972 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b7826:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b782a:	d037      	beq.n	b789c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b782c:	d82e      	bhi.n	b788c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b782e:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b7832:	d033      	beq.n	b789c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b7834:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b7838:	d1db      	bne.n	b77f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b783a:	2b00      	cmp	r3, #0
   b783c:	d0d1      	beq.n	b77e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b783e:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b7842:	6845      	ldr	r5, [r0, #4]
   b7844:	3d01      	subs	r5, #1
   b7846:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b784a:	2d00      	cmp	r5, #0
   b784c:	db55      	blt.n	b78fa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b784e:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b7852:	3701      	adds	r7, #1
   b7854:	d04d      	beq.n	b78f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b7856:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b785a:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b785e:	d148      	bne.n	b78f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b7860:	f898 b000 	ldrb.w	fp, [r8]
   b7864:	45cb      	cmp	fp, r9
   b7866:	d14b      	bne.n	b7900 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b7868:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b786c:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b7870:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b7874:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b7878:	f8de 7004 	ldr.w	r7, [lr, #4]
   b787c:	3701      	adds	r7, #1
   b787e:	d042      	beq.n	b7906 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b7880:	f8de 7008 	ldr.w	r7, [lr, #8]
   b7884:	3701      	adds	r7, #1
   b7886:	d13e      	bne.n	b7906 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b7888:	6085      	str	r5, [r0, #8]
				break;
   b788a:	e7aa      	b.n	b77e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b788c:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b7890:	d1af      	bne.n	b77f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b7892:	2b00      	cmp	r3, #0
   b7894:	d0a5      	beq.n	b77e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b7896:	f04f 0901 	mov.w	r9, #1
   b789a:	e7d2      	b.n	b7842 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b789c:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b789e:	2b00      	cmp	r3, #0
   b78a0:	d09f      	beq.n	b77e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b78a2:	6845      	ldr	r5, [r0, #4]
   b78a4:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b78a6:	42af      	cmp	r7, r5
   b78a8:	d94a      	bls.n	b7940 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b78aa:	f105 0e01 	add.w	lr, r5, #1
   b78ae:	f8c0 e004 	str.w	lr, [r0, #4]
   b78b2:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b78b6:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b78ba:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b78be:	2500      	movs	r5, #0
   b78c0:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b78c4:	6885      	ldr	r5, [r0, #8]
   b78c6:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b78c8:	bf1f      	itttt	ne
   b78ca:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b78ce:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b78d2:	3501      	addne	r5, #1
   b78d4:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b78d8:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b78dc:	bf0c      	ite	eq
   b78de:	2501      	moveq	r5, #1
   b78e0:	2502      	movne	r5, #2
   b78e2:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b78e6:	6805      	ldr	r5, [r0, #0]
   b78e8:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b78ec:	6845      	ldr	r5, [r0, #4]
   b78ee:	3d01      	subs	r5, #1
   b78f0:	e7ca      	b.n	b7888 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b78f2:	3d01      	subs	r5, #1
   b78f4:	f1a8 0810 	sub.w	r8, r8, #16
   b78f8:	e7a7      	b.n	b784a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b78fa:	3501      	adds	r5, #1
   b78fc:	f47f af71 	bne.w	b77e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b7900:	f06f 0401 	mvn.w	r4, #1
   b7904:	e01e      	b.n	b7944 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b7906:	3d01      	subs	r5, #1
   b7908:	1c6f      	adds	r7, r5, #1
   b790a:	f1ae 0e10 	sub.w	lr, lr, #16
   b790e:	d1b3      	bne.n	b7878 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b7910:	e767      	b.n	b77e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b7912:	f10e 0901 	add.w	r9, lr, #1
   b7916:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b791a:	f8d0 8000 	ldr.w	r8, [r0]
   b791e:	4542      	cmp	r2, r8
   b7920:	f240 8093 	bls.w	b7a4a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b7924:	f811 5008 	ldrb.w	r5, [r1, r8]
   b7928:	2d00      	cmp	r5, #0
   b792a:	f000 808e 	beq.w	b7a4a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b792e:	2d22      	cmp	r5, #34	; 0x22
   b7930:	d130      	bne.n	b7994 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b7932:	b1f3      	cbz	r3, b7972 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b7934:	6845      	ldr	r5, [r0, #4]
   b7936:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b7938:	42af      	cmp	r7, r5
   b793a:	d806      	bhi.n	b794a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b793c:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b7940:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b7944:	4620      	mov	r0, r4
   b7946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b794a:	f105 0e01 	add.w	lr, r5, #1
   b794e:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b7952:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b7956:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b795a:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b795e:	2700      	movs	r7, #0
   b7960:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b7962:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b7966:	f04f 0a03 	mov.w	sl, #3
   b796a:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b796e:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b7972:	6885      	ldr	r5, [r0, #8]
   b7974:	1c6f      	adds	r7, r5, #1
				count++;
   b7976:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b797a:	f43f af32 	beq.w	b77e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b797e:	2b00      	cmp	r3, #0
   b7980:	f43f af2f 	beq.w	b77e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b7984:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b7988:	f8de 500c 	ldr.w	r5, [lr, #12]
   b798c:	3501      	adds	r5, #1
   b798e:	f8ce 500c 	str.w	r5, [lr, #12]
   b7992:	e726      	b.n	b77e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b7994:	2d5c      	cmp	r5, #92	; 0x5c
   b7996:	d111      	bne.n	b79bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b7998:	f108 0501 	add.w	r5, r8, #1
   b799c:	42aa      	cmp	r2, r5
   b799e:	d90d      	bls.n	b79bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b79a0:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b79a2:	5d4d      	ldrb	r5, [r1, r5]
   b79a4:	2d75      	cmp	r5, #117	; 0x75
   b79a6:	d82b      	bhi.n	b7a00 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b79a8:	2d6d      	cmp	r5, #109	; 0x6d
   b79aa:	d80b      	bhi.n	b79c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b79ac:	2d66      	cmp	r5, #102	; 0x66
   b79ae:	d827      	bhi.n	b7a00 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b79b0:	2d5b      	cmp	r5, #91	; 0x5b
   b79b2:	d81d      	bhi.n	b79f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b79b4:	2d22      	cmp	r5, #34	; 0x22
   b79b6:	d001      	beq.n	b79bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b79b8:	2d2f      	cmp	r5, #47	; 0x2f
   b79ba:	d121      	bne.n	b7a00 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b79bc:	6805      	ldr	r5, [r0, #0]
   b79be:	3501      	adds	r5, #1
   b79c0:	6005      	str	r5, [r0, #0]
   b79c2:	e7aa      	b.n	b791a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b79c4:	3d6e      	subs	r5, #110	; 0x6e
   b79c6:	2d07      	cmp	r5, #7
   b79c8:	d81a      	bhi.n	b7a00 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b79ca:	a701      	add	r7, pc, #4	; (adr r7, b79d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b79cc:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b79d0:	000b79bd 	.word	0x000b79bd
   b79d4:	000b7a01 	.word	0x000b7a01
   b79d8:	000b7a01 	.word	0x000b7a01
   b79dc:	000b7a01 	.word	0x000b7a01
   b79e0:	000b79bd 	.word	0x000b79bd
   b79e4:	000b7a01 	.word	0x000b7a01
   b79e8:	000b79bd 	.word	0x000b79bd
   b79ec:	000b7a07 	.word	0x000b7a07
   b79f0:	3d5c      	subs	r5, #92	; 0x5c
   b79f2:	b2ed      	uxtb	r5, r5
   b79f4:	fa0c f505 	lsl.w	r5, ip, r5
   b79f8:	f240 4741 	movw	r7, #1089	; 0x441
   b79fc:	423d      	tst	r5, r7
   b79fe:	d1dd      	bne.n	b79bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b7a00:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b7a04:	e77c      	b.n	b7900 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b7a06:	f108 0502 	add.w	r5, r8, #2
   b7a0a:	6005      	str	r5, [r0, #0]
   b7a0c:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b7a10:	f8d0 8000 	ldr.w	r8, [r0]
   b7a14:	4542      	cmp	r2, r8
   b7a16:	d803      	bhi.n	b7a20 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b7a18:	6805      	ldr	r5, [r0, #0]
   b7a1a:	3d01      	subs	r5, #1
   b7a1c:	6005      	str	r5, [r0, #0]
					break;
   b7a1e:	e7cd      	b.n	b79bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b7a20:	f811 5008 	ldrb.w	r5, [r1, r8]
   b7a24:	2d00      	cmp	r5, #0
   b7a26:	d0f7      	beq.n	b7a18 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b7a28:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b7a2c:	f1bb 0f09 	cmp.w	fp, #9
   b7a30:	d904      	bls.n	b7a3c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b7a32:	f025 0520 	bic.w	r5, r5, #32
   b7a36:	3d41      	subs	r5, #65	; 0x41
   b7a38:	2d05      	cmp	r5, #5
   b7a3a:	d8e1      	bhi.n	b7a00 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b7a3c:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b7a40:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b7a44:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b7a46:	d1e3      	bne.n	b7a10 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b7a48:	e7e6      	b.n	b7a18 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b7a4a:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b7a4e:	f06f 0402 	mvn.w	r4, #2
   b7a52:	e777      	b.n	b7944 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b7a54:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b7a58:	2b00      	cmp	r3, #0
   b7a5a:	f43f aec2 	beq.w	b77e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b7a5e:	6885      	ldr	r5, [r0, #8]
   b7a60:	1c6f      	adds	r7, r5, #1
   b7a62:	f43f aebe 	beq.w	b77e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b7a66:	012d      	lsls	r5, r5, #4
   b7a68:	5d5d      	ldrb	r5, [r3, r5]
   b7a6a:	3d01      	subs	r5, #1
   b7a6c:	2d01      	cmp	r5, #1
   b7a6e:	f67f aeb8 	bls.w	b77e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b7a72:	6845      	ldr	r5, [r0, #4]
   b7a74:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b7a78:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b7a7c:	f1b8 0f00 	cmp.w	r8, #0
   b7a80:	f6ff aeaf 	blt.w	b77e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b7a84:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b7a88:	3d01      	subs	r5, #1
   b7a8a:	2d01      	cmp	r5, #1
   b7a8c:	d80a      	bhi.n	b7aa4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b7a8e:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b7a92:	3501      	adds	r5, #1
   b7a94:	d006      	beq.n	b7aa4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b7a96:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b7a9a:	3501      	adds	r5, #1
   b7a9c:	d102      	bne.n	b7aa4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b7a9e:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b7aa2:	e69e      	b.n	b77e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b7aa4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7aa8:	f1ae 0e10 	sub.w	lr, lr, #16
   b7aac:	e7e6      	b.n	b7a7c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b7aae:	f1a5 0920 	sub.w	r9, r5, #32
   b7ab2:	4f24      	ldr	r7, [pc, #144]	; (b7b44 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b7ab4:	fa5f f989 	uxtb.w	r9, r9
   b7ab8:	fa0c f909 	lsl.w	r9, ip, r9
   b7abc:	ea19 0f07 	tst.w	r9, r7
   b7ac0:	f47f aeaa 	bne.w	b7818 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b7ac4:	3d20      	subs	r5, #32
   b7ac6:	2d5e      	cmp	r5, #94	; 0x5e
   b7ac8:	d89a      	bhi.n	b7a00 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7aca:	f108 0501 	add.w	r5, r8, #1
   b7ace:	6005      	str	r5, [r0, #0]
   b7ad0:	e68f      	b.n	b77f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b7ad2:	2d0d      	cmp	r5, #13
   b7ad4:	d1f6      	bne.n	b7ac4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b7ad6:	e69f      	b.n	b7818 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b7ad8:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b7adc:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b7ae0:	e7f8      	b.n	b7ad4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b7ae2:	6845      	ldr	r5, [r0, #4]
   b7ae4:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b7ae6:	42af      	cmp	r7, r5
   b7ae8:	f67f af28 	bls.w	b793c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b7aec:	f105 0801 	add.w	r8, r5, #1
   b7af0:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b7af4:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b7af8:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b7afc:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b7b00:	2700      	movs	r7, #0
   b7b02:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b7b04:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b7b08:	f04f 0a04 	mov.w	sl, #4
   b7b0c:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b7b10:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b7b14:	6805      	ldr	r5, [r0, #0]
   b7b16:	3d01      	subs	r5, #1
   b7b18:	e683      	b.n	b7822 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b7b1a:	2b00      	cmp	r3, #0
   b7b1c:	f43f af12 	beq.w	b7944 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b7b20:	6842      	ldr	r2, [r0, #4]
   b7b22:	1e51      	subs	r1, r2, #1
   b7b24:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b7b28:	2900      	cmp	r1, #0
   b7b2a:	f6ff af0b 	blt.w	b7944 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b7b2e:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b7b32:	3201      	adds	r2, #1
   b7b34:	d003      	beq.n	b7b3e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b7b36:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b7b3a:	3201      	adds	r2, #1
   b7b3c:	d087      	beq.n	b7a4e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b7b3e:	3901      	subs	r1, #1
   b7b40:	3b10      	subs	r3, #16
   b7b42:	e7f1      	b.n	b7b28 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b7b44:	04001001 	.word	0x04001001

000b7b48 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b7b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b7b4a:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b7b4c:	4604      	mov	r4, r0
	if (offset == 0) {
   b7b4e:	b912      	cbnz	r2, b7b56 <_ZN10JsonParser5parseEv+0xe>
		return false;
   b7b50:	2000      	movs	r0, #0
}
   b7b52:	b003      	add	sp, #12
   b7b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b7b56:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b7b58:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b7b5c:	b1ab      	cbz	r3, b7b8a <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b7b5e:	2100      	movs	r1, #0
	parser->toknext = 0;
   b7b60:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b7b64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b7b68:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7b6a:	69c1      	ldr	r1, [r0, #28]
   b7b6c:	9100      	str	r1, [sp, #0]
   b7b6e:	6841      	ldr	r1, [r0, #4]
   b7b70:	4630      	mov	r0, r6
   b7b72:	f7ff fe0d 	bl	b7790 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b7b76:	1c43      	adds	r3, r0, #1
   b7b78:	d128      	bne.n	b7bcc <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b7b7a:	7c25      	ldrb	r5, [r4, #16]
   b7b7c:	2d00      	cmp	r5, #0
   b7b7e:	d1e7      	bne.n	b7b50 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b7b80:	6960      	ldr	r0, [r4, #20]
   b7b82:	f000 fa83 	bl	b808c <free>
			tokens = 0;
   b7b86:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b7b88:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b7b8a:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b7b8c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b7b90:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b7b94:	68e2      	ldr	r2, [r4, #12]
   b7b96:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b7b98:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b7b9a:	9500      	str	r5, [sp, #0]
   b7b9c:	462b      	mov	r3, r5
   b7b9e:	4630      	mov	r0, r6
   b7ba0:	f7ff fdf6 	bl	b7790 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b7ba4:	2800      	cmp	r0, #0
   b7ba6:	dbd3      	blt.n	b7b50 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b7ba8:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b7baa:	d017      	beq.n	b7bdc <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b7bac:	0100      	lsls	r0, r0, #4
   b7bae:	f000 fa65 	bl	b807c <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7bb2:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b7bb4:	6160      	str	r0, [r4, #20]
   b7bb6:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7bb8:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b7bba:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7bbe:	68e2      	ldr	r2, [r4, #12]
   b7bc0:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b7bc2:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7bc4:	4630      	mov	r0, r6
   b7bc6:	f7ff fde3 	bl	b7790 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b7bca:	e001      	b.n	b7bd0 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b7bcc:	2800      	cmp	r0, #0
   b7bce:	dbbf      	blt.n	b7b50 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b7bd0:	6963      	ldr	r3, [r4, #20]
   b7bd2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b7bd6:	61a0      	str	r0, [r4, #24]
	return true;
   b7bd8:	2001      	movs	r0, #1
   b7bda:	e7ba      	b.n	b7b52 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b7bdc:	6963      	ldr	r3, [r4, #20]
   b7bde:	61a3      	str	r3, [r4, #24]
   b7be0:	e7fa      	b.n	b7bd8 <_ZN10JsonParser5parseEv+0x90>
	...

000b7be4 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b7be4:	b508      	push	{r3, lr}
   b7be6:	4b02      	ldr	r3, [pc, #8]	; (b7bf0 <hal_ble_stack_init+0xc>)
   b7be8:	681b      	ldr	r3, [r3, #0]
   b7bea:	689b      	ldr	r3, [r3, #8]
   b7bec:	9301      	str	r3, [sp, #4]
   b7bee:	bd08      	pop	{r3, pc}
   b7bf0:	00030278 	.word	0x00030278

000b7bf4 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b7bf4:	b508      	push	{r3, lr}
   b7bf6:	4b02      	ldr	r3, [pc, #8]	; (b7c00 <hal_ble_gap_set_advertising_data+0xc>)
   b7bf8:	681b      	ldr	r3, [r3, #0]
   b7bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7bfc:	9301      	str	r3, [sp, #4]
   b7bfe:	bd08      	pop	{r3, pc}
   b7c00:	00030278 	.word	0x00030278

000b7c04 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b7c04:	b508      	push	{r3, lr}
   b7c06:	4b02      	ldr	r3, [pc, #8]	; (b7c10 <hal_ble_gap_set_scan_response_data+0xc>)
   b7c08:	681b      	ldr	r3, [r3, #0]
   b7c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7c0c:	9301      	str	r3, [sp, #4]
   b7c0e:	bd08      	pop	{r3, pc}
   b7c10:	00030278 	.word	0x00030278

000b7c14 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b7c14:	b508      	push	{r3, lr}
   b7c16:	4b02      	ldr	r3, [pc, #8]	; (b7c20 <hal_ble_gap_start_advertising+0xc>)
   b7c18:	681b      	ldr	r3, [r3, #0]
   b7c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b7c1c:	9301      	str	r3, [sp, #4]
   b7c1e:	bd08      	pop	{r3, pc}
   b7c20:	00030278 	.word	0x00030278

000b7c24 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b7c24:	b508      	push	{r3, lr}
   b7c26:	4b03      	ldr	r3, [pc, #12]	; (b7c34 <hal_ble_gap_disconnect+0x10>)
   b7c28:	681b      	ldr	r3, [r3, #0]
   b7c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b7c2e:	9301      	str	r3, [sp, #4]
   b7c30:	bd08      	pop	{r3, pc}
   b7c32:	0000      	.short	0x0000
   b7c34:	00030278 	.word	0x00030278

000b7c38 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b7c38:	b508      	push	{r3, lr}
   b7c3a:	4b03      	ldr	r3, [pc, #12]	; (b7c48 <hal_ble_gatt_server_add_service+0x10>)
   b7c3c:	681b      	ldr	r3, [r3, #0]
   b7c3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b7c42:	9301      	str	r3, [sp, #4]
   b7c44:	bd08      	pop	{r3, pc}
   b7c46:	0000      	.short	0x0000
   b7c48:	00030278 	.word	0x00030278

000b7c4c <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b7c4c:	b508      	push	{r3, lr}
   b7c4e:	4b03      	ldr	r3, [pc, #12]	; (b7c5c <hal_ble_gatt_server_add_characteristic+0x10>)
   b7c50:	681b      	ldr	r3, [r3, #0]
   b7c52:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b7c56:	9301      	str	r3, [sp, #4]
   b7c58:	bd08      	pop	{r3, pc}
   b7c5a:	0000      	.short	0x0000
   b7c5c:	00030278 	.word	0x00030278

000b7c60 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b7c60:	b508      	push	{r3, lr}
   b7c62:	4b03      	ldr	r3, [pc, #12]	; (b7c70 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b7c64:	681b      	ldr	r3, [r3, #0]
   b7c66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b7c6a:	9301      	str	r3, [sp, #4]
   b7c6c:	bd08      	pop	{r3, pc}
   b7c6e:	0000      	.short	0x0000
   b7c70:	00030278 	.word	0x00030278

000b7c74 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7c74:	b508      	push	{r3, lr}
   b7c76:	4b02      	ldr	r3, [pc, #8]	; (b7c80 <os_mutex_recursive_create+0xc>)
   b7c78:	681b      	ldr	r3, [r3, #0]
   b7c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7c7c:	9301      	str	r3, [sp, #4]
   b7c7e:	bd08      	pop	{r3, pc}
   b7c80:	00030248 	.word	0x00030248

000b7c84 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b7c84:	b508      	push	{r3, lr}
   b7c86:	4b02      	ldr	r3, [pc, #8]	; (b7c90 <os_mutex_recursive_lock+0xc>)
   b7c88:	681b      	ldr	r3, [r3, #0]
   b7c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7c8c:	9301      	str	r3, [sp, #4]
   b7c8e:	bd08      	pop	{r3, pc}
   b7c90:	00030248 	.word	0x00030248

000b7c94 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b7c94:	b508      	push	{r3, lr}
   b7c96:	4b02      	ldr	r3, [pc, #8]	; (b7ca0 <os_mutex_recursive_unlock+0xc>)
   b7c98:	681b      	ldr	r3, [r3, #0]
   b7c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7c9c:	9301      	str	r3, [sp, #4]
   b7c9e:	bd08      	pop	{r3, pc}
   b7ca0:	00030248 	.word	0x00030248

000b7ca4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7ca4:	b508      	push	{r3, lr}
   b7ca6:	4b02      	ldr	r3, [pc, #8]	; (b7cb0 <HAL_RNG_GetRandomNumber+0xc>)
   b7ca8:	681b      	ldr	r3, [r3, #0]
   b7caa:	685b      	ldr	r3, [r3, #4]
   b7cac:	9301      	str	r3, [sp, #4]
   b7cae:	bd08      	pop	{r3, pc}
   b7cb0:	00030218 	.word	0x00030218

000b7cb4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7cb4:	b508      	push	{r3, lr}
   b7cb6:	4b02      	ldr	r3, [pc, #8]	; (b7cc0 <HAL_Delay_Microseconds+0xc>)
   b7cb8:	681b      	ldr	r3, [r3, #0]
   b7cba:	68db      	ldr	r3, [r3, #12]
   b7cbc:	9301      	str	r3, [sp, #4]
   b7cbe:	bd08      	pop	{r3, pc}
   b7cc0:	00030218 	.word	0x00030218

000b7cc4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7cc4:	b508      	push	{r3, lr}
   b7cc6:	4b02      	ldr	r3, [pc, #8]	; (b7cd0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7cc8:	681b      	ldr	r3, [r3, #0]
   b7cca:	695b      	ldr	r3, [r3, #20]
   b7ccc:	9301      	str	r3, [sp, #4]
   b7cce:	bd08      	pop	{r3, pc}
   b7cd0:	00030218 	.word	0x00030218

000b7cd4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7cd4:	b508      	push	{r3, lr}
   b7cd6:	4b02      	ldr	r3, [pc, #8]	; (b7ce0 <hal_i2c_begin+0xc>)
   b7cd8:	681b      	ldr	r3, [r3, #0]
   b7cda:	68db      	ldr	r3, [r3, #12]
   b7cdc:	9301      	str	r3, [sp, #4]
   b7cde:	bd08      	pop	{r3, pc}
   b7ce0:	00030228 	.word	0x00030228

000b7ce4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b7ce4:	b508      	push	{r3, lr}
   b7ce6:	4b02      	ldr	r3, [pc, #8]	; (b7cf0 <hal_i2c_begin_transmission+0xc>)
   b7ce8:	681b      	ldr	r3, [r3, #0]
   b7cea:	699b      	ldr	r3, [r3, #24]
   b7cec:	9301      	str	r3, [sp, #4]
   b7cee:	bd08      	pop	{r3, pc}
   b7cf0:	00030228 	.word	0x00030228

000b7cf4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b7cf4:	b508      	push	{r3, lr}
   b7cf6:	4b02      	ldr	r3, [pc, #8]	; (b7d00 <hal_i2c_end_transmission+0xc>)
   b7cf8:	681b      	ldr	r3, [r3, #0]
   b7cfa:	69db      	ldr	r3, [r3, #28]
   b7cfc:	9301      	str	r3, [sp, #4]
   b7cfe:	bd08      	pop	{r3, pc}
   b7d00:	00030228 	.word	0x00030228

000b7d04 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7d04:	b508      	push	{r3, lr}
   b7d06:	4b02      	ldr	r3, [pc, #8]	; (b7d10 <hal_i2c_write+0xc>)
   b7d08:	681b      	ldr	r3, [r3, #0]
   b7d0a:	6a1b      	ldr	r3, [r3, #32]
   b7d0c:	9301      	str	r3, [sp, #4]
   b7d0e:	bd08      	pop	{r3, pc}
   b7d10:	00030228 	.word	0x00030228

000b7d14 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7d14:	b508      	push	{r3, lr}
   b7d16:	4b02      	ldr	r3, [pc, #8]	; (b7d20 <hal_i2c_available+0xc>)
   b7d18:	681b      	ldr	r3, [r3, #0]
   b7d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7d1c:	9301      	str	r3, [sp, #4]
   b7d1e:	bd08      	pop	{r3, pc}
   b7d20:	00030228 	.word	0x00030228

000b7d24 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7d24:	b508      	push	{r3, lr}
   b7d26:	4b02      	ldr	r3, [pc, #8]	; (b7d30 <hal_i2c_read+0xc>)
   b7d28:	681b      	ldr	r3, [r3, #0]
   b7d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7d2c:	9301      	str	r3, [sp, #4]
   b7d2e:	bd08      	pop	{r3, pc}
   b7d30:	00030228 	.word	0x00030228

000b7d34 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7d34:	b508      	push	{r3, lr}
   b7d36:	4b02      	ldr	r3, [pc, #8]	; (b7d40 <hal_i2c_peek+0xc>)
   b7d38:	681b      	ldr	r3, [r3, #0]
   b7d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7d3c:	9301      	str	r3, [sp, #4]
   b7d3e:	bd08      	pop	{r3, pc}
   b7d40:	00030228 	.word	0x00030228

000b7d44 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7d44:	b508      	push	{r3, lr}
   b7d46:	4b02      	ldr	r3, [pc, #8]	; (b7d50 <hal_i2c_flush+0xc>)
   b7d48:	681b      	ldr	r3, [r3, #0]
   b7d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7d4c:	9301      	str	r3, [sp, #4]
   b7d4e:	bd08      	pop	{r3, pc}
   b7d50:	00030228 	.word	0x00030228

000b7d54 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7d54:	b508      	push	{r3, lr}
   b7d56:	4b02      	ldr	r3, [pc, #8]	; (b7d60 <hal_i2c_init+0xc>)
   b7d58:	681b      	ldr	r3, [r3, #0]
   b7d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7d5c:	9301      	str	r3, [sp, #4]
   b7d5e:	bd08      	pop	{r3, pc}
   b7d60:	00030228 	.word	0x00030228

000b7d64 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b7d64:	b508      	push	{r3, lr}
   b7d66:	4b02      	ldr	r3, [pc, #8]	; (b7d70 <hal_i2c_request_ex+0xc>)
   b7d68:	681b      	ldr	r3, [r3, #0]
   b7d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7d6c:	9301      	str	r3, [sp, #4]
   b7d6e:	bd08      	pop	{r3, pc}
   b7d70:	00030228 	.word	0x00030228

000b7d74 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b7d74:	b508      	push	{r3, lr}
   b7d76:	4b02      	ldr	r3, [pc, #8]	; (b7d80 <if_index_to_name+0xc>)
   b7d78:	681b      	ldr	r3, [r3, #0]
   b7d7a:	695b      	ldr	r3, [r3, #20]
   b7d7c:	9301      	str	r3, [sp, #4]
   b7d7e:	bd08      	pop	{r3, pc}
   b7d80:	0003026c 	.word	0x0003026c

000b7d84 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7d84:	b508      	push	{r3, lr}
   b7d86:	4b02      	ldr	r3, [pc, #8]	; (b7d90 <inet_inet_ntop+0xc>)
   b7d88:	681b      	ldr	r3, [r3, #0]
   b7d8a:	695b      	ldr	r3, [r3, #20]
   b7d8c:	9301      	str	r3, [sp, #4]
   b7d8e:	bd08      	pop	{r3, pc}
   b7d90:	00030264 	.word	0x00030264

000b7d94 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b7d94:	b508      	push	{r3, lr}
   b7d96:	4b02      	ldr	r3, [pc, #8]	; (b7da0 <inet_htonl+0xc>)
   b7d98:	681b      	ldr	r3, [r3, #0]
   b7d9a:	6a1b      	ldr	r3, [r3, #32]
   b7d9c:	9301      	str	r3, [sp, #4]
   b7d9e:	bd08      	pop	{r3, pc}
   b7da0:	00030264 	.word	0x00030264

000b7da4 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b7da4:	b508      	push	{r3, lr}
   b7da6:	4b02      	ldr	r3, [pc, #8]	; (b7db0 <inet_htons+0xc>)
   b7da8:	681b      	ldr	r3, [r3, #0]
   b7daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7dac:	9301      	str	r3, [sp, #4]
   b7dae:	bd08      	pop	{r3, pc}
   b7db0:	00030264 	.word	0x00030264

000b7db4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7db4:	b508      	push	{r3, lr}
   b7db6:	4b02      	ldr	r3, [pc, #8]	; (b7dc0 <netdb_freeaddrinfo+0xc>)
   b7db8:	681b      	ldr	r3, [r3, #0]
   b7dba:	689b      	ldr	r3, [r3, #8]
   b7dbc:	9301      	str	r3, [sp, #4]
   b7dbe:	bd08      	pop	{r3, pc}
   b7dc0:	00030268 	.word	0x00030268

000b7dc4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7dc4:	b508      	push	{r3, lr}
   b7dc6:	4b02      	ldr	r3, [pc, #8]	; (b7dd0 <netdb_getaddrinfo+0xc>)
   b7dc8:	681b      	ldr	r3, [r3, #0]
   b7dca:	68db      	ldr	r3, [r3, #12]
   b7dcc:	9301      	str	r3, [sp, #4]
   b7dce:	bd08      	pop	{r3, pc}
   b7dd0:	00030268 	.word	0x00030268

000b7dd4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b7dd4:	b508      	push	{r3, lr}
   b7dd6:	4b02      	ldr	r3, [pc, #8]	; (b7de0 <sock_setsockopt+0xc>)
   b7dd8:	681b      	ldr	r3, [r3, #0]
   b7dda:	699b      	ldr	r3, [r3, #24]
   b7ddc:	9301      	str	r3, [sp, #4]
   b7dde:	bd08      	pop	{r3, pc}
   b7de0:	00030238 	.word	0x00030238

000b7de4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b7de4:	b508      	push	{r3, lr}
   b7de6:	4b02      	ldr	r3, [pc, #8]	; (b7df0 <sock_close+0xc>)
   b7de8:	681b      	ldr	r3, [r3, #0]
   b7dea:	69db      	ldr	r3, [r3, #28]
   b7dec:	9301      	str	r3, [sp, #4]
   b7dee:	bd08      	pop	{r3, pc}
   b7df0:	00030238 	.word	0x00030238

000b7df4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b7df4:	b508      	push	{r3, lr}
   b7df6:	4b02      	ldr	r3, [pc, #8]	; (b7e00 <sock_connect+0xc>)
   b7df8:	681b      	ldr	r3, [r3, #0]
   b7dfa:	6a1b      	ldr	r3, [r3, #32]
   b7dfc:	9301      	str	r3, [sp, #4]
   b7dfe:	bd08      	pop	{r3, pc}
   b7e00:	00030238 	.word	0x00030238

000b7e04 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b7e04:	b508      	push	{r3, lr}
   b7e06:	4b02      	ldr	r3, [pc, #8]	; (b7e10 <sock_recv+0xc>)
   b7e08:	681b      	ldr	r3, [r3, #0]
   b7e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7e0c:	9301      	str	r3, [sp, #4]
   b7e0e:	bd08      	pop	{r3, pc}
   b7e10:	00030238 	.word	0x00030238

000b7e14 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b7e14:	b508      	push	{r3, lr}
   b7e16:	4b02      	ldr	r3, [pc, #8]	; (b7e20 <sock_send+0xc>)
   b7e18:	681b      	ldr	r3, [r3, #0]
   b7e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7e1c:	9301      	str	r3, [sp, #4]
   b7e1e:	bd08      	pop	{r3, pc}
   b7e20:	00030238 	.word	0x00030238

000b7e24 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b7e24:	b508      	push	{r3, lr}
   b7e26:	4b02      	ldr	r3, [pc, #8]	; (b7e30 <sock_socket+0xc>)
   b7e28:	681b      	ldr	r3, [r3, #0]
   b7e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7e2c:	9301      	str	r3, [sp, #4]
   b7e2e:	bd08      	pop	{r3, pc}
   b7e30:	00030238 	.word	0x00030238

000b7e34 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7e34:	b508      	push	{r3, lr}
   b7e36:	4b02      	ldr	r3, [pc, #8]	; (b7e40 <hal_usart_write+0xc>)
   b7e38:	681b      	ldr	r3, [r3, #0]
   b7e3a:	68db      	ldr	r3, [r3, #12]
   b7e3c:	9301      	str	r3, [sp, #4]
   b7e3e:	bd08      	pop	{r3, pc}
   b7e40:	0003023c 	.word	0x0003023c

000b7e44 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7e44:	b508      	push	{r3, lr}
   b7e46:	4b02      	ldr	r3, [pc, #8]	; (b7e50 <hal_usart_available+0xc>)
   b7e48:	681b      	ldr	r3, [r3, #0]
   b7e4a:	691b      	ldr	r3, [r3, #16]
   b7e4c:	9301      	str	r3, [sp, #4]
   b7e4e:	bd08      	pop	{r3, pc}
   b7e50:	0003023c 	.word	0x0003023c

000b7e54 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7e54:	b508      	push	{r3, lr}
   b7e56:	4b02      	ldr	r3, [pc, #8]	; (b7e60 <hal_usart_read+0xc>)
   b7e58:	681b      	ldr	r3, [r3, #0]
   b7e5a:	695b      	ldr	r3, [r3, #20]
   b7e5c:	9301      	str	r3, [sp, #4]
   b7e5e:	bd08      	pop	{r3, pc}
   b7e60:	0003023c 	.word	0x0003023c

000b7e64 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7e64:	b508      	push	{r3, lr}
   b7e66:	4b02      	ldr	r3, [pc, #8]	; (b7e70 <hal_usart_peek+0xc>)
   b7e68:	681b      	ldr	r3, [r3, #0]
   b7e6a:	699b      	ldr	r3, [r3, #24]
   b7e6c:	9301      	str	r3, [sp, #4]
   b7e6e:	bd08      	pop	{r3, pc}
   b7e70:	0003023c 	.word	0x0003023c

000b7e74 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7e74:	b508      	push	{r3, lr}
   b7e76:	4b02      	ldr	r3, [pc, #8]	; (b7e80 <hal_usart_flush+0xc>)
   b7e78:	681b      	ldr	r3, [r3, #0]
   b7e7a:	69db      	ldr	r3, [r3, #28]
   b7e7c:	9301      	str	r3, [sp, #4]
   b7e7e:	bd08      	pop	{r3, pc}
   b7e80:	0003023c 	.word	0x0003023c

000b7e84 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7e84:	b508      	push	{r3, lr}
   b7e86:	4b02      	ldr	r3, [pc, #8]	; (b7e90 <hal_usart_available_data_for_write+0xc>)
   b7e88:	681b      	ldr	r3, [r3, #0]
   b7e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7e8c:	9301      	str	r3, [sp, #4]
   b7e8e:	bd08      	pop	{r3, pc}
   b7e90:	0003023c 	.word	0x0003023c

000b7e94 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7e94:	b508      	push	{r3, lr}
   b7e96:	4b02      	ldr	r3, [pc, #8]	; (b7ea0 <hal_usart_init_ex+0xc>)
   b7e98:	681b      	ldr	r3, [r3, #0]
   b7e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7e9c:	9301      	str	r3, [sp, #4]
   b7e9e:	bd08      	pop	{r3, pc}
   b7ea0:	0003023c 	.word	0x0003023c

000b7ea4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7ea4:	b508      	push	{r3, lr}
   b7ea6:	4b02      	ldr	r3, [pc, #8]	; (b7eb0 <HAL_USB_USART_Init+0xc>)
   b7ea8:	681b      	ldr	r3, [r3, #0]
   b7eaa:	681b      	ldr	r3, [r3, #0]
   b7eac:	9301      	str	r3, [sp, #4]
   b7eae:	bd08      	pop	{r3, pc}
   b7eb0:	0003024c 	.word	0x0003024c

000b7eb4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7eb4:	b508      	push	{r3, lr}
   b7eb6:	4b02      	ldr	r3, [pc, #8]	; (b7ec0 <HAL_USB_USART_Begin+0xc>)
   b7eb8:	681b      	ldr	r3, [r3, #0]
   b7eba:	685b      	ldr	r3, [r3, #4]
   b7ebc:	9301      	str	r3, [sp, #4]
   b7ebe:	bd08      	pop	{r3, pc}
   b7ec0:	0003024c 	.word	0x0003024c

000b7ec4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7ec4:	b508      	push	{r3, lr}
   b7ec6:	4b02      	ldr	r3, [pc, #8]	; (b7ed0 <HAL_USB_USART_Available_Data+0xc>)
   b7ec8:	681b      	ldr	r3, [r3, #0]
   b7eca:	691b      	ldr	r3, [r3, #16]
   b7ecc:	9301      	str	r3, [sp, #4]
   b7ece:	bd08      	pop	{r3, pc}
   b7ed0:	0003024c 	.word	0x0003024c

000b7ed4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7ed4:	b508      	push	{r3, lr}
   b7ed6:	4b02      	ldr	r3, [pc, #8]	; (b7ee0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7ed8:	681b      	ldr	r3, [r3, #0]
   b7eda:	695b      	ldr	r3, [r3, #20]
   b7edc:	9301      	str	r3, [sp, #4]
   b7ede:	bd08      	pop	{r3, pc}
   b7ee0:	0003024c 	.word	0x0003024c

000b7ee4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7ee4:	b508      	push	{r3, lr}
   b7ee6:	4b02      	ldr	r3, [pc, #8]	; (b7ef0 <HAL_USB_USART_Receive_Data+0xc>)
   b7ee8:	681b      	ldr	r3, [r3, #0]
   b7eea:	699b      	ldr	r3, [r3, #24]
   b7eec:	9301      	str	r3, [sp, #4]
   b7eee:	bd08      	pop	{r3, pc}
   b7ef0:	0003024c 	.word	0x0003024c

000b7ef4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7ef4:	b508      	push	{r3, lr}
   b7ef6:	4b02      	ldr	r3, [pc, #8]	; (b7f00 <HAL_USB_USART_Send_Data+0xc>)
   b7ef8:	681b      	ldr	r3, [r3, #0]
   b7efa:	69db      	ldr	r3, [r3, #28]
   b7efc:	9301      	str	r3, [sp, #4]
   b7efe:	bd08      	pop	{r3, pc}
   b7f00:	0003024c 	.word	0x0003024c

000b7f04 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7f04:	b508      	push	{r3, lr}
   b7f06:	4b02      	ldr	r3, [pc, #8]	; (b7f10 <HAL_USB_USART_Flush_Data+0xc>)
   b7f08:	681b      	ldr	r3, [r3, #0]
   b7f0a:	6a1b      	ldr	r3, [r3, #32]
   b7f0c:	9301      	str	r3, [sp, #4]
   b7f0e:	bd08      	pop	{r3, pc}
   b7f10:	0003024c 	.word	0x0003024c

000b7f14 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7f14:	b508      	push	{r3, lr}
   b7f16:	4b02      	ldr	r3, [pc, #8]	; (b7f20 <panic_+0xc>)
   b7f18:	681b      	ldr	r3, [r3, #0]
   b7f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7f1c:	9301      	str	r3, [sp, #4]
   b7f1e:	bd08      	pop	{r3, pc}
   b7f20:	00030260 	.word	0x00030260

000b7f24 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7f24:	b508      	push	{r3, lr}
   b7f26:	4b02      	ldr	r3, [pc, #8]	; (b7f30 <log_message+0xc>)
   b7f28:	681b      	ldr	r3, [r3, #0]
   b7f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7f2c:	9301      	str	r3, [sp, #4]
   b7f2e:	bd08      	pop	{r3, pc}
   b7f30:	00030260 	.word	0x00030260

000b7f34 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7f34:	b508      	push	{r3, lr}
   b7f36:	4b02      	ldr	r3, [pc, #8]	; (b7f40 <set_system_mode+0xc>)
   b7f38:	681b      	ldr	r3, [r3, #0]
   b7f3a:	685b      	ldr	r3, [r3, #4]
   b7f3c:	9301      	str	r3, [sp, #4]
   b7f3e:	bd08      	pop	{r3, pc}
   b7f40:	00030220 	.word	0x00030220

000b7f44 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7f44:	b508      	push	{r3, lr}
   b7f46:	4b02      	ldr	r3, [pc, #8]	; (b7f50 <system_delay_ms+0xc>)
   b7f48:	681b      	ldr	r3, [r3, #0]
   b7f4a:	695b      	ldr	r3, [r3, #20]
   b7f4c:	9301      	str	r3, [sp, #4]
   b7f4e:	bd08      	pop	{r3, pc}
   b7f50:	00030220 	.word	0x00030220

000b7f54 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7f54:	b508      	push	{r3, lr}
   b7f56:	4b03      	ldr	r3, [pc, #12]	; (b7f64 <system_ctrl_set_app_request_handler+0x10>)
   b7f58:	681b      	ldr	r3, [r3, #0]
   b7f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7f5e:	9301      	str	r3, [sp, #4]
   b7f60:	bd08      	pop	{r3, pc}
   b7f62:	0000      	.short	0x0000
   b7f64:	00030220 	.word	0x00030220

000b7f68 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7f68:	b508      	push	{r3, lr}
   b7f6a:	4b03      	ldr	r3, [pc, #12]	; (b7f78 <system_ctrl_set_result+0x10>)
   b7f6c:	681b      	ldr	r3, [r3, #0]
   b7f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7f72:	9301      	str	r3, [sp, #4]
   b7f74:	bd08      	pop	{r3, pc}
   b7f76:	0000      	.short	0x0000
   b7f78:	00030220 	.word	0x00030220

000b7f7c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7f7c:	b508      	push	{r3, lr}
   b7f7e:	4b02      	ldr	r3, [pc, #8]	; (b7f88 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7f80:	681b      	ldr	r3, [r3, #0]
   b7f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7f84:	9301      	str	r3, [sp, #4]
   b7f86:	bd08      	pop	{r3, pc}
   b7f88:	00030244 	.word	0x00030244

000b7f8c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7f8c:	b508      	push	{r3, lr}
   b7f8e:	4b02      	ldr	r3, [pc, #8]	; (b7f98 <network_connect+0xc>)
   b7f90:	681b      	ldr	r3, [r3, #0]
   b7f92:	685b      	ldr	r3, [r3, #4]
   b7f94:	9301      	str	r3, [sp, #4]
   b7f96:	bd08      	pop	{r3, pc}
   b7f98:	00030240 	.word	0x00030240

000b7f9c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7f9c:	b508      	push	{r3, lr}
   b7f9e:	4b02      	ldr	r3, [pc, #8]	; (b7fa8 <network_connecting+0xc>)
   b7fa0:	681b      	ldr	r3, [r3, #0]
   b7fa2:	689b      	ldr	r3, [r3, #8]
   b7fa4:	9301      	str	r3, [sp, #4]
   b7fa6:	bd08      	pop	{r3, pc}
   b7fa8:	00030240 	.word	0x00030240

000b7fac <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7fac:	b508      	push	{r3, lr}
   b7fae:	4b02      	ldr	r3, [pc, #8]	; (b7fb8 <network_disconnect+0xc>)
   b7fb0:	681b      	ldr	r3, [r3, #0]
   b7fb2:	68db      	ldr	r3, [r3, #12]
   b7fb4:	9301      	str	r3, [sp, #4]
   b7fb6:	bd08      	pop	{r3, pc}
   b7fb8:	00030240 	.word	0x00030240

000b7fbc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7fbc:	b508      	push	{r3, lr}
   b7fbe:	4b02      	ldr	r3, [pc, #8]	; (b7fc8 <network_ready+0xc>)
   b7fc0:	681b      	ldr	r3, [r3, #0]
   b7fc2:	691b      	ldr	r3, [r3, #16]
   b7fc4:	9301      	str	r3, [sp, #4]
   b7fc6:	bd08      	pop	{r3, pc}
   b7fc8:	00030240 	.word	0x00030240

000b7fcc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7fcc:	b508      	push	{r3, lr}
   b7fce:	4b02      	ldr	r3, [pc, #8]	; (b7fd8 <network_on+0xc>)
   b7fd0:	681b      	ldr	r3, [r3, #0]
   b7fd2:	695b      	ldr	r3, [r3, #20]
   b7fd4:	9301      	str	r3, [sp, #4]
   b7fd6:	bd08      	pop	{r3, pc}
   b7fd8:	00030240 	.word	0x00030240

000b7fdc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7fdc:	b508      	push	{r3, lr}
   b7fde:	4b02      	ldr	r3, [pc, #8]	; (b7fe8 <network_off+0xc>)
   b7fe0:	681b      	ldr	r3, [r3, #0]
   b7fe2:	699b      	ldr	r3, [r3, #24]
   b7fe4:	9301      	str	r3, [sp, #4]
   b7fe6:	bd08      	pop	{r3, pc}
   b7fe8:	00030240 	.word	0x00030240

000b7fec <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7fec:	b508      	push	{r3, lr}
   b7fee:	4b02      	ldr	r3, [pc, #8]	; (b7ff8 <network_listen+0xc>)
   b7ff0:	681b      	ldr	r3, [r3, #0]
   b7ff2:	69db      	ldr	r3, [r3, #28]
   b7ff4:	9301      	str	r3, [sp, #4]
   b7ff6:	bd08      	pop	{r3, pc}
   b7ff8:	00030240 	.word	0x00030240

000b7ffc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7ffc:	b508      	push	{r3, lr}
   b7ffe:	4b02      	ldr	r3, [pc, #8]	; (b8008 <network_listening+0xc>)
   b8000:	681b      	ldr	r3, [r3, #0]
   b8002:	6a1b      	ldr	r3, [r3, #32]
   b8004:	9301      	str	r3, [sp, #4]
   b8006:	bd08      	pop	{r3, pc}
   b8008:	00030240 	.word	0x00030240

000b800c <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   b800c:	b508      	push	{r3, lr}
   b800e:	4b02      	ldr	r3, [pc, #8]	; (b8018 <network_has_credentials+0xc>)
   b8010:	681b      	ldr	r3, [r3, #0]
   b8012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8014:	9301      	str	r3, [sp, #4]
   b8016:	bd08      	pop	{r3, pc}
   b8018:	00030240 	.word	0x00030240

000b801c <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b801c:	b508      	push	{r3, lr}
   b801e:	4b02      	ldr	r3, [pc, #8]	; (b8028 <network_set_credentials+0xc>)
   b8020:	681b      	ldr	r3, [r3, #0]
   b8022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8024:	9301      	str	r3, [sp, #4]
   b8026:	bd08      	pop	{r3, pc}
   b8028:	00030240 	.word	0x00030240

000b802c <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b802c:	b508      	push	{r3, lr}
   b802e:	4b02      	ldr	r3, [pc, #8]	; (b8038 <network_clear_credentials+0xc>)
   b8030:	681b      	ldr	r3, [r3, #0]
   b8032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8034:	9301      	str	r3, [sp, #4]
   b8036:	bd08      	pop	{r3, pc}
   b8038:	00030240 	.word	0x00030240

000b803c <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b803c:	b508      	push	{r3, lr}
   b803e:	4b02      	ldr	r3, [pc, #8]	; (b8048 <network_set_listen_timeout+0xc>)
   b8040:	681b      	ldr	r3, [r3, #0]
   b8042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8044:	9301      	str	r3, [sp, #4]
   b8046:	bd08      	pop	{r3, pc}
   b8048:	00030240 	.word	0x00030240

000b804c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b804c:	b508      	push	{r3, lr}
   b804e:	4b02      	ldr	r3, [pc, #8]	; (b8058 <network_get_listen_timeout+0xc>)
   b8050:	681b      	ldr	r3, [r3, #0]
   b8052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8054:	9301      	str	r3, [sp, #4]
   b8056:	bd08      	pop	{r3, pc}
   b8058:	00030240 	.word	0x00030240

000b805c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b805c:	b508      	push	{r3, lr}
   b805e:	4b02      	ldr	r3, [pc, #8]	; (b8068 <network_is_on+0xc>)
   b8060:	681b      	ldr	r3, [r3, #0]
   b8062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8064:	9301      	str	r3, [sp, #4]
   b8066:	bd08      	pop	{r3, pc}
   b8068:	00030240 	.word	0x00030240

000b806c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b806c:	b508      	push	{r3, lr}
   b806e:	4b02      	ldr	r3, [pc, #8]	; (b8078 <network_is_off+0xc>)
   b8070:	681b      	ldr	r3, [r3, #0]
   b8072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8074:	9301      	str	r3, [sp, #4]
   b8076:	bd08      	pop	{r3, pc}
   b8078:	00030240 	.word	0x00030240

000b807c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b807c:	b508      	push	{r3, lr}
   b807e:	4b02      	ldr	r3, [pc, #8]	; (b8088 <malloc+0xc>)
   b8080:	681b      	ldr	r3, [r3, #0]
   b8082:	681b      	ldr	r3, [r3, #0]
   b8084:	9301      	str	r3, [sp, #4]
   b8086:	bd08      	pop	{r3, pc}
   b8088:	0003021c 	.word	0x0003021c

000b808c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b808c:	b508      	push	{r3, lr}
   b808e:	4b02      	ldr	r3, [pc, #8]	; (b8098 <free+0xc>)
   b8090:	681b      	ldr	r3, [r3, #0]
   b8092:	685b      	ldr	r3, [r3, #4]
   b8094:	9301      	str	r3, [sp, #4]
   b8096:	bd08      	pop	{r3, pc}
   b8098:	0003021c 	.word	0x0003021c

000b809c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b809c:	b508      	push	{r3, lr}
   b809e:	4b02      	ldr	r3, [pc, #8]	; (b80a8 <realloc+0xc>)
   b80a0:	681b      	ldr	r3, [r3, #0]
   b80a2:	689b      	ldr	r3, [r3, #8]
   b80a4:	9301      	str	r3, [sp, #4]
   b80a6:	bd08      	pop	{r3, pc}
   b80a8:	0003021c 	.word	0x0003021c

000b80ac <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b80ac:	b508      	push	{r3, lr}
   b80ae:	4b02      	ldr	r3, [pc, #8]	; (b80b8 <sscanf+0xc>)
   b80b0:	681b      	ldr	r3, [r3, #0]
   b80b2:	695b      	ldr	r3, [r3, #20]
   b80b4:	9301      	str	r3, [sp, #4]
   b80b6:	bd08      	pop	{r3, pc}
   b80b8:	0003021c 	.word	0x0003021c

000b80bc <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b80bc:	b508      	push	{r3, lr}
   b80be:	4b02      	ldr	r3, [pc, #8]	; (b80c8 <vsnprintf+0xc>)
   b80c0:	681b      	ldr	r3, [r3, #0]
   b80c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b80c4:	9301      	str	r3, [sp, #4]
   b80c6:	bd08      	pop	{r3, pc}
   b80c8:	0003021c 	.word	0x0003021c

000b80cc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b80cc:	b508      	push	{r3, lr}
   b80ce:	4b02      	ldr	r3, [pc, #8]	; (b80d8 <abort+0xc>)
   b80d0:	681b      	ldr	r3, [r3, #0]
   b80d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b80d4:	9301      	str	r3, [sp, #4]
   b80d6:	bd08      	pop	{r3, pc}
   b80d8:	0003021c 	.word	0x0003021c

000b80dc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b80dc:	b508      	push	{r3, lr}
   b80de:	4b02      	ldr	r3, [pc, #8]	; (b80e8 <_malloc_r+0xc>)
   b80e0:	681b      	ldr	r3, [r3, #0]
   b80e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b80e4:	9301      	str	r3, [sp, #4]
   b80e6:	bd08      	pop	{r3, pc}
   b80e8:	0003021c 	.word	0x0003021c

000b80ec <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b80ec:	b508      	push	{r3, lr}
   b80ee:	4b02      	ldr	r3, [pc, #8]	; (b80f8 <__errno+0xc>)
   b80f0:	681b      	ldr	r3, [r3, #0]
   b80f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b80f4:	9301      	str	r3, [sp, #4]
   b80f6:	bd08      	pop	{r3, pc}
   b80f8:	0003021c 	.word	0x0003021c

000b80fc <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b80fc:	b508      	push	{r3, lr}
   b80fe:	4b02      	ldr	r3, [pc, #8]	; (b8108 <__assert_func+0xc>)
   b8100:	681b      	ldr	r3, [r3, #0]
   b8102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8104:	9301      	str	r3, [sp, #4]
   b8106:	bd08      	pop	{r3, pc}
   b8108:	0003021c 	.word	0x0003021c

000b810c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b810c:	b508      	push	{r3, lr}
   b810e:	4b02      	ldr	r3, [pc, #8]	; (b8118 <newlib_impure_ptr_callback+0xc>)
   b8110:	681b      	ldr	r3, [r3, #0]
   b8112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8114:	9301      	str	r3, [sp, #4]
   b8116:	bd08      	pop	{r3, pc}
   b8118:	0003021c 	.word	0x0003021c

000b811c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b811c:	2100      	movs	r1, #0
   b811e:	f7ff bf11 	b.w	b7f44 <system_delay_ms>

000b8122 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8122:	4770      	bx	lr

000b8124 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b8124:	4770      	bx	lr

000b8126 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b8126:	4770      	bx	lr

000b8128 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8128:	4770      	bx	lr
	...

000b812c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b812c:	4b06      	ldr	r3, [pc, #24]	; (b8148 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b812e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8130:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b8132:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8136:	d005      	beq.n	b8144 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8138:	4608      	mov	r0, r1
   b813a:	f002 faa1 	bl	ba680 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b813e:	2800      	cmp	r0, #0
   b8140:	bf08      	it	eq
   b8142:	2400      	moveq	r4, #0
      }
   b8144:	4620      	mov	r0, r4
   b8146:	bd10      	pop	{r4, pc}
   b8148:	000bdd98 	.word	0x000bdd98

000b814c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b814c:	4b06      	ldr	r3, [pc, #24]	; (b8168 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b814e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8150:	b510      	push	{r4, lr}
   b8152:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8156:	d005      	beq.n	b8164 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8158:	4608      	mov	r0, r1
   b815a:	f002 fa91 	bl	ba680 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b815e:	2800      	cmp	r0, #0
   b8160:	bf08      	it	eq
   b8162:	2400      	moveq	r4, #0
      }
   b8164:	4620      	mov	r0, r4
   b8166:	bd10      	pop	{r4, pc}
   b8168:	000bdd98 	.word	0x000bdd98

000b816c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b816c:	4b06      	ldr	r3, [pc, #24]	; (b8188 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b816e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8170:	b510      	push	{r4, lr}
   b8172:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8176:	d005      	beq.n	b8184 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8178:	4608      	mov	r0, r1
   b817a:	f002 fa81 	bl	ba680 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b817e:	2800      	cmp	r0, #0
   b8180:	bf08      	it	eq
   b8182:	2400      	moveq	r4, #0
      }
   b8184:	4620      	mov	r0, r4
   b8186:	bd10      	pop	{r4, pc}
   b8188:	000bdd98 	.word	0x000bdd98

000b818c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b818c:	b510      	push	{r4, lr}
   b818e:	2168      	movs	r1, #104	; 0x68
   b8190:	4604      	mov	r4, r0
   b8192:	f7fb ff86 	bl	b40a2 <_ZdlPvj>
   b8196:	4620      	mov	r0, r4
   b8198:	bd10      	pop	{r4, pc}

000b819a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b819a:	b510      	push	{r4, lr}
   b819c:	2128      	movs	r1, #40	; 0x28
   b819e:	4604      	mov	r4, r0
   b81a0:	f7fb ff7f 	bl	b40a2 <_ZdlPvj>
   b81a4:	4620      	mov	r0, r4
   b81a6:	bd10      	pop	{r4, pc}

000b81a8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b81a8:	b510      	push	{r4, lr}
   b81aa:	2130      	movs	r1, #48	; 0x30
   b81ac:	4604      	mov	r4, r0
   b81ae:	f7fb ff78 	bl	b40a2 <_ZdlPvj>
   b81b2:	4620      	mov	r0, r4
   b81b4:	bd10      	pop	{r4, pc}

000b81b6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b81b6:	2168      	movs	r1, #104	; 0x68
   b81b8:	f7fb bf73 	b.w	b40a2 <_ZdlPvj>

000b81bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b81bc:	2128      	movs	r1, #40	; 0x28
   b81be:	f7fb bf70 	b.w	b40a2 <_ZdlPvj>

000b81c2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b81c2:	2130      	movs	r1, #48	; 0x30
   b81c4:	f7fb bf6d 	b.w	b40a2 <_ZdlPvj>

000b81c8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b81c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b81ca:	2500      	movs	r5, #0
   b81cc:	1cec      	adds	r4, r5, #3
   b81ce:	428c      	cmp	r4, r1
   b81d0:	d80d      	bhi.n	b81ee <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b81d2:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b81d4:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b81d6:	5d87      	ldrb	r7, [r0, r6]
   b81d8:	4297      	cmp	r7, r2
   b81da:	d105      	bne.n	b81e8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b81dc:	4426      	add	r6, r4
   b81de:	42b1      	cmp	r1, r6
   b81e0:	d305      	bcc.n	b81ee <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b81e2:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b81e4:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b81e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b81e8:	3401      	adds	r4, #1
   b81ea:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b81ec:	e7ee      	b.n	b81cc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b81ee:	2000      	movs	r0, #0
   b81f0:	e7f9      	b.n	b81e6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b81f4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b81f4:	4a02      	ldr	r2, [pc, #8]	; (b8200 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b81f6:	4903      	ldr	r1, [pc, #12]	; (b8204 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b81f8:	200a      	movs	r0, #10
   b81fa:	f7ff be8b 	b.w	b7f14 <panic_>
   b81fe:	bf00      	nop
   b8200:	000b7cb5 	.word	0x000b7cb5
   b8204:	000bdbf8 	.word	0x000bdbf8

000b8208 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8208:	b430      	push	{r4, r5}
   b820a:	460d      	mov	r5, r1
   b820c:	4611      	mov	r1, r2
   b820e:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b8210:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b8212:	6809      	ldr	r1, [r1, #0]
   b8214:	6828      	ldr	r0, [r5, #0]
   b8216:	e9d3 4300 	ldrd	r4, r3, [r3]
   b821a:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b821c:	bc30      	pop	{r4, r5}
   b821e:	4760      	bx	ip

000b8220 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b8220:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8222:	b538      	push	{r3, r4, r5, lr}
   b8224:	4604      	mov	r4, r0
	switch (__op)
   b8226:	d102      	bne.n	b822e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b8228:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b822a:	6023      	str	r3, [r4, #0]
	}
   b822c:	e003      	b.n	b8236 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b822e:	2a02      	cmp	r2, #2
   b8230:	d003      	beq.n	b823a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b8232:	2a03      	cmp	r2, #3
   b8234:	d00d      	beq.n	b8252 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b8236:	2000      	movs	r0, #0
   b8238:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b823a:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b823c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b823e:	f7fb ff2a 	bl	b4096 <_Znwj>
   b8242:	4603      	mov	r3, r0
   b8244:	2800      	cmp	r0, #0
   b8246:	d0f0      	beq.n	b822a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b8248:	e895 0003 	ldmia.w	r5, {r0, r1}
   b824c:	e883 0003 	stmia.w	r3, {r0, r1}
   b8250:	e7eb      	b.n	b822a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b8252:	6800      	ldr	r0, [r0, #0]
   b8254:	2800      	cmp	r0, #0
   b8256:	d0ee      	beq.n	b8236 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b8258:	2108      	movs	r1, #8
   b825a:	f7fb ff22 	bl	b40a2 <_ZdlPvj>
   b825e:	e7ea      	b.n	b8236 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b8260 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b8260:	b510      	push	{r4, lr}
      if (_M_manager)
   b8262:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b8264:	4604      	mov	r4, r0
      if (_M_manager)
   b8266:	b113      	cbz	r3, b826e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b8268:	2203      	movs	r2, #3
   b826a:	4601      	mov	r1, r0
   b826c:	4798      	blx	r3
    }
   b826e:	4620      	mov	r0, r4
   b8270:	bd10      	pop	{r4, pc}

000b8272 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8272:	b510      	push	{r4, lr}
   b8274:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b8276:	3058      	adds	r0, #88	; 0x58
   b8278:	f7ff fff2 	bl	b8260 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b827c:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b8280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8284:	f001 bb26 	b.w	b98d4 <_ZN6StringD1Ev>

000b8288 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b8288:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b828a:	6843      	ldr	r3, [r0, #4]
   b828c:	3b01      	subs	r3, #1
    {
   b828e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b8290:	6043      	str	r3, [r0, #4]
   b8292:	b963      	cbnz	r3, b82ae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b8294:	6803      	ldr	r3, [r0, #0]
   b8296:	689b      	ldr	r3, [r3, #8]
   b8298:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b829a:	68a3      	ldr	r3, [r4, #8]
   b829c:	3b01      	subs	r3, #1
   b829e:	60a3      	str	r3, [r4, #8]
   b82a0:	b92b      	cbnz	r3, b82ae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b82a2:	6823      	ldr	r3, [r4, #0]
   b82a4:	4620      	mov	r0, r4
   b82a6:	68db      	ldr	r3, [r3, #12]
    }
   b82a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b82ac:	4718      	bx	r3
    }
   b82ae:	bd10      	pop	{r4, pc}

000b82b0 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b82b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b82b4:	b2da      	uxtb	r2, r3
   b82b6:	2a09      	cmp	r2, #9
   b82b8:	d801      	bhi.n	b82be <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b82ba:	4618      	mov	r0, r3
   b82bc:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b82be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b82c2:	2b05      	cmp	r3, #5
   b82c4:	d801      	bhi.n	b82ca <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b82c6:	3857      	subs	r0, #87	; 0x57
   b82c8:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b82ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b82ce:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b82d0:	bf94      	ite	ls
   b82d2:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b82d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b82d8:	4770      	bx	lr
	...

000b82dc <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b82dc:	b510      	push	{r4, lr}
            locked_(false) {
   b82de:	2300      	movs	r3, #0
   b82e0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b82e2:	4b04      	ldr	r3, [pc, #16]	; (b82f4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b82e4:	4604      	mov	r4, r0
   b82e6:	6818      	ldr	r0, [r3, #0]
   b82e8:	f7ff fccc 	bl	b7c84 <os_mutex_recursive_lock>
        locked_ = true;
   b82ec:	2301      	movs	r3, #1
   b82ee:	7023      	strb	r3, [r4, #0]
    }
   b82f0:	4620      	mov	r0, r4
   b82f2:	bd10      	pop	{r4, pc}
   b82f4:	2003e6c0 	.word	0x2003e6c0

000b82f8 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b82f8:	b510      	push	{r4, lr}
        if (locked_) {
   b82fa:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b82fc:	4604      	mov	r4, r0
        if (locked_) {
   b82fe:	b11b      	cbz	r3, b8308 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b8300:	4b02      	ldr	r3, [pc, #8]	; (b830c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b8302:	6818      	ldr	r0, [r3, #0]
   b8304:	f7ff fcc6 	bl	b7c94 <os_mutex_recursive_unlock>
    }
   b8308:	4620      	mov	r0, r4
   b830a:	bd10      	pop	{r4, pc}
   b830c:	2003e6c0 	.word	0x2003e6c0

000b8310 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b8310:	b082      	sub	sp, #8
   b8312:	4603      	mov	r3, r0
    address_ = addr;
   b8314:	6808      	ldr	r0, [r1, #0]
   b8316:	6849      	ldr	r1, [r1, #4]
   b8318:	466a      	mov	r2, sp
   b831a:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b831c:	466a      	mov	r2, sp
   b831e:	ca03      	ldmia	r2!, {r0, r1}
   b8320:	6018      	str	r0, [r3, #0]
}
   b8322:	4618      	mov	r0, r3
    address_ = addr.address_;
   b8324:	6059      	str	r1, [r3, #4]
}
   b8326:	b002      	add	sp, #8
   b8328:	4770      	bx	lr

000b832a <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b832a:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b832c:	7982      	ldrb	r2, [r0, #6]
   b832e:	798b      	ldrb	r3, [r1, #6]
   b8330:	429a      	cmp	r2, r3
   b8332:	d106      	bne.n	b8342 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b8334:	2206      	movs	r2, #6
   b8336:	f003 f96f 	bl	bb618 <memcmp>
   b833a:	fab0 f080 	clz	r0, r0
   b833e:	0940      	lsrs	r0, r0, #5
}
   b8340:	bd08      	pop	{r3, pc}
    return false;
   b8342:	2000      	movs	r0, #0
   b8344:	e7fc      	b.n	b8340 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b8346 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b8346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b834a:	6003      	str	r3, [r0, #0]
   b834c:	8083      	strh	r3, [r0, #4]
}
   b834e:	2000      	movs	r0, #0
   b8350:	4770      	bx	lr

000b8352 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b8352:	b508      	push	{r3, lr}
   b8354:	4602      	mov	r2, r0
        : address_{} {
   b8356:	2100      	movs	r1, #0
   b8358:	6001      	str	r1, [r0, #0]
   b835a:	6041      	str	r1, [r0, #4]
    clear();
   b835c:	f7ff fff3 	bl	b8346 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b8360:	7191      	strb	r1, [r2, #6]
}
   b8362:	4610      	mov	r0, r2
   b8364:	bd08      	pop	{r3, pc}
	...

000b8368 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b8368:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b836a:	2301      	movs	r3, #1
   b836c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b836e:	4b05      	ldr	r3, [pc, #20]	; (b8384 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b8370:	4602      	mov	r2, r0
   b8372:	f103 0110 	add.w	r1, r3, #16
   b8376:	f853 4b04 	ldr.w	r4, [r3], #4
   b837a:	f842 4b04 	str.w	r4, [r2], #4
   b837e:	428b      	cmp	r3, r1
   b8380:	d1f9      	bne.n	b8376 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b8382:	bd10      	pop	{r4, pc}
   b8384:	000bdda6 	.word	0x000bdda6

000b8388 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b8388:	b510      	push	{r4, lr}
    if (uuid128) {
   b838a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b838c:	4604      	mov	r4, r0
    if (uuid128) {
   b838e:	b1b1      	cbz	r1, b83be <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b8390:	2a01      	cmp	r2, #1
   b8392:	f101 0210 	add.w	r2, r1, #16
   b8396:	d10a      	bne.n	b83ae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b8398:	4601      	mov	r1, r0
   b839a:	f853 0b04 	ldr.w	r0, [r3], #4
   b839e:	f841 0b04 	str.w	r0, [r1], #4
   b83a2:	4293      	cmp	r3, r2
   b83a4:	d1f9      	bne.n	b839a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b83a6:	2301      	movs	r3, #1
   b83a8:	6123      	str	r3, [r4, #16]
}
   b83aa:	4620      	mov	r0, r4
   b83ac:	bd10      	pop	{r4, pc}
   b83ae:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b83b0:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b83b4:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b83b8:	429a      	cmp	r2, r3
   b83ba:	d1f9      	bne.n	b83b0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b83bc:	e7f3      	b.n	b83a6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b83be:	2210      	movs	r2, #16
   b83c0:	f003 f962 	bl	bb688 <memset>
   b83c4:	e7f1      	b.n	b83aa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b83c6 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b83c6:	b538      	push	{r3, r4, r5, lr}
   b83c8:	4604      	mov	r4, r0
   b83ca:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b83cc:	461a      	mov	r2, r3
   b83ce:	f7ff ffdb 	bl	b8388 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b83d2:	81a5      	strh	r5, [r4, #12]
}
   b83d4:	4620      	mov	r0, r4
   b83d6:	bd38      	pop	{r3, r4, r5, pc}

000b83d8 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b83d8:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b83da:	6902      	ldr	r2, [r0, #16]
   b83dc:	b922      	cbnz	r2, b83e8 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b83de:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b83e0:	3800      	subs	r0, #0
   b83e2:	bf18      	it	ne
   b83e4:	2001      	movne	r0, #1
}
   b83e6:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b83e8:	4902      	ldr	r1, [pc, #8]	; (b83f4 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b83ea:	2210      	movs	r2, #16
   b83ec:	f003 f914 	bl	bb618 <memcmp>
   b83f0:	e7f6      	b.n	b83e0 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b83f2:	bf00      	nop
   b83f4:	000bddc6 	.word	0x000bddc6

000b83f8 <_ZNK8particle7BleUuid4typeEv>:
}
   b83f8:	6900      	ldr	r0, [r0, #16]
   b83fa:	4770      	bx	lr

000b83fc <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b83fc:	b538      	push	{r3, r4, r5, lr}
   b83fe:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b8400:	2214      	movs	r2, #20
   b8402:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b8404:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b8406:	f003 f93f 	bl	bb688 <memset>
    if (type_ == BleUuidType::SHORT) {
   b840a:	6923      	ldr	r3, [r4, #16]
   b840c:	b91b      	cbnz	r3, b8416 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b840e:	89a3      	ldrh	r3, [r4, #12]
   b8410:	802b      	strh	r3, [r5, #0]
}
   b8412:	4628      	mov	r0, r5
   b8414:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b8416:	2301      	movs	r3, #1
   b8418:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b841a:	4621      	mov	r1, r4
   b841c:	462b      	mov	r3, r5
   b841e:	f104 0210 	add.w	r2, r4, #16
   b8422:	f851 0b04 	ldr.w	r0, [r1], #4
   b8426:	f843 0b04 	str.w	r0, [r3], #4
   b842a:	4291      	cmp	r1, r2
   b842c:	d1f9      	bne.n	b8422 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b842e:	e7f0      	b.n	b8412 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b8430 <_ZNK8particle7BleUuid7shortedEv>:
}
   b8430:	8980      	ldrh	r0, [r0, #12]
   b8432:	4770      	bx	lr

000b8434 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b8434:	4770      	bx	lr

000b8436 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b8436:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b8438:	6902      	ldr	r2, [r0, #16]
   b843a:	690b      	ldr	r3, [r1, #16]
   b843c:	429a      	cmp	r2, r3
   b843e:	d106      	bne.n	b844e <_ZNK8particle7BleUuideqERKS0_+0x18>
   b8440:	2210      	movs	r2, #16
   b8442:	f003 f8e9 	bl	bb618 <memcmp>
   b8446:	fab0 f080 	clz	r0, r0
   b844a:	0940      	lsrs	r0, r0, #5
}
   b844c:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b844e:	2000      	movs	r0, #0
   b8450:	e7fc      	b.n	b844c <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b8454 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b8454:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b8456:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b845a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b845c:	4b34      	ldr	r3, [pc, #208]	; (b8530 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b845e:	460c      	mov	r4, r1
   b8460:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8462:	4602      	mov	r2, r0
   b8464:	f103 0110 	add.w	r1, r3, #16
   b8468:	f853 0b04 	ldr.w	r0, [r3], #4
   b846c:	f842 0b04 	str.w	r0, [r2], #4
   b8470:	428b      	cmp	r3, r1
   b8472:	d1f9      	bne.n	b8468 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b8474:	b344      	cbz	r4, b84c8 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b8476:	2124      	movs	r1, #36	; 0x24
   b8478:	4620      	mov	r0, r4
   b847a:	f003 f969 	bl	bb750 <strnlen>
   b847e:	2804      	cmp	r0, #4
   b8480:	f04f 0500 	mov.w	r5, #0
   b8484:	d123      	bne.n	b84ce <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b8486:	f8ad 5004 	strh.w	r5, [sp, #4]
   b848a:	af01      	add	r7, sp, #4
   b848c:	1ca5      	adds	r5, r4, #2
   b848e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b8490:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b8494:	f7ff ff0c 	bl	b82b0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b8498:	f1b0 0800 	subs.w	r8, r0, #0
   b849c:	db12      	blt.n	b84c4 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b849e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b84a2:	f7ff ff05 	bl	b82b0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b84a6:	2800      	cmp	r0, #0
   b84a8:	db0c      	blt.n	b84c4 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b84aa:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b84ac:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b84b0:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b84b2:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b84b6:	d1eb      	bne.n	b8490 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b84b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b84bc:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b84be:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b84c2:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b84c4:	2300      	movs	r3, #0
   b84c6:	6133      	str	r3, [r6, #16]
}
   b84c8:	b002      	add	sp, #8
   b84ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b84ce:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b84d2:	2124      	movs	r1, #36	; 0x24
   b84d4:	4620      	mov	r0, r4
   b84d6:	f003 f93b 	bl	bb750 <strnlen>
   b84da:	42a8      	cmp	r0, r5
   b84dc:	d807      	bhi.n	b84ee <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b84de:	4642      	mov	r2, r8
   b84e0:	2100      	movs	r1, #0
   b84e2:	4630      	mov	r0, r6
}
   b84e4:	b002      	add	sp, #8
   b84e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b84ea:	f003 b8cd 	b.w	bb688 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b84ee:	f1b8 0f00 	cmp.w	r8, #0
   b84f2:	d0e9      	beq.n	b84c8 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b84f4:	5d60      	ldrb	r0, [r4, r5]
   b84f6:	f7ff fedb 	bl	b82b0 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b84fa:	0603      	lsls	r3, r0, #24
   b84fc:	d415      	bmi.n	b852a <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b84fe:	0100      	lsls	r0, r0, #4
   b8500:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8504:	b2c7      	uxtb	r7, r0
   b8506:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b850a:	2124      	movs	r1, #36	; 0x24
   b850c:	4620      	mov	r0, r4
   b850e:	f003 f91f 	bl	bb750 <strnlen>
   b8512:	3501      	adds	r5, #1
   b8514:	42a8      	cmp	r0, r5
   b8516:	d908      	bls.n	b852a <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b8518:	5d60      	ldrb	r0, [r4, r5]
   b851a:	f7ff fec9 	bl	b82b0 <_ZN8particle11hexToNibbleEc>
   b851e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b8520:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b8522:	bfa4      	itt	ge
   b8524:	4338      	orrge	r0, r7
   b8526:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b852a:	3501      	adds	r5, #1
   b852c:	e7d1      	b.n	b84d2 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b852e:	bf00      	nop
   b8530:	000bdda6 	.word	0x000bdda6

000b8534 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b8534:	b513      	push	{r0, r1, r4, lr}
   b8536:	4604      	mov	r4, r0
   b8538:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b853a:	f7ff ff15 	bl	b8368 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b853e:	4620      	mov	r0, r4
   b8540:	9901      	ldr	r1, [sp, #4]
   b8542:	f7ff ff87 	bl	b8454 <_ZN8particle7BleUuid9constructEPKc>
}
   b8546:	4620      	mov	r0, r4
   b8548:	b002      	add	sp, #8
   b854a:	bd10      	pop	{r4, pc}

000b854c <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b854c:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b854e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8552:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b8554:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b8556:	8043      	strh	r3, [r0, #2]
   b8558:	220e      	movs	r2, #14
   b855a:	4629      	mov	r1, r5
   b855c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b855e:	7105      	strb	r5, [r0, #4]
   b8560:	3006      	adds	r0, #6
   b8562:	f003 f891 	bl	bb688 <memset>
   b8566:	f104 0014 	add.w	r0, r4, #20
   b856a:	f7ff fefd 	bl	b8368 <_ZN8particle7BleUuidC1Ev>
   b856e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b8572:	f7ff fef9 	bl	b8368 <_ZN8particle7BleUuidC1Ev>
   b8576:	4904      	ldr	r1, [pc, #16]	; (b8588 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b8578:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b857c:	f001 f9f5 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b8580:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b8582:	4620      	mov	r0, r4
   b8584:	bd38      	pop	{r3, r4, r5, pc}
   b8586:	bf00      	nop
   b8588:	000bdbc2 	.word	0x000bdbc2

000b858c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b858c:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b858e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b8592:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b8596:	4293      	cmp	r3, r2
   b8598:	4618      	mov	r0, r3
   b859a:	d006      	beq.n	b85aa <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b859c:	6804      	ldr	r4, [r0, #0]
   b859e:	8824      	ldrh	r4, [r4, #0]
   b85a0:	428c      	cmp	r4, r1
   b85a2:	f103 0308 	add.w	r3, r3, #8
   b85a6:	d1f6      	bne.n	b8596 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b85a8:	bd10      	pop	{r4, pc}
        return nullptr;
   b85aa:	2000      	movs	r0, #0
   b85ac:	e7fc      	b.n	b85a8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b85b0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b85b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b85b4:	2600      	movs	r6, #0
   b85b6:	6006      	str	r6, [r0, #0]
   b85b8:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b85ba:	2028      	movs	r0, #40	; 0x28
   b85bc:	460c      	mov	r4, r1
   b85be:	f7fb fd6a 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b85c2:	1e05      	subs	r5, r0, #0
   b85c4:	f105 080c 	add.w	r8, r5, #12
   b85c8:	d00f      	beq.n	b85ea <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b85ca:	2301      	movs	r3, #1
   b85cc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b85d0:	4b08      	ldr	r3, [pc, #32]	; (b85f4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b85d2:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b85d4:	4640      	mov	r0, r8
   b85d6:	f7ff fec7 	bl	b8368 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b85da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b85dc:	622e      	str	r6, [r5, #32]
   b85de:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b85e2:	4646      	mov	r6, r8
   b85e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b85e6:	6823      	ldr	r3, [r4, #0]
   b85e8:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b85ea:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b85ee:	4638      	mov	r0, r7
   b85f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b85f4:	000bdd68 	.word	0x000bdd68

000b85f8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b85f8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b85fa:	2500      	movs	r5, #0
   b85fc:	6005      	str	r5, [r0, #0]
   b85fe:	4606      	mov	r6, r0
   b8600:	2030      	movs	r0, #48	; 0x30
   b8602:	f7fb fd48 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8606:	4604      	mov	r4, r0
   b8608:	b188      	cbz	r0, b862e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b860a:	2301      	movs	r3, #1
   b860c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b8610:	4b09      	ldr	r3, [pc, #36]	; (b8638 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b8612:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b8614:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8618:	8183      	strh	r3, [r0, #12]
   b861a:	300e      	adds	r0, #14
   b861c:	f7ff fe99 	bl	b8352 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b8620:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b8624:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b8628:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b862c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b862e:	6074      	str	r4, [r6, #4]
   b8630:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b8632:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b8634:	4630      	mov	r0, r6
   b8636:	bd70      	pop	{r4, r5, r6, pc}
   b8638:	000bdd84 	.word	0x000bdd84

000b863c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b863c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b863e:	460d      	mov	r5, r1
   b8640:	4604      	mov	r4, r0
    WiringBleLock lk;
   b8642:	a801      	add	r0, sp, #4
   b8644:	f7ff fe4a 	bl	b82dc <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8648:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b864a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b864e:	6023      	str	r3, [r4, #0]
   b8650:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b8654:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b8656:	a801      	add	r0, sp, #4
   b8658:	f7ff fe4e 	bl	b82f8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b865c:	4620      	mov	r0, r4
   b865e:	b003      	add	sp, #12
   b8660:	bd30      	pop	{r4, r5, pc}

000b8662 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b8662:	b530      	push	{r4, r5, lr}
   b8664:	4605      	mov	r5, r0
   b8666:	b087      	sub	sp, #28
   b8668:	460c      	mov	r4, r1
    WiringBleLock lk;
   b866a:	a801      	add	r0, sp, #4
   b866c:	f7ff fe36 	bl	b82dc <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b8670:	682a      	ldr	r2, [r5, #0]
   b8672:	6823      	ldr	r3, [r4, #0]
   b8674:	8812      	ldrh	r2, [r2, #0]
   b8676:	881b      	ldrh	r3, [r3, #0]
   b8678:	429a      	cmp	r2, r3
   b867a:	d10d      	bne.n	b8698 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b867c:	4629      	mov	r1, r5
   b867e:	a802      	add	r0, sp, #8
   b8680:	f7ff ffdc 	bl	b863c <_ZNK8particle13BlePeerDevice7addressEv>
   b8684:	4621      	mov	r1, r4
   b8686:	a804      	add	r0, sp, #16
   b8688:	f7ff ffd8 	bl	b863c <_ZNK8particle13BlePeerDevice7addressEv>
   b868c:	a904      	add	r1, sp, #16
   b868e:	a802      	add	r0, sp, #8
   b8690:	f7ff fe4b 	bl	b832a <_ZNK8particle10BleAddresseqERKS0_>
   b8694:	4604      	mov	r4, r0
   b8696:	b900      	cbnz	r0, b869a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b8698:	2400      	movs	r4, #0
    WiringBleLock lk;
   b869a:	a801      	add	r0, sp, #4
   b869c:	f7ff fe2c 	bl	b82f8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b86a0:	4620      	mov	r0, r4
   b86a2:	b007      	add	sp, #28
   b86a4:	bd30      	pop	{r4, r5, pc}
	...

000b86a8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b86a8:	b510      	push	{r4, lr}
   b86aa:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b86ac:	2064      	movs	r0, #100	; 0x64
   b86ae:	f7fb fcf2 	bl	b4096 <_Znwj>
   b86b2:	b168      	cbz	r0, b86d0 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b86b4:	2300      	movs	r3, #0
   b86b6:	e9c0 3300 	strd	r3, r3, [r0]
   b86ba:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b86be:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b86c2:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b86c6:	6203      	str	r3, [r0, #32]
   b86c8:	62c3      	str	r3, [r0, #44]	; 0x2c
   b86ca:	63c3      	str	r3, [r0, #60]	; 0x3c
   b86cc:	64c3      	str	r3, [r0, #76]	; 0x4c
   b86ce:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b86d0:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b86d2:	b920      	cbnz	r0, b86de <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b86d4:	4a0a      	ldr	r2, [pc, #40]	; (b8700 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b86d6:	490b      	ldr	r1, [pc, #44]	; (b8704 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b86d8:	200a      	movs	r0, #10
   b86da:	f7ff fc1b 	bl	b7f14 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b86de:	2000      	movs	r0, #0
   b86e0:	f7ff fa80 	bl	b7be4 <hal_ble_stack_init>
   b86e4:	b120      	cbz	r0, b86f0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b86e6:	4a06      	ldr	r2, [pc, #24]	; (b8700 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b86e8:	4907      	ldr	r1, [pc, #28]	; (b8708 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b86ea:	200a      	movs	r0, #10
   b86ec:	f7ff fc12 	bl	b7f14 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b86f0:	6821      	ldr	r1, [r4, #0]
   b86f2:	4806      	ldr	r0, [pc, #24]	; (b870c <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b86f4:	2200      	movs	r2, #0
   b86f6:	f7ff fab3 	bl	b7c60 <hal_ble_set_callback_on_periph_link_events>
}
   b86fa:	4620      	mov	r0, r4
   b86fc:	bd10      	pop	{r4, pc}
   b86fe:	bf00      	nop
   b8700:	000b7cb5 	.word	0x000b7cb5
   b8704:	000bdbf8 	.word	0x000bdbf8
   b8708:	000bdc36 	.word	0x000bdc36
   b870c:	000b8c91 	.word	0x000b8c91

000b8710 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b8710:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b8712:	4c0a      	ldr	r4, [pc, #40]	; (b873c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b8714:	7823      	ldrb	r3, [r4, #0]
   b8716:	f3bf 8f5b 	dmb	ish
   b871a:	07db      	lsls	r3, r3, #31
   b871c:	d40c      	bmi.n	b8738 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b871e:	4620      	mov	r0, r4
   b8720:	f7fb fcc1 	bl	b40a6 <__cxa_guard_acquire>
   b8724:	b140      	cbz	r0, b8738 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b8726:	4806      	ldr	r0, [pc, #24]	; (b8740 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b8728:	f7ff ffbe 	bl	b86a8 <_ZN8particle14BleLocalDeviceC1Ev>
   b872c:	4620      	mov	r0, r4
   b872e:	f7fb fcbf 	bl	b40b0 <__cxa_guard_release>
   b8732:	4804      	ldr	r0, [pc, #16]	; (b8744 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b8734:	f002 ff66 	bl	bb604 <atexit>
    return instance;
}
   b8738:	4801      	ldr	r0, [pc, #4]	; (b8740 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b873a:	bd10      	pop	{r4, pc}
   b873c:	2003e6b8 	.word	0x2003e6b8
   b8740:	2003e6c4 	.word	0x2003e6c4
   b8744:	000b895d 	.word	0x000b895d

000b8748 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b8748:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b874a:	6803      	ldr	r3, [r0, #0]
   b874c:	3b09      	subs	r3, #9
   b874e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b8750:	b08d      	sub	sp, #52	; 0x34
   b8752:	4604      	mov	r4, r0
   b8754:	460d      	mov	r5, r1
    switch (event->type) {
   b8756:	d811      	bhi.n	b877c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b8758:	f7ff ffda 	bl	b8710 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b875c:	88a1      	ldrh	r1, [r4, #4]
   b875e:	6800      	ldr	r0, [r0, #0]
   b8760:	f7ff ff14 	bl	b858c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b8764:	4603      	mov	r3, r0
   b8766:	b958      	cbnz	r0, b8780 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b8768:	2220      	movs	r2, #32
   b876a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b876e:	4a0b      	ldr	r2, [pc, #44]	; (b879c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b8770:	9200      	str	r2, [sp, #0]
   b8772:	490b      	ldr	r1, [pc, #44]	; (b87a0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b8774:	aa04      	add	r2, sp, #16
   b8776:	2032      	movs	r0, #50	; 0x32
   b8778:	f7ff fbd4 	bl	b7f24 <log_message>
}
   b877c:	b00d      	add	sp, #52	; 0x34
   b877e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b8780:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b8782:	2a00      	cmp	r2, #0
   b8784:	d0fa      	beq.n	b877c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b8786:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b878a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b878e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b8792:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b8794:	aa04      	add	r2, sp, #16
   b8796:	a903      	add	r1, sp, #12
   b8798:	47a0      	blx	r4
}
   b879a:	e7ef      	b.n	b877c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b879c:	000bdc78 	.word	0x000bdc78
   b87a0:	000bdc0f 	.word	0x000bdc0f

000b87a4 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b87a4:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b87a6:	2000      	movs	r0, #0
   b87a8:	f7ff fa1c 	bl	b7be4 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b87ac:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b87b0:	bd08      	pop	{r3, pc}

000b87b2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b87b2:	b919      	cbnz	r1, b87bc <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b87b4:	460a      	mov	r2, r1
   b87b6:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b87b8:	f7ff ba1c 	b.w	b7bf4 <hal_ble_gap_set_advertising_data>
   b87bc:	e9d1 0100 	ldrd	r0, r1, [r1]
   b87c0:	2200      	movs	r2, #0
   b87c2:	e7f9      	b.n	b87b8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b87c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b87c4:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b87c6:	1e14      	subs	r4, r2, #0
   b87c8:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b87ca:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b87cc:	db02      	blt.n	b87d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b87ce:	1862      	adds	r2, r4, r1
   b87d0:	429a      	cmp	r2, r3
   b87d2:	dd00      	ble.n	b87d6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b87d4:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b87d6:	682a      	ldr	r2, [r5, #0]
   b87d8:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b87da:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b87dc:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b87de:	1a52      	subs	r2, r2, r1
   b87e0:	f002 ff38 	bl	bb654 <memmove>
    size_ -= n;
   b87e4:	686a      	ldr	r2, [r5, #4]
   b87e6:	1b12      	subs	r2, r2, r4
   b87e8:	606a      	str	r2, [r5, #4]
}
   b87ea:	bd38      	pop	{r3, r4, r5, pc}

000b87ec <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b87ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b87ee:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b87f0:	4604      	mov	r4, r0
   b87f2:	460d      	mov	r5, r1
   b87f4:	ab01      	add	r3, sp, #4
   b87f6:	e9d0 0100 	ldrd	r0, r1, [r0]
   b87fa:	f7ff fce5 	bl	b81c8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b87fe:	4602      	mov	r2, r0
   b8800:	b138      	cbz	r0, b8812 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b8802:	9901      	ldr	r1, [sp, #4]
   b8804:	4620      	mov	r0, r4
   b8806:	f7ff ffdd 	bl	b87c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b880a:	4629      	mov	r1, r5
   b880c:	4620      	mov	r0, r4
   b880e:	f7ff ffed 	bl	b87ec <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b8812:	b003      	add	sp, #12
   b8814:	bd30      	pop	{r4, r5, pc}

000b8816 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b8816:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b8818:	460c      	mov	r4, r1
   b881a:	b929      	cbnz	r1, b8828 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b881c:	460a      	mov	r2, r1
   b881e:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b8820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b8824:	f7ff b9ee 	b.w	b7c04 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b8828:	2101      	movs	r1, #1
   b882a:	4620      	mov	r0, r4
   b882c:	f7ff ffde 	bl	b87ec <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b8830:	e9d4 0100 	ldrd	r0, r1, [r4]
   b8834:	2200      	movs	r2, #0
   b8836:	e7f3      	b.n	b8820 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b8838 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b8838:	b538      	push	{r3, r4, r5, lr}
   b883a:	4604      	mov	r4, r0
   b883c:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b883e:	f7ff ffb8 	bl	b87b2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b8842:	2800      	cmp	r0, #0
   b8844:	db0a      	blt.n	b885c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b8846:	4629      	mov	r1, r5
   b8848:	4620      	mov	r0, r4
   b884a:	f7ff ffe4 	bl	b8816 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b884e:	2800      	cmp	r0, #0
   b8850:	db04      	blt.n	b885c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b8852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b8856:	2000      	movs	r0, #0
   b8858:	f7ff b9dc 	b.w	b7c14 <hal_ble_gap_start_advertising>
}
   b885c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8860 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b8860:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8862:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b8864:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b8866:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8868:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b886a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b886c:	f7fb fc13 	bl	b4096 <_Znwj>
   b8870:	b118      	cbz	r0, b887a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b8872:	682b      	ldr	r3, [r5, #0]
   b8874:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8876:	686b      	ldr	r3, [r5, #4]
   b8878:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b887a:	4b03      	ldr	r3, [pc, #12]	; (b8888 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b887c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b887e:	4b03      	ldr	r3, [pc, #12]	; (b888c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8880:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8882:	60a3      	str	r3, [r4, #8]
      }
   b8884:	4620      	mov	r0, r4
   b8886:	bd38      	pop	{r3, r4, r5, pc}
   b8888:	000b8209 	.word	0x000b8209
   b888c:	000b8221 	.word	0x000b8221

000b8890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b8890:	680b      	ldr	r3, [r1, #0]
   b8892:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b8894:	b113      	cbz	r3, b889c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b8896:	685a      	ldr	r2, [r3, #4]
   b8898:	3201      	adds	r2, #1
   b889a:	605a      	str	r2, [r3, #4]
      }
   b889c:	4770      	bx	lr

000b889e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b889e:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b88a0:	f851 3b04 	ldr.w	r3, [r1], #4
   b88a4:	4604      	mov	r4, r0
   b88a6:	f840 3b04 	str.w	r3, [r0], #4
   b88aa:	f7ff fff1 	bl	b8890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b88ae:	6823      	ldr	r3, [r4, #0]
   b88b0:	b90b      	cbnz	r3, b88b6 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b88b2:	f7ff fc9f 	bl	b81f4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b88b6:	4620      	mov	r0, r4
   b88b8:	bd10      	pop	{r4, pc}

000b88ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b88ba:	b510      	push	{r4, lr}
   b88bc:	f851 3b04 	ldr.w	r3, [r1], #4
   b88c0:	4604      	mov	r4, r0
   b88c2:	f840 3b04 	str.w	r3, [r0], #4
   b88c6:	f7ff ffe3 	bl	b8890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b88ca:	4620      	mov	r0, r4
   b88cc:	bd10      	pop	{r4, pc}

000b88ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b88ce:	b510      	push	{r4, lr}
   b88d0:	f851 3b04 	ldr.w	r3, [r1], #4
   b88d4:	4604      	mov	r4, r0
   b88d6:	f840 3b04 	str.w	r3, [r0], #4
   b88da:	f7ff ffd9 	bl	b8890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b88de:	4620      	mov	r0, r4
   b88e0:	bd10      	pop	{r4, pc}

000b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b88e2:	b510      	push	{r4, lr}
   b88e4:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b88e6:	6800      	ldr	r0, [r0, #0]
   b88e8:	b108      	cbz	r0, b88ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b88ea:	f7ff fccd 	bl	b8288 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b88ee:	4620      	mov	r0, r4
   b88f0:	bd10      	pop	{r4, pc}

000b88f2 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b88f2:	b510      	push	{r4, lr}
   b88f4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b88f6:	3004      	adds	r0, #4
   b88f8:	f7ff fff3 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b88fc:	4620      	mov	r0, r4
   b88fe:	bd10      	pop	{r4, pc}

000b8900 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8900:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8902:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8906:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8908:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b890c:	42ae      	cmp	r6, r5
   b890e:	d004      	beq.n	b891a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b8910:	1d28      	adds	r0, r5, #4
   b8912:	f7ff ffe6 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8916:	3508      	adds	r5, #8
   b8918:	e7f8      	b.n	b890c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b891a:	6820      	ldr	r0, [r4, #0]
   b891c:	f7ff fbb6 	bl	b808c <free>
}
   b8920:	4620      	mov	r0, r4
   b8922:	bd70      	pop	{r4, r5, r6, pc}

000b8924 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8924:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8926:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b892a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b892c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8930:	42ae      	cmp	r6, r5
   b8932:	d004      	beq.n	b893e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b8934:	1d28      	adds	r0, r5, #4
   b8936:	f7ff ffd4 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b893a:	3508      	adds	r5, #8
   b893c:	e7f8      	b.n	b8930 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b893e:	6820      	ldr	r0, [r4, #0]
   b8940:	f7ff fba4 	bl	b808c <free>
}
   b8944:	4620      	mov	r0, r4
   b8946:	bd70      	pop	{r4, r5, r6, pc}

000b8948 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8948:	b510      	push	{r4, lr}
   b894a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b894c:	3024      	adds	r0, #36	; 0x24
   b894e:	f7ff ffe9 	bl	b8924 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8952:	f104 0018 	add.w	r0, r4, #24
   b8956:	f7ff ffd3 	bl	b8900 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b895a:	bd10      	pop	{r4, pc}

000b895c <__tcf_0>:
    static BleLocalDevice instance;
   b895c:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b895e:	4b17      	ldr	r3, [pc, #92]	; (b89bc <__tcf_0+0x60>)
   b8960:	681c      	ldr	r4, [r3, #0]
   b8962:	b354      	cbz	r4, b89ba <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b8964:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8968:	f7ff fc7a 	bl	b8260 <_ZNSt14_Function_baseD1Ev>
   b896c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8970:	f7ff fc76 	bl	b8260 <_ZNSt14_Function_baseD1Ev>
   b8974:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8978:	f7ff fc72 	bl	b8260 <_ZNSt14_Function_baseD1Ev>
   b897c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8980:	f7ff fc6e 	bl	b8260 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b8984:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b8988:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b898c:	42ae      	cmp	r6, r5
   b898e:	d004      	beq.n	b899a <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b8990:	1d28      	adds	r0, r5, #4
   b8992:	f7ff ffa6 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8996:	3508      	adds	r5, #8
   b8998:	e7f8      	b.n	b898c <__tcf_0+0x30>
    ::free(ptr);
   b899a:	69a0      	ldr	r0, [r4, #24]
   b899c:	f7ff fb76 	bl	b808c <free>
    ~BleLocalDeviceImpl() = default;
   b89a0:	f104 000c 	add.w	r0, r4, #12
   b89a4:	f7ff ffbe 	bl	b8924 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b89a8:	4620      	mov	r0, r4
   b89aa:	f7ff ffa9 	bl	b8900 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b89ae:	4620      	mov	r0, r4
   b89b0:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b89b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b89b6:	f7fb bb74 	b.w	b40a2 <_ZdlPvj>
   b89ba:	bd70      	pop	{r4, r5, r6, pc}
   b89bc:	2003e6c4 	.word	0x2003e6c4

000b89c0 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b89c0:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b89c2:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b89c4:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b89c8:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b89cc:	6803      	ldr	r3, [r0, #0]
   b89ce:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b89d0:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b89d2:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b89d4:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b89d6:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b89d8:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b89da:	f7ff ff82 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b89de:	b002      	add	sp, #8
   b89e0:	bd10      	pop	{r4, pc}

000b89e2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b89e2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b89e4:	b510      	push	{r4, lr}
      if (_M_empty())
   b89e6:	b90a      	cbnz	r2, b89ec <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b89e8:	f001 fe47 	bl	ba67a <_ZSt25__throw_bad_function_callv>
    }
   b89ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b89f0:	68c3      	ldr	r3, [r0, #12]
   b89f2:	4718      	bx	r3

000b89f4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b89f4:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b89f6:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b89f8:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b89fa:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b89fc:	dd03      	ble.n	b8a06 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b89fe:	f7ff fb4d 	bl	b809c <realloc>
            if (!d) {
   b8a02:	b918      	cbnz	r0, b8a0c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b8a04:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b8a06:	f7ff fb41 	bl	b808c <free>
        T* d = nullptr;
   b8a0a:	2000      	movs	r0, #0
        data_ = d;
   b8a0c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8a0e:	60a5      	str	r5, [r4, #8]
        return true;
   b8a10:	2001      	movs	r0, #1
   b8a12:	e7f7      	b.n	b8a04 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b8a14 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b8a14:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b8a16:	6883      	ldr	r3, [r0, #8]
   b8a18:	428b      	cmp	r3, r1
   b8a1a:	da02      	bge.n	b8a22 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b8a1c:	f7ff ffea 	bl	b89f4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b8a20:	bd08      	pop	{r3, pc}
    return true;
   b8a22:	2001      	movs	r0, #1
   b8a24:	e7fc      	b.n	b8a20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b8a26 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8a2a:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8a2c:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8a2e:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8a30:	4419      	add	r1, r3
   b8a32:	6883      	ldr	r3, [r0, #8]
   b8a34:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8a36:	4604      	mov	r4, r0
   b8a38:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8a3a:	dc12      	bgt.n	b8a62 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b8a3c:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8a3e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8a40:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8a42:	1bd2      	subs	r2, r2, r7
   b8a44:	4631      	mov	r1, r6
   b8a46:	1970      	adds	r0, r6, r5
   b8a48:	f002 fe04 	bl	bb654 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b8a4c:	462a      	mov	r2, r5
   b8a4e:	4641      	mov	r1, r8
   b8a50:	4630      	mov	r0, r6
   b8a52:	f002 fdf1 	bl	bb638 <memcpy>
    size_ += n;
   b8a56:	6863      	ldr	r3, [r4, #4]
   b8a58:	442b      	add	r3, r5
   b8a5a:	6063      	str	r3, [r4, #4]
    return true;
   b8a5c:	2001      	movs	r0, #1
}
   b8a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8a62:	f7ff ffc7 	bl	b89f4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8a66:	2800      	cmp	r0, #0
   b8a68:	d1e8      	bne.n	b8a3c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b8a6a:	e7f8      	b.n	b8a5e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b8a6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8a6e:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8a70:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b8a74:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8a76:	4604      	mov	r4, r0
   b8a78:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8a7a:	da0b      	bge.n	b8a94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b8a7c:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8a7e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8a80:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8a82:	1b52      	subs	r2, r2, r5
   b8a84:	1c48      	adds	r0, r1, #1
   b8a86:	f002 fde5 	bl	bb654 <memmove>
    new(p) T(std::move(value));
   b8a8a:	557e      	strb	r6, [r7, r5]
    ++size_;
   b8a8c:	6863      	ldr	r3, [r4, #4]
   b8a8e:	3301      	adds	r3, #1
   b8a90:	6063      	str	r3, [r4, #4]
}
   b8a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8a94:	3101      	adds	r1, #1
   b8a96:	f7ff ffad 	bl	b89f4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8a9a:	2800      	cmp	r0, #0
   b8a9c:	d1ee      	bne.n	b8a7c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b8a9e:	e7f8      	b.n	b8a92 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b8aa0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8aa0:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b8aa2:	6841      	ldr	r1, [r0, #4]
   b8aa4:	f7ff bfe2 	b.w	b8a6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b8aa8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8aa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8aac:	4604      	mov	r4, r0
   b8aae:	461d      	mov	r5, r3
   b8ab0:	460f      	mov	r7, r1
   b8ab2:	ab01      	add	r3, sp, #4
   b8ab4:	4690      	mov	r8, r2
   b8ab6:	460a      	mov	r2, r1
   b8ab8:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8abc:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b8ac0:	f7ff fb82 	bl	b81c8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b8ac4:	1cae      	adds	r6, r5, #2
   b8ac6:	6863      	ldr	r3, [r4, #4]
   b8ac8:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b8aca:	f1b9 0f00 	cmp.w	r9, #0
   b8ace:	d126      	bne.n	b8b1e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b8ad0:	b328      	cbz	r0, b8b1e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8ad2:	4433      	add	r3, r6
   b8ad4:	1a1b      	subs	r3, r3, r0
   b8ad6:	2bff      	cmp	r3, #255	; 0xff
   b8ad8:	d809      	bhi.n	b8aee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b8ada:	9901      	ldr	r1, [sp, #4]
   b8adc:	4620      	mov	r0, r4
   b8ade:	f7ff fe71 	bl	b87c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8ae2:	6861      	ldr	r1, [r4, #4]
   b8ae4:	4620      	mov	r0, r4
   b8ae6:	4431      	add	r1, r6
   b8ae8:	f7ff ff94 	bl	b8a14 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8aec:	b918      	cbnz	r0, b8af6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b8aee:	6860      	ldr	r0, [r4, #4]
}
   b8af0:	b003      	add	sp, #12
   b8af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b8af6:	1c6a      	adds	r2, r5, #1
   b8af8:	9901      	ldr	r1, [sp, #4]
   b8afa:	b2d2      	uxtb	r2, r2
   b8afc:	4620      	mov	r0, r4
   b8afe:	f7ff ffb5 	bl	b8a6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b8b02:	9901      	ldr	r1, [sp, #4]
   b8b04:	463a      	mov	r2, r7
   b8b06:	3101      	adds	r1, #1
   b8b08:	4620      	mov	r0, r4
   b8b0a:	f7ff ffaf 	bl	b8a6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b8b0e:	9901      	ldr	r1, [sp, #4]
   b8b10:	462b      	mov	r3, r5
   b8b12:	4642      	mov	r2, r8
   b8b14:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b8b16:	4620      	mov	r0, r4
   b8b18:	f7ff ff85 	bl	b8a26 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b8b1c:	e7e7      	b.n	b8aee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8b1e:	18f1      	adds	r1, r6, r3
   b8b20:	29ff      	cmp	r1, #255	; 0xff
   b8b22:	d8e4      	bhi.n	b8aee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8b24:	4620      	mov	r0, r4
   b8b26:	f7ff ff75 	bl	b8a14 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8b2a:	2800      	cmp	r0, #0
   b8b2c:	d0df      	beq.n	b8aee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b8b2e:	1c69      	adds	r1, r5, #1
   b8b30:	b2c9      	uxtb	r1, r1
   b8b32:	4620      	mov	r0, r4
   b8b34:	f7ff ffb4 	bl	b8aa0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b8b38:	4639      	mov	r1, r7
   b8b3a:	4620      	mov	r0, r4
   b8b3c:	f7ff ffb0 	bl	b8aa0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b8b40:	6861      	ldr	r1, [r4, #4]
   b8b42:	462b      	mov	r3, r5
   b8b44:	4642      	mov	r2, r8
   b8b46:	e7e6      	b.n	b8b16 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b8b48 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8b48:	b430      	push	{r4, r5}
   b8b4a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b8b4e:	b11a      	cbz	r2, b8b58 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b8b50:	9502      	str	r5, [sp, #8]
}
   b8b52:	bc30      	pop	{r4, r5}
   b8b54:	f7ff bfa8 	b.w	b8aa8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b8b58:	6840      	ldr	r0, [r0, #4]
}
   b8b5a:	bc30      	pop	{r4, r5}
   b8b5c:	4770      	bx	lr

000b8b5e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b8b5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b8b60:	2300      	movs	r3, #0
   b8b62:	e9c0 3300 	strd	r3, r3, [r0]
   b8b66:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8b68:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8b6a:	9300      	str	r3, [sp, #0]
   b8b6c:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8b6e:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8b72:	4619      	mov	r1, r3
   b8b74:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b8b78:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8b7a:	f7ff ffe5 	bl	b8b48 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b8b7e:	4620      	mov	r0, r4
   b8b80:	b004      	add	sp, #16
   b8b82:	bd10      	pop	{r4, pc}

000b8b84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8b84:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8b88:	4604      	mov	r4, r0
   b8b8a:	460d      	mov	r5, r1
   b8b8c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8b8e:	d914      	bls.n	b8bba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8b90:	4290      	cmp	r0, r2
   b8b92:	d213      	bcs.n	b8bbc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8b94:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8b98:	1a75      	subs	r5, r6, r1
   b8b9a:	f1a1 0708 	sub.w	r7, r1, #8
   b8b9e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8ba0:	42b7      	cmp	r7, r6
   b8ba2:	d018      	beq.n	b8bd6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8ba4:	b11c      	cbz	r4, b8bae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8ba6:	4631      	mov	r1, r6
   b8ba8:	4620      	mov	r0, r4
   b8baa:	f7ff fe90 	bl	b88ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b8bae:	1d30      	adds	r0, r6, #4
   b8bb0:	f7ff fe97 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8bb4:	3e08      	subs	r6, #8
   b8bb6:	3c08      	subs	r4, #8
   b8bb8:	e7f2      	b.n	b8ba0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8bba:	d00c      	beq.n	b8bd6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8bbc:	42b5      	cmp	r5, r6
   b8bbe:	d00a      	beq.n	b8bd6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8bc0:	b11c      	cbz	r4, b8bca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8bc2:	4629      	mov	r1, r5
   b8bc4:	4620      	mov	r0, r4
   b8bc6:	f7ff fe82 	bl	b88ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8bca:	1d28      	adds	r0, r5, #4
   b8bcc:	f7ff fe89 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8bd0:	3508      	adds	r5, #8
   b8bd2:	3408      	adds	r4, #8
   b8bd4:	e7f2      	b.n	b8bbc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8bd8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8bda:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8bdc:	6846      	ldr	r6, [r0, #4]
   b8bde:	4668      	mov	r0, sp
   b8be0:	f7ff fe75 	bl	b88ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8be4:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b8be8:	429f      	cmp	r7, r3
   b8bea:	db12      	blt.n	b8c12 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b8bec:	3701      	adds	r7, #1
        if (n > 0) {
   b8bee:	2f00      	cmp	r7, #0
   b8bf0:	dd29      	ble.n	b8c46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b8bf2:	00f8      	lsls	r0, r7, #3
   b8bf4:	f7ff fa42 	bl	b807c <malloc>
            if (!d) {
   b8bf8:	4605      	mov	r5, r0
   b8bfa:	b1f0      	cbz	r0, b8c3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b8bfc:	e9d4 1200 	ldrd	r1, r2, [r4]
   b8c00:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8c04:	f7ff ffbe 	bl	b8b84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8c08:	6820      	ldr	r0, [r4, #0]
   b8c0a:	f7ff fa3f 	bl	b808c <free>
        data_ = d;
   b8c0e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b8c10:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b8c12:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8c14:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8c16:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b8c1a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8c1e:	4631      	mov	r1, r6
   b8c20:	f106 0008 	add.w	r0, r6, #8
   b8c24:	f7ff ffae 	bl	b8b84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8c28:	b11e      	cbz	r6, b8c32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b8c2a:	4669      	mov	r1, sp
   b8c2c:	4630      	mov	r0, r6
   b8c2e:	f7ff fe4e 	bl	b88ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b8c32:	6863      	ldr	r3, [r4, #4]
   b8c34:	3301      	adds	r3, #1
   b8c36:	6063      	str	r3, [r4, #4]
    return true;
   b8c38:	2501      	movs	r5, #1
   b8c3a:	a801      	add	r0, sp, #4
   b8c3c:	f7ff fe51 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8c40:	4628      	mov	r0, r5
   b8c42:	b003      	add	sp, #12
   b8c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b8c46:	2500      	movs	r5, #0
   b8c48:	e7de      	b.n	b8c08 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b8c4a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b8c4c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8c50:	4605      	mov	r5, r0
   b8c52:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b8c54:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b8c58:	42a6      	cmp	r6, r4
   b8c5a:	d005      	beq.n	b8c68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b8c5c:	4639      	mov	r1, r7
   b8c5e:	4620      	mov	r0, r4
   b8c60:	f7ff fcff 	bl	b8662 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b8c64:	b108      	cbz	r0, b8c6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b8c66:	b914      	cbnz	r4, b8c6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b8c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b8c6a:	3408      	adds	r4, #8
   b8c6c:	e7f4      	b.n	b8c58 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b8c6e:	1d20      	adds	r0, r4, #4
   b8c70:	f7ff fe37 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b8c74:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8c78:	f104 0108 	add.w	r1, r4, #8
   b8c7c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8c80:	4620      	mov	r0, r4
   b8c82:	f7ff ff7f 	bl	b8b84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b8c86:	686b      	ldr	r3, [r5, #4]
   b8c88:	3b01      	subs	r3, #1
   b8c8a:	606b      	str	r3, [r5, #4]
    return true;
   b8c8c:	e7ec      	b.n	b8c68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b8c90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8c94:	4605      	mov	r5, r0
   b8c96:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b8c98:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8c9a:	460c      	mov	r4, r1
        WiringBleLock lk;
   b8c9c:	f7ff fb1e 	bl	b82dc <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b8ca0:	682e      	ldr	r6, [r5, #0]
   b8ca2:	1ef3      	subs	r3, r6, #3
   b8ca4:	2b0d      	cmp	r3, #13
   b8ca6:	d83c      	bhi.n	b8d22 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8ca8:	e8df f013 	tbh	[pc, r3, lsl #1]
   b8cac:	0053000e 	.word	0x0053000e
   b8cb0:	00d1003b 	.word	0x00d1003b
   b8cb4:	003b003b 	.word	0x003b003b
   b8cb8:	003b003b 	.word	0x003b003b
   b8cbc:	009b003b 	.word	0x009b003b
   b8cc0:	009b009b 	.word	0x009b009b
   b8cc4:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b8cc8:	a804      	add	r0, sp, #16
   b8cca:	f7ff fc95 	bl	b85f8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b8cce:	9b04      	ldr	r3, [sp, #16]
   b8cd0:	89aa      	ldrh	r2, [r5, #12]
   b8cd2:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b8cd4:	6869      	ldr	r1, [r5, #4]
   b8cd6:	9804      	ldr	r0, [sp, #16]
   b8cd8:	3108      	adds	r1, #8
   b8cda:	3002      	adds	r0, #2
   b8cdc:	f7ff fb18 	bl	b8310 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b8ce0:	a904      	add	r1, sp, #16
   b8ce2:	a806      	add	r0, sp, #24
   b8ce4:	f7ff fdf3 	bl	b88ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b8ce8:	a906      	add	r1, sp, #24
   b8cea:	f104 0018 	add.w	r0, r4, #24
   b8cee:	f7ff ff73 	bl	b8bd8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b8cf2:	4605      	mov	r5, r0
   b8cf4:	a807      	add	r0, sp, #28
   b8cf6:	f7ff fdf4 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8cfa:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b8cfc:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b8cfe:	b9b5      	cbnz	r5, b8d2e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b8d00:	4b5d      	ldr	r3, [pc, #372]	; (b8e78 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b8d02:	495e      	ldr	r1, [pc, #376]	; (b8e7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8d04:	9300      	str	r3, [sp, #0]
   b8d06:	2032      	movs	r0, #50	; 0x32
   b8d08:	462b      	mov	r3, r5
   b8d0a:	aa06      	add	r2, sp, #24
   b8d0c:	9507      	str	r5, [sp, #28]
   b8d0e:	f7ff f909 	bl	b7f24 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b8d12:	9b04      	ldr	r3, [sp, #16]
   b8d14:	4629      	mov	r1, r5
   b8d16:	8818      	ldrh	r0, [r3, #0]
   b8d18:	f7fe ff84 	bl	b7c24 <hal_ble_gap_disconnect>
   b8d1c:	a805      	add	r0, sp, #20
   b8d1e:	f7ff fde0 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b8d22:	a803      	add	r0, sp, #12
   b8d24:	f7ff fae8 	bl	b82f8 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b8d28:	b00e      	add	sp, #56	; 0x38
   b8d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b8d2e:	4a54      	ldr	r2, [pc, #336]	; (b8e80 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b8d30:	9200      	str	r2, [sp, #0]
   b8d32:	2300      	movs	r3, #0
   b8d34:	4951      	ldr	r1, [pc, #324]	; (b8e7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8d36:	9307      	str	r3, [sp, #28]
   b8d38:	aa06      	add	r2, sp, #24
   b8d3a:	2001      	movs	r0, #1
   b8d3c:	f7ff f8f2 	bl	b7f24 <log_message>
                if (impl->connectedCallback_) {
   b8d40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b8d42:	2b00      	cmp	r3, #0
   b8d44:	d0ea      	beq.n	b8d1c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b8d46:	a904      	add	r1, sp, #16
   b8d48:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8d4c:	f7ff fe49 	bl	b89e2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b8d50:	e7e4      	b.n	b8d1c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8d52:	89a9      	ldrh	r1, [r5, #12]
   b8d54:	4620      	mov	r0, r4
   b8d56:	f7ff fc19 	bl	b858c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8d5a:	4606      	mov	r6, r0
   b8d5c:	2800      	cmp	r0, #0
   b8d5e:	d0e0      	beq.n	b8d22 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b8d60:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b8d62:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b8d66:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8d6a:	8029      	strh	r1, [r5, #0]
   b8d6c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b8d70:	429a      	cmp	r2, r3
   b8d72:	d003      	beq.n	b8d7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b8d74:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b8d78:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b8d7a:	e7f9      	b.n	b8d70 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b8d7c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b8d80:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8d84:	45b8      	cmp	r8, r7
   b8d86:	d004      	beq.n	b8d92 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b8d88:	1d38      	adds	r0, r7, #4
   b8d8a:	f7ff fdaa 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8d8e:	3708      	adds	r7, #8
   b8d90:	e7f8      	b.n	b8d84 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b8d92:	2300      	movs	r3, #0
   b8d94:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b8d96:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b8d9a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8d9e:	45b8      	cmp	r8, r7
   b8da0:	d004      	beq.n	b8dac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b8da2:	1d38      	adds	r0, r7, #4
   b8da4:	f7ff fd9d 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8da8:	3708      	adds	r7, #8
   b8daa:	e7f8      	b.n	b8d9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b8dac:	2300      	movs	r3, #0
   b8dae:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b8db0:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b8db2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8db4:	b123      	cbz	r3, b8dc0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b8db6:	4631      	mov	r1, r6
   b8db8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8dbc:	f7ff fe11 	bl	b89e2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b8dc0:	2300      	movs	r3, #0
   b8dc2:	2220      	movs	r2, #32
   b8dc4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b8dc8:	4a2e      	ldr	r2, [pc, #184]	; (b8e84 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b8dca:	9200      	str	r2, [sp, #0]
   b8dcc:	492b      	ldr	r1, [pc, #172]	; (b8e7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8dce:	aa06      	add	r2, sp, #24
   b8dd0:	2001      	movs	r0, #1
   b8dd2:	f7ff f8a7 	bl	b7f24 <log_message>
                    impl->peers_.removeOne(*peer);
   b8dd6:	4631      	mov	r1, r6
   b8dd8:	f104 0018 	add.w	r0, r4, #24
   b8ddc:	f7ff ff35 	bl	b8c4a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b8de0:	e79f      	b.n	b8d22 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8de2:	89a9      	ldrh	r1, [r5, #12]
   b8de4:	4620      	mov	r0, r4
   b8de6:	f7ff fbd1 	bl	b858c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8dea:	2800      	cmp	r0, #0
   b8dec:	d099      	beq.n	b8d22 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b8dee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b8df0:	2b00      	cmp	r3, #0
   b8df2:	d096      	beq.n	b8d22 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b8df4:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8df6:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b8df8:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8dfc:	d001      	beq.n	b8e02 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b8dfe:	2e10      	cmp	r6, #16
   b8e00:	d117      	bne.n	b8e32 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b8e02:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b8e04:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b8e06:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b8e08:	2506      	movs	r5, #6
                        };
   b8e0a:	f88d 3015 	strb.w	r3, [sp, #21]
   b8e0e:	9104      	str	r1, [sp, #16]
   b8e10:	f88d 2014 	strb.w	r2, [sp, #20]
   b8e14:	9006      	str	r0, [sp, #24]
   b8e16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b8e1a:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b8e1c:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b8e20:	9508      	str	r5, [sp, #32]
   b8e22:	e883 0003 	stmia.w	r3, {r0, r1}
   b8e26:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b8e28:	a906      	add	r1, sp, #24
   b8e2a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8e2e:	4798      	blx	r3
   b8e30:	e777      	b.n	b8d22 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b8e32:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8e34:	bf01      	itttt	eq
   b8e36:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b8e38:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8e3a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b8e3e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b8e40:	bf0f      	iteee	eq
   b8e42:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b8e46:	461a      	movne	r2, r3
   b8e48:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b8e4a:	461d      	movne	r5, r3
   b8e4c:	e7dd      	b.n	b8e0a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8e4e:	89a9      	ldrh	r1, [r5, #12]
   b8e50:	4620      	mov	r0, r4
   b8e52:	f7ff fb9b 	bl	b858c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b8e56:	4601      	mov	r1, r0
   b8e58:	2800      	cmp	r0, #0
   b8e5a:	f43f af62 	beq.w	b8d22 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8e5e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b8e60:	2b00      	cmp	r3, #0
   b8e62:	f43f af5e 	beq.w	b8d22 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b8e66:	686b      	ldr	r3, [r5, #4]
   b8e68:	9306      	str	r3, [sp, #24]
   b8e6a:	aa06      	add	r2, sp, #24
   b8e6c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b8e6e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8e72:	4798      	blx	r3
   b8e74:	e755      	b.n	b8d22 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8e76:	bf00      	nop
   b8e78:	000bdc90 	.word	0x000bdc90
   b8e7c:	000bdc0f 	.word	0x000bdc0f
   b8e80:	000bdcb6 	.word	0x000bdcb6
   b8e84:	000bdcd3 	.word	0x000bdcd3

000b8e88 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b8e88:	b513      	push	{r0, r1, r4, lr}
   b8e8a:	460b      	mov	r3, r1
   b8e8c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8e8e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8e92:	466c      	mov	r4, sp
   b8e94:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b8e98:	e893 0003 	ldmia.w	r3, {r0, r1}
   b8e9c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b8ea0:	e894 0003 	ldmia.w	r4, {r0, r1}
   b8ea4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b8ea8:	b002      	add	sp, #8
   b8eaa:	bd10      	pop	{r4, pc}

000b8eac <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b8eac:	b538      	push	{r3, r4, r5, lr}
   b8eae:	4605      	mov	r5, r0
   b8eb0:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b8eb2:	f7ff ffe9 	bl	b8e88 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8eb6:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8eb8:	68a2      	ldr	r2, [r4, #8]
   b8eba:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8ebc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8ebe:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8ec0:	68e2      	ldr	r2, [r4, #12]
   b8ec2:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8ec4:	60e3      	str	r3, [r4, #12]
      }
   b8ec6:	bd38      	pop	{r3, r4, r5, pc}

000b8ec8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b8ec8:	b570      	push	{r4, r5, r6, lr}
   b8eca:	4604      	mov	r4, r0
   b8ecc:	b08c      	sub	sp, #48	; 0x30
   b8ece:	460e      	mov	r6, r1
   b8ed0:	9201      	str	r2, [sp, #4]
   b8ed2:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b8ed4:	f7ff fb3a 	bl	b854c <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b8ed8:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b8eda:	9901      	ldr	r1, [sp, #4]
   b8edc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8ee0:	f000 fd8b 	bl	b99fa <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b8ee4:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b8ee8:	b1cd      	cbz	r5, b8f1e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b8eea:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8eec:	9502      	str	r5, [sp, #8]
   b8eee:	a902      	add	r1, sp, #8
   b8ef0:	a804      	add	r0, sp, #16
   b8ef2:	9303      	str	r3, [sp, #12]
   b8ef4:	f7ff fcb4 	bl	b8860 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b8ef8:	2300      	movs	r3, #0
	__x.swap(*this);
   b8efa:	a908      	add	r1, sp, #32
   b8efc:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b8efe:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b8f00:	f7ff ffd4 	bl	b8eac <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b8f04:	4631      	mov	r1, r6
   b8f06:	a808      	add	r0, sp, #32
   b8f08:	f7ff ffd0 	bl	b8eac <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b8f0c:	a808      	add	r0, sp, #32
   b8f0e:	f7ff f9a7 	bl	b8260 <_ZNSt14_Function_baseD1Ev>
   b8f12:	a804      	add	r0, sp, #16
   b8f14:	f7ff f9a4 	bl	b8260 <_ZNSt14_Function_baseD1Ev>
    }
   b8f18:	4620      	mov	r0, r4
   b8f1a:	b00c      	add	sp, #48	; 0x30
   b8f1c:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b8f1e:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b8f20:	e7ea      	b.n	b8ef8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b8f24 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b8f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8f28:	b087      	sub	sp, #28
   b8f2a:	461d      	mov	r5, r3
   b8f2c:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b8f30:	4680      	mov	r8, r0
   b8f32:	468b      	mov	fp, r1
   b8f34:	4692      	mov	sl, r2
   b8f36:	9912      	ldr	r1, [sp, #72]	; 0x48
   b8f38:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8f3a:	2200      	movs	r2, #0
   b8f3c:	2068      	movs	r0, #104	; 0x68
   b8f3e:	9102      	str	r1, [sp, #8]
   b8f40:	9204      	str	r2, [sp, #16]
   b8f42:	f7fb f8a8 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8f46:	1e06      	subs	r6, r0, #0
   b8f48:	f106 090c 	add.w	r9, r6, #12
   b8f4c:	d018      	beq.n	b8f80 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b8f4e:	2201      	movs	r2, #1
	: _M_impl(__a)
   b8f50:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b8f52:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b8f56:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b8f58:	4a15      	ldr	r2, [pc, #84]	; (b8fb0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b8f5a:	f847 2b20 	str.w	r2, [r7], #32
   b8f5e:	9b03      	ldr	r3, [sp, #12]
   b8f60:	9100      	str	r1, [sp, #0]
   b8f62:	465a      	mov	r2, fp
   b8f64:	4651      	mov	r1, sl
   b8f66:	4648      	mov	r0, r9
   b8f68:	f7ff ffae 	bl	b8ec8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b8f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f6e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b8f70:	682b      	ldr	r3, [r5, #0]
   b8f72:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b8f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8f76:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b8f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8f7c:	6823      	ldr	r3, [r4, #0]
   b8f7e:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b8f80:	a904      	add	r1, sp, #16
   b8f82:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b8f84:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b8f88:	f7ff fd1a 	bl	b89c0 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b8f8c:	a805      	add	r0, sp, #20
   b8f8e:	f7ff fca8 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b8f92:	f8d8 3000 	ldr.w	r3, [r8]
   b8f96:	b93b      	cbnz	r3, b8fa8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b8f98:	4a06      	ldr	r2, [pc, #24]	; (b8fb4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b8f9a:	4907      	ldr	r1, [pc, #28]	; (b8fb8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b8f9c:	200a      	movs	r0, #10
}
   b8f9e:	b007      	add	sp, #28
   b8fa0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b8fa4:	f7fe bfb6 	b.w	b7f14 <panic_>
}
   b8fa8:	b007      	add	sp, #28
   b8faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8fae:	bf00      	nop
   b8fb0:	000bdd4c 	.word	0x000bdd4c
   b8fb4:	000b7cb5 	.word	0x000b7cb5
   b8fb8:	000bdbf8 	.word	0x000bdbf8

000b8fbc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8fbc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8fc0:	4604      	mov	r4, r0
   b8fc2:	460d      	mov	r5, r1
   b8fc4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8fc6:	d914      	bls.n	b8ff2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8fc8:	4290      	cmp	r0, r2
   b8fca:	d213      	bcs.n	b8ff4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8fcc:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8fd0:	1a75      	subs	r5, r6, r1
   b8fd2:	f1a1 0708 	sub.w	r7, r1, #8
   b8fd6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8fd8:	42b7      	cmp	r7, r6
   b8fda:	d018      	beq.n	b900e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8fdc:	b11c      	cbz	r4, b8fe6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8fde:	4631      	mov	r1, r6
   b8fe0:	4620      	mov	r0, r4
   b8fe2:	f7ff fc6a 	bl	b88ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8fe6:	1d30      	adds	r0, r6, #4
   b8fe8:	f7ff fc7b 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8fec:	3e08      	subs	r6, #8
   b8fee:	3c08      	subs	r4, #8
   b8ff0:	e7f2      	b.n	b8fd8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8ff2:	d00c      	beq.n	b900e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8ff4:	42b5      	cmp	r5, r6
   b8ff6:	d00a      	beq.n	b900e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8ff8:	b11c      	cbz	r4, b9002 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8ffa:	4629      	mov	r1, r5
   b8ffc:	4620      	mov	r0, r4
   b8ffe:	f7ff fc5c 	bl	b88ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9002:	1d28      	adds	r0, r5, #4
   b9004:	f7ff fc6d 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9008:	3508      	adds	r5, #8
   b900a:	3408      	adds	r4, #8
   b900c:	e7f2      	b.n	b8ff4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b900e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9010 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b9010:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b9012:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9014:	4605      	mov	r5, r0
        if (n > 0) {
   b9016:	dd11      	ble.n	b903c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9018:	00f0      	lsls	r0, r6, #3
   b901a:	f7ff f82f 	bl	b807c <malloc>
            if (!d) {
   b901e:	4604      	mov	r4, r0
   b9020:	b158      	cbz	r0, b903a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b9022:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9026:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b902a:	f7ff ffc7 	bl	b8fbc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b902e:	6828      	ldr	r0, [r5, #0]
   b9030:	f7ff f82c 	bl	b808c <free>
        data_ = d;
   b9034:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9036:	60ae      	str	r6, [r5, #8]
        return true;
   b9038:	2001      	movs	r0, #1
    }
   b903a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b903c:	2400      	movs	r4, #0
   b903e:	e7f6      	b.n	b902e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b9040 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9040:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9042:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b9044:	6845      	ldr	r5, [r0, #4]
   b9046:	4668      	mov	r0, sp
   b9048:	f7ff fc37 	bl	b88ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b904c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b9050:	4299      	cmp	r1, r3
   b9052:	da10      	bge.n	b9076 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b9054:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9056:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9058:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b905c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b9060:	4629      	mov	r1, r5
   b9062:	f105 0008 	add.w	r0, r5, #8
   b9066:	f7ff ffa9 	bl	b8fbc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b906a:	b98d      	cbnz	r5, b9090 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b906c:	6863      	ldr	r3, [r4, #4]
   b906e:	3301      	adds	r3, #1
   b9070:	6063      	str	r3, [r4, #4]
    return true;
   b9072:	2601      	movs	r6, #1
   b9074:	e006      	b.n	b9084 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9076:	3101      	adds	r1, #1
   b9078:	4620      	mov	r0, r4
   b907a:	f7ff ffc9 	bl	b9010 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b907e:	4606      	mov	r6, r0
   b9080:	2800      	cmp	r0, #0
   b9082:	d1e7      	bne.n	b9054 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b9084:	a801      	add	r0, sp, #4
   b9086:	f7ff fc2c 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b908a:	4630      	mov	r0, r6
   b908c:	b002      	add	sp, #8
   b908e:	bd70      	pop	{r4, r5, r6, pc}
   b9090:	4669      	mov	r1, sp
   b9092:	4628      	mov	r0, r5
   b9094:	f7ff fc11 	bl	b88ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9098:	e7e8      	b.n	b906c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b909a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b909a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b909c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b909e:	4604      	mov	r4, r0
   b90a0:	460d      	mov	r5, r1
   b90a2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b90a4:	d914      	bls.n	b90d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b90a6:	4290      	cmp	r0, r2
   b90a8:	d213      	bcs.n	b90d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b90aa:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b90ae:	1a75      	subs	r5, r6, r1
   b90b0:	f1a1 0708 	sub.w	r7, r1, #8
   b90b4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b90b6:	42b7      	cmp	r7, r6
   b90b8:	d018      	beq.n	b90ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b90ba:	b11c      	cbz	r4, b90c4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b90bc:	4631      	mov	r1, r6
   b90be:	4620      	mov	r0, r4
   b90c0:	f7ff fbed 	bl	b889e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b90c4:	1d30      	adds	r0, r6, #4
   b90c6:	f7ff fc0c 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b90ca:	3e08      	subs	r6, #8
   b90cc:	3c08      	subs	r4, #8
   b90ce:	e7f2      	b.n	b90b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b90d0:	d00c      	beq.n	b90ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b90d2:	42b5      	cmp	r5, r6
   b90d4:	d00a      	beq.n	b90ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b90d6:	b11c      	cbz	r4, b90e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b90d8:	4629      	mov	r1, r5
   b90da:	4620      	mov	r0, r4
   b90dc:	f7ff fbdf 	bl	b889e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b90e0:	1d28      	adds	r0, r5, #4
   b90e2:	f7ff fbfe 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b90e6:	3508      	adds	r5, #8
   b90e8:	3408      	adds	r4, #8
   b90ea:	e7f2      	b.n	b90d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b90ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b90ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b90ee:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b90f0:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b90f2:	4605      	mov	r5, r0
        if (n > 0) {
   b90f4:	dd11      	ble.n	b911a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b90f6:	00f0      	lsls	r0, r6, #3
   b90f8:	f7fe ffc0 	bl	b807c <malloc>
            if (!d) {
   b90fc:	4604      	mov	r4, r0
   b90fe:	b158      	cbz	r0, b9118 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b9100:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9104:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9108:	f7ff ffc7 	bl	b909a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b910c:	6828      	ldr	r0, [r5, #0]
   b910e:	f7fe ffbd 	bl	b808c <free>
        data_ = d;
   b9112:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9114:	60ae      	str	r6, [r5, #8]
        return true;
   b9116:	2001      	movs	r0, #1
    }
   b9118:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b911a:	2400      	movs	r4, #0
   b911c:	e7f6      	b.n	b910c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b911e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b911e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9120:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b9122:	6845      	ldr	r5, [r0, #4]
   b9124:	4668      	mov	r0, sp
   b9126:	f7ff fbba 	bl	b889e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b912a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b912e:	4299      	cmp	r1, r3
   b9130:	da10      	bge.n	b9154 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b9132:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9134:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9136:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b913a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b913e:	4629      	mov	r1, r5
   b9140:	f105 0008 	add.w	r0, r5, #8
   b9144:	f7ff ffa9 	bl	b909a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9148:	b98d      	cbnz	r5, b916e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b914a:	6863      	ldr	r3, [r4, #4]
   b914c:	3301      	adds	r3, #1
   b914e:	6063      	str	r3, [r4, #4]
    return true;
   b9150:	2601      	movs	r6, #1
   b9152:	e006      	b.n	b9162 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9154:	3101      	adds	r1, #1
   b9156:	4620      	mov	r0, r4
   b9158:	f7ff ffc9 	bl	b90ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b915c:	4606      	mov	r6, r0
   b915e:	2800      	cmp	r0, #0
   b9160:	d1e7      	bne.n	b9132 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b9162:	a801      	add	r0, sp, #4
   b9164:	f7ff fbbd 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9168:	4630      	mov	r0, r6
   b916a:	b002      	add	sp, #8
   b916c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b916e:	4669      	mov	r1, sp
   b9170:	4628      	mov	r0, r5
   b9172:	f7ff fb94 	bl	b889e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9176:	e7e8      	b.n	b914a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9178 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b917c:	4617      	mov	r7, r2
   b917e:	b0a1      	sub	sp, #132	; 0x84
   b9180:	4680      	mov	r8, r0
    WiringBleLock lk;
   b9182:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9184:	460e      	mov	r6, r1
    WiringBleLock lk;
   b9186:	f7ff f8a9 	bl	b82dc <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b918a:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b918c:	7923      	ldrb	r3, [r4, #4]
   b918e:	b953      	cbnz	r3, b91a6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b9190:	4639      	mov	r1, r7
   b9192:	4640      	mov	r0, r8
   b9194:	f7ff fb83 	bl	b889e <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b9198:	a80a      	add	r0, sp, #40	; 0x28
   b919a:	f7ff f8ad 	bl	b82f8 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b919e:	4640      	mov	r0, r8
   b91a0:	b021      	add	sp, #132	; 0x84
   b91a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b91a6:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b91a8:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b91ac:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b91b0:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b91b2:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b91b6:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b91ba:	9b03      	ldr	r3, [sp, #12]
   b91bc:	429d      	cmp	r5, r3
   b91be:	d021      	beq.n	b9204 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b91c0:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b91c4:	4658      	mov	r0, fp
   b91c6:	f109 0114 	add.w	r1, r9, #20
   b91ca:	f7ff f934 	bl	b8436 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b91ce:	b1b8      	cbz	r0, b9200 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b91d0:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b91d4:	4650      	mov	r0, sl
   b91d6:	f7ff f92e 	bl	b8436 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b91da:	b188      	cbz	r0, b9200 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b91dc:	6823      	ldr	r3, [r4, #0]
   b91de:	f8d9 2000 	ldr.w	r2, [r9]
   b91e2:	4053      	eors	r3, r2
   b91e4:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b91e8:	d10a      	bne.n	b9200 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b91ea:	2220      	movs	r2, #32
   b91ec:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b91f0:	4a5e      	ldr	r2, [pc, #376]	; (b936c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b91f2:	9200      	str	r2, [sp, #0]
   b91f4:	aa15      	add	r2, sp, #84	; 0x54
   b91f6:	495e      	ldr	r1, [pc, #376]	; (b9370 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b91f8:	2032      	movs	r0, #50	; 0x32
   b91fa:	f7fe fe93 	bl	b7f24 <log_message>
   b91fe:	e7c7      	b.n	b9190 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b9200:	3508      	adds	r5, #8
   b9202:	e7da      	b.n	b91ba <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b9204:	4650      	mov	r0, sl
   b9206:	f7ff f8e7 	bl	b83d8 <_ZNK8particle7BleUuid7isValidEv>
   b920a:	b960      	cbnz	r0, b9226 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b920c:	4959      	ldr	r1, [pc, #356]	; (b9374 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b920e:	2201      	movs	r2, #1
   b9210:	a815      	add	r0, sp, #84	; 0x54
   b9212:	ad15      	add	r5, sp, #84	; 0x54
   b9214:	f7ff f8b8 	bl	b8388 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b9218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b921a:	46d4      	mov	ip, sl
   b921c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b9220:	682b      	ldr	r3, [r5, #0]
   b9222:	f8cc 3000 	str.w	r3, [ip]
   b9226:	6833      	ldr	r3, [r6, #0]
   b9228:	e9d3 5300 	ldrd	r5, r3, [r3]
   b922c:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b9230:	455d      	cmp	r5, fp
   b9232:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b9234:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b9236:	d06e      	beq.n	b9316 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b9238:	f855 0b08 	ldr.w	r0, [r5], #8
   b923c:	f7ff f8fb 	bl	b8436 <_ZNK8particle7BleUuideqERKS0_>
   b9240:	2800      	cmp	r0, #0
   b9242:	d0f5      	beq.n	b9230 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b9244:	f104 0a14 	add.w	sl, r4, #20
   b9248:	4650      	mov	r0, sl
   b924a:	f7ff f8c5 	bl	b83d8 <_ZNK8particle7BleUuid7isValidEv>
   b924e:	b988      	cbnz	r0, b9274 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b9250:	4b49      	ldr	r3, [pc, #292]	; (b9378 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9252:	4948      	ldr	r1, [pc, #288]	; (b9374 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b9254:	881a      	ldrh	r2, [r3, #0]
   b9256:	3201      	adds	r2, #1
   b9258:	b292      	uxth	r2, r2
   b925a:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b925c:	a815      	add	r0, sp, #84	; 0x54
   b925e:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b9260:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9262:	f7ff f8b0 	bl	b83c6 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b9266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9268:	46d4      	mov	ip, sl
   b926a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b926e:	682b      	ldr	r3, [r5, #0]
   b9270:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b9274:	4b41      	ldr	r3, [pc, #260]	; (b937c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b9276:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b9278:	2228      	movs	r2, #40	; 0x28
   b927a:	2100      	movs	r1, #0
   b927c:	a816      	add	r0, sp, #88	; 0x58
   b927e:	f002 fa03 	bl	bb688 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b9282:	4651      	mov	r1, sl
   b9284:	a804      	add	r0, sp, #16
   b9286:	f7ff f8b9 	bl	b83fc <_ZN8particle7BleUuid7halUUIDEv>
   b928a:	ab04      	add	r3, sp, #16
   b928c:	aa18      	add	r2, sp, #96	; 0x60
   b928e:	f10d 0c20 	add.w	ip, sp, #32
   b9292:	6818      	ldr	r0, [r3, #0]
   b9294:	6859      	ldr	r1, [r3, #4]
   b9296:	4615      	mov	r5, r2
   b9298:	c503      	stmia	r5!, {r0, r1}
   b929a:	3308      	adds	r3, #8
   b929c:	4563      	cmp	r3, ip
   b929e:	462a      	mov	r2, r5
   b92a0:	d1f7      	bne.n	b9292 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b92a2:	6818      	ldr	r0, [r3, #0]
   b92a4:	6028      	str	r0, [r5, #0]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   b92a6:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b92a8:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b92ac:	f8d9 3000 	ldr.w	r3, [r9]
   b92b0:	8a9b      	ldrh	r3, [r3, #20]
   b92b2:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b92b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b92b8:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b92ba:	4b31      	ldr	r3, [pc, #196]	; (b9380 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b92bc:	2200      	movs	r2, #0
   b92be:	1da1      	adds	r1, r4, #6
   b92c0:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b92c2:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b92c6:	f7fe fcc1 	bl	b7c4c <hal_ble_gatt_server_add_characteristic>
   b92ca:	2800      	cmp	r0, #0
   b92cc:	f47f af60 	bne.w	b9190 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b92d0:	2301      	movs	r3, #1
   b92d2:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b92d4:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b92d6:	4639      	mov	r1, r7
        return characteristics_;
   b92d8:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b92da:	a80d      	add	r0, sp, #52	; 0x34
   b92dc:	f7ff fadf 	bl	b889e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b92e0:	4620      	mov	r0, r4
   b92e2:	a90d      	add	r1, sp, #52	; 0x34
   b92e4:	f7ff ff1b 	bl	b911e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b92e8:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b92ea:	a80e      	add	r0, sp, #56	; 0x38
   b92ec:	f7ff faf9 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b92f0:	2c00      	cmp	r4, #0
   b92f2:	f47f af4d 	bne.w	b9190 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b92f6:	2320      	movs	r3, #32
   b92f8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b92fc:	4b21      	ldr	r3, [pc, #132]	; (b9384 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b92fe:	9300      	str	r3, [sp, #0]
   b9300:	aa0d      	add	r2, sp, #52	; 0x34
   b9302:	4623      	mov	r3, r4
   b9304:	e777      	b.n	b91f6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b9306:	4639      	mov	r1, r7
   b9308:	4640      	mov	r0, r8
   b930a:	f7ff fac8 	bl	b889e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b930e:	a80c      	add	r0, sp, #48	; 0x30
   b9310:	f7ff fae7 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9314:	e740      	b.n	b9198 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b9316:	a80b      	add	r0, sp, #44	; 0x2c
   b9318:	f7ff f94a 	bl	b85b0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b931c:	4651      	mov	r1, sl
   b931e:	a815      	add	r0, sp, #84	; 0x54
   b9320:	f7ff f86c 	bl	b83fc <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b9324:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9326:	2300      	movs	r3, #0
   b9328:	3214      	adds	r2, #20
   b932a:	a915      	add	r1, sp, #84	; 0x54
   b932c:	2001      	movs	r0, #1
   b932e:	f7fe fc83 	bl	b7c38 <hal_ble_gatt_server_add_service>
   b9332:	2800      	cmp	r0, #0
   b9334:	d1e7      	bne.n	b9306 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b9336:	6835      	ldr	r5, [r6, #0]
   b9338:	a90b      	add	r1, sp, #44	; 0x2c
   b933a:	a80d      	add	r0, sp, #52	; 0x34
   b933c:	f7ff fabd 	bl	b88ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b9340:	4628      	mov	r0, r5
   b9342:	a90d      	add	r1, sp, #52	; 0x34
   b9344:	f7ff fe7c 	bl	b9040 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b9348:	4605      	mov	r5, r0
   b934a:	a80e      	add	r0, sp, #56	; 0x38
   b934c:	f7ff fac9 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9350:	2d00      	cmp	r5, #0
   b9352:	d0d8      	beq.n	b9306 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b9354:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b9356:	6853      	ldr	r3, [r2, #4]
   b9358:	6812      	ldr	r2, [r2, #0]
   b935a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b935e:	3b01      	subs	r3, #1
   b9360:	a80c      	add	r0, sp, #48	; 0x30
   b9362:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b9366:	f7ff fabc 	bl	b88e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b936a:	e76b      	b.n	b9244 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b936c:	000bdcf2 	.word	0x000bdcf2
   b9370:	000bdc0f 	.word	0x000bdc0f
   b9374:	000bddb6 	.word	0x000bddb6
   b9378:	2003e6bc 	.word	0x2003e6bc
   b937c:	002c0003 	.word	0x002c0003
   b9380:	000b8749 	.word	0x000b8749
   b9384:	000bdd1d 	.word	0x000bdd1d

000b9388 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b9388:	4802      	ldr	r0, [pc, #8]	; (b9394 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b938a:	2300      	movs	r3, #0
   b938c:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b938e:	f7fe bc71 	b.w	b7c74 <os_mutex_recursive_create>
   b9392:	bf00      	nop
   b9394:	2003e6c0 	.word	0x2003e6c0

000b9398 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9398:	2200      	movs	r2, #0
   b939a:	6840      	ldr	r0, [r0, #4]
   b939c:	4611      	mov	r1, r2
   b939e:	f7fe be2d 	b.w	b7ffc <network_listening>

000b93a2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b93a2:	2200      	movs	r2, #0
   b93a4:	6840      	ldr	r0, [r0, #4]
   b93a6:	4611      	mov	r1, r2
   b93a8:	f7fe be50 	b.w	b804c <network_get_listen_timeout>

000b93ac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b93ac:	6840      	ldr	r0, [r0, #4]
   b93ae:	2200      	movs	r2, #0
   b93b0:	f7fe be44 	b.w	b803c <network_set_listen_timeout>

000b93b4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b93b4:	6840      	ldr	r0, [r0, #4]
   b93b6:	2200      	movs	r2, #0
   b93b8:	f081 0101 	eor.w	r1, r1, #1
   b93bc:	f7fe be16 	b.w	b7fec <network_listen>

000b93c0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b93c0:	2300      	movs	r3, #0
   b93c2:	6840      	ldr	r0, [r0, #4]
   b93c4:	461a      	mov	r2, r3
   b93c6:	4619      	mov	r1, r3
   b93c8:	f7fe be08 	b.w	b7fdc <network_off>

000b93cc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b93cc:	2300      	movs	r3, #0
   b93ce:	6840      	ldr	r0, [r0, #4]
   b93d0:	461a      	mov	r2, r3
   b93d2:	4619      	mov	r1, r3
   b93d4:	f7fe bdfa 	b.w	b7fcc <network_on>

000b93d8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b93d8:	2200      	movs	r2, #0
   b93da:	6840      	ldr	r0, [r0, #4]
   b93dc:	4611      	mov	r1, r2
   b93de:	f7fe bded 	b.w	b7fbc <network_ready>

000b93e2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b93e2:	2200      	movs	r2, #0
   b93e4:	6840      	ldr	r0, [r0, #4]
   b93e6:	4611      	mov	r1, r2
   b93e8:	f7fe bdd8 	b.w	b7f9c <network_connecting>

000b93ec <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b93ec:	6840      	ldr	r0, [r0, #4]
   b93ee:	2200      	movs	r2, #0
   b93f0:	2102      	movs	r1, #2
   b93f2:	f7fe bddb 	b.w	b7fac <network_disconnect>

000b93f6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b93f6:	2300      	movs	r3, #0
   b93f8:	6840      	ldr	r0, [r0, #4]
   b93fa:	461a      	mov	r2, r3
   b93fc:	f7fe bdc6 	b.w	b7f8c <network_connect>

000b9400 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b9400:	4b02      	ldr	r3, [pc, #8]	; (b940c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b9402:	2203      	movs	r2, #3
   b9404:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b9406:	4a02      	ldr	r2, [pc, #8]	; (b9410 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b9408:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b940a:	4770      	bx	lr
   b940c:	2003e6c8 	.word	0x2003e6c8
   b9410:	000bdde0 	.word	0x000bdde0

000b9414 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9414:	4770      	bx	lr

000b9416 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9418:	4606      	mov	r6, r0
   b941a:	4615      	mov	r5, r2
   b941c:	460c      	mov	r4, r1
   b941e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b9420:	42bc      	cmp	r4, r7
   b9422:	d006      	beq.n	b9432 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9424:	6833      	ldr	r3, [r6, #0]
   b9426:	f814 1b01 	ldrb.w	r1, [r4], #1
   b942a:	689b      	ldr	r3, [r3, #8]
   b942c:	4630      	mov	r0, r6
   b942e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b9430:	e7f6      	b.n	b9420 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b9432:	4628      	mov	r0, r5
   b9434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9436 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b9436:	7c00      	ldrb	r0, [r0, #16]
   b9438:	2200      	movs	r2, #0
   b943a:	f7fe bc63 	b.w	b7d04 <hal_i2c_write>

000b943e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b943e:	7c00      	ldrb	r0, [r0, #16]
   b9440:	2100      	movs	r1, #0
   b9442:	f7fe bc67 	b.w	b7d14 <hal_i2c_available>

000b9446 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b9446:	7c00      	ldrb	r0, [r0, #16]
   b9448:	2100      	movs	r1, #0
   b944a:	f7fe bc6b 	b.w	b7d24 <hal_i2c_read>

000b944e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b944e:	7c00      	ldrb	r0, [r0, #16]
   b9450:	2100      	movs	r1, #0
   b9452:	f7fe bc6f 	b.w	b7d34 <hal_i2c_peek>

000b9456 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b9456:	7c00      	ldrb	r0, [r0, #16]
   b9458:	2100      	movs	r1, #0
   b945a:	f7fe bc73 	b.w	b7d44 <hal_i2c_flush>

000b945e <_ZN7TwoWireD0Ev>:
   b945e:	b510      	push	{r4, lr}
   b9460:	2114      	movs	r1, #20
   b9462:	4604      	mov	r4, r0
   b9464:	f7fa fe1d 	bl	b40a2 <_ZdlPvj>
   b9468:	4620      	mov	r0, r4
   b946a:	bd10      	pop	{r4, pc}

000b946c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b946c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b946e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9472:	4604      	mov	r4, r0
   b9474:	4608      	mov	r0, r1
   b9476:	2100      	movs	r1, #0
   b9478:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b947c:	4b03      	ldr	r3, [pc, #12]	; (b948c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b947e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b9480:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b9482:	4611      	mov	r1, r2
   b9484:	f7fe fc66 	bl	b7d54 <hal_i2c_init>
}
   b9488:	4620      	mov	r0, r4
   b948a:	bd10      	pop	{r4, pc}
   b948c:	000bde1c 	.word	0x000bde1c

000b9490 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b9490:	2300      	movs	r3, #0
   b9492:	7c00      	ldrb	r0, [r0, #16]
   b9494:	461a      	mov	r2, r3
   b9496:	4619      	mov	r1, r3
   b9498:	f7fe bc1c 	b.w	b7cd4 <hal_i2c_begin>

000b949c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b949c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b949e:	2200      	movs	r2, #0
   b94a0:	2314      	movs	r3, #20
   b94a2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b94a6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b94aa:	780b      	ldrb	r3, [r1, #0]
   b94ac:	f88d 3008 	strb.w	r3, [sp, #8]
   b94b0:	684b      	ldr	r3, [r1, #4]
   b94b2:	9303      	str	r3, [sp, #12]
   b94b4:	68cb      	ldr	r3, [r1, #12]
   b94b6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b94b8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b94ba:	7a0b      	ldrb	r3, [r1, #8]
   b94bc:	9305      	str	r3, [sp, #20]
   b94be:	a901      	add	r1, sp, #4
   b94c0:	f7fe fc50 	bl	b7d64 <hal_i2c_request_ex>
}
   b94c4:	b007      	add	sp, #28
   b94c6:	f85d fb04 	ldr.w	pc, [sp], #4

000b94ca <_ZN7TwoWire11requestFromEhjh>:
{
   b94ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b94cc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b94ce:	f88d 1000 	strb.w	r1, [sp]
   b94d2:	f04f 0164 	mov.w	r1, #100	; 0x64
   b94d6:	9103      	str	r1, [sp, #12]
   b94d8:	bf18      	it	ne
   b94da:	2301      	movne	r3, #1
   b94dc:	4669      	mov	r1, sp
    size_ = size;
   b94de:	9201      	str	r2, [sp, #4]
   b94e0:	f88d 3008 	strb.w	r3, [sp, #8]
   b94e4:	f7ff ffda 	bl	b949c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b94e8:	b005      	add	sp, #20
   b94ea:	f85d fb04 	ldr.w	pc, [sp], #4

000b94ee <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b94ee:	2301      	movs	r3, #1
   b94f0:	f7ff bfeb 	b.w	b94ca <_ZN7TwoWire11requestFromEhjh>

000b94f4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b94f4:	7c00      	ldrb	r0, [r0, #16]
   b94f6:	2200      	movs	r2, #0
   b94f8:	f7fe bbf4 	b.w	b7ce4 <hal_i2c_begin_transmission>

000b94fc <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b94fc:	b2c9      	uxtb	r1, r1
   b94fe:	f7ff bff9 	b.w	b94f4 <_ZN7TwoWire17beginTransmissionEh>

000b9502 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b9502:	7c00      	ldrb	r0, [r0, #16]
   b9504:	2200      	movs	r2, #0
   b9506:	f7fe bbf5 	b.w	b7cf4 <hal_i2c_end_transmission>

000b950a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b950a:	2101      	movs	r1, #1
   b950c:	f7ff bff9 	b.w	b9502 <_ZN7TwoWire15endTransmissionEh>

000b9510 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b9510:	4770      	bx	lr

000b9512 <_ZN9IPAddressD0Ev>:
   b9512:	b510      	push	{r4, lr}
   b9514:	2118      	movs	r1, #24
   b9516:	4604      	mov	r4, r0
   b9518:	f7fa fdc3 	bl	b40a2 <_ZdlPvj>
   b951c:	4620      	mov	r0, r4
   b951e:	bd10      	pop	{r4, pc}

000b9520 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b9520:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b9522:	7d03      	ldrb	r3, [r0, #20]
   b9524:	2b06      	cmp	r3, #6
{
   b9526:	b08d      	sub	sp, #52	; 0x34
   b9528:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b952a:	f100 0704 	add.w	r7, r0, #4
   b952e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b9532:	d012      	beq.n	b955a <_ZNK9IPAddress7printToER5Print+0x3a>
   b9534:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b9538:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b953c:	220a      	movs	r2, #10
   b953e:	4630      	mov	r0, r6
   b9540:	f000 f973 	bl	b982a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b9544:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b9546:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b9548:	d019      	beq.n	b957e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b954a:	2c00      	cmp	r4, #0
   b954c:	d0f4      	beq.n	b9538 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b954e:	212e      	movs	r1, #46	; 0x2e
   b9550:	4630      	mov	r0, r6
   b9552:	f000 f951 	bl	b97f8 <_ZN5Print5printEc>
   b9556:	4404      	add	r4, r0
   b9558:	e7ee      	b.n	b9538 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b955a:	232f      	movs	r3, #47	; 0x2f
   b955c:	466a      	mov	r2, sp
   b955e:	4639      	mov	r1, r7
   b9560:	200a      	movs	r0, #10
		buf[0] = 0;
   b9562:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9566:	f7fe fc0d 	bl	b7d84 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b956a:	4668      	mov	r0, sp
   b956c:	f002 f8d4 	bl	bb718 <strlen>
   b9570:	6833      	ldr	r3, [r6, #0]
   b9572:	4602      	mov	r2, r0
   b9574:	68db      	ldr	r3, [r3, #12]
   b9576:	4669      	mov	r1, sp
   b9578:	4630      	mov	r0, r6
   b957a:	4798      	blx	r3
   b957c:	4604      	mov	r4, r0
    }
    return n;
}
   b957e:	4620      	mov	r0, r4
   b9580:	b00d      	add	sp, #52	; 0x34
   b9582:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9584 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b9584:	b510      	push	{r4, lr}
   b9586:	4b05      	ldr	r3, [pc, #20]	; (b959c <_ZN9IPAddressC1Ev+0x18>)
   b9588:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b958a:	2211      	movs	r2, #17
   b958c:	f840 3b04 	str.w	r3, [r0], #4
   b9590:	2100      	movs	r1, #0
   b9592:	f002 f879 	bl	bb688 <memset>
}
   b9596:	4620      	mov	r0, r4
   b9598:	bd10      	pop	{r4, pc}
   b959a:	bf00      	nop
   b959c:	000bde44 	.word	0x000bde44

000b95a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b95a0:	4603      	mov	r3, r0
   b95a2:	4a07      	ldr	r2, [pc, #28]	; (b95c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b95a4:	b510      	push	{r4, lr}
   b95a6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b95aa:	f101 0210 	add.w	r2, r1, #16
   b95ae:	f851 4b04 	ldr.w	r4, [r1], #4
   b95b2:	f843 4b04 	str.w	r4, [r3], #4
   b95b6:	4291      	cmp	r1, r2
   b95b8:	d1f9      	bne.n	b95ae <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b95ba:	780a      	ldrb	r2, [r1, #0]
   b95bc:	701a      	strb	r2, [r3, #0]
}
   b95be:	bd10      	pop	{r4, pc}
   b95c0:	000bde44 	.word	0x000bde44

000b95c4 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b95c4:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b95c6:	2b04      	cmp	r3, #4
   b95c8:	d104      	bne.n	b95d4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b95ca:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b95cc:	3800      	subs	r0, #0
   b95ce:	bf18      	it	ne
   b95d0:	2001      	movne	r0, #1
   b95d2:	4770      	bx	lr
    } else if (version() == 6) {
   b95d4:	2b06      	cmp	r3, #6
   b95d6:	d107      	bne.n	b95e8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b95d8:	6843      	ldr	r3, [r0, #4]
   b95da:	b93b      	cbnz	r3, b95ec <_ZNK9IPAddresscvbEv+0x28>
   b95dc:	6883      	ldr	r3, [r0, #8]
   b95de:	b92b      	cbnz	r3, b95ec <_ZNK9IPAddresscvbEv+0x28>
   b95e0:	68c3      	ldr	r3, [r0, #12]
   b95e2:	b91b      	cbnz	r3, b95ec <_ZNK9IPAddresscvbEv+0x28>
   b95e4:	6900      	ldr	r0, [r0, #16]
   b95e6:	e7f1      	b.n	b95cc <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b95e8:	2000      	movs	r0, #0
   b95ea:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b95ec:	2001      	movs	r0, #1
}
   b95ee:	4770      	bx	lr

000b95f0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b95f0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b95f2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b95f6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b95fa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b95fe:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b9602:	2304      	movs	r3, #4
   b9604:	6041      	str	r1, [r0, #4]
   b9606:	7503      	strb	r3, [r0, #20]
}
   b9608:	bd10      	pop	{r4, pc}
	...

000b960c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b960c:	b507      	push	{r0, r1, r2, lr}
   b960e:	4b06      	ldr	r3, [pc, #24]	; (b9628 <_ZN9IPAddressC1EPKh+0x1c>)
   b9610:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b9612:	78cb      	ldrb	r3, [r1, #3]
   b9614:	9300      	str	r3, [sp, #0]
   b9616:	788b      	ldrb	r3, [r1, #2]
   b9618:	784a      	ldrb	r2, [r1, #1]
   b961a:	7809      	ldrb	r1, [r1, #0]
   b961c:	f7ff ffe8 	bl	b95f0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b9620:	b003      	add	sp, #12
   b9622:	f85d fb04 	ldr.w	pc, [sp], #4
   b9626:	bf00      	nop
   b9628:	000bde44 	.word	0x000bde44

000b962c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b962c:	4b01      	ldr	r3, [pc, #4]	; (b9634 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b962e:	4a02      	ldr	r2, [pc, #8]	; (b9638 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b9630:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b9632:	4770      	bx	lr
   b9634:	2003e6d0 	.word	0x2003e6d0
   b9638:	000bde50 	.word	0x000bde50

000b963c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b963c:	2300      	movs	r3, #0
   b963e:	6840      	ldr	r0, [r0, #4]
   b9640:	461a      	mov	r2, r3
   b9642:	f7fe bca3 	b.w	b7f8c <network_connect>

000b9646 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b9646:	6840      	ldr	r0, [r0, #4]
   b9648:	2200      	movs	r2, #0
   b964a:	2102      	movs	r1, #2
   b964c:	f7fe bcae 	b.w	b7fac <network_disconnect>

000b9650 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b9650:	2200      	movs	r2, #0
   b9652:	6840      	ldr	r0, [r0, #4]
   b9654:	4611      	mov	r1, r2
   b9656:	f7fe bca1 	b.w	b7f9c <network_connecting>

000b965a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b965a:	2200      	movs	r2, #0
   b965c:	6840      	ldr	r0, [r0, #4]
   b965e:	4611      	mov	r1, r2
   b9660:	f7fe bcac 	b.w	b7fbc <network_ready>

000b9664 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b9664:	2300      	movs	r3, #0
   b9666:	6840      	ldr	r0, [r0, #4]
   b9668:	461a      	mov	r2, r3
   b966a:	4619      	mov	r1, r3
   b966c:	f7fe bcae 	b.w	b7fcc <network_on>

000b9670 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b9670:	2300      	movs	r3, #0
   b9672:	6840      	ldr	r0, [r0, #4]
   b9674:	461a      	mov	r2, r3
   b9676:	4619      	mov	r1, r3
   b9678:	f7fe bcb0 	b.w	b7fdc <network_off>

000b967c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b967c:	6840      	ldr	r0, [r0, #4]
   b967e:	2100      	movs	r1, #0
   b9680:	f7fe bcec 	b.w	b805c <network_is_on>

000b9684 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b9684:	6840      	ldr	r0, [r0, #4]
   b9686:	2100      	movs	r1, #0
   b9688:	f7fe bcf0 	b.w	b806c <network_is_off>

000b968c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b968c:	6840      	ldr	r0, [r0, #4]
   b968e:	2200      	movs	r2, #0
   b9690:	f081 0101 	eor.w	r1, r1, #1
   b9694:	f7fe bcaa 	b.w	b7fec <network_listen>

000b9698 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9698:	6840      	ldr	r0, [r0, #4]
   b969a:	2200      	movs	r2, #0
   b969c:	f7fe bcce 	b.w	b803c <network_set_listen_timeout>

000b96a0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b96a0:	2200      	movs	r2, #0
   b96a2:	6840      	ldr	r0, [r0, #4]
   b96a4:	4611      	mov	r1, r2
   b96a6:	f7fe bcd1 	b.w	b804c <network_get_listen_timeout>

000b96aa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b96aa:	2200      	movs	r2, #0
   b96ac:	6840      	ldr	r0, [r0, #4]
   b96ae:	4611      	mov	r1, r2
   b96b0:	f7fe bca4 	b.w	b7ffc <network_listening>

000b96b4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b96b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b96b8:	b095      	sub	sp, #84	; 0x54
   b96ba:	4614      	mov	r4, r2
   b96bc:	460d      	mov	r5, r1
   b96be:	4607      	mov	r7, r0
    IPAddress addr;
   b96c0:	f7ff ff60 	bl	b9584 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b96c4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b96c6:	221c      	movs	r2, #28
   b96c8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b96ca:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b96cc:	f001 ffdc 	bl	bb688 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b96d0:	2340      	movs	r3, #64	; 0x40
   b96d2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b96d4:	4620      	mov	r0, r4
   b96d6:	466b      	mov	r3, sp
   b96d8:	aa0c      	add	r2, sp, #48	; 0x30
   b96da:	2100      	movs	r1, #0
   b96dc:	f7fe fb72 	bl	b7dc4 <netdb_getaddrinfo>
    if (!r) {
   b96e0:	4604      	mov	r4, r0
   b96e2:	2800      	cmp	r0, #0
   b96e4:	d14b      	bne.n	b977e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b96e6:	4602      	mov	r2, r0
   b96e8:	2101      	movs	r1, #1
   b96ea:	6868      	ldr	r0, [r5, #4]
   b96ec:	f7fe fc66 	bl	b7fbc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b96f0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b96f2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b96f4:	4622      	mov	r2, r4
   b96f6:	6868      	ldr	r0, [r5, #4]
   b96f8:	f7fe fc60 	bl	b7fbc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b96fc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b96fe:	4681      	mov	r9, r0
        bool ok = false;
   b9700:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9702:	2e00      	cmp	r6, #0
   b9704:	d03b      	beq.n	b977e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b9706:	2900      	cmp	r1, #0
   b9708:	d139      	bne.n	b977e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b970a:	6873      	ldr	r3, [r6, #4]
   b970c:	2b02      	cmp	r3, #2
   b970e:	d003      	beq.n	b9718 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b9710:	2b0a      	cmp	r3, #10
   b9712:	d011      	beq.n	b9738 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9714:	69f6      	ldr	r6, [r6, #28]
   b9716:	e7f4      	b.n	b9702 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b9718:	f1b8 0f00 	cmp.w	r8, #0
   b971c:	d0fa      	beq.n	b9714 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b971e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b9720:	a806      	add	r0, sp, #24
   b9722:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b9724:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b9726:	f7ff ff71 	bl	b960c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b972a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b972c:	1d3c      	adds	r4, r7, #4
   b972e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9730:	682b      	ldr	r3, [r5, #0]
   b9732:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9734:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b9736:	e7ed      	b.n	b9714 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b9738:	f1b9 0f00 	cmp.w	r9, #0
   b973c:	d0ea      	beq.n	b9714 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b973e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b9740:	2210      	movs	r2, #16
   b9742:	a801      	add	r0, sp, #4
   b9744:	f001 ffa0 	bl	bb688 <memset>
                    a.v = 6;
   b9748:	2306      	movs	r3, #6
   b974a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b974e:	ad01      	add	r5, sp, #4
   b9750:	f104 0308 	add.w	r3, r4, #8
   b9754:	3418      	adds	r4, #24
   b9756:	6818      	ldr	r0, [r3, #0]
   b9758:	6859      	ldr	r1, [r3, #4]
   b975a:	462a      	mov	r2, r5
   b975c:	c203      	stmia	r2!, {r0, r1}
   b975e:	3308      	adds	r3, #8
   b9760:	42a3      	cmp	r3, r4
   b9762:	4615      	mov	r5, r2
   b9764:	d1f7      	bne.n	b9756 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b9766:	a901      	add	r1, sp, #4
   b9768:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b976a:	ad07      	add	r5, sp, #28
   b976c:	f7ff ff18 	bl	b95a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9772:	1d3c      	adds	r4, r7, #4
   b9774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9776:	682b      	ldr	r3, [r5, #0]
   b9778:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b977a:	4649      	mov	r1, r9
   b977c:	e7ca      	b.n	b9714 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b977e:	9800      	ldr	r0, [sp, #0]
   b9780:	f7fe fb18 	bl	b7db4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b9784:	4638      	mov	r0, r7
   b9786:	b015      	add	sp, #84	; 0x54
   b9788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b978c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b978c:	4b02      	ldr	r3, [pc, #8]	; (b9798 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b978e:	4a03      	ldr	r2, [pc, #12]	; (b979c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b9790:	601a      	str	r2, [r3, #0]
   b9792:	2200      	movs	r2, #0
   b9794:	605a      	str	r2, [r3, #4]

} // spark
   b9796:	4770      	bx	lr
   b9798:	2003e6d4 	.word	0x2003e6d4
   b979c:	000bde5c 	.word	0x000bde5c

000b97a0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b97a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b97a2:	4606      	mov	r6, r0
   b97a4:	460d      	mov	r5, r1
  size_t n = 0;
   b97a6:	188f      	adds	r7, r1, r2
   b97a8:	2400      	movs	r4, #0
  while (size--) {
   b97aa:	42bd      	cmp	r5, r7
   b97ac:	d00c      	beq.n	b97c8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b97ae:	6833      	ldr	r3, [r6, #0]
   b97b0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b97b4:	689b      	ldr	r3, [r3, #8]
   b97b6:	4630      	mov	r0, r6
   b97b8:	4798      	blx	r3
     if (chunk>=0)
   b97ba:	1e03      	subs	r3, r0, #0
   b97bc:	db01      	blt.n	b97c2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b97be:	441c      	add	r4, r3
  while (size--) {
   b97c0:	e7f3      	b.n	b97aa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b97c2:	2c00      	cmp	r4, #0
   b97c4:	bf08      	it	eq
   b97c6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b97c8:	4620      	mov	r0, r4
   b97ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b97cc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b97cc:	b513      	push	{r0, r1, r4, lr}
   b97ce:	4604      	mov	r4, r0
    }
   b97d0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b97d2:	b159      	cbz	r1, b97ec <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b97d4:	9101      	str	r1, [sp, #4]
   b97d6:	f001 ff9f 	bl	bb718 <strlen>
   b97da:	6823      	ldr	r3, [r4, #0]
   b97dc:	9901      	ldr	r1, [sp, #4]
   b97de:	68db      	ldr	r3, [r3, #12]
   b97e0:	4602      	mov	r2, r0
   b97e2:	4620      	mov	r0, r4
    }
   b97e4:	b002      	add	sp, #8
   b97e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b97ea:	4718      	bx	r3
    }
   b97ec:	b002      	add	sp, #8
   b97ee:	bd10      	pop	{r4, pc}

000b97f0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b97f0:	b508      	push	{r3, lr}
  return write(str);
   b97f2:	f7ff ffeb 	bl	b97cc <_ZN5Print5writeEPKc>
}
   b97f6:	bd08      	pop	{r3, pc}

000b97f8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b97f8:	6803      	ldr	r3, [r0, #0]
   b97fa:	689b      	ldr	r3, [r3, #8]
   b97fc:	4718      	bx	r3

000b97fe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b97fe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b9800:	210d      	movs	r1, #13
{
   b9802:	4605      	mov	r5, r0
  size_t n = print('\r');
   b9804:	f7ff fff8 	bl	b97f8 <_ZN5Print5printEc>
  n += print('\n');
   b9808:	210a      	movs	r1, #10
  size_t n = print('\r');
   b980a:	4604      	mov	r4, r0
  n += print('\n');
   b980c:	4628      	mov	r0, r5
   b980e:	f7ff fff3 	bl	b97f8 <_ZN5Print5printEc>
  return n;
}
   b9812:	4420      	add	r0, r4
   b9814:	bd38      	pop	{r3, r4, r5, pc}

000b9816 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b9816:	b538      	push	{r3, r4, r5, lr}
   b9818:	4605      	mov	r5, r0
  return write(str);
   b981a:	f7ff ffd7 	bl	b97cc <_ZN5Print5writeEPKc>
   b981e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b9820:	4628      	mov	r0, r5
   b9822:	f7ff ffec 	bl	b97fe <_ZN5Print7printlnEv>
  return n;
}
   b9826:	4420      	add	r0, r4
   b9828:	bd38      	pop	{r3, r4, r5, pc}

000b982a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b982a:	b530      	push	{r4, r5, lr}
   b982c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b982e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b9830:	2a01      	cmp	r2, #1
  *str = '\0';
   b9832:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b9836:	bf98      	it	ls
   b9838:	220a      	movls	r2, #10
   b983a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b983c:	460d      	mov	r5, r1
   b983e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b9842:	fb01 5312 	mls	r3, r1, r2, r5
   b9846:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b984a:	2b09      	cmp	r3, #9
   b984c:	bf94      	ite	ls
   b984e:	3330      	addls	r3, #48	; 0x30
   b9850:	3337      	addhi	r3, #55	; 0x37
   b9852:	b2db      	uxtb	r3, r3
  } while(n);
   b9854:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9856:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b985a:	d9ef      	bls.n	b983c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b985c:	4621      	mov	r1, r4
   b985e:	f7ff ffb5 	bl	b97cc <_ZN5Print5writeEPKc>
}
   b9862:	b00b      	add	sp, #44	; 0x2c
   b9864:	bd30      	pop	{r4, r5, pc}

000b9866 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b9866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b986a:	b086      	sub	sp, #24
   b986c:	af00      	add	r7, sp, #0
   b986e:	4605      	mov	r5, r0
   b9870:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b9872:	1d38      	adds	r0, r7, #4
   b9874:	2114      	movs	r1, #20
{
   b9876:	4614      	mov	r4, r2
    va_copy(args2, args);
   b9878:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b987a:	f7fe fc1f 	bl	b80bc <vsnprintf>

    if (n<bufsize)
   b987e:	2813      	cmp	r0, #19
   b9880:	d80e      	bhi.n	b98a0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b9882:	1d39      	adds	r1, r7, #4
   b9884:	4628      	mov	r0, r5
   b9886:	f7ff ffa1 	bl	b97cc <_ZN5Print5writeEPKc>
   b988a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b988c:	b11e      	cbz	r6, b9896 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b988e:	4628      	mov	r0, r5
   b9890:	f7ff ffb5 	bl	b97fe <_ZN5Print7printlnEv>
   b9894:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b9896:	4620      	mov	r0, r4
   b9898:	3718      	adds	r7, #24
   b989a:	46bd      	mov	sp, r7
   b989c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b98a0:	f100 0308 	add.w	r3, r0, #8
   b98a4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b98a8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b98aa:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b98ae:	4622      	mov	r2, r4
   b98b0:	1c41      	adds	r1, r0, #1
   b98b2:	683b      	ldr	r3, [r7, #0]
   b98b4:	4668      	mov	r0, sp
   b98b6:	f7fe fc01 	bl	b80bc <vsnprintf>
  return write(str);
   b98ba:	4669      	mov	r1, sp
   b98bc:	4628      	mov	r0, r5
   b98be:	f7ff ff85 	bl	b97cc <_ZN5Print5writeEPKc>
   b98c2:	4604      	mov	r4, r0
   b98c4:	46c5      	mov	sp, r8
   b98c6:	e7e1      	b.n	b988c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b98c8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b98c8:	4b01      	ldr	r3, [pc, #4]	; (b98d0 <_GLOBAL__sub_I_RGB+0x8>)
   b98ca:	2200      	movs	r2, #0
   b98cc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b98ce:	4770      	bx	lr
   b98d0:	2003e6dc 	.word	0x2003e6dc

000b98d4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b98d4:	b510      	push	{r4, lr}
   b98d6:	4604      	mov	r4, r0
{
	free(buffer);
   b98d8:	6800      	ldr	r0, [r0, #0]
   b98da:	f7fe fbd7 	bl	b808c <free>
}
   b98de:	4620      	mov	r0, r4
   b98e0:	bd10      	pop	{r4, pc}

000b98e2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b98e2:	b510      	push	{r4, lr}
   b98e4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b98e6:	6800      	ldr	r0, [r0, #0]
   b98e8:	b108      	cbz	r0, b98ee <_ZN6String10invalidateEv+0xc>
   b98ea:	f7fe fbcf 	bl	b808c <free>
	buffer = NULL;
   b98ee:	2300      	movs	r3, #0
	capacity = len = 0;
   b98f0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b98f4:	6023      	str	r3, [r4, #0]
}
   b98f6:	bd10      	pop	{r4, pc}

000b98f8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b98f8:	b538      	push	{r3, r4, r5, lr}
   b98fa:	4604      	mov	r4, r0
   b98fc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b98fe:	6800      	ldr	r0, [r0, #0]
   b9900:	3101      	adds	r1, #1
   b9902:	f7fe fbcb 	bl	b809c <realloc>
	if (newbuffer) {
   b9906:	b110      	cbz	r0, b990e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b9908:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b990c:	2001      	movs	r0, #1
	}
	return 0;
}
   b990e:	bd38      	pop	{r3, r4, r5, pc}

000b9910 <_ZN6String7reserveEj>:
{
   b9910:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b9912:	6803      	ldr	r3, [r0, #0]
{
   b9914:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b9916:	b123      	cbz	r3, b9922 <_ZN6String7reserveEj+0x12>
   b9918:	6843      	ldr	r3, [r0, #4]
   b991a:	428b      	cmp	r3, r1
   b991c:	d301      	bcc.n	b9922 <_ZN6String7reserveEj+0x12>
   b991e:	2001      	movs	r0, #1
}
   b9920:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b9922:	4620      	mov	r0, r4
   b9924:	f7ff ffe8 	bl	b98f8 <_ZN6String12changeBufferEj>
   b9928:	2800      	cmp	r0, #0
   b992a:	d0f9      	beq.n	b9920 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b992c:	68a3      	ldr	r3, [r4, #8]
   b992e:	2b00      	cmp	r3, #0
   b9930:	d1f5      	bne.n	b991e <_ZN6String7reserveEj+0xe>
   b9932:	6822      	ldr	r2, [r4, #0]
   b9934:	7013      	strb	r3, [r2, #0]
   b9936:	e7f2      	b.n	b991e <_ZN6String7reserveEj+0xe>

000b9938 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b9938:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b993a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b993c:	4611      	mov	r1, r2
   b993e:	9201      	str	r2, [sp, #4]
{
   b9940:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b9942:	f7ff ffe5 	bl	b9910 <_ZN6String7reserveEj>
   b9946:	9a01      	ldr	r2, [sp, #4]
   b9948:	b928      	cbnz	r0, b9956 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b994a:	4620      	mov	r0, r4
   b994c:	f7ff ffc9 	bl	b98e2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b9950:	4620      	mov	r0, r4
   b9952:	b003      	add	sp, #12
   b9954:	bd30      	pop	{r4, r5, pc}
	len = length;
   b9956:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b9958:	4629      	mov	r1, r5
   b995a:	6820      	ldr	r0, [r4, #0]
   b995c:	f001 fe6c 	bl	bb638 <memcpy>
	buffer[len] = 0;
   b9960:	6822      	ldr	r2, [r4, #0]
   b9962:	68a3      	ldr	r3, [r4, #8]
   b9964:	2100      	movs	r1, #0
   b9966:	54d1      	strb	r1, [r2, r3]
	return *this;
   b9968:	e7f2      	b.n	b9950 <_ZN6String4copyEPKcj+0x18>

000b996a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b996a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b996c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b996e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b9972:	4604      	mov	r4, r0
	len = 0;
   b9974:	6083      	str	r3, [r0, #8]
	flags = 0;
   b9976:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b9978:	b141      	cbz	r1, b998c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b997a:	4608      	mov	r0, r1
   b997c:	9101      	str	r1, [sp, #4]
   b997e:	f001 fecb 	bl	bb718 <strlen>
   b9982:	9901      	ldr	r1, [sp, #4]
   b9984:	4602      	mov	r2, r0
   b9986:	4620      	mov	r0, r4
   b9988:	f7ff ffd6 	bl	b9938 <_ZN6String4copyEPKcj>
}
   b998c:	4620      	mov	r0, r4
   b998e:	b002      	add	sp, #8
   b9990:	bd10      	pop	{r4, pc}

000b9992 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b9992:	b538      	push	{r3, r4, r5, lr}
   b9994:	4605      	mov	r5, r0
	if (buffer) {
   b9996:	6800      	ldr	r0, [r0, #0]
{
   b9998:	460c      	mov	r4, r1
	if (buffer) {
   b999a:	b168      	cbz	r0, b99b8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b999c:	686a      	ldr	r2, [r5, #4]
   b999e:	688b      	ldr	r3, [r1, #8]
   b99a0:	429a      	cmp	r2, r3
   b99a2:	d307      	bcc.n	b99b4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b99a4:	6809      	ldr	r1, [r1, #0]
   b99a6:	f001 feaf 	bl	bb708 <strcpy>
			len = rhs.len;
   b99aa:	68a3      	ldr	r3, [r4, #8]
   b99ac:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b99ae:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b99b0:	60a3      	str	r3, [r4, #8]
}
   b99b2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b99b4:	f7fe fb6a 	bl	b808c <free>
	buffer = rhs.buffer;
   b99b8:	6823      	ldr	r3, [r4, #0]
   b99ba:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b99bc:	6863      	ldr	r3, [r4, #4]
   b99be:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b99c0:	68a3      	ldr	r3, [r4, #8]
   b99c2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b99c4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b99c6:	e9c4 3300 	strd	r3, r3, [r4]
   b99ca:	e7f1      	b.n	b99b0 <_ZN6String4moveERS_+0x1e>

000b99cc <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b99cc:	4288      	cmp	r0, r1
{
   b99ce:	b510      	push	{r4, lr}
   b99d0:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b99d2:	d005      	beq.n	b99e0 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b99d4:	680b      	ldr	r3, [r1, #0]
   b99d6:	b12b      	cbz	r3, b99e4 <_ZN6StringaSERKS_+0x18>
   b99d8:	688a      	ldr	r2, [r1, #8]
   b99da:	4619      	mov	r1, r3
   b99dc:	f7ff ffac 	bl	b9938 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b99e0:	4620      	mov	r0, r4
   b99e2:	bd10      	pop	{r4, pc}
	else invalidate();
   b99e4:	f7ff ff7d 	bl	b98e2 <_ZN6String10invalidateEv>
   b99e8:	e7fa      	b.n	b99e0 <_ZN6StringaSERKS_+0x14>

000b99ea <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b99ea:	4288      	cmp	r0, r1
{
   b99ec:	b510      	push	{r4, lr}
   b99ee:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b99f0:	d001      	beq.n	b99f6 <_ZN6StringaSEOS_+0xc>
   b99f2:	f7ff ffce 	bl	b9992 <_ZN6String4moveERS_>
	return *this;
}
   b99f6:	4620      	mov	r0, r4
   b99f8:	bd10      	pop	{r4, pc}

000b99fa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b99fa:	b513      	push	{r0, r1, r4, lr}
   b99fc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b99fe:	b159      	cbz	r1, b9a18 <_ZN6StringaSEPKc+0x1e>
   b9a00:	4608      	mov	r0, r1
   b9a02:	9101      	str	r1, [sp, #4]
   b9a04:	f001 fe88 	bl	bb718 <strlen>
   b9a08:	9901      	ldr	r1, [sp, #4]
   b9a0a:	4602      	mov	r2, r0
   b9a0c:	4620      	mov	r0, r4
   b9a0e:	f7ff ff93 	bl	b9938 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b9a12:	4620      	mov	r0, r4
   b9a14:	b002      	add	sp, #8
   b9a16:	bd10      	pop	{r4, pc}
	else invalidate();
   b9a18:	f7ff ff63 	bl	b98e2 <_ZN6String10invalidateEv>
   b9a1c:	e7f9      	b.n	b9a12 <_ZN6StringaSEPKc+0x18>

000b9a1e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b9a1e:	b510      	push	{r4, lr}
   b9a20:	4604      	mov	r4, r0
   b9a22:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b9a24:	2300      	movs	r3, #0
	capacity = 0;
   b9a26:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b9a2a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b9a2c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b9a2e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b9a30:	a901      	add	r1, sp, #4
   b9a32:	f000 fcff 	bl	ba434 <itoa>
	*this = buf;
   b9a36:	a901      	add	r1, sp, #4
   b9a38:	4620      	mov	r0, r4
   b9a3a:	f7ff ffde 	bl	b99fa <_ZN6StringaSEPKc>
}
   b9a3e:	4620      	mov	r0, r4
   b9a40:	b00a      	add	sp, #40	; 0x28
   b9a42:	bd10      	pop	{r4, pc}

000b9a44 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b9a44:	b570      	push	{r4, r5, r6, lr}
   b9a46:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b9a48:	460e      	mov	r6, r1
   b9a4a:	b909      	cbnz	r1, b9a50 <_ZN6String6concatEPKcj+0xc>
   b9a4c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b9a4e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b9a50:	b16a      	cbz	r2, b9a6e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b9a52:	6884      	ldr	r4, [r0, #8]
   b9a54:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b9a56:	4621      	mov	r1, r4
   b9a58:	f7ff ff5a 	bl	b9910 <_ZN6String7reserveEj>
   b9a5c:	2800      	cmp	r0, #0
   b9a5e:	d0f5      	beq.n	b9a4c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b9a60:	6828      	ldr	r0, [r5, #0]
   b9a62:	68ab      	ldr	r3, [r5, #8]
   b9a64:	4631      	mov	r1, r6
   b9a66:	4418      	add	r0, r3
   b9a68:	f001 fe4e 	bl	bb708 <strcpy>
	len = newlen;
   b9a6c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b9a6e:	2001      	movs	r0, #1
   b9a70:	e7ed      	b.n	b9a4e <_ZN6String6concatEPKcj+0xa>

000b9a72 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b9a72:	688a      	ldr	r2, [r1, #8]
   b9a74:	6809      	ldr	r1, [r1, #0]
   b9a76:	f7ff bfe5 	b.w	b9a44 <_ZN6String6concatEPKcj>

000b9a7a <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b9a7a:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b9a7c:	2300      	movs	r3, #0
	buf[0] = c;
   b9a7e:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b9a82:	2201      	movs	r2, #1
   b9a84:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b9a86:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b9a8a:	f7ff ffdb 	bl	b9a44 <_ZN6String6concatEPKcj>
}
   b9a8e:	b003      	add	sp, #12
   b9a90:	f85d fb04 	ldr.w	pc, [sp], #4

000b9a94 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b9a94:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b9a96:	688a      	ldr	r2, [r1, #8]
   b9a98:	6809      	ldr	r1, [r1, #0]
{
   b9a9a:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b9a9c:	f7ff ffd2 	bl	b9a44 <_ZN6String6concatEPKcj>
   b9aa0:	b910      	cbnz	r0, b9aa8 <_ZplRK15StringSumHelperRK6String+0x14>
   b9aa2:	4620      	mov	r0, r4
   b9aa4:	f7ff ff1d 	bl	b98e2 <_ZN6String10invalidateEv>
	return a;
}
   b9aa8:	4620      	mov	r0, r4
   b9aaa:	bd10      	pop	{r4, pc}

000b9aac <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b9aac:	6802      	ldr	r2, [r0, #0]
{
   b9aae:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b9ab0:	6809      	ldr	r1, [r1, #0]
   b9ab2:	b162      	cbz	r2, b9ace <_ZNK6String9compareToERKS_+0x22>
   b9ab4:	b941      	cbnz	r1, b9ac8 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b9ab6:	6880      	ldr	r0, [r0, #8]
   b9ab8:	b160      	cbz	r0, b9ad4 <_ZNK6String9compareToERKS_+0x28>
   b9aba:	7810      	ldrb	r0, [r2, #0]
   b9abc:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b9abe:	6898      	ldr	r0, [r3, #8]
   b9ac0:	b140      	cbz	r0, b9ad4 <_ZNK6String9compareToERKS_+0x28>
   b9ac2:	7809      	ldrb	r1, [r1, #0]
   b9ac4:	4248      	negs	r0, r1
   b9ac6:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b9ac8:	4610      	mov	r0, r2
   b9aca:	f001 be13 	b.w	bb6f4 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b9ace:	2900      	cmp	r1, #0
   b9ad0:	d1f5      	bne.n	b9abe <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b9ad2:	4608      	mov	r0, r1
}
   b9ad4:	4770      	bx	lr

000b9ad6 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b9ad6:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b9ad8:	6882      	ldr	r2, [r0, #8]
   b9ada:	688b      	ldr	r3, [r1, #8]
   b9adc:	429a      	cmp	r2, r3
   b9ade:	d105      	bne.n	b9aec <_ZNK6String6equalsERKS_+0x16>
   b9ae0:	f7ff ffe4 	bl	b9aac <_ZNK6String9compareToERKS_>
   b9ae4:	fab0 f080 	clz	r0, r0
   b9ae8:	0940      	lsrs	r0, r0, #5
}
   b9aea:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b9aec:	2000      	movs	r0, #0
   b9aee:	e7fc      	b.n	b9aea <_ZNK6String6equalsERKS_+0x14>

000b9af0 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   b9af0:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b9af2:	6882      	ldr	r2, [r0, #8]
   b9af4:	b93a      	cbnz	r2, b9b06 <_ZNK6String6equalsEPKc+0x16>
   b9af6:	b121      	cbz	r1, b9b02 <_ZNK6String6equalsEPKc+0x12>
   b9af8:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b9afa:	fab0 f080 	clz	r0, r0
   b9afe:	0940      	lsrs	r0, r0, #5
   b9b00:	e000      	b.n	b9b04 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b9b02:	2001      	movs	r0, #1
}
   b9b04:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b9b06:	6800      	ldr	r0, [r0, #0]
   b9b08:	b909      	cbnz	r1, b9b0e <_ZNK6String6equalsEPKc+0x1e>
   b9b0a:	7800      	ldrb	r0, [r0, #0]
   b9b0c:	e7f5      	b.n	b9afa <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b9b0e:	f001 fdf1 	bl	bb6f4 <strcmp>
   b9b12:	e7f2      	b.n	b9afa <_ZNK6String6equalsEPKc+0xa>

000b9b14 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b9b14:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b9b16:	6883      	ldr	r3, [r0, #8]
   b9b18:	4293      	cmp	r3, r2
   b9b1a:	d907      	bls.n	b9b2c <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b9b1c:	6804      	ldr	r4, [r0, #0]
   b9b1e:	6809      	ldr	r1, [r1, #0]
   b9b20:	18a0      	adds	r0, r4, r2
   b9b22:	f001 fe21 	bl	bb768 <strstr>
	if (found == NULL) return -1;
   b9b26:	b108      	cbz	r0, b9b2c <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b9b28:	1b00      	subs	r0, r0, r4
}
   b9b2a:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b9b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9b30:	e7fb      	b.n	b9b2a <_ZNK6String7indexOfERKS_j+0x16>

000b9b32 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b9b32:	2200      	movs	r2, #0
   b9b34:	f7ff bfee 	b.w	b9b14 <_ZNK6String7indexOfERKS_j>

000b9b38 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b9b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b9b3a:	429a      	cmp	r2, r3
{
   b9b3c:	460f      	mov	r7, r1
   b9b3e:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b9b40:	490c      	ldr	r1, [pc, #48]	; (b9b74 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b9b42:	bf88      	it	hi
   b9b44:	4613      	movhi	r3, r2
{
   b9b46:	4614      	mov	r4, r2
   b9b48:	4606      	mov	r6, r0
	if (left > right) {
   b9b4a:	bf84      	itt	hi
   b9b4c:	462c      	movhi	r4, r5
   b9b4e:	461d      	movhi	r5, r3
	String out;
   b9b50:	f7ff ff0b 	bl	b996a <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b9b54:	68bb      	ldr	r3, [r7, #8]
   b9b56:	42a3      	cmp	r3, r4
   b9b58:	d30a      	bcc.n	b9b70 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b9b5a:	6839      	ldr	r1, [r7, #0]
   b9b5c:	42ab      	cmp	r3, r5
   b9b5e:	bf94      	ite	ls
   b9b60:	ebc4 0203 	rsbls	r2, r4, r3
   b9b64:	ebc4 0205 	rsbhi	r2, r4, r5
   b9b68:	4421      	add	r1, r4
   b9b6a:	4630      	mov	r0, r6
   b9b6c:	f7ff fee4 	bl	b9938 <_ZN6String4copyEPKcj>
	return out;
}
   b9b70:	4630      	mov	r0, r6
   b9b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9b74:	000bdbc2 	.word	0x000bdbc2

000b9b78 <_ZNK6String9substringEj>:
{
   b9b78:	b510      	push	{r4, lr}
   b9b7a:	4604      	mov	r4, r0
	return substring(left, len);
   b9b7c:	688b      	ldr	r3, [r1, #8]
   b9b7e:	f7ff ffdb 	bl	b9b38 <_ZNK6String9substringEjj>
}
   b9b82:	4620      	mov	r0, r4
   b9b84:	bd10      	pop	{r4, pc}
	...

000b9b88 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b9b88:	4b05      	ldr	r3, [pc, #20]	; (b9ba0 <_GLOBAL__sub_I_System+0x18>)
   b9b8a:	2202      	movs	r2, #2
   b9b8c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b9b8e:	4b05      	ldr	r3, [pc, #20]	; (b9ba4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b9b90:	4a05      	ldr	r2, [pc, #20]	; (b9ba8 <_GLOBAL__sub_I_System+0x20>)
   b9b92:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b9b94:	2000      	movs	r0, #0
   b9b96:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b9b9a:	f7fe b9cb 	b.w	b7f34 <set_system_mode>
   b9b9e:	bf00      	nop
   b9ba0:	2003e6f8 	.word	0x2003e6f8
   b9ba4:	2003e6ec 	.word	0x2003e6ec
   b9ba8:	ffff0000 	.word	0xffff0000

000b9bac <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b9bac:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9bae:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b9bb0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9bb4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b9bb6:	2201      	movs	r2, #1
   b9bb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9bbc:	f10d 0107 	add.w	r1, sp, #7
   b9bc0:	47a0      	blx	r4
}
   b9bc2:	b002      	add	sp, #8
   b9bc4:	bd10      	pop	{r4, pc}

000b9bc6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b9bc6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b9bc8:	6803      	ldr	r3, [r0, #0]
   b9bca:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b9bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9bd0:	46a4      	mov	ip, r4
}
   b9bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b9bd6:	4760      	bx	ip

000b9bd8 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9bd8:	b513      	push	{r0, r1, r4, lr}
   b9bda:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b9bdc:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9bde:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b9be2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b9be4:	f10d 0107 	add.w	r1, sp, #7
   b9be8:	2201      	movs	r2, #1
   b9bea:	47a0      	blx	r4
}
   b9bec:	b002      	add	sp, #8
   b9bee:	bd10      	pop	{r4, pc}

000b9bf0 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b9bf0:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b9bf2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9bf4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9bf8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9bfc:	429a      	cmp	r2, r3
int TCPClient::read() {
   b9bfe:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9c00:	d008      	beq.n	b9c14 <_ZN9TCPClient4readEv+0x24>
   b9c02:	6963      	ldr	r3, [r4, #20]
   b9c04:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9c08:	1c51      	adds	r1, r2, #1
   b9c0a:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b9c0e:	4413      	add	r3, r2
   b9c10:	7918      	ldrb	r0, [r3, #4]
}
   b9c12:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9c14:	6803      	ldr	r3, [r0, #0]
   b9c16:	691b      	ldr	r3, [r3, #16]
   b9c18:	4798      	blx	r3
   b9c1a:	2800      	cmp	r0, #0
   b9c1c:	d1f1      	bne.n	b9c02 <_ZN9TCPClient4readEv+0x12>
   b9c1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9c22:	e7f6      	b.n	b9c12 <_ZN9TCPClient4readEv+0x22>

000b9c24 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b9c24:	4770      	bx	lr

000b9c26 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b9c26:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b9c28:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b9c2a:	43c0      	mvns	r0, r0
   b9c2c:	0fc0      	lsrs	r0, r0, #31
   b9c2e:	4770      	bx	lr

000b9c30 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9c30:	4770      	bx	lr
	...

000b9c34 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9c34:	4b06      	ldr	r3, [pc, #24]	; (b9c50 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9c36:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9c38:	b510      	push	{r4, lr}
   b9c3a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9c3e:	d005      	beq.n	b9c4c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9c40:	4608      	mov	r0, r1
   b9c42:	f000 fd1d 	bl	ba680 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9c46:	2800      	cmp	r0, #0
   b9c48:	bf08      	it	eq
   b9c4a:	2400      	moveq	r4, #0
      }
   b9c4c:	4620      	mov	r0, r4
   b9c4e:	bd10      	pop	{r4, pc}
   b9c50:	000bdd98 	.word	0x000bdd98

000b9c54 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9c54:	b510      	push	{r4, lr}
   b9c56:	21ac      	movs	r1, #172	; 0xac
   b9c58:	4604      	mov	r4, r0
   b9c5a:	f7fa fa22 	bl	b40a2 <_ZdlPvj>
   b9c5e:	4620      	mov	r0, r4
   b9c60:	bd10      	pop	{r4, pc}

000b9c62 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b9c62:	21ac      	movs	r1, #172	; 0xac
   b9c64:	f7fa ba1d 	b.w	b40a2 <_ZdlPvj>

000b9c68 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b9c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b9c6c:	f04f 0800 	mov.w	r8, #0
   b9c70:	b086      	sub	sp, #24
   b9c72:	461c      	mov	r4, r3
   b9c74:	f8c0 8004 	str.w	r8, [r0, #4]
   b9c78:	4605      	mov	r5, r0
   b9c7a:	460e      	mov	r6, r1
   b9c7c:	4617      	mov	r7, r2
    struct timeval tv = {};
   b9c7e:	4641      	mov	r1, r8
   b9c80:	2210      	movs	r2, #16
   b9c82:	a802      	add	r0, sp, #8
   b9c84:	f001 fd00 	bl	bb688 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b9c88:	1c63      	adds	r3, r4, #1
   b9c8a:	d009      	beq.n	b9ca0 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b9c8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9c90:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b9c94:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b9c98:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b9c9c:	435c      	muls	r4, r3
   b9c9e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b9ca0:	6968      	ldr	r0, [r5, #20]
   b9ca2:	2310      	movs	r3, #16
   b9ca4:	9300      	str	r3, [sp, #0]
   b9ca6:	6800      	ldr	r0, [r0, #0]
   b9ca8:	ab02      	add	r3, sp, #8
   b9caa:	f241 0205 	movw	r2, #4101	; 0x1005
   b9cae:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9cb2:	f7fe f88f 	bl	b7dd4 <sock_setsockopt>
    if (ret < 0) {
   b9cb6:	2800      	cmp	r0, #0
   b9cb8:	da07      	bge.n	b9cca <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b9cba:	f7fe fa17 	bl	b80ec <__errno>
   b9cbe:	6803      	ldr	r3, [r0, #0]
   b9cc0:	606b      	str	r3, [r5, #4]
        return 0;
   b9cc2:	2000      	movs	r0, #0
}
   b9cc4:	b006      	add	sp, #24
   b9cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b9cca:	6968      	ldr	r0, [r5, #20]
   b9ccc:	2300      	movs	r3, #0
   b9cce:	6800      	ldr	r0, [r0, #0]
   b9cd0:	463a      	mov	r2, r7
   b9cd2:	4631      	mov	r1, r6
   b9cd4:	f7fe f89e 	bl	b7e14 <sock_send>
    if (ret < 0) {
   b9cd8:	1e03      	subs	r3, r0, #0
   b9cda:	dbee      	blt.n	b9cba <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b9cdc:	4618      	mov	r0, r3
   b9cde:	e7f1      	b.n	b9cc4 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b9ce0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b9ce0:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b9ce2:	6984      	ldr	r4, [r0, #24]
   b9ce4:	4b0a      	ldr	r3, [pc, #40]	; (b9d10 <_ZN9TCPClientD1Ev+0x30>)
   b9ce6:	6003      	str	r3, [r0, #0]
   b9ce8:	4605      	mov	r5, r0
   b9cea:	b17c      	cbz	r4, b9d0c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b9cec:	6863      	ldr	r3, [r4, #4]
   b9cee:	3b01      	subs	r3, #1
   b9cf0:	6063      	str	r3, [r4, #4]
   b9cf2:	b95b      	cbnz	r3, b9d0c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b9cf4:	6823      	ldr	r3, [r4, #0]
   b9cf6:	4620      	mov	r0, r4
   b9cf8:	689b      	ldr	r3, [r3, #8]
   b9cfa:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b9cfc:	68a3      	ldr	r3, [r4, #8]
   b9cfe:	3b01      	subs	r3, #1
   b9d00:	60a3      	str	r3, [r4, #8]
   b9d02:	b91b      	cbnz	r3, b9d0c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b9d04:	6823      	ldr	r3, [r4, #0]
   b9d06:	4620      	mov	r0, r4
   b9d08:	68db      	ldr	r3, [r3, #12]
   b9d0a:	4798      	blx	r3
   b9d0c:	4628      	mov	r0, r5
   b9d0e:	bd38      	pop	{r3, r4, r5, pc}
   b9d10:	000bdecc 	.word	0x000bdecc

000b9d14 <_ZN9TCPClientD0Ev>:
   b9d14:	b510      	push	{r4, lr}
   b9d16:	4604      	mov	r4, r0
   b9d18:	f7ff ffe2 	bl	b9ce0 <_ZN9TCPClientD1Ev>
   b9d1c:	4620      	mov	r0, r4
   b9d1e:	211c      	movs	r1, #28
   b9d20:	f7fa f9bf 	bl	b40a2 <_ZdlPvj>
   b9d24:	4620      	mov	r0, r4
   b9d26:	bd10      	pop	{r4, pc}

000b9d28 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b9d28:	b530      	push	{r4, r5, lr}
   b9d2a:	b087      	sub	sp, #28
   b9d2c:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b9d2e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b9d30:	4668      	mov	r0, sp
   b9d32:	f7ff fc6b 	bl	b960c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9d38:	3404      	adds	r4, #4
   b9d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9d3c:	682b      	ldr	r3, [r5, #0]
   b9d3e:	7023      	strb	r3, [r4, #0]
    }
   b9d40:	b007      	add	sp, #28
   b9d42:	bd30      	pop	{r4, r5, pc}

000b9d44 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b9d44:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b9d46:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b9d48:	4b05      	ldr	r3, [pc, #20]	; (b9d60 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b9d4a:	4604      	mov	r4, r0
   b9d4c:	358c      	adds	r5, #140	; 0x8c
   b9d4e:	f844 3b04 	str.w	r3, [r4], #4
   b9d52:	4606      	mov	r6, r0
   b9d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9d58:	682b      	ldr	r3, [r5, #0]
   b9d5a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b9d5c:	4630      	mov	r0, r6
   b9d5e:	bd70      	pop	{r4, r5, r6, pc}
   b9d60:	000bde44 	.word	0x000bde44

000b9d64 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9d68:	4698      	mov	r8, r3
    stop();
   b9d6a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9d6c:	b093      	sub	sp, #76	; 0x4c
   b9d6e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b9d70:	2400      	movs	r4, #0
    stop();
   b9d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9d74:	4606      	mov	r6, r0
   b9d76:	4617      	mov	r7, r2
    stop();
   b9d78:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9d7a:	4628      	mov	r0, r5
   b9d7c:	466b      	mov	r3, sp
   b9d7e:	4622      	mov	r2, r4
   b9d80:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b9d82:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9d84:	f7fe f81e 	bl	b7dc4 <netdb_getaddrinfo>
   b9d88:	4605      	mov	r5, r0
   b9d8a:	2800      	cmp	r0, #0
   b9d8c:	d163      	bne.n	b9e56 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b9d8e:	9b00      	ldr	r3, [sp, #0]
   b9d90:	2b00      	cmp	r3, #0
   b9d92:	d04b      	beq.n	b9e2c <_ZN9TCPClient7connectEPKctm+0xc8>
   b9d94:	695b      	ldr	r3, [r3, #20]
   b9d96:	2b00      	cmp	r3, #0
   b9d98:	d048      	beq.n	b9e2c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b9d9a:	a806      	add	r0, sp, #24
   b9d9c:	f7ff fbf2 	bl	b9584 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b9da0:	9b00      	ldr	r3, [sp, #0]
   b9da2:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b9da4:	7863      	ldrb	r3, [r4, #1]
   b9da6:	2b02      	cmp	r3, #2
   b9da8:	d104      	bne.n	b9db4 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b9daa:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b9dac:	a806      	add	r0, sp, #24
   b9dae:	f7ff ffbb 	bl	b9d28 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b9db2:	e026      	b.n	b9e02 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b9db4:	2b0a      	cmp	r3, #10
   b9db6:	d124      	bne.n	b9e02 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b9db8:	2211      	movs	r2, #17
   b9dba:	4629      	mov	r1, r5
   b9dbc:	a801      	add	r0, sp, #4
   b9dbe:	f001 fc63 	bl	bb688 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9dc2:	68a3      	ldr	r3, [r4, #8]
   b9dc4:	2b00      	cmp	r3, #0
   b9dc6:	d038      	beq.n	b9e3a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9dc8:	f104 0308 	add.w	r3, r4, #8
   b9dcc:	f10d 0c04 	add.w	ip, sp, #4
   b9dd0:	3418      	adds	r4, #24
   b9dd2:	6818      	ldr	r0, [r3, #0]
   b9dd4:	6859      	ldr	r1, [r3, #4]
   b9dd6:	4662      	mov	r2, ip
   b9dd8:	c203      	stmia	r2!, {r0, r1}
   b9dda:	3308      	adds	r3, #8
   b9ddc:	42a3      	cmp	r3, r4
   b9dde:	4694      	mov	ip, r2
   b9de0:	d1f7      	bne.n	b9dd2 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b9de2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b9de4:	a901      	add	r1, sp, #4
   b9de6:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b9de8:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b9dec:	f7ff fbd8 	bl	b95a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9df0:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9df4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9df8:	ac07      	add	r4, sp, #28
   b9dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9dfc:	f8dc 3000 	ldr.w	r3, [ip]
   b9e00:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b9e02:	a806      	add	r0, sp, #24
   b9e04:	f7ff fbde 	bl	b95c4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b9e08:	b180      	cbz	r0, b9e2c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b9e0a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b9e0c:	ad07      	add	r5, sp, #28
   b9e0e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b9e12:	4b12      	ldr	r3, [pc, #72]	; (b9e5c <_ZN9TCPClient7connectEPKctm+0xf8>)
   b9e14:	930c      	str	r3, [sp, #48]	; 0x30
   b9e16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9e18:	ac0d      	add	r4, sp, #52	; 0x34
   b9e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9e1c:	682b      	ldr	r3, [r5, #0]
   b9e1e:	7023      	strb	r3, [r4, #0]
   b9e20:	463a      	mov	r2, r7
   b9e22:	4643      	mov	r3, r8
   b9e24:	a90c      	add	r1, sp, #48	; 0x30
   b9e26:	4630      	mov	r0, r6
   b9e28:	47c8      	blx	r9
   b9e2a:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b9e2c:	9800      	ldr	r0, [sp, #0]
   b9e2e:	f7fd ffc1 	bl	b7db4 <netdb_freeaddrinfo>
}
   b9e32:	4628      	mov	r0, r5
   b9e34:	b013      	add	sp, #76	; 0x4c
   b9e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9e3a:	68e3      	ldr	r3, [r4, #12]
   b9e3c:	2b00      	cmp	r3, #0
   b9e3e:	d1c3      	bne.n	b9dc8 <_ZN9TCPClient7connectEPKctm+0x64>
   b9e40:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9e44:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b9e48:	f7fd ffa4 	bl	b7d94 <inet_htonl>
   b9e4c:	4581      	cmp	r9, r0
   b9e4e:	d1bb      	bne.n	b9dc8 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b9e50:	f104 0114 	add.w	r1, r4, #20
   b9e54:	e7aa      	b.n	b9dac <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9e56:	4625      	mov	r5, r4
   b9e58:	e7e8      	b.n	b9e2c <_ZN9TCPClient7connectEPKctm+0xc8>
   b9e5a:	bf00      	nop
   b9e5c:	000bde44 	.word	0x000bde44

000b9e60 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b9e60:	b538      	push	{r3, r4, r5, lr}
   b9e62:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b9e64:	681a      	ldr	r2, [r3, #0]
   b9e66:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b9e68:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b9e6a:	da10      	bge.n	b9e8e <_ZN9TCPClient9connectedEv+0x2e>
   b9e6c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9e70:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9e74:	429a      	cmp	r2, r3
   b9e76:	d10a      	bne.n	b9e8e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b9e78:	6803      	ldr	r3, [r0, #0]
   b9e7a:	691b      	ldr	r3, [r3, #16]
   b9e7c:	4798      	blx	r3
        if (!rv) {
   b9e7e:	4604      	mov	r4, r0
   b9e80:	b928      	cbnz	r0, b9e8e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b9e82:	682b      	ldr	r3, [r5, #0]
   b9e84:	4628      	mov	r0, r5
   b9e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9e88:	4798      	blx	r3
        rv = available();
   b9e8a:	4620      	mov	r0, r4
}
   b9e8c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b9e8e:	2001      	movs	r0, #1
   b9e90:	e7fc      	b.n	b9e8c <_ZN9TCPClient9connectedEv+0x2c>

000b9e92 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b9e92:	b510      	push	{r4, lr}
   b9e94:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9e96:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9e9a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9e9e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b9ea0:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9ea2:	d005      	beq.n	b9eb0 <_ZN9TCPClient4peekEv+0x1e>
   b9ea4:	6963      	ldr	r3, [r4, #20]
   b9ea6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9eaa:	4413      	add	r3, r2
   b9eac:	7918      	ldrb	r0, [r3, #4]
}
   b9eae:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9eb0:	6803      	ldr	r3, [r0, #0]
   b9eb2:	691b      	ldr	r3, [r3, #16]
   b9eb4:	4798      	blx	r3
   b9eb6:	2800      	cmp	r0, #0
   b9eb8:	d1f4      	bne.n	b9ea4 <_ZN9TCPClient4peekEv+0x12>
   b9eba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9ebe:	e7f6      	b.n	b9eae <_ZN9TCPClient4peekEv+0x1c>

000b9ec0 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9ec2:	6943      	ldr	r3, [r0, #20]
   b9ec4:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b9ec6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9eca:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9ece:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9ed0:	4605      	mov	r5, r0
   b9ed2:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b9ed4:	d016      	beq.n	b9f04 <_ZN9TCPClient4readEPhj+0x44>
   b9ed6:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b9ed8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b9edc:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b9ee0:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b9ee2:	42bc      	cmp	r4, r7
   b9ee4:	bf28      	it	cs
   b9ee6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b9ee8:	3304      	adds	r3, #4
   b9eea:	4622      	mov	r2, r4
   b9eec:	4419      	add	r1, r3
   b9eee:	4630      	mov	r0, r6
   b9ef0:	f001 fba2 	bl	bb638 <memcpy>
   b9ef4:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b9ef6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b9efa:	4423      	add	r3, r4
   b9efc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b9f00:	4620      	mov	r0, r4
   b9f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b9f04:	6803      	ldr	r3, [r0, #0]
   b9f06:	691b      	ldr	r3, [r3, #16]
   b9f08:	4798      	blx	r3
   b9f0a:	2800      	cmp	r0, #0
   b9f0c:	d1e3      	bne.n	b9ed6 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b9f0e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9f12:	e7f5      	b.n	b9f00 <_ZN9TCPClient4readEPhj+0x40>

000b9f14 <_ZN9TCPClient12flush_bufferEv>:
   b9f14:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b9f16:	2300      	movs	r3, #0
   b9f18:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9f1c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b9f1e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b9f22:	4770      	bx	lr

000b9f24 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9f28:	461f      	mov	r7, r3
    stop();
   b9f2a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9f2c:	460c      	mov	r4, r1
    stop();
   b9f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9f30:	b08a      	sub	sp, #40	; 0x28
   b9f32:	4605      	mov	r5, r0
   b9f34:	4616      	mov	r6, r2
    stop();
   b9f36:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b9f38:	7d23      	ldrb	r3, [r4, #20]
   b9f3a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b9f3e:	2b04      	cmp	r3, #4
   b9f40:	bf0c      	ite	eq
   b9f42:	2002      	moveq	r0, #2
   b9f44:	200a      	movne	r0, #10
   b9f46:	2206      	movs	r2, #6
   b9f48:	2101      	movs	r1, #1
   b9f4a:	f7fd ff6b 	bl	b7e24 <sock_socket>
   b9f4e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b9f52:	696b      	ldr	r3, [r5, #20]
   b9f54:	681b      	ldr	r3, [r3, #0]
   b9f56:	2b00      	cmp	r3, #0
   b9f58:	da08      	bge.n	b9f6c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b9f5a:	682b      	ldr	r3, [r5, #0]
   b9f5c:	4628      	mov	r0, r5
   b9f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9f60:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b9f62:	4798      	blx	r3
}
   b9f64:	4620      	mov	r0, r4
   b9f66:	b00a      	add	sp, #40	; 0x28
   b9f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b9f6c:	4628      	mov	r0, r5
   b9f6e:	f7ff ffd1 	bl	b9f14 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b9f72:	b1b7      	cbz	r7, b9fa2 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b9f74:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9f76:	a903      	add	r1, sp, #12
   b9f78:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b9f7a:	9303      	str	r3, [sp, #12]
   b9f7c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9f80:	f7fd fef8 	bl	b7d74 <if_index_to_name>
   b9f84:	2800      	cmp	r0, #0
   b9f86:	d1e8      	bne.n	b9f5a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b9f88:	6968      	ldr	r0, [r5, #20]
   b9f8a:	2306      	movs	r3, #6
   b9f8c:	9300      	str	r3, [sp, #0]
   b9f8e:	6800      	ldr	r0, [r0, #0]
   b9f90:	ab03      	add	r3, sp, #12
   b9f92:	f241 020b 	movw	r2, #4107	; 0x100b
   b9f96:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9f9a:	f7fd ff1b 	bl	b7dd4 <sock_setsockopt>
   b9f9e:	2800      	cmp	r0, #0
   b9fa0:	d1db      	bne.n	b9f5a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b9fa2:	221c      	movs	r2, #28
   b9fa4:	2100      	movs	r1, #0
   b9fa6:	a803      	add	r0, sp, #12
   b9fa8:	f001 fb6e 	bl	bb688 <memset>
    if (ip.version() == 4) {
   b9fac:	7d23      	ldrb	r3, [r4, #20]
   b9fae:	2b04      	cmp	r3, #4
   b9fb0:	d11d      	bne.n	b9fee <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b9fb2:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b9fb6:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b9fb8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b9fbc:	f7fd fef2 	bl	b7da4 <inet_htons>
   b9fc0:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b9fc4:	6860      	ldr	r0, [r4, #4]
   b9fc6:	f7fd fee5 	bl	b7d94 <inet_htonl>
   b9fca:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b9fcc:	696b      	ldr	r3, [r5, #20]
   b9fce:	221c      	movs	r2, #28
   b9fd0:	6818      	ldr	r0, [r3, #0]
   b9fd2:	a903      	add	r1, sp, #12
   b9fd4:	f7fd ff0e 	bl	b7df4 <sock_connect>
   b9fd8:	2800      	cmp	r0, #0
   b9fda:	d1be      	bne.n	b9f5a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b9fdc:	3404      	adds	r4, #4
   b9fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9fe0:	696d      	ldr	r5, [r5, #20]
   b9fe2:	358c      	adds	r5, #140	; 0x8c
   b9fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9fe6:	6823      	ldr	r3, [r4, #0]
   b9fe8:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b9fea:	2401      	movs	r4, #1
   b9fec:	e7ba      	b.n	b9f64 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b9fee:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b9ff2:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b9ff4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b9ff8:	f7fd fed4 	bl	b7da4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9ffc:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b9ffe:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   ba002:	1d23      	adds	r3, r4, #4
   ba004:	f104 0714 	add.w	r7, r4, #20
   ba008:	6818      	ldr	r0, [r3, #0]
   ba00a:	6859      	ldr	r1, [r3, #4]
   ba00c:	4632      	mov	r2, r6
   ba00e:	c203      	stmia	r2!, {r0, r1}
   ba010:	3308      	adds	r3, #8
   ba012:	42bb      	cmp	r3, r7
   ba014:	4616      	mov	r6, r2
   ba016:	d1f7      	bne.n	ba008 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   ba018:	e7d8      	b.n	b9fcc <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000ba01c <_ZN9TCPClient9availableEv>:
{
   ba01c:	b530      	push	{r4, r5, lr}
   ba01e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   ba020:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   ba024:	b08b      	sub	sp, #44	; 0x2c
   ba026:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   ba028:	b12b      	cbz	r3, ba036 <_ZN9TCPClient9availableEv+0x1a>
   ba02a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   ba02e:	429a      	cmp	r2, r3
   ba030:	d101      	bne.n	ba036 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   ba032:	f7ff ff6f 	bl	b9f14 <_ZN9TCPClient12flush_bufferEv>
   ba036:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   ba038:	6808      	ldr	r0, [r1, #0]
   ba03a:	2800      	cmp	r0, #0
   ba03c:	db18      	blt.n	ba070 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   ba03e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   ba042:	2d7f      	cmp	r5, #127	; 0x7f
   ba044:	d814      	bhi.n	ba070 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   ba046:	3104      	adds	r1, #4
   ba048:	2308      	movs	r3, #8
   ba04a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   ba04e:	4429      	add	r1, r5
   ba050:	f7fd fed8 	bl	b7e04 <sock_recv>
            if (ret > 0) {
   ba054:	2800      	cmp	r0, #0
   ba056:	dd13      	ble.n	ba080 <_ZN9TCPClient9availableEv+0x64>
   ba058:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   ba05a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba05e:	b90a      	cbnz	r2, ba064 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   ba060:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   ba064:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   ba066:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba06a:	4410      	add	r0, r2
   ba06c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   ba070:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   ba072:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   ba076:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   ba07a:	1ac0      	subs	r0, r0, r3
   ba07c:	b00b      	add	sp, #44	; 0x2c
   ba07e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   ba080:	f7fe f834 	bl	b80ec <__errno>
   ba084:	6803      	ldr	r3, [r0, #0]
   ba086:	2b0b      	cmp	r3, #11
   ba088:	d0f2      	beq.n	ba070 <_ZN9TCPClient9availableEv+0x54>
   ba08a:	f7fe f82f 	bl	b80ec <__errno>
   ba08e:	6803      	ldr	r3, [r0, #0]
   ba090:	2b0b      	cmp	r3, #11
   ba092:	d0ed      	beq.n	ba070 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   ba094:	2320      	movs	r3, #32
   ba096:	2500      	movs	r5, #0
   ba098:	e9cd 3502 	strd	r3, r5, [sp, #8]
   ba09c:	f7fe f826 	bl	b80ec <__errno>
   ba0a0:	6803      	ldr	r3, [r0, #0]
   ba0a2:	9301      	str	r3, [sp, #4]
   ba0a4:	4b08      	ldr	r3, [pc, #32]	; (ba0c8 <_ZN9TCPClient9availableEv+0xac>)
   ba0a6:	4909      	ldr	r1, [pc, #36]	; (ba0cc <_ZN9TCPClient9availableEv+0xb0>)
   ba0a8:	9300      	str	r3, [sp, #0]
   ba0aa:	aa02      	add	r2, sp, #8
   ba0ac:	462b      	mov	r3, r5
   ba0ae:	2032      	movs	r0, #50	; 0x32
   ba0b0:	f7fd ff38 	bl	b7f24 <log_message>
                    sock_close(d_->sock);
   ba0b4:	6963      	ldr	r3, [r4, #20]
   ba0b6:	6818      	ldr	r0, [r3, #0]
   ba0b8:	f7fd fe94 	bl	b7de4 <sock_close>
   ba0bc:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   ba0be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba0c2:	601a      	str	r2, [r3, #0]
   ba0c4:	e7d4      	b.n	ba070 <_ZN9TCPClient9availableEv+0x54>
   ba0c6:	bf00      	nop
   ba0c8:	000bde97 	.word	0x000bde97
   ba0cc:	000bde90 	.word	0x000bde90

000ba0d0 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   ba0d0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   ba0d2:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   ba0d4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   ba0d6:	6818      	ldr	r0, [r3, #0]
   ba0d8:	2800      	cmp	r0, #0
   ba0da:	db01      	blt.n	ba0e0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   ba0dc:	f7fd fe82 	bl	b7de4 <sock_close>
   ba0e0:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   ba0e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba0e6:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   ba0e8:	6960      	ldr	r0, [r4, #20]
   ba0ea:	2211      	movs	r2, #17
   ba0ec:	2100      	movs	r1, #0
   ba0ee:	308c      	adds	r0, #140	; 0x8c
   ba0f0:	f001 faca 	bl	bb688 <memset>
    flush_buffer();
   ba0f4:	4620      	mov	r0, r4
}
   ba0f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   ba0fa:	f7ff bf0b 	b.w	b9f14 <_ZN9TCPClient12flush_bufferEv>

000ba0fe <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   ba0fe:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   ba100:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   ba102:	4604      	mov	r4, r0
          total(0) {
   ba104:	6001      	str	r1, [r0, #0]
   ba106:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   ba10a:	3088      	adds	r0, #136	; 0x88
   ba10c:	f7ff fa3a 	bl	b9584 <_ZN9IPAddressC1Ev>
}
   ba110:	4620      	mov	r0, r4
   ba112:	bd10      	pop	{r4, pc}

000ba114 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   ba114:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba116:	2300      	movs	r3, #0
   ba118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   ba11c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   ba120:	4a0e      	ldr	r2, [pc, #56]	; (ba15c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   ba122:	6103      	str	r3, [r0, #16]
   ba124:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   ba126:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   ba128:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba12a:	20ac      	movs	r0, #172	; 0xac
   ba12c:	9101      	str	r1, [sp, #4]
   ba12e:	f7f9 ffb2 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   ba132:	1e05      	subs	r5, r0, #0
   ba134:	f105 060c 	add.w	r6, r5, #12
   ba138:	d008      	beq.n	ba14c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   ba13a:	2301      	movs	r3, #1
   ba13c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   ba140:	4b07      	ldr	r3, [pc, #28]	; (ba160 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba142:	9901      	ldr	r1, [sp, #4]
   ba144:	602b      	str	r3, [r5, #0]
   ba146:	4630      	mov	r0, r6
   ba148:	f7ff ffd9 	bl	ba0fe <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   ba14c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   ba14e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   ba152:	f7ff fedf 	bl	b9f14 <_ZN9TCPClient12flush_bufferEv>
}
   ba156:	b002      	add	sp, #8
   ba158:	bd70      	pop	{r4, r5, r6, pc}
   ba15a:	bf00      	nop
   ba15c:	000bdecc 	.word	0x000bdecc
   ba160:	000bdeb0 	.word	0x000bdeb0

000ba164 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   ba164:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   ba166:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   ba16a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   ba16c:	f7ff ffd2 	bl	ba114 <_ZN9TCPClientC1Ei>
}
   ba170:	4620      	mov	r0, r4
   ba172:	bd10      	pop	{r4, pc}

000ba174 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   ba174:	b510      	push	{r4, lr}
   ba176:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   ba178:	6800      	ldr	r0, [r0, #0]
   ba17a:	2800      	cmp	r0, #0
   ba17c:	db01      	blt.n	ba182 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   ba17e:	f7fd fe31 	bl	b7de4 <sock_close>
    }
}
   ba182:	4620      	mov	r0, r4
   ba184:	bd10      	pop	{r4, pc}

000ba186 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   ba186:	300c      	adds	r0, #12
   ba188:	f7ff bff4 	b.w	ba174 <_ZN9TCPClient4DataD1Ev>

000ba18c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   ba18c:	4b02      	ldr	r3, [pc, #8]	; (ba198 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   ba18e:	681a      	ldr	r2, [r3, #0]
   ba190:	4b02      	ldr	r3, [pc, #8]	; (ba19c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   ba192:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   ba194:	4770      	bx	lr
   ba196:	bf00      	nop
   ba198:	200352ec 	.word	0x200352ec
   ba19c:	2003e6fc 	.word	0x2003e6fc

000ba1a0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   ba1a0:	4770      	bx	lr

000ba1a2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba1a2:	7441      	strb	r1, [r0, #17]
}
   ba1a4:	4770      	bx	lr

000ba1a6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   ba1a6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   ba1a8:	7c00      	ldrb	r0, [r0, #16]
   ba1aa:	f7fd fe6b 	bl	b7e84 <hal_usart_available_data_for_write>
}
   ba1ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba1b2:	bd08      	pop	{r3, pc}

000ba1b4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   ba1b4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   ba1b6:	7c00      	ldrb	r0, [r0, #16]
   ba1b8:	f7fd fe44 	bl	b7e44 <hal_usart_available>
}
   ba1bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba1c0:	bd08      	pop	{r3, pc}

000ba1c2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   ba1c2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   ba1c4:	7c00      	ldrb	r0, [r0, #16]
   ba1c6:	f7fd fe4d 	bl	b7e64 <hal_usart_peek>
}
   ba1ca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba1ce:	bd08      	pop	{r3, pc}

000ba1d0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   ba1d0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   ba1d2:	7c00      	ldrb	r0, [r0, #16]
   ba1d4:	f7fd fe3e 	bl	b7e54 <hal_usart_read>
}
   ba1d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba1dc:	bd08      	pop	{r3, pc}

000ba1de <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   ba1de:	7c00      	ldrb	r0, [r0, #16]
   ba1e0:	f7fd be48 	b.w	b7e74 <hal_usart_flush>

000ba1e4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   ba1e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba1e6:	7c45      	ldrb	r5, [r0, #17]
{
   ba1e8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba1ea:	b12d      	cbz	r5, ba1f8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   ba1ec:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   ba1ee:	b003      	add	sp, #12
   ba1f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   ba1f4:	f7fd be1e 	b.w	b7e34 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba1f8:	7c00      	ldrb	r0, [r0, #16]
   ba1fa:	9101      	str	r1, [sp, #4]
   ba1fc:	f7fd fe42 	bl	b7e84 <hal_usart_available_data_for_write>
   ba200:	2800      	cmp	r0, #0
   ba202:	9901      	ldr	r1, [sp, #4]
   ba204:	dcf2      	bgt.n	ba1ec <_ZN11USARTSerial5writeEh+0x8>
}
   ba206:	4628      	mov	r0, r5
   ba208:	b003      	add	sp, #12
   ba20a:	bd30      	pop	{r4, r5, pc}

000ba20c <_ZN11USARTSerialD0Ev>:
   ba20c:	b510      	push	{r4, lr}
   ba20e:	2114      	movs	r1, #20
   ba210:	4604      	mov	r4, r0
   ba212:	f7f9 ff46 	bl	b40a2 <_ZdlPvj>
   ba216:	4620      	mov	r0, r4
   ba218:	bd10      	pop	{r4, pc}
	...

000ba21c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   ba21c:	b510      	push	{r4, lr}
   ba21e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba222:	4604      	mov	r4, r0
   ba224:	4608      	mov	r0, r1
   ba226:	4611      	mov	r1, r2
   ba228:	2200      	movs	r2, #0
   ba22a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   ba22e:	4b04      	ldr	r3, [pc, #16]	; (ba240 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   ba230:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba232:	2301      	movs	r3, #1
  _serial = serial;
   ba234:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba236:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   ba238:	f7fd fe2c 	bl	b7e94 <hal_usart_init_ex>
}
   ba23c:	4620      	mov	r0, r4
   ba23e:	bd10      	pop	{r4, pc}
   ba240:	000bdf34 	.word	0x000bdf34

000ba244 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba244:	7441      	strb	r1, [r0, #17]
}
   ba246:	4770      	bx	lr

000ba248 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba248:	4770      	bx	lr

000ba24a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   ba24a:	4770      	bx	lr

000ba24c <_ZN9USBSerial4readEv>:
{
   ba24c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   ba24e:	2100      	movs	r1, #0
   ba250:	7c00      	ldrb	r0, [r0, #16]
   ba252:	f7fd fe47 	bl	b7ee4 <HAL_USB_USART_Receive_Data>
}
   ba256:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba25a:	bd08      	pop	{r3, pc}

000ba25c <_ZN9USBSerial4peekEv>:
{
   ba25c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   ba25e:	2101      	movs	r1, #1
   ba260:	7c00      	ldrb	r0, [r0, #16]
   ba262:	f7fd fe3f 	bl	b7ee4 <HAL_USB_USART_Receive_Data>
}
   ba266:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba26a:	bd08      	pop	{r3, pc}

000ba26c <_ZN9USBSerial17availableForWriteEv>:
{
   ba26c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   ba26e:	7c00      	ldrb	r0, [r0, #16]
   ba270:	f7fd fe30 	bl	b7ed4 <HAL_USB_USART_Available_Data_For_Write>
}
   ba274:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba278:	bd08      	pop	{r3, pc}

000ba27a <_ZN9USBSerial9availableEv>:
{
   ba27a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   ba27c:	7c00      	ldrb	r0, [r0, #16]
   ba27e:	f7fd fe21 	bl	b7ec4 <HAL_USB_USART_Available_Data>
}
   ba282:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba286:	bd08      	pop	{r3, pc}

000ba288 <_ZN9USBSerial5writeEh>:
{
   ba288:	b513      	push	{r0, r1, r4, lr}
   ba28a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba28c:	7c00      	ldrb	r0, [r0, #16]
{
   ba28e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba290:	f7fd fe20 	bl	b7ed4 <HAL_USB_USART_Available_Data_For_Write>
   ba294:	2800      	cmp	r0, #0
   ba296:	9901      	ldr	r1, [sp, #4]
   ba298:	dc01      	bgt.n	ba29e <_ZN9USBSerial5writeEh+0x16>
   ba29a:	7c60      	ldrb	r0, [r4, #17]
   ba29c:	b120      	cbz	r0, ba2a8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   ba29e:	7c20      	ldrb	r0, [r4, #16]
   ba2a0:	f7fd fe28 	bl	b7ef4 <HAL_USB_USART_Send_Data>
   ba2a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   ba2a8:	b002      	add	sp, #8
   ba2aa:	bd10      	pop	{r4, pc}

000ba2ac <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   ba2ac:	7c00      	ldrb	r0, [r0, #16]
   ba2ae:	f7fd be29 	b.w	b7f04 <HAL_USB_USART_Flush_Data>

000ba2b2 <_ZN9USBSerialD0Ev>:
   ba2b2:	b510      	push	{r4, lr}
   ba2b4:	2114      	movs	r1, #20
   ba2b6:	4604      	mov	r4, r0
   ba2b8:	f7f9 fef3 	bl	b40a2 <_ZdlPvj>
   ba2bc:	4620      	mov	r0, r4
   ba2be:	bd10      	pop	{r4, pc}

000ba2c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   ba2c0:	b510      	push	{r4, lr}
   ba2c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba2c6:	4604      	mov	r4, r0
   ba2c8:	4608      	mov	r0, r1
   ba2ca:	2100      	movs	r1, #0
   ba2cc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba2d0:	4b04      	ldr	r3, [pc, #16]	; (ba2e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   ba2d2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba2d4:	2301      	movs	r3, #1
  _serial = serial;
   ba2d6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba2d8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   ba2da:	4611      	mov	r1, r2
   ba2dc:	f7fd fde2 	bl	b7ea4 <HAL_USB_USART_Init>
}
   ba2e0:	4620      	mov	r0, r4
   ba2e2:	bd10      	pop	{r4, pc}
   ba2e4:	000bdf64 	.word	0x000bdf64

000ba2e8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   ba2e8:	7c00      	ldrb	r0, [r0, #16]
   ba2ea:	2200      	movs	r2, #0
   ba2ec:	f7fd bde2 	b.w	b7eb4 <HAL_USB_USART_Begin>

000ba2f0 <_Z19acquireSerialBufferv>:
{
   ba2f0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   ba2f2:	2214      	movs	r2, #20
{
   ba2f4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   ba2f6:	2100      	movs	r1, #0
   ba2f8:	f001 f9c6 	bl	bb688 <memset>
}
   ba2fc:	4620      	mov	r0, r4
   ba2fe:	bd10      	pop	{r4, pc}

000ba300 <_Z16_fetch_usbserialv>:
{
   ba300:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba302:	4c0f      	ldr	r4, [pc, #60]	; (ba340 <_Z16_fetch_usbserialv+0x40>)
{
   ba304:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   ba306:	a803      	add	r0, sp, #12
   ba308:	f7ff fff2 	bl	ba2f0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba30c:	7821      	ldrb	r1, [r4, #0]
   ba30e:	f3bf 8f5b 	dmb	ish
   ba312:	f011 0101 	ands.w	r1, r1, #1
   ba316:	d10f      	bne.n	ba338 <_Z16_fetch_usbserialv+0x38>
   ba318:	4620      	mov	r0, r4
   ba31a:	9101      	str	r1, [sp, #4]
   ba31c:	f7f9 fec3 	bl	b40a6 <__cxa_guard_acquire>
   ba320:	9901      	ldr	r1, [sp, #4]
   ba322:	b148      	cbz	r0, ba338 <_Z16_fetch_usbserialv+0x38>
   ba324:	aa03      	add	r2, sp, #12
   ba326:	4807      	ldr	r0, [pc, #28]	; (ba344 <_Z16_fetch_usbserialv+0x44>)
   ba328:	f7ff ffca 	bl	ba2c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   ba32c:	4620      	mov	r0, r4
   ba32e:	f7f9 febf 	bl	b40b0 <__cxa_guard_release>
   ba332:	4805      	ldr	r0, [pc, #20]	; (ba348 <_Z16_fetch_usbserialv+0x48>)
   ba334:	f001 f966 	bl	bb604 <atexit>
	return _usbserial;
}
   ba338:	4802      	ldr	r0, [pc, #8]	; (ba344 <_Z16_fetch_usbserialv+0x44>)
   ba33a:	b008      	add	sp, #32
   ba33c:	bd10      	pop	{r4, pc}
   ba33e:	bf00      	nop
   ba340:	2003e700 	.word	0x2003e700
   ba344:	2003e704 	.word	0x2003e704
   ba348:	000ba249 	.word	0x000ba249

000ba34c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   ba34c:	2200      	movs	r2, #0
   ba34e:	6840      	ldr	r0, [r0, #4]
   ba350:	4611      	mov	r1, r2
   ba352:	f7fd be33 	b.w	b7fbc <network_ready>

000ba356 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   ba356:	2200      	movs	r2, #0
   ba358:	6840      	ldr	r0, [r0, #4]
   ba35a:	4611      	mov	r1, r2
   ba35c:	f7fd be4e 	b.w	b7ffc <network_listening>

000ba360 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   ba360:	2200      	movs	r2, #0
   ba362:	6840      	ldr	r0, [r0, #4]
   ba364:	4611      	mov	r1, r2
   ba366:	f7fd be71 	b.w	b804c <network_get_listen_timeout>

000ba36a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   ba36a:	6840      	ldr	r0, [r0, #4]
   ba36c:	2200      	movs	r2, #0
   ba36e:	f7fd be65 	b.w	b803c <network_set_listen_timeout>

000ba372 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   ba372:	6840      	ldr	r0, [r0, #4]
   ba374:	2200      	movs	r2, #0
   ba376:	f081 0101 	eor.w	r1, r1, #1
   ba37a:	f7fd be37 	b.w	b7fec <network_listen>

000ba37e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   ba37e:	2300      	movs	r3, #0
   ba380:	6840      	ldr	r0, [r0, #4]
   ba382:	461a      	mov	r2, r3
   ba384:	4619      	mov	r1, r3
   ba386:	f7fd be29 	b.w	b7fdc <network_off>

000ba38a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   ba38a:	2300      	movs	r3, #0
   ba38c:	6840      	ldr	r0, [r0, #4]
   ba38e:	461a      	mov	r2, r3
   ba390:	4619      	mov	r1, r3
   ba392:	f7fd be1b 	b.w	b7fcc <network_on>

000ba396 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   ba396:	2200      	movs	r2, #0
   ba398:	6840      	ldr	r0, [r0, #4]
   ba39a:	4611      	mov	r1, r2
   ba39c:	f7fd bdfe 	b.w	b7f9c <network_connecting>

000ba3a0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   ba3a0:	6840      	ldr	r0, [r0, #4]
   ba3a2:	2200      	movs	r2, #0
   ba3a4:	2102      	movs	r1, #2
   ba3a6:	f7fd be01 	b.w	b7fac <network_disconnect>

000ba3aa <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   ba3aa:	2300      	movs	r3, #0
   ba3ac:	6840      	ldr	r0, [r0, #4]
   ba3ae:	461a      	mov	r2, r3
   ba3b0:	f7fd bdec 	b.w	b7f8c <network_connect>

000ba3b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   ba3b4:	4b02      	ldr	r3, [pc, #8]	; (ba3c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   ba3b6:	2204      	movs	r2, #4
   ba3b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   ba3ba:	4a02      	ldr	r2, [pc, #8]	; (ba3c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   ba3bc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   ba3be:	4770      	bx	lr
   ba3c0:	2003e718 	.word	0x2003e718
   ba3c4:	000bdf94 	.word	0x000bdf94

000ba3c8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   ba3c8:	b510      	push	{r4, lr}
   ba3ca:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   ba3cc:	f001 f9a4 	bl	bb718 <strlen>
   ba3d0:	3801      	subs	r0, #1
   ba3d2:	1823      	adds	r3, r4, r0
   ba3d4:	4620      	mov	r0, r4
	while(i<j){
   ba3d6:	4283      	cmp	r3, r0
   ba3d8:	d906      	bls.n	ba3e8 <_Z11str_reversePc+0x20>
		c = *i;
   ba3da:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   ba3dc:	7819      	ldrb	r1, [r3, #0]
   ba3de:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   ba3e2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   ba3e6:	e7f6      	b.n	ba3d6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   ba3e8:	bd10      	pop	{r4, pc}

000ba3ea <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   ba3ea:	b570      	push	{r4, r5, r6, lr}
   ba3ec:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   ba3ee:	1e91      	subs	r1, r2, #2
   ba3f0:	2922      	cmp	r1, #34	; 0x22
   ba3f2:	d81d      	bhi.n	ba430 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   ba3f4:	4625      	mov	r5, r4

	div_t result;
	while(a){
   ba3f6:	b930      	cbnz	r0, ba406 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   ba3f8:	4423      	add	r3, r4
            *ptr++ = '0';
   ba3fa:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   ba3fc:	429d      	cmp	r5, r3
   ba3fe:	d210      	bcs.n	ba422 <ultoa+0x38>
            *ptr++ = '0';
   ba400:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   ba404:	e7fa      	b.n	ba3fc <ultoa+0x12>
            result.quot = a/radix;
   ba406:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   ba40a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   ba40e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   ba410:	2809      	cmp	r0, #9
                *ptr += '0';
   ba412:	bf94      	ite	ls
   ba414:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   ba416:	3157      	addhi	r1, #87	; 0x57
   ba418:	b2c9      	uxtb	r1, r1
   ba41a:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   ba41e:	4630      	mov	r0, r6
	while(a){
   ba420:	e7e9      	b.n	ba3f6 <ultoa+0xc>

	*ptr = '\0';
   ba422:	2300      	movs	r3, #0
	str_reverse(buffer);
   ba424:	4620      	mov	r0, r4
	*ptr = '\0';
   ba426:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   ba428:	f7ff ffce 	bl	ba3c8 <_Z11str_reversePc>
	return buffer;
   ba42c:	4620      	mov	r0, r4
}
   ba42e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   ba430:	2000      	movs	r0, #0
   ba432:	e7fc      	b.n	ba42e <ultoa+0x44>

000ba434 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   ba434:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   ba436:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   ba438:	460c      	mov	r4, r1
   ba43a:	4615      	mov	r5, r2
	if(a<0){
   ba43c:	da0e      	bge.n	ba45c <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   ba43e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   ba442:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   ba446:	bf14      	ite	ne
   ba448:	4258      	negne	r0, r3
   ba44a:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   ba44c:	2301      	movs	r3, #1
		*buffer = '-';
   ba44e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   ba450:	462a      	mov	r2, r5
   ba452:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   ba454:	f7ff ffc9 	bl	ba3ea <ultoa>
	}
	return buffer;
}
   ba458:	4620      	mov	r0, r4
   ba45a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   ba45c:	2301      	movs	r3, #1
   ba45e:	e7f9      	b.n	ba454 <itoa+0x20>

000ba460 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   ba460:	4b01      	ldr	r3, [pc, #4]	; (ba468 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   ba462:	6018      	str	r0, [r3, #0]
    }, nullptr);
   ba464:	4770      	bx	lr
   ba466:	bf00      	nop
   ba468:	200352f4 	.word	0x200352f4

000ba46c <serialEventRun>:
{
   ba46c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   ba46e:	4b0b      	ldr	r3, [pc, #44]	; (ba49c <serialEventRun+0x30>)
   ba470:	b143      	cbz	r3, ba484 <serialEventRun+0x18>
   ba472:	f7ff ff45 	bl	ba300 <_Z16_fetch_usbserialv>
   ba476:	6803      	ldr	r3, [r0, #0]
   ba478:	691b      	ldr	r3, [r3, #16]
   ba47a:	4798      	blx	r3
   ba47c:	2800      	cmp	r0, #0
   ba47e:	dd01      	ble.n	ba484 <serialEventRun+0x18>
        serialEvent();
   ba480:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   ba484:	4b06      	ldr	r3, [pc, #24]	; (ba4a0 <serialEventRun+0x34>)
   ba486:	b143      	cbz	r3, ba49a <serialEventRun+0x2e>
   ba488:	f000 f8c8 	bl	ba61c <_Z22__fetch_global_Serial1v>
   ba48c:	6803      	ldr	r3, [r0, #0]
   ba48e:	691b      	ldr	r3, [r3, #16]
   ba490:	4798      	blx	r3
   ba492:	2800      	cmp	r0, #0
   ba494:	dd01      	ble.n	ba49a <serialEventRun+0x2e>
        serialEvent1();
   ba496:	f3af 8000 	nop.w
}
   ba49a:	bd08      	pop	{r3, pc}
	...

000ba4a4 <_post_loop>:
{
   ba4a4:	b508      	push	{r3, lr}
	serialEventRun();
   ba4a6:	f7ff ffe1 	bl	ba46c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   ba4aa:	f7fd fc0b 	bl	b7cc4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   ba4ae:	4b01      	ldr	r3, [pc, #4]	; (ba4b4 <_post_loop+0x10>)
   ba4b0:	6018      	str	r0, [r3, #0]
}
   ba4b2:	bd08      	pop	{r3, pc}
   ba4b4:	2003e728 	.word	0x2003e728

000ba4b8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba4b8:	4805      	ldr	r0, [pc, #20]	; (ba4d0 <_Z33system_initialize_user_backup_ramv+0x18>)
   ba4ba:	4a06      	ldr	r2, [pc, #24]	; (ba4d4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   ba4bc:	4906      	ldr	r1, [pc, #24]	; (ba4d8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   ba4be:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba4c0:	1a12      	subs	r2, r2, r0
   ba4c2:	f001 f8b9 	bl	bb638 <memcpy>
    __backup_sram_signature = signature;
   ba4c6:	4b05      	ldr	r3, [pc, #20]	; (ba4dc <_Z33system_initialize_user_backup_ramv+0x24>)
   ba4c8:	4a05      	ldr	r2, [pc, #20]	; (ba4e0 <_Z33system_initialize_user_backup_ramv+0x28>)
   ba4ca:	601a      	str	r2, [r3, #0]
}
   ba4cc:	bd08      	pop	{r3, pc}
   ba4ce:	bf00      	nop
   ba4d0:	2003f400 	.word	0x2003f400
   ba4d4:	2003f404 	.word	0x2003f404
   ba4d8:	000be4d4 	.word	0x000be4d4
   ba4dc:	2003f400 	.word	0x2003f400
   ba4e0:	9a271c1e 	.word	0x9a271c1e

000ba4e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   ba4e4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba4e6:	2300      	movs	r3, #0
   ba4e8:	9300      	str	r3, [sp, #0]
   ba4ea:	461a      	mov	r2, r3
   ba4ec:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba4f0:	f7fd fd3a 	bl	b7f68 <system_ctrl_set_result>
}
   ba4f4:	b003      	add	sp, #12
   ba4f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba4fc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   ba4fc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   ba4fe:	8843      	ldrh	r3, [r0, #2]
   ba500:	2b0a      	cmp	r3, #10
   ba502:	d008      	beq.n	ba516 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   ba504:	2b50      	cmp	r3, #80	; 0x50
   ba506:	d10b      	bne.n	ba520 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   ba508:	4b09      	ldr	r3, [pc, #36]	; (ba530 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   ba50a:	681b      	ldr	r3, [r3, #0]
   ba50c:	b14b      	cbz	r3, ba522 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   ba50e:	b003      	add	sp, #12
   ba510:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   ba514:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   ba516:	f7ff ffe5 	bl	ba4e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   ba51a:	b003      	add	sp, #12
   ba51c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba520:	2300      	movs	r3, #0
   ba522:	9300      	str	r3, [sp, #0]
   ba524:	461a      	mov	r2, r3
   ba526:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba52a:	f7fd fd1d 	bl	b7f68 <system_ctrl_set_result>
}
   ba52e:	e7f4      	b.n	ba51a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   ba530:	2003e724 	.word	0x2003e724

000ba534 <module_user_init_hook>:
{
   ba534:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   ba536:	4812      	ldr	r0, [pc, #72]	; (ba580 <module_user_init_hook+0x4c>)
   ba538:	2100      	movs	r1, #0
   ba53a:	f7fd fde7 	bl	b810c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   ba53e:	4b11      	ldr	r3, [pc, #68]	; (ba584 <module_user_init_hook+0x50>)
   ba540:	681a      	ldr	r2, [r3, #0]
   ba542:	4b11      	ldr	r3, [pc, #68]	; (ba588 <module_user_init_hook+0x54>)
   ba544:	429a      	cmp	r2, r3
   ba546:	4b11      	ldr	r3, [pc, #68]	; (ba58c <module_user_init_hook+0x58>)
   ba548:	bf0c      	ite	eq
   ba54a:	2201      	moveq	r2, #1
   ba54c:	2200      	movne	r2, #0
   ba54e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   ba550:	d001      	beq.n	ba556 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   ba552:	f7ff ffb1 	bl	ba4b8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   ba556:	f7fd fba5 	bl	b7ca4 <HAL_RNG_GetRandomNumber>
   ba55a:	4604      	mov	r4, r0
    srand(seed);
   ba55c:	f001 f89c 	bl	bb698 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   ba560:	4b0b      	ldr	r3, [pc, #44]	; (ba590 <module_user_init_hook+0x5c>)
   ba562:	b113      	cbz	r3, ba56a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   ba564:	4620      	mov	r0, r4
   ba566:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   ba56a:	2100      	movs	r1, #0
   ba56c:	4808      	ldr	r0, [pc, #32]	; (ba590 <module_user_init_hook+0x5c>)
   ba56e:	f7fd fd05 	bl	b7f7c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   ba572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   ba576:	4807      	ldr	r0, [pc, #28]	; (ba594 <module_user_init_hook+0x60>)
   ba578:	2100      	movs	r1, #0
   ba57a:	f7fd bceb 	b.w	b7f54 <system_ctrl_set_app_request_handler>
   ba57e:	bf00      	nop
   ba580:	000ba461 	.word	0x000ba461
   ba584:	2003f400 	.word	0x2003f400
   ba588:	9a271c1e 	.word	0x9a271c1e
   ba58c:	2003e720 	.word	0x2003e720
   ba590:	00000000 	.word	0x00000000
   ba594:	000ba4fd 	.word	0x000ba4fd

000ba598 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba598:	4770      	bx	lr
	...

000ba59c <_Z19__fetch_global_Wirev>:
{
   ba59c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba59e:	4d0e      	ldr	r5, [pc, #56]	; (ba5d8 <_Z19__fetch_global_Wirev+0x3c>)
   ba5a0:	7829      	ldrb	r1, [r5, #0]
   ba5a2:	f3bf 8f5b 	dmb	ish
   ba5a6:	f011 0401 	ands.w	r4, r1, #1
{
   ba5aa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba5ac:	d111      	bne.n	ba5d2 <_Z19__fetch_global_Wirev+0x36>
   ba5ae:	4628      	mov	r0, r5
   ba5b0:	f7f9 fd79 	bl	b40a6 <__cxa_guard_acquire>
   ba5b4:	b168      	cbz	r0, ba5d2 <_Z19__fetch_global_Wirev+0x36>
   ba5b6:	a801      	add	r0, sp, #4
   ba5b8:	f7fa f8b0 	bl	b471c <_Z17acquireWireBufferv>
   ba5bc:	aa01      	add	r2, sp, #4
   ba5be:	4621      	mov	r1, r4
   ba5c0:	4806      	ldr	r0, [pc, #24]	; (ba5dc <_Z19__fetch_global_Wirev+0x40>)
   ba5c2:	f7fe ff53 	bl	b946c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   ba5c6:	4628      	mov	r0, r5
   ba5c8:	f7f9 fd72 	bl	b40b0 <__cxa_guard_release>
   ba5cc:	4804      	ldr	r0, [pc, #16]	; (ba5e0 <_Z19__fetch_global_Wirev+0x44>)
   ba5ce:	f001 f819 	bl	bb604 <atexit>
	return wire;
}
   ba5d2:	4802      	ldr	r0, [pc, #8]	; (ba5dc <_Z19__fetch_global_Wirev+0x40>)
   ba5d4:	b007      	add	sp, #28
   ba5d6:	bd30      	pop	{r4, r5, pc}
   ba5d8:	2003e72c 	.word	0x2003e72c
   ba5dc:	2003e730 	.word	0x2003e730
   ba5e0:	000ba599 	.word	0x000ba599

000ba5e4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba5e4:	4770      	bx	lr
	...

000ba5e8 <_Z20acquireSerial1Bufferv>:
{
   ba5e8:	b538      	push	{r3, r4, r5, lr}
   ba5ea:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   ba5ec:	2514      	movs	r5, #20
   ba5ee:	462a      	mov	r2, r5
   ba5f0:	2100      	movs	r1, #0
   ba5f2:	f001 f849 	bl	bb688 <memset>
   ba5f6:	8025      	strh	r5, [r4, #0]
   ba5f8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba5fa:	4907      	ldr	r1, [pc, #28]	; (ba618 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   ba5fc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba5fe:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   ba600:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba602:	f000 f82f 	bl	ba664 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba606:	4904      	ldr	r1, [pc, #16]	; (ba618 <_Z20acquireSerial1Bufferv+0x30>)
    };
   ba608:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba60a:	4628      	mov	r0, r5
   ba60c:	f000 f82a 	bl	ba664 <_ZnajRKSt9nothrow_t>
    };
   ba610:	60e0      	str	r0, [r4, #12]
}
   ba612:	4620      	mov	r0, r4
   ba614:	bd38      	pop	{r3, r4, r5, pc}
   ba616:	bf00      	nop
   ba618:	000bdfc8 	.word	0x000bdfc8

000ba61c <_Z22__fetch_global_Serial1v>:
{
   ba61c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba61e:	4d0e      	ldr	r5, [pc, #56]	; (ba658 <_Z22__fetch_global_Serial1v+0x3c>)
   ba620:	7829      	ldrb	r1, [r5, #0]
   ba622:	f3bf 8f5b 	dmb	ish
   ba626:	f011 0401 	ands.w	r4, r1, #1
{
   ba62a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba62c:	d111      	bne.n	ba652 <_Z22__fetch_global_Serial1v+0x36>
   ba62e:	4628      	mov	r0, r5
   ba630:	f7f9 fd39 	bl	b40a6 <__cxa_guard_acquire>
   ba634:	b168      	cbz	r0, ba652 <_Z22__fetch_global_Serial1v+0x36>
   ba636:	a801      	add	r0, sp, #4
   ba638:	f7ff ffd6 	bl	ba5e8 <_Z20acquireSerial1Bufferv>
   ba63c:	aa01      	add	r2, sp, #4
   ba63e:	4621      	mov	r1, r4
   ba640:	4806      	ldr	r0, [pc, #24]	; (ba65c <_Z22__fetch_global_Serial1v+0x40>)
   ba642:	f7ff fdeb 	bl	ba21c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   ba646:	4628      	mov	r0, r5
   ba648:	f7f9 fd32 	bl	b40b0 <__cxa_guard_release>
   ba64c:	4804      	ldr	r0, [pc, #16]	; (ba660 <_Z22__fetch_global_Serial1v+0x44>)
   ba64e:	f000 ffd9 	bl	bb604 <atexit>
    return serial1;
}
   ba652:	4802      	ldr	r0, [pc, #8]	; (ba65c <_Z22__fetch_global_Serial1v+0x40>)
   ba654:	b007      	add	sp, #28
   ba656:	bd30      	pop	{r4, r5, pc}
   ba658:	2003e744 	.word	0x2003e744
   ba65c:	2003e748 	.word	0x2003e748
   ba660:	000ba5e5 	.word	0x000ba5e5

000ba664 <_ZnajRKSt9nothrow_t>:
   ba664:	f7f9 bd19 	b.w	b409a <_Znaj>

000ba668 <_ZSt17__throw_bad_allocv>:
   ba668:	b508      	push	{r3, lr}
   ba66a:	f7fd fd2f 	bl	b80cc <abort>

000ba66e <_ZSt19__throw_logic_errorPKc>:
   ba66e:	b508      	push	{r3, lr}
   ba670:	f7fd fd2c 	bl	b80cc <abort>

000ba674 <_ZSt20__throw_length_errorPKc>:
   ba674:	b508      	push	{r3, lr}
   ba676:	f7fd fd29 	bl	b80cc <abort>

000ba67a <_ZSt25__throw_bad_function_callv>:
   ba67a:	b508      	push	{r3, lr}
   ba67c:	f7fd fd26 	bl	b80cc <abort>

000ba680 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   ba680:	4901      	ldr	r1, [pc, #4]	; (ba688 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   ba682:	f000 b963 	b.w	ba94c <_ZNKSt9type_infoeqERKS_>
   ba686:	bf00      	nop
   ba688:	000bdfe4 	.word	0x000bdfe4

000ba68c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   ba68c:	b10a      	cbz	r2, ba692 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   ba68e:	f000 bfd3 	b.w	bb638 <memcpy>
   ba692:	4770      	bx	lr

000ba694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   ba694:	b508      	push	{r3, lr}
   ba696:	680b      	ldr	r3, [r1, #0]
   ba698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   ba69c:	d302      	bcc.n	ba6a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   ba69e:	480d      	ldr	r0, [pc, #52]	; (ba6d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   ba6a0:	f7ff ffe8 	bl	ba674 <_ZSt20__throw_length_errorPKc>
   ba6a4:	4293      	cmp	r3, r2
   ba6a6:	d90b      	bls.n	ba6c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   ba6a8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   ba6ac:	ea4f 0042 	mov.w	r0, r2, lsl #1
   ba6b0:	d206      	bcs.n	ba6c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   ba6b2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   ba6b6:	bf2a      	itet	cs
   ba6b8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   ba6bc:	6008      	strcc	r0, [r1, #0]
   ba6be:	600b      	strcs	r3, [r1, #0]
   ba6c0:	6808      	ldr	r0, [r1, #0]
   ba6c2:	3001      	adds	r0, #1
   ba6c4:	d501      	bpl.n	ba6ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   ba6c6:	f7ff ffcf 	bl	ba668 <_ZSt17__throw_bad_allocv>
   ba6ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba6ce:	f7f9 bce2 	b.w	b4096 <_Znwj>
   ba6d2:	bf00      	nop
   ba6d4:	000bdfec 	.word	0x000bdfec

000ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   ba6d8:	f850 3b08 	ldr.w	r3, [r0], #8
   ba6dc:	4283      	cmp	r3, r0
   ba6de:	d002      	beq.n	ba6e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   ba6e0:	4618      	mov	r0, r3
   ba6e2:	f7f9 bcdc 	b.w	b409e <_ZdlPv>
   ba6e6:	4770      	bx	lr

000ba6e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   ba6e8:	2a01      	cmp	r2, #1
   ba6ea:	b410      	push	{r4}
   ba6ec:	d104      	bne.n	ba6f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   ba6ee:	780a      	ldrb	r2, [r1, #0]
   ba6f0:	f85d 4b04 	ldr.w	r4, [sp], #4
   ba6f4:	7002      	strb	r2, [r0, #0]
   ba6f6:	4770      	bx	lr
   ba6f8:	f85d 4b04 	ldr.w	r4, [sp], #4
   ba6fc:	f7ff bfc6 	b.w	ba68c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000ba700 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
   ba700:	b508      	push	{r3, lr}
   ba702:	1a52      	subs	r2, r2, r1
   ba704:	f7ff fff0 	bl	ba6e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba708:	bd08      	pop	{r3, pc}

000ba70a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   ba70a:	b508      	push	{r3, lr}
   ba70c:	1a52      	subs	r2, r2, r1
   ba70e:	f7ff ffeb 	bl	ba6e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba712:	bd08      	pop	{r3, pc}

000ba714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   ba714:	4288      	cmp	r0, r1
   ba716:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba718:	4604      	mov	r4, r0
   ba71a:	460e      	mov	r6, r1
   ba71c:	d01e      	beq.n	ba75c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   ba71e:	4603      	mov	r3, r0
   ba720:	684d      	ldr	r5, [r1, #4]
   ba722:	f853 2b08 	ldr.w	r2, [r3], #8
   ba726:	429a      	cmp	r2, r3
   ba728:	bf14      	ite	ne
   ba72a:	6882      	ldrne	r2, [r0, #8]
   ba72c:	220f      	moveq	r2, #15
   ba72e:	42aa      	cmp	r2, r5
   ba730:	d20a      	bcs.n	ba748 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   ba732:	a901      	add	r1, sp, #4
   ba734:	9501      	str	r5, [sp, #4]
   ba736:	f7ff ffad 	bl	ba694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   ba73a:	4607      	mov	r7, r0
   ba73c:	4620      	mov	r0, r4
   ba73e:	f7ff ffcb 	bl	ba6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   ba742:	9b01      	ldr	r3, [sp, #4]
   ba744:	6027      	str	r7, [r4, #0]
   ba746:	60a3      	str	r3, [r4, #8]
   ba748:	b125      	cbz	r5, ba754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   ba74a:	6831      	ldr	r1, [r6, #0]
   ba74c:	6820      	ldr	r0, [r4, #0]
   ba74e:	462a      	mov	r2, r5
   ba750:	f7ff ffca 	bl	ba6e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba754:	6823      	ldr	r3, [r4, #0]
   ba756:	6065      	str	r5, [r4, #4]
   ba758:	2200      	movs	r2, #0
   ba75a:	555a      	strb	r2, [r3, r5]
   ba75c:	b003      	add	sp, #12
   ba75e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba760 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   ba760:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   ba762:	2400      	movs	r4, #0
   ba764:	2310      	movs	r3, #16
   ba766:	e9cd 3402 	strd	r3, r4, [sp, #8]
   ba76a:	6803      	ldr	r3, [r0, #0]
   ba76c:	4615      	mov	r5, r2
   ba76e:	699e      	ldr	r6, [r3, #24]
   ba770:	6812      	ldr	r2, [r2, #0]
   ba772:	466b      	mov	r3, sp
   ba774:	e9cd 4400 	strd	r4, r4, [sp]
   ba778:	47b0      	blx	r6
   ba77a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba77e:	f003 0306 	and.w	r3, r3, #6
   ba782:	2b06      	cmp	r3, #6
   ba784:	bf03      	ittte	eq
   ba786:	9b00      	ldreq	r3, [sp, #0]
   ba788:	602b      	streq	r3, [r5, #0]
   ba78a:	2001      	moveq	r0, #1
   ba78c:	4620      	movne	r0, r4
   ba78e:	b004      	add	sp, #16
   ba790:	bd70      	pop	{r4, r5, r6, pc}

000ba792 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   ba792:	9800      	ldr	r0, [sp, #0]
   ba794:	4290      	cmp	r0, r2
   ba796:	bf14      	ite	ne
   ba798:	2001      	movne	r0, #1
   ba79a:	2006      	moveq	r0, #6
   ba79c:	4770      	bx	lr
	...

000ba7a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   ba7a0:	b510      	push	{r4, lr}
   ba7a2:	4b03      	ldr	r3, [pc, #12]	; (ba7b0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   ba7a4:	6003      	str	r3, [r0, #0]
   ba7a6:	4604      	mov	r4, r0
   ba7a8:	f000 f8cd 	bl	ba946 <_ZNSt9type_infoD1Ev>
   ba7ac:	4620      	mov	r0, r4
   ba7ae:	bd10      	pop	{r4, pc}
   ba7b0:	000be03c 	.word	0x000be03c

000ba7b4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   ba7b4:	b510      	push	{r4, lr}
   ba7b6:	4604      	mov	r4, r0
   ba7b8:	f7ff fff2 	bl	ba7a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba7bc:	4620      	mov	r0, r4
   ba7be:	2108      	movs	r1, #8
   ba7c0:	f7f9 fc6f 	bl	b40a2 <_ZdlPvj>
   ba7c4:	4620      	mov	r0, r4
   ba7c6:	bd10      	pop	{r4, pc}

000ba7c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   ba7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba7cc:	461f      	mov	r7, r3
   ba7ce:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   ba7d2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   ba7d6:	4598      	cmp	r8, r3
   ba7d8:	4606      	mov	r6, r0
   ba7da:	4615      	mov	r5, r2
   ba7dc:	d107      	bne.n	ba7ee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba7de:	9907      	ldr	r1, [sp, #28]
   ba7e0:	f000 f8b4 	bl	ba94c <_ZNKSt9type_infoeqERKS_>
   ba7e4:	b118      	cbz	r0, ba7ee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba7e6:	7165      	strb	r5, [r4, #5]
   ba7e8:	2000      	movs	r0, #0
   ba7ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba7ee:	4639      	mov	r1, r7
   ba7f0:	4630      	mov	r0, r6
   ba7f2:	f000 f8ab 	bl	ba94c <_ZNKSt9type_infoeqERKS_>
   ba7f6:	2800      	cmp	r0, #0
   ba7f8:	d0f6      	beq.n	ba7e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   ba7fa:	2301      	movs	r3, #1
   ba7fc:	f8c4 8000 	str.w	r8, [r4]
   ba800:	7125      	strb	r5, [r4, #4]
   ba802:	71a3      	strb	r3, [r4, #6]
   ba804:	e7f0      	b.n	ba7e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000ba806 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   ba806:	b538      	push	{r3, r4, r5, lr}
   ba808:	4615      	mov	r5, r2
   ba80a:	461c      	mov	r4, r3
   ba80c:	f000 f89e 	bl	ba94c <_ZNKSt9type_infoeqERKS_>
   ba810:	b120      	cbz	r0, ba81c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   ba812:	2308      	movs	r3, #8
   ba814:	60e3      	str	r3, [r4, #12]
   ba816:	2306      	movs	r3, #6
   ba818:	6025      	str	r5, [r4, #0]
   ba81a:	7123      	strb	r3, [r4, #4]
   ba81c:	bd38      	pop	{r3, r4, r5, pc}

000ba81e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   ba81e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba820:	4605      	mov	r5, r0
   ba822:	460c      	mov	r4, r1
   ba824:	9201      	str	r2, [sp, #4]
   ba826:	461e      	mov	r6, r3
   ba828:	f000 f890 	bl	ba94c <_ZNKSt9type_infoeqERKS_>
   ba82c:	b950      	cbnz	r0, ba844 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba82e:	2e03      	cmp	r6, #3
   ba830:	d808      	bhi.n	ba844 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba832:	6823      	ldr	r3, [r4, #0]
   ba834:	9a01      	ldr	r2, [sp, #4]
   ba836:	695b      	ldr	r3, [r3, #20]
   ba838:	4629      	mov	r1, r5
   ba83a:	4620      	mov	r0, r4
   ba83c:	b002      	add	sp, #8
   ba83e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba842:	4718      	bx	r3
   ba844:	b002      	add	sp, #8
   ba846:	bd70      	pop	{r4, r5, r6, pc}

000ba848 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   ba848:	b510      	push	{r4, lr}
   ba84a:	4b03      	ldr	r3, [pc, #12]	; (ba858 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   ba84c:	6003      	str	r3, [r0, #0]
   ba84e:	4604      	mov	r4, r0
   ba850:	f7ff ffa6 	bl	ba7a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba854:	4620      	mov	r0, r4
   ba856:	bd10      	pop	{r4, pc}
   ba858:	000be09c 	.word	0x000be09c

000ba85c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   ba85c:	b510      	push	{r4, lr}
   ba85e:	4604      	mov	r4, r0
   ba860:	f7ff fff2 	bl	ba848 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   ba864:	4620      	mov	r0, r4
   ba866:	210c      	movs	r1, #12
   ba868:	f7f9 fc1b 	bl	b40a2 <_ZdlPvj>
   ba86c:	4620      	mov	r0, r4
   ba86e:	bd10      	pop	{r4, pc}

000ba870 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   ba870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba872:	9f08      	ldr	r7, [sp, #32]
   ba874:	4297      	cmp	r7, r2
   ba876:	4605      	mov	r5, r0
   ba878:	460e      	mov	r6, r1
   ba87a:	4614      	mov	r4, r2
   ba87c:	d00a      	beq.n	ba894 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   ba87e:	68a8      	ldr	r0, [r5, #8]
   ba880:	6802      	ldr	r2, [r0, #0]
   ba882:	9708      	str	r7, [sp, #32]
   ba884:	6a15      	ldr	r5, [r2, #32]
   ba886:	4631      	mov	r1, r6
   ba888:	4622      	mov	r2, r4
   ba88a:	46ac      	mov	ip, r5
   ba88c:	b003      	add	sp, #12
   ba88e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   ba892:	4760      	bx	ip
   ba894:	4619      	mov	r1, r3
   ba896:	9301      	str	r3, [sp, #4]
   ba898:	f000 f858 	bl	ba94c <_ZNKSt9type_infoeqERKS_>
   ba89c:	9b01      	ldr	r3, [sp, #4]
   ba89e:	2800      	cmp	r0, #0
   ba8a0:	d0ed      	beq.n	ba87e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   ba8a2:	2006      	movs	r0, #6
   ba8a4:	b003      	add	sp, #12
   ba8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba8a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   ba8a8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba8ac:	460d      	mov	r5, r1
   ba8ae:	4619      	mov	r1, r3
   ba8b0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   ba8b4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   ba8b8:	4681      	mov	r9, r0
   ba8ba:	4617      	mov	r7, r2
   ba8bc:	4698      	mov	r8, r3
   ba8be:	f000 f845 	bl	ba94c <_ZNKSt9type_infoeqERKS_>
   ba8c2:	b190      	cbz	r0, ba8ea <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   ba8c4:	2d00      	cmp	r5, #0
   ba8c6:	6034      	str	r4, [r6, #0]
   ba8c8:	7137      	strb	r7, [r6, #4]
   ba8ca:	db09      	blt.n	ba8e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   ba8cc:	1961      	adds	r1, r4, r5
   ba8ce:	458a      	cmp	sl, r1
   ba8d0:	bf0c      	ite	eq
   ba8d2:	2106      	moveq	r1, #6
   ba8d4:	2101      	movne	r1, #1
   ba8d6:	71b1      	strb	r1, [r6, #6]
   ba8d8:	2000      	movs	r0, #0
   ba8da:	b001      	add	sp, #4
   ba8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba8e0:	3502      	adds	r5, #2
   ba8e2:	d1f9      	bne.n	ba8d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba8e4:	2301      	movs	r3, #1
   ba8e6:	71b3      	strb	r3, [r6, #6]
   ba8e8:	e7f6      	b.n	ba8d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba8ea:	4554      	cmp	r4, sl
   ba8ec:	d106      	bne.n	ba8fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba8ee:	4659      	mov	r1, fp
   ba8f0:	4648      	mov	r0, r9
   ba8f2:	f000 f82b 	bl	ba94c <_ZNKSt9type_infoeqERKS_>
   ba8f6:	b108      	cbz	r0, ba8fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba8f8:	7177      	strb	r7, [r6, #5]
   ba8fa:	e7ed      	b.n	ba8d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba8fc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   ba900:	6803      	ldr	r3, [r0, #0]
   ba902:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   ba906:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   ba90a:	69dc      	ldr	r4, [r3, #28]
   ba90c:	463a      	mov	r2, r7
   ba90e:	4643      	mov	r3, r8
   ba910:	4629      	mov	r1, r5
   ba912:	46a4      	mov	ip, r4
   ba914:	b001      	add	sp, #4
   ba916:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba91a:	4760      	bx	ip

000ba91c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   ba91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba920:	4607      	mov	r7, r0
   ba922:	460c      	mov	r4, r1
   ba924:	4615      	mov	r5, r2
   ba926:	461e      	mov	r6, r3
   ba928:	f7ff ff6d 	bl	ba806 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   ba92c:	b948      	cbnz	r0, ba942 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   ba92e:	68b8      	ldr	r0, [r7, #8]
   ba930:	6803      	ldr	r3, [r0, #0]
   ba932:	699f      	ldr	r7, [r3, #24]
   ba934:	462a      	mov	r2, r5
   ba936:	4633      	mov	r3, r6
   ba938:	4621      	mov	r1, r4
   ba93a:	46bc      	mov	ip, r7
   ba93c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba940:	4760      	bx	ip
   ba942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba946 <_ZNSt9type_infoD1Ev>:
   ba946:	4770      	bx	lr

000ba948 <_ZNKSt9type_info14__is_pointer_pEv>:
   ba948:	2000      	movs	r0, #0
   ba94a:	4770      	bx	lr

000ba94c <_ZNKSt9type_infoeqERKS_>:
   ba94c:	4281      	cmp	r1, r0
   ba94e:	b508      	push	{r3, lr}
   ba950:	d00e      	beq.n	ba970 <_ZNKSt9type_infoeqERKS_+0x24>
   ba952:	6840      	ldr	r0, [r0, #4]
   ba954:	7803      	ldrb	r3, [r0, #0]
   ba956:	2b2a      	cmp	r3, #42	; 0x2a
   ba958:	d00c      	beq.n	ba974 <_ZNKSt9type_infoeqERKS_+0x28>
   ba95a:	6849      	ldr	r1, [r1, #4]
   ba95c:	780b      	ldrb	r3, [r1, #0]
   ba95e:	2b2a      	cmp	r3, #42	; 0x2a
   ba960:	bf08      	it	eq
   ba962:	3101      	addeq	r1, #1
   ba964:	f000 fec6 	bl	bb6f4 <strcmp>
   ba968:	fab0 f080 	clz	r0, r0
   ba96c:	0940      	lsrs	r0, r0, #5
   ba96e:	bd08      	pop	{r3, pc}
   ba970:	2001      	movs	r0, #1
   ba972:	e7fc      	b.n	ba96e <_ZNKSt9type_infoeqERKS_+0x22>
   ba974:	2000      	movs	r0, #0
   ba976:	e7fa      	b.n	ba96e <_ZNKSt9type_infoeqERKS_+0x22>

000ba978 <floorf>:
   ba978:	ee10 2a10 	vmov	r2, s0
   ba97c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   ba980:	3b7f      	subs	r3, #127	; 0x7f
   ba982:	2b16      	cmp	r3, #22
   ba984:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   ba988:	dc28      	bgt.n	ba9dc <floorf+0x64>
   ba98a:	2b00      	cmp	r3, #0
   ba98c:	db18      	blt.n	ba9c0 <floorf+0x48>
   ba98e:	491a      	ldr	r1, [pc, #104]	; (ba9f8 <floorf+0x80>)
   ba990:	4119      	asrs	r1, r3
   ba992:	420a      	tst	r2, r1
   ba994:	d021      	beq.n	ba9da <floorf+0x62>
   ba996:	eddf 7a19 	vldr	s15, [pc, #100]	; ba9fc <floorf+0x84>
   ba99a:	ee70 7a27 	vadd.f32	s15, s0, s15
   ba99e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba9a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba9a6:	dd18      	ble.n	ba9da <floorf+0x62>
   ba9a8:	2a00      	cmp	r2, #0
   ba9aa:	da04      	bge.n	ba9b6 <floorf+0x3e>
   ba9ac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   ba9b0:	fa40 f303 	asr.w	r3, r0, r3
   ba9b4:	441a      	add	r2, r3
   ba9b6:	ea22 0301 	bic.w	r3, r2, r1
   ba9ba:	ee00 3a10 	vmov	s0, r3
   ba9be:	4770      	bx	lr
   ba9c0:	eddf 7a0e 	vldr	s15, [pc, #56]	; ba9fc <floorf+0x84>
   ba9c4:	ee70 7a27 	vadd.f32	s15, s0, s15
   ba9c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba9cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba9d0:	dd03      	ble.n	ba9da <floorf+0x62>
   ba9d2:	2a00      	cmp	r2, #0
   ba9d4:	db08      	blt.n	ba9e8 <floorf+0x70>
   ba9d6:	ed9f 0a0a 	vldr	s0, [pc, #40]	; baa00 <floorf+0x88>
   ba9da:	4770      	bx	lr
   ba9dc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   ba9e0:	d3fb      	bcc.n	ba9da <floorf+0x62>
   ba9e2:	ee30 0a00 	vadd.f32	s0, s0, s0
   ba9e6:	4770      	bx	lr
   ba9e8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   ba9ec:	2900      	cmp	r1, #0
   ba9ee:	bf18      	it	ne
   ba9f0:	eeb0 0a67 	vmovne.f32	s0, s15
   ba9f4:	4770      	bx	lr
   ba9f6:	bf00      	nop
   ba9f8:	007fffff 	.word	0x007fffff
   ba9fc:	7149f2ca 	.word	0x7149f2ca
   baa00:	00000000 	.word	0x00000000

000baa04 <sqrt>:
   baa04:	b538      	push	{r3, r4, r5, lr}
   baa06:	ed2d 8b02 	vpush	{d8}
   baa0a:	ec55 4b10 	vmov	r4, r5, d0
   baa0e:	f000 f833 	bl	baa78 <__ieee754_sqrt>
   baa12:	4b18      	ldr	r3, [pc, #96]	; (baa74 <sqrt+0x70>)
   baa14:	eeb0 8a40 	vmov.f32	s16, s0
   baa18:	eef0 8a60 	vmov.f32	s17, s1
   baa1c:	f993 3000 	ldrsb.w	r3, [r3]
   baa20:	3301      	adds	r3, #1
   baa22:	d00d      	beq.n	baa40 <sqrt+0x3c>
   baa24:	4622      	mov	r2, r4
   baa26:	462b      	mov	r3, r5
   baa28:	4620      	mov	r0, r4
   baa2a:	4629      	mov	r1, r5
   baa2c:	f000 fd46 	bl	bb4bc <__aeabi_dcmpun>
   baa30:	b930      	cbnz	r0, baa40 <sqrt+0x3c>
   baa32:	2200      	movs	r2, #0
   baa34:	2300      	movs	r3, #0
   baa36:	4620      	mov	r0, r4
   baa38:	4629      	mov	r1, r5
   baa3a:	f000 fd17 	bl	bb46c <__aeabi_dcmplt>
   baa3e:	b930      	cbnz	r0, baa4e <sqrt+0x4a>
   baa40:	eeb0 0a48 	vmov.f32	s0, s16
   baa44:	eef0 0a68 	vmov.f32	s1, s17
   baa48:	ecbd 8b02 	vpop	{d8}
   baa4c:	bd38      	pop	{r3, r4, r5, pc}
   baa4e:	f7fd fb4d 	bl	b80ec <__errno>
   baa52:	2200      	movs	r2, #0
   baa54:	2300      	movs	r3, #0
   baa56:	2121      	movs	r1, #33	; 0x21
   baa58:	6001      	str	r1, [r0, #0]
   baa5a:	4610      	mov	r0, r2
   baa5c:	4619      	mov	r1, r3
   baa5e:	f000 fbbd 	bl	bb1dc <__aeabi_ddiv>
   baa62:	ec41 0b18 	vmov	d8, r0, r1
   baa66:	eeb0 0a48 	vmov.f32	s0, s16
   baa6a:	eef0 0a68 	vmov.f32	s1, s17
   baa6e:	ecbd 8b02 	vpop	{d8}
   baa72:	bd38      	pop	{r3, r4, r5, pc}
   baa74:	200352f0 	.word	0x200352f0

000baa78 <__ieee754_sqrt>:
   baa78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   baa7c:	4a63      	ldr	r2, [pc, #396]	; (bac0c <__ieee754_sqrt+0x194>)
   baa7e:	ec55 4b10 	vmov	r4, r5, d0
   baa82:	43aa      	bics	r2, r5
   baa84:	f000 809f 	beq.w	babc6 <__ieee754_sqrt+0x14e>
   baa88:	2d00      	cmp	r5, #0
   baa8a:	ee10 ca10 	vmov	ip, s0
   baa8e:	462b      	mov	r3, r5
   baa90:	dd54      	ble.n	bab3c <__ieee754_sqrt+0xc4>
   baa92:	1529      	asrs	r1, r5, #20
   baa94:	d063      	beq.n	bab5e <__ieee754_sqrt+0xe6>
   baa96:	f3c3 0313 	ubfx	r3, r3, #0, #20
   baa9a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   baa9e:	07c9      	lsls	r1, r1, #31
   baaa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   baaa4:	d404      	bmi.n	baab0 <__ieee754_sqrt+0x38>
   baaa6:	005b      	lsls	r3, r3, #1
   baaa8:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   baaac:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   baab0:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   baab4:	2600      	movs	r6, #0
   baab6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   baaba:	107f      	asrs	r7, r7, #1
   baabc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   baac0:	f04f 0e16 	mov.w	lr, #22
   baac4:	4634      	mov	r4, r6
   baac6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   baaca:	18a1      	adds	r1, r4, r2
   baacc:	4299      	cmp	r1, r3
   baace:	dc02      	bgt.n	baad6 <__ieee754_sqrt+0x5e>
   baad0:	1a5b      	subs	r3, r3, r1
   baad2:	188c      	adds	r4, r1, r2
   baad4:	4416      	add	r6, r2
   baad6:	005b      	lsls	r3, r3, #1
   baad8:	f1be 0e01 	subs.w	lr, lr, #1
   baadc:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   baae0:	ea4f 0252 	mov.w	r2, r2, lsr #1
   baae4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   baae8:	d1ef      	bne.n	baaca <__ieee754_sqrt+0x52>
   baaea:	4675      	mov	r5, lr
   baaec:	2020      	movs	r0, #32
   baaee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   baaf2:	e00a      	b.n	bab0a <__ieee754_sqrt+0x92>
   baaf4:	d044      	beq.n	bab80 <__ieee754_sqrt+0x108>
   baaf6:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   baafa:	3801      	subs	r0, #1
   baafc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   bab00:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bab04:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bab08:	d043      	beq.n	bab92 <__ieee754_sqrt+0x11a>
   bab0a:	42a3      	cmp	r3, r4
   bab0c:	eb02 010e 	add.w	r1, r2, lr
   bab10:	ddf0      	ble.n	baaf4 <__ieee754_sqrt+0x7c>
   bab12:	2900      	cmp	r1, #0
   bab14:	eb01 0e02 	add.w	lr, r1, r2
   bab18:	db0a      	blt.n	bab30 <__ieee754_sqrt+0xb8>
   bab1a:	46a0      	mov	r8, r4
   bab1c:	1b1b      	subs	r3, r3, r4
   bab1e:	4561      	cmp	r1, ip
   bab20:	bf88      	it	hi
   bab22:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   bab26:	ebac 0c01 	sub.w	ip, ip, r1
   bab2a:	4415      	add	r5, r2
   bab2c:	4644      	mov	r4, r8
   bab2e:	e7e2      	b.n	baaf6 <__ieee754_sqrt+0x7e>
   bab30:	f1be 0f00 	cmp.w	lr, #0
   bab34:	dbf1      	blt.n	bab1a <__ieee754_sqrt+0xa2>
   bab36:	f104 0801 	add.w	r8, r4, #1
   bab3a:	e7ef      	b.n	bab1c <__ieee754_sqrt+0xa4>
   bab3c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   bab40:	4322      	orrs	r2, r4
   bab42:	d038      	beq.n	babb6 <__ieee754_sqrt+0x13e>
   bab44:	2d00      	cmp	r5, #0
   bab46:	d14e      	bne.n	babe6 <__ieee754_sqrt+0x16e>
   bab48:	4629      	mov	r1, r5
   bab4a:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   bab4e:	3915      	subs	r1, #21
   bab50:	4613      	mov	r3, r2
   bab52:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   bab56:	2a00      	cmp	r2, #0
   bab58:	d0f7      	beq.n	bab4a <__ieee754_sqrt+0xd2>
   bab5a:	02d6      	lsls	r6, r2, #11
   bab5c:	d450      	bmi.n	bac00 <__ieee754_sqrt+0x188>
   bab5e:	2000      	movs	r0, #0
   bab60:	005b      	lsls	r3, r3, #1
   bab62:	02dd      	lsls	r5, r3, #11
   bab64:	4604      	mov	r4, r0
   bab66:	f100 0001 	add.w	r0, r0, #1
   bab6a:	d5f9      	bpl.n	bab60 <__ieee754_sqrt+0xe8>
   bab6c:	461a      	mov	r2, r3
   bab6e:	4663      	mov	r3, ip
   bab70:	fa0c fc00 	lsl.w	ip, ip, r0
   bab74:	f1c0 0020 	rsb	r0, r0, #32
   bab78:	40c3      	lsrs	r3, r0
   bab7a:	1b09      	subs	r1, r1, r4
   bab7c:	4313      	orrs	r3, r2
   bab7e:	e78a      	b.n	baa96 <__ieee754_sqrt+0x1e>
   bab80:	4561      	cmp	r1, ip
   bab82:	d8b8      	bhi.n	baaf6 <__ieee754_sqrt+0x7e>
   bab84:	2900      	cmp	r1, #0
   bab86:	eb01 0e02 	add.w	lr, r1, r2
   bab8a:	dbd1      	blt.n	bab30 <__ieee754_sqrt+0xb8>
   bab8c:	4698      	mov	r8, r3
   bab8e:	2300      	movs	r3, #0
   bab90:	e7c9      	b.n	bab26 <__ieee754_sqrt+0xae>
   bab92:	ea53 030c 	orrs.w	r3, r3, ip
   bab96:	d110      	bne.n	babba <__ieee754_sqrt+0x142>
   bab98:	0868      	lsrs	r0, r5, #1
   bab9a:	1071      	asrs	r1, r6, #1
   bab9c:	07f3      	lsls	r3, r6, #31
   bab9e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   baba2:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   baba6:	bf48      	it	mi
   baba8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   babac:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   babb0:	4602      	mov	r2, r0
   babb2:	ec43 2b10 	vmov	d0, r2, r3
   babb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   babba:	1c6a      	adds	r2, r5, #1
   babbc:	bf16      	itet	ne
   babbe:	1c68      	addne	r0, r5, #1
   babc0:	3601      	addeq	r6, #1
   babc2:	0840      	lsrne	r0, r0, #1
   babc4:	e7e9      	b.n	bab9a <__ieee754_sqrt+0x122>
   babc6:	ee10 2a10 	vmov	r2, s0
   babca:	ee10 0a10 	vmov	r0, s0
   babce:	462b      	mov	r3, r5
   babd0:	4629      	mov	r1, r5
   babd2:	f000 f9d9 	bl	baf88 <__aeabi_dmul>
   babd6:	4622      	mov	r2, r4
   babd8:	462b      	mov	r3, r5
   babda:	f000 f81f 	bl	bac1c <__adddf3>
   babde:	ec41 0b10 	vmov	d0, r0, r1
   babe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   babe6:	ee10 2a10 	vmov	r2, s0
   babea:	4620      	mov	r0, r4
   babec:	4629      	mov	r1, r5
   babee:	f000 f813 	bl	bac18 <__aeabi_dsub>
   babf2:	4602      	mov	r2, r0
   babf4:	460b      	mov	r3, r1
   babf6:	f000 faf1 	bl	bb1dc <__aeabi_ddiv>
   babfa:	ec41 0b10 	vmov	d0, r0, r1
   babfe:	e7da      	b.n	babb6 <__ieee754_sqrt+0x13e>
   bac00:	4663      	mov	r3, ip
   bac02:	2020      	movs	r0, #32
   bac04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bac08:	e7b6      	b.n	bab78 <__ieee754_sqrt+0x100>
   bac0a:	bf00      	nop
   bac0c:	7ff00000 	.word	0x7ff00000

000bac10 <__aeabi_drsub>:
   bac10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bac14:	e002      	b.n	bac1c <__adddf3>
   bac16:	bf00      	nop

000bac18 <__aeabi_dsub>:
   bac18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bac1c <__adddf3>:
   bac1c:	b530      	push	{r4, r5, lr}
   bac1e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bac22:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bac26:	ea94 0f05 	teq	r4, r5
   bac2a:	bf08      	it	eq
   bac2c:	ea90 0f02 	teqeq	r0, r2
   bac30:	bf1f      	itttt	ne
   bac32:	ea54 0c00 	orrsne.w	ip, r4, r0
   bac36:	ea55 0c02 	orrsne.w	ip, r5, r2
   bac3a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bac3e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bac42:	f000 80e2 	beq.w	bae0a <__adddf3+0x1ee>
   bac46:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bac4a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bac4e:	bfb8      	it	lt
   bac50:	426d      	neglt	r5, r5
   bac52:	dd0c      	ble.n	bac6e <__adddf3+0x52>
   bac54:	442c      	add	r4, r5
   bac56:	ea80 0202 	eor.w	r2, r0, r2
   bac5a:	ea81 0303 	eor.w	r3, r1, r3
   bac5e:	ea82 0000 	eor.w	r0, r2, r0
   bac62:	ea83 0101 	eor.w	r1, r3, r1
   bac66:	ea80 0202 	eor.w	r2, r0, r2
   bac6a:	ea81 0303 	eor.w	r3, r1, r3
   bac6e:	2d36      	cmp	r5, #54	; 0x36
   bac70:	bf88      	it	hi
   bac72:	bd30      	pophi	{r4, r5, pc}
   bac74:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bac78:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bac7c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bac80:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bac84:	d002      	beq.n	bac8c <__adddf3+0x70>
   bac86:	4240      	negs	r0, r0
   bac88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bac8c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bac90:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bac94:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bac98:	d002      	beq.n	baca0 <__adddf3+0x84>
   bac9a:	4252      	negs	r2, r2
   bac9c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   baca0:	ea94 0f05 	teq	r4, r5
   baca4:	f000 80a7 	beq.w	badf6 <__adddf3+0x1da>
   baca8:	f1a4 0401 	sub.w	r4, r4, #1
   bacac:	f1d5 0e20 	rsbs	lr, r5, #32
   bacb0:	db0d      	blt.n	bacce <__adddf3+0xb2>
   bacb2:	fa02 fc0e 	lsl.w	ip, r2, lr
   bacb6:	fa22 f205 	lsr.w	r2, r2, r5
   bacba:	1880      	adds	r0, r0, r2
   bacbc:	f141 0100 	adc.w	r1, r1, #0
   bacc0:	fa03 f20e 	lsl.w	r2, r3, lr
   bacc4:	1880      	adds	r0, r0, r2
   bacc6:	fa43 f305 	asr.w	r3, r3, r5
   bacca:	4159      	adcs	r1, r3
   baccc:	e00e      	b.n	bacec <__adddf3+0xd0>
   bacce:	f1a5 0520 	sub.w	r5, r5, #32
   bacd2:	f10e 0e20 	add.w	lr, lr, #32
   bacd6:	2a01      	cmp	r2, #1
   bacd8:	fa03 fc0e 	lsl.w	ip, r3, lr
   bacdc:	bf28      	it	cs
   bacde:	f04c 0c02 	orrcs.w	ip, ip, #2
   bace2:	fa43 f305 	asr.w	r3, r3, r5
   bace6:	18c0      	adds	r0, r0, r3
   bace8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bacec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bacf0:	d507      	bpl.n	bad02 <__adddf3+0xe6>
   bacf2:	f04f 0e00 	mov.w	lr, #0
   bacf6:	f1dc 0c00 	rsbs	ip, ip, #0
   bacfa:	eb7e 0000 	sbcs.w	r0, lr, r0
   bacfe:	eb6e 0101 	sbc.w	r1, lr, r1
   bad02:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bad06:	d31b      	bcc.n	bad40 <__adddf3+0x124>
   bad08:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bad0c:	d30c      	bcc.n	bad28 <__adddf3+0x10c>
   bad0e:	0849      	lsrs	r1, r1, #1
   bad10:	ea5f 0030 	movs.w	r0, r0, rrx
   bad14:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bad18:	f104 0401 	add.w	r4, r4, #1
   bad1c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bad20:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bad24:	f080 809a 	bcs.w	bae5c <__adddf3+0x240>
   bad28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bad2c:	bf08      	it	eq
   bad2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bad32:	f150 0000 	adcs.w	r0, r0, #0
   bad36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bad3a:	ea41 0105 	orr.w	r1, r1, r5
   bad3e:	bd30      	pop	{r4, r5, pc}
   bad40:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bad44:	4140      	adcs	r0, r0
   bad46:	eb41 0101 	adc.w	r1, r1, r1
   bad4a:	3c01      	subs	r4, #1
   bad4c:	bf28      	it	cs
   bad4e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bad52:	d2e9      	bcs.n	bad28 <__adddf3+0x10c>
   bad54:	f091 0f00 	teq	r1, #0
   bad58:	bf04      	itt	eq
   bad5a:	4601      	moveq	r1, r0
   bad5c:	2000      	moveq	r0, #0
   bad5e:	fab1 f381 	clz	r3, r1
   bad62:	bf08      	it	eq
   bad64:	3320      	addeq	r3, #32
   bad66:	f1a3 030b 	sub.w	r3, r3, #11
   bad6a:	f1b3 0220 	subs.w	r2, r3, #32
   bad6e:	da0c      	bge.n	bad8a <__adddf3+0x16e>
   bad70:	320c      	adds	r2, #12
   bad72:	dd08      	ble.n	bad86 <__adddf3+0x16a>
   bad74:	f102 0c14 	add.w	ip, r2, #20
   bad78:	f1c2 020c 	rsb	r2, r2, #12
   bad7c:	fa01 f00c 	lsl.w	r0, r1, ip
   bad80:	fa21 f102 	lsr.w	r1, r1, r2
   bad84:	e00c      	b.n	bada0 <__adddf3+0x184>
   bad86:	f102 0214 	add.w	r2, r2, #20
   bad8a:	bfd8      	it	le
   bad8c:	f1c2 0c20 	rsble	ip, r2, #32
   bad90:	fa01 f102 	lsl.w	r1, r1, r2
   bad94:	fa20 fc0c 	lsr.w	ip, r0, ip
   bad98:	bfdc      	itt	le
   bad9a:	ea41 010c 	orrle.w	r1, r1, ip
   bad9e:	4090      	lslle	r0, r2
   bada0:	1ae4      	subs	r4, r4, r3
   bada2:	bfa2      	ittt	ge
   bada4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bada8:	4329      	orrge	r1, r5
   badaa:	bd30      	popge	{r4, r5, pc}
   badac:	ea6f 0404 	mvn.w	r4, r4
   badb0:	3c1f      	subs	r4, #31
   badb2:	da1c      	bge.n	badee <__adddf3+0x1d2>
   badb4:	340c      	adds	r4, #12
   badb6:	dc0e      	bgt.n	badd6 <__adddf3+0x1ba>
   badb8:	f104 0414 	add.w	r4, r4, #20
   badbc:	f1c4 0220 	rsb	r2, r4, #32
   badc0:	fa20 f004 	lsr.w	r0, r0, r4
   badc4:	fa01 f302 	lsl.w	r3, r1, r2
   badc8:	ea40 0003 	orr.w	r0, r0, r3
   badcc:	fa21 f304 	lsr.w	r3, r1, r4
   badd0:	ea45 0103 	orr.w	r1, r5, r3
   badd4:	bd30      	pop	{r4, r5, pc}
   badd6:	f1c4 040c 	rsb	r4, r4, #12
   badda:	f1c4 0220 	rsb	r2, r4, #32
   badde:	fa20 f002 	lsr.w	r0, r0, r2
   bade2:	fa01 f304 	lsl.w	r3, r1, r4
   bade6:	ea40 0003 	orr.w	r0, r0, r3
   badea:	4629      	mov	r1, r5
   badec:	bd30      	pop	{r4, r5, pc}
   badee:	fa21 f004 	lsr.w	r0, r1, r4
   badf2:	4629      	mov	r1, r5
   badf4:	bd30      	pop	{r4, r5, pc}
   badf6:	f094 0f00 	teq	r4, #0
   badfa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   badfe:	bf06      	itte	eq
   bae00:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bae04:	3401      	addeq	r4, #1
   bae06:	3d01      	subne	r5, #1
   bae08:	e74e      	b.n	baca8 <__adddf3+0x8c>
   bae0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bae0e:	bf18      	it	ne
   bae10:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bae14:	d029      	beq.n	bae6a <__adddf3+0x24e>
   bae16:	ea94 0f05 	teq	r4, r5
   bae1a:	bf08      	it	eq
   bae1c:	ea90 0f02 	teqeq	r0, r2
   bae20:	d005      	beq.n	bae2e <__adddf3+0x212>
   bae22:	ea54 0c00 	orrs.w	ip, r4, r0
   bae26:	bf04      	itt	eq
   bae28:	4619      	moveq	r1, r3
   bae2a:	4610      	moveq	r0, r2
   bae2c:	bd30      	pop	{r4, r5, pc}
   bae2e:	ea91 0f03 	teq	r1, r3
   bae32:	bf1e      	ittt	ne
   bae34:	2100      	movne	r1, #0
   bae36:	2000      	movne	r0, #0
   bae38:	bd30      	popne	{r4, r5, pc}
   bae3a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bae3e:	d105      	bne.n	bae4c <__adddf3+0x230>
   bae40:	0040      	lsls	r0, r0, #1
   bae42:	4149      	adcs	r1, r1
   bae44:	bf28      	it	cs
   bae46:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bae4a:	bd30      	pop	{r4, r5, pc}
   bae4c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bae50:	bf3c      	itt	cc
   bae52:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bae56:	bd30      	popcc	{r4, r5, pc}
   bae58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bae5c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bae60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bae64:	f04f 0000 	mov.w	r0, #0
   bae68:	bd30      	pop	{r4, r5, pc}
   bae6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bae6e:	bf1a      	itte	ne
   bae70:	4619      	movne	r1, r3
   bae72:	4610      	movne	r0, r2
   bae74:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bae78:	bf1c      	itt	ne
   bae7a:	460b      	movne	r3, r1
   bae7c:	4602      	movne	r2, r0
   bae7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bae82:	bf06      	itte	eq
   bae84:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bae88:	ea91 0f03 	teqeq	r1, r3
   bae8c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bae90:	bd30      	pop	{r4, r5, pc}
   bae92:	bf00      	nop

000bae94 <__aeabi_ui2d>:
   bae94:	f090 0f00 	teq	r0, #0
   bae98:	bf04      	itt	eq
   bae9a:	2100      	moveq	r1, #0
   bae9c:	4770      	bxeq	lr
   bae9e:	b530      	push	{r4, r5, lr}
   baea0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baea4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baea8:	f04f 0500 	mov.w	r5, #0
   baeac:	f04f 0100 	mov.w	r1, #0
   baeb0:	e750      	b.n	bad54 <__adddf3+0x138>
   baeb2:	bf00      	nop

000baeb4 <__aeabi_i2d>:
   baeb4:	f090 0f00 	teq	r0, #0
   baeb8:	bf04      	itt	eq
   baeba:	2100      	moveq	r1, #0
   baebc:	4770      	bxeq	lr
   baebe:	b530      	push	{r4, r5, lr}
   baec0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baec4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baec8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   baecc:	bf48      	it	mi
   baece:	4240      	negmi	r0, r0
   baed0:	f04f 0100 	mov.w	r1, #0
   baed4:	e73e      	b.n	bad54 <__adddf3+0x138>
   baed6:	bf00      	nop

000baed8 <__aeabi_f2d>:
   baed8:	0042      	lsls	r2, r0, #1
   baeda:	ea4f 01e2 	mov.w	r1, r2, asr #3
   baede:	ea4f 0131 	mov.w	r1, r1, rrx
   baee2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   baee6:	bf1f      	itttt	ne
   baee8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   baeec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   baef0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   baef4:	4770      	bxne	lr
   baef6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   baefa:	bf08      	it	eq
   baefc:	4770      	bxeq	lr
   baefe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   baf02:	bf04      	itt	eq
   baf04:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   baf08:	4770      	bxeq	lr
   baf0a:	b530      	push	{r4, r5, lr}
   baf0c:	f44f 7460 	mov.w	r4, #896	; 0x380
   baf10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   baf14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   baf18:	e71c      	b.n	bad54 <__adddf3+0x138>
   baf1a:	bf00      	nop

000baf1c <__aeabi_ul2d>:
   baf1c:	ea50 0201 	orrs.w	r2, r0, r1
   baf20:	bf08      	it	eq
   baf22:	4770      	bxeq	lr
   baf24:	b530      	push	{r4, r5, lr}
   baf26:	f04f 0500 	mov.w	r5, #0
   baf2a:	e00a      	b.n	baf42 <__aeabi_l2d+0x16>

000baf2c <__aeabi_l2d>:
   baf2c:	ea50 0201 	orrs.w	r2, r0, r1
   baf30:	bf08      	it	eq
   baf32:	4770      	bxeq	lr
   baf34:	b530      	push	{r4, r5, lr}
   baf36:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   baf3a:	d502      	bpl.n	baf42 <__aeabi_l2d+0x16>
   baf3c:	4240      	negs	r0, r0
   baf3e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   baf42:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baf46:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baf4a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   baf4e:	f43f aed8 	beq.w	bad02 <__adddf3+0xe6>
   baf52:	f04f 0203 	mov.w	r2, #3
   baf56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   baf5a:	bf18      	it	ne
   baf5c:	3203      	addne	r2, #3
   baf5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   baf62:	bf18      	it	ne
   baf64:	3203      	addne	r2, #3
   baf66:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   baf6a:	f1c2 0320 	rsb	r3, r2, #32
   baf6e:	fa00 fc03 	lsl.w	ip, r0, r3
   baf72:	fa20 f002 	lsr.w	r0, r0, r2
   baf76:	fa01 fe03 	lsl.w	lr, r1, r3
   baf7a:	ea40 000e 	orr.w	r0, r0, lr
   baf7e:	fa21 f102 	lsr.w	r1, r1, r2
   baf82:	4414      	add	r4, r2
   baf84:	e6bd      	b.n	bad02 <__adddf3+0xe6>
   baf86:	bf00      	nop

000baf88 <__aeabi_dmul>:
   baf88:	b570      	push	{r4, r5, r6, lr}
   baf8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   baf8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   baf92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   baf96:	bf1d      	ittte	ne
   baf98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   baf9c:	ea94 0f0c 	teqne	r4, ip
   bafa0:	ea95 0f0c 	teqne	r5, ip
   bafa4:	f000 f8de 	bleq	bb164 <__aeabi_dmul+0x1dc>
   bafa8:	442c      	add	r4, r5
   bafaa:	ea81 0603 	eor.w	r6, r1, r3
   bafae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bafb2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bafb6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bafba:	bf18      	it	ne
   bafbc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bafc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bafc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bafc8:	d038      	beq.n	bb03c <__aeabi_dmul+0xb4>
   bafca:	fba0 ce02 	umull	ip, lr, r0, r2
   bafce:	f04f 0500 	mov.w	r5, #0
   bafd2:	fbe1 e502 	umlal	lr, r5, r1, r2
   bafd6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bafda:	fbe0 e503 	umlal	lr, r5, r0, r3
   bafde:	f04f 0600 	mov.w	r6, #0
   bafe2:	fbe1 5603 	umlal	r5, r6, r1, r3
   bafe6:	f09c 0f00 	teq	ip, #0
   bafea:	bf18      	it	ne
   bafec:	f04e 0e01 	orrne.w	lr, lr, #1
   baff0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   baff4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   baff8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   baffc:	d204      	bcs.n	bb008 <__aeabi_dmul+0x80>
   baffe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bb002:	416d      	adcs	r5, r5
   bb004:	eb46 0606 	adc.w	r6, r6, r6
   bb008:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bb00c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bb010:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bb014:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bb018:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bb01c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb020:	bf88      	it	hi
   bb022:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb026:	d81e      	bhi.n	bb066 <__aeabi_dmul+0xde>
   bb028:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bb02c:	bf08      	it	eq
   bb02e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bb032:	f150 0000 	adcs.w	r0, r0, #0
   bb036:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb03a:	bd70      	pop	{r4, r5, r6, pc}
   bb03c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bb040:	ea46 0101 	orr.w	r1, r6, r1
   bb044:	ea40 0002 	orr.w	r0, r0, r2
   bb048:	ea81 0103 	eor.w	r1, r1, r3
   bb04c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bb050:	bfc2      	ittt	gt
   bb052:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb056:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb05a:	bd70      	popgt	{r4, r5, r6, pc}
   bb05c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb060:	f04f 0e00 	mov.w	lr, #0
   bb064:	3c01      	subs	r4, #1
   bb066:	f300 80ab 	bgt.w	bb1c0 <__aeabi_dmul+0x238>
   bb06a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bb06e:	bfde      	ittt	le
   bb070:	2000      	movle	r0, #0
   bb072:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bb076:	bd70      	pople	{r4, r5, r6, pc}
   bb078:	f1c4 0400 	rsb	r4, r4, #0
   bb07c:	3c20      	subs	r4, #32
   bb07e:	da35      	bge.n	bb0ec <__aeabi_dmul+0x164>
   bb080:	340c      	adds	r4, #12
   bb082:	dc1b      	bgt.n	bb0bc <__aeabi_dmul+0x134>
   bb084:	f104 0414 	add.w	r4, r4, #20
   bb088:	f1c4 0520 	rsb	r5, r4, #32
   bb08c:	fa00 f305 	lsl.w	r3, r0, r5
   bb090:	fa20 f004 	lsr.w	r0, r0, r4
   bb094:	fa01 f205 	lsl.w	r2, r1, r5
   bb098:	ea40 0002 	orr.w	r0, r0, r2
   bb09c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bb0a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb0a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb0a8:	fa21 f604 	lsr.w	r6, r1, r4
   bb0ac:	eb42 0106 	adc.w	r1, r2, r6
   bb0b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb0b4:	bf08      	it	eq
   bb0b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb0ba:	bd70      	pop	{r4, r5, r6, pc}
   bb0bc:	f1c4 040c 	rsb	r4, r4, #12
   bb0c0:	f1c4 0520 	rsb	r5, r4, #32
   bb0c4:	fa00 f304 	lsl.w	r3, r0, r4
   bb0c8:	fa20 f005 	lsr.w	r0, r0, r5
   bb0cc:	fa01 f204 	lsl.w	r2, r1, r4
   bb0d0:	ea40 0002 	orr.w	r0, r0, r2
   bb0d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb0d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb0dc:	f141 0100 	adc.w	r1, r1, #0
   bb0e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb0e4:	bf08      	it	eq
   bb0e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb0ea:	bd70      	pop	{r4, r5, r6, pc}
   bb0ec:	f1c4 0520 	rsb	r5, r4, #32
   bb0f0:	fa00 f205 	lsl.w	r2, r0, r5
   bb0f4:	ea4e 0e02 	orr.w	lr, lr, r2
   bb0f8:	fa20 f304 	lsr.w	r3, r0, r4
   bb0fc:	fa01 f205 	lsl.w	r2, r1, r5
   bb100:	ea43 0302 	orr.w	r3, r3, r2
   bb104:	fa21 f004 	lsr.w	r0, r1, r4
   bb108:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb10c:	fa21 f204 	lsr.w	r2, r1, r4
   bb110:	ea20 0002 	bic.w	r0, r0, r2
   bb114:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bb118:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb11c:	bf08      	it	eq
   bb11e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb122:	bd70      	pop	{r4, r5, r6, pc}
   bb124:	f094 0f00 	teq	r4, #0
   bb128:	d10f      	bne.n	bb14a <__aeabi_dmul+0x1c2>
   bb12a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bb12e:	0040      	lsls	r0, r0, #1
   bb130:	eb41 0101 	adc.w	r1, r1, r1
   bb134:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb138:	bf08      	it	eq
   bb13a:	3c01      	subeq	r4, #1
   bb13c:	d0f7      	beq.n	bb12e <__aeabi_dmul+0x1a6>
   bb13e:	ea41 0106 	orr.w	r1, r1, r6
   bb142:	f095 0f00 	teq	r5, #0
   bb146:	bf18      	it	ne
   bb148:	4770      	bxne	lr
   bb14a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bb14e:	0052      	lsls	r2, r2, #1
   bb150:	eb43 0303 	adc.w	r3, r3, r3
   bb154:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bb158:	bf08      	it	eq
   bb15a:	3d01      	subeq	r5, #1
   bb15c:	d0f7      	beq.n	bb14e <__aeabi_dmul+0x1c6>
   bb15e:	ea43 0306 	orr.w	r3, r3, r6
   bb162:	4770      	bx	lr
   bb164:	ea94 0f0c 	teq	r4, ip
   bb168:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb16c:	bf18      	it	ne
   bb16e:	ea95 0f0c 	teqne	r5, ip
   bb172:	d00c      	beq.n	bb18e <__aeabi_dmul+0x206>
   bb174:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb178:	bf18      	it	ne
   bb17a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb17e:	d1d1      	bne.n	bb124 <__aeabi_dmul+0x19c>
   bb180:	ea81 0103 	eor.w	r1, r1, r3
   bb184:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb188:	f04f 0000 	mov.w	r0, #0
   bb18c:	bd70      	pop	{r4, r5, r6, pc}
   bb18e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb192:	bf06      	itte	eq
   bb194:	4610      	moveq	r0, r2
   bb196:	4619      	moveq	r1, r3
   bb198:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb19c:	d019      	beq.n	bb1d2 <__aeabi_dmul+0x24a>
   bb19e:	ea94 0f0c 	teq	r4, ip
   bb1a2:	d102      	bne.n	bb1aa <__aeabi_dmul+0x222>
   bb1a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bb1a8:	d113      	bne.n	bb1d2 <__aeabi_dmul+0x24a>
   bb1aa:	ea95 0f0c 	teq	r5, ip
   bb1ae:	d105      	bne.n	bb1bc <__aeabi_dmul+0x234>
   bb1b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bb1b4:	bf1c      	itt	ne
   bb1b6:	4610      	movne	r0, r2
   bb1b8:	4619      	movne	r1, r3
   bb1ba:	d10a      	bne.n	bb1d2 <__aeabi_dmul+0x24a>
   bb1bc:	ea81 0103 	eor.w	r1, r1, r3
   bb1c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb1c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb1c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb1cc:	f04f 0000 	mov.w	r0, #0
   bb1d0:	bd70      	pop	{r4, r5, r6, pc}
   bb1d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb1d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bb1da:	bd70      	pop	{r4, r5, r6, pc}

000bb1dc <__aeabi_ddiv>:
   bb1dc:	b570      	push	{r4, r5, r6, lr}
   bb1de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb1e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb1e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb1ea:	bf1d      	ittte	ne
   bb1ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb1f0:	ea94 0f0c 	teqne	r4, ip
   bb1f4:	ea95 0f0c 	teqne	r5, ip
   bb1f8:	f000 f8a7 	bleq	bb34a <__aeabi_ddiv+0x16e>
   bb1fc:	eba4 0405 	sub.w	r4, r4, r5
   bb200:	ea81 0e03 	eor.w	lr, r1, r3
   bb204:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb208:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb20c:	f000 8088 	beq.w	bb320 <__aeabi_ddiv+0x144>
   bb210:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb214:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bb218:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bb21c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bb220:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bb224:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bb228:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bb22c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bb230:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bb234:	429d      	cmp	r5, r3
   bb236:	bf08      	it	eq
   bb238:	4296      	cmpeq	r6, r2
   bb23a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bb23e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bb242:	d202      	bcs.n	bb24a <__aeabi_ddiv+0x6e>
   bb244:	085b      	lsrs	r3, r3, #1
   bb246:	ea4f 0232 	mov.w	r2, r2, rrx
   bb24a:	1ab6      	subs	r6, r6, r2
   bb24c:	eb65 0503 	sbc.w	r5, r5, r3
   bb250:	085b      	lsrs	r3, r3, #1
   bb252:	ea4f 0232 	mov.w	r2, r2, rrx
   bb256:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bb25a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bb25e:	ebb6 0e02 	subs.w	lr, r6, r2
   bb262:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb266:	bf22      	ittt	cs
   bb268:	1ab6      	subcs	r6, r6, r2
   bb26a:	4675      	movcs	r5, lr
   bb26c:	ea40 000c 	orrcs.w	r0, r0, ip
   bb270:	085b      	lsrs	r3, r3, #1
   bb272:	ea4f 0232 	mov.w	r2, r2, rrx
   bb276:	ebb6 0e02 	subs.w	lr, r6, r2
   bb27a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb27e:	bf22      	ittt	cs
   bb280:	1ab6      	subcs	r6, r6, r2
   bb282:	4675      	movcs	r5, lr
   bb284:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bb288:	085b      	lsrs	r3, r3, #1
   bb28a:	ea4f 0232 	mov.w	r2, r2, rrx
   bb28e:	ebb6 0e02 	subs.w	lr, r6, r2
   bb292:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb296:	bf22      	ittt	cs
   bb298:	1ab6      	subcs	r6, r6, r2
   bb29a:	4675      	movcs	r5, lr
   bb29c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bb2a0:	085b      	lsrs	r3, r3, #1
   bb2a2:	ea4f 0232 	mov.w	r2, r2, rrx
   bb2a6:	ebb6 0e02 	subs.w	lr, r6, r2
   bb2aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb2ae:	bf22      	ittt	cs
   bb2b0:	1ab6      	subcs	r6, r6, r2
   bb2b2:	4675      	movcs	r5, lr
   bb2b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bb2b8:	ea55 0e06 	orrs.w	lr, r5, r6
   bb2bc:	d018      	beq.n	bb2f0 <__aeabi_ddiv+0x114>
   bb2be:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bb2c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bb2c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bb2ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bb2ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bb2d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bb2d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bb2da:	d1c0      	bne.n	bb25e <__aeabi_ddiv+0x82>
   bb2dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb2e0:	d10b      	bne.n	bb2fa <__aeabi_ddiv+0x11e>
   bb2e2:	ea41 0100 	orr.w	r1, r1, r0
   bb2e6:	f04f 0000 	mov.w	r0, #0
   bb2ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bb2ee:	e7b6      	b.n	bb25e <__aeabi_ddiv+0x82>
   bb2f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb2f4:	bf04      	itt	eq
   bb2f6:	4301      	orreq	r1, r0
   bb2f8:	2000      	moveq	r0, #0
   bb2fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb2fe:	bf88      	it	hi
   bb300:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb304:	f63f aeaf 	bhi.w	bb066 <__aeabi_dmul+0xde>
   bb308:	ebb5 0c03 	subs.w	ip, r5, r3
   bb30c:	bf04      	itt	eq
   bb30e:	ebb6 0c02 	subseq.w	ip, r6, r2
   bb312:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb316:	f150 0000 	adcs.w	r0, r0, #0
   bb31a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb31e:	bd70      	pop	{r4, r5, r6, pc}
   bb320:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bb324:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bb328:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bb32c:	bfc2      	ittt	gt
   bb32e:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb332:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb336:	bd70      	popgt	{r4, r5, r6, pc}
   bb338:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb33c:	f04f 0e00 	mov.w	lr, #0
   bb340:	3c01      	subs	r4, #1
   bb342:	e690      	b.n	bb066 <__aeabi_dmul+0xde>
   bb344:	ea45 0e06 	orr.w	lr, r5, r6
   bb348:	e68d      	b.n	bb066 <__aeabi_dmul+0xde>
   bb34a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb34e:	ea94 0f0c 	teq	r4, ip
   bb352:	bf08      	it	eq
   bb354:	ea95 0f0c 	teqeq	r5, ip
   bb358:	f43f af3b 	beq.w	bb1d2 <__aeabi_dmul+0x24a>
   bb35c:	ea94 0f0c 	teq	r4, ip
   bb360:	d10a      	bne.n	bb378 <__aeabi_ddiv+0x19c>
   bb362:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb366:	f47f af34 	bne.w	bb1d2 <__aeabi_dmul+0x24a>
   bb36a:	ea95 0f0c 	teq	r5, ip
   bb36e:	f47f af25 	bne.w	bb1bc <__aeabi_dmul+0x234>
   bb372:	4610      	mov	r0, r2
   bb374:	4619      	mov	r1, r3
   bb376:	e72c      	b.n	bb1d2 <__aeabi_dmul+0x24a>
   bb378:	ea95 0f0c 	teq	r5, ip
   bb37c:	d106      	bne.n	bb38c <__aeabi_ddiv+0x1b0>
   bb37e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb382:	f43f aefd 	beq.w	bb180 <__aeabi_dmul+0x1f8>
   bb386:	4610      	mov	r0, r2
   bb388:	4619      	mov	r1, r3
   bb38a:	e722      	b.n	bb1d2 <__aeabi_dmul+0x24a>
   bb38c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb390:	bf18      	it	ne
   bb392:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb396:	f47f aec5 	bne.w	bb124 <__aeabi_dmul+0x19c>
   bb39a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bb39e:	f47f af0d 	bne.w	bb1bc <__aeabi_dmul+0x234>
   bb3a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bb3a6:	f47f aeeb 	bne.w	bb180 <__aeabi_dmul+0x1f8>
   bb3aa:	e712      	b.n	bb1d2 <__aeabi_dmul+0x24a>

000bb3ac <__gedf2>:
   bb3ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bb3b0:	e006      	b.n	bb3c0 <__cmpdf2+0x4>
   bb3b2:	bf00      	nop

000bb3b4 <__ledf2>:
   bb3b4:	f04f 0c01 	mov.w	ip, #1
   bb3b8:	e002      	b.n	bb3c0 <__cmpdf2+0x4>
   bb3ba:	bf00      	nop

000bb3bc <__cmpdf2>:
   bb3bc:	f04f 0c01 	mov.w	ip, #1
   bb3c0:	f84d cd04 	str.w	ip, [sp, #-4]!
   bb3c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb3c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb3cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb3d0:	bf18      	it	ne
   bb3d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bb3d6:	d01b      	beq.n	bb410 <__cmpdf2+0x54>
   bb3d8:	b001      	add	sp, #4
   bb3da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bb3de:	bf0c      	ite	eq
   bb3e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bb3e4:	ea91 0f03 	teqne	r1, r3
   bb3e8:	bf02      	ittt	eq
   bb3ea:	ea90 0f02 	teqeq	r0, r2
   bb3ee:	2000      	moveq	r0, #0
   bb3f0:	4770      	bxeq	lr
   bb3f2:	f110 0f00 	cmn.w	r0, #0
   bb3f6:	ea91 0f03 	teq	r1, r3
   bb3fa:	bf58      	it	pl
   bb3fc:	4299      	cmppl	r1, r3
   bb3fe:	bf08      	it	eq
   bb400:	4290      	cmpeq	r0, r2
   bb402:	bf2c      	ite	cs
   bb404:	17d8      	asrcs	r0, r3, #31
   bb406:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bb40a:	f040 0001 	orr.w	r0, r0, #1
   bb40e:	4770      	bx	lr
   bb410:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb414:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb418:	d102      	bne.n	bb420 <__cmpdf2+0x64>
   bb41a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb41e:	d107      	bne.n	bb430 <__cmpdf2+0x74>
   bb420:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb424:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb428:	d1d6      	bne.n	bb3d8 <__cmpdf2+0x1c>
   bb42a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb42e:	d0d3      	beq.n	bb3d8 <__cmpdf2+0x1c>
   bb430:	f85d 0b04 	ldr.w	r0, [sp], #4
   bb434:	4770      	bx	lr
   bb436:	bf00      	nop

000bb438 <__aeabi_cdrcmple>:
   bb438:	4684      	mov	ip, r0
   bb43a:	4610      	mov	r0, r2
   bb43c:	4662      	mov	r2, ip
   bb43e:	468c      	mov	ip, r1
   bb440:	4619      	mov	r1, r3
   bb442:	4663      	mov	r3, ip
   bb444:	e000      	b.n	bb448 <__aeabi_cdcmpeq>
   bb446:	bf00      	nop

000bb448 <__aeabi_cdcmpeq>:
   bb448:	b501      	push	{r0, lr}
   bb44a:	f7ff ffb7 	bl	bb3bc <__cmpdf2>
   bb44e:	2800      	cmp	r0, #0
   bb450:	bf48      	it	mi
   bb452:	f110 0f00 	cmnmi.w	r0, #0
   bb456:	bd01      	pop	{r0, pc}

000bb458 <__aeabi_dcmpeq>:
   bb458:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb45c:	f7ff fff4 	bl	bb448 <__aeabi_cdcmpeq>
   bb460:	bf0c      	ite	eq
   bb462:	2001      	moveq	r0, #1
   bb464:	2000      	movne	r0, #0
   bb466:	f85d fb08 	ldr.w	pc, [sp], #8
   bb46a:	bf00      	nop

000bb46c <__aeabi_dcmplt>:
   bb46c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb470:	f7ff ffea 	bl	bb448 <__aeabi_cdcmpeq>
   bb474:	bf34      	ite	cc
   bb476:	2001      	movcc	r0, #1
   bb478:	2000      	movcs	r0, #0
   bb47a:	f85d fb08 	ldr.w	pc, [sp], #8
   bb47e:	bf00      	nop

000bb480 <__aeabi_dcmple>:
   bb480:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb484:	f7ff ffe0 	bl	bb448 <__aeabi_cdcmpeq>
   bb488:	bf94      	ite	ls
   bb48a:	2001      	movls	r0, #1
   bb48c:	2000      	movhi	r0, #0
   bb48e:	f85d fb08 	ldr.w	pc, [sp], #8
   bb492:	bf00      	nop

000bb494 <__aeabi_dcmpge>:
   bb494:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb498:	f7ff ffce 	bl	bb438 <__aeabi_cdrcmple>
   bb49c:	bf94      	ite	ls
   bb49e:	2001      	movls	r0, #1
   bb4a0:	2000      	movhi	r0, #0
   bb4a2:	f85d fb08 	ldr.w	pc, [sp], #8
   bb4a6:	bf00      	nop

000bb4a8 <__aeabi_dcmpgt>:
   bb4a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb4ac:	f7ff ffc4 	bl	bb438 <__aeabi_cdrcmple>
   bb4b0:	bf34      	ite	cc
   bb4b2:	2001      	movcc	r0, #1
   bb4b4:	2000      	movcs	r0, #0
   bb4b6:	f85d fb08 	ldr.w	pc, [sp], #8
   bb4ba:	bf00      	nop

000bb4bc <__aeabi_dcmpun>:
   bb4bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb4c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb4c4:	d102      	bne.n	bb4cc <__aeabi_dcmpun+0x10>
   bb4c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb4ca:	d10a      	bne.n	bb4e2 <__aeabi_dcmpun+0x26>
   bb4cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb4d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb4d4:	d102      	bne.n	bb4dc <__aeabi_dcmpun+0x20>
   bb4d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb4da:	d102      	bne.n	bb4e2 <__aeabi_dcmpun+0x26>
   bb4dc:	f04f 0000 	mov.w	r0, #0
   bb4e0:	4770      	bx	lr
   bb4e2:	f04f 0001 	mov.w	r0, #1
   bb4e6:	4770      	bx	lr

000bb4e8 <__aeabi_d2uiz>:
   bb4e8:	004a      	lsls	r2, r1, #1
   bb4ea:	d211      	bcs.n	bb510 <__aeabi_d2uiz+0x28>
   bb4ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bb4f0:	d211      	bcs.n	bb516 <__aeabi_d2uiz+0x2e>
   bb4f2:	d50d      	bpl.n	bb510 <__aeabi_d2uiz+0x28>
   bb4f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bb4f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bb4fc:	d40e      	bmi.n	bb51c <__aeabi_d2uiz+0x34>
   bb4fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb502:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bb506:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bb50a:	fa23 f002 	lsr.w	r0, r3, r2
   bb50e:	4770      	bx	lr
   bb510:	f04f 0000 	mov.w	r0, #0
   bb514:	4770      	bx	lr
   bb516:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bb51a:	d102      	bne.n	bb522 <__aeabi_d2uiz+0x3a>
   bb51c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb520:	4770      	bx	lr
   bb522:	f04f 0000 	mov.w	r0, #0
   bb526:	4770      	bx	lr

000bb528 <__aeabi_d2f>:
   bb528:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bb52c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bb530:	bf24      	itt	cs
   bb532:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bb536:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bb53a:	d90d      	bls.n	bb558 <__aeabi_d2f+0x30>
   bb53c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bb540:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bb544:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bb548:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bb54c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bb550:	bf08      	it	eq
   bb552:	f020 0001 	biceq.w	r0, r0, #1
   bb556:	4770      	bx	lr
   bb558:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bb55c:	d121      	bne.n	bb5a2 <__aeabi_d2f+0x7a>
   bb55e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bb562:	bfbc      	itt	lt
   bb564:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bb568:	4770      	bxlt	lr
   bb56a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb56e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bb572:	f1c2 0218 	rsb	r2, r2, #24
   bb576:	f1c2 0c20 	rsb	ip, r2, #32
   bb57a:	fa10 f30c 	lsls.w	r3, r0, ip
   bb57e:	fa20 f002 	lsr.w	r0, r0, r2
   bb582:	bf18      	it	ne
   bb584:	f040 0001 	orrne.w	r0, r0, #1
   bb588:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb58c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bb590:	fa03 fc0c 	lsl.w	ip, r3, ip
   bb594:	ea40 000c 	orr.w	r0, r0, ip
   bb598:	fa23 f302 	lsr.w	r3, r3, r2
   bb59c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bb5a0:	e7cc      	b.n	bb53c <__aeabi_d2f+0x14>
   bb5a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bb5a6:	d107      	bne.n	bb5b8 <__aeabi_d2f+0x90>
   bb5a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bb5ac:	bf1e      	ittt	ne
   bb5ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bb5b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bb5b6:	4770      	bxne	lr
   bb5b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bb5bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bb5c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bb5c4:	4770      	bx	lr
   bb5c6:	bf00      	nop

000bb5c8 <__aeabi_d2ulz>:
   bb5c8:	b5d0      	push	{r4, r6, r7, lr}
   bb5ca:	4b0c      	ldr	r3, [pc, #48]	; (bb5fc <__aeabi_d2ulz+0x34>)
   bb5cc:	2200      	movs	r2, #0
   bb5ce:	4606      	mov	r6, r0
   bb5d0:	460f      	mov	r7, r1
   bb5d2:	f7ff fcd9 	bl	baf88 <__aeabi_dmul>
   bb5d6:	f7ff ff87 	bl	bb4e8 <__aeabi_d2uiz>
   bb5da:	4604      	mov	r4, r0
   bb5dc:	f7ff fc5a 	bl	bae94 <__aeabi_ui2d>
   bb5e0:	4b07      	ldr	r3, [pc, #28]	; (bb600 <__aeabi_d2ulz+0x38>)
   bb5e2:	2200      	movs	r2, #0
   bb5e4:	f7ff fcd0 	bl	baf88 <__aeabi_dmul>
   bb5e8:	4602      	mov	r2, r0
   bb5ea:	460b      	mov	r3, r1
   bb5ec:	4630      	mov	r0, r6
   bb5ee:	4639      	mov	r1, r7
   bb5f0:	f7ff fb12 	bl	bac18 <__aeabi_dsub>
   bb5f4:	f7ff ff78 	bl	bb4e8 <__aeabi_d2uiz>
   bb5f8:	4621      	mov	r1, r4
   bb5fa:	bdd0      	pop	{r4, r6, r7, pc}
   bb5fc:	3df00000 	.word	0x3df00000
   bb600:	41f00000 	.word	0x41f00000

000bb604 <atexit>:
   bb604:	2300      	movs	r3, #0
   bb606:	4601      	mov	r1, r0
   bb608:	461a      	mov	r2, r3
   bb60a:	4618      	mov	r0, r3
   bb60c:	f000 bfce 	b.w	bc5ac <__register_exitproc>

000bb610 <atoi>:
   bb610:	220a      	movs	r2, #10
   bb612:	2100      	movs	r1, #0
   bb614:	f000 bfc0 	b.w	bc598 <strtol>

000bb618 <memcmp>:
   bb618:	b510      	push	{r4, lr}
   bb61a:	3901      	subs	r1, #1
   bb61c:	4402      	add	r2, r0
   bb61e:	4290      	cmp	r0, r2
   bb620:	d101      	bne.n	bb626 <memcmp+0xe>
   bb622:	2000      	movs	r0, #0
   bb624:	e005      	b.n	bb632 <memcmp+0x1a>
   bb626:	7803      	ldrb	r3, [r0, #0]
   bb628:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bb62c:	42a3      	cmp	r3, r4
   bb62e:	d001      	beq.n	bb634 <memcmp+0x1c>
   bb630:	1b18      	subs	r0, r3, r4
   bb632:	bd10      	pop	{r4, pc}
   bb634:	3001      	adds	r0, #1
   bb636:	e7f2      	b.n	bb61e <memcmp+0x6>

000bb638 <memcpy>:
   bb638:	440a      	add	r2, r1
   bb63a:	4291      	cmp	r1, r2
   bb63c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bb640:	d100      	bne.n	bb644 <memcpy+0xc>
   bb642:	4770      	bx	lr
   bb644:	b510      	push	{r4, lr}
   bb646:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb64a:	f803 4f01 	strb.w	r4, [r3, #1]!
   bb64e:	4291      	cmp	r1, r2
   bb650:	d1f9      	bne.n	bb646 <memcpy+0xe>
   bb652:	bd10      	pop	{r4, pc}

000bb654 <memmove>:
   bb654:	4288      	cmp	r0, r1
   bb656:	b510      	push	{r4, lr}
   bb658:	eb01 0402 	add.w	r4, r1, r2
   bb65c:	d902      	bls.n	bb664 <memmove+0x10>
   bb65e:	4284      	cmp	r4, r0
   bb660:	4623      	mov	r3, r4
   bb662:	d807      	bhi.n	bb674 <memmove+0x20>
   bb664:	1e43      	subs	r3, r0, #1
   bb666:	42a1      	cmp	r1, r4
   bb668:	d008      	beq.n	bb67c <memmove+0x28>
   bb66a:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb66e:	f803 2f01 	strb.w	r2, [r3, #1]!
   bb672:	e7f8      	b.n	bb666 <memmove+0x12>
   bb674:	4402      	add	r2, r0
   bb676:	4601      	mov	r1, r0
   bb678:	428a      	cmp	r2, r1
   bb67a:	d100      	bne.n	bb67e <memmove+0x2a>
   bb67c:	bd10      	pop	{r4, pc}
   bb67e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bb682:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bb686:	e7f7      	b.n	bb678 <memmove+0x24>

000bb688 <memset>:
   bb688:	4402      	add	r2, r0
   bb68a:	4603      	mov	r3, r0
   bb68c:	4293      	cmp	r3, r2
   bb68e:	d100      	bne.n	bb692 <memset+0xa>
   bb690:	4770      	bx	lr
   bb692:	f803 1b01 	strb.w	r1, [r3], #1
   bb696:	e7f9      	b.n	bb68c <memset+0x4>

000bb698 <srand>:
   bb698:	b538      	push	{r3, r4, r5, lr}
   bb69a:	4b10      	ldr	r3, [pc, #64]	; (bb6dc <srand+0x44>)
   bb69c:	681d      	ldr	r5, [r3, #0]
   bb69e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb6a0:	4604      	mov	r4, r0
   bb6a2:	b9b3      	cbnz	r3, bb6d2 <srand+0x3a>
   bb6a4:	2018      	movs	r0, #24
   bb6a6:	f7fc fce9 	bl	b807c <malloc>
   bb6aa:	4602      	mov	r2, r0
   bb6ac:	63a8      	str	r0, [r5, #56]	; 0x38
   bb6ae:	b920      	cbnz	r0, bb6ba <srand+0x22>
   bb6b0:	4b0b      	ldr	r3, [pc, #44]	; (bb6e0 <srand+0x48>)
   bb6b2:	480c      	ldr	r0, [pc, #48]	; (bb6e4 <srand+0x4c>)
   bb6b4:	2142      	movs	r1, #66	; 0x42
   bb6b6:	f7fc fd21 	bl	b80fc <__assert_func>
   bb6ba:	490b      	ldr	r1, [pc, #44]	; (bb6e8 <srand+0x50>)
   bb6bc:	4b0b      	ldr	r3, [pc, #44]	; (bb6ec <srand+0x54>)
   bb6be:	e9c0 1300 	strd	r1, r3, [r0]
   bb6c2:	4b0b      	ldr	r3, [pc, #44]	; (bb6f0 <srand+0x58>)
   bb6c4:	6083      	str	r3, [r0, #8]
   bb6c6:	230b      	movs	r3, #11
   bb6c8:	8183      	strh	r3, [r0, #12]
   bb6ca:	2100      	movs	r1, #0
   bb6cc:	2001      	movs	r0, #1
   bb6ce:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bb6d2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb6d4:	2200      	movs	r2, #0
   bb6d6:	611c      	str	r4, [r3, #16]
   bb6d8:	615a      	str	r2, [r3, #20]
   bb6da:	bd38      	pop	{r3, r4, r5, pc}
   bb6dc:	200352f4 	.word	0x200352f4
   bb6e0:	000be0d5 	.word	0x000be0d5
   bb6e4:	000be0ec 	.word	0x000be0ec
   bb6e8:	abcd330e 	.word	0xabcd330e
   bb6ec:	e66d1234 	.word	0xe66d1234
   bb6f0:	0005deec 	.word	0x0005deec

000bb6f4 <strcmp>:
   bb6f4:	f810 2b01 	ldrb.w	r2, [r0], #1
   bb6f8:	f811 3b01 	ldrb.w	r3, [r1], #1
   bb6fc:	2a01      	cmp	r2, #1
   bb6fe:	bf28      	it	cs
   bb700:	429a      	cmpcs	r2, r3
   bb702:	d0f7      	beq.n	bb6f4 <strcmp>
   bb704:	1ad0      	subs	r0, r2, r3
   bb706:	4770      	bx	lr

000bb708 <strcpy>:
   bb708:	4603      	mov	r3, r0
   bb70a:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb70e:	f803 2b01 	strb.w	r2, [r3], #1
   bb712:	2a00      	cmp	r2, #0
   bb714:	d1f9      	bne.n	bb70a <strcpy+0x2>
   bb716:	4770      	bx	lr

000bb718 <strlen>:
   bb718:	4603      	mov	r3, r0
   bb71a:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb71e:	2a00      	cmp	r2, #0
   bb720:	d1fb      	bne.n	bb71a <strlen+0x2>
   bb722:	1a18      	subs	r0, r3, r0
   bb724:	3801      	subs	r0, #1
   bb726:	4770      	bx	lr

000bb728 <strncmp>:
   bb728:	b510      	push	{r4, lr}
   bb72a:	b17a      	cbz	r2, bb74c <strncmp+0x24>
   bb72c:	4603      	mov	r3, r0
   bb72e:	3901      	subs	r1, #1
   bb730:	1884      	adds	r4, r0, r2
   bb732:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb736:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bb73a:	4290      	cmp	r0, r2
   bb73c:	d101      	bne.n	bb742 <strncmp+0x1a>
   bb73e:	42a3      	cmp	r3, r4
   bb740:	d101      	bne.n	bb746 <strncmp+0x1e>
   bb742:	1a80      	subs	r0, r0, r2
   bb744:	bd10      	pop	{r4, pc}
   bb746:	2800      	cmp	r0, #0
   bb748:	d1f3      	bne.n	bb732 <strncmp+0xa>
   bb74a:	e7fa      	b.n	bb742 <strncmp+0x1a>
   bb74c:	4610      	mov	r0, r2
   bb74e:	e7f9      	b.n	bb744 <strncmp+0x1c>

000bb750 <strnlen>:
   bb750:	b510      	push	{r4, lr}
   bb752:	4602      	mov	r2, r0
   bb754:	4401      	add	r1, r0
   bb756:	428a      	cmp	r2, r1
   bb758:	4613      	mov	r3, r2
   bb75a:	d003      	beq.n	bb764 <strnlen+0x14>
   bb75c:	781c      	ldrb	r4, [r3, #0]
   bb75e:	3201      	adds	r2, #1
   bb760:	2c00      	cmp	r4, #0
   bb762:	d1f8      	bne.n	bb756 <strnlen+0x6>
   bb764:	1a18      	subs	r0, r3, r0
   bb766:	bd10      	pop	{r4, pc}

000bb768 <strstr>:
   bb768:	780a      	ldrb	r2, [r1, #0]
   bb76a:	b570      	push	{r4, r5, r6, lr}
   bb76c:	b96a      	cbnz	r2, bb78a <strstr+0x22>
   bb76e:	bd70      	pop	{r4, r5, r6, pc}
   bb770:	429a      	cmp	r2, r3
   bb772:	d109      	bne.n	bb788 <strstr+0x20>
   bb774:	460c      	mov	r4, r1
   bb776:	4605      	mov	r5, r0
   bb778:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bb77c:	2b00      	cmp	r3, #0
   bb77e:	d0f6      	beq.n	bb76e <strstr+0x6>
   bb780:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bb784:	429e      	cmp	r6, r3
   bb786:	d0f7      	beq.n	bb778 <strstr+0x10>
   bb788:	3001      	adds	r0, #1
   bb78a:	7803      	ldrb	r3, [r0, #0]
   bb78c:	2b00      	cmp	r3, #0
   bb78e:	d1ef      	bne.n	bb770 <strstr+0x8>
   bb790:	4618      	mov	r0, r3
   bb792:	e7ec      	b.n	bb76e <strstr+0x6>

000bb794 <sulp>:
   bb794:	b570      	push	{r4, r5, r6, lr}
   bb796:	4604      	mov	r4, r0
   bb798:	460d      	mov	r5, r1
   bb79a:	ec45 4b10 	vmov	d0, r4, r5
   bb79e:	4616      	mov	r6, r2
   bb7a0:	f001 fe5e 	bl	bd460 <__ulp>
   bb7a4:	ec51 0b10 	vmov	r0, r1, d0
   bb7a8:	b17e      	cbz	r6, bb7ca <sulp+0x36>
   bb7aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bb7ae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bb7b2:	2b00      	cmp	r3, #0
   bb7b4:	dd09      	ble.n	bb7ca <sulp+0x36>
   bb7b6:	051b      	lsls	r3, r3, #20
   bb7b8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bb7bc:	2400      	movs	r4, #0
   bb7be:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bb7c2:	4622      	mov	r2, r4
   bb7c4:	462b      	mov	r3, r5
   bb7c6:	f7ff fbdf 	bl	baf88 <__aeabi_dmul>
   bb7ca:	bd70      	pop	{r4, r5, r6, pc}
   bb7cc:	0000      	movs	r0, r0
	...

000bb7d0 <_strtod_l>:
   bb7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb7d4:	ed2d 8b02 	vpush	{d8}
   bb7d8:	b09d      	sub	sp, #116	; 0x74
   bb7da:	461f      	mov	r7, r3
   bb7dc:	2300      	movs	r3, #0
   bb7de:	9318      	str	r3, [sp, #96]	; 0x60
   bb7e0:	4ba2      	ldr	r3, [pc, #648]	; (bba6c <_strtod_l+0x29c>)
   bb7e2:	9213      	str	r2, [sp, #76]	; 0x4c
   bb7e4:	681b      	ldr	r3, [r3, #0]
   bb7e6:	9305      	str	r3, [sp, #20]
   bb7e8:	4604      	mov	r4, r0
   bb7ea:	4618      	mov	r0, r3
   bb7ec:	4688      	mov	r8, r1
   bb7ee:	f7ff ff93 	bl	bb718 <strlen>
   bb7f2:	f04f 0a00 	mov.w	sl, #0
   bb7f6:	4605      	mov	r5, r0
   bb7f8:	f04f 0b00 	mov.w	fp, #0
   bb7fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb800:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb802:	781a      	ldrb	r2, [r3, #0]
   bb804:	2a2b      	cmp	r2, #43	; 0x2b
   bb806:	d04e      	beq.n	bb8a6 <_strtod_l+0xd6>
   bb808:	d83b      	bhi.n	bb882 <_strtod_l+0xb2>
   bb80a:	2a0d      	cmp	r2, #13
   bb80c:	d834      	bhi.n	bb878 <_strtod_l+0xa8>
   bb80e:	2a08      	cmp	r2, #8
   bb810:	d834      	bhi.n	bb87c <_strtod_l+0xac>
   bb812:	2a00      	cmp	r2, #0
   bb814:	d03e      	beq.n	bb894 <_strtod_l+0xc4>
   bb816:	2300      	movs	r3, #0
   bb818:	930a      	str	r3, [sp, #40]	; 0x28
   bb81a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bb81c:	7833      	ldrb	r3, [r6, #0]
   bb81e:	2b30      	cmp	r3, #48	; 0x30
   bb820:	f040 80b0 	bne.w	bb984 <_strtod_l+0x1b4>
   bb824:	7873      	ldrb	r3, [r6, #1]
   bb826:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb82a:	2b58      	cmp	r3, #88	; 0x58
   bb82c:	d168      	bne.n	bb900 <_strtod_l+0x130>
   bb82e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb830:	9301      	str	r3, [sp, #4]
   bb832:	ab18      	add	r3, sp, #96	; 0x60
   bb834:	9702      	str	r7, [sp, #8]
   bb836:	9300      	str	r3, [sp, #0]
   bb838:	4a8d      	ldr	r2, [pc, #564]	; (bba70 <_strtod_l+0x2a0>)
   bb83a:	ab19      	add	r3, sp, #100	; 0x64
   bb83c:	a917      	add	r1, sp, #92	; 0x5c
   bb83e:	4620      	mov	r0, r4
   bb840:	f000 ff7e 	bl	bc740 <__gethex>
   bb844:	f010 0707 	ands.w	r7, r0, #7
   bb848:	4605      	mov	r5, r0
   bb84a:	d005      	beq.n	bb858 <_strtod_l+0x88>
   bb84c:	2f06      	cmp	r7, #6
   bb84e:	d12c      	bne.n	bb8aa <_strtod_l+0xda>
   bb850:	3601      	adds	r6, #1
   bb852:	2300      	movs	r3, #0
   bb854:	9617      	str	r6, [sp, #92]	; 0x5c
   bb856:	930a      	str	r3, [sp, #40]	; 0x28
   bb858:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb85a:	2b00      	cmp	r3, #0
   bb85c:	f040 8590 	bne.w	bc380 <_strtod_l+0xbb0>
   bb860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb862:	b1eb      	cbz	r3, bb8a0 <_strtod_l+0xd0>
   bb864:	4652      	mov	r2, sl
   bb866:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bb86a:	ec43 2b10 	vmov	d0, r2, r3
   bb86e:	b01d      	add	sp, #116	; 0x74
   bb870:	ecbd 8b02 	vpop	{d8}
   bb874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb878:	2a20      	cmp	r2, #32
   bb87a:	d1cc      	bne.n	bb816 <_strtod_l+0x46>
   bb87c:	3301      	adds	r3, #1
   bb87e:	9317      	str	r3, [sp, #92]	; 0x5c
   bb880:	e7be      	b.n	bb800 <_strtod_l+0x30>
   bb882:	2a2d      	cmp	r2, #45	; 0x2d
   bb884:	d1c7      	bne.n	bb816 <_strtod_l+0x46>
   bb886:	2201      	movs	r2, #1
   bb888:	920a      	str	r2, [sp, #40]	; 0x28
   bb88a:	1c5a      	adds	r2, r3, #1
   bb88c:	9217      	str	r2, [sp, #92]	; 0x5c
   bb88e:	785b      	ldrb	r3, [r3, #1]
   bb890:	2b00      	cmp	r3, #0
   bb892:	d1c2      	bne.n	bb81a <_strtod_l+0x4a>
   bb894:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb896:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb89a:	2b00      	cmp	r3, #0
   bb89c:	f040 856e 	bne.w	bc37c <_strtod_l+0xbac>
   bb8a0:	4652      	mov	r2, sl
   bb8a2:	465b      	mov	r3, fp
   bb8a4:	e7e1      	b.n	bb86a <_strtod_l+0x9a>
   bb8a6:	2200      	movs	r2, #0
   bb8a8:	e7ee      	b.n	bb888 <_strtod_l+0xb8>
   bb8aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb8ac:	b13a      	cbz	r2, bb8be <_strtod_l+0xee>
   bb8ae:	2135      	movs	r1, #53	; 0x35
   bb8b0:	a81a      	add	r0, sp, #104	; 0x68
   bb8b2:	f001 fee0 	bl	bd676 <__copybits>
   bb8b6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb8b8:	4620      	mov	r0, r4
   bb8ba:	f001 fa9f 	bl	bcdfc <_Bfree>
   bb8be:	3f01      	subs	r7, #1
   bb8c0:	2f04      	cmp	r7, #4
   bb8c2:	d806      	bhi.n	bb8d2 <_strtod_l+0x102>
   bb8c4:	e8df f007 	tbb	[pc, r7]
   bb8c8:	1714030a 	.word	0x1714030a
   bb8cc:	0a          	.byte	0x0a
   bb8cd:	00          	.byte	0x00
   bb8ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bb8d2:	0728      	lsls	r0, r5, #28
   bb8d4:	d5c0      	bpl.n	bb858 <_strtod_l+0x88>
   bb8d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bb8da:	e7bd      	b.n	bb858 <_strtod_l+0x88>
   bb8dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bb8e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bb8e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bb8e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bb8ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bb8ee:	e7f0      	b.n	bb8d2 <_strtod_l+0x102>
   bb8f0:	f8df b180 	ldr.w	fp, [pc, #384]	; bba74 <_strtod_l+0x2a4>
   bb8f4:	e7ed      	b.n	bb8d2 <_strtod_l+0x102>
   bb8f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bb8fa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bb8fe:	e7e8      	b.n	bb8d2 <_strtod_l+0x102>
   bb900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb902:	1c5a      	adds	r2, r3, #1
   bb904:	9217      	str	r2, [sp, #92]	; 0x5c
   bb906:	785b      	ldrb	r3, [r3, #1]
   bb908:	2b30      	cmp	r3, #48	; 0x30
   bb90a:	d0f9      	beq.n	bb900 <_strtod_l+0x130>
   bb90c:	2b00      	cmp	r3, #0
   bb90e:	d0a3      	beq.n	bb858 <_strtod_l+0x88>
   bb910:	2301      	movs	r3, #1
   bb912:	f04f 0900 	mov.w	r9, #0
   bb916:	9304      	str	r3, [sp, #16]
   bb918:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb91a:	9308      	str	r3, [sp, #32]
   bb91c:	f8cd 901c 	str.w	r9, [sp, #28]
   bb920:	464f      	mov	r7, r9
   bb922:	220a      	movs	r2, #10
   bb924:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bb926:	7806      	ldrb	r6, [r0, #0]
   bb928:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bb92c:	b2d9      	uxtb	r1, r3
   bb92e:	2909      	cmp	r1, #9
   bb930:	d92a      	bls.n	bb988 <_strtod_l+0x1b8>
   bb932:	9905      	ldr	r1, [sp, #20]
   bb934:	462a      	mov	r2, r5
   bb936:	f7ff fef7 	bl	bb728 <strncmp>
   bb93a:	b398      	cbz	r0, bb9a4 <_strtod_l+0x1d4>
   bb93c:	2000      	movs	r0, #0
   bb93e:	4632      	mov	r2, r6
   bb940:	463d      	mov	r5, r7
   bb942:	9005      	str	r0, [sp, #20]
   bb944:	4603      	mov	r3, r0
   bb946:	2a65      	cmp	r2, #101	; 0x65
   bb948:	d001      	beq.n	bb94e <_strtod_l+0x17e>
   bb94a:	2a45      	cmp	r2, #69	; 0x45
   bb94c:	d118      	bne.n	bb980 <_strtod_l+0x1b0>
   bb94e:	b91d      	cbnz	r5, bb958 <_strtod_l+0x188>
   bb950:	9a04      	ldr	r2, [sp, #16]
   bb952:	4302      	orrs	r2, r0
   bb954:	d09e      	beq.n	bb894 <_strtod_l+0xc4>
   bb956:	2500      	movs	r5, #0
   bb958:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bb95c:	f108 0201 	add.w	r2, r8, #1
   bb960:	9217      	str	r2, [sp, #92]	; 0x5c
   bb962:	f898 2001 	ldrb.w	r2, [r8, #1]
   bb966:	2a2b      	cmp	r2, #43	; 0x2b
   bb968:	d075      	beq.n	bba56 <_strtod_l+0x286>
   bb96a:	2a2d      	cmp	r2, #45	; 0x2d
   bb96c:	d07b      	beq.n	bba66 <_strtod_l+0x296>
   bb96e:	f04f 0c00 	mov.w	ip, #0
   bb972:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bb976:	2909      	cmp	r1, #9
   bb978:	f240 8082 	bls.w	bba80 <_strtod_l+0x2b0>
   bb97c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb980:	2600      	movs	r6, #0
   bb982:	e09d      	b.n	bbac0 <_strtod_l+0x2f0>
   bb984:	2300      	movs	r3, #0
   bb986:	e7c4      	b.n	bb912 <_strtod_l+0x142>
   bb988:	2f08      	cmp	r7, #8
   bb98a:	bfd8      	it	le
   bb98c:	9907      	ldrle	r1, [sp, #28]
   bb98e:	f100 0001 	add.w	r0, r0, #1
   bb992:	bfda      	itte	le
   bb994:	fb02 3301 	mlale	r3, r2, r1, r3
   bb998:	9307      	strle	r3, [sp, #28]
   bb99a:	fb02 3909 	mlagt	r9, r2, r9, r3
   bb99e:	3701      	adds	r7, #1
   bb9a0:	9017      	str	r0, [sp, #92]	; 0x5c
   bb9a2:	e7bf      	b.n	bb924 <_strtod_l+0x154>
   bb9a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb9a6:	195a      	adds	r2, r3, r5
   bb9a8:	9217      	str	r2, [sp, #92]	; 0x5c
   bb9aa:	5d5a      	ldrb	r2, [r3, r5]
   bb9ac:	2f00      	cmp	r7, #0
   bb9ae:	d037      	beq.n	bba20 <_strtod_l+0x250>
   bb9b0:	9005      	str	r0, [sp, #20]
   bb9b2:	463d      	mov	r5, r7
   bb9b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bb9b8:	2b09      	cmp	r3, #9
   bb9ba:	d912      	bls.n	bb9e2 <_strtod_l+0x212>
   bb9bc:	2301      	movs	r3, #1
   bb9be:	e7c2      	b.n	bb946 <_strtod_l+0x176>
   bb9c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb9c2:	1c5a      	adds	r2, r3, #1
   bb9c4:	9217      	str	r2, [sp, #92]	; 0x5c
   bb9c6:	785a      	ldrb	r2, [r3, #1]
   bb9c8:	3001      	adds	r0, #1
   bb9ca:	2a30      	cmp	r2, #48	; 0x30
   bb9cc:	d0f8      	beq.n	bb9c0 <_strtod_l+0x1f0>
   bb9ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bb9d2:	2b08      	cmp	r3, #8
   bb9d4:	f200 84d9 	bhi.w	bc38a <_strtod_l+0xbba>
   bb9d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb9da:	9005      	str	r0, [sp, #20]
   bb9dc:	2000      	movs	r0, #0
   bb9de:	9308      	str	r3, [sp, #32]
   bb9e0:	4605      	mov	r5, r0
   bb9e2:	3a30      	subs	r2, #48	; 0x30
   bb9e4:	f100 0301 	add.w	r3, r0, #1
   bb9e8:	d014      	beq.n	bba14 <_strtod_l+0x244>
   bb9ea:	9905      	ldr	r1, [sp, #20]
   bb9ec:	4419      	add	r1, r3
   bb9ee:	9105      	str	r1, [sp, #20]
   bb9f0:	462b      	mov	r3, r5
   bb9f2:	eb00 0e05 	add.w	lr, r0, r5
   bb9f6:	210a      	movs	r1, #10
   bb9f8:	4573      	cmp	r3, lr
   bb9fa:	d113      	bne.n	bba24 <_strtod_l+0x254>
   bb9fc:	182b      	adds	r3, r5, r0
   bb9fe:	2b08      	cmp	r3, #8
   bba00:	f105 0501 	add.w	r5, r5, #1
   bba04:	4405      	add	r5, r0
   bba06:	dc1c      	bgt.n	bba42 <_strtod_l+0x272>
   bba08:	9907      	ldr	r1, [sp, #28]
   bba0a:	230a      	movs	r3, #10
   bba0c:	fb03 2301 	mla	r3, r3, r1, r2
   bba10:	9307      	str	r3, [sp, #28]
   bba12:	2300      	movs	r3, #0
   bba14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bba16:	1c51      	adds	r1, r2, #1
   bba18:	9117      	str	r1, [sp, #92]	; 0x5c
   bba1a:	7852      	ldrb	r2, [r2, #1]
   bba1c:	4618      	mov	r0, r3
   bba1e:	e7c9      	b.n	bb9b4 <_strtod_l+0x1e4>
   bba20:	4638      	mov	r0, r7
   bba22:	e7d2      	b.n	bb9ca <_strtod_l+0x1fa>
   bba24:	2b08      	cmp	r3, #8
   bba26:	dc04      	bgt.n	bba32 <_strtod_l+0x262>
   bba28:	9e07      	ldr	r6, [sp, #28]
   bba2a:	434e      	muls	r6, r1
   bba2c:	9607      	str	r6, [sp, #28]
   bba2e:	3301      	adds	r3, #1
   bba30:	e7e2      	b.n	bb9f8 <_strtod_l+0x228>
   bba32:	f103 0c01 	add.w	ip, r3, #1
   bba36:	f1bc 0f10 	cmp.w	ip, #16
   bba3a:	bfd8      	it	le
   bba3c:	fb01 f909 	mulle.w	r9, r1, r9
   bba40:	e7f5      	b.n	bba2e <_strtod_l+0x25e>
   bba42:	2d10      	cmp	r5, #16
   bba44:	bfdc      	itt	le
   bba46:	230a      	movle	r3, #10
   bba48:	fb03 2909 	mlale	r9, r3, r9, r2
   bba4c:	e7e1      	b.n	bba12 <_strtod_l+0x242>
   bba4e:	2300      	movs	r3, #0
   bba50:	9305      	str	r3, [sp, #20]
   bba52:	2301      	movs	r3, #1
   bba54:	e77c      	b.n	bb950 <_strtod_l+0x180>
   bba56:	f04f 0c00 	mov.w	ip, #0
   bba5a:	f108 0202 	add.w	r2, r8, #2
   bba5e:	9217      	str	r2, [sp, #92]	; 0x5c
   bba60:	f898 2002 	ldrb.w	r2, [r8, #2]
   bba64:	e785      	b.n	bb972 <_strtod_l+0x1a2>
   bba66:	f04f 0c01 	mov.w	ip, #1
   bba6a:	e7f6      	b.n	bba5a <_strtod_l+0x28a>
   bba6c:	000be31c 	.word	0x000be31c
   bba70:	000be154 	.word	0x000be154
   bba74:	7ff00000 	.word	0x7ff00000
   bba78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bba7a:	1c51      	adds	r1, r2, #1
   bba7c:	9117      	str	r1, [sp, #92]	; 0x5c
   bba7e:	7852      	ldrb	r2, [r2, #1]
   bba80:	2a30      	cmp	r2, #48	; 0x30
   bba82:	d0f9      	beq.n	bba78 <_strtod_l+0x2a8>
   bba84:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bba88:	2908      	cmp	r1, #8
   bba8a:	f63f af79 	bhi.w	bb980 <_strtod_l+0x1b0>
   bba8e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bba92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bba94:	9206      	str	r2, [sp, #24]
   bba96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bba98:	1c51      	adds	r1, r2, #1
   bba9a:	9117      	str	r1, [sp, #92]	; 0x5c
   bba9c:	7852      	ldrb	r2, [r2, #1]
   bba9e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bbaa2:	2e09      	cmp	r6, #9
   bbaa4:	d937      	bls.n	bbb16 <_strtod_l+0x346>
   bbaa6:	9e06      	ldr	r6, [sp, #24]
   bbaa8:	1b89      	subs	r1, r1, r6
   bbaaa:	2908      	cmp	r1, #8
   bbaac:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bbab0:	dc02      	bgt.n	bbab8 <_strtod_l+0x2e8>
   bbab2:	4576      	cmp	r6, lr
   bbab4:	bfa8      	it	ge
   bbab6:	4676      	movge	r6, lr
   bbab8:	f1bc 0f00 	cmp.w	ip, #0
   bbabc:	d000      	beq.n	bbac0 <_strtod_l+0x2f0>
   bbabe:	4276      	negs	r6, r6
   bbac0:	2d00      	cmp	r5, #0
   bbac2:	d14d      	bne.n	bbb60 <_strtod_l+0x390>
   bbac4:	9904      	ldr	r1, [sp, #16]
   bbac6:	4301      	orrs	r1, r0
   bbac8:	f47f aec6 	bne.w	bb858 <_strtod_l+0x88>
   bbacc:	2b00      	cmp	r3, #0
   bbace:	f47f aee1 	bne.w	bb894 <_strtod_l+0xc4>
   bbad2:	2a69      	cmp	r2, #105	; 0x69
   bbad4:	d027      	beq.n	bbb26 <_strtod_l+0x356>
   bbad6:	dc24      	bgt.n	bbb22 <_strtod_l+0x352>
   bbad8:	2a49      	cmp	r2, #73	; 0x49
   bbada:	d024      	beq.n	bbb26 <_strtod_l+0x356>
   bbadc:	2a4e      	cmp	r2, #78	; 0x4e
   bbade:	f47f aed9 	bne.w	bb894 <_strtod_l+0xc4>
   bbae2:	499f      	ldr	r1, [pc, #636]	; (bbd60 <_strtod_l+0x590>)
   bbae4:	a817      	add	r0, sp, #92	; 0x5c
   bbae6:	f001 f883 	bl	bcbf0 <__match>
   bbaea:	2800      	cmp	r0, #0
   bbaec:	f43f aed2 	beq.w	bb894 <_strtod_l+0xc4>
   bbaf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbaf2:	781b      	ldrb	r3, [r3, #0]
   bbaf4:	2b28      	cmp	r3, #40	; 0x28
   bbaf6:	d12d      	bne.n	bbb54 <_strtod_l+0x384>
   bbaf8:	499a      	ldr	r1, [pc, #616]	; (bbd64 <_strtod_l+0x594>)
   bbafa:	aa1a      	add	r2, sp, #104	; 0x68
   bbafc:	a817      	add	r0, sp, #92	; 0x5c
   bbafe:	f001 f88b 	bl	bcc18 <__hexnan>
   bbb02:	2805      	cmp	r0, #5
   bbb04:	d126      	bne.n	bbb54 <_strtod_l+0x384>
   bbb06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bbb08:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bbb0c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bbb10:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bbb14:	e6a0      	b.n	bb858 <_strtod_l+0x88>
   bbb16:	210a      	movs	r1, #10
   bbb18:	fb01 2e0e 	mla	lr, r1, lr, r2
   bbb1c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bbb20:	e7b9      	b.n	bba96 <_strtod_l+0x2c6>
   bbb22:	2a6e      	cmp	r2, #110	; 0x6e
   bbb24:	e7db      	b.n	bbade <_strtod_l+0x30e>
   bbb26:	4990      	ldr	r1, [pc, #576]	; (bbd68 <_strtod_l+0x598>)
   bbb28:	a817      	add	r0, sp, #92	; 0x5c
   bbb2a:	f001 f861 	bl	bcbf0 <__match>
   bbb2e:	2800      	cmp	r0, #0
   bbb30:	f43f aeb0 	beq.w	bb894 <_strtod_l+0xc4>
   bbb34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbb36:	498d      	ldr	r1, [pc, #564]	; (bbd6c <_strtod_l+0x59c>)
   bbb38:	3b01      	subs	r3, #1
   bbb3a:	a817      	add	r0, sp, #92	; 0x5c
   bbb3c:	9317      	str	r3, [sp, #92]	; 0x5c
   bbb3e:	f001 f857 	bl	bcbf0 <__match>
   bbb42:	b910      	cbnz	r0, bbb4a <_strtod_l+0x37a>
   bbb44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbb46:	3301      	adds	r3, #1
   bbb48:	9317      	str	r3, [sp, #92]	; 0x5c
   bbb4a:	f8df b230 	ldr.w	fp, [pc, #560]	; bbd7c <_strtod_l+0x5ac>
   bbb4e:	f04f 0a00 	mov.w	sl, #0
   bbb52:	e681      	b.n	bb858 <_strtod_l+0x88>
   bbb54:	4886      	ldr	r0, [pc, #536]	; (bbd70 <_strtod_l+0x5a0>)
   bbb56:	f001 fde3 	bl	bd720 <nan>
   bbb5a:	ec5b ab10 	vmov	sl, fp, d0
   bbb5e:	e67b      	b.n	bb858 <_strtod_l+0x88>
   bbb60:	9b05      	ldr	r3, [sp, #20]
   bbb62:	9807      	ldr	r0, [sp, #28]
   bbb64:	1af3      	subs	r3, r6, r3
   bbb66:	2f00      	cmp	r7, #0
   bbb68:	bf08      	it	eq
   bbb6a:	462f      	moveq	r7, r5
   bbb6c:	2d10      	cmp	r5, #16
   bbb6e:	9306      	str	r3, [sp, #24]
   bbb70:	46a8      	mov	r8, r5
   bbb72:	bfa8      	it	ge
   bbb74:	f04f 0810 	movge.w	r8, #16
   bbb78:	f7ff f98c 	bl	bae94 <__aeabi_ui2d>
   bbb7c:	2d09      	cmp	r5, #9
   bbb7e:	4682      	mov	sl, r0
   bbb80:	468b      	mov	fp, r1
   bbb82:	dd13      	ble.n	bbbac <_strtod_l+0x3dc>
   bbb84:	4b7b      	ldr	r3, [pc, #492]	; (bbd74 <_strtod_l+0x5a4>)
   bbb86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bbb8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bbb8e:	f7ff f9fb 	bl	baf88 <__aeabi_dmul>
   bbb92:	4682      	mov	sl, r0
   bbb94:	4648      	mov	r0, r9
   bbb96:	468b      	mov	fp, r1
   bbb98:	f7ff f97c 	bl	bae94 <__aeabi_ui2d>
   bbb9c:	4602      	mov	r2, r0
   bbb9e:	460b      	mov	r3, r1
   bbba0:	4650      	mov	r0, sl
   bbba2:	4659      	mov	r1, fp
   bbba4:	f7ff f83a 	bl	bac1c <__adddf3>
   bbba8:	4682      	mov	sl, r0
   bbbaa:	468b      	mov	fp, r1
   bbbac:	2d0f      	cmp	r5, #15
   bbbae:	dc38      	bgt.n	bbc22 <_strtod_l+0x452>
   bbbb0:	9b06      	ldr	r3, [sp, #24]
   bbbb2:	2b00      	cmp	r3, #0
   bbbb4:	f43f ae50 	beq.w	bb858 <_strtod_l+0x88>
   bbbb8:	dd24      	ble.n	bbc04 <_strtod_l+0x434>
   bbbba:	2b16      	cmp	r3, #22
   bbbbc:	dc0b      	bgt.n	bbbd6 <_strtod_l+0x406>
   bbbbe:	496d      	ldr	r1, [pc, #436]	; (bbd74 <_strtod_l+0x5a4>)
   bbbc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bbbc4:	e9d1 0100 	ldrd	r0, r1, [r1]
   bbbc8:	4652      	mov	r2, sl
   bbbca:	465b      	mov	r3, fp
   bbbcc:	f7ff f9dc 	bl	baf88 <__aeabi_dmul>
   bbbd0:	4682      	mov	sl, r0
   bbbd2:	468b      	mov	fp, r1
   bbbd4:	e640      	b.n	bb858 <_strtod_l+0x88>
   bbbd6:	9a06      	ldr	r2, [sp, #24]
   bbbd8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bbbdc:	4293      	cmp	r3, r2
   bbbde:	db20      	blt.n	bbc22 <_strtod_l+0x452>
   bbbe0:	4c64      	ldr	r4, [pc, #400]	; (bbd74 <_strtod_l+0x5a4>)
   bbbe2:	f1c5 050f 	rsb	r5, r5, #15
   bbbe6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bbbea:	4652      	mov	r2, sl
   bbbec:	465b      	mov	r3, fp
   bbbee:	e9d1 0100 	ldrd	r0, r1, [r1]
   bbbf2:	f7ff f9c9 	bl	baf88 <__aeabi_dmul>
   bbbf6:	9b06      	ldr	r3, [sp, #24]
   bbbf8:	1b5d      	subs	r5, r3, r5
   bbbfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bbbfe:	e9d4 2300 	ldrd	r2, r3, [r4]
   bbc02:	e7e3      	b.n	bbbcc <_strtod_l+0x3fc>
   bbc04:	9b06      	ldr	r3, [sp, #24]
   bbc06:	3316      	adds	r3, #22
   bbc08:	db0b      	blt.n	bbc22 <_strtod_l+0x452>
   bbc0a:	9b05      	ldr	r3, [sp, #20]
   bbc0c:	1b9e      	subs	r6, r3, r6
   bbc0e:	4b59      	ldr	r3, [pc, #356]	; (bbd74 <_strtod_l+0x5a4>)
   bbc10:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bbc14:	e9d6 2300 	ldrd	r2, r3, [r6]
   bbc18:	4650      	mov	r0, sl
   bbc1a:	4659      	mov	r1, fp
   bbc1c:	f7ff fade 	bl	bb1dc <__aeabi_ddiv>
   bbc20:	e7d6      	b.n	bbbd0 <_strtod_l+0x400>
   bbc22:	9b06      	ldr	r3, [sp, #24]
   bbc24:	eba5 0808 	sub.w	r8, r5, r8
   bbc28:	4498      	add	r8, r3
   bbc2a:	f1b8 0f00 	cmp.w	r8, #0
   bbc2e:	dd74      	ble.n	bbd1a <_strtod_l+0x54a>
   bbc30:	f018 030f 	ands.w	r3, r8, #15
   bbc34:	d00a      	beq.n	bbc4c <_strtod_l+0x47c>
   bbc36:	494f      	ldr	r1, [pc, #316]	; (bbd74 <_strtod_l+0x5a4>)
   bbc38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bbc3c:	4652      	mov	r2, sl
   bbc3e:	465b      	mov	r3, fp
   bbc40:	e9d1 0100 	ldrd	r0, r1, [r1]
   bbc44:	f7ff f9a0 	bl	baf88 <__aeabi_dmul>
   bbc48:	4682      	mov	sl, r0
   bbc4a:	468b      	mov	fp, r1
   bbc4c:	f038 080f 	bics.w	r8, r8, #15
   bbc50:	d04f      	beq.n	bbcf2 <_strtod_l+0x522>
   bbc52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bbc56:	dd22      	ble.n	bbc9e <_strtod_l+0x4ce>
   bbc58:	2500      	movs	r5, #0
   bbc5a:	462e      	mov	r6, r5
   bbc5c:	9507      	str	r5, [sp, #28]
   bbc5e:	9505      	str	r5, [sp, #20]
   bbc60:	2322      	movs	r3, #34	; 0x22
   bbc62:	f8df b118 	ldr.w	fp, [pc, #280]	; bbd7c <_strtod_l+0x5ac>
   bbc66:	6023      	str	r3, [r4, #0]
   bbc68:	f04f 0a00 	mov.w	sl, #0
   bbc6c:	9b07      	ldr	r3, [sp, #28]
   bbc6e:	2b00      	cmp	r3, #0
   bbc70:	f43f adf2 	beq.w	bb858 <_strtod_l+0x88>
   bbc74:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbc76:	4620      	mov	r0, r4
   bbc78:	f001 f8c0 	bl	bcdfc <_Bfree>
   bbc7c:	9905      	ldr	r1, [sp, #20]
   bbc7e:	4620      	mov	r0, r4
   bbc80:	f001 f8bc 	bl	bcdfc <_Bfree>
   bbc84:	4631      	mov	r1, r6
   bbc86:	4620      	mov	r0, r4
   bbc88:	f001 f8b8 	bl	bcdfc <_Bfree>
   bbc8c:	9907      	ldr	r1, [sp, #28]
   bbc8e:	4620      	mov	r0, r4
   bbc90:	f001 f8b4 	bl	bcdfc <_Bfree>
   bbc94:	4629      	mov	r1, r5
   bbc96:	4620      	mov	r0, r4
   bbc98:	f001 f8b0 	bl	bcdfc <_Bfree>
   bbc9c:	e5dc      	b.n	bb858 <_strtod_l+0x88>
   bbc9e:	4b36      	ldr	r3, [pc, #216]	; (bbd78 <_strtod_l+0x5a8>)
   bbca0:	9304      	str	r3, [sp, #16]
   bbca2:	2300      	movs	r3, #0
   bbca4:	ea4f 1828 	mov.w	r8, r8, asr #4
   bbca8:	4650      	mov	r0, sl
   bbcaa:	4659      	mov	r1, fp
   bbcac:	4699      	mov	r9, r3
   bbcae:	f1b8 0f01 	cmp.w	r8, #1
   bbcb2:	dc21      	bgt.n	bbcf8 <_strtod_l+0x528>
   bbcb4:	b10b      	cbz	r3, bbcba <_strtod_l+0x4ea>
   bbcb6:	4682      	mov	sl, r0
   bbcb8:	468b      	mov	fp, r1
   bbcba:	4b2f      	ldr	r3, [pc, #188]	; (bbd78 <_strtod_l+0x5a8>)
   bbcbc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bbcc0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bbcc4:	4652      	mov	r2, sl
   bbcc6:	465b      	mov	r3, fp
   bbcc8:	e9d9 0100 	ldrd	r0, r1, [r9]
   bbccc:	f7ff f95c 	bl	baf88 <__aeabi_dmul>
   bbcd0:	4b2a      	ldr	r3, [pc, #168]	; (bbd7c <_strtod_l+0x5ac>)
   bbcd2:	460a      	mov	r2, r1
   bbcd4:	400b      	ands	r3, r1
   bbcd6:	492a      	ldr	r1, [pc, #168]	; (bbd80 <_strtod_l+0x5b0>)
   bbcd8:	428b      	cmp	r3, r1
   bbcda:	4682      	mov	sl, r0
   bbcdc:	d8bc      	bhi.n	bbc58 <_strtod_l+0x488>
   bbcde:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bbce2:	428b      	cmp	r3, r1
   bbce4:	bf86      	itte	hi
   bbce6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bbd84 <_strtod_l+0x5b4>
   bbcea:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bbcee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bbcf2:	2300      	movs	r3, #0
   bbcf4:	9304      	str	r3, [sp, #16]
   bbcf6:	e084      	b.n	bbe02 <_strtod_l+0x632>
   bbcf8:	f018 0f01 	tst.w	r8, #1
   bbcfc:	d005      	beq.n	bbd0a <_strtod_l+0x53a>
   bbcfe:	9b04      	ldr	r3, [sp, #16]
   bbd00:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbd04:	f7ff f940 	bl	baf88 <__aeabi_dmul>
   bbd08:	2301      	movs	r3, #1
   bbd0a:	9a04      	ldr	r2, [sp, #16]
   bbd0c:	3208      	adds	r2, #8
   bbd0e:	f109 0901 	add.w	r9, r9, #1
   bbd12:	ea4f 0868 	mov.w	r8, r8, asr #1
   bbd16:	9204      	str	r2, [sp, #16]
   bbd18:	e7c9      	b.n	bbcae <_strtod_l+0x4de>
   bbd1a:	d0ea      	beq.n	bbcf2 <_strtod_l+0x522>
   bbd1c:	f1c8 0800 	rsb	r8, r8, #0
   bbd20:	f018 020f 	ands.w	r2, r8, #15
   bbd24:	d00a      	beq.n	bbd3c <_strtod_l+0x56c>
   bbd26:	4b13      	ldr	r3, [pc, #76]	; (bbd74 <_strtod_l+0x5a4>)
   bbd28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bbd2c:	4650      	mov	r0, sl
   bbd2e:	4659      	mov	r1, fp
   bbd30:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbd34:	f7ff fa52 	bl	bb1dc <__aeabi_ddiv>
   bbd38:	4682      	mov	sl, r0
   bbd3a:	468b      	mov	fp, r1
   bbd3c:	ea5f 1828 	movs.w	r8, r8, asr #4
   bbd40:	d0d7      	beq.n	bbcf2 <_strtod_l+0x522>
   bbd42:	f1b8 0f1f 	cmp.w	r8, #31
   bbd46:	dd1f      	ble.n	bbd88 <_strtod_l+0x5b8>
   bbd48:	2500      	movs	r5, #0
   bbd4a:	462e      	mov	r6, r5
   bbd4c:	9507      	str	r5, [sp, #28]
   bbd4e:	9505      	str	r5, [sp, #20]
   bbd50:	2322      	movs	r3, #34	; 0x22
   bbd52:	f04f 0a00 	mov.w	sl, #0
   bbd56:	f04f 0b00 	mov.w	fp, #0
   bbd5a:	6023      	str	r3, [r4, #0]
   bbd5c:	e786      	b.n	bbc6c <_strtod_l+0x49c>
   bbd5e:	bf00      	nop
   bbd60:	000be14e 	.word	0x000be14e
   bbd64:	000be168 	.word	0x000be168
   bbd68:	000be145 	.word	0x000be145
   bbd6c:	000be148 	.word	0x000be148
   bbd70:	000bdbc2 	.word	0x000bdbc2
   bbd74:	000be3b8 	.word	0x000be3b8
   bbd78:	000be390 	.word	0x000be390
   bbd7c:	7ff00000 	.word	0x7ff00000
   bbd80:	7ca00000 	.word	0x7ca00000
   bbd84:	7fefffff 	.word	0x7fefffff
   bbd88:	f018 0310 	ands.w	r3, r8, #16
   bbd8c:	bf18      	it	ne
   bbd8e:	236a      	movne	r3, #106	; 0x6a
   bbd90:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bc140 <_strtod_l+0x970>
   bbd94:	9304      	str	r3, [sp, #16]
   bbd96:	4650      	mov	r0, sl
   bbd98:	4659      	mov	r1, fp
   bbd9a:	2300      	movs	r3, #0
   bbd9c:	f018 0f01 	tst.w	r8, #1
   bbda0:	d004      	beq.n	bbdac <_strtod_l+0x5dc>
   bbda2:	e9d9 2300 	ldrd	r2, r3, [r9]
   bbda6:	f7ff f8ef 	bl	baf88 <__aeabi_dmul>
   bbdaa:	2301      	movs	r3, #1
   bbdac:	ea5f 0868 	movs.w	r8, r8, asr #1
   bbdb0:	f109 0908 	add.w	r9, r9, #8
   bbdb4:	d1f2      	bne.n	bbd9c <_strtod_l+0x5cc>
   bbdb6:	b10b      	cbz	r3, bbdbc <_strtod_l+0x5ec>
   bbdb8:	4682      	mov	sl, r0
   bbdba:	468b      	mov	fp, r1
   bbdbc:	9b04      	ldr	r3, [sp, #16]
   bbdbe:	b1c3      	cbz	r3, bbdf2 <_strtod_l+0x622>
   bbdc0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bbdc4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bbdc8:	2b00      	cmp	r3, #0
   bbdca:	4659      	mov	r1, fp
   bbdcc:	dd11      	ble.n	bbdf2 <_strtod_l+0x622>
   bbdce:	2b1f      	cmp	r3, #31
   bbdd0:	f340 8124 	ble.w	bc01c <_strtod_l+0x84c>
   bbdd4:	2b34      	cmp	r3, #52	; 0x34
   bbdd6:	bfde      	ittt	le
   bbdd8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bbddc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bbde0:	fa03 f202 	lslle.w	r2, r3, r2
   bbde4:	f04f 0a00 	mov.w	sl, #0
   bbde8:	bfcc      	ite	gt
   bbdea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bbdee:	ea02 0b01 	andle.w	fp, r2, r1
   bbdf2:	2200      	movs	r2, #0
   bbdf4:	2300      	movs	r3, #0
   bbdf6:	4650      	mov	r0, sl
   bbdf8:	4659      	mov	r1, fp
   bbdfa:	f7ff fb2d 	bl	bb458 <__aeabi_dcmpeq>
   bbdfe:	2800      	cmp	r0, #0
   bbe00:	d1a2      	bne.n	bbd48 <_strtod_l+0x578>
   bbe02:	9b07      	ldr	r3, [sp, #28]
   bbe04:	9300      	str	r3, [sp, #0]
   bbe06:	9908      	ldr	r1, [sp, #32]
   bbe08:	462b      	mov	r3, r5
   bbe0a:	463a      	mov	r2, r7
   bbe0c:	4620      	mov	r0, r4
   bbe0e:	f001 f85d 	bl	bcecc <__s2b>
   bbe12:	9007      	str	r0, [sp, #28]
   bbe14:	2800      	cmp	r0, #0
   bbe16:	f43f af1f 	beq.w	bbc58 <_strtod_l+0x488>
   bbe1a:	9b05      	ldr	r3, [sp, #20]
   bbe1c:	1b9e      	subs	r6, r3, r6
   bbe1e:	9b06      	ldr	r3, [sp, #24]
   bbe20:	2b00      	cmp	r3, #0
   bbe22:	bfb4      	ite	lt
   bbe24:	4633      	movlt	r3, r6
   bbe26:	2300      	movge	r3, #0
   bbe28:	930c      	str	r3, [sp, #48]	; 0x30
   bbe2a:	9b06      	ldr	r3, [sp, #24]
   bbe2c:	2500      	movs	r5, #0
   bbe2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bbe32:	9312      	str	r3, [sp, #72]	; 0x48
   bbe34:	462e      	mov	r6, r5
   bbe36:	9b07      	ldr	r3, [sp, #28]
   bbe38:	4620      	mov	r0, r4
   bbe3a:	6859      	ldr	r1, [r3, #4]
   bbe3c:	f000 ff9e 	bl	bcd7c <_Balloc>
   bbe40:	9005      	str	r0, [sp, #20]
   bbe42:	2800      	cmp	r0, #0
   bbe44:	f43f af0c 	beq.w	bbc60 <_strtod_l+0x490>
   bbe48:	9b07      	ldr	r3, [sp, #28]
   bbe4a:	691a      	ldr	r2, [r3, #16]
   bbe4c:	3202      	adds	r2, #2
   bbe4e:	f103 010c 	add.w	r1, r3, #12
   bbe52:	0092      	lsls	r2, r2, #2
   bbe54:	300c      	adds	r0, #12
   bbe56:	f7ff fbef 	bl	bb638 <memcpy>
   bbe5a:	ec4b ab10 	vmov	d0, sl, fp
   bbe5e:	aa1a      	add	r2, sp, #104	; 0x68
   bbe60:	a919      	add	r1, sp, #100	; 0x64
   bbe62:	4620      	mov	r0, r4
   bbe64:	f001 fb78 	bl	bd558 <__d2b>
   bbe68:	ec4b ab18 	vmov	d8, sl, fp
   bbe6c:	9018      	str	r0, [sp, #96]	; 0x60
   bbe6e:	2800      	cmp	r0, #0
   bbe70:	f43f aef6 	beq.w	bbc60 <_strtod_l+0x490>
   bbe74:	2101      	movs	r1, #1
   bbe76:	4620      	mov	r0, r4
   bbe78:	f001 f8c2 	bl	bd000 <__i2b>
   bbe7c:	4606      	mov	r6, r0
   bbe7e:	2800      	cmp	r0, #0
   bbe80:	f43f aeee 	beq.w	bbc60 <_strtod_l+0x490>
   bbe84:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bbe86:	9904      	ldr	r1, [sp, #16]
   bbe88:	2b00      	cmp	r3, #0
   bbe8a:	bfab      	itete	ge
   bbe8c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bbe8e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bbe90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bbe92:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bbe96:	bfac      	ite	ge
   bbe98:	eb03 0902 	addge.w	r9, r3, r2
   bbe9c:	1ad7      	sublt	r7, r2, r3
   bbe9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bbea0:	eba3 0801 	sub.w	r8, r3, r1
   bbea4:	4490      	add	r8, r2
   bbea6:	4ba1      	ldr	r3, [pc, #644]	; (bc12c <_strtod_l+0x95c>)
   bbea8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bbeac:	4598      	cmp	r8, r3
   bbeae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bbeb2:	f280 80c7 	bge.w	bc044 <_strtod_l+0x874>
   bbeb6:	eba3 0308 	sub.w	r3, r3, r8
   bbeba:	2b1f      	cmp	r3, #31
   bbebc:	eba2 0203 	sub.w	r2, r2, r3
   bbec0:	f04f 0101 	mov.w	r1, #1
   bbec4:	f300 80b1 	bgt.w	bc02a <_strtod_l+0x85a>
   bbec8:	fa01 f303 	lsl.w	r3, r1, r3
   bbecc:	930d      	str	r3, [sp, #52]	; 0x34
   bbece:	2300      	movs	r3, #0
   bbed0:	9308      	str	r3, [sp, #32]
   bbed2:	eb09 0802 	add.w	r8, r9, r2
   bbed6:	9b04      	ldr	r3, [sp, #16]
   bbed8:	45c1      	cmp	r9, r8
   bbeda:	4417      	add	r7, r2
   bbedc:	441f      	add	r7, r3
   bbede:	464b      	mov	r3, r9
   bbee0:	bfa8      	it	ge
   bbee2:	4643      	movge	r3, r8
   bbee4:	42bb      	cmp	r3, r7
   bbee6:	bfa8      	it	ge
   bbee8:	463b      	movge	r3, r7
   bbeea:	2b00      	cmp	r3, #0
   bbeec:	bfc2      	ittt	gt
   bbeee:	eba8 0803 	subgt.w	r8, r8, r3
   bbef2:	1aff      	subgt	r7, r7, r3
   bbef4:	eba9 0903 	subgt.w	r9, r9, r3
   bbef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bbefa:	2b00      	cmp	r3, #0
   bbefc:	dd17      	ble.n	bbf2e <_strtod_l+0x75e>
   bbefe:	4631      	mov	r1, r6
   bbf00:	461a      	mov	r2, r3
   bbf02:	4620      	mov	r0, r4
   bbf04:	f001 f93c 	bl	bd180 <__pow5mult>
   bbf08:	4606      	mov	r6, r0
   bbf0a:	2800      	cmp	r0, #0
   bbf0c:	f43f aea8 	beq.w	bbc60 <_strtod_l+0x490>
   bbf10:	4601      	mov	r1, r0
   bbf12:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bbf14:	4620      	mov	r0, r4
   bbf16:	f001 f889 	bl	bd02c <__multiply>
   bbf1a:	900b      	str	r0, [sp, #44]	; 0x2c
   bbf1c:	2800      	cmp	r0, #0
   bbf1e:	f43f ae9f 	beq.w	bbc60 <_strtod_l+0x490>
   bbf22:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbf24:	4620      	mov	r0, r4
   bbf26:	f000 ff69 	bl	bcdfc <_Bfree>
   bbf2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbf2c:	9318      	str	r3, [sp, #96]	; 0x60
   bbf2e:	f1b8 0f00 	cmp.w	r8, #0
   bbf32:	f300 808c 	bgt.w	bc04e <_strtod_l+0x87e>
   bbf36:	9b06      	ldr	r3, [sp, #24]
   bbf38:	2b00      	cmp	r3, #0
   bbf3a:	dd08      	ble.n	bbf4e <_strtod_l+0x77e>
   bbf3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bbf3e:	9905      	ldr	r1, [sp, #20]
   bbf40:	4620      	mov	r0, r4
   bbf42:	f001 f91d 	bl	bd180 <__pow5mult>
   bbf46:	9005      	str	r0, [sp, #20]
   bbf48:	2800      	cmp	r0, #0
   bbf4a:	f43f ae89 	beq.w	bbc60 <_strtod_l+0x490>
   bbf4e:	2f00      	cmp	r7, #0
   bbf50:	dd08      	ble.n	bbf64 <_strtod_l+0x794>
   bbf52:	9905      	ldr	r1, [sp, #20]
   bbf54:	463a      	mov	r2, r7
   bbf56:	4620      	mov	r0, r4
   bbf58:	f001 f96c 	bl	bd234 <__lshift>
   bbf5c:	9005      	str	r0, [sp, #20]
   bbf5e:	2800      	cmp	r0, #0
   bbf60:	f43f ae7e 	beq.w	bbc60 <_strtod_l+0x490>
   bbf64:	f1b9 0f00 	cmp.w	r9, #0
   bbf68:	dd08      	ble.n	bbf7c <_strtod_l+0x7ac>
   bbf6a:	4631      	mov	r1, r6
   bbf6c:	464a      	mov	r2, r9
   bbf6e:	4620      	mov	r0, r4
   bbf70:	f001 f960 	bl	bd234 <__lshift>
   bbf74:	4606      	mov	r6, r0
   bbf76:	2800      	cmp	r0, #0
   bbf78:	f43f ae72 	beq.w	bbc60 <_strtod_l+0x490>
   bbf7c:	9a05      	ldr	r2, [sp, #20]
   bbf7e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbf80:	4620      	mov	r0, r4
   bbf82:	f001 f9e3 	bl	bd34c <__mdiff>
   bbf86:	4605      	mov	r5, r0
   bbf88:	2800      	cmp	r0, #0
   bbf8a:	f43f ae69 	beq.w	bbc60 <_strtod_l+0x490>
   bbf8e:	68c3      	ldr	r3, [r0, #12]
   bbf90:	930b      	str	r3, [sp, #44]	; 0x2c
   bbf92:	2300      	movs	r3, #0
   bbf94:	60c3      	str	r3, [r0, #12]
   bbf96:	4631      	mov	r1, r6
   bbf98:	f001 f9bc 	bl	bd314 <__mcmp>
   bbf9c:	2800      	cmp	r0, #0
   bbf9e:	da60      	bge.n	bc062 <_strtod_l+0x892>
   bbfa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbfa2:	ea53 030a 	orrs.w	r3, r3, sl
   bbfa6:	f040 8082 	bne.w	bc0ae <_strtod_l+0x8de>
   bbfaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbfae:	2b00      	cmp	r3, #0
   bbfb0:	d17d      	bne.n	bc0ae <_strtod_l+0x8de>
   bbfb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bbfb6:	0d1b      	lsrs	r3, r3, #20
   bbfb8:	051b      	lsls	r3, r3, #20
   bbfba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bbfbe:	d976      	bls.n	bc0ae <_strtod_l+0x8de>
   bbfc0:	696b      	ldr	r3, [r5, #20]
   bbfc2:	b913      	cbnz	r3, bbfca <_strtod_l+0x7fa>
   bbfc4:	692b      	ldr	r3, [r5, #16]
   bbfc6:	2b01      	cmp	r3, #1
   bbfc8:	dd71      	ble.n	bc0ae <_strtod_l+0x8de>
   bbfca:	4629      	mov	r1, r5
   bbfcc:	2201      	movs	r2, #1
   bbfce:	4620      	mov	r0, r4
   bbfd0:	f001 f930 	bl	bd234 <__lshift>
   bbfd4:	4631      	mov	r1, r6
   bbfd6:	4605      	mov	r5, r0
   bbfd8:	f001 f99c 	bl	bd314 <__mcmp>
   bbfdc:	2800      	cmp	r0, #0
   bbfde:	dd66      	ble.n	bc0ae <_strtod_l+0x8de>
   bbfe0:	9904      	ldr	r1, [sp, #16]
   bbfe2:	4a53      	ldr	r2, [pc, #332]	; (bc130 <_strtod_l+0x960>)
   bbfe4:	465b      	mov	r3, fp
   bbfe6:	2900      	cmp	r1, #0
   bbfe8:	f000 8081 	beq.w	bc0ee <_strtod_l+0x91e>
   bbfec:	ea02 010b 	and.w	r1, r2, fp
   bbff0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bbff4:	dc7b      	bgt.n	bc0ee <_strtod_l+0x91e>
   bbff6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bbffa:	f77f aea9 	ble.w	bbd50 <_strtod_l+0x580>
   bbffe:	4b4d      	ldr	r3, [pc, #308]	; (bc134 <_strtod_l+0x964>)
   bc000:	4650      	mov	r0, sl
   bc002:	4659      	mov	r1, fp
   bc004:	2200      	movs	r2, #0
   bc006:	f7fe ffbf 	bl	baf88 <__aeabi_dmul>
   bc00a:	460b      	mov	r3, r1
   bc00c:	4303      	orrs	r3, r0
   bc00e:	bf08      	it	eq
   bc010:	2322      	moveq	r3, #34	; 0x22
   bc012:	4682      	mov	sl, r0
   bc014:	468b      	mov	fp, r1
   bc016:	bf08      	it	eq
   bc018:	6023      	streq	r3, [r4, #0]
   bc01a:	e62b      	b.n	bbc74 <_strtod_l+0x4a4>
   bc01c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc020:	fa02 f303 	lsl.w	r3, r2, r3
   bc024:	ea03 0a0a 	and.w	sl, r3, sl
   bc028:	e6e3      	b.n	bbdf2 <_strtod_l+0x622>
   bc02a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bc02e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bc032:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bc036:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bc03a:	fa01 f308 	lsl.w	r3, r1, r8
   bc03e:	9308      	str	r3, [sp, #32]
   bc040:	910d      	str	r1, [sp, #52]	; 0x34
   bc042:	e746      	b.n	bbed2 <_strtod_l+0x702>
   bc044:	2300      	movs	r3, #0
   bc046:	9308      	str	r3, [sp, #32]
   bc048:	2301      	movs	r3, #1
   bc04a:	930d      	str	r3, [sp, #52]	; 0x34
   bc04c:	e741      	b.n	bbed2 <_strtod_l+0x702>
   bc04e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc050:	4642      	mov	r2, r8
   bc052:	4620      	mov	r0, r4
   bc054:	f001 f8ee 	bl	bd234 <__lshift>
   bc058:	9018      	str	r0, [sp, #96]	; 0x60
   bc05a:	2800      	cmp	r0, #0
   bc05c:	f47f af6b 	bne.w	bbf36 <_strtod_l+0x766>
   bc060:	e5fe      	b.n	bbc60 <_strtod_l+0x490>
   bc062:	465f      	mov	r7, fp
   bc064:	d16e      	bne.n	bc144 <_strtod_l+0x974>
   bc066:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bc068:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc06c:	b342      	cbz	r2, bc0c0 <_strtod_l+0x8f0>
   bc06e:	4a32      	ldr	r2, [pc, #200]	; (bc138 <_strtod_l+0x968>)
   bc070:	4293      	cmp	r3, r2
   bc072:	d128      	bne.n	bc0c6 <_strtod_l+0x8f6>
   bc074:	9b04      	ldr	r3, [sp, #16]
   bc076:	4651      	mov	r1, sl
   bc078:	b1eb      	cbz	r3, bc0b6 <_strtod_l+0x8e6>
   bc07a:	4b2d      	ldr	r3, [pc, #180]	; (bc130 <_strtod_l+0x960>)
   bc07c:	403b      	ands	r3, r7
   bc07e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc086:	d819      	bhi.n	bc0bc <_strtod_l+0x8ec>
   bc088:	0d1b      	lsrs	r3, r3, #20
   bc08a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bc08e:	fa02 f303 	lsl.w	r3, r2, r3
   bc092:	4299      	cmp	r1, r3
   bc094:	d117      	bne.n	bc0c6 <_strtod_l+0x8f6>
   bc096:	4b29      	ldr	r3, [pc, #164]	; (bc13c <_strtod_l+0x96c>)
   bc098:	429f      	cmp	r7, r3
   bc09a:	d102      	bne.n	bc0a2 <_strtod_l+0x8d2>
   bc09c:	3101      	adds	r1, #1
   bc09e:	f43f addf 	beq.w	bbc60 <_strtod_l+0x490>
   bc0a2:	4b23      	ldr	r3, [pc, #140]	; (bc130 <_strtod_l+0x960>)
   bc0a4:	403b      	ands	r3, r7
   bc0a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bc0aa:	f04f 0a00 	mov.w	sl, #0
   bc0ae:	9b04      	ldr	r3, [sp, #16]
   bc0b0:	2b00      	cmp	r3, #0
   bc0b2:	d1a4      	bne.n	bbffe <_strtod_l+0x82e>
   bc0b4:	e5de      	b.n	bbc74 <_strtod_l+0x4a4>
   bc0b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bc0ba:	e7ea      	b.n	bc092 <_strtod_l+0x8c2>
   bc0bc:	4613      	mov	r3, r2
   bc0be:	e7e8      	b.n	bc092 <_strtod_l+0x8c2>
   bc0c0:	ea53 030a 	orrs.w	r3, r3, sl
   bc0c4:	d08c      	beq.n	bbfe0 <_strtod_l+0x810>
   bc0c6:	9b08      	ldr	r3, [sp, #32]
   bc0c8:	b1db      	cbz	r3, bc102 <_strtod_l+0x932>
   bc0ca:	423b      	tst	r3, r7
   bc0cc:	d0ef      	beq.n	bc0ae <_strtod_l+0x8de>
   bc0ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc0d0:	9a04      	ldr	r2, [sp, #16]
   bc0d2:	4650      	mov	r0, sl
   bc0d4:	4659      	mov	r1, fp
   bc0d6:	b1c3      	cbz	r3, bc10a <_strtod_l+0x93a>
   bc0d8:	f7ff fb5c 	bl	bb794 <sulp>
   bc0dc:	4602      	mov	r2, r0
   bc0de:	460b      	mov	r3, r1
   bc0e0:	ec51 0b18 	vmov	r0, r1, d8
   bc0e4:	f7fe fd9a 	bl	bac1c <__adddf3>
   bc0e8:	4682      	mov	sl, r0
   bc0ea:	468b      	mov	fp, r1
   bc0ec:	e7df      	b.n	bc0ae <_strtod_l+0x8de>
   bc0ee:	4013      	ands	r3, r2
   bc0f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bc0f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bc0f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bc0fc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc100:	e7d5      	b.n	bc0ae <_strtod_l+0x8de>
   bc102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc104:	ea13 0f0a 	tst.w	r3, sl
   bc108:	e7e0      	b.n	bc0cc <_strtod_l+0x8fc>
   bc10a:	f7ff fb43 	bl	bb794 <sulp>
   bc10e:	4602      	mov	r2, r0
   bc110:	460b      	mov	r3, r1
   bc112:	ec51 0b18 	vmov	r0, r1, d8
   bc116:	f7fe fd7f 	bl	bac18 <__aeabi_dsub>
   bc11a:	2200      	movs	r2, #0
   bc11c:	2300      	movs	r3, #0
   bc11e:	4682      	mov	sl, r0
   bc120:	468b      	mov	fp, r1
   bc122:	f7ff f999 	bl	bb458 <__aeabi_dcmpeq>
   bc126:	2800      	cmp	r0, #0
   bc128:	d0c1      	beq.n	bc0ae <_strtod_l+0x8de>
   bc12a:	e611      	b.n	bbd50 <_strtod_l+0x580>
   bc12c:	fffffc02 	.word	0xfffffc02
   bc130:	7ff00000 	.word	0x7ff00000
   bc134:	39500000 	.word	0x39500000
   bc138:	000fffff 	.word	0x000fffff
   bc13c:	7fefffff 	.word	0x7fefffff
   bc140:	000be180 	.word	0x000be180
   bc144:	4631      	mov	r1, r6
   bc146:	4628      	mov	r0, r5
   bc148:	f001 fa62 	bl	bd610 <__ratio>
   bc14c:	ec59 8b10 	vmov	r8, r9, d0
   bc150:	ee10 0a10 	vmov	r0, s0
   bc154:	2200      	movs	r2, #0
   bc156:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bc15a:	4649      	mov	r1, r9
   bc15c:	f7ff f990 	bl	bb480 <__aeabi_dcmple>
   bc160:	2800      	cmp	r0, #0
   bc162:	d07a      	beq.n	bc25a <_strtod_l+0xa8a>
   bc164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc166:	2b00      	cmp	r3, #0
   bc168:	d04a      	beq.n	bc200 <_strtod_l+0xa30>
   bc16a:	4b95      	ldr	r3, [pc, #596]	; (bc3c0 <_strtod_l+0xbf0>)
   bc16c:	2200      	movs	r2, #0
   bc16e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc172:	f8df 924c 	ldr.w	r9, [pc, #588]	; bc3c0 <_strtod_l+0xbf0>
   bc176:	f04f 0800 	mov.w	r8, #0
   bc17a:	4b92      	ldr	r3, [pc, #584]	; (bc3c4 <_strtod_l+0xbf4>)
   bc17c:	403b      	ands	r3, r7
   bc17e:	930d      	str	r3, [sp, #52]	; 0x34
   bc180:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc182:	4b91      	ldr	r3, [pc, #580]	; (bc3c8 <_strtod_l+0xbf8>)
   bc184:	429a      	cmp	r2, r3
   bc186:	f040 80b0 	bne.w	bc2ea <_strtod_l+0xb1a>
   bc18a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc18e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bc192:	ec4b ab10 	vmov	d0, sl, fp
   bc196:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc19a:	f001 f961 	bl	bd460 <__ulp>
   bc19e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc1a2:	ec53 2b10 	vmov	r2, r3, d0
   bc1a6:	f7fe feef 	bl	baf88 <__aeabi_dmul>
   bc1aa:	4652      	mov	r2, sl
   bc1ac:	465b      	mov	r3, fp
   bc1ae:	f7fe fd35 	bl	bac1c <__adddf3>
   bc1b2:	460b      	mov	r3, r1
   bc1b4:	4983      	ldr	r1, [pc, #524]	; (bc3c4 <_strtod_l+0xbf4>)
   bc1b6:	4a85      	ldr	r2, [pc, #532]	; (bc3cc <_strtod_l+0xbfc>)
   bc1b8:	4019      	ands	r1, r3
   bc1ba:	4291      	cmp	r1, r2
   bc1bc:	4682      	mov	sl, r0
   bc1be:	d960      	bls.n	bc282 <_strtod_l+0xab2>
   bc1c0:	ee18 3a90 	vmov	r3, s17
   bc1c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bc1c8:	4293      	cmp	r3, r2
   bc1ca:	d104      	bne.n	bc1d6 <_strtod_l+0xa06>
   bc1cc:	ee18 3a10 	vmov	r3, s16
   bc1d0:	3301      	adds	r3, #1
   bc1d2:	f43f ad45 	beq.w	bbc60 <_strtod_l+0x490>
   bc1d6:	f8df b200 	ldr.w	fp, [pc, #512]	; bc3d8 <_strtod_l+0xc08>
   bc1da:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc1de:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc1e0:	4620      	mov	r0, r4
   bc1e2:	f000 fe0b 	bl	bcdfc <_Bfree>
   bc1e6:	9905      	ldr	r1, [sp, #20]
   bc1e8:	4620      	mov	r0, r4
   bc1ea:	f000 fe07 	bl	bcdfc <_Bfree>
   bc1ee:	4631      	mov	r1, r6
   bc1f0:	4620      	mov	r0, r4
   bc1f2:	f000 fe03 	bl	bcdfc <_Bfree>
   bc1f6:	4629      	mov	r1, r5
   bc1f8:	4620      	mov	r0, r4
   bc1fa:	f000 fdff 	bl	bcdfc <_Bfree>
   bc1fe:	e61a      	b.n	bbe36 <_strtod_l+0x666>
   bc200:	f1ba 0f00 	cmp.w	sl, #0
   bc204:	d11b      	bne.n	bc23e <_strtod_l+0xa6e>
   bc206:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc20a:	b9f3      	cbnz	r3, bc24a <_strtod_l+0xa7a>
   bc20c:	4b6c      	ldr	r3, [pc, #432]	; (bc3c0 <_strtod_l+0xbf0>)
   bc20e:	2200      	movs	r2, #0
   bc210:	4640      	mov	r0, r8
   bc212:	4649      	mov	r1, r9
   bc214:	f7ff f92a 	bl	bb46c <__aeabi_dcmplt>
   bc218:	b9d0      	cbnz	r0, bc250 <_strtod_l+0xa80>
   bc21a:	4640      	mov	r0, r8
   bc21c:	4649      	mov	r1, r9
   bc21e:	4b6c      	ldr	r3, [pc, #432]	; (bc3d0 <_strtod_l+0xc00>)
   bc220:	2200      	movs	r2, #0
   bc222:	f7fe feb1 	bl	baf88 <__aeabi_dmul>
   bc226:	4680      	mov	r8, r0
   bc228:	4689      	mov	r9, r1
   bc22a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bc22e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bc232:	9315      	str	r3, [sp, #84]	; 0x54
   bc234:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bc238:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc23c:	e79d      	b.n	bc17a <_strtod_l+0x9aa>
   bc23e:	f1ba 0f01 	cmp.w	sl, #1
   bc242:	d102      	bne.n	bc24a <_strtod_l+0xa7a>
   bc244:	2f00      	cmp	r7, #0
   bc246:	f43f ad83 	beq.w	bbd50 <_strtod_l+0x580>
   bc24a:	4b62      	ldr	r3, [pc, #392]	; (bc3d4 <_strtod_l+0xc04>)
   bc24c:	2200      	movs	r2, #0
   bc24e:	e78e      	b.n	bc16e <_strtod_l+0x99e>
   bc250:	f8df 917c 	ldr.w	r9, [pc, #380]	; bc3d0 <_strtod_l+0xc00>
   bc254:	f04f 0800 	mov.w	r8, #0
   bc258:	e7e7      	b.n	bc22a <_strtod_l+0xa5a>
   bc25a:	4b5d      	ldr	r3, [pc, #372]	; (bc3d0 <_strtod_l+0xc00>)
   bc25c:	4640      	mov	r0, r8
   bc25e:	4649      	mov	r1, r9
   bc260:	2200      	movs	r2, #0
   bc262:	f7fe fe91 	bl	baf88 <__aeabi_dmul>
   bc266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc268:	4680      	mov	r8, r0
   bc26a:	4689      	mov	r9, r1
   bc26c:	b933      	cbnz	r3, bc27c <_strtod_l+0xaac>
   bc26e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc272:	900e      	str	r0, [sp, #56]	; 0x38
   bc274:	930f      	str	r3, [sp, #60]	; 0x3c
   bc276:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bc27a:	e7dd      	b.n	bc238 <_strtod_l+0xa68>
   bc27c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bc280:	e7f9      	b.n	bc276 <_strtod_l+0xaa6>
   bc282:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bc286:	9b04      	ldr	r3, [sp, #16]
   bc288:	2b00      	cmp	r3, #0
   bc28a:	d1a8      	bne.n	bc1de <_strtod_l+0xa0e>
   bc28c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bc290:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc292:	0d1b      	lsrs	r3, r3, #20
   bc294:	051b      	lsls	r3, r3, #20
   bc296:	429a      	cmp	r2, r3
   bc298:	d1a1      	bne.n	bc1de <_strtod_l+0xa0e>
   bc29a:	4640      	mov	r0, r8
   bc29c:	4649      	mov	r1, r9
   bc29e:	f001 fa5b 	bl	bd758 <__aeabi_d2lz>
   bc2a2:	f7fe fe43 	bl	baf2c <__aeabi_l2d>
   bc2a6:	4602      	mov	r2, r0
   bc2a8:	460b      	mov	r3, r1
   bc2aa:	4640      	mov	r0, r8
   bc2ac:	4649      	mov	r1, r9
   bc2ae:	f7fe fcb3 	bl	bac18 <__aeabi_dsub>
   bc2b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bc2b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc2b8:	ea43 030a 	orr.w	r3, r3, sl
   bc2bc:	4313      	orrs	r3, r2
   bc2be:	4680      	mov	r8, r0
   bc2c0:	4689      	mov	r9, r1
   bc2c2:	d055      	beq.n	bc370 <_strtod_l+0xba0>
   bc2c4:	a336      	add	r3, pc, #216	; (adr r3, bc3a0 <_strtod_l+0xbd0>)
   bc2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc2ca:	f7ff f8cf 	bl	bb46c <__aeabi_dcmplt>
   bc2ce:	2800      	cmp	r0, #0
   bc2d0:	f47f acd0 	bne.w	bbc74 <_strtod_l+0x4a4>
   bc2d4:	a334      	add	r3, pc, #208	; (adr r3, bc3a8 <_strtod_l+0xbd8>)
   bc2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc2da:	4640      	mov	r0, r8
   bc2dc:	4649      	mov	r1, r9
   bc2de:	f7ff f8e3 	bl	bb4a8 <__aeabi_dcmpgt>
   bc2e2:	2800      	cmp	r0, #0
   bc2e4:	f43f af7b 	beq.w	bc1de <_strtod_l+0xa0e>
   bc2e8:	e4c4      	b.n	bbc74 <_strtod_l+0x4a4>
   bc2ea:	9b04      	ldr	r3, [sp, #16]
   bc2ec:	b333      	cbz	r3, bc33c <_strtod_l+0xb6c>
   bc2ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc2f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc2f4:	d822      	bhi.n	bc33c <_strtod_l+0xb6c>
   bc2f6:	a32e      	add	r3, pc, #184	; (adr r3, bc3b0 <_strtod_l+0xbe0>)
   bc2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc2fc:	4640      	mov	r0, r8
   bc2fe:	4649      	mov	r1, r9
   bc300:	f7ff f8be 	bl	bb480 <__aeabi_dcmple>
   bc304:	b1a0      	cbz	r0, bc330 <_strtod_l+0xb60>
   bc306:	4649      	mov	r1, r9
   bc308:	4640      	mov	r0, r8
   bc30a:	f7ff f8ed 	bl	bb4e8 <__aeabi_d2uiz>
   bc30e:	2801      	cmp	r0, #1
   bc310:	bf38      	it	cc
   bc312:	2001      	movcc	r0, #1
   bc314:	f7fe fdbe 	bl	bae94 <__aeabi_ui2d>
   bc318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc31a:	4680      	mov	r8, r0
   bc31c:	4689      	mov	r9, r1
   bc31e:	bb23      	cbnz	r3, bc36a <_strtod_l+0xb9a>
   bc320:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc324:	9010      	str	r0, [sp, #64]	; 0x40
   bc326:	9311      	str	r3, [sp, #68]	; 0x44
   bc328:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bc32c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc330:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bc332:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc334:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bc338:	1a9b      	subs	r3, r3, r2
   bc33a:	9309      	str	r3, [sp, #36]	; 0x24
   bc33c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc340:	eeb0 0a48 	vmov.f32	s0, s16
   bc344:	eef0 0a68 	vmov.f32	s1, s17
   bc348:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc34c:	f001 f888 	bl	bd460 <__ulp>
   bc350:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc354:	ec53 2b10 	vmov	r2, r3, d0
   bc358:	f7fe fe16 	bl	baf88 <__aeabi_dmul>
   bc35c:	ec53 2b18 	vmov	r2, r3, d8
   bc360:	f7fe fc5c 	bl	bac1c <__adddf3>
   bc364:	4682      	mov	sl, r0
   bc366:	468b      	mov	fp, r1
   bc368:	e78d      	b.n	bc286 <_strtod_l+0xab6>
   bc36a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bc36e:	e7db      	b.n	bc328 <_strtod_l+0xb58>
   bc370:	a311      	add	r3, pc, #68	; (adr r3, bc3b8 <_strtod_l+0xbe8>)
   bc372:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc376:	f7ff f879 	bl	bb46c <__aeabi_dcmplt>
   bc37a:	e7b2      	b.n	bc2e2 <_strtod_l+0xb12>
   bc37c:	2300      	movs	r3, #0
   bc37e:	930a      	str	r3, [sp, #40]	; 0x28
   bc380:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bc382:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc384:	6013      	str	r3, [r2, #0]
   bc386:	f7ff ba6b 	b.w	bb860 <_strtod_l+0x90>
   bc38a:	2a65      	cmp	r2, #101	; 0x65
   bc38c:	f43f ab5f 	beq.w	bba4e <_strtod_l+0x27e>
   bc390:	2a45      	cmp	r2, #69	; 0x45
   bc392:	f43f ab5c 	beq.w	bba4e <_strtod_l+0x27e>
   bc396:	2301      	movs	r3, #1
   bc398:	f7ff bb94 	b.w	bbac4 <_strtod_l+0x2f4>
   bc39c:	f3af 8000 	nop.w
   bc3a0:	94a03595 	.word	0x94a03595
   bc3a4:	3fdfffff 	.word	0x3fdfffff
   bc3a8:	35afe535 	.word	0x35afe535
   bc3ac:	3fe00000 	.word	0x3fe00000
   bc3b0:	ffc00000 	.word	0xffc00000
   bc3b4:	41dfffff 	.word	0x41dfffff
   bc3b8:	94a03595 	.word	0x94a03595
   bc3bc:	3fcfffff 	.word	0x3fcfffff
   bc3c0:	3ff00000 	.word	0x3ff00000
   bc3c4:	7ff00000 	.word	0x7ff00000
   bc3c8:	7fe00000 	.word	0x7fe00000
   bc3cc:	7c9fffff 	.word	0x7c9fffff
   bc3d0:	3fe00000 	.word	0x3fe00000
   bc3d4:	bff00000 	.word	0xbff00000
   bc3d8:	7fefffff 	.word	0x7fefffff

000bc3dc <strtof>:
   bc3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc3e0:	f8df 80ac 	ldr.w	r8, [pc, #172]	; bc490 <strtof+0xb4>
   bc3e4:	4b26      	ldr	r3, [pc, #152]	; (bc480 <strtof+0xa4>)
   bc3e6:	460a      	mov	r2, r1
   bc3e8:	ed2d 8b02 	vpush	{d8}
   bc3ec:	4601      	mov	r1, r0
   bc3ee:	f8d8 0000 	ldr.w	r0, [r8]
   bc3f2:	f7ff f9ed 	bl	bb7d0 <_strtod_l>
   bc3f6:	ec55 4b10 	vmov	r4, r5, d0
   bc3fa:	ee10 2a10 	vmov	r2, s0
   bc3fe:	ee10 0a10 	vmov	r0, s0
   bc402:	462b      	mov	r3, r5
   bc404:	4629      	mov	r1, r5
   bc406:	f7ff f859 	bl	bb4bc <__aeabi_dcmpun>
   bc40a:	b190      	cbz	r0, bc432 <strtof+0x56>
   bc40c:	2d00      	cmp	r5, #0
   bc40e:	481d      	ldr	r0, [pc, #116]	; (bc484 <strtof+0xa8>)
   bc410:	da09      	bge.n	bc426 <strtof+0x4a>
   bc412:	f001 f98d 	bl	bd730 <nanf>
   bc416:	eeb1 8a40 	vneg.f32	s16, s0
   bc41a:	eeb0 0a48 	vmov.f32	s0, s16
   bc41e:	ecbd 8b02 	vpop	{d8}
   bc422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc426:	ecbd 8b02 	vpop	{d8}
   bc42a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bc42e:	f001 b97f 	b.w	bd730 <nanf>
   bc432:	4620      	mov	r0, r4
   bc434:	4629      	mov	r1, r5
   bc436:	f7ff f877 	bl	bb528 <__aeabi_d2f>
   bc43a:	ee08 0a10 	vmov	s16, r0
   bc43e:	eddf 7a12 	vldr	s15, [pc, #72]	; bc488 <strtof+0xac>
   bc442:	eeb0 7ac8 	vabs.f32	s14, s16
   bc446:	eeb4 7a67 	vcmp.f32	s14, s15
   bc44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bc44e:	dde4      	ble.n	bc41a <strtof+0x3e>
   bc450:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   bc454:	4b0d      	ldr	r3, [pc, #52]	; (bc48c <strtof+0xb0>)
   bc456:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc45a:	4620      	mov	r0, r4
   bc45c:	4639      	mov	r1, r7
   bc45e:	f7ff f82d 	bl	bb4bc <__aeabi_dcmpun>
   bc462:	b940      	cbnz	r0, bc476 <strtof+0x9a>
   bc464:	4b09      	ldr	r3, [pc, #36]	; (bc48c <strtof+0xb0>)
   bc466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc46a:	4620      	mov	r0, r4
   bc46c:	4639      	mov	r1, r7
   bc46e:	f7ff f807 	bl	bb480 <__aeabi_dcmple>
   bc472:	2800      	cmp	r0, #0
   bc474:	d0d1      	beq.n	bc41a <strtof+0x3e>
   bc476:	f8d8 3000 	ldr.w	r3, [r8]
   bc47a:	2222      	movs	r2, #34	; 0x22
   bc47c:	601a      	str	r2, [r3, #0]
   bc47e:	e7cc      	b.n	bc41a <strtof+0x3e>
   bc480:	20035360 	.word	0x20035360
   bc484:	000bdbc2 	.word	0x000bdbc2
   bc488:	7f7fffff 	.word	0x7f7fffff
   bc48c:	7fefffff 	.word	0x7fefffff
   bc490:	200352f4 	.word	0x200352f4

000bc494 <_strtol_l.constprop.0>:
   bc494:	2b01      	cmp	r3, #1
   bc496:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc49a:	d001      	beq.n	bc4a0 <_strtol_l.constprop.0+0xc>
   bc49c:	2b24      	cmp	r3, #36	; 0x24
   bc49e:	d906      	bls.n	bc4ae <_strtol_l.constprop.0+0x1a>
   bc4a0:	f7fb fe24 	bl	b80ec <__errno>
   bc4a4:	2316      	movs	r3, #22
   bc4a6:	6003      	str	r3, [r0, #0]
   bc4a8:	2000      	movs	r0, #0
   bc4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc4ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bc594 <_strtol_l.constprop.0+0x100>
   bc4b2:	460d      	mov	r5, r1
   bc4b4:	462e      	mov	r6, r5
   bc4b6:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc4ba:	f814 700c 	ldrb.w	r7, [r4, ip]
   bc4be:	f017 0708 	ands.w	r7, r7, #8
   bc4c2:	d1f7      	bne.n	bc4b4 <_strtol_l.constprop.0+0x20>
   bc4c4:	2c2d      	cmp	r4, #45	; 0x2d
   bc4c6:	d132      	bne.n	bc52e <_strtol_l.constprop.0+0x9a>
   bc4c8:	782c      	ldrb	r4, [r5, #0]
   bc4ca:	2701      	movs	r7, #1
   bc4cc:	1cb5      	adds	r5, r6, #2
   bc4ce:	2b00      	cmp	r3, #0
   bc4d0:	d05b      	beq.n	bc58a <_strtol_l.constprop.0+0xf6>
   bc4d2:	2b10      	cmp	r3, #16
   bc4d4:	d109      	bne.n	bc4ea <_strtol_l.constprop.0+0x56>
   bc4d6:	2c30      	cmp	r4, #48	; 0x30
   bc4d8:	d107      	bne.n	bc4ea <_strtol_l.constprop.0+0x56>
   bc4da:	782c      	ldrb	r4, [r5, #0]
   bc4dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bc4e0:	2c58      	cmp	r4, #88	; 0x58
   bc4e2:	d14d      	bne.n	bc580 <_strtol_l.constprop.0+0xec>
   bc4e4:	786c      	ldrb	r4, [r5, #1]
   bc4e6:	2310      	movs	r3, #16
   bc4e8:	3502      	adds	r5, #2
   bc4ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bc4ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bc4f2:	f04f 0c00 	mov.w	ip, #0
   bc4f6:	fbb8 f9f3 	udiv	r9, r8, r3
   bc4fa:	4666      	mov	r6, ip
   bc4fc:	fb03 8a19 	mls	sl, r3, r9, r8
   bc500:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bc504:	f1be 0f09 	cmp.w	lr, #9
   bc508:	d816      	bhi.n	bc538 <_strtol_l.constprop.0+0xa4>
   bc50a:	4674      	mov	r4, lr
   bc50c:	42a3      	cmp	r3, r4
   bc50e:	dd24      	ble.n	bc55a <_strtol_l.constprop.0+0xc6>
   bc510:	f1bc 0f00 	cmp.w	ip, #0
   bc514:	db1e      	blt.n	bc554 <_strtol_l.constprop.0+0xc0>
   bc516:	45b1      	cmp	r9, r6
   bc518:	d31c      	bcc.n	bc554 <_strtol_l.constprop.0+0xc0>
   bc51a:	d101      	bne.n	bc520 <_strtol_l.constprop.0+0x8c>
   bc51c:	45a2      	cmp	sl, r4
   bc51e:	db19      	blt.n	bc554 <_strtol_l.constprop.0+0xc0>
   bc520:	fb06 4603 	mla	r6, r6, r3, r4
   bc524:	f04f 0c01 	mov.w	ip, #1
   bc528:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc52c:	e7e8      	b.n	bc500 <_strtol_l.constprop.0+0x6c>
   bc52e:	2c2b      	cmp	r4, #43	; 0x2b
   bc530:	bf04      	itt	eq
   bc532:	782c      	ldrbeq	r4, [r5, #0]
   bc534:	1cb5      	addeq	r5, r6, #2
   bc536:	e7ca      	b.n	bc4ce <_strtol_l.constprop.0+0x3a>
   bc538:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bc53c:	f1be 0f19 	cmp.w	lr, #25
   bc540:	d801      	bhi.n	bc546 <_strtol_l.constprop.0+0xb2>
   bc542:	3c37      	subs	r4, #55	; 0x37
   bc544:	e7e2      	b.n	bc50c <_strtol_l.constprop.0+0x78>
   bc546:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bc54a:	f1be 0f19 	cmp.w	lr, #25
   bc54e:	d804      	bhi.n	bc55a <_strtol_l.constprop.0+0xc6>
   bc550:	3c57      	subs	r4, #87	; 0x57
   bc552:	e7db      	b.n	bc50c <_strtol_l.constprop.0+0x78>
   bc554:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bc558:	e7e6      	b.n	bc528 <_strtol_l.constprop.0+0x94>
   bc55a:	f1bc 0f00 	cmp.w	ip, #0
   bc55e:	da05      	bge.n	bc56c <_strtol_l.constprop.0+0xd8>
   bc560:	2322      	movs	r3, #34	; 0x22
   bc562:	6003      	str	r3, [r0, #0]
   bc564:	4646      	mov	r6, r8
   bc566:	b942      	cbnz	r2, bc57a <_strtol_l.constprop.0+0xe6>
   bc568:	4630      	mov	r0, r6
   bc56a:	e79e      	b.n	bc4aa <_strtol_l.constprop.0+0x16>
   bc56c:	b107      	cbz	r7, bc570 <_strtol_l.constprop.0+0xdc>
   bc56e:	4276      	negs	r6, r6
   bc570:	2a00      	cmp	r2, #0
   bc572:	d0f9      	beq.n	bc568 <_strtol_l.constprop.0+0xd4>
   bc574:	f1bc 0f00 	cmp.w	ip, #0
   bc578:	d000      	beq.n	bc57c <_strtol_l.constprop.0+0xe8>
   bc57a:	1e69      	subs	r1, r5, #1
   bc57c:	6011      	str	r1, [r2, #0]
   bc57e:	e7f3      	b.n	bc568 <_strtol_l.constprop.0+0xd4>
   bc580:	2430      	movs	r4, #48	; 0x30
   bc582:	2b00      	cmp	r3, #0
   bc584:	d1b1      	bne.n	bc4ea <_strtol_l.constprop.0+0x56>
   bc586:	2308      	movs	r3, #8
   bc588:	e7af      	b.n	bc4ea <_strtol_l.constprop.0+0x56>
   bc58a:	2c30      	cmp	r4, #48	; 0x30
   bc58c:	d0a5      	beq.n	bc4da <_strtol_l.constprop.0+0x46>
   bc58e:	230a      	movs	r3, #10
   bc590:	e7ab      	b.n	bc4ea <_strtol_l.constprop.0+0x56>
   bc592:	bf00      	nop
   bc594:	000be1a9 	.word	0x000be1a9

000bc598 <strtol>:
   bc598:	4613      	mov	r3, r2
   bc59a:	460a      	mov	r2, r1
   bc59c:	4601      	mov	r1, r0
   bc59e:	4802      	ldr	r0, [pc, #8]	; (bc5a8 <strtol+0x10>)
   bc5a0:	6800      	ldr	r0, [r0, #0]
   bc5a2:	f7ff bf77 	b.w	bc494 <_strtol_l.constprop.0>
   bc5a6:	bf00      	nop
   bc5a8:	200352f4 	.word	0x200352f4

000bc5ac <__register_exitproc>:
   bc5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc5b0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bc66c <__register_exitproc+0xc0>
   bc5b4:	4606      	mov	r6, r0
   bc5b6:	f8d8 0000 	ldr.w	r0, [r8]
   bc5ba:	461f      	mov	r7, r3
   bc5bc:	460d      	mov	r5, r1
   bc5be:	4691      	mov	r9, r2
   bc5c0:	f000 fbc6 	bl	bcd50 <__retarget_lock_acquire_recursive>
   bc5c4:	4b25      	ldr	r3, [pc, #148]	; (bc65c <__register_exitproc+0xb0>)
   bc5c6:	681c      	ldr	r4, [r3, #0]
   bc5c8:	b934      	cbnz	r4, bc5d8 <__register_exitproc+0x2c>
   bc5ca:	4c25      	ldr	r4, [pc, #148]	; (bc660 <__register_exitproc+0xb4>)
   bc5cc:	601c      	str	r4, [r3, #0]
   bc5ce:	4b25      	ldr	r3, [pc, #148]	; (bc664 <__register_exitproc+0xb8>)
   bc5d0:	b113      	cbz	r3, bc5d8 <__register_exitproc+0x2c>
   bc5d2:	681b      	ldr	r3, [r3, #0]
   bc5d4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bc5d8:	6863      	ldr	r3, [r4, #4]
   bc5da:	2b1f      	cmp	r3, #31
   bc5dc:	dd07      	ble.n	bc5ee <__register_exitproc+0x42>
   bc5de:	f8d8 0000 	ldr.w	r0, [r8]
   bc5e2:	f000 fbb7 	bl	bcd54 <__retarget_lock_release_recursive>
   bc5e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc5ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc5ee:	b34e      	cbz	r6, bc644 <__register_exitproc+0x98>
   bc5f0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bc5f4:	b988      	cbnz	r0, bc61a <__register_exitproc+0x6e>
   bc5f6:	4b1c      	ldr	r3, [pc, #112]	; (bc668 <__register_exitproc+0xbc>)
   bc5f8:	b923      	cbnz	r3, bc604 <__register_exitproc+0x58>
   bc5fa:	f8d8 0000 	ldr.w	r0, [r8]
   bc5fe:	f000 fba8 	bl	bcd52 <__retarget_lock_release>
   bc602:	e7f0      	b.n	bc5e6 <__register_exitproc+0x3a>
   bc604:	f44f 7084 	mov.w	r0, #264	; 0x108
   bc608:	f7fb fd38 	bl	b807c <malloc>
   bc60c:	2800      	cmp	r0, #0
   bc60e:	d0f4      	beq.n	bc5fa <__register_exitproc+0x4e>
   bc610:	2300      	movs	r3, #0
   bc612:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bc616:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bc61a:	6863      	ldr	r3, [r4, #4]
   bc61c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bc620:	2201      	movs	r2, #1
   bc622:	409a      	lsls	r2, r3
   bc624:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bc628:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bc62c:	4313      	orrs	r3, r2
   bc62e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bc632:	2e02      	cmp	r6, #2
   bc634:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bc638:	bf02      	ittt	eq
   bc63a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bc63e:	4313      	orreq	r3, r2
   bc640:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bc644:	6863      	ldr	r3, [r4, #4]
   bc646:	f8d8 0000 	ldr.w	r0, [r8]
   bc64a:	1c5a      	adds	r2, r3, #1
   bc64c:	3302      	adds	r3, #2
   bc64e:	6062      	str	r2, [r4, #4]
   bc650:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bc654:	f000 fb7e 	bl	bcd54 <__retarget_lock_release_recursive>
   bc658:	2000      	movs	r0, #0
   bc65a:	e7c6      	b.n	bc5ea <__register_exitproc+0x3e>
   bc65c:	2003e7e8 	.word	0x2003e7e8
   bc660:	2003e75c 	.word	0x2003e75c
   bc664:	00000000 	.word	0x00000000
   bc668:	000b807d 	.word	0x000b807d
   bc66c:	20035358 	.word	0x20035358

000bc670 <rshift>:
   bc670:	6903      	ldr	r3, [r0, #16]
   bc672:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bc676:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc67a:	ea4f 1261 	mov.w	r2, r1, asr #5
   bc67e:	f100 0414 	add.w	r4, r0, #20
   bc682:	dd45      	ble.n	bc710 <rshift+0xa0>
   bc684:	f011 011f 	ands.w	r1, r1, #31
   bc688:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bc68c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bc690:	d10c      	bne.n	bc6ac <rshift+0x3c>
   bc692:	f100 0710 	add.w	r7, r0, #16
   bc696:	4629      	mov	r1, r5
   bc698:	42b1      	cmp	r1, r6
   bc69a:	d334      	bcc.n	bc706 <rshift+0x96>
   bc69c:	1a9b      	subs	r3, r3, r2
   bc69e:	009b      	lsls	r3, r3, #2
   bc6a0:	1eea      	subs	r2, r5, #3
   bc6a2:	4296      	cmp	r6, r2
   bc6a4:	bf38      	it	cc
   bc6a6:	2300      	movcc	r3, #0
   bc6a8:	4423      	add	r3, r4
   bc6aa:	e015      	b.n	bc6d8 <rshift+0x68>
   bc6ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bc6b0:	f1c1 0820 	rsb	r8, r1, #32
   bc6b4:	40cf      	lsrs	r7, r1
   bc6b6:	f105 0e04 	add.w	lr, r5, #4
   bc6ba:	46a1      	mov	r9, r4
   bc6bc:	4576      	cmp	r6, lr
   bc6be:	46f4      	mov	ip, lr
   bc6c0:	d815      	bhi.n	bc6ee <rshift+0x7e>
   bc6c2:	1a9a      	subs	r2, r3, r2
   bc6c4:	0092      	lsls	r2, r2, #2
   bc6c6:	3a04      	subs	r2, #4
   bc6c8:	3501      	adds	r5, #1
   bc6ca:	42ae      	cmp	r6, r5
   bc6cc:	bf38      	it	cc
   bc6ce:	2200      	movcc	r2, #0
   bc6d0:	18a3      	adds	r3, r4, r2
   bc6d2:	50a7      	str	r7, [r4, r2]
   bc6d4:	b107      	cbz	r7, bc6d8 <rshift+0x68>
   bc6d6:	3304      	adds	r3, #4
   bc6d8:	1b1a      	subs	r2, r3, r4
   bc6da:	42a3      	cmp	r3, r4
   bc6dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bc6e0:	bf08      	it	eq
   bc6e2:	2300      	moveq	r3, #0
   bc6e4:	6102      	str	r2, [r0, #16]
   bc6e6:	bf08      	it	eq
   bc6e8:	6143      	streq	r3, [r0, #20]
   bc6ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc6ee:	f8dc c000 	ldr.w	ip, [ip]
   bc6f2:	fa0c fc08 	lsl.w	ip, ip, r8
   bc6f6:	ea4c 0707 	orr.w	r7, ip, r7
   bc6fa:	f849 7b04 	str.w	r7, [r9], #4
   bc6fe:	f85e 7b04 	ldr.w	r7, [lr], #4
   bc702:	40cf      	lsrs	r7, r1
   bc704:	e7da      	b.n	bc6bc <rshift+0x4c>
   bc706:	f851 cb04 	ldr.w	ip, [r1], #4
   bc70a:	f847 cf04 	str.w	ip, [r7, #4]!
   bc70e:	e7c3      	b.n	bc698 <rshift+0x28>
   bc710:	4623      	mov	r3, r4
   bc712:	e7e1      	b.n	bc6d8 <rshift+0x68>

000bc714 <__hexdig_fun>:
   bc714:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bc718:	2b09      	cmp	r3, #9
   bc71a:	d802      	bhi.n	bc722 <__hexdig_fun+0xe>
   bc71c:	3820      	subs	r0, #32
   bc71e:	b2c0      	uxtb	r0, r0
   bc720:	4770      	bx	lr
   bc722:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bc726:	2b05      	cmp	r3, #5
   bc728:	d801      	bhi.n	bc72e <__hexdig_fun+0x1a>
   bc72a:	3847      	subs	r0, #71	; 0x47
   bc72c:	e7f7      	b.n	bc71e <__hexdig_fun+0xa>
   bc72e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bc732:	2b05      	cmp	r3, #5
   bc734:	d801      	bhi.n	bc73a <__hexdig_fun+0x26>
   bc736:	3827      	subs	r0, #39	; 0x27
   bc738:	e7f1      	b.n	bc71e <__hexdig_fun+0xa>
   bc73a:	2000      	movs	r0, #0
   bc73c:	4770      	bx	lr
	...

000bc740 <__gethex>:
   bc740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc744:	ed2d 8b02 	vpush	{d8}
   bc748:	b089      	sub	sp, #36	; 0x24
   bc74a:	ee08 0a10 	vmov	s16, r0
   bc74e:	9304      	str	r3, [sp, #16]
   bc750:	4bb4      	ldr	r3, [pc, #720]	; (bca24 <__gethex+0x2e4>)
   bc752:	681b      	ldr	r3, [r3, #0]
   bc754:	9301      	str	r3, [sp, #4]
   bc756:	4618      	mov	r0, r3
   bc758:	468b      	mov	fp, r1
   bc75a:	4690      	mov	r8, r2
   bc75c:	f7fe ffdc 	bl	bb718 <strlen>
   bc760:	9b01      	ldr	r3, [sp, #4]
   bc762:	f8db 2000 	ldr.w	r2, [fp]
   bc766:	4403      	add	r3, r0
   bc768:	4682      	mov	sl, r0
   bc76a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bc76e:	9305      	str	r3, [sp, #20]
   bc770:	1c93      	adds	r3, r2, #2
   bc772:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bc776:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bc77a:	32fe      	adds	r2, #254	; 0xfe
   bc77c:	18d1      	adds	r1, r2, r3
   bc77e:	461f      	mov	r7, r3
   bc780:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc784:	9100      	str	r1, [sp, #0]
   bc786:	2830      	cmp	r0, #48	; 0x30
   bc788:	d0f8      	beq.n	bc77c <__gethex+0x3c>
   bc78a:	f7ff ffc3 	bl	bc714 <__hexdig_fun>
   bc78e:	4604      	mov	r4, r0
   bc790:	2800      	cmp	r0, #0
   bc792:	d13a      	bne.n	bc80a <__gethex+0xca>
   bc794:	9901      	ldr	r1, [sp, #4]
   bc796:	4652      	mov	r2, sl
   bc798:	4638      	mov	r0, r7
   bc79a:	f7fe ffc5 	bl	bb728 <strncmp>
   bc79e:	4605      	mov	r5, r0
   bc7a0:	2800      	cmp	r0, #0
   bc7a2:	d168      	bne.n	bc876 <__gethex+0x136>
   bc7a4:	f817 000a 	ldrb.w	r0, [r7, sl]
   bc7a8:	eb07 060a 	add.w	r6, r7, sl
   bc7ac:	f7ff ffb2 	bl	bc714 <__hexdig_fun>
   bc7b0:	2800      	cmp	r0, #0
   bc7b2:	d062      	beq.n	bc87a <__gethex+0x13a>
   bc7b4:	4633      	mov	r3, r6
   bc7b6:	7818      	ldrb	r0, [r3, #0]
   bc7b8:	2830      	cmp	r0, #48	; 0x30
   bc7ba:	461f      	mov	r7, r3
   bc7bc:	f103 0301 	add.w	r3, r3, #1
   bc7c0:	d0f9      	beq.n	bc7b6 <__gethex+0x76>
   bc7c2:	f7ff ffa7 	bl	bc714 <__hexdig_fun>
   bc7c6:	2301      	movs	r3, #1
   bc7c8:	fab0 f480 	clz	r4, r0
   bc7cc:	0964      	lsrs	r4, r4, #5
   bc7ce:	4635      	mov	r5, r6
   bc7d0:	9300      	str	r3, [sp, #0]
   bc7d2:	463a      	mov	r2, r7
   bc7d4:	4616      	mov	r6, r2
   bc7d6:	3201      	adds	r2, #1
   bc7d8:	7830      	ldrb	r0, [r6, #0]
   bc7da:	f7ff ff9b 	bl	bc714 <__hexdig_fun>
   bc7de:	2800      	cmp	r0, #0
   bc7e0:	d1f8      	bne.n	bc7d4 <__gethex+0x94>
   bc7e2:	9901      	ldr	r1, [sp, #4]
   bc7e4:	4652      	mov	r2, sl
   bc7e6:	4630      	mov	r0, r6
   bc7e8:	f7fe ff9e 	bl	bb728 <strncmp>
   bc7ec:	b980      	cbnz	r0, bc810 <__gethex+0xd0>
   bc7ee:	b94d      	cbnz	r5, bc804 <__gethex+0xc4>
   bc7f0:	eb06 050a 	add.w	r5, r6, sl
   bc7f4:	462a      	mov	r2, r5
   bc7f6:	4616      	mov	r6, r2
   bc7f8:	3201      	adds	r2, #1
   bc7fa:	7830      	ldrb	r0, [r6, #0]
   bc7fc:	f7ff ff8a 	bl	bc714 <__hexdig_fun>
   bc800:	2800      	cmp	r0, #0
   bc802:	d1f8      	bne.n	bc7f6 <__gethex+0xb6>
   bc804:	1bad      	subs	r5, r5, r6
   bc806:	00ad      	lsls	r5, r5, #2
   bc808:	e004      	b.n	bc814 <__gethex+0xd4>
   bc80a:	2400      	movs	r4, #0
   bc80c:	4625      	mov	r5, r4
   bc80e:	e7e0      	b.n	bc7d2 <__gethex+0x92>
   bc810:	2d00      	cmp	r5, #0
   bc812:	d1f7      	bne.n	bc804 <__gethex+0xc4>
   bc814:	7833      	ldrb	r3, [r6, #0]
   bc816:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc81a:	2b50      	cmp	r3, #80	; 0x50
   bc81c:	d13b      	bne.n	bc896 <__gethex+0x156>
   bc81e:	7873      	ldrb	r3, [r6, #1]
   bc820:	2b2b      	cmp	r3, #43	; 0x2b
   bc822:	d02c      	beq.n	bc87e <__gethex+0x13e>
   bc824:	2b2d      	cmp	r3, #45	; 0x2d
   bc826:	d02e      	beq.n	bc886 <__gethex+0x146>
   bc828:	1c71      	adds	r1, r6, #1
   bc82a:	f04f 0900 	mov.w	r9, #0
   bc82e:	7808      	ldrb	r0, [r1, #0]
   bc830:	f7ff ff70 	bl	bc714 <__hexdig_fun>
   bc834:	1e43      	subs	r3, r0, #1
   bc836:	b2db      	uxtb	r3, r3
   bc838:	2b18      	cmp	r3, #24
   bc83a:	d82c      	bhi.n	bc896 <__gethex+0x156>
   bc83c:	f1a0 0210 	sub.w	r2, r0, #16
   bc840:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bc844:	f7ff ff66 	bl	bc714 <__hexdig_fun>
   bc848:	1e43      	subs	r3, r0, #1
   bc84a:	b2db      	uxtb	r3, r3
   bc84c:	2b18      	cmp	r3, #24
   bc84e:	d91d      	bls.n	bc88c <__gethex+0x14c>
   bc850:	f1b9 0f00 	cmp.w	r9, #0
   bc854:	d000      	beq.n	bc858 <__gethex+0x118>
   bc856:	4252      	negs	r2, r2
   bc858:	4415      	add	r5, r2
   bc85a:	f8cb 1000 	str.w	r1, [fp]
   bc85e:	b1e4      	cbz	r4, bc89a <__gethex+0x15a>
   bc860:	9b00      	ldr	r3, [sp, #0]
   bc862:	2b00      	cmp	r3, #0
   bc864:	bf14      	ite	ne
   bc866:	2700      	movne	r7, #0
   bc868:	2706      	moveq	r7, #6
   bc86a:	4638      	mov	r0, r7
   bc86c:	b009      	add	sp, #36	; 0x24
   bc86e:	ecbd 8b02 	vpop	{d8}
   bc872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc876:	463e      	mov	r6, r7
   bc878:	4625      	mov	r5, r4
   bc87a:	2401      	movs	r4, #1
   bc87c:	e7ca      	b.n	bc814 <__gethex+0xd4>
   bc87e:	f04f 0900 	mov.w	r9, #0
   bc882:	1cb1      	adds	r1, r6, #2
   bc884:	e7d3      	b.n	bc82e <__gethex+0xee>
   bc886:	f04f 0901 	mov.w	r9, #1
   bc88a:	e7fa      	b.n	bc882 <__gethex+0x142>
   bc88c:	230a      	movs	r3, #10
   bc88e:	fb03 0202 	mla	r2, r3, r2, r0
   bc892:	3a10      	subs	r2, #16
   bc894:	e7d4      	b.n	bc840 <__gethex+0x100>
   bc896:	4631      	mov	r1, r6
   bc898:	e7df      	b.n	bc85a <__gethex+0x11a>
   bc89a:	1bf3      	subs	r3, r6, r7
   bc89c:	3b01      	subs	r3, #1
   bc89e:	4621      	mov	r1, r4
   bc8a0:	2b07      	cmp	r3, #7
   bc8a2:	dc0b      	bgt.n	bc8bc <__gethex+0x17c>
   bc8a4:	ee18 0a10 	vmov	r0, s16
   bc8a8:	f000 fa68 	bl	bcd7c <_Balloc>
   bc8ac:	4604      	mov	r4, r0
   bc8ae:	b940      	cbnz	r0, bc8c2 <__gethex+0x182>
   bc8b0:	4b5d      	ldr	r3, [pc, #372]	; (bca28 <__gethex+0x2e8>)
   bc8b2:	4602      	mov	r2, r0
   bc8b4:	21de      	movs	r1, #222	; 0xde
   bc8b6:	485d      	ldr	r0, [pc, #372]	; (bca2c <__gethex+0x2ec>)
   bc8b8:	f7fb fc20 	bl	b80fc <__assert_func>
   bc8bc:	3101      	adds	r1, #1
   bc8be:	105b      	asrs	r3, r3, #1
   bc8c0:	e7ee      	b.n	bc8a0 <__gethex+0x160>
   bc8c2:	f100 0914 	add.w	r9, r0, #20
   bc8c6:	f04f 0b00 	mov.w	fp, #0
   bc8ca:	f1ca 0301 	rsb	r3, sl, #1
   bc8ce:	f8cd 9008 	str.w	r9, [sp, #8]
   bc8d2:	f8cd b000 	str.w	fp, [sp]
   bc8d6:	9306      	str	r3, [sp, #24]
   bc8d8:	42b7      	cmp	r7, r6
   bc8da:	d340      	bcc.n	bc95e <__gethex+0x21e>
   bc8dc:	9802      	ldr	r0, [sp, #8]
   bc8de:	9b00      	ldr	r3, [sp, #0]
   bc8e0:	f840 3b04 	str.w	r3, [r0], #4
   bc8e4:	eba0 0009 	sub.w	r0, r0, r9
   bc8e8:	1080      	asrs	r0, r0, #2
   bc8ea:	0146      	lsls	r6, r0, #5
   bc8ec:	6120      	str	r0, [r4, #16]
   bc8ee:	4618      	mov	r0, r3
   bc8f0:	f000 fb36 	bl	bcf60 <__hi0bits>
   bc8f4:	1a30      	subs	r0, r6, r0
   bc8f6:	f8d8 6000 	ldr.w	r6, [r8]
   bc8fa:	42b0      	cmp	r0, r6
   bc8fc:	dd63      	ble.n	bc9c6 <__gethex+0x286>
   bc8fe:	1b87      	subs	r7, r0, r6
   bc900:	4639      	mov	r1, r7
   bc902:	4620      	mov	r0, r4
   bc904:	f000 feda 	bl	bd6bc <__any_on>
   bc908:	4682      	mov	sl, r0
   bc90a:	b1a8      	cbz	r0, bc938 <__gethex+0x1f8>
   bc90c:	1e7b      	subs	r3, r7, #1
   bc90e:	1159      	asrs	r1, r3, #5
   bc910:	f003 021f 	and.w	r2, r3, #31
   bc914:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bc918:	f04f 0a01 	mov.w	sl, #1
   bc91c:	fa0a f202 	lsl.w	r2, sl, r2
   bc920:	420a      	tst	r2, r1
   bc922:	d009      	beq.n	bc938 <__gethex+0x1f8>
   bc924:	4553      	cmp	r3, sl
   bc926:	dd05      	ble.n	bc934 <__gethex+0x1f4>
   bc928:	1eb9      	subs	r1, r7, #2
   bc92a:	4620      	mov	r0, r4
   bc92c:	f000 fec6 	bl	bd6bc <__any_on>
   bc930:	2800      	cmp	r0, #0
   bc932:	d145      	bne.n	bc9c0 <__gethex+0x280>
   bc934:	f04f 0a02 	mov.w	sl, #2
   bc938:	4639      	mov	r1, r7
   bc93a:	4620      	mov	r0, r4
   bc93c:	f7ff fe98 	bl	bc670 <rshift>
   bc940:	443d      	add	r5, r7
   bc942:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc946:	42ab      	cmp	r3, r5
   bc948:	da4c      	bge.n	bc9e4 <__gethex+0x2a4>
   bc94a:	ee18 0a10 	vmov	r0, s16
   bc94e:	4621      	mov	r1, r4
   bc950:	f000 fa54 	bl	bcdfc <_Bfree>
   bc954:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc956:	2300      	movs	r3, #0
   bc958:	6013      	str	r3, [r2, #0]
   bc95a:	27a3      	movs	r7, #163	; 0xa3
   bc95c:	e785      	b.n	bc86a <__gethex+0x12a>
   bc95e:	1e73      	subs	r3, r6, #1
   bc960:	9a05      	ldr	r2, [sp, #20]
   bc962:	9303      	str	r3, [sp, #12]
   bc964:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bc968:	4293      	cmp	r3, r2
   bc96a:	d019      	beq.n	bc9a0 <__gethex+0x260>
   bc96c:	f1bb 0f20 	cmp.w	fp, #32
   bc970:	d107      	bne.n	bc982 <__gethex+0x242>
   bc972:	9b02      	ldr	r3, [sp, #8]
   bc974:	9a00      	ldr	r2, [sp, #0]
   bc976:	f843 2b04 	str.w	r2, [r3], #4
   bc97a:	9302      	str	r3, [sp, #8]
   bc97c:	2300      	movs	r3, #0
   bc97e:	9300      	str	r3, [sp, #0]
   bc980:	469b      	mov	fp, r3
   bc982:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bc986:	f7ff fec5 	bl	bc714 <__hexdig_fun>
   bc98a:	9b00      	ldr	r3, [sp, #0]
   bc98c:	f000 000f 	and.w	r0, r0, #15
   bc990:	fa00 f00b 	lsl.w	r0, r0, fp
   bc994:	4303      	orrs	r3, r0
   bc996:	9300      	str	r3, [sp, #0]
   bc998:	f10b 0b04 	add.w	fp, fp, #4
   bc99c:	9b03      	ldr	r3, [sp, #12]
   bc99e:	e00d      	b.n	bc9bc <__gethex+0x27c>
   bc9a0:	9b03      	ldr	r3, [sp, #12]
   bc9a2:	9a06      	ldr	r2, [sp, #24]
   bc9a4:	4413      	add	r3, r2
   bc9a6:	42bb      	cmp	r3, r7
   bc9a8:	d3e0      	bcc.n	bc96c <__gethex+0x22c>
   bc9aa:	4618      	mov	r0, r3
   bc9ac:	9901      	ldr	r1, [sp, #4]
   bc9ae:	9307      	str	r3, [sp, #28]
   bc9b0:	4652      	mov	r2, sl
   bc9b2:	f7fe feb9 	bl	bb728 <strncmp>
   bc9b6:	9b07      	ldr	r3, [sp, #28]
   bc9b8:	2800      	cmp	r0, #0
   bc9ba:	d1d7      	bne.n	bc96c <__gethex+0x22c>
   bc9bc:	461e      	mov	r6, r3
   bc9be:	e78b      	b.n	bc8d8 <__gethex+0x198>
   bc9c0:	f04f 0a03 	mov.w	sl, #3
   bc9c4:	e7b8      	b.n	bc938 <__gethex+0x1f8>
   bc9c6:	da0a      	bge.n	bc9de <__gethex+0x29e>
   bc9c8:	1a37      	subs	r7, r6, r0
   bc9ca:	4621      	mov	r1, r4
   bc9cc:	ee18 0a10 	vmov	r0, s16
   bc9d0:	463a      	mov	r2, r7
   bc9d2:	f000 fc2f 	bl	bd234 <__lshift>
   bc9d6:	1bed      	subs	r5, r5, r7
   bc9d8:	4604      	mov	r4, r0
   bc9da:	f100 0914 	add.w	r9, r0, #20
   bc9de:	f04f 0a00 	mov.w	sl, #0
   bc9e2:	e7ae      	b.n	bc942 <__gethex+0x202>
   bc9e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bc9e8:	42a8      	cmp	r0, r5
   bc9ea:	dd72      	ble.n	bcad2 <__gethex+0x392>
   bc9ec:	1b45      	subs	r5, r0, r5
   bc9ee:	42ae      	cmp	r6, r5
   bc9f0:	dc36      	bgt.n	bca60 <__gethex+0x320>
   bc9f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc9f6:	2b02      	cmp	r3, #2
   bc9f8:	d02a      	beq.n	bca50 <__gethex+0x310>
   bc9fa:	2b03      	cmp	r3, #3
   bc9fc:	d02c      	beq.n	bca58 <__gethex+0x318>
   bc9fe:	2b01      	cmp	r3, #1
   bca00:	d11c      	bne.n	bca3c <__gethex+0x2fc>
   bca02:	42ae      	cmp	r6, r5
   bca04:	d11a      	bne.n	bca3c <__gethex+0x2fc>
   bca06:	2e01      	cmp	r6, #1
   bca08:	d112      	bne.n	bca30 <__gethex+0x2f0>
   bca0a:	9a04      	ldr	r2, [sp, #16]
   bca0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bca10:	6013      	str	r3, [r2, #0]
   bca12:	2301      	movs	r3, #1
   bca14:	6123      	str	r3, [r4, #16]
   bca16:	f8c9 3000 	str.w	r3, [r9]
   bca1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bca1c:	2762      	movs	r7, #98	; 0x62
   bca1e:	601c      	str	r4, [r3, #0]
   bca20:	e723      	b.n	bc86a <__gethex+0x12a>
   bca22:	bf00      	nop
   bca24:	000be31c 	.word	0x000be31c
   bca28:	000be2a9 	.word	0x000be2a9
   bca2c:	000be2ba 	.word	0x000be2ba
   bca30:	1e71      	subs	r1, r6, #1
   bca32:	4620      	mov	r0, r4
   bca34:	f000 fe42 	bl	bd6bc <__any_on>
   bca38:	2800      	cmp	r0, #0
   bca3a:	d1e6      	bne.n	bca0a <__gethex+0x2ca>
   bca3c:	ee18 0a10 	vmov	r0, s16
   bca40:	4621      	mov	r1, r4
   bca42:	f000 f9db 	bl	bcdfc <_Bfree>
   bca46:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bca48:	2300      	movs	r3, #0
   bca4a:	6013      	str	r3, [r2, #0]
   bca4c:	2750      	movs	r7, #80	; 0x50
   bca4e:	e70c      	b.n	bc86a <__gethex+0x12a>
   bca50:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bca52:	2b00      	cmp	r3, #0
   bca54:	d1f2      	bne.n	bca3c <__gethex+0x2fc>
   bca56:	e7d8      	b.n	bca0a <__gethex+0x2ca>
   bca58:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bca5a:	2b00      	cmp	r3, #0
   bca5c:	d1d5      	bne.n	bca0a <__gethex+0x2ca>
   bca5e:	e7ed      	b.n	bca3c <__gethex+0x2fc>
   bca60:	1e6f      	subs	r7, r5, #1
   bca62:	f1ba 0f00 	cmp.w	sl, #0
   bca66:	d131      	bne.n	bcacc <__gethex+0x38c>
   bca68:	b127      	cbz	r7, bca74 <__gethex+0x334>
   bca6a:	4639      	mov	r1, r7
   bca6c:	4620      	mov	r0, r4
   bca6e:	f000 fe25 	bl	bd6bc <__any_on>
   bca72:	4682      	mov	sl, r0
   bca74:	117b      	asrs	r3, r7, #5
   bca76:	2101      	movs	r1, #1
   bca78:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bca7c:	f007 071f 	and.w	r7, r7, #31
   bca80:	fa01 f707 	lsl.w	r7, r1, r7
   bca84:	421f      	tst	r7, r3
   bca86:	4629      	mov	r1, r5
   bca88:	4620      	mov	r0, r4
   bca8a:	bf18      	it	ne
   bca8c:	f04a 0a02 	orrne.w	sl, sl, #2
   bca90:	1b76      	subs	r6, r6, r5
   bca92:	f7ff fded 	bl	bc670 <rshift>
   bca96:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bca9a:	2702      	movs	r7, #2
   bca9c:	f1ba 0f00 	cmp.w	sl, #0
   bcaa0:	d048      	beq.n	bcb34 <__gethex+0x3f4>
   bcaa2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bcaa6:	2b02      	cmp	r3, #2
   bcaa8:	d015      	beq.n	bcad6 <__gethex+0x396>
   bcaaa:	2b03      	cmp	r3, #3
   bcaac:	d017      	beq.n	bcade <__gethex+0x39e>
   bcaae:	2b01      	cmp	r3, #1
   bcab0:	d109      	bne.n	bcac6 <__gethex+0x386>
   bcab2:	f01a 0f02 	tst.w	sl, #2
   bcab6:	d006      	beq.n	bcac6 <__gethex+0x386>
   bcab8:	f8d9 0000 	ldr.w	r0, [r9]
   bcabc:	ea4a 0a00 	orr.w	sl, sl, r0
   bcac0:	f01a 0f01 	tst.w	sl, #1
   bcac4:	d10e      	bne.n	bcae4 <__gethex+0x3a4>
   bcac6:	f047 0710 	orr.w	r7, r7, #16
   bcaca:	e033      	b.n	bcb34 <__gethex+0x3f4>
   bcacc:	f04f 0a01 	mov.w	sl, #1
   bcad0:	e7d0      	b.n	bca74 <__gethex+0x334>
   bcad2:	2701      	movs	r7, #1
   bcad4:	e7e2      	b.n	bca9c <__gethex+0x35c>
   bcad6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bcad8:	f1c3 0301 	rsb	r3, r3, #1
   bcadc:	9315      	str	r3, [sp, #84]	; 0x54
   bcade:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bcae0:	2b00      	cmp	r3, #0
   bcae2:	d0f0      	beq.n	bcac6 <__gethex+0x386>
   bcae4:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bcae8:	f104 0314 	add.w	r3, r4, #20
   bcaec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bcaf0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bcaf4:	f04f 0c00 	mov.w	ip, #0
   bcaf8:	4618      	mov	r0, r3
   bcafa:	f853 2b04 	ldr.w	r2, [r3], #4
   bcafe:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bcb02:	d01c      	beq.n	bcb3e <__gethex+0x3fe>
   bcb04:	3201      	adds	r2, #1
   bcb06:	6002      	str	r2, [r0, #0]
   bcb08:	2f02      	cmp	r7, #2
   bcb0a:	f104 0314 	add.w	r3, r4, #20
   bcb0e:	d13f      	bne.n	bcb90 <__gethex+0x450>
   bcb10:	f8d8 2000 	ldr.w	r2, [r8]
   bcb14:	3a01      	subs	r2, #1
   bcb16:	42b2      	cmp	r2, r6
   bcb18:	d10a      	bne.n	bcb30 <__gethex+0x3f0>
   bcb1a:	1171      	asrs	r1, r6, #5
   bcb1c:	2201      	movs	r2, #1
   bcb1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bcb22:	f006 061f 	and.w	r6, r6, #31
   bcb26:	fa02 f606 	lsl.w	r6, r2, r6
   bcb2a:	421e      	tst	r6, r3
   bcb2c:	bf18      	it	ne
   bcb2e:	4617      	movne	r7, r2
   bcb30:	f047 0720 	orr.w	r7, r7, #32
   bcb34:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bcb36:	601c      	str	r4, [r3, #0]
   bcb38:	9b04      	ldr	r3, [sp, #16]
   bcb3a:	601d      	str	r5, [r3, #0]
   bcb3c:	e695      	b.n	bc86a <__gethex+0x12a>
   bcb3e:	4299      	cmp	r1, r3
   bcb40:	f843 cc04 	str.w	ip, [r3, #-4]
   bcb44:	d8d8      	bhi.n	bcaf8 <__gethex+0x3b8>
   bcb46:	68a3      	ldr	r3, [r4, #8]
   bcb48:	459b      	cmp	fp, r3
   bcb4a:	db19      	blt.n	bcb80 <__gethex+0x440>
   bcb4c:	6861      	ldr	r1, [r4, #4]
   bcb4e:	ee18 0a10 	vmov	r0, s16
   bcb52:	3101      	adds	r1, #1
   bcb54:	f000 f912 	bl	bcd7c <_Balloc>
   bcb58:	4681      	mov	r9, r0
   bcb5a:	b918      	cbnz	r0, bcb64 <__gethex+0x424>
   bcb5c:	4b1a      	ldr	r3, [pc, #104]	; (bcbc8 <__gethex+0x488>)
   bcb5e:	4602      	mov	r2, r0
   bcb60:	2184      	movs	r1, #132	; 0x84
   bcb62:	e6a8      	b.n	bc8b6 <__gethex+0x176>
   bcb64:	6922      	ldr	r2, [r4, #16]
   bcb66:	3202      	adds	r2, #2
   bcb68:	f104 010c 	add.w	r1, r4, #12
   bcb6c:	0092      	lsls	r2, r2, #2
   bcb6e:	300c      	adds	r0, #12
   bcb70:	f7fe fd62 	bl	bb638 <memcpy>
   bcb74:	4621      	mov	r1, r4
   bcb76:	ee18 0a10 	vmov	r0, s16
   bcb7a:	f000 f93f 	bl	bcdfc <_Bfree>
   bcb7e:	464c      	mov	r4, r9
   bcb80:	6923      	ldr	r3, [r4, #16]
   bcb82:	1c5a      	adds	r2, r3, #1
   bcb84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bcb88:	6122      	str	r2, [r4, #16]
   bcb8a:	2201      	movs	r2, #1
   bcb8c:	615a      	str	r2, [r3, #20]
   bcb8e:	e7bb      	b.n	bcb08 <__gethex+0x3c8>
   bcb90:	6922      	ldr	r2, [r4, #16]
   bcb92:	455a      	cmp	r2, fp
   bcb94:	dd0b      	ble.n	bcbae <__gethex+0x46e>
   bcb96:	2101      	movs	r1, #1
   bcb98:	4620      	mov	r0, r4
   bcb9a:	f7ff fd69 	bl	bc670 <rshift>
   bcb9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bcba2:	3501      	adds	r5, #1
   bcba4:	42ab      	cmp	r3, r5
   bcba6:	f6ff aed0 	blt.w	bc94a <__gethex+0x20a>
   bcbaa:	2701      	movs	r7, #1
   bcbac:	e7c0      	b.n	bcb30 <__gethex+0x3f0>
   bcbae:	f016 061f 	ands.w	r6, r6, #31
   bcbb2:	d0fa      	beq.n	bcbaa <__gethex+0x46a>
   bcbb4:	4453      	add	r3, sl
   bcbb6:	f1c6 0620 	rsb	r6, r6, #32
   bcbba:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bcbbe:	f000 f9cf 	bl	bcf60 <__hi0bits>
   bcbc2:	42b0      	cmp	r0, r6
   bcbc4:	dbe7      	blt.n	bcb96 <__gethex+0x456>
   bcbc6:	e7f0      	b.n	bcbaa <__gethex+0x46a>
   bcbc8:	000be2a9 	.word	0x000be2a9

000bcbcc <L_shift>:
   bcbcc:	f1c2 0208 	rsb	r2, r2, #8
   bcbd0:	0092      	lsls	r2, r2, #2
   bcbd2:	b570      	push	{r4, r5, r6, lr}
   bcbd4:	f1c2 0620 	rsb	r6, r2, #32
   bcbd8:	6843      	ldr	r3, [r0, #4]
   bcbda:	6804      	ldr	r4, [r0, #0]
   bcbdc:	fa03 f506 	lsl.w	r5, r3, r6
   bcbe0:	432c      	orrs	r4, r5
   bcbe2:	40d3      	lsrs	r3, r2
   bcbe4:	6004      	str	r4, [r0, #0]
   bcbe6:	f840 3f04 	str.w	r3, [r0, #4]!
   bcbea:	4288      	cmp	r0, r1
   bcbec:	d3f4      	bcc.n	bcbd8 <L_shift+0xc>
   bcbee:	bd70      	pop	{r4, r5, r6, pc}

000bcbf0 <__match>:
   bcbf0:	b530      	push	{r4, r5, lr}
   bcbf2:	6803      	ldr	r3, [r0, #0]
   bcbf4:	3301      	adds	r3, #1
   bcbf6:	f811 4b01 	ldrb.w	r4, [r1], #1
   bcbfa:	b914      	cbnz	r4, bcc02 <__match+0x12>
   bcbfc:	6003      	str	r3, [r0, #0]
   bcbfe:	2001      	movs	r0, #1
   bcc00:	bd30      	pop	{r4, r5, pc}
   bcc02:	f813 2b01 	ldrb.w	r2, [r3], #1
   bcc06:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bcc0a:	2d19      	cmp	r5, #25
   bcc0c:	bf98      	it	ls
   bcc0e:	3220      	addls	r2, #32
   bcc10:	42a2      	cmp	r2, r4
   bcc12:	d0f0      	beq.n	bcbf6 <__match+0x6>
   bcc14:	2000      	movs	r0, #0
   bcc16:	e7f3      	b.n	bcc00 <__match+0x10>

000bcc18 <__hexnan>:
   bcc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcc1c:	680b      	ldr	r3, [r1, #0]
   bcc1e:	115e      	asrs	r6, r3, #5
   bcc20:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bcc24:	f013 031f 	ands.w	r3, r3, #31
   bcc28:	b087      	sub	sp, #28
   bcc2a:	bf18      	it	ne
   bcc2c:	3604      	addne	r6, #4
   bcc2e:	2500      	movs	r5, #0
   bcc30:	1f37      	subs	r7, r6, #4
   bcc32:	4690      	mov	r8, r2
   bcc34:	6802      	ldr	r2, [r0, #0]
   bcc36:	9301      	str	r3, [sp, #4]
   bcc38:	4682      	mov	sl, r0
   bcc3a:	f846 5c04 	str.w	r5, [r6, #-4]
   bcc3e:	46b9      	mov	r9, r7
   bcc40:	463c      	mov	r4, r7
   bcc42:	9502      	str	r5, [sp, #8]
   bcc44:	46ab      	mov	fp, r5
   bcc46:	7851      	ldrb	r1, [r2, #1]
   bcc48:	1c53      	adds	r3, r2, #1
   bcc4a:	9303      	str	r3, [sp, #12]
   bcc4c:	b341      	cbz	r1, bcca0 <__hexnan+0x88>
   bcc4e:	4608      	mov	r0, r1
   bcc50:	9205      	str	r2, [sp, #20]
   bcc52:	9104      	str	r1, [sp, #16]
   bcc54:	f7ff fd5e 	bl	bc714 <__hexdig_fun>
   bcc58:	2800      	cmp	r0, #0
   bcc5a:	d14f      	bne.n	bccfc <__hexnan+0xe4>
   bcc5c:	9904      	ldr	r1, [sp, #16]
   bcc5e:	9a05      	ldr	r2, [sp, #20]
   bcc60:	2920      	cmp	r1, #32
   bcc62:	d818      	bhi.n	bcc96 <__hexnan+0x7e>
   bcc64:	9b02      	ldr	r3, [sp, #8]
   bcc66:	459b      	cmp	fp, r3
   bcc68:	dd13      	ble.n	bcc92 <__hexnan+0x7a>
   bcc6a:	454c      	cmp	r4, r9
   bcc6c:	d206      	bcs.n	bcc7c <__hexnan+0x64>
   bcc6e:	2d07      	cmp	r5, #7
   bcc70:	dc04      	bgt.n	bcc7c <__hexnan+0x64>
   bcc72:	462a      	mov	r2, r5
   bcc74:	4649      	mov	r1, r9
   bcc76:	4620      	mov	r0, r4
   bcc78:	f7ff ffa8 	bl	bcbcc <L_shift>
   bcc7c:	4544      	cmp	r4, r8
   bcc7e:	d950      	bls.n	bcd22 <__hexnan+0x10a>
   bcc80:	2300      	movs	r3, #0
   bcc82:	f1a4 0904 	sub.w	r9, r4, #4
   bcc86:	f844 3c04 	str.w	r3, [r4, #-4]
   bcc8a:	f8cd b008 	str.w	fp, [sp, #8]
   bcc8e:	464c      	mov	r4, r9
   bcc90:	461d      	mov	r5, r3
   bcc92:	9a03      	ldr	r2, [sp, #12]
   bcc94:	e7d7      	b.n	bcc46 <__hexnan+0x2e>
   bcc96:	2929      	cmp	r1, #41	; 0x29
   bcc98:	d156      	bne.n	bcd48 <__hexnan+0x130>
   bcc9a:	3202      	adds	r2, #2
   bcc9c:	f8ca 2000 	str.w	r2, [sl]
   bcca0:	f1bb 0f00 	cmp.w	fp, #0
   bcca4:	d050      	beq.n	bcd48 <__hexnan+0x130>
   bcca6:	454c      	cmp	r4, r9
   bcca8:	d206      	bcs.n	bccb8 <__hexnan+0xa0>
   bccaa:	2d07      	cmp	r5, #7
   bccac:	dc04      	bgt.n	bccb8 <__hexnan+0xa0>
   bccae:	462a      	mov	r2, r5
   bccb0:	4649      	mov	r1, r9
   bccb2:	4620      	mov	r0, r4
   bccb4:	f7ff ff8a 	bl	bcbcc <L_shift>
   bccb8:	4544      	cmp	r4, r8
   bccba:	d934      	bls.n	bcd26 <__hexnan+0x10e>
   bccbc:	f1a8 0204 	sub.w	r2, r8, #4
   bccc0:	4623      	mov	r3, r4
   bccc2:	f853 1b04 	ldr.w	r1, [r3], #4
   bccc6:	f842 1f04 	str.w	r1, [r2, #4]!
   bccca:	429f      	cmp	r7, r3
   bcccc:	d2f9      	bcs.n	bccc2 <__hexnan+0xaa>
   bccce:	1b3b      	subs	r3, r7, r4
   bccd0:	f023 0303 	bic.w	r3, r3, #3
   bccd4:	3304      	adds	r3, #4
   bccd6:	3401      	adds	r4, #1
   bccd8:	3e03      	subs	r6, #3
   bccda:	42b4      	cmp	r4, r6
   bccdc:	bf88      	it	hi
   bccde:	2304      	movhi	r3, #4
   bcce0:	4443      	add	r3, r8
   bcce2:	2200      	movs	r2, #0
   bcce4:	f843 2b04 	str.w	r2, [r3], #4
   bcce8:	429f      	cmp	r7, r3
   bccea:	d2fb      	bcs.n	bcce4 <__hexnan+0xcc>
   bccec:	683b      	ldr	r3, [r7, #0]
   bccee:	b91b      	cbnz	r3, bccf8 <__hexnan+0xe0>
   bccf0:	4547      	cmp	r7, r8
   bccf2:	d127      	bne.n	bcd44 <__hexnan+0x12c>
   bccf4:	2301      	movs	r3, #1
   bccf6:	603b      	str	r3, [r7, #0]
   bccf8:	2005      	movs	r0, #5
   bccfa:	e026      	b.n	bcd4a <__hexnan+0x132>
   bccfc:	3501      	adds	r5, #1
   bccfe:	2d08      	cmp	r5, #8
   bcd00:	f10b 0b01 	add.w	fp, fp, #1
   bcd04:	dd06      	ble.n	bcd14 <__hexnan+0xfc>
   bcd06:	4544      	cmp	r4, r8
   bcd08:	d9c3      	bls.n	bcc92 <__hexnan+0x7a>
   bcd0a:	2300      	movs	r3, #0
   bcd0c:	f844 3c04 	str.w	r3, [r4, #-4]
   bcd10:	2501      	movs	r5, #1
   bcd12:	3c04      	subs	r4, #4
   bcd14:	6822      	ldr	r2, [r4, #0]
   bcd16:	f000 000f 	and.w	r0, r0, #15
   bcd1a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bcd1e:	6022      	str	r2, [r4, #0]
   bcd20:	e7b7      	b.n	bcc92 <__hexnan+0x7a>
   bcd22:	2508      	movs	r5, #8
   bcd24:	e7b5      	b.n	bcc92 <__hexnan+0x7a>
   bcd26:	9b01      	ldr	r3, [sp, #4]
   bcd28:	2b00      	cmp	r3, #0
   bcd2a:	d0df      	beq.n	bccec <__hexnan+0xd4>
   bcd2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bcd30:	f1c3 0320 	rsb	r3, r3, #32
   bcd34:	fa22 f303 	lsr.w	r3, r2, r3
   bcd38:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bcd3c:	401a      	ands	r2, r3
   bcd3e:	f846 2c04 	str.w	r2, [r6, #-4]
   bcd42:	e7d3      	b.n	bccec <__hexnan+0xd4>
   bcd44:	3f04      	subs	r7, #4
   bcd46:	e7d1      	b.n	bccec <__hexnan+0xd4>
   bcd48:	2004      	movs	r0, #4
   bcd4a:	b007      	add	sp, #28
   bcd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bcd50 <__retarget_lock_acquire_recursive>:
   bcd50:	4770      	bx	lr

000bcd52 <__retarget_lock_release>:
   bcd52:	4770      	bx	lr

000bcd54 <__retarget_lock_release_recursive>:
   bcd54:	4770      	bx	lr

000bcd56 <__ascii_mbtowc>:
   bcd56:	b082      	sub	sp, #8
   bcd58:	b901      	cbnz	r1, bcd5c <__ascii_mbtowc+0x6>
   bcd5a:	a901      	add	r1, sp, #4
   bcd5c:	b142      	cbz	r2, bcd70 <__ascii_mbtowc+0x1a>
   bcd5e:	b14b      	cbz	r3, bcd74 <__ascii_mbtowc+0x1e>
   bcd60:	7813      	ldrb	r3, [r2, #0]
   bcd62:	600b      	str	r3, [r1, #0]
   bcd64:	7812      	ldrb	r2, [r2, #0]
   bcd66:	1e10      	subs	r0, r2, #0
   bcd68:	bf18      	it	ne
   bcd6a:	2001      	movne	r0, #1
   bcd6c:	b002      	add	sp, #8
   bcd6e:	4770      	bx	lr
   bcd70:	4610      	mov	r0, r2
   bcd72:	e7fb      	b.n	bcd6c <__ascii_mbtowc+0x16>
   bcd74:	f06f 0001 	mvn.w	r0, #1
   bcd78:	e7f8      	b.n	bcd6c <__ascii_mbtowc+0x16>
	...

000bcd7c <_Balloc>:
   bcd7c:	b570      	push	{r4, r5, r6, lr}
   bcd7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bcd80:	4604      	mov	r4, r0
   bcd82:	460d      	mov	r5, r1
   bcd84:	b976      	cbnz	r6, bcda4 <_Balloc+0x28>
   bcd86:	2010      	movs	r0, #16
   bcd88:	f7fb f978 	bl	b807c <malloc>
   bcd8c:	4602      	mov	r2, r0
   bcd8e:	6260      	str	r0, [r4, #36]	; 0x24
   bcd90:	b920      	cbnz	r0, bcd9c <_Balloc+0x20>
   bcd92:	4b18      	ldr	r3, [pc, #96]	; (bcdf4 <_Balloc+0x78>)
   bcd94:	4818      	ldr	r0, [pc, #96]	; (bcdf8 <_Balloc+0x7c>)
   bcd96:	2166      	movs	r1, #102	; 0x66
   bcd98:	f7fb f9b0 	bl	b80fc <__assert_func>
   bcd9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bcda0:	6006      	str	r6, [r0, #0]
   bcda2:	60c6      	str	r6, [r0, #12]
   bcda4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bcda6:	68f3      	ldr	r3, [r6, #12]
   bcda8:	b183      	cbz	r3, bcdcc <_Balloc+0x50>
   bcdaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bcdac:	68db      	ldr	r3, [r3, #12]
   bcdae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bcdb2:	b9b8      	cbnz	r0, bcde4 <_Balloc+0x68>
   bcdb4:	2101      	movs	r1, #1
   bcdb6:	fa01 f605 	lsl.w	r6, r1, r5
   bcdba:	1d72      	adds	r2, r6, #5
   bcdbc:	0092      	lsls	r2, r2, #2
   bcdbe:	4620      	mov	r0, r4
   bcdc0:	f000 fc9d 	bl	bd6fe <_calloc_r>
   bcdc4:	b160      	cbz	r0, bcde0 <_Balloc+0x64>
   bcdc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bcdca:	e00e      	b.n	bcdea <_Balloc+0x6e>
   bcdcc:	2221      	movs	r2, #33	; 0x21
   bcdce:	2104      	movs	r1, #4
   bcdd0:	4620      	mov	r0, r4
   bcdd2:	f000 fc94 	bl	bd6fe <_calloc_r>
   bcdd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bcdd8:	60f0      	str	r0, [r6, #12]
   bcdda:	68db      	ldr	r3, [r3, #12]
   bcddc:	2b00      	cmp	r3, #0
   bcdde:	d1e4      	bne.n	bcdaa <_Balloc+0x2e>
   bcde0:	2000      	movs	r0, #0
   bcde2:	bd70      	pop	{r4, r5, r6, pc}
   bcde4:	6802      	ldr	r2, [r0, #0]
   bcde6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bcdea:	2300      	movs	r3, #0
   bcdec:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bcdf0:	e7f7      	b.n	bcde2 <_Balloc+0x66>
   bcdf2:	bf00      	nop
   bcdf4:	000be0d5 	.word	0x000be0d5
   bcdf8:	000be330 	.word	0x000be330

000bcdfc <_Bfree>:
   bcdfc:	b570      	push	{r4, r5, r6, lr}
   bcdfe:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bce00:	4605      	mov	r5, r0
   bce02:	460c      	mov	r4, r1
   bce04:	b976      	cbnz	r6, bce24 <_Bfree+0x28>
   bce06:	2010      	movs	r0, #16
   bce08:	f7fb f938 	bl	b807c <malloc>
   bce0c:	4602      	mov	r2, r0
   bce0e:	6268      	str	r0, [r5, #36]	; 0x24
   bce10:	b920      	cbnz	r0, bce1c <_Bfree+0x20>
   bce12:	4b09      	ldr	r3, [pc, #36]	; (bce38 <_Bfree+0x3c>)
   bce14:	4809      	ldr	r0, [pc, #36]	; (bce3c <_Bfree+0x40>)
   bce16:	218a      	movs	r1, #138	; 0x8a
   bce18:	f7fb f970 	bl	b80fc <__assert_func>
   bce1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bce20:	6006      	str	r6, [r0, #0]
   bce22:	60c6      	str	r6, [r0, #12]
   bce24:	b13c      	cbz	r4, bce36 <_Bfree+0x3a>
   bce26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bce28:	6862      	ldr	r2, [r4, #4]
   bce2a:	68db      	ldr	r3, [r3, #12]
   bce2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bce30:	6021      	str	r1, [r4, #0]
   bce32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bce36:	bd70      	pop	{r4, r5, r6, pc}
   bce38:	000be0d5 	.word	0x000be0d5
   bce3c:	000be330 	.word	0x000be330

000bce40 <__multadd>:
   bce40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bce44:	690d      	ldr	r5, [r1, #16]
   bce46:	4607      	mov	r7, r0
   bce48:	460c      	mov	r4, r1
   bce4a:	461e      	mov	r6, r3
   bce4c:	f101 0c14 	add.w	ip, r1, #20
   bce50:	2000      	movs	r0, #0
   bce52:	f8dc 3000 	ldr.w	r3, [ip]
   bce56:	b299      	uxth	r1, r3
   bce58:	fb02 6101 	mla	r1, r2, r1, r6
   bce5c:	0c1e      	lsrs	r6, r3, #16
   bce5e:	0c0b      	lsrs	r3, r1, #16
   bce60:	fb02 3306 	mla	r3, r2, r6, r3
   bce64:	b289      	uxth	r1, r1
   bce66:	3001      	adds	r0, #1
   bce68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bce6c:	4285      	cmp	r5, r0
   bce6e:	f84c 1b04 	str.w	r1, [ip], #4
   bce72:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bce76:	dcec      	bgt.n	bce52 <__multadd+0x12>
   bce78:	b30e      	cbz	r6, bcebe <__multadd+0x7e>
   bce7a:	68a3      	ldr	r3, [r4, #8]
   bce7c:	42ab      	cmp	r3, r5
   bce7e:	dc19      	bgt.n	bceb4 <__multadd+0x74>
   bce80:	6861      	ldr	r1, [r4, #4]
   bce82:	4638      	mov	r0, r7
   bce84:	3101      	adds	r1, #1
   bce86:	f7ff ff79 	bl	bcd7c <_Balloc>
   bce8a:	4680      	mov	r8, r0
   bce8c:	b928      	cbnz	r0, bce9a <__multadd+0x5a>
   bce8e:	4602      	mov	r2, r0
   bce90:	4b0c      	ldr	r3, [pc, #48]	; (bcec4 <__multadd+0x84>)
   bce92:	480d      	ldr	r0, [pc, #52]	; (bcec8 <__multadd+0x88>)
   bce94:	21b5      	movs	r1, #181	; 0xb5
   bce96:	f7fb f931 	bl	b80fc <__assert_func>
   bce9a:	6922      	ldr	r2, [r4, #16]
   bce9c:	3202      	adds	r2, #2
   bce9e:	f104 010c 	add.w	r1, r4, #12
   bcea2:	0092      	lsls	r2, r2, #2
   bcea4:	300c      	adds	r0, #12
   bcea6:	f7fe fbc7 	bl	bb638 <memcpy>
   bceaa:	4621      	mov	r1, r4
   bceac:	4638      	mov	r0, r7
   bceae:	f7ff ffa5 	bl	bcdfc <_Bfree>
   bceb2:	4644      	mov	r4, r8
   bceb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bceb8:	3501      	adds	r5, #1
   bceba:	615e      	str	r6, [r3, #20]
   bcebc:	6125      	str	r5, [r4, #16]
   bcebe:	4620      	mov	r0, r4
   bcec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcec4:	000be2a9 	.word	0x000be2a9
   bcec8:	000be330 	.word	0x000be330

000bcecc <__s2b>:
   bcecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bced0:	460c      	mov	r4, r1
   bced2:	4615      	mov	r5, r2
   bced4:	461f      	mov	r7, r3
   bced6:	2209      	movs	r2, #9
   bced8:	3308      	adds	r3, #8
   bceda:	4606      	mov	r6, r0
   bcedc:	fb93 f3f2 	sdiv	r3, r3, r2
   bcee0:	2100      	movs	r1, #0
   bcee2:	2201      	movs	r2, #1
   bcee4:	429a      	cmp	r2, r3
   bcee6:	db09      	blt.n	bcefc <__s2b+0x30>
   bcee8:	4630      	mov	r0, r6
   bceea:	f7ff ff47 	bl	bcd7c <_Balloc>
   bceee:	b940      	cbnz	r0, bcf02 <__s2b+0x36>
   bcef0:	4602      	mov	r2, r0
   bcef2:	4b19      	ldr	r3, [pc, #100]	; (bcf58 <__s2b+0x8c>)
   bcef4:	4819      	ldr	r0, [pc, #100]	; (bcf5c <__s2b+0x90>)
   bcef6:	21ce      	movs	r1, #206	; 0xce
   bcef8:	f7fb f900 	bl	b80fc <__assert_func>
   bcefc:	0052      	lsls	r2, r2, #1
   bcefe:	3101      	adds	r1, #1
   bcf00:	e7f0      	b.n	bcee4 <__s2b+0x18>
   bcf02:	9b08      	ldr	r3, [sp, #32]
   bcf04:	6143      	str	r3, [r0, #20]
   bcf06:	2d09      	cmp	r5, #9
   bcf08:	f04f 0301 	mov.w	r3, #1
   bcf0c:	6103      	str	r3, [r0, #16]
   bcf0e:	dd16      	ble.n	bcf3e <__s2b+0x72>
   bcf10:	f104 0909 	add.w	r9, r4, #9
   bcf14:	46c8      	mov	r8, r9
   bcf16:	442c      	add	r4, r5
   bcf18:	f818 3b01 	ldrb.w	r3, [r8], #1
   bcf1c:	4601      	mov	r1, r0
   bcf1e:	3b30      	subs	r3, #48	; 0x30
   bcf20:	220a      	movs	r2, #10
   bcf22:	4630      	mov	r0, r6
   bcf24:	f7ff ff8c 	bl	bce40 <__multadd>
   bcf28:	45a0      	cmp	r8, r4
   bcf2a:	d1f5      	bne.n	bcf18 <__s2b+0x4c>
   bcf2c:	f1a5 0408 	sub.w	r4, r5, #8
   bcf30:	444c      	add	r4, r9
   bcf32:	1b2d      	subs	r5, r5, r4
   bcf34:	1963      	adds	r3, r4, r5
   bcf36:	42bb      	cmp	r3, r7
   bcf38:	db04      	blt.n	bcf44 <__s2b+0x78>
   bcf3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bcf3e:	340a      	adds	r4, #10
   bcf40:	2509      	movs	r5, #9
   bcf42:	e7f6      	b.n	bcf32 <__s2b+0x66>
   bcf44:	f814 3b01 	ldrb.w	r3, [r4], #1
   bcf48:	4601      	mov	r1, r0
   bcf4a:	3b30      	subs	r3, #48	; 0x30
   bcf4c:	220a      	movs	r2, #10
   bcf4e:	4630      	mov	r0, r6
   bcf50:	f7ff ff76 	bl	bce40 <__multadd>
   bcf54:	e7ee      	b.n	bcf34 <__s2b+0x68>
   bcf56:	bf00      	nop
   bcf58:	000be2a9 	.word	0x000be2a9
   bcf5c:	000be330 	.word	0x000be330

000bcf60 <__hi0bits>:
   bcf60:	0c03      	lsrs	r3, r0, #16
   bcf62:	041b      	lsls	r3, r3, #16
   bcf64:	b9d3      	cbnz	r3, bcf9c <__hi0bits+0x3c>
   bcf66:	0400      	lsls	r0, r0, #16
   bcf68:	2310      	movs	r3, #16
   bcf6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bcf6e:	bf04      	itt	eq
   bcf70:	0200      	lsleq	r0, r0, #8
   bcf72:	3308      	addeq	r3, #8
   bcf74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bcf78:	bf04      	itt	eq
   bcf7a:	0100      	lsleq	r0, r0, #4
   bcf7c:	3304      	addeq	r3, #4
   bcf7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bcf82:	bf04      	itt	eq
   bcf84:	0080      	lsleq	r0, r0, #2
   bcf86:	3302      	addeq	r3, #2
   bcf88:	2800      	cmp	r0, #0
   bcf8a:	db05      	blt.n	bcf98 <__hi0bits+0x38>
   bcf8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bcf90:	f103 0301 	add.w	r3, r3, #1
   bcf94:	bf08      	it	eq
   bcf96:	2320      	moveq	r3, #32
   bcf98:	4618      	mov	r0, r3
   bcf9a:	4770      	bx	lr
   bcf9c:	2300      	movs	r3, #0
   bcf9e:	e7e4      	b.n	bcf6a <__hi0bits+0xa>

000bcfa0 <__lo0bits>:
   bcfa0:	6803      	ldr	r3, [r0, #0]
   bcfa2:	f013 0207 	ands.w	r2, r3, #7
   bcfa6:	4601      	mov	r1, r0
   bcfa8:	d00b      	beq.n	bcfc2 <__lo0bits+0x22>
   bcfaa:	07da      	lsls	r2, r3, #31
   bcfac:	d423      	bmi.n	bcff6 <__lo0bits+0x56>
   bcfae:	0798      	lsls	r0, r3, #30
   bcfb0:	bf49      	itett	mi
   bcfb2:	085b      	lsrmi	r3, r3, #1
   bcfb4:	089b      	lsrpl	r3, r3, #2
   bcfb6:	2001      	movmi	r0, #1
   bcfb8:	600b      	strmi	r3, [r1, #0]
   bcfba:	bf5c      	itt	pl
   bcfbc:	600b      	strpl	r3, [r1, #0]
   bcfbe:	2002      	movpl	r0, #2
   bcfc0:	4770      	bx	lr
   bcfc2:	b298      	uxth	r0, r3
   bcfc4:	b9a8      	cbnz	r0, bcff2 <__lo0bits+0x52>
   bcfc6:	0c1b      	lsrs	r3, r3, #16
   bcfc8:	2010      	movs	r0, #16
   bcfca:	b2da      	uxtb	r2, r3
   bcfcc:	b90a      	cbnz	r2, bcfd2 <__lo0bits+0x32>
   bcfce:	3008      	adds	r0, #8
   bcfd0:	0a1b      	lsrs	r3, r3, #8
   bcfd2:	071a      	lsls	r2, r3, #28
   bcfd4:	bf04      	itt	eq
   bcfd6:	091b      	lsreq	r3, r3, #4
   bcfd8:	3004      	addeq	r0, #4
   bcfda:	079a      	lsls	r2, r3, #30
   bcfdc:	bf04      	itt	eq
   bcfde:	089b      	lsreq	r3, r3, #2
   bcfe0:	3002      	addeq	r0, #2
   bcfe2:	07da      	lsls	r2, r3, #31
   bcfe4:	d403      	bmi.n	bcfee <__lo0bits+0x4e>
   bcfe6:	085b      	lsrs	r3, r3, #1
   bcfe8:	f100 0001 	add.w	r0, r0, #1
   bcfec:	d005      	beq.n	bcffa <__lo0bits+0x5a>
   bcfee:	600b      	str	r3, [r1, #0]
   bcff0:	4770      	bx	lr
   bcff2:	4610      	mov	r0, r2
   bcff4:	e7e9      	b.n	bcfca <__lo0bits+0x2a>
   bcff6:	2000      	movs	r0, #0
   bcff8:	4770      	bx	lr
   bcffa:	2020      	movs	r0, #32
   bcffc:	4770      	bx	lr
	...

000bd000 <__i2b>:
   bd000:	b510      	push	{r4, lr}
   bd002:	460c      	mov	r4, r1
   bd004:	2101      	movs	r1, #1
   bd006:	f7ff feb9 	bl	bcd7c <_Balloc>
   bd00a:	4602      	mov	r2, r0
   bd00c:	b928      	cbnz	r0, bd01a <__i2b+0x1a>
   bd00e:	4b05      	ldr	r3, [pc, #20]	; (bd024 <__i2b+0x24>)
   bd010:	4805      	ldr	r0, [pc, #20]	; (bd028 <__i2b+0x28>)
   bd012:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bd016:	f7fb f871 	bl	b80fc <__assert_func>
   bd01a:	2301      	movs	r3, #1
   bd01c:	6144      	str	r4, [r0, #20]
   bd01e:	6103      	str	r3, [r0, #16]
   bd020:	bd10      	pop	{r4, pc}
   bd022:	bf00      	nop
   bd024:	000be2a9 	.word	0x000be2a9
   bd028:	000be330 	.word	0x000be330

000bd02c <__multiply>:
   bd02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd030:	4691      	mov	r9, r2
   bd032:	690a      	ldr	r2, [r1, #16]
   bd034:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd038:	429a      	cmp	r2, r3
   bd03a:	bfb8      	it	lt
   bd03c:	460b      	movlt	r3, r1
   bd03e:	460c      	mov	r4, r1
   bd040:	bfbc      	itt	lt
   bd042:	464c      	movlt	r4, r9
   bd044:	4699      	movlt	r9, r3
   bd046:	6927      	ldr	r7, [r4, #16]
   bd048:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bd04c:	68a3      	ldr	r3, [r4, #8]
   bd04e:	6861      	ldr	r1, [r4, #4]
   bd050:	eb07 060a 	add.w	r6, r7, sl
   bd054:	42b3      	cmp	r3, r6
   bd056:	b085      	sub	sp, #20
   bd058:	bfb8      	it	lt
   bd05a:	3101      	addlt	r1, #1
   bd05c:	f7ff fe8e 	bl	bcd7c <_Balloc>
   bd060:	b930      	cbnz	r0, bd070 <__multiply+0x44>
   bd062:	4602      	mov	r2, r0
   bd064:	4b44      	ldr	r3, [pc, #272]	; (bd178 <__multiply+0x14c>)
   bd066:	4845      	ldr	r0, [pc, #276]	; (bd17c <__multiply+0x150>)
   bd068:	f240 115d 	movw	r1, #349	; 0x15d
   bd06c:	f7fb f846 	bl	b80fc <__assert_func>
   bd070:	f100 0514 	add.w	r5, r0, #20
   bd074:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bd078:	462b      	mov	r3, r5
   bd07a:	2200      	movs	r2, #0
   bd07c:	4543      	cmp	r3, r8
   bd07e:	d321      	bcc.n	bd0c4 <__multiply+0x98>
   bd080:	f104 0314 	add.w	r3, r4, #20
   bd084:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bd088:	f109 0314 	add.w	r3, r9, #20
   bd08c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bd090:	9202      	str	r2, [sp, #8]
   bd092:	1b3a      	subs	r2, r7, r4
   bd094:	3a15      	subs	r2, #21
   bd096:	f022 0203 	bic.w	r2, r2, #3
   bd09a:	3204      	adds	r2, #4
   bd09c:	f104 0115 	add.w	r1, r4, #21
   bd0a0:	428f      	cmp	r7, r1
   bd0a2:	bf38      	it	cc
   bd0a4:	2204      	movcc	r2, #4
   bd0a6:	9201      	str	r2, [sp, #4]
   bd0a8:	9a02      	ldr	r2, [sp, #8]
   bd0aa:	9303      	str	r3, [sp, #12]
   bd0ac:	429a      	cmp	r2, r3
   bd0ae:	d80c      	bhi.n	bd0ca <__multiply+0x9e>
   bd0b0:	2e00      	cmp	r6, #0
   bd0b2:	dd03      	ble.n	bd0bc <__multiply+0x90>
   bd0b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bd0b8:	2b00      	cmp	r3, #0
   bd0ba:	d05a      	beq.n	bd172 <__multiply+0x146>
   bd0bc:	6106      	str	r6, [r0, #16]
   bd0be:	b005      	add	sp, #20
   bd0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd0c4:	f843 2b04 	str.w	r2, [r3], #4
   bd0c8:	e7d8      	b.n	bd07c <__multiply+0x50>
   bd0ca:	f8b3 a000 	ldrh.w	sl, [r3]
   bd0ce:	f1ba 0f00 	cmp.w	sl, #0
   bd0d2:	d024      	beq.n	bd11e <__multiply+0xf2>
   bd0d4:	f104 0e14 	add.w	lr, r4, #20
   bd0d8:	46a9      	mov	r9, r5
   bd0da:	f04f 0c00 	mov.w	ip, #0
   bd0de:	f85e 2b04 	ldr.w	r2, [lr], #4
   bd0e2:	f8d9 1000 	ldr.w	r1, [r9]
   bd0e6:	fa1f fb82 	uxth.w	fp, r2
   bd0ea:	b289      	uxth	r1, r1
   bd0ec:	fb0a 110b 	mla	r1, sl, fp, r1
   bd0f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bd0f4:	f8d9 2000 	ldr.w	r2, [r9]
   bd0f8:	4461      	add	r1, ip
   bd0fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bd0fe:	fb0a c20b 	mla	r2, sl, fp, ip
   bd102:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bd106:	b289      	uxth	r1, r1
   bd108:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bd10c:	4577      	cmp	r7, lr
   bd10e:	f849 1b04 	str.w	r1, [r9], #4
   bd112:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bd116:	d8e2      	bhi.n	bd0de <__multiply+0xb2>
   bd118:	9a01      	ldr	r2, [sp, #4]
   bd11a:	f845 c002 	str.w	ip, [r5, r2]
   bd11e:	9a03      	ldr	r2, [sp, #12]
   bd120:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bd124:	3304      	adds	r3, #4
   bd126:	f1b9 0f00 	cmp.w	r9, #0
   bd12a:	d020      	beq.n	bd16e <__multiply+0x142>
   bd12c:	6829      	ldr	r1, [r5, #0]
   bd12e:	f104 0c14 	add.w	ip, r4, #20
   bd132:	46ae      	mov	lr, r5
   bd134:	f04f 0a00 	mov.w	sl, #0
   bd138:	f8bc b000 	ldrh.w	fp, [ip]
   bd13c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bd140:	fb09 220b 	mla	r2, r9, fp, r2
   bd144:	4492      	add	sl, r2
   bd146:	b289      	uxth	r1, r1
   bd148:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bd14c:	f84e 1b04 	str.w	r1, [lr], #4
   bd150:	f85c 2b04 	ldr.w	r2, [ip], #4
   bd154:	f8be 1000 	ldrh.w	r1, [lr]
   bd158:	0c12      	lsrs	r2, r2, #16
   bd15a:	fb09 1102 	mla	r1, r9, r2, r1
   bd15e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bd162:	4567      	cmp	r7, ip
   bd164:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bd168:	d8e6      	bhi.n	bd138 <__multiply+0x10c>
   bd16a:	9a01      	ldr	r2, [sp, #4]
   bd16c:	50a9      	str	r1, [r5, r2]
   bd16e:	3504      	adds	r5, #4
   bd170:	e79a      	b.n	bd0a8 <__multiply+0x7c>
   bd172:	3e01      	subs	r6, #1
   bd174:	e79c      	b.n	bd0b0 <__multiply+0x84>
   bd176:	bf00      	nop
   bd178:	000be2a9 	.word	0x000be2a9
   bd17c:	000be330 	.word	0x000be330

000bd180 <__pow5mult>:
   bd180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd184:	4615      	mov	r5, r2
   bd186:	f012 0203 	ands.w	r2, r2, #3
   bd18a:	4606      	mov	r6, r0
   bd18c:	460f      	mov	r7, r1
   bd18e:	d007      	beq.n	bd1a0 <__pow5mult+0x20>
   bd190:	4c25      	ldr	r4, [pc, #148]	; (bd228 <__pow5mult+0xa8>)
   bd192:	3a01      	subs	r2, #1
   bd194:	2300      	movs	r3, #0
   bd196:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bd19a:	f7ff fe51 	bl	bce40 <__multadd>
   bd19e:	4607      	mov	r7, r0
   bd1a0:	10ad      	asrs	r5, r5, #2
   bd1a2:	d03d      	beq.n	bd220 <__pow5mult+0xa0>
   bd1a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bd1a6:	b97c      	cbnz	r4, bd1c8 <__pow5mult+0x48>
   bd1a8:	2010      	movs	r0, #16
   bd1aa:	f7fa ff67 	bl	b807c <malloc>
   bd1ae:	4602      	mov	r2, r0
   bd1b0:	6270      	str	r0, [r6, #36]	; 0x24
   bd1b2:	b928      	cbnz	r0, bd1c0 <__pow5mult+0x40>
   bd1b4:	4b1d      	ldr	r3, [pc, #116]	; (bd22c <__pow5mult+0xac>)
   bd1b6:	481e      	ldr	r0, [pc, #120]	; (bd230 <__pow5mult+0xb0>)
   bd1b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bd1bc:	f7fa ff9e 	bl	b80fc <__assert_func>
   bd1c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bd1c4:	6004      	str	r4, [r0, #0]
   bd1c6:	60c4      	str	r4, [r0, #12]
   bd1c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bd1cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bd1d0:	b94c      	cbnz	r4, bd1e6 <__pow5mult+0x66>
   bd1d2:	f240 2171 	movw	r1, #625	; 0x271
   bd1d6:	4630      	mov	r0, r6
   bd1d8:	f7ff ff12 	bl	bd000 <__i2b>
   bd1dc:	2300      	movs	r3, #0
   bd1de:	f8c8 0008 	str.w	r0, [r8, #8]
   bd1e2:	4604      	mov	r4, r0
   bd1e4:	6003      	str	r3, [r0, #0]
   bd1e6:	f04f 0900 	mov.w	r9, #0
   bd1ea:	07eb      	lsls	r3, r5, #31
   bd1ec:	d50a      	bpl.n	bd204 <__pow5mult+0x84>
   bd1ee:	4639      	mov	r1, r7
   bd1f0:	4622      	mov	r2, r4
   bd1f2:	4630      	mov	r0, r6
   bd1f4:	f7ff ff1a 	bl	bd02c <__multiply>
   bd1f8:	4639      	mov	r1, r7
   bd1fa:	4680      	mov	r8, r0
   bd1fc:	4630      	mov	r0, r6
   bd1fe:	f7ff fdfd 	bl	bcdfc <_Bfree>
   bd202:	4647      	mov	r7, r8
   bd204:	106d      	asrs	r5, r5, #1
   bd206:	d00b      	beq.n	bd220 <__pow5mult+0xa0>
   bd208:	6820      	ldr	r0, [r4, #0]
   bd20a:	b938      	cbnz	r0, bd21c <__pow5mult+0x9c>
   bd20c:	4622      	mov	r2, r4
   bd20e:	4621      	mov	r1, r4
   bd210:	4630      	mov	r0, r6
   bd212:	f7ff ff0b 	bl	bd02c <__multiply>
   bd216:	6020      	str	r0, [r4, #0]
   bd218:	f8c0 9000 	str.w	r9, [r0]
   bd21c:	4604      	mov	r4, r0
   bd21e:	e7e4      	b.n	bd1ea <__pow5mult+0x6a>
   bd220:	4638      	mov	r0, r7
   bd222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd226:	bf00      	nop
   bd228:	000be480 	.word	0x000be480
   bd22c:	000be0d5 	.word	0x000be0d5
   bd230:	000be330 	.word	0x000be330

000bd234 <__lshift>:
   bd234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd238:	460c      	mov	r4, r1
   bd23a:	6849      	ldr	r1, [r1, #4]
   bd23c:	6923      	ldr	r3, [r4, #16]
   bd23e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bd242:	68a3      	ldr	r3, [r4, #8]
   bd244:	4607      	mov	r7, r0
   bd246:	4691      	mov	r9, r2
   bd248:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bd24c:	f108 0601 	add.w	r6, r8, #1
   bd250:	42b3      	cmp	r3, r6
   bd252:	db0b      	blt.n	bd26c <__lshift+0x38>
   bd254:	4638      	mov	r0, r7
   bd256:	f7ff fd91 	bl	bcd7c <_Balloc>
   bd25a:	4605      	mov	r5, r0
   bd25c:	b948      	cbnz	r0, bd272 <__lshift+0x3e>
   bd25e:	4602      	mov	r2, r0
   bd260:	4b2a      	ldr	r3, [pc, #168]	; (bd30c <__lshift+0xd8>)
   bd262:	482b      	ldr	r0, [pc, #172]	; (bd310 <__lshift+0xdc>)
   bd264:	f240 11d9 	movw	r1, #473	; 0x1d9
   bd268:	f7fa ff48 	bl	b80fc <__assert_func>
   bd26c:	3101      	adds	r1, #1
   bd26e:	005b      	lsls	r3, r3, #1
   bd270:	e7ee      	b.n	bd250 <__lshift+0x1c>
   bd272:	2300      	movs	r3, #0
   bd274:	f100 0114 	add.w	r1, r0, #20
   bd278:	f100 0210 	add.w	r2, r0, #16
   bd27c:	4618      	mov	r0, r3
   bd27e:	4553      	cmp	r3, sl
   bd280:	db37      	blt.n	bd2f2 <__lshift+0xbe>
   bd282:	6920      	ldr	r0, [r4, #16]
   bd284:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bd288:	f104 0314 	add.w	r3, r4, #20
   bd28c:	f019 091f 	ands.w	r9, r9, #31
   bd290:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bd294:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bd298:	d02f      	beq.n	bd2fa <__lshift+0xc6>
   bd29a:	f1c9 0e20 	rsb	lr, r9, #32
   bd29e:	468a      	mov	sl, r1
   bd2a0:	f04f 0c00 	mov.w	ip, #0
   bd2a4:	681a      	ldr	r2, [r3, #0]
   bd2a6:	fa02 f209 	lsl.w	r2, r2, r9
   bd2aa:	ea42 020c 	orr.w	r2, r2, ip
   bd2ae:	f84a 2b04 	str.w	r2, [sl], #4
   bd2b2:	f853 2b04 	ldr.w	r2, [r3], #4
   bd2b6:	4298      	cmp	r0, r3
   bd2b8:	fa22 fc0e 	lsr.w	ip, r2, lr
   bd2bc:	d8f2      	bhi.n	bd2a4 <__lshift+0x70>
   bd2be:	1b03      	subs	r3, r0, r4
   bd2c0:	3b15      	subs	r3, #21
   bd2c2:	f023 0303 	bic.w	r3, r3, #3
   bd2c6:	3304      	adds	r3, #4
   bd2c8:	f104 0215 	add.w	r2, r4, #21
   bd2cc:	4290      	cmp	r0, r2
   bd2ce:	bf38      	it	cc
   bd2d0:	2304      	movcc	r3, #4
   bd2d2:	f841 c003 	str.w	ip, [r1, r3]
   bd2d6:	f1bc 0f00 	cmp.w	ip, #0
   bd2da:	d001      	beq.n	bd2e0 <__lshift+0xac>
   bd2dc:	f108 0602 	add.w	r6, r8, #2
   bd2e0:	3e01      	subs	r6, #1
   bd2e2:	4638      	mov	r0, r7
   bd2e4:	612e      	str	r6, [r5, #16]
   bd2e6:	4621      	mov	r1, r4
   bd2e8:	f7ff fd88 	bl	bcdfc <_Bfree>
   bd2ec:	4628      	mov	r0, r5
   bd2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd2f2:	f842 0f04 	str.w	r0, [r2, #4]!
   bd2f6:	3301      	adds	r3, #1
   bd2f8:	e7c1      	b.n	bd27e <__lshift+0x4a>
   bd2fa:	3904      	subs	r1, #4
   bd2fc:	f853 2b04 	ldr.w	r2, [r3], #4
   bd300:	f841 2f04 	str.w	r2, [r1, #4]!
   bd304:	4298      	cmp	r0, r3
   bd306:	d8f9      	bhi.n	bd2fc <__lshift+0xc8>
   bd308:	e7ea      	b.n	bd2e0 <__lshift+0xac>
   bd30a:	bf00      	nop
   bd30c:	000be2a9 	.word	0x000be2a9
   bd310:	000be330 	.word	0x000be330

000bd314 <__mcmp>:
   bd314:	b530      	push	{r4, r5, lr}
   bd316:	6902      	ldr	r2, [r0, #16]
   bd318:	690c      	ldr	r4, [r1, #16]
   bd31a:	1b12      	subs	r2, r2, r4
   bd31c:	d10e      	bne.n	bd33c <__mcmp+0x28>
   bd31e:	f100 0314 	add.w	r3, r0, #20
   bd322:	3114      	adds	r1, #20
   bd324:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bd328:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bd32c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bd330:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bd334:	42a5      	cmp	r5, r4
   bd336:	d003      	beq.n	bd340 <__mcmp+0x2c>
   bd338:	d305      	bcc.n	bd346 <__mcmp+0x32>
   bd33a:	2201      	movs	r2, #1
   bd33c:	4610      	mov	r0, r2
   bd33e:	bd30      	pop	{r4, r5, pc}
   bd340:	4283      	cmp	r3, r0
   bd342:	d3f3      	bcc.n	bd32c <__mcmp+0x18>
   bd344:	e7fa      	b.n	bd33c <__mcmp+0x28>
   bd346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd34a:	e7f7      	b.n	bd33c <__mcmp+0x28>

000bd34c <__mdiff>:
   bd34c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd350:	460c      	mov	r4, r1
   bd352:	4606      	mov	r6, r0
   bd354:	4611      	mov	r1, r2
   bd356:	4620      	mov	r0, r4
   bd358:	4690      	mov	r8, r2
   bd35a:	f7ff ffdb 	bl	bd314 <__mcmp>
   bd35e:	1e05      	subs	r5, r0, #0
   bd360:	d110      	bne.n	bd384 <__mdiff+0x38>
   bd362:	4629      	mov	r1, r5
   bd364:	4630      	mov	r0, r6
   bd366:	f7ff fd09 	bl	bcd7c <_Balloc>
   bd36a:	b930      	cbnz	r0, bd37a <__mdiff+0x2e>
   bd36c:	4b3a      	ldr	r3, [pc, #232]	; (bd458 <__mdiff+0x10c>)
   bd36e:	4602      	mov	r2, r0
   bd370:	f240 2132 	movw	r1, #562	; 0x232
   bd374:	4839      	ldr	r0, [pc, #228]	; (bd45c <__mdiff+0x110>)
   bd376:	f7fa fec1 	bl	b80fc <__assert_func>
   bd37a:	2301      	movs	r3, #1
   bd37c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bd380:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd384:	bfa4      	itt	ge
   bd386:	4643      	movge	r3, r8
   bd388:	46a0      	movge	r8, r4
   bd38a:	4630      	mov	r0, r6
   bd38c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bd390:	bfa6      	itte	ge
   bd392:	461c      	movge	r4, r3
   bd394:	2500      	movge	r5, #0
   bd396:	2501      	movlt	r5, #1
   bd398:	f7ff fcf0 	bl	bcd7c <_Balloc>
   bd39c:	b920      	cbnz	r0, bd3a8 <__mdiff+0x5c>
   bd39e:	4b2e      	ldr	r3, [pc, #184]	; (bd458 <__mdiff+0x10c>)
   bd3a0:	4602      	mov	r2, r0
   bd3a2:	f44f 7110 	mov.w	r1, #576	; 0x240
   bd3a6:	e7e5      	b.n	bd374 <__mdiff+0x28>
   bd3a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bd3ac:	6926      	ldr	r6, [r4, #16]
   bd3ae:	60c5      	str	r5, [r0, #12]
   bd3b0:	f104 0914 	add.w	r9, r4, #20
   bd3b4:	f108 0514 	add.w	r5, r8, #20
   bd3b8:	f100 0e14 	add.w	lr, r0, #20
   bd3bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bd3c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bd3c4:	f108 0210 	add.w	r2, r8, #16
   bd3c8:	46f2      	mov	sl, lr
   bd3ca:	2100      	movs	r1, #0
   bd3cc:	f859 3b04 	ldr.w	r3, [r9], #4
   bd3d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bd3d4:	fa1f f883 	uxth.w	r8, r3
   bd3d8:	fa11 f18b 	uxtah	r1, r1, fp
   bd3dc:	0c1b      	lsrs	r3, r3, #16
   bd3de:	eba1 0808 	sub.w	r8, r1, r8
   bd3e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bd3e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bd3ea:	fa1f f888 	uxth.w	r8, r8
   bd3ee:	1419      	asrs	r1, r3, #16
   bd3f0:	454e      	cmp	r6, r9
   bd3f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bd3f6:	f84a 3b04 	str.w	r3, [sl], #4
   bd3fa:	d8e7      	bhi.n	bd3cc <__mdiff+0x80>
   bd3fc:	1b33      	subs	r3, r6, r4
   bd3fe:	3b15      	subs	r3, #21
   bd400:	f023 0303 	bic.w	r3, r3, #3
   bd404:	3304      	adds	r3, #4
   bd406:	3415      	adds	r4, #21
   bd408:	42a6      	cmp	r6, r4
   bd40a:	bf38      	it	cc
   bd40c:	2304      	movcc	r3, #4
   bd40e:	441d      	add	r5, r3
   bd410:	4473      	add	r3, lr
   bd412:	469e      	mov	lr, r3
   bd414:	462e      	mov	r6, r5
   bd416:	4566      	cmp	r6, ip
   bd418:	d30e      	bcc.n	bd438 <__mdiff+0xec>
   bd41a:	f10c 0203 	add.w	r2, ip, #3
   bd41e:	1b52      	subs	r2, r2, r5
   bd420:	f022 0203 	bic.w	r2, r2, #3
   bd424:	3d03      	subs	r5, #3
   bd426:	45ac      	cmp	ip, r5
   bd428:	bf38      	it	cc
   bd42a:	2200      	movcc	r2, #0
   bd42c:	441a      	add	r2, r3
   bd42e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bd432:	b17b      	cbz	r3, bd454 <__mdiff+0x108>
   bd434:	6107      	str	r7, [r0, #16]
   bd436:	e7a3      	b.n	bd380 <__mdiff+0x34>
   bd438:	f856 8b04 	ldr.w	r8, [r6], #4
   bd43c:	fa11 f288 	uxtah	r2, r1, r8
   bd440:	1414      	asrs	r4, r2, #16
   bd442:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bd446:	b292      	uxth	r2, r2
   bd448:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bd44c:	f84e 2b04 	str.w	r2, [lr], #4
   bd450:	1421      	asrs	r1, r4, #16
   bd452:	e7e0      	b.n	bd416 <__mdiff+0xca>
   bd454:	3f01      	subs	r7, #1
   bd456:	e7ea      	b.n	bd42e <__mdiff+0xe2>
   bd458:	000be2a9 	.word	0x000be2a9
   bd45c:	000be330 	.word	0x000be330

000bd460 <__ulp>:
   bd460:	b082      	sub	sp, #8
   bd462:	ed8d 0b00 	vstr	d0, [sp]
   bd466:	9b01      	ldr	r3, [sp, #4]
   bd468:	4912      	ldr	r1, [pc, #72]	; (bd4b4 <__ulp+0x54>)
   bd46a:	4019      	ands	r1, r3
   bd46c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bd470:	2900      	cmp	r1, #0
   bd472:	dd05      	ble.n	bd480 <__ulp+0x20>
   bd474:	2200      	movs	r2, #0
   bd476:	460b      	mov	r3, r1
   bd478:	ec43 2b10 	vmov	d0, r2, r3
   bd47c:	b002      	add	sp, #8
   bd47e:	4770      	bx	lr
   bd480:	4249      	negs	r1, r1
   bd482:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bd486:	ea4f 5021 	mov.w	r0, r1, asr #20
   bd48a:	f04f 0200 	mov.w	r2, #0
   bd48e:	f04f 0300 	mov.w	r3, #0
   bd492:	da04      	bge.n	bd49e <__ulp+0x3e>
   bd494:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bd498:	fa41 f300 	asr.w	r3, r1, r0
   bd49c:	e7ec      	b.n	bd478 <__ulp+0x18>
   bd49e:	f1a0 0114 	sub.w	r1, r0, #20
   bd4a2:	291e      	cmp	r1, #30
   bd4a4:	bfda      	itte	le
   bd4a6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bd4aa:	fa20 f101 	lsrle.w	r1, r0, r1
   bd4ae:	2101      	movgt	r1, #1
   bd4b0:	460a      	mov	r2, r1
   bd4b2:	e7e1      	b.n	bd478 <__ulp+0x18>
   bd4b4:	7ff00000 	.word	0x7ff00000

000bd4b8 <__b2d>:
   bd4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd4ba:	6905      	ldr	r5, [r0, #16]
   bd4bc:	f100 0714 	add.w	r7, r0, #20
   bd4c0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bd4c4:	1f2e      	subs	r6, r5, #4
   bd4c6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bd4ca:	4620      	mov	r0, r4
   bd4cc:	f7ff fd48 	bl	bcf60 <__hi0bits>
   bd4d0:	f1c0 0320 	rsb	r3, r0, #32
   bd4d4:	280a      	cmp	r0, #10
   bd4d6:	f8df c07c 	ldr.w	ip, [pc, #124]	; bd554 <__b2d+0x9c>
   bd4da:	600b      	str	r3, [r1, #0]
   bd4dc:	dc14      	bgt.n	bd508 <__b2d+0x50>
   bd4de:	f1c0 0e0b 	rsb	lr, r0, #11
   bd4e2:	fa24 f10e 	lsr.w	r1, r4, lr
   bd4e6:	42b7      	cmp	r7, r6
   bd4e8:	ea41 030c 	orr.w	r3, r1, ip
   bd4ec:	bf34      	ite	cc
   bd4ee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd4f2:	2100      	movcs	r1, #0
   bd4f4:	3015      	adds	r0, #21
   bd4f6:	fa04 f000 	lsl.w	r0, r4, r0
   bd4fa:	fa21 f10e 	lsr.w	r1, r1, lr
   bd4fe:	ea40 0201 	orr.w	r2, r0, r1
   bd502:	ec43 2b10 	vmov	d0, r2, r3
   bd506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd508:	42b7      	cmp	r7, r6
   bd50a:	bf3a      	itte	cc
   bd50c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd510:	f1a5 0608 	subcc.w	r6, r5, #8
   bd514:	2100      	movcs	r1, #0
   bd516:	380b      	subs	r0, #11
   bd518:	d017      	beq.n	bd54a <__b2d+0x92>
   bd51a:	f1c0 0c20 	rsb	ip, r0, #32
   bd51e:	fa04 f500 	lsl.w	r5, r4, r0
   bd522:	42be      	cmp	r6, r7
   bd524:	fa21 f40c 	lsr.w	r4, r1, ip
   bd528:	ea45 0504 	orr.w	r5, r5, r4
   bd52c:	bf8c      	ite	hi
   bd52e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bd532:	2400      	movls	r4, #0
   bd534:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bd538:	fa01 f000 	lsl.w	r0, r1, r0
   bd53c:	fa24 f40c 	lsr.w	r4, r4, ip
   bd540:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bd544:	ea40 0204 	orr.w	r2, r0, r4
   bd548:	e7db      	b.n	bd502 <__b2d+0x4a>
   bd54a:	ea44 030c 	orr.w	r3, r4, ip
   bd54e:	460a      	mov	r2, r1
   bd550:	e7d7      	b.n	bd502 <__b2d+0x4a>
   bd552:	bf00      	nop
   bd554:	3ff00000 	.word	0x3ff00000

000bd558 <__d2b>:
   bd558:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bd55c:	4689      	mov	r9, r1
   bd55e:	2101      	movs	r1, #1
   bd560:	ec57 6b10 	vmov	r6, r7, d0
   bd564:	4690      	mov	r8, r2
   bd566:	f7ff fc09 	bl	bcd7c <_Balloc>
   bd56a:	4604      	mov	r4, r0
   bd56c:	b930      	cbnz	r0, bd57c <__d2b+0x24>
   bd56e:	4602      	mov	r2, r0
   bd570:	4b25      	ldr	r3, [pc, #148]	; (bd608 <__d2b+0xb0>)
   bd572:	4826      	ldr	r0, [pc, #152]	; (bd60c <__d2b+0xb4>)
   bd574:	f240 310a 	movw	r1, #778	; 0x30a
   bd578:	f7fa fdc0 	bl	b80fc <__assert_func>
   bd57c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bd580:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bd584:	bb35      	cbnz	r5, bd5d4 <__d2b+0x7c>
   bd586:	2e00      	cmp	r6, #0
   bd588:	9301      	str	r3, [sp, #4]
   bd58a:	d028      	beq.n	bd5de <__d2b+0x86>
   bd58c:	4668      	mov	r0, sp
   bd58e:	9600      	str	r6, [sp, #0]
   bd590:	f7ff fd06 	bl	bcfa0 <__lo0bits>
   bd594:	9900      	ldr	r1, [sp, #0]
   bd596:	b300      	cbz	r0, bd5da <__d2b+0x82>
   bd598:	9a01      	ldr	r2, [sp, #4]
   bd59a:	f1c0 0320 	rsb	r3, r0, #32
   bd59e:	fa02 f303 	lsl.w	r3, r2, r3
   bd5a2:	430b      	orrs	r3, r1
   bd5a4:	40c2      	lsrs	r2, r0
   bd5a6:	6163      	str	r3, [r4, #20]
   bd5a8:	9201      	str	r2, [sp, #4]
   bd5aa:	9b01      	ldr	r3, [sp, #4]
   bd5ac:	61a3      	str	r3, [r4, #24]
   bd5ae:	2b00      	cmp	r3, #0
   bd5b0:	bf14      	ite	ne
   bd5b2:	2202      	movne	r2, #2
   bd5b4:	2201      	moveq	r2, #1
   bd5b6:	6122      	str	r2, [r4, #16]
   bd5b8:	b1d5      	cbz	r5, bd5f0 <__d2b+0x98>
   bd5ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bd5be:	4405      	add	r5, r0
   bd5c0:	f8c9 5000 	str.w	r5, [r9]
   bd5c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bd5c8:	f8c8 0000 	str.w	r0, [r8]
   bd5cc:	4620      	mov	r0, r4
   bd5ce:	b003      	add	sp, #12
   bd5d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd5d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd5d8:	e7d5      	b.n	bd586 <__d2b+0x2e>
   bd5da:	6161      	str	r1, [r4, #20]
   bd5dc:	e7e5      	b.n	bd5aa <__d2b+0x52>
   bd5de:	a801      	add	r0, sp, #4
   bd5e0:	f7ff fcde 	bl	bcfa0 <__lo0bits>
   bd5e4:	9b01      	ldr	r3, [sp, #4]
   bd5e6:	6163      	str	r3, [r4, #20]
   bd5e8:	2201      	movs	r2, #1
   bd5ea:	6122      	str	r2, [r4, #16]
   bd5ec:	3020      	adds	r0, #32
   bd5ee:	e7e3      	b.n	bd5b8 <__d2b+0x60>
   bd5f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bd5f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bd5f8:	f8c9 0000 	str.w	r0, [r9]
   bd5fc:	6918      	ldr	r0, [r3, #16]
   bd5fe:	f7ff fcaf 	bl	bcf60 <__hi0bits>
   bd602:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bd606:	e7df      	b.n	bd5c8 <__d2b+0x70>
   bd608:	000be2a9 	.word	0x000be2a9
   bd60c:	000be330 	.word	0x000be330

000bd610 <__ratio>:
   bd610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd614:	4688      	mov	r8, r1
   bd616:	4669      	mov	r1, sp
   bd618:	4681      	mov	r9, r0
   bd61a:	f7ff ff4d 	bl	bd4b8 <__b2d>
   bd61e:	a901      	add	r1, sp, #4
   bd620:	4640      	mov	r0, r8
   bd622:	ec55 4b10 	vmov	r4, r5, d0
   bd626:	f7ff ff47 	bl	bd4b8 <__b2d>
   bd62a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd62e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bd632:	eba3 0c02 	sub.w	ip, r3, r2
   bd636:	e9dd 3200 	ldrd	r3, r2, [sp]
   bd63a:	1a9b      	subs	r3, r3, r2
   bd63c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bd640:	ec51 0b10 	vmov	r0, r1, d0
   bd644:	2b00      	cmp	r3, #0
   bd646:	bfd6      	itet	le
   bd648:	460a      	movle	r2, r1
   bd64a:	462a      	movgt	r2, r5
   bd64c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bd650:	468b      	mov	fp, r1
   bd652:	462f      	mov	r7, r5
   bd654:	bfd4      	ite	le
   bd656:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bd65a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bd65e:	4620      	mov	r0, r4
   bd660:	ee10 2a10 	vmov	r2, s0
   bd664:	465b      	mov	r3, fp
   bd666:	4639      	mov	r1, r7
   bd668:	f7fd fdb8 	bl	bb1dc <__aeabi_ddiv>
   bd66c:	ec41 0b10 	vmov	d0, r0, r1
   bd670:	b003      	add	sp, #12
   bd672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd676 <__copybits>:
   bd676:	3901      	subs	r1, #1
   bd678:	b570      	push	{r4, r5, r6, lr}
   bd67a:	1149      	asrs	r1, r1, #5
   bd67c:	6914      	ldr	r4, [r2, #16]
   bd67e:	3101      	adds	r1, #1
   bd680:	f102 0314 	add.w	r3, r2, #20
   bd684:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bd688:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bd68c:	1f05      	subs	r5, r0, #4
   bd68e:	42a3      	cmp	r3, r4
   bd690:	d30c      	bcc.n	bd6ac <__copybits+0x36>
   bd692:	1aa3      	subs	r3, r4, r2
   bd694:	3b11      	subs	r3, #17
   bd696:	f023 0303 	bic.w	r3, r3, #3
   bd69a:	3211      	adds	r2, #17
   bd69c:	42a2      	cmp	r2, r4
   bd69e:	bf88      	it	hi
   bd6a0:	2300      	movhi	r3, #0
   bd6a2:	4418      	add	r0, r3
   bd6a4:	2300      	movs	r3, #0
   bd6a6:	4288      	cmp	r0, r1
   bd6a8:	d305      	bcc.n	bd6b6 <__copybits+0x40>
   bd6aa:	bd70      	pop	{r4, r5, r6, pc}
   bd6ac:	f853 6b04 	ldr.w	r6, [r3], #4
   bd6b0:	f845 6f04 	str.w	r6, [r5, #4]!
   bd6b4:	e7eb      	b.n	bd68e <__copybits+0x18>
   bd6b6:	f840 3b04 	str.w	r3, [r0], #4
   bd6ba:	e7f4      	b.n	bd6a6 <__copybits+0x30>

000bd6bc <__any_on>:
   bd6bc:	f100 0214 	add.w	r2, r0, #20
   bd6c0:	6900      	ldr	r0, [r0, #16]
   bd6c2:	114b      	asrs	r3, r1, #5
   bd6c4:	4298      	cmp	r0, r3
   bd6c6:	b510      	push	{r4, lr}
   bd6c8:	db11      	blt.n	bd6ee <__any_on+0x32>
   bd6ca:	dd0a      	ble.n	bd6e2 <__any_on+0x26>
   bd6cc:	f011 011f 	ands.w	r1, r1, #31
   bd6d0:	d007      	beq.n	bd6e2 <__any_on+0x26>
   bd6d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bd6d6:	fa24 f001 	lsr.w	r0, r4, r1
   bd6da:	fa00 f101 	lsl.w	r1, r0, r1
   bd6de:	428c      	cmp	r4, r1
   bd6e0:	d10b      	bne.n	bd6fa <__any_on+0x3e>
   bd6e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bd6e6:	4293      	cmp	r3, r2
   bd6e8:	d803      	bhi.n	bd6f2 <__any_on+0x36>
   bd6ea:	2000      	movs	r0, #0
   bd6ec:	bd10      	pop	{r4, pc}
   bd6ee:	4603      	mov	r3, r0
   bd6f0:	e7f7      	b.n	bd6e2 <__any_on+0x26>
   bd6f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bd6f6:	2900      	cmp	r1, #0
   bd6f8:	d0f5      	beq.n	bd6e6 <__any_on+0x2a>
   bd6fa:	2001      	movs	r0, #1
   bd6fc:	e7f6      	b.n	bd6ec <__any_on+0x30>

000bd6fe <_calloc_r>:
   bd6fe:	b513      	push	{r0, r1, r4, lr}
   bd700:	434a      	muls	r2, r1
   bd702:	4611      	mov	r1, r2
   bd704:	9201      	str	r2, [sp, #4]
   bd706:	f7fa fce9 	bl	b80dc <_malloc_r>
   bd70a:	4604      	mov	r4, r0
   bd70c:	b118      	cbz	r0, bd716 <_calloc_r+0x18>
   bd70e:	9a01      	ldr	r2, [sp, #4]
   bd710:	2100      	movs	r1, #0
   bd712:	f7fd ffb9 	bl	bb688 <memset>
   bd716:	4620      	mov	r0, r4
   bd718:	b002      	add	sp, #8
   bd71a:	bd10      	pop	{r4, pc}
   bd71c:	0000      	movs	r0, r0
	...

000bd720 <nan>:
   bd720:	ed9f 0b01 	vldr	d0, [pc, #4]	; bd728 <nan+0x8>
   bd724:	4770      	bx	lr
   bd726:	bf00      	nop
   bd728:	00000000 	.word	0x00000000
   bd72c:	7ff80000 	.word	0x7ff80000

000bd730 <nanf>:
   bd730:	ed9f 0a01 	vldr	s0, [pc, #4]	; bd738 <nanf+0x8>
   bd734:	4770      	bx	lr
   bd736:	bf00      	nop
   bd738:	7fc00000 	.word	0x7fc00000

000bd73c <__ascii_wctomb>:
   bd73c:	b149      	cbz	r1, bd752 <__ascii_wctomb+0x16>
   bd73e:	2aff      	cmp	r2, #255	; 0xff
   bd740:	bf85      	ittet	hi
   bd742:	238a      	movhi	r3, #138	; 0x8a
   bd744:	6003      	strhi	r3, [r0, #0]
   bd746:	700a      	strbls	r2, [r1, #0]
   bd748:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bd74c:	bf98      	it	ls
   bd74e:	2001      	movls	r0, #1
   bd750:	4770      	bx	lr
   bd752:	4608      	mov	r0, r1
   bd754:	4770      	bx	lr
	...

000bd758 <__aeabi_d2lz>:
   bd758:	b538      	push	{r3, r4, r5, lr}
   bd75a:	2200      	movs	r2, #0
   bd75c:	2300      	movs	r3, #0
   bd75e:	4604      	mov	r4, r0
   bd760:	460d      	mov	r5, r1
   bd762:	f7fd fe83 	bl	bb46c <__aeabi_dcmplt>
   bd766:	b928      	cbnz	r0, bd774 <__aeabi_d2lz+0x1c>
   bd768:	4620      	mov	r0, r4
   bd76a:	4629      	mov	r1, r5
   bd76c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd770:	f7fd bf2a 	b.w	bb5c8 <__aeabi_d2ulz>
   bd774:	4620      	mov	r0, r4
   bd776:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bd77a:	f7fd ff25 	bl	bb5c8 <__aeabi_d2ulz>
   bd77e:	4240      	negs	r0, r0
   bd780:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd784:	bd38      	pop	{r3, r4, r5, pc}
   bd786:	bf00      	nop

000bd788 <dynalib_user>:
   bd788:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bd798:	0000 0000 6162 6973 5f63 7473 6972 676e     ....basic_string
   bd7a8:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   bd7b8:	6c75 206c 6f6e 2074 6176 696c 0064 720a     ull not valid..r
   bd7c8:	7165 6575 7473 6320 646f 2065 2c31 6120     equest code 1, a
   bd7d8:	6464 6572 7373 203a 7400 6172 736e 696d     ddress: .transmi
   bd7e8:	7373 6f69 206e 6572 6963 7665 6465 6620     ssion recieved f
   bd7f8:	6f72 3a6d 0020 6564 6976 6563 6920 3a64     rom: .device id:
   bd808:	0020 7274 6e61 6d73 7369 6973 6e6f 7320      .transmission s
   bd818:	6e65 2074 6f74 203a 7200 7165 6575 7473     ent to: .request
   bd828:	6320 646f 2065 2c32 6120 6464 6572 7373      code 2, address
   bd838:	203a 6300 6e6f 6c66 6369 2074 6576 6972     : .conflict veri
   bd848:	6966 6163 6974 6e6f 203a 0a00 6f43 6e6e     fication: ..Conn
   bd858:	6365 6574 2064 6f74 203a 6300 6e61 6f6e     ected to: .canno
   bd868:	2074 7263 6165 6574 7320 6474 3a3a 6576     t create std::ve
   bd878:	7463 726f 6c20 7261 6567 2072 6874 6e61     ctor larger than
   bd888:	6d20 7861 735f 7a69 2865 0029 7267 6565      max_size().gree
   bd898:	316e 6700 6572 6e65 0032 4c42 2045 6966     n1.green2.BLE fi
   bd8a8:	696e 6873 6465 7200 6465 4600 3046 3030     nished.red.FF000
   bd8b8:	0030 4130 3030 3030 6200 756c 0065 3030     0.0A0000.blue.00
   bd8c8:	3030 4646 3000 3030 3030 0041 7262 776f     00FF.00000A.brow
   bd8d8:	006e 4646 4646 3030 3000 3041 3041 0030     n.FFFF00.0A0A00.
   bd8e8:	7267 6565 006e 3030 4646 3030 3000 3030     green.00FF00.000
   bd8f8:	3041 0030 726f 6e61 6567 4600 3846 3030     A00.orange.FF800
   bd908:	0030 4130 3530 3030 7000 7275 6c70 0065     0.0A0500.purple.
   bd918:	3032 3030 4646 3000 3032 3030 0041 6970     2000FF.02000A.pi
   bd928:	6b6e 4600 3846 3830 0030 4130 3530 3530     nk.FF8080.0A0505
   bd938:	3600 3445 3030 3030 2d31 3542 3341 462d     .6E400001-B5A3-F
   bd948:	3933 2d33 3045 3941 452d 3035 3245 4434     393-E0A9-E50E24D
   bd958:	4343 3941 0045 4536 3034 3030 3230 422d     CCA9E.6E400002-B
   bd968:	4135 2d33 3346 3339 452d 4130 2d39 3545     5A3-F393-E0A9-E5
   bd978:	4530 3432 4344 4143 4539 3600 3445 3030     0E24DCCA9E.6E400
   bd988:	3030 2d33 3542 3341 462d 3933 2d33 3045     003-B5A3-F393-E0
   bd998:	3941 452d 3035 3245 4434 4343 3941 0045     A9-E50E24DCCA9E.
   bd9a8:	7874 7200 0078 7274 6b65 742e 6568 6377     tx.rx.trek.thewc
   bd9b8:	2e6c 6f63 006d 6863 6369 6761 006f 6f6c     l.com.chicago.lo
   bd9c8:	706f 7320 6174 7472 2500 2c69 0020 6c2f     op start.%i, ./l
   bd9d8:	6f6f 2d70 7274 6361 736b 632f 6174 6c3f     oop-tracks/cta?l
   bd9e8:	6e69 7365 003d 4547 0054 6170 7372 6e69     ines=.GET.parsin
   bd9f8:	0067 6170 7372 6e69 2067 6166 6c69 6465     g.parsing failed
   bda08:	6c00 6e69 7365 7400 6172 6e69 0073 656e     .lines.trains.ne
   bda18:	7478 735f 6f74 0070 6564 7473 6e69 7461     xt_stop.destinat
   bda28:	6f69 006e 6964 6572 7463 6f69 006e 616c     ion.direction.la
   bda38:	6974 7574 6564 6c00 6e6f 6967 7574 6564     titude.longitude
   bda48:	6200 6572 6b61 2500 2073 6172 6c69 7020     .break.%s rail p
   bda58:	7261 2074 6925 203a 0000 0000               art %i: ....

000bda64 <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   bda6c:	40b9 000b 40cd 000b 6341 6563 7470 2f00     .@...@..Accept./
   bda7c:	2f2a 0000 0019 0000 0003 0000 0007 0000     */..............
   bda8c:	0005 0000 000c 0000 0008 0000 0005 0000     ................
   bda9c:	0005 0000 0005 0000 0019 0000 0005 0000     ................
   bdaac:	000f 0000 000a 0000 000a 0000 000a 0000     ................
   bdabc:	000a 0000 0014 0000 0000 0000 0028 0000     ............(...
   bdacc:	0000 0000 0002 0000 0006 0000 0000 0000     ................
   bdadc:	0000 0000 000f 0000 000a 0000 000a 0000     ................
   bdaec:	000f 0000 000f 0000 000f 0000 0014 0000     ................
   bdafc:	0000 0000 0001 0000 0003 0000 0000 0000     ................
   bdb0c:	0000 0000 000c 0000 0007 0000 0001 0000     ................
   bdb1c:	000a 0000 000a 0000 000a 0000 000a 0000     ................
   bdb2c:	000c 0000 0000 0000 0028 0000 0008 0000     ........(.......
   bdb3c:	0003 0000 0007 0000 0001 0000 0003 0000     ................
   bdb4c:	0007 0000 0007 0000 0006 0000 000a 0000     ................
   bdb5c:	000a 0000 000a 0000 000a 0000 000e 0000     ................
   bdb6c:	0000 0000 0028 0000 0006 0000 0003 0000     ....(...........
   bdb7c:	0007 0000 0002 0000 0003 0000 4820 5454     ............ HTT
   bdb8c:	2f50 2e31 0d30 000a 6c63 736f 0065 6f43     P/1.0...close.Co
   bdb9c:	6e6e 6365 6974 6e6f 4800 534f 0054 6f43     nnection.HOST.Co
   bdbac:	746e 6e65 2d74 654c 676e 6874 5000 534f     ntent-Length.POS
   bdbbc:	0054 0a0d 0a0d 2500 3430 0078               T......%04x.

000bdbc8 <_ZTV10JsonBuffer>:
	...
   bdbd0:	729d 000b 72b9 000b                         .r...r..

000bdbd8 <_ZTV10JsonParser>:
	...
   bdbe0:	72cd 000b 72f1 000b                         .r...r..

000bdbe8 <_ZTV13JsonReference>:
	...
   bdbf0:	728d 000b 728f 000b 7341 6573 7472 6f69     .r...r..Assertio
   bdc00:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   bdc10:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   bdc20:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   bdc30:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   bdc40:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   bdc50:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   bdc60:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   bdc70:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   bdc80:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   bdc90:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   bdca0:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   bdcb0:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   bdcc0:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   bdcd0:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   bdce0:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   bdcf0:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   bdd00:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   bdd10:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   bdd20:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   bdd30:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   bdd40:	6369 002e                                   ic..

000bdd44 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdd4c:	8129 000b 818d 000b 8273 000b 81b7 000b     ).......s.......
   bdd5c:	812d 000b                                   -...

000bdd60 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdd68:	8125 000b 819b 000b 8127 000b 81bd 000b     %.......'.......
   bdd78:	814d 000b                                   M...

000bdd7c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdd84:	8123 000b 81a9 000b 8949 000b 81c3 000b     #.......I.......
   bdd94:	816d 000b                                   m...

000bdd98 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bdda4:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bddb6 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bddb6:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bddc6 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bddc6:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000bddd8 <_ZTVN5spark13EthernetClassE>:
	...
   bdde0:	93f7 000b 93ed 000b 93e3 000b 93d9 000b     ................
   bddf0:	93cd 000b 93c1 000b 967d 000b 9685 000b     ........}.......
   bde00:	93b5 000b 93ad 000b 93a3 000b 9399 000b     ................
   bde10:	96b5 000b                                   ....

000bde14 <_ZTV7TwoWire>:
	...
   bde1c:	9415 000b 945f 000b 9437 000b 9417 000b     ...._...7.......
   bde2c:	943f 000b 9447 000b 944f 000b 9457 000b     ?...G...O...W...

000bde3c <_ZTV9IPAddress>:
	...
   bde44:	9521 000b 9511 000b 9513 000b 7061 0070     !...........app.

000bde54 <_ZTVN5spark12NetworkClassE>:
	...
   bde5c:	963d 000b 9647 000b 9651 000b 965b 000b     =...G...Q...[...
   bde6c:	9665 000b 9671 000b 967d 000b 9685 000b     e...q...}.......
   bde7c:	968d 000b 9699 000b 96a1 000b 96ab 000b     ................
   bde8c:	96b5 000b 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   bde9c:	7265 6f72 2072 203d 6425 0000               error = %d..

000bdea8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdeb0:	9c31 000b 9c55 000b a187 000b 9c63 000b     1...U.......c...
   bdec0:	9c35 000b                                   5...

000bdec4 <_ZTV9TCPClient>:
	...
   bdecc:	9ce1 000b 9d15 000b 9bad 000b 9bc7 000b     ................
   bdedc:	a01d 000b 9bf1 000b 9e93 000b 9c25 000b     ............%...
   bdeec:	9f25 000b 9d65 000b 9ec1 000b a0d1 000b     %...e...........
   bdefc:	9e61 000b 9c27 000b 9bd9 000b 9c69 000b     a...'.......i...
   bdf0c:	9d45 000b 5925 252d 2d6d 6425 2554 3a48     E...%Y-%m-%dT%H:
   bdf1c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bdf2c <_ZTV11USARTSerial>:
	...
   bdf34:	a1a1 000b a20d 000b a1e5 000b 97a1 000b     ................
   bdf44:	a1b5 000b a1d1 000b a1c3 000b a1df 000b     ................
   bdf54:	a1a3 000b a1a7 000b                         ........

000bdf5c <_ZTV9USBSerial>:
	...
   bdf64:	a24b 000b a2b3 000b a289 000b 97a1 000b     K...............
   bdf74:	a27b 000b a24d 000b a25d 000b a2ad 000b     {...M...].......
   bdf84:	a26d 000b a245 000b                         m...E...

000bdf8c <_ZTVN5spark9WiFiClassE>:
	...
   bdf94:	a3ab 000b a3a1 000b a397 000b a34d 000b     ............M...
   bdfa4:	a38b 000b a37f 000b 967d 000b 9685 000b     ........}.......
   bdfb4:	a373 000b a36b 000b a361 000b a357 000b     s...k...a...W...
   bdfc4:	96b5 000b                                   ....

000bdfc8 <_ZSt7nothrow>:
	...

000bdfc9 <_ZTSSt19_Sp_make_shared_tag>:
   bdfc9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bdfd9:	6572 5f64 6174 0067 0000                     red_tag....

000bdfe4 <_ZTISt19_Sp_make_shared_tag>:
   bdfe4:	e03c 000b dfc9 000b 6162 6973 5f63 7473     <.......basic_st
   bdff4:	6972 676e 3a3a 4d5f 635f 6572 7461 0065     ring::_M_create.

000be004 <_ZTIN10__cxxabiv117__class_type_infoE>:
   be004:	e09c 000b e010 000b e0c0 000b               ............

000be010 <_ZTSN10__cxxabiv117__class_type_infoE>:
   be010:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   be020:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   be030:	0045 0000                                   E...

000be034 <_ZTVN10__cxxabiv117__class_type_infoE>:
   be034:	0000 0000 e004 000b a7a1 000b a7b5 000b     ................
   be044:	a949 000b a949 000b a81f 000b a761 000b     I...I.......a...
   be054:	a807 000b a7c9 000b a793 000b               ............

000be060 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   be060:	e09c 000b e06c 000b e004 000b               ....l.......

000be06c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   be06c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   be07c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   be08c:	666e 456f 0000 0000                         nfoE....

000be094 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   be094:	0000 0000 e060 000b a849 000b a85d 000b     ....`...I...]...
   be0a4:	a949 000b a949 000b a81f 000b a761 000b     I...I.......a...
   be0b4:	a91d 000b a8a9 000b a871 000b               ........q...

000be0c0 <_ZTISt9type_info>:
   be0c0:	e03c 000b e0c8 000b                         <.......

000be0c8 <_ZTSSt9type_info>:
   be0c8:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   be0d8:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   be0e8:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   be0f8:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   be108:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   be118:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   be128:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   be138:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   be148:	6e69 7469 0079 6e61 0000 0000               inity.an....

000be154 <fpi.1>:
   be154:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   be164:	0000 0000                                   ....

000be168 <fpinan.0>:
   be168:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000be180 <tinytens>:
   be180:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   be190:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   be1a0:	6f43 64ac 0628 1168                         Co.d(.h.

000be1a8 <_ctype_>:
   be1a8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   be1b8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   be1c8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   be1d8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   be1e8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   be1f8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   be208:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   be218:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   be228:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   be2a8:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   be2b8:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   be2c8:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   be2d8:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   be2e8:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   be2f8:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   be308:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   be318:	632e 0000                                   .c..

000be31c <_C_numeric_locale>:
   be31c:	dd42 000b dbc2 000b 535c 2003 0043 4f50     B.......\S. C.PO
   be32c:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   be33c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   be34c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   be35c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   be36c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   be37c:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   be38c:	0000 0000                                   ....

000be390 <__mprec_bigtens>:
   be390:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   be3a0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   be3b0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000be3b8 <__mprec_tens>:
   be3b8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   be3c8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   be3d8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   be3e8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   be3f8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   be408:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   be418:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   be428:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   be438:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   be448:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   be458:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   be468:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   be478:	9db4 79d9 7843 44ea                         ...yCx.D

000be480 <p05.0>:
   be480:	0005 0000 0019 0000 007d 0000               ........}...

000be48c <link_const_variable_data_end>:
   be48c:	000b65ed 	.word	0x000b65ed
   be490:	000b9389 	.word	0x000b9389
   be494:	000b9401 	.word	0x000b9401
   be498:	000b962d 	.word	0x000b962d
   be49c:	000b978d 	.word	0x000b978d
   be4a0:	000b98c9 	.word	0x000b98c9
   be4a4:	000b9b89 	.word	0x000b9b89
   be4a8:	000ba18d 	.word	0x000ba18d
   be4ac:	000ba3b5 	.word	0x000ba3b5
