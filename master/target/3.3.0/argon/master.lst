
/Users/sainihome/Documents/GitHub/loop-tracks/master/target/3.3.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009fc0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bdfe0  000bdfe0  0000dfe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000be004  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  200352dc  000be008  000152dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000931c  200354d4  200354d4  000254d4  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000be200  000be200  0001e200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000be228  000be228  0001e228  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001476a3  00000000  00000000  0001e22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00012d29  00000000  00000000  001658cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004a0bd  00000000  00000000  001785f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003280  00000000  00000000  001c26b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d1c0  00000000  00000000  001c5935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000366fe  00000000  00000000  001d2af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004527a  00000000  00000000  002091f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153ad8  00000000  00000000  0024e46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000ac30  00000000  00000000  003a1f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 f89d 	bl	bb170 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 f8bf 	bl	bb1c0 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	200352dc 	.word	0x200352dc
   b404c:	000be008 	.word	0x000be008
   b4050:	200354d4 	.word	0x200354d4
   b4054:	200354d4 	.word	0x200354d4
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f006 f803 	bl	ba06c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bdfac 	.word	0x000bdfac
   b4080:	000bdfd4 	.word	0x000bdfd4

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 bf36 	b.w	b5ef4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f002 f86d 	bl	b6168 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f005 bfa3 	b.w	b9fdc <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 bdb1 	b.w	b7bfc <malloc>

000b409a <_Znaj>:
   b409a:	f003 bdaf 	b.w	b7bfc <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f003 bdb5 	b.w	b7c0c <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f003 bdb3 	b.w	b7c0c <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40b8:	b510      	push	{r4, lr}
   b40ba:	4b03      	ldr	r3, [pc, #12]	; (b40c8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   b40bc:	6003      	str	r3, [r0, #0]
   b40be:	4604      	mov	r4, r0
   b40c0:	f002 feb4 	bl	b6e2c <_ZN10JsonParserD1Ev>
   b40c4:	4620      	mov	r0, r4
   b40c6:	bd10      	pop	{r4, pc}
   b40c8:	000bd590 	.word	0x000bd590

000b40cc <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   b40cc:	b510      	push	{r4, lr}
   b40ce:	4604      	mov	r4, r0
   b40d0:	f7ff fff2 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f246 51bc 	movw	r1, #26044	; 0x65bc
   b40da:	f7ff ffe2 	bl	b40a2 <_ZdlPvj>
   b40de:	4620      	mov	r0, r4
   b40e0:	bd10      	pop	{r4, pc}
	...

000b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   b40e4:	b508      	push	{r3, lr}
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b40e6:	4603      	mov	r3, r0
   b40e8:	b150      	cbz	r0, b4100 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x1c>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
	if (__n > this->_M_max_size())
   b40ea:	4a06      	ldr	r2, [pc, #24]	; (b4104 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x20>)
   b40ec:	4290      	cmp	r0, r2
   b40ee:	d901      	bls.n	b40f4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b40f0:	f006 f856 	bl	ba1a0 <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b40f4:	200c      	movs	r0, #12
   b40f6:	4358      	muls	r0, r3
      }
   b40f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b40fc:	f7ff bfcb 	b.w	b4096 <_Znwj>
   b4100:	bd08      	pop	{r3, pc}
   b4102:	bf00      	nop
   b4104:	0aaaaaaa 	.word	0x0aaaaaaa

000b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>:

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4108:	f100 0308 	add.w	r3, r0, #8
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b410c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b410e:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b4110:	6003      	str	r3, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b4112:	460d      	mov	r5, r1
   b4114:	b1d9      	cbz	r1, b414e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x46>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b4116:	4608      	mov	r0, r1
   b4118:	f007 f89a 	bl	bb250 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b411c:	280f      	cmp	r0, #15
   b411e:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4122:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4124:	d907      	bls.n	b4136 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b4126:	2200      	movs	r2, #0
   b4128:	a901      	add	r1, sp, #4
   b412a:	4620      	mov	r0, r4
   b412c:	f006 f84e 	bl	ba1cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4130:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4132:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4134:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4136:	4632      	mov	r2, r6
   b4138:	4629      	mov	r1, r5
   b413a:	6820      	ldr	r0, [r4, #0]
   b413c:	f006 f881 	bl	ba242 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b4140:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b4142:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4144:	6063      	str	r3, [r4, #4]
   b4146:	2100      	movs	r1, #0
   b4148:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b414a:	b002      	add	sp, #8
   b414c:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b414e:	4801      	ldr	r0, [pc, #4]	; (b4154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x4c>)
   b4150:	f006 f829 	bl	ba1a6 <_ZSt19__throw_logic_errorPKc>
   b4154:	000bd2d4 	.word	0x000bd2d4

000b4158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4158:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b415a:	4603      	mov	r3, r0
   b415c:	b150      	cbz	r0, b4174 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b415e:	4a06      	ldr	r2, [pc, #24]	; (b4178 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x20>)
   b4160:	4290      	cmp	r0, r2
   b4162:	d901      	bls.n	b4168 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4164:	f006 f81c 	bl	ba1a0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4168:	2018      	movs	r0, #24
   b416a:	4358      	muls	r0, r3
      }
   b416c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4170:	f7ff bf91 	b.w	b4096 <_Znwj>
   b4174:	bd08      	pop	{r3, pc}
   b4176:	bf00      	nop
   b4178:	05555555 	.word	0x05555555

000b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b417c:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b417e:	b148      	cbz	r0, b4194 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b4180:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b4184:	d301      	bcc.n	b418a <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b4186:	f006 f80b 	bl	ba1a0 <_ZSt17__throw_bad_allocv>
      }
   b418a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b418e:	0080      	lsls	r0, r0, #2
   b4190:	f7ff bf81 	b.w	b4096 <_Znwj>
   b4194:	bd08      	pop	{r3, pc}

000b4196 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4196:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4198:	b148      	cbz	r0, b41ae <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b419a:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   b419e:	d301      	bcc.n	b41a4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41a0:	f005 fffe 	bl	ba1a0 <_ZSt17__throw_bad_allocv>
      }
   b41a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41a8:	00c0      	lsls	r0, r0, #3
   b41aa:	f7ff bf74 	b.w	b4096 <_Znwj>
   b41ae:	bd08      	pop	{r3, pc}

000b41b0 <_ZN5Print5printIiLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b41b0:	b570      	push	{r4, r5, r6, lr}
   b41b2:	4606      	mov	r6, r0
   b41b4:	460c      	mov	r4, r1
{
    if (base == 0) {
   b41b6:	4615      	mov	r5, r2
   b41b8:	b92a      	cbnz	r2, b41c6 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b41ba:	6803      	ldr	r3, [r0, #0]
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
   b41bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(n);
   b41c0:	689b      	ldr	r3, [r3, #8]
   b41c2:	b2c9      	uxtb	r1, r1
   b41c4:	4718      	bx	r3
        if (n < 0 && base == 10) {
   b41c6:	2900      	cmp	r1, #0
   b41c8:	da0b      	bge.n	b41e2 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
   b41ca:	2a0a      	cmp	r2, #10
   b41cc:	d109      	bne.n	b41e2 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
            t = print('-');
   b41ce:	212d      	movs	r1, #45	; 0x2d
   b41d0:	f005 f8d2 	bl	b9378 <_ZN5Print5printEc>
            val = -n;
   b41d4:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b41d6:	b2ea      	uxtb	r2, r5
   b41d8:	4630      	mov	r0, r6
}
   b41da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b41de:	f005 b8e4 	b.w	b93aa <_ZN5Print11printNumberEmh>
            val = n;
   b41e2:	4621      	mov	r1, r4
   b41e4:	e7f7      	b.n	b41d6 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x26>

000b41e6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b41e6:	b510      	push	{r4, lr}
   b41e8:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b41ea:	f7ff ffe1 	bl	b41b0 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
        n += println();
   b41ee:	4620      	mov	r0, r4
    }
   b41f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b41f4:	f005 b8c3 	b.w	b937e <_ZN5Print7printlnEv>

000b41f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
   b41f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b41fa:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b41fe:	6003      	str	r3, [r0, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b4200:	e9d1 5300 	ldrd	r5, r3, [r1]
      basic_string(const basic_string& __str)
   b4204:	4604      	mov	r4, r0
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b4206:	18ee      	adds	r6, r5, r3
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   b4208:	b91d      	cbnz	r5, b4212 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
   b420a:	b116      	cbz	r6, b4212 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
	  std::__throw_logic_error(__N("basic_string::"
   b420c:	480c      	ldr	r0, [pc, #48]	; (b4240 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x48>)
   b420e:	f005 ffca 	bl	ba1a6 <_ZSt19__throw_logic_errorPKc>
	if (__dnew > size_type(_S_local_capacity))
   b4212:	2b0f      	cmp	r3, #15
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4214:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4216:	d907      	bls.n	b4228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x30>
	    _M_data(_M_create(__dnew, size_type(0)));
   b4218:	2200      	movs	r2, #0
   b421a:	a901      	add	r1, sp, #4
   b421c:	4620      	mov	r0, r4
   b421e:	f005 ffd5 	bl	ba1cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4222:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4224:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4226:	60a3      	str	r3, [r4, #8]
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4228:	4632      	mov	r2, r6
   b422a:	4629      	mov	r1, r5
   b422c:	6820      	ldr	r0, [r4, #0]
   b422e:	f006 f803 	bl	ba238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
   b4232:	9b01      	ldr	r3, [sp, #4]
   b4234:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4236:	6063      	str	r3, [r4, #4]
   b4238:	2100      	movs	r1, #0
   b423a:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b423c:	b002      	add	sp, #8
   b423e:	bd70      	pop	{r4, r5, r6, pc}
   b4240:	000bd2d4 	.word	0x000bd2d4

000b4244 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4244:	6803      	ldr	r3, [r0, #0]
   b4246:	b2c9      	uxtb	r1, r1
   b4248:	689b      	ldr	r3, [r3, #8]
   b424a:	4718      	bx	r3

000b424c <_ZN5Print5writeEPKc.isra.0>:
    size_t write(const char *str) {
   b424c:	b513      	push	{r0, r1, r4, lr}
   b424e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b4250:	b161      	cbz	r1, b426c <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4252:	4608      	mov	r0, r1
   b4254:	9101      	str	r1, [sp, #4]
   b4256:	f006 fffb 	bl	bb250 <strlen>
   b425a:	6823      	ldr	r3, [r4, #0]
   b425c:	9901      	ldr	r1, [sp, #4]
   b425e:	68db      	ldr	r3, [r3, #12]
   b4260:	4602      	mov	r2, r0
   b4262:	4620      	mov	r0, r4
    }
   b4264:	b002      	add	sp, #8
   b4266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b426a:	4718      	bx	r3
    }
   b426c:	b002      	add	sp, #8
   b426e:	bd10      	pop	{r4, pc}

000b4270 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   b4270:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b4272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4274:	4604      	mov	r4, r0
   b4276:	460d      	mov	r5, r1
      if (&__x != this)
   b4278:	d025      	beq.n	b42c6 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x56>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b427a:	e9d1 7100 	ldrd	r7, r1, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   b427e:	6800      	ldr	r0, [r0, #0]
   b4280:	68a3      	ldr	r3, [r4, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4282:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b4284:	1a1b      	subs	r3, r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   b4286:	429e      	cmp	r6, r3
   b4288:	d91e      	bls.n	b42c8 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   b428a:	10f0      	asrs	r0, r6, #3
   b428c:	f7ff ff83 	bl	b4196 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
   b4290:	2300      	movs	r3, #0
   b4292:	4605      	mov	r5, r0
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   b4294:	429e      	cmp	r6, r3
   b4296:	d00a      	beq.n	b42ae <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x3e>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4298:	18ea      	adds	r2, r5, r3
   b429a:	bf1c      	itt	ne
   b429c:	18f9      	addne	r1, r7, r3
   b429e:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b42a2:	f103 0308 	add.w	r3, r3, #8
   b42a6:	bf18      	it	ne
   b42a8:	e9c2 0100 	strdne	r0, r1, [r2]
   b42ac:	e7f2      	b.n	b4294 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x24>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b42ae:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b42b0:	b118      	cbz	r0, b42ba <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x4a>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
   b42b2:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b42b4:	1a09      	subs	r1, r1, r0
   b42b6:	f7ff fef4 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b42ba:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b42bc:	4435      	add	r5, r6
   b42be:	60a5      	str	r5, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b42c0:	6823      	ldr	r3, [r4, #0]
   b42c2:	4433      	add	r3, r6
   b42c4:	6063      	str	r3, [r4, #4]
	}
      return *this;
    }
   b42c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b42c8:	6862      	ldr	r2, [r4, #4]
   b42ca:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   b42cc:	4296      	cmp	r6, r2
   b42ce:	d806      	bhi.n	b42de <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x6e>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b42d0:	42b9      	cmp	r1, r7
   b42d2:	d0f5      	beq.n	b42c0 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b42d4:	4632      	mov	r2, r6
   b42d6:	4639      	mov	r1, r7
   b42d8:	f006 ff58 	bl	bb18c <memmove>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b42dc:	e7f0      	b.n	b42c0 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	  if (_Num)
   b42de:	b112      	cbz	r2, b42e6 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x76>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b42e0:	4639      	mov	r1, r7
   b42e2:	f006 ff53 	bl	bb18c <memmove>
   b42e6:	e9d4 2700 	ldrd	r2, r7, [r4]
   b42ea:	1abb      	subs	r3, r7, r2
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b42ec:	682a      	ldr	r2, [r5, #0]
   b42ee:	686d      	ldr	r5, [r5, #4]
   b42f0:	441a      	add	r2, r3
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b42f2:	1aad      	subs	r5, r5, r2
					  __x._M_impl._M_finish,
   b42f4:	2300      	movs	r3, #0
	      for (; __first != __last; ++__first, (void)++__cur)
   b42f6:	429d      	cmp	r5, r3
   b42f8:	d0e2      	beq.n	b42c0 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
   b42fa:	eb17 0c03 	adds.w	ip, r7, r3
   b42fe:	bf1c      	itt	ne
   b4300:	18d1      	addne	r1, r2, r3
   b4302:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b4306:	f103 0308 	add.w	r3, r3, #8
   b430a:	bf18      	it	ne
   b430c:	e9cc 0100 	strdne	r0, r1, [ip]
   b4310:	e7f1      	b.n	b42f6 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x86>
	...

000b4314 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>:
      if (&__x != this)
   b4314:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b4316:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b431a:	4604      	mov	r4, r0
   b431c:	468a      	mov	sl, r1
      if (&__x != this)
   b431e:	d036      	beq.n	b438e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7a>
   b4320:	e9d1 5b00 	ldrd	r5, fp, [r1]
			 - this->_M_impl._M_start); }
   b4324:	f8d0 9000 	ldr.w	r9, [r0]
   b4328:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b432a:	4a39      	ldr	r2, [pc, #228]	; (b4410 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xfc>)
   b432c:	ebab 0705 	sub.w	r7, fp, r5
			 - this->_M_impl._M_start); }
   b4330:	eba3 0309 	sub.w	r3, r3, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4334:	ea4f 08e7 	mov.w	r8, r7, asr #3
	  if (__xlen > capacity())
   b4338:	42bb      	cmp	r3, r7
   b433a:	fb02 f808 	mul.w	r8, r2, r8
   b433e:	d228      	bcs.n	b4392 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7e>
	  pointer __result = this->_M_allocate(__n);
   b4340:	4640      	mov	r0, r8
   b4342:	f7ff ff09 	bl	b4158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
   b4346:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b4348:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b434a:	45ab      	cmp	fp, r5
   b434c:	d00a      	beq.n	b4364 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x50>
   b434e:	f1b8 0f00 	cmp.w	r8, #0
   b4352:	d003      	beq.n	b435c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x48>
   b4354:	4629      	mov	r1, r5
   b4356:	4640      	mov	r0, r8
   b4358:	f7ff ff4e 	bl	b41f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b435c:	f108 0818 	add.w	r8, r8, #24
   b4360:	3518      	adds	r5, #24
   b4362:	e7f2      	b.n	b434a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x36>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4364:	e9d4 5800 	ldrd	r5, r8, [r4]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b4368:	45a8      	cmp	r8, r5
   b436a:	d004      	beq.n	b4376 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x62>
      { _M_dispose(); }
   b436c:	4628      	mov	r0, r5
   b436e:	f005 ff4f 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4372:	3518      	adds	r5, #24
   b4374:	e7f8      	b.n	b4368 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x54>
	      _M_deallocate(this->_M_impl._M_start,
   b4376:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4378:	b118      	cbz	r0, b4382 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x6e>
			    - this->_M_impl._M_start);
   b437a:	68a1      	ldr	r1, [r4, #8]
   b437c:	1a09      	subs	r1, r1, r0
   b437e:	f7ff fe90 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4382:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4384:	443e      	add	r6, r7
   b4386:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4388:	6823      	ldr	r3, [r4, #0]
   b438a:	443b      	add	r3, r7
   b438c:	6063      	str	r3, [r4, #4]
    }
   b438e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4392:	6846      	ldr	r6, [r0, #4]
   b4394:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b4398:	42b7      	cmp	r7, r6
   b439a:	d819      	bhi.n	b43d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xbc>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b439c:	4646      	mov	r6, r8
   b439e:	46ca      	mov	sl, r9
   b43a0:	2e00      	cmp	r6, #0
   b43a2:	dd08      	ble.n	b43b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xa2>
		  }
	      }
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
	  }
#endif
	this->_M_assign(__str);
   b43a4:	4629      	mov	r1, r5
   b43a6:	4650      	mov	r0, sl
   b43a8:	f005 ff50 	bl	ba24c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b43ac:	3518      	adds	r5, #24
	      ++__result;
   b43ae:	f10a 0a18 	add.w	sl, sl, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b43b2:	3e01      	subs	r6, #1
   b43b4:	e7f4      	b.n	b43a0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x8c>
   b43b6:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   b43ba:	2518      	movs	r5, #24
      : _M_current(__i) { }
   b43bc:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b43be:	fb05 9508 	mla	r5, r5, r8, r9
	  for (; __first != __last; ++__first)
   b43c2:	42ae      	cmp	r6, r5
   b43c4:	d0e0      	beq.n	b4388 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
      { _M_dispose(); }
   b43c6:	4628      	mov	r0, r5
   b43c8:	f005 ff22 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b43cc:	3518      	adds	r5, #24
      {
	++_M_current;
	return *this;
   b43ce:	e7f8      	b.n	b43c2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xae>
   b43d0:	10f6      	asrs	r6, r6, #3
   b43d2:	4356      	muls	r6, r2
   b43d4:	2e00      	cmp	r6, #0
   b43d6:	dd08      	ble.n	b43ea <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xd6>
	this->_M_assign(__str);
   b43d8:	4629      	mov	r1, r5
   b43da:	4648      	mov	r0, r9
   b43dc:	f005 ff36 	bl	ba24c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b43e0:	3518      	adds	r5, #24
	      ++__result;
   b43e2:	f109 0918 	add.w	r9, r9, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b43e6:	3e01      	subs	r6, #1
   b43e8:	e7f4      	b.n	b43d4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xc0>
   b43ea:	e9d4 5600 	ldrd	r5, r6, [r4]
   b43ee:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43f0:	f8da 5000 	ldr.w	r5, [sl]
					  __x._M_impl._M_finish,
   b43f4:	f8da 8004 	ldr.w	r8, [sl, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43f8:	440d      	add	r5, r1
   b43fa:	45a8      	cmp	r8, r5
   b43fc:	d0c4      	beq.n	b4388 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b43fe:	b11e      	cbz	r6, b4408 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xf4>
   b4400:	4629      	mov	r1, r5
   b4402:	4630      	mov	r0, r6
   b4404:	f7ff fef8 	bl	b41f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4408:	3518      	adds	r5, #24
   b440a:	3618      	adds	r6, #24
   b440c:	e7f5      	b.n	b43fa <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xe6>
   b440e:	bf00      	nop
   b4410:	aaaaaaab 	.word	0xaaaaaaab

000b4414 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4414:	b40e      	push	{r1, r2, r3}
   b4416:	b503      	push	{r0, r1, lr}
   b4418:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b441a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b441c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4420:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4422:	f004 ffe0 	bl	b93e6 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4426:	b002      	add	sp, #8
   b4428:	f85d eb04 	ldr.w	lr, [sp], #4
   b442c:	b003      	add	sp, #12
   b442e:	4770      	bx	lr

000b4430 <_Z16randomizeAddressv>:
    Serial.println();
  }
}

//clears up conflicts with multiple i2c slaves having the same address
void randomizeAddress(){
   b4430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while(slaveCount != slaveCountExpected){
   b4434:	4da0      	ldr	r5, [pc, #640]	; (b46b8 <_Z16randomizeAddressv+0x288>)
   b4436:	f8df 82a4 	ldr.w	r8, [pc, #676]	; b46dc <_Z16randomizeAddressv+0x2ac>
void randomizeAddress(){
   b443a:	b08d      	sub	sp, #52	; 0x34
  while(slaveCount != slaveCountExpected){
   b443c:	682a      	ldr	r2, [r5, #0]
   b443e:	f8d8 3000 	ldr.w	r3, [r8]
   b4442:	429a      	cmp	r2, r3
   b4444:	f000 80ff 	beq.w	b4646 <_Z16randomizeAddressv+0x216>
    slaveCount = 0;
   b4448:	2300      	movs	r3, #0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b444a:	f8df 9294 	ldr.w	r9, [pc, #660]	; b46e0 <_Z16randomizeAddressv+0x2b0>
   b444e:	f8df a294 	ldr.w	sl, [pc, #660]	; b46e4 <_Z16randomizeAddressv+0x2b4>
      if(Wire.available() > 0){
        Serial.println("transmission recieved from: " + String(i));

        slaveCount++;

        String inputBuffer = "";
   b4452:	4f9a      	ldr	r7, [pc, #616]	; (b46bc <_Z16randomizeAddressv+0x28c>)
    slaveCount = 0;
   b4454:	602b      	str	r3, [r5, #0]
    for(int i = 8; i <= 119; i++){
   b4456:	2408      	movs	r4, #8
      Serial.println("\nrequest code 1, address: " + String(i));
   b4458:	f005 fcee 	bl	b9e38 <_Z16_fetch_usbserialv>
   b445c:	4649      	mov	r1, r9
   b445e:	4606      	mov	r6, r0
   b4460:	a808      	add	r0, sp, #32
   b4462:	f005 f842 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
   b4466:	220a      	movs	r2, #10
   b4468:	4621      	mov	r1, r4
   b446a:	a804      	add	r0, sp, #16
   b446c:	f005 f872 	bl	b9554 <_ZN6StringC1Eih>
   b4470:	a904      	add	r1, sp, #16
   b4472:	a808      	add	r0, sp, #32
   b4474:	f005 f8a9 	bl	b95ca <_ZplRK15StringSumHelperRK6String>
   b4478:	6801      	ldr	r1, [r0, #0]
   b447a:	4630      	mov	r0, r6
   b447c:	f004 ff8b 	bl	b9396 <_ZN5Print7printlnEPKc>
   b4480:	a804      	add	r0, sp, #16
   b4482:	f004 ffe7 	bl	b9454 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4486:	a808      	add	r0, sp, #32
   b4488:	f004 ffe4 	bl	b9454 <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   b448c:	f005 fe22 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b4490:	4621      	mov	r1, r4
   b4492:	f004 fdf3 	bl	b907c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   b4496:	f005 fe1d 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b449a:	2131      	movs	r1, #49	; 0x31
   b449c:	f7ff fed2 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b44a0:	fa5f fb84 	uxtb.w	fp, r4
   b44a4:	f005 fe16 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b44a8:	f004 fdef 	bl	b908a <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   b44ac:	f005 fe12 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b44b0:	2218      	movs	r2, #24
   b44b2:	4659      	mov	r1, fp
   b44b4:	f004 fddb 	bl	b906e <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   b44b8:	f005 fe0c 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b44bc:	6803      	ldr	r3, [r0, #0]
   b44be:	691b      	ldr	r3, [r3, #16]
   b44c0:	4798      	blx	r3
   b44c2:	2800      	cmp	r0, #0
   b44c4:	f340 80ba 	ble.w	b463c <_Z16randomizeAddressv+0x20c>
        Serial.println("transmission recieved from: " + String(i));
   b44c8:	f005 fcb6 	bl	b9e38 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b44cc:	4651      	mov	r1, sl
   b44ce:	4606      	mov	r6, r0
   b44d0:	a808      	add	r0, sp, #32
   b44d2:	f005 f80a 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
   b44d6:	220a      	movs	r2, #10
   b44d8:	4621      	mov	r1, r4
   b44da:	a804      	add	r0, sp, #16
   b44dc:	f005 f83a 	bl	b9554 <_ZN6StringC1Eih>
   b44e0:	a904      	add	r1, sp, #16
   b44e2:	a808      	add	r0, sp, #32
   b44e4:	f005 f871 	bl	b95ca <_ZplRK15StringSumHelperRK6String>
   b44e8:	6801      	ldr	r1, [r0, #0]
   b44ea:	4630      	mov	r0, r6
   b44ec:	f004 ff53 	bl	b9396 <_ZN5Print7printlnEPKc>
   b44f0:	a804      	add	r0, sp, #16
   b44f2:	f004 ffaf 	bl	b9454 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b44f6:	a808      	add	r0, sp, #32
   b44f8:	f004 ffac 	bl	b9454 <_ZN6StringD1Ev>
        slaveCount++;
   b44fc:	682b      	ldr	r3, [r5, #0]
        String inputBuffer = "";
   b44fe:	4639      	mov	r1, r7
        slaveCount++;
   b4500:	3301      	adds	r3, #1
        String inputBuffer = "";
   b4502:	4668      	mov	r0, sp
        slaveCount++;
   b4504:	602b      	str	r3, [r5, #0]
        String inputBuffer = "";
   b4506:	f004 fff0 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
   b450a:	2618      	movs	r6, #24
        char c;
        for(int j = 0; j < 24; j++){
          c = Wire.read();
   b450c:	f005 fde2 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b4510:	6803      	ldr	r3, [r0, #0]
   b4512:	695b      	ldr	r3, [r3, #20]
   b4514:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b4516:	b2c1      	uxtb	r1, r0
   b4518:	4668      	mov	r0, sp
   b451a:	f005 f849 	bl	b95b0 <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   b451e:	3e01      	subs	r6, #1
   b4520:	d1f4      	bne.n	b450c <_Z16randomizeAddressv+0xdc>
          inputBuffer += c;
        }
        Wire.beginTransmission(i);
   b4522:	f005 fdd7 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b4526:	4621      	mov	r1, r4
   b4528:	f004 fda8 	bl	b907c <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   b452c:	f005 fdd2 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b4530:	9900      	ldr	r1, [sp, #0]
   b4532:	f7ff fe8b 	bl	b424c <_ZN5Print5writeEPKc.isra.0>
        Serial.println("device id: " + inputBuffer);
   b4536:	f005 fc7f 	bl	b9e38 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b453a:	4961      	ldr	r1, [pc, #388]	; (b46c0 <_Z16randomizeAddressv+0x290>)
   b453c:	4606      	mov	r6, r0
   b453e:	a808      	add	r0, sp, #32
   b4540:	f004 ffd3 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
   b4544:	4669      	mov	r1, sp
   b4546:	a808      	add	r0, sp, #32
   b4548:	f005 f83f 	bl	b95ca <_ZplRK15StringSumHelperRK6String>
   b454c:	6801      	ldr	r1, [r0, #0]
   b454e:	4630      	mov	r0, r6
   b4550:	f004 ff21 	bl	b9396 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4554:	a808      	add	r0, sp, #32
   b4556:	f004 ff7d 	bl	b9454 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b455a:	f005 fdbb 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b455e:	f004 fd94 	bl	b908a <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   b4562:	f005 fc69 	bl	b9e38 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4566:	4957      	ldr	r1, [pc, #348]	; (b46c4 <_Z16randomizeAddressv+0x294>)
   b4568:	4606      	mov	r6, r0
   b456a:	a808      	add	r0, sp, #32
   b456c:	f004 ffbd 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
   b4570:	220a      	movs	r2, #10
   b4572:	4621      	mov	r1, r4
   b4574:	a804      	add	r0, sp, #16
   b4576:	f004 ffed 	bl	b9554 <_ZN6StringC1Eih>
   b457a:	a904      	add	r1, sp, #16
   b457c:	a808      	add	r0, sp, #32
   b457e:	f005 f824 	bl	b95ca <_ZplRK15StringSumHelperRK6String>
   b4582:	6801      	ldr	r1, [r0, #0]
   b4584:	4630      	mov	r0, r6
   b4586:	f004 ff06 	bl	b9396 <_ZN5Print7printlnEPKc>
   b458a:	a804      	add	r0, sp, #16
   b458c:	f004 ff62 	bl	b9454 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4590:	a808      	add	r0, sp, #32
   b4592:	f004 ff5f 	bl	b9454 <_ZN6StringD1Ev>

        Wire.beginTransmission(i);
   b4596:	f005 fd9d 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b459a:	4621      	mov	r1, r4
   b459c:	f004 fd6e 	bl	b907c <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   b45a0:	f005 fd98 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b45a4:	2132      	movs	r1, #50	; 0x32
   b45a6:	f7ff fe4d 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b45aa:	f005 fd93 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b45ae:	f004 fd6c 	bl	b908a <_ZN7TwoWire15endTransmissionEv>

        Serial.println("request code 2, address: " + String(i));
   b45b2:	f005 fc41 	bl	b9e38 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b45b6:	4944      	ldr	r1, [pc, #272]	; (b46c8 <_Z16randomizeAddressv+0x298>)
   b45b8:	4606      	mov	r6, r0
   b45ba:	a808      	add	r0, sp, #32
   b45bc:	f004 ff95 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
   b45c0:	220a      	movs	r2, #10
   b45c2:	4621      	mov	r1, r4
   b45c4:	a804      	add	r0, sp, #16
   b45c6:	f004 ffc5 	bl	b9554 <_ZN6StringC1Eih>
   b45ca:	a904      	add	r1, sp, #16
   b45cc:	a808      	add	r0, sp, #32
   b45ce:	f004 fffc 	bl	b95ca <_ZplRK15StringSumHelperRK6String>
   b45d2:	6801      	ldr	r1, [r0, #0]
   b45d4:	4630      	mov	r0, r6
   b45d6:	f004 fede 	bl	b9396 <_ZN5Print7printlnEPKc>
   b45da:	a804      	add	r0, sp, #16
   b45dc:	f004 ff3a 	bl	b9454 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45e0:	a808      	add	r0, sp, #32
   b45e2:	f004 ff37 	bl	b9454 <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   b45e6:	f005 fd75 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b45ea:	2204      	movs	r2, #4
   b45ec:	4659      	mov	r1, fp
   b45ee:	f004 fd3e 	bl	b906e <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   b45f2:	4639      	mov	r1, r7
   b45f4:	4668      	mov	r0, sp
   b45f6:	f004 ff9b 	bl	b9530 <_ZN6StringaSEPKc>
   b45fa:	2604      	movs	r6, #4
        for(int j = 0; j < 4; j++){
          inputBuffer += (char)Wire.read();
   b45fc:	f005 fd6a 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b4600:	6803      	ldr	r3, [r0, #0]
   b4602:	695b      	ldr	r3, [r3, #20]
   b4604:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b4606:	b2c1      	uxtb	r1, r0
   b4608:	4668      	mov	r0, sp
   b460a:	f004 ffd1 	bl	b95b0 <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   b460e:	3e01      	subs	r6, #1
   b4610:	d1f4      	bne.n	b45fc <_Z16randomizeAddressv+0x1cc>
        }
        
        Serial.println("conflict verification: " + inputBuffer);
   b4612:	f005 fc11 	bl	b9e38 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4616:	492d      	ldr	r1, [pc, #180]	; (b46cc <_Z16randomizeAddressv+0x29c>)
   b4618:	4606      	mov	r6, r0
   b461a:	a808      	add	r0, sp, #32
   b461c:	f004 ff65 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
   b4620:	4669      	mov	r1, sp
   b4622:	a808      	add	r0, sp, #32
   b4624:	f004 ffd1 	bl	b95ca <_ZplRK15StringSumHelperRK6String>
   b4628:	6801      	ldr	r1, [r0, #0]
   b462a:	4630      	mov	r0, r6
   b462c:	f004 feb3 	bl	b9396 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4630:	a808      	add	r0, sp, #32
   b4632:	f004 ff0f 	bl	b9454 <_ZN6StringD1Ev>
        String inputBuffer = "";
   b4636:	4668      	mov	r0, sp
   b4638:	f004 ff0c 	bl	b9454 <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   b463c:	3401      	adds	r4, #1
   b463e:	2c78      	cmp	r4, #120	; 0x78
   b4640:	f47f af0a 	bne.w	b4458 <_Z16randomizeAddressv+0x28>
   b4644:	e6fa      	b.n	b443c <_Z16randomizeAddressv+0xc>
      }
    }
  }

  Serial.println("\nConnected to: ");
   b4646:	f005 fbf7 	bl	b9e38 <_Z16_fetch_usbserialv>
   b464a:	4921      	ldr	r1, [pc, #132]	; (b46d0 <_Z16randomizeAddressv+0x2a0>)
    Wire.endTransmission();

    Wire.requestFrom(i, 24);
    if(Wire.available() > 0){
      Serial.print(i);
      Serial.print(", ");
   b464c:	4e21      	ldr	r6, [pc, #132]	; (b46d4 <_Z16randomizeAddressv+0x2a4>)
	return *(this->_M_impl._M_start + __n);
   b464e:	4f22      	ldr	r7, [pc, #136]	; (b46d8 <_Z16randomizeAddressv+0x2a8>)
  Serial.println("\nConnected to: ");
   b4650:	f004 fea1 	bl	b9396 <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   b4654:	2408      	movs	r4, #8
  int count = 0;
   b4656:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   b4658:	f005 fd3c 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b465c:	4621      	mov	r1, r4
   b465e:	f004 fd0d 	bl	b907c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   b4662:	f005 fd37 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b4666:	2131      	movs	r1, #49	; 0x31
   b4668:	f7ff fdec 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b466c:	f005 fd32 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b4670:	f004 fd0b 	bl	b908a <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   b4674:	f005 fd2e 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b4678:	2218      	movs	r2, #24
   b467a:	b2e1      	uxtb	r1, r4
   b467c:	f004 fcf7 	bl	b906e <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   b4680:	f005 fd28 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b4684:	6803      	ldr	r3, [r0, #0]
   b4686:	691b      	ldr	r3, [r3, #16]
   b4688:	4798      	blx	r3
   b468a:	2800      	cmp	r0, #0
   b468c:	dd0e      	ble.n	b46ac <_Z16randomizeAddressv+0x27c>
      Serial.print(i);
   b468e:	f005 fbd3 	bl	b9e38 <_Z16_fetch_usbserialv>
   b4692:	220a      	movs	r2, #10
   b4694:	4621      	mov	r1, r4
   b4696:	f7ff fd8b 	bl	b41b0 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
      Serial.print(", ");
   b469a:	f005 fbcd 	bl	b9e38 <_Z16_fetch_usbserialv>
   b469e:	4631      	mov	r1, r6
   b46a0:	f004 fe66 	bl	b9370 <_ZN5Print5printEPKc>

      addressArr[count++] = i;
   b46a4:	683b      	ldr	r3, [r7, #0]
   b46a6:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
   b46aa:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   b46ac:	3401      	adds	r4, #1
   b46ae:	2c78      	cmp	r4, #120	; 0x78
   b46b0:	d1d2      	bne.n	b4658 <_Z16randomizeAddressv+0x228>
  //         greenLineAdr[1] = sequenceArr[2 * i + 1];
  //       }
  //     }
  //   }
  // }
}
   b46b2:	b00d      	add	sp, #52	; 0x34
   b46b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b46b8:	2003e6a4 	.word	0x2003e6a4
   b46bc:	000bd6e6 	.word	0x000bd6e6
   b46c0:	000bd336 	.word	0x000bd336
   b46c4:	000bd342 	.word	0x000bd342
   b46c8:	000bd359 	.word	0x000bd359
   b46cc:	000bd373 	.word	0x000bd373
   b46d0:	000bd38b 	.word	0x000bd38b
   b46d4:	000bd4ef 	.word	0x000bd4ef
   b46d8:	2003552c 	.word	0x2003552c
   b46dc:	200352f0 	.word	0x200352f0
   b46e0:	000bd2fe 	.word	0x000bd2fe
   b46e4:	000bd319 	.word	0x000bd319

000b46e8 <_Z17acquireWireBufferv>:
    }
  }
  bleCount++;
}

hal_i2c_config_t acquireWireBuffer() {
   b46e8:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b46ea:	f44f 7500 	mov.w	r5, #512	; 0x200
   b46ee:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b46f0:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b46f2:	6003      	str	r3, [r0, #0]
   b46f4:	6085      	str	r5, [r0, #8]
   b46f6:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b46f8:	4905      	ldr	r1, [pc, #20]	; (b4710 <_Z17acquireWireBufferv+0x28>)
   b46fa:	4628      	mov	r0, r5
   b46fc:	f005 fd4e 	bl	ba19c <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4700:	4903      	ldr	r1, [pc, #12]	; (b4710 <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b4702:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4704:	4628      	mov	r0, r5
   b4706:	f005 fd49 	bl	ba19c <_ZnajRKSt9nothrow_t>
    };
   b470a:	60e0      	str	r0, [r4, #12]
    return config;
   b470c:	4620      	mov	r0, r4
   b470e:	bd38      	pop	{r3, r4, r5, pc}
   b4710:	000bdaec 	.word	0x000bdaec

000b4714 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4714:	b510      	push	{r4, lr}
   b4716:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4718:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b471a:	b118      	cbz	r0, b4724 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b471c:	68a1      	ldr	r1, [r4, #8]
   b471e:	1a09      	subs	r1, r1, r0
   b4720:	f7ff fcbf 	bl	b40a2 <_ZdlPvj>
      }
   b4724:	4620      	mov	r0, r4
   b4726:	bd10      	pop	{r4, pc}

000b4728 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4728:	b510      	push	{r4, lr}
   b472a:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b472c:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b472e:	b118      	cbz	r0, b4738 <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4730:	68a1      	ldr	r1, [r4, #8]
   b4732:	1a09      	subs	r1, r1, r0
   b4734:	f7ff fcb5 	bl	b40a2 <_ZdlPvj>
      }
   b4738:	4620      	mov	r0, r4
   b473a:	bd10      	pop	{r4, pc}

000b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b473c:	b510      	push	{r4, lr}
   b473e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4740:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4742:	b118      	cbz	r0, b474c <_ZNSt12_Vector_baseIiSaIiEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4744:	68a1      	ldr	r1, [r4, #8]
   b4746:	1a09      	subs	r1, r1, r0
   b4748:	f7ff fcab 	bl	b40a2 <_ZdlPvj>
      }
   b474c:	4620      	mov	r0, r4
   b474e:	bd10      	pop	{r4, pc}

000b4750 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b4750:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4752:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b4756:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   b4758:	42ae      	cmp	r6, r5
   b475a:	d004      	beq.n	b4766 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x16>
      { _M_dispose(); }
   b475c:	4628      	mov	r0, r5
   b475e:	f005 fd57 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4762:	3518      	adds	r5, #24
   b4764:	e7f8      	b.n	b4758 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b4766:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4768:	b118      	cbz	r0, b4772 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b476a:	68a1      	ldr	r1, [r4, #8]
   b476c:	1a09      	subs	r1, r1, r0
   b476e:	f7ff fc98 	bl	b40a2 <_ZdlPvj>
      }
   b4772:	4620      	mov	r0, r4
   b4774:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4778 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>:

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4778:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      vector(size_type __n, const value_type& __value,
   b477c:	b570      	push	{r4, r5, r6, lr}
   b477e:	4604      	mov	r4, r0
   b4780:	460d      	mov	r5, r1
   b4782:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4784:	d302      	bcc.n	b478c <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x14>
	  __throw_length_error(
   b4786:	480c      	ldr	r0, [pc, #48]	; (b47b8 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x40>)
   b4788:	f005 fd10 	bl	ba1ac <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b478c:	2300      	movs	r3, #0
   b478e:	e9c0 3300 	strd	r3, r3, [r0]
   b4792:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4794:	4608      	mov	r0, r1
   b4796:	f7ff fcf1 	bl	b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b479a:	eb00 0385 	add.w	r3, r0, r5, lsl #2
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b479e:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47a2:	60a3      	str	r3, [r4, #8]
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   b47a4:	b12d      	cbz	r5, b47b2 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   b47a6:	6832      	ldr	r2, [r6, #0]
      for (; __first != __last; ++__first)
   b47a8:	4283      	cmp	r3, r0
   b47aa:	d002      	beq.n	b47b2 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
	*__first = __tmp;
   b47ac:	f840 2b04 	str.w	r2, [r0], #4
      for (; __first != __last; ++__first)
   b47b0:	e7fa      	b.n	b47a8 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x30>
	this->_M_impl._M_finish =
   b47b2:	6060      	str	r0, [r4, #4]
      { _M_fill_initialize(__n, __value); }
   b47b4:	4620      	mov	r0, r4
   b47b6:	bd70      	pop	{r4, r5, r6, pc}
   b47b8:	000bd39b 	.word	0x000bd39b

000b47bc <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   b47bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47c0:	2400      	movs	r4, #0
      vector(initializer_list<value_type> __l,
   b47c2:	ab02      	add	r3, sp, #8
   b47c4:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47c8:	e9c0 4400 	strd	r4, r4, [r0]
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   b47cc:	4613      	mov	r3, r2
      vector(initializer_list<value_type> __l,
   b47ce:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47d0:	6084      	str	r4, [r0, #8]
   b47d2:	00d7      	lsls	r7, r2, #3
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b47d4:	f342 001c 	sbfx	r0, r2, #0, #29
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b47d8:	4a10      	ldr	r2, [pc, #64]	; (b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x60>)
   b47da:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   b47de:	4688      	mov	r8, r1
   b47e0:	d202      	bcs.n	b47e8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x2c>
	  __throw_length_error(
   b47e2:	480f      	ldr	r0, [pc, #60]	; (b4820 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x64>)
   b47e4:	f005 fce2 	bl	ba1ac <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b47e8:	f7ff fcd5 	bl	b4196 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47ec:	19c6      	adds	r6, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b47ee:	4602      	mov	r2, r0
   b47f0:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47f2:	60ae      	str	r6, [r5, #8]
   b47f4:	4623      	mov	r3, r4
   b47f6:	429f      	cmp	r7, r3
   b47f8:	d00b      	beq.n	b4812 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x56>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b47fa:	18d4      	adds	r4, r2, r3
   b47fc:	bf1c      	itt	ne
   b47fe:	eb08 0103 	addne.w	r1, r8, r3
   b4802:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b4806:	f103 0308 	add.w	r3, r3, #8
   b480a:	bf18      	it	ne
   b480c:	e9c4 0100 	strdne	r0, r1, [r4]
   b4810:	e7f1      	b.n	b47f6 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x3a>
      }
   b4812:	4628      	mov	r0, r5
	  this->_M_impl._M_finish =
   b4814:	606e      	str	r6, [r5, #4]
      }
   b4816:	b002      	add	sp, #8
   b4818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b481c:	7ffffff8 	.word	0x7ffffff8
   b4820:	000bd39b 	.word	0x000bd39b

000b4824 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>:
      vector(initializer_list<value_type> __l,
   b4824:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4828:	ab02      	add	r3, sp, #8
   b482a:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b482e:	2300      	movs	r3, #0
   b4830:	e9c0 3300 	strd	r3, r3, [r0]
   b4834:	6083      	str	r3, [r0, #8]
   b4836:	4616      	mov	r6, r2
   b4838:	2318      	movs	r3, #24
   b483a:	435e      	muls	r6, r3
   b483c:	4b10      	ldr	r3, [pc, #64]	; (b4880 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x5c>)
      vector(initializer_list<value_type> __l,
   b483e:	4604      	mov	r4, r0
   b4840:	10f0      	asrs	r0, r6, #3
   b4842:	4358      	muls	r0, r3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4844:	4b0f      	ldr	r3, [pc, #60]	; (b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x60>)
   b4846:	429e      	cmp	r6, r3
   b4848:	460f      	mov	r7, r1
   b484a:	eb01 0806 	add.w	r8, r1, r6
   b484e:	d902      	bls.n	b4856 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x32>
	  __throw_length_error(
   b4850:	480d      	ldr	r0, [pc, #52]	; (b4888 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x64>)
   b4852:	f005 fcab 	bl	ba1ac <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4856:	f7ff fc7f 	bl	b4158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b485a:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b485c:	4605      	mov	r5, r0
   b485e:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4860:	60a6      	str	r6, [r4, #8]
   b4862:	45b8      	cmp	r8, r7
   b4864:	d007      	beq.n	b4876 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x52>
   b4866:	b11d      	cbz	r5, b4870 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x4c>
   b4868:	4639      	mov	r1, r7
   b486a:	4628      	mov	r0, r5
   b486c:	f7ff fcc4 	bl	b41f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4870:	3718      	adds	r7, #24
   b4872:	3518      	adds	r5, #24
   b4874:	e7f5      	b.n	b4862 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x3e>
      }
   b4876:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
   b4878:	6065      	str	r5, [r4, #4]
      }
   b487a:	b002      	add	sp, #8
   b487c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4880:	aaaaaaab 	.word	0xaaaaaaab
   b4884:	7ffffff8 	.word	0x7ffffff8
   b4888:	000bd39b 	.word	0x000bd39b

000b488c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b488e:	e9d1 3700 	ldrd	r3, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4892:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4894:	1aff      	subs	r7, r7, r3
      vector(const vector& __x)
   b4896:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4898:	e9c0 5500 	strd	r5, r5, [r0]
   b489c:	6085      	str	r5, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b489e:	10f8      	asrs	r0, r7, #3
      vector(const vector& __x)
   b48a0:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48a2:	f7ff fc78 	bl	b4196 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b48a6:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b48aa:	4407      	add	r7, r0
   b48ac:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b48ae:	e9d6 7600 	ldrd	r7, r6, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48b2:	4602      	mov	r2, r0
   b48b4:	1bf6      	subs	r6, r6, r7
      : _M_current(__i) { }
   b48b6:	462b      	mov	r3, r5
   b48b8:	42b3      	cmp	r3, r6
   b48ba:	eb02 0503 	add.w	r5, r2, r3
   b48be:	d006      	beq.n	b48ce <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x42>
   b48c0:	b11d      	cbz	r5, b48ca <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x3e>
   b48c2:	18f9      	adds	r1, r7, r3
   b48c4:	c903      	ldmia	r1, {r0, r1}
   b48c6:	e885 0003 	stmia.w	r5, {r0, r1}
   b48ca:	3308      	adds	r3, #8
   b48cc:	e7f4      	b.n	b48b8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b48ce:	6065      	str	r5, [r4, #4]
      }
   b48d0:	4620      	mov	r0, r4
   b48d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
   b48d4:	b508      	push	{r3, lr}
      { return _M_string_length; }
   b48d6:	6842      	ldr	r2, [r0, #4]
	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
    { return (__lhs.size() == __rhs.size()
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b48d8:	684b      	ldr	r3, [r1, #4]
   b48da:	429a      	cmp	r2, r3
   b48dc:	d108      	bne.n	b48f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1c>
	if (__n == 0)
   b48de:	b14a      	cbz	r2, b48f4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x20>
	return __builtin_memcmp(__s1, __s2, __n);
   b48e0:	6809      	ldr	r1, [r1, #0]
   b48e2:	6800      	ldr	r0, [r0, #0]
   b48e4:	f006 fc34 	bl	bb150 <memcmp>
   b48e8:	fab0 f080 	clz	r0, r0
   b48ec:	0940      	lsrs	r0, r0, #5
						    __lhs.size())); }
   b48ee:	bd08      	pop	{r3, pc}
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b48f0:	2000      	movs	r0, #0
   b48f2:	e7fc      	b.n	b48ee <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>
   b48f4:	2001      	movs	r0, #1
   b48f6:	e7fa      	b.n	b48ee <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>

000b48f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b48f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b48fc:	b09b      	sub	sp, #108	; 0x6c
   b48fe:	460c      	mov	r4, r1
   b4900:	4606      	mov	r6, r0
  String inputBuffer = "";
   b4902:	499e      	ldr	r1, [pc, #632]	; (b4b7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x284>)
   b4904:	a803      	add	r0, sp, #12
   b4906:	f004 fdf0 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
  for(int i = 0; i < len - 1; i++){
   b490a:	2500      	movs	r5, #0
   b490c:	3c01      	subs	r4, #1
   b490e:	42ac      	cmp	r4, r5
   b4910:	d905      	bls.n	b491e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   b4912:	5d71      	ldrb	r1, [r6, r5]
   b4914:	a803      	add	r0, sp, #12
   b4916:	f004 fe4b 	bl	b95b0 <_ZN6String6concatEc>
   b491a:	3501      	adds	r5, #1
   b491c:	e7f7      	b.n	b490e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x16>
  switch(bleCount){
   b491e:	4c98      	ldr	r4, [pc, #608]	; (b4b80 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x288>)
  Serial.println(inputBuffer);
   b4920:	f005 fa8a 	bl	b9e38 <_Z16_fetch_usbserialv>
   b4924:	9903      	ldr	r1, [sp, #12]
   b4926:	f004 fd36 	bl	b9396 <_ZN5Print7printlnEPKc>
  switch(bleCount){
   b492a:	6822      	ldr	r2, [r4, #0]
   b492c:	b37a      	cbz	r2, b498e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x96>
   b492e:	2a01      	cmp	r2, #1
   b4930:	d03a      	beq.n	b49a8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4932:	4d94      	ldr	r5, [pc, #592]	; (b4b84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28c>)
   b4934:	f8df 927c 	ldr.w	r9, [pc, #636]	; b4bb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2bc>
   b4938:	e9d5 1300 	ldrd	r1, r3, [r5]
   b493c:	1a5b      	subs	r3, r3, r1
   b493e:	109b      	asrs	r3, r3, #2
      if(bleCount - 2 < railways.size()){
   b4940:	3a02      	subs	r2, #2
   b4942:	fb09 f303 	mul.w	r3, r9, r3
   b4946:	429a      	cmp	r2, r3
   b4948:	f080 80c2 	bcs.w	b4ad0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1d8>
            railwayIndex = i;
   b494c:	f8df 8268 	ldr.w	r8, [pc, #616]	; b4bb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c0>
        for(int i = 0; i < railways.size(); i++){
   b4950:	2600      	movs	r6, #0
      { return _M_dataplus._M_p; }
   b4952:	276c      	movs	r7, #108	; 0x6c
   b4954:	e9d5 2300 	ldrd	r2, r3, [r5]
   b4958:	1a9b      	subs	r3, r3, r2
   b495a:	109b      	asrs	r3, r3, #2
   b495c:	fb09 f303 	mul.w	r3, r9, r3
   b4960:	42b3      	cmp	r3, r6
   b4962:	d960      	bls.n	b4a26 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12e>
   b4964:	fb07 2206 	mla	r2, r7, r6, r2
          if(String(railways[i].name.c_str()) == inputBuffer){
   b4968:	a807      	add	r0, sp, #28
   b496a:	6b11      	ldr	r1, [r2, #48]	; 0x30
   b496c:	f004 fdbd 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4970:	a903      	add	r1, sp, #12
   b4972:	a807      	add	r0, sp, #28
   b4974:	f004 fe4a 	bl	b960c <_ZNK6String6equalsERKS_>
   b4978:	4682      	mov	sl, r0
   b497a:	a807      	add	r0, sp, #28
   b497c:	f004 fd6a 	bl	b9454 <_ZN6StringD1Ev>
   b4980:	f1ba 0f00 	cmp.w	sl, #0
   b4984:	d001      	beq.n	b498a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x92>
            railwayIndex = i;
   b4986:	f8c8 6000 	str.w	r6, [r8]
        for(int i = 0; i < railways.size(); i++){
   b498a:	3601      	adds	r6, #1
   b498c:	e7e2      	b.n	b4954 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c>
      SSID = inputBuffer;
   b498e:	487e      	ldr	r0, [pc, #504]	; (b4b88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x290>)
   b4990:	a903      	add	r1, sp, #12
   b4992:	f004 fdbe 	bl	b9512 <_ZN6StringaSERKS_>
  bleCount++;
   b4996:	6823      	ldr	r3, [r4, #0]
  String inputBuffer = "";
   b4998:	a803      	add	r0, sp, #12
  bleCount++;
   b499a:	3301      	adds	r3, #1
   b499c:	6023      	str	r3, [r4, #0]
  String inputBuffer = "";
   b499e:	f004 fd59 	bl	b9454 <_ZN6StringD1Ev>
}
   b49a2:	b01b      	add	sp, #108	; 0x6c
   b49a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      password = inputBuffer;
   b49a8:	4d78      	ldr	r5, [pc, #480]	; (b4b8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x294>)
   b49aa:	a903      	add	r1, sp, #12
   b49ac:	4628      	mov	r0, r5
   b49ae:	f004 fdb0 	bl	b9512 <_ZN6StringaSERKS_>
	const char * c_str() const { return buffer; }
   b49b2:	4b75      	ldr	r3, [pc, #468]	; (b4b88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x290>)
   b49b4:	682e      	ldr	r6, [r5, #0]
   b49b6:	f8d3 8000 	ldr.w	r8, [r3]
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b49ba:	f1b8 0f00 	cmp.w	r8, #0
   b49be:	d02e      	beq.n	b4a1e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x126>
   b49c0:	4640      	mov	r0, r8
   b49c2:	f006 fc45 	bl	bb250 <strlen>
   b49c6:	4607      	mov	r7, r0
   b49c8:	b35e      	cbz	r6, b4a22 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12a>
   b49ca:	4630      	mov	r0, r6
   b49cc:	f006 fc40 	bl	bb250 <strlen>
   b49d0:	4605      	mov	r5, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b49d2:	2238      	movs	r2, #56	; 0x38
   b49d4:	2100      	movs	r1, #0
   b49d6:	a80c      	add	r0, sp, #48	; 0x30
   b49d8:	f006 fbf2 	bl	bb1c0 <memset>
        creds.size = sizeof(creds);
   b49dc:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b49de:	e9cd 3807 	strd	r3, r8, [sp, #28]
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b49e2:	486b      	ldr	r0, [pc, #428]	; (b4b90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x298>)
        creds.password_len = passwordLen;
   b49e4:	950b      	str	r5, [sp, #44]	; 0x2c
        creds.security = WLanSecurityType(security);
   b49e6:	2303      	movs	r3, #3
   b49e8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b49ec:	2300      	movs	r3, #0
   b49ee:	aa07      	add	r2, sp, #28
   b49f0:	4619      	mov	r1, r3
   b49f2:	6840      	ldr	r0, [r0, #4]
        creds.password = password;
   b49f4:	e9cd 7609 	strd	r7, r6, [sp, #36]	; 0x24
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b49f8:	f003 f8d0 	bl	b7b9c <network_set_credentials>
      Wire.beginTransmission(addressArr[0]);
   b49fc:	f005 fb6a 	bl	ba0d4 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b4a00:	4b64      	ldr	r3, [pc, #400]	; (b4b94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x29c>)
   b4a02:	681b      	ldr	r3, [r3, #0]
   b4a04:	6819      	ldr	r1, [r3, #0]
   b4a06:	f004 fb39 	bl	b907c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('3');
   b4a0a:	f005 fb63 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b4a0e:	2133      	movs	r1, #51	; 0x33
   b4a10:	f7ff fc18 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4a14:	f005 fb5e 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b4a18:	f004 fb37 	bl	b908a <_ZN7TwoWire15endTransmissionEv>
      break;
   b4a1c:	e7bb      	b.n	b4996 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9e>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4a1e:	4647      	mov	r7, r8
   b4a20:	e7d2      	b.n	b49c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd0>
   b4a22:	4635      	mov	r5, r6
   b4a24:	e7d5      	b.n	b49d2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xda>
        if(railwayIndex == -1){
   b4a26:	f8df 8190 	ldr.w	r8, [pc, #400]	; b4bb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c0>
   b4a2a:	f8d8 3000 	ldr.w	r3, [r8]
   b4a2e:	3301      	adds	r3, #1
   b4a30:	d103      	bne.n	b4a3a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x142>
          bleCount--;
   b4a32:	6823      	ldr	r3, [r4, #0]
   b4a34:	3b01      	subs	r3, #1
   b4a36:	6023      	str	r3, [r4, #0]
          break;
   b4a38:	e7ad      	b.n	b4996 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9e>
   b4a3a:	f8df b180 	ldr.w	fp, [pc, #384]	; b4bbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c4>
        for(int i = 0; i < 2; i++){
   b4a3e:	2600      	movs	r6, #0
   b4a40:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
          if(railways[railwayIndex].outputs[i].size() == 0 || railways[railwayIndex].name == purpleLine.name){
   b4a44:	f8d8 7000 	ldr.w	r7, [r8]
   b4a48:	6828      	ldr	r0, [r5, #0]
   b4a4a:	f8db 2000 	ldr.w	r2, [fp]
   b4a4e:	fb0a 0007 	mla	r0, sl, r7, r0
   b4a52:	230c      	movs	r3, #12
   b4a54:	fb03 f106 	mul.w	r1, r3, r6
   b4a58:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b4a5a:	eb03 0e01 	add.w	lr, r3, r1
   b4a5e:	585b      	ldr	r3, [r3, r1]
   b4a60:	f8de 1004 	ldr.w	r1, [lr, #4]
   b4a64:	428b      	cmp	r3, r1
            sequenceArr[2 * railwayIndex + i] = addressArr[bleCount - 2];
   b4a66:	eb06 0747 	add.w	r7, r6, r7, lsl #1
          if(railways[railwayIndex].outputs[i].size() == 0 || railways[railwayIndex].name == purpleLine.name){
   b4a6a:	d007      	beq.n	b4a7c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x184>
   b4a6c:	494a      	ldr	r1, [pc, #296]	; (b4b98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a0>)
   b4a6e:	9201      	str	r2, [sp, #4]
   b4a70:	3030      	adds	r0, #48	; 0x30
   b4a72:	f7ff ff2f 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b4a76:	9a01      	ldr	r2, [sp, #4]
   b4a78:	2800      	cmp	r0, #0
   b4a7a:	d04e      	beq.n	b4b1a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x222>
            sequenceArr[2 * railwayIndex + i] = 0;
   b4a7c:	2100      	movs	r1, #0
   b4a7e:	f842 1027 	str.w	r1, [r2, r7, lsl #2]
        for(int i = 0; i < 2; i++){
   b4a82:	2e00      	cmp	r6, #0
   b4a84:	d047      	beq.n	b4b16 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x21e>
        Wire.beginTransmission(addressArr[bleCount - 2]);
   b4a86:	f005 fb25 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b4a8a:	4e42      	ldr	r6, [pc, #264]	; (b4b94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x29c>)
   b4a8c:	6823      	ldr	r3, [r4, #0]
   b4a8e:	6832      	ldr	r2, [r6, #0]
   b4a90:	3b02      	subs	r3, #2
   b4a92:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b4a96:	f004 faf1 	bl	b907c <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('4');
   b4a9a:	f005 fb1b 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b4a9e:	2134      	movs	r1, #52	; 0x34
   b4aa0:	f7ff fbd0 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b4aa4:	f005 fb16 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b4aa8:	f004 faef 	bl	b908a <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(addressArr[bleCount - 1]);
   b4aac:	f005 fb12 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b4ab0:	6823      	ldr	r3, [r4, #0]
   b4ab2:	6832      	ldr	r2, [r6, #0]
   b4ab4:	3b01      	subs	r3, #1
   b4ab6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b4aba:	f004 fadf 	bl	b907c <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('3');
   b4abe:	f005 fb09 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b4ac2:	2133      	movs	r1, #51	; 0x33
   b4ac4:	f7ff fbbe 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b4ac8:	f005 fb04 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b4acc:	f004 fadd 	bl	b908a <_ZN7TwoWire15endTransmissionEv>
      if(bleCount - 2 == railways.size() - 1){
   b4ad0:	6823      	ldr	r3, [r4, #0]
   b4ad2:	1e9a      	subs	r2, r3, #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4ad4:	e9d5 1300 	ldrd	r1, r3, [r5]
   b4ad8:	1a5b      	subs	r3, r3, r1
   b4ada:	109b      	asrs	r3, r3, #2
   b4adc:	fb09 f903 	mul.w	r9, r9, r3
   b4ae0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   b4ae4:	454a      	cmp	r2, r9
   b4ae6:	f47f af56 	bne.w	b4996 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9e>
        Serial.println("BLE finished");
   b4aea:	f005 f9a5 	bl	b9e38 <_Z16_fetch_usbserialv>
   b4aee:	492b      	ldr	r1, [pc, #172]	; (b4b9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a4>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4af0:	4d27      	ldr	r5, [pc, #156]	; (b4b90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x298>)
   b4af2:	f004 fc50 	bl	b9396 <_ZN5Print7printlnEPKc>
        userInput = true;
   b4af6:	4b2a      	ldr	r3, [pc, #168]	; (b4ba0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a8>)
        network_on(*this, 0, 0, NULL);
   b4af8:	6868      	ldr	r0, [r5, #4]
   b4afa:	2201      	movs	r2, #1
   b4afc:	701a      	strb	r2, [r3, #0]
   b4afe:	2300      	movs	r3, #0
   b4b00:	461a      	mov	r2, r3
   b4b02:	4619      	mov	r1, r3
   b4b04:	f003 f822 	bl	b7b4c <network_on>
        network_connect(*this, flags, 0, NULL);
   b4b08:	2300      	movs	r3, #0
   b4b0a:	6868      	ldr	r0, [r5, #4]
   b4b0c:	461a      	mov	r2, r3
   b4b0e:	4619      	mov	r1, r3
   b4b10:	f002 fffc 	bl	b7b0c <network_connect>
    }
   b4b14:	e73f      	b.n	b4996 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9e>
   b4b16:	2601      	movs	r6, #1
   b4b18:	e794      	b.n	b4a44 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>
	return *(this->_M_impl._M_start + __n);
   b4b1a:	6821      	ldr	r1, [r4, #0]
            sequenceArr[2 * railwayIndex + i] = addressArr[bleCount - 2];
   b4b1c:	4b1d      	ldr	r3, [pc, #116]	; (b4b94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x29c>)
   b4b1e:	3902      	subs	r1, #2
   b4b20:	6818      	ldr	r0, [r3, #0]
   b4b22:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   b4b26:	f842 1027 	str.w	r1, [r2, r7, lsl #2]
   b4b2a:	682f      	ldr	r7, [r5, #0]
            if(railways[i].name == brownLine.name){
   b4b2c:	491d      	ldr	r1, [pc, #116]	; (b4ba4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ac>)
   b4b2e:	fb0a 7706 	mla	r7, sl, r6, r7
   b4b32:	3730      	adds	r7, #48	; 0x30
   b4b34:	4638      	mov	r0, r7
   b4b36:	f7ff fecd 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b4b3a:	b150      	cbz	r0, b4b52 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x25a>
            brownLineAdr = sequenceArr[2 * railwayIndex + i];
   b4b3c:	f8d8 2000 	ldr.w	r2, [r8]
   b4b40:	f8db 1000 	ldr.w	r1, [fp]
   b4b44:	4b18      	ldr	r3, [pc, #96]	; (b4ba8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>)
   b4b46:	eb06 0242 	add.w	r2, r6, r2, lsl #1
   b4b4a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   b4b4e:	601a      	str	r2, [r3, #0]
   b4b50:	e797      	b.n	b4a82 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18a>
            }else if(railways[i].name == greenLine.name){
   b4b52:	4916      	ldr	r1, [pc, #88]	; (b4bac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b4>)
   b4b54:	4638      	mov	r0, r7
   b4b56:	f7ff febd 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b4b5a:	2800      	cmp	r0, #0
   b4b5c:	d091      	beq.n	b4a82 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18a>
              greenLineAdr[0] = sequenceArr[2 * railwayIndex];
   b4b5e:	f8d8 2000 	ldr.w	r2, [r8]
   b4b62:	f8db 0000 	ldr.w	r0, [fp]
   b4b66:	4b12      	ldr	r3, [pc, #72]	; (b4bb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>)
   b4b68:	0052      	lsls	r2, r2, #1
   b4b6a:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
   b4b6e:	6019      	str	r1, [r3, #0]
   b4b70:	3201      	adds	r2, #1
              greenLineAdr[1] = sequenceArr[2 * railwayIndex + 1];
   b4b72:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   b4b76:	605a      	str	r2, [r3, #4]
   b4b78:	e783      	b.n	b4a82 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18a>
   b4b7a:	bf00      	nop
   b4b7c:	000bd6e6 	.word	0x000bd6e6
   b4b80:	20035538 	.word	0x20035538
   b4b84:	2003e5b8 	.word	0x2003e5b8
   b4b88:	200354d4 	.word	0x200354d4
   b4b8c:	2003e4d0 	.word	0x2003e4d0
   b4b90:	2003e718 	.word	0x2003e718
   b4b94:	2003552c 	.word	0x2003552c
   b4b98:	2003e57c 	.word	0x2003e57c
   b4b9c:	000bd3cc 	.word	0x000bd3cc
   b4ba0:	2003e6b0 	.word	0x2003e6b0
   b4ba4:	200355d8 	.word	0x200355d8
   b4ba8:	20035614 	.word	0x20035614
   b4bac:	20035648 	.word	0x20035648
   b4bb0:	20035684 	.word	0x20035684
   b4bb4:	684bda13 	.word	0x684bda13
   b4bb8:	200352ec 	.word	0x200352ec
   b4bbc:	2003e698 	.word	0x2003e698

000b4bc0 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4bc0:	2900      	cmp	r1, #0
      _M_create_storage(size_t __n)
   b4bc2:	b538      	push	{r3, r4, r5, lr}
   b4bc4:	4604      	mov	r4, r0
      _M_allocate(size_t __n)
   b4bc6:	ea4f 0581 	mov.w	r5, r1, lsl #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4bca:	d00c      	beq.n	b4be6 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x26>
	if (__n > this->_M_max_size())
   b4bcc:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   b4bd0:	d301      	bcc.n	b4bd6 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
   b4bd2:	f005 fae5 	bl	ba1a0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4bd6:	4628      	mov	r0, r5
   b4bd8:	f7ff fa5d 	bl	b4096 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4bdc:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4be0:	4428      	add	r0, r5
   b4be2:	60a0      	str	r0, [r4, #8]
      }
   b4be4:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4be6:	4608      	mov	r0, r1
   b4be8:	e7f8      	b.n	b4bdc <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x1c>

000b4bea <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4bea:	b538      	push	{r3, r4, r5, lr}
   b4bec:	4604      	mov	r4, r0
   b4bee:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b4bf0:	42ac      	cmp	r4, r5
   b4bf2:	d004      	beq.n	b4bfe <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x14>
      }
   b4bf4:	4620      	mov	r0, r4
   b4bf6:	f7ff fda1 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4bfa:	340c      	adds	r4, #12
   b4bfc:	e7f8      	b.n	b4bf0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x6>
	    std::_Destroy(std::__addressof(*__first));
	}
   b4bfe:	bd38      	pop	{r3, r4, r5, pc}

000b4c00 <_ZN7RailwayD1Ev>:
#include "Checkpoint.cpp"
#include <string>

//container for all data for each rail line
class Railway{
   b4c00:	b510      	push	{r4, lr}
   b4c02:	4604      	mov	r4, r0
   b4c04:	3048      	adds	r0, #72	; 0x48
   b4c06:	f7ff fda3 	bl	b4750 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b4c0a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b4c0e:	f005 faff 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   b4c12:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b4c16:	f7ff ffe8 	bl	b4bea <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	_M_deallocate(_M_impl._M_start,
   b4c1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b4c1c:	b118      	cbz	r0, b4c26 <_ZN7RailwayD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4c1e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	::operator delete(__p
   b4c20:	1a09      	subs	r1, r1, r0
   b4c22:	f7ff fa3e 	bl	b40a2 <_ZdlPvj>
      }
   b4c26:	f104 0018 	add.w	r0, r4, #24
   b4c2a:	f7ff fd87 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4c2e:	f104 000c 	add.w	r0, r4, #12
   b4c32:	f7ff fd79 	bl	b4728 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4c36:	4620      	mov	r0, r4
   b4c38:	f7ff fd6c 	bl	b4714 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b4c3c:	4620      	mov	r0, r4
   b4c3e:	bd10      	pop	{r4, pc}

000b4c40 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b4c40:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b4c42:	b510      	push	{r4, lr}
   b4c44:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b4c46:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b4c4a:	d005      	beq.n	b4c58 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4c4c:	4601      	mov	r1, r0
   b4c4e:	4622      	mov	r2, r4
   b4c50:	4618      	mov	r0, r3
   b4c52:	f006 fa9b 	bl	bb18c <memmove>
   b4c56:	4603      	mov	r3, r0
	}
   b4c58:	1918      	adds	r0, r3, r4
   b4c5a:	bd10      	pop	{r4, pc}

000b4c5c <_ZNSt6vectorIiSaIiEEC1ERKS1_>:
      vector(const vector& __x)
   b4c5c:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c5e:	e9d1 3600 	ldrd	r3, r6, [r1]
   b4c62:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4c64:	2300      	movs	r3, #0
      vector(const vector& __x)
   b4c66:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4c68:	e9c0 3300 	strd	r3, r3, [r0]
   b4c6c:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4c6e:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   b4c70:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4c72:	f7ff fa83 	bl	b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4c76:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4c7a:	4406      	add	r6, r0
   b4c7c:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4c7e:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
   b4c80:	e9d5 0100 	ldrd	r0, r1, [r5]
   b4c84:	f7ff ffdc 	bl	b4c40 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
   b4c88:	6060      	str	r0, [r4, #4]
      }
   b4c8a:	4620      	mov	r0, r4
   b4c8c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>:
      vector(initializer_list<value_type> __l,
   b4c90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b4c92:	ab04      	add	r3, sp, #16
   b4c94:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4c98:	2300      	movs	r3, #0
   b4c9a:	e9c0 3300 	strd	r3, r3, [r0]
   b4c9e:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b4ca0:	4604      	mov	r4, r0
   b4ca2:	4613      	mov	r3, r2
   b4ca4:	460e      	mov	r6, r1
   b4ca6:	0095      	lsls	r5, r2, #2
   b4ca8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b4cac:	f342 001d 	sbfx	r0, r2, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4cb0:	4a0a      	ldr	r2, [pc, #40]	; (b4cdc <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x4c>)
   b4cb2:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b4cb6:	d202      	bcs.n	b4cbe <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x2e>
	  __throw_length_error(
   b4cb8:	4809      	ldr	r0, [pc, #36]	; (b4ce0 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x50>)
   b4cba:	f005 fa77 	bl	ba1ac <_ZSt20__throw_length_errorPKc>
   b4cbe:	9101      	str	r1, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4cc0:	f7ff fa5c 	bl	b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4cc4:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4cc6:	4602      	mov	r2, r0
   b4cc8:	6020      	str	r0, [r4, #0]
   b4cca:	9901      	ldr	r1, [sp, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4ccc:	60a5      	str	r5, [r4, #8]
   b4cce:	4630      	mov	r0, r6
   b4cd0:	f7ff ffb6 	bl	b4c40 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
   b4cd4:	6060      	str	r0, [r4, #4]
      }
   b4cd6:	b004      	add	sp, #16
   b4cd8:	bd70      	pop	{r4, r5, r6, pc}
   b4cda:	bf00      	nop
   b4cdc:	7ffffffc 	.word	0x7ffffffc
   b4ce0:	000bd39b 	.word	0x000bd39b

000b4ce4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>:
      if (&__x != this)
   b4ce4:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b4ce6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4ce8:	4604      	mov	r4, r0
   b4cea:	460d      	mov	r5, r1
      if (&__x != this)
   b4cec:	d01d      	beq.n	b4d2a <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x46>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4cee:	e9d1 7100 	ldrd	r7, r1, [r1]
			 - this->_M_impl._M_start); }
   b4cf2:	6802      	ldr	r2, [r0, #0]
   b4cf4:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4cf6:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b4cf8:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b4cfa:	429e      	cmp	r6, r3
   b4cfc:	d917      	bls.n	b4d2e <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x4a>
	  pointer __result = this->_M_allocate(__n);
   b4cfe:	10b0      	asrs	r0, r6, #2
   b4d00:	9101      	str	r1, [sp, #4]
   b4d02:	f7ff fa3b 	bl	b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
   b4d06:	9901      	ldr	r1, [sp, #4]
   b4d08:	4602      	mov	r2, r0
   b4d0a:	4605      	mov	r5, r0
   b4d0c:	4638      	mov	r0, r7
   b4d0e:	f7ff ff97 	bl	b4c40 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4d12:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4d14:	b118      	cbz	r0, b4d1e <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x3a>
			    - this->_M_impl._M_start);
   b4d16:	68a1      	ldr	r1, [r4, #8]
   b4d18:	1a09      	subs	r1, r1, r0
   b4d1a:	f7ff f9c2 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4d1e:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4d20:	4435      	add	r5, r6
   b4d22:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4d24:	6823      	ldr	r3, [r4, #0]
   b4d26:	4433      	add	r3, r6
   b4d28:	6063      	str	r3, [r4, #4]
    }
   b4d2a:	b003      	add	sp, #12
   b4d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4d2e:	6843      	ldr	r3, [r0, #4]
   b4d30:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b4d32:	429e      	cmp	r6, r3
   b4d34:	d803      	bhi.n	b4d3e <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x5a>
   b4d36:	4638      	mov	r0, r7
   b4d38:	f7ff ff82 	bl	b4c40 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   b4d3c:	e7f2      	b.n	b4d24 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x40>
   b4d3e:	18f9      	adds	r1, r7, r3
   b4d40:	4638      	mov	r0, r7
   b4d42:	f7ff ff7d 	bl	b4c40 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
   b4d46:	e9d4 0200 	ldrd	r0, r2, [r4]
   b4d4a:	e9d5 3100 	ldrd	r3, r1, [r5]
   b4d4e:	1a10      	subs	r0, r2, r0
   b4d50:	4418      	add	r0, r3
   b4d52:	e7f1      	b.n	b4d38 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x54>

000b4d54 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b4d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4d58:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b4d5a:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4d5c:	480b      	ldr	r0, [pc, #44]	; (b4d8c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x38>)
   b4d5e:	10a4      	asrs	r4, r4, #2
   b4d60:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b4d62:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4d64:	4627      	mov	r7, r4
   b4d66:	4690      	mov	r8, r2
   b4d68:	2f00      	cmp	r7, #0
   b4d6a:	dd08      	ble.n	b4d7e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x2a>
	      *__result = *__first;
   b4d6c:	4629      	mov	r1, r5
   b4d6e:	4640      	mov	r0, r8
   b4d70:	f7ff ffb8 	bl	b4ce4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b4d74:	350c      	adds	r5, #12
	      ++__result;
   b4d76:	f108 080c 	add.w	r8, r8, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4d7a:	3f01      	subs	r7, #1
   b4d7c:	e7f4      	b.n	b4d68 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x14>
	  return __result;
   b4d7e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b4d82:	200c      	movs	r0, #12
   b4d84:	fb00 6004 	mla	r0, r0, r4, r6
   b4d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4d8c:	aaaaaaab 	.word	0xaaaaaaab

000b4d90 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>:
    std::vector<std::string> colors;
    int tripleIndex = -1;
    int loopIndex = -1;
    int lowerLoopBound, upperLoopBound, lowerGreenBound, upperGreenBound;

    Railway(std::vector<Checkpoint> checkpointInput, std::vector<int> scalerInput, std::vector<int> outputSize, std::string nameInput, std::vector<std::string> colorInput, std::vector<int> boundInput = {0, 0, 0, 0}){
   b4d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4d94:	2500      	movs	r5, #0
   b4d96:	4699      	mov	r9, r3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4d98:	f100 0338 	add.w	r3, r0, #56	; 0x38
      { _M_string_length = __length; }
   b4d9c:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   b4da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4da4:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
   b4da8:	4604      	mov	r4, r0
   b4daa:	e9c0 5500 	strd	r5, r5, [r0]
   b4dae:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b4db2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b4db6:	e9c0 5506 	strd	r5, r5, [r0, #24]
   b4dba:	e9c0 5508 	strd	r5, r5, [r0, #32]
   b4dbe:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
   b4dc2:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
   b4dc6:	b099      	sub	sp, #100	; 0x64
      { __c1 = __c2; }
   b4dc8:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
   b4dcc:	6505      	str	r5, [r0, #80]	; 0x50
   b4dce:	4692      	mov	sl, r2
   b4dd0:	f100 0b18 	add.w	fp, r0, #24
   b4dd4:	f100 0830 	add.w	r8, r0, #48	; 0x30
   b4dd8:	f100 0748 	add.w	r7, r0, #72	; 0x48
      checkpoints = checkpointInput;
   b4ddc:	f7ff fa48 	bl	b4270 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4de0:	e9d4 2300 	ldrd	r2, r3, [r4]
   b4de4:	1a9b      	subs	r3, r3, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4de6:	42ab      	cmp	r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4de8:	ea4f 01e3 	mov.w	r1, r3, asr #3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4dec:	da02      	bge.n	b4df4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x64>
	  __throw_length_error(
   b4dee:	485f      	ldr	r0, [pc, #380]	; (b4f6c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1dc>)
   b4df0:	f005 f9dc 	bl	ba1ac <_ZSt20__throw_length_errorPKc>
      { _M_create_storage(__n); }
   b4df4:	a809      	add	r0, sp, #36	; 0x24
   b4df6:	9101      	str	r1, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4df8:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b4dfc:	950b      	str	r5, [sp, #44]	; 0x2c
      { _M_create_storage(__n); }
   b4dfe:	f7ff fedf 	bl	b4bc0 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
      if (__n <= 0)
   b4e02:	9901      	ldr	r1, [sp, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
   b4e04:	9809      	ldr	r0, [sp, #36]	; 0x24
   b4e06:	b131      	cbz	r1, b4e16 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x86>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   b4e08:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	*__first = __tmp;
   b4e0c:	008a      	lsls	r2, r1, #2
   b4e0e:	4629      	mov	r1, r5
   b4e10:	f006 f9d6 	bl	bb1c0 <memset>
   b4e14:	4630      	mov	r0, r6
	  _M_finish = __x._M_finish;
   b4e16:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
	  _M_start = __x._M_start;
   b4e1a:	9909      	ldr	r1, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b4e1c:	6963      	ldr	r3, [r4, #20]
   b4e1e:	930e      	str	r3, [sp, #56]	; 0x38
	  _M_finish = __x._M_finish;
   b4e20:	e9c4 1003 	strd	r1, r0, [r4, #12]
      }
   b4e24:	ae0c      	add	r6, sp, #48	; 0x30
	  _M_end_of_storage = __x._M_end_of_storage;
   b4e26:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b4e28:	6161      	str	r1, [r4, #20]
	  _M_finish = __x._M_finish;
   b4e2a:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
      }
   b4e2e:	4630      	mov	r0, r6
	  _M_start = __x._M_start;
   b4e30:	2500      	movs	r5, #0
	  _M_finish = __x._M_finish;
   b4e32:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b4e36:	950b      	str	r5, [sp, #44]	; 0x2c
      }
   b4e38:	f7ff fc76 	bl	b4728 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4e3c:	a809      	add	r0, sp, #36	; 0x24
   b4e3e:	f7ff fc73 	bl	b4728 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      distances = std::vector<float>(checkpoints.size(), 0);
      scalers = scalerInput;
   b4e42:	4651      	mov	r1, sl
   b4e44:	4658      	mov	r0, fp
   b4e46:	f7ff ff4d 	bl	b4ce4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      outputs = {std::vector<int>(outputSize[0], 0), std::vector<int>(outputSize[1], 0), std::vector<int>(outputSize[2], 0), std::vector<int>(outputSize[3], 0)};
   b4e4a:	f8d9 1000 	ldr.w	r1, [r9]
   b4e4e:	9506      	str	r5, [sp, #24]
   b4e50:	6809      	ldr	r1, [r1, #0]
   b4e52:	ab02      	add	r3, sp, #8
   b4e54:	aa06      	add	r2, sp, #24
   b4e56:	4630      	mov	r0, r6
   b4e58:	f7ff fc8e 	bl	b4778 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4e5c:	f8d9 1000 	ldr.w	r1, [r9]
   b4e60:	9507      	str	r5, [sp, #28]
   b4e62:	6849      	ldr	r1, [r1, #4]
   b4e64:	ab03      	add	r3, sp, #12
   b4e66:	aa07      	add	r2, sp, #28
   b4e68:	a80f      	add	r0, sp, #60	; 0x3c
   b4e6a:	f7ff fc85 	bl	b4778 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4e6e:	f8d9 1000 	ldr.w	r1, [r9]
   b4e72:	9508      	str	r5, [sp, #32]
   b4e74:	6889      	ldr	r1, [r1, #8]
   b4e76:	ab04      	add	r3, sp, #16
   b4e78:	aa08      	add	r2, sp, #32
   b4e7a:	a812      	add	r0, sp, #72	; 0x48
   b4e7c:	f7ff fc7c 	bl	b4778 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4e80:	f8d9 1000 	ldr.w	r1, [r9]
   b4e84:	9509      	str	r5, [sp, #36]	; 0x24
   b4e86:	ab05      	add	r3, sp, #20
   b4e88:	aa09      	add	r2, sp, #36	; 0x24
   b4e8a:	68c9      	ldr	r1, [r1, #12]
   b4e8c:	a815      	add	r0, sp, #84	; 0x54
   b4e8e:	f7ff fc73 	bl	b4778 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
			 - this->_M_impl._M_start); }
   b4e92:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b4e94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4e96:	1a9b      	subs	r3, r3, r2
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);

	if (__len > capacity())
   b4e98:	2b2f      	cmp	r3, #47	; 0x2f
   b4e9a:	d83f      	bhi.n	b4f1c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x18c>
	  pointer __result = this->_M_allocate(__n);
   b4e9c:	2004      	movs	r0, #4
   b4e9e:	f7ff f921 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b4ea2:	46b3      	mov	fp, r6
   b4ea4:	4605      	mov	r5, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b4ea6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
	  _ForwardIterator __cur = __result;
   b4eaa:	4681      	mov	r9, r0
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4eac:	f1b9 0f00 	cmp.w	r9, #0
   b4eb0:	d003      	beq.n	b4eba <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x12a>
   b4eb2:	4659      	mov	r1, fp
   b4eb4:	4648      	mov	r0, r9
   b4eb6:	f7ff fed1 	bl	b4c5c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b4eba:	f109 090c 	add.w	r9, r9, #12
   b4ebe:	45d1      	cmp	r9, sl
   b4ec0:	f10b 0b0c 	add.w	fp, fp, #12
   b4ec4:	d1f2      	bne.n	b4eac <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x11c>
	__destroy(__first, __last);
   b4ec6:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b4eca:	f7ff fe8e 	bl	b4bea <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	    _S_check_init_len(__len, _M_get_Tp_allocator());
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
   b4ece:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b4ed0:	b118      	cbz	r0, b4eda <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x14a>
			  this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_start);
   b4ed2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b4ed4:	1a09      	subs	r1, r1, r0
   b4ed6:	f7ff f8e4 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b4eda:	e9c4 5a09 	strd	r5, sl, [r4, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b4ede:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
   b4ee2:	ad18      	add	r5, sp, #96	; 0x60
   b4ee4:	3d0c      	subs	r5, #12
      }
   b4ee6:	4628      	mov	r0, r5
   b4ee8:	f7ff fc28 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4eec:	42b5      	cmp	r5, r6
   b4eee:	d1f9      	bne.n	b4ee4 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x154>
	this->_M_assign(__str);
   b4ef0:	9922      	ldr	r1, [sp, #136]	; 0x88
   b4ef2:	4640      	mov	r0, r8
   b4ef4:	f005 f9aa 	bl	ba24c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      name = nameInput;
      colors = colorInput;
   b4ef8:	4638      	mov	r0, r7
   b4efa:	9923      	ldr	r1, [sp, #140]	; 0x8c
   b4efc:	f7ff fa0a 	bl	b4314 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
	return *(this->_M_impl._M_start + __n);
   b4f00:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b4f02:	681b      	ldr	r3, [r3, #0]
      lowerLoopBound = boundInput[0];
   b4f04:	681a      	ldr	r2, [r3, #0]
   b4f06:	65e2      	str	r2, [r4, #92]	; 0x5c
      upperLoopBound = boundInput[1];
   b4f08:	685a      	ldr	r2, [r3, #4]
   b4f0a:	6622      	str	r2, [r4, #96]	; 0x60
      lowerGreenBound = boundInput[2];
   b4f0c:	689a      	ldr	r2, [r3, #8]
      upperGreenBound = boundInput[3];
   b4f0e:	68db      	ldr	r3, [r3, #12]
      lowerGreenBound = boundInput[2];
   b4f10:	6662      	str	r2, [r4, #100]	; 0x64
    }
   b4f12:	4620      	mov	r0, r4
      upperGreenBound = boundInput[3];
   b4f14:	66a3      	str	r3, [r4, #104]	; 0x68
    }
   b4f16:	b019      	add	sp, #100	; 0x64
   b4f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f1c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   b4f1e:	1aad      	subs	r5, r5, r2
	  }
	else if (size() >= __len)
   b4f20:	2d2f      	cmp	r5, #47	; 0x2f
   b4f22:	d90b      	bls.n	b4f3c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ac>
			      _Category>::__copy_m(__first, __last, __result);
   b4f24:	a918      	add	r1, sp, #96	; 0x60
   b4f26:	4630      	mov	r0, r6
   b4f28:	f7ff ff14 	bl	b4d54 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b4f2c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b4f2e:	4288      	cmp	r0, r1
   b4f30:	4605      	mov	r5, r0
   b4f32:	d0d6      	beq.n	b4ee2 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b4f34:	f7ff fe59 	bl	b4bea <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b4f38:	62a5      	str	r5, [r4, #40]	; 0x28
   b4f3a:	e7d2      	b.n	b4ee2 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b4f3c:	4435      	add	r5, r6
   b4f3e:	4629      	mov	r1, r5
   b4f40:	4630      	mov	r0, r6
   b4f42:	f7ff ff07 	bl	b4d54 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f46:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
   b4f4a:	ab18      	add	r3, sp, #96	; 0x60
   b4f4c:	429d      	cmp	r5, r3
   b4f4e:	d00a      	beq.n	b4f66 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1d6>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4f50:	f1b9 0f00 	cmp.w	r9, #0
   b4f54:	d003      	beq.n	b4f5e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ce>
   b4f56:	4629      	mov	r1, r5
   b4f58:	4648      	mov	r0, r9
   b4f5a:	f7ff fe7f 	bl	b4c5c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b4f5e:	350c      	adds	r5, #12
   b4f60:	f109 090c 	add.w	r9, r9, #12
   b4f64:	e7f1      	b.n	b4f4a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ba>
	    _ForwardIterator __mid = __first;
	    std::advance(__mid, size());
	    std::copy(__first, __mid, this->_M_impl._M_start);
	    const size_type __attribute__((__unused__)) __n = __len - size();
	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	    this->_M_impl._M_finish =
   b4f66:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
   b4f6a:	e7ba      	b.n	b4ee2 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b4f6c:	000bd39b 	.word	0x000bd39b

000b4f70 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   b4f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4f74:	ed2d 8b0e 	vpush	{d8-d14}
   b4f78:	2801      	cmp	r0, #1
   b4f7a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   b4f7e:	f040 85e0 	bne.w	b5b42 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbd2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4f82:	4bb4      	ldr	r3, [pc, #720]	; (b5254 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e4>)
    SleepResult() {}
   b4f84:	4ab4      	ldr	r2, [pc, #720]	; (b5258 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e8>)
   b4f86:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4f88:	2500      	movs	r5, #0
   b4f8a:	e9c3 5500 	strd	r5, r5, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4f8e:	2003      	movs	r0, #3
   b4f90:	f002 fd90 	bl	b7ab4 <set_system_mode>
  public:
    float lat;
    float lon;

    Checkpoint(float la, float lo){
      lat = la;
   b4f94:	4bb1      	ldr	r3, [pc, #708]	; (b525c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2ec>)
   b4f96:	9372      	str	r3, [sp, #456]	; 0x1c8
      lon = lo;
   b4f98:	4bb1      	ldr	r3, [pc, #708]	; (b5260 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f0>)
   b4f9a:	9373      	str	r3, [sp, #460]	; 0x1cc
      lat = la;
   b4f9c:	4bb1      	ldr	r3, [pc, #708]	; (b5264 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f4>)
   b4f9e:	9374      	str	r3, [sp, #464]	; 0x1d0
      lon = lo;
   b4fa0:	4bb1      	ldr	r3, [pc, #708]	; (b5268 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f8>)
   b4fa2:	9375      	str	r3, [sp, #468]	; 0x1d4
      lat = la;
   b4fa4:	4bb1      	ldr	r3, [pc, #708]	; (b526c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2fc>)
   b4fa6:	9376      	str	r3, [sp, #472]	; 0x1d8
      lon = lo;
   b4fa8:	4bb1      	ldr	r3, [pc, #708]	; (b5270 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x300>)
   b4faa:	9377      	str	r3, [sp, #476]	; 0x1dc
      lat = la;
   b4fac:	4bb1      	ldr	r3, [pc, #708]	; (b5274 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x304>)
   b4fae:	9378      	str	r3, [sp, #480]	; 0x1e0
      lon = lo;
   b4fb0:	4bb1      	ldr	r3, [pc, #708]	; (b5278 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x308>)
   b4fb2:	9379      	str	r3, [sp, #484]	; 0x1e4
      lat = la;
   b4fb4:	4bb1      	ldr	r3, [pc, #708]	; (b527c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x30c>)
   b4fb6:	937a      	str	r3, [sp, #488]	; 0x1e8
      lon = lo;
   b4fb8:	4bb1      	ldr	r3, [pc, #708]	; (b5280 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x310>)
   b4fba:	937b      	str	r3, [sp, #492]	; 0x1ec
);
   b4fbc:	ab72      	add	r3, sp, #456	; 0x1c8
   b4fbe:	934c      	str	r3, [sp, #304]	; 0x130
   b4fc0:	2305      	movs	r3, #5
   b4fc2:	f8df a34c 	ldr.w	sl, [pc, #844]	; b5310 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3a0>
   b4fc6:	934d      	str	r3, [sp, #308]	; 0x134
   b4fc8:	f50d 7884 	add.w	r8, sp, #264	; 0x108
   b4fcc:	aa4c      	add	r2, sp, #304	; 0x130
   b4fce:	4643      	mov	r3, r8
   b4fd0:	ca06      	ldmia	r2, {r1, r2}
   b4fd2:	a85a      	add	r0, sp, #360	; 0x168
   b4fd4:	f7ff fbf2 	bl	b47bc <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b4fd8:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
   b4fdc:	ac65      	add	r4, sp, #404	; 0x194
   b4fde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b4fe2:	2204      	movs	r2, #4
   b4fe4:	ab4a      	add	r3, sp, #296	; 0x128
   b4fe6:	944a      	str	r4, [sp, #296]	; 0x128
   b4fe8:	924b      	str	r2, [sp, #300]	; 0x12c
   b4fea:	e893 0006 	ldmia.w	r3, {r1, r2}
   b4fee:	a857      	add	r0, sp, #348	; 0x15c
   b4ff0:	f7ff fe4e 	bl	b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b4ff4:	aa61      	add	r2, sp, #388	; 0x184
   b4ff6:	9248      	str	r2, [sp, #288]	; 0x120
   b4ff8:	2328      	movs	r3, #40	; 0x28
   b4ffa:	2204      	movs	r2, #4
   b4ffc:	e9cd 3562 	strd	r3, r5, [sp, #392]	; 0x188
   b5000:	9249      	str	r2, [sp, #292]	; 0x124
   b5002:	ab48      	add	r3, sp, #288	; 0x120
   b5004:	f50d 7bd6 	add.w	fp, sp, #428	; 0x1ac
   b5008:	e893 0006 	ldmia.w	r3, {r1, r2}
   b500c:	a854      	add	r0, sp, #336	; 0x150
   b500e:	9561      	str	r5, [sp, #388]	; 0x184
   b5010:	9564      	str	r5, [sp, #400]	; 0x190
   b5012:	f7ff fe3d 	bl	b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5016:	4658      	mov	r0, fp
   b5018:	499a      	ldr	r1, [pc, #616]	; (b5284 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>)
      lat = la;
   b501a:	eddf 8a9b 	vldr	s17, [pc, #620]	; b5288 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x318>
      lon = lo;
   b501e:	ed9f 8a9b 	vldr	s16, [pc, #620]	; b528c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x31c>
      lat = la;
   b5022:	eddf 9a9b 	vldr	s19, [pc, #620]	; b5290 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>
      lon = lo;
   b5026:	ed9f 9a9b 	vldr	s18, [pc, #620]	; b5294 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>
      lat = la;
   b502a:	eddf aa9b 	vldr	s21, [pc, #620]	; b5298 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>
      lon = lo;
   b502e:	ed9f aa9b 	vldr	s20, [pc, #620]	; b529c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>
      lat = la;
   b5032:	eddf ba9b 	vldr	s23, [pc, #620]	; b52a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>
      lon = lo;
   b5036:	ed9f ba9b 	vldr	s22, [pc, #620]	; b52a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>
      lat = la;
   b503a:	eddf da9b 	vldr	s27, [pc, #620]	; b52a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>
      lon = lo;
   b503e:	ed9f da9b 	vldr	s26, [pc, #620]	; b52ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>
      lat = la;
   b5042:	eddf ca9b 	vldr	s25, [pc, #620]	; b52b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>
      lon = lo;
   b5046:	ed9f ca9b 	vldr	s24, [pc, #620]	; b52b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>
   b504a:	ed9f ea9b 	vldr	s28, [pc, #620]	; b52b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>
   b504e:	f7ff f85b 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5052:	a87e      	add	r0, sp, #504	; 0x1f8
   b5054:	4999      	ldr	r1, [pc, #612]	; (b52bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>)
   b5056:	f7ff f857 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b505a:	a884      	add	r0, sp, #528	; 0x210
   b505c:	4998      	ldr	r1, [pc, #608]	; (b52c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>)
   b505e:	f7ff f853 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5062:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5064:	9346      	str	r3, [sp, #280]	; 0x118
   b5066:	2302      	movs	r3, #2
   b5068:	9347      	str	r3, [sp, #284]	; 0x11c
   b506a:	aa46      	add	r2, sp, #280	; 0x118
   b506c:	f50d 79ba 	add.w	r9, sp, #372	; 0x174
   b5070:	ab40      	add	r3, sp, #256	; 0x100
   b5072:	ca06      	ldmia	r2, {r1, r2}
   b5074:	a851      	add	r0, sp, #324	; 0x144
   b5076:	f7ff fbd5 	bl	b4824 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b507a:	4629      	mov	r1, r5
   b507c:	2210      	movs	r2, #16
   b507e:	4648      	mov	r0, r9
   b5080:	f006 f89e 	bl	bb1c0 <memset>
   b5084:	2204      	movs	r2, #4
   b5086:	ab44      	add	r3, sp, #272	; 0x110
   b5088:	f8cd 9110 	str.w	r9, [sp, #272]	; 0x110
   b508c:	9245      	str	r2, [sp, #276]	; 0x114
   b508e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5092:	a84e      	add	r0, sp, #312	; 0x138
   b5094:	f7ff fdfc 	bl	b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLine = Railway(
   b5098:	ab4e      	add	r3, sp, #312	; 0x138
   b509a:	9302      	str	r3, [sp, #8]
   b509c:	ab51      	add	r3, sp, #324	; 0x144
   b509e:	aa57      	add	r2, sp, #348	; 0x15c
   b50a0:	a95a      	add	r1, sp, #360	; 0x168
   b50a2:	e9cd b300 	strd	fp, r3, [sp]
   b50a6:	4887      	ldr	r0, [pc, #540]	; (b52c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
   b50a8:	ab54      	add	r3, sp, #336	; 0x150
   b50aa:	f7ff fe71 	bl	b4d90 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b50ae:	a84e      	add	r0, sp, #312	; 0x138
   b50b0:	f7ff fb44 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b50b4:	a851      	add	r0, sp, #324	; 0x144
   b50b6:	f7ff fb4b 	bl	b4750 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b50ba:	a884      	add	r0, sp, #528	; 0x210
   b50bc:	f005 f8a8 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b50c0:	a87e      	add	r0, sp, #504	; 0x1f8
   b50c2:	f005 f8a5 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b50c6:	4658      	mov	r0, fp
   b50c8:	f005 f8a2 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b50cc:	a854      	add	r0, sp, #336	; 0x150
   b50ce:	f7ff fb35 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b50d2:	a857      	add	r0, sp, #348	; 0x15c
   b50d4:	f7ff fb32 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b50d8:	a85a      	add	r0, sp, #360	; 0x168
   b50da:	f7ff fb1b 	bl	b4714 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b50de:	4b7a      	ldr	r3, [pc, #488]	; (b52c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>)
   b50e0:	937e      	str	r3, [sp, #504]	; 0x1f8
      lon = lo;
   b50e2:	4b7a      	ldr	r3, [pc, #488]	; (b52cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x35c>)
   b50e4:	937f      	str	r3, [sp, #508]	; 0x1fc
      lat = la;
   b50e6:	4b7a      	ldr	r3, [pc, #488]	; (b52d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x360>)
   b50e8:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b50ea:	4b7a      	ldr	r3, [pc, #488]	; (b52d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x364>)
   b50ec:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b50ee:	4b7a      	ldr	r3, [pc, #488]	; (b52d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x368>)
   b50f0:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b50f2:	4b7a      	ldr	r3, [pc, #488]	; (b52dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
   b50f4:	9383      	str	r3, [sp, #524]	; 0x20c
      lat = la;
   b50f6:	4b7a      	ldr	r3, [pc, #488]	; (b52e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x370>)
   b50f8:	9384      	str	r3, [sp, #528]	; 0x210
      lon = lo;
   b50fa:	4b7a      	ldr	r3, [pc, #488]	; (b52e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>)
   b50fc:	9385      	str	r3, [sp, #532]	; 0x214
      lat = la;
   b50fe:	4b7a      	ldr	r3, [pc, #488]	; (b52e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x378>)
   b5100:	9386      	str	r3, [sp, #536]	; 0x218
      lon = lo;
   b5102:	4b7a      	ldr	r3, [pc, #488]	; (b52ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x37c>)
   b5104:	9387      	str	r3, [sp, #540]	; 0x21c
      lat = la;
   b5106:	4b7a      	ldr	r3, [pc, #488]	; (b52f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x380>)
   b5108:	9388      	str	r3, [sp, #544]	; 0x220
      lon = lo;
   b510a:	4b7a      	ldr	r3, [pc, #488]	; (b52f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x384>)
   b510c:	9389      	str	r3, [sp, #548]	; 0x224
      lat = la;
   b510e:	4b7a      	ldr	r3, [pc, #488]	; (b52f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x388>)
   b5110:	938a      	str	r3, [sp, #552]	; 0x228
      lon = lo;
   b5112:	4b7a      	ldr	r3, [pc, #488]	; (b52fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x38c>)
   b5114:	938b      	str	r3, [sp, #556]	; 0x22c
);
   b5116:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5118:	9342      	str	r3, [sp, #264]	; 0x108
   b511a:	2307      	movs	r3, #7
   b511c:	9343      	str	r3, [sp, #268]	; 0x10c
   b511e:	af38      	add	r7, sp, #224	; 0xe0
   b5120:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5124:	463b      	mov	r3, r7
   b5126:	a85a      	add	r0, sp, #360	; 0x168
   b5128:	f7ff fb48 	bl	b47bc <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b512c:	f10a 0c10 	add.w	ip, sl, #16
   b5130:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5134:	465e      	mov	r6, fp
   b5136:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5138:	e89c 0003 	ldmia.w	ip, {r0, r1}
   b513c:	2306      	movs	r3, #6
   b513e:	9341      	str	r3, [sp, #260]	; 0x104
   b5140:	f8cd b100 	str.w	fp, [sp, #256]	; 0x100
   b5144:	ab40      	add	r3, sp, #256	; 0x100
   b5146:	e9c6 0100 	strd	r0, r1, [r6]
   b514a:	e893 0006 	ldmia.w	r3, {r1, r2}
   b514e:	a857      	add	r0, sp, #348	; 0x15c
   b5150:	9604      	str	r6, [sp, #16]
   b5152:	f7ff fd9d 	bl	b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5156:	aa61      	add	r2, sp, #388	; 0x184
   b5158:	923e      	str	r2, [sp, #248]	; 0xf8
   b515a:	233c      	movs	r3, #60	; 0x3c
   b515c:	2204      	movs	r2, #4
   b515e:	e9cd 3562 	strd	r3, r5, [sp, #392]	; 0x188
   b5162:	923f      	str	r2, [sp, #252]	; 0xfc
   b5164:	ab3e      	add	r3, sp, #248	; 0xf8
   b5166:	e893 0006 	ldmia.w	r3, {r1, r2}
   b516a:	a854      	add	r0, sp, #336	; 0x150
   b516c:	9561      	str	r5, [sp, #388]	; 0x184
   b516e:	9564      	str	r5, [sp, #400]	; 0x190
   b5170:	f7ff fd8e 	bl	b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5174:	4620      	mov	r0, r4
   b5176:	4962      	ldr	r1, [pc, #392]	; (b5300 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x390>)
   b5178:	f7fe ffc6 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b517c:	a872      	add	r0, sp, #456	; 0x1c8
   b517e:	4961      	ldr	r1, [pc, #388]	; (b5304 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>)
   b5180:	f7fe ffc2 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5184:	a878      	add	r0, sp, #480	; 0x1e0
   b5186:	4960      	ldr	r1, [pc, #384]	; (b5308 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x398>)
   b5188:	f7fe ffbe 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b518c:	ab72      	add	r3, sp, #456	; 0x1c8
   b518e:	933c      	str	r3, [sp, #240]	; 0xf0
   b5190:	2302      	movs	r3, #2
   b5192:	933d      	str	r3, [sp, #244]	; 0xf4
   b5194:	ae36      	add	r6, sp, #216	; 0xd8
   b5196:	aa3c      	add	r2, sp, #240	; 0xf0
   b5198:	4633      	mov	r3, r6
   b519a:	ca06      	ldmia	r2, {r1, r2}
   b519c:	a851      	add	r0, sp, #324	; 0x144
   b519e:	f7ff fb41 	bl	b4824 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b51a2:	4629      	mov	r1, r5
   b51a4:	2210      	movs	r2, #16
   b51a6:	4648      	mov	r0, r9
   b51a8:	f006 f80a 	bl	bb1c0 <memset>
   b51ac:	2204      	movs	r2, #4
   b51ae:	ab3a      	add	r3, sp, #232	; 0xe8
   b51b0:	f8cd 90e8 	str.w	r9, [sp, #232]	; 0xe8
   b51b4:	923b      	str	r2, [sp, #236]	; 0xec
   b51b6:	e893 0006 	ldmia.w	r3, {r1, r2}
   b51ba:	a84e      	add	r0, sp, #312	; 0x138
   b51bc:	f7ff fd68 	bl	b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLine = Railway(
   b51c0:	ab4e      	add	r3, sp, #312	; 0x138
   b51c2:	9302      	str	r3, [sp, #8]
   b51c4:	ab51      	add	r3, sp, #324	; 0x144
   b51c6:	aa57      	add	r2, sp, #348	; 0x15c
   b51c8:	a95a      	add	r1, sp, #360	; 0x168
   b51ca:	e9cd 4300 	strd	r4, r3, [sp]
   b51ce:	484f      	ldr	r0, [pc, #316]	; (b530c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x39c>)
   b51d0:	ab54      	add	r3, sp, #336	; 0x150
   b51d2:	f7ff fddd 	bl	b4d90 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b51d6:	a84e      	add	r0, sp, #312	; 0x138
   b51d8:	f7ff fab0 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b51dc:	a851      	add	r0, sp, #324	; 0x144
   b51de:	f7ff fab7 	bl	b4750 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b51e2:	a878      	add	r0, sp, #480	; 0x1e0
   b51e4:	f005 f814 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b51e8:	a872      	add	r0, sp, #456	; 0x1c8
   b51ea:	f005 f811 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b51ee:	4620      	mov	r0, r4
   b51f0:	f005 f80e 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b51f4:	a854      	add	r0, sp, #336	; 0x150
   b51f6:	f7ff faa1 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b51fa:	a857      	add	r0, sp, #348	; 0x15c
   b51fc:	f7ff fa9e 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5200:	a85a      	add	r0, sp, #360	; 0x168
   b5202:	f7ff fa87 	bl	b4714 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b5206:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5208:	9338      	str	r3, [sp, #224]	; 0xe0
   b520a:	2307      	movs	r3, #7
   b520c:	9339      	str	r3, [sp, #228]	; 0xe4
   b520e:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
   b5212:	e897 0006 	ldmia.w	r7, {r1, r2}
   b5216:	4643      	mov	r3, r8
   b5218:	a85a      	add	r0, sp, #360	; 0x168
      lat = la;
   b521a:	edcd da7e 	vstr	s27, [sp, #504]	; 0x1f8
      lon = lo;
   b521e:	ed8d da7f 	vstr	s26, [sp, #508]	; 0x1fc
      lat = la;
   b5222:	edcd ca80 	vstr	s25, [sp, #512]	; 0x200
      lon = lo;
   b5226:	ed8d ca81 	vstr	s24, [sp, #516]	; 0x204
      lat = la;
   b522a:	edcd 8a82 	vstr	s17, [sp, #520]	; 0x208
      lon = lo;
   b522e:	ed8d 8a83 	vstr	s16, [sp, #524]	; 0x20c
      lat = la;
   b5232:	edcd ba84 	vstr	s23, [sp, #528]	; 0x210
      lon = lo;
   b5236:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
      lat = la;
   b523a:	edcd aa86 	vstr	s21, [sp, #536]	; 0x218
      lon = lo;
   b523e:	ed8d aa87 	vstr	s20, [sp, #540]	; 0x21c
      lat = la;
   b5242:	edcd 9a88 	vstr	s19, [sp, #544]	; 0x220
      lon = lo;
   b5246:	ed8d 9a89 	vstr	s18, [sp, #548]	; 0x224
      lat = la;
   b524a:	edcd 8a8a 	vstr	s17, [sp, #552]	; 0x228
      lon = lo;
   b524e:	ed8d 8a8b 	vstr	s16, [sp, #556]	; 0x22c
   b5252:	e05f      	b.n	b5314 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3a4>
   b5254:	200354e4 	.word	0x200354e4
   b5258:	ffff0000 	.word	0xffff0000
   b525c:	42276980 	.word	0x42276980
   b5260:	c2af431e 	.word	0xc2af431e
   b5264:	42279dcc 	.word	0x42279dcc
   b5268:	c2af4202 	.word	0xc2af4202
   b526c:	42279d95 	.word	0x42279d95
   b5270:	c2af476d 	.word	0xc2af476d
   b5274:	4227a7a9 	.word	0x4227a7a9
   b5278:	c2af4e05 	.word	0xc2af4e05
   b527c:	4227b382 	.word	0x4227b382
   b5280:	c2af4e44 	.word	0xc2af4e44
   b5284:	000bd3d9 	.word	0x000bd3d9
   b5288:	42278b1a 	.word	0x42278b1a
   b528c:	c2af449a 	.word	0xc2af449a
   b5290:	42278b2f 	.word	0x42278b2f
   b5294:	c2af4095 	.word	0xc2af4095
   b5298:	422781d8 	.word	0x422781d8
   b529c:	c2af4044 	.word	0xc2af4044
   b52a0:	42278216 	.word	0x42278216
   b52a4:	c2af44c1 	.word	0xc2af44c1
   b52a8:	4227a49e 	.word	0x4227a49e
   b52ac:	c2af4bd0 	.word	0xc2af4bd0
   b52b0:	4227a437 	.word	0x4227a437
   b52b4:	c2af4659 	.word	0xc2af4659
   b52b8:	c2af4089 	.word	0xc2af4089
   b52bc:	000bd3dd 	.word	0x000bd3dd
   b52c0:	000bd3e4 	.word	0x000bd3e4
   b52c4:	2003e5c4 	.word	0x2003e5c4
   b52c8:	42277e9d 	.word	0x42277e9d
   b52cc:	c2af74b3 	.word	0xc2af74b3
   b52d0:	422780af 	.word	0x422780af
   b52d4:	c2af588e 	.word	0xc2af588e
   b52d8:	4227804d 	.word	0x4227804d
   b52dc:	c2af482e 	.word	0xc2af482e
   b52e0:	422780ad 	.word	0x422780ad
   b52e4:	c2af4157 	.word	0xc2af4157
   b52e8:	42278aff 	.word	0x42278aff
   b52ec:	c2af4253 	.word	0xc2af4253
   b52f0:	42278af4 	.word	0x42278af4
   b52f4:	c2af4798 	.word	0xc2af4798
   b52f8:	4227a978 	.word	0x4227a978
   b52fc:	c2af5f5d 	.word	0xc2af5f5d
   b5300:	000bd3eb 	.word	0x000bd3eb
   b5304:	000bd3f0 	.word	0x000bd3f0
   b5308:	000bd3f7 	.word	0x000bd3f7
   b530c:	2003553c 	.word	0x2003553c
   b5310:	000bd5a4 	.word	0x000bd5a4
   b5314:	f7ff fa52 	bl	b47bc <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5318:	f10a 0328 	add.w	r3, sl, #40	; 0x28
   b531c:	461f      	mov	r7, r3
   b531e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5320:	46dc      	mov	ip, fp
   b5322:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5326:	e9d7 0100 	ldrd	r0, r1, [r7]
   b532a:	9b04      	ldr	r3, [sp, #16]
   b532c:	f8cd b0d8 	str.w	fp, [sp, #216]	; 0xd8
   b5330:	e883 0003 	stmia.w	r3, {r0, r1}
   b5334:	2306      	movs	r3, #6
   b5336:	9337      	str	r3, [sp, #220]	; 0xdc
   b5338:	e896 0006 	ldmia.w	r6, {r1, r2}
   b533c:	a857      	add	r0, sp, #348	; 0x15c
   b533e:	9705      	str	r7, [sp, #20]
   b5340:	f7ff fca6 	bl	b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5344:	f107 0308 	add.w	r3, r7, #8
   b5348:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b534a:	ae61      	add	r6, sp, #388	; 0x184
   b534c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b5350:	2204      	movs	r2, #4
   b5352:	ab34      	add	r3, sp, #208	; 0xd0
   b5354:	9634      	str	r6, [sp, #208]	; 0xd0
   b5356:	9235      	str	r2, [sp, #212]	; 0xd4
   b5358:	e893 0006 	ldmia.w	r3, {r1, r2}
   b535c:	a854      	add	r0, sp, #336	; 0x150
   b535e:	f7ff fc97 	bl	b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5362:	4620      	mov	r0, r4
   b5364:	49b2      	ldr	r1, [pc, #712]	; (b5630 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c0>)
   b5366:	f7fe fecf 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b536a:	a872      	add	r0, sp, #456	; 0x1c8
   b536c:	49b1      	ldr	r1, [pc, #708]	; (b5634 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c4>)
   b536e:	f7fe fecb 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5372:	a878      	add	r0, sp, #480	; 0x1e0
   b5374:	49b0      	ldr	r1, [pc, #704]	; (b5638 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c8>)
   b5376:	f7fe fec7 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b537a:	a972      	add	r1, sp, #456	; 0x1c8
   b537c:	9132      	str	r1, [sp, #200]	; 0xc8
   b537e:	2102      	movs	r1, #2
   b5380:	ae2c      	add	r6, sp, #176	; 0xb0
   b5382:	9133      	str	r1, [sp, #204]	; 0xcc
   b5384:	aa32      	add	r2, sp, #200	; 0xc8
   b5386:	ca06      	ldmia	r2, {r1, r2}
   b5388:	4633      	mov	r3, r6
   b538a:	a851      	add	r0, sp, #324	; 0x144
   b538c:	f7ff fa4a 	bl	b4824 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5390:	f107 0218 	add.w	r2, r7, #24
   b5394:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b5396:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b539a:	2104      	movs	r1, #4
   b539c:	ab30      	add	r3, sp, #192	; 0xc0
   b539e:	f8cd 90c0 	str.w	r9, [sp, #192]	; 0xc0
   b53a2:	9131      	str	r1, [sp, #196]	; 0xc4
   b53a4:	e893 0006 	ldmia.w	r3, {r1, r2}
   b53a8:	a84e      	add	r0, sp, #312	; 0x138
   b53aa:	f7ff fc71 	bl	b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway brownLine = Railway(
   b53ae:	a94e      	add	r1, sp, #312	; 0x138
   b53b0:	9102      	str	r1, [sp, #8]
   b53b2:	a951      	add	r1, sp, #324	; 0x144
   b53b4:	e9cd 4100 	strd	r4, r1, [sp]
   b53b8:	a954      	add	r1, sp, #336	; 0x150
   b53ba:	460b      	mov	r3, r1
   b53bc:	a957      	add	r1, sp, #348	; 0x15c
   b53be:	460a      	mov	r2, r1
   b53c0:	489e      	ldr	r0, [pc, #632]	; (b563c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6cc>)
   b53c2:	a95a      	add	r1, sp, #360	; 0x168
   b53c4:	f7ff fce4 	bl	b4d90 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b53c8:	a84e      	add	r0, sp, #312	; 0x138
   b53ca:	f7ff f9b7 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b53ce:	a851      	add	r0, sp, #324	; 0x144
   b53d0:	f7ff f9be 	bl	b4750 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b53d4:	a878      	add	r0, sp, #480	; 0x1e0
   b53d6:	f004 ff1b 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b53da:	a872      	add	r0, sp, #456	; 0x1c8
   b53dc:	f004 ff18 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b53e0:	4620      	mov	r0, r4
   b53e2:	f004 ff15 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b53e6:	a854      	add	r0, sp, #336	; 0x150
   b53e8:	f7ff f9a8 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b53ec:	a857      	add	r0, sp, #348	; 0x15c
   b53ee:	f7ff f9a5 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b53f2:	a85a      	add	r0, sp, #360	; 0x168
   b53f4:	f7ff f98e 	bl	b4714 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b53f8:	4b91      	ldr	r3, [pc, #580]	; (b5640 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d0>)
   b53fa:	9372      	str	r3, [sp, #456]	; 0x1c8
      lon = lo;
   b53fc:	4b91      	ldr	r3, [pc, #580]	; (b5644 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d4>)
   b53fe:	9373      	str	r3, [sp, #460]	; 0x1cc
      lat = la;
   b5400:	4b91      	ldr	r3, [pc, #580]	; (b5648 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d8>)
   b5402:	9374      	str	r3, [sp, #464]	; 0x1d0
   b5404:	4b91      	ldr	r3, [pc, #580]	; (b564c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6dc>)
   b5406:	9378      	str	r3, [sp, #480]	; 0x1e0
);
   b5408:	a972      	add	r1, sp, #456	; 0x1c8
      lon = lo;
   b540a:	4b91      	ldr	r3, [pc, #580]	; (b5650 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e0>)
   b540c:	912e      	str	r1, [sp, #184]	; 0xb8
   b540e:	9379      	str	r3, [sp, #484]	; 0x1e4
   b5410:	2105      	movs	r1, #5
      lat = la;
   b5412:	4b90      	ldr	r3, [pc, #576]	; (b5654 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e4>)
   b5414:	937a      	str	r3, [sp, #488]	; 0x1e8
   b5416:	af24      	add	r7, sp, #144	; 0x90
   b5418:	912f      	str	r1, [sp, #188]	; 0xbc
      lon = lo;
   b541a:	4b8f      	ldr	r3, [pc, #572]	; (b5658 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e8>)
   b541c:	937b      	str	r3, [sp, #492]	; 0x1ec
   b541e:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5422:	463b      	mov	r3, r7
   b5424:	a85a      	add	r0, sp, #360	; 0x168
   b5426:	ed8d ea75 	vstr	s28, [sp, #468]	; 0x1d4
      lat = la;
   b542a:	edcd 9a76 	vstr	s19, [sp, #472]	; 0x1d8
      lon = lo;
   b542e:	ed8d 9a77 	vstr	s18, [sp, #476]	; 0x1dc
   b5432:	f7ff f9c3 	bl	b47bc <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5436:	f10a 0360 	add.w	r3, sl, #96	; 0x60
   b543a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b543c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b5440:	2104      	movs	r1, #4
   b5442:	942c      	str	r4, [sp, #176]	; 0xb0
   b5444:	912d      	str	r1, [sp, #180]	; 0xb4
   b5446:	e896 0006 	ldmia.w	r6, {r1, r2}
   b544a:	a857      	add	r0, sp, #348	; 0x15c
   b544c:	f7ff fc20 	bl	b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5450:	f10a 0370 	add.w	r3, sl, #112	; 0x70
   b5454:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5456:	ae61      	add	r6, sp, #388	; 0x184
   b5458:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b545c:	2104      	movs	r1, #4
   b545e:	ab2a      	add	r3, sp, #168	; 0xa8
   b5460:	962a      	str	r6, [sp, #168]	; 0xa8
   b5462:	912b      	str	r1, [sp, #172]	; 0xac
   b5464:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5468:	a854      	add	r0, sp, #336	; 0x150
   b546a:	f7ff fc11 	bl	b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b546e:	4658      	mov	r0, fp
   b5470:	497a      	ldr	r1, [pc, #488]	; (b565c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ec>)
   b5472:	f7fe fe49 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5476:	a87e      	add	r0, sp, #504	; 0x1f8
   b5478:	4979      	ldr	r1, [pc, #484]	; (b5660 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f0>)
   b547a:	f7fe fe45 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b547e:	a884      	add	r0, sp, #528	; 0x210
   b5480:	4978      	ldr	r1, [pc, #480]	; (b5664 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f4>)
   b5482:	f7fe fe41 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5486:	a97e      	add	r1, sp, #504	; 0x1f8
   b5488:	9128      	str	r1, [sp, #160]	; 0xa0
   b548a:	2102      	movs	r1, #2
   b548c:	ae22      	add	r6, sp, #136	; 0x88
   b548e:	9129      	str	r1, [sp, #164]	; 0xa4
   b5490:	aa28      	add	r2, sp, #160	; 0xa0
   b5492:	4633      	mov	r3, r6
   b5494:	ca06      	ldmia	r2, {r1, r2}
   b5496:	a851      	add	r0, sp, #324	; 0x144
   b5498:	f7ff f9c4 	bl	b4824 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b549c:	f10a 0380 	add.w	r3, sl, #128	; 0x80
   b54a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b54a2:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b54a6:	2104      	movs	r1, #4
   b54a8:	ab26      	add	r3, sp, #152	; 0x98
   b54aa:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
   b54ae:	9127      	str	r1, [sp, #156]	; 0x9c
   b54b0:	e893 0006 	ldmia.w	r3, {r1, r2}
   b54b4:	a84e      	add	r0, sp, #312	; 0x138
   b54b6:	f7ff fbeb 	bl	b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLine = Railway(
   b54ba:	a94e      	add	r1, sp, #312	; 0x138
   b54bc:	9102      	str	r1, [sp, #8]
   b54be:	a951      	add	r1, sp, #324	; 0x144
   b54c0:	e9cd b100 	strd	fp, r1, [sp]
   b54c4:	a954      	add	r1, sp, #336	; 0x150
   b54c6:	460b      	mov	r3, r1
   b54c8:	a957      	add	r1, sp, #348	; 0x15c
   b54ca:	460a      	mov	r2, r1
   b54cc:	4866      	ldr	r0, [pc, #408]	; (b5668 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f8>)
   b54ce:	a95a      	add	r1, sp, #360	; 0x168
   b54d0:	f7ff fc5e 	bl	b4d90 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b54d4:	a84e      	add	r0, sp, #312	; 0x138
   b54d6:	f7ff f931 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b54da:	a851      	add	r0, sp, #324	; 0x144
   b54dc:	f7ff f938 	bl	b4750 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b54e0:	a884      	add	r0, sp, #528	; 0x210
   b54e2:	f004 fe95 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b54e6:	a87e      	add	r0, sp, #504	; 0x1f8
   b54e8:	f004 fe92 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b54ec:	4658      	mov	r0, fp
   b54ee:	f004 fe8f 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b54f2:	a854      	add	r0, sp, #336	; 0x150
   b54f4:	f7ff f922 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b54f8:	a857      	add	r0, sp, #348	; 0x15c
   b54fa:	f7ff f91f 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b54fe:	a85a      	add	r0, sp, #360	; 0x168
   b5500:	f7ff f908 	bl	b4714 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5504:	4b59      	ldr	r3, [pc, #356]	; (b566c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6fc>)
   b5506:	937e      	str	r3, [sp, #504]	; 0x1f8
      lon = lo;
   b5508:	4b59      	ldr	r3, [pc, #356]	; (b5670 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x700>)
   b550a:	937f      	str	r3, [sp, #508]	; 0x1fc
      lat = la;
   b550c:	4b59      	ldr	r3, [pc, #356]	; (b5674 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x704>)
   b550e:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b5510:	4b59      	ldr	r3, [pc, #356]	; (b5678 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x708>)
   b5512:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b5514:	4b59      	ldr	r3, [pc, #356]	; (b567c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x70c>)
   b5516:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b5518:	4b59      	ldr	r3, [pc, #356]	; (b5680 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x710>)
   b551a:	9383      	str	r3, [sp, #524]	; 0x20c
);
   b551c:	a97e      	add	r1, sp, #504	; 0x1f8
      lat = la;
   b551e:	4b59      	ldr	r3, [pc, #356]	; (b5684 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x714>)
   b5520:	9124      	str	r1, [sp, #144]	; 0x90
   b5522:	9384      	str	r3, [sp, #528]	; 0x210
   b5524:	2108      	movs	r1, #8
   b5526:	4b58      	ldr	r3, [pc, #352]	; (b5688 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x718>)
   b5528:	938a      	str	r3, [sp, #552]	; 0x228
   b552a:	f10d 0868 	add.w	r8, sp, #104	; 0x68
   b552e:	9125      	str	r1, [sp, #148]	; 0x94
      lon = lo;
   b5530:	4b56      	ldr	r3, [pc, #344]	; (b568c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x71c>)
   b5532:	938b      	str	r3, [sp, #556]	; 0x22c
   b5534:	e897 0006 	ldmia.w	r7, {r1, r2}
   b5538:	4643      	mov	r3, r8
   b553a:	a85a      	add	r0, sp, #360	; 0x168
   b553c:	f10a 0790 	add.w	r7, sl, #144	; 0x90
   b5540:	ed8d ea85 	vstr	s28, [sp, #532]	; 0x214
      lat = la;
   b5544:	edcd 9a86 	vstr	s19, [sp, #536]	; 0x218
      lon = lo;
   b5548:	ed8d 9a87 	vstr	s18, [sp, #540]	; 0x21c
      lat = la;
   b554c:	edcd 8a88 	vstr	s17, [sp, #544]	; 0x220
      lon = lo;
   b5550:	ed8d 8a89 	vstr	s16, [sp, #548]	; 0x224
      lat = la;
   b5554:	edcd aa8c 	vstr	s21, [sp, #560]	; 0x230
      lon = lo;
   b5558:	ed8d aa8d 	vstr	s20, [sp, #564]	; 0x234
   b555c:	f7ff f92e 	bl	b47bc <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5560:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5562:	46dc      	mov	ip, fp
   b5564:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5568:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   b556c:	9f04      	ldr	r7, [sp, #16]
   b556e:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
   b5572:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b5576:	2107      	movs	r1, #7
   b5578:	9123      	str	r1, [sp, #140]	; 0x8c
   b557a:	e896 0006 	ldmia.w	r6, {r1, r2}
   b557e:	a857      	add	r0, sp, #348	; 0x15c
   b5580:	f7ff fb86 	bl	b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5584:	f10a 03ac 	add.w	r3, sl, #172	; 0xac
   b5588:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b558a:	ae61      	add	r6, sp, #388	; 0x184
   b558c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b5590:	2104      	movs	r1, #4
   b5592:	ab20      	add	r3, sp, #128	; 0x80
   b5594:	9620      	str	r6, [sp, #128]	; 0x80
   b5596:	9121      	str	r1, [sp, #132]	; 0x84
   b5598:	e893 0006 	ldmia.w	r3, {r1, r2}
   b559c:	a854      	add	r0, sp, #336	; 0x150
   b559e:	f7ff fb77 	bl	b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b55a2:	4620      	mov	r0, r4
   b55a4:	493a      	ldr	r1, [pc, #232]	; (b5690 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x720>)
   b55a6:	f7fe fdaf 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b55aa:	a872      	add	r0, sp, #456	; 0x1c8
   b55ac:	4939      	ldr	r1, [pc, #228]	; (b5694 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x724>)
   b55ae:	f7fe fdab 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b55b2:	a878      	add	r0, sp, #480	; 0x1e0
   b55b4:	4938      	ldr	r1, [pc, #224]	; (b5698 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x728>)
   b55b6:	f7fe fda7 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b55ba:	a972      	add	r1, sp, #456	; 0x1c8
   b55bc:	911e      	str	r1, [sp, #120]	; 0x78
   b55be:	2102      	movs	r1, #2
   b55c0:	af18      	add	r7, sp, #96	; 0x60
   b55c2:	911f      	str	r1, [sp, #124]	; 0x7c
   b55c4:	aa1e      	add	r2, sp, #120	; 0x78
   b55c6:	463b      	mov	r3, r7
   b55c8:	ca06      	ldmia	r2, {r1, r2}
   b55ca:	a851      	add	r0, sp, #324	; 0x144
   b55cc:	f7ff f92a 	bl	b4824 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b55d0:	f10a 03bc 	add.w	r3, sl, #188	; 0xbc
   b55d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b55d6:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b55da:	2104      	movs	r1, #4
   b55dc:	ab1c      	add	r3, sp, #112	; 0x70
   b55de:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
   b55e2:	911d      	str	r1, [sp, #116]	; 0x74
   b55e4:	e893 0006 	ldmia.w	r3, {r1, r2}
   b55e8:	a84e      	add	r0, sp, #312	; 0x138
   b55ea:	f7ff fb51 	bl	b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLine = Railway(
   b55ee:	a94e      	add	r1, sp, #312	; 0x138
   b55f0:	9102      	str	r1, [sp, #8]
   b55f2:	a951      	add	r1, sp, #324	; 0x144
   b55f4:	e9cd 4100 	strd	r4, r1, [sp]
   b55f8:	a954      	add	r1, sp, #336	; 0x150
   b55fa:	460b      	mov	r3, r1
   b55fc:	a957      	add	r1, sp, #348	; 0x15c
   b55fe:	460a      	mov	r2, r1
   b5600:	4826      	ldr	r0, [pc, #152]	; (b569c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x72c>)
   b5602:	a95a      	add	r1, sp, #360	; 0x168
   b5604:	f7ff fbc4 	bl	b4d90 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5608:	a84e      	add	r0, sp, #312	; 0x138
   b560a:	f7ff f897 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b560e:	a851      	add	r0, sp, #324	; 0x144
   b5610:	f7ff f89e 	bl	b4750 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5614:	a878      	add	r0, sp, #480	; 0x1e0
   b5616:	f004 fdfb 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b561a:	a872      	add	r0, sp, #456	; 0x1c8
   b561c:	f004 fdf8 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5620:	4620      	mov	r0, r4
   b5622:	f004 fdf5 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5626:	a854      	add	r0, sp, #336	; 0x150
   b5628:	f7ff f888 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b562c:	a857      	add	r0, sp, #348	; 0x15c
   b562e:	e037      	b.n	b56a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x730>
   b5630:	000bd3fe 	.word	0x000bd3fe
   b5634:	000bd404 	.word	0x000bd404
   b5638:	000bd40b 	.word	0x000bd40b
   b563c:	200355a8 	.word	0x200355a8
   b5640:	42276997 	.word	0x42276997
   b5644:	c2af40b8 	.word	0xc2af40b8
   b5648:	422781fe 	.word	0x422781fe
   b564c:	42278afb 	.word	0x42278afb
   b5650:	c2af4494 	.word	0xc2af4494
   b5654:	42278971 	.word	0x42278971
   b5658:	c2af6479 	.word	0xc2af6479
   b565c:	000bd56e 	.word	0x000bd56e
   b5660:	000bd412 	.word	0x000bd412
   b5664:	000bd419 	.word	0x000bd419
   b5668:	20035618 	.word	0x20035618
   b566c:	4227631a 	.word	0x4227631a
   b5670:	c2af4bd2 	.word	0xc2af4bd2
   b5674:	42276ec4 	.word	0x42276ec4
   b5678:	c2af4115 	.word	0xc2af4115
   b567c:	422780b5 	.word	0x422780b5
   b5680:	c2af4086 	.word	0xc2af4086
   b5684:	42278200 	.word	0x42278200
   b5688:	422781e1 	.word	0x422781e1
   b568c:	c2af4476 	.word	0xc2af4476
   b5690:	000bd420 	.word	0x000bd420
   b5694:	000bd427 	.word	0x000bd427
   b5698:	000bd42e 	.word	0x000bd42e
   b569c:	20037ea8 	.word	0x20037ea8
   b56a0:	f7ff f84c 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b56a4:	a85a      	add	r0, sp, #360	; 0x168
   b56a6:	f7ff f835 	bl	b4714 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b56aa:	a97e      	add	r1, sp, #504	; 0x1f8
   b56ac:	911a      	str	r1, [sp, #104]	; 0x68
   b56ae:	2107      	movs	r1, #7
   b56b0:	ae10      	add	r6, sp, #64	; 0x40
   b56b2:	911b      	str	r1, [sp, #108]	; 0x6c
   b56b4:	e898 0006 	ldmia.w	r8, {r1, r2}
   b56b8:	4633      	mov	r3, r6
   b56ba:	a85a      	add	r0, sp, #360	; 0x168
      lat = la;
   b56bc:	edcd da7e 	vstr	s27, [sp, #504]	; 0x1f8
      lon = lo;
   b56c0:	ed8d da7f 	vstr	s26, [sp, #508]	; 0x1fc
      lat = la;
   b56c4:	edcd ca80 	vstr	s25, [sp, #512]	; 0x200
      lon = lo;
   b56c8:	ed8d ca81 	vstr	s24, [sp, #516]	; 0x204
      lat = la;
   b56cc:	edcd 8a82 	vstr	s17, [sp, #520]	; 0x208
      lon = lo;
   b56d0:	ed8d 8a83 	vstr	s16, [sp, #524]	; 0x20c
      lat = la;
   b56d4:	edcd ba84 	vstr	s23, [sp, #528]	; 0x210
      lon = lo;
   b56d8:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
      lat = la;
   b56dc:	edcd aa86 	vstr	s21, [sp, #536]	; 0x218
      lon = lo;
   b56e0:	ed8d aa87 	vstr	s20, [sp, #540]	; 0x21c
      lat = la;
   b56e4:	edcd 9a88 	vstr	s19, [sp, #544]	; 0x220
      lon = lo;
   b56e8:	ed8d 9a89 	vstr	s18, [sp, #548]	; 0x224
      lat = la;
   b56ec:	edcd 8a8a 	vstr	s17, [sp, #552]	; 0x228
      lon = lo;
   b56f0:	ed8d 8a8b 	vstr	s16, [sp, #556]	; 0x22c
   b56f4:	f7ff f862 	bl	b47bc <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b56f8:	f10a 0e28 	add.w	lr, sl, #40	; 0x28
   b56fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5700:	46dc      	mov	ip, fp
   b5702:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5706:	9905      	ldr	r1, [sp, #20]
   b5708:	9a04      	ldr	r2, [sp, #16]
   b570a:	f8cd b060 	str.w	fp, [sp, #96]	; 0x60
   b570e:	c903      	ldmia	r1, {r0, r1}
   b5710:	e9c2 0100 	strd	r0, r1, [r2]
   b5714:	2106      	movs	r1, #6
   b5716:	9119      	str	r1, [sp, #100]	; 0x64
   b5718:	e897 0006 	ldmia.w	r7, {r1, r2}
   b571c:	a857      	add	r0, sp, #348	; 0x15c
   b571e:	f7ff fab7 	bl	b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5722:	f10a 0340 	add.w	r3, sl, #64	; 0x40
   b5726:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5728:	af61      	add	r7, sp, #388	; 0x184
   b572a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b572e:	2104      	movs	r1, #4
   b5730:	ab16      	add	r3, sp, #88	; 0x58
   b5732:	9716      	str	r7, [sp, #88]	; 0x58
   b5734:	9117      	str	r1, [sp, #92]	; 0x5c
   b5736:	e893 0006 	ldmia.w	r3, {r1, r2}
   b573a:	a854      	add	r0, sp, #336	; 0x150
   b573c:	f7ff faa8 	bl	b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5740:	4620      	mov	r0, r4
   b5742:	49b8      	ldr	r1, [pc, #736]	; (b5a24 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab4>)
   b5744:	f8df 832c 	ldr.w	r8, [pc, #812]	; b5a74 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb04>
   b5748:	f7fe fcde 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b574c:	a872      	add	r0, sp, #456	; 0x1c8
   b574e:	49b6      	ldr	r1, [pc, #728]	; (b5a28 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab8>)
   b5750:	f7fe fcda 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5754:	a878      	add	r0, sp, #480	; 0x1e0
   b5756:	49b5      	ldr	r1, [pc, #724]	; (b5a2c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xabc>)
   b5758:	f7fe fcd6 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b575c:	ab72      	add	r3, sp, #456	; 0x1c8
   b575e:	9314      	str	r3, [sp, #80]	; 0x50
   b5760:	2302      	movs	r3, #2
   b5762:	9315      	str	r3, [sp, #84]	; 0x54
   b5764:	af0e      	add	r7, sp, #56	; 0x38
   b5766:	aa14      	add	r2, sp, #80	; 0x50
   b5768:	ca06      	ldmia	r2, {r1, r2}
   b576a:	463b      	mov	r3, r7
   b576c:	a851      	add	r0, sp, #324	; 0x144
   b576e:	f7ff f859 	bl	b4824 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5772:	f10a 0250 	add.w	r2, sl, #80	; 0x50
   b5776:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b5778:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b577c:	2204      	movs	r2, #4
   b577e:	ab12      	add	r3, sp, #72	; 0x48
   b5780:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   b5784:	9213      	str	r2, [sp, #76]	; 0x4c
   b5786:	e893 0006 	ldmia.w	r3, {r1, r2}
   b578a:	a84e      	add	r0, sp, #312	; 0x138
   b578c:	f7ff fa80 	bl	b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway purpleLine = Railway(
   b5790:	ab4e      	add	r3, sp, #312	; 0x138
   b5792:	9302      	str	r3, [sp, #8]
   b5794:	ab51      	add	r3, sp, #324	; 0x144
   b5796:	aa57      	add	r2, sp, #348	; 0x15c
   b5798:	a95a      	add	r1, sp, #360	; 0x168
   b579a:	e9cd 4300 	strd	r4, r3, [sp]
   b579e:	48a4      	ldr	r0, [pc, #656]	; (b5a30 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xac0>)
   b57a0:	ab54      	add	r3, sp, #336	; 0x150
   b57a2:	f7ff faf5 	bl	b4d90 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b57a6:	a84e      	add	r0, sp, #312	; 0x138
   b57a8:	f7fe ffc8 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b57ac:	a851      	add	r0, sp, #324	; 0x144
   b57ae:	f7fe ffcf 	bl	b4750 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b57b2:	a878      	add	r0, sp, #480	; 0x1e0
   b57b4:	f004 fd2c 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b57b8:	a872      	add	r0, sp, #456	; 0x1c8
   b57ba:	f004 fd29 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b57be:	4620      	mov	r0, r4
   b57c0:	f004 fd26 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b57c4:	a854      	add	r0, sp, #336	; 0x150
   b57c6:	f7fe ffb9 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b57ca:	a857      	add	r0, sp, #348	; 0x15c
   b57cc:	f7fe ffb6 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b57d0:	a85a      	add	r0, sp, #360	; 0x168
   b57d2:	f7fe ff9f 	bl	b4714 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b57d6:	4b97      	ldr	r3, [pc, #604]	; (b5a34 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xac4>)
   b57d8:	937e      	str	r3, [sp, #504]	; 0x1f8
      lon = lo;
   b57da:	4b97      	ldr	r3, [pc, #604]	; (b5a38 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xac8>)
   b57dc:	937f      	str	r3, [sp, #508]	; 0x1fc
      lat = la;
   b57de:	4b97      	ldr	r3, [pc, #604]	; (b5a3c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xacc>)
   b57e0:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b57e2:	4b97      	ldr	r3, [pc, #604]	; (b5a40 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xad0>)
   b57e4:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b57e6:	4b97      	ldr	r3, [pc, #604]	; (b5a44 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xad4>)
   b57e8:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b57ea:	4b97      	ldr	r3, [pc, #604]	; (b5a48 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xad8>)
   b57ec:	9383      	str	r3, [sp, #524]	; 0x20c
);
   b57ee:	ab7e      	add	r3, sp, #504	; 0x1f8
   b57f0:	9310      	str	r3, [sp, #64]	; 0x40
   b57f2:	2308      	movs	r3, #8
   b57f4:	9311      	str	r3, [sp, #68]	; 0x44
   b57f6:	e896 0006 	ldmia.w	r6, {r1, r2}
   b57fa:	ab07      	add	r3, sp, #28
   b57fc:	a85a      	add	r0, sp, #360	; 0x168
   b57fe:	f10a 06cc 	add.w	r6, sl, #204	; 0xcc
      lat = la;
   b5802:	edcd 8a84 	vstr	s17, [sp, #528]	; 0x210
      lon = lo;
   b5806:	ed8d 8a85 	vstr	s16, [sp, #532]	; 0x214
      lat = la;
   b580a:	edcd 9a86 	vstr	s19, [sp, #536]	; 0x218
      lon = lo;
   b580e:	ed8d 9a87 	vstr	s18, [sp, #540]	; 0x21c
      lat = la;
   b5812:	edcd aa88 	vstr	s21, [sp, #544]	; 0x220
      lon = lo;
   b5816:	ed8d aa89 	vstr	s20, [sp, #548]	; 0x224
      lat = la;
   b581a:	edcd ba8a 	vstr	s23, [sp, #552]	; 0x228
      lon = lo;
   b581e:	ed8d ba8b 	vstr	s22, [sp, #556]	; 0x22c
      lat = la;
   b5822:	edcd 8a8c 	vstr	s17, [sp, #560]	; 0x230
      lon = lo;
   b5826:	ed8d 8a8d 	vstr	s16, [sp, #564]	; 0x234
   b582a:	f7fe ffc7 	bl	b47bc <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b582e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5830:	46dc      	mov	ip, fp
   b5832:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5836:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   b583a:	9b04      	ldr	r3, [sp, #16]
   b583c:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   b5840:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b5844:	2307      	movs	r3, #7
   b5846:	930f      	str	r3, [sp, #60]	; 0x3c
   b5848:	e897 0006 	ldmia.w	r7, {r1, r2}
   b584c:	a857      	add	r0, sp, #348	; 0x15c
   b584e:	f7ff fa1f 	bl	b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5852:	f10a 03e8 	add.w	r3, sl, #232	; 0xe8
   b5856:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5858:	ae61      	add	r6, sp, #388	; 0x184
   b585a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b585e:	2204      	movs	r2, #4
   b5860:	ab0c      	add	r3, sp, #48	; 0x30
   b5862:	960c      	str	r6, [sp, #48]	; 0x30
   b5864:	920d      	str	r2, [sp, #52]	; 0x34
   b5866:	e893 0006 	ldmia.w	r3, {r1, r2}
   b586a:	a854      	add	r0, sp, #336	; 0x150
   b586c:	f7ff fa10 	bl	b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5870:	4620      	mov	r0, r4
   b5872:	4976      	ldr	r1, [pc, #472]	; (b5a4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xadc>)
   b5874:	4e76      	ldr	r6, [pc, #472]	; (b5a50 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae0>)
   b5876:	f7fe fc47 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b587a:	a872      	add	r0, sp, #456	; 0x1c8
   b587c:	4975      	ldr	r1, [pc, #468]	; (b5a54 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae4>)
   b587e:	f7fe fc43 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5882:	a878      	add	r0, sp, #480	; 0x1e0
   b5884:	4974      	ldr	r1, [pc, #464]	; (b5a58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae8>)
   b5886:	f7fe fc3f 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b588a:	ab72      	add	r3, sp, #456	; 0x1c8
   b588c:	930a      	str	r3, [sp, #40]	; 0x28
   b588e:	2302      	movs	r3, #2
   b5890:	930b      	str	r3, [sp, #44]	; 0x2c
   b5892:	aa0a      	add	r2, sp, #40	; 0x28
   b5894:	ab06      	add	r3, sp, #24
   b5896:	ca06      	ldmia	r2, {r1, r2}
   b5898:	a851      	add	r0, sp, #324	; 0x144
   b589a:	f10a 0af8 	add.w	sl, sl, #248	; 0xf8
   b589e:	f7fe ffc1 	bl	b4824 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b58a2:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
   b58a6:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b58aa:	2204      	movs	r2, #4
   b58ac:	ab08      	add	r3, sp, #32
   b58ae:	f8cd 9020 	str.w	r9, [sp, #32]
   b58b2:	9209      	str	r2, [sp, #36]	; 0x24
   b58b4:	e893 0006 	ldmia.w	r3, {r1, r2}
   b58b8:	a84e      	add	r0, sp, #312	; 0x138
   b58ba:	f7ff f9e9 	bl	b4c90 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway pinkLine = Railway(
   b58be:	ab4e      	add	r3, sp, #312	; 0x138
   b58c0:	9302      	str	r3, [sp, #8]
   b58c2:	ab51      	add	r3, sp, #324	; 0x144
   b58c4:	aa57      	add	r2, sp, #348	; 0x15c
   b58c6:	a95a      	add	r1, sp, #360	; 0x168
   b58c8:	e9cd 4300 	strd	r4, r3, [sp]
   b58cc:	4863      	ldr	r0, [pc, #396]	; (b5a5c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaec>)
   b58ce:	ab54      	add	r3, sp, #336	; 0x150
   b58d0:	f7ff fa5e 	bl	b4d90 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b58d4:	a84e      	add	r0, sp, #312	; 0x138
   b58d6:	f7fe ff31 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b58da:	a851      	add	r0, sp, #324	; 0x144
   b58dc:	f7fe ff38 	bl	b4750 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b58e0:	a878      	add	r0, sp, #480	; 0x1e0
   b58e2:	f004 fc95 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b58e6:	a872      	add	r0, sp, #456	; 0x1c8
   b58e8:	f004 fc92 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b58ec:	4620      	mov	r0, r4
   b58ee:	f004 fc8f 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b58f2:	a854      	add	r0, sp, #336	; 0x150
   b58f4:	f7fe ff22 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b58f8:	a857      	add	r0, sp, #348	; 0x15c
   b58fa:	f7fe ff1f 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b58fe:	a85a      	add	r0, sp, #360	; 0x168
   b5900:	f7fe ff08 	bl	b4714 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5904:	4b56      	ldr	r3, [pc, #344]	; (b5a60 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaf0>)
std::vector<int> addressArr = std::vector<int>(slaveCountExpected, 0);
   b5906:	4957      	ldr	r1, [pc, #348]	; (b5a64 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaf4>)
   b5908:	609d      	str	r5, [r3, #8]
   b590a:	aa7e      	add	r2, sp, #504	; 0x1f8
   b590c:	e9c3 5500 	strd	r5, r5, [r3]
   b5910:	6809      	ldr	r1, [r1, #0]
   b5912:	4855      	ldr	r0, [pc, #340]	; (b5a68 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaf8>)
   b5914:	957e      	str	r5, [sp, #504]	; 0x1f8
   b5916:	ab72      	add	r3, sp, #456	; 0x1c8
   b5918:	f7fe ff2e 	bl	b4778 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b591c:	4b53      	ldr	r3, [pc, #332]	; (b5a6c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xafc>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b591e:	4954      	ldr	r1, [pc, #336]	; (b5a70 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb00>)
   b5920:	609d      	str	r5, [r3, #8]
   b5922:	e9c3 5500 	strd	r5, r5, [r3]
   b5926:	4853      	ldr	r0, [pc, #332]	; (b5a74 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb04>)
   b5928:	f002 fbc4 	bl	b80b4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b592c:	4952      	ldr	r1, [pc, #328]	; (b5a78 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb08>)
   b592e:	4853      	ldr	r0, [pc, #332]	; (b5a7c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb0c>)
   b5930:	f002 fbc0 	bl	b80b4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b5934:	4952      	ldr	r1, [pc, #328]	; (b5a80 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb10>)
   b5936:	4846      	ldr	r0, [pc, #280]	; (b5a50 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae0>)
   b5938:	f002 fbbc 	bl	b80b4 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b593c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b593e:	46a2      	mov	sl, r4
   b5940:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
   b5944:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b5948:	46c1      	mov	r9, r8
   b594a:	f8d6 c000 	ldr.w	ip, [r6]
   b594e:	f8ca c000 	str.w	ip, [sl]
   b5952:	465e      	mov	r6, fp
   b5954:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5956:	f859 3910 	ldr.w	r3, [r9], #-16
   b595a:	9305      	str	r3, [sp, #20]
   b595c:	9b04      	ldr	r3, [sp, #16]
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b595e:	f8df e148 	ldr.w	lr, [pc, #328]	; b5aa8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb38>
   b5962:	461a      	mov	r2, r3
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b5964:	4626      	mov	r6, r4
   b5966:	9b05      	ldr	r3, [sp, #20]
   b5968:	6013      	str	r3, [r2, #0]
   b596a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b596c:	af72      	add	r7, sp, #456	; 0x1c8
      constexpr __shared_count() noexcept : _M_pi(0)
   b596e:	e9ce 5500 	strd	r5, r5, [lr]
   b5972:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b5974:	f8c7 c000 	str.w	ip, [r7]
        BleUuid sUuid(svcUuid);
   b5978:	46dc      	mov	ip, fp
   b597a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b597e:	ae7e      	add	r6, sp, #504	; 0x1f8
   b5980:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5982:	9b05      	ldr	r3, [sp, #20]
   b5984:	6033      	str	r3, [r6, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5986:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5988:	9300      	str	r3, [sp, #0]
   b598a:	4670      	mov	r0, lr
   b598c:	ab72      	add	r3, sp, #456	; 0x1c8
   b598e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5992:	493c      	ldr	r1, [pc, #240]	; (b5a84 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb14>)
   b5994:	f04f 0210 	mov.w	r2, #16
   b5998:	f003 f884 	bl	b8aa4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b599c:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b5a7c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb0c>
   b59a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b59a4:	46a6      	mov	lr, r4
   b59a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b59aa:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b59ae:	f8dc e000 	ldr.w	lr, [ip]
   b59b2:	f8ca e000 	str.w	lr, [sl]
   b59b6:	46dc      	mov	ip, fp
   b59b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b59bc:	9b04      	ldr	r3, [sp, #16]
   b59be:	f8d8 9000 	ldr.w	r9, [r8]
   b59c2:	f8c3 9000 	str.w	r9, [r3]
        BleUuid cUuid(charUuid);
   b59c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b59c8:	f8df 80e0 	ldr.w	r8, [pc, #224]	; b5aac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb3c>
   b59cc:	f50d 7ce4 	add.w	ip, sp, #456	; 0x1c8
        BleUuid sUuid(svcUuid);
   b59d0:	465c      	mov	r4, fp
        BleUuid cUuid(charUuid);
   b59d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
      constexpr __shared_count() noexcept : _M_pi(0)
   b59d6:	e9c8 5500 	strd	r5, r5, [r8]
   b59da:	f8c7 e000 	str.w	lr, [r7]
        BleUuid sUuid(svcUuid);
   b59de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b59e0:	af7e      	add	r7, sp, #504	; 0x1f8
   b59e2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b59e4:	4b28      	ldr	r3, [pc, #160]	; (b5a88 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb18>)
        BleUuid sUuid(svcUuid);
   b59e6:	f8c6 9000 	str.w	r9, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b59ea:	9301      	str	r3, [sp, #4]
   b59ec:	ab7e      	add	r3, sp, #504	; 0x1f8
   b59ee:	f04f 0204 	mov.w	r2, #4
   b59f2:	9300      	str	r3, [sp, #0]
   b59f4:	4640      	mov	r0, r8
   b59f6:	ab72      	add	r3, sp, #456	; 0x1c8
   b59f8:	4924      	ldr	r1, [pc, #144]	; (b5a8c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb1c>)
   b59fa:	9502      	str	r5, [sp, #8]
   b59fc:	f003 f852 	bl	b8aa4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b5a00:	4923      	ldr	r1, [pc, #140]	; (b5a90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb20>)
   b5a02:	4824      	ldr	r0, [pc, #144]	; (b5a94 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb24>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b5a04:	4c24      	ldr	r4, [pc, #144]	; (b5a98 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb28>)
   b5a06:	f003 fd70 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
   b5a0a:	4824      	ldr	r0, [pc, #144]	; (b5a9c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb2c>)
   b5a0c:	f003 fb7a 	bl	b9104 <_ZN9IPAddressC1Ev>
   b5a10:	491f      	ldr	r1, [pc, #124]	; (b5a90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb20>)
   b5a12:	4823      	ldr	r0, [pc, #140]	; (b5aa0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb30>)
   b5a14:	f003 fd69 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
   b5a18:	491d      	ldr	r1, [pc, #116]	; (b5a90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb20>)
   b5a1a:	4822      	ldr	r0, [pc, #136]	; (b5aa4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb34>)
   b5a1c:	f003 fd65 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
   b5a20:	e046      	b.n	b5ab0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb40>
   b5a22:	bf00      	nop
   b5a24:	000bd435 	.word	0x000bd435
   b5a28:	000bd43c 	.word	0x000bd43c
   b5a2c:	000bd443 	.word	0x000bd443
   b5a30:	2003e54c 	.word	0x2003e54c
   b5a34:	42276a76 	.word	0x42276a76
   b5a38:	c2af692b 	.word	0xc2af692b
   b5a3c:	42276b5f 	.word	0x42276b5f
   b5a40:	c2af56cd 	.word	0xc2af56cd
   b5a44:	42278a2d 	.word	0x42278a2d
   b5a48:	c2af56d8 	.word	0xc2af56d8
   b5a4c:	000bd44a 	.word	0x000bd44a
   b5a50:	20035518 	.word	0x20035518
   b5a54:	000bd44f 	.word	0x000bd44f
   b5a58:	000bd456 	.word	0x000bd456
   b5a5c:	2003e4e0 	.word	0x2003e4e0
   b5a60:	2003e5b8 	.word	0x2003e5b8
   b5a64:	200352f0 	.word	0x200352f0
   b5a68:	2003552c 	.word	0x2003552c
   b5a6c:	2003e698 	.word	0x2003e698
   b5a70:	000bd45d 	.word	0x000bd45d
   b5a74:	200354f0 	.word	0x200354f0
   b5a78:	000bd482 	.word	0x000bd482
   b5a7c:	20035504 	.word	0x20035504
   b5a80:	000bd4a7 	.word	0x000bd4a7
   b5a84:	000bd4cc 	.word	0x000bd4cc
   b5a88:	000b48f9 	.word	0x000b48f9
   b5a8c:	000bd4cf 	.word	0x000bd4cf
   b5a90:	000bd6e6 	.word	0x000bd6e6
   b5a94:	2003e630 	.word	0x2003e630
   b5a98:	20037f14 	.word	0x20037f14
   b5a9c:	2003e640 	.word	0x2003e640
   b5aa0:	2003e658 	.word	0x2003e658
   b5aa4:	2003e66c 	.word	0x2003e66c
   b5aa8:	2003e6a8 	.word	0x2003e6a8
   b5aac:	2003e690 	.word	0x2003e690
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b5ab0:	4947      	ldr	r1, [pc, #284]	; (b5bd0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc60>)
   b5ab2:	4848      	ldr	r0, [pc, #288]	; (b5bd4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc64>)
   b5ab4:	f003 fd19 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
HttpClient http;
   b5ab8:	4847      	ldr	r0, [pc, #284]	; (b5bd8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc68>)
   b5aba:	f001 f837 	bl	b6b2c <_ZN10HttpClientC1Ev>
   b5abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5ac2:	9300      	str	r3, [sp, #0]
   b5ac4:	f242 7210 	movw	r2, #10000	; 0x2710
   b5ac8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b5acc:	4b43      	ldr	r3, [pc, #268]	; (b5bdc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc6c>)
   b5ace:	4620      	mov	r0, r4
   b5ad0:	f001 fa04 	bl	b6edc <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b5ad4:	4b42      	ldr	r3, [pc, #264]	; (b5be0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc70>)
String SSID = "";
   b5ad6:	493e      	ldr	r1, [pc, #248]	; (b5bd0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc60>)
   b5ad8:	6023      	str	r3, [r4, #0]
   b5ada:	4842      	ldr	r0, [pc, #264]	; (b5be4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc74>)
   b5adc:	f003 fd05 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
String password = "";
   b5ae0:	493b      	ldr	r1, [pc, #236]	; (b5bd0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc60>)
   b5ae2:	4841      	ldr	r0, [pc, #260]	; (b5be8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc78>)
   b5ae4:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   b5ae8:	ecbd 8b0e 	vpop	{d8-d14}
   b5aec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
String password = "";
   b5af0:	f003 bcfb 	b.w	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
	_M_deallocate(_M_impl._M_start,
   b5af4:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b5af6:	b118      	cbz	r0, b5b00 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb90>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b5af8:	68a1      	ldr	r1, [r4, #8]
   b5afa:	1a09      	subs	r1, r1, r0
   b5afc:	f7fe fad1 	bl	b40a2 <_ZdlPvj>
Railway pinkLine = Railway(
   b5b00:	483a      	ldr	r0, [pc, #232]	; (b5bec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc7c>)
   b5b02:	f7ff f87d 	bl	b4c00 <_ZN7RailwayD1Ev>
Railway purpleLine = Railway(
   b5b06:	483a      	ldr	r0, [pc, #232]	; (b5bf0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc80>)
   b5b08:	f7ff f87a 	bl	b4c00 <_ZN7RailwayD1Ev>
Railway orangeLine = Railway(
   b5b0c:	4839      	ldr	r0, [pc, #228]	; (b5bf4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc84>)
   b5b0e:	f7ff f877 	bl	b4c00 <_ZN7RailwayD1Ev>
Railway greenLine = Railway(
   b5b12:	4839      	ldr	r0, [pc, #228]	; (b5bf8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc88>)
   b5b14:	f7ff f874 	bl	b4c00 <_ZN7RailwayD1Ev>
Railway brownLine = Railway(
   b5b18:	4838      	ldr	r0, [pc, #224]	; (b5bfc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc8c>)
   b5b1a:	f7ff f871 	bl	b4c00 <_ZN7RailwayD1Ev>
Railway blueLine = Railway(
   b5b1e:	4838      	ldr	r0, [pc, #224]	; (b5c00 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc90>)
   b5b20:	f7ff f86e 	bl	b4c00 <_ZN7RailwayD1Ev>
Railway redLine = Railway(
   b5b24:	4837      	ldr	r0, [pc, #220]	; (b5c04 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc94>)
   b5b26:	f7ff f86b 	bl	b4c00 <_ZN7RailwayD1Ev>
        if (wakeupSource_) {
   b5b2a:	4b37      	ldr	r3, [pc, #220]	; (b5c08 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc98>)
   b5b2c:	6818      	ldr	r0, [r3, #0]
   b5b2e:	2800      	cmp	r0, #0
   b5b30:	d047      	beq.n	b5bc2 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc52>
   b5b32:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   b5b36:	ecbd 8b0e 	vpop	{d8-d14}
   b5b3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            free(wakeupSource_);
   b5b3e:	f002 b865 	b.w	b7c0c <free>
String password = "";
   b5b42:	4829      	ldr	r0, [pc, #164]	; (b5be8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc78>)
   b5b44:	f003 fc86 	bl	b9454 <_ZN6StringD1Ev>
String SSID = "";
   b5b48:	4826      	ldr	r0, [pc, #152]	; (b5be4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc74>)
   b5b4a:	f003 fc83 	bl	b9454 <_ZN6StringD1Ev>
JsonParserStatic<10000, 1000> parser;
   b5b4e:	482f      	ldr	r0, [pc, #188]	; (b5c0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc9c>)
   b5b50:	f7fe fab2 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5b54:	4b20      	ldr	r3, [pc, #128]	; (b5bd8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc68>)
   b5b56:	4a2e      	ldr	r2, [pc, #184]	; (b5c10 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xca0>)
	if (_M_pi != nullptr)
   b5b58:	699c      	ldr	r4, [r3, #24]
   b5b5a:	601a      	str	r2, [r3, #0]
   b5b5c:	b17c      	cbz	r4, b5b7e <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc0e>
      if (--_M_use_count == 0)
   b5b5e:	6863      	ldr	r3, [r4, #4]
   b5b60:	3b01      	subs	r3, #1
   b5b62:	6063      	str	r3, [r4, #4]
   b5b64:	b95b      	cbnz	r3, b5b7e <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc0e>
          _M_dispose();
   b5b66:	6823      	ldr	r3, [r4, #0]
   b5b68:	4620      	mov	r0, r4
   b5b6a:	689b      	ldr	r3, [r3, #8]
   b5b6c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5b6e:	68a3      	ldr	r3, [r4, #8]
   b5b70:	3b01      	subs	r3, #1
   b5b72:	60a3      	str	r3, [r4, #8]
   b5b74:	b91b      	cbnz	r3, b5b7e <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc0e>
            _M_destroy();
   b5b76:	6823      	ldr	r3, [r4, #0]
   b5b78:	4620      	mov	r0, r4
   b5b7a:	68db      	ldr	r3, [r3, #12]
   b5b7c:	4798      	blx	r3
   b5b7e:	4815      	ldr	r0, [pc, #84]	; (b5bd4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc64>)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5b80:	4c24      	ldr	r4, [pc, #144]	; (b5c14 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xca4>)
   b5b82:	f003 fc67 	bl	b9454 <_ZN6StringD1Ev>
} http_request_t;
   b5b86:	4824      	ldr	r0, [pc, #144]	; (b5c18 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xca8>)
   b5b88:	f003 fc64 	bl	b9454 <_ZN6StringD1Ev>
   b5b8c:	4823      	ldr	r0, [pc, #140]	; (b5c1c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcac>)
   b5b8e:	f003 fc61 	bl	b9454 <_ZN6StringD1Ev>
   b5b92:	4823      	ldr	r0, [pc, #140]	; (b5c20 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcb0>)
   b5b94:	f003 fc5e 	bl	b9454 <_ZN6StringD1Ev>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b5b98:	4822      	ldr	r0, [pc, #136]	; (b5c24 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcb4>)
   b5b9a:	f002 fc6a 	bl	b8472 <_ZN8particle17BleCharacteristicD1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b5b9e:	4822      	ldr	r0, [pc, #136]	; (b5c28 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcb8>)
   b5ba0:	f002 fc67 	bl	b8472 <_ZN8particle17BleCharacteristicD1Ev>
      }
   b5ba4:	4821      	ldr	r0, [pc, #132]	; (b5c2c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcbc>)
   b5ba6:	f7fe fdc9 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5baa:	4821      	ldr	r0, [pc, #132]	; (b5c30 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcc0>)
   b5bac:	f7fe fdc6 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5bb0:	e9d4 5600 	ldrd	r5, r6, [r4]
	  for (; __first != __last; ++__first)
   b5bb4:	42ae      	cmp	r6, r5
   b5bb6:	d09d      	beq.n	b5af4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb84>
      __pointer->~_Tp();
   b5bb8:	4628      	mov	r0, r5
   b5bba:	f7ff f821 	bl	b4c00 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b5bbe:	356c      	adds	r5, #108	; 0x6c
   b5bc0:	e7f8      	b.n	b5bb4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc44>
   b5bc2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   b5bc6:	ecbd 8b0e 	vpop	{d8-d14}
   b5bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5bce:	bf00      	nop
   b5bd0:	000bd6e6 	.word	0x000bd6e6
   b5bd4:	2003e680 	.word	0x2003e680
   b5bd8:	2003568c 	.word	0x2003568c
   b5bdc:	2003a650 	.word	0x2003a650
   b5be0:	000bd590 	.word	0x000bd590
   b5be4:	200354d4 	.word	0x200354d4
   b5be8:	2003e4d0 	.word	0x2003e4d0
   b5bec:	2003e4e0 	.word	0x2003e4e0
   b5bf0:	2003e54c 	.word	0x2003e54c
   b5bf4:	20037ea8 	.word	0x20037ea8
   b5bf8:	20035618 	.word	0x20035618
   b5bfc:	200355a8 	.word	0x200355a8
   b5c00:	2003553c 	.word	0x2003553c
   b5c04:	2003e5c4 	.word	0x2003e5c4
   b5c08:	200354e4 	.word	0x200354e4
   b5c0c:	20037f14 	.word	0x20037f14
   b5c10:	000bd9f0 	.word	0x000bd9f0
   b5c14:	2003e5b8 	.word	0x2003e5b8
   b5c18:	2003e66c 	.word	0x2003e66c
   b5c1c:	2003e658 	.word	0x2003e658
   b5c20:	2003e630 	.word	0x2003e630
   b5c24:	2003e690 	.word	0x2003e690
   b5c28:	2003e6a8 	.word	0x2003e6a8
   b5c2c:	2003e698 	.word	0x2003e698
   b5c30:	2003552c 	.word	0x2003552c

000b5c34 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b5c34:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b5c36:	b510      	push	{r4, lr}
   b5c38:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b5c3a:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b5c3e:	d005      	beq.n	b5c4c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b5c40:	4601      	mov	r1, r0
   b5c42:	4622      	mov	r2, r4
   b5c44:	4618      	mov	r0, r3
   b5c46:	f005 faa1 	bl	bb18c <memmove>
   b5c4a:	4603      	mov	r3, r0
	}
   b5c4c:	1918      	adds	r0, r3, r4
   b5c4e:	bd10      	pop	{r4, pc}

000b5c50 <_ZN7RailwayC1ERKS_>:
class Railway{
   b5c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5c54:	460d      	mov	r5, r1
   b5c56:	4604      	mov	r4, r0
   b5c58:	f7fe fe18 	bl	b488c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c5c:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5c60:	2600      	movs	r6, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c62:	1ac9      	subs	r1, r1, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5c64:	e9c4 6603 	strd	r6, r6, [r4, #12]
   b5c68:	6166      	str	r6, [r4, #20]
      { _M_create_storage(__n); }
   b5c6a:	1089      	asrs	r1, r1, #2
   b5c6c:	f104 000c 	add.w	r0, r4, #12
   b5c70:	f7fe ffa6 	bl	b4bc0 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
			      _Category>::__copy_m(__first, __last, __result);
   b5c74:	68e2      	ldr	r2, [r4, #12]
   b5c76:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
   b5c7a:	f7ff ffdb 	bl	b5c34 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b5c7e:	f105 0118 	add.w	r1, r5, #24
	this->_M_impl._M_finish =
   b5c82:	6120      	str	r0, [r4, #16]
   b5c84:	f104 0018 	add.w	r0, r4, #24
   b5c88:	f7fe ffe8 	bl	b4c5c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c8c:	e9d5 3709 	ldrd	r3, r7, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5c90:	4826      	ldr	r0, [pc, #152]	; (b5d2c <_ZN7RailwayC1ERKS_+0xdc>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5c92:	62e6      	str	r6, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c94:	1aff      	subs	r7, r7, r3
   b5c96:	10bb      	asrs	r3, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5c98:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5c9c:	4358      	muls	r0, r3
   b5c9e:	f7fe fa21 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5ca2:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5ca6:	4407      	add	r7, r0
   b5ca8:	62e7      	str	r7, [r4, #44]	; 0x2c
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5caa:	e9d5 7809 	ldrd	r7, r8, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5cae:	4606      	mov	r6, r0
   b5cb0:	45b8      	cmp	r8, r7
   b5cb2:	d007      	beq.n	b5cc4 <_ZN7RailwayC1ERKS_+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5cb4:	b11e      	cbz	r6, b5cbe <_ZN7RailwayC1ERKS_+0x6e>
   b5cb6:	4639      	mov	r1, r7
   b5cb8:	4630      	mov	r0, r6
   b5cba:	f7fe ffcf 	bl	b4c5c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5cbe:	360c      	adds	r6, #12
   b5cc0:	370c      	adds	r7, #12
   b5cc2:	e7f5      	b.n	b5cb0 <_ZN7RailwayC1ERKS_+0x60>
	this->_M_impl._M_finish =
   b5cc4:	62a6      	str	r6, [r4, #40]	; 0x28
   b5cc6:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b5cca:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b5cce:	f7fe fa93 	bl	b41f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5cd2:	e9d5 3712 	ldrd	r3, r7, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5cd6:	4815      	ldr	r0, [pc, #84]	; (b5d2c <_ZN7RailwayC1ERKS_+0xdc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5cd8:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5cda:	2300      	movs	r3, #0
   b5cdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b5ce0:	6523      	str	r3, [r4, #80]	; 0x50
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5ce2:	10fb      	asrs	r3, r7, #3
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5ce4:	4358      	muls	r0, r3
   b5ce6:	f7fe fa37 	bl	b4158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5cea:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5cee:	4407      	add	r7, r0
   b5cf0:	6527      	str	r7, [r4, #80]	; 0x50
   b5cf2:	e9d5 7812 	ldrd	r7, r8, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5cf6:	4606      	mov	r6, r0
   b5cf8:	45b8      	cmp	r8, r7
   b5cfa:	d007      	beq.n	b5d0c <_ZN7RailwayC1ERKS_+0xbc>
   b5cfc:	b11e      	cbz	r6, b5d06 <_ZN7RailwayC1ERKS_+0xb6>
   b5cfe:	4639      	mov	r1, r7
   b5d00:	4630      	mov	r0, r6
   b5d02:	f7fe fa79 	bl	b41f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b5d06:	3618      	adds	r6, #24
   b5d08:	3718      	adds	r7, #24
   b5d0a:	e7f5      	b.n	b5cf8 <_ZN7RailwayC1ERKS_+0xa8>
	this->_M_impl._M_finish =
   b5d0c:	64e6      	str	r6, [r4, #76]	; 0x4c
   b5d0e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b5d10:	6563      	str	r3, [r4, #84]	; 0x54
   b5d12:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b5d14:	65a3      	str	r3, [r4, #88]	; 0x58
   b5d16:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b5d18:	65e3      	str	r3, [r4, #92]	; 0x5c
   b5d1a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b5d1c:	6623      	str	r3, [r4, #96]	; 0x60
   b5d1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b5d20:	6663      	str	r3, [r4, #100]	; 0x64
   b5d22:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b5d24:	66a3      	str	r3, [r4, #104]	; 0x68
   b5d26:	4620      	mov	r0, r4
   b5d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5d2c:	aaaaaaab 	.word	0xaaaaaaab

000b5d30 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b5d30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5d34:	eba1 0800 	sub.w	r8, r1, r0
   b5d38:	496b      	ldr	r1, [pc, #428]	; (b5ee8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1b8>)
   b5d3a:	f8df a1b4 	ldr.w	sl, [pc, #436]	; b5ef0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1c0>
   b5d3e:	ea4f 08a8 	mov.w	r8, r8, asr #2
	__copy_m(_II __first, _II __last, _OI __result)
   b5d42:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5d44:	fb01 f808 	mul.w	r8, r1, r8
   b5d48:	4614      	mov	r4, r2
   b5d4a:	f1b8 0f00 	cmp.w	r8, #0
   b5d4e:	f340 80c6 	ble.w	b5ede <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1ae>
   b5d52:	4629      	mov	r1, r5
   b5d54:	4620      	mov	r0, r4
   b5d56:	f7fe fa8b 	bl	b4270 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      if (&__x != this)
   b5d5a:	42a5      	cmp	r5, r4
   b5d5c:	d025      	beq.n	b5daa <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x7a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5d5e:	e9d5 9103 	ldrd	r9, r1, [r5, #12]
			 - this->_M_impl._M_start); }
   b5d62:	68e2      	ldr	r2, [r4, #12]
   b5d64:	6963      	ldr	r3, [r4, #20]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5d66:	eba1 0609 	sub.w	r6, r1, r9
			 - this->_M_impl._M_start); }
   b5d6a:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b5d6c:	429e      	cmp	r6, r3
   b5d6e:	d943      	bls.n	b5df8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xc8>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5d70:	2e00      	cmp	r6, #0
   b5d72:	d03f      	beq.n	b5df4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xc4>
	if (__n > this->_M_max_size())
   b5d74:	4b5d      	ldr	r3, [pc, #372]	; (b5eec <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1bc>)
   b5d76:	429e      	cmp	r6, r3
   b5d78:	d901      	bls.n	b5d7e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x4e>
	  std::__throw_bad_alloc();
   b5d7a:	f004 fa11 	bl	ba1a0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5d7e:	4630      	mov	r0, r6
   b5d80:	9101      	str	r1, [sp, #4]
   b5d82:	f7fe f988 	bl	b4096 <_Znwj>
   b5d86:	9901      	ldr	r1, [sp, #4]
   b5d88:	4607      	mov	r7, r0
			      _Category>::__copy_m(__first, __last, __result);
   b5d8a:	463a      	mov	r2, r7
   b5d8c:	4648      	mov	r0, r9
   b5d8e:	f7ff ff51 	bl	b5c34 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5d92:	68e0      	ldr	r0, [r4, #12]
	if (__p)
   b5d94:	b118      	cbz	r0, b5d9e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x6e>
			    - this->_M_impl._M_start);
   b5d96:	6961      	ldr	r1, [r4, #20]
	::operator delete(__p
   b5d98:	1a09      	subs	r1, r1, r0
   b5d9a:	f7fe f982 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b5d9e:	60e7      	str	r7, [r4, #12]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b5da0:	4437      	add	r7, r6
   b5da2:	6167      	str	r7, [r4, #20]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b5da4:	68e3      	ldr	r3, [r4, #12]
   b5da6:	4433      	add	r3, r6
   b5da8:	6123      	str	r3, [r4, #16]
   b5daa:	f105 0118 	add.w	r1, r5, #24
   b5dae:	f104 0018 	add.w	r0, r4, #24
   b5db2:	f7fe ff97 	bl	b4ce4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      if (&__x != this)
   b5db6:	42a5      	cmp	r5, r4
   b5db8:	d042      	beq.n	b5e40 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x110>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5dba:	e9d5 6b09 	ldrd	r6, fp, [r5, #36]	; 0x24
			 - this->_M_impl._M_start); }
   b5dbe:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b5dc0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5dc2:	ebab 0906 	sub.w	r9, fp, r6
			 - this->_M_impl._M_start); }
   b5dc6:	1a89      	subs	r1, r1, r2
	  if (__xlen > capacity())
   b5dc8:	4549      	cmp	r1, r9
   b5dca:	d256      	bcs.n	b5e7a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x14a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5dcc:	ea4f 00a9 	mov.w	r0, r9, asr #2
	  pointer __result = this->_M_allocate(__n);
   b5dd0:	fb0a f000 	mul.w	r0, sl, r0
   b5dd4:	f7fe f986 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b5dd8:	4607      	mov	r7, r0
	  _ForwardIterator __cur = __result;
   b5dda:	4602      	mov	r2, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b5ddc:	45b3      	cmp	fp, r6
   b5dde:	d01f      	beq.n	b5e20 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xf0>
   b5de0:	b12a      	cbz	r2, b5dee <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xbe>
   b5de2:	4610      	mov	r0, r2
   b5de4:	4631      	mov	r1, r6
   b5de6:	9201      	str	r2, [sp, #4]
   b5de8:	f7fe ff38 	bl	b4c5c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5dec:	9a01      	ldr	r2, [sp, #4]
   b5dee:	320c      	adds	r2, #12
   b5df0:	360c      	adds	r6, #12
   b5df2:	e7f3      	b.n	b5ddc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xac>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5df4:	4637      	mov	r7, r6
   b5df6:	e7c8      	b.n	b5d8a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x5a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5df8:	6923      	ldr	r3, [r4, #16]
   b5dfa:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b5dfc:	429e      	cmp	r6, r3
   b5dfe:	d803      	bhi.n	b5e08 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xd8>
   b5e00:	4648      	mov	r0, r9
   b5e02:	f7ff ff17 	bl	b5c34 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
    { return std::uninitialized_copy(__first, __last, __result); }
   b5e06:	e7cd      	b.n	b5da4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x74>
   b5e08:	eb09 0103 	add.w	r1, r9, r3
   b5e0c:	4648      	mov	r0, r9
   b5e0e:	f7ff ff11 	bl	b5c34 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b5e12:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
   b5e16:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
   b5e1a:	1a10      	subs	r0, r2, r0
   b5e1c:	4418      	add	r0, r3
   b5e1e:	e7f0      	b.n	b5e02 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xd2>
	__destroy(__first, __last);
   b5e20:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b5e24:	f7fe fee1 	bl	b4bea <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	      _M_deallocate(this->_M_impl._M_start,
   b5e28:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b5e2a:	b118      	cbz	r0, b5e34 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x104>
			    - this->_M_impl._M_start);
   b5e2c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b5e2e:	1a09      	subs	r1, r1, r0
   b5e30:	f7fe f937 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b5e34:	6267      	str	r7, [r4, #36]	; 0x24
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b5e36:	444f      	add	r7, r9
   b5e38:	62e7      	str	r7, [r4, #44]	; 0x2c
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b5e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b5e3c:	444b      	add	r3, r9
   b5e3e:	62a3      	str	r3, [r4, #40]	; 0x28
	this->_M_assign(__str);
   b5e40:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b5e44:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b5e48:	f004 fa00 	bl	ba24c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b5e4c:	f105 0148 	add.w	r1, r5, #72	; 0x48
   b5e50:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b5e54:	f7fe fa5e 	bl	b4314 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
   b5e58:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b5e5a:	6563      	str	r3, [r4, #84]	; 0x54
   b5e5c:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b5e5e:	65a3      	str	r3, [r4, #88]	; 0x58
   b5e60:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b5e62:	65e3      	str	r3, [r4, #92]	; 0x5c
   b5e64:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b5e66:	6623      	str	r3, [r4, #96]	; 0x60
   b5e68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b5e6a:	6663      	str	r3, [r4, #100]	; 0x64
   b5e6c:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b5e6e:	66a3      	str	r3, [r4, #104]	; 0x68
	      ++__first;
   b5e70:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b5e72:	346c      	adds	r4, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5e74:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b5e78:	e767      	b.n	b5d4a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5e7a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   b5e7c:	1abf      	subs	r7, r7, r2
	  else if (size() >= __xlen)
   b5e7e:	45b9      	cmp	r9, r7
   b5e80:	d80c      	bhi.n	b5e9c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x16c>
			      _Category>::__copy_m(__first, __last, __result);
   b5e82:	4630      	mov	r0, r6
   b5e84:	4659      	mov	r1, fp
   b5e86:	f7fe ff65 	bl	b4d54 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      : _M_current(__i) { }
   b5e8a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b5e8c:	4606      	mov	r6, r0
	  for (; __first != __last; ++__first)
   b5e8e:	42b7      	cmp	r7, r6
   b5e90:	d0d3      	beq.n	b5e3a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x10a>
      }
   b5e92:	4630      	mov	r0, r6
   b5e94:	f7fe fc52 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b5e98:	360c      	adds	r6, #12
	return *this;
   b5e9a:	e7f8      	b.n	b5e8e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x15e>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5e9c:	10bf      	asrs	r7, r7, #2
   b5e9e:	fb0a f707 	mul.w	r7, sl, r7
   b5ea2:	2f00      	cmp	r7, #0
   b5ea4:	dd09      	ble.n	b5eba <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x18a>
	      *__result = *__first;
   b5ea6:	4631      	mov	r1, r6
   b5ea8:	4610      	mov	r0, r2
   b5eaa:	9201      	str	r2, [sp, #4]
   b5eac:	f7fe ff1a 	bl	b4ce4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__result;
   b5eb0:	9a01      	ldr	r2, [sp, #4]
	      ++__first;
   b5eb2:	360c      	adds	r6, #12
	      ++__result;
   b5eb4:	320c      	adds	r2, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5eb6:	3f01      	subs	r7, #1
   b5eb8:	e7f3      	b.n	b5ea2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x172>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5eba:	e9d4 6709 	ldrd	r6, r7, [r4, #36]	; 0x24
   b5ebe:	1bb9      	subs	r1, r7, r6
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b5ec0:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					  __x._M_impl._M_finish,
   b5ec2:	6aab      	ldr	r3, [r5, #40]	; 0x28
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b5ec4:	440e      	add	r6, r1
	      for (; __first != __last; ++__first, (void)++__cur)
   b5ec6:	42b3      	cmp	r3, r6
   b5ec8:	d0b7      	beq.n	b5e3a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x10a>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5eca:	b12f      	cbz	r7, b5ed8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1a8>
   b5ecc:	4631      	mov	r1, r6
   b5ece:	4638      	mov	r0, r7
   b5ed0:	9301      	str	r3, [sp, #4]
   b5ed2:	f7fe fec3 	bl	b4c5c <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5ed6:	9b01      	ldr	r3, [sp, #4]
   b5ed8:	360c      	adds	r6, #12
   b5eda:	370c      	adds	r7, #12
   b5edc:	e7f3      	b.n	b5ec6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x196>
	}
   b5ede:	4620      	mov	r0, r4
   b5ee0:	b003      	add	sp, #12
   b5ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5ee6:	bf00      	nop
   b5ee8:	684bda13 	.word	0x684bda13
   b5eec:	7ffffffc 	.word	0x7ffffffc
   b5ef0:	aaaaaaab 	.word	0xaaaaaaab

000b5ef4 <setup>:
void setup() {
   b5ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5ef8:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
  Serial.begin(9600);
   b5efc:	f003 ff9c 	bl	b9e38 <_Z16_fetch_usbserialv>
   b5f00:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5f04:	f003 ff8c 	bl	b9e20 <_ZN9USBSerial5beginEl>
  delay(500);
   b5f08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b5f0c:	f001 fec6 	bl	b7c9c <delay>
  BLE.on();
   b5f10:	f002 f9be 	bl	b8290 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5f14:	f002 fa06 	bl	b8324 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   b5f18:	f002 f9ba 	bl	b8290 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5f1c:	4a82      	ldr	r2, [pc, #520]	; (b6128 <setup+0x234>)
   b5f1e:	4d83      	ldr	r5, [pc, #524]	; (b612c <setup+0x238>)
   b5f20:	4601      	mov	r1, r0
   b5f22:	a80d      	add	r0, sp, #52	; 0x34
   b5f24:	f002 fee8 	bl	b8cf8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5f28:	a80d      	add	r0, sp, #52	; 0x34
   b5f2a:	f002 faa2 	bl	b8472 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b5f2e:	f002 f9af 	bl	b8290 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5f32:	4a7f      	ldr	r2, [pc, #508]	; (b6130 <setup+0x23c>)
   b5f34:	4601      	mov	r1, r0
   b5f36:	a80d      	add	r0, sp, #52	; 0x34
   b5f38:	f002 fede 	bl	b8cf8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5f3c:	a80d      	add	r0, sp, #52	; 0x34
   b5f3e:	f002 fa98 	bl	b8472 <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   b5f42:	a805      	add	r0, sp, #20
   b5f44:	f002 fbcb 	bl	b86de <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b5f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5f4a:	ac08      	add	r4, sp, #32
   b5f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5f4e:	682e      	ldr	r6, [r5, #0]
   b5f50:	6026      	str	r6, [r4, #0]
        BleUuid tempUUID(uuid);
   b5f52:	ad08      	add	r5, sp, #32
   b5f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5f56:	ac0d      	add	r4, sp, #52	; 0x34
   b5f58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5f5a:	a80d      	add	r0, sp, #52	; 0x34
        BleUuid tempUUID(uuid);
   b5f5c:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5f5e:	f002 f80b 	bl	b7f78 <_ZNK8particle7BleUuid4typeEv>
   b5f62:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b5f64:	a80d      	add	r0, sp, #52	; 0x34
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5f66:	2c00      	cmp	r4, #0
   b5f68:	d165      	bne.n	b6036 <setup+0x142>
            uint16_t uuid16 = tempUUID.shorted();
   b5f6a:	f002 f821 	bl	b7fb0 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5f6e:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b5f70:	f8ad 0010 	strh.w	r0, [sp, #16]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5f74:	2302      	movs	r3, #2
   b5f76:	aa04      	add	r2, sp, #16
   b5f78:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b5f7a:	a805      	add	r0, sp, #20
   b5f7c:	f002 fba4 	bl	b86c8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   b5f80:	f002 f986 	bl	b8290 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5f84:	2200      	movs	r2, #0
   b5f86:	a905      	add	r1, sp, #20
   b5f88:	f002 fa16 	bl	b83b8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  request.hostname = "trek.thewcl.com";
   b5f8c:	4c69      	ldr	r4, [pc, #420]	; (b6134 <setup+0x240>)

    //loopIndex must point to either the first or last checkpoint, tripleIndex cannot be 0
    void setLoopIndex(int triple, int loop){
        tripleIndex = triple;
   b5f8e:	4e6a      	ldr	r6, [pc, #424]	; (b6138 <setup+0x244>)
  acquireWireBuffer();
   b5f90:	a80d      	add	r0, sp, #52	; 0x34
   b5f92:	f7fe fba9 	bl	b46e8 <_Z17acquireWireBufferv>
  Wire.begin();
   b5f96:	f004 f89d 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b5f9a:	f003 f839 	bl	b9010 <_ZN7TwoWire5beginEv>
  request.hostname = "trek.thewcl.com";
   b5f9e:	4967      	ldr	r1, [pc, #412]	; (b613c <setup+0x248>)
   b5fa0:	4620      	mov	r0, r4
   b5fa2:	f003 fac5 	bl	b9530 <_ZN6StringaSEPKc>
  request.port = 80;
   b5fa6:	2350      	movs	r3, #80	; 0x50
   b5fa8:	4965      	ldr	r1, [pc, #404]	; (b6140 <setup+0x24c>)
   b5faa:	63a3      	str	r3, [r4, #56]	; 0x38
   b5fac:	4c65      	ldr	r4, [pc, #404]	; (b6144 <setup+0x250>)
        loopIndex = loop;
   b5fae:	2502      	movs	r5, #2
   b5fb0:	2006      	movs	r0, #6
   b5fb2:	e9c1 5015 	strd	r5, r0, [r1, #84]	; 0x54
   b5fb6:	e9c4 5015 	strd	r5, r0, [r4, #84]	; 0x54
        tripleIndex = triple;
   b5fba:	4d63      	ldr	r5, [pc, #396]	; (b6148 <setup+0x254>)
        loopIndex = loop;
   b5fbc:	2203      	movs	r2, #3
   b5fbe:	2307      	movs	r3, #7
  railways = {brownLine, orangeLine, pinkLine, purpleLine, greenLine};
   b5fc0:	a80d      	add	r0, sp, #52	; 0x34
   b5fc2:	e9c6 2315 	strd	r2, r3, [r6, #84]	; 0x54
   b5fc6:	e9c5 2315 	strd	r2, r3, [r5, #84]	; 0x54
   b5fca:	f7ff fe41 	bl	b5c50 <_ZN7RailwayC1ERKS_>
   b5fce:	4631      	mov	r1, r6
   b5fd0:	a828      	add	r0, sp, #160	; 0xa0
   b5fd2:	f7ff fe3d 	bl	b5c50 <_ZN7RailwayC1ERKS_>
   b5fd6:	4629      	mov	r1, r5
   b5fd8:	a843      	add	r0, sp, #268	; 0x10c
   b5fda:	f7ff fe39 	bl	b5c50 <_ZN7RailwayC1ERKS_>
   b5fde:	4621      	mov	r1, r4
   b5fe0:	a85e      	add	r0, sp, #376	; 0x178
			 - this->_M_impl._M_start); }
   b5fe2:	4c5a      	ldr	r4, [pc, #360]	; (b614c <setup+0x258>)
   b5fe4:	f7ff fe34 	bl	b5c50 <_ZN7RailwayC1ERKS_>
   b5fe8:	4959      	ldr	r1, [pc, #356]	; (b6150 <setup+0x25c>)
   b5fea:	a879      	add	r0, sp, #484	; 0x1e4
   b5fec:	f7ff fe30 	bl	b5c50 <_ZN7RailwayC1ERKS_>
   b5ff0:	6822      	ldr	r2, [r4, #0]
   b5ff2:	68a3      	ldr	r3, [r4, #8]
   b5ff4:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b5ff6:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
   b5ffa:	d26a      	bcs.n	b60d2 <setup+0x1de>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5ffc:	f44f 7007 	mov.w	r0, #540	; 0x21c
   b6000:	f7fe f849 	bl	b4096 <_Znwj>
   b6004:	f10d 0834 	add.w	r8, sp, #52	; 0x34
   b6008:	4605      	mov	r5, r0
   b600a:	f500 7707 	add.w	r7, r0, #540	; 0x21c
	  _ForwardIterator __cur = __result;
   b600e:	4606      	mov	r6, r0
   b6010:	b11e      	cbz	r6, b601a <setup+0x126>
   b6012:	4641      	mov	r1, r8
   b6014:	4630      	mov	r0, r6
   b6016:	f7ff fe1b 	bl	b5c50 <_ZN7RailwayC1ERKS_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b601a:	366c      	adds	r6, #108	; 0x6c
   b601c:	42b7      	cmp	r7, r6
   b601e:	f108 086c 	add.w	r8, r8, #108	; 0x6c
   b6022:	d1f5      	bne.n	b6010 <setup+0x11c>
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b6024:	e9d4 6800 	ldrd	r6, r8, [r4]
	  for (; __first != __last; ++__first)
   b6028:	45b0      	cmp	r8, r6
   b602a:	d00c      	beq.n	b6046 <setup+0x152>
      __pointer->~_Tp();
   b602c:	4630      	mov	r0, r6
   b602e:	f7fe fde7 	bl	b4c00 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b6032:	366c      	adds	r6, #108	; 0x6c
   b6034:	e7f8      	b.n	b6028 <setup+0x134>
   b6036:	f001 ffbd 	bl	b7fb4 <_ZNK8particle7BleUuid8rawBytesEv>
   b603a:	2300      	movs	r3, #0
   b603c:	9300      	str	r3, [sp, #0]
   b603e:	4602      	mov	r2, r0
   b6040:	2310      	movs	r3, #16
   b6042:	2107      	movs	r1, #7
   b6044:	e799      	b.n	b5f7a <setup+0x86>
	    _M_deallocate(this->_M_impl._M_start,
   b6046:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6048:	b118      	cbz	r0, b6052 <setup+0x15e>
			  - this->_M_impl._M_start);
   b604a:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b604c:	1a09      	subs	r1, r1, r0
   b604e:	f7fe f828 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b6052:	e9c4 5700 	strd	r5, r7, [r4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b6056:	60a7      	str	r7, [r4, #8]
   b6058:	2504      	movs	r5, #4
   b605a:	266c      	movs	r6, #108	; 0x6c
   b605c:	ab0d      	add	r3, sp, #52	; 0x34
   b605e:	fb06 3005 	mla	r0, r6, r5, r3
   b6062:	f7fe fdcd 	bl	b4c00 <_ZN7RailwayD1Ev>
   b6066:	3d01      	subs	r5, #1
   b6068:	d2f8      	bcs.n	b605c <setup+0x168>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b606a:	e9d4 3100 	ldrd	r3, r1, [r4]
   b606e:	1ac9      	subs	r1, r1, r3
   b6070:	4b38      	ldr	r3, [pc, #224]	; (b6154 <setup+0x260>)
   b6072:	1089      	asrs	r1, r1, #2
   b6074:	4359      	muls	r1, r3
  sequenceArr = std::vector<int>(railways.size() * 2, 0);
   b6076:	2400      	movs	r4, #0
   b6078:	ab03      	add	r3, sp, #12
   b607a:	aa04      	add	r2, sp, #16
   b607c:	0049      	lsls	r1, r1, #1
   b607e:	a808      	add	r0, sp, #32
   b6080:	9404      	str	r4, [sp, #16]
   b6082:	f7fe fb79 	bl	b4778 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
	  _M_start = __x._M_start;
   b6086:	4b34      	ldr	r3, [pc, #208]	; (b6158 <setup+0x264>)
   b6088:	9d08      	ldr	r5, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
   b608a:	689a      	ldr	r2, [r3, #8]
   b608c:	920f      	str	r2, [sp, #60]	; 0x3c
	  _M_finish = __x._M_finish;
   b608e:	e9d3 0100 	ldrd	r0, r1, [r3]
	  _M_start = __x._M_start;
   b6092:	601d      	str	r5, [r3, #0]
	  _M_finish = __x._M_finish;
   b6094:	9d09      	ldr	r5, [sp, #36]	; 0x24
   b6096:	605d      	str	r5, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
   b6098:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   b609a:	609d      	str	r5, [r3, #8]
	  _M_finish = __x._M_finish;
   b609c:	e9cd 010d 	strd	r0, r1, [sp, #52]	; 0x34
      }
   b60a0:	a80d      	add	r0, sp, #52	; 0x34
	  _M_finish = __x._M_finish;
   b60a2:	e9cd 4408 	strd	r4, r4, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
   b60a6:	940a      	str	r4, [sp, #40]	; 0x28
      }
   b60a8:	f7fe fb48 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b60ac:	a808      	add	r0, sp, #32
   b60ae:	f7fe fb45 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
  randomizeAddress();
   b60b2:	f7fe f9bd 	bl	b4430 <_Z16randomizeAddressv>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   b60b6:	4829      	ldr	r0, [pc, #164]	; (b615c <setup+0x268>)
   b60b8:	4623      	mov	r3, r4
   b60ba:	4622      	mov	r2, r4
   b60bc:	4621      	mov	r1, r4
   b60be:	6840      	ldr	r0, [r0, #4]
   b60c0:	f001 fd74 	bl	b7bac <network_clear_credentials>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b60c4:	9805      	ldr	r0, [sp, #20]
   b60c6:	f001 fda1 	bl	b7c0c <free>
}
   b60ca:	f50d 7d14 	add.w	sp, sp, #592	; 0x250
   b60ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b60d2:	6865      	ldr	r5, [r4, #4]
   b60d4:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b60d6:	f5b5 7f07 	cmp.w	r5, #540	; 0x21c
   b60da:	d310      	bcc.n	b60fe <setup+0x20a>
			      _Category>::__copy_m(__first, __last, __result);
   b60dc:	a994      	add	r1, sp, #592	; 0x250
   b60de:	a80d      	add	r0, sp, #52	; 0x34
   b60e0:	f7ff fe26 	bl	b5d30 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b60e4:	6867      	ldr	r7, [r4, #4]
   b60e6:	42b8      	cmp	r0, r7
   b60e8:	4605      	mov	r5, r0
   b60ea:	d0b5      	beq.n	b6058 <setup+0x164>
   b60ec:	4606      	mov	r6, r0
      __pointer->~_Tp();
   b60ee:	4630      	mov	r0, r6
	  for (; __first != __last; ++__first)
   b60f0:	366c      	adds	r6, #108	; 0x6c
      __pointer->~_Tp();
   b60f2:	f7fe fd85 	bl	b4c00 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b60f6:	42b7      	cmp	r7, r6
   b60f8:	d1f9      	bne.n	b60ee <setup+0x1fa>
	    this->_M_impl._M_finish = __pos;
   b60fa:	6065      	str	r5, [r4, #4]
   b60fc:	e7ac      	b.n	b6058 <setup+0x164>
   b60fe:	ab0d      	add	r3, sp, #52	; 0x34
   b6100:	441d      	add	r5, r3
   b6102:	4629      	mov	r1, r5
   b6104:	4618      	mov	r0, r3
   b6106:	f7ff fe13 	bl	b5d30 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b610a:	6866      	ldr	r6, [r4, #4]
   b610c:	ab94      	add	r3, sp, #592	; 0x250
   b610e:	429d      	cmp	r5, r3
   b6110:	d007      	beq.n	b6122 <setup+0x22e>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6112:	b11e      	cbz	r6, b611c <setup+0x228>
   b6114:	4629      	mov	r1, r5
   b6116:	4630      	mov	r0, r6
   b6118:	f7ff fd9a 	bl	b5c50 <_ZN7RailwayC1ERKS_>
   b611c:	356c      	adds	r5, #108	; 0x6c
   b611e:	366c      	adds	r6, #108	; 0x6c
   b6120:	e7f4      	b.n	b610c <setup+0x218>
	    this->_M_impl._M_finish =
   b6122:	6066      	str	r6, [r4, #4]
   b6124:	e798      	b.n	b6058 <setup+0x164>
   b6126:	bf00      	nop
   b6128:	2003e6a8 	.word	0x2003e6a8
   b612c:	200354f0 	.word	0x200354f0
   b6130:	2003e690 	.word	0x2003e690
   b6134:	2003e630 	.word	0x2003e630
   b6138:	20037ea8 	.word	0x20037ea8
   b613c:	000bd4d2 	.word	0x000bd4d2
   b6140:	200355a8 	.word	0x200355a8
   b6144:	2003e54c 	.word	0x2003e54c
   b6148:	2003e4e0 	.word	0x2003e4e0
   b614c:	2003e5b8 	.word	0x2003e5b8
   b6150:	20035618 	.word	0x20035618
   b6154:	684bda13 	.word	0x684bda13
   b6158:	2003e698 	.word	0x2003e698
   b615c:	2003e718 	.word	0x2003e718

000b6160 <_GLOBAL__sub_I_SystemMode>:
   b6160:	2001      	movs	r0, #1
   b6162:	f7fe bf05 	b.w	b4f70 <_Z41__static_initialization_and_destruction_0ii.constprop.0>
	...

000b6168 <loop>:
void loop(){
   b6168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b616c:	ed2d 8b06 	vpush	{d8-d10}
        return network_has_credentials(*this, 0, NULL);
   b6170:	4bba      	ldr	r3, [pc, #744]	; (b645c <loop+0x2f4>)
   b6172:	2200      	movs	r2, #0
   b6174:	b0b5      	sub	sp, #212	; 0xd4
   b6176:	6858      	ldr	r0, [r3, #4]
   b6178:	4611      	mov	r1, r2
   b617a:	f001 fd07 	bl	b7b8c <network_has_credentials>
  if(WiFi.hasCredentials() && userInput){
   b617e:	2800      	cmp	r0, #0
   b6180:	f000 84c5 	beq.w	b6b0e <loop+0x9a6>
   b6184:	4bb6      	ldr	r3, [pc, #728]	; (b6460 <loop+0x2f8>)
   b6186:	781b      	ldrb	r3, [r3, #0]
   b6188:	2b00      	cmp	r3, #0
   b618a:	f000 84c0 	beq.w	b6b0e <loop+0x9a6>
      : _M_current(__i) { }
   b618e:	f8df b340 	ldr.w	fp, [pc, #832]	; b64d0 <loop+0x368>
      Serial.printf("%i, ", i);
   b6192:	4db4      	ldr	r5, [pc, #720]	; (b6464 <loop+0x2fc>)
    Serial.println("loop start");
   b6194:	f003 fe50 	bl	b9e38 <_Z16_fetch_usbserialv>
   b6198:	49b3      	ldr	r1, [pc, #716]	; (b6468 <loop+0x300>)
   b619a:	f003 f8fc 	bl	b9396 <_ZN5Print7printlnEPKc>
   b619e:	e9db 4600 	ldrd	r4, r6, [fp]
    for(int i : sequenceArr){
   b61a2:	42b4      	cmp	r4, r6
   b61a4:	d009      	beq.n	b61ba <loop+0x52>
   b61a6:	f854 2b04 	ldr.w	r2, [r4], #4
   b61aa:	9202      	str	r2, [sp, #8]
      Serial.printf("%i, ", i);
   b61ac:	f003 fe44 	bl	b9e38 <_Z16_fetch_usbserialv>
   b61b0:	9a02      	ldr	r2, [sp, #8]
   b61b2:	4629      	mov	r1, r5
   b61b4:	f7fe f92e 	bl	b4414 <_ZN5Print6printfEPKcz>
	return *this;
   b61b8:	e7f3      	b.n	b61a2 <loop+0x3a>
    Serial.println();
   b61ba:	f003 fe3d 	bl	b9e38 <_Z16_fetch_usbserialv>
   b61be:	f003 f8de 	bl	b937e <_ZN5Print7printlnEv>
    Serial.println(brownLineAdr);
   b61c2:	f003 fe39 	bl	b9e38 <_Z16_fetch_usbserialv>
   b61c6:	4ba9      	ldr	r3, [pc, #676]	; (b646c <loop+0x304>)
    Serial.println(greenLineAdr[0]);
   b61c8:	4ca9      	ldr	r4, [pc, #676]	; (b6470 <loop+0x308>)
    Serial.println(brownLineAdr);
   b61ca:	6819      	ldr	r1, [r3, #0]
            }else if(currentRailway.name == orangeLine.name){
   b61cc:	f8df 8304 	ldr.w	r8, [pc, #772]	; b64d4 <loop+0x36c>
    Serial.println(brownLineAdr);
   b61d0:	220a      	movs	r2, #10
   b61d2:	f7fe f808 	bl	b41e6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    Serial.println(greenLineAdr[0]);
   b61d6:	f003 fe2f 	bl	b9e38 <_Z16_fetch_usbserialv>
   b61da:	6821      	ldr	r1, [r4, #0]
   b61dc:	220a      	movs	r2, #10
   b61de:	f7fe f802 	bl	b41e6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    Serial.println(greenLineAdr[1]);
   b61e2:	f003 fe29 	bl	b9e38 <_Z16_fetch_usbserialv>
   b61e6:	6861      	ldr	r1, [r4, #4]
   b61e8:	220a      	movs	r2, #10
   b61ea:	f7fd fffc 	bl	b41e6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    for(int j = 0; j < railways.size(); j++){
   b61ee:	f04f 0900 	mov.w	r9, #0
   b61f2:	4ca0      	ldr	r4, [pc, #640]	; (b6474 <loop+0x30c>)
   b61f4:	e9d4 2300 	ldrd	r2, r3, [r4]
   b61f8:	1a9b      	subs	r3, r3, r2
   b61fa:	4a9f      	ldr	r2, [pc, #636]	; (b6478 <loop+0x310>)
   b61fc:	109b      	asrs	r3, r3, #2
   b61fe:	4353      	muls	r3, r2
   b6200:	454b      	cmp	r3, r9
   b6202:	f240 844d 	bls.w	b6aa0 <loop+0x938>
      delay(1000);
   b6206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b620a:	f001 fd47 	bl	b7c9c <delay>
	StringSumHelper(const char *p) : String(p) {}
   b620e:	499b      	ldr	r1, [pc, #620]	; (b647c <loop+0x314>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b6210:	4e9b      	ldr	r6, [pc, #620]	; (b6480 <loop+0x318>)
   b6212:	a819      	add	r0, sp, #100	; 0x64
   b6214:	f003 f969 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   b6218:	256c      	movs	r5, #108	; 0x6c
      { return _M_dataplus._M_p; }
   b621a:	6823      	ldr	r3, [r4, #0]
   b621c:	fb05 f509 	mul.w	r5, r5, r9
   b6220:	442b      	add	r3, r5
      request.path = "/loop-tracks/cta?lines=" + String(railways[j].name.c_str());
   b6222:	a815      	add	r0, sp, #84	; 0x54
   b6224:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b6226:	f003 f960 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
   b622a:	a915      	add	r1, sp, #84	; 0x54
   b622c:	a819      	add	r0, sp, #100	; 0x64
   b622e:	f003 f9cc 	bl	b95ca <_ZplRK15StringSumHelperRK6String>
   b6232:	4601      	mov	r1, r0
   b6234:	4893      	ldr	r0, [pc, #588]	; (b6484 <loop+0x31c>)
   b6236:	f003 f96c 	bl	b9512 <_ZN6StringaSERKS_>
   b623a:	a815      	add	r0, sp, #84	; 0x54
   b623c:	f003 f90a 	bl	b9454 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b6240:	a819      	add	r0, sp, #100	; 0x64
   b6242:	f003 f907 	bl	b9454 <_ZN6StringD1Ev>
   b6246:	4b90      	ldr	r3, [pc, #576]	; (b6488 <loop+0x320>)
   b6248:	4990      	ldr	r1, [pc, #576]	; (b648c <loop+0x324>)
   b624a:	4891      	ldr	r0, [pc, #580]	; (b6490 <loop+0x328>)
   b624c:	9300      	str	r3, [sp, #0]
   b624e:	4632      	mov	r2, r6
   b6250:	4b90      	ldr	r3, [pc, #576]	; (b6494 <loop+0x32c>)
   b6252:	f000 fca1 	bl	b6b98 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("parsing");
   b6256:	f003 fdef 	bl	b9e38 <_Z16_fetch_usbserialv>
   b625a:	498f      	ldr	r1, [pc, #572]	; (b6498 <loop+0x330>)
   b625c:	f003 f89b 	bl	b9396 <_ZN5Print7printlnEPKc>
      parser.clear();
   b6260:	488e      	ldr	r0, [pc, #568]	; (b649c <loop+0x334>)
   b6262:	f000 fe31 	bl	b6ec8 <_ZN10JsonBuffer5clearEv>
	const char * c_str() const { return buffer; }
   b6266:	6871      	ldr	r1, [r6, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b6268:	9102      	str	r1, [sp, #8]
   b626a:	4608      	mov	r0, r1
   b626c:	f004 fff0 	bl	bb250 <strlen>
   b6270:	9902      	ldr	r1, [sp, #8]
   b6272:	4602      	mov	r2, r0
   b6274:	4889      	ldr	r0, [pc, #548]	; (b649c <loop+0x334>)
   b6276:	f000 fe0a 	bl	b6e8e <_ZN10JsonBuffer7addDataEPKcj>
      if(!parser.parse()){
   b627a:	4888      	ldr	r0, [pc, #544]	; (b649c <loop+0x334>)
   b627c:	f001 fa14 	bl	b76a8 <_ZN10JsonParser5parseEv>
   b6280:	9003      	str	r0, [sp, #12]
   b6282:	b948      	cbnz	r0, b6298 <loop+0x130>
        Serial.println("parsing failed");
   b6284:	f003 fdd8 	bl	b9e38 <_Z16_fetch_usbserialv>
   b6288:	4985      	ldr	r1, [pc, #532]	; (b64a0 <loop+0x338>)
}
   b628a:	b035      	add	sp, #212	; 0xd4
   b628c:	ecbd 8b06 	vpop	{d8-d10}
   b6290:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("parsing failed");
   b6294:	f003 b87f 	b.w	b9396 <_ZN5Print7printlnEPKc>
	return *(this->_M_impl._M_start + __n);
   b6298:	6821      	ldr	r1, [r4, #0]
        float lat = train.key("latitude").valueFloat();
   b629a:	ed9f 9a82 	vldr	s18, [pc, #520]	; b64a4 <loop+0x33c>
      Railway currentRailway = railways[j];
   b629e:	4429      	add	r1, r5
   b62a0:	a819      	add	r0, sp, #100	; 0x64
   b62a2:	f7ff fcd5 	bl	b5c50 <_ZN7RailwayC1ERKS_>
      std::vector<Checkpoint> currentCheckpoints = currentRailway.checkpoints;
   b62a6:	a919      	add	r1, sp, #100	; 0x64
   b62a8:	a805      	add	r0, sp, #20
   b62aa:	f7fe faef 	bl	b488c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      int count = 0;
   b62ae:	2300      	movs	r3, #0
   b62b0:	9302      	str	r3, [sp, #8]
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b62b2:	497a      	ldr	r1, [pc, #488]	; (b649c <loop+0x334>)
   b62b4:	a80b      	add	r0, sp, #44	; 0x2c
   b62b6:	f000 fe21 	bl	b6efc <_ZNK10JsonParser12getReferenceEv>
   b62ba:	4a7b      	ldr	r2, [pc, #492]	; (b64a8 <loop+0x340>)
   b62bc:	a90b      	add	r1, sp, #44	; 0x2c
   b62be:	a80e      	add	r0, sp, #56	; 0x38
   b62c0:	f000 ffec 	bl	b729c <_ZNK13JsonReference3keyEPKc>
   b62c4:	2200      	movs	r2, #0
   b62c6:	a90e      	add	r1, sp, #56	; 0x38
   b62c8:	a811      	add	r0, sp, #68	; 0x44
   b62ca:	f000 febb 	bl	b7044 <_ZNK13JsonReference5indexEj>
   b62ce:	4a77      	ldr	r2, [pc, #476]	; (b64ac <loop+0x344>)
   b62d0:	a911      	add	r1, sp, #68	; 0x44
   b62d2:	a815      	add	r0, sp, #84	; 0x54
   b62d4:	f000 ffe2 	bl	b729c <_ZNK13JsonReference3keyEPKc>
   b62d8:	9a02      	ldr	r2, [sp, #8]
   b62da:	a915      	add	r1, sp, #84	; 0x54
   b62dc:	a808      	add	r0, sp, #32
   b62de:	f000 feb1 	bl	b7044 <_ZNK13JsonReference5indexEj>
   b62e2:	a815      	add	r0, sp, #84	; 0x54
   b62e4:	f000 fd82 	bl	b6dec <_ZN13JsonReferenceD1Ev>
   b62e8:	a811      	add	r0, sp, #68	; 0x44
   b62ea:	f000 fd7f 	bl	b6dec <_ZN13JsonReferenceD1Ev>
   b62ee:	a80e      	add	r0, sp, #56	; 0x38
   b62f0:	f000 fd7c 	bl	b6dec <_ZN13JsonReferenceD1Ev>
   b62f4:	a80b      	add	r0, sp, #44	; 0x2c
   b62f6:	f000 fd79 	bl	b6dec <_ZN13JsonReferenceD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b62fa:	4a6d      	ldr	r2, [pc, #436]	; (b64b0 <loop+0x348>)
   b62fc:	a908      	add	r1, sp, #32
   b62fe:	a815      	add	r0, sp, #84	; 0x54
   b6300:	f000 ffcc 	bl	b729c <_ZNK13JsonReference3keyEPKc>
   b6304:	a915      	add	r1, sp, #84	; 0x54
   b6306:	a811      	add	r0, sp, #68	; 0x44
   b6308:	f000 ffe2 	bl	b72d0 <_ZNK13JsonReference11valueStringEv>
   b630c:	a815      	add	r0, sp, #84	; 0x54
   b630e:	f000 fd6d 	bl	b6dec <_ZN13JsonReferenceD1Ev>
        String destNm = train.key("destination").valueString();
   b6312:	4a68      	ldr	r2, [pc, #416]	; (b64b4 <loop+0x34c>)
   b6314:	a908      	add	r1, sp, #32
   b6316:	a80e      	add	r0, sp, #56	; 0x38
   b6318:	f000 ffc0 	bl	b729c <_ZNK13JsonReference3keyEPKc>
   b631c:	a90e      	add	r1, sp, #56	; 0x38
   b631e:	a815      	add	r0, sp, #84	; 0x54
   b6320:	f000 ffd6 	bl	b72d0 <_ZNK13JsonReference11valueStringEv>
   b6324:	a80e      	add	r0, sp, #56	; 0x38
   b6326:	f000 fd61 	bl	b6dec <_ZN13JsonReferenceD1Ev>
        int trainDir = train.key("direction").valueInt();
   b632a:	4a63      	ldr	r2, [pc, #396]	; (b64b8 <loop+0x350>)
   b632c:	a908      	add	r1, sp, #32
   b632e:	a80e      	add	r0, sp, #56	; 0x38
   b6330:	f000 ffb4 	bl	b729c <_ZNK13JsonReference3keyEPKc>
   b6334:	2100      	movs	r1, #0
   b6336:	a80e      	add	r0, sp, #56	; 0x38
   b6338:	f000 fe9e 	bl	b7078 <_ZNK13JsonReference8valueIntEi>
   b633c:	4604      	mov	r4, r0
   b633e:	a80e      	add	r0, sp, #56	; 0x38
   b6340:	f000 fd54 	bl	b6dec <_ZN13JsonReferenceD1Ev>
        float lat = train.key("latitude").valueFloat();
   b6344:	4a5d      	ldr	r2, [pc, #372]	; (b64bc <loop+0x354>)
   b6346:	a908      	add	r1, sp, #32
   b6348:	a80e      	add	r0, sp, #56	; 0x38
   b634a:	f000 ffa7 	bl	b729c <_ZNK13JsonReference3keyEPKc>
   b634e:	a80e      	add	r0, sp, #56	; 0x38
   b6350:	eeb0 0a49 	vmov.f32	s0, s18
   b6354:	f000 fe9c 	bl	b7090 <_ZNK13JsonReference10valueFloatEf>
   b6358:	a80e      	add	r0, sp, #56	; 0x38
   b635a:	eef0 8a40 	vmov.f32	s17, s0
   b635e:	f000 fd45 	bl	b6dec <_ZN13JsonReferenceD1Ev>
        float lon = train.key("longitude").valueFloat();
   b6362:	4a57      	ldr	r2, [pc, #348]	; (b64c0 <loop+0x358>)
   b6364:	a908      	add	r1, sp, #32
   b6366:	a80e      	add	r0, sp, #56	; 0x38
   b6368:	f000 ff98 	bl	b729c <_ZNK13JsonReference3keyEPKc>
   b636c:	a80e      	add	r0, sp, #56	; 0x38
   b636e:	eeb0 0a49 	vmov.f32	s0, s18
   b6372:	f000 fe8d 	bl	b7090 <_ZNK13JsonReference10valueFloatEf>
   b6376:	a80e      	add	r0, sp, #56	; 0x38
   b6378:	eeb0 8a40 	vmov.f32	s16, s0
   b637c:	f000 fd36 	bl	b6dec <_ZN13JsonReferenceD1Ev>
        if(nextStation.length() <= 1){
   b6380:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b6382:	2b01      	cmp	r3, #1
   b6384:	d82a      	bhi.n	b63dc <loop+0x274>
          Serial.println("break");
   b6386:	f003 fd57 	bl	b9e38 <_Z16_fetch_usbserialv>
   b638a:	494e      	ldr	r1, [pc, #312]	; (b64c4 <loop+0x35c>)
        if(i == 2 || currentRailway.name == purpleLine.name){
   b638c:	4f4e      	ldr	r7, [pc, #312]	; (b64c8 <loop+0x360>)
          Serial.println("break");
   b638e:	f003 f802 	bl	b9396 <_ZN5Print7printlnEPKc>
          break;
   b6392:	a815      	add	r0, sp, #84	; 0x54
   b6394:	f003 f85e 	bl	b9454 <_ZN6StringD1Ev>
   b6398:	a811      	add	r0, sp, #68	; 0x44
   b639a:	f003 f85b 	bl	b9454 <_ZN6StringD1Ev>
   b639e:	a808      	add	r0, sp, #32
   b63a0:	f000 fd24 	bl	b6dec <_ZN13JsonReferenceD1Ev>
      for(int i = 0; i < 4; i++){
   b63a4:	ea4f 06c9 	mov.w	r6, r9, lsl #3
   b63a8:	2400      	movs	r4, #0
        if(i == 2 || currentRailway.name == purpleLine.name){
   b63aa:	2c02      	cmp	r4, #2
   b63ac:	f000 8226 	beq.w	b67fc <loop+0x694>
   b63b0:	4639      	mov	r1, r7
   b63b2:	a825      	add	r0, sp, #148	; 0x94
   b63b4:	f7fe fa8e 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b63b8:	2800      	cmp	r0, #0
   b63ba:	f040 821f 	bne.w	b67fc <loop+0x694>
        }else if(i == 3){
   b63be:	2c03      	cmp	r4, #3
   b63c0:	f040 8280 	bne.w	b68c4 <loop+0x75c>
          if(currentRailway.name == orangeLine.name){
   b63c4:	4941      	ldr	r1, [pc, #260]	; (b64cc <loop+0x364>)
   b63c6:	4d2a      	ldr	r5, [pc, #168]	; (b6470 <loop+0x308>)
   b63c8:	a825      	add	r0, sp, #148	; 0x94
   b63ca:	f7fe fa83 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b63ce:	2800      	cmp	r0, #0
   b63d0:	f000 8274 	beq.w	b68bc <loop+0x754>
            Wire.beginTransmission(greenLineAdr[0]);
   b63d4:	f003 fe7e 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b63d8:	6829      	ldr	r1, [r5, #0]
   b63da:	e213      	b.n	b6804 <loop+0x69c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b63dc:	e9dd 3505 	ldrd	r3, r5, [sp, #20]
   b63e0:	1aed      	subs	r5, r5, r3
   b63e2:	10ed      	asrs	r5, r5, #3
        for(int i = 0; i < checkpointCount; i++){
   b63e4:	f04f 0a00 	mov.w	sl, #0
   b63e8:	45aa      	cmp	sl, r5
	return *(this->_M_impl._M_start + __n);
   b63ea:	9905      	ldr	r1, [sp, #20]
   b63ec:	da76      	bge.n	b64dc <loop+0x374>
   b63ee:	eb01 06ca 	add.w	r6, r1, sl, lsl #3
    }

    float getDistance(float trainLat, float trainLon){
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b63f2:	edd6 7a00 	vldr	s15, [r6]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b63f6:	ee78 7ae7 	vsub.f32	s15, s17, s15
   b63fa:	ee17 0a90 	vmov	r0, s15
   b63fe:	f004 fb07 	bl	baa10 <__aeabi_f2d>
   b6402:	edd6 7a01 	vldr	s15, [r6, #4]
   b6406:	ee78 7a67 	vsub.f32	s15, s16, s15
   b640a:	ec41 0b1a 	vmov	d10, r0, r1
   b640e:	ee17 0a90 	vmov	r0, s15
   b6412:	f004 fafd 	bl	baa10 <__aeabi_f2d>
   b6416:	4602      	mov	r2, r0
   b6418:	460b      	mov	r3, r1
   b641a:	f004 fb51 	bl	baac0 <__aeabi_dmul>
   b641e:	ec53 2b1a 	vmov	r2, r3, d10
   b6422:	4606      	mov	r6, r0
   b6424:	460f      	mov	r7, r1
   b6426:	ee1a 0a10 	vmov	r0, s20
   b642a:	4619      	mov	r1, r3
   b642c:	f004 fb48 	bl	baac0 <__aeabi_dmul>
   b6430:	4602      	mov	r2, r0
   b6432:	460b      	mov	r3, r1
   b6434:	4630      	mov	r0, r6
   b6436:	4639      	mov	r1, r7
   b6438:	f004 f98c 	bl	ba754 <__adddf3>
   b643c:	ec41 0b10 	vmov	d0, r0, r1
   b6440:	f004 f87c 	bl	ba53c <sqrt>
          currentRailway.distances[i] = currentCheckpoints[i].getDistance(lat, lon);
   b6444:	9e1c      	ldr	r6, [sp, #112]	; 0x70
   b6446:	ec51 0b10 	vmov	r0, r1, d0
   b644a:	f004 fe09 	bl	bb060 <__aeabi_d2f>
   b644e:	eb06 068a 	add.w	r6, r6, sl, lsl #2
        for(int i = 0; i < checkpointCount; i++){
   b6452:	f10a 0a01 	add.w	sl, sl, #1
   b6456:	6030      	str	r0, [r6, #0]
   b6458:	e7c6      	b.n	b63e8 <loop+0x280>
   b645a:	bf00      	nop
   b645c:	2003e718 	.word	0x2003e718
   b6460:	2003e6b0 	.word	0x2003e6b0
   b6464:	000bd4ed 	.word	0x000bd4ed
   b6468:	000bd4e2 	.word	0x000bd4e2
   b646c:	20035614 	.word	0x20035614
   b6470:	20035684 	.word	0x20035684
   b6474:	2003e5b8 	.word	0x2003e5b8
   b6478:	684bda13 	.word	0x684bda13
   b647c:	000bd4f2 	.word	0x000bd4f2
   b6480:	2003e67c 	.word	0x2003e67c
   b6484:	2003e658 	.word	0x2003e658
   b6488:	000bd50a 	.word	0x000bd50a
   b648c:	2003e630 	.word	0x2003e630
   b6490:	2003568c 	.word	0x2003568c
   b6494:	200352dc 	.word	0x200352dc
   b6498:	000bd50e 	.word	0x000bd50e
   b649c:	20037f14 	.word	0x20037f14
   b64a0:	000bd516 	.word	0x000bd516
   b64a4:	00000000 	.word	0x00000000
   b64a8:	000bd525 	.word	0x000bd525
   b64ac:	000bd52b 	.word	0x000bd52b
   b64b0:	000bd532 	.word	0x000bd532
   b64b4:	000bd53c 	.word	0x000bd53c
   b64b8:	000bd548 	.word	0x000bd548
   b64bc:	000bd552 	.word	0x000bd552
   b64c0:	000bd55b 	.word	0x000bd55b
   b64c4:	000bd565 	.word	0x000bd565
   b64c8:	2003e57c 	.word	0x2003e57c
   b64cc:	20037ed8 	.word	0x20037ed8
   b64d0:	2003e698 	.word	0x2003e698
   b64d4:	20037ea8 	.word	0x20037ea8
   b64d8:	7dcccccc 	.word	0x7dcccccc
      : _M_current(__i) { }
   b64dc:	e9dd 761c 	ldrd	r7, r6, [sp, #112]	; 0x70
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
   b64e0:	42b7      	cmp	r7, r6
   b64e2:	d011      	beq.n	b6508 <loop+0x3a0>
   b64e4:	1d3a      	adds	r2, r7, #4
   b64e6:	463b      	mov	r3, r7
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
   b64e8:	4296      	cmp	r6, r2
	++_M_current;
   b64ea:	4610      	mov	r0, r2
   b64ec:	d00d      	beq.n	b650a <loop+0x3a2>
	if (__comp(__first, __result))
   b64ee:	edd3 7a00 	vldr	s15, [r3]
   b64f2:	ed90 7a00 	vldr	s14, [r0]
   b64f6:	eeb4 7a67 	vcmp.f32	s14, s15
   b64fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b64fe:	f102 0204 	add.w	r2, r2, #4
   b6502:	bf48      	it	mi
   b6504:	4603      	movmi	r3, r0
   b6506:	e7ef      	b.n	b64e8 <loop+0x380>
   b6508:	463b      	mov	r3, r7
        if(closestIndex == currentRailway.tripleIndex){
   b650a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b650c:	1bdb      	subs	r3, r3, r7
   b650e:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
   b6512:	ea4f 00a3 	mov.w	r0, r3, asr #2
          closestIndex = currentRailway.loopIndex;
   b6516:	bf08      	it	eq
   b6518:	982f      	ldreq	r0, [sp, #188]	; 0xbc
   b651a:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
        x1 = currentCheckpoints[closestIndex].lat;
   b651e:	edd3 7a00 	vldr	s15, [r3]
        y1 = currentCheckpoints[closestIndex].lon;
   b6522:	edd3 6a01 	vldr	s13, [r3, #4]
        if(currentCheckpoints[closestIndex].lat > lat){
   b6526:	eef4 8ae7 	vcmpe.f32	s17, s15
   b652a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          slope = (y1 - y) / (x1 - x);
   b652e:	ee77 5ae8 	vsub.f32	s11, s15, s17
          slope = (y - y1) / (x - x1);
   b6532:	bf55      	itete	pl
   b6534:	ee38 6a66 	vsubpl.f32	s12, s16, s13
          slope = (y1 - y) / (x1 - x);
   b6538:	ee76 7ac8 	vsubmi.f32	s15, s13, s16
          slope = (y - y1) / (x - x1);
   b653c:	ee78 7ae7 	vsubpl.f32	s15, s17, s15
          slope = (y1 - y) / (x1 - x);
   b6540:	ee87 7aa5 	vdivmi.f32	s14, s15, s11
   b6544:	ea4f 06c0 	mov.w	r6, r0, lsl #3
          slope = (y - y1) / (x - x1);
   b6548:	bf58      	it	pl
   b654a:	ee86 7a27 	vdivpl.f32	s14, s12, s15
        if(slope == 0){
   b654e:	ed5f 7a1e 	vldr	s15, [pc, #-120]	; b64d8 <loop+0x370>
   b6552:	eeb5 7a40 	vcmp.f32	s14, #0.0
   b6556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b655a:	d00a      	beq.n	b6572 <loop+0x40a>
        }else if(slope >= __FLT_MAX__ / 10){
   b655c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b6560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          perpendicularSlope = -1 / slope;
   b6564:	bfba      	itte	lt
   b6566:	eebf 6a00 	vmovlt.f32	s12, #240	; 0xbf800000 -1.0
   b656a:	eec6 7a07 	vdivlt.f32	s15, s12, s14
          perpendicularSlope = 0;
   b656e:	eef0 7a49 	vmovge.f32	s15, s18
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b6572:	eeb0 7a48 	vmov.f32	s14, s16
   b6576:	eea7 7aa5 	vfma.f32	s14, s15, s11
   b657a:	eef4 6ac7 	vcmpe.f32	s13, s14
   b657e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6582:	bf4c      	ite	mi
   b6584:	f04f 0c01 	movmi.w	ip, #1
   b6588:	f04f 0c00 	movpl.w	ip, #0
        if(closestIndex == 0){
   b658c:	2800      	cmp	r0, #0
   b658e:	d169      	bne.n	b6664 <loop+0x4fc>
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b6590:	ed91 7a02 	vldr	s14, [r1, #8]
          if(currentRailway.loopIndex == closestIndex){
   b6594:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b6596:	ee37 7a68 	vsub.f32	s14, s14, s17
   b659a:	eef0 6a48 	vmov.f32	s13, s16
   b659e:	eee7 6a27 	vfma.f32	s13, s14, s15
   b65a2:	ed91 7a03 	vldr	s14, [r1, #12]
   b65a6:	eef4 6ac7 	vcmpe.f32	s13, s14
   b65aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b65ae:	bfcc      	ite	gt
   b65b0:	2501      	movgt	r5, #1
   b65b2:	2500      	movle	r5, #0
          if(currentRailway.loopIndex == closestIndex){
   b65b4:	b9ee      	cbnz	r6, b65f2 <loop+0x48a>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b65b6:	1e53      	subs	r3, r2, #1
   b65b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
            if(nearestSide != pointSide){
   b65bc:	4565      	cmp	r5, ip
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b65be:	ed91 0a00 	vldr	s0, [r1]
   b65c2:	ed91 7a01 	vldr	s14, [r1, #4]
            if(nearestSide != pointSide){
   b65c6:	f040 8094 	bne.w	b66f2 <loop+0x58a>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b65ca:	ee70 8a68 	vsub.f32	s17, s0, s17
   b65ce:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b65d2:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b65d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            }else if(nearestSide != loopPointSide){
   b65da:	bfcc      	ite	gt
   b65dc:	2101      	movgt	r1, #1
   b65de:	2100      	movle	r1, #0
   b65e0:	42a9      	cmp	r1, r5
              }else if(nearestSide != loopPointSide){
   b65e2:	d100      	bne.n	b65e6 <loop+0x47e>
                secondClosestIndex = currentRailway.tripleIndex + 1;
   b65e4:	1c53      	adds	r3, r2, #1
          if(closestIndex < secondClosestIndex){
   b65e6:	429a      	cmp	r2, r3
   b65e8:	f2c0 8085 	blt.w	b66f6 <loop+0x58e>
   b65ec:	4611      	mov	r1, r2
   b65ee:	461e      	mov	r6, r3
   b65f0:	e005      	b.n	b65fe <loop+0x496>
            if(pointSide == nearestSide){
   b65f2:	4565      	cmp	r5, ip
   b65f4:	d06c      	beq.n	b66d0 <loop+0x568>
   b65f6:	4602      	mov	r2, r0
   b65f8:	4606      	mov	r6, r0
   b65fa:	2301      	movs	r3, #1
   b65fc:	4619      	mov	r1, r3
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b65fe:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   b6602:	eb07 0086 	add.w	r0, r7, r6, lsl #2
   b6606:	ed90 7a00 	vldr	s14, [r0]
   b660a:	edd1 7a00 	vldr	s15, [r1]
          segmentPos *= currentRailway.scalers[lowerIndex];
   b660e:	991f      	ldr	r1, [sp, #124]	; 0x7c
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b6610:	ee77 7a27 	vadd.f32	s15, s14, s15
          segmentPos *= currentRailway.scalers[lowerIndex];
   b6614:	eb01 0186 	add.w	r1, r1, r6, lsl #2
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b6618:	eec7 6a27 	vdiv.f32	s13, s14, s15
          segmentPos *= currentRailway.scalers[lowerIndex];
   b661c:	ed91 8a00 	vldr	s16, [r1]
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b6620:	9933      	ldr	r1, [sp, #204]	; 0xcc
          segmentPos *= currentRailway.scalers[lowerIndex];
   b6622:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b6626:	4291      	cmp	r1, r2
          segmentPos *= currentRailway.scalers[lowerIndex];
   b6628:	ee28 8a26 	vmul.f32	s16, s16, s13
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b662c:	db66      	blt.n	b66fc <loop+0x594>
   b662e:	9d32      	ldr	r5, [sp, #200]	; 0xc8
   b6630:	4295      	cmp	r5, r2
   b6632:	dc63      	bgt.n	b66fc <loop+0x594>
   b6634:	4299      	cmp	r1, r3
   b6636:	db61      	blt.n	b66fc <loop+0x594>
   b6638:	429d      	cmp	r5, r3
   b663a:	dc5f      	bgt.n	b66fc <loop+0x594>
            Serial.println("in green");
   b663c:	f003 fbfc 	bl	b9e38 <_Z16_fetch_usbserialv>
   b6640:	49ba      	ldr	r1, [pc, #744]	; (b692c <loop+0x7c4>)
   b6642:	f002 fea8 	bl	b9396 <_ZN5Print7printlnEPKc>
            pcbSegment = 3;
   b6646:	2703      	movs	r7, #3
        bool inLoop = false;
   b6648:	2300      	movs	r3, #0
   b664a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b664c:	42ae      	cmp	r6, r5
   b664e:	dd6a      	ble.n	b6726 <loop+0x5be>
            segmentPos += currentRailway.scalers[i];
   b6650:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
   b6654:	ee07 1a90 	vmov	s15, r1
   b6658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b665c:	3501      	adds	r5, #1
            segmentPos += currentRailway.scalers[i];
   b665e:	ee38 8a27 	vadd.f32	s16, s16, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b6662:	e7f3      	b.n	b664c <loop+0x4e4>
   b6664:	3e08      	subs	r6, #8
   b6666:	440e      	add	r6, r1
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b6668:	ed96 7a00 	vldr	s14, [r6]
   b666c:	ee37 7a68 	vsub.f32	s14, s14, s17
   b6670:	eef0 6a48 	vmov.f32	s13, s16
   b6674:	eee7 6a27 	vfma.f32	s13, s14, s15
          if(closestIndex == checkpointCount - 1){
   b6678:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b667c:	1e43      	subs	r3, r0, #1
   b667e:	ed96 7a01 	vldr	s14, [r6, #4]
   b6682:	eef4 6ac7 	vcmpe.f32	s13, s14
   b6686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b668a:	bfcc      	ite	gt
   b668c:	2601      	movgt	r6, #1
   b668e:	2600      	movle	r6, #0
          if(closestIndex == checkpointCount - 1){
   b6690:	4586      	cmp	lr, r0
   b6692:	d12a      	bne.n	b66ea <loop+0x582>
            if(closestIndex == currentRailway.loopIndex){
   b6694:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   b6696:	4283      	cmp	r3, r0
   b6698:	d118      	bne.n	b66cc <loop+0x564>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b669a:	1e53      	subs	r3, r2, #1
   b669c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
              if(nearestSide != pointSide){
   b66a0:	4566      	cmp	r6, ip
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b66a2:	ed91 0a00 	vldr	s0, [r1]
   b66a6:	ed91 7a01 	vldr	s14, [r1, #4]
              if(nearestSide != pointSide){
   b66aa:	d002      	beq.n	b66b2 <loop+0x54a>
                secondClosestIndex = checkpointCount - 2;
   b66ac:	1eab      	subs	r3, r5, #2
   b66ae:	4602      	mov	r2, r0
   b66b0:	e799      	b.n	b65e6 <loop+0x47e>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b66b2:	ee70 8a68 	vsub.f32	s17, s0, s17
   b66b6:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b66ba:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b66be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              }else if(nearestSide != loopPointSide){
   b66c2:	bfcc      	ite	gt
   b66c4:	2101      	movgt	r1, #1
   b66c6:	2100      	movle	r1, #0
   b66c8:	42b1      	cmp	r1, r6
   b66ca:	e78a      	b.n	b65e2 <loop+0x47a>
              if(pointSide == nearestSide){
   b66cc:	4566      	cmp	r6, ip
   b66ce:	d1ed      	bne.n	b66ac <loop+0x544>
        count++;
   b66d0:	9b02      	ldr	r3, [sp, #8]
        String destNm = train.key("destination").valueString();
   b66d2:	a815      	add	r0, sp, #84	; 0x54
        count++;
   b66d4:	3301      	adds	r3, #1
   b66d6:	9302      	str	r3, [sp, #8]
        String destNm = train.key("destination").valueString();
   b66d8:	f002 febc 	bl	b9454 <_ZN6StringD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b66dc:	a811      	add	r0, sp, #68	; 0x44
   b66de:	f002 feb9 	bl	b9454 <_ZN6StringD1Ev>
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b66e2:	a808      	add	r0, sp, #32
   b66e4:	f000 fb82 	bl	b6dec <_ZN13JsonReferenceD1Ev>
   b66e8:	e5e3      	b.n	b62b2 <loop+0x14a>
            if(pointSide == nearestSide){
   b66ea:	4566      	cmp	r6, ip
   b66ec:	d1df      	bne.n	b66ae <loop+0x546>
              secondClosestIndex = closestIndex + 1;
   b66ee:	1c43      	adds	r3, r0, #1
   b66f0:	e7dd      	b.n	b66ae <loop+0x546>
   b66f2:	4602      	mov	r2, r0
   b66f4:	e781      	b.n	b65fa <loop+0x492>
   b66f6:	4619      	mov	r1, r3
   b66f8:	4616      	mov	r6, r2
   b66fa:	e780      	b.n	b65fe <loop+0x496>
          else if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b66fc:	9930      	ldr	r1, [sp, #192]	; 0xc0
   b66fe:	4291      	cmp	r1, r2
   b6700:	dc0a      	bgt.n	b6718 <loop+0x5b0>
   b6702:	4299      	cmp	r1, r3
   b6704:	dc08      	bgt.n	b6718 <loop+0x5b0>
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b6706:	9d31      	ldr	r5, [sp, #196]	; 0xc4
   b6708:	4295      	cmp	r5, r2
   b670a:	db09      	blt.n	b6720 <loop+0x5b8>
   b670c:	429d      	cmp	r5, r3
   b670e:	db07      	blt.n	b6720 <loop+0x5b8>
            inLoop = true;
   b6710:	9b03      	ldr	r3, [sp, #12]
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b6712:	460d      	mov	r5, r1
            pcbSegment = 2;
   b6714:	2702      	movs	r7, #2
   b6716:	e798      	b.n	b664a <loop+0x4e2>
            lowerScaleBound = 0;
   b6718:	2500      	movs	r5, #0
        bool inLoop = false;
   b671a:	462b      	mov	r3, r5
            pcbSegment = 0;
   b671c:	462f      	mov	r7, r5
   b671e:	e794      	b.n	b664a <loop+0x4e2>
        bool inLoop = false;
   b6720:	2300      	movs	r3, #0
            pcbSegment = 1;
   b6722:	2701      	movs	r7, #1
   b6724:	e791      	b.n	b664a <loop+0x4e2>
   b6726:	9d22      	ldr	r5, [sp, #136]	; 0x88
          if(inLoop){
   b6728:	2b00      	cmp	r3, #0
   b672a:	d043      	beq.n	b67b4 <loop+0x64c>
            if(currentRailway.name == pinkLine.name){
   b672c:	4980      	ldr	r1, [pc, #512]	; (b6930 <loop+0x7c8>)
   b672e:	a825      	add	r0, sp, #148	; 0x94
   b6730:	f7fe f8d0 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6734:	b1f0      	cbz	r0, b6774 <loop+0x60c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6736:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b673a:	1a9b      	subs	r3, r3, r2
   b673c:	109b      	asrs	r3, r3, #2
              segmentPos = (float)currentRailway.outputs[2].size() - segmentPos;
   b673e:	ee07 3a90 	vmov	s15, r3
   b6742:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b6746:	ee37 8ac8 	vsub.f32	s16, s15, s16
          if(pcbSegment == 1 && currentRailway.name == greenLine.name){
   b674a:	2f01      	cmp	r7, #1
   b674c:	d140      	bne.n	b67d0 <loop+0x668>
   b674e:	4979      	ldr	r1, [pc, #484]	; (b6934 <loop+0x7cc>)
   b6750:	a825      	add	r0, sp, #148	; 0x94
   b6752:	f7fe f8bf 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6756:	2800      	cmp	r0, #0
   b6758:	d042      	beq.n	b67e0 <loop+0x678>
   b675a:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   b675e:	1a9b      	subs	r3, r3, r2
   b6760:	109b      	asrs	r3, r3, #2
            segmentPos = (float)currentRailway.outputs[1].size() - segmentPos;
   b6762:	ee07 3a90 	vmov	s15, r3
   b6766:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b676a:	ee37 8ac8 	vsub.f32	s16, s15, s16
            trainDir = 6 - trainDir;
   b676e:	f1c4 0406 	rsb	r4, r4, #6
   b6772:	e035      	b.n	b67e0 <loop+0x678>
            }else if(currentRailway.name == orangeLine.name){
   b6774:	4970      	ldr	r1, [pc, #448]	; (b6938 <loop+0x7d0>)
   b6776:	a825      	add	r0, sp, #148	; 0x94
   b6778:	f7fe f8ac 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b677c:	2800      	cmp	r0, #0
   b677e:	d0e4      	beq.n	b674a <loop+0x5e2>
	return *(this->_M_impl._M_start + __n);
   b6780:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6784:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   b6788:	1ad2      	subs	r2, r2, r3
   b678a:	1092      	asrs	r2, r2, #2
              segmentPos = (int)(segmentPos + orangeLine.outputs[2].size() / 2) % orangeLine.outputs[2].size();
   b678c:	0853      	lsrs	r3, r2, #1
   b678e:	ee07 3a90 	vmov	s15, r3
   b6792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b6796:	ee37 8a88 	vadd.f32	s16, s15, s16
   b679a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   b679e:	ee17 3a90 	vmov	r3, s15
   b67a2:	fbb3 f1f2 	udiv	r1, r3, r2
   b67a6:	fb02 3311 	mls	r3, r2, r1, r3
   b67aa:	ee08 3a10 	vmov	s16, r3
   b67ae:	eeb8 8a48 	vcvt.f32.u32	s16, s16
   b67b2:	e7ca      	b.n	b674a <loop+0x5e2>
            if(currentRailway.name == brownLine.name || currentRailway.name == purpleLine.name){
   b67b4:	4961      	ldr	r1, [pc, #388]	; (b693c <loop+0x7d4>)
   b67b6:	a825      	add	r0, sp, #148	; 0x94
   b67b8:	f7fe f88c 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b67bc:	b928      	cbnz	r0, b67ca <loop+0x662>
   b67be:	4960      	ldr	r1, [pc, #384]	; (b6940 <loop+0x7d8>)
   b67c0:	a825      	add	r0, sp, #148	; 0x94
   b67c2:	f7fe f887 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b67c6:	2800      	cmp	r0, #0
   b67c8:	d0bf      	beq.n	b674a <loop+0x5e2>
              trainDir = 6 - trainDir;
   b67ca:	f1c4 0406 	rsb	r4, r4, #6
   b67ce:	e7bc      	b.n	b674a <loop+0x5e2>
          if(pcbSegment == 3 && currentRailway.name == pinkLine.name){
   b67d0:	2f03      	cmp	r7, #3
   b67d2:	d105      	bne.n	b67e0 <loop+0x678>
   b67d4:	4956      	ldr	r1, [pc, #344]	; (b6930 <loop+0x7c8>)
   b67d6:	a825      	add	r0, sp, #148	; 0x94
   b67d8:	f7fe f87c 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b67dc:	2800      	cmp	r0, #0
   b67de:	d1c6      	bne.n	b676e <loop+0x606>
  { return __builtin_floorf(__x); }
   b67e0:	eeb0 0a48 	vmov.f32	s0, s16
   b67e4:	f003 fe64 	bl	ba4b0 <floorf>
	return *(this->_M_impl._M_start + __n);
   b67e8:	230c      	movs	r3, #12
          currentRailway.outputs[pcbSegment][(int)floor(segmentPos)] = trainDir;
   b67ea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b67ee:	435f      	muls	r7, r3
   b67f0:	ee10 2a10 	vmov	r2, s0
   b67f4:	59eb      	ldr	r3, [r5, r7]
   b67f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b67fa:	e769      	b.n	b66d0 <loop+0x568>
          Wire.beginTransmission(brownLineAdr);
   b67fc:	f003 fc6a 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b6800:	4b50      	ldr	r3, [pc, #320]	; (b6944 <loop+0x7dc>)
   b6802:	6819      	ldr	r1, [r3, #0]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b6804:	f002 fc3a 	bl	b907c <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(String(currentRailway.colors[0].c_str()));
   b6808:	f003 fc64 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b680c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   b680e:	4605      	mov	r5, r0
   b6810:	6819      	ldr	r1, [r3, #0]
   b6812:	a815      	add	r0, sp, #84	; 0x54
   b6814:	f002 fe69 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
   b6818:	9915      	ldr	r1, [sp, #84]	; 0x54
   b681a:	4628      	mov	r0, r5
   b681c:	f7fd fd16 	bl	b424c <_ZN5Print5writeEPKc.isra.0>
   b6820:	a815      	add	r0, sp, #84	; 0x54
   b6822:	f002 fe17 	bl	b9454 <_ZN6StringD1Ev>
        Wire.write(String(currentRailway.colors[1].c_str()));
   b6826:	f003 fc55 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b682a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   b682c:	4605      	mov	r5, r0
   b682e:	6999      	ldr	r1, [r3, #24]
   b6830:	a815      	add	r0, sp, #84	; 0x54
   b6832:	f002 fe5a 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
   b6836:	9915      	ldr	r1, [sp, #84]	; 0x54
   b6838:	4628      	mov	r0, r5
   b683a:	f7fd fd07 	bl	b424c <_ZN5Print5writeEPKc.isra.0>
   b683e:	a815      	add	r0, sp, #84	; 0x54
   b6840:	f002 fe08 	bl	b9454 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b6844:	f003 fc46 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b6848:	f002 fc1f 	bl	b908a <_ZN7TwoWire15endTransmissionEv>
        if(i == 2 || currentRailway.name == purpleLine.name){
   b684c:	2c02      	cmp	r4, #2
   b684e:	d03f      	beq.n	b68d0 <loop+0x768>
   b6850:	4639      	mov	r1, r7
   b6852:	a825      	add	r0, sp, #148	; 0x94
   b6854:	f7fe f83e 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6858:	2800      	cmp	r0, #0
   b685a:	d139      	bne.n	b68d0 <loop+0x768>
        }else if(i == 3){
   b685c:	2c03      	cmp	r4, #3
   b685e:	d179      	bne.n	b6954 <loop+0x7ec>
          if(currentRailway.name == orangeLine.name){
   b6860:	4935      	ldr	r1, [pc, #212]	; (b6938 <loop+0x7d0>)
   b6862:	4d39      	ldr	r5, [pc, #228]	; (b6948 <loop+0x7e0>)
   b6864:	a825      	add	r0, sp, #148	; 0x94
   b6866:	f7fe f835 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b686a:	2800      	cmp	r0, #0
   b686c:	d059      	beq.n	b6922 <loop+0x7ba>
            Wire.beginTransmission(greenLineAdr[0]);
   b686e:	f003 fc31 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b6872:	6829      	ldr	r1, [r5, #0]
            Wire.beginTransmission(greenLineAdr[1]);
   b6874:	f002 fc02 	bl	b907c <_ZN7TwoWire17beginTransmissionEi>
        if(i == 3 && currentRailway.name == orangeLine.name){
   b6878:	492f      	ldr	r1, [pc, #188]	; (b6938 <loop+0x7d0>)
   b687a:	a825      	add	r0, sp, #148	; 0x94
   b687c:	f7fe f82a 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6880:	4605      	mov	r5, r0
   b6882:	2800      	cmp	r0, #0
   b6884:	f000 80c0 	beq.w	b6a08 <loop+0x8a0>
   b6888:	f8df a0c4 	ldr.w	sl, [pc, #196]	; b6950 <loop+0x7e8>
   b688c:	2500      	movs	r5, #0
   b688e:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
   b6892:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6896:	e9d0 3200 	ldrd	r3, r2, [r0]
   b689a:	1ad2      	subs	r2, r2, r3
   b689c:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b68a0:	1a5b      	subs	r3, r3, r1
   b68a2:	109b      	asrs	r3, r3, #2
          for(int j = 0; j < greenLine.outputs[0].size() - orangeLine.outputs[3].size(); j++){
   b68a4:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b68a8:	42ab      	cmp	r3, r5
   b68aa:	f240 8108 	bls.w	b6abe <loop+0x956>
            Wire.write('0');
   b68ae:	f003 fc11 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b68b2:	2130      	movs	r1, #48	; 0x30
   b68b4:	f7fd fcc6 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
          for(int j = 0; j < greenLine.outputs[0].size() - orangeLine.outputs[3].size(); j++){
   b68b8:	3501      	adds	r5, #1
   b68ba:	e7e8      	b.n	b688e <loop+0x726>
            Wire.beginTransmission(greenLineAdr[1]);
   b68bc:	f003 fc0a 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b68c0:	6869      	ldr	r1, [r5, #4]
   b68c2:	e79f      	b.n	b6804 <loop+0x69c>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b68c4:	f003 fc06 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b68c8:	f8db 3000 	ldr.w	r3, [fp]
   b68cc:	5999      	ldr	r1, [r3, r6]
   b68ce:	e799      	b.n	b6804 <loop+0x69c>
          Wire.beginTransmission(brownLineAdr);
   b68d0:	f003 fc00 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b68d4:	4b1b      	ldr	r3, [pc, #108]	; (b6944 <loop+0x7dc>)
   b68d6:	6819      	ldr	r1, [r3, #0]
   b68d8:	f002 fbd0 	bl	b907c <_ZN7TwoWire17beginTransmissionEi>
        if(i == 2){
   b68dc:	2c02      	cmp	r4, #2
   b68de:	f040 80e8 	bne.w	b6ab2 <loop+0x94a>
          if(currentRailway.name == greenLine.name){
   b68e2:	4914      	ldr	r1, [pc, #80]	; (b6934 <loop+0x7cc>)
   b68e4:	4d19      	ldr	r5, [pc, #100]	; (b694c <loop+0x7e4>)
   b68e6:	a825      	add	r0, sp, #148	; 0x94
   b68e8:	f7fd fff4 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b68ec:	4682      	mov	sl, r0
   b68ee:	2800      	cmp	r0, #0
   b68f0:	d057      	beq.n	b69a2 <loop+0x83a>
            for(int j = 0; j < brownLine.outputs[0].size() + (brownLine.outputs[2].size() / 2); j++){
   b68f2:	f04f 0a00 	mov.w	sl, #0
	return *(this->_M_impl._M_start + __n);
   b68f6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b68f8:	e9d2 1306 	ldrd	r1, r3, [r2, #24]
   b68fc:	1a5b      	subs	r3, r3, r1
   b68fe:	1099      	asrs	r1, r3, #2
   b6900:	e9d2 2300 	ldrd	r2, r3, [r2]
   b6904:	1a9b      	subs	r3, r3, r2
   b6906:	109b      	asrs	r3, r3, #2
   b6908:	eb03 0351 	add.w	r3, r3, r1, lsr #1
   b690c:	4553      	cmp	r3, sl
   b690e:	f240 80d6 	bls.w	b6abe <loop+0x956>
              Wire.write('0');
   b6912:	f003 fbdf 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b6916:	2130      	movs	r1, #48	; 0x30
   b6918:	f7fd fc94 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < brownLine.outputs[0].size() + (brownLine.outputs[2].size() / 2); j++){
   b691c:	f10a 0a01 	add.w	sl, sl, #1
   b6920:	e7e9      	b.n	b68f6 <loop+0x78e>
            Wire.beginTransmission(greenLineAdr[1]);
   b6922:	f003 fbd7 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b6926:	6869      	ldr	r1, [r5, #4]
   b6928:	e7a4      	b.n	b6874 <loop+0x70c>
   b692a:	bf00      	nop
   b692c:	000bd56b 	.word	0x000bd56b
   b6930:	2003e510 	.word	0x2003e510
   b6934:	20035648 	.word	0x20035648
   b6938:	20037ed8 	.word	0x20037ed8
   b693c:	200355d8 	.word	0x200355d8
   b6940:	2003e57c 	.word	0x2003e57c
   b6944:	20035614 	.word	0x20035614
   b6948:	20035684 	.word	0x20035684
   b694c:	200355a8 	.word	0x200355a8
   b6950:	20035618 	.word	0x20035618
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b6954:	f003 fbbe 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b6958:	f8db 3000 	ldr.w	r3, [fp]
   b695c:	5999      	ldr	r1, [r3, r6]
   b695e:	f002 fb8d 	bl	b907c <_ZN7TwoWire17beginTransmissionEi>
        if(i == 1 && (currentRailway.name == brownLine.name || currentRailway.name == purpleLine.name)){
   b6962:	2c01      	cmp	r4, #1
   b6964:	f040 80ab 	bne.w	b6abe <loop+0x956>
   b6968:	496b      	ldr	r1, [pc, #428]	; (b6b18 <loop+0x9b0>)
   b696a:	a825      	add	r0, sp, #148	; 0x94
   b696c:	f7fd ffb2 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6970:	4605      	mov	r5, r0
   b6972:	2800      	cmp	r0, #0
   b6974:	d146      	bne.n	b6a04 <loop+0x89c>
   b6976:	4639      	mov	r1, r7
   b6978:	a825      	add	r0, sp, #148	; 0x94
   b697a:	f7fd ffab 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b697e:	2800      	cmp	r0, #0
   b6980:	f000 809d 	beq.w	b6abe <loop+0x956>
	return *(this->_M_impl._M_start + __n);
   b6984:	9a22      	ldr	r2, [sp, #136]	; 0x88
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6986:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
   b698a:	1a9b      	subs	r3, r3, r2
          for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b698c:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
   b6990:	f080 8095 	bcs.w	b6abe <loop+0x956>
            Wire.write('0');
   b6994:	f003 fb9e 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b6998:	2130      	movs	r1, #48	; 0x30
   b699a:	f7fd fc53 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
          for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b699e:	3501      	adds	r5, #1
   b69a0:	e7f0      	b.n	b6984 <loop+0x81c>
          else if(currentRailway.name == brownLine.name || currentRailway.name == purpleLine.name){
   b69a2:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b69a6:	a825      	add	r0, sp, #148	; 0x94
   b69a8:	f7fd ff94 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b69ac:	9002      	str	r0, [sp, #8]
   b69ae:	b930      	cbnz	r0, b69be <loop+0x856>
   b69b0:	4639      	mov	r1, r7
   b69b2:	a825      	add	r0, sp, #148	; 0x94
   b69b4:	f7fd ff8e 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b69b8:	b1a0      	cbz	r0, b69e4 <loop+0x87c>
   b69ba:	9b02      	ldr	r3, [sp, #8]
   b69bc:	469a      	mov	sl, r3
	return *(this->_M_impl._M_start + __n);
   b69be:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b69c0:	e9d2 2300 	ldrd	r2, r3, [r2]
   b69c4:	1a9b      	subs	r3, r3, r2
            for(int j = 0; j < brownLine.outputs[0].size(); j++){
   b69c6:	ebba 0fa3 	cmp.w	sl, r3, asr #2
   b69ca:	d278      	bcs.n	b6abe <loop+0x956>
              Wire.write((char)currentRailway.outputs[0][j] + '0');
   b69cc:	f003 fb82 	bl	ba0d4 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b69d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   b69d2:	681b      	ldr	r3, [r3, #0]
   b69d4:	f813 102a 	ldrb.w	r1, [r3, sl, lsl #2]
   b69d8:	3130      	adds	r1, #48	; 0x30
   b69da:	f7fd fc33 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < brownLine.outputs[0].size(); j++){
   b69de:	f10a 0a01 	add.w	sl, sl, #1
   b69e2:	e7ec      	b.n	b69be <loop+0x856>
   b69e4:	4682      	mov	sl, r0
   b69e6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b69e8:	e9d2 2300 	ldrd	r2, r3, [r2]
   b69ec:	1a9b      	subs	r3, r3, r2
            for(int j = 0; j < brownLine.outputs[0].size(); j++){
   b69ee:	ebba 0fa3 	cmp.w	sl, r3, asr #2
   b69f2:	d264      	bcs.n	b6abe <loop+0x956>
              Wire.write('0');
   b69f4:	f003 fb6e 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b69f8:	2130      	movs	r1, #48	; 0x30
   b69fa:	f7fd fc23 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < brownLine.outputs[0].size(); j++){
   b69fe:	f10a 0a01 	add.w	sl, sl, #1
   b6a02:	e7f0      	b.n	b69e6 <loop+0x87e>
   b6a04:	2500      	movs	r5, #0
   b6a06:	e7bd      	b.n	b6984 <loop+0x81c>
        }else if(i == 3 && currentRailway.name == pinkLine.name){
   b6a08:	4944      	ldr	r1, [pc, #272]	; (b6b1c <loop+0x9b4>)
   b6a0a:	a825      	add	r0, sp, #148	; 0x94
   b6a0c:	f7fd ff62 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6a10:	2800      	cmp	r0, #0
   b6a12:	d054      	beq.n	b6abe <loop+0x956>
	return *(this->_M_impl._M_start + __n);
   b6a14:	f8df a110 	ldr.w	sl, [pc, #272]	; b6b28 <loop+0x9c0>
   b6a18:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
   b6a1c:	4b40      	ldr	r3, [pc, #256]	; (b6b20 <loop+0x9b8>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a1e:	e9d1 1200 	ldrd	r1, r2, [r1]
	return *(this->_M_impl._M_start + __n);
   b6a22:	6a58      	ldr	r0, [r3, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a24:	1a51      	subs	r1, r2, r1
   b6a26:	e9d0 0209 	ldrd	r0, r2, [r0, #36]	; 0x24
   b6a2a:	1a12      	subs	r2, r2, r0
   b6a2c:	1092      	asrs	r2, r2, #2
          for(int j = 0; j < greenLine.outputs[0].size() - pinkLine.outputs[3].size(); j++){
   b6a2e:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   b6a32:	42aa      	cmp	r2, r5
   b6a34:	d943      	bls.n	b6abe <loop+0x956>
            Wire.write('0');
   b6a36:	f003 fb4d 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b6a3a:	2130      	movs	r1, #48	; 0x30
   b6a3c:	f7fd fc02 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
          for(int j = 0; j < greenLine.outputs[0].size() - pinkLine.outputs[3].size(); j++){
   b6a40:	3501      	adds	r5, #1
   b6a42:	e7e9      	b.n	b6a18 <loop+0x8b0>
        Serial.println();
   b6a44:	f003 f9f8 	bl	b9e38 <_Z16_fetch_usbserialv>
   b6a48:	f002 fc99 	bl	b937e <_ZN5Print7printlnEv>
      for(int i = 0; i < 4; i++){
   b6a4c:	3401      	adds	r4, #1
        Wire.endTransmission();
   b6a4e:	f003 fb41 	bl	ba0d4 <_Z19__fetch_global_Wirev>
   b6a52:	f002 fb1a 	bl	b908a <_ZN7TwoWire15endTransmissionEv>
      for(int i = 0; i < 4; i++){
   b6a56:	2c04      	cmp	r4, #4
   b6a58:	f106 0604 	add.w	r6, r6, #4
   b6a5c:	f47f aca5 	bne.w	b63aa <loop+0x242>
   b6a60:	2300      	movs	r3, #0
          currentRailway.outputs[i][j] = 0;
   b6a62:	461c      	mov	r4, r3
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6a64:	2200      	movs	r2, #0
	return *(this->_M_impl._M_start + __n);
   b6a66:	9922      	ldr	r1, [sp, #136]	; 0x88
   b6a68:	18cd      	adds	r5, r1, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a6a:	58c8      	ldr	r0, [r1, r3]
   b6a6c:	6869      	ldr	r1, [r5, #4]
   b6a6e:	1a09      	subs	r1, r1, r0
   b6a70:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
   b6a74:	d203      	bcs.n	b6a7e <loop+0x916>
          currentRailway.outputs[i][j] = 0;
   b6a76:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6a7a:	3201      	adds	r2, #1
   b6a7c:	e7f3      	b.n	b6a66 <loop+0x8fe>
      for(int i = 0; i < 4; i++){
   b6a7e:	330c      	adds	r3, #12
   b6a80:	2b30      	cmp	r3, #48	; 0x30
   b6a82:	d1ef      	bne.n	b6a64 <loop+0x8fc>
      Serial.println();
   b6a84:	f003 f9d8 	bl	b9e38 <_Z16_fetch_usbserialv>
   b6a88:	f002 fc79 	bl	b937e <_ZN5Print7printlnEv>
      }
   b6a8c:	a805      	add	r0, sp, #20
   b6a8e:	f7fd fe41 	bl	b4714 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      Railway currentRailway = railways[j];
   b6a92:	a819      	add	r0, sp, #100	; 0x64
   b6a94:	f7fe f8b4 	bl	b4c00 <_ZN7RailwayD1Ev>
    for(int j = 0; j < railways.size(); j++){
   b6a98:	f109 0901 	add.w	r9, r9, #1
   b6a9c:	f7ff bba9 	b.w	b61f2 <loop+0x8a>
    Serial.println();
   b6aa0:	f003 f9ca 	bl	b9e38 <_Z16_fetch_usbserialv>
}
   b6aa4:	b035      	add	sp, #212	; 0xd4
   b6aa6:	ecbd 8b06 	vpop	{d8-d10}
   b6aaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Serial.println();
   b6aae:	f002 bc66 	b.w	b937e <_ZN5Print7printlnEv>
        if(i == 1 && (currentRailway.name == brownLine.name || currentRailway.name == purpleLine.name)){
   b6ab2:	2c01      	cmp	r4, #1
   b6ab4:	f43f af58 	beq.w	b6968 <loop+0x800>
        if(i == 3 && currentRailway.name == orangeLine.name){
   b6ab8:	2c03      	cmp	r4, #3
   b6aba:	f43f aedd 	beq.w	b6878 <loop+0x710>
        Serial.printf("%s rail part %i: ", currentRailway.name.c_str(), i);
   b6abe:	f003 f9bb 	bl	b9e38 <_Z16_fetch_usbserialv>
   b6ac2:	9a25      	ldr	r2, [sp, #148]	; 0x94
   b6ac4:	4917      	ldr	r1, [pc, #92]	; (b6b24 <loop+0x9bc>)
   b6ac6:	4623      	mov	r3, r4
   b6ac8:	f7fd fca4 	bl	b4414 <_ZN5Print6printfEPKcz>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6acc:	250c      	movs	r5, #12
   b6ace:	4365      	muls	r5, r4
   b6ad0:	f04f 0a00 	mov.w	sl, #0
	return *(this->_M_impl._M_start + __n);
   b6ad4:	9a22      	ldr	r2, [sp, #136]	; 0x88
   b6ad6:	1953      	adds	r3, r2, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6ad8:	5952      	ldr	r2, [r2, r5]
   b6ada:	685b      	ldr	r3, [r3, #4]
   b6adc:	1a9b      	subs	r3, r3, r2
   b6ade:	ebba 0fa3 	cmp.w	sl, r3, asr #2
   b6ae2:	d2af      	bcs.n	b6a44 <loop+0x8dc>
          Wire.write((char)currentRailway.outputs[i][j] + '0');
   b6ae4:	f003 faf6 	bl	ba0d4 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b6ae8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   b6aea:	595b      	ldr	r3, [r3, r5]
   b6aec:	f813 102a 	ldrb.w	r1, [r3, sl, lsl #2]
   b6af0:	3130      	adds	r1, #48	; 0x30
   b6af2:	f7fd fba7 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
          Serial.print(currentRailway.outputs[i][j]);
   b6af6:	f003 f99f 	bl	b9e38 <_Z16_fetch_usbserialv>
   b6afa:	9b22      	ldr	r3, [sp, #136]	; 0x88
   b6afc:	595b      	ldr	r3, [r3, r5]
   b6afe:	220a      	movs	r2, #10
   b6b00:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   b6b04:	f7fd fb54 	bl	b41b0 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6b08:	f10a 0a01 	add.w	sl, sl, #1
   b6b0c:	e7e2      	b.n	b6ad4 <loop+0x96c>
}
   b6b0e:	b035      	add	sp, #212	; 0xd4
   b6b10:	ecbd 8b06 	vpop	{d8-d10}
   b6b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6b18:	200355d8 	.word	0x200355d8
   b6b1c:	2003e510 	.word	0x2003e510
   b6b20:	2003e4e0 	.word	0x2003e4e0
   b6b24:	000bd574 	.word	0x000bd574
   b6b28:	20035618 	.word	0x20035618

000b6b2c <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b6b2c:	b510      	push	{r4, lr}
   b6b2e:	4604      	mov	r4, r0
   b6b30:	f003 f8b4 	bl	b9c9c <_ZN9TCPClientC1Ev>
{

}
   b6b34:	4620      	mov	r0, r4
   b6b36:	bd10      	pop	{r4, pc}

000b6b38 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b6b38:	b538      	push	{r3, r4, r5, lr}
   b6b3a:	4604      	mov	r4, r0
   b6b3c:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b6b3e:	f002 fc17 	bl	b9370 <_ZN5Print5printEPKc>
    client.print(": ");
   b6b42:	4905      	ldr	r1, [pc, #20]	; (b6b58 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b6b44:	4620      	mov	r0, r4
   b6b46:	f002 fc13 	bl	b9370 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b6b4a:	4629      	mov	r1, r5
   b6b4c:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b6b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b6b52:	f002 bc20 	b.w	b9396 <_ZN5Print7printlnEPKc>
   b6b56:	bf00      	nop
   b6b58:	000bd33f 	.word	0x000bd33f

000b6b5c <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b6b5c:	b538      	push	{r3, r4, r5, lr}
   b6b5e:	4605      	mov	r5, r0
   b6b60:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b6b62:	f002 fc05 	bl	b9370 <_ZN5Print5printEPKc>
    client.print(": ");
   b6b66:	490b      	ldr	r1, [pc, #44]	; (b6b94 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b6b68:	4628      	mov	r0, r5
   b6b6a:	f002 fc01 	bl	b9370 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b6b6e:	2c00      	cmp	r4, #0
   b6b70:	da0d      	bge.n	b6b8e <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b6b72:	212d      	movs	r1, #45	; 0x2d
   b6b74:	4628      	mov	r0, r5
   b6b76:	f002 fbff 	bl	b9378 <_ZN5Print5printEc>
            val = -n;
   b6b7a:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b6b7c:	4628      	mov	r0, r5
   b6b7e:	220a      	movs	r2, #10
   b6b80:	f002 fc13 	bl	b93aa <_ZN5Print11printNumberEmh>
        n += println();
   b6b84:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b6b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6b8a:	f002 bbf8 	b.w	b937e <_ZN5Print7printlnEv>
            val = n;
   b6b8e:	4621      	mov	r1, r4
   b6b90:	e7f4      	b.n	b6b7c <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b6b92:	bf00      	nop
   b6b94:	000bd33f 	.word	0x000bd33f

000b6b98 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b6b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6b9c:	460e      	mov	r6, r1
   b6b9e:	b091      	sub	sp, #68	; 0x44
   b6ba0:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b6ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6ba6:	6013      	str	r3, [r2, #0]
{
   b6ba8:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b6baa:	2100      	movs	r1, #0
   b6bac:	4630      	mov	r0, r6
   b6bae:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b6bb2:	4617      	mov	r7, r2
   b6bb4:	f002 fd37 	bl	b9626 <_ZNK6String6equalsEPKc>
   b6bb8:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b6bbc:	4603      	mov	r3, r0
   b6bbe:	b998      	cbnz	r0, b6be8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b6bc0:	f1be 0f00 	cmp.w	lr, #0
   b6bc4:	bf14      	ite	ne
   b6bc6:	4672      	movne	r2, lr
   b6bc8:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b6bca:	6831      	ldr	r1, [r6, #0]
   b6bcc:	b292      	uxth	r2, r2
   b6bce:	4620      	mov	r0, r4
   b6bd0:	f002 fe64 	bl	b989c <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b6bd4:	1e05      	subs	r5, r0, #0
   b6bd6:	bf18      	it	ne
   b6bd8:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b6bda:	b9c5      	cbnz	r5, b6c0e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b6bdc:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b6bde:	b011      	add	sp, #68	; 0x44
   b6be0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b6be4:	f003 b810 	b.w	b9c08 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b6be8:	4b76      	ldr	r3, [pc, #472]	; (b6dc4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b6bea:	930a      	str	r3, [sp, #40]	; 0x28
   b6bec:	f106 0c14 	add.w	ip, r6, #20
   b6bf0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6bf4:	ad0b      	add	r5, sp, #44	; 0x2c
   b6bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6bf8:	f8dc 3000 	ldr.w	r3, [ip]
   b6bfc:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b6bfe:	fa1f f28e 	uxth.w	r2, lr
   b6c02:	2300      	movs	r3, #0
   b6c04:	a90a      	add	r1, sp, #40	; 0x28
   b6c06:	4620      	mov	r0, r4
   b6c08:	f002 ff28 	bl	b9a5c <_ZN9TCPClient7connectE9IPAddresstm>
   b6c0c:	e7e2      	b.n	b6bd4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b6c0e:	4649      	mov	r1, r9
   b6c10:	4620      	mov	r0, r4
   b6c12:	f002 fbad 	bl	b9370 <_ZN5Print5printEPKc>
    client.print(" ");
   b6c16:	496c      	ldr	r1, [pc, #432]	; (b6dc8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b6c18:	4620      	mov	r0, r4
   b6c1a:	f002 fba9 	bl	b9370 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b6c1e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b6c20:	4620      	mov	r0, r4
   b6c22:	f002 fba5 	bl	b9370 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b6c26:	4969      	ldr	r1, [pc, #420]	; (b6dcc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b6c28:	4620      	mov	r0, r4
   b6c2a:	f002 fba1 	bl	b9370 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b6c2e:	4968      	ldr	r1, [pc, #416]	; (b6dd0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b6c30:	4a68      	ldr	r2, [pc, #416]	; (b6dd4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b6c32:	4620      	mov	r0, r4
   b6c34:	f7ff ff80 	bl	b6b38 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b6c38:	2100      	movs	r1, #0
   b6c3a:	4630      	mov	r0, r6
   b6c3c:	f002 fcf3 	bl	b9626 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b6c40:	b920      	cbnz	r0, b6c4c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b6c42:	6832      	ldr	r2, [r6, #0]
   b6c44:	4964      	ldr	r1, [pc, #400]	; (b6dd8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b6c46:	4620      	mov	r0, r4
   b6c48:	f7ff ff76 	bl	b6b38 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b6c4c:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b6c50:	2100      	movs	r1, #0
   b6c52:	4650      	mov	r0, sl
   b6c54:	f002 fce7 	bl	b9626 <_ZNK6String6equalsEPKc>
   b6c58:	b928      	cbnz	r0, b6c66 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b6c5a:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b6c5c:	495f      	ldr	r1, [pc, #380]	; (b6ddc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b6c5e:	4620      	mov	r0, r4
   b6c60:	f7ff ff7c 	bl	b6b5c <_ZN10HttpClient10sendHeaderEPKci>
   b6c64:	e006      	b.n	b6c74 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b6c66:	495e      	ldr	r1, [pc, #376]	; (b6de0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b6c68:	4648      	mov	r0, r9
   b6c6a:	f004 fadf 	bl	bb22c <strcmp>
   b6c6e:	4602      	mov	r2, r0
   b6c70:	2800      	cmp	r0, #0
   b6c72:	d0f3      	beq.n	b6c5c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b6c74:	f1b8 0f00 	cmp.w	r8, #0
   b6c78:	d00e      	beq.n	b6c98 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b6c7a:	f8d8 1000 	ldr.w	r1, [r8]
   b6c7e:	b159      	cbz	r1, b6c98 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b6c80:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b6c84:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b6c86:	b122      	cbz	r2, b6c92 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b6c88:	f7ff ff56 	bl	b6b38 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b6c8c:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b6c90:	e7f3      	b.n	b6c7a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b6c92:	f002 fb80 	bl	b9396 <_ZN5Print7printlnEPKc>
}
   b6c96:	e7f9      	b.n	b6c8c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b6c98:	4620      	mov	r0, r4
   b6c9a:	f002 fb70 	bl	b937e <_ZN5Print7printlnEv>
    client.flush();
   b6c9e:	4620      	mov	r0, r4
   b6ca0:	f002 fd5c 	bl	b975c <_ZN9TCPClient5flushEv>
   b6ca4:	2100      	movs	r1, #0
   b6ca6:	4650      	mov	r0, sl
   b6ca8:	f002 fcbd 	bl	b9626 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b6cac:	b918      	cbnz	r0, b6cb6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b6cae:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b6cb0:	4620      	mov	r0, r4
   b6cb2:	f002 fb70 	bl	b9396 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b6cb6:	f104 0a1c 	add.w	sl, r4, #28
   b6cba:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   b6cbe:	2100      	movs	r1, #0
   b6cc0:	4650      	mov	r0, sl
   b6cc2:	f004 fa7d 	bl	bb1c0 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6cc6:	f000 fdb5 	bl	b7834 <HAL_Timer_Get_Milli_Seconds>
   b6cca:	9001      	str	r0, [sp, #4]
   b6ccc:	f000 fdb2 	bl	b7834 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b6cd0:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b6cd4:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b6cd6:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b6cda:	4620      	mov	r0, r4
   b6cdc:	f002 ff3a 	bl	b9b54 <_ZN9TCPClient9availableEv>
   b6ce0:	b1e8      	cbz	r0, b6d1e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   b6ce2:	4620      	mov	r0, r4
   b6ce4:	f002 fd20 	bl	b9728 <_ZN9TCPClient4readEv>
   b6ce8:	4681      	mov	r9, r0
   b6cea:	f000 fda3 	bl	b7834 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b6cee:	f242 73fe 	movw	r3, #10238	; 0x27fe
   b6cf2:	429e      	cmp	r6, r3
   b6cf4:	9001      	str	r0, [sp, #4]
   b6cf6:	d804      	bhi.n	b6d02 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b6cf8:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b6cfa:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b6cfe:	3601      	adds	r6, #1
        while (client.available()) {
   b6d00:	e7eb      	b.n	b6cda <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b6d02:	f242 73ff 	movw	r3, #10239	; 0x27ff
   b6d06:	429e      	cmp	r6, r3
   b6d08:	d1f9      	bne.n	b6cfe <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b6d0a:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   b6d0e:	2200      	movs	r2, #0
   b6d10:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
                client.stop();
   b6d14:	4620      	mov	r0, r4
   b6d16:	f002 ff77 	bl	b9c08 <_ZN9TCPClient4stopEv>
                error = true;
   b6d1a:	46a8      	mov	r8, r5
   b6d1c:	e7ef      	b.n	b6cfe <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b6d1e:	19a3      	adds	r3, r4, r6
   b6d20:	7718      	strb	r0, [r3, #28]
   b6d22:	f000 fd87 	bl	b7834 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b6d26:	9b01      	ldr	r3, [sp, #4]
   b6d28:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b6d2c:	f1b8 0f00 	cmp.w	r8, #0
   b6d30:	d104      	bne.n	b6d3c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
   b6d32:	45d9      	cmp	r9, fp
   b6d34:	d802      	bhi.n	b6d3c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
            delay(200);
   b6d36:	20c8      	movs	r0, #200	; 0xc8
   b6d38:	f000 ffb0 	bl	b7c9c <delay>
    } while (client.connected() && !timeout && !error);
   b6d3c:	4620      	mov	r0, r4
   b6d3e:	f002 fe2b 	bl	b9998 <_ZN9TCPClient9connectedEv>
   b6d42:	b120      	cbz	r0, b6d4e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b6d44:	45d9      	cmp	r9, fp
   b6d46:	d802      	bhi.n	b6d4e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b6d48:	f1b8 0f00 	cmp.w	r8, #0
   b6d4c:	d0c5      	beq.n	b6cda <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b6d4e:	4620      	mov	r0, r4
   b6d50:	f002 ff5a 	bl	b9c08 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b6d54:	4651      	mov	r1, sl
   b6d56:	a802      	add	r0, sp, #8
   b6d58:	f002 fbc7 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b6d5c:	230c      	movs	r3, #12
   b6d5e:	2209      	movs	r2, #9
   b6d60:	a902      	add	r1, sp, #8
   b6d62:	a806      	add	r0, sp, #24
   b6d64:	f002 fc84 	bl	b9670 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b6d68:	491e      	ldr	r1, [pc, #120]	; (b6de4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b6d6a:	a80a      	add	r0, sp, #40	; 0x28
   b6d6c:	f002 fbbd 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
   b6d70:	a90a      	add	r1, sp, #40	; 0x28
   b6d72:	a802      	add	r0, sp, #8
   b6d74:	f002 fc78 	bl	b9668 <_ZNK6String7indexOfERKS_>
   b6d78:	4604      	mov	r4, r0
   b6d7a:	a80a      	add	r0, sp, #40	; 0x28
   b6d7c:	f002 fb6a 	bl	b9454 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b6d80:	1c63      	adds	r3, r4, #1
   b6d82:	d108      	bne.n	b6d96 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fe>
    String statusCode = raw_response.substring(9,12);
   b6d84:	a806      	add	r0, sp, #24
   b6d86:	f002 fb65 	bl	b9454 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b6d8a:	a802      	add	r0, sp, #8
   b6d8c:	f002 fb62 	bl	b9454 <_ZN6StringD1Ev>
}
   b6d90:	b011      	add	sp, #68	; 0x44
   b6d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b6d96:	1d3d      	adds	r5, r7, #4
   b6d98:	4913      	ldr	r1, [pc, #76]	; (b6de8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b6d9a:	4628      	mov	r0, r5
   b6d9c:	f002 fbc8 	bl	b9530 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b6da0:	1d22      	adds	r2, r4, #4
   b6da2:	a902      	add	r1, sp, #8
   b6da4:	a80a      	add	r0, sp, #40	; 0x28
   b6da6:	f002 fc83 	bl	b96b0 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b6daa:	a90a      	add	r1, sp, #40	; 0x28
   b6dac:	4628      	mov	r0, r5
   b6dae:	f002 fbfb 	bl	b95a8 <_ZN6String6concatERKS_>
   b6db2:	a80a      	add	r0, sp, #40	; 0x28
   b6db4:	f002 fb4e 	bl	b9454 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b6db8:	9806      	ldr	r0, [sp, #24]
   b6dba:	f004 f9c5 	bl	bb148 <atoi>
   b6dbe:	6038      	str	r0, [r7, #0]
   b6dc0:	e7e0      	b.n	b6d84 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ec>
   b6dc2:	bf00      	nop
   b6dc4:	000bd968 	.word	0x000bd968
   b6dc8:	000bd4f0 	.word	0x000bd4f0
   b6dcc:	000bd6ac 	.word	0x000bd6ac
   b6dd0:	000bd6be 	.word	0x000bd6be
   b6dd4:	000bd6b8 	.word	0x000bd6b8
   b6dd8:	000bd6c9 	.word	0x000bd6c9
   b6ddc:	000bd6ce 	.word	0x000bd6ce
   b6de0:	000bd6dd 	.word	0x000bd6dd
   b6de4:	000bd6e2 	.word	0x000bd6e2
   b6de8:	000bd6e6 	.word	0x000bd6e6

000b6dec <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   b6dec:	4770      	bx	lr

000b6dee <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   b6dee:	b510      	push	{r4, lr}
}
   b6df0:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   b6df2:	4604      	mov	r4, r0
}
   b6df4:	f7fd f955 	bl	b40a2 <_ZdlPvj>
   b6df8:	4620      	mov	r0, r4
   b6dfa:	bd10      	pop	{r4, pc}

000b6dfc <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   b6dfc:	b510      	push	{r4, lr}
   b6dfe:	4b05      	ldr	r3, [pc, #20]	; (b6e14 <_ZN10JsonBufferD1Ev+0x18>)
   b6e00:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b6e02:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b6e04:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b6e06:	b91b      	cbnz	r3, b6e10 <_ZN10JsonBufferD1Ev+0x14>
   b6e08:	6840      	ldr	r0, [r0, #4]
   b6e0a:	b108      	cbz	r0, b6e10 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b6e0c:	f000 fefe 	bl	b7c0c <free>
}
   b6e10:	4620      	mov	r0, r4
   b6e12:	bd10      	pop	{r4, pc}
   b6e14:	000bd6f4 	.word	0x000bd6f4

000b6e18 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b6e18:	b510      	push	{r4, lr}
   b6e1a:	4604      	mov	r4, r0
}
   b6e1c:	f7ff ffee 	bl	b6dfc <_ZN10JsonBufferD1Ev>
   b6e20:	4620      	mov	r0, r4
   b6e22:	2114      	movs	r1, #20
   b6e24:	f7fd f93d 	bl	b40a2 <_ZdlPvj>
   b6e28:	4620      	mov	r0, r4
   b6e2a:	bd10      	pop	{r4, pc}

000b6e2c <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b6e2c:	b510      	push	{r4, lr}
   b6e2e:	4b07      	ldr	r3, [pc, #28]	; (b6e4c <_ZN10JsonParserD1Ev+0x20>)
   b6e30:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b6e32:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b6e34:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b6e36:	b91b      	cbnz	r3, b6e40 <_ZN10JsonParserD1Ev+0x14>
   b6e38:	6940      	ldr	r0, [r0, #20]
   b6e3a:	b108      	cbz	r0, b6e40 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b6e3c:	f000 fee6 	bl	b7c0c <free>
JsonParser::~JsonParser() {
   b6e40:	4620      	mov	r0, r4
   b6e42:	f7ff ffdb 	bl	b6dfc <_ZN10JsonBufferD1Ev>
}
   b6e46:	4620      	mov	r0, r4
   b6e48:	bd10      	pop	{r4, pc}
   b6e4a:	bf00      	nop
   b6e4c:	000bd704 	.word	0x000bd704

000b6e50 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b6e50:	b510      	push	{r4, lr}
   b6e52:	4604      	mov	r4, r0
}
   b6e54:	f7ff ffea 	bl	b6e2c <_ZN10JsonParserD1Ev>
   b6e58:	4620      	mov	r0, r4
   b6e5a:	212c      	movs	r1, #44	; 0x2c
   b6e5c:	f7fd f921 	bl	b40a2 <_ZdlPvj>
   b6e60:	4620      	mov	r0, r4
   b6e62:	bd10      	pop	{r4, pc}

000b6e64 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b6e64:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b6e66:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b6e68:	4604      	mov	r4, r0
   b6e6a:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b6e6c:	b10b      	cbz	r3, b6e72 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b6e6e:	2000      	movs	r0, #0
}
   b6e70:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b6e72:	6840      	ldr	r0, [r0, #4]
   b6e74:	b138      	cbz	r0, b6e86 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b6e76:	f000 fed1 	bl	b7c1c <realloc>
		if (newBuffer) {
   b6e7a:	2800      	cmp	r0, #0
   b6e7c:	d0f7      	beq.n	b6e6e <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b6e7e:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b6e82:	2001      	movs	r0, #1
   b6e84:	e7f4      	b.n	b6e70 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b6e86:	4608      	mov	r0, r1
   b6e88:	f000 feb8 	bl	b7bfc <malloc>
   b6e8c:	e7f5      	b.n	b6e7a <_ZN10JsonBuffer8allocateEj+0x16>

000b6e8e <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b6e8e:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b6e90:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b6e92:	460e      	mov	r6, r1
   b6e94:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b6e96:	18d1      	adds	r1, r2, r3
   b6e98:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b6e9a:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b6e9c:	b172      	cbz	r2, b6ebc <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b6e9e:	6882      	ldr	r2, [r0, #8]
   b6ea0:	428a      	cmp	r2, r1
   b6ea2:	d30b      	bcc.n	b6ebc <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b6ea4:	6860      	ldr	r0, [r4, #4]
   b6ea6:	68e3      	ldr	r3, [r4, #12]
   b6ea8:	462a      	mov	r2, r5
   b6eaa:	4631      	mov	r1, r6
   b6eac:	4418      	add	r0, r3
   b6eae:	f004 f95f 	bl	bb170 <memcpy>
	offset += dataLen;
   b6eb2:	68e2      	ldr	r2, [r4, #12]
   b6eb4:	442a      	add	r2, r5
   b6eb6:	60e2      	str	r2, [r4, #12]
	return true;
   b6eb8:	2001      	movs	r0, #1
}
   b6eba:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b6ebc:	4620      	mov	r0, r4
   b6ebe:	f7ff ffd1 	bl	b6e64 <_ZN10JsonBuffer8allocateEj>
   b6ec2:	2800      	cmp	r0, #0
   b6ec4:	d1ee      	bne.n	b6ea4 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b6ec6:	e7f8      	b.n	b6eba <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b6ec8 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b6ec8:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b6eca:	2100      	movs	r1, #0
   b6ecc:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b6ece:	b123      	cbz	r3, b6eda <_ZN10JsonBuffer5clearEv+0x12>
   b6ed0:	6882      	ldr	r2, [r0, #8]
   b6ed2:	b112      	cbz	r2, b6eda <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b6ed4:	4618      	mov	r0, r3
   b6ed6:	f004 b973 	b.w	bb1c0 <memset>
}
   b6eda:	4770      	bx	lr

000b6edc <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b6edc:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b6ede:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b6ee2:	2200      	movs	r2, #0
   b6ee4:	60c2      	str	r2, [r0, #12]
   b6ee6:	2201      	movs	r2, #1
   b6ee8:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b6eea:	6143      	str	r3, [r0, #20]
   b6eec:	4a02      	ldr	r2, [pc, #8]	; (b6ef8 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b6eee:	9b02      	ldr	r3, [sp, #8]
   b6ef0:	6002      	str	r2, [r0, #0]
   b6ef2:	61c3      	str	r3, [r0, #28]
}
   b6ef4:	bd10      	pop	{r4, pc}
   b6ef6:	bf00      	nop
   b6ef8:	000bd704 	.word	0x000bd704

000b6efc <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   b6efc:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   b6f00:	429a      	cmp	r2, r3
   b6f02:	4b04      	ldr	r3, [pc, #16]	; (b6f14 <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b6f04:	bf38      	it	cc
   b6f06:	6082      	strcc	r2, [r0, #8]
   b6f08:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6f0c:	bf24      	itt	cs
   b6f0e:	2300      	movcs	r3, #0
   b6f10:	6083      	strcs	r3, [r0, #8]
}
   b6f12:	4770      	bx	lr
   b6f14:	000bd714 	.word	0x000bd714

000b6f18 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b6f18:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b6f1a:	6813      	ldr	r3, [r2, #0]
   b6f1c:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b6f1e:	6813      	ldr	r3, [r2, #0]
   b6f20:	f103 0410 	add.w	r4, r3, #16
   b6f24:	6014      	str	r4, [r2, #0]
   b6f26:	6986      	ldr	r6, [r0, #24]
   b6f28:	42b4      	cmp	r4, r6
   b6f2a:	d20a      	bcs.n	b6f42 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b6f2c:	699b      	ldr	r3, [r3, #24]
   b6f2e:	688c      	ldr	r4, [r1, #8]
   b6f30:	42a3      	cmp	r3, r4
   b6f32:	da01      	bge.n	b6f38 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b6f34:	42ab      	cmp	r3, r5
   b6f36:	ddf2      	ble.n	b6f1e <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b6f38:	42a3      	cmp	r3, r4
   b6f3a:	bfcc      	ite	gt
   b6f3c:	2000      	movgt	r0, #0
   b6f3e:	2001      	movle	r0, #1
   b6f40:	e000      	b.n	b6f44 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b6f42:	2000      	movs	r0, #0
}
   b6f44:	bd70      	pop	{r4, r5, r6, pc}

000b6f46 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b6f46:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6f4a:	9d08      	ldr	r5, [sp, #32]
   b6f4c:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6f4e:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b6f52:	4604      	mov	r4, r0
   b6f54:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6f56:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b6f58:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b6f5a:	9801      	ldr	r0, [sp, #4]
   b6f5c:	69a3      	ldr	r3, [r4, #24]
   b6f5e:	4283      	cmp	r3, r0
   b6f60:	d91a      	bls.n	b6f98 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b6f62:	6882      	ldr	r2, [r0, #8]
   b6f64:	688b      	ldr	r3, [r1, #8]
   b6f66:	429a      	cmp	r2, r3
   b6f68:	da16      	bge.n	b6f98 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b6f6a:	42ae      	cmp	r6, r5
   b6f6c:	d10b      	bne.n	b6f86 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b6f6e:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b6f70:	aa01      	add	r2, sp, #4
   b6f72:	4620      	mov	r0, r4
   b6f74:	f7ff ffd0 	bl	b6f18 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b6f78:	b128      	cbz	r0, b6f86 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b6f7a:	9b01      	ldr	r3, [sp, #4]
   b6f7c:	f8c8 3000 	str.w	r3, [r8]
}
   b6f80:	b002      	add	sp, #8
   b6f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b6f86:	aa01      	add	r2, sp, #4
   b6f88:	4620      	mov	r0, r4
   b6f8a:	f7ff ffc5 	bl	b6f18 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b6f8e:	4620      	mov	r0, r4
		index++;
   b6f90:	3601      	adds	r6, #1
		skipObject(container, token);
   b6f92:	f7ff ffc1 	bl	b6f18 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b6f96:	e7e0      	b.n	b6f5a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b6f98:	2000      	movs	r0, #0
   b6f9a:	e7f1      	b.n	b6f80 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b6f9c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6f9e:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6fa0:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6fa4:	4604      	mov	r4, r0
   b6fa6:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6fa8:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b6faa:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b6fac:	9b01      	ldr	r3, [sp, #4]
   b6fae:	69a2      	ldr	r2, [r4, #24]
   b6fb0:	429a      	cmp	r2, r3
   b6fb2:	d90f      	bls.n	b6fd4 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b6fb4:	6898      	ldr	r0, [r3, #8]
   b6fb6:	688a      	ldr	r2, [r1, #8]
   b6fb8:	4290      	cmp	r0, r2
   b6fba:	da0b      	bge.n	b6fd4 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b6fbc:	42b5      	cmp	r5, r6
   b6fbe:	d103      	bne.n	b6fc8 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b6fc0:	603b      	str	r3, [r7, #0]
			return true;
   b6fc2:	2001      	movs	r0, #1
}
   b6fc4:	b003      	add	sp, #12
   b6fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b6fc8:	aa01      	add	r2, sp, #4
   b6fca:	4620      	mov	r0, r4
		index++;
   b6fcc:	3501      	adds	r5, #1
		skipObject(container, token);
   b6fce:	f7ff ffa3 	bl	b6f18 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b6fd2:	e7eb      	b.n	b6fac <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b6fd4:	2000      	movs	r0, #0
   b6fd6:	e7f5      	b.n	b6fc4 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b6fd8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b6fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b6fda:	3b01      	subs	r3, #1
   b6fdc:	2400      	movs	r4, #0
   b6fde:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b6fe2:	1bf6      	subs	r6, r6, r7
   b6fe4:	42a6      	cmp	r6, r4
   b6fe6:	dd08      	ble.n	b6ffa <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b6fe8:	42a3      	cmp	r3, r4
   b6fea:	dd06      	ble.n	b6ffa <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b6fec:	6845      	ldr	r5, [r0, #4]
   b6fee:	443d      	add	r5, r7
   b6ff0:	5d2d      	ldrb	r5, [r5, r4]
   b6ff2:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b6ff6:	3401      	adds	r4, #1
   b6ff8:	e7f1      	b.n	b6fde <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b6ffa:	2300      	movs	r3, #0
   b6ffc:	7013      	strb	r3, [r2, #0]
}
   b6ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7000 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b7000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7002:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b7004:	2310      	movs	r3, #16
   b7006:	466a      	mov	r2, sp
   b7008:	f7ff ffe6 	bl	b6fd8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b700c:	4904      	ldr	r1, [pc, #16]	; (b7020 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b700e:	4622      	mov	r2, r4
   b7010:	4668      	mov	r0, sp
   b7012:	f000 fe0b 	bl	b7c2c <sscanf>
}
   b7016:	1e43      	subs	r3, r0, #1
   b7018:	4258      	negs	r0, r3
   b701a:	4158      	adcs	r0, r3
   b701c:	b004      	add	sp, #16
   b701e:	bd10      	pop	{r4, pc}
   b7020:	000bd9c8 	.word	0x000bd9c8

000b7024 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
   b7024:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7026:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b7028:	2310      	movs	r3, #16
   b702a:	466a      	mov	r2, sp
   b702c:	f7ff ffd4 	bl	b6fd8 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
   b7030:	4668      	mov	r0, sp
   b7032:	2100      	movs	r1, #0
   b7034:	f004 ff6e 	bl	bbf14 <strtof>
}
   b7038:	2001      	movs	r0, #1
	result = strtof(tmp, 0);
   b703a:	ed84 0a00 	vstr	s0, [r4]
}
   b703e:	b004      	add	sp, #16
   b7040:	bd10      	pop	{r4, pc}
	...

000b7044 <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   b7044:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7046:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b7048:	6889      	ldr	r1, [r1, #8]
   b704a:	4e0a      	ldr	r6, [pc, #40]	; (b7074 <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   b704c:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b704e:	b161      	cbz	r1, b706a <_ZNK13JsonReference5indexEj+0x26>
   b7050:	6868      	ldr	r0, [r5, #4]
   b7052:	ab01      	add	r3, sp, #4
   b7054:	f7ff ffa2 	bl	b6f9c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b7058:	b138      	cbz	r0, b706a <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   b705a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b705c:	e9c4 6300 	strd	r6, r3, [r4]
   b7060:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7062:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   b7064:	4620      	mov	r0, r4
   b7066:	b002      	add	sp, #8
   b7068:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b706a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b706c:	e9c4 6300 	strd	r6, r3, [r4]
   b7070:	2300      	movs	r3, #0
   b7072:	e7f6      	b.n	b7062 <_ZNK13JsonReference5indexEj+0x1e>
   b7074:	000bd714 	.word	0x000bd714

000b7078 <_ZNK13JsonReference8valueIntEi>:
bool JsonReference::valueBool(bool result) const {
	(void) value(result);
	return result;
}

int JsonReference::valueInt(int result) const {
   b7078:	b507      	push	{r0, r1, r2, lr}
   b707a:	9101      	str	r1, [sp, #4]
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   b707c:	6881      	ldr	r1, [r0, #8]
   b707e:	b119      	cbz	r1, b7088 <_ZNK13JsonReference8valueIntEi+0x10>
   b7080:	6840      	ldr	r0, [r0, #4]
   b7082:	aa01      	add	r2, sp, #4
   b7084:	f7ff ffbc 	bl	b7000 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	(void) value(result);
	return result;
}
   b7088:	9801      	ldr	r0, [sp, #4]
   b708a:	b003      	add	sp, #12
   b708c:	f85d fb04 	ldr.w	pc, [sp], #4

000b7090 <_ZNK13JsonReference10valueFloatEf>:
unsigned long JsonReference::valueUnsignedLong(unsigned long result) const {
	(void) value(result);
	return result;
}

float JsonReference::valueFloat(float result) const {
   b7090:	b507      	push	{r0, r1, r2, lr}
   b7092:	6881      	ldr	r1, [r0, #8]
   b7094:	ed8d 0a01 	vstr	s0, [sp, #4]
   b7098:	b119      	cbz	r1, b70a2 <_ZNK13JsonReference10valueFloatEf+0x12>
   b709a:	6840      	ldr	r0, [r0, #4]
   b709c:	aa01      	add	r2, sp, #4
   b709e:	f7ff ffc1 	bl	b7024 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
	(void) value(result);
	return result;
}
   b70a2:	ed9d 0a01 	vldr	s0, [sp, #4]
   b70a6:	b003      	add	sp, #12
   b70a8:	f85d fb04 	ldr.w	pc, [sp], #4

000b70ac <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b70ac:	b510      	push	{r4, lr}
   b70ae:	4604      	mov	r4, r0
	if (str) {
   b70b0:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b70b2:	460b      	mov	r3, r1
	if (str) {
   b70b4:	b128      	cbz	r0, b70c2 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b70b6:	f002 fa7b 	bl	b95b0 <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b70ba:	68e3      	ldr	r3, [r4, #12]
   b70bc:	3301      	adds	r3, #1
   b70be:	60e3      	str	r3, [r4, #12]
	}
}
   b70c0:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b70c2:	6860      	ldr	r0, [r4, #4]
   b70c4:	2800      	cmp	r0, #0
   b70c6:	d0f8      	beq.n	b70ba <_ZN16JsonParserString6appendEc+0xe>
   b70c8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b70cc:	3a01      	subs	r2, #1
   b70ce:	428a      	cmp	r2, r1
			buf[length] = ch;
   b70d0:	bf88      	it	hi
   b70d2:	5443      	strbhi	r3, [r0, r1]
   b70d4:	e7f1      	b.n	b70ba <_ZN16JsonParserString6appendEc+0xe>

000b70d6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b70d6:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b70d8:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b70da:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b70dc:	4608      	mov	r0, r1
		str.append((char)unicode);
   b70de:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b70e0:	d804      	bhi.n	b70ec <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b70e2:	b003      	add	sp, #12
   b70e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b70e8:	f7ff bfe0 	b.w	b70ac <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b70ec:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b70f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b70f4:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b70f8:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b70fc:	d207      	bcs.n	b710e <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b70fe:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b7102:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b7104:	f7ff ffd2 	bl	b70ac <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b7108:	9801      	ldr	r0, [sp, #4]
   b710a:	4621      	mov	r1, r4
   b710c:	e7e9      	b.n	b70e2 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b710e:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b7110:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b7114:	9001      	str	r0, [sp, #4]
   b7116:	f7ff ffc9 	bl	b70ac <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b711a:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b711e:	9801      	ldr	r0, [sp, #4]
   b7120:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b7124:	e7ee      	b.n	b7104 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b7128 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b7128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b712c:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b712e:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7130:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b7200 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b7134:	4680      	mov	r8, r0
   b7136:	460f      	mov	r7, r1
   b7138:	4615      	mov	r5, r2
			escape = false;
   b713a:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b713c:	68b8      	ldr	r0, [r7, #8]
   b713e:	42b0      	cmp	r0, r6
   b7140:	dd5a      	ble.n	b71f8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b7142:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b7146:	5d99      	ldrb	r1, [r3, r6]
   b7148:	199a      	adds	r2, r3, r6
		if (escape) {
   b714a:	2c00      	cmp	r4, #0
   b714c:	d04b      	beq.n	b71e6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b714e:	2975      	cmp	r1, #117	; 0x75
   b7150:	d805      	bhi.n	b715e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b7152:	296d      	cmp	r1, #109	; 0x6d
   b7154:	d807      	bhi.n	b7166 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b7156:	2962      	cmp	r1, #98	; 0x62
   b7158:	d01e      	beq.n	b7198 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b715a:	2966      	cmp	r1, #102	; 0x66
   b715c:	d01e      	beq.n	b719c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b715e:	4628      	mov	r0, r5
   b7160:	f7ff ffa4 	bl	b70ac <_ZN16JsonParserString6appendEc>
				break;
   b7164:	e03d      	b.n	b71e2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b7166:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b716a:	2c07      	cmp	r4, #7
   b716c:	d8f7      	bhi.n	b715e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b716e:	f20f 0c08 	addw	ip, pc, #8
   b7172:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b7176:	bf00      	nop
   b7178:	000b71a1 	.word	0x000b71a1
   b717c:	000b715f 	.word	0x000b715f
   b7180:	000b715f 	.word	0x000b715f
   b7184:	000b715f 	.word	0x000b715f
   b7188:	000b71a5 	.word	0x000b71a5
   b718c:	000b715f 	.word	0x000b715f
   b7190:	000b71a9 	.word	0x000b71a9
   b7194:	000b71ad 	.word	0x000b71ad
				str.append('\b');
   b7198:	2108      	movs	r1, #8
   b719a:	e7e0      	b.n	b715e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b719c:	210c      	movs	r1, #12
   b719e:	e7de      	b.n	b715e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b71a0:	210a      	movs	r1, #10
   b71a2:	e7dc      	b.n	b715e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b71a4:	210d      	movs	r1, #13
   b71a6:	e7da      	b.n	b715e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b71a8:	2109      	movs	r1, #9
   b71aa:	e7d8      	b.n	b715e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b71ac:	1d31      	adds	r1, r6, #4
   b71ae:	4288      	cmp	r0, r1
   b71b0:	dd17      	ble.n	b71e2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b71b2:	a902      	add	r1, sp, #8
   b71b4:	3304      	adds	r3, #4
   b71b6:	4433      	add	r3, r6
   b71b8:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b71ba:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b71be:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b71c2:	429a      	cmp	r2, r3
   b71c4:	d1f9      	bne.n	b71ba <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b71c6:	aa01      	add	r2, sp, #4
   b71c8:	4651      	mov	r1, sl
					tmp[4] = 0;
   b71ca:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b71ce:	f000 fd2d 	bl	b7c2c <sscanf>
   b71d2:	2801      	cmp	r0, #1
   b71d4:	d105      	bne.n	b71e2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b71d6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b71da:	4629      	mov	r1, r5
   b71dc:	f7ff ff7b 	bl	b70d6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b71e0:	3605      	adds	r6, #5
			escape = false;
   b71e2:	2400      	movs	r4, #0
   b71e4:	e004      	b.n	b71f0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b71e6:	295c      	cmp	r1, #92	; 0x5c
   b71e8:	d004      	beq.n	b71f4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b71ea:	4628      	mov	r0, r5
   b71ec:	f7ff ff5e 	bl	b70ac <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b71f0:	3601      	adds	r6, #1
   b71f2:	e7a3      	b.n	b713c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b71f4:	2401      	movs	r4, #1
   b71f6:	e7fb      	b.n	b71f0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b71f8:	2001      	movs	r0, #1
   b71fa:	b004      	add	sp, #16
   b71fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7200:	000bd6e7 	.word	0x000bd6e7

000b7204 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b7204:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7206:	460c      	mov	r4, r1
   b7208:	4606      	mov	r6, r0
	result = "";
   b720a:	490c      	ldr	r1, [pc, #48]	; (b723c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b720c:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b720e:	4615      	mov	r5, r2
	result = "";
   b7210:	f002 f98e 	bl	b9530 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b7214:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b7218:	1ac9      	subs	r1, r1, r3
   b721a:	3101      	adds	r1, #1
   b721c:	4628      	mov	r0, r5
   b721e:	f002 f937 	bl	b9490 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b7222:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b7224:	466a      	mov	r2, sp
   b7226:	4621      	mov	r1, r4
   b7228:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b722a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b722e:	9500      	str	r5, [sp, #0]
   b7230:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b7232:	f7ff ff79 	bl	b7128 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b7236:	b004      	add	sp, #16
   b7238:	bd70      	pop	{r4, r5, r6, pc}
   b723a:	bf00      	nop
   b723c:	000bd6e6 	.word	0x000bd6e6

000b7240 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7244:	b089      	sub	sp, #36	; 0x24
   b7246:	4605      	mov	r5, r0
   b7248:	4688      	mov	r8, r1
	String keyName;
   b724a:	a804      	add	r0, sp, #16
   b724c:	4912      	ldr	r1, [pc, #72]	; (b7298 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b724e:	4616      	mov	r6, r2
   b7250:	4699      	mov	r9, r3
	String keyName;
   b7252:	f002 f94a 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b7256:	2700      	movs	r7, #0
   b7258:	9700      	str	r7, [sp, #0]
   b725a:	464b      	mov	r3, r9
   b725c:	aa03      	add	r2, sp, #12
   b725e:	4641      	mov	r1, r8
   b7260:	4628      	mov	r0, r5
   b7262:	f7ff fe70 	bl	b6f46 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b7266:	4604      	mov	r4, r0
   b7268:	b170      	cbz	r0, b7288 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b726a:	9903      	ldr	r1, [sp, #12]
   b726c:	aa04      	add	r2, sp, #16
   b726e:	4628      	mov	r0, r5
   b7270:	f7ff ffc8 	bl	b7204 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b7274:	4604      	mov	r4, r0
   b7276:	b908      	cbnz	r0, b727c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b7278:	3701      	adds	r7, #1
   b727a:	e7ed      	b.n	b7258 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b727c:	4631      	mov	r1, r6
   b727e:	a804      	add	r0, sp, #16
   b7280:	f002 f9d1 	bl	b9626 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b7284:	2800      	cmp	r0, #0
   b7286:	d0f7      	beq.n	b7278 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b7288:	a804      	add	r0, sp, #16
   b728a:	f002 f8e3 	bl	b9454 <_ZN6StringD1Ev>
}
   b728e:	4620      	mov	r0, r4
   b7290:	b009      	add	sp, #36	; 0x24
   b7292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7296:	bf00      	nop
   b7298:	000bd6e6 	.word	0x000bd6e6

000b729c <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   b729c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b729e:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b72a0:	6889      	ldr	r1, [r1, #8]
   b72a2:	4e0a      	ldr	r6, [pc, #40]	; (b72cc <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   b72a4:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b72a6:	b161      	cbz	r1, b72c2 <_ZNK13JsonReference3keyEPKc+0x26>
   b72a8:	6868      	ldr	r0, [r5, #4]
   b72aa:	ab01      	add	r3, sp, #4
   b72ac:	f7ff ffc8 	bl	b7240 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b72b0:	b138      	cbz	r0, b72c2 <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   b72b2:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b72b4:	e9c4 6300 	strd	r6, r3, [r4]
   b72b8:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b72ba:	60a3      	str	r3, [r4, #8]
}
   b72bc:	4620      	mov	r0, r4
   b72be:	b002      	add	sp, #8
   b72c0:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b72c2:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b72c4:	e9c4 6300 	strd	r6, r3, [r4]
   b72c8:	2300      	movs	r3, #0
   b72ca:	e7f6      	b.n	b72ba <_ZNK13JsonReference3keyEPKc+0x1e>
   b72cc:	000bd714 	.word	0x000bd714

000b72d0 <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   b72d0:	b538      	push	{r3, r4, r5, lr}
   b72d2:	460d      	mov	r5, r1
	String result;
   b72d4:	4905      	ldr	r1, [pc, #20]	; (b72ec <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   b72d6:	4604      	mov	r4, r0
	String result;
   b72d8:	f002 f907 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
   b72dc:	68a9      	ldr	r1, [r5, #8]
   b72de:	b119      	cbz	r1, b72e8 <_ZNK13JsonReference11valueStringEv+0x18>
   b72e0:	6868      	ldr	r0, [r5, #4]
   b72e2:	4622      	mov	r2, r4
   b72e4:	f7ff ff8e 	bl	b7204 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   b72e8:	4620      	mov	r0, r4
   b72ea:	bd38      	pop	{r3, r4, r5, pc}
   b72ec:	000bd6e6 	.word	0x000bd6e6

000b72f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b72f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b72f4:	6844      	ldr	r4, [r0, #4]
   b72f6:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b72fa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b72fe:	f8d0 e000 	ldr.w	lr, [r0]
   b7302:	4596      	cmp	lr, r2
   b7304:	f080 81b9 	bcs.w	b767a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b7308:	f811 800e 	ldrb.w	r8, [r1, lr]
   b730c:	f1b8 0f00 	cmp.w	r8, #0
   b7310:	f000 81b3 	beq.w	b767a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b7314:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b7318:	f000 8098 	beq.w	b744c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b731c:	d833      	bhi.n	b7386 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b731e:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b7322:	f000 80a6 	beq.w	b7472 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b7326:	d810      	bhi.n	b734a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b7328:	f1a8 0809 	sub.w	r8, r8, #9
   b732c:	fa5f f888 	uxtb.w	r8, r8
   b7330:	f1b8 0f17 	cmp.w	r8, #23
   b7334:	d80d      	bhi.n	b7352 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b7336:	4d9f      	ldr	r5, [pc, #636]	; (b75b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b7338:	fa0c f808 	lsl.w	r8, ip, r8
   b733c:	ea18 0f05 	tst.w	r8, r5
   b7340:	d007      	beq.n	b7352 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7342:	6805      	ldr	r5, [r0, #0]
   b7344:	3501      	adds	r5, #1
   b7346:	6005      	str	r5, [r0, #0]
   b7348:	e7d9      	b.n	b72fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b734a:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b734e:	f000 8133 	beq.w	b75b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7352:	f8d0 8000 	ldr.w	r8, [r0]
   b7356:	4542      	cmp	r2, r8
   b7358:	d90e      	bls.n	b7378 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b735a:	f811 5008 	ldrb.w	r5, [r1, r8]
   b735e:	b15d      	cbz	r5, b7378 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b7360:	2d3a      	cmp	r5, #58	; 0x3a
   b7362:	f200 8169 	bhi.w	b7638 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b7366:	2d1f      	cmp	r5, #31
   b7368:	f200 8151 	bhi.w	b760e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b736c:	2d0a      	cmp	r5, #10
   b736e:	f200 8160 	bhi.w	b7632 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b7372:	2d08      	cmp	r5, #8
   b7374:	f240 8156 	bls.w	b7624 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b7378:	2b00      	cmp	r3, #0
   b737a:	f040 8162 	bne.w	b7642 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b737e:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b7382:	6005      	str	r5, [r0, #0]
   b7384:	e0a5      	b.n	b74d2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b7386:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b738a:	d037      	beq.n	b73fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b738c:	d82e      	bhi.n	b73ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b738e:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b7392:	d033      	beq.n	b73fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b7394:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b7398:	d1db      	bne.n	b7352 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b739a:	2b00      	cmp	r3, #0
   b739c:	d0d1      	beq.n	b7342 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b739e:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b73a2:	6845      	ldr	r5, [r0, #4]
   b73a4:	3d01      	subs	r5, #1
   b73a6:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b73aa:	2d00      	cmp	r5, #0
   b73ac:	db55      	blt.n	b745a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b73ae:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b73b2:	3701      	adds	r7, #1
   b73b4:	d04d      	beq.n	b7452 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b73b6:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b73ba:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b73be:	d148      	bne.n	b7452 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b73c0:	f898 b000 	ldrb.w	fp, [r8]
   b73c4:	45cb      	cmp	fp, r9
   b73c6:	d14b      	bne.n	b7460 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b73c8:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b73cc:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b73d0:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b73d4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b73d8:	f8de 7004 	ldr.w	r7, [lr, #4]
   b73dc:	3701      	adds	r7, #1
   b73de:	d042      	beq.n	b7466 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b73e0:	f8de 7008 	ldr.w	r7, [lr, #8]
   b73e4:	3701      	adds	r7, #1
   b73e6:	d13e      	bne.n	b7466 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b73e8:	6085      	str	r5, [r0, #8]
				break;
   b73ea:	e7aa      	b.n	b7342 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b73ec:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b73f0:	d1af      	bne.n	b7352 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b73f2:	2b00      	cmp	r3, #0
   b73f4:	d0a5      	beq.n	b7342 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b73f6:	f04f 0901 	mov.w	r9, #1
   b73fa:	e7d2      	b.n	b73a2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b73fc:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b73fe:	2b00      	cmp	r3, #0
   b7400:	d09f      	beq.n	b7342 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b7402:	6845      	ldr	r5, [r0, #4]
   b7404:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b7406:	42af      	cmp	r7, r5
   b7408:	d94a      	bls.n	b74a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b740a:	f105 0e01 	add.w	lr, r5, #1
   b740e:	f8c0 e004 	str.w	lr, [r0, #4]
   b7412:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b7416:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b741a:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b741e:	2500      	movs	r5, #0
   b7420:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b7424:	6885      	ldr	r5, [r0, #8]
   b7426:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b7428:	bf1f      	itttt	ne
   b742a:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b742e:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b7432:	3501      	addne	r5, #1
   b7434:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b7438:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b743c:	bf0c      	ite	eq
   b743e:	2501      	moveq	r5, #1
   b7440:	2502      	movne	r5, #2
   b7442:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b7446:	6805      	ldr	r5, [r0, #0]
   b7448:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b744c:	6845      	ldr	r5, [r0, #4]
   b744e:	3d01      	subs	r5, #1
   b7450:	e7ca      	b.n	b73e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b7452:	3d01      	subs	r5, #1
   b7454:	f1a8 0810 	sub.w	r8, r8, #16
   b7458:	e7a7      	b.n	b73aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b745a:	3501      	adds	r5, #1
   b745c:	f47f af71 	bne.w	b7342 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b7460:	f06f 0401 	mvn.w	r4, #1
   b7464:	e01e      	b.n	b74a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b7466:	3d01      	subs	r5, #1
   b7468:	1c6f      	adds	r7, r5, #1
   b746a:	f1ae 0e10 	sub.w	lr, lr, #16
   b746e:	d1b3      	bne.n	b73d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b7470:	e767      	b.n	b7342 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b7472:	f10e 0901 	add.w	r9, lr, #1
   b7476:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b747a:	f8d0 8000 	ldr.w	r8, [r0]
   b747e:	4542      	cmp	r2, r8
   b7480:	f240 8093 	bls.w	b75aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b7484:	f811 5008 	ldrb.w	r5, [r1, r8]
   b7488:	2d00      	cmp	r5, #0
   b748a:	f000 808e 	beq.w	b75aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b748e:	2d22      	cmp	r5, #34	; 0x22
   b7490:	d130      	bne.n	b74f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b7492:	b1f3      	cbz	r3, b74d2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b7494:	6845      	ldr	r5, [r0, #4]
   b7496:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b7498:	42af      	cmp	r7, r5
   b749a:	d806      	bhi.n	b74aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b749c:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b74a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b74a4:	4620      	mov	r0, r4
   b74a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b74aa:	f105 0e01 	add.w	lr, r5, #1
   b74ae:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b74b2:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b74b6:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b74ba:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b74be:	2700      	movs	r7, #0
   b74c0:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b74c2:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b74c6:	f04f 0a03 	mov.w	sl, #3
   b74ca:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b74ce:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b74d2:	6885      	ldr	r5, [r0, #8]
   b74d4:	1c6f      	adds	r7, r5, #1
				count++;
   b74d6:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b74da:	f43f af32 	beq.w	b7342 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b74de:	2b00      	cmp	r3, #0
   b74e0:	f43f af2f 	beq.w	b7342 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b74e4:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b74e8:	f8de 500c 	ldr.w	r5, [lr, #12]
   b74ec:	3501      	adds	r5, #1
   b74ee:	f8ce 500c 	str.w	r5, [lr, #12]
   b74f2:	e726      	b.n	b7342 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b74f4:	2d5c      	cmp	r5, #92	; 0x5c
   b74f6:	d111      	bne.n	b751c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b74f8:	f108 0501 	add.w	r5, r8, #1
   b74fc:	42aa      	cmp	r2, r5
   b74fe:	d90d      	bls.n	b751c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b7500:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b7502:	5d4d      	ldrb	r5, [r1, r5]
   b7504:	2d75      	cmp	r5, #117	; 0x75
   b7506:	d82b      	bhi.n	b7560 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b7508:	2d6d      	cmp	r5, #109	; 0x6d
   b750a:	d80b      	bhi.n	b7524 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b750c:	2d66      	cmp	r5, #102	; 0x66
   b750e:	d827      	bhi.n	b7560 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b7510:	2d5b      	cmp	r5, #91	; 0x5b
   b7512:	d81d      	bhi.n	b7550 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b7514:	2d22      	cmp	r5, #34	; 0x22
   b7516:	d001      	beq.n	b751c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b7518:	2d2f      	cmp	r5, #47	; 0x2f
   b751a:	d121      	bne.n	b7560 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b751c:	6805      	ldr	r5, [r0, #0]
   b751e:	3501      	adds	r5, #1
   b7520:	6005      	str	r5, [r0, #0]
   b7522:	e7aa      	b.n	b747a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b7524:	3d6e      	subs	r5, #110	; 0x6e
   b7526:	2d07      	cmp	r5, #7
   b7528:	d81a      	bhi.n	b7560 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b752a:	a701      	add	r7, pc, #4	; (adr r7, b7530 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b752c:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b7530:	000b751d 	.word	0x000b751d
   b7534:	000b7561 	.word	0x000b7561
   b7538:	000b7561 	.word	0x000b7561
   b753c:	000b7561 	.word	0x000b7561
   b7540:	000b751d 	.word	0x000b751d
   b7544:	000b7561 	.word	0x000b7561
   b7548:	000b751d 	.word	0x000b751d
   b754c:	000b7567 	.word	0x000b7567
   b7550:	3d5c      	subs	r5, #92	; 0x5c
   b7552:	b2ed      	uxtb	r5, r5
   b7554:	fa0c f505 	lsl.w	r5, ip, r5
   b7558:	f240 4741 	movw	r7, #1089	; 0x441
   b755c:	423d      	tst	r5, r7
   b755e:	d1dd      	bne.n	b751c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b7560:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b7564:	e77c      	b.n	b7460 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b7566:	f108 0502 	add.w	r5, r8, #2
   b756a:	6005      	str	r5, [r0, #0]
   b756c:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b7570:	f8d0 8000 	ldr.w	r8, [r0]
   b7574:	4542      	cmp	r2, r8
   b7576:	d803      	bhi.n	b7580 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b7578:	6805      	ldr	r5, [r0, #0]
   b757a:	3d01      	subs	r5, #1
   b757c:	6005      	str	r5, [r0, #0]
					break;
   b757e:	e7cd      	b.n	b751c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b7580:	f811 5008 	ldrb.w	r5, [r1, r8]
   b7584:	2d00      	cmp	r5, #0
   b7586:	d0f7      	beq.n	b7578 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b7588:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b758c:	f1bb 0f09 	cmp.w	fp, #9
   b7590:	d904      	bls.n	b759c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b7592:	f025 0520 	bic.w	r5, r5, #32
   b7596:	3d41      	subs	r5, #65	; 0x41
   b7598:	2d05      	cmp	r5, #5
   b759a:	d8e1      	bhi.n	b7560 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b759c:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b75a0:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b75a4:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b75a6:	d1e3      	bne.n	b7570 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b75a8:	e7e6      	b.n	b7578 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b75aa:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b75ae:	f06f 0402 	mvn.w	r4, #2
   b75b2:	e777      	b.n	b74a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b75b4:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b75b8:	2b00      	cmp	r3, #0
   b75ba:	f43f aec2 	beq.w	b7342 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b75be:	6885      	ldr	r5, [r0, #8]
   b75c0:	1c6f      	adds	r7, r5, #1
   b75c2:	f43f aebe 	beq.w	b7342 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b75c6:	012d      	lsls	r5, r5, #4
   b75c8:	5d5d      	ldrb	r5, [r3, r5]
   b75ca:	3d01      	subs	r5, #1
   b75cc:	2d01      	cmp	r5, #1
   b75ce:	f67f aeb8 	bls.w	b7342 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b75d2:	6845      	ldr	r5, [r0, #4]
   b75d4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b75d8:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b75dc:	f1b8 0f00 	cmp.w	r8, #0
   b75e0:	f6ff aeaf 	blt.w	b7342 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b75e4:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b75e8:	3d01      	subs	r5, #1
   b75ea:	2d01      	cmp	r5, #1
   b75ec:	d80a      	bhi.n	b7604 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b75ee:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b75f2:	3501      	adds	r5, #1
   b75f4:	d006      	beq.n	b7604 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b75f6:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b75fa:	3501      	adds	r5, #1
   b75fc:	d102      	bne.n	b7604 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b75fe:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b7602:	e69e      	b.n	b7342 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b7604:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7608:	f1ae 0e10 	sub.w	lr, lr, #16
   b760c:	e7e6      	b.n	b75dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b760e:	f1a5 0920 	sub.w	r9, r5, #32
   b7612:	4f24      	ldr	r7, [pc, #144]	; (b76a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b7614:	fa5f f989 	uxtb.w	r9, r9
   b7618:	fa0c f909 	lsl.w	r9, ip, r9
   b761c:	ea19 0f07 	tst.w	r9, r7
   b7620:	f47f aeaa 	bne.w	b7378 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b7624:	3d20      	subs	r5, #32
   b7626:	2d5e      	cmp	r5, #94	; 0x5e
   b7628:	d89a      	bhi.n	b7560 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b762a:	f108 0501 	add.w	r5, r8, #1
   b762e:	6005      	str	r5, [r0, #0]
   b7630:	e68f      	b.n	b7352 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b7632:	2d0d      	cmp	r5, #13
   b7634:	d1f6      	bne.n	b7624 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b7636:	e69f      	b.n	b7378 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b7638:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b763c:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b7640:	e7f8      	b.n	b7634 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b7642:	6845      	ldr	r5, [r0, #4]
   b7644:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b7646:	42af      	cmp	r7, r5
   b7648:	f67f af28 	bls.w	b749c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b764c:	f105 0801 	add.w	r8, r5, #1
   b7650:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b7654:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b7658:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b765c:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b7660:	2700      	movs	r7, #0
   b7662:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b7664:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b7668:	f04f 0a04 	mov.w	sl, #4
   b766c:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b7670:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b7674:	6805      	ldr	r5, [r0, #0]
   b7676:	3d01      	subs	r5, #1
   b7678:	e683      	b.n	b7382 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b767a:	2b00      	cmp	r3, #0
   b767c:	f43f af12 	beq.w	b74a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b7680:	6842      	ldr	r2, [r0, #4]
   b7682:	1e51      	subs	r1, r2, #1
   b7684:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b7688:	2900      	cmp	r1, #0
   b768a:	f6ff af0b 	blt.w	b74a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b768e:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b7692:	3201      	adds	r2, #1
   b7694:	d003      	beq.n	b769e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b7696:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b769a:	3201      	adds	r2, #1
   b769c:	d087      	beq.n	b75ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b769e:	3901      	subs	r1, #1
   b76a0:	3b10      	subs	r3, #16
   b76a2:	e7f1      	b.n	b7688 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b76a4:	04001001 	.word	0x04001001

000b76a8 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b76a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b76aa:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b76ac:	4604      	mov	r4, r0
	if (offset == 0) {
   b76ae:	b912      	cbnz	r2, b76b6 <_ZN10JsonParser5parseEv+0xe>
		return false;
   b76b0:	2000      	movs	r0, #0
}
   b76b2:	b003      	add	sp, #12
   b76b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b76b6:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b76b8:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b76bc:	b1ab      	cbz	r3, b76ea <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b76be:	2100      	movs	r1, #0
	parser->toknext = 0;
   b76c0:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b76c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b76c8:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b76ca:	69c1      	ldr	r1, [r0, #28]
   b76cc:	9100      	str	r1, [sp, #0]
   b76ce:	6841      	ldr	r1, [r0, #4]
   b76d0:	4630      	mov	r0, r6
   b76d2:	f7ff fe0d 	bl	b72f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b76d6:	1c43      	adds	r3, r0, #1
   b76d8:	d128      	bne.n	b772c <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b76da:	7c25      	ldrb	r5, [r4, #16]
   b76dc:	2d00      	cmp	r5, #0
   b76de:	d1e7      	bne.n	b76b0 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b76e0:	6960      	ldr	r0, [r4, #20]
   b76e2:	f000 fa93 	bl	b7c0c <free>
			tokens = 0;
   b76e6:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b76e8:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b76ea:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b76ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b76f0:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b76f4:	68e2      	ldr	r2, [r4, #12]
   b76f6:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b76f8:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b76fa:	9500      	str	r5, [sp, #0]
   b76fc:	462b      	mov	r3, r5
   b76fe:	4630      	mov	r0, r6
   b7700:	f7ff fdf6 	bl	b72f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b7704:	2800      	cmp	r0, #0
   b7706:	dbd3      	blt.n	b76b0 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b7708:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b770a:	d017      	beq.n	b773c <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b770c:	0100      	lsls	r0, r0, #4
   b770e:	f000 fa75 	bl	b7bfc <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7712:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b7714:	6160      	str	r0, [r4, #20]
   b7716:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7718:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b771a:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b771e:	68e2      	ldr	r2, [r4, #12]
   b7720:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b7722:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7724:	4630      	mov	r0, r6
   b7726:	f7ff fde3 	bl	b72f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b772a:	e001      	b.n	b7730 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b772c:	2800      	cmp	r0, #0
   b772e:	dbbf      	blt.n	b76b0 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b7730:	6963      	ldr	r3, [r4, #20]
   b7732:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b7736:	61a0      	str	r0, [r4, #24]
	return true;
   b7738:	2001      	movs	r0, #1
   b773a:	e7ba      	b.n	b76b2 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b773c:	6963      	ldr	r3, [r4, #20]
   b773e:	61a3      	str	r3, [r4, #24]
   b7740:	e7fa      	b.n	b7738 <_ZN10JsonParser5parseEv+0x90>
	...

000b7744 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b7744:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b7746:	f000 f87d 	bl	b7844 <HAL_Pin_Map>
   b774a:	4b01      	ldr	r3, [pc, #4]	; (b7750 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b774c:	6018      	str	r0, [r3, #0]
}
   b774e:	bd08      	pop	{r3, pc}
   b7750:	2003e6b4 	.word	0x2003e6b4

000b7754 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b7754:	b508      	push	{r3, lr}
   b7756:	4b02      	ldr	r3, [pc, #8]	; (b7760 <hal_ble_stack_init+0xc>)
   b7758:	681b      	ldr	r3, [r3, #0]
   b775a:	689b      	ldr	r3, [r3, #8]
   b775c:	9301      	str	r3, [sp, #4]
   b775e:	bd08      	pop	{r3, pc}
   b7760:	00030278 	.word	0x00030278

000b7764 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b7764:	b508      	push	{r3, lr}
   b7766:	4b02      	ldr	r3, [pc, #8]	; (b7770 <hal_ble_gap_set_advertising_data+0xc>)
   b7768:	681b      	ldr	r3, [r3, #0]
   b776a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b776c:	9301      	str	r3, [sp, #4]
   b776e:	bd08      	pop	{r3, pc}
   b7770:	00030278 	.word	0x00030278

000b7774 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b7774:	b508      	push	{r3, lr}
   b7776:	4b02      	ldr	r3, [pc, #8]	; (b7780 <hal_ble_gap_set_scan_response_data+0xc>)
   b7778:	681b      	ldr	r3, [r3, #0]
   b777a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b777c:	9301      	str	r3, [sp, #4]
   b777e:	bd08      	pop	{r3, pc}
   b7780:	00030278 	.word	0x00030278

000b7784 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b7784:	b508      	push	{r3, lr}
   b7786:	4b02      	ldr	r3, [pc, #8]	; (b7790 <hal_ble_gap_start_advertising+0xc>)
   b7788:	681b      	ldr	r3, [r3, #0]
   b778a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b778c:	9301      	str	r3, [sp, #4]
   b778e:	bd08      	pop	{r3, pc}
   b7790:	00030278 	.word	0x00030278

000b7794 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b7794:	b508      	push	{r3, lr}
   b7796:	4b03      	ldr	r3, [pc, #12]	; (b77a4 <hal_ble_gap_disconnect+0x10>)
   b7798:	681b      	ldr	r3, [r3, #0]
   b779a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b779e:	9301      	str	r3, [sp, #4]
   b77a0:	bd08      	pop	{r3, pc}
   b77a2:	0000      	.short	0x0000
   b77a4:	00030278 	.word	0x00030278

000b77a8 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b77a8:	b508      	push	{r3, lr}
   b77aa:	4b03      	ldr	r3, [pc, #12]	; (b77b8 <hal_ble_gatt_server_add_service+0x10>)
   b77ac:	681b      	ldr	r3, [r3, #0]
   b77ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b77b2:	9301      	str	r3, [sp, #4]
   b77b4:	bd08      	pop	{r3, pc}
   b77b6:	0000      	.short	0x0000
   b77b8:	00030278 	.word	0x00030278

000b77bc <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b77bc:	b508      	push	{r3, lr}
   b77be:	4b03      	ldr	r3, [pc, #12]	; (b77cc <hal_ble_gatt_server_add_characteristic+0x10>)
   b77c0:	681b      	ldr	r3, [r3, #0]
   b77c2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b77c6:	9301      	str	r3, [sp, #4]
   b77c8:	bd08      	pop	{r3, pc}
   b77ca:	0000      	.short	0x0000
   b77cc:	00030278 	.word	0x00030278

000b77d0 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b77d0:	b508      	push	{r3, lr}
   b77d2:	4b03      	ldr	r3, [pc, #12]	; (b77e0 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b77d4:	681b      	ldr	r3, [r3, #0]
   b77d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b77da:	9301      	str	r3, [sp, #4]
   b77dc:	bd08      	pop	{r3, pc}
   b77de:	0000      	.short	0x0000
   b77e0:	00030278 	.word	0x00030278

000b77e4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b77e4:	b508      	push	{r3, lr}
   b77e6:	4b02      	ldr	r3, [pc, #8]	; (b77f0 <os_mutex_recursive_create+0xc>)
   b77e8:	681b      	ldr	r3, [r3, #0]
   b77ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b77ec:	9301      	str	r3, [sp, #4]
   b77ee:	bd08      	pop	{r3, pc}
   b77f0:	00030248 	.word	0x00030248

000b77f4 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b77f4:	b508      	push	{r3, lr}
   b77f6:	4b02      	ldr	r3, [pc, #8]	; (b7800 <os_mutex_recursive_lock+0xc>)
   b77f8:	681b      	ldr	r3, [r3, #0]
   b77fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b77fc:	9301      	str	r3, [sp, #4]
   b77fe:	bd08      	pop	{r3, pc}
   b7800:	00030248 	.word	0x00030248

000b7804 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b7804:	b508      	push	{r3, lr}
   b7806:	4b02      	ldr	r3, [pc, #8]	; (b7810 <os_mutex_recursive_unlock+0xc>)
   b7808:	681b      	ldr	r3, [r3, #0]
   b780a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b780c:	9301      	str	r3, [sp, #4]
   b780e:	bd08      	pop	{r3, pc}
   b7810:	00030248 	.word	0x00030248

000b7814 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7814:	b508      	push	{r3, lr}
   b7816:	4b02      	ldr	r3, [pc, #8]	; (b7820 <HAL_RNG_GetRandomNumber+0xc>)
   b7818:	681b      	ldr	r3, [r3, #0]
   b781a:	685b      	ldr	r3, [r3, #4]
   b781c:	9301      	str	r3, [sp, #4]
   b781e:	bd08      	pop	{r3, pc}
   b7820:	00030218 	.word	0x00030218

000b7824 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7824:	b508      	push	{r3, lr}
   b7826:	4b02      	ldr	r3, [pc, #8]	; (b7830 <HAL_Delay_Microseconds+0xc>)
   b7828:	681b      	ldr	r3, [r3, #0]
   b782a:	68db      	ldr	r3, [r3, #12]
   b782c:	9301      	str	r3, [sp, #4]
   b782e:	bd08      	pop	{r3, pc}
   b7830:	00030218 	.word	0x00030218

000b7834 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7834:	b508      	push	{r3, lr}
   b7836:	4b02      	ldr	r3, [pc, #8]	; (b7840 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7838:	681b      	ldr	r3, [r3, #0]
   b783a:	695b      	ldr	r3, [r3, #20]
   b783c:	9301      	str	r3, [sp, #4]
   b783e:	bd08      	pop	{r3, pc}
   b7840:	00030218 	.word	0x00030218

000b7844 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b7844:	b508      	push	{r3, lr}
   b7846:	4b02      	ldr	r3, [pc, #8]	; (b7850 <HAL_Pin_Map+0xc>)
   b7848:	681b      	ldr	r3, [r3, #0]
   b784a:	681b      	ldr	r3, [r3, #0]
   b784c:	9301      	str	r3, [sp, #4]
   b784e:	bd08      	pop	{r3, pc}
   b7850:	0003022c 	.word	0x0003022c

000b7854 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7854:	b508      	push	{r3, lr}
   b7856:	4b02      	ldr	r3, [pc, #8]	; (b7860 <hal_i2c_begin+0xc>)
   b7858:	681b      	ldr	r3, [r3, #0]
   b785a:	68db      	ldr	r3, [r3, #12]
   b785c:	9301      	str	r3, [sp, #4]
   b785e:	bd08      	pop	{r3, pc}
   b7860:	00030228 	.word	0x00030228

000b7864 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b7864:	b508      	push	{r3, lr}
   b7866:	4b02      	ldr	r3, [pc, #8]	; (b7870 <hal_i2c_begin_transmission+0xc>)
   b7868:	681b      	ldr	r3, [r3, #0]
   b786a:	699b      	ldr	r3, [r3, #24]
   b786c:	9301      	str	r3, [sp, #4]
   b786e:	bd08      	pop	{r3, pc}
   b7870:	00030228 	.word	0x00030228

000b7874 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b7874:	b508      	push	{r3, lr}
   b7876:	4b02      	ldr	r3, [pc, #8]	; (b7880 <hal_i2c_end_transmission+0xc>)
   b7878:	681b      	ldr	r3, [r3, #0]
   b787a:	69db      	ldr	r3, [r3, #28]
   b787c:	9301      	str	r3, [sp, #4]
   b787e:	bd08      	pop	{r3, pc}
   b7880:	00030228 	.word	0x00030228

000b7884 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7884:	b508      	push	{r3, lr}
   b7886:	4b02      	ldr	r3, [pc, #8]	; (b7890 <hal_i2c_write+0xc>)
   b7888:	681b      	ldr	r3, [r3, #0]
   b788a:	6a1b      	ldr	r3, [r3, #32]
   b788c:	9301      	str	r3, [sp, #4]
   b788e:	bd08      	pop	{r3, pc}
   b7890:	00030228 	.word	0x00030228

000b7894 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7894:	b508      	push	{r3, lr}
   b7896:	4b02      	ldr	r3, [pc, #8]	; (b78a0 <hal_i2c_available+0xc>)
   b7898:	681b      	ldr	r3, [r3, #0]
   b789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b789c:	9301      	str	r3, [sp, #4]
   b789e:	bd08      	pop	{r3, pc}
   b78a0:	00030228 	.word	0x00030228

000b78a4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b78a4:	b508      	push	{r3, lr}
   b78a6:	4b02      	ldr	r3, [pc, #8]	; (b78b0 <hal_i2c_read+0xc>)
   b78a8:	681b      	ldr	r3, [r3, #0]
   b78aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b78ac:	9301      	str	r3, [sp, #4]
   b78ae:	bd08      	pop	{r3, pc}
   b78b0:	00030228 	.word	0x00030228

000b78b4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b78b4:	b508      	push	{r3, lr}
   b78b6:	4b02      	ldr	r3, [pc, #8]	; (b78c0 <hal_i2c_peek+0xc>)
   b78b8:	681b      	ldr	r3, [r3, #0]
   b78ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b78bc:	9301      	str	r3, [sp, #4]
   b78be:	bd08      	pop	{r3, pc}
   b78c0:	00030228 	.word	0x00030228

000b78c4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b78c4:	b508      	push	{r3, lr}
   b78c6:	4b02      	ldr	r3, [pc, #8]	; (b78d0 <hal_i2c_flush+0xc>)
   b78c8:	681b      	ldr	r3, [r3, #0]
   b78ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b78cc:	9301      	str	r3, [sp, #4]
   b78ce:	bd08      	pop	{r3, pc}
   b78d0:	00030228 	.word	0x00030228

000b78d4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b78d4:	b508      	push	{r3, lr}
   b78d6:	4b02      	ldr	r3, [pc, #8]	; (b78e0 <hal_i2c_init+0xc>)
   b78d8:	681b      	ldr	r3, [r3, #0]
   b78da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b78dc:	9301      	str	r3, [sp, #4]
   b78de:	bd08      	pop	{r3, pc}
   b78e0:	00030228 	.word	0x00030228

000b78e4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b78e4:	b508      	push	{r3, lr}
   b78e6:	4b02      	ldr	r3, [pc, #8]	; (b78f0 <hal_i2c_request_ex+0xc>)
   b78e8:	681b      	ldr	r3, [r3, #0]
   b78ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b78ec:	9301      	str	r3, [sp, #4]
   b78ee:	bd08      	pop	{r3, pc}
   b78f0:	00030228 	.word	0x00030228

000b78f4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b78f4:	b508      	push	{r3, lr}
   b78f6:	4b02      	ldr	r3, [pc, #8]	; (b7900 <if_index_to_name+0xc>)
   b78f8:	681b      	ldr	r3, [r3, #0]
   b78fa:	695b      	ldr	r3, [r3, #20]
   b78fc:	9301      	str	r3, [sp, #4]
   b78fe:	bd08      	pop	{r3, pc}
   b7900:	0003026c 	.word	0x0003026c

000b7904 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7904:	b508      	push	{r3, lr}
   b7906:	4b02      	ldr	r3, [pc, #8]	; (b7910 <inet_inet_ntop+0xc>)
   b7908:	681b      	ldr	r3, [r3, #0]
   b790a:	695b      	ldr	r3, [r3, #20]
   b790c:	9301      	str	r3, [sp, #4]
   b790e:	bd08      	pop	{r3, pc}
   b7910:	00030264 	.word	0x00030264

000b7914 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b7914:	b508      	push	{r3, lr}
   b7916:	4b02      	ldr	r3, [pc, #8]	; (b7920 <inet_htonl+0xc>)
   b7918:	681b      	ldr	r3, [r3, #0]
   b791a:	6a1b      	ldr	r3, [r3, #32]
   b791c:	9301      	str	r3, [sp, #4]
   b791e:	bd08      	pop	{r3, pc}
   b7920:	00030264 	.word	0x00030264

000b7924 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b7924:	b508      	push	{r3, lr}
   b7926:	4b02      	ldr	r3, [pc, #8]	; (b7930 <inet_htons+0xc>)
   b7928:	681b      	ldr	r3, [r3, #0]
   b792a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b792c:	9301      	str	r3, [sp, #4]
   b792e:	bd08      	pop	{r3, pc}
   b7930:	00030264 	.word	0x00030264

000b7934 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7934:	b508      	push	{r3, lr}
   b7936:	4b02      	ldr	r3, [pc, #8]	; (b7940 <netdb_freeaddrinfo+0xc>)
   b7938:	681b      	ldr	r3, [r3, #0]
   b793a:	689b      	ldr	r3, [r3, #8]
   b793c:	9301      	str	r3, [sp, #4]
   b793e:	bd08      	pop	{r3, pc}
   b7940:	00030268 	.word	0x00030268

000b7944 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7944:	b508      	push	{r3, lr}
   b7946:	4b02      	ldr	r3, [pc, #8]	; (b7950 <netdb_getaddrinfo+0xc>)
   b7948:	681b      	ldr	r3, [r3, #0]
   b794a:	68db      	ldr	r3, [r3, #12]
   b794c:	9301      	str	r3, [sp, #4]
   b794e:	bd08      	pop	{r3, pc}
   b7950:	00030268 	.word	0x00030268

000b7954 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b7954:	b508      	push	{r3, lr}
   b7956:	4b02      	ldr	r3, [pc, #8]	; (b7960 <sock_setsockopt+0xc>)
   b7958:	681b      	ldr	r3, [r3, #0]
   b795a:	699b      	ldr	r3, [r3, #24]
   b795c:	9301      	str	r3, [sp, #4]
   b795e:	bd08      	pop	{r3, pc}
   b7960:	00030238 	.word	0x00030238

000b7964 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b7964:	b508      	push	{r3, lr}
   b7966:	4b02      	ldr	r3, [pc, #8]	; (b7970 <sock_close+0xc>)
   b7968:	681b      	ldr	r3, [r3, #0]
   b796a:	69db      	ldr	r3, [r3, #28]
   b796c:	9301      	str	r3, [sp, #4]
   b796e:	bd08      	pop	{r3, pc}
   b7970:	00030238 	.word	0x00030238

000b7974 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b7974:	b508      	push	{r3, lr}
   b7976:	4b02      	ldr	r3, [pc, #8]	; (b7980 <sock_connect+0xc>)
   b7978:	681b      	ldr	r3, [r3, #0]
   b797a:	6a1b      	ldr	r3, [r3, #32]
   b797c:	9301      	str	r3, [sp, #4]
   b797e:	bd08      	pop	{r3, pc}
   b7980:	00030238 	.word	0x00030238

000b7984 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b7984:	b508      	push	{r3, lr}
   b7986:	4b02      	ldr	r3, [pc, #8]	; (b7990 <sock_recv+0xc>)
   b7988:	681b      	ldr	r3, [r3, #0]
   b798a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b798c:	9301      	str	r3, [sp, #4]
   b798e:	bd08      	pop	{r3, pc}
   b7990:	00030238 	.word	0x00030238

000b7994 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b7994:	b508      	push	{r3, lr}
   b7996:	4b02      	ldr	r3, [pc, #8]	; (b79a0 <sock_send+0xc>)
   b7998:	681b      	ldr	r3, [r3, #0]
   b799a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b799c:	9301      	str	r3, [sp, #4]
   b799e:	bd08      	pop	{r3, pc}
   b79a0:	00030238 	.word	0x00030238

000b79a4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b79a4:	b508      	push	{r3, lr}
   b79a6:	4b02      	ldr	r3, [pc, #8]	; (b79b0 <sock_socket+0xc>)
   b79a8:	681b      	ldr	r3, [r3, #0]
   b79aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b79ac:	9301      	str	r3, [sp, #4]
   b79ae:	bd08      	pop	{r3, pc}
   b79b0:	00030238 	.word	0x00030238

000b79b4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b79b4:	b508      	push	{r3, lr}
   b79b6:	4b02      	ldr	r3, [pc, #8]	; (b79c0 <hal_usart_write+0xc>)
   b79b8:	681b      	ldr	r3, [r3, #0]
   b79ba:	68db      	ldr	r3, [r3, #12]
   b79bc:	9301      	str	r3, [sp, #4]
   b79be:	bd08      	pop	{r3, pc}
   b79c0:	0003023c 	.word	0x0003023c

000b79c4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b79c4:	b508      	push	{r3, lr}
   b79c6:	4b02      	ldr	r3, [pc, #8]	; (b79d0 <hal_usart_available+0xc>)
   b79c8:	681b      	ldr	r3, [r3, #0]
   b79ca:	691b      	ldr	r3, [r3, #16]
   b79cc:	9301      	str	r3, [sp, #4]
   b79ce:	bd08      	pop	{r3, pc}
   b79d0:	0003023c 	.word	0x0003023c

000b79d4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b79d4:	b508      	push	{r3, lr}
   b79d6:	4b02      	ldr	r3, [pc, #8]	; (b79e0 <hal_usart_read+0xc>)
   b79d8:	681b      	ldr	r3, [r3, #0]
   b79da:	695b      	ldr	r3, [r3, #20]
   b79dc:	9301      	str	r3, [sp, #4]
   b79de:	bd08      	pop	{r3, pc}
   b79e0:	0003023c 	.word	0x0003023c

000b79e4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b79e4:	b508      	push	{r3, lr}
   b79e6:	4b02      	ldr	r3, [pc, #8]	; (b79f0 <hal_usart_peek+0xc>)
   b79e8:	681b      	ldr	r3, [r3, #0]
   b79ea:	699b      	ldr	r3, [r3, #24]
   b79ec:	9301      	str	r3, [sp, #4]
   b79ee:	bd08      	pop	{r3, pc}
   b79f0:	0003023c 	.word	0x0003023c

000b79f4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b79f4:	b508      	push	{r3, lr}
   b79f6:	4b02      	ldr	r3, [pc, #8]	; (b7a00 <hal_usart_flush+0xc>)
   b79f8:	681b      	ldr	r3, [r3, #0]
   b79fa:	69db      	ldr	r3, [r3, #28]
   b79fc:	9301      	str	r3, [sp, #4]
   b79fe:	bd08      	pop	{r3, pc}
   b7a00:	0003023c 	.word	0x0003023c

000b7a04 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7a04:	b508      	push	{r3, lr}
   b7a06:	4b02      	ldr	r3, [pc, #8]	; (b7a10 <hal_usart_available_data_for_write+0xc>)
   b7a08:	681b      	ldr	r3, [r3, #0]
   b7a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7a0c:	9301      	str	r3, [sp, #4]
   b7a0e:	bd08      	pop	{r3, pc}
   b7a10:	0003023c 	.word	0x0003023c

000b7a14 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7a14:	b508      	push	{r3, lr}
   b7a16:	4b02      	ldr	r3, [pc, #8]	; (b7a20 <hal_usart_init_ex+0xc>)
   b7a18:	681b      	ldr	r3, [r3, #0]
   b7a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7a1c:	9301      	str	r3, [sp, #4]
   b7a1e:	bd08      	pop	{r3, pc}
   b7a20:	0003023c 	.word	0x0003023c

000b7a24 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7a24:	b508      	push	{r3, lr}
   b7a26:	4b02      	ldr	r3, [pc, #8]	; (b7a30 <HAL_USB_USART_Init+0xc>)
   b7a28:	681b      	ldr	r3, [r3, #0]
   b7a2a:	681b      	ldr	r3, [r3, #0]
   b7a2c:	9301      	str	r3, [sp, #4]
   b7a2e:	bd08      	pop	{r3, pc}
   b7a30:	0003024c 	.word	0x0003024c

000b7a34 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7a34:	b508      	push	{r3, lr}
   b7a36:	4b02      	ldr	r3, [pc, #8]	; (b7a40 <HAL_USB_USART_Begin+0xc>)
   b7a38:	681b      	ldr	r3, [r3, #0]
   b7a3a:	685b      	ldr	r3, [r3, #4]
   b7a3c:	9301      	str	r3, [sp, #4]
   b7a3e:	bd08      	pop	{r3, pc}
   b7a40:	0003024c 	.word	0x0003024c

000b7a44 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7a44:	b508      	push	{r3, lr}
   b7a46:	4b02      	ldr	r3, [pc, #8]	; (b7a50 <HAL_USB_USART_Available_Data+0xc>)
   b7a48:	681b      	ldr	r3, [r3, #0]
   b7a4a:	691b      	ldr	r3, [r3, #16]
   b7a4c:	9301      	str	r3, [sp, #4]
   b7a4e:	bd08      	pop	{r3, pc}
   b7a50:	0003024c 	.word	0x0003024c

000b7a54 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7a54:	b508      	push	{r3, lr}
   b7a56:	4b02      	ldr	r3, [pc, #8]	; (b7a60 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7a58:	681b      	ldr	r3, [r3, #0]
   b7a5a:	695b      	ldr	r3, [r3, #20]
   b7a5c:	9301      	str	r3, [sp, #4]
   b7a5e:	bd08      	pop	{r3, pc}
   b7a60:	0003024c 	.word	0x0003024c

000b7a64 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7a64:	b508      	push	{r3, lr}
   b7a66:	4b02      	ldr	r3, [pc, #8]	; (b7a70 <HAL_USB_USART_Receive_Data+0xc>)
   b7a68:	681b      	ldr	r3, [r3, #0]
   b7a6a:	699b      	ldr	r3, [r3, #24]
   b7a6c:	9301      	str	r3, [sp, #4]
   b7a6e:	bd08      	pop	{r3, pc}
   b7a70:	0003024c 	.word	0x0003024c

000b7a74 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7a74:	b508      	push	{r3, lr}
   b7a76:	4b02      	ldr	r3, [pc, #8]	; (b7a80 <HAL_USB_USART_Send_Data+0xc>)
   b7a78:	681b      	ldr	r3, [r3, #0]
   b7a7a:	69db      	ldr	r3, [r3, #28]
   b7a7c:	9301      	str	r3, [sp, #4]
   b7a7e:	bd08      	pop	{r3, pc}
   b7a80:	0003024c 	.word	0x0003024c

000b7a84 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7a84:	b508      	push	{r3, lr}
   b7a86:	4b02      	ldr	r3, [pc, #8]	; (b7a90 <HAL_USB_USART_Flush_Data+0xc>)
   b7a88:	681b      	ldr	r3, [r3, #0]
   b7a8a:	6a1b      	ldr	r3, [r3, #32]
   b7a8c:	9301      	str	r3, [sp, #4]
   b7a8e:	bd08      	pop	{r3, pc}
   b7a90:	0003024c 	.word	0x0003024c

000b7a94 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7a94:	b508      	push	{r3, lr}
   b7a96:	4b02      	ldr	r3, [pc, #8]	; (b7aa0 <panic_+0xc>)
   b7a98:	681b      	ldr	r3, [r3, #0]
   b7a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7a9c:	9301      	str	r3, [sp, #4]
   b7a9e:	bd08      	pop	{r3, pc}
   b7aa0:	00030260 	.word	0x00030260

000b7aa4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7aa4:	b508      	push	{r3, lr}
   b7aa6:	4b02      	ldr	r3, [pc, #8]	; (b7ab0 <log_message+0xc>)
   b7aa8:	681b      	ldr	r3, [r3, #0]
   b7aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7aac:	9301      	str	r3, [sp, #4]
   b7aae:	bd08      	pop	{r3, pc}
   b7ab0:	00030260 	.word	0x00030260

000b7ab4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7ab4:	b508      	push	{r3, lr}
   b7ab6:	4b02      	ldr	r3, [pc, #8]	; (b7ac0 <set_system_mode+0xc>)
   b7ab8:	681b      	ldr	r3, [r3, #0]
   b7aba:	685b      	ldr	r3, [r3, #4]
   b7abc:	9301      	str	r3, [sp, #4]
   b7abe:	bd08      	pop	{r3, pc}
   b7ac0:	00030220 	.word	0x00030220

000b7ac4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7ac4:	b508      	push	{r3, lr}
   b7ac6:	4b02      	ldr	r3, [pc, #8]	; (b7ad0 <system_delay_ms+0xc>)
   b7ac8:	681b      	ldr	r3, [r3, #0]
   b7aca:	695b      	ldr	r3, [r3, #20]
   b7acc:	9301      	str	r3, [sp, #4]
   b7ace:	bd08      	pop	{r3, pc}
   b7ad0:	00030220 	.word	0x00030220

000b7ad4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7ad4:	b508      	push	{r3, lr}
   b7ad6:	4b03      	ldr	r3, [pc, #12]	; (b7ae4 <system_ctrl_set_app_request_handler+0x10>)
   b7ad8:	681b      	ldr	r3, [r3, #0]
   b7ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7ade:	9301      	str	r3, [sp, #4]
   b7ae0:	bd08      	pop	{r3, pc}
   b7ae2:	0000      	.short	0x0000
   b7ae4:	00030220 	.word	0x00030220

000b7ae8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7ae8:	b508      	push	{r3, lr}
   b7aea:	4b03      	ldr	r3, [pc, #12]	; (b7af8 <system_ctrl_set_result+0x10>)
   b7aec:	681b      	ldr	r3, [r3, #0]
   b7aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7af2:	9301      	str	r3, [sp, #4]
   b7af4:	bd08      	pop	{r3, pc}
   b7af6:	0000      	.short	0x0000
   b7af8:	00030220 	.word	0x00030220

000b7afc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7afc:	b508      	push	{r3, lr}
   b7afe:	4b02      	ldr	r3, [pc, #8]	; (b7b08 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7b00:	681b      	ldr	r3, [r3, #0]
   b7b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7b04:	9301      	str	r3, [sp, #4]
   b7b06:	bd08      	pop	{r3, pc}
   b7b08:	00030244 	.word	0x00030244

000b7b0c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7b0c:	b508      	push	{r3, lr}
   b7b0e:	4b02      	ldr	r3, [pc, #8]	; (b7b18 <network_connect+0xc>)
   b7b10:	681b      	ldr	r3, [r3, #0]
   b7b12:	685b      	ldr	r3, [r3, #4]
   b7b14:	9301      	str	r3, [sp, #4]
   b7b16:	bd08      	pop	{r3, pc}
   b7b18:	00030240 	.word	0x00030240

000b7b1c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7b1c:	b508      	push	{r3, lr}
   b7b1e:	4b02      	ldr	r3, [pc, #8]	; (b7b28 <network_connecting+0xc>)
   b7b20:	681b      	ldr	r3, [r3, #0]
   b7b22:	689b      	ldr	r3, [r3, #8]
   b7b24:	9301      	str	r3, [sp, #4]
   b7b26:	bd08      	pop	{r3, pc}
   b7b28:	00030240 	.word	0x00030240

000b7b2c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7b2c:	b508      	push	{r3, lr}
   b7b2e:	4b02      	ldr	r3, [pc, #8]	; (b7b38 <network_disconnect+0xc>)
   b7b30:	681b      	ldr	r3, [r3, #0]
   b7b32:	68db      	ldr	r3, [r3, #12]
   b7b34:	9301      	str	r3, [sp, #4]
   b7b36:	bd08      	pop	{r3, pc}
   b7b38:	00030240 	.word	0x00030240

000b7b3c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7b3c:	b508      	push	{r3, lr}
   b7b3e:	4b02      	ldr	r3, [pc, #8]	; (b7b48 <network_ready+0xc>)
   b7b40:	681b      	ldr	r3, [r3, #0]
   b7b42:	691b      	ldr	r3, [r3, #16]
   b7b44:	9301      	str	r3, [sp, #4]
   b7b46:	bd08      	pop	{r3, pc}
   b7b48:	00030240 	.word	0x00030240

000b7b4c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7b4c:	b508      	push	{r3, lr}
   b7b4e:	4b02      	ldr	r3, [pc, #8]	; (b7b58 <network_on+0xc>)
   b7b50:	681b      	ldr	r3, [r3, #0]
   b7b52:	695b      	ldr	r3, [r3, #20]
   b7b54:	9301      	str	r3, [sp, #4]
   b7b56:	bd08      	pop	{r3, pc}
   b7b58:	00030240 	.word	0x00030240

000b7b5c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7b5c:	b508      	push	{r3, lr}
   b7b5e:	4b02      	ldr	r3, [pc, #8]	; (b7b68 <network_off+0xc>)
   b7b60:	681b      	ldr	r3, [r3, #0]
   b7b62:	699b      	ldr	r3, [r3, #24]
   b7b64:	9301      	str	r3, [sp, #4]
   b7b66:	bd08      	pop	{r3, pc}
   b7b68:	00030240 	.word	0x00030240

000b7b6c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7b6c:	b508      	push	{r3, lr}
   b7b6e:	4b02      	ldr	r3, [pc, #8]	; (b7b78 <network_listen+0xc>)
   b7b70:	681b      	ldr	r3, [r3, #0]
   b7b72:	69db      	ldr	r3, [r3, #28]
   b7b74:	9301      	str	r3, [sp, #4]
   b7b76:	bd08      	pop	{r3, pc}
   b7b78:	00030240 	.word	0x00030240

000b7b7c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7b7c:	b508      	push	{r3, lr}
   b7b7e:	4b02      	ldr	r3, [pc, #8]	; (b7b88 <network_listening+0xc>)
   b7b80:	681b      	ldr	r3, [r3, #0]
   b7b82:	6a1b      	ldr	r3, [r3, #32]
   b7b84:	9301      	str	r3, [sp, #4]
   b7b86:	bd08      	pop	{r3, pc}
   b7b88:	00030240 	.word	0x00030240

000b7b8c <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   b7b8c:	b508      	push	{r3, lr}
   b7b8e:	4b02      	ldr	r3, [pc, #8]	; (b7b98 <network_has_credentials+0xc>)
   b7b90:	681b      	ldr	r3, [r3, #0]
   b7b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7b94:	9301      	str	r3, [sp, #4]
   b7b96:	bd08      	pop	{r3, pc}
   b7b98:	00030240 	.word	0x00030240

000b7b9c <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b7b9c:	b508      	push	{r3, lr}
   b7b9e:	4b02      	ldr	r3, [pc, #8]	; (b7ba8 <network_set_credentials+0xc>)
   b7ba0:	681b      	ldr	r3, [r3, #0]
   b7ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7ba4:	9301      	str	r3, [sp, #4]
   b7ba6:	bd08      	pop	{r3, pc}
   b7ba8:	00030240 	.word	0x00030240

000b7bac <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b7bac:	b508      	push	{r3, lr}
   b7bae:	4b02      	ldr	r3, [pc, #8]	; (b7bb8 <network_clear_credentials+0xc>)
   b7bb0:	681b      	ldr	r3, [r3, #0]
   b7bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7bb4:	9301      	str	r3, [sp, #4]
   b7bb6:	bd08      	pop	{r3, pc}
   b7bb8:	00030240 	.word	0x00030240

000b7bbc <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7bbc:	b508      	push	{r3, lr}
   b7bbe:	4b02      	ldr	r3, [pc, #8]	; (b7bc8 <network_set_listen_timeout+0xc>)
   b7bc0:	681b      	ldr	r3, [r3, #0]
   b7bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7bc4:	9301      	str	r3, [sp, #4]
   b7bc6:	bd08      	pop	{r3, pc}
   b7bc8:	00030240 	.word	0x00030240

000b7bcc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7bcc:	b508      	push	{r3, lr}
   b7bce:	4b02      	ldr	r3, [pc, #8]	; (b7bd8 <network_get_listen_timeout+0xc>)
   b7bd0:	681b      	ldr	r3, [r3, #0]
   b7bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7bd4:	9301      	str	r3, [sp, #4]
   b7bd6:	bd08      	pop	{r3, pc}
   b7bd8:	00030240 	.word	0x00030240

000b7bdc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7bdc:	b508      	push	{r3, lr}
   b7bde:	4b02      	ldr	r3, [pc, #8]	; (b7be8 <network_is_on+0xc>)
   b7be0:	681b      	ldr	r3, [r3, #0]
   b7be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7be4:	9301      	str	r3, [sp, #4]
   b7be6:	bd08      	pop	{r3, pc}
   b7be8:	00030240 	.word	0x00030240

000b7bec <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7bec:	b508      	push	{r3, lr}
   b7bee:	4b02      	ldr	r3, [pc, #8]	; (b7bf8 <network_is_off+0xc>)
   b7bf0:	681b      	ldr	r3, [r3, #0]
   b7bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7bf4:	9301      	str	r3, [sp, #4]
   b7bf6:	bd08      	pop	{r3, pc}
   b7bf8:	00030240 	.word	0x00030240

000b7bfc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7bfc:	b508      	push	{r3, lr}
   b7bfe:	4b02      	ldr	r3, [pc, #8]	; (b7c08 <malloc+0xc>)
   b7c00:	681b      	ldr	r3, [r3, #0]
   b7c02:	681b      	ldr	r3, [r3, #0]
   b7c04:	9301      	str	r3, [sp, #4]
   b7c06:	bd08      	pop	{r3, pc}
   b7c08:	0003021c 	.word	0x0003021c

000b7c0c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7c0c:	b508      	push	{r3, lr}
   b7c0e:	4b02      	ldr	r3, [pc, #8]	; (b7c18 <free+0xc>)
   b7c10:	681b      	ldr	r3, [r3, #0]
   b7c12:	685b      	ldr	r3, [r3, #4]
   b7c14:	9301      	str	r3, [sp, #4]
   b7c16:	bd08      	pop	{r3, pc}
   b7c18:	0003021c 	.word	0x0003021c

000b7c1c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7c1c:	b508      	push	{r3, lr}
   b7c1e:	4b02      	ldr	r3, [pc, #8]	; (b7c28 <realloc+0xc>)
   b7c20:	681b      	ldr	r3, [r3, #0]
   b7c22:	689b      	ldr	r3, [r3, #8]
   b7c24:	9301      	str	r3, [sp, #4]
   b7c26:	bd08      	pop	{r3, pc}
   b7c28:	0003021c 	.word	0x0003021c

000b7c2c <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b7c2c:	b508      	push	{r3, lr}
   b7c2e:	4b02      	ldr	r3, [pc, #8]	; (b7c38 <sscanf+0xc>)
   b7c30:	681b      	ldr	r3, [r3, #0]
   b7c32:	695b      	ldr	r3, [r3, #20]
   b7c34:	9301      	str	r3, [sp, #4]
   b7c36:	bd08      	pop	{r3, pc}
   b7c38:	0003021c 	.word	0x0003021c

000b7c3c <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7c3c:	b508      	push	{r3, lr}
   b7c3e:	4b02      	ldr	r3, [pc, #8]	; (b7c48 <vsnprintf+0xc>)
   b7c40:	681b      	ldr	r3, [r3, #0]
   b7c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7c44:	9301      	str	r3, [sp, #4]
   b7c46:	bd08      	pop	{r3, pc}
   b7c48:	0003021c 	.word	0x0003021c

000b7c4c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7c4c:	b508      	push	{r3, lr}
   b7c4e:	4b02      	ldr	r3, [pc, #8]	; (b7c58 <abort+0xc>)
   b7c50:	681b      	ldr	r3, [r3, #0]
   b7c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7c54:	9301      	str	r3, [sp, #4]
   b7c56:	bd08      	pop	{r3, pc}
   b7c58:	0003021c 	.word	0x0003021c

000b7c5c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7c5c:	b508      	push	{r3, lr}
   b7c5e:	4b02      	ldr	r3, [pc, #8]	; (b7c68 <_malloc_r+0xc>)
   b7c60:	681b      	ldr	r3, [r3, #0]
   b7c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7c64:	9301      	str	r3, [sp, #4]
   b7c66:	bd08      	pop	{r3, pc}
   b7c68:	0003021c 	.word	0x0003021c

000b7c6c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7c6c:	b508      	push	{r3, lr}
   b7c6e:	4b02      	ldr	r3, [pc, #8]	; (b7c78 <__errno+0xc>)
   b7c70:	681b      	ldr	r3, [r3, #0]
   b7c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7c74:	9301      	str	r3, [sp, #4]
   b7c76:	bd08      	pop	{r3, pc}
   b7c78:	0003021c 	.word	0x0003021c

000b7c7c <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7c7c:	b508      	push	{r3, lr}
   b7c7e:	4b02      	ldr	r3, [pc, #8]	; (b7c88 <__assert_func+0xc>)
   b7c80:	681b      	ldr	r3, [r3, #0]
   b7c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7c84:	9301      	str	r3, [sp, #4]
   b7c86:	bd08      	pop	{r3, pc}
   b7c88:	0003021c 	.word	0x0003021c

000b7c8c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7c8c:	b508      	push	{r3, lr}
   b7c8e:	4b02      	ldr	r3, [pc, #8]	; (b7c98 <newlib_impure_ptr_callback+0xc>)
   b7c90:	681b      	ldr	r3, [r3, #0]
   b7c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7c94:	9301      	str	r3, [sp, #4]
   b7c96:	bd08      	pop	{r3, pc}
   b7c98:	0003021c 	.word	0x0003021c

000b7c9c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7c9c:	2100      	movs	r1, #0
   b7c9e:	f7ff bf11 	b.w	b7ac4 <system_delay_ms>

000b7ca2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7ca2:	4770      	bx	lr

000b7ca4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b7ca4:	4770      	bx	lr

000b7ca6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b7ca6:	4770      	bx	lr

000b7ca8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7ca8:	4770      	bx	lr
	...

000b7cac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7cac:	4b06      	ldr	r3, [pc, #24]	; (b7cc8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7cae:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7cb0:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7cb2:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7cb6:	d005      	beq.n	b7cc4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7cb8:	4608      	mov	r0, r1
   b7cba:	f002 fa7d 	bl	ba1b8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7cbe:	2800      	cmp	r0, #0
   b7cc0:	bf08      	it	eq
   b7cc2:	2400      	moveq	r4, #0
      }
   b7cc4:	4620      	mov	r0, r4
   b7cc6:	bd10      	pop	{r4, pc}
   b7cc8:	000bd8bc 	.word	0x000bd8bc

000b7ccc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7ccc:	4b06      	ldr	r3, [pc, #24]	; (b7ce8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7cce:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7cd0:	b510      	push	{r4, lr}
   b7cd2:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7cd6:	d005      	beq.n	b7ce4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7cd8:	4608      	mov	r0, r1
   b7cda:	f002 fa6d 	bl	ba1b8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7cde:	2800      	cmp	r0, #0
   b7ce0:	bf08      	it	eq
   b7ce2:	2400      	moveq	r4, #0
      }
   b7ce4:	4620      	mov	r0, r4
   b7ce6:	bd10      	pop	{r4, pc}
   b7ce8:	000bd8bc 	.word	0x000bd8bc

000b7cec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7cec:	4b06      	ldr	r3, [pc, #24]	; (b7d08 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7cee:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7cf0:	b510      	push	{r4, lr}
   b7cf2:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7cf6:	d005      	beq.n	b7d04 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7cf8:	4608      	mov	r0, r1
   b7cfa:	f002 fa5d 	bl	ba1b8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7cfe:	2800      	cmp	r0, #0
   b7d00:	bf08      	it	eq
   b7d02:	2400      	moveq	r4, #0
      }
   b7d04:	4620      	mov	r0, r4
   b7d06:	bd10      	pop	{r4, pc}
   b7d08:	000bd8bc 	.word	0x000bd8bc

000b7d0c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7d0c:	b510      	push	{r4, lr}
   b7d0e:	2168      	movs	r1, #104	; 0x68
   b7d10:	4604      	mov	r4, r0
   b7d12:	f7fc f9c6 	bl	b40a2 <_ZdlPvj>
   b7d16:	4620      	mov	r0, r4
   b7d18:	bd10      	pop	{r4, pc}

000b7d1a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7d1a:	b510      	push	{r4, lr}
   b7d1c:	2128      	movs	r1, #40	; 0x28
   b7d1e:	4604      	mov	r4, r0
   b7d20:	f7fc f9bf 	bl	b40a2 <_ZdlPvj>
   b7d24:	4620      	mov	r0, r4
   b7d26:	bd10      	pop	{r4, pc}

000b7d28 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7d28:	b510      	push	{r4, lr}
   b7d2a:	2130      	movs	r1, #48	; 0x30
   b7d2c:	4604      	mov	r4, r0
   b7d2e:	f7fc f9b8 	bl	b40a2 <_ZdlPvj>
   b7d32:	4620      	mov	r0, r4
   b7d34:	bd10      	pop	{r4, pc}

000b7d36 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7d36:	2168      	movs	r1, #104	; 0x68
   b7d38:	f7fc b9b3 	b.w	b40a2 <_ZdlPvj>

000b7d3c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7d3c:	2128      	movs	r1, #40	; 0x28
   b7d3e:	f7fc b9b0 	b.w	b40a2 <_ZdlPvj>

000b7d42 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7d42:	2130      	movs	r1, #48	; 0x30
   b7d44:	f7fc b9ad 	b.w	b40a2 <_ZdlPvj>

000b7d48 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b7d48:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7d4a:	2500      	movs	r5, #0
   b7d4c:	1cec      	adds	r4, r5, #3
   b7d4e:	428c      	cmp	r4, r1
   b7d50:	d80d      	bhi.n	b7d6e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b7d52:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b7d54:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b7d56:	5d87      	ldrb	r7, [r0, r6]
   b7d58:	4297      	cmp	r7, r2
   b7d5a:	d105      	bne.n	b7d68 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b7d5c:	4426      	add	r6, r4
   b7d5e:	42b1      	cmp	r1, r6
   b7d60:	d305      	bcc.n	b7d6e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b7d62:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b7d64:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b7d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b7d68:	3401      	adds	r4, #1
   b7d6a:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7d6c:	e7ee      	b.n	b7d4c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b7d6e:	2000      	movs	r0, #0
   b7d70:	e7f9      	b.n	b7d66 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b7d74 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b7d74:	4a02      	ldr	r2, [pc, #8]	; (b7d80 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b7d76:	4903      	ldr	r1, [pc, #12]	; (b7d84 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b7d78:	200a      	movs	r0, #10
   b7d7a:	f7ff be8b 	b.w	b7a94 <panic_>
   b7d7e:	bf00      	nop
   b7d80:	000b7825 	.word	0x000b7825
   b7d84:	000bd71c 	.word	0x000bd71c

000b7d88 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7d88:	b430      	push	{r4, r5}
   b7d8a:	460d      	mov	r5, r1
   b7d8c:	4611      	mov	r1, r2
   b7d8e:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b7d90:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b7d92:	6809      	ldr	r1, [r1, #0]
   b7d94:	6828      	ldr	r0, [r5, #0]
   b7d96:	e9d3 4300 	ldrd	r4, r3, [r3]
   b7d9a:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b7d9c:	bc30      	pop	{r4, r5}
   b7d9e:	4760      	bx	ip

000b7da0 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b7da0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7da2:	b538      	push	{r3, r4, r5, lr}
   b7da4:	4604      	mov	r4, r0
	switch (__op)
   b7da6:	d102      	bne.n	b7dae <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b7da8:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b7daa:	6023      	str	r3, [r4, #0]
	}
   b7dac:	e003      	b.n	b7db6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b7dae:	2a02      	cmp	r2, #2
   b7db0:	d003      	beq.n	b7dba <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b7db2:	2a03      	cmp	r2, #3
   b7db4:	d00d      	beq.n	b7dd2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b7db6:	2000      	movs	r0, #0
   b7db8:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b7dba:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b7dbc:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7dbe:	f7fc f96a 	bl	b4096 <_Znwj>
   b7dc2:	4603      	mov	r3, r0
   b7dc4:	2800      	cmp	r0, #0
   b7dc6:	d0f0      	beq.n	b7daa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b7dc8:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7dcc:	e883 0003 	stmia.w	r3, {r0, r1}
   b7dd0:	e7eb      	b.n	b7daa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b7dd2:	6800      	ldr	r0, [r0, #0]
   b7dd4:	2800      	cmp	r0, #0
   b7dd6:	d0ee      	beq.n	b7db6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b7dd8:	2108      	movs	r1, #8
   b7dda:	f7fc f962 	bl	b40a2 <_ZdlPvj>
   b7dde:	e7ea      	b.n	b7db6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b7de0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b7de0:	b510      	push	{r4, lr}
      if (_M_manager)
   b7de2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b7de4:	4604      	mov	r4, r0
      if (_M_manager)
   b7de6:	b113      	cbz	r3, b7dee <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7de8:	2203      	movs	r2, #3
   b7dea:	4601      	mov	r1, r0
   b7dec:	4798      	blx	r3
    }
   b7dee:	4620      	mov	r0, r4
   b7df0:	bd10      	pop	{r4, pc}

000b7df2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7df2:	b510      	push	{r4, lr}
   b7df4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b7df6:	3058      	adds	r0, #88	; 0x58
   b7df8:	f7ff fff2 	bl	b7de0 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b7dfc:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b7e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7e04:	f001 bb26 	b.w	b9454 <_ZN6StringD1Ev>

000b7e08 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b7e08:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b7e0a:	6843      	ldr	r3, [r0, #4]
   b7e0c:	3b01      	subs	r3, #1
    {
   b7e0e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b7e10:	6043      	str	r3, [r0, #4]
   b7e12:	b963      	cbnz	r3, b7e2e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b7e14:	6803      	ldr	r3, [r0, #0]
   b7e16:	689b      	ldr	r3, [r3, #8]
   b7e18:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7e1a:	68a3      	ldr	r3, [r4, #8]
   b7e1c:	3b01      	subs	r3, #1
   b7e1e:	60a3      	str	r3, [r4, #8]
   b7e20:	b92b      	cbnz	r3, b7e2e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b7e22:	6823      	ldr	r3, [r4, #0]
   b7e24:	4620      	mov	r0, r4
   b7e26:	68db      	ldr	r3, [r3, #12]
    }
   b7e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b7e2c:	4718      	bx	r3
    }
   b7e2e:	bd10      	pop	{r4, pc}

000b7e30 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b7e30:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7e34:	b2da      	uxtb	r2, r3
   b7e36:	2a09      	cmp	r2, #9
   b7e38:	d801      	bhi.n	b7e3e <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b7e3a:	4618      	mov	r0, r3
   b7e3c:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b7e3e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b7e42:	2b05      	cmp	r3, #5
   b7e44:	d801      	bhi.n	b7e4a <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b7e46:	3857      	subs	r0, #87	; 0x57
   b7e48:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b7e4a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b7e4e:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b7e50:	bf94      	ite	ls
   b7e52:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b7e54:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b7e58:	4770      	bx	lr
	...

000b7e5c <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b7e5c:	b510      	push	{r4, lr}
            locked_(false) {
   b7e5e:	2300      	movs	r3, #0
   b7e60:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b7e62:	4b04      	ldr	r3, [pc, #16]	; (b7e74 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b7e64:	4604      	mov	r4, r0
   b7e66:	6818      	ldr	r0, [r3, #0]
   b7e68:	f7ff fcc4 	bl	b77f4 <os_mutex_recursive_lock>
        locked_ = true;
   b7e6c:	2301      	movs	r3, #1
   b7e6e:	7023      	strb	r3, [r4, #0]
    }
   b7e70:	4620      	mov	r0, r4
   b7e72:	bd10      	pop	{r4, pc}
   b7e74:	2003e6c0 	.word	0x2003e6c0

000b7e78 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b7e78:	b510      	push	{r4, lr}
        if (locked_) {
   b7e7a:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b7e7c:	4604      	mov	r4, r0
        if (locked_) {
   b7e7e:	b11b      	cbz	r3, b7e88 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7e80:	4b02      	ldr	r3, [pc, #8]	; (b7e8c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b7e82:	6818      	ldr	r0, [r3, #0]
   b7e84:	f7ff fcbe 	bl	b7804 <os_mutex_recursive_unlock>
    }
   b7e88:	4620      	mov	r0, r4
   b7e8a:	bd10      	pop	{r4, pc}
   b7e8c:	2003e6c0 	.word	0x2003e6c0

000b7e90 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b7e90:	b082      	sub	sp, #8
   b7e92:	4603      	mov	r3, r0
    address_ = addr;
   b7e94:	6808      	ldr	r0, [r1, #0]
   b7e96:	6849      	ldr	r1, [r1, #4]
   b7e98:	466a      	mov	r2, sp
   b7e9a:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b7e9c:	466a      	mov	r2, sp
   b7e9e:	ca03      	ldmia	r2!, {r0, r1}
   b7ea0:	6018      	str	r0, [r3, #0]
}
   b7ea2:	4618      	mov	r0, r3
    address_ = addr.address_;
   b7ea4:	6059      	str	r1, [r3, #4]
}
   b7ea6:	b002      	add	sp, #8
   b7ea8:	4770      	bx	lr

000b7eaa <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b7eaa:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b7eac:	7982      	ldrb	r2, [r0, #6]
   b7eae:	798b      	ldrb	r3, [r1, #6]
   b7eb0:	429a      	cmp	r2, r3
   b7eb2:	d106      	bne.n	b7ec2 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b7eb4:	2206      	movs	r2, #6
   b7eb6:	f003 f94b 	bl	bb150 <memcmp>
   b7eba:	fab0 f080 	clz	r0, r0
   b7ebe:	0940      	lsrs	r0, r0, #5
}
   b7ec0:	bd08      	pop	{r3, pc}
    return false;
   b7ec2:	2000      	movs	r0, #0
   b7ec4:	e7fc      	b.n	b7ec0 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b7ec6 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b7ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7eca:	6003      	str	r3, [r0, #0]
   b7ecc:	8083      	strh	r3, [r0, #4]
}
   b7ece:	2000      	movs	r0, #0
   b7ed0:	4770      	bx	lr

000b7ed2 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b7ed2:	b508      	push	{r3, lr}
   b7ed4:	4602      	mov	r2, r0
        : address_{} {
   b7ed6:	2100      	movs	r1, #0
   b7ed8:	6001      	str	r1, [r0, #0]
   b7eda:	6041      	str	r1, [r0, #4]
    clear();
   b7edc:	f7ff fff3 	bl	b7ec6 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b7ee0:	7191      	strb	r1, [r2, #6]
}
   b7ee2:	4610      	mov	r0, r2
   b7ee4:	bd08      	pop	{r3, pc}
	...

000b7ee8 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b7ee8:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b7eea:	2301      	movs	r3, #1
   b7eec:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7eee:	4b05      	ldr	r3, [pc, #20]	; (b7f04 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b7ef0:	4602      	mov	r2, r0
   b7ef2:	f103 0110 	add.w	r1, r3, #16
   b7ef6:	f853 4b04 	ldr.w	r4, [r3], #4
   b7efa:	f842 4b04 	str.w	r4, [r2], #4
   b7efe:	428b      	cmp	r3, r1
   b7f00:	d1f9      	bne.n	b7ef6 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b7f02:	bd10      	pop	{r4, pc}
   b7f04:	000bd8ca 	.word	0x000bd8ca

000b7f08 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7f08:	b510      	push	{r4, lr}
    if (uuid128) {
   b7f0a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7f0c:	4604      	mov	r4, r0
    if (uuid128) {
   b7f0e:	b1b1      	cbz	r1, b7f3e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b7f10:	2a01      	cmp	r2, #1
   b7f12:	f101 0210 	add.w	r2, r1, #16
   b7f16:	d10a      	bne.n	b7f2e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7f18:	4601      	mov	r1, r0
   b7f1a:	f853 0b04 	ldr.w	r0, [r3], #4
   b7f1e:	f841 0b04 	str.w	r0, [r1], #4
   b7f22:	4293      	cmp	r3, r2
   b7f24:	d1f9      	bne.n	b7f1a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b7f26:	2301      	movs	r3, #1
   b7f28:	6123      	str	r3, [r4, #16]
}
   b7f2a:	4620      	mov	r0, r4
   b7f2c:	bd10      	pop	{r4, pc}
   b7f2e:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b7f30:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b7f34:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b7f38:	429a      	cmp	r2, r3
   b7f3a:	d1f9      	bne.n	b7f30 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b7f3c:	e7f3      	b.n	b7f26 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b7f3e:	2210      	movs	r2, #16
   b7f40:	f003 f93e 	bl	bb1c0 <memset>
   b7f44:	e7f1      	b.n	b7f2a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b7f46 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b7f46:	b538      	push	{r3, r4, r5, lr}
   b7f48:	4604      	mov	r4, r0
   b7f4a:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b7f4c:	461a      	mov	r2, r3
   b7f4e:	f7ff ffdb 	bl	b7f08 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b7f52:	81a5      	strh	r5, [r4, #12]
}
   b7f54:	4620      	mov	r0, r4
   b7f56:	bd38      	pop	{r3, r4, r5, pc}

000b7f58 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b7f58:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b7f5a:	6902      	ldr	r2, [r0, #16]
   b7f5c:	b922      	cbnz	r2, b7f68 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b7f5e:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7f60:	3800      	subs	r0, #0
   b7f62:	bf18      	it	ne
   b7f64:	2001      	movne	r0, #1
}
   b7f66:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7f68:	4902      	ldr	r1, [pc, #8]	; (b7f74 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b7f6a:	2210      	movs	r2, #16
   b7f6c:	f003 f8f0 	bl	bb150 <memcmp>
   b7f70:	e7f6      	b.n	b7f60 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b7f72:	bf00      	nop
   b7f74:	000bd8ea 	.word	0x000bd8ea

000b7f78 <_ZNK8particle7BleUuid4typeEv>:
}
   b7f78:	6900      	ldr	r0, [r0, #16]
   b7f7a:	4770      	bx	lr

000b7f7c <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b7f7c:	b538      	push	{r3, r4, r5, lr}
   b7f7e:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b7f80:	2214      	movs	r2, #20
   b7f82:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b7f84:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b7f86:	f003 f91b 	bl	bb1c0 <memset>
    if (type_ == BleUuidType::SHORT) {
   b7f8a:	6923      	ldr	r3, [r4, #16]
   b7f8c:	b91b      	cbnz	r3, b7f96 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b7f8e:	89a3      	ldrh	r3, [r4, #12]
   b7f90:	802b      	strh	r3, [r5, #0]
}
   b7f92:	4628      	mov	r0, r5
   b7f94:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b7f96:	2301      	movs	r3, #1
   b7f98:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b7f9a:	4621      	mov	r1, r4
   b7f9c:	462b      	mov	r3, r5
   b7f9e:	f104 0210 	add.w	r2, r4, #16
   b7fa2:	f851 0b04 	ldr.w	r0, [r1], #4
   b7fa6:	f843 0b04 	str.w	r0, [r3], #4
   b7faa:	4291      	cmp	r1, r2
   b7fac:	d1f9      	bne.n	b7fa2 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b7fae:	e7f0      	b.n	b7f92 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b7fb0 <_ZNK8particle7BleUuid7shortedEv>:
}
   b7fb0:	8980      	ldrh	r0, [r0, #12]
   b7fb2:	4770      	bx	lr

000b7fb4 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b7fb4:	4770      	bx	lr

000b7fb6 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b7fb6:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7fb8:	6902      	ldr	r2, [r0, #16]
   b7fba:	690b      	ldr	r3, [r1, #16]
   b7fbc:	429a      	cmp	r2, r3
   b7fbe:	d106      	bne.n	b7fce <_ZNK8particle7BleUuideqERKS0_+0x18>
   b7fc0:	2210      	movs	r2, #16
   b7fc2:	f003 f8c5 	bl	bb150 <memcmp>
   b7fc6:	fab0 f080 	clz	r0, r0
   b7fca:	0940      	lsrs	r0, r0, #5
}
   b7fcc:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7fce:	2000      	movs	r0, #0
   b7fd0:	e7fc      	b.n	b7fcc <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b7fd4 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b7fd4:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b7fd6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b7fda:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7fdc:	4b34      	ldr	r3, [pc, #208]	; (b80b0 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b7fde:	460c      	mov	r4, r1
   b7fe0:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7fe2:	4602      	mov	r2, r0
   b7fe4:	f103 0110 	add.w	r1, r3, #16
   b7fe8:	f853 0b04 	ldr.w	r0, [r3], #4
   b7fec:	f842 0b04 	str.w	r0, [r2], #4
   b7ff0:	428b      	cmp	r3, r1
   b7ff2:	d1f9      	bne.n	b7fe8 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b7ff4:	b344      	cbz	r4, b8048 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b7ff6:	2124      	movs	r1, #36	; 0x24
   b7ff8:	4620      	mov	r0, r4
   b7ffa:	f003 f945 	bl	bb288 <strnlen>
   b7ffe:	2804      	cmp	r0, #4
   b8000:	f04f 0500 	mov.w	r5, #0
   b8004:	d123      	bne.n	b804e <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b8006:	f8ad 5004 	strh.w	r5, [sp, #4]
   b800a:	af01      	add	r7, sp, #4
   b800c:	1ca5      	adds	r5, r4, #2
   b800e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b8010:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b8014:	f7ff ff0c 	bl	b7e30 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b8018:	f1b0 0800 	subs.w	r8, r0, #0
   b801c:	db12      	blt.n	b8044 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b801e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b8022:	f7ff ff05 	bl	b7e30 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b8026:	2800      	cmp	r0, #0
   b8028:	db0c      	blt.n	b8044 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b802a:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b802c:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b8030:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b8032:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b8036:	d1eb      	bne.n	b8010 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b8038:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b803c:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b803e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8042:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b8044:	2300      	movs	r3, #0
   b8046:	6133      	str	r3, [r6, #16]
}
   b8048:	b002      	add	sp, #8
   b804a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b804e:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8052:	2124      	movs	r1, #36	; 0x24
   b8054:	4620      	mov	r0, r4
   b8056:	f003 f917 	bl	bb288 <strnlen>
   b805a:	42a8      	cmp	r0, r5
   b805c:	d807      	bhi.n	b806e <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b805e:	4642      	mov	r2, r8
   b8060:	2100      	movs	r1, #0
   b8062:	4630      	mov	r0, r6
}
   b8064:	b002      	add	sp, #8
   b8066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b806a:	f003 b8a9 	b.w	bb1c0 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b806e:	f1b8 0f00 	cmp.w	r8, #0
   b8072:	d0e9      	beq.n	b8048 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b8074:	5d60      	ldrb	r0, [r4, r5]
   b8076:	f7ff fedb 	bl	b7e30 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b807a:	0603      	lsls	r3, r0, #24
   b807c:	d415      	bmi.n	b80aa <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b807e:	0100      	lsls	r0, r0, #4
   b8080:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8084:	b2c7      	uxtb	r7, r0
   b8086:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b808a:	2124      	movs	r1, #36	; 0x24
   b808c:	4620      	mov	r0, r4
   b808e:	f003 f8fb 	bl	bb288 <strnlen>
   b8092:	3501      	adds	r5, #1
   b8094:	42a8      	cmp	r0, r5
   b8096:	d908      	bls.n	b80aa <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b8098:	5d60      	ldrb	r0, [r4, r5]
   b809a:	f7ff fec9 	bl	b7e30 <_ZN8particle11hexToNibbleEc>
   b809e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b80a0:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b80a2:	bfa4      	itt	ge
   b80a4:	4338      	orrge	r0, r7
   b80a6:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b80aa:	3501      	adds	r5, #1
   b80ac:	e7d1      	b.n	b8052 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b80ae:	bf00      	nop
   b80b0:	000bd8ca 	.word	0x000bd8ca

000b80b4 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b80b4:	b513      	push	{r0, r1, r4, lr}
   b80b6:	4604      	mov	r4, r0
   b80b8:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b80ba:	f7ff ff15 	bl	b7ee8 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b80be:	4620      	mov	r0, r4
   b80c0:	9901      	ldr	r1, [sp, #4]
   b80c2:	f7ff ff87 	bl	b7fd4 <_ZN8particle7BleUuid9constructEPKc>
}
   b80c6:	4620      	mov	r0, r4
   b80c8:	b002      	add	sp, #8
   b80ca:	bd10      	pop	{r4, pc}

000b80cc <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b80cc:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b80ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b80d2:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b80d4:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b80d6:	8043      	strh	r3, [r0, #2]
   b80d8:	220e      	movs	r2, #14
   b80da:	4629      	mov	r1, r5
   b80dc:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b80de:	7105      	strb	r5, [r0, #4]
   b80e0:	3006      	adds	r0, #6
   b80e2:	f003 f86d 	bl	bb1c0 <memset>
   b80e6:	f104 0014 	add.w	r0, r4, #20
   b80ea:	f7ff fefd 	bl	b7ee8 <_ZN8particle7BleUuidC1Ev>
   b80ee:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b80f2:	f7ff fef9 	bl	b7ee8 <_ZN8particle7BleUuidC1Ev>
   b80f6:	4904      	ldr	r1, [pc, #16]	; (b8108 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b80f8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b80fc:	f001 f9f5 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b8100:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b8102:	4620      	mov	r0, r4
   b8104:	bd38      	pop	{r3, r4, r5, pc}
   b8106:	bf00      	nop
   b8108:	000bd6e6 	.word	0x000bd6e6

000b810c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b810c:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b810e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b8112:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b8116:	4293      	cmp	r3, r2
   b8118:	4618      	mov	r0, r3
   b811a:	d006      	beq.n	b812a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b811c:	6804      	ldr	r4, [r0, #0]
   b811e:	8824      	ldrh	r4, [r4, #0]
   b8120:	428c      	cmp	r4, r1
   b8122:	f103 0308 	add.w	r3, r3, #8
   b8126:	d1f6      	bne.n	b8116 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b8128:	bd10      	pop	{r4, pc}
        return nullptr;
   b812a:	2000      	movs	r0, #0
   b812c:	e7fc      	b.n	b8128 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b8130 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b8130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8134:	2600      	movs	r6, #0
   b8136:	6006      	str	r6, [r0, #0]
   b8138:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b813a:	2028      	movs	r0, #40	; 0x28
   b813c:	460c      	mov	r4, r1
   b813e:	f7fb ffaa 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8142:	1e05      	subs	r5, r0, #0
   b8144:	f105 080c 	add.w	r8, r5, #12
   b8148:	d00f      	beq.n	b816a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b814a:	2301      	movs	r3, #1
   b814c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8150:	4b08      	ldr	r3, [pc, #32]	; (b8174 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b8152:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b8154:	4640      	mov	r0, r8
   b8156:	f7ff fec7 	bl	b7ee8 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b815a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b815c:	622e      	str	r6, [r5, #32]
   b815e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b8162:	4646      	mov	r6, r8
   b8164:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b8166:	6823      	ldr	r3, [r4, #0]
   b8168:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b816a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b816e:	4638      	mov	r0, r7
   b8170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8174:	000bd88c 	.word	0x000bd88c

000b8178 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b8178:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b817a:	2500      	movs	r5, #0
   b817c:	6005      	str	r5, [r0, #0]
   b817e:	4606      	mov	r6, r0
   b8180:	2030      	movs	r0, #48	; 0x30
   b8182:	f7fb ff88 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8186:	4604      	mov	r4, r0
   b8188:	b188      	cbz	r0, b81ae <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b818a:	2301      	movs	r3, #1
   b818c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b8190:	4b09      	ldr	r3, [pc, #36]	; (b81b8 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b8192:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b8194:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8198:	8183      	strh	r3, [r0, #12]
   b819a:	300e      	adds	r0, #14
   b819c:	f7ff fe99 	bl	b7ed2 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b81a0:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b81a4:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b81a8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b81ac:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b81ae:	6074      	str	r4, [r6, #4]
   b81b0:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b81b2:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b81b4:	4630      	mov	r0, r6
   b81b6:	bd70      	pop	{r4, r5, r6, pc}
   b81b8:	000bd8a8 	.word	0x000bd8a8

000b81bc <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b81bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b81be:	460d      	mov	r5, r1
   b81c0:	4604      	mov	r4, r0
    WiringBleLock lk;
   b81c2:	a801      	add	r0, sp, #4
   b81c4:	f7ff fe4a 	bl	b7e5c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b81c8:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b81ca:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b81ce:	6023      	str	r3, [r4, #0]
   b81d0:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b81d4:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b81d6:	a801      	add	r0, sp, #4
   b81d8:	f7ff fe4e 	bl	b7e78 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b81dc:	4620      	mov	r0, r4
   b81de:	b003      	add	sp, #12
   b81e0:	bd30      	pop	{r4, r5, pc}

000b81e2 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b81e2:	b530      	push	{r4, r5, lr}
   b81e4:	4605      	mov	r5, r0
   b81e6:	b087      	sub	sp, #28
   b81e8:	460c      	mov	r4, r1
    WiringBleLock lk;
   b81ea:	a801      	add	r0, sp, #4
   b81ec:	f7ff fe36 	bl	b7e5c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b81f0:	682a      	ldr	r2, [r5, #0]
   b81f2:	6823      	ldr	r3, [r4, #0]
   b81f4:	8812      	ldrh	r2, [r2, #0]
   b81f6:	881b      	ldrh	r3, [r3, #0]
   b81f8:	429a      	cmp	r2, r3
   b81fa:	d10d      	bne.n	b8218 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b81fc:	4629      	mov	r1, r5
   b81fe:	a802      	add	r0, sp, #8
   b8200:	f7ff ffdc 	bl	b81bc <_ZNK8particle13BlePeerDevice7addressEv>
   b8204:	4621      	mov	r1, r4
   b8206:	a804      	add	r0, sp, #16
   b8208:	f7ff ffd8 	bl	b81bc <_ZNK8particle13BlePeerDevice7addressEv>
   b820c:	a904      	add	r1, sp, #16
   b820e:	a802      	add	r0, sp, #8
   b8210:	f7ff fe4b 	bl	b7eaa <_ZNK8particle10BleAddresseqERKS0_>
   b8214:	4604      	mov	r4, r0
   b8216:	b900      	cbnz	r0, b821a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b8218:	2400      	movs	r4, #0
    WiringBleLock lk;
   b821a:	a801      	add	r0, sp, #4
   b821c:	f7ff fe2c 	bl	b7e78 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b8220:	4620      	mov	r0, r4
   b8222:	b007      	add	sp, #28
   b8224:	bd30      	pop	{r4, r5, pc}
	...

000b8228 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b8228:	b510      	push	{r4, lr}
   b822a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b822c:	2064      	movs	r0, #100	; 0x64
   b822e:	f7fb ff32 	bl	b4096 <_Znwj>
   b8232:	b168      	cbz	r0, b8250 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b8234:	2300      	movs	r3, #0
   b8236:	e9c0 3300 	strd	r3, r3, [r0]
   b823a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b823e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b8242:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b8246:	6203      	str	r3, [r0, #32]
   b8248:	62c3      	str	r3, [r0, #44]	; 0x2c
   b824a:	63c3      	str	r3, [r0, #60]	; 0x3c
   b824c:	64c3      	str	r3, [r0, #76]	; 0x4c
   b824e:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b8250:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b8252:	b920      	cbnz	r0, b825e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b8254:	4a0a      	ldr	r2, [pc, #40]	; (b8280 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b8256:	490b      	ldr	r1, [pc, #44]	; (b8284 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b8258:	200a      	movs	r0, #10
   b825a:	f7ff fc1b 	bl	b7a94 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b825e:	2000      	movs	r0, #0
   b8260:	f7ff fa78 	bl	b7754 <hal_ble_stack_init>
   b8264:	b120      	cbz	r0, b8270 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b8266:	4a06      	ldr	r2, [pc, #24]	; (b8280 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b8268:	4907      	ldr	r1, [pc, #28]	; (b8288 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b826a:	200a      	movs	r0, #10
   b826c:	f7ff fc12 	bl	b7a94 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b8270:	6821      	ldr	r1, [r4, #0]
   b8272:	4806      	ldr	r0, [pc, #24]	; (b828c <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b8274:	2200      	movs	r2, #0
   b8276:	f7ff faab 	bl	b77d0 <hal_ble_set_callback_on_periph_link_events>
}
   b827a:	4620      	mov	r0, r4
   b827c:	bd10      	pop	{r4, pc}
   b827e:	bf00      	nop
   b8280:	000b7825 	.word	0x000b7825
   b8284:	000bd71c 	.word	0x000bd71c
   b8288:	000bd75a 	.word	0x000bd75a
   b828c:	000b8811 	.word	0x000b8811

000b8290 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b8290:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b8292:	4c0a      	ldr	r4, [pc, #40]	; (b82bc <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b8294:	7823      	ldrb	r3, [r4, #0]
   b8296:	f3bf 8f5b 	dmb	ish
   b829a:	07db      	lsls	r3, r3, #31
   b829c:	d40c      	bmi.n	b82b8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b829e:	4620      	mov	r0, r4
   b82a0:	f7fb ff01 	bl	b40a6 <__cxa_guard_acquire>
   b82a4:	b140      	cbz	r0, b82b8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b82a6:	4806      	ldr	r0, [pc, #24]	; (b82c0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b82a8:	f7ff ffbe 	bl	b8228 <_ZN8particle14BleLocalDeviceC1Ev>
   b82ac:	4620      	mov	r0, r4
   b82ae:	f7fb feff 	bl	b40b0 <__cxa_guard_release>
   b82b2:	4804      	ldr	r0, [pc, #16]	; (b82c4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b82b4:	f002 ff42 	bl	bb13c <atexit>
    return instance;
}
   b82b8:	4801      	ldr	r0, [pc, #4]	; (b82c0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b82ba:	bd10      	pop	{r4, pc}
   b82bc:	2003e6b8 	.word	0x2003e6b8
   b82c0:	2003e6c4 	.word	0x2003e6c4
   b82c4:	000b84dd 	.word	0x000b84dd

000b82c8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b82c8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b82ca:	6803      	ldr	r3, [r0, #0]
   b82cc:	3b09      	subs	r3, #9
   b82ce:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b82d0:	b08d      	sub	sp, #52	; 0x34
   b82d2:	4604      	mov	r4, r0
   b82d4:	460d      	mov	r5, r1
    switch (event->type) {
   b82d6:	d811      	bhi.n	b82fc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b82d8:	f7ff ffda 	bl	b8290 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b82dc:	88a1      	ldrh	r1, [r4, #4]
   b82de:	6800      	ldr	r0, [r0, #0]
   b82e0:	f7ff ff14 	bl	b810c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b82e4:	4603      	mov	r3, r0
   b82e6:	b958      	cbnz	r0, b8300 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b82e8:	2220      	movs	r2, #32
   b82ea:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b82ee:	4a0b      	ldr	r2, [pc, #44]	; (b831c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b82f0:	9200      	str	r2, [sp, #0]
   b82f2:	490b      	ldr	r1, [pc, #44]	; (b8320 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b82f4:	aa04      	add	r2, sp, #16
   b82f6:	2032      	movs	r0, #50	; 0x32
   b82f8:	f7ff fbd4 	bl	b7aa4 <log_message>
}
   b82fc:	b00d      	add	sp, #52	; 0x34
   b82fe:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b8300:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b8302:	2a00      	cmp	r2, #0
   b8304:	d0fa      	beq.n	b82fc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b8306:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b830a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b830e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b8312:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b8314:	aa04      	add	r2, sp, #16
   b8316:	a903      	add	r1, sp, #12
   b8318:	47a0      	blx	r4
}
   b831a:	e7ef      	b.n	b82fc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b831c:	000bd79c 	.word	0x000bd79c
   b8320:	000bd733 	.word	0x000bd733

000b8324 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b8324:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b8326:	2000      	movs	r0, #0
   b8328:	f7ff fa14 	bl	b7754 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b832c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b8330:	bd08      	pop	{r3, pc}

000b8332 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b8332:	b919      	cbnz	r1, b833c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b8334:	460a      	mov	r2, r1
   b8336:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b8338:	f7ff ba14 	b.w	b7764 <hal_ble_gap_set_advertising_data>
   b833c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8340:	2200      	movs	r2, #0
   b8342:	e7f9      	b.n	b8338 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b8344 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8344:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b8346:	1e14      	subs	r4, r2, #0
   b8348:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b834a:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b834c:	db02      	blt.n	b8354 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b834e:	1862      	adds	r2, r4, r1
   b8350:	429a      	cmp	r2, r3
   b8352:	dd00      	ble.n	b8356 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b8354:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b8356:	682a      	ldr	r2, [r5, #0]
   b8358:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b835a:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b835c:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b835e:	1a52      	subs	r2, r2, r1
   b8360:	f002 ff14 	bl	bb18c <memmove>
    size_ -= n;
   b8364:	686a      	ldr	r2, [r5, #4]
   b8366:	1b12      	subs	r2, r2, r4
   b8368:	606a      	str	r2, [r5, #4]
}
   b836a:	bd38      	pop	{r3, r4, r5, pc}

000b836c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b836c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b836e:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b8370:	4604      	mov	r4, r0
   b8372:	460d      	mov	r5, r1
   b8374:	ab01      	add	r3, sp, #4
   b8376:	e9d0 0100 	ldrd	r0, r1, [r0]
   b837a:	f7ff fce5 	bl	b7d48 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b837e:	4602      	mov	r2, r0
   b8380:	b138      	cbz	r0, b8392 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b8382:	9901      	ldr	r1, [sp, #4]
   b8384:	4620      	mov	r0, r4
   b8386:	f7ff ffdd 	bl	b8344 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b838a:	4629      	mov	r1, r5
   b838c:	4620      	mov	r0, r4
   b838e:	f7ff ffed 	bl	b836c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b8392:	b003      	add	sp, #12
   b8394:	bd30      	pop	{r4, r5, pc}

000b8396 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b8396:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b8398:	460c      	mov	r4, r1
   b839a:	b929      	cbnz	r1, b83a8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b839c:	460a      	mov	r2, r1
   b839e:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b83a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b83a4:	f7ff b9e6 	b.w	b7774 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b83a8:	2101      	movs	r1, #1
   b83aa:	4620      	mov	r0, r4
   b83ac:	f7ff ffde 	bl	b836c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b83b0:	e9d4 0100 	ldrd	r0, r1, [r4]
   b83b4:	2200      	movs	r2, #0
   b83b6:	e7f3      	b.n	b83a0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b83b8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b83b8:	b538      	push	{r3, r4, r5, lr}
   b83ba:	4604      	mov	r4, r0
   b83bc:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b83be:	f7ff ffb8 	bl	b8332 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b83c2:	2800      	cmp	r0, #0
   b83c4:	db0a      	blt.n	b83dc <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b83c6:	4629      	mov	r1, r5
   b83c8:	4620      	mov	r0, r4
   b83ca:	f7ff ffe4 	bl	b8396 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b83ce:	2800      	cmp	r0, #0
   b83d0:	db04      	blt.n	b83dc <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b83d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b83d6:	2000      	movs	r0, #0
   b83d8:	f7ff b9d4 	b.w	b7784 <hal_ble_gap_start_advertising>
}
   b83dc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b83e0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b83e0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b83e2:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b83e4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b83e6:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b83e8:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b83ea:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b83ec:	f7fb fe53 	bl	b4096 <_Znwj>
   b83f0:	b118      	cbz	r0, b83fa <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b83f2:	682b      	ldr	r3, [r5, #0]
   b83f4:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b83f6:	686b      	ldr	r3, [r5, #4]
   b83f8:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b83fa:	4b03      	ldr	r3, [pc, #12]	; (b8408 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b83fc:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b83fe:	4b03      	ldr	r3, [pc, #12]	; (b840c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8400:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8402:	60a3      	str	r3, [r4, #8]
      }
   b8404:	4620      	mov	r0, r4
   b8406:	bd38      	pop	{r3, r4, r5, pc}
   b8408:	000b7d89 	.word	0x000b7d89
   b840c:	000b7da1 	.word	0x000b7da1

000b8410 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b8410:	680b      	ldr	r3, [r1, #0]
   b8412:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b8414:	b113      	cbz	r3, b841c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b8416:	685a      	ldr	r2, [r3, #4]
   b8418:	3201      	adds	r2, #1
   b841a:	605a      	str	r2, [r3, #4]
      }
   b841c:	4770      	bx	lr

000b841e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b841e:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8420:	f851 3b04 	ldr.w	r3, [r1], #4
   b8424:	4604      	mov	r4, r0
   b8426:	f840 3b04 	str.w	r3, [r0], #4
   b842a:	f7ff fff1 	bl	b8410 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b842e:	6823      	ldr	r3, [r4, #0]
   b8430:	b90b      	cbnz	r3, b8436 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b8432:	f7ff fc9f 	bl	b7d74 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b8436:	4620      	mov	r0, r4
   b8438:	bd10      	pop	{r4, pc}

000b843a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b843a:	b510      	push	{r4, lr}
   b843c:	f851 3b04 	ldr.w	r3, [r1], #4
   b8440:	4604      	mov	r4, r0
   b8442:	f840 3b04 	str.w	r3, [r0], #4
   b8446:	f7ff ffe3 	bl	b8410 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b844a:	4620      	mov	r0, r4
   b844c:	bd10      	pop	{r4, pc}

000b844e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b844e:	b510      	push	{r4, lr}
   b8450:	f851 3b04 	ldr.w	r3, [r1], #4
   b8454:	4604      	mov	r4, r0
   b8456:	f840 3b04 	str.w	r3, [r0], #4
   b845a:	f7ff ffd9 	bl	b8410 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b845e:	4620      	mov	r0, r4
   b8460:	bd10      	pop	{r4, pc}

000b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b8462:	b510      	push	{r4, lr}
   b8464:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b8466:	6800      	ldr	r0, [r0, #0]
   b8468:	b108      	cbz	r0, b846e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b846a:	f7ff fccd 	bl	b7e08 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b846e:	4620      	mov	r0, r4
   b8470:	bd10      	pop	{r4, pc}

000b8472 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b8472:	b510      	push	{r4, lr}
   b8474:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8476:	3004      	adds	r0, #4
   b8478:	f7ff fff3 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b847c:	4620      	mov	r0, r4
   b847e:	bd10      	pop	{r4, pc}

000b8480 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8480:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8482:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8486:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8488:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b848c:	42ae      	cmp	r6, r5
   b848e:	d004      	beq.n	b849a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b8490:	1d28      	adds	r0, r5, #4
   b8492:	f7ff ffe6 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8496:	3508      	adds	r5, #8
   b8498:	e7f8      	b.n	b848c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b849a:	6820      	ldr	r0, [r4, #0]
   b849c:	f7ff fbb6 	bl	b7c0c <free>
}
   b84a0:	4620      	mov	r0, r4
   b84a2:	bd70      	pop	{r4, r5, r6, pc}

000b84a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b84a4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b84a6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b84aa:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b84ac:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b84b0:	42ae      	cmp	r6, r5
   b84b2:	d004      	beq.n	b84be <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b84b4:	1d28      	adds	r0, r5, #4
   b84b6:	f7ff ffd4 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b84ba:	3508      	adds	r5, #8
   b84bc:	e7f8      	b.n	b84b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b84be:	6820      	ldr	r0, [r4, #0]
   b84c0:	f7ff fba4 	bl	b7c0c <free>
}
   b84c4:	4620      	mov	r0, r4
   b84c6:	bd70      	pop	{r4, r5, r6, pc}

000b84c8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b84c8:	b510      	push	{r4, lr}
   b84ca:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b84cc:	3024      	adds	r0, #36	; 0x24
   b84ce:	f7ff ffe9 	bl	b84a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b84d2:	f104 0018 	add.w	r0, r4, #24
   b84d6:	f7ff ffd3 	bl	b8480 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b84da:	bd10      	pop	{r4, pc}

000b84dc <__tcf_0>:
    static BleLocalDevice instance;
   b84dc:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b84de:	4b17      	ldr	r3, [pc, #92]	; (b853c <__tcf_0+0x60>)
   b84e0:	681c      	ldr	r4, [r3, #0]
   b84e2:	b354      	cbz	r4, b853a <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b84e4:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b84e8:	f7ff fc7a 	bl	b7de0 <_ZNSt14_Function_baseD1Ev>
   b84ec:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b84f0:	f7ff fc76 	bl	b7de0 <_ZNSt14_Function_baseD1Ev>
   b84f4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b84f8:	f7ff fc72 	bl	b7de0 <_ZNSt14_Function_baseD1Ev>
   b84fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8500:	f7ff fc6e 	bl	b7de0 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b8504:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b8508:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b850c:	42ae      	cmp	r6, r5
   b850e:	d004      	beq.n	b851a <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b8510:	1d28      	adds	r0, r5, #4
   b8512:	f7ff ffa6 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8516:	3508      	adds	r5, #8
   b8518:	e7f8      	b.n	b850c <__tcf_0+0x30>
    ::free(ptr);
   b851a:	69a0      	ldr	r0, [r4, #24]
   b851c:	f7ff fb76 	bl	b7c0c <free>
    ~BleLocalDeviceImpl() = default;
   b8520:	f104 000c 	add.w	r0, r4, #12
   b8524:	f7ff ffbe 	bl	b84a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8528:	4620      	mov	r0, r4
   b852a:	f7ff ffa9 	bl	b8480 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b852e:	4620      	mov	r0, r4
   b8530:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b8532:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8536:	f7fb bdb4 	b.w	b40a2 <_ZdlPvj>
   b853a:	bd70      	pop	{r4, r5, r6, pc}
   b853c:	2003e6c4 	.word	0x2003e6c4

000b8540 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b8540:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b8542:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8544:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b8548:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b854c:	6803      	ldr	r3, [r0, #0]
   b854e:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b8550:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8552:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b8554:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b8556:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b8558:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b855a:	f7ff ff82 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b855e:	b002      	add	sp, #8
   b8560:	bd10      	pop	{r4, pc}

000b8562 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b8562:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8564:	b510      	push	{r4, lr}
      if (_M_empty())
   b8566:	b90a      	cbnz	r2, b856c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b8568:	f001 fe23 	bl	ba1b2 <_ZSt25__throw_bad_function_callv>
    }
   b856c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8570:	68c3      	ldr	r3, [r0, #12]
   b8572:	4718      	bx	r3

000b8574 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b8574:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b8576:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b8578:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b857a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b857c:	dd03      	ble.n	b8586 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b857e:	f7ff fb4d 	bl	b7c1c <realloc>
            if (!d) {
   b8582:	b918      	cbnz	r0, b858c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b8584:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b8586:	f7ff fb41 	bl	b7c0c <free>
        T* d = nullptr;
   b858a:	2000      	movs	r0, #0
        data_ = d;
   b858c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b858e:	60a5      	str	r5, [r4, #8]
        return true;
   b8590:	2001      	movs	r0, #1
   b8592:	e7f7      	b.n	b8584 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b8594 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b8594:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b8596:	6883      	ldr	r3, [r0, #8]
   b8598:	428b      	cmp	r3, r1
   b859a:	da02      	bge.n	b85a2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b859c:	f7ff ffea 	bl	b8574 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b85a0:	bd08      	pop	{r3, pc}
    return true;
   b85a2:	2001      	movs	r0, #1
   b85a4:	e7fc      	b.n	b85a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b85a6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b85a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b85aa:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b85ac:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b85ae:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b85b0:	4419      	add	r1, r3
   b85b2:	6883      	ldr	r3, [r0, #8]
   b85b4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b85b6:	4604      	mov	r4, r0
   b85b8:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b85ba:	dc12      	bgt.n	b85e2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b85bc:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b85be:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b85c0:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b85c2:	1bd2      	subs	r2, r2, r7
   b85c4:	4631      	mov	r1, r6
   b85c6:	1970      	adds	r0, r6, r5
   b85c8:	f002 fde0 	bl	bb18c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b85cc:	462a      	mov	r2, r5
   b85ce:	4641      	mov	r1, r8
   b85d0:	4630      	mov	r0, r6
   b85d2:	f002 fdcd 	bl	bb170 <memcpy>
    size_ += n;
   b85d6:	6863      	ldr	r3, [r4, #4]
   b85d8:	442b      	add	r3, r5
   b85da:	6063      	str	r3, [r4, #4]
    return true;
   b85dc:	2001      	movs	r0, #1
}
   b85de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b85e2:	f7ff ffc7 	bl	b8574 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b85e6:	2800      	cmp	r0, #0
   b85e8:	d1e8      	bne.n	b85bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b85ea:	e7f8      	b.n	b85de <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b85ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b85ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b85ee:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b85f0:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b85f4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b85f6:	4604      	mov	r4, r0
   b85f8:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b85fa:	da0b      	bge.n	b8614 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b85fc:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b85fe:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8600:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8602:	1b52      	subs	r2, r2, r5
   b8604:	1c48      	adds	r0, r1, #1
   b8606:	f002 fdc1 	bl	bb18c <memmove>
    new(p) T(std::move(value));
   b860a:	557e      	strb	r6, [r7, r5]
    ++size_;
   b860c:	6863      	ldr	r3, [r4, #4]
   b860e:	3301      	adds	r3, #1
   b8610:	6063      	str	r3, [r4, #4]
}
   b8612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8614:	3101      	adds	r1, #1
   b8616:	f7ff ffad 	bl	b8574 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b861a:	2800      	cmp	r0, #0
   b861c:	d1ee      	bne.n	b85fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b861e:	e7f8      	b.n	b8612 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b8620 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8620:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b8622:	6841      	ldr	r1, [r0, #4]
   b8624:	f7ff bfe2 	b.w	b85ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b8628 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8628:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b862c:	4604      	mov	r4, r0
   b862e:	461d      	mov	r5, r3
   b8630:	460f      	mov	r7, r1
   b8632:	ab01      	add	r3, sp, #4
   b8634:	4690      	mov	r8, r2
   b8636:	460a      	mov	r2, r1
   b8638:	e9d0 0100 	ldrd	r0, r1, [r0]
   b863c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b8640:	f7ff fb82 	bl	b7d48 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b8644:	1cae      	adds	r6, r5, #2
   b8646:	6863      	ldr	r3, [r4, #4]
   b8648:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b864a:	f1b9 0f00 	cmp.w	r9, #0
   b864e:	d126      	bne.n	b869e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b8650:	b328      	cbz	r0, b869e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8652:	4433      	add	r3, r6
   b8654:	1a1b      	subs	r3, r3, r0
   b8656:	2bff      	cmp	r3, #255	; 0xff
   b8658:	d809      	bhi.n	b866e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b865a:	9901      	ldr	r1, [sp, #4]
   b865c:	4620      	mov	r0, r4
   b865e:	f7ff fe71 	bl	b8344 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8662:	6861      	ldr	r1, [r4, #4]
   b8664:	4620      	mov	r0, r4
   b8666:	4431      	add	r1, r6
   b8668:	f7ff ff94 	bl	b8594 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b866c:	b918      	cbnz	r0, b8676 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b866e:	6860      	ldr	r0, [r4, #4]
}
   b8670:	b003      	add	sp, #12
   b8672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b8676:	1c6a      	adds	r2, r5, #1
   b8678:	9901      	ldr	r1, [sp, #4]
   b867a:	b2d2      	uxtb	r2, r2
   b867c:	4620      	mov	r0, r4
   b867e:	f7ff ffb5 	bl	b85ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b8682:	9901      	ldr	r1, [sp, #4]
   b8684:	463a      	mov	r2, r7
   b8686:	3101      	adds	r1, #1
   b8688:	4620      	mov	r0, r4
   b868a:	f7ff ffaf 	bl	b85ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b868e:	9901      	ldr	r1, [sp, #4]
   b8690:	462b      	mov	r3, r5
   b8692:	4642      	mov	r2, r8
   b8694:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b8696:	4620      	mov	r0, r4
   b8698:	f7ff ff85 	bl	b85a6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b869c:	e7e7      	b.n	b866e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b869e:	18f1      	adds	r1, r6, r3
   b86a0:	29ff      	cmp	r1, #255	; 0xff
   b86a2:	d8e4      	bhi.n	b866e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b86a4:	4620      	mov	r0, r4
   b86a6:	f7ff ff75 	bl	b8594 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b86aa:	2800      	cmp	r0, #0
   b86ac:	d0df      	beq.n	b866e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b86ae:	1c69      	adds	r1, r5, #1
   b86b0:	b2c9      	uxtb	r1, r1
   b86b2:	4620      	mov	r0, r4
   b86b4:	f7ff ffb4 	bl	b8620 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b86b8:	4639      	mov	r1, r7
   b86ba:	4620      	mov	r0, r4
   b86bc:	f7ff ffb0 	bl	b8620 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b86c0:	6861      	ldr	r1, [r4, #4]
   b86c2:	462b      	mov	r3, r5
   b86c4:	4642      	mov	r2, r8
   b86c6:	e7e6      	b.n	b8696 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b86c8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b86c8:	b430      	push	{r4, r5}
   b86ca:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b86ce:	b11a      	cbz	r2, b86d8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b86d0:	9502      	str	r5, [sp, #8]
}
   b86d2:	bc30      	pop	{r4, r5}
   b86d4:	f7ff bfa8 	b.w	b8628 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b86d8:	6840      	ldr	r0, [r0, #4]
}
   b86da:	bc30      	pop	{r4, r5}
   b86dc:	4770      	bx	lr

000b86de <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b86de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b86e0:	2300      	movs	r3, #0
   b86e2:	e9c0 3300 	strd	r3, r3, [r0]
   b86e6:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b86e8:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b86ea:	9300      	str	r3, [sp, #0]
   b86ec:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b86ee:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b86f2:	4619      	mov	r1, r3
   b86f4:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b86f8:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b86fa:	f7ff ffe5 	bl	b86c8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b86fe:	4620      	mov	r0, r4
   b8700:	b004      	add	sp, #16
   b8702:	bd10      	pop	{r4, pc}

000b8704 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8704:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8708:	4604      	mov	r4, r0
   b870a:	460d      	mov	r5, r1
   b870c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b870e:	d914      	bls.n	b873a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8710:	4290      	cmp	r0, r2
   b8712:	d213      	bcs.n	b873c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8714:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8718:	1a75      	subs	r5, r6, r1
   b871a:	f1a1 0708 	sub.w	r7, r1, #8
   b871e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8720:	42b7      	cmp	r7, r6
   b8722:	d018      	beq.n	b8756 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8724:	b11c      	cbz	r4, b872e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8726:	4631      	mov	r1, r6
   b8728:	4620      	mov	r0, r4
   b872a:	f7ff fe90 	bl	b844e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b872e:	1d30      	adds	r0, r6, #4
   b8730:	f7ff fe97 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8734:	3e08      	subs	r6, #8
   b8736:	3c08      	subs	r4, #8
   b8738:	e7f2      	b.n	b8720 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b873a:	d00c      	beq.n	b8756 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b873c:	42b5      	cmp	r5, r6
   b873e:	d00a      	beq.n	b8756 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8740:	b11c      	cbz	r4, b874a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8742:	4629      	mov	r1, r5
   b8744:	4620      	mov	r0, r4
   b8746:	f7ff fe82 	bl	b844e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b874a:	1d28      	adds	r0, r5, #4
   b874c:	f7ff fe89 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8750:	3508      	adds	r5, #8
   b8752:	3408      	adds	r4, #8
   b8754:	e7f2      	b.n	b873c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8758 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b875a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b875c:	6846      	ldr	r6, [r0, #4]
   b875e:	4668      	mov	r0, sp
   b8760:	f7ff fe75 	bl	b844e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8764:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b8768:	429f      	cmp	r7, r3
   b876a:	db12      	blt.n	b8792 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b876c:	3701      	adds	r7, #1
        if (n > 0) {
   b876e:	2f00      	cmp	r7, #0
   b8770:	dd29      	ble.n	b87c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b8772:	00f8      	lsls	r0, r7, #3
   b8774:	f7ff fa42 	bl	b7bfc <malloc>
            if (!d) {
   b8778:	4605      	mov	r5, r0
   b877a:	b1f0      	cbz	r0, b87ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b877c:	e9d4 1200 	ldrd	r1, r2, [r4]
   b8780:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8784:	f7ff ffbe 	bl	b8704 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8788:	6820      	ldr	r0, [r4, #0]
   b878a:	f7ff fa3f 	bl	b7c0c <free>
        data_ = d;
   b878e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b8790:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b8792:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8794:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8796:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b879a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b879e:	4631      	mov	r1, r6
   b87a0:	f106 0008 	add.w	r0, r6, #8
   b87a4:	f7ff ffae 	bl	b8704 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b87a8:	b11e      	cbz	r6, b87b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b87aa:	4669      	mov	r1, sp
   b87ac:	4630      	mov	r0, r6
   b87ae:	f7ff fe4e 	bl	b844e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b87b2:	6863      	ldr	r3, [r4, #4]
   b87b4:	3301      	adds	r3, #1
   b87b6:	6063      	str	r3, [r4, #4]
    return true;
   b87b8:	2501      	movs	r5, #1
   b87ba:	a801      	add	r0, sp, #4
   b87bc:	f7ff fe51 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b87c0:	4628      	mov	r0, r5
   b87c2:	b003      	add	sp, #12
   b87c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b87c6:	2500      	movs	r5, #0
   b87c8:	e7de      	b.n	b8788 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b87ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b87ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b87cc:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b87d0:	4605      	mov	r5, r0
   b87d2:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b87d4:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b87d8:	42a6      	cmp	r6, r4
   b87da:	d005      	beq.n	b87e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b87dc:	4639      	mov	r1, r7
   b87de:	4620      	mov	r0, r4
   b87e0:	f7ff fcff 	bl	b81e2 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b87e4:	b108      	cbz	r0, b87ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b87e6:	b914      	cbnz	r4, b87ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b87e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b87ea:	3408      	adds	r4, #8
   b87ec:	e7f4      	b.n	b87d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b87ee:	1d20      	adds	r0, r4, #4
   b87f0:	f7ff fe37 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b87f4:	e9d5 3200 	ldrd	r3, r2, [r5]
   b87f8:	f104 0108 	add.w	r1, r4, #8
   b87fc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8800:	4620      	mov	r0, r4
   b8802:	f7ff ff7f 	bl	b8704 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b8806:	686b      	ldr	r3, [r5, #4]
   b8808:	3b01      	subs	r3, #1
   b880a:	606b      	str	r3, [r5, #4]
    return true;
   b880c:	e7ec      	b.n	b87e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b8810 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8814:	4605      	mov	r5, r0
   b8816:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b8818:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b881a:	460c      	mov	r4, r1
        WiringBleLock lk;
   b881c:	f7ff fb1e 	bl	b7e5c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b8820:	682e      	ldr	r6, [r5, #0]
   b8822:	1ef3      	subs	r3, r6, #3
   b8824:	2b0d      	cmp	r3, #13
   b8826:	d83c      	bhi.n	b88a2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8828:	e8df f013 	tbh	[pc, r3, lsl #1]
   b882c:	0053000e 	.word	0x0053000e
   b8830:	00d1003b 	.word	0x00d1003b
   b8834:	003b003b 	.word	0x003b003b
   b8838:	003b003b 	.word	0x003b003b
   b883c:	009b003b 	.word	0x009b003b
   b8840:	009b009b 	.word	0x009b009b
   b8844:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b8848:	a804      	add	r0, sp, #16
   b884a:	f7ff fc95 	bl	b8178 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b884e:	9b04      	ldr	r3, [sp, #16]
   b8850:	89aa      	ldrh	r2, [r5, #12]
   b8852:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b8854:	6869      	ldr	r1, [r5, #4]
   b8856:	9804      	ldr	r0, [sp, #16]
   b8858:	3108      	adds	r1, #8
   b885a:	3002      	adds	r0, #2
   b885c:	f7ff fb18 	bl	b7e90 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b8860:	a904      	add	r1, sp, #16
   b8862:	a806      	add	r0, sp, #24
   b8864:	f7ff fdf3 	bl	b844e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b8868:	a906      	add	r1, sp, #24
   b886a:	f104 0018 	add.w	r0, r4, #24
   b886e:	f7ff ff73 	bl	b8758 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b8872:	4605      	mov	r5, r0
   b8874:	a807      	add	r0, sp, #28
   b8876:	f7ff fdf4 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b887a:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b887c:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b887e:	b9b5      	cbnz	r5, b88ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b8880:	4b5d      	ldr	r3, [pc, #372]	; (b89f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b8882:	495e      	ldr	r1, [pc, #376]	; (b89fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8884:	9300      	str	r3, [sp, #0]
   b8886:	2032      	movs	r0, #50	; 0x32
   b8888:	462b      	mov	r3, r5
   b888a:	aa06      	add	r2, sp, #24
   b888c:	9507      	str	r5, [sp, #28]
   b888e:	f7ff f909 	bl	b7aa4 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b8892:	9b04      	ldr	r3, [sp, #16]
   b8894:	4629      	mov	r1, r5
   b8896:	8818      	ldrh	r0, [r3, #0]
   b8898:	f7fe ff7c 	bl	b7794 <hal_ble_gap_disconnect>
   b889c:	a805      	add	r0, sp, #20
   b889e:	f7ff fde0 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b88a2:	a803      	add	r0, sp, #12
   b88a4:	f7ff fae8 	bl	b7e78 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b88a8:	b00e      	add	sp, #56	; 0x38
   b88aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b88ae:	4a54      	ldr	r2, [pc, #336]	; (b8a00 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b88b0:	9200      	str	r2, [sp, #0]
   b88b2:	2300      	movs	r3, #0
   b88b4:	4951      	ldr	r1, [pc, #324]	; (b89fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b88b6:	9307      	str	r3, [sp, #28]
   b88b8:	aa06      	add	r2, sp, #24
   b88ba:	2001      	movs	r0, #1
   b88bc:	f7ff f8f2 	bl	b7aa4 <log_message>
                if (impl->connectedCallback_) {
   b88c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b88c2:	2b00      	cmp	r3, #0
   b88c4:	d0ea      	beq.n	b889c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b88c6:	a904      	add	r1, sp, #16
   b88c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b88cc:	f7ff fe49 	bl	b8562 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b88d0:	e7e4      	b.n	b889c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b88d2:	89a9      	ldrh	r1, [r5, #12]
   b88d4:	4620      	mov	r0, r4
   b88d6:	f7ff fc19 	bl	b810c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b88da:	4606      	mov	r6, r0
   b88dc:	2800      	cmp	r0, #0
   b88de:	d0e0      	beq.n	b88a2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b88e0:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b88e2:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b88e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b88ea:	8029      	strh	r1, [r5, #0]
   b88ec:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b88f0:	429a      	cmp	r2, r3
   b88f2:	d003      	beq.n	b88fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b88f4:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b88f8:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b88fa:	e7f9      	b.n	b88f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b88fc:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b8900:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8904:	45b8      	cmp	r8, r7
   b8906:	d004      	beq.n	b8912 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b8908:	1d38      	adds	r0, r7, #4
   b890a:	f7ff fdaa 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b890e:	3708      	adds	r7, #8
   b8910:	e7f8      	b.n	b8904 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b8912:	2300      	movs	r3, #0
   b8914:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b8916:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b891a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b891e:	45b8      	cmp	r8, r7
   b8920:	d004      	beq.n	b892c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b8922:	1d38      	adds	r0, r7, #4
   b8924:	f7ff fd9d 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8928:	3708      	adds	r7, #8
   b892a:	e7f8      	b.n	b891e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b892c:	2300      	movs	r3, #0
   b892e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b8930:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b8932:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8934:	b123      	cbz	r3, b8940 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b8936:	4631      	mov	r1, r6
   b8938:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b893c:	f7ff fe11 	bl	b8562 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b8940:	2300      	movs	r3, #0
   b8942:	2220      	movs	r2, #32
   b8944:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b8948:	4a2e      	ldr	r2, [pc, #184]	; (b8a04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b894a:	9200      	str	r2, [sp, #0]
   b894c:	492b      	ldr	r1, [pc, #172]	; (b89fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b894e:	aa06      	add	r2, sp, #24
   b8950:	2001      	movs	r0, #1
   b8952:	f7ff f8a7 	bl	b7aa4 <log_message>
                    impl->peers_.removeOne(*peer);
   b8956:	4631      	mov	r1, r6
   b8958:	f104 0018 	add.w	r0, r4, #24
   b895c:	f7ff ff35 	bl	b87ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b8960:	e79f      	b.n	b88a2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8962:	89a9      	ldrh	r1, [r5, #12]
   b8964:	4620      	mov	r0, r4
   b8966:	f7ff fbd1 	bl	b810c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b896a:	2800      	cmp	r0, #0
   b896c:	d099      	beq.n	b88a2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b896e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b8970:	2b00      	cmp	r3, #0
   b8972:	d096      	beq.n	b88a2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b8974:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8976:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b8978:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b897c:	d001      	beq.n	b8982 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b897e:	2e10      	cmp	r6, #16
   b8980:	d117      	bne.n	b89b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b8982:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b8984:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b8986:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b8988:	2506      	movs	r5, #6
                        };
   b898a:	f88d 3015 	strb.w	r3, [sp, #21]
   b898e:	9104      	str	r1, [sp, #16]
   b8990:	f88d 2014 	strb.w	r2, [sp, #20]
   b8994:	9006      	str	r0, [sp, #24]
   b8996:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b899a:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b899c:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b89a0:	9508      	str	r5, [sp, #32]
   b89a2:	e883 0003 	stmia.w	r3, {r0, r1}
   b89a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b89a8:	a906      	add	r1, sp, #24
   b89aa:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b89ae:	4798      	blx	r3
   b89b0:	e777      	b.n	b88a2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b89b2:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b89b4:	bf01      	itttt	eq
   b89b6:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b89b8:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b89ba:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b89be:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b89c0:	bf0f      	iteee	eq
   b89c2:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b89c6:	461a      	movne	r2, r3
   b89c8:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b89ca:	461d      	movne	r5, r3
   b89cc:	e7dd      	b.n	b898a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b89ce:	89a9      	ldrh	r1, [r5, #12]
   b89d0:	4620      	mov	r0, r4
   b89d2:	f7ff fb9b 	bl	b810c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b89d6:	4601      	mov	r1, r0
   b89d8:	2800      	cmp	r0, #0
   b89da:	f43f af62 	beq.w	b88a2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b89de:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b89e0:	2b00      	cmp	r3, #0
   b89e2:	f43f af5e 	beq.w	b88a2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b89e6:	686b      	ldr	r3, [r5, #4]
   b89e8:	9306      	str	r3, [sp, #24]
   b89ea:	aa06      	add	r2, sp, #24
   b89ec:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b89ee:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b89f2:	4798      	blx	r3
   b89f4:	e755      	b.n	b88a2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b89f6:	bf00      	nop
   b89f8:	000bd7b4 	.word	0x000bd7b4
   b89fc:	000bd733 	.word	0x000bd733
   b8a00:	000bd7da 	.word	0x000bd7da
   b8a04:	000bd7f7 	.word	0x000bd7f7

000b8a08 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b8a08:	b513      	push	{r0, r1, r4, lr}
   b8a0a:	460b      	mov	r3, r1
   b8a0c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a0e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8a12:	466c      	mov	r4, sp
   b8a14:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b8a18:	e893 0003 	ldmia.w	r3, {r0, r1}
   b8a1c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b8a20:	e894 0003 	ldmia.w	r4, {r0, r1}
   b8a24:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b8a28:	b002      	add	sp, #8
   b8a2a:	bd10      	pop	{r4, pc}

000b8a2c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b8a2c:	b538      	push	{r3, r4, r5, lr}
   b8a2e:	4605      	mov	r5, r0
   b8a30:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b8a32:	f7ff ffe9 	bl	b8a08 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a36:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8a38:	68a2      	ldr	r2, [r4, #8]
   b8a3a:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8a3c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8a3e:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8a40:	68e2      	ldr	r2, [r4, #12]
   b8a42:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8a44:	60e3      	str	r3, [r4, #12]
      }
   b8a46:	bd38      	pop	{r3, r4, r5, pc}

000b8a48 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b8a48:	b570      	push	{r4, r5, r6, lr}
   b8a4a:	4604      	mov	r4, r0
   b8a4c:	b08c      	sub	sp, #48	; 0x30
   b8a4e:	460e      	mov	r6, r1
   b8a50:	9201      	str	r2, [sp, #4]
   b8a52:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b8a54:	f7ff fb3a 	bl	b80cc <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b8a58:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b8a5a:	9901      	ldr	r1, [sp, #4]
   b8a5c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8a60:	f000 fd66 	bl	b9530 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b8a64:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b8a68:	b1cd      	cbz	r5, b8a9e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b8a6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8a6c:	9502      	str	r5, [sp, #8]
   b8a6e:	a902      	add	r1, sp, #8
   b8a70:	a804      	add	r0, sp, #16
   b8a72:	9303      	str	r3, [sp, #12]
   b8a74:	f7ff fcb4 	bl	b83e0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b8a78:	2300      	movs	r3, #0
	__x.swap(*this);
   b8a7a:	a908      	add	r1, sp, #32
   b8a7c:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b8a7e:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b8a80:	f7ff ffd4 	bl	b8a2c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b8a84:	4631      	mov	r1, r6
   b8a86:	a808      	add	r0, sp, #32
   b8a88:	f7ff ffd0 	bl	b8a2c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b8a8c:	a808      	add	r0, sp, #32
   b8a8e:	f7ff f9a7 	bl	b7de0 <_ZNSt14_Function_baseD1Ev>
   b8a92:	a804      	add	r0, sp, #16
   b8a94:	f7ff f9a4 	bl	b7de0 <_ZNSt14_Function_baseD1Ev>
    }
   b8a98:	4620      	mov	r0, r4
   b8a9a:	b00c      	add	sp, #48	; 0x30
   b8a9c:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b8a9e:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b8aa0:	e7ea      	b.n	b8a78 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b8aa4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b8aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8aa8:	b087      	sub	sp, #28
   b8aaa:	461d      	mov	r5, r3
   b8aac:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b8ab0:	4680      	mov	r8, r0
   b8ab2:	468b      	mov	fp, r1
   b8ab4:	4692      	mov	sl, r2
   b8ab6:	9912      	ldr	r1, [sp, #72]	; 0x48
   b8ab8:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8aba:	2200      	movs	r2, #0
   b8abc:	2068      	movs	r0, #104	; 0x68
   b8abe:	9102      	str	r1, [sp, #8]
   b8ac0:	9204      	str	r2, [sp, #16]
   b8ac2:	f7fb fae8 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8ac6:	1e06      	subs	r6, r0, #0
   b8ac8:	f106 090c 	add.w	r9, r6, #12
   b8acc:	d018      	beq.n	b8b00 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b8ace:	2201      	movs	r2, #1
	: _M_impl(__a)
   b8ad0:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b8ad2:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b8ad6:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b8ad8:	4a15      	ldr	r2, [pc, #84]	; (b8b30 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b8ada:	f847 2b20 	str.w	r2, [r7], #32
   b8ade:	9b03      	ldr	r3, [sp, #12]
   b8ae0:	9100      	str	r1, [sp, #0]
   b8ae2:	465a      	mov	r2, fp
   b8ae4:	4651      	mov	r1, sl
   b8ae6:	4648      	mov	r0, r9
   b8ae8:	f7ff ffae 	bl	b8a48 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b8aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8aee:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b8af0:	682b      	ldr	r3, [r5, #0]
   b8af2:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b8af4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8af6:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b8afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8afc:	6823      	ldr	r3, [r4, #0]
   b8afe:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b8b00:	a904      	add	r1, sp, #16
   b8b02:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b8b04:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b8b08:	f7ff fd1a 	bl	b8540 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b8b0c:	a805      	add	r0, sp, #20
   b8b0e:	f7ff fca8 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b8b12:	f8d8 3000 	ldr.w	r3, [r8]
   b8b16:	b93b      	cbnz	r3, b8b28 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b8b18:	4a06      	ldr	r2, [pc, #24]	; (b8b34 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b8b1a:	4907      	ldr	r1, [pc, #28]	; (b8b38 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b8b1c:	200a      	movs	r0, #10
}
   b8b1e:	b007      	add	sp, #28
   b8b20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b8b24:	f7fe bfb6 	b.w	b7a94 <panic_>
}
   b8b28:	b007      	add	sp, #28
   b8b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8b2e:	bf00      	nop
   b8b30:	000bd870 	.word	0x000bd870
   b8b34:	000b7825 	.word	0x000b7825
   b8b38:	000bd71c 	.word	0x000bd71c

000b8b3c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8b3c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8b40:	4604      	mov	r4, r0
   b8b42:	460d      	mov	r5, r1
   b8b44:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8b46:	d914      	bls.n	b8b72 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8b48:	4290      	cmp	r0, r2
   b8b4a:	d213      	bcs.n	b8b74 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8b4c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8b50:	1a75      	subs	r5, r6, r1
   b8b52:	f1a1 0708 	sub.w	r7, r1, #8
   b8b56:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8b58:	42b7      	cmp	r7, r6
   b8b5a:	d018      	beq.n	b8b8e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8b5c:	b11c      	cbz	r4, b8b66 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8b5e:	4631      	mov	r1, r6
   b8b60:	4620      	mov	r0, r4
   b8b62:	f7ff fc6a 	bl	b843a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8b66:	1d30      	adds	r0, r6, #4
   b8b68:	f7ff fc7b 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8b6c:	3e08      	subs	r6, #8
   b8b6e:	3c08      	subs	r4, #8
   b8b70:	e7f2      	b.n	b8b58 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8b72:	d00c      	beq.n	b8b8e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8b74:	42b5      	cmp	r5, r6
   b8b76:	d00a      	beq.n	b8b8e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8b78:	b11c      	cbz	r4, b8b82 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8b7a:	4629      	mov	r1, r5
   b8b7c:	4620      	mov	r0, r4
   b8b7e:	f7ff fc5c 	bl	b843a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8b82:	1d28      	adds	r0, r5, #4
   b8b84:	f7ff fc6d 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8b88:	3508      	adds	r5, #8
   b8b8a:	3408      	adds	r4, #8
   b8b8c:	e7f2      	b.n	b8b74 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8b90 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8b90:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8b92:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8b94:	4605      	mov	r5, r0
        if (n > 0) {
   b8b96:	dd11      	ble.n	b8bbc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8b98:	00f0      	lsls	r0, r6, #3
   b8b9a:	f7ff f82f 	bl	b7bfc <malloc>
            if (!d) {
   b8b9e:	4604      	mov	r4, r0
   b8ba0:	b158      	cbz	r0, b8bba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8ba2:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8ba6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8baa:	f7ff ffc7 	bl	b8b3c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8bae:	6828      	ldr	r0, [r5, #0]
   b8bb0:	f7ff f82c 	bl	b7c0c <free>
        data_ = d;
   b8bb4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8bb6:	60ae      	str	r6, [r5, #8]
        return true;
   b8bb8:	2001      	movs	r0, #1
    }
   b8bba:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8bbc:	2400      	movs	r4, #0
   b8bbe:	e7f6      	b.n	b8bae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b8bc0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8bc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8bc2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8bc4:	6845      	ldr	r5, [r0, #4]
   b8bc6:	4668      	mov	r0, sp
   b8bc8:	f7ff fc37 	bl	b843a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8bcc:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8bd0:	4299      	cmp	r1, r3
   b8bd2:	da10      	bge.n	b8bf6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b8bd4:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8bd6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8bd8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8bdc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8be0:	4629      	mov	r1, r5
   b8be2:	f105 0008 	add.w	r0, r5, #8
   b8be6:	f7ff ffa9 	bl	b8b3c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8bea:	b98d      	cbnz	r5, b8c10 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8bec:	6863      	ldr	r3, [r4, #4]
   b8bee:	3301      	adds	r3, #1
   b8bf0:	6063      	str	r3, [r4, #4]
    return true;
   b8bf2:	2601      	movs	r6, #1
   b8bf4:	e006      	b.n	b8c04 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8bf6:	3101      	adds	r1, #1
   b8bf8:	4620      	mov	r0, r4
   b8bfa:	f7ff ffc9 	bl	b8b90 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8bfe:	4606      	mov	r6, r0
   b8c00:	2800      	cmp	r0, #0
   b8c02:	d1e7      	bne.n	b8bd4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b8c04:	a801      	add	r0, sp, #4
   b8c06:	f7ff fc2c 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8c0a:	4630      	mov	r0, r6
   b8c0c:	b002      	add	sp, #8
   b8c0e:	bd70      	pop	{r4, r5, r6, pc}
   b8c10:	4669      	mov	r1, sp
   b8c12:	4628      	mov	r0, r5
   b8c14:	f7ff fc11 	bl	b843a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8c18:	e7e8      	b.n	b8bec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8c1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8c1a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8c1e:	4604      	mov	r4, r0
   b8c20:	460d      	mov	r5, r1
   b8c22:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8c24:	d914      	bls.n	b8c50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8c26:	4290      	cmp	r0, r2
   b8c28:	d213      	bcs.n	b8c52 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8c2a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8c2e:	1a75      	subs	r5, r6, r1
   b8c30:	f1a1 0708 	sub.w	r7, r1, #8
   b8c34:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8c36:	42b7      	cmp	r7, r6
   b8c38:	d018      	beq.n	b8c6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8c3a:	b11c      	cbz	r4, b8c44 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b8c3c:	4631      	mov	r1, r6
   b8c3e:	4620      	mov	r0, r4
   b8c40:	f7ff fbed 	bl	b841e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8c44:	1d30      	adds	r0, r6, #4
   b8c46:	f7ff fc0c 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8c4a:	3e08      	subs	r6, #8
   b8c4c:	3c08      	subs	r4, #8
   b8c4e:	e7f2      	b.n	b8c36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8c50:	d00c      	beq.n	b8c6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8c52:	42b5      	cmp	r5, r6
   b8c54:	d00a      	beq.n	b8c6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8c56:	b11c      	cbz	r4, b8c60 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8c58:	4629      	mov	r1, r5
   b8c5a:	4620      	mov	r0, r4
   b8c5c:	f7ff fbdf 	bl	b841e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8c60:	1d28      	adds	r0, r5, #4
   b8c62:	f7ff fbfe 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8c66:	3508      	adds	r5, #8
   b8c68:	3408      	adds	r4, #8
   b8c6a:	e7f2      	b.n	b8c52 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8c6e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8c6e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8c70:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8c72:	4605      	mov	r5, r0
        if (n > 0) {
   b8c74:	dd11      	ble.n	b8c9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8c76:	00f0      	lsls	r0, r6, #3
   b8c78:	f7fe ffc0 	bl	b7bfc <malloc>
            if (!d) {
   b8c7c:	4604      	mov	r4, r0
   b8c7e:	b158      	cbz	r0, b8c98 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8c80:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8c84:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8c88:	f7ff ffc7 	bl	b8c1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8c8c:	6828      	ldr	r0, [r5, #0]
   b8c8e:	f7fe ffbd 	bl	b7c0c <free>
        data_ = d;
   b8c92:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8c94:	60ae      	str	r6, [r5, #8]
        return true;
   b8c96:	2001      	movs	r0, #1
    }
   b8c98:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8c9a:	2400      	movs	r4, #0
   b8c9c:	e7f6      	b.n	b8c8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b8c9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8c9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8ca0:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8ca2:	6845      	ldr	r5, [r0, #4]
   b8ca4:	4668      	mov	r0, sp
   b8ca6:	f7ff fbba 	bl	b841e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8caa:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8cae:	4299      	cmp	r1, r3
   b8cb0:	da10      	bge.n	b8cd4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b8cb2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8cb4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8cb6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8cba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8cbe:	4629      	mov	r1, r5
   b8cc0:	f105 0008 	add.w	r0, r5, #8
   b8cc4:	f7ff ffa9 	bl	b8c1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8cc8:	b98d      	cbnz	r5, b8cee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8cca:	6863      	ldr	r3, [r4, #4]
   b8ccc:	3301      	adds	r3, #1
   b8cce:	6063      	str	r3, [r4, #4]
    return true;
   b8cd0:	2601      	movs	r6, #1
   b8cd2:	e006      	b.n	b8ce2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8cd4:	3101      	adds	r1, #1
   b8cd6:	4620      	mov	r0, r4
   b8cd8:	f7ff ffc9 	bl	b8c6e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8cdc:	4606      	mov	r6, r0
   b8cde:	2800      	cmp	r0, #0
   b8ce0:	d1e7      	bne.n	b8cb2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b8ce2:	a801      	add	r0, sp, #4
   b8ce4:	f7ff fbbd 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8ce8:	4630      	mov	r0, r6
   b8cea:	b002      	add	sp, #8
   b8cec:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b8cee:	4669      	mov	r1, sp
   b8cf0:	4628      	mov	r0, r5
   b8cf2:	f7ff fb94 	bl	b841e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8cf6:	e7e8      	b.n	b8cca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8cf8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8cfc:	4617      	mov	r7, r2
   b8cfe:	b0a1      	sub	sp, #132	; 0x84
   b8d00:	4680      	mov	r8, r0
    WiringBleLock lk;
   b8d02:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8d04:	460e      	mov	r6, r1
    WiringBleLock lk;
   b8d06:	f7ff f8a9 	bl	b7e5c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8d0a:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b8d0c:	7923      	ldrb	r3, [r4, #4]
   b8d0e:	b953      	cbnz	r3, b8d26 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b8d10:	4639      	mov	r1, r7
   b8d12:	4640      	mov	r0, r8
   b8d14:	f7ff fb83 	bl	b841e <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b8d18:	a80a      	add	r0, sp, #40	; 0x28
   b8d1a:	f7ff f8ad 	bl	b7e78 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b8d1e:	4640      	mov	r0, r8
   b8d20:	b021      	add	sp, #132	; 0x84
   b8d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8d26:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b8d28:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b8d2c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b8d30:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b8d32:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b8d36:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b8d3a:	9b03      	ldr	r3, [sp, #12]
   b8d3c:	429d      	cmp	r5, r3
   b8d3e:	d021      	beq.n	b8d84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b8d40:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b8d44:	4658      	mov	r0, fp
   b8d46:	f109 0114 	add.w	r1, r9, #20
   b8d4a:	f7ff f934 	bl	b7fb6 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b8d4e:	b1b8      	cbz	r0, b8d80 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b8d50:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b8d54:	4650      	mov	r0, sl
   b8d56:	f7ff f92e 	bl	b7fb6 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b8d5a:	b188      	cbz	r0, b8d80 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b8d5c:	6823      	ldr	r3, [r4, #0]
   b8d5e:	f8d9 2000 	ldr.w	r2, [r9]
   b8d62:	4053      	eors	r3, r2
   b8d64:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b8d68:	d10a      	bne.n	b8d80 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b8d6a:	2220      	movs	r2, #32
   b8d6c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b8d70:	4a5e      	ldr	r2, [pc, #376]	; (b8eec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b8d72:	9200      	str	r2, [sp, #0]
   b8d74:	aa15      	add	r2, sp, #84	; 0x54
   b8d76:	495e      	ldr	r1, [pc, #376]	; (b8ef0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b8d78:	2032      	movs	r0, #50	; 0x32
   b8d7a:	f7fe fe93 	bl	b7aa4 <log_message>
   b8d7e:	e7c7      	b.n	b8d10 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b8d80:	3508      	adds	r5, #8
   b8d82:	e7da      	b.n	b8d3a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b8d84:	4650      	mov	r0, sl
   b8d86:	f7ff f8e7 	bl	b7f58 <_ZNK8particle7BleUuid7isValidEv>
   b8d8a:	b960      	cbnz	r0, b8da6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b8d8c:	4959      	ldr	r1, [pc, #356]	; (b8ef4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b8d8e:	2201      	movs	r2, #1
   b8d90:	a815      	add	r0, sp, #84	; 0x54
   b8d92:	ad15      	add	r5, sp, #84	; 0x54
   b8d94:	f7ff f8b8 	bl	b7f08 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b8d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8d9a:	46d4      	mov	ip, sl
   b8d9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8da0:	682b      	ldr	r3, [r5, #0]
   b8da2:	f8cc 3000 	str.w	r3, [ip]
   b8da6:	6833      	ldr	r3, [r6, #0]
   b8da8:	e9d3 5300 	ldrd	r5, r3, [r3]
   b8dac:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b8db0:	455d      	cmp	r5, fp
   b8db2:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b8db4:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b8db6:	d06e      	beq.n	b8e96 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b8db8:	f855 0b08 	ldr.w	r0, [r5], #8
   b8dbc:	f7ff f8fb 	bl	b7fb6 <_ZNK8particle7BleUuideqERKS0_>
   b8dc0:	2800      	cmp	r0, #0
   b8dc2:	d0f5      	beq.n	b8db0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b8dc4:	f104 0a14 	add.w	sl, r4, #20
   b8dc8:	4650      	mov	r0, sl
   b8dca:	f7ff f8c5 	bl	b7f58 <_ZNK8particle7BleUuid7isValidEv>
   b8dce:	b988      	cbnz	r0, b8df4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b8dd0:	4b49      	ldr	r3, [pc, #292]	; (b8ef8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8dd2:	4948      	ldr	r1, [pc, #288]	; (b8ef4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b8dd4:	881a      	ldrh	r2, [r3, #0]
   b8dd6:	3201      	adds	r2, #1
   b8dd8:	b292      	uxth	r2, r2
   b8dda:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8ddc:	a815      	add	r0, sp, #84	; 0x54
   b8dde:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b8de0:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8de2:	f7ff f8b0 	bl	b7f46 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b8de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8de8:	46d4      	mov	ip, sl
   b8dea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8dee:	682b      	ldr	r3, [r5, #0]
   b8df0:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b8df4:	4b41      	ldr	r3, [pc, #260]	; (b8efc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b8df6:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b8df8:	2228      	movs	r2, #40	; 0x28
   b8dfa:	2100      	movs	r1, #0
   b8dfc:	a816      	add	r0, sp, #88	; 0x58
   b8dfe:	f002 f9df 	bl	bb1c0 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b8e02:	4651      	mov	r1, sl
   b8e04:	a804      	add	r0, sp, #16
   b8e06:	f7ff f8b9 	bl	b7f7c <_ZN8particle7BleUuid7halUUIDEv>
   b8e0a:	ab04      	add	r3, sp, #16
   b8e0c:	aa18      	add	r2, sp, #96	; 0x60
   b8e0e:	f10d 0c20 	add.w	ip, sp, #32
   b8e12:	6818      	ldr	r0, [r3, #0]
   b8e14:	6859      	ldr	r1, [r3, #4]
   b8e16:	4615      	mov	r5, r2
   b8e18:	c503      	stmia	r5!, {r0, r1}
   b8e1a:	3308      	adds	r3, #8
   b8e1c:	4563      	cmp	r3, ip
   b8e1e:	462a      	mov	r2, r5
   b8e20:	d1f7      	bne.n	b8e12 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b8e22:	6818      	ldr	r0, [r3, #0]
   b8e24:	6028      	str	r0, [r5, #0]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   b8e26:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b8e28:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b8e2c:	f8d9 3000 	ldr.w	r3, [r9]
   b8e30:	8a9b      	ldrh	r3, [r3, #20]
   b8e32:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b8e36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8e38:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b8e3a:	4b31      	ldr	r3, [pc, #196]	; (b8f00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8e3c:	2200      	movs	r2, #0
   b8e3e:	1da1      	adds	r1, r4, #6
   b8e40:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b8e42:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8e46:	f7fe fcb9 	bl	b77bc <hal_ble_gatt_server_add_characteristic>
   b8e4a:	2800      	cmp	r0, #0
   b8e4c:	f47f af60 	bne.w	b8d10 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b8e50:	2301      	movs	r3, #1
   b8e52:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b8e54:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b8e56:	4639      	mov	r1, r7
        return characteristics_;
   b8e58:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b8e5a:	a80d      	add	r0, sp, #52	; 0x34
   b8e5c:	f7ff fadf 	bl	b841e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8e60:	4620      	mov	r0, r4
   b8e62:	a90d      	add	r1, sp, #52	; 0x34
   b8e64:	f7ff ff1b 	bl	b8c9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b8e68:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8e6a:	a80e      	add	r0, sp, #56	; 0x38
   b8e6c:	f7ff faf9 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8e70:	2c00      	cmp	r4, #0
   b8e72:	f47f af4d 	bne.w	b8d10 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b8e76:	2320      	movs	r3, #32
   b8e78:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b8e7c:	4b21      	ldr	r3, [pc, #132]	; (b8f04 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b8e7e:	9300      	str	r3, [sp, #0]
   b8e80:	aa0d      	add	r2, sp, #52	; 0x34
   b8e82:	4623      	mov	r3, r4
   b8e84:	e777      	b.n	b8d76 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b8e86:	4639      	mov	r1, r7
   b8e88:	4640      	mov	r0, r8
   b8e8a:	f7ff fac8 	bl	b841e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8e8e:	a80c      	add	r0, sp, #48	; 0x30
   b8e90:	f7ff fae7 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8e94:	e740      	b.n	b8d18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b8e96:	a80b      	add	r0, sp, #44	; 0x2c
   b8e98:	f7ff f94a 	bl	b8130 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b8e9c:	4651      	mov	r1, sl
   b8e9e:	a815      	add	r0, sp, #84	; 0x54
   b8ea0:	f7ff f86c 	bl	b7f7c <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b8ea4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8ea6:	2300      	movs	r3, #0
   b8ea8:	3214      	adds	r2, #20
   b8eaa:	a915      	add	r1, sp, #84	; 0x54
   b8eac:	2001      	movs	r0, #1
   b8eae:	f7fe fc7b 	bl	b77a8 <hal_ble_gatt_server_add_service>
   b8eb2:	2800      	cmp	r0, #0
   b8eb4:	d1e7      	bne.n	b8e86 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b8eb6:	6835      	ldr	r5, [r6, #0]
   b8eb8:	a90b      	add	r1, sp, #44	; 0x2c
   b8eba:	a80d      	add	r0, sp, #52	; 0x34
   b8ebc:	f7ff fabd 	bl	b843a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b8ec0:	4628      	mov	r0, r5
   b8ec2:	a90d      	add	r1, sp, #52	; 0x34
   b8ec4:	f7ff fe7c 	bl	b8bc0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b8ec8:	4605      	mov	r5, r0
   b8eca:	a80e      	add	r0, sp, #56	; 0x38
   b8ecc:	f7ff fac9 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8ed0:	2d00      	cmp	r5, #0
   b8ed2:	d0d8      	beq.n	b8e86 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b8ed4:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b8ed6:	6853      	ldr	r3, [r2, #4]
   b8ed8:	6812      	ldr	r2, [r2, #0]
   b8eda:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b8ede:	3b01      	subs	r3, #1
   b8ee0:	a80c      	add	r0, sp, #48	; 0x30
   b8ee2:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b8ee6:	f7ff fabc 	bl	b8462 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8eea:	e76b      	b.n	b8dc4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b8eec:	000bd816 	.word	0x000bd816
   b8ef0:	000bd733 	.word	0x000bd733
   b8ef4:	000bd8da 	.word	0x000bd8da
   b8ef8:	2003e6bc 	.word	0x2003e6bc
   b8efc:	002c0003 	.word	0x002c0003
   b8f00:	000b82c9 	.word	0x000b82c9
   b8f04:	000bd841 	.word	0x000bd841

000b8f08 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b8f08:	4802      	ldr	r0, [pc, #8]	; (b8f14 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8f0a:	2300      	movs	r3, #0
   b8f0c:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b8f0e:	f7fe bc69 	b.w	b77e4 <os_mutex_recursive_create>
   b8f12:	bf00      	nop
   b8f14:	2003e6c0 	.word	0x2003e6c0

000b8f18 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8f18:	2200      	movs	r2, #0
   b8f1a:	6840      	ldr	r0, [r0, #4]
   b8f1c:	4611      	mov	r1, r2
   b8f1e:	f7fe be2d 	b.w	b7b7c <network_listening>

000b8f22 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8f22:	2200      	movs	r2, #0
   b8f24:	6840      	ldr	r0, [r0, #4]
   b8f26:	4611      	mov	r1, r2
   b8f28:	f7fe be50 	b.w	b7bcc <network_get_listen_timeout>

000b8f2c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8f2c:	6840      	ldr	r0, [r0, #4]
   b8f2e:	2200      	movs	r2, #0
   b8f30:	f7fe be44 	b.w	b7bbc <network_set_listen_timeout>

000b8f34 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8f34:	6840      	ldr	r0, [r0, #4]
   b8f36:	2200      	movs	r2, #0
   b8f38:	f081 0101 	eor.w	r1, r1, #1
   b8f3c:	f7fe be16 	b.w	b7b6c <network_listen>

000b8f40 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8f40:	2300      	movs	r3, #0
   b8f42:	6840      	ldr	r0, [r0, #4]
   b8f44:	461a      	mov	r2, r3
   b8f46:	4619      	mov	r1, r3
   b8f48:	f7fe be08 	b.w	b7b5c <network_off>

000b8f4c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8f4c:	2300      	movs	r3, #0
   b8f4e:	6840      	ldr	r0, [r0, #4]
   b8f50:	461a      	mov	r2, r3
   b8f52:	4619      	mov	r1, r3
   b8f54:	f7fe bdfa 	b.w	b7b4c <network_on>

000b8f58 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8f58:	2200      	movs	r2, #0
   b8f5a:	6840      	ldr	r0, [r0, #4]
   b8f5c:	4611      	mov	r1, r2
   b8f5e:	f7fe bded 	b.w	b7b3c <network_ready>

000b8f62 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8f62:	2200      	movs	r2, #0
   b8f64:	6840      	ldr	r0, [r0, #4]
   b8f66:	4611      	mov	r1, r2
   b8f68:	f7fe bdd8 	b.w	b7b1c <network_connecting>

000b8f6c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8f6c:	6840      	ldr	r0, [r0, #4]
   b8f6e:	2200      	movs	r2, #0
   b8f70:	2102      	movs	r1, #2
   b8f72:	f7fe bddb 	b.w	b7b2c <network_disconnect>

000b8f76 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8f76:	2300      	movs	r3, #0
   b8f78:	6840      	ldr	r0, [r0, #4]
   b8f7a:	461a      	mov	r2, r3
   b8f7c:	f7fe bdc6 	b.w	b7b0c <network_connect>

000b8f80 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8f80:	4b02      	ldr	r3, [pc, #8]	; (b8f8c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8f82:	2203      	movs	r2, #3
   b8f84:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b8f86:	4a02      	ldr	r2, [pc, #8]	; (b8f90 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8f88:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8f8a:	4770      	bx	lr
   b8f8c:	2003e6c8 	.word	0x2003e6c8
   b8f90:	000bd904 	.word	0x000bd904

000b8f94 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8f94:	4770      	bx	lr

000b8f96 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8f98:	4606      	mov	r6, r0
   b8f9a:	4615      	mov	r5, r2
   b8f9c:	460c      	mov	r4, r1
   b8f9e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8fa0:	42bc      	cmp	r4, r7
   b8fa2:	d006      	beq.n	b8fb2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8fa4:	6833      	ldr	r3, [r6, #0]
   b8fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8faa:	689b      	ldr	r3, [r3, #8]
   b8fac:	4630      	mov	r0, r6
   b8fae:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8fb0:	e7f6      	b.n	b8fa0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8fb2:	4628      	mov	r0, r5
   b8fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8fb6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8fb6:	7c00      	ldrb	r0, [r0, #16]
   b8fb8:	2200      	movs	r2, #0
   b8fba:	f7fe bc63 	b.w	b7884 <hal_i2c_write>

000b8fbe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8fbe:	7c00      	ldrb	r0, [r0, #16]
   b8fc0:	2100      	movs	r1, #0
   b8fc2:	f7fe bc67 	b.w	b7894 <hal_i2c_available>

000b8fc6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8fc6:	7c00      	ldrb	r0, [r0, #16]
   b8fc8:	2100      	movs	r1, #0
   b8fca:	f7fe bc6b 	b.w	b78a4 <hal_i2c_read>

000b8fce <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8fce:	7c00      	ldrb	r0, [r0, #16]
   b8fd0:	2100      	movs	r1, #0
   b8fd2:	f7fe bc6f 	b.w	b78b4 <hal_i2c_peek>

000b8fd6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8fd6:	7c00      	ldrb	r0, [r0, #16]
   b8fd8:	2100      	movs	r1, #0
   b8fda:	f7fe bc73 	b.w	b78c4 <hal_i2c_flush>

000b8fde <_ZN7TwoWireD0Ev>:
   b8fde:	b510      	push	{r4, lr}
   b8fe0:	2114      	movs	r1, #20
   b8fe2:	4604      	mov	r4, r0
   b8fe4:	f7fb f85d 	bl	b40a2 <_ZdlPvj>
   b8fe8:	4620      	mov	r0, r4
   b8fea:	bd10      	pop	{r4, pc}

000b8fec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8fec:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8ff2:	4604      	mov	r4, r0
   b8ff4:	4608      	mov	r0, r1
   b8ff6:	2100      	movs	r1, #0
   b8ff8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8ffc:	4b03      	ldr	r3, [pc, #12]	; (b900c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b8ffe:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b9000:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b9002:	4611      	mov	r1, r2
   b9004:	f7fe fc66 	bl	b78d4 <hal_i2c_init>
}
   b9008:	4620      	mov	r0, r4
   b900a:	bd10      	pop	{r4, pc}
   b900c:	000bd940 	.word	0x000bd940

000b9010 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b9010:	2300      	movs	r3, #0
   b9012:	7c00      	ldrb	r0, [r0, #16]
   b9014:	461a      	mov	r2, r3
   b9016:	4619      	mov	r1, r3
   b9018:	f7fe bc1c 	b.w	b7854 <hal_i2c_begin>

000b901c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b901c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b901e:	2200      	movs	r2, #0
   b9020:	2314      	movs	r3, #20
   b9022:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b9026:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b902a:	780b      	ldrb	r3, [r1, #0]
   b902c:	f88d 3008 	strb.w	r3, [sp, #8]
   b9030:	684b      	ldr	r3, [r1, #4]
   b9032:	9303      	str	r3, [sp, #12]
   b9034:	68cb      	ldr	r3, [r1, #12]
   b9036:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b9038:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b903a:	7a0b      	ldrb	r3, [r1, #8]
   b903c:	9305      	str	r3, [sp, #20]
   b903e:	a901      	add	r1, sp, #4
   b9040:	f7fe fc50 	bl	b78e4 <hal_i2c_request_ex>
}
   b9044:	b007      	add	sp, #28
   b9046:	f85d fb04 	ldr.w	pc, [sp], #4

000b904a <_ZN7TwoWire11requestFromEhjh>:
{
   b904a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b904c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b904e:	f88d 1000 	strb.w	r1, [sp]
   b9052:	f04f 0164 	mov.w	r1, #100	; 0x64
   b9056:	9103      	str	r1, [sp, #12]
   b9058:	bf18      	it	ne
   b905a:	2301      	movne	r3, #1
   b905c:	4669      	mov	r1, sp
    size_ = size;
   b905e:	9201      	str	r2, [sp, #4]
   b9060:	f88d 3008 	strb.w	r3, [sp, #8]
   b9064:	f7ff ffda 	bl	b901c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b9068:	b005      	add	sp, #20
   b906a:	f85d fb04 	ldr.w	pc, [sp], #4

000b906e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b906e:	2301      	movs	r3, #1
   b9070:	f7ff bfeb 	b.w	b904a <_ZN7TwoWire11requestFromEhjh>

000b9074 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b9074:	7c00      	ldrb	r0, [r0, #16]
   b9076:	2200      	movs	r2, #0
   b9078:	f7fe bbf4 	b.w	b7864 <hal_i2c_begin_transmission>

000b907c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b907c:	b2c9      	uxtb	r1, r1
   b907e:	f7ff bff9 	b.w	b9074 <_ZN7TwoWire17beginTransmissionEh>

000b9082 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b9082:	7c00      	ldrb	r0, [r0, #16]
   b9084:	2200      	movs	r2, #0
   b9086:	f7fe bbf5 	b.w	b7874 <hal_i2c_end_transmission>

000b908a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b908a:	2101      	movs	r1, #1
   b908c:	f7ff bff9 	b.w	b9082 <_ZN7TwoWire15endTransmissionEh>

000b9090 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b9090:	4770      	bx	lr

000b9092 <_ZN9IPAddressD0Ev>:
   b9092:	b510      	push	{r4, lr}
   b9094:	2118      	movs	r1, #24
   b9096:	4604      	mov	r4, r0
   b9098:	f7fb f803 	bl	b40a2 <_ZdlPvj>
   b909c:	4620      	mov	r0, r4
   b909e:	bd10      	pop	{r4, pc}

000b90a0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b90a0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b90a2:	7d03      	ldrb	r3, [r0, #20]
   b90a4:	2b06      	cmp	r3, #6
{
   b90a6:	b08d      	sub	sp, #52	; 0x34
   b90a8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b90aa:	f100 0704 	add.w	r7, r0, #4
   b90ae:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b90b2:	d012      	beq.n	b90da <_ZNK9IPAddress7printToER5Print+0x3a>
   b90b4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b90b8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b90bc:	220a      	movs	r2, #10
   b90be:	4630      	mov	r0, r6
   b90c0:	f000 f973 	bl	b93aa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b90c4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b90c6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b90c8:	d019      	beq.n	b90fe <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b90ca:	2c00      	cmp	r4, #0
   b90cc:	d0f4      	beq.n	b90b8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b90ce:	212e      	movs	r1, #46	; 0x2e
   b90d0:	4630      	mov	r0, r6
   b90d2:	f000 f951 	bl	b9378 <_ZN5Print5printEc>
   b90d6:	4404      	add	r4, r0
   b90d8:	e7ee      	b.n	b90b8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b90da:	232f      	movs	r3, #47	; 0x2f
   b90dc:	466a      	mov	r2, sp
   b90de:	4639      	mov	r1, r7
   b90e0:	200a      	movs	r0, #10
		buf[0] = 0;
   b90e2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b90e6:	f7fe fc0d 	bl	b7904 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b90ea:	4668      	mov	r0, sp
   b90ec:	f002 f8b0 	bl	bb250 <strlen>
   b90f0:	6833      	ldr	r3, [r6, #0]
   b90f2:	4602      	mov	r2, r0
   b90f4:	68db      	ldr	r3, [r3, #12]
   b90f6:	4669      	mov	r1, sp
   b90f8:	4630      	mov	r0, r6
   b90fa:	4798      	blx	r3
   b90fc:	4604      	mov	r4, r0
    }
    return n;
}
   b90fe:	4620      	mov	r0, r4
   b9100:	b00d      	add	sp, #52	; 0x34
   b9102:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9104 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b9104:	b510      	push	{r4, lr}
   b9106:	4b05      	ldr	r3, [pc, #20]	; (b911c <_ZN9IPAddressC1Ev+0x18>)
   b9108:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b910a:	2211      	movs	r2, #17
   b910c:	f840 3b04 	str.w	r3, [r0], #4
   b9110:	2100      	movs	r1, #0
   b9112:	f002 f855 	bl	bb1c0 <memset>
}
   b9116:	4620      	mov	r0, r4
   b9118:	bd10      	pop	{r4, pc}
   b911a:	bf00      	nop
   b911c:	000bd968 	.word	0x000bd968

000b9120 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b9120:	4603      	mov	r3, r0
   b9122:	4a07      	ldr	r2, [pc, #28]	; (b9140 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b9124:	b510      	push	{r4, lr}
   b9126:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b912a:	f101 0210 	add.w	r2, r1, #16
   b912e:	f851 4b04 	ldr.w	r4, [r1], #4
   b9132:	f843 4b04 	str.w	r4, [r3], #4
   b9136:	4291      	cmp	r1, r2
   b9138:	d1f9      	bne.n	b912e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b913a:	780a      	ldrb	r2, [r1, #0]
   b913c:	701a      	strb	r2, [r3, #0]
}
   b913e:	bd10      	pop	{r4, pc}
   b9140:	000bd968 	.word	0x000bd968

000b9144 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b9144:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b9146:	2b04      	cmp	r3, #4
   b9148:	d104      	bne.n	b9154 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b914a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b914c:	3800      	subs	r0, #0
   b914e:	bf18      	it	ne
   b9150:	2001      	movne	r0, #1
   b9152:	4770      	bx	lr
    } else if (version() == 6) {
   b9154:	2b06      	cmp	r3, #6
   b9156:	d107      	bne.n	b9168 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b9158:	6843      	ldr	r3, [r0, #4]
   b915a:	b93b      	cbnz	r3, b916c <_ZNK9IPAddresscvbEv+0x28>
   b915c:	6883      	ldr	r3, [r0, #8]
   b915e:	b92b      	cbnz	r3, b916c <_ZNK9IPAddresscvbEv+0x28>
   b9160:	68c3      	ldr	r3, [r0, #12]
   b9162:	b91b      	cbnz	r3, b916c <_ZNK9IPAddresscvbEv+0x28>
   b9164:	6900      	ldr	r0, [r0, #16]
   b9166:	e7f1      	b.n	b914c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b9168:	2000      	movs	r0, #0
   b916a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b916c:	2001      	movs	r0, #1
}
   b916e:	4770      	bx	lr

000b9170 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b9170:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b9172:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b9176:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b917a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b917e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b9182:	2304      	movs	r3, #4
   b9184:	6041      	str	r1, [r0, #4]
   b9186:	7503      	strb	r3, [r0, #20]
}
   b9188:	bd10      	pop	{r4, pc}
	...

000b918c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b918c:	b507      	push	{r0, r1, r2, lr}
   b918e:	4b06      	ldr	r3, [pc, #24]	; (b91a8 <_ZN9IPAddressC1EPKh+0x1c>)
   b9190:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b9192:	78cb      	ldrb	r3, [r1, #3]
   b9194:	9300      	str	r3, [sp, #0]
   b9196:	788b      	ldrb	r3, [r1, #2]
   b9198:	784a      	ldrb	r2, [r1, #1]
   b919a:	7809      	ldrb	r1, [r1, #0]
   b919c:	f7ff ffe8 	bl	b9170 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b91a0:	b003      	add	sp, #12
   b91a2:	f85d fb04 	ldr.w	pc, [sp], #4
   b91a6:	bf00      	nop
   b91a8:	000bd968 	.word	0x000bd968

000b91ac <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b91ac:	4b01      	ldr	r3, [pc, #4]	; (b91b4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b91ae:	4a02      	ldr	r2, [pc, #8]	; (b91b8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b91b0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b91b2:	4770      	bx	lr
   b91b4:	2003e6d0 	.word	0x2003e6d0
   b91b8:	000bd974 	.word	0x000bd974

000b91bc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b91bc:	2300      	movs	r3, #0
   b91be:	6840      	ldr	r0, [r0, #4]
   b91c0:	461a      	mov	r2, r3
   b91c2:	f7fe bca3 	b.w	b7b0c <network_connect>

000b91c6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b91c6:	6840      	ldr	r0, [r0, #4]
   b91c8:	2200      	movs	r2, #0
   b91ca:	2102      	movs	r1, #2
   b91cc:	f7fe bcae 	b.w	b7b2c <network_disconnect>

000b91d0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b91d0:	2200      	movs	r2, #0
   b91d2:	6840      	ldr	r0, [r0, #4]
   b91d4:	4611      	mov	r1, r2
   b91d6:	f7fe bca1 	b.w	b7b1c <network_connecting>

000b91da <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b91da:	2200      	movs	r2, #0
   b91dc:	6840      	ldr	r0, [r0, #4]
   b91de:	4611      	mov	r1, r2
   b91e0:	f7fe bcac 	b.w	b7b3c <network_ready>

000b91e4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b91e4:	2300      	movs	r3, #0
   b91e6:	6840      	ldr	r0, [r0, #4]
   b91e8:	461a      	mov	r2, r3
   b91ea:	4619      	mov	r1, r3
   b91ec:	f7fe bcae 	b.w	b7b4c <network_on>

000b91f0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b91f0:	2300      	movs	r3, #0
   b91f2:	6840      	ldr	r0, [r0, #4]
   b91f4:	461a      	mov	r2, r3
   b91f6:	4619      	mov	r1, r3
   b91f8:	f7fe bcb0 	b.w	b7b5c <network_off>

000b91fc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b91fc:	6840      	ldr	r0, [r0, #4]
   b91fe:	2100      	movs	r1, #0
   b9200:	f7fe bcec 	b.w	b7bdc <network_is_on>

000b9204 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b9204:	6840      	ldr	r0, [r0, #4]
   b9206:	2100      	movs	r1, #0
   b9208:	f7fe bcf0 	b.w	b7bec <network_is_off>

000b920c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b920c:	6840      	ldr	r0, [r0, #4]
   b920e:	2200      	movs	r2, #0
   b9210:	f081 0101 	eor.w	r1, r1, #1
   b9214:	f7fe bcaa 	b.w	b7b6c <network_listen>

000b9218 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9218:	6840      	ldr	r0, [r0, #4]
   b921a:	2200      	movs	r2, #0
   b921c:	f7fe bcce 	b.w	b7bbc <network_set_listen_timeout>

000b9220 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b9220:	2200      	movs	r2, #0
   b9222:	6840      	ldr	r0, [r0, #4]
   b9224:	4611      	mov	r1, r2
   b9226:	f7fe bcd1 	b.w	b7bcc <network_get_listen_timeout>

000b922a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b922a:	2200      	movs	r2, #0
   b922c:	6840      	ldr	r0, [r0, #4]
   b922e:	4611      	mov	r1, r2
   b9230:	f7fe bca4 	b.w	b7b7c <network_listening>

000b9234 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b9234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9238:	b095      	sub	sp, #84	; 0x54
   b923a:	4614      	mov	r4, r2
   b923c:	460d      	mov	r5, r1
   b923e:	4607      	mov	r7, r0
    IPAddress addr;
   b9240:	f7ff ff60 	bl	b9104 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b9244:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b9246:	221c      	movs	r2, #28
   b9248:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b924a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b924c:	f001 ffb8 	bl	bb1c0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b9250:	2340      	movs	r3, #64	; 0x40
   b9252:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b9254:	4620      	mov	r0, r4
   b9256:	466b      	mov	r3, sp
   b9258:	aa0c      	add	r2, sp, #48	; 0x30
   b925a:	2100      	movs	r1, #0
   b925c:	f7fe fb72 	bl	b7944 <netdb_getaddrinfo>
    if (!r) {
   b9260:	4604      	mov	r4, r0
   b9262:	2800      	cmp	r0, #0
   b9264:	d14b      	bne.n	b92fe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9266:	4602      	mov	r2, r0
   b9268:	2101      	movs	r1, #1
   b926a:	6868      	ldr	r0, [r5, #4]
   b926c:	f7fe fc66 	bl	b7b3c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9270:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9272:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9274:	4622      	mov	r2, r4
   b9276:	6868      	ldr	r0, [r5, #4]
   b9278:	f7fe fc60 	bl	b7b3c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b927c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b927e:	4681      	mov	r9, r0
        bool ok = false;
   b9280:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9282:	2e00      	cmp	r6, #0
   b9284:	d03b      	beq.n	b92fe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b9286:	2900      	cmp	r1, #0
   b9288:	d139      	bne.n	b92fe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b928a:	6873      	ldr	r3, [r6, #4]
   b928c:	2b02      	cmp	r3, #2
   b928e:	d003      	beq.n	b9298 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b9290:	2b0a      	cmp	r3, #10
   b9292:	d011      	beq.n	b92b8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9294:	69f6      	ldr	r6, [r6, #28]
   b9296:	e7f4      	b.n	b9282 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b9298:	f1b8 0f00 	cmp.w	r8, #0
   b929c:	d0fa      	beq.n	b9294 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b929e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b92a0:	a806      	add	r0, sp, #24
   b92a2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b92a4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b92a6:	f7ff ff71 	bl	b918c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b92aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b92ac:	1d3c      	adds	r4, r7, #4
   b92ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b92b0:	682b      	ldr	r3, [r5, #0]
   b92b2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b92b4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b92b6:	e7ed      	b.n	b9294 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b92b8:	f1b9 0f00 	cmp.w	r9, #0
   b92bc:	d0ea      	beq.n	b9294 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b92be:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b92c0:	2210      	movs	r2, #16
   b92c2:	a801      	add	r0, sp, #4
   b92c4:	f001 ff7c 	bl	bb1c0 <memset>
                    a.v = 6;
   b92c8:	2306      	movs	r3, #6
   b92ca:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b92ce:	ad01      	add	r5, sp, #4
   b92d0:	f104 0308 	add.w	r3, r4, #8
   b92d4:	3418      	adds	r4, #24
   b92d6:	6818      	ldr	r0, [r3, #0]
   b92d8:	6859      	ldr	r1, [r3, #4]
   b92da:	462a      	mov	r2, r5
   b92dc:	c203      	stmia	r2!, {r0, r1}
   b92de:	3308      	adds	r3, #8
   b92e0:	42a3      	cmp	r3, r4
   b92e2:	4615      	mov	r5, r2
   b92e4:	d1f7      	bne.n	b92d6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b92e6:	a901      	add	r1, sp, #4
   b92e8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b92ea:	ad07      	add	r5, sp, #28
   b92ec:	f7ff ff18 	bl	b9120 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b92f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b92f2:	1d3c      	adds	r4, r7, #4
   b92f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b92f6:	682b      	ldr	r3, [r5, #0]
   b92f8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b92fa:	4649      	mov	r1, r9
   b92fc:	e7ca      	b.n	b9294 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b92fe:	9800      	ldr	r0, [sp, #0]
   b9300:	f7fe fb18 	bl	b7934 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b9304:	4638      	mov	r0, r7
   b9306:	b015      	add	sp, #84	; 0x54
   b9308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b930c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b930c:	4b02      	ldr	r3, [pc, #8]	; (b9318 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b930e:	4a03      	ldr	r2, [pc, #12]	; (b931c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b9310:	601a      	str	r2, [r3, #0]
   b9312:	2200      	movs	r2, #0
   b9314:	605a      	str	r2, [r3, #4]

} // spark
   b9316:	4770      	bx	lr
   b9318:	2003e6d4 	.word	0x2003e6d4
   b931c:	000bd980 	.word	0x000bd980

000b9320 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b9320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9322:	4606      	mov	r6, r0
   b9324:	460d      	mov	r5, r1
  size_t n = 0;
   b9326:	188f      	adds	r7, r1, r2
   b9328:	2400      	movs	r4, #0
  while (size--) {
   b932a:	42bd      	cmp	r5, r7
   b932c:	d00c      	beq.n	b9348 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b932e:	6833      	ldr	r3, [r6, #0]
   b9330:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9334:	689b      	ldr	r3, [r3, #8]
   b9336:	4630      	mov	r0, r6
   b9338:	4798      	blx	r3
     if (chunk>=0)
   b933a:	1e03      	subs	r3, r0, #0
   b933c:	db01      	blt.n	b9342 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b933e:	441c      	add	r4, r3
  while (size--) {
   b9340:	e7f3      	b.n	b932a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b9342:	2c00      	cmp	r4, #0
   b9344:	bf08      	it	eq
   b9346:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b9348:	4620      	mov	r0, r4
   b934a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b934c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b934c:	b513      	push	{r0, r1, r4, lr}
   b934e:	4604      	mov	r4, r0
    }
   b9350:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b9352:	b159      	cbz	r1, b936c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b9354:	9101      	str	r1, [sp, #4]
   b9356:	f001 ff7b 	bl	bb250 <strlen>
   b935a:	6823      	ldr	r3, [r4, #0]
   b935c:	9901      	ldr	r1, [sp, #4]
   b935e:	68db      	ldr	r3, [r3, #12]
   b9360:	4602      	mov	r2, r0
   b9362:	4620      	mov	r0, r4
    }
   b9364:	b002      	add	sp, #8
   b9366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b936a:	4718      	bx	r3
    }
   b936c:	b002      	add	sp, #8
   b936e:	bd10      	pop	{r4, pc}

000b9370 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b9370:	b508      	push	{r3, lr}
  return write(str);
   b9372:	f7ff ffeb 	bl	b934c <_ZN5Print5writeEPKc>
}
   b9376:	bd08      	pop	{r3, pc}

000b9378 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b9378:	6803      	ldr	r3, [r0, #0]
   b937a:	689b      	ldr	r3, [r3, #8]
   b937c:	4718      	bx	r3

000b937e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b937e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b9380:	210d      	movs	r1, #13
{
   b9382:	4605      	mov	r5, r0
  size_t n = print('\r');
   b9384:	f7ff fff8 	bl	b9378 <_ZN5Print5printEc>
  n += print('\n');
   b9388:	210a      	movs	r1, #10
  size_t n = print('\r');
   b938a:	4604      	mov	r4, r0
  n += print('\n');
   b938c:	4628      	mov	r0, r5
   b938e:	f7ff fff3 	bl	b9378 <_ZN5Print5printEc>
  return n;
}
   b9392:	4420      	add	r0, r4
   b9394:	bd38      	pop	{r3, r4, r5, pc}

000b9396 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b9396:	b538      	push	{r3, r4, r5, lr}
   b9398:	4605      	mov	r5, r0
  return write(str);
   b939a:	f7ff ffd7 	bl	b934c <_ZN5Print5writeEPKc>
   b939e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b93a0:	4628      	mov	r0, r5
   b93a2:	f7ff ffec 	bl	b937e <_ZN5Print7printlnEv>
  return n;
}
   b93a6:	4420      	add	r0, r4
   b93a8:	bd38      	pop	{r3, r4, r5, pc}

000b93aa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b93aa:	b530      	push	{r4, r5, lr}
   b93ac:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b93ae:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b93b0:	2a01      	cmp	r2, #1
  *str = '\0';
   b93b2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b93b6:	bf98      	it	ls
   b93b8:	220a      	movls	r2, #10
   b93ba:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b93bc:	460d      	mov	r5, r1
   b93be:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b93c2:	fb01 5312 	mls	r3, r1, r2, r5
   b93c6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b93ca:	2b09      	cmp	r3, #9
   b93cc:	bf94      	ite	ls
   b93ce:	3330      	addls	r3, #48	; 0x30
   b93d0:	3337      	addhi	r3, #55	; 0x37
   b93d2:	b2db      	uxtb	r3, r3
  } while(n);
   b93d4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b93d6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b93da:	d9ef      	bls.n	b93bc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b93dc:	4621      	mov	r1, r4
   b93de:	f7ff ffb5 	bl	b934c <_ZN5Print5writeEPKc>
}
   b93e2:	b00b      	add	sp, #44	; 0x2c
   b93e4:	bd30      	pop	{r4, r5, pc}

000b93e6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b93e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b93ea:	b086      	sub	sp, #24
   b93ec:	af00      	add	r7, sp, #0
   b93ee:	4605      	mov	r5, r0
   b93f0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b93f2:	1d38      	adds	r0, r7, #4
   b93f4:	2114      	movs	r1, #20
{
   b93f6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b93f8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b93fa:	f7fe fc1f 	bl	b7c3c <vsnprintf>

    if (n<bufsize)
   b93fe:	2813      	cmp	r0, #19
   b9400:	d80e      	bhi.n	b9420 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b9402:	1d39      	adds	r1, r7, #4
   b9404:	4628      	mov	r0, r5
   b9406:	f7ff ffa1 	bl	b934c <_ZN5Print5writeEPKc>
   b940a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b940c:	b11e      	cbz	r6, b9416 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b940e:	4628      	mov	r0, r5
   b9410:	f7ff ffb5 	bl	b937e <_ZN5Print7printlnEv>
   b9414:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b9416:	4620      	mov	r0, r4
   b9418:	3718      	adds	r7, #24
   b941a:	46bd      	mov	sp, r7
   b941c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b9420:	f100 0308 	add.w	r3, r0, #8
   b9424:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b9428:	46e8      	mov	r8, sp
        char bigger[n+1];
   b942a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b942e:	4622      	mov	r2, r4
   b9430:	1c41      	adds	r1, r0, #1
   b9432:	683b      	ldr	r3, [r7, #0]
   b9434:	4668      	mov	r0, sp
   b9436:	f7fe fc01 	bl	b7c3c <vsnprintf>
  return write(str);
   b943a:	4669      	mov	r1, sp
   b943c:	4628      	mov	r0, r5
   b943e:	f7ff ff85 	bl	b934c <_ZN5Print5writeEPKc>
   b9442:	4604      	mov	r4, r0
   b9444:	46c5      	mov	sp, r8
   b9446:	e7e1      	b.n	b940c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b9448 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b9448:	4b01      	ldr	r3, [pc, #4]	; (b9450 <_GLOBAL__sub_I_RGB+0x8>)
   b944a:	2200      	movs	r2, #0
   b944c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b944e:	4770      	bx	lr
   b9450:	2003e6dc 	.word	0x2003e6dc

000b9454 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b9454:	b510      	push	{r4, lr}
   b9456:	4604      	mov	r4, r0
{
	free(buffer);
   b9458:	6800      	ldr	r0, [r0, #0]
   b945a:	f7fe fbd7 	bl	b7c0c <free>
}
   b945e:	4620      	mov	r0, r4
   b9460:	bd10      	pop	{r4, pc}

000b9462 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b9462:	b510      	push	{r4, lr}
   b9464:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b9466:	6800      	ldr	r0, [r0, #0]
   b9468:	b108      	cbz	r0, b946e <_ZN6String10invalidateEv+0xc>
   b946a:	f7fe fbcf 	bl	b7c0c <free>
	buffer = NULL;
   b946e:	2300      	movs	r3, #0
	capacity = len = 0;
   b9470:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b9474:	6023      	str	r3, [r4, #0]
}
   b9476:	bd10      	pop	{r4, pc}

000b9478 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b9478:	b538      	push	{r3, r4, r5, lr}
   b947a:	4604      	mov	r4, r0
   b947c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b947e:	6800      	ldr	r0, [r0, #0]
   b9480:	3101      	adds	r1, #1
   b9482:	f7fe fbcb 	bl	b7c1c <realloc>
	if (newbuffer) {
   b9486:	b110      	cbz	r0, b948e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b9488:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b948c:	2001      	movs	r0, #1
	}
	return 0;
}
   b948e:	bd38      	pop	{r3, r4, r5, pc}

000b9490 <_ZN6String7reserveEj>:
{
   b9490:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b9492:	6803      	ldr	r3, [r0, #0]
{
   b9494:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b9496:	b123      	cbz	r3, b94a2 <_ZN6String7reserveEj+0x12>
   b9498:	6843      	ldr	r3, [r0, #4]
   b949a:	428b      	cmp	r3, r1
   b949c:	d301      	bcc.n	b94a2 <_ZN6String7reserveEj+0x12>
   b949e:	2001      	movs	r0, #1
}
   b94a0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b94a2:	4620      	mov	r0, r4
   b94a4:	f7ff ffe8 	bl	b9478 <_ZN6String12changeBufferEj>
   b94a8:	2800      	cmp	r0, #0
   b94aa:	d0f9      	beq.n	b94a0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b94ac:	68a3      	ldr	r3, [r4, #8]
   b94ae:	2b00      	cmp	r3, #0
   b94b0:	d1f5      	bne.n	b949e <_ZN6String7reserveEj+0xe>
   b94b2:	6822      	ldr	r2, [r4, #0]
   b94b4:	7013      	strb	r3, [r2, #0]
   b94b6:	e7f2      	b.n	b949e <_ZN6String7reserveEj+0xe>

000b94b8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b94b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b94ba:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b94bc:	4611      	mov	r1, r2
   b94be:	9201      	str	r2, [sp, #4]
{
   b94c0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b94c2:	f7ff ffe5 	bl	b9490 <_ZN6String7reserveEj>
   b94c6:	9a01      	ldr	r2, [sp, #4]
   b94c8:	b928      	cbnz	r0, b94d6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b94ca:	4620      	mov	r0, r4
   b94cc:	f7ff ffc9 	bl	b9462 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b94d0:	4620      	mov	r0, r4
   b94d2:	b003      	add	sp, #12
   b94d4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b94d6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b94d8:	4629      	mov	r1, r5
   b94da:	6820      	ldr	r0, [r4, #0]
   b94dc:	f001 fe48 	bl	bb170 <memcpy>
	buffer[len] = 0;
   b94e0:	6822      	ldr	r2, [r4, #0]
   b94e2:	68a3      	ldr	r3, [r4, #8]
   b94e4:	2100      	movs	r1, #0
   b94e6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b94e8:	e7f2      	b.n	b94d0 <_ZN6String4copyEPKcj+0x18>

000b94ea <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b94ea:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b94ec:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b94ee:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b94f2:	4604      	mov	r4, r0
	len = 0;
   b94f4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b94f6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b94f8:	b141      	cbz	r1, b950c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b94fa:	4608      	mov	r0, r1
   b94fc:	9101      	str	r1, [sp, #4]
   b94fe:	f001 fea7 	bl	bb250 <strlen>
   b9502:	9901      	ldr	r1, [sp, #4]
   b9504:	4602      	mov	r2, r0
   b9506:	4620      	mov	r0, r4
   b9508:	f7ff ffd6 	bl	b94b8 <_ZN6String4copyEPKcj>
}
   b950c:	4620      	mov	r0, r4
   b950e:	b002      	add	sp, #8
   b9510:	bd10      	pop	{r4, pc}

000b9512 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b9512:	4288      	cmp	r0, r1
{
   b9514:	b510      	push	{r4, lr}
   b9516:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b9518:	d005      	beq.n	b9526 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b951a:	680b      	ldr	r3, [r1, #0]
   b951c:	b12b      	cbz	r3, b952a <_ZN6StringaSERKS_+0x18>
   b951e:	688a      	ldr	r2, [r1, #8]
   b9520:	4619      	mov	r1, r3
   b9522:	f7ff ffc9 	bl	b94b8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b9526:	4620      	mov	r0, r4
   b9528:	bd10      	pop	{r4, pc}
	else invalidate();
   b952a:	f7ff ff9a 	bl	b9462 <_ZN6String10invalidateEv>
   b952e:	e7fa      	b.n	b9526 <_ZN6StringaSERKS_+0x14>

000b9530 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b9530:	b513      	push	{r0, r1, r4, lr}
   b9532:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b9534:	b159      	cbz	r1, b954e <_ZN6StringaSEPKc+0x1e>
   b9536:	4608      	mov	r0, r1
   b9538:	9101      	str	r1, [sp, #4]
   b953a:	f001 fe89 	bl	bb250 <strlen>
   b953e:	9901      	ldr	r1, [sp, #4]
   b9540:	4602      	mov	r2, r0
   b9542:	4620      	mov	r0, r4
   b9544:	f7ff ffb8 	bl	b94b8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b9548:	4620      	mov	r0, r4
   b954a:	b002      	add	sp, #8
   b954c:	bd10      	pop	{r4, pc}
	else invalidate();
   b954e:	f7ff ff88 	bl	b9462 <_ZN6String10invalidateEv>
   b9552:	e7f9      	b.n	b9548 <_ZN6StringaSEPKc+0x18>

000b9554 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b9554:	b510      	push	{r4, lr}
   b9556:	4604      	mov	r4, r0
   b9558:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b955a:	2300      	movs	r3, #0
	capacity = 0;
   b955c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b9560:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b9562:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b9564:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b9566:	a901      	add	r1, sp, #4
   b9568:	f000 fd00 	bl	b9f6c <itoa>
	*this = buf;
   b956c:	a901      	add	r1, sp, #4
   b956e:	4620      	mov	r0, r4
   b9570:	f7ff ffde 	bl	b9530 <_ZN6StringaSEPKc>
}
   b9574:	4620      	mov	r0, r4
   b9576:	b00a      	add	sp, #40	; 0x28
   b9578:	bd10      	pop	{r4, pc}

000b957a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b957a:	b570      	push	{r4, r5, r6, lr}
   b957c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b957e:	460e      	mov	r6, r1
   b9580:	b909      	cbnz	r1, b9586 <_ZN6String6concatEPKcj+0xc>
   b9582:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b9584:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b9586:	b16a      	cbz	r2, b95a4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b9588:	6884      	ldr	r4, [r0, #8]
   b958a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b958c:	4621      	mov	r1, r4
   b958e:	f7ff ff7f 	bl	b9490 <_ZN6String7reserveEj>
   b9592:	2800      	cmp	r0, #0
   b9594:	d0f5      	beq.n	b9582 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b9596:	6828      	ldr	r0, [r5, #0]
   b9598:	68ab      	ldr	r3, [r5, #8]
   b959a:	4631      	mov	r1, r6
   b959c:	4418      	add	r0, r3
   b959e:	f001 fe4f 	bl	bb240 <strcpy>
	len = newlen;
   b95a2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b95a4:	2001      	movs	r0, #1
   b95a6:	e7ed      	b.n	b9584 <_ZN6String6concatEPKcj+0xa>

000b95a8 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b95a8:	688a      	ldr	r2, [r1, #8]
   b95aa:	6809      	ldr	r1, [r1, #0]
   b95ac:	f7ff bfe5 	b.w	b957a <_ZN6String6concatEPKcj>

000b95b0 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b95b0:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b95b2:	2300      	movs	r3, #0
	buf[0] = c;
   b95b4:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b95b8:	2201      	movs	r2, #1
   b95ba:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b95bc:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b95c0:	f7ff ffdb 	bl	b957a <_ZN6String6concatEPKcj>
}
   b95c4:	b003      	add	sp, #12
   b95c6:	f85d fb04 	ldr.w	pc, [sp], #4

000b95ca <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b95ca:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b95cc:	688a      	ldr	r2, [r1, #8]
   b95ce:	6809      	ldr	r1, [r1, #0]
{
   b95d0:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b95d2:	f7ff ffd2 	bl	b957a <_ZN6String6concatEPKcj>
   b95d6:	b910      	cbnz	r0, b95de <_ZplRK15StringSumHelperRK6String+0x14>
   b95d8:	4620      	mov	r0, r4
   b95da:	f7ff ff42 	bl	b9462 <_ZN6String10invalidateEv>
	return a;
}
   b95de:	4620      	mov	r0, r4
   b95e0:	bd10      	pop	{r4, pc}

000b95e2 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b95e2:	6802      	ldr	r2, [r0, #0]
{
   b95e4:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b95e6:	6809      	ldr	r1, [r1, #0]
   b95e8:	b162      	cbz	r2, b9604 <_ZNK6String9compareToERKS_+0x22>
   b95ea:	b941      	cbnz	r1, b95fe <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b95ec:	6880      	ldr	r0, [r0, #8]
   b95ee:	b160      	cbz	r0, b960a <_ZNK6String9compareToERKS_+0x28>
   b95f0:	7810      	ldrb	r0, [r2, #0]
   b95f2:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b95f4:	6898      	ldr	r0, [r3, #8]
   b95f6:	b140      	cbz	r0, b960a <_ZNK6String9compareToERKS_+0x28>
   b95f8:	7809      	ldrb	r1, [r1, #0]
   b95fa:	4248      	negs	r0, r1
   b95fc:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b95fe:	4610      	mov	r0, r2
   b9600:	f001 be14 	b.w	bb22c <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b9604:	2900      	cmp	r1, #0
   b9606:	d1f5      	bne.n	b95f4 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b9608:	4608      	mov	r0, r1
}
   b960a:	4770      	bx	lr

000b960c <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b960c:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b960e:	6882      	ldr	r2, [r0, #8]
   b9610:	688b      	ldr	r3, [r1, #8]
   b9612:	429a      	cmp	r2, r3
   b9614:	d105      	bne.n	b9622 <_ZNK6String6equalsERKS_+0x16>
   b9616:	f7ff ffe4 	bl	b95e2 <_ZNK6String9compareToERKS_>
   b961a:	fab0 f080 	clz	r0, r0
   b961e:	0940      	lsrs	r0, r0, #5
}
   b9620:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b9622:	2000      	movs	r0, #0
   b9624:	e7fc      	b.n	b9620 <_ZNK6String6equalsERKS_+0x14>

000b9626 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   b9626:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b9628:	6882      	ldr	r2, [r0, #8]
   b962a:	b93a      	cbnz	r2, b963c <_ZNK6String6equalsEPKc+0x16>
   b962c:	b121      	cbz	r1, b9638 <_ZNK6String6equalsEPKc+0x12>
   b962e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b9630:	fab0 f080 	clz	r0, r0
   b9634:	0940      	lsrs	r0, r0, #5
   b9636:	e000      	b.n	b963a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b9638:	2001      	movs	r0, #1
}
   b963a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b963c:	6800      	ldr	r0, [r0, #0]
   b963e:	b909      	cbnz	r1, b9644 <_ZNK6String6equalsEPKc+0x1e>
   b9640:	7800      	ldrb	r0, [r0, #0]
   b9642:	e7f5      	b.n	b9630 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b9644:	f001 fdf2 	bl	bb22c <strcmp>
   b9648:	e7f2      	b.n	b9630 <_ZNK6String6equalsEPKc+0xa>

000b964a <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b964a:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b964c:	6883      	ldr	r3, [r0, #8]
   b964e:	4293      	cmp	r3, r2
   b9650:	d907      	bls.n	b9662 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b9652:	6804      	ldr	r4, [r0, #0]
   b9654:	6809      	ldr	r1, [r1, #0]
   b9656:	18a0      	adds	r0, r4, r2
   b9658:	f001 fe22 	bl	bb2a0 <strstr>
	if (found == NULL) return -1;
   b965c:	b108      	cbz	r0, b9662 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b965e:	1b00      	subs	r0, r0, r4
}
   b9660:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b9662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9666:	e7fb      	b.n	b9660 <_ZNK6String7indexOfERKS_j+0x16>

000b9668 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b9668:	2200      	movs	r2, #0
   b966a:	f7ff bfee 	b.w	b964a <_ZNK6String7indexOfERKS_j>
	...

000b9670 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b9670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b9672:	429a      	cmp	r2, r3
{
   b9674:	460f      	mov	r7, r1
   b9676:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b9678:	490c      	ldr	r1, [pc, #48]	; (b96ac <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b967a:	bf88      	it	hi
   b967c:	4613      	movhi	r3, r2
{
   b967e:	4614      	mov	r4, r2
   b9680:	4606      	mov	r6, r0
	if (left > right) {
   b9682:	bf84      	itt	hi
   b9684:	462c      	movhi	r4, r5
   b9686:	461d      	movhi	r5, r3
	String out;
   b9688:	f7ff ff2f 	bl	b94ea <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b968c:	68bb      	ldr	r3, [r7, #8]
   b968e:	42a3      	cmp	r3, r4
   b9690:	d30a      	bcc.n	b96a8 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b9692:	6839      	ldr	r1, [r7, #0]
   b9694:	42ab      	cmp	r3, r5
   b9696:	bf94      	ite	ls
   b9698:	ebc4 0203 	rsbls	r2, r4, r3
   b969c:	ebc4 0205 	rsbhi	r2, r4, r5
   b96a0:	4421      	add	r1, r4
   b96a2:	4630      	mov	r0, r6
   b96a4:	f7ff ff08 	bl	b94b8 <_ZN6String4copyEPKcj>
	return out;
}
   b96a8:	4630      	mov	r0, r6
   b96aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b96ac:	000bd6e6 	.word	0x000bd6e6

000b96b0 <_ZNK6String9substringEj>:
{
   b96b0:	b510      	push	{r4, lr}
   b96b2:	4604      	mov	r4, r0
	return substring(left, len);
   b96b4:	688b      	ldr	r3, [r1, #8]
   b96b6:	f7ff ffdb 	bl	b9670 <_ZNK6String9substringEjj>
}
   b96ba:	4620      	mov	r0, r4
   b96bc:	bd10      	pop	{r4, pc}
	...

000b96c0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b96c0:	4b05      	ldr	r3, [pc, #20]	; (b96d8 <_GLOBAL__sub_I_System+0x18>)
   b96c2:	2202      	movs	r2, #2
   b96c4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b96c6:	4b05      	ldr	r3, [pc, #20]	; (b96dc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b96c8:	4a05      	ldr	r2, [pc, #20]	; (b96e0 <_GLOBAL__sub_I_System+0x20>)
   b96ca:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b96cc:	2000      	movs	r0, #0
   b96ce:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b96d2:	f7fe b9ef 	b.w	b7ab4 <set_system_mode>
   b96d6:	bf00      	nop
   b96d8:	2003e6f8 	.word	0x2003e6f8
   b96dc:	2003e6ec 	.word	0x2003e6ec
   b96e0:	ffff0000 	.word	0xffff0000

000b96e4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b96e4:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b96e6:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b96e8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b96ec:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b96ee:	2201      	movs	r2, #1
   b96f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b96f4:	f10d 0107 	add.w	r1, sp, #7
   b96f8:	47a0      	blx	r4
}
   b96fa:	b002      	add	sp, #8
   b96fc:	bd10      	pop	{r4, pc}

000b96fe <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b96fe:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b9700:	6803      	ldr	r3, [r0, #0]
   b9702:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b9704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9708:	46a4      	mov	ip, r4
}
   b970a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b970e:	4760      	bx	ip

000b9710 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9710:	b513      	push	{r0, r1, r4, lr}
   b9712:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b9714:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9716:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b971a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b971c:	f10d 0107 	add.w	r1, sp, #7
   b9720:	2201      	movs	r2, #1
   b9722:	47a0      	blx	r4
}
   b9724:	b002      	add	sp, #8
   b9726:	bd10      	pop	{r4, pc}

000b9728 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b9728:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b972a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b972c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9730:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9734:	429a      	cmp	r2, r3
int TCPClient::read() {
   b9736:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9738:	d008      	beq.n	b974c <_ZN9TCPClient4readEv+0x24>
   b973a:	6963      	ldr	r3, [r4, #20]
   b973c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9740:	1c51      	adds	r1, r2, #1
   b9742:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b9746:	4413      	add	r3, r2
   b9748:	7918      	ldrb	r0, [r3, #4]
}
   b974a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b974c:	6803      	ldr	r3, [r0, #0]
   b974e:	691b      	ldr	r3, [r3, #16]
   b9750:	4798      	blx	r3
   b9752:	2800      	cmp	r0, #0
   b9754:	d1f1      	bne.n	b973a <_ZN9TCPClient4readEv+0x12>
   b9756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b975a:	e7f6      	b.n	b974a <_ZN9TCPClient4readEv+0x22>

000b975c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b975c:	4770      	bx	lr

000b975e <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b975e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b9760:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b9762:	43c0      	mvns	r0, r0
   b9764:	0fc0      	lsrs	r0, r0, #31
   b9766:	4770      	bx	lr

000b9768 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9768:	4770      	bx	lr
	...

000b976c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b976c:	4b06      	ldr	r3, [pc, #24]	; (b9788 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b976e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9770:	b510      	push	{r4, lr}
   b9772:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9776:	d005      	beq.n	b9784 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9778:	4608      	mov	r0, r1
   b977a:	f000 fd1d 	bl	ba1b8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b977e:	2800      	cmp	r0, #0
   b9780:	bf08      	it	eq
   b9782:	2400      	moveq	r4, #0
      }
   b9784:	4620      	mov	r0, r4
   b9786:	bd10      	pop	{r4, pc}
   b9788:	000bd8bc 	.word	0x000bd8bc

000b978c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b978c:	b510      	push	{r4, lr}
   b978e:	21ac      	movs	r1, #172	; 0xac
   b9790:	4604      	mov	r4, r0
   b9792:	f7fa fc86 	bl	b40a2 <_ZdlPvj>
   b9796:	4620      	mov	r0, r4
   b9798:	bd10      	pop	{r4, pc}

000b979a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b979a:	21ac      	movs	r1, #172	; 0xac
   b979c:	f7fa bc81 	b.w	b40a2 <_ZdlPvj>

000b97a0 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b97a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b97a4:	f04f 0800 	mov.w	r8, #0
   b97a8:	b086      	sub	sp, #24
   b97aa:	461c      	mov	r4, r3
   b97ac:	f8c0 8004 	str.w	r8, [r0, #4]
   b97b0:	4605      	mov	r5, r0
   b97b2:	460e      	mov	r6, r1
   b97b4:	4617      	mov	r7, r2
    struct timeval tv = {};
   b97b6:	4641      	mov	r1, r8
   b97b8:	2210      	movs	r2, #16
   b97ba:	a802      	add	r0, sp, #8
   b97bc:	f001 fd00 	bl	bb1c0 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b97c0:	1c63      	adds	r3, r4, #1
   b97c2:	d009      	beq.n	b97d8 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b97c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b97c8:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b97cc:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b97d0:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b97d4:	435c      	muls	r4, r3
   b97d6:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b97d8:	6968      	ldr	r0, [r5, #20]
   b97da:	2310      	movs	r3, #16
   b97dc:	9300      	str	r3, [sp, #0]
   b97de:	6800      	ldr	r0, [r0, #0]
   b97e0:	ab02      	add	r3, sp, #8
   b97e2:	f241 0205 	movw	r2, #4101	; 0x1005
   b97e6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b97ea:	f7fe f8b3 	bl	b7954 <sock_setsockopt>
    if (ret < 0) {
   b97ee:	2800      	cmp	r0, #0
   b97f0:	da07      	bge.n	b9802 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b97f2:	f7fe fa3b 	bl	b7c6c <__errno>
   b97f6:	6803      	ldr	r3, [r0, #0]
   b97f8:	606b      	str	r3, [r5, #4]
        return 0;
   b97fa:	2000      	movs	r0, #0
}
   b97fc:	b006      	add	sp, #24
   b97fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b9802:	6968      	ldr	r0, [r5, #20]
   b9804:	2300      	movs	r3, #0
   b9806:	6800      	ldr	r0, [r0, #0]
   b9808:	463a      	mov	r2, r7
   b980a:	4631      	mov	r1, r6
   b980c:	f7fe f8c2 	bl	b7994 <sock_send>
    if (ret < 0) {
   b9810:	1e03      	subs	r3, r0, #0
   b9812:	dbee      	blt.n	b97f2 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b9814:	4618      	mov	r0, r3
   b9816:	e7f1      	b.n	b97fc <_ZN9TCPClient5writeEPKhjm+0x5c>

000b9818 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b9818:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b981a:	6984      	ldr	r4, [r0, #24]
   b981c:	4b0a      	ldr	r3, [pc, #40]	; (b9848 <_ZN9TCPClientD1Ev+0x30>)
   b981e:	6003      	str	r3, [r0, #0]
   b9820:	4605      	mov	r5, r0
   b9822:	b17c      	cbz	r4, b9844 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b9824:	6863      	ldr	r3, [r4, #4]
   b9826:	3b01      	subs	r3, #1
   b9828:	6063      	str	r3, [r4, #4]
   b982a:	b95b      	cbnz	r3, b9844 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b982c:	6823      	ldr	r3, [r4, #0]
   b982e:	4620      	mov	r0, r4
   b9830:	689b      	ldr	r3, [r3, #8]
   b9832:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b9834:	68a3      	ldr	r3, [r4, #8]
   b9836:	3b01      	subs	r3, #1
   b9838:	60a3      	str	r3, [r4, #8]
   b983a:	b91b      	cbnz	r3, b9844 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b983c:	6823      	ldr	r3, [r4, #0]
   b983e:	4620      	mov	r0, r4
   b9840:	68db      	ldr	r3, [r3, #12]
   b9842:	4798      	blx	r3
   b9844:	4628      	mov	r0, r5
   b9846:	bd38      	pop	{r3, r4, r5, pc}
   b9848:	000bd9f0 	.word	0x000bd9f0

000b984c <_ZN9TCPClientD0Ev>:
   b984c:	b510      	push	{r4, lr}
   b984e:	4604      	mov	r4, r0
   b9850:	f7ff ffe2 	bl	b9818 <_ZN9TCPClientD1Ev>
   b9854:	4620      	mov	r0, r4
   b9856:	211c      	movs	r1, #28
   b9858:	f7fa fc23 	bl	b40a2 <_ZdlPvj>
   b985c:	4620      	mov	r0, r4
   b985e:	bd10      	pop	{r4, pc}

000b9860 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b9860:	b530      	push	{r4, r5, lr}
   b9862:	b087      	sub	sp, #28
   b9864:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b9866:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b9868:	4668      	mov	r0, sp
   b986a:	f7ff fc8f 	bl	b918c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b986e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9870:	3404      	adds	r4, #4
   b9872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9874:	682b      	ldr	r3, [r5, #0]
   b9876:	7023      	strb	r3, [r4, #0]
    }
   b9878:	b007      	add	sp, #28
   b987a:	bd30      	pop	{r4, r5, pc}

000b987c <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b987c:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b987e:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b9880:	4b05      	ldr	r3, [pc, #20]	; (b9898 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b9882:	4604      	mov	r4, r0
   b9884:	358c      	adds	r5, #140	; 0x8c
   b9886:	f844 3b04 	str.w	r3, [r4], #4
   b988a:	4606      	mov	r6, r0
   b988c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b988e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9890:	682b      	ldr	r3, [r5, #0]
   b9892:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b9894:	4630      	mov	r0, r6
   b9896:	bd70      	pop	{r4, r5, r6, pc}
   b9898:	000bd968 	.word	0x000bd968

000b989c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b989c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b98a0:	4698      	mov	r8, r3
    stop();
   b98a2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b98a4:	b093      	sub	sp, #76	; 0x4c
   b98a6:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b98a8:	2400      	movs	r4, #0
    stop();
   b98aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b98ac:	4606      	mov	r6, r0
   b98ae:	4617      	mov	r7, r2
    stop();
   b98b0:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b98b2:	4628      	mov	r0, r5
   b98b4:	466b      	mov	r3, sp
   b98b6:	4622      	mov	r2, r4
   b98b8:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b98ba:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b98bc:	f7fe f842 	bl	b7944 <netdb_getaddrinfo>
   b98c0:	4605      	mov	r5, r0
   b98c2:	2800      	cmp	r0, #0
   b98c4:	d163      	bne.n	b998e <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b98c6:	9b00      	ldr	r3, [sp, #0]
   b98c8:	2b00      	cmp	r3, #0
   b98ca:	d04b      	beq.n	b9964 <_ZN9TCPClient7connectEPKctm+0xc8>
   b98cc:	695b      	ldr	r3, [r3, #20]
   b98ce:	2b00      	cmp	r3, #0
   b98d0:	d048      	beq.n	b9964 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b98d2:	a806      	add	r0, sp, #24
   b98d4:	f7ff fc16 	bl	b9104 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b98d8:	9b00      	ldr	r3, [sp, #0]
   b98da:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b98dc:	7863      	ldrb	r3, [r4, #1]
   b98de:	2b02      	cmp	r3, #2
   b98e0:	d104      	bne.n	b98ec <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b98e2:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b98e4:	a806      	add	r0, sp, #24
   b98e6:	f7ff ffbb 	bl	b9860 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b98ea:	e026      	b.n	b993a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b98ec:	2b0a      	cmp	r3, #10
   b98ee:	d124      	bne.n	b993a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b98f0:	2211      	movs	r2, #17
   b98f2:	4629      	mov	r1, r5
   b98f4:	a801      	add	r0, sp, #4
   b98f6:	f001 fc63 	bl	bb1c0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b98fa:	68a3      	ldr	r3, [r4, #8]
   b98fc:	2b00      	cmp	r3, #0
   b98fe:	d038      	beq.n	b9972 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9900:	f104 0308 	add.w	r3, r4, #8
   b9904:	f10d 0c04 	add.w	ip, sp, #4
   b9908:	3418      	adds	r4, #24
   b990a:	6818      	ldr	r0, [r3, #0]
   b990c:	6859      	ldr	r1, [r3, #4]
   b990e:	4662      	mov	r2, ip
   b9910:	c203      	stmia	r2!, {r0, r1}
   b9912:	3308      	adds	r3, #8
   b9914:	42a3      	cmp	r3, r4
   b9916:	4694      	mov	ip, r2
   b9918:	d1f7      	bne.n	b990a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b991a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b991c:	a901      	add	r1, sp, #4
   b991e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b9920:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b9924:	f7ff fbfc 	bl	b9120 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9928:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b992c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9930:	ac07      	add	r4, sp, #28
   b9932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9934:	f8dc 3000 	ldr.w	r3, [ip]
   b9938:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b993a:	a806      	add	r0, sp, #24
   b993c:	f7ff fc02 	bl	b9144 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b9940:	b180      	cbz	r0, b9964 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b9942:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b9944:	ad07      	add	r5, sp, #28
   b9946:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b994a:	4b12      	ldr	r3, [pc, #72]	; (b9994 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b994c:	930c      	str	r3, [sp, #48]	; 0x30
   b994e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9950:	ac0d      	add	r4, sp, #52	; 0x34
   b9952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9954:	682b      	ldr	r3, [r5, #0]
   b9956:	7023      	strb	r3, [r4, #0]
   b9958:	463a      	mov	r2, r7
   b995a:	4643      	mov	r3, r8
   b995c:	a90c      	add	r1, sp, #48	; 0x30
   b995e:	4630      	mov	r0, r6
   b9960:	47c8      	blx	r9
   b9962:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b9964:	9800      	ldr	r0, [sp, #0]
   b9966:	f7fd ffe5 	bl	b7934 <netdb_freeaddrinfo>
}
   b996a:	4628      	mov	r0, r5
   b996c:	b013      	add	sp, #76	; 0x4c
   b996e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9972:	68e3      	ldr	r3, [r4, #12]
   b9974:	2b00      	cmp	r3, #0
   b9976:	d1c3      	bne.n	b9900 <_ZN9TCPClient7connectEPKctm+0x64>
   b9978:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b997c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b9980:	f7fd ffc8 	bl	b7914 <inet_htonl>
   b9984:	4581      	cmp	r9, r0
   b9986:	d1bb      	bne.n	b9900 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b9988:	f104 0114 	add.w	r1, r4, #20
   b998c:	e7aa      	b.n	b98e4 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b998e:	4625      	mov	r5, r4
   b9990:	e7e8      	b.n	b9964 <_ZN9TCPClient7connectEPKctm+0xc8>
   b9992:	bf00      	nop
   b9994:	000bd968 	.word	0x000bd968

000b9998 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b9998:	b538      	push	{r3, r4, r5, lr}
   b999a:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b999c:	681a      	ldr	r2, [r3, #0]
   b999e:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b99a0:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b99a2:	da10      	bge.n	b99c6 <_ZN9TCPClient9connectedEv+0x2e>
   b99a4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b99a8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b99ac:	429a      	cmp	r2, r3
   b99ae:	d10a      	bne.n	b99c6 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b99b0:	6803      	ldr	r3, [r0, #0]
   b99b2:	691b      	ldr	r3, [r3, #16]
   b99b4:	4798      	blx	r3
        if (!rv) {
   b99b6:	4604      	mov	r4, r0
   b99b8:	b928      	cbnz	r0, b99c6 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b99ba:	682b      	ldr	r3, [r5, #0]
   b99bc:	4628      	mov	r0, r5
   b99be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b99c0:	4798      	blx	r3
        rv = available();
   b99c2:	4620      	mov	r0, r4
}
   b99c4:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b99c6:	2001      	movs	r0, #1
   b99c8:	e7fc      	b.n	b99c4 <_ZN9TCPClient9connectedEv+0x2c>

000b99ca <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b99ca:	b510      	push	{r4, lr}
   b99cc:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b99ce:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b99d2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b99d6:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b99d8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b99da:	d005      	beq.n	b99e8 <_ZN9TCPClient4peekEv+0x1e>
   b99dc:	6963      	ldr	r3, [r4, #20]
   b99de:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b99e2:	4413      	add	r3, r2
   b99e4:	7918      	ldrb	r0, [r3, #4]
}
   b99e6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b99e8:	6803      	ldr	r3, [r0, #0]
   b99ea:	691b      	ldr	r3, [r3, #16]
   b99ec:	4798      	blx	r3
   b99ee:	2800      	cmp	r0, #0
   b99f0:	d1f4      	bne.n	b99dc <_ZN9TCPClient4peekEv+0x12>
   b99f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b99f6:	e7f6      	b.n	b99e6 <_ZN9TCPClient4peekEv+0x1c>

000b99f8 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b99f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b99fa:	6943      	ldr	r3, [r0, #20]
   b99fc:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b99fe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9a02:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9a06:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9a08:	4605      	mov	r5, r0
   b9a0a:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b9a0c:	d016      	beq.n	b9a3c <_ZN9TCPClient4readEPhj+0x44>
   b9a0e:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b9a10:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b9a14:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b9a18:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b9a1a:	42bc      	cmp	r4, r7
   b9a1c:	bf28      	it	cs
   b9a1e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b9a20:	3304      	adds	r3, #4
   b9a22:	4622      	mov	r2, r4
   b9a24:	4419      	add	r1, r3
   b9a26:	4630      	mov	r0, r6
   b9a28:	f001 fba2 	bl	bb170 <memcpy>
   b9a2c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b9a2e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b9a32:	4423      	add	r3, r4
   b9a34:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b9a38:	4620      	mov	r0, r4
   b9a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b9a3c:	6803      	ldr	r3, [r0, #0]
   b9a3e:	691b      	ldr	r3, [r3, #16]
   b9a40:	4798      	blx	r3
   b9a42:	2800      	cmp	r0, #0
   b9a44:	d1e3      	bne.n	b9a0e <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b9a46:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9a4a:	e7f5      	b.n	b9a38 <_ZN9TCPClient4readEPhj+0x40>

000b9a4c <_ZN9TCPClient12flush_bufferEv>:
   b9a4c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b9a4e:	2300      	movs	r3, #0
   b9a50:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9a54:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b9a56:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b9a5a:	4770      	bx	lr

000b9a5c <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9a60:	461f      	mov	r7, r3
    stop();
   b9a62:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9a64:	460c      	mov	r4, r1
    stop();
   b9a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9a68:	b08a      	sub	sp, #40	; 0x28
   b9a6a:	4605      	mov	r5, r0
   b9a6c:	4616      	mov	r6, r2
    stop();
   b9a6e:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b9a70:	7d23      	ldrb	r3, [r4, #20]
   b9a72:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b9a76:	2b04      	cmp	r3, #4
   b9a78:	bf0c      	ite	eq
   b9a7a:	2002      	moveq	r0, #2
   b9a7c:	200a      	movne	r0, #10
   b9a7e:	2206      	movs	r2, #6
   b9a80:	2101      	movs	r1, #1
   b9a82:	f7fd ff8f 	bl	b79a4 <sock_socket>
   b9a86:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b9a8a:	696b      	ldr	r3, [r5, #20]
   b9a8c:	681b      	ldr	r3, [r3, #0]
   b9a8e:	2b00      	cmp	r3, #0
   b9a90:	da08      	bge.n	b9aa4 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b9a92:	682b      	ldr	r3, [r5, #0]
   b9a94:	4628      	mov	r0, r5
   b9a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9a98:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b9a9a:	4798      	blx	r3
}
   b9a9c:	4620      	mov	r0, r4
   b9a9e:	b00a      	add	sp, #40	; 0x28
   b9aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b9aa4:	4628      	mov	r0, r5
   b9aa6:	f7ff ffd1 	bl	b9a4c <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b9aaa:	b1b7      	cbz	r7, b9ada <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b9aac:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9aae:	a903      	add	r1, sp, #12
   b9ab0:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b9ab2:	9303      	str	r3, [sp, #12]
   b9ab4:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9ab8:	f7fd ff1c 	bl	b78f4 <if_index_to_name>
   b9abc:	2800      	cmp	r0, #0
   b9abe:	d1e8      	bne.n	b9a92 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b9ac0:	6968      	ldr	r0, [r5, #20]
   b9ac2:	2306      	movs	r3, #6
   b9ac4:	9300      	str	r3, [sp, #0]
   b9ac6:	6800      	ldr	r0, [r0, #0]
   b9ac8:	ab03      	add	r3, sp, #12
   b9aca:	f241 020b 	movw	r2, #4107	; 0x100b
   b9ace:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9ad2:	f7fd ff3f 	bl	b7954 <sock_setsockopt>
   b9ad6:	2800      	cmp	r0, #0
   b9ad8:	d1db      	bne.n	b9a92 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b9ada:	221c      	movs	r2, #28
   b9adc:	2100      	movs	r1, #0
   b9ade:	a803      	add	r0, sp, #12
   b9ae0:	f001 fb6e 	bl	bb1c0 <memset>
    if (ip.version() == 4) {
   b9ae4:	7d23      	ldrb	r3, [r4, #20]
   b9ae6:	2b04      	cmp	r3, #4
   b9ae8:	d11d      	bne.n	b9b26 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b9aea:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b9aee:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b9af0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b9af4:	f7fd ff16 	bl	b7924 <inet_htons>
   b9af8:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b9afc:	6860      	ldr	r0, [r4, #4]
   b9afe:	f7fd ff09 	bl	b7914 <inet_htonl>
   b9b02:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b9b04:	696b      	ldr	r3, [r5, #20]
   b9b06:	221c      	movs	r2, #28
   b9b08:	6818      	ldr	r0, [r3, #0]
   b9b0a:	a903      	add	r1, sp, #12
   b9b0c:	f7fd ff32 	bl	b7974 <sock_connect>
   b9b10:	2800      	cmp	r0, #0
   b9b12:	d1be      	bne.n	b9a92 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b9b14:	3404      	adds	r4, #4
   b9b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9b18:	696d      	ldr	r5, [r5, #20]
   b9b1a:	358c      	adds	r5, #140	; 0x8c
   b9b1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9b1e:	6823      	ldr	r3, [r4, #0]
   b9b20:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b9b22:	2401      	movs	r4, #1
   b9b24:	e7ba      	b.n	b9a9c <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b9b26:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b9b2a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b9b2c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b9b30:	f7fd fef8 	bl	b7924 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9b34:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b9b36:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9b3a:	1d23      	adds	r3, r4, #4
   b9b3c:	f104 0714 	add.w	r7, r4, #20
   b9b40:	6818      	ldr	r0, [r3, #0]
   b9b42:	6859      	ldr	r1, [r3, #4]
   b9b44:	4632      	mov	r2, r6
   b9b46:	c203      	stmia	r2!, {r0, r1}
   b9b48:	3308      	adds	r3, #8
   b9b4a:	42bb      	cmp	r3, r7
   b9b4c:	4616      	mov	r6, r2
   b9b4e:	d1f7      	bne.n	b9b40 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b9b50:	e7d8      	b.n	b9b04 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b9b54 <_ZN9TCPClient9availableEv>:
{
   b9b54:	b530      	push	{r4, r5, lr}
   b9b56:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b9b58:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b9b5c:	b08b      	sub	sp, #44	; 0x2c
   b9b5e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b9b60:	b12b      	cbz	r3, b9b6e <_ZN9TCPClient9availableEv+0x1a>
   b9b62:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b9b66:	429a      	cmp	r2, r3
   b9b68:	d101      	bne.n	b9b6e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b9b6a:	f7ff ff6f 	bl	b9a4c <_ZN9TCPClient12flush_bufferEv>
   b9b6e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b9b70:	6808      	ldr	r0, [r1, #0]
   b9b72:	2800      	cmp	r0, #0
   b9b74:	db18      	blt.n	b9ba8 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b9b76:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b9b7a:	2d7f      	cmp	r5, #127	; 0x7f
   b9b7c:	d814      	bhi.n	b9ba8 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b9b7e:	3104      	adds	r1, #4
   b9b80:	2308      	movs	r3, #8
   b9b82:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b9b86:	4429      	add	r1, r5
   b9b88:	f7fd fefc 	bl	b7984 <sock_recv>
            if (ret > 0) {
   b9b8c:	2800      	cmp	r0, #0
   b9b8e:	dd13      	ble.n	b9bb8 <_ZN9TCPClient9availableEv+0x64>
   b9b90:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b9b92:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9b96:	b90a      	cbnz	r2, b9b9c <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b9b98:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b9b9c:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b9b9e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9ba2:	4410      	add	r0, r2
   b9ba4:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b9ba8:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b9baa:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b9bae:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b9bb2:	1ac0      	subs	r0, r0, r3
   b9bb4:	b00b      	add	sp, #44	; 0x2c
   b9bb6:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b9bb8:	f7fe f858 	bl	b7c6c <__errno>
   b9bbc:	6803      	ldr	r3, [r0, #0]
   b9bbe:	2b0b      	cmp	r3, #11
   b9bc0:	d0f2      	beq.n	b9ba8 <_ZN9TCPClient9availableEv+0x54>
   b9bc2:	f7fe f853 	bl	b7c6c <__errno>
   b9bc6:	6803      	ldr	r3, [r0, #0]
   b9bc8:	2b0b      	cmp	r3, #11
   b9bca:	d0ed      	beq.n	b9ba8 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b9bcc:	2320      	movs	r3, #32
   b9bce:	2500      	movs	r5, #0
   b9bd0:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b9bd4:	f7fe f84a 	bl	b7c6c <__errno>
   b9bd8:	6803      	ldr	r3, [r0, #0]
   b9bda:	9301      	str	r3, [sp, #4]
   b9bdc:	4b08      	ldr	r3, [pc, #32]	; (b9c00 <_ZN9TCPClient9availableEv+0xac>)
   b9bde:	4909      	ldr	r1, [pc, #36]	; (b9c04 <_ZN9TCPClient9availableEv+0xb0>)
   b9be0:	9300      	str	r3, [sp, #0]
   b9be2:	aa02      	add	r2, sp, #8
   b9be4:	462b      	mov	r3, r5
   b9be6:	2032      	movs	r0, #50	; 0x32
   b9be8:	f7fd ff5c 	bl	b7aa4 <log_message>
                    sock_close(d_->sock);
   b9bec:	6963      	ldr	r3, [r4, #20]
   b9bee:	6818      	ldr	r0, [r3, #0]
   b9bf0:	f7fd feb8 	bl	b7964 <sock_close>
   b9bf4:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b9bf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9bfa:	601a      	str	r2, [r3, #0]
   b9bfc:	e7d4      	b.n	b9ba8 <_ZN9TCPClient9availableEv+0x54>
   b9bfe:	bf00      	nop
   b9c00:	000bd9bb 	.word	0x000bd9bb
   b9c04:	000bd9b4 	.word	0x000bd9b4

000b9c08 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b9c08:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b9c0a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b9c0c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b9c0e:	6818      	ldr	r0, [r3, #0]
   b9c10:	2800      	cmp	r0, #0
   b9c12:	db01      	blt.n	b9c18 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b9c14:	f7fd fea6 	bl	b7964 <sock_close>
   b9c18:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b9c1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9c1e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b9c20:	6960      	ldr	r0, [r4, #20]
   b9c22:	2211      	movs	r2, #17
   b9c24:	2100      	movs	r1, #0
   b9c26:	308c      	adds	r0, #140	; 0x8c
   b9c28:	f001 faca 	bl	bb1c0 <memset>
    flush_buffer();
   b9c2c:	4620      	mov	r0, r4
}
   b9c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b9c32:	f7ff bf0b 	b.w	b9a4c <_ZN9TCPClient12flush_bufferEv>

000b9c36 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b9c36:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b9c38:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b9c3a:	4604      	mov	r4, r0
          total(0) {
   b9c3c:	6001      	str	r1, [r0, #0]
   b9c3e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b9c42:	3088      	adds	r0, #136	; 0x88
   b9c44:	f7ff fa5e 	bl	b9104 <_ZN9IPAddressC1Ev>
}
   b9c48:	4620      	mov	r0, r4
   b9c4a:	bd10      	pop	{r4, pc}

000b9c4c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b9c4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9c4e:	2300      	movs	r3, #0
   b9c50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9c54:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b9c58:	4a0e      	ldr	r2, [pc, #56]	; (b9c94 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b9c5a:	6103      	str	r3, [r0, #16]
   b9c5c:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9c5e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b9c60:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9c62:	20ac      	movs	r0, #172	; 0xac
   b9c64:	9101      	str	r1, [sp, #4]
   b9c66:	f7fa fa16 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9c6a:	1e05      	subs	r5, r0, #0
   b9c6c:	f105 060c 	add.w	r6, r5, #12
   b9c70:	d008      	beq.n	b9c84 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b9c72:	2301      	movs	r3, #1
   b9c74:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9c78:	4b07      	ldr	r3, [pc, #28]	; (b9c98 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9c7a:	9901      	ldr	r1, [sp, #4]
   b9c7c:	602b      	str	r3, [r5, #0]
   b9c7e:	4630      	mov	r0, r6
   b9c80:	f7ff ffd9 	bl	b9c36 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b9c84:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b9c86:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b9c8a:	f7ff fedf 	bl	b9a4c <_ZN9TCPClient12flush_bufferEv>
}
   b9c8e:	b002      	add	sp, #8
   b9c90:	bd70      	pop	{r4, r5, r6, pc}
   b9c92:	bf00      	nop
   b9c94:	000bd9f0 	.word	0x000bd9f0
   b9c98:	000bd9d4 	.word	0x000bd9d4

000b9c9c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b9c9c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b9c9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b9ca2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b9ca4:	f7ff ffd2 	bl	b9c4c <_ZN9TCPClientC1Ei>
}
   b9ca8:	4620      	mov	r0, r4
   b9caa:	bd10      	pop	{r4, pc}

000b9cac <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b9cac:	b510      	push	{r4, lr}
   b9cae:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b9cb0:	6800      	ldr	r0, [r0, #0]
   b9cb2:	2800      	cmp	r0, #0
   b9cb4:	db01      	blt.n	b9cba <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b9cb6:	f7fd fe55 	bl	b7964 <sock_close>
    }
}
   b9cba:	4620      	mov	r0, r4
   b9cbc:	bd10      	pop	{r4, pc}

000b9cbe <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b9cbe:	300c      	adds	r0, #12
   b9cc0:	f7ff bff4 	b.w	b9cac <_ZN9TCPClient4DataD1Ev>

000b9cc4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9cc4:	4b02      	ldr	r3, [pc, #8]	; (b9cd0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b9cc6:	681a      	ldr	r2, [r3, #0]
   b9cc8:	4b02      	ldr	r3, [pc, #8]	; (b9cd4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b9cca:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9ccc:	4770      	bx	lr
   b9cce:	bf00      	nop
   b9cd0:	200352f4 	.word	0x200352f4
   b9cd4:	2003e6fc 	.word	0x2003e6fc

000b9cd8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b9cd8:	4770      	bx	lr

000b9cda <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9cda:	7441      	strb	r1, [r0, #17]
}
   b9cdc:	4770      	bx	lr

000b9cde <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b9cde:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b9ce0:	7c00      	ldrb	r0, [r0, #16]
   b9ce2:	f7fd fe8f 	bl	b7a04 <hal_usart_available_data_for_write>
}
   b9ce6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9cea:	bd08      	pop	{r3, pc}

000b9cec <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b9cec:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b9cee:	7c00      	ldrb	r0, [r0, #16]
   b9cf0:	f7fd fe68 	bl	b79c4 <hal_usart_available>
}
   b9cf4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9cf8:	bd08      	pop	{r3, pc}

000b9cfa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b9cfa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b9cfc:	7c00      	ldrb	r0, [r0, #16]
   b9cfe:	f7fd fe71 	bl	b79e4 <hal_usart_peek>
}
   b9d02:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9d06:	bd08      	pop	{r3, pc}

000b9d08 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b9d08:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b9d0a:	7c00      	ldrb	r0, [r0, #16]
   b9d0c:	f7fd fe62 	bl	b79d4 <hal_usart_read>
}
   b9d10:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9d14:	bd08      	pop	{r3, pc}

000b9d16 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b9d16:	7c00      	ldrb	r0, [r0, #16]
   b9d18:	f7fd be6c 	b.w	b79f4 <hal_usart_flush>

000b9d1c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b9d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9d1e:	7c45      	ldrb	r5, [r0, #17]
{
   b9d20:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9d22:	b12d      	cbz	r5, b9d30 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b9d24:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b9d26:	b003      	add	sp, #12
   b9d28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b9d2c:	f7fd be42 	b.w	b79b4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9d30:	7c00      	ldrb	r0, [r0, #16]
   b9d32:	9101      	str	r1, [sp, #4]
   b9d34:	f7fd fe66 	bl	b7a04 <hal_usart_available_data_for_write>
   b9d38:	2800      	cmp	r0, #0
   b9d3a:	9901      	ldr	r1, [sp, #4]
   b9d3c:	dcf2      	bgt.n	b9d24 <_ZN11USARTSerial5writeEh+0x8>
}
   b9d3e:	4628      	mov	r0, r5
   b9d40:	b003      	add	sp, #12
   b9d42:	bd30      	pop	{r4, r5, pc}

000b9d44 <_ZN11USARTSerialD0Ev>:
   b9d44:	b510      	push	{r4, lr}
   b9d46:	2114      	movs	r1, #20
   b9d48:	4604      	mov	r4, r0
   b9d4a:	f7fa f9aa 	bl	b40a2 <_ZdlPvj>
   b9d4e:	4620      	mov	r0, r4
   b9d50:	bd10      	pop	{r4, pc}
	...

000b9d54 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b9d54:	b510      	push	{r4, lr}
   b9d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9d5a:	4604      	mov	r4, r0
   b9d5c:	4608      	mov	r0, r1
   b9d5e:	4611      	mov	r1, r2
   b9d60:	2200      	movs	r2, #0
   b9d62:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b9d66:	4b04      	ldr	r3, [pc, #16]	; (b9d78 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b9d68:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9d6a:	2301      	movs	r3, #1
  _serial = serial;
   b9d6c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9d6e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b9d70:	f7fd fe50 	bl	b7a14 <hal_usart_init_ex>
}
   b9d74:	4620      	mov	r0, r4
   b9d76:	bd10      	pop	{r4, pc}
   b9d78:	000bda58 	.word	0x000bda58

000b9d7c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9d7c:	7441      	strb	r1, [r0, #17]
}
   b9d7e:	4770      	bx	lr

000b9d80 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9d80:	4770      	bx	lr

000b9d82 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b9d82:	4770      	bx	lr

000b9d84 <_ZN9USBSerial4readEv>:
{
   b9d84:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b9d86:	2100      	movs	r1, #0
   b9d88:	7c00      	ldrb	r0, [r0, #16]
   b9d8a:	f7fd fe6b 	bl	b7a64 <HAL_USB_USART_Receive_Data>
}
   b9d8e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9d92:	bd08      	pop	{r3, pc}

000b9d94 <_ZN9USBSerial4peekEv>:
{
   b9d94:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b9d96:	2101      	movs	r1, #1
   b9d98:	7c00      	ldrb	r0, [r0, #16]
   b9d9a:	f7fd fe63 	bl	b7a64 <HAL_USB_USART_Receive_Data>
}
   b9d9e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9da2:	bd08      	pop	{r3, pc}

000b9da4 <_ZN9USBSerial17availableForWriteEv>:
{
   b9da4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b9da6:	7c00      	ldrb	r0, [r0, #16]
   b9da8:	f7fd fe54 	bl	b7a54 <HAL_USB_USART_Available_Data_For_Write>
}
   b9dac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9db0:	bd08      	pop	{r3, pc}

000b9db2 <_ZN9USBSerial9availableEv>:
{
   b9db2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b9db4:	7c00      	ldrb	r0, [r0, #16]
   b9db6:	f7fd fe45 	bl	b7a44 <HAL_USB_USART_Available_Data>
}
   b9dba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9dbe:	bd08      	pop	{r3, pc}

000b9dc0 <_ZN9USBSerial5writeEh>:
{
   b9dc0:	b513      	push	{r0, r1, r4, lr}
   b9dc2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9dc4:	7c00      	ldrb	r0, [r0, #16]
{
   b9dc6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9dc8:	f7fd fe44 	bl	b7a54 <HAL_USB_USART_Available_Data_For_Write>
   b9dcc:	2800      	cmp	r0, #0
   b9dce:	9901      	ldr	r1, [sp, #4]
   b9dd0:	dc01      	bgt.n	b9dd6 <_ZN9USBSerial5writeEh+0x16>
   b9dd2:	7c60      	ldrb	r0, [r4, #17]
   b9dd4:	b120      	cbz	r0, b9de0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b9dd6:	7c20      	ldrb	r0, [r4, #16]
   b9dd8:	f7fd fe4c 	bl	b7a74 <HAL_USB_USART_Send_Data>
   b9ddc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b9de0:	b002      	add	sp, #8
   b9de2:	bd10      	pop	{r4, pc}

000b9de4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b9de4:	7c00      	ldrb	r0, [r0, #16]
   b9de6:	f7fd be4d 	b.w	b7a84 <HAL_USB_USART_Flush_Data>

000b9dea <_ZN9USBSerialD0Ev>:
   b9dea:	b510      	push	{r4, lr}
   b9dec:	2114      	movs	r1, #20
   b9dee:	4604      	mov	r4, r0
   b9df0:	f7fa f957 	bl	b40a2 <_ZdlPvj>
   b9df4:	4620      	mov	r0, r4
   b9df6:	bd10      	pop	{r4, pc}

000b9df8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b9df8:	b510      	push	{r4, lr}
   b9dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9dfe:	4604      	mov	r4, r0
   b9e00:	4608      	mov	r0, r1
   b9e02:	2100      	movs	r1, #0
   b9e04:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9e08:	4b04      	ldr	r3, [pc, #16]	; (b9e1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b9e0a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9e0c:	2301      	movs	r3, #1
  _serial = serial;
   b9e0e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9e10:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b9e12:	4611      	mov	r1, r2
   b9e14:	f7fd fe06 	bl	b7a24 <HAL_USB_USART_Init>
}
   b9e18:	4620      	mov	r0, r4
   b9e1a:	bd10      	pop	{r4, pc}
   b9e1c:	000bda88 	.word	0x000bda88

000b9e20 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b9e20:	7c00      	ldrb	r0, [r0, #16]
   b9e22:	2200      	movs	r2, #0
   b9e24:	f7fd be06 	b.w	b7a34 <HAL_USB_USART_Begin>

000b9e28 <_Z19acquireSerialBufferv>:
{
   b9e28:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b9e2a:	2214      	movs	r2, #20
{
   b9e2c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b9e2e:	2100      	movs	r1, #0
   b9e30:	f001 f9c6 	bl	bb1c0 <memset>
}
   b9e34:	4620      	mov	r0, r4
   b9e36:	bd10      	pop	{r4, pc}

000b9e38 <_Z16_fetch_usbserialv>:
{
   b9e38:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9e3a:	4c0f      	ldr	r4, [pc, #60]	; (b9e78 <_Z16_fetch_usbserialv+0x40>)
{
   b9e3c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b9e3e:	a803      	add	r0, sp, #12
   b9e40:	f7ff fff2 	bl	b9e28 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9e44:	7821      	ldrb	r1, [r4, #0]
   b9e46:	f3bf 8f5b 	dmb	ish
   b9e4a:	f011 0101 	ands.w	r1, r1, #1
   b9e4e:	d10f      	bne.n	b9e70 <_Z16_fetch_usbserialv+0x38>
   b9e50:	4620      	mov	r0, r4
   b9e52:	9101      	str	r1, [sp, #4]
   b9e54:	f7fa f927 	bl	b40a6 <__cxa_guard_acquire>
   b9e58:	9901      	ldr	r1, [sp, #4]
   b9e5a:	b148      	cbz	r0, b9e70 <_Z16_fetch_usbserialv+0x38>
   b9e5c:	aa03      	add	r2, sp, #12
   b9e5e:	4807      	ldr	r0, [pc, #28]	; (b9e7c <_Z16_fetch_usbserialv+0x44>)
   b9e60:	f7ff ffca 	bl	b9df8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9e64:	4620      	mov	r0, r4
   b9e66:	f7fa f923 	bl	b40b0 <__cxa_guard_release>
   b9e6a:	4805      	ldr	r0, [pc, #20]	; (b9e80 <_Z16_fetch_usbserialv+0x48>)
   b9e6c:	f001 f966 	bl	bb13c <atexit>
	return _usbserial;
}
   b9e70:	4802      	ldr	r0, [pc, #8]	; (b9e7c <_Z16_fetch_usbserialv+0x44>)
   b9e72:	b008      	add	sp, #32
   b9e74:	bd10      	pop	{r4, pc}
   b9e76:	bf00      	nop
   b9e78:	2003e700 	.word	0x2003e700
   b9e7c:	2003e704 	.word	0x2003e704
   b9e80:	000b9d81 	.word	0x000b9d81

000b9e84 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b9e84:	2200      	movs	r2, #0
   b9e86:	6840      	ldr	r0, [r0, #4]
   b9e88:	4611      	mov	r1, r2
   b9e8a:	f7fd be57 	b.w	b7b3c <network_ready>

000b9e8e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9e8e:	2200      	movs	r2, #0
   b9e90:	6840      	ldr	r0, [r0, #4]
   b9e92:	4611      	mov	r1, r2
   b9e94:	f7fd be72 	b.w	b7b7c <network_listening>

000b9e98 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9e98:	2200      	movs	r2, #0
   b9e9a:	6840      	ldr	r0, [r0, #4]
   b9e9c:	4611      	mov	r1, r2
   b9e9e:	f7fd be95 	b.w	b7bcc <network_get_listen_timeout>

000b9ea2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9ea2:	6840      	ldr	r0, [r0, #4]
   b9ea4:	2200      	movs	r2, #0
   b9ea6:	f7fd be89 	b.w	b7bbc <network_set_listen_timeout>

000b9eaa <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9eaa:	6840      	ldr	r0, [r0, #4]
   b9eac:	2200      	movs	r2, #0
   b9eae:	f081 0101 	eor.w	r1, r1, #1
   b9eb2:	f7fd be5b 	b.w	b7b6c <network_listen>

000b9eb6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9eb6:	2300      	movs	r3, #0
   b9eb8:	6840      	ldr	r0, [r0, #4]
   b9eba:	461a      	mov	r2, r3
   b9ebc:	4619      	mov	r1, r3
   b9ebe:	f7fd be4d 	b.w	b7b5c <network_off>

000b9ec2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9ec2:	2300      	movs	r3, #0
   b9ec4:	6840      	ldr	r0, [r0, #4]
   b9ec6:	461a      	mov	r2, r3
   b9ec8:	4619      	mov	r1, r3
   b9eca:	f7fd be3f 	b.w	b7b4c <network_on>

000b9ece <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9ece:	2200      	movs	r2, #0
   b9ed0:	6840      	ldr	r0, [r0, #4]
   b9ed2:	4611      	mov	r1, r2
   b9ed4:	f7fd be22 	b.w	b7b1c <network_connecting>

000b9ed8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9ed8:	6840      	ldr	r0, [r0, #4]
   b9eda:	2200      	movs	r2, #0
   b9edc:	2102      	movs	r1, #2
   b9ede:	f7fd be25 	b.w	b7b2c <network_disconnect>

000b9ee2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9ee2:	2300      	movs	r3, #0
   b9ee4:	6840      	ldr	r0, [r0, #4]
   b9ee6:	461a      	mov	r2, r3
   b9ee8:	f7fd be10 	b.w	b7b0c <network_connect>

000b9eec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9eec:	4b02      	ldr	r3, [pc, #8]	; (b9ef8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b9eee:	2204      	movs	r2, #4
   b9ef0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b9ef2:	4a02      	ldr	r2, [pc, #8]	; (b9efc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b9ef4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b9ef6:	4770      	bx	lr
   b9ef8:	2003e718 	.word	0x2003e718
   b9efc:	000bdab8 	.word	0x000bdab8

000b9f00 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b9f00:	b510      	push	{r4, lr}
   b9f02:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b9f04:	f001 f9a4 	bl	bb250 <strlen>
   b9f08:	3801      	subs	r0, #1
   b9f0a:	1823      	adds	r3, r4, r0
   b9f0c:	4620      	mov	r0, r4
	while(i<j){
   b9f0e:	4283      	cmp	r3, r0
   b9f10:	d906      	bls.n	b9f20 <_Z11str_reversePc+0x20>
		c = *i;
   b9f12:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b9f14:	7819      	ldrb	r1, [r3, #0]
   b9f16:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b9f1a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b9f1e:	e7f6      	b.n	b9f0e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b9f20:	bd10      	pop	{r4, pc}

000b9f22 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b9f22:	b570      	push	{r4, r5, r6, lr}
   b9f24:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b9f26:	1e91      	subs	r1, r2, #2
   b9f28:	2922      	cmp	r1, #34	; 0x22
   b9f2a:	d81d      	bhi.n	b9f68 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b9f2c:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b9f2e:	b930      	cbnz	r0, b9f3e <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b9f30:	4423      	add	r3, r4
            *ptr++ = '0';
   b9f32:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b9f34:	429d      	cmp	r5, r3
   b9f36:	d210      	bcs.n	b9f5a <ultoa+0x38>
            *ptr++ = '0';
   b9f38:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b9f3c:	e7fa      	b.n	b9f34 <ultoa+0x12>
            result.quot = a/radix;
   b9f3e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b9f42:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b9f46:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b9f48:	2809      	cmp	r0, #9
                *ptr += '0';
   b9f4a:	bf94      	ite	ls
   b9f4c:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b9f4e:	3157      	addhi	r1, #87	; 0x57
   b9f50:	b2c9      	uxtb	r1, r1
   b9f52:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b9f56:	4630      	mov	r0, r6
	while(a){
   b9f58:	e7e9      	b.n	b9f2e <ultoa+0xc>

	*ptr = '\0';
   b9f5a:	2300      	movs	r3, #0
	str_reverse(buffer);
   b9f5c:	4620      	mov	r0, r4
	*ptr = '\0';
   b9f5e:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b9f60:	f7ff ffce 	bl	b9f00 <_Z11str_reversePc>
	return buffer;
   b9f64:	4620      	mov	r0, r4
}
   b9f66:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b9f68:	2000      	movs	r0, #0
   b9f6a:	e7fc      	b.n	b9f66 <ultoa+0x44>

000b9f6c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b9f6c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b9f6e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b9f70:	460c      	mov	r4, r1
   b9f72:	4615      	mov	r5, r2
	if(a<0){
   b9f74:	da0e      	bge.n	b9f94 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b9f76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b9f7a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b9f7e:	bf14      	ite	ne
   b9f80:	4258      	negne	r0, r3
   b9f82:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b9f84:	2301      	movs	r3, #1
		*buffer = '-';
   b9f86:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b9f88:	462a      	mov	r2, r5
   b9f8a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b9f8c:	f7ff ffc9 	bl	b9f22 <ultoa>
	}
	return buffer;
}
   b9f90:	4620      	mov	r0, r4
   b9f92:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b9f94:	2301      	movs	r3, #1
   b9f96:	e7f9      	b.n	b9f8c <itoa+0x20>

000b9f98 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b9f98:	4b01      	ldr	r3, [pc, #4]	; (b9fa0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b9f9a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b9f9c:	4770      	bx	lr
   b9f9e:	bf00      	nop
   b9fa0:	200352fc 	.word	0x200352fc

000b9fa4 <serialEventRun>:
{
   b9fa4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b9fa6:	4b0b      	ldr	r3, [pc, #44]	; (b9fd4 <serialEventRun+0x30>)
   b9fa8:	b143      	cbz	r3, b9fbc <serialEventRun+0x18>
   b9faa:	f7ff ff45 	bl	b9e38 <_Z16_fetch_usbserialv>
   b9fae:	6803      	ldr	r3, [r0, #0]
   b9fb0:	691b      	ldr	r3, [r3, #16]
   b9fb2:	4798      	blx	r3
   b9fb4:	2800      	cmp	r0, #0
   b9fb6:	dd01      	ble.n	b9fbc <serialEventRun+0x18>
        serialEvent();
   b9fb8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b9fbc:	4b06      	ldr	r3, [pc, #24]	; (b9fd8 <serialEventRun+0x34>)
   b9fbe:	b143      	cbz	r3, b9fd2 <serialEventRun+0x2e>
   b9fc0:	f000 f8c8 	bl	ba154 <_Z22__fetch_global_Serial1v>
   b9fc4:	6803      	ldr	r3, [r0, #0]
   b9fc6:	691b      	ldr	r3, [r3, #16]
   b9fc8:	4798      	blx	r3
   b9fca:	2800      	cmp	r0, #0
   b9fcc:	dd01      	ble.n	b9fd2 <serialEventRun+0x2e>
        serialEvent1();
   b9fce:	f3af 8000 	nop.w
}
   b9fd2:	bd08      	pop	{r3, pc}
	...

000b9fdc <_post_loop>:
{
   b9fdc:	b508      	push	{r3, lr}
	serialEventRun();
   b9fde:	f7ff ffe1 	bl	b9fa4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b9fe2:	f7fd fc27 	bl	b7834 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b9fe6:	4b01      	ldr	r3, [pc, #4]	; (b9fec <_post_loop+0x10>)
   b9fe8:	6018      	str	r0, [r3, #0]
}
   b9fea:	bd08      	pop	{r3, pc}
   b9fec:	2003e728 	.word	0x2003e728

000b9ff0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9ff0:	4805      	ldr	r0, [pc, #20]	; (ba008 <_Z33system_initialize_user_backup_ramv+0x18>)
   b9ff2:	4a06      	ldr	r2, [pc, #24]	; (ba00c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9ff4:	4906      	ldr	r1, [pc, #24]	; (ba010 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b9ff6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9ff8:	1a12      	subs	r2, r2, r0
   b9ffa:	f001 f8b9 	bl	bb170 <memcpy>
    __backup_sram_signature = signature;
   b9ffe:	4b05      	ldr	r3, [pc, #20]	; (ba014 <_Z33system_initialize_user_backup_ramv+0x24>)
   ba000:	4a05      	ldr	r2, [pc, #20]	; (ba018 <_Z33system_initialize_user_backup_ramv+0x28>)
   ba002:	601a      	str	r2, [r3, #0]
}
   ba004:	bd08      	pop	{r3, pc}
   ba006:	bf00      	nop
   ba008:	2003f400 	.word	0x2003f400
   ba00c:	2003f404 	.word	0x2003f404
   ba010:	000be004 	.word	0x000be004
   ba014:	2003f400 	.word	0x2003f400
   ba018:	9a271c1e 	.word	0x9a271c1e

000ba01c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   ba01c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba01e:	2300      	movs	r3, #0
   ba020:	9300      	str	r3, [sp, #0]
   ba022:	461a      	mov	r2, r3
   ba024:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba028:	f7fd fd5e 	bl	b7ae8 <system_ctrl_set_result>
}
   ba02c:	b003      	add	sp, #12
   ba02e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba034 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   ba034:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   ba036:	8843      	ldrh	r3, [r0, #2]
   ba038:	2b0a      	cmp	r3, #10
   ba03a:	d008      	beq.n	ba04e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   ba03c:	2b50      	cmp	r3, #80	; 0x50
   ba03e:	d10b      	bne.n	ba058 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   ba040:	4b09      	ldr	r3, [pc, #36]	; (ba068 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   ba042:	681b      	ldr	r3, [r3, #0]
   ba044:	b14b      	cbz	r3, ba05a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   ba046:	b003      	add	sp, #12
   ba048:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   ba04c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   ba04e:	f7ff ffe5 	bl	ba01c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   ba052:	b003      	add	sp, #12
   ba054:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba058:	2300      	movs	r3, #0
   ba05a:	9300      	str	r3, [sp, #0]
   ba05c:	461a      	mov	r2, r3
   ba05e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba062:	f7fd fd41 	bl	b7ae8 <system_ctrl_set_result>
}
   ba066:	e7f4      	b.n	ba052 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   ba068:	2003e724 	.word	0x2003e724

000ba06c <module_user_init_hook>:
{
   ba06c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   ba06e:	4812      	ldr	r0, [pc, #72]	; (ba0b8 <module_user_init_hook+0x4c>)
   ba070:	2100      	movs	r1, #0
   ba072:	f7fd fe0b 	bl	b7c8c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   ba076:	4b11      	ldr	r3, [pc, #68]	; (ba0bc <module_user_init_hook+0x50>)
   ba078:	681a      	ldr	r2, [r3, #0]
   ba07a:	4b11      	ldr	r3, [pc, #68]	; (ba0c0 <module_user_init_hook+0x54>)
   ba07c:	429a      	cmp	r2, r3
   ba07e:	4b11      	ldr	r3, [pc, #68]	; (ba0c4 <module_user_init_hook+0x58>)
   ba080:	bf0c      	ite	eq
   ba082:	2201      	moveq	r2, #1
   ba084:	2200      	movne	r2, #0
   ba086:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   ba088:	d001      	beq.n	ba08e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   ba08a:	f7ff ffb1 	bl	b9ff0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   ba08e:	f7fd fbc1 	bl	b7814 <HAL_RNG_GetRandomNumber>
   ba092:	4604      	mov	r4, r0
    srand(seed);
   ba094:	f001 f89c 	bl	bb1d0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   ba098:	4b0b      	ldr	r3, [pc, #44]	; (ba0c8 <module_user_init_hook+0x5c>)
   ba09a:	b113      	cbz	r3, ba0a2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   ba09c:	4620      	mov	r0, r4
   ba09e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   ba0a2:	2100      	movs	r1, #0
   ba0a4:	4808      	ldr	r0, [pc, #32]	; (ba0c8 <module_user_init_hook+0x5c>)
   ba0a6:	f7fd fd29 	bl	b7afc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   ba0aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   ba0ae:	4807      	ldr	r0, [pc, #28]	; (ba0cc <module_user_init_hook+0x60>)
   ba0b0:	2100      	movs	r1, #0
   ba0b2:	f7fd bd0f 	b.w	b7ad4 <system_ctrl_set_app_request_handler>
   ba0b6:	bf00      	nop
   ba0b8:	000b9f99 	.word	0x000b9f99
   ba0bc:	2003f400 	.word	0x2003f400
   ba0c0:	9a271c1e 	.word	0x9a271c1e
   ba0c4:	2003e720 	.word	0x2003e720
   ba0c8:	00000000 	.word	0x00000000
   ba0cc:	000ba035 	.word	0x000ba035

000ba0d0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba0d0:	4770      	bx	lr
	...

000ba0d4 <_Z19__fetch_global_Wirev>:
{
   ba0d4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba0d6:	4d0e      	ldr	r5, [pc, #56]	; (ba110 <_Z19__fetch_global_Wirev+0x3c>)
   ba0d8:	7829      	ldrb	r1, [r5, #0]
   ba0da:	f3bf 8f5b 	dmb	ish
   ba0de:	f011 0401 	ands.w	r4, r1, #1
{
   ba0e2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba0e4:	d111      	bne.n	ba10a <_Z19__fetch_global_Wirev+0x36>
   ba0e6:	4628      	mov	r0, r5
   ba0e8:	f7f9 ffdd 	bl	b40a6 <__cxa_guard_acquire>
   ba0ec:	b168      	cbz	r0, ba10a <_Z19__fetch_global_Wirev+0x36>
   ba0ee:	a801      	add	r0, sp, #4
   ba0f0:	f7fa fafa 	bl	b46e8 <_Z17acquireWireBufferv>
   ba0f4:	aa01      	add	r2, sp, #4
   ba0f6:	4621      	mov	r1, r4
   ba0f8:	4806      	ldr	r0, [pc, #24]	; (ba114 <_Z19__fetch_global_Wirev+0x40>)
   ba0fa:	f7fe ff77 	bl	b8fec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   ba0fe:	4628      	mov	r0, r5
   ba100:	f7f9 ffd6 	bl	b40b0 <__cxa_guard_release>
   ba104:	4804      	ldr	r0, [pc, #16]	; (ba118 <_Z19__fetch_global_Wirev+0x44>)
   ba106:	f001 f819 	bl	bb13c <atexit>
	return wire;
}
   ba10a:	4802      	ldr	r0, [pc, #8]	; (ba114 <_Z19__fetch_global_Wirev+0x40>)
   ba10c:	b007      	add	sp, #28
   ba10e:	bd30      	pop	{r4, r5, pc}
   ba110:	2003e72c 	.word	0x2003e72c
   ba114:	2003e730 	.word	0x2003e730
   ba118:	000ba0d1 	.word	0x000ba0d1

000ba11c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba11c:	4770      	bx	lr
	...

000ba120 <_Z20acquireSerial1Bufferv>:
{
   ba120:	b538      	push	{r3, r4, r5, lr}
   ba122:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   ba124:	2514      	movs	r5, #20
   ba126:	462a      	mov	r2, r5
   ba128:	2100      	movs	r1, #0
   ba12a:	f001 f849 	bl	bb1c0 <memset>
   ba12e:	8025      	strh	r5, [r4, #0]
   ba130:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba132:	4907      	ldr	r1, [pc, #28]	; (ba150 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   ba134:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba136:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   ba138:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba13a:	f000 f82f 	bl	ba19c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba13e:	4904      	ldr	r1, [pc, #16]	; (ba150 <_Z20acquireSerial1Bufferv+0x30>)
    };
   ba140:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba142:	4628      	mov	r0, r5
   ba144:	f000 f82a 	bl	ba19c <_ZnajRKSt9nothrow_t>
    };
   ba148:	60e0      	str	r0, [r4, #12]
}
   ba14a:	4620      	mov	r0, r4
   ba14c:	bd38      	pop	{r3, r4, r5, pc}
   ba14e:	bf00      	nop
   ba150:	000bdaec 	.word	0x000bdaec

000ba154 <_Z22__fetch_global_Serial1v>:
{
   ba154:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba156:	4d0e      	ldr	r5, [pc, #56]	; (ba190 <_Z22__fetch_global_Serial1v+0x3c>)
   ba158:	7829      	ldrb	r1, [r5, #0]
   ba15a:	f3bf 8f5b 	dmb	ish
   ba15e:	f011 0401 	ands.w	r4, r1, #1
{
   ba162:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba164:	d111      	bne.n	ba18a <_Z22__fetch_global_Serial1v+0x36>
   ba166:	4628      	mov	r0, r5
   ba168:	f7f9 ff9d 	bl	b40a6 <__cxa_guard_acquire>
   ba16c:	b168      	cbz	r0, ba18a <_Z22__fetch_global_Serial1v+0x36>
   ba16e:	a801      	add	r0, sp, #4
   ba170:	f7ff ffd6 	bl	ba120 <_Z20acquireSerial1Bufferv>
   ba174:	aa01      	add	r2, sp, #4
   ba176:	4621      	mov	r1, r4
   ba178:	4806      	ldr	r0, [pc, #24]	; (ba194 <_Z22__fetch_global_Serial1v+0x40>)
   ba17a:	f7ff fdeb 	bl	b9d54 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   ba17e:	4628      	mov	r0, r5
   ba180:	f7f9 ff96 	bl	b40b0 <__cxa_guard_release>
   ba184:	4804      	ldr	r0, [pc, #16]	; (ba198 <_Z22__fetch_global_Serial1v+0x44>)
   ba186:	f000 ffd9 	bl	bb13c <atexit>
    return serial1;
}
   ba18a:	4802      	ldr	r0, [pc, #8]	; (ba194 <_Z22__fetch_global_Serial1v+0x40>)
   ba18c:	b007      	add	sp, #28
   ba18e:	bd30      	pop	{r4, r5, pc}
   ba190:	2003e744 	.word	0x2003e744
   ba194:	2003e748 	.word	0x2003e748
   ba198:	000ba11d 	.word	0x000ba11d

000ba19c <_ZnajRKSt9nothrow_t>:
   ba19c:	f7f9 bf7d 	b.w	b409a <_Znaj>

000ba1a0 <_ZSt17__throw_bad_allocv>:
   ba1a0:	b508      	push	{r3, lr}
   ba1a2:	f7fd fd53 	bl	b7c4c <abort>

000ba1a6 <_ZSt19__throw_logic_errorPKc>:
   ba1a6:	b508      	push	{r3, lr}
   ba1a8:	f7fd fd50 	bl	b7c4c <abort>

000ba1ac <_ZSt20__throw_length_errorPKc>:
   ba1ac:	b508      	push	{r3, lr}
   ba1ae:	f7fd fd4d 	bl	b7c4c <abort>

000ba1b2 <_ZSt25__throw_bad_function_callv>:
   ba1b2:	b508      	push	{r3, lr}
   ba1b4:	f7fd fd4a 	bl	b7c4c <abort>

000ba1b8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   ba1b8:	4901      	ldr	r1, [pc, #4]	; (ba1c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   ba1ba:	f000 b963 	b.w	ba484 <_ZNKSt9type_infoeqERKS_>
   ba1be:	bf00      	nop
   ba1c0:	000bdb08 	.word	0x000bdb08

000ba1c4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   ba1c4:	b10a      	cbz	r2, ba1ca <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   ba1c6:	f000 bfd3 	b.w	bb170 <memcpy>
   ba1ca:	4770      	bx	lr

000ba1cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   ba1cc:	b508      	push	{r3, lr}
   ba1ce:	680b      	ldr	r3, [r1, #0]
   ba1d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   ba1d4:	d302      	bcc.n	ba1dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   ba1d6:	480d      	ldr	r0, [pc, #52]	; (ba20c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   ba1d8:	f7ff ffe8 	bl	ba1ac <_ZSt20__throw_length_errorPKc>
   ba1dc:	4293      	cmp	r3, r2
   ba1de:	d90b      	bls.n	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   ba1e0:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   ba1e4:	ea4f 0042 	mov.w	r0, r2, lsl #1
   ba1e8:	d206      	bcs.n	ba1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   ba1ea:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   ba1ee:	bf2a      	itet	cs
   ba1f0:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   ba1f4:	6008      	strcc	r0, [r1, #0]
   ba1f6:	600b      	strcs	r3, [r1, #0]
   ba1f8:	6808      	ldr	r0, [r1, #0]
   ba1fa:	3001      	adds	r0, #1
   ba1fc:	d501      	bpl.n	ba202 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   ba1fe:	f7ff ffcf 	bl	ba1a0 <_ZSt17__throw_bad_allocv>
   ba202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba206:	f7f9 bf46 	b.w	b4096 <_Znwj>
   ba20a:	bf00      	nop
   ba20c:	000bdb10 	.word	0x000bdb10

000ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   ba210:	f850 3b08 	ldr.w	r3, [r0], #8
   ba214:	4283      	cmp	r3, r0
   ba216:	d002      	beq.n	ba21e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   ba218:	4618      	mov	r0, r3
   ba21a:	f7f9 bf40 	b.w	b409e <_ZdlPv>
   ba21e:	4770      	bx	lr

000ba220 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   ba220:	2a01      	cmp	r2, #1
   ba222:	b410      	push	{r4}
   ba224:	d104      	bne.n	ba230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   ba226:	780a      	ldrb	r2, [r1, #0]
   ba228:	f85d 4b04 	ldr.w	r4, [sp], #4
   ba22c:	7002      	strb	r2, [r0, #0]
   ba22e:	4770      	bx	lr
   ba230:	f85d 4b04 	ldr.w	r4, [sp], #4
   ba234:	f7ff bfc6 	b.w	ba1c4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000ba238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
   ba238:	b508      	push	{r3, lr}
   ba23a:	1a52      	subs	r2, r2, r1
   ba23c:	f7ff fff0 	bl	ba220 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba240:	bd08      	pop	{r3, pc}

000ba242 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   ba242:	b508      	push	{r3, lr}
   ba244:	1a52      	subs	r2, r2, r1
   ba246:	f7ff ffeb 	bl	ba220 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba24a:	bd08      	pop	{r3, pc}

000ba24c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   ba24c:	4288      	cmp	r0, r1
   ba24e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba250:	4604      	mov	r4, r0
   ba252:	460e      	mov	r6, r1
   ba254:	d01e      	beq.n	ba294 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   ba256:	4603      	mov	r3, r0
   ba258:	684d      	ldr	r5, [r1, #4]
   ba25a:	f853 2b08 	ldr.w	r2, [r3], #8
   ba25e:	429a      	cmp	r2, r3
   ba260:	bf14      	ite	ne
   ba262:	6882      	ldrne	r2, [r0, #8]
   ba264:	220f      	moveq	r2, #15
   ba266:	42aa      	cmp	r2, r5
   ba268:	d20a      	bcs.n	ba280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   ba26a:	a901      	add	r1, sp, #4
   ba26c:	9501      	str	r5, [sp, #4]
   ba26e:	f7ff ffad 	bl	ba1cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   ba272:	4607      	mov	r7, r0
   ba274:	4620      	mov	r0, r4
   ba276:	f7ff ffcb 	bl	ba210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   ba27a:	9b01      	ldr	r3, [sp, #4]
   ba27c:	6027      	str	r7, [r4, #0]
   ba27e:	60a3      	str	r3, [r4, #8]
   ba280:	b125      	cbz	r5, ba28c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   ba282:	6831      	ldr	r1, [r6, #0]
   ba284:	6820      	ldr	r0, [r4, #0]
   ba286:	462a      	mov	r2, r5
   ba288:	f7ff ffca 	bl	ba220 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba28c:	6823      	ldr	r3, [r4, #0]
   ba28e:	6065      	str	r5, [r4, #4]
   ba290:	2200      	movs	r2, #0
   ba292:	555a      	strb	r2, [r3, r5]
   ba294:	b003      	add	sp, #12
   ba296:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba298 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   ba298:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   ba29a:	2400      	movs	r4, #0
   ba29c:	2310      	movs	r3, #16
   ba29e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   ba2a2:	6803      	ldr	r3, [r0, #0]
   ba2a4:	4615      	mov	r5, r2
   ba2a6:	699e      	ldr	r6, [r3, #24]
   ba2a8:	6812      	ldr	r2, [r2, #0]
   ba2aa:	466b      	mov	r3, sp
   ba2ac:	e9cd 4400 	strd	r4, r4, [sp]
   ba2b0:	47b0      	blx	r6
   ba2b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba2b6:	f003 0306 	and.w	r3, r3, #6
   ba2ba:	2b06      	cmp	r3, #6
   ba2bc:	bf03      	ittte	eq
   ba2be:	9b00      	ldreq	r3, [sp, #0]
   ba2c0:	602b      	streq	r3, [r5, #0]
   ba2c2:	2001      	moveq	r0, #1
   ba2c4:	4620      	movne	r0, r4
   ba2c6:	b004      	add	sp, #16
   ba2c8:	bd70      	pop	{r4, r5, r6, pc}

000ba2ca <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   ba2ca:	9800      	ldr	r0, [sp, #0]
   ba2cc:	4290      	cmp	r0, r2
   ba2ce:	bf14      	ite	ne
   ba2d0:	2001      	movne	r0, #1
   ba2d2:	2006      	moveq	r0, #6
   ba2d4:	4770      	bx	lr
	...

000ba2d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   ba2d8:	b510      	push	{r4, lr}
   ba2da:	4b03      	ldr	r3, [pc, #12]	; (ba2e8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   ba2dc:	6003      	str	r3, [r0, #0]
   ba2de:	4604      	mov	r4, r0
   ba2e0:	f000 f8cd 	bl	ba47e <_ZNSt9type_infoD1Ev>
   ba2e4:	4620      	mov	r0, r4
   ba2e6:	bd10      	pop	{r4, pc}
   ba2e8:	000bdb60 	.word	0x000bdb60

000ba2ec <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   ba2ec:	b510      	push	{r4, lr}
   ba2ee:	4604      	mov	r4, r0
   ba2f0:	f7ff fff2 	bl	ba2d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba2f4:	4620      	mov	r0, r4
   ba2f6:	2108      	movs	r1, #8
   ba2f8:	f7f9 fed3 	bl	b40a2 <_ZdlPvj>
   ba2fc:	4620      	mov	r0, r4
   ba2fe:	bd10      	pop	{r4, pc}

000ba300 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   ba300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba304:	461f      	mov	r7, r3
   ba306:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   ba30a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   ba30e:	4598      	cmp	r8, r3
   ba310:	4606      	mov	r6, r0
   ba312:	4615      	mov	r5, r2
   ba314:	d107      	bne.n	ba326 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba316:	9907      	ldr	r1, [sp, #28]
   ba318:	f000 f8b4 	bl	ba484 <_ZNKSt9type_infoeqERKS_>
   ba31c:	b118      	cbz	r0, ba326 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba31e:	7165      	strb	r5, [r4, #5]
   ba320:	2000      	movs	r0, #0
   ba322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba326:	4639      	mov	r1, r7
   ba328:	4630      	mov	r0, r6
   ba32a:	f000 f8ab 	bl	ba484 <_ZNKSt9type_infoeqERKS_>
   ba32e:	2800      	cmp	r0, #0
   ba330:	d0f6      	beq.n	ba320 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   ba332:	2301      	movs	r3, #1
   ba334:	f8c4 8000 	str.w	r8, [r4]
   ba338:	7125      	strb	r5, [r4, #4]
   ba33a:	71a3      	strb	r3, [r4, #6]
   ba33c:	e7f0      	b.n	ba320 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000ba33e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   ba33e:	b538      	push	{r3, r4, r5, lr}
   ba340:	4615      	mov	r5, r2
   ba342:	461c      	mov	r4, r3
   ba344:	f000 f89e 	bl	ba484 <_ZNKSt9type_infoeqERKS_>
   ba348:	b120      	cbz	r0, ba354 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   ba34a:	2308      	movs	r3, #8
   ba34c:	60e3      	str	r3, [r4, #12]
   ba34e:	2306      	movs	r3, #6
   ba350:	6025      	str	r5, [r4, #0]
   ba352:	7123      	strb	r3, [r4, #4]
   ba354:	bd38      	pop	{r3, r4, r5, pc}

000ba356 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   ba356:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba358:	4605      	mov	r5, r0
   ba35a:	460c      	mov	r4, r1
   ba35c:	9201      	str	r2, [sp, #4]
   ba35e:	461e      	mov	r6, r3
   ba360:	f000 f890 	bl	ba484 <_ZNKSt9type_infoeqERKS_>
   ba364:	b950      	cbnz	r0, ba37c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba366:	2e03      	cmp	r6, #3
   ba368:	d808      	bhi.n	ba37c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba36a:	6823      	ldr	r3, [r4, #0]
   ba36c:	9a01      	ldr	r2, [sp, #4]
   ba36e:	695b      	ldr	r3, [r3, #20]
   ba370:	4629      	mov	r1, r5
   ba372:	4620      	mov	r0, r4
   ba374:	b002      	add	sp, #8
   ba376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba37a:	4718      	bx	r3
   ba37c:	b002      	add	sp, #8
   ba37e:	bd70      	pop	{r4, r5, r6, pc}

000ba380 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   ba380:	b510      	push	{r4, lr}
   ba382:	4b03      	ldr	r3, [pc, #12]	; (ba390 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   ba384:	6003      	str	r3, [r0, #0]
   ba386:	4604      	mov	r4, r0
   ba388:	f7ff ffa6 	bl	ba2d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba38c:	4620      	mov	r0, r4
   ba38e:	bd10      	pop	{r4, pc}
   ba390:	000bdbc0 	.word	0x000bdbc0

000ba394 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   ba394:	b510      	push	{r4, lr}
   ba396:	4604      	mov	r4, r0
   ba398:	f7ff fff2 	bl	ba380 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   ba39c:	4620      	mov	r0, r4
   ba39e:	210c      	movs	r1, #12
   ba3a0:	f7f9 fe7f 	bl	b40a2 <_ZdlPvj>
   ba3a4:	4620      	mov	r0, r4
   ba3a6:	bd10      	pop	{r4, pc}

000ba3a8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   ba3a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba3aa:	9f08      	ldr	r7, [sp, #32]
   ba3ac:	4297      	cmp	r7, r2
   ba3ae:	4605      	mov	r5, r0
   ba3b0:	460e      	mov	r6, r1
   ba3b2:	4614      	mov	r4, r2
   ba3b4:	d00a      	beq.n	ba3cc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   ba3b6:	68a8      	ldr	r0, [r5, #8]
   ba3b8:	6802      	ldr	r2, [r0, #0]
   ba3ba:	9708      	str	r7, [sp, #32]
   ba3bc:	6a15      	ldr	r5, [r2, #32]
   ba3be:	4631      	mov	r1, r6
   ba3c0:	4622      	mov	r2, r4
   ba3c2:	46ac      	mov	ip, r5
   ba3c4:	b003      	add	sp, #12
   ba3c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   ba3ca:	4760      	bx	ip
   ba3cc:	4619      	mov	r1, r3
   ba3ce:	9301      	str	r3, [sp, #4]
   ba3d0:	f000 f858 	bl	ba484 <_ZNKSt9type_infoeqERKS_>
   ba3d4:	9b01      	ldr	r3, [sp, #4]
   ba3d6:	2800      	cmp	r0, #0
   ba3d8:	d0ed      	beq.n	ba3b6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   ba3da:	2006      	movs	r0, #6
   ba3dc:	b003      	add	sp, #12
   ba3de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba3e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   ba3e0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba3e4:	460d      	mov	r5, r1
   ba3e6:	4619      	mov	r1, r3
   ba3e8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   ba3ec:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   ba3f0:	4681      	mov	r9, r0
   ba3f2:	4617      	mov	r7, r2
   ba3f4:	4698      	mov	r8, r3
   ba3f6:	f000 f845 	bl	ba484 <_ZNKSt9type_infoeqERKS_>
   ba3fa:	b190      	cbz	r0, ba422 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   ba3fc:	2d00      	cmp	r5, #0
   ba3fe:	6034      	str	r4, [r6, #0]
   ba400:	7137      	strb	r7, [r6, #4]
   ba402:	db09      	blt.n	ba418 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   ba404:	1961      	adds	r1, r4, r5
   ba406:	458a      	cmp	sl, r1
   ba408:	bf0c      	ite	eq
   ba40a:	2106      	moveq	r1, #6
   ba40c:	2101      	movne	r1, #1
   ba40e:	71b1      	strb	r1, [r6, #6]
   ba410:	2000      	movs	r0, #0
   ba412:	b001      	add	sp, #4
   ba414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba418:	3502      	adds	r5, #2
   ba41a:	d1f9      	bne.n	ba410 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba41c:	2301      	movs	r3, #1
   ba41e:	71b3      	strb	r3, [r6, #6]
   ba420:	e7f6      	b.n	ba410 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba422:	4554      	cmp	r4, sl
   ba424:	d106      	bne.n	ba434 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba426:	4659      	mov	r1, fp
   ba428:	4648      	mov	r0, r9
   ba42a:	f000 f82b 	bl	ba484 <_ZNKSt9type_infoeqERKS_>
   ba42e:	b108      	cbz	r0, ba434 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba430:	7177      	strb	r7, [r6, #5]
   ba432:	e7ed      	b.n	ba410 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba434:	f8d9 0008 	ldr.w	r0, [r9, #8]
   ba438:	6803      	ldr	r3, [r0, #0]
   ba43a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   ba43e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   ba442:	69dc      	ldr	r4, [r3, #28]
   ba444:	463a      	mov	r2, r7
   ba446:	4643      	mov	r3, r8
   ba448:	4629      	mov	r1, r5
   ba44a:	46a4      	mov	ip, r4
   ba44c:	b001      	add	sp, #4
   ba44e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba452:	4760      	bx	ip

000ba454 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   ba454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba458:	4607      	mov	r7, r0
   ba45a:	460c      	mov	r4, r1
   ba45c:	4615      	mov	r5, r2
   ba45e:	461e      	mov	r6, r3
   ba460:	f7ff ff6d 	bl	ba33e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   ba464:	b948      	cbnz	r0, ba47a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   ba466:	68b8      	ldr	r0, [r7, #8]
   ba468:	6803      	ldr	r3, [r0, #0]
   ba46a:	699f      	ldr	r7, [r3, #24]
   ba46c:	462a      	mov	r2, r5
   ba46e:	4633      	mov	r3, r6
   ba470:	4621      	mov	r1, r4
   ba472:	46bc      	mov	ip, r7
   ba474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba478:	4760      	bx	ip
   ba47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba47e <_ZNSt9type_infoD1Ev>:
   ba47e:	4770      	bx	lr

000ba480 <_ZNKSt9type_info14__is_pointer_pEv>:
   ba480:	2000      	movs	r0, #0
   ba482:	4770      	bx	lr

000ba484 <_ZNKSt9type_infoeqERKS_>:
   ba484:	4281      	cmp	r1, r0
   ba486:	b508      	push	{r3, lr}
   ba488:	d00e      	beq.n	ba4a8 <_ZNKSt9type_infoeqERKS_+0x24>
   ba48a:	6840      	ldr	r0, [r0, #4]
   ba48c:	7803      	ldrb	r3, [r0, #0]
   ba48e:	2b2a      	cmp	r3, #42	; 0x2a
   ba490:	d00c      	beq.n	ba4ac <_ZNKSt9type_infoeqERKS_+0x28>
   ba492:	6849      	ldr	r1, [r1, #4]
   ba494:	780b      	ldrb	r3, [r1, #0]
   ba496:	2b2a      	cmp	r3, #42	; 0x2a
   ba498:	bf08      	it	eq
   ba49a:	3101      	addeq	r1, #1
   ba49c:	f000 fec6 	bl	bb22c <strcmp>
   ba4a0:	fab0 f080 	clz	r0, r0
   ba4a4:	0940      	lsrs	r0, r0, #5
   ba4a6:	bd08      	pop	{r3, pc}
   ba4a8:	2001      	movs	r0, #1
   ba4aa:	e7fc      	b.n	ba4a6 <_ZNKSt9type_infoeqERKS_+0x22>
   ba4ac:	2000      	movs	r0, #0
   ba4ae:	e7fa      	b.n	ba4a6 <_ZNKSt9type_infoeqERKS_+0x22>

000ba4b0 <floorf>:
   ba4b0:	ee10 2a10 	vmov	r2, s0
   ba4b4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   ba4b8:	3b7f      	subs	r3, #127	; 0x7f
   ba4ba:	2b16      	cmp	r3, #22
   ba4bc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   ba4c0:	dc28      	bgt.n	ba514 <floorf+0x64>
   ba4c2:	2b00      	cmp	r3, #0
   ba4c4:	db18      	blt.n	ba4f8 <floorf+0x48>
   ba4c6:	491a      	ldr	r1, [pc, #104]	; (ba530 <floorf+0x80>)
   ba4c8:	4119      	asrs	r1, r3
   ba4ca:	420a      	tst	r2, r1
   ba4cc:	d021      	beq.n	ba512 <floorf+0x62>
   ba4ce:	eddf 7a19 	vldr	s15, [pc, #100]	; ba534 <floorf+0x84>
   ba4d2:	ee70 7a27 	vadd.f32	s15, s0, s15
   ba4d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba4de:	dd18      	ble.n	ba512 <floorf+0x62>
   ba4e0:	2a00      	cmp	r2, #0
   ba4e2:	da04      	bge.n	ba4ee <floorf+0x3e>
   ba4e4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   ba4e8:	fa40 f303 	asr.w	r3, r0, r3
   ba4ec:	441a      	add	r2, r3
   ba4ee:	ea22 0301 	bic.w	r3, r2, r1
   ba4f2:	ee00 3a10 	vmov	s0, r3
   ba4f6:	4770      	bx	lr
   ba4f8:	eddf 7a0e 	vldr	s15, [pc, #56]	; ba534 <floorf+0x84>
   ba4fc:	ee70 7a27 	vadd.f32	s15, s0, s15
   ba500:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba508:	dd03      	ble.n	ba512 <floorf+0x62>
   ba50a:	2a00      	cmp	r2, #0
   ba50c:	db08      	blt.n	ba520 <floorf+0x70>
   ba50e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; ba538 <floorf+0x88>
   ba512:	4770      	bx	lr
   ba514:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   ba518:	d3fb      	bcc.n	ba512 <floorf+0x62>
   ba51a:	ee30 0a00 	vadd.f32	s0, s0, s0
   ba51e:	4770      	bx	lr
   ba520:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   ba524:	2900      	cmp	r1, #0
   ba526:	bf18      	it	ne
   ba528:	eeb0 0a67 	vmovne.f32	s0, s15
   ba52c:	4770      	bx	lr
   ba52e:	bf00      	nop
   ba530:	007fffff 	.word	0x007fffff
   ba534:	7149f2ca 	.word	0x7149f2ca
   ba538:	00000000 	.word	0x00000000

000ba53c <sqrt>:
   ba53c:	b538      	push	{r3, r4, r5, lr}
   ba53e:	ed2d 8b02 	vpush	{d8}
   ba542:	ec55 4b10 	vmov	r4, r5, d0
   ba546:	f000 f833 	bl	ba5b0 <__ieee754_sqrt>
   ba54a:	4b18      	ldr	r3, [pc, #96]	; (ba5ac <sqrt+0x70>)
   ba54c:	eeb0 8a40 	vmov.f32	s16, s0
   ba550:	eef0 8a60 	vmov.f32	s17, s1
   ba554:	f993 3000 	ldrsb.w	r3, [r3]
   ba558:	3301      	adds	r3, #1
   ba55a:	d00d      	beq.n	ba578 <sqrt+0x3c>
   ba55c:	4622      	mov	r2, r4
   ba55e:	462b      	mov	r3, r5
   ba560:	4620      	mov	r0, r4
   ba562:	4629      	mov	r1, r5
   ba564:	f000 fd46 	bl	baff4 <__aeabi_dcmpun>
   ba568:	b930      	cbnz	r0, ba578 <sqrt+0x3c>
   ba56a:	2200      	movs	r2, #0
   ba56c:	2300      	movs	r3, #0
   ba56e:	4620      	mov	r0, r4
   ba570:	4629      	mov	r1, r5
   ba572:	f000 fd17 	bl	bafa4 <__aeabi_dcmplt>
   ba576:	b930      	cbnz	r0, ba586 <sqrt+0x4a>
   ba578:	eeb0 0a48 	vmov.f32	s0, s16
   ba57c:	eef0 0a68 	vmov.f32	s1, s17
   ba580:	ecbd 8b02 	vpop	{d8}
   ba584:	bd38      	pop	{r3, r4, r5, pc}
   ba586:	f7fd fb71 	bl	b7c6c <__errno>
   ba58a:	2200      	movs	r2, #0
   ba58c:	2300      	movs	r3, #0
   ba58e:	2121      	movs	r1, #33	; 0x21
   ba590:	6001      	str	r1, [r0, #0]
   ba592:	4610      	mov	r0, r2
   ba594:	4619      	mov	r1, r3
   ba596:	f000 fbbd 	bl	bad14 <__aeabi_ddiv>
   ba59a:	ec41 0b18 	vmov	d8, r0, r1
   ba59e:	eeb0 0a48 	vmov.f32	s0, s16
   ba5a2:	eef0 0a68 	vmov.f32	s1, s17
   ba5a6:	ecbd 8b02 	vpop	{d8}
   ba5aa:	bd38      	pop	{r3, r4, r5, pc}
   ba5ac:	200352f8 	.word	0x200352f8

000ba5b0 <__ieee754_sqrt>:
   ba5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba5b4:	4a63      	ldr	r2, [pc, #396]	; (ba744 <__ieee754_sqrt+0x194>)
   ba5b6:	ec55 4b10 	vmov	r4, r5, d0
   ba5ba:	43aa      	bics	r2, r5
   ba5bc:	f000 809f 	beq.w	ba6fe <__ieee754_sqrt+0x14e>
   ba5c0:	2d00      	cmp	r5, #0
   ba5c2:	ee10 ca10 	vmov	ip, s0
   ba5c6:	462b      	mov	r3, r5
   ba5c8:	dd54      	ble.n	ba674 <__ieee754_sqrt+0xc4>
   ba5ca:	1529      	asrs	r1, r5, #20
   ba5cc:	d063      	beq.n	ba696 <__ieee754_sqrt+0xe6>
   ba5ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
   ba5d2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   ba5d6:	07c9      	lsls	r1, r1, #31
   ba5d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba5dc:	d404      	bmi.n	ba5e8 <__ieee754_sqrt+0x38>
   ba5de:	005b      	lsls	r3, r3, #1
   ba5e0:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   ba5e4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba5e8:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   ba5ec:	2600      	movs	r6, #0
   ba5ee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   ba5f2:	107f      	asrs	r7, r7, #1
   ba5f4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba5f8:	f04f 0e16 	mov.w	lr, #22
   ba5fc:	4634      	mov	r4, r6
   ba5fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   ba602:	18a1      	adds	r1, r4, r2
   ba604:	4299      	cmp	r1, r3
   ba606:	dc02      	bgt.n	ba60e <__ieee754_sqrt+0x5e>
   ba608:	1a5b      	subs	r3, r3, r1
   ba60a:	188c      	adds	r4, r1, r2
   ba60c:	4416      	add	r6, r2
   ba60e:	005b      	lsls	r3, r3, #1
   ba610:	f1be 0e01 	subs.w	lr, lr, #1
   ba614:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   ba618:	ea4f 0252 	mov.w	r2, r2, lsr #1
   ba61c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba620:	d1ef      	bne.n	ba602 <__ieee754_sqrt+0x52>
   ba622:	4675      	mov	r5, lr
   ba624:	2020      	movs	r0, #32
   ba626:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   ba62a:	e00a      	b.n	ba642 <__ieee754_sqrt+0x92>
   ba62c:	d044      	beq.n	ba6b8 <__ieee754_sqrt+0x108>
   ba62e:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   ba632:	3801      	subs	r0, #1
   ba634:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   ba638:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba63c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   ba640:	d043      	beq.n	ba6ca <__ieee754_sqrt+0x11a>
   ba642:	42a3      	cmp	r3, r4
   ba644:	eb02 010e 	add.w	r1, r2, lr
   ba648:	ddf0      	ble.n	ba62c <__ieee754_sqrt+0x7c>
   ba64a:	2900      	cmp	r1, #0
   ba64c:	eb01 0e02 	add.w	lr, r1, r2
   ba650:	db0a      	blt.n	ba668 <__ieee754_sqrt+0xb8>
   ba652:	46a0      	mov	r8, r4
   ba654:	1b1b      	subs	r3, r3, r4
   ba656:	4561      	cmp	r1, ip
   ba658:	bf88      	it	hi
   ba65a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   ba65e:	ebac 0c01 	sub.w	ip, ip, r1
   ba662:	4415      	add	r5, r2
   ba664:	4644      	mov	r4, r8
   ba666:	e7e2      	b.n	ba62e <__ieee754_sqrt+0x7e>
   ba668:	f1be 0f00 	cmp.w	lr, #0
   ba66c:	dbf1      	blt.n	ba652 <__ieee754_sqrt+0xa2>
   ba66e:	f104 0801 	add.w	r8, r4, #1
   ba672:	e7ef      	b.n	ba654 <__ieee754_sqrt+0xa4>
   ba674:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   ba678:	4322      	orrs	r2, r4
   ba67a:	d038      	beq.n	ba6ee <__ieee754_sqrt+0x13e>
   ba67c:	2d00      	cmp	r5, #0
   ba67e:	d14e      	bne.n	ba71e <__ieee754_sqrt+0x16e>
   ba680:	4629      	mov	r1, r5
   ba682:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   ba686:	3915      	subs	r1, #21
   ba688:	4613      	mov	r3, r2
   ba68a:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   ba68e:	2a00      	cmp	r2, #0
   ba690:	d0f7      	beq.n	ba682 <__ieee754_sqrt+0xd2>
   ba692:	02d6      	lsls	r6, r2, #11
   ba694:	d450      	bmi.n	ba738 <__ieee754_sqrt+0x188>
   ba696:	2000      	movs	r0, #0
   ba698:	005b      	lsls	r3, r3, #1
   ba69a:	02dd      	lsls	r5, r3, #11
   ba69c:	4604      	mov	r4, r0
   ba69e:	f100 0001 	add.w	r0, r0, #1
   ba6a2:	d5f9      	bpl.n	ba698 <__ieee754_sqrt+0xe8>
   ba6a4:	461a      	mov	r2, r3
   ba6a6:	4663      	mov	r3, ip
   ba6a8:	fa0c fc00 	lsl.w	ip, ip, r0
   ba6ac:	f1c0 0020 	rsb	r0, r0, #32
   ba6b0:	40c3      	lsrs	r3, r0
   ba6b2:	1b09      	subs	r1, r1, r4
   ba6b4:	4313      	orrs	r3, r2
   ba6b6:	e78a      	b.n	ba5ce <__ieee754_sqrt+0x1e>
   ba6b8:	4561      	cmp	r1, ip
   ba6ba:	d8b8      	bhi.n	ba62e <__ieee754_sqrt+0x7e>
   ba6bc:	2900      	cmp	r1, #0
   ba6be:	eb01 0e02 	add.w	lr, r1, r2
   ba6c2:	dbd1      	blt.n	ba668 <__ieee754_sqrt+0xb8>
   ba6c4:	4698      	mov	r8, r3
   ba6c6:	2300      	movs	r3, #0
   ba6c8:	e7c9      	b.n	ba65e <__ieee754_sqrt+0xae>
   ba6ca:	ea53 030c 	orrs.w	r3, r3, ip
   ba6ce:	d110      	bne.n	ba6f2 <__ieee754_sqrt+0x142>
   ba6d0:	0868      	lsrs	r0, r5, #1
   ba6d2:	1071      	asrs	r1, r6, #1
   ba6d4:	07f3      	lsls	r3, r6, #31
   ba6d6:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   ba6da:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   ba6de:	bf48      	it	mi
   ba6e0:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   ba6e4:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   ba6e8:	4602      	mov	r2, r0
   ba6ea:	ec43 2b10 	vmov	d0, r2, r3
   ba6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba6f2:	1c6a      	adds	r2, r5, #1
   ba6f4:	bf16      	itet	ne
   ba6f6:	1c68      	addne	r0, r5, #1
   ba6f8:	3601      	addeq	r6, #1
   ba6fa:	0840      	lsrne	r0, r0, #1
   ba6fc:	e7e9      	b.n	ba6d2 <__ieee754_sqrt+0x122>
   ba6fe:	ee10 2a10 	vmov	r2, s0
   ba702:	ee10 0a10 	vmov	r0, s0
   ba706:	462b      	mov	r3, r5
   ba708:	4629      	mov	r1, r5
   ba70a:	f000 f9d9 	bl	baac0 <__aeabi_dmul>
   ba70e:	4622      	mov	r2, r4
   ba710:	462b      	mov	r3, r5
   ba712:	f000 f81f 	bl	ba754 <__adddf3>
   ba716:	ec41 0b10 	vmov	d0, r0, r1
   ba71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba71e:	ee10 2a10 	vmov	r2, s0
   ba722:	4620      	mov	r0, r4
   ba724:	4629      	mov	r1, r5
   ba726:	f000 f813 	bl	ba750 <__aeabi_dsub>
   ba72a:	4602      	mov	r2, r0
   ba72c:	460b      	mov	r3, r1
   ba72e:	f000 faf1 	bl	bad14 <__aeabi_ddiv>
   ba732:	ec41 0b10 	vmov	d0, r0, r1
   ba736:	e7da      	b.n	ba6ee <__ieee754_sqrt+0x13e>
   ba738:	4663      	mov	r3, ip
   ba73a:	2020      	movs	r0, #32
   ba73c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   ba740:	e7b6      	b.n	ba6b0 <__ieee754_sqrt+0x100>
   ba742:	bf00      	nop
   ba744:	7ff00000 	.word	0x7ff00000

000ba748 <__aeabi_drsub>:
   ba748:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   ba74c:	e002      	b.n	ba754 <__adddf3>
   ba74e:	bf00      	nop

000ba750 <__aeabi_dsub>:
   ba750:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000ba754 <__adddf3>:
   ba754:	b530      	push	{r4, r5, lr}
   ba756:	ea4f 0441 	mov.w	r4, r1, lsl #1
   ba75a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   ba75e:	ea94 0f05 	teq	r4, r5
   ba762:	bf08      	it	eq
   ba764:	ea90 0f02 	teqeq	r0, r2
   ba768:	bf1f      	itttt	ne
   ba76a:	ea54 0c00 	orrsne.w	ip, r4, r0
   ba76e:	ea55 0c02 	orrsne.w	ip, r5, r2
   ba772:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   ba776:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba77a:	f000 80e2 	beq.w	ba942 <__adddf3+0x1ee>
   ba77e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   ba782:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   ba786:	bfb8      	it	lt
   ba788:	426d      	neglt	r5, r5
   ba78a:	dd0c      	ble.n	ba7a6 <__adddf3+0x52>
   ba78c:	442c      	add	r4, r5
   ba78e:	ea80 0202 	eor.w	r2, r0, r2
   ba792:	ea81 0303 	eor.w	r3, r1, r3
   ba796:	ea82 0000 	eor.w	r0, r2, r0
   ba79a:	ea83 0101 	eor.w	r1, r3, r1
   ba79e:	ea80 0202 	eor.w	r2, r0, r2
   ba7a2:	ea81 0303 	eor.w	r3, r1, r3
   ba7a6:	2d36      	cmp	r5, #54	; 0x36
   ba7a8:	bf88      	it	hi
   ba7aa:	bd30      	pophi	{r4, r5, pc}
   ba7ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   ba7b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba7b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   ba7b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   ba7bc:	d002      	beq.n	ba7c4 <__adddf3+0x70>
   ba7be:	4240      	negs	r0, r0
   ba7c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba7c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   ba7c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba7cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   ba7d0:	d002      	beq.n	ba7d8 <__adddf3+0x84>
   ba7d2:	4252      	negs	r2, r2
   ba7d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   ba7d8:	ea94 0f05 	teq	r4, r5
   ba7dc:	f000 80a7 	beq.w	ba92e <__adddf3+0x1da>
   ba7e0:	f1a4 0401 	sub.w	r4, r4, #1
   ba7e4:	f1d5 0e20 	rsbs	lr, r5, #32
   ba7e8:	db0d      	blt.n	ba806 <__adddf3+0xb2>
   ba7ea:	fa02 fc0e 	lsl.w	ip, r2, lr
   ba7ee:	fa22 f205 	lsr.w	r2, r2, r5
   ba7f2:	1880      	adds	r0, r0, r2
   ba7f4:	f141 0100 	adc.w	r1, r1, #0
   ba7f8:	fa03 f20e 	lsl.w	r2, r3, lr
   ba7fc:	1880      	adds	r0, r0, r2
   ba7fe:	fa43 f305 	asr.w	r3, r3, r5
   ba802:	4159      	adcs	r1, r3
   ba804:	e00e      	b.n	ba824 <__adddf3+0xd0>
   ba806:	f1a5 0520 	sub.w	r5, r5, #32
   ba80a:	f10e 0e20 	add.w	lr, lr, #32
   ba80e:	2a01      	cmp	r2, #1
   ba810:	fa03 fc0e 	lsl.w	ip, r3, lr
   ba814:	bf28      	it	cs
   ba816:	f04c 0c02 	orrcs.w	ip, ip, #2
   ba81a:	fa43 f305 	asr.w	r3, r3, r5
   ba81e:	18c0      	adds	r0, r0, r3
   ba820:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   ba824:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba828:	d507      	bpl.n	ba83a <__adddf3+0xe6>
   ba82a:	f04f 0e00 	mov.w	lr, #0
   ba82e:	f1dc 0c00 	rsbs	ip, ip, #0
   ba832:	eb7e 0000 	sbcs.w	r0, lr, r0
   ba836:	eb6e 0101 	sbc.w	r1, lr, r1
   ba83a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   ba83e:	d31b      	bcc.n	ba878 <__adddf3+0x124>
   ba840:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   ba844:	d30c      	bcc.n	ba860 <__adddf3+0x10c>
   ba846:	0849      	lsrs	r1, r1, #1
   ba848:	ea5f 0030 	movs.w	r0, r0, rrx
   ba84c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   ba850:	f104 0401 	add.w	r4, r4, #1
   ba854:	ea4f 5244 	mov.w	r2, r4, lsl #21
   ba858:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   ba85c:	f080 809a 	bcs.w	ba994 <__adddf3+0x240>
   ba860:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   ba864:	bf08      	it	eq
   ba866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba86a:	f150 0000 	adcs.w	r0, r0, #0
   ba86e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba872:	ea41 0105 	orr.w	r1, r1, r5
   ba876:	bd30      	pop	{r4, r5, pc}
   ba878:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   ba87c:	4140      	adcs	r0, r0
   ba87e:	eb41 0101 	adc.w	r1, r1, r1
   ba882:	3c01      	subs	r4, #1
   ba884:	bf28      	it	cs
   ba886:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   ba88a:	d2e9      	bcs.n	ba860 <__adddf3+0x10c>
   ba88c:	f091 0f00 	teq	r1, #0
   ba890:	bf04      	itt	eq
   ba892:	4601      	moveq	r1, r0
   ba894:	2000      	moveq	r0, #0
   ba896:	fab1 f381 	clz	r3, r1
   ba89a:	bf08      	it	eq
   ba89c:	3320      	addeq	r3, #32
   ba89e:	f1a3 030b 	sub.w	r3, r3, #11
   ba8a2:	f1b3 0220 	subs.w	r2, r3, #32
   ba8a6:	da0c      	bge.n	ba8c2 <__adddf3+0x16e>
   ba8a8:	320c      	adds	r2, #12
   ba8aa:	dd08      	ble.n	ba8be <__adddf3+0x16a>
   ba8ac:	f102 0c14 	add.w	ip, r2, #20
   ba8b0:	f1c2 020c 	rsb	r2, r2, #12
   ba8b4:	fa01 f00c 	lsl.w	r0, r1, ip
   ba8b8:	fa21 f102 	lsr.w	r1, r1, r2
   ba8bc:	e00c      	b.n	ba8d8 <__adddf3+0x184>
   ba8be:	f102 0214 	add.w	r2, r2, #20
   ba8c2:	bfd8      	it	le
   ba8c4:	f1c2 0c20 	rsble	ip, r2, #32
   ba8c8:	fa01 f102 	lsl.w	r1, r1, r2
   ba8cc:	fa20 fc0c 	lsr.w	ip, r0, ip
   ba8d0:	bfdc      	itt	le
   ba8d2:	ea41 010c 	orrle.w	r1, r1, ip
   ba8d6:	4090      	lslle	r0, r2
   ba8d8:	1ae4      	subs	r4, r4, r3
   ba8da:	bfa2      	ittt	ge
   ba8dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   ba8e0:	4329      	orrge	r1, r5
   ba8e2:	bd30      	popge	{r4, r5, pc}
   ba8e4:	ea6f 0404 	mvn.w	r4, r4
   ba8e8:	3c1f      	subs	r4, #31
   ba8ea:	da1c      	bge.n	ba926 <__adddf3+0x1d2>
   ba8ec:	340c      	adds	r4, #12
   ba8ee:	dc0e      	bgt.n	ba90e <__adddf3+0x1ba>
   ba8f0:	f104 0414 	add.w	r4, r4, #20
   ba8f4:	f1c4 0220 	rsb	r2, r4, #32
   ba8f8:	fa20 f004 	lsr.w	r0, r0, r4
   ba8fc:	fa01 f302 	lsl.w	r3, r1, r2
   ba900:	ea40 0003 	orr.w	r0, r0, r3
   ba904:	fa21 f304 	lsr.w	r3, r1, r4
   ba908:	ea45 0103 	orr.w	r1, r5, r3
   ba90c:	bd30      	pop	{r4, r5, pc}
   ba90e:	f1c4 040c 	rsb	r4, r4, #12
   ba912:	f1c4 0220 	rsb	r2, r4, #32
   ba916:	fa20 f002 	lsr.w	r0, r0, r2
   ba91a:	fa01 f304 	lsl.w	r3, r1, r4
   ba91e:	ea40 0003 	orr.w	r0, r0, r3
   ba922:	4629      	mov	r1, r5
   ba924:	bd30      	pop	{r4, r5, pc}
   ba926:	fa21 f004 	lsr.w	r0, r1, r4
   ba92a:	4629      	mov	r1, r5
   ba92c:	bd30      	pop	{r4, r5, pc}
   ba92e:	f094 0f00 	teq	r4, #0
   ba932:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   ba936:	bf06      	itte	eq
   ba938:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   ba93c:	3401      	addeq	r4, #1
   ba93e:	3d01      	subne	r5, #1
   ba940:	e74e      	b.n	ba7e0 <__adddf3+0x8c>
   ba942:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba946:	bf18      	it	ne
   ba948:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba94c:	d029      	beq.n	ba9a2 <__adddf3+0x24e>
   ba94e:	ea94 0f05 	teq	r4, r5
   ba952:	bf08      	it	eq
   ba954:	ea90 0f02 	teqeq	r0, r2
   ba958:	d005      	beq.n	ba966 <__adddf3+0x212>
   ba95a:	ea54 0c00 	orrs.w	ip, r4, r0
   ba95e:	bf04      	itt	eq
   ba960:	4619      	moveq	r1, r3
   ba962:	4610      	moveq	r0, r2
   ba964:	bd30      	pop	{r4, r5, pc}
   ba966:	ea91 0f03 	teq	r1, r3
   ba96a:	bf1e      	ittt	ne
   ba96c:	2100      	movne	r1, #0
   ba96e:	2000      	movne	r0, #0
   ba970:	bd30      	popne	{r4, r5, pc}
   ba972:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   ba976:	d105      	bne.n	ba984 <__adddf3+0x230>
   ba978:	0040      	lsls	r0, r0, #1
   ba97a:	4149      	adcs	r1, r1
   ba97c:	bf28      	it	cs
   ba97e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   ba982:	bd30      	pop	{r4, r5, pc}
   ba984:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   ba988:	bf3c      	itt	cc
   ba98a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   ba98e:	bd30      	popcc	{r4, r5, pc}
   ba990:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba994:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   ba998:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ba99c:	f04f 0000 	mov.w	r0, #0
   ba9a0:	bd30      	pop	{r4, r5, pc}
   ba9a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba9a6:	bf1a      	itte	ne
   ba9a8:	4619      	movne	r1, r3
   ba9aa:	4610      	movne	r0, r2
   ba9ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   ba9b0:	bf1c      	itt	ne
   ba9b2:	460b      	movne	r3, r1
   ba9b4:	4602      	movne	r2, r0
   ba9b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba9ba:	bf06      	itte	eq
   ba9bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   ba9c0:	ea91 0f03 	teqeq	r1, r3
   ba9c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   ba9c8:	bd30      	pop	{r4, r5, pc}
   ba9ca:	bf00      	nop

000ba9cc <__aeabi_ui2d>:
   ba9cc:	f090 0f00 	teq	r0, #0
   ba9d0:	bf04      	itt	eq
   ba9d2:	2100      	moveq	r1, #0
   ba9d4:	4770      	bxeq	lr
   ba9d6:	b530      	push	{r4, r5, lr}
   ba9d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba9dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba9e0:	f04f 0500 	mov.w	r5, #0
   ba9e4:	f04f 0100 	mov.w	r1, #0
   ba9e8:	e750      	b.n	ba88c <__adddf3+0x138>
   ba9ea:	bf00      	nop

000ba9ec <__aeabi_i2d>:
   ba9ec:	f090 0f00 	teq	r0, #0
   ba9f0:	bf04      	itt	eq
   ba9f2:	2100      	moveq	r1, #0
   ba9f4:	4770      	bxeq	lr
   ba9f6:	b530      	push	{r4, r5, lr}
   ba9f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba9fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baa00:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   baa04:	bf48      	it	mi
   baa06:	4240      	negmi	r0, r0
   baa08:	f04f 0100 	mov.w	r1, #0
   baa0c:	e73e      	b.n	ba88c <__adddf3+0x138>
   baa0e:	bf00      	nop

000baa10 <__aeabi_f2d>:
   baa10:	0042      	lsls	r2, r0, #1
   baa12:	ea4f 01e2 	mov.w	r1, r2, asr #3
   baa16:	ea4f 0131 	mov.w	r1, r1, rrx
   baa1a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   baa1e:	bf1f      	itttt	ne
   baa20:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   baa24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   baa28:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   baa2c:	4770      	bxne	lr
   baa2e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   baa32:	bf08      	it	eq
   baa34:	4770      	bxeq	lr
   baa36:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   baa3a:	bf04      	itt	eq
   baa3c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   baa40:	4770      	bxeq	lr
   baa42:	b530      	push	{r4, r5, lr}
   baa44:	f44f 7460 	mov.w	r4, #896	; 0x380
   baa48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   baa4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   baa50:	e71c      	b.n	ba88c <__adddf3+0x138>
   baa52:	bf00      	nop

000baa54 <__aeabi_ul2d>:
   baa54:	ea50 0201 	orrs.w	r2, r0, r1
   baa58:	bf08      	it	eq
   baa5a:	4770      	bxeq	lr
   baa5c:	b530      	push	{r4, r5, lr}
   baa5e:	f04f 0500 	mov.w	r5, #0
   baa62:	e00a      	b.n	baa7a <__aeabi_l2d+0x16>

000baa64 <__aeabi_l2d>:
   baa64:	ea50 0201 	orrs.w	r2, r0, r1
   baa68:	bf08      	it	eq
   baa6a:	4770      	bxeq	lr
   baa6c:	b530      	push	{r4, r5, lr}
   baa6e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   baa72:	d502      	bpl.n	baa7a <__aeabi_l2d+0x16>
   baa74:	4240      	negs	r0, r0
   baa76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   baa7a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baa7e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baa82:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   baa86:	f43f aed8 	beq.w	ba83a <__adddf3+0xe6>
   baa8a:	f04f 0203 	mov.w	r2, #3
   baa8e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   baa92:	bf18      	it	ne
   baa94:	3203      	addne	r2, #3
   baa96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   baa9a:	bf18      	it	ne
   baa9c:	3203      	addne	r2, #3
   baa9e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   baaa2:	f1c2 0320 	rsb	r3, r2, #32
   baaa6:	fa00 fc03 	lsl.w	ip, r0, r3
   baaaa:	fa20 f002 	lsr.w	r0, r0, r2
   baaae:	fa01 fe03 	lsl.w	lr, r1, r3
   baab2:	ea40 000e 	orr.w	r0, r0, lr
   baab6:	fa21 f102 	lsr.w	r1, r1, r2
   baaba:	4414      	add	r4, r2
   baabc:	e6bd      	b.n	ba83a <__adddf3+0xe6>
   baabe:	bf00      	nop

000baac0 <__aeabi_dmul>:
   baac0:	b570      	push	{r4, r5, r6, lr}
   baac2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   baac6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   baaca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   baace:	bf1d      	ittte	ne
   baad0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   baad4:	ea94 0f0c 	teqne	r4, ip
   baad8:	ea95 0f0c 	teqne	r5, ip
   baadc:	f000 f8de 	bleq	bac9c <__aeabi_dmul+0x1dc>
   baae0:	442c      	add	r4, r5
   baae2:	ea81 0603 	eor.w	r6, r1, r3
   baae6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   baaea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   baaee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   baaf2:	bf18      	it	ne
   baaf4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   baaf8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   baafc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bab00:	d038      	beq.n	bab74 <__aeabi_dmul+0xb4>
   bab02:	fba0 ce02 	umull	ip, lr, r0, r2
   bab06:	f04f 0500 	mov.w	r5, #0
   bab0a:	fbe1 e502 	umlal	lr, r5, r1, r2
   bab0e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bab12:	fbe0 e503 	umlal	lr, r5, r0, r3
   bab16:	f04f 0600 	mov.w	r6, #0
   bab1a:	fbe1 5603 	umlal	r5, r6, r1, r3
   bab1e:	f09c 0f00 	teq	ip, #0
   bab22:	bf18      	it	ne
   bab24:	f04e 0e01 	orrne.w	lr, lr, #1
   bab28:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bab2c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bab30:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bab34:	d204      	bcs.n	bab40 <__aeabi_dmul+0x80>
   bab36:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bab3a:	416d      	adcs	r5, r5
   bab3c:	eb46 0606 	adc.w	r6, r6, r6
   bab40:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bab44:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bab48:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bab4c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bab50:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bab54:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bab58:	bf88      	it	hi
   bab5a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bab5e:	d81e      	bhi.n	bab9e <__aeabi_dmul+0xde>
   bab60:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bab64:	bf08      	it	eq
   bab66:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bab6a:	f150 0000 	adcs.w	r0, r0, #0
   bab6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bab72:	bd70      	pop	{r4, r5, r6, pc}
   bab74:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bab78:	ea46 0101 	orr.w	r1, r6, r1
   bab7c:	ea40 0002 	orr.w	r0, r0, r2
   bab80:	ea81 0103 	eor.w	r1, r1, r3
   bab84:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bab88:	bfc2      	ittt	gt
   bab8a:	ebd4 050c 	rsbsgt	r5, r4, ip
   bab8e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bab92:	bd70      	popgt	{r4, r5, r6, pc}
   bab94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bab98:	f04f 0e00 	mov.w	lr, #0
   bab9c:	3c01      	subs	r4, #1
   bab9e:	f300 80ab 	bgt.w	bacf8 <__aeabi_dmul+0x238>
   baba2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   baba6:	bfde      	ittt	le
   baba8:	2000      	movle	r0, #0
   babaa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   babae:	bd70      	pople	{r4, r5, r6, pc}
   babb0:	f1c4 0400 	rsb	r4, r4, #0
   babb4:	3c20      	subs	r4, #32
   babb6:	da35      	bge.n	bac24 <__aeabi_dmul+0x164>
   babb8:	340c      	adds	r4, #12
   babba:	dc1b      	bgt.n	babf4 <__aeabi_dmul+0x134>
   babbc:	f104 0414 	add.w	r4, r4, #20
   babc0:	f1c4 0520 	rsb	r5, r4, #32
   babc4:	fa00 f305 	lsl.w	r3, r0, r5
   babc8:	fa20 f004 	lsr.w	r0, r0, r4
   babcc:	fa01 f205 	lsl.w	r2, r1, r5
   babd0:	ea40 0002 	orr.w	r0, r0, r2
   babd4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   babd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   babdc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   babe0:	fa21 f604 	lsr.w	r6, r1, r4
   babe4:	eb42 0106 	adc.w	r1, r2, r6
   babe8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   babec:	bf08      	it	eq
   babee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   babf2:	bd70      	pop	{r4, r5, r6, pc}
   babf4:	f1c4 040c 	rsb	r4, r4, #12
   babf8:	f1c4 0520 	rsb	r5, r4, #32
   babfc:	fa00 f304 	lsl.w	r3, r0, r4
   bac00:	fa20 f005 	lsr.w	r0, r0, r5
   bac04:	fa01 f204 	lsl.w	r2, r1, r4
   bac08:	ea40 0002 	orr.w	r0, r0, r2
   bac0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bac10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bac14:	f141 0100 	adc.w	r1, r1, #0
   bac18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bac1c:	bf08      	it	eq
   bac1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bac22:	bd70      	pop	{r4, r5, r6, pc}
   bac24:	f1c4 0520 	rsb	r5, r4, #32
   bac28:	fa00 f205 	lsl.w	r2, r0, r5
   bac2c:	ea4e 0e02 	orr.w	lr, lr, r2
   bac30:	fa20 f304 	lsr.w	r3, r0, r4
   bac34:	fa01 f205 	lsl.w	r2, r1, r5
   bac38:	ea43 0302 	orr.w	r3, r3, r2
   bac3c:	fa21 f004 	lsr.w	r0, r1, r4
   bac40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bac44:	fa21 f204 	lsr.w	r2, r1, r4
   bac48:	ea20 0002 	bic.w	r0, r0, r2
   bac4c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bac50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bac54:	bf08      	it	eq
   bac56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bac5a:	bd70      	pop	{r4, r5, r6, pc}
   bac5c:	f094 0f00 	teq	r4, #0
   bac60:	d10f      	bne.n	bac82 <__aeabi_dmul+0x1c2>
   bac62:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bac66:	0040      	lsls	r0, r0, #1
   bac68:	eb41 0101 	adc.w	r1, r1, r1
   bac6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bac70:	bf08      	it	eq
   bac72:	3c01      	subeq	r4, #1
   bac74:	d0f7      	beq.n	bac66 <__aeabi_dmul+0x1a6>
   bac76:	ea41 0106 	orr.w	r1, r1, r6
   bac7a:	f095 0f00 	teq	r5, #0
   bac7e:	bf18      	it	ne
   bac80:	4770      	bxne	lr
   bac82:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bac86:	0052      	lsls	r2, r2, #1
   bac88:	eb43 0303 	adc.w	r3, r3, r3
   bac8c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bac90:	bf08      	it	eq
   bac92:	3d01      	subeq	r5, #1
   bac94:	d0f7      	beq.n	bac86 <__aeabi_dmul+0x1c6>
   bac96:	ea43 0306 	orr.w	r3, r3, r6
   bac9a:	4770      	bx	lr
   bac9c:	ea94 0f0c 	teq	r4, ip
   baca0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   baca4:	bf18      	it	ne
   baca6:	ea95 0f0c 	teqne	r5, ip
   bacaa:	d00c      	beq.n	bacc6 <__aeabi_dmul+0x206>
   bacac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bacb0:	bf18      	it	ne
   bacb2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bacb6:	d1d1      	bne.n	bac5c <__aeabi_dmul+0x19c>
   bacb8:	ea81 0103 	eor.w	r1, r1, r3
   bacbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bacc0:	f04f 0000 	mov.w	r0, #0
   bacc4:	bd70      	pop	{r4, r5, r6, pc}
   bacc6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bacca:	bf06      	itte	eq
   baccc:	4610      	moveq	r0, r2
   bacce:	4619      	moveq	r1, r3
   bacd0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bacd4:	d019      	beq.n	bad0a <__aeabi_dmul+0x24a>
   bacd6:	ea94 0f0c 	teq	r4, ip
   bacda:	d102      	bne.n	bace2 <__aeabi_dmul+0x222>
   bacdc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bace0:	d113      	bne.n	bad0a <__aeabi_dmul+0x24a>
   bace2:	ea95 0f0c 	teq	r5, ip
   bace6:	d105      	bne.n	bacf4 <__aeabi_dmul+0x234>
   bace8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bacec:	bf1c      	itt	ne
   bacee:	4610      	movne	r0, r2
   bacf0:	4619      	movne	r1, r3
   bacf2:	d10a      	bne.n	bad0a <__aeabi_dmul+0x24a>
   bacf4:	ea81 0103 	eor.w	r1, r1, r3
   bacf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bacfc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bad00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bad04:	f04f 0000 	mov.w	r0, #0
   bad08:	bd70      	pop	{r4, r5, r6, pc}
   bad0a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bad0e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bad12:	bd70      	pop	{r4, r5, r6, pc}

000bad14 <__aeabi_ddiv>:
   bad14:	b570      	push	{r4, r5, r6, lr}
   bad16:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bad1a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bad1e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bad22:	bf1d      	ittte	ne
   bad24:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bad28:	ea94 0f0c 	teqne	r4, ip
   bad2c:	ea95 0f0c 	teqne	r5, ip
   bad30:	f000 f8a7 	bleq	bae82 <__aeabi_ddiv+0x16e>
   bad34:	eba4 0405 	sub.w	r4, r4, r5
   bad38:	ea81 0e03 	eor.w	lr, r1, r3
   bad3c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bad40:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bad44:	f000 8088 	beq.w	bae58 <__aeabi_ddiv+0x144>
   bad48:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bad4c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bad50:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bad54:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bad58:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bad5c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bad60:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bad64:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bad68:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bad6c:	429d      	cmp	r5, r3
   bad6e:	bf08      	it	eq
   bad70:	4296      	cmpeq	r6, r2
   bad72:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bad76:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bad7a:	d202      	bcs.n	bad82 <__aeabi_ddiv+0x6e>
   bad7c:	085b      	lsrs	r3, r3, #1
   bad7e:	ea4f 0232 	mov.w	r2, r2, rrx
   bad82:	1ab6      	subs	r6, r6, r2
   bad84:	eb65 0503 	sbc.w	r5, r5, r3
   bad88:	085b      	lsrs	r3, r3, #1
   bad8a:	ea4f 0232 	mov.w	r2, r2, rrx
   bad8e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bad92:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bad96:	ebb6 0e02 	subs.w	lr, r6, r2
   bad9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bad9e:	bf22      	ittt	cs
   bada0:	1ab6      	subcs	r6, r6, r2
   bada2:	4675      	movcs	r5, lr
   bada4:	ea40 000c 	orrcs.w	r0, r0, ip
   bada8:	085b      	lsrs	r3, r3, #1
   badaa:	ea4f 0232 	mov.w	r2, r2, rrx
   badae:	ebb6 0e02 	subs.w	lr, r6, r2
   badb2:	eb75 0e03 	sbcs.w	lr, r5, r3
   badb6:	bf22      	ittt	cs
   badb8:	1ab6      	subcs	r6, r6, r2
   badba:	4675      	movcs	r5, lr
   badbc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   badc0:	085b      	lsrs	r3, r3, #1
   badc2:	ea4f 0232 	mov.w	r2, r2, rrx
   badc6:	ebb6 0e02 	subs.w	lr, r6, r2
   badca:	eb75 0e03 	sbcs.w	lr, r5, r3
   badce:	bf22      	ittt	cs
   badd0:	1ab6      	subcs	r6, r6, r2
   badd2:	4675      	movcs	r5, lr
   badd4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   badd8:	085b      	lsrs	r3, r3, #1
   badda:	ea4f 0232 	mov.w	r2, r2, rrx
   badde:	ebb6 0e02 	subs.w	lr, r6, r2
   bade2:	eb75 0e03 	sbcs.w	lr, r5, r3
   bade6:	bf22      	ittt	cs
   bade8:	1ab6      	subcs	r6, r6, r2
   badea:	4675      	movcs	r5, lr
   badec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   badf0:	ea55 0e06 	orrs.w	lr, r5, r6
   badf4:	d018      	beq.n	bae28 <__aeabi_ddiv+0x114>
   badf6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   badfa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   badfe:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bae02:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bae06:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bae0a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bae0e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bae12:	d1c0      	bne.n	bad96 <__aeabi_ddiv+0x82>
   bae14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bae18:	d10b      	bne.n	bae32 <__aeabi_ddiv+0x11e>
   bae1a:	ea41 0100 	orr.w	r1, r1, r0
   bae1e:	f04f 0000 	mov.w	r0, #0
   bae22:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bae26:	e7b6      	b.n	bad96 <__aeabi_ddiv+0x82>
   bae28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bae2c:	bf04      	itt	eq
   bae2e:	4301      	orreq	r1, r0
   bae30:	2000      	moveq	r0, #0
   bae32:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bae36:	bf88      	it	hi
   bae38:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bae3c:	f63f aeaf 	bhi.w	bab9e <__aeabi_dmul+0xde>
   bae40:	ebb5 0c03 	subs.w	ip, r5, r3
   bae44:	bf04      	itt	eq
   bae46:	ebb6 0c02 	subseq.w	ip, r6, r2
   bae4a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bae4e:	f150 0000 	adcs.w	r0, r0, #0
   bae52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bae56:	bd70      	pop	{r4, r5, r6, pc}
   bae58:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bae5c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bae60:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bae64:	bfc2      	ittt	gt
   bae66:	ebd4 050c 	rsbsgt	r5, r4, ip
   bae6a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bae6e:	bd70      	popgt	{r4, r5, r6, pc}
   bae70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bae74:	f04f 0e00 	mov.w	lr, #0
   bae78:	3c01      	subs	r4, #1
   bae7a:	e690      	b.n	bab9e <__aeabi_dmul+0xde>
   bae7c:	ea45 0e06 	orr.w	lr, r5, r6
   bae80:	e68d      	b.n	bab9e <__aeabi_dmul+0xde>
   bae82:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bae86:	ea94 0f0c 	teq	r4, ip
   bae8a:	bf08      	it	eq
   bae8c:	ea95 0f0c 	teqeq	r5, ip
   bae90:	f43f af3b 	beq.w	bad0a <__aeabi_dmul+0x24a>
   bae94:	ea94 0f0c 	teq	r4, ip
   bae98:	d10a      	bne.n	baeb0 <__aeabi_ddiv+0x19c>
   bae9a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bae9e:	f47f af34 	bne.w	bad0a <__aeabi_dmul+0x24a>
   baea2:	ea95 0f0c 	teq	r5, ip
   baea6:	f47f af25 	bne.w	bacf4 <__aeabi_dmul+0x234>
   baeaa:	4610      	mov	r0, r2
   baeac:	4619      	mov	r1, r3
   baeae:	e72c      	b.n	bad0a <__aeabi_dmul+0x24a>
   baeb0:	ea95 0f0c 	teq	r5, ip
   baeb4:	d106      	bne.n	baec4 <__aeabi_ddiv+0x1b0>
   baeb6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   baeba:	f43f aefd 	beq.w	bacb8 <__aeabi_dmul+0x1f8>
   baebe:	4610      	mov	r0, r2
   baec0:	4619      	mov	r1, r3
   baec2:	e722      	b.n	bad0a <__aeabi_dmul+0x24a>
   baec4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   baec8:	bf18      	it	ne
   baeca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   baece:	f47f aec5 	bne.w	bac5c <__aeabi_dmul+0x19c>
   baed2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   baed6:	f47f af0d 	bne.w	bacf4 <__aeabi_dmul+0x234>
   baeda:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   baede:	f47f aeeb 	bne.w	bacb8 <__aeabi_dmul+0x1f8>
   baee2:	e712      	b.n	bad0a <__aeabi_dmul+0x24a>

000baee4 <__gedf2>:
   baee4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   baee8:	e006      	b.n	baef8 <__cmpdf2+0x4>
   baeea:	bf00      	nop

000baeec <__ledf2>:
   baeec:	f04f 0c01 	mov.w	ip, #1
   baef0:	e002      	b.n	baef8 <__cmpdf2+0x4>
   baef2:	bf00      	nop

000baef4 <__cmpdf2>:
   baef4:	f04f 0c01 	mov.w	ip, #1
   baef8:	f84d cd04 	str.w	ip, [sp, #-4]!
   baefc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   baf00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   baf04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   baf08:	bf18      	it	ne
   baf0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   baf0e:	d01b      	beq.n	baf48 <__cmpdf2+0x54>
   baf10:	b001      	add	sp, #4
   baf12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   baf16:	bf0c      	ite	eq
   baf18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   baf1c:	ea91 0f03 	teqne	r1, r3
   baf20:	bf02      	ittt	eq
   baf22:	ea90 0f02 	teqeq	r0, r2
   baf26:	2000      	moveq	r0, #0
   baf28:	4770      	bxeq	lr
   baf2a:	f110 0f00 	cmn.w	r0, #0
   baf2e:	ea91 0f03 	teq	r1, r3
   baf32:	bf58      	it	pl
   baf34:	4299      	cmppl	r1, r3
   baf36:	bf08      	it	eq
   baf38:	4290      	cmpeq	r0, r2
   baf3a:	bf2c      	ite	cs
   baf3c:	17d8      	asrcs	r0, r3, #31
   baf3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   baf42:	f040 0001 	orr.w	r0, r0, #1
   baf46:	4770      	bx	lr
   baf48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   baf4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   baf50:	d102      	bne.n	baf58 <__cmpdf2+0x64>
   baf52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   baf56:	d107      	bne.n	baf68 <__cmpdf2+0x74>
   baf58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   baf5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   baf60:	d1d6      	bne.n	baf10 <__cmpdf2+0x1c>
   baf62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   baf66:	d0d3      	beq.n	baf10 <__cmpdf2+0x1c>
   baf68:	f85d 0b04 	ldr.w	r0, [sp], #4
   baf6c:	4770      	bx	lr
   baf6e:	bf00      	nop

000baf70 <__aeabi_cdrcmple>:
   baf70:	4684      	mov	ip, r0
   baf72:	4610      	mov	r0, r2
   baf74:	4662      	mov	r2, ip
   baf76:	468c      	mov	ip, r1
   baf78:	4619      	mov	r1, r3
   baf7a:	4663      	mov	r3, ip
   baf7c:	e000      	b.n	baf80 <__aeabi_cdcmpeq>
   baf7e:	bf00      	nop

000baf80 <__aeabi_cdcmpeq>:
   baf80:	b501      	push	{r0, lr}
   baf82:	f7ff ffb7 	bl	baef4 <__cmpdf2>
   baf86:	2800      	cmp	r0, #0
   baf88:	bf48      	it	mi
   baf8a:	f110 0f00 	cmnmi.w	r0, #0
   baf8e:	bd01      	pop	{r0, pc}

000baf90 <__aeabi_dcmpeq>:
   baf90:	f84d ed08 	str.w	lr, [sp, #-8]!
   baf94:	f7ff fff4 	bl	baf80 <__aeabi_cdcmpeq>
   baf98:	bf0c      	ite	eq
   baf9a:	2001      	moveq	r0, #1
   baf9c:	2000      	movne	r0, #0
   baf9e:	f85d fb08 	ldr.w	pc, [sp], #8
   bafa2:	bf00      	nop

000bafa4 <__aeabi_dcmplt>:
   bafa4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bafa8:	f7ff ffea 	bl	baf80 <__aeabi_cdcmpeq>
   bafac:	bf34      	ite	cc
   bafae:	2001      	movcc	r0, #1
   bafb0:	2000      	movcs	r0, #0
   bafb2:	f85d fb08 	ldr.w	pc, [sp], #8
   bafb6:	bf00      	nop

000bafb8 <__aeabi_dcmple>:
   bafb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bafbc:	f7ff ffe0 	bl	baf80 <__aeabi_cdcmpeq>
   bafc0:	bf94      	ite	ls
   bafc2:	2001      	movls	r0, #1
   bafc4:	2000      	movhi	r0, #0
   bafc6:	f85d fb08 	ldr.w	pc, [sp], #8
   bafca:	bf00      	nop

000bafcc <__aeabi_dcmpge>:
   bafcc:	f84d ed08 	str.w	lr, [sp, #-8]!
   bafd0:	f7ff ffce 	bl	baf70 <__aeabi_cdrcmple>
   bafd4:	bf94      	ite	ls
   bafd6:	2001      	movls	r0, #1
   bafd8:	2000      	movhi	r0, #0
   bafda:	f85d fb08 	ldr.w	pc, [sp], #8
   bafde:	bf00      	nop

000bafe0 <__aeabi_dcmpgt>:
   bafe0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bafe4:	f7ff ffc4 	bl	baf70 <__aeabi_cdrcmple>
   bafe8:	bf34      	ite	cc
   bafea:	2001      	movcc	r0, #1
   bafec:	2000      	movcs	r0, #0
   bafee:	f85d fb08 	ldr.w	pc, [sp], #8
   baff2:	bf00      	nop

000baff4 <__aeabi_dcmpun>:
   baff4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   baff8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   baffc:	d102      	bne.n	bb004 <__aeabi_dcmpun+0x10>
   baffe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb002:	d10a      	bne.n	bb01a <__aeabi_dcmpun+0x26>
   bb004:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb008:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb00c:	d102      	bne.n	bb014 <__aeabi_dcmpun+0x20>
   bb00e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb012:	d102      	bne.n	bb01a <__aeabi_dcmpun+0x26>
   bb014:	f04f 0000 	mov.w	r0, #0
   bb018:	4770      	bx	lr
   bb01a:	f04f 0001 	mov.w	r0, #1
   bb01e:	4770      	bx	lr

000bb020 <__aeabi_d2uiz>:
   bb020:	004a      	lsls	r2, r1, #1
   bb022:	d211      	bcs.n	bb048 <__aeabi_d2uiz+0x28>
   bb024:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bb028:	d211      	bcs.n	bb04e <__aeabi_d2uiz+0x2e>
   bb02a:	d50d      	bpl.n	bb048 <__aeabi_d2uiz+0x28>
   bb02c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bb030:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bb034:	d40e      	bmi.n	bb054 <__aeabi_d2uiz+0x34>
   bb036:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb03a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bb03e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bb042:	fa23 f002 	lsr.w	r0, r3, r2
   bb046:	4770      	bx	lr
   bb048:	f04f 0000 	mov.w	r0, #0
   bb04c:	4770      	bx	lr
   bb04e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bb052:	d102      	bne.n	bb05a <__aeabi_d2uiz+0x3a>
   bb054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb058:	4770      	bx	lr
   bb05a:	f04f 0000 	mov.w	r0, #0
   bb05e:	4770      	bx	lr

000bb060 <__aeabi_d2f>:
   bb060:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bb064:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bb068:	bf24      	itt	cs
   bb06a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bb06e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bb072:	d90d      	bls.n	bb090 <__aeabi_d2f+0x30>
   bb074:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bb078:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bb07c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bb080:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bb084:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bb088:	bf08      	it	eq
   bb08a:	f020 0001 	biceq.w	r0, r0, #1
   bb08e:	4770      	bx	lr
   bb090:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bb094:	d121      	bne.n	bb0da <__aeabi_d2f+0x7a>
   bb096:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bb09a:	bfbc      	itt	lt
   bb09c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bb0a0:	4770      	bxlt	lr
   bb0a2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb0a6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bb0aa:	f1c2 0218 	rsb	r2, r2, #24
   bb0ae:	f1c2 0c20 	rsb	ip, r2, #32
   bb0b2:	fa10 f30c 	lsls.w	r3, r0, ip
   bb0b6:	fa20 f002 	lsr.w	r0, r0, r2
   bb0ba:	bf18      	it	ne
   bb0bc:	f040 0001 	orrne.w	r0, r0, #1
   bb0c0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb0c4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bb0c8:	fa03 fc0c 	lsl.w	ip, r3, ip
   bb0cc:	ea40 000c 	orr.w	r0, r0, ip
   bb0d0:	fa23 f302 	lsr.w	r3, r3, r2
   bb0d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bb0d8:	e7cc      	b.n	bb074 <__aeabi_d2f+0x14>
   bb0da:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bb0de:	d107      	bne.n	bb0f0 <__aeabi_d2f+0x90>
   bb0e0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bb0e4:	bf1e      	ittt	ne
   bb0e6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bb0ea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bb0ee:	4770      	bxne	lr
   bb0f0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bb0f4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bb0f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bb0fc:	4770      	bx	lr
   bb0fe:	bf00      	nop

000bb100 <__aeabi_d2ulz>:
   bb100:	b5d0      	push	{r4, r6, r7, lr}
   bb102:	4b0c      	ldr	r3, [pc, #48]	; (bb134 <__aeabi_d2ulz+0x34>)
   bb104:	2200      	movs	r2, #0
   bb106:	4606      	mov	r6, r0
   bb108:	460f      	mov	r7, r1
   bb10a:	f7ff fcd9 	bl	baac0 <__aeabi_dmul>
   bb10e:	f7ff ff87 	bl	bb020 <__aeabi_d2uiz>
   bb112:	4604      	mov	r4, r0
   bb114:	f7ff fc5a 	bl	ba9cc <__aeabi_ui2d>
   bb118:	4b07      	ldr	r3, [pc, #28]	; (bb138 <__aeabi_d2ulz+0x38>)
   bb11a:	2200      	movs	r2, #0
   bb11c:	f7ff fcd0 	bl	baac0 <__aeabi_dmul>
   bb120:	4602      	mov	r2, r0
   bb122:	460b      	mov	r3, r1
   bb124:	4630      	mov	r0, r6
   bb126:	4639      	mov	r1, r7
   bb128:	f7ff fb12 	bl	ba750 <__aeabi_dsub>
   bb12c:	f7ff ff78 	bl	bb020 <__aeabi_d2uiz>
   bb130:	4621      	mov	r1, r4
   bb132:	bdd0      	pop	{r4, r6, r7, pc}
   bb134:	3df00000 	.word	0x3df00000
   bb138:	41f00000 	.word	0x41f00000

000bb13c <atexit>:
   bb13c:	2300      	movs	r3, #0
   bb13e:	4601      	mov	r1, r0
   bb140:	461a      	mov	r2, r3
   bb142:	4618      	mov	r0, r3
   bb144:	f000 bfce 	b.w	bc0e4 <__register_exitproc>

000bb148 <atoi>:
   bb148:	220a      	movs	r2, #10
   bb14a:	2100      	movs	r1, #0
   bb14c:	f000 bfc0 	b.w	bc0d0 <strtol>

000bb150 <memcmp>:
   bb150:	b510      	push	{r4, lr}
   bb152:	3901      	subs	r1, #1
   bb154:	4402      	add	r2, r0
   bb156:	4290      	cmp	r0, r2
   bb158:	d101      	bne.n	bb15e <memcmp+0xe>
   bb15a:	2000      	movs	r0, #0
   bb15c:	e005      	b.n	bb16a <memcmp+0x1a>
   bb15e:	7803      	ldrb	r3, [r0, #0]
   bb160:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bb164:	42a3      	cmp	r3, r4
   bb166:	d001      	beq.n	bb16c <memcmp+0x1c>
   bb168:	1b18      	subs	r0, r3, r4
   bb16a:	bd10      	pop	{r4, pc}
   bb16c:	3001      	adds	r0, #1
   bb16e:	e7f2      	b.n	bb156 <memcmp+0x6>

000bb170 <memcpy>:
   bb170:	440a      	add	r2, r1
   bb172:	4291      	cmp	r1, r2
   bb174:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bb178:	d100      	bne.n	bb17c <memcpy+0xc>
   bb17a:	4770      	bx	lr
   bb17c:	b510      	push	{r4, lr}
   bb17e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb182:	f803 4f01 	strb.w	r4, [r3, #1]!
   bb186:	4291      	cmp	r1, r2
   bb188:	d1f9      	bne.n	bb17e <memcpy+0xe>
   bb18a:	bd10      	pop	{r4, pc}

000bb18c <memmove>:
   bb18c:	4288      	cmp	r0, r1
   bb18e:	b510      	push	{r4, lr}
   bb190:	eb01 0402 	add.w	r4, r1, r2
   bb194:	d902      	bls.n	bb19c <memmove+0x10>
   bb196:	4284      	cmp	r4, r0
   bb198:	4623      	mov	r3, r4
   bb19a:	d807      	bhi.n	bb1ac <memmove+0x20>
   bb19c:	1e43      	subs	r3, r0, #1
   bb19e:	42a1      	cmp	r1, r4
   bb1a0:	d008      	beq.n	bb1b4 <memmove+0x28>
   bb1a2:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb1a6:	f803 2f01 	strb.w	r2, [r3, #1]!
   bb1aa:	e7f8      	b.n	bb19e <memmove+0x12>
   bb1ac:	4402      	add	r2, r0
   bb1ae:	4601      	mov	r1, r0
   bb1b0:	428a      	cmp	r2, r1
   bb1b2:	d100      	bne.n	bb1b6 <memmove+0x2a>
   bb1b4:	bd10      	pop	{r4, pc}
   bb1b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bb1ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bb1be:	e7f7      	b.n	bb1b0 <memmove+0x24>

000bb1c0 <memset>:
   bb1c0:	4402      	add	r2, r0
   bb1c2:	4603      	mov	r3, r0
   bb1c4:	4293      	cmp	r3, r2
   bb1c6:	d100      	bne.n	bb1ca <memset+0xa>
   bb1c8:	4770      	bx	lr
   bb1ca:	f803 1b01 	strb.w	r1, [r3], #1
   bb1ce:	e7f9      	b.n	bb1c4 <memset+0x4>

000bb1d0 <srand>:
   bb1d0:	b538      	push	{r3, r4, r5, lr}
   bb1d2:	4b10      	ldr	r3, [pc, #64]	; (bb214 <srand+0x44>)
   bb1d4:	681d      	ldr	r5, [r3, #0]
   bb1d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb1d8:	4604      	mov	r4, r0
   bb1da:	b9b3      	cbnz	r3, bb20a <srand+0x3a>
   bb1dc:	2018      	movs	r0, #24
   bb1de:	f7fc fd0d 	bl	b7bfc <malloc>
   bb1e2:	4602      	mov	r2, r0
   bb1e4:	63a8      	str	r0, [r5, #56]	; 0x38
   bb1e6:	b920      	cbnz	r0, bb1f2 <srand+0x22>
   bb1e8:	4b0b      	ldr	r3, [pc, #44]	; (bb218 <srand+0x48>)
   bb1ea:	480c      	ldr	r0, [pc, #48]	; (bb21c <srand+0x4c>)
   bb1ec:	2142      	movs	r1, #66	; 0x42
   bb1ee:	f7fc fd45 	bl	b7c7c <__assert_func>
   bb1f2:	490b      	ldr	r1, [pc, #44]	; (bb220 <srand+0x50>)
   bb1f4:	4b0b      	ldr	r3, [pc, #44]	; (bb224 <srand+0x54>)
   bb1f6:	e9c0 1300 	strd	r1, r3, [r0]
   bb1fa:	4b0b      	ldr	r3, [pc, #44]	; (bb228 <srand+0x58>)
   bb1fc:	6083      	str	r3, [r0, #8]
   bb1fe:	230b      	movs	r3, #11
   bb200:	8183      	strh	r3, [r0, #12]
   bb202:	2100      	movs	r1, #0
   bb204:	2001      	movs	r0, #1
   bb206:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bb20a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb20c:	2200      	movs	r2, #0
   bb20e:	611c      	str	r4, [r3, #16]
   bb210:	615a      	str	r2, [r3, #20]
   bb212:	bd38      	pop	{r3, r4, r5, pc}
   bb214:	200352fc 	.word	0x200352fc
   bb218:	000bdbf9 	.word	0x000bdbf9
   bb21c:	000bdc10 	.word	0x000bdc10
   bb220:	abcd330e 	.word	0xabcd330e
   bb224:	e66d1234 	.word	0xe66d1234
   bb228:	0005deec 	.word	0x0005deec

000bb22c <strcmp>:
   bb22c:	f810 2b01 	ldrb.w	r2, [r0], #1
   bb230:	f811 3b01 	ldrb.w	r3, [r1], #1
   bb234:	2a01      	cmp	r2, #1
   bb236:	bf28      	it	cs
   bb238:	429a      	cmpcs	r2, r3
   bb23a:	d0f7      	beq.n	bb22c <strcmp>
   bb23c:	1ad0      	subs	r0, r2, r3
   bb23e:	4770      	bx	lr

000bb240 <strcpy>:
   bb240:	4603      	mov	r3, r0
   bb242:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb246:	f803 2b01 	strb.w	r2, [r3], #1
   bb24a:	2a00      	cmp	r2, #0
   bb24c:	d1f9      	bne.n	bb242 <strcpy+0x2>
   bb24e:	4770      	bx	lr

000bb250 <strlen>:
   bb250:	4603      	mov	r3, r0
   bb252:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb256:	2a00      	cmp	r2, #0
   bb258:	d1fb      	bne.n	bb252 <strlen+0x2>
   bb25a:	1a18      	subs	r0, r3, r0
   bb25c:	3801      	subs	r0, #1
   bb25e:	4770      	bx	lr

000bb260 <strncmp>:
   bb260:	b510      	push	{r4, lr}
   bb262:	b17a      	cbz	r2, bb284 <strncmp+0x24>
   bb264:	4603      	mov	r3, r0
   bb266:	3901      	subs	r1, #1
   bb268:	1884      	adds	r4, r0, r2
   bb26a:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb26e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bb272:	4290      	cmp	r0, r2
   bb274:	d101      	bne.n	bb27a <strncmp+0x1a>
   bb276:	42a3      	cmp	r3, r4
   bb278:	d101      	bne.n	bb27e <strncmp+0x1e>
   bb27a:	1a80      	subs	r0, r0, r2
   bb27c:	bd10      	pop	{r4, pc}
   bb27e:	2800      	cmp	r0, #0
   bb280:	d1f3      	bne.n	bb26a <strncmp+0xa>
   bb282:	e7fa      	b.n	bb27a <strncmp+0x1a>
   bb284:	4610      	mov	r0, r2
   bb286:	e7f9      	b.n	bb27c <strncmp+0x1c>

000bb288 <strnlen>:
   bb288:	b510      	push	{r4, lr}
   bb28a:	4602      	mov	r2, r0
   bb28c:	4401      	add	r1, r0
   bb28e:	428a      	cmp	r2, r1
   bb290:	4613      	mov	r3, r2
   bb292:	d003      	beq.n	bb29c <strnlen+0x14>
   bb294:	781c      	ldrb	r4, [r3, #0]
   bb296:	3201      	adds	r2, #1
   bb298:	2c00      	cmp	r4, #0
   bb29a:	d1f8      	bne.n	bb28e <strnlen+0x6>
   bb29c:	1a18      	subs	r0, r3, r0
   bb29e:	bd10      	pop	{r4, pc}

000bb2a0 <strstr>:
   bb2a0:	780a      	ldrb	r2, [r1, #0]
   bb2a2:	b570      	push	{r4, r5, r6, lr}
   bb2a4:	b96a      	cbnz	r2, bb2c2 <strstr+0x22>
   bb2a6:	bd70      	pop	{r4, r5, r6, pc}
   bb2a8:	429a      	cmp	r2, r3
   bb2aa:	d109      	bne.n	bb2c0 <strstr+0x20>
   bb2ac:	460c      	mov	r4, r1
   bb2ae:	4605      	mov	r5, r0
   bb2b0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bb2b4:	2b00      	cmp	r3, #0
   bb2b6:	d0f6      	beq.n	bb2a6 <strstr+0x6>
   bb2b8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bb2bc:	429e      	cmp	r6, r3
   bb2be:	d0f7      	beq.n	bb2b0 <strstr+0x10>
   bb2c0:	3001      	adds	r0, #1
   bb2c2:	7803      	ldrb	r3, [r0, #0]
   bb2c4:	2b00      	cmp	r3, #0
   bb2c6:	d1ef      	bne.n	bb2a8 <strstr+0x8>
   bb2c8:	4618      	mov	r0, r3
   bb2ca:	e7ec      	b.n	bb2a6 <strstr+0x6>

000bb2cc <sulp>:
   bb2cc:	b570      	push	{r4, r5, r6, lr}
   bb2ce:	4604      	mov	r4, r0
   bb2d0:	460d      	mov	r5, r1
   bb2d2:	ec45 4b10 	vmov	d0, r4, r5
   bb2d6:	4616      	mov	r6, r2
   bb2d8:	f001 fe5e 	bl	bcf98 <__ulp>
   bb2dc:	ec51 0b10 	vmov	r0, r1, d0
   bb2e0:	b17e      	cbz	r6, bb302 <sulp+0x36>
   bb2e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bb2e6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bb2ea:	2b00      	cmp	r3, #0
   bb2ec:	dd09      	ble.n	bb302 <sulp+0x36>
   bb2ee:	051b      	lsls	r3, r3, #20
   bb2f0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bb2f4:	2400      	movs	r4, #0
   bb2f6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bb2fa:	4622      	mov	r2, r4
   bb2fc:	462b      	mov	r3, r5
   bb2fe:	f7ff fbdf 	bl	baac0 <__aeabi_dmul>
   bb302:	bd70      	pop	{r4, r5, r6, pc}
   bb304:	0000      	movs	r0, r0
	...

000bb308 <_strtod_l>:
   bb308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb30c:	ed2d 8b02 	vpush	{d8}
   bb310:	b09d      	sub	sp, #116	; 0x74
   bb312:	461f      	mov	r7, r3
   bb314:	2300      	movs	r3, #0
   bb316:	9318      	str	r3, [sp, #96]	; 0x60
   bb318:	4ba2      	ldr	r3, [pc, #648]	; (bb5a4 <_strtod_l+0x29c>)
   bb31a:	9213      	str	r2, [sp, #76]	; 0x4c
   bb31c:	681b      	ldr	r3, [r3, #0]
   bb31e:	9305      	str	r3, [sp, #20]
   bb320:	4604      	mov	r4, r0
   bb322:	4618      	mov	r0, r3
   bb324:	4688      	mov	r8, r1
   bb326:	f7ff ff93 	bl	bb250 <strlen>
   bb32a:	f04f 0a00 	mov.w	sl, #0
   bb32e:	4605      	mov	r5, r0
   bb330:	f04f 0b00 	mov.w	fp, #0
   bb334:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb338:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb33a:	781a      	ldrb	r2, [r3, #0]
   bb33c:	2a2b      	cmp	r2, #43	; 0x2b
   bb33e:	d04e      	beq.n	bb3de <_strtod_l+0xd6>
   bb340:	d83b      	bhi.n	bb3ba <_strtod_l+0xb2>
   bb342:	2a0d      	cmp	r2, #13
   bb344:	d834      	bhi.n	bb3b0 <_strtod_l+0xa8>
   bb346:	2a08      	cmp	r2, #8
   bb348:	d834      	bhi.n	bb3b4 <_strtod_l+0xac>
   bb34a:	2a00      	cmp	r2, #0
   bb34c:	d03e      	beq.n	bb3cc <_strtod_l+0xc4>
   bb34e:	2300      	movs	r3, #0
   bb350:	930a      	str	r3, [sp, #40]	; 0x28
   bb352:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bb354:	7833      	ldrb	r3, [r6, #0]
   bb356:	2b30      	cmp	r3, #48	; 0x30
   bb358:	f040 80b0 	bne.w	bb4bc <_strtod_l+0x1b4>
   bb35c:	7873      	ldrb	r3, [r6, #1]
   bb35e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb362:	2b58      	cmp	r3, #88	; 0x58
   bb364:	d168      	bne.n	bb438 <_strtod_l+0x130>
   bb366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb368:	9301      	str	r3, [sp, #4]
   bb36a:	ab18      	add	r3, sp, #96	; 0x60
   bb36c:	9702      	str	r7, [sp, #8]
   bb36e:	9300      	str	r3, [sp, #0]
   bb370:	4a8d      	ldr	r2, [pc, #564]	; (bb5a8 <_strtod_l+0x2a0>)
   bb372:	ab19      	add	r3, sp, #100	; 0x64
   bb374:	a917      	add	r1, sp, #92	; 0x5c
   bb376:	4620      	mov	r0, r4
   bb378:	f000 ff7e 	bl	bc278 <__gethex>
   bb37c:	f010 0707 	ands.w	r7, r0, #7
   bb380:	4605      	mov	r5, r0
   bb382:	d005      	beq.n	bb390 <_strtod_l+0x88>
   bb384:	2f06      	cmp	r7, #6
   bb386:	d12c      	bne.n	bb3e2 <_strtod_l+0xda>
   bb388:	3601      	adds	r6, #1
   bb38a:	2300      	movs	r3, #0
   bb38c:	9617      	str	r6, [sp, #92]	; 0x5c
   bb38e:	930a      	str	r3, [sp, #40]	; 0x28
   bb390:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb392:	2b00      	cmp	r3, #0
   bb394:	f040 8590 	bne.w	bbeb8 <_strtod_l+0xbb0>
   bb398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb39a:	b1eb      	cbz	r3, bb3d8 <_strtod_l+0xd0>
   bb39c:	4652      	mov	r2, sl
   bb39e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bb3a2:	ec43 2b10 	vmov	d0, r2, r3
   bb3a6:	b01d      	add	sp, #116	; 0x74
   bb3a8:	ecbd 8b02 	vpop	{d8}
   bb3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb3b0:	2a20      	cmp	r2, #32
   bb3b2:	d1cc      	bne.n	bb34e <_strtod_l+0x46>
   bb3b4:	3301      	adds	r3, #1
   bb3b6:	9317      	str	r3, [sp, #92]	; 0x5c
   bb3b8:	e7be      	b.n	bb338 <_strtod_l+0x30>
   bb3ba:	2a2d      	cmp	r2, #45	; 0x2d
   bb3bc:	d1c7      	bne.n	bb34e <_strtod_l+0x46>
   bb3be:	2201      	movs	r2, #1
   bb3c0:	920a      	str	r2, [sp, #40]	; 0x28
   bb3c2:	1c5a      	adds	r2, r3, #1
   bb3c4:	9217      	str	r2, [sp, #92]	; 0x5c
   bb3c6:	785b      	ldrb	r3, [r3, #1]
   bb3c8:	2b00      	cmp	r3, #0
   bb3ca:	d1c2      	bne.n	bb352 <_strtod_l+0x4a>
   bb3cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb3ce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb3d2:	2b00      	cmp	r3, #0
   bb3d4:	f040 856e 	bne.w	bbeb4 <_strtod_l+0xbac>
   bb3d8:	4652      	mov	r2, sl
   bb3da:	465b      	mov	r3, fp
   bb3dc:	e7e1      	b.n	bb3a2 <_strtod_l+0x9a>
   bb3de:	2200      	movs	r2, #0
   bb3e0:	e7ee      	b.n	bb3c0 <_strtod_l+0xb8>
   bb3e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb3e4:	b13a      	cbz	r2, bb3f6 <_strtod_l+0xee>
   bb3e6:	2135      	movs	r1, #53	; 0x35
   bb3e8:	a81a      	add	r0, sp, #104	; 0x68
   bb3ea:	f001 fee0 	bl	bd1ae <__copybits>
   bb3ee:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb3f0:	4620      	mov	r0, r4
   bb3f2:	f001 fa9f 	bl	bc934 <_Bfree>
   bb3f6:	3f01      	subs	r7, #1
   bb3f8:	2f04      	cmp	r7, #4
   bb3fa:	d806      	bhi.n	bb40a <_strtod_l+0x102>
   bb3fc:	e8df f007 	tbb	[pc, r7]
   bb400:	1714030a 	.word	0x1714030a
   bb404:	0a          	.byte	0x0a
   bb405:	00          	.byte	0x00
   bb406:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bb40a:	0728      	lsls	r0, r5, #28
   bb40c:	d5c0      	bpl.n	bb390 <_strtod_l+0x88>
   bb40e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bb412:	e7bd      	b.n	bb390 <_strtod_l+0x88>
   bb414:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bb418:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bb41a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bb41e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bb422:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bb426:	e7f0      	b.n	bb40a <_strtod_l+0x102>
   bb428:	f8df b180 	ldr.w	fp, [pc, #384]	; bb5ac <_strtod_l+0x2a4>
   bb42c:	e7ed      	b.n	bb40a <_strtod_l+0x102>
   bb42e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bb432:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bb436:	e7e8      	b.n	bb40a <_strtod_l+0x102>
   bb438:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb43a:	1c5a      	adds	r2, r3, #1
   bb43c:	9217      	str	r2, [sp, #92]	; 0x5c
   bb43e:	785b      	ldrb	r3, [r3, #1]
   bb440:	2b30      	cmp	r3, #48	; 0x30
   bb442:	d0f9      	beq.n	bb438 <_strtod_l+0x130>
   bb444:	2b00      	cmp	r3, #0
   bb446:	d0a3      	beq.n	bb390 <_strtod_l+0x88>
   bb448:	2301      	movs	r3, #1
   bb44a:	f04f 0900 	mov.w	r9, #0
   bb44e:	9304      	str	r3, [sp, #16]
   bb450:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb452:	9308      	str	r3, [sp, #32]
   bb454:	f8cd 901c 	str.w	r9, [sp, #28]
   bb458:	464f      	mov	r7, r9
   bb45a:	220a      	movs	r2, #10
   bb45c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bb45e:	7806      	ldrb	r6, [r0, #0]
   bb460:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bb464:	b2d9      	uxtb	r1, r3
   bb466:	2909      	cmp	r1, #9
   bb468:	d92a      	bls.n	bb4c0 <_strtod_l+0x1b8>
   bb46a:	9905      	ldr	r1, [sp, #20]
   bb46c:	462a      	mov	r2, r5
   bb46e:	f7ff fef7 	bl	bb260 <strncmp>
   bb472:	b398      	cbz	r0, bb4dc <_strtod_l+0x1d4>
   bb474:	2000      	movs	r0, #0
   bb476:	4632      	mov	r2, r6
   bb478:	463d      	mov	r5, r7
   bb47a:	9005      	str	r0, [sp, #20]
   bb47c:	4603      	mov	r3, r0
   bb47e:	2a65      	cmp	r2, #101	; 0x65
   bb480:	d001      	beq.n	bb486 <_strtod_l+0x17e>
   bb482:	2a45      	cmp	r2, #69	; 0x45
   bb484:	d118      	bne.n	bb4b8 <_strtod_l+0x1b0>
   bb486:	b91d      	cbnz	r5, bb490 <_strtod_l+0x188>
   bb488:	9a04      	ldr	r2, [sp, #16]
   bb48a:	4302      	orrs	r2, r0
   bb48c:	d09e      	beq.n	bb3cc <_strtod_l+0xc4>
   bb48e:	2500      	movs	r5, #0
   bb490:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bb494:	f108 0201 	add.w	r2, r8, #1
   bb498:	9217      	str	r2, [sp, #92]	; 0x5c
   bb49a:	f898 2001 	ldrb.w	r2, [r8, #1]
   bb49e:	2a2b      	cmp	r2, #43	; 0x2b
   bb4a0:	d075      	beq.n	bb58e <_strtod_l+0x286>
   bb4a2:	2a2d      	cmp	r2, #45	; 0x2d
   bb4a4:	d07b      	beq.n	bb59e <_strtod_l+0x296>
   bb4a6:	f04f 0c00 	mov.w	ip, #0
   bb4aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bb4ae:	2909      	cmp	r1, #9
   bb4b0:	f240 8082 	bls.w	bb5b8 <_strtod_l+0x2b0>
   bb4b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb4b8:	2600      	movs	r6, #0
   bb4ba:	e09d      	b.n	bb5f8 <_strtod_l+0x2f0>
   bb4bc:	2300      	movs	r3, #0
   bb4be:	e7c4      	b.n	bb44a <_strtod_l+0x142>
   bb4c0:	2f08      	cmp	r7, #8
   bb4c2:	bfd8      	it	le
   bb4c4:	9907      	ldrle	r1, [sp, #28]
   bb4c6:	f100 0001 	add.w	r0, r0, #1
   bb4ca:	bfda      	itte	le
   bb4cc:	fb02 3301 	mlale	r3, r2, r1, r3
   bb4d0:	9307      	strle	r3, [sp, #28]
   bb4d2:	fb02 3909 	mlagt	r9, r2, r9, r3
   bb4d6:	3701      	adds	r7, #1
   bb4d8:	9017      	str	r0, [sp, #92]	; 0x5c
   bb4da:	e7bf      	b.n	bb45c <_strtod_l+0x154>
   bb4dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb4de:	195a      	adds	r2, r3, r5
   bb4e0:	9217      	str	r2, [sp, #92]	; 0x5c
   bb4e2:	5d5a      	ldrb	r2, [r3, r5]
   bb4e4:	2f00      	cmp	r7, #0
   bb4e6:	d037      	beq.n	bb558 <_strtod_l+0x250>
   bb4e8:	9005      	str	r0, [sp, #20]
   bb4ea:	463d      	mov	r5, r7
   bb4ec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bb4f0:	2b09      	cmp	r3, #9
   bb4f2:	d912      	bls.n	bb51a <_strtod_l+0x212>
   bb4f4:	2301      	movs	r3, #1
   bb4f6:	e7c2      	b.n	bb47e <_strtod_l+0x176>
   bb4f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb4fa:	1c5a      	adds	r2, r3, #1
   bb4fc:	9217      	str	r2, [sp, #92]	; 0x5c
   bb4fe:	785a      	ldrb	r2, [r3, #1]
   bb500:	3001      	adds	r0, #1
   bb502:	2a30      	cmp	r2, #48	; 0x30
   bb504:	d0f8      	beq.n	bb4f8 <_strtod_l+0x1f0>
   bb506:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bb50a:	2b08      	cmp	r3, #8
   bb50c:	f200 84d9 	bhi.w	bbec2 <_strtod_l+0xbba>
   bb510:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb512:	9005      	str	r0, [sp, #20]
   bb514:	2000      	movs	r0, #0
   bb516:	9308      	str	r3, [sp, #32]
   bb518:	4605      	mov	r5, r0
   bb51a:	3a30      	subs	r2, #48	; 0x30
   bb51c:	f100 0301 	add.w	r3, r0, #1
   bb520:	d014      	beq.n	bb54c <_strtod_l+0x244>
   bb522:	9905      	ldr	r1, [sp, #20]
   bb524:	4419      	add	r1, r3
   bb526:	9105      	str	r1, [sp, #20]
   bb528:	462b      	mov	r3, r5
   bb52a:	eb00 0e05 	add.w	lr, r0, r5
   bb52e:	210a      	movs	r1, #10
   bb530:	4573      	cmp	r3, lr
   bb532:	d113      	bne.n	bb55c <_strtod_l+0x254>
   bb534:	182b      	adds	r3, r5, r0
   bb536:	2b08      	cmp	r3, #8
   bb538:	f105 0501 	add.w	r5, r5, #1
   bb53c:	4405      	add	r5, r0
   bb53e:	dc1c      	bgt.n	bb57a <_strtod_l+0x272>
   bb540:	9907      	ldr	r1, [sp, #28]
   bb542:	230a      	movs	r3, #10
   bb544:	fb03 2301 	mla	r3, r3, r1, r2
   bb548:	9307      	str	r3, [sp, #28]
   bb54a:	2300      	movs	r3, #0
   bb54c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb54e:	1c51      	adds	r1, r2, #1
   bb550:	9117      	str	r1, [sp, #92]	; 0x5c
   bb552:	7852      	ldrb	r2, [r2, #1]
   bb554:	4618      	mov	r0, r3
   bb556:	e7c9      	b.n	bb4ec <_strtod_l+0x1e4>
   bb558:	4638      	mov	r0, r7
   bb55a:	e7d2      	b.n	bb502 <_strtod_l+0x1fa>
   bb55c:	2b08      	cmp	r3, #8
   bb55e:	dc04      	bgt.n	bb56a <_strtod_l+0x262>
   bb560:	9e07      	ldr	r6, [sp, #28]
   bb562:	434e      	muls	r6, r1
   bb564:	9607      	str	r6, [sp, #28]
   bb566:	3301      	adds	r3, #1
   bb568:	e7e2      	b.n	bb530 <_strtod_l+0x228>
   bb56a:	f103 0c01 	add.w	ip, r3, #1
   bb56e:	f1bc 0f10 	cmp.w	ip, #16
   bb572:	bfd8      	it	le
   bb574:	fb01 f909 	mulle.w	r9, r1, r9
   bb578:	e7f5      	b.n	bb566 <_strtod_l+0x25e>
   bb57a:	2d10      	cmp	r5, #16
   bb57c:	bfdc      	itt	le
   bb57e:	230a      	movle	r3, #10
   bb580:	fb03 2909 	mlale	r9, r3, r9, r2
   bb584:	e7e1      	b.n	bb54a <_strtod_l+0x242>
   bb586:	2300      	movs	r3, #0
   bb588:	9305      	str	r3, [sp, #20]
   bb58a:	2301      	movs	r3, #1
   bb58c:	e77c      	b.n	bb488 <_strtod_l+0x180>
   bb58e:	f04f 0c00 	mov.w	ip, #0
   bb592:	f108 0202 	add.w	r2, r8, #2
   bb596:	9217      	str	r2, [sp, #92]	; 0x5c
   bb598:	f898 2002 	ldrb.w	r2, [r8, #2]
   bb59c:	e785      	b.n	bb4aa <_strtod_l+0x1a2>
   bb59e:	f04f 0c01 	mov.w	ip, #1
   bb5a2:	e7f6      	b.n	bb592 <_strtod_l+0x28a>
   bb5a4:	000bde3c 	.word	0x000bde3c
   bb5a8:	000bdc78 	.word	0x000bdc78
   bb5ac:	7ff00000 	.word	0x7ff00000
   bb5b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb5b2:	1c51      	adds	r1, r2, #1
   bb5b4:	9117      	str	r1, [sp, #92]	; 0x5c
   bb5b6:	7852      	ldrb	r2, [r2, #1]
   bb5b8:	2a30      	cmp	r2, #48	; 0x30
   bb5ba:	d0f9      	beq.n	bb5b0 <_strtod_l+0x2a8>
   bb5bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bb5c0:	2908      	cmp	r1, #8
   bb5c2:	f63f af79 	bhi.w	bb4b8 <_strtod_l+0x1b0>
   bb5c6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bb5ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb5cc:	9206      	str	r2, [sp, #24]
   bb5ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb5d0:	1c51      	adds	r1, r2, #1
   bb5d2:	9117      	str	r1, [sp, #92]	; 0x5c
   bb5d4:	7852      	ldrb	r2, [r2, #1]
   bb5d6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bb5da:	2e09      	cmp	r6, #9
   bb5dc:	d937      	bls.n	bb64e <_strtod_l+0x346>
   bb5de:	9e06      	ldr	r6, [sp, #24]
   bb5e0:	1b89      	subs	r1, r1, r6
   bb5e2:	2908      	cmp	r1, #8
   bb5e4:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bb5e8:	dc02      	bgt.n	bb5f0 <_strtod_l+0x2e8>
   bb5ea:	4576      	cmp	r6, lr
   bb5ec:	bfa8      	it	ge
   bb5ee:	4676      	movge	r6, lr
   bb5f0:	f1bc 0f00 	cmp.w	ip, #0
   bb5f4:	d000      	beq.n	bb5f8 <_strtod_l+0x2f0>
   bb5f6:	4276      	negs	r6, r6
   bb5f8:	2d00      	cmp	r5, #0
   bb5fa:	d14d      	bne.n	bb698 <_strtod_l+0x390>
   bb5fc:	9904      	ldr	r1, [sp, #16]
   bb5fe:	4301      	orrs	r1, r0
   bb600:	f47f aec6 	bne.w	bb390 <_strtod_l+0x88>
   bb604:	2b00      	cmp	r3, #0
   bb606:	f47f aee1 	bne.w	bb3cc <_strtod_l+0xc4>
   bb60a:	2a69      	cmp	r2, #105	; 0x69
   bb60c:	d027      	beq.n	bb65e <_strtod_l+0x356>
   bb60e:	dc24      	bgt.n	bb65a <_strtod_l+0x352>
   bb610:	2a49      	cmp	r2, #73	; 0x49
   bb612:	d024      	beq.n	bb65e <_strtod_l+0x356>
   bb614:	2a4e      	cmp	r2, #78	; 0x4e
   bb616:	f47f aed9 	bne.w	bb3cc <_strtod_l+0xc4>
   bb61a:	499f      	ldr	r1, [pc, #636]	; (bb898 <_strtod_l+0x590>)
   bb61c:	a817      	add	r0, sp, #92	; 0x5c
   bb61e:	f001 f883 	bl	bc728 <__match>
   bb622:	2800      	cmp	r0, #0
   bb624:	f43f aed2 	beq.w	bb3cc <_strtod_l+0xc4>
   bb628:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb62a:	781b      	ldrb	r3, [r3, #0]
   bb62c:	2b28      	cmp	r3, #40	; 0x28
   bb62e:	d12d      	bne.n	bb68c <_strtod_l+0x384>
   bb630:	499a      	ldr	r1, [pc, #616]	; (bb89c <_strtod_l+0x594>)
   bb632:	aa1a      	add	r2, sp, #104	; 0x68
   bb634:	a817      	add	r0, sp, #92	; 0x5c
   bb636:	f001 f88b 	bl	bc750 <__hexnan>
   bb63a:	2805      	cmp	r0, #5
   bb63c:	d126      	bne.n	bb68c <_strtod_l+0x384>
   bb63e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bb640:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bb644:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bb648:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bb64c:	e6a0      	b.n	bb390 <_strtod_l+0x88>
   bb64e:	210a      	movs	r1, #10
   bb650:	fb01 2e0e 	mla	lr, r1, lr, r2
   bb654:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bb658:	e7b9      	b.n	bb5ce <_strtod_l+0x2c6>
   bb65a:	2a6e      	cmp	r2, #110	; 0x6e
   bb65c:	e7db      	b.n	bb616 <_strtod_l+0x30e>
   bb65e:	4990      	ldr	r1, [pc, #576]	; (bb8a0 <_strtod_l+0x598>)
   bb660:	a817      	add	r0, sp, #92	; 0x5c
   bb662:	f001 f861 	bl	bc728 <__match>
   bb666:	2800      	cmp	r0, #0
   bb668:	f43f aeb0 	beq.w	bb3cc <_strtod_l+0xc4>
   bb66c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb66e:	498d      	ldr	r1, [pc, #564]	; (bb8a4 <_strtod_l+0x59c>)
   bb670:	3b01      	subs	r3, #1
   bb672:	a817      	add	r0, sp, #92	; 0x5c
   bb674:	9317      	str	r3, [sp, #92]	; 0x5c
   bb676:	f001 f857 	bl	bc728 <__match>
   bb67a:	b910      	cbnz	r0, bb682 <_strtod_l+0x37a>
   bb67c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb67e:	3301      	adds	r3, #1
   bb680:	9317      	str	r3, [sp, #92]	; 0x5c
   bb682:	f8df b230 	ldr.w	fp, [pc, #560]	; bb8b4 <_strtod_l+0x5ac>
   bb686:	f04f 0a00 	mov.w	sl, #0
   bb68a:	e681      	b.n	bb390 <_strtod_l+0x88>
   bb68c:	4886      	ldr	r0, [pc, #536]	; (bb8a8 <_strtod_l+0x5a0>)
   bb68e:	f001 fde3 	bl	bd258 <nan>
   bb692:	ec5b ab10 	vmov	sl, fp, d0
   bb696:	e67b      	b.n	bb390 <_strtod_l+0x88>
   bb698:	9b05      	ldr	r3, [sp, #20]
   bb69a:	9807      	ldr	r0, [sp, #28]
   bb69c:	1af3      	subs	r3, r6, r3
   bb69e:	2f00      	cmp	r7, #0
   bb6a0:	bf08      	it	eq
   bb6a2:	462f      	moveq	r7, r5
   bb6a4:	2d10      	cmp	r5, #16
   bb6a6:	9306      	str	r3, [sp, #24]
   bb6a8:	46a8      	mov	r8, r5
   bb6aa:	bfa8      	it	ge
   bb6ac:	f04f 0810 	movge.w	r8, #16
   bb6b0:	f7ff f98c 	bl	ba9cc <__aeabi_ui2d>
   bb6b4:	2d09      	cmp	r5, #9
   bb6b6:	4682      	mov	sl, r0
   bb6b8:	468b      	mov	fp, r1
   bb6ba:	dd13      	ble.n	bb6e4 <_strtod_l+0x3dc>
   bb6bc:	4b7b      	ldr	r3, [pc, #492]	; (bb8ac <_strtod_l+0x5a4>)
   bb6be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bb6c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bb6c6:	f7ff f9fb 	bl	baac0 <__aeabi_dmul>
   bb6ca:	4682      	mov	sl, r0
   bb6cc:	4648      	mov	r0, r9
   bb6ce:	468b      	mov	fp, r1
   bb6d0:	f7ff f97c 	bl	ba9cc <__aeabi_ui2d>
   bb6d4:	4602      	mov	r2, r0
   bb6d6:	460b      	mov	r3, r1
   bb6d8:	4650      	mov	r0, sl
   bb6da:	4659      	mov	r1, fp
   bb6dc:	f7ff f83a 	bl	ba754 <__adddf3>
   bb6e0:	4682      	mov	sl, r0
   bb6e2:	468b      	mov	fp, r1
   bb6e4:	2d0f      	cmp	r5, #15
   bb6e6:	dc38      	bgt.n	bb75a <_strtod_l+0x452>
   bb6e8:	9b06      	ldr	r3, [sp, #24]
   bb6ea:	2b00      	cmp	r3, #0
   bb6ec:	f43f ae50 	beq.w	bb390 <_strtod_l+0x88>
   bb6f0:	dd24      	ble.n	bb73c <_strtod_l+0x434>
   bb6f2:	2b16      	cmp	r3, #22
   bb6f4:	dc0b      	bgt.n	bb70e <_strtod_l+0x406>
   bb6f6:	496d      	ldr	r1, [pc, #436]	; (bb8ac <_strtod_l+0x5a4>)
   bb6f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb6fc:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb700:	4652      	mov	r2, sl
   bb702:	465b      	mov	r3, fp
   bb704:	f7ff f9dc 	bl	baac0 <__aeabi_dmul>
   bb708:	4682      	mov	sl, r0
   bb70a:	468b      	mov	fp, r1
   bb70c:	e640      	b.n	bb390 <_strtod_l+0x88>
   bb70e:	9a06      	ldr	r2, [sp, #24]
   bb710:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bb714:	4293      	cmp	r3, r2
   bb716:	db20      	blt.n	bb75a <_strtod_l+0x452>
   bb718:	4c64      	ldr	r4, [pc, #400]	; (bb8ac <_strtod_l+0x5a4>)
   bb71a:	f1c5 050f 	rsb	r5, r5, #15
   bb71e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bb722:	4652      	mov	r2, sl
   bb724:	465b      	mov	r3, fp
   bb726:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb72a:	f7ff f9c9 	bl	baac0 <__aeabi_dmul>
   bb72e:	9b06      	ldr	r3, [sp, #24]
   bb730:	1b5d      	subs	r5, r3, r5
   bb732:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bb736:	e9d4 2300 	ldrd	r2, r3, [r4]
   bb73a:	e7e3      	b.n	bb704 <_strtod_l+0x3fc>
   bb73c:	9b06      	ldr	r3, [sp, #24]
   bb73e:	3316      	adds	r3, #22
   bb740:	db0b      	blt.n	bb75a <_strtod_l+0x452>
   bb742:	9b05      	ldr	r3, [sp, #20]
   bb744:	1b9e      	subs	r6, r3, r6
   bb746:	4b59      	ldr	r3, [pc, #356]	; (bb8ac <_strtod_l+0x5a4>)
   bb748:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bb74c:	e9d6 2300 	ldrd	r2, r3, [r6]
   bb750:	4650      	mov	r0, sl
   bb752:	4659      	mov	r1, fp
   bb754:	f7ff fade 	bl	bad14 <__aeabi_ddiv>
   bb758:	e7d6      	b.n	bb708 <_strtod_l+0x400>
   bb75a:	9b06      	ldr	r3, [sp, #24]
   bb75c:	eba5 0808 	sub.w	r8, r5, r8
   bb760:	4498      	add	r8, r3
   bb762:	f1b8 0f00 	cmp.w	r8, #0
   bb766:	dd74      	ble.n	bb852 <_strtod_l+0x54a>
   bb768:	f018 030f 	ands.w	r3, r8, #15
   bb76c:	d00a      	beq.n	bb784 <_strtod_l+0x47c>
   bb76e:	494f      	ldr	r1, [pc, #316]	; (bb8ac <_strtod_l+0x5a4>)
   bb770:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb774:	4652      	mov	r2, sl
   bb776:	465b      	mov	r3, fp
   bb778:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb77c:	f7ff f9a0 	bl	baac0 <__aeabi_dmul>
   bb780:	4682      	mov	sl, r0
   bb782:	468b      	mov	fp, r1
   bb784:	f038 080f 	bics.w	r8, r8, #15
   bb788:	d04f      	beq.n	bb82a <_strtod_l+0x522>
   bb78a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bb78e:	dd22      	ble.n	bb7d6 <_strtod_l+0x4ce>
   bb790:	2500      	movs	r5, #0
   bb792:	462e      	mov	r6, r5
   bb794:	9507      	str	r5, [sp, #28]
   bb796:	9505      	str	r5, [sp, #20]
   bb798:	2322      	movs	r3, #34	; 0x22
   bb79a:	f8df b118 	ldr.w	fp, [pc, #280]	; bb8b4 <_strtod_l+0x5ac>
   bb79e:	6023      	str	r3, [r4, #0]
   bb7a0:	f04f 0a00 	mov.w	sl, #0
   bb7a4:	9b07      	ldr	r3, [sp, #28]
   bb7a6:	2b00      	cmp	r3, #0
   bb7a8:	f43f adf2 	beq.w	bb390 <_strtod_l+0x88>
   bb7ac:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb7ae:	4620      	mov	r0, r4
   bb7b0:	f001 f8c0 	bl	bc934 <_Bfree>
   bb7b4:	9905      	ldr	r1, [sp, #20]
   bb7b6:	4620      	mov	r0, r4
   bb7b8:	f001 f8bc 	bl	bc934 <_Bfree>
   bb7bc:	4631      	mov	r1, r6
   bb7be:	4620      	mov	r0, r4
   bb7c0:	f001 f8b8 	bl	bc934 <_Bfree>
   bb7c4:	9907      	ldr	r1, [sp, #28]
   bb7c6:	4620      	mov	r0, r4
   bb7c8:	f001 f8b4 	bl	bc934 <_Bfree>
   bb7cc:	4629      	mov	r1, r5
   bb7ce:	4620      	mov	r0, r4
   bb7d0:	f001 f8b0 	bl	bc934 <_Bfree>
   bb7d4:	e5dc      	b.n	bb390 <_strtod_l+0x88>
   bb7d6:	4b36      	ldr	r3, [pc, #216]	; (bb8b0 <_strtod_l+0x5a8>)
   bb7d8:	9304      	str	r3, [sp, #16]
   bb7da:	2300      	movs	r3, #0
   bb7dc:	ea4f 1828 	mov.w	r8, r8, asr #4
   bb7e0:	4650      	mov	r0, sl
   bb7e2:	4659      	mov	r1, fp
   bb7e4:	4699      	mov	r9, r3
   bb7e6:	f1b8 0f01 	cmp.w	r8, #1
   bb7ea:	dc21      	bgt.n	bb830 <_strtod_l+0x528>
   bb7ec:	b10b      	cbz	r3, bb7f2 <_strtod_l+0x4ea>
   bb7ee:	4682      	mov	sl, r0
   bb7f0:	468b      	mov	fp, r1
   bb7f2:	4b2f      	ldr	r3, [pc, #188]	; (bb8b0 <_strtod_l+0x5a8>)
   bb7f4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bb7f8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bb7fc:	4652      	mov	r2, sl
   bb7fe:	465b      	mov	r3, fp
   bb800:	e9d9 0100 	ldrd	r0, r1, [r9]
   bb804:	f7ff f95c 	bl	baac0 <__aeabi_dmul>
   bb808:	4b2a      	ldr	r3, [pc, #168]	; (bb8b4 <_strtod_l+0x5ac>)
   bb80a:	460a      	mov	r2, r1
   bb80c:	400b      	ands	r3, r1
   bb80e:	492a      	ldr	r1, [pc, #168]	; (bb8b8 <_strtod_l+0x5b0>)
   bb810:	428b      	cmp	r3, r1
   bb812:	4682      	mov	sl, r0
   bb814:	d8bc      	bhi.n	bb790 <_strtod_l+0x488>
   bb816:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bb81a:	428b      	cmp	r3, r1
   bb81c:	bf86      	itte	hi
   bb81e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bb8bc <_strtod_l+0x5b4>
   bb822:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bb826:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bb82a:	2300      	movs	r3, #0
   bb82c:	9304      	str	r3, [sp, #16]
   bb82e:	e084      	b.n	bb93a <_strtod_l+0x632>
   bb830:	f018 0f01 	tst.w	r8, #1
   bb834:	d005      	beq.n	bb842 <_strtod_l+0x53a>
   bb836:	9b04      	ldr	r3, [sp, #16]
   bb838:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb83c:	f7ff f940 	bl	baac0 <__aeabi_dmul>
   bb840:	2301      	movs	r3, #1
   bb842:	9a04      	ldr	r2, [sp, #16]
   bb844:	3208      	adds	r2, #8
   bb846:	f109 0901 	add.w	r9, r9, #1
   bb84a:	ea4f 0868 	mov.w	r8, r8, asr #1
   bb84e:	9204      	str	r2, [sp, #16]
   bb850:	e7c9      	b.n	bb7e6 <_strtod_l+0x4de>
   bb852:	d0ea      	beq.n	bb82a <_strtod_l+0x522>
   bb854:	f1c8 0800 	rsb	r8, r8, #0
   bb858:	f018 020f 	ands.w	r2, r8, #15
   bb85c:	d00a      	beq.n	bb874 <_strtod_l+0x56c>
   bb85e:	4b13      	ldr	r3, [pc, #76]	; (bb8ac <_strtod_l+0x5a4>)
   bb860:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bb864:	4650      	mov	r0, sl
   bb866:	4659      	mov	r1, fp
   bb868:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb86c:	f7ff fa52 	bl	bad14 <__aeabi_ddiv>
   bb870:	4682      	mov	sl, r0
   bb872:	468b      	mov	fp, r1
   bb874:	ea5f 1828 	movs.w	r8, r8, asr #4
   bb878:	d0d7      	beq.n	bb82a <_strtod_l+0x522>
   bb87a:	f1b8 0f1f 	cmp.w	r8, #31
   bb87e:	dd1f      	ble.n	bb8c0 <_strtod_l+0x5b8>
   bb880:	2500      	movs	r5, #0
   bb882:	462e      	mov	r6, r5
   bb884:	9507      	str	r5, [sp, #28]
   bb886:	9505      	str	r5, [sp, #20]
   bb888:	2322      	movs	r3, #34	; 0x22
   bb88a:	f04f 0a00 	mov.w	sl, #0
   bb88e:	f04f 0b00 	mov.w	fp, #0
   bb892:	6023      	str	r3, [r4, #0]
   bb894:	e786      	b.n	bb7a4 <_strtod_l+0x49c>
   bb896:	bf00      	nop
   bb898:	000bdc72 	.word	0x000bdc72
   bb89c:	000bdc8c 	.word	0x000bdc8c
   bb8a0:	000bdc69 	.word	0x000bdc69
   bb8a4:	000bdc6c 	.word	0x000bdc6c
   bb8a8:	000bd6e6 	.word	0x000bd6e6
   bb8ac:	000bded8 	.word	0x000bded8
   bb8b0:	000bdeb0 	.word	0x000bdeb0
   bb8b4:	7ff00000 	.word	0x7ff00000
   bb8b8:	7ca00000 	.word	0x7ca00000
   bb8bc:	7fefffff 	.word	0x7fefffff
   bb8c0:	f018 0310 	ands.w	r3, r8, #16
   bb8c4:	bf18      	it	ne
   bb8c6:	236a      	movne	r3, #106	; 0x6a
   bb8c8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bbc78 <_strtod_l+0x970>
   bb8cc:	9304      	str	r3, [sp, #16]
   bb8ce:	4650      	mov	r0, sl
   bb8d0:	4659      	mov	r1, fp
   bb8d2:	2300      	movs	r3, #0
   bb8d4:	f018 0f01 	tst.w	r8, #1
   bb8d8:	d004      	beq.n	bb8e4 <_strtod_l+0x5dc>
   bb8da:	e9d9 2300 	ldrd	r2, r3, [r9]
   bb8de:	f7ff f8ef 	bl	baac0 <__aeabi_dmul>
   bb8e2:	2301      	movs	r3, #1
   bb8e4:	ea5f 0868 	movs.w	r8, r8, asr #1
   bb8e8:	f109 0908 	add.w	r9, r9, #8
   bb8ec:	d1f2      	bne.n	bb8d4 <_strtod_l+0x5cc>
   bb8ee:	b10b      	cbz	r3, bb8f4 <_strtod_l+0x5ec>
   bb8f0:	4682      	mov	sl, r0
   bb8f2:	468b      	mov	fp, r1
   bb8f4:	9b04      	ldr	r3, [sp, #16]
   bb8f6:	b1c3      	cbz	r3, bb92a <_strtod_l+0x622>
   bb8f8:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bb8fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bb900:	2b00      	cmp	r3, #0
   bb902:	4659      	mov	r1, fp
   bb904:	dd11      	ble.n	bb92a <_strtod_l+0x622>
   bb906:	2b1f      	cmp	r3, #31
   bb908:	f340 8124 	ble.w	bbb54 <_strtod_l+0x84c>
   bb90c:	2b34      	cmp	r3, #52	; 0x34
   bb90e:	bfde      	ittt	le
   bb910:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bb914:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bb918:	fa03 f202 	lslle.w	r2, r3, r2
   bb91c:	f04f 0a00 	mov.w	sl, #0
   bb920:	bfcc      	ite	gt
   bb922:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bb926:	ea02 0b01 	andle.w	fp, r2, r1
   bb92a:	2200      	movs	r2, #0
   bb92c:	2300      	movs	r3, #0
   bb92e:	4650      	mov	r0, sl
   bb930:	4659      	mov	r1, fp
   bb932:	f7ff fb2d 	bl	baf90 <__aeabi_dcmpeq>
   bb936:	2800      	cmp	r0, #0
   bb938:	d1a2      	bne.n	bb880 <_strtod_l+0x578>
   bb93a:	9b07      	ldr	r3, [sp, #28]
   bb93c:	9300      	str	r3, [sp, #0]
   bb93e:	9908      	ldr	r1, [sp, #32]
   bb940:	462b      	mov	r3, r5
   bb942:	463a      	mov	r2, r7
   bb944:	4620      	mov	r0, r4
   bb946:	f001 f85d 	bl	bca04 <__s2b>
   bb94a:	9007      	str	r0, [sp, #28]
   bb94c:	2800      	cmp	r0, #0
   bb94e:	f43f af1f 	beq.w	bb790 <_strtod_l+0x488>
   bb952:	9b05      	ldr	r3, [sp, #20]
   bb954:	1b9e      	subs	r6, r3, r6
   bb956:	9b06      	ldr	r3, [sp, #24]
   bb958:	2b00      	cmp	r3, #0
   bb95a:	bfb4      	ite	lt
   bb95c:	4633      	movlt	r3, r6
   bb95e:	2300      	movge	r3, #0
   bb960:	930c      	str	r3, [sp, #48]	; 0x30
   bb962:	9b06      	ldr	r3, [sp, #24]
   bb964:	2500      	movs	r5, #0
   bb966:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bb96a:	9312      	str	r3, [sp, #72]	; 0x48
   bb96c:	462e      	mov	r6, r5
   bb96e:	9b07      	ldr	r3, [sp, #28]
   bb970:	4620      	mov	r0, r4
   bb972:	6859      	ldr	r1, [r3, #4]
   bb974:	f000 ff9e 	bl	bc8b4 <_Balloc>
   bb978:	9005      	str	r0, [sp, #20]
   bb97a:	2800      	cmp	r0, #0
   bb97c:	f43f af0c 	beq.w	bb798 <_strtod_l+0x490>
   bb980:	9b07      	ldr	r3, [sp, #28]
   bb982:	691a      	ldr	r2, [r3, #16]
   bb984:	3202      	adds	r2, #2
   bb986:	f103 010c 	add.w	r1, r3, #12
   bb98a:	0092      	lsls	r2, r2, #2
   bb98c:	300c      	adds	r0, #12
   bb98e:	f7ff fbef 	bl	bb170 <memcpy>
   bb992:	ec4b ab10 	vmov	d0, sl, fp
   bb996:	aa1a      	add	r2, sp, #104	; 0x68
   bb998:	a919      	add	r1, sp, #100	; 0x64
   bb99a:	4620      	mov	r0, r4
   bb99c:	f001 fb78 	bl	bd090 <__d2b>
   bb9a0:	ec4b ab18 	vmov	d8, sl, fp
   bb9a4:	9018      	str	r0, [sp, #96]	; 0x60
   bb9a6:	2800      	cmp	r0, #0
   bb9a8:	f43f aef6 	beq.w	bb798 <_strtod_l+0x490>
   bb9ac:	2101      	movs	r1, #1
   bb9ae:	4620      	mov	r0, r4
   bb9b0:	f001 f8c2 	bl	bcb38 <__i2b>
   bb9b4:	4606      	mov	r6, r0
   bb9b6:	2800      	cmp	r0, #0
   bb9b8:	f43f aeee 	beq.w	bb798 <_strtod_l+0x490>
   bb9bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bb9be:	9904      	ldr	r1, [sp, #16]
   bb9c0:	2b00      	cmp	r3, #0
   bb9c2:	bfab      	itete	ge
   bb9c4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bb9c6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bb9c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bb9ca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bb9ce:	bfac      	ite	ge
   bb9d0:	eb03 0902 	addge.w	r9, r3, r2
   bb9d4:	1ad7      	sublt	r7, r2, r3
   bb9d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bb9d8:	eba3 0801 	sub.w	r8, r3, r1
   bb9dc:	4490      	add	r8, r2
   bb9de:	4ba1      	ldr	r3, [pc, #644]	; (bbc64 <_strtod_l+0x95c>)
   bb9e0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bb9e4:	4598      	cmp	r8, r3
   bb9e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bb9ea:	f280 80c7 	bge.w	bbb7c <_strtod_l+0x874>
   bb9ee:	eba3 0308 	sub.w	r3, r3, r8
   bb9f2:	2b1f      	cmp	r3, #31
   bb9f4:	eba2 0203 	sub.w	r2, r2, r3
   bb9f8:	f04f 0101 	mov.w	r1, #1
   bb9fc:	f300 80b1 	bgt.w	bbb62 <_strtod_l+0x85a>
   bba00:	fa01 f303 	lsl.w	r3, r1, r3
   bba04:	930d      	str	r3, [sp, #52]	; 0x34
   bba06:	2300      	movs	r3, #0
   bba08:	9308      	str	r3, [sp, #32]
   bba0a:	eb09 0802 	add.w	r8, r9, r2
   bba0e:	9b04      	ldr	r3, [sp, #16]
   bba10:	45c1      	cmp	r9, r8
   bba12:	4417      	add	r7, r2
   bba14:	441f      	add	r7, r3
   bba16:	464b      	mov	r3, r9
   bba18:	bfa8      	it	ge
   bba1a:	4643      	movge	r3, r8
   bba1c:	42bb      	cmp	r3, r7
   bba1e:	bfa8      	it	ge
   bba20:	463b      	movge	r3, r7
   bba22:	2b00      	cmp	r3, #0
   bba24:	bfc2      	ittt	gt
   bba26:	eba8 0803 	subgt.w	r8, r8, r3
   bba2a:	1aff      	subgt	r7, r7, r3
   bba2c:	eba9 0903 	subgt.w	r9, r9, r3
   bba30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bba32:	2b00      	cmp	r3, #0
   bba34:	dd17      	ble.n	bba66 <_strtod_l+0x75e>
   bba36:	4631      	mov	r1, r6
   bba38:	461a      	mov	r2, r3
   bba3a:	4620      	mov	r0, r4
   bba3c:	f001 f93c 	bl	bccb8 <__pow5mult>
   bba40:	4606      	mov	r6, r0
   bba42:	2800      	cmp	r0, #0
   bba44:	f43f aea8 	beq.w	bb798 <_strtod_l+0x490>
   bba48:	4601      	mov	r1, r0
   bba4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bba4c:	4620      	mov	r0, r4
   bba4e:	f001 f889 	bl	bcb64 <__multiply>
   bba52:	900b      	str	r0, [sp, #44]	; 0x2c
   bba54:	2800      	cmp	r0, #0
   bba56:	f43f ae9f 	beq.w	bb798 <_strtod_l+0x490>
   bba5a:	9918      	ldr	r1, [sp, #96]	; 0x60
   bba5c:	4620      	mov	r0, r4
   bba5e:	f000 ff69 	bl	bc934 <_Bfree>
   bba62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bba64:	9318      	str	r3, [sp, #96]	; 0x60
   bba66:	f1b8 0f00 	cmp.w	r8, #0
   bba6a:	f300 808c 	bgt.w	bbb86 <_strtod_l+0x87e>
   bba6e:	9b06      	ldr	r3, [sp, #24]
   bba70:	2b00      	cmp	r3, #0
   bba72:	dd08      	ble.n	bba86 <_strtod_l+0x77e>
   bba74:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bba76:	9905      	ldr	r1, [sp, #20]
   bba78:	4620      	mov	r0, r4
   bba7a:	f001 f91d 	bl	bccb8 <__pow5mult>
   bba7e:	9005      	str	r0, [sp, #20]
   bba80:	2800      	cmp	r0, #0
   bba82:	f43f ae89 	beq.w	bb798 <_strtod_l+0x490>
   bba86:	2f00      	cmp	r7, #0
   bba88:	dd08      	ble.n	bba9c <_strtod_l+0x794>
   bba8a:	9905      	ldr	r1, [sp, #20]
   bba8c:	463a      	mov	r2, r7
   bba8e:	4620      	mov	r0, r4
   bba90:	f001 f96c 	bl	bcd6c <__lshift>
   bba94:	9005      	str	r0, [sp, #20]
   bba96:	2800      	cmp	r0, #0
   bba98:	f43f ae7e 	beq.w	bb798 <_strtod_l+0x490>
   bba9c:	f1b9 0f00 	cmp.w	r9, #0
   bbaa0:	dd08      	ble.n	bbab4 <_strtod_l+0x7ac>
   bbaa2:	4631      	mov	r1, r6
   bbaa4:	464a      	mov	r2, r9
   bbaa6:	4620      	mov	r0, r4
   bbaa8:	f001 f960 	bl	bcd6c <__lshift>
   bbaac:	4606      	mov	r6, r0
   bbaae:	2800      	cmp	r0, #0
   bbab0:	f43f ae72 	beq.w	bb798 <_strtod_l+0x490>
   bbab4:	9a05      	ldr	r2, [sp, #20]
   bbab6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbab8:	4620      	mov	r0, r4
   bbaba:	f001 f9e3 	bl	bce84 <__mdiff>
   bbabe:	4605      	mov	r5, r0
   bbac0:	2800      	cmp	r0, #0
   bbac2:	f43f ae69 	beq.w	bb798 <_strtod_l+0x490>
   bbac6:	68c3      	ldr	r3, [r0, #12]
   bbac8:	930b      	str	r3, [sp, #44]	; 0x2c
   bbaca:	2300      	movs	r3, #0
   bbacc:	60c3      	str	r3, [r0, #12]
   bbace:	4631      	mov	r1, r6
   bbad0:	f001 f9bc 	bl	bce4c <__mcmp>
   bbad4:	2800      	cmp	r0, #0
   bbad6:	da60      	bge.n	bbb9a <_strtod_l+0x892>
   bbad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbada:	ea53 030a 	orrs.w	r3, r3, sl
   bbade:	f040 8082 	bne.w	bbbe6 <_strtod_l+0x8de>
   bbae2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbae6:	2b00      	cmp	r3, #0
   bbae8:	d17d      	bne.n	bbbe6 <_strtod_l+0x8de>
   bbaea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bbaee:	0d1b      	lsrs	r3, r3, #20
   bbaf0:	051b      	lsls	r3, r3, #20
   bbaf2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bbaf6:	d976      	bls.n	bbbe6 <_strtod_l+0x8de>
   bbaf8:	696b      	ldr	r3, [r5, #20]
   bbafa:	b913      	cbnz	r3, bbb02 <_strtod_l+0x7fa>
   bbafc:	692b      	ldr	r3, [r5, #16]
   bbafe:	2b01      	cmp	r3, #1
   bbb00:	dd71      	ble.n	bbbe6 <_strtod_l+0x8de>
   bbb02:	4629      	mov	r1, r5
   bbb04:	2201      	movs	r2, #1
   bbb06:	4620      	mov	r0, r4
   bbb08:	f001 f930 	bl	bcd6c <__lshift>
   bbb0c:	4631      	mov	r1, r6
   bbb0e:	4605      	mov	r5, r0
   bbb10:	f001 f99c 	bl	bce4c <__mcmp>
   bbb14:	2800      	cmp	r0, #0
   bbb16:	dd66      	ble.n	bbbe6 <_strtod_l+0x8de>
   bbb18:	9904      	ldr	r1, [sp, #16]
   bbb1a:	4a53      	ldr	r2, [pc, #332]	; (bbc68 <_strtod_l+0x960>)
   bbb1c:	465b      	mov	r3, fp
   bbb1e:	2900      	cmp	r1, #0
   bbb20:	f000 8081 	beq.w	bbc26 <_strtod_l+0x91e>
   bbb24:	ea02 010b 	and.w	r1, r2, fp
   bbb28:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bbb2c:	dc7b      	bgt.n	bbc26 <_strtod_l+0x91e>
   bbb2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bbb32:	f77f aea9 	ble.w	bb888 <_strtod_l+0x580>
   bbb36:	4b4d      	ldr	r3, [pc, #308]	; (bbc6c <_strtod_l+0x964>)
   bbb38:	4650      	mov	r0, sl
   bbb3a:	4659      	mov	r1, fp
   bbb3c:	2200      	movs	r2, #0
   bbb3e:	f7fe ffbf 	bl	baac0 <__aeabi_dmul>
   bbb42:	460b      	mov	r3, r1
   bbb44:	4303      	orrs	r3, r0
   bbb46:	bf08      	it	eq
   bbb48:	2322      	moveq	r3, #34	; 0x22
   bbb4a:	4682      	mov	sl, r0
   bbb4c:	468b      	mov	fp, r1
   bbb4e:	bf08      	it	eq
   bbb50:	6023      	streq	r3, [r4, #0]
   bbb52:	e62b      	b.n	bb7ac <_strtod_l+0x4a4>
   bbb54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbb58:	fa02 f303 	lsl.w	r3, r2, r3
   bbb5c:	ea03 0a0a 	and.w	sl, r3, sl
   bbb60:	e6e3      	b.n	bb92a <_strtod_l+0x622>
   bbb62:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bbb66:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bbb6a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bbb6e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bbb72:	fa01 f308 	lsl.w	r3, r1, r8
   bbb76:	9308      	str	r3, [sp, #32]
   bbb78:	910d      	str	r1, [sp, #52]	; 0x34
   bbb7a:	e746      	b.n	bba0a <_strtod_l+0x702>
   bbb7c:	2300      	movs	r3, #0
   bbb7e:	9308      	str	r3, [sp, #32]
   bbb80:	2301      	movs	r3, #1
   bbb82:	930d      	str	r3, [sp, #52]	; 0x34
   bbb84:	e741      	b.n	bba0a <_strtod_l+0x702>
   bbb86:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbb88:	4642      	mov	r2, r8
   bbb8a:	4620      	mov	r0, r4
   bbb8c:	f001 f8ee 	bl	bcd6c <__lshift>
   bbb90:	9018      	str	r0, [sp, #96]	; 0x60
   bbb92:	2800      	cmp	r0, #0
   bbb94:	f47f af6b 	bne.w	bba6e <_strtod_l+0x766>
   bbb98:	e5fe      	b.n	bb798 <_strtod_l+0x490>
   bbb9a:	465f      	mov	r7, fp
   bbb9c:	d16e      	bne.n	bbc7c <_strtod_l+0x974>
   bbb9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bbba0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbba4:	b342      	cbz	r2, bbbf8 <_strtod_l+0x8f0>
   bbba6:	4a32      	ldr	r2, [pc, #200]	; (bbc70 <_strtod_l+0x968>)
   bbba8:	4293      	cmp	r3, r2
   bbbaa:	d128      	bne.n	bbbfe <_strtod_l+0x8f6>
   bbbac:	9b04      	ldr	r3, [sp, #16]
   bbbae:	4651      	mov	r1, sl
   bbbb0:	b1eb      	cbz	r3, bbbee <_strtod_l+0x8e6>
   bbbb2:	4b2d      	ldr	r3, [pc, #180]	; (bbc68 <_strtod_l+0x960>)
   bbbb4:	403b      	ands	r3, r7
   bbbb6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bbbba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbbbe:	d819      	bhi.n	bbbf4 <_strtod_l+0x8ec>
   bbbc0:	0d1b      	lsrs	r3, r3, #20
   bbbc2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bbbc6:	fa02 f303 	lsl.w	r3, r2, r3
   bbbca:	4299      	cmp	r1, r3
   bbbcc:	d117      	bne.n	bbbfe <_strtod_l+0x8f6>
   bbbce:	4b29      	ldr	r3, [pc, #164]	; (bbc74 <_strtod_l+0x96c>)
   bbbd0:	429f      	cmp	r7, r3
   bbbd2:	d102      	bne.n	bbbda <_strtod_l+0x8d2>
   bbbd4:	3101      	adds	r1, #1
   bbbd6:	f43f addf 	beq.w	bb798 <_strtod_l+0x490>
   bbbda:	4b23      	ldr	r3, [pc, #140]	; (bbc68 <_strtod_l+0x960>)
   bbbdc:	403b      	ands	r3, r7
   bbbde:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bbbe2:	f04f 0a00 	mov.w	sl, #0
   bbbe6:	9b04      	ldr	r3, [sp, #16]
   bbbe8:	2b00      	cmp	r3, #0
   bbbea:	d1a4      	bne.n	bbb36 <_strtod_l+0x82e>
   bbbec:	e5de      	b.n	bb7ac <_strtod_l+0x4a4>
   bbbee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bbbf2:	e7ea      	b.n	bbbca <_strtod_l+0x8c2>
   bbbf4:	4613      	mov	r3, r2
   bbbf6:	e7e8      	b.n	bbbca <_strtod_l+0x8c2>
   bbbf8:	ea53 030a 	orrs.w	r3, r3, sl
   bbbfc:	d08c      	beq.n	bbb18 <_strtod_l+0x810>
   bbbfe:	9b08      	ldr	r3, [sp, #32]
   bbc00:	b1db      	cbz	r3, bbc3a <_strtod_l+0x932>
   bbc02:	423b      	tst	r3, r7
   bbc04:	d0ef      	beq.n	bbbe6 <_strtod_l+0x8de>
   bbc06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbc08:	9a04      	ldr	r2, [sp, #16]
   bbc0a:	4650      	mov	r0, sl
   bbc0c:	4659      	mov	r1, fp
   bbc0e:	b1c3      	cbz	r3, bbc42 <_strtod_l+0x93a>
   bbc10:	f7ff fb5c 	bl	bb2cc <sulp>
   bbc14:	4602      	mov	r2, r0
   bbc16:	460b      	mov	r3, r1
   bbc18:	ec51 0b18 	vmov	r0, r1, d8
   bbc1c:	f7fe fd9a 	bl	ba754 <__adddf3>
   bbc20:	4682      	mov	sl, r0
   bbc22:	468b      	mov	fp, r1
   bbc24:	e7df      	b.n	bbbe6 <_strtod_l+0x8de>
   bbc26:	4013      	ands	r3, r2
   bbc28:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bbc2c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bbc30:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bbc34:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bbc38:	e7d5      	b.n	bbbe6 <_strtod_l+0x8de>
   bbc3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bbc3c:	ea13 0f0a 	tst.w	r3, sl
   bbc40:	e7e0      	b.n	bbc04 <_strtod_l+0x8fc>
   bbc42:	f7ff fb43 	bl	bb2cc <sulp>
   bbc46:	4602      	mov	r2, r0
   bbc48:	460b      	mov	r3, r1
   bbc4a:	ec51 0b18 	vmov	r0, r1, d8
   bbc4e:	f7fe fd7f 	bl	ba750 <__aeabi_dsub>
   bbc52:	2200      	movs	r2, #0
   bbc54:	2300      	movs	r3, #0
   bbc56:	4682      	mov	sl, r0
   bbc58:	468b      	mov	fp, r1
   bbc5a:	f7ff f999 	bl	baf90 <__aeabi_dcmpeq>
   bbc5e:	2800      	cmp	r0, #0
   bbc60:	d0c1      	beq.n	bbbe6 <_strtod_l+0x8de>
   bbc62:	e611      	b.n	bb888 <_strtod_l+0x580>
   bbc64:	fffffc02 	.word	0xfffffc02
   bbc68:	7ff00000 	.word	0x7ff00000
   bbc6c:	39500000 	.word	0x39500000
   bbc70:	000fffff 	.word	0x000fffff
   bbc74:	7fefffff 	.word	0x7fefffff
   bbc78:	000bdca0 	.word	0x000bdca0
   bbc7c:	4631      	mov	r1, r6
   bbc7e:	4628      	mov	r0, r5
   bbc80:	f001 fa62 	bl	bd148 <__ratio>
   bbc84:	ec59 8b10 	vmov	r8, r9, d0
   bbc88:	ee10 0a10 	vmov	r0, s0
   bbc8c:	2200      	movs	r2, #0
   bbc8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bbc92:	4649      	mov	r1, r9
   bbc94:	f7ff f990 	bl	bafb8 <__aeabi_dcmple>
   bbc98:	2800      	cmp	r0, #0
   bbc9a:	d07a      	beq.n	bbd92 <_strtod_l+0xa8a>
   bbc9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbc9e:	2b00      	cmp	r3, #0
   bbca0:	d04a      	beq.n	bbd38 <_strtod_l+0xa30>
   bbca2:	4b95      	ldr	r3, [pc, #596]	; (bbef8 <_strtod_l+0xbf0>)
   bbca4:	2200      	movs	r2, #0
   bbca6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbcaa:	f8df 924c 	ldr.w	r9, [pc, #588]	; bbef8 <_strtod_l+0xbf0>
   bbcae:	f04f 0800 	mov.w	r8, #0
   bbcb2:	4b92      	ldr	r3, [pc, #584]	; (bbefc <_strtod_l+0xbf4>)
   bbcb4:	403b      	ands	r3, r7
   bbcb6:	930d      	str	r3, [sp, #52]	; 0x34
   bbcb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbcba:	4b91      	ldr	r3, [pc, #580]	; (bbf00 <_strtod_l+0xbf8>)
   bbcbc:	429a      	cmp	r2, r3
   bbcbe:	f040 80b0 	bne.w	bbe22 <_strtod_l+0xb1a>
   bbcc2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbcc6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bbcca:	ec4b ab10 	vmov	d0, sl, fp
   bbcce:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bbcd2:	f001 f961 	bl	bcf98 <__ulp>
   bbcd6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbcda:	ec53 2b10 	vmov	r2, r3, d0
   bbcde:	f7fe feef 	bl	baac0 <__aeabi_dmul>
   bbce2:	4652      	mov	r2, sl
   bbce4:	465b      	mov	r3, fp
   bbce6:	f7fe fd35 	bl	ba754 <__adddf3>
   bbcea:	460b      	mov	r3, r1
   bbcec:	4983      	ldr	r1, [pc, #524]	; (bbefc <_strtod_l+0xbf4>)
   bbcee:	4a85      	ldr	r2, [pc, #532]	; (bbf04 <_strtod_l+0xbfc>)
   bbcf0:	4019      	ands	r1, r3
   bbcf2:	4291      	cmp	r1, r2
   bbcf4:	4682      	mov	sl, r0
   bbcf6:	d960      	bls.n	bbdba <_strtod_l+0xab2>
   bbcf8:	ee18 3a90 	vmov	r3, s17
   bbcfc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bbd00:	4293      	cmp	r3, r2
   bbd02:	d104      	bne.n	bbd0e <_strtod_l+0xa06>
   bbd04:	ee18 3a10 	vmov	r3, s16
   bbd08:	3301      	adds	r3, #1
   bbd0a:	f43f ad45 	beq.w	bb798 <_strtod_l+0x490>
   bbd0e:	f8df b200 	ldr.w	fp, [pc, #512]	; bbf10 <_strtod_l+0xc08>
   bbd12:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bbd16:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbd18:	4620      	mov	r0, r4
   bbd1a:	f000 fe0b 	bl	bc934 <_Bfree>
   bbd1e:	9905      	ldr	r1, [sp, #20]
   bbd20:	4620      	mov	r0, r4
   bbd22:	f000 fe07 	bl	bc934 <_Bfree>
   bbd26:	4631      	mov	r1, r6
   bbd28:	4620      	mov	r0, r4
   bbd2a:	f000 fe03 	bl	bc934 <_Bfree>
   bbd2e:	4629      	mov	r1, r5
   bbd30:	4620      	mov	r0, r4
   bbd32:	f000 fdff 	bl	bc934 <_Bfree>
   bbd36:	e61a      	b.n	bb96e <_strtod_l+0x666>
   bbd38:	f1ba 0f00 	cmp.w	sl, #0
   bbd3c:	d11b      	bne.n	bbd76 <_strtod_l+0xa6e>
   bbd3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbd42:	b9f3      	cbnz	r3, bbd82 <_strtod_l+0xa7a>
   bbd44:	4b6c      	ldr	r3, [pc, #432]	; (bbef8 <_strtod_l+0xbf0>)
   bbd46:	2200      	movs	r2, #0
   bbd48:	4640      	mov	r0, r8
   bbd4a:	4649      	mov	r1, r9
   bbd4c:	f7ff f92a 	bl	bafa4 <__aeabi_dcmplt>
   bbd50:	b9d0      	cbnz	r0, bbd88 <_strtod_l+0xa80>
   bbd52:	4640      	mov	r0, r8
   bbd54:	4649      	mov	r1, r9
   bbd56:	4b6c      	ldr	r3, [pc, #432]	; (bbf08 <_strtod_l+0xc00>)
   bbd58:	2200      	movs	r2, #0
   bbd5a:	f7fe feb1 	bl	baac0 <__aeabi_dmul>
   bbd5e:	4680      	mov	r8, r0
   bbd60:	4689      	mov	r9, r1
   bbd62:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bbd66:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bbd6a:	9315      	str	r3, [sp, #84]	; 0x54
   bbd6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bbd70:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbd74:	e79d      	b.n	bbcb2 <_strtod_l+0x9aa>
   bbd76:	f1ba 0f01 	cmp.w	sl, #1
   bbd7a:	d102      	bne.n	bbd82 <_strtod_l+0xa7a>
   bbd7c:	2f00      	cmp	r7, #0
   bbd7e:	f43f ad83 	beq.w	bb888 <_strtod_l+0x580>
   bbd82:	4b62      	ldr	r3, [pc, #392]	; (bbf0c <_strtod_l+0xc04>)
   bbd84:	2200      	movs	r2, #0
   bbd86:	e78e      	b.n	bbca6 <_strtod_l+0x99e>
   bbd88:	f8df 917c 	ldr.w	r9, [pc, #380]	; bbf08 <_strtod_l+0xc00>
   bbd8c:	f04f 0800 	mov.w	r8, #0
   bbd90:	e7e7      	b.n	bbd62 <_strtod_l+0xa5a>
   bbd92:	4b5d      	ldr	r3, [pc, #372]	; (bbf08 <_strtod_l+0xc00>)
   bbd94:	4640      	mov	r0, r8
   bbd96:	4649      	mov	r1, r9
   bbd98:	2200      	movs	r2, #0
   bbd9a:	f7fe fe91 	bl	baac0 <__aeabi_dmul>
   bbd9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbda0:	4680      	mov	r8, r0
   bbda2:	4689      	mov	r9, r1
   bbda4:	b933      	cbnz	r3, bbdb4 <_strtod_l+0xaac>
   bbda6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bbdaa:	900e      	str	r0, [sp, #56]	; 0x38
   bbdac:	930f      	str	r3, [sp, #60]	; 0x3c
   bbdae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bbdb2:	e7dd      	b.n	bbd70 <_strtod_l+0xa68>
   bbdb4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bbdb8:	e7f9      	b.n	bbdae <_strtod_l+0xaa6>
   bbdba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bbdbe:	9b04      	ldr	r3, [sp, #16]
   bbdc0:	2b00      	cmp	r3, #0
   bbdc2:	d1a8      	bne.n	bbd16 <_strtod_l+0xa0e>
   bbdc4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bbdc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbdca:	0d1b      	lsrs	r3, r3, #20
   bbdcc:	051b      	lsls	r3, r3, #20
   bbdce:	429a      	cmp	r2, r3
   bbdd0:	d1a1      	bne.n	bbd16 <_strtod_l+0xa0e>
   bbdd2:	4640      	mov	r0, r8
   bbdd4:	4649      	mov	r1, r9
   bbdd6:	f001 fa5b 	bl	bd290 <__aeabi_d2lz>
   bbdda:	f7fe fe43 	bl	baa64 <__aeabi_l2d>
   bbdde:	4602      	mov	r2, r0
   bbde0:	460b      	mov	r3, r1
   bbde2:	4640      	mov	r0, r8
   bbde4:	4649      	mov	r1, r9
   bbde6:	f7fe fcb3 	bl	ba750 <__aeabi_dsub>
   bbdea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bbdec:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbdf0:	ea43 030a 	orr.w	r3, r3, sl
   bbdf4:	4313      	orrs	r3, r2
   bbdf6:	4680      	mov	r8, r0
   bbdf8:	4689      	mov	r9, r1
   bbdfa:	d055      	beq.n	bbea8 <_strtod_l+0xba0>
   bbdfc:	a336      	add	r3, pc, #216	; (adr r3, bbed8 <_strtod_l+0xbd0>)
   bbdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbe02:	f7ff f8cf 	bl	bafa4 <__aeabi_dcmplt>
   bbe06:	2800      	cmp	r0, #0
   bbe08:	f47f acd0 	bne.w	bb7ac <_strtod_l+0x4a4>
   bbe0c:	a334      	add	r3, pc, #208	; (adr r3, bbee0 <_strtod_l+0xbd8>)
   bbe0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbe12:	4640      	mov	r0, r8
   bbe14:	4649      	mov	r1, r9
   bbe16:	f7ff f8e3 	bl	bafe0 <__aeabi_dcmpgt>
   bbe1a:	2800      	cmp	r0, #0
   bbe1c:	f43f af7b 	beq.w	bbd16 <_strtod_l+0xa0e>
   bbe20:	e4c4      	b.n	bb7ac <_strtod_l+0x4a4>
   bbe22:	9b04      	ldr	r3, [sp, #16]
   bbe24:	b333      	cbz	r3, bbe74 <_strtod_l+0xb6c>
   bbe26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bbe28:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bbe2c:	d822      	bhi.n	bbe74 <_strtod_l+0xb6c>
   bbe2e:	a32e      	add	r3, pc, #184	; (adr r3, bbee8 <_strtod_l+0xbe0>)
   bbe30:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbe34:	4640      	mov	r0, r8
   bbe36:	4649      	mov	r1, r9
   bbe38:	f7ff f8be 	bl	bafb8 <__aeabi_dcmple>
   bbe3c:	b1a0      	cbz	r0, bbe68 <_strtod_l+0xb60>
   bbe3e:	4649      	mov	r1, r9
   bbe40:	4640      	mov	r0, r8
   bbe42:	f7ff f8ed 	bl	bb020 <__aeabi_d2uiz>
   bbe46:	2801      	cmp	r0, #1
   bbe48:	bf38      	it	cc
   bbe4a:	2001      	movcc	r0, #1
   bbe4c:	f7fe fdbe 	bl	ba9cc <__aeabi_ui2d>
   bbe50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbe52:	4680      	mov	r8, r0
   bbe54:	4689      	mov	r9, r1
   bbe56:	bb23      	cbnz	r3, bbea2 <_strtod_l+0xb9a>
   bbe58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bbe5c:	9010      	str	r0, [sp, #64]	; 0x40
   bbe5e:	9311      	str	r3, [sp, #68]	; 0x44
   bbe60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bbe64:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbe68:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bbe6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbe6c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bbe70:	1a9b      	subs	r3, r3, r2
   bbe72:	9309      	str	r3, [sp, #36]	; 0x24
   bbe74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbe78:	eeb0 0a48 	vmov.f32	s0, s16
   bbe7c:	eef0 0a68 	vmov.f32	s1, s17
   bbe80:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bbe84:	f001 f888 	bl	bcf98 <__ulp>
   bbe88:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbe8c:	ec53 2b10 	vmov	r2, r3, d0
   bbe90:	f7fe fe16 	bl	baac0 <__aeabi_dmul>
   bbe94:	ec53 2b18 	vmov	r2, r3, d8
   bbe98:	f7fe fc5c 	bl	ba754 <__adddf3>
   bbe9c:	4682      	mov	sl, r0
   bbe9e:	468b      	mov	fp, r1
   bbea0:	e78d      	b.n	bbdbe <_strtod_l+0xab6>
   bbea2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bbea6:	e7db      	b.n	bbe60 <_strtod_l+0xb58>
   bbea8:	a311      	add	r3, pc, #68	; (adr r3, bbef0 <_strtod_l+0xbe8>)
   bbeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbeae:	f7ff f879 	bl	bafa4 <__aeabi_dcmplt>
   bbeb2:	e7b2      	b.n	bbe1a <_strtod_l+0xb12>
   bbeb4:	2300      	movs	r3, #0
   bbeb6:	930a      	str	r3, [sp, #40]	; 0x28
   bbeb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bbeba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbebc:	6013      	str	r3, [r2, #0]
   bbebe:	f7ff ba6b 	b.w	bb398 <_strtod_l+0x90>
   bbec2:	2a65      	cmp	r2, #101	; 0x65
   bbec4:	f43f ab5f 	beq.w	bb586 <_strtod_l+0x27e>
   bbec8:	2a45      	cmp	r2, #69	; 0x45
   bbeca:	f43f ab5c 	beq.w	bb586 <_strtod_l+0x27e>
   bbece:	2301      	movs	r3, #1
   bbed0:	f7ff bb94 	b.w	bb5fc <_strtod_l+0x2f4>
   bbed4:	f3af 8000 	nop.w
   bbed8:	94a03595 	.word	0x94a03595
   bbedc:	3fdfffff 	.word	0x3fdfffff
   bbee0:	35afe535 	.word	0x35afe535
   bbee4:	3fe00000 	.word	0x3fe00000
   bbee8:	ffc00000 	.word	0xffc00000
   bbeec:	41dfffff 	.word	0x41dfffff
   bbef0:	94a03595 	.word	0x94a03595
   bbef4:	3fcfffff 	.word	0x3fcfffff
   bbef8:	3ff00000 	.word	0x3ff00000
   bbefc:	7ff00000 	.word	0x7ff00000
   bbf00:	7fe00000 	.word	0x7fe00000
   bbf04:	7c9fffff 	.word	0x7c9fffff
   bbf08:	3fe00000 	.word	0x3fe00000
   bbf0c:	bff00000 	.word	0xbff00000
   bbf10:	7fefffff 	.word	0x7fefffff

000bbf14 <strtof>:
   bbf14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbf18:	f8df 80ac 	ldr.w	r8, [pc, #172]	; bbfc8 <strtof+0xb4>
   bbf1c:	4b26      	ldr	r3, [pc, #152]	; (bbfb8 <strtof+0xa4>)
   bbf1e:	460a      	mov	r2, r1
   bbf20:	ed2d 8b02 	vpush	{d8}
   bbf24:	4601      	mov	r1, r0
   bbf26:	f8d8 0000 	ldr.w	r0, [r8]
   bbf2a:	f7ff f9ed 	bl	bb308 <_strtod_l>
   bbf2e:	ec55 4b10 	vmov	r4, r5, d0
   bbf32:	ee10 2a10 	vmov	r2, s0
   bbf36:	ee10 0a10 	vmov	r0, s0
   bbf3a:	462b      	mov	r3, r5
   bbf3c:	4629      	mov	r1, r5
   bbf3e:	f7ff f859 	bl	baff4 <__aeabi_dcmpun>
   bbf42:	b190      	cbz	r0, bbf6a <strtof+0x56>
   bbf44:	2d00      	cmp	r5, #0
   bbf46:	481d      	ldr	r0, [pc, #116]	; (bbfbc <strtof+0xa8>)
   bbf48:	da09      	bge.n	bbf5e <strtof+0x4a>
   bbf4a:	f001 f98d 	bl	bd268 <nanf>
   bbf4e:	eeb1 8a40 	vneg.f32	s16, s0
   bbf52:	eeb0 0a48 	vmov.f32	s0, s16
   bbf56:	ecbd 8b02 	vpop	{d8}
   bbf5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bbf5e:	ecbd 8b02 	vpop	{d8}
   bbf62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bbf66:	f001 b97f 	b.w	bd268 <nanf>
   bbf6a:	4620      	mov	r0, r4
   bbf6c:	4629      	mov	r1, r5
   bbf6e:	f7ff f877 	bl	bb060 <__aeabi_d2f>
   bbf72:	ee08 0a10 	vmov	s16, r0
   bbf76:	eddf 7a12 	vldr	s15, [pc, #72]	; bbfc0 <strtof+0xac>
   bbf7a:	eeb0 7ac8 	vabs.f32	s14, s16
   bbf7e:	eeb4 7a67 	vcmp.f32	s14, s15
   bbf82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbf86:	dde4      	ble.n	bbf52 <strtof+0x3e>
   bbf88:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   bbf8c:	4b0d      	ldr	r3, [pc, #52]	; (bbfc4 <strtof+0xb0>)
   bbf8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbf92:	4620      	mov	r0, r4
   bbf94:	4639      	mov	r1, r7
   bbf96:	f7ff f82d 	bl	baff4 <__aeabi_dcmpun>
   bbf9a:	b940      	cbnz	r0, bbfae <strtof+0x9a>
   bbf9c:	4b09      	ldr	r3, [pc, #36]	; (bbfc4 <strtof+0xb0>)
   bbf9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbfa2:	4620      	mov	r0, r4
   bbfa4:	4639      	mov	r1, r7
   bbfa6:	f7ff f807 	bl	bafb8 <__aeabi_dcmple>
   bbfaa:	2800      	cmp	r0, #0
   bbfac:	d0d1      	beq.n	bbf52 <strtof+0x3e>
   bbfae:	f8d8 3000 	ldr.w	r3, [r8]
   bbfb2:	2222      	movs	r2, #34	; 0x22
   bbfb4:	601a      	str	r2, [r3, #0]
   bbfb6:	e7cc      	b.n	bbf52 <strtof+0x3e>
   bbfb8:	20035368 	.word	0x20035368
   bbfbc:	000bd6e6 	.word	0x000bd6e6
   bbfc0:	7f7fffff 	.word	0x7f7fffff
   bbfc4:	7fefffff 	.word	0x7fefffff
   bbfc8:	200352fc 	.word	0x200352fc

000bbfcc <_strtol_l.constprop.0>:
   bbfcc:	2b01      	cmp	r3, #1
   bbfce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbfd2:	d001      	beq.n	bbfd8 <_strtol_l.constprop.0+0xc>
   bbfd4:	2b24      	cmp	r3, #36	; 0x24
   bbfd6:	d906      	bls.n	bbfe6 <_strtol_l.constprop.0+0x1a>
   bbfd8:	f7fb fe48 	bl	b7c6c <__errno>
   bbfdc:	2316      	movs	r3, #22
   bbfde:	6003      	str	r3, [r0, #0]
   bbfe0:	2000      	movs	r0, #0
   bbfe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbfe6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bc0cc <_strtol_l.constprop.0+0x100>
   bbfea:	460d      	mov	r5, r1
   bbfec:	462e      	mov	r6, r5
   bbfee:	f815 4b01 	ldrb.w	r4, [r5], #1
   bbff2:	f814 700c 	ldrb.w	r7, [r4, ip]
   bbff6:	f017 0708 	ands.w	r7, r7, #8
   bbffa:	d1f7      	bne.n	bbfec <_strtol_l.constprop.0+0x20>
   bbffc:	2c2d      	cmp	r4, #45	; 0x2d
   bbffe:	d132      	bne.n	bc066 <_strtol_l.constprop.0+0x9a>
   bc000:	782c      	ldrb	r4, [r5, #0]
   bc002:	2701      	movs	r7, #1
   bc004:	1cb5      	adds	r5, r6, #2
   bc006:	2b00      	cmp	r3, #0
   bc008:	d05b      	beq.n	bc0c2 <_strtol_l.constprop.0+0xf6>
   bc00a:	2b10      	cmp	r3, #16
   bc00c:	d109      	bne.n	bc022 <_strtol_l.constprop.0+0x56>
   bc00e:	2c30      	cmp	r4, #48	; 0x30
   bc010:	d107      	bne.n	bc022 <_strtol_l.constprop.0+0x56>
   bc012:	782c      	ldrb	r4, [r5, #0]
   bc014:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bc018:	2c58      	cmp	r4, #88	; 0x58
   bc01a:	d14d      	bne.n	bc0b8 <_strtol_l.constprop.0+0xec>
   bc01c:	786c      	ldrb	r4, [r5, #1]
   bc01e:	2310      	movs	r3, #16
   bc020:	3502      	adds	r5, #2
   bc022:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bc026:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bc02a:	f04f 0c00 	mov.w	ip, #0
   bc02e:	fbb8 f9f3 	udiv	r9, r8, r3
   bc032:	4666      	mov	r6, ip
   bc034:	fb03 8a19 	mls	sl, r3, r9, r8
   bc038:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bc03c:	f1be 0f09 	cmp.w	lr, #9
   bc040:	d816      	bhi.n	bc070 <_strtol_l.constprop.0+0xa4>
   bc042:	4674      	mov	r4, lr
   bc044:	42a3      	cmp	r3, r4
   bc046:	dd24      	ble.n	bc092 <_strtol_l.constprop.0+0xc6>
   bc048:	f1bc 0f00 	cmp.w	ip, #0
   bc04c:	db1e      	blt.n	bc08c <_strtol_l.constprop.0+0xc0>
   bc04e:	45b1      	cmp	r9, r6
   bc050:	d31c      	bcc.n	bc08c <_strtol_l.constprop.0+0xc0>
   bc052:	d101      	bne.n	bc058 <_strtol_l.constprop.0+0x8c>
   bc054:	45a2      	cmp	sl, r4
   bc056:	db19      	blt.n	bc08c <_strtol_l.constprop.0+0xc0>
   bc058:	fb06 4603 	mla	r6, r6, r3, r4
   bc05c:	f04f 0c01 	mov.w	ip, #1
   bc060:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc064:	e7e8      	b.n	bc038 <_strtol_l.constprop.0+0x6c>
   bc066:	2c2b      	cmp	r4, #43	; 0x2b
   bc068:	bf04      	itt	eq
   bc06a:	782c      	ldrbeq	r4, [r5, #0]
   bc06c:	1cb5      	addeq	r5, r6, #2
   bc06e:	e7ca      	b.n	bc006 <_strtol_l.constprop.0+0x3a>
   bc070:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bc074:	f1be 0f19 	cmp.w	lr, #25
   bc078:	d801      	bhi.n	bc07e <_strtol_l.constprop.0+0xb2>
   bc07a:	3c37      	subs	r4, #55	; 0x37
   bc07c:	e7e2      	b.n	bc044 <_strtol_l.constprop.0+0x78>
   bc07e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bc082:	f1be 0f19 	cmp.w	lr, #25
   bc086:	d804      	bhi.n	bc092 <_strtol_l.constprop.0+0xc6>
   bc088:	3c57      	subs	r4, #87	; 0x57
   bc08a:	e7db      	b.n	bc044 <_strtol_l.constprop.0+0x78>
   bc08c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bc090:	e7e6      	b.n	bc060 <_strtol_l.constprop.0+0x94>
   bc092:	f1bc 0f00 	cmp.w	ip, #0
   bc096:	da05      	bge.n	bc0a4 <_strtol_l.constprop.0+0xd8>
   bc098:	2322      	movs	r3, #34	; 0x22
   bc09a:	6003      	str	r3, [r0, #0]
   bc09c:	4646      	mov	r6, r8
   bc09e:	b942      	cbnz	r2, bc0b2 <_strtol_l.constprop.0+0xe6>
   bc0a0:	4630      	mov	r0, r6
   bc0a2:	e79e      	b.n	bbfe2 <_strtol_l.constprop.0+0x16>
   bc0a4:	b107      	cbz	r7, bc0a8 <_strtol_l.constprop.0+0xdc>
   bc0a6:	4276      	negs	r6, r6
   bc0a8:	2a00      	cmp	r2, #0
   bc0aa:	d0f9      	beq.n	bc0a0 <_strtol_l.constprop.0+0xd4>
   bc0ac:	f1bc 0f00 	cmp.w	ip, #0
   bc0b0:	d000      	beq.n	bc0b4 <_strtol_l.constprop.0+0xe8>
   bc0b2:	1e69      	subs	r1, r5, #1
   bc0b4:	6011      	str	r1, [r2, #0]
   bc0b6:	e7f3      	b.n	bc0a0 <_strtol_l.constprop.0+0xd4>
   bc0b8:	2430      	movs	r4, #48	; 0x30
   bc0ba:	2b00      	cmp	r3, #0
   bc0bc:	d1b1      	bne.n	bc022 <_strtol_l.constprop.0+0x56>
   bc0be:	2308      	movs	r3, #8
   bc0c0:	e7af      	b.n	bc022 <_strtol_l.constprop.0+0x56>
   bc0c2:	2c30      	cmp	r4, #48	; 0x30
   bc0c4:	d0a5      	beq.n	bc012 <_strtol_l.constprop.0+0x46>
   bc0c6:	230a      	movs	r3, #10
   bc0c8:	e7ab      	b.n	bc022 <_strtol_l.constprop.0+0x56>
   bc0ca:	bf00      	nop
   bc0cc:	000bdcc9 	.word	0x000bdcc9

000bc0d0 <strtol>:
   bc0d0:	4613      	mov	r3, r2
   bc0d2:	460a      	mov	r2, r1
   bc0d4:	4601      	mov	r1, r0
   bc0d6:	4802      	ldr	r0, [pc, #8]	; (bc0e0 <strtol+0x10>)
   bc0d8:	6800      	ldr	r0, [r0, #0]
   bc0da:	f7ff bf77 	b.w	bbfcc <_strtol_l.constprop.0>
   bc0de:	bf00      	nop
   bc0e0:	200352fc 	.word	0x200352fc

000bc0e4 <__register_exitproc>:
   bc0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc0e8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bc1a4 <__register_exitproc+0xc0>
   bc0ec:	4606      	mov	r6, r0
   bc0ee:	f8d8 0000 	ldr.w	r0, [r8]
   bc0f2:	461f      	mov	r7, r3
   bc0f4:	460d      	mov	r5, r1
   bc0f6:	4691      	mov	r9, r2
   bc0f8:	f000 fbc6 	bl	bc888 <__retarget_lock_acquire_recursive>
   bc0fc:	4b25      	ldr	r3, [pc, #148]	; (bc194 <__register_exitproc+0xb0>)
   bc0fe:	681c      	ldr	r4, [r3, #0]
   bc100:	b934      	cbnz	r4, bc110 <__register_exitproc+0x2c>
   bc102:	4c25      	ldr	r4, [pc, #148]	; (bc198 <__register_exitproc+0xb4>)
   bc104:	601c      	str	r4, [r3, #0]
   bc106:	4b25      	ldr	r3, [pc, #148]	; (bc19c <__register_exitproc+0xb8>)
   bc108:	b113      	cbz	r3, bc110 <__register_exitproc+0x2c>
   bc10a:	681b      	ldr	r3, [r3, #0]
   bc10c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bc110:	6863      	ldr	r3, [r4, #4]
   bc112:	2b1f      	cmp	r3, #31
   bc114:	dd07      	ble.n	bc126 <__register_exitproc+0x42>
   bc116:	f8d8 0000 	ldr.w	r0, [r8]
   bc11a:	f000 fbb7 	bl	bc88c <__retarget_lock_release_recursive>
   bc11e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc126:	b34e      	cbz	r6, bc17c <__register_exitproc+0x98>
   bc128:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bc12c:	b988      	cbnz	r0, bc152 <__register_exitproc+0x6e>
   bc12e:	4b1c      	ldr	r3, [pc, #112]	; (bc1a0 <__register_exitproc+0xbc>)
   bc130:	b923      	cbnz	r3, bc13c <__register_exitproc+0x58>
   bc132:	f8d8 0000 	ldr.w	r0, [r8]
   bc136:	f000 fba8 	bl	bc88a <__retarget_lock_release>
   bc13a:	e7f0      	b.n	bc11e <__register_exitproc+0x3a>
   bc13c:	f44f 7084 	mov.w	r0, #264	; 0x108
   bc140:	f7fb fd5c 	bl	b7bfc <malloc>
   bc144:	2800      	cmp	r0, #0
   bc146:	d0f4      	beq.n	bc132 <__register_exitproc+0x4e>
   bc148:	2300      	movs	r3, #0
   bc14a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bc14e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bc152:	6863      	ldr	r3, [r4, #4]
   bc154:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bc158:	2201      	movs	r2, #1
   bc15a:	409a      	lsls	r2, r3
   bc15c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bc160:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bc164:	4313      	orrs	r3, r2
   bc166:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bc16a:	2e02      	cmp	r6, #2
   bc16c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bc170:	bf02      	ittt	eq
   bc172:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bc176:	4313      	orreq	r3, r2
   bc178:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bc17c:	6863      	ldr	r3, [r4, #4]
   bc17e:	f8d8 0000 	ldr.w	r0, [r8]
   bc182:	1c5a      	adds	r2, r3, #1
   bc184:	3302      	adds	r3, #2
   bc186:	6062      	str	r2, [r4, #4]
   bc188:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bc18c:	f000 fb7e 	bl	bc88c <__retarget_lock_release_recursive>
   bc190:	2000      	movs	r0, #0
   bc192:	e7c6      	b.n	bc122 <__register_exitproc+0x3e>
   bc194:	2003e7e8 	.word	0x2003e7e8
   bc198:	2003e75c 	.word	0x2003e75c
   bc19c:	00000000 	.word	0x00000000
   bc1a0:	000b7bfd 	.word	0x000b7bfd
   bc1a4:	20035360 	.word	0x20035360

000bc1a8 <rshift>:
   bc1a8:	6903      	ldr	r3, [r0, #16]
   bc1aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bc1ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc1b2:	ea4f 1261 	mov.w	r2, r1, asr #5
   bc1b6:	f100 0414 	add.w	r4, r0, #20
   bc1ba:	dd45      	ble.n	bc248 <rshift+0xa0>
   bc1bc:	f011 011f 	ands.w	r1, r1, #31
   bc1c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bc1c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bc1c8:	d10c      	bne.n	bc1e4 <rshift+0x3c>
   bc1ca:	f100 0710 	add.w	r7, r0, #16
   bc1ce:	4629      	mov	r1, r5
   bc1d0:	42b1      	cmp	r1, r6
   bc1d2:	d334      	bcc.n	bc23e <rshift+0x96>
   bc1d4:	1a9b      	subs	r3, r3, r2
   bc1d6:	009b      	lsls	r3, r3, #2
   bc1d8:	1eea      	subs	r2, r5, #3
   bc1da:	4296      	cmp	r6, r2
   bc1dc:	bf38      	it	cc
   bc1de:	2300      	movcc	r3, #0
   bc1e0:	4423      	add	r3, r4
   bc1e2:	e015      	b.n	bc210 <rshift+0x68>
   bc1e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bc1e8:	f1c1 0820 	rsb	r8, r1, #32
   bc1ec:	40cf      	lsrs	r7, r1
   bc1ee:	f105 0e04 	add.w	lr, r5, #4
   bc1f2:	46a1      	mov	r9, r4
   bc1f4:	4576      	cmp	r6, lr
   bc1f6:	46f4      	mov	ip, lr
   bc1f8:	d815      	bhi.n	bc226 <rshift+0x7e>
   bc1fa:	1a9a      	subs	r2, r3, r2
   bc1fc:	0092      	lsls	r2, r2, #2
   bc1fe:	3a04      	subs	r2, #4
   bc200:	3501      	adds	r5, #1
   bc202:	42ae      	cmp	r6, r5
   bc204:	bf38      	it	cc
   bc206:	2200      	movcc	r2, #0
   bc208:	18a3      	adds	r3, r4, r2
   bc20a:	50a7      	str	r7, [r4, r2]
   bc20c:	b107      	cbz	r7, bc210 <rshift+0x68>
   bc20e:	3304      	adds	r3, #4
   bc210:	1b1a      	subs	r2, r3, r4
   bc212:	42a3      	cmp	r3, r4
   bc214:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bc218:	bf08      	it	eq
   bc21a:	2300      	moveq	r3, #0
   bc21c:	6102      	str	r2, [r0, #16]
   bc21e:	bf08      	it	eq
   bc220:	6143      	streq	r3, [r0, #20]
   bc222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc226:	f8dc c000 	ldr.w	ip, [ip]
   bc22a:	fa0c fc08 	lsl.w	ip, ip, r8
   bc22e:	ea4c 0707 	orr.w	r7, ip, r7
   bc232:	f849 7b04 	str.w	r7, [r9], #4
   bc236:	f85e 7b04 	ldr.w	r7, [lr], #4
   bc23a:	40cf      	lsrs	r7, r1
   bc23c:	e7da      	b.n	bc1f4 <rshift+0x4c>
   bc23e:	f851 cb04 	ldr.w	ip, [r1], #4
   bc242:	f847 cf04 	str.w	ip, [r7, #4]!
   bc246:	e7c3      	b.n	bc1d0 <rshift+0x28>
   bc248:	4623      	mov	r3, r4
   bc24a:	e7e1      	b.n	bc210 <rshift+0x68>

000bc24c <__hexdig_fun>:
   bc24c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bc250:	2b09      	cmp	r3, #9
   bc252:	d802      	bhi.n	bc25a <__hexdig_fun+0xe>
   bc254:	3820      	subs	r0, #32
   bc256:	b2c0      	uxtb	r0, r0
   bc258:	4770      	bx	lr
   bc25a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bc25e:	2b05      	cmp	r3, #5
   bc260:	d801      	bhi.n	bc266 <__hexdig_fun+0x1a>
   bc262:	3847      	subs	r0, #71	; 0x47
   bc264:	e7f7      	b.n	bc256 <__hexdig_fun+0xa>
   bc266:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bc26a:	2b05      	cmp	r3, #5
   bc26c:	d801      	bhi.n	bc272 <__hexdig_fun+0x26>
   bc26e:	3827      	subs	r0, #39	; 0x27
   bc270:	e7f1      	b.n	bc256 <__hexdig_fun+0xa>
   bc272:	2000      	movs	r0, #0
   bc274:	4770      	bx	lr
	...

000bc278 <__gethex>:
   bc278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc27c:	ed2d 8b02 	vpush	{d8}
   bc280:	b089      	sub	sp, #36	; 0x24
   bc282:	ee08 0a10 	vmov	s16, r0
   bc286:	9304      	str	r3, [sp, #16]
   bc288:	4bb4      	ldr	r3, [pc, #720]	; (bc55c <__gethex+0x2e4>)
   bc28a:	681b      	ldr	r3, [r3, #0]
   bc28c:	9301      	str	r3, [sp, #4]
   bc28e:	4618      	mov	r0, r3
   bc290:	468b      	mov	fp, r1
   bc292:	4690      	mov	r8, r2
   bc294:	f7fe ffdc 	bl	bb250 <strlen>
   bc298:	9b01      	ldr	r3, [sp, #4]
   bc29a:	f8db 2000 	ldr.w	r2, [fp]
   bc29e:	4403      	add	r3, r0
   bc2a0:	4682      	mov	sl, r0
   bc2a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bc2a6:	9305      	str	r3, [sp, #20]
   bc2a8:	1c93      	adds	r3, r2, #2
   bc2aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bc2ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bc2b2:	32fe      	adds	r2, #254	; 0xfe
   bc2b4:	18d1      	adds	r1, r2, r3
   bc2b6:	461f      	mov	r7, r3
   bc2b8:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc2bc:	9100      	str	r1, [sp, #0]
   bc2be:	2830      	cmp	r0, #48	; 0x30
   bc2c0:	d0f8      	beq.n	bc2b4 <__gethex+0x3c>
   bc2c2:	f7ff ffc3 	bl	bc24c <__hexdig_fun>
   bc2c6:	4604      	mov	r4, r0
   bc2c8:	2800      	cmp	r0, #0
   bc2ca:	d13a      	bne.n	bc342 <__gethex+0xca>
   bc2cc:	9901      	ldr	r1, [sp, #4]
   bc2ce:	4652      	mov	r2, sl
   bc2d0:	4638      	mov	r0, r7
   bc2d2:	f7fe ffc5 	bl	bb260 <strncmp>
   bc2d6:	4605      	mov	r5, r0
   bc2d8:	2800      	cmp	r0, #0
   bc2da:	d168      	bne.n	bc3ae <__gethex+0x136>
   bc2dc:	f817 000a 	ldrb.w	r0, [r7, sl]
   bc2e0:	eb07 060a 	add.w	r6, r7, sl
   bc2e4:	f7ff ffb2 	bl	bc24c <__hexdig_fun>
   bc2e8:	2800      	cmp	r0, #0
   bc2ea:	d062      	beq.n	bc3b2 <__gethex+0x13a>
   bc2ec:	4633      	mov	r3, r6
   bc2ee:	7818      	ldrb	r0, [r3, #0]
   bc2f0:	2830      	cmp	r0, #48	; 0x30
   bc2f2:	461f      	mov	r7, r3
   bc2f4:	f103 0301 	add.w	r3, r3, #1
   bc2f8:	d0f9      	beq.n	bc2ee <__gethex+0x76>
   bc2fa:	f7ff ffa7 	bl	bc24c <__hexdig_fun>
   bc2fe:	2301      	movs	r3, #1
   bc300:	fab0 f480 	clz	r4, r0
   bc304:	0964      	lsrs	r4, r4, #5
   bc306:	4635      	mov	r5, r6
   bc308:	9300      	str	r3, [sp, #0]
   bc30a:	463a      	mov	r2, r7
   bc30c:	4616      	mov	r6, r2
   bc30e:	3201      	adds	r2, #1
   bc310:	7830      	ldrb	r0, [r6, #0]
   bc312:	f7ff ff9b 	bl	bc24c <__hexdig_fun>
   bc316:	2800      	cmp	r0, #0
   bc318:	d1f8      	bne.n	bc30c <__gethex+0x94>
   bc31a:	9901      	ldr	r1, [sp, #4]
   bc31c:	4652      	mov	r2, sl
   bc31e:	4630      	mov	r0, r6
   bc320:	f7fe ff9e 	bl	bb260 <strncmp>
   bc324:	b980      	cbnz	r0, bc348 <__gethex+0xd0>
   bc326:	b94d      	cbnz	r5, bc33c <__gethex+0xc4>
   bc328:	eb06 050a 	add.w	r5, r6, sl
   bc32c:	462a      	mov	r2, r5
   bc32e:	4616      	mov	r6, r2
   bc330:	3201      	adds	r2, #1
   bc332:	7830      	ldrb	r0, [r6, #0]
   bc334:	f7ff ff8a 	bl	bc24c <__hexdig_fun>
   bc338:	2800      	cmp	r0, #0
   bc33a:	d1f8      	bne.n	bc32e <__gethex+0xb6>
   bc33c:	1bad      	subs	r5, r5, r6
   bc33e:	00ad      	lsls	r5, r5, #2
   bc340:	e004      	b.n	bc34c <__gethex+0xd4>
   bc342:	2400      	movs	r4, #0
   bc344:	4625      	mov	r5, r4
   bc346:	e7e0      	b.n	bc30a <__gethex+0x92>
   bc348:	2d00      	cmp	r5, #0
   bc34a:	d1f7      	bne.n	bc33c <__gethex+0xc4>
   bc34c:	7833      	ldrb	r3, [r6, #0]
   bc34e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc352:	2b50      	cmp	r3, #80	; 0x50
   bc354:	d13b      	bne.n	bc3ce <__gethex+0x156>
   bc356:	7873      	ldrb	r3, [r6, #1]
   bc358:	2b2b      	cmp	r3, #43	; 0x2b
   bc35a:	d02c      	beq.n	bc3b6 <__gethex+0x13e>
   bc35c:	2b2d      	cmp	r3, #45	; 0x2d
   bc35e:	d02e      	beq.n	bc3be <__gethex+0x146>
   bc360:	1c71      	adds	r1, r6, #1
   bc362:	f04f 0900 	mov.w	r9, #0
   bc366:	7808      	ldrb	r0, [r1, #0]
   bc368:	f7ff ff70 	bl	bc24c <__hexdig_fun>
   bc36c:	1e43      	subs	r3, r0, #1
   bc36e:	b2db      	uxtb	r3, r3
   bc370:	2b18      	cmp	r3, #24
   bc372:	d82c      	bhi.n	bc3ce <__gethex+0x156>
   bc374:	f1a0 0210 	sub.w	r2, r0, #16
   bc378:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bc37c:	f7ff ff66 	bl	bc24c <__hexdig_fun>
   bc380:	1e43      	subs	r3, r0, #1
   bc382:	b2db      	uxtb	r3, r3
   bc384:	2b18      	cmp	r3, #24
   bc386:	d91d      	bls.n	bc3c4 <__gethex+0x14c>
   bc388:	f1b9 0f00 	cmp.w	r9, #0
   bc38c:	d000      	beq.n	bc390 <__gethex+0x118>
   bc38e:	4252      	negs	r2, r2
   bc390:	4415      	add	r5, r2
   bc392:	f8cb 1000 	str.w	r1, [fp]
   bc396:	b1e4      	cbz	r4, bc3d2 <__gethex+0x15a>
   bc398:	9b00      	ldr	r3, [sp, #0]
   bc39a:	2b00      	cmp	r3, #0
   bc39c:	bf14      	ite	ne
   bc39e:	2700      	movne	r7, #0
   bc3a0:	2706      	moveq	r7, #6
   bc3a2:	4638      	mov	r0, r7
   bc3a4:	b009      	add	sp, #36	; 0x24
   bc3a6:	ecbd 8b02 	vpop	{d8}
   bc3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc3ae:	463e      	mov	r6, r7
   bc3b0:	4625      	mov	r5, r4
   bc3b2:	2401      	movs	r4, #1
   bc3b4:	e7ca      	b.n	bc34c <__gethex+0xd4>
   bc3b6:	f04f 0900 	mov.w	r9, #0
   bc3ba:	1cb1      	adds	r1, r6, #2
   bc3bc:	e7d3      	b.n	bc366 <__gethex+0xee>
   bc3be:	f04f 0901 	mov.w	r9, #1
   bc3c2:	e7fa      	b.n	bc3ba <__gethex+0x142>
   bc3c4:	230a      	movs	r3, #10
   bc3c6:	fb03 0202 	mla	r2, r3, r2, r0
   bc3ca:	3a10      	subs	r2, #16
   bc3cc:	e7d4      	b.n	bc378 <__gethex+0x100>
   bc3ce:	4631      	mov	r1, r6
   bc3d0:	e7df      	b.n	bc392 <__gethex+0x11a>
   bc3d2:	1bf3      	subs	r3, r6, r7
   bc3d4:	3b01      	subs	r3, #1
   bc3d6:	4621      	mov	r1, r4
   bc3d8:	2b07      	cmp	r3, #7
   bc3da:	dc0b      	bgt.n	bc3f4 <__gethex+0x17c>
   bc3dc:	ee18 0a10 	vmov	r0, s16
   bc3e0:	f000 fa68 	bl	bc8b4 <_Balloc>
   bc3e4:	4604      	mov	r4, r0
   bc3e6:	b940      	cbnz	r0, bc3fa <__gethex+0x182>
   bc3e8:	4b5d      	ldr	r3, [pc, #372]	; (bc560 <__gethex+0x2e8>)
   bc3ea:	4602      	mov	r2, r0
   bc3ec:	21de      	movs	r1, #222	; 0xde
   bc3ee:	485d      	ldr	r0, [pc, #372]	; (bc564 <__gethex+0x2ec>)
   bc3f0:	f7fb fc44 	bl	b7c7c <__assert_func>
   bc3f4:	3101      	adds	r1, #1
   bc3f6:	105b      	asrs	r3, r3, #1
   bc3f8:	e7ee      	b.n	bc3d8 <__gethex+0x160>
   bc3fa:	f100 0914 	add.w	r9, r0, #20
   bc3fe:	f04f 0b00 	mov.w	fp, #0
   bc402:	f1ca 0301 	rsb	r3, sl, #1
   bc406:	f8cd 9008 	str.w	r9, [sp, #8]
   bc40a:	f8cd b000 	str.w	fp, [sp]
   bc40e:	9306      	str	r3, [sp, #24]
   bc410:	42b7      	cmp	r7, r6
   bc412:	d340      	bcc.n	bc496 <__gethex+0x21e>
   bc414:	9802      	ldr	r0, [sp, #8]
   bc416:	9b00      	ldr	r3, [sp, #0]
   bc418:	f840 3b04 	str.w	r3, [r0], #4
   bc41c:	eba0 0009 	sub.w	r0, r0, r9
   bc420:	1080      	asrs	r0, r0, #2
   bc422:	0146      	lsls	r6, r0, #5
   bc424:	6120      	str	r0, [r4, #16]
   bc426:	4618      	mov	r0, r3
   bc428:	f000 fb36 	bl	bca98 <__hi0bits>
   bc42c:	1a30      	subs	r0, r6, r0
   bc42e:	f8d8 6000 	ldr.w	r6, [r8]
   bc432:	42b0      	cmp	r0, r6
   bc434:	dd63      	ble.n	bc4fe <__gethex+0x286>
   bc436:	1b87      	subs	r7, r0, r6
   bc438:	4639      	mov	r1, r7
   bc43a:	4620      	mov	r0, r4
   bc43c:	f000 feda 	bl	bd1f4 <__any_on>
   bc440:	4682      	mov	sl, r0
   bc442:	b1a8      	cbz	r0, bc470 <__gethex+0x1f8>
   bc444:	1e7b      	subs	r3, r7, #1
   bc446:	1159      	asrs	r1, r3, #5
   bc448:	f003 021f 	and.w	r2, r3, #31
   bc44c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bc450:	f04f 0a01 	mov.w	sl, #1
   bc454:	fa0a f202 	lsl.w	r2, sl, r2
   bc458:	420a      	tst	r2, r1
   bc45a:	d009      	beq.n	bc470 <__gethex+0x1f8>
   bc45c:	4553      	cmp	r3, sl
   bc45e:	dd05      	ble.n	bc46c <__gethex+0x1f4>
   bc460:	1eb9      	subs	r1, r7, #2
   bc462:	4620      	mov	r0, r4
   bc464:	f000 fec6 	bl	bd1f4 <__any_on>
   bc468:	2800      	cmp	r0, #0
   bc46a:	d145      	bne.n	bc4f8 <__gethex+0x280>
   bc46c:	f04f 0a02 	mov.w	sl, #2
   bc470:	4639      	mov	r1, r7
   bc472:	4620      	mov	r0, r4
   bc474:	f7ff fe98 	bl	bc1a8 <rshift>
   bc478:	443d      	add	r5, r7
   bc47a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc47e:	42ab      	cmp	r3, r5
   bc480:	da4c      	bge.n	bc51c <__gethex+0x2a4>
   bc482:	ee18 0a10 	vmov	r0, s16
   bc486:	4621      	mov	r1, r4
   bc488:	f000 fa54 	bl	bc934 <_Bfree>
   bc48c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc48e:	2300      	movs	r3, #0
   bc490:	6013      	str	r3, [r2, #0]
   bc492:	27a3      	movs	r7, #163	; 0xa3
   bc494:	e785      	b.n	bc3a2 <__gethex+0x12a>
   bc496:	1e73      	subs	r3, r6, #1
   bc498:	9a05      	ldr	r2, [sp, #20]
   bc49a:	9303      	str	r3, [sp, #12]
   bc49c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bc4a0:	4293      	cmp	r3, r2
   bc4a2:	d019      	beq.n	bc4d8 <__gethex+0x260>
   bc4a4:	f1bb 0f20 	cmp.w	fp, #32
   bc4a8:	d107      	bne.n	bc4ba <__gethex+0x242>
   bc4aa:	9b02      	ldr	r3, [sp, #8]
   bc4ac:	9a00      	ldr	r2, [sp, #0]
   bc4ae:	f843 2b04 	str.w	r2, [r3], #4
   bc4b2:	9302      	str	r3, [sp, #8]
   bc4b4:	2300      	movs	r3, #0
   bc4b6:	9300      	str	r3, [sp, #0]
   bc4b8:	469b      	mov	fp, r3
   bc4ba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bc4be:	f7ff fec5 	bl	bc24c <__hexdig_fun>
   bc4c2:	9b00      	ldr	r3, [sp, #0]
   bc4c4:	f000 000f 	and.w	r0, r0, #15
   bc4c8:	fa00 f00b 	lsl.w	r0, r0, fp
   bc4cc:	4303      	orrs	r3, r0
   bc4ce:	9300      	str	r3, [sp, #0]
   bc4d0:	f10b 0b04 	add.w	fp, fp, #4
   bc4d4:	9b03      	ldr	r3, [sp, #12]
   bc4d6:	e00d      	b.n	bc4f4 <__gethex+0x27c>
   bc4d8:	9b03      	ldr	r3, [sp, #12]
   bc4da:	9a06      	ldr	r2, [sp, #24]
   bc4dc:	4413      	add	r3, r2
   bc4de:	42bb      	cmp	r3, r7
   bc4e0:	d3e0      	bcc.n	bc4a4 <__gethex+0x22c>
   bc4e2:	4618      	mov	r0, r3
   bc4e4:	9901      	ldr	r1, [sp, #4]
   bc4e6:	9307      	str	r3, [sp, #28]
   bc4e8:	4652      	mov	r2, sl
   bc4ea:	f7fe feb9 	bl	bb260 <strncmp>
   bc4ee:	9b07      	ldr	r3, [sp, #28]
   bc4f0:	2800      	cmp	r0, #0
   bc4f2:	d1d7      	bne.n	bc4a4 <__gethex+0x22c>
   bc4f4:	461e      	mov	r6, r3
   bc4f6:	e78b      	b.n	bc410 <__gethex+0x198>
   bc4f8:	f04f 0a03 	mov.w	sl, #3
   bc4fc:	e7b8      	b.n	bc470 <__gethex+0x1f8>
   bc4fe:	da0a      	bge.n	bc516 <__gethex+0x29e>
   bc500:	1a37      	subs	r7, r6, r0
   bc502:	4621      	mov	r1, r4
   bc504:	ee18 0a10 	vmov	r0, s16
   bc508:	463a      	mov	r2, r7
   bc50a:	f000 fc2f 	bl	bcd6c <__lshift>
   bc50e:	1bed      	subs	r5, r5, r7
   bc510:	4604      	mov	r4, r0
   bc512:	f100 0914 	add.w	r9, r0, #20
   bc516:	f04f 0a00 	mov.w	sl, #0
   bc51a:	e7ae      	b.n	bc47a <__gethex+0x202>
   bc51c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bc520:	42a8      	cmp	r0, r5
   bc522:	dd72      	ble.n	bc60a <__gethex+0x392>
   bc524:	1b45      	subs	r5, r0, r5
   bc526:	42ae      	cmp	r6, r5
   bc528:	dc36      	bgt.n	bc598 <__gethex+0x320>
   bc52a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc52e:	2b02      	cmp	r3, #2
   bc530:	d02a      	beq.n	bc588 <__gethex+0x310>
   bc532:	2b03      	cmp	r3, #3
   bc534:	d02c      	beq.n	bc590 <__gethex+0x318>
   bc536:	2b01      	cmp	r3, #1
   bc538:	d11c      	bne.n	bc574 <__gethex+0x2fc>
   bc53a:	42ae      	cmp	r6, r5
   bc53c:	d11a      	bne.n	bc574 <__gethex+0x2fc>
   bc53e:	2e01      	cmp	r6, #1
   bc540:	d112      	bne.n	bc568 <__gethex+0x2f0>
   bc542:	9a04      	ldr	r2, [sp, #16]
   bc544:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bc548:	6013      	str	r3, [r2, #0]
   bc54a:	2301      	movs	r3, #1
   bc54c:	6123      	str	r3, [r4, #16]
   bc54e:	f8c9 3000 	str.w	r3, [r9]
   bc552:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc554:	2762      	movs	r7, #98	; 0x62
   bc556:	601c      	str	r4, [r3, #0]
   bc558:	e723      	b.n	bc3a2 <__gethex+0x12a>
   bc55a:	bf00      	nop
   bc55c:	000bde3c 	.word	0x000bde3c
   bc560:	000bddc9 	.word	0x000bddc9
   bc564:	000bddda 	.word	0x000bddda
   bc568:	1e71      	subs	r1, r6, #1
   bc56a:	4620      	mov	r0, r4
   bc56c:	f000 fe42 	bl	bd1f4 <__any_on>
   bc570:	2800      	cmp	r0, #0
   bc572:	d1e6      	bne.n	bc542 <__gethex+0x2ca>
   bc574:	ee18 0a10 	vmov	r0, s16
   bc578:	4621      	mov	r1, r4
   bc57a:	f000 f9db 	bl	bc934 <_Bfree>
   bc57e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc580:	2300      	movs	r3, #0
   bc582:	6013      	str	r3, [r2, #0]
   bc584:	2750      	movs	r7, #80	; 0x50
   bc586:	e70c      	b.n	bc3a2 <__gethex+0x12a>
   bc588:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc58a:	2b00      	cmp	r3, #0
   bc58c:	d1f2      	bne.n	bc574 <__gethex+0x2fc>
   bc58e:	e7d8      	b.n	bc542 <__gethex+0x2ca>
   bc590:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc592:	2b00      	cmp	r3, #0
   bc594:	d1d5      	bne.n	bc542 <__gethex+0x2ca>
   bc596:	e7ed      	b.n	bc574 <__gethex+0x2fc>
   bc598:	1e6f      	subs	r7, r5, #1
   bc59a:	f1ba 0f00 	cmp.w	sl, #0
   bc59e:	d131      	bne.n	bc604 <__gethex+0x38c>
   bc5a0:	b127      	cbz	r7, bc5ac <__gethex+0x334>
   bc5a2:	4639      	mov	r1, r7
   bc5a4:	4620      	mov	r0, r4
   bc5a6:	f000 fe25 	bl	bd1f4 <__any_on>
   bc5aa:	4682      	mov	sl, r0
   bc5ac:	117b      	asrs	r3, r7, #5
   bc5ae:	2101      	movs	r1, #1
   bc5b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bc5b4:	f007 071f 	and.w	r7, r7, #31
   bc5b8:	fa01 f707 	lsl.w	r7, r1, r7
   bc5bc:	421f      	tst	r7, r3
   bc5be:	4629      	mov	r1, r5
   bc5c0:	4620      	mov	r0, r4
   bc5c2:	bf18      	it	ne
   bc5c4:	f04a 0a02 	orrne.w	sl, sl, #2
   bc5c8:	1b76      	subs	r6, r6, r5
   bc5ca:	f7ff fded 	bl	bc1a8 <rshift>
   bc5ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bc5d2:	2702      	movs	r7, #2
   bc5d4:	f1ba 0f00 	cmp.w	sl, #0
   bc5d8:	d048      	beq.n	bc66c <__gethex+0x3f4>
   bc5da:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc5de:	2b02      	cmp	r3, #2
   bc5e0:	d015      	beq.n	bc60e <__gethex+0x396>
   bc5e2:	2b03      	cmp	r3, #3
   bc5e4:	d017      	beq.n	bc616 <__gethex+0x39e>
   bc5e6:	2b01      	cmp	r3, #1
   bc5e8:	d109      	bne.n	bc5fe <__gethex+0x386>
   bc5ea:	f01a 0f02 	tst.w	sl, #2
   bc5ee:	d006      	beq.n	bc5fe <__gethex+0x386>
   bc5f0:	f8d9 0000 	ldr.w	r0, [r9]
   bc5f4:	ea4a 0a00 	orr.w	sl, sl, r0
   bc5f8:	f01a 0f01 	tst.w	sl, #1
   bc5fc:	d10e      	bne.n	bc61c <__gethex+0x3a4>
   bc5fe:	f047 0710 	orr.w	r7, r7, #16
   bc602:	e033      	b.n	bc66c <__gethex+0x3f4>
   bc604:	f04f 0a01 	mov.w	sl, #1
   bc608:	e7d0      	b.n	bc5ac <__gethex+0x334>
   bc60a:	2701      	movs	r7, #1
   bc60c:	e7e2      	b.n	bc5d4 <__gethex+0x35c>
   bc60e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc610:	f1c3 0301 	rsb	r3, r3, #1
   bc614:	9315      	str	r3, [sp, #84]	; 0x54
   bc616:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc618:	2b00      	cmp	r3, #0
   bc61a:	d0f0      	beq.n	bc5fe <__gethex+0x386>
   bc61c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bc620:	f104 0314 	add.w	r3, r4, #20
   bc624:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bc628:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bc62c:	f04f 0c00 	mov.w	ip, #0
   bc630:	4618      	mov	r0, r3
   bc632:	f853 2b04 	ldr.w	r2, [r3], #4
   bc636:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bc63a:	d01c      	beq.n	bc676 <__gethex+0x3fe>
   bc63c:	3201      	adds	r2, #1
   bc63e:	6002      	str	r2, [r0, #0]
   bc640:	2f02      	cmp	r7, #2
   bc642:	f104 0314 	add.w	r3, r4, #20
   bc646:	d13f      	bne.n	bc6c8 <__gethex+0x450>
   bc648:	f8d8 2000 	ldr.w	r2, [r8]
   bc64c:	3a01      	subs	r2, #1
   bc64e:	42b2      	cmp	r2, r6
   bc650:	d10a      	bne.n	bc668 <__gethex+0x3f0>
   bc652:	1171      	asrs	r1, r6, #5
   bc654:	2201      	movs	r2, #1
   bc656:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bc65a:	f006 061f 	and.w	r6, r6, #31
   bc65e:	fa02 f606 	lsl.w	r6, r2, r6
   bc662:	421e      	tst	r6, r3
   bc664:	bf18      	it	ne
   bc666:	4617      	movne	r7, r2
   bc668:	f047 0720 	orr.w	r7, r7, #32
   bc66c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc66e:	601c      	str	r4, [r3, #0]
   bc670:	9b04      	ldr	r3, [sp, #16]
   bc672:	601d      	str	r5, [r3, #0]
   bc674:	e695      	b.n	bc3a2 <__gethex+0x12a>
   bc676:	4299      	cmp	r1, r3
   bc678:	f843 cc04 	str.w	ip, [r3, #-4]
   bc67c:	d8d8      	bhi.n	bc630 <__gethex+0x3b8>
   bc67e:	68a3      	ldr	r3, [r4, #8]
   bc680:	459b      	cmp	fp, r3
   bc682:	db19      	blt.n	bc6b8 <__gethex+0x440>
   bc684:	6861      	ldr	r1, [r4, #4]
   bc686:	ee18 0a10 	vmov	r0, s16
   bc68a:	3101      	adds	r1, #1
   bc68c:	f000 f912 	bl	bc8b4 <_Balloc>
   bc690:	4681      	mov	r9, r0
   bc692:	b918      	cbnz	r0, bc69c <__gethex+0x424>
   bc694:	4b1a      	ldr	r3, [pc, #104]	; (bc700 <__gethex+0x488>)
   bc696:	4602      	mov	r2, r0
   bc698:	2184      	movs	r1, #132	; 0x84
   bc69a:	e6a8      	b.n	bc3ee <__gethex+0x176>
   bc69c:	6922      	ldr	r2, [r4, #16]
   bc69e:	3202      	adds	r2, #2
   bc6a0:	f104 010c 	add.w	r1, r4, #12
   bc6a4:	0092      	lsls	r2, r2, #2
   bc6a6:	300c      	adds	r0, #12
   bc6a8:	f7fe fd62 	bl	bb170 <memcpy>
   bc6ac:	4621      	mov	r1, r4
   bc6ae:	ee18 0a10 	vmov	r0, s16
   bc6b2:	f000 f93f 	bl	bc934 <_Bfree>
   bc6b6:	464c      	mov	r4, r9
   bc6b8:	6923      	ldr	r3, [r4, #16]
   bc6ba:	1c5a      	adds	r2, r3, #1
   bc6bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bc6c0:	6122      	str	r2, [r4, #16]
   bc6c2:	2201      	movs	r2, #1
   bc6c4:	615a      	str	r2, [r3, #20]
   bc6c6:	e7bb      	b.n	bc640 <__gethex+0x3c8>
   bc6c8:	6922      	ldr	r2, [r4, #16]
   bc6ca:	455a      	cmp	r2, fp
   bc6cc:	dd0b      	ble.n	bc6e6 <__gethex+0x46e>
   bc6ce:	2101      	movs	r1, #1
   bc6d0:	4620      	mov	r0, r4
   bc6d2:	f7ff fd69 	bl	bc1a8 <rshift>
   bc6d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc6da:	3501      	adds	r5, #1
   bc6dc:	42ab      	cmp	r3, r5
   bc6de:	f6ff aed0 	blt.w	bc482 <__gethex+0x20a>
   bc6e2:	2701      	movs	r7, #1
   bc6e4:	e7c0      	b.n	bc668 <__gethex+0x3f0>
   bc6e6:	f016 061f 	ands.w	r6, r6, #31
   bc6ea:	d0fa      	beq.n	bc6e2 <__gethex+0x46a>
   bc6ec:	4453      	add	r3, sl
   bc6ee:	f1c6 0620 	rsb	r6, r6, #32
   bc6f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bc6f6:	f000 f9cf 	bl	bca98 <__hi0bits>
   bc6fa:	42b0      	cmp	r0, r6
   bc6fc:	dbe7      	blt.n	bc6ce <__gethex+0x456>
   bc6fe:	e7f0      	b.n	bc6e2 <__gethex+0x46a>
   bc700:	000bddc9 	.word	0x000bddc9

000bc704 <L_shift>:
   bc704:	f1c2 0208 	rsb	r2, r2, #8
   bc708:	0092      	lsls	r2, r2, #2
   bc70a:	b570      	push	{r4, r5, r6, lr}
   bc70c:	f1c2 0620 	rsb	r6, r2, #32
   bc710:	6843      	ldr	r3, [r0, #4]
   bc712:	6804      	ldr	r4, [r0, #0]
   bc714:	fa03 f506 	lsl.w	r5, r3, r6
   bc718:	432c      	orrs	r4, r5
   bc71a:	40d3      	lsrs	r3, r2
   bc71c:	6004      	str	r4, [r0, #0]
   bc71e:	f840 3f04 	str.w	r3, [r0, #4]!
   bc722:	4288      	cmp	r0, r1
   bc724:	d3f4      	bcc.n	bc710 <L_shift+0xc>
   bc726:	bd70      	pop	{r4, r5, r6, pc}

000bc728 <__match>:
   bc728:	b530      	push	{r4, r5, lr}
   bc72a:	6803      	ldr	r3, [r0, #0]
   bc72c:	3301      	adds	r3, #1
   bc72e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc732:	b914      	cbnz	r4, bc73a <__match+0x12>
   bc734:	6003      	str	r3, [r0, #0]
   bc736:	2001      	movs	r0, #1
   bc738:	bd30      	pop	{r4, r5, pc}
   bc73a:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc73e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bc742:	2d19      	cmp	r5, #25
   bc744:	bf98      	it	ls
   bc746:	3220      	addls	r2, #32
   bc748:	42a2      	cmp	r2, r4
   bc74a:	d0f0      	beq.n	bc72e <__match+0x6>
   bc74c:	2000      	movs	r0, #0
   bc74e:	e7f3      	b.n	bc738 <__match+0x10>

000bc750 <__hexnan>:
   bc750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc754:	680b      	ldr	r3, [r1, #0]
   bc756:	115e      	asrs	r6, r3, #5
   bc758:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bc75c:	f013 031f 	ands.w	r3, r3, #31
   bc760:	b087      	sub	sp, #28
   bc762:	bf18      	it	ne
   bc764:	3604      	addne	r6, #4
   bc766:	2500      	movs	r5, #0
   bc768:	1f37      	subs	r7, r6, #4
   bc76a:	4690      	mov	r8, r2
   bc76c:	6802      	ldr	r2, [r0, #0]
   bc76e:	9301      	str	r3, [sp, #4]
   bc770:	4682      	mov	sl, r0
   bc772:	f846 5c04 	str.w	r5, [r6, #-4]
   bc776:	46b9      	mov	r9, r7
   bc778:	463c      	mov	r4, r7
   bc77a:	9502      	str	r5, [sp, #8]
   bc77c:	46ab      	mov	fp, r5
   bc77e:	7851      	ldrb	r1, [r2, #1]
   bc780:	1c53      	adds	r3, r2, #1
   bc782:	9303      	str	r3, [sp, #12]
   bc784:	b341      	cbz	r1, bc7d8 <__hexnan+0x88>
   bc786:	4608      	mov	r0, r1
   bc788:	9205      	str	r2, [sp, #20]
   bc78a:	9104      	str	r1, [sp, #16]
   bc78c:	f7ff fd5e 	bl	bc24c <__hexdig_fun>
   bc790:	2800      	cmp	r0, #0
   bc792:	d14f      	bne.n	bc834 <__hexnan+0xe4>
   bc794:	9904      	ldr	r1, [sp, #16]
   bc796:	9a05      	ldr	r2, [sp, #20]
   bc798:	2920      	cmp	r1, #32
   bc79a:	d818      	bhi.n	bc7ce <__hexnan+0x7e>
   bc79c:	9b02      	ldr	r3, [sp, #8]
   bc79e:	459b      	cmp	fp, r3
   bc7a0:	dd13      	ble.n	bc7ca <__hexnan+0x7a>
   bc7a2:	454c      	cmp	r4, r9
   bc7a4:	d206      	bcs.n	bc7b4 <__hexnan+0x64>
   bc7a6:	2d07      	cmp	r5, #7
   bc7a8:	dc04      	bgt.n	bc7b4 <__hexnan+0x64>
   bc7aa:	462a      	mov	r2, r5
   bc7ac:	4649      	mov	r1, r9
   bc7ae:	4620      	mov	r0, r4
   bc7b0:	f7ff ffa8 	bl	bc704 <L_shift>
   bc7b4:	4544      	cmp	r4, r8
   bc7b6:	d950      	bls.n	bc85a <__hexnan+0x10a>
   bc7b8:	2300      	movs	r3, #0
   bc7ba:	f1a4 0904 	sub.w	r9, r4, #4
   bc7be:	f844 3c04 	str.w	r3, [r4, #-4]
   bc7c2:	f8cd b008 	str.w	fp, [sp, #8]
   bc7c6:	464c      	mov	r4, r9
   bc7c8:	461d      	mov	r5, r3
   bc7ca:	9a03      	ldr	r2, [sp, #12]
   bc7cc:	e7d7      	b.n	bc77e <__hexnan+0x2e>
   bc7ce:	2929      	cmp	r1, #41	; 0x29
   bc7d0:	d156      	bne.n	bc880 <__hexnan+0x130>
   bc7d2:	3202      	adds	r2, #2
   bc7d4:	f8ca 2000 	str.w	r2, [sl]
   bc7d8:	f1bb 0f00 	cmp.w	fp, #0
   bc7dc:	d050      	beq.n	bc880 <__hexnan+0x130>
   bc7de:	454c      	cmp	r4, r9
   bc7e0:	d206      	bcs.n	bc7f0 <__hexnan+0xa0>
   bc7e2:	2d07      	cmp	r5, #7
   bc7e4:	dc04      	bgt.n	bc7f0 <__hexnan+0xa0>
   bc7e6:	462a      	mov	r2, r5
   bc7e8:	4649      	mov	r1, r9
   bc7ea:	4620      	mov	r0, r4
   bc7ec:	f7ff ff8a 	bl	bc704 <L_shift>
   bc7f0:	4544      	cmp	r4, r8
   bc7f2:	d934      	bls.n	bc85e <__hexnan+0x10e>
   bc7f4:	f1a8 0204 	sub.w	r2, r8, #4
   bc7f8:	4623      	mov	r3, r4
   bc7fa:	f853 1b04 	ldr.w	r1, [r3], #4
   bc7fe:	f842 1f04 	str.w	r1, [r2, #4]!
   bc802:	429f      	cmp	r7, r3
   bc804:	d2f9      	bcs.n	bc7fa <__hexnan+0xaa>
   bc806:	1b3b      	subs	r3, r7, r4
   bc808:	f023 0303 	bic.w	r3, r3, #3
   bc80c:	3304      	adds	r3, #4
   bc80e:	3401      	adds	r4, #1
   bc810:	3e03      	subs	r6, #3
   bc812:	42b4      	cmp	r4, r6
   bc814:	bf88      	it	hi
   bc816:	2304      	movhi	r3, #4
   bc818:	4443      	add	r3, r8
   bc81a:	2200      	movs	r2, #0
   bc81c:	f843 2b04 	str.w	r2, [r3], #4
   bc820:	429f      	cmp	r7, r3
   bc822:	d2fb      	bcs.n	bc81c <__hexnan+0xcc>
   bc824:	683b      	ldr	r3, [r7, #0]
   bc826:	b91b      	cbnz	r3, bc830 <__hexnan+0xe0>
   bc828:	4547      	cmp	r7, r8
   bc82a:	d127      	bne.n	bc87c <__hexnan+0x12c>
   bc82c:	2301      	movs	r3, #1
   bc82e:	603b      	str	r3, [r7, #0]
   bc830:	2005      	movs	r0, #5
   bc832:	e026      	b.n	bc882 <__hexnan+0x132>
   bc834:	3501      	adds	r5, #1
   bc836:	2d08      	cmp	r5, #8
   bc838:	f10b 0b01 	add.w	fp, fp, #1
   bc83c:	dd06      	ble.n	bc84c <__hexnan+0xfc>
   bc83e:	4544      	cmp	r4, r8
   bc840:	d9c3      	bls.n	bc7ca <__hexnan+0x7a>
   bc842:	2300      	movs	r3, #0
   bc844:	f844 3c04 	str.w	r3, [r4, #-4]
   bc848:	2501      	movs	r5, #1
   bc84a:	3c04      	subs	r4, #4
   bc84c:	6822      	ldr	r2, [r4, #0]
   bc84e:	f000 000f 	and.w	r0, r0, #15
   bc852:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bc856:	6022      	str	r2, [r4, #0]
   bc858:	e7b7      	b.n	bc7ca <__hexnan+0x7a>
   bc85a:	2508      	movs	r5, #8
   bc85c:	e7b5      	b.n	bc7ca <__hexnan+0x7a>
   bc85e:	9b01      	ldr	r3, [sp, #4]
   bc860:	2b00      	cmp	r3, #0
   bc862:	d0df      	beq.n	bc824 <__hexnan+0xd4>
   bc864:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc868:	f1c3 0320 	rsb	r3, r3, #32
   bc86c:	fa22 f303 	lsr.w	r3, r2, r3
   bc870:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bc874:	401a      	ands	r2, r3
   bc876:	f846 2c04 	str.w	r2, [r6, #-4]
   bc87a:	e7d3      	b.n	bc824 <__hexnan+0xd4>
   bc87c:	3f04      	subs	r7, #4
   bc87e:	e7d1      	b.n	bc824 <__hexnan+0xd4>
   bc880:	2004      	movs	r0, #4
   bc882:	b007      	add	sp, #28
   bc884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc888 <__retarget_lock_acquire_recursive>:
   bc888:	4770      	bx	lr

000bc88a <__retarget_lock_release>:
   bc88a:	4770      	bx	lr

000bc88c <__retarget_lock_release_recursive>:
   bc88c:	4770      	bx	lr

000bc88e <__ascii_mbtowc>:
   bc88e:	b082      	sub	sp, #8
   bc890:	b901      	cbnz	r1, bc894 <__ascii_mbtowc+0x6>
   bc892:	a901      	add	r1, sp, #4
   bc894:	b142      	cbz	r2, bc8a8 <__ascii_mbtowc+0x1a>
   bc896:	b14b      	cbz	r3, bc8ac <__ascii_mbtowc+0x1e>
   bc898:	7813      	ldrb	r3, [r2, #0]
   bc89a:	600b      	str	r3, [r1, #0]
   bc89c:	7812      	ldrb	r2, [r2, #0]
   bc89e:	1e10      	subs	r0, r2, #0
   bc8a0:	bf18      	it	ne
   bc8a2:	2001      	movne	r0, #1
   bc8a4:	b002      	add	sp, #8
   bc8a6:	4770      	bx	lr
   bc8a8:	4610      	mov	r0, r2
   bc8aa:	e7fb      	b.n	bc8a4 <__ascii_mbtowc+0x16>
   bc8ac:	f06f 0001 	mvn.w	r0, #1
   bc8b0:	e7f8      	b.n	bc8a4 <__ascii_mbtowc+0x16>
	...

000bc8b4 <_Balloc>:
   bc8b4:	b570      	push	{r4, r5, r6, lr}
   bc8b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bc8b8:	4604      	mov	r4, r0
   bc8ba:	460d      	mov	r5, r1
   bc8bc:	b976      	cbnz	r6, bc8dc <_Balloc+0x28>
   bc8be:	2010      	movs	r0, #16
   bc8c0:	f7fb f99c 	bl	b7bfc <malloc>
   bc8c4:	4602      	mov	r2, r0
   bc8c6:	6260      	str	r0, [r4, #36]	; 0x24
   bc8c8:	b920      	cbnz	r0, bc8d4 <_Balloc+0x20>
   bc8ca:	4b18      	ldr	r3, [pc, #96]	; (bc92c <_Balloc+0x78>)
   bc8cc:	4818      	ldr	r0, [pc, #96]	; (bc930 <_Balloc+0x7c>)
   bc8ce:	2166      	movs	r1, #102	; 0x66
   bc8d0:	f7fb f9d4 	bl	b7c7c <__assert_func>
   bc8d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bc8d8:	6006      	str	r6, [r0, #0]
   bc8da:	60c6      	str	r6, [r0, #12]
   bc8dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bc8de:	68f3      	ldr	r3, [r6, #12]
   bc8e0:	b183      	cbz	r3, bc904 <_Balloc+0x50>
   bc8e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc8e4:	68db      	ldr	r3, [r3, #12]
   bc8e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bc8ea:	b9b8      	cbnz	r0, bc91c <_Balloc+0x68>
   bc8ec:	2101      	movs	r1, #1
   bc8ee:	fa01 f605 	lsl.w	r6, r1, r5
   bc8f2:	1d72      	adds	r2, r6, #5
   bc8f4:	0092      	lsls	r2, r2, #2
   bc8f6:	4620      	mov	r0, r4
   bc8f8:	f000 fc9d 	bl	bd236 <_calloc_r>
   bc8fc:	b160      	cbz	r0, bc918 <_Balloc+0x64>
   bc8fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bc902:	e00e      	b.n	bc922 <_Balloc+0x6e>
   bc904:	2221      	movs	r2, #33	; 0x21
   bc906:	2104      	movs	r1, #4
   bc908:	4620      	mov	r0, r4
   bc90a:	f000 fc94 	bl	bd236 <_calloc_r>
   bc90e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc910:	60f0      	str	r0, [r6, #12]
   bc912:	68db      	ldr	r3, [r3, #12]
   bc914:	2b00      	cmp	r3, #0
   bc916:	d1e4      	bne.n	bc8e2 <_Balloc+0x2e>
   bc918:	2000      	movs	r0, #0
   bc91a:	bd70      	pop	{r4, r5, r6, pc}
   bc91c:	6802      	ldr	r2, [r0, #0]
   bc91e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bc922:	2300      	movs	r3, #0
   bc924:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bc928:	e7f7      	b.n	bc91a <_Balloc+0x66>
   bc92a:	bf00      	nop
   bc92c:	000bdbf9 	.word	0x000bdbf9
   bc930:	000bde50 	.word	0x000bde50

000bc934 <_Bfree>:
   bc934:	b570      	push	{r4, r5, r6, lr}
   bc936:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bc938:	4605      	mov	r5, r0
   bc93a:	460c      	mov	r4, r1
   bc93c:	b976      	cbnz	r6, bc95c <_Bfree+0x28>
   bc93e:	2010      	movs	r0, #16
   bc940:	f7fb f95c 	bl	b7bfc <malloc>
   bc944:	4602      	mov	r2, r0
   bc946:	6268      	str	r0, [r5, #36]	; 0x24
   bc948:	b920      	cbnz	r0, bc954 <_Bfree+0x20>
   bc94a:	4b09      	ldr	r3, [pc, #36]	; (bc970 <_Bfree+0x3c>)
   bc94c:	4809      	ldr	r0, [pc, #36]	; (bc974 <_Bfree+0x40>)
   bc94e:	218a      	movs	r1, #138	; 0x8a
   bc950:	f7fb f994 	bl	b7c7c <__assert_func>
   bc954:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bc958:	6006      	str	r6, [r0, #0]
   bc95a:	60c6      	str	r6, [r0, #12]
   bc95c:	b13c      	cbz	r4, bc96e <_Bfree+0x3a>
   bc95e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bc960:	6862      	ldr	r2, [r4, #4]
   bc962:	68db      	ldr	r3, [r3, #12]
   bc964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bc968:	6021      	str	r1, [r4, #0]
   bc96a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bc96e:	bd70      	pop	{r4, r5, r6, pc}
   bc970:	000bdbf9 	.word	0x000bdbf9
   bc974:	000bde50 	.word	0x000bde50

000bc978 <__multadd>:
   bc978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc97c:	690d      	ldr	r5, [r1, #16]
   bc97e:	4607      	mov	r7, r0
   bc980:	460c      	mov	r4, r1
   bc982:	461e      	mov	r6, r3
   bc984:	f101 0c14 	add.w	ip, r1, #20
   bc988:	2000      	movs	r0, #0
   bc98a:	f8dc 3000 	ldr.w	r3, [ip]
   bc98e:	b299      	uxth	r1, r3
   bc990:	fb02 6101 	mla	r1, r2, r1, r6
   bc994:	0c1e      	lsrs	r6, r3, #16
   bc996:	0c0b      	lsrs	r3, r1, #16
   bc998:	fb02 3306 	mla	r3, r2, r6, r3
   bc99c:	b289      	uxth	r1, r1
   bc99e:	3001      	adds	r0, #1
   bc9a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bc9a4:	4285      	cmp	r5, r0
   bc9a6:	f84c 1b04 	str.w	r1, [ip], #4
   bc9aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bc9ae:	dcec      	bgt.n	bc98a <__multadd+0x12>
   bc9b0:	b30e      	cbz	r6, bc9f6 <__multadd+0x7e>
   bc9b2:	68a3      	ldr	r3, [r4, #8]
   bc9b4:	42ab      	cmp	r3, r5
   bc9b6:	dc19      	bgt.n	bc9ec <__multadd+0x74>
   bc9b8:	6861      	ldr	r1, [r4, #4]
   bc9ba:	4638      	mov	r0, r7
   bc9bc:	3101      	adds	r1, #1
   bc9be:	f7ff ff79 	bl	bc8b4 <_Balloc>
   bc9c2:	4680      	mov	r8, r0
   bc9c4:	b928      	cbnz	r0, bc9d2 <__multadd+0x5a>
   bc9c6:	4602      	mov	r2, r0
   bc9c8:	4b0c      	ldr	r3, [pc, #48]	; (bc9fc <__multadd+0x84>)
   bc9ca:	480d      	ldr	r0, [pc, #52]	; (bca00 <__multadd+0x88>)
   bc9cc:	21b5      	movs	r1, #181	; 0xb5
   bc9ce:	f7fb f955 	bl	b7c7c <__assert_func>
   bc9d2:	6922      	ldr	r2, [r4, #16]
   bc9d4:	3202      	adds	r2, #2
   bc9d6:	f104 010c 	add.w	r1, r4, #12
   bc9da:	0092      	lsls	r2, r2, #2
   bc9dc:	300c      	adds	r0, #12
   bc9de:	f7fe fbc7 	bl	bb170 <memcpy>
   bc9e2:	4621      	mov	r1, r4
   bc9e4:	4638      	mov	r0, r7
   bc9e6:	f7ff ffa5 	bl	bc934 <_Bfree>
   bc9ea:	4644      	mov	r4, r8
   bc9ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bc9f0:	3501      	adds	r5, #1
   bc9f2:	615e      	str	r6, [r3, #20]
   bc9f4:	6125      	str	r5, [r4, #16]
   bc9f6:	4620      	mov	r0, r4
   bc9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc9fc:	000bddc9 	.word	0x000bddc9
   bca00:	000bde50 	.word	0x000bde50

000bca04 <__s2b>:
   bca04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bca08:	460c      	mov	r4, r1
   bca0a:	4615      	mov	r5, r2
   bca0c:	461f      	mov	r7, r3
   bca0e:	2209      	movs	r2, #9
   bca10:	3308      	adds	r3, #8
   bca12:	4606      	mov	r6, r0
   bca14:	fb93 f3f2 	sdiv	r3, r3, r2
   bca18:	2100      	movs	r1, #0
   bca1a:	2201      	movs	r2, #1
   bca1c:	429a      	cmp	r2, r3
   bca1e:	db09      	blt.n	bca34 <__s2b+0x30>
   bca20:	4630      	mov	r0, r6
   bca22:	f7ff ff47 	bl	bc8b4 <_Balloc>
   bca26:	b940      	cbnz	r0, bca3a <__s2b+0x36>
   bca28:	4602      	mov	r2, r0
   bca2a:	4b19      	ldr	r3, [pc, #100]	; (bca90 <__s2b+0x8c>)
   bca2c:	4819      	ldr	r0, [pc, #100]	; (bca94 <__s2b+0x90>)
   bca2e:	21ce      	movs	r1, #206	; 0xce
   bca30:	f7fb f924 	bl	b7c7c <__assert_func>
   bca34:	0052      	lsls	r2, r2, #1
   bca36:	3101      	adds	r1, #1
   bca38:	e7f0      	b.n	bca1c <__s2b+0x18>
   bca3a:	9b08      	ldr	r3, [sp, #32]
   bca3c:	6143      	str	r3, [r0, #20]
   bca3e:	2d09      	cmp	r5, #9
   bca40:	f04f 0301 	mov.w	r3, #1
   bca44:	6103      	str	r3, [r0, #16]
   bca46:	dd16      	ble.n	bca76 <__s2b+0x72>
   bca48:	f104 0909 	add.w	r9, r4, #9
   bca4c:	46c8      	mov	r8, r9
   bca4e:	442c      	add	r4, r5
   bca50:	f818 3b01 	ldrb.w	r3, [r8], #1
   bca54:	4601      	mov	r1, r0
   bca56:	3b30      	subs	r3, #48	; 0x30
   bca58:	220a      	movs	r2, #10
   bca5a:	4630      	mov	r0, r6
   bca5c:	f7ff ff8c 	bl	bc978 <__multadd>
   bca60:	45a0      	cmp	r8, r4
   bca62:	d1f5      	bne.n	bca50 <__s2b+0x4c>
   bca64:	f1a5 0408 	sub.w	r4, r5, #8
   bca68:	444c      	add	r4, r9
   bca6a:	1b2d      	subs	r5, r5, r4
   bca6c:	1963      	adds	r3, r4, r5
   bca6e:	42bb      	cmp	r3, r7
   bca70:	db04      	blt.n	bca7c <__s2b+0x78>
   bca72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bca76:	340a      	adds	r4, #10
   bca78:	2509      	movs	r5, #9
   bca7a:	e7f6      	b.n	bca6a <__s2b+0x66>
   bca7c:	f814 3b01 	ldrb.w	r3, [r4], #1
   bca80:	4601      	mov	r1, r0
   bca82:	3b30      	subs	r3, #48	; 0x30
   bca84:	220a      	movs	r2, #10
   bca86:	4630      	mov	r0, r6
   bca88:	f7ff ff76 	bl	bc978 <__multadd>
   bca8c:	e7ee      	b.n	bca6c <__s2b+0x68>
   bca8e:	bf00      	nop
   bca90:	000bddc9 	.word	0x000bddc9
   bca94:	000bde50 	.word	0x000bde50

000bca98 <__hi0bits>:
   bca98:	0c03      	lsrs	r3, r0, #16
   bca9a:	041b      	lsls	r3, r3, #16
   bca9c:	b9d3      	cbnz	r3, bcad4 <__hi0bits+0x3c>
   bca9e:	0400      	lsls	r0, r0, #16
   bcaa0:	2310      	movs	r3, #16
   bcaa2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bcaa6:	bf04      	itt	eq
   bcaa8:	0200      	lsleq	r0, r0, #8
   bcaaa:	3308      	addeq	r3, #8
   bcaac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bcab0:	bf04      	itt	eq
   bcab2:	0100      	lsleq	r0, r0, #4
   bcab4:	3304      	addeq	r3, #4
   bcab6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bcaba:	bf04      	itt	eq
   bcabc:	0080      	lsleq	r0, r0, #2
   bcabe:	3302      	addeq	r3, #2
   bcac0:	2800      	cmp	r0, #0
   bcac2:	db05      	blt.n	bcad0 <__hi0bits+0x38>
   bcac4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bcac8:	f103 0301 	add.w	r3, r3, #1
   bcacc:	bf08      	it	eq
   bcace:	2320      	moveq	r3, #32
   bcad0:	4618      	mov	r0, r3
   bcad2:	4770      	bx	lr
   bcad4:	2300      	movs	r3, #0
   bcad6:	e7e4      	b.n	bcaa2 <__hi0bits+0xa>

000bcad8 <__lo0bits>:
   bcad8:	6803      	ldr	r3, [r0, #0]
   bcada:	f013 0207 	ands.w	r2, r3, #7
   bcade:	4601      	mov	r1, r0
   bcae0:	d00b      	beq.n	bcafa <__lo0bits+0x22>
   bcae2:	07da      	lsls	r2, r3, #31
   bcae4:	d423      	bmi.n	bcb2e <__lo0bits+0x56>
   bcae6:	0798      	lsls	r0, r3, #30
   bcae8:	bf49      	itett	mi
   bcaea:	085b      	lsrmi	r3, r3, #1
   bcaec:	089b      	lsrpl	r3, r3, #2
   bcaee:	2001      	movmi	r0, #1
   bcaf0:	600b      	strmi	r3, [r1, #0]
   bcaf2:	bf5c      	itt	pl
   bcaf4:	600b      	strpl	r3, [r1, #0]
   bcaf6:	2002      	movpl	r0, #2
   bcaf8:	4770      	bx	lr
   bcafa:	b298      	uxth	r0, r3
   bcafc:	b9a8      	cbnz	r0, bcb2a <__lo0bits+0x52>
   bcafe:	0c1b      	lsrs	r3, r3, #16
   bcb00:	2010      	movs	r0, #16
   bcb02:	b2da      	uxtb	r2, r3
   bcb04:	b90a      	cbnz	r2, bcb0a <__lo0bits+0x32>
   bcb06:	3008      	adds	r0, #8
   bcb08:	0a1b      	lsrs	r3, r3, #8
   bcb0a:	071a      	lsls	r2, r3, #28
   bcb0c:	bf04      	itt	eq
   bcb0e:	091b      	lsreq	r3, r3, #4
   bcb10:	3004      	addeq	r0, #4
   bcb12:	079a      	lsls	r2, r3, #30
   bcb14:	bf04      	itt	eq
   bcb16:	089b      	lsreq	r3, r3, #2
   bcb18:	3002      	addeq	r0, #2
   bcb1a:	07da      	lsls	r2, r3, #31
   bcb1c:	d403      	bmi.n	bcb26 <__lo0bits+0x4e>
   bcb1e:	085b      	lsrs	r3, r3, #1
   bcb20:	f100 0001 	add.w	r0, r0, #1
   bcb24:	d005      	beq.n	bcb32 <__lo0bits+0x5a>
   bcb26:	600b      	str	r3, [r1, #0]
   bcb28:	4770      	bx	lr
   bcb2a:	4610      	mov	r0, r2
   bcb2c:	e7e9      	b.n	bcb02 <__lo0bits+0x2a>
   bcb2e:	2000      	movs	r0, #0
   bcb30:	4770      	bx	lr
   bcb32:	2020      	movs	r0, #32
   bcb34:	4770      	bx	lr
	...

000bcb38 <__i2b>:
   bcb38:	b510      	push	{r4, lr}
   bcb3a:	460c      	mov	r4, r1
   bcb3c:	2101      	movs	r1, #1
   bcb3e:	f7ff feb9 	bl	bc8b4 <_Balloc>
   bcb42:	4602      	mov	r2, r0
   bcb44:	b928      	cbnz	r0, bcb52 <__i2b+0x1a>
   bcb46:	4b05      	ldr	r3, [pc, #20]	; (bcb5c <__i2b+0x24>)
   bcb48:	4805      	ldr	r0, [pc, #20]	; (bcb60 <__i2b+0x28>)
   bcb4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bcb4e:	f7fb f895 	bl	b7c7c <__assert_func>
   bcb52:	2301      	movs	r3, #1
   bcb54:	6144      	str	r4, [r0, #20]
   bcb56:	6103      	str	r3, [r0, #16]
   bcb58:	bd10      	pop	{r4, pc}
   bcb5a:	bf00      	nop
   bcb5c:	000bddc9 	.word	0x000bddc9
   bcb60:	000bde50 	.word	0x000bde50

000bcb64 <__multiply>:
   bcb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcb68:	4691      	mov	r9, r2
   bcb6a:	690a      	ldr	r2, [r1, #16]
   bcb6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bcb70:	429a      	cmp	r2, r3
   bcb72:	bfb8      	it	lt
   bcb74:	460b      	movlt	r3, r1
   bcb76:	460c      	mov	r4, r1
   bcb78:	bfbc      	itt	lt
   bcb7a:	464c      	movlt	r4, r9
   bcb7c:	4699      	movlt	r9, r3
   bcb7e:	6927      	ldr	r7, [r4, #16]
   bcb80:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bcb84:	68a3      	ldr	r3, [r4, #8]
   bcb86:	6861      	ldr	r1, [r4, #4]
   bcb88:	eb07 060a 	add.w	r6, r7, sl
   bcb8c:	42b3      	cmp	r3, r6
   bcb8e:	b085      	sub	sp, #20
   bcb90:	bfb8      	it	lt
   bcb92:	3101      	addlt	r1, #1
   bcb94:	f7ff fe8e 	bl	bc8b4 <_Balloc>
   bcb98:	b930      	cbnz	r0, bcba8 <__multiply+0x44>
   bcb9a:	4602      	mov	r2, r0
   bcb9c:	4b44      	ldr	r3, [pc, #272]	; (bccb0 <__multiply+0x14c>)
   bcb9e:	4845      	ldr	r0, [pc, #276]	; (bccb4 <__multiply+0x150>)
   bcba0:	f240 115d 	movw	r1, #349	; 0x15d
   bcba4:	f7fb f86a 	bl	b7c7c <__assert_func>
   bcba8:	f100 0514 	add.w	r5, r0, #20
   bcbac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bcbb0:	462b      	mov	r3, r5
   bcbb2:	2200      	movs	r2, #0
   bcbb4:	4543      	cmp	r3, r8
   bcbb6:	d321      	bcc.n	bcbfc <__multiply+0x98>
   bcbb8:	f104 0314 	add.w	r3, r4, #20
   bcbbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bcbc0:	f109 0314 	add.w	r3, r9, #20
   bcbc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bcbc8:	9202      	str	r2, [sp, #8]
   bcbca:	1b3a      	subs	r2, r7, r4
   bcbcc:	3a15      	subs	r2, #21
   bcbce:	f022 0203 	bic.w	r2, r2, #3
   bcbd2:	3204      	adds	r2, #4
   bcbd4:	f104 0115 	add.w	r1, r4, #21
   bcbd8:	428f      	cmp	r7, r1
   bcbda:	bf38      	it	cc
   bcbdc:	2204      	movcc	r2, #4
   bcbde:	9201      	str	r2, [sp, #4]
   bcbe0:	9a02      	ldr	r2, [sp, #8]
   bcbe2:	9303      	str	r3, [sp, #12]
   bcbe4:	429a      	cmp	r2, r3
   bcbe6:	d80c      	bhi.n	bcc02 <__multiply+0x9e>
   bcbe8:	2e00      	cmp	r6, #0
   bcbea:	dd03      	ble.n	bcbf4 <__multiply+0x90>
   bcbec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bcbf0:	2b00      	cmp	r3, #0
   bcbf2:	d05a      	beq.n	bccaa <__multiply+0x146>
   bcbf4:	6106      	str	r6, [r0, #16]
   bcbf6:	b005      	add	sp, #20
   bcbf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bcbfc:	f843 2b04 	str.w	r2, [r3], #4
   bcc00:	e7d8      	b.n	bcbb4 <__multiply+0x50>
   bcc02:	f8b3 a000 	ldrh.w	sl, [r3]
   bcc06:	f1ba 0f00 	cmp.w	sl, #0
   bcc0a:	d024      	beq.n	bcc56 <__multiply+0xf2>
   bcc0c:	f104 0e14 	add.w	lr, r4, #20
   bcc10:	46a9      	mov	r9, r5
   bcc12:	f04f 0c00 	mov.w	ip, #0
   bcc16:	f85e 2b04 	ldr.w	r2, [lr], #4
   bcc1a:	f8d9 1000 	ldr.w	r1, [r9]
   bcc1e:	fa1f fb82 	uxth.w	fp, r2
   bcc22:	b289      	uxth	r1, r1
   bcc24:	fb0a 110b 	mla	r1, sl, fp, r1
   bcc28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bcc2c:	f8d9 2000 	ldr.w	r2, [r9]
   bcc30:	4461      	add	r1, ip
   bcc32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bcc36:	fb0a c20b 	mla	r2, sl, fp, ip
   bcc3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bcc3e:	b289      	uxth	r1, r1
   bcc40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bcc44:	4577      	cmp	r7, lr
   bcc46:	f849 1b04 	str.w	r1, [r9], #4
   bcc4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bcc4e:	d8e2      	bhi.n	bcc16 <__multiply+0xb2>
   bcc50:	9a01      	ldr	r2, [sp, #4]
   bcc52:	f845 c002 	str.w	ip, [r5, r2]
   bcc56:	9a03      	ldr	r2, [sp, #12]
   bcc58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bcc5c:	3304      	adds	r3, #4
   bcc5e:	f1b9 0f00 	cmp.w	r9, #0
   bcc62:	d020      	beq.n	bcca6 <__multiply+0x142>
   bcc64:	6829      	ldr	r1, [r5, #0]
   bcc66:	f104 0c14 	add.w	ip, r4, #20
   bcc6a:	46ae      	mov	lr, r5
   bcc6c:	f04f 0a00 	mov.w	sl, #0
   bcc70:	f8bc b000 	ldrh.w	fp, [ip]
   bcc74:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bcc78:	fb09 220b 	mla	r2, r9, fp, r2
   bcc7c:	4492      	add	sl, r2
   bcc7e:	b289      	uxth	r1, r1
   bcc80:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bcc84:	f84e 1b04 	str.w	r1, [lr], #4
   bcc88:	f85c 2b04 	ldr.w	r2, [ip], #4
   bcc8c:	f8be 1000 	ldrh.w	r1, [lr]
   bcc90:	0c12      	lsrs	r2, r2, #16
   bcc92:	fb09 1102 	mla	r1, r9, r2, r1
   bcc96:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bcc9a:	4567      	cmp	r7, ip
   bcc9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bcca0:	d8e6      	bhi.n	bcc70 <__multiply+0x10c>
   bcca2:	9a01      	ldr	r2, [sp, #4]
   bcca4:	50a9      	str	r1, [r5, r2]
   bcca6:	3504      	adds	r5, #4
   bcca8:	e79a      	b.n	bcbe0 <__multiply+0x7c>
   bccaa:	3e01      	subs	r6, #1
   bccac:	e79c      	b.n	bcbe8 <__multiply+0x84>
   bccae:	bf00      	nop
   bccb0:	000bddc9 	.word	0x000bddc9
   bccb4:	000bde50 	.word	0x000bde50

000bccb8 <__pow5mult>:
   bccb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bccbc:	4615      	mov	r5, r2
   bccbe:	f012 0203 	ands.w	r2, r2, #3
   bccc2:	4606      	mov	r6, r0
   bccc4:	460f      	mov	r7, r1
   bccc6:	d007      	beq.n	bccd8 <__pow5mult+0x20>
   bccc8:	4c25      	ldr	r4, [pc, #148]	; (bcd60 <__pow5mult+0xa8>)
   bccca:	3a01      	subs	r2, #1
   bcccc:	2300      	movs	r3, #0
   bccce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bccd2:	f7ff fe51 	bl	bc978 <__multadd>
   bccd6:	4607      	mov	r7, r0
   bccd8:	10ad      	asrs	r5, r5, #2
   bccda:	d03d      	beq.n	bcd58 <__pow5mult+0xa0>
   bccdc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bccde:	b97c      	cbnz	r4, bcd00 <__pow5mult+0x48>
   bcce0:	2010      	movs	r0, #16
   bcce2:	f7fa ff8b 	bl	b7bfc <malloc>
   bcce6:	4602      	mov	r2, r0
   bcce8:	6270      	str	r0, [r6, #36]	; 0x24
   bccea:	b928      	cbnz	r0, bccf8 <__pow5mult+0x40>
   bccec:	4b1d      	ldr	r3, [pc, #116]	; (bcd64 <__pow5mult+0xac>)
   bccee:	481e      	ldr	r0, [pc, #120]	; (bcd68 <__pow5mult+0xb0>)
   bccf0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bccf4:	f7fa ffc2 	bl	b7c7c <__assert_func>
   bccf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bccfc:	6004      	str	r4, [r0, #0]
   bccfe:	60c4      	str	r4, [r0, #12]
   bcd00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bcd04:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bcd08:	b94c      	cbnz	r4, bcd1e <__pow5mult+0x66>
   bcd0a:	f240 2171 	movw	r1, #625	; 0x271
   bcd0e:	4630      	mov	r0, r6
   bcd10:	f7ff ff12 	bl	bcb38 <__i2b>
   bcd14:	2300      	movs	r3, #0
   bcd16:	f8c8 0008 	str.w	r0, [r8, #8]
   bcd1a:	4604      	mov	r4, r0
   bcd1c:	6003      	str	r3, [r0, #0]
   bcd1e:	f04f 0900 	mov.w	r9, #0
   bcd22:	07eb      	lsls	r3, r5, #31
   bcd24:	d50a      	bpl.n	bcd3c <__pow5mult+0x84>
   bcd26:	4639      	mov	r1, r7
   bcd28:	4622      	mov	r2, r4
   bcd2a:	4630      	mov	r0, r6
   bcd2c:	f7ff ff1a 	bl	bcb64 <__multiply>
   bcd30:	4639      	mov	r1, r7
   bcd32:	4680      	mov	r8, r0
   bcd34:	4630      	mov	r0, r6
   bcd36:	f7ff fdfd 	bl	bc934 <_Bfree>
   bcd3a:	4647      	mov	r7, r8
   bcd3c:	106d      	asrs	r5, r5, #1
   bcd3e:	d00b      	beq.n	bcd58 <__pow5mult+0xa0>
   bcd40:	6820      	ldr	r0, [r4, #0]
   bcd42:	b938      	cbnz	r0, bcd54 <__pow5mult+0x9c>
   bcd44:	4622      	mov	r2, r4
   bcd46:	4621      	mov	r1, r4
   bcd48:	4630      	mov	r0, r6
   bcd4a:	f7ff ff0b 	bl	bcb64 <__multiply>
   bcd4e:	6020      	str	r0, [r4, #0]
   bcd50:	f8c0 9000 	str.w	r9, [r0]
   bcd54:	4604      	mov	r4, r0
   bcd56:	e7e4      	b.n	bcd22 <__pow5mult+0x6a>
   bcd58:	4638      	mov	r0, r7
   bcd5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bcd5e:	bf00      	nop
   bcd60:	000bdfa0 	.word	0x000bdfa0
   bcd64:	000bdbf9 	.word	0x000bdbf9
   bcd68:	000bde50 	.word	0x000bde50

000bcd6c <__lshift>:
   bcd6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bcd70:	460c      	mov	r4, r1
   bcd72:	6849      	ldr	r1, [r1, #4]
   bcd74:	6923      	ldr	r3, [r4, #16]
   bcd76:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bcd7a:	68a3      	ldr	r3, [r4, #8]
   bcd7c:	4607      	mov	r7, r0
   bcd7e:	4691      	mov	r9, r2
   bcd80:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bcd84:	f108 0601 	add.w	r6, r8, #1
   bcd88:	42b3      	cmp	r3, r6
   bcd8a:	db0b      	blt.n	bcda4 <__lshift+0x38>
   bcd8c:	4638      	mov	r0, r7
   bcd8e:	f7ff fd91 	bl	bc8b4 <_Balloc>
   bcd92:	4605      	mov	r5, r0
   bcd94:	b948      	cbnz	r0, bcdaa <__lshift+0x3e>
   bcd96:	4602      	mov	r2, r0
   bcd98:	4b2a      	ldr	r3, [pc, #168]	; (bce44 <__lshift+0xd8>)
   bcd9a:	482b      	ldr	r0, [pc, #172]	; (bce48 <__lshift+0xdc>)
   bcd9c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bcda0:	f7fa ff6c 	bl	b7c7c <__assert_func>
   bcda4:	3101      	adds	r1, #1
   bcda6:	005b      	lsls	r3, r3, #1
   bcda8:	e7ee      	b.n	bcd88 <__lshift+0x1c>
   bcdaa:	2300      	movs	r3, #0
   bcdac:	f100 0114 	add.w	r1, r0, #20
   bcdb0:	f100 0210 	add.w	r2, r0, #16
   bcdb4:	4618      	mov	r0, r3
   bcdb6:	4553      	cmp	r3, sl
   bcdb8:	db37      	blt.n	bce2a <__lshift+0xbe>
   bcdba:	6920      	ldr	r0, [r4, #16]
   bcdbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bcdc0:	f104 0314 	add.w	r3, r4, #20
   bcdc4:	f019 091f 	ands.w	r9, r9, #31
   bcdc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bcdcc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bcdd0:	d02f      	beq.n	bce32 <__lshift+0xc6>
   bcdd2:	f1c9 0e20 	rsb	lr, r9, #32
   bcdd6:	468a      	mov	sl, r1
   bcdd8:	f04f 0c00 	mov.w	ip, #0
   bcddc:	681a      	ldr	r2, [r3, #0]
   bcdde:	fa02 f209 	lsl.w	r2, r2, r9
   bcde2:	ea42 020c 	orr.w	r2, r2, ip
   bcde6:	f84a 2b04 	str.w	r2, [sl], #4
   bcdea:	f853 2b04 	ldr.w	r2, [r3], #4
   bcdee:	4298      	cmp	r0, r3
   bcdf0:	fa22 fc0e 	lsr.w	ip, r2, lr
   bcdf4:	d8f2      	bhi.n	bcddc <__lshift+0x70>
   bcdf6:	1b03      	subs	r3, r0, r4
   bcdf8:	3b15      	subs	r3, #21
   bcdfa:	f023 0303 	bic.w	r3, r3, #3
   bcdfe:	3304      	adds	r3, #4
   bce00:	f104 0215 	add.w	r2, r4, #21
   bce04:	4290      	cmp	r0, r2
   bce06:	bf38      	it	cc
   bce08:	2304      	movcc	r3, #4
   bce0a:	f841 c003 	str.w	ip, [r1, r3]
   bce0e:	f1bc 0f00 	cmp.w	ip, #0
   bce12:	d001      	beq.n	bce18 <__lshift+0xac>
   bce14:	f108 0602 	add.w	r6, r8, #2
   bce18:	3e01      	subs	r6, #1
   bce1a:	4638      	mov	r0, r7
   bce1c:	612e      	str	r6, [r5, #16]
   bce1e:	4621      	mov	r1, r4
   bce20:	f7ff fd88 	bl	bc934 <_Bfree>
   bce24:	4628      	mov	r0, r5
   bce26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bce2a:	f842 0f04 	str.w	r0, [r2, #4]!
   bce2e:	3301      	adds	r3, #1
   bce30:	e7c1      	b.n	bcdb6 <__lshift+0x4a>
   bce32:	3904      	subs	r1, #4
   bce34:	f853 2b04 	ldr.w	r2, [r3], #4
   bce38:	f841 2f04 	str.w	r2, [r1, #4]!
   bce3c:	4298      	cmp	r0, r3
   bce3e:	d8f9      	bhi.n	bce34 <__lshift+0xc8>
   bce40:	e7ea      	b.n	bce18 <__lshift+0xac>
   bce42:	bf00      	nop
   bce44:	000bddc9 	.word	0x000bddc9
   bce48:	000bde50 	.word	0x000bde50

000bce4c <__mcmp>:
   bce4c:	b530      	push	{r4, r5, lr}
   bce4e:	6902      	ldr	r2, [r0, #16]
   bce50:	690c      	ldr	r4, [r1, #16]
   bce52:	1b12      	subs	r2, r2, r4
   bce54:	d10e      	bne.n	bce74 <__mcmp+0x28>
   bce56:	f100 0314 	add.w	r3, r0, #20
   bce5a:	3114      	adds	r1, #20
   bce5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bce60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bce64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bce68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bce6c:	42a5      	cmp	r5, r4
   bce6e:	d003      	beq.n	bce78 <__mcmp+0x2c>
   bce70:	d305      	bcc.n	bce7e <__mcmp+0x32>
   bce72:	2201      	movs	r2, #1
   bce74:	4610      	mov	r0, r2
   bce76:	bd30      	pop	{r4, r5, pc}
   bce78:	4283      	cmp	r3, r0
   bce7a:	d3f3      	bcc.n	bce64 <__mcmp+0x18>
   bce7c:	e7fa      	b.n	bce74 <__mcmp+0x28>
   bce7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bce82:	e7f7      	b.n	bce74 <__mcmp+0x28>

000bce84 <__mdiff>:
   bce84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bce88:	460c      	mov	r4, r1
   bce8a:	4606      	mov	r6, r0
   bce8c:	4611      	mov	r1, r2
   bce8e:	4620      	mov	r0, r4
   bce90:	4690      	mov	r8, r2
   bce92:	f7ff ffdb 	bl	bce4c <__mcmp>
   bce96:	1e05      	subs	r5, r0, #0
   bce98:	d110      	bne.n	bcebc <__mdiff+0x38>
   bce9a:	4629      	mov	r1, r5
   bce9c:	4630      	mov	r0, r6
   bce9e:	f7ff fd09 	bl	bc8b4 <_Balloc>
   bcea2:	b930      	cbnz	r0, bceb2 <__mdiff+0x2e>
   bcea4:	4b3a      	ldr	r3, [pc, #232]	; (bcf90 <__mdiff+0x10c>)
   bcea6:	4602      	mov	r2, r0
   bcea8:	f240 2132 	movw	r1, #562	; 0x232
   bceac:	4839      	ldr	r0, [pc, #228]	; (bcf94 <__mdiff+0x110>)
   bceae:	f7fa fee5 	bl	b7c7c <__assert_func>
   bceb2:	2301      	movs	r3, #1
   bceb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bceb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bcebc:	bfa4      	itt	ge
   bcebe:	4643      	movge	r3, r8
   bcec0:	46a0      	movge	r8, r4
   bcec2:	4630      	mov	r0, r6
   bcec4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bcec8:	bfa6      	itte	ge
   bceca:	461c      	movge	r4, r3
   bcecc:	2500      	movge	r5, #0
   bcece:	2501      	movlt	r5, #1
   bced0:	f7ff fcf0 	bl	bc8b4 <_Balloc>
   bced4:	b920      	cbnz	r0, bcee0 <__mdiff+0x5c>
   bced6:	4b2e      	ldr	r3, [pc, #184]	; (bcf90 <__mdiff+0x10c>)
   bced8:	4602      	mov	r2, r0
   bceda:	f44f 7110 	mov.w	r1, #576	; 0x240
   bcede:	e7e5      	b.n	bceac <__mdiff+0x28>
   bcee0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bcee4:	6926      	ldr	r6, [r4, #16]
   bcee6:	60c5      	str	r5, [r0, #12]
   bcee8:	f104 0914 	add.w	r9, r4, #20
   bceec:	f108 0514 	add.w	r5, r8, #20
   bcef0:	f100 0e14 	add.w	lr, r0, #20
   bcef4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bcef8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bcefc:	f108 0210 	add.w	r2, r8, #16
   bcf00:	46f2      	mov	sl, lr
   bcf02:	2100      	movs	r1, #0
   bcf04:	f859 3b04 	ldr.w	r3, [r9], #4
   bcf08:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bcf0c:	fa1f f883 	uxth.w	r8, r3
   bcf10:	fa11 f18b 	uxtah	r1, r1, fp
   bcf14:	0c1b      	lsrs	r3, r3, #16
   bcf16:	eba1 0808 	sub.w	r8, r1, r8
   bcf1a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bcf1e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bcf22:	fa1f f888 	uxth.w	r8, r8
   bcf26:	1419      	asrs	r1, r3, #16
   bcf28:	454e      	cmp	r6, r9
   bcf2a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bcf2e:	f84a 3b04 	str.w	r3, [sl], #4
   bcf32:	d8e7      	bhi.n	bcf04 <__mdiff+0x80>
   bcf34:	1b33      	subs	r3, r6, r4
   bcf36:	3b15      	subs	r3, #21
   bcf38:	f023 0303 	bic.w	r3, r3, #3
   bcf3c:	3304      	adds	r3, #4
   bcf3e:	3415      	adds	r4, #21
   bcf40:	42a6      	cmp	r6, r4
   bcf42:	bf38      	it	cc
   bcf44:	2304      	movcc	r3, #4
   bcf46:	441d      	add	r5, r3
   bcf48:	4473      	add	r3, lr
   bcf4a:	469e      	mov	lr, r3
   bcf4c:	462e      	mov	r6, r5
   bcf4e:	4566      	cmp	r6, ip
   bcf50:	d30e      	bcc.n	bcf70 <__mdiff+0xec>
   bcf52:	f10c 0203 	add.w	r2, ip, #3
   bcf56:	1b52      	subs	r2, r2, r5
   bcf58:	f022 0203 	bic.w	r2, r2, #3
   bcf5c:	3d03      	subs	r5, #3
   bcf5e:	45ac      	cmp	ip, r5
   bcf60:	bf38      	it	cc
   bcf62:	2200      	movcc	r2, #0
   bcf64:	441a      	add	r2, r3
   bcf66:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bcf6a:	b17b      	cbz	r3, bcf8c <__mdiff+0x108>
   bcf6c:	6107      	str	r7, [r0, #16]
   bcf6e:	e7a3      	b.n	bceb8 <__mdiff+0x34>
   bcf70:	f856 8b04 	ldr.w	r8, [r6], #4
   bcf74:	fa11 f288 	uxtah	r2, r1, r8
   bcf78:	1414      	asrs	r4, r2, #16
   bcf7a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bcf7e:	b292      	uxth	r2, r2
   bcf80:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bcf84:	f84e 2b04 	str.w	r2, [lr], #4
   bcf88:	1421      	asrs	r1, r4, #16
   bcf8a:	e7e0      	b.n	bcf4e <__mdiff+0xca>
   bcf8c:	3f01      	subs	r7, #1
   bcf8e:	e7ea      	b.n	bcf66 <__mdiff+0xe2>
   bcf90:	000bddc9 	.word	0x000bddc9
   bcf94:	000bde50 	.word	0x000bde50

000bcf98 <__ulp>:
   bcf98:	b082      	sub	sp, #8
   bcf9a:	ed8d 0b00 	vstr	d0, [sp]
   bcf9e:	9b01      	ldr	r3, [sp, #4]
   bcfa0:	4912      	ldr	r1, [pc, #72]	; (bcfec <__ulp+0x54>)
   bcfa2:	4019      	ands	r1, r3
   bcfa4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bcfa8:	2900      	cmp	r1, #0
   bcfaa:	dd05      	ble.n	bcfb8 <__ulp+0x20>
   bcfac:	2200      	movs	r2, #0
   bcfae:	460b      	mov	r3, r1
   bcfb0:	ec43 2b10 	vmov	d0, r2, r3
   bcfb4:	b002      	add	sp, #8
   bcfb6:	4770      	bx	lr
   bcfb8:	4249      	negs	r1, r1
   bcfba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bcfbe:	ea4f 5021 	mov.w	r0, r1, asr #20
   bcfc2:	f04f 0200 	mov.w	r2, #0
   bcfc6:	f04f 0300 	mov.w	r3, #0
   bcfca:	da04      	bge.n	bcfd6 <__ulp+0x3e>
   bcfcc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bcfd0:	fa41 f300 	asr.w	r3, r1, r0
   bcfd4:	e7ec      	b.n	bcfb0 <__ulp+0x18>
   bcfd6:	f1a0 0114 	sub.w	r1, r0, #20
   bcfda:	291e      	cmp	r1, #30
   bcfdc:	bfda      	itte	le
   bcfde:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bcfe2:	fa20 f101 	lsrle.w	r1, r0, r1
   bcfe6:	2101      	movgt	r1, #1
   bcfe8:	460a      	mov	r2, r1
   bcfea:	e7e1      	b.n	bcfb0 <__ulp+0x18>
   bcfec:	7ff00000 	.word	0x7ff00000

000bcff0 <__b2d>:
   bcff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcff2:	6905      	ldr	r5, [r0, #16]
   bcff4:	f100 0714 	add.w	r7, r0, #20
   bcff8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bcffc:	1f2e      	subs	r6, r5, #4
   bcffe:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bd002:	4620      	mov	r0, r4
   bd004:	f7ff fd48 	bl	bca98 <__hi0bits>
   bd008:	f1c0 0320 	rsb	r3, r0, #32
   bd00c:	280a      	cmp	r0, #10
   bd00e:	f8df c07c 	ldr.w	ip, [pc, #124]	; bd08c <__b2d+0x9c>
   bd012:	600b      	str	r3, [r1, #0]
   bd014:	dc14      	bgt.n	bd040 <__b2d+0x50>
   bd016:	f1c0 0e0b 	rsb	lr, r0, #11
   bd01a:	fa24 f10e 	lsr.w	r1, r4, lr
   bd01e:	42b7      	cmp	r7, r6
   bd020:	ea41 030c 	orr.w	r3, r1, ip
   bd024:	bf34      	ite	cc
   bd026:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd02a:	2100      	movcs	r1, #0
   bd02c:	3015      	adds	r0, #21
   bd02e:	fa04 f000 	lsl.w	r0, r4, r0
   bd032:	fa21 f10e 	lsr.w	r1, r1, lr
   bd036:	ea40 0201 	orr.w	r2, r0, r1
   bd03a:	ec43 2b10 	vmov	d0, r2, r3
   bd03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd040:	42b7      	cmp	r7, r6
   bd042:	bf3a      	itte	cc
   bd044:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd048:	f1a5 0608 	subcc.w	r6, r5, #8
   bd04c:	2100      	movcs	r1, #0
   bd04e:	380b      	subs	r0, #11
   bd050:	d017      	beq.n	bd082 <__b2d+0x92>
   bd052:	f1c0 0c20 	rsb	ip, r0, #32
   bd056:	fa04 f500 	lsl.w	r5, r4, r0
   bd05a:	42be      	cmp	r6, r7
   bd05c:	fa21 f40c 	lsr.w	r4, r1, ip
   bd060:	ea45 0504 	orr.w	r5, r5, r4
   bd064:	bf8c      	ite	hi
   bd066:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bd06a:	2400      	movls	r4, #0
   bd06c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bd070:	fa01 f000 	lsl.w	r0, r1, r0
   bd074:	fa24 f40c 	lsr.w	r4, r4, ip
   bd078:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bd07c:	ea40 0204 	orr.w	r2, r0, r4
   bd080:	e7db      	b.n	bd03a <__b2d+0x4a>
   bd082:	ea44 030c 	orr.w	r3, r4, ip
   bd086:	460a      	mov	r2, r1
   bd088:	e7d7      	b.n	bd03a <__b2d+0x4a>
   bd08a:	bf00      	nop
   bd08c:	3ff00000 	.word	0x3ff00000

000bd090 <__d2b>:
   bd090:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bd094:	4689      	mov	r9, r1
   bd096:	2101      	movs	r1, #1
   bd098:	ec57 6b10 	vmov	r6, r7, d0
   bd09c:	4690      	mov	r8, r2
   bd09e:	f7ff fc09 	bl	bc8b4 <_Balloc>
   bd0a2:	4604      	mov	r4, r0
   bd0a4:	b930      	cbnz	r0, bd0b4 <__d2b+0x24>
   bd0a6:	4602      	mov	r2, r0
   bd0a8:	4b25      	ldr	r3, [pc, #148]	; (bd140 <__d2b+0xb0>)
   bd0aa:	4826      	ldr	r0, [pc, #152]	; (bd144 <__d2b+0xb4>)
   bd0ac:	f240 310a 	movw	r1, #778	; 0x30a
   bd0b0:	f7fa fde4 	bl	b7c7c <__assert_func>
   bd0b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bd0b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bd0bc:	bb35      	cbnz	r5, bd10c <__d2b+0x7c>
   bd0be:	2e00      	cmp	r6, #0
   bd0c0:	9301      	str	r3, [sp, #4]
   bd0c2:	d028      	beq.n	bd116 <__d2b+0x86>
   bd0c4:	4668      	mov	r0, sp
   bd0c6:	9600      	str	r6, [sp, #0]
   bd0c8:	f7ff fd06 	bl	bcad8 <__lo0bits>
   bd0cc:	9900      	ldr	r1, [sp, #0]
   bd0ce:	b300      	cbz	r0, bd112 <__d2b+0x82>
   bd0d0:	9a01      	ldr	r2, [sp, #4]
   bd0d2:	f1c0 0320 	rsb	r3, r0, #32
   bd0d6:	fa02 f303 	lsl.w	r3, r2, r3
   bd0da:	430b      	orrs	r3, r1
   bd0dc:	40c2      	lsrs	r2, r0
   bd0de:	6163      	str	r3, [r4, #20]
   bd0e0:	9201      	str	r2, [sp, #4]
   bd0e2:	9b01      	ldr	r3, [sp, #4]
   bd0e4:	61a3      	str	r3, [r4, #24]
   bd0e6:	2b00      	cmp	r3, #0
   bd0e8:	bf14      	ite	ne
   bd0ea:	2202      	movne	r2, #2
   bd0ec:	2201      	moveq	r2, #1
   bd0ee:	6122      	str	r2, [r4, #16]
   bd0f0:	b1d5      	cbz	r5, bd128 <__d2b+0x98>
   bd0f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bd0f6:	4405      	add	r5, r0
   bd0f8:	f8c9 5000 	str.w	r5, [r9]
   bd0fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bd100:	f8c8 0000 	str.w	r0, [r8]
   bd104:	4620      	mov	r0, r4
   bd106:	b003      	add	sp, #12
   bd108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd10c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd110:	e7d5      	b.n	bd0be <__d2b+0x2e>
   bd112:	6161      	str	r1, [r4, #20]
   bd114:	e7e5      	b.n	bd0e2 <__d2b+0x52>
   bd116:	a801      	add	r0, sp, #4
   bd118:	f7ff fcde 	bl	bcad8 <__lo0bits>
   bd11c:	9b01      	ldr	r3, [sp, #4]
   bd11e:	6163      	str	r3, [r4, #20]
   bd120:	2201      	movs	r2, #1
   bd122:	6122      	str	r2, [r4, #16]
   bd124:	3020      	adds	r0, #32
   bd126:	e7e3      	b.n	bd0f0 <__d2b+0x60>
   bd128:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bd12c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bd130:	f8c9 0000 	str.w	r0, [r9]
   bd134:	6918      	ldr	r0, [r3, #16]
   bd136:	f7ff fcaf 	bl	bca98 <__hi0bits>
   bd13a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bd13e:	e7df      	b.n	bd100 <__d2b+0x70>
   bd140:	000bddc9 	.word	0x000bddc9
   bd144:	000bde50 	.word	0x000bde50

000bd148 <__ratio>:
   bd148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd14c:	4688      	mov	r8, r1
   bd14e:	4669      	mov	r1, sp
   bd150:	4681      	mov	r9, r0
   bd152:	f7ff ff4d 	bl	bcff0 <__b2d>
   bd156:	a901      	add	r1, sp, #4
   bd158:	4640      	mov	r0, r8
   bd15a:	ec55 4b10 	vmov	r4, r5, d0
   bd15e:	f7ff ff47 	bl	bcff0 <__b2d>
   bd162:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd166:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bd16a:	eba3 0c02 	sub.w	ip, r3, r2
   bd16e:	e9dd 3200 	ldrd	r3, r2, [sp]
   bd172:	1a9b      	subs	r3, r3, r2
   bd174:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bd178:	ec51 0b10 	vmov	r0, r1, d0
   bd17c:	2b00      	cmp	r3, #0
   bd17e:	bfd6      	itet	le
   bd180:	460a      	movle	r2, r1
   bd182:	462a      	movgt	r2, r5
   bd184:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bd188:	468b      	mov	fp, r1
   bd18a:	462f      	mov	r7, r5
   bd18c:	bfd4      	ite	le
   bd18e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bd192:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bd196:	4620      	mov	r0, r4
   bd198:	ee10 2a10 	vmov	r2, s0
   bd19c:	465b      	mov	r3, fp
   bd19e:	4639      	mov	r1, r7
   bd1a0:	f7fd fdb8 	bl	bad14 <__aeabi_ddiv>
   bd1a4:	ec41 0b10 	vmov	d0, r0, r1
   bd1a8:	b003      	add	sp, #12
   bd1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd1ae <__copybits>:
   bd1ae:	3901      	subs	r1, #1
   bd1b0:	b570      	push	{r4, r5, r6, lr}
   bd1b2:	1149      	asrs	r1, r1, #5
   bd1b4:	6914      	ldr	r4, [r2, #16]
   bd1b6:	3101      	adds	r1, #1
   bd1b8:	f102 0314 	add.w	r3, r2, #20
   bd1bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bd1c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bd1c4:	1f05      	subs	r5, r0, #4
   bd1c6:	42a3      	cmp	r3, r4
   bd1c8:	d30c      	bcc.n	bd1e4 <__copybits+0x36>
   bd1ca:	1aa3      	subs	r3, r4, r2
   bd1cc:	3b11      	subs	r3, #17
   bd1ce:	f023 0303 	bic.w	r3, r3, #3
   bd1d2:	3211      	adds	r2, #17
   bd1d4:	42a2      	cmp	r2, r4
   bd1d6:	bf88      	it	hi
   bd1d8:	2300      	movhi	r3, #0
   bd1da:	4418      	add	r0, r3
   bd1dc:	2300      	movs	r3, #0
   bd1de:	4288      	cmp	r0, r1
   bd1e0:	d305      	bcc.n	bd1ee <__copybits+0x40>
   bd1e2:	bd70      	pop	{r4, r5, r6, pc}
   bd1e4:	f853 6b04 	ldr.w	r6, [r3], #4
   bd1e8:	f845 6f04 	str.w	r6, [r5, #4]!
   bd1ec:	e7eb      	b.n	bd1c6 <__copybits+0x18>
   bd1ee:	f840 3b04 	str.w	r3, [r0], #4
   bd1f2:	e7f4      	b.n	bd1de <__copybits+0x30>

000bd1f4 <__any_on>:
   bd1f4:	f100 0214 	add.w	r2, r0, #20
   bd1f8:	6900      	ldr	r0, [r0, #16]
   bd1fa:	114b      	asrs	r3, r1, #5
   bd1fc:	4298      	cmp	r0, r3
   bd1fe:	b510      	push	{r4, lr}
   bd200:	db11      	blt.n	bd226 <__any_on+0x32>
   bd202:	dd0a      	ble.n	bd21a <__any_on+0x26>
   bd204:	f011 011f 	ands.w	r1, r1, #31
   bd208:	d007      	beq.n	bd21a <__any_on+0x26>
   bd20a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bd20e:	fa24 f001 	lsr.w	r0, r4, r1
   bd212:	fa00 f101 	lsl.w	r1, r0, r1
   bd216:	428c      	cmp	r4, r1
   bd218:	d10b      	bne.n	bd232 <__any_on+0x3e>
   bd21a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bd21e:	4293      	cmp	r3, r2
   bd220:	d803      	bhi.n	bd22a <__any_on+0x36>
   bd222:	2000      	movs	r0, #0
   bd224:	bd10      	pop	{r4, pc}
   bd226:	4603      	mov	r3, r0
   bd228:	e7f7      	b.n	bd21a <__any_on+0x26>
   bd22a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bd22e:	2900      	cmp	r1, #0
   bd230:	d0f5      	beq.n	bd21e <__any_on+0x2a>
   bd232:	2001      	movs	r0, #1
   bd234:	e7f6      	b.n	bd224 <__any_on+0x30>

000bd236 <_calloc_r>:
   bd236:	b513      	push	{r0, r1, r4, lr}
   bd238:	434a      	muls	r2, r1
   bd23a:	4611      	mov	r1, r2
   bd23c:	9201      	str	r2, [sp, #4]
   bd23e:	f7fa fd0d 	bl	b7c5c <_malloc_r>
   bd242:	4604      	mov	r4, r0
   bd244:	b118      	cbz	r0, bd24e <_calloc_r+0x18>
   bd246:	9a01      	ldr	r2, [sp, #4]
   bd248:	2100      	movs	r1, #0
   bd24a:	f7fd ffb9 	bl	bb1c0 <memset>
   bd24e:	4620      	mov	r0, r4
   bd250:	b002      	add	sp, #8
   bd252:	bd10      	pop	{r4, pc}
   bd254:	0000      	movs	r0, r0
	...

000bd258 <nan>:
   bd258:	ed9f 0b01 	vldr	d0, [pc, #4]	; bd260 <nan+0x8>
   bd25c:	4770      	bx	lr
   bd25e:	bf00      	nop
   bd260:	00000000 	.word	0x00000000
   bd264:	7ff80000 	.word	0x7ff80000

000bd268 <nanf>:
   bd268:	ed9f 0a01 	vldr	s0, [pc, #4]	; bd270 <nanf+0x8>
   bd26c:	4770      	bx	lr
   bd26e:	bf00      	nop
   bd270:	7fc00000 	.word	0x7fc00000

000bd274 <__ascii_wctomb>:
   bd274:	b149      	cbz	r1, bd28a <__ascii_wctomb+0x16>
   bd276:	2aff      	cmp	r2, #255	; 0xff
   bd278:	bf85      	ittet	hi
   bd27a:	238a      	movhi	r3, #138	; 0x8a
   bd27c:	6003      	strhi	r3, [r0, #0]
   bd27e:	700a      	strbls	r2, [r1, #0]
   bd280:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bd284:	bf98      	it	ls
   bd286:	2001      	movls	r0, #1
   bd288:	4770      	bx	lr
   bd28a:	4608      	mov	r0, r1
   bd28c:	4770      	bx	lr
	...

000bd290 <__aeabi_d2lz>:
   bd290:	b538      	push	{r3, r4, r5, lr}
   bd292:	2200      	movs	r2, #0
   bd294:	2300      	movs	r3, #0
   bd296:	4604      	mov	r4, r0
   bd298:	460d      	mov	r5, r1
   bd29a:	f7fd fe83 	bl	bafa4 <__aeabi_dcmplt>
   bd29e:	b928      	cbnz	r0, bd2ac <__aeabi_d2lz+0x1c>
   bd2a0:	4620      	mov	r0, r4
   bd2a2:	4629      	mov	r1, r5
   bd2a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd2a8:	f7fd bf2a 	b.w	bb100 <__aeabi_d2ulz>
   bd2ac:	4620      	mov	r0, r4
   bd2ae:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bd2b2:	f7fd ff25 	bl	bb100 <__aeabi_d2ulz>
   bd2b6:	4240      	negs	r0, r0
   bd2b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd2bc:	bd38      	pop	{r3, r4, r5, pc}
   bd2be:	bf00      	nop

000bd2c0 <dynalib_user>:
   bd2c0:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bd2d0:	0000 0000 6162 6973 5f63 7473 6972 676e     ....basic_string
   bd2e0:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   bd2f0:	6c75 206c 6f6e 2074 6176 696c 0064 720a     ull not valid..r
   bd300:	7165 6575 7473 6320 646f 2065 2c31 6120     equest code 1, a
   bd310:	6464 6572 7373 203a 7400 6172 736e 696d     ddress: .transmi
   bd320:	7373 6f69 206e 6572 6963 7665 6465 6620     ssion recieved f
   bd330:	6f72 3a6d 0020 6564 6976 6563 6920 3a64     rom: .device id:
   bd340:	0020 7274 6e61 6d73 7369 6973 6e6f 7320      .transmission s
   bd350:	6e65 2074 6f74 203a 7200 7165 6575 7473     ent to: .request
   bd360:	6320 646f 2065 2c32 6120 6464 6572 7373      code 2, address
   bd370:	203a 6300 6e6f 6c66 6369 2074 6576 6972     : .conflict veri
   bd380:	6966 6163 6974 6e6f 203a 0a00 6f43 6e6e     fication: ..Conn
   bd390:	6365 6574 2064 6f74 203a 6300 6e61 6f6e     ected to: .canno
   bd3a0:	2074 7263 6165 6574 7320 6474 3a3a 6576     t create std::ve
   bd3b0:	7463 726f 6c20 7261 6567 2072 6874 6e61     ctor larger than
   bd3c0:	6d20 7861 735f 7a69 2865 0029 4c42 2045      max_size().BLE 
   bd3d0:	6966 696e 6873 6465 7200 6465 4600 3046     finished.red.FF0
   bd3e0:	3030 0030 4130 3030 3030 6200 756c 0065     000.0A0000.blue.
   bd3f0:	3030 3030 4646 3000 3030 3030 0041 7262     0000FF.00000A.br
   bd400:	776f 006e 4646 4646 3030 3000 3041 3041     own.FFFF00.0A0A0
   bd410:	0030 3030 4646 3030 3000 3030 3041 0030     0.00FF00.000A00.
   bd420:	726f 6e61 6567 4600 3846 3030 0030 4130     orange.FF8000.0A
   bd430:	3530 3030 7000 7275 6c70 0065 3032 3030     0500.purple.2000
   bd440:	4646 3000 3032 3030 0041 6970 6b6e 4600     FF.02000A.pink.F
   bd450:	3846 3830 0030 4130 3530 3530 3600 3445     F8080.0A0505.6E4
   bd460:	3030 3030 2d31 3542 3341 462d 3933 2d33     00001-B5A3-F393-
   bd470:	3045 3941 452d 3035 3245 4434 4343 3941     E0A9-E50E24DCCA9
   bd480:	0045 4536 3034 3030 3230 422d 4135 2d33     E.6E400002-B5A3-
   bd490:	3346 3339 452d 4130 2d39 3545 4530 3432     F393-E0A9-E50E24
   bd4a0:	4344 4143 4539 3600 3445 3030 3030 2d33     DCCA9E.6E400003-
   bd4b0:	3542 3341 462d 3933 2d33 3045 3941 452d     B5A3-F393-E0A9-E
   bd4c0:	3035 3245 4434 4343 3941 0045 7874 7200     50E24DCCA9E.tx.r
   bd4d0:	0078 7274 6b65 742e 6568 6377 2e6c 6f63     x.trek.thewcl.co
   bd4e0:	006d 6f6c 706f 7320 6174 7472 2500 2c69     m.loop start.%i,
   bd4f0:	0020 6c2f 6f6f 2d70 7274 6361 736b 632f      ./loop-tracks/c
   bd500:	6174 6c3f 6e69 7365 003d 4547 0054 6170     ta?lines=.GET.pa
   bd510:	7372 6e69 0067 6170 7372 6e69 2067 6166     rsing.parsing fa
   bd520:	6c69 6465 6c00 6e69 7365 7400 6172 6e69     iled.lines.train
   bd530:	0073 656e 7478 735f 6f74 0070 6564 7473     s.next_stop.dest
   bd540:	6e69 7461 6f69 006e 6964 6572 7463 6f69     ination.directio
   bd550:	006e 616c 6974 7574 6564 6c00 6e6f 6967     n.latitude.longi
   bd560:	7574 6564 6200 6572 6b61 6900 206e 7267     tude.break.in gr
   bd570:	6565 006e 7325 7220 6961 206c 6170 7472     een.%s rail part
   bd580:	2520 3a69 0020 0000                          %i: ...

000bd588 <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   bd590:	40b9 000b 40cd 000b 6341 6563 7470 2f00     .@...@..Accept./
   bd5a0:	2f2a 0000 0019 0000 0003 0000 0007 0000     */..............
   bd5b0:	0005 0000 000c 0000 0008 0000 0005 0000     ................
   bd5c0:	0005 0000 0005 0000 0019 0000 0005 0000     ................
   bd5d0:	000f 0000 000a 0000 000a 0000 000a 0000     ................
   bd5e0:	000a 0000 0014 0000 0000 0000 0028 0000     ............(...
   bd5f0:	0000 0000 0002 0000 0006 0000 0000 0000     ................
   bd600:	0000 0000 000f 0000 000a 0000 000a 0000     ................
   bd610:	000f 0000 000f 0000 000f 0000 0014 0000     ................
   bd620:	0000 0000 0001 0000 0003 0000 0000 0000     ................
   bd630:	0000 0000 000c 0000 0007 0000 0001 0000     ................
   bd640:	000a 0000 000a 0000 000a 0000 000a 0000     ................
   bd650:	000c 0000 0000 0000 0028 0000 0008 0000     ........(.......
   bd660:	0003 0000 0007 0000 0001 0000 0003 0000     ................
   bd670:	0007 0000 0007 0000 0006 0000 000a 0000     ................
   bd680:	000a 0000 000a 0000 000a 0000 000e 0000     ................
   bd690:	0000 0000 0028 0000 0006 0000 0003 0000     ....(...........
   bd6a0:	0007 0000 0002 0000 0003 0000 4820 5454     ............ HTT
   bd6b0:	2f50 2e31 0d30 000a 6c63 736f 0065 6f43     P/1.0...close.Co
   bd6c0:	6e6e 6365 6974 6e6f 4800 534f 0054 6f43     nnection.HOST.Co
   bd6d0:	746e 6e65 2d74 654c 676e 6874 5000 534f     ntent-Length.POS
   bd6e0:	0054 0a0d 0a0d 2500 3430 0078               T......%04x.

000bd6ec <_ZTV10JsonBuffer>:
	...
   bd6f4:	6dfd 000b 6e19 000b                         .m...n..

000bd6fc <_ZTV10JsonParser>:
	...
   bd704:	6e2d 000b 6e51 000b                         -n..Qn..

000bd70c <_ZTV13JsonReference>:
	...
   bd714:	6ded 000b 6def 000b 7341 6573 7472 6f69     .m...m..Assertio
   bd724:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   bd734:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   bd744:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   bd754:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   bd764:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   bd774:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   bd784:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   bd794:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   bd7a4:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   bd7b4:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   bd7c4:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   bd7d4:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   bd7e4:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   bd7f4:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   bd804:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   bd814:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   bd824:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   bd834:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   bd844:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   bd854:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   bd864:	6369 002e                                   ic..

000bd868 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd870:	7ca9 000b 7d0d 000b 7df3 000b 7d37 000b     .|...}...}..7}..
   bd880:	7cad 000b                                   .|..

000bd884 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd88c:	7ca5 000b 7d1b 000b 7ca7 000b 7d3d 000b     .|...}...|..=}..
   bd89c:	7ccd 000b                                   .|..

000bd8a0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd8a8:	7ca3 000b 7d29 000b 84c9 000b 7d43 000b     .|..)}......C}..
   bd8b8:	7ced 000b                                   .|..

000bd8bc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bd8c8:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bd8da <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bd8da:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bd8ea <_ZN8particle7BleUuid9BASE_UUIDE>:
   bd8ea:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000bd8fc <_ZTVN5spark13EthernetClassE>:
	...
   bd904:	8f77 000b 8f6d 000b 8f63 000b 8f59 000b     w...m...c...Y...
   bd914:	8f4d 000b 8f41 000b 91fd 000b 9205 000b     M...A...........
   bd924:	8f35 000b 8f2d 000b 8f23 000b 8f19 000b     5...-...#.......
   bd934:	9235 000b                                   5...

000bd938 <_ZTV7TwoWire>:
	...
   bd940:	8f95 000b 8fdf 000b 8fb7 000b 8f97 000b     ................
   bd950:	8fbf 000b 8fc7 000b 8fcf 000b 8fd7 000b     ................

000bd960 <_ZTV9IPAddress>:
	...
   bd968:	90a1 000b 9091 000b 9093 000b 7061 0070     ............app.

000bd978 <_ZTVN5spark12NetworkClassE>:
	...
   bd980:	91bd 000b 91c7 000b 91d1 000b 91db 000b     ................
   bd990:	91e5 000b 91f1 000b 91fd 000b 9205 000b     ................
   bd9a0:	920d 000b 9219 000b 9221 000b 922b 000b     ........!...+...
   bd9b0:	9235 000b 6977 6972 676e 7200 6365 2076     5...wiring.recv 
   bd9c0:	7265 6f72 2072 203d 6425 0000               error = %d..

000bd9cc <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd9d4:	9769 000b 978d 000b 9cbf 000b 979b 000b     i...............
   bd9e4:	976d 000b                                   m...

000bd9e8 <_ZTV9TCPClient>:
	...
   bd9f0:	9819 000b 984d 000b 96e5 000b 96ff 000b     ....M...........
   bda00:	9b55 000b 9729 000b 99cb 000b 975d 000b     U...).......]...
   bda10:	9a5d 000b 989d 000b 99f9 000b 9c09 000b     ]...............
   bda20:	9999 000b 975f 000b 9711 000b 97a1 000b     ...._...........
   bda30:	987d 000b 5925 252d 2d6d 6425 2554 3a48     }...%Y-%m-%dT%H:
   bda40:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bda50 <_ZTV11USARTSerial>:
	...
   bda58:	9cd9 000b 9d45 000b 9d1d 000b 9321 000b     ....E.......!...
   bda68:	9ced 000b 9d09 000b 9cfb 000b 9d17 000b     ................
   bda78:	9cdb 000b 9cdf 000b                         ........

000bda80 <_ZTV9USBSerial>:
	...
   bda88:	9d83 000b 9deb 000b 9dc1 000b 9321 000b     ............!...
   bda98:	9db3 000b 9d85 000b 9d95 000b 9de5 000b     ................
   bdaa8:	9da5 000b 9d7d 000b                         ....}...

000bdab0 <_ZTVN5spark9WiFiClassE>:
	...
   bdab8:	9ee3 000b 9ed9 000b 9ecf 000b 9e85 000b     ................
   bdac8:	9ec3 000b 9eb7 000b 91fd 000b 9205 000b     ................
   bdad8:	9eab 000b 9ea3 000b 9e99 000b 9e8f 000b     ................
   bdae8:	9235 000b                                   5...

000bdaec <_ZSt7nothrow>:
	...

000bdaed <_ZTSSt19_Sp_make_shared_tag>:
   bdaed:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bdafd:	6572 5f64 6174 0067 0000                     red_tag....

000bdb08 <_ZTISt19_Sp_make_shared_tag>:
   bdb08:	db60 000b daed 000b 6162 6973 5f63 7473     `.......basic_st
   bdb18:	6972 676e 3a3a 4d5f 635f 6572 7461 0065     ring::_M_create.

000bdb28 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bdb28:	dbc0 000b db34 000b dbe4 000b               ....4.......

000bdb34 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bdb34:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bdb44:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bdb54:	0045 0000                                   E...

000bdb58 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bdb58:	0000 0000 db28 000b a2d9 000b a2ed 000b     ....(...........
   bdb68:	a481 000b a481 000b a357 000b a299 000b     ........W.......
   bdb78:	a33f 000b a301 000b a2cb 000b               ?...........

000bdb84 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bdb84:	dbc0 000b db90 000b db28 000b               ........(...

000bdb90 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bdb90:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bdba0:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bdbb0:	666e 456f 0000 0000                         nfoE....

000bdbb8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bdbb8:	0000 0000 db84 000b a381 000b a395 000b     ................
   bdbc8:	a481 000b a481 000b a357 000b a299 000b     ........W.......
   bdbd8:	a455 000b a3e1 000b a3a9 000b               U...........

000bdbe4 <_ZTISt9type_info>:
   bdbe4:	db60 000b dbec 000b                         `.......

000bdbec <_ZTSSt9type_info>:
   bdbec:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bdbfc:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bdc0c:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   bdc1c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bdc2c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bdc3c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bdc4c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bdc5c:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   bdc6c:	6e69 7469 0079 6e61 0000 0000               inity.an....

000bdc78 <fpi.1>:
   bdc78:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bdc88:	0000 0000                                   ....

000bdc8c <fpinan.0>:
   bdc8c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   bdc9c:	0000 0000                                   ....

000bdca0 <tinytens>:
   bdca0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bdcb0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bdcc0:	6f43 64ac 0628 1168                         Co.d(.h.

000bdcc8 <_ctype_>:
   bdcc8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bdcd8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bdce8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bdcf8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bdd08:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bdd18:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bdd28:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bdd38:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bdd48:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bddc8:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bddd8:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   bdde8:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bddf8:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bde08:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bde18:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bde28:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bde38:	632e 0000                                   .c..

000bde3c <_C_numeric_locale>:
   bde3c:	d866 000b d6e6 000b 5364 2003 0043 4f50     f.......dS. C.PO
   bde4c:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   bde5c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bde6c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bde7c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bde8c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bde9c:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   bdeac:	0000 0000                                   ....

000bdeb0 <__mprec_bigtens>:
   bdeb0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bdec0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bded0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bded8 <__mprec_tens>:
   bded8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bdee8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bdef8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bdf08:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bdf18:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bdf28:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bdf38:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bdf48:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bdf58:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bdf68:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bdf78:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bdf88:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bdf98:	9db4 79d9 7843 44ea                         ...yCx.D

000bdfa0 <p05.0>:
   bdfa0:	0005 0000 0019 0000 007d 0000               ........}...

000bdfac <link_const_variable_data_end>:
   bdfac:	000b6161 	.word	0x000b6161
   bdfb0:	000b7745 	.word	0x000b7745
   bdfb4:	000b8f09 	.word	0x000b8f09
   bdfb8:	000b8f81 	.word	0x000b8f81
   bdfbc:	000b91ad 	.word	0x000b91ad
   bdfc0:	000b930d 	.word	0x000b930d
   bdfc4:	000b9449 	.word	0x000b9449
   bdfc8:	000b96c1 	.word	0x000b96c1
   bdfcc:	000b9cc5 	.word	0x000b9cc5
   bdfd0:	000b9eed 	.word	0x000b9eed

000bdfd4 <link_constructors_end>:
	...
