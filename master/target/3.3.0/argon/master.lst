
/Users/sainihome/Documents/GitHub/loop-tracks/master/target/3.3.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b090  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bf0b0  000bf0b0  0000f0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bf0d4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  200350a8  000bf0d8  000150a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00009550  200352a0  200352a0  000252a0  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bf2d0  000bf2d0  0001f2d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bf2f8  000bf2f8  0001f2f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001495b0  00000000  00000000  0001f2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00011ebb  00000000  00000000  001688ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004c3ac  00000000  00000000  0017a767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003098  00000000  00000000  001c6b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d880  00000000  00000000  001c9bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034efe  00000000  00000000  001d742b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00043769  00000000  00000000  0020c329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001568d6  00000000  00000000  0024fa92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a7f0  00000000  00000000  003a6368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f008 f8ad 	bl	bc190 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f008 f8cf 	bl	bc1e0 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	200350a8 	.word	0x200350a8
   b404c:	000bf0d8 	.word	0x000bf0d8
   b4050:	200352a0 	.word	0x200352a0
   b4054:	200352a0 	.word	0x200352a0
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f007 f813 	bl	bb08c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bf084 	.word	0x000bf084
   b4080:	000bf0a8 	.word	0x000bf0a8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f002 be1e 	b.w	b6cc4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f002 ff89 	bl	b6fa0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f006 bfb3 	b.w	baffc <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f004 bd15 	b.w	b8ac4 <malloc>

000b409a <_Znaj>:
   b409a:	f004 bd13 	b.w	b8ac4 <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f004 bd19 	b.w	b8ad4 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f004 bd17 	b.w	b8ad4 <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40b8:	b510      	push	{r4, lr}
   b40ba:	4b03      	ldr	r3, [pc, #12]	; (b40c8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   b40bc:	6003      	str	r3, [r0, #0]
   b40be:	4604      	mov	r4, r0
   b40c0:	f003 fdfe 	bl	b7cc0 <_ZN10JsonParserD1Ev>
   b40c4:	4620      	mov	r0, r4
   b40c6:	bd10      	pop	{r4, pc}
   b40c8:	000be61c 	.word	0x000be61c

000b40cc <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   b40cc:	b510      	push	{r4, lr}
   b40ce:	4604      	mov	r4, r0
   b40d0:	f7ff fff2 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f246 51bc 	movw	r1, #26044	; 0x65bc
   b40da:	f7ff ffe2 	bl	b40a2 <_ZdlPvj>
   b40de:	4620      	mov	r0, r4
   b40e0:	bd10      	pop	{r4, pc}
	...

000b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   b40e4:	b508      	push	{r3, lr}
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b40e6:	4603      	mov	r3, r0
   b40e8:	b150      	cbz	r0, b4100 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x1c>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
	if (__n > this->_M_max_size())
   b40ea:	4a06      	ldr	r2, [pc, #24]	; (b4104 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x20>)
   b40ec:	4290      	cmp	r0, r2
   b40ee:	d901      	bls.n	b40f4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b40f0:	f007 f866 	bl	bb1c0 <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b40f4:	200c      	movs	r0, #12
   b40f6:	4358      	muls	r0, r3
      }
   b40f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b40fc:	f7ff bfcb 	b.w	b4096 <_Znwj>
   b4100:	bd08      	pop	{r3, pc}
   b4102:	bf00      	nop
   b4104:	0aaaaaaa 	.word	0x0aaaaaaa

000b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>:

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4108:	f100 0308 	add.w	r3, r0, #8
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b410c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b410e:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b4110:	6003      	str	r3, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b4112:	460d      	mov	r5, r1
   b4114:	b1d9      	cbz	r1, b414e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x46>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b4116:	4608      	mov	r0, r1
   b4118:	f008 f8aa 	bl	bc270 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b411c:	280f      	cmp	r0, #15
   b411e:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4122:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4124:	d907      	bls.n	b4136 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b4126:	2200      	movs	r2, #0
   b4128:	a901      	add	r1, sp, #4
   b412a:	4620      	mov	r0, r4
   b412c:	f007 f85e 	bl	bb1ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4130:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4132:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4134:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4136:	4632      	mov	r2, r6
   b4138:	4629      	mov	r1, r5
   b413a:	6820      	ldr	r0, [r4, #0]
   b413c:	f007 f891 	bl	bb262 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b4140:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b4142:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4144:	6063      	str	r3, [r4, #4]
   b4146:	2100      	movs	r1, #0
   b4148:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b414a:	b002      	add	sp, #8
   b414c:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b414e:	4801      	ldr	r0, [pc, #4]	; (b4154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x4c>)
   b4150:	f007 f839 	bl	bb1c6 <_ZSt19__throw_logic_errorPKc>
   b4154:	000be2f4 	.word	0x000be2f4

000b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4158:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b415a:	4603      	mov	r3, r0
   b415c:	b150      	cbz	r0, b4174 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b415e:	4a06      	ldr	r2, [pc, #24]	; (b4178 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x20>)
   b4160:	4290      	cmp	r0, r2
   b4162:	d901      	bls.n	b4168 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4164:	f007 f82c 	bl	bb1c0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4168:	206c      	movs	r0, #108	; 0x6c
   b416a:	4358      	muls	r0, r3
      }
   b416c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4170:	f7ff bf91 	b.w	b4096 <_Znwj>
   b4174:	bd08      	pop	{r3, pc}
   b4176:	bf00      	nop
   b4178:	012f684b 	.word	0x012f684b

000b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b417c:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b417e:	4603      	mov	r3, r0
   b4180:	b150      	cbz	r0, b4198 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b4182:	4a06      	ldr	r2, [pc, #24]	; (b419c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x20>)
   b4184:	4290      	cmp	r0, r2
   b4186:	d901      	bls.n	b418c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4188:	f007 f81a 	bl	bb1c0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b418c:	2018      	movs	r0, #24
   b418e:	4358      	muls	r0, r3
      }
   b4190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4194:	f7ff bf7f 	b.w	b4096 <_Znwj>
   b4198:	bd08      	pop	{r3, pc}
   b419a:	bf00      	nop
   b419c:	05555555 	.word	0x05555555

000b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41a0:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41a2:	b148      	cbz	r0, b41b8 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41a4:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b41a8:	d301      	bcc.n	b41ae <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41aa:	f007 f809 	bl	bb1c0 <_ZSt17__throw_bad_allocv>
      }
   b41ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41b2:	0080      	lsls	r0, r0, #2
   b41b4:	f7ff bf6f 	b.w	b4096 <_Znwj>
   b41b8:	bd08      	pop	{r3, pc}

000b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41ba:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41bc:	b148      	cbz	r0, b41d2 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41be:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   b41c2:	d301      	bcc.n	b41c8 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41c4:	f006 fffc 	bl	bb1c0 <_ZSt17__throw_bad_allocv>
      }
   b41c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41cc:	00c0      	lsls	r0, r0, #3
   b41ce:	f7ff bf62 	b.w	b4096 <_Znwj>
   b41d2:	bd08      	pop	{r3, pc}

000b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
   b41d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b41d6:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b41da:	6003      	str	r3, [r0, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b41dc:	e9d1 5300 	ldrd	r5, r3, [r1]
      basic_string(const basic_string& __str)
   b41e0:	4604      	mov	r4, r0
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b41e2:	18ee      	adds	r6, r5, r3
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   b41e4:	b91d      	cbnz	r5, b41ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
   b41e6:	b116      	cbz	r6, b41ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
	  std::__throw_logic_error(__N("basic_string::"
   b41e8:	480c      	ldr	r0, [pc, #48]	; (b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x48>)
   b41ea:	f006 ffec 	bl	bb1c6 <_ZSt19__throw_logic_errorPKc>
	if (__dnew > size_type(_S_local_capacity))
   b41ee:	2b0f      	cmp	r3, #15
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b41f0:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b41f2:	d907      	bls.n	b4204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x30>
	    _M_data(_M_create(__dnew, size_type(0)));
   b41f4:	2200      	movs	r2, #0
   b41f6:	a901      	add	r1, sp, #4
   b41f8:	4620      	mov	r0, r4
   b41fa:	f006 fff7 	bl	bb1ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b41fe:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4200:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4202:	60a3      	str	r3, [r4, #8]
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4204:	4632      	mov	r2, r6
   b4206:	4629      	mov	r1, r5
   b4208:	6820      	ldr	r0, [r4, #0]
   b420a:	f007 f825 	bl	bb258 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
   b420e:	9b01      	ldr	r3, [sp, #4]
   b4210:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4212:	6063      	str	r3, [r4, #4]
   b4214:	2100      	movs	r1, #0
   b4216:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b4218:	b002      	add	sp, #8
   b421a:	bd70      	pop	{r4, r5, r6, pc}
   b421c:	000be2f4 	.word	0x000be2f4

000b4220 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4220:	6803      	ldr	r3, [r0, #0]
   b4222:	b2c9      	uxtb	r1, r1
   b4224:	689b      	ldr	r3, [r3, #8]
   b4226:	4718      	bx	r3

000b4228 <_ZN5Print5writeEPKc.isra.0>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4228:	b513      	push	{r0, r1, r4, lr}
   b422a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b422c:	b161      	cbz	r1, b4248 <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b422e:	4608      	mov	r0, r1
   b4230:	9101      	str	r1, [sp, #4]
   b4232:	f008 f81d 	bl	bc270 <strlen>
   b4236:	6823      	ldr	r3, [r4, #0]
   b4238:	9901      	ldr	r1, [sp, #4]
   b423a:	68db      	ldr	r3, [r3, #12]
   b423c:	4602      	mov	r2, r0
   b423e:	4620      	mov	r0, r4
    }
   b4240:	b002      	add	sp, #8
   b4242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4246:	4718      	bx	r3
    }
   b4248:	b002      	add	sp, #8
   b424a:	bd10      	pop	{r4, pc}

000b424c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   b424c:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b424e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4250:	4604      	mov	r4, r0
   b4252:	460d      	mov	r5, r1
      if (&__x != this)
   b4254:	d025      	beq.n	b42a2 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x56>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4256:	e9d1 7100 	ldrd	r7, r1, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   b425a:	6800      	ldr	r0, [r0, #0]
   b425c:	68a3      	ldr	r3, [r4, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b425e:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b4260:	1a1b      	subs	r3, r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   b4262:	429e      	cmp	r6, r3
   b4264:	d91e      	bls.n	b42a4 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   b4266:	10f0      	asrs	r0, r6, #3
   b4268:	f7ff ffa7 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
   b426c:	2300      	movs	r3, #0
   b426e:	4605      	mov	r5, r0
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   b4270:	429e      	cmp	r6, r3
   b4272:	d00a      	beq.n	b428a <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x3e>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4274:	18ea      	adds	r2, r5, r3
   b4276:	bf1c      	itt	ne
   b4278:	18f9      	addne	r1, r7, r3
   b427a:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b427e:	f103 0308 	add.w	r3, r3, #8
   b4282:	bf18      	it	ne
   b4284:	e9c2 0100 	strdne	r0, r1, [r2]
   b4288:	e7f2      	b.n	b4270 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x24>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b428a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b428c:	b118      	cbz	r0, b4296 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x4a>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
   b428e:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4290:	1a09      	subs	r1, r1, r0
   b4292:	f7ff ff06 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4296:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4298:	4435      	add	r5, r6
   b429a:	60a5      	str	r5, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b429c:	6823      	ldr	r3, [r4, #0]
   b429e:	4433      	add	r3, r6
   b42a0:	6063      	str	r3, [r4, #4]
	}
      return *this;
    }
   b42a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b42a4:	6862      	ldr	r2, [r4, #4]
   b42a6:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   b42a8:	4296      	cmp	r6, r2
   b42aa:	d806      	bhi.n	b42ba <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x6e>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b42ac:	42b9      	cmp	r1, r7
   b42ae:	d0f5      	beq.n	b429c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b42b0:	4632      	mov	r2, r6
   b42b2:	4639      	mov	r1, r7
   b42b4:	f007 ff7a 	bl	bc1ac <memmove>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b42b8:	e7f0      	b.n	b429c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	  if (_Num)
   b42ba:	b112      	cbz	r2, b42c2 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x76>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b42bc:	4639      	mov	r1, r7
   b42be:	f007 ff75 	bl	bc1ac <memmove>
   b42c2:	e9d4 2700 	ldrd	r2, r7, [r4]
   b42c6:	1abb      	subs	r3, r7, r2
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b42c8:	682a      	ldr	r2, [r5, #0]
   b42ca:	686d      	ldr	r5, [r5, #4]
   b42cc:	441a      	add	r2, r3
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b42ce:	1aad      	subs	r5, r5, r2
					  __x._M_impl._M_finish,
   b42d0:	2300      	movs	r3, #0
	      for (; __first != __last; ++__first, (void)++__cur)
   b42d2:	429d      	cmp	r5, r3
   b42d4:	d0e2      	beq.n	b429c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
   b42d6:	eb17 0c03 	adds.w	ip, r7, r3
   b42da:	bf1c      	itt	ne
   b42dc:	18d1      	addne	r1, r2, r3
   b42de:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b42e2:	f103 0308 	add.w	r3, r3, #8
   b42e6:	bf18      	it	ne
   b42e8:	e9cc 0100 	strdne	r0, r1, [ip]
   b42ec:	e7f1      	b.n	b42d2 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x86>
	...

000b42f0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>:
      if (&__x != this)
   b42f0:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b42f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b42f6:	4604      	mov	r4, r0
   b42f8:	468a      	mov	sl, r1
      if (&__x != this)
   b42fa:	d036      	beq.n	b436a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7a>
   b42fc:	e9d1 5b00 	ldrd	r5, fp, [r1]
			 - this->_M_impl._M_start); }
   b4300:	f8d0 9000 	ldr.w	r9, [r0]
   b4304:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4306:	4a39      	ldr	r2, [pc, #228]	; (b43ec <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xfc>)
   b4308:	ebab 0705 	sub.w	r7, fp, r5
			 - this->_M_impl._M_start); }
   b430c:	eba3 0309 	sub.w	r3, r3, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4310:	ea4f 08e7 	mov.w	r8, r7, asr #3
	  if (__xlen > capacity())
   b4314:	42bb      	cmp	r3, r7
   b4316:	fb02 f808 	mul.w	r8, r2, r8
   b431a:	d228      	bcs.n	b436e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7e>
	  pointer __result = this->_M_allocate(__n);
   b431c:	4640      	mov	r0, r8
   b431e:	f7ff ff2d 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
   b4322:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b4324:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b4326:	45ab      	cmp	fp, r5
   b4328:	d00a      	beq.n	b4340 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x50>
   b432a:	f1b8 0f00 	cmp.w	r8, #0
   b432e:	d003      	beq.n	b4338 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x48>
   b4330:	4629      	mov	r1, r5
   b4332:	4640      	mov	r0, r8
   b4334:	f7ff ff4e 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4338:	f108 0818 	add.w	r8, r8, #24
   b433c:	3518      	adds	r5, #24
   b433e:	e7f2      	b.n	b4326 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x36>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4340:	e9d4 5800 	ldrd	r5, r8, [r4]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b4344:	45a8      	cmp	r8, r5
   b4346:	d004      	beq.n	b4352 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x62>
      { _M_dispose(); }
   b4348:	4628      	mov	r0, r5
   b434a:	f006 ff71 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b434e:	3518      	adds	r5, #24
   b4350:	e7f8      	b.n	b4344 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x54>
	      _M_deallocate(this->_M_impl._M_start,
   b4352:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4354:	b118      	cbz	r0, b435e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x6e>
			    - this->_M_impl._M_start);
   b4356:	68a1      	ldr	r1, [r4, #8]
   b4358:	1a09      	subs	r1, r1, r0
   b435a:	f7ff fea2 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b435e:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4360:	443e      	add	r6, r7
   b4362:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4364:	6823      	ldr	r3, [r4, #0]
   b4366:	443b      	add	r3, r7
   b4368:	6063      	str	r3, [r4, #4]
    }
   b436a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b436e:	6846      	ldr	r6, [r0, #4]
   b4370:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b4374:	42b7      	cmp	r7, r6
   b4376:	d819      	bhi.n	b43ac <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xbc>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4378:	4646      	mov	r6, r8
   b437a:	46ca      	mov	sl, r9
   b437c:	2e00      	cmp	r6, #0
   b437e:	dd08      	ble.n	b4392 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xa2>
		  }
	      }
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
	  }
#endif
	this->_M_assign(__str);
   b4380:	4629      	mov	r1, r5
   b4382:	4650      	mov	r0, sl
   b4384:	f006 ff72 	bl	bb26c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b4388:	3518      	adds	r5, #24
	      ++__result;
   b438a:	f10a 0a18 	add.w	sl, sl, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b438e:	3e01      	subs	r6, #1
   b4390:	e7f4      	b.n	b437c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x8c>
   b4392:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   b4396:	2518      	movs	r5, #24
      : _M_current(__i) { }
   b4398:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b439a:	fb05 9508 	mla	r5, r5, r8, r9
	  for (; __first != __last; ++__first)
   b439e:	42ae      	cmp	r6, r5
   b43a0:	d0e0      	beq.n	b4364 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
      { _M_dispose(); }
   b43a2:	4628      	mov	r0, r5
   b43a4:	f006 ff44 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b43a8:	3518      	adds	r5, #24
      {
	++_M_current;
	return *this;
   b43aa:	e7f8      	b.n	b439e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xae>
   b43ac:	10f6      	asrs	r6, r6, #3
   b43ae:	4356      	muls	r6, r2
   b43b0:	2e00      	cmp	r6, #0
   b43b2:	dd08      	ble.n	b43c6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xd6>
	this->_M_assign(__str);
   b43b4:	4629      	mov	r1, r5
   b43b6:	4648      	mov	r0, r9
   b43b8:	f006 ff58 	bl	bb26c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b43bc:	3518      	adds	r5, #24
	      ++__result;
   b43be:	f109 0918 	add.w	r9, r9, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b43c2:	3e01      	subs	r6, #1
   b43c4:	e7f4      	b.n	b43b0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xc0>
   b43c6:	e9d4 5600 	ldrd	r5, r6, [r4]
   b43ca:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43cc:	f8da 5000 	ldr.w	r5, [sl]
					  __x._M_impl._M_finish,
   b43d0:	f8da 8004 	ldr.w	r8, [sl, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43d4:	440d      	add	r5, r1
   b43d6:	45a8      	cmp	r8, r5
   b43d8:	d0c4      	beq.n	b4364 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b43da:	b11e      	cbz	r6, b43e4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xf4>
   b43dc:	4629      	mov	r1, r5
   b43de:	4630      	mov	r0, r6
   b43e0:	f7ff fef8 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b43e4:	3518      	adds	r5, #24
   b43e6:	3618      	adds	r6, #24
   b43e8:	e7f5      	b.n	b43d6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xe6>
   b43ea:	bf00      	nop
   b43ec:	aaaaaaab 	.word	0xaaaaaaab

000b43f0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43f0:	b40e      	push	{r1, r2, r3}
   b43f2:	b503      	push	{r0, r1, lr}
   b43f4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b43f6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43f8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b43fc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b43fe:	f005 ffc8 	bl	ba392 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4402:	b002      	add	sp, #8
   b4404:	f85d eb04 	ldr.w	lr, [sp], #4
   b4408:	b003      	add	sp, #12
   b440a:	4770      	bx	lr

000b440c <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b440c:	b40e      	push	{r1, r2, r3}
   b440e:	b503      	push	{r0, r1, lr}
   b4410:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4412:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4414:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4418:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b441a:	f005 ffba 	bl	ba392 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b441e:	b002      	add	sp, #8
   b4420:	f85d eb04 	ldr.w	lr, [sp], #4
   b4424:	b003      	add	sp, #12
   b4426:	4770      	bx	lr

000b4428 <_Z16randomizeAddressv>:
    Serial.println();
  }
}

//clears up conflicts with multiple i2c slaves having the same address
void randomizeAddress(){
   b4428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return *(this->_M_impl._M_start + __n);
   b442c:	f8df 82b4 	ldr.w	r8, [pc, #692]	; b46e4 <_Z16randomizeAddressv+0x2bc>
  while(slaveCount != cities[cityIndex].slaveCountExpected){
   b4430:	4da2      	ldr	r5, [pc, #648]	; (b46bc <_Z16randomizeAddressv+0x294>)
void randomizeAddress(){
   b4432:	b08d      	sub	sp, #52	; 0x34
  while(slaveCount != cities[cityIndex].slaveCountExpected){
   b4434:	4ba2      	ldr	r3, [pc, #648]	; (b46c0 <_Z16randomizeAddressv+0x298>)
   b4436:	681a      	ldr	r2, [r3, #0]
   b4438:	f8d8 3000 	ldr.w	r3, [r8]
   b443c:	2128      	movs	r1, #40	; 0x28
   b443e:	fb01 3302 	mla	r3, r1, r2, r3
   b4442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b4444:	682b      	ldr	r3, [r5, #0]
   b4446:	429a      	cmp	r2, r3
   b4448:	f000 80ff 	beq.w	b464a <_Z16randomizeAddressv+0x222>
    slaveCount = 0;
   b444c:	2300      	movs	r3, #0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b444e:	f8df 9298 	ldr.w	r9, [pc, #664]	; b46e8 <_Z16randomizeAddressv+0x2c0>
   b4452:	f8df a298 	ldr.w	sl, [pc, #664]	; b46ec <_Z16randomizeAddressv+0x2c4>
      if(Wire.available() > 0){
        Serial.println("transmission recieved from: " + String(i));

        slaveCount++;

        String inputBuffer = "";
   b4456:	4f9b      	ldr	r7, [pc, #620]	; (b46c4 <_Z16randomizeAddressv+0x29c>)
    slaveCount = 0;
   b4458:	602b      	str	r3, [r5, #0]
    for(int i = 8; i <= 119; i++){
   b445a:	2408      	movs	r4, #8
      Serial.println("\nrequest code 1, address: " + String(i));
   b445c:	f006 fcfc 	bl	bae58 <_Z16_fetch_usbserialv>
   b4460:	4649      	mov	r1, r9
   b4462:	4606      	mov	r6, r0
   b4464:	a808      	add	r0, sp, #32
   b4466:	f006 f816 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
   b446a:	220a      	movs	r2, #10
   b446c:	4621      	mov	r1, r4
   b446e:	a804      	add	r0, sp, #16
   b4470:	f006 f86b 	bl	ba54a <_ZN6StringC1Eih>
   b4474:	a904      	add	r1, sp, #16
   b4476:	a808      	add	r0, sp, #32
   b4478:	f006 f8a2 	bl	ba5c0 <_ZplRK15StringSumHelperRK6String>
   b447c:	6801      	ldr	r1, [r0, #0]
   b447e:	4630      	mov	r0, r6
   b4480:	f005 ff5f 	bl	ba342 <_ZN5Print7printlnEPKc>
   b4484:	a804      	add	r0, sp, #16
   b4486:	f005 ffbb 	bl	ba400 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b448a:	a808      	add	r0, sp, #32
   b448c:	f005 ffb8 	bl	ba400 <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   b4490:	f006 fe30 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4494:	4621      	mov	r1, r4
   b4496:	f005 fdc7 	bl	ba028 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   b449a:	f006 fe2b 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b449e:	2131      	movs	r1, #49	; 0x31
   b44a0:	f7ff febe 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b44a4:	fa5f fb84 	uxtb.w	fp, r4
   b44a8:	f006 fe24 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b44ac:	f005 fdc3 	bl	ba036 <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   b44b0:	f006 fe20 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b44b4:	2218      	movs	r2, #24
   b44b6:	4659      	mov	r1, fp
   b44b8:	f005 fdaf 	bl	ba01a <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   b44bc:	f006 fe1a 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b44c0:	6803      	ldr	r3, [r0, #0]
   b44c2:	691b      	ldr	r3, [r3, #16]
   b44c4:	4798      	blx	r3
   b44c6:	2800      	cmp	r0, #0
   b44c8:	f340 80ba 	ble.w	b4640 <_Z16randomizeAddressv+0x218>
        Serial.println("transmission recieved from: " + String(i));
   b44cc:	f006 fcc4 	bl	bae58 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b44d0:	4651      	mov	r1, sl
   b44d2:	4606      	mov	r6, r0
   b44d4:	a808      	add	r0, sp, #32
   b44d6:	f005 ffde 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
   b44da:	220a      	movs	r2, #10
   b44dc:	4621      	mov	r1, r4
   b44de:	a804      	add	r0, sp, #16
   b44e0:	f006 f833 	bl	ba54a <_ZN6StringC1Eih>
   b44e4:	a904      	add	r1, sp, #16
   b44e6:	a808      	add	r0, sp, #32
   b44e8:	f006 f86a 	bl	ba5c0 <_ZplRK15StringSumHelperRK6String>
   b44ec:	6801      	ldr	r1, [r0, #0]
   b44ee:	4630      	mov	r0, r6
   b44f0:	f005 ff27 	bl	ba342 <_ZN5Print7printlnEPKc>
   b44f4:	a804      	add	r0, sp, #16
   b44f6:	f005 ff83 	bl	ba400 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b44fa:	a808      	add	r0, sp, #32
   b44fc:	f005 ff80 	bl	ba400 <_ZN6StringD1Ev>
        slaveCount++;
   b4500:	682b      	ldr	r3, [r5, #0]
        String inputBuffer = "";
   b4502:	4639      	mov	r1, r7
        slaveCount++;
   b4504:	3301      	adds	r3, #1
        String inputBuffer = "";
   b4506:	4668      	mov	r0, sp
        slaveCount++;
   b4508:	602b      	str	r3, [r5, #0]
        String inputBuffer = "";
   b450a:	f005 ffc4 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
   b450e:	2618      	movs	r6, #24
        char c;
        for(int j = 0; j < 24; j++){
          c = Wire.read();
   b4510:	f006 fdf0 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4514:	6803      	ldr	r3, [r0, #0]
   b4516:	695b      	ldr	r3, [r3, #20]
   b4518:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b451a:	b2c1      	uxtb	r1, r0
   b451c:	4668      	mov	r0, sp
   b451e:	f006 f842 	bl	ba5a6 <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   b4522:	3e01      	subs	r6, #1
   b4524:	d1f4      	bne.n	b4510 <_Z16randomizeAddressv+0xe8>
          inputBuffer += c;
        }
        Wire.beginTransmission(i);
   b4526:	f006 fde5 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b452a:	4621      	mov	r1, r4
   b452c:	f005 fd7c 	bl	ba028 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   b4530:	f006 fde0 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4534:	9900      	ldr	r1, [sp, #0]
   b4536:	f7ff fe77 	bl	b4228 <_ZN5Print5writeEPKc.isra.0>
        Serial.println("device id: " + inputBuffer);
   b453a:	f006 fc8d 	bl	bae58 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b453e:	4962      	ldr	r1, [pc, #392]	; (b46c8 <_Z16randomizeAddressv+0x2a0>)
   b4540:	4606      	mov	r6, r0
   b4542:	a808      	add	r0, sp, #32
   b4544:	f005 ffa7 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
   b4548:	4669      	mov	r1, sp
   b454a:	a808      	add	r0, sp, #32
   b454c:	f006 f838 	bl	ba5c0 <_ZplRK15StringSumHelperRK6String>
   b4550:	6801      	ldr	r1, [r0, #0]
   b4552:	4630      	mov	r0, r6
   b4554:	f005 fef5 	bl	ba342 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4558:	a808      	add	r0, sp, #32
   b455a:	f005 ff51 	bl	ba400 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b455e:	f006 fdc9 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4562:	f005 fd68 	bl	ba036 <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   b4566:	f006 fc77 	bl	bae58 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b456a:	4958      	ldr	r1, [pc, #352]	; (b46cc <_Z16randomizeAddressv+0x2a4>)
   b456c:	4606      	mov	r6, r0
   b456e:	a808      	add	r0, sp, #32
   b4570:	f005 ff91 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
   b4574:	220a      	movs	r2, #10
   b4576:	4621      	mov	r1, r4
   b4578:	a804      	add	r0, sp, #16
   b457a:	f005 ffe6 	bl	ba54a <_ZN6StringC1Eih>
   b457e:	a904      	add	r1, sp, #16
   b4580:	a808      	add	r0, sp, #32
   b4582:	f006 f81d 	bl	ba5c0 <_ZplRK15StringSumHelperRK6String>
   b4586:	6801      	ldr	r1, [r0, #0]
   b4588:	4630      	mov	r0, r6
   b458a:	f005 feda 	bl	ba342 <_ZN5Print7printlnEPKc>
   b458e:	a804      	add	r0, sp, #16
   b4590:	f005 ff36 	bl	ba400 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4594:	a808      	add	r0, sp, #32
   b4596:	f005 ff33 	bl	ba400 <_ZN6StringD1Ev>

        Wire.beginTransmission(i);
   b459a:	f006 fdab 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b459e:	4621      	mov	r1, r4
   b45a0:	f005 fd42 	bl	ba028 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   b45a4:	f006 fda6 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b45a8:	2132      	movs	r1, #50	; 0x32
   b45aa:	f7ff fe39 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b45ae:	f006 fda1 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b45b2:	f005 fd40 	bl	ba036 <_ZN7TwoWire15endTransmissionEv>

        Serial.println("request code 2, address: " + String(i));
   b45b6:	f006 fc4f 	bl	bae58 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b45ba:	4945      	ldr	r1, [pc, #276]	; (b46d0 <_Z16randomizeAddressv+0x2a8>)
   b45bc:	4606      	mov	r6, r0
   b45be:	a808      	add	r0, sp, #32
   b45c0:	f005 ff69 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
   b45c4:	220a      	movs	r2, #10
   b45c6:	4621      	mov	r1, r4
   b45c8:	a804      	add	r0, sp, #16
   b45ca:	f005 ffbe 	bl	ba54a <_ZN6StringC1Eih>
   b45ce:	a904      	add	r1, sp, #16
   b45d0:	a808      	add	r0, sp, #32
   b45d2:	f005 fff5 	bl	ba5c0 <_ZplRK15StringSumHelperRK6String>
   b45d6:	6801      	ldr	r1, [r0, #0]
   b45d8:	4630      	mov	r0, r6
   b45da:	f005 feb2 	bl	ba342 <_ZN5Print7printlnEPKc>
   b45de:	a804      	add	r0, sp, #16
   b45e0:	f005 ff0e 	bl	ba400 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45e4:	a808      	add	r0, sp, #32
   b45e6:	f005 ff0b 	bl	ba400 <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   b45ea:	f006 fd83 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b45ee:	2204      	movs	r2, #4
   b45f0:	4659      	mov	r1, fp
   b45f2:	f005 fd12 	bl	ba01a <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   b45f6:	4639      	mov	r1, r7
   b45f8:	4668      	mov	r0, sp
   b45fa:	f005 ff94 	bl	ba526 <_ZN6StringaSEPKc>
   b45fe:	2604      	movs	r6, #4
        for(int j = 0; j < 4; j++){
          inputBuffer += (char)Wire.read();
   b4600:	f006 fd78 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4604:	6803      	ldr	r3, [r0, #0]
   b4606:	695b      	ldr	r3, [r3, #20]
   b4608:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b460a:	b2c1      	uxtb	r1, r0
   b460c:	4668      	mov	r0, sp
   b460e:	f005 ffca 	bl	ba5a6 <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   b4612:	3e01      	subs	r6, #1
   b4614:	d1f4      	bne.n	b4600 <_Z16randomizeAddressv+0x1d8>
        }
        
        Serial.println("conflict verification: " + inputBuffer);
   b4616:	f006 fc1f 	bl	bae58 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b461a:	492e      	ldr	r1, [pc, #184]	; (b46d4 <_Z16randomizeAddressv+0x2ac>)
   b461c:	4606      	mov	r6, r0
   b461e:	a808      	add	r0, sp, #32
   b4620:	f005 ff39 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
   b4624:	4669      	mov	r1, sp
   b4626:	a808      	add	r0, sp, #32
   b4628:	f005 ffca 	bl	ba5c0 <_ZplRK15StringSumHelperRK6String>
   b462c:	6801      	ldr	r1, [r0, #0]
   b462e:	4630      	mov	r0, r6
   b4630:	f005 fe87 	bl	ba342 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4634:	a808      	add	r0, sp, #32
   b4636:	f005 fee3 	bl	ba400 <_ZN6StringD1Ev>
        String inputBuffer = "";
   b463a:	4668      	mov	r0, sp
   b463c:	f005 fee0 	bl	ba400 <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   b4640:	3401      	adds	r4, #1
   b4642:	2c78      	cmp	r4, #120	; 0x78
   b4644:	f47f af0a 	bne.w	b445c <_Z16randomizeAddressv+0x34>
   b4648:	e6f4      	b.n	b4434 <_Z16randomizeAddressv+0xc>
      }
    }
  }

  Serial.println("\nConnected to: ");
   b464a:	f006 fc05 	bl	bae58 <_Z16_fetch_usbserialv>
   b464e:	4922      	ldr	r1, [pc, #136]	; (b46d8 <_Z16randomizeAddressv+0x2b0>)
    Wire.endTransmission();

    Wire.requestFrom(i, 24);
    if(Wire.available() > 0){
      Serial.print(i);
      Serial.print(", ");
   b4650:	4e22      	ldr	r6, [pc, #136]	; (b46dc <_Z16randomizeAddressv+0x2b4>)
   b4652:	4f23      	ldr	r7, [pc, #140]	; (b46e0 <_Z16randomizeAddressv+0x2b8>)
  Serial.println("\nConnected to: ");
   b4654:	f005 fe75 	bl	ba342 <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   b4658:	2408      	movs	r4, #8
  int count = 0;
   b465a:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   b465c:	f006 fd4a 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4660:	4621      	mov	r1, r4
   b4662:	f005 fce1 	bl	ba028 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   b4666:	f006 fd45 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b466a:	2131      	movs	r1, #49	; 0x31
   b466c:	f7ff fdd8 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b4670:	f006 fd40 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4674:	f005 fcdf 	bl	ba036 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   b4678:	f006 fd3c 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b467c:	2218      	movs	r2, #24
   b467e:	b2e1      	uxtb	r1, r4
   b4680:	f005 fccb 	bl	ba01a <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   b4684:	f006 fd36 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4688:	6803      	ldr	r3, [r0, #0]
   b468a:	691b      	ldr	r3, [r3, #16]
   b468c:	4798      	blx	r3
   b468e:	2800      	cmp	r0, #0
   b4690:	dd0e      	ble.n	b46b0 <_Z16randomizeAddressv+0x288>
      Serial.print(i);
   b4692:	f006 fbe1 	bl	bae58 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4696:	220a      	movs	r2, #10
   b4698:	4621      	mov	r1, r4
   b469a:	f005 fe5c 	bl	ba356 <_ZN5Print11printNumberEmh>
      Serial.print(", ");
   b469e:	f006 fbdb 	bl	bae58 <_Z16_fetch_usbserialv>
   b46a2:	4631      	mov	r1, r6
   b46a4:	f005 fe3a 	bl	ba31c <_ZN5Print5printEPKc>

      addressArr[count++] = i;
   b46a8:	683b      	ldr	r3, [r7, #0]
   b46aa:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
   b46ae:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   b46b0:	3401      	adds	r4, #1
   b46b2:	2c78      	cmp	r4, #120	; 0x78
   b46b4:	d1d2      	bne.n	b465c <_Z16randomizeAddressv+0x234>
    }
  }
}
   b46b6:	b00d      	add	sp, #52	; 0x34
   b46b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b46bc:	2003e6a8 	.word	0x2003e6a8
   b46c0:	200350a8 	.word	0x200350a8
   b46c4:	000be7c6 	.word	0x000be7c6
   b46c8:	000be356 	.word	0x000be356
   b46cc:	000be362 	.word	0x000be362
   b46d0:	000be379 	.word	0x000be379
   b46d4:	000be393 	.word	0x000be393
   b46d8:	000be3ab 	.word	0x000be3ab
   b46dc:	000be587 	.word	0x000be587
   b46e0:	200352f8 	.word	0x200352f8
   b46e4:	20035450 	.word	0x20035450
   b46e8:	000be31e 	.word	0x000be31e
   b46ec:	000be339 	.word	0x000be339

000b46f0 <_Z17acquireWireBufferv>:
    userInput = false;
    Serial.println("reset done");
  }
}

hal_i2c_config_t acquireWireBuffer() {
   b46f0:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b46f2:	f44f 7500 	mov.w	r5, #512	; 0x200
   b46f6:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b46f8:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b46fa:	6003      	str	r3, [r0, #0]
   b46fc:	6085      	str	r5, [r0, #8]
   b46fe:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4700:	4905      	ldr	r1, [pc, #20]	; (b4718 <_Z17acquireWireBufferv+0x28>)
   b4702:	4628      	mov	r0, r5
   b4704:	f006 fd5a 	bl	bb1bc <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4708:	4903      	ldr	r1, [pc, #12]	; (b4718 <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b470a:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b470c:	4628      	mov	r0, r5
   b470e:	f006 fd55 	bl	bb1bc <_ZnajRKSt9nothrow_t>
    };
   b4712:	60e0      	str	r0, [r4, #12]
    return config;
   b4714:	4620      	mov	r0, r4
   b4716:	bd38      	pop	{r3, r4, r5, pc}
   b4718:	000bebcc 	.word	0x000bebcc

000b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b471c:	b510      	push	{r4, lr}
   b471e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4720:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4722:	b118      	cbz	r0, b472c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4724:	68a1      	ldr	r1, [r4, #8]
   b4726:	1a09      	subs	r1, r1, r0
   b4728:	f7ff fcbb 	bl	b40a2 <_ZdlPvj>
      }
   b472c:	4620      	mov	r0, r4
   b472e:	bd10      	pop	{r4, pc}

000b4730 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4730:	b510      	push	{r4, lr}
   b4732:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4734:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4736:	b118      	cbz	r0, b4740 <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4738:	68a1      	ldr	r1, [r4, #8]
   b473a:	1a09      	subs	r1, r1, r0
   b473c:	f7ff fcb1 	bl	b40a2 <_ZdlPvj>
      }
   b4740:	4620      	mov	r0, r4
   b4742:	bd10      	pop	{r4, pc}

000b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4744:	b510      	push	{r4, lr}
   b4746:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4748:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b474a:	b118      	cbz	r0, b4754 <_ZNSt12_Vector_baseIiSaIiEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b474c:	68a1      	ldr	r1, [r4, #8]
   b474e:	1a09      	subs	r1, r1, r0
   b4750:	f7ff fca7 	bl	b40a2 <_ZdlPvj>
      }
   b4754:	4620      	mov	r0, r4
   b4756:	bd10      	pop	{r4, pc}

000b4758 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
   b4758:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
   b475a:	680d      	ldr	r5, [r1, #0]
	  _M_end_of_storage = __x._M_end_of_storage;
   b475c:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
   b475e:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
   b4762:	6005      	str	r5, [r0, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
   b4764:	b085      	sub	sp, #20
	  _M_finish = __x._M_finish;
   b4766:	684d      	ldr	r5, [r1, #4]
   b4768:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
   b476a:	688d      	ldr	r5, [r1, #8]
   b476c:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
   b476e:	2300      	movs	r3, #0
	  _M_end_of_storage = __x._M_end_of_storage;
   b4770:	6085      	str	r5, [r0, #8]
	  _M_finish = __x._M_finish;
   b4772:	e9c1 3300 	strd	r3, r3, [r1]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4776:	608b      	str	r3, [r1, #8]
      }
   b4778:	a801      	add	r0, sp, #4
	  _M_finish = __x._M_finish;
   b477a:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
   b477e:	f7ff ffe1 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      }
   b4782:	b005      	add	sp, #20
   b4784:	bd30      	pop	{r4, r5, pc}

000b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b4786:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4788:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b478c:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   b478e:	42ae      	cmp	r6, r5
   b4790:	d004      	beq.n	b479c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x16>
      { _M_dispose(); }
   b4792:	4628      	mov	r0, r5
   b4794:	f006 fd4c 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4798:	3518      	adds	r5, #24
   b479a:	e7f8      	b.n	b478e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b479c:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b479e:	b118      	cbz	r0, b47a8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b47a0:	68a1      	ldr	r1, [r4, #8]
   b47a2:	1a09      	subs	r1, r1, r0
   b47a4:	f7ff fc7d 	bl	b40a2 <_ZdlPvj>
      }
   b47a8:	4620      	mov	r0, r4
   b47aa:	bd70      	pop	{r4, r5, r6, pc}

000b47ac <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>:

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b47ac:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      vector(size_type __n, const value_type& __value,
   b47b0:	b570      	push	{r4, r5, r6, lr}
   b47b2:	4604      	mov	r4, r0
   b47b4:	460d      	mov	r5, r1
   b47b6:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b47b8:	d302      	bcc.n	b47c0 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x14>
	  __throw_length_error(
   b47ba:	480c      	ldr	r0, [pc, #48]	; (b47ec <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x40>)
   b47bc:	f006 fd06 	bl	bb1cc <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47c0:	2300      	movs	r3, #0
   b47c2:	e9c0 3300 	strd	r3, r3, [r0]
   b47c6:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b47c8:	4608      	mov	r0, r1
   b47ca:	f7ff fce9 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47ce:	eb00 0385 	add.w	r3, r0, r5, lsl #2
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b47d2:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47d6:	60a3      	str	r3, [r4, #8]
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   b47d8:	b12d      	cbz	r5, b47e6 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   b47da:	6832      	ldr	r2, [r6, #0]
      for (; __first != __last; ++__first)
   b47dc:	4283      	cmp	r3, r0
   b47de:	d002      	beq.n	b47e6 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
	*__first = __tmp;
   b47e0:	f840 2b04 	str.w	r2, [r0], #4
      for (; __first != __last; ++__first)
   b47e4:	e7fa      	b.n	b47dc <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x30>
	this->_M_impl._M_finish =
   b47e6:	6060      	str	r0, [r4, #4]
      { _M_fill_initialize(__n, __value); }
   b47e8:	4620      	mov	r0, r4
   b47ea:	bd70      	pop	{r4, r5, r6, pc}
   b47ec:	000be3bb 	.word	0x000be3bb

000b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   b47f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47f4:	2400      	movs	r4, #0
      vector(initializer_list<value_type> __l,
   b47f6:	ab02      	add	r3, sp, #8
   b47f8:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47fc:	e9c0 4400 	strd	r4, r4, [r0]
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   b4800:	4613      	mov	r3, r2
      vector(initializer_list<value_type> __l,
   b4802:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4804:	6084      	str	r4, [r0, #8]
   b4806:	00d7      	lsls	r7, r2, #3
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b4808:	f342 001c 	sbfx	r0, r2, #0, #29
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b480c:	4a10      	ldr	r2, [pc, #64]	; (b4850 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x60>)
   b480e:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   b4812:	4688      	mov	r8, r1
   b4814:	d202      	bcs.n	b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x2c>
	  __throw_length_error(
   b4816:	480f      	ldr	r0, [pc, #60]	; (b4854 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x64>)
   b4818:	f006 fcd8 	bl	bb1cc <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b481c:	f7ff fccd 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4820:	19c6      	adds	r6, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4822:	4602      	mov	r2, r0
   b4824:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4826:	60ae      	str	r6, [r5, #8]
   b4828:	4623      	mov	r3, r4
   b482a:	429f      	cmp	r7, r3
   b482c:	d00b      	beq.n	b4846 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x56>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b482e:	18d4      	adds	r4, r2, r3
   b4830:	bf1c      	itt	ne
   b4832:	eb08 0103 	addne.w	r1, r8, r3
   b4836:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b483a:	f103 0308 	add.w	r3, r3, #8
   b483e:	bf18      	it	ne
   b4840:	e9c4 0100 	strdne	r0, r1, [r4]
   b4844:	e7f1      	b.n	b482a <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x3a>
      }
   b4846:	4628      	mov	r0, r5
	  this->_M_impl._M_finish =
   b4848:	606e      	str	r6, [r5, #4]
      }
   b484a:	b002      	add	sp, #8
   b484c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4850:	7ffffff8 	.word	0x7ffffff8
   b4854:	000be3bb 	.word	0x000be3bb

000b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>:
      vector(initializer_list<value_type> __l,
   b4858:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b485c:	ab02      	add	r3, sp, #8
   b485e:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4862:	2300      	movs	r3, #0
   b4864:	e9c0 3300 	strd	r3, r3, [r0]
   b4868:	6083      	str	r3, [r0, #8]
   b486a:	4616      	mov	r6, r2
   b486c:	2318      	movs	r3, #24
   b486e:	435e      	muls	r6, r3
   b4870:	4b10      	ldr	r3, [pc, #64]	; (b48b4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x5c>)
      vector(initializer_list<value_type> __l,
   b4872:	4604      	mov	r4, r0
   b4874:	10f0      	asrs	r0, r6, #3
   b4876:	4358      	muls	r0, r3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4878:	4b0f      	ldr	r3, [pc, #60]	; (b48b8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x60>)
   b487a:	429e      	cmp	r6, r3
   b487c:	460f      	mov	r7, r1
   b487e:	eb01 0806 	add.w	r8, r1, r6
   b4882:	d902      	bls.n	b488a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x32>
	  __throw_length_error(
   b4884:	480d      	ldr	r0, [pc, #52]	; (b48bc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x64>)
   b4886:	f006 fca1 	bl	bb1cc <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b488a:	f7ff fc77 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b488e:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4890:	4605      	mov	r5, r0
   b4892:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4894:	60a6      	str	r6, [r4, #8]
   b4896:	45b8      	cmp	r8, r7
   b4898:	d007      	beq.n	b48aa <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x52>
   b489a:	b11d      	cbz	r5, b48a4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x4c>
   b489c:	4639      	mov	r1, r7
   b489e:	4628      	mov	r0, r5
   b48a0:	f7ff fc98 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b48a4:	3718      	adds	r7, #24
   b48a6:	3518      	adds	r5, #24
   b48a8:	e7f5      	b.n	b4896 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x3e>
      }
   b48aa:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
   b48ac:	6065      	str	r5, [r4, #4]
      }
   b48ae:	b002      	add	sp, #8
   b48b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b48b4:	aaaaaaab 	.word	0xaaaaaaab
   b48b8:	7ffffff8 	.word	0x7ffffff8
   b48bc:	000be3bb 	.word	0x000be3bb

000b48c0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b48c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48c2:	e9d1 3700 	ldrd	r3, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48c6:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b48c8:	1aff      	subs	r7, r7, r3
      vector(const vector& __x)
   b48ca:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b48cc:	e9c0 5500 	strd	r5, r5, [r0]
   b48d0:	6085      	str	r5, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48d2:	10f8      	asrs	r0, r7, #3
      vector(const vector& __x)
   b48d4:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48d6:	f7ff fc70 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b48da:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b48de:	4407      	add	r7, r0
   b48e0:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b48e2:	e9d6 7600 	ldrd	r7, r6, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48e6:	4602      	mov	r2, r0
   b48e8:	1bf6      	subs	r6, r6, r7
      : _M_current(__i) { }
   b48ea:	462b      	mov	r3, r5
   b48ec:	42b3      	cmp	r3, r6
   b48ee:	eb02 0503 	add.w	r5, r2, r3
   b48f2:	d006      	beq.n	b4902 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x42>
   b48f4:	b11d      	cbz	r5, b48fe <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x3e>
   b48f6:	18f9      	adds	r1, r7, r3
   b48f8:	c903      	ldmia	r1, {r0, r1}
   b48fa:	e885 0003 	stmia.w	r5, {r0, r1}
   b48fe:	3308      	adds	r3, #8
   b4900:	e7f4      	b.n	b48ec <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b4902:	6065      	str	r5, [r4, #4]
      }
   b4904:	4620      	mov	r0, r4
   b4906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
   b4908:	b508      	push	{r3, lr}
      { return _M_string_length; }
   b490a:	6842      	ldr	r2, [r0, #4]
	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
    { return (__lhs.size() == __rhs.size()
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b490c:	684b      	ldr	r3, [r1, #4]
   b490e:	429a      	cmp	r2, r3
   b4910:	d108      	bne.n	b4924 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1c>
	if (__n == 0)
   b4912:	b14a      	cbz	r2, b4928 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x20>
	return __builtin_memcmp(__s1, __s2, __n);
   b4914:	6809      	ldr	r1, [r1, #0]
   b4916:	6800      	ldr	r0, [r0, #0]
   b4918:	f007 fc2a 	bl	bc170 <memcmp>
   b491c:	fab0 f080 	clz	r0, r0
   b4920:	0940      	lsrs	r0, r0, #5
						    __lhs.size())); }
   b4922:	bd08      	pop	{r3, pc}
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b4924:	2000      	movs	r0, #0
   b4926:	e7fc      	b.n	b4922 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>
   b4928:	2001      	movs	r0, #1
   b492a:	e7fa      	b.n	b4922 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>

000b492c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b492c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  txCharacteristic.setValue("ok");
   b4930:	2200      	movs	r2, #0
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4932:	b0a3      	sub	sp, #140	; 0x8c
   b4934:	4604      	mov	r4, r0
   b4936:	460d      	mov	r5, r1
  txCharacteristic.setValue("ok");
   b4938:	4895      	ldr	r0, [pc, #596]	; (b4b90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x264>)
   b493a:	4996      	ldr	r1, [pc, #600]	; (b4b94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x268>)
   b493c:	f004 fbbc 	bl	b90b8 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
  String inputBuffer = "";
   b4940:	4995      	ldr	r1, [pc, #596]	; (b4b98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26c>)
   b4942:	a803      	add	r0, sp, #12
   b4944:	f005 fda7 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
  String nameBuffer;
   b4948:	4993      	ldr	r1, [pc, #588]	; (b4b98 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26c>)
   b494a:	a807      	add	r0, sp, #28
   b494c:	f005 fda3 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
  for(int i = 0; i < len; i++){
   b4950:	4425      	add	r5, r4
   b4952:	42a5      	cmp	r5, r4
   b4954:	d005      	beq.n	b4962 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x36>
	String & operator += (char c)			{concat(c); return (*this);}
   b4956:	f814 1b01 	ldrb.w	r1, [r4], #1
   b495a:	a803      	add	r0, sp, #12
   b495c:	f005 fe23 	bl	ba5a6 <_ZN6String6concatEc>
   b4960:	e7f7      	b.n	b4952 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26>
  Serial.println(inputBuffer);
   b4962:	f006 fa79 	bl	bae58 <_Z16_fetch_usbserialv>
   b4966:	9903      	ldr	r1, [sp, #12]
   b4968:	f005 fceb 	bl	ba342 <_ZN5Print7printlnEPKc>
  if(inputBuffer.indexOf("wifi:") == 0){
   b496c:	498b      	ldr	r1, [pc, #556]	; (b4b9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x270>)
   b496e:	a80f      	add	r0, sp, #60	; 0x3c
   b4970:	f005 fd91 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
   b4974:	a90f      	add	r1, sp, #60	; 0x3c
   b4976:	a803      	add	r0, sp, #12
   b4978:	f005 fe86 	bl	ba688 <_ZNK6String7indexOfERKS_>
   b497c:	4604      	mov	r4, r0
   b497e:	a80f      	add	r0, sp, #60	; 0x3c
   b4980:	f005 fd3e 	bl	ba400 <_ZN6StringD1Ev>
   b4984:	2c00      	cmp	r4, #0
   b4986:	d15b      	bne.n	b4a40 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x114>
    int commaIndex = inputBuffer.indexOf(",");
   b4988:	4985      	ldr	r1, [pc, #532]	; (b4ba0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x274>)
    SSID = inputBuffer.substring(5, commaIndex);
   b498a:	4d86      	ldr	r5, [pc, #536]	; (b4ba4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>)
    int commaIndex = inputBuffer.indexOf(",");
   b498c:	a80f      	add	r0, sp, #60	; 0x3c
   b498e:	f005 fd82 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
   b4992:	a90f      	add	r1, sp, #60	; 0x3c
   b4994:	a803      	add	r0, sp, #12
   b4996:	f005 fe77 	bl	ba688 <_ZNK6String7indexOfERKS_>
   b499a:	4604      	mov	r4, r0
   b499c:	a80f      	add	r0, sp, #60	; 0x3c
   b499e:	f005 fd2f 	bl	ba400 <_ZN6StringD1Ev>
    SSID = inputBuffer.substring(5, commaIndex);
   b49a2:	4623      	mov	r3, r4
   b49a4:	2205      	movs	r2, #5
   b49a6:	a903      	add	r1, sp, #12
   b49a8:	a80f      	add	r0, sp, #60	; 0x3c
   b49aa:	f005 fe71 	bl	ba690 <_ZNK6String9substringEjj>
   b49ae:	a90f      	add	r1, sp, #60	; 0x3c
   b49b0:	4628      	mov	r0, r5
   b49b2:	f005 fdb0 	bl	ba516 <_ZN6StringaSEOS_>
   b49b6:	a80f      	add	r0, sp, #60	; 0x3c
   b49b8:	f005 fd22 	bl	ba400 <_ZN6StringD1Ev>
    password = inputBuffer.substring(commaIndex + 1);
   b49bc:	1c62      	adds	r2, r4, #1
   b49be:	4c7a      	ldr	r4, [pc, #488]	; (b4ba8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x27c>)
   b49c0:	a903      	add	r1, sp, #12
   b49c2:	a80f      	add	r0, sp, #60	; 0x3c
   b49c4:	f005 fe84 	bl	ba6d0 <_ZNK6String9substringEj>
   b49c8:	a90f      	add	r1, sp, #60	; 0x3c
   b49ca:	4620      	mov	r0, r4
   b49cc:	f005 fda3 	bl	ba516 <_ZN6StringaSEOS_>
   b49d0:	a80f      	add	r0, sp, #60	; 0x3c
   b49d2:	f005 fd15 	bl	ba400 <_ZN6StringD1Ev>
    Serial.printlnf("SSID: %s, password: %s", SSID.c_str(), password.c_str());
   b49d6:	f006 fa3f 	bl	bae58 <_Z16_fetch_usbserialv>
   b49da:	682a      	ldr	r2, [r5, #0]
   b49dc:	6823      	ldr	r3, [r4, #0]
   b49de:	4973      	ldr	r1, [pc, #460]	; (b4bac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x280>)
   b49e0:	f7ff fd14 	bl	b440c <_ZN5Print8printlnfEPKcz>
	const char * c_str() const { return buffer; }
   b49e4:	682f      	ldr	r7, [r5, #0]
   b49e6:	6825      	ldr	r5, [r4, #0]
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b49e8:	b337      	cbz	r7, b4a38 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>
   b49ea:	4638      	mov	r0, r7
   b49ec:	f007 fc40 	bl	bc270 <strlen>
   b49f0:	4606      	mov	r6, r0
   b49f2:	b31d      	cbz	r5, b4a3c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x110>
   b49f4:	4628      	mov	r0, r5
   b49f6:	f007 fc3b 	bl	bc270 <strlen>
   b49fa:	4604      	mov	r4, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b49fc:	2238      	movs	r2, #56	; 0x38
   b49fe:	2100      	movs	r1, #0
   b4a00:	a814      	add	r0, sp, #80	; 0x50
   b4a02:	f007 fbed 	bl	bc1e0 <memset>
        creds.size = sizeof(creds);
   b4a06:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b4a08:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a0c:	4868      	ldr	r0, [pc, #416]	; (b4bb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x284>)
        creds.password_len = passwordLen;
   b4a0e:	9413      	str	r4, [sp, #76]	; 0x4c
        creds.security = WLanSecurityType(security);
   b4a10:	2303      	movs	r3, #3
   b4a12:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a16:	2300      	movs	r3, #0
   b4a18:	6840      	ldr	r0, [r0, #4]
   b4a1a:	aa0f      	add	r2, sp, #60	; 0x3c
   b4a1c:	4619      	mov	r1, r3
        creds.password = password;
   b4a1e:	e9cd 6511 	strd	r6, r5, [sp, #68]	; 0x44
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a22:	f004 f827 	bl	b8a74 <network_set_credentials>
  String nameBuffer;
   b4a26:	a807      	add	r0, sp, #28
   b4a28:	f005 fcea 	bl	ba400 <_ZN6StringD1Ev>
  String inputBuffer = "";
   b4a2c:	a803      	add	r0, sp, #12
   b4a2e:	f005 fce7 	bl	ba400 <_ZN6StringD1Ev>
}
   b4a32:	b023      	add	sp, #140	; 0x8c
   b4a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4a38:	463e      	mov	r6, r7
   b4a3a:	e7da      	b.n	b49f2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc6>
   b4a3c:	462c      	mov	r4, r5
   b4a3e:	e7dd      	b.n	b49fc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd0>
  else if(inputBuffer.indexOf("city:") == 0){
   b4a40:	495c      	ldr	r1, [pc, #368]	; (b4bb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x288>)
   b4a42:	a80f      	add	r0, sp, #60	; 0x3c
   b4a44:	f005 fd27 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
   b4a48:	a90f      	add	r1, sp, #60	; 0x3c
   b4a4a:	a803      	add	r0, sp, #12
   b4a4c:	f005 fe1c 	bl	ba688 <_ZNK6String7indexOfERKS_>
   b4a50:	4604      	mov	r4, r0
   b4a52:	a80f      	add	r0, sp, #60	; 0x3c
   b4a54:	f005 fcd4 	bl	ba400 <_ZN6StringD1Ev>
   b4a58:	2c00      	cmp	r4, #0
   b4a5a:	f040 8083 	bne.w	b4b64 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x238>
    inputBuffer = inputBuffer.substring(5);
   b4a5e:	2205      	movs	r2, #5
   b4a60:	a903      	add	r1, sp, #12
   b4a62:	a80f      	add	r0, sp, #60	; 0x3c
   b4a64:	f005 fe34 	bl	ba6d0 <_ZNK6String9substringEj>
   b4a68:	a90f      	add	r1, sp, #60	; 0x3c
   b4a6a:	a803      	add	r0, sp, #12
   b4a6c:	f005 fd53 	bl	ba516 <_ZN6StringaSEOS_>
   b4a70:	a80f      	add	r0, sp, #60	; 0x3c
   b4a72:	f005 fcc5 	bl	ba400 <_ZN6StringD1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4a76:	4d50      	ldr	r5, [pc, #320]	; (b4bb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28c>)
   b4a78:	4f50      	ldr	r7, [pc, #320]	; (b4bbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x290>)
        cityIndex = i;
   b4a7a:	f8df 8144 	ldr.w	r8, [pc, #324]	; b4bc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x294>
   b4a7e:	e9d5 2300 	ldrd	r2, r3, [r5]
   b4a82:	1a9b      	subs	r3, r3, r2
   b4a84:	10db      	asrs	r3, r3, #3
   b4a86:	437b      	muls	r3, r7
    for(int i = 0; i < cities.size(); i++){
   b4a88:	42a3      	cmp	r3, r4
   b4a8a:	d913      	bls.n	b4ab4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x188>
      { return _M_dataplus._M_p; }
   b4a8c:	2328      	movs	r3, #40	; 0x28
   b4a8e:	fb03 2204 	mla	r2, r3, r4, r2
      if(inputBuffer == String(cities[i].name.c_str())){
   b4a92:	a80f      	add	r0, sp, #60	; 0x3c
   b4a94:	68d1      	ldr	r1, [r2, #12]
   b4a96:	f005 fcfe 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4a9a:	a90f      	add	r1, sp, #60	; 0x3c
   b4a9c:	a803      	add	r0, sp, #12
   b4a9e:	f005 fdc5 	bl	ba62c <_ZNK6String6equalsERKS_>
   b4aa2:	4606      	mov	r6, r0
   b4aa4:	a80f      	add	r0, sp, #60	; 0x3c
   b4aa6:	f005 fcab 	bl	ba400 <_ZN6StringD1Ev>
   b4aaa:	b10e      	cbz	r6, b4ab0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x184>
        cityIndex = i;
   b4aac:	f8c8 4000 	str.w	r4, [r8]
    for(int i = 0; i < cities.size(); i++){
   b4ab0:	3401      	adds	r4, #1
   b4ab2:	e7e4      	b.n	b4a7e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x152>
    if(cityIndex == -1){
   b4ab4:	4e42      	ldr	r6, [pc, #264]	; (b4bc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x294>)
   b4ab6:	6833      	ldr	r3, [r6, #0]
   b4ab8:	1c59      	adds	r1, r3, #1
   b4aba:	d105      	bne.n	b4ac8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x19c>
      txCharacteristic.setValue("incorrect city name");
   b4abc:	4941      	ldr	r1, [pc, #260]	; (b4bc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x298>)
   b4abe:	2200      	movs	r2, #0
        txCharacteristic.setValue("incorrect railway color");
   b4ac0:	4833      	ldr	r0, [pc, #204]	; (b4b90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x264>)
   b4ac2:	f004 faf9 	bl	b90b8 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
        return;
   b4ac6:	e7ae      	b.n	b4a26 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
	return *(this->_M_impl._M_start + __n);
   b4ac8:	2428      	movs	r4, #40	; 0x28
   b4aca:	4363      	muls	r3, r4
   b4acc:	18d1      	adds	r1, r2, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4ace:	58d3      	ldr	r3, [r2, r3]
   b4ad0:	6849      	ldr	r1, [r1, #4]
    addressArr = std::vector<int>(cities[cityIndex].slaveCountExpected, 0);
   b4ad2:	f8df 810c 	ldr.w	r8, [pc, #268]	; b4be0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b4>
   b4ad6:	1ac9      	subs	r1, r1, r3
   b4ad8:	4b3b      	ldr	r3, [pc, #236]	; (b4bc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x29c>)
   b4ada:	1089      	asrs	r1, r1, #2
   b4adc:	4359      	muls	r1, r3
    sequenceArr = std::vector<int>(cities[cityIndex].railways.size() * 2, 0);
   b4ade:	aa0b      	add	r2, sp, #44	; 0x2c
   b4ae0:	ab02      	add	r3, sp, #8
   b4ae2:	2700      	movs	r7, #0
   b4ae4:	0049      	lsls	r1, r1, #1
   b4ae6:	a80f      	add	r0, sp, #60	; 0x3c
   b4ae8:	970b      	str	r7, [sp, #44]	; 0x2c
   b4aea:	f7ff fe5f 	bl	b47ac <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4aee:	a90f      	add	r1, sp, #60	; 0x3c
   b4af0:	4836      	ldr	r0, [pc, #216]	; (b4bcc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a0>)
   b4af2:	f7ff fe31 	bl	b4758 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>
      }
   b4af6:	a80f      	add	r0, sp, #60	; 0x3c
   b4af8:	f7ff fe24 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
	return *(this->_M_impl._M_start + __n);
   b4afc:	6832      	ldr	r2, [r6, #0]
    addressArr = std::vector<int>(cities[cityIndex].slaveCountExpected, 0);
   b4afe:	682b      	ldr	r3, [r5, #0]
   b4b00:	fb04 3302 	mla	r3, r4, r2, r3
   b4b04:	a80f      	add	r0, sp, #60	; 0x3c
   b4b06:	aa0b      	add	r2, sp, #44	; 0x2c
   b4b08:	6a59      	ldr	r1, [r3, #36]	; 0x24
   b4b0a:	970b      	str	r7, [sp, #44]	; 0x2c
   b4b0c:	ab02      	add	r3, sp, #8
   b4b0e:	f7ff fe4d 	bl	b47ac <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4b12:	a90f      	add	r1, sp, #60	; 0x3c
   b4b14:	4640      	mov	r0, r8
   b4b16:	f7ff fe1f 	bl	b4758 <_ZNSt6vectorIiSaIiEEaSEOS1_.isra.0>
      }
   b4b1a:	a80f      	add	r0, sp, #60	; 0x3c
   b4b1c:	f7ff fe12 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
    randomizeAddress();
   b4b20:	f7ff fc82 	bl	b4428 <_Z16randomizeAddressv>
    txCharacteristic.setValue("slave addresses sorted");
   b4b24:	463a      	mov	r2, r7
   b4b26:	492a      	ldr	r1, [pc, #168]	; (b4bd0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a4>)
   b4b28:	4819      	ldr	r0, [pc, #100]	; (b4b90 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x264>)
   b4b2a:	f004 fac5 	bl	b90b8 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    Wire.beginTransmission(addressArr[0]);
   b4b2e:	f006 fae1 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4b32:	f8d8 3000 	ldr.w	r3, [r8]
   b4b36:	6819      	ldr	r1, [r3, #0]
   b4b38:	f005 fa76 	bl	ba028 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('3');
   b4b3c:	f006 fada 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4b40:	2133      	movs	r1, #51	; 0x33
   b4b42:	f7ff fb6d 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b4b46:	f006 fad5 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4b4a:	f005 fa74 	bl	ba036 <_ZN7TwoWire15endTransmissionEv>
    Serial.printlnf("city: %s", cities[cityIndex].name.c_str());
   b4b4e:	f006 f983 	bl	bae58 <_Z16_fetch_usbserialv>
	return *(this->_M_impl._M_start + __n);
   b4b52:	6832      	ldr	r2, [r6, #0]
   b4b54:	682b      	ldr	r3, [r5, #0]
   b4b56:	491f      	ldr	r1, [pc, #124]	; (b4bd4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a8>)
   b4b58:	fb04 3402 	mla	r4, r4, r2, r3
   b4b5c:	68e2      	ldr	r2, [r4, #12]
   b4b5e:	f7ff fc55 	bl	b440c <_ZN5Print8printlnfEPKcz>
   b4b62:	e760      	b.n	b4a26 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
  else if(inputBuffer.indexOf("color:") == 0){
   b4b64:	491c      	ldr	r1, [pc, #112]	; (b4bd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2ac>)
   b4b66:	a80f      	add	r0, sp, #60	; 0x3c
   b4b68:	f005 fc95 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
   b4b6c:	a90f      	add	r1, sp, #60	; 0x3c
   b4b6e:	a803      	add	r0, sp, #12
   b4b70:	f005 fd8a 	bl	ba688 <_ZNK6String7indexOfERKS_>
   b4b74:	4604      	mov	r4, r0
   b4b76:	a80f      	add	r0, sp, #60	; 0x3c
   b4b78:	f005 fc42 	bl	ba400 <_ZN6StringD1Ev>
   b4b7c:	2c00      	cmp	r4, #0
   b4b7e:	f040 81d5 	bne.w	b4f2c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x600>
    if(cityIndex == -1){
   b4b82:	4f0f      	ldr	r7, [pc, #60]	; (b4bc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x294>)
   b4b84:	683b      	ldr	r3, [r7, #0]
   b4b86:	3301      	adds	r3, #1
   b4b88:	d12c      	bne.n	b4be4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b8>
      txCharacteristic.setValue("city not set");
   b4b8a:	4914      	ldr	r1, [pc, #80]	; (b4bdc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b0>)
   b4b8c:	4622      	mov	r2, r4
   b4b8e:	e797      	b.n	b4ac0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x194>
   b4b90:	2003e6ac 	.word	0x2003e6ac
   b4b94:	000be3ec 	.word	0x000be3ec
   b4b98:	000be7c6 	.word	0x000be7c6
   b4b9c:	000be3ef 	.word	0x000be3ef
   b4ba0:	000be3f5 	.word	0x000be3f5
   b4ba4:	200352a0 	.word	0x200352a0
   b4ba8:	2003e474 	.word	0x2003e474
   b4bac:	000be3f7 	.word	0x000be3f7
   b4bb0:	2003e718 	.word	0x2003e718
   b4bb4:	000be40e 	.word	0x000be40e
   b4bb8:	20035450 	.word	0x20035450
   b4bbc:	cccccccd 	.word	0xcccccccd
   b4bc0:	200350a8 	.word	0x200350a8
   b4bc4:	000be414 	.word	0x000be414
   b4bc8:	684bda13 	.word	0x684bda13
   b4bcc:	2003e69c 	.word	0x2003e69c
   b4bd0:	000be428 	.word	0x000be428
   b4bd4:	000be43f 	.word	0x000be43f
   b4bd8:	000be448 	.word	0x000be448
   b4bdc:	000be44f 	.word	0x000be44f
   b4be0:	200352f8 	.word	0x200352f8
    inputBuffer = inputBuffer.substring(6);
   b4be4:	2206      	movs	r2, #6
   b4be6:	a903      	add	r1, sp, #12
   b4be8:	a80f      	add	r0, sp, #60	; 0x3c
   b4bea:	f005 fd71 	bl	ba6d0 <_ZNK6String9substringEj>
   b4bee:	a90f      	add	r1, sp, #60	; 0x3c
   b4bf0:	a803      	add	r0, sp, #12
   b4bf2:	f005 fc90 	bl	ba516 <_ZN6StringaSEOS_>
   b4bf6:	a80f      	add	r0, sp, #60	; 0x3c
   b4bf8:	f005 fc02 	bl	ba400 <_ZN6StringD1Ev>
   b4bfc:	f8df 8320 	ldr.w	r8, [pc, #800]	; b4f20 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f4>
    if(bleCount < cities[cityIndex].railways.size()){
   b4c00:	4eb6      	ldr	r6, [pc, #728]	; (b4edc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b0>)
    nameBuffer = inputBuffer;
   b4c02:	a903      	add	r1, sp, #12
   b4c04:	a807      	add	r0, sp, #28
   b4c06:	f005 fc77 	bl	ba4f8 <_ZN6StringaSERKS_>
    if(bleCount < cities[cityIndex].railways.size()){
   b4c0a:	6839      	ldr	r1, [r7, #0]
   b4c0c:	f8d8 0000 	ldr.w	r0, [r8]
   b4c10:	2228      	movs	r2, #40	; 0x28
   b4c12:	434a      	muls	r2, r1
   b4c14:	1883      	adds	r3, r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c16:	5882      	ldr	r2, [r0, r2]
   b4c18:	685b      	ldr	r3, [r3, #4]
   b4c1a:	1a9b      	subs	r3, r3, r2
   b4c1c:	4ab0      	ldr	r2, [pc, #704]	; (b4ee0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b4>)
   b4c1e:	109b      	asrs	r3, r3, #2
   b4c20:	4353      	muls	r3, r2
   b4c22:	6832      	ldr	r2, [r6, #0]
   b4c24:	429a      	cmp	r2, r3
   b4c26:	f080 80c7 	bcs.w	b4db8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48c>
      if((cityIndex == 0 || cityIndex == 1) && (inputBuffer == "green1" || inputBuffer == "green2")){
   b4c2a:	2901      	cmp	r1, #1
   b4c2c:	d808      	bhi.n	b4c40 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x314>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4c2e:	49ad      	ldr	r1, [pc, #692]	; (b4ee4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b8>)
   b4c30:	a803      	add	r0, sp, #12
   b4c32:	f005 fd08 	bl	ba646 <_ZNK6String6equalsEPKc>
   b4c36:	b330      	cbz	r0, b4c86 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x35a>
        nameBuffer = "green";
   b4c38:	49ab      	ldr	r1, [pc, #684]	; (b4ee8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5bc>)
   b4c3a:	a807      	add	r0, sp, #28
   b4c3c:	f005 fc73 	bl	ba526 <_ZN6StringaSEPKc>
          railwayIndex = i;
   b4c40:	f8df b2e0 	ldr.w	fp, [pc, #736]	; b4f24 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f8>
   b4c44:	f04f 0a00 	mov.w	sl, #0
	return *(this->_M_impl._M_start + __n);
   b4c48:	f04f 0928 	mov.w	r9, #40	; 0x28
      for(int i = 0; i < cities[cityIndex].railways.size(); i++){
   b4c4c:	683d      	ldr	r5, [r7, #0]
   b4c4e:	f8d8 0000 	ldr.w	r0, [r8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c52:	4ba3      	ldr	r3, [pc, #652]	; (b4ee0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b4>)
	return *(this->_M_impl._M_start + __n);
   b4c54:	fb09 f105 	mul.w	r1, r9, r5
   b4c58:	1842      	adds	r2, r0, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c5a:	5841      	ldr	r1, [r0, r1]
   b4c5c:	6852      	ldr	r2, [r2, #4]
   b4c5e:	1a52      	subs	r2, r2, r1
   b4c60:	1092      	asrs	r2, r2, #2
   b4c62:	435a      	muls	r2, r3
   b4c64:	4552      	cmp	r2, sl
   b4c66:	d939      	bls.n	b4cdc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3b0>
        if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4c68:	b9a5      	cbnz	r5, b4c94 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x368>
   b4c6a:	4ba0      	ldr	r3, [pc, #640]	; (b4eec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c0>)
   b4c6c:	a80b      	add	r0, sp, #44	; 0x2c
   b4c6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4c70:	f005 fc11 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
   b4c74:	a90b      	add	r1, sp, #44	; 0x2c
   b4c76:	a807      	add	r0, sp, #28
   b4c78:	f005 fcd8 	bl	ba62c <_ZNK6String6equalsERKS_>
   b4c7c:	b360      	cbz	r0, b4cd8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3ac>
   b4c7e:	a80b      	add	r0, sp, #44	; 0x2c
   b4c80:	f005 fbbe 	bl	ba400 <_ZN6StringD1Ev>
   b4c84:	e022      	b.n	b4ccc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4c86:	499a      	ldr	r1, [pc, #616]	; (b4ef0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c4>)
   b4c88:	a803      	add	r0, sp, #12
   b4c8a:	f005 fcdc 	bl	ba646 <_ZNK6String6equalsEPKc>
      if((cityIndex == 0 || cityIndex == 1) && (inputBuffer == "green1" || inputBuffer == "green2")){
   b4c8e:	2800      	cmp	r0, #0
   b4c90:	d1d2      	bne.n	b4c38 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x30c>
   b4c92:	e7d5      	b.n	b4c40 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x314>
        if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4c94:	2200      	movs	r2, #0
	return *(this->_M_impl._M_start + __n);
   b4c96:	6839      	ldr	r1, [r7, #0]
   b4c98:	f8d8 0000 	ldr.w	r0, [r8]
   b4c9c:	9201      	str	r2, [sp, #4]
   b4c9e:	fb09 f101 	mul.w	r1, r9, r1
   b4ca2:	5841      	ldr	r1, [r0, r1]
   b4ca4:	206c      	movs	r0, #108	; 0x6c
   b4ca6:	fb00 110a 	mla	r1, r0, sl, r1
   b4caa:	a80f      	add	r0, sp, #60	; 0x3c
   b4cac:	6b09      	ldr	r1, [r1, #48]	; 0x30
   b4cae:	f005 fbf2 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4cb2:	a907      	add	r1, sp, #28
   b4cb4:	a80f      	add	r0, sp, #60	; 0x3c
   b4cb6:	f005 fcb9 	bl	ba62c <_ZNK6String6equalsERKS_>
   b4cba:	1e05      	subs	r5, r0, #0
   b4cbc:	a80f      	add	r0, sp, #60	; 0x3c
   b4cbe:	bf18      	it	ne
   b4cc0:	2501      	movne	r5, #1
   b4cc2:	f005 fb9d 	bl	ba400 <_ZN6StringD1Ev>
   b4cc6:	9a01      	ldr	r2, [sp, #4]
   b4cc8:	2a00      	cmp	r2, #0
   b4cca:	d1d8      	bne.n	b4c7e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x352>
   b4ccc:	b10d      	cbz	r5, b4cd2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a6>
          railwayIndex = i;
   b4cce:	f8cb a000 	str.w	sl, [fp]
      for(int i = 0; i < cities[cityIndex].railways.size(); i++){
   b4cd2:	f10a 0a01 	add.w	sl, sl, #1
   b4cd6:	e7b9      	b.n	b4c4c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x320>
        if((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer){
   b4cd8:	2201      	movs	r2, #1
   b4cda:	e7dc      	b.n	b4c96 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x36a>
      if(cityIndex == 1 && inputBuffer == "green1"){
   b4cdc:	2d01      	cmp	r5, #1
   b4cde:	f8df b244 	ldr.w	fp, [pc, #580]	; b4f24 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f8>
   b4ce2:	d109      	bne.n	b4cf8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3cc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4ce4:	497f      	ldr	r1, [pc, #508]	; (b4ee4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b8>)
   b4ce6:	a803      	add	r0, sp, #12
   b4ce8:	f005 fcad 	bl	ba646 <_ZNK6String6equalsEPKc>
   b4cec:	b120      	cbz	r0, b4cf8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3cc>
        railwayIndex--;
   b4cee:	f8db 3000 	ldr.w	r3, [fp]
   b4cf2:	3b01      	subs	r3, #1
   b4cf4:	f8cb 3000 	str.w	r3, [fp]
      Serial.printlnf("railway index: %i", railwayIndex);
   b4cf8:	f006 f8ae 	bl	bae58 <_Z16_fetch_usbserialv>
   b4cfc:	f8db 2000 	ldr.w	r2, [fp]
   b4d00:	497c      	ldr	r1, [pc, #496]	; (b4ef4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c8>)
   b4d02:	f7ff fb83 	bl	b440c <_ZN5Print8printlnfEPKcz>
      if(railwayIndex == -1){
   b4d06:	f8db 3000 	ldr.w	r3, [fp]
   b4d0a:	3301      	adds	r3, #1
   b4d0c:	d102      	bne.n	b4d14 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3e8>
        txCharacteristic.setValue("incorrect railway color");
   b4d0e:	497a      	ldr	r1, [pc, #488]	; (b4ef8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5cc>)
   b4d10:	2200      	movs	r2, #0
   b4d12:	e6d5      	b.n	b4ac0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x194>
   b4d14:	f8df a210 	ldr.w	sl, [pc, #528]	; b4f28 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5fc>
      for(int i = 0; i < 2; i++){
   b4d18:	f04f 0900 	mov.w	r9, #0
        if(cities[cityIndex].railways[railwayIndex].outputs[i].size() == 0 || (cityIndex == 0 && cities[cityIndex].railways[railwayIndex].name == purpleLineCTA.name)){
   b4d1c:	6839      	ldr	r1, [r7, #0]
   b4d1e:	f8d8 2000 	ldr.w	r2, [r8]
   b4d22:	f8db 3000 	ldr.w	r3, [fp]
   b4d26:	2028      	movs	r0, #40	; 0x28
   b4d28:	4348      	muls	r0, r1
   b4d2a:	5810      	ldr	r0, [r2, r0]
   b4d2c:	226c      	movs	r2, #108	; 0x6c
   b4d2e:	fb02 0003 	mla	r0, r2, r3, r0
   b4d32:	220c      	movs	r2, #12
   b4d34:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
   b4d38:	fb02 f209 	mul.w	r2, r2, r9
   b4d3c:	eb0c 0502 	add.w	r5, ip, r2
   b4d40:	f85c 2002 	ldr.w	r2, [ip, r2]
   b4d44:	686d      	ldr	r5, [r5, #4]
   b4d46:	4295      	cmp	r5, r2
   b4d48:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4d4c:	d007      	beq.n	b4d5e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x432>
   b4d4e:	2900      	cmp	r1, #0
   b4d50:	d16a      	bne.n	b4e28 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4fc>
   b4d52:	496a      	ldr	r1, [pc, #424]	; (b4efc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d0>)
   b4d54:	3030      	adds	r0, #48	; 0x30
   b4d56:	f7ff fdd7 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b4d5a:	2800      	cmp	r0, #0
   b4d5c:	d064      	beq.n	b4e28 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4fc>
          sequenceArr[2 * railwayIndex + i] = 0;
   b4d5e:	f8da 2000 	ldr.w	r2, [sl]
   b4d62:	444d      	add	r5, r9
   b4d64:	2100      	movs	r1, #0
   b4d66:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
      for(int i = 0; i < 2; i++){
   b4d6a:	f1b9 0f00 	cmp.w	r9, #0
   b4d6e:	d058      	beq.n	b4e22 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4f6>
   b4d70:	4d63      	ldr	r5, [pc, #396]	; (b4f00 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d4>)
      Wire.beginTransmission(addressArr[bleCount]);
   b4d72:	f006 f9bf 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4d76:	6832      	ldr	r2, [r6, #0]
   b4d78:	682b      	ldr	r3, [r5, #0]
   b4d7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b4d7e:	f005 f953 	bl	ba028 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b4d82:	f006 f9b7 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4d86:	2134      	movs	r1, #52	; 0x34
   b4d88:	f7ff fa4a 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4d8c:	f006 f9b2 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4d90:	f005 f951 	bl	ba036 <_ZN7TwoWire15endTransmissionEv>
      Wire.beginTransmission(addressArr[bleCount + 1]);
   b4d94:	f006 f9ae 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4d98:	6833      	ldr	r3, [r6, #0]
   b4d9a:	682a      	ldr	r2, [r5, #0]
   b4d9c:	3301      	adds	r3, #1
   b4d9e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b4da2:	f005 f941 	bl	ba028 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('3');
   b4da6:	f006 f9a5 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4daa:	2133      	movs	r1, #51	; 0x33
   b4dac:	f7ff fa38 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4db0:	f006 f9a0 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4db4:	f005 f93f 	bl	ba036 <_ZN7TwoWire15endTransmissionEv>
   b4db8:	683a      	ldr	r2, [r7, #0]
   b4dba:	f8d8 1000 	ldr.w	r1, [r8]
   b4dbe:	2328      	movs	r3, #40	; 0x28
   b4dc0:	435a      	muls	r2, r3
   b4dc2:	188b      	adds	r3, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4dc4:	588a      	ldr	r2, [r1, r2]
   b4dc6:	685b      	ldr	r3, [r3, #4]
   b4dc8:	1a9b      	subs	r3, r3, r2
   b4dca:	4a45      	ldr	r2, [pc, #276]	; (b4ee0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b4>)
   b4dcc:	109b      	asrs	r3, r3, #2
   b4dce:	4353      	muls	r3, r2
    if(bleCount == cities[cityIndex].railways.size() - 1){
   b4dd0:	6832      	ldr	r2, [r6, #0]
   b4dd2:	3b01      	subs	r3, #1
   b4dd4:	4293      	cmp	r3, r2
   b4dd6:	d17c      	bne.n	b4ed2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5a6>
      Serial.println("BLE finished");
   b4dd8:	f006 f83e 	bl	bae58 <_Z16_fetch_usbserialv>
   b4ddc:	4949      	ldr	r1, [pc, #292]	; (b4f04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d8>)
   b4dde:	4d48      	ldr	r5, [pc, #288]	; (b4f00 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d4>)
        Serial.printlnf("turning off: %i", i);
   b4de0:	4f49      	ldr	r7, [pc, #292]	; (b4f08 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5dc>)
      Serial.println("BLE finished");
   b4de2:	f005 faae 	bl	ba342 <_ZN5Print7printlnEPKc>
   b4de6:	e9d5 2300 	ldrd	r2, r3, [r5]
   b4dea:	1a9b      	subs	r3, r3, r2
      for(int i = 0; i < addressArr.size(); i++){
   b4dec:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b4df0:	d25f      	bcs.n	b4eb2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x586>
        Serial.printlnf("turning off: %i", i);
   b4df2:	f006 f831 	bl	bae58 <_Z16_fetch_usbserialv>
   b4df6:	4622      	mov	r2, r4
   b4df8:	4639      	mov	r1, r7
   b4dfa:	f7ff fb07 	bl	b440c <_ZN5Print8printlnfEPKcz>
        Wire.beginTransmission(addressArr[i]);
   b4dfe:	f006 f979 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4e02:	682b      	ldr	r3, [r5, #0]
   b4e04:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b4e08:	f005 f90e 	bl	ba028 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('4');
   b4e0c:	f006 f972 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4e10:	2134      	movs	r1, #52	; 0x34
   b4e12:	f7ff fa05 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b4e16:	f006 f96d 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4e1a:	f005 f90c 	bl	ba036 <_ZN7TwoWire15endTransmissionEv>
      for(int i = 0; i < addressArr.size(); i++){
   b4e1e:	3401      	adds	r4, #1
   b4e20:	e7e1      	b.n	b4de6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4ba>
   b4e22:	f04f 0901 	mov.w	r9, #1
   b4e26:	e779      	b.n	b4d1c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3f0>
          sequenceArr[2 * railwayIndex + i] = addressArr[bleCount];
   b4e28:	4b35      	ldr	r3, [pc, #212]	; (b4f00 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5d4>)
	return *(this->_M_impl._M_start + __n);
   b4e2a:	6831      	ldr	r1, [r6, #0]
   b4e2c:	681a      	ldr	r2, [r3, #0]
   b4e2e:	444d      	add	r5, r9
   b4e30:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   b4e34:	f8da 2000 	ldr.w	r2, [sl]
   b4e38:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
          if(cityIndex == 0){
   b4e3c:	683a      	ldr	r2, [r7, #0]
   b4e3e:	2a00      	cmp	r2, #0
   b4e40:	d193      	bne.n	b4d6a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x43e>
            if(inputBuffer == String(brownLineCTA.name.c_str())){
   b4e42:	4b32      	ldr	r3, [pc, #200]	; (b4f0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e0>)
   b4e44:	a80f      	add	r0, sp, #60	; 0x3c
   b4e46:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4e48:	f005 fb25 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4e4c:	a90f      	add	r1, sp, #60	; 0x3c
   b4e4e:	a803      	add	r0, sp, #12
   b4e50:	f005 fbec 	bl	ba62c <_ZNK6String6equalsERKS_>
   b4e54:	4605      	mov	r5, r0
   b4e56:	a80f      	add	r0, sp, #60	; 0x3c
   b4e58:	f005 fad2 	bl	ba400 <_ZN6StringD1Ev>
   b4e5c:	b155      	cbz	r5, b4e74 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x548>
            brownLineCTAAdr = sequenceArr[2 * railwayIndex + i];
   b4e5e:	f8db 2000 	ldr.w	r2, [fp]
   b4e62:	f8da 1000 	ldr.w	r1, [sl]
   b4e66:	eb09 0242 	add.w	r2, r9, r2, lsl #1
   b4e6a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   b4e6e:	4a28      	ldr	r2, [pc, #160]	; (b4f10 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e4>)
              greenLineCTAAdr[0] = sequenceArr[2 * railwayIndex];
   b4e70:	6011      	str	r1, [r2, #0]
   b4e72:	e77a      	b.n	b4d6a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x43e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4e74:	491b      	ldr	r1, [pc, #108]	; (b4ee4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5b8>)
   b4e76:	a803      	add	r0, sp, #12
   b4e78:	f005 fbe5 	bl	ba646 <_ZNK6String6equalsEPKc>
            }else if(inputBuffer == "green1"){
   b4e7c:	b138      	cbz	r0, b4e8e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x562>
              greenLineCTAAdr[0] = sequenceArr[2 * railwayIndex];
   b4e7e:	f8da 2000 	ldr.w	r2, [sl]
   b4e82:	f8db 1000 	ldr.w	r1, [fp]
   b4e86:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
   b4e8a:	4a22      	ldr	r2, [pc, #136]	; (b4f14 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e8>)
   b4e8c:	e7f0      	b.n	b4e70 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x544>
   b4e8e:	4918      	ldr	r1, [pc, #96]	; (b4ef0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c4>)
   b4e90:	a803      	add	r0, sp, #12
   b4e92:	f005 fbd8 	bl	ba646 <_ZNK6String6equalsEPKc>
            }else if(inputBuffer == "green2"){
   b4e96:	2800      	cmp	r0, #0
   b4e98:	f43f af67 	beq.w	b4d6a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x43e>
              greenLineCTAAdr[1] = sequenceArr[2 * railwayIndex + 1];
   b4e9c:	f8db 2000 	ldr.w	r2, [fp]
   b4ea0:	f8da 1000 	ldr.w	r1, [sl]
   b4ea4:	0052      	lsls	r2, r2, #1
   b4ea6:	3201      	adds	r2, #1
   b4ea8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   b4eac:	4a19      	ldr	r2, [pc, #100]	; (b4f14 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e8>)
   b4eae:	6051      	str	r1, [r2, #4]
   b4eb0:	e75b      	b.n	b4d6a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x43e>
      userInput = true;
   b4eb2:	4b19      	ldr	r3, [pc, #100]	; (b4f18 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5ec>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4eb4:	4c19      	ldr	r4, [pc, #100]	; (b4f1c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5f0>)
   b4eb6:	2201      	movs	r2, #1
   b4eb8:	701a      	strb	r2, [r3, #0]
        network_on(*this, 0, 0, NULL);
   b4eba:	2300      	movs	r3, #0
   b4ebc:	461a      	mov	r2, r3
   b4ebe:	4619      	mov	r1, r3
   b4ec0:	6860      	ldr	r0, [r4, #4]
   b4ec2:	f003 fdaf 	bl	b8a24 <network_on>
        network_connect(*this, flags, 0, NULL);
   b4ec6:	2300      	movs	r3, #0
   b4ec8:	6860      	ldr	r0, [r4, #4]
   b4eca:	461a      	mov	r2, r3
   b4ecc:	4619      	mov	r1, r3
   b4ece:	f003 fd89 	bl	b89e4 <network_connect>
    bleCount++;
   b4ed2:	6833      	ldr	r3, [r6, #0]
   b4ed4:	3301      	adds	r3, #1
   b4ed6:	6033      	str	r3, [r6, #0]
   b4ed8:	e5a5      	b.n	b4a26 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
   b4eda:	bf00      	nop
   b4edc:	20035304 	.word	0x20035304
   b4ee0:	684bda13 	.word	0x684bda13
   b4ee4:	000be45c 	.word	0x000be45c
   b4ee8:	000be463 	.word	0x000be463
   b4eec:	2003e4f0 	.word	0x2003e4f0
   b4ef0:	000be469 	.word	0x000be469
   b4ef4:	000be470 	.word	0x000be470
   b4ef8:	000be482 	.word	0x000be482
   b4efc:	2003e520 	.word	0x2003e520
   b4f00:	200352f8 	.word	0x200352f8
   b4f04:	000be49a 	.word	0x000be49a
   b4f08:	000be4a7 	.word	0x000be4a7
   b4f0c:	200353e0 	.word	0x200353e0
   b4f10:	2003544c 	.word	0x2003544c
   b4f14:	200355b0 	.word	0x200355b0
   b4f18:	2003e6b4 	.word	0x2003e6b4
   b4f1c:	2003e718 	.word	0x2003e718
   b4f20:	20035450 	.word	0x20035450
   b4f24:	200350bc 	.word	0x200350bc
   b4f28:	2003e69c 	.word	0x2003e69c
  }else if(inputBuffer.indexOf("reset") == 0){
   b4f2c:	491f      	ldr	r1, [pc, #124]	; (b4fac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x680>)
   b4f2e:	a80f      	add	r0, sp, #60	; 0x3c
   b4f30:	f005 fab1 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
   b4f34:	a90f      	add	r1, sp, #60	; 0x3c
   b4f36:	a803      	add	r0, sp, #12
   b4f38:	f005 fba6 	bl	ba688 <_ZNK6String7indexOfERKS_>
   b4f3c:	4604      	mov	r4, r0
   b4f3e:	a80f      	add	r0, sp, #60	; 0x3c
   b4f40:	f005 fa5e 	bl	ba400 <_ZN6StringD1Ev>
   b4f44:	2c00      	cmp	r4, #0
   b4f46:	f47f ad6e 	bne.w	b4a26 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f4a:	4d19      	ldr	r5, [pc, #100]	; (b4fb0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x684>)
      Serial.printlnf("turning off: %i", i);
   b4f4c:	4e19      	ldr	r6, [pc, #100]	; (b4fb4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x688>)
   b4f4e:	e9d5 2300 	ldrd	r2, r3, [r5]
   b4f52:	1a9b      	subs	r3, r3, r2
    for(int i = 0; i < addressArr.size(); i++){
   b4f54:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b4f58:	d217      	bcs.n	b4f8a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x65e>
      Serial.printlnf("turning off: %i", i);
   b4f5a:	f005 ff7d 	bl	bae58 <_Z16_fetch_usbserialv>
   b4f5e:	4622      	mov	r2, r4
   b4f60:	4631      	mov	r1, r6
   b4f62:	f7ff fa53 	bl	b440c <_ZN5Print8printlnfEPKcz>
      Wire.beginTransmission(addressArr[i]);
   b4f66:	f006 f8c5 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4f6a:	682b      	ldr	r3, [r5, #0]
   b4f6c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   b4f70:	f005 f85a 	bl	ba028 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b4f74:	f006 f8be 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4f78:	2134      	movs	r1, #52	; 0x34
   b4f7a:	f7ff f951 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4f7e:	f006 f8b9 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b4f82:	f005 f858 	bl	ba036 <_ZN7TwoWire15endTransmissionEv>
    for(int i = 0; i < addressArr.size(); i++){
   b4f86:	3401      	adds	r4, #1
   b4f88:	e7e1      	b.n	b4f4e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x622>
    bleCount = 0;
   b4f8a:	4a0b      	ldr	r2, [pc, #44]	; (b4fb8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x68c>)
    cityIndex = -1;
   b4f8c:	490b      	ldr	r1, [pc, #44]	; (b4fbc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x690>)
    bleCount = 0;
   b4f8e:	2300      	movs	r3, #0
   b4f90:	6013      	str	r3, [r2, #0]
    cityIndex = -1;
   b4f92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b4f96:	600a      	str	r2, [r1, #0]
    railwayIndex = -1;
   b4f98:	4909      	ldr	r1, [pc, #36]	; (b4fc0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x694>)
   b4f9a:	600a      	str	r2, [r1, #0]
    userInput = false;
   b4f9c:	4a09      	ldr	r2, [pc, #36]	; (b4fc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x698>)
   b4f9e:	7013      	strb	r3, [r2, #0]
    Serial.println("reset done");
   b4fa0:	f005 ff5a 	bl	bae58 <_Z16_fetch_usbserialv>
   b4fa4:	4908      	ldr	r1, [pc, #32]	; (b4fc8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x69c>)
   b4fa6:	f005 f9cc 	bl	ba342 <_ZN5Print7printlnEPKc>
   b4faa:	e53c      	b.n	b4a26 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
   b4fac:	000be4b7 	.word	0x000be4b7
   b4fb0:	200352f8 	.word	0x200352f8
   b4fb4:	000be4a7 	.word	0x000be4a7
   b4fb8:	20035304 	.word	0x20035304
   b4fbc:	200350a8 	.word	0x200350a8
   b4fc0:	200350bc 	.word	0x200350bc
   b4fc4:	2003e6b4 	.word	0x2003e6b4
   b4fc8:	000be4bd 	.word	0x000be4bd

000b4fcc <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4fcc:	2900      	cmp	r1, #0
      _M_create_storage(size_t __n)
   b4fce:	b538      	push	{r3, r4, r5, lr}
   b4fd0:	4604      	mov	r4, r0
      _M_allocate(size_t __n)
   b4fd2:	ea4f 0581 	mov.w	r5, r1, lsl #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4fd6:	d00c      	beq.n	b4ff2 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x26>
	if (__n > this->_M_max_size())
   b4fd8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   b4fdc:	d301      	bcc.n	b4fe2 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
   b4fde:	f006 f8ef 	bl	bb1c0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4fe2:	4628      	mov	r0, r5
   b4fe4:	f7ff f857 	bl	b4096 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4fe8:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4fec:	4428      	add	r0, r5
   b4fee:	60a0      	str	r0, [r4, #8]
      }
   b4ff0:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4ff2:	4608      	mov	r0, r1
   b4ff4:	e7f8      	b.n	b4fe8 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x1c>

000b4ff6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4ff6:	b538      	push	{r3, r4, r5, lr}
   b4ff8:	4604      	mov	r4, r0
   b4ffa:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b4ffc:	42ac      	cmp	r4, r5
   b4ffe:	d004      	beq.n	b500a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x14>
      }
   b5000:	4620      	mov	r0, r4
   b5002:	f7ff fb9f 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5006:	340c      	adds	r4, #12
   b5008:	e7f8      	b.n	b4ffc <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x6>
	    std::_Destroy(std::__addressof(*__first));
	}
   b500a:	bd38      	pop	{r3, r4, r5, pc}

000b500c <_ZN7RailwayD1Ev>:
#include "Checkpoint.cpp"
#include <string>

//container for all data for each rail line
class Railway{
   b500c:	b510      	push	{r4, lr}
   b500e:	4604      	mov	r4, r0
   b5010:	3048      	adds	r0, #72	; 0x48
   b5012:	f7ff fbb8 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b5016:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b501a:	f006 f909 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   b501e:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b5022:	f7ff ffe8 	bl	b4ff6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	_M_deallocate(_M_impl._M_start,
   b5026:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b5028:	b118      	cbz	r0, b5032 <_ZN7RailwayD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b502a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	::operator delete(__p
   b502c:	1a09      	subs	r1, r1, r0
   b502e:	f7ff f838 	bl	b40a2 <_ZdlPvj>
      }
   b5032:	f104 0018 	add.w	r0, r4, #24
   b5036:	f7ff fb85 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b503a:	f104 000c 	add.w	r0, r4, #12
   b503e:	f7ff fb77 	bl	b4730 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b5042:	4620      	mov	r0, r4
   b5044:	f7ff fb6a 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b5048:	4620      	mov	r0, r4
   b504a:	bd10      	pop	{r4, pc}

000b504c <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b504c:	b538      	push	{r3, r4, r5, lr}
   b504e:	4604      	mov	r4, r0
   b5050:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b5052:	42ac      	cmp	r4, r5
   b5054:	d004      	beq.n	b5060 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_+0x14>
      __pointer->~_Tp();
   b5056:	4620      	mov	r0, r4
   b5058:	f7ff ffd8 	bl	b500c <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b505c:	346c      	adds	r4, #108	; 0x6c
   b505e:	e7f8      	b.n	b5052 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_+0x6>
	}
   b5060:	bd38      	pop	{r3, r4, r5, pc}

000b5062 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b5062:	b510      	push	{r4, lr}
   b5064:	4604      	mov	r4, r0
	__destroy(__first, __last);
   b5066:	e9d0 0100 	ldrd	r0, r1, [r0]
   b506a:	f7ff ffef 	bl	b504c <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   b506e:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b5070:	b118      	cbz	r0, b507a <_ZNSt6vectorI7RailwaySaIS0_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b5072:	68a1      	ldr	r1, [r4, #8]
   b5074:	1a09      	subs	r1, r1, r0
   b5076:	f7ff f814 	bl	b40a2 <_ZdlPvj>
      }
   b507a:	4620      	mov	r0, r4
   b507c:	bd10      	pop	{r4, pc}

000b507e <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b507e:	b538      	push	{r3, r4, r5, lr}
   b5080:	4604      	mov	r4, r0
   b5082:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b5084:	42ac      	cmp	r4, r5
   b5086:	d008      	beq.n	b509a <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_+0x1c>
   b5088:	f104 000c 	add.w	r0, r4, #12
   b508c:	f006 f8d0 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#include "Railway.cpp"

class City{
   b5090:	4620      	mov	r0, r4
   b5092:	f7ff ffe6 	bl	b5062 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b5096:	3428      	adds	r4, #40	; 0x28
   b5098:	e7f4      	b.n	b5084 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_+0x6>
	}
   b509a:	bd38      	pop	{r3, r4, r5, pc}

000b509c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b509c:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b509e:	b510      	push	{r4, lr}
   b50a0:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b50a2:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b50a6:	d005      	beq.n	b50b4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b50a8:	4601      	mov	r1, r0
   b50aa:	4622      	mov	r2, r4
   b50ac:	4618      	mov	r0, r3
   b50ae:	f007 f87d 	bl	bc1ac <memmove>
   b50b2:	4603      	mov	r3, r0
	}
   b50b4:	1918      	adds	r0, r3, r4
   b50b6:	bd10      	pop	{r4, pc}

000b50b8 <_ZNSt6vectorIiSaIiEEC1ERKS1_>:
      vector(const vector& __x)
   b50b8:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b50ba:	e9d1 3600 	ldrd	r3, r6, [r1]
   b50be:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b50c0:	2300      	movs	r3, #0
      vector(const vector& __x)
   b50c2:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b50c4:	e9c0 3300 	strd	r3, r3, [r0]
   b50c8:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b50ca:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   b50cc:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b50ce:	f7ff f867 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b50d2:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b50d6:	4406      	add	r6, r0
   b50d8:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b50da:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
   b50dc:	e9d5 0100 	ldrd	r0, r1, [r5]
   b50e0:	f7ff ffdc 	bl	b509c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
   b50e4:	6060      	str	r0, [r4, #4]
      }
   b50e6:	4620      	mov	r0, r4
   b50e8:	bd70      	pop	{r4, r5, r6, pc}
	...

000b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>:
      vector(initializer_list<value_type> __l,
   b50ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b50ee:	ab04      	add	r3, sp, #16
   b50f0:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b50f4:	2300      	movs	r3, #0
   b50f6:	e9c0 3300 	strd	r3, r3, [r0]
   b50fa:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b50fc:	4604      	mov	r4, r0
   b50fe:	4613      	mov	r3, r2
   b5100:	460e      	mov	r6, r1
   b5102:	0095      	lsls	r5, r2, #2
   b5104:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b5108:	f342 001d 	sbfx	r0, r2, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b510c:	4a0a      	ldr	r2, [pc, #40]	; (b5138 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x4c>)
   b510e:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b5112:	d202      	bcs.n	b511a <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x2e>
	  __throw_length_error(
   b5114:	4809      	ldr	r0, [pc, #36]	; (b513c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x50>)
   b5116:	f006 f859 	bl	bb1cc <_ZSt20__throw_length_errorPKc>
   b511a:	9101      	str	r1, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b511c:	f7ff f840 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5120:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b5122:	4602      	mov	r2, r0
   b5124:	6020      	str	r0, [r4, #0]
   b5126:	9901      	ldr	r1, [sp, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5128:	60a5      	str	r5, [r4, #8]
   b512a:	4630      	mov	r0, r6
   b512c:	f7ff ffb6 	bl	b509c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
   b5130:	6060      	str	r0, [r4, #4]
      }
   b5132:	b004      	add	sp, #16
   b5134:	bd70      	pop	{r4, r5, r6, pc}
   b5136:	bf00      	nop
   b5138:	7ffffffc 	.word	0x7ffffffc
   b513c:	000be3bb 	.word	0x000be3bb

000b5140 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>:
      if (&__x != this)
   b5140:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b5142:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5144:	4604      	mov	r4, r0
   b5146:	460d      	mov	r5, r1
      if (&__x != this)
   b5148:	d01d      	beq.n	b5186 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x46>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b514a:	e9d1 7100 	ldrd	r7, r1, [r1]
			 - this->_M_impl._M_start); }
   b514e:	6802      	ldr	r2, [r0, #0]
   b5150:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5152:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b5154:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b5156:	429e      	cmp	r6, r3
   b5158:	d917      	bls.n	b518a <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x4a>
	  pointer __result = this->_M_allocate(__n);
   b515a:	10b0      	asrs	r0, r6, #2
   b515c:	9101      	str	r1, [sp, #4]
   b515e:	f7ff f81f 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
   b5162:	9901      	ldr	r1, [sp, #4]
   b5164:	4602      	mov	r2, r0
   b5166:	4605      	mov	r5, r0
   b5168:	4638      	mov	r0, r7
   b516a:	f7ff ff97 	bl	b509c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b516e:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b5170:	b118      	cbz	r0, b517a <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x3a>
			    - this->_M_impl._M_start);
   b5172:	68a1      	ldr	r1, [r4, #8]
   b5174:	1a09      	subs	r1, r1, r0
   b5176:	f7fe ff94 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b517a:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b517c:	4435      	add	r5, r6
   b517e:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b5180:	6823      	ldr	r3, [r4, #0]
   b5182:	4433      	add	r3, r6
   b5184:	6063      	str	r3, [r4, #4]
    }
   b5186:	b003      	add	sp, #12
   b5188:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b518a:	6843      	ldr	r3, [r0, #4]
   b518c:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b518e:	429e      	cmp	r6, r3
   b5190:	d803      	bhi.n	b519a <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x5a>
   b5192:	4638      	mov	r0, r7
   b5194:	f7ff ff82 	bl	b509c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   b5198:	e7f2      	b.n	b5180 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x40>
   b519a:	18f9      	adds	r1, r7, r3
   b519c:	4638      	mov	r0, r7
   b519e:	f7ff ff7d 	bl	b509c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
   b51a2:	e9d4 0200 	ldrd	r0, r2, [r4]
   b51a6:	e9d5 3100 	ldrd	r3, r1, [r5]
   b51aa:	1a10      	subs	r0, r2, r0
   b51ac:	4418      	add	r0, r3
   b51ae:	e7f1      	b.n	b5194 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x54>

000b51b0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b51b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b51b4:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b51b6:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b51b8:	480b      	ldr	r0, [pc, #44]	; (b51e8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x38>)
   b51ba:	10a4      	asrs	r4, r4, #2
   b51bc:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b51be:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b51c0:	4627      	mov	r7, r4
   b51c2:	4690      	mov	r8, r2
   b51c4:	2f00      	cmp	r7, #0
   b51c6:	dd08      	ble.n	b51da <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x2a>
	      *__result = *__first;
   b51c8:	4629      	mov	r1, r5
   b51ca:	4640      	mov	r0, r8
   b51cc:	f7ff ffb8 	bl	b5140 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b51d0:	350c      	adds	r5, #12
	      ++__result;
   b51d2:	f108 080c 	add.w	r8, r8, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b51d6:	3f01      	subs	r7, #1
   b51d8:	e7f4      	b.n	b51c4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x14>
	  return __result;
   b51da:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b51de:	200c      	movs	r0, #12
   b51e0:	fb00 6004 	mla	r0, r0, r4, r6
   b51e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b51e8:	aaaaaaab 	.word	0xaaaaaaab

000b51ec <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>:
    std::vector<std::string> colors;
    int tripleIndex = -1;
    int loopIndex = -1;
    int lowerLoopBound, upperLoopBound, lowerGreenBound, upperGreenBound;

    Railway(std::vector<Checkpoint> checkpointInput, std::vector<int> scalerInput, std::vector<int> outputSize, std::string nameInput, std::vector<std::string> colorInput, std::vector<int> boundInput = {0, 0, 0, 0}){
   b51ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b51f0:	2500      	movs	r5, #0
   b51f2:	4699      	mov	r9, r3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b51f4:	f100 0338 	add.w	r3, r0, #56	; 0x38
      { _M_string_length = __length; }
   b51f8:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   b51fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5200:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
   b5204:	4604      	mov	r4, r0
   b5206:	e9c0 5500 	strd	r5, r5, [r0]
   b520a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b520e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5212:	e9c0 5506 	strd	r5, r5, [r0, #24]
   b5216:	e9c0 5508 	strd	r5, r5, [r0, #32]
   b521a:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
   b521e:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
   b5222:	b099      	sub	sp, #100	; 0x64
      { __c1 = __c2; }
   b5224:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
   b5228:	6505      	str	r5, [r0, #80]	; 0x50
   b522a:	4692      	mov	sl, r2
   b522c:	f100 0b18 	add.w	fp, r0, #24
   b5230:	f100 0830 	add.w	r8, r0, #48	; 0x30
   b5234:	f100 0748 	add.w	r7, r0, #72	; 0x48
      checkpoints = checkpointInput;
   b5238:	f7ff f808 	bl	b424c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b523c:	e9d4 2300 	ldrd	r2, r3, [r4]
   b5240:	1a9b      	subs	r3, r3, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b5242:	42ab      	cmp	r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5244:	ea4f 01e3 	mov.w	r1, r3, asr #3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b5248:	da02      	bge.n	b5250 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x64>
	  __throw_length_error(
   b524a:	485f      	ldr	r0, [pc, #380]	; (b53c8 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1dc>)
   b524c:	f005 ffbe 	bl	bb1cc <_ZSt20__throw_length_errorPKc>
      { _M_create_storage(__n); }
   b5250:	a809      	add	r0, sp, #36	; 0x24
   b5252:	9101      	str	r1, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5254:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b5258:	950b      	str	r5, [sp, #44]	; 0x2c
      { _M_create_storage(__n); }
   b525a:	f7ff feb7 	bl	b4fcc <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
      if (__n <= 0)
   b525e:	9901      	ldr	r1, [sp, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
   b5260:	9809      	ldr	r0, [sp, #36]	; 0x24
   b5262:	b131      	cbz	r1, b5272 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x86>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   b5264:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	*__first = __tmp;
   b5268:	008a      	lsls	r2, r1, #2
   b526a:	4629      	mov	r1, r5
   b526c:	f006 ffb8 	bl	bc1e0 <memset>
   b5270:	4630      	mov	r0, r6
	  _M_finish = __x._M_finish;
   b5272:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
	  _M_start = __x._M_start;
   b5276:	9909      	ldr	r1, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b5278:	6963      	ldr	r3, [r4, #20]
   b527a:	930e      	str	r3, [sp, #56]	; 0x38
	  _M_finish = __x._M_finish;
   b527c:	e9c4 1003 	strd	r1, r0, [r4, #12]
      }
   b5280:	ae0c      	add	r6, sp, #48	; 0x30
	  _M_end_of_storage = __x._M_end_of_storage;
   b5282:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b5284:	6161      	str	r1, [r4, #20]
	  _M_finish = __x._M_finish;
   b5286:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
      }
   b528a:	4630      	mov	r0, r6
	  _M_start = __x._M_start;
   b528c:	2500      	movs	r5, #0
	  _M_finish = __x._M_finish;
   b528e:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b5292:	950b      	str	r5, [sp, #44]	; 0x2c
      }
   b5294:	f7ff fa4c 	bl	b4730 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b5298:	a809      	add	r0, sp, #36	; 0x24
   b529a:	f7ff fa49 	bl	b4730 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      distances = std::vector<float>(checkpoints.size(), 0);
      scalers = scalerInput;
   b529e:	4651      	mov	r1, sl
   b52a0:	4658      	mov	r0, fp
   b52a2:	f7ff ff4d 	bl	b5140 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      outputs = {std::vector<int>(outputSize[0], 0), std::vector<int>(outputSize[1], 0), std::vector<int>(outputSize[2], 0), std::vector<int>(outputSize[3], 0)};
   b52a6:	f8d9 1000 	ldr.w	r1, [r9]
   b52aa:	9506      	str	r5, [sp, #24]
   b52ac:	6809      	ldr	r1, [r1, #0]
   b52ae:	ab02      	add	r3, sp, #8
   b52b0:	aa06      	add	r2, sp, #24
   b52b2:	4630      	mov	r0, r6
   b52b4:	f7ff fa7a 	bl	b47ac <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b52b8:	f8d9 1000 	ldr.w	r1, [r9]
   b52bc:	9507      	str	r5, [sp, #28]
   b52be:	6849      	ldr	r1, [r1, #4]
   b52c0:	ab03      	add	r3, sp, #12
   b52c2:	aa07      	add	r2, sp, #28
   b52c4:	a80f      	add	r0, sp, #60	; 0x3c
   b52c6:	f7ff fa71 	bl	b47ac <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b52ca:	f8d9 1000 	ldr.w	r1, [r9]
   b52ce:	9508      	str	r5, [sp, #32]
   b52d0:	6889      	ldr	r1, [r1, #8]
   b52d2:	ab04      	add	r3, sp, #16
   b52d4:	aa08      	add	r2, sp, #32
   b52d6:	a812      	add	r0, sp, #72	; 0x48
   b52d8:	f7ff fa68 	bl	b47ac <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b52dc:	f8d9 1000 	ldr.w	r1, [r9]
   b52e0:	9509      	str	r5, [sp, #36]	; 0x24
   b52e2:	ab05      	add	r3, sp, #20
   b52e4:	aa09      	add	r2, sp, #36	; 0x24
   b52e6:	68c9      	ldr	r1, [r1, #12]
   b52e8:	a815      	add	r0, sp, #84	; 0x54
   b52ea:	f7ff fa5f 	bl	b47ac <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
			 - this->_M_impl._M_start); }
   b52ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b52f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b52f2:	1a9b      	subs	r3, r3, r2
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);

	if (__len > capacity())
   b52f4:	2b2f      	cmp	r3, #47	; 0x2f
   b52f6:	d83f      	bhi.n	b5378 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x18c>
	  pointer __result = this->_M_allocate(__n);
   b52f8:	2004      	movs	r0, #4
   b52fa:	f7fe fef3 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b52fe:	46b3      	mov	fp, r6
   b5300:	4605      	mov	r5, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b5302:	f100 0a30 	add.w	sl, r0, #48	; 0x30
	  _ForwardIterator __cur = __result;
   b5306:	4681      	mov	r9, r0
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5308:	f1b9 0f00 	cmp.w	r9, #0
   b530c:	d003      	beq.n	b5316 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x12a>
   b530e:	4659      	mov	r1, fp
   b5310:	4648      	mov	r0, r9
   b5312:	f7ff fed1 	bl	b50b8 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b5316:	f109 090c 	add.w	r9, r9, #12
   b531a:	45d1      	cmp	r9, sl
   b531c:	f10b 0b0c 	add.w	fp, fp, #12
   b5320:	d1f2      	bne.n	b5308 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x11c>
	__destroy(__first, __last);
   b5322:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b5326:	f7ff fe66 	bl	b4ff6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	    _S_check_init_len(__len, _M_get_Tp_allocator());
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
   b532a:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b532c:	b118      	cbz	r0, b5336 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x14a>
			  this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_start);
   b532e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b5330:	1a09      	subs	r1, r1, r0
   b5332:	f7fe feb6 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b5336:	e9c4 5a09 	strd	r5, sl, [r4, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b533a:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
   b533e:	ad18      	add	r5, sp, #96	; 0x60
   b5340:	3d0c      	subs	r5, #12
      }
   b5342:	4628      	mov	r0, r5
   b5344:	f7ff f9fe 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5348:	42b5      	cmp	r5, r6
   b534a:	d1f9      	bne.n	b5340 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x154>
	this->_M_assign(__str);
   b534c:	9922      	ldr	r1, [sp, #136]	; 0x88
   b534e:	4640      	mov	r0, r8
   b5350:	f005 ff8c 	bl	bb26c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      name = nameInput;
      colors = colorInput;
   b5354:	4638      	mov	r0, r7
   b5356:	9923      	ldr	r1, [sp, #140]	; 0x8c
   b5358:	f7fe ffca 	bl	b42f0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
	return *(this->_M_impl._M_start + __n);
   b535c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b535e:	681b      	ldr	r3, [r3, #0]
      lowerLoopBound = boundInput[0];
   b5360:	681a      	ldr	r2, [r3, #0]
   b5362:	65e2      	str	r2, [r4, #92]	; 0x5c
      upperLoopBound = boundInput[1];
   b5364:	685a      	ldr	r2, [r3, #4]
   b5366:	6622      	str	r2, [r4, #96]	; 0x60
      lowerGreenBound = boundInput[2];
   b5368:	689a      	ldr	r2, [r3, #8]
      upperGreenBound = boundInput[3];
   b536a:	68db      	ldr	r3, [r3, #12]
      lowerGreenBound = boundInput[2];
   b536c:	6662      	str	r2, [r4, #100]	; 0x64
    }
   b536e:	4620      	mov	r0, r4
      upperGreenBound = boundInput[3];
   b5370:	66a3      	str	r3, [r4, #104]	; 0x68
    }
   b5372:	b019      	add	sp, #100	; 0x64
   b5374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5378:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   b537a:	1aad      	subs	r5, r5, r2
	  }
	else if (size() >= __len)
   b537c:	2d2f      	cmp	r5, #47	; 0x2f
   b537e:	d90b      	bls.n	b5398 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ac>
			      _Category>::__copy_m(__first, __last, __result);
   b5380:	a918      	add	r1, sp, #96	; 0x60
   b5382:	4630      	mov	r0, r6
   b5384:	f7ff ff14 	bl	b51b0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b5388:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b538a:	4288      	cmp	r0, r1
   b538c:	4605      	mov	r5, r0
   b538e:	d0d6      	beq.n	b533e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b5390:	f7ff fe31 	bl	b4ff6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b5394:	62a5      	str	r5, [r4, #40]	; 0x28
   b5396:	e7d2      	b.n	b533e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b5398:	4435      	add	r5, r6
   b539a:	4629      	mov	r1, r5
   b539c:	4630      	mov	r0, r6
   b539e:	f7ff ff07 	bl	b51b0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b53a2:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
   b53a6:	ab18      	add	r3, sp, #96	; 0x60
   b53a8:	429d      	cmp	r5, r3
   b53aa:	d00a      	beq.n	b53c2 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1d6>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b53ac:	f1b9 0f00 	cmp.w	r9, #0
   b53b0:	d003      	beq.n	b53ba <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ce>
   b53b2:	4629      	mov	r1, r5
   b53b4:	4648      	mov	r0, r9
   b53b6:	f7ff fe7f 	bl	b50b8 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b53ba:	350c      	adds	r5, #12
   b53bc:	f109 090c 	add.w	r9, r9, #12
   b53c0:	e7f1      	b.n	b53a6 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ba>
	    _ForwardIterator __mid = __first;
	    std::advance(__mid, size());
	    std::copy(__first, __mid, this->_M_impl._M_start);
	    const size_type __attribute__((__unused__)) __n = __len - size();
	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	    this->_M_impl._M_finish =
   b53c2:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
   b53c6:	e7ba      	b.n	b533e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b53c8:	000be3bb 	.word	0x000be3bb

000b53cc <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   b53cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b53d0:	ed2d 8b0e 	vpush	{d8-d14}
   b53d4:	2801      	cmp	r0, #1
   b53d6:	4db4      	ldr	r5, [pc, #720]	; (b56a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2dc>)
   b53d8:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
   b53dc:	f041 810f 	bne.w	b65fe <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1232>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b53e0:	2400      	movs	r4, #0
    SleepResult() {}
   b53e2:	4bb2      	ldr	r3, [pc, #712]	; (b56ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e0>)
   b53e4:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   b53e6:	e9c5 4400 	strd	r4, r4, [r5]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b53ea:	2003      	movs	r0, #3
   b53ec:	f003 face 	bl	b898c <set_system_mode>
  public:
    float lat;
    float lon;

    Checkpoint(float la, float lo){
      lat = la;
   b53f0:	4baf      	ldr	r3, [pc, #700]	; (b56b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e4>)
   b53f2:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b53f4:	4baf      	ldr	r3, [pc, #700]	; (b56b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e8>)
   b53f6:	93a5      	str	r3, [sp, #660]	; 0x294
      lat = la;
   b53f8:	4baf      	ldr	r3, [pc, #700]	; (b56b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2ec>)
   b53fa:	93a6      	str	r3, [sp, #664]	; 0x298
      lon = lo;
   b53fc:	4baf      	ldr	r3, [pc, #700]	; (b56bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f0>)
   b53fe:	93a7      	str	r3, [sp, #668]	; 0x29c
      lat = la;
   b5400:	4baf      	ldr	r3, [pc, #700]	; (b56c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f4>)
   b5402:	93a8      	str	r3, [sp, #672]	; 0x2a0
      lon = lo;
   b5404:	4baf      	ldr	r3, [pc, #700]	; (b56c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f8>)
   b5406:	93a9      	str	r3, [sp, #676]	; 0x2a4
      lat = la;
   b5408:	4baf      	ldr	r3, [pc, #700]	; (b56c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2fc>)
   b540a:	93aa      	str	r3, [sp, #680]	; 0x2a8
      lon = lo;
   b540c:	4baf      	ldr	r3, [pc, #700]	; (b56cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x300>)
   b540e:	93ab      	str	r3, [sp, #684]	; 0x2ac
      lat = la;
   b5410:	4baf      	ldr	r3, [pc, #700]	; (b56d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x304>)
   b5412:	93ac      	str	r3, [sp, #688]	; 0x2b0
      lon = lo;
   b5414:	4baf      	ldr	r3, [pc, #700]	; (b56d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x308>)
   b5416:	93ad      	str	r3, [sp, #692]	; 0x2b4
);
   b5418:	aba4      	add	r3, sp, #656	; 0x290
   b541a:	937e      	str	r3, [sp, #504]	; 0x1f8
   b541c:	2305      	movs	r3, #5
   b541e:	937f      	str	r3, [sp, #508]	; 0x1fc
   b5420:	f50d 7ae8 	add.w	sl, sp, #464	; 0x1d0
   b5424:	aa7e      	add	r2, sp, #504	; 0x1f8
   b5426:	4653      	mov	r3, sl
   b5428:	ca06      	ldmia	r2, {r1, r2}
   b542a:	a88c      	add	r0, sp, #560	; 0x230
   b542c:	f7ff f9e0 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5430:	4ba9      	ldr	r3, [pc, #676]	; (b56d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x30c>)
      lat = la;
   b5432:	eddf 8aaa 	vldr	s17, [pc, #680]	; b56dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x310>
      lon = lo;
   b5436:	ed9f 8aaa 	vldr	s16, [pc, #680]	; b56e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>
      lat = la;
   b543a:	eddf 9aaa 	vldr	s19, [pc, #680]	; b56e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x318>
      lon = lo;
   b543e:	ed9f 9aaa 	vldr	s18, [pc, #680]	; b56e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x31c>
      lat = la;
   b5442:	eddf aaaa 	vldr	s21, [pc, #680]	; b56ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>
      lon = lo;
   b5446:	ed9f aaaa 	vldr	s20, [pc, #680]	; b56f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>
      lat = la;
   b544a:	eddf baaa 	vldr	s23, [pc, #680]	; b56f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>
      lon = lo;
   b544e:	ed9f baaa 	vldr	s22, [pc, #680]	; b56f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>
      lat = la;
   b5452:	eddf daaa 	vldr	s27, [pc, #680]	; b56fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>
      lon = lo;
   b5456:	ed9f daaa 	vldr	s26, [pc, #680]	; b5700 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>
      lat = la;
   b545a:	eddf caaa 	vldr	s25, [pc, #680]	; b5704 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>
      lon = lo;
   b545e:	ed9f caaa 	vldr	s24, [pc, #680]	; b5708 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>
   b5462:	ed9f eaaa 	vldr	s28, [pc, #680]	; b570c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>
   b5466:	461f      	mov	r7, r3
   b5468:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b546a:	f50d 7b17 	add.w	fp, sp, #604	; 0x25c
   b546e:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
   b5472:	2204      	movs	r2, #4
   b5474:	ad89      	add	r5, sp, #548	; 0x224
   b5476:	ab7c      	add	r3, sp, #496	; 0x1f0
   b5478:	f8cd b1f0 	str.w	fp, [sp, #496]	; 0x1f0
   b547c:	927d      	str	r2, [sp, #500]	; 0x1f4
   b547e:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5482:	4628      	mov	r0, r5
   b5484:	f7ff fe32 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5488:	2228      	movs	r2, #40	; 0x28
   b548a:	e9cd 2494 	strd	r2, r4, [sp, #592]	; 0x250
   b548e:	aa93      	add	r2, sp, #588	; 0x24c
   b5490:	927a      	str	r2, [sp, #488]	; 0x1e8
   b5492:	2204      	movs	r2, #4
   b5494:	f50d 7806 	add.w	r8, sp, #536	; 0x218
   b5498:	ab7a      	add	r3, sp, #488	; 0x1e8
   b549a:	927b      	str	r2, [sp, #492]	; 0x1ec
   b549c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b54a0:	4640      	mov	r0, r8
   b54a2:	9493      	str	r4, [sp, #588]	; 0x24c
   b54a4:	9496      	str	r4, [sp, #600]	; 0x258
   b54a6:	f7ff fe21 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b54aa:	a89d      	add	r0, sp, #628	; 0x274
   b54ac:	4998      	ldr	r1, [pc, #608]	; (b5710 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>)
   b54ae:	f7fe fe2b 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b54b2:	a8b0      	add	r0, sp, #704	; 0x2c0
   b54b4:	4997      	ldr	r1, [pc, #604]	; (b5714 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>)
   b54b6:	f7fe fe27 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b54ba:	a8b6      	add	r0, sp, #728	; 0x2d8
   b54bc:	4996      	ldr	r1, [pc, #600]	; (b5718 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>)
   b54be:	f7fe fe23 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b54c2:	a9b0      	add	r1, sp, #704	; 0x2c0
   b54c4:	9178      	str	r1, [sp, #480]	; 0x1e0
   b54c6:	2102      	movs	r1, #2
   b54c8:	f50d 79e4 	add.w	r9, sp, #456	; 0x1c8
   b54cc:	9179      	str	r1, [sp, #484]	; 0x1e4
   b54ce:	aa78      	add	r2, sp, #480	; 0x1e0
   b54d0:	464b      	mov	r3, r9
   b54d2:	ca06      	ldmia	r2, {r1, r2}
   b54d4:	a883      	add	r0, sp, #524	; 0x20c
   b54d6:	f7ff f9bf 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b54da:	4621      	mov	r1, r4
   b54dc:	2210      	movs	r2, #16
   b54de:	a88f      	add	r0, sp, #572	; 0x23c
   b54e0:	f006 fe7e 	bl	bc1e0 <memset>
   b54e4:	aa8f      	add	r2, sp, #572	; 0x23c
   b54e6:	9276      	str	r2, [sp, #472]	; 0x1d8
   b54e8:	2204      	movs	r2, #4
   b54ea:	ae80      	add	r6, sp, #512	; 0x200
   b54ec:	ab76      	add	r3, sp, #472	; 0x1d8
   b54ee:	9277      	str	r2, [sp, #476]	; 0x1dc
   b54f0:	e893 0006 	ldmia.w	r3, {r1, r2}
   b54f4:	4630      	mov	r0, r6
   b54f6:	f7ff fdf9 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLineCTA = Railway(
   b54fa:	aa83      	add	r2, sp, #524	; 0x20c
   b54fc:	9201      	str	r2, [sp, #4]
   b54fe:	aa9d      	add	r2, sp, #628	; 0x274
   b5500:	4643      	mov	r3, r8
   b5502:	a98c      	add	r1, sp, #560	; 0x230
   b5504:	9602      	str	r6, [sp, #8]
   b5506:	9200      	str	r2, [sp, #0]
   b5508:	4884      	ldr	r0, [pc, #528]	; (b571c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>)
   b550a:	462a      	mov	r2, r5
   b550c:	f7ff fe6e 	bl	b51ec <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b5510:	4630      	mov	r0, r6
   b5512:	f7ff f917 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5516:	a883      	add	r0, sp, #524	; 0x20c
   b5518:	f7ff f935 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b551c:	a8b6      	add	r0, sp, #728	; 0x2d8
   b551e:	f005 fe87 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5522:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5524:	f005 fe84 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5528:	a89d      	add	r0, sp, #628	; 0x274
   b552a:	f005 fe81 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b552e:	4640      	mov	r0, r8
   b5530:	f7ff f908 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5534:	4628      	mov	r0, r5
   b5536:	f7ff f905 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b553a:	a88c      	add	r0, sp, #560	; 0x230
   b553c:	f7ff f8ee 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5540:	4b77      	ldr	r3, [pc, #476]	; (b5720 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
   b5542:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b5544:	4b77      	ldr	r3, [pc, #476]	; (b5724 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>)
   b5546:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b5548:	4b77      	ldr	r3, [pc, #476]	; (b5728 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x35c>)
   b554a:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b554c:	4b77      	ldr	r3, [pc, #476]	; (b572c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x360>)
   b554e:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b5550:	4b77      	ldr	r3, [pc, #476]	; (b5730 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x364>)
   b5552:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b5554:	4b77      	ldr	r3, [pc, #476]	; (b5734 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x368>)
   b5556:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b5558:	4b77      	ldr	r3, [pc, #476]	; (b5738 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
   b555a:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b555c:	4b77      	ldr	r3, [pc, #476]	; (b573c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x370>)
   b555e:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b5560:	4b77      	ldr	r3, [pc, #476]	; (b5740 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>)
   b5562:	93b8      	str	r3, [sp, #736]	; 0x2e0
      lon = lo;
   b5564:	4b77      	ldr	r3, [pc, #476]	; (b5744 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x378>)
   b5566:	93b9      	str	r3, [sp, #740]	; 0x2e4
      lat = la;
   b5568:	4b77      	ldr	r3, [pc, #476]	; (b5748 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x37c>)
   b556a:	93ba      	str	r3, [sp, #744]	; 0x2e8
);
   b556c:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b556e:	4b77      	ldr	r3, [pc, #476]	; (b574c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x380>)
   b5570:	9274      	str	r2, [sp, #464]	; 0x1d0
   b5572:	93bb      	str	r3, [sp, #748]	; 0x2ec
   b5574:	2207      	movs	r2, #7
      lat = la;
   b5576:	4b76      	ldr	r3, [pc, #472]	; (b5750 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x384>)
   b5578:	9275      	str	r2, [sp, #468]	; 0x1d4
   b557a:	93bc      	str	r3, [sp, #752]	; 0x2f0
   b557c:	aa6a      	add	r2, sp, #424	; 0x1a8
      lon = lo;
   b557e:	4b75      	ldr	r3, [pc, #468]	; (b5754 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x388>)
   b5580:	93bd      	str	r3, [sp, #756]	; 0x2f4
   b5582:	a88c      	add	r0, sp, #560	; 0x230
   b5584:	4613      	mov	r3, r2
   b5586:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b558a:	f7ff f931 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b558e:	aa9d      	add	r2, sp, #628	; 0x274
   b5590:	f107 0c10 	add.w	ip, r7, #16
   b5594:	9204      	str	r2, [sp, #16]
   b5596:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b559a:	9f04      	ldr	r7, [sp, #16]
   b559c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b559e:	e89c 0003 	ldmia.w	ip, {r0, r1}
   b55a2:	aa9d      	add	r2, sp, #628	; 0x274
   b55a4:	9272      	str	r2, [sp, #456]	; 0x1c8
   b55a6:	2206      	movs	r2, #6
   b55a8:	9273      	str	r2, [sp, #460]	; 0x1cc
   b55aa:	e9c7 0100 	strd	r0, r1, [r7]
   b55ae:	e899 0006 	ldmia.w	r9, {r1, r2}
   b55b2:	4628      	mov	r0, r5
   b55b4:	9704      	str	r7, [sp, #16]
   b55b6:	f7ff fd99 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b55ba:	aa93      	add	r2, sp, #588	; 0x24c
   b55bc:	9270      	str	r2, [sp, #448]	; 0x1c0
   b55be:	233c      	movs	r3, #60	; 0x3c
   b55c0:	2204      	movs	r2, #4
   b55c2:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b55c6:	9271      	str	r2, [sp, #452]	; 0x1c4
   b55c8:	ab70      	add	r3, sp, #448	; 0x1c0
   b55ca:	e893 0006 	ldmia.w	r3, {r1, r2}
   b55ce:	4640      	mov	r0, r8
   b55d0:	9493      	str	r4, [sp, #588]	; 0x24c
   b55d2:	9496      	str	r4, [sp, #600]	; 0x258
   b55d4:	f7ff fd8a 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b55d8:	4658      	mov	r0, fp
   b55da:	495f      	ldr	r1, [pc, #380]	; (b5758 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x38c>)
   b55dc:	f7fe fd94 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b55e0:	a8a4      	add	r0, sp, #656	; 0x290
   b55e2:	495e      	ldr	r1, [pc, #376]	; (b575c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x390>)
   b55e4:	f7fe fd90 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b55e8:	a8aa      	add	r0, sp, #680	; 0x2a8
   b55ea:	495d      	ldr	r1, [pc, #372]	; (b5760 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>)
   b55ec:	f7fe fd8c 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b55f0:	aba4      	add	r3, sp, #656	; 0x290
   b55f2:	2102      	movs	r1, #2
   b55f4:	936e      	str	r3, [sp, #440]	; 0x1b8
   b55f6:	f50d 79d0 	add.w	r9, sp, #416	; 0x1a0
   b55fa:	916f      	str	r1, [sp, #444]	; 0x1bc
   b55fc:	aa6e      	add	r2, sp, #440	; 0x1b8
   b55fe:	464b      	mov	r3, r9
   b5600:	ca06      	ldmia	r2, {r1, r2}
   b5602:	a883      	add	r0, sp, #524	; 0x20c
   b5604:	f7ff f928 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5608:	4621      	mov	r1, r4
   b560a:	2210      	movs	r2, #16
   b560c:	a88f      	add	r0, sp, #572	; 0x23c
   b560e:	f006 fde7 	bl	bc1e0 <memset>
   b5612:	aa8f      	add	r2, sp, #572	; 0x23c
   b5614:	926c      	str	r2, [sp, #432]	; 0x1b0
   b5616:	2204      	movs	r2, #4
   b5618:	ab6c      	add	r3, sp, #432	; 0x1b0
   b561a:	926d      	str	r2, [sp, #436]	; 0x1b4
   b561c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5620:	4630      	mov	r0, r6
   b5622:	f7ff fd63 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLineCTA = Railway(
   b5626:	aa83      	add	r2, sp, #524	; 0x20c
   b5628:	4643      	mov	r3, r8
   b562a:	a98c      	add	r1, sp, #560	; 0x230
   b562c:	e9cd b200 	strd	fp, r2, [sp]
   b5630:	9602      	str	r6, [sp, #8]
   b5632:	462a      	mov	r2, r5
   b5634:	484b      	ldr	r0, [pc, #300]	; (b5764 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x398>)
   b5636:	f7ff fdd9 	bl	b51ec <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b563a:	4630      	mov	r0, r6
   b563c:	f7ff f882 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5640:	a883      	add	r0, sp, #524	; 0x20c
   b5642:	f7ff f8a0 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5646:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5648:	f005 fdf2 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b564c:	a8a4      	add	r0, sp, #656	; 0x290
   b564e:	f005 fdef 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5652:	4658      	mov	r0, fp
   b5654:	f005 fdec 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5658:	4640      	mov	r0, r8
   b565a:	f7ff f873 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b565e:	4628      	mov	r0, r5
   b5660:	f7ff f870 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5664:	a88c      	add	r0, sp, #560	; 0x230
   b5666:	f7ff f859 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b566a:	aab0      	add	r2, sp, #704	; 0x2c0
   b566c:	926a      	str	r2, [sp, #424]	; 0x1a8
   b566e:	2207      	movs	r2, #7
   b5670:	926b      	str	r2, [sp, #428]	; 0x1ac
   b5672:	f50d 7ac0 	add.w	sl, sp, #384	; 0x180
   b5676:	aa6a      	add	r2, sp, #424	; 0x1a8
   b5678:	ca06      	ldmia	r2, {r1, r2}
   b567a:	4653      	mov	r3, sl
   b567c:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b567e:	edcd 8ab4 	vstr	s17, [sp, #720]	; 0x2d0
      lon = lo;
   b5682:	ed8d 8ab5 	vstr	s16, [sp, #724]	; 0x2d4
      lat = la;
   b5686:	edcd 8abc 	vstr	s17, [sp, #752]	; 0x2f0
      lon = lo;
   b568a:	ed8d 8abd 	vstr	s16, [sp, #756]	; 0x2f4
      lat = la;
   b568e:	edcd dab0 	vstr	s27, [sp, #704]	; 0x2c0
      lon = lo;
   b5692:	ed8d dab1 	vstr	s26, [sp, #708]	; 0x2c4
      lat = la;
   b5696:	edcd cab2 	vstr	s25, [sp, #712]	; 0x2c8
      lon = lo;
   b569a:	ed8d cab3 	vstr	s24, [sp, #716]	; 0x2cc
      lat = la;
   b569e:	edcd bab6 	vstr	s23, [sp, #728]	; 0x2d8
      lon = lo;
   b56a2:	ed8d bab7 	vstr	s22, [sp, #732]	; 0x2dc
   b56a6:	e05f      	b.n	b5768 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x39c>
   b56a8:	200352b0 	.word	0x200352b0
   b56ac:	ffff0000 	.word	0xffff0000
   b56b0:	42276980 	.word	0x42276980
   b56b4:	c2af431e 	.word	0xc2af431e
   b56b8:	42279dcc 	.word	0x42279dcc
   b56bc:	c2af4202 	.word	0xc2af4202
   b56c0:	42279d95 	.word	0x42279d95
   b56c4:	c2af476d 	.word	0xc2af476d
   b56c8:	4227a7a9 	.word	0x4227a7a9
   b56cc:	c2af4e05 	.word	0xc2af4e05
   b56d0:	4227b382 	.word	0x4227b382
   b56d4:	c2af4e44 	.word	0xc2af4e44
   b56d8:	000be630 	.word	0x000be630
   b56dc:	42278b1a 	.word	0x42278b1a
   b56e0:	c2af449a 	.word	0xc2af449a
   b56e4:	42278b2f 	.word	0x42278b2f
   b56e8:	c2af4095 	.word	0xc2af4095
   b56ec:	422781d8 	.word	0x422781d8
   b56f0:	c2af4044 	.word	0xc2af4044
   b56f4:	42278216 	.word	0x42278216
   b56f8:	c2af44c1 	.word	0xc2af44c1
   b56fc:	4227a49e 	.word	0x4227a49e
   b5700:	c2af4bd0 	.word	0xc2af4bd0
   b5704:	4227a437 	.word	0x4227a437
   b5708:	c2af4659 	.word	0xc2af4659
   b570c:	c2af4089 	.word	0xc2af4089
   b5710:	000be4c8 	.word	0x000be4c8
   b5714:	000be4cc 	.word	0x000be4cc
   b5718:	000be4d3 	.word	0x000be4d3
   b571c:	2003e55c 	.word	0x2003e55c
   b5720:	42277e9d 	.word	0x42277e9d
   b5724:	c2af74b3 	.word	0xc2af74b3
   b5728:	422780af 	.word	0x422780af
   b572c:	c2af588e 	.word	0xc2af588e
   b5730:	4227804d 	.word	0x4227804d
   b5734:	c2af482e 	.word	0xc2af482e
   b5738:	422780ad 	.word	0x422780ad
   b573c:	c2af4157 	.word	0xc2af4157
   b5740:	42278aff 	.word	0x42278aff
   b5744:	c2af4253 	.word	0xc2af4253
   b5748:	42278af4 	.word	0x42278af4
   b574c:	c2af4798 	.word	0xc2af4798
   b5750:	4227a978 	.word	0x4227a978
   b5754:	c2af5f5d 	.word	0xc2af5f5d
   b5758:	000be4da 	.word	0x000be4da
   b575c:	000be4df 	.word	0x000be4df
   b5760:	000be4e6 	.word	0x000be4e6
   b5764:	20035308 	.word	0x20035308
      lat = la;
   b5768:	edcd aab8 	vstr	s21, [sp, #736]	; 0x2e0
      lon = lo;
   b576c:	ed8d aab9 	vstr	s20, [sp, #740]	; 0x2e4
      lat = la;
   b5770:	edcd 9aba 	vstr	s19, [sp, #744]	; 0x2e8
      lon = lo;
   b5774:	ed8d 9abb 	vstr	s18, [sp, #748]	; 0x2ec
   b5778:	f7ff f83a 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b577c:	4bb6      	ldr	r3, [pc, #728]	; (b5a58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b577e:	f103 0228 	add.w	r2, r3, #40	; 0x28
   b5782:	4617      	mov	r7, r2
   b5784:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5786:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
   b578a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b578e:	e9d7 0100 	ldrd	r0, r1, [r7]
   b5792:	9a04      	ldr	r2, [sp, #16]
   b5794:	9705      	str	r7, [sp, #20]
   b5796:	e882 0003 	stmia.w	r2, {r0, r1}
   b579a:	aa9d      	add	r2, sp, #628	; 0x274
   b579c:	9268      	str	r2, [sp, #416]	; 0x1a0
   b579e:	2206      	movs	r2, #6
   b57a0:	9269      	str	r2, [sp, #420]	; 0x1a4
   b57a2:	e899 0006 	ldmia.w	r9, {r1, r2}
   b57a6:	4628      	mov	r0, r5
   b57a8:	f7ff fca0 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b57ac:	f107 0208 	add.w	r2, r7, #8
   b57b0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b57b2:	af93      	add	r7, sp, #588	; 0x24c
   b57b4:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b57b8:	2104      	movs	r1, #4
   b57ba:	ab66      	add	r3, sp, #408	; 0x198
   b57bc:	9766      	str	r7, [sp, #408]	; 0x198
   b57be:	9167      	str	r1, [sp, #412]	; 0x19c
   b57c0:	e893 0006 	ldmia.w	r3, {r1, r2}
   b57c4:	4640      	mov	r0, r8
   b57c6:	f7ff fc91 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b57ca:	4658      	mov	r0, fp
   b57cc:	49a3      	ldr	r1, [pc, #652]	; (b5a5c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x690>)
   b57ce:	f7fe fc9b 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b57d2:	a8a4      	add	r0, sp, #656	; 0x290
   b57d4:	49a2      	ldr	r1, [pc, #648]	; (b5a60 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x694>)
   b57d6:	f7fe fc97 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b57da:	a8aa      	add	r0, sp, #680	; 0x2a8
   b57dc:	49a1      	ldr	r1, [pc, #644]	; (b5a64 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x698>)
   b57de:	f7fe fc93 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b57e2:	aba4      	add	r3, sp, #656	; 0x290
   b57e4:	2102      	movs	r1, #2
   b57e6:	9364      	str	r3, [sp, #400]	; 0x190
   b57e8:	f50d 79bc 	add.w	r9, sp, #376	; 0x178
   b57ec:	9165      	str	r1, [sp, #404]	; 0x194
   b57ee:	aa64      	add	r2, sp, #400	; 0x190
   b57f0:	ca06      	ldmia	r2, {r1, r2}
   b57f2:	464b      	mov	r3, r9
   b57f4:	a883      	add	r0, sp, #524	; 0x20c
   b57f6:	f7ff f82f 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b57fa:	499b      	ldr	r1, [pc, #620]	; (b5a68 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x69c>)
   b57fc:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   b57fe:	af8f      	add	r7, sp, #572	; 0x23c
   b5800:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5804:	2004      	movs	r0, #4
   b5806:	ab62      	add	r3, sp, #392	; 0x188
   b5808:	9762      	str	r7, [sp, #392]	; 0x188
   b580a:	9063      	str	r0, [sp, #396]	; 0x18c
   b580c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5810:	4630      	mov	r0, r6
   b5812:	f7ff fc6b 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway brownLineCTA = Railway(
   b5816:	a883      	add	r0, sp, #524	; 0x20c
   b5818:	e9cd b000 	strd	fp, r0, [sp]
   b581c:	a88c      	add	r0, sp, #560	; 0x230
   b581e:	4643      	mov	r3, r8
   b5820:	462a      	mov	r2, r5
   b5822:	4601      	mov	r1, r0
   b5824:	9602      	str	r6, [sp, #8]
   b5826:	4891      	ldr	r0, [pc, #580]	; (b5a6c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a0>)
   b5828:	f7ff fce0 	bl	b51ec <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b582c:	4630      	mov	r0, r6
   b582e:	f7fe ff89 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5832:	a883      	add	r0, sp, #524	; 0x20c
   b5834:	f7fe ffa7 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5838:	a8aa      	add	r0, sp, #680	; 0x2a8
   b583a:	f005 fcf9 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b583e:	a8a4      	add	r0, sp, #656	; 0x290
   b5840:	f005 fcf6 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5844:	4658      	mov	r0, fp
   b5846:	f005 fcf3 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b584a:	4640      	mov	r0, r8
   b584c:	f7fe ff7a 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5850:	4628      	mov	r0, r5
   b5852:	f7fe ff77 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5856:	a88c      	add	r0, sp, #560	; 0x230
   b5858:	f7fe ff60 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b585c:	4b84      	ldr	r3, [pc, #528]	; (b5a70 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a4>)
   b585e:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b5860:	4b84      	ldr	r3, [pc, #528]	; (b5a74 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a8>)
   b5862:	93a5      	str	r3, [sp, #660]	; 0x294
      lat = la;
   b5864:	4b84      	ldr	r3, [pc, #528]	; (b5a78 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ac>)
   b5866:	93a6      	str	r3, [sp, #664]	; 0x298
   b5868:	4b84      	ldr	r3, [pc, #528]	; (b5a7c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b0>)
   b586a:	93aa      	str	r3, [sp, #680]	; 0x2a8
      lon = lo;
   b586c:	4b84      	ldr	r3, [pc, #528]	; (b5a80 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b4>)
   b586e:	93ab      	str	r3, [sp, #684]	; 0x2ac
      lat = la;
   b5870:	4b84      	ldr	r3, [pc, #528]	; (b5a84 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b8>)
   b5872:	93ac      	str	r3, [sp, #688]	; 0x2b0
      lon = lo;
   b5874:	4b84      	ldr	r3, [pc, #528]	; (b5a88 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6bc>)
   b5876:	93ad      	str	r3, [sp, #692]	; 0x2b4
);
   b5878:	2005      	movs	r0, #5
   b587a:	aba4      	add	r3, sp, #656	; 0x290
   b587c:	9360      	str	r3, [sp, #384]	; 0x180
   b587e:	9061      	str	r0, [sp, #388]	; 0x184
   b5880:	a856      	add	r0, sp, #344	; 0x158
   b5882:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b5886:	4603      	mov	r3, r0
   b5888:	a88c      	add	r0, sp, #560	; 0x230
   b588a:	ed8d eaa7 	vstr	s28, [sp, #668]	; 0x29c
      lat = la;
   b588e:	edcd 9aa8 	vstr	s19, [sp, #672]	; 0x2a0
      lon = lo;
   b5892:	ed8d 9aa9 	vstr	s18, [sp, #676]	; 0x2a4
   b5896:	f7fe ffab 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b589a:	4b6f      	ldr	r3, [pc, #444]	; (b5a58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b589c:	f8cd b178 	str.w	fp, [sp, #376]	; 0x178
   b58a0:	461f      	mov	r7, r3
   b58a2:	3360      	adds	r3, #96	; 0x60
   b58a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b58a6:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
   b58aa:	2004      	movs	r0, #4
   b58ac:	905f      	str	r0, [sp, #380]	; 0x17c
   b58ae:	e899 0006 	ldmia.w	r9, {r1, r2}
   b58b2:	4628      	mov	r0, r5
   b58b4:	f7ff fc1a 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b58b8:	463b      	mov	r3, r7
   b58ba:	3370      	adds	r3, #112	; 0x70
   b58bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b58be:	af93      	add	r7, sp, #588	; 0x24c
   b58c0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b58c4:	2004      	movs	r0, #4
   b58c6:	ab5c      	add	r3, sp, #368	; 0x170
   b58c8:	975c      	str	r7, [sp, #368]	; 0x170
   b58ca:	905d      	str	r0, [sp, #372]	; 0x174
   b58cc:	e893 0006 	ldmia.w	r3, {r1, r2}
   b58d0:	4640      	mov	r0, r8
   b58d2:	f7ff fc0b 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b58d6:	a89d      	add	r0, sp, #628	; 0x274
   b58d8:	496c      	ldr	r1, [pc, #432]	; (b5a8c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c0>)
   b58da:	f7fe fc15 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b58de:	a8b0      	add	r0, sp, #704	; 0x2c0
   b58e0:	496b      	ldr	r1, [pc, #428]	; (b5a90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c4>)
   b58e2:	f7fe fc11 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b58e6:	a8b6      	add	r0, sp, #728	; 0x2d8
   b58e8:	496a      	ldr	r1, [pc, #424]	; (b5a94 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c8>)
   b58ea:	f7fe fc0d 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b58ee:	a8b0      	add	r0, sp, #704	; 0x2c0
   b58f0:	905a      	str	r0, [sp, #360]	; 0x168
   b58f2:	2002      	movs	r0, #2
   b58f4:	905b      	str	r0, [sp, #364]	; 0x16c
   b58f6:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
   b58fa:	aa5a      	add	r2, sp, #360	; 0x168
   b58fc:	464b      	mov	r3, r9
   b58fe:	ca06      	ldmia	r2, {r1, r2}
   b5900:	a883      	add	r0, sp, #524	; 0x20c
   b5902:	f7fe ffa9 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5906:	4b54      	ldr	r3, [pc, #336]	; (b5a58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5908:	3380      	adds	r3, #128	; 0x80
   b590a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b590c:	af8f      	add	r7, sp, #572	; 0x23c
   b590e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5912:	2004      	movs	r0, #4
   b5914:	ab58      	add	r3, sp, #352	; 0x160
   b5916:	9758      	str	r7, [sp, #352]	; 0x160
   b5918:	9059      	str	r0, [sp, #356]	; 0x164
   b591a:	e893 0006 	ldmia.w	r3, {r1, r2}
   b591e:	4630      	mov	r0, r6
   b5920:	f7ff fbe4 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLineCTA = Railway(
   b5924:	a883      	add	r0, sp, #524	; 0x20c
   b5926:	9001      	str	r0, [sp, #4]
   b5928:	a89d      	add	r0, sp, #628	; 0x274
   b592a:	9000      	str	r0, [sp, #0]
   b592c:	a88c      	add	r0, sp, #560	; 0x230
   b592e:	4643      	mov	r3, r8
   b5930:	462a      	mov	r2, r5
   b5932:	4601      	mov	r1, r0
   b5934:	9602      	str	r6, [sp, #8]
   b5936:	4858      	ldr	r0, [pc, #352]	; (b5a98 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6cc>)
   b5938:	f7ff fc58 	bl	b51ec <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b593c:	4630      	mov	r0, r6
   b593e:	f7fe ff01 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5942:	a883      	add	r0, sp, #524	; 0x20c
   b5944:	f7fe ff1f 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5948:	a8b6      	add	r0, sp, #728	; 0x2d8
   b594a:	f005 fc71 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b594e:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5950:	f005 fc6e 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5954:	a89d      	add	r0, sp, #628	; 0x274
   b5956:	f005 fc6b 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b595a:	4640      	mov	r0, r8
   b595c:	f7fe fef2 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5960:	4628      	mov	r0, r5
   b5962:	f7fe feef 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5966:	a88c      	add	r0, sp, #560	; 0x230
   b5968:	f7fe fed8 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b596c:	4b4b      	ldr	r3, [pc, #300]	; (b5a9c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d0>)
   b596e:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b5970:	4b4b      	ldr	r3, [pc, #300]	; (b5aa0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d4>)
   b5972:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b5974:	4b4b      	ldr	r3, [pc, #300]	; (b5aa4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d8>)
   b5976:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b5978:	4b4b      	ldr	r3, [pc, #300]	; (b5aa8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6dc>)
   b597a:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b597c:	4b4b      	ldr	r3, [pc, #300]	; (b5aac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e0>)
   b597e:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b5980:	4b4b      	ldr	r3, [pc, #300]	; (b5ab0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e4>)
   b5982:	93b5      	str	r3, [sp, #724]	; 0x2d4
);
   b5984:	a8b0      	add	r0, sp, #704	; 0x2c0
      lat = la;
   b5986:	4b4b      	ldr	r3, [pc, #300]	; (b5ab4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e8>)
   b5988:	9056      	str	r0, [sp, #344]	; 0x158
   b598a:	93b6      	str	r3, [sp, #728]	; 0x2d8
   b598c:	2008      	movs	r0, #8
   b598e:	4b4a      	ldr	r3, [pc, #296]	; (b5ab8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ec>)
   b5990:	9057      	str	r0, [sp, #348]	; 0x15c
   b5992:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
   b5996:	93bc      	str	r3, [sp, #752]	; 0x2f0
   b5998:	a856      	add	r0, sp, #344	; 0x158
      lon = lo;
   b599a:	4b48      	ldr	r3, [pc, #288]	; (b5abc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f0>)
   b599c:	93bd      	str	r3, [sp, #756]	; 0x2f4
   b599e:	e890 0006 	ldmia.w	r0, {r1, r2}
   b59a2:	4653      	mov	r3, sl
   b59a4:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b59a6:	edcd 8aba 	vstr	s17, [sp, #744]	; 0x2e8
      lon = lo;
   b59aa:	ed8d 8abb 	vstr	s16, [sp, #748]	; 0x2ec
   b59ae:	ed8d eab7 	vstr	s28, [sp, #732]	; 0x2dc
      lat = la;
   b59b2:	edcd 9ab8 	vstr	s19, [sp, #736]	; 0x2e0
      lon = lo;
   b59b6:	ed8d 9ab9 	vstr	s18, [sp, #740]	; 0x2e4
      lat = la;
   b59ba:	edcd aabe 	vstr	s21, [sp, #760]	; 0x2f8
      lon = lo;
   b59be:	ed8d aabf 	vstr	s20, [sp, #764]	; 0x2fc
   b59c2:	f7fe ff15 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b59c6:	4b24      	ldr	r3, [pc, #144]	; (b5a58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b59c8:	9f04      	ldr	r7, [sp, #16]
   b59ca:	f103 0c90 	add.w	ip, r3, #144	; 0x90
   b59ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b59d2:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b59d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b59da:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   b59de:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b59e2:	a89d      	add	r0, sp, #628	; 0x274
   b59e4:	9054      	str	r0, [sp, #336]	; 0x150
   b59e6:	2007      	movs	r0, #7
   b59e8:	9055      	str	r0, [sp, #340]	; 0x154
   b59ea:	e899 0006 	ldmia.w	r9, {r1, r2}
   b59ee:	4628      	mov	r0, r5
   b59f0:	f7ff fb7c 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b59f4:	4b18      	ldr	r3, [pc, #96]	; (b5a58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b59f6:	33ac      	adds	r3, #172	; 0xac
   b59f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b59fa:	af93      	add	r7, sp, #588	; 0x24c
   b59fc:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5a00:	2004      	movs	r0, #4
   b5a02:	ab52      	add	r3, sp, #328	; 0x148
   b5a04:	9752      	str	r7, [sp, #328]	; 0x148
   b5a06:	9053      	str	r0, [sp, #332]	; 0x14c
   b5a08:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5a0c:	4640      	mov	r0, r8
   b5a0e:	f7ff fb6d 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5a12:	4658      	mov	r0, fp
   b5a14:	492a      	ldr	r1, [pc, #168]	; (b5ac0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f4>)
   b5a16:	f7fe fb77 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5a1a:	a8a4      	add	r0, sp, #656	; 0x290
   b5a1c:	4929      	ldr	r1, [pc, #164]	; (b5ac4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f8>)
   b5a1e:	f7fe fb73 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5a22:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5a24:	4928      	ldr	r1, [pc, #160]	; (b5ac8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6fc>)
   b5a26:	f7fe fb6f 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5a2a:	aba4      	add	r3, sp, #656	; 0x290
   b5a2c:	2002      	movs	r0, #2
   b5a2e:	9350      	str	r3, [sp, #320]	; 0x140
   b5a30:	9051      	str	r0, [sp, #324]	; 0x144
   b5a32:	f50d 7994 	add.w	r9, sp, #296	; 0x128
   b5a36:	aa50      	add	r2, sp, #320	; 0x140
   b5a38:	464b      	mov	r3, r9
   b5a3a:	ca06      	ldmia	r2, {r1, r2}
   b5a3c:	a883      	add	r0, sp, #524	; 0x20c
   b5a3e:	f7fe ff0b 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5a42:	4b05      	ldr	r3, [pc, #20]	; (b5a58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x68c>)
   b5a44:	33bc      	adds	r3, #188	; 0xbc
   b5a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5a48:	af8f      	add	r7, sp, #572	; 0x23c
   b5a4a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5a4e:	2004      	movs	r0, #4
   b5a50:	ab4e      	add	r3, sp, #312	; 0x138
   b5a52:	974e      	str	r7, [sp, #312]	; 0x138
   b5a54:	e03a      	b.n	b5acc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x700>
   b5a56:	bf00      	nop
   b5a58:	000be630 	.word	0x000be630
   b5a5c:	000be4ed 	.word	0x000be4ed
   b5a60:	000be4f3 	.word	0x000be4f3
   b5a64:	000be4fa 	.word	0x000be4fa
   b5a68:	000be680 	.word	0x000be680
   b5a6c:	200353e0 	.word	0x200353e0
   b5a70:	42276997 	.word	0x42276997
   b5a74:	c2af40b8 	.word	0xc2af40b8
   b5a78:	422781fe 	.word	0x422781fe
   b5a7c:	42278afb 	.word	0x42278afb
   b5a80:	c2af4494 	.word	0xc2af4494
   b5a84:	42278971 	.word	0x42278971
   b5a88:	c2af6479 	.word	0xc2af6479
   b5a8c:	000be463 	.word	0x000be463
   b5a90:	000be501 	.word	0x000be501
   b5a94:	000be508 	.word	0x000be508
   b5a98:	20035544 	.word	0x20035544
   b5a9c:	4227631a 	.word	0x4227631a
   b5aa0:	c2af4bd2 	.word	0xc2af4bd2
   b5aa4:	42276ec4 	.word	0x42276ec4
   b5aa8:	c2af4115 	.word	0xc2af4115
   b5aac:	422780b5 	.word	0x422780b5
   b5ab0:	c2af4086 	.word	0xc2af4086
   b5ab4:	42278200 	.word	0x42278200
   b5ab8:	422781e1 	.word	0x422781e1
   b5abc:	c2af4476 	.word	0xc2af4476
   b5ac0:	000be50f 	.word	0x000be50f
   b5ac4:	000be516 	.word	0x000be516
   b5ac8:	000be51d 	.word	0x000be51d
   b5acc:	904f      	str	r0, [sp, #316]	; 0x13c
   b5ace:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5ad2:	4630      	mov	r0, r6
   b5ad4:	f7ff fb0a 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLineCTA = Railway(
   b5ad8:	a883      	add	r0, sp, #524	; 0x20c
   b5ada:	e9cd b000 	strd	fp, r0, [sp]
   b5ade:	a88c      	add	r0, sp, #560	; 0x230
   b5ae0:	4643      	mov	r3, r8
   b5ae2:	462a      	mov	r2, r5
   b5ae4:	4601      	mov	r1, r0
   b5ae6:	9602      	str	r6, [sp, #8]
   b5ae8:	48ba      	ldr	r0, [pc, #744]	; (b5dd4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa08>)
   b5aea:	f7ff fb7f 	bl	b51ec <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5aee:	4630      	mov	r0, r6
   b5af0:	f7fe fe28 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5af4:	a883      	add	r0, sp, #524	; 0x20c
   b5af6:	f7fe fe46 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5afa:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5afc:	f005 fb98 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b00:	a8a4      	add	r0, sp, #656	; 0x290
   b5b02:	f005 fb95 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b06:	4658      	mov	r0, fp
   b5b08:	f005 fb92 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5b0c:	4640      	mov	r0, r8
   b5b0e:	f7fe fe19 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5b12:	4628      	mov	r0, r5
   b5b14:	f7fe fe16 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5b18:	a88c      	add	r0, sp, #560	; 0x230
   b5b1a:	f7fe fdff 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b5b1e:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5b20:	904c      	str	r0, [sp, #304]	; 0x130
   b5b22:	2007      	movs	r0, #7
   b5b24:	904d      	str	r0, [sp, #308]	; 0x134
   b5b26:	a842      	add	r0, sp, #264	; 0x108
   b5b28:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b5b2c:	4603      	mov	r3, r0
   b5b2e:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b5b30:	edcd 8ab4 	vstr	s17, [sp, #720]	; 0x2d0
      lon = lo;
   b5b34:	ed8d 8ab5 	vstr	s16, [sp, #724]	; 0x2d4
      lat = la;
   b5b38:	edcd 8abc 	vstr	s17, [sp, #752]	; 0x2f0
      lon = lo;
   b5b3c:	ed8d 8abd 	vstr	s16, [sp, #756]	; 0x2f4
      lat = la;
   b5b40:	edcd dab0 	vstr	s27, [sp, #704]	; 0x2c0
      lon = lo;
   b5b44:	ed8d dab1 	vstr	s26, [sp, #708]	; 0x2c4
      lat = la;
   b5b48:	edcd cab2 	vstr	s25, [sp, #712]	; 0x2c8
      lon = lo;
   b5b4c:	ed8d cab3 	vstr	s24, [sp, #716]	; 0x2cc
      lat = la;
   b5b50:	edcd bab6 	vstr	s23, [sp, #728]	; 0x2d8
      lon = lo;
   b5b54:	ed8d bab7 	vstr	s22, [sp, #732]	; 0x2dc
      lat = la;
   b5b58:	edcd aab8 	vstr	s21, [sp, #736]	; 0x2e0
      lon = lo;
   b5b5c:	ed8d aab9 	vstr	s20, [sp, #740]	; 0x2e4
      lat = la;
   b5b60:	edcd 9aba 	vstr	s19, [sp, #744]	; 0x2e8
      lon = lo;
   b5b64:	ed8d 9abb 	vstr	s18, [sp, #748]	; 0x2ec
   b5b68:	f7fe fe42 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5b6c:	4a9a      	ldr	r2, [pc, #616]	; (b5dd8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa0c>)
   b5b6e:	9f04      	ldr	r7, [sp, #16]
   b5b70:	f1a2 0e18 	sub.w	lr, r2, #24
   b5b74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b5b78:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
   b5b7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5b80:	9805      	ldr	r0, [sp, #20]
   b5b82:	c803      	ldmia	r0, {r0, r1}
   b5b84:	e887 0003 	stmia.w	r7, {r0, r1}
   b5b88:	a89d      	add	r0, sp, #628	; 0x274
   b5b8a:	904a      	str	r0, [sp, #296]	; 0x128
   b5b8c:	2006      	movs	r0, #6
   b5b8e:	904b      	str	r0, [sp, #300]	; 0x12c
   b5b90:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5b94:	4628      	mov	r0, r5
   b5b96:	f7ff faa9 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5b9a:	4a8f      	ldr	r2, [pc, #572]	; (b5dd8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa0c>)
   b5b9c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b5b9e:	af93      	add	r7, sp, #588	; 0x24c
   b5ba0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5ba4:	2204      	movs	r2, #4
   b5ba6:	ab48      	add	r3, sp, #288	; 0x120
   b5ba8:	9748      	str	r7, [sp, #288]	; 0x120
   b5baa:	9249      	str	r2, [sp, #292]	; 0x124
   b5bac:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5bb0:	4640      	mov	r0, r8
   b5bb2:	f7ff fa9b 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5bb6:	4658      	mov	r0, fp
   b5bb8:	4988      	ldr	r1, [pc, #544]	; (b5ddc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa10>)
   b5bba:	f7fe faa5 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5bbe:	a8a4      	add	r0, sp, #656	; 0x290
   b5bc0:	4987      	ldr	r1, [pc, #540]	; (b5de0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa14>)
   b5bc2:	f7fe faa1 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5bc6:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5bc8:	4986      	ldr	r1, [pc, #536]	; (b5de4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa18>)
   b5bca:	f7fe fa9d 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5bce:	aba4      	add	r3, sp, #656	; 0x290
   b5bd0:	2002      	movs	r0, #2
   b5bd2:	9346      	str	r3, [sp, #280]	; 0x118
   b5bd4:	9047      	str	r0, [sp, #284]	; 0x11c
   b5bd6:	f50d 7980 	add.w	r9, sp, #256	; 0x100
   b5bda:	aa46      	add	r2, sp, #280	; 0x118
   b5bdc:	ca06      	ldmia	r2, {r1, r2}
   b5bde:	464b      	mov	r3, r9
   b5be0:	a883      	add	r0, sp, #524	; 0x20c
   b5be2:	f7fe fe39 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5be6:	4980      	ldr	r1, [pc, #512]	; (b5de8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa1c>)
   b5be8:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   b5bea:	af8f      	add	r7, sp, #572	; 0x23c
   b5bec:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5bf0:	2204      	movs	r2, #4
   b5bf2:	ab44      	add	r3, sp, #272	; 0x110
   b5bf4:	9744      	str	r7, [sp, #272]	; 0x110
   b5bf6:	9245      	str	r2, [sp, #276]	; 0x114
   b5bf8:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5bfc:	4630      	mov	r0, r6
   b5bfe:	f7ff fa75 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway purpleLineCTA = Railway(
   b5c02:	aa83      	add	r2, sp, #524	; 0x20c
   b5c04:	4643      	mov	r3, r8
   b5c06:	a98c      	add	r1, sp, #560	; 0x230
   b5c08:	e9cd b200 	strd	fp, r2, [sp]
   b5c0c:	9602      	str	r6, [sp, #8]
   b5c0e:	462a      	mov	r2, r5
   b5c10:	4876      	ldr	r0, [pc, #472]	; (b5dec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa20>)
   b5c12:	f7ff faeb 	bl	b51ec <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5c16:	4630      	mov	r0, r6
   b5c18:	f7fe fd94 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5c1c:	a883      	add	r0, sp, #524	; 0x20c
   b5c1e:	f7fe fdb2 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5c22:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5c24:	f005 fb04 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5c28:	a8a4      	add	r0, sp, #656	; 0x290
   b5c2a:	f005 fb01 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5c2e:	4658      	mov	r0, fp
   b5c30:	f005 fafe 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5c34:	4640      	mov	r0, r8
   b5c36:	f7fe fd85 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5c3a:	4628      	mov	r0, r5
   b5c3c:	f7fe fd82 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5c40:	a88c      	add	r0, sp, #560	; 0x230
   b5c42:	f7fe fd6b 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5c46:	4b6a      	ldr	r3, [pc, #424]	; (b5df0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa24>)
   b5c48:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b5c4a:	4b6a      	ldr	r3, [pc, #424]	; (b5df4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa28>)
   b5c4c:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b5c4e:	4b6a      	ldr	r3, [pc, #424]	; (b5df8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa2c>)
   b5c50:	93b2      	str	r3, [sp, #712]	; 0x2c8
);
   b5c52:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b5c54:	4b69      	ldr	r3, [pc, #420]	; (b5dfc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa30>)
   b5c56:	9242      	str	r2, [sp, #264]	; 0x108
   b5c58:	93b3      	str	r3, [sp, #716]	; 0x2cc
   b5c5a:	2208      	movs	r2, #8
      lat = la;
   b5c5c:	4b68      	ldr	r3, [pc, #416]	; (b5e00 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa34>)
   b5c5e:	9243      	str	r2, [sp, #268]	; 0x10c
   b5c60:	f10d 0ae0 	add.w	sl, sp, #224	; 0xe0
   b5c64:	93b4      	str	r3, [sp, #720]	; 0x2d0
   b5c66:	aa42      	add	r2, sp, #264	; 0x108
      lon = lo;
   b5c68:	4b66      	ldr	r3, [pc, #408]	; (b5e04 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa38>)
   b5c6a:	93b5      	str	r3, [sp, #724]	; 0x2d4
   b5c6c:	ca06      	ldmia	r2, {r1, r2}
   b5c6e:	4653      	mov	r3, sl
   b5c70:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b5c72:	edcd 8ab6 	vstr	s17, [sp, #728]	; 0x2d8
      lon = lo;
   b5c76:	ed8d 8ab7 	vstr	s16, [sp, #732]	; 0x2dc
      lat = la;
   b5c7a:	edcd 8abe 	vstr	s17, [sp, #760]	; 0x2f8
      lon = lo;
   b5c7e:	ed8d 8abf 	vstr	s16, [sp, #764]	; 0x2fc
      lat = la;
   b5c82:	edcd 9ab8 	vstr	s19, [sp, #736]	; 0x2e0
      lon = lo;
   b5c86:	ed8d 9ab9 	vstr	s18, [sp, #740]	; 0x2e4
      lat = la;
   b5c8a:	edcd aaba 	vstr	s21, [sp, #744]	; 0x2e8
      lon = lo;
   b5c8e:	ed8d aabb 	vstr	s20, [sp, #748]	; 0x2ec
      lat = la;
   b5c92:	edcd babc 	vstr	s23, [sp, #752]	; 0x2f0
      lon = lo;
   b5c96:	ed8d babd 	vstr	s22, [sp, #756]	; 0x2f4
   b5c9a:	f7fe fda9 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5c9e:	4b5a      	ldr	r3, [pc, #360]	; (b5e08 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b5ca0:	9f04      	ldr	r7, [sp, #16]
      lat = la;
   b5ca2:	eddf 8a5a 	vldr	s17, [pc, #360]	; b5e0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa40>
      lon = lo;
   b5ca6:	ed9f 8a5a 	vldr	s16, [pc, #360]	; b5e10 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa44>
   b5caa:	f103 0ccc 	add.w	ip, r3, #204	; 0xcc
   b5cae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5cb2:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b5cb6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5cba:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   b5cbe:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b5cc2:	aa9d      	add	r2, sp, #628	; 0x274
   b5cc4:	9240      	str	r2, [sp, #256]	; 0x100
   b5cc6:	2207      	movs	r2, #7
   b5cc8:	9241      	str	r2, [sp, #260]	; 0x104
   b5cca:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5cce:	4628      	mov	r0, r5
   b5cd0:	f7ff fa0c 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5cd4:	4b4c      	ldr	r3, [pc, #304]	; (b5e08 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b5cd6:	33e8      	adds	r3, #232	; 0xe8
   b5cd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5cda:	af93      	add	r7, sp, #588	; 0x24c
   b5cdc:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5ce0:	2204      	movs	r2, #4
   b5ce2:	ab3e      	add	r3, sp, #248	; 0xf8
   b5ce4:	973e      	str	r7, [sp, #248]	; 0xf8
   b5ce6:	923f      	str	r2, [sp, #252]	; 0xfc
   b5ce8:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5cec:	4640      	mov	r0, r8
   b5cee:	f7ff f9fd 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5cf2:	4658      	mov	r0, fp
   b5cf4:	4947      	ldr	r1, [pc, #284]	; (b5e14 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa48>)
   b5cf6:	f7fe fa07 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5cfa:	a8a4      	add	r0, sp, #656	; 0x290
   b5cfc:	4946      	ldr	r1, [pc, #280]	; (b5e18 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa4c>)
   b5cfe:	f7fe fa03 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5d02:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5d04:	4945      	ldr	r1, [pc, #276]	; (b5e1c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa50>)
   b5d06:	f7fe f9ff 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5d0a:	aba4      	add	r3, sp, #656	; 0x290
   b5d0c:	2102      	movs	r1, #2
   b5d0e:	933c      	str	r3, [sp, #240]	; 0xf0
   b5d10:	f10d 09d8 	add.w	r9, sp, #216	; 0xd8
   b5d14:	913d      	str	r1, [sp, #244]	; 0xf4
   b5d16:	aa3c      	add	r2, sp, #240	; 0xf0
   b5d18:	464b      	mov	r3, r9
   b5d1a:	ca06      	ldmia	r2, {r1, r2}
   b5d1c:	a883      	add	r0, sp, #524	; 0x20c
   b5d1e:	f7fe fd9b 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5d22:	4b39      	ldr	r3, [pc, #228]	; (b5e08 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b5d24:	33f8      	adds	r3, #248	; 0xf8
   b5d26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5d28:	af8f      	add	r7, sp, #572	; 0x23c
   b5d2a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b5d2e:	2204      	movs	r2, #4
   b5d30:	ab3a      	add	r3, sp, #232	; 0xe8
   b5d32:	973a      	str	r7, [sp, #232]	; 0xe8
   b5d34:	923b      	str	r2, [sp, #236]	; 0xec
   b5d36:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5d3a:	4630      	mov	r0, r6
   b5d3c:	f7ff f9d6 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway pinkLineCTA = Railway(
   b5d40:	aa83      	add	r2, sp, #524	; 0x20c
   b5d42:	4643      	mov	r3, r8
   b5d44:	a98c      	add	r1, sp, #560	; 0x230
   b5d46:	e9cd b200 	strd	fp, r2, [sp]
   b5d4a:	9602      	str	r6, [sp, #8]
   b5d4c:	462a      	mov	r2, r5
   b5d4e:	4834      	ldr	r0, [pc, #208]	; (b5e20 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa54>)
   b5d50:	f7ff fa4c 	bl	b51ec <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5d54:	4630      	mov	r0, r6
   b5d56:	f7fe fcf5 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5d5a:	a883      	add	r0, sp, #524	; 0x20c
   b5d5c:	f7fe fd13 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5d60:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5d62:	f005 fa65 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5d66:	a8a4      	add	r0, sp, #656	; 0x290
   b5d68:	f005 fa62 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5d6c:	4658      	mov	r0, fp
   b5d6e:	f005 fa5f 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5d72:	4640      	mov	r0, r8
   b5d74:	f7fe fce6 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5d78:	4628      	mov	r0, r5
   b5d7a:	f7fe fce3 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5d7e:	a88c      	add	r0, sp, #560	; 0x230
   b5d80:	f7fe fccc 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5d84:	4b27      	ldr	r3, [pc, #156]	; (b5e24 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa58>)
   b5d86:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b5d88:	4b27      	ldr	r3, [pc, #156]	; (b5e28 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa5c>)
   b5d8a:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b5d8c:	4b27      	ldr	r3, [pc, #156]	; (b5e2c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa60>)
   b5d8e:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b5d90:	4b27      	ldr	r3, [pc, #156]	; (b5e30 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa64>)
   b5d92:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b5d94:	4b27      	ldr	r3, [pc, #156]	; (b5e34 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa68>)
   b5d96:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b5d98:	4b27      	ldr	r3, [pc, #156]	; (b5e38 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa6c>)
   b5d9a:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b5d9c:	4b27      	ldr	r3, [pc, #156]	; (b5e3c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa70>)
   b5d9e:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b5da0:	4b27      	ldr	r3, [pc, #156]	; (b5e40 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa74>)
   b5da2:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b5da4:	4b27      	ldr	r3, [pc, #156]	; (b5e44 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa78>)
   b5da6:	93b8      	str	r3, [sp, #736]	; 0x2e0
      lon = lo;
   b5da8:	4b27      	ldr	r3, [pc, #156]	; (b5e48 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa7c>)
   b5daa:	93b9      	str	r3, [sp, #740]	; 0x2e4
      lat = la;
   b5dac:	4b27      	ldr	r3, [pc, #156]	; (b5e4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa80>)
   b5dae:	93ba      	str	r3, [sp, #744]	; 0x2e8
};
   b5db0:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b5db2:	4b27      	ldr	r3, [pc, #156]	; (b5e50 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa84>)
   b5db4:	9238      	str	r2, [sp, #224]	; 0xe0
   b5db6:	93bb      	str	r3, [sp, #748]	; 0x2ec
   b5db8:	2207      	movs	r2, #7
      lat = la;
   b5dba:	4b26      	ldr	r3, [pc, #152]	; (b5e54 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa88>)
   b5dbc:	9239      	str	r2, [sp, #228]	; 0xe4
   b5dbe:	93bc      	str	r3, [sp, #752]	; 0x2f0
   b5dc0:	aa2e      	add	r2, sp, #184	; 0xb8
      lon = lo;
   b5dc2:	4b25      	ldr	r3, [pc, #148]	; (b5e58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa8c>)
   b5dc4:	93bd      	str	r3, [sp, #756]	; 0x2f4
   b5dc6:	a88c      	add	r0, sp, #560	; 0x230
   b5dc8:	4613      	mov	r3, r2
   b5dca:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b5dce:	f7fe fd0f 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5dd2:	e043      	b.n	b5e5c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa90>
   b5dd4:	20037de0 	.word	0x20037de0
   b5dd8:	000be670 	.word	0x000be670
   b5ddc:	000be524 	.word	0x000be524
   b5de0:	000be52b 	.word	0x000be52b
   b5de4:	000be532 	.word	0x000be532
   b5de8:	000be680 	.word	0x000be680
   b5dec:	2003e4f0 	.word	0x2003e4f0
   b5df0:	42276a76 	.word	0x42276a76
   b5df4:	c2af692b 	.word	0xc2af692b
   b5df8:	42276b5f 	.word	0x42276b5f
   b5dfc:	c2af56cd 	.word	0xc2af56cd
   b5e00:	42278a2d 	.word	0x42278a2d
   b5e04:	c2af56d8 	.word	0xc2af56d8
   b5e08:	000be630 	.word	0x000be630
   b5e0c:	42296602 	.word	0x42296602
   b5e10:	c28e2881 	.word	0xc28e2881
   b5e14:	000be539 	.word	0x000be539
   b5e18:	000be53e 	.word	0x000be53e
   b5e1c:	000be545 	.word	0x000be545
   b5e20:	2003e484 	.word	0x2003e484
   b5e24:	4229481b 	.word	0x4229481b
   b5e28:	c28e1ab2 	.word	0xc28e1ab2
   b5e2c:	42294f83 	.word	0x42294f83
   b5e30:	c28e1d93 	.word	0xc28e1d93
   b5e34:	422960e6 	.word	0x422960e6
   b5e38:	c28e1d2d 	.word	0xc28e1d2d
   b5e3c:	422966f9 	.word	0x422966f9
   b5e40:	c28e1af0 	.word	0xc28e1af0
   b5e44:	422971a5 	.word	0x422971a5
   b5e48:	c28e23e6 	.word	0xc28e23e6
   b5e4c:	42297437 	.word	0x42297437
   b5e50:	c28e3373 	.word	0xc28e3373
   b5e54:	42297d7a 	.word	0x42297d7a
   b5e58:	c28e3b5d 	.word	0xc28e3b5d
   b5e5c:	4bb1      	ldr	r3, [pc, #708]	; (b6124 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd58>)
   b5e5e:	f503 7c84 	add.w	ip, r3, #264	; 0x108
   b5e62:	461f      	mov	r7, r3
   b5e64:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5e68:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b5e6c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5e70:	e89c 0003 	ldmia.w	ip, {r0, r1}
   b5e74:	9a04      	ldr	r2, [sp, #16]
   b5e76:	e882 0003 	stmia.w	r2, {r0, r1}
   b5e7a:	aa9d      	add	r2, sp, #628	; 0x274
   b5e7c:	9236      	str	r2, [sp, #216]	; 0xd8
   b5e7e:	2206      	movs	r2, #6
   b5e80:	9237      	str	r2, [sp, #220]	; 0xdc
   b5e82:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5e86:	4628      	mov	r0, r5
   b5e88:	f7ff f930 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5e8c:	aa93      	add	r2, sp, #588	; 0x24c
   b5e8e:	9234      	str	r2, [sp, #208]	; 0xd0
   b5e90:	2332      	movs	r3, #50	; 0x32
   b5e92:	2204      	movs	r2, #4
   b5e94:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b5e98:	9235      	str	r2, [sp, #212]	; 0xd4
   b5e9a:	ab34      	add	r3, sp, #208	; 0xd0
   b5e9c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5ea0:	4640      	mov	r0, r8
   b5ea2:	9493      	str	r4, [sp, #588]	; 0x24c
   b5ea4:	9496      	str	r4, [sp, #600]	; 0x258
   b5ea6:	f7ff f921 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5eaa:	4658      	mov	r0, fp
   b5eac:	499e      	ldr	r1, [pc, #632]	; (b6128 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd5c>)
   b5eae:	f7fe f92b 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5eb2:	a8a4      	add	r0, sp, #656	; 0x290
   b5eb4:	499d      	ldr	r1, [pc, #628]	; (b612c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd60>)
   b5eb6:	f7fe f927 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5eba:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5ebc:	499c      	ldr	r1, [pc, #624]	; (b6130 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd64>)
   b5ebe:	f7fe f923 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5ec2:	aba4      	add	r3, sp, #656	; 0x290
   b5ec4:	2102      	movs	r1, #2
   b5ec6:	9332      	str	r3, [sp, #200]	; 0xc8
   b5ec8:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
   b5ecc:	9133      	str	r1, [sp, #204]	; 0xcc
   b5ece:	aa32      	add	r2, sp, #200	; 0xc8
   b5ed0:	464b      	mov	r3, r9
   b5ed2:	ca06      	ldmia	r2, {r1, r2}
   b5ed4:	a883      	add	r0, sp, #524	; 0x20c
   b5ed6:	f7fe fcbf 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5eda:	4621      	mov	r1, r4
   b5edc:	2210      	movs	r2, #16
   b5ede:	a88f      	add	r0, sp, #572	; 0x23c
   b5ee0:	f006 f97e 	bl	bc1e0 <memset>
   b5ee4:	aa8f      	add	r2, sp, #572	; 0x23c
   b5ee6:	9230      	str	r2, [sp, #192]	; 0xc0
   b5ee8:	2204      	movs	r2, #4
   b5eea:	ab30      	add	r3, sp, #192	; 0xc0
   b5eec:	9231      	str	r2, [sp, #196]	; 0xc4
   b5eee:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5ef2:	4630      	mov	r0, r6
   b5ef4:	f7ff f8fa 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLineMBTA = Railway{
   b5ef8:	aa83      	add	r2, sp, #524	; 0x20c
   b5efa:	4643      	mov	r3, r8
   b5efc:	a98c      	add	r1, sp, #560	; 0x230
   b5efe:	e9cd b200 	strd	fp, r2, [sp]
   b5f02:	9602      	str	r6, [sp, #8]
   b5f04:	462a      	mov	r2, r5
   b5f06:	488b      	ldr	r0, [pc, #556]	; (b6134 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd68>)
   b5f08:	f7ff f970 	bl	b51ec <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5f0c:	4630      	mov	r0, r6
   b5f0e:	f7fe fc19 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b5f12:	a883      	add	r0, sp, #524	; 0x20c
   b5f14:	f7fe fc37 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5f18:	a8aa      	add	r0, sp, #680	; 0x2a8
   b5f1a:	f005 f989 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5f1e:	a8a4      	add	r0, sp, #656	; 0x290
   b5f20:	f005 f986 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5f24:	4658      	mov	r0, fp
   b5f26:	f005 f983 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5f2a:	4640      	mov	r0, r8
   b5f2c:	f7fe fc0a 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5f30:	4628      	mov	r0, r5
   b5f32:	f7fe fc07 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5f36:	a88c      	add	r0, sp, #560	; 0x230
   b5f38:	f7fe fbf0 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5f3c:	4b7e      	ldr	r3, [pc, #504]	; (b6138 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd6c>)
   b5f3e:	93a4      	str	r3, [sp, #656]	; 0x290
      lon = lo;
   b5f40:	4b7e      	ldr	r3, [pc, #504]	; (b613c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd70>)
   b5f42:	93a5      	str	r3, [sp, #660]	; 0x294
      lat = la;
   b5f44:	4b7e      	ldr	r3, [pc, #504]	; (b6140 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd74>)
   b5f46:	93a6      	str	r3, [sp, #664]	; 0x298
      lon = lo;
   b5f48:	4b7e      	ldr	r3, [pc, #504]	; (b6144 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd78>)
   b5f4a:	93a7      	str	r3, [sp, #668]	; 0x29c
      lat = la;
   b5f4c:	4b7e      	ldr	r3, [pc, #504]	; (b6148 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd7c>)
   b5f4e:	93a8      	str	r3, [sp, #672]	; 0x2a0
      lon = lo;
   b5f50:	4b7e      	ldr	r3, [pc, #504]	; (b614c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd80>)
   b5f52:	93a9      	str	r3, [sp, #676]	; 0x2a4
      lat = la;
   b5f54:	4b7e      	ldr	r3, [pc, #504]	; (b6150 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd84>)
   b5f56:	93aa      	str	r3, [sp, #680]	; 0x2a8
      lon = lo;
   b5f58:	4b7e      	ldr	r3, [pc, #504]	; (b6154 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd88>)
   b5f5a:	93ab      	str	r3, [sp, #684]	; 0x2ac
};
   b5f5c:	2204      	movs	r2, #4
   b5f5e:	aba4      	add	r3, sp, #656	; 0x290
   b5f60:	932e      	str	r3, [sp, #184]	; 0xb8
   b5f62:	922f      	str	r2, [sp, #188]	; 0xbc
   b5f64:	f10d 0a90 	add.w	sl, sp, #144	; 0x90
   b5f68:	aa2e      	add	r2, sp, #184	; 0xb8
   b5f6a:	4653      	mov	r3, sl
   b5f6c:	ca06      	ldmia	r2, {r1, r2}
   b5f6e:	a88f      	add	r0, sp, #572	; 0x23c
   b5f70:	f7fe fc3e 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5f74:	f507 7390 	add.w	r3, r7, #288	; 0x120
   b5f78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   b5f7c:	2303      	movs	r3, #3
   b5f7e:	952c      	str	r5, [sp, #176]	; 0xb0
   b5f80:	932d      	str	r3, [sp, #180]	; 0xb4
   b5f82:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   b5f86:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5f8a:	a88c      	add	r0, sp, #560	; 0x230
   b5f8c:	f7ff f8ae 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5f90:	2228      	movs	r2, #40	; 0x28
   b5f92:	e9cd 2498 	strd	r2, r4, [sp, #608]	; 0x260
   b5f96:	2204      	movs	r2, #4
   b5f98:	ab2a      	add	r3, sp, #168	; 0xa8
   b5f9a:	f8cd b0a8 	str.w	fp, [sp, #168]	; 0xa8
   b5f9e:	922b      	str	r2, [sp, #172]	; 0xac
   b5fa0:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5fa4:	4640      	mov	r0, r8
   b5fa6:	9497      	str	r4, [sp, #604]	; 0x25c
   b5fa8:	949a      	str	r4, [sp, #616]	; 0x268
   b5faa:	f7ff f89f 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5fae:	a89d      	add	r0, sp, #628	; 0x274
   b5fb0:	4969      	ldr	r1, [pc, #420]	; (b6158 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd8c>)
   b5fb2:	f7fe f8a9 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5fb6:	a8b0      	add	r0, sp, #704	; 0x2c0
   b5fb8:	4968      	ldr	r1, [pc, #416]	; (b615c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd90>)
   b5fba:	f7fe f8a5 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5fbe:	a8b6      	add	r0, sp, #728	; 0x2d8
   b5fc0:	4967      	ldr	r1, [pc, #412]	; (b6160 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd94>)
   b5fc2:	f7fe f8a1 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5fc6:	a9b0      	add	r1, sp, #704	; 0x2c0
   b5fc8:	9128      	str	r1, [sp, #160]	; 0xa0
   b5fca:	2102      	movs	r1, #2
   b5fcc:	f10d 0988 	add.w	r9, sp, #136	; 0x88
   b5fd0:	9129      	str	r1, [sp, #164]	; 0xa4
   b5fd2:	aa28      	add	r2, sp, #160	; 0xa0
   b5fd4:	464b      	mov	r3, r9
   b5fd6:	ca06      	ldmia	r2, {r1, r2}
   b5fd8:	a883      	add	r0, sp, #524	; 0x20c
   b5fda:	f7fe fc3d 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5fde:	4621      	mov	r1, r4
   b5fe0:	2210      	movs	r2, #16
   b5fe2:	a893      	add	r0, sp, #588	; 0x24c
   b5fe4:	f006 f8fc 	bl	bc1e0 <memset>
   b5fe8:	aa93      	add	r2, sp, #588	; 0x24c
   b5fea:	9226      	str	r2, [sp, #152]	; 0x98
   b5fec:	2204      	movs	r2, #4
   b5fee:	ab26      	add	r3, sp, #152	; 0x98
   b5ff0:	9227      	str	r2, [sp, #156]	; 0x9c
   b5ff2:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5ff6:	4630      	mov	r0, r6
   b5ff8:	f7ff f878 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLineMBTA = Railway{
   b5ffc:	aa83      	add	r2, sp, #524	; 0x20c
   b5ffe:	9201      	str	r2, [sp, #4]
   b6000:	aa9d      	add	r2, sp, #628	; 0x274
   b6002:	4643      	mov	r3, r8
   b6004:	a98f      	add	r1, sp, #572	; 0x23c
   b6006:	9602      	str	r6, [sp, #8]
   b6008:	9200      	str	r2, [sp, #0]
   b600a:	4856      	ldr	r0, [pc, #344]	; (b6164 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd98>)
   b600c:	aa8c      	add	r2, sp, #560	; 0x230
   b600e:	f7ff f8ed 	bl	b51ec <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b6012:	4630      	mov	r0, r6
   b6014:	f7fe fb96 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b6018:	a883      	add	r0, sp, #524	; 0x20c
   b601a:	f7fe fbb4 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b601e:	a8b6      	add	r0, sp, #728	; 0x2d8
   b6020:	f005 f906 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6024:	a8b0      	add	r0, sp, #704	; 0x2c0
   b6026:	f005 f903 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b602a:	a89d      	add	r0, sp, #628	; 0x274
   b602c:	f005 f900 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6030:	4640      	mov	r0, r8
   b6032:	f7fe fb87 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6036:	a88c      	add	r0, sp, #560	; 0x230
   b6038:	f7fe fb84 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b603c:	a88f      	add	r0, sp, #572	; 0x23c
   b603e:	f7fe fb6d 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b6042:	4b49      	ldr	r3, [pc, #292]	; (b6168 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd9c>)
   b6044:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b6046:	4b49      	ldr	r3, [pc, #292]	; (b616c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xda0>)
   b6048:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b604a:	4b49      	ldr	r3, [pc, #292]	; (b6170 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xda4>)
   b604c:	93b2      	str	r3, [sp, #712]	; 0x2c8
      lon = lo;
   b604e:	4b49      	ldr	r3, [pc, #292]	; (b6174 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xda8>)
   b6050:	93b3      	str	r3, [sp, #716]	; 0x2cc
      lat = la;
   b6052:	4b49      	ldr	r3, [pc, #292]	; (b6178 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdac>)
   b6054:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b6056:	4b49      	ldr	r3, [pc, #292]	; (b617c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdb0>)
   b6058:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b605a:	4b49      	ldr	r3, [pc, #292]	; (b6180 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdb4>)
   b605c:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b605e:	4b49      	ldr	r3, [pc, #292]	; (b6184 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdb8>)
   b6060:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b6062:	4b49      	ldr	r3, [pc, #292]	; (b6188 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdbc>)
   b6064:	93b8      	str	r3, [sp, #736]	; 0x2e0
};
   b6066:	aab0      	add	r2, sp, #704	; 0x2c0
      lon = lo;
   b6068:	4b48      	ldr	r3, [pc, #288]	; (b618c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdc0>)
   b606a:	9224      	str	r2, [sp, #144]	; 0x90
   b606c:	93b9      	str	r3, [sp, #740]	; 0x2e4
   b606e:	2206      	movs	r2, #6
      lat = la;
   b6070:	4b47      	ldr	r3, [pc, #284]	; (b6190 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdc4>)
   b6072:	9225      	str	r2, [sp, #148]	; 0x94
   b6074:	93ba      	str	r3, [sp, #744]	; 0x2e8
   b6076:	aa1a      	add	r2, sp, #104	; 0x68
      lon = lo;
   b6078:	4b46      	ldr	r3, [pc, #280]	; (b6194 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdc8>)
   b607a:	93bb      	str	r3, [sp, #748]	; 0x2ec
   b607c:	a88c      	add	r0, sp, #560	; 0x230
   b607e:	4613      	mov	r3, r2
   b6080:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b6084:	f7fe fbb4 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b6088:	4b26      	ldr	r3, [pc, #152]	; (b6124 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xd58>)
   b608a:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
   b608e:	f503 7c96 	add.w	ip, r3, #300	; 0x12c
   b6092:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6096:	465f      	mov	r7, fp
   b6098:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b609a:	f8dc 3000 	ldr.w	r3, [ip]
   b609e:	603b      	str	r3, [r7, #0]
   b60a0:	2305      	movs	r3, #5
   b60a2:	9323      	str	r3, [sp, #140]	; 0x8c
   b60a4:	e899 0006 	ldmia.w	r9, {r1, r2}
   b60a8:	4628      	mov	r0, r5
   b60aa:	f7ff f81f 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b60ae:	aa93      	add	r2, sp, #588	; 0x24c
   b60b0:	9220      	str	r2, [sp, #128]	; 0x80
   b60b2:	232d      	movs	r3, #45	; 0x2d
   b60b4:	2204      	movs	r2, #4
   b60b6:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b60ba:	9221      	str	r2, [sp, #132]	; 0x84
   b60bc:	ab20      	add	r3, sp, #128	; 0x80
   b60be:	e893 0006 	ldmia.w	r3, {r1, r2}
   b60c2:	4640      	mov	r0, r8
   b60c4:	9493      	str	r4, [sp, #588]	; 0x24c
   b60c6:	9496      	str	r4, [sp, #600]	; 0x258
   b60c8:	f7ff f810 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b60cc:	a89d      	add	r0, sp, #628	; 0x274
   b60ce:	4932      	ldr	r1, [pc, #200]	; (b6198 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdcc>)
   b60d0:	f7fe f81a 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b60d4:	a8a4      	add	r0, sp, #656	; 0x290
   b60d6:	4931      	ldr	r1, [pc, #196]	; (b619c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdd0>)
   b60d8:	f7fe f816 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b60dc:	a8aa      	add	r0, sp, #680	; 0x2a8
   b60de:	4930      	ldr	r1, [pc, #192]	; (b61a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdd4>)
   b60e0:	f7fe f812 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b60e4:	aba4      	add	r3, sp, #656	; 0x290
   b60e6:	931e      	str	r3, [sp, #120]	; 0x78
   b60e8:	2302      	movs	r3, #2
   b60ea:	931f      	str	r3, [sp, #124]	; 0x7c
   b60ec:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
   b60f0:	aa1e      	add	r2, sp, #120	; 0x78
   b60f2:	4653      	mov	r3, sl
   b60f4:	ca06      	ldmia	r2, {r1, r2}
   b60f6:	a883      	add	r0, sp, #524	; 0x20c
   b60f8:	f7fe fbae 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b60fc:	4621      	mov	r1, r4
   b60fe:	2210      	movs	r2, #16
   b6100:	a88f      	add	r0, sp, #572	; 0x23c
   b6102:	f006 f86d 	bl	bc1e0 <memset>
   b6106:	aa8f      	add	r2, sp, #572	; 0x23c
   b6108:	921c      	str	r2, [sp, #112]	; 0x70
   b610a:	2204      	movs	r2, #4
   b610c:	ab1c      	add	r3, sp, #112	; 0x70
   b610e:	921d      	str	r2, [sp, #116]	; 0x74
   b6110:	e893 0006 	ldmia.w	r3, {r1, r2}
   b6114:	4630      	mov	r0, r6
   b6116:	f7fe ffe9 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLineMBTA = Railway{
   b611a:	ab83      	add	r3, sp, #524	; 0x20c
   b611c:	9301      	str	r3, [sp, #4]
   b611e:	ab9d      	add	r3, sp, #628	; 0x274
   b6120:	e040      	b.n	b61a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xdd8>
   b6122:	bf00      	nop
   b6124:	000be630 	.word	0x000be630
   b6128:	000be4c8 	.word	0x000be4c8
   b612c:	000be4cc 	.word	0x000be4cc
   b6130:	000be4d3 	.word	0x000be4d3
   b6134:	2003e5c8 	.word	0x2003e5c8
   b6138:	422984a9 	.word	0x422984a9
   b613c:	c28e0be6 	.word	0xc28e0be6
   b6140:	422970a6 	.word	0x422970a6
   b6144:	c28e1862 	.word	0xc28e1862
   b6148:	42296fe1 	.word	0x42296fe1
   b614c:	c28e1e86 	.word	0xc28e1e86
   b6150:	422971d1 	.word	0x422971d1
   b6154:	c28e1fcf 	.word	0xc28e1fcf
   b6158:	000be4da 	.word	0x000be4da
   b615c:	000be4df 	.word	0x000be4df
   b6160:	000be4e6 	.word	0x000be4e6
   b6164:	20035374 	.word	0x20035374
   b6168:	4229537a 	.word	0x4229537a
   b616c:	c28e30c9 	.word	0xc28e30c9
   b6170:	422963d0 	.word	0x422963d0
   b6174:	c28e26f1 	.word	0xc28e26f1
   b6178:	4229634b 	.word	0x4229634b
   b617c:	c28e210d 	.word	0xc28e210d
   b6180:	42296e30 	.word	0x42296e30
   b6184:	c28e1d5a 	.word	0xc28e1d5a
   b6188:	42298278 	.word	0x42298278
   b618c:	c28e26e2 	.word	0xc28e26e2
   b6190:	42299ccd 	.word	0x42299ccd
   b6194:	c28e2770 	.word	0xc28e2770
   b6198:	000be50f 	.word	0x000be50f
   b619c:	000be516 	.word	0x000be516
   b61a0:	000be51d 	.word	0x000be51d
   b61a4:	462a      	mov	r2, r5
   b61a6:	a98c      	add	r1, sp, #560	; 0x230
   b61a8:	9602      	str	r6, [sp, #8]
   b61aa:	9300      	str	r3, [sp, #0]
   b61ac:	48b5      	ldr	r0, [pc, #724]	; (b6484 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10b8>)
   b61ae:	4643      	mov	r3, r8
   b61b0:	f7ff f81c 	bl	b51ec <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b61b4:	4630      	mov	r0, r6
   b61b6:	f7fe fac5 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b61ba:	a883      	add	r0, sp, #524	; 0x20c
   b61bc:	f7fe fae3 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b61c0:	a8aa      	add	r0, sp, #680	; 0x2a8
   b61c2:	f005 f835 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b61c6:	a8a4      	add	r0, sp, #656	; 0x290
   b61c8:	f005 f832 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b61cc:	a89d      	add	r0, sp, #628	; 0x274
   b61ce:	f005 f82f 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b61d2:	4640      	mov	r0, r8
   b61d4:	f7fe fab6 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b61d8:	4628      	mov	r0, r5
   b61da:	f7fe fab3 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b61de:	a88c      	add	r0, sp, #560	; 0x230
   b61e0:	f7fe fa9c 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b61e4:	4ba8      	ldr	r3, [pc, #672]	; (b6488 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10bc>)
   b61e6:	93b0      	str	r3, [sp, #704]	; 0x2c0
      lon = lo;
   b61e8:	4ba8      	ldr	r3, [pc, #672]	; (b648c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10c0>)
   b61ea:	93b1      	str	r3, [sp, #708]	; 0x2c4
      lat = la;
   b61ec:	4ba8      	ldr	r3, [pc, #672]	; (b6490 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10c4>)
   b61ee:	93b4      	str	r3, [sp, #720]	; 0x2d0
      lon = lo;
   b61f0:	4ba8      	ldr	r3, [pc, #672]	; (b6494 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10c8>)
   b61f2:	93b5      	str	r3, [sp, #724]	; 0x2d4
      lat = la;
   b61f4:	4ba8      	ldr	r3, [pc, #672]	; (b6498 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10cc>)
   b61f6:	93b6      	str	r3, [sp, #728]	; 0x2d8
      lon = lo;
   b61f8:	4ba8      	ldr	r3, [pc, #672]	; (b649c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d0>)
   b61fa:	93b7      	str	r3, [sp, #732]	; 0x2dc
      lat = la;
   b61fc:	4ba8      	ldr	r3, [pc, #672]	; (b64a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d4>)
   b61fe:	93b8      	str	r3, [sp, #736]	; 0x2e0
      lon = lo;
   b6200:	4ba8      	ldr	r3, [pc, #672]	; (b64a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10d8>)
   b6202:	93b9      	str	r3, [sp, #740]	; 0x2e4
      lat = la;
   b6204:	4ba8      	ldr	r3, [pc, #672]	; (b64a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10dc>)
   b6206:	93ba      	str	r3, [sp, #744]	; 0x2e8
      lon = lo;
   b6208:	4ba8      	ldr	r3, [pc, #672]	; (b64ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e0>)
   b620a:	93bb      	str	r3, [sp, #748]	; 0x2ec
      lat = la;
   b620c:	4ba8      	ldr	r3, [pc, #672]	; (b64b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e4>)
   b620e:	93bc      	str	r3, [sp, #752]	; 0x2f0
      lon = lo;
   b6210:	4ba8      	ldr	r3, [pc, #672]	; (b64b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10e8>)
   b6212:	93bd      	str	r3, [sp, #756]	; 0x2f4
      lat = la;
   b6214:	4ba8      	ldr	r3, [pc, #672]	; (b64b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10ec>)
   b6216:	93be      	str	r3, [sp, #760]	; 0x2f8
      lon = lo;
   b6218:	4ba8      	ldr	r3, [pc, #672]	; (b64bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f0>)
   b621a:	93bf      	str	r3, [sp, #764]	; 0x2fc
};
   b621c:	abb0      	add	r3, sp, #704	; 0x2c0
   b621e:	931a      	str	r3, [sp, #104]	; 0x68
   b6220:	2308      	movs	r3, #8
   b6222:	931b      	str	r3, [sp, #108]	; 0x6c
   b6224:	f10d 0940 	add.w	r9, sp, #64	; 0x40
   b6228:	aa1a      	add	r2, sp, #104	; 0x68
   b622a:	464b      	mov	r3, r9
   b622c:	ca06      	ldmia	r2, {r1, r2}
   b622e:	a88c      	add	r0, sp, #560	; 0x230
      lat = la;
   b6230:	edcd 8ab2 	vstr	s17, [sp, #712]	; 0x2c8
      lon = lo;
   b6234:	ed8d 8ab3 	vstr	s16, [sp, #716]	; 0x2cc
   b6238:	f7fe fada 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b623c:	f8df c2c8 	ldr.w	ip, [pc, #712]	; b6508 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x113c>
   b6240:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6244:	f50d 7e1d 	add.w	lr, sp, #628	; 0x274
   b6248:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b624c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   b6250:	9b04      	ldr	r3, [sp, #16]
   b6252:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b6256:	ab9d      	add	r3, sp, #628	; 0x274
   b6258:	9318      	str	r3, [sp, #96]	; 0x60
   b625a:	2307      	movs	r3, #7
   b625c:	9319      	str	r3, [sp, #100]	; 0x64
   b625e:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b6262:	4628      	mov	r0, r5
   b6264:	f7fe ff42 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b6268:	aa93      	add	r2, sp, #588	; 0x24c
   b626a:	9216      	str	r2, [sp, #88]	; 0x58
   b626c:	2323      	movs	r3, #35	; 0x23
   b626e:	2204      	movs	r2, #4
   b6270:	e9cd 3494 	strd	r3, r4, [sp, #592]	; 0x250
   b6274:	9217      	str	r2, [sp, #92]	; 0x5c
   b6276:	ab16      	add	r3, sp, #88	; 0x58
   b6278:	e893 0006 	ldmia.w	r3, {r1, r2}
   b627c:	4640      	mov	r0, r8
   b627e:	9493      	str	r4, [sp, #588]	; 0x24c
   b6280:	9496      	str	r4, [sp, #600]	; 0x258
   b6282:	f7fe ff33 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b6286:	4658      	mov	r0, fp
   b6288:	498d      	ldr	r1, [pc, #564]	; (b64c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f4>)
   b628a:	f7fd ff3d 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b628e:	a8a4      	add	r0, sp, #656	; 0x290
   b6290:	498c      	ldr	r1, [pc, #560]	; (b64c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f8>)
   b6292:	f7fd ff39 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6296:	a8aa      	add	r0, sp, #680	; 0x2a8
   b6298:	498b      	ldr	r1, [pc, #556]	; (b64c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10fc>)
   b629a:	f7fd ff35 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b629e:	aba4      	add	r3, sp, #656	; 0x290
   b62a0:	9314      	str	r3, [sp, #80]	; 0x50
   b62a2:	2302      	movs	r3, #2
   b62a4:	9315      	str	r3, [sp, #84]	; 0x54
   b62a6:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
   b62aa:	aa14      	add	r2, sp, #80	; 0x50
   b62ac:	4653      	mov	r3, sl
   b62ae:	ca06      	ldmia	r2, {r1, r2}
   b62b0:	a883      	add	r0, sp, #524	; 0x20c
   b62b2:	f7fe fad1 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b62b6:	4621      	mov	r1, r4
   b62b8:	2210      	movs	r2, #16
   b62ba:	a88f      	add	r0, sp, #572	; 0x23c
   b62bc:	f005 ff90 	bl	bc1e0 <memset>
   b62c0:	aa8f      	add	r2, sp, #572	; 0x23c
   b62c2:	9212      	str	r2, [sp, #72]	; 0x48
   b62c4:	2204      	movs	r2, #4
   b62c6:	ab12      	add	r3, sp, #72	; 0x48
   b62c8:	9213      	str	r2, [sp, #76]	; 0x4c
   b62ca:	e893 0006 	ldmia.w	r3, {r1, r2}
   b62ce:	4630      	mov	r0, r6
   b62d0:	f7fe ff0c 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLine1MBTA = Railway{
   b62d4:	ab83      	add	r3, sp, #524	; 0x20c
   b62d6:	462a      	mov	r2, r5
   b62d8:	a98c      	add	r1, sp, #560	; 0x230
   b62da:	e9cd b300 	strd	fp, r3, [sp]
   b62de:	9602      	str	r6, [sp, #8]
   b62e0:	4643      	mov	r3, r8
   b62e2:	487a      	ldr	r0, [pc, #488]	; (b64cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1100>)
   b62e4:	f7fe ff82 	bl	b51ec <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b62e8:	4630      	mov	r0, r6
   b62ea:	f7fe fa2b 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b62ee:	a883      	add	r0, sp, #524	; 0x20c
   b62f0:	f7fe fa49 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b62f4:	a8aa      	add	r0, sp, #680	; 0x2a8
   b62f6:	f004 ff9b 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b62fa:	a8a4      	add	r0, sp, #656	; 0x290
   b62fc:	f004 ff98 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6300:	4658      	mov	r0, fp
   b6302:	f004 ff95 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6306:	4640      	mov	r0, r8
   b6308:	f7fe fa1c 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b630c:	4628      	mov	r0, r5
   b630e:	f7fe fa19 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6312:	a88c      	add	r0, sp, #560	; 0x230
   b6314:	f7fe fa02 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b6318:	4b6d      	ldr	r3, [pc, #436]	; (b64d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1104>)
   b631a:	939d      	str	r3, [sp, #628]	; 0x274
      lon = lo;
   b631c:	4b6d      	ldr	r3, [pc, #436]	; (b64d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1108>)
   b631e:	939e      	str	r3, [sp, #632]	; 0x278
};
   b6320:	ab9d      	add	r3, sp, #628	; 0x274
   b6322:	6033      	str	r3, [r6, #0]
   b6324:	2302      	movs	r3, #2
   b6326:	6073      	str	r3, [r6, #4]
   b6328:	e896 0006 	ldmia.w	r6, {r1, r2}
   b632c:	ab08      	add	r3, sp, #32
   b632e:	a88f      	add	r0, sp, #572	; 0x23c
      lat = la;
   b6330:	edcd 8a9f 	vstr	s17, [sp, #636]	; 0x27c
      lon = lo;
   b6334:	ed8d 8aa0 	vstr	s16, [sp, #640]	; 0x280
   b6338:	f7fe fa5a 	bl	b47f0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b633c:	ab09      	add	r3, sp, #36	; 0x24
   b633e:	9310      	str	r3, [sp, #64]	; 0x40
   b6340:	2301      	movs	r3, #1
   b6342:	9311      	str	r3, [sp, #68]	; 0x44
   b6344:	e899 0006 	ldmia.w	r9, {r1, r2}
   b6348:	260f      	movs	r6, #15
   b634a:	a88c      	add	r0, sp, #560	; 0x230
   b634c:	9609      	str	r6, [sp, #36]	; 0x24
   b634e:	f7fe fecd 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b6352:	2304      	movs	r3, #4
   b6354:	930f      	str	r3, [sp, #60]	; 0x3c
   b6356:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   b635a:	e89a 0006 	ldmia.w	sl, {r1, r2}
   b635e:	4628      	mov	r0, r5
   b6360:	e9cd 4697 	strd	r4, r6, [sp, #604]	; 0x25c
   b6364:	e9cd 4499 	strd	r4, r4, [sp, #612]	; 0x264
   b6368:	f7fe fec0 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b636c:	a8a4      	add	r0, sp, #656	; 0x290
   b636e:	4954      	ldr	r1, [pc, #336]	; (b64c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f4>)
   b6370:	f7fd feca 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6374:	a8b0      	add	r0, sp, #704	; 0x2c0
   b6376:	4953      	ldr	r1, [pc, #332]	; (b64c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10f8>)
   b6378:	f7fd fec6 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b637c:	a8b6      	add	r0, sp, #728	; 0x2d8
   b637e:	4952      	ldr	r1, [pc, #328]	; (b64c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x10fc>)
   b6380:	f7fd fec2 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b6384:	abb0      	add	r3, sp, #704	; 0x2c0
   b6386:	930c      	str	r3, [sp, #48]	; 0x30
   b6388:	2302      	movs	r3, #2
   b638a:	930d      	str	r3, [sp, #52]	; 0x34
   b638c:	aa0c      	add	r2, sp, #48	; 0x30
   b638e:	ab07      	add	r3, sp, #28
   b6390:	ca06      	ldmia	r2, {r1, r2}
   b6392:	4640      	mov	r0, r8
   b6394:	f7fe fa60 	bl	b4858 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b6398:	4621      	mov	r1, r4
   b639a:	2210      	movs	r2, #16
   b639c:	a893      	add	r0, sp, #588	; 0x24c
   b639e:	f005 ff1f 	bl	bc1e0 <memset>
   b63a2:	aa93      	add	r2, sp, #588	; 0x24c
   b63a4:	920a      	str	r2, [sp, #40]	; 0x28
   b63a6:	2204      	movs	r2, #4
   b63a8:	ab0a      	add	r3, sp, #40	; 0x28
   b63aa:	920b      	str	r2, [sp, #44]	; 0x2c
   b63ac:	e893 0006 	ldmia.w	r3, {r1, r2}
   b63b0:	a883      	add	r0, sp, #524	; 0x20c
   b63b2:	f7fe fe9b 	bl	b50ec <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLine2MBTA = Railway{
   b63b6:	ab83      	add	r3, sp, #524	; 0x20c
   b63b8:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b63bc:	aba4      	add	r3, sp, #656	; 0x290
   b63be:	aa8c      	add	r2, sp, #560	; 0x230
   b63c0:	a98f      	add	r1, sp, #572	; 0x23c
   b63c2:	9300      	str	r3, [sp, #0]
   b63c4:	4844      	ldr	r0, [pc, #272]	; (b64d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x110c>)
   b63c6:	462b      	mov	r3, r5
   b63c8:	f7fe ff10 	bl	b51ec <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b63cc:	a883      	add	r0, sp, #524	; 0x20c
   b63ce:	f7fe f9b9 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
};
   b63d2:	4640      	mov	r0, r8
   b63d4:	f7fe f9d7 	bl	b4786 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b63d8:	a8b6      	add	r0, sp, #728	; 0x2d8
   b63da:	f004 ff29 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b63de:	a8b0      	add	r0, sp, #704	; 0x2c0
   b63e0:	f004 ff26 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b63e4:	a8a4      	add	r0, sp, #656	; 0x290
   b63e6:	f004 ff23 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b63ea:	4628      	mov	r0, r5
   b63ec:	f7fe f9aa 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b63f0:	a88c      	add	r0, sp, #560	; 0x230
   b63f2:	f7fe f9a7 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b63f6:	a88f      	add	r0, sp, #572	; 0x23c
   b63f8:	f7fe f990 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b63fc:	4b37      	ldr	r3, [pc, #220]	; (b64dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1110>)
const BleUuid serviceUuid("123A");
   b63fe:	4938      	ldr	r1, [pc, #224]	; (b64e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1114>)
   b6400:	609c      	str	r4, [r3, #8]
   b6402:	e9c3 4400 	strd	r4, r4, [r3]
   b6406:	4b37      	ldr	r3, [pc, #220]	; (b64e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1118>)
   b6408:	4837      	ldr	r0, [pc, #220]	; (b64e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x111c>)
   b640a:	609c      	str	r4, [r3, #8]
   b640c:	e9c3 4400 	strd	r4, r4, [r3]
   b6410:	4b36      	ldr	r3, [pc, #216]	; (b64ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1120>)
   b6412:	4d37      	ldr	r5, [pc, #220]	; (b64f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1124>)
   b6414:	609c      	str	r4, [r3, #8]
   b6416:	e9c3 4400 	strd	r4, r4, [r3]
   b641a:	4b36      	ldr	r3, [pc, #216]	; (b64f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1128>)
   b641c:	f8df 80c8 	ldr.w	r8, [pc, #200]	; b64e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x111c>
   b6420:	609c      	str	r4, [r3, #8]
   b6422:	e9c3 4400 	strd	r4, r4, [r3]
   b6426:	4b34      	ldr	r3, [pc, #208]	; (b64f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x112c>)
   b6428:	e9c3 4400 	strd	r4, r4, [r3]
   b642c:	609c      	str	r4, [r3, #8]
   b642e:	f002 fda5 	bl	b8f7c <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("123B");
   b6432:	4932      	ldr	r1, [pc, #200]	; (b64fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1130>)
   b6434:	4832      	ldr	r0, [pc, #200]	; (b6500 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1134>)
   b6436:	f002 fda1 	bl	b8f7c <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("123C");
   b643a:	4932      	ldr	r1, [pc, #200]	; (b6504 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1138>)
   b643c:	482c      	ldr	r0, [pc, #176]	; (b64f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1124>)
   b643e:	f002 fd9d 	bl	b8f7c <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b6442:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6444:	465e      	mov	r6, fp
   b6446:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b6448:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b644c:	f8d5 c000 	ldr.w	ip, [r5]
   b6450:	f8c7 c000 	str.w	ip, [r7]
   b6454:	ad9d      	add	r5, sp, #628	; 0x274
   b6456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6458:	46c1      	mov	r9, r8
   b645a:	9b04      	ldr	r3, [sp, #16]
   b645c:	f859 a910 	ldr.w	sl, [r9], #-16
   b6460:	f8c3 a000 	str.w	sl, [r3]
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b6464:	465d      	mov	r5, fp
   b6466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6468:	aea4      	add	r6, sp, #656	; 0x290
   b646a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b646c:	f8df e09c 	ldr.w	lr, [pc, #156]	; b650c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1140>
   b6470:	f8c6 c000 	str.w	ip, [r6]
        BleUuid sUuid(svcUuid);
   b6474:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
      constexpr __shared_count() noexcept : _M_pi(0)
   b6478:	e9ce 4400 	strd	r4, r4, [lr]
   b647c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6480:	adb0      	add	r5, sp, #704	; 0x2c0
   b6482:	e045      	b.n	b6510 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1144>
   b6484:	20037e4c 	.word	0x20037e4c
   b6488:	42296555 	.word	0x42296555
   b648c:	c28e30ae 	.word	0xc28e30ae
   b6490:	42296847 	.word	0x42296847
   b6494:	c28e2445 	.word	0xc28e2445
   b6498:	422968cc 	.word	0x422968cc
   b649c:	c28e2106 	.word	0xc28e2106
   b64a0:	422972cd 	.word	0x422972cd
   b64a4:	c28e1db0 	.word	0xc28e1db0
   b64a8:	42297777 	.word	0x42297777
   b64ac:	c28e1f5e 	.word	0xc28e1f5e
   b64b0:	42297668 	.word	0x42297668
   b64b4:	c28e20d5 	.word	0xc28e20d5
   b64b8:	42298291 	.word	0x42298291
   b64bc:	c28e30ba 	.word	0xc28e30ba
   b64c0:	000be463 	.word	0x000be463
   b64c4:	000be501 	.word	0x000be501
   b64c8:	000be508 	.word	0x000be508
   b64cc:	2003546c 	.word	0x2003546c
   b64d0:	422957f0 	.word	0x422957f0
   b64d4:	c28e3351 	.word	0xc28e3351
   b64d8:	200354d8 	.word	0x200354d8
   b64dc:	20035450 	.word	0x20035450
   b64e0:	000be54c 	.word	0x000be54c
   b64e4:	20035460 	.word	0x20035460
   b64e8:	200352bc 	.word	0x200352bc
   b64ec:	20037dd4 	.word	0x20037dd4
   b64f0:	200352e4 	.word	0x200352e4
   b64f4:	200352f8 	.word	0x200352f8
   b64f8:	2003e69c 	.word	0x2003e69c
   b64fc:	000be551 	.word	0x000be551
   b6500:	200352d0 	.word	0x200352d0
   b6504:	000be556 	.word	0x000be556
   b6508:	000be770 	.word	0x000be770
   b650c:	2003e6ac 	.word	0x2003e6ac
   b6510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b6512:	abb0      	add	r3, sp, #704	; 0x2c0
        BleUuid sUuid(svcUuid);
   b6514:	f8c5 a000 	str.w	sl, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b6518:	4670      	mov	r0, lr
   b651a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b651e:	9300      	str	r3, [sp, #0]
   b6520:	4974      	ldr	r1, [pc, #464]	; (b66f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1328>)
   b6522:	aba4      	add	r3, sp, #656	; 0x290
   b6524:	f04f 0210 	mov.w	r2, #16
   b6528:	f003 fa92 	bl	b9a50 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b652c:	f8df c250 	ldr.w	ip, [pc, #592]	; b6780 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13b4>
   b6530:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6534:	46de      	mov	lr, fp
   b6536:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b653a:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b653e:	f8dc e000 	ldr.w	lr, [ip]
   b6542:	f8c7 e000 	str.w	lr, [r7]
   b6546:	f50d 7c1d 	add.w	ip, sp, #628	; 0x274
   b654a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b654e:	9b04      	ldr	r3, [sp, #16]
   b6550:	f8d8 9000 	ldr.w	r9, [r8]
   b6554:	f8c3 9000 	str.w	r9, [r3]
        BleUuid cUuid(charUuid);
   b6558:	46da      	mov	sl, fp
   b655a:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b655e:	f8df 81d8 	ldr.w	r8, [pc, #472]	; b6738 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x136c>
   b6562:	f50d 7c24 	add.w	ip, sp, #656	; 0x290
   b6566:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b656a:	f8c6 e000 	str.w	lr, [r6]
        BleUuid sUuid(svcUuid);
   b656e:	ae9d      	add	r6, sp, #628	; 0x274
      constexpr __shared_count() noexcept : _M_pi(0)
   b6570:	e9c8 4400 	strd	r4, r4, [r8]
   b6574:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b6576:	f50d 7c30 	add.w	ip, sp, #704	; 0x2c0
   b657a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b657e:	4b5e      	ldr	r3, [pc, #376]	; (b66f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x132c>)
        BleUuid sUuid(svcUuid);
   b6580:	f8c5 9000 	str.w	r9, [r5]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b6584:	9301      	str	r3, [sp, #4]
   b6586:	abb0      	add	r3, sp, #704	; 0x2c0
   b6588:	f04f 0204 	mov.w	r2, #4
   b658c:	9402      	str	r4, [sp, #8]
   b658e:	9300      	str	r3, [sp, #0]
   b6590:	4640      	mov	r0, r8
   b6592:	aba4      	add	r3, sp, #656	; 0x290
   b6594:	4959      	ldr	r1, [pc, #356]	; (b66fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1330>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b6596:	4c5a      	ldr	r4, [pc, #360]	; (b6700 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1334>)
   b6598:	f003 fa5a 	bl	b9a50 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b659c:	4959      	ldr	r1, [pc, #356]	; (b6704 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1338>)
   b659e:	485a      	ldr	r0, [pc, #360]	; (b6708 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x133c>)
   b65a0:	f003 ff79 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
   b65a4:	4859      	ldr	r0, [pc, #356]	; (b670c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1340>)
   b65a6:	f003 fd83 	bl	ba0b0 <_ZN9IPAddressC1Ev>
   b65aa:	4956      	ldr	r1, [pc, #344]	; (b6704 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1338>)
   b65ac:	4858      	ldr	r0, [pc, #352]	; (b6710 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1344>)
   b65ae:	f003 ff72 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
   b65b2:	4954      	ldr	r1, [pc, #336]	; (b6704 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1338>)
   b65b4:	4857      	ldr	r0, [pc, #348]	; (b6714 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1348>)
   b65b6:	f003 ff6e 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b65ba:	4952      	ldr	r1, [pc, #328]	; (b6704 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1338>)
   b65bc:	4856      	ldr	r0, [pc, #344]	; (b6718 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x134c>)
   b65be:	f003 ff6a 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
HttpClient http;
   b65c2:	4856      	ldr	r0, [pc, #344]	; (b671c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1350>)
   b65c4:	f001 f9fc 	bl	b79c0 <_ZN10HttpClientC1Ev>
   b65c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b65cc:	9300      	str	r3, [sp, #0]
   b65ce:	f242 7210 	movw	r2, #10000	; 0x2710
   b65d2:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b65d6:	4b52      	ldr	r3, [pc, #328]	; (b6720 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1354>)
   b65d8:	4620      	mov	r0, r4
   b65da:	f001 fbc9 	bl	b7d70 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b65de:	4b51      	ldr	r3, [pc, #324]	; (b6724 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1358>)
String SSID = "";
   b65e0:	4948      	ldr	r1, [pc, #288]	; (b6704 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1338>)
   b65e2:	6023      	str	r3, [r4, #0]
   b65e4:	4850      	ldr	r0, [pc, #320]	; (b6728 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x135c>)
   b65e6:	f003 ff56 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
String password = "";
   b65ea:	4946      	ldr	r1, [pc, #280]	; (b6704 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1338>)
   b65ec:	484f      	ldr	r0, [pc, #316]	; (b672c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1360>)
   b65ee:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
   b65f2:	ecbd 8b0e 	vpop	{d8-d14}
   b65f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
String password = "";
   b65fa:	f003 bf4c 	b.w	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
   b65fe:	484b      	ldr	r0, [pc, #300]	; (b672c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1360>)
   b6600:	f003 fefe 	bl	ba400 <_ZN6StringD1Ev>
String SSID = "";
   b6604:	4848      	ldr	r0, [pc, #288]	; (b6728 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x135c>)
   b6606:	f003 fefb 	bl	ba400 <_ZN6StringD1Ev>
JsonParserStatic<10000, 1000> parser;
   b660a:	483d      	ldr	r0, [pc, #244]	; (b6700 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1334>)
   b660c:	f7fd fd54 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b6610:	4b42      	ldr	r3, [pc, #264]	; (b671c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1350>)
   b6612:	4a47      	ldr	r2, [pc, #284]	; (b6730 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1364>)
	if (_M_pi != nullptr)
   b6614:	699c      	ldr	r4, [r3, #24]
   b6616:	601a      	str	r2, [r3, #0]
   b6618:	b17c      	cbz	r4, b663a <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x126e>
      if (--_M_use_count == 0)
   b661a:	6863      	ldr	r3, [r4, #4]
   b661c:	3b01      	subs	r3, #1
   b661e:	6063      	str	r3, [r4, #4]
   b6620:	b95b      	cbnz	r3, b663a <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x126e>
          _M_dispose();
   b6622:	6823      	ldr	r3, [r4, #0]
   b6624:	4620      	mov	r0, r4
   b6626:	689b      	ldr	r3, [r3, #8]
   b6628:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b662a:	68a3      	ldr	r3, [r4, #8]
   b662c:	3b01      	subs	r3, #1
   b662e:	60a3      	str	r3, [r4, #8]
   b6630:	b91b      	cbnz	r3, b663a <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x126e>
            _M_destroy();
   b6632:	6823      	ldr	r3, [r4, #0]
   b6634:	4620      	mov	r0, r4
   b6636:	68db      	ldr	r3, [r3, #12]
   b6638:	4798      	blx	r3
   b663a:	4837      	ldr	r0, [pc, #220]	; (b6718 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x134c>)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b663c:	4c3d      	ldr	r4, [pc, #244]	; (b6734 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1368>)
   b663e:	f003 fedf 	bl	ba400 <_ZN6StringD1Ev>
} http_request_t;
   b6642:	4834      	ldr	r0, [pc, #208]	; (b6714 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1348>)
   b6644:	f003 fedc 	bl	ba400 <_ZN6StringD1Ev>
   b6648:	4831      	ldr	r0, [pc, #196]	; (b6710 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1344>)
   b664a:	f003 fed9 	bl	ba400 <_ZN6StringD1Ev>
   b664e:	482e      	ldr	r0, [pc, #184]	; (b6708 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x133c>)
   b6650:	f003 fed6 	bl	ba400 <_ZN6StringD1Ev>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b6654:	4838      	ldr	r0, [pc, #224]	; (b6738 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x136c>)
   b6656:	f002 fee2 	bl	b941e <_ZN8particle17BleCharacteristicD1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b665a:	4838      	ldr	r0, [pc, #224]	; (b673c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1370>)
   b665c:	f002 fedf 	bl	b941e <_ZN8particle17BleCharacteristicD1Ev>
      }
   b6660:	4837      	ldr	r0, [pc, #220]	; (b6740 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1374>)
   b6662:	f7fe f86f 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6666:	4837      	ldr	r0, [pc, #220]	; (b6744 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1378>)
   b6668:	f7fe f86c 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
std::vector<Railway> ctaRailways, mbtaRailways;
   b666c:	4836      	ldr	r0, [pc, #216]	; (b6748 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x137c>)
   b666e:	f7fe fcf8 	bl	b5062 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b6672:	4836      	ldr	r0, [pc, #216]	; (b674c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1380>)
   b6674:	f7fe fcf5 	bl	b5062 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
	__destroy(__first, __last);
   b6678:	e9d4 0100 	ldrd	r0, r1, [r4]
   b667c:	f7fe fcff 	bl	b507e <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
   b6680:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6682:	b118      	cbz	r0, b668c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x12c0>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b6684:	68a1      	ldr	r1, [r4, #8]
   b6686:	1a09      	subs	r1, r1, r0
   b6688:	f7fd fd0b 	bl	b40a2 <_ZdlPvj>
Railway greenLine2MBTA = Railway{
   b668c:	4830      	ldr	r0, [pc, #192]	; (b6750 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1384>)
   b668e:	f7fe fcbd 	bl	b500c <_ZN7RailwayD1Ev>
Railway greenLine1MBTA = Railway{
   b6692:	4830      	ldr	r0, [pc, #192]	; (b6754 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1388>)
   b6694:	f7fe fcba 	bl	b500c <_ZN7RailwayD1Ev>
Railway orangeLineMBTA = Railway{
   b6698:	482f      	ldr	r0, [pc, #188]	; (b6758 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x138c>)
   b669a:	f7fe fcb7 	bl	b500c <_ZN7RailwayD1Ev>
Railway blueLineMBTA = Railway{
   b669e:	482f      	ldr	r0, [pc, #188]	; (b675c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1390>)
   b66a0:	f7fe fcb4 	bl	b500c <_ZN7RailwayD1Ev>
Railway redLineMBTA = Railway{
   b66a4:	482e      	ldr	r0, [pc, #184]	; (b6760 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1394>)
   b66a6:	f7fe fcb1 	bl	b500c <_ZN7RailwayD1Ev>
Railway pinkLineCTA = Railway(
   b66aa:	482e      	ldr	r0, [pc, #184]	; (b6764 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1398>)
   b66ac:	f7fe fcae 	bl	b500c <_ZN7RailwayD1Ev>
Railway purpleLineCTA = Railway(
   b66b0:	482d      	ldr	r0, [pc, #180]	; (b6768 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x139c>)
   b66b2:	f7fe fcab 	bl	b500c <_ZN7RailwayD1Ev>
Railway orangeLineCTA = Railway(
   b66b6:	482d      	ldr	r0, [pc, #180]	; (b676c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13a0>)
   b66b8:	f7fe fca8 	bl	b500c <_ZN7RailwayD1Ev>
Railway greenLineCTA = Railway(
   b66bc:	482c      	ldr	r0, [pc, #176]	; (b6770 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13a4>)
   b66be:	f7fe fca5 	bl	b500c <_ZN7RailwayD1Ev>
Railway brownLineCTA = Railway(
   b66c2:	482c      	ldr	r0, [pc, #176]	; (b6774 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13a8>)
   b66c4:	f7fe fca2 	bl	b500c <_ZN7RailwayD1Ev>
Railway blueLineCTA = Railway(
   b66c8:	482b      	ldr	r0, [pc, #172]	; (b6778 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13ac>)
   b66ca:	f7fe fc9f 	bl	b500c <_ZN7RailwayD1Ev>
Railway redLineCTA = Railway(
   b66ce:	482b      	ldr	r0, [pc, #172]	; (b677c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x13b0>)
   b66d0:	f7fe fc9c 	bl	b500c <_ZN7RailwayD1Ev>
        if (wakeupSource_) {
   b66d4:	6828      	ldr	r0, [r5, #0]
   b66d6:	b138      	cbz	r0, b66e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x131c>
   b66d8:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
   b66dc:	ecbd 8b0e 	vpop	{d8-d14}
   b66e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            free(wakeupSource_);
   b66e4:	f002 b9f6 	b.w	b8ad4 <free>
   b66e8:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
   b66ec:	ecbd 8b0e 	vpop	{d8-d14}
   b66f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b66f4:	000be55b 	.word	0x000be55b
   b66f8:	000b492d 	.word	0x000b492d
   b66fc:	000be55e 	.word	0x000be55e
   b6700:	20037eb8 	.word	0x20037eb8
   b6704:	000be7c6 	.word	0x000be7c6
   b6708:	2003e634 	.word	0x2003e634
   b670c:	2003e644 	.word	0x2003e644
   b6710:	2003e65c 	.word	0x2003e65c
   b6714:	2003e670 	.word	0x2003e670
   b6718:	2003e684 	.word	0x2003e684
   b671c:	200355b8 	.word	0x200355b8
   b6720:	2003a5f4 	.word	0x2003a5f4
   b6724:	000be61c 	.word	0x000be61c
   b6728:	200352a0 	.word	0x200352a0
   b672c:	2003e474 	.word	0x2003e474
   b6730:	000bead0 	.word	0x000bead0
   b6734:	20035450 	.word	0x20035450
   b6738:	2003e694 	.word	0x2003e694
   b673c:	2003e6ac 	.word	0x2003e6ac
   b6740:	2003e69c 	.word	0x2003e69c
   b6744:	200352f8 	.word	0x200352f8
   b6748:	20037dd4 	.word	0x20037dd4
   b674c:	20035460 	.word	0x20035460
   b6750:	200354d8 	.word	0x200354d8
   b6754:	2003546c 	.word	0x2003546c
   b6758:	20037e4c 	.word	0x20037e4c
   b675c:	20035374 	.word	0x20035374
   b6760:	2003e5c8 	.word	0x2003e5c8
   b6764:	2003e484 	.word	0x2003e484
   b6768:	2003e4f0 	.word	0x2003e4f0
   b676c:	20037de0 	.word	0x20037de0
   b6770:	20035544 	.word	0x20035544
   b6774:	200353e0 	.word	0x200353e0
   b6778:	20035308 	.word	0x20035308
   b677c:	2003e55c 	.word	0x2003e55c
   b6780:	200352d0 	.word	0x200352d0

000b6784 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b6784:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b6786:	b510      	push	{r4, lr}
   b6788:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b678a:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b678e:	d005      	beq.n	b679c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b6790:	4601      	mov	r1, r0
   b6792:	4622      	mov	r2, r4
   b6794:	4618      	mov	r0, r3
   b6796:	f005 fd09 	bl	bc1ac <memmove>
   b679a:	4603      	mov	r3, r0
	}
   b679c:	1918      	adds	r0, r3, r4
   b679e:	bd10      	pop	{r4, pc}

000b67a0 <_ZN7RailwayC1ERKS_>:
class Railway{
   b67a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b67a4:	460d      	mov	r5, r1
   b67a6:	4604      	mov	r4, r0
   b67a8:	f7fe f88a 	bl	b48c0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b67ac:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b67b0:	2600      	movs	r6, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b67b2:	1ac9      	subs	r1, r1, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b67b4:	e9c4 6603 	strd	r6, r6, [r4, #12]
   b67b8:	6166      	str	r6, [r4, #20]
      { _M_create_storage(__n); }
   b67ba:	1089      	asrs	r1, r1, #2
   b67bc:	f104 000c 	add.w	r0, r4, #12
   b67c0:	f7fe fc04 	bl	b4fcc <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
			      _Category>::__copy_m(__first, __last, __result);
   b67c4:	68e2      	ldr	r2, [r4, #12]
   b67c6:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
   b67ca:	f7ff ffdb 	bl	b6784 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b67ce:	f105 0118 	add.w	r1, r5, #24
	this->_M_impl._M_finish =
   b67d2:	6120      	str	r0, [r4, #16]
   b67d4:	f104 0018 	add.w	r0, r4, #24
   b67d8:	f7fe fc6e 	bl	b50b8 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b67dc:	e9d5 3709 	ldrd	r3, r7, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b67e0:	4826      	ldr	r0, [pc, #152]	; (b687c <_ZN7RailwayC1ERKS_+0xdc>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b67e2:	62e6      	str	r6, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b67e4:	1aff      	subs	r7, r7, r3
   b67e6:	10bb      	asrs	r3, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b67e8:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b67ec:	4358      	muls	r0, r3
   b67ee:	f7fd fc79 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b67f2:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b67f6:	4407      	add	r7, r0
   b67f8:	62e7      	str	r7, [r4, #44]	; 0x2c
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b67fa:	e9d5 7809 	ldrd	r7, r8, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b67fe:	4606      	mov	r6, r0
   b6800:	45b8      	cmp	r8, r7
   b6802:	d007      	beq.n	b6814 <_ZN7RailwayC1ERKS_+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6804:	b11e      	cbz	r6, b680e <_ZN7RailwayC1ERKS_+0x6e>
   b6806:	4639      	mov	r1, r7
   b6808:	4630      	mov	r0, r6
   b680a:	f7fe fc55 	bl	b50b8 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b680e:	360c      	adds	r6, #12
   b6810:	370c      	adds	r7, #12
   b6812:	e7f5      	b.n	b6800 <_ZN7RailwayC1ERKS_+0x60>
	this->_M_impl._M_finish =
   b6814:	62a6      	str	r6, [r4, #40]	; 0x28
   b6816:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b681a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b681e:	f7fd fcd9 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6822:	e9d5 3712 	ldrd	r3, r7, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6826:	4815      	ldr	r0, [pc, #84]	; (b687c <_ZN7RailwayC1ERKS_+0xdc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6828:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b682a:	2300      	movs	r3, #0
   b682c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b6830:	6523      	str	r3, [r4, #80]	; 0x50
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6832:	10fb      	asrs	r3, r7, #3
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6834:	4358      	muls	r0, r3
   b6836:	f7fd fca1 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b683a:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b683e:	4407      	add	r7, r0
   b6840:	6527      	str	r7, [r4, #80]	; 0x50
   b6842:	e9d5 7812 	ldrd	r7, r8, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6846:	4606      	mov	r6, r0
   b6848:	45b8      	cmp	r8, r7
   b684a:	d007      	beq.n	b685c <_ZN7RailwayC1ERKS_+0xbc>
   b684c:	b11e      	cbz	r6, b6856 <_ZN7RailwayC1ERKS_+0xb6>
   b684e:	4639      	mov	r1, r7
   b6850:	4630      	mov	r0, r6
   b6852:	f7fd fcbf 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b6856:	3618      	adds	r6, #24
   b6858:	3718      	adds	r7, #24
   b685a:	e7f5      	b.n	b6848 <_ZN7RailwayC1ERKS_+0xa8>
	this->_M_impl._M_finish =
   b685c:	64e6      	str	r6, [r4, #76]	; 0x4c
   b685e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b6860:	6563      	str	r3, [r4, #84]	; 0x54
   b6862:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b6864:	65a3      	str	r3, [r4, #88]	; 0x58
   b6866:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b6868:	65e3      	str	r3, [r4, #92]	; 0x5c
   b686a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b686c:	6623      	str	r3, [r4, #96]	; 0x60
   b686e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b6870:	6663      	str	r3, [r4, #100]	; 0x64
   b6872:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b6874:	66a3      	str	r3, [r4, #104]	; 0x68
   b6876:	4620      	mov	r0, r4
   b6878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b687c:	aaaaaaab 	.word	0xaaaaaaab

000b6880 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b6880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6882:	e9d1 3700 	ldrd	r3, r7, [r1]
   b6886:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6888:	2300      	movs	r3, #0
   b688a:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   b688e:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6890:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6892:	480d      	ldr	r0, [pc, #52]	; (b68c8 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x48>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6894:	10bb      	asrs	r3, r7, #2
	this->_M_impl._M_start = this->_M_allocate(__n);
   b6896:	4358      	muls	r0, r3
      vector(const vector& __x)
   b6898:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b689a:	f7fd fc5d 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b689e:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b68a2:	4407      	add	r7, r0
   b68a4:	60a7      	str	r7, [r4, #8]
   b68a6:	e9d6 6700 	ldrd	r6, r7, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b68aa:	4605      	mov	r5, r0
   b68ac:	42b7      	cmp	r7, r6
   b68ae:	d007      	beq.n	b68c0 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x40>
   b68b0:	b11d      	cbz	r5, b68ba <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x3a>
   b68b2:	4631      	mov	r1, r6
   b68b4:	4628      	mov	r0, r5
   b68b6:	f7ff ff73 	bl	b67a0 <_ZN7RailwayC1ERKS_>
   b68ba:	356c      	adds	r5, #108	; 0x6c
   b68bc:	366c      	adds	r6, #108	; 0x6c
   b68be:	e7f5      	b.n	b68ac <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b68c0:	6065      	str	r5, [r4, #4]
      }
   b68c2:	4620      	mov	r0, r4
   b68c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b68c6:	bf00      	nop
   b68c8:	684bda13 	.word	0x684bda13

000b68cc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b68cc:	b570      	push	{r4, r5, r6, lr}
   b68ce:	4605      	mov	r5, r0
   b68d0:	460e      	mov	r6, r1
   b68d2:	4614      	mov	r4, r2
	      for (; __first != __last; ++__first, (void)++__cur)
   b68d4:	42b5      	cmp	r5, r6
   b68d6:	d00f      	beq.n	b68f8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x2c>
   b68d8:	b15c      	cbz	r4, b68f2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x26>
   b68da:	4629      	mov	r1, r5
   b68dc:	4620      	mov	r0, r4
   b68de:	f7ff ffcf 	bl	b6880 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b68e2:	f105 010c 	add.w	r1, r5, #12
   b68e6:	f104 000c 	add.w	r0, r4, #12
   b68ea:	f7fd fc73 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b68ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b68f0:	6263      	str	r3, [r4, #36]	; 0x24
   b68f2:	3528      	adds	r5, #40	; 0x28
   b68f4:	3428      	adds	r4, #40	; 0x28
   b68f6:	e7ed      	b.n	b68d4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_+0x8>
	}
   b68f8:	4620      	mov	r0, r4
   b68fa:	bd70      	pop	{r4, r5, r6, pc}

000b68fc <_ZN7RailwayaSERKS_.isra.0>:
   b68fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6900:	4604      	mov	r4, r0
   b6902:	460d      	mov	r5, r1
   b6904:	f7fd fca2 	bl	b424c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
   b6908:	f105 020c 	add.w	r2, r5, #12
   b690c:	f104 030c 	add.w	r3, r4, #12
      if (&__x != this)
   b6910:	429a      	cmp	r2, r3
   b6912:	d025      	beq.n	b6960 <_ZN7RailwayaSERKS_.isra.0+0x64>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6914:	e9d5 8103 	ldrd	r8, r1, [r5, #12]
			 - this->_M_impl._M_start); }
   b6918:	68e2      	ldr	r2, [r4, #12]
   b691a:	6963      	ldr	r3, [r4, #20]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b691c:	eba1 0608 	sub.w	r6, r1, r8
			 - this->_M_impl._M_start); }
   b6920:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b6922:	429e      	cmp	r6, r3
   b6924:	d94a      	bls.n	b69bc <_ZN7RailwayaSERKS_.isra.0+0xc0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b6926:	2e00      	cmp	r6, #0
   b6928:	d046      	beq.n	b69b8 <_ZN7RailwayaSERKS_.isra.0+0xbc>
	if (__n > this->_M_max_size())
   b692a:	4b5d      	ldr	r3, [pc, #372]	; (b6aa0 <_ZN7RailwayaSERKS_.isra.0+0x1a4>)
   b692c:	429e      	cmp	r6, r3
   b692e:	d901      	bls.n	b6934 <_ZN7RailwayaSERKS_.isra.0+0x38>
	  std::__throw_bad_alloc();
   b6930:	f004 fc46 	bl	bb1c0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6934:	4630      	mov	r0, r6
   b6936:	9101      	str	r1, [sp, #4]
   b6938:	f7fd fbad 	bl	b4096 <_Znwj>
   b693c:	9901      	ldr	r1, [sp, #4]
   b693e:	4607      	mov	r7, r0
   b6940:	463a      	mov	r2, r7
   b6942:	4640      	mov	r0, r8
   b6944:	f7ff ff1e 	bl	b6784 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b6948:	68e0      	ldr	r0, [r4, #12]
	if (__p)
   b694a:	b118      	cbz	r0, b6954 <_ZN7RailwayaSERKS_.isra.0+0x58>
			    - this->_M_impl._M_start);
   b694c:	6961      	ldr	r1, [r4, #20]
	::operator delete(__p
   b694e:	1a09      	subs	r1, r1, r0
   b6950:	f7fd fba7 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b6954:	60e7      	str	r7, [r4, #12]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b6956:	4437      	add	r7, r6
   b6958:	6167      	str	r7, [r4, #20]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b695a:	68e3      	ldr	r3, [r4, #12]
   b695c:	4433      	add	r3, r6
   b695e:	6123      	str	r3, [r4, #16]
   b6960:	f105 0118 	add.w	r1, r5, #24
   b6964:	f104 0018 	add.w	r0, r4, #24
   b6968:	f7fe fbea 	bl	b5140 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
   b696c:	f105 0324 	add.w	r3, r5, #36	; 0x24
   b6970:	f104 0224 	add.w	r2, r4, #36	; 0x24
      if (&__x != this)
   b6974:	4293      	cmp	r3, r2
   b6976:	d045      	beq.n	b6a04 <_ZN7RailwayaSERKS_.isra.0+0x108>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6978:	e9d5 6a09 	ldrd	r6, sl, [r5, #36]	; 0x24
			 - this->_M_impl._M_start); }
   b697c:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   b6980:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6982:	ebaa 0806 	sub.w	r8, sl, r6
			 - this->_M_impl._M_start); }
   b6986:	eba3 0309 	sub.w	r3, r3, r9
	  if (__xlen > capacity())
   b698a:	4543      	cmp	r3, r8
   b698c:	d255      	bcs.n	b6a3a <_ZN7RailwayaSERKS_.isra.0+0x13e>
	  pointer __result = this->_M_allocate(__n);
   b698e:	4845      	ldr	r0, [pc, #276]	; (b6aa4 <_ZN7RailwayaSERKS_.isra.0+0x1a8>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6990:	ea4f 03a8 	mov.w	r3, r8, asr #2
	  pointer __result = this->_M_allocate(__n);
   b6994:	4358      	muls	r0, r3
   b6996:	f7fd fba5 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b699a:	4607      	mov	r7, r0
	  _ForwardIterator __cur = __result;
   b699c:	4681      	mov	r9, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b699e:	45b2      	cmp	sl, r6
   b69a0:	d020      	beq.n	b69e4 <_ZN7RailwayaSERKS_.isra.0+0xe8>
   b69a2:	f1b9 0f00 	cmp.w	r9, #0
   b69a6:	d003      	beq.n	b69b0 <_ZN7RailwayaSERKS_.isra.0+0xb4>
   b69a8:	4631      	mov	r1, r6
   b69aa:	4648      	mov	r0, r9
   b69ac:	f7fe fb84 	bl	b50b8 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b69b0:	f109 090c 	add.w	r9, r9, #12
   b69b4:	360c      	adds	r6, #12
   b69b6:	e7f2      	b.n	b699e <_ZN7RailwayaSERKS_.isra.0+0xa2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b69b8:	4637      	mov	r7, r6
   b69ba:	e7c1      	b.n	b6940 <_ZN7RailwayaSERKS_.isra.0+0x44>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b69bc:	6923      	ldr	r3, [r4, #16]
   b69be:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b69c0:	429e      	cmp	r6, r3
   b69c2:	d803      	bhi.n	b69cc <_ZN7RailwayaSERKS_.isra.0+0xd0>
   b69c4:	4640      	mov	r0, r8
   b69c6:	f7ff fedd 	bl	b6784 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
    { return std::uninitialized_copy(__first, __last, __result); }
   b69ca:	e7c6      	b.n	b695a <_ZN7RailwayaSERKS_.isra.0+0x5e>
   b69cc:	eb08 0103 	add.w	r1, r8, r3
   b69d0:	4640      	mov	r0, r8
   b69d2:	f7ff fed7 	bl	b6784 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b69d6:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
   b69da:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
   b69de:	1a10      	subs	r0, r2, r0
   b69e0:	4418      	add	r0, r3
   b69e2:	e7f0      	b.n	b69c6 <_ZN7RailwayaSERKS_.isra.0+0xca>
	__destroy(__first, __last);
   b69e4:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b69e8:	f7fe fb05 	bl	b4ff6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	      _M_deallocate(this->_M_impl._M_start,
   b69ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b69ee:	b118      	cbz	r0, b69f8 <_ZN7RailwayaSERKS_.isra.0+0xfc>
			    - this->_M_impl._M_start);
   b69f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b69f2:	1a09      	subs	r1, r1, r0
   b69f4:	f7fd fb55 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b69f8:	6267      	str	r7, [r4, #36]	; 0x24
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b69fa:	4447      	add	r7, r8
   b69fc:	62e7      	str	r7, [r4, #44]	; 0x2c
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b69fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b6a00:	4443      	add	r3, r8
   b6a02:	62a3      	str	r3, [r4, #40]	; 0x28
	this->_M_assign(__str);
   b6a04:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b6a08:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b6a0c:	f004 fc2e 	bl	bb26c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b6a10:	f105 0148 	add.w	r1, r5, #72	; 0x48
   b6a14:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b6a18:	f7fd fc6a 	bl	b42f0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
   b6a1c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b6a1e:	6563      	str	r3, [r4, #84]	; 0x54
   b6a20:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b6a22:	65a3      	str	r3, [r4, #88]	; 0x58
   b6a24:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b6a26:	65e3      	str	r3, [r4, #92]	; 0x5c
   b6a28:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b6a2a:	6623      	str	r3, [r4, #96]	; 0x60
   b6a2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b6a2e:	6663      	str	r3, [r4, #100]	; 0x64
   b6a30:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b6a32:	66a3      	str	r3, [r4, #104]	; 0x68
   b6a34:	b002      	add	sp, #8
   b6a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a3a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   b6a3c:	eba7 0709 	sub.w	r7, r7, r9
	  else if (size() >= __xlen)
   b6a40:	45b8      	cmp	r8, r7
   b6a42:	d80d      	bhi.n	b6a60 <_ZN7RailwayaSERKS_.isra.0+0x164>
   b6a44:	4630      	mov	r0, r6
   b6a46:	464a      	mov	r2, r9
   b6a48:	4651      	mov	r1, sl
   b6a4a:	f7fe fbb1 	bl	b51b0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      : _M_current(__i) { }
   b6a4e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b6a50:	4606      	mov	r6, r0
	  for (; __first != __last; ++__first)
   b6a52:	42b7      	cmp	r7, r6
   b6a54:	d0d3      	beq.n	b69fe <_ZN7RailwayaSERKS_.isra.0+0x102>
      }
   b6a56:	4630      	mov	r0, r6
   b6a58:	f7fd fe74 	bl	b4744 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b6a5c:	360c      	adds	r6, #12
	return *this;
   b6a5e:	e7f8      	b.n	b6a52 <_ZN7RailwayaSERKS_.isra.0+0x156>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6a60:	4b10      	ldr	r3, [pc, #64]	; (b6aa4 <_ZN7RailwayaSERKS_.isra.0+0x1a8>)
   b6a62:	10bf      	asrs	r7, r7, #2
   b6a64:	435f      	muls	r7, r3
   b6a66:	2f00      	cmp	r7, #0
   b6a68:	dd08      	ble.n	b6a7c <_ZN7RailwayaSERKS_.isra.0+0x180>
	      *__result = *__first;
   b6a6a:	4631      	mov	r1, r6
   b6a6c:	4648      	mov	r0, r9
   b6a6e:	f7fe fb67 	bl	b5140 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b6a72:	360c      	adds	r6, #12
	      ++__result;
   b6a74:	f109 090c 	add.w	r9, r9, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6a78:	3f01      	subs	r7, #1
   b6a7a:	e7f4      	b.n	b6a66 <_ZN7RailwayaSERKS_.isra.0+0x16a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a7c:	e9d4 6709 	ldrd	r6, r7, [r4, #36]	; 0x24
   b6a80:	1bb9      	subs	r1, r7, r6
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6a82:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					  __x._M_impl._M_finish,
   b6a84:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6a88:	440e      	add	r6, r1
	      for (; __first != __last; ++__first, (void)++__cur)
   b6a8a:	45b1      	cmp	r9, r6
   b6a8c:	d0b7      	beq.n	b69fe <_ZN7RailwayaSERKS_.isra.0+0x102>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6a8e:	b11f      	cbz	r7, b6a98 <_ZN7RailwayaSERKS_.isra.0+0x19c>
   b6a90:	4631      	mov	r1, r6
   b6a92:	4638      	mov	r0, r7
   b6a94:	f7fe fb10 	bl	b50b8 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b6a98:	360c      	adds	r6, #12
   b6a9a:	370c      	adds	r7, #12
   b6a9c:	e7f5      	b.n	b6a8a <_ZN7RailwayaSERKS_.isra.0+0x18e>
   b6a9e:	bf00      	nop
   b6aa0:	7ffffffc 	.word	0x7ffffffc
   b6aa4:	aaaaaaab 	.word	0xaaaaaaab

000b6aa8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b6aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6aac:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6aae:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6ab0:	480b      	ldr	r0, [pc, #44]	; (b6ae0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x38>)
   b6ab2:	10a4      	asrs	r4, r4, #2
   b6ab4:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6ab6:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6ab8:	4627      	mov	r7, r4
   b6aba:	4690      	mov	r8, r2
   b6abc:	2f00      	cmp	r7, #0
   b6abe:	dd08      	ble.n	b6ad2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x2a>
	      *__result = *__first;
   b6ac0:	4629      	mov	r1, r5
   b6ac2:	4640      	mov	r0, r8
   b6ac4:	f7ff ff1a 	bl	b68fc <_ZN7RailwayaSERKS_.isra.0>
	      ++__first;
   b6ac8:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b6aca:	f108 086c 	add.w	r8, r8, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6ace:	3f01      	subs	r7, #1
   b6ad0:	e7f4      	b.n	b6abc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x14>
	  return __result;
   b6ad2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b6ad6:	206c      	movs	r0, #108	; 0x6c
   b6ad8:	fb00 6004 	mla	r0, r0, r4, r6
   b6adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6ae0:	684bda13 	.word	0x684bda13

000b6ae4 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>:
      if (&__x != this)
   b6ae4:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b6ae6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6aea:	4604      	mov	r4, r0
   b6aec:	460f      	mov	r7, r1
      if (&__x != this)
   b6aee:	d02c      	beq.n	b6b4a <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x66>
   b6af0:	e9d1 5a00 	ldrd	r5, sl, [r1]
			 - this->_M_impl._M_start); }
   b6af4:	f8d0 9000 	ldr.w	r9, [r0]
   b6af8:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6afa:	ebaa 0805 	sub.w	r8, sl, r5
			 - this->_M_impl._M_start); }
   b6afe:	eba3 0309 	sub.w	r3, r3, r9
	  if (__xlen > capacity())
   b6b02:	4543      	cmp	r3, r8
   b6b04:	d223      	bcs.n	b6b4e <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x6a>
	  pointer __result = this->_M_allocate(__n);
   b6b06:	482a      	ldr	r0, [pc, #168]	; (b6bb0 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xcc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6b08:	ea4f 03a8 	mov.w	r3, r8, asr #2
	  pointer __result = this->_M_allocate(__n);
   b6b0c:	4358      	muls	r0, r3
   b6b0e:	f7fd fb23 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
   b6b12:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b6b14:	4607      	mov	r7, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b6b16:	45aa      	cmp	sl, r5
   b6b18:	d007      	beq.n	b6b2a <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x46>
   b6b1a:	b11f      	cbz	r7, b6b24 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x40>
   b6b1c:	4629      	mov	r1, r5
   b6b1e:	4638      	mov	r0, r7
   b6b20:	f7ff fe3e 	bl	b67a0 <_ZN7RailwayC1ERKS_>
   b6b24:	376c      	adds	r7, #108	; 0x6c
   b6b26:	356c      	adds	r5, #108	; 0x6c
   b6b28:	e7f5      	b.n	b6b16 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x32>
	__destroy(__first, __last);
   b6b2a:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6b2e:	f7fe fa8d 	bl	b504c <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	      _M_deallocate(this->_M_impl._M_start,
   b6b32:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6b34:	b118      	cbz	r0, b6b3e <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x5a>
			    - this->_M_impl._M_start);
   b6b36:	68a1      	ldr	r1, [r4, #8]
   b6b38:	1a09      	subs	r1, r1, r0
   b6b3a:	f7fd fab2 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b6b3e:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b6b40:	4446      	add	r6, r8
   b6b42:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b6b44:	6823      	ldr	r3, [r4, #0]
   b6b46:	4443      	add	r3, r8
   b6b48:	6063      	str	r3, [r4, #4]
    }
   b6b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6b4e:	6846      	ldr	r6, [r0, #4]
   b6b50:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b6b54:	45b0      	cmp	r8, r6
   b6b56:	d80d      	bhi.n	b6b74 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x90>
			      _Category>::__copy_m(__first, __last, __result);
   b6b58:	4628      	mov	r0, r5
   b6b5a:	464a      	mov	r2, r9
   b6b5c:	4651      	mov	r1, sl
   b6b5e:	f7ff ffa3 	bl	b6aa8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      : _M_current(__i) { }
   b6b62:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b6b64:	4605      	mov	r5, r0
	  for (; __first != __last; ++__first)
   b6b66:	42ae      	cmp	r6, r5
   b6b68:	d0ec      	beq.n	b6b44 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x60>
      __pointer->~_Tp();
   b6b6a:	4628      	mov	r0, r5
   b6b6c:	f7fe fa4e 	bl	b500c <_ZN7RailwayD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b6b70:	356c      	adds	r5, #108	; 0x6c
	return *this;
   b6b72:	e7f8      	b.n	b6b66 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x82>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6b74:	4b0e      	ldr	r3, [pc, #56]	; (b6bb0 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xcc>)
   b6b76:	10b6      	asrs	r6, r6, #2
   b6b78:	435e      	muls	r6, r3
   b6b7a:	2e00      	cmp	r6, #0
   b6b7c:	dd08      	ble.n	b6b90 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xac>
	      *__result = *__first;
   b6b7e:	4629      	mov	r1, r5
   b6b80:	4648      	mov	r0, r9
   b6b82:	f7ff febb 	bl	b68fc <_ZN7RailwayaSERKS_.isra.0>
	      ++__first;
   b6b86:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b6b88:	f109 096c 	add.w	r9, r9, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6b8c:	3e01      	subs	r6, #1
   b6b8e:	e7f4      	b.n	b6b7a <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x96>
   b6b90:	e9d4 5600 	ldrd	r5, r6, [r4]
   b6b94:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6b96:	683d      	ldr	r5, [r7, #0]
					  __x._M_impl._M_finish,
   b6b98:	687f      	ldr	r7, [r7, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b6b9a:	440d      	add	r5, r1
   b6b9c:	42af      	cmp	r7, r5
   b6b9e:	d0d1      	beq.n	b6b44 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0x60>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6ba0:	b11e      	cbz	r6, b6baa <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xc6>
   b6ba2:	4629      	mov	r1, r5
   b6ba4:	4630      	mov	r0, r6
   b6ba6:	f7ff fdfb 	bl	b67a0 <_ZN7RailwayC1ERKS_>
   b6baa:	356c      	adds	r5, #108	; 0x6c
   b6bac:	366c      	adds	r6, #108	; 0x6c
   b6bae:	e7f5      	b.n	b6b9c <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0+0xb8>
   b6bb0:	684bda13 	.word	0x684bda13

000b6bb4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b6bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6bb8:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6bba:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6bbc:	4810      	ldr	r0, [pc, #64]	; (b6c00 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x4c>)
   b6bbe:	10e4      	asrs	r4, r4, #3
   b6bc0:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b6bc2:	4617      	mov	r7, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6bc4:	46a0      	mov	r8, r4
   b6bc6:	4616      	mov	r6, r2
   b6bc8:	f1b8 0f00 	cmp.w	r8, #0
   b6bcc:	dd10      	ble.n	b6bf0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x3c>
   b6bce:	4629      	mov	r1, r5
   b6bd0:	4630      	mov	r0, r6
   b6bd2:	f7ff ff87 	bl	b6ae4 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
   b6bd6:	f105 010c 	add.w	r1, r5, #12
   b6bda:	f106 000c 	add.w	r0, r6, #12
   b6bde:	f004 fb45 	bl	bb26c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b6be2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b6be4:	6273      	str	r3, [r6, #36]	; 0x24
	      ++__first;
   b6be6:	3528      	adds	r5, #40	; 0x28
	      ++__result;
   b6be8:	3628      	adds	r6, #40	; 0x28
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b6bea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6bee:	e7eb      	b.n	b6bc8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_+0x14>
	  return __result;
   b6bf0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b6bf4:	2028      	movs	r0, #40	; 0x28
   b6bf6:	fb00 7004 	mla	r0, r0, r4, r7
   b6bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6bfe:	bf00      	nop
   b6c00:	cccccccd 	.word	0xcccccccd

000b6c04 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>:
      vector<_Tp, _Alloc>::
   b6c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      return __last - __first;
   b6c08:	eba2 0801 	sub.w	r8, r2, r1
			 - this->_M_impl._M_start); }
   b6c0c:	6883      	ldr	r3, [r0, #8]
   b6c0e:	4617      	mov	r7, r2
   b6c10:	6802      	ldr	r2, [r0, #0]
   b6c12:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b6c14:	4598      	cmp	r8, r3
      vector<_Tp, _Alloc>::
   b6c16:	4604      	mov	r4, r0
   b6c18:	460e      	mov	r6, r1
	if (__len > capacity())
   b6c1a:	d92a      	bls.n	b6c72 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6e>
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b6c1c:	4b26      	ldr	r3, [pc, #152]	; (b6cb8 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xb4>)
   b6c1e:	4598      	cmp	r8, r3
   b6c20:	d902      	bls.n	b6c28 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x24>
	  __throw_length_error(
   b6c22:	4826      	ldr	r0, [pc, #152]	; (b6cbc <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xb8>)
   b6c24:	f004 fad2 	bl	bb1cc <_ZSt20__throw_length_errorPKc>
	  pointer __result = this->_M_allocate(__n);
   b6c28:	4825      	ldr	r0, [pc, #148]	; (b6cc0 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xbc>)
   b6c2a:	ea4f 03a8 	mov.w	r3, r8, asr #2
   b6c2e:	4358      	muls	r0, r3
   b6c30:	f7fd fa92 	bl	b4158 <_ZNSt12_Vector_baseI7RailwaySaIS0_EE11_M_allocateEj.isra.0>
   b6c34:	4605      	mov	r5, r0
	  _ForwardIterator __cur = __result;
   b6c36:	4681      	mov	r9, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b6c38:	42b7      	cmp	r7, r6
   b6c3a:	d00a      	beq.n	b6c52 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x4e>
   b6c3c:	f1b9 0f00 	cmp.w	r9, #0
   b6c40:	d003      	beq.n	b6c4a <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x46>
   b6c42:	4631      	mov	r1, r6
   b6c44:	4648      	mov	r0, r9
   b6c46:	f7ff fdab 	bl	b67a0 <_ZN7RailwayC1ERKS_>
   b6c4a:	366c      	adds	r6, #108	; 0x6c
   b6c4c:	f109 096c 	add.w	r9, r9, #108	; 0x6c
   b6c50:	e7f2      	b.n	b6c38 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x34>
	__destroy(__first, __last);
   b6c52:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6c56:	f7fe f9f9 	bl	b504c <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	    _M_deallocate(this->_M_impl._M_start,
   b6c5a:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6c5c:	b118      	cbz	r0, b6c66 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x62>
			  - this->_M_impl._M_start);
   b6c5e:	68a1      	ldr	r1, [r4, #8]
   b6c60:	1a09      	subs	r1, r1, r0
   b6c62:	f7fd fa1e 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
   b6c66:	6025      	str	r5, [r4, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b6c68:	4445      	add	r5, r8
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b6c6a:	e9c4 5501 	strd	r5, r5, [r4, #4]
	      std::__uninitialized_copy_a(__mid, __last,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
	  }
      }
   b6c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6c72:	6845      	ldr	r5, [r0, #4]
   b6c74:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b6c76:	45a8      	cmp	r8, r5
   b6c78:	d80b      	bhi.n	b6c92 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x8e>
			      _Category>::__copy_m(__first, __last, __result);
   b6c7a:	4639      	mov	r1, r7
   b6c7c:	4630      	mov	r0, r6
   b6c7e:	f7ff ff13 	bl	b6aa8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b6c82:	6861      	ldr	r1, [r4, #4]
   b6c84:	4288      	cmp	r0, r1
   b6c86:	4605      	mov	r5, r0
   b6c88:	d0f1      	beq.n	b6c6e <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6a>
   b6c8a:	f7fe f9df 	bl	b504c <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RailwayEEvT_S4_>
	    this->_M_impl._M_finish = __pos;
   b6c8e:	6065      	str	r5, [r4, #4]
   b6c90:	e7ed      	b.n	b6c6e <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6a>
	__i += __n;
   b6c92:	440d      	add	r5, r1
   b6c94:	4630      	mov	r0, r6
   b6c96:	4629      	mov	r1, r5
   b6c98:	f7ff ff06 	bl	b6aa8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6c9c:	6866      	ldr	r6, [r4, #4]
   b6c9e:	42af      	cmp	r7, r5
   b6ca0:	d007      	beq.n	b6cb2 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xae>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b6ca2:	b11e      	cbz	r6, b6cac <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0xa8>
   b6ca4:	4629      	mov	r1, r5
   b6ca6:	4630      	mov	r0, r6
   b6ca8:	f7ff fd7a 	bl	b67a0 <_ZN7RailwayC1ERKS_>
   b6cac:	356c      	adds	r5, #108	; 0x6c
   b6cae:	366c      	adds	r6, #108	; 0x6c
   b6cb0:	e7f5      	b.n	b6c9e <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x9a>
	    this->_M_impl._M_finish =
   b6cb2:	6066      	str	r6, [r4, #4]
      }
   b6cb4:	e7db      	b.n	b6c6e <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x6a>
   b6cb6:	bf00      	nop
   b6cb8:	7fffffa4 	.word	0x7fffffa4
   b6cbc:	000be3bb 	.word	0x000be3bb
   b6cc0:	684bda13 	.word	0x684bda13

000b6cc4 <setup>:
void setup(){
   b6cc4:	b570      	push	{r4, r5, r6, lr}
   b6cc6:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
  Serial.begin(9600);
   b6cca:	f004 f8c5 	bl	bae58 <_Z16_fetch_usbserialv>
   b6cce:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6cd2:	f004 f8b5 	bl	bae40 <_ZN9USBSerial5beginEl>
  delay(500);
   b6cd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6cda:	f001 ff43 	bl	b8b64 <delay>
  BLE.on();
   b6cde:	f002 faad 	bl	b923c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6ce2:	f002 faf5 	bl	b92d0 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   b6ce6:	f002 faa9 	bl	b923c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6cea:	4a97      	ldr	r2, [pc, #604]	; (b6f48 <setup+0x284>)
   b6cec:	4d97      	ldr	r5, [pc, #604]	; (b6f4c <setup+0x288>)
   b6cee:	4601      	mov	r1, r0
   b6cf0:	a817      	add	r0, sp, #92	; 0x5c
   b6cf2:	f002 ffd7 	bl	b9ca4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6cf6:	a817      	add	r0, sp, #92	; 0x5c
   b6cf8:	f002 fb91 	bl	b941e <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b6cfc:	f002 fa9e 	bl	b923c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6d00:	4a93      	ldr	r2, [pc, #588]	; (b6f50 <setup+0x28c>)
   b6d02:	4601      	mov	r1, r0
   b6d04:	a817      	add	r0, sp, #92	; 0x5c
   b6d06:	f002 ffcd 	bl	b9ca4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b6d0a:	a817      	add	r0, sp, #92	; 0x5c
   b6d0c:	f002 fb87 	bl	b941e <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   b6d10:	a802      	add	r0, sp, #8
   b6d12:	f002 fcba 	bl	b968a <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b6d16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d18:	ac11      	add	r4, sp, #68	; 0x44
   b6d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d1c:	682e      	ldr	r6, [r5, #0]
   b6d1e:	6026      	str	r6, [r4, #0]
        BleUuid tempUUID(uuid);
   b6d20:	ad11      	add	r5, sp, #68	; 0x44
   b6d22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d24:	ac17      	add	r4, sp, #92	; 0x5c
   b6d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6d28:	a817      	add	r0, sp, #92	; 0x5c
        BleUuid tempUUID(uuid);
   b6d2a:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6d2c:	f002 f888 	bl	b8e40 <_ZNK8particle7BleUuid4typeEv>
   b6d30:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b6d32:	a817      	add	r0, sp, #92	; 0x5c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6d34:	2c00      	cmp	r4, #0
   b6d36:	f040 80e2 	bne.w	b6efe <setup+0x23a>
            uint16_t uuid16 = tempUUID.shorted();
   b6d3a:	f002 f89d 	bl	b8e78 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b6d3e:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b6d40:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b6d44:	2302      	movs	r3, #2
   b6d46:	aa0b      	add	r2, sp, #44	; 0x2c
   b6d48:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b6d4a:	a802      	add	r0, sp, #8
   b6d4c:	f002 fc92 	bl	b9674 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   b6d50:	f002 fa74 	bl	b923c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6d54:	2200      	movs	r2, #0
   b6d56:	a902      	add	r1, sp, #8
   b6d58:	f002 fb04 	bl	b9364 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  request.hostname = "trek.thewcl.com";
   b6d5c:	4c7d      	ldr	r4, [pc, #500]	; (b6f54 <setup+0x290>)

    //loopIndex must point to either the first or last checkpoint, tripleIndex cannot be 0
    void setLoopIndex(int triple, int loop){
        tripleIndex = triple;
   b6d5e:	4e7e      	ldr	r6, [pc, #504]	; (b6f58 <setup+0x294>)
  acquireWireBuffer();
   b6d60:	a817      	add	r0, sp, #92	; 0x5c
   b6d62:	f7fd fcc5 	bl	b46f0 <_Z17acquireWireBufferv>
  Wire.begin();
   b6d66:	f004 f9c5 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b6d6a:	f003 f927 	bl	b9fbc <_ZN7TwoWire5beginEv>
  request.hostname = "trek.thewcl.com";
   b6d6e:	497b      	ldr	r1, [pc, #492]	; (b6f5c <setup+0x298>)
   b6d70:	4620      	mov	r0, r4
   b6d72:	f003 fbd8 	bl	ba526 <_ZN6StringaSEPKc>
  request.port = 80;
   b6d76:	2350      	movs	r3, #80	; 0x50
   b6d78:	4979      	ldr	r1, [pc, #484]	; (b6f60 <setup+0x29c>)
   b6d7a:	63a3      	str	r3, [r4, #56]	; 0x38
   b6d7c:	4c79      	ldr	r4, [pc, #484]	; (b6f64 <setup+0x2a0>)
        loopIndex = loop;
   b6d7e:	2502      	movs	r5, #2
   b6d80:	2006      	movs	r0, #6
   b6d82:	e9c1 5015 	strd	r5, r0, [r1, #84]	; 0x54
   b6d86:	e9c4 5015 	strd	r5, r0, [r4, #84]	; 0x54
        tripleIndex = triple;
   b6d8a:	4d77      	ldr	r5, [pc, #476]	; (b6f68 <setup+0x2a4>)
        loopIndex = loop;
   b6d8c:	2203      	movs	r2, #3
   b6d8e:	2307      	movs	r3, #7
  ctaRailways = {brownLineCTA, orangeLineCTA, pinkLineCTA, purpleLineCTA, greenLineCTA};
   b6d90:	a817      	add	r0, sp, #92	; 0x5c
   b6d92:	e9c5 2315 	strd	r2, r3, [r5, #84]	; 0x54
   b6d96:	e9c6 2315 	strd	r2, r3, [r6, #84]	; 0x54
   b6d9a:	f7ff fd01 	bl	b67a0 <_ZN7RailwayC1ERKS_>
   b6d9e:	4631      	mov	r1, r6
   b6da0:	a832      	add	r0, sp, #200	; 0xc8
   b6da2:	f7ff fcfd 	bl	b67a0 <_ZN7RailwayC1ERKS_>
   b6da6:	4629      	mov	r1, r5
   b6da8:	a84d      	add	r0, sp, #308	; 0x134
   b6daa:	f7ff fcf9 	bl	b67a0 <_ZN7RailwayC1ERKS_>
   b6dae:	4621      	mov	r1, r4
   b6db0:	a868      	add	r0, sp, #416	; 0x1a0
   b6db2:	f7ff fcf5 	bl	b67a0 <_ZN7RailwayC1ERKS_>
   b6db6:	496d      	ldr	r1, [pc, #436]	; (b6f6c <setup+0x2a8>)
   b6db8:	a883      	add	r0, sp, #524	; 0x20c
   b6dba:	f7ff fcf1 	bl	b67a0 <_ZN7RailwayC1ERKS_>
	this->_M_assign_aux(__l.begin(), __l.end(),
   b6dbe:	486c      	ldr	r0, [pc, #432]	; (b6f70 <setup+0x2ac>)
   b6dc0:	aa9e      	add	r2, sp, #632	; 0x278
   b6dc2:	a917      	add	r1, sp, #92	; 0x5c
   b6dc4:	f7ff ff1e 	bl	b6c04 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>
   b6dc8:	2404      	movs	r4, #4
   b6dca:	256c      	movs	r5, #108	; 0x6c
   b6dcc:	ab17      	add	r3, sp, #92	; 0x5c
   b6dce:	fb05 3004 	mla	r0, r5, r4, r3
   b6dd2:	f7fe f91b 	bl	b500c <_ZN7RailwayD1Ev>
   b6dd6:	3c01      	subs	r4, #1
   b6dd8:	d2f8      	bcs.n	b6dcc <setup+0x108>
  mbtaRailways = {redLineMBTA, greenLine1MBTA, greenLine2MBTA, blueLineMBTA, orangeLineMBTA};
   b6dda:	4966      	ldr	r1, [pc, #408]	; (b6f74 <setup+0x2b0>)
   b6ddc:	a817      	add	r0, sp, #92	; 0x5c
   b6dde:	f7ff fcdf 	bl	b67a0 <_ZN7RailwayC1ERKS_>
   b6de2:	4965      	ldr	r1, [pc, #404]	; (b6f78 <setup+0x2b4>)
   b6de4:	a832      	add	r0, sp, #200	; 0xc8
   b6de6:	f7ff fcdb 	bl	b67a0 <_ZN7RailwayC1ERKS_>
   b6dea:	4964      	ldr	r1, [pc, #400]	; (b6f7c <setup+0x2b8>)
   b6dec:	a84d      	add	r0, sp, #308	; 0x134
   b6dee:	f7ff fcd7 	bl	b67a0 <_ZN7RailwayC1ERKS_>
   b6df2:	4963      	ldr	r1, [pc, #396]	; (b6f80 <setup+0x2bc>)
   b6df4:	a868      	add	r0, sp, #416	; 0x1a0
   b6df6:	f7ff fcd3 	bl	b67a0 <_ZN7RailwayC1ERKS_>
   b6dfa:	4962      	ldr	r1, [pc, #392]	; (b6f84 <setup+0x2c0>)
   b6dfc:	a883      	add	r0, sp, #524	; 0x20c
   b6dfe:	f7ff fccf 	bl	b67a0 <_ZN7RailwayC1ERKS_>
   b6e02:	4861      	ldr	r0, [pc, #388]	; (b6f88 <setup+0x2c4>)
   b6e04:	aa9e      	add	r2, sp, #632	; 0x278
   b6e06:	a917      	add	r1, sp, #92	; 0x5c
   b6e08:	f7ff fefc 	bl	b6c04 <_ZNSt6vectorI7RailwaySaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>
   b6e0c:	2404      	movs	r4, #4
   b6e0e:	256c      	movs	r5, #108	; 0x6c
   b6e10:	ab17      	add	r3, sp, #92	; 0x5c
   b6e12:	fb05 3004 	mla	r0, r5, r4, r3
   b6e16:	f7fe f8f9 	bl	b500c <_ZN7RailwayD1Ev>
   b6e1a:	3c01      	subs	r4, #1
   b6e1c:	d2f8      	bcs.n	b6e10 <setup+0x14c>
  cities = {City(ctaRailways, "cta", 5), City(mbtaRailways, "mbta", 5)};
   b6e1e:	4954      	ldr	r1, [pc, #336]	; (b6f70 <setup+0x2ac>)
   b6e20:	a805      	add	r0, sp, #20
   b6e22:	f7ff fd2d 	bl	b6880 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b6e26:	4959      	ldr	r1, [pc, #356]	; (b6f8c <setup+0x2c8>)
   b6e28:	a80b      	add	r0, sp, #44	; 0x2c
   b6e2a:	f7fd f96d 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b6e2e:	2400      	movs	r4, #0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b6e30:	ab1c      	add	r3, sp, #112	; 0x70
        std::vector<Railway> railways;
        std::string name;
        int slaveCountExpected;

        City(std::vector<Railway> railwaysInput, std::string nameInput, int slaveCountExpectedInput){
            railways = railwaysInput;
   b6e32:	a905      	add	r1, sp, #20
   b6e34:	a817      	add	r0, sp, #92	; 0x5c
      { _M_string_length = __length; }
   b6e36:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
   b6e3a:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
   b6e3e:	9419      	str	r4, [sp, #100]	; 0x64
   b6e40:	f88d 4070 	strb.w	r4, [sp, #112]	; 0x70
   b6e44:	f7ff fe4e 	bl	b6ae4 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
	this->_M_assign(__str);
   b6e48:	a90b      	add	r1, sp, #44	; 0x2c
   b6e4a:	a81a      	add	r0, sp, #104	; 0x68
   b6e4c:	f004 fa0e 	bl	bb26c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
            name = nameInput;
            slaveCountExpected = slaveCountExpectedInput;
   b6e50:	2505      	movs	r5, #5
   b6e52:	494d      	ldr	r1, [pc, #308]	; (b6f88 <setup+0x2c4>)
   b6e54:	9520      	str	r5, [sp, #128]	; 0x80
   b6e56:	a808      	add	r0, sp, #32
   b6e58:	f7ff fd12 	bl	b6880 <_ZNSt6vectorI7RailwaySaIS0_EEC1ERKS2_>
   b6e5c:	494c      	ldr	r1, [pc, #304]	; (b6f90 <setup+0x2cc>)
   b6e5e:	a811      	add	r0, sp, #68	; 0x44
   b6e60:	f7fd f952 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b6e64:	ab26      	add	r3, sp, #152	; 0x98
      { _M_string_length = __length; }
   b6e66:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
   b6e6a:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   b6e6e:	9423      	str	r4, [sp, #140]	; 0x8c
   b6e70:	f88d 4098 	strb.w	r4, [sp, #152]	; 0x98
            railways = railwaysInput;
   b6e74:	a908      	add	r1, sp, #32
			 - this->_M_impl._M_start); }
   b6e76:	4c47      	ldr	r4, [pc, #284]	; (b6f94 <setup+0x2d0>)
   b6e78:	a821      	add	r0, sp, #132	; 0x84
   b6e7a:	f7ff fe33 	bl	b6ae4 <_ZNSt6vectorI7RailwaySaIS0_EEaSERKS2_.isra.0>
	this->_M_assign(__str);
   b6e7e:	a911      	add	r1, sp, #68	; 0x44
   b6e80:	a824      	add	r0, sp, #144	; 0x90
   b6e82:	f004 f9f3 	bl	bb26c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b6e86:	6822      	ldr	r2, [r4, #0]
   b6e88:	68a3      	ldr	r3, [r4, #8]
            slaveCountExpected = slaveCountExpectedInput;
   b6e8a:	952a      	str	r5, [sp, #168]	; 0xa8
   b6e8c:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b6e8e:	2b4f      	cmp	r3, #79	; 0x4f
   b6e90:	d83d      	bhi.n	b6f0e <setup+0x24a>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6e92:	2050      	movs	r0, #80	; 0x50
   b6e94:	f7fd f8ff 	bl	b4096 <_Znwj>
	__uninit_copy(__first, __last, __result);
   b6e98:	a92b      	add	r1, sp, #172	; 0xac
   b6e9a:	4602      	mov	r2, r0
   b6e9c:	4605      	mov	r5, r0
   b6e9e:	a817      	add	r0, sp, #92	; 0x5c
   b6ea0:	f7ff fd14 	bl	b68cc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>
	__destroy(__first, __last);
   b6ea4:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6ea8:	f7fe f8e9 	bl	b507e <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	    _M_deallocate(this->_M_impl._M_start,
   b6eac:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6eae:	b118      	cbz	r0, b6eb8 <setup+0x1f4>
			  - this->_M_impl._M_start);
   b6eb0:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b6eb2:	1a09      	subs	r1, r1, r0
   b6eb4:	f7fd f8f5 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
   b6eb8:	4b36      	ldr	r3, [pc, #216]	; (b6f94 <setup+0x2d0>)
   b6eba:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b6ebc:	3550      	adds	r5, #80	; 0x50
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b6ebe:	e9c3 5501 	strd	r5, r5, [r3, #4]
      { _M_dispose(); }
   b6ec2:	a824      	add	r0, sp, #144	; 0x90
   b6ec4:	f004 f9b4 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
class City{
   b6ec8:	a821      	add	r0, sp, #132	; 0x84
   b6eca:	f7fe f8ca 	bl	b5062 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b6ece:	a81a      	add	r0, sp, #104	; 0x68
   b6ed0:	f004 f9ae 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6ed4:	a817      	add	r0, sp, #92	; 0x5c
   b6ed6:	f7fe f8c4 	bl	b5062 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b6eda:	a811      	add	r0, sp, #68	; 0x44
   b6edc:	f004 f9a8 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6ee0:	a808      	add	r0, sp, #32
   b6ee2:	f7fe f8be 	bl	b5062 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
   b6ee6:	a80b      	add	r0, sp, #44	; 0x2c
   b6ee8:	f004 f9a2 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6eec:	a805      	add	r0, sp, #20
   b6eee:	f7fe f8b8 	bl	b5062 <_ZNSt6vectorI7RailwaySaIS0_EED1Ev>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b6ef2:	9802      	ldr	r0, [sp, #8]
   b6ef4:	f001 fdee 	bl	b8ad4 <free>
}
   b6ef8:	f50d 7d1e 	add.w	sp, sp, #632	; 0x278
   b6efc:	bd70      	pop	{r4, r5, r6, pc}
   b6efe:	f001 ffbd 	bl	b8e7c <_ZNK8particle7BleUuid8rawBytesEv>
   b6f02:	2300      	movs	r3, #0
   b6f04:	9300      	str	r3, [sp, #0]
   b6f06:	4602      	mov	r2, r0
   b6f08:	2310      	movs	r3, #16
   b6f0a:	2107      	movs	r1, #7
   b6f0c:	e71d      	b.n	b6d4a <setup+0x86>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6f0e:	6865      	ldr	r5, [r4, #4]
   b6f10:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b6f12:	2d4f      	cmp	r5, #79	; 0x4f
   b6f14:	d90b      	bls.n	b6f2e <setup+0x26a>
   b6f16:	a92b      	add	r1, sp, #172	; 0xac
   b6f18:	a817      	add	r0, sp, #92	; 0x5c
   b6f1a:	f7ff fe4b 	bl	b6bb4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b6f1e:	6861      	ldr	r1, [r4, #4]
   b6f20:	4288      	cmp	r0, r1
   b6f22:	4605      	mov	r5, r0
   b6f24:	d0cd      	beq.n	b6ec2 <setup+0x1fe>
   b6f26:	f7fe f8aa 	bl	b507e <_ZNSt12_Destroy_auxILb0EE9__destroyIP4CityEEvT_S4_>
	    this->_M_impl._M_finish = __pos;
   b6f2a:	6065      	str	r5, [r4, #4]
   b6f2c:	e7c9      	b.n	b6ec2 <setup+0x1fe>
   b6f2e:	ab17      	add	r3, sp, #92	; 0x5c
   b6f30:	441d      	add	r5, r3
   b6f32:	4629      	mov	r1, r5
   b6f34:	4618      	mov	r0, r3
   b6f36:	f7ff fe3d 	bl	b6bb4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK4CityPS3_EET0_T_S8_S7_>
   b6f3a:	6862      	ldr	r2, [r4, #4]
   b6f3c:	a92b      	add	r1, sp, #172	; 0xac
   b6f3e:	4628      	mov	r0, r5
   b6f40:	f7ff fcc4 	bl	b68cc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK4CityPS2_EET0_T_S7_S6_>
	    this->_M_impl._M_finish =
   b6f44:	6060      	str	r0, [r4, #4]
   b6f46:	e7bc      	b.n	b6ec2 <setup+0x1fe>
   b6f48:	2003e6ac 	.word	0x2003e6ac
   b6f4c:	200352bc 	.word	0x200352bc
   b6f50:	2003e694 	.word	0x2003e694
   b6f54:	2003e634 	.word	0x2003e634
   b6f58:	20037de0 	.word	0x20037de0
   b6f5c:	000be561 	.word	0x000be561
   b6f60:	200353e0 	.word	0x200353e0
   b6f64:	2003e4f0 	.word	0x2003e4f0
   b6f68:	2003e484 	.word	0x2003e484
   b6f6c:	20035544 	.word	0x20035544
   b6f70:	20035460 	.word	0x20035460
   b6f74:	2003e5c8 	.word	0x2003e5c8
   b6f78:	2003546c 	.word	0x2003546c
   b6f7c:	200354d8 	.word	0x200354d8
   b6f80:	20035374 	.word	0x20035374
   b6f84:	20037e4c 	.word	0x20037e4c
   b6f88:	20037dd4 	.word	0x20037dd4
   b6f8c:	000be571 	.word	0x000be571
   b6f90:	000be575 	.word	0x000be575
   b6f94:	20035450 	.word	0x20035450

000b6f98 <_GLOBAL__sub_I_SystemMode>:
   b6f98:	2001      	movs	r0, #1
   b6f9a:	f7fe ba17 	b.w	b53cc <_Z41__static_initialization_and_destruction_0ii.constprop.0>
	...

000b6fa0 <loop>:
void loop(){
   b6fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6fa4:	ed2d 8b06 	vpush	{d8-d10}
        WLanCredentials creds = credentials.getHalCredentials();
        network_set_credentials(*this, 0, &creds, NULL);
    }

    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
   b6fa8:	4b53      	ldr	r3, [pc, #332]	; (b70f8 <loop+0x158>)
   b6faa:	2200      	movs	r2, #0
   b6fac:	b0b7      	sub	sp, #220	; 0xdc
   b6fae:	6858      	ldr	r0, [r3, #4]
   b6fb0:	4611      	mov	r1, r2
   b6fb2:	f001 fd57 	bl	b8a64 <network_has_credentials>
  if(WiFi.hasCredentials() && userInput){
   b6fb6:	2800      	cmp	r0, #0
   b6fb8:	f000 84f5 	beq.w	b79a6 <loop+0xa06>
   b6fbc:	4b4f      	ldr	r3, [pc, #316]	; (b70fc <loop+0x15c>)
   b6fbe:	781b      	ldrb	r3, [r3, #0]
   b6fc0:	2b00      	cmp	r3, #0
   b6fc2:	f000 84f0 	beq.w	b79a6 <loop+0xa06>
      : _M_current(__i) { }
   b6fc6:	f8df 817c 	ldr.w	r8, [pc, #380]	; b7144 <loop+0x1a4>
      Serial.printf("%i, ", i);
   b6fca:	4d4d      	ldr	r5, [pc, #308]	; (b7100 <loop+0x160>)
    Serial.println("loop start");
   b6fcc:	f003 ff44 	bl	bae58 <_Z16_fetch_usbserialv>
   b6fd0:	494c      	ldr	r1, [pc, #304]	; (b7104 <loop+0x164>)
   b6fd2:	f003 f9b6 	bl	ba342 <_ZN5Print7printlnEPKc>
   b6fd6:	e9d8 4600 	ldrd	r4, r6, [r8]
    for(int i : sequenceArr){
   b6fda:	42b4      	cmp	r4, r6
   b6fdc:	d009      	beq.n	b6ff2 <loop+0x52>
   b6fde:	f854 2b04 	ldr.w	r2, [r4], #4
   b6fe2:	9202      	str	r2, [sp, #8]
      Serial.printf("%i, ", i);
   b6fe4:	f003 ff38 	bl	bae58 <_Z16_fetch_usbserialv>
   b6fe8:	9a02      	ldr	r2, [sp, #8]
   b6fea:	4629      	mov	r1, r5
   b6fec:	f7fd fa00 	bl	b43f0 <_ZN5Print6printfEPKcz>
	return *this;
   b6ff0:	e7f3      	b.n	b6fda <loop+0x3a>
    Serial.println();
   b6ff2:	f003 ff31 	bl	bae58 <_Z16_fetch_usbserialv>
   b6ff6:	f003 f998 	bl	ba32a <_ZN5Print7printlnEv>
    cityIndexBuffer = cityIndex;
   b6ffa:	4b43      	ldr	r3, [pc, #268]	; (b7108 <loop+0x168>)
   b6ffc:	f8df a140 	ldr.w	sl, [pc, #320]	; b7140 <loop+0x1a0>
   b7000:	681b      	ldr	r3, [r3, #0]
   b7002:	f8ca 3000 	str.w	r3, [sl]
    for(int j = 0; j < cities[cityIndexBuffer].railways.size(); j++){
   b7006:	2300      	movs	r3, #0
	return *(this->_M_impl._M_start + __n);
   b7008:	4e40      	ldr	r6, [pc, #256]	; (b710c <loop+0x16c>)
   b700a:	f8da 2000 	ldr.w	r2, [sl]
   b700e:	6831      	ldr	r1, [r6, #0]
   b7010:	9302      	str	r3, [sp, #8]
   b7012:	2528      	movs	r5, #40	; 0x28
   b7014:	436a      	muls	r2, r5
   b7016:	188b      	adds	r3, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7018:	588a      	ldr	r2, [r1, r2]
   b701a:	685b      	ldr	r3, [r3, #4]
   b701c:	1a9b      	subs	r3, r3, r2
   b701e:	4a3c      	ldr	r2, [pc, #240]	; (b7110 <loop+0x170>)
   b7020:	109b      	asrs	r3, r3, #2
   b7022:	4353      	muls	r3, r2
   b7024:	9a02      	ldr	r2, [sp, #8]
   b7026:	4293      	cmp	r3, r2
   b7028:	f240 844a 	bls.w	b78c0 <loop+0x920>
      if(cityIndex == -1){
   b702c:	4b36      	ldr	r3, [pc, #216]	; (b7108 <loop+0x168>)
   b702e:	681b      	ldr	r3, [r3, #0]
   b7030:	3301      	adds	r3, #1
   b7032:	f000 84b8 	beq.w	b79a6 <loop+0xa06>
      delay(1000);
   b7036:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b703a:	f001 fd93 	bl	b8b64 <delay>
	StringSumHelper(const char *p) : String(p) {}
   b703e:	4935      	ldr	r1, [pc, #212]	; (b7114 <loop+0x174>)
   b7040:	a817      	add	r0, sp, #92	; 0x5c
   b7042:	f003 fa28 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
	return *(this->_M_impl._M_start + __n);
   b7046:	f8da 2000 	ldr.w	r2, [sl]
      { return _M_dataplus._M_p; }
   b704a:	6833      	ldr	r3, [r6, #0]
   b704c:	fb05 3302 	mla	r3, r5, r2, r3
      request.path = "/loop-tracks/" + String(cities[cityIndexBuffer].name.c_str()) + "?lines=" + String(cities[cityIndexBuffer].railways[j].name.c_str());
   b7050:	a813      	add	r0, sp, #76	; 0x4c
   b7052:	68d9      	ldr	r1, [r3, #12]
   b7054:	f003 fa1f 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
   b7058:	a913      	add	r1, sp, #76	; 0x4c
   b705a:	a817      	add	r0, sp, #92	; 0x5c
   b705c:	f003 fab0 	bl	ba5c0 <_ZplRK15StringSumHelperRK6String>
   b7060:	492d      	ldr	r1, [pc, #180]	; (b7118 <loop+0x178>)
   b7062:	f003 fab9 	bl	ba5d8 <_ZplRK15StringSumHelperPKc>
   b7066:	9b02      	ldr	r3, [sp, #8]
   b7068:	6832      	ldr	r2, [r6, #0]
   b706a:	246c      	movs	r4, #108	; 0x6c
   b706c:	435c      	muls	r4, r3
   b706e:	f8da 3000 	ldr.w	r3, [sl]
   b7072:	436b      	muls	r3, r5
   b7074:	4607      	mov	r7, r0
   b7076:	58d3      	ldr	r3, [r2, r3]
   b7078:	4423      	add	r3, r4
   b707a:	a81b      	add	r0, sp, #108	; 0x6c
   b707c:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b707e:	f003 fa0a 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
   b7082:	a91b      	add	r1, sp, #108	; 0x6c
   b7084:	4638      	mov	r0, r7
   b7086:	f003 fa9b 	bl	ba5c0 <_ZplRK15StringSumHelperRK6String>
   b708a:	4601      	mov	r1, r0
   b708c:	4823      	ldr	r0, [pc, #140]	; (b711c <loop+0x17c>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b708e:	4f24      	ldr	r7, [pc, #144]	; (b7120 <loop+0x180>)
   b7090:	f003 fa32 	bl	ba4f8 <_ZN6StringaSERKS_>
   b7094:	a81b      	add	r0, sp, #108	; 0x6c
   b7096:	f003 f9b3 	bl	ba400 <_ZN6StringD1Ev>
   b709a:	a813      	add	r0, sp, #76	; 0x4c
   b709c:	f003 f9b0 	bl	ba400 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b70a0:	a817      	add	r0, sp, #92	; 0x5c
   b70a2:	f003 f9ad 	bl	ba400 <_ZN6StringD1Ev>
   b70a6:	4b1f      	ldr	r3, [pc, #124]	; (b7124 <loop+0x184>)
   b70a8:	491f      	ldr	r1, [pc, #124]	; (b7128 <loop+0x188>)
   b70aa:	4820      	ldr	r0, [pc, #128]	; (b712c <loop+0x18c>)
   b70ac:	9300      	str	r3, [sp, #0]
   b70ae:	463a      	mov	r2, r7
   b70b0:	4b1f      	ldr	r3, [pc, #124]	; (b7130 <loop+0x190>)
   b70b2:	f000 fcbb 	bl	b7a2c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("parsing");
   b70b6:	f003 fecf 	bl	bae58 <_Z16_fetch_usbserialv>
   b70ba:	491e      	ldr	r1, [pc, #120]	; (b7134 <loop+0x194>)
   b70bc:	f003 f941 	bl	ba342 <_ZN5Print7printlnEPKc>
      parser.clear();
   b70c0:	481d      	ldr	r0, [pc, #116]	; (b7138 <loop+0x198>)
   b70c2:	f000 fe4b 	bl	b7d5c <_ZN10JsonBuffer5clearEv>
	const char * c_str() const { return buffer; }
   b70c6:	6879      	ldr	r1, [r7, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b70c8:	9103      	str	r1, [sp, #12]
   b70ca:	4608      	mov	r0, r1
   b70cc:	f005 f8d0 	bl	bc270 <strlen>
   b70d0:	9903      	ldr	r1, [sp, #12]
   b70d2:	4602      	mov	r2, r0
   b70d4:	4818      	ldr	r0, [pc, #96]	; (b7138 <loop+0x198>)
   b70d6:	f000 fe24 	bl	b7d22 <_ZN10JsonBuffer7addDataEPKcj>
      if(!parser.parse()){
   b70da:	4817      	ldr	r0, [pc, #92]	; (b7138 <loop+0x198>)
   b70dc:	f001 fa2e 	bl	b853c <_ZN10JsonParser5parseEv>
   b70e0:	9003      	str	r0, [sp, #12]
   b70e2:	bb98      	cbnz	r0, b714c <loop+0x1ac>
        Serial.println("parsing failed");
   b70e4:	f003 feb8 	bl	bae58 <_Z16_fetch_usbserialv>
   b70e8:	4914      	ldr	r1, [pc, #80]	; (b713c <loop+0x19c>)
}
   b70ea:	b037      	add	sp, #220	; 0xdc
   b70ec:	ecbd 8b06 	vpop	{d8-d10}
   b70f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("parsing failed");
   b70f4:	f003 b925 	b.w	ba342 <_ZN5Print7printlnEPKc>
   b70f8:	2003e718 	.word	0x2003e718
   b70fc:	2003e6b4 	.word	0x2003e6b4
   b7100:	000be585 	.word	0x000be585
   b7104:	000be57a 	.word	0x000be57a
   b7108:	200350a8 	.word	0x200350a8
   b710c:	20035450 	.word	0x20035450
   b7110:	684bda13 	.word	0x684bda13
   b7114:	000be58a 	.word	0x000be58a
   b7118:	000be598 	.word	0x000be598
   b711c:	2003e65c 	.word	0x2003e65c
   b7120:	2003e680 	.word	0x2003e680
   b7124:	000be5a0 	.word	0x000be5a0
   b7128:	2003e634 	.word	0x2003e634
   b712c:	200355b8 	.word	0x200355b8
   b7130:	200350ac 	.word	0x200350ac
   b7134:	000be5a4 	.word	0x000be5a4
   b7138:	20037eb8 	.word	0x20037eb8
   b713c:	000be5ac 	.word	0x000be5ac
   b7140:	2003545c 	.word	0x2003545c
   b7144:	2003e69c 	.word	0x2003e69c
   b7148:	00000000 	.word	0x00000000
   b714c:	f8da 3000 	ldr.w	r3, [sl]
   b7150:	6832      	ldr	r2, [r6, #0]
        float lat = train.key("latitude").valueFloat();
   b7152:	ed1f 9a03 	vldr	s18, [pc, #-12]	; b7148 <loop+0x1a8>
   b7156:	436b      	muls	r3, r5
      Railway currentRailway = cities[cityIndexBuffer].railways[j];
   b7158:	a81b      	add	r0, sp, #108	; 0x6c
   b715a:	58d1      	ldr	r1, [r2, r3]
   b715c:	4421      	add	r1, r4
   b715e:	f7ff fb1f 	bl	b67a0 <_ZN7RailwayC1ERKS_>
      std::vector<Checkpoint> currentCheckpoints = currentRailway.checkpoints;
   b7162:	a91b      	add	r1, sp, #108	; 0x6c
   b7164:	a807      	add	r0, sp, #28
   b7166:	f7fd fbab 	bl	b48c0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      int count = 0;
   b716a:	f04f 0900 	mov.w	r9, #0
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b716e:	49a2      	ldr	r1, [pc, #648]	; (b73f8 <loop+0x458>)
   b7170:	a80d      	add	r0, sp, #52	; 0x34
   b7172:	f000 fe0d 	bl	b7d90 <_ZNK10JsonParser12getReferenceEv>
   b7176:	4aa1      	ldr	r2, [pc, #644]	; (b73fc <loop+0x45c>)
   b7178:	a90d      	add	r1, sp, #52	; 0x34
   b717a:	a810      	add	r0, sp, #64	; 0x40
   b717c:	f000 ffd8 	bl	b8130 <_ZNK13JsonReference3keyEPKc>
   b7180:	2200      	movs	r2, #0
   b7182:	a910      	add	r1, sp, #64	; 0x40
   b7184:	a813      	add	r0, sp, #76	; 0x4c
   b7186:	f000 fea7 	bl	b7ed8 <_ZNK13JsonReference5indexEj>
   b718a:	4a9d      	ldr	r2, [pc, #628]	; (b7400 <loop+0x460>)
   b718c:	a913      	add	r1, sp, #76	; 0x4c
   b718e:	a817      	add	r0, sp, #92	; 0x5c
   b7190:	f000 ffce 	bl	b8130 <_ZNK13JsonReference3keyEPKc>
   b7194:	464a      	mov	r2, r9
   b7196:	a917      	add	r1, sp, #92	; 0x5c
   b7198:	a80a      	add	r0, sp, #40	; 0x28
   b719a:	f000 fe9d 	bl	b7ed8 <_ZNK13JsonReference5indexEj>
   b719e:	a817      	add	r0, sp, #92	; 0x5c
   b71a0:	f000 fd6e 	bl	b7c80 <_ZN13JsonReferenceD1Ev>
   b71a4:	a813      	add	r0, sp, #76	; 0x4c
   b71a6:	f000 fd6b 	bl	b7c80 <_ZN13JsonReferenceD1Ev>
   b71aa:	a810      	add	r0, sp, #64	; 0x40
   b71ac:	f000 fd68 	bl	b7c80 <_ZN13JsonReferenceD1Ev>
   b71b0:	a80d      	add	r0, sp, #52	; 0x34
   b71b2:	f000 fd65 	bl	b7c80 <_ZN13JsonReferenceD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b71b6:	4a93      	ldr	r2, [pc, #588]	; (b7404 <loop+0x464>)
   b71b8:	a90a      	add	r1, sp, #40	; 0x28
   b71ba:	a817      	add	r0, sp, #92	; 0x5c
   b71bc:	f000 ffb8 	bl	b8130 <_ZNK13JsonReference3keyEPKc>
   b71c0:	a917      	add	r1, sp, #92	; 0x5c
   b71c2:	a813      	add	r0, sp, #76	; 0x4c
   b71c4:	f000 ffce 	bl	b8164 <_ZNK13JsonReference11valueStringEv>
   b71c8:	a817      	add	r0, sp, #92	; 0x5c
   b71ca:	f000 fd59 	bl	b7c80 <_ZN13JsonReferenceD1Ev>
        String destNm = train.key("destination").valueString();
   b71ce:	4a8e      	ldr	r2, [pc, #568]	; (b7408 <loop+0x468>)
   b71d0:	a90a      	add	r1, sp, #40	; 0x28
   b71d2:	a810      	add	r0, sp, #64	; 0x40
   b71d4:	f000 ffac 	bl	b8130 <_ZNK13JsonReference3keyEPKc>
   b71d8:	a910      	add	r1, sp, #64	; 0x40
   b71da:	a817      	add	r0, sp, #92	; 0x5c
   b71dc:	f000 ffc2 	bl	b8164 <_ZNK13JsonReference11valueStringEv>
   b71e0:	a810      	add	r0, sp, #64	; 0x40
   b71e2:	f000 fd4d 	bl	b7c80 <_ZN13JsonReferenceD1Ev>
        int trainDir = train.key("direction").valueInt();
   b71e6:	4a89      	ldr	r2, [pc, #548]	; (b740c <loop+0x46c>)
   b71e8:	a90a      	add	r1, sp, #40	; 0x28
   b71ea:	a810      	add	r0, sp, #64	; 0x40
   b71ec:	f000 ffa0 	bl	b8130 <_ZNK13JsonReference3keyEPKc>
   b71f0:	2100      	movs	r1, #0
   b71f2:	a810      	add	r0, sp, #64	; 0x40
   b71f4:	f000 fe8a 	bl	b7f0c <_ZNK13JsonReference8valueIntEi>
   b71f8:	4604      	mov	r4, r0
   b71fa:	a810      	add	r0, sp, #64	; 0x40
   b71fc:	f000 fd40 	bl	b7c80 <_ZN13JsonReferenceD1Ev>
        float lat = train.key("latitude").valueFloat();
   b7200:	4a83      	ldr	r2, [pc, #524]	; (b7410 <loop+0x470>)
   b7202:	a90a      	add	r1, sp, #40	; 0x28
   b7204:	a810      	add	r0, sp, #64	; 0x40
   b7206:	f000 ff93 	bl	b8130 <_ZNK13JsonReference3keyEPKc>
   b720a:	a810      	add	r0, sp, #64	; 0x40
   b720c:	eeb0 0a49 	vmov.f32	s0, s18
   b7210:	f000 fe88 	bl	b7f24 <_ZNK13JsonReference10valueFloatEf>
   b7214:	a810      	add	r0, sp, #64	; 0x40
   b7216:	eef0 8a40 	vmov.f32	s17, s0
   b721a:	f000 fd31 	bl	b7c80 <_ZN13JsonReferenceD1Ev>
        float lon = train.key("longitude").valueFloat();
   b721e:	4a7d      	ldr	r2, [pc, #500]	; (b7414 <loop+0x474>)
   b7220:	a90a      	add	r1, sp, #40	; 0x28
   b7222:	a810      	add	r0, sp, #64	; 0x40
   b7224:	f000 ff84 	bl	b8130 <_ZNK13JsonReference3keyEPKc>
   b7228:	a810      	add	r0, sp, #64	; 0x40
   b722a:	eeb0 0a49 	vmov.f32	s0, s18
   b722e:	f000 fe79 	bl	b7f24 <_ZNK13JsonReference10valueFloatEf>
   b7232:	a810      	add	r0, sp, #64	; 0x40
   b7234:	eeb0 8a40 	vmov.f32	s16, s0
   b7238:	f000 fd22 	bl	b7c80 <_ZN13JsonReferenceD1Ev>
        if(nextStation.length() <= 1){
   b723c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b723e:	2b01      	cmp	r3, #1
   b7240:	d87f      	bhi.n	b7342 <loop+0x3a2>
          Serial.println("break");
   b7242:	f003 fe09 	bl	bae58 <_Z16_fetch_usbserialv>
   b7246:	4974      	ldr	r1, [pc, #464]	; (b7418 <loop+0x478>)
        if(cityIndexBuffer == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b7248:	4f74      	ldr	r7, [pc, #464]	; (b741c <loop+0x47c>)
          Serial.println("break");
   b724a:	f003 f87a 	bl	ba342 <_ZN5Print7printlnEPKc>
          break;
   b724e:	a817      	add	r0, sp, #92	; 0x5c
   b7250:	f003 f8d6 	bl	ba400 <_ZN6StringD1Ev>
   b7254:	a813      	add	r0, sp, #76	; 0x4c
   b7256:	f003 f8d3 	bl	ba400 <_ZN6StringD1Ev>
   b725a:	a80a      	add	r0, sp, #40	; 0x28
   b725c:	f000 fd10 	bl	b7c80 <_ZN13JsonReferenceD1Ev>
      for(int i = 0; i < 4; i++){
   b7260:	9b02      	ldr	r3, [sp, #8]
   b7262:	2500      	movs	r5, #0
   b7264:	00de      	lsls	r6, r3, #3
        if(cityIndexBuffer == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b7266:	683b      	ldr	r3, [r7, #0]
   b7268:	2b00      	cmp	r3, #0
   b726a:	f040 8272 	bne.w	b7752 <loop+0x7b2>
   b726e:	2d02      	cmp	r5, #2
   b7270:	d006      	beq.n	b7280 <loop+0x2e0>
   b7272:	496b      	ldr	r1, [pc, #428]	; (b7420 <loop+0x480>)
   b7274:	a827      	add	r0, sp, #156	; 0x9c
   b7276:	f7fd fb47 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b727a:	2800      	cmp	r0, #0
   b727c:	f000 8259 	beq.w	b7732 <loop+0x792>
          Wire.beginTransmission(brownLineCTAAdr);
   b7280:	f003 ff38 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b7284:	4b67      	ldr	r3, [pc, #412]	; (b7424 <loop+0x484>)
   b7286:	6819      	ldr	r1, [r3, #0]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b7288:	f002 fece 	bl	ba028 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(String(currentRailway.colors[0].c_str()));
   b728c:	f003 ff32 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b7290:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   b7292:	4604      	mov	r4, r0
   b7294:	6819      	ldr	r1, [r3, #0]
   b7296:	a817      	add	r0, sp, #92	; 0x5c
   b7298:	f003 f8fd 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
   b729c:	9917      	ldr	r1, [sp, #92]	; 0x5c
   b729e:	4620      	mov	r0, r4
   b72a0:	f7fc ffc2 	bl	b4228 <_ZN5Print5writeEPKc.isra.0>
   b72a4:	a817      	add	r0, sp, #92	; 0x5c
   b72a6:	f003 f8ab 	bl	ba400 <_ZN6StringD1Ev>
        Wire.write(String(currentRailway.colors[1].c_str()));
   b72aa:	f003 ff23 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b72ae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   b72b0:	4604      	mov	r4, r0
   b72b2:	6999      	ldr	r1, [r3, #24]
   b72b4:	a817      	add	r0, sp, #92	; 0x5c
   b72b6:	f003 f8ee 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
   b72ba:	9917      	ldr	r1, [sp, #92]	; 0x5c
   b72bc:	4620      	mov	r0, r4
   b72be:	f7fc ffb3 	bl	b4228 <_ZN5Print5writeEPKc.isra.0>
   b72c2:	a817      	add	r0, sp, #92	; 0x5c
   b72c4:	f003 f89c 	bl	ba400 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b72c8:	f003 ff14 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b72cc:	f002 feb3 	bl	ba036 <_ZN7TwoWire15endTransmissionEv>
        if(cityIndexBuffer == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name)){
   b72d0:	683b      	ldr	r3, [r7, #0]
   b72d2:	2b00      	cmp	r3, #0
   b72d4:	f040 8253 	bne.w	b777e <loop+0x7de>
   b72d8:	2d02      	cmp	r5, #2
   b72da:	d006      	beq.n	b72ea <loop+0x34a>
   b72dc:	4950      	ldr	r1, [pc, #320]	; (b7420 <loop+0x480>)
   b72de:	a827      	add	r0, sp, #156	; 0x9c
   b72e0:	f7fd fb12 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b72e4:	2800      	cmp	r0, #0
   b72e6:	f000 823a 	beq.w	b775e <loop+0x7be>
          Wire.beginTransmission(brownLineCTAAdr);
   b72ea:	f003 ff03 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b72ee:	4b4d      	ldr	r3, [pc, #308]	; (b7424 <loop+0x484>)
   b72f0:	6819      	ldr	r1, [r3, #0]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b72f2:	f002 fe99 	bl	ba028 <_ZN7TwoWire17beginTransmissionEi>
        if(cityIndexBuffer == 0){
   b72f6:	683c      	ldr	r4, [r7, #0]
   b72f8:	2c00      	cmp	r4, #0
   b72fa:	f040 8301 	bne.w	b7900 <loop+0x960>
          if(i == 2){
   b72fe:	2d02      	cmp	r5, #2
   b7300:	f040 8272 	bne.w	b77e8 <loop+0x848>
            if(currentRailway.name == greenLineCTA.name){
   b7304:	4948      	ldr	r1, [pc, #288]	; (b7428 <loop+0x488>)
   b7306:	f8df 9124 	ldr.w	r9, [pc, #292]	; b742c <loop+0x48c>
   b730a:	a827      	add	r0, sp, #156	; 0x9c
   b730c:	f7fd fafc 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7310:	2800      	cmp	r0, #0
   b7312:	f000 823a 	beq.w	b778a <loop+0x7ea>
   b7316:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b731a:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   b731e:	1a9b      	subs	r3, r3, r2
   b7320:	109a      	asrs	r2, r3, #2
   b7322:	e9d1 1300 	ldrd	r1, r3, [r1]
   b7326:	1a5b      	subs	r3, r3, r1
   b7328:	109b      	asrs	r3, r3, #2
              for(int j = 0; j < brownLineCTA.outputs[0].size() + (brownLineCTA.outputs[2].size() / 2); j++){
   b732a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
   b732e:	42a3      	cmp	r3, r4
   b7330:	f240 82e6 	bls.w	b7900 <loop+0x960>
                Wire.write('0');
   b7334:	f003 fede 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b7338:	2130      	movs	r1, #48	; 0x30
   b733a:	f7fc ff71 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size() + (brownLineCTA.outputs[2].size() / 2); j++){
   b733e:	3401      	adds	r4, #1
   b7340:	e7e9      	b.n	b7316 <loop+0x376>
   b7342:	e9dd 3507 	ldrd	r3, r5, [sp, #28]
   b7346:	1aed      	subs	r5, r5, r3
   b7348:	10ed      	asrs	r5, r5, #3
        for(int i = 0; i < checkpointCount; i++){
   b734a:	f04f 0b00 	mov.w	fp, #0
   b734e:	45ab      	cmp	fp, r5
	return *(this->_M_impl._M_start + __n);
   b7350:	9907      	ldr	r1, [sp, #28]
   b7352:	da3b      	bge.n	b73cc <loop+0x42c>
   b7354:	eb01 06cb 	add.w	r6, r1, fp, lsl #3
    }

    float getDistance(float trainLat, float trainLon){
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b7358:	edd6 7a00 	vldr	s15, [r6]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b735c:	ee78 7ae7 	vsub.f32	s15, s17, s15
   b7360:	ee17 0a90 	vmov	r0, s15
   b7364:	f004 fb64 	bl	bba30 <__aeabi_f2d>
   b7368:	edd6 7a01 	vldr	s15, [r6, #4]
   b736c:	ee78 7a67 	vsub.f32	s15, s16, s15
   b7370:	4602      	mov	r2, r0
   b7372:	460b      	mov	r3, r1
   b7374:	ee17 0a90 	vmov	r0, s15
   b7378:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b737c:	f004 fb58 	bl	bba30 <__aeabi_f2d>
   b7380:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b7384:	ec41 0b1a 	vmov	d10, r0, r1
   b7388:	4610      	mov	r0, r2
   b738a:	4619      	mov	r1, r3
   b738c:	f004 fba8 	bl	bbae0 <__aeabi_dmul>
   b7390:	ec53 2b1a 	vmov	r2, r3, d10
   b7394:	4606      	mov	r6, r0
   b7396:	460f      	mov	r7, r1
   b7398:	ee1a 0a10 	vmov	r0, s20
   b739c:	4619      	mov	r1, r3
   b739e:	f004 fb9f 	bl	bbae0 <__aeabi_dmul>
   b73a2:	4602      	mov	r2, r0
   b73a4:	460b      	mov	r3, r1
   b73a6:	4630      	mov	r0, r6
   b73a8:	4639      	mov	r1, r7
   b73aa:	f004 f9e3 	bl	bb774 <__adddf3>
   b73ae:	ec41 0b10 	vmov	d0, r0, r1
   b73b2:	f004 f8d3 	bl	bb55c <sqrt>
          currentRailway.distances[i] = currentCheckpoints[i].getDistance(lat, lon);
   b73b6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
   b73b8:	ec51 0b10 	vmov	r0, r1, d0
   b73bc:	f004 fe60 	bl	bc080 <__aeabi_d2f>
   b73c0:	eb06 068b 	add.w	r6, r6, fp, lsl #2
        for(int i = 0; i < checkpointCount; i++){
   b73c4:	f10b 0b01 	add.w	fp, fp, #1
   b73c8:	6030      	str	r0, [r6, #0]
   b73ca:	e7c0      	b.n	b734e <loop+0x3ae>
      : _M_current(__i) { }
   b73cc:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
   b73d0:	42b7      	cmp	r7, r6
   b73d2:	d02f      	beq.n	b7434 <loop+0x494>
   b73d4:	1d32      	adds	r2, r6, #4
   b73d6:	4633      	mov	r3, r6
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
   b73d8:	4297      	cmp	r7, r2
	++_M_current;
   b73da:	4610      	mov	r0, r2
   b73dc:	d02b      	beq.n	b7436 <loop+0x496>
	if (__comp(__first, __result))
   b73de:	edd3 7a00 	vldr	s15, [r3]
   b73e2:	ed90 7a00 	vldr	s14, [r0]
   b73e6:	eeb4 7a67 	vcmp.f32	s14, s15
   b73ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b73ee:	f102 0204 	add.w	r2, r2, #4
   b73f2:	bf48      	it	mi
   b73f4:	4603      	movmi	r3, r0
   b73f6:	e7ef      	b.n	b73d8 <loop+0x438>
   b73f8:	20037eb8 	.word	0x20037eb8
   b73fc:	000be5bb 	.word	0x000be5bb
   b7400:	000be5c1 	.word	0x000be5c1
   b7404:	000be5c8 	.word	0x000be5c8
   b7408:	000be5d2 	.word	0x000be5d2
   b740c:	000be5de 	.word	0x000be5de
   b7410:	000be5e8 	.word	0x000be5e8
   b7414:	000be5f1 	.word	0x000be5f1
   b7418:	000be5fb 	.word	0x000be5fb
   b741c:	2003545c 	.word	0x2003545c
   b7420:	2003e520 	.word	0x2003e520
   b7424:	2003544c 	.word	0x2003544c
   b7428:	20035574 	.word	0x20035574
   b742c:	200353e0 	.word	0x200353e0
   b7430:	7dcccccc 	.word	0x7dcccccc
   b7434:	4633      	mov	r3, r6
        if(closestIndex == currentRailway.tripleIndex){
   b7436:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b7438:	1b9b      	subs	r3, r3, r6
   b743a:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
   b743e:	ea4f 00a3 	mov.w	r0, r3, asr #2
          closestIndex = currentRailway.loopIndex;
   b7442:	bf08      	it	eq
   b7444:	9831      	ldreq	r0, [sp, #196]	; 0xc4
   b7446:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
        x1 = currentCheckpoints[closestIndex].lat;
   b744a:	edd3 7a00 	vldr	s15, [r3]
        y1 = currentCheckpoints[closestIndex].lon;
   b744e:	edd3 6a01 	vldr	s13, [r3, #4]
        if(currentCheckpoints[closestIndex].lat > lat){
   b7452:	eef4 8ae7 	vcmpe.f32	s17, s15
   b7456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          slope = (y1 - y) / (x1 - x);
   b745a:	ee77 5ae8 	vsub.f32	s11, s15, s17
          slope = (y - y1) / (x - x1);
   b745e:	bf55      	itete	pl
   b7460:	ee38 6a66 	vsubpl.f32	s12, s16, s13
          slope = (y1 - y) / (x1 - x);
   b7464:	ee76 7ac8 	vsubmi.f32	s15, s13, s16
          slope = (y - y1) / (x - x1);
   b7468:	ee78 7ae7 	vsubpl.f32	s15, s17, s15
          slope = (y1 - y) / (x1 - x);
   b746c:	ee87 7aa5 	vdivmi.f32	s14, s15, s11
   b7470:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
          slope = (y - y1) / (x - x1);
   b7474:	bf58      	it	pl
   b7476:	ee86 7a27 	vdivpl.f32	s14, s12, s15
        if(slope == 0){
   b747a:	ed5f 7a13 	vldr	s15, [pc, #-76]	; b7430 <loop+0x490>
   b747e:	eeb5 7a40 	vcmp.f32	s14, #0.0
   b7482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7486:	d00a      	beq.n	b749e <loop+0x4fe>
        }else if(slope >= __FLT_MAX__ / 10){
   b7488:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b748c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          perpendicularSlope = -1 / slope;
   b7490:	bfba      	itte	lt
   b7492:	eebf 6a00 	vmovlt.f32	s12, #240	; 0xbf800000 -1.0
   b7496:	eec6 7a07 	vdivlt.f32	s15, s12, s14
          perpendicularSlope = 0;
   b749a:	eef0 7a49 	vmovge.f32	s15, s18
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b749e:	eeb0 7a48 	vmov.f32	s14, s16
   b74a2:	eea7 7aa5 	vfma.f32	s14, s15, s11
   b74a6:	eef4 6ac7 	vcmpe.f32	s13, s14
   b74aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b74ae:	bf4c      	ite	mi
   b74b0:	2701      	movmi	r7, #1
   b74b2:	2700      	movpl	r7, #0
        if(closestIndex == 0){
   b74b4:	2800      	cmp	r0, #0
   b74b6:	d171      	bne.n	b759c <loop+0x5fc>
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b74b8:	ed91 7a02 	vldr	s14, [r1, #8]
          if(currentRailway.loopIndex == closestIndex){
   b74bc:	f8dd c0c4 	ldr.w	ip, [sp, #196]	; 0xc4
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b74c0:	ee37 7a68 	vsub.f32	s14, s14, s17
   b74c4:	eef0 6a48 	vmov.f32	s13, s16
   b74c8:	eee7 6a27 	vfma.f32	s13, s14, s15
   b74cc:	ed91 7a03 	vldr	s14, [r1, #12]
   b74d0:	eef4 6ac7 	vcmpe.f32	s13, s14
   b74d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b74d8:	bfcc      	ite	gt
   b74da:	2501      	movgt	r5, #1
   b74dc:	2500      	movle	r5, #0
          if(currentRailway.loopIndex == closestIndex){
   b74de:	f1bc 0f00 	cmp.w	ip, #0
   b74e2:	d11d      	bne.n	b7520 <loop+0x580>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b74e4:	1e53      	subs	r3, r2, #1
   b74e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
            if(nearestSide != pointSide){
   b74ea:	42bd      	cmp	r5, r7
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b74ec:	ed91 0a00 	vldr	s0, [r1]
   b74f0:	ed91 7a01 	vldr	s14, [r1, #4]
            if(nearestSide != pointSide){
   b74f4:	f040 809b 	bne.w	b762e <loop+0x68e>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b74f8:	ee70 8a68 	vsub.f32	s17, s0, s17
   b74fc:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b7500:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b7504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            }else if(nearestSide != loopPointSide){
   b7508:	bfcc      	ite	gt
   b750a:	2101      	movgt	r1, #1
   b750c:	2100      	movle	r1, #0
   b750e:	42a9      	cmp	r1, r5
              }else if(nearestSide != loopPointSide){
   b7510:	d100      	bne.n	b7514 <loop+0x574>
                secondClosestIndex = currentRailway.tripleIndex + 1;
   b7512:	1c53      	adds	r3, r2, #1
          if(closestIndex < secondClosestIndex){
   b7514:	429a      	cmp	r2, r3
   b7516:	f2c0 808c 	blt.w	b7632 <loop+0x692>
   b751a:	4611      	mov	r1, r2
   b751c:	469c      	mov	ip, r3
   b751e:	e005      	b.n	b752c <loop+0x58c>
            if(pointSide == nearestSide){
   b7520:	42bd      	cmp	r5, r7
   b7522:	d074      	beq.n	b760e <loop+0x66e>
   b7524:	4602      	mov	r2, r0
   b7526:	4684      	mov	ip, r0
   b7528:	2301      	movs	r3, #1
   b752a:	4619      	mov	r1, r3
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b752c:	eb06 008c 	add.w	r0, r6, ip, lsl #2
   b7530:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   b7534:	ed90 7a00 	vldr	s14, [r0]
   b7538:	edd1 7a00 	vldr	s15, [r1]
   b753c:	9821      	ldr	r0, [sp, #132]	; 0x84
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b753e:	9d35      	ldr	r5, [sp, #212]	; 0xd4
          segmentPos *= currentRailway.scalers[lowerIndex];
   b7540:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b7544:	ee77 7a27 	vadd.f32	s15, s14, s15
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b7548:	4295      	cmp	r5, r2
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b754a:	eec7 6a27 	vdiv.f32	s13, s14, s15
          segmentPos *= currentRailway.scalers[lowerIndex];
   b754e:	ee07 1a90 	vmov	s15, r1
   b7552:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   b7556:	ee28 8a26 	vmul.f32	s16, s16, s13
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b755a:	db06      	blt.n	b756a <loop+0x5ca>
   b755c:	9934      	ldr	r1, [sp, #208]	; 0xd0
   b755e:	4291      	cmp	r1, r2
   b7560:	dc03      	bgt.n	b756a <loop+0x5ca>
   b7562:	429d      	cmp	r5, r3
   b7564:	db01      	blt.n	b756a <loop+0x5ca>
   b7566:	4299      	cmp	r1, r3
   b7568:	dd66      	ble.n	b7638 <loop+0x698>
          else if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b756a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
   b756c:	4295      	cmp	r5, r2
   b756e:	dc66      	bgt.n	b763e <loop+0x69e>
   b7570:	429d      	cmp	r5, r3
   b7572:	dc64      	bgt.n	b763e <loop+0x69e>
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b7574:	9933      	ldr	r1, [sp, #204]	; 0xcc
   b7576:	4291      	cmp	r1, r2
   b7578:	db65      	blt.n	b7646 <loop+0x6a6>
   b757a:	4299      	cmp	r1, r3
   b757c:	db63      	blt.n	b7646 <loop+0x6a6>
            inLoop = true;
   b757e:	9b03      	ldr	r3, [sp, #12]
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b7580:	4629      	mov	r1, r5
            pcbSegment = 2;
   b7582:	2502      	movs	r5, #2
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b7584:	458c      	cmp	ip, r1
   b7586:	dd61      	ble.n	b764c <loop+0x6ac>
            segmentPos += currentRailway.scalers[i];
   b7588:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   b758c:	ee07 2a90 	vmov	s15, r2
   b7590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b7594:	3101      	adds	r1, #1
            segmentPos += currentRailway.scalers[i];
   b7596:	ee38 8a27 	vadd.f32	s16, s16, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b759a:	e7f3      	b.n	b7584 <loop+0x5e4>
   b759c:	f1ac 0c08 	sub.w	ip, ip, #8
   b75a0:	448c      	add	ip, r1
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b75a2:	ed9c 7a00 	vldr	s14, [ip]
   b75a6:	ee37 7a68 	vsub.f32	s14, s14, s17
   b75aa:	eef0 6a48 	vmov.f32	s13, s16
   b75ae:	eee7 6a27 	vfma.f32	s13, s14, s15
          if(closestIndex == checkpointCount - 1){
   b75b2:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b75b6:	1e43      	subs	r3, r0, #1
   b75b8:	ed9c 7a01 	vldr	s14, [ip, #4]
   b75bc:	eef4 6ac7 	vcmpe.f32	s13, s14
   b75c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b75c4:	bfcc      	ite	gt
   b75c6:	f04f 0c01 	movgt.w	ip, #1
   b75ca:	f04f 0c00 	movle.w	ip, #0
          if(closestIndex == checkpointCount - 1){
   b75ce:	4586      	cmp	lr, r0
   b75d0:	d129      	bne.n	b7626 <loop+0x686>
            if(closestIndex == currentRailway.loopIndex){
   b75d2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   b75d4:	4283      	cmp	r3, r0
   b75d6:	d118      	bne.n	b760a <loop+0x66a>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b75d8:	1e53      	subs	r3, r2, #1
   b75da:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
              if(nearestSide != pointSide){
   b75de:	45bc      	cmp	ip, r7
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b75e0:	ed91 0a00 	vldr	s0, [r1]
   b75e4:	ed91 7a01 	vldr	s14, [r1, #4]
              if(nearestSide != pointSide){
   b75e8:	d002      	beq.n	b75f0 <loop+0x650>
                secondClosestIndex = checkpointCount - 2;
   b75ea:	1eab      	subs	r3, r5, #2
   b75ec:	4602      	mov	r2, r0
   b75ee:	e791      	b.n	b7514 <loop+0x574>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b75f0:	ee70 8a68 	vsub.f32	s17, s0, s17
   b75f4:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b75f8:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b75fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              }else if(nearestSide != loopPointSide){
   b7600:	bfcc      	ite	gt
   b7602:	2101      	movgt	r1, #1
   b7604:	2100      	movle	r1, #0
   b7606:	4561      	cmp	r1, ip
   b7608:	e782      	b.n	b7510 <loop+0x570>
              if(pointSide == nearestSide){
   b760a:	45bc      	cmp	ip, r7
   b760c:	d1ed      	bne.n	b75ea <loop+0x64a>
        String destNm = train.key("destination").valueString();
   b760e:	a817      	add	r0, sp, #92	; 0x5c
   b7610:	f002 fef6 	bl	ba400 <_ZN6StringD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b7614:	a813      	add	r0, sp, #76	; 0x4c
   b7616:	f002 fef3 	bl	ba400 <_ZN6StringD1Ev>
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b761a:	a80a      	add	r0, sp, #40	; 0x28
        count++;
   b761c:	f109 0901 	add.w	r9, r9, #1
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b7620:	f000 fb2e 	bl	b7c80 <_ZN13JsonReferenceD1Ev>
   b7624:	e5a3      	b.n	b716e <loop+0x1ce>
            if(pointSide == nearestSide){
   b7626:	45bc      	cmp	ip, r7
   b7628:	d1e0      	bne.n	b75ec <loop+0x64c>
              secondClosestIndex = closestIndex + 1;
   b762a:	1c43      	adds	r3, r0, #1
   b762c:	e7de      	b.n	b75ec <loop+0x64c>
   b762e:	4602      	mov	r2, r0
   b7630:	e77a      	b.n	b7528 <loop+0x588>
   b7632:	4619      	mov	r1, r3
   b7634:	4694      	mov	ip, r2
   b7636:	e779      	b.n	b752c <loop+0x58c>
        bool inLoop = false;
   b7638:	2300      	movs	r3, #0
            pcbSegment = 3;
   b763a:	2503      	movs	r5, #3
   b763c:	e7a2      	b.n	b7584 <loop+0x5e4>
            lowerScaleBound = 0;
   b763e:	2100      	movs	r1, #0
        bool inLoop = false;
   b7640:	460b      	mov	r3, r1
            pcbSegment = 0;
   b7642:	460d      	mov	r5, r1
   b7644:	e79e      	b.n	b7584 <loop+0x5e4>
        bool inLoop = false;
   b7646:	2300      	movs	r3, #0
            pcbSegment = 1;
   b7648:	2501      	movs	r5, #1
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b764a:	e79b      	b.n	b7584 <loop+0x5e4>
          if(cityIndexBuffer == 0){
   b764c:	4aa1      	ldr	r2, [pc, #644]	; (b78d4 <loop+0x934>)
   b764e:	9e24      	ldr	r6, [sp, #144]	; 0x90
   b7650:	6812      	ldr	r2, [r2, #0]
   b7652:	2a00      	cmp	r2, #0
   b7654:	d169      	bne.n	b772a <loop+0x78a>
            if(inLoop){
   b7656:	2b00      	cmp	r3, #0
   b7658:	d043      	beq.n	b76e2 <loop+0x742>
              if(currentRailway.name == pinkLineCTA.name){
   b765a:	499f      	ldr	r1, [pc, #636]	; (b78d8 <loop+0x938>)
   b765c:	a827      	add	r0, sp, #156	; 0x9c
   b765e:	f7fd f953 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7662:	b1f0      	cbz	r0, b76a2 <loop+0x702>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7664:	e9d6 2306 	ldrd	r2, r3, [r6, #24]
   b7668:	1a9b      	subs	r3, r3, r2
   b766a:	109b      	asrs	r3, r3, #2
                segmentPos = (float)currentRailway.outputs[2].size() - segmentPos;
   b766c:	ee07 3a90 	vmov	s15, r3
   b7670:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b7674:	ee37 8ac8 	vsub.f32	s16, s15, s16
            if(pcbSegment == 1 && currentRailway.name == greenLineCTA.name){
   b7678:	2d01      	cmp	r5, #1
   b767a:	d140      	bne.n	b76fe <loop+0x75e>
   b767c:	4997      	ldr	r1, [pc, #604]	; (b78dc <loop+0x93c>)
   b767e:	a827      	add	r0, sp, #156	; 0x9c
   b7680:	f7fd f942 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7684:	2800      	cmp	r0, #0
   b7686:	d042      	beq.n	b770e <loop+0x76e>
   b7688:	e9d6 2303 	ldrd	r2, r3, [r6, #12]
   b768c:	1a9b      	subs	r3, r3, r2
   b768e:	109b      	asrs	r3, r3, #2
              segmentPos = (float)currentRailway.outputs[1].size() - segmentPos;
   b7690:	ee07 3a90 	vmov	s15, r3
   b7694:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b7698:	ee37 8ac8 	vsub.f32	s16, s15, s16
              trainDir = 6 - trainDir;
   b769c:	f1c4 0406 	rsb	r4, r4, #6
   b76a0:	e035      	b.n	b770e <loop+0x76e>
              }else if(currentRailway.name == orangeLineCTA.name){
   b76a2:	498f      	ldr	r1, [pc, #572]	; (b78e0 <loop+0x940>)
   b76a4:	a827      	add	r0, sp, #156	; 0x9c
   b76a6:	f7fd f92f 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b76aa:	2800      	cmp	r0, #0
   b76ac:	d0e4      	beq.n	b7678 <loop+0x6d8>
	return *(this->_M_impl._M_start + __n);
   b76ae:	4b8d      	ldr	r3, [pc, #564]	; (b78e4 <loop+0x944>)
   b76b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b76b2:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   b76b6:	1ad2      	subs	r2, r2, r3
   b76b8:	1092      	asrs	r2, r2, #2
                segmentPos = (int)(segmentPos + orangeLineCTA.outputs[2].size() / 2) % orangeLineCTA.outputs[2].size();
   b76ba:	0853      	lsrs	r3, r2, #1
   b76bc:	ee07 3a90 	vmov	s15, r3
   b76c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b76c4:	ee37 8a88 	vadd.f32	s16, s15, s16
   b76c8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   b76cc:	ee17 3a90 	vmov	r3, s15
   b76d0:	fbb3 f1f2 	udiv	r1, r3, r2
   b76d4:	fb02 3311 	mls	r3, r2, r1, r3
   b76d8:	ee08 3a10 	vmov	s16, r3
   b76dc:	eeb8 8a48 	vcvt.f32.u32	s16, s16
   b76e0:	e7ca      	b.n	b7678 <loop+0x6d8>
              if(currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name){
   b76e2:	4981      	ldr	r1, [pc, #516]	; (b78e8 <loop+0x948>)
   b76e4:	a827      	add	r0, sp, #156	; 0x9c
   b76e6:	f7fd f90f 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b76ea:	b928      	cbnz	r0, b76f8 <loop+0x758>
   b76ec:	497f      	ldr	r1, [pc, #508]	; (b78ec <loop+0x94c>)
   b76ee:	a827      	add	r0, sp, #156	; 0x9c
   b76f0:	f7fd f90a 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b76f4:	2800      	cmp	r0, #0
   b76f6:	d0bf      	beq.n	b7678 <loop+0x6d8>
                trainDir = 6 - trainDir;
   b76f8:	f1c4 0406 	rsb	r4, r4, #6
   b76fc:	e7bc      	b.n	b7678 <loop+0x6d8>
            if(pcbSegment == 3 && currentRailway.name == pinkLineCTA.name){
   b76fe:	2d03      	cmp	r5, #3
   b7700:	d105      	bne.n	b770e <loop+0x76e>
   b7702:	4975      	ldr	r1, [pc, #468]	; (b78d8 <loop+0x938>)
            if(currentRailway.name == orangeLineMBTA.name){
   b7704:	a827      	add	r0, sp, #156	; 0x9c
   b7706:	f7fd f8ff 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b770a:	2800      	cmp	r0, #0
   b770c:	d1c6      	bne.n	b769c <loop+0x6fc>
  { return __builtin_floorf(__x); }
   b770e:	eeb0 0a48 	vmov.f32	s0, s16
   b7712:	f003 fedd 	bl	bb4d0 <floorf>
	return *(this->_M_impl._M_start + __n);
   b7716:	230c      	movs	r3, #12
          currentRailway.outputs[pcbSegment][(int)floor(segmentPos)] = trainDir;
   b7718:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b771c:	435d      	muls	r5, r3
   b771e:	ee10 2a10 	vmov	r2, s0
   b7722:	5973      	ldr	r3, [r6, r5]
   b7724:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b7728:	e771      	b.n	b760e <loop+0x66e>
          else if(cityIndexBuffer == 1){
   b772a:	2a01      	cmp	r2, #1
   b772c:	d1ef      	bne.n	b770e <loop+0x76e>
            if(currentRailway.name == orangeLineMBTA.name){
   b772e:	4970      	ldr	r1, [pc, #448]	; (b78f0 <loop+0x950>)
   b7730:	e7e8      	b.n	b7704 <loop+0x764>
        }else if(cityIndexBuffer == 0 && i == 3){
   b7732:	2d03      	cmp	r5, #3
   b7734:	d10d      	bne.n	b7752 <loop+0x7b2>
          if(currentRailway.name == orangeLineCTA.name){
   b7736:	496a      	ldr	r1, [pc, #424]	; (b78e0 <loop+0x940>)
   b7738:	4c6e      	ldr	r4, [pc, #440]	; (b78f4 <loop+0x954>)
   b773a:	a827      	add	r0, sp, #156	; 0x9c
   b773c:	f7fd f8e4 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7740:	b118      	cbz	r0, b774a <loop+0x7aa>
            Wire.beginTransmission(greenLineCTAAdr[0]);
   b7742:	f003 fcd7 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b7746:	6821      	ldr	r1, [r4, #0]
   b7748:	e59e      	b.n	b7288 <loop+0x2e8>
            Wire.beginTransmission(greenLineCTAAdr[1]);
   b774a:	f003 fcd3 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b774e:	6861      	ldr	r1, [r4, #4]
   b7750:	e59a      	b.n	b7288 <loop+0x2e8>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b7752:	f003 fccf 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b7756:	f8d8 3000 	ldr.w	r3, [r8]
   b775a:	5999      	ldr	r1, [r3, r6]
   b775c:	e594      	b.n	b7288 <loop+0x2e8>
        }else if(cityIndexBuffer == 0 && i == 3){
   b775e:	2d03      	cmp	r5, #3
   b7760:	d10d      	bne.n	b777e <loop+0x7de>
          if(currentRailway.name == orangeLineCTA.name){
   b7762:	495f      	ldr	r1, [pc, #380]	; (b78e0 <loop+0x940>)
   b7764:	4c63      	ldr	r4, [pc, #396]	; (b78f4 <loop+0x954>)
   b7766:	a827      	add	r0, sp, #156	; 0x9c
   b7768:	f7fd f8ce 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b776c:	b118      	cbz	r0, b7776 <loop+0x7d6>
            Wire.beginTransmission(greenLineCTAAdr[0]);
   b776e:	f003 fcc1 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b7772:	6821      	ldr	r1, [r4, #0]
   b7774:	e5bd      	b.n	b72f2 <loop+0x352>
            Wire.beginTransmission(greenLineCTAAdr[1]);
   b7776:	f003 fcbd 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b777a:	6861      	ldr	r1, [r4, #4]
   b777c:	e5b9      	b.n	b72f2 <loop+0x352>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b777e:	f003 fcb9 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b7782:	f8d8 3000 	ldr.w	r3, [r8]
   b7786:	5999      	ldr	r1, [r3, r6]
   b7788:	e5b3      	b.n	b72f2 <loop+0x352>
            else if(currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name){
   b778a:	f109 0130 	add.w	r1, r9, #48	; 0x30
   b778e:	a827      	add	r0, sp, #156	; 0x9c
   b7790:	f7fd f8ba 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7794:	b920      	cbnz	r0, b77a0 <loop+0x800>
   b7796:	4955      	ldr	r1, [pc, #340]	; (b78ec <loop+0x94c>)
   b7798:	a827      	add	r0, sp, #156	; 0x9c
   b779a:	f7fd f8b5 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b779e:	b198      	cbz	r0, b77c8 <loop+0x828>
   b77a0:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b77a4:	e9d2 2300 	ldrd	r2, r3, [r2]
   b77a8:	1a9b      	subs	r3, r3, r2
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b77aa:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b77ae:	f080 80a7 	bcs.w	b7900 <loop+0x960>
                Wire.write((char)currentRailway.outputs[0][j] + '0');
   b77b2:	f003 fc9f 	bl	bb0f4 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b77b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b77b8:	681b      	ldr	r3, [r3, #0]
   b77ba:	f813 1024 	ldrb.w	r1, [r3, r4, lsl #2]
   b77be:	3130      	adds	r1, #48	; 0x30
   b77c0:	f7fc fd2e 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b77c4:	3401      	adds	r4, #1
   b77c6:	e7eb      	b.n	b77a0 <loop+0x800>
   b77c8:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b77cc:	e9d2 2300 	ldrd	r2, r3, [r2]
   b77d0:	1a9b      	subs	r3, r3, r2
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b77d2:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b77d6:	f080 8093 	bcs.w	b7900 <loop+0x960>
                Wire.write('0');
   b77da:	f003 fc8b 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b77de:	2130      	movs	r1, #48	; 0x30
   b77e0:	f7fc fd1e 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
              for(int j = 0; j < brownLineCTA.outputs[0].size(); j++){
   b77e4:	3401      	adds	r4, #1
   b77e6:	e7ef      	b.n	b77c8 <loop+0x828>
          if(i == 1 && (currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name)){
   b77e8:	2d01      	cmp	r5, #1
   b77ea:	f040 80bb 	bne.w	b7964 <loop+0x9c4>
   b77ee:	493e      	ldr	r1, [pc, #248]	; (b78e8 <loop+0x948>)
   b77f0:	a827      	add	r0, sp, #156	; 0x9c
   b77f2:	f7fd f889 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b77f6:	b928      	cbnz	r0, b7804 <loop+0x864>
   b77f8:	493c      	ldr	r1, [pc, #240]	; (b78ec <loop+0x94c>)
   b77fa:	a827      	add	r0, sp, #156	; 0x9c
   b77fc:	f7fd f884 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7800:	2800      	cmp	r0, #0
   b7802:	d07d      	beq.n	b7900 <loop+0x960>
	return *(this->_M_impl._M_start + __n);
   b7804:	9a24      	ldr	r2, [sp, #144]	; 0x90
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7806:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
   b780a:	1a9b      	subs	r3, r3, r2
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b780c:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   b7810:	d276      	bcs.n	b7900 <loop+0x960>
              Wire.write('0');
   b7812:	f003 fc6f 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b7816:	2130      	movs	r1, #48	; 0x30
   b7818:	f7fc fd02 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b781c:	3401      	adds	r4, #1
   b781e:	e7f1      	b.n	b7804 <loop+0x864>
          }else if(i == 3 && currentRailway.name == pinkLineCTA.name){
   b7820:	492d      	ldr	r1, [pc, #180]	; (b78d8 <loop+0x938>)
   b7822:	a827      	add	r0, sp, #156	; 0x9c
   b7824:	f7fd f870 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7828:	2800      	cmp	r0, #0
   b782a:	d069      	beq.n	b7900 <loop+0x960>
	return *(this->_M_impl._M_start + __n);
   b782c:	f8df 90c8 	ldr.w	r9, [pc, #200]	; b78f8 <loop+0x958>
   b7830:	f8df b0c8 	ldr.w	fp, [pc, #200]	; b78fc <loop+0x95c>
   b7834:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
   b7838:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b783c:	e9d0 3200 	ldrd	r3, r2, [r0]
   b7840:	1ad2      	subs	r2, r2, r3
   b7842:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b7846:	1a5b      	subs	r3, r3, r1
   b7848:	109b      	asrs	r3, r3, #2
            for(int j = 0; j < greenLineCTA.outputs[0].size() - pinkLineCTA.outputs[3].size(); j++){
   b784a:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b784e:	42a3      	cmp	r3, r4
   b7850:	d956      	bls.n	b7900 <loop+0x960>
              Wire.write('0');
   b7852:	f003 fc4f 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b7856:	2130      	movs	r1, #48	; 0x30
   b7858:	f7fc fce2 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < greenLineCTA.outputs[0].size() - pinkLineCTA.outputs[3].size(); j++){
   b785c:	3401      	adds	r4, #1
   b785e:	e7e9      	b.n	b7834 <loop+0x894>
            val = n;
   b7860:	4619      	mov	r1, r3
   b7862:	e078      	b.n	b7956 <loop+0x9b6>
        Serial.println();
   b7864:	f003 faf8 	bl	bae58 <_Z16_fetch_usbserialv>
   b7868:	f002 fd5f 	bl	ba32a <_ZN5Print7printlnEv>
      for(int i = 0; i < 4; i++){
   b786c:	3501      	adds	r5, #1
        Wire.endTransmission();
   b786e:	f003 fc41 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b7872:	f002 fbe0 	bl	ba036 <_ZN7TwoWire15endTransmissionEv>
      for(int i = 0; i < 4; i++){
   b7876:	2d04      	cmp	r5, #4
   b7878:	f106 0604 	add.w	r6, r6, #4
   b787c:	f47f acf3 	bne.w	b7266 <loop+0x2c6>
   b7880:	2300      	movs	r3, #0
          currentRailway.outputs[i][j] = 0;
   b7882:	461c      	mov	r4, r3
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b7884:	2200      	movs	r2, #0
	return *(this->_M_impl._M_start + __n);
   b7886:	9924      	ldr	r1, [sp, #144]	; 0x90
   b7888:	18cd      	adds	r5, r1, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b788a:	58c8      	ldr	r0, [r1, r3]
   b788c:	6869      	ldr	r1, [r5, #4]
   b788e:	1a09      	subs	r1, r1, r0
   b7890:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
   b7894:	d203      	bcs.n	b789e <loop+0x8fe>
          currentRailway.outputs[i][j] = 0;
   b7896:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b789a:	3201      	adds	r2, #1
   b789c:	e7f3      	b.n	b7886 <loop+0x8e6>
      for(int i = 0; i < 4; i++){
   b789e:	330c      	adds	r3, #12
   b78a0:	2b30      	cmp	r3, #48	; 0x30
   b78a2:	d1ef      	bne.n	b7884 <loop+0x8e4>
      Serial.println();
   b78a4:	f003 fad8 	bl	bae58 <_Z16_fetch_usbserialv>
   b78a8:	f002 fd3f 	bl	ba32a <_ZN5Print7printlnEv>
      }
   b78ac:	a807      	add	r0, sp, #28
   b78ae:	f7fc ff35 	bl	b471c <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      Railway currentRailway = cities[cityIndexBuffer].railways[j];
   b78b2:	a81b      	add	r0, sp, #108	; 0x6c
   b78b4:	f7fd fbaa 	bl	b500c <_ZN7RailwayD1Ev>
    for(int j = 0; j < cities[cityIndexBuffer].railways.size(); j++){
   b78b8:	9b02      	ldr	r3, [sp, #8]
   b78ba:	3301      	adds	r3, #1
   b78bc:	f7ff bba4 	b.w	b7008 <loop+0x68>
    Serial.println();
   b78c0:	f003 faca 	bl	bae58 <_Z16_fetch_usbserialv>
}
   b78c4:	b037      	add	sp, #220	; 0xdc
   b78c6:	ecbd 8b06 	vpop	{d8-d10}
   b78ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Serial.println();
   b78ce:	f002 bd2c 	b.w	ba32a <_ZN5Print7printlnEv>
   b78d2:	bf00      	nop
   b78d4:	2003545c 	.word	0x2003545c
   b78d8:	2003e4b4 	.word	0x2003e4b4
   b78dc:	20035574 	.word	0x20035574
   b78e0:	20037e10 	.word	0x20037e10
   b78e4:	20037de0 	.word	0x20037de0
   b78e8:	20035410 	.word	0x20035410
   b78ec:	2003e520 	.word	0x2003e520
   b78f0:	20037e7c 	.word	0x20037e7c
   b78f4:	200355b0 	.word	0x200355b0
   b78f8:	20035544 	.word	0x20035544
   b78fc:	2003e484 	.word	0x2003e484
        Serial.printf("%s rail part %i: ", currentRailway.name.c_str(), i);
   b7900:	f003 faaa 	bl	bae58 <_Z16_fetch_usbserialv>
   b7904:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   b7906:	492a      	ldr	r1, [pc, #168]	; (b79b0 <loop+0xa10>)
   b7908:	462b      	mov	r3, r5
   b790a:	f7fc fd71 	bl	b43f0 <_ZN5Print6printfEPKcz>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b790e:	240c      	movs	r4, #12
   b7910:	436c      	muls	r4, r5
   b7912:	f04f 0900 	mov.w	r9, #0
	return *(this->_M_impl._M_start + __n);
   b7916:	9a24      	ldr	r2, [sp, #144]	; 0x90
   b7918:	1913      	adds	r3, r2, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b791a:	5912      	ldr	r2, [r2, r4]
   b791c:	685b      	ldr	r3, [r3, #4]
   b791e:	1a9b      	subs	r3, r3, r2
   b7920:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
   b7924:	d29e      	bcs.n	b7864 <loop+0x8c4>
          Wire.write((char)currentRailway.outputs[i][j] + '0');
   b7926:	f003 fbe5 	bl	bb0f4 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b792a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b792c:	591b      	ldr	r3, [r3, r4]
   b792e:	f813 1029 	ldrb.w	r1, [r3, r9, lsl #2]
   b7932:	3130      	adds	r1, #48	; 0x30
   b7934:	f7fc fc74 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
          Serial.print(currentRailway.outputs[i][j]);
   b7938:	f003 fa8e 	bl	bae58 <_Z16_fetch_usbserialv>
   b793c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b793e:	591b      	ldr	r3, [r3, r4]
   b7940:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
        if (n < 0 && base == 10) {
   b7944:	2b00      	cmp	r3, #0
   b7946:	4683      	mov	fp, r0
   b7948:	da8a      	bge.n	b7860 <loop+0x8c0>
            t = print('-');
   b794a:	212d      	movs	r1, #45	; 0x2d
   b794c:	9303      	str	r3, [sp, #12]
   b794e:	f002 fce9 	bl	ba324 <_ZN5Print5printEc>
            val = -n;
   b7952:	9b03      	ldr	r3, [sp, #12]
   b7954:	4259      	negs	r1, r3
        return printNumber(val, base) + t;
   b7956:	220a      	movs	r2, #10
   b7958:	4658      	mov	r0, fp
   b795a:	f002 fcfc 	bl	ba356 <_ZN5Print11printNumberEmh>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b795e:	f109 0901 	add.w	r9, r9, #1
   b7962:	e7d8      	b.n	b7916 <loop+0x976>
          if(i == 3 && currentRailway.name == orangeLineCTA.name){
   b7964:	2d03      	cmp	r5, #3
   b7966:	d1cb      	bne.n	b7900 <loop+0x960>
   b7968:	4912      	ldr	r1, [pc, #72]	; (b79b4 <loop+0xa14>)
   b796a:	a827      	add	r0, sp, #156	; 0x9c
   b796c:	f7fc ffcc 	bl	b4908 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b7970:	2800      	cmp	r0, #0
   b7972:	f43f af55 	beq.w	b7820 <loop+0x880>
   b7976:	f8df 9044 	ldr.w	r9, [pc, #68]	; b79bc <loop+0xa1c>
   b797a:	4b0f      	ldr	r3, [pc, #60]	; (b79b8 <loop+0xa18>)
   b797c:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
   b7980:	6a59      	ldr	r1, [r3, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b7982:	e9d0 3200 	ldrd	r3, r2, [r0]
   b7986:	1ad2      	subs	r2, r2, r3
   b7988:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b798c:	1a5b      	subs	r3, r3, r1
   b798e:	109b      	asrs	r3, r3, #2
            for(int j = 0; j < greenLineCTA.outputs[0].size() - orangeLineCTA.outputs[3].size(); j++){
   b7990:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b7994:	42a3      	cmp	r3, r4
   b7996:	d9b3      	bls.n	b7900 <loop+0x960>
              Wire.write('0');
   b7998:	f003 fbac 	bl	bb0f4 <_Z19__fetch_global_Wirev>
   b799c:	2130      	movs	r1, #48	; 0x30
   b799e:	f7fc fc3f 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < greenLineCTA.outputs[0].size() - orangeLineCTA.outputs[3].size(); j++){
   b79a2:	3401      	adds	r4, #1
   b79a4:	e7e9      	b.n	b797a <loop+0x9da>
}
   b79a6:	b037      	add	sp, #220	; 0xdc
   b79a8:	ecbd 8b06 	vpop	{d8-d10}
   b79ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b79b0:	000be601 	.word	0x000be601
   b79b4:	20037e10 	.word	0x20037e10
   b79b8:	20037de0 	.word	0x20037de0
   b79bc:	20035544 	.word	0x20035544

000b79c0 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b79c0:	b510      	push	{r4, lr}
   b79c2:	4604      	mov	r4, r0
   b79c4:	f003 f97a 	bl	bacbc <_ZN9TCPClientC1Ev>
{

}
   b79c8:	4620      	mov	r0, r4
   b79ca:	bd10      	pop	{r4, pc}

000b79cc <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b79cc:	b538      	push	{r3, r4, r5, lr}
   b79ce:	4604      	mov	r4, r0
   b79d0:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b79d2:	f002 fca3 	bl	ba31c <_ZN5Print5printEPKc>
    client.print(": ");
   b79d6:	4905      	ldr	r1, [pc, #20]	; (b79ec <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b79d8:	4620      	mov	r0, r4
   b79da:	f002 fc9f 	bl	ba31c <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b79de:	4629      	mov	r1, r5
   b79e0:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b79e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b79e6:	f002 bcac 	b.w	ba342 <_ZN5Print7printlnEPKc>
   b79ea:	bf00      	nop
   b79ec:	000be35f 	.word	0x000be35f

000b79f0 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b79f0:	b538      	push	{r3, r4, r5, lr}
   b79f2:	4605      	mov	r5, r0
   b79f4:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b79f6:	f002 fc91 	bl	ba31c <_ZN5Print5printEPKc>
    client.print(": ");
   b79fa:	490b      	ldr	r1, [pc, #44]	; (b7a28 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b79fc:	4628      	mov	r0, r5
   b79fe:	f002 fc8d 	bl	ba31c <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b7a02:	2c00      	cmp	r4, #0
   b7a04:	da0d      	bge.n	b7a22 <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b7a06:	212d      	movs	r1, #45	; 0x2d
   b7a08:	4628      	mov	r0, r5
   b7a0a:	f002 fc8b 	bl	ba324 <_ZN5Print5printEc>
            val = -n;
   b7a0e:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b7a10:	4628      	mov	r0, r5
   b7a12:	220a      	movs	r2, #10
   b7a14:	f002 fc9f 	bl	ba356 <_ZN5Print11printNumberEmh>
        n += println();
   b7a18:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b7a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7a1e:	f002 bc84 	b.w	ba32a <_ZN5Print7printlnEv>
            val = n;
   b7a22:	4621      	mov	r1, r4
   b7a24:	e7f4      	b.n	b7a10 <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b7a26:	bf00      	nop
   b7a28:	000be35f 	.word	0x000be35f

000b7a2c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b7a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7a30:	460e      	mov	r6, r1
   b7a32:	b091      	sub	sp, #68	; 0x44
   b7a34:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b7a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7a3a:	6013      	str	r3, [r2, #0]
{
   b7a3c:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b7a3e:	2100      	movs	r1, #0
   b7a40:	4630      	mov	r0, r6
   b7a42:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b7a46:	4617      	mov	r7, r2
   b7a48:	f002 fdfd 	bl	ba646 <_ZNK6String6equalsEPKc>
   b7a4c:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b7a50:	4603      	mov	r3, r0
   b7a52:	b998      	cbnz	r0, b7a7c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b7a54:	f1be 0f00 	cmp.w	lr, #0
   b7a58:	bf14      	ite	ne
   b7a5a:	4672      	movne	r2, lr
   b7a5c:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b7a5e:	6831      	ldr	r1, [r6, #0]
   b7a60:	b292      	uxth	r2, r2
   b7a62:	4620      	mov	r0, r4
   b7a64:	f002 ff2a 	bl	ba8bc <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b7a68:	1e05      	subs	r5, r0, #0
   b7a6a:	bf18      	it	ne
   b7a6c:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b7a6e:	b9c5      	cbnz	r5, b7aa2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b7a70:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b7a72:	b011      	add	sp, #68	; 0x44
   b7a74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b7a78:	f003 b8d6 	b.w	bac28 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b7a7c:	4b76      	ldr	r3, [pc, #472]	; (b7c58 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b7a7e:	930a      	str	r3, [sp, #40]	; 0x28
   b7a80:	f106 0c14 	add.w	ip, r6, #20
   b7a84:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7a88:	ad0b      	add	r5, sp, #44	; 0x2c
   b7a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7a8c:	f8dc 3000 	ldr.w	r3, [ip]
   b7a90:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b7a92:	fa1f f28e 	uxth.w	r2, lr
   b7a96:	2300      	movs	r3, #0
   b7a98:	a90a      	add	r1, sp, #40	; 0x28
   b7a9a:	4620      	mov	r0, r4
   b7a9c:	f002 ffee 	bl	baa7c <_ZN9TCPClient7connectE9IPAddresstm>
   b7aa0:	e7e2      	b.n	b7a68 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b7aa2:	4649      	mov	r1, r9
   b7aa4:	4620      	mov	r0, r4
   b7aa6:	f002 fc39 	bl	ba31c <_ZN5Print5printEPKc>
    client.print(" ");
   b7aaa:	496c      	ldr	r1, [pc, #432]	; (b7c5c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b7aac:	4620      	mov	r0, r4
   b7aae:	f002 fc35 	bl	ba31c <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b7ab2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b7ab4:	4620      	mov	r0, r4
   b7ab6:	f002 fc31 	bl	ba31c <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b7aba:	4969      	ldr	r1, [pc, #420]	; (b7c60 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b7abc:	4620      	mov	r0, r4
   b7abe:	f002 fc2d 	bl	ba31c <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b7ac2:	4968      	ldr	r1, [pc, #416]	; (b7c64 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b7ac4:	4a68      	ldr	r2, [pc, #416]	; (b7c68 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b7ac6:	4620      	mov	r0, r4
   b7ac8:	f7ff ff80 	bl	b79cc <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b7acc:	2100      	movs	r1, #0
   b7ace:	4630      	mov	r0, r6
   b7ad0:	f002 fdb9 	bl	ba646 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b7ad4:	b920      	cbnz	r0, b7ae0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b7ad6:	6832      	ldr	r2, [r6, #0]
   b7ad8:	4964      	ldr	r1, [pc, #400]	; (b7c6c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b7ada:	4620      	mov	r0, r4
   b7adc:	f7ff ff76 	bl	b79cc <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b7ae0:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b7ae4:	2100      	movs	r1, #0
   b7ae6:	4650      	mov	r0, sl
   b7ae8:	f002 fdad 	bl	ba646 <_ZNK6String6equalsEPKc>
   b7aec:	b928      	cbnz	r0, b7afa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b7aee:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b7af0:	495f      	ldr	r1, [pc, #380]	; (b7c70 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b7af2:	4620      	mov	r0, r4
   b7af4:	f7ff ff7c 	bl	b79f0 <_ZN10HttpClient10sendHeaderEPKci>
   b7af8:	e006      	b.n	b7b08 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b7afa:	495e      	ldr	r1, [pc, #376]	; (b7c74 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b7afc:	4648      	mov	r0, r9
   b7afe:	f004 fba5 	bl	bc24c <strcmp>
   b7b02:	4602      	mov	r2, r0
   b7b04:	2800      	cmp	r0, #0
   b7b06:	d0f3      	beq.n	b7af0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b7b08:	f1b8 0f00 	cmp.w	r8, #0
   b7b0c:	d00e      	beq.n	b7b2c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b7b0e:	f8d8 1000 	ldr.w	r1, [r8]
   b7b12:	b159      	cbz	r1, b7b2c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b7b14:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b7b18:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b7b1a:	b122      	cbz	r2, b7b26 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b7b1c:	f7ff ff56 	bl	b79cc <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b7b20:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b7b24:	e7f3      	b.n	b7b0e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b7b26:	f002 fc0c 	bl	ba342 <_ZN5Print7printlnEPKc>
}
   b7b2a:	e7f9      	b.n	b7b20 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b7b2c:	4620      	mov	r0, r4
   b7b2e:	f002 fbfc 	bl	ba32a <_ZN5Print7printlnEv>
    client.flush();
   b7b32:	4620      	mov	r0, r4
   b7b34:	f002 fe22 	bl	ba77c <_ZN9TCPClient5flushEv>
   b7b38:	2100      	movs	r1, #0
   b7b3a:	4650      	mov	r0, sl
   b7b3c:	f002 fd83 	bl	ba646 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b7b40:	b918      	cbnz	r0, b7b4a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b7b42:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b7b44:	4620      	mov	r0, r4
   b7b46:	f002 fbfc 	bl	ba342 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b7b4a:	f104 0a1c 	add.w	sl, r4, #28
   b7b4e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   b7b52:	2100      	movs	r1, #0
   b7b54:	4650      	mov	r0, sl
   b7b56:	f004 fb43 	bl	bc1e0 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7b5a:	f000 fddf 	bl	b871c <HAL_Timer_Get_Milli_Seconds>
   b7b5e:	9001      	str	r0, [sp, #4]
   b7b60:	f000 fddc 	bl	b871c <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b7b64:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b7b68:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b7b6a:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b7b6e:	4620      	mov	r0, r4
   b7b70:	f003 f800 	bl	bab74 <_ZN9TCPClient9availableEv>
   b7b74:	b1e8      	cbz	r0, b7bb2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   b7b76:	4620      	mov	r0, r4
   b7b78:	f002 fde6 	bl	ba748 <_ZN9TCPClient4readEv>
   b7b7c:	4681      	mov	r9, r0
   b7b7e:	f000 fdcd 	bl	b871c <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b7b82:	f242 73fe 	movw	r3, #10238	; 0x27fe
   b7b86:	429e      	cmp	r6, r3
   b7b88:	9001      	str	r0, [sp, #4]
   b7b8a:	d804      	bhi.n	b7b96 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b7b8c:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b7b8e:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b7b92:	3601      	adds	r6, #1
        while (client.available()) {
   b7b94:	e7eb      	b.n	b7b6e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b7b96:	f242 73ff 	movw	r3, #10239	; 0x27ff
   b7b9a:	429e      	cmp	r6, r3
   b7b9c:	d1f9      	bne.n	b7b92 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b7b9e:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   b7ba2:	2200      	movs	r2, #0
   b7ba4:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
                client.stop();
   b7ba8:	4620      	mov	r0, r4
   b7baa:	f003 f83d 	bl	bac28 <_ZN9TCPClient4stopEv>
                error = true;
   b7bae:	46a8      	mov	r8, r5
   b7bb0:	e7ef      	b.n	b7b92 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b7bb2:	19a3      	adds	r3, r4, r6
   b7bb4:	7718      	strb	r0, [r3, #28]
   b7bb6:	f000 fdb1 	bl	b871c <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b7bba:	9b01      	ldr	r3, [sp, #4]
   b7bbc:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b7bc0:	f1b8 0f00 	cmp.w	r8, #0
   b7bc4:	d104      	bne.n	b7bd0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
   b7bc6:	45d9      	cmp	r9, fp
   b7bc8:	d802      	bhi.n	b7bd0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
            delay(200);
   b7bca:	20c8      	movs	r0, #200	; 0xc8
   b7bcc:	f000 ffca 	bl	b8b64 <delay>
    } while (client.connected() && !timeout && !error);
   b7bd0:	4620      	mov	r0, r4
   b7bd2:	f002 fef1 	bl	ba9b8 <_ZN9TCPClient9connectedEv>
   b7bd6:	b120      	cbz	r0, b7be2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b7bd8:	45d9      	cmp	r9, fp
   b7bda:	d802      	bhi.n	b7be2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b7bdc:	f1b8 0f00 	cmp.w	r8, #0
   b7be0:	d0c5      	beq.n	b7b6e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b7be2:	4620      	mov	r0, r4
   b7be4:	f003 f820 	bl	bac28 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b7be8:	4651      	mov	r1, sl
   b7bea:	a802      	add	r0, sp, #8
   b7bec:	f002 fc53 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b7bf0:	230c      	movs	r3, #12
   b7bf2:	2209      	movs	r2, #9
   b7bf4:	a902      	add	r1, sp, #8
   b7bf6:	a806      	add	r0, sp, #24
   b7bf8:	f002 fd4a 	bl	ba690 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b7bfc:	491e      	ldr	r1, [pc, #120]	; (b7c78 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b7bfe:	a80a      	add	r0, sp, #40	; 0x28
   b7c00:	f002 fc49 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
   b7c04:	a90a      	add	r1, sp, #40	; 0x28
   b7c06:	a802      	add	r0, sp, #8
   b7c08:	f002 fd3e 	bl	ba688 <_ZNK6String7indexOfERKS_>
   b7c0c:	4604      	mov	r4, r0
   b7c0e:	a80a      	add	r0, sp, #40	; 0x28
   b7c10:	f002 fbf6 	bl	ba400 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b7c14:	1c63      	adds	r3, r4, #1
   b7c16:	d108      	bne.n	b7c2a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fe>
    String statusCode = raw_response.substring(9,12);
   b7c18:	a806      	add	r0, sp, #24
   b7c1a:	f002 fbf1 	bl	ba400 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b7c1e:	a802      	add	r0, sp, #8
   b7c20:	f002 fbee 	bl	ba400 <_ZN6StringD1Ev>
}
   b7c24:	b011      	add	sp, #68	; 0x44
   b7c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b7c2a:	1d3d      	adds	r5, r7, #4
   b7c2c:	4913      	ldr	r1, [pc, #76]	; (b7c7c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b7c2e:	4628      	mov	r0, r5
   b7c30:	f002 fc79 	bl	ba526 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b7c34:	1d22      	adds	r2, r4, #4
   b7c36:	a902      	add	r1, sp, #8
   b7c38:	a80a      	add	r0, sp, #40	; 0x28
   b7c3a:	f002 fd49 	bl	ba6d0 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b7c3e:	a90a      	add	r1, sp, #40	; 0x28
   b7c40:	4628      	mov	r0, r5
   b7c42:	f002 fcac 	bl	ba59e <_ZN6String6concatERKS_>
   b7c46:	a80a      	add	r0, sp, #40	; 0x28
   b7c48:	f002 fbda 	bl	ba400 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b7c4c:	9806      	ldr	r0, [sp, #24]
   b7c4e:	f004 fa8b 	bl	bc168 <atoi>
   b7c52:	6038      	str	r0, [r7, #0]
   b7c54:	e7e0      	b.n	b7c18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ec>
   b7c56:	bf00      	nop
   b7c58:	000bea48 	.word	0x000bea48
   b7c5c:	000be588 	.word	0x000be588
   b7c60:	000be78c 	.word	0x000be78c
   b7c64:	000be79e 	.word	0x000be79e
   b7c68:	000be798 	.word	0x000be798
   b7c6c:	000be7a9 	.word	0x000be7a9
   b7c70:	000be7ae 	.word	0x000be7ae
   b7c74:	000be7bd 	.word	0x000be7bd
   b7c78:	000be7c2 	.word	0x000be7c2
   b7c7c:	000be7c6 	.word	0x000be7c6

000b7c80 <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   b7c80:	4770      	bx	lr

000b7c82 <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   b7c82:	b510      	push	{r4, lr}
}
   b7c84:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   b7c86:	4604      	mov	r4, r0
}
   b7c88:	f7fc fa0b 	bl	b40a2 <_ZdlPvj>
   b7c8c:	4620      	mov	r0, r4
   b7c8e:	bd10      	pop	{r4, pc}

000b7c90 <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   b7c90:	b510      	push	{r4, lr}
   b7c92:	4b05      	ldr	r3, [pc, #20]	; (b7ca8 <_ZN10JsonBufferD1Ev+0x18>)
   b7c94:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b7c96:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b7c98:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b7c9a:	b91b      	cbnz	r3, b7ca4 <_ZN10JsonBufferD1Ev+0x14>
   b7c9c:	6840      	ldr	r0, [r0, #4]
   b7c9e:	b108      	cbz	r0, b7ca4 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b7ca0:	f000 ff18 	bl	b8ad4 <free>
}
   b7ca4:	4620      	mov	r0, r4
   b7ca6:	bd10      	pop	{r4, pc}
   b7ca8:	000be7d4 	.word	0x000be7d4

000b7cac <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b7cac:	b510      	push	{r4, lr}
   b7cae:	4604      	mov	r4, r0
}
   b7cb0:	f7ff ffee 	bl	b7c90 <_ZN10JsonBufferD1Ev>
   b7cb4:	4620      	mov	r0, r4
   b7cb6:	2114      	movs	r1, #20
   b7cb8:	f7fc f9f3 	bl	b40a2 <_ZdlPvj>
   b7cbc:	4620      	mov	r0, r4
   b7cbe:	bd10      	pop	{r4, pc}

000b7cc0 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b7cc0:	b510      	push	{r4, lr}
   b7cc2:	4b07      	ldr	r3, [pc, #28]	; (b7ce0 <_ZN10JsonParserD1Ev+0x20>)
   b7cc4:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b7cc6:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b7cc8:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b7cca:	b91b      	cbnz	r3, b7cd4 <_ZN10JsonParserD1Ev+0x14>
   b7ccc:	6940      	ldr	r0, [r0, #20]
   b7cce:	b108      	cbz	r0, b7cd4 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b7cd0:	f000 ff00 	bl	b8ad4 <free>
JsonParser::~JsonParser() {
   b7cd4:	4620      	mov	r0, r4
   b7cd6:	f7ff ffdb 	bl	b7c90 <_ZN10JsonBufferD1Ev>
}
   b7cda:	4620      	mov	r0, r4
   b7cdc:	bd10      	pop	{r4, pc}
   b7cde:	bf00      	nop
   b7ce0:	000be7e4 	.word	0x000be7e4

000b7ce4 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b7ce4:	b510      	push	{r4, lr}
   b7ce6:	4604      	mov	r4, r0
}
   b7ce8:	f7ff ffea 	bl	b7cc0 <_ZN10JsonParserD1Ev>
   b7cec:	4620      	mov	r0, r4
   b7cee:	212c      	movs	r1, #44	; 0x2c
   b7cf0:	f7fc f9d7 	bl	b40a2 <_ZdlPvj>
   b7cf4:	4620      	mov	r0, r4
   b7cf6:	bd10      	pop	{r4, pc}

000b7cf8 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b7cf8:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b7cfa:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b7cfc:	4604      	mov	r4, r0
   b7cfe:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b7d00:	b10b      	cbz	r3, b7d06 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b7d02:	2000      	movs	r0, #0
}
   b7d04:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b7d06:	6840      	ldr	r0, [r0, #4]
   b7d08:	b138      	cbz	r0, b7d1a <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b7d0a:	f000 feeb 	bl	b8ae4 <realloc>
		if (newBuffer) {
   b7d0e:	2800      	cmp	r0, #0
   b7d10:	d0f7      	beq.n	b7d02 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b7d12:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b7d16:	2001      	movs	r0, #1
   b7d18:	e7f4      	b.n	b7d04 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b7d1a:	4608      	mov	r0, r1
   b7d1c:	f000 fed2 	bl	b8ac4 <malloc>
   b7d20:	e7f5      	b.n	b7d0e <_ZN10JsonBuffer8allocateEj+0x16>

000b7d22 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7d22:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7d24:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7d26:	460e      	mov	r6, r1
   b7d28:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7d2a:	18d1      	adds	r1, r2, r3
   b7d2c:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b7d2e:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b7d30:	b172      	cbz	r2, b7d50 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b7d32:	6882      	ldr	r2, [r0, #8]
   b7d34:	428a      	cmp	r2, r1
   b7d36:	d30b      	bcc.n	b7d50 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b7d38:	6860      	ldr	r0, [r4, #4]
   b7d3a:	68e3      	ldr	r3, [r4, #12]
   b7d3c:	462a      	mov	r2, r5
   b7d3e:	4631      	mov	r1, r6
   b7d40:	4418      	add	r0, r3
   b7d42:	f004 fa25 	bl	bc190 <memcpy>
	offset += dataLen;
   b7d46:	68e2      	ldr	r2, [r4, #12]
   b7d48:	442a      	add	r2, r5
   b7d4a:	60e2      	str	r2, [r4, #12]
	return true;
   b7d4c:	2001      	movs	r0, #1
}
   b7d4e:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b7d50:	4620      	mov	r0, r4
   b7d52:	f7ff ffd1 	bl	b7cf8 <_ZN10JsonBuffer8allocateEj>
   b7d56:	2800      	cmp	r0, #0
   b7d58:	d1ee      	bne.n	b7d38 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b7d5a:	e7f8      	b.n	b7d4e <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b7d5c <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b7d5c:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b7d5e:	2100      	movs	r1, #0
   b7d60:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b7d62:	b123      	cbz	r3, b7d6e <_ZN10JsonBuffer5clearEv+0x12>
   b7d64:	6882      	ldr	r2, [r0, #8]
   b7d66:	b112      	cbz	r2, b7d6e <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b7d68:	4618      	mov	r0, r3
   b7d6a:	f004 ba39 	b.w	bc1e0 <memset>
}
   b7d6e:	4770      	bx	lr

000b7d70 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b7d70:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b7d72:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b7d76:	2200      	movs	r2, #0
   b7d78:	60c2      	str	r2, [r0, #12]
   b7d7a:	2201      	movs	r2, #1
   b7d7c:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b7d7e:	6143      	str	r3, [r0, #20]
   b7d80:	4a02      	ldr	r2, [pc, #8]	; (b7d8c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b7d82:	9b02      	ldr	r3, [sp, #8]
   b7d84:	6002      	str	r2, [r0, #0]
   b7d86:	61c3      	str	r3, [r0, #28]
}
   b7d88:	bd10      	pop	{r4, pc}
   b7d8a:	bf00      	nop
   b7d8c:	000be7e4 	.word	0x000be7e4

000b7d90 <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   b7d90:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   b7d94:	429a      	cmp	r2, r3
   b7d96:	4b04      	ldr	r3, [pc, #16]	; (b7da8 <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b7d98:	bf38      	it	cc
   b7d9a:	6082      	strcc	r2, [r0, #8]
   b7d9c:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7da0:	bf24      	itt	cs
   b7da2:	2300      	movcs	r3, #0
   b7da4:	6083      	strcs	r3, [r0, #8]
}
   b7da6:	4770      	bx	lr
   b7da8:	000be7f4 	.word	0x000be7f4

000b7dac <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b7dac:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b7dae:	6813      	ldr	r3, [r2, #0]
   b7db0:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b7db2:	6813      	ldr	r3, [r2, #0]
   b7db4:	f103 0410 	add.w	r4, r3, #16
   b7db8:	6014      	str	r4, [r2, #0]
   b7dba:	6986      	ldr	r6, [r0, #24]
   b7dbc:	42b4      	cmp	r4, r6
   b7dbe:	d20a      	bcs.n	b7dd6 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b7dc0:	699b      	ldr	r3, [r3, #24]
   b7dc2:	688c      	ldr	r4, [r1, #8]
   b7dc4:	42a3      	cmp	r3, r4
   b7dc6:	da01      	bge.n	b7dcc <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b7dc8:	42ab      	cmp	r3, r5
   b7dca:	ddf2      	ble.n	b7db2 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b7dcc:	42a3      	cmp	r3, r4
   b7dce:	bfcc      	ite	gt
   b7dd0:	2000      	movgt	r0, #0
   b7dd2:	2001      	movle	r0, #1
   b7dd4:	e000      	b.n	b7dd8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b7dd6:	2000      	movs	r0, #0
}
   b7dd8:	bd70      	pop	{r4, r5, r6, pc}

000b7dda <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b7dda:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7dde:	9d08      	ldr	r5, [sp, #32]
   b7de0:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7de2:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b7de6:	4604      	mov	r4, r0
   b7de8:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7dea:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7dec:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b7dee:	9801      	ldr	r0, [sp, #4]
   b7df0:	69a3      	ldr	r3, [r4, #24]
   b7df2:	4283      	cmp	r3, r0
   b7df4:	d91a      	bls.n	b7e2c <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b7df6:	6882      	ldr	r2, [r0, #8]
   b7df8:	688b      	ldr	r3, [r1, #8]
   b7dfa:	429a      	cmp	r2, r3
   b7dfc:	da16      	bge.n	b7e2c <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b7dfe:	42ae      	cmp	r6, r5
   b7e00:	d10b      	bne.n	b7e1a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b7e02:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b7e04:	aa01      	add	r2, sp, #4
   b7e06:	4620      	mov	r0, r4
   b7e08:	f7ff ffd0 	bl	b7dac <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b7e0c:	b128      	cbz	r0, b7e1a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b7e0e:	9b01      	ldr	r3, [sp, #4]
   b7e10:	f8c8 3000 	str.w	r3, [r8]
}
   b7e14:	b002      	add	sp, #8
   b7e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b7e1a:	aa01      	add	r2, sp, #4
   b7e1c:	4620      	mov	r0, r4
   b7e1e:	f7ff ffc5 	bl	b7dac <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b7e22:	4620      	mov	r0, r4
		index++;
   b7e24:	3601      	adds	r6, #1
		skipObject(container, token);
   b7e26:	f7ff ffc1 	bl	b7dac <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7e2a:	e7e0      	b.n	b7dee <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b7e2c:	2000      	movs	r0, #0
   b7e2e:	e7f1      	b.n	b7e14 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b7e30 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7e32:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7e34:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7e38:	4604      	mov	r4, r0
   b7e3a:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7e3c:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7e3e:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b7e40:	9b01      	ldr	r3, [sp, #4]
   b7e42:	69a2      	ldr	r2, [r4, #24]
   b7e44:	429a      	cmp	r2, r3
   b7e46:	d90f      	bls.n	b7e68 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b7e48:	6898      	ldr	r0, [r3, #8]
   b7e4a:	688a      	ldr	r2, [r1, #8]
   b7e4c:	4290      	cmp	r0, r2
   b7e4e:	da0b      	bge.n	b7e68 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b7e50:	42b5      	cmp	r5, r6
   b7e52:	d103      	bne.n	b7e5c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b7e54:	603b      	str	r3, [r7, #0]
			return true;
   b7e56:	2001      	movs	r0, #1
}
   b7e58:	b003      	add	sp, #12
   b7e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b7e5c:	aa01      	add	r2, sp, #4
   b7e5e:	4620      	mov	r0, r4
		index++;
   b7e60:	3501      	adds	r5, #1
		skipObject(container, token);
   b7e62:	f7ff ffa3 	bl	b7dac <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7e66:	e7eb      	b.n	b7e40 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b7e68:	2000      	movs	r0, #0
   b7e6a:	e7f5      	b.n	b7e58 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b7e6c <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b7e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b7e6e:	3b01      	subs	r3, #1
   b7e70:	2400      	movs	r4, #0
   b7e72:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b7e76:	1bf6      	subs	r6, r6, r7
   b7e78:	42a6      	cmp	r6, r4
   b7e7a:	dd08      	ble.n	b7e8e <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b7e7c:	42a3      	cmp	r3, r4
   b7e7e:	dd06      	ble.n	b7e8e <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b7e80:	6845      	ldr	r5, [r0, #4]
   b7e82:	443d      	add	r5, r7
   b7e84:	5d2d      	ldrb	r5, [r5, r4]
   b7e86:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b7e8a:	3401      	adds	r4, #1
   b7e8c:	e7f1      	b.n	b7e72 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b7e8e:	2300      	movs	r3, #0
   b7e90:	7013      	strb	r3, [r2, #0]
}
   b7e92:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7e94 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b7e94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7e96:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b7e98:	2310      	movs	r3, #16
   b7e9a:	466a      	mov	r2, sp
   b7e9c:	f7ff ffe6 	bl	b7e6c <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b7ea0:	4904      	ldr	r1, [pc, #16]	; (b7eb4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b7ea2:	4622      	mov	r2, r4
   b7ea4:	4668      	mov	r0, sp
   b7ea6:	f000 fe25 	bl	b8af4 <sscanf>
}
   b7eaa:	1e43      	subs	r3, r0, #1
   b7eac:	4258      	negs	r0, r3
   b7eae:	4158      	adcs	r0, r3
   b7eb0:	b004      	add	sp, #16
   b7eb2:	bd10      	pop	{r4, pc}
   b7eb4:	000beaa8 	.word	0x000beaa8

000b7eb8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
   b7eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7eba:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b7ebc:	2310      	movs	r3, #16
   b7ebe:	466a      	mov	r2, sp
   b7ec0:	f7ff ffd4 	bl	b7e6c <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
   b7ec4:	4668      	mov	r0, sp
   b7ec6:	2100      	movs	r1, #0
   b7ec8:	f005 f834 	bl	bcf34 <strtof>
}
   b7ecc:	2001      	movs	r0, #1
	result = strtof(tmp, 0);
   b7ece:	ed84 0a00 	vstr	s0, [r4]
}
   b7ed2:	b004      	add	sp, #16
   b7ed4:	bd10      	pop	{r4, pc}
	...

000b7ed8 <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   b7ed8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7eda:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b7edc:	6889      	ldr	r1, [r1, #8]
   b7ede:	4e0a      	ldr	r6, [pc, #40]	; (b7f08 <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   b7ee0:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b7ee2:	b161      	cbz	r1, b7efe <_ZNK13JsonReference5indexEj+0x26>
   b7ee4:	6868      	ldr	r0, [r5, #4]
   b7ee6:	ab01      	add	r3, sp, #4
   b7ee8:	f7ff ffa2 	bl	b7e30 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b7eec:	b138      	cbz	r0, b7efe <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   b7eee:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b7ef0:	e9c4 6300 	strd	r6, r3, [r4]
   b7ef4:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7ef6:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   b7ef8:	4620      	mov	r0, r4
   b7efa:	b002      	add	sp, #8
   b7efc:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b7efe:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7f00:	e9c4 6300 	strd	r6, r3, [r4]
   b7f04:	2300      	movs	r3, #0
   b7f06:	e7f6      	b.n	b7ef6 <_ZNK13JsonReference5indexEj+0x1e>
   b7f08:	000be7f4 	.word	0x000be7f4

000b7f0c <_ZNK13JsonReference8valueIntEi>:
bool JsonReference::valueBool(bool result) const {
	(void) value(result);
	return result;
}

int JsonReference::valueInt(int result) const {
   b7f0c:	b507      	push	{r0, r1, r2, lr}
   b7f0e:	9101      	str	r1, [sp, #4]
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   b7f10:	6881      	ldr	r1, [r0, #8]
   b7f12:	b119      	cbz	r1, b7f1c <_ZNK13JsonReference8valueIntEi+0x10>
   b7f14:	6840      	ldr	r0, [r0, #4]
   b7f16:	aa01      	add	r2, sp, #4
   b7f18:	f7ff ffbc 	bl	b7e94 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	(void) value(result);
	return result;
}
   b7f1c:	9801      	ldr	r0, [sp, #4]
   b7f1e:	b003      	add	sp, #12
   b7f20:	f85d fb04 	ldr.w	pc, [sp], #4

000b7f24 <_ZNK13JsonReference10valueFloatEf>:
unsigned long JsonReference::valueUnsignedLong(unsigned long result) const {
	(void) value(result);
	return result;
}

float JsonReference::valueFloat(float result) const {
   b7f24:	b507      	push	{r0, r1, r2, lr}
   b7f26:	6881      	ldr	r1, [r0, #8]
   b7f28:	ed8d 0a01 	vstr	s0, [sp, #4]
   b7f2c:	b119      	cbz	r1, b7f36 <_ZNK13JsonReference10valueFloatEf+0x12>
   b7f2e:	6840      	ldr	r0, [r0, #4]
   b7f30:	aa01      	add	r2, sp, #4
   b7f32:	f7ff ffc1 	bl	b7eb8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
	(void) value(result);
	return result;
}
   b7f36:	ed9d 0a01 	vldr	s0, [sp, #4]
   b7f3a:	b003      	add	sp, #12
   b7f3c:	f85d fb04 	ldr.w	pc, [sp], #4

000b7f40 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b7f40:	b510      	push	{r4, lr}
   b7f42:	4604      	mov	r4, r0
	if (str) {
   b7f44:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b7f46:	460b      	mov	r3, r1
	if (str) {
   b7f48:	b128      	cbz	r0, b7f56 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b7f4a:	f002 fb2c 	bl	ba5a6 <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b7f4e:	68e3      	ldr	r3, [r4, #12]
   b7f50:	3301      	adds	r3, #1
   b7f52:	60e3      	str	r3, [r4, #12]
	}
}
   b7f54:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b7f56:	6860      	ldr	r0, [r4, #4]
   b7f58:	2800      	cmp	r0, #0
   b7f5a:	d0f8      	beq.n	b7f4e <_ZN16JsonParserString6appendEc+0xe>
   b7f5c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b7f60:	3a01      	subs	r2, #1
   b7f62:	428a      	cmp	r2, r1
			buf[length] = ch;
   b7f64:	bf88      	it	hi
   b7f66:	5443      	strbhi	r3, [r0, r1]
   b7f68:	e7f1      	b.n	b7f4e <_ZN16JsonParserString6appendEc+0xe>

000b7f6a <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b7f6a:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b7f6c:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b7f6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7f70:	4608      	mov	r0, r1
		str.append((char)unicode);
   b7f72:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b7f74:	d804      	bhi.n	b7f80 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b7f76:	b003      	add	sp, #12
   b7f78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b7f7c:	f7ff bfe0 	b.w	b7f40 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b7f80:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b7f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b7f88:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b7f8c:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b7f90:	d207      	bcs.n	b7fa2 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b7f92:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b7f96:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b7f98:	f7ff ffd2 	bl	b7f40 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b7f9c:	9801      	ldr	r0, [sp, #4]
   b7f9e:	4621      	mov	r1, r4
   b7fa0:	e7e9      	b.n	b7f76 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b7fa2:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b7fa4:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b7fa8:	9001      	str	r0, [sp, #4]
   b7faa:	f7ff ffc9 	bl	b7f40 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b7fae:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b7fb2:	9801      	ldr	r0, [sp, #4]
   b7fb4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b7fb8:	e7ee      	b.n	b7f98 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b7fbc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b7fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b7fc0:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b7fc2:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7fc4:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b8094 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b7fc8:	4680      	mov	r8, r0
   b7fca:	460f      	mov	r7, r1
   b7fcc:	4615      	mov	r5, r2
			escape = false;
   b7fce:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b7fd0:	68b8      	ldr	r0, [r7, #8]
   b7fd2:	42b0      	cmp	r0, r6
   b7fd4:	dd5a      	ble.n	b808c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b7fd6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b7fda:	5d99      	ldrb	r1, [r3, r6]
   b7fdc:	199a      	adds	r2, r3, r6
		if (escape) {
   b7fde:	2c00      	cmp	r4, #0
   b7fe0:	d04b      	beq.n	b807a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b7fe2:	2975      	cmp	r1, #117	; 0x75
   b7fe4:	d805      	bhi.n	b7ff2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b7fe6:	296d      	cmp	r1, #109	; 0x6d
   b7fe8:	d807      	bhi.n	b7ffa <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b7fea:	2962      	cmp	r1, #98	; 0x62
   b7fec:	d01e      	beq.n	b802c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b7fee:	2966      	cmp	r1, #102	; 0x66
   b7ff0:	d01e      	beq.n	b8030 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b7ff2:	4628      	mov	r0, r5
   b7ff4:	f7ff ffa4 	bl	b7f40 <_ZN16JsonParserString6appendEc>
				break;
   b7ff8:	e03d      	b.n	b8076 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b7ffa:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b7ffe:	2c07      	cmp	r4, #7
   b8000:	d8f7      	bhi.n	b7ff2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b8002:	f20f 0c08 	addw	ip, pc, #8
   b8006:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b800a:	bf00      	nop
   b800c:	000b8035 	.word	0x000b8035
   b8010:	000b7ff3 	.word	0x000b7ff3
   b8014:	000b7ff3 	.word	0x000b7ff3
   b8018:	000b7ff3 	.word	0x000b7ff3
   b801c:	000b8039 	.word	0x000b8039
   b8020:	000b7ff3 	.word	0x000b7ff3
   b8024:	000b803d 	.word	0x000b803d
   b8028:	000b8041 	.word	0x000b8041
				str.append('\b');
   b802c:	2108      	movs	r1, #8
   b802e:	e7e0      	b.n	b7ff2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b8030:	210c      	movs	r1, #12
   b8032:	e7de      	b.n	b7ff2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b8034:	210a      	movs	r1, #10
   b8036:	e7dc      	b.n	b7ff2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b8038:	210d      	movs	r1, #13
   b803a:	e7da      	b.n	b7ff2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b803c:	2109      	movs	r1, #9
   b803e:	e7d8      	b.n	b7ff2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b8040:	1d31      	adds	r1, r6, #4
   b8042:	4288      	cmp	r0, r1
   b8044:	dd17      	ble.n	b8076 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b8046:	a902      	add	r1, sp, #8
   b8048:	3304      	adds	r3, #4
   b804a:	4433      	add	r3, r6
   b804c:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b804e:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b8052:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b8056:	429a      	cmp	r2, r3
   b8058:	d1f9      	bne.n	b804e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b805a:	aa01      	add	r2, sp, #4
   b805c:	4651      	mov	r1, sl
					tmp[4] = 0;
   b805e:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8062:	f000 fd47 	bl	b8af4 <sscanf>
   b8066:	2801      	cmp	r0, #1
   b8068:	d105      	bne.n	b8076 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b806a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b806e:	4629      	mov	r1, r5
   b8070:	f7ff ff7b 	bl	b7f6a <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b8074:	3605      	adds	r6, #5
			escape = false;
   b8076:	2400      	movs	r4, #0
   b8078:	e004      	b.n	b8084 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b807a:	295c      	cmp	r1, #92	; 0x5c
   b807c:	d004      	beq.n	b8088 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b807e:	4628      	mov	r0, r5
   b8080:	f7ff ff5e 	bl	b7f40 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b8084:	3601      	adds	r6, #1
   b8086:	e7a3      	b.n	b7fd0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b8088:	2401      	movs	r4, #1
   b808a:	e7fb      	b.n	b8084 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b808c:	2001      	movs	r0, #1
   b808e:	b004      	add	sp, #16
   b8090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8094:	000be7c7 	.word	0x000be7c7

000b8098 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b8098:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b809a:	460c      	mov	r4, r1
   b809c:	4606      	mov	r6, r0
	result = "";
   b809e:	490c      	ldr	r1, [pc, #48]	; (b80d0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b80a0:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b80a2:	4615      	mov	r5, r2
	result = "";
   b80a4:	f002 fa3f 	bl	ba526 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b80a8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b80ac:	1ac9      	subs	r1, r1, r3
   b80ae:	3101      	adds	r1, #1
   b80b0:	4628      	mov	r0, r5
   b80b2:	f002 f9c3 	bl	ba43c <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b80b6:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b80b8:	466a      	mov	r2, sp
   b80ba:	4621      	mov	r1, r4
   b80bc:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b80be:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b80c2:	9500      	str	r5, [sp, #0]
   b80c4:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b80c6:	f7ff ff79 	bl	b7fbc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b80ca:	b004      	add	sp, #16
   b80cc:	bd70      	pop	{r4, r5, r6, pc}
   b80ce:	bf00      	nop
   b80d0:	000be7c6 	.word	0x000be7c6

000b80d4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b80d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b80d8:	b089      	sub	sp, #36	; 0x24
   b80da:	4605      	mov	r5, r0
   b80dc:	4688      	mov	r8, r1
	String keyName;
   b80de:	a804      	add	r0, sp, #16
   b80e0:	4912      	ldr	r1, [pc, #72]	; (b812c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b80e2:	4616      	mov	r6, r2
   b80e4:	4699      	mov	r9, r3
	String keyName;
   b80e6:	f002 f9d6 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b80ea:	2700      	movs	r7, #0
   b80ec:	9700      	str	r7, [sp, #0]
   b80ee:	464b      	mov	r3, r9
   b80f0:	aa03      	add	r2, sp, #12
   b80f2:	4641      	mov	r1, r8
   b80f4:	4628      	mov	r0, r5
   b80f6:	f7ff fe70 	bl	b7dda <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b80fa:	4604      	mov	r4, r0
   b80fc:	b170      	cbz	r0, b811c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b80fe:	9903      	ldr	r1, [sp, #12]
   b8100:	aa04      	add	r2, sp, #16
   b8102:	4628      	mov	r0, r5
   b8104:	f7ff ffc8 	bl	b8098 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b8108:	4604      	mov	r4, r0
   b810a:	b908      	cbnz	r0, b8110 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b810c:	3701      	adds	r7, #1
   b810e:	e7ed      	b.n	b80ec <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b8110:	4631      	mov	r1, r6
   b8112:	a804      	add	r0, sp, #16
   b8114:	f002 fa97 	bl	ba646 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b8118:	2800      	cmp	r0, #0
   b811a:	d0f7      	beq.n	b810c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b811c:	a804      	add	r0, sp, #16
   b811e:	f002 f96f 	bl	ba400 <_ZN6StringD1Ev>
}
   b8122:	4620      	mov	r0, r4
   b8124:	b009      	add	sp, #36	; 0x24
   b8126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b812a:	bf00      	nop
   b812c:	000be7c6 	.word	0x000be7c6

000b8130 <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   b8130:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8132:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b8134:	6889      	ldr	r1, [r1, #8]
   b8136:	4e0a      	ldr	r6, [pc, #40]	; (b8160 <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   b8138:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b813a:	b161      	cbz	r1, b8156 <_ZNK13JsonReference3keyEPKc+0x26>
   b813c:	6868      	ldr	r0, [r5, #4]
   b813e:	ab01      	add	r3, sp, #4
   b8140:	f7ff ffc8 	bl	b80d4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b8144:	b138      	cbz	r0, b8156 <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   b8146:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b8148:	e9c4 6300 	strd	r6, r3, [r4]
   b814c:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b814e:	60a3      	str	r3, [r4, #8]
}
   b8150:	4620      	mov	r0, r4
   b8152:	b002      	add	sp, #8
   b8154:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b8156:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b8158:	e9c4 6300 	strd	r6, r3, [r4]
   b815c:	2300      	movs	r3, #0
   b815e:	e7f6      	b.n	b814e <_ZNK13JsonReference3keyEPKc+0x1e>
   b8160:	000be7f4 	.word	0x000be7f4

000b8164 <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   b8164:	b538      	push	{r3, r4, r5, lr}
   b8166:	460d      	mov	r5, r1
	String result;
   b8168:	4905      	ldr	r1, [pc, #20]	; (b8180 <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   b816a:	4604      	mov	r4, r0
	String result;
   b816c:	f002 f993 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
   b8170:	68a9      	ldr	r1, [r5, #8]
   b8172:	b119      	cbz	r1, b817c <_ZNK13JsonReference11valueStringEv+0x18>
   b8174:	6868      	ldr	r0, [r5, #4]
   b8176:	4622      	mov	r2, r4
   b8178:	f7ff ff8e 	bl	b8098 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   b817c:	4620      	mov	r0, r4
   b817e:	bd38      	pop	{r3, r4, r5, pc}
   b8180:	000be7c6 	.word	0x000be7c6

000b8184 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b8184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b8188:	6844      	ldr	r4, [r0, #4]
   b818a:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b818e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b8192:	f8d0 e000 	ldr.w	lr, [r0]
   b8196:	4596      	cmp	lr, r2
   b8198:	f080 81b9 	bcs.w	b850e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b819c:	f811 800e 	ldrb.w	r8, [r1, lr]
   b81a0:	f1b8 0f00 	cmp.w	r8, #0
   b81a4:	f000 81b3 	beq.w	b850e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b81a8:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b81ac:	f000 8098 	beq.w	b82e0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b81b0:	d833      	bhi.n	b821a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b81b2:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b81b6:	f000 80a6 	beq.w	b8306 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b81ba:	d810      	bhi.n	b81de <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b81bc:	f1a8 0809 	sub.w	r8, r8, #9
   b81c0:	fa5f f888 	uxtb.w	r8, r8
   b81c4:	f1b8 0f17 	cmp.w	r8, #23
   b81c8:	d80d      	bhi.n	b81e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b81ca:	4d9f      	ldr	r5, [pc, #636]	; (b8448 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b81cc:	fa0c f808 	lsl.w	r8, ip, r8
   b81d0:	ea18 0f05 	tst.w	r8, r5
   b81d4:	d007      	beq.n	b81e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b81d6:	6805      	ldr	r5, [r0, #0]
   b81d8:	3501      	adds	r5, #1
   b81da:	6005      	str	r5, [r0, #0]
   b81dc:	e7d9      	b.n	b8192 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b81de:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b81e2:	f000 8133 	beq.w	b844c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b81e6:	f8d0 8000 	ldr.w	r8, [r0]
   b81ea:	4542      	cmp	r2, r8
   b81ec:	d90e      	bls.n	b820c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b81ee:	f811 5008 	ldrb.w	r5, [r1, r8]
   b81f2:	b15d      	cbz	r5, b820c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b81f4:	2d3a      	cmp	r5, #58	; 0x3a
   b81f6:	f200 8169 	bhi.w	b84cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b81fa:	2d1f      	cmp	r5, #31
   b81fc:	f200 8151 	bhi.w	b84a2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b8200:	2d0a      	cmp	r5, #10
   b8202:	f200 8160 	bhi.w	b84c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b8206:	2d08      	cmp	r5, #8
   b8208:	f240 8156 	bls.w	b84b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b820c:	2b00      	cmp	r3, #0
   b820e:	f040 8162 	bne.w	b84d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b8212:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b8216:	6005      	str	r5, [r0, #0]
   b8218:	e0a5      	b.n	b8366 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b821a:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b821e:	d037      	beq.n	b8290 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b8220:	d82e      	bhi.n	b8280 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b8222:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b8226:	d033      	beq.n	b8290 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b8228:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b822c:	d1db      	bne.n	b81e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b822e:	2b00      	cmp	r3, #0
   b8230:	d0d1      	beq.n	b81d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b8232:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b8236:	6845      	ldr	r5, [r0, #4]
   b8238:	3d01      	subs	r5, #1
   b823a:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b823e:	2d00      	cmp	r5, #0
   b8240:	db55      	blt.n	b82ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b8242:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b8246:	3701      	adds	r7, #1
   b8248:	d04d      	beq.n	b82e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b824a:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b824e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b8252:	d148      	bne.n	b82e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b8254:	f898 b000 	ldrb.w	fp, [r8]
   b8258:	45cb      	cmp	fp, r9
   b825a:	d14b      	bne.n	b82f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b825c:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b8260:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b8264:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b8268:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b826c:	f8de 7004 	ldr.w	r7, [lr, #4]
   b8270:	3701      	adds	r7, #1
   b8272:	d042      	beq.n	b82fa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b8274:	f8de 7008 	ldr.w	r7, [lr, #8]
   b8278:	3701      	adds	r7, #1
   b827a:	d13e      	bne.n	b82fa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b827c:	6085      	str	r5, [r0, #8]
				break;
   b827e:	e7aa      	b.n	b81d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b8280:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b8284:	d1af      	bne.n	b81e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b8286:	2b00      	cmp	r3, #0
   b8288:	d0a5      	beq.n	b81d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b828a:	f04f 0901 	mov.w	r9, #1
   b828e:	e7d2      	b.n	b8236 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b8290:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b8292:	2b00      	cmp	r3, #0
   b8294:	d09f      	beq.n	b81d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b8296:	6845      	ldr	r5, [r0, #4]
   b8298:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b829a:	42af      	cmp	r7, r5
   b829c:	d94a      	bls.n	b8334 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b829e:	f105 0e01 	add.w	lr, r5, #1
   b82a2:	f8c0 e004 	str.w	lr, [r0, #4]
   b82a6:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b82aa:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b82ae:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b82b2:	2500      	movs	r5, #0
   b82b4:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b82b8:	6885      	ldr	r5, [r0, #8]
   b82ba:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b82bc:	bf1f      	itttt	ne
   b82be:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b82c2:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b82c6:	3501      	addne	r5, #1
   b82c8:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b82cc:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b82d0:	bf0c      	ite	eq
   b82d2:	2501      	moveq	r5, #1
   b82d4:	2502      	movne	r5, #2
   b82d6:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b82da:	6805      	ldr	r5, [r0, #0]
   b82dc:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b82e0:	6845      	ldr	r5, [r0, #4]
   b82e2:	3d01      	subs	r5, #1
   b82e4:	e7ca      	b.n	b827c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b82e6:	3d01      	subs	r5, #1
   b82e8:	f1a8 0810 	sub.w	r8, r8, #16
   b82ec:	e7a7      	b.n	b823e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b82ee:	3501      	adds	r5, #1
   b82f0:	f47f af71 	bne.w	b81d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b82f4:	f06f 0401 	mvn.w	r4, #1
   b82f8:	e01e      	b.n	b8338 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b82fa:	3d01      	subs	r5, #1
   b82fc:	1c6f      	adds	r7, r5, #1
   b82fe:	f1ae 0e10 	sub.w	lr, lr, #16
   b8302:	d1b3      	bne.n	b826c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b8304:	e767      	b.n	b81d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b8306:	f10e 0901 	add.w	r9, lr, #1
   b830a:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b830e:	f8d0 8000 	ldr.w	r8, [r0]
   b8312:	4542      	cmp	r2, r8
   b8314:	f240 8093 	bls.w	b843e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b8318:	f811 5008 	ldrb.w	r5, [r1, r8]
   b831c:	2d00      	cmp	r5, #0
   b831e:	f000 808e 	beq.w	b843e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b8322:	2d22      	cmp	r5, #34	; 0x22
   b8324:	d130      	bne.n	b8388 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b8326:	b1f3      	cbz	r3, b8366 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b8328:	6845      	ldr	r5, [r0, #4]
   b832a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b832c:	42af      	cmp	r7, r5
   b832e:	d806      	bhi.n	b833e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b8330:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b8334:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b8338:	4620      	mov	r0, r4
   b833a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b833e:	f105 0e01 	add.w	lr, r5, #1
   b8342:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b8346:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b834a:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b834e:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b8352:	2700      	movs	r7, #0
   b8354:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b8356:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b835a:	f04f 0a03 	mov.w	sl, #3
   b835e:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b8362:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b8366:	6885      	ldr	r5, [r0, #8]
   b8368:	1c6f      	adds	r7, r5, #1
				count++;
   b836a:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b836e:	f43f af32 	beq.w	b81d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b8372:	2b00      	cmp	r3, #0
   b8374:	f43f af2f 	beq.w	b81d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b8378:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b837c:	f8de 500c 	ldr.w	r5, [lr, #12]
   b8380:	3501      	adds	r5, #1
   b8382:	f8ce 500c 	str.w	r5, [lr, #12]
   b8386:	e726      	b.n	b81d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b8388:	2d5c      	cmp	r5, #92	; 0x5c
   b838a:	d111      	bne.n	b83b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b838c:	f108 0501 	add.w	r5, r8, #1
   b8390:	42aa      	cmp	r2, r5
   b8392:	d90d      	bls.n	b83b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b8394:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b8396:	5d4d      	ldrb	r5, [r1, r5]
   b8398:	2d75      	cmp	r5, #117	; 0x75
   b839a:	d82b      	bhi.n	b83f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b839c:	2d6d      	cmp	r5, #109	; 0x6d
   b839e:	d80b      	bhi.n	b83b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b83a0:	2d66      	cmp	r5, #102	; 0x66
   b83a2:	d827      	bhi.n	b83f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b83a4:	2d5b      	cmp	r5, #91	; 0x5b
   b83a6:	d81d      	bhi.n	b83e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b83a8:	2d22      	cmp	r5, #34	; 0x22
   b83aa:	d001      	beq.n	b83b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b83ac:	2d2f      	cmp	r5, #47	; 0x2f
   b83ae:	d121      	bne.n	b83f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b83b0:	6805      	ldr	r5, [r0, #0]
   b83b2:	3501      	adds	r5, #1
   b83b4:	6005      	str	r5, [r0, #0]
   b83b6:	e7aa      	b.n	b830e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b83b8:	3d6e      	subs	r5, #110	; 0x6e
   b83ba:	2d07      	cmp	r5, #7
   b83bc:	d81a      	bhi.n	b83f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b83be:	a701      	add	r7, pc, #4	; (adr r7, b83c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b83c0:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b83c4:	000b83b1 	.word	0x000b83b1
   b83c8:	000b83f5 	.word	0x000b83f5
   b83cc:	000b83f5 	.word	0x000b83f5
   b83d0:	000b83f5 	.word	0x000b83f5
   b83d4:	000b83b1 	.word	0x000b83b1
   b83d8:	000b83f5 	.word	0x000b83f5
   b83dc:	000b83b1 	.word	0x000b83b1
   b83e0:	000b83fb 	.word	0x000b83fb
   b83e4:	3d5c      	subs	r5, #92	; 0x5c
   b83e6:	b2ed      	uxtb	r5, r5
   b83e8:	fa0c f505 	lsl.w	r5, ip, r5
   b83ec:	f240 4741 	movw	r7, #1089	; 0x441
   b83f0:	423d      	tst	r5, r7
   b83f2:	d1dd      	bne.n	b83b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b83f4:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b83f8:	e77c      	b.n	b82f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b83fa:	f108 0502 	add.w	r5, r8, #2
   b83fe:	6005      	str	r5, [r0, #0]
   b8400:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8404:	f8d0 8000 	ldr.w	r8, [r0]
   b8408:	4542      	cmp	r2, r8
   b840a:	d803      	bhi.n	b8414 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b840c:	6805      	ldr	r5, [r0, #0]
   b840e:	3d01      	subs	r5, #1
   b8410:	6005      	str	r5, [r0, #0]
					break;
   b8412:	e7cd      	b.n	b83b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8414:	f811 5008 	ldrb.w	r5, [r1, r8]
   b8418:	2d00      	cmp	r5, #0
   b841a:	d0f7      	beq.n	b840c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b841c:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b8420:	f1bb 0f09 	cmp.w	fp, #9
   b8424:	d904      	bls.n	b8430 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b8426:	f025 0520 	bic.w	r5, r5, #32
   b842a:	3d41      	subs	r5, #65	; 0x41
   b842c:	2d05      	cmp	r5, #5
   b842e:	d8e1      	bhi.n	b83f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b8430:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b8434:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b8438:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b843a:	d1e3      	bne.n	b8404 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b843c:	e7e6      	b.n	b840c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b843e:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b8442:	f06f 0402 	mvn.w	r4, #2
   b8446:	e777      	b.n	b8338 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b8448:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b844c:	2b00      	cmp	r3, #0
   b844e:	f43f aec2 	beq.w	b81d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b8452:	6885      	ldr	r5, [r0, #8]
   b8454:	1c6f      	adds	r7, r5, #1
   b8456:	f43f aebe 	beq.w	b81d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b845a:	012d      	lsls	r5, r5, #4
   b845c:	5d5d      	ldrb	r5, [r3, r5]
   b845e:	3d01      	subs	r5, #1
   b8460:	2d01      	cmp	r5, #1
   b8462:	f67f aeb8 	bls.w	b81d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b8466:	6845      	ldr	r5, [r0, #4]
   b8468:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b846c:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b8470:	f1b8 0f00 	cmp.w	r8, #0
   b8474:	f6ff aeaf 	blt.w	b81d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b8478:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b847c:	3d01      	subs	r5, #1
   b847e:	2d01      	cmp	r5, #1
   b8480:	d80a      	bhi.n	b8498 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b8482:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b8486:	3501      	adds	r5, #1
   b8488:	d006      	beq.n	b8498 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b848a:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b848e:	3501      	adds	r5, #1
   b8490:	d102      	bne.n	b8498 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b8492:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b8496:	e69e      	b.n	b81d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b8498:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b849c:	f1ae 0e10 	sub.w	lr, lr, #16
   b84a0:	e7e6      	b.n	b8470 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b84a2:	f1a5 0920 	sub.w	r9, r5, #32
   b84a6:	4f24      	ldr	r7, [pc, #144]	; (b8538 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b84a8:	fa5f f989 	uxtb.w	r9, r9
   b84ac:	fa0c f909 	lsl.w	r9, ip, r9
   b84b0:	ea19 0f07 	tst.w	r9, r7
   b84b4:	f47f aeaa 	bne.w	b820c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b84b8:	3d20      	subs	r5, #32
   b84ba:	2d5e      	cmp	r5, #94	; 0x5e
   b84bc:	d89a      	bhi.n	b83f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b84be:	f108 0501 	add.w	r5, r8, #1
   b84c2:	6005      	str	r5, [r0, #0]
   b84c4:	e68f      	b.n	b81e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b84c6:	2d0d      	cmp	r5, #13
   b84c8:	d1f6      	bne.n	b84b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b84ca:	e69f      	b.n	b820c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b84cc:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b84d0:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b84d4:	e7f8      	b.n	b84c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b84d6:	6845      	ldr	r5, [r0, #4]
   b84d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b84da:	42af      	cmp	r7, r5
   b84dc:	f67f af28 	bls.w	b8330 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b84e0:	f105 0801 	add.w	r8, r5, #1
   b84e4:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b84e8:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b84ec:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b84f0:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b84f4:	2700      	movs	r7, #0
   b84f6:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b84f8:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b84fc:	f04f 0a04 	mov.w	sl, #4
   b8500:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b8504:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b8508:	6805      	ldr	r5, [r0, #0]
   b850a:	3d01      	subs	r5, #1
   b850c:	e683      	b.n	b8216 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b850e:	2b00      	cmp	r3, #0
   b8510:	f43f af12 	beq.w	b8338 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b8514:	6842      	ldr	r2, [r0, #4]
   b8516:	1e51      	subs	r1, r2, #1
   b8518:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b851c:	2900      	cmp	r1, #0
   b851e:	f6ff af0b 	blt.w	b8338 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b8522:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b8526:	3201      	adds	r2, #1
   b8528:	d003      	beq.n	b8532 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b852a:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b852e:	3201      	adds	r2, #1
   b8530:	d087      	beq.n	b8442 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b8532:	3901      	subs	r1, #1
   b8534:	3b10      	subs	r3, #16
   b8536:	e7f1      	b.n	b851c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b8538:	04001001 	.word	0x04001001

000b853c <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b853c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b853e:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b8540:	4604      	mov	r4, r0
	if (offset == 0) {
   b8542:	b912      	cbnz	r2, b854a <_ZN10JsonParser5parseEv+0xe>
		return false;
   b8544:	2000      	movs	r0, #0
}
   b8546:	b003      	add	sp, #12
   b8548:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b854a:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b854c:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b8550:	b1ab      	cbz	r3, b857e <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b8552:	2100      	movs	r1, #0
	parser->toknext = 0;
   b8554:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b8558:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b855c:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b855e:	69c1      	ldr	r1, [r0, #28]
   b8560:	9100      	str	r1, [sp, #0]
   b8562:	6841      	ldr	r1, [r0, #4]
   b8564:	4630      	mov	r0, r6
   b8566:	f7ff fe0d 	bl	b8184 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b856a:	1c43      	adds	r3, r0, #1
   b856c:	d128      	bne.n	b85c0 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b856e:	7c25      	ldrb	r5, [r4, #16]
   b8570:	2d00      	cmp	r5, #0
   b8572:	d1e7      	bne.n	b8544 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b8574:	6960      	ldr	r0, [r4, #20]
   b8576:	f000 faad 	bl	b8ad4 <free>
			tokens = 0;
   b857a:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b857c:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b857e:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b8580:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b8584:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b8588:	68e2      	ldr	r2, [r4, #12]
   b858a:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b858c:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b858e:	9500      	str	r5, [sp, #0]
   b8590:	462b      	mov	r3, r5
   b8592:	4630      	mov	r0, r6
   b8594:	f7ff fdf6 	bl	b8184 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b8598:	2800      	cmp	r0, #0
   b859a:	dbd3      	blt.n	b8544 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b859c:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b859e:	d017      	beq.n	b85d0 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b85a0:	0100      	lsls	r0, r0, #4
   b85a2:	f000 fa8f 	bl	b8ac4 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b85a6:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b85a8:	6160      	str	r0, [r4, #20]
   b85aa:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b85ac:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b85ae:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b85b2:	68e2      	ldr	r2, [r4, #12]
   b85b4:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b85b6:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b85b8:	4630      	mov	r0, r6
   b85ba:	f7ff fde3 	bl	b8184 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b85be:	e001      	b.n	b85c4 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b85c0:	2800      	cmp	r0, #0
   b85c2:	dbbf      	blt.n	b8544 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b85c4:	6963      	ldr	r3, [r4, #20]
   b85c6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b85ca:	61a0      	str	r0, [r4, #24]
	return true;
   b85cc:	2001      	movs	r0, #1
   b85ce:	e7ba      	b.n	b8546 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b85d0:	6963      	ldr	r3, [r4, #20]
   b85d2:	61a3      	str	r3, [r4, #24]
   b85d4:	e7fa      	b.n	b85cc <_ZN10JsonParser5parseEv+0x90>
	...

000b85d8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b85d8:	b508      	push	{r3, lr}
   b85da:	4b02      	ldr	r3, [pc, #8]	; (b85e4 <hal_ble_stack_init+0xc>)
   b85dc:	681b      	ldr	r3, [r3, #0]
   b85de:	689b      	ldr	r3, [r3, #8]
   b85e0:	9301      	str	r3, [sp, #4]
   b85e2:	bd08      	pop	{r3, pc}
   b85e4:	00030278 	.word	0x00030278

000b85e8 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b85e8:	b508      	push	{r3, lr}
   b85ea:	4b02      	ldr	r3, [pc, #8]	; (b85f4 <hal_ble_gap_set_advertising_data+0xc>)
   b85ec:	681b      	ldr	r3, [r3, #0]
   b85ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b85f0:	9301      	str	r3, [sp, #4]
   b85f2:	bd08      	pop	{r3, pc}
   b85f4:	00030278 	.word	0x00030278

000b85f8 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b85f8:	b508      	push	{r3, lr}
   b85fa:	4b02      	ldr	r3, [pc, #8]	; (b8604 <hal_ble_gap_set_scan_response_data+0xc>)
   b85fc:	681b      	ldr	r3, [r3, #0]
   b85fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8600:	9301      	str	r3, [sp, #4]
   b8602:	bd08      	pop	{r3, pc}
   b8604:	00030278 	.word	0x00030278

000b8608 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b8608:	b508      	push	{r3, lr}
   b860a:	4b02      	ldr	r3, [pc, #8]	; (b8614 <hal_ble_gap_start_advertising+0xc>)
   b860c:	681b      	ldr	r3, [r3, #0]
   b860e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b8610:	9301      	str	r3, [sp, #4]
   b8612:	bd08      	pop	{r3, pc}
   b8614:	00030278 	.word	0x00030278

000b8618 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b8618:	b508      	push	{r3, lr}
   b861a:	4b03      	ldr	r3, [pc, #12]	; (b8628 <hal_ble_gap_disconnect+0x10>)
   b861c:	681b      	ldr	r3, [r3, #0]
   b861e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b8622:	9301      	str	r3, [sp, #4]
   b8624:	bd08      	pop	{r3, pc}
   b8626:	0000      	.short	0x0000
   b8628:	00030278 	.word	0x00030278

000b862c <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b862c:	b508      	push	{r3, lr}
   b862e:	4b03      	ldr	r3, [pc, #12]	; (b863c <hal_ble_gatt_server_add_service+0x10>)
   b8630:	681b      	ldr	r3, [r3, #0]
   b8632:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b8636:	9301      	str	r3, [sp, #4]
   b8638:	bd08      	pop	{r3, pc}
   b863a:	0000      	.short	0x0000
   b863c:	00030278 	.word	0x00030278

000b8640 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8640:	b508      	push	{r3, lr}
   b8642:	4b03      	ldr	r3, [pc, #12]	; (b8650 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b8644:	681b      	ldr	r3, [r3, #0]
   b8646:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b864a:	9301      	str	r3, [sp, #4]
   b864c:	bd08      	pop	{r3, pc}
   b864e:	0000      	.short	0x0000
   b8650:	00030278 	.word	0x00030278

000b8654 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8654:	b508      	push	{r3, lr}
   b8656:	4b03      	ldr	r3, [pc, #12]	; (b8664 <hal_ble_gatt_client_write_with_response+0x10>)
   b8658:	681b      	ldr	r3, [r3, #0]
   b865a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b865e:	9301      	str	r3, [sp, #4]
   b8660:	bd08      	pop	{r3, pc}
   b8662:	0000      	.short	0x0000
   b8664:	00030278 	.word	0x00030278

000b8668 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8668:	b508      	push	{r3, lr}
   b866a:	4b03      	ldr	r3, [pc, #12]	; (b8678 <hal_ble_gatt_client_write_without_response+0x10>)
   b866c:	681b      	ldr	r3, [r3, #0]
   b866e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b8672:	9301      	str	r3, [sp, #4]
   b8674:	bd08      	pop	{r3, pc}
   b8676:	0000      	.short	0x0000
   b8678:	00030278 	.word	0x00030278

000b867c <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b867c:	b508      	push	{r3, lr}
   b867e:	4b03      	ldr	r3, [pc, #12]	; (b868c <hal_ble_gatt_server_add_characteristic+0x10>)
   b8680:	681b      	ldr	r3, [r3, #0]
   b8682:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b8686:	9301      	str	r3, [sp, #4]
   b8688:	bd08      	pop	{r3, pc}
   b868a:	0000      	.short	0x0000
   b868c:	00030278 	.word	0x00030278

000b8690 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b8690:	b508      	push	{r3, lr}
   b8692:	4b03      	ldr	r3, [pc, #12]	; (b86a0 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b8694:	681b      	ldr	r3, [r3, #0]
   b8696:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b869a:	9301      	str	r3, [sp, #4]
   b869c:	bd08      	pop	{r3, pc}
   b869e:	0000      	.short	0x0000
   b86a0:	00030278 	.word	0x00030278

000b86a4 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b86a4:	b508      	push	{r3, lr}
   b86a6:	4b03      	ldr	r3, [pc, #12]	; (b86b4 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b86a8:	681b      	ldr	r3, [r3, #0]
   b86aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b86ae:	9301      	str	r3, [sp, #4]
   b86b0:	bd08      	pop	{r3, pc}
   b86b2:	0000      	.short	0x0000
   b86b4:	00030278 	.word	0x00030278

000b86b8 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b86b8:	b508      	push	{r3, lr}
   b86ba:	4b03      	ldr	r3, [pc, #12]	; (b86c8 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b86bc:	681b      	ldr	r3, [r3, #0]
   b86be:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b86c2:	9301      	str	r3, [sp, #4]
   b86c4:	bd08      	pop	{r3, pc}
   b86c6:	0000      	.short	0x0000
   b86c8:	00030278 	.word	0x00030278

000b86cc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b86cc:	b508      	push	{r3, lr}
   b86ce:	4b02      	ldr	r3, [pc, #8]	; (b86d8 <os_mutex_recursive_create+0xc>)
   b86d0:	681b      	ldr	r3, [r3, #0]
   b86d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b86d4:	9301      	str	r3, [sp, #4]
   b86d6:	bd08      	pop	{r3, pc}
   b86d8:	00030248 	.word	0x00030248

000b86dc <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b86dc:	b508      	push	{r3, lr}
   b86de:	4b02      	ldr	r3, [pc, #8]	; (b86e8 <os_mutex_recursive_lock+0xc>)
   b86e0:	681b      	ldr	r3, [r3, #0]
   b86e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b86e4:	9301      	str	r3, [sp, #4]
   b86e6:	bd08      	pop	{r3, pc}
   b86e8:	00030248 	.word	0x00030248

000b86ec <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b86ec:	b508      	push	{r3, lr}
   b86ee:	4b02      	ldr	r3, [pc, #8]	; (b86f8 <os_mutex_recursive_unlock+0xc>)
   b86f0:	681b      	ldr	r3, [r3, #0]
   b86f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b86f4:	9301      	str	r3, [sp, #4]
   b86f6:	bd08      	pop	{r3, pc}
   b86f8:	00030248 	.word	0x00030248

000b86fc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b86fc:	b508      	push	{r3, lr}
   b86fe:	4b02      	ldr	r3, [pc, #8]	; (b8708 <HAL_RNG_GetRandomNumber+0xc>)
   b8700:	681b      	ldr	r3, [r3, #0]
   b8702:	685b      	ldr	r3, [r3, #4]
   b8704:	9301      	str	r3, [sp, #4]
   b8706:	bd08      	pop	{r3, pc}
   b8708:	00030218 	.word	0x00030218

000b870c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b870c:	b508      	push	{r3, lr}
   b870e:	4b02      	ldr	r3, [pc, #8]	; (b8718 <HAL_Delay_Microseconds+0xc>)
   b8710:	681b      	ldr	r3, [r3, #0]
   b8712:	68db      	ldr	r3, [r3, #12]
   b8714:	9301      	str	r3, [sp, #4]
   b8716:	bd08      	pop	{r3, pc}
   b8718:	00030218 	.word	0x00030218

000b871c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b871c:	b508      	push	{r3, lr}
   b871e:	4b02      	ldr	r3, [pc, #8]	; (b8728 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b8720:	681b      	ldr	r3, [r3, #0]
   b8722:	695b      	ldr	r3, [r3, #20]
   b8724:	9301      	str	r3, [sp, #4]
   b8726:	bd08      	pop	{r3, pc}
   b8728:	00030218 	.word	0x00030218

000b872c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b872c:	b508      	push	{r3, lr}
   b872e:	4b02      	ldr	r3, [pc, #8]	; (b8738 <hal_i2c_begin+0xc>)
   b8730:	681b      	ldr	r3, [r3, #0]
   b8732:	68db      	ldr	r3, [r3, #12]
   b8734:	9301      	str	r3, [sp, #4]
   b8736:	bd08      	pop	{r3, pc}
   b8738:	00030228 	.word	0x00030228

000b873c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b873c:	b508      	push	{r3, lr}
   b873e:	4b02      	ldr	r3, [pc, #8]	; (b8748 <hal_i2c_begin_transmission+0xc>)
   b8740:	681b      	ldr	r3, [r3, #0]
   b8742:	699b      	ldr	r3, [r3, #24]
   b8744:	9301      	str	r3, [sp, #4]
   b8746:	bd08      	pop	{r3, pc}
   b8748:	00030228 	.word	0x00030228

000b874c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b874c:	b508      	push	{r3, lr}
   b874e:	4b02      	ldr	r3, [pc, #8]	; (b8758 <hal_i2c_end_transmission+0xc>)
   b8750:	681b      	ldr	r3, [r3, #0]
   b8752:	69db      	ldr	r3, [r3, #28]
   b8754:	9301      	str	r3, [sp, #4]
   b8756:	bd08      	pop	{r3, pc}
   b8758:	00030228 	.word	0x00030228

000b875c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b875c:	b508      	push	{r3, lr}
   b875e:	4b02      	ldr	r3, [pc, #8]	; (b8768 <hal_i2c_write+0xc>)
   b8760:	681b      	ldr	r3, [r3, #0]
   b8762:	6a1b      	ldr	r3, [r3, #32]
   b8764:	9301      	str	r3, [sp, #4]
   b8766:	bd08      	pop	{r3, pc}
   b8768:	00030228 	.word	0x00030228

000b876c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b876c:	b508      	push	{r3, lr}
   b876e:	4b02      	ldr	r3, [pc, #8]	; (b8778 <hal_i2c_available+0xc>)
   b8770:	681b      	ldr	r3, [r3, #0]
   b8772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8774:	9301      	str	r3, [sp, #4]
   b8776:	bd08      	pop	{r3, pc}
   b8778:	00030228 	.word	0x00030228

000b877c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b877c:	b508      	push	{r3, lr}
   b877e:	4b02      	ldr	r3, [pc, #8]	; (b8788 <hal_i2c_read+0xc>)
   b8780:	681b      	ldr	r3, [r3, #0]
   b8782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8784:	9301      	str	r3, [sp, #4]
   b8786:	bd08      	pop	{r3, pc}
   b8788:	00030228 	.word	0x00030228

000b878c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b878c:	b508      	push	{r3, lr}
   b878e:	4b02      	ldr	r3, [pc, #8]	; (b8798 <hal_i2c_peek+0xc>)
   b8790:	681b      	ldr	r3, [r3, #0]
   b8792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8794:	9301      	str	r3, [sp, #4]
   b8796:	bd08      	pop	{r3, pc}
   b8798:	00030228 	.word	0x00030228

000b879c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b879c:	b508      	push	{r3, lr}
   b879e:	4b02      	ldr	r3, [pc, #8]	; (b87a8 <hal_i2c_flush+0xc>)
   b87a0:	681b      	ldr	r3, [r3, #0]
   b87a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b87a4:	9301      	str	r3, [sp, #4]
   b87a6:	bd08      	pop	{r3, pc}
   b87a8:	00030228 	.word	0x00030228

000b87ac <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b87ac:	b508      	push	{r3, lr}
   b87ae:	4b02      	ldr	r3, [pc, #8]	; (b87b8 <hal_i2c_init+0xc>)
   b87b0:	681b      	ldr	r3, [r3, #0]
   b87b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b87b4:	9301      	str	r3, [sp, #4]
   b87b6:	bd08      	pop	{r3, pc}
   b87b8:	00030228 	.word	0x00030228

000b87bc <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b87bc:	b508      	push	{r3, lr}
   b87be:	4b02      	ldr	r3, [pc, #8]	; (b87c8 <hal_i2c_request_ex+0xc>)
   b87c0:	681b      	ldr	r3, [r3, #0]
   b87c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b87c4:	9301      	str	r3, [sp, #4]
   b87c6:	bd08      	pop	{r3, pc}
   b87c8:	00030228 	.word	0x00030228

000b87cc <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b87cc:	b508      	push	{r3, lr}
   b87ce:	4b02      	ldr	r3, [pc, #8]	; (b87d8 <if_index_to_name+0xc>)
   b87d0:	681b      	ldr	r3, [r3, #0]
   b87d2:	695b      	ldr	r3, [r3, #20]
   b87d4:	9301      	str	r3, [sp, #4]
   b87d6:	bd08      	pop	{r3, pc}
   b87d8:	0003026c 	.word	0x0003026c

000b87dc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b87dc:	b508      	push	{r3, lr}
   b87de:	4b02      	ldr	r3, [pc, #8]	; (b87e8 <inet_inet_ntop+0xc>)
   b87e0:	681b      	ldr	r3, [r3, #0]
   b87e2:	695b      	ldr	r3, [r3, #20]
   b87e4:	9301      	str	r3, [sp, #4]
   b87e6:	bd08      	pop	{r3, pc}
   b87e8:	00030264 	.word	0x00030264

000b87ec <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b87ec:	b508      	push	{r3, lr}
   b87ee:	4b02      	ldr	r3, [pc, #8]	; (b87f8 <inet_htonl+0xc>)
   b87f0:	681b      	ldr	r3, [r3, #0]
   b87f2:	6a1b      	ldr	r3, [r3, #32]
   b87f4:	9301      	str	r3, [sp, #4]
   b87f6:	bd08      	pop	{r3, pc}
   b87f8:	00030264 	.word	0x00030264

000b87fc <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b87fc:	b508      	push	{r3, lr}
   b87fe:	4b02      	ldr	r3, [pc, #8]	; (b8808 <inet_htons+0xc>)
   b8800:	681b      	ldr	r3, [r3, #0]
   b8802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8804:	9301      	str	r3, [sp, #4]
   b8806:	bd08      	pop	{r3, pc}
   b8808:	00030264 	.word	0x00030264

000b880c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b880c:	b508      	push	{r3, lr}
   b880e:	4b02      	ldr	r3, [pc, #8]	; (b8818 <netdb_freeaddrinfo+0xc>)
   b8810:	681b      	ldr	r3, [r3, #0]
   b8812:	689b      	ldr	r3, [r3, #8]
   b8814:	9301      	str	r3, [sp, #4]
   b8816:	bd08      	pop	{r3, pc}
   b8818:	00030268 	.word	0x00030268

000b881c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b881c:	b508      	push	{r3, lr}
   b881e:	4b02      	ldr	r3, [pc, #8]	; (b8828 <netdb_getaddrinfo+0xc>)
   b8820:	681b      	ldr	r3, [r3, #0]
   b8822:	68db      	ldr	r3, [r3, #12]
   b8824:	9301      	str	r3, [sp, #4]
   b8826:	bd08      	pop	{r3, pc}
   b8828:	00030268 	.word	0x00030268

000b882c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b882c:	b508      	push	{r3, lr}
   b882e:	4b02      	ldr	r3, [pc, #8]	; (b8838 <sock_setsockopt+0xc>)
   b8830:	681b      	ldr	r3, [r3, #0]
   b8832:	699b      	ldr	r3, [r3, #24]
   b8834:	9301      	str	r3, [sp, #4]
   b8836:	bd08      	pop	{r3, pc}
   b8838:	00030238 	.word	0x00030238

000b883c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b883c:	b508      	push	{r3, lr}
   b883e:	4b02      	ldr	r3, [pc, #8]	; (b8848 <sock_close+0xc>)
   b8840:	681b      	ldr	r3, [r3, #0]
   b8842:	69db      	ldr	r3, [r3, #28]
   b8844:	9301      	str	r3, [sp, #4]
   b8846:	bd08      	pop	{r3, pc}
   b8848:	00030238 	.word	0x00030238

000b884c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b884c:	b508      	push	{r3, lr}
   b884e:	4b02      	ldr	r3, [pc, #8]	; (b8858 <sock_connect+0xc>)
   b8850:	681b      	ldr	r3, [r3, #0]
   b8852:	6a1b      	ldr	r3, [r3, #32]
   b8854:	9301      	str	r3, [sp, #4]
   b8856:	bd08      	pop	{r3, pc}
   b8858:	00030238 	.word	0x00030238

000b885c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b885c:	b508      	push	{r3, lr}
   b885e:	4b02      	ldr	r3, [pc, #8]	; (b8868 <sock_recv+0xc>)
   b8860:	681b      	ldr	r3, [r3, #0]
   b8862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8864:	9301      	str	r3, [sp, #4]
   b8866:	bd08      	pop	{r3, pc}
   b8868:	00030238 	.word	0x00030238

000b886c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b886c:	b508      	push	{r3, lr}
   b886e:	4b02      	ldr	r3, [pc, #8]	; (b8878 <sock_send+0xc>)
   b8870:	681b      	ldr	r3, [r3, #0]
   b8872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8874:	9301      	str	r3, [sp, #4]
   b8876:	bd08      	pop	{r3, pc}
   b8878:	00030238 	.word	0x00030238

000b887c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b887c:	b508      	push	{r3, lr}
   b887e:	4b02      	ldr	r3, [pc, #8]	; (b8888 <sock_socket+0xc>)
   b8880:	681b      	ldr	r3, [r3, #0]
   b8882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b8884:	9301      	str	r3, [sp, #4]
   b8886:	bd08      	pop	{r3, pc}
   b8888:	00030238 	.word	0x00030238

000b888c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b888c:	b508      	push	{r3, lr}
   b888e:	4b02      	ldr	r3, [pc, #8]	; (b8898 <hal_usart_write+0xc>)
   b8890:	681b      	ldr	r3, [r3, #0]
   b8892:	68db      	ldr	r3, [r3, #12]
   b8894:	9301      	str	r3, [sp, #4]
   b8896:	bd08      	pop	{r3, pc}
   b8898:	0003023c 	.word	0x0003023c

000b889c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b889c:	b508      	push	{r3, lr}
   b889e:	4b02      	ldr	r3, [pc, #8]	; (b88a8 <hal_usart_available+0xc>)
   b88a0:	681b      	ldr	r3, [r3, #0]
   b88a2:	691b      	ldr	r3, [r3, #16]
   b88a4:	9301      	str	r3, [sp, #4]
   b88a6:	bd08      	pop	{r3, pc}
   b88a8:	0003023c 	.word	0x0003023c

000b88ac <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b88ac:	b508      	push	{r3, lr}
   b88ae:	4b02      	ldr	r3, [pc, #8]	; (b88b8 <hal_usart_read+0xc>)
   b88b0:	681b      	ldr	r3, [r3, #0]
   b88b2:	695b      	ldr	r3, [r3, #20]
   b88b4:	9301      	str	r3, [sp, #4]
   b88b6:	bd08      	pop	{r3, pc}
   b88b8:	0003023c 	.word	0x0003023c

000b88bc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b88bc:	b508      	push	{r3, lr}
   b88be:	4b02      	ldr	r3, [pc, #8]	; (b88c8 <hal_usart_peek+0xc>)
   b88c0:	681b      	ldr	r3, [r3, #0]
   b88c2:	699b      	ldr	r3, [r3, #24]
   b88c4:	9301      	str	r3, [sp, #4]
   b88c6:	bd08      	pop	{r3, pc}
   b88c8:	0003023c 	.word	0x0003023c

000b88cc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b88cc:	b508      	push	{r3, lr}
   b88ce:	4b02      	ldr	r3, [pc, #8]	; (b88d8 <hal_usart_flush+0xc>)
   b88d0:	681b      	ldr	r3, [r3, #0]
   b88d2:	69db      	ldr	r3, [r3, #28]
   b88d4:	9301      	str	r3, [sp, #4]
   b88d6:	bd08      	pop	{r3, pc}
   b88d8:	0003023c 	.word	0x0003023c

000b88dc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b88dc:	b508      	push	{r3, lr}
   b88de:	4b02      	ldr	r3, [pc, #8]	; (b88e8 <hal_usart_available_data_for_write+0xc>)
   b88e0:	681b      	ldr	r3, [r3, #0]
   b88e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b88e4:	9301      	str	r3, [sp, #4]
   b88e6:	bd08      	pop	{r3, pc}
   b88e8:	0003023c 	.word	0x0003023c

000b88ec <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b88ec:	b508      	push	{r3, lr}
   b88ee:	4b02      	ldr	r3, [pc, #8]	; (b88f8 <hal_usart_init_ex+0xc>)
   b88f0:	681b      	ldr	r3, [r3, #0]
   b88f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b88f4:	9301      	str	r3, [sp, #4]
   b88f6:	bd08      	pop	{r3, pc}
   b88f8:	0003023c 	.word	0x0003023c

000b88fc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b88fc:	b508      	push	{r3, lr}
   b88fe:	4b02      	ldr	r3, [pc, #8]	; (b8908 <HAL_USB_USART_Init+0xc>)
   b8900:	681b      	ldr	r3, [r3, #0]
   b8902:	681b      	ldr	r3, [r3, #0]
   b8904:	9301      	str	r3, [sp, #4]
   b8906:	bd08      	pop	{r3, pc}
   b8908:	0003024c 	.word	0x0003024c

000b890c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b890c:	b508      	push	{r3, lr}
   b890e:	4b02      	ldr	r3, [pc, #8]	; (b8918 <HAL_USB_USART_Begin+0xc>)
   b8910:	681b      	ldr	r3, [r3, #0]
   b8912:	685b      	ldr	r3, [r3, #4]
   b8914:	9301      	str	r3, [sp, #4]
   b8916:	bd08      	pop	{r3, pc}
   b8918:	0003024c 	.word	0x0003024c

000b891c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b891c:	b508      	push	{r3, lr}
   b891e:	4b02      	ldr	r3, [pc, #8]	; (b8928 <HAL_USB_USART_Available_Data+0xc>)
   b8920:	681b      	ldr	r3, [r3, #0]
   b8922:	691b      	ldr	r3, [r3, #16]
   b8924:	9301      	str	r3, [sp, #4]
   b8926:	bd08      	pop	{r3, pc}
   b8928:	0003024c 	.word	0x0003024c

000b892c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b892c:	b508      	push	{r3, lr}
   b892e:	4b02      	ldr	r3, [pc, #8]	; (b8938 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b8930:	681b      	ldr	r3, [r3, #0]
   b8932:	695b      	ldr	r3, [r3, #20]
   b8934:	9301      	str	r3, [sp, #4]
   b8936:	bd08      	pop	{r3, pc}
   b8938:	0003024c 	.word	0x0003024c

000b893c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b893c:	b508      	push	{r3, lr}
   b893e:	4b02      	ldr	r3, [pc, #8]	; (b8948 <HAL_USB_USART_Receive_Data+0xc>)
   b8940:	681b      	ldr	r3, [r3, #0]
   b8942:	699b      	ldr	r3, [r3, #24]
   b8944:	9301      	str	r3, [sp, #4]
   b8946:	bd08      	pop	{r3, pc}
   b8948:	0003024c 	.word	0x0003024c

000b894c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b894c:	b508      	push	{r3, lr}
   b894e:	4b02      	ldr	r3, [pc, #8]	; (b8958 <HAL_USB_USART_Send_Data+0xc>)
   b8950:	681b      	ldr	r3, [r3, #0]
   b8952:	69db      	ldr	r3, [r3, #28]
   b8954:	9301      	str	r3, [sp, #4]
   b8956:	bd08      	pop	{r3, pc}
   b8958:	0003024c 	.word	0x0003024c

000b895c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b895c:	b508      	push	{r3, lr}
   b895e:	4b02      	ldr	r3, [pc, #8]	; (b8968 <HAL_USB_USART_Flush_Data+0xc>)
   b8960:	681b      	ldr	r3, [r3, #0]
   b8962:	6a1b      	ldr	r3, [r3, #32]
   b8964:	9301      	str	r3, [sp, #4]
   b8966:	bd08      	pop	{r3, pc}
   b8968:	0003024c 	.word	0x0003024c

000b896c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b896c:	b508      	push	{r3, lr}
   b896e:	4b02      	ldr	r3, [pc, #8]	; (b8978 <panic_+0xc>)
   b8970:	681b      	ldr	r3, [r3, #0]
   b8972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8974:	9301      	str	r3, [sp, #4]
   b8976:	bd08      	pop	{r3, pc}
   b8978:	00030260 	.word	0x00030260

000b897c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b897c:	b508      	push	{r3, lr}
   b897e:	4b02      	ldr	r3, [pc, #8]	; (b8988 <log_message+0xc>)
   b8980:	681b      	ldr	r3, [r3, #0]
   b8982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8984:	9301      	str	r3, [sp, #4]
   b8986:	bd08      	pop	{r3, pc}
   b8988:	00030260 	.word	0x00030260

000b898c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b898c:	b508      	push	{r3, lr}
   b898e:	4b02      	ldr	r3, [pc, #8]	; (b8998 <set_system_mode+0xc>)
   b8990:	681b      	ldr	r3, [r3, #0]
   b8992:	685b      	ldr	r3, [r3, #4]
   b8994:	9301      	str	r3, [sp, #4]
   b8996:	bd08      	pop	{r3, pc}
   b8998:	00030220 	.word	0x00030220

000b899c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b899c:	b508      	push	{r3, lr}
   b899e:	4b02      	ldr	r3, [pc, #8]	; (b89a8 <system_delay_ms+0xc>)
   b89a0:	681b      	ldr	r3, [r3, #0]
   b89a2:	695b      	ldr	r3, [r3, #20]
   b89a4:	9301      	str	r3, [sp, #4]
   b89a6:	bd08      	pop	{r3, pc}
   b89a8:	00030220 	.word	0x00030220

000b89ac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b89ac:	b508      	push	{r3, lr}
   b89ae:	4b03      	ldr	r3, [pc, #12]	; (b89bc <system_ctrl_set_app_request_handler+0x10>)
   b89b0:	681b      	ldr	r3, [r3, #0]
   b89b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b89b6:	9301      	str	r3, [sp, #4]
   b89b8:	bd08      	pop	{r3, pc}
   b89ba:	0000      	.short	0x0000
   b89bc:	00030220 	.word	0x00030220

000b89c0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b89c0:	b508      	push	{r3, lr}
   b89c2:	4b03      	ldr	r3, [pc, #12]	; (b89d0 <system_ctrl_set_result+0x10>)
   b89c4:	681b      	ldr	r3, [r3, #0]
   b89c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b89ca:	9301      	str	r3, [sp, #4]
   b89cc:	bd08      	pop	{r3, pc}
   b89ce:	0000      	.short	0x0000
   b89d0:	00030220 	.word	0x00030220

000b89d4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b89d4:	b508      	push	{r3, lr}
   b89d6:	4b02      	ldr	r3, [pc, #8]	; (b89e0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b89d8:	681b      	ldr	r3, [r3, #0]
   b89da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b89dc:	9301      	str	r3, [sp, #4]
   b89de:	bd08      	pop	{r3, pc}
   b89e0:	00030244 	.word	0x00030244

000b89e4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b89e4:	b508      	push	{r3, lr}
   b89e6:	4b02      	ldr	r3, [pc, #8]	; (b89f0 <network_connect+0xc>)
   b89e8:	681b      	ldr	r3, [r3, #0]
   b89ea:	685b      	ldr	r3, [r3, #4]
   b89ec:	9301      	str	r3, [sp, #4]
   b89ee:	bd08      	pop	{r3, pc}
   b89f0:	00030240 	.word	0x00030240

000b89f4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b89f4:	b508      	push	{r3, lr}
   b89f6:	4b02      	ldr	r3, [pc, #8]	; (b8a00 <network_connecting+0xc>)
   b89f8:	681b      	ldr	r3, [r3, #0]
   b89fa:	689b      	ldr	r3, [r3, #8]
   b89fc:	9301      	str	r3, [sp, #4]
   b89fe:	bd08      	pop	{r3, pc}
   b8a00:	00030240 	.word	0x00030240

000b8a04 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b8a04:	b508      	push	{r3, lr}
   b8a06:	4b02      	ldr	r3, [pc, #8]	; (b8a10 <network_disconnect+0xc>)
   b8a08:	681b      	ldr	r3, [r3, #0]
   b8a0a:	68db      	ldr	r3, [r3, #12]
   b8a0c:	9301      	str	r3, [sp, #4]
   b8a0e:	bd08      	pop	{r3, pc}
   b8a10:	00030240 	.word	0x00030240

000b8a14 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b8a14:	b508      	push	{r3, lr}
   b8a16:	4b02      	ldr	r3, [pc, #8]	; (b8a20 <network_ready+0xc>)
   b8a18:	681b      	ldr	r3, [r3, #0]
   b8a1a:	691b      	ldr	r3, [r3, #16]
   b8a1c:	9301      	str	r3, [sp, #4]
   b8a1e:	bd08      	pop	{r3, pc}
   b8a20:	00030240 	.word	0x00030240

000b8a24 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b8a24:	b508      	push	{r3, lr}
   b8a26:	4b02      	ldr	r3, [pc, #8]	; (b8a30 <network_on+0xc>)
   b8a28:	681b      	ldr	r3, [r3, #0]
   b8a2a:	695b      	ldr	r3, [r3, #20]
   b8a2c:	9301      	str	r3, [sp, #4]
   b8a2e:	bd08      	pop	{r3, pc}
   b8a30:	00030240 	.word	0x00030240

000b8a34 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b8a34:	b508      	push	{r3, lr}
   b8a36:	4b02      	ldr	r3, [pc, #8]	; (b8a40 <network_off+0xc>)
   b8a38:	681b      	ldr	r3, [r3, #0]
   b8a3a:	699b      	ldr	r3, [r3, #24]
   b8a3c:	9301      	str	r3, [sp, #4]
   b8a3e:	bd08      	pop	{r3, pc}
   b8a40:	00030240 	.word	0x00030240

000b8a44 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b8a44:	b508      	push	{r3, lr}
   b8a46:	4b02      	ldr	r3, [pc, #8]	; (b8a50 <network_listen+0xc>)
   b8a48:	681b      	ldr	r3, [r3, #0]
   b8a4a:	69db      	ldr	r3, [r3, #28]
   b8a4c:	9301      	str	r3, [sp, #4]
   b8a4e:	bd08      	pop	{r3, pc}
   b8a50:	00030240 	.word	0x00030240

000b8a54 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b8a54:	b508      	push	{r3, lr}
   b8a56:	4b02      	ldr	r3, [pc, #8]	; (b8a60 <network_listening+0xc>)
   b8a58:	681b      	ldr	r3, [r3, #0]
   b8a5a:	6a1b      	ldr	r3, [r3, #32]
   b8a5c:	9301      	str	r3, [sp, #4]
   b8a5e:	bd08      	pop	{r3, pc}
   b8a60:	00030240 	.word	0x00030240

000b8a64 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   b8a64:	b508      	push	{r3, lr}
   b8a66:	4b02      	ldr	r3, [pc, #8]	; (b8a70 <network_has_credentials+0xc>)
   b8a68:	681b      	ldr	r3, [r3, #0]
   b8a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8a6c:	9301      	str	r3, [sp, #4]
   b8a6e:	bd08      	pop	{r3, pc}
   b8a70:	00030240 	.word	0x00030240

000b8a74 <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b8a74:	b508      	push	{r3, lr}
   b8a76:	4b02      	ldr	r3, [pc, #8]	; (b8a80 <network_set_credentials+0xc>)
   b8a78:	681b      	ldr	r3, [r3, #0]
   b8a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8a7c:	9301      	str	r3, [sp, #4]
   b8a7e:	bd08      	pop	{r3, pc}
   b8a80:	00030240 	.word	0x00030240

000b8a84 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b8a84:	b508      	push	{r3, lr}
   b8a86:	4b02      	ldr	r3, [pc, #8]	; (b8a90 <network_set_listen_timeout+0xc>)
   b8a88:	681b      	ldr	r3, [r3, #0]
   b8a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8a8c:	9301      	str	r3, [sp, #4]
   b8a8e:	bd08      	pop	{r3, pc}
   b8a90:	00030240 	.word	0x00030240

000b8a94 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8a94:	b508      	push	{r3, lr}
   b8a96:	4b02      	ldr	r3, [pc, #8]	; (b8aa0 <network_get_listen_timeout+0xc>)
   b8a98:	681b      	ldr	r3, [r3, #0]
   b8a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8a9c:	9301      	str	r3, [sp, #4]
   b8a9e:	bd08      	pop	{r3, pc}
   b8aa0:	00030240 	.word	0x00030240

000b8aa4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8aa4:	b508      	push	{r3, lr}
   b8aa6:	4b02      	ldr	r3, [pc, #8]	; (b8ab0 <network_is_on+0xc>)
   b8aa8:	681b      	ldr	r3, [r3, #0]
   b8aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8aac:	9301      	str	r3, [sp, #4]
   b8aae:	bd08      	pop	{r3, pc}
   b8ab0:	00030240 	.word	0x00030240

000b8ab4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8ab4:	b508      	push	{r3, lr}
   b8ab6:	4b02      	ldr	r3, [pc, #8]	; (b8ac0 <network_is_off+0xc>)
   b8ab8:	681b      	ldr	r3, [r3, #0]
   b8aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8abc:	9301      	str	r3, [sp, #4]
   b8abe:	bd08      	pop	{r3, pc}
   b8ac0:	00030240 	.word	0x00030240

000b8ac4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8ac4:	b508      	push	{r3, lr}
   b8ac6:	4b02      	ldr	r3, [pc, #8]	; (b8ad0 <malloc+0xc>)
   b8ac8:	681b      	ldr	r3, [r3, #0]
   b8aca:	681b      	ldr	r3, [r3, #0]
   b8acc:	9301      	str	r3, [sp, #4]
   b8ace:	bd08      	pop	{r3, pc}
   b8ad0:	0003021c 	.word	0x0003021c

000b8ad4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8ad4:	b508      	push	{r3, lr}
   b8ad6:	4b02      	ldr	r3, [pc, #8]	; (b8ae0 <free+0xc>)
   b8ad8:	681b      	ldr	r3, [r3, #0]
   b8ada:	685b      	ldr	r3, [r3, #4]
   b8adc:	9301      	str	r3, [sp, #4]
   b8ade:	bd08      	pop	{r3, pc}
   b8ae0:	0003021c 	.word	0x0003021c

000b8ae4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8ae4:	b508      	push	{r3, lr}
   b8ae6:	4b02      	ldr	r3, [pc, #8]	; (b8af0 <realloc+0xc>)
   b8ae8:	681b      	ldr	r3, [r3, #0]
   b8aea:	689b      	ldr	r3, [r3, #8]
   b8aec:	9301      	str	r3, [sp, #4]
   b8aee:	bd08      	pop	{r3, pc}
   b8af0:	0003021c 	.word	0x0003021c

000b8af4 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b8af4:	b508      	push	{r3, lr}
   b8af6:	4b02      	ldr	r3, [pc, #8]	; (b8b00 <sscanf+0xc>)
   b8af8:	681b      	ldr	r3, [r3, #0]
   b8afa:	695b      	ldr	r3, [r3, #20]
   b8afc:	9301      	str	r3, [sp, #4]
   b8afe:	bd08      	pop	{r3, pc}
   b8b00:	0003021c 	.word	0x0003021c

000b8b04 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8b04:	b508      	push	{r3, lr}
   b8b06:	4b02      	ldr	r3, [pc, #8]	; (b8b10 <vsnprintf+0xc>)
   b8b08:	681b      	ldr	r3, [r3, #0]
   b8b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8b0c:	9301      	str	r3, [sp, #4]
   b8b0e:	bd08      	pop	{r3, pc}
   b8b10:	0003021c 	.word	0x0003021c

000b8b14 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b8b14:	b508      	push	{r3, lr}
   b8b16:	4b02      	ldr	r3, [pc, #8]	; (b8b20 <abort+0xc>)
   b8b18:	681b      	ldr	r3, [r3, #0]
   b8b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8b1c:	9301      	str	r3, [sp, #4]
   b8b1e:	bd08      	pop	{r3, pc}
   b8b20:	0003021c 	.word	0x0003021c

000b8b24 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b8b24:	b508      	push	{r3, lr}
   b8b26:	4b02      	ldr	r3, [pc, #8]	; (b8b30 <_malloc_r+0xc>)
   b8b28:	681b      	ldr	r3, [r3, #0]
   b8b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8b2c:	9301      	str	r3, [sp, #4]
   b8b2e:	bd08      	pop	{r3, pc}
   b8b30:	0003021c 	.word	0x0003021c

000b8b34 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b8b34:	b508      	push	{r3, lr}
   b8b36:	4b02      	ldr	r3, [pc, #8]	; (b8b40 <__errno+0xc>)
   b8b38:	681b      	ldr	r3, [r3, #0]
   b8b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8b3c:	9301      	str	r3, [sp, #4]
   b8b3e:	bd08      	pop	{r3, pc}
   b8b40:	0003021c 	.word	0x0003021c

000b8b44 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b8b44:	b508      	push	{r3, lr}
   b8b46:	4b02      	ldr	r3, [pc, #8]	; (b8b50 <__assert_func+0xc>)
   b8b48:	681b      	ldr	r3, [r3, #0]
   b8b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8b4c:	9301      	str	r3, [sp, #4]
   b8b4e:	bd08      	pop	{r3, pc}
   b8b50:	0003021c 	.word	0x0003021c

000b8b54 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b8b54:	b508      	push	{r3, lr}
   b8b56:	4b02      	ldr	r3, [pc, #8]	; (b8b60 <newlib_impure_ptr_callback+0xc>)
   b8b58:	681b      	ldr	r3, [r3, #0]
   b8b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8b5c:	9301      	str	r3, [sp, #4]
   b8b5e:	bd08      	pop	{r3, pc}
   b8b60:	0003021c 	.word	0x0003021c

000b8b64 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8b64:	2100      	movs	r1, #0
   b8b66:	f7ff bf19 	b.w	b899c <system_delay_ms>

000b8b6a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8b6a:	4770      	bx	lr

000b8b6c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b8b6c:	4770      	bx	lr

000b8b6e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b8b6e:	4770      	bx	lr

000b8b70 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8b70:	4770      	bx	lr
	...

000b8b74 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8b74:	4b06      	ldr	r3, [pc, #24]	; (b8b90 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8b76:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8b78:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b8b7a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8b7e:	d005      	beq.n	b8b8c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8b80:	4608      	mov	r0, r1
   b8b82:	f002 fb29 	bl	bb1d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8b86:	2800      	cmp	r0, #0
   b8b88:	bf08      	it	eq
   b8b8a:	2400      	moveq	r4, #0
      }
   b8b8c:	4620      	mov	r0, r4
   b8b8e:	bd10      	pop	{r4, pc}
   b8b90:	000be99c 	.word	0x000be99c

000b8b94 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8b94:	4b06      	ldr	r3, [pc, #24]	; (b8bb0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8b96:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8b98:	b510      	push	{r4, lr}
   b8b9a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8b9e:	d005      	beq.n	b8bac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8ba0:	4608      	mov	r0, r1
   b8ba2:	f002 fb19 	bl	bb1d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8ba6:	2800      	cmp	r0, #0
   b8ba8:	bf08      	it	eq
   b8baa:	2400      	moveq	r4, #0
      }
   b8bac:	4620      	mov	r0, r4
   b8bae:	bd10      	pop	{r4, pc}
   b8bb0:	000be99c 	.word	0x000be99c

000b8bb4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8bb4:	4b06      	ldr	r3, [pc, #24]	; (b8bd0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8bb6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8bb8:	b510      	push	{r4, lr}
   b8bba:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8bbe:	d005      	beq.n	b8bcc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8bc0:	4608      	mov	r0, r1
   b8bc2:	f002 fb09 	bl	bb1d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8bc6:	2800      	cmp	r0, #0
   b8bc8:	bf08      	it	eq
   b8bca:	2400      	moveq	r4, #0
      }
   b8bcc:	4620      	mov	r0, r4
   b8bce:	bd10      	pop	{r4, pc}
   b8bd0:	000be99c 	.word	0x000be99c

000b8bd4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8bd4:	b510      	push	{r4, lr}
   b8bd6:	2168      	movs	r1, #104	; 0x68
   b8bd8:	4604      	mov	r4, r0
   b8bda:	f7fb fa62 	bl	b40a2 <_ZdlPvj>
   b8bde:	4620      	mov	r0, r4
   b8be0:	bd10      	pop	{r4, pc}

000b8be2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b8be2:	b510      	push	{r4, lr}
   b8be4:	2128      	movs	r1, #40	; 0x28
   b8be6:	4604      	mov	r4, r0
   b8be8:	f7fb fa5b 	bl	b40a2 <_ZdlPvj>
   b8bec:	4620      	mov	r0, r4
   b8bee:	bd10      	pop	{r4, pc}

000b8bf0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b8bf0:	b510      	push	{r4, lr}
   b8bf2:	2130      	movs	r1, #48	; 0x30
   b8bf4:	4604      	mov	r4, r0
   b8bf6:	f7fb fa54 	bl	b40a2 <_ZdlPvj>
   b8bfa:	4620      	mov	r0, r4
   b8bfc:	bd10      	pop	{r4, pc}

000b8bfe <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b8bfe:	2168      	movs	r1, #104	; 0x68
   b8c00:	f7fb ba4f 	b.w	b40a2 <_ZdlPvj>

000b8c04 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b8c04:	2128      	movs	r1, #40	; 0x28
   b8c06:	f7fb ba4c 	b.w	b40a2 <_ZdlPvj>

000b8c0a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b8c0a:	2130      	movs	r1, #48	; 0x30
   b8c0c:	f7fb ba49 	b.w	b40a2 <_ZdlPvj>

000b8c10 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b8c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b8c12:	2500      	movs	r5, #0
   b8c14:	1cec      	adds	r4, r5, #3
   b8c16:	428c      	cmp	r4, r1
   b8c18:	d80d      	bhi.n	b8c36 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b8c1a:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b8c1c:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b8c1e:	5d87      	ldrb	r7, [r0, r6]
   b8c20:	4297      	cmp	r7, r2
   b8c22:	d105      	bne.n	b8c30 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b8c24:	4426      	add	r6, r4
   b8c26:	42b1      	cmp	r1, r6
   b8c28:	d305      	bcc.n	b8c36 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b8c2a:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b8c2c:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b8c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b8c30:	3401      	adds	r4, #1
   b8c32:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b8c34:	e7ee      	b.n	b8c14 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b8c36:	2000      	movs	r0, #0
   b8c38:	e7f9      	b.n	b8c2e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b8c3c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b8c3c:	4a02      	ldr	r2, [pc, #8]	; (b8c48 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b8c3e:	4903      	ldr	r1, [pc, #12]	; (b8c4c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b8c40:	200a      	movs	r0, #10
   b8c42:	f7ff be93 	b.w	b896c <panic_>
   b8c46:	bf00      	nop
   b8c48:	000b870d 	.word	0x000b870d
   b8c4c:	000be7fc 	.word	0x000be7fc

000b8c50 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8c50:	b430      	push	{r4, r5}
   b8c52:	460d      	mov	r5, r1
   b8c54:	4611      	mov	r1, r2
   b8c56:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b8c58:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b8c5a:	6809      	ldr	r1, [r1, #0]
   b8c5c:	6828      	ldr	r0, [r5, #0]
   b8c5e:	e9d3 4300 	ldrd	r4, r3, [r3]
   b8c62:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b8c64:	bc30      	pop	{r4, r5}
   b8c66:	4760      	bx	ip

000b8c68 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b8c68:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8c6a:	b538      	push	{r3, r4, r5, lr}
   b8c6c:	4604      	mov	r4, r0
	switch (__op)
   b8c6e:	d102      	bne.n	b8c76 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b8c70:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b8c72:	6023      	str	r3, [r4, #0]
	}
   b8c74:	e003      	b.n	b8c7e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b8c76:	2a02      	cmp	r2, #2
   b8c78:	d003      	beq.n	b8c82 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b8c7a:	2a03      	cmp	r2, #3
   b8c7c:	d00d      	beq.n	b8c9a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b8c7e:	2000      	movs	r0, #0
   b8c80:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b8c82:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b8c84:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8c86:	f7fb fa06 	bl	b4096 <_Znwj>
   b8c8a:	4603      	mov	r3, r0
   b8c8c:	2800      	cmp	r0, #0
   b8c8e:	d0f0      	beq.n	b8c72 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b8c90:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8c94:	e883 0003 	stmia.w	r3, {r0, r1}
   b8c98:	e7eb      	b.n	b8c72 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b8c9a:	6800      	ldr	r0, [r0, #0]
   b8c9c:	2800      	cmp	r0, #0
   b8c9e:	d0ee      	beq.n	b8c7e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b8ca0:	2108      	movs	r1, #8
   b8ca2:	f7fb f9fe 	bl	b40a2 <_ZdlPvj>
   b8ca6:	e7ea      	b.n	b8c7e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b8ca8 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b8ca8:	b510      	push	{r4, lr}
      if (_M_manager)
   b8caa:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b8cac:	4604      	mov	r4, r0
      if (_M_manager)
   b8cae:	b113      	cbz	r3, b8cb6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b8cb0:	2203      	movs	r2, #3
   b8cb2:	4601      	mov	r1, r0
   b8cb4:	4798      	blx	r3
    }
   b8cb6:	4620      	mov	r0, r4
   b8cb8:	bd10      	pop	{r4, pc}

000b8cba <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8cba:	b510      	push	{r4, lr}
   b8cbc:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b8cbe:	3058      	adds	r0, #88	; 0x58
   b8cc0:	f7ff fff2 	bl	b8ca8 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b8cc4:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b8cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8ccc:	f001 bb98 	b.w	ba400 <_ZN6StringD1Ev>

000b8cd0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b8cd0:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b8cd2:	6843      	ldr	r3, [r0, #4]
   b8cd4:	3b01      	subs	r3, #1
    {
   b8cd6:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b8cd8:	6043      	str	r3, [r0, #4]
   b8cda:	b963      	cbnz	r3, b8cf6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b8cdc:	6803      	ldr	r3, [r0, #0]
   b8cde:	689b      	ldr	r3, [r3, #8]
   b8ce0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8ce2:	68a3      	ldr	r3, [r4, #8]
   b8ce4:	3b01      	subs	r3, #1
   b8ce6:	60a3      	str	r3, [r4, #8]
   b8ce8:	b92b      	cbnz	r3, b8cf6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b8cea:	6823      	ldr	r3, [r4, #0]
   b8cec:	4620      	mov	r0, r4
   b8cee:	68db      	ldr	r3, [r3, #12]
    }
   b8cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b8cf4:	4718      	bx	r3
    }
   b8cf6:	bd10      	pop	{r4, pc}

000b8cf8 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b8cf8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b8cfc:	b2da      	uxtb	r2, r3
   b8cfe:	2a09      	cmp	r2, #9
   b8d00:	d801      	bhi.n	b8d06 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b8d02:	4618      	mov	r0, r3
   b8d04:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b8d06:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b8d0a:	2b05      	cmp	r3, #5
   b8d0c:	d801      	bhi.n	b8d12 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b8d0e:	3857      	subs	r0, #87	; 0x57
   b8d10:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b8d12:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b8d16:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b8d18:	bf94      	ite	ls
   b8d1a:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b8d1c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b8d20:	4770      	bx	lr
	...

000b8d24 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b8d24:	b510      	push	{r4, lr}
            locked_(false) {
   b8d26:	2300      	movs	r3, #0
   b8d28:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b8d2a:	4b04      	ldr	r3, [pc, #16]	; (b8d3c <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b8d2c:	4604      	mov	r4, r0
   b8d2e:	6818      	ldr	r0, [r3, #0]
   b8d30:	f7ff fcd4 	bl	b86dc <os_mutex_recursive_lock>
        locked_ = true;
   b8d34:	2301      	movs	r3, #1
   b8d36:	7023      	strb	r3, [r4, #0]
    }
   b8d38:	4620      	mov	r0, r4
   b8d3a:	bd10      	pop	{r4, pc}
   b8d3c:	2003e6c0 	.word	0x2003e6c0

000b8d40 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b8d40:	b510      	push	{r4, lr}
        if (locked_) {
   b8d42:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b8d44:	4604      	mov	r4, r0
        if (locked_) {
   b8d46:	b11b      	cbz	r3, b8d50 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b8d48:	4b02      	ldr	r3, [pc, #8]	; (b8d54 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b8d4a:	6818      	ldr	r0, [r3, #0]
   b8d4c:	f7ff fcce 	bl	b86ec <os_mutex_recursive_unlock>
    }
   b8d50:	4620      	mov	r0, r4
   b8d52:	bd10      	pop	{r4, pc}
   b8d54:	2003e6c0 	.word	0x2003e6c0

000b8d58 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b8d58:	b082      	sub	sp, #8
   b8d5a:	4603      	mov	r3, r0
    address_ = addr;
   b8d5c:	6808      	ldr	r0, [r1, #0]
   b8d5e:	6849      	ldr	r1, [r1, #4]
   b8d60:	466a      	mov	r2, sp
   b8d62:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b8d64:	466a      	mov	r2, sp
   b8d66:	ca03      	ldmia	r2!, {r0, r1}
   b8d68:	6018      	str	r0, [r3, #0]
}
   b8d6a:	4618      	mov	r0, r3
    address_ = addr.address_;
   b8d6c:	6059      	str	r1, [r3, #4]
}
   b8d6e:	b002      	add	sp, #8
   b8d70:	4770      	bx	lr

000b8d72 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b8d72:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b8d74:	7982      	ldrb	r2, [r0, #6]
   b8d76:	798b      	ldrb	r3, [r1, #6]
   b8d78:	429a      	cmp	r2, r3
   b8d7a:	d106      	bne.n	b8d8a <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b8d7c:	2206      	movs	r2, #6
   b8d7e:	f003 f9f7 	bl	bc170 <memcmp>
   b8d82:	fab0 f080 	clz	r0, r0
   b8d86:	0940      	lsrs	r0, r0, #5
}
   b8d88:	bd08      	pop	{r3, pc}
    return false;
   b8d8a:	2000      	movs	r0, #0
   b8d8c:	e7fc      	b.n	b8d88 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b8d8e <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b8d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8d92:	6003      	str	r3, [r0, #0]
   b8d94:	8083      	strh	r3, [r0, #4]
}
   b8d96:	2000      	movs	r0, #0
   b8d98:	4770      	bx	lr

000b8d9a <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b8d9a:	b508      	push	{r3, lr}
   b8d9c:	4602      	mov	r2, r0
        : address_{} {
   b8d9e:	2100      	movs	r1, #0
   b8da0:	6001      	str	r1, [r0, #0]
   b8da2:	6041      	str	r1, [r0, #4]
    clear();
   b8da4:	f7ff fff3 	bl	b8d8e <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b8da8:	7191      	strb	r1, [r2, #6]
}
   b8daa:	4610      	mov	r0, r2
   b8dac:	bd08      	pop	{r3, pc}
	...

000b8db0 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b8db0:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b8db2:	2301      	movs	r3, #1
   b8db4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8db6:	4b05      	ldr	r3, [pc, #20]	; (b8dcc <_ZN8particle7BleUuidC1Ev+0x1c>)
   b8db8:	4602      	mov	r2, r0
   b8dba:	f103 0110 	add.w	r1, r3, #16
   b8dbe:	f853 4b04 	ldr.w	r4, [r3], #4
   b8dc2:	f842 4b04 	str.w	r4, [r2], #4
   b8dc6:	428b      	cmp	r3, r1
   b8dc8:	d1f9      	bne.n	b8dbe <_ZN8particle7BleUuidC1Ev+0xe>
}
   b8dca:	bd10      	pop	{r4, pc}
   b8dcc:	000be9aa 	.word	0x000be9aa

000b8dd0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b8dd0:	b510      	push	{r4, lr}
    if (uuid128) {
   b8dd2:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b8dd4:	4604      	mov	r4, r0
    if (uuid128) {
   b8dd6:	b1b1      	cbz	r1, b8e06 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b8dd8:	2a01      	cmp	r2, #1
   b8dda:	f101 0210 	add.w	r2, r1, #16
   b8dde:	d10a      	bne.n	b8df6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b8de0:	4601      	mov	r1, r0
   b8de2:	f853 0b04 	ldr.w	r0, [r3], #4
   b8de6:	f841 0b04 	str.w	r0, [r1], #4
   b8dea:	4293      	cmp	r3, r2
   b8dec:	d1f9      	bne.n	b8de2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b8dee:	2301      	movs	r3, #1
   b8df0:	6123      	str	r3, [r4, #16]
}
   b8df2:	4620      	mov	r0, r4
   b8df4:	bd10      	pop	{r4, pc}
   b8df6:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b8df8:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b8dfc:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b8e00:	429a      	cmp	r2, r3
   b8e02:	d1f9      	bne.n	b8df8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b8e04:	e7f3      	b.n	b8dee <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b8e06:	2210      	movs	r2, #16
   b8e08:	f003 f9ea 	bl	bc1e0 <memset>
   b8e0c:	e7f1      	b.n	b8df2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b8e0e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b8e0e:	b538      	push	{r3, r4, r5, lr}
   b8e10:	4604      	mov	r4, r0
   b8e12:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b8e14:	461a      	mov	r2, r3
   b8e16:	f7ff ffdb 	bl	b8dd0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b8e1a:	81a5      	strh	r5, [r4, #12]
}
   b8e1c:	4620      	mov	r0, r4
   b8e1e:	bd38      	pop	{r3, r4, r5, pc}

000b8e20 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b8e20:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b8e22:	6902      	ldr	r2, [r0, #16]
   b8e24:	b922      	cbnz	r2, b8e30 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b8e26:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8e28:	3800      	subs	r0, #0
   b8e2a:	bf18      	it	ne
   b8e2c:	2001      	movne	r0, #1
}
   b8e2e:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8e30:	4902      	ldr	r1, [pc, #8]	; (b8e3c <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b8e32:	2210      	movs	r2, #16
   b8e34:	f003 f99c 	bl	bc170 <memcmp>
   b8e38:	e7f6      	b.n	b8e28 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b8e3a:	bf00      	nop
   b8e3c:	000be9ca 	.word	0x000be9ca

000b8e40 <_ZNK8particle7BleUuid4typeEv>:
}
   b8e40:	6900      	ldr	r0, [r0, #16]
   b8e42:	4770      	bx	lr

000b8e44 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b8e44:	b538      	push	{r3, r4, r5, lr}
   b8e46:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b8e48:	2214      	movs	r2, #20
   b8e4a:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b8e4c:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b8e4e:	f003 f9c7 	bl	bc1e0 <memset>
    if (type_ == BleUuidType::SHORT) {
   b8e52:	6923      	ldr	r3, [r4, #16]
   b8e54:	b91b      	cbnz	r3, b8e5e <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b8e56:	89a3      	ldrh	r3, [r4, #12]
   b8e58:	802b      	strh	r3, [r5, #0]
}
   b8e5a:	4628      	mov	r0, r5
   b8e5c:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b8e5e:	2301      	movs	r3, #1
   b8e60:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b8e62:	4621      	mov	r1, r4
   b8e64:	462b      	mov	r3, r5
   b8e66:	f104 0210 	add.w	r2, r4, #16
   b8e6a:	f851 0b04 	ldr.w	r0, [r1], #4
   b8e6e:	f843 0b04 	str.w	r0, [r3], #4
   b8e72:	4291      	cmp	r1, r2
   b8e74:	d1f9      	bne.n	b8e6a <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b8e76:	e7f0      	b.n	b8e5a <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b8e78 <_ZNK8particle7BleUuid7shortedEv>:
}
   b8e78:	8980      	ldrh	r0, [r0, #12]
   b8e7a:	4770      	bx	lr

000b8e7c <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b8e7c:	4770      	bx	lr

000b8e7e <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b8e7e:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b8e80:	6902      	ldr	r2, [r0, #16]
   b8e82:	690b      	ldr	r3, [r1, #16]
   b8e84:	429a      	cmp	r2, r3
   b8e86:	d106      	bne.n	b8e96 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b8e88:	2210      	movs	r2, #16
   b8e8a:	f003 f971 	bl	bc170 <memcmp>
   b8e8e:	fab0 f080 	clz	r0, r0
   b8e92:	0940      	lsrs	r0, r0, #5
}
   b8e94:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b8e96:	2000      	movs	r0, #0
   b8e98:	e7fc      	b.n	b8e94 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b8e9c <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b8e9c:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b8e9e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b8ea2:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8ea4:	4b34      	ldr	r3, [pc, #208]	; (b8f78 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b8ea6:	460c      	mov	r4, r1
   b8ea8:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8eaa:	4602      	mov	r2, r0
   b8eac:	f103 0110 	add.w	r1, r3, #16
   b8eb0:	f853 0b04 	ldr.w	r0, [r3], #4
   b8eb4:	f842 0b04 	str.w	r0, [r2], #4
   b8eb8:	428b      	cmp	r3, r1
   b8eba:	d1f9      	bne.n	b8eb0 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b8ebc:	b344      	cbz	r4, b8f10 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b8ebe:	2124      	movs	r1, #36	; 0x24
   b8ec0:	4620      	mov	r0, r4
   b8ec2:	f003 f9f1 	bl	bc2a8 <strnlen>
   b8ec6:	2804      	cmp	r0, #4
   b8ec8:	f04f 0500 	mov.w	r5, #0
   b8ecc:	d123      	bne.n	b8f16 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b8ece:	f8ad 5004 	strh.w	r5, [sp, #4]
   b8ed2:	af01      	add	r7, sp, #4
   b8ed4:	1ca5      	adds	r5, r4, #2
   b8ed6:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b8ed8:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b8edc:	f7ff ff0c 	bl	b8cf8 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b8ee0:	f1b0 0800 	subs.w	r8, r0, #0
   b8ee4:	db12      	blt.n	b8f0c <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b8ee6:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b8eea:	f7ff ff05 	bl	b8cf8 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b8eee:	2800      	cmp	r0, #0
   b8ef0:	db0c      	blt.n	b8f0c <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b8ef2:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b8ef4:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b8ef8:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b8efa:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b8efe:	d1eb      	bne.n	b8ed8 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b8f00:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b8f04:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b8f06:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8f0a:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b8f0c:	2300      	movs	r3, #0
   b8f0e:	6133      	str	r3, [r6, #16]
}
   b8f10:	b002      	add	sp, #8
   b8f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b8f16:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8f1a:	2124      	movs	r1, #36	; 0x24
   b8f1c:	4620      	mov	r0, r4
   b8f1e:	f003 f9c3 	bl	bc2a8 <strnlen>
   b8f22:	42a8      	cmp	r0, r5
   b8f24:	d807      	bhi.n	b8f36 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b8f26:	4642      	mov	r2, r8
   b8f28:	2100      	movs	r1, #0
   b8f2a:	4630      	mov	r0, r6
}
   b8f2c:	b002      	add	sp, #8
   b8f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b8f32:	f003 b955 	b.w	bc1e0 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8f36:	f1b8 0f00 	cmp.w	r8, #0
   b8f3a:	d0e9      	beq.n	b8f10 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b8f3c:	5d60      	ldrb	r0, [r4, r5]
   b8f3e:	f7ff fedb 	bl	b8cf8 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b8f42:	0603      	lsls	r3, r0, #24
   b8f44:	d415      	bmi.n	b8f72 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b8f46:	0100      	lsls	r0, r0, #4
   b8f48:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8f4c:	b2c7      	uxtb	r7, r0
   b8f4e:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b8f52:	2124      	movs	r1, #36	; 0x24
   b8f54:	4620      	mov	r0, r4
   b8f56:	f003 f9a7 	bl	bc2a8 <strnlen>
   b8f5a:	3501      	adds	r5, #1
   b8f5c:	42a8      	cmp	r0, r5
   b8f5e:	d908      	bls.n	b8f72 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b8f60:	5d60      	ldrb	r0, [r4, r5]
   b8f62:	f7ff fec9 	bl	b8cf8 <_ZN8particle11hexToNibbleEc>
   b8f66:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b8f68:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b8f6a:	bfa4      	itt	ge
   b8f6c:	4338      	orrge	r0, r7
   b8f6e:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8f72:	3501      	adds	r5, #1
   b8f74:	e7d1      	b.n	b8f1a <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b8f76:	bf00      	nop
   b8f78:	000be9aa 	.word	0x000be9aa

000b8f7c <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b8f7c:	b513      	push	{r0, r1, r4, lr}
   b8f7e:	4604      	mov	r4, r0
   b8f80:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b8f82:	f7ff ff15 	bl	b8db0 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b8f86:	4620      	mov	r0, r4
   b8f88:	9901      	ldr	r1, [sp, #4]
   b8f8a:	f7ff ff87 	bl	b8e9c <_ZN8particle7BleUuid9constructEPKc>
}
   b8f8e:	4620      	mov	r0, r4
   b8f90:	b002      	add	sp, #8
   b8f92:	bd10      	pop	{r4, pc}

000b8f94 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b8f94:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b8f96:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8f9a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b8f9c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b8f9e:	8043      	strh	r3, [r0, #2]
   b8fa0:	220e      	movs	r2, #14
   b8fa2:	4629      	mov	r1, r5
   b8fa4:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b8fa6:	7105      	strb	r5, [r0, #4]
   b8fa8:	3006      	adds	r0, #6
   b8faa:	f003 f919 	bl	bc1e0 <memset>
   b8fae:	f104 0014 	add.w	r0, r4, #20
   b8fb2:	f7ff fefd 	bl	b8db0 <_ZN8particle7BleUuidC1Ev>
   b8fb6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b8fba:	f7ff fef9 	bl	b8db0 <_ZN8particle7BleUuidC1Ev>
   b8fbe:	4904      	ldr	r1, [pc, #16]	; (b8fd0 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b8fc0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8fc4:	f001 fa67 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b8fc8:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b8fca:	4620      	mov	r0, r4
   b8fcc:	bd38      	pop	{r3, r4, r5, pc}
   b8fce:	bf00      	nop
   b8fd0:	000be7c6 	.word	0x000be7c6

000b8fd4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b8fd4:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b8fd6:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b8fda:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b8fde:	4293      	cmp	r3, r2
   b8fe0:	4618      	mov	r0, r3
   b8fe2:	d006      	beq.n	b8ff2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b8fe4:	6804      	ldr	r4, [r0, #0]
   b8fe6:	8824      	ldrh	r4, [r4, #0]
   b8fe8:	428c      	cmp	r4, r1
   b8fea:	f103 0308 	add.w	r3, r3, #8
   b8fee:	d1f6      	bne.n	b8fde <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b8ff0:	bd10      	pop	{r4, pc}
        return nullptr;
   b8ff2:	2000      	movs	r0, #0
   b8ff4:	e7fc      	b.n	b8ff0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b8ff8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b8ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8ffa:	4606      	mov	r6, r0
   b8ffc:	b085      	sub	sp, #20
   b8ffe:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b9000:	460d      	mov	r5, r1
   b9002:	2900      	cmp	r1, #0
   b9004:	d050      	beq.n	b90a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b9006:	2a00      	cmp	r2, #0
   b9008:	d04e      	beq.n	b90a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b900a:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b900c:	7823      	ldrb	r3, [r4, #0]
   b900e:	2af4      	cmp	r2, #244	; 0xf4
   b9010:	bf28      	it	cs
   b9012:	22f4      	movcs	r2, #244	; 0xf4
   b9014:	b343      	cbz	r3, b9068 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b9016:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b9018:	0798      	lsls	r0, r3, #30
   b901a:	d509      	bpl.n	b9030 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b901c:	89a0      	ldrh	r0, [r4, #12]
   b901e:	9203      	str	r2, [sp, #12]
   b9020:	2300      	movs	r3, #0
   b9022:	f7ff fb0d 	bl	b8640 <hal_ble_gatt_server_set_characteristic_value>
   b9026:	2800      	cmp	r0, #0
   b9028:	9a03      	ldr	r2, [sp, #12]
   b902a:	da03      	bge.n	b9034 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b902c:	b005      	add	sp, #20
   b902e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b9030:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b9034:	6834      	ldr	r4, [r6, #0]
   b9036:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b9038:	06d9      	lsls	r1, r3, #27
   b903a:	d509      	bpl.n	b9050 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b903c:	2f01      	cmp	r7, #1
   b903e:	d007      	beq.n	b9050 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9040:	89a0      	ldrh	r0, [r4, #12]
   b9042:	2300      	movs	r3, #0
   b9044:	4629      	mov	r1, r5
}
   b9046:	b005      	add	sp, #20
   b9048:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b904c:	f7ff bb2a 	b.w	b86a4 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b9050:	069b      	lsls	r3, r3, #26
   b9052:	d5eb      	bpl.n	b902c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b9054:	2f02      	cmp	r7, #2
   b9056:	d0e9      	beq.n	b902c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9058:	89a0      	ldrh	r0, [r4, #12]
   b905a:	2300      	movs	r3, #0
   b905c:	4629      	mov	r1, r5
}
   b905e:	b005      	add	sp, #20
   b9060:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9064:	f7ff bb28 	b.w	b86b8 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b9068:	8860      	ldrh	r0, [r4, #2]
   b906a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b906e:	4288      	cmp	r0, r1
   b9070:	d01c      	beq.n	b90ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b9072:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b9074:	074e      	lsls	r6, r1, #29
   b9076:	d501      	bpl.n	b907c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b9078:	2f01      	cmp	r7, #1
   b907a:	d104      	bne.n	b9086 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b907c:	070b      	lsls	r3, r1, #28
   b907e:	d409      	bmi.n	b9094 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b9080:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b9084:	e7d2      	b.n	b902c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b9086:	89a1      	ldrh	r1, [r4, #12]
   b9088:	9300      	str	r3, [sp, #0]
   b908a:	4613      	mov	r3, r2
   b908c:	462a      	mov	r2, r5
   b908e:	f7ff faeb 	bl	b8668 <hal_ble_gatt_client_write_without_response>
   b9092:	e7cb      	b.n	b902c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b9094:	2f02      	cmp	r7, #2
   b9096:	d0f3      	beq.n	b9080 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b9098:	2300      	movs	r3, #0
   b909a:	89a1      	ldrh	r1, [r4, #12]
   b909c:	9300      	str	r3, [sp, #0]
   b909e:	4613      	mov	r3, r2
   b90a0:	462a      	mov	r2, r5
   b90a2:	f7ff fad7 	bl	b8654 <hal_ble_gatt_client_write_with_response>
   b90a6:	e7c1      	b.n	b902c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b90a8:	4802      	ldr	r0, [pc, #8]	; (b90b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b90aa:	e7bf      	b.n	b902c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b90ac:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b90b0:	e7bc      	b.n	b902c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b90b2:	bf00      	nop
   b90b4:	fffffef2 	.word	0xfffffef2

000b90b8 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b90b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b90ba:	460c      	mov	r4, r1
   b90bc:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b90be:	21f4      	movs	r1, #244	; 0xf4
   b90c0:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b90c2:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b90c4:	f003 f8f0 	bl	bc2a8 <strnlen>
   b90c8:	9b01      	ldr	r3, [sp, #4]
   b90ca:	4602      	mov	r2, r0
   b90cc:	4621      	mov	r1, r4
   b90ce:	4628      	mov	r0, r5
}
   b90d0:	b003      	add	sp, #12
   b90d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b90d6:	f7ff bf8f 	b.w	b8ff8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b90dc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b90dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b90e0:	2600      	movs	r6, #0
   b90e2:	6006      	str	r6, [r0, #0]
   b90e4:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b90e6:	2028      	movs	r0, #40	; 0x28
   b90e8:	460c      	mov	r4, r1
   b90ea:	f7fa ffd4 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b90ee:	1e05      	subs	r5, r0, #0
   b90f0:	f105 080c 	add.w	r8, r5, #12
   b90f4:	d00f      	beq.n	b9116 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b90f6:	2301      	movs	r3, #1
   b90f8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b90fc:	4b08      	ldr	r3, [pc, #32]	; (b9120 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b90fe:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b9100:	4640      	mov	r0, r8
   b9102:	f7ff fe55 	bl	b8db0 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b9106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b9108:	622e      	str	r6, [r5, #32]
   b910a:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b910e:	4646      	mov	r6, r8
   b9110:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b9112:	6823      	ldr	r3, [r4, #0]
   b9114:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b9116:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b911a:	4638      	mov	r0, r7
   b911c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9120:	000be96c 	.word	0x000be96c

000b9124 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b9124:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9126:	2500      	movs	r5, #0
   b9128:	6005      	str	r5, [r0, #0]
   b912a:	4606      	mov	r6, r0
   b912c:	2030      	movs	r0, #48	; 0x30
   b912e:	f7fa ffb2 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9132:	4604      	mov	r4, r0
   b9134:	b188      	cbz	r0, b915a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b9136:	2301      	movs	r3, #1
   b9138:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b913c:	4b09      	ldr	r3, [pc, #36]	; (b9164 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b913e:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b9140:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9144:	8183      	strh	r3, [r0, #12]
   b9146:	300e      	adds	r0, #14
   b9148:	f7ff fe27 	bl	b8d9a <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b914c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b9150:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b9154:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b9158:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b915a:	6074      	str	r4, [r6, #4]
   b915c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b915e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b9160:	4630      	mov	r0, r6
   b9162:	bd70      	pop	{r4, r5, r6, pc}
   b9164:	000be988 	.word	0x000be988

000b9168 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b9168:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b916a:	460d      	mov	r5, r1
   b916c:	4604      	mov	r4, r0
    WiringBleLock lk;
   b916e:	a801      	add	r0, sp, #4
   b9170:	f7ff fdd8 	bl	b8d24 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b9174:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b9176:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b917a:	6023      	str	r3, [r4, #0]
   b917c:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b9180:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b9182:	a801      	add	r0, sp, #4
   b9184:	f7ff fddc 	bl	b8d40 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b9188:	4620      	mov	r0, r4
   b918a:	b003      	add	sp, #12
   b918c:	bd30      	pop	{r4, r5, pc}

000b918e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b918e:	b530      	push	{r4, r5, lr}
   b9190:	4605      	mov	r5, r0
   b9192:	b087      	sub	sp, #28
   b9194:	460c      	mov	r4, r1
    WiringBleLock lk;
   b9196:	a801      	add	r0, sp, #4
   b9198:	f7ff fdc4 	bl	b8d24 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b919c:	682a      	ldr	r2, [r5, #0]
   b919e:	6823      	ldr	r3, [r4, #0]
   b91a0:	8812      	ldrh	r2, [r2, #0]
   b91a2:	881b      	ldrh	r3, [r3, #0]
   b91a4:	429a      	cmp	r2, r3
   b91a6:	d10d      	bne.n	b91c4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b91a8:	4629      	mov	r1, r5
   b91aa:	a802      	add	r0, sp, #8
   b91ac:	f7ff ffdc 	bl	b9168 <_ZNK8particle13BlePeerDevice7addressEv>
   b91b0:	4621      	mov	r1, r4
   b91b2:	a804      	add	r0, sp, #16
   b91b4:	f7ff ffd8 	bl	b9168 <_ZNK8particle13BlePeerDevice7addressEv>
   b91b8:	a904      	add	r1, sp, #16
   b91ba:	a802      	add	r0, sp, #8
   b91bc:	f7ff fdd9 	bl	b8d72 <_ZNK8particle10BleAddresseqERKS0_>
   b91c0:	4604      	mov	r4, r0
   b91c2:	b900      	cbnz	r0, b91c6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b91c4:	2400      	movs	r4, #0
    WiringBleLock lk;
   b91c6:	a801      	add	r0, sp, #4
   b91c8:	f7ff fdba 	bl	b8d40 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b91cc:	4620      	mov	r0, r4
   b91ce:	b007      	add	sp, #28
   b91d0:	bd30      	pop	{r4, r5, pc}
	...

000b91d4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b91d4:	b510      	push	{r4, lr}
   b91d6:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b91d8:	2064      	movs	r0, #100	; 0x64
   b91da:	f7fa ff5c 	bl	b4096 <_Znwj>
   b91de:	b168      	cbz	r0, b91fc <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b91e0:	2300      	movs	r3, #0
   b91e2:	e9c0 3300 	strd	r3, r3, [r0]
   b91e6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b91ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b91ee:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b91f2:	6203      	str	r3, [r0, #32]
   b91f4:	62c3      	str	r3, [r0, #44]	; 0x2c
   b91f6:	63c3      	str	r3, [r0, #60]	; 0x3c
   b91f8:	64c3      	str	r3, [r0, #76]	; 0x4c
   b91fa:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b91fc:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b91fe:	b920      	cbnz	r0, b920a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b9200:	4a0a      	ldr	r2, [pc, #40]	; (b922c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b9202:	490b      	ldr	r1, [pc, #44]	; (b9230 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b9204:	200a      	movs	r0, #10
   b9206:	f7ff fbb1 	bl	b896c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b920a:	2000      	movs	r0, #0
   b920c:	f7ff f9e4 	bl	b85d8 <hal_ble_stack_init>
   b9210:	b120      	cbz	r0, b921c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b9212:	4a06      	ldr	r2, [pc, #24]	; (b922c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b9214:	4907      	ldr	r1, [pc, #28]	; (b9234 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b9216:	200a      	movs	r0, #10
   b9218:	f7ff fba8 	bl	b896c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b921c:	6821      	ldr	r1, [r4, #0]
   b921e:	4806      	ldr	r0, [pc, #24]	; (b9238 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b9220:	2200      	movs	r2, #0
   b9222:	f7ff fa35 	bl	b8690 <hal_ble_set_callback_on_periph_link_events>
}
   b9226:	4620      	mov	r0, r4
   b9228:	bd10      	pop	{r4, pc}
   b922a:	bf00      	nop
   b922c:	000b870d 	.word	0x000b870d
   b9230:	000be7fc 	.word	0x000be7fc
   b9234:	000be83a 	.word	0x000be83a
   b9238:	000b97bd 	.word	0x000b97bd

000b923c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b923c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b923e:	4c0a      	ldr	r4, [pc, #40]	; (b9268 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b9240:	7823      	ldrb	r3, [r4, #0]
   b9242:	f3bf 8f5b 	dmb	ish
   b9246:	07db      	lsls	r3, r3, #31
   b9248:	d40c      	bmi.n	b9264 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b924a:	4620      	mov	r0, r4
   b924c:	f7fa ff2b 	bl	b40a6 <__cxa_guard_acquire>
   b9250:	b140      	cbz	r0, b9264 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b9252:	4806      	ldr	r0, [pc, #24]	; (b926c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b9254:	f7ff ffbe 	bl	b91d4 <_ZN8particle14BleLocalDeviceC1Ev>
   b9258:	4620      	mov	r0, r4
   b925a:	f7fa ff29 	bl	b40b0 <__cxa_guard_release>
   b925e:	4804      	ldr	r0, [pc, #16]	; (b9270 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b9260:	f002 ff7c 	bl	bc15c <atexit>
    return instance;
}
   b9264:	4801      	ldr	r0, [pc, #4]	; (b926c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b9266:	bd10      	pop	{r4, pc}
   b9268:	2003e6b8 	.word	0x2003e6b8
   b926c:	2003e6c4 	.word	0x2003e6c4
   b9270:	000b9489 	.word	0x000b9489

000b9274 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b9274:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b9276:	6803      	ldr	r3, [r0, #0]
   b9278:	3b09      	subs	r3, #9
   b927a:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b927c:	b08d      	sub	sp, #52	; 0x34
   b927e:	4604      	mov	r4, r0
   b9280:	460d      	mov	r5, r1
    switch (event->type) {
   b9282:	d811      	bhi.n	b92a8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b9284:	f7ff ffda 	bl	b923c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b9288:	88a1      	ldrh	r1, [r4, #4]
   b928a:	6800      	ldr	r0, [r0, #0]
   b928c:	f7ff fea2 	bl	b8fd4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b9290:	4603      	mov	r3, r0
   b9292:	b958      	cbnz	r0, b92ac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b9294:	2220      	movs	r2, #32
   b9296:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b929a:	4a0b      	ldr	r2, [pc, #44]	; (b92c8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b929c:	9200      	str	r2, [sp, #0]
   b929e:	490b      	ldr	r1, [pc, #44]	; (b92cc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b92a0:	aa04      	add	r2, sp, #16
   b92a2:	2032      	movs	r0, #50	; 0x32
   b92a4:	f7ff fb6a 	bl	b897c <log_message>
}
   b92a8:	b00d      	add	sp, #52	; 0x34
   b92aa:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b92ac:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b92ae:	2a00      	cmp	r2, #0
   b92b0:	d0fa      	beq.n	b92a8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b92b2:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b92b6:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b92ba:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b92be:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b92c0:	aa04      	add	r2, sp, #16
   b92c2:	a903      	add	r1, sp, #12
   b92c4:	47a0      	blx	r4
}
   b92c6:	e7ef      	b.n	b92a8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b92c8:	000be87c 	.word	0x000be87c
   b92cc:	000be813 	.word	0x000be813

000b92d0 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b92d0:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b92d2:	2000      	movs	r0, #0
   b92d4:	f7ff f980 	bl	b85d8 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b92d8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b92dc:	bd08      	pop	{r3, pc}

000b92de <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b92de:	b919      	cbnz	r1, b92e8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b92e0:	460a      	mov	r2, r1
   b92e2:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b92e4:	f7ff b980 	b.w	b85e8 <hal_ble_gap_set_advertising_data>
   b92e8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b92ec:	2200      	movs	r2, #0
   b92ee:	e7f9      	b.n	b92e4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b92f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b92f0:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b92f2:	1e14      	subs	r4, r2, #0
   b92f4:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b92f6:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b92f8:	db02      	blt.n	b9300 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b92fa:	1862      	adds	r2, r4, r1
   b92fc:	429a      	cmp	r2, r3
   b92fe:	dd00      	ble.n	b9302 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b9300:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b9302:	682a      	ldr	r2, [r5, #0]
   b9304:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b9306:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b9308:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b930a:	1a52      	subs	r2, r2, r1
   b930c:	f002 ff4e 	bl	bc1ac <memmove>
    size_ -= n;
   b9310:	686a      	ldr	r2, [r5, #4]
   b9312:	1b12      	subs	r2, r2, r4
   b9314:	606a      	str	r2, [r5, #4]
}
   b9316:	bd38      	pop	{r3, r4, r5, pc}

000b9318 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b9318:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b931a:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b931c:	4604      	mov	r4, r0
   b931e:	460d      	mov	r5, r1
   b9320:	ab01      	add	r3, sp, #4
   b9322:	e9d0 0100 	ldrd	r0, r1, [r0]
   b9326:	f7ff fc73 	bl	b8c10 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b932a:	4602      	mov	r2, r0
   b932c:	b138      	cbz	r0, b933e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b932e:	9901      	ldr	r1, [sp, #4]
   b9330:	4620      	mov	r0, r4
   b9332:	f7ff ffdd 	bl	b92f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b9336:	4629      	mov	r1, r5
   b9338:	4620      	mov	r0, r4
   b933a:	f7ff ffed 	bl	b9318 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b933e:	b003      	add	sp, #12
   b9340:	bd30      	pop	{r4, r5, pc}

000b9342 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b9342:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b9344:	460c      	mov	r4, r1
   b9346:	b929      	cbnz	r1, b9354 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b9348:	460a      	mov	r2, r1
   b934a:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b934c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b9350:	f7ff b952 	b.w	b85f8 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b9354:	2101      	movs	r1, #1
   b9356:	4620      	mov	r0, r4
   b9358:	f7ff ffde 	bl	b9318 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b935c:	e9d4 0100 	ldrd	r0, r1, [r4]
   b9360:	2200      	movs	r2, #0
   b9362:	e7f3      	b.n	b934c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b9364 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b9364:	b538      	push	{r3, r4, r5, lr}
   b9366:	4604      	mov	r4, r0
   b9368:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b936a:	f7ff ffb8 	bl	b92de <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b936e:	2800      	cmp	r0, #0
   b9370:	db0a      	blt.n	b9388 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b9372:	4629      	mov	r1, r5
   b9374:	4620      	mov	r0, r4
   b9376:	f7ff ffe4 	bl	b9342 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b937a:	2800      	cmp	r0, #0
   b937c:	db04      	blt.n	b9388 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b937e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b9382:	2000      	movs	r0, #0
   b9384:	f7ff b940 	b.w	b8608 <hal_ble_gap_start_advertising>
}
   b9388:	bd38      	pop	{r3, r4, r5, pc}
	...

000b938c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b938c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b938e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b9390:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b9392:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9394:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b9396:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9398:	f7fa fe7d 	bl	b4096 <_Znwj>
   b939c:	b118      	cbz	r0, b93a6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b939e:	682b      	ldr	r3, [r5, #0]
   b93a0:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b93a2:	686b      	ldr	r3, [r5, #4]
   b93a4:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b93a6:	4b03      	ldr	r3, [pc, #12]	; (b93b4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b93a8:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b93aa:	4b03      	ldr	r3, [pc, #12]	; (b93b8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b93ac:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b93ae:	60a3      	str	r3, [r4, #8]
      }
   b93b0:	4620      	mov	r0, r4
   b93b2:	bd38      	pop	{r3, r4, r5, pc}
   b93b4:	000b8c51 	.word	0x000b8c51
   b93b8:	000b8c69 	.word	0x000b8c69

000b93bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b93bc:	680b      	ldr	r3, [r1, #0]
   b93be:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b93c0:	b113      	cbz	r3, b93c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b93c2:	685a      	ldr	r2, [r3, #4]
   b93c4:	3201      	adds	r2, #1
   b93c6:	605a      	str	r2, [r3, #4]
      }
   b93c8:	4770      	bx	lr

000b93ca <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b93ca:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b93cc:	f851 3b04 	ldr.w	r3, [r1], #4
   b93d0:	4604      	mov	r4, r0
   b93d2:	f840 3b04 	str.w	r3, [r0], #4
   b93d6:	f7ff fff1 	bl	b93bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b93da:	6823      	ldr	r3, [r4, #0]
   b93dc:	b90b      	cbnz	r3, b93e2 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b93de:	f7ff fc2d 	bl	b8c3c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b93e2:	4620      	mov	r0, r4
   b93e4:	bd10      	pop	{r4, pc}

000b93e6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b93e6:	b510      	push	{r4, lr}
   b93e8:	f851 3b04 	ldr.w	r3, [r1], #4
   b93ec:	4604      	mov	r4, r0
   b93ee:	f840 3b04 	str.w	r3, [r0], #4
   b93f2:	f7ff ffe3 	bl	b93bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b93f6:	4620      	mov	r0, r4
   b93f8:	bd10      	pop	{r4, pc}

000b93fa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b93fa:	b510      	push	{r4, lr}
   b93fc:	f851 3b04 	ldr.w	r3, [r1], #4
   b9400:	4604      	mov	r4, r0
   b9402:	f840 3b04 	str.w	r3, [r0], #4
   b9406:	f7ff ffd9 	bl	b93bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b940a:	4620      	mov	r0, r4
   b940c:	bd10      	pop	{r4, pc}

000b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b940e:	b510      	push	{r4, lr}
   b9410:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b9412:	6800      	ldr	r0, [r0, #0]
   b9414:	b108      	cbz	r0, b941a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b9416:	f7ff fc5b 	bl	b8cd0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b941a:	4620      	mov	r0, r4
   b941c:	bd10      	pop	{r4, pc}

000b941e <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b941e:	b510      	push	{r4, lr}
   b9420:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b9422:	3004      	adds	r0, #4
   b9424:	f7ff fff3 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9428:	4620      	mov	r0, r4
   b942a:	bd10      	pop	{r4, pc}

000b942c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b942c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b942e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9432:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b9434:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b9438:	42ae      	cmp	r6, r5
   b943a:	d004      	beq.n	b9446 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b943c:	1d28      	adds	r0, r5, #4
   b943e:	f7ff ffe6 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9442:	3508      	adds	r5, #8
   b9444:	e7f8      	b.n	b9438 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b9446:	6820      	ldr	r0, [r4, #0]
   b9448:	f7ff fb44 	bl	b8ad4 <free>
}
   b944c:	4620      	mov	r0, r4
   b944e:	bd70      	pop	{r4, r5, r6, pc}

000b9450 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9450:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b9452:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9456:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b9458:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b945c:	42ae      	cmp	r6, r5
   b945e:	d004      	beq.n	b946a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b9460:	1d28      	adds	r0, r5, #4
   b9462:	f7ff ffd4 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9466:	3508      	adds	r5, #8
   b9468:	e7f8      	b.n	b945c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b946a:	6820      	ldr	r0, [r4, #0]
   b946c:	f7ff fb32 	bl	b8ad4 <free>
}
   b9470:	4620      	mov	r0, r4
   b9472:	bd70      	pop	{r4, r5, r6, pc}

000b9474 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b9474:	b510      	push	{r4, lr}
   b9476:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b9478:	3024      	adds	r0, #36	; 0x24
   b947a:	f7ff ffe9 	bl	b9450 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b947e:	f104 0018 	add.w	r0, r4, #24
   b9482:	f7ff ffd3 	bl	b942c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b9486:	bd10      	pop	{r4, pc}

000b9488 <__tcf_0>:
    static BleLocalDevice instance;
   b9488:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b948a:	4b17      	ldr	r3, [pc, #92]	; (b94e8 <__tcf_0+0x60>)
   b948c:	681c      	ldr	r4, [r3, #0]
   b948e:	b354      	cbz	r4, b94e6 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b9490:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b9494:	f7ff fc08 	bl	b8ca8 <_ZNSt14_Function_baseD1Ev>
   b9498:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b949c:	f7ff fc04 	bl	b8ca8 <_ZNSt14_Function_baseD1Ev>
   b94a0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b94a4:	f7ff fc00 	bl	b8ca8 <_ZNSt14_Function_baseD1Ev>
   b94a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b94ac:	f7ff fbfc 	bl	b8ca8 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b94b0:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b94b4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b94b8:	42ae      	cmp	r6, r5
   b94ba:	d004      	beq.n	b94c6 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b94bc:	1d28      	adds	r0, r5, #4
   b94be:	f7ff ffa6 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b94c2:	3508      	adds	r5, #8
   b94c4:	e7f8      	b.n	b94b8 <__tcf_0+0x30>
    ::free(ptr);
   b94c6:	69a0      	ldr	r0, [r4, #24]
   b94c8:	f7ff fb04 	bl	b8ad4 <free>
    ~BleLocalDeviceImpl() = default;
   b94cc:	f104 000c 	add.w	r0, r4, #12
   b94d0:	f7ff ffbe 	bl	b9450 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b94d4:	4620      	mov	r0, r4
   b94d6:	f7ff ffa9 	bl	b942c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b94da:	4620      	mov	r0, r4
   b94dc:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b94de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b94e2:	f7fa bdde 	b.w	b40a2 <_ZdlPvj>
   b94e6:	bd70      	pop	{r4, r5, r6, pc}
   b94e8:	2003e6c4 	.word	0x2003e6c4

000b94ec <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b94ec:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b94ee:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b94f0:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b94f4:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b94f8:	6803      	ldr	r3, [r0, #0]
   b94fa:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b94fc:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b94fe:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b9500:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b9502:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b9504:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b9506:	f7ff ff82 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b950a:	b002      	add	sp, #8
   b950c:	bd10      	pop	{r4, pc}

000b950e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b950e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b9510:	b510      	push	{r4, lr}
      if (_M_empty())
   b9512:	b90a      	cbnz	r2, b9518 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b9514:	f001 fe5d 	bl	bb1d2 <_ZSt25__throw_bad_function_callv>
    }
   b9518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b951c:	68c3      	ldr	r3, [r0, #12]
   b951e:	4718      	bx	r3

000b9520 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b9520:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b9522:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b9524:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b9526:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b9528:	dd03      	ble.n	b9532 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b952a:	f7ff fadb 	bl	b8ae4 <realloc>
            if (!d) {
   b952e:	b918      	cbnz	r0, b9538 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b9530:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b9532:	f7ff facf 	bl	b8ad4 <free>
        T* d = nullptr;
   b9536:	2000      	movs	r0, #0
        data_ = d;
   b9538:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b953a:	60a5      	str	r5, [r4, #8]
        return true;
   b953c:	2001      	movs	r0, #1
   b953e:	e7f7      	b.n	b9530 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b9540 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b9540:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b9542:	6883      	ldr	r3, [r0, #8]
   b9544:	428b      	cmp	r3, r1
   b9546:	da02      	bge.n	b954e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b9548:	f7ff ffea 	bl	b9520 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b954c:	bd08      	pop	{r3, pc}
    return true;
   b954e:	2001      	movs	r0, #1
   b9550:	e7fc      	b.n	b954c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b9552 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b9552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9556:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9558:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b955a:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b955c:	4419      	add	r1, r3
   b955e:	6883      	ldr	r3, [r0, #8]
   b9560:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b9562:	4604      	mov	r4, r0
   b9564:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b9566:	dc12      	bgt.n	b958e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b9568:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b956a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b956c:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b956e:	1bd2      	subs	r2, r2, r7
   b9570:	4631      	mov	r1, r6
   b9572:	1970      	adds	r0, r6, r5
   b9574:	f002 fe1a 	bl	bc1ac <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b9578:	462a      	mov	r2, r5
   b957a:	4641      	mov	r1, r8
   b957c:	4630      	mov	r0, r6
   b957e:	f002 fe07 	bl	bc190 <memcpy>
    size_ += n;
   b9582:	6863      	ldr	r3, [r4, #4]
   b9584:	442b      	add	r3, r5
   b9586:	6063      	str	r3, [r4, #4]
    return true;
   b9588:	2001      	movs	r0, #1
}
   b958a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b958e:	f7ff ffc7 	bl	b9520 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b9592:	2800      	cmp	r0, #0
   b9594:	d1e8      	bne.n	b9568 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b9596:	e7f8      	b.n	b958a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b9598 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b9598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b959a:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b959c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b95a0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b95a2:	4604      	mov	r4, r0
   b95a4:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b95a6:	da0b      	bge.n	b95c0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b95a8:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b95aa:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b95ac:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b95ae:	1b52      	subs	r2, r2, r5
   b95b0:	1c48      	adds	r0, r1, #1
   b95b2:	f002 fdfb 	bl	bc1ac <memmove>
    new(p) T(std::move(value));
   b95b6:	557e      	strb	r6, [r7, r5]
    ++size_;
   b95b8:	6863      	ldr	r3, [r4, #4]
   b95ba:	3301      	adds	r3, #1
   b95bc:	6063      	str	r3, [r4, #4]
}
   b95be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b95c0:	3101      	adds	r1, #1
   b95c2:	f7ff ffad 	bl	b9520 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b95c6:	2800      	cmp	r0, #0
   b95c8:	d1ee      	bne.n	b95a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b95ca:	e7f8      	b.n	b95be <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b95cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b95cc:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b95ce:	6841      	ldr	r1, [r0, #4]
   b95d0:	f7ff bfe2 	b.w	b9598 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b95d4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b95d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b95d8:	4604      	mov	r4, r0
   b95da:	461d      	mov	r5, r3
   b95dc:	460f      	mov	r7, r1
   b95de:	ab01      	add	r3, sp, #4
   b95e0:	4690      	mov	r8, r2
   b95e2:	460a      	mov	r2, r1
   b95e4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b95e8:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b95ec:	f7ff fb10 	bl	b8c10 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b95f0:	1cae      	adds	r6, r5, #2
   b95f2:	6863      	ldr	r3, [r4, #4]
   b95f4:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b95f6:	f1b9 0f00 	cmp.w	r9, #0
   b95fa:	d126      	bne.n	b964a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b95fc:	b328      	cbz	r0, b964a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b95fe:	4433      	add	r3, r6
   b9600:	1a1b      	subs	r3, r3, r0
   b9602:	2bff      	cmp	r3, #255	; 0xff
   b9604:	d809      	bhi.n	b961a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b9606:	9901      	ldr	r1, [sp, #4]
   b9608:	4620      	mov	r0, r4
   b960a:	f7ff fe71 	bl	b92f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b960e:	6861      	ldr	r1, [r4, #4]
   b9610:	4620      	mov	r0, r4
   b9612:	4431      	add	r1, r6
   b9614:	f7ff ff94 	bl	b9540 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b9618:	b918      	cbnz	r0, b9622 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b961a:	6860      	ldr	r0, [r4, #4]
}
   b961c:	b003      	add	sp, #12
   b961e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b9622:	1c6a      	adds	r2, r5, #1
   b9624:	9901      	ldr	r1, [sp, #4]
   b9626:	b2d2      	uxtb	r2, r2
   b9628:	4620      	mov	r0, r4
   b962a:	f7ff ffb5 	bl	b9598 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b962e:	9901      	ldr	r1, [sp, #4]
   b9630:	463a      	mov	r2, r7
   b9632:	3101      	adds	r1, #1
   b9634:	4620      	mov	r0, r4
   b9636:	f7ff ffaf 	bl	b9598 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b963a:	9901      	ldr	r1, [sp, #4]
   b963c:	462b      	mov	r3, r5
   b963e:	4642      	mov	r2, r8
   b9640:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b9642:	4620      	mov	r0, r4
   b9644:	f7ff ff85 	bl	b9552 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b9648:	e7e7      	b.n	b961a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b964a:	18f1      	adds	r1, r6, r3
   b964c:	29ff      	cmp	r1, #255	; 0xff
   b964e:	d8e4      	bhi.n	b961a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b9650:	4620      	mov	r0, r4
   b9652:	f7ff ff75 	bl	b9540 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b9656:	2800      	cmp	r0, #0
   b9658:	d0df      	beq.n	b961a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b965a:	1c69      	adds	r1, r5, #1
   b965c:	b2c9      	uxtb	r1, r1
   b965e:	4620      	mov	r0, r4
   b9660:	f7ff ffb4 	bl	b95cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b9664:	4639      	mov	r1, r7
   b9666:	4620      	mov	r0, r4
   b9668:	f7ff ffb0 	bl	b95cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b966c:	6861      	ldr	r1, [r4, #4]
   b966e:	462b      	mov	r3, r5
   b9670:	4642      	mov	r2, r8
   b9672:	e7e6      	b.n	b9642 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b9674 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b9674:	b430      	push	{r4, r5}
   b9676:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b967a:	b11a      	cbz	r2, b9684 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b967c:	9502      	str	r5, [sp, #8]
}
   b967e:	bc30      	pop	{r4, r5}
   b9680:	f7ff bfa8 	b.w	b95d4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b9684:	6840      	ldr	r0, [r0, #4]
}
   b9686:	bc30      	pop	{r4, r5}
   b9688:	4770      	bx	lr

000b968a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b968a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b968c:	2300      	movs	r3, #0
   b968e:	e9c0 3300 	strd	r3, r3, [r0]
   b9692:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b9694:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b9696:	9300      	str	r3, [sp, #0]
   b9698:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b969a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b969e:	4619      	mov	r1, r3
   b96a0:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b96a4:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b96a6:	f7ff ffe5 	bl	b9674 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b96aa:	4620      	mov	r0, r4
   b96ac:	b004      	add	sp, #16
   b96ae:	bd10      	pop	{r4, pc}

000b96b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b96b0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b96b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b96b4:	4604      	mov	r4, r0
   b96b6:	460d      	mov	r5, r1
   b96b8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b96ba:	d914      	bls.n	b96e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b96bc:	4290      	cmp	r0, r2
   b96be:	d213      	bcs.n	b96e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b96c0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b96c4:	1a75      	subs	r5, r6, r1
   b96c6:	f1a1 0708 	sub.w	r7, r1, #8
   b96ca:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b96cc:	42b7      	cmp	r7, r6
   b96ce:	d018      	beq.n	b9702 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b96d0:	b11c      	cbz	r4, b96da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b96d2:	4631      	mov	r1, r6
   b96d4:	4620      	mov	r0, r4
   b96d6:	f7ff fe90 	bl	b93fa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b96da:	1d30      	adds	r0, r6, #4
   b96dc:	f7ff fe97 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b96e0:	3e08      	subs	r6, #8
   b96e2:	3c08      	subs	r4, #8
   b96e4:	e7f2      	b.n	b96cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b96e6:	d00c      	beq.n	b9702 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b96e8:	42b5      	cmp	r5, r6
   b96ea:	d00a      	beq.n	b9702 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b96ec:	b11c      	cbz	r4, b96f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b96ee:	4629      	mov	r1, r5
   b96f0:	4620      	mov	r0, r4
   b96f2:	f7ff fe82 	bl	b93fa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b96f6:	1d28      	adds	r0, r5, #4
   b96f8:	f7ff fe89 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b96fc:	3508      	adds	r5, #8
   b96fe:	3408      	adds	r4, #8
   b9700:	e7f2      	b.n	b96e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b9702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9704 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9706:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b9708:	6846      	ldr	r6, [r0, #4]
   b970a:	4668      	mov	r0, sp
   b970c:	f7ff fe75 	bl	b93fa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9710:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b9714:	429f      	cmp	r7, r3
   b9716:	db12      	blt.n	b973e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b9718:	3701      	adds	r7, #1
        if (n > 0) {
   b971a:	2f00      	cmp	r7, #0
   b971c:	dd29      	ble.n	b9772 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b971e:	00f8      	lsls	r0, r7, #3
   b9720:	f7ff f9d0 	bl	b8ac4 <malloc>
            if (!d) {
   b9724:	4605      	mov	r5, r0
   b9726:	b1f0      	cbz	r0, b9766 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b9728:	e9d4 1200 	ldrd	r1, r2, [r4]
   b972c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9730:	f7ff ffbe 	bl	b96b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9734:	6820      	ldr	r0, [r4, #0]
   b9736:	f7ff f9cd 	bl	b8ad4 <free>
        data_ = d;
   b973a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b973c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b973e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9740:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9742:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b9746:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b974a:	4631      	mov	r1, r6
   b974c:	f106 0008 	add.w	r0, r6, #8
   b9750:	f7ff ffae 	bl	b96b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9754:	b11e      	cbz	r6, b975e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b9756:	4669      	mov	r1, sp
   b9758:	4630      	mov	r0, r6
   b975a:	f7ff fe4e 	bl	b93fa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b975e:	6863      	ldr	r3, [r4, #4]
   b9760:	3301      	adds	r3, #1
   b9762:	6063      	str	r3, [r4, #4]
    return true;
   b9764:	2501      	movs	r5, #1
   b9766:	a801      	add	r0, sp, #4
   b9768:	f7ff fe51 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b976c:	4628      	mov	r0, r5
   b976e:	b003      	add	sp, #12
   b9770:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b9772:	2500      	movs	r5, #0
   b9774:	e7de      	b.n	b9734 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b9776 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b9778:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b977c:	4605      	mov	r5, r0
   b977e:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b9780:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b9784:	42a6      	cmp	r6, r4
   b9786:	d005      	beq.n	b9794 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b9788:	4639      	mov	r1, r7
   b978a:	4620      	mov	r0, r4
   b978c:	f7ff fcff 	bl	b918e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b9790:	b108      	cbz	r0, b9796 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b9792:	b914      	cbnz	r4, b979a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b9794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b9796:	3408      	adds	r4, #8
   b9798:	e7f4      	b.n	b9784 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b979a:	1d20      	adds	r0, r4, #4
   b979c:	f7ff fe37 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b97a0:	e9d5 3200 	ldrd	r3, r2, [r5]
   b97a4:	f104 0108 	add.w	r1, r4, #8
   b97a8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b97ac:	4620      	mov	r0, r4
   b97ae:	f7ff ff7f 	bl	b96b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b97b2:	686b      	ldr	r3, [r5, #4]
   b97b4:	3b01      	subs	r3, #1
   b97b6:	606b      	str	r3, [r5, #4]
    return true;
   b97b8:	e7ec      	b.n	b9794 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b97bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b97bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b97c0:	4605      	mov	r5, r0
   b97c2:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b97c4:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b97c6:	460c      	mov	r4, r1
        WiringBleLock lk;
   b97c8:	f7ff faac 	bl	b8d24 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b97cc:	682e      	ldr	r6, [r5, #0]
   b97ce:	1ef3      	subs	r3, r6, #3
   b97d0:	2b0d      	cmp	r3, #13
   b97d2:	d83c      	bhi.n	b984e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b97d4:	e8df f013 	tbh	[pc, r3, lsl #1]
   b97d8:	0053000e 	.word	0x0053000e
   b97dc:	00d1003b 	.word	0x00d1003b
   b97e0:	003b003b 	.word	0x003b003b
   b97e4:	003b003b 	.word	0x003b003b
   b97e8:	009b003b 	.word	0x009b003b
   b97ec:	009b009b 	.word	0x009b009b
   b97f0:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b97f4:	a804      	add	r0, sp, #16
   b97f6:	f7ff fc95 	bl	b9124 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b97fa:	9b04      	ldr	r3, [sp, #16]
   b97fc:	89aa      	ldrh	r2, [r5, #12]
   b97fe:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b9800:	6869      	ldr	r1, [r5, #4]
   b9802:	9804      	ldr	r0, [sp, #16]
   b9804:	3108      	adds	r1, #8
   b9806:	3002      	adds	r0, #2
   b9808:	f7ff faa6 	bl	b8d58 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b980c:	a904      	add	r1, sp, #16
   b980e:	a806      	add	r0, sp, #24
   b9810:	f7ff fdf3 	bl	b93fa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b9814:	a906      	add	r1, sp, #24
   b9816:	f104 0018 	add.w	r0, r4, #24
   b981a:	f7ff ff73 	bl	b9704 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b981e:	4605      	mov	r5, r0
   b9820:	a807      	add	r0, sp, #28
   b9822:	f7ff fdf4 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9826:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b9828:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b982a:	b9b5      	cbnz	r5, b985a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b982c:	4b5d      	ldr	r3, [pc, #372]	; (b99a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b982e:	495e      	ldr	r1, [pc, #376]	; (b99a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b9830:	9300      	str	r3, [sp, #0]
   b9832:	2032      	movs	r0, #50	; 0x32
   b9834:	462b      	mov	r3, r5
   b9836:	aa06      	add	r2, sp, #24
   b9838:	9507      	str	r5, [sp, #28]
   b983a:	f7ff f89f 	bl	b897c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b983e:	9b04      	ldr	r3, [sp, #16]
   b9840:	4629      	mov	r1, r5
   b9842:	8818      	ldrh	r0, [r3, #0]
   b9844:	f7fe fee8 	bl	b8618 <hal_ble_gap_disconnect>
   b9848:	a805      	add	r0, sp, #20
   b984a:	f7ff fde0 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b984e:	a803      	add	r0, sp, #12
   b9850:	f7ff fa76 	bl	b8d40 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b9854:	b00e      	add	sp, #56	; 0x38
   b9856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b985a:	4a54      	ldr	r2, [pc, #336]	; (b99ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b985c:	9200      	str	r2, [sp, #0]
   b985e:	2300      	movs	r3, #0
   b9860:	4951      	ldr	r1, [pc, #324]	; (b99a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b9862:	9307      	str	r3, [sp, #28]
   b9864:	aa06      	add	r2, sp, #24
   b9866:	2001      	movs	r0, #1
   b9868:	f7ff f888 	bl	b897c <log_message>
                if (impl->connectedCallback_) {
   b986c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b986e:	2b00      	cmp	r3, #0
   b9870:	d0ea      	beq.n	b9848 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b9872:	a904      	add	r1, sp, #16
   b9874:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b9878:	f7ff fe49 	bl	b950e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b987c:	e7e4      	b.n	b9848 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b987e:	89a9      	ldrh	r1, [r5, #12]
   b9880:	4620      	mov	r0, r4
   b9882:	f7ff fba7 	bl	b8fd4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b9886:	4606      	mov	r6, r0
   b9888:	2800      	cmp	r0, #0
   b988a:	d0e0      	beq.n	b984e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b988c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b988e:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b9892:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b9896:	8029      	strh	r1, [r5, #0]
   b9898:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b989c:	429a      	cmp	r2, r3
   b989e:	d003      	beq.n	b98a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b98a0:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b98a4:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b98a6:	e7f9      	b.n	b989c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b98a8:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b98ac:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b98b0:	45b8      	cmp	r8, r7
   b98b2:	d004      	beq.n	b98be <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b98b4:	1d38      	adds	r0, r7, #4
   b98b6:	f7ff fdaa 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b98ba:	3708      	adds	r7, #8
   b98bc:	e7f8      	b.n	b98b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b98be:	2300      	movs	r3, #0
   b98c0:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b98c2:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b98c6:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b98ca:	45b8      	cmp	r8, r7
   b98cc:	d004      	beq.n	b98d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b98ce:	1d38      	adds	r0, r7, #4
   b98d0:	f7ff fd9d 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b98d4:	3708      	adds	r7, #8
   b98d6:	e7f8      	b.n	b98ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b98d8:	2300      	movs	r3, #0
   b98da:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b98dc:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b98de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b98e0:	b123      	cbz	r3, b98ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b98e2:	4631      	mov	r1, r6
   b98e4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b98e8:	f7ff fe11 	bl	b950e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b98ec:	2300      	movs	r3, #0
   b98ee:	2220      	movs	r2, #32
   b98f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b98f4:	4a2e      	ldr	r2, [pc, #184]	; (b99b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b98f6:	9200      	str	r2, [sp, #0]
   b98f8:	492b      	ldr	r1, [pc, #172]	; (b99a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b98fa:	aa06      	add	r2, sp, #24
   b98fc:	2001      	movs	r0, #1
   b98fe:	f7ff f83d 	bl	b897c <log_message>
                    impl->peers_.removeOne(*peer);
   b9902:	4631      	mov	r1, r6
   b9904:	f104 0018 	add.w	r0, r4, #24
   b9908:	f7ff ff35 	bl	b9776 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b990c:	e79f      	b.n	b984e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b990e:	89a9      	ldrh	r1, [r5, #12]
   b9910:	4620      	mov	r0, r4
   b9912:	f7ff fb5f 	bl	b8fd4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b9916:	2800      	cmp	r0, #0
   b9918:	d099      	beq.n	b984e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b991a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b991c:	2b00      	cmp	r3, #0
   b991e:	d096      	beq.n	b984e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b9920:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b9922:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b9924:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b9928:	d001      	beq.n	b992e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b992a:	2e10      	cmp	r6, #16
   b992c:	d117      	bne.n	b995e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b992e:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b9930:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b9932:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b9934:	2506      	movs	r5, #6
                        };
   b9936:	f88d 3015 	strb.w	r3, [sp, #21]
   b993a:	9104      	str	r1, [sp, #16]
   b993c:	f88d 2014 	strb.w	r2, [sp, #20]
   b9940:	9006      	str	r0, [sp, #24]
   b9942:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b9946:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b9948:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b994c:	9508      	str	r5, [sp, #32]
   b994e:	e883 0003 	stmia.w	r3, {r0, r1}
   b9952:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9954:	a906      	add	r1, sp, #24
   b9956:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b995a:	4798      	blx	r3
   b995c:	e777      	b.n	b984e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b995e:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b9960:	bf01      	itttt	eq
   b9962:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b9964:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b9966:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b996a:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b996c:	bf0f      	iteee	eq
   b996e:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b9972:	461a      	movne	r2, r3
   b9974:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b9976:	461d      	movne	r5, r3
   b9978:	e7dd      	b.n	b9936 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b997a:	89a9      	ldrh	r1, [r5, #12]
   b997c:	4620      	mov	r0, r4
   b997e:	f7ff fb29 	bl	b8fd4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b9982:	4601      	mov	r1, r0
   b9984:	2800      	cmp	r0, #0
   b9986:	f43f af62 	beq.w	b984e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b998a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b998c:	2b00      	cmp	r3, #0
   b998e:	f43f af5e 	beq.w	b984e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b9992:	686b      	ldr	r3, [r5, #4]
   b9994:	9306      	str	r3, [sp, #24]
   b9996:	aa06      	add	r2, sp, #24
   b9998:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b999a:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b999e:	4798      	blx	r3
   b99a0:	e755      	b.n	b984e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b99a2:	bf00      	nop
   b99a4:	000be894 	.word	0x000be894
   b99a8:	000be813 	.word	0x000be813
   b99ac:	000be8ba 	.word	0x000be8ba
   b99b0:	000be8d7 	.word	0x000be8d7

000b99b4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b99b4:	b513      	push	{r0, r1, r4, lr}
   b99b6:	460b      	mov	r3, r1
   b99b8:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b99ba:	e9d0 0100 	ldrd	r0, r1, [r0]
   b99be:	466c      	mov	r4, sp
   b99c0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b99c4:	e893 0003 	ldmia.w	r3, {r0, r1}
   b99c8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b99cc:	e894 0003 	ldmia.w	r4, {r0, r1}
   b99d0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b99d4:	b002      	add	sp, #8
   b99d6:	bd10      	pop	{r4, pc}

000b99d8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b99d8:	b538      	push	{r3, r4, r5, lr}
   b99da:	4605      	mov	r5, r0
   b99dc:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b99de:	f7ff ffe9 	bl	b99b4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b99e2:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b99e4:	68a2      	ldr	r2, [r4, #8]
   b99e6:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b99e8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b99ea:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b99ec:	68e2      	ldr	r2, [r4, #12]
   b99ee:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b99f0:	60e3      	str	r3, [r4, #12]
      }
   b99f2:	bd38      	pop	{r3, r4, r5, pc}

000b99f4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b99f4:	b570      	push	{r4, r5, r6, lr}
   b99f6:	4604      	mov	r4, r0
   b99f8:	b08c      	sub	sp, #48	; 0x30
   b99fa:	460e      	mov	r6, r1
   b99fc:	9201      	str	r2, [sp, #4]
   b99fe:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b9a00:	f7ff fac8 	bl	b8f94 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b9a04:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b9a06:	9901      	ldr	r1, [sp, #4]
   b9a08:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b9a0c:	f000 fd8b 	bl	ba526 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b9a10:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b9a14:	b1cd      	cbz	r5, b9a4a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b9a16:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b9a18:	9502      	str	r5, [sp, #8]
   b9a1a:	a902      	add	r1, sp, #8
   b9a1c:	a804      	add	r0, sp, #16
   b9a1e:	9303      	str	r3, [sp, #12]
   b9a20:	f7ff fcb4 	bl	b938c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b9a24:	2300      	movs	r3, #0
	__x.swap(*this);
   b9a26:	a908      	add	r1, sp, #32
   b9a28:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b9a2a:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b9a2c:	f7ff ffd4 	bl	b99d8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b9a30:	4631      	mov	r1, r6
   b9a32:	a808      	add	r0, sp, #32
   b9a34:	f7ff ffd0 	bl	b99d8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b9a38:	a808      	add	r0, sp, #32
   b9a3a:	f7ff f935 	bl	b8ca8 <_ZNSt14_Function_baseD1Ev>
   b9a3e:	a804      	add	r0, sp, #16
   b9a40:	f7ff f932 	bl	b8ca8 <_ZNSt14_Function_baseD1Ev>
    }
   b9a44:	4620      	mov	r0, r4
   b9a46:	b00c      	add	sp, #48	; 0x30
   b9a48:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b9a4a:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b9a4c:	e7ea      	b.n	b9a24 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b9a50 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b9a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9a54:	b087      	sub	sp, #28
   b9a56:	461d      	mov	r5, r3
   b9a58:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b9a5c:	4680      	mov	r8, r0
   b9a5e:	468b      	mov	fp, r1
   b9a60:	4692      	mov	sl, r2
   b9a62:	9912      	ldr	r1, [sp, #72]	; 0x48
   b9a64:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9a66:	2200      	movs	r2, #0
   b9a68:	2068      	movs	r0, #104	; 0x68
   b9a6a:	9102      	str	r1, [sp, #8]
   b9a6c:	9204      	str	r2, [sp, #16]
   b9a6e:	f7fa fb12 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9a72:	1e06      	subs	r6, r0, #0
   b9a74:	f106 090c 	add.w	r9, r6, #12
   b9a78:	d018      	beq.n	b9aac <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b9a7a:	2201      	movs	r2, #1
	: _M_impl(__a)
   b9a7c:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b9a7e:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b9a82:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b9a84:	4a15      	ldr	r2, [pc, #84]	; (b9adc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b9a86:	f847 2b20 	str.w	r2, [r7], #32
   b9a8a:	9b03      	ldr	r3, [sp, #12]
   b9a8c:	9100      	str	r1, [sp, #0]
   b9a8e:	465a      	mov	r2, fp
   b9a90:	4651      	mov	r1, sl
   b9a92:	4648      	mov	r0, r9
   b9a94:	f7ff ffae 	bl	b99f4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b9a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9a9a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b9a9c:	682b      	ldr	r3, [r5, #0]
   b9a9e:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b9aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9aa2:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b9aa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9aa8:	6823      	ldr	r3, [r4, #0]
   b9aaa:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b9aac:	a904      	add	r1, sp, #16
   b9aae:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b9ab0:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b9ab4:	f7ff fd1a 	bl	b94ec <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b9ab8:	a805      	add	r0, sp, #20
   b9aba:	f7ff fca8 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b9abe:	f8d8 3000 	ldr.w	r3, [r8]
   b9ac2:	b93b      	cbnz	r3, b9ad4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b9ac4:	4a06      	ldr	r2, [pc, #24]	; (b9ae0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b9ac6:	4907      	ldr	r1, [pc, #28]	; (b9ae4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b9ac8:	200a      	movs	r0, #10
}
   b9aca:	b007      	add	sp, #28
   b9acc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b9ad0:	f7fe bf4c 	b.w	b896c <panic_>
}
   b9ad4:	b007      	add	sp, #28
   b9ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9ada:	bf00      	nop
   b9adc:	000be950 	.word	0x000be950
   b9ae0:	000b870d 	.word	0x000b870d
   b9ae4:	000be7fc 	.word	0x000be7fc

000b9ae8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9ae8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9aec:	4604      	mov	r4, r0
   b9aee:	460d      	mov	r5, r1
   b9af0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9af2:	d914      	bls.n	b9b1e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9af4:	4290      	cmp	r0, r2
   b9af6:	d213      	bcs.n	b9b20 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9af8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b9afc:	1a75      	subs	r5, r6, r1
   b9afe:	f1a1 0708 	sub.w	r7, r1, #8
   b9b02:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9b04:	42b7      	cmp	r7, r6
   b9b06:	d018      	beq.n	b9b3a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9b08:	b11c      	cbz	r4, b9b12 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9b0a:	4631      	mov	r1, r6
   b9b0c:	4620      	mov	r0, r4
   b9b0e:	f7ff fc6a 	bl	b93e6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9b12:	1d30      	adds	r0, r6, #4
   b9b14:	f7ff fc7b 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b9b18:	3e08      	subs	r6, #8
   b9b1a:	3c08      	subs	r4, #8
   b9b1c:	e7f2      	b.n	b9b04 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b9b1e:	d00c      	beq.n	b9b3a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b9b20:	42b5      	cmp	r5, r6
   b9b22:	d00a      	beq.n	b9b3a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9b24:	b11c      	cbz	r4, b9b2e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9b26:	4629      	mov	r1, r5
   b9b28:	4620      	mov	r0, r4
   b9b2a:	f7ff fc5c 	bl	b93e6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9b2e:	1d28      	adds	r0, r5, #4
   b9b30:	f7ff fc6d 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9b34:	3508      	adds	r5, #8
   b9b36:	3408      	adds	r4, #8
   b9b38:	e7f2      	b.n	b9b20 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b9b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9b3c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b9b3c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b9b3e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9b40:	4605      	mov	r5, r0
        if (n > 0) {
   b9b42:	dd11      	ble.n	b9b68 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9b44:	00f0      	lsls	r0, r6, #3
   b9b46:	f7fe ffbd 	bl	b8ac4 <malloc>
            if (!d) {
   b9b4a:	4604      	mov	r4, r0
   b9b4c:	b158      	cbz	r0, b9b66 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b9b4e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9b52:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9b56:	f7ff ffc7 	bl	b9ae8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9b5a:	6828      	ldr	r0, [r5, #0]
   b9b5c:	f7fe ffba 	bl	b8ad4 <free>
        data_ = d;
   b9b60:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9b62:	60ae      	str	r6, [r5, #8]
        return true;
   b9b64:	2001      	movs	r0, #1
    }
   b9b66:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9b68:	2400      	movs	r4, #0
   b9b6a:	e7f6      	b.n	b9b5a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b9b6c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9b6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9b6e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b9b70:	6845      	ldr	r5, [r0, #4]
   b9b72:	4668      	mov	r0, sp
   b9b74:	f7ff fc37 	bl	b93e6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9b78:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b9b7c:	4299      	cmp	r1, r3
   b9b7e:	da10      	bge.n	b9ba2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b9b80:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9b82:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9b84:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b9b88:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b9b8c:	4629      	mov	r1, r5
   b9b8e:	f105 0008 	add.w	r0, r5, #8
   b9b92:	f7ff ffa9 	bl	b9ae8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9b96:	b98d      	cbnz	r5, b9bbc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b9b98:	6863      	ldr	r3, [r4, #4]
   b9b9a:	3301      	adds	r3, #1
   b9b9c:	6063      	str	r3, [r4, #4]
    return true;
   b9b9e:	2601      	movs	r6, #1
   b9ba0:	e006      	b.n	b9bb0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9ba2:	3101      	adds	r1, #1
   b9ba4:	4620      	mov	r0, r4
   b9ba6:	f7ff ffc9 	bl	b9b3c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9baa:	4606      	mov	r6, r0
   b9bac:	2800      	cmp	r0, #0
   b9bae:	d1e7      	bne.n	b9b80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b9bb0:	a801      	add	r0, sp, #4
   b9bb2:	f7ff fc2c 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9bb6:	4630      	mov	r0, r6
   b9bb8:	b002      	add	sp, #8
   b9bba:	bd70      	pop	{r4, r5, r6, pc}
   b9bbc:	4669      	mov	r1, sp
   b9bbe:	4628      	mov	r0, r5
   b9bc0:	f7ff fc11 	bl	b93e6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9bc4:	e7e8      	b.n	b9b98 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9bc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9bc6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9bca:	4604      	mov	r4, r0
   b9bcc:	460d      	mov	r5, r1
   b9bce:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9bd0:	d914      	bls.n	b9bfc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9bd2:	4290      	cmp	r0, r2
   b9bd4:	d213      	bcs.n	b9bfe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9bd6:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b9bda:	1a75      	subs	r5, r6, r1
   b9bdc:	f1a1 0708 	sub.w	r7, r1, #8
   b9be0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9be2:	42b7      	cmp	r7, r6
   b9be4:	d018      	beq.n	b9c18 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9be6:	b11c      	cbz	r4, b9bf0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b9be8:	4631      	mov	r1, r6
   b9bea:	4620      	mov	r0, r4
   b9bec:	f7ff fbed 	bl	b93ca <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9bf0:	1d30      	adds	r0, r6, #4
   b9bf2:	f7ff fc0c 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b9bf6:	3e08      	subs	r6, #8
   b9bf8:	3c08      	subs	r4, #8
   b9bfa:	e7f2      	b.n	b9be2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b9bfc:	d00c      	beq.n	b9c18 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b9bfe:	42b5      	cmp	r5, r6
   b9c00:	d00a      	beq.n	b9c18 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9c02:	b11c      	cbz	r4, b9c0c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9c04:	4629      	mov	r1, r5
   b9c06:	4620      	mov	r0, r4
   b9c08:	f7ff fbdf 	bl	b93ca <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9c0c:	1d28      	adds	r0, r5, #4
   b9c0e:	f7ff fbfe 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9c12:	3508      	adds	r5, #8
   b9c14:	3408      	adds	r4, #8
   b9c16:	e7f2      	b.n	b9bfe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b9c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9c1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b9c1a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b9c1c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9c1e:	4605      	mov	r5, r0
        if (n > 0) {
   b9c20:	dd11      	ble.n	b9c46 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9c22:	00f0      	lsls	r0, r6, #3
   b9c24:	f7fe ff4e 	bl	b8ac4 <malloc>
            if (!d) {
   b9c28:	4604      	mov	r4, r0
   b9c2a:	b158      	cbz	r0, b9c44 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b9c2c:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9c30:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9c34:	f7ff ffc7 	bl	b9bc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b9c38:	6828      	ldr	r0, [r5, #0]
   b9c3a:	f7fe ff4b 	bl	b8ad4 <free>
        data_ = d;
   b9c3e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9c40:	60ae      	str	r6, [r5, #8]
        return true;
   b9c42:	2001      	movs	r0, #1
    }
   b9c44:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9c46:	2400      	movs	r4, #0
   b9c48:	e7f6      	b.n	b9c38 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b9c4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9c4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9c4c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b9c4e:	6845      	ldr	r5, [r0, #4]
   b9c50:	4668      	mov	r0, sp
   b9c52:	f7ff fbba 	bl	b93ca <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9c56:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b9c5a:	4299      	cmp	r1, r3
   b9c5c:	da10      	bge.n	b9c80 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b9c5e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9c60:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9c62:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b9c66:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b9c6a:	4629      	mov	r1, r5
   b9c6c:	f105 0008 	add.w	r0, r5, #8
   b9c70:	f7ff ffa9 	bl	b9bc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9c74:	b98d      	cbnz	r5, b9c9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b9c76:	6863      	ldr	r3, [r4, #4]
   b9c78:	3301      	adds	r3, #1
   b9c7a:	6063      	str	r3, [r4, #4]
    return true;
   b9c7c:	2601      	movs	r6, #1
   b9c7e:	e006      	b.n	b9c8e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9c80:	3101      	adds	r1, #1
   b9c82:	4620      	mov	r0, r4
   b9c84:	f7ff ffc9 	bl	b9c1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9c88:	4606      	mov	r6, r0
   b9c8a:	2800      	cmp	r0, #0
   b9c8c:	d1e7      	bne.n	b9c5e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b9c8e:	a801      	add	r0, sp, #4
   b9c90:	f7ff fbbd 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9c94:	4630      	mov	r0, r6
   b9c96:	b002      	add	sp, #8
   b9c98:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b9c9a:	4669      	mov	r1, sp
   b9c9c:	4628      	mov	r0, r5
   b9c9e:	f7ff fb94 	bl	b93ca <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9ca2:	e7e8      	b.n	b9c76 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9ca4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9ca8:	4617      	mov	r7, r2
   b9caa:	b0a1      	sub	sp, #132	; 0x84
   b9cac:	4680      	mov	r8, r0
    WiringBleLock lk;
   b9cae:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9cb0:	460e      	mov	r6, r1
    WiringBleLock lk;
   b9cb2:	f7ff f837 	bl	b8d24 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b9cb6:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b9cb8:	7923      	ldrb	r3, [r4, #4]
   b9cba:	b953      	cbnz	r3, b9cd2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b9cbc:	4639      	mov	r1, r7
   b9cbe:	4640      	mov	r0, r8
   b9cc0:	f7ff fb83 	bl	b93ca <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b9cc4:	a80a      	add	r0, sp, #40	; 0x28
   b9cc6:	f7ff f83b 	bl	b8d40 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b9cca:	4640      	mov	r0, r8
   b9ccc:	b021      	add	sp, #132	; 0x84
   b9cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b9cd2:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b9cd4:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b9cd8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b9cdc:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b9cde:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b9ce2:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b9ce6:	9b03      	ldr	r3, [sp, #12]
   b9ce8:	429d      	cmp	r5, r3
   b9cea:	d021      	beq.n	b9d30 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b9cec:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b9cf0:	4658      	mov	r0, fp
   b9cf2:	f109 0114 	add.w	r1, r9, #20
   b9cf6:	f7ff f8c2 	bl	b8e7e <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b9cfa:	b1b8      	cbz	r0, b9d2c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b9cfc:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b9d00:	4650      	mov	r0, sl
   b9d02:	f7ff f8bc 	bl	b8e7e <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b9d06:	b188      	cbz	r0, b9d2c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b9d08:	6823      	ldr	r3, [r4, #0]
   b9d0a:	f8d9 2000 	ldr.w	r2, [r9]
   b9d0e:	4053      	eors	r3, r2
   b9d10:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b9d14:	d10a      	bne.n	b9d2c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b9d16:	2220      	movs	r2, #32
   b9d18:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b9d1c:	4a5e      	ldr	r2, [pc, #376]	; (b9e98 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b9d1e:	9200      	str	r2, [sp, #0]
   b9d20:	aa15      	add	r2, sp, #84	; 0x54
   b9d22:	495e      	ldr	r1, [pc, #376]	; (b9e9c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b9d24:	2032      	movs	r0, #50	; 0x32
   b9d26:	f7fe fe29 	bl	b897c <log_message>
   b9d2a:	e7c7      	b.n	b9cbc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b9d2c:	3508      	adds	r5, #8
   b9d2e:	e7da      	b.n	b9ce6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b9d30:	4650      	mov	r0, sl
   b9d32:	f7ff f875 	bl	b8e20 <_ZNK8particle7BleUuid7isValidEv>
   b9d36:	b960      	cbnz	r0, b9d52 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b9d38:	4959      	ldr	r1, [pc, #356]	; (b9ea0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b9d3a:	2201      	movs	r2, #1
   b9d3c:	a815      	add	r0, sp, #84	; 0x54
   b9d3e:	ad15      	add	r5, sp, #84	; 0x54
   b9d40:	f7ff f846 	bl	b8dd0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b9d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9d46:	46d4      	mov	ip, sl
   b9d48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b9d4c:	682b      	ldr	r3, [r5, #0]
   b9d4e:	f8cc 3000 	str.w	r3, [ip]
   b9d52:	6833      	ldr	r3, [r6, #0]
   b9d54:	e9d3 5300 	ldrd	r5, r3, [r3]
   b9d58:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b9d5c:	455d      	cmp	r5, fp
   b9d5e:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b9d60:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b9d62:	d06e      	beq.n	b9e42 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b9d64:	f855 0b08 	ldr.w	r0, [r5], #8
   b9d68:	f7ff f889 	bl	b8e7e <_ZNK8particle7BleUuideqERKS0_>
   b9d6c:	2800      	cmp	r0, #0
   b9d6e:	d0f5      	beq.n	b9d5c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b9d70:	f104 0a14 	add.w	sl, r4, #20
   b9d74:	4650      	mov	r0, sl
   b9d76:	f7ff f853 	bl	b8e20 <_ZNK8particle7BleUuid7isValidEv>
   b9d7a:	b988      	cbnz	r0, b9da0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b9d7c:	4b49      	ldr	r3, [pc, #292]	; (b9ea4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9d7e:	4948      	ldr	r1, [pc, #288]	; (b9ea0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b9d80:	881a      	ldrh	r2, [r3, #0]
   b9d82:	3201      	adds	r2, #1
   b9d84:	b292      	uxth	r2, r2
   b9d86:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9d88:	a815      	add	r0, sp, #84	; 0x54
   b9d8a:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b9d8c:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9d8e:	f7ff f83e 	bl	b8e0e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b9d92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9d94:	46d4      	mov	ip, sl
   b9d96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b9d9a:	682b      	ldr	r3, [r5, #0]
   b9d9c:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b9da0:	4b41      	ldr	r3, [pc, #260]	; (b9ea8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b9da2:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b9da4:	2228      	movs	r2, #40	; 0x28
   b9da6:	2100      	movs	r1, #0
   b9da8:	a816      	add	r0, sp, #88	; 0x58
   b9daa:	f002 fa19 	bl	bc1e0 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b9dae:	4651      	mov	r1, sl
   b9db0:	a804      	add	r0, sp, #16
   b9db2:	f7ff f847 	bl	b8e44 <_ZN8particle7BleUuid7halUUIDEv>
   b9db6:	ab04      	add	r3, sp, #16
   b9db8:	aa18      	add	r2, sp, #96	; 0x60
   b9dba:	f10d 0c20 	add.w	ip, sp, #32
   b9dbe:	6818      	ldr	r0, [r3, #0]
   b9dc0:	6859      	ldr	r1, [r3, #4]
   b9dc2:	4615      	mov	r5, r2
   b9dc4:	c503      	stmia	r5!, {r0, r1}
   b9dc6:	3308      	adds	r3, #8
   b9dc8:	4563      	cmp	r3, ip
   b9dca:	462a      	mov	r2, r5
   b9dcc:	d1f7      	bne.n	b9dbe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b9dce:	6818      	ldr	r0, [r3, #0]
   b9dd0:	6028      	str	r0, [r5, #0]
    return value_;
   b9dd2:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b9dd4:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b9dd8:	f8d9 3000 	ldr.w	r3, [r9]
   b9ddc:	8a9b      	ldrh	r3, [r3, #20]
   b9dde:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b9de2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b9de4:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b9de6:	4b31      	ldr	r3, [pc, #196]	; (b9eac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b9de8:	2200      	movs	r2, #0
   b9dea:	1da1      	adds	r1, r4, #6
   b9dec:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b9dee:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b9df2:	f7fe fc43 	bl	b867c <hal_ble_gatt_server_add_characteristic>
   b9df6:	2800      	cmp	r0, #0
   b9df8:	f47f af60 	bne.w	b9cbc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b9dfc:	2301      	movs	r3, #1
   b9dfe:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b9e00:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b9e02:	4639      	mov	r1, r7
        return characteristics_;
   b9e04:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b9e06:	a80d      	add	r0, sp, #52	; 0x34
   b9e08:	f7ff fadf 	bl	b93ca <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9e0c:	4620      	mov	r0, r4
   b9e0e:	a90d      	add	r1, sp, #52	; 0x34
   b9e10:	f7ff ff1b 	bl	b9c4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b9e14:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b9e16:	a80e      	add	r0, sp, #56	; 0x38
   b9e18:	f7ff faf9 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9e1c:	2c00      	cmp	r4, #0
   b9e1e:	f47f af4d 	bne.w	b9cbc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b9e22:	2320      	movs	r3, #32
   b9e24:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b9e28:	4b21      	ldr	r3, [pc, #132]	; (b9eb0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b9e2a:	9300      	str	r3, [sp, #0]
   b9e2c:	aa0d      	add	r2, sp, #52	; 0x34
   b9e2e:	4623      	mov	r3, r4
   b9e30:	e777      	b.n	b9d22 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b9e32:	4639      	mov	r1, r7
   b9e34:	4640      	mov	r0, r8
   b9e36:	f7ff fac8 	bl	b93ca <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9e3a:	a80c      	add	r0, sp, #48	; 0x30
   b9e3c:	f7ff fae7 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9e40:	e740      	b.n	b9cc4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b9e42:	a80b      	add	r0, sp, #44	; 0x2c
   b9e44:	f7ff f94a 	bl	b90dc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b9e48:	4651      	mov	r1, sl
   b9e4a:	a815      	add	r0, sp, #84	; 0x54
   b9e4c:	f7fe fffa 	bl	b8e44 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b9e50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9e52:	2300      	movs	r3, #0
   b9e54:	3214      	adds	r2, #20
   b9e56:	a915      	add	r1, sp, #84	; 0x54
   b9e58:	2001      	movs	r0, #1
   b9e5a:	f7fe fbe7 	bl	b862c <hal_ble_gatt_server_add_service>
   b9e5e:	2800      	cmp	r0, #0
   b9e60:	d1e7      	bne.n	b9e32 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b9e62:	6835      	ldr	r5, [r6, #0]
   b9e64:	a90b      	add	r1, sp, #44	; 0x2c
   b9e66:	a80d      	add	r0, sp, #52	; 0x34
   b9e68:	f7ff fabd 	bl	b93e6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b9e6c:	4628      	mov	r0, r5
   b9e6e:	a90d      	add	r1, sp, #52	; 0x34
   b9e70:	f7ff fe7c 	bl	b9b6c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b9e74:	4605      	mov	r5, r0
   b9e76:	a80e      	add	r0, sp, #56	; 0x38
   b9e78:	f7ff fac9 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9e7c:	2d00      	cmp	r5, #0
   b9e7e:	d0d8      	beq.n	b9e32 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b9e80:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b9e82:	6853      	ldr	r3, [r2, #4]
   b9e84:	6812      	ldr	r2, [r2, #0]
   b9e86:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b9e8a:	3b01      	subs	r3, #1
   b9e8c:	a80c      	add	r0, sp, #48	; 0x30
   b9e8e:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b9e92:	f7ff fabc 	bl	b940e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9e96:	e76b      	b.n	b9d70 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b9e98:	000be8f6 	.word	0x000be8f6
   b9e9c:	000be813 	.word	0x000be813
   b9ea0:	000be9ba 	.word	0x000be9ba
   b9ea4:	2003e6bc 	.word	0x2003e6bc
   b9ea8:	002c0003 	.word	0x002c0003
   b9eac:	000b9275 	.word	0x000b9275
   b9eb0:	000be921 	.word	0x000be921

000b9eb4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b9eb4:	4802      	ldr	r0, [pc, #8]	; (b9ec0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b9eb6:	2300      	movs	r3, #0
   b9eb8:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b9eba:	f7fe bc07 	b.w	b86cc <os_mutex_recursive_create>
   b9ebe:	bf00      	nop
   b9ec0:	2003e6c0 	.word	0x2003e6c0

000b9ec4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9ec4:	2200      	movs	r2, #0
   b9ec6:	6840      	ldr	r0, [r0, #4]
   b9ec8:	4611      	mov	r1, r2
   b9eca:	f7fe bdc3 	b.w	b8a54 <network_listening>

000b9ece <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9ece:	2200      	movs	r2, #0
   b9ed0:	6840      	ldr	r0, [r0, #4]
   b9ed2:	4611      	mov	r1, r2
   b9ed4:	f7fe bdde 	b.w	b8a94 <network_get_listen_timeout>

000b9ed8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9ed8:	6840      	ldr	r0, [r0, #4]
   b9eda:	2200      	movs	r2, #0
   b9edc:	f7fe bdd2 	b.w	b8a84 <network_set_listen_timeout>

000b9ee0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9ee0:	6840      	ldr	r0, [r0, #4]
   b9ee2:	2200      	movs	r2, #0
   b9ee4:	f081 0101 	eor.w	r1, r1, #1
   b9ee8:	f7fe bdac 	b.w	b8a44 <network_listen>

000b9eec <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9eec:	2300      	movs	r3, #0
   b9eee:	6840      	ldr	r0, [r0, #4]
   b9ef0:	461a      	mov	r2, r3
   b9ef2:	4619      	mov	r1, r3
   b9ef4:	f7fe bd9e 	b.w	b8a34 <network_off>

000b9ef8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9ef8:	2300      	movs	r3, #0
   b9efa:	6840      	ldr	r0, [r0, #4]
   b9efc:	461a      	mov	r2, r3
   b9efe:	4619      	mov	r1, r3
   b9f00:	f7fe bd90 	b.w	b8a24 <network_on>

000b9f04 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b9f04:	2200      	movs	r2, #0
   b9f06:	6840      	ldr	r0, [r0, #4]
   b9f08:	4611      	mov	r1, r2
   b9f0a:	f7fe bd83 	b.w	b8a14 <network_ready>

000b9f0e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9f0e:	2200      	movs	r2, #0
   b9f10:	6840      	ldr	r0, [r0, #4]
   b9f12:	4611      	mov	r1, r2
   b9f14:	f7fe bd6e 	b.w	b89f4 <network_connecting>

000b9f18 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9f18:	6840      	ldr	r0, [r0, #4]
   b9f1a:	2200      	movs	r2, #0
   b9f1c:	2102      	movs	r1, #2
   b9f1e:	f7fe bd71 	b.w	b8a04 <network_disconnect>

000b9f22 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9f22:	2300      	movs	r3, #0
   b9f24:	6840      	ldr	r0, [r0, #4]
   b9f26:	461a      	mov	r2, r3
   b9f28:	f7fe bd5c 	b.w	b89e4 <network_connect>

000b9f2c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b9f2c:	4b02      	ldr	r3, [pc, #8]	; (b9f38 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b9f2e:	2203      	movs	r2, #3
   b9f30:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b9f32:	4a02      	ldr	r2, [pc, #8]	; (b9f3c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b9f34:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b9f36:	4770      	bx	lr
   b9f38:	2003e6c8 	.word	0x2003e6c8
   b9f3c:	000be9e4 	.word	0x000be9e4

000b9f40 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9f40:	4770      	bx	lr

000b9f42 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9f44:	4606      	mov	r6, r0
   b9f46:	4615      	mov	r5, r2
   b9f48:	460c      	mov	r4, r1
   b9f4a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b9f4c:	42bc      	cmp	r4, r7
   b9f4e:	d006      	beq.n	b9f5e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9f50:	6833      	ldr	r3, [r6, #0]
   b9f52:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9f56:	689b      	ldr	r3, [r3, #8]
   b9f58:	4630      	mov	r0, r6
   b9f5a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b9f5c:	e7f6      	b.n	b9f4c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b9f5e:	4628      	mov	r0, r5
   b9f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9f62 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b9f62:	7c00      	ldrb	r0, [r0, #16]
   b9f64:	2200      	movs	r2, #0
   b9f66:	f7fe bbf9 	b.w	b875c <hal_i2c_write>

000b9f6a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b9f6a:	7c00      	ldrb	r0, [r0, #16]
   b9f6c:	2100      	movs	r1, #0
   b9f6e:	f7fe bbfd 	b.w	b876c <hal_i2c_available>

000b9f72 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b9f72:	7c00      	ldrb	r0, [r0, #16]
   b9f74:	2100      	movs	r1, #0
   b9f76:	f7fe bc01 	b.w	b877c <hal_i2c_read>

000b9f7a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b9f7a:	7c00      	ldrb	r0, [r0, #16]
   b9f7c:	2100      	movs	r1, #0
   b9f7e:	f7fe bc05 	b.w	b878c <hal_i2c_peek>

000b9f82 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b9f82:	7c00      	ldrb	r0, [r0, #16]
   b9f84:	2100      	movs	r1, #0
   b9f86:	f7fe bc09 	b.w	b879c <hal_i2c_flush>

000b9f8a <_ZN7TwoWireD0Ev>:
   b9f8a:	b510      	push	{r4, lr}
   b9f8c:	2114      	movs	r1, #20
   b9f8e:	4604      	mov	r4, r0
   b9f90:	f7fa f887 	bl	b40a2 <_ZdlPvj>
   b9f94:	4620      	mov	r0, r4
   b9f96:	bd10      	pop	{r4, pc}

000b9f98 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9f98:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b9f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9f9e:	4604      	mov	r4, r0
   b9fa0:	4608      	mov	r0, r1
   b9fa2:	2100      	movs	r1, #0
   b9fa4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9fa8:	4b03      	ldr	r3, [pc, #12]	; (b9fb8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b9faa:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b9fac:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b9fae:	4611      	mov	r1, r2
   b9fb0:	f7fe fbfc 	bl	b87ac <hal_i2c_init>
}
   b9fb4:	4620      	mov	r0, r4
   b9fb6:	bd10      	pop	{r4, pc}
   b9fb8:	000bea20 	.word	0x000bea20

000b9fbc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b9fbc:	2300      	movs	r3, #0
   b9fbe:	7c00      	ldrb	r0, [r0, #16]
   b9fc0:	461a      	mov	r2, r3
   b9fc2:	4619      	mov	r1, r3
   b9fc4:	f7fe bbb2 	b.w	b872c <hal_i2c_begin>

000b9fc8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b9fc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b9fca:	2200      	movs	r2, #0
   b9fcc:	2314      	movs	r3, #20
   b9fce:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b9fd2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b9fd6:	780b      	ldrb	r3, [r1, #0]
   b9fd8:	f88d 3008 	strb.w	r3, [sp, #8]
   b9fdc:	684b      	ldr	r3, [r1, #4]
   b9fde:	9303      	str	r3, [sp, #12]
   b9fe0:	68cb      	ldr	r3, [r1, #12]
   b9fe2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b9fe4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b9fe6:	7a0b      	ldrb	r3, [r1, #8]
   b9fe8:	9305      	str	r3, [sp, #20]
   b9fea:	a901      	add	r1, sp, #4
   b9fec:	f7fe fbe6 	bl	b87bc <hal_i2c_request_ex>
}
   b9ff0:	b007      	add	sp, #28
   b9ff2:	f85d fb04 	ldr.w	pc, [sp], #4

000b9ff6 <_ZN7TwoWire11requestFromEhjh>:
{
   b9ff6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b9ff8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b9ffa:	f88d 1000 	strb.w	r1, [sp]
   b9ffe:	f04f 0164 	mov.w	r1, #100	; 0x64
   ba002:	9103      	str	r1, [sp, #12]
   ba004:	bf18      	it	ne
   ba006:	2301      	movne	r3, #1
   ba008:	4669      	mov	r1, sp
    size_ = size;
   ba00a:	9201      	str	r2, [sp, #4]
   ba00c:	f88d 3008 	strb.w	r3, [sp, #8]
   ba010:	f7ff ffda 	bl	b9fc8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   ba014:	b005      	add	sp, #20
   ba016:	f85d fb04 	ldr.w	pc, [sp], #4

000ba01a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   ba01a:	2301      	movs	r3, #1
   ba01c:	f7ff bfeb 	b.w	b9ff6 <_ZN7TwoWire11requestFromEhjh>

000ba020 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   ba020:	7c00      	ldrb	r0, [r0, #16]
   ba022:	2200      	movs	r2, #0
   ba024:	f7fe bb8a 	b.w	b873c <hal_i2c_begin_transmission>

000ba028 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   ba028:	b2c9      	uxtb	r1, r1
   ba02a:	f7ff bff9 	b.w	ba020 <_ZN7TwoWire17beginTransmissionEh>

000ba02e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   ba02e:	7c00      	ldrb	r0, [r0, #16]
   ba030:	2200      	movs	r2, #0
   ba032:	f7fe bb8b 	b.w	b874c <hal_i2c_end_transmission>

000ba036 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   ba036:	2101      	movs	r1, #1
   ba038:	f7ff bff9 	b.w	ba02e <_ZN7TwoWire15endTransmissionEh>

000ba03c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   ba03c:	4770      	bx	lr

000ba03e <_ZN9IPAddressD0Ev>:
   ba03e:	b510      	push	{r4, lr}
   ba040:	2118      	movs	r1, #24
   ba042:	4604      	mov	r4, r0
   ba044:	f7fa f82d 	bl	b40a2 <_ZdlPvj>
   ba048:	4620      	mov	r0, r4
   ba04a:	bd10      	pop	{r4, pc}

000ba04c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   ba04c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   ba04e:	7d03      	ldrb	r3, [r0, #20]
   ba050:	2b06      	cmp	r3, #6
{
   ba052:	b08d      	sub	sp, #52	; 0x34
   ba054:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba056:	f100 0704 	add.w	r7, r0, #4
   ba05a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   ba05e:	d012      	beq.n	ba086 <_ZNK9IPAddress7printToER5Print+0x3a>
   ba060:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   ba064:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   ba068:	220a      	movs	r2, #10
   ba06a:	4630      	mov	r0, r6
   ba06c:	f000 f973 	bl	ba356 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   ba070:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   ba072:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   ba074:	d019      	beq.n	ba0aa <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   ba076:	2c00      	cmp	r4, #0
   ba078:	d0f4      	beq.n	ba064 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   ba07a:	212e      	movs	r1, #46	; 0x2e
   ba07c:	4630      	mov	r0, r6
   ba07e:	f000 f951 	bl	ba324 <_ZN5Print5printEc>
   ba082:	4404      	add	r4, r0
   ba084:	e7ee      	b.n	ba064 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba086:	232f      	movs	r3, #47	; 0x2f
   ba088:	466a      	mov	r2, sp
   ba08a:	4639      	mov	r1, r7
   ba08c:	200a      	movs	r0, #10
		buf[0] = 0;
   ba08e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba092:	f7fe fba3 	bl	b87dc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   ba096:	4668      	mov	r0, sp
   ba098:	f002 f8ea 	bl	bc270 <strlen>
   ba09c:	6833      	ldr	r3, [r6, #0]
   ba09e:	4602      	mov	r2, r0
   ba0a0:	68db      	ldr	r3, [r3, #12]
   ba0a2:	4669      	mov	r1, sp
   ba0a4:	4630      	mov	r0, r6
   ba0a6:	4798      	blx	r3
   ba0a8:	4604      	mov	r4, r0
    }
    return n;
}
   ba0aa:	4620      	mov	r0, r4
   ba0ac:	b00d      	add	sp, #52	; 0x34
   ba0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba0b0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   ba0b0:	b510      	push	{r4, lr}
   ba0b2:	4b05      	ldr	r3, [pc, #20]	; (ba0c8 <_ZN9IPAddressC1Ev+0x18>)
   ba0b4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   ba0b6:	2211      	movs	r2, #17
   ba0b8:	f840 3b04 	str.w	r3, [r0], #4
   ba0bc:	2100      	movs	r1, #0
   ba0be:	f002 f88f 	bl	bc1e0 <memset>
}
   ba0c2:	4620      	mov	r0, r4
   ba0c4:	bd10      	pop	{r4, pc}
   ba0c6:	bf00      	nop
   ba0c8:	000bea48 	.word	0x000bea48

000ba0cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   ba0cc:	4603      	mov	r3, r0
   ba0ce:	4a07      	ldr	r2, [pc, #28]	; (ba0ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   ba0d0:	b510      	push	{r4, lr}
   ba0d2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   ba0d6:	f101 0210 	add.w	r2, r1, #16
   ba0da:	f851 4b04 	ldr.w	r4, [r1], #4
   ba0de:	f843 4b04 	str.w	r4, [r3], #4
   ba0e2:	4291      	cmp	r1, r2
   ba0e4:	d1f9      	bne.n	ba0da <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   ba0e6:	780a      	ldrb	r2, [r1, #0]
   ba0e8:	701a      	strb	r2, [r3, #0]
}
   ba0ea:	bd10      	pop	{r4, pc}
   ba0ec:	000bea48 	.word	0x000bea48

000ba0f0 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   ba0f0:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   ba0f2:	2b04      	cmp	r3, #4
   ba0f4:	d104      	bne.n	ba100 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   ba0f6:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   ba0f8:	3800      	subs	r0, #0
   ba0fa:	bf18      	it	ne
   ba0fc:	2001      	movne	r0, #1
   ba0fe:	4770      	bx	lr
    } else if (version() == 6) {
   ba100:	2b06      	cmp	r3, #6
   ba102:	d107      	bne.n	ba114 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   ba104:	6843      	ldr	r3, [r0, #4]
   ba106:	b93b      	cbnz	r3, ba118 <_ZNK9IPAddresscvbEv+0x28>
   ba108:	6883      	ldr	r3, [r0, #8]
   ba10a:	b92b      	cbnz	r3, ba118 <_ZNK9IPAddresscvbEv+0x28>
   ba10c:	68c3      	ldr	r3, [r0, #12]
   ba10e:	b91b      	cbnz	r3, ba118 <_ZNK9IPAddresscvbEv+0x28>
   ba110:	6900      	ldr	r0, [r0, #16]
   ba112:	e7f1      	b.n	ba0f8 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   ba114:	2000      	movs	r0, #0
   ba116:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   ba118:	2001      	movs	r0, #1
}
   ba11a:	4770      	bx	lr

000ba11c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   ba11c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   ba11e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   ba122:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   ba126:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   ba12a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   ba12e:	2304      	movs	r3, #4
   ba130:	6041      	str	r1, [r0, #4]
   ba132:	7503      	strb	r3, [r0, #20]
}
   ba134:	bd10      	pop	{r4, pc}
	...

000ba138 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   ba138:	b507      	push	{r0, r1, r2, lr}
   ba13a:	4b06      	ldr	r3, [pc, #24]	; (ba154 <_ZN9IPAddressC1EPKh+0x1c>)
   ba13c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   ba13e:	78cb      	ldrb	r3, [r1, #3]
   ba140:	9300      	str	r3, [sp, #0]
   ba142:	788b      	ldrb	r3, [r1, #2]
   ba144:	784a      	ldrb	r2, [r1, #1]
   ba146:	7809      	ldrb	r1, [r1, #0]
   ba148:	f7ff ffe8 	bl	ba11c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   ba14c:	b003      	add	sp, #12
   ba14e:	f85d fb04 	ldr.w	pc, [sp], #4
   ba152:	bf00      	nop
   ba154:	000bea48 	.word	0x000bea48

000ba158 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   ba158:	4b01      	ldr	r3, [pc, #4]	; (ba160 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   ba15a:	4a02      	ldr	r2, [pc, #8]	; (ba164 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   ba15c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   ba15e:	4770      	bx	lr
   ba160:	2003e6d0 	.word	0x2003e6d0
   ba164:	000bea54 	.word	0x000bea54

000ba168 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   ba168:	2300      	movs	r3, #0
   ba16a:	6840      	ldr	r0, [r0, #4]
   ba16c:	461a      	mov	r2, r3
   ba16e:	f7fe bc39 	b.w	b89e4 <network_connect>

000ba172 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   ba172:	6840      	ldr	r0, [r0, #4]
   ba174:	2200      	movs	r2, #0
   ba176:	2102      	movs	r1, #2
   ba178:	f7fe bc44 	b.w	b8a04 <network_disconnect>

000ba17c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   ba17c:	2200      	movs	r2, #0
   ba17e:	6840      	ldr	r0, [r0, #4]
   ba180:	4611      	mov	r1, r2
   ba182:	f7fe bc37 	b.w	b89f4 <network_connecting>

000ba186 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   ba186:	2200      	movs	r2, #0
   ba188:	6840      	ldr	r0, [r0, #4]
   ba18a:	4611      	mov	r1, r2
   ba18c:	f7fe bc42 	b.w	b8a14 <network_ready>

000ba190 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   ba190:	2300      	movs	r3, #0
   ba192:	6840      	ldr	r0, [r0, #4]
   ba194:	461a      	mov	r2, r3
   ba196:	4619      	mov	r1, r3
   ba198:	f7fe bc44 	b.w	b8a24 <network_on>

000ba19c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   ba19c:	2300      	movs	r3, #0
   ba19e:	6840      	ldr	r0, [r0, #4]
   ba1a0:	461a      	mov	r2, r3
   ba1a2:	4619      	mov	r1, r3
   ba1a4:	f7fe bc46 	b.w	b8a34 <network_off>

000ba1a8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   ba1a8:	6840      	ldr	r0, [r0, #4]
   ba1aa:	2100      	movs	r1, #0
   ba1ac:	f7fe bc7a 	b.w	b8aa4 <network_is_on>

000ba1b0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   ba1b0:	6840      	ldr	r0, [r0, #4]
   ba1b2:	2100      	movs	r1, #0
   ba1b4:	f7fe bc7e 	b.w	b8ab4 <network_is_off>

000ba1b8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   ba1b8:	6840      	ldr	r0, [r0, #4]
   ba1ba:	2200      	movs	r2, #0
   ba1bc:	f081 0101 	eor.w	r1, r1, #1
   ba1c0:	f7fe bc40 	b.w	b8a44 <network_listen>

000ba1c4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   ba1c4:	6840      	ldr	r0, [r0, #4]
   ba1c6:	2200      	movs	r2, #0
   ba1c8:	f7fe bc5c 	b.w	b8a84 <network_set_listen_timeout>

000ba1cc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   ba1cc:	2200      	movs	r2, #0
   ba1ce:	6840      	ldr	r0, [r0, #4]
   ba1d0:	4611      	mov	r1, r2
   ba1d2:	f7fe bc5f 	b.w	b8a94 <network_get_listen_timeout>

000ba1d6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   ba1d6:	2200      	movs	r2, #0
   ba1d8:	6840      	ldr	r0, [r0, #4]
   ba1da:	4611      	mov	r1, r2
   ba1dc:	f7fe bc3a 	b.w	b8a54 <network_listening>

000ba1e0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   ba1e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba1e4:	b095      	sub	sp, #84	; 0x54
   ba1e6:	4614      	mov	r4, r2
   ba1e8:	460d      	mov	r5, r1
   ba1ea:	4607      	mov	r7, r0
    IPAddress addr;
   ba1ec:	f7ff ff60 	bl	ba0b0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ba1f0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   ba1f2:	221c      	movs	r2, #28
   ba1f4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   ba1f6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   ba1f8:	f001 fff2 	bl	bc1e0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   ba1fc:	2340      	movs	r3, #64	; 0x40
   ba1fe:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   ba200:	4620      	mov	r0, r4
   ba202:	466b      	mov	r3, sp
   ba204:	aa0c      	add	r2, sp, #48	; 0x30
   ba206:	2100      	movs	r1, #0
   ba208:	f7fe fb08 	bl	b881c <netdb_getaddrinfo>
    if (!r) {
   ba20c:	4604      	mov	r4, r0
   ba20e:	2800      	cmp	r0, #0
   ba210:	d14b      	bne.n	ba2aa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba212:	4602      	mov	r2, r0
   ba214:	2101      	movs	r1, #1
   ba216:	6868      	ldr	r0, [r5, #4]
   ba218:	f7fe fbfc 	bl	b8a14 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba21c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba21e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba220:	4622      	mov	r2, r4
   ba222:	6868      	ldr	r0, [r5, #4]
   ba224:	f7fe fbf6 	bl	b8a14 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba228:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba22a:	4681      	mov	r9, r0
        bool ok = false;
   ba22c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba22e:	2e00      	cmp	r6, #0
   ba230:	d03b      	beq.n	ba2aa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   ba232:	2900      	cmp	r1, #0
   ba234:	d139      	bne.n	ba2aa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ba236:	6873      	ldr	r3, [r6, #4]
   ba238:	2b02      	cmp	r3, #2
   ba23a:	d003      	beq.n	ba244 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ba23c:	2b0a      	cmp	r3, #10
   ba23e:	d011      	beq.n	ba264 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba240:	69f6      	ldr	r6, [r6, #28]
   ba242:	e7f4      	b.n	ba22e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   ba244:	f1b8 0f00 	cmp.w	r8, #0
   ba248:	d0fa      	beq.n	ba240 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   ba24a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   ba24c:	a806      	add	r0, sp, #24
   ba24e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   ba250:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   ba252:	f7ff ff71 	bl	ba138 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba258:	1d3c      	adds	r4, r7, #4
   ba25a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba25c:	682b      	ldr	r3, [r5, #0]
   ba25e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba260:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   ba262:	e7ed      	b.n	ba240 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   ba264:	f1b9 0f00 	cmp.w	r9, #0
   ba268:	d0ea      	beq.n	ba240 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   ba26a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   ba26c:	2210      	movs	r2, #16
   ba26e:	a801      	add	r0, sp, #4
   ba270:	f001 ffb6 	bl	bc1e0 <memset>
                    a.v = 6;
   ba274:	2306      	movs	r3, #6
   ba276:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba27a:	ad01      	add	r5, sp, #4
   ba27c:	f104 0308 	add.w	r3, r4, #8
   ba280:	3418      	adds	r4, #24
   ba282:	6818      	ldr	r0, [r3, #0]
   ba284:	6859      	ldr	r1, [r3, #4]
   ba286:	462a      	mov	r2, r5
   ba288:	c203      	stmia	r2!, {r0, r1}
   ba28a:	3308      	adds	r3, #8
   ba28c:	42a3      	cmp	r3, r4
   ba28e:	4615      	mov	r5, r2
   ba290:	d1f7      	bne.n	ba282 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   ba292:	a901      	add	r1, sp, #4
   ba294:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   ba296:	ad07      	add	r5, sp, #28
   ba298:	f7ff ff18 	bl	ba0cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba29c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba29e:	1d3c      	adds	r4, r7, #4
   ba2a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba2a2:	682b      	ldr	r3, [r5, #0]
   ba2a4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba2a6:	4649      	mov	r1, r9
   ba2a8:	e7ca      	b.n	ba240 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   ba2aa:	9800      	ldr	r0, [sp, #0]
   ba2ac:	f7fe faae 	bl	b880c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   ba2b0:	4638      	mov	r0, r7
   ba2b2:	b015      	add	sp, #84	; 0x54
   ba2b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ba2b8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   ba2b8:	4b02      	ldr	r3, [pc, #8]	; (ba2c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   ba2ba:	4a03      	ldr	r2, [pc, #12]	; (ba2c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   ba2bc:	601a      	str	r2, [r3, #0]
   ba2be:	2200      	movs	r2, #0
   ba2c0:	605a      	str	r2, [r3, #4]

} // spark
   ba2c2:	4770      	bx	lr
   ba2c4:	2003e6d4 	.word	0x2003e6d4
   ba2c8:	000bea60 	.word	0x000bea60

000ba2cc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   ba2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba2ce:	4606      	mov	r6, r0
   ba2d0:	460d      	mov	r5, r1
  size_t n = 0;
   ba2d2:	188f      	adds	r7, r1, r2
   ba2d4:	2400      	movs	r4, #0
  while (size--) {
   ba2d6:	42bd      	cmp	r5, r7
   ba2d8:	d00c      	beq.n	ba2f4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   ba2da:	6833      	ldr	r3, [r6, #0]
   ba2dc:	f815 1b01 	ldrb.w	r1, [r5], #1
   ba2e0:	689b      	ldr	r3, [r3, #8]
   ba2e2:	4630      	mov	r0, r6
   ba2e4:	4798      	blx	r3
     if (chunk>=0)
   ba2e6:	1e03      	subs	r3, r0, #0
   ba2e8:	db01      	blt.n	ba2ee <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   ba2ea:	441c      	add	r4, r3
  while (size--) {
   ba2ec:	e7f3      	b.n	ba2d6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   ba2ee:	2c00      	cmp	r4, #0
   ba2f0:	bf08      	it	eq
   ba2f2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   ba2f4:	4620      	mov	r0, r4
   ba2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba2f8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   ba2f8:	b513      	push	{r0, r1, r4, lr}
   ba2fa:	4604      	mov	r4, r0
    }
   ba2fc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   ba2fe:	b159      	cbz	r1, ba318 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   ba300:	9101      	str	r1, [sp, #4]
   ba302:	f001 ffb5 	bl	bc270 <strlen>
   ba306:	6823      	ldr	r3, [r4, #0]
   ba308:	9901      	ldr	r1, [sp, #4]
   ba30a:	68db      	ldr	r3, [r3, #12]
   ba30c:	4602      	mov	r2, r0
   ba30e:	4620      	mov	r0, r4
    }
   ba310:	b002      	add	sp, #8
   ba312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   ba316:	4718      	bx	r3
    }
   ba318:	b002      	add	sp, #8
   ba31a:	bd10      	pop	{r4, pc}

000ba31c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   ba31c:	b508      	push	{r3, lr}
  return write(str);
   ba31e:	f7ff ffeb 	bl	ba2f8 <_ZN5Print5writeEPKc>
}
   ba322:	bd08      	pop	{r3, pc}

000ba324 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   ba324:	6803      	ldr	r3, [r0, #0]
   ba326:	689b      	ldr	r3, [r3, #8]
   ba328:	4718      	bx	r3

000ba32a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   ba32a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   ba32c:	210d      	movs	r1, #13
{
   ba32e:	4605      	mov	r5, r0
  size_t n = print('\r');
   ba330:	f7ff fff8 	bl	ba324 <_ZN5Print5printEc>
  n += print('\n');
   ba334:	210a      	movs	r1, #10
  size_t n = print('\r');
   ba336:	4604      	mov	r4, r0
  n += print('\n');
   ba338:	4628      	mov	r0, r5
   ba33a:	f7ff fff3 	bl	ba324 <_ZN5Print5printEc>
  return n;
}
   ba33e:	4420      	add	r0, r4
   ba340:	bd38      	pop	{r3, r4, r5, pc}

000ba342 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   ba342:	b538      	push	{r3, r4, r5, lr}
   ba344:	4605      	mov	r5, r0
  return write(str);
   ba346:	f7ff ffd7 	bl	ba2f8 <_ZN5Print5writeEPKc>
   ba34a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   ba34c:	4628      	mov	r0, r5
   ba34e:	f7ff ffec 	bl	ba32a <_ZN5Print7printlnEv>
  return n;
}
   ba352:	4420      	add	r0, r4
   ba354:	bd38      	pop	{r3, r4, r5, pc}

000ba356 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   ba356:	b530      	push	{r4, r5, lr}
   ba358:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   ba35a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   ba35c:	2a01      	cmp	r2, #1
  *str = '\0';
   ba35e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   ba362:	bf98      	it	ls
   ba364:	220a      	movls	r2, #10
   ba366:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   ba368:	460d      	mov	r5, r1
   ba36a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   ba36e:	fb01 5312 	mls	r3, r1, r2, r5
   ba372:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba376:	2b09      	cmp	r3, #9
   ba378:	bf94      	ite	ls
   ba37a:	3330      	addls	r3, #48	; 0x30
   ba37c:	3337      	addhi	r3, #55	; 0x37
   ba37e:	b2db      	uxtb	r3, r3
  } while(n);
   ba380:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba382:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   ba386:	d9ef      	bls.n	ba368 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   ba388:	4621      	mov	r1, r4
   ba38a:	f7ff ffb5 	bl	ba2f8 <_ZN5Print5writeEPKc>
}
   ba38e:	b00b      	add	sp, #44	; 0x2c
   ba390:	bd30      	pop	{r4, r5, pc}

000ba392 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   ba392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba396:	b086      	sub	sp, #24
   ba398:	af00      	add	r7, sp, #0
   ba39a:	4605      	mov	r5, r0
   ba39c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   ba39e:	1d38      	adds	r0, r7, #4
   ba3a0:	2114      	movs	r1, #20
{
   ba3a2:	4614      	mov	r4, r2
    va_copy(args2, args);
   ba3a4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   ba3a6:	f7fe fbad 	bl	b8b04 <vsnprintf>

    if (n<bufsize)
   ba3aa:	2813      	cmp	r0, #19
   ba3ac:	d80e      	bhi.n	ba3cc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   ba3ae:	1d39      	adds	r1, r7, #4
   ba3b0:	4628      	mov	r0, r5
   ba3b2:	f7ff ffa1 	bl	ba2f8 <_ZN5Print5writeEPKc>
   ba3b6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   ba3b8:	b11e      	cbz	r6, ba3c2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   ba3ba:	4628      	mov	r0, r5
   ba3bc:	f7ff ffb5 	bl	ba32a <_ZN5Print7printlnEv>
   ba3c0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   ba3c2:	4620      	mov	r0, r4
   ba3c4:	3718      	adds	r7, #24
   ba3c6:	46bd      	mov	sp, r7
   ba3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   ba3cc:	f100 0308 	add.w	r3, r0, #8
   ba3d0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   ba3d4:	46e8      	mov	r8, sp
        char bigger[n+1];
   ba3d6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   ba3da:	4622      	mov	r2, r4
   ba3dc:	1c41      	adds	r1, r0, #1
   ba3de:	683b      	ldr	r3, [r7, #0]
   ba3e0:	4668      	mov	r0, sp
   ba3e2:	f7fe fb8f 	bl	b8b04 <vsnprintf>
  return write(str);
   ba3e6:	4669      	mov	r1, sp
   ba3e8:	4628      	mov	r0, r5
   ba3ea:	f7ff ff85 	bl	ba2f8 <_ZN5Print5writeEPKc>
   ba3ee:	4604      	mov	r4, r0
   ba3f0:	46c5      	mov	sp, r8
   ba3f2:	e7e1      	b.n	ba3b8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000ba3f4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   ba3f4:	4b01      	ldr	r3, [pc, #4]	; (ba3fc <_GLOBAL__sub_I_RGB+0x8>)
   ba3f6:	2200      	movs	r2, #0
   ba3f8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   ba3fa:	4770      	bx	lr
   ba3fc:	2003e6dc 	.word	0x2003e6dc

000ba400 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   ba400:	b510      	push	{r4, lr}
   ba402:	4604      	mov	r4, r0
{
	free(buffer);
   ba404:	6800      	ldr	r0, [r0, #0]
   ba406:	f7fe fb65 	bl	b8ad4 <free>
}
   ba40a:	4620      	mov	r0, r4
   ba40c:	bd10      	pop	{r4, pc}

000ba40e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   ba40e:	b510      	push	{r4, lr}
   ba410:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   ba412:	6800      	ldr	r0, [r0, #0]
   ba414:	b108      	cbz	r0, ba41a <_ZN6String10invalidateEv+0xc>
   ba416:	f7fe fb5d 	bl	b8ad4 <free>
	buffer = NULL;
   ba41a:	2300      	movs	r3, #0
	capacity = len = 0;
   ba41c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   ba420:	6023      	str	r3, [r4, #0]
}
   ba422:	bd10      	pop	{r4, pc}

000ba424 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   ba424:	b538      	push	{r3, r4, r5, lr}
   ba426:	4604      	mov	r4, r0
   ba428:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   ba42a:	6800      	ldr	r0, [r0, #0]
   ba42c:	3101      	adds	r1, #1
   ba42e:	f7fe fb59 	bl	b8ae4 <realloc>
	if (newbuffer) {
   ba432:	b110      	cbz	r0, ba43a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   ba434:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   ba438:	2001      	movs	r0, #1
	}
	return 0;
}
   ba43a:	bd38      	pop	{r3, r4, r5, pc}

000ba43c <_ZN6String7reserveEj>:
{
   ba43c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   ba43e:	6803      	ldr	r3, [r0, #0]
{
   ba440:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   ba442:	b123      	cbz	r3, ba44e <_ZN6String7reserveEj+0x12>
   ba444:	6843      	ldr	r3, [r0, #4]
   ba446:	428b      	cmp	r3, r1
   ba448:	d301      	bcc.n	ba44e <_ZN6String7reserveEj+0x12>
   ba44a:	2001      	movs	r0, #1
}
   ba44c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   ba44e:	4620      	mov	r0, r4
   ba450:	f7ff ffe8 	bl	ba424 <_ZN6String12changeBufferEj>
   ba454:	2800      	cmp	r0, #0
   ba456:	d0f9      	beq.n	ba44c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   ba458:	68a3      	ldr	r3, [r4, #8]
   ba45a:	2b00      	cmp	r3, #0
   ba45c:	d1f5      	bne.n	ba44a <_ZN6String7reserveEj+0xe>
   ba45e:	6822      	ldr	r2, [r4, #0]
   ba460:	7013      	strb	r3, [r2, #0]
   ba462:	e7f2      	b.n	ba44a <_ZN6String7reserveEj+0xe>

000ba464 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   ba464:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba466:	460d      	mov	r5, r1
	if (!reserve(length)) {
   ba468:	4611      	mov	r1, r2
   ba46a:	9201      	str	r2, [sp, #4]
{
   ba46c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   ba46e:	f7ff ffe5 	bl	ba43c <_ZN6String7reserveEj>
   ba472:	9a01      	ldr	r2, [sp, #4]
   ba474:	b928      	cbnz	r0, ba482 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   ba476:	4620      	mov	r0, r4
   ba478:	f7ff ffc9 	bl	ba40e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   ba47c:	4620      	mov	r0, r4
   ba47e:	b003      	add	sp, #12
   ba480:	bd30      	pop	{r4, r5, pc}
	len = length;
   ba482:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   ba484:	4629      	mov	r1, r5
   ba486:	6820      	ldr	r0, [r4, #0]
   ba488:	f001 fe82 	bl	bc190 <memcpy>
	buffer[len] = 0;
   ba48c:	6822      	ldr	r2, [r4, #0]
   ba48e:	68a3      	ldr	r3, [r4, #8]
   ba490:	2100      	movs	r1, #0
   ba492:	54d1      	strb	r1, [r2, r3]
	return *this;
   ba494:	e7f2      	b.n	ba47c <_ZN6String4copyEPKcj+0x18>

000ba496 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   ba496:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   ba498:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   ba49a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   ba49e:	4604      	mov	r4, r0
	len = 0;
   ba4a0:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba4a2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   ba4a4:	b141      	cbz	r1, ba4b8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   ba4a6:	4608      	mov	r0, r1
   ba4a8:	9101      	str	r1, [sp, #4]
   ba4aa:	f001 fee1 	bl	bc270 <strlen>
   ba4ae:	9901      	ldr	r1, [sp, #4]
   ba4b0:	4602      	mov	r2, r0
   ba4b2:	4620      	mov	r0, r4
   ba4b4:	f7ff ffd6 	bl	ba464 <_ZN6String4copyEPKcj>
}
   ba4b8:	4620      	mov	r0, r4
   ba4ba:	b002      	add	sp, #8
   ba4bc:	bd10      	pop	{r4, pc}

000ba4be <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   ba4be:	b538      	push	{r3, r4, r5, lr}
   ba4c0:	4605      	mov	r5, r0
	if (buffer) {
   ba4c2:	6800      	ldr	r0, [r0, #0]
{
   ba4c4:	460c      	mov	r4, r1
	if (buffer) {
   ba4c6:	b168      	cbz	r0, ba4e4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   ba4c8:	686a      	ldr	r2, [r5, #4]
   ba4ca:	688b      	ldr	r3, [r1, #8]
   ba4cc:	429a      	cmp	r2, r3
   ba4ce:	d307      	bcc.n	ba4e0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   ba4d0:	6809      	ldr	r1, [r1, #0]
   ba4d2:	f001 fec5 	bl	bc260 <strcpy>
			len = rhs.len;
   ba4d6:	68a3      	ldr	r3, [r4, #8]
   ba4d8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   ba4da:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   ba4dc:	60a3      	str	r3, [r4, #8]
}
   ba4de:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   ba4e0:	f7fe faf8 	bl	b8ad4 <free>
	buffer = rhs.buffer;
   ba4e4:	6823      	ldr	r3, [r4, #0]
   ba4e6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   ba4e8:	6863      	ldr	r3, [r4, #4]
   ba4ea:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   ba4ec:	68a3      	ldr	r3, [r4, #8]
   ba4ee:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   ba4f0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   ba4f2:	e9c4 3300 	strd	r3, r3, [r4]
   ba4f6:	e7f1      	b.n	ba4dc <_ZN6String4moveERS_+0x1e>

000ba4f8 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   ba4f8:	4288      	cmp	r0, r1
{
   ba4fa:	b510      	push	{r4, lr}
   ba4fc:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   ba4fe:	d005      	beq.n	ba50c <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   ba500:	680b      	ldr	r3, [r1, #0]
   ba502:	b12b      	cbz	r3, ba510 <_ZN6StringaSERKS_+0x18>
   ba504:	688a      	ldr	r2, [r1, #8]
   ba506:	4619      	mov	r1, r3
   ba508:	f7ff ffac 	bl	ba464 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba50c:	4620      	mov	r0, r4
   ba50e:	bd10      	pop	{r4, pc}
	else invalidate();
   ba510:	f7ff ff7d 	bl	ba40e <_ZN6String10invalidateEv>
   ba514:	e7fa      	b.n	ba50c <_ZN6StringaSERKS_+0x14>

000ba516 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   ba516:	4288      	cmp	r0, r1
{
   ba518:	b510      	push	{r4, lr}
   ba51a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   ba51c:	d001      	beq.n	ba522 <_ZN6StringaSEOS_+0xc>
   ba51e:	f7ff ffce 	bl	ba4be <_ZN6String4moveERS_>
	return *this;
}
   ba522:	4620      	mov	r0, r4
   ba524:	bd10      	pop	{r4, pc}

000ba526 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   ba526:	b513      	push	{r0, r1, r4, lr}
   ba528:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   ba52a:	b159      	cbz	r1, ba544 <_ZN6StringaSEPKc+0x1e>
   ba52c:	4608      	mov	r0, r1
   ba52e:	9101      	str	r1, [sp, #4]
   ba530:	f001 fe9e 	bl	bc270 <strlen>
   ba534:	9901      	ldr	r1, [sp, #4]
   ba536:	4602      	mov	r2, r0
   ba538:	4620      	mov	r0, r4
   ba53a:	f7ff ff93 	bl	ba464 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba53e:	4620      	mov	r0, r4
   ba540:	b002      	add	sp, #8
   ba542:	bd10      	pop	{r4, pc}
	else invalidate();
   ba544:	f7ff ff63 	bl	ba40e <_ZN6String10invalidateEv>
   ba548:	e7f9      	b.n	ba53e <_ZN6StringaSEPKc+0x18>

000ba54a <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   ba54a:	b510      	push	{r4, lr}
   ba54c:	4604      	mov	r4, r0
   ba54e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   ba550:	2300      	movs	r3, #0
	capacity = 0;
   ba552:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   ba556:	60a3      	str	r3, [r4, #8]
	flags = 0;
   ba558:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   ba55a:	4608      	mov	r0, r1
	itoa(value, buf, base);
   ba55c:	a901      	add	r1, sp, #4
   ba55e:	f000 fd15 	bl	baf8c <itoa>
	*this = buf;
   ba562:	a901      	add	r1, sp, #4
   ba564:	4620      	mov	r0, r4
   ba566:	f7ff ffde 	bl	ba526 <_ZN6StringaSEPKc>
}
   ba56a:	4620      	mov	r0, r4
   ba56c:	b00a      	add	sp, #40	; 0x28
   ba56e:	bd10      	pop	{r4, pc}

000ba570 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   ba570:	b570      	push	{r4, r5, r6, lr}
   ba572:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   ba574:	460e      	mov	r6, r1
   ba576:	b909      	cbnz	r1, ba57c <_ZN6String6concatEPKcj+0xc>
   ba578:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   ba57a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   ba57c:	b16a      	cbz	r2, ba59a <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   ba57e:	6884      	ldr	r4, [r0, #8]
   ba580:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   ba582:	4621      	mov	r1, r4
   ba584:	f7ff ff5a 	bl	ba43c <_ZN6String7reserveEj>
   ba588:	2800      	cmp	r0, #0
   ba58a:	d0f5      	beq.n	ba578 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   ba58c:	6828      	ldr	r0, [r5, #0]
   ba58e:	68ab      	ldr	r3, [r5, #8]
   ba590:	4631      	mov	r1, r6
   ba592:	4418      	add	r0, r3
   ba594:	f001 fe64 	bl	bc260 <strcpy>
	len = newlen;
   ba598:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   ba59a:	2001      	movs	r0, #1
   ba59c:	e7ed      	b.n	ba57a <_ZN6String6concatEPKcj+0xa>

000ba59e <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   ba59e:	688a      	ldr	r2, [r1, #8]
   ba5a0:	6809      	ldr	r1, [r1, #0]
   ba5a2:	f7ff bfe5 	b.w	ba570 <_ZN6String6concatEPKcj>

000ba5a6 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   ba5a6:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   ba5a8:	2300      	movs	r3, #0
	buf[0] = c;
   ba5aa:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   ba5ae:	2201      	movs	r2, #1
   ba5b0:	a901      	add	r1, sp, #4
	buf[1] = 0;
   ba5b2:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   ba5b6:	f7ff ffdb 	bl	ba570 <_ZN6String6concatEPKcj>
}
   ba5ba:	b003      	add	sp, #12
   ba5bc:	f85d fb04 	ldr.w	pc, [sp], #4

000ba5c0 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   ba5c0:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba5c2:	688a      	ldr	r2, [r1, #8]
   ba5c4:	6809      	ldr	r1, [r1, #0]
{
   ba5c6:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba5c8:	f7ff ffd2 	bl	ba570 <_ZN6String6concatEPKcj>
   ba5cc:	b910      	cbnz	r0, ba5d4 <_ZplRK15StringSumHelperRK6String+0x14>
   ba5ce:	4620      	mov	r0, r4
   ba5d0:	f7ff ff1d 	bl	ba40e <_ZN6String10invalidateEv>
	return a;
}
   ba5d4:	4620      	mov	r0, r4
   ba5d6:	bd10      	pop	{r4, pc}

000ba5d8 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   ba5d8:	b513      	push	{r0, r1, r4, lr}
   ba5da:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba5dc:	b929      	cbnz	r1, ba5ea <_ZplRK15StringSumHelperPKc+0x12>
   ba5de:	4620      	mov	r0, r4
   ba5e0:	f7ff ff15 	bl	ba40e <_ZN6String10invalidateEv>
	return a;
}
   ba5e4:	4620      	mov	r0, r4
   ba5e6:	b002      	add	sp, #8
   ba5e8:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba5ea:	4608      	mov	r0, r1
   ba5ec:	9101      	str	r1, [sp, #4]
   ba5ee:	f001 fe3f 	bl	bc270 <strlen>
   ba5f2:	9901      	ldr	r1, [sp, #4]
   ba5f4:	4602      	mov	r2, r0
   ba5f6:	4620      	mov	r0, r4
   ba5f8:	f7ff ffba 	bl	ba570 <_ZN6String6concatEPKcj>
   ba5fc:	2800      	cmp	r0, #0
   ba5fe:	d0ee      	beq.n	ba5de <_ZplRK15StringSumHelperPKc+0x6>
   ba600:	e7f0      	b.n	ba5e4 <_ZplRK15StringSumHelperPKc+0xc>

000ba602 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   ba602:	6802      	ldr	r2, [r0, #0]
{
   ba604:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   ba606:	6809      	ldr	r1, [r1, #0]
   ba608:	b162      	cbz	r2, ba624 <_ZNK6String9compareToERKS_+0x22>
   ba60a:	b941      	cbnz	r1, ba61e <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   ba60c:	6880      	ldr	r0, [r0, #8]
   ba60e:	b160      	cbz	r0, ba62a <_ZNK6String9compareToERKS_+0x28>
   ba610:	7810      	ldrb	r0, [r2, #0]
   ba612:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   ba614:	6898      	ldr	r0, [r3, #8]
   ba616:	b140      	cbz	r0, ba62a <_ZNK6String9compareToERKS_+0x28>
   ba618:	7809      	ldrb	r1, [r1, #0]
   ba61a:	4248      	negs	r0, r1
   ba61c:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   ba61e:	4610      	mov	r0, r2
   ba620:	f001 be14 	b.w	bc24c <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   ba624:	2900      	cmp	r1, #0
   ba626:	d1f5      	bne.n	ba614 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   ba628:	4608      	mov	r0, r1
}
   ba62a:	4770      	bx	lr

000ba62c <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   ba62c:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   ba62e:	6882      	ldr	r2, [r0, #8]
   ba630:	688b      	ldr	r3, [r1, #8]
   ba632:	429a      	cmp	r2, r3
   ba634:	d105      	bne.n	ba642 <_ZNK6String6equalsERKS_+0x16>
   ba636:	f7ff ffe4 	bl	ba602 <_ZNK6String9compareToERKS_>
   ba63a:	fab0 f080 	clz	r0, r0
   ba63e:	0940      	lsrs	r0, r0, #5
}
   ba640:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   ba642:	2000      	movs	r0, #0
   ba644:	e7fc      	b.n	ba640 <_ZNK6String6equalsERKS_+0x14>

000ba646 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   ba646:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   ba648:	6882      	ldr	r2, [r0, #8]
   ba64a:	b93a      	cbnz	r2, ba65c <_ZNK6String6equalsEPKc+0x16>
   ba64c:	b121      	cbz	r1, ba658 <_ZNK6String6equalsEPKc+0x12>
   ba64e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   ba650:	fab0 f080 	clz	r0, r0
   ba654:	0940      	lsrs	r0, r0, #5
   ba656:	e000      	b.n	ba65a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   ba658:	2001      	movs	r0, #1
}
   ba65a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   ba65c:	6800      	ldr	r0, [r0, #0]
   ba65e:	b909      	cbnz	r1, ba664 <_ZNK6String6equalsEPKc+0x1e>
   ba660:	7800      	ldrb	r0, [r0, #0]
   ba662:	e7f5      	b.n	ba650 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   ba664:	f001 fdf2 	bl	bc24c <strcmp>
   ba668:	e7f2      	b.n	ba650 <_ZNK6String6equalsEPKc+0xa>

000ba66a <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   ba66a:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   ba66c:	6883      	ldr	r3, [r0, #8]
   ba66e:	4293      	cmp	r3, r2
   ba670:	d907      	bls.n	ba682 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   ba672:	6804      	ldr	r4, [r0, #0]
   ba674:	6809      	ldr	r1, [r1, #0]
   ba676:	18a0      	adds	r0, r4, r2
   ba678:	f001 fe22 	bl	bc2c0 <strstr>
	if (found == NULL) return -1;
   ba67c:	b108      	cbz	r0, ba682 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   ba67e:	1b00      	subs	r0, r0, r4
}
   ba680:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   ba682:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba686:	e7fb      	b.n	ba680 <_ZNK6String7indexOfERKS_j+0x16>

000ba688 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   ba688:	2200      	movs	r2, #0
   ba68a:	f7ff bfee 	b.w	ba66a <_ZNK6String7indexOfERKS_j>
	...

000ba690 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   ba690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   ba692:	429a      	cmp	r2, r3
{
   ba694:	460f      	mov	r7, r1
   ba696:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   ba698:	490c      	ldr	r1, [pc, #48]	; (ba6cc <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   ba69a:	bf88      	it	hi
   ba69c:	4613      	movhi	r3, r2
{
   ba69e:	4614      	mov	r4, r2
   ba6a0:	4606      	mov	r6, r0
	if (left > right) {
   ba6a2:	bf84      	itt	hi
   ba6a4:	462c      	movhi	r4, r5
   ba6a6:	461d      	movhi	r5, r3
	String out;
   ba6a8:	f7ff fef5 	bl	ba496 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   ba6ac:	68bb      	ldr	r3, [r7, #8]
   ba6ae:	42a3      	cmp	r3, r4
   ba6b0:	d30a      	bcc.n	ba6c8 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   ba6b2:	6839      	ldr	r1, [r7, #0]
   ba6b4:	42ab      	cmp	r3, r5
   ba6b6:	bf94      	ite	ls
   ba6b8:	ebc4 0203 	rsbls	r2, r4, r3
   ba6bc:	ebc4 0205 	rsbhi	r2, r4, r5
   ba6c0:	4421      	add	r1, r4
   ba6c2:	4630      	mov	r0, r6
   ba6c4:	f7ff fece 	bl	ba464 <_ZN6String4copyEPKcj>
	return out;
}
   ba6c8:	4630      	mov	r0, r6
   ba6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba6cc:	000be7c6 	.word	0x000be7c6

000ba6d0 <_ZNK6String9substringEj>:
{
   ba6d0:	b510      	push	{r4, lr}
   ba6d2:	4604      	mov	r4, r0
	return substring(left, len);
   ba6d4:	688b      	ldr	r3, [r1, #8]
   ba6d6:	f7ff ffdb 	bl	ba690 <_ZNK6String9substringEjj>
}
   ba6da:	4620      	mov	r0, r4
   ba6dc:	bd10      	pop	{r4, pc}
	...

000ba6e0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   ba6e0:	4b05      	ldr	r3, [pc, #20]	; (ba6f8 <_GLOBAL__sub_I_System+0x18>)
   ba6e2:	2202      	movs	r2, #2
   ba6e4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   ba6e6:	4b05      	ldr	r3, [pc, #20]	; (ba6fc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   ba6e8:	4a05      	ldr	r2, [pc, #20]	; (ba700 <_GLOBAL__sub_I_System+0x20>)
   ba6ea:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   ba6ec:	2000      	movs	r0, #0
   ba6ee:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   ba6f2:	f7fe b94b 	b.w	b898c <set_system_mode>
   ba6f6:	bf00      	nop
   ba6f8:	2003e6f8 	.word	0x2003e6f8
   ba6fc:	2003e6ec 	.word	0x2003e6ec
   ba700:	ffff0000 	.word	0xffff0000

000ba704 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   ba704:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   ba706:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   ba708:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   ba70c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   ba70e:	2201      	movs	r2, #1
   ba710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba714:	f10d 0107 	add.w	r1, sp, #7
   ba718:	47a0      	blx	r4
}
   ba71a:	b002      	add	sp, #8
   ba71c:	bd10      	pop	{r4, pc}

000ba71e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   ba71e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   ba720:	6803      	ldr	r3, [r0, #0]
   ba722:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   ba724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba728:	46a4      	mov	ip, r4
}
   ba72a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   ba72e:	4760      	bx	ip

000ba730 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   ba730:	b513      	push	{r0, r1, r4, lr}
   ba732:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   ba734:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   ba736:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   ba73a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   ba73c:	f10d 0107 	add.w	r1, sp, #7
   ba740:	2201      	movs	r2, #1
   ba742:	47a0      	blx	r4
}
   ba744:	b002      	add	sp, #8
   ba746:	bd10      	pop	{r4, pc}

000ba748 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   ba748:	b510      	push	{r4, lr}
      { return _M_ptr; }
   ba74a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   ba74c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba750:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   ba754:	429a      	cmp	r2, r3
int TCPClient::read() {
   ba756:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   ba758:	d008      	beq.n	ba76c <_ZN9TCPClient4readEv+0x24>
   ba75a:	6963      	ldr	r3, [r4, #20]
   ba75c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   ba760:	1c51      	adds	r1, r2, #1
   ba762:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   ba766:	4413      	add	r3, r2
   ba768:	7918      	ldrb	r0, [r3, #4]
}
   ba76a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   ba76c:	6803      	ldr	r3, [r0, #0]
   ba76e:	691b      	ldr	r3, [r3, #16]
   ba770:	4798      	blx	r3
   ba772:	2800      	cmp	r0, #0
   ba774:	d1f1      	bne.n	ba75a <_ZN9TCPClient4readEv+0x12>
   ba776:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba77a:	e7f6      	b.n	ba76a <_ZN9TCPClient4readEv+0x22>

000ba77c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   ba77c:	4770      	bx	lr

000ba77e <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   ba77e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   ba780:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   ba782:	43c0      	mvns	r0, r0
   ba784:	0fc0      	lsrs	r0, r0, #31
   ba786:	4770      	bx	lr

000ba788 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba788:	4770      	bx	lr
	...

000ba78c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   ba78c:	4b06      	ldr	r3, [pc, #24]	; (ba7a8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   ba78e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   ba790:	b510      	push	{r4, lr}
   ba792:	f100 040c 	add.w	r4, r0, #12
	    ||
   ba796:	d005      	beq.n	ba7a4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   ba798:	4608      	mov	r0, r1
   ba79a:	f000 fd1d 	bl	bb1d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   ba79e:	2800      	cmp	r0, #0
   ba7a0:	bf08      	it	eq
   ba7a2:	2400      	moveq	r4, #0
      }
   ba7a4:	4620      	mov	r0, r4
   ba7a6:	bd10      	pop	{r4, pc}
   ba7a8:	000be99c 	.word	0x000be99c

000ba7ac <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   ba7ac:	b510      	push	{r4, lr}
   ba7ae:	21ac      	movs	r1, #172	; 0xac
   ba7b0:	4604      	mov	r4, r0
   ba7b2:	f7f9 fc76 	bl	b40a2 <_ZdlPvj>
   ba7b6:	4620      	mov	r0, r4
   ba7b8:	bd10      	pop	{r4, pc}

000ba7ba <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   ba7ba:	21ac      	movs	r1, #172	; 0xac
   ba7bc:	f7f9 bc71 	b.w	b40a2 <_ZdlPvj>

000ba7c0 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   ba7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   ba7c4:	f04f 0800 	mov.w	r8, #0
   ba7c8:	b086      	sub	sp, #24
   ba7ca:	461c      	mov	r4, r3
   ba7cc:	f8c0 8004 	str.w	r8, [r0, #4]
   ba7d0:	4605      	mov	r5, r0
   ba7d2:	460e      	mov	r6, r1
   ba7d4:	4617      	mov	r7, r2
    struct timeval tv = {};
   ba7d6:	4641      	mov	r1, r8
   ba7d8:	2210      	movs	r2, #16
   ba7da:	a802      	add	r0, sp, #8
   ba7dc:	f001 fd00 	bl	bc1e0 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   ba7e0:	1c63      	adds	r3, r4, #1
   ba7e2:	d009      	beq.n	ba7f8 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   ba7e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba7e8:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   ba7ec:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   ba7f0:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   ba7f4:	435c      	muls	r4, r3
   ba7f6:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   ba7f8:	6968      	ldr	r0, [r5, #20]
   ba7fa:	2310      	movs	r3, #16
   ba7fc:	9300      	str	r3, [sp, #0]
   ba7fe:	6800      	ldr	r0, [r0, #0]
   ba800:	ab02      	add	r3, sp, #8
   ba802:	f241 0205 	movw	r2, #4101	; 0x1005
   ba806:	f640 71ff 	movw	r1, #4095	; 0xfff
   ba80a:	f7fe f80f 	bl	b882c <sock_setsockopt>
    if (ret < 0) {
   ba80e:	2800      	cmp	r0, #0
   ba810:	da07      	bge.n	ba822 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   ba812:	f7fe f98f 	bl	b8b34 <__errno>
   ba816:	6803      	ldr	r3, [r0, #0]
   ba818:	606b      	str	r3, [r5, #4]
        return 0;
   ba81a:	2000      	movs	r0, #0
}
   ba81c:	b006      	add	sp, #24
   ba81e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   ba822:	6968      	ldr	r0, [r5, #20]
   ba824:	2300      	movs	r3, #0
   ba826:	6800      	ldr	r0, [r0, #0]
   ba828:	463a      	mov	r2, r7
   ba82a:	4631      	mov	r1, r6
   ba82c:	f7fe f81e 	bl	b886c <sock_send>
    if (ret < 0) {
   ba830:	1e03      	subs	r3, r0, #0
   ba832:	dbee      	blt.n	ba812 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   ba834:	4618      	mov	r0, r3
   ba836:	e7f1      	b.n	ba81c <_ZN9TCPClient5writeEPKhjm+0x5c>

000ba838 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   ba838:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   ba83a:	6984      	ldr	r4, [r0, #24]
   ba83c:	4b0a      	ldr	r3, [pc, #40]	; (ba868 <_ZN9TCPClientD1Ev+0x30>)
   ba83e:	6003      	str	r3, [r0, #0]
   ba840:	4605      	mov	r5, r0
   ba842:	b17c      	cbz	r4, ba864 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   ba844:	6863      	ldr	r3, [r4, #4]
   ba846:	3b01      	subs	r3, #1
   ba848:	6063      	str	r3, [r4, #4]
   ba84a:	b95b      	cbnz	r3, ba864 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   ba84c:	6823      	ldr	r3, [r4, #0]
   ba84e:	4620      	mov	r0, r4
   ba850:	689b      	ldr	r3, [r3, #8]
   ba852:	4798      	blx	r3
          if (--_M_weak_count == 0)
   ba854:	68a3      	ldr	r3, [r4, #8]
   ba856:	3b01      	subs	r3, #1
   ba858:	60a3      	str	r3, [r4, #8]
   ba85a:	b91b      	cbnz	r3, ba864 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   ba85c:	6823      	ldr	r3, [r4, #0]
   ba85e:	4620      	mov	r0, r4
   ba860:	68db      	ldr	r3, [r3, #12]
   ba862:	4798      	blx	r3
   ba864:	4628      	mov	r0, r5
   ba866:	bd38      	pop	{r3, r4, r5, pc}
   ba868:	000bead0 	.word	0x000bead0

000ba86c <_ZN9TCPClientD0Ev>:
   ba86c:	b510      	push	{r4, lr}
   ba86e:	4604      	mov	r4, r0
   ba870:	f7ff ffe2 	bl	ba838 <_ZN9TCPClientD1Ev>
   ba874:	4620      	mov	r0, r4
   ba876:	211c      	movs	r1, #28
   ba878:	f7f9 fc13 	bl	b40a2 <_ZdlPvj>
   ba87c:	4620      	mov	r0, r4
   ba87e:	bd10      	pop	{r4, pc}

000ba880 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   ba880:	b530      	push	{r4, r5, lr}
   ba882:	b087      	sub	sp, #28
   ba884:	4604      	mov	r4, r0
class IPAddress : public Printable {
   ba886:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   ba888:	4668      	mov	r0, sp
   ba88a:	f7ff fc55 	bl	ba138 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba88e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba890:	3404      	adds	r4, #4
   ba892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba894:	682b      	ldr	r3, [r5, #0]
   ba896:	7023      	strb	r3, [r4, #0]
    }
   ba898:	b007      	add	sp, #28
   ba89a:	bd30      	pop	{r4, r5, pc}

000ba89c <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   ba89c:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   ba89e:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   ba8a0:	4b05      	ldr	r3, [pc, #20]	; (ba8b8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   ba8a2:	4604      	mov	r4, r0
   ba8a4:	358c      	adds	r5, #140	; 0x8c
   ba8a6:	f844 3b04 	str.w	r3, [r4], #4
   ba8aa:	4606      	mov	r6, r0
   ba8ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba8ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba8b0:	682b      	ldr	r3, [r5, #0]
   ba8b2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   ba8b4:	4630      	mov	r0, r6
   ba8b6:	bd70      	pop	{r4, r5, r6, pc}
   ba8b8:	000bea48 	.word	0x000bea48

000ba8bc <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   ba8bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba8c0:	4698      	mov	r8, r3
    stop();
   ba8c2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   ba8c4:	b093      	sub	sp, #76	; 0x4c
   ba8c6:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   ba8c8:	2400      	movs	r4, #0
    stop();
   ba8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   ba8cc:	4606      	mov	r6, r0
   ba8ce:	4617      	mov	r7, r2
    stop();
   ba8d0:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   ba8d2:	4628      	mov	r0, r5
   ba8d4:	466b      	mov	r3, sp
   ba8d6:	4622      	mov	r2, r4
   ba8d8:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   ba8da:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   ba8dc:	f7fd ff9e 	bl	b881c <netdb_getaddrinfo>
   ba8e0:	4605      	mov	r5, r0
   ba8e2:	2800      	cmp	r0, #0
   ba8e4:	d163      	bne.n	ba9ae <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   ba8e6:	9b00      	ldr	r3, [sp, #0]
   ba8e8:	2b00      	cmp	r3, #0
   ba8ea:	d04b      	beq.n	ba984 <_ZN9TCPClient7connectEPKctm+0xc8>
   ba8ec:	695b      	ldr	r3, [r3, #20]
   ba8ee:	2b00      	cmp	r3, #0
   ba8f0:	d048      	beq.n	ba984 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   ba8f2:	a806      	add	r0, sp, #24
   ba8f4:	f7ff fbdc 	bl	ba0b0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   ba8f8:	9b00      	ldr	r3, [sp, #0]
   ba8fa:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   ba8fc:	7863      	ldrb	r3, [r4, #1]
   ba8fe:	2b02      	cmp	r3, #2
   ba900:	d104      	bne.n	ba90c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   ba902:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   ba904:	a806      	add	r0, sp, #24
   ba906:	f7ff ffbb 	bl	ba880 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   ba90a:	e026      	b.n	ba95a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   ba90c:	2b0a      	cmp	r3, #10
   ba90e:	d124      	bne.n	ba95a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   ba910:	2211      	movs	r2, #17
   ba912:	4629      	mov	r1, r5
   ba914:	a801      	add	r0, sp, #4
   ba916:	f001 fc63 	bl	bc1e0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   ba91a:	68a3      	ldr	r3, [r4, #8]
   ba91c:	2b00      	cmp	r3, #0
   ba91e:	d038      	beq.n	ba992 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba920:	f104 0308 	add.w	r3, r4, #8
   ba924:	f10d 0c04 	add.w	ip, sp, #4
   ba928:	3418      	adds	r4, #24
   ba92a:	6818      	ldr	r0, [r3, #0]
   ba92c:	6859      	ldr	r1, [r3, #4]
   ba92e:	4662      	mov	r2, ip
   ba930:	c203      	stmia	r2!, {r0, r1}
   ba932:	3308      	adds	r3, #8
   ba934:	42a3      	cmp	r3, r4
   ba936:	4694      	mov	ip, r2
   ba938:	d1f7      	bne.n	ba92a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   ba93a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   ba93c:	a901      	add	r1, sp, #4
   ba93e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   ba940:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   ba944:	f7ff fbc2 	bl	ba0cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba948:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   ba94c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   ba950:	ac07      	add	r4, sp, #28
   ba952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba954:	f8dc 3000 	ldr.w	r3, [ip]
   ba958:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   ba95a:	a806      	add	r0, sp, #24
   ba95c:	f7ff fbc8 	bl	ba0f0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   ba960:	b180      	cbz	r0, ba984 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   ba962:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   ba964:	ad07      	add	r5, sp, #28
   ba966:	f8d3 9020 	ldr.w	r9, [r3, #32]
   ba96a:	4b12      	ldr	r3, [pc, #72]	; (ba9b4 <_ZN9TCPClient7connectEPKctm+0xf8>)
   ba96c:	930c      	str	r3, [sp, #48]	; 0x30
   ba96e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba970:	ac0d      	add	r4, sp, #52	; 0x34
   ba972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba974:	682b      	ldr	r3, [r5, #0]
   ba976:	7023      	strb	r3, [r4, #0]
   ba978:	463a      	mov	r2, r7
   ba97a:	4643      	mov	r3, r8
   ba97c:	a90c      	add	r1, sp, #48	; 0x30
   ba97e:	4630      	mov	r0, r6
   ba980:	47c8      	blx	r9
   ba982:	4605      	mov	r5, r0
    SCOPE_GUARD({
   ba984:	9800      	ldr	r0, [sp, #0]
   ba986:	f7fd ff41 	bl	b880c <netdb_freeaddrinfo>
}
   ba98a:	4628      	mov	r0, r5
   ba98c:	b013      	add	sp, #76	; 0x4c
   ba98e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   ba992:	68e3      	ldr	r3, [r4, #12]
   ba994:	2b00      	cmp	r3, #0
   ba996:	d1c3      	bne.n	ba920 <_ZN9TCPClient7connectEPKctm+0x64>
   ba998:	f64f 70ff 	movw	r0, #65535	; 0xffff
   ba99c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   ba9a0:	f7fd ff24 	bl	b87ec <inet_htonl>
   ba9a4:	4581      	cmp	r9, r0
   ba9a6:	d1bb      	bne.n	ba920 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   ba9a8:	f104 0114 	add.w	r1, r4, #20
   ba9ac:	e7aa      	b.n	ba904 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   ba9ae:	4625      	mov	r5, r4
   ba9b0:	e7e8      	b.n	ba984 <_ZN9TCPClient7connectEPKctm+0xc8>
   ba9b2:	bf00      	nop
   ba9b4:	000bea48 	.word	0x000bea48

000ba9b8 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   ba9b8:	b538      	push	{r3, r4, r5, lr}
   ba9ba:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   ba9bc:	681a      	ldr	r2, [r3, #0]
   ba9be:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   ba9c0:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   ba9c2:	da10      	bge.n	ba9e6 <_ZN9TCPClient9connectedEv+0x2e>
   ba9c4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba9c8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   ba9cc:	429a      	cmp	r2, r3
   ba9ce:	d10a      	bne.n	ba9e6 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   ba9d0:	6803      	ldr	r3, [r0, #0]
   ba9d2:	691b      	ldr	r3, [r3, #16]
   ba9d4:	4798      	blx	r3
        if (!rv) {
   ba9d6:	4604      	mov	r4, r0
   ba9d8:	b928      	cbnz	r0, ba9e6 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   ba9da:	682b      	ldr	r3, [r5, #0]
   ba9dc:	4628      	mov	r0, r5
   ba9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba9e0:	4798      	blx	r3
        rv = available();
   ba9e2:	4620      	mov	r0, r4
}
   ba9e4:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   ba9e6:	2001      	movs	r0, #1
   ba9e8:	e7fc      	b.n	ba9e4 <_ZN9TCPClient9connectedEv+0x2c>

000ba9ea <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   ba9ea:	b510      	push	{r4, lr}
   ba9ec:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   ba9ee:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   ba9f2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   ba9f6:	429a      	cmp	r2, r3
int TCPClient::peek() {
   ba9f8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   ba9fa:	d005      	beq.n	baa08 <_ZN9TCPClient4peekEv+0x1e>
   ba9fc:	6963      	ldr	r3, [r4, #20]
   ba9fe:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   baa02:	4413      	add	r3, r2
   baa04:	7918      	ldrb	r0, [r3, #4]
}
   baa06:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   baa08:	6803      	ldr	r3, [r0, #0]
   baa0a:	691b      	ldr	r3, [r3, #16]
   baa0c:	4798      	blx	r3
   baa0e:	2800      	cmp	r0, #0
   baa10:	d1f4      	bne.n	ba9fc <_ZN9TCPClient4peekEv+0x12>
   baa12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   baa16:	e7f6      	b.n	baa06 <_ZN9TCPClient4peekEv+0x1c>

000baa18 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   baa18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baa1a:	6943      	ldr	r3, [r0, #20]
   baa1c:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   baa1e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   baa22:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   baa26:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   baa28:	4605      	mov	r5, r0
   baa2a:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   baa2c:	d016      	beq.n	baa5c <_ZN9TCPClient4readEPhj+0x44>
   baa2e:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   baa30:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   baa34:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   baa38:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   baa3a:	42bc      	cmp	r4, r7
   baa3c:	bf28      	it	cs
   baa3e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   baa40:	3304      	adds	r3, #4
   baa42:	4622      	mov	r2, r4
   baa44:	4419      	add	r1, r3
   baa46:	4630      	mov	r0, r6
   baa48:	f001 fba2 	bl	bc190 <memcpy>
   baa4c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   baa4e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   baa52:	4423      	add	r3, r4
   baa54:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   baa58:	4620      	mov	r0, r4
   baa5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   baa5c:	6803      	ldr	r3, [r0, #0]
   baa5e:	691b      	ldr	r3, [r3, #16]
   baa60:	4798      	blx	r3
   baa62:	2800      	cmp	r0, #0
   baa64:	d1e3      	bne.n	baa2e <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   baa66:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   baa6a:	e7f5      	b.n	baa58 <_ZN9TCPClient4readEPhj+0x40>

000baa6c <_ZN9TCPClient12flush_bufferEv>:
   baa6c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   baa6e:	2300      	movs	r3, #0
   baa70:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   baa74:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   baa76:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   baa7a:	4770      	bx	lr

000baa7c <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   baa7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   baa80:	461f      	mov	r7, r3
    stop();
   baa82:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   baa84:	460c      	mov	r4, r1
    stop();
   baa86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   baa88:	b08a      	sub	sp, #40	; 0x28
   baa8a:	4605      	mov	r5, r0
   baa8c:	4616      	mov	r6, r2
    stop();
   baa8e:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   baa90:	7d23      	ldrb	r3, [r4, #20]
   baa92:	f8d5 8014 	ldr.w	r8, [r5, #20]
   baa96:	2b04      	cmp	r3, #4
   baa98:	bf0c      	ite	eq
   baa9a:	2002      	moveq	r0, #2
   baa9c:	200a      	movne	r0, #10
   baa9e:	2206      	movs	r2, #6
   baaa0:	2101      	movs	r1, #1
   baaa2:	f7fd feeb 	bl	b887c <sock_socket>
   baaa6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   baaaa:	696b      	ldr	r3, [r5, #20]
   baaac:	681b      	ldr	r3, [r3, #0]
   baaae:	2b00      	cmp	r3, #0
   baab0:	da08      	bge.n	baac4 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   baab2:	682b      	ldr	r3, [r5, #0]
   baab4:	4628      	mov	r0, r5
   baab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   baab8:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   baaba:	4798      	blx	r3
}
   baabc:	4620      	mov	r0, r4
   baabe:	b00a      	add	sp, #40	; 0x28
   baac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   baac4:	4628      	mov	r0, r5
   baac6:	f7ff ffd1 	bl	baa6c <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   baaca:	b1b7      	cbz	r7, baafa <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   baacc:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   baace:	a903      	add	r1, sp, #12
   baad0:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   baad2:	9303      	str	r3, [sp, #12]
   baad4:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   baad8:	f7fd fe78 	bl	b87cc <if_index_to_name>
   baadc:	2800      	cmp	r0, #0
   baade:	d1e8      	bne.n	baab2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   baae0:	6968      	ldr	r0, [r5, #20]
   baae2:	2306      	movs	r3, #6
   baae4:	9300      	str	r3, [sp, #0]
   baae6:	6800      	ldr	r0, [r0, #0]
   baae8:	ab03      	add	r3, sp, #12
   baaea:	f241 020b 	movw	r2, #4107	; 0x100b
   baaee:	f640 71ff 	movw	r1, #4095	; 0xfff
   baaf2:	f7fd fe9b 	bl	b882c <sock_setsockopt>
   baaf6:	2800      	cmp	r0, #0
   baaf8:	d1db      	bne.n	baab2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   baafa:	221c      	movs	r2, #28
   baafc:	2100      	movs	r1, #0
   baafe:	a803      	add	r0, sp, #12
   bab00:	f001 fb6e 	bl	bc1e0 <memset>
    if (ip.version() == 4) {
   bab04:	7d23      	ldrb	r3, [r4, #20]
   bab06:	2b04      	cmp	r3, #4
   bab08:	d11d      	bne.n	bab46 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   bab0a:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   bab0e:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   bab10:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   bab14:	f7fd fe72 	bl	b87fc <inet_htons>
   bab18:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   bab1c:	6860      	ldr	r0, [r4, #4]
   bab1e:	f7fd fe65 	bl	b87ec <inet_htonl>
   bab22:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   bab24:	696b      	ldr	r3, [r5, #20]
   bab26:	221c      	movs	r2, #28
   bab28:	6818      	ldr	r0, [r3, #0]
   bab2a:	a903      	add	r1, sp, #12
   bab2c:	f7fd fe8e 	bl	b884c <sock_connect>
   bab30:	2800      	cmp	r0, #0
   bab32:	d1be      	bne.n	baab2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   bab34:	3404      	adds	r4, #4
   bab36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bab38:	696d      	ldr	r5, [r5, #20]
   bab3a:	358c      	adds	r5, #140	; 0x8c
   bab3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bab3e:	6823      	ldr	r3, [r4, #0]
   bab40:	702b      	strb	r3, [r5, #0]
    return 1; // success
   bab42:	2401      	movs	r4, #1
   bab44:	e7ba      	b.n	baabc <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   bab46:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   bab4a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   bab4c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   bab50:	f7fd fe54 	bl	b87fc <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   bab54:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   bab56:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   bab5a:	1d23      	adds	r3, r4, #4
   bab5c:	f104 0714 	add.w	r7, r4, #20
   bab60:	6818      	ldr	r0, [r3, #0]
   bab62:	6859      	ldr	r1, [r3, #4]
   bab64:	4632      	mov	r2, r6
   bab66:	c203      	stmia	r2!, {r0, r1}
   bab68:	3308      	adds	r3, #8
   bab6a:	42bb      	cmp	r3, r7
   bab6c:	4616      	mov	r6, r2
   bab6e:	d1f7      	bne.n	bab60 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   bab70:	e7d8      	b.n	bab24 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000bab74 <_ZN9TCPClient9availableEv>:
{
   bab74:	b530      	push	{r4, r5, lr}
   bab76:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   bab78:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   bab7c:	b08b      	sub	sp, #44	; 0x2c
   bab7e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   bab80:	b12b      	cbz	r3, bab8e <_ZN9TCPClient9availableEv+0x1a>
   bab82:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   bab86:	429a      	cmp	r2, r3
   bab88:	d101      	bne.n	bab8e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   bab8a:	f7ff ff6f 	bl	baa6c <_ZN9TCPClient12flush_bufferEv>
   bab8e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   bab90:	6808      	ldr	r0, [r1, #0]
   bab92:	2800      	cmp	r0, #0
   bab94:	db18      	blt.n	babc8 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   bab96:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   bab9a:	2d7f      	cmp	r5, #127	; 0x7f
   bab9c:	d814      	bhi.n	babc8 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   bab9e:	3104      	adds	r1, #4
   baba0:	2308      	movs	r3, #8
   baba2:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   baba6:	4429      	add	r1, r5
   baba8:	f7fd fe58 	bl	b885c <sock_recv>
            if (ret > 0) {
   babac:	2800      	cmp	r0, #0
   babae:	dd13      	ble.n	babd8 <_ZN9TCPClient9availableEv+0x64>
   babb0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   babb2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   babb6:	b90a      	cbnz	r2, babbc <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   babb8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   babbc:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   babbe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   babc2:	4410      	add	r0, r2
   babc4:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   babc8:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   babca:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   babce:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   babd2:	1ac0      	subs	r0, r0, r3
   babd4:	b00b      	add	sp, #44	; 0x2c
   babd6:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   babd8:	f7fd ffac 	bl	b8b34 <__errno>
   babdc:	6803      	ldr	r3, [r0, #0]
   babde:	2b0b      	cmp	r3, #11
   babe0:	d0f2      	beq.n	babc8 <_ZN9TCPClient9availableEv+0x54>
   babe2:	f7fd ffa7 	bl	b8b34 <__errno>
   babe6:	6803      	ldr	r3, [r0, #0]
   babe8:	2b0b      	cmp	r3, #11
   babea:	d0ed      	beq.n	babc8 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   babec:	2320      	movs	r3, #32
   babee:	2500      	movs	r5, #0
   babf0:	e9cd 3502 	strd	r3, r5, [sp, #8]
   babf4:	f7fd ff9e 	bl	b8b34 <__errno>
   babf8:	6803      	ldr	r3, [r0, #0]
   babfa:	9301      	str	r3, [sp, #4]
   babfc:	4b08      	ldr	r3, [pc, #32]	; (bac20 <_ZN9TCPClient9availableEv+0xac>)
   babfe:	4909      	ldr	r1, [pc, #36]	; (bac24 <_ZN9TCPClient9availableEv+0xb0>)
   bac00:	9300      	str	r3, [sp, #0]
   bac02:	aa02      	add	r2, sp, #8
   bac04:	462b      	mov	r3, r5
   bac06:	2032      	movs	r0, #50	; 0x32
   bac08:	f7fd feb8 	bl	b897c <log_message>
                    sock_close(d_->sock);
   bac0c:	6963      	ldr	r3, [r4, #20]
   bac0e:	6818      	ldr	r0, [r3, #0]
   bac10:	f7fd fe14 	bl	b883c <sock_close>
   bac14:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   bac16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bac1a:	601a      	str	r2, [r3, #0]
   bac1c:	e7d4      	b.n	babc8 <_ZN9TCPClient9availableEv+0x54>
   bac1e:	bf00      	nop
   bac20:	000bea9b 	.word	0x000bea9b
   bac24:	000bea94 	.word	0x000bea94

000bac28 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   bac28:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   bac2a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   bac2c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   bac2e:	6818      	ldr	r0, [r3, #0]
   bac30:	2800      	cmp	r0, #0
   bac32:	db01      	blt.n	bac38 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   bac34:	f7fd fe02 	bl	b883c <sock_close>
   bac38:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   bac3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bac3e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   bac40:	6960      	ldr	r0, [r4, #20]
   bac42:	2211      	movs	r2, #17
   bac44:	2100      	movs	r1, #0
   bac46:	308c      	adds	r0, #140	; 0x8c
   bac48:	f001 faca 	bl	bc1e0 <memset>
    flush_buffer();
   bac4c:	4620      	mov	r0, r4
}
   bac4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   bac52:	f7ff bf0b 	b.w	baa6c <_ZN9TCPClient12flush_bufferEv>

000bac56 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   bac56:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   bac58:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   bac5a:	4604      	mov	r4, r0
          total(0) {
   bac5c:	6001      	str	r1, [r0, #0]
   bac5e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   bac62:	3088      	adds	r0, #136	; 0x88
   bac64:	f7ff fa24 	bl	ba0b0 <_ZN9IPAddressC1Ev>
}
   bac68:	4620      	mov	r0, r4
   bac6a:	bd10      	pop	{r4, pc}

000bac6c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   bac6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bac6e:	2300      	movs	r3, #0
   bac70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   bac74:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   bac78:	4a0e      	ldr	r2, [pc, #56]	; (bacb4 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   bac7a:	6103      	str	r3, [r0, #16]
   bac7c:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bac7e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   bac80:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bac82:	20ac      	movs	r0, #172	; 0xac
   bac84:	9101      	str	r1, [sp, #4]
   bac86:	f7f9 fa06 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bac8a:	1e05      	subs	r5, r0, #0
   bac8c:	f105 060c 	add.w	r6, r5, #12
   bac90:	d008      	beq.n	baca4 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   bac92:	2301      	movs	r3, #1
   bac94:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   bac98:	4b07      	ldr	r3, [pc, #28]	; (bacb8 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bac9a:	9901      	ldr	r1, [sp, #4]
   bac9c:	602b      	str	r3, [r5, #0]
   bac9e:	4630      	mov	r0, r6
   baca0:	f7ff ffd9 	bl	bac56 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   baca4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   baca6:	e9c4 6505 	strd	r6, r5, [r4, #20]
   bacaa:	f7ff fedf 	bl	baa6c <_ZN9TCPClient12flush_bufferEv>
}
   bacae:	b002      	add	sp, #8
   bacb0:	bd70      	pop	{r4, r5, r6, pc}
   bacb2:	bf00      	nop
   bacb4:	000bead0 	.word	0x000bead0
   bacb8:	000beab4 	.word	0x000beab4

000bacbc <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   bacbc:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   bacbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   bacc2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   bacc4:	f7ff ffd2 	bl	bac6c <_ZN9TCPClientC1Ei>
}
   bacc8:	4620      	mov	r0, r4
   bacca:	bd10      	pop	{r4, pc}

000baccc <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   baccc:	b510      	push	{r4, lr}
   bacce:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   bacd0:	6800      	ldr	r0, [r0, #0]
   bacd2:	2800      	cmp	r0, #0
   bacd4:	db01      	blt.n	bacda <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   bacd6:	f7fd fdb1 	bl	b883c <sock_close>
    }
}
   bacda:	4620      	mov	r0, r4
   bacdc:	bd10      	pop	{r4, pc}

000bacde <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   bacde:	300c      	adds	r0, #12
   bace0:	f7ff bff4 	b.w	baccc <_ZN9TCPClient4DataD1Ev>

000bace4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bace4:	4b02      	ldr	r3, [pc, #8]	; (bacf0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bace6:	681a      	ldr	r2, [r3, #0]
   bace8:	4b02      	ldr	r3, [pc, #8]	; (bacf4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bacea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bacec:	4770      	bx	lr
   bacee:	bf00      	nop
   bacf0:	200350c0 	.word	0x200350c0
   bacf4:	2003e6fc 	.word	0x2003e6fc

000bacf8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bacf8:	4770      	bx	lr

000bacfa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bacfa:	7441      	strb	r1, [r0, #17]
}
   bacfc:	4770      	bx	lr

000bacfe <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bacfe:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bad00:	7c00      	ldrb	r0, [r0, #16]
   bad02:	f7fd fdeb 	bl	b88dc <hal_usart_available_data_for_write>
}
   bad06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bad0a:	bd08      	pop	{r3, pc}

000bad0c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bad0c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bad0e:	7c00      	ldrb	r0, [r0, #16]
   bad10:	f7fd fdc4 	bl	b889c <hal_usart_available>
}
   bad14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bad18:	bd08      	pop	{r3, pc}

000bad1a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bad1a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bad1c:	7c00      	ldrb	r0, [r0, #16]
   bad1e:	f7fd fdcd 	bl	b88bc <hal_usart_peek>
}
   bad22:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bad26:	bd08      	pop	{r3, pc}

000bad28 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bad28:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bad2a:	7c00      	ldrb	r0, [r0, #16]
   bad2c:	f7fd fdbe 	bl	b88ac <hal_usart_read>
}
   bad30:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bad34:	bd08      	pop	{r3, pc}

000bad36 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bad36:	7c00      	ldrb	r0, [r0, #16]
   bad38:	f7fd bdc8 	b.w	b88cc <hal_usart_flush>

000bad3c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bad3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bad3e:	7c45      	ldrb	r5, [r0, #17]
{
   bad40:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bad42:	b12d      	cbz	r5, bad50 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bad44:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bad46:	b003      	add	sp, #12
   bad48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bad4c:	f7fd bd9e 	b.w	b888c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bad50:	7c00      	ldrb	r0, [r0, #16]
   bad52:	9101      	str	r1, [sp, #4]
   bad54:	f7fd fdc2 	bl	b88dc <hal_usart_available_data_for_write>
   bad58:	2800      	cmp	r0, #0
   bad5a:	9901      	ldr	r1, [sp, #4]
   bad5c:	dcf2      	bgt.n	bad44 <_ZN11USARTSerial5writeEh+0x8>
}
   bad5e:	4628      	mov	r0, r5
   bad60:	b003      	add	sp, #12
   bad62:	bd30      	pop	{r4, r5, pc}

000bad64 <_ZN11USARTSerialD0Ev>:
   bad64:	b510      	push	{r4, lr}
   bad66:	2114      	movs	r1, #20
   bad68:	4604      	mov	r4, r0
   bad6a:	f7f9 f99a 	bl	b40a2 <_ZdlPvj>
   bad6e:	4620      	mov	r0, r4
   bad70:	bd10      	pop	{r4, pc}
	...

000bad74 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bad74:	b510      	push	{r4, lr}
   bad76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bad7a:	4604      	mov	r4, r0
   bad7c:	4608      	mov	r0, r1
   bad7e:	4611      	mov	r1, r2
   bad80:	2200      	movs	r2, #0
   bad82:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bad86:	4b04      	ldr	r3, [pc, #16]	; (bad98 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bad88:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bad8a:	2301      	movs	r3, #1
  _serial = serial;
   bad8c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bad8e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bad90:	f7fd fdac 	bl	b88ec <hal_usart_init_ex>
}
   bad94:	4620      	mov	r0, r4
   bad96:	bd10      	pop	{r4, pc}
   bad98:	000beb38 	.word	0x000beb38

000bad9c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bad9c:	7441      	strb	r1, [r0, #17]
}
   bad9e:	4770      	bx	lr

000bada0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bada0:	4770      	bx	lr

000bada2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bada2:	4770      	bx	lr

000bada4 <_ZN9USBSerial4readEv>:
{
   bada4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bada6:	2100      	movs	r1, #0
   bada8:	7c00      	ldrb	r0, [r0, #16]
   badaa:	f7fd fdc7 	bl	b893c <HAL_USB_USART_Receive_Data>
}
   badae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   badb2:	bd08      	pop	{r3, pc}

000badb4 <_ZN9USBSerial4peekEv>:
{
   badb4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   badb6:	2101      	movs	r1, #1
   badb8:	7c00      	ldrb	r0, [r0, #16]
   badba:	f7fd fdbf 	bl	b893c <HAL_USB_USART_Receive_Data>
}
   badbe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   badc2:	bd08      	pop	{r3, pc}

000badc4 <_ZN9USBSerial17availableForWriteEv>:
{
   badc4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   badc6:	7c00      	ldrb	r0, [r0, #16]
   badc8:	f7fd fdb0 	bl	b892c <HAL_USB_USART_Available_Data_For_Write>
}
   badcc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   badd0:	bd08      	pop	{r3, pc}

000badd2 <_ZN9USBSerial9availableEv>:
{
   badd2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   badd4:	7c00      	ldrb	r0, [r0, #16]
   badd6:	f7fd fda1 	bl	b891c <HAL_USB_USART_Available_Data>
}
   badda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   badde:	bd08      	pop	{r3, pc}

000bade0 <_ZN9USBSerial5writeEh>:
{
   bade0:	b513      	push	{r0, r1, r4, lr}
   bade2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bade4:	7c00      	ldrb	r0, [r0, #16]
{
   bade6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bade8:	f7fd fda0 	bl	b892c <HAL_USB_USART_Available_Data_For_Write>
   badec:	2800      	cmp	r0, #0
   badee:	9901      	ldr	r1, [sp, #4]
   badf0:	dc01      	bgt.n	badf6 <_ZN9USBSerial5writeEh+0x16>
   badf2:	7c60      	ldrb	r0, [r4, #17]
   badf4:	b120      	cbz	r0, bae00 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   badf6:	7c20      	ldrb	r0, [r4, #16]
   badf8:	f7fd fda8 	bl	b894c <HAL_USB_USART_Send_Data>
   badfc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bae00:	b002      	add	sp, #8
   bae02:	bd10      	pop	{r4, pc}

000bae04 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bae04:	7c00      	ldrb	r0, [r0, #16]
   bae06:	f7fd bda9 	b.w	b895c <HAL_USB_USART_Flush_Data>

000bae0a <_ZN9USBSerialD0Ev>:
   bae0a:	b510      	push	{r4, lr}
   bae0c:	2114      	movs	r1, #20
   bae0e:	4604      	mov	r4, r0
   bae10:	f7f9 f947 	bl	b40a2 <_ZdlPvj>
   bae14:	4620      	mov	r0, r4
   bae16:	bd10      	pop	{r4, pc}

000bae18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bae18:	b510      	push	{r4, lr}
   bae1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bae1e:	4604      	mov	r4, r0
   bae20:	4608      	mov	r0, r1
   bae22:	2100      	movs	r1, #0
   bae24:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bae28:	4b04      	ldr	r3, [pc, #16]	; (bae3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bae2a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bae2c:	2301      	movs	r3, #1
  _serial = serial;
   bae2e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bae30:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bae32:	4611      	mov	r1, r2
   bae34:	f7fd fd62 	bl	b88fc <HAL_USB_USART_Init>
}
   bae38:	4620      	mov	r0, r4
   bae3a:	bd10      	pop	{r4, pc}
   bae3c:	000beb68 	.word	0x000beb68

000bae40 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bae40:	7c00      	ldrb	r0, [r0, #16]
   bae42:	2200      	movs	r2, #0
   bae44:	f7fd bd62 	b.w	b890c <HAL_USB_USART_Begin>

000bae48 <_Z19acquireSerialBufferv>:
{
   bae48:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bae4a:	2214      	movs	r2, #20
{
   bae4c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bae4e:	2100      	movs	r1, #0
   bae50:	f001 f9c6 	bl	bc1e0 <memset>
}
   bae54:	4620      	mov	r0, r4
   bae56:	bd10      	pop	{r4, pc}

000bae58 <_Z16_fetch_usbserialv>:
{
   bae58:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bae5a:	4c0f      	ldr	r4, [pc, #60]	; (bae98 <_Z16_fetch_usbserialv+0x40>)
{
   bae5c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bae5e:	a803      	add	r0, sp, #12
   bae60:	f7ff fff2 	bl	bae48 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bae64:	7821      	ldrb	r1, [r4, #0]
   bae66:	f3bf 8f5b 	dmb	ish
   bae6a:	f011 0101 	ands.w	r1, r1, #1
   bae6e:	d10f      	bne.n	bae90 <_Z16_fetch_usbserialv+0x38>
   bae70:	4620      	mov	r0, r4
   bae72:	9101      	str	r1, [sp, #4]
   bae74:	f7f9 f917 	bl	b40a6 <__cxa_guard_acquire>
   bae78:	9901      	ldr	r1, [sp, #4]
   bae7a:	b148      	cbz	r0, bae90 <_Z16_fetch_usbserialv+0x38>
   bae7c:	aa03      	add	r2, sp, #12
   bae7e:	4807      	ldr	r0, [pc, #28]	; (bae9c <_Z16_fetch_usbserialv+0x44>)
   bae80:	f7ff ffca 	bl	bae18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bae84:	4620      	mov	r0, r4
   bae86:	f7f9 f913 	bl	b40b0 <__cxa_guard_release>
   bae8a:	4805      	ldr	r0, [pc, #20]	; (baea0 <_Z16_fetch_usbserialv+0x48>)
   bae8c:	f001 f966 	bl	bc15c <atexit>
	return _usbserial;
}
   bae90:	4802      	ldr	r0, [pc, #8]	; (bae9c <_Z16_fetch_usbserialv+0x44>)
   bae92:	b008      	add	sp, #32
   bae94:	bd10      	pop	{r4, pc}
   bae96:	bf00      	nop
   bae98:	2003e700 	.word	0x2003e700
   bae9c:	2003e704 	.word	0x2003e704
   baea0:	000bada1 	.word	0x000bada1

000baea4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   baea4:	2200      	movs	r2, #0
   baea6:	6840      	ldr	r0, [r0, #4]
   baea8:	4611      	mov	r1, r2
   baeaa:	f7fd bdb3 	b.w	b8a14 <network_ready>

000baeae <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   baeae:	2200      	movs	r2, #0
   baeb0:	6840      	ldr	r0, [r0, #4]
   baeb2:	4611      	mov	r1, r2
   baeb4:	f7fd bdce 	b.w	b8a54 <network_listening>

000baeb8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   baeb8:	2200      	movs	r2, #0
   baeba:	6840      	ldr	r0, [r0, #4]
   baebc:	4611      	mov	r1, r2
   baebe:	f7fd bde9 	b.w	b8a94 <network_get_listen_timeout>

000baec2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   baec2:	6840      	ldr	r0, [r0, #4]
   baec4:	2200      	movs	r2, #0
   baec6:	f7fd bddd 	b.w	b8a84 <network_set_listen_timeout>

000baeca <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   baeca:	6840      	ldr	r0, [r0, #4]
   baecc:	2200      	movs	r2, #0
   baece:	f081 0101 	eor.w	r1, r1, #1
   baed2:	f7fd bdb7 	b.w	b8a44 <network_listen>

000baed6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   baed6:	2300      	movs	r3, #0
   baed8:	6840      	ldr	r0, [r0, #4]
   baeda:	461a      	mov	r2, r3
   baedc:	4619      	mov	r1, r3
   baede:	f7fd bda9 	b.w	b8a34 <network_off>

000baee2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   baee2:	2300      	movs	r3, #0
   baee4:	6840      	ldr	r0, [r0, #4]
   baee6:	461a      	mov	r2, r3
   baee8:	4619      	mov	r1, r3
   baeea:	f7fd bd9b 	b.w	b8a24 <network_on>

000baeee <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   baeee:	2200      	movs	r2, #0
   baef0:	6840      	ldr	r0, [r0, #4]
   baef2:	4611      	mov	r1, r2
   baef4:	f7fd bd7e 	b.w	b89f4 <network_connecting>

000baef8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   baef8:	6840      	ldr	r0, [r0, #4]
   baefa:	2200      	movs	r2, #0
   baefc:	2102      	movs	r1, #2
   baefe:	f7fd bd81 	b.w	b8a04 <network_disconnect>

000baf02 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   baf02:	2300      	movs	r3, #0
   baf04:	6840      	ldr	r0, [r0, #4]
   baf06:	461a      	mov	r2, r3
   baf08:	f7fd bd6c 	b.w	b89e4 <network_connect>

000baf0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   baf0c:	4b02      	ldr	r3, [pc, #8]	; (baf18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   baf0e:	2204      	movs	r2, #4
   baf10:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   baf12:	4a02      	ldr	r2, [pc, #8]	; (baf1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   baf14:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   baf16:	4770      	bx	lr
   baf18:	2003e718 	.word	0x2003e718
   baf1c:	000beb98 	.word	0x000beb98

000baf20 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   baf20:	b510      	push	{r4, lr}
   baf22:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   baf24:	f001 f9a4 	bl	bc270 <strlen>
   baf28:	3801      	subs	r0, #1
   baf2a:	1823      	adds	r3, r4, r0
   baf2c:	4620      	mov	r0, r4
	while(i<j){
   baf2e:	4283      	cmp	r3, r0
   baf30:	d906      	bls.n	baf40 <_Z11str_reversePc+0x20>
		c = *i;
   baf32:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   baf34:	7819      	ldrb	r1, [r3, #0]
   baf36:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   baf3a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   baf3e:	e7f6      	b.n	baf2e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   baf40:	bd10      	pop	{r4, pc}

000baf42 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   baf42:	b570      	push	{r4, r5, r6, lr}
   baf44:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   baf46:	1e91      	subs	r1, r2, #2
   baf48:	2922      	cmp	r1, #34	; 0x22
   baf4a:	d81d      	bhi.n	baf88 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   baf4c:	4625      	mov	r5, r4

	div_t result;
	while(a){
   baf4e:	b930      	cbnz	r0, baf5e <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   baf50:	4423      	add	r3, r4
            *ptr++ = '0';
   baf52:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   baf54:	429d      	cmp	r5, r3
   baf56:	d210      	bcs.n	baf7a <ultoa+0x38>
            *ptr++ = '0';
   baf58:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   baf5c:	e7fa      	b.n	baf54 <ultoa+0x12>
            result.quot = a/radix;
   baf5e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   baf62:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   baf66:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   baf68:	2809      	cmp	r0, #9
                *ptr += '0';
   baf6a:	bf94      	ite	ls
   baf6c:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   baf6e:	3157      	addhi	r1, #87	; 0x57
   baf70:	b2c9      	uxtb	r1, r1
   baf72:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   baf76:	4630      	mov	r0, r6
	while(a){
   baf78:	e7e9      	b.n	baf4e <ultoa+0xc>

	*ptr = '\0';
   baf7a:	2300      	movs	r3, #0
	str_reverse(buffer);
   baf7c:	4620      	mov	r0, r4
	*ptr = '\0';
   baf7e:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   baf80:	f7ff ffce 	bl	baf20 <_Z11str_reversePc>
	return buffer;
   baf84:	4620      	mov	r0, r4
}
   baf86:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   baf88:	2000      	movs	r0, #0
   baf8a:	e7fc      	b.n	baf86 <ultoa+0x44>

000baf8c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   baf8c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   baf8e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   baf90:	460c      	mov	r4, r1
   baf92:	4615      	mov	r5, r2
	if(a<0){
   baf94:	da0e      	bge.n	bafb4 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   baf96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   baf9a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   baf9e:	bf14      	ite	ne
   bafa0:	4258      	negne	r0, r3
   bafa2:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   bafa4:	2301      	movs	r3, #1
		*buffer = '-';
   bafa6:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   bafa8:	462a      	mov	r2, r5
   bafaa:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   bafac:	f7ff ffc9 	bl	baf42 <ultoa>
	}
	return buffer;
}
   bafb0:	4620      	mov	r0, r4
   bafb2:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   bafb4:	2301      	movs	r3, #1
   bafb6:	e7f9      	b.n	bafac <itoa+0x20>

000bafb8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bafb8:	4b01      	ldr	r3, [pc, #4]	; (bafc0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bafba:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bafbc:	4770      	bx	lr
   bafbe:	bf00      	nop
   bafc0:	200350c8 	.word	0x200350c8

000bafc4 <serialEventRun>:
{
   bafc4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bafc6:	4b0b      	ldr	r3, [pc, #44]	; (baff4 <serialEventRun+0x30>)
   bafc8:	b143      	cbz	r3, bafdc <serialEventRun+0x18>
   bafca:	f7ff ff45 	bl	bae58 <_Z16_fetch_usbserialv>
   bafce:	6803      	ldr	r3, [r0, #0]
   bafd0:	691b      	ldr	r3, [r3, #16]
   bafd2:	4798      	blx	r3
   bafd4:	2800      	cmp	r0, #0
   bafd6:	dd01      	ble.n	bafdc <serialEventRun+0x18>
        serialEvent();
   bafd8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bafdc:	4b06      	ldr	r3, [pc, #24]	; (baff8 <serialEventRun+0x34>)
   bafde:	b143      	cbz	r3, baff2 <serialEventRun+0x2e>
   bafe0:	f000 f8c8 	bl	bb174 <_Z22__fetch_global_Serial1v>
   bafe4:	6803      	ldr	r3, [r0, #0]
   bafe6:	691b      	ldr	r3, [r3, #16]
   bafe8:	4798      	blx	r3
   bafea:	2800      	cmp	r0, #0
   bafec:	dd01      	ble.n	baff2 <serialEventRun+0x2e>
        serialEvent1();
   bafee:	f3af 8000 	nop.w
}
   baff2:	bd08      	pop	{r3, pc}
	...

000baffc <_post_loop>:
{
   baffc:	b508      	push	{r3, lr}
	serialEventRun();
   baffe:	f7ff ffe1 	bl	bafc4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bb002:	f7fd fb8b 	bl	b871c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bb006:	4b01      	ldr	r3, [pc, #4]	; (bb00c <_post_loop+0x10>)
   bb008:	6018      	str	r0, [r3, #0]
}
   bb00a:	bd08      	pop	{r3, pc}
   bb00c:	2003e728 	.word	0x2003e728

000bb010 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb010:	4805      	ldr	r0, [pc, #20]	; (bb028 <_Z33system_initialize_user_backup_ramv+0x18>)
   bb012:	4a06      	ldr	r2, [pc, #24]	; (bb02c <_Z33system_initialize_user_backup_ramv+0x1c>)
   bb014:	4906      	ldr	r1, [pc, #24]	; (bb030 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bb016:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb018:	1a12      	subs	r2, r2, r0
   bb01a:	f001 f8b9 	bl	bc190 <memcpy>
    __backup_sram_signature = signature;
   bb01e:	4b05      	ldr	r3, [pc, #20]	; (bb034 <_Z33system_initialize_user_backup_ramv+0x24>)
   bb020:	4a05      	ldr	r2, [pc, #20]	; (bb038 <_Z33system_initialize_user_backup_ramv+0x28>)
   bb022:	601a      	str	r2, [r3, #0]
}
   bb024:	bd08      	pop	{r3, pc}
   bb026:	bf00      	nop
   bb028:	2003f400 	.word	0x2003f400
   bb02c:	2003f404 	.word	0x2003f404
   bb030:	000bf0d4 	.word	0x000bf0d4
   bb034:	2003f400 	.word	0x2003f400
   bb038:	9a271c1e 	.word	0x9a271c1e

000bb03c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bb03c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb03e:	2300      	movs	r3, #0
   bb040:	9300      	str	r3, [sp, #0]
   bb042:	461a      	mov	r2, r3
   bb044:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb048:	f7fd fcba 	bl	b89c0 <system_ctrl_set_result>
}
   bb04c:	b003      	add	sp, #12
   bb04e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb054 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bb054:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bb056:	8843      	ldrh	r3, [r0, #2]
   bb058:	2b0a      	cmp	r3, #10
   bb05a:	d008      	beq.n	bb06e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bb05c:	2b50      	cmp	r3, #80	; 0x50
   bb05e:	d10b      	bne.n	bb078 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bb060:	4b09      	ldr	r3, [pc, #36]	; (bb088 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bb062:	681b      	ldr	r3, [r3, #0]
   bb064:	b14b      	cbz	r3, bb07a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bb066:	b003      	add	sp, #12
   bb068:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bb06c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bb06e:	f7ff ffe5 	bl	bb03c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bb072:	b003      	add	sp, #12
   bb074:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb078:	2300      	movs	r3, #0
   bb07a:	9300      	str	r3, [sp, #0]
   bb07c:	461a      	mov	r2, r3
   bb07e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb082:	f7fd fc9d 	bl	b89c0 <system_ctrl_set_result>
}
   bb086:	e7f4      	b.n	bb072 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bb088:	2003e724 	.word	0x2003e724

000bb08c <module_user_init_hook>:
{
   bb08c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bb08e:	4812      	ldr	r0, [pc, #72]	; (bb0d8 <module_user_init_hook+0x4c>)
   bb090:	2100      	movs	r1, #0
   bb092:	f7fd fd5f 	bl	b8b54 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bb096:	4b11      	ldr	r3, [pc, #68]	; (bb0dc <module_user_init_hook+0x50>)
   bb098:	681a      	ldr	r2, [r3, #0]
   bb09a:	4b11      	ldr	r3, [pc, #68]	; (bb0e0 <module_user_init_hook+0x54>)
   bb09c:	429a      	cmp	r2, r3
   bb09e:	4b11      	ldr	r3, [pc, #68]	; (bb0e4 <module_user_init_hook+0x58>)
   bb0a0:	bf0c      	ite	eq
   bb0a2:	2201      	moveq	r2, #1
   bb0a4:	2200      	movne	r2, #0
   bb0a6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bb0a8:	d001      	beq.n	bb0ae <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bb0aa:	f7ff ffb1 	bl	bb010 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bb0ae:	f7fd fb25 	bl	b86fc <HAL_RNG_GetRandomNumber>
   bb0b2:	4604      	mov	r4, r0
    srand(seed);
   bb0b4:	f001 f89c 	bl	bc1f0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bb0b8:	4b0b      	ldr	r3, [pc, #44]	; (bb0e8 <module_user_init_hook+0x5c>)
   bb0ba:	b113      	cbz	r3, bb0c2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bb0bc:	4620      	mov	r0, r4
   bb0be:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bb0c2:	2100      	movs	r1, #0
   bb0c4:	4808      	ldr	r0, [pc, #32]	; (bb0e8 <module_user_init_hook+0x5c>)
   bb0c6:	f7fd fc85 	bl	b89d4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bb0ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bb0ce:	4807      	ldr	r0, [pc, #28]	; (bb0ec <module_user_init_hook+0x60>)
   bb0d0:	2100      	movs	r1, #0
   bb0d2:	f7fd bc6b 	b.w	b89ac <system_ctrl_set_app_request_handler>
   bb0d6:	bf00      	nop
   bb0d8:	000bafb9 	.word	0x000bafb9
   bb0dc:	2003f400 	.word	0x2003f400
   bb0e0:	9a271c1e 	.word	0x9a271c1e
   bb0e4:	2003e720 	.word	0x2003e720
   bb0e8:	00000000 	.word	0x00000000
   bb0ec:	000bb055 	.word	0x000bb055

000bb0f0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb0f0:	4770      	bx	lr
	...

000bb0f4 <_Z19__fetch_global_Wirev>:
{
   bb0f4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb0f6:	4d0e      	ldr	r5, [pc, #56]	; (bb130 <_Z19__fetch_global_Wirev+0x3c>)
   bb0f8:	7829      	ldrb	r1, [r5, #0]
   bb0fa:	f3bf 8f5b 	dmb	ish
   bb0fe:	f011 0401 	ands.w	r4, r1, #1
{
   bb102:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb104:	d111      	bne.n	bb12a <_Z19__fetch_global_Wirev+0x36>
   bb106:	4628      	mov	r0, r5
   bb108:	f7f8 ffcd 	bl	b40a6 <__cxa_guard_acquire>
   bb10c:	b168      	cbz	r0, bb12a <_Z19__fetch_global_Wirev+0x36>
   bb10e:	a801      	add	r0, sp, #4
   bb110:	f7f9 faee 	bl	b46f0 <_Z17acquireWireBufferv>
   bb114:	aa01      	add	r2, sp, #4
   bb116:	4621      	mov	r1, r4
   bb118:	4806      	ldr	r0, [pc, #24]	; (bb134 <_Z19__fetch_global_Wirev+0x40>)
   bb11a:	f7fe ff3d 	bl	b9f98 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb11e:	4628      	mov	r0, r5
   bb120:	f7f8 ffc6 	bl	b40b0 <__cxa_guard_release>
   bb124:	4804      	ldr	r0, [pc, #16]	; (bb138 <_Z19__fetch_global_Wirev+0x44>)
   bb126:	f001 f819 	bl	bc15c <atexit>
	return wire;
}
   bb12a:	4802      	ldr	r0, [pc, #8]	; (bb134 <_Z19__fetch_global_Wirev+0x40>)
   bb12c:	b007      	add	sp, #28
   bb12e:	bd30      	pop	{r4, r5, pc}
   bb130:	2003e72c 	.word	0x2003e72c
   bb134:	2003e730 	.word	0x2003e730
   bb138:	000bb0f1 	.word	0x000bb0f1

000bb13c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb13c:	4770      	bx	lr
	...

000bb140 <_Z20acquireSerial1Bufferv>:
{
   bb140:	b538      	push	{r3, r4, r5, lr}
   bb142:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bb144:	2514      	movs	r5, #20
   bb146:	462a      	mov	r2, r5
   bb148:	2100      	movs	r1, #0
   bb14a:	f001 f849 	bl	bc1e0 <memset>
   bb14e:	8025      	strh	r5, [r4, #0]
   bb150:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb152:	4907      	ldr	r1, [pc, #28]	; (bb170 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bb154:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb156:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bb158:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb15a:	f000 f82f 	bl	bb1bc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb15e:	4904      	ldr	r1, [pc, #16]	; (bb170 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bb160:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb162:	4628      	mov	r0, r5
   bb164:	f000 f82a 	bl	bb1bc <_ZnajRKSt9nothrow_t>
    };
   bb168:	60e0      	str	r0, [r4, #12]
}
   bb16a:	4620      	mov	r0, r4
   bb16c:	bd38      	pop	{r3, r4, r5, pc}
   bb16e:	bf00      	nop
   bb170:	000bebcc 	.word	0x000bebcc

000bb174 <_Z22__fetch_global_Serial1v>:
{
   bb174:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb176:	4d0e      	ldr	r5, [pc, #56]	; (bb1b0 <_Z22__fetch_global_Serial1v+0x3c>)
   bb178:	7829      	ldrb	r1, [r5, #0]
   bb17a:	f3bf 8f5b 	dmb	ish
   bb17e:	f011 0401 	ands.w	r4, r1, #1
{
   bb182:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb184:	d111      	bne.n	bb1aa <_Z22__fetch_global_Serial1v+0x36>
   bb186:	4628      	mov	r0, r5
   bb188:	f7f8 ff8d 	bl	b40a6 <__cxa_guard_acquire>
   bb18c:	b168      	cbz	r0, bb1aa <_Z22__fetch_global_Serial1v+0x36>
   bb18e:	a801      	add	r0, sp, #4
   bb190:	f7ff ffd6 	bl	bb140 <_Z20acquireSerial1Bufferv>
   bb194:	aa01      	add	r2, sp, #4
   bb196:	4621      	mov	r1, r4
   bb198:	4806      	ldr	r0, [pc, #24]	; (bb1b4 <_Z22__fetch_global_Serial1v+0x40>)
   bb19a:	f7ff fdeb 	bl	bad74 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bb19e:	4628      	mov	r0, r5
   bb1a0:	f7f8 ff86 	bl	b40b0 <__cxa_guard_release>
   bb1a4:	4804      	ldr	r0, [pc, #16]	; (bb1b8 <_Z22__fetch_global_Serial1v+0x44>)
   bb1a6:	f000 ffd9 	bl	bc15c <atexit>
    return serial1;
}
   bb1aa:	4802      	ldr	r0, [pc, #8]	; (bb1b4 <_Z22__fetch_global_Serial1v+0x40>)
   bb1ac:	b007      	add	sp, #28
   bb1ae:	bd30      	pop	{r4, r5, pc}
   bb1b0:	2003e744 	.word	0x2003e744
   bb1b4:	2003e748 	.word	0x2003e748
   bb1b8:	000bb13d 	.word	0x000bb13d

000bb1bc <_ZnajRKSt9nothrow_t>:
   bb1bc:	f7f8 bf6d 	b.w	b409a <_Znaj>

000bb1c0 <_ZSt17__throw_bad_allocv>:
   bb1c0:	b508      	push	{r3, lr}
   bb1c2:	f7fd fca7 	bl	b8b14 <abort>

000bb1c6 <_ZSt19__throw_logic_errorPKc>:
   bb1c6:	b508      	push	{r3, lr}
   bb1c8:	f7fd fca4 	bl	b8b14 <abort>

000bb1cc <_ZSt20__throw_length_errorPKc>:
   bb1cc:	b508      	push	{r3, lr}
   bb1ce:	f7fd fca1 	bl	b8b14 <abort>

000bb1d2 <_ZSt25__throw_bad_function_callv>:
   bb1d2:	b508      	push	{r3, lr}
   bb1d4:	f7fd fc9e 	bl	b8b14 <abort>

000bb1d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bb1d8:	4901      	ldr	r1, [pc, #4]	; (bb1e0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bb1da:	f000 b963 	b.w	bb4a4 <_ZNKSt9type_infoeqERKS_>
   bb1de:	bf00      	nop
   bb1e0:	000bebe8 	.word	0x000bebe8

000bb1e4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   bb1e4:	b10a      	cbz	r2, bb1ea <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   bb1e6:	f000 bfd3 	b.w	bc190 <memcpy>
   bb1ea:	4770      	bx	lr

000bb1ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   bb1ec:	b508      	push	{r3, lr}
   bb1ee:	680b      	ldr	r3, [r1, #0]
   bb1f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   bb1f4:	d302      	bcc.n	bb1fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   bb1f6:	480d      	ldr	r0, [pc, #52]	; (bb22c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   bb1f8:	f7ff ffe8 	bl	bb1cc <_ZSt20__throw_length_errorPKc>
   bb1fc:	4293      	cmp	r3, r2
   bb1fe:	d90b      	bls.n	bb218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   bb200:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   bb204:	ea4f 0042 	mov.w	r0, r2, lsl #1
   bb208:	d206      	bcs.n	bb218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   bb20a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   bb20e:	bf2a      	itet	cs
   bb210:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   bb214:	6008      	strcc	r0, [r1, #0]
   bb216:	600b      	strcs	r3, [r1, #0]
   bb218:	6808      	ldr	r0, [r1, #0]
   bb21a:	3001      	adds	r0, #1
   bb21c:	d501      	bpl.n	bb222 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   bb21e:	f7ff ffcf 	bl	bb1c0 <_ZSt17__throw_bad_allocv>
   bb222:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bb226:	f7f8 bf36 	b.w	b4096 <_Znwj>
   bb22a:	bf00      	nop
   bb22c:	000bebf0 	.word	0x000bebf0

000bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   bb230:	f850 3b08 	ldr.w	r3, [r0], #8
   bb234:	4283      	cmp	r3, r0
   bb236:	d002      	beq.n	bb23e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   bb238:	4618      	mov	r0, r3
   bb23a:	f7f8 bf30 	b.w	b409e <_ZdlPv>
   bb23e:	4770      	bx	lr

000bb240 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   bb240:	2a01      	cmp	r2, #1
   bb242:	b410      	push	{r4}
   bb244:	d104      	bne.n	bb250 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   bb246:	780a      	ldrb	r2, [r1, #0]
   bb248:	f85d 4b04 	ldr.w	r4, [sp], #4
   bb24c:	7002      	strb	r2, [r0, #0]
   bb24e:	4770      	bx	lr
   bb250:	f85d 4b04 	ldr.w	r4, [sp], #4
   bb254:	f7ff bfc6 	b.w	bb1e4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000bb258 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
   bb258:	b508      	push	{r3, lr}
   bb25a:	1a52      	subs	r2, r2, r1
   bb25c:	f7ff fff0 	bl	bb240 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   bb260:	bd08      	pop	{r3, pc}

000bb262 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   bb262:	b508      	push	{r3, lr}
   bb264:	1a52      	subs	r2, r2, r1
   bb266:	f7ff ffeb 	bl	bb240 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   bb26a:	bd08      	pop	{r3, pc}

000bb26c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   bb26c:	4288      	cmp	r0, r1
   bb26e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb270:	4604      	mov	r4, r0
   bb272:	460e      	mov	r6, r1
   bb274:	d01e      	beq.n	bb2b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   bb276:	4603      	mov	r3, r0
   bb278:	684d      	ldr	r5, [r1, #4]
   bb27a:	f853 2b08 	ldr.w	r2, [r3], #8
   bb27e:	429a      	cmp	r2, r3
   bb280:	bf14      	ite	ne
   bb282:	6882      	ldrne	r2, [r0, #8]
   bb284:	220f      	moveq	r2, #15
   bb286:	42aa      	cmp	r2, r5
   bb288:	d20a      	bcs.n	bb2a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   bb28a:	a901      	add	r1, sp, #4
   bb28c:	9501      	str	r5, [sp, #4]
   bb28e:	f7ff ffad 	bl	bb1ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   bb292:	4607      	mov	r7, r0
   bb294:	4620      	mov	r0, r4
   bb296:	f7ff ffcb 	bl	bb230 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   bb29a:	9b01      	ldr	r3, [sp, #4]
   bb29c:	6027      	str	r7, [r4, #0]
   bb29e:	60a3      	str	r3, [r4, #8]
   bb2a0:	b125      	cbz	r5, bb2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   bb2a2:	6831      	ldr	r1, [r6, #0]
   bb2a4:	6820      	ldr	r0, [r4, #0]
   bb2a6:	462a      	mov	r2, r5
   bb2a8:	f7ff ffca 	bl	bb240 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   bb2ac:	6823      	ldr	r3, [r4, #0]
   bb2ae:	6065      	str	r5, [r4, #4]
   bb2b0:	2200      	movs	r2, #0
   bb2b2:	555a      	strb	r2, [r3, r5]
   bb2b4:	b003      	add	sp, #12
   bb2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb2b8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bb2b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bb2ba:	2400      	movs	r4, #0
   bb2bc:	2310      	movs	r3, #16
   bb2be:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bb2c2:	6803      	ldr	r3, [r0, #0]
   bb2c4:	4615      	mov	r5, r2
   bb2c6:	699e      	ldr	r6, [r3, #24]
   bb2c8:	6812      	ldr	r2, [r2, #0]
   bb2ca:	466b      	mov	r3, sp
   bb2cc:	e9cd 4400 	strd	r4, r4, [sp]
   bb2d0:	47b0      	blx	r6
   bb2d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bb2d6:	f003 0306 	and.w	r3, r3, #6
   bb2da:	2b06      	cmp	r3, #6
   bb2dc:	bf03      	ittte	eq
   bb2de:	9b00      	ldreq	r3, [sp, #0]
   bb2e0:	602b      	streq	r3, [r5, #0]
   bb2e2:	2001      	moveq	r0, #1
   bb2e4:	4620      	movne	r0, r4
   bb2e6:	b004      	add	sp, #16
   bb2e8:	bd70      	pop	{r4, r5, r6, pc}

000bb2ea <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bb2ea:	9800      	ldr	r0, [sp, #0]
   bb2ec:	4290      	cmp	r0, r2
   bb2ee:	bf14      	ite	ne
   bb2f0:	2001      	movne	r0, #1
   bb2f2:	2006      	moveq	r0, #6
   bb2f4:	4770      	bx	lr
	...

000bb2f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bb2f8:	b510      	push	{r4, lr}
   bb2fa:	4b03      	ldr	r3, [pc, #12]	; (bb308 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bb2fc:	6003      	str	r3, [r0, #0]
   bb2fe:	4604      	mov	r4, r0
   bb300:	f000 f8cd 	bl	bb49e <_ZNSt9type_infoD1Ev>
   bb304:	4620      	mov	r0, r4
   bb306:	bd10      	pop	{r4, pc}
   bb308:	000bec40 	.word	0x000bec40

000bb30c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bb30c:	b510      	push	{r4, lr}
   bb30e:	4604      	mov	r4, r0
   bb310:	f7ff fff2 	bl	bb2f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb314:	4620      	mov	r0, r4
   bb316:	2108      	movs	r1, #8
   bb318:	f7f8 fec3 	bl	b40a2 <_ZdlPvj>
   bb31c:	4620      	mov	r0, r4
   bb31e:	bd10      	pop	{r4, pc}

000bb320 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bb320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb324:	461f      	mov	r7, r3
   bb326:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bb32a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bb32e:	4598      	cmp	r8, r3
   bb330:	4606      	mov	r6, r0
   bb332:	4615      	mov	r5, r2
   bb334:	d107      	bne.n	bb346 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb336:	9907      	ldr	r1, [sp, #28]
   bb338:	f000 f8b4 	bl	bb4a4 <_ZNKSt9type_infoeqERKS_>
   bb33c:	b118      	cbz	r0, bb346 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb33e:	7165      	strb	r5, [r4, #5]
   bb340:	2000      	movs	r0, #0
   bb342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb346:	4639      	mov	r1, r7
   bb348:	4630      	mov	r0, r6
   bb34a:	f000 f8ab 	bl	bb4a4 <_ZNKSt9type_infoeqERKS_>
   bb34e:	2800      	cmp	r0, #0
   bb350:	d0f6      	beq.n	bb340 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bb352:	2301      	movs	r3, #1
   bb354:	f8c4 8000 	str.w	r8, [r4]
   bb358:	7125      	strb	r5, [r4, #4]
   bb35a:	71a3      	strb	r3, [r4, #6]
   bb35c:	e7f0      	b.n	bb340 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bb35e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bb35e:	b538      	push	{r3, r4, r5, lr}
   bb360:	4615      	mov	r5, r2
   bb362:	461c      	mov	r4, r3
   bb364:	f000 f89e 	bl	bb4a4 <_ZNKSt9type_infoeqERKS_>
   bb368:	b120      	cbz	r0, bb374 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bb36a:	2308      	movs	r3, #8
   bb36c:	60e3      	str	r3, [r4, #12]
   bb36e:	2306      	movs	r3, #6
   bb370:	6025      	str	r5, [r4, #0]
   bb372:	7123      	strb	r3, [r4, #4]
   bb374:	bd38      	pop	{r3, r4, r5, pc}

000bb376 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bb376:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb378:	4605      	mov	r5, r0
   bb37a:	460c      	mov	r4, r1
   bb37c:	9201      	str	r2, [sp, #4]
   bb37e:	461e      	mov	r6, r3
   bb380:	f000 f890 	bl	bb4a4 <_ZNKSt9type_infoeqERKS_>
   bb384:	b950      	cbnz	r0, bb39c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb386:	2e03      	cmp	r6, #3
   bb388:	d808      	bhi.n	bb39c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb38a:	6823      	ldr	r3, [r4, #0]
   bb38c:	9a01      	ldr	r2, [sp, #4]
   bb38e:	695b      	ldr	r3, [r3, #20]
   bb390:	4629      	mov	r1, r5
   bb392:	4620      	mov	r0, r4
   bb394:	b002      	add	sp, #8
   bb396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb39a:	4718      	bx	r3
   bb39c:	b002      	add	sp, #8
   bb39e:	bd70      	pop	{r4, r5, r6, pc}

000bb3a0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bb3a0:	b510      	push	{r4, lr}
   bb3a2:	4b03      	ldr	r3, [pc, #12]	; (bb3b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bb3a4:	6003      	str	r3, [r0, #0]
   bb3a6:	4604      	mov	r4, r0
   bb3a8:	f7ff ffa6 	bl	bb2f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb3ac:	4620      	mov	r0, r4
   bb3ae:	bd10      	pop	{r4, pc}
   bb3b0:	000beca0 	.word	0x000beca0

000bb3b4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bb3b4:	b510      	push	{r4, lr}
   bb3b6:	4604      	mov	r4, r0
   bb3b8:	f7ff fff2 	bl	bb3a0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bb3bc:	4620      	mov	r0, r4
   bb3be:	210c      	movs	r1, #12
   bb3c0:	f7f8 fe6f 	bl	b40a2 <_ZdlPvj>
   bb3c4:	4620      	mov	r0, r4
   bb3c6:	bd10      	pop	{r4, pc}

000bb3c8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bb3c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb3ca:	9f08      	ldr	r7, [sp, #32]
   bb3cc:	4297      	cmp	r7, r2
   bb3ce:	4605      	mov	r5, r0
   bb3d0:	460e      	mov	r6, r1
   bb3d2:	4614      	mov	r4, r2
   bb3d4:	d00a      	beq.n	bb3ec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bb3d6:	68a8      	ldr	r0, [r5, #8]
   bb3d8:	6802      	ldr	r2, [r0, #0]
   bb3da:	9708      	str	r7, [sp, #32]
   bb3dc:	6a15      	ldr	r5, [r2, #32]
   bb3de:	4631      	mov	r1, r6
   bb3e0:	4622      	mov	r2, r4
   bb3e2:	46ac      	mov	ip, r5
   bb3e4:	b003      	add	sp, #12
   bb3e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bb3ea:	4760      	bx	ip
   bb3ec:	4619      	mov	r1, r3
   bb3ee:	9301      	str	r3, [sp, #4]
   bb3f0:	f000 f858 	bl	bb4a4 <_ZNKSt9type_infoeqERKS_>
   bb3f4:	9b01      	ldr	r3, [sp, #4]
   bb3f6:	2800      	cmp	r0, #0
   bb3f8:	d0ed      	beq.n	bb3d6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bb3fa:	2006      	movs	r0, #6
   bb3fc:	b003      	add	sp, #12
   bb3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb400 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bb400:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb404:	460d      	mov	r5, r1
   bb406:	4619      	mov	r1, r3
   bb408:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bb40c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bb410:	4681      	mov	r9, r0
   bb412:	4617      	mov	r7, r2
   bb414:	4698      	mov	r8, r3
   bb416:	f000 f845 	bl	bb4a4 <_ZNKSt9type_infoeqERKS_>
   bb41a:	b190      	cbz	r0, bb442 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bb41c:	2d00      	cmp	r5, #0
   bb41e:	6034      	str	r4, [r6, #0]
   bb420:	7137      	strb	r7, [r6, #4]
   bb422:	db09      	blt.n	bb438 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bb424:	1961      	adds	r1, r4, r5
   bb426:	458a      	cmp	sl, r1
   bb428:	bf0c      	ite	eq
   bb42a:	2106      	moveq	r1, #6
   bb42c:	2101      	movne	r1, #1
   bb42e:	71b1      	strb	r1, [r6, #6]
   bb430:	2000      	movs	r0, #0
   bb432:	b001      	add	sp, #4
   bb434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb438:	3502      	adds	r5, #2
   bb43a:	d1f9      	bne.n	bb430 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb43c:	2301      	movs	r3, #1
   bb43e:	71b3      	strb	r3, [r6, #6]
   bb440:	e7f6      	b.n	bb430 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb442:	4554      	cmp	r4, sl
   bb444:	d106      	bne.n	bb454 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb446:	4659      	mov	r1, fp
   bb448:	4648      	mov	r0, r9
   bb44a:	f000 f82b 	bl	bb4a4 <_ZNKSt9type_infoeqERKS_>
   bb44e:	b108      	cbz	r0, bb454 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb450:	7177      	strb	r7, [r6, #5]
   bb452:	e7ed      	b.n	bb430 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb454:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bb458:	6803      	ldr	r3, [r0, #0]
   bb45a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bb45e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bb462:	69dc      	ldr	r4, [r3, #28]
   bb464:	463a      	mov	r2, r7
   bb466:	4643      	mov	r3, r8
   bb468:	4629      	mov	r1, r5
   bb46a:	46a4      	mov	ip, r4
   bb46c:	b001      	add	sp, #4
   bb46e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb472:	4760      	bx	ip

000bb474 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bb474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb478:	4607      	mov	r7, r0
   bb47a:	460c      	mov	r4, r1
   bb47c:	4615      	mov	r5, r2
   bb47e:	461e      	mov	r6, r3
   bb480:	f7ff ff6d 	bl	bb35e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bb484:	b948      	cbnz	r0, bb49a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bb486:	68b8      	ldr	r0, [r7, #8]
   bb488:	6803      	ldr	r3, [r0, #0]
   bb48a:	699f      	ldr	r7, [r3, #24]
   bb48c:	462a      	mov	r2, r5
   bb48e:	4633      	mov	r3, r6
   bb490:	4621      	mov	r1, r4
   bb492:	46bc      	mov	ip, r7
   bb494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bb498:	4760      	bx	ip
   bb49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb49e <_ZNSt9type_infoD1Ev>:
   bb49e:	4770      	bx	lr

000bb4a0 <_ZNKSt9type_info14__is_pointer_pEv>:
   bb4a0:	2000      	movs	r0, #0
   bb4a2:	4770      	bx	lr

000bb4a4 <_ZNKSt9type_infoeqERKS_>:
   bb4a4:	4281      	cmp	r1, r0
   bb4a6:	b508      	push	{r3, lr}
   bb4a8:	d00e      	beq.n	bb4c8 <_ZNKSt9type_infoeqERKS_+0x24>
   bb4aa:	6840      	ldr	r0, [r0, #4]
   bb4ac:	7803      	ldrb	r3, [r0, #0]
   bb4ae:	2b2a      	cmp	r3, #42	; 0x2a
   bb4b0:	d00c      	beq.n	bb4cc <_ZNKSt9type_infoeqERKS_+0x28>
   bb4b2:	6849      	ldr	r1, [r1, #4]
   bb4b4:	780b      	ldrb	r3, [r1, #0]
   bb4b6:	2b2a      	cmp	r3, #42	; 0x2a
   bb4b8:	bf08      	it	eq
   bb4ba:	3101      	addeq	r1, #1
   bb4bc:	f000 fec6 	bl	bc24c <strcmp>
   bb4c0:	fab0 f080 	clz	r0, r0
   bb4c4:	0940      	lsrs	r0, r0, #5
   bb4c6:	bd08      	pop	{r3, pc}
   bb4c8:	2001      	movs	r0, #1
   bb4ca:	e7fc      	b.n	bb4c6 <_ZNKSt9type_infoeqERKS_+0x22>
   bb4cc:	2000      	movs	r0, #0
   bb4ce:	e7fa      	b.n	bb4c6 <_ZNKSt9type_infoeqERKS_+0x22>

000bb4d0 <floorf>:
   bb4d0:	ee10 2a10 	vmov	r2, s0
   bb4d4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   bb4d8:	3b7f      	subs	r3, #127	; 0x7f
   bb4da:	2b16      	cmp	r3, #22
   bb4dc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   bb4e0:	dc28      	bgt.n	bb534 <floorf+0x64>
   bb4e2:	2b00      	cmp	r3, #0
   bb4e4:	db18      	blt.n	bb518 <floorf+0x48>
   bb4e6:	491a      	ldr	r1, [pc, #104]	; (bb550 <floorf+0x80>)
   bb4e8:	4119      	asrs	r1, r3
   bb4ea:	420a      	tst	r2, r1
   bb4ec:	d021      	beq.n	bb532 <floorf+0x62>
   bb4ee:	eddf 7a19 	vldr	s15, [pc, #100]	; bb554 <floorf+0x84>
   bb4f2:	ee70 7a27 	vadd.f32	s15, s0, s15
   bb4f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bb4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb4fe:	dd18      	ble.n	bb532 <floorf+0x62>
   bb500:	2a00      	cmp	r2, #0
   bb502:	da04      	bge.n	bb50e <floorf+0x3e>
   bb504:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   bb508:	fa40 f303 	asr.w	r3, r0, r3
   bb50c:	441a      	add	r2, r3
   bb50e:	ea22 0301 	bic.w	r3, r2, r1
   bb512:	ee00 3a10 	vmov	s0, r3
   bb516:	4770      	bx	lr
   bb518:	eddf 7a0e 	vldr	s15, [pc, #56]	; bb554 <floorf+0x84>
   bb51c:	ee70 7a27 	vadd.f32	s15, s0, s15
   bb520:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   bb524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb528:	dd03      	ble.n	bb532 <floorf+0x62>
   bb52a:	2a00      	cmp	r2, #0
   bb52c:	db08      	blt.n	bb540 <floorf+0x70>
   bb52e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; bb558 <floorf+0x88>
   bb532:	4770      	bx	lr
   bb534:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   bb538:	d3fb      	bcc.n	bb532 <floorf+0x62>
   bb53a:	ee30 0a00 	vadd.f32	s0, s0, s0
   bb53e:	4770      	bx	lr
   bb540:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   bb544:	2900      	cmp	r1, #0
   bb546:	bf18      	it	ne
   bb548:	eeb0 0a67 	vmovne.f32	s0, s15
   bb54c:	4770      	bx	lr
   bb54e:	bf00      	nop
   bb550:	007fffff 	.word	0x007fffff
   bb554:	7149f2ca 	.word	0x7149f2ca
   bb558:	00000000 	.word	0x00000000

000bb55c <sqrt>:
   bb55c:	b538      	push	{r3, r4, r5, lr}
   bb55e:	ed2d 8b02 	vpush	{d8}
   bb562:	ec55 4b10 	vmov	r4, r5, d0
   bb566:	f000 f833 	bl	bb5d0 <__ieee754_sqrt>
   bb56a:	4b18      	ldr	r3, [pc, #96]	; (bb5cc <sqrt+0x70>)
   bb56c:	eeb0 8a40 	vmov.f32	s16, s0
   bb570:	eef0 8a60 	vmov.f32	s17, s1
   bb574:	f993 3000 	ldrsb.w	r3, [r3]
   bb578:	3301      	adds	r3, #1
   bb57a:	d00d      	beq.n	bb598 <sqrt+0x3c>
   bb57c:	4622      	mov	r2, r4
   bb57e:	462b      	mov	r3, r5
   bb580:	4620      	mov	r0, r4
   bb582:	4629      	mov	r1, r5
   bb584:	f000 fd46 	bl	bc014 <__aeabi_dcmpun>
   bb588:	b930      	cbnz	r0, bb598 <sqrt+0x3c>
   bb58a:	2200      	movs	r2, #0
   bb58c:	2300      	movs	r3, #0
   bb58e:	4620      	mov	r0, r4
   bb590:	4629      	mov	r1, r5
   bb592:	f000 fd17 	bl	bbfc4 <__aeabi_dcmplt>
   bb596:	b930      	cbnz	r0, bb5a6 <sqrt+0x4a>
   bb598:	eeb0 0a48 	vmov.f32	s0, s16
   bb59c:	eef0 0a68 	vmov.f32	s1, s17
   bb5a0:	ecbd 8b02 	vpop	{d8}
   bb5a4:	bd38      	pop	{r3, r4, r5, pc}
   bb5a6:	f7fd fac5 	bl	b8b34 <__errno>
   bb5aa:	2200      	movs	r2, #0
   bb5ac:	2300      	movs	r3, #0
   bb5ae:	2121      	movs	r1, #33	; 0x21
   bb5b0:	6001      	str	r1, [r0, #0]
   bb5b2:	4610      	mov	r0, r2
   bb5b4:	4619      	mov	r1, r3
   bb5b6:	f000 fbbd 	bl	bbd34 <__aeabi_ddiv>
   bb5ba:	ec41 0b18 	vmov	d8, r0, r1
   bb5be:	eeb0 0a48 	vmov.f32	s0, s16
   bb5c2:	eef0 0a68 	vmov.f32	s1, s17
   bb5c6:	ecbd 8b02 	vpop	{d8}
   bb5ca:	bd38      	pop	{r3, r4, r5, pc}
   bb5cc:	200350c4 	.word	0x200350c4

000bb5d0 <__ieee754_sqrt>:
   bb5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb5d4:	4a63      	ldr	r2, [pc, #396]	; (bb764 <__ieee754_sqrt+0x194>)
   bb5d6:	ec55 4b10 	vmov	r4, r5, d0
   bb5da:	43aa      	bics	r2, r5
   bb5dc:	f000 809f 	beq.w	bb71e <__ieee754_sqrt+0x14e>
   bb5e0:	2d00      	cmp	r5, #0
   bb5e2:	ee10 ca10 	vmov	ip, s0
   bb5e6:	462b      	mov	r3, r5
   bb5e8:	dd54      	ble.n	bb694 <__ieee754_sqrt+0xc4>
   bb5ea:	1529      	asrs	r1, r5, #20
   bb5ec:	d063      	beq.n	bb6b6 <__ieee754_sqrt+0xe6>
   bb5ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bb5f2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   bb5f6:	07c9      	lsls	r1, r1, #31
   bb5f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb5fc:	d404      	bmi.n	bb608 <__ieee754_sqrt+0x38>
   bb5fe:	005b      	lsls	r3, r3, #1
   bb600:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bb604:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bb608:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   bb60c:	2600      	movs	r6, #0
   bb60e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   bb612:	107f      	asrs	r7, r7, #1
   bb614:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bb618:	f04f 0e16 	mov.w	lr, #22
   bb61c:	4634      	mov	r4, r6
   bb61e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   bb622:	18a1      	adds	r1, r4, r2
   bb624:	4299      	cmp	r1, r3
   bb626:	dc02      	bgt.n	bb62e <__ieee754_sqrt+0x5e>
   bb628:	1a5b      	subs	r3, r3, r1
   bb62a:	188c      	adds	r4, r1, r2
   bb62c:	4416      	add	r6, r2
   bb62e:	005b      	lsls	r3, r3, #1
   bb630:	f1be 0e01 	subs.w	lr, lr, #1
   bb634:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bb638:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bb63c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bb640:	d1ef      	bne.n	bb622 <__ieee754_sqrt+0x52>
   bb642:	4675      	mov	r5, lr
   bb644:	2020      	movs	r0, #32
   bb646:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   bb64a:	e00a      	b.n	bb662 <__ieee754_sqrt+0x92>
   bb64c:	d044      	beq.n	bb6d8 <__ieee754_sqrt+0x108>
   bb64e:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   bb652:	3801      	subs	r0, #1
   bb654:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   bb658:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bb65c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bb660:	d043      	beq.n	bb6ea <__ieee754_sqrt+0x11a>
   bb662:	42a3      	cmp	r3, r4
   bb664:	eb02 010e 	add.w	r1, r2, lr
   bb668:	ddf0      	ble.n	bb64c <__ieee754_sqrt+0x7c>
   bb66a:	2900      	cmp	r1, #0
   bb66c:	eb01 0e02 	add.w	lr, r1, r2
   bb670:	db0a      	blt.n	bb688 <__ieee754_sqrt+0xb8>
   bb672:	46a0      	mov	r8, r4
   bb674:	1b1b      	subs	r3, r3, r4
   bb676:	4561      	cmp	r1, ip
   bb678:	bf88      	it	hi
   bb67a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   bb67e:	ebac 0c01 	sub.w	ip, ip, r1
   bb682:	4415      	add	r5, r2
   bb684:	4644      	mov	r4, r8
   bb686:	e7e2      	b.n	bb64e <__ieee754_sqrt+0x7e>
   bb688:	f1be 0f00 	cmp.w	lr, #0
   bb68c:	dbf1      	blt.n	bb672 <__ieee754_sqrt+0xa2>
   bb68e:	f104 0801 	add.w	r8, r4, #1
   bb692:	e7ef      	b.n	bb674 <__ieee754_sqrt+0xa4>
   bb694:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   bb698:	4322      	orrs	r2, r4
   bb69a:	d038      	beq.n	bb70e <__ieee754_sqrt+0x13e>
   bb69c:	2d00      	cmp	r5, #0
   bb69e:	d14e      	bne.n	bb73e <__ieee754_sqrt+0x16e>
   bb6a0:	4629      	mov	r1, r5
   bb6a2:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   bb6a6:	3915      	subs	r1, #21
   bb6a8:	4613      	mov	r3, r2
   bb6aa:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   bb6ae:	2a00      	cmp	r2, #0
   bb6b0:	d0f7      	beq.n	bb6a2 <__ieee754_sqrt+0xd2>
   bb6b2:	02d6      	lsls	r6, r2, #11
   bb6b4:	d450      	bmi.n	bb758 <__ieee754_sqrt+0x188>
   bb6b6:	2000      	movs	r0, #0
   bb6b8:	005b      	lsls	r3, r3, #1
   bb6ba:	02dd      	lsls	r5, r3, #11
   bb6bc:	4604      	mov	r4, r0
   bb6be:	f100 0001 	add.w	r0, r0, #1
   bb6c2:	d5f9      	bpl.n	bb6b8 <__ieee754_sqrt+0xe8>
   bb6c4:	461a      	mov	r2, r3
   bb6c6:	4663      	mov	r3, ip
   bb6c8:	fa0c fc00 	lsl.w	ip, ip, r0
   bb6cc:	f1c0 0020 	rsb	r0, r0, #32
   bb6d0:	40c3      	lsrs	r3, r0
   bb6d2:	1b09      	subs	r1, r1, r4
   bb6d4:	4313      	orrs	r3, r2
   bb6d6:	e78a      	b.n	bb5ee <__ieee754_sqrt+0x1e>
   bb6d8:	4561      	cmp	r1, ip
   bb6da:	d8b8      	bhi.n	bb64e <__ieee754_sqrt+0x7e>
   bb6dc:	2900      	cmp	r1, #0
   bb6de:	eb01 0e02 	add.w	lr, r1, r2
   bb6e2:	dbd1      	blt.n	bb688 <__ieee754_sqrt+0xb8>
   bb6e4:	4698      	mov	r8, r3
   bb6e6:	2300      	movs	r3, #0
   bb6e8:	e7c9      	b.n	bb67e <__ieee754_sqrt+0xae>
   bb6ea:	ea53 030c 	orrs.w	r3, r3, ip
   bb6ee:	d110      	bne.n	bb712 <__ieee754_sqrt+0x142>
   bb6f0:	0868      	lsrs	r0, r5, #1
   bb6f2:	1071      	asrs	r1, r6, #1
   bb6f4:	07f3      	lsls	r3, r6, #31
   bb6f6:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   bb6fa:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   bb6fe:	bf48      	it	mi
   bb700:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   bb704:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   bb708:	4602      	mov	r2, r0
   bb70a:	ec43 2b10 	vmov	d0, r2, r3
   bb70e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb712:	1c6a      	adds	r2, r5, #1
   bb714:	bf16      	itet	ne
   bb716:	1c68      	addne	r0, r5, #1
   bb718:	3601      	addeq	r6, #1
   bb71a:	0840      	lsrne	r0, r0, #1
   bb71c:	e7e9      	b.n	bb6f2 <__ieee754_sqrt+0x122>
   bb71e:	ee10 2a10 	vmov	r2, s0
   bb722:	ee10 0a10 	vmov	r0, s0
   bb726:	462b      	mov	r3, r5
   bb728:	4629      	mov	r1, r5
   bb72a:	f000 f9d9 	bl	bbae0 <__aeabi_dmul>
   bb72e:	4622      	mov	r2, r4
   bb730:	462b      	mov	r3, r5
   bb732:	f000 f81f 	bl	bb774 <__adddf3>
   bb736:	ec41 0b10 	vmov	d0, r0, r1
   bb73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb73e:	ee10 2a10 	vmov	r2, s0
   bb742:	4620      	mov	r0, r4
   bb744:	4629      	mov	r1, r5
   bb746:	f000 f813 	bl	bb770 <__aeabi_dsub>
   bb74a:	4602      	mov	r2, r0
   bb74c:	460b      	mov	r3, r1
   bb74e:	f000 faf1 	bl	bbd34 <__aeabi_ddiv>
   bb752:	ec41 0b10 	vmov	d0, r0, r1
   bb756:	e7da      	b.n	bb70e <__ieee754_sqrt+0x13e>
   bb758:	4663      	mov	r3, ip
   bb75a:	2020      	movs	r0, #32
   bb75c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bb760:	e7b6      	b.n	bb6d0 <__ieee754_sqrt+0x100>
   bb762:	bf00      	nop
   bb764:	7ff00000 	.word	0x7ff00000

000bb768 <__aeabi_drsub>:
   bb768:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bb76c:	e002      	b.n	bb774 <__adddf3>
   bb76e:	bf00      	nop

000bb770 <__aeabi_dsub>:
   bb770:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bb774 <__adddf3>:
   bb774:	b530      	push	{r4, r5, lr}
   bb776:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bb77a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bb77e:	ea94 0f05 	teq	r4, r5
   bb782:	bf08      	it	eq
   bb784:	ea90 0f02 	teqeq	r0, r2
   bb788:	bf1f      	itttt	ne
   bb78a:	ea54 0c00 	orrsne.w	ip, r4, r0
   bb78e:	ea55 0c02 	orrsne.w	ip, r5, r2
   bb792:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bb796:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb79a:	f000 80e2 	beq.w	bb962 <__adddf3+0x1ee>
   bb79e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bb7a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bb7a6:	bfb8      	it	lt
   bb7a8:	426d      	neglt	r5, r5
   bb7aa:	dd0c      	ble.n	bb7c6 <__adddf3+0x52>
   bb7ac:	442c      	add	r4, r5
   bb7ae:	ea80 0202 	eor.w	r2, r0, r2
   bb7b2:	ea81 0303 	eor.w	r3, r1, r3
   bb7b6:	ea82 0000 	eor.w	r0, r2, r0
   bb7ba:	ea83 0101 	eor.w	r1, r3, r1
   bb7be:	ea80 0202 	eor.w	r2, r0, r2
   bb7c2:	ea81 0303 	eor.w	r3, r1, r3
   bb7c6:	2d36      	cmp	r5, #54	; 0x36
   bb7c8:	bf88      	it	hi
   bb7ca:	bd30      	pophi	{r4, r5, pc}
   bb7cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb7d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb7d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bb7d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bb7dc:	d002      	beq.n	bb7e4 <__adddf3+0x70>
   bb7de:	4240      	negs	r0, r0
   bb7e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb7e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bb7e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb7ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bb7f0:	d002      	beq.n	bb7f8 <__adddf3+0x84>
   bb7f2:	4252      	negs	r2, r2
   bb7f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bb7f8:	ea94 0f05 	teq	r4, r5
   bb7fc:	f000 80a7 	beq.w	bb94e <__adddf3+0x1da>
   bb800:	f1a4 0401 	sub.w	r4, r4, #1
   bb804:	f1d5 0e20 	rsbs	lr, r5, #32
   bb808:	db0d      	blt.n	bb826 <__adddf3+0xb2>
   bb80a:	fa02 fc0e 	lsl.w	ip, r2, lr
   bb80e:	fa22 f205 	lsr.w	r2, r2, r5
   bb812:	1880      	adds	r0, r0, r2
   bb814:	f141 0100 	adc.w	r1, r1, #0
   bb818:	fa03 f20e 	lsl.w	r2, r3, lr
   bb81c:	1880      	adds	r0, r0, r2
   bb81e:	fa43 f305 	asr.w	r3, r3, r5
   bb822:	4159      	adcs	r1, r3
   bb824:	e00e      	b.n	bb844 <__adddf3+0xd0>
   bb826:	f1a5 0520 	sub.w	r5, r5, #32
   bb82a:	f10e 0e20 	add.w	lr, lr, #32
   bb82e:	2a01      	cmp	r2, #1
   bb830:	fa03 fc0e 	lsl.w	ip, r3, lr
   bb834:	bf28      	it	cs
   bb836:	f04c 0c02 	orrcs.w	ip, ip, #2
   bb83a:	fa43 f305 	asr.w	r3, r3, r5
   bb83e:	18c0      	adds	r0, r0, r3
   bb840:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bb844:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb848:	d507      	bpl.n	bb85a <__adddf3+0xe6>
   bb84a:	f04f 0e00 	mov.w	lr, #0
   bb84e:	f1dc 0c00 	rsbs	ip, ip, #0
   bb852:	eb7e 0000 	sbcs.w	r0, lr, r0
   bb856:	eb6e 0101 	sbc.w	r1, lr, r1
   bb85a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bb85e:	d31b      	bcc.n	bb898 <__adddf3+0x124>
   bb860:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bb864:	d30c      	bcc.n	bb880 <__adddf3+0x10c>
   bb866:	0849      	lsrs	r1, r1, #1
   bb868:	ea5f 0030 	movs.w	r0, r0, rrx
   bb86c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bb870:	f104 0401 	add.w	r4, r4, #1
   bb874:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bb878:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bb87c:	f080 809a 	bcs.w	bb9b4 <__adddf3+0x240>
   bb880:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bb884:	bf08      	it	eq
   bb886:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb88a:	f150 0000 	adcs.w	r0, r0, #0
   bb88e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb892:	ea41 0105 	orr.w	r1, r1, r5
   bb896:	bd30      	pop	{r4, r5, pc}
   bb898:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bb89c:	4140      	adcs	r0, r0
   bb89e:	eb41 0101 	adc.w	r1, r1, r1
   bb8a2:	3c01      	subs	r4, #1
   bb8a4:	bf28      	it	cs
   bb8a6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bb8aa:	d2e9      	bcs.n	bb880 <__adddf3+0x10c>
   bb8ac:	f091 0f00 	teq	r1, #0
   bb8b0:	bf04      	itt	eq
   bb8b2:	4601      	moveq	r1, r0
   bb8b4:	2000      	moveq	r0, #0
   bb8b6:	fab1 f381 	clz	r3, r1
   bb8ba:	bf08      	it	eq
   bb8bc:	3320      	addeq	r3, #32
   bb8be:	f1a3 030b 	sub.w	r3, r3, #11
   bb8c2:	f1b3 0220 	subs.w	r2, r3, #32
   bb8c6:	da0c      	bge.n	bb8e2 <__adddf3+0x16e>
   bb8c8:	320c      	adds	r2, #12
   bb8ca:	dd08      	ble.n	bb8de <__adddf3+0x16a>
   bb8cc:	f102 0c14 	add.w	ip, r2, #20
   bb8d0:	f1c2 020c 	rsb	r2, r2, #12
   bb8d4:	fa01 f00c 	lsl.w	r0, r1, ip
   bb8d8:	fa21 f102 	lsr.w	r1, r1, r2
   bb8dc:	e00c      	b.n	bb8f8 <__adddf3+0x184>
   bb8de:	f102 0214 	add.w	r2, r2, #20
   bb8e2:	bfd8      	it	le
   bb8e4:	f1c2 0c20 	rsble	ip, r2, #32
   bb8e8:	fa01 f102 	lsl.w	r1, r1, r2
   bb8ec:	fa20 fc0c 	lsr.w	ip, r0, ip
   bb8f0:	bfdc      	itt	le
   bb8f2:	ea41 010c 	orrle.w	r1, r1, ip
   bb8f6:	4090      	lslle	r0, r2
   bb8f8:	1ae4      	subs	r4, r4, r3
   bb8fa:	bfa2      	ittt	ge
   bb8fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bb900:	4329      	orrge	r1, r5
   bb902:	bd30      	popge	{r4, r5, pc}
   bb904:	ea6f 0404 	mvn.w	r4, r4
   bb908:	3c1f      	subs	r4, #31
   bb90a:	da1c      	bge.n	bb946 <__adddf3+0x1d2>
   bb90c:	340c      	adds	r4, #12
   bb90e:	dc0e      	bgt.n	bb92e <__adddf3+0x1ba>
   bb910:	f104 0414 	add.w	r4, r4, #20
   bb914:	f1c4 0220 	rsb	r2, r4, #32
   bb918:	fa20 f004 	lsr.w	r0, r0, r4
   bb91c:	fa01 f302 	lsl.w	r3, r1, r2
   bb920:	ea40 0003 	orr.w	r0, r0, r3
   bb924:	fa21 f304 	lsr.w	r3, r1, r4
   bb928:	ea45 0103 	orr.w	r1, r5, r3
   bb92c:	bd30      	pop	{r4, r5, pc}
   bb92e:	f1c4 040c 	rsb	r4, r4, #12
   bb932:	f1c4 0220 	rsb	r2, r4, #32
   bb936:	fa20 f002 	lsr.w	r0, r0, r2
   bb93a:	fa01 f304 	lsl.w	r3, r1, r4
   bb93e:	ea40 0003 	orr.w	r0, r0, r3
   bb942:	4629      	mov	r1, r5
   bb944:	bd30      	pop	{r4, r5, pc}
   bb946:	fa21 f004 	lsr.w	r0, r1, r4
   bb94a:	4629      	mov	r1, r5
   bb94c:	bd30      	pop	{r4, r5, pc}
   bb94e:	f094 0f00 	teq	r4, #0
   bb952:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bb956:	bf06      	itte	eq
   bb958:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bb95c:	3401      	addeq	r4, #1
   bb95e:	3d01      	subne	r5, #1
   bb960:	e74e      	b.n	bb800 <__adddf3+0x8c>
   bb962:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb966:	bf18      	it	ne
   bb968:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb96c:	d029      	beq.n	bb9c2 <__adddf3+0x24e>
   bb96e:	ea94 0f05 	teq	r4, r5
   bb972:	bf08      	it	eq
   bb974:	ea90 0f02 	teqeq	r0, r2
   bb978:	d005      	beq.n	bb986 <__adddf3+0x212>
   bb97a:	ea54 0c00 	orrs.w	ip, r4, r0
   bb97e:	bf04      	itt	eq
   bb980:	4619      	moveq	r1, r3
   bb982:	4610      	moveq	r0, r2
   bb984:	bd30      	pop	{r4, r5, pc}
   bb986:	ea91 0f03 	teq	r1, r3
   bb98a:	bf1e      	ittt	ne
   bb98c:	2100      	movne	r1, #0
   bb98e:	2000      	movne	r0, #0
   bb990:	bd30      	popne	{r4, r5, pc}
   bb992:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bb996:	d105      	bne.n	bb9a4 <__adddf3+0x230>
   bb998:	0040      	lsls	r0, r0, #1
   bb99a:	4149      	adcs	r1, r1
   bb99c:	bf28      	it	cs
   bb99e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bb9a2:	bd30      	pop	{r4, r5, pc}
   bb9a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bb9a8:	bf3c      	itt	cc
   bb9aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bb9ae:	bd30      	popcc	{r4, r5, pc}
   bb9b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb9b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bb9b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb9bc:	f04f 0000 	mov.w	r0, #0
   bb9c0:	bd30      	pop	{r4, r5, pc}
   bb9c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb9c6:	bf1a      	itte	ne
   bb9c8:	4619      	movne	r1, r3
   bb9ca:	4610      	movne	r0, r2
   bb9cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bb9d0:	bf1c      	itt	ne
   bb9d2:	460b      	movne	r3, r1
   bb9d4:	4602      	movne	r2, r0
   bb9d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb9da:	bf06      	itte	eq
   bb9dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bb9e0:	ea91 0f03 	teqeq	r1, r3
   bb9e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bb9e8:	bd30      	pop	{r4, r5, pc}
   bb9ea:	bf00      	nop

000bb9ec <__aeabi_ui2d>:
   bb9ec:	f090 0f00 	teq	r0, #0
   bb9f0:	bf04      	itt	eq
   bb9f2:	2100      	moveq	r1, #0
   bb9f4:	4770      	bxeq	lr
   bb9f6:	b530      	push	{r4, r5, lr}
   bb9f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb9fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bba00:	f04f 0500 	mov.w	r5, #0
   bba04:	f04f 0100 	mov.w	r1, #0
   bba08:	e750      	b.n	bb8ac <__adddf3+0x138>
   bba0a:	bf00      	nop

000bba0c <__aeabi_i2d>:
   bba0c:	f090 0f00 	teq	r0, #0
   bba10:	bf04      	itt	eq
   bba12:	2100      	moveq	r1, #0
   bba14:	4770      	bxeq	lr
   bba16:	b530      	push	{r4, r5, lr}
   bba18:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bba1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bba20:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bba24:	bf48      	it	mi
   bba26:	4240      	negmi	r0, r0
   bba28:	f04f 0100 	mov.w	r1, #0
   bba2c:	e73e      	b.n	bb8ac <__adddf3+0x138>
   bba2e:	bf00      	nop

000bba30 <__aeabi_f2d>:
   bba30:	0042      	lsls	r2, r0, #1
   bba32:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bba36:	ea4f 0131 	mov.w	r1, r1, rrx
   bba3a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bba3e:	bf1f      	itttt	ne
   bba40:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bba44:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bba48:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bba4c:	4770      	bxne	lr
   bba4e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bba52:	bf08      	it	eq
   bba54:	4770      	bxeq	lr
   bba56:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bba5a:	bf04      	itt	eq
   bba5c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bba60:	4770      	bxeq	lr
   bba62:	b530      	push	{r4, r5, lr}
   bba64:	f44f 7460 	mov.w	r4, #896	; 0x380
   bba68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bba6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bba70:	e71c      	b.n	bb8ac <__adddf3+0x138>
   bba72:	bf00      	nop

000bba74 <__aeabi_ul2d>:
   bba74:	ea50 0201 	orrs.w	r2, r0, r1
   bba78:	bf08      	it	eq
   bba7a:	4770      	bxeq	lr
   bba7c:	b530      	push	{r4, r5, lr}
   bba7e:	f04f 0500 	mov.w	r5, #0
   bba82:	e00a      	b.n	bba9a <__aeabi_l2d+0x16>

000bba84 <__aeabi_l2d>:
   bba84:	ea50 0201 	orrs.w	r2, r0, r1
   bba88:	bf08      	it	eq
   bba8a:	4770      	bxeq	lr
   bba8c:	b530      	push	{r4, r5, lr}
   bba8e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bba92:	d502      	bpl.n	bba9a <__aeabi_l2d+0x16>
   bba94:	4240      	negs	r0, r0
   bba96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bba9a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bba9e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bbaa2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bbaa6:	f43f aed8 	beq.w	bb85a <__adddf3+0xe6>
   bbaaa:	f04f 0203 	mov.w	r2, #3
   bbaae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bbab2:	bf18      	it	ne
   bbab4:	3203      	addne	r2, #3
   bbab6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bbaba:	bf18      	it	ne
   bbabc:	3203      	addne	r2, #3
   bbabe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bbac2:	f1c2 0320 	rsb	r3, r2, #32
   bbac6:	fa00 fc03 	lsl.w	ip, r0, r3
   bbaca:	fa20 f002 	lsr.w	r0, r0, r2
   bbace:	fa01 fe03 	lsl.w	lr, r1, r3
   bbad2:	ea40 000e 	orr.w	r0, r0, lr
   bbad6:	fa21 f102 	lsr.w	r1, r1, r2
   bbada:	4414      	add	r4, r2
   bbadc:	e6bd      	b.n	bb85a <__adddf3+0xe6>
   bbade:	bf00      	nop

000bbae0 <__aeabi_dmul>:
   bbae0:	b570      	push	{r4, r5, r6, lr}
   bbae2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bbae6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bbaea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bbaee:	bf1d      	ittte	ne
   bbaf0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bbaf4:	ea94 0f0c 	teqne	r4, ip
   bbaf8:	ea95 0f0c 	teqne	r5, ip
   bbafc:	f000 f8de 	bleq	bbcbc <__aeabi_dmul+0x1dc>
   bbb00:	442c      	add	r4, r5
   bbb02:	ea81 0603 	eor.w	r6, r1, r3
   bbb06:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bbb0a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bbb0e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bbb12:	bf18      	it	ne
   bbb14:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bbb18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbb1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bbb20:	d038      	beq.n	bbb94 <__aeabi_dmul+0xb4>
   bbb22:	fba0 ce02 	umull	ip, lr, r0, r2
   bbb26:	f04f 0500 	mov.w	r5, #0
   bbb2a:	fbe1 e502 	umlal	lr, r5, r1, r2
   bbb2e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bbb32:	fbe0 e503 	umlal	lr, r5, r0, r3
   bbb36:	f04f 0600 	mov.w	r6, #0
   bbb3a:	fbe1 5603 	umlal	r5, r6, r1, r3
   bbb3e:	f09c 0f00 	teq	ip, #0
   bbb42:	bf18      	it	ne
   bbb44:	f04e 0e01 	orrne.w	lr, lr, #1
   bbb48:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bbb4c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bbb50:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bbb54:	d204      	bcs.n	bbb60 <__aeabi_dmul+0x80>
   bbb56:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bbb5a:	416d      	adcs	r5, r5
   bbb5c:	eb46 0606 	adc.w	r6, r6, r6
   bbb60:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bbb64:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bbb68:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bbb6c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bbb70:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bbb74:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bbb78:	bf88      	it	hi
   bbb7a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bbb7e:	d81e      	bhi.n	bbbbe <__aeabi_dmul+0xde>
   bbb80:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bbb84:	bf08      	it	eq
   bbb86:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bbb8a:	f150 0000 	adcs.w	r0, r0, #0
   bbb8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbb92:	bd70      	pop	{r4, r5, r6, pc}
   bbb94:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bbb98:	ea46 0101 	orr.w	r1, r6, r1
   bbb9c:	ea40 0002 	orr.w	r0, r0, r2
   bbba0:	ea81 0103 	eor.w	r1, r1, r3
   bbba4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bbba8:	bfc2      	ittt	gt
   bbbaa:	ebd4 050c 	rsbsgt	r5, r4, ip
   bbbae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bbbb2:	bd70      	popgt	{r4, r5, r6, pc}
   bbbb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbbb8:	f04f 0e00 	mov.w	lr, #0
   bbbbc:	3c01      	subs	r4, #1
   bbbbe:	f300 80ab 	bgt.w	bbd18 <__aeabi_dmul+0x238>
   bbbc2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bbbc6:	bfde      	ittt	le
   bbbc8:	2000      	movle	r0, #0
   bbbca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bbbce:	bd70      	pople	{r4, r5, r6, pc}
   bbbd0:	f1c4 0400 	rsb	r4, r4, #0
   bbbd4:	3c20      	subs	r4, #32
   bbbd6:	da35      	bge.n	bbc44 <__aeabi_dmul+0x164>
   bbbd8:	340c      	adds	r4, #12
   bbbda:	dc1b      	bgt.n	bbc14 <__aeabi_dmul+0x134>
   bbbdc:	f104 0414 	add.w	r4, r4, #20
   bbbe0:	f1c4 0520 	rsb	r5, r4, #32
   bbbe4:	fa00 f305 	lsl.w	r3, r0, r5
   bbbe8:	fa20 f004 	lsr.w	r0, r0, r4
   bbbec:	fa01 f205 	lsl.w	r2, r1, r5
   bbbf0:	ea40 0002 	orr.w	r0, r0, r2
   bbbf4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bbbf8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bbbfc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bbc00:	fa21 f604 	lsr.w	r6, r1, r4
   bbc04:	eb42 0106 	adc.w	r1, r2, r6
   bbc08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bbc0c:	bf08      	it	eq
   bbc0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bbc12:	bd70      	pop	{r4, r5, r6, pc}
   bbc14:	f1c4 040c 	rsb	r4, r4, #12
   bbc18:	f1c4 0520 	rsb	r5, r4, #32
   bbc1c:	fa00 f304 	lsl.w	r3, r0, r4
   bbc20:	fa20 f005 	lsr.w	r0, r0, r5
   bbc24:	fa01 f204 	lsl.w	r2, r1, r4
   bbc28:	ea40 0002 	orr.w	r0, r0, r2
   bbc2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbc30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bbc34:	f141 0100 	adc.w	r1, r1, #0
   bbc38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bbc3c:	bf08      	it	eq
   bbc3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bbc42:	bd70      	pop	{r4, r5, r6, pc}
   bbc44:	f1c4 0520 	rsb	r5, r4, #32
   bbc48:	fa00 f205 	lsl.w	r2, r0, r5
   bbc4c:	ea4e 0e02 	orr.w	lr, lr, r2
   bbc50:	fa20 f304 	lsr.w	r3, r0, r4
   bbc54:	fa01 f205 	lsl.w	r2, r1, r5
   bbc58:	ea43 0302 	orr.w	r3, r3, r2
   bbc5c:	fa21 f004 	lsr.w	r0, r1, r4
   bbc60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbc64:	fa21 f204 	lsr.w	r2, r1, r4
   bbc68:	ea20 0002 	bic.w	r0, r0, r2
   bbc6c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bbc70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bbc74:	bf08      	it	eq
   bbc76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bbc7a:	bd70      	pop	{r4, r5, r6, pc}
   bbc7c:	f094 0f00 	teq	r4, #0
   bbc80:	d10f      	bne.n	bbca2 <__aeabi_dmul+0x1c2>
   bbc82:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bbc86:	0040      	lsls	r0, r0, #1
   bbc88:	eb41 0101 	adc.w	r1, r1, r1
   bbc8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbc90:	bf08      	it	eq
   bbc92:	3c01      	subeq	r4, #1
   bbc94:	d0f7      	beq.n	bbc86 <__aeabi_dmul+0x1a6>
   bbc96:	ea41 0106 	orr.w	r1, r1, r6
   bbc9a:	f095 0f00 	teq	r5, #0
   bbc9e:	bf18      	it	ne
   bbca0:	4770      	bxne	lr
   bbca2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bbca6:	0052      	lsls	r2, r2, #1
   bbca8:	eb43 0303 	adc.w	r3, r3, r3
   bbcac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bbcb0:	bf08      	it	eq
   bbcb2:	3d01      	subeq	r5, #1
   bbcb4:	d0f7      	beq.n	bbca6 <__aeabi_dmul+0x1c6>
   bbcb6:	ea43 0306 	orr.w	r3, r3, r6
   bbcba:	4770      	bx	lr
   bbcbc:	ea94 0f0c 	teq	r4, ip
   bbcc0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bbcc4:	bf18      	it	ne
   bbcc6:	ea95 0f0c 	teqne	r5, ip
   bbcca:	d00c      	beq.n	bbce6 <__aeabi_dmul+0x206>
   bbccc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbcd0:	bf18      	it	ne
   bbcd2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbcd6:	d1d1      	bne.n	bbc7c <__aeabi_dmul+0x19c>
   bbcd8:	ea81 0103 	eor.w	r1, r1, r3
   bbcdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbce0:	f04f 0000 	mov.w	r0, #0
   bbce4:	bd70      	pop	{r4, r5, r6, pc}
   bbce6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbcea:	bf06      	itte	eq
   bbcec:	4610      	moveq	r0, r2
   bbcee:	4619      	moveq	r1, r3
   bbcf0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbcf4:	d019      	beq.n	bbd2a <__aeabi_dmul+0x24a>
   bbcf6:	ea94 0f0c 	teq	r4, ip
   bbcfa:	d102      	bne.n	bbd02 <__aeabi_dmul+0x222>
   bbcfc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bbd00:	d113      	bne.n	bbd2a <__aeabi_dmul+0x24a>
   bbd02:	ea95 0f0c 	teq	r5, ip
   bbd06:	d105      	bne.n	bbd14 <__aeabi_dmul+0x234>
   bbd08:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bbd0c:	bf1c      	itt	ne
   bbd0e:	4610      	movne	r0, r2
   bbd10:	4619      	movne	r1, r3
   bbd12:	d10a      	bne.n	bbd2a <__aeabi_dmul+0x24a>
   bbd14:	ea81 0103 	eor.w	r1, r1, r3
   bbd18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbd1c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bbd20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bbd24:	f04f 0000 	mov.w	r0, #0
   bbd28:	bd70      	pop	{r4, r5, r6, pc}
   bbd2a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bbd2e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bbd32:	bd70      	pop	{r4, r5, r6, pc}

000bbd34 <__aeabi_ddiv>:
   bbd34:	b570      	push	{r4, r5, r6, lr}
   bbd36:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bbd3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bbd3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bbd42:	bf1d      	ittte	ne
   bbd44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bbd48:	ea94 0f0c 	teqne	r4, ip
   bbd4c:	ea95 0f0c 	teqne	r5, ip
   bbd50:	f000 f8a7 	bleq	bbea2 <__aeabi_ddiv+0x16e>
   bbd54:	eba4 0405 	sub.w	r4, r4, r5
   bbd58:	ea81 0e03 	eor.w	lr, r1, r3
   bbd5c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bbd60:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bbd64:	f000 8088 	beq.w	bbe78 <__aeabi_ddiv+0x144>
   bbd68:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bbd6c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bbd70:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bbd74:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bbd78:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bbd7c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bbd80:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bbd84:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bbd88:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bbd8c:	429d      	cmp	r5, r3
   bbd8e:	bf08      	it	eq
   bbd90:	4296      	cmpeq	r6, r2
   bbd92:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bbd96:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bbd9a:	d202      	bcs.n	bbda2 <__aeabi_ddiv+0x6e>
   bbd9c:	085b      	lsrs	r3, r3, #1
   bbd9e:	ea4f 0232 	mov.w	r2, r2, rrx
   bbda2:	1ab6      	subs	r6, r6, r2
   bbda4:	eb65 0503 	sbc.w	r5, r5, r3
   bbda8:	085b      	lsrs	r3, r3, #1
   bbdaa:	ea4f 0232 	mov.w	r2, r2, rrx
   bbdae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bbdb2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bbdb6:	ebb6 0e02 	subs.w	lr, r6, r2
   bbdba:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbdbe:	bf22      	ittt	cs
   bbdc0:	1ab6      	subcs	r6, r6, r2
   bbdc2:	4675      	movcs	r5, lr
   bbdc4:	ea40 000c 	orrcs.w	r0, r0, ip
   bbdc8:	085b      	lsrs	r3, r3, #1
   bbdca:	ea4f 0232 	mov.w	r2, r2, rrx
   bbdce:	ebb6 0e02 	subs.w	lr, r6, r2
   bbdd2:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbdd6:	bf22      	ittt	cs
   bbdd8:	1ab6      	subcs	r6, r6, r2
   bbdda:	4675      	movcs	r5, lr
   bbddc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bbde0:	085b      	lsrs	r3, r3, #1
   bbde2:	ea4f 0232 	mov.w	r2, r2, rrx
   bbde6:	ebb6 0e02 	subs.w	lr, r6, r2
   bbdea:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbdee:	bf22      	ittt	cs
   bbdf0:	1ab6      	subcs	r6, r6, r2
   bbdf2:	4675      	movcs	r5, lr
   bbdf4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bbdf8:	085b      	lsrs	r3, r3, #1
   bbdfa:	ea4f 0232 	mov.w	r2, r2, rrx
   bbdfe:	ebb6 0e02 	subs.w	lr, r6, r2
   bbe02:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbe06:	bf22      	ittt	cs
   bbe08:	1ab6      	subcs	r6, r6, r2
   bbe0a:	4675      	movcs	r5, lr
   bbe0c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bbe10:	ea55 0e06 	orrs.w	lr, r5, r6
   bbe14:	d018      	beq.n	bbe48 <__aeabi_ddiv+0x114>
   bbe16:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bbe1a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bbe1e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bbe22:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bbe26:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bbe2a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bbe2e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bbe32:	d1c0      	bne.n	bbdb6 <__aeabi_ddiv+0x82>
   bbe34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbe38:	d10b      	bne.n	bbe52 <__aeabi_ddiv+0x11e>
   bbe3a:	ea41 0100 	orr.w	r1, r1, r0
   bbe3e:	f04f 0000 	mov.w	r0, #0
   bbe42:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bbe46:	e7b6      	b.n	bbdb6 <__aeabi_ddiv+0x82>
   bbe48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbe4c:	bf04      	itt	eq
   bbe4e:	4301      	orreq	r1, r0
   bbe50:	2000      	moveq	r0, #0
   bbe52:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bbe56:	bf88      	it	hi
   bbe58:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bbe5c:	f63f aeaf 	bhi.w	bbbbe <__aeabi_dmul+0xde>
   bbe60:	ebb5 0c03 	subs.w	ip, r5, r3
   bbe64:	bf04      	itt	eq
   bbe66:	ebb6 0c02 	subseq.w	ip, r6, r2
   bbe6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bbe6e:	f150 0000 	adcs.w	r0, r0, #0
   bbe72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbe76:	bd70      	pop	{r4, r5, r6, pc}
   bbe78:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bbe7c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bbe80:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bbe84:	bfc2      	ittt	gt
   bbe86:	ebd4 050c 	rsbsgt	r5, r4, ip
   bbe8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bbe8e:	bd70      	popgt	{r4, r5, r6, pc}
   bbe90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbe94:	f04f 0e00 	mov.w	lr, #0
   bbe98:	3c01      	subs	r4, #1
   bbe9a:	e690      	b.n	bbbbe <__aeabi_dmul+0xde>
   bbe9c:	ea45 0e06 	orr.w	lr, r5, r6
   bbea0:	e68d      	b.n	bbbbe <__aeabi_dmul+0xde>
   bbea2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bbea6:	ea94 0f0c 	teq	r4, ip
   bbeaa:	bf08      	it	eq
   bbeac:	ea95 0f0c 	teqeq	r5, ip
   bbeb0:	f43f af3b 	beq.w	bbd2a <__aeabi_dmul+0x24a>
   bbeb4:	ea94 0f0c 	teq	r4, ip
   bbeb8:	d10a      	bne.n	bbed0 <__aeabi_ddiv+0x19c>
   bbeba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bbebe:	f47f af34 	bne.w	bbd2a <__aeabi_dmul+0x24a>
   bbec2:	ea95 0f0c 	teq	r5, ip
   bbec6:	f47f af25 	bne.w	bbd14 <__aeabi_dmul+0x234>
   bbeca:	4610      	mov	r0, r2
   bbecc:	4619      	mov	r1, r3
   bbece:	e72c      	b.n	bbd2a <__aeabi_dmul+0x24a>
   bbed0:	ea95 0f0c 	teq	r5, ip
   bbed4:	d106      	bne.n	bbee4 <__aeabi_ddiv+0x1b0>
   bbed6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bbeda:	f43f aefd 	beq.w	bbcd8 <__aeabi_dmul+0x1f8>
   bbede:	4610      	mov	r0, r2
   bbee0:	4619      	mov	r1, r3
   bbee2:	e722      	b.n	bbd2a <__aeabi_dmul+0x24a>
   bbee4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbee8:	bf18      	it	ne
   bbeea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbeee:	f47f aec5 	bne.w	bbc7c <__aeabi_dmul+0x19c>
   bbef2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bbef6:	f47f af0d 	bne.w	bbd14 <__aeabi_dmul+0x234>
   bbefa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bbefe:	f47f aeeb 	bne.w	bbcd8 <__aeabi_dmul+0x1f8>
   bbf02:	e712      	b.n	bbd2a <__aeabi_dmul+0x24a>

000bbf04 <__gedf2>:
   bbf04:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bbf08:	e006      	b.n	bbf18 <__cmpdf2+0x4>
   bbf0a:	bf00      	nop

000bbf0c <__ledf2>:
   bbf0c:	f04f 0c01 	mov.w	ip, #1
   bbf10:	e002      	b.n	bbf18 <__cmpdf2+0x4>
   bbf12:	bf00      	nop

000bbf14 <__cmpdf2>:
   bbf14:	f04f 0c01 	mov.w	ip, #1
   bbf18:	f84d cd04 	str.w	ip, [sp, #-4]!
   bbf1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbf20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbf24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbf28:	bf18      	it	ne
   bbf2a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bbf2e:	d01b      	beq.n	bbf68 <__cmpdf2+0x54>
   bbf30:	b001      	add	sp, #4
   bbf32:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bbf36:	bf0c      	ite	eq
   bbf38:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bbf3c:	ea91 0f03 	teqne	r1, r3
   bbf40:	bf02      	ittt	eq
   bbf42:	ea90 0f02 	teqeq	r0, r2
   bbf46:	2000      	moveq	r0, #0
   bbf48:	4770      	bxeq	lr
   bbf4a:	f110 0f00 	cmn.w	r0, #0
   bbf4e:	ea91 0f03 	teq	r1, r3
   bbf52:	bf58      	it	pl
   bbf54:	4299      	cmppl	r1, r3
   bbf56:	bf08      	it	eq
   bbf58:	4290      	cmpeq	r0, r2
   bbf5a:	bf2c      	ite	cs
   bbf5c:	17d8      	asrcs	r0, r3, #31
   bbf5e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bbf62:	f040 0001 	orr.w	r0, r0, #1
   bbf66:	4770      	bx	lr
   bbf68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbf6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbf70:	d102      	bne.n	bbf78 <__cmpdf2+0x64>
   bbf72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bbf76:	d107      	bne.n	bbf88 <__cmpdf2+0x74>
   bbf78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbf7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbf80:	d1d6      	bne.n	bbf30 <__cmpdf2+0x1c>
   bbf82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bbf86:	d0d3      	beq.n	bbf30 <__cmpdf2+0x1c>
   bbf88:	f85d 0b04 	ldr.w	r0, [sp], #4
   bbf8c:	4770      	bx	lr
   bbf8e:	bf00      	nop

000bbf90 <__aeabi_cdrcmple>:
   bbf90:	4684      	mov	ip, r0
   bbf92:	4610      	mov	r0, r2
   bbf94:	4662      	mov	r2, ip
   bbf96:	468c      	mov	ip, r1
   bbf98:	4619      	mov	r1, r3
   bbf9a:	4663      	mov	r3, ip
   bbf9c:	e000      	b.n	bbfa0 <__aeabi_cdcmpeq>
   bbf9e:	bf00      	nop

000bbfa0 <__aeabi_cdcmpeq>:
   bbfa0:	b501      	push	{r0, lr}
   bbfa2:	f7ff ffb7 	bl	bbf14 <__cmpdf2>
   bbfa6:	2800      	cmp	r0, #0
   bbfa8:	bf48      	it	mi
   bbfaa:	f110 0f00 	cmnmi.w	r0, #0
   bbfae:	bd01      	pop	{r0, pc}

000bbfb0 <__aeabi_dcmpeq>:
   bbfb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbfb4:	f7ff fff4 	bl	bbfa0 <__aeabi_cdcmpeq>
   bbfb8:	bf0c      	ite	eq
   bbfba:	2001      	moveq	r0, #1
   bbfbc:	2000      	movne	r0, #0
   bbfbe:	f85d fb08 	ldr.w	pc, [sp], #8
   bbfc2:	bf00      	nop

000bbfc4 <__aeabi_dcmplt>:
   bbfc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbfc8:	f7ff ffea 	bl	bbfa0 <__aeabi_cdcmpeq>
   bbfcc:	bf34      	ite	cc
   bbfce:	2001      	movcc	r0, #1
   bbfd0:	2000      	movcs	r0, #0
   bbfd2:	f85d fb08 	ldr.w	pc, [sp], #8
   bbfd6:	bf00      	nop

000bbfd8 <__aeabi_dcmple>:
   bbfd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbfdc:	f7ff ffe0 	bl	bbfa0 <__aeabi_cdcmpeq>
   bbfe0:	bf94      	ite	ls
   bbfe2:	2001      	movls	r0, #1
   bbfe4:	2000      	movhi	r0, #0
   bbfe6:	f85d fb08 	ldr.w	pc, [sp], #8
   bbfea:	bf00      	nop

000bbfec <__aeabi_dcmpge>:
   bbfec:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbff0:	f7ff ffce 	bl	bbf90 <__aeabi_cdrcmple>
   bbff4:	bf94      	ite	ls
   bbff6:	2001      	movls	r0, #1
   bbff8:	2000      	movhi	r0, #0
   bbffa:	f85d fb08 	ldr.w	pc, [sp], #8
   bbffe:	bf00      	nop

000bc000 <__aeabi_dcmpgt>:
   bc000:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc004:	f7ff ffc4 	bl	bbf90 <__aeabi_cdrcmple>
   bc008:	bf34      	ite	cc
   bc00a:	2001      	movcc	r0, #1
   bc00c:	2000      	movcs	r0, #0
   bc00e:	f85d fb08 	ldr.w	pc, [sp], #8
   bc012:	bf00      	nop

000bc014 <__aeabi_dcmpun>:
   bc014:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bc018:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc01c:	d102      	bne.n	bc024 <__aeabi_dcmpun+0x10>
   bc01e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bc022:	d10a      	bne.n	bc03a <__aeabi_dcmpun+0x26>
   bc024:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bc028:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc02c:	d102      	bne.n	bc034 <__aeabi_dcmpun+0x20>
   bc02e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bc032:	d102      	bne.n	bc03a <__aeabi_dcmpun+0x26>
   bc034:	f04f 0000 	mov.w	r0, #0
   bc038:	4770      	bx	lr
   bc03a:	f04f 0001 	mov.w	r0, #1
   bc03e:	4770      	bx	lr

000bc040 <__aeabi_d2uiz>:
   bc040:	004a      	lsls	r2, r1, #1
   bc042:	d211      	bcs.n	bc068 <__aeabi_d2uiz+0x28>
   bc044:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bc048:	d211      	bcs.n	bc06e <__aeabi_d2uiz+0x2e>
   bc04a:	d50d      	bpl.n	bc068 <__aeabi_d2uiz+0x28>
   bc04c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bc050:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bc054:	d40e      	bmi.n	bc074 <__aeabi_d2uiz+0x34>
   bc056:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bc05a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bc05e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bc062:	fa23 f002 	lsr.w	r0, r3, r2
   bc066:	4770      	bx	lr
   bc068:	f04f 0000 	mov.w	r0, #0
   bc06c:	4770      	bx	lr
   bc06e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bc072:	d102      	bne.n	bc07a <__aeabi_d2uiz+0x3a>
   bc074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc078:	4770      	bx	lr
   bc07a:	f04f 0000 	mov.w	r0, #0
   bc07e:	4770      	bx	lr

000bc080 <__aeabi_d2f>:
   bc080:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bc084:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bc088:	bf24      	itt	cs
   bc08a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bc08e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bc092:	d90d      	bls.n	bc0b0 <__aeabi_d2f+0x30>
   bc094:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bc098:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bc09c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bc0a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bc0a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bc0a8:	bf08      	it	eq
   bc0aa:	f020 0001 	biceq.w	r0, r0, #1
   bc0ae:	4770      	bx	lr
   bc0b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bc0b4:	d121      	bne.n	bc0fa <__aeabi_d2f+0x7a>
   bc0b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bc0ba:	bfbc      	itt	lt
   bc0bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bc0c0:	4770      	bxlt	lr
   bc0c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc0c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bc0ca:	f1c2 0218 	rsb	r2, r2, #24
   bc0ce:	f1c2 0c20 	rsb	ip, r2, #32
   bc0d2:	fa10 f30c 	lsls.w	r3, r0, ip
   bc0d6:	fa20 f002 	lsr.w	r0, r0, r2
   bc0da:	bf18      	it	ne
   bc0dc:	f040 0001 	orrne.w	r0, r0, #1
   bc0e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bc0e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bc0e8:	fa03 fc0c 	lsl.w	ip, r3, ip
   bc0ec:	ea40 000c 	orr.w	r0, r0, ip
   bc0f0:	fa23 f302 	lsr.w	r3, r3, r2
   bc0f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bc0f8:	e7cc      	b.n	bc094 <__aeabi_d2f+0x14>
   bc0fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bc0fe:	d107      	bne.n	bc110 <__aeabi_d2f+0x90>
   bc100:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bc104:	bf1e      	ittt	ne
   bc106:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bc10a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bc10e:	4770      	bxne	lr
   bc110:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bc114:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bc118:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bc11c:	4770      	bx	lr
   bc11e:	bf00      	nop

000bc120 <__aeabi_d2ulz>:
   bc120:	b5d0      	push	{r4, r6, r7, lr}
   bc122:	4b0c      	ldr	r3, [pc, #48]	; (bc154 <__aeabi_d2ulz+0x34>)
   bc124:	2200      	movs	r2, #0
   bc126:	4606      	mov	r6, r0
   bc128:	460f      	mov	r7, r1
   bc12a:	f7ff fcd9 	bl	bbae0 <__aeabi_dmul>
   bc12e:	f7ff ff87 	bl	bc040 <__aeabi_d2uiz>
   bc132:	4604      	mov	r4, r0
   bc134:	f7ff fc5a 	bl	bb9ec <__aeabi_ui2d>
   bc138:	4b07      	ldr	r3, [pc, #28]	; (bc158 <__aeabi_d2ulz+0x38>)
   bc13a:	2200      	movs	r2, #0
   bc13c:	f7ff fcd0 	bl	bbae0 <__aeabi_dmul>
   bc140:	4602      	mov	r2, r0
   bc142:	460b      	mov	r3, r1
   bc144:	4630      	mov	r0, r6
   bc146:	4639      	mov	r1, r7
   bc148:	f7ff fb12 	bl	bb770 <__aeabi_dsub>
   bc14c:	f7ff ff78 	bl	bc040 <__aeabi_d2uiz>
   bc150:	4621      	mov	r1, r4
   bc152:	bdd0      	pop	{r4, r6, r7, pc}
   bc154:	3df00000 	.word	0x3df00000
   bc158:	41f00000 	.word	0x41f00000

000bc15c <atexit>:
   bc15c:	2300      	movs	r3, #0
   bc15e:	4601      	mov	r1, r0
   bc160:	461a      	mov	r2, r3
   bc162:	4618      	mov	r0, r3
   bc164:	f000 bfce 	b.w	bd104 <__register_exitproc>

000bc168 <atoi>:
   bc168:	220a      	movs	r2, #10
   bc16a:	2100      	movs	r1, #0
   bc16c:	f000 bfc0 	b.w	bd0f0 <strtol>

000bc170 <memcmp>:
   bc170:	b510      	push	{r4, lr}
   bc172:	3901      	subs	r1, #1
   bc174:	4402      	add	r2, r0
   bc176:	4290      	cmp	r0, r2
   bc178:	d101      	bne.n	bc17e <memcmp+0xe>
   bc17a:	2000      	movs	r0, #0
   bc17c:	e005      	b.n	bc18a <memcmp+0x1a>
   bc17e:	7803      	ldrb	r3, [r0, #0]
   bc180:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bc184:	42a3      	cmp	r3, r4
   bc186:	d001      	beq.n	bc18c <memcmp+0x1c>
   bc188:	1b18      	subs	r0, r3, r4
   bc18a:	bd10      	pop	{r4, pc}
   bc18c:	3001      	adds	r0, #1
   bc18e:	e7f2      	b.n	bc176 <memcmp+0x6>

000bc190 <memcpy>:
   bc190:	440a      	add	r2, r1
   bc192:	4291      	cmp	r1, r2
   bc194:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bc198:	d100      	bne.n	bc19c <memcpy+0xc>
   bc19a:	4770      	bx	lr
   bc19c:	b510      	push	{r4, lr}
   bc19e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc1a2:	f803 4f01 	strb.w	r4, [r3, #1]!
   bc1a6:	4291      	cmp	r1, r2
   bc1a8:	d1f9      	bne.n	bc19e <memcpy+0xe>
   bc1aa:	bd10      	pop	{r4, pc}

000bc1ac <memmove>:
   bc1ac:	4288      	cmp	r0, r1
   bc1ae:	b510      	push	{r4, lr}
   bc1b0:	eb01 0402 	add.w	r4, r1, r2
   bc1b4:	d902      	bls.n	bc1bc <memmove+0x10>
   bc1b6:	4284      	cmp	r4, r0
   bc1b8:	4623      	mov	r3, r4
   bc1ba:	d807      	bhi.n	bc1cc <memmove+0x20>
   bc1bc:	1e43      	subs	r3, r0, #1
   bc1be:	42a1      	cmp	r1, r4
   bc1c0:	d008      	beq.n	bc1d4 <memmove+0x28>
   bc1c2:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc1c6:	f803 2f01 	strb.w	r2, [r3, #1]!
   bc1ca:	e7f8      	b.n	bc1be <memmove+0x12>
   bc1cc:	4402      	add	r2, r0
   bc1ce:	4601      	mov	r1, r0
   bc1d0:	428a      	cmp	r2, r1
   bc1d2:	d100      	bne.n	bc1d6 <memmove+0x2a>
   bc1d4:	bd10      	pop	{r4, pc}
   bc1d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bc1da:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bc1de:	e7f7      	b.n	bc1d0 <memmove+0x24>

000bc1e0 <memset>:
   bc1e0:	4402      	add	r2, r0
   bc1e2:	4603      	mov	r3, r0
   bc1e4:	4293      	cmp	r3, r2
   bc1e6:	d100      	bne.n	bc1ea <memset+0xa>
   bc1e8:	4770      	bx	lr
   bc1ea:	f803 1b01 	strb.w	r1, [r3], #1
   bc1ee:	e7f9      	b.n	bc1e4 <memset+0x4>

000bc1f0 <srand>:
   bc1f0:	b538      	push	{r3, r4, r5, lr}
   bc1f2:	4b10      	ldr	r3, [pc, #64]	; (bc234 <srand+0x44>)
   bc1f4:	681d      	ldr	r5, [r3, #0]
   bc1f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc1f8:	4604      	mov	r4, r0
   bc1fa:	b9b3      	cbnz	r3, bc22a <srand+0x3a>
   bc1fc:	2018      	movs	r0, #24
   bc1fe:	f7fc fc61 	bl	b8ac4 <malloc>
   bc202:	4602      	mov	r2, r0
   bc204:	63a8      	str	r0, [r5, #56]	; 0x38
   bc206:	b920      	cbnz	r0, bc212 <srand+0x22>
   bc208:	4b0b      	ldr	r3, [pc, #44]	; (bc238 <srand+0x48>)
   bc20a:	480c      	ldr	r0, [pc, #48]	; (bc23c <srand+0x4c>)
   bc20c:	2142      	movs	r1, #66	; 0x42
   bc20e:	f7fc fc99 	bl	b8b44 <__assert_func>
   bc212:	490b      	ldr	r1, [pc, #44]	; (bc240 <srand+0x50>)
   bc214:	4b0b      	ldr	r3, [pc, #44]	; (bc244 <srand+0x54>)
   bc216:	e9c0 1300 	strd	r1, r3, [r0]
   bc21a:	4b0b      	ldr	r3, [pc, #44]	; (bc248 <srand+0x58>)
   bc21c:	6083      	str	r3, [r0, #8]
   bc21e:	230b      	movs	r3, #11
   bc220:	8183      	strh	r3, [r0, #12]
   bc222:	2100      	movs	r1, #0
   bc224:	2001      	movs	r0, #1
   bc226:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bc22a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc22c:	2200      	movs	r2, #0
   bc22e:	611c      	str	r4, [r3, #16]
   bc230:	615a      	str	r2, [r3, #20]
   bc232:	bd38      	pop	{r3, r4, r5, pc}
   bc234:	200350c8 	.word	0x200350c8
   bc238:	000becd9 	.word	0x000becd9
   bc23c:	000becf0 	.word	0x000becf0
   bc240:	abcd330e 	.word	0xabcd330e
   bc244:	e66d1234 	.word	0xe66d1234
   bc248:	0005deec 	.word	0x0005deec

000bc24c <strcmp>:
   bc24c:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc250:	f811 3b01 	ldrb.w	r3, [r1], #1
   bc254:	2a01      	cmp	r2, #1
   bc256:	bf28      	it	cs
   bc258:	429a      	cmpcs	r2, r3
   bc25a:	d0f7      	beq.n	bc24c <strcmp>
   bc25c:	1ad0      	subs	r0, r2, r3
   bc25e:	4770      	bx	lr

000bc260 <strcpy>:
   bc260:	4603      	mov	r3, r0
   bc262:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc266:	f803 2b01 	strb.w	r2, [r3], #1
   bc26a:	2a00      	cmp	r2, #0
   bc26c:	d1f9      	bne.n	bc262 <strcpy+0x2>
   bc26e:	4770      	bx	lr

000bc270 <strlen>:
   bc270:	4603      	mov	r3, r0
   bc272:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc276:	2a00      	cmp	r2, #0
   bc278:	d1fb      	bne.n	bc272 <strlen+0x2>
   bc27a:	1a18      	subs	r0, r3, r0
   bc27c:	3801      	subs	r0, #1
   bc27e:	4770      	bx	lr

000bc280 <strncmp>:
   bc280:	b510      	push	{r4, lr}
   bc282:	b17a      	cbz	r2, bc2a4 <strncmp+0x24>
   bc284:	4603      	mov	r3, r0
   bc286:	3901      	subs	r1, #1
   bc288:	1884      	adds	r4, r0, r2
   bc28a:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc28e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bc292:	4290      	cmp	r0, r2
   bc294:	d101      	bne.n	bc29a <strncmp+0x1a>
   bc296:	42a3      	cmp	r3, r4
   bc298:	d101      	bne.n	bc29e <strncmp+0x1e>
   bc29a:	1a80      	subs	r0, r0, r2
   bc29c:	bd10      	pop	{r4, pc}
   bc29e:	2800      	cmp	r0, #0
   bc2a0:	d1f3      	bne.n	bc28a <strncmp+0xa>
   bc2a2:	e7fa      	b.n	bc29a <strncmp+0x1a>
   bc2a4:	4610      	mov	r0, r2
   bc2a6:	e7f9      	b.n	bc29c <strncmp+0x1c>

000bc2a8 <strnlen>:
   bc2a8:	b510      	push	{r4, lr}
   bc2aa:	4602      	mov	r2, r0
   bc2ac:	4401      	add	r1, r0
   bc2ae:	428a      	cmp	r2, r1
   bc2b0:	4613      	mov	r3, r2
   bc2b2:	d003      	beq.n	bc2bc <strnlen+0x14>
   bc2b4:	781c      	ldrb	r4, [r3, #0]
   bc2b6:	3201      	adds	r2, #1
   bc2b8:	2c00      	cmp	r4, #0
   bc2ba:	d1f8      	bne.n	bc2ae <strnlen+0x6>
   bc2bc:	1a18      	subs	r0, r3, r0
   bc2be:	bd10      	pop	{r4, pc}

000bc2c0 <strstr>:
   bc2c0:	780a      	ldrb	r2, [r1, #0]
   bc2c2:	b570      	push	{r4, r5, r6, lr}
   bc2c4:	b96a      	cbnz	r2, bc2e2 <strstr+0x22>
   bc2c6:	bd70      	pop	{r4, r5, r6, pc}
   bc2c8:	429a      	cmp	r2, r3
   bc2ca:	d109      	bne.n	bc2e0 <strstr+0x20>
   bc2cc:	460c      	mov	r4, r1
   bc2ce:	4605      	mov	r5, r0
   bc2d0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bc2d4:	2b00      	cmp	r3, #0
   bc2d6:	d0f6      	beq.n	bc2c6 <strstr+0x6>
   bc2d8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bc2dc:	429e      	cmp	r6, r3
   bc2de:	d0f7      	beq.n	bc2d0 <strstr+0x10>
   bc2e0:	3001      	adds	r0, #1
   bc2e2:	7803      	ldrb	r3, [r0, #0]
   bc2e4:	2b00      	cmp	r3, #0
   bc2e6:	d1ef      	bne.n	bc2c8 <strstr+0x8>
   bc2e8:	4618      	mov	r0, r3
   bc2ea:	e7ec      	b.n	bc2c6 <strstr+0x6>

000bc2ec <sulp>:
   bc2ec:	b570      	push	{r4, r5, r6, lr}
   bc2ee:	4604      	mov	r4, r0
   bc2f0:	460d      	mov	r5, r1
   bc2f2:	ec45 4b10 	vmov	d0, r4, r5
   bc2f6:	4616      	mov	r6, r2
   bc2f8:	f001 fe5e 	bl	bdfb8 <__ulp>
   bc2fc:	ec51 0b10 	vmov	r0, r1, d0
   bc300:	b17e      	cbz	r6, bc322 <sulp+0x36>
   bc302:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bc306:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bc30a:	2b00      	cmp	r3, #0
   bc30c:	dd09      	ble.n	bc322 <sulp+0x36>
   bc30e:	051b      	lsls	r3, r3, #20
   bc310:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bc314:	2400      	movs	r4, #0
   bc316:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bc31a:	4622      	mov	r2, r4
   bc31c:	462b      	mov	r3, r5
   bc31e:	f7ff fbdf 	bl	bbae0 <__aeabi_dmul>
   bc322:	bd70      	pop	{r4, r5, r6, pc}
   bc324:	0000      	movs	r0, r0
	...

000bc328 <_strtod_l>:
   bc328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc32c:	ed2d 8b02 	vpush	{d8}
   bc330:	b09d      	sub	sp, #116	; 0x74
   bc332:	461f      	mov	r7, r3
   bc334:	2300      	movs	r3, #0
   bc336:	9318      	str	r3, [sp, #96]	; 0x60
   bc338:	4ba2      	ldr	r3, [pc, #648]	; (bc5c4 <_strtod_l+0x29c>)
   bc33a:	9213      	str	r2, [sp, #76]	; 0x4c
   bc33c:	681b      	ldr	r3, [r3, #0]
   bc33e:	9305      	str	r3, [sp, #20]
   bc340:	4604      	mov	r4, r0
   bc342:	4618      	mov	r0, r3
   bc344:	4688      	mov	r8, r1
   bc346:	f7ff ff93 	bl	bc270 <strlen>
   bc34a:	f04f 0a00 	mov.w	sl, #0
   bc34e:	4605      	mov	r5, r0
   bc350:	f04f 0b00 	mov.w	fp, #0
   bc354:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc358:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc35a:	781a      	ldrb	r2, [r3, #0]
   bc35c:	2a2b      	cmp	r2, #43	; 0x2b
   bc35e:	d04e      	beq.n	bc3fe <_strtod_l+0xd6>
   bc360:	d83b      	bhi.n	bc3da <_strtod_l+0xb2>
   bc362:	2a0d      	cmp	r2, #13
   bc364:	d834      	bhi.n	bc3d0 <_strtod_l+0xa8>
   bc366:	2a08      	cmp	r2, #8
   bc368:	d834      	bhi.n	bc3d4 <_strtod_l+0xac>
   bc36a:	2a00      	cmp	r2, #0
   bc36c:	d03e      	beq.n	bc3ec <_strtod_l+0xc4>
   bc36e:	2300      	movs	r3, #0
   bc370:	930a      	str	r3, [sp, #40]	; 0x28
   bc372:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bc374:	7833      	ldrb	r3, [r6, #0]
   bc376:	2b30      	cmp	r3, #48	; 0x30
   bc378:	f040 80b0 	bne.w	bc4dc <_strtod_l+0x1b4>
   bc37c:	7873      	ldrb	r3, [r6, #1]
   bc37e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc382:	2b58      	cmp	r3, #88	; 0x58
   bc384:	d168      	bne.n	bc458 <_strtod_l+0x130>
   bc386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bc388:	9301      	str	r3, [sp, #4]
   bc38a:	ab18      	add	r3, sp, #96	; 0x60
   bc38c:	9702      	str	r7, [sp, #8]
   bc38e:	9300      	str	r3, [sp, #0]
   bc390:	4a8d      	ldr	r2, [pc, #564]	; (bc5c8 <_strtod_l+0x2a0>)
   bc392:	ab19      	add	r3, sp, #100	; 0x64
   bc394:	a917      	add	r1, sp, #92	; 0x5c
   bc396:	4620      	mov	r0, r4
   bc398:	f000 ff7e 	bl	bd298 <__gethex>
   bc39c:	f010 0707 	ands.w	r7, r0, #7
   bc3a0:	4605      	mov	r5, r0
   bc3a2:	d005      	beq.n	bc3b0 <_strtod_l+0x88>
   bc3a4:	2f06      	cmp	r7, #6
   bc3a6:	d12c      	bne.n	bc402 <_strtod_l+0xda>
   bc3a8:	3601      	adds	r6, #1
   bc3aa:	2300      	movs	r3, #0
   bc3ac:	9617      	str	r6, [sp, #92]	; 0x5c
   bc3ae:	930a      	str	r3, [sp, #40]	; 0x28
   bc3b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bc3b2:	2b00      	cmp	r3, #0
   bc3b4:	f040 8590 	bne.w	bced8 <_strtod_l+0xbb0>
   bc3b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bc3ba:	b1eb      	cbz	r3, bc3f8 <_strtod_l+0xd0>
   bc3bc:	4652      	mov	r2, sl
   bc3be:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bc3c2:	ec43 2b10 	vmov	d0, r2, r3
   bc3c6:	b01d      	add	sp, #116	; 0x74
   bc3c8:	ecbd 8b02 	vpop	{d8}
   bc3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc3d0:	2a20      	cmp	r2, #32
   bc3d2:	d1cc      	bne.n	bc36e <_strtod_l+0x46>
   bc3d4:	3301      	adds	r3, #1
   bc3d6:	9317      	str	r3, [sp, #92]	; 0x5c
   bc3d8:	e7be      	b.n	bc358 <_strtod_l+0x30>
   bc3da:	2a2d      	cmp	r2, #45	; 0x2d
   bc3dc:	d1c7      	bne.n	bc36e <_strtod_l+0x46>
   bc3de:	2201      	movs	r2, #1
   bc3e0:	920a      	str	r2, [sp, #40]	; 0x28
   bc3e2:	1c5a      	adds	r2, r3, #1
   bc3e4:	9217      	str	r2, [sp, #92]	; 0x5c
   bc3e6:	785b      	ldrb	r3, [r3, #1]
   bc3e8:	2b00      	cmp	r3, #0
   bc3ea:	d1c2      	bne.n	bc372 <_strtod_l+0x4a>
   bc3ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bc3ee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc3f2:	2b00      	cmp	r3, #0
   bc3f4:	f040 856e 	bne.w	bced4 <_strtod_l+0xbac>
   bc3f8:	4652      	mov	r2, sl
   bc3fa:	465b      	mov	r3, fp
   bc3fc:	e7e1      	b.n	bc3c2 <_strtod_l+0x9a>
   bc3fe:	2200      	movs	r2, #0
   bc400:	e7ee      	b.n	bc3e0 <_strtod_l+0xb8>
   bc402:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bc404:	b13a      	cbz	r2, bc416 <_strtod_l+0xee>
   bc406:	2135      	movs	r1, #53	; 0x35
   bc408:	a81a      	add	r0, sp, #104	; 0x68
   bc40a:	f001 fee0 	bl	be1ce <__copybits>
   bc40e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc410:	4620      	mov	r0, r4
   bc412:	f001 fa9f 	bl	bd954 <_Bfree>
   bc416:	3f01      	subs	r7, #1
   bc418:	2f04      	cmp	r7, #4
   bc41a:	d806      	bhi.n	bc42a <_strtod_l+0x102>
   bc41c:	e8df f007 	tbb	[pc, r7]
   bc420:	1714030a 	.word	0x1714030a
   bc424:	0a          	.byte	0x0a
   bc425:	00          	.byte	0x00
   bc426:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bc42a:	0728      	lsls	r0, r5, #28
   bc42c:	d5c0      	bpl.n	bc3b0 <_strtod_l+0x88>
   bc42e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bc432:	e7bd      	b.n	bc3b0 <_strtod_l+0x88>
   bc434:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bc438:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bc43a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bc43e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bc442:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bc446:	e7f0      	b.n	bc42a <_strtod_l+0x102>
   bc448:	f8df b180 	ldr.w	fp, [pc, #384]	; bc5cc <_strtod_l+0x2a4>
   bc44c:	e7ed      	b.n	bc42a <_strtod_l+0x102>
   bc44e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bc452:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc456:	e7e8      	b.n	bc42a <_strtod_l+0x102>
   bc458:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc45a:	1c5a      	adds	r2, r3, #1
   bc45c:	9217      	str	r2, [sp, #92]	; 0x5c
   bc45e:	785b      	ldrb	r3, [r3, #1]
   bc460:	2b30      	cmp	r3, #48	; 0x30
   bc462:	d0f9      	beq.n	bc458 <_strtod_l+0x130>
   bc464:	2b00      	cmp	r3, #0
   bc466:	d0a3      	beq.n	bc3b0 <_strtod_l+0x88>
   bc468:	2301      	movs	r3, #1
   bc46a:	f04f 0900 	mov.w	r9, #0
   bc46e:	9304      	str	r3, [sp, #16]
   bc470:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc472:	9308      	str	r3, [sp, #32]
   bc474:	f8cd 901c 	str.w	r9, [sp, #28]
   bc478:	464f      	mov	r7, r9
   bc47a:	220a      	movs	r2, #10
   bc47c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bc47e:	7806      	ldrb	r6, [r0, #0]
   bc480:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bc484:	b2d9      	uxtb	r1, r3
   bc486:	2909      	cmp	r1, #9
   bc488:	d92a      	bls.n	bc4e0 <_strtod_l+0x1b8>
   bc48a:	9905      	ldr	r1, [sp, #20]
   bc48c:	462a      	mov	r2, r5
   bc48e:	f7ff fef7 	bl	bc280 <strncmp>
   bc492:	b398      	cbz	r0, bc4fc <_strtod_l+0x1d4>
   bc494:	2000      	movs	r0, #0
   bc496:	4632      	mov	r2, r6
   bc498:	463d      	mov	r5, r7
   bc49a:	9005      	str	r0, [sp, #20]
   bc49c:	4603      	mov	r3, r0
   bc49e:	2a65      	cmp	r2, #101	; 0x65
   bc4a0:	d001      	beq.n	bc4a6 <_strtod_l+0x17e>
   bc4a2:	2a45      	cmp	r2, #69	; 0x45
   bc4a4:	d118      	bne.n	bc4d8 <_strtod_l+0x1b0>
   bc4a6:	b91d      	cbnz	r5, bc4b0 <_strtod_l+0x188>
   bc4a8:	9a04      	ldr	r2, [sp, #16]
   bc4aa:	4302      	orrs	r2, r0
   bc4ac:	d09e      	beq.n	bc3ec <_strtod_l+0xc4>
   bc4ae:	2500      	movs	r5, #0
   bc4b0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bc4b4:	f108 0201 	add.w	r2, r8, #1
   bc4b8:	9217      	str	r2, [sp, #92]	; 0x5c
   bc4ba:	f898 2001 	ldrb.w	r2, [r8, #1]
   bc4be:	2a2b      	cmp	r2, #43	; 0x2b
   bc4c0:	d075      	beq.n	bc5ae <_strtod_l+0x286>
   bc4c2:	2a2d      	cmp	r2, #45	; 0x2d
   bc4c4:	d07b      	beq.n	bc5be <_strtod_l+0x296>
   bc4c6:	f04f 0c00 	mov.w	ip, #0
   bc4ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bc4ce:	2909      	cmp	r1, #9
   bc4d0:	f240 8082 	bls.w	bc5d8 <_strtod_l+0x2b0>
   bc4d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc4d8:	2600      	movs	r6, #0
   bc4da:	e09d      	b.n	bc618 <_strtod_l+0x2f0>
   bc4dc:	2300      	movs	r3, #0
   bc4de:	e7c4      	b.n	bc46a <_strtod_l+0x142>
   bc4e0:	2f08      	cmp	r7, #8
   bc4e2:	bfd8      	it	le
   bc4e4:	9907      	ldrle	r1, [sp, #28]
   bc4e6:	f100 0001 	add.w	r0, r0, #1
   bc4ea:	bfda      	itte	le
   bc4ec:	fb02 3301 	mlale	r3, r2, r1, r3
   bc4f0:	9307      	strle	r3, [sp, #28]
   bc4f2:	fb02 3909 	mlagt	r9, r2, r9, r3
   bc4f6:	3701      	adds	r7, #1
   bc4f8:	9017      	str	r0, [sp, #92]	; 0x5c
   bc4fa:	e7bf      	b.n	bc47c <_strtod_l+0x154>
   bc4fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc4fe:	195a      	adds	r2, r3, r5
   bc500:	9217      	str	r2, [sp, #92]	; 0x5c
   bc502:	5d5a      	ldrb	r2, [r3, r5]
   bc504:	2f00      	cmp	r7, #0
   bc506:	d037      	beq.n	bc578 <_strtod_l+0x250>
   bc508:	9005      	str	r0, [sp, #20]
   bc50a:	463d      	mov	r5, r7
   bc50c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bc510:	2b09      	cmp	r3, #9
   bc512:	d912      	bls.n	bc53a <_strtod_l+0x212>
   bc514:	2301      	movs	r3, #1
   bc516:	e7c2      	b.n	bc49e <_strtod_l+0x176>
   bc518:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc51a:	1c5a      	adds	r2, r3, #1
   bc51c:	9217      	str	r2, [sp, #92]	; 0x5c
   bc51e:	785a      	ldrb	r2, [r3, #1]
   bc520:	3001      	adds	r0, #1
   bc522:	2a30      	cmp	r2, #48	; 0x30
   bc524:	d0f8      	beq.n	bc518 <_strtod_l+0x1f0>
   bc526:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bc52a:	2b08      	cmp	r3, #8
   bc52c:	f200 84d9 	bhi.w	bcee2 <_strtod_l+0xbba>
   bc530:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc532:	9005      	str	r0, [sp, #20]
   bc534:	2000      	movs	r0, #0
   bc536:	9308      	str	r3, [sp, #32]
   bc538:	4605      	mov	r5, r0
   bc53a:	3a30      	subs	r2, #48	; 0x30
   bc53c:	f100 0301 	add.w	r3, r0, #1
   bc540:	d014      	beq.n	bc56c <_strtod_l+0x244>
   bc542:	9905      	ldr	r1, [sp, #20]
   bc544:	4419      	add	r1, r3
   bc546:	9105      	str	r1, [sp, #20]
   bc548:	462b      	mov	r3, r5
   bc54a:	eb00 0e05 	add.w	lr, r0, r5
   bc54e:	210a      	movs	r1, #10
   bc550:	4573      	cmp	r3, lr
   bc552:	d113      	bne.n	bc57c <_strtod_l+0x254>
   bc554:	182b      	adds	r3, r5, r0
   bc556:	2b08      	cmp	r3, #8
   bc558:	f105 0501 	add.w	r5, r5, #1
   bc55c:	4405      	add	r5, r0
   bc55e:	dc1c      	bgt.n	bc59a <_strtod_l+0x272>
   bc560:	9907      	ldr	r1, [sp, #28]
   bc562:	230a      	movs	r3, #10
   bc564:	fb03 2301 	mla	r3, r3, r1, r2
   bc568:	9307      	str	r3, [sp, #28]
   bc56a:	2300      	movs	r3, #0
   bc56c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc56e:	1c51      	adds	r1, r2, #1
   bc570:	9117      	str	r1, [sp, #92]	; 0x5c
   bc572:	7852      	ldrb	r2, [r2, #1]
   bc574:	4618      	mov	r0, r3
   bc576:	e7c9      	b.n	bc50c <_strtod_l+0x1e4>
   bc578:	4638      	mov	r0, r7
   bc57a:	e7d2      	b.n	bc522 <_strtod_l+0x1fa>
   bc57c:	2b08      	cmp	r3, #8
   bc57e:	dc04      	bgt.n	bc58a <_strtod_l+0x262>
   bc580:	9e07      	ldr	r6, [sp, #28]
   bc582:	434e      	muls	r6, r1
   bc584:	9607      	str	r6, [sp, #28]
   bc586:	3301      	adds	r3, #1
   bc588:	e7e2      	b.n	bc550 <_strtod_l+0x228>
   bc58a:	f103 0c01 	add.w	ip, r3, #1
   bc58e:	f1bc 0f10 	cmp.w	ip, #16
   bc592:	bfd8      	it	le
   bc594:	fb01 f909 	mulle.w	r9, r1, r9
   bc598:	e7f5      	b.n	bc586 <_strtod_l+0x25e>
   bc59a:	2d10      	cmp	r5, #16
   bc59c:	bfdc      	itt	le
   bc59e:	230a      	movle	r3, #10
   bc5a0:	fb03 2909 	mlale	r9, r3, r9, r2
   bc5a4:	e7e1      	b.n	bc56a <_strtod_l+0x242>
   bc5a6:	2300      	movs	r3, #0
   bc5a8:	9305      	str	r3, [sp, #20]
   bc5aa:	2301      	movs	r3, #1
   bc5ac:	e77c      	b.n	bc4a8 <_strtod_l+0x180>
   bc5ae:	f04f 0c00 	mov.w	ip, #0
   bc5b2:	f108 0202 	add.w	r2, r8, #2
   bc5b6:	9217      	str	r2, [sp, #92]	; 0x5c
   bc5b8:	f898 2002 	ldrb.w	r2, [r8, #2]
   bc5bc:	e785      	b.n	bc4ca <_strtod_l+0x1a2>
   bc5be:	f04f 0c01 	mov.w	ip, #1
   bc5c2:	e7f6      	b.n	bc5b2 <_strtod_l+0x28a>
   bc5c4:	000bef1c 	.word	0x000bef1c
   bc5c8:	000bed58 	.word	0x000bed58
   bc5cc:	7ff00000 	.word	0x7ff00000
   bc5d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc5d2:	1c51      	adds	r1, r2, #1
   bc5d4:	9117      	str	r1, [sp, #92]	; 0x5c
   bc5d6:	7852      	ldrb	r2, [r2, #1]
   bc5d8:	2a30      	cmp	r2, #48	; 0x30
   bc5da:	d0f9      	beq.n	bc5d0 <_strtod_l+0x2a8>
   bc5dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bc5e0:	2908      	cmp	r1, #8
   bc5e2:	f63f af79 	bhi.w	bc4d8 <_strtod_l+0x1b0>
   bc5e6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bc5ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc5ec:	9206      	str	r2, [sp, #24]
   bc5ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc5f0:	1c51      	adds	r1, r2, #1
   bc5f2:	9117      	str	r1, [sp, #92]	; 0x5c
   bc5f4:	7852      	ldrb	r2, [r2, #1]
   bc5f6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bc5fa:	2e09      	cmp	r6, #9
   bc5fc:	d937      	bls.n	bc66e <_strtod_l+0x346>
   bc5fe:	9e06      	ldr	r6, [sp, #24]
   bc600:	1b89      	subs	r1, r1, r6
   bc602:	2908      	cmp	r1, #8
   bc604:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bc608:	dc02      	bgt.n	bc610 <_strtod_l+0x2e8>
   bc60a:	4576      	cmp	r6, lr
   bc60c:	bfa8      	it	ge
   bc60e:	4676      	movge	r6, lr
   bc610:	f1bc 0f00 	cmp.w	ip, #0
   bc614:	d000      	beq.n	bc618 <_strtod_l+0x2f0>
   bc616:	4276      	negs	r6, r6
   bc618:	2d00      	cmp	r5, #0
   bc61a:	d14d      	bne.n	bc6b8 <_strtod_l+0x390>
   bc61c:	9904      	ldr	r1, [sp, #16]
   bc61e:	4301      	orrs	r1, r0
   bc620:	f47f aec6 	bne.w	bc3b0 <_strtod_l+0x88>
   bc624:	2b00      	cmp	r3, #0
   bc626:	f47f aee1 	bne.w	bc3ec <_strtod_l+0xc4>
   bc62a:	2a69      	cmp	r2, #105	; 0x69
   bc62c:	d027      	beq.n	bc67e <_strtod_l+0x356>
   bc62e:	dc24      	bgt.n	bc67a <_strtod_l+0x352>
   bc630:	2a49      	cmp	r2, #73	; 0x49
   bc632:	d024      	beq.n	bc67e <_strtod_l+0x356>
   bc634:	2a4e      	cmp	r2, #78	; 0x4e
   bc636:	f47f aed9 	bne.w	bc3ec <_strtod_l+0xc4>
   bc63a:	499f      	ldr	r1, [pc, #636]	; (bc8b8 <_strtod_l+0x590>)
   bc63c:	a817      	add	r0, sp, #92	; 0x5c
   bc63e:	f001 f883 	bl	bd748 <__match>
   bc642:	2800      	cmp	r0, #0
   bc644:	f43f aed2 	beq.w	bc3ec <_strtod_l+0xc4>
   bc648:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc64a:	781b      	ldrb	r3, [r3, #0]
   bc64c:	2b28      	cmp	r3, #40	; 0x28
   bc64e:	d12d      	bne.n	bc6ac <_strtod_l+0x384>
   bc650:	499a      	ldr	r1, [pc, #616]	; (bc8bc <_strtod_l+0x594>)
   bc652:	aa1a      	add	r2, sp, #104	; 0x68
   bc654:	a817      	add	r0, sp, #92	; 0x5c
   bc656:	f001 f88b 	bl	bd770 <__hexnan>
   bc65a:	2805      	cmp	r0, #5
   bc65c:	d126      	bne.n	bc6ac <_strtod_l+0x384>
   bc65e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bc660:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bc664:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bc668:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bc66c:	e6a0      	b.n	bc3b0 <_strtod_l+0x88>
   bc66e:	210a      	movs	r1, #10
   bc670:	fb01 2e0e 	mla	lr, r1, lr, r2
   bc674:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bc678:	e7b9      	b.n	bc5ee <_strtod_l+0x2c6>
   bc67a:	2a6e      	cmp	r2, #110	; 0x6e
   bc67c:	e7db      	b.n	bc636 <_strtod_l+0x30e>
   bc67e:	4990      	ldr	r1, [pc, #576]	; (bc8c0 <_strtod_l+0x598>)
   bc680:	a817      	add	r0, sp, #92	; 0x5c
   bc682:	f001 f861 	bl	bd748 <__match>
   bc686:	2800      	cmp	r0, #0
   bc688:	f43f aeb0 	beq.w	bc3ec <_strtod_l+0xc4>
   bc68c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc68e:	498d      	ldr	r1, [pc, #564]	; (bc8c4 <_strtod_l+0x59c>)
   bc690:	3b01      	subs	r3, #1
   bc692:	a817      	add	r0, sp, #92	; 0x5c
   bc694:	9317      	str	r3, [sp, #92]	; 0x5c
   bc696:	f001 f857 	bl	bd748 <__match>
   bc69a:	b910      	cbnz	r0, bc6a2 <_strtod_l+0x37a>
   bc69c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc69e:	3301      	adds	r3, #1
   bc6a0:	9317      	str	r3, [sp, #92]	; 0x5c
   bc6a2:	f8df b230 	ldr.w	fp, [pc, #560]	; bc8d4 <_strtod_l+0x5ac>
   bc6a6:	f04f 0a00 	mov.w	sl, #0
   bc6aa:	e681      	b.n	bc3b0 <_strtod_l+0x88>
   bc6ac:	4886      	ldr	r0, [pc, #536]	; (bc8c8 <_strtod_l+0x5a0>)
   bc6ae:	f001 fde3 	bl	be278 <nan>
   bc6b2:	ec5b ab10 	vmov	sl, fp, d0
   bc6b6:	e67b      	b.n	bc3b0 <_strtod_l+0x88>
   bc6b8:	9b05      	ldr	r3, [sp, #20]
   bc6ba:	9807      	ldr	r0, [sp, #28]
   bc6bc:	1af3      	subs	r3, r6, r3
   bc6be:	2f00      	cmp	r7, #0
   bc6c0:	bf08      	it	eq
   bc6c2:	462f      	moveq	r7, r5
   bc6c4:	2d10      	cmp	r5, #16
   bc6c6:	9306      	str	r3, [sp, #24]
   bc6c8:	46a8      	mov	r8, r5
   bc6ca:	bfa8      	it	ge
   bc6cc:	f04f 0810 	movge.w	r8, #16
   bc6d0:	f7ff f98c 	bl	bb9ec <__aeabi_ui2d>
   bc6d4:	2d09      	cmp	r5, #9
   bc6d6:	4682      	mov	sl, r0
   bc6d8:	468b      	mov	fp, r1
   bc6da:	dd13      	ble.n	bc704 <_strtod_l+0x3dc>
   bc6dc:	4b7b      	ldr	r3, [pc, #492]	; (bc8cc <_strtod_l+0x5a4>)
   bc6de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bc6e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bc6e6:	f7ff f9fb 	bl	bbae0 <__aeabi_dmul>
   bc6ea:	4682      	mov	sl, r0
   bc6ec:	4648      	mov	r0, r9
   bc6ee:	468b      	mov	fp, r1
   bc6f0:	f7ff f97c 	bl	bb9ec <__aeabi_ui2d>
   bc6f4:	4602      	mov	r2, r0
   bc6f6:	460b      	mov	r3, r1
   bc6f8:	4650      	mov	r0, sl
   bc6fa:	4659      	mov	r1, fp
   bc6fc:	f7ff f83a 	bl	bb774 <__adddf3>
   bc700:	4682      	mov	sl, r0
   bc702:	468b      	mov	fp, r1
   bc704:	2d0f      	cmp	r5, #15
   bc706:	dc38      	bgt.n	bc77a <_strtod_l+0x452>
   bc708:	9b06      	ldr	r3, [sp, #24]
   bc70a:	2b00      	cmp	r3, #0
   bc70c:	f43f ae50 	beq.w	bc3b0 <_strtod_l+0x88>
   bc710:	dd24      	ble.n	bc75c <_strtod_l+0x434>
   bc712:	2b16      	cmp	r3, #22
   bc714:	dc0b      	bgt.n	bc72e <_strtod_l+0x406>
   bc716:	496d      	ldr	r1, [pc, #436]	; (bc8cc <_strtod_l+0x5a4>)
   bc718:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc71c:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc720:	4652      	mov	r2, sl
   bc722:	465b      	mov	r3, fp
   bc724:	f7ff f9dc 	bl	bbae0 <__aeabi_dmul>
   bc728:	4682      	mov	sl, r0
   bc72a:	468b      	mov	fp, r1
   bc72c:	e640      	b.n	bc3b0 <_strtod_l+0x88>
   bc72e:	9a06      	ldr	r2, [sp, #24]
   bc730:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bc734:	4293      	cmp	r3, r2
   bc736:	db20      	blt.n	bc77a <_strtod_l+0x452>
   bc738:	4c64      	ldr	r4, [pc, #400]	; (bc8cc <_strtod_l+0x5a4>)
   bc73a:	f1c5 050f 	rsb	r5, r5, #15
   bc73e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bc742:	4652      	mov	r2, sl
   bc744:	465b      	mov	r3, fp
   bc746:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc74a:	f7ff f9c9 	bl	bbae0 <__aeabi_dmul>
   bc74e:	9b06      	ldr	r3, [sp, #24]
   bc750:	1b5d      	subs	r5, r3, r5
   bc752:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bc756:	e9d4 2300 	ldrd	r2, r3, [r4]
   bc75a:	e7e3      	b.n	bc724 <_strtod_l+0x3fc>
   bc75c:	9b06      	ldr	r3, [sp, #24]
   bc75e:	3316      	adds	r3, #22
   bc760:	db0b      	blt.n	bc77a <_strtod_l+0x452>
   bc762:	9b05      	ldr	r3, [sp, #20]
   bc764:	1b9e      	subs	r6, r3, r6
   bc766:	4b59      	ldr	r3, [pc, #356]	; (bc8cc <_strtod_l+0x5a4>)
   bc768:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bc76c:	e9d6 2300 	ldrd	r2, r3, [r6]
   bc770:	4650      	mov	r0, sl
   bc772:	4659      	mov	r1, fp
   bc774:	f7ff fade 	bl	bbd34 <__aeabi_ddiv>
   bc778:	e7d6      	b.n	bc728 <_strtod_l+0x400>
   bc77a:	9b06      	ldr	r3, [sp, #24]
   bc77c:	eba5 0808 	sub.w	r8, r5, r8
   bc780:	4498      	add	r8, r3
   bc782:	f1b8 0f00 	cmp.w	r8, #0
   bc786:	dd74      	ble.n	bc872 <_strtod_l+0x54a>
   bc788:	f018 030f 	ands.w	r3, r8, #15
   bc78c:	d00a      	beq.n	bc7a4 <_strtod_l+0x47c>
   bc78e:	494f      	ldr	r1, [pc, #316]	; (bc8cc <_strtod_l+0x5a4>)
   bc790:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc794:	4652      	mov	r2, sl
   bc796:	465b      	mov	r3, fp
   bc798:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc79c:	f7ff f9a0 	bl	bbae0 <__aeabi_dmul>
   bc7a0:	4682      	mov	sl, r0
   bc7a2:	468b      	mov	fp, r1
   bc7a4:	f038 080f 	bics.w	r8, r8, #15
   bc7a8:	d04f      	beq.n	bc84a <_strtod_l+0x522>
   bc7aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bc7ae:	dd22      	ble.n	bc7f6 <_strtod_l+0x4ce>
   bc7b0:	2500      	movs	r5, #0
   bc7b2:	462e      	mov	r6, r5
   bc7b4:	9507      	str	r5, [sp, #28]
   bc7b6:	9505      	str	r5, [sp, #20]
   bc7b8:	2322      	movs	r3, #34	; 0x22
   bc7ba:	f8df b118 	ldr.w	fp, [pc, #280]	; bc8d4 <_strtod_l+0x5ac>
   bc7be:	6023      	str	r3, [r4, #0]
   bc7c0:	f04f 0a00 	mov.w	sl, #0
   bc7c4:	9b07      	ldr	r3, [sp, #28]
   bc7c6:	2b00      	cmp	r3, #0
   bc7c8:	f43f adf2 	beq.w	bc3b0 <_strtod_l+0x88>
   bc7cc:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc7ce:	4620      	mov	r0, r4
   bc7d0:	f001 f8c0 	bl	bd954 <_Bfree>
   bc7d4:	9905      	ldr	r1, [sp, #20]
   bc7d6:	4620      	mov	r0, r4
   bc7d8:	f001 f8bc 	bl	bd954 <_Bfree>
   bc7dc:	4631      	mov	r1, r6
   bc7de:	4620      	mov	r0, r4
   bc7e0:	f001 f8b8 	bl	bd954 <_Bfree>
   bc7e4:	9907      	ldr	r1, [sp, #28]
   bc7e6:	4620      	mov	r0, r4
   bc7e8:	f001 f8b4 	bl	bd954 <_Bfree>
   bc7ec:	4629      	mov	r1, r5
   bc7ee:	4620      	mov	r0, r4
   bc7f0:	f001 f8b0 	bl	bd954 <_Bfree>
   bc7f4:	e5dc      	b.n	bc3b0 <_strtod_l+0x88>
   bc7f6:	4b36      	ldr	r3, [pc, #216]	; (bc8d0 <_strtod_l+0x5a8>)
   bc7f8:	9304      	str	r3, [sp, #16]
   bc7fa:	2300      	movs	r3, #0
   bc7fc:	ea4f 1828 	mov.w	r8, r8, asr #4
   bc800:	4650      	mov	r0, sl
   bc802:	4659      	mov	r1, fp
   bc804:	4699      	mov	r9, r3
   bc806:	f1b8 0f01 	cmp.w	r8, #1
   bc80a:	dc21      	bgt.n	bc850 <_strtod_l+0x528>
   bc80c:	b10b      	cbz	r3, bc812 <_strtod_l+0x4ea>
   bc80e:	4682      	mov	sl, r0
   bc810:	468b      	mov	fp, r1
   bc812:	4b2f      	ldr	r3, [pc, #188]	; (bc8d0 <_strtod_l+0x5a8>)
   bc814:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bc818:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bc81c:	4652      	mov	r2, sl
   bc81e:	465b      	mov	r3, fp
   bc820:	e9d9 0100 	ldrd	r0, r1, [r9]
   bc824:	f7ff f95c 	bl	bbae0 <__aeabi_dmul>
   bc828:	4b2a      	ldr	r3, [pc, #168]	; (bc8d4 <_strtod_l+0x5ac>)
   bc82a:	460a      	mov	r2, r1
   bc82c:	400b      	ands	r3, r1
   bc82e:	492a      	ldr	r1, [pc, #168]	; (bc8d8 <_strtod_l+0x5b0>)
   bc830:	428b      	cmp	r3, r1
   bc832:	4682      	mov	sl, r0
   bc834:	d8bc      	bhi.n	bc7b0 <_strtod_l+0x488>
   bc836:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bc83a:	428b      	cmp	r3, r1
   bc83c:	bf86      	itte	hi
   bc83e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bc8dc <_strtod_l+0x5b4>
   bc842:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bc846:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bc84a:	2300      	movs	r3, #0
   bc84c:	9304      	str	r3, [sp, #16]
   bc84e:	e084      	b.n	bc95a <_strtod_l+0x632>
   bc850:	f018 0f01 	tst.w	r8, #1
   bc854:	d005      	beq.n	bc862 <_strtod_l+0x53a>
   bc856:	9b04      	ldr	r3, [sp, #16]
   bc858:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc85c:	f7ff f940 	bl	bbae0 <__aeabi_dmul>
   bc860:	2301      	movs	r3, #1
   bc862:	9a04      	ldr	r2, [sp, #16]
   bc864:	3208      	adds	r2, #8
   bc866:	f109 0901 	add.w	r9, r9, #1
   bc86a:	ea4f 0868 	mov.w	r8, r8, asr #1
   bc86e:	9204      	str	r2, [sp, #16]
   bc870:	e7c9      	b.n	bc806 <_strtod_l+0x4de>
   bc872:	d0ea      	beq.n	bc84a <_strtod_l+0x522>
   bc874:	f1c8 0800 	rsb	r8, r8, #0
   bc878:	f018 020f 	ands.w	r2, r8, #15
   bc87c:	d00a      	beq.n	bc894 <_strtod_l+0x56c>
   bc87e:	4b13      	ldr	r3, [pc, #76]	; (bc8cc <_strtod_l+0x5a4>)
   bc880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bc884:	4650      	mov	r0, sl
   bc886:	4659      	mov	r1, fp
   bc888:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc88c:	f7ff fa52 	bl	bbd34 <__aeabi_ddiv>
   bc890:	4682      	mov	sl, r0
   bc892:	468b      	mov	fp, r1
   bc894:	ea5f 1828 	movs.w	r8, r8, asr #4
   bc898:	d0d7      	beq.n	bc84a <_strtod_l+0x522>
   bc89a:	f1b8 0f1f 	cmp.w	r8, #31
   bc89e:	dd1f      	ble.n	bc8e0 <_strtod_l+0x5b8>
   bc8a0:	2500      	movs	r5, #0
   bc8a2:	462e      	mov	r6, r5
   bc8a4:	9507      	str	r5, [sp, #28]
   bc8a6:	9505      	str	r5, [sp, #20]
   bc8a8:	2322      	movs	r3, #34	; 0x22
   bc8aa:	f04f 0a00 	mov.w	sl, #0
   bc8ae:	f04f 0b00 	mov.w	fp, #0
   bc8b2:	6023      	str	r3, [r4, #0]
   bc8b4:	e786      	b.n	bc7c4 <_strtod_l+0x49c>
   bc8b6:	bf00      	nop
   bc8b8:	000bed52 	.word	0x000bed52
   bc8bc:	000bed6c 	.word	0x000bed6c
   bc8c0:	000bed49 	.word	0x000bed49
   bc8c4:	000bed4c 	.word	0x000bed4c
   bc8c8:	000be7c6 	.word	0x000be7c6
   bc8cc:	000befb0 	.word	0x000befb0
   bc8d0:	000bef88 	.word	0x000bef88
   bc8d4:	7ff00000 	.word	0x7ff00000
   bc8d8:	7ca00000 	.word	0x7ca00000
   bc8dc:	7fefffff 	.word	0x7fefffff
   bc8e0:	f018 0310 	ands.w	r3, r8, #16
   bc8e4:	bf18      	it	ne
   bc8e6:	236a      	movne	r3, #106	; 0x6a
   bc8e8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bcc98 <_strtod_l+0x970>
   bc8ec:	9304      	str	r3, [sp, #16]
   bc8ee:	4650      	mov	r0, sl
   bc8f0:	4659      	mov	r1, fp
   bc8f2:	2300      	movs	r3, #0
   bc8f4:	f018 0f01 	tst.w	r8, #1
   bc8f8:	d004      	beq.n	bc904 <_strtod_l+0x5dc>
   bc8fa:	e9d9 2300 	ldrd	r2, r3, [r9]
   bc8fe:	f7ff f8ef 	bl	bbae0 <__aeabi_dmul>
   bc902:	2301      	movs	r3, #1
   bc904:	ea5f 0868 	movs.w	r8, r8, asr #1
   bc908:	f109 0908 	add.w	r9, r9, #8
   bc90c:	d1f2      	bne.n	bc8f4 <_strtod_l+0x5cc>
   bc90e:	b10b      	cbz	r3, bc914 <_strtod_l+0x5ec>
   bc910:	4682      	mov	sl, r0
   bc912:	468b      	mov	fp, r1
   bc914:	9b04      	ldr	r3, [sp, #16]
   bc916:	b1c3      	cbz	r3, bc94a <_strtod_l+0x622>
   bc918:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bc91c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bc920:	2b00      	cmp	r3, #0
   bc922:	4659      	mov	r1, fp
   bc924:	dd11      	ble.n	bc94a <_strtod_l+0x622>
   bc926:	2b1f      	cmp	r3, #31
   bc928:	f340 8124 	ble.w	bcb74 <_strtod_l+0x84c>
   bc92c:	2b34      	cmp	r3, #52	; 0x34
   bc92e:	bfde      	ittt	le
   bc930:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bc934:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bc938:	fa03 f202 	lslle.w	r2, r3, r2
   bc93c:	f04f 0a00 	mov.w	sl, #0
   bc940:	bfcc      	ite	gt
   bc942:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bc946:	ea02 0b01 	andle.w	fp, r2, r1
   bc94a:	2200      	movs	r2, #0
   bc94c:	2300      	movs	r3, #0
   bc94e:	4650      	mov	r0, sl
   bc950:	4659      	mov	r1, fp
   bc952:	f7ff fb2d 	bl	bbfb0 <__aeabi_dcmpeq>
   bc956:	2800      	cmp	r0, #0
   bc958:	d1a2      	bne.n	bc8a0 <_strtod_l+0x578>
   bc95a:	9b07      	ldr	r3, [sp, #28]
   bc95c:	9300      	str	r3, [sp, #0]
   bc95e:	9908      	ldr	r1, [sp, #32]
   bc960:	462b      	mov	r3, r5
   bc962:	463a      	mov	r2, r7
   bc964:	4620      	mov	r0, r4
   bc966:	f001 f85d 	bl	bda24 <__s2b>
   bc96a:	9007      	str	r0, [sp, #28]
   bc96c:	2800      	cmp	r0, #0
   bc96e:	f43f af1f 	beq.w	bc7b0 <_strtod_l+0x488>
   bc972:	9b05      	ldr	r3, [sp, #20]
   bc974:	1b9e      	subs	r6, r3, r6
   bc976:	9b06      	ldr	r3, [sp, #24]
   bc978:	2b00      	cmp	r3, #0
   bc97a:	bfb4      	ite	lt
   bc97c:	4633      	movlt	r3, r6
   bc97e:	2300      	movge	r3, #0
   bc980:	930c      	str	r3, [sp, #48]	; 0x30
   bc982:	9b06      	ldr	r3, [sp, #24]
   bc984:	2500      	movs	r5, #0
   bc986:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bc98a:	9312      	str	r3, [sp, #72]	; 0x48
   bc98c:	462e      	mov	r6, r5
   bc98e:	9b07      	ldr	r3, [sp, #28]
   bc990:	4620      	mov	r0, r4
   bc992:	6859      	ldr	r1, [r3, #4]
   bc994:	f000 ff9e 	bl	bd8d4 <_Balloc>
   bc998:	9005      	str	r0, [sp, #20]
   bc99a:	2800      	cmp	r0, #0
   bc99c:	f43f af0c 	beq.w	bc7b8 <_strtod_l+0x490>
   bc9a0:	9b07      	ldr	r3, [sp, #28]
   bc9a2:	691a      	ldr	r2, [r3, #16]
   bc9a4:	3202      	adds	r2, #2
   bc9a6:	f103 010c 	add.w	r1, r3, #12
   bc9aa:	0092      	lsls	r2, r2, #2
   bc9ac:	300c      	adds	r0, #12
   bc9ae:	f7ff fbef 	bl	bc190 <memcpy>
   bc9b2:	ec4b ab10 	vmov	d0, sl, fp
   bc9b6:	aa1a      	add	r2, sp, #104	; 0x68
   bc9b8:	a919      	add	r1, sp, #100	; 0x64
   bc9ba:	4620      	mov	r0, r4
   bc9bc:	f001 fb78 	bl	be0b0 <__d2b>
   bc9c0:	ec4b ab18 	vmov	d8, sl, fp
   bc9c4:	9018      	str	r0, [sp, #96]	; 0x60
   bc9c6:	2800      	cmp	r0, #0
   bc9c8:	f43f aef6 	beq.w	bc7b8 <_strtod_l+0x490>
   bc9cc:	2101      	movs	r1, #1
   bc9ce:	4620      	mov	r0, r4
   bc9d0:	f001 f8c2 	bl	bdb58 <__i2b>
   bc9d4:	4606      	mov	r6, r0
   bc9d6:	2800      	cmp	r0, #0
   bc9d8:	f43f aeee 	beq.w	bc7b8 <_strtod_l+0x490>
   bc9dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bc9de:	9904      	ldr	r1, [sp, #16]
   bc9e0:	2b00      	cmp	r3, #0
   bc9e2:	bfab      	itete	ge
   bc9e4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bc9e6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bc9e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bc9ea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bc9ee:	bfac      	ite	ge
   bc9f0:	eb03 0902 	addge.w	r9, r3, r2
   bc9f4:	1ad7      	sublt	r7, r2, r3
   bc9f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bc9f8:	eba3 0801 	sub.w	r8, r3, r1
   bc9fc:	4490      	add	r8, r2
   bc9fe:	4ba1      	ldr	r3, [pc, #644]	; (bcc84 <_strtod_l+0x95c>)
   bca00:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bca04:	4598      	cmp	r8, r3
   bca06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bca0a:	f280 80c7 	bge.w	bcb9c <_strtod_l+0x874>
   bca0e:	eba3 0308 	sub.w	r3, r3, r8
   bca12:	2b1f      	cmp	r3, #31
   bca14:	eba2 0203 	sub.w	r2, r2, r3
   bca18:	f04f 0101 	mov.w	r1, #1
   bca1c:	f300 80b1 	bgt.w	bcb82 <_strtod_l+0x85a>
   bca20:	fa01 f303 	lsl.w	r3, r1, r3
   bca24:	930d      	str	r3, [sp, #52]	; 0x34
   bca26:	2300      	movs	r3, #0
   bca28:	9308      	str	r3, [sp, #32]
   bca2a:	eb09 0802 	add.w	r8, r9, r2
   bca2e:	9b04      	ldr	r3, [sp, #16]
   bca30:	45c1      	cmp	r9, r8
   bca32:	4417      	add	r7, r2
   bca34:	441f      	add	r7, r3
   bca36:	464b      	mov	r3, r9
   bca38:	bfa8      	it	ge
   bca3a:	4643      	movge	r3, r8
   bca3c:	42bb      	cmp	r3, r7
   bca3e:	bfa8      	it	ge
   bca40:	463b      	movge	r3, r7
   bca42:	2b00      	cmp	r3, #0
   bca44:	bfc2      	ittt	gt
   bca46:	eba8 0803 	subgt.w	r8, r8, r3
   bca4a:	1aff      	subgt	r7, r7, r3
   bca4c:	eba9 0903 	subgt.w	r9, r9, r3
   bca50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bca52:	2b00      	cmp	r3, #0
   bca54:	dd17      	ble.n	bca86 <_strtod_l+0x75e>
   bca56:	4631      	mov	r1, r6
   bca58:	461a      	mov	r2, r3
   bca5a:	4620      	mov	r0, r4
   bca5c:	f001 f93c 	bl	bdcd8 <__pow5mult>
   bca60:	4606      	mov	r6, r0
   bca62:	2800      	cmp	r0, #0
   bca64:	f43f aea8 	beq.w	bc7b8 <_strtod_l+0x490>
   bca68:	4601      	mov	r1, r0
   bca6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bca6c:	4620      	mov	r0, r4
   bca6e:	f001 f889 	bl	bdb84 <__multiply>
   bca72:	900b      	str	r0, [sp, #44]	; 0x2c
   bca74:	2800      	cmp	r0, #0
   bca76:	f43f ae9f 	beq.w	bc7b8 <_strtod_l+0x490>
   bca7a:	9918      	ldr	r1, [sp, #96]	; 0x60
   bca7c:	4620      	mov	r0, r4
   bca7e:	f000 ff69 	bl	bd954 <_Bfree>
   bca82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bca84:	9318      	str	r3, [sp, #96]	; 0x60
   bca86:	f1b8 0f00 	cmp.w	r8, #0
   bca8a:	f300 808c 	bgt.w	bcba6 <_strtod_l+0x87e>
   bca8e:	9b06      	ldr	r3, [sp, #24]
   bca90:	2b00      	cmp	r3, #0
   bca92:	dd08      	ble.n	bcaa6 <_strtod_l+0x77e>
   bca94:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bca96:	9905      	ldr	r1, [sp, #20]
   bca98:	4620      	mov	r0, r4
   bca9a:	f001 f91d 	bl	bdcd8 <__pow5mult>
   bca9e:	9005      	str	r0, [sp, #20]
   bcaa0:	2800      	cmp	r0, #0
   bcaa2:	f43f ae89 	beq.w	bc7b8 <_strtod_l+0x490>
   bcaa6:	2f00      	cmp	r7, #0
   bcaa8:	dd08      	ble.n	bcabc <_strtod_l+0x794>
   bcaaa:	9905      	ldr	r1, [sp, #20]
   bcaac:	463a      	mov	r2, r7
   bcaae:	4620      	mov	r0, r4
   bcab0:	f001 f96c 	bl	bdd8c <__lshift>
   bcab4:	9005      	str	r0, [sp, #20]
   bcab6:	2800      	cmp	r0, #0
   bcab8:	f43f ae7e 	beq.w	bc7b8 <_strtod_l+0x490>
   bcabc:	f1b9 0f00 	cmp.w	r9, #0
   bcac0:	dd08      	ble.n	bcad4 <_strtod_l+0x7ac>
   bcac2:	4631      	mov	r1, r6
   bcac4:	464a      	mov	r2, r9
   bcac6:	4620      	mov	r0, r4
   bcac8:	f001 f960 	bl	bdd8c <__lshift>
   bcacc:	4606      	mov	r6, r0
   bcace:	2800      	cmp	r0, #0
   bcad0:	f43f ae72 	beq.w	bc7b8 <_strtod_l+0x490>
   bcad4:	9a05      	ldr	r2, [sp, #20]
   bcad6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bcad8:	4620      	mov	r0, r4
   bcada:	f001 f9e3 	bl	bdea4 <__mdiff>
   bcade:	4605      	mov	r5, r0
   bcae0:	2800      	cmp	r0, #0
   bcae2:	f43f ae69 	beq.w	bc7b8 <_strtod_l+0x490>
   bcae6:	68c3      	ldr	r3, [r0, #12]
   bcae8:	930b      	str	r3, [sp, #44]	; 0x2c
   bcaea:	2300      	movs	r3, #0
   bcaec:	60c3      	str	r3, [r0, #12]
   bcaee:	4631      	mov	r1, r6
   bcaf0:	f001 f9bc 	bl	bde6c <__mcmp>
   bcaf4:	2800      	cmp	r0, #0
   bcaf6:	da60      	bge.n	bcbba <_strtod_l+0x892>
   bcaf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcafa:	ea53 030a 	orrs.w	r3, r3, sl
   bcafe:	f040 8082 	bne.w	bcc06 <_strtod_l+0x8de>
   bcb02:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bcb06:	2b00      	cmp	r3, #0
   bcb08:	d17d      	bne.n	bcc06 <_strtod_l+0x8de>
   bcb0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bcb0e:	0d1b      	lsrs	r3, r3, #20
   bcb10:	051b      	lsls	r3, r3, #20
   bcb12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bcb16:	d976      	bls.n	bcc06 <_strtod_l+0x8de>
   bcb18:	696b      	ldr	r3, [r5, #20]
   bcb1a:	b913      	cbnz	r3, bcb22 <_strtod_l+0x7fa>
   bcb1c:	692b      	ldr	r3, [r5, #16]
   bcb1e:	2b01      	cmp	r3, #1
   bcb20:	dd71      	ble.n	bcc06 <_strtod_l+0x8de>
   bcb22:	4629      	mov	r1, r5
   bcb24:	2201      	movs	r2, #1
   bcb26:	4620      	mov	r0, r4
   bcb28:	f001 f930 	bl	bdd8c <__lshift>
   bcb2c:	4631      	mov	r1, r6
   bcb2e:	4605      	mov	r5, r0
   bcb30:	f001 f99c 	bl	bde6c <__mcmp>
   bcb34:	2800      	cmp	r0, #0
   bcb36:	dd66      	ble.n	bcc06 <_strtod_l+0x8de>
   bcb38:	9904      	ldr	r1, [sp, #16]
   bcb3a:	4a53      	ldr	r2, [pc, #332]	; (bcc88 <_strtod_l+0x960>)
   bcb3c:	465b      	mov	r3, fp
   bcb3e:	2900      	cmp	r1, #0
   bcb40:	f000 8081 	beq.w	bcc46 <_strtod_l+0x91e>
   bcb44:	ea02 010b 	and.w	r1, r2, fp
   bcb48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bcb4c:	dc7b      	bgt.n	bcc46 <_strtod_l+0x91e>
   bcb4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bcb52:	f77f aea9 	ble.w	bc8a8 <_strtod_l+0x580>
   bcb56:	4b4d      	ldr	r3, [pc, #308]	; (bcc8c <_strtod_l+0x964>)
   bcb58:	4650      	mov	r0, sl
   bcb5a:	4659      	mov	r1, fp
   bcb5c:	2200      	movs	r2, #0
   bcb5e:	f7fe ffbf 	bl	bbae0 <__aeabi_dmul>
   bcb62:	460b      	mov	r3, r1
   bcb64:	4303      	orrs	r3, r0
   bcb66:	bf08      	it	eq
   bcb68:	2322      	moveq	r3, #34	; 0x22
   bcb6a:	4682      	mov	sl, r0
   bcb6c:	468b      	mov	fp, r1
   bcb6e:	bf08      	it	eq
   bcb70:	6023      	streq	r3, [r4, #0]
   bcb72:	e62b      	b.n	bc7cc <_strtod_l+0x4a4>
   bcb74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bcb78:	fa02 f303 	lsl.w	r3, r2, r3
   bcb7c:	ea03 0a0a 	and.w	sl, r3, sl
   bcb80:	e6e3      	b.n	bc94a <_strtod_l+0x622>
   bcb82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bcb86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bcb8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bcb8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bcb92:	fa01 f308 	lsl.w	r3, r1, r8
   bcb96:	9308      	str	r3, [sp, #32]
   bcb98:	910d      	str	r1, [sp, #52]	; 0x34
   bcb9a:	e746      	b.n	bca2a <_strtod_l+0x702>
   bcb9c:	2300      	movs	r3, #0
   bcb9e:	9308      	str	r3, [sp, #32]
   bcba0:	2301      	movs	r3, #1
   bcba2:	930d      	str	r3, [sp, #52]	; 0x34
   bcba4:	e741      	b.n	bca2a <_strtod_l+0x702>
   bcba6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bcba8:	4642      	mov	r2, r8
   bcbaa:	4620      	mov	r0, r4
   bcbac:	f001 f8ee 	bl	bdd8c <__lshift>
   bcbb0:	9018      	str	r0, [sp, #96]	; 0x60
   bcbb2:	2800      	cmp	r0, #0
   bcbb4:	f47f af6b 	bne.w	bca8e <_strtod_l+0x766>
   bcbb8:	e5fe      	b.n	bc7b8 <_strtod_l+0x490>
   bcbba:	465f      	mov	r7, fp
   bcbbc:	d16e      	bne.n	bcc9c <_strtod_l+0x974>
   bcbbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bcbc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bcbc4:	b342      	cbz	r2, bcc18 <_strtod_l+0x8f0>
   bcbc6:	4a32      	ldr	r2, [pc, #200]	; (bcc90 <_strtod_l+0x968>)
   bcbc8:	4293      	cmp	r3, r2
   bcbca:	d128      	bne.n	bcc1e <_strtod_l+0x8f6>
   bcbcc:	9b04      	ldr	r3, [sp, #16]
   bcbce:	4651      	mov	r1, sl
   bcbd0:	b1eb      	cbz	r3, bcc0e <_strtod_l+0x8e6>
   bcbd2:	4b2d      	ldr	r3, [pc, #180]	; (bcc88 <_strtod_l+0x960>)
   bcbd4:	403b      	ands	r3, r7
   bcbd6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bcbda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bcbde:	d819      	bhi.n	bcc14 <_strtod_l+0x8ec>
   bcbe0:	0d1b      	lsrs	r3, r3, #20
   bcbe2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bcbe6:	fa02 f303 	lsl.w	r3, r2, r3
   bcbea:	4299      	cmp	r1, r3
   bcbec:	d117      	bne.n	bcc1e <_strtod_l+0x8f6>
   bcbee:	4b29      	ldr	r3, [pc, #164]	; (bcc94 <_strtod_l+0x96c>)
   bcbf0:	429f      	cmp	r7, r3
   bcbf2:	d102      	bne.n	bcbfa <_strtod_l+0x8d2>
   bcbf4:	3101      	adds	r1, #1
   bcbf6:	f43f addf 	beq.w	bc7b8 <_strtod_l+0x490>
   bcbfa:	4b23      	ldr	r3, [pc, #140]	; (bcc88 <_strtod_l+0x960>)
   bcbfc:	403b      	ands	r3, r7
   bcbfe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bcc02:	f04f 0a00 	mov.w	sl, #0
   bcc06:	9b04      	ldr	r3, [sp, #16]
   bcc08:	2b00      	cmp	r3, #0
   bcc0a:	d1a4      	bne.n	bcb56 <_strtod_l+0x82e>
   bcc0c:	e5de      	b.n	bc7cc <_strtod_l+0x4a4>
   bcc0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bcc12:	e7ea      	b.n	bcbea <_strtod_l+0x8c2>
   bcc14:	4613      	mov	r3, r2
   bcc16:	e7e8      	b.n	bcbea <_strtod_l+0x8c2>
   bcc18:	ea53 030a 	orrs.w	r3, r3, sl
   bcc1c:	d08c      	beq.n	bcb38 <_strtod_l+0x810>
   bcc1e:	9b08      	ldr	r3, [sp, #32]
   bcc20:	b1db      	cbz	r3, bcc5a <_strtod_l+0x932>
   bcc22:	423b      	tst	r3, r7
   bcc24:	d0ef      	beq.n	bcc06 <_strtod_l+0x8de>
   bcc26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcc28:	9a04      	ldr	r2, [sp, #16]
   bcc2a:	4650      	mov	r0, sl
   bcc2c:	4659      	mov	r1, fp
   bcc2e:	b1c3      	cbz	r3, bcc62 <_strtod_l+0x93a>
   bcc30:	f7ff fb5c 	bl	bc2ec <sulp>
   bcc34:	4602      	mov	r2, r0
   bcc36:	460b      	mov	r3, r1
   bcc38:	ec51 0b18 	vmov	r0, r1, d8
   bcc3c:	f7fe fd9a 	bl	bb774 <__adddf3>
   bcc40:	4682      	mov	sl, r0
   bcc42:	468b      	mov	fp, r1
   bcc44:	e7df      	b.n	bcc06 <_strtod_l+0x8de>
   bcc46:	4013      	ands	r3, r2
   bcc48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bcc4c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bcc50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bcc54:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bcc58:	e7d5      	b.n	bcc06 <_strtod_l+0x8de>
   bcc5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bcc5c:	ea13 0f0a 	tst.w	r3, sl
   bcc60:	e7e0      	b.n	bcc24 <_strtod_l+0x8fc>
   bcc62:	f7ff fb43 	bl	bc2ec <sulp>
   bcc66:	4602      	mov	r2, r0
   bcc68:	460b      	mov	r3, r1
   bcc6a:	ec51 0b18 	vmov	r0, r1, d8
   bcc6e:	f7fe fd7f 	bl	bb770 <__aeabi_dsub>
   bcc72:	2200      	movs	r2, #0
   bcc74:	2300      	movs	r3, #0
   bcc76:	4682      	mov	sl, r0
   bcc78:	468b      	mov	fp, r1
   bcc7a:	f7ff f999 	bl	bbfb0 <__aeabi_dcmpeq>
   bcc7e:	2800      	cmp	r0, #0
   bcc80:	d0c1      	beq.n	bcc06 <_strtod_l+0x8de>
   bcc82:	e611      	b.n	bc8a8 <_strtod_l+0x580>
   bcc84:	fffffc02 	.word	0xfffffc02
   bcc88:	7ff00000 	.word	0x7ff00000
   bcc8c:	39500000 	.word	0x39500000
   bcc90:	000fffff 	.word	0x000fffff
   bcc94:	7fefffff 	.word	0x7fefffff
   bcc98:	000bed80 	.word	0x000bed80
   bcc9c:	4631      	mov	r1, r6
   bcc9e:	4628      	mov	r0, r5
   bcca0:	f001 fa62 	bl	be168 <__ratio>
   bcca4:	ec59 8b10 	vmov	r8, r9, d0
   bcca8:	ee10 0a10 	vmov	r0, s0
   bccac:	2200      	movs	r2, #0
   bccae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bccb2:	4649      	mov	r1, r9
   bccb4:	f7ff f990 	bl	bbfd8 <__aeabi_dcmple>
   bccb8:	2800      	cmp	r0, #0
   bccba:	d07a      	beq.n	bcdb2 <_strtod_l+0xa8a>
   bccbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bccbe:	2b00      	cmp	r3, #0
   bccc0:	d04a      	beq.n	bcd58 <_strtod_l+0xa30>
   bccc2:	4b95      	ldr	r3, [pc, #596]	; (bcf18 <_strtod_l+0xbf0>)
   bccc4:	2200      	movs	r2, #0
   bccc6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bccca:	f8df 924c 	ldr.w	r9, [pc, #588]	; bcf18 <_strtod_l+0xbf0>
   bccce:	f04f 0800 	mov.w	r8, #0
   bccd2:	4b92      	ldr	r3, [pc, #584]	; (bcf1c <_strtod_l+0xbf4>)
   bccd4:	403b      	ands	r3, r7
   bccd6:	930d      	str	r3, [sp, #52]	; 0x34
   bccd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bccda:	4b91      	ldr	r3, [pc, #580]	; (bcf20 <_strtod_l+0xbf8>)
   bccdc:	429a      	cmp	r2, r3
   bccde:	f040 80b0 	bne.w	bce42 <_strtod_l+0xb1a>
   bcce2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bcce6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bccea:	ec4b ab10 	vmov	d0, sl, fp
   bccee:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bccf2:	f001 f961 	bl	bdfb8 <__ulp>
   bccf6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bccfa:	ec53 2b10 	vmov	r2, r3, d0
   bccfe:	f7fe feef 	bl	bbae0 <__aeabi_dmul>
   bcd02:	4652      	mov	r2, sl
   bcd04:	465b      	mov	r3, fp
   bcd06:	f7fe fd35 	bl	bb774 <__adddf3>
   bcd0a:	460b      	mov	r3, r1
   bcd0c:	4983      	ldr	r1, [pc, #524]	; (bcf1c <_strtod_l+0xbf4>)
   bcd0e:	4a85      	ldr	r2, [pc, #532]	; (bcf24 <_strtod_l+0xbfc>)
   bcd10:	4019      	ands	r1, r3
   bcd12:	4291      	cmp	r1, r2
   bcd14:	4682      	mov	sl, r0
   bcd16:	d960      	bls.n	bcdda <_strtod_l+0xab2>
   bcd18:	ee18 3a90 	vmov	r3, s17
   bcd1c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bcd20:	4293      	cmp	r3, r2
   bcd22:	d104      	bne.n	bcd2e <_strtod_l+0xa06>
   bcd24:	ee18 3a10 	vmov	r3, s16
   bcd28:	3301      	adds	r3, #1
   bcd2a:	f43f ad45 	beq.w	bc7b8 <_strtod_l+0x490>
   bcd2e:	f8df b200 	ldr.w	fp, [pc, #512]	; bcf30 <_strtod_l+0xc08>
   bcd32:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bcd36:	9918      	ldr	r1, [sp, #96]	; 0x60
   bcd38:	4620      	mov	r0, r4
   bcd3a:	f000 fe0b 	bl	bd954 <_Bfree>
   bcd3e:	9905      	ldr	r1, [sp, #20]
   bcd40:	4620      	mov	r0, r4
   bcd42:	f000 fe07 	bl	bd954 <_Bfree>
   bcd46:	4631      	mov	r1, r6
   bcd48:	4620      	mov	r0, r4
   bcd4a:	f000 fe03 	bl	bd954 <_Bfree>
   bcd4e:	4629      	mov	r1, r5
   bcd50:	4620      	mov	r0, r4
   bcd52:	f000 fdff 	bl	bd954 <_Bfree>
   bcd56:	e61a      	b.n	bc98e <_strtod_l+0x666>
   bcd58:	f1ba 0f00 	cmp.w	sl, #0
   bcd5c:	d11b      	bne.n	bcd96 <_strtod_l+0xa6e>
   bcd5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bcd62:	b9f3      	cbnz	r3, bcda2 <_strtod_l+0xa7a>
   bcd64:	4b6c      	ldr	r3, [pc, #432]	; (bcf18 <_strtod_l+0xbf0>)
   bcd66:	2200      	movs	r2, #0
   bcd68:	4640      	mov	r0, r8
   bcd6a:	4649      	mov	r1, r9
   bcd6c:	f7ff f92a 	bl	bbfc4 <__aeabi_dcmplt>
   bcd70:	b9d0      	cbnz	r0, bcda8 <_strtod_l+0xa80>
   bcd72:	4640      	mov	r0, r8
   bcd74:	4649      	mov	r1, r9
   bcd76:	4b6c      	ldr	r3, [pc, #432]	; (bcf28 <_strtod_l+0xc00>)
   bcd78:	2200      	movs	r2, #0
   bcd7a:	f7fe feb1 	bl	bbae0 <__aeabi_dmul>
   bcd7e:	4680      	mov	r8, r0
   bcd80:	4689      	mov	r9, r1
   bcd82:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bcd86:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bcd8a:	9315      	str	r3, [sp, #84]	; 0x54
   bcd8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bcd90:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bcd94:	e79d      	b.n	bccd2 <_strtod_l+0x9aa>
   bcd96:	f1ba 0f01 	cmp.w	sl, #1
   bcd9a:	d102      	bne.n	bcda2 <_strtod_l+0xa7a>
   bcd9c:	2f00      	cmp	r7, #0
   bcd9e:	f43f ad83 	beq.w	bc8a8 <_strtod_l+0x580>
   bcda2:	4b62      	ldr	r3, [pc, #392]	; (bcf2c <_strtod_l+0xc04>)
   bcda4:	2200      	movs	r2, #0
   bcda6:	e78e      	b.n	bccc6 <_strtod_l+0x99e>
   bcda8:	f8df 917c 	ldr.w	r9, [pc, #380]	; bcf28 <_strtod_l+0xc00>
   bcdac:	f04f 0800 	mov.w	r8, #0
   bcdb0:	e7e7      	b.n	bcd82 <_strtod_l+0xa5a>
   bcdb2:	4b5d      	ldr	r3, [pc, #372]	; (bcf28 <_strtod_l+0xc00>)
   bcdb4:	4640      	mov	r0, r8
   bcdb6:	4649      	mov	r1, r9
   bcdb8:	2200      	movs	r2, #0
   bcdba:	f7fe fe91 	bl	bbae0 <__aeabi_dmul>
   bcdbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcdc0:	4680      	mov	r8, r0
   bcdc2:	4689      	mov	r9, r1
   bcdc4:	b933      	cbnz	r3, bcdd4 <_strtod_l+0xaac>
   bcdc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bcdca:	900e      	str	r0, [sp, #56]	; 0x38
   bcdcc:	930f      	str	r3, [sp, #60]	; 0x3c
   bcdce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bcdd2:	e7dd      	b.n	bcd90 <_strtod_l+0xa68>
   bcdd4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bcdd8:	e7f9      	b.n	bcdce <_strtod_l+0xaa6>
   bcdda:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bcdde:	9b04      	ldr	r3, [sp, #16]
   bcde0:	2b00      	cmp	r3, #0
   bcde2:	d1a8      	bne.n	bcd36 <_strtod_l+0xa0e>
   bcde4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bcde8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bcdea:	0d1b      	lsrs	r3, r3, #20
   bcdec:	051b      	lsls	r3, r3, #20
   bcdee:	429a      	cmp	r2, r3
   bcdf0:	d1a1      	bne.n	bcd36 <_strtod_l+0xa0e>
   bcdf2:	4640      	mov	r0, r8
   bcdf4:	4649      	mov	r1, r9
   bcdf6:	f001 fa5b 	bl	be2b0 <__aeabi_d2lz>
   bcdfa:	f7fe fe43 	bl	bba84 <__aeabi_l2d>
   bcdfe:	4602      	mov	r2, r0
   bce00:	460b      	mov	r3, r1
   bce02:	4640      	mov	r0, r8
   bce04:	4649      	mov	r1, r9
   bce06:	f7fe fcb3 	bl	bb770 <__aeabi_dsub>
   bce0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bce0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bce10:	ea43 030a 	orr.w	r3, r3, sl
   bce14:	4313      	orrs	r3, r2
   bce16:	4680      	mov	r8, r0
   bce18:	4689      	mov	r9, r1
   bce1a:	d055      	beq.n	bcec8 <_strtod_l+0xba0>
   bce1c:	a336      	add	r3, pc, #216	; (adr r3, bcef8 <_strtod_l+0xbd0>)
   bce1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bce22:	f7ff f8cf 	bl	bbfc4 <__aeabi_dcmplt>
   bce26:	2800      	cmp	r0, #0
   bce28:	f47f acd0 	bne.w	bc7cc <_strtod_l+0x4a4>
   bce2c:	a334      	add	r3, pc, #208	; (adr r3, bcf00 <_strtod_l+0xbd8>)
   bce2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bce32:	4640      	mov	r0, r8
   bce34:	4649      	mov	r1, r9
   bce36:	f7ff f8e3 	bl	bc000 <__aeabi_dcmpgt>
   bce3a:	2800      	cmp	r0, #0
   bce3c:	f43f af7b 	beq.w	bcd36 <_strtod_l+0xa0e>
   bce40:	e4c4      	b.n	bc7cc <_strtod_l+0x4a4>
   bce42:	9b04      	ldr	r3, [sp, #16]
   bce44:	b333      	cbz	r3, bce94 <_strtod_l+0xb6c>
   bce46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bce48:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bce4c:	d822      	bhi.n	bce94 <_strtod_l+0xb6c>
   bce4e:	a32e      	add	r3, pc, #184	; (adr r3, bcf08 <_strtod_l+0xbe0>)
   bce50:	e9d3 2300 	ldrd	r2, r3, [r3]
   bce54:	4640      	mov	r0, r8
   bce56:	4649      	mov	r1, r9
   bce58:	f7ff f8be 	bl	bbfd8 <__aeabi_dcmple>
   bce5c:	b1a0      	cbz	r0, bce88 <_strtod_l+0xb60>
   bce5e:	4649      	mov	r1, r9
   bce60:	4640      	mov	r0, r8
   bce62:	f7ff f8ed 	bl	bc040 <__aeabi_d2uiz>
   bce66:	2801      	cmp	r0, #1
   bce68:	bf38      	it	cc
   bce6a:	2001      	movcc	r0, #1
   bce6c:	f7fe fdbe 	bl	bb9ec <__aeabi_ui2d>
   bce70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bce72:	4680      	mov	r8, r0
   bce74:	4689      	mov	r9, r1
   bce76:	bb23      	cbnz	r3, bcec2 <_strtod_l+0xb9a>
   bce78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bce7c:	9010      	str	r0, [sp, #64]	; 0x40
   bce7e:	9311      	str	r3, [sp, #68]	; 0x44
   bce80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bce84:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bce88:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bce8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bce8c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bce90:	1a9b      	subs	r3, r3, r2
   bce92:	9309      	str	r3, [sp, #36]	; 0x24
   bce94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bce98:	eeb0 0a48 	vmov.f32	s0, s16
   bce9c:	eef0 0a68 	vmov.f32	s1, s17
   bcea0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bcea4:	f001 f888 	bl	bdfb8 <__ulp>
   bcea8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bceac:	ec53 2b10 	vmov	r2, r3, d0
   bceb0:	f7fe fe16 	bl	bbae0 <__aeabi_dmul>
   bceb4:	ec53 2b18 	vmov	r2, r3, d8
   bceb8:	f7fe fc5c 	bl	bb774 <__adddf3>
   bcebc:	4682      	mov	sl, r0
   bcebe:	468b      	mov	fp, r1
   bcec0:	e78d      	b.n	bcdde <_strtod_l+0xab6>
   bcec2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bcec6:	e7db      	b.n	bce80 <_strtod_l+0xb58>
   bcec8:	a311      	add	r3, pc, #68	; (adr r3, bcf10 <_strtod_l+0xbe8>)
   bceca:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcece:	f7ff f879 	bl	bbfc4 <__aeabi_dcmplt>
   bced2:	e7b2      	b.n	bce3a <_strtod_l+0xb12>
   bced4:	2300      	movs	r3, #0
   bced6:	930a      	str	r3, [sp, #40]	; 0x28
   bced8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bceda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bcedc:	6013      	str	r3, [r2, #0]
   bcede:	f7ff ba6b 	b.w	bc3b8 <_strtod_l+0x90>
   bcee2:	2a65      	cmp	r2, #101	; 0x65
   bcee4:	f43f ab5f 	beq.w	bc5a6 <_strtod_l+0x27e>
   bcee8:	2a45      	cmp	r2, #69	; 0x45
   bceea:	f43f ab5c 	beq.w	bc5a6 <_strtod_l+0x27e>
   bceee:	2301      	movs	r3, #1
   bcef0:	f7ff bb94 	b.w	bc61c <_strtod_l+0x2f4>
   bcef4:	f3af 8000 	nop.w
   bcef8:	94a03595 	.word	0x94a03595
   bcefc:	3fdfffff 	.word	0x3fdfffff
   bcf00:	35afe535 	.word	0x35afe535
   bcf04:	3fe00000 	.word	0x3fe00000
   bcf08:	ffc00000 	.word	0xffc00000
   bcf0c:	41dfffff 	.word	0x41dfffff
   bcf10:	94a03595 	.word	0x94a03595
   bcf14:	3fcfffff 	.word	0x3fcfffff
   bcf18:	3ff00000 	.word	0x3ff00000
   bcf1c:	7ff00000 	.word	0x7ff00000
   bcf20:	7fe00000 	.word	0x7fe00000
   bcf24:	7c9fffff 	.word	0x7c9fffff
   bcf28:	3fe00000 	.word	0x3fe00000
   bcf2c:	bff00000 	.word	0xbff00000
   bcf30:	7fefffff 	.word	0x7fefffff

000bcf34 <strtof>:
   bcf34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcf38:	f8df 80ac 	ldr.w	r8, [pc, #172]	; bcfe8 <strtof+0xb4>
   bcf3c:	4b26      	ldr	r3, [pc, #152]	; (bcfd8 <strtof+0xa4>)
   bcf3e:	460a      	mov	r2, r1
   bcf40:	ed2d 8b02 	vpush	{d8}
   bcf44:	4601      	mov	r1, r0
   bcf46:	f8d8 0000 	ldr.w	r0, [r8]
   bcf4a:	f7ff f9ed 	bl	bc328 <_strtod_l>
   bcf4e:	ec55 4b10 	vmov	r4, r5, d0
   bcf52:	ee10 2a10 	vmov	r2, s0
   bcf56:	ee10 0a10 	vmov	r0, s0
   bcf5a:	462b      	mov	r3, r5
   bcf5c:	4629      	mov	r1, r5
   bcf5e:	f7ff f859 	bl	bc014 <__aeabi_dcmpun>
   bcf62:	b190      	cbz	r0, bcf8a <strtof+0x56>
   bcf64:	2d00      	cmp	r5, #0
   bcf66:	481d      	ldr	r0, [pc, #116]	; (bcfdc <strtof+0xa8>)
   bcf68:	da09      	bge.n	bcf7e <strtof+0x4a>
   bcf6a:	f001 f98d 	bl	be288 <nanf>
   bcf6e:	eeb1 8a40 	vneg.f32	s16, s0
   bcf72:	eeb0 0a48 	vmov.f32	s0, s16
   bcf76:	ecbd 8b02 	vpop	{d8}
   bcf7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcf7e:	ecbd 8b02 	vpop	{d8}
   bcf82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bcf86:	f001 b97f 	b.w	be288 <nanf>
   bcf8a:	4620      	mov	r0, r4
   bcf8c:	4629      	mov	r1, r5
   bcf8e:	f7ff f877 	bl	bc080 <__aeabi_d2f>
   bcf92:	ee08 0a10 	vmov	s16, r0
   bcf96:	eddf 7a12 	vldr	s15, [pc, #72]	; bcfe0 <strtof+0xac>
   bcf9a:	eeb0 7ac8 	vabs.f32	s14, s16
   bcf9e:	eeb4 7a67 	vcmp.f32	s14, s15
   bcfa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bcfa6:	dde4      	ble.n	bcf72 <strtof+0x3e>
   bcfa8:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   bcfac:	4b0d      	ldr	r3, [pc, #52]	; (bcfe4 <strtof+0xb0>)
   bcfae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bcfb2:	4620      	mov	r0, r4
   bcfb4:	4639      	mov	r1, r7
   bcfb6:	f7ff f82d 	bl	bc014 <__aeabi_dcmpun>
   bcfba:	b940      	cbnz	r0, bcfce <strtof+0x9a>
   bcfbc:	4b09      	ldr	r3, [pc, #36]	; (bcfe4 <strtof+0xb0>)
   bcfbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bcfc2:	4620      	mov	r0, r4
   bcfc4:	4639      	mov	r1, r7
   bcfc6:	f7ff f807 	bl	bbfd8 <__aeabi_dcmple>
   bcfca:	2800      	cmp	r0, #0
   bcfcc:	d0d1      	beq.n	bcf72 <strtof+0x3e>
   bcfce:	f8d8 3000 	ldr.w	r3, [r8]
   bcfd2:	2222      	movs	r2, #34	; 0x22
   bcfd4:	601a      	str	r2, [r3, #0]
   bcfd6:	e7cc      	b.n	bcf72 <strtof+0x3e>
   bcfd8:	20035134 	.word	0x20035134
   bcfdc:	000be7c6 	.word	0x000be7c6
   bcfe0:	7f7fffff 	.word	0x7f7fffff
   bcfe4:	7fefffff 	.word	0x7fefffff
   bcfe8:	200350c8 	.word	0x200350c8

000bcfec <_strtol_l.constprop.0>:
   bcfec:	2b01      	cmp	r3, #1
   bcfee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bcff2:	d001      	beq.n	bcff8 <_strtol_l.constprop.0+0xc>
   bcff4:	2b24      	cmp	r3, #36	; 0x24
   bcff6:	d906      	bls.n	bd006 <_strtol_l.constprop.0+0x1a>
   bcff8:	f7fb fd9c 	bl	b8b34 <__errno>
   bcffc:	2316      	movs	r3, #22
   bcffe:	6003      	str	r3, [r0, #0]
   bd000:	2000      	movs	r0, #0
   bd002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd006:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bd0ec <_strtol_l.constprop.0+0x100>
   bd00a:	460d      	mov	r5, r1
   bd00c:	462e      	mov	r6, r5
   bd00e:	f815 4b01 	ldrb.w	r4, [r5], #1
   bd012:	f814 700c 	ldrb.w	r7, [r4, ip]
   bd016:	f017 0708 	ands.w	r7, r7, #8
   bd01a:	d1f7      	bne.n	bd00c <_strtol_l.constprop.0+0x20>
   bd01c:	2c2d      	cmp	r4, #45	; 0x2d
   bd01e:	d132      	bne.n	bd086 <_strtol_l.constprop.0+0x9a>
   bd020:	782c      	ldrb	r4, [r5, #0]
   bd022:	2701      	movs	r7, #1
   bd024:	1cb5      	adds	r5, r6, #2
   bd026:	2b00      	cmp	r3, #0
   bd028:	d05b      	beq.n	bd0e2 <_strtol_l.constprop.0+0xf6>
   bd02a:	2b10      	cmp	r3, #16
   bd02c:	d109      	bne.n	bd042 <_strtol_l.constprop.0+0x56>
   bd02e:	2c30      	cmp	r4, #48	; 0x30
   bd030:	d107      	bne.n	bd042 <_strtol_l.constprop.0+0x56>
   bd032:	782c      	ldrb	r4, [r5, #0]
   bd034:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bd038:	2c58      	cmp	r4, #88	; 0x58
   bd03a:	d14d      	bne.n	bd0d8 <_strtol_l.constprop.0+0xec>
   bd03c:	786c      	ldrb	r4, [r5, #1]
   bd03e:	2310      	movs	r3, #16
   bd040:	3502      	adds	r5, #2
   bd042:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bd046:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bd04a:	f04f 0c00 	mov.w	ip, #0
   bd04e:	fbb8 f9f3 	udiv	r9, r8, r3
   bd052:	4666      	mov	r6, ip
   bd054:	fb03 8a19 	mls	sl, r3, r9, r8
   bd058:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bd05c:	f1be 0f09 	cmp.w	lr, #9
   bd060:	d816      	bhi.n	bd090 <_strtol_l.constprop.0+0xa4>
   bd062:	4674      	mov	r4, lr
   bd064:	42a3      	cmp	r3, r4
   bd066:	dd24      	ble.n	bd0b2 <_strtol_l.constprop.0+0xc6>
   bd068:	f1bc 0f00 	cmp.w	ip, #0
   bd06c:	db1e      	blt.n	bd0ac <_strtol_l.constprop.0+0xc0>
   bd06e:	45b1      	cmp	r9, r6
   bd070:	d31c      	bcc.n	bd0ac <_strtol_l.constprop.0+0xc0>
   bd072:	d101      	bne.n	bd078 <_strtol_l.constprop.0+0x8c>
   bd074:	45a2      	cmp	sl, r4
   bd076:	db19      	blt.n	bd0ac <_strtol_l.constprop.0+0xc0>
   bd078:	fb06 4603 	mla	r6, r6, r3, r4
   bd07c:	f04f 0c01 	mov.w	ip, #1
   bd080:	f815 4b01 	ldrb.w	r4, [r5], #1
   bd084:	e7e8      	b.n	bd058 <_strtol_l.constprop.0+0x6c>
   bd086:	2c2b      	cmp	r4, #43	; 0x2b
   bd088:	bf04      	itt	eq
   bd08a:	782c      	ldrbeq	r4, [r5, #0]
   bd08c:	1cb5      	addeq	r5, r6, #2
   bd08e:	e7ca      	b.n	bd026 <_strtol_l.constprop.0+0x3a>
   bd090:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bd094:	f1be 0f19 	cmp.w	lr, #25
   bd098:	d801      	bhi.n	bd09e <_strtol_l.constprop.0+0xb2>
   bd09a:	3c37      	subs	r4, #55	; 0x37
   bd09c:	e7e2      	b.n	bd064 <_strtol_l.constprop.0+0x78>
   bd09e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bd0a2:	f1be 0f19 	cmp.w	lr, #25
   bd0a6:	d804      	bhi.n	bd0b2 <_strtol_l.constprop.0+0xc6>
   bd0a8:	3c57      	subs	r4, #87	; 0x57
   bd0aa:	e7db      	b.n	bd064 <_strtol_l.constprop.0+0x78>
   bd0ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bd0b0:	e7e6      	b.n	bd080 <_strtol_l.constprop.0+0x94>
   bd0b2:	f1bc 0f00 	cmp.w	ip, #0
   bd0b6:	da05      	bge.n	bd0c4 <_strtol_l.constprop.0+0xd8>
   bd0b8:	2322      	movs	r3, #34	; 0x22
   bd0ba:	6003      	str	r3, [r0, #0]
   bd0bc:	4646      	mov	r6, r8
   bd0be:	b942      	cbnz	r2, bd0d2 <_strtol_l.constprop.0+0xe6>
   bd0c0:	4630      	mov	r0, r6
   bd0c2:	e79e      	b.n	bd002 <_strtol_l.constprop.0+0x16>
   bd0c4:	b107      	cbz	r7, bd0c8 <_strtol_l.constprop.0+0xdc>
   bd0c6:	4276      	negs	r6, r6
   bd0c8:	2a00      	cmp	r2, #0
   bd0ca:	d0f9      	beq.n	bd0c0 <_strtol_l.constprop.0+0xd4>
   bd0cc:	f1bc 0f00 	cmp.w	ip, #0
   bd0d0:	d000      	beq.n	bd0d4 <_strtol_l.constprop.0+0xe8>
   bd0d2:	1e69      	subs	r1, r5, #1
   bd0d4:	6011      	str	r1, [r2, #0]
   bd0d6:	e7f3      	b.n	bd0c0 <_strtol_l.constprop.0+0xd4>
   bd0d8:	2430      	movs	r4, #48	; 0x30
   bd0da:	2b00      	cmp	r3, #0
   bd0dc:	d1b1      	bne.n	bd042 <_strtol_l.constprop.0+0x56>
   bd0de:	2308      	movs	r3, #8
   bd0e0:	e7af      	b.n	bd042 <_strtol_l.constprop.0+0x56>
   bd0e2:	2c30      	cmp	r4, #48	; 0x30
   bd0e4:	d0a5      	beq.n	bd032 <_strtol_l.constprop.0+0x46>
   bd0e6:	230a      	movs	r3, #10
   bd0e8:	e7ab      	b.n	bd042 <_strtol_l.constprop.0+0x56>
   bd0ea:	bf00      	nop
   bd0ec:	000beda9 	.word	0x000beda9

000bd0f0 <strtol>:
   bd0f0:	4613      	mov	r3, r2
   bd0f2:	460a      	mov	r2, r1
   bd0f4:	4601      	mov	r1, r0
   bd0f6:	4802      	ldr	r0, [pc, #8]	; (bd100 <strtol+0x10>)
   bd0f8:	6800      	ldr	r0, [r0, #0]
   bd0fa:	f7ff bf77 	b.w	bcfec <_strtol_l.constprop.0>
   bd0fe:	bf00      	nop
   bd100:	200350c8 	.word	0x200350c8

000bd104 <__register_exitproc>:
   bd104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd108:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bd1c4 <__register_exitproc+0xc0>
   bd10c:	4606      	mov	r6, r0
   bd10e:	f8d8 0000 	ldr.w	r0, [r8]
   bd112:	461f      	mov	r7, r3
   bd114:	460d      	mov	r5, r1
   bd116:	4691      	mov	r9, r2
   bd118:	f000 fbc6 	bl	bd8a8 <__retarget_lock_acquire_recursive>
   bd11c:	4b25      	ldr	r3, [pc, #148]	; (bd1b4 <__register_exitproc+0xb0>)
   bd11e:	681c      	ldr	r4, [r3, #0]
   bd120:	b934      	cbnz	r4, bd130 <__register_exitproc+0x2c>
   bd122:	4c25      	ldr	r4, [pc, #148]	; (bd1b8 <__register_exitproc+0xb4>)
   bd124:	601c      	str	r4, [r3, #0]
   bd126:	4b25      	ldr	r3, [pc, #148]	; (bd1bc <__register_exitproc+0xb8>)
   bd128:	b113      	cbz	r3, bd130 <__register_exitproc+0x2c>
   bd12a:	681b      	ldr	r3, [r3, #0]
   bd12c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bd130:	6863      	ldr	r3, [r4, #4]
   bd132:	2b1f      	cmp	r3, #31
   bd134:	dd07      	ble.n	bd146 <__register_exitproc+0x42>
   bd136:	f8d8 0000 	ldr.w	r0, [r8]
   bd13a:	f000 fbb7 	bl	bd8ac <__retarget_lock_release_recursive>
   bd13e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bd142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd146:	b34e      	cbz	r6, bd19c <__register_exitproc+0x98>
   bd148:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bd14c:	b988      	cbnz	r0, bd172 <__register_exitproc+0x6e>
   bd14e:	4b1c      	ldr	r3, [pc, #112]	; (bd1c0 <__register_exitproc+0xbc>)
   bd150:	b923      	cbnz	r3, bd15c <__register_exitproc+0x58>
   bd152:	f8d8 0000 	ldr.w	r0, [r8]
   bd156:	f000 fba8 	bl	bd8aa <__retarget_lock_release>
   bd15a:	e7f0      	b.n	bd13e <__register_exitproc+0x3a>
   bd15c:	f44f 7084 	mov.w	r0, #264	; 0x108
   bd160:	f7fb fcb0 	bl	b8ac4 <malloc>
   bd164:	2800      	cmp	r0, #0
   bd166:	d0f4      	beq.n	bd152 <__register_exitproc+0x4e>
   bd168:	2300      	movs	r3, #0
   bd16a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bd16e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bd172:	6863      	ldr	r3, [r4, #4]
   bd174:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bd178:	2201      	movs	r2, #1
   bd17a:	409a      	lsls	r2, r3
   bd17c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bd180:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bd184:	4313      	orrs	r3, r2
   bd186:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bd18a:	2e02      	cmp	r6, #2
   bd18c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bd190:	bf02      	ittt	eq
   bd192:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bd196:	4313      	orreq	r3, r2
   bd198:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bd19c:	6863      	ldr	r3, [r4, #4]
   bd19e:	f8d8 0000 	ldr.w	r0, [r8]
   bd1a2:	1c5a      	adds	r2, r3, #1
   bd1a4:	3302      	adds	r3, #2
   bd1a6:	6062      	str	r2, [r4, #4]
   bd1a8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bd1ac:	f000 fb7e 	bl	bd8ac <__retarget_lock_release_recursive>
   bd1b0:	2000      	movs	r0, #0
   bd1b2:	e7c6      	b.n	bd142 <__register_exitproc+0x3e>
   bd1b4:	2003e7e8 	.word	0x2003e7e8
   bd1b8:	2003e75c 	.word	0x2003e75c
   bd1bc:	00000000 	.word	0x00000000
   bd1c0:	000b8ac5 	.word	0x000b8ac5
   bd1c4:	2003512c 	.word	0x2003512c

000bd1c8 <rshift>:
   bd1c8:	6903      	ldr	r3, [r0, #16]
   bd1ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bd1ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd1d2:	ea4f 1261 	mov.w	r2, r1, asr #5
   bd1d6:	f100 0414 	add.w	r4, r0, #20
   bd1da:	dd45      	ble.n	bd268 <rshift+0xa0>
   bd1dc:	f011 011f 	ands.w	r1, r1, #31
   bd1e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bd1e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bd1e8:	d10c      	bne.n	bd204 <rshift+0x3c>
   bd1ea:	f100 0710 	add.w	r7, r0, #16
   bd1ee:	4629      	mov	r1, r5
   bd1f0:	42b1      	cmp	r1, r6
   bd1f2:	d334      	bcc.n	bd25e <rshift+0x96>
   bd1f4:	1a9b      	subs	r3, r3, r2
   bd1f6:	009b      	lsls	r3, r3, #2
   bd1f8:	1eea      	subs	r2, r5, #3
   bd1fa:	4296      	cmp	r6, r2
   bd1fc:	bf38      	it	cc
   bd1fe:	2300      	movcc	r3, #0
   bd200:	4423      	add	r3, r4
   bd202:	e015      	b.n	bd230 <rshift+0x68>
   bd204:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bd208:	f1c1 0820 	rsb	r8, r1, #32
   bd20c:	40cf      	lsrs	r7, r1
   bd20e:	f105 0e04 	add.w	lr, r5, #4
   bd212:	46a1      	mov	r9, r4
   bd214:	4576      	cmp	r6, lr
   bd216:	46f4      	mov	ip, lr
   bd218:	d815      	bhi.n	bd246 <rshift+0x7e>
   bd21a:	1a9a      	subs	r2, r3, r2
   bd21c:	0092      	lsls	r2, r2, #2
   bd21e:	3a04      	subs	r2, #4
   bd220:	3501      	adds	r5, #1
   bd222:	42ae      	cmp	r6, r5
   bd224:	bf38      	it	cc
   bd226:	2200      	movcc	r2, #0
   bd228:	18a3      	adds	r3, r4, r2
   bd22a:	50a7      	str	r7, [r4, r2]
   bd22c:	b107      	cbz	r7, bd230 <rshift+0x68>
   bd22e:	3304      	adds	r3, #4
   bd230:	1b1a      	subs	r2, r3, r4
   bd232:	42a3      	cmp	r3, r4
   bd234:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bd238:	bf08      	it	eq
   bd23a:	2300      	moveq	r3, #0
   bd23c:	6102      	str	r2, [r0, #16]
   bd23e:	bf08      	it	eq
   bd240:	6143      	streq	r3, [r0, #20]
   bd242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd246:	f8dc c000 	ldr.w	ip, [ip]
   bd24a:	fa0c fc08 	lsl.w	ip, ip, r8
   bd24e:	ea4c 0707 	orr.w	r7, ip, r7
   bd252:	f849 7b04 	str.w	r7, [r9], #4
   bd256:	f85e 7b04 	ldr.w	r7, [lr], #4
   bd25a:	40cf      	lsrs	r7, r1
   bd25c:	e7da      	b.n	bd214 <rshift+0x4c>
   bd25e:	f851 cb04 	ldr.w	ip, [r1], #4
   bd262:	f847 cf04 	str.w	ip, [r7, #4]!
   bd266:	e7c3      	b.n	bd1f0 <rshift+0x28>
   bd268:	4623      	mov	r3, r4
   bd26a:	e7e1      	b.n	bd230 <rshift+0x68>

000bd26c <__hexdig_fun>:
   bd26c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bd270:	2b09      	cmp	r3, #9
   bd272:	d802      	bhi.n	bd27a <__hexdig_fun+0xe>
   bd274:	3820      	subs	r0, #32
   bd276:	b2c0      	uxtb	r0, r0
   bd278:	4770      	bx	lr
   bd27a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bd27e:	2b05      	cmp	r3, #5
   bd280:	d801      	bhi.n	bd286 <__hexdig_fun+0x1a>
   bd282:	3847      	subs	r0, #71	; 0x47
   bd284:	e7f7      	b.n	bd276 <__hexdig_fun+0xa>
   bd286:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bd28a:	2b05      	cmp	r3, #5
   bd28c:	d801      	bhi.n	bd292 <__hexdig_fun+0x26>
   bd28e:	3827      	subs	r0, #39	; 0x27
   bd290:	e7f1      	b.n	bd276 <__hexdig_fun+0xa>
   bd292:	2000      	movs	r0, #0
   bd294:	4770      	bx	lr
	...

000bd298 <__gethex>:
   bd298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd29c:	ed2d 8b02 	vpush	{d8}
   bd2a0:	b089      	sub	sp, #36	; 0x24
   bd2a2:	ee08 0a10 	vmov	s16, r0
   bd2a6:	9304      	str	r3, [sp, #16]
   bd2a8:	4bb4      	ldr	r3, [pc, #720]	; (bd57c <__gethex+0x2e4>)
   bd2aa:	681b      	ldr	r3, [r3, #0]
   bd2ac:	9301      	str	r3, [sp, #4]
   bd2ae:	4618      	mov	r0, r3
   bd2b0:	468b      	mov	fp, r1
   bd2b2:	4690      	mov	r8, r2
   bd2b4:	f7fe ffdc 	bl	bc270 <strlen>
   bd2b8:	9b01      	ldr	r3, [sp, #4]
   bd2ba:	f8db 2000 	ldr.w	r2, [fp]
   bd2be:	4403      	add	r3, r0
   bd2c0:	4682      	mov	sl, r0
   bd2c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bd2c6:	9305      	str	r3, [sp, #20]
   bd2c8:	1c93      	adds	r3, r2, #2
   bd2ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bd2ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bd2d2:	32fe      	adds	r2, #254	; 0xfe
   bd2d4:	18d1      	adds	r1, r2, r3
   bd2d6:	461f      	mov	r7, r3
   bd2d8:	f813 0b01 	ldrb.w	r0, [r3], #1
   bd2dc:	9100      	str	r1, [sp, #0]
   bd2de:	2830      	cmp	r0, #48	; 0x30
   bd2e0:	d0f8      	beq.n	bd2d4 <__gethex+0x3c>
   bd2e2:	f7ff ffc3 	bl	bd26c <__hexdig_fun>
   bd2e6:	4604      	mov	r4, r0
   bd2e8:	2800      	cmp	r0, #0
   bd2ea:	d13a      	bne.n	bd362 <__gethex+0xca>
   bd2ec:	9901      	ldr	r1, [sp, #4]
   bd2ee:	4652      	mov	r2, sl
   bd2f0:	4638      	mov	r0, r7
   bd2f2:	f7fe ffc5 	bl	bc280 <strncmp>
   bd2f6:	4605      	mov	r5, r0
   bd2f8:	2800      	cmp	r0, #0
   bd2fa:	d168      	bne.n	bd3ce <__gethex+0x136>
   bd2fc:	f817 000a 	ldrb.w	r0, [r7, sl]
   bd300:	eb07 060a 	add.w	r6, r7, sl
   bd304:	f7ff ffb2 	bl	bd26c <__hexdig_fun>
   bd308:	2800      	cmp	r0, #0
   bd30a:	d062      	beq.n	bd3d2 <__gethex+0x13a>
   bd30c:	4633      	mov	r3, r6
   bd30e:	7818      	ldrb	r0, [r3, #0]
   bd310:	2830      	cmp	r0, #48	; 0x30
   bd312:	461f      	mov	r7, r3
   bd314:	f103 0301 	add.w	r3, r3, #1
   bd318:	d0f9      	beq.n	bd30e <__gethex+0x76>
   bd31a:	f7ff ffa7 	bl	bd26c <__hexdig_fun>
   bd31e:	2301      	movs	r3, #1
   bd320:	fab0 f480 	clz	r4, r0
   bd324:	0964      	lsrs	r4, r4, #5
   bd326:	4635      	mov	r5, r6
   bd328:	9300      	str	r3, [sp, #0]
   bd32a:	463a      	mov	r2, r7
   bd32c:	4616      	mov	r6, r2
   bd32e:	3201      	adds	r2, #1
   bd330:	7830      	ldrb	r0, [r6, #0]
   bd332:	f7ff ff9b 	bl	bd26c <__hexdig_fun>
   bd336:	2800      	cmp	r0, #0
   bd338:	d1f8      	bne.n	bd32c <__gethex+0x94>
   bd33a:	9901      	ldr	r1, [sp, #4]
   bd33c:	4652      	mov	r2, sl
   bd33e:	4630      	mov	r0, r6
   bd340:	f7fe ff9e 	bl	bc280 <strncmp>
   bd344:	b980      	cbnz	r0, bd368 <__gethex+0xd0>
   bd346:	b94d      	cbnz	r5, bd35c <__gethex+0xc4>
   bd348:	eb06 050a 	add.w	r5, r6, sl
   bd34c:	462a      	mov	r2, r5
   bd34e:	4616      	mov	r6, r2
   bd350:	3201      	adds	r2, #1
   bd352:	7830      	ldrb	r0, [r6, #0]
   bd354:	f7ff ff8a 	bl	bd26c <__hexdig_fun>
   bd358:	2800      	cmp	r0, #0
   bd35a:	d1f8      	bne.n	bd34e <__gethex+0xb6>
   bd35c:	1bad      	subs	r5, r5, r6
   bd35e:	00ad      	lsls	r5, r5, #2
   bd360:	e004      	b.n	bd36c <__gethex+0xd4>
   bd362:	2400      	movs	r4, #0
   bd364:	4625      	mov	r5, r4
   bd366:	e7e0      	b.n	bd32a <__gethex+0x92>
   bd368:	2d00      	cmp	r5, #0
   bd36a:	d1f7      	bne.n	bd35c <__gethex+0xc4>
   bd36c:	7833      	ldrb	r3, [r6, #0]
   bd36e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bd372:	2b50      	cmp	r3, #80	; 0x50
   bd374:	d13b      	bne.n	bd3ee <__gethex+0x156>
   bd376:	7873      	ldrb	r3, [r6, #1]
   bd378:	2b2b      	cmp	r3, #43	; 0x2b
   bd37a:	d02c      	beq.n	bd3d6 <__gethex+0x13e>
   bd37c:	2b2d      	cmp	r3, #45	; 0x2d
   bd37e:	d02e      	beq.n	bd3de <__gethex+0x146>
   bd380:	1c71      	adds	r1, r6, #1
   bd382:	f04f 0900 	mov.w	r9, #0
   bd386:	7808      	ldrb	r0, [r1, #0]
   bd388:	f7ff ff70 	bl	bd26c <__hexdig_fun>
   bd38c:	1e43      	subs	r3, r0, #1
   bd38e:	b2db      	uxtb	r3, r3
   bd390:	2b18      	cmp	r3, #24
   bd392:	d82c      	bhi.n	bd3ee <__gethex+0x156>
   bd394:	f1a0 0210 	sub.w	r2, r0, #16
   bd398:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bd39c:	f7ff ff66 	bl	bd26c <__hexdig_fun>
   bd3a0:	1e43      	subs	r3, r0, #1
   bd3a2:	b2db      	uxtb	r3, r3
   bd3a4:	2b18      	cmp	r3, #24
   bd3a6:	d91d      	bls.n	bd3e4 <__gethex+0x14c>
   bd3a8:	f1b9 0f00 	cmp.w	r9, #0
   bd3ac:	d000      	beq.n	bd3b0 <__gethex+0x118>
   bd3ae:	4252      	negs	r2, r2
   bd3b0:	4415      	add	r5, r2
   bd3b2:	f8cb 1000 	str.w	r1, [fp]
   bd3b6:	b1e4      	cbz	r4, bd3f2 <__gethex+0x15a>
   bd3b8:	9b00      	ldr	r3, [sp, #0]
   bd3ba:	2b00      	cmp	r3, #0
   bd3bc:	bf14      	ite	ne
   bd3be:	2700      	movne	r7, #0
   bd3c0:	2706      	moveq	r7, #6
   bd3c2:	4638      	mov	r0, r7
   bd3c4:	b009      	add	sp, #36	; 0x24
   bd3c6:	ecbd 8b02 	vpop	{d8}
   bd3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd3ce:	463e      	mov	r6, r7
   bd3d0:	4625      	mov	r5, r4
   bd3d2:	2401      	movs	r4, #1
   bd3d4:	e7ca      	b.n	bd36c <__gethex+0xd4>
   bd3d6:	f04f 0900 	mov.w	r9, #0
   bd3da:	1cb1      	adds	r1, r6, #2
   bd3dc:	e7d3      	b.n	bd386 <__gethex+0xee>
   bd3de:	f04f 0901 	mov.w	r9, #1
   bd3e2:	e7fa      	b.n	bd3da <__gethex+0x142>
   bd3e4:	230a      	movs	r3, #10
   bd3e6:	fb03 0202 	mla	r2, r3, r2, r0
   bd3ea:	3a10      	subs	r2, #16
   bd3ec:	e7d4      	b.n	bd398 <__gethex+0x100>
   bd3ee:	4631      	mov	r1, r6
   bd3f0:	e7df      	b.n	bd3b2 <__gethex+0x11a>
   bd3f2:	1bf3      	subs	r3, r6, r7
   bd3f4:	3b01      	subs	r3, #1
   bd3f6:	4621      	mov	r1, r4
   bd3f8:	2b07      	cmp	r3, #7
   bd3fa:	dc0b      	bgt.n	bd414 <__gethex+0x17c>
   bd3fc:	ee18 0a10 	vmov	r0, s16
   bd400:	f000 fa68 	bl	bd8d4 <_Balloc>
   bd404:	4604      	mov	r4, r0
   bd406:	b940      	cbnz	r0, bd41a <__gethex+0x182>
   bd408:	4b5d      	ldr	r3, [pc, #372]	; (bd580 <__gethex+0x2e8>)
   bd40a:	4602      	mov	r2, r0
   bd40c:	21de      	movs	r1, #222	; 0xde
   bd40e:	485d      	ldr	r0, [pc, #372]	; (bd584 <__gethex+0x2ec>)
   bd410:	f7fb fb98 	bl	b8b44 <__assert_func>
   bd414:	3101      	adds	r1, #1
   bd416:	105b      	asrs	r3, r3, #1
   bd418:	e7ee      	b.n	bd3f8 <__gethex+0x160>
   bd41a:	f100 0914 	add.w	r9, r0, #20
   bd41e:	f04f 0b00 	mov.w	fp, #0
   bd422:	f1ca 0301 	rsb	r3, sl, #1
   bd426:	f8cd 9008 	str.w	r9, [sp, #8]
   bd42a:	f8cd b000 	str.w	fp, [sp]
   bd42e:	9306      	str	r3, [sp, #24]
   bd430:	42b7      	cmp	r7, r6
   bd432:	d340      	bcc.n	bd4b6 <__gethex+0x21e>
   bd434:	9802      	ldr	r0, [sp, #8]
   bd436:	9b00      	ldr	r3, [sp, #0]
   bd438:	f840 3b04 	str.w	r3, [r0], #4
   bd43c:	eba0 0009 	sub.w	r0, r0, r9
   bd440:	1080      	asrs	r0, r0, #2
   bd442:	0146      	lsls	r6, r0, #5
   bd444:	6120      	str	r0, [r4, #16]
   bd446:	4618      	mov	r0, r3
   bd448:	f000 fb36 	bl	bdab8 <__hi0bits>
   bd44c:	1a30      	subs	r0, r6, r0
   bd44e:	f8d8 6000 	ldr.w	r6, [r8]
   bd452:	42b0      	cmp	r0, r6
   bd454:	dd63      	ble.n	bd51e <__gethex+0x286>
   bd456:	1b87      	subs	r7, r0, r6
   bd458:	4639      	mov	r1, r7
   bd45a:	4620      	mov	r0, r4
   bd45c:	f000 feda 	bl	be214 <__any_on>
   bd460:	4682      	mov	sl, r0
   bd462:	b1a8      	cbz	r0, bd490 <__gethex+0x1f8>
   bd464:	1e7b      	subs	r3, r7, #1
   bd466:	1159      	asrs	r1, r3, #5
   bd468:	f003 021f 	and.w	r2, r3, #31
   bd46c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bd470:	f04f 0a01 	mov.w	sl, #1
   bd474:	fa0a f202 	lsl.w	r2, sl, r2
   bd478:	420a      	tst	r2, r1
   bd47a:	d009      	beq.n	bd490 <__gethex+0x1f8>
   bd47c:	4553      	cmp	r3, sl
   bd47e:	dd05      	ble.n	bd48c <__gethex+0x1f4>
   bd480:	1eb9      	subs	r1, r7, #2
   bd482:	4620      	mov	r0, r4
   bd484:	f000 fec6 	bl	be214 <__any_on>
   bd488:	2800      	cmp	r0, #0
   bd48a:	d145      	bne.n	bd518 <__gethex+0x280>
   bd48c:	f04f 0a02 	mov.w	sl, #2
   bd490:	4639      	mov	r1, r7
   bd492:	4620      	mov	r0, r4
   bd494:	f7ff fe98 	bl	bd1c8 <rshift>
   bd498:	443d      	add	r5, r7
   bd49a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bd49e:	42ab      	cmp	r3, r5
   bd4a0:	da4c      	bge.n	bd53c <__gethex+0x2a4>
   bd4a2:	ee18 0a10 	vmov	r0, s16
   bd4a6:	4621      	mov	r1, r4
   bd4a8:	f000 fa54 	bl	bd954 <_Bfree>
   bd4ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd4ae:	2300      	movs	r3, #0
   bd4b0:	6013      	str	r3, [r2, #0]
   bd4b2:	27a3      	movs	r7, #163	; 0xa3
   bd4b4:	e785      	b.n	bd3c2 <__gethex+0x12a>
   bd4b6:	1e73      	subs	r3, r6, #1
   bd4b8:	9a05      	ldr	r2, [sp, #20]
   bd4ba:	9303      	str	r3, [sp, #12]
   bd4bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bd4c0:	4293      	cmp	r3, r2
   bd4c2:	d019      	beq.n	bd4f8 <__gethex+0x260>
   bd4c4:	f1bb 0f20 	cmp.w	fp, #32
   bd4c8:	d107      	bne.n	bd4da <__gethex+0x242>
   bd4ca:	9b02      	ldr	r3, [sp, #8]
   bd4cc:	9a00      	ldr	r2, [sp, #0]
   bd4ce:	f843 2b04 	str.w	r2, [r3], #4
   bd4d2:	9302      	str	r3, [sp, #8]
   bd4d4:	2300      	movs	r3, #0
   bd4d6:	9300      	str	r3, [sp, #0]
   bd4d8:	469b      	mov	fp, r3
   bd4da:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bd4de:	f7ff fec5 	bl	bd26c <__hexdig_fun>
   bd4e2:	9b00      	ldr	r3, [sp, #0]
   bd4e4:	f000 000f 	and.w	r0, r0, #15
   bd4e8:	fa00 f00b 	lsl.w	r0, r0, fp
   bd4ec:	4303      	orrs	r3, r0
   bd4ee:	9300      	str	r3, [sp, #0]
   bd4f0:	f10b 0b04 	add.w	fp, fp, #4
   bd4f4:	9b03      	ldr	r3, [sp, #12]
   bd4f6:	e00d      	b.n	bd514 <__gethex+0x27c>
   bd4f8:	9b03      	ldr	r3, [sp, #12]
   bd4fa:	9a06      	ldr	r2, [sp, #24]
   bd4fc:	4413      	add	r3, r2
   bd4fe:	42bb      	cmp	r3, r7
   bd500:	d3e0      	bcc.n	bd4c4 <__gethex+0x22c>
   bd502:	4618      	mov	r0, r3
   bd504:	9901      	ldr	r1, [sp, #4]
   bd506:	9307      	str	r3, [sp, #28]
   bd508:	4652      	mov	r2, sl
   bd50a:	f7fe feb9 	bl	bc280 <strncmp>
   bd50e:	9b07      	ldr	r3, [sp, #28]
   bd510:	2800      	cmp	r0, #0
   bd512:	d1d7      	bne.n	bd4c4 <__gethex+0x22c>
   bd514:	461e      	mov	r6, r3
   bd516:	e78b      	b.n	bd430 <__gethex+0x198>
   bd518:	f04f 0a03 	mov.w	sl, #3
   bd51c:	e7b8      	b.n	bd490 <__gethex+0x1f8>
   bd51e:	da0a      	bge.n	bd536 <__gethex+0x29e>
   bd520:	1a37      	subs	r7, r6, r0
   bd522:	4621      	mov	r1, r4
   bd524:	ee18 0a10 	vmov	r0, s16
   bd528:	463a      	mov	r2, r7
   bd52a:	f000 fc2f 	bl	bdd8c <__lshift>
   bd52e:	1bed      	subs	r5, r5, r7
   bd530:	4604      	mov	r4, r0
   bd532:	f100 0914 	add.w	r9, r0, #20
   bd536:	f04f 0a00 	mov.w	sl, #0
   bd53a:	e7ae      	b.n	bd49a <__gethex+0x202>
   bd53c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bd540:	42a8      	cmp	r0, r5
   bd542:	dd72      	ble.n	bd62a <__gethex+0x392>
   bd544:	1b45      	subs	r5, r0, r5
   bd546:	42ae      	cmp	r6, r5
   bd548:	dc36      	bgt.n	bd5b8 <__gethex+0x320>
   bd54a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd54e:	2b02      	cmp	r3, #2
   bd550:	d02a      	beq.n	bd5a8 <__gethex+0x310>
   bd552:	2b03      	cmp	r3, #3
   bd554:	d02c      	beq.n	bd5b0 <__gethex+0x318>
   bd556:	2b01      	cmp	r3, #1
   bd558:	d11c      	bne.n	bd594 <__gethex+0x2fc>
   bd55a:	42ae      	cmp	r6, r5
   bd55c:	d11a      	bne.n	bd594 <__gethex+0x2fc>
   bd55e:	2e01      	cmp	r6, #1
   bd560:	d112      	bne.n	bd588 <__gethex+0x2f0>
   bd562:	9a04      	ldr	r2, [sp, #16]
   bd564:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bd568:	6013      	str	r3, [r2, #0]
   bd56a:	2301      	movs	r3, #1
   bd56c:	6123      	str	r3, [r4, #16]
   bd56e:	f8c9 3000 	str.w	r3, [r9]
   bd572:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd574:	2762      	movs	r7, #98	; 0x62
   bd576:	601c      	str	r4, [r3, #0]
   bd578:	e723      	b.n	bd3c2 <__gethex+0x12a>
   bd57a:	bf00      	nop
   bd57c:	000bef1c 	.word	0x000bef1c
   bd580:	000beea9 	.word	0x000beea9
   bd584:	000beeba 	.word	0x000beeba
   bd588:	1e71      	subs	r1, r6, #1
   bd58a:	4620      	mov	r0, r4
   bd58c:	f000 fe42 	bl	be214 <__any_on>
   bd590:	2800      	cmp	r0, #0
   bd592:	d1e6      	bne.n	bd562 <__gethex+0x2ca>
   bd594:	ee18 0a10 	vmov	r0, s16
   bd598:	4621      	mov	r1, r4
   bd59a:	f000 f9db 	bl	bd954 <_Bfree>
   bd59e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd5a0:	2300      	movs	r3, #0
   bd5a2:	6013      	str	r3, [r2, #0]
   bd5a4:	2750      	movs	r7, #80	; 0x50
   bd5a6:	e70c      	b.n	bd3c2 <__gethex+0x12a>
   bd5a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd5aa:	2b00      	cmp	r3, #0
   bd5ac:	d1f2      	bne.n	bd594 <__gethex+0x2fc>
   bd5ae:	e7d8      	b.n	bd562 <__gethex+0x2ca>
   bd5b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd5b2:	2b00      	cmp	r3, #0
   bd5b4:	d1d5      	bne.n	bd562 <__gethex+0x2ca>
   bd5b6:	e7ed      	b.n	bd594 <__gethex+0x2fc>
   bd5b8:	1e6f      	subs	r7, r5, #1
   bd5ba:	f1ba 0f00 	cmp.w	sl, #0
   bd5be:	d131      	bne.n	bd624 <__gethex+0x38c>
   bd5c0:	b127      	cbz	r7, bd5cc <__gethex+0x334>
   bd5c2:	4639      	mov	r1, r7
   bd5c4:	4620      	mov	r0, r4
   bd5c6:	f000 fe25 	bl	be214 <__any_on>
   bd5ca:	4682      	mov	sl, r0
   bd5cc:	117b      	asrs	r3, r7, #5
   bd5ce:	2101      	movs	r1, #1
   bd5d0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bd5d4:	f007 071f 	and.w	r7, r7, #31
   bd5d8:	fa01 f707 	lsl.w	r7, r1, r7
   bd5dc:	421f      	tst	r7, r3
   bd5de:	4629      	mov	r1, r5
   bd5e0:	4620      	mov	r0, r4
   bd5e2:	bf18      	it	ne
   bd5e4:	f04a 0a02 	orrne.w	sl, sl, #2
   bd5e8:	1b76      	subs	r6, r6, r5
   bd5ea:	f7ff fded 	bl	bd1c8 <rshift>
   bd5ee:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bd5f2:	2702      	movs	r7, #2
   bd5f4:	f1ba 0f00 	cmp.w	sl, #0
   bd5f8:	d048      	beq.n	bd68c <__gethex+0x3f4>
   bd5fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd5fe:	2b02      	cmp	r3, #2
   bd600:	d015      	beq.n	bd62e <__gethex+0x396>
   bd602:	2b03      	cmp	r3, #3
   bd604:	d017      	beq.n	bd636 <__gethex+0x39e>
   bd606:	2b01      	cmp	r3, #1
   bd608:	d109      	bne.n	bd61e <__gethex+0x386>
   bd60a:	f01a 0f02 	tst.w	sl, #2
   bd60e:	d006      	beq.n	bd61e <__gethex+0x386>
   bd610:	f8d9 0000 	ldr.w	r0, [r9]
   bd614:	ea4a 0a00 	orr.w	sl, sl, r0
   bd618:	f01a 0f01 	tst.w	sl, #1
   bd61c:	d10e      	bne.n	bd63c <__gethex+0x3a4>
   bd61e:	f047 0710 	orr.w	r7, r7, #16
   bd622:	e033      	b.n	bd68c <__gethex+0x3f4>
   bd624:	f04f 0a01 	mov.w	sl, #1
   bd628:	e7d0      	b.n	bd5cc <__gethex+0x334>
   bd62a:	2701      	movs	r7, #1
   bd62c:	e7e2      	b.n	bd5f4 <__gethex+0x35c>
   bd62e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd630:	f1c3 0301 	rsb	r3, r3, #1
   bd634:	9315      	str	r3, [sp, #84]	; 0x54
   bd636:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd638:	2b00      	cmp	r3, #0
   bd63a:	d0f0      	beq.n	bd61e <__gethex+0x386>
   bd63c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bd640:	f104 0314 	add.w	r3, r4, #20
   bd644:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bd648:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bd64c:	f04f 0c00 	mov.w	ip, #0
   bd650:	4618      	mov	r0, r3
   bd652:	f853 2b04 	ldr.w	r2, [r3], #4
   bd656:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bd65a:	d01c      	beq.n	bd696 <__gethex+0x3fe>
   bd65c:	3201      	adds	r2, #1
   bd65e:	6002      	str	r2, [r0, #0]
   bd660:	2f02      	cmp	r7, #2
   bd662:	f104 0314 	add.w	r3, r4, #20
   bd666:	d13f      	bne.n	bd6e8 <__gethex+0x450>
   bd668:	f8d8 2000 	ldr.w	r2, [r8]
   bd66c:	3a01      	subs	r2, #1
   bd66e:	42b2      	cmp	r2, r6
   bd670:	d10a      	bne.n	bd688 <__gethex+0x3f0>
   bd672:	1171      	asrs	r1, r6, #5
   bd674:	2201      	movs	r2, #1
   bd676:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bd67a:	f006 061f 	and.w	r6, r6, #31
   bd67e:	fa02 f606 	lsl.w	r6, r2, r6
   bd682:	421e      	tst	r6, r3
   bd684:	bf18      	it	ne
   bd686:	4617      	movne	r7, r2
   bd688:	f047 0720 	orr.w	r7, r7, #32
   bd68c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd68e:	601c      	str	r4, [r3, #0]
   bd690:	9b04      	ldr	r3, [sp, #16]
   bd692:	601d      	str	r5, [r3, #0]
   bd694:	e695      	b.n	bd3c2 <__gethex+0x12a>
   bd696:	4299      	cmp	r1, r3
   bd698:	f843 cc04 	str.w	ip, [r3, #-4]
   bd69c:	d8d8      	bhi.n	bd650 <__gethex+0x3b8>
   bd69e:	68a3      	ldr	r3, [r4, #8]
   bd6a0:	459b      	cmp	fp, r3
   bd6a2:	db19      	blt.n	bd6d8 <__gethex+0x440>
   bd6a4:	6861      	ldr	r1, [r4, #4]
   bd6a6:	ee18 0a10 	vmov	r0, s16
   bd6aa:	3101      	adds	r1, #1
   bd6ac:	f000 f912 	bl	bd8d4 <_Balloc>
   bd6b0:	4681      	mov	r9, r0
   bd6b2:	b918      	cbnz	r0, bd6bc <__gethex+0x424>
   bd6b4:	4b1a      	ldr	r3, [pc, #104]	; (bd720 <__gethex+0x488>)
   bd6b6:	4602      	mov	r2, r0
   bd6b8:	2184      	movs	r1, #132	; 0x84
   bd6ba:	e6a8      	b.n	bd40e <__gethex+0x176>
   bd6bc:	6922      	ldr	r2, [r4, #16]
   bd6be:	3202      	adds	r2, #2
   bd6c0:	f104 010c 	add.w	r1, r4, #12
   bd6c4:	0092      	lsls	r2, r2, #2
   bd6c6:	300c      	adds	r0, #12
   bd6c8:	f7fe fd62 	bl	bc190 <memcpy>
   bd6cc:	4621      	mov	r1, r4
   bd6ce:	ee18 0a10 	vmov	r0, s16
   bd6d2:	f000 f93f 	bl	bd954 <_Bfree>
   bd6d6:	464c      	mov	r4, r9
   bd6d8:	6923      	ldr	r3, [r4, #16]
   bd6da:	1c5a      	adds	r2, r3, #1
   bd6dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bd6e0:	6122      	str	r2, [r4, #16]
   bd6e2:	2201      	movs	r2, #1
   bd6e4:	615a      	str	r2, [r3, #20]
   bd6e6:	e7bb      	b.n	bd660 <__gethex+0x3c8>
   bd6e8:	6922      	ldr	r2, [r4, #16]
   bd6ea:	455a      	cmp	r2, fp
   bd6ec:	dd0b      	ble.n	bd706 <__gethex+0x46e>
   bd6ee:	2101      	movs	r1, #1
   bd6f0:	4620      	mov	r0, r4
   bd6f2:	f7ff fd69 	bl	bd1c8 <rshift>
   bd6f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bd6fa:	3501      	adds	r5, #1
   bd6fc:	42ab      	cmp	r3, r5
   bd6fe:	f6ff aed0 	blt.w	bd4a2 <__gethex+0x20a>
   bd702:	2701      	movs	r7, #1
   bd704:	e7c0      	b.n	bd688 <__gethex+0x3f0>
   bd706:	f016 061f 	ands.w	r6, r6, #31
   bd70a:	d0fa      	beq.n	bd702 <__gethex+0x46a>
   bd70c:	4453      	add	r3, sl
   bd70e:	f1c6 0620 	rsb	r6, r6, #32
   bd712:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bd716:	f000 f9cf 	bl	bdab8 <__hi0bits>
   bd71a:	42b0      	cmp	r0, r6
   bd71c:	dbe7      	blt.n	bd6ee <__gethex+0x456>
   bd71e:	e7f0      	b.n	bd702 <__gethex+0x46a>
   bd720:	000beea9 	.word	0x000beea9

000bd724 <L_shift>:
   bd724:	f1c2 0208 	rsb	r2, r2, #8
   bd728:	0092      	lsls	r2, r2, #2
   bd72a:	b570      	push	{r4, r5, r6, lr}
   bd72c:	f1c2 0620 	rsb	r6, r2, #32
   bd730:	6843      	ldr	r3, [r0, #4]
   bd732:	6804      	ldr	r4, [r0, #0]
   bd734:	fa03 f506 	lsl.w	r5, r3, r6
   bd738:	432c      	orrs	r4, r5
   bd73a:	40d3      	lsrs	r3, r2
   bd73c:	6004      	str	r4, [r0, #0]
   bd73e:	f840 3f04 	str.w	r3, [r0, #4]!
   bd742:	4288      	cmp	r0, r1
   bd744:	d3f4      	bcc.n	bd730 <L_shift+0xc>
   bd746:	bd70      	pop	{r4, r5, r6, pc}

000bd748 <__match>:
   bd748:	b530      	push	{r4, r5, lr}
   bd74a:	6803      	ldr	r3, [r0, #0]
   bd74c:	3301      	adds	r3, #1
   bd74e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bd752:	b914      	cbnz	r4, bd75a <__match+0x12>
   bd754:	6003      	str	r3, [r0, #0]
   bd756:	2001      	movs	r0, #1
   bd758:	bd30      	pop	{r4, r5, pc}
   bd75a:	f813 2b01 	ldrb.w	r2, [r3], #1
   bd75e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bd762:	2d19      	cmp	r5, #25
   bd764:	bf98      	it	ls
   bd766:	3220      	addls	r2, #32
   bd768:	42a2      	cmp	r2, r4
   bd76a:	d0f0      	beq.n	bd74e <__match+0x6>
   bd76c:	2000      	movs	r0, #0
   bd76e:	e7f3      	b.n	bd758 <__match+0x10>

000bd770 <__hexnan>:
   bd770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd774:	680b      	ldr	r3, [r1, #0]
   bd776:	115e      	asrs	r6, r3, #5
   bd778:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bd77c:	f013 031f 	ands.w	r3, r3, #31
   bd780:	b087      	sub	sp, #28
   bd782:	bf18      	it	ne
   bd784:	3604      	addne	r6, #4
   bd786:	2500      	movs	r5, #0
   bd788:	1f37      	subs	r7, r6, #4
   bd78a:	4690      	mov	r8, r2
   bd78c:	6802      	ldr	r2, [r0, #0]
   bd78e:	9301      	str	r3, [sp, #4]
   bd790:	4682      	mov	sl, r0
   bd792:	f846 5c04 	str.w	r5, [r6, #-4]
   bd796:	46b9      	mov	r9, r7
   bd798:	463c      	mov	r4, r7
   bd79a:	9502      	str	r5, [sp, #8]
   bd79c:	46ab      	mov	fp, r5
   bd79e:	7851      	ldrb	r1, [r2, #1]
   bd7a0:	1c53      	adds	r3, r2, #1
   bd7a2:	9303      	str	r3, [sp, #12]
   bd7a4:	b341      	cbz	r1, bd7f8 <__hexnan+0x88>
   bd7a6:	4608      	mov	r0, r1
   bd7a8:	9205      	str	r2, [sp, #20]
   bd7aa:	9104      	str	r1, [sp, #16]
   bd7ac:	f7ff fd5e 	bl	bd26c <__hexdig_fun>
   bd7b0:	2800      	cmp	r0, #0
   bd7b2:	d14f      	bne.n	bd854 <__hexnan+0xe4>
   bd7b4:	9904      	ldr	r1, [sp, #16]
   bd7b6:	9a05      	ldr	r2, [sp, #20]
   bd7b8:	2920      	cmp	r1, #32
   bd7ba:	d818      	bhi.n	bd7ee <__hexnan+0x7e>
   bd7bc:	9b02      	ldr	r3, [sp, #8]
   bd7be:	459b      	cmp	fp, r3
   bd7c0:	dd13      	ble.n	bd7ea <__hexnan+0x7a>
   bd7c2:	454c      	cmp	r4, r9
   bd7c4:	d206      	bcs.n	bd7d4 <__hexnan+0x64>
   bd7c6:	2d07      	cmp	r5, #7
   bd7c8:	dc04      	bgt.n	bd7d4 <__hexnan+0x64>
   bd7ca:	462a      	mov	r2, r5
   bd7cc:	4649      	mov	r1, r9
   bd7ce:	4620      	mov	r0, r4
   bd7d0:	f7ff ffa8 	bl	bd724 <L_shift>
   bd7d4:	4544      	cmp	r4, r8
   bd7d6:	d950      	bls.n	bd87a <__hexnan+0x10a>
   bd7d8:	2300      	movs	r3, #0
   bd7da:	f1a4 0904 	sub.w	r9, r4, #4
   bd7de:	f844 3c04 	str.w	r3, [r4, #-4]
   bd7e2:	f8cd b008 	str.w	fp, [sp, #8]
   bd7e6:	464c      	mov	r4, r9
   bd7e8:	461d      	mov	r5, r3
   bd7ea:	9a03      	ldr	r2, [sp, #12]
   bd7ec:	e7d7      	b.n	bd79e <__hexnan+0x2e>
   bd7ee:	2929      	cmp	r1, #41	; 0x29
   bd7f0:	d156      	bne.n	bd8a0 <__hexnan+0x130>
   bd7f2:	3202      	adds	r2, #2
   bd7f4:	f8ca 2000 	str.w	r2, [sl]
   bd7f8:	f1bb 0f00 	cmp.w	fp, #0
   bd7fc:	d050      	beq.n	bd8a0 <__hexnan+0x130>
   bd7fe:	454c      	cmp	r4, r9
   bd800:	d206      	bcs.n	bd810 <__hexnan+0xa0>
   bd802:	2d07      	cmp	r5, #7
   bd804:	dc04      	bgt.n	bd810 <__hexnan+0xa0>
   bd806:	462a      	mov	r2, r5
   bd808:	4649      	mov	r1, r9
   bd80a:	4620      	mov	r0, r4
   bd80c:	f7ff ff8a 	bl	bd724 <L_shift>
   bd810:	4544      	cmp	r4, r8
   bd812:	d934      	bls.n	bd87e <__hexnan+0x10e>
   bd814:	f1a8 0204 	sub.w	r2, r8, #4
   bd818:	4623      	mov	r3, r4
   bd81a:	f853 1b04 	ldr.w	r1, [r3], #4
   bd81e:	f842 1f04 	str.w	r1, [r2, #4]!
   bd822:	429f      	cmp	r7, r3
   bd824:	d2f9      	bcs.n	bd81a <__hexnan+0xaa>
   bd826:	1b3b      	subs	r3, r7, r4
   bd828:	f023 0303 	bic.w	r3, r3, #3
   bd82c:	3304      	adds	r3, #4
   bd82e:	3401      	adds	r4, #1
   bd830:	3e03      	subs	r6, #3
   bd832:	42b4      	cmp	r4, r6
   bd834:	bf88      	it	hi
   bd836:	2304      	movhi	r3, #4
   bd838:	4443      	add	r3, r8
   bd83a:	2200      	movs	r2, #0
   bd83c:	f843 2b04 	str.w	r2, [r3], #4
   bd840:	429f      	cmp	r7, r3
   bd842:	d2fb      	bcs.n	bd83c <__hexnan+0xcc>
   bd844:	683b      	ldr	r3, [r7, #0]
   bd846:	b91b      	cbnz	r3, bd850 <__hexnan+0xe0>
   bd848:	4547      	cmp	r7, r8
   bd84a:	d127      	bne.n	bd89c <__hexnan+0x12c>
   bd84c:	2301      	movs	r3, #1
   bd84e:	603b      	str	r3, [r7, #0]
   bd850:	2005      	movs	r0, #5
   bd852:	e026      	b.n	bd8a2 <__hexnan+0x132>
   bd854:	3501      	adds	r5, #1
   bd856:	2d08      	cmp	r5, #8
   bd858:	f10b 0b01 	add.w	fp, fp, #1
   bd85c:	dd06      	ble.n	bd86c <__hexnan+0xfc>
   bd85e:	4544      	cmp	r4, r8
   bd860:	d9c3      	bls.n	bd7ea <__hexnan+0x7a>
   bd862:	2300      	movs	r3, #0
   bd864:	f844 3c04 	str.w	r3, [r4, #-4]
   bd868:	2501      	movs	r5, #1
   bd86a:	3c04      	subs	r4, #4
   bd86c:	6822      	ldr	r2, [r4, #0]
   bd86e:	f000 000f 	and.w	r0, r0, #15
   bd872:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bd876:	6022      	str	r2, [r4, #0]
   bd878:	e7b7      	b.n	bd7ea <__hexnan+0x7a>
   bd87a:	2508      	movs	r5, #8
   bd87c:	e7b5      	b.n	bd7ea <__hexnan+0x7a>
   bd87e:	9b01      	ldr	r3, [sp, #4]
   bd880:	2b00      	cmp	r3, #0
   bd882:	d0df      	beq.n	bd844 <__hexnan+0xd4>
   bd884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd888:	f1c3 0320 	rsb	r3, r3, #32
   bd88c:	fa22 f303 	lsr.w	r3, r2, r3
   bd890:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bd894:	401a      	ands	r2, r3
   bd896:	f846 2c04 	str.w	r2, [r6, #-4]
   bd89a:	e7d3      	b.n	bd844 <__hexnan+0xd4>
   bd89c:	3f04      	subs	r7, #4
   bd89e:	e7d1      	b.n	bd844 <__hexnan+0xd4>
   bd8a0:	2004      	movs	r0, #4
   bd8a2:	b007      	add	sp, #28
   bd8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd8a8 <__retarget_lock_acquire_recursive>:
   bd8a8:	4770      	bx	lr

000bd8aa <__retarget_lock_release>:
   bd8aa:	4770      	bx	lr

000bd8ac <__retarget_lock_release_recursive>:
   bd8ac:	4770      	bx	lr

000bd8ae <__ascii_mbtowc>:
   bd8ae:	b082      	sub	sp, #8
   bd8b0:	b901      	cbnz	r1, bd8b4 <__ascii_mbtowc+0x6>
   bd8b2:	a901      	add	r1, sp, #4
   bd8b4:	b142      	cbz	r2, bd8c8 <__ascii_mbtowc+0x1a>
   bd8b6:	b14b      	cbz	r3, bd8cc <__ascii_mbtowc+0x1e>
   bd8b8:	7813      	ldrb	r3, [r2, #0]
   bd8ba:	600b      	str	r3, [r1, #0]
   bd8bc:	7812      	ldrb	r2, [r2, #0]
   bd8be:	1e10      	subs	r0, r2, #0
   bd8c0:	bf18      	it	ne
   bd8c2:	2001      	movne	r0, #1
   bd8c4:	b002      	add	sp, #8
   bd8c6:	4770      	bx	lr
   bd8c8:	4610      	mov	r0, r2
   bd8ca:	e7fb      	b.n	bd8c4 <__ascii_mbtowc+0x16>
   bd8cc:	f06f 0001 	mvn.w	r0, #1
   bd8d0:	e7f8      	b.n	bd8c4 <__ascii_mbtowc+0x16>
	...

000bd8d4 <_Balloc>:
   bd8d4:	b570      	push	{r4, r5, r6, lr}
   bd8d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd8d8:	4604      	mov	r4, r0
   bd8da:	460d      	mov	r5, r1
   bd8dc:	b976      	cbnz	r6, bd8fc <_Balloc+0x28>
   bd8de:	2010      	movs	r0, #16
   bd8e0:	f7fb f8f0 	bl	b8ac4 <malloc>
   bd8e4:	4602      	mov	r2, r0
   bd8e6:	6260      	str	r0, [r4, #36]	; 0x24
   bd8e8:	b920      	cbnz	r0, bd8f4 <_Balloc+0x20>
   bd8ea:	4b18      	ldr	r3, [pc, #96]	; (bd94c <_Balloc+0x78>)
   bd8ec:	4818      	ldr	r0, [pc, #96]	; (bd950 <_Balloc+0x7c>)
   bd8ee:	2166      	movs	r1, #102	; 0x66
   bd8f0:	f7fb f928 	bl	b8b44 <__assert_func>
   bd8f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd8f8:	6006      	str	r6, [r0, #0]
   bd8fa:	60c6      	str	r6, [r0, #12]
   bd8fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bd8fe:	68f3      	ldr	r3, [r6, #12]
   bd900:	b183      	cbz	r3, bd924 <_Balloc+0x50>
   bd902:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd904:	68db      	ldr	r3, [r3, #12]
   bd906:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bd90a:	b9b8      	cbnz	r0, bd93c <_Balloc+0x68>
   bd90c:	2101      	movs	r1, #1
   bd90e:	fa01 f605 	lsl.w	r6, r1, r5
   bd912:	1d72      	adds	r2, r6, #5
   bd914:	0092      	lsls	r2, r2, #2
   bd916:	4620      	mov	r0, r4
   bd918:	f000 fc9d 	bl	be256 <_calloc_r>
   bd91c:	b160      	cbz	r0, bd938 <_Balloc+0x64>
   bd91e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bd922:	e00e      	b.n	bd942 <_Balloc+0x6e>
   bd924:	2221      	movs	r2, #33	; 0x21
   bd926:	2104      	movs	r1, #4
   bd928:	4620      	mov	r0, r4
   bd92a:	f000 fc94 	bl	be256 <_calloc_r>
   bd92e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd930:	60f0      	str	r0, [r6, #12]
   bd932:	68db      	ldr	r3, [r3, #12]
   bd934:	2b00      	cmp	r3, #0
   bd936:	d1e4      	bne.n	bd902 <_Balloc+0x2e>
   bd938:	2000      	movs	r0, #0
   bd93a:	bd70      	pop	{r4, r5, r6, pc}
   bd93c:	6802      	ldr	r2, [r0, #0]
   bd93e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bd942:	2300      	movs	r3, #0
   bd944:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bd948:	e7f7      	b.n	bd93a <_Balloc+0x66>
   bd94a:	bf00      	nop
   bd94c:	000becd9 	.word	0x000becd9
   bd950:	000bef2e 	.word	0x000bef2e

000bd954 <_Bfree>:
   bd954:	b570      	push	{r4, r5, r6, lr}
   bd956:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd958:	4605      	mov	r5, r0
   bd95a:	460c      	mov	r4, r1
   bd95c:	b976      	cbnz	r6, bd97c <_Bfree+0x28>
   bd95e:	2010      	movs	r0, #16
   bd960:	f7fb f8b0 	bl	b8ac4 <malloc>
   bd964:	4602      	mov	r2, r0
   bd966:	6268      	str	r0, [r5, #36]	; 0x24
   bd968:	b920      	cbnz	r0, bd974 <_Bfree+0x20>
   bd96a:	4b09      	ldr	r3, [pc, #36]	; (bd990 <_Bfree+0x3c>)
   bd96c:	4809      	ldr	r0, [pc, #36]	; (bd994 <_Bfree+0x40>)
   bd96e:	218a      	movs	r1, #138	; 0x8a
   bd970:	f7fb f8e8 	bl	b8b44 <__assert_func>
   bd974:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd978:	6006      	str	r6, [r0, #0]
   bd97a:	60c6      	str	r6, [r0, #12]
   bd97c:	b13c      	cbz	r4, bd98e <_Bfree+0x3a>
   bd97e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bd980:	6862      	ldr	r2, [r4, #4]
   bd982:	68db      	ldr	r3, [r3, #12]
   bd984:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bd988:	6021      	str	r1, [r4, #0]
   bd98a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bd98e:	bd70      	pop	{r4, r5, r6, pc}
   bd990:	000becd9 	.word	0x000becd9
   bd994:	000bef2e 	.word	0x000bef2e

000bd998 <__multadd>:
   bd998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd99c:	690d      	ldr	r5, [r1, #16]
   bd99e:	4607      	mov	r7, r0
   bd9a0:	460c      	mov	r4, r1
   bd9a2:	461e      	mov	r6, r3
   bd9a4:	f101 0c14 	add.w	ip, r1, #20
   bd9a8:	2000      	movs	r0, #0
   bd9aa:	f8dc 3000 	ldr.w	r3, [ip]
   bd9ae:	b299      	uxth	r1, r3
   bd9b0:	fb02 6101 	mla	r1, r2, r1, r6
   bd9b4:	0c1e      	lsrs	r6, r3, #16
   bd9b6:	0c0b      	lsrs	r3, r1, #16
   bd9b8:	fb02 3306 	mla	r3, r2, r6, r3
   bd9bc:	b289      	uxth	r1, r1
   bd9be:	3001      	adds	r0, #1
   bd9c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bd9c4:	4285      	cmp	r5, r0
   bd9c6:	f84c 1b04 	str.w	r1, [ip], #4
   bd9ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bd9ce:	dcec      	bgt.n	bd9aa <__multadd+0x12>
   bd9d0:	b30e      	cbz	r6, bda16 <__multadd+0x7e>
   bd9d2:	68a3      	ldr	r3, [r4, #8]
   bd9d4:	42ab      	cmp	r3, r5
   bd9d6:	dc19      	bgt.n	bda0c <__multadd+0x74>
   bd9d8:	6861      	ldr	r1, [r4, #4]
   bd9da:	4638      	mov	r0, r7
   bd9dc:	3101      	adds	r1, #1
   bd9de:	f7ff ff79 	bl	bd8d4 <_Balloc>
   bd9e2:	4680      	mov	r8, r0
   bd9e4:	b928      	cbnz	r0, bd9f2 <__multadd+0x5a>
   bd9e6:	4602      	mov	r2, r0
   bd9e8:	4b0c      	ldr	r3, [pc, #48]	; (bda1c <__multadd+0x84>)
   bd9ea:	480d      	ldr	r0, [pc, #52]	; (bda20 <__multadd+0x88>)
   bd9ec:	21b5      	movs	r1, #181	; 0xb5
   bd9ee:	f7fb f8a9 	bl	b8b44 <__assert_func>
   bd9f2:	6922      	ldr	r2, [r4, #16]
   bd9f4:	3202      	adds	r2, #2
   bd9f6:	f104 010c 	add.w	r1, r4, #12
   bd9fa:	0092      	lsls	r2, r2, #2
   bd9fc:	300c      	adds	r0, #12
   bd9fe:	f7fe fbc7 	bl	bc190 <memcpy>
   bda02:	4621      	mov	r1, r4
   bda04:	4638      	mov	r0, r7
   bda06:	f7ff ffa5 	bl	bd954 <_Bfree>
   bda0a:	4644      	mov	r4, r8
   bda0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bda10:	3501      	adds	r5, #1
   bda12:	615e      	str	r6, [r3, #20]
   bda14:	6125      	str	r5, [r4, #16]
   bda16:	4620      	mov	r0, r4
   bda18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bda1c:	000beea9 	.word	0x000beea9
   bda20:	000bef2e 	.word	0x000bef2e

000bda24 <__s2b>:
   bda24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bda28:	460c      	mov	r4, r1
   bda2a:	4615      	mov	r5, r2
   bda2c:	461f      	mov	r7, r3
   bda2e:	2209      	movs	r2, #9
   bda30:	3308      	adds	r3, #8
   bda32:	4606      	mov	r6, r0
   bda34:	fb93 f3f2 	sdiv	r3, r3, r2
   bda38:	2100      	movs	r1, #0
   bda3a:	2201      	movs	r2, #1
   bda3c:	429a      	cmp	r2, r3
   bda3e:	db09      	blt.n	bda54 <__s2b+0x30>
   bda40:	4630      	mov	r0, r6
   bda42:	f7ff ff47 	bl	bd8d4 <_Balloc>
   bda46:	b940      	cbnz	r0, bda5a <__s2b+0x36>
   bda48:	4602      	mov	r2, r0
   bda4a:	4b19      	ldr	r3, [pc, #100]	; (bdab0 <__s2b+0x8c>)
   bda4c:	4819      	ldr	r0, [pc, #100]	; (bdab4 <__s2b+0x90>)
   bda4e:	21ce      	movs	r1, #206	; 0xce
   bda50:	f7fb f878 	bl	b8b44 <__assert_func>
   bda54:	0052      	lsls	r2, r2, #1
   bda56:	3101      	adds	r1, #1
   bda58:	e7f0      	b.n	bda3c <__s2b+0x18>
   bda5a:	9b08      	ldr	r3, [sp, #32]
   bda5c:	6143      	str	r3, [r0, #20]
   bda5e:	2d09      	cmp	r5, #9
   bda60:	f04f 0301 	mov.w	r3, #1
   bda64:	6103      	str	r3, [r0, #16]
   bda66:	dd16      	ble.n	bda96 <__s2b+0x72>
   bda68:	f104 0909 	add.w	r9, r4, #9
   bda6c:	46c8      	mov	r8, r9
   bda6e:	442c      	add	r4, r5
   bda70:	f818 3b01 	ldrb.w	r3, [r8], #1
   bda74:	4601      	mov	r1, r0
   bda76:	3b30      	subs	r3, #48	; 0x30
   bda78:	220a      	movs	r2, #10
   bda7a:	4630      	mov	r0, r6
   bda7c:	f7ff ff8c 	bl	bd998 <__multadd>
   bda80:	45a0      	cmp	r8, r4
   bda82:	d1f5      	bne.n	bda70 <__s2b+0x4c>
   bda84:	f1a5 0408 	sub.w	r4, r5, #8
   bda88:	444c      	add	r4, r9
   bda8a:	1b2d      	subs	r5, r5, r4
   bda8c:	1963      	adds	r3, r4, r5
   bda8e:	42bb      	cmp	r3, r7
   bda90:	db04      	blt.n	bda9c <__s2b+0x78>
   bda92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bda96:	340a      	adds	r4, #10
   bda98:	2509      	movs	r5, #9
   bda9a:	e7f6      	b.n	bda8a <__s2b+0x66>
   bda9c:	f814 3b01 	ldrb.w	r3, [r4], #1
   bdaa0:	4601      	mov	r1, r0
   bdaa2:	3b30      	subs	r3, #48	; 0x30
   bdaa4:	220a      	movs	r2, #10
   bdaa6:	4630      	mov	r0, r6
   bdaa8:	f7ff ff76 	bl	bd998 <__multadd>
   bdaac:	e7ee      	b.n	bda8c <__s2b+0x68>
   bdaae:	bf00      	nop
   bdab0:	000beea9 	.word	0x000beea9
   bdab4:	000bef2e 	.word	0x000bef2e

000bdab8 <__hi0bits>:
   bdab8:	0c03      	lsrs	r3, r0, #16
   bdaba:	041b      	lsls	r3, r3, #16
   bdabc:	b9d3      	cbnz	r3, bdaf4 <__hi0bits+0x3c>
   bdabe:	0400      	lsls	r0, r0, #16
   bdac0:	2310      	movs	r3, #16
   bdac2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bdac6:	bf04      	itt	eq
   bdac8:	0200      	lsleq	r0, r0, #8
   bdaca:	3308      	addeq	r3, #8
   bdacc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bdad0:	bf04      	itt	eq
   bdad2:	0100      	lsleq	r0, r0, #4
   bdad4:	3304      	addeq	r3, #4
   bdad6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bdada:	bf04      	itt	eq
   bdadc:	0080      	lsleq	r0, r0, #2
   bdade:	3302      	addeq	r3, #2
   bdae0:	2800      	cmp	r0, #0
   bdae2:	db05      	blt.n	bdaf0 <__hi0bits+0x38>
   bdae4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bdae8:	f103 0301 	add.w	r3, r3, #1
   bdaec:	bf08      	it	eq
   bdaee:	2320      	moveq	r3, #32
   bdaf0:	4618      	mov	r0, r3
   bdaf2:	4770      	bx	lr
   bdaf4:	2300      	movs	r3, #0
   bdaf6:	e7e4      	b.n	bdac2 <__hi0bits+0xa>

000bdaf8 <__lo0bits>:
   bdaf8:	6803      	ldr	r3, [r0, #0]
   bdafa:	f013 0207 	ands.w	r2, r3, #7
   bdafe:	4601      	mov	r1, r0
   bdb00:	d00b      	beq.n	bdb1a <__lo0bits+0x22>
   bdb02:	07da      	lsls	r2, r3, #31
   bdb04:	d423      	bmi.n	bdb4e <__lo0bits+0x56>
   bdb06:	0798      	lsls	r0, r3, #30
   bdb08:	bf49      	itett	mi
   bdb0a:	085b      	lsrmi	r3, r3, #1
   bdb0c:	089b      	lsrpl	r3, r3, #2
   bdb0e:	2001      	movmi	r0, #1
   bdb10:	600b      	strmi	r3, [r1, #0]
   bdb12:	bf5c      	itt	pl
   bdb14:	600b      	strpl	r3, [r1, #0]
   bdb16:	2002      	movpl	r0, #2
   bdb18:	4770      	bx	lr
   bdb1a:	b298      	uxth	r0, r3
   bdb1c:	b9a8      	cbnz	r0, bdb4a <__lo0bits+0x52>
   bdb1e:	0c1b      	lsrs	r3, r3, #16
   bdb20:	2010      	movs	r0, #16
   bdb22:	b2da      	uxtb	r2, r3
   bdb24:	b90a      	cbnz	r2, bdb2a <__lo0bits+0x32>
   bdb26:	3008      	adds	r0, #8
   bdb28:	0a1b      	lsrs	r3, r3, #8
   bdb2a:	071a      	lsls	r2, r3, #28
   bdb2c:	bf04      	itt	eq
   bdb2e:	091b      	lsreq	r3, r3, #4
   bdb30:	3004      	addeq	r0, #4
   bdb32:	079a      	lsls	r2, r3, #30
   bdb34:	bf04      	itt	eq
   bdb36:	089b      	lsreq	r3, r3, #2
   bdb38:	3002      	addeq	r0, #2
   bdb3a:	07da      	lsls	r2, r3, #31
   bdb3c:	d403      	bmi.n	bdb46 <__lo0bits+0x4e>
   bdb3e:	085b      	lsrs	r3, r3, #1
   bdb40:	f100 0001 	add.w	r0, r0, #1
   bdb44:	d005      	beq.n	bdb52 <__lo0bits+0x5a>
   bdb46:	600b      	str	r3, [r1, #0]
   bdb48:	4770      	bx	lr
   bdb4a:	4610      	mov	r0, r2
   bdb4c:	e7e9      	b.n	bdb22 <__lo0bits+0x2a>
   bdb4e:	2000      	movs	r0, #0
   bdb50:	4770      	bx	lr
   bdb52:	2020      	movs	r0, #32
   bdb54:	4770      	bx	lr
	...

000bdb58 <__i2b>:
   bdb58:	b510      	push	{r4, lr}
   bdb5a:	460c      	mov	r4, r1
   bdb5c:	2101      	movs	r1, #1
   bdb5e:	f7ff feb9 	bl	bd8d4 <_Balloc>
   bdb62:	4602      	mov	r2, r0
   bdb64:	b928      	cbnz	r0, bdb72 <__i2b+0x1a>
   bdb66:	4b05      	ldr	r3, [pc, #20]	; (bdb7c <__i2b+0x24>)
   bdb68:	4805      	ldr	r0, [pc, #20]	; (bdb80 <__i2b+0x28>)
   bdb6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bdb6e:	f7fa ffe9 	bl	b8b44 <__assert_func>
   bdb72:	2301      	movs	r3, #1
   bdb74:	6144      	str	r4, [r0, #20]
   bdb76:	6103      	str	r3, [r0, #16]
   bdb78:	bd10      	pop	{r4, pc}
   bdb7a:	bf00      	nop
   bdb7c:	000beea9 	.word	0x000beea9
   bdb80:	000bef2e 	.word	0x000bef2e

000bdb84 <__multiply>:
   bdb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdb88:	4691      	mov	r9, r2
   bdb8a:	690a      	ldr	r2, [r1, #16]
   bdb8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bdb90:	429a      	cmp	r2, r3
   bdb92:	bfb8      	it	lt
   bdb94:	460b      	movlt	r3, r1
   bdb96:	460c      	mov	r4, r1
   bdb98:	bfbc      	itt	lt
   bdb9a:	464c      	movlt	r4, r9
   bdb9c:	4699      	movlt	r9, r3
   bdb9e:	6927      	ldr	r7, [r4, #16]
   bdba0:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bdba4:	68a3      	ldr	r3, [r4, #8]
   bdba6:	6861      	ldr	r1, [r4, #4]
   bdba8:	eb07 060a 	add.w	r6, r7, sl
   bdbac:	42b3      	cmp	r3, r6
   bdbae:	b085      	sub	sp, #20
   bdbb0:	bfb8      	it	lt
   bdbb2:	3101      	addlt	r1, #1
   bdbb4:	f7ff fe8e 	bl	bd8d4 <_Balloc>
   bdbb8:	b930      	cbnz	r0, bdbc8 <__multiply+0x44>
   bdbba:	4602      	mov	r2, r0
   bdbbc:	4b44      	ldr	r3, [pc, #272]	; (bdcd0 <__multiply+0x14c>)
   bdbbe:	4845      	ldr	r0, [pc, #276]	; (bdcd4 <__multiply+0x150>)
   bdbc0:	f240 115d 	movw	r1, #349	; 0x15d
   bdbc4:	f7fa ffbe 	bl	b8b44 <__assert_func>
   bdbc8:	f100 0514 	add.w	r5, r0, #20
   bdbcc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bdbd0:	462b      	mov	r3, r5
   bdbd2:	2200      	movs	r2, #0
   bdbd4:	4543      	cmp	r3, r8
   bdbd6:	d321      	bcc.n	bdc1c <__multiply+0x98>
   bdbd8:	f104 0314 	add.w	r3, r4, #20
   bdbdc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bdbe0:	f109 0314 	add.w	r3, r9, #20
   bdbe4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bdbe8:	9202      	str	r2, [sp, #8]
   bdbea:	1b3a      	subs	r2, r7, r4
   bdbec:	3a15      	subs	r2, #21
   bdbee:	f022 0203 	bic.w	r2, r2, #3
   bdbf2:	3204      	adds	r2, #4
   bdbf4:	f104 0115 	add.w	r1, r4, #21
   bdbf8:	428f      	cmp	r7, r1
   bdbfa:	bf38      	it	cc
   bdbfc:	2204      	movcc	r2, #4
   bdbfe:	9201      	str	r2, [sp, #4]
   bdc00:	9a02      	ldr	r2, [sp, #8]
   bdc02:	9303      	str	r3, [sp, #12]
   bdc04:	429a      	cmp	r2, r3
   bdc06:	d80c      	bhi.n	bdc22 <__multiply+0x9e>
   bdc08:	2e00      	cmp	r6, #0
   bdc0a:	dd03      	ble.n	bdc14 <__multiply+0x90>
   bdc0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bdc10:	2b00      	cmp	r3, #0
   bdc12:	d05a      	beq.n	bdcca <__multiply+0x146>
   bdc14:	6106      	str	r6, [r0, #16]
   bdc16:	b005      	add	sp, #20
   bdc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bdc1c:	f843 2b04 	str.w	r2, [r3], #4
   bdc20:	e7d8      	b.n	bdbd4 <__multiply+0x50>
   bdc22:	f8b3 a000 	ldrh.w	sl, [r3]
   bdc26:	f1ba 0f00 	cmp.w	sl, #0
   bdc2a:	d024      	beq.n	bdc76 <__multiply+0xf2>
   bdc2c:	f104 0e14 	add.w	lr, r4, #20
   bdc30:	46a9      	mov	r9, r5
   bdc32:	f04f 0c00 	mov.w	ip, #0
   bdc36:	f85e 2b04 	ldr.w	r2, [lr], #4
   bdc3a:	f8d9 1000 	ldr.w	r1, [r9]
   bdc3e:	fa1f fb82 	uxth.w	fp, r2
   bdc42:	b289      	uxth	r1, r1
   bdc44:	fb0a 110b 	mla	r1, sl, fp, r1
   bdc48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bdc4c:	f8d9 2000 	ldr.w	r2, [r9]
   bdc50:	4461      	add	r1, ip
   bdc52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bdc56:	fb0a c20b 	mla	r2, sl, fp, ip
   bdc5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bdc5e:	b289      	uxth	r1, r1
   bdc60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bdc64:	4577      	cmp	r7, lr
   bdc66:	f849 1b04 	str.w	r1, [r9], #4
   bdc6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bdc6e:	d8e2      	bhi.n	bdc36 <__multiply+0xb2>
   bdc70:	9a01      	ldr	r2, [sp, #4]
   bdc72:	f845 c002 	str.w	ip, [r5, r2]
   bdc76:	9a03      	ldr	r2, [sp, #12]
   bdc78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bdc7c:	3304      	adds	r3, #4
   bdc7e:	f1b9 0f00 	cmp.w	r9, #0
   bdc82:	d020      	beq.n	bdcc6 <__multiply+0x142>
   bdc84:	6829      	ldr	r1, [r5, #0]
   bdc86:	f104 0c14 	add.w	ip, r4, #20
   bdc8a:	46ae      	mov	lr, r5
   bdc8c:	f04f 0a00 	mov.w	sl, #0
   bdc90:	f8bc b000 	ldrh.w	fp, [ip]
   bdc94:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bdc98:	fb09 220b 	mla	r2, r9, fp, r2
   bdc9c:	4492      	add	sl, r2
   bdc9e:	b289      	uxth	r1, r1
   bdca0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bdca4:	f84e 1b04 	str.w	r1, [lr], #4
   bdca8:	f85c 2b04 	ldr.w	r2, [ip], #4
   bdcac:	f8be 1000 	ldrh.w	r1, [lr]
   bdcb0:	0c12      	lsrs	r2, r2, #16
   bdcb2:	fb09 1102 	mla	r1, r9, r2, r1
   bdcb6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bdcba:	4567      	cmp	r7, ip
   bdcbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bdcc0:	d8e6      	bhi.n	bdc90 <__multiply+0x10c>
   bdcc2:	9a01      	ldr	r2, [sp, #4]
   bdcc4:	50a9      	str	r1, [r5, r2]
   bdcc6:	3504      	adds	r5, #4
   bdcc8:	e79a      	b.n	bdc00 <__multiply+0x7c>
   bdcca:	3e01      	subs	r6, #1
   bdccc:	e79c      	b.n	bdc08 <__multiply+0x84>
   bdcce:	bf00      	nop
   bdcd0:	000beea9 	.word	0x000beea9
   bdcd4:	000bef2e 	.word	0x000bef2e

000bdcd8 <__pow5mult>:
   bdcd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bdcdc:	4615      	mov	r5, r2
   bdcde:	f012 0203 	ands.w	r2, r2, #3
   bdce2:	4606      	mov	r6, r0
   bdce4:	460f      	mov	r7, r1
   bdce6:	d007      	beq.n	bdcf8 <__pow5mult+0x20>
   bdce8:	4c25      	ldr	r4, [pc, #148]	; (bdd80 <__pow5mult+0xa8>)
   bdcea:	3a01      	subs	r2, #1
   bdcec:	2300      	movs	r3, #0
   bdcee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bdcf2:	f7ff fe51 	bl	bd998 <__multadd>
   bdcf6:	4607      	mov	r7, r0
   bdcf8:	10ad      	asrs	r5, r5, #2
   bdcfa:	d03d      	beq.n	bdd78 <__pow5mult+0xa0>
   bdcfc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bdcfe:	b97c      	cbnz	r4, bdd20 <__pow5mult+0x48>
   bdd00:	2010      	movs	r0, #16
   bdd02:	f7fa fedf 	bl	b8ac4 <malloc>
   bdd06:	4602      	mov	r2, r0
   bdd08:	6270      	str	r0, [r6, #36]	; 0x24
   bdd0a:	b928      	cbnz	r0, bdd18 <__pow5mult+0x40>
   bdd0c:	4b1d      	ldr	r3, [pc, #116]	; (bdd84 <__pow5mult+0xac>)
   bdd0e:	481e      	ldr	r0, [pc, #120]	; (bdd88 <__pow5mult+0xb0>)
   bdd10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bdd14:	f7fa ff16 	bl	b8b44 <__assert_func>
   bdd18:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bdd1c:	6004      	str	r4, [r0, #0]
   bdd1e:	60c4      	str	r4, [r0, #12]
   bdd20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bdd24:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bdd28:	b94c      	cbnz	r4, bdd3e <__pow5mult+0x66>
   bdd2a:	f240 2171 	movw	r1, #625	; 0x271
   bdd2e:	4630      	mov	r0, r6
   bdd30:	f7ff ff12 	bl	bdb58 <__i2b>
   bdd34:	2300      	movs	r3, #0
   bdd36:	f8c8 0008 	str.w	r0, [r8, #8]
   bdd3a:	4604      	mov	r4, r0
   bdd3c:	6003      	str	r3, [r0, #0]
   bdd3e:	f04f 0900 	mov.w	r9, #0
   bdd42:	07eb      	lsls	r3, r5, #31
   bdd44:	d50a      	bpl.n	bdd5c <__pow5mult+0x84>
   bdd46:	4639      	mov	r1, r7
   bdd48:	4622      	mov	r2, r4
   bdd4a:	4630      	mov	r0, r6
   bdd4c:	f7ff ff1a 	bl	bdb84 <__multiply>
   bdd50:	4639      	mov	r1, r7
   bdd52:	4680      	mov	r8, r0
   bdd54:	4630      	mov	r0, r6
   bdd56:	f7ff fdfd 	bl	bd954 <_Bfree>
   bdd5a:	4647      	mov	r7, r8
   bdd5c:	106d      	asrs	r5, r5, #1
   bdd5e:	d00b      	beq.n	bdd78 <__pow5mult+0xa0>
   bdd60:	6820      	ldr	r0, [r4, #0]
   bdd62:	b938      	cbnz	r0, bdd74 <__pow5mult+0x9c>
   bdd64:	4622      	mov	r2, r4
   bdd66:	4621      	mov	r1, r4
   bdd68:	4630      	mov	r0, r6
   bdd6a:	f7ff ff0b 	bl	bdb84 <__multiply>
   bdd6e:	6020      	str	r0, [r4, #0]
   bdd70:	f8c0 9000 	str.w	r9, [r0]
   bdd74:	4604      	mov	r4, r0
   bdd76:	e7e4      	b.n	bdd42 <__pow5mult+0x6a>
   bdd78:	4638      	mov	r0, r7
   bdd7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bdd7e:	bf00      	nop
   bdd80:	000bf078 	.word	0x000bf078
   bdd84:	000becd9 	.word	0x000becd9
   bdd88:	000bef2e 	.word	0x000bef2e

000bdd8c <__lshift>:
   bdd8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bdd90:	460c      	mov	r4, r1
   bdd92:	6849      	ldr	r1, [r1, #4]
   bdd94:	6923      	ldr	r3, [r4, #16]
   bdd96:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bdd9a:	68a3      	ldr	r3, [r4, #8]
   bdd9c:	4607      	mov	r7, r0
   bdd9e:	4691      	mov	r9, r2
   bdda0:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bdda4:	f108 0601 	add.w	r6, r8, #1
   bdda8:	42b3      	cmp	r3, r6
   bddaa:	db0b      	blt.n	bddc4 <__lshift+0x38>
   bddac:	4638      	mov	r0, r7
   bddae:	f7ff fd91 	bl	bd8d4 <_Balloc>
   bddb2:	4605      	mov	r5, r0
   bddb4:	b948      	cbnz	r0, bddca <__lshift+0x3e>
   bddb6:	4602      	mov	r2, r0
   bddb8:	4b2a      	ldr	r3, [pc, #168]	; (bde64 <__lshift+0xd8>)
   bddba:	482b      	ldr	r0, [pc, #172]	; (bde68 <__lshift+0xdc>)
   bddbc:	f240 11d9 	movw	r1, #473	; 0x1d9
   bddc0:	f7fa fec0 	bl	b8b44 <__assert_func>
   bddc4:	3101      	adds	r1, #1
   bddc6:	005b      	lsls	r3, r3, #1
   bddc8:	e7ee      	b.n	bdda8 <__lshift+0x1c>
   bddca:	2300      	movs	r3, #0
   bddcc:	f100 0114 	add.w	r1, r0, #20
   bddd0:	f100 0210 	add.w	r2, r0, #16
   bddd4:	4618      	mov	r0, r3
   bddd6:	4553      	cmp	r3, sl
   bddd8:	db37      	blt.n	bde4a <__lshift+0xbe>
   bddda:	6920      	ldr	r0, [r4, #16]
   bdddc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bdde0:	f104 0314 	add.w	r3, r4, #20
   bdde4:	f019 091f 	ands.w	r9, r9, #31
   bdde8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bddec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bddf0:	d02f      	beq.n	bde52 <__lshift+0xc6>
   bddf2:	f1c9 0e20 	rsb	lr, r9, #32
   bddf6:	468a      	mov	sl, r1
   bddf8:	f04f 0c00 	mov.w	ip, #0
   bddfc:	681a      	ldr	r2, [r3, #0]
   bddfe:	fa02 f209 	lsl.w	r2, r2, r9
   bde02:	ea42 020c 	orr.w	r2, r2, ip
   bde06:	f84a 2b04 	str.w	r2, [sl], #4
   bde0a:	f853 2b04 	ldr.w	r2, [r3], #4
   bde0e:	4298      	cmp	r0, r3
   bde10:	fa22 fc0e 	lsr.w	ip, r2, lr
   bde14:	d8f2      	bhi.n	bddfc <__lshift+0x70>
   bde16:	1b03      	subs	r3, r0, r4
   bde18:	3b15      	subs	r3, #21
   bde1a:	f023 0303 	bic.w	r3, r3, #3
   bde1e:	3304      	adds	r3, #4
   bde20:	f104 0215 	add.w	r2, r4, #21
   bde24:	4290      	cmp	r0, r2
   bde26:	bf38      	it	cc
   bde28:	2304      	movcc	r3, #4
   bde2a:	f841 c003 	str.w	ip, [r1, r3]
   bde2e:	f1bc 0f00 	cmp.w	ip, #0
   bde32:	d001      	beq.n	bde38 <__lshift+0xac>
   bde34:	f108 0602 	add.w	r6, r8, #2
   bde38:	3e01      	subs	r6, #1
   bde3a:	4638      	mov	r0, r7
   bde3c:	612e      	str	r6, [r5, #16]
   bde3e:	4621      	mov	r1, r4
   bde40:	f7ff fd88 	bl	bd954 <_Bfree>
   bde44:	4628      	mov	r0, r5
   bde46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bde4a:	f842 0f04 	str.w	r0, [r2, #4]!
   bde4e:	3301      	adds	r3, #1
   bde50:	e7c1      	b.n	bddd6 <__lshift+0x4a>
   bde52:	3904      	subs	r1, #4
   bde54:	f853 2b04 	ldr.w	r2, [r3], #4
   bde58:	f841 2f04 	str.w	r2, [r1, #4]!
   bde5c:	4298      	cmp	r0, r3
   bde5e:	d8f9      	bhi.n	bde54 <__lshift+0xc8>
   bde60:	e7ea      	b.n	bde38 <__lshift+0xac>
   bde62:	bf00      	nop
   bde64:	000beea9 	.word	0x000beea9
   bde68:	000bef2e 	.word	0x000bef2e

000bde6c <__mcmp>:
   bde6c:	b530      	push	{r4, r5, lr}
   bde6e:	6902      	ldr	r2, [r0, #16]
   bde70:	690c      	ldr	r4, [r1, #16]
   bde72:	1b12      	subs	r2, r2, r4
   bde74:	d10e      	bne.n	bde94 <__mcmp+0x28>
   bde76:	f100 0314 	add.w	r3, r0, #20
   bde7a:	3114      	adds	r1, #20
   bde7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bde80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bde84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bde88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bde8c:	42a5      	cmp	r5, r4
   bde8e:	d003      	beq.n	bde98 <__mcmp+0x2c>
   bde90:	d305      	bcc.n	bde9e <__mcmp+0x32>
   bde92:	2201      	movs	r2, #1
   bde94:	4610      	mov	r0, r2
   bde96:	bd30      	pop	{r4, r5, pc}
   bde98:	4283      	cmp	r3, r0
   bde9a:	d3f3      	bcc.n	bde84 <__mcmp+0x18>
   bde9c:	e7fa      	b.n	bde94 <__mcmp+0x28>
   bde9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bdea2:	e7f7      	b.n	bde94 <__mcmp+0x28>

000bdea4 <__mdiff>:
   bdea4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdea8:	460c      	mov	r4, r1
   bdeaa:	4606      	mov	r6, r0
   bdeac:	4611      	mov	r1, r2
   bdeae:	4620      	mov	r0, r4
   bdeb0:	4690      	mov	r8, r2
   bdeb2:	f7ff ffdb 	bl	bde6c <__mcmp>
   bdeb6:	1e05      	subs	r5, r0, #0
   bdeb8:	d110      	bne.n	bdedc <__mdiff+0x38>
   bdeba:	4629      	mov	r1, r5
   bdebc:	4630      	mov	r0, r6
   bdebe:	f7ff fd09 	bl	bd8d4 <_Balloc>
   bdec2:	b930      	cbnz	r0, bded2 <__mdiff+0x2e>
   bdec4:	4b3a      	ldr	r3, [pc, #232]	; (bdfb0 <__mdiff+0x10c>)
   bdec6:	4602      	mov	r2, r0
   bdec8:	f240 2132 	movw	r1, #562	; 0x232
   bdecc:	4839      	ldr	r0, [pc, #228]	; (bdfb4 <__mdiff+0x110>)
   bdece:	f7fa fe39 	bl	b8b44 <__assert_func>
   bded2:	2301      	movs	r3, #1
   bded4:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bded8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bdedc:	bfa4      	itt	ge
   bdede:	4643      	movge	r3, r8
   bdee0:	46a0      	movge	r8, r4
   bdee2:	4630      	mov	r0, r6
   bdee4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bdee8:	bfa6      	itte	ge
   bdeea:	461c      	movge	r4, r3
   bdeec:	2500      	movge	r5, #0
   bdeee:	2501      	movlt	r5, #1
   bdef0:	f7ff fcf0 	bl	bd8d4 <_Balloc>
   bdef4:	b920      	cbnz	r0, bdf00 <__mdiff+0x5c>
   bdef6:	4b2e      	ldr	r3, [pc, #184]	; (bdfb0 <__mdiff+0x10c>)
   bdef8:	4602      	mov	r2, r0
   bdefa:	f44f 7110 	mov.w	r1, #576	; 0x240
   bdefe:	e7e5      	b.n	bdecc <__mdiff+0x28>
   bdf00:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bdf04:	6926      	ldr	r6, [r4, #16]
   bdf06:	60c5      	str	r5, [r0, #12]
   bdf08:	f104 0914 	add.w	r9, r4, #20
   bdf0c:	f108 0514 	add.w	r5, r8, #20
   bdf10:	f100 0e14 	add.w	lr, r0, #20
   bdf14:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bdf18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bdf1c:	f108 0210 	add.w	r2, r8, #16
   bdf20:	46f2      	mov	sl, lr
   bdf22:	2100      	movs	r1, #0
   bdf24:	f859 3b04 	ldr.w	r3, [r9], #4
   bdf28:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bdf2c:	fa1f f883 	uxth.w	r8, r3
   bdf30:	fa11 f18b 	uxtah	r1, r1, fp
   bdf34:	0c1b      	lsrs	r3, r3, #16
   bdf36:	eba1 0808 	sub.w	r8, r1, r8
   bdf3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bdf3e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bdf42:	fa1f f888 	uxth.w	r8, r8
   bdf46:	1419      	asrs	r1, r3, #16
   bdf48:	454e      	cmp	r6, r9
   bdf4a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bdf4e:	f84a 3b04 	str.w	r3, [sl], #4
   bdf52:	d8e7      	bhi.n	bdf24 <__mdiff+0x80>
   bdf54:	1b33      	subs	r3, r6, r4
   bdf56:	3b15      	subs	r3, #21
   bdf58:	f023 0303 	bic.w	r3, r3, #3
   bdf5c:	3304      	adds	r3, #4
   bdf5e:	3415      	adds	r4, #21
   bdf60:	42a6      	cmp	r6, r4
   bdf62:	bf38      	it	cc
   bdf64:	2304      	movcc	r3, #4
   bdf66:	441d      	add	r5, r3
   bdf68:	4473      	add	r3, lr
   bdf6a:	469e      	mov	lr, r3
   bdf6c:	462e      	mov	r6, r5
   bdf6e:	4566      	cmp	r6, ip
   bdf70:	d30e      	bcc.n	bdf90 <__mdiff+0xec>
   bdf72:	f10c 0203 	add.w	r2, ip, #3
   bdf76:	1b52      	subs	r2, r2, r5
   bdf78:	f022 0203 	bic.w	r2, r2, #3
   bdf7c:	3d03      	subs	r5, #3
   bdf7e:	45ac      	cmp	ip, r5
   bdf80:	bf38      	it	cc
   bdf82:	2200      	movcc	r2, #0
   bdf84:	441a      	add	r2, r3
   bdf86:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bdf8a:	b17b      	cbz	r3, bdfac <__mdiff+0x108>
   bdf8c:	6107      	str	r7, [r0, #16]
   bdf8e:	e7a3      	b.n	bded8 <__mdiff+0x34>
   bdf90:	f856 8b04 	ldr.w	r8, [r6], #4
   bdf94:	fa11 f288 	uxtah	r2, r1, r8
   bdf98:	1414      	asrs	r4, r2, #16
   bdf9a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bdf9e:	b292      	uxth	r2, r2
   bdfa0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bdfa4:	f84e 2b04 	str.w	r2, [lr], #4
   bdfa8:	1421      	asrs	r1, r4, #16
   bdfaa:	e7e0      	b.n	bdf6e <__mdiff+0xca>
   bdfac:	3f01      	subs	r7, #1
   bdfae:	e7ea      	b.n	bdf86 <__mdiff+0xe2>
   bdfb0:	000beea9 	.word	0x000beea9
   bdfb4:	000bef2e 	.word	0x000bef2e

000bdfb8 <__ulp>:
   bdfb8:	b082      	sub	sp, #8
   bdfba:	ed8d 0b00 	vstr	d0, [sp]
   bdfbe:	9b01      	ldr	r3, [sp, #4]
   bdfc0:	4912      	ldr	r1, [pc, #72]	; (be00c <__ulp+0x54>)
   bdfc2:	4019      	ands	r1, r3
   bdfc4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bdfc8:	2900      	cmp	r1, #0
   bdfca:	dd05      	ble.n	bdfd8 <__ulp+0x20>
   bdfcc:	2200      	movs	r2, #0
   bdfce:	460b      	mov	r3, r1
   bdfd0:	ec43 2b10 	vmov	d0, r2, r3
   bdfd4:	b002      	add	sp, #8
   bdfd6:	4770      	bx	lr
   bdfd8:	4249      	negs	r1, r1
   bdfda:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bdfde:	ea4f 5021 	mov.w	r0, r1, asr #20
   bdfe2:	f04f 0200 	mov.w	r2, #0
   bdfe6:	f04f 0300 	mov.w	r3, #0
   bdfea:	da04      	bge.n	bdff6 <__ulp+0x3e>
   bdfec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bdff0:	fa41 f300 	asr.w	r3, r1, r0
   bdff4:	e7ec      	b.n	bdfd0 <__ulp+0x18>
   bdff6:	f1a0 0114 	sub.w	r1, r0, #20
   bdffa:	291e      	cmp	r1, #30
   bdffc:	bfda      	itte	le
   bdffe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   be002:	fa20 f101 	lsrle.w	r1, r0, r1
   be006:	2101      	movgt	r1, #1
   be008:	460a      	mov	r2, r1
   be00a:	e7e1      	b.n	bdfd0 <__ulp+0x18>
   be00c:	7ff00000 	.word	0x7ff00000

000be010 <__b2d>:
   be010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be012:	6905      	ldr	r5, [r0, #16]
   be014:	f100 0714 	add.w	r7, r0, #20
   be018:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   be01c:	1f2e      	subs	r6, r5, #4
   be01e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   be022:	4620      	mov	r0, r4
   be024:	f7ff fd48 	bl	bdab8 <__hi0bits>
   be028:	f1c0 0320 	rsb	r3, r0, #32
   be02c:	280a      	cmp	r0, #10
   be02e:	f8df c07c 	ldr.w	ip, [pc, #124]	; be0ac <__b2d+0x9c>
   be032:	600b      	str	r3, [r1, #0]
   be034:	dc14      	bgt.n	be060 <__b2d+0x50>
   be036:	f1c0 0e0b 	rsb	lr, r0, #11
   be03a:	fa24 f10e 	lsr.w	r1, r4, lr
   be03e:	42b7      	cmp	r7, r6
   be040:	ea41 030c 	orr.w	r3, r1, ip
   be044:	bf34      	ite	cc
   be046:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   be04a:	2100      	movcs	r1, #0
   be04c:	3015      	adds	r0, #21
   be04e:	fa04 f000 	lsl.w	r0, r4, r0
   be052:	fa21 f10e 	lsr.w	r1, r1, lr
   be056:	ea40 0201 	orr.w	r2, r0, r1
   be05a:	ec43 2b10 	vmov	d0, r2, r3
   be05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   be060:	42b7      	cmp	r7, r6
   be062:	bf3a      	itte	cc
   be064:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   be068:	f1a5 0608 	subcc.w	r6, r5, #8
   be06c:	2100      	movcs	r1, #0
   be06e:	380b      	subs	r0, #11
   be070:	d017      	beq.n	be0a2 <__b2d+0x92>
   be072:	f1c0 0c20 	rsb	ip, r0, #32
   be076:	fa04 f500 	lsl.w	r5, r4, r0
   be07a:	42be      	cmp	r6, r7
   be07c:	fa21 f40c 	lsr.w	r4, r1, ip
   be080:	ea45 0504 	orr.w	r5, r5, r4
   be084:	bf8c      	ite	hi
   be086:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   be08a:	2400      	movls	r4, #0
   be08c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   be090:	fa01 f000 	lsl.w	r0, r1, r0
   be094:	fa24 f40c 	lsr.w	r4, r4, ip
   be098:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   be09c:	ea40 0204 	orr.w	r2, r0, r4
   be0a0:	e7db      	b.n	be05a <__b2d+0x4a>
   be0a2:	ea44 030c 	orr.w	r3, r4, ip
   be0a6:	460a      	mov	r2, r1
   be0a8:	e7d7      	b.n	be05a <__b2d+0x4a>
   be0aa:	bf00      	nop
   be0ac:	3ff00000 	.word	0x3ff00000

000be0b0 <__d2b>:
   be0b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   be0b4:	4689      	mov	r9, r1
   be0b6:	2101      	movs	r1, #1
   be0b8:	ec57 6b10 	vmov	r6, r7, d0
   be0bc:	4690      	mov	r8, r2
   be0be:	f7ff fc09 	bl	bd8d4 <_Balloc>
   be0c2:	4604      	mov	r4, r0
   be0c4:	b930      	cbnz	r0, be0d4 <__d2b+0x24>
   be0c6:	4602      	mov	r2, r0
   be0c8:	4b25      	ldr	r3, [pc, #148]	; (be160 <__d2b+0xb0>)
   be0ca:	4826      	ldr	r0, [pc, #152]	; (be164 <__d2b+0xb4>)
   be0cc:	f240 310a 	movw	r1, #778	; 0x30a
   be0d0:	f7fa fd38 	bl	b8b44 <__assert_func>
   be0d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
   be0d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   be0dc:	bb35      	cbnz	r5, be12c <__d2b+0x7c>
   be0de:	2e00      	cmp	r6, #0
   be0e0:	9301      	str	r3, [sp, #4]
   be0e2:	d028      	beq.n	be136 <__d2b+0x86>
   be0e4:	4668      	mov	r0, sp
   be0e6:	9600      	str	r6, [sp, #0]
   be0e8:	f7ff fd06 	bl	bdaf8 <__lo0bits>
   be0ec:	9900      	ldr	r1, [sp, #0]
   be0ee:	b300      	cbz	r0, be132 <__d2b+0x82>
   be0f0:	9a01      	ldr	r2, [sp, #4]
   be0f2:	f1c0 0320 	rsb	r3, r0, #32
   be0f6:	fa02 f303 	lsl.w	r3, r2, r3
   be0fa:	430b      	orrs	r3, r1
   be0fc:	40c2      	lsrs	r2, r0
   be0fe:	6163      	str	r3, [r4, #20]
   be100:	9201      	str	r2, [sp, #4]
   be102:	9b01      	ldr	r3, [sp, #4]
   be104:	61a3      	str	r3, [r4, #24]
   be106:	2b00      	cmp	r3, #0
   be108:	bf14      	ite	ne
   be10a:	2202      	movne	r2, #2
   be10c:	2201      	moveq	r2, #1
   be10e:	6122      	str	r2, [r4, #16]
   be110:	b1d5      	cbz	r5, be148 <__d2b+0x98>
   be112:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   be116:	4405      	add	r5, r0
   be118:	f8c9 5000 	str.w	r5, [r9]
   be11c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   be120:	f8c8 0000 	str.w	r0, [r8]
   be124:	4620      	mov	r0, r4
   be126:	b003      	add	sp, #12
   be128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   be12c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   be130:	e7d5      	b.n	be0de <__d2b+0x2e>
   be132:	6161      	str	r1, [r4, #20]
   be134:	e7e5      	b.n	be102 <__d2b+0x52>
   be136:	a801      	add	r0, sp, #4
   be138:	f7ff fcde 	bl	bdaf8 <__lo0bits>
   be13c:	9b01      	ldr	r3, [sp, #4]
   be13e:	6163      	str	r3, [r4, #20]
   be140:	2201      	movs	r2, #1
   be142:	6122      	str	r2, [r4, #16]
   be144:	3020      	adds	r0, #32
   be146:	e7e3      	b.n	be110 <__d2b+0x60>
   be148:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   be14c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   be150:	f8c9 0000 	str.w	r0, [r9]
   be154:	6918      	ldr	r0, [r3, #16]
   be156:	f7ff fcaf 	bl	bdab8 <__hi0bits>
   be15a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   be15e:	e7df      	b.n	be120 <__d2b+0x70>
   be160:	000beea9 	.word	0x000beea9
   be164:	000bef2e 	.word	0x000bef2e

000be168 <__ratio>:
   be168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be16c:	4688      	mov	r8, r1
   be16e:	4669      	mov	r1, sp
   be170:	4681      	mov	r9, r0
   be172:	f7ff ff4d 	bl	be010 <__b2d>
   be176:	a901      	add	r1, sp, #4
   be178:	4640      	mov	r0, r8
   be17a:	ec55 4b10 	vmov	r4, r5, d0
   be17e:	f7ff ff47 	bl	be010 <__b2d>
   be182:	f8d9 3010 	ldr.w	r3, [r9, #16]
   be186:	f8d8 2010 	ldr.w	r2, [r8, #16]
   be18a:	eba3 0c02 	sub.w	ip, r3, r2
   be18e:	e9dd 3200 	ldrd	r3, r2, [sp]
   be192:	1a9b      	subs	r3, r3, r2
   be194:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   be198:	ec51 0b10 	vmov	r0, r1, d0
   be19c:	2b00      	cmp	r3, #0
   be19e:	bfd6      	itet	le
   be1a0:	460a      	movle	r2, r1
   be1a2:	462a      	movgt	r2, r5
   be1a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   be1a8:	468b      	mov	fp, r1
   be1aa:	462f      	mov	r7, r5
   be1ac:	bfd4      	ite	le
   be1ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   be1b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   be1b6:	4620      	mov	r0, r4
   be1b8:	ee10 2a10 	vmov	r2, s0
   be1bc:	465b      	mov	r3, fp
   be1be:	4639      	mov	r1, r7
   be1c0:	f7fd fdb8 	bl	bbd34 <__aeabi_ddiv>
   be1c4:	ec41 0b10 	vmov	d0, r0, r1
   be1c8:	b003      	add	sp, #12
   be1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000be1ce <__copybits>:
   be1ce:	3901      	subs	r1, #1
   be1d0:	b570      	push	{r4, r5, r6, lr}
   be1d2:	1149      	asrs	r1, r1, #5
   be1d4:	6914      	ldr	r4, [r2, #16]
   be1d6:	3101      	adds	r1, #1
   be1d8:	f102 0314 	add.w	r3, r2, #20
   be1dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   be1e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   be1e4:	1f05      	subs	r5, r0, #4
   be1e6:	42a3      	cmp	r3, r4
   be1e8:	d30c      	bcc.n	be204 <__copybits+0x36>
   be1ea:	1aa3      	subs	r3, r4, r2
   be1ec:	3b11      	subs	r3, #17
   be1ee:	f023 0303 	bic.w	r3, r3, #3
   be1f2:	3211      	adds	r2, #17
   be1f4:	42a2      	cmp	r2, r4
   be1f6:	bf88      	it	hi
   be1f8:	2300      	movhi	r3, #0
   be1fa:	4418      	add	r0, r3
   be1fc:	2300      	movs	r3, #0
   be1fe:	4288      	cmp	r0, r1
   be200:	d305      	bcc.n	be20e <__copybits+0x40>
   be202:	bd70      	pop	{r4, r5, r6, pc}
   be204:	f853 6b04 	ldr.w	r6, [r3], #4
   be208:	f845 6f04 	str.w	r6, [r5, #4]!
   be20c:	e7eb      	b.n	be1e6 <__copybits+0x18>
   be20e:	f840 3b04 	str.w	r3, [r0], #4
   be212:	e7f4      	b.n	be1fe <__copybits+0x30>

000be214 <__any_on>:
   be214:	f100 0214 	add.w	r2, r0, #20
   be218:	6900      	ldr	r0, [r0, #16]
   be21a:	114b      	asrs	r3, r1, #5
   be21c:	4298      	cmp	r0, r3
   be21e:	b510      	push	{r4, lr}
   be220:	db11      	blt.n	be246 <__any_on+0x32>
   be222:	dd0a      	ble.n	be23a <__any_on+0x26>
   be224:	f011 011f 	ands.w	r1, r1, #31
   be228:	d007      	beq.n	be23a <__any_on+0x26>
   be22a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   be22e:	fa24 f001 	lsr.w	r0, r4, r1
   be232:	fa00 f101 	lsl.w	r1, r0, r1
   be236:	428c      	cmp	r4, r1
   be238:	d10b      	bne.n	be252 <__any_on+0x3e>
   be23a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   be23e:	4293      	cmp	r3, r2
   be240:	d803      	bhi.n	be24a <__any_on+0x36>
   be242:	2000      	movs	r0, #0
   be244:	bd10      	pop	{r4, pc}
   be246:	4603      	mov	r3, r0
   be248:	e7f7      	b.n	be23a <__any_on+0x26>
   be24a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   be24e:	2900      	cmp	r1, #0
   be250:	d0f5      	beq.n	be23e <__any_on+0x2a>
   be252:	2001      	movs	r0, #1
   be254:	e7f6      	b.n	be244 <__any_on+0x30>

000be256 <_calloc_r>:
   be256:	b513      	push	{r0, r1, r4, lr}
   be258:	434a      	muls	r2, r1
   be25a:	4611      	mov	r1, r2
   be25c:	9201      	str	r2, [sp, #4]
   be25e:	f7fa fc61 	bl	b8b24 <_malloc_r>
   be262:	4604      	mov	r4, r0
   be264:	b118      	cbz	r0, be26e <_calloc_r+0x18>
   be266:	9a01      	ldr	r2, [sp, #4]
   be268:	2100      	movs	r1, #0
   be26a:	f7fd ffb9 	bl	bc1e0 <memset>
   be26e:	4620      	mov	r0, r4
   be270:	b002      	add	sp, #8
   be272:	bd10      	pop	{r4, pc}
   be274:	0000      	movs	r0, r0
	...

000be278 <nan>:
   be278:	ed9f 0b01 	vldr	d0, [pc, #4]	; be280 <nan+0x8>
   be27c:	4770      	bx	lr
   be27e:	bf00      	nop
   be280:	00000000 	.word	0x00000000
   be284:	7ff80000 	.word	0x7ff80000

000be288 <nanf>:
   be288:	ed9f 0a01 	vldr	s0, [pc, #4]	; be290 <nanf+0x8>
   be28c:	4770      	bx	lr
   be28e:	bf00      	nop
   be290:	7fc00000 	.word	0x7fc00000

000be294 <__ascii_wctomb>:
   be294:	b149      	cbz	r1, be2aa <__ascii_wctomb+0x16>
   be296:	2aff      	cmp	r2, #255	; 0xff
   be298:	bf85      	ittet	hi
   be29a:	238a      	movhi	r3, #138	; 0x8a
   be29c:	6003      	strhi	r3, [r0, #0]
   be29e:	700a      	strbls	r2, [r1, #0]
   be2a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   be2a4:	bf98      	it	ls
   be2a6:	2001      	movls	r0, #1
   be2a8:	4770      	bx	lr
   be2aa:	4608      	mov	r0, r1
   be2ac:	4770      	bx	lr
	...

000be2b0 <__aeabi_d2lz>:
   be2b0:	b538      	push	{r3, r4, r5, lr}
   be2b2:	2200      	movs	r2, #0
   be2b4:	2300      	movs	r3, #0
   be2b6:	4604      	mov	r4, r0
   be2b8:	460d      	mov	r5, r1
   be2ba:	f7fd fe83 	bl	bbfc4 <__aeabi_dcmplt>
   be2be:	b928      	cbnz	r0, be2cc <__aeabi_d2lz+0x1c>
   be2c0:	4620      	mov	r0, r4
   be2c2:	4629      	mov	r1, r5
   be2c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   be2c8:	f7fd bf2a 	b.w	bc120 <__aeabi_d2ulz>
   be2cc:	4620      	mov	r0, r4
   be2ce:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   be2d2:	f7fd ff25 	bl	bc120 <__aeabi_d2ulz>
   be2d6:	4240      	negs	r0, r0
   be2d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be2dc:	bd38      	pop	{r3, r4, r5, pc}
   be2de:	bf00      	nop

000be2e0 <dynalib_user>:
   be2e0:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   be2f0:	0000 0000 6162 6973 5f63 7473 6972 676e     ....basic_string
   be300:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   be310:	6c75 206c 6f6e 2074 6176 696c 0064 720a     ull not valid..r
   be320:	7165 6575 7473 6320 646f 2065 2c31 6120     equest code 1, a
   be330:	6464 6572 7373 203a 7400 6172 736e 696d     ddress: .transmi
   be340:	7373 6f69 206e 6572 6963 7665 6465 6620     ssion recieved f
   be350:	6f72 3a6d 0020 6564 6976 6563 6920 3a64     rom: .device id:
   be360:	0020 7274 6e61 6d73 7369 6973 6e6f 7320      .transmission s
   be370:	6e65 2074 6f74 203a 7200 7165 6575 7473     ent to: .request
   be380:	6320 646f 2065 2c32 6120 6464 6572 7373      code 2, address
   be390:	203a 6300 6e6f 6c66 6369 2074 6576 6972     : .conflict veri
   be3a0:	6966 6163 6974 6e6f 203a 0a00 6f43 6e6e     fication: ..Conn
   be3b0:	6365 6574 2064 6f74 203a 6300 6e61 6f6e     ected to: .canno
   be3c0:	2074 7263 6165 6574 7320 6474 3a3a 6576     t create std::ve
   be3d0:	7463 726f 6c20 7261 6567 2072 6874 6e61     ctor larger than
   be3e0:	6d20 7861 735f 7a69 2865 0029 6b6f 7700      max_size().ok.w
   be3f0:	6669 3a69 2c00 5300 4953 3a44 2520 2c73     ifi:.,.SSID: %s,
   be400:	7020 7361 7773 726f 3a64 2520 0073 6963      password: %s.ci
   be410:	7974 003a 6e69 6f63 7272 6365 2074 6963     ty:.incorrect ci
   be420:	7974 6e20 6d61 0065 6c73 7661 2065 6461     ty name.slave ad
   be430:	7264 7365 6573 2073 6f73 7472 6465 6300     dresses sorted.c
   be440:	7469 3a79 2520 0073 6f63 6f6c 3a72 6300     ity: %s.color:.c
   be450:	7469 2079 6f6e 2074 6573 0074 7267 6565     ity not set.gree
   be460:	316e 6700 6572 6e65 6700 6572 6e65 0032     n1.green.green2.
   be470:	6172 6c69 6177 2079 6e69 6564 3a78 2520     railway index: %
   be480:	0069 6e69 6f63 7272 6365 2074 6172 6c69     i.incorrect rail
   be490:	6177 2079 6f63 6f6c 0072 4c42 2045 6966     way color.BLE fi
   be4a0:	696e 6873 6465 7400 7275 696e 676e 6f20     nished.turning o
   be4b0:	6666 203a 6925 7200 7365 7465 7200 7365     ff: %i.reset.res
   be4c0:	7465 6420 6e6f 0065 6572 0064 4646 3030     et done.red.FF00
   be4d0:	3030 3000 3041 3030 0030 6c62 6575 3000     00.0A0000.blue.0
   be4e0:	3030 4630 0046 3030 3030 4130 6200 6f72     000FF.00000A.bro
   be4f0:	6e77 4600 4646 3046 0030 4130 4130 3030     wn.FFFF00.0A0A00
   be500:	3000 4630 3046 0030 3030 4130 3030 6f00     .00FF00.000A00.o
   be510:	6172 676e 0065 4646 3038 3030 3000 3041     range.FF8000.0A0
   be520:	3035 0030 7570 7072 656c 3200 3030 4630     500.purple.2000F
   be530:	0046 3230 3030 4130 7000 6e69 006b 4646     F.02000A.pink.FF
   be540:	3038 3038 3000 3041 3035 0035 3231 4133     8080.0A0505.123A
   be550:	3100 3332 0042 3231 4333 7400 0078 7872     .123B.123C.tx.rx
   be560:	7400 6572 2e6b 6874 7765 6c63 632e 6d6f     .trek.thewcl.com
   be570:	6300 6174 6d00 7462 0061 6f6c 706f 7320     .cta.mbta.loop s
   be580:	6174 7472 2500 2c69 0020 6c2f 6f6f 2d70     tart.%i, ./loop-
   be590:	7274 6361 736b 002f 6c3f 6e69 7365 003d     tracks/.?lines=.
   be5a0:	4547 0054 6170 7372 6e69 0067 6170 7372     GET.parsing.pars
   be5b0:	6e69 2067 6166 6c69 6465 6c00 6e69 7365     ing failed.lines
   be5c0:	7400 6172 6e69 0073 656e 7478 735f 6f74     .trains.next_sto
   be5d0:	0070 6564 7473 6e69 7461 6f69 006e 6964     p.destination.di
   be5e0:	6572 7463 6f69 006e 616c 6974 7574 6564     rection.latitude
   be5f0:	6c00 6e6f 6967 7574 6564 6200 6572 6b61     .longitude.break
   be600:	2500 2073 6172 6c69 7020 7261 2074 6925     .%s rail part %i
   be610:	203a 0000                                   : ..

000be614 <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   be61c:	40b9 000b 40cd 000b 6341 6563 7470 2f00     .@...@..Accept./
   be62c:	2f2a 0000 0019 0000 0003 0000 0007 0000     */..............
   be63c:	0005 0000 000c 0000 0008 0000 0005 0000     ................
   be64c:	0005 0000 0005 0000 0019 0000 0005 0000     ................
   be65c:	000f 0000 000a 0000 000a 0000 000a 0000     ................
   be66c:	000a 0000 0014 0000 0000 0000 0028 0000     ............(...
   be67c:	0000 0000 0002 0000 0006 0000 0000 0000     ................
   be68c:	0000 0000 000f 0000 000a 0000 000a 0000     ................
   be69c:	000f 0000 000f 0000 000f 0000 0014 0000     ................
   be6ac:	0000 0000 0001 0000 0003 0000 0000 0000     ................
   be6bc:	0000 0000 000c 0000 0007 0000 0001 0000     ................
   be6cc:	000a 0000 000a 0000 000a 0000 000a 0000     ................
   be6dc:	000c 0000 0000 0000 0028 0000 0008 0000     ........(.......
   be6ec:	0003 0000 0007 0000 0001 0000 0003 0000     ................
   be6fc:	0007 0000 0007 0000 0006 0000 000a 0000     ................
   be70c:	000a 0000 000a 0000 000a 0000 000e 0000     ................
   be71c:	0000 0000 0028 0000 0006 0000 0003 0000     ....(...........
   be72c:	0007 0000 0002 0000 0003 0000 0005 0000     ................
   be73c:	000a 0000 0005 0000 000a 0000 000a 0000     ................
   be74c:	000a 0000 0014 0000 000a 0000 000a 0000     ................
   be75c:	000a 0000 0005 0000 000a 0000 000a 0000     ................
   be76c:	000a 0000 0005 0000 0005 0000 0005 0000     ................
   be77c:	0005 0000 0005 0000 0005 0000 0005 0000     ................
   be78c:	4820 5454 2f50 2e31 0d30 000a 6c63 736f      HTTP/1.0...clos
   be79c:	0065 6f43 6e6e 6365 6974 6e6f 4800 534f     e.Connection.HOS
   be7ac:	0054 6f43 746e 6e65 2d74 654c 676e 6874     T.Content-Length
   be7bc:	5000 534f 0054 0a0d 0a0d 2500 3430 0078     .POST......%04x.

000be7cc <_ZTV10JsonBuffer>:
	...
   be7d4:	7c91 000b 7cad 000b                         .|...|..

000be7dc <_ZTV10JsonParser>:
	...
   be7e4:	7cc1 000b 7ce5 000b                         .|...|..

000be7ec <_ZTV13JsonReference>:
	...
   be7f4:	7c81 000b 7c83 000b 7341 6573 7472 6f69     .|...|..Assertio
   be804:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   be814:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   be824:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   be834:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   be844:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   be854:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   be864:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   be874:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   be884:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   be894:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   be8a4:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   be8b4:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   be8c4:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   be8d4:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   be8e4:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   be8f4:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   be904:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   be914:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   be924:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   be934:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   be944:	6369 002e                                   ic..

000be948 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be950:	8b71 000b 8bd5 000b 8cbb 000b 8bff 000b     q...............
   be960:	8b75 000b                                   u...

000be964 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be96c:	8b6d 000b 8be3 000b 8b6f 000b 8c05 000b     m.......o.......
   be97c:	8b95 000b                                   ....

000be980 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be988:	8b6b 000b 8bf1 000b 9475 000b 8c0b 000b     k.......u.......
   be998:	8bb5 000b                                   ....

000be99c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   be9a8:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000be9ba <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   be9ba:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000be9ca <_ZN8particle7BleUuid9BASE_UUIDE>:
   be9ca:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000be9dc <_ZTVN5spark13EthernetClassE>:
	...
   be9e4:	9f23 000b 9f19 000b 9f0f 000b 9f05 000b     #...............
   be9f4:	9ef9 000b 9eed 000b a1a9 000b a1b1 000b     ................
   bea04:	9ee1 000b 9ed9 000b 9ecf 000b 9ec5 000b     ................
   bea14:	a1e1 000b                                   ....

000bea18 <_ZTV7TwoWire>:
	...
   bea20:	9f41 000b 9f8b 000b 9f63 000b 9f43 000b     A.......c...C...
   bea30:	9f6b 000b 9f73 000b 9f7b 000b 9f83 000b     k...s...{.......

000bea40 <_ZTV9IPAddress>:
	...
   bea48:	a04d 000b a03d 000b a03f 000b 7061 0070     M...=...?...app.

000bea58 <_ZTVN5spark12NetworkClassE>:
	...
   bea60:	a169 000b a173 000b a17d 000b a187 000b     i...s...}.......
   bea70:	a191 000b a19d 000b a1a9 000b a1b1 000b     ................
   bea80:	a1b9 000b a1c5 000b a1cd 000b a1d7 000b     ................
   bea90:	a1e1 000b 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   beaa0:	7265 6f72 2072 203d 6425 0000               error = %d..

000beaac <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   beab4:	a789 000b a7ad 000b acdf 000b a7bb 000b     ................
   beac4:	a78d 000b                                   ....

000beac8 <_ZTV9TCPClient>:
	...
   bead0:	a839 000b a86d 000b a705 000b a71f 000b     9...m...........
   beae0:	ab75 000b a749 000b a9eb 000b a77d 000b     u...I.......}...
   beaf0:	aa7d 000b a8bd 000b aa19 000b ac29 000b     }...........)...
   beb00:	a9b9 000b a77f 000b a731 000b a7c1 000b     ........1.......
   beb10:	a89d 000b 5925 252d 2d6d 6425 2554 3a48     ....%Y-%m-%dT%H:
   beb20:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000beb30 <_ZTV11USARTSerial>:
	...
   beb38:	acf9 000b ad65 000b ad3d 000b a2cd 000b     ....e...=.......
   beb48:	ad0d 000b ad29 000b ad1b 000b ad37 000b     ....).......7...
   beb58:	acfb 000b acff 000b                         ........

000beb60 <_ZTV9USBSerial>:
	...
   beb68:	ada3 000b ae0b 000b ade1 000b a2cd 000b     ................
   beb78:	add3 000b ada5 000b adb5 000b ae05 000b     ................
   beb88:	adc5 000b ad9d 000b                         ........

000beb90 <_ZTVN5spark9WiFiClassE>:
	...
   beb98:	af03 000b aef9 000b aeef 000b aea5 000b     ................
   beba8:	aee3 000b aed7 000b a1a9 000b a1b1 000b     ................
   bebb8:	aecb 000b aec3 000b aeb9 000b aeaf 000b     ................
   bebc8:	a1e1 000b                                   ....

000bebcc <_ZSt7nothrow>:
	...

000bebcd <_ZTSSt19_Sp_make_shared_tag>:
   bebcd:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bebdd:	6572 5f64 6174 0067 0000                     red_tag....

000bebe8 <_ZTISt19_Sp_make_shared_tag>:
   bebe8:	ec40 000b ebcd 000b 6162 6973 5f63 7473     @.......basic_st
   bebf8:	6972 676e 3a3a 4d5f 635f 6572 7461 0065     ring::_M_create.

000bec08 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bec08:	eca0 000b ec14 000b ecc4 000b               ............

000bec14 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bec14:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bec24:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bec34:	0045 0000                                   E...

000bec38 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bec38:	0000 0000 ec08 000b b2f9 000b b30d 000b     ................
   bec48:	b4a1 000b b4a1 000b b377 000b b2b9 000b     ........w.......
   bec58:	b35f 000b b321 000b b2eb 000b               _...!.......

000bec64 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bec64:	eca0 000b ec70 000b ec08 000b               ....p.......

000bec70 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bec70:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bec80:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bec90:	666e 456f 0000 0000                         nfoE....

000bec98 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bec98:	0000 0000 ec64 000b b3a1 000b b3b5 000b     ....d...........
   beca8:	b4a1 000b b4a1 000b b377 000b b2b9 000b     ........w.......
   becb8:	b475 000b b401 000b b3c9 000b               u...........

000becc4 <_ZTISt9type_info>:
   becc4:	ec40 000b eccc 000b                         @.......

000beccc <_ZTSSt9type_info>:
   beccc:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   becdc:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   becec:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   becfc:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bed0c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bed1c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bed2c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bed3c:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   bed4c:	6e69 7469 0079 6e61 0000 0000               inity.an....

000bed58 <fpi.1>:
   bed58:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bed68:	0000 0000                                   ....

000bed6c <fpinan.0>:
   bed6c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   bed7c:	0000 0000                                   ....

000bed80 <tinytens>:
   bed80:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bed90:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   beda0:	6f43 64ac 0628 1168                         Co.d(.h.

000beda8 <_ctype_>:
   beda8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bedb8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bedc8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bedd8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bede8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bedf8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bee08:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bee18:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bee28:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   beea8:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   beeb8:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   beec8:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   beed8:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   beee8:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   beef8:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bef08:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bef18:	632e 0000                                   .c..

000bef1c <_C_numeric_locale>:
   bef1c:	e946 000b e7c6 000b 5130 2003 4f50 4953     F.......0Q. POSI
   bef2c:	0058 742f 706d 6a2f 6e65 696b 736e 472d     X./tmp/jenkins-G
   bef3c:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bef4c:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bef5c:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bef6c:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bef7c:	696c 2f62 706d 6572 2e63 0063               lib/mprec.c.

000bef88 <__mprec_bigtens>:
   bef88:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bef98:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   befa8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000befb0 <__mprec_tens>:
   befb0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   befc0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   befd0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   befe0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   beff0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bf000:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bf010:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bf020:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bf030:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bf040:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bf050:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bf060:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bf070:	9db4 79d9 7843 44ea                         ...yCx.D

000bf078 <p05.0>:
   bf078:	0005 0000 0019 0000 007d 0000               ........}...

000bf084 <link_const_variable_data_end>:
   bf084:	000b6f99 	.word	0x000b6f99
   bf088:	000b9eb5 	.word	0x000b9eb5
   bf08c:	000b9f2d 	.word	0x000b9f2d
   bf090:	000ba159 	.word	0x000ba159
   bf094:	000ba2b9 	.word	0x000ba2b9
   bf098:	000ba3f5 	.word	0x000ba3f5
   bf09c:	000ba6e1 	.word	0x000ba6e1
   bf0a0:	000bace5 	.word	0x000bace5
   bf0a4:	000baf0d 	.word	0x000baf0d

000bf0a8 <link_constructors_end>:
	...
