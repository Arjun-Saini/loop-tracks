
/Users/sainihome/Documents/GitHub/loop-tracks/master/target/3.3.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a0a0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000be0c0  000be0c0  0000e0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000be0e4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  200352e0  000be0e8  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00009318  200354d8  200354d8  000254d8  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000be2e0  000be2e0  0001e2e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000be308  000be308  0001e308  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0013f2e5  00000000  00000000  0001e30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00011ee3  00000000  00000000  0015d5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004833a  00000000  00000000  0016f4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003048  00000000  00000000  001b780e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000cd78  00000000  00000000  001ba856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034ef9  00000000  00000000  001c75ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00041b53  00000000  00000000  001fc4c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001528b6  00000000  00000000  0023e01a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a6c0  00000000  00000000  003908d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 f90f 	bl	bb254 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 f931 	bl	bb2a4 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	200352e0 	.word	0x200352e0
   b404c:	000be0e8 	.word	0x000be0e8
   b4050:	200354d8 	.word	0x200354d8
   b4054:	200354d8 	.word	0x200354d8
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f006 f875 	bl	ba150 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000be09c 	.word	0x000be09c
   b4080:	000be0c0 	.word	0x000be0c0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 bf94 	b.w	b5fb0 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f002 f8cb 	bl	b6224 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f006 b815 	b.w	ba0c0 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 bdff 	b.w	b7c98 <malloc>

000b409a <_Znaj>:
   b409a:	f003 bdfd 	b.w	b7c98 <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f003 be03 	b.w	b7ca8 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f003 be01 	b.w	b7ca8 <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40b8:	b510      	push	{r4, lr}
   b40ba:	4b03      	ldr	r3, [pc, #12]	; (b40c8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   b40bc:	6003      	str	r3, [r0, #0]
   b40be:	4604      	mov	r4, r0
   b40c0:	f002 ff12 	bl	b6ee8 <_ZN10JsonParserD1Ev>
   b40c4:	4620      	mov	r0, r4
   b40c6:	bd10      	pop	{r4, pc}
   b40c8:	000bd67c 	.word	0x000bd67c

000b40cc <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   b40cc:	b510      	push	{r4, lr}
   b40ce:	4604      	mov	r4, r0
   b40d0:	f7ff fff2 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f246 51bc 	movw	r1, #26044	; 0x65bc
   b40da:	f7ff ffe2 	bl	b40a2 <_ZdlPvj>
   b40de:	4620      	mov	r0, r4
   b40e0:	bd10      	pop	{r4, pc}
	...

000b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   b40e4:	b508      	push	{r3, lr}
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b40e6:	4603      	mov	r3, r0
   b40e8:	b150      	cbz	r0, b4100 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x1c>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
	if (__n > this->_M_max_size())
   b40ea:	4a06      	ldr	r2, [pc, #24]	; (b4104 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x20>)
   b40ec:	4290      	cmp	r0, r2
   b40ee:	d901      	bls.n	b40f4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b40f0:	f006 f8c8 	bl	ba284 <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b40f4:	200c      	movs	r0, #12
   b40f6:	4358      	muls	r0, r3
      }
   b40f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b40fc:	f7ff bfcb 	b.w	b4096 <_Znwj>
   b4100:	bd08      	pop	{r3, pc}
   b4102:	bf00      	nop
   b4104:	0aaaaaaa 	.word	0x0aaaaaaa

000b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>:

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4108:	f100 0308 	add.w	r3, r0, #8
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b410c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b410e:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b4110:	6003      	str	r3, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b4112:	460d      	mov	r5, r1
   b4114:	b1d9      	cbz	r1, b414e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x46>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b4116:	4608      	mov	r0, r1
   b4118:	f007 f90c 	bl	bb334 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b411c:	280f      	cmp	r0, #15
   b411e:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4122:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4124:	d907      	bls.n	b4136 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b4126:	2200      	movs	r2, #0
   b4128:	a901      	add	r1, sp, #4
   b412a:	4620      	mov	r0, r4
   b412c:	f006 f8c0 	bl	ba2b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4130:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4132:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4134:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4136:	4632      	mov	r2, r6
   b4138:	4629      	mov	r1, r5
   b413a:	6820      	ldr	r0, [r4, #0]
   b413c:	f006 f8f3 	bl	ba326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b4140:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b4142:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4144:	6063      	str	r3, [r4, #4]
   b4146:	2100      	movs	r1, #0
   b4148:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b414a:	b002      	add	sp, #8
   b414c:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b414e:	4801      	ldr	r0, [pc, #4]	; (b4154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x4c>)
   b4150:	f006 f89b 	bl	ba28a <_ZSt19__throw_logic_errorPKc>
   b4154:	000bd3b4 	.word	0x000bd3b4

000b4158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4158:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b415a:	4603      	mov	r3, r0
   b415c:	b150      	cbz	r0, b4174 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b415e:	4a06      	ldr	r2, [pc, #24]	; (b4178 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x20>)
   b4160:	4290      	cmp	r0, r2
   b4162:	d901      	bls.n	b4168 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4164:	f006 f88e 	bl	ba284 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4168:	2018      	movs	r0, #24
   b416a:	4358      	muls	r0, r3
      }
   b416c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4170:	f7ff bf91 	b.w	b4096 <_Znwj>
   b4174:	bd08      	pop	{r3, pc}
   b4176:	bf00      	nop
   b4178:	05555555 	.word	0x05555555

000b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b417c:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b417e:	b148      	cbz	r0, b4194 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b4180:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b4184:	d301      	bcc.n	b418a <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b4186:	f006 f87d 	bl	ba284 <_ZSt17__throw_bad_allocv>
      }
   b418a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b418e:	0080      	lsls	r0, r0, #2
   b4190:	f7ff bf81 	b.w	b4096 <_Znwj>
   b4194:	bd08      	pop	{r3, pc}

000b4196 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b4196:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4198:	b148      	cbz	r0, b41ae <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b419a:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   b419e:	d301      	bcc.n	b41a4 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41a0:	f006 f870 	bl	ba284 <_ZSt17__throw_bad_allocv>
      }
   b41a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41a8:	00c0      	lsls	r0, r0, #3
   b41aa:	f7ff bf74 	b.w	b4096 <_Znwj>
   b41ae:	bd08      	pop	{r3, pc}

000b41b0 <_ZN5Print5printIiLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b41b0:	b570      	push	{r4, r5, r6, lr}
   b41b2:	4606      	mov	r6, r0
   b41b4:	460c      	mov	r4, r1
{
    if (base == 0) {
   b41b6:	4615      	mov	r5, r2
   b41b8:	b92a      	cbnz	r2, b41c6 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b41ba:	6803      	ldr	r3, [r0, #0]
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
   b41bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(n);
   b41c0:	689b      	ldr	r3, [r3, #8]
   b41c2:	b2c9      	uxtb	r1, r1
   b41c4:	4718      	bx	r3
        if (n < 0 && base == 10) {
   b41c6:	2900      	cmp	r1, #0
   b41c8:	da0b      	bge.n	b41e2 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
   b41ca:	2a0a      	cmp	r2, #10
   b41cc:	d109      	bne.n	b41e2 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
            t = print('-');
   b41ce:	212d      	movs	r1, #45	; 0x2d
   b41d0:	f005 f920 	bl	b9414 <_ZN5Print5printEc>
            val = -n;
   b41d4:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b41d6:	b2ea      	uxtb	r2, r5
   b41d8:	4630      	mov	r0, r6
}
   b41da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b41de:	f005 b932 	b.w	b9446 <_ZN5Print11printNumberEmh>
            val = n;
   b41e2:	4621      	mov	r1, r4
   b41e4:	e7f7      	b.n	b41d6 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x26>

000b41e6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b41e6:	b510      	push	{r4, lr}
   b41e8:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b41ea:	f7ff ffe1 	bl	b41b0 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
        n += println();
   b41ee:	4620      	mov	r0, r4
    }
   b41f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b41f4:	f005 b911 	b.w	b941a <_ZN5Print7printlnEv>

000b41f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
   b41f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b41fa:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b41fe:	6003      	str	r3, [r0, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b4200:	e9d1 5300 	ldrd	r5, r3, [r1]
      basic_string(const basic_string& __str)
   b4204:	4604      	mov	r4, r0
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b4206:	18ee      	adds	r6, r5, r3
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   b4208:	b91d      	cbnz	r5, b4212 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
   b420a:	b116      	cbz	r6, b4212 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
	  std::__throw_logic_error(__N("basic_string::"
   b420c:	480c      	ldr	r0, [pc, #48]	; (b4240 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x48>)
   b420e:	f006 f83c 	bl	ba28a <_ZSt19__throw_logic_errorPKc>
	if (__dnew > size_type(_S_local_capacity))
   b4212:	2b0f      	cmp	r3, #15
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4214:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4216:	d907      	bls.n	b4228 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x30>
	    _M_data(_M_create(__dnew, size_type(0)));
   b4218:	2200      	movs	r2, #0
   b421a:	a901      	add	r1, sp, #4
   b421c:	4620      	mov	r0, r4
   b421e:	f006 f847 	bl	ba2b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4222:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4224:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4226:	60a3      	str	r3, [r4, #8]
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4228:	4632      	mov	r2, r6
   b422a:	4629      	mov	r1, r5
   b422c:	6820      	ldr	r0, [r4, #0]
   b422e:	f006 f875 	bl	ba31c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
   b4232:	9b01      	ldr	r3, [sp, #4]
   b4234:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4236:	6063      	str	r3, [r4, #4]
   b4238:	2100      	movs	r1, #0
   b423a:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b423c:	b002      	add	sp, #8
   b423e:	bd70      	pop	{r4, r5, r6, pc}
   b4240:	000bd3b4 	.word	0x000bd3b4

000b4244 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4244:	6803      	ldr	r3, [r0, #0]
   b4246:	b2c9      	uxtb	r1, r1
   b4248:	689b      	ldr	r3, [r3, #8]
   b424a:	4718      	bx	r3

000b424c <_ZN5Print5writeEPKc.isra.0>:
    size_t write(const char *str) {
   b424c:	b513      	push	{r0, r1, r4, lr}
   b424e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b4250:	b161      	cbz	r1, b426c <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4252:	4608      	mov	r0, r1
   b4254:	9101      	str	r1, [sp, #4]
   b4256:	f007 f86d 	bl	bb334 <strlen>
   b425a:	6823      	ldr	r3, [r4, #0]
   b425c:	9901      	ldr	r1, [sp, #4]
   b425e:	68db      	ldr	r3, [r3, #12]
   b4260:	4602      	mov	r2, r0
   b4262:	4620      	mov	r0, r4
    }
   b4264:	b002      	add	sp, #8
   b4266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b426a:	4718      	bx	r3
    }
   b426c:	b002      	add	sp, #8
   b426e:	bd10      	pop	{r4, pc}

000b4270 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   b4270:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b4272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4274:	4604      	mov	r4, r0
   b4276:	460d      	mov	r5, r1
      if (&__x != this)
   b4278:	d025      	beq.n	b42c6 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x56>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b427a:	e9d1 7100 	ldrd	r7, r1, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   b427e:	6800      	ldr	r0, [r0, #0]
   b4280:	68a3      	ldr	r3, [r4, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4282:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b4284:	1a1b      	subs	r3, r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   b4286:	429e      	cmp	r6, r3
   b4288:	d91e      	bls.n	b42c8 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   b428a:	10f0      	asrs	r0, r6, #3
   b428c:	f7ff ff83 	bl	b4196 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
   b4290:	2300      	movs	r3, #0
   b4292:	4605      	mov	r5, r0
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   b4294:	429e      	cmp	r6, r3
   b4296:	d00a      	beq.n	b42ae <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x3e>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4298:	18ea      	adds	r2, r5, r3
   b429a:	bf1c      	itt	ne
   b429c:	18f9      	addne	r1, r7, r3
   b429e:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b42a2:	f103 0308 	add.w	r3, r3, #8
   b42a6:	bf18      	it	ne
   b42a8:	e9c2 0100 	strdne	r0, r1, [r2]
   b42ac:	e7f2      	b.n	b4294 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x24>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b42ae:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b42b0:	b118      	cbz	r0, b42ba <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x4a>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
   b42b2:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b42b4:	1a09      	subs	r1, r1, r0
   b42b6:	f7ff fef4 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b42ba:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b42bc:	4435      	add	r5, r6
   b42be:	60a5      	str	r5, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b42c0:	6823      	ldr	r3, [r4, #0]
   b42c2:	4433      	add	r3, r6
   b42c4:	6063      	str	r3, [r4, #4]
	}
      return *this;
    }
   b42c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b42c8:	6862      	ldr	r2, [r4, #4]
   b42ca:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   b42cc:	4296      	cmp	r6, r2
   b42ce:	d806      	bhi.n	b42de <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x6e>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b42d0:	42b9      	cmp	r1, r7
   b42d2:	d0f5      	beq.n	b42c0 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b42d4:	4632      	mov	r2, r6
   b42d6:	4639      	mov	r1, r7
   b42d8:	f006 ffca 	bl	bb270 <memmove>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b42dc:	e7f0      	b.n	b42c0 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	  if (_Num)
   b42de:	b112      	cbz	r2, b42e6 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x76>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b42e0:	4639      	mov	r1, r7
   b42e2:	f006 ffc5 	bl	bb270 <memmove>
   b42e6:	e9d4 2700 	ldrd	r2, r7, [r4]
   b42ea:	1abb      	subs	r3, r7, r2
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b42ec:	682a      	ldr	r2, [r5, #0]
   b42ee:	686d      	ldr	r5, [r5, #4]
   b42f0:	441a      	add	r2, r3
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b42f2:	1aad      	subs	r5, r5, r2
					  __x._M_impl._M_finish,
   b42f4:	2300      	movs	r3, #0
	      for (; __first != __last; ++__first, (void)++__cur)
   b42f6:	429d      	cmp	r5, r3
   b42f8:	d0e2      	beq.n	b42c0 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
   b42fa:	eb17 0c03 	adds.w	ip, r7, r3
   b42fe:	bf1c      	itt	ne
   b4300:	18d1      	addne	r1, r2, r3
   b4302:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b4306:	f103 0308 	add.w	r3, r3, #8
   b430a:	bf18      	it	ne
   b430c:	e9cc 0100 	strdne	r0, r1, [ip]
   b4310:	e7f1      	b.n	b42f6 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x86>
	...

000b4314 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>:
      if (&__x != this)
   b4314:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b4316:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b431a:	4604      	mov	r4, r0
   b431c:	468a      	mov	sl, r1
      if (&__x != this)
   b431e:	d036      	beq.n	b438e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7a>
   b4320:	e9d1 5b00 	ldrd	r5, fp, [r1]
			 - this->_M_impl._M_start); }
   b4324:	f8d0 9000 	ldr.w	r9, [r0]
   b4328:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b432a:	4a39      	ldr	r2, [pc, #228]	; (b4410 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xfc>)
   b432c:	ebab 0705 	sub.w	r7, fp, r5
			 - this->_M_impl._M_start); }
   b4330:	eba3 0309 	sub.w	r3, r3, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4334:	ea4f 08e7 	mov.w	r8, r7, asr #3
	  if (__xlen > capacity())
   b4338:	42bb      	cmp	r3, r7
   b433a:	fb02 f808 	mul.w	r8, r2, r8
   b433e:	d228      	bcs.n	b4392 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7e>
	  pointer __result = this->_M_allocate(__n);
   b4340:	4640      	mov	r0, r8
   b4342:	f7ff ff09 	bl	b4158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
   b4346:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b4348:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b434a:	45ab      	cmp	fp, r5
   b434c:	d00a      	beq.n	b4364 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x50>
   b434e:	f1b8 0f00 	cmp.w	r8, #0
   b4352:	d003      	beq.n	b435c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x48>
   b4354:	4629      	mov	r1, r5
   b4356:	4640      	mov	r0, r8
   b4358:	f7ff ff4e 	bl	b41f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b435c:	f108 0818 	add.w	r8, r8, #24
   b4360:	3518      	adds	r5, #24
   b4362:	e7f2      	b.n	b434a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x36>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4364:	e9d4 5800 	ldrd	r5, r8, [r4]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b4368:	45a8      	cmp	r8, r5
   b436a:	d004      	beq.n	b4376 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x62>
      { _M_dispose(); }
   b436c:	4628      	mov	r0, r5
   b436e:	f005 ffc1 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4372:	3518      	adds	r5, #24
   b4374:	e7f8      	b.n	b4368 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x54>
	      _M_deallocate(this->_M_impl._M_start,
   b4376:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4378:	b118      	cbz	r0, b4382 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x6e>
			    - this->_M_impl._M_start);
   b437a:	68a1      	ldr	r1, [r4, #8]
   b437c:	1a09      	subs	r1, r1, r0
   b437e:	f7ff fe90 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4382:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4384:	443e      	add	r6, r7
   b4386:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4388:	6823      	ldr	r3, [r4, #0]
   b438a:	443b      	add	r3, r7
   b438c:	6063      	str	r3, [r4, #4]
    }
   b438e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4392:	6846      	ldr	r6, [r0, #4]
   b4394:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b4398:	42b7      	cmp	r7, r6
   b439a:	d819      	bhi.n	b43d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xbc>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b439c:	4646      	mov	r6, r8
   b439e:	46ca      	mov	sl, r9
   b43a0:	2e00      	cmp	r6, #0
   b43a2:	dd08      	ble.n	b43b6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xa2>
		  }
	      }
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
	  }
#endif
	this->_M_assign(__str);
   b43a4:	4629      	mov	r1, r5
   b43a6:	4650      	mov	r0, sl
   b43a8:	f005 ffc2 	bl	ba330 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b43ac:	3518      	adds	r5, #24
	      ++__result;
   b43ae:	f10a 0a18 	add.w	sl, sl, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b43b2:	3e01      	subs	r6, #1
   b43b4:	e7f4      	b.n	b43a0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x8c>
   b43b6:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   b43ba:	2518      	movs	r5, #24
      : _M_current(__i) { }
   b43bc:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b43be:	fb05 9508 	mla	r5, r5, r8, r9
	  for (; __first != __last; ++__first)
   b43c2:	42ae      	cmp	r6, r5
   b43c4:	d0e0      	beq.n	b4388 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
      { _M_dispose(); }
   b43c6:	4628      	mov	r0, r5
   b43c8:	f005 ff94 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b43cc:	3518      	adds	r5, #24
      {
	++_M_current;
	return *this;
   b43ce:	e7f8      	b.n	b43c2 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xae>
   b43d0:	10f6      	asrs	r6, r6, #3
   b43d2:	4356      	muls	r6, r2
   b43d4:	2e00      	cmp	r6, #0
   b43d6:	dd08      	ble.n	b43ea <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xd6>
	this->_M_assign(__str);
   b43d8:	4629      	mov	r1, r5
   b43da:	4648      	mov	r0, r9
   b43dc:	f005 ffa8 	bl	ba330 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b43e0:	3518      	adds	r5, #24
	      ++__result;
   b43e2:	f109 0918 	add.w	r9, r9, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b43e6:	3e01      	subs	r6, #1
   b43e8:	e7f4      	b.n	b43d4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xc0>
   b43ea:	e9d4 5600 	ldrd	r5, r6, [r4]
   b43ee:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43f0:	f8da 5000 	ldr.w	r5, [sl]
					  __x._M_impl._M_finish,
   b43f4:	f8da 8004 	ldr.w	r8, [sl, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b43f8:	440d      	add	r5, r1
   b43fa:	45a8      	cmp	r8, r5
   b43fc:	d0c4      	beq.n	b4388 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b43fe:	b11e      	cbz	r6, b4408 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xf4>
   b4400:	4629      	mov	r1, r5
   b4402:	4630      	mov	r0, r6
   b4404:	f7ff fef8 	bl	b41f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4408:	3518      	adds	r5, #24
   b440a:	3618      	adds	r6, #24
   b440c:	e7f5      	b.n	b43fa <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xe6>
   b440e:	bf00      	nop
   b4410:	aaaaaaab 	.word	0xaaaaaaab

000b4414 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4414:	b40e      	push	{r1, r2, r3}
   b4416:	b503      	push	{r0, r1, lr}
   b4418:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b441a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b441c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4420:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4422:	f005 f82e 	bl	b9482 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4426:	b002      	add	sp, #8
   b4428:	f85d eb04 	ldr.w	lr, [sp], #4
   b442c:	b003      	add	sp, #12
   b442e:	4770      	bx	lr

000b4430 <_Z16randomizeAddressv>:
    Serial.println();
  }
}

//clears up conflicts with multiple i2c slaves having the same address
void randomizeAddress(){
   b4430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while(slaveCount != slaveCountExpected){
   b4434:	4da0      	ldr	r5, [pc, #640]	; (b46b8 <_Z16randomizeAddressv+0x288>)
   b4436:	f8df 82a4 	ldr.w	r8, [pc, #676]	; b46dc <_Z16randomizeAddressv+0x2ac>
void randomizeAddress(){
   b443a:	b08d      	sub	sp, #52	; 0x34
  while(slaveCount != slaveCountExpected){
   b443c:	682a      	ldr	r2, [r5, #0]
   b443e:	f8d8 3000 	ldr.w	r3, [r8]
   b4442:	429a      	cmp	r2, r3
   b4444:	f000 80ff 	beq.w	b4646 <_Z16randomizeAddressv+0x216>
    slaveCount = 0;
   b4448:	2300      	movs	r3, #0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b444a:	f8df 9294 	ldr.w	r9, [pc, #660]	; b46e0 <_Z16randomizeAddressv+0x2b0>
   b444e:	f8df a294 	ldr.w	sl, [pc, #660]	; b46e4 <_Z16randomizeAddressv+0x2b4>
      if(Wire.available() > 0){
        Serial.println("transmission recieved from: " + String(i));

        slaveCount++;

        String inputBuffer = "";
   b4452:	4f9a      	ldr	r7, [pc, #616]	; (b46bc <_Z16randomizeAddressv+0x28c>)
    slaveCount = 0;
   b4454:	602b      	str	r3, [r5, #0]
    for(int i = 8; i <= 119; i++){
   b4456:	2408      	movs	r4, #8
      Serial.println("\nrequest code 1, address: " + String(i));
   b4458:	f005 fd60 	bl	b9f1c <_Z16_fetch_usbserialv>
   b445c:	4649      	mov	r1, r9
   b445e:	4606      	mov	r6, r0
   b4460:	a808      	add	r0, sp, #32
   b4462:	f005 f890 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
   b4466:	220a      	movs	r2, #10
   b4468:	4621      	mov	r1, r4
   b446a:	a804      	add	r0, sp, #16
   b446c:	f005 f8e5 	bl	b963a <_ZN6StringC1Eih>
   b4470:	a904      	add	r1, sp, #16
   b4472:	a808      	add	r0, sp, #32
   b4474:	f005 f91c 	bl	b96b0 <_ZplRK15StringSumHelperRK6String>
   b4478:	6801      	ldr	r1, [r0, #0]
   b447a:	4630      	mov	r0, r6
   b447c:	f004 ffd9 	bl	b9432 <_ZN5Print7printlnEPKc>
   b4480:	a804      	add	r0, sp, #16
   b4482:	f005 f835 	bl	b94f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4486:	a808      	add	r0, sp, #32
   b4488:	f005 f832 	bl	b94f0 <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   b448c:	f005 fe94 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b4490:	4621      	mov	r1, r4
   b4492:	f004 fe41 	bl	b9118 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   b4496:	f005 fe8f 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b449a:	2131      	movs	r1, #49	; 0x31
   b449c:	f7ff fed2 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b44a0:	fa5f fb84 	uxtb.w	fp, r4
   b44a4:	f005 fe88 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b44a8:	f004 fe3d 	bl	b9126 <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   b44ac:	f005 fe84 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b44b0:	2218      	movs	r2, #24
   b44b2:	4659      	mov	r1, fp
   b44b4:	f004 fe29 	bl	b910a <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   b44b8:	f005 fe7e 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b44bc:	6803      	ldr	r3, [r0, #0]
   b44be:	691b      	ldr	r3, [r3, #16]
   b44c0:	4798      	blx	r3
   b44c2:	2800      	cmp	r0, #0
   b44c4:	f340 80ba 	ble.w	b463c <_Z16randomizeAddressv+0x20c>
        Serial.println("transmission recieved from: " + String(i));
   b44c8:	f005 fd28 	bl	b9f1c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b44cc:	4651      	mov	r1, sl
   b44ce:	4606      	mov	r6, r0
   b44d0:	a808      	add	r0, sp, #32
   b44d2:	f005 f858 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
   b44d6:	220a      	movs	r2, #10
   b44d8:	4621      	mov	r1, r4
   b44da:	a804      	add	r0, sp, #16
   b44dc:	f005 f8ad 	bl	b963a <_ZN6StringC1Eih>
   b44e0:	a904      	add	r1, sp, #16
   b44e2:	a808      	add	r0, sp, #32
   b44e4:	f005 f8e4 	bl	b96b0 <_ZplRK15StringSumHelperRK6String>
   b44e8:	6801      	ldr	r1, [r0, #0]
   b44ea:	4630      	mov	r0, r6
   b44ec:	f004 ffa1 	bl	b9432 <_ZN5Print7printlnEPKc>
   b44f0:	a804      	add	r0, sp, #16
   b44f2:	f004 fffd 	bl	b94f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b44f6:	a808      	add	r0, sp, #32
   b44f8:	f004 fffa 	bl	b94f0 <_ZN6StringD1Ev>
        slaveCount++;
   b44fc:	682b      	ldr	r3, [r5, #0]
        String inputBuffer = "";
   b44fe:	4639      	mov	r1, r7
        slaveCount++;
   b4500:	3301      	adds	r3, #1
        String inputBuffer = "";
   b4502:	4668      	mov	r0, sp
        slaveCount++;
   b4504:	602b      	str	r3, [r5, #0]
        String inputBuffer = "";
   b4506:	f005 f83e 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
   b450a:	2618      	movs	r6, #24
        char c;
        for(int j = 0; j < 24; j++){
          c = Wire.read();
   b450c:	f005 fe54 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b4510:	6803      	ldr	r3, [r0, #0]
   b4512:	695b      	ldr	r3, [r3, #20]
   b4514:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b4516:	b2c1      	uxtb	r1, r0
   b4518:	4668      	mov	r0, sp
   b451a:	f005 f8bc 	bl	b9696 <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   b451e:	3e01      	subs	r6, #1
   b4520:	d1f4      	bne.n	b450c <_Z16randomizeAddressv+0xdc>
          inputBuffer += c;
        }
        Wire.beginTransmission(i);
   b4522:	f005 fe49 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b4526:	4621      	mov	r1, r4
   b4528:	f004 fdf6 	bl	b9118 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   b452c:	f005 fe44 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b4530:	9900      	ldr	r1, [sp, #0]
   b4532:	f7ff fe8b 	bl	b424c <_ZN5Print5writeEPKc.isra.0>
        Serial.println("device id: " + inputBuffer);
   b4536:	f005 fcf1 	bl	b9f1c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b453a:	4961      	ldr	r1, [pc, #388]	; (b46c0 <_Z16randomizeAddressv+0x290>)
   b453c:	4606      	mov	r6, r0
   b453e:	a808      	add	r0, sp, #32
   b4540:	f005 f821 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
   b4544:	4669      	mov	r1, sp
   b4546:	a808      	add	r0, sp, #32
   b4548:	f005 f8b2 	bl	b96b0 <_ZplRK15StringSumHelperRK6String>
   b454c:	6801      	ldr	r1, [r0, #0]
   b454e:	4630      	mov	r0, r6
   b4550:	f004 ff6f 	bl	b9432 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4554:	a808      	add	r0, sp, #32
   b4556:	f004 ffcb 	bl	b94f0 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b455a:	f005 fe2d 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b455e:	f004 fde2 	bl	b9126 <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   b4562:	f005 fcdb 	bl	b9f1c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4566:	4957      	ldr	r1, [pc, #348]	; (b46c4 <_Z16randomizeAddressv+0x294>)
   b4568:	4606      	mov	r6, r0
   b456a:	a808      	add	r0, sp, #32
   b456c:	f005 f80b 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
   b4570:	220a      	movs	r2, #10
   b4572:	4621      	mov	r1, r4
   b4574:	a804      	add	r0, sp, #16
   b4576:	f005 f860 	bl	b963a <_ZN6StringC1Eih>
   b457a:	a904      	add	r1, sp, #16
   b457c:	a808      	add	r0, sp, #32
   b457e:	f005 f897 	bl	b96b0 <_ZplRK15StringSumHelperRK6String>
   b4582:	6801      	ldr	r1, [r0, #0]
   b4584:	4630      	mov	r0, r6
   b4586:	f004 ff54 	bl	b9432 <_ZN5Print7printlnEPKc>
   b458a:	a804      	add	r0, sp, #16
   b458c:	f004 ffb0 	bl	b94f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4590:	a808      	add	r0, sp, #32
   b4592:	f004 ffad 	bl	b94f0 <_ZN6StringD1Ev>

        Wire.beginTransmission(i);
   b4596:	f005 fe0f 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b459a:	4621      	mov	r1, r4
   b459c:	f004 fdbc 	bl	b9118 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   b45a0:	f005 fe0a 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b45a4:	2132      	movs	r1, #50	; 0x32
   b45a6:	f7ff fe4d 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b45aa:	f005 fe05 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b45ae:	f004 fdba 	bl	b9126 <_ZN7TwoWire15endTransmissionEv>

        Serial.println("request code 2, address: " + String(i));
   b45b2:	f005 fcb3 	bl	b9f1c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b45b6:	4944      	ldr	r1, [pc, #272]	; (b46c8 <_Z16randomizeAddressv+0x298>)
   b45b8:	4606      	mov	r6, r0
   b45ba:	a808      	add	r0, sp, #32
   b45bc:	f004 ffe3 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
   b45c0:	220a      	movs	r2, #10
   b45c2:	4621      	mov	r1, r4
   b45c4:	a804      	add	r0, sp, #16
   b45c6:	f005 f838 	bl	b963a <_ZN6StringC1Eih>
   b45ca:	a904      	add	r1, sp, #16
   b45cc:	a808      	add	r0, sp, #32
   b45ce:	f005 f86f 	bl	b96b0 <_ZplRK15StringSumHelperRK6String>
   b45d2:	6801      	ldr	r1, [r0, #0]
   b45d4:	4630      	mov	r0, r6
   b45d6:	f004 ff2c 	bl	b9432 <_ZN5Print7printlnEPKc>
   b45da:	a804      	add	r0, sp, #16
   b45dc:	f004 ff88 	bl	b94f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b45e0:	a808      	add	r0, sp, #32
   b45e2:	f004 ff85 	bl	b94f0 <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   b45e6:	f005 fde7 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b45ea:	2204      	movs	r2, #4
   b45ec:	4659      	mov	r1, fp
   b45ee:	f004 fd8c 	bl	b910a <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   b45f2:	4639      	mov	r1, r7
   b45f4:	4668      	mov	r0, sp
   b45f6:	f005 f80e 	bl	b9616 <_ZN6StringaSEPKc>
   b45fa:	2604      	movs	r6, #4
        for(int j = 0; j < 4; j++){
          inputBuffer += (char)Wire.read();
   b45fc:	f005 fddc 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b4600:	6803      	ldr	r3, [r0, #0]
   b4602:	695b      	ldr	r3, [r3, #20]
   b4604:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b4606:	b2c1      	uxtb	r1, r0
   b4608:	4668      	mov	r0, sp
   b460a:	f005 f844 	bl	b9696 <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   b460e:	3e01      	subs	r6, #1
   b4610:	d1f4      	bne.n	b45fc <_Z16randomizeAddressv+0x1cc>
        }
        
        Serial.println("conflict verification: " + inputBuffer);
   b4612:	f005 fc83 	bl	b9f1c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4616:	492d      	ldr	r1, [pc, #180]	; (b46cc <_Z16randomizeAddressv+0x29c>)
   b4618:	4606      	mov	r6, r0
   b461a:	a808      	add	r0, sp, #32
   b461c:	f004 ffb3 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
   b4620:	4669      	mov	r1, sp
   b4622:	a808      	add	r0, sp, #32
   b4624:	f005 f844 	bl	b96b0 <_ZplRK15StringSumHelperRK6String>
   b4628:	6801      	ldr	r1, [r0, #0]
   b462a:	4630      	mov	r0, r6
   b462c:	f004 ff01 	bl	b9432 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4630:	a808      	add	r0, sp, #32
   b4632:	f004 ff5d 	bl	b94f0 <_ZN6StringD1Ev>
        String inputBuffer = "";
   b4636:	4668      	mov	r0, sp
   b4638:	f004 ff5a 	bl	b94f0 <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   b463c:	3401      	adds	r4, #1
   b463e:	2c78      	cmp	r4, #120	; 0x78
   b4640:	f47f af0a 	bne.w	b4458 <_Z16randomizeAddressv+0x28>
   b4644:	e6fa      	b.n	b443c <_Z16randomizeAddressv+0xc>
      }
    }
  }

  Serial.println("\nConnected to: ");
   b4646:	f005 fc69 	bl	b9f1c <_Z16_fetch_usbserialv>
   b464a:	4921      	ldr	r1, [pc, #132]	; (b46d0 <_Z16randomizeAddressv+0x2a0>)
    Wire.endTransmission();

    Wire.requestFrom(i, 24);
    if(Wire.available() > 0){
      Serial.print(i);
      Serial.print(", ");
   b464c:	4e21      	ldr	r6, [pc, #132]	; (b46d4 <_Z16randomizeAddressv+0x2a4>)
	return *(this->_M_impl._M_start + __n);
   b464e:	4f22      	ldr	r7, [pc, #136]	; (b46d8 <_Z16randomizeAddressv+0x2a8>)
  Serial.println("\nConnected to: ");
   b4650:	f004 feef 	bl	b9432 <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   b4654:	2408      	movs	r4, #8
  int count = 0;
   b4656:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   b4658:	f005 fdae 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b465c:	4621      	mov	r1, r4
   b465e:	f004 fd5b 	bl	b9118 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   b4662:	f005 fda9 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b4666:	2131      	movs	r1, #49	; 0x31
   b4668:	f7ff fdec 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b466c:	f005 fda4 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b4670:	f004 fd59 	bl	b9126 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   b4674:	f005 fda0 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b4678:	2218      	movs	r2, #24
   b467a:	b2e1      	uxtb	r1, r4
   b467c:	f004 fd45 	bl	b910a <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   b4680:	f005 fd9a 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b4684:	6803      	ldr	r3, [r0, #0]
   b4686:	691b      	ldr	r3, [r3, #16]
   b4688:	4798      	blx	r3
   b468a:	2800      	cmp	r0, #0
   b468c:	dd0e      	ble.n	b46ac <_Z16randomizeAddressv+0x27c>
      Serial.print(i);
   b468e:	f005 fc45 	bl	b9f1c <_Z16_fetch_usbserialv>
   b4692:	220a      	movs	r2, #10
   b4694:	4621      	mov	r1, r4
   b4696:	f7ff fd8b 	bl	b41b0 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
      Serial.print(", ");
   b469a:	f005 fc3f 	bl	b9f1c <_Z16_fetch_usbserialv>
   b469e:	4631      	mov	r1, r6
   b46a0:	f004 feb4 	bl	b940c <_ZN5Print5printEPKc>

      addressArr[count++] = i;
   b46a4:	683b      	ldr	r3, [r7, #0]
   b46a6:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
   b46aa:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   b46ac:	3401      	adds	r4, #1
   b46ae:	2c78      	cmp	r4, #120	; 0x78
   b46b0:	d1d2      	bne.n	b4658 <_Z16randomizeAddressv+0x228>
  //         greenLineAdr[1] = sequenceArr[2 * i + 1];
  //       }
  //     }
  //   }
  // }
}
   b46b2:	b00d      	add	sp, #52	; 0x34
   b46b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b46b8:	2003e6a8 	.word	0x2003e6a8
   b46bc:	000bd7d2 	.word	0x000bd7d2
   b46c0:	000bd416 	.word	0x000bd416
   b46c4:	000bd422 	.word	0x000bd422
   b46c8:	000bd439 	.word	0x000bd439
   b46cc:	000bd453 	.word	0x000bd453
   b46d0:	000bd46b 	.word	0x000bd46b
   b46d4:	000bd5dd 	.word	0x000bd5dd
   b46d8:	20035530 	.word	0x20035530
   b46dc:	200352f4 	.word	0x200352f4
   b46e0:	000bd3de 	.word	0x000bd3de
   b46e4:	000bd3f9 	.word	0x000bd3f9

000b46e8 <_Z17acquireWireBufferv>:
    }
  }
  bleCount++;
}

hal_i2c_config_t acquireWireBuffer() {
   b46e8:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b46ea:	f44f 7500 	mov.w	r5, #512	; 0x200
   b46ee:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b46f0:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b46f2:	6003      	str	r3, [r0, #0]
   b46f4:	6085      	str	r5, [r0, #8]
   b46f6:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b46f8:	4905      	ldr	r1, [pc, #20]	; (b4710 <_Z17acquireWireBufferv+0x28>)
   b46fa:	4628      	mov	r0, r5
   b46fc:	f005 fdc0 	bl	ba280 <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4700:	4903      	ldr	r1, [pc, #12]	; (b4710 <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b4702:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4704:	4628      	mov	r0, r5
   b4706:	f005 fdbb 	bl	ba280 <_ZnajRKSt9nothrow_t>
    };
   b470a:	60e0      	str	r0, [r4, #12]
    return config;
   b470c:	4620      	mov	r0, r4
   b470e:	bd38      	pop	{r3, r4, r5, pc}
   b4710:	000bdbd8 	.word	0x000bdbd8

000b4714 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4714:	b510      	push	{r4, lr}
   b4716:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4718:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b471a:	b118      	cbz	r0, b4724 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b471c:	68a1      	ldr	r1, [r4, #8]
   b471e:	1a09      	subs	r1, r1, r0
   b4720:	f7ff fcbf 	bl	b40a2 <_ZdlPvj>
      }
   b4724:	4620      	mov	r0, r4
   b4726:	bd10      	pop	{r4, pc}

000b4728 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4728:	b510      	push	{r4, lr}
   b472a:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b472c:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b472e:	b118      	cbz	r0, b4738 <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4730:	68a1      	ldr	r1, [r4, #8]
   b4732:	1a09      	subs	r1, r1, r0
   b4734:	f7ff fcb5 	bl	b40a2 <_ZdlPvj>
      }
   b4738:	4620      	mov	r0, r4
   b473a:	bd10      	pop	{r4, pc}

000b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b473c:	b510      	push	{r4, lr}
   b473e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4740:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4742:	b118      	cbz	r0, b474c <_ZNSt12_Vector_baseIiSaIiEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4744:	68a1      	ldr	r1, [r4, #8]
   b4746:	1a09      	subs	r1, r1, r0
   b4748:	f7ff fcab 	bl	b40a2 <_ZdlPvj>
      }
   b474c:	4620      	mov	r0, r4
   b474e:	bd10      	pop	{r4, pc}

000b4750 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b4750:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4752:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b4756:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   b4758:	42ae      	cmp	r6, r5
   b475a:	d004      	beq.n	b4766 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x16>
      { _M_dispose(); }
   b475c:	4628      	mov	r0, r5
   b475e:	f005 fdc9 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4762:	3518      	adds	r5, #24
   b4764:	e7f8      	b.n	b4758 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b4766:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4768:	b118      	cbz	r0, b4772 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b476a:	68a1      	ldr	r1, [r4, #8]
   b476c:	1a09      	subs	r1, r1, r0
   b476e:	f7ff fc98 	bl	b40a2 <_ZdlPvj>
      }
   b4772:	4620      	mov	r0, r4
   b4774:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4778 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>:

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4778:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      vector(size_type __n, const value_type& __value,
   b477c:	b570      	push	{r4, r5, r6, lr}
   b477e:	4604      	mov	r4, r0
   b4780:	460d      	mov	r5, r1
   b4782:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4784:	d302      	bcc.n	b478c <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x14>
	  __throw_length_error(
   b4786:	480c      	ldr	r0, [pc, #48]	; (b47b8 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x40>)
   b4788:	f005 fd82 	bl	ba290 <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b478c:	2300      	movs	r3, #0
   b478e:	e9c0 3300 	strd	r3, r3, [r0]
   b4792:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4794:	4608      	mov	r0, r1
   b4796:	f7ff fcf1 	bl	b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b479a:	eb00 0385 	add.w	r3, r0, r5, lsl #2
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b479e:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47a2:	60a3      	str	r3, [r4, #8]
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   b47a4:	b12d      	cbz	r5, b47b2 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   b47a6:	6832      	ldr	r2, [r6, #0]
      for (; __first != __last; ++__first)
   b47a8:	4283      	cmp	r3, r0
   b47aa:	d002      	beq.n	b47b2 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
	*__first = __tmp;
   b47ac:	f840 2b04 	str.w	r2, [r0], #4
      for (; __first != __last; ++__first)
   b47b0:	e7fa      	b.n	b47a8 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x30>
	this->_M_impl._M_finish =
   b47b2:	6060      	str	r0, [r4, #4]
      { _M_fill_initialize(__n, __value); }
   b47b4:	4620      	mov	r0, r4
   b47b6:	bd70      	pop	{r4, r5, r6, pc}
   b47b8:	000bd47b 	.word	0x000bd47b

000b47bc <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   b47bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47c0:	2400      	movs	r4, #0
      vector(initializer_list<value_type> __l,
   b47c2:	ab02      	add	r3, sp, #8
   b47c4:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47c8:	e9c0 4400 	strd	r4, r4, [r0]
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   b47cc:	4613      	mov	r3, r2
      vector(initializer_list<value_type> __l,
   b47ce:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b47d0:	6084      	str	r4, [r0, #8]
   b47d2:	00d7      	lsls	r7, r2, #3
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b47d4:	f342 001c 	sbfx	r0, r2, #0, #29
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b47d8:	4a10      	ldr	r2, [pc, #64]	; (b481c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x60>)
   b47da:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   b47de:	4688      	mov	r8, r1
   b47e0:	d202      	bcs.n	b47e8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x2c>
	  __throw_length_error(
   b47e2:	480f      	ldr	r0, [pc, #60]	; (b4820 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x64>)
   b47e4:	f005 fd54 	bl	ba290 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b47e8:	f7ff fcd5 	bl	b4196 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47ec:	19c6      	adds	r6, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b47ee:	4602      	mov	r2, r0
   b47f0:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b47f2:	60ae      	str	r6, [r5, #8]
   b47f4:	4623      	mov	r3, r4
   b47f6:	429f      	cmp	r7, r3
   b47f8:	d00b      	beq.n	b4812 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x56>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b47fa:	18d4      	adds	r4, r2, r3
   b47fc:	bf1c      	itt	ne
   b47fe:	eb08 0103 	addne.w	r1, r8, r3
   b4802:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b4806:	f103 0308 	add.w	r3, r3, #8
   b480a:	bf18      	it	ne
   b480c:	e9c4 0100 	strdne	r0, r1, [r4]
   b4810:	e7f1      	b.n	b47f6 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x3a>
      }
   b4812:	4628      	mov	r0, r5
	  this->_M_impl._M_finish =
   b4814:	606e      	str	r6, [r5, #4]
      }
   b4816:	b002      	add	sp, #8
   b4818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b481c:	7ffffff8 	.word	0x7ffffff8
   b4820:	000bd47b 	.word	0x000bd47b

000b4824 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>:
      vector(initializer_list<value_type> __l,
   b4824:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4828:	ab02      	add	r3, sp, #8
   b482a:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b482e:	2300      	movs	r3, #0
   b4830:	e9c0 3300 	strd	r3, r3, [r0]
   b4834:	6083      	str	r3, [r0, #8]
   b4836:	4616      	mov	r6, r2
   b4838:	2318      	movs	r3, #24
   b483a:	435e      	muls	r6, r3
   b483c:	4b10      	ldr	r3, [pc, #64]	; (b4880 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x5c>)
      vector(initializer_list<value_type> __l,
   b483e:	4604      	mov	r4, r0
   b4840:	10f0      	asrs	r0, r6, #3
   b4842:	4358      	muls	r0, r3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4844:	4b0f      	ldr	r3, [pc, #60]	; (b4884 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x60>)
   b4846:	429e      	cmp	r6, r3
   b4848:	460f      	mov	r7, r1
   b484a:	eb01 0806 	add.w	r8, r1, r6
   b484e:	d902      	bls.n	b4856 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x32>
	  __throw_length_error(
   b4850:	480d      	ldr	r0, [pc, #52]	; (b4888 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x64>)
   b4852:	f005 fd1d 	bl	ba290 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4856:	f7ff fc7f 	bl	b4158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b485a:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b485c:	4605      	mov	r5, r0
   b485e:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4860:	60a6      	str	r6, [r4, #8]
   b4862:	45b8      	cmp	r8, r7
   b4864:	d007      	beq.n	b4876 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x52>
   b4866:	b11d      	cbz	r5, b4870 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x4c>
   b4868:	4639      	mov	r1, r7
   b486a:	4628      	mov	r0, r5
   b486c:	f7ff fcc4 	bl	b41f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4870:	3718      	adds	r7, #24
   b4872:	3518      	adds	r5, #24
   b4874:	e7f5      	b.n	b4862 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x3e>
      }
   b4876:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
   b4878:	6065      	str	r5, [r4, #4]
      }
   b487a:	b002      	add	sp, #8
   b487c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4880:	aaaaaaab 	.word	0xaaaaaaab
   b4884:	7ffffff8 	.word	0x7ffffff8
   b4888:	000bd47b 	.word	0x000bd47b

000b488c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b488e:	e9d1 3700 	ldrd	r3, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4892:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4894:	1aff      	subs	r7, r7, r3
      vector(const vector& __x)
   b4896:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4898:	e9c0 5500 	strd	r5, r5, [r0]
   b489c:	6085      	str	r5, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b489e:	10f8      	asrs	r0, r7, #3
      vector(const vector& __x)
   b48a0:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48a2:	f7ff fc78 	bl	b4196 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b48a6:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b48aa:	4407      	add	r7, r0
   b48ac:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b48ae:	e9d6 7600 	ldrd	r7, r6, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b48b2:	4602      	mov	r2, r0
   b48b4:	1bf6      	subs	r6, r6, r7
      : _M_current(__i) { }
   b48b6:	462b      	mov	r3, r5
   b48b8:	42b3      	cmp	r3, r6
   b48ba:	eb02 0503 	add.w	r5, r2, r3
   b48be:	d006      	beq.n	b48ce <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x42>
   b48c0:	b11d      	cbz	r5, b48ca <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x3e>
   b48c2:	18f9      	adds	r1, r7, r3
   b48c4:	c903      	ldmia	r1, {r0, r1}
   b48c6:	e885 0003 	stmia.w	r5, {r0, r1}
   b48ca:	3308      	adds	r3, #8
   b48cc:	e7f4      	b.n	b48b8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b48ce:	6065      	str	r5, [r4, #4]
      }
   b48d0:	4620      	mov	r0, r4
   b48d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
   b48d4:	b508      	push	{r3, lr}
      { return _M_string_length; }
   b48d6:	6842      	ldr	r2, [r0, #4]
	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
    { return (__lhs.size() == __rhs.size()
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b48d8:	684b      	ldr	r3, [r1, #4]
   b48da:	429a      	cmp	r2, r3
   b48dc:	d108      	bne.n	b48f0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1c>
	if (__n == 0)
   b48de:	b14a      	cbz	r2, b48f4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x20>
	return __builtin_memcmp(__s1, __s2, __n);
   b48e0:	6809      	ldr	r1, [r1, #0]
   b48e2:	6800      	ldr	r0, [r0, #0]
   b48e4:	f006 fca6 	bl	bb234 <memcmp>
   b48e8:	fab0 f080 	clz	r0, r0
   b48ec:	0940      	lsrs	r0, r0, #5
						    __lhs.size())); }
   b48ee:	bd08      	pop	{r3, pc}
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b48f0:	2000      	movs	r0, #0
   b48f2:	e7fc      	b.n	b48ee <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>
   b48f4:	2001      	movs	r0, #1
   b48f6:	e7fa      	b.n	b48ee <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>

000b48f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b48f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b48fc:	b0a3      	sub	sp, #140	; 0x8c
   b48fe:	460c      	mov	r4, r1
   b4900:	4606      	mov	r6, r0
  String inputBuffer = "";
   b4902:	49ba      	ldr	r1, [pc, #744]	; (b4bec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f4>)
   b4904:	a803      	add	r0, sp, #12
   b4906:	f004 fe3e 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
  String nameBuffer;
   b490a:	49b8      	ldr	r1, [pc, #736]	; (b4bec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f4>)
   b490c:	a807      	add	r0, sp, #28
   b490e:	f004 fe3a 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
  for(int i = 0; i < len - 1; i++){
   b4912:	2500      	movs	r5, #0
   b4914:	3c01      	subs	r4, #1
   b4916:	42ac      	cmp	r4, r5
   b4918:	d905      	bls.n	b4926 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
	String & operator += (char c)			{concat(c); return (*this);}
   b491a:	5d71      	ldrb	r1, [r6, r5]
   b491c:	a803      	add	r0, sp, #12
   b491e:	f004 feba 	bl	b9696 <_ZN6String6concatEc>
   b4922:	3501      	adds	r5, #1
   b4924:	e7f7      	b.n	b4916 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e>
  switch(bleCount){
   b4926:	4cb2      	ldr	r4, [pc, #712]	; (b4bf0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2f8>)
  Serial.println(inputBuffer);
   b4928:	f005 faf8 	bl	b9f1c <_Z16_fetch_usbserialv>
   b492c:	9903      	ldr	r1, [sp, #12]
   b492e:	f004 fd80 	bl	b9432 <_ZN5Print7printlnEPKc>
  switch(bleCount){
   b4932:	6823      	ldr	r3, [r4, #0]
   b4934:	2b00      	cmp	r3, #0
   b4936:	d05a      	beq.n	b49ee <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf6>
   b4938:	2b01      	cmp	r3, #1
   b493a:	d068      	beq.n	b4a0e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x116>
      nameBuffer = inputBuffer;
   b493c:	a903      	add	r1, sp, #12
   b493e:	a807      	add	r0, sp, #28
   b4940:	f004 fe52 	bl	b95e8 <_ZN6StringaSERKS_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4944:	4dab      	ldr	r5, [pc, #684]	; (b4bf4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2fc>)
      if(bleCount - 2 < railways.size()){
   b4946:	6823      	ldr	r3, [r4, #0]
   b4948:	4eab      	ldr	r6, [pc, #684]	; (b4bf8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x300>)
   b494a:	1e9a      	subs	r2, r3, #2
   b494c:	e9d5 1300 	ldrd	r1, r3, [r5]
   b4950:	1a5b      	subs	r3, r3, r1
   b4952:	109b      	asrs	r3, r3, #2
   b4954:	4373      	muls	r3, r6
   b4956:	429a      	cmp	r2, r3
   b4958:	f080 8127 	bcs.w	b4baa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2b2>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b495c:	49a7      	ldr	r1, [pc, #668]	; (b4bfc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x304>)
   b495e:	a803      	add	r0, sp, #12
   b4960:	f004 fed4 	bl	b970c <_ZNK6String6equalsEPKc>
        if(inputBuffer == "green1" || inputBuffer == "green2"){
   b4964:	2800      	cmp	r0, #0
   b4966:	f000 8091 	beq.w	b4a8c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x194>
          nameBuffer = String(greenLine.name.c_str());
   b496a:	4ba5      	ldr	r3, [pc, #660]	; (b4c00 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x308>)
   b496c:	a80f      	add	r0, sp, #60	; 0x3c
   b496e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4970:	f004 fe09 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
   b4974:	a90f      	add	r1, sp, #60	; 0x3c
   b4976:	a807      	add	r0, sp, #28
   b4978:	f004 fe45 	bl	b9606 <_ZN6StringaSEOS_>
   b497c:	a80f      	add	r0, sp, #60	; 0x3c
   b497e:	f004 fdb7 	bl	b94f0 <_ZN6StringD1Ev>
      { return _M_dataplus._M_p; }
   b4982:	4fa0      	ldr	r7, [pc, #640]	; (b4c04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x30c>)
            railwayIndex = i;
   b4984:	f8df 82a4 	ldr.w	r8, [pc, #676]	; b4c2c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x334>
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4988:	f04f 0900 	mov.w	r9, #0
   b498c:	e9d5 2300 	ldrd	r2, r3, [r5]
   b4990:	1a9b      	subs	r3, r3, r2
   b4992:	109b      	asrs	r3, r3, #2
   b4994:	4373      	muls	r3, r6
        for(int i = 0; i < railways.size(); i++){
   b4996:	454b      	cmp	r3, r9
   b4998:	f240 8083 	bls.w	b4aa2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1aa>
          if(nameBuffer != String(purpleLine.name.c_str()) && String(railways[i].name.c_str()) == nameBuffer){
   b499c:	6b39      	ldr	r1, [r7, #48]	; 0x30
   b499e:	a80b      	add	r0, sp, #44	; 0x2c
   b49a0:	f004 fdf1 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
   b49a4:	a90b      	add	r1, sp, #44	; 0x2c
   b49a6:	a807      	add	r0, sp, #28
   b49a8:	f004 fea3 	bl	b96f2 <_ZNK6String6equalsERKS_>
   b49ac:	2800      	cmp	r0, #0
   b49ae:	d175      	bne.n	b4a9c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1a4>
   b49b0:	682b      	ldr	r3, [r5, #0]
   b49b2:	226c      	movs	r2, #108	; 0x6c
   b49b4:	fb02 3309 	mla	r3, r2, r9, r3
   b49b8:	a80f      	add	r0, sp, #60	; 0x3c
   b49ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b49bc:	f004 fde3 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b49c0:	a907      	add	r1, sp, #28
   b49c2:	a80f      	add	r0, sp, #60	; 0x3c
   b49c4:	f004 fe95 	bl	b96f2 <_ZNK6String6equalsERKS_>
   b49c8:	f1b0 0a00 	subs.w	sl, r0, #0
   b49cc:	a80f      	add	r0, sp, #60	; 0x3c
   b49ce:	bf18      	it	ne
   b49d0:	f04f 0a01 	movne.w	sl, #1
   b49d4:	f004 fd8c 	bl	b94f0 <_ZN6StringD1Ev>
   b49d8:	a80b      	add	r0, sp, #44	; 0x2c
   b49da:	f004 fd89 	bl	b94f0 <_ZN6StringD1Ev>
   b49de:	f1ba 0f00 	cmp.w	sl, #0
   b49e2:	d001      	beq.n	b49e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>
            railwayIndex = i;
   b49e4:	f8c8 9000 	str.w	r9, [r8]
        for(int i = 0; i < railways.size(); i++){
   b49e8:	f109 0901 	add.w	r9, r9, #1
   b49ec:	e7ce      	b.n	b498c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>
      SSID = inputBuffer;
   b49ee:	4886      	ldr	r0, [pc, #536]	; (b4c08 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x310>)
   b49f0:	a903      	add	r1, sp, #12
   b49f2:	f004 fdf9 	bl	b95e8 <_ZN6StringaSERKS_>
  bleCount++;
   b49f6:	6823      	ldr	r3, [r4, #0]
  String nameBuffer;
   b49f8:	a807      	add	r0, sp, #28
  bleCount++;
   b49fa:	3301      	adds	r3, #1
   b49fc:	6023      	str	r3, [r4, #0]
  String nameBuffer;
   b49fe:	f004 fd77 	bl	b94f0 <_ZN6StringD1Ev>
  String inputBuffer = "";
   b4a02:	a803      	add	r0, sp, #12
   b4a04:	f004 fd74 	bl	b94f0 <_ZN6StringD1Ev>
}
   b4a08:	b023      	add	sp, #140	; 0x8c
   b4a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      password = inputBuffer;
   b4a0e:	4d7f      	ldr	r5, [pc, #508]	; (b4c0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x314>)
   b4a10:	a903      	add	r1, sp, #12
   b4a12:	4628      	mov	r0, r5
   b4a14:	f004 fde8 	bl	b95e8 <_ZN6StringaSERKS_>
	const char * c_str() const { return buffer; }
   b4a18:	4b7b      	ldr	r3, [pc, #492]	; (b4c08 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x310>)
   b4a1a:	682e      	ldr	r6, [r5, #0]
   b4a1c:	f8d3 8000 	ldr.w	r8, [r3]
   b4a20:	f1b8 0f00 	cmp.w	r8, #0
   b4a24:	d02e      	beq.n	b4a84 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18c>
   b4a26:	4640      	mov	r0, r8
   b4a28:	f006 fc84 	bl	bb334 <strlen>
   b4a2c:	4607      	mov	r7, r0
   b4a2e:	b35e      	cbz	r6, b4a88 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x190>
   b4a30:	4630      	mov	r0, r6
   b4a32:	f006 fc7f 	bl	bb334 <strlen>
   b4a36:	4605      	mov	r5, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b4a38:	2238      	movs	r2, #56	; 0x38
   b4a3a:	2100      	movs	r1, #0
   b4a3c:	a814      	add	r0, sp, #80	; 0x50
   b4a3e:	f006 fc31 	bl	bb2a4 <memset>
        creds.size = sizeof(creds);
   b4a42:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   b4a44:	e9cd 380f 	strd	r3, r8, [sp, #60]	; 0x3c
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a48:	4871      	ldr	r0, [pc, #452]	; (b4c10 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x318>)
        creds.password_len = passwordLen;
   b4a4a:	9513      	str	r5, [sp, #76]	; 0x4c
        creds.security = WLanSecurityType(security);
   b4a4c:	2303      	movs	r3, #3
   b4a4e:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a52:	2300      	movs	r3, #0
   b4a54:	aa0f      	add	r2, sp, #60	; 0x3c
   b4a56:	4619      	mov	r1, r3
   b4a58:	6840      	ldr	r0, [r0, #4]
        creds.password = password;
   b4a5a:	e9cd 7611 	strd	r7, r6, [sp, #68]	; 0x44
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4a5e:	f003 f8eb 	bl	b7c38 <network_set_credentials>
      Wire.beginTransmission(addressArr[0]);
   b4a62:	f005 fba9 	bl	ba1b8 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b4a66:	4b6b      	ldr	r3, [pc, #428]	; (b4c14 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x31c>)
   b4a68:	681b      	ldr	r3, [r3, #0]
   b4a6a:	6819      	ldr	r1, [r3, #0]
   b4a6c:	f004 fb54 	bl	b9118 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('3');
   b4a70:	f005 fba2 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b4a74:	2133      	movs	r1, #51	; 0x33
   b4a76:	f7ff fbe5 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4a7a:	f005 fb9d 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b4a7e:	f004 fb52 	bl	b9126 <_ZN7TwoWire15endTransmissionEv>
      break;
   b4a82:	e7b8      	b.n	b49f6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfe>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   b4a84:	4647      	mov	r7, r8
   b4a86:	e7d2      	b.n	b4a2e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x136>
   b4a88:	4635      	mov	r5, r6
   b4a8a:	e7d5      	b.n	b4a38 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4a8c:	4962      	ldr	r1, [pc, #392]	; (b4c18 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x320>)
   b4a8e:	a803      	add	r0, sp, #12
   b4a90:	f004 fe3c 	bl	b970c <_ZNK6String6equalsEPKc>
        if(inputBuffer == "green1" || inputBuffer == "green2"){
   b4a94:	2800      	cmp	r0, #0
   b4a96:	f47f af68 	bne.w	b496a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x72>
   b4a9a:	e772      	b.n	b4982 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8a>
          if(nameBuffer != String(purpleLine.name.c_str()) && String(railways[i].name.c_str()) == nameBuffer){
   b4a9c:	f04f 0a00 	mov.w	sl, #0
   b4aa0:	e79a      	b.n	b49d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe0>
        if(railwayIndex == -1){
   b4aa2:	f8df 8188 	ldr.w	r8, [pc, #392]	; b4c2c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x334>
   b4aa6:	f8d8 3000 	ldr.w	r3, [r8]
   b4aaa:	3301      	adds	r3, #1
   b4aac:	d103      	bne.n	b4ab6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1be>
          bleCount--;
   b4aae:	6823      	ldr	r3, [r4, #0]
   b4ab0:	3b01      	subs	r3, #1
   b4ab2:	6023      	str	r3, [r4, #0]
          break;
   b4ab4:	e79f      	b.n	b49f6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfe>
   b4ab6:	f8df b178 	ldr.w	fp, [pc, #376]	; b4c30 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x338>
          if(railways[railwayIndex].outputs[i].size() == 0 || railways[railwayIndex].name == purpleLine.name){
   b4aba:	f8df 9178 	ldr.w	r9, [pc, #376]	; b4c34 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x33c>
   b4abe:	f8df a154 	ldr.w	sl, [pc, #340]	; b4c14 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x31c>
        for(int i = 0; i < 2; i++){
   b4ac2:	2700      	movs	r7, #0
          if(railways[railwayIndex].outputs[i].size() == 0 || railways[railwayIndex].name == purpleLine.name){
   b4ac4:	f8d8 3000 	ldr.w	r3, [r8]
   b4ac8:	6828      	ldr	r0, [r5, #0]
   b4aca:	226c      	movs	r2, #108	; 0x6c
   b4acc:	fb02 0003 	mla	r0, r2, r3, r0
   b4ad0:	210c      	movs	r1, #12
   b4ad2:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
   b4ad6:	f8db 2000 	ldr.w	r2, [fp]
   b4ada:	4379      	muls	r1, r7
   b4adc:	eb0c 0e01 	add.w	lr, ip, r1
   b4ae0:	f85c 1001 	ldr.w	r1, [ip, r1]
   b4ae4:	f8de e004 	ldr.w	lr, [lr, #4]
   b4ae8:	458e      	cmp	lr, r1
            sequenceArr[2 * railwayIndex + i] = addressArr[bleCount - 2];
   b4aea:	eb07 0343 	add.w	r3, r7, r3, lsl #1
          if(railways[railwayIndex].outputs[i].size() == 0 || railways[railwayIndex].name == purpleLine.name){
   b4aee:	d032      	beq.n	b4b56 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x25e>
   b4af0:	4649      	mov	r1, r9
   b4af2:	3030      	adds	r0, #48	; 0x30
   b4af4:	e9cd 3200 	strd	r3, r2, [sp]
   b4af8:	f7ff feec 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b4afc:	e9dd 3200 	ldrd	r3, r2, [sp]
   b4b00:	bb48      	cbnz	r0, b4b56 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x25e>
   b4b02:	6821      	ldr	r1, [r4, #0]
            sequenceArr[2 * railwayIndex + i] = addressArr[bleCount - 2];
   b4b04:	f8da 0000 	ldr.w	r0, [sl]
   b4b08:	3902      	subs	r1, #2
   b4b0a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   b4b0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if(inputBuffer == String(brownLine.name.c_str())){
   b4b12:	4b42      	ldr	r3, [pc, #264]	; (b4c1c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x324>)
   b4b14:	a80f      	add	r0, sp, #60	; 0x3c
   b4b16:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b4b18:	f004 fd35 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b4b1c:	a90f      	add	r1, sp, #60	; 0x3c
   b4b1e:	a803      	add	r0, sp, #12
   b4b20:	f004 fde7 	bl	b96f2 <_ZNK6String6equalsERKS_>
   b4b24:	9000      	str	r0, [sp, #0]
   b4b26:	a80f      	add	r0, sp, #60	; 0x3c
   b4b28:	f004 fce2 	bl	b94f0 <_ZN6StringD1Ev>
   b4b2c:	9b00      	ldr	r3, [sp, #0]
   b4b2e:	2b00      	cmp	r3, #0
   b4b30:	f040 8082 	bne.w	b4c38 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x340>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4b34:	4931      	ldr	r1, [pc, #196]	; (b4bfc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x304>)
   b4b36:	a803      	add	r0, sp, #12
   b4b38:	f004 fde8 	bl	b970c <_ZNK6String6equalsEPKc>
            }else if(inputBuffer == "green1"){
   b4b3c:	2800      	cmp	r0, #0
   b4b3e:	f000 8086 	beq.w	b4c4e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x356>
              greenLineAdr[0] = sequenceArr[2 * railwayIndex];
   b4b42:	f8db 3000 	ldr.w	r3, [fp]
   b4b46:	f8d8 2000 	ldr.w	r2, [r8]
   b4b4a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
   b4b4e:	4b34      	ldr	r3, [pc, #208]	; (b4c20 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x328>)
   b4b50:	e07b      	b.n	b4c4a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x352>
   b4b52:	2701      	movs	r7, #1
   b4b54:	e7b6      	b.n	b4ac4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1cc>
            sequenceArr[2 * railwayIndex + i] = 0;
   b4b56:	2100      	movs	r1, #0
   b4b58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for(int i = 0; i < 2; i++){
   b4b5c:	2f00      	cmp	r7, #0
   b4b5e:	d0f8      	beq.n	b4b52 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x25a>
        Wire.beginTransmission(addressArr[bleCount - 2]);
   b4b60:	f005 fb2a 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b4b64:	4f2b      	ldr	r7, [pc, #172]	; (b4c14 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x31c>)
   b4b66:	6823      	ldr	r3, [r4, #0]
   b4b68:	683a      	ldr	r2, [r7, #0]
   b4b6a:	3b02      	subs	r3, #2
   b4b6c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b4b70:	f004 fad2 	bl	b9118 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('4');
   b4b74:	f005 fb20 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b4b78:	2134      	movs	r1, #52	; 0x34
   b4b7a:	f7ff fb63 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b4b7e:	f005 fb1b 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b4b82:	f004 fad0 	bl	b9126 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(addressArr[bleCount - 1]);
   b4b86:	f005 fb17 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b4b8a:	6823      	ldr	r3, [r4, #0]
   b4b8c:	683a      	ldr	r2, [r7, #0]
   b4b8e:	3b01      	subs	r3, #1
   b4b90:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b4b94:	f004 fac0 	bl	b9118 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('3');
   b4b98:	f005 fb0e 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b4b9c:	2133      	movs	r1, #51	; 0x33
   b4b9e:	f7ff fb51 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b4ba2:	f005 fb09 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b4ba6:	f004 fabe 	bl	b9126 <_ZN7TwoWire15endTransmissionEv>
      if(bleCount - 2 == railways.size() - 1){
   b4baa:	6823      	ldr	r3, [r4, #0]
   b4bac:	1e9a      	subs	r2, r3, #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4bae:	e9d5 1300 	ldrd	r1, r3, [r5]
   b4bb2:	1a5b      	subs	r3, r3, r1
   b4bb4:	109b      	asrs	r3, r3, #2
   b4bb6:	4373      	muls	r3, r6
   b4bb8:	3b01      	subs	r3, #1
   b4bba:	429a      	cmp	r2, r3
   b4bbc:	f47f af1b 	bne.w	b49f6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfe>
        Serial.println("BLE finished");
   b4bc0:	f005 f9ac 	bl	b9f1c <_Z16_fetch_usbserialv>
   b4bc4:	4917      	ldr	r1, [pc, #92]	; (b4c24 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x32c>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4bc6:	4d12      	ldr	r5, [pc, #72]	; (b4c10 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x318>)
   b4bc8:	f004 fc33 	bl	b9432 <_ZN5Print7printlnEPKc>
        userInput = true;
   b4bcc:	4b16      	ldr	r3, [pc, #88]	; (b4c28 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x330>)
        network_on(*this, 0, 0, NULL);
   b4bce:	6868      	ldr	r0, [r5, #4]
   b4bd0:	2201      	movs	r2, #1
   b4bd2:	701a      	strb	r2, [r3, #0]
   b4bd4:	2300      	movs	r3, #0
   b4bd6:	461a      	mov	r2, r3
   b4bd8:	4619      	mov	r1, r3
   b4bda:	f003 f805 	bl	b7be8 <network_on>
        network_connect(*this, flags, 0, NULL);
   b4bde:	2300      	movs	r3, #0
   b4be0:	6868      	ldr	r0, [r5, #4]
   b4be2:	461a      	mov	r2, r3
   b4be4:	4619      	mov	r1, r3
   b4be6:	f002 ffdf 	bl	b7ba8 <network_connect>
    }
   b4bea:	e704      	b.n	b49f6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfe>
   b4bec:	000bd7d2 	.word	0x000bd7d2
   b4bf0:	2003553c 	.word	0x2003553c
   b4bf4:	2003e5bc 	.word	0x2003e5bc
   b4bf8:	684bda13 	.word	0x684bda13
   b4bfc:	000bd4ac 	.word	0x000bd4ac
   b4c00:	2003561c 	.word	0x2003561c
   b4c04:	2003e550 	.word	0x2003e550
   b4c08:	200354d8 	.word	0x200354d8
   b4c0c:	2003e4d4 	.word	0x2003e4d4
   b4c10:	2003e718 	.word	0x2003e718
   b4c14:	20035530 	.word	0x20035530
   b4c18:	000bd4b3 	.word	0x000bd4b3
   b4c1c:	200355ac 	.word	0x200355ac
   b4c20:	20035688 	.word	0x20035688
   b4c24:	000bd4ba 	.word	0x000bd4ba
   b4c28:	2003e6b4 	.word	0x2003e6b4
   b4c2c:	200352f0 	.word	0x200352f0
   b4c30:	2003e69c 	.word	0x2003e69c
   b4c34:	2003e580 	.word	0x2003e580
            brownLineAdr = sequenceArr[2 * railwayIndex + i];
   b4c38:	f8d8 3000 	ldr.w	r3, [r8]
   b4c3c:	f8db 2000 	ldr.w	r2, [fp]
	return *(this->_M_impl._M_start + __n);
   b4c40:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   b4c44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b4c48:	4b09      	ldr	r3, [pc, #36]	; (b4c70 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x378>)
              greenLineAdr[0] = sequenceArr[2 * railwayIndex];
   b4c4a:	601a      	str	r2, [r3, #0]
   b4c4c:	e786      	b.n	b4b5c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x264>
   b4c4e:	4909      	ldr	r1, [pc, #36]	; (b4c74 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x37c>)
   b4c50:	a803      	add	r0, sp, #12
   b4c52:	f004 fd5b 	bl	b970c <_ZNK6String6equalsEPKc>
            }else if(inputBuffer == "green2"){
   b4c56:	2800      	cmp	r0, #0
   b4c58:	d080      	beq.n	b4b5c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x264>
              greenLineAdr[1] = sequenceArr[2 * railwayIndex + 1];
   b4c5a:	f8d8 3000 	ldr.w	r3, [r8]
   b4c5e:	f8db 2000 	ldr.w	r2, [fp]
   b4c62:	005b      	lsls	r3, r3, #1
   b4c64:	3301      	adds	r3, #1
   b4c66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b4c6a:	4b03      	ldr	r3, [pc, #12]	; (b4c78 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x380>)
   b4c6c:	605a      	str	r2, [r3, #4]
   b4c6e:	e775      	b.n	b4b5c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x264>
   b4c70:	20035618 	.word	0x20035618
   b4c74:	000bd4b3 	.word	0x000bd4b3
   b4c78:	20035688 	.word	0x20035688

000b4c7c <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4c7c:	2900      	cmp	r1, #0
      _M_create_storage(size_t __n)
   b4c7e:	b538      	push	{r3, r4, r5, lr}
   b4c80:	4604      	mov	r4, r0
      _M_allocate(size_t __n)
   b4c82:	ea4f 0581 	mov.w	r5, r1, lsl #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4c86:	d00c      	beq.n	b4ca2 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x26>
	if (__n > this->_M_max_size())
   b4c88:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   b4c8c:	d301      	bcc.n	b4c92 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
   b4c8e:	f005 faf9 	bl	ba284 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4c92:	4628      	mov	r0, r5
   b4c94:	f7ff f9ff 	bl	b4096 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4c98:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4c9c:	4428      	add	r0, r5
   b4c9e:	60a0      	str	r0, [r4, #8]
      }
   b4ca0:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4ca2:	4608      	mov	r0, r1
   b4ca4:	e7f8      	b.n	b4c98 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x1c>

000b4ca6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4ca6:	b538      	push	{r3, r4, r5, lr}
   b4ca8:	4604      	mov	r4, r0
   b4caa:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b4cac:	42ac      	cmp	r4, r5
   b4cae:	d004      	beq.n	b4cba <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x14>
      }
   b4cb0:	4620      	mov	r0, r4
   b4cb2:	f7ff fd43 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4cb6:	340c      	adds	r4, #12
   b4cb8:	e7f8      	b.n	b4cac <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x6>
	    std::_Destroy(std::__addressof(*__first));
	}
   b4cba:	bd38      	pop	{r3, r4, r5, pc}

000b4cbc <_ZN7RailwayD1Ev>:
#include "Checkpoint.cpp"
#include <string>

//container for all data for each rail line
class Railway{
   b4cbc:	b510      	push	{r4, lr}
   b4cbe:	4604      	mov	r4, r0
   b4cc0:	3048      	adds	r0, #72	; 0x48
   b4cc2:	f7ff fd45 	bl	b4750 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b4cc6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b4cca:	f005 fb13 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   b4cce:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b4cd2:	f7ff ffe8 	bl	b4ca6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	_M_deallocate(_M_impl._M_start,
   b4cd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b4cd8:	b118      	cbz	r0, b4ce2 <_ZN7RailwayD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4cda:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	::operator delete(__p
   b4cdc:	1a09      	subs	r1, r1, r0
   b4cde:	f7ff f9e0 	bl	b40a2 <_ZdlPvj>
      }
   b4ce2:	f104 0018 	add.w	r0, r4, #24
   b4ce6:	f7ff fd29 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4cea:	f104 000c 	add.w	r0, r4, #12
   b4cee:	f7ff fd1b 	bl	b4728 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4cf2:	4620      	mov	r0, r4
   b4cf4:	f7ff fd0e 	bl	b4714 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b4cf8:	4620      	mov	r0, r4
   b4cfa:	bd10      	pop	{r4, pc}

000b4cfc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b4cfc:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b4cfe:	b510      	push	{r4, lr}
   b4d00:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b4d02:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b4d06:	d005      	beq.n	b4d14 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4d08:	4601      	mov	r1, r0
   b4d0a:	4622      	mov	r2, r4
   b4d0c:	4618      	mov	r0, r3
   b4d0e:	f006 faaf 	bl	bb270 <memmove>
   b4d12:	4603      	mov	r3, r0
	}
   b4d14:	1918      	adds	r0, r3, r4
   b4d16:	bd10      	pop	{r4, pc}

000b4d18 <_ZNSt6vectorIiSaIiEEC1ERKS1_>:
      vector(const vector& __x)
   b4d18:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4d1a:	e9d1 3600 	ldrd	r3, r6, [r1]
   b4d1e:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4d20:	2300      	movs	r3, #0
      vector(const vector& __x)
   b4d22:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4d24:	e9c0 3300 	strd	r3, r3, [r0]
   b4d28:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4d2a:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   b4d2c:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4d2e:	f7ff fa25 	bl	b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4d32:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4d36:	4406      	add	r6, r0
   b4d38:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4d3a:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
   b4d3c:	e9d5 0100 	ldrd	r0, r1, [r5]
   b4d40:	f7ff ffdc 	bl	b4cfc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
   b4d44:	6060      	str	r0, [r4, #4]
      }
   b4d46:	4620      	mov	r0, r4
   b4d48:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>:
      vector(initializer_list<value_type> __l,
   b4d4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b4d4e:	ab04      	add	r3, sp, #16
   b4d50:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4d54:	2300      	movs	r3, #0
   b4d56:	e9c0 3300 	strd	r3, r3, [r0]
   b4d5a:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b4d5c:	4604      	mov	r4, r0
   b4d5e:	4613      	mov	r3, r2
   b4d60:	460e      	mov	r6, r1
   b4d62:	0095      	lsls	r5, r2, #2
   b4d64:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b4d68:	f342 001d 	sbfx	r0, r2, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4d6c:	4a0a      	ldr	r2, [pc, #40]	; (b4d98 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x4c>)
   b4d6e:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b4d72:	d202      	bcs.n	b4d7a <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x2e>
	  __throw_length_error(
   b4d74:	4809      	ldr	r0, [pc, #36]	; (b4d9c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x50>)
   b4d76:	f005 fa8b 	bl	ba290 <_ZSt20__throw_length_errorPKc>
   b4d7a:	9101      	str	r1, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4d7c:	f7ff f9fe 	bl	b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4d80:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4d82:	4602      	mov	r2, r0
   b4d84:	6020      	str	r0, [r4, #0]
   b4d86:	9901      	ldr	r1, [sp, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4d88:	60a5      	str	r5, [r4, #8]
   b4d8a:	4630      	mov	r0, r6
   b4d8c:	f7ff ffb6 	bl	b4cfc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
   b4d90:	6060      	str	r0, [r4, #4]
      }
   b4d92:	b004      	add	sp, #16
   b4d94:	bd70      	pop	{r4, r5, r6, pc}
   b4d96:	bf00      	nop
   b4d98:	7ffffffc 	.word	0x7ffffffc
   b4d9c:	000bd47b 	.word	0x000bd47b

000b4da0 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>:
      if (&__x != this)
   b4da0:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b4da2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4da4:	4604      	mov	r4, r0
   b4da6:	460d      	mov	r5, r1
      if (&__x != this)
   b4da8:	d01d      	beq.n	b4de6 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x46>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4daa:	e9d1 7100 	ldrd	r7, r1, [r1]
			 - this->_M_impl._M_start); }
   b4dae:	6802      	ldr	r2, [r0, #0]
   b4db0:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4db2:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b4db4:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b4db6:	429e      	cmp	r6, r3
   b4db8:	d917      	bls.n	b4dea <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x4a>
	  pointer __result = this->_M_allocate(__n);
   b4dba:	10b0      	asrs	r0, r6, #2
   b4dbc:	9101      	str	r1, [sp, #4]
   b4dbe:	f7ff f9dd 	bl	b417c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
   b4dc2:	9901      	ldr	r1, [sp, #4]
   b4dc4:	4602      	mov	r2, r0
   b4dc6:	4605      	mov	r5, r0
   b4dc8:	4638      	mov	r0, r7
   b4dca:	f7ff ff97 	bl	b4cfc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4dce:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4dd0:	b118      	cbz	r0, b4dda <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x3a>
			    - this->_M_impl._M_start);
   b4dd2:	68a1      	ldr	r1, [r4, #8]
   b4dd4:	1a09      	subs	r1, r1, r0
   b4dd6:	f7ff f964 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4dda:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4ddc:	4435      	add	r5, r6
   b4dde:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4de0:	6823      	ldr	r3, [r4, #0]
   b4de2:	4433      	add	r3, r6
   b4de4:	6063      	str	r3, [r4, #4]
    }
   b4de6:	b003      	add	sp, #12
   b4de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4dea:	6843      	ldr	r3, [r0, #4]
   b4dec:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b4dee:	429e      	cmp	r6, r3
   b4df0:	d803      	bhi.n	b4dfa <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x5a>
   b4df2:	4638      	mov	r0, r7
   b4df4:	f7ff ff82 	bl	b4cfc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   b4df8:	e7f2      	b.n	b4de0 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x40>
   b4dfa:	18f9      	adds	r1, r7, r3
   b4dfc:	4638      	mov	r0, r7
   b4dfe:	f7ff ff7d 	bl	b4cfc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
   b4e02:	e9d4 0200 	ldrd	r0, r2, [r4]
   b4e06:	e9d5 3100 	ldrd	r3, r1, [r5]
   b4e0a:	1a10      	subs	r0, r2, r0
   b4e0c:	4418      	add	r0, r3
   b4e0e:	e7f1      	b.n	b4df4 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x54>

000b4e10 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b4e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4e14:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b4e16:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4e18:	480b      	ldr	r0, [pc, #44]	; (b4e48 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x38>)
   b4e1a:	10a4      	asrs	r4, r4, #2
   b4e1c:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b4e1e:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4e20:	4627      	mov	r7, r4
   b4e22:	4690      	mov	r8, r2
   b4e24:	2f00      	cmp	r7, #0
   b4e26:	dd08      	ble.n	b4e3a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x2a>
	      *__result = *__first;
   b4e28:	4629      	mov	r1, r5
   b4e2a:	4640      	mov	r0, r8
   b4e2c:	f7ff ffb8 	bl	b4da0 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b4e30:	350c      	adds	r5, #12
	      ++__result;
   b4e32:	f108 080c 	add.w	r8, r8, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4e36:	3f01      	subs	r7, #1
   b4e38:	e7f4      	b.n	b4e24 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x14>
	  return __result;
   b4e3a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b4e3e:	200c      	movs	r0, #12
   b4e40:	fb00 6004 	mla	r0, r0, r4, r6
   b4e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4e48:	aaaaaaab 	.word	0xaaaaaaab

000b4e4c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>:
    std::vector<std::string> colors;
    int tripleIndex = -1;
    int loopIndex = -1;
    int lowerLoopBound, upperLoopBound, lowerGreenBound, upperGreenBound;

    Railway(std::vector<Checkpoint> checkpointInput, std::vector<int> scalerInput, std::vector<int> outputSize, std::string nameInput, std::vector<std::string> colorInput, std::vector<int> boundInput = {0, 0, 0, 0}){
   b4e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4e50:	2500      	movs	r5, #0
   b4e52:	4699      	mov	r9, r3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4e54:	f100 0338 	add.w	r3, r0, #56	; 0x38
      { _M_string_length = __length; }
   b4e58:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   b4e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4e60:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
   b4e64:	4604      	mov	r4, r0
   b4e66:	e9c0 5500 	strd	r5, r5, [r0]
   b4e6a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b4e6e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b4e72:	e9c0 5506 	strd	r5, r5, [r0, #24]
   b4e76:	e9c0 5508 	strd	r5, r5, [r0, #32]
   b4e7a:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
   b4e7e:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
   b4e82:	b099      	sub	sp, #100	; 0x64
      { __c1 = __c2; }
   b4e84:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
   b4e88:	6505      	str	r5, [r0, #80]	; 0x50
   b4e8a:	4692      	mov	sl, r2
   b4e8c:	f100 0b18 	add.w	fp, r0, #24
   b4e90:	f100 0830 	add.w	r8, r0, #48	; 0x30
   b4e94:	f100 0748 	add.w	r7, r0, #72	; 0x48
      checkpoints = checkpointInput;
   b4e98:	f7ff f9ea 	bl	b4270 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4e9c:	e9d4 2300 	ldrd	r2, r3, [r4]
   b4ea0:	1a9b      	subs	r3, r3, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4ea2:	42ab      	cmp	r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4ea4:	ea4f 01e3 	mov.w	r1, r3, asr #3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4ea8:	da02      	bge.n	b4eb0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x64>
	  __throw_length_error(
   b4eaa:	485f      	ldr	r0, [pc, #380]	; (b5028 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1dc>)
   b4eac:	f005 f9f0 	bl	ba290 <_ZSt20__throw_length_errorPKc>
      { _M_create_storage(__n); }
   b4eb0:	a809      	add	r0, sp, #36	; 0x24
   b4eb2:	9101      	str	r1, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4eb4:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   b4eb8:	950b      	str	r5, [sp, #44]	; 0x2c
      { _M_create_storage(__n); }
   b4eba:	f7ff fedf 	bl	b4c7c <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
      if (__n <= 0)
   b4ebe:	9901      	ldr	r1, [sp, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
   b4ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
   b4ec2:	b131      	cbz	r1, b4ed2 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x86>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   b4ec4:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	*__first = __tmp;
   b4ec8:	008a      	lsls	r2, r1, #2
   b4eca:	4629      	mov	r1, r5
   b4ecc:	f006 f9ea 	bl	bb2a4 <memset>
   b4ed0:	4630      	mov	r0, r6
	  _M_finish = __x._M_finish;
   b4ed2:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
	  _M_start = __x._M_start;
   b4ed6:	9909      	ldr	r1, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b4ed8:	6963      	ldr	r3, [r4, #20]
   b4eda:	930e      	str	r3, [sp, #56]	; 0x38
	  _M_finish = __x._M_finish;
   b4edc:	e9c4 1003 	strd	r1, r0, [r4, #12]
      }
   b4ee0:	ae0c      	add	r6, sp, #48	; 0x30
	  _M_end_of_storage = __x._M_end_of_storage;
   b4ee2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   b4ee4:	6161      	str	r1, [r4, #20]
	  _M_finish = __x._M_finish;
   b4ee6:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
      }
   b4eea:	4630      	mov	r0, r6
	  _M_start = __x._M_start;
   b4eec:	2500      	movs	r5, #0
	  _M_finish = __x._M_finish;
   b4eee:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
   b4ef2:	950b      	str	r5, [sp, #44]	; 0x2c
      }
   b4ef4:	f7ff fc18 	bl	b4728 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4ef8:	a809      	add	r0, sp, #36	; 0x24
   b4efa:	f7ff fc15 	bl	b4728 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      distances = std::vector<float>(checkpoints.size(), 0);
      scalers = scalerInput;
   b4efe:	4651      	mov	r1, sl
   b4f00:	4658      	mov	r0, fp
   b4f02:	f7ff ff4d 	bl	b4da0 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      outputs = {std::vector<int>(outputSize[0], 0), std::vector<int>(outputSize[1], 0), std::vector<int>(outputSize[2], 0), std::vector<int>(outputSize[3], 0)};
   b4f06:	f8d9 1000 	ldr.w	r1, [r9]
   b4f0a:	9506      	str	r5, [sp, #24]
   b4f0c:	6809      	ldr	r1, [r1, #0]
   b4f0e:	ab02      	add	r3, sp, #8
   b4f10:	aa06      	add	r2, sp, #24
   b4f12:	4630      	mov	r0, r6
   b4f14:	f7ff fc30 	bl	b4778 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4f18:	f8d9 1000 	ldr.w	r1, [r9]
   b4f1c:	9507      	str	r5, [sp, #28]
   b4f1e:	6849      	ldr	r1, [r1, #4]
   b4f20:	ab03      	add	r3, sp, #12
   b4f22:	aa07      	add	r2, sp, #28
   b4f24:	a80f      	add	r0, sp, #60	; 0x3c
   b4f26:	f7ff fc27 	bl	b4778 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4f2a:	f8d9 1000 	ldr.w	r1, [r9]
   b4f2e:	9508      	str	r5, [sp, #32]
   b4f30:	6889      	ldr	r1, [r1, #8]
   b4f32:	ab04      	add	r3, sp, #16
   b4f34:	aa08      	add	r2, sp, #32
   b4f36:	a812      	add	r0, sp, #72	; 0x48
   b4f38:	f7ff fc1e 	bl	b4778 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4f3c:	f8d9 1000 	ldr.w	r1, [r9]
   b4f40:	9509      	str	r5, [sp, #36]	; 0x24
   b4f42:	ab05      	add	r3, sp, #20
   b4f44:	aa09      	add	r2, sp, #36	; 0x24
   b4f46:	68c9      	ldr	r1, [r1, #12]
   b4f48:	a815      	add	r0, sp, #84	; 0x54
   b4f4a:	f7ff fc15 	bl	b4778 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
			 - this->_M_impl._M_start); }
   b4f4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b4f50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4f52:	1a9b      	subs	r3, r3, r2
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);

	if (__len > capacity())
   b4f54:	2b2f      	cmp	r3, #47	; 0x2f
   b4f56:	d83f      	bhi.n	b4fd8 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x18c>
	  pointer __result = this->_M_allocate(__n);
   b4f58:	2004      	movs	r0, #4
   b4f5a:	f7ff f8c3 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b4f5e:	46b3      	mov	fp, r6
   b4f60:	4605      	mov	r5, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b4f62:	f100 0a30 	add.w	sl, r0, #48	; 0x30
	  _ForwardIterator __cur = __result;
   b4f66:	4681      	mov	r9, r0
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4f68:	f1b9 0f00 	cmp.w	r9, #0
   b4f6c:	d003      	beq.n	b4f76 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x12a>
   b4f6e:	4659      	mov	r1, fp
   b4f70:	4648      	mov	r0, r9
   b4f72:	f7ff fed1 	bl	b4d18 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b4f76:	f109 090c 	add.w	r9, r9, #12
   b4f7a:	45d1      	cmp	r9, sl
   b4f7c:	f10b 0b0c 	add.w	fp, fp, #12
   b4f80:	d1f2      	bne.n	b4f68 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x11c>
	__destroy(__first, __last);
   b4f82:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b4f86:	f7ff fe8e 	bl	b4ca6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	    _S_check_init_len(__len, _M_get_Tp_allocator());
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
   b4f8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b4f8c:	b118      	cbz	r0, b4f96 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x14a>
			  this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_start);
   b4f8e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b4f90:	1a09      	subs	r1, r1, r0
   b4f92:	f7ff f886 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b4f96:	e9c4 5a09 	strd	r5, sl, [r4, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b4f9a:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
   b4f9e:	ad18      	add	r5, sp, #96	; 0x60
   b4fa0:	3d0c      	subs	r5, #12
      }
   b4fa2:	4628      	mov	r0, r5
   b4fa4:	f7ff fbca 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4fa8:	42b5      	cmp	r5, r6
   b4faa:	d1f9      	bne.n	b4fa0 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x154>
	this->_M_assign(__str);
   b4fac:	9922      	ldr	r1, [sp, #136]	; 0x88
   b4fae:	4640      	mov	r0, r8
   b4fb0:	f005 f9be 	bl	ba330 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      name = nameInput;
      colors = colorInput;
   b4fb4:	4638      	mov	r0, r7
   b4fb6:	9923      	ldr	r1, [sp, #140]	; 0x8c
   b4fb8:	f7ff f9ac 	bl	b4314 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
	return *(this->_M_impl._M_start + __n);
   b4fbc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   b4fbe:	681b      	ldr	r3, [r3, #0]
      lowerLoopBound = boundInput[0];
   b4fc0:	681a      	ldr	r2, [r3, #0]
   b4fc2:	65e2      	str	r2, [r4, #92]	; 0x5c
      upperLoopBound = boundInput[1];
   b4fc4:	685a      	ldr	r2, [r3, #4]
   b4fc6:	6622      	str	r2, [r4, #96]	; 0x60
      lowerGreenBound = boundInput[2];
   b4fc8:	689a      	ldr	r2, [r3, #8]
      upperGreenBound = boundInput[3];
   b4fca:	68db      	ldr	r3, [r3, #12]
      lowerGreenBound = boundInput[2];
   b4fcc:	6662      	str	r2, [r4, #100]	; 0x64
    }
   b4fce:	4620      	mov	r0, r4
      upperGreenBound = boundInput[3];
   b4fd0:	66a3      	str	r3, [r4, #104]	; 0x68
    }
   b4fd2:	b019      	add	sp, #100	; 0x64
   b4fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4fd8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   b4fda:	1aad      	subs	r5, r5, r2
	  }
	else if (size() >= __len)
   b4fdc:	2d2f      	cmp	r5, #47	; 0x2f
   b4fde:	d90b      	bls.n	b4ff8 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ac>
			      _Category>::__copy_m(__first, __last, __result);
   b4fe0:	a918      	add	r1, sp, #96	; 0x60
   b4fe2:	4630      	mov	r0, r6
   b4fe4:	f7ff ff14 	bl	b4e10 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b4fe8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b4fea:	4288      	cmp	r0, r1
   b4fec:	4605      	mov	r5, r0
   b4fee:	d0d6      	beq.n	b4f9e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b4ff0:	f7ff fe59 	bl	b4ca6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b4ff4:	62a5      	str	r5, [r4, #40]	; 0x28
   b4ff6:	e7d2      	b.n	b4f9e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b4ff8:	4435      	add	r5, r6
   b4ffa:	4629      	mov	r1, r5
   b4ffc:	4630      	mov	r0, r6
   b4ffe:	f7ff ff07 	bl	b4e10 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5002:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
   b5006:	ab18      	add	r3, sp, #96	; 0x60
   b5008:	429d      	cmp	r5, r3
   b500a:	d00a      	beq.n	b5022 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1d6>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b500c:	f1b9 0f00 	cmp.w	r9, #0
   b5010:	d003      	beq.n	b501a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ce>
   b5012:	4629      	mov	r1, r5
   b5014:	4648      	mov	r0, r9
   b5016:	f7ff fe7f 	bl	b4d18 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b501a:	350c      	adds	r5, #12
   b501c:	f109 090c 	add.w	r9, r9, #12
   b5020:	e7f1      	b.n	b5006 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ba>
	    _ForwardIterator __mid = __first;
	    std::advance(__mid, size());
	    std::copy(__first, __mid, this->_M_impl._M_start);
	    const size_type __attribute__((__unused__)) __n = __len - size();
	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	    this->_M_impl._M_finish =
   b5022:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
   b5026:	e7ba      	b.n	b4f9e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x152>
   b5028:	000bd47b 	.word	0x000bd47b

000b502c <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   b502c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5030:	ed2d 8b0e 	vpush	{d8-d14}
   b5034:	2801      	cmp	r0, #1
   b5036:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   b503a:	f040 85e0 	bne.w	b5bfe <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbd2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b503e:	4bb4      	ldr	r3, [pc, #720]	; (b5310 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e4>)
    SleepResult() {}
   b5040:	4ab4      	ldr	r2, [pc, #720]	; (b5314 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2e8>)
   b5042:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5044:	2500      	movs	r5, #0
   b5046:	e9c3 5500 	strd	r5, r5, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b504a:	2003      	movs	r0, #3
   b504c:	f002 fd80 	bl	b7b50 <set_system_mode>
  public:
    float lat;
    float lon;

    Checkpoint(float la, float lo){
      lat = la;
   b5050:	4bb1      	ldr	r3, [pc, #708]	; (b5318 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2ec>)
   b5052:	9372      	str	r3, [sp, #456]	; 0x1c8
      lon = lo;
   b5054:	4bb1      	ldr	r3, [pc, #708]	; (b531c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f0>)
   b5056:	9373      	str	r3, [sp, #460]	; 0x1cc
      lat = la;
   b5058:	4bb1      	ldr	r3, [pc, #708]	; (b5320 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f4>)
   b505a:	9374      	str	r3, [sp, #464]	; 0x1d0
      lon = lo;
   b505c:	4bb1      	ldr	r3, [pc, #708]	; (b5324 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f8>)
   b505e:	9375      	str	r3, [sp, #468]	; 0x1d4
      lat = la;
   b5060:	4bb1      	ldr	r3, [pc, #708]	; (b5328 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2fc>)
   b5062:	9376      	str	r3, [sp, #472]	; 0x1d8
      lon = lo;
   b5064:	4bb1      	ldr	r3, [pc, #708]	; (b532c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x300>)
   b5066:	9377      	str	r3, [sp, #476]	; 0x1dc
      lat = la;
   b5068:	4bb1      	ldr	r3, [pc, #708]	; (b5330 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x304>)
   b506a:	9378      	str	r3, [sp, #480]	; 0x1e0
      lon = lo;
   b506c:	4bb1      	ldr	r3, [pc, #708]	; (b5334 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x308>)
   b506e:	9379      	str	r3, [sp, #484]	; 0x1e4
      lat = la;
   b5070:	4bb1      	ldr	r3, [pc, #708]	; (b5338 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x30c>)
   b5072:	937a      	str	r3, [sp, #488]	; 0x1e8
      lon = lo;
   b5074:	4bb1      	ldr	r3, [pc, #708]	; (b533c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x310>)
   b5076:	937b      	str	r3, [sp, #492]	; 0x1ec
);
   b5078:	ab72      	add	r3, sp, #456	; 0x1c8
   b507a:	934c      	str	r3, [sp, #304]	; 0x130
   b507c:	2305      	movs	r3, #5
   b507e:	f8df a34c 	ldr.w	sl, [pc, #844]	; b53cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3a0>
   b5082:	934d      	str	r3, [sp, #308]	; 0x134
   b5084:	f50d 7884 	add.w	r8, sp, #264	; 0x108
   b5088:	aa4c      	add	r2, sp, #304	; 0x130
   b508a:	4643      	mov	r3, r8
   b508c:	ca06      	ldmia	r2, {r1, r2}
   b508e:	a85a      	add	r0, sp, #360	; 0x168
   b5090:	f7ff fb94 	bl	b47bc <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5094:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
   b5098:	ac65      	add	r4, sp, #404	; 0x194
   b509a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b509e:	2204      	movs	r2, #4
   b50a0:	ab4a      	add	r3, sp, #296	; 0x128
   b50a2:	944a      	str	r4, [sp, #296]	; 0x128
   b50a4:	924b      	str	r2, [sp, #300]	; 0x12c
   b50a6:	e893 0006 	ldmia.w	r3, {r1, r2}
   b50aa:	a857      	add	r0, sp, #348	; 0x15c
   b50ac:	f7ff fe4e 	bl	b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b50b0:	aa61      	add	r2, sp, #388	; 0x184
   b50b2:	9248      	str	r2, [sp, #288]	; 0x120
   b50b4:	2328      	movs	r3, #40	; 0x28
   b50b6:	2204      	movs	r2, #4
   b50b8:	e9cd 3562 	strd	r3, r5, [sp, #392]	; 0x188
   b50bc:	9249      	str	r2, [sp, #292]	; 0x124
   b50be:	ab48      	add	r3, sp, #288	; 0x120
   b50c0:	f50d 7bd6 	add.w	fp, sp, #428	; 0x1ac
   b50c4:	e893 0006 	ldmia.w	r3, {r1, r2}
   b50c8:	a854      	add	r0, sp, #336	; 0x150
   b50ca:	9561      	str	r5, [sp, #388]	; 0x184
   b50cc:	9564      	str	r5, [sp, #400]	; 0x190
   b50ce:	f7ff fe3d 	bl	b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b50d2:	4658      	mov	r0, fp
   b50d4:	499a      	ldr	r1, [pc, #616]	; (b5340 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>)
      lat = la;
   b50d6:	eddf 8a9b 	vldr	s17, [pc, #620]	; b5344 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x318>
      lon = lo;
   b50da:	ed9f 8a9b 	vldr	s16, [pc, #620]	; b5348 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x31c>
      lat = la;
   b50de:	eddf 9a9b 	vldr	s19, [pc, #620]	; b534c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>
      lon = lo;
   b50e2:	ed9f 9a9b 	vldr	s18, [pc, #620]	; b5350 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>
      lat = la;
   b50e6:	eddf aa9b 	vldr	s21, [pc, #620]	; b5354 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>
      lon = lo;
   b50ea:	ed9f aa9b 	vldr	s20, [pc, #620]	; b5358 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>
      lat = la;
   b50ee:	eddf ba9b 	vldr	s23, [pc, #620]	; b535c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>
      lon = lo;
   b50f2:	ed9f ba9b 	vldr	s22, [pc, #620]	; b5360 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>
      lat = la;
   b50f6:	eddf da9b 	vldr	s27, [pc, #620]	; b5364 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>
      lon = lo;
   b50fa:	ed9f da9b 	vldr	s26, [pc, #620]	; b5368 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>
      lat = la;
   b50fe:	eddf ca9b 	vldr	s25, [pc, #620]	; b536c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>
      lon = lo;
   b5102:	ed9f ca9b 	vldr	s24, [pc, #620]	; b5370 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>
   b5106:	ed9f ea9b 	vldr	s28, [pc, #620]	; b5374 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>
   b510a:	f7fe fffd 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b510e:	a87e      	add	r0, sp, #504	; 0x1f8
   b5110:	4999      	ldr	r1, [pc, #612]	; (b5378 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>)
   b5112:	f7fe fff9 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5116:	a884      	add	r0, sp, #528	; 0x210
   b5118:	4998      	ldr	r1, [pc, #608]	; (b537c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>)
   b511a:	f7fe fff5 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b511e:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5120:	9346      	str	r3, [sp, #280]	; 0x118
   b5122:	2302      	movs	r3, #2
   b5124:	9347      	str	r3, [sp, #284]	; 0x11c
   b5126:	aa46      	add	r2, sp, #280	; 0x118
   b5128:	f50d 79ba 	add.w	r9, sp, #372	; 0x174
   b512c:	ab40      	add	r3, sp, #256	; 0x100
   b512e:	ca06      	ldmia	r2, {r1, r2}
   b5130:	a851      	add	r0, sp, #324	; 0x144
   b5132:	f7ff fb77 	bl	b4824 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5136:	4629      	mov	r1, r5
   b5138:	2210      	movs	r2, #16
   b513a:	4648      	mov	r0, r9
   b513c:	f006 f8b2 	bl	bb2a4 <memset>
   b5140:	2204      	movs	r2, #4
   b5142:	ab44      	add	r3, sp, #272	; 0x110
   b5144:	f8cd 9110 	str.w	r9, [sp, #272]	; 0x110
   b5148:	9245      	str	r2, [sp, #276]	; 0x114
   b514a:	e893 0006 	ldmia.w	r3, {r1, r2}
   b514e:	a84e      	add	r0, sp, #312	; 0x138
   b5150:	f7ff fdfc 	bl	b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLine = Railway(
   b5154:	ab4e      	add	r3, sp, #312	; 0x138
   b5156:	9302      	str	r3, [sp, #8]
   b5158:	ab51      	add	r3, sp, #324	; 0x144
   b515a:	aa57      	add	r2, sp, #348	; 0x15c
   b515c:	a95a      	add	r1, sp, #360	; 0x168
   b515e:	e9cd b300 	strd	fp, r3, [sp]
   b5162:	4887      	ldr	r0, [pc, #540]	; (b5380 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
   b5164:	ab54      	add	r3, sp, #336	; 0x150
   b5166:	f7ff fe71 	bl	b4e4c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b516a:	a84e      	add	r0, sp, #312	; 0x138
   b516c:	f7ff fae6 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5170:	a851      	add	r0, sp, #324	; 0x144
   b5172:	f7ff faed 	bl	b4750 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b5176:	a884      	add	r0, sp, #528	; 0x210
   b5178:	f005 f8bc 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b517c:	a87e      	add	r0, sp, #504	; 0x1f8
   b517e:	f005 f8b9 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5182:	4658      	mov	r0, fp
   b5184:	f005 f8b6 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5188:	a854      	add	r0, sp, #336	; 0x150
   b518a:	f7ff fad7 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b518e:	a857      	add	r0, sp, #348	; 0x15c
   b5190:	f7ff fad4 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5194:	a85a      	add	r0, sp, #360	; 0x168
   b5196:	f7ff fabd 	bl	b4714 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b519a:	4b7a      	ldr	r3, [pc, #488]	; (b5384 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>)
   b519c:	937e      	str	r3, [sp, #504]	; 0x1f8
      lon = lo;
   b519e:	4b7a      	ldr	r3, [pc, #488]	; (b5388 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x35c>)
   b51a0:	937f      	str	r3, [sp, #508]	; 0x1fc
      lat = la;
   b51a2:	4b7a      	ldr	r3, [pc, #488]	; (b538c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x360>)
   b51a4:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b51a6:	4b7a      	ldr	r3, [pc, #488]	; (b5390 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x364>)
   b51a8:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b51aa:	4b7a      	ldr	r3, [pc, #488]	; (b5394 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x368>)
   b51ac:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b51ae:	4b7a      	ldr	r3, [pc, #488]	; (b5398 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
   b51b0:	9383      	str	r3, [sp, #524]	; 0x20c
      lat = la;
   b51b2:	4b7a      	ldr	r3, [pc, #488]	; (b539c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x370>)
   b51b4:	9384      	str	r3, [sp, #528]	; 0x210
      lon = lo;
   b51b6:	4b7a      	ldr	r3, [pc, #488]	; (b53a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>)
   b51b8:	9385      	str	r3, [sp, #532]	; 0x214
      lat = la;
   b51ba:	4b7a      	ldr	r3, [pc, #488]	; (b53a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x378>)
   b51bc:	9386      	str	r3, [sp, #536]	; 0x218
      lon = lo;
   b51be:	4b7a      	ldr	r3, [pc, #488]	; (b53a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x37c>)
   b51c0:	9387      	str	r3, [sp, #540]	; 0x21c
      lat = la;
   b51c2:	4b7a      	ldr	r3, [pc, #488]	; (b53ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x380>)
   b51c4:	9388      	str	r3, [sp, #544]	; 0x220
      lon = lo;
   b51c6:	4b7a      	ldr	r3, [pc, #488]	; (b53b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x384>)
   b51c8:	9389      	str	r3, [sp, #548]	; 0x224
      lat = la;
   b51ca:	4b7a      	ldr	r3, [pc, #488]	; (b53b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x388>)
   b51cc:	938a      	str	r3, [sp, #552]	; 0x228
      lon = lo;
   b51ce:	4b7a      	ldr	r3, [pc, #488]	; (b53b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x38c>)
   b51d0:	938b      	str	r3, [sp, #556]	; 0x22c
);
   b51d2:	ab7e      	add	r3, sp, #504	; 0x1f8
   b51d4:	9342      	str	r3, [sp, #264]	; 0x108
   b51d6:	2307      	movs	r3, #7
   b51d8:	9343      	str	r3, [sp, #268]	; 0x10c
   b51da:	af38      	add	r7, sp, #224	; 0xe0
   b51dc:	e898 0006 	ldmia.w	r8, {r1, r2}
   b51e0:	463b      	mov	r3, r7
   b51e2:	a85a      	add	r0, sp, #360	; 0x168
   b51e4:	f7ff faea 	bl	b47bc <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b51e8:	f10a 0c10 	add.w	ip, sl, #16
   b51ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b51f0:	465e      	mov	r6, fp
   b51f2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b51f4:	e89c 0003 	ldmia.w	ip, {r0, r1}
   b51f8:	2306      	movs	r3, #6
   b51fa:	9341      	str	r3, [sp, #260]	; 0x104
   b51fc:	f8cd b100 	str.w	fp, [sp, #256]	; 0x100
   b5200:	ab40      	add	r3, sp, #256	; 0x100
   b5202:	e9c6 0100 	strd	r0, r1, [r6]
   b5206:	e893 0006 	ldmia.w	r3, {r1, r2}
   b520a:	a857      	add	r0, sp, #348	; 0x15c
   b520c:	9604      	str	r6, [sp, #16]
   b520e:	f7ff fd9d 	bl	b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5212:	aa61      	add	r2, sp, #388	; 0x184
   b5214:	923e      	str	r2, [sp, #248]	; 0xf8
   b5216:	233c      	movs	r3, #60	; 0x3c
   b5218:	2204      	movs	r2, #4
   b521a:	e9cd 3562 	strd	r3, r5, [sp, #392]	; 0x188
   b521e:	923f      	str	r2, [sp, #252]	; 0xfc
   b5220:	ab3e      	add	r3, sp, #248	; 0xf8
   b5222:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5226:	a854      	add	r0, sp, #336	; 0x150
   b5228:	9561      	str	r5, [sp, #388]	; 0x184
   b522a:	9564      	str	r5, [sp, #400]	; 0x190
   b522c:	f7ff fd8e 	bl	b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5230:	4620      	mov	r0, r4
   b5232:	4962      	ldr	r1, [pc, #392]	; (b53bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x390>)
   b5234:	f7fe ff68 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5238:	a872      	add	r0, sp, #456	; 0x1c8
   b523a:	4961      	ldr	r1, [pc, #388]	; (b53c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>)
   b523c:	f7fe ff64 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5240:	a878      	add	r0, sp, #480	; 0x1e0
   b5242:	4960      	ldr	r1, [pc, #384]	; (b53c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x398>)
   b5244:	f7fe ff60 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5248:	ab72      	add	r3, sp, #456	; 0x1c8
   b524a:	933c      	str	r3, [sp, #240]	; 0xf0
   b524c:	2302      	movs	r3, #2
   b524e:	933d      	str	r3, [sp, #244]	; 0xf4
   b5250:	ae36      	add	r6, sp, #216	; 0xd8
   b5252:	aa3c      	add	r2, sp, #240	; 0xf0
   b5254:	4633      	mov	r3, r6
   b5256:	ca06      	ldmia	r2, {r1, r2}
   b5258:	a851      	add	r0, sp, #324	; 0x144
   b525a:	f7ff fae3 	bl	b4824 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b525e:	4629      	mov	r1, r5
   b5260:	2210      	movs	r2, #16
   b5262:	4648      	mov	r0, r9
   b5264:	f006 f81e 	bl	bb2a4 <memset>
   b5268:	2204      	movs	r2, #4
   b526a:	ab3a      	add	r3, sp, #232	; 0xe8
   b526c:	f8cd 90e8 	str.w	r9, [sp, #232]	; 0xe8
   b5270:	923b      	str	r2, [sp, #236]	; 0xec
   b5272:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5276:	a84e      	add	r0, sp, #312	; 0x138
   b5278:	f7ff fd68 	bl	b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLine = Railway(
   b527c:	ab4e      	add	r3, sp, #312	; 0x138
   b527e:	9302      	str	r3, [sp, #8]
   b5280:	ab51      	add	r3, sp, #324	; 0x144
   b5282:	aa57      	add	r2, sp, #348	; 0x15c
   b5284:	a95a      	add	r1, sp, #360	; 0x168
   b5286:	e9cd 4300 	strd	r4, r3, [sp]
   b528a:	484f      	ldr	r0, [pc, #316]	; (b53c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x39c>)
   b528c:	ab54      	add	r3, sp, #336	; 0x150
   b528e:	f7ff fddd 	bl	b4e4c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5292:	a84e      	add	r0, sp, #312	; 0x138
   b5294:	f7ff fa52 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5298:	a851      	add	r0, sp, #324	; 0x144
   b529a:	f7ff fa59 	bl	b4750 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b529e:	a878      	add	r0, sp, #480	; 0x1e0
   b52a0:	f005 f828 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b52a4:	a872      	add	r0, sp, #456	; 0x1c8
   b52a6:	f005 f825 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b52aa:	4620      	mov	r0, r4
   b52ac:	f005 f822 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b52b0:	a854      	add	r0, sp, #336	; 0x150
   b52b2:	f7ff fa43 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b52b6:	a857      	add	r0, sp, #348	; 0x15c
   b52b8:	f7ff fa40 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b52bc:	a85a      	add	r0, sp, #360	; 0x168
   b52be:	f7ff fa29 	bl	b4714 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b52c2:	ab7e      	add	r3, sp, #504	; 0x1f8
   b52c4:	9338      	str	r3, [sp, #224]	; 0xe0
   b52c6:	2307      	movs	r3, #7
   b52c8:	9339      	str	r3, [sp, #228]	; 0xe4
   b52ca:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
   b52ce:	e897 0006 	ldmia.w	r7, {r1, r2}
   b52d2:	4643      	mov	r3, r8
   b52d4:	a85a      	add	r0, sp, #360	; 0x168
      lat = la;
   b52d6:	edcd da7e 	vstr	s27, [sp, #504]	; 0x1f8
      lon = lo;
   b52da:	ed8d da7f 	vstr	s26, [sp, #508]	; 0x1fc
      lat = la;
   b52de:	edcd ca80 	vstr	s25, [sp, #512]	; 0x200
      lon = lo;
   b52e2:	ed8d ca81 	vstr	s24, [sp, #516]	; 0x204
      lat = la;
   b52e6:	edcd 8a82 	vstr	s17, [sp, #520]	; 0x208
      lon = lo;
   b52ea:	ed8d 8a83 	vstr	s16, [sp, #524]	; 0x20c
      lat = la;
   b52ee:	edcd ba84 	vstr	s23, [sp, #528]	; 0x210
      lon = lo;
   b52f2:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
      lat = la;
   b52f6:	edcd aa86 	vstr	s21, [sp, #536]	; 0x218
      lon = lo;
   b52fa:	ed8d aa87 	vstr	s20, [sp, #540]	; 0x21c
      lat = la;
   b52fe:	edcd 9a88 	vstr	s19, [sp, #544]	; 0x220
      lon = lo;
   b5302:	ed8d 9a89 	vstr	s18, [sp, #548]	; 0x224
      lat = la;
   b5306:	edcd 8a8a 	vstr	s17, [sp, #552]	; 0x228
      lon = lo;
   b530a:	ed8d 8a8b 	vstr	s16, [sp, #556]	; 0x22c
   b530e:	e05f      	b.n	b53d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3a4>
   b5310:	200354e8 	.word	0x200354e8
   b5314:	ffff0000 	.word	0xffff0000
   b5318:	42276980 	.word	0x42276980
   b531c:	c2af431e 	.word	0xc2af431e
   b5320:	42279dcc 	.word	0x42279dcc
   b5324:	c2af4202 	.word	0xc2af4202
   b5328:	42279d95 	.word	0x42279d95
   b532c:	c2af476d 	.word	0xc2af476d
   b5330:	4227a7a9 	.word	0x4227a7a9
   b5334:	c2af4e05 	.word	0xc2af4e05
   b5338:	4227b382 	.word	0x4227b382
   b533c:	c2af4e44 	.word	0xc2af4e44
   b5340:	000bd4c7 	.word	0x000bd4c7
   b5344:	42278b1a 	.word	0x42278b1a
   b5348:	c2af449a 	.word	0xc2af449a
   b534c:	42278b2f 	.word	0x42278b2f
   b5350:	c2af4095 	.word	0xc2af4095
   b5354:	422781d8 	.word	0x422781d8
   b5358:	c2af4044 	.word	0xc2af4044
   b535c:	42278216 	.word	0x42278216
   b5360:	c2af44c1 	.word	0xc2af44c1
   b5364:	4227a49e 	.word	0x4227a49e
   b5368:	c2af4bd0 	.word	0xc2af4bd0
   b536c:	4227a437 	.word	0x4227a437
   b5370:	c2af4659 	.word	0xc2af4659
   b5374:	c2af4089 	.word	0xc2af4089
   b5378:	000bd4cb 	.word	0x000bd4cb
   b537c:	000bd4d2 	.word	0x000bd4d2
   b5380:	2003e5c8 	.word	0x2003e5c8
   b5384:	42277e9d 	.word	0x42277e9d
   b5388:	c2af74b3 	.word	0xc2af74b3
   b538c:	422780af 	.word	0x422780af
   b5390:	c2af588e 	.word	0xc2af588e
   b5394:	4227804d 	.word	0x4227804d
   b5398:	c2af482e 	.word	0xc2af482e
   b539c:	422780ad 	.word	0x422780ad
   b53a0:	c2af4157 	.word	0xc2af4157
   b53a4:	42278aff 	.word	0x42278aff
   b53a8:	c2af4253 	.word	0xc2af4253
   b53ac:	42278af4 	.word	0x42278af4
   b53b0:	c2af4798 	.word	0xc2af4798
   b53b4:	4227a978 	.word	0x4227a978
   b53b8:	c2af5f5d 	.word	0xc2af5f5d
   b53bc:	000bd4d9 	.word	0x000bd4d9
   b53c0:	000bd4de 	.word	0x000bd4de
   b53c4:	000bd4e5 	.word	0x000bd4e5
   b53c8:	20035540 	.word	0x20035540
   b53cc:	000bd690 	.word	0x000bd690
   b53d0:	f7ff f9f4 	bl	b47bc <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b53d4:	f10a 0328 	add.w	r3, sl, #40	; 0x28
   b53d8:	461f      	mov	r7, r3
   b53da:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b53dc:	46dc      	mov	ip, fp
   b53de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b53e2:	e9d7 0100 	ldrd	r0, r1, [r7]
   b53e6:	9b04      	ldr	r3, [sp, #16]
   b53e8:	f8cd b0d8 	str.w	fp, [sp, #216]	; 0xd8
   b53ec:	e883 0003 	stmia.w	r3, {r0, r1}
   b53f0:	2306      	movs	r3, #6
   b53f2:	9337      	str	r3, [sp, #220]	; 0xdc
   b53f4:	e896 0006 	ldmia.w	r6, {r1, r2}
   b53f8:	a857      	add	r0, sp, #348	; 0x15c
   b53fa:	9705      	str	r7, [sp, #20]
   b53fc:	f7ff fca6 	bl	b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5400:	f107 0308 	add.w	r3, r7, #8
   b5404:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5406:	ae61      	add	r6, sp, #388	; 0x184
   b5408:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b540c:	2204      	movs	r2, #4
   b540e:	ab34      	add	r3, sp, #208	; 0xd0
   b5410:	9634      	str	r6, [sp, #208]	; 0xd0
   b5412:	9235      	str	r2, [sp, #212]	; 0xd4
   b5414:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5418:	a854      	add	r0, sp, #336	; 0x150
   b541a:	f7ff fc97 	bl	b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b541e:	4620      	mov	r0, r4
   b5420:	49b2      	ldr	r1, [pc, #712]	; (b56ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c0>)
   b5422:	f7fe fe71 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5426:	a872      	add	r0, sp, #456	; 0x1c8
   b5428:	49b1      	ldr	r1, [pc, #708]	; (b56f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c4>)
   b542a:	f7fe fe6d 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b542e:	a878      	add	r0, sp, #480	; 0x1e0
   b5430:	49b0      	ldr	r1, [pc, #704]	; (b56f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c8>)
   b5432:	f7fe fe69 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5436:	a972      	add	r1, sp, #456	; 0x1c8
   b5438:	9132      	str	r1, [sp, #200]	; 0xc8
   b543a:	2102      	movs	r1, #2
   b543c:	ae2c      	add	r6, sp, #176	; 0xb0
   b543e:	9133      	str	r1, [sp, #204]	; 0xcc
   b5440:	aa32      	add	r2, sp, #200	; 0xc8
   b5442:	ca06      	ldmia	r2, {r1, r2}
   b5444:	4633      	mov	r3, r6
   b5446:	a851      	add	r0, sp, #324	; 0x144
   b5448:	f7ff f9ec 	bl	b4824 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b544c:	f107 0218 	add.w	r2, r7, #24
   b5450:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b5452:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5456:	2104      	movs	r1, #4
   b5458:	ab30      	add	r3, sp, #192	; 0xc0
   b545a:	f8cd 90c0 	str.w	r9, [sp, #192]	; 0xc0
   b545e:	9131      	str	r1, [sp, #196]	; 0xc4
   b5460:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5464:	a84e      	add	r0, sp, #312	; 0x138
   b5466:	f7ff fc71 	bl	b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway brownLine = Railway(
   b546a:	a94e      	add	r1, sp, #312	; 0x138
   b546c:	9102      	str	r1, [sp, #8]
   b546e:	a951      	add	r1, sp, #324	; 0x144
   b5470:	e9cd 4100 	strd	r4, r1, [sp]
   b5474:	a954      	add	r1, sp, #336	; 0x150
   b5476:	460b      	mov	r3, r1
   b5478:	a957      	add	r1, sp, #348	; 0x15c
   b547a:	460a      	mov	r2, r1
   b547c:	489e      	ldr	r0, [pc, #632]	; (b56f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6cc>)
   b547e:	a95a      	add	r1, sp, #360	; 0x168
   b5480:	f7ff fce4 	bl	b4e4c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5484:	a84e      	add	r0, sp, #312	; 0x138
   b5486:	f7ff f959 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b548a:	a851      	add	r0, sp, #324	; 0x144
   b548c:	f7ff f960 	bl	b4750 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5490:	a878      	add	r0, sp, #480	; 0x1e0
   b5492:	f004 ff2f 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5496:	a872      	add	r0, sp, #456	; 0x1c8
   b5498:	f004 ff2c 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b549c:	4620      	mov	r0, r4
   b549e:	f004 ff29 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b54a2:	a854      	add	r0, sp, #336	; 0x150
   b54a4:	f7ff f94a 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b54a8:	a857      	add	r0, sp, #348	; 0x15c
   b54aa:	f7ff f947 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b54ae:	a85a      	add	r0, sp, #360	; 0x168
   b54b0:	f7ff f930 	bl	b4714 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b54b4:	4b91      	ldr	r3, [pc, #580]	; (b56fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d0>)
   b54b6:	9372      	str	r3, [sp, #456]	; 0x1c8
      lon = lo;
   b54b8:	4b91      	ldr	r3, [pc, #580]	; (b5700 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d4>)
   b54ba:	9373      	str	r3, [sp, #460]	; 0x1cc
      lat = la;
   b54bc:	4b91      	ldr	r3, [pc, #580]	; (b5704 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d8>)
   b54be:	9374      	str	r3, [sp, #464]	; 0x1d0
   b54c0:	4b91      	ldr	r3, [pc, #580]	; (b5708 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6dc>)
   b54c2:	9378      	str	r3, [sp, #480]	; 0x1e0
);
   b54c4:	a972      	add	r1, sp, #456	; 0x1c8
      lon = lo;
   b54c6:	4b91      	ldr	r3, [pc, #580]	; (b570c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e0>)
   b54c8:	912e      	str	r1, [sp, #184]	; 0xb8
   b54ca:	9379      	str	r3, [sp, #484]	; 0x1e4
   b54cc:	2105      	movs	r1, #5
      lat = la;
   b54ce:	4b90      	ldr	r3, [pc, #576]	; (b5710 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e4>)
   b54d0:	937a      	str	r3, [sp, #488]	; 0x1e8
   b54d2:	af24      	add	r7, sp, #144	; 0x90
   b54d4:	912f      	str	r1, [sp, #188]	; 0xbc
      lon = lo;
   b54d6:	4b8f      	ldr	r3, [pc, #572]	; (b5714 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e8>)
   b54d8:	937b      	str	r3, [sp, #492]	; 0x1ec
   b54da:	e898 0006 	ldmia.w	r8, {r1, r2}
   b54de:	463b      	mov	r3, r7
   b54e0:	a85a      	add	r0, sp, #360	; 0x168
   b54e2:	ed8d ea75 	vstr	s28, [sp, #468]	; 0x1d4
      lat = la;
   b54e6:	edcd 9a76 	vstr	s19, [sp, #472]	; 0x1d8
      lon = lo;
   b54ea:	ed8d 9a77 	vstr	s18, [sp, #476]	; 0x1dc
   b54ee:	f7ff f965 	bl	b47bc <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b54f2:	f10a 0360 	add.w	r3, sl, #96	; 0x60
   b54f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b54f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b54fc:	2104      	movs	r1, #4
   b54fe:	942c      	str	r4, [sp, #176]	; 0xb0
   b5500:	912d      	str	r1, [sp, #180]	; 0xb4
   b5502:	e896 0006 	ldmia.w	r6, {r1, r2}
   b5506:	a857      	add	r0, sp, #348	; 0x15c
   b5508:	f7ff fc20 	bl	b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b550c:	f10a 0370 	add.w	r3, sl, #112	; 0x70
   b5510:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5512:	ae61      	add	r6, sp, #388	; 0x184
   b5514:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b5518:	2104      	movs	r1, #4
   b551a:	ab2a      	add	r3, sp, #168	; 0xa8
   b551c:	962a      	str	r6, [sp, #168]	; 0xa8
   b551e:	912b      	str	r1, [sp, #172]	; 0xac
   b5520:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5524:	a854      	add	r0, sp, #336	; 0x150
   b5526:	f7ff fc11 	bl	b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b552a:	4658      	mov	r0, fp
   b552c:	497a      	ldr	r1, [pc, #488]	; (b5718 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ec>)
   b552e:	f7fe fdeb 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5532:	a87e      	add	r0, sp, #504	; 0x1f8
   b5534:	4979      	ldr	r1, [pc, #484]	; (b571c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f0>)
   b5536:	f7fe fde7 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b553a:	a884      	add	r0, sp, #528	; 0x210
   b553c:	4978      	ldr	r1, [pc, #480]	; (b5720 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f4>)
   b553e:	f7fe fde3 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5542:	a97e      	add	r1, sp, #504	; 0x1f8
   b5544:	9128      	str	r1, [sp, #160]	; 0xa0
   b5546:	2102      	movs	r1, #2
   b5548:	ae22      	add	r6, sp, #136	; 0x88
   b554a:	9129      	str	r1, [sp, #164]	; 0xa4
   b554c:	aa28      	add	r2, sp, #160	; 0xa0
   b554e:	4633      	mov	r3, r6
   b5550:	ca06      	ldmia	r2, {r1, r2}
   b5552:	a851      	add	r0, sp, #324	; 0x144
   b5554:	f7ff f966 	bl	b4824 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5558:	f10a 0380 	add.w	r3, sl, #128	; 0x80
   b555c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b555e:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5562:	2104      	movs	r1, #4
   b5564:	ab26      	add	r3, sp, #152	; 0x98
   b5566:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
   b556a:	9127      	str	r1, [sp, #156]	; 0x9c
   b556c:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5570:	a84e      	add	r0, sp, #312	; 0x138
   b5572:	f7ff fbeb 	bl	b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLine = Railway(
   b5576:	a94e      	add	r1, sp, #312	; 0x138
   b5578:	9102      	str	r1, [sp, #8]
   b557a:	a951      	add	r1, sp, #324	; 0x144
   b557c:	e9cd b100 	strd	fp, r1, [sp]
   b5580:	a954      	add	r1, sp, #336	; 0x150
   b5582:	460b      	mov	r3, r1
   b5584:	a957      	add	r1, sp, #348	; 0x15c
   b5586:	460a      	mov	r2, r1
   b5588:	4866      	ldr	r0, [pc, #408]	; (b5724 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f8>)
   b558a:	a95a      	add	r1, sp, #360	; 0x168
   b558c:	f7ff fc5e 	bl	b4e4c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5590:	a84e      	add	r0, sp, #312	; 0x138
   b5592:	f7ff f8d3 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5596:	a851      	add	r0, sp, #324	; 0x144
   b5598:	f7ff f8da 	bl	b4750 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b559c:	a884      	add	r0, sp, #528	; 0x210
   b559e:	f004 fea9 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b55a2:	a87e      	add	r0, sp, #504	; 0x1f8
   b55a4:	f004 fea6 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b55a8:	4658      	mov	r0, fp
   b55aa:	f004 fea3 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b55ae:	a854      	add	r0, sp, #336	; 0x150
   b55b0:	f7ff f8c4 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b55b4:	a857      	add	r0, sp, #348	; 0x15c
   b55b6:	f7ff f8c1 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b55ba:	a85a      	add	r0, sp, #360	; 0x168
   b55bc:	f7ff f8aa 	bl	b4714 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b55c0:	4b59      	ldr	r3, [pc, #356]	; (b5728 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6fc>)
   b55c2:	937e      	str	r3, [sp, #504]	; 0x1f8
      lon = lo;
   b55c4:	4b59      	ldr	r3, [pc, #356]	; (b572c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x700>)
   b55c6:	937f      	str	r3, [sp, #508]	; 0x1fc
      lat = la;
   b55c8:	4b59      	ldr	r3, [pc, #356]	; (b5730 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x704>)
   b55ca:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b55cc:	4b59      	ldr	r3, [pc, #356]	; (b5734 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x708>)
   b55ce:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b55d0:	4b59      	ldr	r3, [pc, #356]	; (b5738 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x70c>)
   b55d2:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b55d4:	4b59      	ldr	r3, [pc, #356]	; (b573c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x710>)
   b55d6:	9383      	str	r3, [sp, #524]	; 0x20c
);
   b55d8:	a97e      	add	r1, sp, #504	; 0x1f8
      lat = la;
   b55da:	4b59      	ldr	r3, [pc, #356]	; (b5740 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x714>)
   b55dc:	9124      	str	r1, [sp, #144]	; 0x90
   b55de:	9384      	str	r3, [sp, #528]	; 0x210
   b55e0:	2108      	movs	r1, #8
   b55e2:	4b58      	ldr	r3, [pc, #352]	; (b5744 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x718>)
   b55e4:	938a      	str	r3, [sp, #552]	; 0x228
   b55e6:	f10d 0868 	add.w	r8, sp, #104	; 0x68
   b55ea:	9125      	str	r1, [sp, #148]	; 0x94
      lon = lo;
   b55ec:	4b56      	ldr	r3, [pc, #344]	; (b5748 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x71c>)
   b55ee:	938b      	str	r3, [sp, #556]	; 0x22c
   b55f0:	e897 0006 	ldmia.w	r7, {r1, r2}
   b55f4:	4643      	mov	r3, r8
   b55f6:	a85a      	add	r0, sp, #360	; 0x168
   b55f8:	f10a 0790 	add.w	r7, sl, #144	; 0x90
   b55fc:	ed8d ea85 	vstr	s28, [sp, #532]	; 0x214
      lat = la;
   b5600:	edcd 9a86 	vstr	s19, [sp, #536]	; 0x218
      lon = lo;
   b5604:	ed8d 9a87 	vstr	s18, [sp, #540]	; 0x21c
      lat = la;
   b5608:	edcd 8a88 	vstr	s17, [sp, #544]	; 0x220
      lon = lo;
   b560c:	ed8d 8a89 	vstr	s16, [sp, #548]	; 0x224
      lat = la;
   b5610:	edcd aa8c 	vstr	s21, [sp, #560]	; 0x230
      lon = lo;
   b5614:	ed8d aa8d 	vstr	s20, [sp, #564]	; 0x234
   b5618:	f7ff f8d0 	bl	b47bc <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b561c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b561e:	46dc      	mov	ip, fp
   b5620:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5624:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   b5628:	9f04      	ldr	r7, [sp, #16]
   b562a:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
   b562e:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b5632:	2107      	movs	r1, #7
   b5634:	9123      	str	r1, [sp, #140]	; 0x8c
   b5636:	e896 0006 	ldmia.w	r6, {r1, r2}
   b563a:	a857      	add	r0, sp, #348	; 0x15c
   b563c:	f7ff fb86 	bl	b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5640:	f10a 03ac 	add.w	r3, sl, #172	; 0xac
   b5644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5646:	ae61      	add	r6, sp, #388	; 0x184
   b5648:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b564c:	2104      	movs	r1, #4
   b564e:	ab20      	add	r3, sp, #128	; 0x80
   b5650:	9620      	str	r6, [sp, #128]	; 0x80
   b5652:	9121      	str	r1, [sp, #132]	; 0x84
   b5654:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5658:	a854      	add	r0, sp, #336	; 0x150
   b565a:	f7ff fb77 	bl	b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b565e:	4620      	mov	r0, r4
   b5660:	493a      	ldr	r1, [pc, #232]	; (b574c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x720>)
   b5662:	f7fe fd51 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5666:	a872      	add	r0, sp, #456	; 0x1c8
   b5668:	4939      	ldr	r1, [pc, #228]	; (b5750 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x724>)
   b566a:	f7fe fd4d 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b566e:	a878      	add	r0, sp, #480	; 0x1e0
   b5670:	4938      	ldr	r1, [pc, #224]	; (b5754 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x728>)
   b5672:	f7fe fd49 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5676:	a972      	add	r1, sp, #456	; 0x1c8
   b5678:	911e      	str	r1, [sp, #120]	; 0x78
   b567a:	2102      	movs	r1, #2
   b567c:	af18      	add	r7, sp, #96	; 0x60
   b567e:	911f      	str	r1, [sp, #124]	; 0x7c
   b5680:	aa1e      	add	r2, sp, #120	; 0x78
   b5682:	463b      	mov	r3, r7
   b5684:	ca06      	ldmia	r2, {r1, r2}
   b5686:	a851      	add	r0, sp, #324	; 0x144
   b5688:	f7ff f8cc 	bl	b4824 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b568c:	f10a 03bc 	add.w	r3, sl, #188	; 0xbc
   b5690:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5692:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5696:	2104      	movs	r1, #4
   b5698:	ab1c      	add	r3, sp, #112	; 0x70
   b569a:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
   b569e:	911d      	str	r1, [sp, #116]	; 0x74
   b56a0:	e893 0006 	ldmia.w	r3, {r1, r2}
   b56a4:	a84e      	add	r0, sp, #312	; 0x138
   b56a6:	f7ff fb51 	bl	b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLine = Railway(
   b56aa:	a94e      	add	r1, sp, #312	; 0x138
   b56ac:	9102      	str	r1, [sp, #8]
   b56ae:	a951      	add	r1, sp, #324	; 0x144
   b56b0:	e9cd 4100 	strd	r4, r1, [sp]
   b56b4:	a954      	add	r1, sp, #336	; 0x150
   b56b6:	460b      	mov	r3, r1
   b56b8:	a957      	add	r1, sp, #348	; 0x15c
   b56ba:	460a      	mov	r2, r1
   b56bc:	4826      	ldr	r0, [pc, #152]	; (b5758 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x72c>)
   b56be:	a95a      	add	r1, sp, #360	; 0x168
   b56c0:	f7ff fbc4 	bl	b4e4c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b56c4:	a84e      	add	r0, sp, #312	; 0x138
   b56c6:	f7ff f839 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b56ca:	a851      	add	r0, sp, #324	; 0x144
   b56cc:	f7ff f840 	bl	b4750 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b56d0:	a878      	add	r0, sp, #480	; 0x1e0
   b56d2:	f004 fe0f 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b56d6:	a872      	add	r0, sp, #456	; 0x1c8
   b56d8:	f004 fe0c 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b56dc:	4620      	mov	r0, r4
   b56de:	f004 fe09 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b56e2:	a854      	add	r0, sp, #336	; 0x150
   b56e4:	f7ff f82a 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b56e8:	a857      	add	r0, sp, #348	; 0x15c
   b56ea:	e037      	b.n	b575c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x730>
   b56ec:	000bd4ec 	.word	0x000bd4ec
   b56f0:	000bd4f2 	.word	0x000bd4f2
   b56f4:	000bd4f9 	.word	0x000bd4f9
   b56f8:	200355ac 	.word	0x200355ac
   b56fc:	42276997 	.word	0x42276997
   b5700:	c2af40b8 	.word	0xc2af40b8
   b5704:	422781fe 	.word	0x422781fe
   b5708:	42278afb 	.word	0x42278afb
   b570c:	c2af4494 	.word	0xc2af4494
   b5710:	42278971 	.word	0x42278971
   b5714:	c2af6479 	.word	0xc2af6479
   b5718:	000bd65c 	.word	0x000bd65c
   b571c:	000bd500 	.word	0x000bd500
   b5720:	000bd507 	.word	0x000bd507
   b5724:	2003561c 	.word	0x2003561c
   b5728:	4227631a 	.word	0x4227631a
   b572c:	c2af4bd2 	.word	0xc2af4bd2
   b5730:	42276ec4 	.word	0x42276ec4
   b5734:	c2af4115 	.word	0xc2af4115
   b5738:	422780b5 	.word	0x422780b5
   b573c:	c2af4086 	.word	0xc2af4086
   b5740:	42278200 	.word	0x42278200
   b5744:	422781e1 	.word	0x422781e1
   b5748:	c2af4476 	.word	0xc2af4476
   b574c:	000bd50e 	.word	0x000bd50e
   b5750:	000bd515 	.word	0x000bd515
   b5754:	000bd51c 	.word	0x000bd51c
   b5758:	20037eac 	.word	0x20037eac
   b575c:	f7fe ffee 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5760:	a85a      	add	r0, sp, #360	; 0x168
   b5762:	f7fe ffd7 	bl	b4714 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b5766:	a97e      	add	r1, sp, #504	; 0x1f8
   b5768:	911a      	str	r1, [sp, #104]	; 0x68
   b576a:	2107      	movs	r1, #7
   b576c:	ae10      	add	r6, sp, #64	; 0x40
   b576e:	911b      	str	r1, [sp, #108]	; 0x6c
   b5770:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5774:	4633      	mov	r3, r6
   b5776:	a85a      	add	r0, sp, #360	; 0x168
      lat = la;
   b5778:	edcd da7e 	vstr	s27, [sp, #504]	; 0x1f8
      lon = lo;
   b577c:	ed8d da7f 	vstr	s26, [sp, #508]	; 0x1fc
      lat = la;
   b5780:	edcd ca80 	vstr	s25, [sp, #512]	; 0x200
      lon = lo;
   b5784:	ed8d ca81 	vstr	s24, [sp, #516]	; 0x204
      lat = la;
   b5788:	edcd 8a82 	vstr	s17, [sp, #520]	; 0x208
      lon = lo;
   b578c:	ed8d 8a83 	vstr	s16, [sp, #524]	; 0x20c
      lat = la;
   b5790:	edcd ba84 	vstr	s23, [sp, #528]	; 0x210
      lon = lo;
   b5794:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
      lat = la;
   b5798:	edcd aa86 	vstr	s21, [sp, #536]	; 0x218
      lon = lo;
   b579c:	ed8d aa87 	vstr	s20, [sp, #540]	; 0x21c
      lat = la;
   b57a0:	edcd 9a88 	vstr	s19, [sp, #544]	; 0x220
      lon = lo;
   b57a4:	ed8d 9a89 	vstr	s18, [sp, #548]	; 0x224
      lat = la;
   b57a8:	edcd 8a8a 	vstr	s17, [sp, #552]	; 0x228
      lon = lo;
   b57ac:	ed8d 8a8b 	vstr	s16, [sp, #556]	; 0x22c
   b57b0:	f7ff f804 	bl	b47bc <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b57b4:	f10a 0e28 	add.w	lr, sl, #40	; 0x28
   b57b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b57bc:	46dc      	mov	ip, fp
   b57be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b57c2:	9905      	ldr	r1, [sp, #20]
   b57c4:	9a04      	ldr	r2, [sp, #16]
   b57c6:	f8cd b060 	str.w	fp, [sp, #96]	; 0x60
   b57ca:	c903      	ldmia	r1, {r0, r1}
   b57cc:	e9c2 0100 	strd	r0, r1, [r2]
   b57d0:	2106      	movs	r1, #6
   b57d2:	9119      	str	r1, [sp, #100]	; 0x64
   b57d4:	e897 0006 	ldmia.w	r7, {r1, r2}
   b57d8:	a857      	add	r0, sp, #348	; 0x15c
   b57da:	f7ff fab7 	bl	b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b57de:	f10a 0340 	add.w	r3, sl, #64	; 0x40
   b57e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b57e4:	af61      	add	r7, sp, #388	; 0x184
   b57e6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   b57ea:	2104      	movs	r1, #4
   b57ec:	ab16      	add	r3, sp, #88	; 0x58
   b57ee:	9716      	str	r7, [sp, #88]	; 0x58
   b57f0:	9117      	str	r1, [sp, #92]	; 0x5c
   b57f2:	e893 0006 	ldmia.w	r3, {r1, r2}
   b57f6:	a854      	add	r0, sp, #336	; 0x150
   b57f8:	f7ff faa8 	bl	b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b57fc:	4620      	mov	r0, r4
   b57fe:	49b8      	ldr	r1, [pc, #736]	; (b5ae0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab4>)
   b5800:	f8df 832c 	ldr.w	r8, [pc, #812]	; b5b30 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb04>
   b5804:	f7fe fc80 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5808:	a872      	add	r0, sp, #456	; 0x1c8
   b580a:	49b6      	ldr	r1, [pc, #728]	; (b5ae4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab8>)
   b580c:	f7fe fc7c 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5810:	a878      	add	r0, sp, #480	; 0x1e0
   b5812:	49b5      	ldr	r1, [pc, #724]	; (b5ae8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xabc>)
   b5814:	f7fe fc78 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5818:	ab72      	add	r3, sp, #456	; 0x1c8
   b581a:	9314      	str	r3, [sp, #80]	; 0x50
   b581c:	2302      	movs	r3, #2
   b581e:	9315      	str	r3, [sp, #84]	; 0x54
   b5820:	af0e      	add	r7, sp, #56	; 0x38
   b5822:	aa14      	add	r2, sp, #80	; 0x50
   b5824:	ca06      	ldmia	r2, {r1, r2}
   b5826:	463b      	mov	r3, r7
   b5828:	a851      	add	r0, sp, #324	; 0x144
   b582a:	f7fe fffb 	bl	b4824 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b582e:	f10a 0250 	add.w	r2, sl, #80	; 0x50
   b5832:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   b5834:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5838:	2204      	movs	r2, #4
   b583a:	ab12      	add	r3, sp, #72	; 0x48
   b583c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   b5840:	9213      	str	r2, [sp, #76]	; 0x4c
   b5842:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5846:	a84e      	add	r0, sp, #312	; 0x138
   b5848:	f7ff fa80 	bl	b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway purpleLine = Railway(
   b584c:	ab4e      	add	r3, sp, #312	; 0x138
   b584e:	9302      	str	r3, [sp, #8]
   b5850:	ab51      	add	r3, sp, #324	; 0x144
   b5852:	aa57      	add	r2, sp, #348	; 0x15c
   b5854:	a95a      	add	r1, sp, #360	; 0x168
   b5856:	e9cd 4300 	strd	r4, r3, [sp]
   b585a:	48a4      	ldr	r0, [pc, #656]	; (b5aec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xac0>)
   b585c:	ab54      	add	r3, sp, #336	; 0x150
   b585e:	f7ff faf5 	bl	b4e4c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5862:	a84e      	add	r0, sp, #312	; 0x138
   b5864:	f7fe ff6a 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5868:	a851      	add	r0, sp, #324	; 0x144
   b586a:	f7fe ff71 	bl	b4750 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b586e:	a878      	add	r0, sp, #480	; 0x1e0
   b5870:	f004 fd40 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5874:	a872      	add	r0, sp, #456	; 0x1c8
   b5876:	f004 fd3d 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b587a:	4620      	mov	r0, r4
   b587c:	f004 fd3a 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5880:	a854      	add	r0, sp, #336	; 0x150
   b5882:	f7fe ff5b 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5886:	a857      	add	r0, sp, #348	; 0x15c
   b5888:	f7fe ff58 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b588c:	a85a      	add	r0, sp, #360	; 0x168
   b588e:	f7fe ff41 	bl	b4714 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5892:	4b97      	ldr	r3, [pc, #604]	; (b5af0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xac4>)
   b5894:	937e      	str	r3, [sp, #504]	; 0x1f8
      lon = lo;
   b5896:	4b97      	ldr	r3, [pc, #604]	; (b5af4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xac8>)
   b5898:	937f      	str	r3, [sp, #508]	; 0x1fc
      lat = la;
   b589a:	4b97      	ldr	r3, [pc, #604]	; (b5af8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xacc>)
   b589c:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b589e:	4b97      	ldr	r3, [pc, #604]	; (b5afc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xad0>)
   b58a0:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b58a2:	4b97      	ldr	r3, [pc, #604]	; (b5b00 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xad4>)
   b58a4:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b58a6:	4b97      	ldr	r3, [pc, #604]	; (b5b04 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xad8>)
   b58a8:	9383      	str	r3, [sp, #524]	; 0x20c
);
   b58aa:	ab7e      	add	r3, sp, #504	; 0x1f8
   b58ac:	9310      	str	r3, [sp, #64]	; 0x40
   b58ae:	2308      	movs	r3, #8
   b58b0:	9311      	str	r3, [sp, #68]	; 0x44
   b58b2:	e896 0006 	ldmia.w	r6, {r1, r2}
   b58b6:	ab07      	add	r3, sp, #28
   b58b8:	a85a      	add	r0, sp, #360	; 0x168
   b58ba:	f10a 06cc 	add.w	r6, sl, #204	; 0xcc
      lat = la;
   b58be:	edcd 8a84 	vstr	s17, [sp, #528]	; 0x210
      lon = lo;
   b58c2:	ed8d 8a85 	vstr	s16, [sp, #532]	; 0x214
      lat = la;
   b58c6:	edcd 9a86 	vstr	s19, [sp, #536]	; 0x218
      lon = lo;
   b58ca:	ed8d 9a87 	vstr	s18, [sp, #540]	; 0x21c
      lat = la;
   b58ce:	edcd aa88 	vstr	s21, [sp, #544]	; 0x220
      lon = lo;
   b58d2:	ed8d aa89 	vstr	s20, [sp, #548]	; 0x224
      lat = la;
   b58d6:	edcd ba8a 	vstr	s23, [sp, #552]	; 0x228
      lon = lo;
   b58da:	ed8d ba8b 	vstr	s22, [sp, #556]	; 0x22c
      lat = la;
   b58de:	edcd 8a8c 	vstr	s17, [sp, #560]	; 0x230
      lon = lo;
   b58e2:	ed8d 8a8d 	vstr	s16, [sp, #564]	; 0x234
   b58e6:	f7fe ff69 	bl	b47bc <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b58ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b58ec:	46dc      	mov	ip, fp
   b58ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b58f2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   b58f6:	9b04      	ldr	r3, [sp, #16]
   b58f8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   b58fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b5900:	2307      	movs	r3, #7
   b5902:	930f      	str	r3, [sp, #60]	; 0x3c
   b5904:	e897 0006 	ldmia.w	r7, {r1, r2}
   b5908:	a857      	add	r0, sp, #348	; 0x15c
   b590a:	f7ff fa1f 	bl	b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b590e:	f10a 03e8 	add.w	r3, sl, #232	; 0xe8
   b5912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b5914:	ae61      	add	r6, sp, #388	; 0x184
   b5916:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b591a:	2204      	movs	r2, #4
   b591c:	ab0c      	add	r3, sp, #48	; 0x30
   b591e:	960c      	str	r6, [sp, #48]	; 0x30
   b5920:	920d      	str	r2, [sp, #52]	; 0x34
   b5922:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5926:	a854      	add	r0, sp, #336	; 0x150
   b5928:	f7ff fa10 	bl	b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b592c:	4620      	mov	r0, r4
   b592e:	4976      	ldr	r1, [pc, #472]	; (b5b08 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xadc>)
   b5930:	4e76      	ldr	r6, [pc, #472]	; (b5b0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae0>)
   b5932:	f7fe fbe9 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5936:	a872      	add	r0, sp, #456	; 0x1c8
   b5938:	4975      	ldr	r1, [pc, #468]	; (b5b10 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae4>)
   b593a:	f7fe fbe5 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b593e:	a878      	add	r0, sp, #480	; 0x1e0
   b5940:	4974      	ldr	r1, [pc, #464]	; (b5b14 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae8>)
   b5942:	f7fe fbe1 	bl	b4108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5946:	ab72      	add	r3, sp, #456	; 0x1c8
   b5948:	930a      	str	r3, [sp, #40]	; 0x28
   b594a:	2302      	movs	r3, #2
   b594c:	930b      	str	r3, [sp, #44]	; 0x2c
   b594e:	aa0a      	add	r2, sp, #40	; 0x28
   b5950:	ab06      	add	r3, sp, #24
   b5952:	ca06      	ldmia	r2, {r1, r2}
   b5954:	a851      	add	r0, sp, #324	; 0x144
   b5956:	f10a 0af8 	add.w	sl, sl, #248	; 0xf8
   b595a:	f7fe ff63 	bl	b4824 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b595e:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
   b5962:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   b5966:	2204      	movs	r2, #4
   b5968:	ab08      	add	r3, sp, #32
   b596a:	f8cd 9020 	str.w	r9, [sp, #32]
   b596e:	9209      	str	r2, [sp, #36]	; 0x24
   b5970:	e893 0006 	ldmia.w	r3, {r1, r2}
   b5974:	a84e      	add	r0, sp, #312	; 0x138
   b5976:	f7ff f9e9 	bl	b4d4c <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway pinkLine = Railway(
   b597a:	ab4e      	add	r3, sp, #312	; 0x138
   b597c:	9302      	str	r3, [sp, #8]
   b597e:	ab51      	add	r3, sp, #324	; 0x144
   b5980:	aa57      	add	r2, sp, #348	; 0x15c
   b5982:	a95a      	add	r1, sp, #360	; 0x168
   b5984:	e9cd 4300 	strd	r4, r3, [sp]
   b5988:	4863      	ldr	r0, [pc, #396]	; (b5b18 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaec>)
   b598a:	ab54      	add	r3, sp, #336	; 0x150
   b598c:	f7ff fa5e 	bl	b4e4c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b5990:	a84e      	add	r0, sp, #312	; 0x138
   b5992:	f7fe fed3 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5996:	a851      	add	r0, sp, #324	; 0x144
   b5998:	f7fe feda 	bl	b4750 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b599c:	a878      	add	r0, sp, #480	; 0x1e0
   b599e:	f004 fca9 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b59a2:	a872      	add	r0, sp, #456	; 0x1c8
   b59a4:	f004 fca6 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b59a8:	4620      	mov	r0, r4
   b59aa:	f004 fca3 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b59ae:	a854      	add	r0, sp, #336	; 0x150
   b59b0:	f7fe fec4 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b59b4:	a857      	add	r0, sp, #348	; 0x15c
   b59b6:	f7fe fec1 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b59ba:	a85a      	add	r0, sp, #360	; 0x168
   b59bc:	f7fe feaa 	bl	b4714 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b59c0:	4b56      	ldr	r3, [pc, #344]	; (b5b1c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaf0>)
std::vector<int> addressArr = std::vector<int>(slaveCountExpected, 0);
   b59c2:	4957      	ldr	r1, [pc, #348]	; (b5b20 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaf4>)
   b59c4:	609d      	str	r5, [r3, #8]
   b59c6:	aa7e      	add	r2, sp, #504	; 0x1f8
   b59c8:	e9c3 5500 	strd	r5, r5, [r3]
   b59cc:	6809      	ldr	r1, [r1, #0]
   b59ce:	4855      	ldr	r0, [pc, #340]	; (b5b24 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaf8>)
   b59d0:	957e      	str	r5, [sp, #504]	; 0x1f8
   b59d2:	ab72      	add	r3, sp, #456	; 0x1c8
   b59d4:	f7fe fed0 	bl	b4778 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b59d8:	4b53      	ldr	r3, [pc, #332]	; (b5b28 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xafc>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b59da:	4954      	ldr	r1, [pc, #336]	; (b5b2c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb00>)
   b59dc:	609d      	str	r5, [r3, #8]
   b59de:	e9c3 5500 	strd	r5, r5, [r3]
   b59e2:	4853      	ldr	r0, [pc, #332]	; (b5b30 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb04>)
   b59e4:	f002 fbb4 	bl	b8150 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b59e8:	4952      	ldr	r1, [pc, #328]	; (b5b34 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb08>)
   b59ea:	4853      	ldr	r0, [pc, #332]	; (b5b38 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb0c>)
   b59ec:	f002 fbb0 	bl	b8150 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b59f0:	4952      	ldr	r1, [pc, #328]	; (b5b3c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb10>)
   b59f2:	4846      	ldr	r0, [pc, #280]	; (b5b0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xae0>)
   b59f4:	f002 fbac 	bl	b8150 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b59f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b59fa:	46a2      	mov	sl, r4
   b59fc:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
   b5a00:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b5a04:	46c1      	mov	r9, r8
   b5a06:	f8d6 c000 	ldr.w	ip, [r6]
   b5a0a:	f8ca c000 	str.w	ip, [sl]
   b5a0e:	465e      	mov	r6, fp
   b5a10:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5a12:	f859 3910 	ldr.w	r3, [r9], #-16
   b5a16:	9305      	str	r3, [sp, #20]
   b5a18:	9b04      	ldr	r3, [sp, #16]
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b5a1a:	f8df e148 	ldr.w	lr, [pc, #328]	; b5b64 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb38>
   b5a1e:	461a      	mov	r2, r3
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b5a20:	4626      	mov	r6, r4
   b5a22:	9b05      	ldr	r3, [sp, #20]
   b5a24:	6013      	str	r3, [r2, #0]
   b5a26:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5a28:	af72      	add	r7, sp, #456	; 0x1c8
      constexpr __shared_count() noexcept : _M_pi(0)
   b5a2a:	e9ce 5500 	strd	r5, r5, [lr]
   b5a2e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b5a30:	f8c7 c000 	str.w	ip, [r7]
        BleUuid sUuid(svcUuid);
   b5a34:	46dc      	mov	ip, fp
   b5a36:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5a3a:	ae7e      	add	r6, sp, #504	; 0x1f8
   b5a3c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5a3e:	9b05      	ldr	r3, [sp, #20]
   b5a40:	6033      	str	r3, [r6, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5a42:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5a44:	9300      	str	r3, [sp, #0]
   b5a46:	4670      	mov	r0, lr
   b5a48:	ab72      	add	r3, sp, #456	; 0x1c8
   b5a4a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5a4e:	493c      	ldr	r1, [pc, #240]	; (b5b40 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb14>)
   b5a50:	f04f 0210 	mov.w	r2, #16
   b5a54:	f003 f874 	bl	b8b40 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b5a58:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b5b38 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb0c>
   b5a5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5a60:	46a6      	mov	lr, r4
   b5a62:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b5a66:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b5a6a:	f8dc e000 	ldr.w	lr, [ip]
   b5a6e:	f8ca e000 	str.w	lr, [sl]
   b5a72:	46dc      	mov	ip, fp
   b5a74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5a78:	9b04      	ldr	r3, [sp, #16]
   b5a7a:	f8d8 9000 	ldr.w	r9, [r8]
   b5a7e:	f8c3 9000 	str.w	r9, [r3]
        BleUuid cUuid(charUuid);
   b5a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b5a84:	f8df 80e0 	ldr.w	r8, [pc, #224]	; b5b68 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb3c>
   b5a88:	f50d 7ce4 	add.w	ip, sp, #456	; 0x1c8
        BleUuid sUuid(svcUuid);
   b5a8c:	465c      	mov	r4, fp
        BleUuid cUuid(charUuid);
   b5a8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
      constexpr __shared_count() noexcept : _M_pi(0)
   b5a92:	e9c8 5500 	strd	r5, r5, [r8]
   b5a96:	f8c7 e000 	str.w	lr, [r7]
        BleUuid sUuid(svcUuid);
   b5a9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5a9c:	af7e      	add	r7, sp, #504	; 0x1f8
   b5a9e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5aa0:	4b28      	ldr	r3, [pc, #160]	; (b5b44 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb18>)
        BleUuid sUuid(svcUuid);
   b5aa2:	f8c6 9000 	str.w	r9, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5aa6:	9301      	str	r3, [sp, #4]
   b5aa8:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5aaa:	f04f 0204 	mov.w	r2, #4
   b5aae:	9300      	str	r3, [sp, #0]
   b5ab0:	4640      	mov	r0, r8
   b5ab2:	ab72      	add	r3, sp, #456	; 0x1c8
   b5ab4:	4924      	ldr	r1, [pc, #144]	; (b5b48 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb1c>)
   b5ab6:	9502      	str	r5, [sp, #8]
   b5ab8:	f003 f842 	bl	b8b40 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b5abc:	4923      	ldr	r1, [pc, #140]	; (b5b4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb20>)
   b5abe:	4824      	ldr	r0, [pc, #144]	; (b5b50 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb24>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b5ac0:	4c24      	ldr	r4, [pc, #144]	; (b5b54 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb28>)
   b5ac2:	f003 fd60 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
   b5ac6:	4824      	ldr	r0, [pc, #144]	; (b5b58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb2c>)
   b5ac8:	f003 fb6a 	bl	b91a0 <_ZN9IPAddressC1Ev>
   b5acc:	491f      	ldr	r1, [pc, #124]	; (b5b4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb20>)
   b5ace:	4823      	ldr	r0, [pc, #140]	; (b5b5c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb30>)
   b5ad0:	f003 fd59 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
   b5ad4:	491d      	ldr	r1, [pc, #116]	; (b5b4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb20>)
   b5ad6:	4822      	ldr	r0, [pc, #136]	; (b5b60 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb34>)
   b5ad8:	f003 fd55 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
   b5adc:	e046      	b.n	b5b6c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb40>
   b5ade:	bf00      	nop
   b5ae0:	000bd523 	.word	0x000bd523
   b5ae4:	000bd52a 	.word	0x000bd52a
   b5ae8:	000bd531 	.word	0x000bd531
   b5aec:	2003e550 	.word	0x2003e550
   b5af0:	42276a76 	.word	0x42276a76
   b5af4:	c2af692b 	.word	0xc2af692b
   b5af8:	42276b5f 	.word	0x42276b5f
   b5afc:	c2af56cd 	.word	0xc2af56cd
   b5b00:	42278a2d 	.word	0x42278a2d
   b5b04:	c2af56d8 	.word	0xc2af56d8
   b5b08:	000bd538 	.word	0x000bd538
   b5b0c:	2003551c 	.word	0x2003551c
   b5b10:	000bd53d 	.word	0x000bd53d
   b5b14:	000bd544 	.word	0x000bd544
   b5b18:	2003e4e4 	.word	0x2003e4e4
   b5b1c:	2003e5bc 	.word	0x2003e5bc
   b5b20:	200352f4 	.word	0x200352f4
   b5b24:	20035530 	.word	0x20035530
   b5b28:	2003e69c 	.word	0x2003e69c
   b5b2c:	000bd54b 	.word	0x000bd54b
   b5b30:	200354f4 	.word	0x200354f4
   b5b34:	000bd570 	.word	0x000bd570
   b5b38:	20035508 	.word	0x20035508
   b5b3c:	000bd595 	.word	0x000bd595
   b5b40:	000bd5ba 	.word	0x000bd5ba
   b5b44:	000b48f9 	.word	0x000b48f9
   b5b48:	000bd5bd 	.word	0x000bd5bd
   b5b4c:	000bd7d2 	.word	0x000bd7d2
   b5b50:	2003e634 	.word	0x2003e634
   b5b54:	20037f18 	.word	0x20037f18
   b5b58:	2003e644 	.word	0x2003e644
   b5b5c:	2003e65c 	.word	0x2003e65c
   b5b60:	2003e670 	.word	0x2003e670
   b5b64:	2003e6ac 	.word	0x2003e6ac
   b5b68:	2003e694 	.word	0x2003e694
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b5b6c:	4947      	ldr	r1, [pc, #284]	; (b5c8c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc60>)
   b5b6e:	4848      	ldr	r0, [pc, #288]	; (b5c90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc64>)
   b5b70:	f003 fd09 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
HttpClient http;
   b5b74:	4847      	ldr	r0, [pc, #284]	; (b5c94 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc68>)
   b5b76:	f001 f837 	bl	b6be8 <_ZN10HttpClientC1Ev>
   b5b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5b7e:	9300      	str	r3, [sp, #0]
   b5b80:	f242 7210 	movw	r2, #10000	; 0x2710
   b5b84:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b5b88:	4b43      	ldr	r3, [pc, #268]	; (b5c98 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc6c>)
   b5b8a:	4620      	mov	r0, r4
   b5b8c:	f001 fa04 	bl	b6f98 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b5b90:	4b42      	ldr	r3, [pc, #264]	; (b5c9c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc70>)
String SSID = "";
   b5b92:	493e      	ldr	r1, [pc, #248]	; (b5c8c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc60>)
   b5b94:	6023      	str	r3, [r4, #0]
   b5b96:	4842      	ldr	r0, [pc, #264]	; (b5ca0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc74>)
   b5b98:	f003 fcf5 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
String password = "";
   b5b9c:	493b      	ldr	r1, [pc, #236]	; (b5c8c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc60>)
   b5b9e:	4841      	ldr	r0, [pc, #260]	; (b5ca4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc78>)
   b5ba0:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   b5ba4:	ecbd 8b0e 	vpop	{d8-d14}
   b5ba8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
String password = "";
   b5bac:	f003 bceb 	b.w	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
	_M_deallocate(_M_impl._M_start,
   b5bb0:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b5bb2:	b118      	cbz	r0, b5bbc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb90>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b5bb4:	68a1      	ldr	r1, [r4, #8]
   b5bb6:	1a09      	subs	r1, r1, r0
   b5bb8:	f7fe fa73 	bl	b40a2 <_ZdlPvj>
Railway pinkLine = Railway(
   b5bbc:	483a      	ldr	r0, [pc, #232]	; (b5ca8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc7c>)
   b5bbe:	f7ff f87d 	bl	b4cbc <_ZN7RailwayD1Ev>
Railway purpleLine = Railway(
   b5bc2:	483a      	ldr	r0, [pc, #232]	; (b5cac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc80>)
   b5bc4:	f7ff f87a 	bl	b4cbc <_ZN7RailwayD1Ev>
Railway orangeLine = Railway(
   b5bc8:	4839      	ldr	r0, [pc, #228]	; (b5cb0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc84>)
   b5bca:	f7ff f877 	bl	b4cbc <_ZN7RailwayD1Ev>
Railway greenLine = Railway(
   b5bce:	4839      	ldr	r0, [pc, #228]	; (b5cb4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc88>)
   b5bd0:	f7ff f874 	bl	b4cbc <_ZN7RailwayD1Ev>
Railway brownLine = Railway(
   b5bd4:	4838      	ldr	r0, [pc, #224]	; (b5cb8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc8c>)
   b5bd6:	f7ff f871 	bl	b4cbc <_ZN7RailwayD1Ev>
Railway blueLine = Railway(
   b5bda:	4838      	ldr	r0, [pc, #224]	; (b5cbc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc90>)
   b5bdc:	f7ff f86e 	bl	b4cbc <_ZN7RailwayD1Ev>
Railway redLine = Railway(
   b5be0:	4837      	ldr	r0, [pc, #220]	; (b5cc0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc94>)
   b5be2:	f7ff f86b 	bl	b4cbc <_ZN7RailwayD1Ev>
        if (wakeupSource_) {
   b5be6:	4b37      	ldr	r3, [pc, #220]	; (b5cc4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc98>)
   b5be8:	6818      	ldr	r0, [r3, #0]
   b5bea:	2800      	cmp	r0, #0
   b5bec:	d047      	beq.n	b5c7e <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc52>
   b5bee:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   b5bf2:	ecbd 8b0e 	vpop	{d8-d14}
   b5bf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            free(wakeupSource_);
   b5bfa:	f002 b855 	b.w	b7ca8 <free>
String password = "";
   b5bfe:	4829      	ldr	r0, [pc, #164]	; (b5ca4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc78>)
   b5c00:	f003 fc76 	bl	b94f0 <_ZN6StringD1Ev>
String SSID = "";
   b5c04:	4826      	ldr	r0, [pc, #152]	; (b5ca0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc74>)
   b5c06:	f003 fc73 	bl	b94f0 <_ZN6StringD1Ev>
JsonParserStatic<10000, 1000> parser;
   b5c0a:	482f      	ldr	r0, [pc, #188]	; (b5cc8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc9c>)
   b5c0c:	f7fe fa54 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5c10:	4b20      	ldr	r3, [pc, #128]	; (b5c94 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc68>)
   b5c12:	4a2e      	ldr	r2, [pc, #184]	; (b5ccc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xca0>)
	if (_M_pi != nullptr)
   b5c14:	699c      	ldr	r4, [r3, #24]
   b5c16:	601a      	str	r2, [r3, #0]
   b5c18:	b17c      	cbz	r4, b5c3a <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc0e>
      if (--_M_use_count == 0)
   b5c1a:	6863      	ldr	r3, [r4, #4]
   b5c1c:	3b01      	subs	r3, #1
   b5c1e:	6063      	str	r3, [r4, #4]
   b5c20:	b95b      	cbnz	r3, b5c3a <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc0e>
          _M_dispose();
   b5c22:	6823      	ldr	r3, [r4, #0]
   b5c24:	4620      	mov	r0, r4
   b5c26:	689b      	ldr	r3, [r3, #8]
   b5c28:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5c2a:	68a3      	ldr	r3, [r4, #8]
   b5c2c:	3b01      	subs	r3, #1
   b5c2e:	60a3      	str	r3, [r4, #8]
   b5c30:	b91b      	cbnz	r3, b5c3a <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc0e>
            _M_destroy();
   b5c32:	6823      	ldr	r3, [r4, #0]
   b5c34:	4620      	mov	r0, r4
   b5c36:	68db      	ldr	r3, [r3, #12]
   b5c38:	4798      	blx	r3
   b5c3a:	4815      	ldr	r0, [pc, #84]	; (b5c90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc64>)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5c3c:	4c24      	ldr	r4, [pc, #144]	; (b5cd0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xca4>)
   b5c3e:	f003 fc57 	bl	b94f0 <_ZN6StringD1Ev>
} http_request_t;
   b5c42:	4824      	ldr	r0, [pc, #144]	; (b5cd4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xca8>)
   b5c44:	f003 fc54 	bl	b94f0 <_ZN6StringD1Ev>
   b5c48:	4823      	ldr	r0, [pc, #140]	; (b5cd8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcac>)
   b5c4a:	f003 fc51 	bl	b94f0 <_ZN6StringD1Ev>
   b5c4e:	4823      	ldr	r0, [pc, #140]	; (b5cdc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcb0>)
   b5c50:	f003 fc4e 	bl	b94f0 <_ZN6StringD1Ev>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b5c54:	4822      	ldr	r0, [pc, #136]	; (b5ce0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcb4>)
   b5c56:	f002 fc5a 	bl	b850e <_ZN8particle17BleCharacteristicD1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b5c5a:	4822      	ldr	r0, [pc, #136]	; (b5ce4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcb8>)
   b5c5c:	f002 fc57 	bl	b850e <_ZN8particle17BleCharacteristicD1Ev>
      }
   b5c60:	4821      	ldr	r0, [pc, #132]	; (b5ce8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcbc>)
   b5c62:	f7fe fd6b 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5c66:	4821      	ldr	r0, [pc, #132]	; (b5cec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xcc0>)
   b5c68:	f7fe fd68 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5c6c:	e9d4 5600 	ldrd	r5, r6, [r4]
	  for (; __first != __last; ++__first)
   b5c70:	42ae      	cmp	r6, r5
   b5c72:	d09d      	beq.n	b5bb0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb84>
      __pointer->~_Tp();
   b5c74:	4628      	mov	r0, r5
   b5c76:	f7ff f821 	bl	b4cbc <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b5c7a:	356c      	adds	r5, #108	; 0x6c
   b5c7c:	e7f8      	b.n	b5c70 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc44>
   b5c7e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   b5c82:	ecbd 8b0e 	vpop	{d8-d14}
   b5c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5c8a:	bf00      	nop
   b5c8c:	000bd7d2 	.word	0x000bd7d2
   b5c90:	2003e684 	.word	0x2003e684
   b5c94:	20035690 	.word	0x20035690
   b5c98:	2003a654 	.word	0x2003a654
   b5c9c:	000bd67c 	.word	0x000bd67c
   b5ca0:	200354d8 	.word	0x200354d8
   b5ca4:	2003e4d4 	.word	0x2003e4d4
   b5ca8:	2003e4e4 	.word	0x2003e4e4
   b5cac:	2003e550 	.word	0x2003e550
   b5cb0:	20037eac 	.word	0x20037eac
   b5cb4:	2003561c 	.word	0x2003561c
   b5cb8:	200355ac 	.word	0x200355ac
   b5cbc:	20035540 	.word	0x20035540
   b5cc0:	2003e5c8 	.word	0x2003e5c8
   b5cc4:	200354e8 	.word	0x200354e8
   b5cc8:	20037f18 	.word	0x20037f18
   b5ccc:	000bdadc 	.word	0x000bdadc
   b5cd0:	2003e5bc 	.word	0x2003e5bc
   b5cd4:	2003e670 	.word	0x2003e670
   b5cd8:	2003e65c 	.word	0x2003e65c
   b5cdc:	2003e634 	.word	0x2003e634
   b5ce0:	2003e694 	.word	0x2003e694
   b5ce4:	2003e6ac 	.word	0x2003e6ac
   b5ce8:	2003e69c 	.word	0x2003e69c
   b5cec:	20035530 	.word	0x20035530

000b5cf0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b5cf0:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b5cf2:	b510      	push	{r4, lr}
   b5cf4:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b5cf6:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b5cfa:	d005      	beq.n	b5d08 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b5cfc:	4601      	mov	r1, r0
   b5cfe:	4622      	mov	r2, r4
   b5d00:	4618      	mov	r0, r3
   b5d02:	f005 fab5 	bl	bb270 <memmove>
   b5d06:	4603      	mov	r3, r0
	}
   b5d08:	1918      	adds	r0, r3, r4
   b5d0a:	bd10      	pop	{r4, pc}

000b5d0c <_ZN7RailwayC1ERKS_>:
class Railway{
   b5d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5d10:	460d      	mov	r5, r1
   b5d12:	4604      	mov	r4, r0
   b5d14:	f7fe fdba 	bl	b488c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5d18:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5d1c:	2600      	movs	r6, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5d1e:	1ac9      	subs	r1, r1, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5d20:	e9c4 6603 	strd	r6, r6, [r4, #12]
   b5d24:	6166      	str	r6, [r4, #20]
      { _M_create_storage(__n); }
   b5d26:	1089      	asrs	r1, r1, #2
   b5d28:	f104 000c 	add.w	r0, r4, #12
   b5d2c:	f7fe ffa6 	bl	b4c7c <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
			      _Category>::__copy_m(__first, __last, __result);
   b5d30:	68e2      	ldr	r2, [r4, #12]
   b5d32:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
   b5d36:	f7ff ffdb 	bl	b5cf0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b5d3a:	f105 0118 	add.w	r1, r5, #24
	this->_M_impl._M_finish =
   b5d3e:	6120      	str	r0, [r4, #16]
   b5d40:	f104 0018 	add.w	r0, r4, #24
   b5d44:	f7fe ffe8 	bl	b4d18 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5d48:	e9d5 3709 	ldrd	r3, r7, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5d4c:	4826      	ldr	r0, [pc, #152]	; (b5de8 <_ZN7RailwayC1ERKS_+0xdc>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5d4e:	62e6      	str	r6, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5d50:	1aff      	subs	r7, r7, r3
   b5d52:	10bb      	asrs	r3, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5d54:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5d58:	4358      	muls	r0, r3
   b5d5a:	f7fe f9c3 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5d5e:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5d62:	4407      	add	r7, r0
   b5d64:	62e7      	str	r7, [r4, #44]	; 0x2c
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5d66:	e9d5 7809 	ldrd	r7, r8, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5d6a:	4606      	mov	r6, r0
   b5d6c:	45b8      	cmp	r8, r7
   b5d6e:	d007      	beq.n	b5d80 <_ZN7RailwayC1ERKS_+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5d70:	b11e      	cbz	r6, b5d7a <_ZN7RailwayC1ERKS_+0x6e>
   b5d72:	4639      	mov	r1, r7
   b5d74:	4630      	mov	r0, r6
   b5d76:	f7fe ffcf 	bl	b4d18 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5d7a:	360c      	adds	r6, #12
   b5d7c:	370c      	adds	r7, #12
   b5d7e:	e7f5      	b.n	b5d6c <_ZN7RailwayC1ERKS_+0x60>
	this->_M_impl._M_finish =
   b5d80:	62a6      	str	r6, [r4, #40]	; 0x28
   b5d82:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b5d86:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b5d8a:	f7fe fa35 	bl	b41f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5d8e:	e9d5 3712 	ldrd	r3, r7, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5d92:	4815      	ldr	r0, [pc, #84]	; (b5de8 <_ZN7RailwayC1ERKS_+0xdc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5d94:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5d96:	2300      	movs	r3, #0
   b5d98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b5d9c:	6523      	str	r3, [r4, #80]	; 0x50
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5d9e:	10fb      	asrs	r3, r7, #3
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5da0:	4358      	muls	r0, r3
   b5da2:	f7fe f9d9 	bl	b4158 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5da6:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5daa:	4407      	add	r7, r0
   b5dac:	6527      	str	r7, [r4, #80]	; 0x50
   b5dae:	e9d5 7812 	ldrd	r7, r8, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5db2:	4606      	mov	r6, r0
   b5db4:	45b8      	cmp	r8, r7
   b5db6:	d007      	beq.n	b5dc8 <_ZN7RailwayC1ERKS_+0xbc>
   b5db8:	b11e      	cbz	r6, b5dc2 <_ZN7RailwayC1ERKS_+0xb6>
   b5dba:	4639      	mov	r1, r7
   b5dbc:	4630      	mov	r0, r6
   b5dbe:	f7fe fa1b 	bl	b41f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b5dc2:	3618      	adds	r6, #24
   b5dc4:	3718      	adds	r7, #24
   b5dc6:	e7f5      	b.n	b5db4 <_ZN7RailwayC1ERKS_+0xa8>
	this->_M_impl._M_finish =
   b5dc8:	64e6      	str	r6, [r4, #76]	; 0x4c
   b5dca:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b5dcc:	6563      	str	r3, [r4, #84]	; 0x54
   b5dce:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b5dd0:	65a3      	str	r3, [r4, #88]	; 0x58
   b5dd2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b5dd4:	65e3      	str	r3, [r4, #92]	; 0x5c
   b5dd6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b5dd8:	6623      	str	r3, [r4, #96]	; 0x60
   b5dda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b5ddc:	6663      	str	r3, [r4, #100]	; 0x64
   b5dde:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b5de0:	66a3      	str	r3, [r4, #104]	; 0x68
   b5de2:	4620      	mov	r0, r4
   b5de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5de8:	aaaaaaab 	.word	0xaaaaaaab

000b5dec <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b5dec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5df0:	eba1 0800 	sub.w	r8, r1, r0
   b5df4:	496b      	ldr	r1, [pc, #428]	; (b5fa4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1b8>)
   b5df6:	f8df a1b4 	ldr.w	sl, [pc, #436]	; b5fac <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1c0>
   b5dfa:	ea4f 08a8 	mov.w	r8, r8, asr #2
	__copy_m(_II __first, _II __last, _OI __result)
   b5dfe:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5e00:	fb01 f808 	mul.w	r8, r1, r8
   b5e04:	4614      	mov	r4, r2
   b5e06:	f1b8 0f00 	cmp.w	r8, #0
   b5e0a:	f340 80c6 	ble.w	b5f9a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1ae>
   b5e0e:	4629      	mov	r1, r5
   b5e10:	4620      	mov	r0, r4
   b5e12:	f7fe fa2d 	bl	b4270 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      if (&__x != this)
   b5e16:	42a5      	cmp	r5, r4
   b5e18:	d025      	beq.n	b5e66 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x7a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5e1a:	e9d5 9103 	ldrd	r9, r1, [r5, #12]
			 - this->_M_impl._M_start); }
   b5e1e:	68e2      	ldr	r2, [r4, #12]
   b5e20:	6963      	ldr	r3, [r4, #20]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5e22:	eba1 0609 	sub.w	r6, r1, r9
			 - this->_M_impl._M_start); }
   b5e26:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b5e28:	429e      	cmp	r6, r3
   b5e2a:	d943      	bls.n	b5eb4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xc8>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5e2c:	2e00      	cmp	r6, #0
   b5e2e:	d03f      	beq.n	b5eb0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xc4>
	if (__n > this->_M_max_size())
   b5e30:	4b5d      	ldr	r3, [pc, #372]	; (b5fa8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1bc>)
   b5e32:	429e      	cmp	r6, r3
   b5e34:	d901      	bls.n	b5e3a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x4e>
	  std::__throw_bad_alloc();
   b5e36:	f004 fa25 	bl	ba284 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5e3a:	4630      	mov	r0, r6
   b5e3c:	9101      	str	r1, [sp, #4]
   b5e3e:	f7fe f92a 	bl	b4096 <_Znwj>
   b5e42:	9901      	ldr	r1, [sp, #4]
   b5e44:	4607      	mov	r7, r0
			      _Category>::__copy_m(__first, __last, __result);
   b5e46:	463a      	mov	r2, r7
   b5e48:	4648      	mov	r0, r9
   b5e4a:	f7ff ff51 	bl	b5cf0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5e4e:	68e0      	ldr	r0, [r4, #12]
	if (__p)
   b5e50:	b118      	cbz	r0, b5e5a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x6e>
			    - this->_M_impl._M_start);
   b5e52:	6961      	ldr	r1, [r4, #20]
	::operator delete(__p
   b5e54:	1a09      	subs	r1, r1, r0
   b5e56:	f7fe f924 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b5e5a:	60e7      	str	r7, [r4, #12]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b5e5c:	4437      	add	r7, r6
   b5e5e:	6167      	str	r7, [r4, #20]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b5e60:	68e3      	ldr	r3, [r4, #12]
   b5e62:	4433      	add	r3, r6
   b5e64:	6123      	str	r3, [r4, #16]
   b5e66:	f105 0118 	add.w	r1, r5, #24
   b5e6a:	f104 0018 	add.w	r0, r4, #24
   b5e6e:	f7fe ff97 	bl	b4da0 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      if (&__x != this)
   b5e72:	42a5      	cmp	r5, r4
   b5e74:	d042      	beq.n	b5efc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x110>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5e76:	e9d5 6b09 	ldrd	r6, fp, [r5, #36]	; 0x24
			 - this->_M_impl._M_start); }
   b5e7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b5e7c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5e7e:	ebab 0906 	sub.w	r9, fp, r6
			 - this->_M_impl._M_start); }
   b5e82:	1a89      	subs	r1, r1, r2
	  if (__xlen > capacity())
   b5e84:	4549      	cmp	r1, r9
   b5e86:	d256      	bcs.n	b5f36 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x14a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5e88:	ea4f 00a9 	mov.w	r0, r9, asr #2
	  pointer __result = this->_M_allocate(__n);
   b5e8c:	fb0a f000 	mul.w	r0, sl, r0
   b5e90:	f7fe f928 	bl	b40e4 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b5e94:	4607      	mov	r7, r0
	  _ForwardIterator __cur = __result;
   b5e96:	4602      	mov	r2, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b5e98:	45b3      	cmp	fp, r6
   b5e9a:	d01f      	beq.n	b5edc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xf0>
   b5e9c:	b12a      	cbz	r2, b5eaa <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xbe>
   b5e9e:	4610      	mov	r0, r2
   b5ea0:	4631      	mov	r1, r6
   b5ea2:	9201      	str	r2, [sp, #4]
   b5ea4:	f7fe ff38 	bl	b4d18 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5ea8:	9a01      	ldr	r2, [sp, #4]
   b5eaa:	320c      	adds	r2, #12
   b5eac:	360c      	adds	r6, #12
   b5eae:	e7f3      	b.n	b5e98 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xac>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5eb0:	4637      	mov	r7, r6
   b5eb2:	e7c8      	b.n	b5e46 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x5a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5eb4:	6923      	ldr	r3, [r4, #16]
   b5eb6:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b5eb8:	429e      	cmp	r6, r3
   b5eba:	d803      	bhi.n	b5ec4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xd8>
   b5ebc:	4648      	mov	r0, r9
   b5ebe:	f7ff ff17 	bl	b5cf0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
    { return std::uninitialized_copy(__first, __last, __result); }
   b5ec2:	e7cd      	b.n	b5e60 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x74>
   b5ec4:	eb09 0103 	add.w	r1, r9, r3
   b5ec8:	4648      	mov	r0, r9
   b5eca:	f7ff ff11 	bl	b5cf0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b5ece:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
   b5ed2:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
   b5ed6:	1a10      	subs	r0, r2, r0
   b5ed8:	4418      	add	r0, r3
   b5eda:	e7f0      	b.n	b5ebe <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xd2>
	__destroy(__first, __last);
   b5edc:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b5ee0:	f7fe fee1 	bl	b4ca6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	      _M_deallocate(this->_M_impl._M_start,
   b5ee4:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b5ee6:	b118      	cbz	r0, b5ef0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x104>
			    - this->_M_impl._M_start);
   b5ee8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b5eea:	1a09      	subs	r1, r1, r0
   b5eec:	f7fe f8d9 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b5ef0:	6267      	str	r7, [r4, #36]	; 0x24
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b5ef2:	444f      	add	r7, r9
   b5ef4:	62e7      	str	r7, [r4, #44]	; 0x2c
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b5ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b5ef8:	444b      	add	r3, r9
   b5efa:	62a3      	str	r3, [r4, #40]	; 0x28
	this->_M_assign(__str);
   b5efc:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b5f00:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b5f04:	f004 fa14 	bl	ba330 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b5f08:	f105 0148 	add.w	r1, r5, #72	; 0x48
   b5f0c:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b5f10:	f7fe fa00 	bl	b4314 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
   b5f14:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b5f16:	6563      	str	r3, [r4, #84]	; 0x54
   b5f18:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b5f1a:	65a3      	str	r3, [r4, #88]	; 0x58
   b5f1c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b5f1e:	65e3      	str	r3, [r4, #92]	; 0x5c
   b5f20:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b5f22:	6623      	str	r3, [r4, #96]	; 0x60
   b5f24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   b5f26:	6663      	str	r3, [r4, #100]	; 0x64
   b5f28:	6eab      	ldr	r3, [r5, #104]	; 0x68
   b5f2a:	66a3      	str	r3, [r4, #104]	; 0x68
	      ++__first;
   b5f2c:	356c      	adds	r5, #108	; 0x6c
	      ++__result;
   b5f2e:	346c      	adds	r4, #108	; 0x6c
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5f30:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b5f34:	e767      	b.n	b5e06 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f36:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   b5f38:	1abf      	subs	r7, r7, r2
	  else if (size() >= __xlen)
   b5f3a:	45b9      	cmp	r9, r7
   b5f3c:	d80c      	bhi.n	b5f58 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x16c>
			      _Category>::__copy_m(__first, __last, __result);
   b5f3e:	4630      	mov	r0, r6
   b5f40:	4659      	mov	r1, fp
   b5f42:	f7fe ff65 	bl	b4e10 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      : _M_current(__i) { }
   b5f46:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b5f48:	4606      	mov	r6, r0
	  for (; __first != __last; ++__first)
   b5f4a:	42b7      	cmp	r7, r6
   b5f4c:	d0d3      	beq.n	b5ef6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x10a>
      }
   b5f4e:	4630      	mov	r0, r6
   b5f50:	f7fe fbf4 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b5f54:	360c      	adds	r6, #12
	return *this;
   b5f56:	e7f8      	b.n	b5f4a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x15e>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5f58:	10bf      	asrs	r7, r7, #2
   b5f5a:	fb0a f707 	mul.w	r7, sl, r7
   b5f5e:	2f00      	cmp	r7, #0
   b5f60:	dd09      	ble.n	b5f76 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x18a>
	      *__result = *__first;
   b5f62:	4631      	mov	r1, r6
   b5f64:	4610      	mov	r0, r2
   b5f66:	9201      	str	r2, [sp, #4]
   b5f68:	f7fe ff1a 	bl	b4da0 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__result;
   b5f6c:	9a01      	ldr	r2, [sp, #4]
	      ++__first;
   b5f6e:	360c      	adds	r6, #12
	      ++__result;
   b5f70:	320c      	adds	r2, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5f72:	3f01      	subs	r7, #1
   b5f74:	e7f3      	b.n	b5f5e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x172>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f76:	e9d4 6709 	ldrd	r6, r7, [r4, #36]	; 0x24
   b5f7a:	1bb9      	subs	r1, r7, r6
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b5f7c:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					  __x._M_impl._M_finish,
   b5f7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b5f80:	440e      	add	r6, r1
	      for (; __first != __last; ++__first, (void)++__cur)
   b5f82:	42b3      	cmp	r3, r6
   b5f84:	d0b7      	beq.n	b5ef6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x10a>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5f86:	b12f      	cbz	r7, b5f94 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1a8>
   b5f88:	4631      	mov	r1, r6
   b5f8a:	4638      	mov	r0, r7
   b5f8c:	9301      	str	r3, [sp, #4]
   b5f8e:	f7fe fec3 	bl	b4d18 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5f92:	9b01      	ldr	r3, [sp, #4]
   b5f94:	360c      	adds	r6, #12
   b5f96:	370c      	adds	r7, #12
   b5f98:	e7f3      	b.n	b5f82 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x196>
	}
   b5f9a:	4620      	mov	r0, r4
   b5f9c:	b003      	add	sp, #12
   b5f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5fa2:	bf00      	nop
   b5fa4:	684bda13 	.word	0x684bda13
   b5fa8:	7ffffffc 	.word	0x7ffffffc
   b5fac:	aaaaaaab 	.word	0xaaaaaaab

000b5fb0 <setup>:
void setup() {
   b5fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5fb4:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
  Serial.begin(9600);
   b5fb8:	f003 ffb0 	bl	b9f1c <_Z16_fetch_usbserialv>
   b5fbc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5fc0:	f003 ffa0 	bl	b9f04 <_ZN9USBSerial5beginEl>
  delay(500);
   b5fc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b5fc8:	f001 feb6 	bl	b7d38 <delay>
  BLE.on();
   b5fcc:	f002 f9ae 	bl	b832c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5fd0:	f002 f9f6 	bl	b83c0 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   b5fd4:	f002 f9aa 	bl	b832c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5fd8:	4a82      	ldr	r2, [pc, #520]	; (b61e4 <setup+0x234>)
   b5fda:	4d83      	ldr	r5, [pc, #524]	; (b61e8 <setup+0x238>)
   b5fdc:	4601      	mov	r1, r0
   b5fde:	a80d      	add	r0, sp, #52	; 0x34
   b5fe0:	f002 fed8 	bl	b8d94 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5fe4:	a80d      	add	r0, sp, #52	; 0x34
   b5fe6:	f002 fa92 	bl	b850e <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b5fea:	f002 f99f 	bl	b832c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5fee:	4a7f      	ldr	r2, [pc, #508]	; (b61ec <setup+0x23c>)
   b5ff0:	4601      	mov	r1, r0
   b5ff2:	a80d      	add	r0, sp, #52	; 0x34
   b5ff4:	f002 fece 	bl	b8d94 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5ff8:	a80d      	add	r0, sp, #52	; 0x34
   b5ffa:	f002 fa88 	bl	b850e <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   b5ffe:	a805      	add	r0, sp, #20
   b6000:	f002 fbbb 	bl	b877a <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b6004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6006:	ac08      	add	r4, sp, #32
   b6008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b600a:	682e      	ldr	r6, [r5, #0]
   b600c:	6026      	str	r6, [r4, #0]
        BleUuid tempUUID(uuid);
   b600e:	ad08      	add	r5, sp, #32
   b6010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6012:	ac0d      	add	r4, sp, #52	; 0x34
   b6014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6016:	a80d      	add	r0, sp, #52	; 0x34
        BleUuid tempUUID(uuid);
   b6018:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b601a:	f001 fffb 	bl	b8014 <_ZNK8particle7BleUuid4typeEv>
   b601e:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b6020:	a80d      	add	r0, sp, #52	; 0x34
        if (tempUUID.type() == BleUuidType::SHORT) {
   b6022:	2c00      	cmp	r4, #0
   b6024:	d165      	bne.n	b60f2 <setup+0x142>
            uint16_t uuid16 = tempUUID.shorted();
   b6026:	f002 f811 	bl	b804c <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b602a:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b602c:	f8ad 0010 	strh.w	r0, [sp, #16]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b6030:	2302      	movs	r3, #2
   b6032:	aa04      	add	r2, sp, #16
   b6034:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b6036:	a805      	add	r0, sp, #20
   b6038:	f002 fb94 	bl	b8764 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   b603c:	f002 f976 	bl	b832c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6040:	2200      	movs	r2, #0
   b6042:	a905      	add	r1, sp, #20
   b6044:	f002 fa06 	bl	b8454 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  request.hostname = "trek.thewcl.com";
   b6048:	4c69      	ldr	r4, [pc, #420]	; (b61f0 <setup+0x240>)

    //loopIndex must point to either the first or last checkpoint, tripleIndex cannot be 0
    void setLoopIndex(int triple, int loop){
        tripleIndex = triple;
   b604a:	4e6a      	ldr	r6, [pc, #424]	; (b61f4 <setup+0x244>)
  acquireWireBuffer();
   b604c:	a80d      	add	r0, sp, #52	; 0x34
   b604e:	f7fe fb4b 	bl	b46e8 <_Z17acquireWireBufferv>
  Wire.begin();
   b6052:	f004 f8b1 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b6056:	f003 f829 	bl	b90ac <_ZN7TwoWire5beginEv>
  request.hostname = "trek.thewcl.com";
   b605a:	4967      	ldr	r1, [pc, #412]	; (b61f8 <setup+0x248>)
   b605c:	4620      	mov	r0, r4
   b605e:	f003 fada 	bl	b9616 <_ZN6StringaSEPKc>
  request.port = 80;
   b6062:	2350      	movs	r3, #80	; 0x50
   b6064:	4965      	ldr	r1, [pc, #404]	; (b61fc <setup+0x24c>)
   b6066:	63a3      	str	r3, [r4, #56]	; 0x38
   b6068:	4c65      	ldr	r4, [pc, #404]	; (b6200 <setup+0x250>)
        loopIndex = loop;
   b606a:	2502      	movs	r5, #2
   b606c:	2006      	movs	r0, #6
   b606e:	e9c1 5015 	strd	r5, r0, [r1, #84]	; 0x54
   b6072:	e9c4 5015 	strd	r5, r0, [r4, #84]	; 0x54
        tripleIndex = triple;
   b6076:	4d63      	ldr	r5, [pc, #396]	; (b6204 <setup+0x254>)
        loopIndex = loop;
   b6078:	2203      	movs	r2, #3
   b607a:	2307      	movs	r3, #7
  railways = {brownLine, orangeLine, pinkLine, purpleLine, greenLine};
   b607c:	a80d      	add	r0, sp, #52	; 0x34
   b607e:	e9c6 2315 	strd	r2, r3, [r6, #84]	; 0x54
   b6082:	e9c5 2315 	strd	r2, r3, [r5, #84]	; 0x54
   b6086:	f7ff fe41 	bl	b5d0c <_ZN7RailwayC1ERKS_>
   b608a:	4631      	mov	r1, r6
   b608c:	a828      	add	r0, sp, #160	; 0xa0
   b608e:	f7ff fe3d 	bl	b5d0c <_ZN7RailwayC1ERKS_>
   b6092:	4629      	mov	r1, r5
   b6094:	a843      	add	r0, sp, #268	; 0x10c
   b6096:	f7ff fe39 	bl	b5d0c <_ZN7RailwayC1ERKS_>
   b609a:	4621      	mov	r1, r4
   b609c:	a85e      	add	r0, sp, #376	; 0x178
			 - this->_M_impl._M_start); }
   b609e:	4c5a      	ldr	r4, [pc, #360]	; (b6208 <setup+0x258>)
   b60a0:	f7ff fe34 	bl	b5d0c <_ZN7RailwayC1ERKS_>
   b60a4:	4959      	ldr	r1, [pc, #356]	; (b620c <setup+0x25c>)
   b60a6:	a879      	add	r0, sp, #484	; 0x1e4
   b60a8:	f7ff fe30 	bl	b5d0c <_ZN7RailwayC1ERKS_>
   b60ac:	6822      	ldr	r2, [r4, #0]
   b60ae:	68a3      	ldr	r3, [r4, #8]
   b60b0:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b60b2:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
   b60b6:	d26a      	bcs.n	b618e <setup+0x1de>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b60b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
   b60bc:	f7fd ffeb 	bl	b4096 <_Znwj>
   b60c0:	f10d 0834 	add.w	r8, sp, #52	; 0x34
   b60c4:	4605      	mov	r5, r0
   b60c6:	f500 7707 	add.w	r7, r0, #540	; 0x21c
	  _ForwardIterator __cur = __result;
   b60ca:	4606      	mov	r6, r0
   b60cc:	b11e      	cbz	r6, b60d6 <setup+0x126>
   b60ce:	4641      	mov	r1, r8
   b60d0:	4630      	mov	r0, r6
   b60d2:	f7ff fe1b 	bl	b5d0c <_ZN7RailwayC1ERKS_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b60d6:	366c      	adds	r6, #108	; 0x6c
   b60d8:	42b7      	cmp	r7, r6
   b60da:	f108 086c 	add.w	r8, r8, #108	; 0x6c
   b60de:	d1f5      	bne.n	b60cc <setup+0x11c>
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b60e0:	e9d4 6800 	ldrd	r6, r8, [r4]
	  for (; __first != __last; ++__first)
   b60e4:	45b0      	cmp	r8, r6
   b60e6:	d00c      	beq.n	b6102 <setup+0x152>
      __pointer->~_Tp();
   b60e8:	4630      	mov	r0, r6
   b60ea:	f7fe fde7 	bl	b4cbc <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b60ee:	366c      	adds	r6, #108	; 0x6c
   b60f0:	e7f8      	b.n	b60e4 <setup+0x134>
   b60f2:	f001 ffad 	bl	b8050 <_ZNK8particle7BleUuid8rawBytesEv>
   b60f6:	2300      	movs	r3, #0
   b60f8:	9300      	str	r3, [sp, #0]
   b60fa:	4602      	mov	r2, r0
   b60fc:	2310      	movs	r3, #16
   b60fe:	2107      	movs	r1, #7
   b6100:	e799      	b.n	b6036 <setup+0x86>
	    _M_deallocate(this->_M_impl._M_start,
   b6102:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b6104:	b118      	cbz	r0, b610e <setup+0x15e>
			  - this->_M_impl._M_start);
   b6106:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b6108:	1a09      	subs	r1, r1, r0
   b610a:	f7fd ffca 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b610e:	e9c4 5700 	strd	r5, r7, [r4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b6112:	60a7      	str	r7, [r4, #8]
   b6114:	2504      	movs	r5, #4
   b6116:	266c      	movs	r6, #108	; 0x6c
   b6118:	ab0d      	add	r3, sp, #52	; 0x34
   b611a:	fb06 3005 	mla	r0, r6, r5, r3
   b611e:	f7fe fdcd 	bl	b4cbc <_ZN7RailwayD1Ev>
   b6122:	3d01      	subs	r5, #1
   b6124:	d2f8      	bcs.n	b6118 <setup+0x168>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6126:	e9d4 3100 	ldrd	r3, r1, [r4]
   b612a:	1ac9      	subs	r1, r1, r3
   b612c:	4b38      	ldr	r3, [pc, #224]	; (b6210 <setup+0x260>)
   b612e:	1089      	asrs	r1, r1, #2
   b6130:	4359      	muls	r1, r3
  sequenceArr = std::vector<int>(railways.size() * 2, 0);
   b6132:	2400      	movs	r4, #0
   b6134:	ab03      	add	r3, sp, #12
   b6136:	aa04      	add	r2, sp, #16
   b6138:	0049      	lsls	r1, r1, #1
   b613a:	a808      	add	r0, sp, #32
   b613c:	9404      	str	r4, [sp, #16]
   b613e:	f7fe fb1b 	bl	b4778 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
	  _M_start = __x._M_start;
   b6142:	4b34      	ldr	r3, [pc, #208]	; (b6214 <setup+0x264>)
   b6144:	9d08      	ldr	r5, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
   b6146:	689a      	ldr	r2, [r3, #8]
   b6148:	920f      	str	r2, [sp, #60]	; 0x3c
	  _M_finish = __x._M_finish;
   b614a:	e9d3 0100 	ldrd	r0, r1, [r3]
	  _M_start = __x._M_start;
   b614e:	601d      	str	r5, [r3, #0]
	  _M_finish = __x._M_finish;
   b6150:	9d09      	ldr	r5, [sp, #36]	; 0x24
   b6152:	605d      	str	r5, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
   b6154:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   b6156:	609d      	str	r5, [r3, #8]
	  _M_finish = __x._M_finish;
   b6158:	e9cd 010d 	strd	r0, r1, [sp, #52]	; 0x34
      }
   b615c:	a80d      	add	r0, sp, #52	; 0x34
	  _M_finish = __x._M_finish;
   b615e:	e9cd 4408 	strd	r4, r4, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
   b6162:	940a      	str	r4, [sp, #40]	; 0x28
      }
   b6164:	f7fe faea 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b6168:	a808      	add	r0, sp, #32
   b616a:	f7fe fae7 	bl	b473c <_ZNSt12_Vector_baseIiSaIiEED1Ev>
  randomizeAddress();
   b616e:	f7fe f95f 	bl	b4430 <_Z16randomizeAddressv>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   b6172:	4829      	ldr	r0, [pc, #164]	; (b6218 <setup+0x268>)
   b6174:	4623      	mov	r3, r4
   b6176:	4622      	mov	r2, r4
   b6178:	4621      	mov	r1, r4
   b617a:	6840      	ldr	r0, [r0, #4]
   b617c:	f001 fd64 	bl	b7c48 <network_clear_credentials>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b6180:	9805      	ldr	r0, [sp, #20]
   b6182:	f001 fd91 	bl	b7ca8 <free>
}
   b6186:	f50d 7d14 	add.w	sp, sp, #592	; 0x250
   b618a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b618e:	6865      	ldr	r5, [r4, #4]
   b6190:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b6192:	f5b5 7f07 	cmp.w	r5, #540	; 0x21c
   b6196:	d310      	bcc.n	b61ba <setup+0x20a>
			      _Category>::__copy_m(__first, __last, __result);
   b6198:	a994      	add	r1, sp, #592	; 0x250
   b619a:	a80d      	add	r0, sp, #52	; 0x34
   b619c:	f7ff fe26 	bl	b5dec <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b61a0:	6867      	ldr	r7, [r4, #4]
   b61a2:	42b8      	cmp	r0, r7
   b61a4:	4605      	mov	r5, r0
   b61a6:	d0b5      	beq.n	b6114 <setup+0x164>
   b61a8:	4606      	mov	r6, r0
      __pointer->~_Tp();
   b61aa:	4630      	mov	r0, r6
	  for (; __first != __last; ++__first)
   b61ac:	366c      	adds	r6, #108	; 0x6c
      __pointer->~_Tp();
   b61ae:	f7fe fd85 	bl	b4cbc <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b61b2:	42b7      	cmp	r7, r6
   b61b4:	d1f9      	bne.n	b61aa <setup+0x1fa>
	    this->_M_impl._M_finish = __pos;
   b61b6:	6065      	str	r5, [r4, #4]
   b61b8:	e7ac      	b.n	b6114 <setup+0x164>
   b61ba:	ab0d      	add	r3, sp, #52	; 0x34
   b61bc:	441d      	add	r5, r3
   b61be:	4629      	mov	r1, r5
   b61c0:	4618      	mov	r0, r3
   b61c2:	f7ff fe13 	bl	b5dec <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b61c6:	6866      	ldr	r6, [r4, #4]
   b61c8:	ab94      	add	r3, sp, #592	; 0x250
   b61ca:	429d      	cmp	r5, r3
   b61cc:	d007      	beq.n	b61de <setup+0x22e>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b61ce:	b11e      	cbz	r6, b61d8 <setup+0x228>
   b61d0:	4629      	mov	r1, r5
   b61d2:	4630      	mov	r0, r6
   b61d4:	f7ff fd9a 	bl	b5d0c <_ZN7RailwayC1ERKS_>
   b61d8:	356c      	adds	r5, #108	; 0x6c
   b61da:	366c      	adds	r6, #108	; 0x6c
   b61dc:	e7f4      	b.n	b61c8 <setup+0x218>
	    this->_M_impl._M_finish =
   b61de:	6066      	str	r6, [r4, #4]
   b61e0:	e798      	b.n	b6114 <setup+0x164>
   b61e2:	bf00      	nop
   b61e4:	2003e6ac 	.word	0x2003e6ac
   b61e8:	200354f4 	.word	0x200354f4
   b61ec:	2003e694 	.word	0x2003e694
   b61f0:	2003e634 	.word	0x2003e634
   b61f4:	20037eac 	.word	0x20037eac
   b61f8:	000bd5c0 	.word	0x000bd5c0
   b61fc:	200355ac 	.word	0x200355ac
   b6200:	2003e550 	.word	0x2003e550
   b6204:	2003e4e4 	.word	0x2003e4e4
   b6208:	2003e5bc 	.word	0x2003e5bc
   b620c:	2003561c 	.word	0x2003561c
   b6210:	684bda13 	.word	0x684bda13
   b6214:	2003e69c 	.word	0x2003e69c
   b6218:	2003e718 	.word	0x2003e718

000b621c <_GLOBAL__sub_I_SystemMode>:
   b621c:	2001      	movs	r0, #1
   b621e:	f7fe bf05 	b.w	b502c <_Z41__static_initialization_and_destruction_0ii.constprop.0>
	...

000b6224 <loop>:
void loop(){
   b6224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6228:	ed2d 8b06 	vpush	{d8-d10}
        return network_has_credentials(*this, 0, NULL);
   b622c:	4bba      	ldr	r3, [pc, #744]	; (b6518 <loop+0x2f4>)
   b622e:	2200      	movs	r2, #0
   b6230:	b0b5      	sub	sp, #212	; 0xd4
   b6232:	6858      	ldr	r0, [r3, #4]
   b6234:	4611      	mov	r1, r2
   b6236:	f001 fcf7 	bl	b7c28 <network_has_credentials>
  if(WiFi.hasCredentials() && userInput){
   b623a:	2800      	cmp	r0, #0
   b623c:	f000 84c5 	beq.w	b6bca <loop+0x9a6>
   b6240:	4bb6      	ldr	r3, [pc, #728]	; (b651c <loop+0x2f8>)
   b6242:	781b      	ldrb	r3, [r3, #0]
   b6244:	2b00      	cmp	r3, #0
   b6246:	f000 84c0 	beq.w	b6bca <loop+0x9a6>
      : _M_current(__i) { }
   b624a:	f8df b340 	ldr.w	fp, [pc, #832]	; b658c <loop+0x368>
      Serial.printf("%i, ", i);
   b624e:	4db4      	ldr	r5, [pc, #720]	; (b6520 <loop+0x2fc>)
    Serial.println("loop start");
   b6250:	f003 fe64 	bl	b9f1c <_Z16_fetch_usbserialv>
   b6254:	49b3      	ldr	r1, [pc, #716]	; (b6524 <loop+0x300>)
   b6256:	f003 f8ec 	bl	b9432 <_ZN5Print7printlnEPKc>
   b625a:	e9db 4600 	ldrd	r4, r6, [fp]
    for(int i : sequenceArr){
   b625e:	42b4      	cmp	r4, r6
   b6260:	d009      	beq.n	b6276 <loop+0x52>
   b6262:	f854 2b04 	ldr.w	r2, [r4], #4
   b6266:	9202      	str	r2, [sp, #8]
      Serial.printf("%i, ", i);
   b6268:	f003 fe58 	bl	b9f1c <_Z16_fetch_usbserialv>
   b626c:	9a02      	ldr	r2, [sp, #8]
   b626e:	4629      	mov	r1, r5
   b6270:	f7fe f8d0 	bl	b4414 <_ZN5Print6printfEPKcz>
	return *this;
   b6274:	e7f3      	b.n	b625e <loop+0x3a>
    Serial.println();
   b6276:	f003 fe51 	bl	b9f1c <_Z16_fetch_usbserialv>
   b627a:	f003 f8ce 	bl	b941a <_ZN5Print7printlnEv>
    Serial.println(brownLineAdr);
   b627e:	f003 fe4d 	bl	b9f1c <_Z16_fetch_usbserialv>
   b6282:	4ba9      	ldr	r3, [pc, #676]	; (b6528 <loop+0x304>)
    Serial.println(greenLineAdr[0]);
   b6284:	4ca9      	ldr	r4, [pc, #676]	; (b652c <loop+0x308>)
    Serial.println(brownLineAdr);
   b6286:	6819      	ldr	r1, [r3, #0]
            }else if(currentRailway.name == orangeLine.name){
   b6288:	f8df 8304 	ldr.w	r8, [pc, #772]	; b6590 <loop+0x36c>
    Serial.println(brownLineAdr);
   b628c:	220a      	movs	r2, #10
   b628e:	f7fd ffaa 	bl	b41e6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    Serial.println(greenLineAdr[0]);
   b6292:	f003 fe43 	bl	b9f1c <_Z16_fetch_usbserialv>
   b6296:	6821      	ldr	r1, [r4, #0]
   b6298:	220a      	movs	r2, #10
   b629a:	f7fd ffa4 	bl	b41e6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    Serial.println(greenLineAdr[1]);
   b629e:	f003 fe3d 	bl	b9f1c <_Z16_fetch_usbserialv>
   b62a2:	6861      	ldr	r1, [r4, #4]
   b62a4:	220a      	movs	r2, #10
   b62a6:	f7fd ff9e 	bl	b41e6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    for(int j = 0; j < railways.size(); j++){
   b62aa:	f04f 0900 	mov.w	r9, #0
   b62ae:	4ca0      	ldr	r4, [pc, #640]	; (b6530 <loop+0x30c>)
   b62b0:	e9d4 2300 	ldrd	r2, r3, [r4]
   b62b4:	1a9b      	subs	r3, r3, r2
   b62b6:	4a9f      	ldr	r2, [pc, #636]	; (b6534 <loop+0x310>)
   b62b8:	109b      	asrs	r3, r3, #2
   b62ba:	4353      	muls	r3, r2
   b62bc:	454b      	cmp	r3, r9
   b62be:	f240 844d 	bls.w	b6b5c <loop+0x938>
      delay(1000);
   b62c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b62c6:	f001 fd37 	bl	b7d38 <delay>
	StringSumHelper(const char *p) : String(p) {}
   b62ca:	499b      	ldr	r1, [pc, #620]	; (b6538 <loop+0x314>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b62cc:	4e9b      	ldr	r6, [pc, #620]	; (b653c <loop+0x318>)
   b62ce:	a819      	add	r0, sp, #100	; 0x64
   b62d0:	f003 f959 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   b62d4:	256c      	movs	r5, #108	; 0x6c
      { return _M_dataplus._M_p; }
   b62d6:	6823      	ldr	r3, [r4, #0]
   b62d8:	fb05 f509 	mul.w	r5, r5, r9
   b62dc:	442b      	add	r3, r5
      request.path = "/loop-tracks/cta?lines=" + String(railways[j].name.c_str());
   b62de:	a815      	add	r0, sp, #84	; 0x54
   b62e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b62e2:	f003 f950 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
   b62e6:	a915      	add	r1, sp, #84	; 0x54
   b62e8:	a819      	add	r0, sp, #100	; 0x64
   b62ea:	f003 f9e1 	bl	b96b0 <_ZplRK15StringSumHelperRK6String>
   b62ee:	4601      	mov	r1, r0
   b62f0:	4893      	ldr	r0, [pc, #588]	; (b6540 <loop+0x31c>)
   b62f2:	f003 f979 	bl	b95e8 <_ZN6StringaSERKS_>
   b62f6:	a815      	add	r0, sp, #84	; 0x54
   b62f8:	f003 f8fa 	bl	b94f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b62fc:	a819      	add	r0, sp, #100	; 0x64
   b62fe:	f003 f8f7 	bl	b94f0 <_ZN6StringD1Ev>
   b6302:	4b90      	ldr	r3, [pc, #576]	; (b6544 <loop+0x320>)
   b6304:	4990      	ldr	r1, [pc, #576]	; (b6548 <loop+0x324>)
   b6306:	4891      	ldr	r0, [pc, #580]	; (b654c <loop+0x328>)
   b6308:	9300      	str	r3, [sp, #0]
   b630a:	4632      	mov	r2, r6
   b630c:	4b90      	ldr	r3, [pc, #576]	; (b6550 <loop+0x32c>)
   b630e:	f000 fca1 	bl	b6c54 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("parsing");
   b6312:	f003 fe03 	bl	b9f1c <_Z16_fetch_usbserialv>
   b6316:	498f      	ldr	r1, [pc, #572]	; (b6554 <loop+0x330>)
   b6318:	f003 f88b 	bl	b9432 <_ZN5Print7printlnEPKc>
      parser.clear();
   b631c:	488e      	ldr	r0, [pc, #568]	; (b6558 <loop+0x334>)
   b631e:	f000 fe31 	bl	b6f84 <_ZN10JsonBuffer5clearEv>
	const char * c_str() const { return buffer; }
   b6322:	6871      	ldr	r1, [r6, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b6324:	9102      	str	r1, [sp, #8]
   b6326:	4608      	mov	r0, r1
   b6328:	f005 f804 	bl	bb334 <strlen>
   b632c:	9902      	ldr	r1, [sp, #8]
   b632e:	4602      	mov	r2, r0
   b6330:	4889      	ldr	r0, [pc, #548]	; (b6558 <loop+0x334>)
   b6332:	f000 fe0a 	bl	b6f4a <_ZN10JsonBuffer7addDataEPKcj>
      if(!parser.parse()){
   b6336:	4888      	ldr	r0, [pc, #544]	; (b6558 <loop+0x334>)
   b6338:	f001 fa14 	bl	b7764 <_ZN10JsonParser5parseEv>
   b633c:	9003      	str	r0, [sp, #12]
   b633e:	b948      	cbnz	r0, b6354 <loop+0x130>
        Serial.println("parsing failed");
   b6340:	f003 fdec 	bl	b9f1c <_Z16_fetch_usbserialv>
   b6344:	4985      	ldr	r1, [pc, #532]	; (b655c <loop+0x338>)
}
   b6346:	b035      	add	sp, #212	; 0xd4
   b6348:	ecbd 8b06 	vpop	{d8-d10}
   b634c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("parsing failed");
   b6350:	f003 b86f 	b.w	b9432 <_ZN5Print7printlnEPKc>
	return *(this->_M_impl._M_start + __n);
   b6354:	6821      	ldr	r1, [r4, #0]
        float lat = train.key("latitude").valueFloat();
   b6356:	ed9f 9a82 	vldr	s18, [pc, #520]	; b6560 <loop+0x33c>
      Railway currentRailway = railways[j];
   b635a:	4429      	add	r1, r5
   b635c:	a819      	add	r0, sp, #100	; 0x64
   b635e:	f7ff fcd5 	bl	b5d0c <_ZN7RailwayC1ERKS_>
      std::vector<Checkpoint> currentCheckpoints = currentRailway.checkpoints;
   b6362:	a919      	add	r1, sp, #100	; 0x64
   b6364:	a805      	add	r0, sp, #20
   b6366:	f7fe fa91 	bl	b488c <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      int count = 0;
   b636a:	2300      	movs	r3, #0
   b636c:	9302      	str	r3, [sp, #8]
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b636e:	497a      	ldr	r1, [pc, #488]	; (b6558 <loop+0x334>)
   b6370:	a80b      	add	r0, sp, #44	; 0x2c
   b6372:	f000 fe21 	bl	b6fb8 <_ZNK10JsonParser12getReferenceEv>
   b6376:	4a7b      	ldr	r2, [pc, #492]	; (b6564 <loop+0x340>)
   b6378:	a90b      	add	r1, sp, #44	; 0x2c
   b637a:	a80e      	add	r0, sp, #56	; 0x38
   b637c:	f000 ffec 	bl	b7358 <_ZNK13JsonReference3keyEPKc>
   b6380:	2200      	movs	r2, #0
   b6382:	a90e      	add	r1, sp, #56	; 0x38
   b6384:	a811      	add	r0, sp, #68	; 0x44
   b6386:	f000 febb 	bl	b7100 <_ZNK13JsonReference5indexEj>
   b638a:	4a77      	ldr	r2, [pc, #476]	; (b6568 <loop+0x344>)
   b638c:	a911      	add	r1, sp, #68	; 0x44
   b638e:	a815      	add	r0, sp, #84	; 0x54
   b6390:	f000 ffe2 	bl	b7358 <_ZNK13JsonReference3keyEPKc>
   b6394:	9a02      	ldr	r2, [sp, #8]
   b6396:	a915      	add	r1, sp, #84	; 0x54
   b6398:	a808      	add	r0, sp, #32
   b639a:	f000 feb1 	bl	b7100 <_ZNK13JsonReference5indexEj>
   b639e:	a815      	add	r0, sp, #84	; 0x54
   b63a0:	f000 fd82 	bl	b6ea8 <_ZN13JsonReferenceD1Ev>
   b63a4:	a811      	add	r0, sp, #68	; 0x44
   b63a6:	f000 fd7f 	bl	b6ea8 <_ZN13JsonReferenceD1Ev>
   b63aa:	a80e      	add	r0, sp, #56	; 0x38
   b63ac:	f000 fd7c 	bl	b6ea8 <_ZN13JsonReferenceD1Ev>
   b63b0:	a80b      	add	r0, sp, #44	; 0x2c
   b63b2:	f000 fd79 	bl	b6ea8 <_ZN13JsonReferenceD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b63b6:	4a6d      	ldr	r2, [pc, #436]	; (b656c <loop+0x348>)
   b63b8:	a908      	add	r1, sp, #32
   b63ba:	a815      	add	r0, sp, #84	; 0x54
   b63bc:	f000 ffcc 	bl	b7358 <_ZNK13JsonReference3keyEPKc>
   b63c0:	a915      	add	r1, sp, #84	; 0x54
   b63c2:	a811      	add	r0, sp, #68	; 0x44
   b63c4:	f000 ffe2 	bl	b738c <_ZNK13JsonReference11valueStringEv>
   b63c8:	a815      	add	r0, sp, #84	; 0x54
   b63ca:	f000 fd6d 	bl	b6ea8 <_ZN13JsonReferenceD1Ev>
        String destNm = train.key("destination").valueString();
   b63ce:	4a68      	ldr	r2, [pc, #416]	; (b6570 <loop+0x34c>)
   b63d0:	a908      	add	r1, sp, #32
   b63d2:	a80e      	add	r0, sp, #56	; 0x38
   b63d4:	f000 ffc0 	bl	b7358 <_ZNK13JsonReference3keyEPKc>
   b63d8:	a90e      	add	r1, sp, #56	; 0x38
   b63da:	a815      	add	r0, sp, #84	; 0x54
   b63dc:	f000 ffd6 	bl	b738c <_ZNK13JsonReference11valueStringEv>
   b63e0:	a80e      	add	r0, sp, #56	; 0x38
   b63e2:	f000 fd61 	bl	b6ea8 <_ZN13JsonReferenceD1Ev>
        int trainDir = train.key("direction").valueInt();
   b63e6:	4a63      	ldr	r2, [pc, #396]	; (b6574 <loop+0x350>)
   b63e8:	a908      	add	r1, sp, #32
   b63ea:	a80e      	add	r0, sp, #56	; 0x38
   b63ec:	f000 ffb4 	bl	b7358 <_ZNK13JsonReference3keyEPKc>
   b63f0:	2100      	movs	r1, #0
   b63f2:	a80e      	add	r0, sp, #56	; 0x38
   b63f4:	f000 fe9e 	bl	b7134 <_ZNK13JsonReference8valueIntEi>
   b63f8:	4604      	mov	r4, r0
   b63fa:	a80e      	add	r0, sp, #56	; 0x38
   b63fc:	f000 fd54 	bl	b6ea8 <_ZN13JsonReferenceD1Ev>
        float lat = train.key("latitude").valueFloat();
   b6400:	4a5d      	ldr	r2, [pc, #372]	; (b6578 <loop+0x354>)
   b6402:	a908      	add	r1, sp, #32
   b6404:	a80e      	add	r0, sp, #56	; 0x38
   b6406:	f000 ffa7 	bl	b7358 <_ZNK13JsonReference3keyEPKc>
   b640a:	a80e      	add	r0, sp, #56	; 0x38
   b640c:	eeb0 0a49 	vmov.f32	s0, s18
   b6410:	f000 fe9c 	bl	b714c <_ZNK13JsonReference10valueFloatEf>
   b6414:	a80e      	add	r0, sp, #56	; 0x38
   b6416:	eef0 8a40 	vmov.f32	s17, s0
   b641a:	f000 fd45 	bl	b6ea8 <_ZN13JsonReferenceD1Ev>
        float lon = train.key("longitude").valueFloat();
   b641e:	4a57      	ldr	r2, [pc, #348]	; (b657c <loop+0x358>)
   b6420:	a908      	add	r1, sp, #32
   b6422:	a80e      	add	r0, sp, #56	; 0x38
   b6424:	f000 ff98 	bl	b7358 <_ZNK13JsonReference3keyEPKc>
   b6428:	a80e      	add	r0, sp, #56	; 0x38
   b642a:	eeb0 0a49 	vmov.f32	s0, s18
   b642e:	f000 fe8d 	bl	b714c <_ZNK13JsonReference10valueFloatEf>
   b6432:	a80e      	add	r0, sp, #56	; 0x38
   b6434:	eeb0 8a40 	vmov.f32	s16, s0
   b6438:	f000 fd36 	bl	b6ea8 <_ZN13JsonReferenceD1Ev>
        if(nextStation.length() <= 1){
   b643c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b643e:	2b01      	cmp	r3, #1
   b6440:	d82a      	bhi.n	b6498 <loop+0x274>
          Serial.println("break");
   b6442:	f003 fd6b 	bl	b9f1c <_Z16_fetch_usbserialv>
   b6446:	494e      	ldr	r1, [pc, #312]	; (b6580 <loop+0x35c>)
        if(i == 2 || currentRailway.name == purpleLine.name){
   b6448:	4f4e      	ldr	r7, [pc, #312]	; (b6584 <loop+0x360>)
          Serial.println("break");
   b644a:	f002 fff2 	bl	b9432 <_ZN5Print7printlnEPKc>
          break;
   b644e:	a815      	add	r0, sp, #84	; 0x54
   b6450:	f003 f84e 	bl	b94f0 <_ZN6StringD1Ev>
   b6454:	a811      	add	r0, sp, #68	; 0x44
   b6456:	f003 f84b 	bl	b94f0 <_ZN6StringD1Ev>
   b645a:	a808      	add	r0, sp, #32
   b645c:	f000 fd24 	bl	b6ea8 <_ZN13JsonReferenceD1Ev>
      for(int i = 0; i < 4; i++){
   b6460:	ea4f 06c9 	mov.w	r6, r9, lsl #3
   b6464:	2400      	movs	r4, #0
        if(i == 2 || currentRailway.name == purpleLine.name){
   b6466:	2c02      	cmp	r4, #2
   b6468:	f000 8226 	beq.w	b68b8 <loop+0x694>
   b646c:	4639      	mov	r1, r7
   b646e:	a825      	add	r0, sp, #148	; 0x94
   b6470:	f7fe fa30 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6474:	2800      	cmp	r0, #0
   b6476:	f040 821f 	bne.w	b68b8 <loop+0x694>
        }else if(i == 3){
   b647a:	2c03      	cmp	r4, #3
   b647c:	f040 8280 	bne.w	b6980 <loop+0x75c>
          if(currentRailway.name == orangeLine.name){
   b6480:	4941      	ldr	r1, [pc, #260]	; (b6588 <loop+0x364>)
   b6482:	4d2a      	ldr	r5, [pc, #168]	; (b652c <loop+0x308>)
   b6484:	a825      	add	r0, sp, #148	; 0x94
   b6486:	f7fe fa25 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b648a:	2800      	cmp	r0, #0
   b648c:	f000 8274 	beq.w	b6978 <loop+0x754>
            Wire.beginTransmission(greenLineAdr[0]);
   b6490:	f003 fe92 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b6494:	6829      	ldr	r1, [r5, #0]
   b6496:	e213      	b.n	b68c0 <loop+0x69c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6498:	e9dd 3505 	ldrd	r3, r5, [sp, #20]
   b649c:	1aed      	subs	r5, r5, r3
   b649e:	10ed      	asrs	r5, r5, #3
        for(int i = 0; i < checkpointCount; i++){
   b64a0:	f04f 0a00 	mov.w	sl, #0
   b64a4:	45aa      	cmp	sl, r5
	return *(this->_M_impl._M_start + __n);
   b64a6:	9905      	ldr	r1, [sp, #20]
   b64a8:	da76      	bge.n	b6598 <loop+0x374>
   b64aa:	eb01 06ca 	add.w	r6, r1, sl, lsl #3
    }

    float getDistance(float trainLat, float trainLon){
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b64ae:	edd6 7a00 	vldr	s15, [r6]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b64b2:	ee78 7ae7 	vsub.f32	s15, s17, s15
   b64b6:	ee17 0a90 	vmov	r0, s15
   b64ba:	f004 fb1b 	bl	baaf4 <__aeabi_f2d>
   b64be:	edd6 7a01 	vldr	s15, [r6, #4]
   b64c2:	ee78 7a67 	vsub.f32	s15, s16, s15
   b64c6:	ec41 0b1a 	vmov	d10, r0, r1
   b64ca:	ee17 0a90 	vmov	r0, s15
   b64ce:	f004 fb11 	bl	baaf4 <__aeabi_f2d>
   b64d2:	4602      	mov	r2, r0
   b64d4:	460b      	mov	r3, r1
   b64d6:	f004 fb65 	bl	baba4 <__aeabi_dmul>
   b64da:	ec53 2b1a 	vmov	r2, r3, d10
   b64de:	4606      	mov	r6, r0
   b64e0:	460f      	mov	r7, r1
   b64e2:	ee1a 0a10 	vmov	r0, s20
   b64e6:	4619      	mov	r1, r3
   b64e8:	f004 fb5c 	bl	baba4 <__aeabi_dmul>
   b64ec:	4602      	mov	r2, r0
   b64ee:	460b      	mov	r3, r1
   b64f0:	4630      	mov	r0, r6
   b64f2:	4639      	mov	r1, r7
   b64f4:	f004 f9a0 	bl	ba838 <__adddf3>
   b64f8:	ec41 0b10 	vmov	d0, r0, r1
   b64fc:	f004 f890 	bl	ba620 <sqrt>
          currentRailway.distances[i] = currentCheckpoints[i].getDistance(lat, lon);
   b6500:	9e1c      	ldr	r6, [sp, #112]	; 0x70
   b6502:	ec51 0b10 	vmov	r0, r1, d0
   b6506:	f004 fe1d 	bl	bb144 <__aeabi_d2f>
   b650a:	eb06 068a 	add.w	r6, r6, sl, lsl #2
        for(int i = 0; i < checkpointCount; i++){
   b650e:	f10a 0a01 	add.w	sl, sl, #1
   b6512:	6030      	str	r0, [r6, #0]
   b6514:	e7c6      	b.n	b64a4 <loop+0x280>
   b6516:	bf00      	nop
   b6518:	2003e718 	.word	0x2003e718
   b651c:	2003e6b4 	.word	0x2003e6b4
   b6520:	000bd5db 	.word	0x000bd5db
   b6524:	000bd5d0 	.word	0x000bd5d0
   b6528:	20035618 	.word	0x20035618
   b652c:	20035688 	.word	0x20035688
   b6530:	2003e5bc 	.word	0x2003e5bc
   b6534:	684bda13 	.word	0x684bda13
   b6538:	000bd5e0 	.word	0x000bd5e0
   b653c:	2003e680 	.word	0x2003e680
   b6540:	2003e65c 	.word	0x2003e65c
   b6544:	000bd5f8 	.word	0x000bd5f8
   b6548:	2003e634 	.word	0x2003e634
   b654c:	20035690 	.word	0x20035690
   b6550:	200352e0 	.word	0x200352e0
   b6554:	000bd5fc 	.word	0x000bd5fc
   b6558:	20037f18 	.word	0x20037f18
   b655c:	000bd604 	.word	0x000bd604
   b6560:	00000000 	.word	0x00000000
   b6564:	000bd613 	.word	0x000bd613
   b6568:	000bd619 	.word	0x000bd619
   b656c:	000bd620 	.word	0x000bd620
   b6570:	000bd62a 	.word	0x000bd62a
   b6574:	000bd636 	.word	0x000bd636
   b6578:	000bd640 	.word	0x000bd640
   b657c:	000bd649 	.word	0x000bd649
   b6580:	000bd653 	.word	0x000bd653
   b6584:	2003e580 	.word	0x2003e580
   b6588:	20037edc 	.word	0x20037edc
   b658c:	2003e69c 	.word	0x2003e69c
   b6590:	20037eac 	.word	0x20037eac
   b6594:	7dcccccc 	.word	0x7dcccccc
      : _M_current(__i) { }
   b6598:	e9dd 761c 	ldrd	r7, r6, [sp, #112]	; 0x70
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
   b659c:	42b7      	cmp	r7, r6
   b659e:	d011      	beq.n	b65c4 <loop+0x3a0>
   b65a0:	1d3a      	adds	r2, r7, #4
   b65a2:	463b      	mov	r3, r7
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
   b65a4:	4296      	cmp	r6, r2
	++_M_current;
   b65a6:	4610      	mov	r0, r2
   b65a8:	d00d      	beq.n	b65c6 <loop+0x3a2>
	if (__comp(__first, __result))
   b65aa:	edd3 7a00 	vldr	s15, [r3]
   b65ae:	ed90 7a00 	vldr	s14, [r0]
   b65b2:	eeb4 7a67 	vcmp.f32	s14, s15
   b65b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b65ba:	f102 0204 	add.w	r2, r2, #4
   b65be:	bf48      	it	mi
   b65c0:	4603      	movmi	r3, r0
   b65c2:	e7ef      	b.n	b65a4 <loop+0x380>
   b65c4:	463b      	mov	r3, r7
        if(closestIndex == currentRailway.tripleIndex){
   b65c6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b65c8:	1bdb      	subs	r3, r3, r7
   b65ca:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
   b65ce:	ea4f 00a3 	mov.w	r0, r3, asr #2
          closestIndex = currentRailway.loopIndex;
   b65d2:	bf08      	it	eq
   b65d4:	982f      	ldreq	r0, [sp, #188]	; 0xbc
   b65d6:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
        x1 = currentCheckpoints[closestIndex].lat;
   b65da:	edd3 7a00 	vldr	s15, [r3]
        y1 = currentCheckpoints[closestIndex].lon;
   b65de:	edd3 6a01 	vldr	s13, [r3, #4]
        if(currentCheckpoints[closestIndex].lat > lat){
   b65e2:	eef4 8ae7 	vcmpe.f32	s17, s15
   b65e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          slope = (y1 - y) / (x1 - x);
   b65ea:	ee77 5ae8 	vsub.f32	s11, s15, s17
          slope = (y - y1) / (x - x1);
   b65ee:	bf55      	itete	pl
   b65f0:	ee38 6a66 	vsubpl.f32	s12, s16, s13
          slope = (y1 - y) / (x1 - x);
   b65f4:	ee76 7ac8 	vsubmi.f32	s15, s13, s16
          slope = (y - y1) / (x - x1);
   b65f8:	ee78 7ae7 	vsubpl.f32	s15, s17, s15
          slope = (y1 - y) / (x1 - x);
   b65fc:	ee87 7aa5 	vdivmi.f32	s14, s15, s11
   b6600:	ea4f 06c0 	mov.w	r6, r0, lsl #3
          slope = (y - y1) / (x - x1);
   b6604:	bf58      	it	pl
   b6606:	ee86 7a27 	vdivpl.f32	s14, s12, s15
        if(slope == 0){
   b660a:	ed5f 7a1e 	vldr	s15, [pc, #-120]	; b6594 <loop+0x370>
   b660e:	eeb5 7a40 	vcmp.f32	s14, #0.0
   b6612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6616:	d00a      	beq.n	b662e <loop+0x40a>
        }else if(slope >= __FLT_MAX__ / 10){
   b6618:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b661c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          perpendicularSlope = -1 / slope;
   b6620:	bfba      	itte	lt
   b6622:	eebf 6a00 	vmovlt.f32	s12, #240	; 0xbf800000 -1.0
   b6626:	eec6 7a07 	vdivlt.f32	s15, s12, s14
          perpendicularSlope = 0;
   b662a:	eef0 7a49 	vmovge.f32	s15, s18
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b662e:	eeb0 7a48 	vmov.f32	s14, s16
   b6632:	eea7 7aa5 	vfma.f32	s14, s15, s11
   b6636:	eef4 6ac7 	vcmpe.f32	s13, s14
   b663a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b663e:	bf4c      	ite	mi
   b6640:	f04f 0c01 	movmi.w	ip, #1
   b6644:	f04f 0c00 	movpl.w	ip, #0
        if(closestIndex == 0){
   b6648:	2800      	cmp	r0, #0
   b664a:	d169      	bne.n	b6720 <loop+0x4fc>
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b664c:	ed91 7a02 	vldr	s14, [r1, #8]
          if(currentRailway.loopIndex == closestIndex){
   b6650:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b6652:	ee37 7a68 	vsub.f32	s14, s14, s17
   b6656:	eef0 6a48 	vmov.f32	s13, s16
   b665a:	eee7 6a27 	vfma.f32	s13, s14, s15
   b665e:	ed91 7a03 	vldr	s14, [r1, #12]
   b6662:	eef4 6ac7 	vcmpe.f32	s13, s14
   b6666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b666a:	bfcc      	ite	gt
   b666c:	2501      	movgt	r5, #1
   b666e:	2500      	movle	r5, #0
          if(currentRailway.loopIndex == closestIndex){
   b6670:	b9ee      	cbnz	r6, b66ae <loop+0x48a>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6672:	1e53      	subs	r3, r2, #1
   b6674:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
            if(nearestSide != pointSide){
   b6678:	4565      	cmp	r5, ip
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b667a:	ed91 0a00 	vldr	s0, [r1]
   b667e:	ed91 7a01 	vldr	s14, [r1, #4]
            if(nearestSide != pointSide){
   b6682:	f040 8094 	bne.w	b67ae <loop+0x58a>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6686:	ee70 8a68 	vsub.f32	s17, s0, s17
   b668a:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b668e:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b6692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            }else if(nearestSide != loopPointSide){
   b6696:	bfcc      	ite	gt
   b6698:	2101      	movgt	r1, #1
   b669a:	2100      	movle	r1, #0
   b669c:	42a9      	cmp	r1, r5
              }else if(nearestSide != loopPointSide){
   b669e:	d100      	bne.n	b66a2 <loop+0x47e>
                secondClosestIndex = currentRailway.tripleIndex + 1;
   b66a0:	1c53      	adds	r3, r2, #1
          if(closestIndex < secondClosestIndex){
   b66a2:	429a      	cmp	r2, r3
   b66a4:	f2c0 8085 	blt.w	b67b2 <loop+0x58e>
   b66a8:	4611      	mov	r1, r2
   b66aa:	461e      	mov	r6, r3
   b66ac:	e005      	b.n	b66ba <loop+0x496>
            if(pointSide == nearestSide){
   b66ae:	4565      	cmp	r5, ip
   b66b0:	d06c      	beq.n	b678c <loop+0x568>
   b66b2:	4602      	mov	r2, r0
   b66b4:	4606      	mov	r6, r0
   b66b6:	2301      	movs	r3, #1
   b66b8:	4619      	mov	r1, r3
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b66ba:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   b66be:	eb07 0086 	add.w	r0, r7, r6, lsl #2
   b66c2:	ed90 7a00 	vldr	s14, [r0]
   b66c6:	edd1 7a00 	vldr	s15, [r1]
          segmentPos *= currentRailway.scalers[lowerIndex];
   b66ca:	991f      	ldr	r1, [sp, #124]	; 0x7c
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b66cc:	ee77 7a27 	vadd.f32	s15, s14, s15
          segmentPos *= currentRailway.scalers[lowerIndex];
   b66d0:	eb01 0186 	add.w	r1, r1, r6, lsl #2
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b66d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
          segmentPos *= currentRailway.scalers[lowerIndex];
   b66d8:	ed91 8a00 	vldr	s16, [r1]
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b66dc:	9933      	ldr	r1, [sp, #204]	; 0xcc
          segmentPos *= currentRailway.scalers[lowerIndex];
   b66de:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b66e2:	4291      	cmp	r1, r2
          segmentPos *= currentRailway.scalers[lowerIndex];
   b66e4:	ee28 8a26 	vmul.f32	s16, s16, s13
          if(closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound){
   b66e8:	db66      	blt.n	b67b8 <loop+0x594>
   b66ea:	9d32      	ldr	r5, [sp, #200]	; 0xc8
   b66ec:	4295      	cmp	r5, r2
   b66ee:	dc63      	bgt.n	b67b8 <loop+0x594>
   b66f0:	4299      	cmp	r1, r3
   b66f2:	db61      	blt.n	b67b8 <loop+0x594>
   b66f4:	429d      	cmp	r5, r3
   b66f6:	dc5f      	bgt.n	b67b8 <loop+0x594>
            Serial.println("in green");
   b66f8:	f003 fc10 	bl	b9f1c <_Z16_fetch_usbserialv>
   b66fc:	49ba      	ldr	r1, [pc, #744]	; (b69e8 <loop+0x7c4>)
   b66fe:	f002 fe98 	bl	b9432 <_ZN5Print7printlnEPKc>
            pcbSegment = 3;
   b6702:	2703      	movs	r7, #3
        bool inLoop = false;
   b6704:	2300      	movs	r3, #0
   b6706:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b6708:	42ae      	cmp	r6, r5
   b670a:	dd6a      	ble.n	b67e2 <loop+0x5be>
            segmentPos += currentRailway.scalers[i];
   b670c:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
   b6710:	ee07 1a90 	vmov	s15, r1
   b6714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b6718:	3501      	adds	r5, #1
            segmentPos += currentRailway.scalers[i];
   b671a:	ee38 8a27 	vadd.f32	s16, s16, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b671e:	e7f3      	b.n	b6708 <loop+0x4e4>
   b6720:	3e08      	subs	r6, #8
   b6722:	440e      	add	r6, r1
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b6724:	ed96 7a00 	vldr	s14, [r6]
   b6728:	ee37 7a68 	vsub.f32	s14, s14, s17
   b672c:	eef0 6a48 	vmov.f32	s13, s16
   b6730:	eee7 6a27 	vfma.f32	s13, s14, s15
          if(closestIndex == checkpointCount - 1){
   b6734:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b6738:	1e43      	subs	r3, r0, #1
   b673a:	ed96 7a01 	vldr	s14, [r6, #4]
   b673e:	eef4 6ac7 	vcmpe.f32	s13, s14
   b6742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6746:	bfcc      	ite	gt
   b6748:	2601      	movgt	r6, #1
   b674a:	2600      	movle	r6, #0
          if(closestIndex == checkpointCount - 1){
   b674c:	4586      	cmp	lr, r0
   b674e:	d12a      	bne.n	b67a6 <loop+0x582>
            if(closestIndex == currentRailway.loopIndex){
   b6750:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   b6752:	4283      	cmp	r3, r0
   b6754:	d118      	bne.n	b6788 <loop+0x564>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6756:	1e53      	subs	r3, r2, #1
   b6758:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
              if(nearestSide != pointSide){
   b675c:	4566      	cmp	r6, ip
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b675e:	ed91 0a00 	vldr	s0, [r1]
   b6762:	ed91 7a01 	vldr	s14, [r1, #4]
              if(nearestSide != pointSide){
   b6766:	d002      	beq.n	b676e <loop+0x54a>
                secondClosestIndex = checkpointCount - 2;
   b6768:	1eab      	subs	r3, r5, #2
   b676a:	4602      	mov	r2, r0
   b676c:	e799      	b.n	b66a2 <loop+0x47e>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b676e:	ee70 8a68 	vsub.f32	s17, s0, s17
   b6772:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b6776:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b677a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              }else if(nearestSide != loopPointSide){
   b677e:	bfcc      	ite	gt
   b6780:	2101      	movgt	r1, #1
   b6782:	2100      	movle	r1, #0
   b6784:	42b1      	cmp	r1, r6
   b6786:	e78a      	b.n	b669e <loop+0x47a>
              if(pointSide == nearestSide){
   b6788:	4566      	cmp	r6, ip
   b678a:	d1ed      	bne.n	b6768 <loop+0x544>
        count++;
   b678c:	9b02      	ldr	r3, [sp, #8]
        String destNm = train.key("destination").valueString();
   b678e:	a815      	add	r0, sp, #84	; 0x54
        count++;
   b6790:	3301      	adds	r3, #1
   b6792:	9302      	str	r3, [sp, #8]
        String destNm = train.key("destination").valueString();
   b6794:	f002 feac 	bl	b94f0 <_ZN6StringD1Ev>
        String nextStation = train.key("next_stop").valueString();
   b6798:	a811      	add	r0, sp, #68	; 0x44
   b679a:	f002 fea9 	bl	b94f0 <_ZN6StringD1Ev>
        JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(count);
   b679e:	a808      	add	r0, sp, #32
   b67a0:	f000 fb82 	bl	b6ea8 <_ZN13JsonReferenceD1Ev>
   b67a4:	e5e3      	b.n	b636e <loop+0x14a>
            if(pointSide == nearestSide){
   b67a6:	4566      	cmp	r6, ip
   b67a8:	d1df      	bne.n	b676a <loop+0x546>
              secondClosestIndex = closestIndex + 1;
   b67aa:	1c43      	adds	r3, r0, #1
   b67ac:	e7dd      	b.n	b676a <loop+0x546>
   b67ae:	4602      	mov	r2, r0
   b67b0:	e781      	b.n	b66b6 <loop+0x492>
   b67b2:	4619      	mov	r1, r3
   b67b4:	4616      	mov	r6, r2
   b67b6:	e780      	b.n	b66ba <loop+0x496>
          else if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b67b8:	9930      	ldr	r1, [sp, #192]	; 0xc0
   b67ba:	4291      	cmp	r1, r2
   b67bc:	dc0a      	bgt.n	b67d4 <loop+0x5b0>
   b67be:	4299      	cmp	r1, r3
   b67c0:	dc08      	bgt.n	b67d4 <loop+0x5b0>
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b67c2:	9d31      	ldr	r5, [sp, #196]	; 0xc4
   b67c4:	4295      	cmp	r5, r2
   b67c6:	db09      	blt.n	b67dc <loop+0x5b8>
   b67c8:	429d      	cmp	r5, r3
   b67ca:	db07      	blt.n	b67dc <loop+0x5b8>
            inLoop = true;
   b67cc:	9b03      	ldr	r3, [sp, #12]
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b67ce:	460d      	mov	r5, r1
            pcbSegment = 2;
   b67d0:	2702      	movs	r7, #2
   b67d2:	e798      	b.n	b6706 <loop+0x4e2>
            lowerScaleBound = 0;
   b67d4:	2500      	movs	r5, #0
        bool inLoop = false;
   b67d6:	462b      	mov	r3, r5
            pcbSegment = 0;
   b67d8:	462f      	mov	r7, r5
   b67da:	e794      	b.n	b6706 <loop+0x4e2>
        bool inLoop = false;
   b67dc:	2300      	movs	r3, #0
            pcbSegment = 1;
   b67de:	2701      	movs	r7, #1
   b67e0:	e791      	b.n	b6706 <loop+0x4e2>
   b67e2:	9d22      	ldr	r5, [sp, #136]	; 0x88
          if(inLoop){
   b67e4:	2b00      	cmp	r3, #0
   b67e6:	d043      	beq.n	b6870 <loop+0x64c>
            if(currentRailway.name == pinkLine.name){
   b67e8:	4980      	ldr	r1, [pc, #512]	; (b69ec <loop+0x7c8>)
   b67ea:	a825      	add	r0, sp, #148	; 0x94
   b67ec:	f7fe f872 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b67f0:	b1f0      	cbz	r0, b6830 <loop+0x60c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b67f2:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b67f6:	1a9b      	subs	r3, r3, r2
   b67f8:	109b      	asrs	r3, r3, #2
              segmentPos = (float)currentRailway.outputs[2].size() - segmentPos;
   b67fa:	ee07 3a90 	vmov	s15, r3
   b67fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b6802:	ee37 8ac8 	vsub.f32	s16, s15, s16
          if(pcbSegment == 1 && currentRailway.name == greenLine.name){
   b6806:	2f01      	cmp	r7, #1
   b6808:	d140      	bne.n	b688c <loop+0x668>
   b680a:	4979      	ldr	r1, [pc, #484]	; (b69f0 <loop+0x7cc>)
   b680c:	a825      	add	r0, sp, #148	; 0x94
   b680e:	f7fe f861 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6812:	2800      	cmp	r0, #0
   b6814:	d042      	beq.n	b689c <loop+0x678>
   b6816:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   b681a:	1a9b      	subs	r3, r3, r2
   b681c:	109b      	asrs	r3, r3, #2
            segmentPos = (float)currentRailway.outputs[1].size() - segmentPos;
   b681e:	ee07 3a90 	vmov	s15, r3
   b6822:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b6826:	ee37 8ac8 	vsub.f32	s16, s15, s16
            trainDir = 6 - trainDir;
   b682a:	f1c4 0406 	rsb	r4, r4, #6
   b682e:	e035      	b.n	b689c <loop+0x678>
            }else if(currentRailway.name == orangeLine.name){
   b6830:	4970      	ldr	r1, [pc, #448]	; (b69f4 <loop+0x7d0>)
   b6832:	a825      	add	r0, sp, #148	; 0x94
   b6834:	f7fe f84e 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6838:	2800      	cmp	r0, #0
   b683a:	d0e4      	beq.n	b6806 <loop+0x5e2>
	return *(this->_M_impl._M_start + __n);
   b683c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6840:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   b6844:	1ad2      	subs	r2, r2, r3
   b6846:	1092      	asrs	r2, r2, #2
              segmentPos = (int)(segmentPos + orangeLine.outputs[2].size() / 2) % orangeLine.outputs[2].size();
   b6848:	0853      	lsrs	r3, r2, #1
   b684a:	ee07 3a90 	vmov	s15, r3
   b684e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b6852:	ee37 8a88 	vadd.f32	s16, s15, s16
   b6856:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   b685a:	ee17 3a90 	vmov	r3, s15
   b685e:	fbb3 f1f2 	udiv	r1, r3, r2
   b6862:	fb02 3311 	mls	r3, r2, r1, r3
   b6866:	ee08 3a10 	vmov	s16, r3
   b686a:	eeb8 8a48 	vcvt.f32.u32	s16, s16
   b686e:	e7ca      	b.n	b6806 <loop+0x5e2>
            if(currentRailway.name == brownLine.name || currentRailway.name == purpleLine.name){
   b6870:	4961      	ldr	r1, [pc, #388]	; (b69f8 <loop+0x7d4>)
   b6872:	a825      	add	r0, sp, #148	; 0x94
   b6874:	f7fe f82e 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6878:	b928      	cbnz	r0, b6886 <loop+0x662>
   b687a:	4960      	ldr	r1, [pc, #384]	; (b69fc <loop+0x7d8>)
   b687c:	a825      	add	r0, sp, #148	; 0x94
   b687e:	f7fe f829 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6882:	2800      	cmp	r0, #0
   b6884:	d0bf      	beq.n	b6806 <loop+0x5e2>
              trainDir = 6 - trainDir;
   b6886:	f1c4 0406 	rsb	r4, r4, #6
   b688a:	e7bc      	b.n	b6806 <loop+0x5e2>
          if(pcbSegment == 3 && currentRailway.name == pinkLine.name){
   b688c:	2f03      	cmp	r7, #3
   b688e:	d105      	bne.n	b689c <loop+0x678>
   b6890:	4956      	ldr	r1, [pc, #344]	; (b69ec <loop+0x7c8>)
   b6892:	a825      	add	r0, sp, #148	; 0x94
   b6894:	f7fe f81e 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6898:	2800      	cmp	r0, #0
   b689a:	d1c6      	bne.n	b682a <loop+0x606>
  { return __builtin_floorf(__x); }
   b689c:	eeb0 0a48 	vmov.f32	s0, s16
   b68a0:	f003 fe78 	bl	ba594 <floorf>
	return *(this->_M_impl._M_start + __n);
   b68a4:	230c      	movs	r3, #12
          currentRailway.outputs[pcbSegment][(int)floor(segmentPos)] = trainDir;
   b68a6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b68aa:	435f      	muls	r7, r3
   b68ac:	ee10 2a10 	vmov	r2, s0
   b68b0:	59eb      	ldr	r3, [r5, r7]
   b68b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b68b6:	e769      	b.n	b678c <loop+0x568>
          Wire.beginTransmission(brownLineAdr);
   b68b8:	f003 fc7e 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b68bc:	4b50      	ldr	r3, [pc, #320]	; (b6a00 <loop+0x7dc>)
   b68be:	6819      	ldr	r1, [r3, #0]
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b68c0:	f002 fc2a 	bl	b9118 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(String(currentRailway.colors[0].c_str()));
   b68c4:	f003 fc78 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b68c8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   b68ca:	4605      	mov	r5, r0
   b68cc:	6819      	ldr	r1, [r3, #0]
   b68ce:	a815      	add	r0, sp, #84	; 0x54
   b68d0:	f002 fe59 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
   b68d4:	9915      	ldr	r1, [sp, #84]	; 0x54
   b68d6:	4628      	mov	r0, r5
   b68d8:	f7fd fcb8 	bl	b424c <_ZN5Print5writeEPKc.isra.0>
   b68dc:	a815      	add	r0, sp, #84	; 0x54
   b68de:	f002 fe07 	bl	b94f0 <_ZN6StringD1Ev>
        Wire.write(String(currentRailway.colors[1].c_str()));
   b68e2:	f003 fc69 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b68e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   b68e8:	4605      	mov	r5, r0
   b68ea:	6999      	ldr	r1, [r3, #24]
   b68ec:	a815      	add	r0, sp, #84	; 0x54
   b68ee:	f002 fe4a 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
   b68f2:	9915      	ldr	r1, [sp, #84]	; 0x54
   b68f4:	4628      	mov	r0, r5
   b68f6:	f7fd fca9 	bl	b424c <_ZN5Print5writeEPKc.isra.0>
   b68fa:	a815      	add	r0, sp, #84	; 0x54
   b68fc:	f002 fdf8 	bl	b94f0 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b6900:	f003 fc5a 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b6904:	f002 fc0f 	bl	b9126 <_ZN7TwoWire15endTransmissionEv>
        if(i == 2 || currentRailway.name == purpleLine.name){
   b6908:	2c02      	cmp	r4, #2
   b690a:	d03f      	beq.n	b698c <loop+0x768>
   b690c:	4639      	mov	r1, r7
   b690e:	a825      	add	r0, sp, #148	; 0x94
   b6910:	f7fd ffe0 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6914:	2800      	cmp	r0, #0
   b6916:	d139      	bne.n	b698c <loop+0x768>
        }else if(i == 3){
   b6918:	2c03      	cmp	r4, #3
   b691a:	d179      	bne.n	b6a10 <loop+0x7ec>
          if(currentRailway.name == orangeLine.name){
   b691c:	4935      	ldr	r1, [pc, #212]	; (b69f4 <loop+0x7d0>)
   b691e:	4d39      	ldr	r5, [pc, #228]	; (b6a04 <loop+0x7e0>)
   b6920:	a825      	add	r0, sp, #148	; 0x94
   b6922:	f7fd ffd7 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6926:	2800      	cmp	r0, #0
   b6928:	d059      	beq.n	b69de <loop+0x7ba>
            Wire.beginTransmission(greenLineAdr[0]);
   b692a:	f003 fc45 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b692e:	6829      	ldr	r1, [r5, #0]
            Wire.beginTransmission(greenLineAdr[1]);
   b6930:	f002 fbf2 	bl	b9118 <_ZN7TwoWire17beginTransmissionEi>
        if(i == 3 && currentRailway.name == orangeLine.name){
   b6934:	492f      	ldr	r1, [pc, #188]	; (b69f4 <loop+0x7d0>)
   b6936:	a825      	add	r0, sp, #148	; 0x94
   b6938:	f7fd ffcc 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b693c:	4605      	mov	r5, r0
   b693e:	2800      	cmp	r0, #0
   b6940:	f000 80c0 	beq.w	b6ac4 <loop+0x8a0>
   b6944:	f8df a0c4 	ldr.w	sl, [pc, #196]	; b6a0c <loop+0x7e8>
   b6948:	2500      	movs	r5, #0
   b694a:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
   b694e:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6952:	e9d0 3200 	ldrd	r3, r2, [r0]
   b6956:	1ad2      	subs	r2, r2, r3
   b6958:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
   b695c:	1a5b      	subs	r3, r3, r1
   b695e:	109b      	asrs	r3, r3, #2
          for(int j = 0; j < greenLine.outputs[0].size() - orangeLine.outputs[3].size(); j++){
   b6960:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   b6964:	42ab      	cmp	r3, r5
   b6966:	f240 8108 	bls.w	b6b7a <loop+0x956>
            Wire.write('0');
   b696a:	f003 fc25 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b696e:	2130      	movs	r1, #48	; 0x30
   b6970:	f7fd fc68 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
          for(int j = 0; j < greenLine.outputs[0].size() - orangeLine.outputs[3].size(); j++){
   b6974:	3501      	adds	r5, #1
   b6976:	e7e8      	b.n	b694a <loop+0x726>
            Wire.beginTransmission(greenLineAdr[1]);
   b6978:	f003 fc1e 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b697c:	6869      	ldr	r1, [r5, #4]
   b697e:	e79f      	b.n	b68c0 <loop+0x69c>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b6980:	f003 fc1a 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b6984:	f8db 3000 	ldr.w	r3, [fp]
   b6988:	5999      	ldr	r1, [r3, r6]
   b698a:	e799      	b.n	b68c0 <loop+0x69c>
          Wire.beginTransmission(brownLineAdr);
   b698c:	f003 fc14 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b6990:	4b1b      	ldr	r3, [pc, #108]	; (b6a00 <loop+0x7dc>)
   b6992:	6819      	ldr	r1, [r3, #0]
   b6994:	f002 fbc0 	bl	b9118 <_ZN7TwoWire17beginTransmissionEi>
        if(i == 2){
   b6998:	2c02      	cmp	r4, #2
   b699a:	f040 80e8 	bne.w	b6b6e <loop+0x94a>
          if(currentRailway.name == greenLine.name){
   b699e:	4914      	ldr	r1, [pc, #80]	; (b69f0 <loop+0x7cc>)
   b69a0:	4d19      	ldr	r5, [pc, #100]	; (b6a08 <loop+0x7e4>)
   b69a2:	a825      	add	r0, sp, #148	; 0x94
   b69a4:	f7fd ff96 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b69a8:	4682      	mov	sl, r0
   b69aa:	2800      	cmp	r0, #0
   b69ac:	d057      	beq.n	b6a5e <loop+0x83a>
            for(int j = 0; j < brownLine.outputs[0].size() + (brownLine.outputs[2].size() / 2); j++){
   b69ae:	f04f 0a00 	mov.w	sl, #0
	return *(this->_M_impl._M_start + __n);
   b69b2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b69b4:	e9d2 1306 	ldrd	r1, r3, [r2, #24]
   b69b8:	1a5b      	subs	r3, r3, r1
   b69ba:	1099      	asrs	r1, r3, #2
   b69bc:	e9d2 2300 	ldrd	r2, r3, [r2]
   b69c0:	1a9b      	subs	r3, r3, r2
   b69c2:	109b      	asrs	r3, r3, #2
   b69c4:	eb03 0351 	add.w	r3, r3, r1, lsr #1
   b69c8:	4553      	cmp	r3, sl
   b69ca:	f240 80d6 	bls.w	b6b7a <loop+0x956>
              Wire.write('0');
   b69ce:	f003 fbf3 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b69d2:	2130      	movs	r1, #48	; 0x30
   b69d4:	f7fd fc36 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < brownLine.outputs[0].size() + (brownLine.outputs[2].size() / 2); j++){
   b69d8:	f10a 0a01 	add.w	sl, sl, #1
   b69dc:	e7e9      	b.n	b69b2 <loop+0x78e>
            Wire.beginTransmission(greenLineAdr[1]);
   b69de:	f003 fbeb 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b69e2:	6869      	ldr	r1, [r5, #4]
   b69e4:	e7a4      	b.n	b6930 <loop+0x70c>
   b69e6:	bf00      	nop
   b69e8:	000bd659 	.word	0x000bd659
   b69ec:	2003e514 	.word	0x2003e514
   b69f0:	2003564c 	.word	0x2003564c
   b69f4:	20037edc 	.word	0x20037edc
   b69f8:	200355dc 	.word	0x200355dc
   b69fc:	2003e580 	.word	0x2003e580
   b6a00:	20035618 	.word	0x20035618
   b6a04:	20035688 	.word	0x20035688
   b6a08:	200355ac 	.word	0x200355ac
   b6a0c:	2003561c 	.word	0x2003561c
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b6a10:	f003 fbd2 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b6a14:	f8db 3000 	ldr.w	r3, [fp]
   b6a18:	5999      	ldr	r1, [r3, r6]
   b6a1a:	f002 fb7d 	bl	b9118 <_ZN7TwoWire17beginTransmissionEi>
        if(i == 1 && (currentRailway.name == brownLine.name || currentRailway.name == purpleLine.name)){
   b6a1e:	2c01      	cmp	r4, #1
   b6a20:	f040 80ab 	bne.w	b6b7a <loop+0x956>
   b6a24:	496b      	ldr	r1, [pc, #428]	; (b6bd4 <loop+0x9b0>)
   b6a26:	a825      	add	r0, sp, #148	; 0x94
   b6a28:	f7fd ff54 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6a2c:	4605      	mov	r5, r0
   b6a2e:	2800      	cmp	r0, #0
   b6a30:	d146      	bne.n	b6ac0 <loop+0x89c>
   b6a32:	4639      	mov	r1, r7
   b6a34:	a825      	add	r0, sp, #148	; 0x94
   b6a36:	f7fd ff4d 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6a3a:	2800      	cmp	r0, #0
   b6a3c:	f000 809d 	beq.w	b6b7a <loop+0x956>
	return *(this->_M_impl._M_start + __n);
   b6a40:	9a22      	ldr	r2, [sp, #136]	; 0x88
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a42:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
   b6a46:	1a9b      	subs	r3, r3, r2
          for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b6a48:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
   b6a4c:	f080 8095 	bcs.w	b6b7a <loop+0x956>
            Wire.write('0');
   b6a50:	f003 fbb2 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b6a54:	2130      	movs	r1, #48	; 0x30
   b6a56:	f7fd fbf5 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
          for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b6a5a:	3501      	adds	r5, #1
   b6a5c:	e7f0      	b.n	b6a40 <loop+0x81c>
          else if(currentRailway.name == brownLine.name || currentRailway.name == purpleLine.name){
   b6a5e:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b6a62:	a825      	add	r0, sp, #148	; 0x94
   b6a64:	f7fd ff36 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6a68:	9002      	str	r0, [sp, #8]
   b6a6a:	b930      	cbnz	r0, b6a7a <loop+0x856>
   b6a6c:	4639      	mov	r1, r7
   b6a6e:	a825      	add	r0, sp, #148	; 0x94
   b6a70:	f7fd ff30 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6a74:	b1a0      	cbz	r0, b6aa0 <loop+0x87c>
   b6a76:	9b02      	ldr	r3, [sp, #8]
   b6a78:	469a      	mov	sl, r3
	return *(this->_M_impl._M_start + __n);
   b6a7a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6a7c:	e9d2 2300 	ldrd	r2, r3, [r2]
   b6a80:	1a9b      	subs	r3, r3, r2
            for(int j = 0; j < brownLine.outputs[0].size(); j++){
   b6a82:	ebba 0fa3 	cmp.w	sl, r3, asr #2
   b6a86:	d278      	bcs.n	b6b7a <loop+0x956>
              Wire.write((char)currentRailway.outputs[0][j] + '0');
   b6a88:	f003 fb96 	bl	ba1b8 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b6a8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   b6a8e:	681b      	ldr	r3, [r3, #0]
   b6a90:	f813 102a 	ldrb.w	r1, [r3, sl, lsl #2]
   b6a94:	3130      	adds	r1, #48	; 0x30
   b6a96:	f7fd fbd5 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < brownLine.outputs[0].size(); j++){
   b6a9a:	f10a 0a01 	add.w	sl, sl, #1
   b6a9e:	e7ec      	b.n	b6a7a <loop+0x856>
   b6aa0:	4682      	mov	sl, r0
   b6aa2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6aa4:	e9d2 2300 	ldrd	r2, r3, [r2]
   b6aa8:	1a9b      	subs	r3, r3, r2
            for(int j = 0; j < brownLine.outputs[0].size(); j++){
   b6aaa:	ebba 0fa3 	cmp.w	sl, r3, asr #2
   b6aae:	d264      	bcs.n	b6b7a <loop+0x956>
              Wire.write('0');
   b6ab0:	f003 fb82 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b6ab4:	2130      	movs	r1, #48	; 0x30
   b6ab6:	f7fd fbc5 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
            for(int j = 0; j < brownLine.outputs[0].size(); j++){
   b6aba:	f10a 0a01 	add.w	sl, sl, #1
   b6abe:	e7f0      	b.n	b6aa2 <loop+0x87e>
   b6ac0:	2500      	movs	r5, #0
   b6ac2:	e7bd      	b.n	b6a40 <loop+0x81c>
        }else if(i == 3 && currentRailway.name == pinkLine.name){
   b6ac4:	4944      	ldr	r1, [pc, #272]	; (b6bd8 <loop+0x9b4>)
   b6ac6:	a825      	add	r0, sp, #148	; 0x94
   b6ac8:	f7fd ff04 	bl	b48d4 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6acc:	2800      	cmp	r0, #0
   b6ace:	d054      	beq.n	b6b7a <loop+0x956>
	return *(this->_M_impl._M_start + __n);
   b6ad0:	f8df a110 	ldr.w	sl, [pc, #272]	; b6be4 <loop+0x9c0>
   b6ad4:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
   b6ad8:	4b40      	ldr	r3, [pc, #256]	; (b6bdc <loop+0x9b8>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6ada:	e9d1 1200 	ldrd	r1, r2, [r1]
	return *(this->_M_impl._M_start + __n);
   b6ade:	6a58      	ldr	r0, [r3, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6ae0:	1a51      	subs	r1, r2, r1
   b6ae2:	e9d0 0209 	ldrd	r0, r2, [r0, #36]	; 0x24
   b6ae6:	1a12      	subs	r2, r2, r0
   b6ae8:	1092      	asrs	r2, r2, #2
          for(int j = 0; j < greenLine.outputs[0].size() - pinkLine.outputs[3].size(); j++){
   b6aea:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   b6aee:	42aa      	cmp	r2, r5
   b6af0:	d943      	bls.n	b6b7a <loop+0x956>
            Wire.write('0');
   b6af2:	f003 fb61 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b6af6:	2130      	movs	r1, #48	; 0x30
   b6af8:	f7fd fba4 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
          for(int j = 0; j < greenLine.outputs[0].size() - pinkLine.outputs[3].size(); j++){
   b6afc:	3501      	adds	r5, #1
   b6afe:	e7e9      	b.n	b6ad4 <loop+0x8b0>
        Serial.println();
   b6b00:	f003 fa0c 	bl	b9f1c <_Z16_fetch_usbserialv>
   b6b04:	f002 fc89 	bl	b941a <_ZN5Print7printlnEv>
      for(int i = 0; i < 4; i++){
   b6b08:	3401      	adds	r4, #1
        Wire.endTransmission();
   b6b0a:	f003 fb55 	bl	ba1b8 <_Z19__fetch_global_Wirev>
   b6b0e:	f002 fb0a 	bl	b9126 <_ZN7TwoWire15endTransmissionEv>
      for(int i = 0; i < 4; i++){
   b6b12:	2c04      	cmp	r4, #4
   b6b14:	f106 0604 	add.w	r6, r6, #4
   b6b18:	f47f aca5 	bne.w	b6466 <loop+0x242>
   b6b1c:	2300      	movs	r3, #0
          currentRailway.outputs[i][j] = 0;
   b6b1e:	461c      	mov	r4, r3
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6b20:	2200      	movs	r2, #0
	return *(this->_M_impl._M_start + __n);
   b6b22:	9922      	ldr	r1, [sp, #136]	; 0x88
   b6b24:	18cd      	adds	r5, r1, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6b26:	58c8      	ldr	r0, [r1, r3]
   b6b28:	6869      	ldr	r1, [r5, #4]
   b6b2a:	1a09      	subs	r1, r1, r0
   b6b2c:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
   b6b30:	d203      	bcs.n	b6b3a <loop+0x916>
          currentRailway.outputs[i][j] = 0;
   b6b32:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6b36:	3201      	adds	r2, #1
   b6b38:	e7f3      	b.n	b6b22 <loop+0x8fe>
      for(int i = 0; i < 4; i++){
   b6b3a:	330c      	adds	r3, #12
   b6b3c:	2b30      	cmp	r3, #48	; 0x30
   b6b3e:	d1ef      	bne.n	b6b20 <loop+0x8fc>
      Serial.println();
   b6b40:	f003 f9ec 	bl	b9f1c <_Z16_fetch_usbserialv>
   b6b44:	f002 fc69 	bl	b941a <_ZN5Print7printlnEv>
      }
   b6b48:	a805      	add	r0, sp, #20
   b6b4a:	f7fd fde3 	bl	b4714 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      Railway currentRailway = railways[j];
   b6b4e:	a819      	add	r0, sp, #100	; 0x64
   b6b50:	f7fe f8b4 	bl	b4cbc <_ZN7RailwayD1Ev>
    for(int j = 0; j < railways.size(); j++){
   b6b54:	f109 0901 	add.w	r9, r9, #1
   b6b58:	f7ff bba9 	b.w	b62ae <loop+0x8a>
    Serial.println();
   b6b5c:	f003 f9de 	bl	b9f1c <_Z16_fetch_usbserialv>
}
   b6b60:	b035      	add	sp, #212	; 0xd4
   b6b62:	ecbd 8b06 	vpop	{d8-d10}
   b6b66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Serial.println();
   b6b6a:	f002 bc56 	b.w	b941a <_ZN5Print7printlnEv>
        if(i == 1 && (currentRailway.name == brownLine.name || currentRailway.name == purpleLine.name)){
   b6b6e:	2c01      	cmp	r4, #1
   b6b70:	f43f af58 	beq.w	b6a24 <loop+0x800>
        if(i == 3 && currentRailway.name == orangeLine.name){
   b6b74:	2c03      	cmp	r4, #3
   b6b76:	f43f aedd 	beq.w	b6934 <loop+0x710>
        Serial.printf("%s rail part %i: ", currentRailway.name.c_str(), i);
   b6b7a:	f003 f9cf 	bl	b9f1c <_Z16_fetch_usbserialv>
   b6b7e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   b6b80:	4917      	ldr	r1, [pc, #92]	; (b6be0 <loop+0x9bc>)
   b6b82:	4623      	mov	r3, r4
   b6b84:	f7fd fc46 	bl	b4414 <_ZN5Print6printfEPKcz>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6b88:	250c      	movs	r5, #12
   b6b8a:	4365      	muls	r5, r4
   b6b8c:	f04f 0a00 	mov.w	sl, #0
	return *(this->_M_impl._M_start + __n);
   b6b90:	9a22      	ldr	r2, [sp, #136]	; 0x88
   b6b92:	1953      	adds	r3, r2, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b6b94:	5952      	ldr	r2, [r2, r5]
   b6b96:	685b      	ldr	r3, [r3, #4]
   b6b98:	1a9b      	subs	r3, r3, r2
   b6b9a:	ebba 0fa3 	cmp.w	sl, r3, asr #2
   b6b9e:	d2af      	bcs.n	b6b00 <loop+0x8dc>
          Wire.write((char)currentRailway.outputs[i][j] + '0');
   b6ba0:	f003 fb0a 	bl	ba1b8 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b6ba4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   b6ba6:	595b      	ldr	r3, [r3, r5]
   b6ba8:	f813 102a 	ldrb.w	r1, [r3, sl, lsl #2]
   b6bac:	3130      	adds	r1, #48	; 0x30
   b6bae:	f7fd fb49 	bl	b4244 <_ZN7TwoWire5writeEi.isra.0>
          Serial.print(currentRailway.outputs[i][j]);
   b6bb2:	f003 f9b3 	bl	b9f1c <_Z16_fetch_usbserialv>
   b6bb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   b6bb8:	595b      	ldr	r3, [r3, r5]
   b6bba:	220a      	movs	r2, #10
   b6bbc:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   b6bc0:	f7fd faf6 	bl	b41b0 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6bc4:	f10a 0a01 	add.w	sl, sl, #1
   b6bc8:	e7e2      	b.n	b6b90 <loop+0x96c>
}
   b6bca:	b035      	add	sp, #212	; 0xd4
   b6bcc:	ecbd 8b06 	vpop	{d8-d10}
   b6bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6bd4:	200355dc 	.word	0x200355dc
   b6bd8:	2003e514 	.word	0x2003e514
   b6bdc:	2003e4e4 	.word	0x2003e4e4
   b6be0:	000bd662 	.word	0x000bd662
   b6be4:	2003561c 	.word	0x2003561c

000b6be8 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b6be8:	b510      	push	{r4, lr}
   b6bea:	4604      	mov	r4, r0
   b6bec:	f003 f8c8 	bl	b9d80 <_ZN9TCPClientC1Ev>
{

}
   b6bf0:	4620      	mov	r0, r4
   b6bf2:	bd10      	pop	{r4, pc}

000b6bf4 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b6bf4:	b538      	push	{r3, r4, r5, lr}
   b6bf6:	4604      	mov	r4, r0
   b6bf8:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b6bfa:	f002 fc07 	bl	b940c <_ZN5Print5printEPKc>
    client.print(": ");
   b6bfe:	4905      	ldr	r1, [pc, #20]	; (b6c14 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b6c00:	4620      	mov	r0, r4
   b6c02:	f002 fc03 	bl	b940c <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b6c06:	4629      	mov	r1, r5
   b6c08:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b6c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b6c0e:	f002 bc10 	b.w	b9432 <_ZN5Print7printlnEPKc>
   b6c12:	bf00      	nop
   b6c14:	000bd41f 	.word	0x000bd41f

000b6c18 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b6c18:	b538      	push	{r3, r4, r5, lr}
   b6c1a:	4605      	mov	r5, r0
   b6c1c:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b6c1e:	f002 fbf5 	bl	b940c <_ZN5Print5printEPKc>
    client.print(": ");
   b6c22:	490b      	ldr	r1, [pc, #44]	; (b6c50 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b6c24:	4628      	mov	r0, r5
   b6c26:	f002 fbf1 	bl	b940c <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b6c2a:	2c00      	cmp	r4, #0
   b6c2c:	da0d      	bge.n	b6c4a <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b6c2e:	212d      	movs	r1, #45	; 0x2d
   b6c30:	4628      	mov	r0, r5
   b6c32:	f002 fbef 	bl	b9414 <_ZN5Print5printEc>
            val = -n;
   b6c36:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b6c38:	4628      	mov	r0, r5
   b6c3a:	220a      	movs	r2, #10
   b6c3c:	f002 fc03 	bl	b9446 <_ZN5Print11printNumberEmh>
        n += println();
   b6c40:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b6c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6c46:	f002 bbe8 	b.w	b941a <_ZN5Print7printlnEv>
            val = n;
   b6c4a:	4621      	mov	r1, r4
   b6c4c:	e7f4      	b.n	b6c38 <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b6c4e:	bf00      	nop
   b6c50:	000bd41f 	.word	0x000bd41f

000b6c54 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b6c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6c58:	460e      	mov	r6, r1
   b6c5a:	b091      	sub	sp, #68	; 0x44
   b6c5c:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b6c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6c62:	6013      	str	r3, [r2, #0]
{
   b6c64:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b6c66:	2100      	movs	r1, #0
   b6c68:	4630      	mov	r0, r6
   b6c6a:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b6c6e:	4617      	mov	r7, r2
   b6c70:	f002 fd4c 	bl	b970c <_ZNK6String6equalsEPKc>
   b6c74:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b6c78:	4603      	mov	r3, r0
   b6c7a:	b998      	cbnz	r0, b6ca4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b6c7c:	f1be 0f00 	cmp.w	lr, #0
   b6c80:	bf14      	ite	ne
   b6c82:	4672      	movne	r2, lr
   b6c84:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b6c86:	6831      	ldr	r1, [r6, #0]
   b6c88:	b292      	uxth	r2, r2
   b6c8a:	4620      	mov	r0, r4
   b6c8c:	f002 fe78 	bl	b9980 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b6c90:	1e05      	subs	r5, r0, #0
   b6c92:	bf18      	it	ne
   b6c94:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b6c96:	b9c5      	cbnz	r5, b6cca <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b6c98:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b6c9a:	b011      	add	sp, #68	; 0x44
   b6c9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b6ca0:	f003 b824 	b.w	b9cec <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b6ca4:	4b76      	ldr	r3, [pc, #472]	; (b6e80 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b6ca6:	930a      	str	r3, [sp, #40]	; 0x28
   b6ca8:	f106 0c14 	add.w	ip, r6, #20
   b6cac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6cb0:	ad0b      	add	r5, sp, #44	; 0x2c
   b6cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6cb4:	f8dc 3000 	ldr.w	r3, [ip]
   b6cb8:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b6cba:	fa1f f28e 	uxth.w	r2, lr
   b6cbe:	2300      	movs	r3, #0
   b6cc0:	a90a      	add	r1, sp, #40	; 0x28
   b6cc2:	4620      	mov	r0, r4
   b6cc4:	f002 ff3c 	bl	b9b40 <_ZN9TCPClient7connectE9IPAddresstm>
   b6cc8:	e7e2      	b.n	b6c90 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b6cca:	4649      	mov	r1, r9
   b6ccc:	4620      	mov	r0, r4
   b6cce:	f002 fb9d 	bl	b940c <_ZN5Print5printEPKc>
    client.print(" ");
   b6cd2:	496c      	ldr	r1, [pc, #432]	; (b6e84 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b6cd4:	4620      	mov	r0, r4
   b6cd6:	f002 fb99 	bl	b940c <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b6cda:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b6cdc:	4620      	mov	r0, r4
   b6cde:	f002 fb95 	bl	b940c <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b6ce2:	4969      	ldr	r1, [pc, #420]	; (b6e88 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b6ce4:	4620      	mov	r0, r4
   b6ce6:	f002 fb91 	bl	b940c <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b6cea:	4968      	ldr	r1, [pc, #416]	; (b6e8c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b6cec:	4a68      	ldr	r2, [pc, #416]	; (b6e90 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b6cee:	4620      	mov	r0, r4
   b6cf0:	f7ff ff80 	bl	b6bf4 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b6cf4:	2100      	movs	r1, #0
   b6cf6:	4630      	mov	r0, r6
   b6cf8:	f002 fd08 	bl	b970c <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b6cfc:	b920      	cbnz	r0, b6d08 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b6cfe:	6832      	ldr	r2, [r6, #0]
   b6d00:	4964      	ldr	r1, [pc, #400]	; (b6e94 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b6d02:	4620      	mov	r0, r4
   b6d04:	f7ff ff76 	bl	b6bf4 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b6d08:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b6d0c:	2100      	movs	r1, #0
   b6d0e:	4650      	mov	r0, sl
   b6d10:	f002 fcfc 	bl	b970c <_ZNK6String6equalsEPKc>
   b6d14:	b928      	cbnz	r0, b6d22 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b6d16:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b6d18:	495f      	ldr	r1, [pc, #380]	; (b6e98 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b6d1a:	4620      	mov	r0, r4
   b6d1c:	f7ff ff7c 	bl	b6c18 <_ZN10HttpClient10sendHeaderEPKci>
   b6d20:	e006      	b.n	b6d30 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b6d22:	495e      	ldr	r1, [pc, #376]	; (b6e9c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b6d24:	4648      	mov	r0, r9
   b6d26:	f004 faf3 	bl	bb310 <strcmp>
   b6d2a:	4602      	mov	r2, r0
   b6d2c:	2800      	cmp	r0, #0
   b6d2e:	d0f3      	beq.n	b6d18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b6d30:	f1b8 0f00 	cmp.w	r8, #0
   b6d34:	d00e      	beq.n	b6d54 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b6d36:	f8d8 1000 	ldr.w	r1, [r8]
   b6d3a:	b159      	cbz	r1, b6d54 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b6d3c:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b6d40:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b6d42:	b122      	cbz	r2, b6d4e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b6d44:	f7ff ff56 	bl	b6bf4 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b6d48:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b6d4c:	e7f3      	b.n	b6d36 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b6d4e:	f002 fb70 	bl	b9432 <_ZN5Print7printlnEPKc>
}
   b6d52:	e7f9      	b.n	b6d48 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b6d54:	4620      	mov	r0, r4
   b6d56:	f002 fb60 	bl	b941a <_ZN5Print7printlnEv>
    client.flush();
   b6d5a:	4620      	mov	r0, r4
   b6d5c:	f002 fd70 	bl	b9840 <_ZN9TCPClient5flushEv>
   b6d60:	2100      	movs	r1, #0
   b6d62:	4650      	mov	r0, sl
   b6d64:	f002 fcd2 	bl	b970c <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b6d68:	b918      	cbnz	r0, b6d72 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b6d6a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b6d6c:	4620      	mov	r0, r4
   b6d6e:	f002 fb60 	bl	b9432 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b6d72:	f104 0a1c 	add.w	sl, r4, #28
   b6d76:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   b6d7a:	2100      	movs	r1, #0
   b6d7c:	4650      	mov	r0, sl
   b6d7e:	f004 fa91 	bl	bb2a4 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6d82:	f000 fdad 	bl	b78e0 <HAL_Timer_Get_Milli_Seconds>
   b6d86:	9001      	str	r0, [sp, #4]
   b6d88:	f000 fdaa 	bl	b78e0 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b6d8c:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b6d90:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b6d92:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b6d96:	4620      	mov	r0, r4
   b6d98:	f002 ff4e 	bl	b9c38 <_ZN9TCPClient9availableEv>
   b6d9c:	b1e8      	cbz	r0, b6dda <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   b6d9e:	4620      	mov	r0, r4
   b6da0:	f002 fd34 	bl	b980c <_ZN9TCPClient4readEv>
   b6da4:	4681      	mov	r9, r0
   b6da6:	f000 fd9b 	bl	b78e0 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b6daa:	f242 73fe 	movw	r3, #10238	; 0x27fe
   b6dae:	429e      	cmp	r6, r3
   b6db0:	9001      	str	r0, [sp, #4]
   b6db2:	d804      	bhi.n	b6dbe <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b6db4:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b6db6:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b6dba:	3601      	adds	r6, #1
        while (client.available()) {
   b6dbc:	e7eb      	b.n	b6d96 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b6dbe:	f242 73ff 	movw	r3, #10239	; 0x27ff
   b6dc2:	429e      	cmp	r6, r3
   b6dc4:	d1f9      	bne.n	b6dba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b6dc6:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   b6dca:	2200      	movs	r2, #0
   b6dcc:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
                client.stop();
   b6dd0:	4620      	mov	r0, r4
   b6dd2:	f002 ff8b 	bl	b9cec <_ZN9TCPClient4stopEv>
                error = true;
   b6dd6:	46a8      	mov	r8, r5
   b6dd8:	e7ef      	b.n	b6dba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b6dda:	19a3      	adds	r3, r4, r6
   b6ddc:	7718      	strb	r0, [r3, #28]
   b6dde:	f000 fd7f 	bl	b78e0 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b6de2:	9b01      	ldr	r3, [sp, #4]
   b6de4:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b6de8:	f1b8 0f00 	cmp.w	r8, #0
   b6dec:	d104      	bne.n	b6df8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
   b6dee:	45d9      	cmp	r9, fp
   b6df0:	d802      	bhi.n	b6df8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
            delay(200);
   b6df2:	20c8      	movs	r0, #200	; 0xc8
   b6df4:	f000 ffa0 	bl	b7d38 <delay>
    } while (client.connected() && !timeout && !error);
   b6df8:	4620      	mov	r0, r4
   b6dfa:	f002 fe3f 	bl	b9a7c <_ZN9TCPClient9connectedEv>
   b6dfe:	b120      	cbz	r0, b6e0a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b6e00:	45d9      	cmp	r9, fp
   b6e02:	d802      	bhi.n	b6e0a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b6e04:	f1b8 0f00 	cmp.w	r8, #0
   b6e08:	d0c5      	beq.n	b6d96 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b6e0a:	4620      	mov	r0, r4
   b6e0c:	f002 ff6e 	bl	b9cec <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b6e10:	4651      	mov	r1, sl
   b6e12:	a802      	add	r0, sp, #8
   b6e14:	f002 fbb7 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b6e18:	230c      	movs	r3, #12
   b6e1a:	2209      	movs	r2, #9
   b6e1c:	a902      	add	r1, sp, #8
   b6e1e:	a806      	add	r0, sp, #24
   b6e20:	f002 fc98 	bl	b9754 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b6e24:	491e      	ldr	r1, [pc, #120]	; (b6ea0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b6e26:	a80a      	add	r0, sp, #40	; 0x28
   b6e28:	f002 fbad 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
   b6e2c:	a90a      	add	r1, sp, #40	; 0x28
   b6e2e:	a802      	add	r0, sp, #8
   b6e30:	f002 fc8d 	bl	b974e <_ZNK6String7indexOfERKS_>
   b6e34:	4604      	mov	r4, r0
   b6e36:	a80a      	add	r0, sp, #40	; 0x28
   b6e38:	f002 fb5a 	bl	b94f0 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b6e3c:	1c63      	adds	r3, r4, #1
   b6e3e:	d108      	bne.n	b6e52 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fe>
    String statusCode = raw_response.substring(9,12);
   b6e40:	a806      	add	r0, sp, #24
   b6e42:	f002 fb55 	bl	b94f0 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b6e46:	a802      	add	r0, sp, #8
   b6e48:	f002 fb52 	bl	b94f0 <_ZN6StringD1Ev>
}
   b6e4c:	b011      	add	sp, #68	; 0x44
   b6e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b6e52:	1d3d      	adds	r5, r7, #4
   b6e54:	4913      	ldr	r1, [pc, #76]	; (b6ea4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b6e56:	4628      	mov	r0, r5
   b6e58:	f002 fbdd 	bl	b9616 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b6e5c:	1d22      	adds	r2, r4, #4
   b6e5e:	a902      	add	r1, sp, #8
   b6e60:	a80a      	add	r0, sp, #40	; 0x28
   b6e62:	f002 fc97 	bl	b9794 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b6e66:	a90a      	add	r1, sp, #40	; 0x28
   b6e68:	4628      	mov	r0, r5
   b6e6a:	f002 fc10 	bl	b968e <_ZN6String6concatERKS_>
   b6e6e:	a80a      	add	r0, sp, #40	; 0x28
   b6e70:	f002 fb3e 	bl	b94f0 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b6e74:	9806      	ldr	r0, [sp, #24]
   b6e76:	f004 f9d9 	bl	bb22c <atoi>
   b6e7a:	6038      	str	r0, [r7, #0]
   b6e7c:	e7e0      	b.n	b6e40 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ec>
   b6e7e:	bf00      	nop
   b6e80:	000bda54 	.word	0x000bda54
   b6e84:	000bd5de 	.word	0x000bd5de
   b6e88:	000bd798 	.word	0x000bd798
   b6e8c:	000bd7aa 	.word	0x000bd7aa
   b6e90:	000bd7a4 	.word	0x000bd7a4
   b6e94:	000bd7b5 	.word	0x000bd7b5
   b6e98:	000bd7ba 	.word	0x000bd7ba
   b6e9c:	000bd7c9 	.word	0x000bd7c9
   b6ea0:	000bd7ce 	.word	0x000bd7ce
   b6ea4:	000bd7d2 	.word	0x000bd7d2

000b6ea8 <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   b6ea8:	4770      	bx	lr

000b6eaa <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   b6eaa:	b510      	push	{r4, lr}
}
   b6eac:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   b6eae:	4604      	mov	r4, r0
}
   b6eb0:	f7fd f8f7 	bl	b40a2 <_ZdlPvj>
   b6eb4:	4620      	mov	r0, r4
   b6eb6:	bd10      	pop	{r4, pc}

000b6eb8 <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   b6eb8:	b510      	push	{r4, lr}
   b6eba:	4b05      	ldr	r3, [pc, #20]	; (b6ed0 <_ZN10JsonBufferD1Ev+0x18>)
   b6ebc:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b6ebe:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b6ec0:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b6ec2:	b91b      	cbnz	r3, b6ecc <_ZN10JsonBufferD1Ev+0x14>
   b6ec4:	6840      	ldr	r0, [r0, #4]
   b6ec6:	b108      	cbz	r0, b6ecc <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b6ec8:	f000 feee 	bl	b7ca8 <free>
}
   b6ecc:	4620      	mov	r0, r4
   b6ece:	bd10      	pop	{r4, pc}
   b6ed0:	000bd7e0 	.word	0x000bd7e0

000b6ed4 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b6ed4:	b510      	push	{r4, lr}
   b6ed6:	4604      	mov	r4, r0
}
   b6ed8:	f7ff ffee 	bl	b6eb8 <_ZN10JsonBufferD1Ev>
   b6edc:	4620      	mov	r0, r4
   b6ede:	2114      	movs	r1, #20
   b6ee0:	f7fd f8df 	bl	b40a2 <_ZdlPvj>
   b6ee4:	4620      	mov	r0, r4
   b6ee6:	bd10      	pop	{r4, pc}

000b6ee8 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b6ee8:	b510      	push	{r4, lr}
   b6eea:	4b07      	ldr	r3, [pc, #28]	; (b6f08 <_ZN10JsonParserD1Ev+0x20>)
   b6eec:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b6eee:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b6ef0:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b6ef2:	b91b      	cbnz	r3, b6efc <_ZN10JsonParserD1Ev+0x14>
   b6ef4:	6940      	ldr	r0, [r0, #20]
   b6ef6:	b108      	cbz	r0, b6efc <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b6ef8:	f000 fed6 	bl	b7ca8 <free>
JsonParser::~JsonParser() {
   b6efc:	4620      	mov	r0, r4
   b6efe:	f7ff ffdb 	bl	b6eb8 <_ZN10JsonBufferD1Ev>
}
   b6f02:	4620      	mov	r0, r4
   b6f04:	bd10      	pop	{r4, pc}
   b6f06:	bf00      	nop
   b6f08:	000bd7f0 	.word	0x000bd7f0

000b6f0c <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b6f0c:	b510      	push	{r4, lr}
   b6f0e:	4604      	mov	r4, r0
}
   b6f10:	f7ff ffea 	bl	b6ee8 <_ZN10JsonParserD1Ev>
   b6f14:	4620      	mov	r0, r4
   b6f16:	212c      	movs	r1, #44	; 0x2c
   b6f18:	f7fd f8c3 	bl	b40a2 <_ZdlPvj>
   b6f1c:	4620      	mov	r0, r4
   b6f1e:	bd10      	pop	{r4, pc}

000b6f20 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b6f20:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b6f22:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b6f24:	4604      	mov	r4, r0
   b6f26:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b6f28:	b10b      	cbz	r3, b6f2e <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b6f2a:	2000      	movs	r0, #0
}
   b6f2c:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b6f2e:	6840      	ldr	r0, [r0, #4]
   b6f30:	b138      	cbz	r0, b6f42 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b6f32:	f000 fec1 	bl	b7cb8 <realloc>
		if (newBuffer) {
   b6f36:	2800      	cmp	r0, #0
   b6f38:	d0f7      	beq.n	b6f2a <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b6f3a:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b6f3e:	2001      	movs	r0, #1
   b6f40:	e7f4      	b.n	b6f2c <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b6f42:	4608      	mov	r0, r1
   b6f44:	f000 fea8 	bl	b7c98 <malloc>
   b6f48:	e7f5      	b.n	b6f36 <_ZN10JsonBuffer8allocateEj+0x16>

000b6f4a <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b6f4a:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b6f4c:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b6f4e:	460e      	mov	r6, r1
   b6f50:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b6f52:	18d1      	adds	r1, r2, r3
   b6f54:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b6f56:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b6f58:	b172      	cbz	r2, b6f78 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b6f5a:	6882      	ldr	r2, [r0, #8]
   b6f5c:	428a      	cmp	r2, r1
   b6f5e:	d30b      	bcc.n	b6f78 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b6f60:	6860      	ldr	r0, [r4, #4]
   b6f62:	68e3      	ldr	r3, [r4, #12]
   b6f64:	462a      	mov	r2, r5
   b6f66:	4631      	mov	r1, r6
   b6f68:	4418      	add	r0, r3
   b6f6a:	f004 f973 	bl	bb254 <memcpy>
	offset += dataLen;
   b6f6e:	68e2      	ldr	r2, [r4, #12]
   b6f70:	442a      	add	r2, r5
   b6f72:	60e2      	str	r2, [r4, #12]
	return true;
   b6f74:	2001      	movs	r0, #1
}
   b6f76:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b6f78:	4620      	mov	r0, r4
   b6f7a:	f7ff ffd1 	bl	b6f20 <_ZN10JsonBuffer8allocateEj>
   b6f7e:	2800      	cmp	r0, #0
   b6f80:	d1ee      	bne.n	b6f60 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b6f82:	e7f8      	b.n	b6f76 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b6f84 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b6f84:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b6f86:	2100      	movs	r1, #0
   b6f88:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b6f8a:	b123      	cbz	r3, b6f96 <_ZN10JsonBuffer5clearEv+0x12>
   b6f8c:	6882      	ldr	r2, [r0, #8]
   b6f8e:	b112      	cbz	r2, b6f96 <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b6f90:	4618      	mov	r0, r3
   b6f92:	f004 b987 	b.w	bb2a4 <memset>
}
   b6f96:	4770      	bx	lr

000b6f98 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b6f98:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b6f9a:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b6f9e:	2200      	movs	r2, #0
   b6fa0:	60c2      	str	r2, [r0, #12]
   b6fa2:	2201      	movs	r2, #1
   b6fa4:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b6fa6:	6143      	str	r3, [r0, #20]
   b6fa8:	4a02      	ldr	r2, [pc, #8]	; (b6fb4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b6faa:	9b02      	ldr	r3, [sp, #8]
   b6fac:	6002      	str	r2, [r0, #0]
   b6fae:	61c3      	str	r3, [r0, #28]
}
   b6fb0:	bd10      	pop	{r4, pc}
   b6fb2:	bf00      	nop
   b6fb4:	000bd7f0 	.word	0x000bd7f0

000b6fb8 <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   b6fb8:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   b6fbc:	429a      	cmp	r2, r3
   b6fbe:	4b04      	ldr	r3, [pc, #16]	; (b6fd0 <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b6fc0:	bf38      	it	cc
   b6fc2:	6082      	strcc	r2, [r0, #8]
   b6fc4:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6fc8:	bf24      	itt	cs
   b6fca:	2300      	movcs	r3, #0
   b6fcc:	6083      	strcs	r3, [r0, #8]
}
   b6fce:	4770      	bx	lr
   b6fd0:	000bd800 	.word	0x000bd800

000b6fd4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b6fd4:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b6fd6:	6813      	ldr	r3, [r2, #0]
   b6fd8:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b6fda:	6813      	ldr	r3, [r2, #0]
   b6fdc:	f103 0410 	add.w	r4, r3, #16
   b6fe0:	6014      	str	r4, [r2, #0]
   b6fe2:	6986      	ldr	r6, [r0, #24]
   b6fe4:	42b4      	cmp	r4, r6
   b6fe6:	d20a      	bcs.n	b6ffe <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b6fe8:	699b      	ldr	r3, [r3, #24]
   b6fea:	688c      	ldr	r4, [r1, #8]
   b6fec:	42a3      	cmp	r3, r4
   b6fee:	da01      	bge.n	b6ff4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b6ff0:	42ab      	cmp	r3, r5
   b6ff2:	ddf2      	ble.n	b6fda <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b6ff4:	42a3      	cmp	r3, r4
   b6ff6:	bfcc      	ite	gt
   b6ff8:	2000      	movgt	r0, #0
   b6ffa:	2001      	movle	r0, #1
   b6ffc:	e000      	b.n	b7000 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b6ffe:	2000      	movs	r0, #0
}
   b7000:	bd70      	pop	{r4, r5, r6, pc}

000b7002 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b7002:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7006:	9d08      	ldr	r5, [sp, #32]
   b7008:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b700a:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b700e:	4604      	mov	r4, r0
   b7010:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7012:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7014:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b7016:	9801      	ldr	r0, [sp, #4]
   b7018:	69a3      	ldr	r3, [r4, #24]
   b701a:	4283      	cmp	r3, r0
   b701c:	d91a      	bls.n	b7054 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b701e:	6882      	ldr	r2, [r0, #8]
   b7020:	688b      	ldr	r3, [r1, #8]
   b7022:	429a      	cmp	r2, r3
   b7024:	da16      	bge.n	b7054 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b7026:	42ae      	cmp	r6, r5
   b7028:	d10b      	bne.n	b7042 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b702a:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b702c:	aa01      	add	r2, sp, #4
   b702e:	4620      	mov	r0, r4
   b7030:	f7ff ffd0 	bl	b6fd4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b7034:	b128      	cbz	r0, b7042 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b7036:	9b01      	ldr	r3, [sp, #4]
   b7038:	f8c8 3000 	str.w	r3, [r8]
}
   b703c:	b002      	add	sp, #8
   b703e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b7042:	aa01      	add	r2, sp, #4
   b7044:	4620      	mov	r0, r4
   b7046:	f7ff ffc5 	bl	b6fd4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b704a:	4620      	mov	r0, r4
		index++;
   b704c:	3601      	adds	r6, #1
		skipObject(container, token);
   b704e:	f7ff ffc1 	bl	b6fd4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b7052:	e7e0      	b.n	b7016 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b7054:	2000      	movs	r0, #0
   b7056:	e7f1      	b.n	b703c <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b7058 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b705a:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b705c:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b7060:	4604      	mov	r4, r0
   b7062:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b7064:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b7066:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b7068:	9b01      	ldr	r3, [sp, #4]
   b706a:	69a2      	ldr	r2, [r4, #24]
   b706c:	429a      	cmp	r2, r3
   b706e:	d90f      	bls.n	b7090 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b7070:	6898      	ldr	r0, [r3, #8]
   b7072:	688a      	ldr	r2, [r1, #8]
   b7074:	4290      	cmp	r0, r2
   b7076:	da0b      	bge.n	b7090 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b7078:	42b5      	cmp	r5, r6
   b707a:	d103      	bne.n	b7084 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b707c:	603b      	str	r3, [r7, #0]
			return true;
   b707e:	2001      	movs	r0, #1
}
   b7080:	b003      	add	sp, #12
   b7082:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b7084:	aa01      	add	r2, sp, #4
   b7086:	4620      	mov	r0, r4
		index++;
   b7088:	3501      	adds	r5, #1
		skipObject(container, token);
   b708a:	f7ff ffa3 	bl	b6fd4 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b708e:	e7eb      	b.n	b7068 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b7090:	2000      	movs	r0, #0
   b7092:	e7f5      	b.n	b7080 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b7094 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b7094:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b7096:	3b01      	subs	r3, #1
   b7098:	2400      	movs	r4, #0
   b709a:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b709e:	1bf6      	subs	r6, r6, r7
   b70a0:	42a6      	cmp	r6, r4
   b70a2:	dd08      	ble.n	b70b6 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b70a4:	42a3      	cmp	r3, r4
   b70a6:	dd06      	ble.n	b70b6 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b70a8:	6845      	ldr	r5, [r0, #4]
   b70aa:	443d      	add	r5, r7
   b70ac:	5d2d      	ldrb	r5, [r5, r4]
   b70ae:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b70b2:	3401      	adds	r4, #1
   b70b4:	e7f1      	b.n	b709a <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b70b6:	2300      	movs	r3, #0
   b70b8:	7013      	strb	r3, [r2, #0]
}
   b70ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b70bc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b70bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b70be:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b70c0:	2310      	movs	r3, #16
   b70c2:	466a      	mov	r2, sp
   b70c4:	f7ff ffe6 	bl	b7094 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b70c8:	4904      	ldr	r1, [pc, #16]	; (b70dc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b70ca:	4622      	mov	r2, r4
   b70cc:	4668      	mov	r0, sp
   b70ce:	f000 fdfb 	bl	b7cc8 <sscanf>
}
   b70d2:	1e43      	subs	r3, r0, #1
   b70d4:	4258      	negs	r0, r3
   b70d6:	4158      	adcs	r0, r3
   b70d8:	b004      	add	sp, #16
   b70da:	bd10      	pop	{r4, pc}
   b70dc:	000bdab4 	.word	0x000bdab4

000b70e0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
   b70e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b70e2:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b70e4:	2310      	movs	r3, #16
   b70e6:	466a      	mov	r2, sp
   b70e8:	f7ff ffd4 	bl	b7094 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
   b70ec:	4668      	mov	r0, sp
   b70ee:	2100      	movs	r1, #0
   b70f0:	f004 ff80 	bl	bbff4 <strtof>
}
   b70f4:	2001      	movs	r0, #1
	result = strtof(tmp, 0);
   b70f6:	ed84 0a00 	vstr	s0, [r4]
}
   b70fa:	b004      	add	sp, #16
   b70fc:	bd10      	pop	{r4, pc}
	...

000b7100 <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   b7100:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7102:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b7104:	6889      	ldr	r1, [r1, #8]
   b7106:	4e0a      	ldr	r6, [pc, #40]	; (b7130 <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   b7108:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b710a:	b161      	cbz	r1, b7126 <_ZNK13JsonReference5indexEj+0x26>
   b710c:	6868      	ldr	r0, [r5, #4]
   b710e:	ab01      	add	r3, sp, #4
   b7110:	f7ff ffa2 	bl	b7058 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b7114:	b138      	cbz	r0, b7126 <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   b7116:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b7118:	e9c4 6300 	strd	r6, r3, [r4]
   b711c:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b711e:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   b7120:	4620      	mov	r0, r4
   b7122:	b002      	add	sp, #8
   b7124:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b7126:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7128:	e9c4 6300 	strd	r6, r3, [r4]
   b712c:	2300      	movs	r3, #0
   b712e:	e7f6      	b.n	b711e <_ZNK13JsonReference5indexEj+0x1e>
   b7130:	000bd800 	.word	0x000bd800

000b7134 <_ZNK13JsonReference8valueIntEi>:
bool JsonReference::valueBool(bool result) const {
	(void) value(result);
	return result;
}

int JsonReference::valueInt(int result) const {
   b7134:	b507      	push	{r0, r1, r2, lr}
   b7136:	9101      	str	r1, [sp, #4]
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   b7138:	6881      	ldr	r1, [r0, #8]
   b713a:	b119      	cbz	r1, b7144 <_ZNK13JsonReference8valueIntEi+0x10>
   b713c:	6840      	ldr	r0, [r0, #4]
   b713e:	aa01      	add	r2, sp, #4
   b7140:	f7ff ffbc 	bl	b70bc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	(void) value(result);
	return result;
}
   b7144:	9801      	ldr	r0, [sp, #4]
   b7146:	b003      	add	sp, #12
   b7148:	f85d fb04 	ldr.w	pc, [sp], #4

000b714c <_ZNK13JsonReference10valueFloatEf>:
unsigned long JsonReference::valueUnsignedLong(unsigned long result) const {
	(void) value(result);
	return result;
}

float JsonReference::valueFloat(float result) const {
   b714c:	b507      	push	{r0, r1, r2, lr}
   b714e:	6881      	ldr	r1, [r0, #8]
   b7150:	ed8d 0a01 	vstr	s0, [sp, #4]
   b7154:	b119      	cbz	r1, b715e <_ZNK13JsonReference10valueFloatEf+0x12>
   b7156:	6840      	ldr	r0, [r0, #4]
   b7158:	aa01      	add	r2, sp, #4
   b715a:	f7ff ffc1 	bl	b70e0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
	(void) value(result);
	return result;
}
   b715e:	ed9d 0a01 	vldr	s0, [sp, #4]
   b7162:	b003      	add	sp, #12
   b7164:	f85d fb04 	ldr.w	pc, [sp], #4

000b7168 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b7168:	b510      	push	{r4, lr}
   b716a:	4604      	mov	r4, r0
	if (str) {
   b716c:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b716e:	460b      	mov	r3, r1
	if (str) {
   b7170:	b128      	cbz	r0, b717e <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b7172:	f002 fa90 	bl	b9696 <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b7176:	68e3      	ldr	r3, [r4, #12]
   b7178:	3301      	adds	r3, #1
   b717a:	60e3      	str	r3, [r4, #12]
	}
}
   b717c:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b717e:	6860      	ldr	r0, [r4, #4]
   b7180:	2800      	cmp	r0, #0
   b7182:	d0f8      	beq.n	b7176 <_ZN16JsonParserString6appendEc+0xe>
   b7184:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b7188:	3a01      	subs	r2, #1
   b718a:	428a      	cmp	r2, r1
			buf[length] = ch;
   b718c:	bf88      	it	hi
   b718e:	5443      	strbhi	r3, [r0, r1]
   b7190:	e7f1      	b.n	b7176 <_ZN16JsonParserString6appendEc+0xe>

000b7192 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b7192:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b7194:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b7196:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7198:	4608      	mov	r0, r1
		str.append((char)unicode);
   b719a:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b719c:	d804      	bhi.n	b71a8 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b719e:	b003      	add	sp, #12
   b71a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b71a4:	f7ff bfe0 	b.w	b7168 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b71a8:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b71ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b71b0:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b71b4:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b71b8:	d207      	bcs.n	b71ca <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b71ba:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b71be:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b71c0:	f7ff ffd2 	bl	b7168 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b71c4:	9801      	ldr	r0, [sp, #4]
   b71c6:	4621      	mov	r1, r4
   b71c8:	e7e9      	b.n	b719e <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b71ca:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b71cc:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b71d0:	9001      	str	r0, [sp, #4]
   b71d2:	f7ff ffc9 	bl	b7168 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b71d6:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b71da:	9801      	ldr	r0, [sp, #4]
   b71dc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b71e0:	e7ee      	b.n	b71c0 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b71e4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b71e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b71e8:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b71ea:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b71ec:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b72bc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b71f0:	4680      	mov	r8, r0
   b71f2:	460f      	mov	r7, r1
   b71f4:	4615      	mov	r5, r2
			escape = false;
   b71f6:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b71f8:	68b8      	ldr	r0, [r7, #8]
   b71fa:	42b0      	cmp	r0, r6
   b71fc:	dd5a      	ble.n	b72b4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b71fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b7202:	5d99      	ldrb	r1, [r3, r6]
   b7204:	199a      	adds	r2, r3, r6
		if (escape) {
   b7206:	2c00      	cmp	r4, #0
   b7208:	d04b      	beq.n	b72a2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b720a:	2975      	cmp	r1, #117	; 0x75
   b720c:	d805      	bhi.n	b721a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b720e:	296d      	cmp	r1, #109	; 0x6d
   b7210:	d807      	bhi.n	b7222 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b7212:	2962      	cmp	r1, #98	; 0x62
   b7214:	d01e      	beq.n	b7254 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b7216:	2966      	cmp	r1, #102	; 0x66
   b7218:	d01e      	beq.n	b7258 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b721a:	4628      	mov	r0, r5
   b721c:	f7ff ffa4 	bl	b7168 <_ZN16JsonParserString6appendEc>
				break;
   b7220:	e03d      	b.n	b729e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b7222:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b7226:	2c07      	cmp	r4, #7
   b7228:	d8f7      	bhi.n	b721a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b722a:	f20f 0c08 	addw	ip, pc, #8
   b722e:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b7232:	bf00      	nop
   b7234:	000b725d 	.word	0x000b725d
   b7238:	000b721b 	.word	0x000b721b
   b723c:	000b721b 	.word	0x000b721b
   b7240:	000b721b 	.word	0x000b721b
   b7244:	000b7261 	.word	0x000b7261
   b7248:	000b721b 	.word	0x000b721b
   b724c:	000b7265 	.word	0x000b7265
   b7250:	000b7269 	.word	0x000b7269
				str.append('\b');
   b7254:	2108      	movs	r1, #8
   b7256:	e7e0      	b.n	b721a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b7258:	210c      	movs	r1, #12
   b725a:	e7de      	b.n	b721a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b725c:	210a      	movs	r1, #10
   b725e:	e7dc      	b.n	b721a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b7260:	210d      	movs	r1, #13
   b7262:	e7da      	b.n	b721a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b7264:	2109      	movs	r1, #9
   b7266:	e7d8      	b.n	b721a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b7268:	1d31      	adds	r1, r6, #4
   b726a:	4288      	cmp	r0, r1
   b726c:	dd17      	ble.n	b729e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b726e:	a902      	add	r1, sp, #8
   b7270:	3304      	adds	r3, #4
   b7272:	4433      	add	r3, r6
   b7274:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b7276:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b727a:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b727e:	429a      	cmp	r2, r3
   b7280:	d1f9      	bne.n	b7276 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b7282:	aa01      	add	r2, sp, #4
   b7284:	4651      	mov	r1, sl
					tmp[4] = 0;
   b7286:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b728a:	f000 fd1d 	bl	b7cc8 <sscanf>
   b728e:	2801      	cmp	r0, #1
   b7290:	d105      	bne.n	b729e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b7292:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b7296:	4629      	mov	r1, r5
   b7298:	f7ff ff7b 	bl	b7192 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b729c:	3605      	adds	r6, #5
			escape = false;
   b729e:	2400      	movs	r4, #0
   b72a0:	e004      	b.n	b72ac <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b72a2:	295c      	cmp	r1, #92	; 0x5c
   b72a4:	d004      	beq.n	b72b0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b72a6:	4628      	mov	r0, r5
   b72a8:	f7ff ff5e 	bl	b7168 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b72ac:	3601      	adds	r6, #1
   b72ae:	e7a3      	b.n	b71f8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b72b0:	2401      	movs	r4, #1
   b72b2:	e7fb      	b.n	b72ac <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b72b4:	2001      	movs	r0, #1
   b72b6:	b004      	add	sp, #16
   b72b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b72bc:	000bd7d3 	.word	0x000bd7d3

000b72c0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b72c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b72c2:	460c      	mov	r4, r1
   b72c4:	4606      	mov	r6, r0
	result = "";
   b72c6:	490c      	ldr	r1, [pc, #48]	; (b72f8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b72c8:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b72ca:	4615      	mov	r5, r2
	result = "";
   b72cc:	f002 f9a3 	bl	b9616 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b72d0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b72d4:	1ac9      	subs	r1, r1, r3
   b72d6:	3101      	adds	r1, #1
   b72d8:	4628      	mov	r0, r5
   b72da:	f002 f927 	bl	b952c <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b72de:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b72e0:	466a      	mov	r2, sp
   b72e2:	4621      	mov	r1, r4
   b72e4:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b72e6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b72ea:	9500      	str	r5, [sp, #0]
   b72ec:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b72ee:	f7ff ff79 	bl	b71e4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b72f2:	b004      	add	sp, #16
   b72f4:	bd70      	pop	{r4, r5, r6, pc}
   b72f6:	bf00      	nop
   b72f8:	000bd7d2 	.word	0x000bd7d2

000b72fc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b72fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7300:	b089      	sub	sp, #36	; 0x24
   b7302:	4605      	mov	r5, r0
   b7304:	4688      	mov	r8, r1
	String keyName;
   b7306:	a804      	add	r0, sp, #16
   b7308:	4912      	ldr	r1, [pc, #72]	; (b7354 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b730a:	4616      	mov	r6, r2
   b730c:	4699      	mov	r9, r3
	String keyName;
   b730e:	f002 f93a 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b7312:	2700      	movs	r7, #0
   b7314:	9700      	str	r7, [sp, #0]
   b7316:	464b      	mov	r3, r9
   b7318:	aa03      	add	r2, sp, #12
   b731a:	4641      	mov	r1, r8
   b731c:	4628      	mov	r0, r5
   b731e:	f7ff fe70 	bl	b7002 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b7322:	4604      	mov	r4, r0
   b7324:	b170      	cbz	r0, b7344 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b7326:	9903      	ldr	r1, [sp, #12]
   b7328:	aa04      	add	r2, sp, #16
   b732a:	4628      	mov	r0, r5
   b732c:	f7ff ffc8 	bl	b72c0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b7330:	4604      	mov	r4, r0
   b7332:	b908      	cbnz	r0, b7338 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b7334:	3701      	adds	r7, #1
   b7336:	e7ed      	b.n	b7314 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b7338:	4631      	mov	r1, r6
   b733a:	a804      	add	r0, sp, #16
   b733c:	f002 f9e6 	bl	b970c <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b7340:	2800      	cmp	r0, #0
   b7342:	d0f7      	beq.n	b7334 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b7344:	a804      	add	r0, sp, #16
   b7346:	f002 f8d3 	bl	b94f0 <_ZN6StringD1Ev>
}
   b734a:	4620      	mov	r0, r4
   b734c:	b009      	add	sp, #36	; 0x24
   b734e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7352:	bf00      	nop
   b7354:	000bd7d2 	.word	0x000bd7d2

000b7358 <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   b7358:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b735a:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b735c:	6889      	ldr	r1, [r1, #8]
   b735e:	4e0a      	ldr	r6, [pc, #40]	; (b7388 <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   b7360:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b7362:	b161      	cbz	r1, b737e <_ZNK13JsonReference3keyEPKc+0x26>
   b7364:	6868      	ldr	r0, [r5, #4]
   b7366:	ab01      	add	r3, sp, #4
   b7368:	f7ff ffc8 	bl	b72fc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b736c:	b138      	cbz	r0, b737e <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   b736e:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b7370:	e9c4 6300 	strd	r6, r3, [r4]
   b7374:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7376:	60a3      	str	r3, [r4, #8]
}
   b7378:	4620      	mov	r0, r4
   b737a:	b002      	add	sp, #8
   b737c:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b737e:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b7380:	e9c4 6300 	strd	r6, r3, [r4]
   b7384:	2300      	movs	r3, #0
   b7386:	e7f6      	b.n	b7376 <_ZNK13JsonReference3keyEPKc+0x1e>
   b7388:	000bd800 	.word	0x000bd800

000b738c <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   b738c:	b538      	push	{r3, r4, r5, lr}
   b738e:	460d      	mov	r5, r1
	String result;
   b7390:	4905      	ldr	r1, [pc, #20]	; (b73a8 <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   b7392:	4604      	mov	r4, r0
	String result;
   b7394:	f002 f8f7 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
   b7398:	68a9      	ldr	r1, [r5, #8]
   b739a:	b119      	cbz	r1, b73a4 <_ZNK13JsonReference11valueStringEv+0x18>
   b739c:	6868      	ldr	r0, [r5, #4]
   b739e:	4622      	mov	r2, r4
   b73a0:	f7ff ff8e 	bl	b72c0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   b73a4:	4620      	mov	r0, r4
   b73a6:	bd38      	pop	{r3, r4, r5, pc}
   b73a8:	000bd7d2 	.word	0x000bd7d2

000b73ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b73ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b73b0:	6844      	ldr	r4, [r0, #4]
   b73b2:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b73b6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b73ba:	f8d0 e000 	ldr.w	lr, [r0]
   b73be:	4596      	cmp	lr, r2
   b73c0:	f080 81b9 	bcs.w	b7736 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b73c4:	f811 800e 	ldrb.w	r8, [r1, lr]
   b73c8:	f1b8 0f00 	cmp.w	r8, #0
   b73cc:	f000 81b3 	beq.w	b7736 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b73d0:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b73d4:	f000 8098 	beq.w	b7508 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b73d8:	d833      	bhi.n	b7442 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b73da:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b73de:	f000 80a6 	beq.w	b752e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b73e2:	d810      	bhi.n	b7406 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b73e4:	f1a8 0809 	sub.w	r8, r8, #9
   b73e8:	fa5f f888 	uxtb.w	r8, r8
   b73ec:	f1b8 0f17 	cmp.w	r8, #23
   b73f0:	d80d      	bhi.n	b740e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b73f2:	4d9f      	ldr	r5, [pc, #636]	; (b7670 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b73f4:	fa0c f808 	lsl.w	r8, ip, r8
   b73f8:	ea18 0f05 	tst.w	r8, r5
   b73fc:	d007      	beq.n	b740e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b73fe:	6805      	ldr	r5, [r0, #0]
   b7400:	3501      	adds	r5, #1
   b7402:	6005      	str	r5, [r0, #0]
   b7404:	e7d9      	b.n	b73ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b7406:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b740a:	f000 8133 	beq.w	b7674 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b740e:	f8d0 8000 	ldr.w	r8, [r0]
   b7412:	4542      	cmp	r2, r8
   b7414:	d90e      	bls.n	b7434 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b7416:	f811 5008 	ldrb.w	r5, [r1, r8]
   b741a:	b15d      	cbz	r5, b7434 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b741c:	2d3a      	cmp	r5, #58	; 0x3a
   b741e:	f200 8169 	bhi.w	b76f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b7422:	2d1f      	cmp	r5, #31
   b7424:	f200 8151 	bhi.w	b76ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b7428:	2d0a      	cmp	r5, #10
   b742a:	f200 8160 	bhi.w	b76ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b742e:	2d08      	cmp	r5, #8
   b7430:	f240 8156 	bls.w	b76e0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b7434:	2b00      	cmp	r3, #0
   b7436:	f040 8162 	bne.w	b76fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b743a:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b743e:	6005      	str	r5, [r0, #0]
   b7440:	e0a5      	b.n	b758e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b7442:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b7446:	d037      	beq.n	b74b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b7448:	d82e      	bhi.n	b74a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b744a:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b744e:	d033      	beq.n	b74b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b7450:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b7454:	d1db      	bne.n	b740e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b7456:	2b00      	cmp	r3, #0
   b7458:	d0d1      	beq.n	b73fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b745a:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b745e:	6845      	ldr	r5, [r0, #4]
   b7460:	3d01      	subs	r5, #1
   b7462:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b7466:	2d00      	cmp	r5, #0
   b7468:	db55      	blt.n	b7516 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b746a:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b746e:	3701      	adds	r7, #1
   b7470:	d04d      	beq.n	b750e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b7472:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b7476:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b747a:	d148      	bne.n	b750e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b747c:	f898 b000 	ldrb.w	fp, [r8]
   b7480:	45cb      	cmp	fp, r9
   b7482:	d14b      	bne.n	b751c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b7484:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b7488:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b748c:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b7490:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b7494:	f8de 7004 	ldr.w	r7, [lr, #4]
   b7498:	3701      	adds	r7, #1
   b749a:	d042      	beq.n	b7522 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b749c:	f8de 7008 	ldr.w	r7, [lr, #8]
   b74a0:	3701      	adds	r7, #1
   b74a2:	d13e      	bne.n	b7522 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b74a4:	6085      	str	r5, [r0, #8]
				break;
   b74a6:	e7aa      	b.n	b73fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b74a8:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b74ac:	d1af      	bne.n	b740e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b74ae:	2b00      	cmp	r3, #0
   b74b0:	d0a5      	beq.n	b73fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b74b2:	f04f 0901 	mov.w	r9, #1
   b74b6:	e7d2      	b.n	b745e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b74b8:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b74ba:	2b00      	cmp	r3, #0
   b74bc:	d09f      	beq.n	b73fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b74be:	6845      	ldr	r5, [r0, #4]
   b74c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b74c2:	42af      	cmp	r7, r5
   b74c4:	d94a      	bls.n	b755c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b74c6:	f105 0e01 	add.w	lr, r5, #1
   b74ca:	f8c0 e004 	str.w	lr, [r0, #4]
   b74ce:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b74d2:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b74d6:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b74da:	2500      	movs	r5, #0
   b74dc:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b74e0:	6885      	ldr	r5, [r0, #8]
   b74e2:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b74e4:	bf1f      	itttt	ne
   b74e6:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b74ea:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b74ee:	3501      	addne	r5, #1
   b74f0:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b74f4:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b74f8:	bf0c      	ite	eq
   b74fa:	2501      	moveq	r5, #1
   b74fc:	2502      	movne	r5, #2
   b74fe:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b7502:	6805      	ldr	r5, [r0, #0]
   b7504:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b7508:	6845      	ldr	r5, [r0, #4]
   b750a:	3d01      	subs	r5, #1
   b750c:	e7ca      	b.n	b74a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b750e:	3d01      	subs	r5, #1
   b7510:	f1a8 0810 	sub.w	r8, r8, #16
   b7514:	e7a7      	b.n	b7466 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b7516:	3501      	adds	r5, #1
   b7518:	f47f af71 	bne.w	b73fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b751c:	f06f 0401 	mvn.w	r4, #1
   b7520:	e01e      	b.n	b7560 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b7522:	3d01      	subs	r5, #1
   b7524:	1c6f      	adds	r7, r5, #1
   b7526:	f1ae 0e10 	sub.w	lr, lr, #16
   b752a:	d1b3      	bne.n	b7494 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b752c:	e767      	b.n	b73fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b752e:	f10e 0901 	add.w	r9, lr, #1
   b7532:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7536:	f8d0 8000 	ldr.w	r8, [r0]
   b753a:	4542      	cmp	r2, r8
   b753c:	f240 8093 	bls.w	b7666 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b7540:	f811 5008 	ldrb.w	r5, [r1, r8]
   b7544:	2d00      	cmp	r5, #0
   b7546:	f000 808e 	beq.w	b7666 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b754a:	2d22      	cmp	r5, #34	; 0x22
   b754c:	d130      	bne.n	b75b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b754e:	b1f3      	cbz	r3, b758e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b7550:	6845      	ldr	r5, [r0, #4]
   b7552:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b7554:	42af      	cmp	r7, r5
   b7556:	d806      	bhi.n	b7566 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b7558:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b755c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b7560:	4620      	mov	r0, r4
   b7562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b7566:	f105 0e01 	add.w	lr, r5, #1
   b756a:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b756e:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b7572:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b7576:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b757a:	2700      	movs	r7, #0
   b757c:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b757e:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b7582:	f04f 0a03 	mov.w	sl, #3
   b7586:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b758a:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b758e:	6885      	ldr	r5, [r0, #8]
   b7590:	1c6f      	adds	r7, r5, #1
				count++;
   b7592:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b7596:	f43f af32 	beq.w	b73fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b759a:	2b00      	cmp	r3, #0
   b759c:	f43f af2f 	beq.w	b73fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b75a0:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b75a4:	f8de 500c 	ldr.w	r5, [lr, #12]
   b75a8:	3501      	adds	r5, #1
   b75aa:	f8ce 500c 	str.w	r5, [lr, #12]
   b75ae:	e726      	b.n	b73fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b75b0:	2d5c      	cmp	r5, #92	; 0x5c
   b75b2:	d111      	bne.n	b75d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b75b4:	f108 0501 	add.w	r5, r8, #1
   b75b8:	42aa      	cmp	r2, r5
   b75ba:	d90d      	bls.n	b75d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b75bc:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b75be:	5d4d      	ldrb	r5, [r1, r5]
   b75c0:	2d75      	cmp	r5, #117	; 0x75
   b75c2:	d82b      	bhi.n	b761c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b75c4:	2d6d      	cmp	r5, #109	; 0x6d
   b75c6:	d80b      	bhi.n	b75e0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b75c8:	2d66      	cmp	r5, #102	; 0x66
   b75ca:	d827      	bhi.n	b761c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b75cc:	2d5b      	cmp	r5, #91	; 0x5b
   b75ce:	d81d      	bhi.n	b760c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b75d0:	2d22      	cmp	r5, #34	; 0x22
   b75d2:	d001      	beq.n	b75d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b75d4:	2d2f      	cmp	r5, #47	; 0x2f
   b75d6:	d121      	bne.n	b761c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b75d8:	6805      	ldr	r5, [r0, #0]
   b75da:	3501      	adds	r5, #1
   b75dc:	6005      	str	r5, [r0, #0]
   b75de:	e7aa      	b.n	b7536 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b75e0:	3d6e      	subs	r5, #110	; 0x6e
   b75e2:	2d07      	cmp	r5, #7
   b75e4:	d81a      	bhi.n	b761c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b75e6:	a701      	add	r7, pc, #4	; (adr r7, b75ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b75e8:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b75ec:	000b75d9 	.word	0x000b75d9
   b75f0:	000b761d 	.word	0x000b761d
   b75f4:	000b761d 	.word	0x000b761d
   b75f8:	000b761d 	.word	0x000b761d
   b75fc:	000b75d9 	.word	0x000b75d9
   b7600:	000b761d 	.word	0x000b761d
   b7604:	000b75d9 	.word	0x000b75d9
   b7608:	000b7623 	.word	0x000b7623
   b760c:	3d5c      	subs	r5, #92	; 0x5c
   b760e:	b2ed      	uxtb	r5, r5
   b7610:	fa0c f505 	lsl.w	r5, ip, r5
   b7614:	f240 4741 	movw	r7, #1089	; 0x441
   b7618:	423d      	tst	r5, r7
   b761a:	d1dd      	bne.n	b75d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b761c:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b7620:	e77c      	b.n	b751c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b7622:	f108 0502 	add.w	r5, r8, #2
   b7626:	6005      	str	r5, [r0, #0]
   b7628:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b762c:	f8d0 8000 	ldr.w	r8, [r0]
   b7630:	4542      	cmp	r2, r8
   b7632:	d803      	bhi.n	b763c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b7634:	6805      	ldr	r5, [r0, #0]
   b7636:	3d01      	subs	r5, #1
   b7638:	6005      	str	r5, [r0, #0]
					break;
   b763a:	e7cd      	b.n	b75d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b763c:	f811 5008 	ldrb.w	r5, [r1, r8]
   b7640:	2d00      	cmp	r5, #0
   b7642:	d0f7      	beq.n	b7634 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b7644:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b7648:	f1bb 0f09 	cmp.w	fp, #9
   b764c:	d904      	bls.n	b7658 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b764e:	f025 0520 	bic.w	r5, r5, #32
   b7652:	3d41      	subs	r5, #65	; 0x41
   b7654:	2d05      	cmp	r5, #5
   b7656:	d8e1      	bhi.n	b761c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b7658:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b765c:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b7660:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b7662:	d1e3      	bne.n	b762c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b7664:	e7e6      	b.n	b7634 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b7666:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b766a:	f06f 0402 	mvn.w	r4, #2
   b766e:	e777      	b.n	b7560 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b7670:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b7674:	2b00      	cmp	r3, #0
   b7676:	f43f aec2 	beq.w	b73fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b767a:	6885      	ldr	r5, [r0, #8]
   b767c:	1c6f      	adds	r7, r5, #1
   b767e:	f43f aebe 	beq.w	b73fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b7682:	012d      	lsls	r5, r5, #4
   b7684:	5d5d      	ldrb	r5, [r3, r5]
   b7686:	3d01      	subs	r5, #1
   b7688:	2d01      	cmp	r5, #1
   b768a:	f67f aeb8 	bls.w	b73fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b768e:	6845      	ldr	r5, [r0, #4]
   b7690:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b7694:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b7698:	f1b8 0f00 	cmp.w	r8, #0
   b769c:	f6ff aeaf 	blt.w	b73fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b76a0:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b76a4:	3d01      	subs	r5, #1
   b76a6:	2d01      	cmp	r5, #1
   b76a8:	d80a      	bhi.n	b76c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b76aa:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b76ae:	3501      	adds	r5, #1
   b76b0:	d006      	beq.n	b76c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b76b2:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b76b6:	3501      	adds	r5, #1
   b76b8:	d102      	bne.n	b76c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b76ba:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b76be:	e69e      	b.n	b73fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b76c0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b76c4:	f1ae 0e10 	sub.w	lr, lr, #16
   b76c8:	e7e6      	b.n	b7698 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b76ca:	f1a5 0920 	sub.w	r9, r5, #32
   b76ce:	4f24      	ldr	r7, [pc, #144]	; (b7760 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b76d0:	fa5f f989 	uxtb.w	r9, r9
   b76d4:	fa0c f909 	lsl.w	r9, ip, r9
   b76d8:	ea19 0f07 	tst.w	r9, r7
   b76dc:	f47f aeaa 	bne.w	b7434 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b76e0:	3d20      	subs	r5, #32
   b76e2:	2d5e      	cmp	r5, #94	; 0x5e
   b76e4:	d89a      	bhi.n	b761c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b76e6:	f108 0501 	add.w	r5, r8, #1
   b76ea:	6005      	str	r5, [r0, #0]
   b76ec:	e68f      	b.n	b740e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b76ee:	2d0d      	cmp	r5, #13
   b76f0:	d1f6      	bne.n	b76e0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b76f2:	e69f      	b.n	b7434 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b76f4:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b76f8:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b76fc:	e7f8      	b.n	b76f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b76fe:	6845      	ldr	r5, [r0, #4]
   b7700:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b7702:	42af      	cmp	r7, r5
   b7704:	f67f af28 	bls.w	b7558 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b7708:	f105 0801 	add.w	r8, r5, #1
   b770c:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b7710:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b7714:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b7718:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b771c:	2700      	movs	r7, #0
   b771e:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b7720:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b7724:	f04f 0a04 	mov.w	sl, #4
   b7728:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b772c:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b7730:	6805      	ldr	r5, [r0, #0]
   b7732:	3d01      	subs	r5, #1
   b7734:	e683      	b.n	b743e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b7736:	2b00      	cmp	r3, #0
   b7738:	f43f af12 	beq.w	b7560 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b773c:	6842      	ldr	r2, [r0, #4]
   b773e:	1e51      	subs	r1, r2, #1
   b7740:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b7744:	2900      	cmp	r1, #0
   b7746:	f6ff af0b 	blt.w	b7560 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b774a:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b774e:	3201      	adds	r2, #1
   b7750:	d003      	beq.n	b775a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b7752:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b7756:	3201      	adds	r2, #1
   b7758:	d087      	beq.n	b766a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b775a:	3901      	subs	r1, #1
   b775c:	3b10      	subs	r3, #16
   b775e:	e7f1      	b.n	b7744 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b7760:	04001001 	.word	0x04001001

000b7764 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b7764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b7766:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b7768:	4604      	mov	r4, r0
	if (offset == 0) {
   b776a:	b912      	cbnz	r2, b7772 <_ZN10JsonParser5parseEv+0xe>
		return false;
   b776c:	2000      	movs	r0, #0
}
   b776e:	b003      	add	sp, #12
   b7770:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b7772:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b7774:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b7778:	b1ab      	cbz	r3, b77a6 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b777a:	2100      	movs	r1, #0
	parser->toknext = 0;
   b777c:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b7780:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b7784:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b7786:	69c1      	ldr	r1, [r0, #28]
   b7788:	9100      	str	r1, [sp, #0]
   b778a:	6841      	ldr	r1, [r0, #4]
   b778c:	4630      	mov	r0, r6
   b778e:	f7ff fe0d 	bl	b73ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b7792:	1c43      	adds	r3, r0, #1
   b7794:	d128      	bne.n	b77e8 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b7796:	7c25      	ldrb	r5, [r4, #16]
   b7798:	2d00      	cmp	r5, #0
   b779a:	d1e7      	bne.n	b776c <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b779c:	6960      	ldr	r0, [r4, #20]
   b779e:	f000 fa83 	bl	b7ca8 <free>
			tokens = 0;
   b77a2:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b77a4:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b77a6:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b77a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b77ac:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b77b0:	68e2      	ldr	r2, [r4, #12]
   b77b2:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b77b4:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b77b6:	9500      	str	r5, [sp, #0]
   b77b8:	462b      	mov	r3, r5
   b77ba:	4630      	mov	r0, r6
   b77bc:	f7ff fdf6 	bl	b73ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b77c0:	2800      	cmp	r0, #0
   b77c2:	dbd3      	blt.n	b776c <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b77c4:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b77c6:	d017      	beq.n	b77f8 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b77c8:	0100      	lsls	r0, r0, #4
   b77ca:	f000 fa65 	bl	b7c98 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b77ce:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b77d0:	6160      	str	r0, [r4, #20]
   b77d2:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b77d4:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b77d6:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b77da:	68e2      	ldr	r2, [r4, #12]
   b77dc:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b77de:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b77e0:	4630      	mov	r0, r6
   b77e2:	f7ff fde3 	bl	b73ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b77e6:	e001      	b.n	b77ec <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b77e8:	2800      	cmp	r0, #0
   b77ea:	dbbf      	blt.n	b776c <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b77ec:	6963      	ldr	r3, [r4, #20]
   b77ee:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b77f2:	61a0      	str	r0, [r4, #24]
	return true;
   b77f4:	2001      	movs	r0, #1
   b77f6:	e7ba      	b.n	b776e <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b77f8:	6963      	ldr	r3, [r4, #20]
   b77fa:	61a3      	str	r3, [r4, #24]
   b77fc:	e7fa      	b.n	b77f4 <_ZN10JsonParser5parseEv+0x90>
	...

000b7800 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b7800:	b508      	push	{r3, lr}
   b7802:	4b02      	ldr	r3, [pc, #8]	; (b780c <hal_ble_stack_init+0xc>)
   b7804:	681b      	ldr	r3, [r3, #0]
   b7806:	689b      	ldr	r3, [r3, #8]
   b7808:	9301      	str	r3, [sp, #4]
   b780a:	bd08      	pop	{r3, pc}
   b780c:	00030278 	.word	0x00030278

000b7810 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b7810:	b508      	push	{r3, lr}
   b7812:	4b02      	ldr	r3, [pc, #8]	; (b781c <hal_ble_gap_set_advertising_data+0xc>)
   b7814:	681b      	ldr	r3, [r3, #0]
   b7816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7818:	9301      	str	r3, [sp, #4]
   b781a:	bd08      	pop	{r3, pc}
   b781c:	00030278 	.word	0x00030278

000b7820 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b7820:	b508      	push	{r3, lr}
   b7822:	4b02      	ldr	r3, [pc, #8]	; (b782c <hal_ble_gap_set_scan_response_data+0xc>)
   b7824:	681b      	ldr	r3, [r3, #0]
   b7826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7828:	9301      	str	r3, [sp, #4]
   b782a:	bd08      	pop	{r3, pc}
   b782c:	00030278 	.word	0x00030278

000b7830 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b7830:	b508      	push	{r3, lr}
   b7832:	4b02      	ldr	r3, [pc, #8]	; (b783c <hal_ble_gap_start_advertising+0xc>)
   b7834:	681b      	ldr	r3, [r3, #0]
   b7836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b7838:	9301      	str	r3, [sp, #4]
   b783a:	bd08      	pop	{r3, pc}
   b783c:	00030278 	.word	0x00030278

000b7840 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b7840:	b508      	push	{r3, lr}
   b7842:	4b03      	ldr	r3, [pc, #12]	; (b7850 <hal_ble_gap_disconnect+0x10>)
   b7844:	681b      	ldr	r3, [r3, #0]
   b7846:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b784a:	9301      	str	r3, [sp, #4]
   b784c:	bd08      	pop	{r3, pc}
   b784e:	0000      	.short	0x0000
   b7850:	00030278 	.word	0x00030278

000b7854 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b7854:	b508      	push	{r3, lr}
   b7856:	4b03      	ldr	r3, [pc, #12]	; (b7864 <hal_ble_gatt_server_add_service+0x10>)
   b7858:	681b      	ldr	r3, [r3, #0]
   b785a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b785e:	9301      	str	r3, [sp, #4]
   b7860:	bd08      	pop	{r3, pc}
   b7862:	0000      	.short	0x0000
   b7864:	00030278 	.word	0x00030278

000b7868 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b7868:	b508      	push	{r3, lr}
   b786a:	4b03      	ldr	r3, [pc, #12]	; (b7878 <hal_ble_gatt_server_add_characteristic+0x10>)
   b786c:	681b      	ldr	r3, [r3, #0]
   b786e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b7872:	9301      	str	r3, [sp, #4]
   b7874:	bd08      	pop	{r3, pc}
   b7876:	0000      	.short	0x0000
   b7878:	00030278 	.word	0x00030278

000b787c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b787c:	b508      	push	{r3, lr}
   b787e:	4b03      	ldr	r3, [pc, #12]	; (b788c <hal_ble_set_callback_on_periph_link_events+0x10>)
   b7880:	681b      	ldr	r3, [r3, #0]
   b7882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b7886:	9301      	str	r3, [sp, #4]
   b7888:	bd08      	pop	{r3, pc}
   b788a:	0000      	.short	0x0000
   b788c:	00030278 	.word	0x00030278

000b7890 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7890:	b508      	push	{r3, lr}
   b7892:	4b02      	ldr	r3, [pc, #8]	; (b789c <os_mutex_recursive_create+0xc>)
   b7894:	681b      	ldr	r3, [r3, #0]
   b7896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7898:	9301      	str	r3, [sp, #4]
   b789a:	bd08      	pop	{r3, pc}
   b789c:	00030248 	.word	0x00030248

000b78a0 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b78a0:	b508      	push	{r3, lr}
   b78a2:	4b02      	ldr	r3, [pc, #8]	; (b78ac <os_mutex_recursive_lock+0xc>)
   b78a4:	681b      	ldr	r3, [r3, #0]
   b78a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b78a8:	9301      	str	r3, [sp, #4]
   b78aa:	bd08      	pop	{r3, pc}
   b78ac:	00030248 	.word	0x00030248

000b78b0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b78b0:	b508      	push	{r3, lr}
   b78b2:	4b02      	ldr	r3, [pc, #8]	; (b78bc <os_mutex_recursive_unlock+0xc>)
   b78b4:	681b      	ldr	r3, [r3, #0]
   b78b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b78b8:	9301      	str	r3, [sp, #4]
   b78ba:	bd08      	pop	{r3, pc}
   b78bc:	00030248 	.word	0x00030248

000b78c0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b78c0:	b508      	push	{r3, lr}
   b78c2:	4b02      	ldr	r3, [pc, #8]	; (b78cc <HAL_RNG_GetRandomNumber+0xc>)
   b78c4:	681b      	ldr	r3, [r3, #0]
   b78c6:	685b      	ldr	r3, [r3, #4]
   b78c8:	9301      	str	r3, [sp, #4]
   b78ca:	bd08      	pop	{r3, pc}
   b78cc:	00030218 	.word	0x00030218

000b78d0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b78d0:	b508      	push	{r3, lr}
   b78d2:	4b02      	ldr	r3, [pc, #8]	; (b78dc <HAL_Delay_Microseconds+0xc>)
   b78d4:	681b      	ldr	r3, [r3, #0]
   b78d6:	68db      	ldr	r3, [r3, #12]
   b78d8:	9301      	str	r3, [sp, #4]
   b78da:	bd08      	pop	{r3, pc}
   b78dc:	00030218 	.word	0x00030218

000b78e0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b78e0:	b508      	push	{r3, lr}
   b78e2:	4b02      	ldr	r3, [pc, #8]	; (b78ec <HAL_Timer_Get_Milli_Seconds+0xc>)
   b78e4:	681b      	ldr	r3, [r3, #0]
   b78e6:	695b      	ldr	r3, [r3, #20]
   b78e8:	9301      	str	r3, [sp, #4]
   b78ea:	bd08      	pop	{r3, pc}
   b78ec:	00030218 	.word	0x00030218

000b78f0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b78f0:	b508      	push	{r3, lr}
   b78f2:	4b02      	ldr	r3, [pc, #8]	; (b78fc <hal_i2c_begin+0xc>)
   b78f4:	681b      	ldr	r3, [r3, #0]
   b78f6:	68db      	ldr	r3, [r3, #12]
   b78f8:	9301      	str	r3, [sp, #4]
   b78fa:	bd08      	pop	{r3, pc}
   b78fc:	00030228 	.word	0x00030228

000b7900 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b7900:	b508      	push	{r3, lr}
   b7902:	4b02      	ldr	r3, [pc, #8]	; (b790c <hal_i2c_begin_transmission+0xc>)
   b7904:	681b      	ldr	r3, [r3, #0]
   b7906:	699b      	ldr	r3, [r3, #24]
   b7908:	9301      	str	r3, [sp, #4]
   b790a:	bd08      	pop	{r3, pc}
   b790c:	00030228 	.word	0x00030228

000b7910 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b7910:	b508      	push	{r3, lr}
   b7912:	4b02      	ldr	r3, [pc, #8]	; (b791c <hal_i2c_end_transmission+0xc>)
   b7914:	681b      	ldr	r3, [r3, #0]
   b7916:	69db      	ldr	r3, [r3, #28]
   b7918:	9301      	str	r3, [sp, #4]
   b791a:	bd08      	pop	{r3, pc}
   b791c:	00030228 	.word	0x00030228

000b7920 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7920:	b508      	push	{r3, lr}
   b7922:	4b02      	ldr	r3, [pc, #8]	; (b792c <hal_i2c_write+0xc>)
   b7924:	681b      	ldr	r3, [r3, #0]
   b7926:	6a1b      	ldr	r3, [r3, #32]
   b7928:	9301      	str	r3, [sp, #4]
   b792a:	bd08      	pop	{r3, pc}
   b792c:	00030228 	.word	0x00030228

000b7930 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7930:	b508      	push	{r3, lr}
   b7932:	4b02      	ldr	r3, [pc, #8]	; (b793c <hal_i2c_available+0xc>)
   b7934:	681b      	ldr	r3, [r3, #0]
   b7936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7938:	9301      	str	r3, [sp, #4]
   b793a:	bd08      	pop	{r3, pc}
   b793c:	00030228 	.word	0x00030228

000b7940 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7940:	b508      	push	{r3, lr}
   b7942:	4b02      	ldr	r3, [pc, #8]	; (b794c <hal_i2c_read+0xc>)
   b7944:	681b      	ldr	r3, [r3, #0]
   b7946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7948:	9301      	str	r3, [sp, #4]
   b794a:	bd08      	pop	{r3, pc}
   b794c:	00030228 	.word	0x00030228

000b7950 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7950:	b508      	push	{r3, lr}
   b7952:	4b02      	ldr	r3, [pc, #8]	; (b795c <hal_i2c_peek+0xc>)
   b7954:	681b      	ldr	r3, [r3, #0]
   b7956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7958:	9301      	str	r3, [sp, #4]
   b795a:	bd08      	pop	{r3, pc}
   b795c:	00030228 	.word	0x00030228

000b7960 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7960:	b508      	push	{r3, lr}
   b7962:	4b02      	ldr	r3, [pc, #8]	; (b796c <hal_i2c_flush+0xc>)
   b7964:	681b      	ldr	r3, [r3, #0]
   b7966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7968:	9301      	str	r3, [sp, #4]
   b796a:	bd08      	pop	{r3, pc}
   b796c:	00030228 	.word	0x00030228

000b7970 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7970:	b508      	push	{r3, lr}
   b7972:	4b02      	ldr	r3, [pc, #8]	; (b797c <hal_i2c_init+0xc>)
   b7974:	681b      	ldr	r3, [r3, #0]
   b7976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7978:	9301      	str	r3, [sp, #4]
   b797a:	bd08      	pop	{r3, pc}
   b797c:	00030228 	.word	0x00030228

000b7980 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b7980:	b508      	push	{r3, lr}
   b7982:	4b02      	ldr	r3, [pc, #8]	; (b798c <hal_i2c_request_ex+0xc>)
   b7984:	681b      	ldr	r3, [r3, #0]
   b7986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7988:	9301      	str	r3, [sp, #4]
   b798a:	bd08      	pop	{r3, pc}
   b798c:	00030228 	.word	0x00030228

000b7990 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b7990:	b508      	push	{r3, lr}
   b7992:	4b02      	ldr	r3, [pc, #8]	; (b799c <if_index_to_name+0xc>)
   b7994:	681b      	ldr	r3, [r3, #0]
   b7996:	695b      	ldr	r3, [r3, #20]
   b7998:	9301      	str	r3, [sp, #4]
   b799a:	bd08      	pop	{r3, pc}
   b799c:	0003026c 	.word	0x0003026c

000b79a0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b79a0:	b508      	push	{r3, lr}
   b79a2:	4b02      	ldr	r3, [pc, #8]	; (b79ac <inet_inet_ntop+0xc>)
   b79a4:	681b      	ldr	r3, [r3, #0]
   b79a6:	695b      	ldr	r3, [r3, #20]
   b79a8:	9301      	str	r3, [sp, #4]
   b79aa:	bd08      	pop	{r3, pc}
   b79ac:	00030264 	.word	0x00030264

000b79b0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b79b0:	b508      	push	{r3, lr}
   b79b2:	4b02      	ldr	r3, [pc, #8]	; (b79bc <inet_htonl+0xc>)
   b79b4:	681b      	ldr	r3, [r3, #0]
   b79b6:	6a1b      	ldr	r3, [r3, #32]
   b79b8:	9301      	str	r3, [sp, #4]
   b79ba:	bd08      	pop	{r3, pc}
   b79bc:	00030264 	.word	0x00030264

000b79c0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b79c0:	b508      	push	{r3, lr}
   b79c2:	4b02      	ldr	r3, [pc, #8]	; (b79cc <inet_htons+0xc>)
   b79c4:	681b      	ldr	r3, [r3, #0]
   b79c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b79c8:	9301      	str	r3, [sp, #4]
   b79ca:	bd08      	pop	{r3, pc}
   b79cc:	00030264 	.word	0x00030264

000b79d0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b79d0:	b508      	push	{r3, lr}
   b79d2:	4b02      	ldr	r3, [pc, #8]	; (b79dc <netdb_freeaddrinfo+0xc>)
   b79d4:	681b      	ldr	r3, [r3, #0]
   b79d6:	689b      	ldr	r3, [r3, #8]
   b79d8:	9301      	str	r3, [sp, #4]
   b79da:	bd08      	pop	{r3, pc}
   b79dc:	00030268 	.word	0x00030268

000b79e0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b79e0:	b508      	push	{r3, lr}
   b79e2:	4b02      	ldr	r3, [pc, #8]	; (b79ec <netdb_getaddrinfo+0xc>)
   b79e4:	681b      	ldr	r3, [r3, #0]
   b79e6:	68db      	ldr	r3, [r3, #12]
   b79e8:	9301      	str	r3, [sp, #4]
   b79ea:	bd08      	pop	{r3, pc}
   b79ec:	00030268 	.word	0x00030268

000b79f0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b79f0:	b508      	push	{r3, lr}
   b79f2:	4b02      	ldr	r3, [pc, #8]	; (b79fc <sock_setsockopt+0xc>)
   b79f4:	681b      	ldr	r3, [r3, #0]
   b79f6:	699b      	ldr	r3, [r3, #24]
   b79f8:	9301      	str	r3, [sp, #4]
   b79fa:	bd08      	pop	{r3, pc}
   b79fc:	00030238 	.word	0x00030238

000b7a00 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b7a00:	b508      	push	{r3, lr}
   b7a02:	4b02      	ldr	r3, [pc, #8]	; (b7a0c <sock_close+0xc>)
   b7a04:	681b      	ldr	r3, [r3, #0]
   b7a06:	69db      	ldr	r3, [r3, #28]
   b7a08:	9301      	str	r3, [sp, #4]
   b7a0a:	bd08      	pop	{r3, pc}
   b7a0c:	00030238 	.word	0x00030238

000b7a10 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b7a10:	b508      	push	{r3, lr}
   b7a12:	4b02      	ldr	r3, [pc, #8]	; (b7a1c <sock_connect+0xc>)
   b7a14:	681b      	ldr	r3, [r3, #0]
   b7a16:	6a1b      	ldr	r3, [r3, #32]
   b7a18:	9301      	str	r3, [sp, #4]
   b7a1a:	bd08      	pop	{r3, pc}
   b7a1c:	00030238 	.word	0x00030238

000b7a20 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b7a20:	b508      	push	{r3, lr}
   b7a22:	4b02      	ldr	r3, [pc, #8]	; (b7a2c <sock_recv+0xc>)
   b7a24:	681b      	ldr	r3, [r3, #0]
   b7a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7a28:	9301      	str	r3, [sp, #4]
   b7a2a:	bd08      	pop	{r3, pc}
   b7a2c:	00030238 	.word	0x00030238

000b7a30 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b7a30:	b508      	push	{r3, lr}
   b7a32:	4b02      	ldr	r3, [pc, #8]	; (b7a3c <sock_send+0xc>)
   b7a34:	681b      	ldr	r3, [r3, #0]
   b7a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7a38:	9301      	str	r3, [sp, #4]
   b7a3a:	bd08      	pop	{r3, pc}
   b7a3c:	00030238 	.word	0x00030238

000b7a40 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b7a40:	b508      	push	{r3, lr}
   b7a42:	4b02      	ldr	r3, [pc, #8]	; (b7a4c <sock_socket+0xc>)
   b7a44:	681b      	ldr	r3, [r3, #0]
   b7a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7a48:	9301      	str	r3, [sp, #4]
   b7a4a:	bd08      	pop	{r3, pc}
   b7a4c:	00030238 	.word	0x00030238

000b7a50 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7a50:	b508      	push	{r3, lr}
   b7a52:	4b02      	ldr	r3, [pc, #8]	; (b7a5c <hal_usart_write+0xc>)
   b7a54:	681b      	ldr	r3, [r3, #0]
   b7a56:	68db      	ldr	r3, [r3, #12]
   b7a58:	9301      	str	r3, [sp, #4]
   b7a5a:	bd08      	pop	{r3, pc}
   b7a5c:	0003023c 	.word	0x0003023c

000b7a60 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7a60:	b508      	push	{r3, lr}
   b7a62:	4b02      	ldr	r3, [pc, #8]	; (b7a6c <hal_usart_available+0xc>)
   b7a64:	681b      	ldr	r3, [r3, #0]
   b7a66:	691b      	ldr	r3, [r3, #16]
   b7a68:	9301      	str	r3, [sp, #4]
   b7a6a:	bd08      	pop	{r3, pc}
   b7a6c:	0003023c 	.word	0x0003023c

000b7a70 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7a70:	b508      	push	{r3, lr}
   b7a72:	4b02      	ldr	r3, [pc, #8]	; (b7a7c <hal_usart_read+0xc>)
   b7a74:	681b      	ldr	r3, [r3, #0]
   b7a76:	695b      	ldr	r3, [r3, #20]
   b7a78:	9301      	str	r3, [sp, #4]
   b7a7a:	bd08      	pop	{r3, pc}
   b7a7c:	0003023c 	.word	0x0003023c

000b7a80 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7a80:	b508      	push	{r3, lr}
   b7a82:	4b02      	ldr	r3, [pc, #8]	; (b7a8c <hal_usart_peek+0xc>)
   b7a84:	681b      	ldr	r3, [r3, #0]
   b7a86:	699b      	ldr	r3, [r3, #24]
   b7a88:	9301      	str	r3, [sp, #4]
   b7a8a:	bd08      	pop	{r3, pc}
   b7a8c:	0003023c 	.word	0x0003023c

000b7a90 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7a90:	b508      	push	{r3, lr}
   b7a92:	4b02      	ldr	r3, [pc, #8]	; (b7a9c <hal_usart_flush+0xc>)
   b7a94:	681b      	ldr	r3, [r3, #0]
   b7a96:	69db      	ldr	r3, [r3, #28]
   b7a98:	9301      	str	r3, [sp, #4]
   b7a9a:	bd08      	pop	{r3, pc}
   b7a9c:	0003023c 	.word	0x0003023c

000b7aa0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7aa0:	b508      	push	{r3, lr}
   b7aa2:	4b02      	ldr	r3, [pc, #8]	; (b7aac <hal_usart_available_data_for_write+0xc>)
   b7aa4:	681b      	ldr	r3, [r3, #0]
   b7aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7aa8:	9301      	str	r3, [sp, #4]
   b7aaa:	bd08      	pop	{r3, pc}
   b7aac:	0003023c 	.word	0x0003023c

000b7ab0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7ab0:	b508      	push	{r3, lr}
   b7ab2:	4b02      	ldr	r3, [pc, #8]	; (b7abc <hal_usart_init_ex+0xc>)
   b7ab4:	681b      	ldr	r3, [r3, #0]
   b7ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7ab8:	9301      	str	r3, [sp, #4]
   b7aba:	bd08      	pop	{r3, pc}
   b7abc:	0003023c 	.word	0x0003023c

000b7ac0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7ac0:	b508      	push	{r3, lr}
   b7ac2:	4b02      	ldr	r3, [pc, #8]	; (b7acc <HAL_USB_USART_Init+0xc>)
   b7ac4:	681b      	ldr	r3, [r3, #0]
   b7ac6:	681b      	ldr	r3, [r3, #0]
   b7ac8:	9301      	str	r3, [sp, #4]
   b7aca:	bd08      	pop	{r3, pc}
   b7acc:	0003024c 	.word	0x0003024c

000b7ad0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7ad0:	b508      	push	{r3, lr}
   b7ad2:	4b02      	ldr	r3, [pc, #8]	; (b7adc <HAL_USB_USART_Begin+0xc>)
   b7ad4:	681b      	ldr	r3, [r3, #0]
   b7ad6:	685b      	ldr	r3, [r3, #4]
   b7ad8:	9301      	str	r3, [sp, #4]
   b7ada:	bd08      	pop	{r3, pc}
   b7adc:	0003024c 	.word	0x0003024c

000b7ae0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7ae0:	b508      	push	{r3, lr}
   b7ae2:	4b02      	ldr	r3, [pc, #8]	; (b7aec <HAL_USB_USART_Available_Data+0xc>)
   b7ae4:	681b      	ldr	r3, [r3, #0]
   b7ae6:	691b      	ldr	r3, [r3, #16]
   b7ae8:	9301      	str	r3, [sp, #4]
   b7aea:	bd08      	pop	{r3, pc}
   b7aec:	0003024c 	.word	0x0003024c

000b7af0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7af0:	b508      	push	{r3, lr}
   b7af2:	4b02      	ldr	r3, [pc, #8]	; (b7afc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7af4:	681b      	ldr	r3, [r3, #0]
   b7af6:	695b      	ldr	r3, [r3, #20]
   b7af8:	9301      	str	r3, [sp, #4]
   b7afa:	bd08      	pop	{r3, pc}
   b7afc:	0003024c 	.word	0x0003024c

000b7b00 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7b00:	b508      	push	{r3, lr}
   b7b02:	4b02      	ldr	r3, [pc, #8]	; (b7b0c <HAL_USB_USART_Receive_Data+0xc>)
   b7b04:	681b      	ldr	r3, [r3, #0]
   b7b06:	699b      	ldr	r3, [r3, #24]
   b7b08:	9301      	str	r3, [sp, #4]
   b7b0a:	bd08      	pop	{r3, pc}
   b7b0c:	0003024c 	.word	0x0003024c

000b7b10 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7b10:	b508      	push	{r3, lr}
   b7b12:	4b02      	ldr	r3, [pc, #8]	; (b7b1c <HAL_USB_USART_Send_Data+0xc>)
   b7b14:	681b      	ldr	r3, [r3, #0]
   b7b16:	69db      	ldr	r3, [r3, #28]
   b7b18:	9301      	str	r3, [sp, #4]
   b7b1a:	bd08      	pop	{r3, pc}
   b7b1c:	0003024c 	.word	0x0003024c

000b7b20 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7b20:	b508      	push	{r3, lr}
   b7b22:	4b02      	ldr	r3, [pc, #8]	; (b7b2c <HAL_USB_USART_Flush_Data+0xc>)
   b7b24:	681b      	ldr	r3, [r3, #0]
   b7b26:	6a1b      	ldr	r3, [r3, #32]
   b7b28:	9301      	str	r3, [sp, #4]
   b7b2a:	bd08      	pop	{r3, pc}
   b7b2c:	0003024c 	.word	0x0003024c

000b7b30 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7b30:	b508      	push	{r3, lr}
   b7b32:	4b02      	ldr	r3, [pc, #8]	; (b7b3c <panic_+0xc>)
   b7b34:	681b      	ldr	r3, [r3, #0]
   b7b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7b38:	9301      	str	r3, [sp, #4]
   b7b3a:	bd08      	pop	{r3, pc}
   b7b3c:	00030260 	.word	0x00030260

000b7b40 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7b40:	b508      	push	{r3, lr}
   b7b42:	4b02      	ldr	r3, [pc, #8]	; (b7b4c <log_message+0xc>)
   b7b44:	681b      	ldr	r3, [r3, #0]
   b7b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7b48:	9301      	str	r3, [sp, #4]
   b7b4a:	bd08      	pop	{r3, pc}
   b7b4c:	00030260 	.word	0x00030260

000b7b50 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7b50:	b508      	push	{r3, lr}
   b7b52:	4b02      	ldr	r3, [pc, #8]	; (b7b5c <set_system_mode+0xc>)
   b7b54:	681b      	ldr	r3, [r3, #0]
   b7b56:	685b      	ldr	r3, [r3, #4]
   b7b58:	9301      	str	r3, [sp, #4]
   b7b5a:	bd08      	pop	{r3, pc}
   b7b5c:	00030220 	.word	0x00030220

000b7b60 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7b60:	b508      	push	{r3, lr}
   b7b62:	4b02      	ldr	r3, [pc, #8]	; (b7b6c <system_delay_ms+0xc>)
   b7b64:	681b      	ldr	r3, [r3, #0]
   b7b66:	695b      	ldr	r3, [r3, #20]
   b7b68:	9301      	str	r3, [sp, #4]
   b7b6a:	bd08      	pop	{r3, pc}
   b7b6c:	00030220 	.word	0x00030220

000b7b70 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7b70:	b508      	push	{r3, lr}
   b7b72:	4b03      	ldr	r3, [pc, #12]	; (b7b80 <system_ctrl_set_app_request_handler+0x10>)
   b7b74:	681b      	ldr	r3, [r3, #0]
   b7b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7b7a:	9301      	str	r3, [sp, #4]
   b7b7c:	bd08      	pop	{r3, pc}
   b7b7e:	0000      	.short	0x0000
   b7b80:	00030220 	.word	0x00030220

000b7b84 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7b84:	b508      	push	{r3, lr}
   b7b86:	4b03      	ldr	r3, [pc, #12]	; (b7b94 <system_ctrl_set_result+0x10>)
   b7b88:	681b      	ldr	r3, [r3, #0]
   b7b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7b8e:	9301      	str	r3, [sp, #4]
   b7b90:	bd08      	pop	{r3, pc}
   b7b92:	0000      	.short	0x0000
   b7b94:	00030220 	.word	0x00030220

000b7b98 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7b98:	b508      	push	{r3, lr}
   b7b9a:	4b02      	ldr	r3, [pc, #8]	; (b7ba4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7b9c:	681b      	ldr	r3, [r3, #0]
   b7b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7ba0:	9301      	str	r3, [sp, #4]
   b7ba2:	bd08      	pop	{r3, pc}
   b7ba4:	00030244 	.word	0x00030244

000b7ba8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7ba8:	b508      	push	{r3, lr}
   b7baa:	4b02      	ldr	r3, [pc, #8]	; (b7bb4 <network_connect+0xc>)
   b7bac:	681b      	ldr	r3, [r3, #0]
   b7bae:	685b      	ldr	r3, [r3, #4]
   b7bb0:	9301      	str	r3, [sp, #4]
   b7bb2:	bd08      	pop	{r3, pc}
   b7bb4:	00030240 	.word	0x00030240

000b7bb8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7bb8:	b508      	push	{r3, lr}
   b7bba:	4b02      	ldr	r3, [pc, #8]	; (b7bc4 <network_connecting+0xc>)
   b7bbc:	681b      	ldr	r3, [r3, #0]
   b7bbe:	689b      	ldr	r3, [r3, #8]
   b7bc0:	9301      	str	r3, [sp, #4]
   b7bc2:	bd08      	pop	{r3, pc}
   b7bc4:	00030240 	.word	0x00030240

000b7bc8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7bc8:	b508      	push	{r3, lr}
   b7bca:	4b02      	ldr	r3, [pc, #8]	; (b7bd4 <network_disconnect+0xc>)
   b7bcc:	681b      	ldr	r3, [r3, #0]
   b7bce:	68db      	ldr	r3, [r3, #12]
   b7bd0:	9301      	str	r3, [sp, #4]
   b7bd2:	bd08      	pop	{r3, pc}
   b7bd4:	00030240 	.word	0x00030240

000b7bd8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7bd8:	b508      	push	{r3, lr}
   b7bda:	4b02      	ldr	r3, [pc, #8]	; (b7be4 <network_ready+0xc>)
   b7bdc:	681b      	ldr	r3, [r3, #0]
   b7bde:	691b      	ldr	r3, [r3, #16]
   b7be0:	9301      	str	r3, [sp, #4]
   b7be2:	bd08      	pop	{r3, pc}
   b7be4:	00030240 	.word	0x00030240

000b7be8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7be8:	b508      	push	{r3, lr}
   b7bea:	4b02      	ldr	r3, [pc, #8]	; (b7bf4 <network_on+0xc>)
   b7bec:	681b      	ldr	r3, [r3, #0]
   b7bee:	695b      	ldr	r3, [r3, #20]
   b7bf0:	9301      	str	r3, [sp, #4]
   b7bf2:	bd08      	pop	{r3, pc}
   b7bf4:	00030240 	.word	0x00030240

000b7bf8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7bf8:	b508      	push	{r3, lr}
   b7bfa:	4b02      	ldr	r3, [pc, #8]	; (b7c04 <network_off+0xc>)
   b7bfc:	681b      	ldr	r3, [r3, #0]
   b7bfe:	699b      	ldr	r3, [r3, #24]
   b7c00:	9301      	str	r3, [sp, #4]
   b7c02:	bd08      	pop	{r3, pc}
   b7c04:	00030240 	.word	0x00030240

000b7c08 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7c08:	b508      	push	{r3, lr}
   b7c0a:	4b02      	ldr	r3, [pc, #8]	; (b7c14 <network_listen+0xc>)
   b7c0c:	681b      	ldr	r3, [r3, #0]
   b7c0e:	69db      	ldr	r3, [r3, #28]
   b7c10:	9301      	str	r3, [sp, #4]
   b7c12:	bd08      	pop	{r3, pc}
   b7c14:	00030240 	.word	0x00030240

000b7c18 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7c18:	b508      	push	{r3, lr}
   b7c1a:	4b02      	ldr	r3, [pc, #8]	; (b7c24 <network_listening+0xc>)
   b7c1c:	681b      	ldr	r3, [r3, #0]
   b7c1e:	6a1b      	ldr	r3, [r3, #32]
   b7c20:	9301      	str	r3, [sp, #4]
   b7c22:	bd08      	pop	{r3, pc}
   b7c24:	00030240 	.word	0x00030240

000b7c28 <network_has_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
   b7c28:	b508      	push	{r3, lr}
   b7c2a:	4b02      	ldr	r3, [pc, #8]	; (b7c34 <network_has_credentials+0xc>)
   b7c2c:	681b      	ldr	r3, [r3, #0]
   b7c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7c30:	9301      	str	r3, [sp, #4]
   b7c32:	bd08      	pop	{r3, pc}
   b7c34:	00030240 	.word	0x00030240

000b7c38 <network_set_credentials>:
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b7c38:	b508      	push	{r3, lr}
   b7c3a:	4b02      	ldr	r3, [pc, #8]	; (b7c44 <network_set_credentials+0xc>)
   b7c3c:	681b      	ldr	r3, [r3, #0]
   b7c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7c40:	9301      	str	r3, [sp, #4]
   b7c42:	bd08      	pop	{r3, pc}
   b7c44:	00030240 	.word	0x00030240

000b7c48 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b7c48:	b508      	push	{r3, lr}
   b7c4a:	4b02      	ldr	r3, [pc, #8]	; (b7c54 <network_clear_credentials+0xc>)
   b7c4c:	681b      	ldr	r3, [r3, #0]
   b7c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7c50:	9301      	str	r3, [sp, #4]
   b7c52:	bd08      	pop	{r3, pc}
   b7c54:	00030240 	.word	0x00030240

000b7c58 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7c58:	b508      	push	{r3, lr}
   b7c5a:	4b02      	ldr	r3, [pc, #8]	; (b7c64 <network_set_listen_timeout+0xc>)
   b7c5c:	681b      	ldr	r3, [r3, #0]
   b7c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7c60:	9301      	str	r3, [sp, #4]
   b7c62:	bd08      	pop	{r3, pc}
   b7c64:	00030240 	.word	0x00030240

000b7c68 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7c68:	b508      	push	{r3, lr}
   b7c6a:	4b02      	ldr	r3, [pc, #8]	; (b7c74 <network_get_listen_timeout+0xc>)
   b7c6c:	681b      	ldr	r3, [r3, #0]
   b7c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7c70:	9301      	str	r3, [sp, #4]
   b7c72:	bd08      	pop	{r3, pc}
   b7c74:	00030240 	.word	0x00030240

000b7c78 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7c78:	b508      	push	{r3, lr}
   b7c7a:	4b02      	ldr	r3, [pc, #8]	; (b7c84 <network_is_on+0xc>)
   b7c7c:	681b      	ldr	r3, [r3, #0]
   b7c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7c80:	9301      	str	r3, [sp, #4]
   b7c82:	bd08      	pop	{r3, pc}
   b7c84:	00030240 	.word	0x00030240

000b7c88 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7c88:	b508      	push	{r3, lr}
   b7c8a:	4b02      	ldr	r3, [pc, #8]	; (b7c94 <network_is_off+0xc>)
   b7c8c:	681b      	ldr	r3, [r3, #0]
   b7c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7c90:	9301      	str	r3, [sp, #4]
   b7c92:	bd08      	pop	{r3, pc}
   b7c94:	00030240 	.word	0x00030240

000b7c98 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7c98:	b508      	push	{r3, lr}
   b7c9a:	4b02      	ldr	r3, [pc, #8]	; (b7ca4 <malloc+0xc>)
   b7c9c:	681b      	ldr	r3, [r3, #0]
   b7c9e:	681b      	ldr	r3, [r3, #0]
   b7ca0:	9301      	str	r3, [sp, #4]
   b7ca2:	bd08      	pop	{r3, pc}
   b7ca4:	0003021c 	.word	0x0003021c

000b7ca8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7ca8:	b508      	push	{r3, lr}
   b7caa:	4b02      	ldr	r3, [pc, #8]	; (b7cb4 <free+0xc>)
   b7cac:	681b      	ldr	r3, [r3, #0]
   b7cae:	685b      	ldr	r3, [r3, #4]
   b7cb0:	9301      	str	r3, [sp, #4]
   b7cb2:	bd08      	pop	{r3, pc}
   b7cb4:	0003021c 	.word	0x0003021c

000b7cb8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7cb8:	b508      	push	{r3, lr}
   b7cba:	4b02      	ldr	r3, [pc, #8]	; (b7cc4 <realloc+0xc>)
   b7cbc:	681b      	ldr	r3, [r3, #0]
   b7cbe:	689b      	ldr	r3, [r3, #8]
   b7cc0:	9301      	str	r3, [sp, #4]
   b7cc2:	bd08      	pop	{r3, pc}
   b7cc4:	0003021c 	.word	0x0003021c

000b7cc8 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b7cc8:	b508      	push	{r3, lr}
   b7cca:	4b02      	ldr	r3, [pc, #8]	; (b7cd4 <sscanf+0xc>)
   b7ccc:	681b      	ldr	r3, [r3, #0]
   b7cce:	695b      	ldr	r3, [r3, #20]
   b7cd0:	9301      	str	r3, [sp, #4]
   b7cd2:	bd08      	pop	{r3, pc}
   b7cd4:	0003021c 	.word	0x0003021c

000b7cd8 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7cd8:	b508      	push	{r3, lr}
   b7cda:	4b02      	ldr	r3, [pc, #8]	; (b7ce4 <vsnprintf+0xc>)
   b7cdc:	681b      	ldr	r3, [r3, #0]
   b7cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7ce0:	9301      	str	r3, [sp, #4]
   b7ce2:	bd08      	pop	{r3, pc}
   b7ce4:	0003021c 	.word	0x0003021c

000b7ce8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7ce8:	b508      	push	{r3, lr}
   b7cea:	4b02      	ldr	r3, [pc, #8]	; (b7cf4 <abort+0xc>)
   b7cec:	681b      	ldr	r3, [r3, #0]
   b7cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7cf0:	9301      	str	r3, [sp, #4]
   b7cf2:	bd08      	pop	{r3, pc}
   b7cf4:	0003021c 	.word	0x0003021c

000b7cf8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7cf8:	b508      	push	{r3, lr}
   b7cfa:	4b02      	ldr	r3, [pc, #8]	; (b7d04 <_malloc_r+0xc>)
   b7cfc:	681b      	ldr	r3, [r3, #0]
   b7cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7d00:	9301      	str	r3, [sp, #4]
   b7d02:	bd08      	pop	{r3, pc}
   b7d04:	0003021c 	.word	0x0003021c

000b7d08 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7d08:	b508      	push	{r3, lr}
   b7d0a:	4b02      	ldr	r3, [pc, #8]	; (b7d14 <__errno+0xc>)
   b7d0c:	681b      	ldr	r3, [r3, #0]
   b7d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7d10:	9301      	str	r3, [sp, #4]
   b7d12:	bd08      	pop	{r3, pc}
   b7d14:	0003021c 	.word	0x0003021c

000b7d18 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7d18:	b508      	push	{r3, lr}
   b7d1a:	4b02      	ldr	r3, [pc, #8]	; (b7d24 <__assert_func+0xc>)
   b7d1c:	681b      	ldr	r3, [r3, #0]
   b7d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7d20:	9301      	str	r3, [sp, #4]
   b7d22:	bd08      	pop	{r3, pc}
   b7d24:	0003021c 	.word	0x0003021c

000b7d28 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7d28:	b508      	push	{r3, lr}
   b7d2a:	4b02      	ldr	r3, [pc, #8]	; (b7d34 <newlib_impure_ptr_callback+0xc>)
   b7d2c:	681b      	ldr	r3, [r3, #0]
   b7d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7d30:	9301      	str	r3, [sp, #4]
   b7d32:	bd08      	pop	{r3, pc}
   b7d34:	0003021c 	.word	0x0003021c

000b7d38 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7d38:	2100      	movs	r1, #0
   b7d3a:	f7ff bf11 	b.w	b7b60 <system_delay_ms>

000b7d3e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7d3e:	4770      	bx	lr

000b7d40 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b7d40:	4770      	bx	lr

000b7d42 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b7d42:	4770      	bx	lr

000b7d44 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7d44:	4770      	bx	lr
	...

000b7d48 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7d48:	4b06      	ldr	r3, [pc, #24]	; (b7d64 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7d4a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7d4c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7d4e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7d52:	d005      	beq.n	b7d60 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7d54:	4608      	mov	r0, r1
   b7d56:	f002 faa1 	bl	ba29c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7d5a:	2800      	cmp	r0, #0
   b7d5c:	bf08      	it	eq
   b7d5e:	2400      	moveq	r4, #0
      }
   b7d60:	4620      	mov	r0, r4
   b7d62:	bd10      	pop	{r4, pc}
   b7d64:	000bd9a8 	.word	0x000bd9a8

000b7d68 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7d68:	4b06      	ldr	r3, [pc, #24]	; (b7d84 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7d6a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7d6c:	b510      	push	{r4, lr}
   b7d6e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7d72:	d005      	beq.n	b7d80 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7d74:	4608      	mov	r0, r1
   b7d76:	f002 fa91 	bl	ba29c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7d7a:	2800      	cmp	r0, #0
   b7d7c:	bf08      	it	eq
   b7d7e:	2400      	moveq	r4, #0
      }
   b7d80:	4620      	mov	r0, r4
   b7d82:	bd10      	pop	{r4, pc}
   b7d84:	000bd9a8 	.word	0x000bd9a8

000b7d88 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7d88:	4b06      	ldr	r3, [pc, #24]	; (b7da4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7d8a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7d8c:	b510      	push	{r4, lr}
   b7d8e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7d92:	d005      	beq.n	b7da0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7d94:	4608      	mov	r0, r1
   b7d96:	f002 fa81 	bl	ba29c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7d9a:	2800      	cmp	r0, #0
   b7d9c:	bf08      	it	eq
   b7d9e:	2400      	moveq	r4, #0
      }
   b7da0:	4620      	mov	r0, r4
   b7da2:	bd10      	pop	{r4, pc}
   b7da4:	000bd9a8 	.word	0x000bd9a8

000b7da8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7da8:	b510      	push	{r4, lr}
   b7daa:	2168      	movs	r1, #104	; 0x68
   b7dac:	4604      	mov	r4, r0
   b7dae:	f7fc f978 	bl	b40a2 <_ZdlPvj>
   b7db2:	4620      	mov	r0, r4
   b7db4:	bd10      	pop	{r4, pc}

000b7db6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7db6:	b510      	push	{r4, lr}
   b7db8:	2128      	movs	r1, #40	; 0x28
   b7dba:	4604      	mov	r4, r0
   b7dbc:	f7fc f971 	bl	b40a2 <_ZdlPvj>
   b7dc0:	4620      	mov	r0, r4
   b7dc2:	bd10      	pop	{r4, pc}

000b7dc4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7dc4:	b510      	push	{r4, lr}
   b7dc6:	2130      	movs	r1, #48	; 0x30
   b7dc8:	4604      	mov	r4, r0
   b7dca:	f7fc f96a 	bl	b40a2 <_ZdlPvj>
   b7dce:	4620      	mov	r0, r4
   b7dd0:	bd10      	pop	{r4, pc}

000b7dd2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7dd2:	2168      	movs	r1, #104	; 0x68
   b7dd4:	f7fc b965 	b.w	b40a2 <_ZdlPvj>

000b7dd8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7dd8:	2128      	movs	r1, #40	; 0x28
   b7dda:	f7fc b962 	b.w	b40a2 <_ZdlPvj>

000b7dde <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7dde:	2130      	movs	r1, #48	; 0x30
   b7de0:	f7fc b95f 	b.w	b40a2 <_ZdlPvj>

000b7de4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b7de4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7de6:	2500      	movs	r5, #0
   b7de8:	1cec      	adds	r4, r5, #3
   b7dea:	428c      	cmp	r4, r1
   b7dec:	d80d      	bhi.n	b7e0a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b7dee:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b7df0:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b7df2:	5d87      	ldrb	r7, [r0, r6]
   b7df4:	4297      	cmp	r7, r2
   b7df6:	d105      	bne.n	b7e04 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b7df8:	4426      	add	r6, r4
   b7dfa:	42b1      	cmp	r1, r6
   b7dfc:	d305      	bcc.n	b7e0a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b7dfe:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b7e00:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b7e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b7e04:	3401      	adds	r4, #1
   b7e06:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7e08:	e7ee      	b.n	b7de8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b7e0a:	2000      	movs	r0, #0
   b7e0c:	e7f9      	b.n	b7e02 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b7e10 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b7e10:	4a02      	ldr	r2, [pc, #8]	; (b7e1c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b7e12:	4903      	ldr	r1, [pc, #12]	; (b7e20 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b7e14:	200a      	movs	r0, #10
   b7e16:	f7ff be8b 	b.w	b7b30 <panic_>
   b7e1a:	bf00      	nop
   b7e1c:	000b78d1 	.word	0x000b78d1
   b7e20:	000bd808 	.word	0x000bd808

000b7e24 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7e24:	b430      	push	{r4, r5}
   b7e26:	460d      	mov	r5, r1
   b7e28:	4611      	mov	r1, r2
   b7e2a:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b7e2c:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b7e2e:	6809      	ldr	r1, [r1, #0]
   b7e30:	6828      	ldr	r0, [r5, #0]
   b7e32:	e9d3 4300 	ldrd	r4, r3, [r3]
   b7e36:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b7e38:	bc30      	pop	{r4, r5}
   b7e3a:	4760      	bx	ip

000b7e3c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b7e3c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7e3e:	b538      	push	{r3, r4, r5, lr}
   b7e40:	4604      	mov	r4, r0
	switch (__op)
   b7e42:	d102      	bne.n	b7e4a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b7e44:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b7e46:	6023      	str	r3, [r4, #0]
	}
   b7e48:	e003      	b.n	b7e52 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b7e4a:	2a02      	cmp	r2, #2
   b7e4c:	d003      	beq.n	b7e56 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b7e4e:	2a03      	cmp	r2, #3
   b7e50:	d00d      	beq.n	b7e6e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b7e52:	2000      	movs	r0, #0
   b7e54:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b7e56:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b7e58:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7e5a:	f7fc f91c 	bl	b4096 <_Znwj>
   b7e5e:	4603      	mov	r3, r0
   b7e60:	2800      	cmp	r0, #0
   b7e62:	d0f0      	beq.n	b7e46 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b7e64:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7e68:	e883 0003 	stmia.w	r3, {r0, r1}
   b7e6c:	e7eb      	b.n	b7e46 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b7e6e:	6800      	ldr	r0, [r0, #0]
   b7e70:	2800      	cmp	r0, #0
   b7e72:	d0ee      	beq.n	b7e52 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b7e74:	2108      	movs	r1, #8
   b7e76:	f7fc f914 	bl	b40a2 <_ZdlPvj>
   b7e7a:	e7ea      	b.n	b7e52 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b7e7c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b7e7c:	b510      	push	{r4, lr}
      if (_M_manager)
   b7e7e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b7e80:	4604      	mov	r4, r0
      if (_M_manager)
   b7e82:	b113      	cbz	r3, b7e8a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7e84:	2203      	movs	r2, #3
   b7e86:	4601      	mov	r1, r0
   b7e88:	4798      	blx	r3
    }
   b7e8a:	4620      	mov	r0, r4
   b7e8c:	bd10      	pop	{r4, pc}

000b7e8e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7e8e:	b510      	push	{r4, lr}
   b7e90:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b7e92:	3058      	adds	r0, #88	; 0x58
   b7e94:	f7ff fff2 	bl	b7e7c <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b7e98:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b7e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7ea0:	f001 bb26 	b.w	b94f0 <_ZN6StringD1Ev>

000b7ea4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b7ea4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b7ea6:	6843      	ldr	r3, [r0, #4]
   b7ea8:	3b01      	subs	r3, #1
    {
   b7eaa:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b7eac:	6043      	str	r3, [r0, #4]
   b7eae:	b963      	cbnz	r3, b7eca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b7eb0:	6803      	ldr	r3, [r0, #0]
   b7eb2:	689b      	ldr	r3, [r3, #8]
   b7eb4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7eb6:	68a3      	ldr	r3, [r4, #8]
   b7eb8:	3b01      	subs	r3, #1
   b7eba:	60a3      	str	r3, [r4, #8]
   b7ebc:	b92b      	cbnz	r3, b7eca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b7ebe:	6823      	ldr	r3, [r4, #0]
   b7ec0:	4620      	mov	r0, r4
   b7ec2:	68db      	ldr	r3, [r3, #12]
    }
   b7ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b7ec8:	4718      	bx	r3
    }
   b7eca:	bd10      	pop	{r4, pc}

000b7ecc <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b7ecc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7ed0:	b2da      	uxtb	r2, r3
   b7ed2:	2a09      	cmp	r2, #9
   b7ed4:	d801      	bhi.n	b7eda <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b7ed6:	4618      	mov	r0, r3
   b7ed8:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b7eda:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b7ede:	2b05      	cmp	r3, #5
   b7ee0:	d801      	bhi.n	b7ee6 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b7ee2:	3857      	subs	r0, #87	; 0x57
   b7ee4:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b7ee6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b7eea:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b7eec:	bf94      	ite	ls
   b7eee:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b7ef0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b7ef4:	4770      	bx	lr
	...

000b7ef8 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b7ef8:	b510      	push	{r4, lr}
            locked_(false) {
   b7efa:	2300      	movs	r3, #0
   b7efc:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b7efe:	4b04      	ldr	r3, [pc, #16]	; (b7f10 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b7f00:	4604      	mov	r4, r0
   b7f02:	6818      	ldr	r0, [r3, #0]
   b7f04:	f7ff fccc 	bl	b78a0 <os_mutex_recursive_lock>
        locked_ = true;
   b7f08:	2301      	movs	r3, #1
   b7f0a:	7023      	strb	r3, [r4, #0]
    }
   b7f0c:	4620      	mov	r0, r4
   b7f0e:	bd10      	pop	{r4, pc}
   b7f10:	2003e6c0 	.word	0x2003e6c0

000b7f14 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b7f14:	b510      	push	{r4, lr}
        if (locked_) {
   b7f16:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b7f18:	4604      	mov	r4, r0
        if (locked_) {
   b7f1a:	b11b      	cbz	r3, b7f24 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7f1c:	4b02      	ldr	r3, [pc, #8]	; (b7f28 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b7f1e:	6818      	ldr	r0, [r3, #0]
   b7f20:	f7ff fcc6 	bl	b78b0 <os_mutex_recursive_unlock>
    }
   b7f24:	4620      	mov	r0, r4
   b7f26:	bd10      	pop	{r4, pc}
   b7f28:	2003e6c0 	.word	0x2003e6c0

000b7f2c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b7f2c:	b082      	sub	sp, #8
   b7f2e:	4603      	mov	r3, r0
    address_ = addr;
   b7f30:	6808      	ldr	r0, [r1, #0]
   b7f32:	6849      	ldr	r1, [r1, #4]
   b7f34:	466a      	mov	r2, sp
   b7f36:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b7f38:	466a      	mov	r2, sp
   b7f3a:	ca03      	ldmia	r2!, {r0, r1}
   b7f3c:	6018      	str	r0, [r3, #0]
}
   b7f3e:	4618      	mov	r0, r3
    address_ = addr.address_;
   b7f40:	6059      	str	r1, [r3, #4]
}
   b7f42:	b002      	add	sp, #8
   b7f44:	4770      	bx	lr

000b7f46 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b7f46:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b7f48:	7982      	ldrb	r2, [r0, #6]
   b7f4a:	798b      	ldrb	r3, [r1, #6]
   b7f4c:	429a      	cmp	r2, r3
   b7f4e:	d106      	bne.n	b7f5e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b7f50:	2206      	movs	r2, #6
   b7f52:	f003 f96f 	bl	bb234 <memcmp>
   b7f56:	fab0 f080 	clz	r0, r0
   b7f5a:	0940      	lsrs	r0, r0, #5
}
   b7f5c:	bd08      	pop	{r3, pc}
    return false;
   b7f5e:	2000      	movs	r0, #0
   b7f60:	e7fc      	b.n	b7f5c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b7f62 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b7f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7f66:	6003      	str	r3, [r0, #0]
   b7f68:	8083      	strh	r3, [r0, #4]
}
   b7f6a:	2000      	movs	r0, #0
   b7f6c:	4770      	bx	lr

000b7f6e <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b7f6e:	b508      	push	{r3, lr}
   b7f70:	4602      	mov	r2, r0
        : address_{} {
   b7f72:	2100      	movs	r1, #0
   b7f74:	6001      	str	r1, [r0, #0]
   b7f76:	6041      	str	r1, [r0, #4]
    clear();
   b7f78:	f7ff fff3 	bl	b7f62 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b7f7c:	7191      	strb	r1, [r2, #6]
}
   b7f7e:	4610      	mov	r0, r2
   b7f80:	bd08      	pop	{r3, pc}
	...

000b7f84 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b7f84:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b7f86:	2301      	movs	r3, #1
   b7f88:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7f8a:	4b05      	ldr	r3, [pc, #20]	; (b7fa0 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b7f8c:	4602      	mov	r2, r0
   b7f8e:	f103 0110 	add.w	r1, r3, #16
   b7f92:	f853 4b04 	ldr.w	r4, [r3], #4
   b7f96:	f842 4b04 	str.w	r4, [r2], #4
   b7f9a:	428b      	cmp	r3, r1
   b7f9c:	d1f9      	bne.n	b7f92 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b7f9e:	bd10      	pop	{r4, pc}
   b7fa0:	000bd9b6 	.word	0x000bd9b6

000b7fa4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7fa4:	b510      	push	{r4, lr}
    if (uuid128) {
   b7fa6:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7fa8:	4604      	mov	r4, r0
    if (uuid128) {
   b7faa:	b1b1      	cbz	r1, b7fda <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b7fac:	2a01      	cmp	r2, #1
   b7fae:	f101 0210 	add.w	r2, r1, #16
   b7fb2:	d10a      	bne.n	b7fca <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7fb4:	4601      	mov	r1, r0
   b7fb6:	f853 0b04 	ldr.w	r0, [r3], #4
   b7fba:	f841 0b04 	str.w	r0, [r1], #4
   b7fbe:	4293      	cmp	r3, r2
   b7fc0:	d1f9      	bne.n	b7fb6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b7fc2:	2301      	movs	r3, #1
   b7fc4:	6123      	str	r3, [r4, #16]
}
   b7fc6:	4620      	mov	r0, r4
   b7fc8:	bd10      	pop	{r4, pc}
   b7fca:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b7fcc:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b7fd0:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b7fd4:	429a      	cmp	r2, r3
   b7fd6:	d1f9      	bne.n	b7fcc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b7fd8:	e7f3      	b.n	b7fc2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b7fda:	2210      	movs	r2, #16
   b7fdc:	f003 f962 	bl	bb2a4 <memset>
   b7fe0:	e7f1      	b.n	b7fc6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b7fe2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b7fe2:	b538      	push	{r3, r4, r5, lr}
   b7fe4:	4604      	mov	r4, r0
   b7fe6:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b7fe8:	461a      	mov	r2, r3
   b7fea:	f7ff ffdb 	bl	b7fa4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b7fee:	81a5      	strh	r5, [r4, #12]
}
   b7ff0:	4620      	mov	r0, r4
   b7ff2:	bd38      	pop	{r3, r4, r5, pc}

000b7ff4 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b7ff4:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b7ff6:	6902      	ldr	r2, [r0, #16]
   b7ff8:	b922      	cbnz	r2, b8004 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b7ffa:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7ffc:	3800      	subs	r0, #0
   b7ffe:	bf18      	it	ne
   b8000:	2001      	movne	r0, #1
}
   b8002:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8004:	4902      	ldr	r1, [pc, #8]	; (b8010 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b8006:	2210      	movs	r2, #16
   b8008:	f003 f914 	bl	bb234 <memcmp>
   b800c:	e7f6      	b.n	b7ffc <_ZNK8particle7BleUuid7isValidEv+0x8>
   b800e:	bf00      	nop
   b8010:	000bd9d6 	.word	0x000bd9d6

000b8014 <_ZNK8particle7BleUuid4typeEv>:
}
   b8014:	6900      	ldr	r0, [r0, #16]
   b8016:	4770      	bx	lr

000b8018 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b8018:	b538      	push	{r3, r4, r5, lr}
   b801a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b801c:	2214      	movs	r2, #20
   b801e:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b8020:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b8022:	f003 f93f 	bl	bb2a4 <memset>
    if (type_ == BleUuidType::SHORT) {
   b8026:	6923      	ldr	r3, [r4, #16]
   b8028:	b91b      	cbnz	r3, b8032 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b802a:	89a3      	ldrh	r3, [r4, #12]
   b802c:	802b      	strh	r3, [r5, #0]
}
   b802e:	4628      	mov	r0, r5
   b8030:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b8032:	2301      	movs	r3, #1
   b8034:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b8036:	4621      	mov	r1, r4
   b8038:	462b      	mov	r3, r5
   b803a:	f104 0210 	add.w	r2, r4, #16
   b803e:	f851 0b04 	ldr.w	r0, [r1], #4
   b8042:	f843 0b04 	str.w	r0, [r3], #4
   b8046:	4291      	cmp	r1, r2
   b8048:	d1f9      	bne.n	b803e <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b804a:	e7f0      	b.n	b802e <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b804c <_ZNK8particle7BleUuid7shortedEv>:
}
   b804c:	8980      	ldrh	r0, [r0, #12]
   b804e:	4770      	bx	lr

000b8050 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b8050:	4770      	bx	lr

000b8052 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b8052:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b8054:	6902      	ldr	r2, [r0, #16]
   b8056:	690b      	ldr	r3, [r1, #16]
   b8058:	429a      	cmp	r2, r3
   b805a:	d106      	bne.n	b806a <_ZNK8particle7BleUuideqERKS0_+0x18>
   b805c:	2210      	movs	r2, #16
   b805e:	f003 f8e9 	bl	bb234 <memcmp>
   b8062:	fab0 f080 	clz	r0, r0
   b8066:	0940      	lsrs	r0, r0, #5
}
   b8068:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b806a:	2000      	movs	r0, #0
   b806c:	e7fc      	b.n	b8068 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b8070 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b8070:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b8072:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b8076:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8078:	4b34      	ldr	r3, [pc, #208]	; (b814c <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b807a:	460c      	mov	r4, r1
   b807c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b807e:	4602      	mov	r2, r0
   b8080:	f103 0110 	add.w	r1, r3, #16
   b8084:	f853 0b04 	ldr.w	r0, [r3], #4
   b8088:	f842 0b04 	str.w	r0, [r2], #4
   b808c:	428b      	cmp	r3, r1
   b808e:	d1f9      	bne.n	b8084 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b8090:	b344      	cbz	r4, b80e4 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b8092:	2124      	movs	r1, #36	; 0x24
   b8094:	4620      	mov	r0, r4
   b8096:	f003 f969 	bl	bb36c <strnlen>
   b809a:	2804      	cmp	r0, #4
   b809c:	f04f 0500 	mov.w	r5, #0
   b80a0:	d123      	bne.n	b80ea <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b80a2:	f8ad 5004 	strh.w	r5, [sp, #4]
   b80a6:	af01      	add	r7, sp, #4
   b80a8:	1ca5      	adds	r5, r4, #2
   b80aa:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b80ac:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b80b0:	f7ff ff0c 	bl	b7ecc <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b80b4:	f1b0 0800 	subs.w	r8, r0, #0
   b80b8:	db12      	blt.n	b80e0 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b80ba:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b80be:	f7ff ff05 	bl	b7ecc <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b80c2:	2800      	cmp	r0, #0
   b80c4:	db0c      	blt.n	b80e0 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b80c6:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b80c8:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b80cc:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b80ce:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b80d2:	d1eb      	bne.n	b80ac <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b80d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b80d8:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b80da:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b80de:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b80e0:	2300      	movs	r3, #0
   b80e2:	6133      	str	r3, [r6, #16]
}
   b80e4:	b002      	add	sp, #8
   b80e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b80ea:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b80ee:	2124      	movs	r1, #36	; 0x24
   b80f0:	4620      	mov	r0, r4
   b80f2:	f003 f93b 	bl	bb36c <strnlen>
   b80f6:	42a8      	cmp	r0, r5
   b80f8:	d807      	bhi.n	b810a <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b80fa:	4642      	mov	r2, r8
   b80fc:	2100      	movs	r1, #0
   b80fe:	4630      	mov	r0, r6
}
   b8100:	b002      	add	sp, #8
   b8102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b8106:	f003 b8cd 	b.w	bb2a4 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b810a:	f1b8 0f00 	cmp.w	r8, #0
   b810e:	d0e9      	beq.n	b80e4 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b8110:	5d60      	ldrb	r0, [r4, r5]
   b8112:	f7ff fedb 	bl	b7ecc <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b8116:	0603      	lsls	r3, r0, #24
   b8118:	d415      	bmi.n	b8146 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b811a:	0100      	lsls	r0, r0, #4
   b811c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8120:	b2c7      	uxtb	r7, r0
   b8122:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b8126:	2124      	movs	r1, #36	; 0x24
   b8128:	4620      	mov	r0, r4
   b812a:	f003 f91f 	bl	bb36c <strnlen>
   b812e:	3501      	adds	r5, #1
   b8130:	42a8      	cmp	r0, r5
   b8132:	d908      	bls.n	b8146 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b8134:	5d60      	ldrb	r0, [r4, r5]
   b8136:	f7ff fec9 	bl	b7ecc <_ZN8particle11hexToNibbleEc>
   b813a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b813c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b813e:	bfa4      	itt	ge
   b8140:	4338      	orrge	r0, r7
   b8142:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8146:	3501      	adds	r5, #1
   b8148:	e7d1      	b.n	b80ee <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b814a:	bf00      	nop
   b814c:	000bd9b6 	.word	0x000bd9b6

000b8150 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b8150:	b513      	push	{r0, r1, r4, lr}
   b8152:	4604      	mov	r4, r0
   b8154:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b8156:	f7ff ff15 	bl	b7f84 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b815a:	4620      	mov	r0, r4
   b815c:	9901      	ldr	r1, [sp, #4]
   b815e:	f7ff ff87 	bl	b8070 <_ZN8particle7BleUuid9constructEPKc>
}
   b8162:	4620      	mov	r0, r4
   b8164:	b002      	add	sp, #8
   b8166:	bd10      	pop	{r4, pc}

000b8168 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b8168:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b816a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b816e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b8170:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b8172:	8043      	strh	r3, [r0, #2]
   b8174:	220e      	movs	r2, #14
   b8176:	4629      	mov	r1, r5
   b8178:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b817a:	7105      	strb	r5, [r0, #4]
   b817c:	3006      	adds	r0, #6
   b817e:	f003 f891 	bl	bb2a4 <memset>
   b8182:	f104 0014 	add.w	r0, r4, #20
   b8186:	f7ff fefd 	bl	b7f84 <_ZN8particle7BleUuidC1Ev>
   b818a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b818e:	f7ff fef9 	bl	b7f84 <_ZN8particle7BleUuidC1Ev>
   b8192:	4904      	ldr	r1, [pc, #16]	; (b81a4 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b8194:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8198:	f001 f9f5 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b819c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b819e:	4620      	mov	r0, r4
   b81a0:	bd38      	pop	{r3, r4, r5, pc}
   b81a2:	bf00      	nop
   b81a4:	000bd7d2 	.word	0x000bd7d2

000b81a8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b81a8:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b81aa:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b81ae:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b81b2:	4293      	cmp	r3, r2
   b81b4:	4618      	mov	r0, r3
   b81b6:	d006      	beq.n	b81c6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b81b8:	6804      	ldr	r4, [r0, #0]
   b81ba:	8824      	ldrh	r4, [r4, #0]
   b81bc:	428c      	cmp	r4, r1
   b81be:	f103 0308 	add.w	r3, r3, #8
   b81c2:	d1f6      	bne.n	b81b2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b81c4:	bd10      	pop	{r4, pc}
        return nullptr;
   b81c6:	2000      	movs	r0, #0
   b81c8:	e7fc      	b.n	b81c4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b81cc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b81cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b81d0:	2600      	movs	r6, #0
   b81d2:	6006      	str	r6, [r0, #0]
   b81d4:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b81d6:	2028      	movs	r0, #40	; 0x28
   b81d8:	460c      	mov	r4, r1
   b81da:	f7fb ff5c 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b81de:	1e05      	subs	r5, r0, #0
   b81e0:	f105 080c 	add.w	r8, r5, #12
   b81e4:	d00f      	beq.n	b8206 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b81e6:	2301      	movs	r3, #1
   b81e8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b81ec:	4b08      	ldr	r3, [pc, #32]	; (b8210 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b81ee:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b81f0:	4640      	mov	r0, r8
   b81f2:	f7ff fec7 	bl	b7f84 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b81f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b81f8:	622e      	str	r6, [r5, #32]
   b81fa:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b81fe:	4646      	mov	r6, r8
   b8200:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b8202:	6823      	ldr	r3, [r4, #0]
   b8204:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b8206:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b820a:	4638      	mov	r0, r7
   b820c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8210:	000bd978 	.word	0x000bd978

000b8214 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b8214:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8216:	2500      	movs	r5, #0
   b8218:	6005      	str	r5, [r0, #0]
   b821a:	4606      	mov	r6, r0
   b821c:	2030      	movs	r0, #48	; 0x30
   b821e:	f7fb ff3a 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8222:	4604      	mov	r4, r0
   b8224:	b188      	cbz	r0, b824a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b8226:	2301      	movs	r3, #1
   b8228:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b822c:	4b09      	ldr	r3, [pc, #36]	; (b8254 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b822e:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b8230:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8234:	8183      	strh	r3, [r0, #12]
   b8236:	300e      	adds	r0, #14
   b8238:	f7ff fe99 	bl	b7f6e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b823c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b8240:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b8244:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b8248:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b824a:	6074      	str	r4, [r6, #4]
   b824c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b824e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b8250:	4630      	mov	r0, r6
   b8252:	bd70      	pop	{r4, r5, r6, pc}
   b8254:	000bd994 	.word	0x000bd994

000b8258 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b8258:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b825a:	460d      	mov	r5, r1
   b825c:	4604      	mov	r4, r0
    WiringBleLock lk;
   b825e:	a801      	add	r0, sp, #4
   b8260:	f7ff fe4a 	bl	b7ef8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8264:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b8266:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b826a:	6023      	str	r3, [r4, #0]
   b826c:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b8270:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b8272:	a801      	add	r0, sp, #4
   b8274:	f7ff fe4e 	bl	b7f14 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b8278:	4620      	mov	r0, r4
   b827a:	b003      	add	sp, #12
   b827c:	bd30      	pop	{r4, r5, pc}

000b827e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b827e:	b530      	push	{r4, r5, lr}
   b8280:	4605      	mov	r5, r0
   b8282:	b087      	sub	sp, #28
   b8284:	460c      	mov	r4, r1
    WiringBleLock lk;
   b8286:	a801      	add	r0, sp, #4
   b8288:	f7ff fe36 	bl	b7ef8 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b828c:	682a      	ldr	r2, [r5, #0]
   b828e:	6823      	ldr	r3, [r4, #0]
   b8290:	8812      	ldrh	r2, [r2, #0]
   b8292:	881b      	ldrh	r3, [r3, #0]
   b8294:	429a      	cmp	r2, r3
   b8296:	d10d      	bne.n	b82b4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b8298:	4629      	mov	r1, r5
   b829a:	a802      	add	r0, sp, #8
   b829c:	f7ff ffdc 	bl	b8258 <_ZNK8particle13BlePeerDevice7addressEv>
   b82a0:	4621      	mov	r1, r4
   b82a2:	a804      	add	r0, sp, #16
   b82a4:	f7ff ffd8 	bl	b8258 <_ZNK8particle13BlePeerDevice7addressEv>
   b82a8:	a904      	add	r1, sp, #16
   b82aa:	a802      	add	r0, sp, #8
   b82ac:	f7ff fe4b 	bl	b7f46 <_ZNK8particle10BleAddresseqERKS0_>
   b82b0:	4604      	mov	r4, r0
   b82b2:	b900      	cbnz	r0, b82b6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b82b4:	2400      	movs	r4, #0
    WiringBleLock lk;
   b82b6:	a801      	add	r0, sp, #4
   b82b8:	f7ff fe2c 	bl	b7f14 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b82bc:	4620      	mov	r0, r4
   b82be:	b007      	add	sp, #28
   b82c0:	bd30      	pop	{r4, r5, pc}
	...

000b82c4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b82c4:	b510      	push	{r4, lr}
   b82c6:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b82c8:	2064      	movs	r0, #100	; 0x64
   b82ca:	f7fb fee4 	bl	b4096 <_Znwj>
   b82ce:	b168      	cbz	r0, b82ec <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b82d0:	2300      	movs	r3, #0
   b82d2:	e9c0 3300 	strd	r3, r3, [r0]
   b82d6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b82da:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b82de:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b82e2:	6203      	str	r3, [r0, #32]
   b82e4:	62c3      	str	r3, [r0, #44]	; 0x2c
   b82e6:	63c3      	str	r3, [r0, #60]	; 0x3c
   b82e8:	64c3      	str	r3, [r0, #76]	; 0x4c
   b82ea:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b82ec:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b82ee:	b920      	cbnz	r0, b82fa <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b82f0:	4a0a      	ldr	r2, [pc, #40]	; (b831c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b82f2:	490b      	ldr	r1, [pc, #44]	; (b8320 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b82f4:	200a      	movs	r0, #10
   b82f6:	f7ff fc1b 	bl	b7b30 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b82fa:	2000      	movs	r0, #0
   b82fc:	f7ff fa80 	bl	b7800 <hal_ble_stack_init>
   b8300:	b120      	cbz	r0, b830c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b8302:	4a06      	ldr	r2, [pc, #24]	; (b831c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b8304:	4907      	ldr	r1, [pc, #28]	; (b8324 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b8306:	200a      	movs	r0, #10
   b8308:	f7ff fc12 	bl	b7b30 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b830c:	6821      	ldr	r1, [r4, #0]
   b830e:	4806      	ldr	r0, [pc, #24]	; (b8328 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b8310:	2200      	movs	r2, #0
   b8312:	f7ff fab3 	bl	b787c <hal_ble_set_callback_on_periph_link_events>
}
   b8316:	4620      	mov	r0, r4
   b8318:	bd10      	pop	{r4, pc}
   b831a:	bf00      	nop
   b831c:	000b78d1 	.word	0x000b78d1
   b8320:	000bd808 	.word	0x000bd808
   b8324:	000bd846 	.word	0x000bd846
   b8328:	000b88ad 	.word	0x000b88ad

000b832c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b832c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b832e:	4c0a      	ldr	r4, [pc, #40]	; (b8358 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b8330:	7823      	ldrb	r3, [r4, #0]
   b8332:	f3bf 8f5b 	dmb	ish
   b8336:	07db      	lsls	r3, r3, #31
   b8338:	d40c      	bmi.n	b8354 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b833a:	4620      	mov	r0, r4
   b833c:	f7fb feb3 	bl	b40a6 <__cxa_guard_acquire>
   b8340:	b140      	cbz	r0, b8354 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b8342:	4806      	ldr	r0, [pc, #24]	; (b835c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b8344:	f7ff ffbe 	bl	b82c4 <_ZN8particle14BleLocalDeviceC1Ev>
   b8348:	4620      	mov	r0, r4
   b834a:	f7fb feb1 	bl	b40b0 <__cxa_guard_release>
   b834e:	4804      	ldr	r0, [pc, #16]	; (b8360 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b8350:	f002 ff66 	bl	bb220 <atexit>
    return instance;
}
   b8354:	4801      	ldr	r0, [pc, #4]	; (b835c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b8356:	bd10      	pop	{r4, pc}
   b8358:	2003e6b8 	.word	0x2003e6b8
   b835c:	2003e6c4 	.word	0x2003e6c4
   b8360:	000b8579 	.word	0x000b8579

000b8364 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b8364:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b8366:	6803      	ldr	r3, [r0, #0]
   b8368:	3b09      	subs	r3, #9
   b836a:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b836c:	b08d      	sub	sp, #52	; 0x34
   b836e:	4604      	mov	r4, r0
   b8370:	460d      	mov	r5, r1
    switch (event->type) {
   b8372:	d811      	bhi.n	b8398 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b8374:	f7ff ffda 	bl	b832c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b8378:	88a1      	ldrh	r1, [r4, #4]
   b837a:	6800      	ldr	r0, [r0, #0]
   b837c:	f7ff ff14 	bl	b81a8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b8380:	4603      	mov	r3, r0
   b8382:	b958      	cbnz	r0, b839c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b8384:	2220      	movs	r2, #32
   b8386:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b838a:	4a0b      	ldr	r2, [pc, #44]	; (b83b8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b838c:	9200      	str	r2, [sp, #0]
   b838e:	490b      	ldr	r1, [pc, #44]	; (b83bc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b8390:	aa04      	add	r2, sp, #16
   b8392:	2032      	movs	r0, #50	; 0x32
   b8394:	f7ff fbd4 	bl	b7b40 <log_message>
}
   b8398:	b00d      	add	sp, #52	; 0x34
   b839a:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b839c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b839e:	2a00      	cmp	r2, #0
   b83a0:	d0fa      	beq.n	b8398 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b83a2:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b83a6:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b83aa:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b83ae:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b83b0:	aa04      	add	r2, sp, #16
   b83b2:	a903      	add	r1, sp, #12
   b83b4:	47a0      	blx	r4
}
   b83b6:	e7ef      	b.n	b8398 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b83b8:	000bd888 	.word	0x000bd888
   b83bc:	000bd81f 	.word	0x000bd81f

000b83c0 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b83c0:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b83c2:	2000      	movs	r0, #0
   b83c4:	f7ff fa1c 	bl	b7800 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b83c8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b83cc:	bd08      	pop	{r3, pc}

000b83ce <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b83ce:	b919      	cbnz	r1, b83d8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b83d0:	460a      	mov	r2, r1
   b83d2:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b83d4:	f7ff ba1c 	b.w	b7810 <hal_ble_gap_set_advertising_data>
   b83d8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b83dc:	2200      	movs	r2, #0
   b83de:	e7f9      	b.n	b83d4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b83e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b83e0:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b83e2:	1e14      	subs	r4, r2, #0
   b83e4:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b83e6:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b83e8:	db02      	blt.n	b83f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b83ea:	1862      	adds	r2, r4, r1
   b83ec:	429a      	cmp	r2, r3
   b83ee:	dd00      	ble.n	b83f2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b83f0:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b83f2:	682a      	ldr	r2, [r5, #0]
   b83f4:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b83f6:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b83f8:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b83fa:	1a52      	subs	r2, r2, r1
   b83fc:	f002 ff38 	bl	bb270 <memmove>
    size_ -= n;
   b8400:	686a      	ldr	r2, [r5, #4]
   b8402:	1b12      	subs	r2, r2, r4
   b8404:	606a      	str	r2, [r5, #4]
}
   b8406:	bd38      	pop	{r3, r4, r5, pc}

000b8408 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b8408:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b840a:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b840c:	4604      	mov	r4, r0
   b840e:	460d      	mov	r5, r1
   b8410:	ab01      	add	r3, sp, #4
   b8412:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8416:	f7ff fce5 	bl	b7de4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b841a:	4602      	mov	r2, r0
   b841c:	b138      	cbz	r0, b842e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b841e:	9901      	ldr	r1, [sp, #4]
   b8420:	4620      	mov	r0, r4
   b8422:	f7ff ffdd 	bl	b83e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b8426:	4629      	mov	r1, r5
   b8428:	4620      	mov	r0, r4
   b842a:	f7ff ffed 	bl	b8408 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b842e:	b003      	add	sp, #12
   b8430:	bd30      	pop	{r4, r5, pc}

000b8432 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b8432:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b8434:	460c      	mov	r4, r1
   b8436:	b929      	cbnz	r1, b8444 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b8438:	460a      	mov	r2, r1
   b843a:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b843c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b8440:	f7ff b9ee 	b.w	b7820 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b8444:	2101      	movs	r1, #1
   b8446:	4620      	mov	r0, r4
   b8448:	f7ff ffde 	bl	b8408 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b844c:	e9d4 0100 	ldrd	r0, r1, [r4]
   b8450:	2200      	movs	r2, #0
   b8452:	e7f3      	b.n	b843c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b8454 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b8454:	b538      	push	{r3, r4, r5, lr}
   b8456:	4604      	mov	r4, r0
   b8458:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b845a:	f7ff ffb8 	bl	b83ce <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b845e:	2800      	cmp	r0, #0
   b8460:	db0a      	blt.n	b8478 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b8462:	4629      	mov	r1, r5
   b8464:	4620      	mov	r0, r4
   b8466:	f7ff ffe4 	bl	b8432 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b846a:	2800      	cmp	r0, #0
   b846c:	db04      	blt.n	b8478 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b846e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b8472:	2000      	movs	r0, #0
   b8474:	f7ff b9dc 	b.w	b7830 <hal_ble_gap_start_advertising>
}
   b8478:	bd38      	pop	{r3, r4, r5, pc}
	...

000b847c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b847c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b847e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b8480:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b8482:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8484:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b8486:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8488:	f7fb fe05 	bl	b4096 <_Znwj>
   b848c:	b118      	cbz	r0, b8496 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b848e:	682b      	ldr	r3, [r5, #0]
   b8490:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8492:	686b      	ldr	r3, [r5, #4]
   b8494:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b8496:	4b03      	ldr	r3, [pc, #12]	; (b84a4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b8498:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b849a:	4b03      	ldr	r3, [pc, #12]	; (b84a8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b849c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b849e:	60a3      	str	r3, [r4, #8]
      }
   b84a0:	4620      	mov	r0, r4
   b84a2:	bd38      	pop	{r3, r4, r5, pc}
   b84a4:	000b7e25 	.word	0x000b7e25
   b84a8:	000b7e3d 	.word	0x000b7e3d

000b84ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b84ac:	680b      	ldr	r3, [r1, #0]
   b84ae:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b84b0:	b113      	cbz	r3, b84b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b84b2:	685a      	ldr	r2, [r3, #4]
   b84b4:	3201      	adds	r2, #1
   b84b6:	605a      	str	r2, [r3, #4]
      }
   b84b8:	4770      	bx	lr

000b84ba <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b84ba:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b84bc:	f851 3b04 	ldr.w	r3, [r1], #4
   b84c0:	4604      	mov	r4, r0
   b84c2:	f840 3b04 	str.w	r3, [r0], #4
   b84c6:	f7ff fff1 	bl	b84ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b84ca:	6823      	ldr	r3, [r4, #0]
   b84cc:	b90b      	cbnz	r3, b84d2 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b84ce:	f7ff fc9f 	bl	b7e10 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b84d2:	4620      	mov	r0, r4
   b84d4:	bd10      	pop	{r4, pc}

000b84d6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b84d6:	b510      	push	{r4, lr}
   b84d8:	f851 3b04 	ldr.w	r3, [r1], #4
   b84dc:	4604      	mov	r4, r0
   b84de:	f840 3b04 	str.w	r3, [r0], #4
   b84e2:	f7ff ffe3 	bl	b84ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b84e6:	4620      	mov	r0, r4
   b84e8:	bd10      	pop	{r4, pc}

000b84ea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b84ea:	b510      	push	{r4, lr}
   b84ec:	f851 3b04 	ldr.w	r3, [r1], #4
   b84f0:	4604      	mov	r4, r0
   b84f2:	f840 3b04 	str.w	r3, [r0], #4
   b84f6:	f7ff ffd9 	bl	b84ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b84fa:	4620      	mov	r0, r4
   b84fc:	bd10      	pop	{r4, pc}

000b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b84fe:	b510      	push	{r4, lr}
   b8500:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b8502:	6800      	ldr	r0, [r0, #0]
   b8504:	b108      	cbz	r0, b850a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b8506:	f7ff fccd 	bl	b7ea4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b850a:	4620      	mov	r0, r4
   b850c:	bd10      	pop	{r4, pc}

000b850e <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b850e:	b510      	push	{r4, lr}
   b8510:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8512:	3004      	adds	r0, #4
   b8514:	f7ff fff3 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8518:	4620      	mov	r0, r4
   b851a:	bd10      	pop	{r4, pc}

000b851c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b851c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b851e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8522:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8524:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8528:	42ae      	cmp	r6, r5
   b852a:	d004      	beq.n	b8536 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b852c:	1d28      	adds	r0, r5, #4
   b852e:	f7ff ffe6 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8532:	3508      	adds	r5, #8
   b8534:	e7f8      	b.n	b8528 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8536:	6820      	ldr	r0, [r4, #0]
   b8538:	f7ff fbb6 	bl	b7ca8 <free>
}
   b853c:	4620      	mov	r0, r4
   b853e:	bd70      	pop	{r4, r5, r6, pc}

000b8540 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8540:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8542:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8546:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8548:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b854c:	42ae      	cmp	r6, r5
   b854e:	d004      	beq.n	b855a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b8550:	1d28      	adds	r0, r5, #4
   b8552:	f7ff ffd4 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8556:	3508      	adds	r5, #8
   b8558:	e7f8      	b.n	b854c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b855a:	6820      	ldr	r0, [r4, #0]
   b855c:	f7ff fba4 	bl	b7ca8 <free>
}
   b8560:	4620      	mov	r0, r4
   b8562:	bd70      	pop	{r4, r5, r6, pc}

000b8564 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8564:	b510      	push	{r4, lr}
   b8566:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b8568:	3024      	adds	r0, #36	; 0x24
   b856a:	f7ff ffe9 	bl	b8540 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b856e:	f104 0018 	add.w	r0, r4, #24
   b8572:	f7ff ffd3 	bl	b851c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b8576:	bd10      	pop	{r4, pc}

000b8578 <__tcf_0>:
    static BleLocalDevice instance;
   b8578:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b857a:	4b17      	ldr	r3, [pc, #92]	; (b85d8 <__tcf_0+0x60>)
   b857c:	681c      	ldr	r4, [r3, #0]
   b857e:	b354      	cbz	r4, b85d6 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b8580:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8584:	f7ff fc7a 	bl	b7e7c <_ZNSt14_Function_baseD1Ev>
   b8588:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b858c:	f7ff fc76 	bl	b7e7c <_ZNSt14_Function_baseD1Ev>
   b8590:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8594:	f7ff fc72 	bl	b7e7c <_ZNSt14_Function_baseD1Ev>
   b8598:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b859c:	f7ff fc6e 	bl	b7e7c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b85a0:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b85a4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b85a8:	42ae      	cmp	r6, r5
   b85aa:	d004      	beq.n	b85b6 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b85ac:	1d28      	adds	r0, r5, #4
   b85ae:	f7ff ffa6 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b85b2:	3508      	adds	r5, #8
   b85b4:	e7f8      	b.n	b85a8 <__tcf_0+0x30>
    ::free(ptr);
   b85b6:	69a0      	ldr	r0, [r4, #24]
   b85b8:	f7ff fb76 	bl	b7ca8 <free>
    ~BleLocalDeviceImpl() = default;
   b85bc:	f104 000c 	add.w	r0, r4, #12
   b85c0:	f7ff ffbe 	bl	b8540 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b85c4:	4620      	mov	r0, r4
   b85c6:	f7ff ffa9 	bl	b851c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b85ca:	4620      	mov	r0, r4
   b85cc:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b85ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b85d2:	f7fb bd66 	b.w	b40a2 <_ZdlPvj>
   b85d6:	bd70      	pop	{r4, r5, r6, pc}
   b85d8:	2003e6c4 	.word	0x2003e6c4

000b85dc <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b85dc:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b85de:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b85e0:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b85e4:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b85e8:	6803      	ldr	r3, [r0, #0]
   b85ea:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b85ec:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b85ee:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b85f0:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b85f2:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b85f4:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b85f6:	f7ff ff82 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b85fa:	b002      	add	sp, #8
   b85fc:	bd10      	pop	{r4, pc}

000b85fe <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b85fe:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8600:	b510      	push	{r4, lr}
      if (_M_empty())
   b8602:	b90a      	cbnz	r2, b8608 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b8604:	f001 fe47 	bl	ba296 <_ZSt25__throw_bad_function_callv>
    }
   b8608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b860c:	68c3      	ldr	r3, [r0, #12]
   b860e:	4718      	bx	r3

000b8610 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b8610:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b8612:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b8614:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b8616:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8618:	dd03      	ble.n	b8622 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b861a:	f7ff fb4d 	bl	b7cb8 <realloc>
            if (!d) {
   b861e:	b918      	cbnz	r0, b8628 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b8620:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b8622:	f7ff fb41 	bl	b7ca8 <free>
        T* d = nullptr;
   b8626:	2000      	movs	r0, #0
        data_ = d;
   b8628:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b862a:	60a5      	str	r5, [r4, #8]
        return true;
   b862c:	2001      	movs	r0, #1
   b862e:	e7f7      	b.n	b8620 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b8630 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b8630:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b8632:	6883      	ldr	r3, [r0, #8]
   b8634:	428b      	cmp	r3, r1
   b8636:	da02      	bge.n	b863e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b8638:	f7ff ffea 	bl	b8610 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b863c:	bd08      	pop	{r3, pc}
    return true;
   b863e:	2001      	movs	r0, #1
   b8640:	e7fc      	b.n	b863c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b8642 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8646:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8648:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b864a:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b864c:	4419      	add	r1, r3
   b864e:	6883      	ldr	r3, [r0, #8]
   b8650:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8652:	4604      	mov	r4, r0
   b8654:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8656:	dc12      	bgt.n	b867e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b8658:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b865a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b865c:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b865e:	1bd2      	subs	r2, r2, r7
   b8660:	4631      	mov	r1, r6
   b8662:	1970      	adds	r0, r6, r5
   b8664:	f002 fe04 	bl	bb270 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b8668:	462a      	mov	r2, r5
   b866a:	4641      	mov	r1, r8
   b866c:	4630      	mov	r0, r6
   b866e:	f002 fdf1 	bl	bb254 <memcpy>
    size_ += n;
   b8672:	6863      	ldr	r3, [r4, #4]
   b8674:	442b      	add	r3, r5
   b8676:	6063      	str	r3, [r4, #4]
    return true;
   b8678:	2001      	movs	r0, #1
}
   b867a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b867e:	f7ff ffc7 	bl	b8610 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8682:	2800      	cmp	r0, #0
   b8684:	d1e8      	bne.n	b8658 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b8686:	e7f8      	b.n	b867a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b8688 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b868a:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b868c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b8690:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8692:	4604      	mov	r4, r0
   b8694:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8696:	da0b      	bge.n	b86b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b8698:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b869a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b869c:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b869e:	1b52      	subs	r2, r2, r5
   b86a0:	1c48      	adds	r0, r1, #1
   b86a2:	f002 fde5 	bl	bb270 <memmove>
    new(p) T(std::move(value));
   b86a6:	557e      	strb	r6, [r7, r5]
    ++size_;
   b86a8:	6863      	ldr	r3, [r4, #4]
   b86aa:	3301      	adds	r3, #1
   b86ac:	6063      	str	r3, [r4, #4]
}
   b86ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b86b0:	3101      	adds	r1, #1
   b86b2:	f7ff ffad 	bl	b8610 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b86b6:	2800      	cmp	r0, #0
   b86b8:	d1ee      	bne.n	b8698 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b86ba:	e7f8      	b.n	b86ae <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b86bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b86bc:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b86be:	6841      	ldr	r1, [r0, #4]
   b86c0:	f7ff bfe2 	b.w	b8688 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b86c4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b86c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b86c8:	4604      	mov	r4, r0
   b86ca:	461d      	mov	r5, r3
   b86cc:	460f      	mov	r7, r1
   b86ce:	ab01      	add	r3, sp, #4
   b86d0:	4690      	mov	r8, r2
   b86d2:	460a      	mov	r2, r1
   b86d4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b86d8:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b86dc:	f7ff fb82 	bl	b7de4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b86e0:	1cae      	adds	r6, r5, #2
   b86e2:	6863      	ldr	r3, [r4, #4]
   b86e4:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b86e6:	f1b9 0f00 	cmp.w	r9, #0
   b86ea:	d126      	bne.n	b873a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b86ec:	b328      	cbz	r0, b873a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b86ee:	4433      	add	r3, r6
   b86f0:	1a1b      	subs	r3, r3, r0
   b86f2:	2bff      	cmp	r3, #255	; 0xff
   b86f4:	d809      	bhi.n	b870a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b86f6:	9901      	ldr	r1, [sp, #4]
   b86f8:	4620      	mov	r0, r4
   b86fa:	f7ff fe71 	bl	b83e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b86fe:	6861      	ldr	r1, [r4, #4]
   b8700:	4620      	mov	r0, r4
   b8702:	4431      	add	r1, r6
   b8704:	f7ff ff94 	bl	b8630 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8708:	b918      	cbnz	r0, b8712 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b870a:	6860      	ldr	r0, [r4, #4]
}
   b870c:	b003      	add	sp, #12
   b870e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b8712:	1c6a      	adds	r2, r5, #1
   b8714:	9901      	ldr	r1, [sp, #4]
   b8716:	b2d2      	uxtb	r2, r2
   b8718:	4620      	mov	r0, r4
   b871a:	f7ff ffb5 	bl	b8688 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b871e:	9901      	ldr	r1, [sp, #4]
   b8720:	463a      	mov	r2, r7
   b8722:	3101      	adds	r1, #1
   b8724:	4620      	mov	r0, r4
   b8726:	f7ff ffaf 	bl	b8688 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b872a:	9901      	ldr	r1, [sp, #4]
   b872c:	462b      	mov	r3, r5
   b872e:	4642      	mov	r2, r8
   b8730:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b8732:	4620      	mov	r0, r4
   b8734:	f7ff ff85 	bl	b8642 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b8738:	e7e7      	b.n	b870a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b873a:	18f1      	adds	r1, r6, r3
   b873c:	29ff      	cmp	r1, #255	; 0xff
   b873e:	d8e4      	bhi.n	b870a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8740:	4620      	mov	r0, r4
   b8742:	f7ff ff75 	bl	b8630 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8746:	2800      	cmp	r0, #0
   b8748:	d0df      	beq.n	b870a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b874a:	1c69      	adds	r1, r5, #1
   b874c:	b2c9      	uxtb	r1, r1
   b874e:	4620      	mov	r0, r4
   b8750:	f7ff ffb4 	bl	b86bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b8754:	4639      	mov	r1, r7
   b8756:	4620      	mov	r0, r4
   b8758:	f7ff ffb0 	bl	b86bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b875c:	6861      	ldr	r1, [r4, #4]
   b875e:	462b      	mov	r3, r5
   b8760:	4642      	mov	r2, r8
   b8762:	e7e6      	b.n	b8732 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b8764 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8764:	b430      	push	{r4, r5}
   b8766:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b876a:	b11a      	cbz	r2, b8774 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b876c:	9502      	str	r5, [sp, #8]
}
   b876e:	bc30      	pop	{r4, r5}
   b8770:	f7ff bfa8 	b.w	b86c4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b8774:	6840      	ldr	r0, [r0, #4]
}
   b8776:	bc30      	pop	{r4, r5}
   b8778:	4770      	bx	lr

000b877a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b877a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b877c:	2300      	movs	r3, #0
   b877e:	e9c0 3300 	strd	r3, r3, [r0]
   b8782:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8784:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8786:	9300      	str	r3, [sp, #0]
   b8788:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b878a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b878e:	4619      	mov	r1, r3
   b8790:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b8794:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8796:	f7ff ffe5 	bl	b8764 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b879a:	4620      	mov	r0, r4
   b879c:	b004      	add	sp, #16
   b879e:	bd10      	pop	{r4, pc}

000b87a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b87a0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b87a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b87a4:	4604      	mov	r4, r0
   b87a6:	460d      	mov	r5, r1
   b87a8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b87aa:	d914      	bls.n	b87d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b87ac:	4290      	cmp	r0, r2
   b87ae:	d213      	bcs.n	b87d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b87b0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b87b4:	1a75      	subs	r5, r6, r1
   b87b6:	f1a1 0708 	sub.w	r7, r1, #8
   b87ba:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b87bc:	42b7      	cmp	r7, r6
   b87be:	d018      	beq.n	b87f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b87c0:	b11c      	cbz	r4, b87ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b87c2:	4631      	mov	r1, r6
   b87c4:	4620      	mov	r0, r4
   b87c6:	f7ff fe90 	bl	b84ea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b87ca:	1d30      	adds	r0, r6, #4
   b87cc:	f7ff fe97 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b87d0:	3e08      	subs	r6, #8
   b87d2:	3c08      	subs	r4, #8
   b87d4:	e7f2      	b.n	b87bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b87d6:	d00c      	beq.n	b87f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b87d8:	42b5      	cmp	r5, r6
   b87da:	d00a      	beq.n	b87f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b87dc:	b11c      	cbz	r4, b87e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b87de:	4629      	mov	r1, r5
   b87e0:	4620      	mov	r0, r4
   b87e2:	f7ff fe82 	bl	b84ea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b87e6:	1d28      	adds	r0, r5, #4
   b87e8:	f7ff fe89 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b87ec:	3508      	adds	r5, #8
   b87ee:	3408      	adds	r4, #8
   b87f0:	e7f2      	b.n	b87d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b87f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b87f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b87f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b87f6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b87f8:	6846      	ldr	r6, [r0, #4]
   b87fa:	4668      	mov	r0, sp
   b87fc:	f7ff fe75 	bl	b84ea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8800:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b8804:	429f      	cmp	r7, r3
   b8806:	db12      	blt.n	b882e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b8808:	3701      	adds	r7, #1
        if (n > 0) {
   b880a:	2f00      	cmp	r7, #0
   b880c:	dd29      	ble.n	b8862 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b880e:	00f8      	lsls	r0, r7, #3
   b8810:	f7ff fa42 	bl	b7c98 <malloc>
            if (!d) {
   b8814:	4605      	mov	r5, r0
   b8816:	b1f0      	cbz	r0, b8856 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b8818:	e9d4 1200 	ldrd	r1, r2, [r4]
   b881c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8820:	f7ff ffbe 	bl	b87a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8824:	6820      	ldr	r0, [r4, #0]
   b8826:	f7ff fa3f 	bl	b7ca8 <free>
        data_ = d;
   b882a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b882c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b882e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8830:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8832:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b8836:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b883a:	4631      	mov	r1, r6
   b883c:	f106 0008 	add.w	r0, r6, #8
   b8840:	f7ff ffae 	bl	b87a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8844:	b11e      	cbz	r6, b884e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b8846:	4669      	mov	r1, sp
   b8848:	4630      	mov	r0, r6
   b884a:	f7ff fe4e 	bl	b84ea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b884e:	6863      	ldr	r3, [r4, #4]
   b8850:	3301      	adds	r3, #1
   b8852:	6063      	str	r3, [r4, #4]
    return true;
   b8854:	2501      	movs	r5, #1
   b8856:	a801      	add	r0, sp, #4
   b8858:	f7ff fe51 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b885c:	4628      	mov	r0, r5
   b885e:	b003      	add	sp, #12
   b8860:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b8862:	2500      	movs	r5, #0
   b8864:	e7de      	b.n	b8824 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b8866 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b8868:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b886c:	4605      	mov	r5, r0
   b886e:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b8870:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b8874:	42a6      	cmp	r6, r4
   b8876:	d005      	beq.n	b8884 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b8878:	4639      	mov	r1, r7
   b887a:	4620      	mov	r0, r4
   b887c:	f7ff fcff 	bl	b827e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b8880:	b108      	cbz	r0, b8886 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b8882:	b914      	cbnz	r4, b888a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b8884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b8886:	3408      	adds	r4, #8
   b8888:	e7f4      	b.n	b8874 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b888a:	1d20      	adds	r0, r4, #4
   b888c:	f7ff fe37 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b8890:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8894:	f104 0108 	add.w	r1, r4, #8
   b8898:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b889c:	4620      	mov	r0, r4
   b889e:	f7ff ff7f 	bl	b87a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b88a2:	686b      	ldr	r3, [r5, #4]
   b88a4:	3b01      	subs	r3, #1
   b88a6:	606b      	str	r3, [r5, #4]
    return true;
   b88a8:	e7ec      	b.n	b8884 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b88ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b88ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b88b0:	4605      	mov	r5, r0
   b88b2:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b88b4:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b88b6:	460c      	mov	r4, r1
        WiringBleLock lk;
   b88b8:	f7ff fb1e 	bl	b7ef8 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b88bc:	682e      	ldr	r6, [r5, #0]
   b88be:	1ef3      	subs	r3, r6, #3
   b88c0:	2b0d      	cmp	r3, #13
   b88c2:	d83c      	bhi.n	b893e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b88c4:	e8df f013 	tbh	[pc, r3, lsl #1]
   b88c8:	0053000e 	.word	0x0053000e
   b88cc:	00d1003b 	.word	0x00d1003b
   b88d0:	003b003b 	.word	0x003b003b
   b88d4:	003b003b 	.word	0x003b003b
   b88d8:	009b003b 	.word	0x009b003b
   b88dc:	009b009b 	.word	0x009b009b
   b88e0:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b88e4:	a804      	add	r0, sp, #16
   b88e6:	f7ff fc95 	bl	b8214 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b88ea:	9b04      	ldr	r3, [sp, #16]
   b88ec:	89aa      	ldrh	r2, [r5, #12]
   b88ee:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b88f0:	6869      	ldr	r1, [r5, #4]
   b88f2:	9804      	ldr	r0, [sp, #16]
   b88f4:	3108      	adds	r1, #8
   b88f6:	3002      	adds	r0, #2
   b88f8:	f7ff fb18 	bl	b7f2c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b88fc:	a904      	add	r1, sp, #16
   b88fe:	a806      	add	r0, sp, #24
   b8900:	f7ff fdf3 	bl	b84ea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b8904:	a906      	add	r1, sp, #24
   b8906:	f104 0018 	add.w	r0, r4, #24
   b890a:	f7ff ff73 	bl	b87f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b890e:	4605      	mov	r5, r0
   b8910:	a807      	add	r0, sp, #28
   b8912:	f7ff fdf4 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8916:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b8918:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b891a:	b9b5      	cbnz	r5, b894a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b891c:	4b5d      	ldr	r3, [pc, #372]	; (b8a94 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b891e:	495e      	ldr	r1, [pc, #376]	; (b8a98 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8920:	9300      	str	r3, [sp, #0]
   b8922:	2032      	movs	r0, #50	; 0x32
   b8924:	462b      	mov	r3, r5
   b8926:	aa06      	add	r2, sp, #24
   b8928:	9507      	str	r5, [sp, #28]
   b892a:	f7ff f909 	bl	b7b40 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b892e:	9b04      	ldr	r3, [sp, #16]
   b8930:	4629      	mov	r1, r5
   b8932:	8818      	ldrh	r0, [r3, #0]
   b8934:	f7fe ff84 	bl	b7840 <hal_ble_gap_disconnect>
   b8938:	a805      	add	r0, sp, #20
   b893a:	f7ff fde0 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b893e:	a803      	add	r0, sp, #12
   b8940:	f7ff fae8 	bl	b7f14 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b8944:	b00e      	add	sp, #56	; 0x38
   b8946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b894a:	4a54      	ldr	r2, [pc, #336]	; (b8a9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b894c:	9200      	str	r2, [sp, #0]
   b894e:	2300      	movs	r3, #0
   b8950:	4951      	ldr	r1, [pc, #324]	; (b8a98 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8952:	9307      	str	r3, [sp, #28]
   b8954:	aa06      	add	r2, sp, #24
   b8956:	2001      	movs	r0, #1
   b8958:	f7ff f8f2 	bl	b7b40 <log_message>
                if (impl->connectedCallback_) {
   b895c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b895e:	2b00      	cmp	r3, #0
   b8960:	d0ea      	beq.n	b8938 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b8962:	a904      	add	r1, sp, #16
   b8964:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8968:	f7ff fe49 	bl	b85fe <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b896c:	e7e4      	b.n	b8938 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b896e:	89a9      	ldrh	r1, [r5, #12]
   b8970:	4620      	mov	r0, r4
   b8972:	f7ff fc19 	bl	b81a8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8976:	4606      	mov	r6, r0
   b8978:	2800      	cmp	r0, #0
   b897a:	d0e0      	beq.n	b893e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b897c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b897e:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b8982:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8986:	8029      	strh	r1, [r5, #0]
   b8988:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b898c:	429a      	cmp	r2, r3
   b898e:	d003      	beq.n	b8998 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b8990:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b8994:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b8996:	e7f9      	b.n	b898c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b8998:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b899c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b89a0:	45b8      	cmp	r8, r7
   b89a2:	d004      	beq.n	b89ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b89a4:	1d38      	adds	r0, r7, #4
   b89a6:	f7ff fdaa 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b89aa:	3708      	adds	r7, #8
   b89ac:	e7f8      	b.n	b89a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b89ae:	2300      	movs	r3, #0
   b89b0:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b89b2:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b89b6:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b89ba:	45b8      	cmp	r8, r7
   b89bc:	d004      	beq.n	b89c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b89be:	1d38      	adds	r0, r7, #4
   b89c0:	f7ff fd9d 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b89c4:	3708      	adds	r7, #8
   b89c6:	e7f8      	b.n	b89ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b89c8:	2300      	movs	r3, #0
   b89ca:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b89cc:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b89ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b89d0:	b123      	cbz	r3, b89dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b89d2:	4631      	mov	r1, r6
   b89d4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b89d8:	f7ff fe11 	bl	b85fe <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b89dc:	2300      	movs	r3, #0
   b89de:	2220      	movs	r2, #32
   b89e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b89e4:	4a2e      	ldr	r2, [pc, #184]	; (b8aa0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b89e6:	9200      	str	r2, [sp, #0]
   b89e8:	492b      	ldr	r1, [pc, #172]	; (b8a98 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b89ea:	aa06      	add	r2, sp, #24
   b89ec:	2001      	movs	r0, #1
   b89ee:	f7ff f8a7 	bl	b7b40 <log_message>
                    impl->peers_.removeOne(*peer);
   b89f2:	4631      	mov	r1, r6
   b89f4:	f104 0018 	add.w	r0, r4, #24
   b89f8:	f7ff ff35 	bl	b8866 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b89fc:	e79f      	b.n	b893e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b89fe:	89a9      	ldrh	r1, [r5, #12]
   b8a00:	4620      	mov	r0, r4
   b8a02:	f7ff fbd1 	bl	b81a8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8a06:	2800      	cmp	r0, #0
   b8a08:	d099      	beq.n	b893e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b8a0a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b8a0c:	2b00      	cmp	r3, #0
   b8a0e:	d096      	beq.n	b893e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b8a10:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8a12:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b8a14:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8a18:	d001      	beq.n	b8a1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b8a1a:	2e10      	cmp	r6, #16
   b8a1c:	d117      	bne.n	b8a4e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b8a1e:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b8a20:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b8a22:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b8a24:	2506      	movs	r5, #6
                        };
   b8a26:	f88d 3015 	strb.w	r3, [sp, #21]
   b8a2a:	9104      	str	r1, [sp, #16]
   b8a2c:	f88d 2014 	strb.w	r2, [sp, #20]
   b8a30:	9006      	str	r0, [sp, #24]
   b8a32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b8a36:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b8a38:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b8a3c:	9508      	str	r5, [sp, #32]
   b8a3e:	e883 0003 	stmia.w	r3, {r0, r1}
   b8a42:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b8a44:	a906      	add	r1, sp, #24
   b8a46:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8a4a:	4798      	blx	r3
   b8a4c:	e777      	b.n	b893e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b8a4e:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8a50:	bf01      	itttt	eq
   b8a52:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b8a54:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8a56:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b8a5a:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b8a5c:	bf0f      	iteee	eq
   b8a5e:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b8a62:	461a      	movne	r2, r3
   b8a64:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b8a66:	461d      	movne	r5, r3
   b8a68:	e7dd      	b.n	b8a26 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8a6a:	89a9      	ldrh	r1, [r5, #12]
   b8a6c:	4620      	mov	r0, r4
   b8a6e:	f7ff fb9b 	bl	b81a8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b8a72:	4601      	mov	r1, r0
   b8a74:	2800      	cmp	r0, #0
   b8a76:	f43f af62 	beq.w	b893e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8a7a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b8a7c:	2b00      	cmp	r3, #0
   b8a7e:	f43f af5e 	beq.w	b893e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b8a82:	686b      	ldr	r3, [r5, #4]
   b8a84:	9306      	str	r3, [sp, #24]
   b8a86:	aa06      	add	r2, sp, #24
   b8a88:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b8a8a:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8a8e:	4798      	blx	r3
   b8a90:	e755      	b.n	b893e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8a92:	bf00      	nop
   b8a94:	000bd8a0 	.word	0x000bd8a0
   b8a98:	000bd81f 	.word	0x000bd81f
   b8a9c:	000bd8c6 	.word	0x000bd8c6
   b8aa0:	000bd8e3 	.word	0x000bd8e3

000b8aa4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b8aa4:	b513      	push	{r0, r1, r4, lr}
   b8aa6:	460b      	mov	r3, r1
   b8aa8:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8aaa:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8aae:	466c      	mov	r4, sp
   b8ab0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b8ab4:	e893 0003 	ldmia.w	r3, {r0, r1}
   b8ab8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b8abc:	e894 0003 	ldmia.w	r4, {r0, r1}
   b8ac0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b8ac4:	b002      	add	sp, #8
   b8ac6:	bd10      	pop	{r4, pc}

000b8ac8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b8ac8:	b538      	push	{r3, r4, r5, lr}
   b8aca:	4605      	mov	r5, r0
   b8acc:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b8ace:	f7ff ffe9 	bl	b8aa4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8ad2:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8ad4:	68a2      	ldr	r2, [r4, #8]
   b8ad6:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8ad8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8ada:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8adc:	68e2      	ldr	r2, [r4, #12]
   b8ade:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8ae0:	60e3      	str	r3, [r4, #12]
      }
   b8ae2:	bd38      	pop	{r3, r4, r5, pc}

000b8ae4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b8ae4:	b570      	push	{r4, r5, r6, lr}
   b8ae6:	4604      	mov	r4, r0
   b8ae8:	b08c      	sub	sp, #48	; 0x30
   b8aea:	460e      	mov	r6, r1
   b8aec:	9201      	str	r2, [sp, #4]
   b8aee:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b8af0:	f7ff fb3a 	bl	b8168 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b8af4:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b8af6:	9901      	ldr	r1, [sp, #4]
   b8af8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8afc:	f000 fd8b 	bl	b9616 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b8b00:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b8b04:	b1cd      	cbz	r5, b8b3a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b8b06:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8b08:	9502      	str	r5, [sp, #8]
   b8b0a:	a902      	add	r1, sp, #8
   b8b0c:	a804      	add	r0, sp, #16
   b8b0e:	9303      	str	r3, [sp, #12]
   b8b10:	f7ff fcb4 	bl	b847c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b8b14:	2300      	movs	r3, #0
	__x.swap(*this);
   b8b16:	a908      	add	r1, sp, #32
   b8b18:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b8b1a:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b8b1c:	f7ff ffd4 	bl	b8ac8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b8b20:	4631      	mov	r1, r6
   b8b22:	a808      	add	r0, sp, #32
   b8b24:	f7ff ffd0 	bl	b8ac8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b8b28:	a808      	add	r0, sp, #32
   b8b2a:	f7ff f9a7 	bl	b7e7c <_ZNSt14_Function_baseD1Ev>
   b8b2e:	a804      	add	r0, sp, #16
   b8b30:	f7ff f9a4 	bl	b7e7c <_ZNSt14_Function_baseD1Ev>
    }
   b8b34:	4620      	mov	r0, r4
   b8b36:	b00c      	add	sp, #48	; 0x30
   b8b38:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b8b3a:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b8b3c:	e7ea      	b.n	b8b14 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b8b40 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b8b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8b44:	b087      	sub	sp, #28
   b8b46:	461d      	mov	r5, r3
   b8b48:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b8b4c:	4680      	mov	r8, r0
   b8b4e:	468b      	mov	fp, r1
   b8b50:	4692      	mov	sl, r2
   b8b52:	9912      	ldr	r1, [sp, #72]	; 0x48
   b8b54:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8b56:	2200      	movs	r2, #0
   b8b58:	2068      	movs	r0, #104	; 0x68
   b8b5a:	9102      	str	r1, [sp, #8]
   b8b5c:	9204      	str	r2, [sp, #16]
   b8b5e:	f7fb fa9a 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8b62:	1e06      	subs	r6, r0, #0
   b8b64:	f106 090c 	add.w	r9, r6, #12
   b8b68:	d018      	beq.n	b8b9c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b8b6a:	2201      	movs	r2, #1
	: _M_impl(__a)
   b8b6c:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b8b6e:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b8b72:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b8b74:	4a15      	ldr	r2, [pc, #84]	; (b8bcc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b8b76:	f847 2b20 	str.w	r2, [r7], #32
   b8b7a:	9b03      	ldr	r3, [sp, #12]
   b8b7c:	9100      	str	r1, [sp, #0]
   b8b7e:	465a      	mov	r2, fp
   b8b80:	4651      	mov	r1, sl
   b8b82:	4648      	mov	r0, r9
   b8b84:	f7ff ffae 	bl	b8ae4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b8b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8b8a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b8b8c:	682b      	ldr	r3, [r5, #0]
   b8b8e:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b8b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8b92:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b8b96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8b98:	6823      	ldr	r3, [r4, #0]
   b8b9a:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b8b9c:	a904      	add	r1, sp, #16
   b8b9e:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b8ba0:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b8ba4:	f7ff fd1a 	bl	b85dc <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b8ba8:	a805      	add	r0, sp, #20
   b8baa:	f7ff fca8 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b8bae:	f8d8 3000 	ldr.w	r3, [r8]
   b8bb2:	b93b      	cbnz	r3, b8bc4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b8bb4:	4a06      	ldr	r2, [pc, #24]	; (b8bd0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b8bb6:	4907      	ldr	r1, [pc, #28]	; (b8bd4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b8bb8:	200a      	movs	r0, #10
}
   b8bba:	b007      	add	sp, #28
   b8bbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b8bc0:	f7fe bfb6 	b.w	b7b30 <panic_>
}
   b8bc4:	b007      	add	sp, #28
   b8bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8bca:	bf00      	nop
   b8bcc:	000bd95c 	.word	0x000bd95c
   b8bd0:	000b78d1 	.word	0x000b78d1
   b8bd4:	000bd808 	.word	0x000bd808

000b8bd8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8bd8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8bdc:	4604      	mov	r4, r0
   b8bde:	460d      	mov	r5, r1
   b8be0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8be2:	d914      	bls.n	b8c0e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8be4:	4290      	cmp	r0, r2
   b8be6:	d213      	bcs.n	b8c10 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8be8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8bec:	1a75      	subs	r5, r6, r1
   b8bee:	f1a1 0708 	sub.w	r7, r1, #8
   b8bf2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8bf4:	42b7      	cmp	r7, r6
   b8bf6:	d018      	beq.n	b8c2a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8bf8:	b11c      	cbz	r4, b8c02 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8bfa:	4631      	mov	r1, r6
   b8bfc:	4620      	mov	r0, r4
   b8bfe:	f7ff fc6a 	bl	b84d6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8c02:	1d30      	adds	r0, r6, #4
   b8c04:	f7ff fc7b 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8c08:	3e08      	subs	r6, #8
   b8c0a:	3c08      	subs	r4, #8
   b8c0c:	e7f2      	b.n	b8bf4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8c0e:	d00c      	beq.n	b8c2a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8c10:	42b5      	cmp	r5, r6
   b8c12:	d00a      	beq.n	b8c2a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8c14:	b11c      	cbz	r4, b8c1e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8c16:	4629      	mov	r1, r5
   b8c18:	4620      	mov	r0, r4
   b8c1a:	f7ff fc5c 	bl	b84d6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8c1e:	1d28      	adds	r0, r5, #4
   b8c20:	f7ff fc6d 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8c24:	3508      	adds	r5, #8
   b8c26:	3408      	adds	r4, #8
   b8c28:	e7f2      	b.n	b8c10 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8c2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8c2c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8c2e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8c30:	4605      	mov	r5, r0
        if (n > 0) {
   b8c32:	dd11      	ble.n	b8c58 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8c34:	00f0      	lsls	r0, r6, #3
   b8c36:	f7ff f82f 	bl	b7c98 <malloc>
            if (!d) {
   b8c3a:	4604      	mov	r4, r0
   b8c3c:	b158      	cbz	r0, b8c56 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8c3e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8c42:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8c46:	f7ff ffc7 	bl	b8bd8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8c4a:	6828      	ldr	r0, [r5, #0]
   b8c4c:	f7ff f82c 	bl	b7ca8 <free>
        data_ = d;
   b8c50:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8c52:	60ae      	str	r6, [r5, #8]
        return true;
   b8c54:	2001      	movs	r0, #1
    }
   b8c56:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8c58:	2400      	movs	r4, #0
   b8c5a:	e7f6      	b.n	b8c4a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b8c5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8c5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8c5e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8c60:	6845      	ldr	r5, [r0, #4]
   b8c62:	4668      	mov	r0, sp
   b8c64:	f7ff fc37 	bl	b84d6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c68:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8c6c:	4299      	cmp	r1, r3
   b8c6e:	da10      	bge.n	b8c92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b8c70:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8c72:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8c74:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8c78:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8c7c:	4629      	mov	r1, r5
   b8c7e:	f105 0008 	add.w	r0, r5, #8
   b8c82:	f7ff ffa9 	bl	b8bd8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8c86:	b98d      	cbnz	r5, b8cac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8c88:	6863      	ldr	r3, [r4, #4]
   b8c8a:	3301      	adds	r3, #1
   b8c8c:	6063      	str	r3, [r4, #4]
    return true;
   b8c8e:	2601      	movs	r6, #1
   b8c90:	e006      	b.n	b8ca0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c92:	3101      	adds	r1, #1
   b8c94:	4620      	mov	r0, r4
   b8c96:	f7ff ffc9 	bl	b8c2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8c9a:	4606      	mov	r6, r0
   b8c9c:	2800      	cmp	r0, #0
   b8c9e:	d1e7      	bne.n	b8c70 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b8ca0:	a801      	add	r0, sp, #4
   b8ca2:	f7ff fc2c 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8ca6:	4630      	mov	r0, r6
   b8ca8:	b002      	add	sp, #8
   b8caa:	bd70      	pop	{r4, r5, r6, pc}
   b8cac:	4669      	mov	r1, sp
   b8cae:	4628      	mov	r0, r5
   b8cb0:	f7ff fc11 	bl	b84d6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8cb4:	e7e8      	b.n	b8c88 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8cb6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8cb6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8cba:	4604      	mov	r4, r0
   b8cbc:	460d      	mov	r5, r1
   b8cbe:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8cc0:	d914      	bls.n	b8cec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8cc2:	4290      	cmp	r0, r2
   b8cc4:	d213      	bcs.n	b8cee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8cc6:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8cca:	1a75      	subs	r5, r6, r1
   b8ccc:	f1a1 0708 	sub.w	r7, r1, #8
   b8cd0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8cd2:	42b7      	cmp	r7, r6
   b8cd4:	d018      	beq.n	b8d08 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8cd6:	b11c      	cbz	r4, b8ce0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b8cd8:	4631      	mov	r1, r6
   b8cda:	4620      	mov	r0, r4
   b8cdc:	f7ff fbed 	bl	b84ba <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8ce0:	1d30      	adds	r0, r6, #4
   b8ce2:	f7ff fc0c 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8ce6:	3e08      	subs	r6, #8
   b8ce8:	3c08      	subs	r4, #8
   b8cea:	e7f2      	b.n	b8cd2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8cec:	d00c      	beq.n	b8d08 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8cee:	42b5      	cmp	r5, r6
   b8cf0:	d00a      	beq.n	b8d08 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8cf2:	b11c      	cbz	r4, b8cfc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8cf4:	4629      	mov	r1, r5
   b8cf6:	4620      	mov	r0, r4
   b8cf8:	f7ff fbdf 	bl	b84ba <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8cfc:	1d28      	adds	r0, r5, #4
   b8cfe:	f7ff fbfe 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8d02:	3508      	adds	r5, #8
   b8d04:	3408      	adds	r4, #8
   b8d06:	e7f2      	b.n	b8cee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8d0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8d0a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8d0c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8d0e:	4605      	mov	r5, r0
        if (n > 0) {
   b8d10:	dd11      	ble.n	b8d36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8d12:	00f0      	lsls	r0, r6, #3
   b8d14:	f7fe ffc0 	bl	b7c98 <malloc>
            if (!d) {
   b8d18:	4604      	mov	r4, r0
   b8d1a:	b158      	cbz	r0, b8d34 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8d1c:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8d20:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8d24:	f7ff ffc7 	bl	b8cb6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8d28:	6828      	ldr	r0, [r5, #0]
   b8d2a:	f7fe ffbd 	bl	b7ca8 <free>
        data_ = d;
   b8d2e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8d30:	60ae      	str	r6, [r5, #8]
        return true;
   b8d32:	2001      	movs	r0, #1
    }
   b8d34:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8d36:	2400      	movs	r4, #0
   b8d38:	e7f6      	b.n	b8d28 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b8d3a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8d3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8d3c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8d3e:	6845      	ldr	r5, [r0, #4]
   b8d40:	4668      	mov	r0, sp
   b8d42:	f7ff fbba 	bl	b84ba <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8d46:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8d4a:	4299      	cmp	r1, r3
   b8d4c:	da10      	bge.n	b8d70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b8d4e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8d50:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8d52:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8d56:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8d5a:	4629      	mov	r1, r5
   b8d5c:	f105 0008 	add.w	r0, r5, #8
   b8d60:	f7ff ffa9 	bl	b8cb6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8d64:	b98d      	cbnz	r5, b8d8a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8d66:	6863      	ldr	r3, [r4, #4]
   b8d68:	3301      	adds	r3, #1
   b8d6a:	6063      	str	r3, [r4, #4]
    return true;
   b8d6c:	2601      	movs	r6, #1
   b8d6e:	e006      	b.n	b8d7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8d70:	3101      	adds	r1, #1
   b8d72:	4620      	mov	r0, r4
   b8d74:	f7ff ffc9 	bl	b8d0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8d78:	4606      	mov	r6, r0
   b8d7a:	2800      	cmp	r0, #0
   b8d7c:	d1e7      	bne.n	b8d4e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b8d7e:	a801      	add	r0, sp, #4
   b8d80:	f7ff fbbd 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8d84:	4630      	mov	r0, r6
   b8d86:	b002      	add	sp, #8
   b8d88:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b8d8a:	4669      	mov	r1, sp
   b8d8c:	4628      	mov	r0, r5
   b8d8e:	f7ff fb94 	bl	b84ba <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8d92:	e7e8      	b.n	b8d66 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8d94 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8d98:	4617      	mov	r7, r2
   b8d9a:	b0a1      	sub	sp, #132	; 0x84
   b8d9c:	4680      	mov	r8, r0
    WiringBleLock lk;
   b8d9e:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8da0:	460e      	mov	r6, r1
    WiringBleLock lk;
   b8da2:	f7ff f8a9 	bl	b7ef8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8da6:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b8da8:	7923      	ldrb	r3, [r4, #4]
   b8daa:	b953      	cbnz	r3, b8dc2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b8dac:	4639      	mov	r1, r7
   b8dae:	4640      	mov	r0, r8
   b8db0:	f7ff fb83 	bl	b84ba <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b8db4:	a80a      	add	r0, sp, #40	; 0x28
   b8db6:	f7ff f8ad 	bl	b7f14 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b8dba:	4640      	mov	r0, r8
   b8dbc:	b021      	add	sp, #132	; 0x84
   b8dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8dc2:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b8dc4:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b8dc8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b8dcc:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b8dce:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b8dd2:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b8dd6:	9b03      	ldr	r3, [sp, #12]
   b8dd8:	429d      	cmp	r5, r3
   b8dda:	d021      	beq.n	b8e20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b8ddc:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b8de0:	4658      	mov	r0, fp
   b8de2:	f109 0114 	add.w	r1, r9, #20
   b8de6:	f7ff f934 	bl	b8052 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b8dea:	b1b8      	cbz	r0, b8e1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b8dec:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b8df0:	4650      	mov	r0, sl
   b8df2:	f7ff f92e 	bl	b8052 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b8df6:	b188      	cbz	r0, b8e1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b8df8:	6823      	ldr	r3, [r4, #0]
   b8dfa:	f8d9 2000 	ldr.w	r2, [r9]
   b8dfe:	4053      	eors	r3, r2
   b8e00:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b8e04:	d10a      	bne.n	b8e1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b8e06:	2220      	movs	r2, #32
   b8e08:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b8e0c:	4a5e      	ldr	r2, [pc, #376]	; (b8f88 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b8e0e:	9200      	str	r2, [sp, #0]
   b8e10:	aa15      	add	r2, sp, #84	; 0x54
   b8e12:	495e      	ldr	r1, [pc, #376]	; (b8f8c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b8e14:	2032      	movs	r0, #50	; 0x32
   b8e16:	f7fe fe93 	bl	b7b40 <log_message>
   b8e1a:	e7c7      	b.n	b8dac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b8e1c:	3508      	adds	r5, #8
   b8e1e:	e7da      	b.n	b8dd6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b8e20:	4650      	mov	r0, sl
   b8e22:	f7ff f8e7 	bl	b7ff4 <_ZNK8particle7BleUuid7isValidEv>
   b8e26:	b960      	cbnz	r0, b8e42 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b8e28:	4959      	ldr	r1, [pc, #356]	; (b8f90 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b8e2a:	2201      	movs	r2, #1
   b8e2c:	a815      	add	r0, sp, #84	; 0x54
   b8e2e:	ad15      	add	r5, sp, #84	; 0x54
   b8e30:	f7ff f8b8 	bl	b7fa4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b8e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8e36:	46d4      	mov	ip, sl
   b8e38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8e3c:	682b      	ldr	r3, [r5, #0]
   b8e3e:	f8cc 3000 	str.w	r3, [ip]
   b8e42:	6833      	ldr	r3, [r6, #0]
   b8e44:	e9d3 5300 	ldrd	r5, r3, [r3]
   b8e48:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b8e4c:	455d      	cmp	r5, fp
   b8e4e:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b8e50:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b8e52:	d06e      	beq.n	b8f32 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b8e54:	f855 0b08 	ldr.w	r0, [r5], #8
   b8e58:	f7ff f8fb 	bl	b8052 <_ZNK8particle7BleUuideqERKS0_>
   b8e5c:	2800      	cmp	r0, #0
   b8e5e:	d0f5      	beq.n	b8e4c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b8e60:	f104 0a14 	add.w	sl, r4, #20
   b8e64:	4650      	mov	r0, sl
   b8e66:	f7ff f8c5 	bl	b7ff4 <_ZNK8particle7BleUuid7isValidEv>
   b8e6a:	b988      	cbnz	r0, b8e90 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b8e6c:	4b49      	ldr	r3, [pc, #292]	; (b8f94 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8e6e:	4948      	ldr	r1, [pc, #288]	; (b8f90 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b8e70:	881a      	ldrh	r2, [r3, #0]
   b8e72:	3201      	adds	r2, #1
   b8e74:	b292      	uxth	r2, r2
   b8e76:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8e78:	a815      	add	r0, sp, #84	; 0x54
   b8e7a:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b8e7c:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8e7e:	f7ff f8b0 	bl	b7fe2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b8e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8e84:	46d4      	mov	ip, sl
   b8e86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8e8a:	682b      	ldr	r3, [r5, #0]
   b8e8c:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b8e90:	4b41      	ldr	r3, [pc, #260]	; (b8f98 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b8e92:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b8e94:	2228      	movs	r2, #40	; 0x28
   b8e96:	2100      	movs	r1, #0
   b8e98:	a816      	add	r0, sp, #88	; 0x58
   b8e9a:	f002 fa03 	bl	bb2a4 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b8e9e:	4651      	mov	r1, sl
   b8ea0:	a804      	add	r0, sp, #16
   b8ea2:	f7ff f8b9 	bl	b8018 <_ZN8particle7BleUuid7halUUIDEv>
   b8ea6:	ab04      	add	r3, sp, #16
   b8ea8:	aa18      	add	r2, sp, #96	; 0x60
   b8eaa:	f10d 0c20 	add.w	ip, sp, #32
   b8eae:	6818      	ldr	r0, [r3, #0]
   b8eb0:	6859      	ldr	r1, [r3, #4]
   b8eb2:	4615      	mov	r5, r2
   b8eb4:	c503      	stmia	r5!, {r0, r1}
   b8eb6:	3308      	adds	r3, #8
   b8eb8:	4563      	cmp	r3, ip
   b8eba:	462a      	mov	r2, r5
   b8ebc:	d1f7      	bne.n	b8eae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b8ebe:	6818      	ldr	r0, [r3, #0]
   b8ec0:	6028      	str	r0, [r5, #0]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   b8ec2:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b8ec4:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b8ec8:	f8d9 3000 	ldr.w	r3, [r9]
   b8ecc:	8a9b      	ldrh	r3, [r3, #20]
   b8ece:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b8ed2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8ed4:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b8ed6:	4b31      	ldr	r3, [pc, #196]	; (b8f9c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8ed8:	2200      	movs	r2, #0
   b8eda:	1da1      	adds	r1, r4, #6
   b8edc:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b8ede:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8ee2:	f7fe fcc1 	bl	b7868 <hal_ble_gatt_server_add_characteristic>
   b8ee6:	2800      	cmp	r0, #0
   b8ee8:	f47f af60 	bne.w	b8dac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b8eec:	2301      	movs	r3, #1
   b8eee:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b8ef0:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b8ef2:	4639      	mov	r1, r7
        return characteristics_;
   b8ef4:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b8ef6:	a80d      	add	r0, sp, #52	; 0x34
   b8ef8:	f7ff fadf 	bl	b84ba <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8efc:	4620      	mov	r0, r4
   b8efe:	a90d      	add	r1, sp, #52	; 0x34
   b8f00:	f7ff ff1b 	bl	b8d3a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b8f04:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8f06:	a80e      	add	r0, sp, #56	; 0x38
   b8f08:	f7ff faf9 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8f0c:	2c00      	cmp	r4, #0
   b8f0e:	f47f af4d 	bne.w	b8dac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b8f12:	2320      	movs	r3, #32
   b8f14:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b8f18:	4b21      	ldr	r3, [pc, #132]	; (b8fa0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b8f1a:	9300      	str	r3, [sp, #0]
   b8f1c:	aa0d      	add	r2, sp, #52	; 0x34
   b8f1e:	4623      	mov	r3, r4
   b8f20:	e777      	b.n	b8e12 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b8f22:	4639      	mov	r1, r7
   b8f24:	4640      	mov	r0, r8
   b8f26:	f7ff fac8 	bl	b84ba <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8f2a:	a80c      	add	r0, sp, #48	; 0x30
   b8f2c:	f7ff fae7 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8f30:	e740      	b.n	b8db4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b8f32:	a80b      	add	r0, sp, #44	; 0x2c
   b8f34:	f7ff f94a 	bl	b81cc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b8f38:	4651      	mov	r1, sl
   b8f3a:	a815      	add	r0, sp, #84	; 0x54
   b8f3c:	f7ff f86c 	bl	b8018 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b8f40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8f42:	2300      	movs	r3, #0
   b8f44:	3214      	adds	r2, #20
   b8f46:	a915      	add	r1, sp, #84	; 0x54
   b8f48:	2001      	movs	r0, #1
   b8f4a:	f7fe fc83 	bl	b7854 <hal_ble_gatt_server_add_service>
   b8f4e:	2800      	cmp	r0, #0
   b8f50:	d1e7      	bne.n	b8f22 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b8f52:	6835      	ldr	r5, [r6, #0]
   b8f54:	a90b      	add	r1, sp, #44	; 0x2c
   b8f56:	a80d      	add	r0, sp, #52	; 0x34
   b8f58:	f7ff fabd 	bl	b84d6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b8f5c:	4628      	mov	r0, r5
   b8f5e:	a90d      	add	r1, sp, #52	; 0x34
   b8f60:	f7ff fe7c 	bl	b8c5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b8f64:	4605      	mov	r5, r0
   b8f66:	a80e      	add	r0, sp, #56	; 0x38
   b8f68:	f7ff fac9 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8f6c:	2d00      	cmp	r5, #0
   b8f6e:	d0d8      	beq.n	b8f22 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b8f70:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b8f72:	6853      	ldr	r3, [r2, #4]
   b8f74:	6812      	ldr	r2, [r2, #0]
   b8f76:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b8f7a:	3b01      	subs	r3, #1
   b8f7c:	a80c      	add	r0, sp, #48	; 0x30
   b8f7e:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b8f82:	f7ff fabc 	bl	b84fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8f86:	e76b      	b.n	b8e60 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b8f88:	000bd902 	.word	0x000bd902
   b8f8c:	000bd81f 	.word	0x000bd81f
   b8f90:	000bd9c6 	.word	0x000bd9c6
   b8f94:	2003e6bc 	.word	0x2003e6bc
   b8f98:	002c0003 	.word	0x002c0003
   b8f9c:	000b8365 	.word	0x000b8365
   b8fa0:	000bd92d 	.word	0x000bd92d

000b8fa4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b8fa4:	4802      	ldr	r0, [pc, #8]	; (b8fb0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8fa6:	2300      	movs	r3, #0
   b8fa8:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b8faa:	f7fe bc71 	b.w	b7890 <os_mutex_recursive_create>
   b8fae:	bf00      	nop
   b8fb0:	2003e6c0 	.word	0x2003e6c0

000b8fb4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8fb4:	2200      	movs	r2, #0
   b8fb6:	6840      	ldr	r0, [r0, #4]
   b8fb8:	4611      	mov	r1, r2
   b8fba:	f7fe be2d 	b.w	b7c18 <network_listening>

000b8fbe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8fbe:	2200      	movs	r2, #0
   b8fc0:	6840      	ldr	r0, [r0, #4]
   b8fc2:	4611      	mov	r1, r2
   b8fc4:	f7fe be50 	b.w	b7c68 <network_get_listen_timeout>

000b8fc8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8fc8:	6840      	ldr	r0, [r0, #4]
   b8fca:	2200      	movs	r2, #0
   b8fcc:	f7fe be44 	b.w	b7c58 <network_set_listen_timeout>

000b8fd0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8fd0:	6840      	ldr	r0, [r0, #4]
   b8fd2:	2200      	movs	r2, #0
   b8fd4:	f081 0101 	eor.w	r1, r1, #1
   b8fd8:	f7fe be16 	b.w	b7c08 <network_listen>

000b8fdc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8fdc:	2300      	movs	r3, #0
   b8fde:	6840      	ldr	r0, [r0, #4]
   b8fe0:	461a      	mov	r2, r3
   b8fe2:	4619      	mov	r1, r3
   b8fe4:	f7fe be08 	b.w	b7bf8 <network_off>

000b8fe8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8fe8:	2300      	movs	r3, #0
   b8fea:	6840      	ldr	r0, [r0, #4]
   b8fec:	461a      	mov	r2, r3
   b8fee:	4619      	mov	r1, r3
   b8ff0:	f7fe bdfa 	b.w	b7be8 <network_on>

000b8ff4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8ff4:	2200      	movs	r2, #0
   b8ff6:	6840      	ldr	r0, [r0, #4]
   b8ff8:	4611      	mov	r1, r2
   b8ffa:	f7fe bded 	b.w	b7bd8 <network_ready>

000b8ffe <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8ffe:	2200      	movs	r2, #0
   b9000:	6840      	ldr	r0, [r0, #4]
   b9002:	4611      	mov	r1, r2
   b9004:	f7fe bdd8 	b.w	b7bb8 <network_connecting>

000b9008 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9008:	6840      	ldr	r0, [r0, #4]
   b900a:	2200      	movs	r2, #0
   b900c:	2102      	movs	r1, #2
   b900e:	f7fe bddb 	b.w	b7bc8 <network_disconnect>

000b9012 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9012:	2300      	movs	r3, #0
   b9014:	6840      	ldr	r0, [r0, #4]
   b9016:	461a      	mov	r2, r3
   b9018:	f7fe bdc6 	b.w	b7ba8 <network_connect>

000b901c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b901c:	4b02      	ldr	r3, [pc, #8]	; (b9028 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b901e:	2203      	movs	r2, #3
   b9020:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b9022:	4a02      	ldr	r2, [pc, #8]	; (b902c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b9024:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b9026:	4770      	bx	lr
   b9028:	2003e6c8 	.word	0x2003e6c8
   b902c:	000bd9f0 	.word	0x000bd9f0

000b9030 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9030:	4770      	bx	lr

000b9032 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9034:	4606      	mov	r6, r0
   b9036:	4615      	mov	r5, r2
   b9038:	460c      	mov	r4, r1
   b903a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b903c:	42bc      	cmp	r4, r7
   b903e:	d006      	beq.n	b904e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9040:	6833      	ldr	r3, [r6, #0]
   b9042:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9046:	689b      	ldr	r3, [r3, #8]
   b9048:	4630      	mov	r0, r6
   b904a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b904c:	e7f6      	b.n	b903c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b904e:	4628      	mov	r0, r5
   b9050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9052 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b9052:	7c00      	ldrb	r0, [r0, #16]
   b9054:	2200      	movs	r2, #0
   b9056:	f7fe bc63 	b.w	b7920 <hal_i2c_write>

000b905a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b905a:	7c00      	ldrb	r0, [r0, #16]
   b905c:	2100      	movs	r1, #0
   b905e:	f7fe bc67 	b.w	b7930 <hal_i2c_available>

000b9062 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b9062:	7c00      	ldrb	r0, [r0, #16]
   b9064:	2100      	movs	r1, #0
   b9066:	f7fe bc6b 	b.w	b7940 <hal_i2c_read>

000b906a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b906a:	7c00      	ldrb	r0, [r0, #16]
   b906c:	2100      	movs	r1, #0
   b906e:	f7fe bc6f 	b.w	b7950 <hal_i2c_peek>

000b9072 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b9072:	7c00      	ldrb	r0, [r0, #16]
   b9074:	2100      	movs	r1, #0
   b9076:	f7fe bc73 	b.w	b7960 <hal_i2c_flush>

000b907a <_ZN7TwoWireD0Ev>:
   b907a:	b510      	push	{r4, lr}
   b907c:	2114      	movs	r1, #20
   b907e:	4604      	mov	r4, r0
   b9080:	f7fb f80f 	bl	b40a2 <_ZdlPvj>
   b9084:	4620      	mov	r0, r4
   b9086:	bd10      	pop	{r4, pc}

000b9088 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9088:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b908a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b908e:	4604      	mov	r4, r0
   b9090:	4608      	mov	r0, r1
   b9092:	2100      	movs	r1, #0
   b9094:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9098:	4b03      	ldr	r3, [pc, #12]	; (b90a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b909a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b909c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b909e:	4611      	mov	r1, r2
   b90a0:	f7fe fc66 	bl	b7970 <hal_i2c_init>
}
   b90a4:	4620      	mov	r0, r4
   b90a6:	bd10      	pop	{r4, pc}
   b90a8:	000bda2c 	.word	0x000bda2c

000b90ac <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b90ac:	2300      	movs	r3, #0
   b90ae:	7c00      	ldrb	r0, [r0, #16]
   b90b0:	461a      	mov	r2, r3
   b90b2:	4619      	mov	r1, r3
   b90b4:	f7fe bc1c 	b.w	b78f0 <hal_i2c_begin>

000b90b8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b90b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b90ba:	2200      	movs	r2, #0
   b90bc:	2314      	movs	r3, #20
   b90be:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b90c2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b90c6:	780b      	ldrb	r3, [r1, #0]
   b90c8:	f88d 3008 	strb.w	r3, [sp, #8]
   b90cc:	684b      	ldr	r3, [r1, #4]
   b90ce:	9303      	str	r3, [sp, #12]
   b90d0:	68cb      	ldr	r3, [r1, #12]
   b90d2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b90d4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b90d6:	7a0b      	ldrb	r3, [r1, #8]
   b90d8:	9305      	str	r3, [sp, #20]
   b90da:	a901      	add	r1, sp, #4
   b90dc:	f7fe fc50 	bl	b7980 <hal_i2c_request_ex>
}
   b90e0:	b007      	add	sp, #28
   b90e2:	f85d fb04 	ldr.w	pc, [sp], #4

000b90e6 <_ZN7TwoWire11requestFromEhjh>:
{
   b90e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b90e8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b90ea:	f88d 1000 	strb.w	r1, [sp]
   b90ee:	f04f 0164 	mov.w	r1, #100	; 0x64
   b90f2:	9103      	str	r1, [sp, #12]
   b90f4:	bf18      	it	ne
   b90f6:	2301      	movne	r3, #1
   b90f8:	4669      	mov	r1, sp
    size_ = size;
   b90fa:	9201      	str	r2, [sp, #4]
   b90fc:	f88d 3008 	strb.w	r3, [sp, #8]
   b9100:	f7ff ffda 	bl	b90b8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b9104:	b005      	add	sp, #20
   b9106:	f85d fb04 	ldr.w	pc, [sp], #4

000b910a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b910a:	2301      	movs	r3, #1
   b910c:	f7ff bfeb 	b.w	b90e6 <_ZN7TwoWire11requestFromEhjh>

000b9110 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b9110:	7c00      	ldrb	r0, [r0, #16]
   b9112:	2200      	movs	r2, #0
   b9114:	f7fe bbf4 	b.w	b7900 <hal_i2c_begin_transmission>

000b9118 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b9118:	b2c9      	uxtb	r1, r1
   b911a:	f7ff bff9 	b.w	b9110 <_ZN7TwoWire17beginTransmissionEh>

000b911e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b911e:	7c00      	ldrb	r0, [r0, #16]
   b9120:	2200      	movs	r2, #0
   b9122:	f7fe bbf5 	b.w	b7910 <hal_i2c_end_transmission>

000b9126 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b9126:	2101      	movs	r1, #1
   b9128:	f7ff bff9 	b.w	b911e <_ZN7TwoWire15endTransmissionEh>

000b912c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b912c:	4770      	bx	lr

000b912e <_ZN9IPAddressD0Ev>:
   b912e:	b510      	push	{r4, lr}
   b9130:	2118      	movs	r1, #24
   b9132:	4604      	mov	r4, r0
   b9134:	f7fa ffb5 	bl	b40a2 <_ZdlPvj>
   b9138:	4620      	mov	r0, r4
   b913a:	bd10      	pop	{r4, pc}

000b913c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b913c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b913e:	7d03      	ldrb	r3, [r0, #20]
   b9140:	2b06      	cmp	r3, #6
{
   b9142:	b08d      	sub	sp, #52	; 0x34
   b9144:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9146:	f100 0704 	add.w	r7, r0, #4
   b914a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b914e:	d012      	beq.n	b9176 <_ZNK9IPAddress7printToER5Print+0x3a>
   b9150:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b9154:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b9158:	220a      	movs	r2, #10
   b915a:	4630      	mov	r0, r6
   b915c:	f000 f973 	bl	b9446 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b9160:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b9162:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b9164:	d019      	beq.n	b919a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b9166:	2c00      	cmp	r4, #0
   b9168:	d0f4      	beq.n	b9154 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b916a:	212e      	movs	r1, #46	; 0x2e
   b916c:	4630      	mov	r0, r6
   b916e:	f000 f951 	bl	b9414 <_ZN5Print5printEc>
   b9172:	4404      	add	r4, r0
   b9174:	e7ee      	b.n	b9154 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9176:	232f      	movs	r3, #47	; 0x2f
   b9178:	466a      	mov	r2, sp
   b917a:	4639      	mov	r1, r7
   b917c:	200a      	movs	r0, #10
		buf[0] = 0;
   b917e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9182:	f7fe fc0d 	bl	b79a0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b9186:	4668      	mov	r0, sp
   b9188:	f002 f8d4 	bl	bb334 <strlen>
   b918c:	6833      	ldr	r3, [r6, #0]
   b918e:	4602      	mov	r2, r0
   b9190:	68db      	ldr	r3, [r3, #12]
   b9192:	4669      	mov	r1, sp
   b9194:	4630      	mov	r0, r6
   b9196:	4798      	blx	r3
   b9198:	4604      	mov	r4, r0
    }
    return n;
}
   b919a:	4620      	mov	r0, r4
   b919c:	b00d      	add	sp, #52	; 0x34
   b919e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b91a0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b91a0:	b510      	push	{r4, lr}
   b91a2:	4b05      	ldr	r3, [pc, #20]	; (b91b8 <_ZN9IPAddressC1Ev+0x18>)
   b91a4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b91a6:	2211      	movs	r2, #17
   b91a8:	f840 3b04 	str.w	r3, [r0], #4
   b91ac:	2100      	movs	r1, #0
   b91ae:	f002 f879 	bl	bb2a4 <memset>
}
   b91b2:	4620      	mov	r0, r4
   b91b4:	bd10      	pop	{r4, pc}
   b91b6:	bf00      	nop
   b91b8:	000bda54 	.word	0x000bda54

000b91bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b91bc:	4603      	mov	r3, r0
   b91be:	4a07      	ldr	r2, [pc, #28]	; (b91dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b91c0:	b510      	push	{r4, lr}
   b91c2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b91c6:	f101 0210 	add.w	r2, r1, #16
   b91ca:	f851 4b04 	ldr.w	r4, [r1], #4
   b91ce:	f843 4b04 	str.w	r4, [r3], #4
   b91d2:	4291      	cmp	r1, r2
   b91d4:	d1f9      	bne.n	b91ca <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b91d6:	780a      	ldrb	r2, [r1, #0]
   b91d8:	701a      	strb	r2, [r3, #0]
}
   b91da:	bd10      	pop	{r4, pc}
   b91dc:	000bda54 	.word	0x000bda54

000b91e0 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b91e0:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b91e2:	2b04      	cmp	r3, #4
   b91e4:	d104      	bne.n	b91f0 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b91e6:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b91e8:	3800      	subs	r0, #0
   b91ea:	bf18      	it	ne
   b91ec:	2001      	movne	r0, #1
   b91ee:	4770      	bx	lr
    } else if (version() == 6) {
   b91f0:	2b06      	cmp	r3, #6
   b91f2:	d107      	bne.n	b9204 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b91f4:	6843      	ldr	r3, [r0, #4]
   b91f6:	b93b      	cbnz	r3, b9208 <_ZNK9IPAddresscvbEv+0x28>
   b91f8:	6883      	ldr	r3, [r0, #8]
   b91fa:	b92b      	cbnz	r3, b9208 <_ZNK9IPAddresscvbEv+0x28>
   b91fc:	68c3      	ldr	r3, [r0, #12]
   b91fe:	b91b      	cbnz	r3, b9208 <_ZNK9IPAddresscvbEv+0x28>
   b9200:	6900      	ldr	r0, [r0, #16]
   b9202:	e7f1      	b.n	b91e8 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b9204:	2000      	movs	r0, #0
   b9206:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b9208:	2001      	movs	r0, #1
}
   b920a:	4770      	bx	lr

000b920c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b920c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b920e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b9212:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b9216:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b921a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b921e:	2304      	movs	r3, #4
   b9220:	6041      	str	r1, [r0, #4]
   b9222:	7503      	strb	r3, [r0, #20]
}
   b9224:	bd10      	pop	{r4, pc}
	...

000b9228 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b9228:	b507      	push	{r0, r1, r2, lr}
   b922a:	4b06      	ldr	r3, [pc, #24]	; (b9244 <_ZN9IPAddressC1EPKh+0x1c>)
   b922c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b922e:	78cb      	ldrb	r3, [r1, #3]
   b9230:	9300      	str	r3, [sp, #0]
   b9232:	788b      	ldrb	r3, [r1, #2]
   b9234:	784a      	ldrb	r2, [r1, #1]
   b9236:	7809      	ldrb	r1, [r1, #0]
   b9238:	f7ff ffe8 	bl	b920c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b923c:	b003      	add	sp, #12
   b923e:	f85d fb04 	ldr.w	pc, [sp], #4
   b9242:	bf00      	nop
   b9244:	000bda54 	.word	0x000bda54

000b9248 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b9248:	4b01      	ldr	r3, [pc, #4]	; (b9250 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b924a:	4a02      	ldr	r2, [pc, #8]	; (b9254 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b924c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b924e:	4770      	bx	lr
   b9250:	2003e6d0 	.word	0x2003e6d0
   b9254:	000bda60 	.word	0x000bda60

000b9258 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9258:	2300      	movs	r3, #0
   b925a:	6840      	ldr	r0, [r0, #4]
   b925c:	461a      	mov	r2, r3
   b925e:	f7fe bca3 	b.w	b7ba8 <network_connect>

000b9262 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b9262:	6840      	ldr	r0, [r0, #4]
   b9264:	2200      	movs	r2, #0
   b9266:	2102      	movs	r1, #2
   b9268:	f7fe bcae 	b.w	b7bc8 <network_disconnect>

000b926c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b926c:	2200      	movs	r2, #0
   b926e:	6840      	ldr	r0, [r0, #4]
   b9270:	4611      	mov	r1, r2
   b9272:	f7fe bca1 	b.w	b7bb8 <network_connecting>

000b9276 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b9276:	2200      	movs	r2, #0
   b9278:	6840      	ldr	r0, [r0, #4]
   b927a:	4611      	mov	r1, r2
   b927c:	f7fe bcac 	b.w	b7bd8 <network_ready>

000b9280 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b9280:	2300      	movs	r3, #0
   b9282:	6840      	ldr	r0, [r0, #4]
   b9284:	461a      	mov	r2, r3
   b9286:	4619      	mov	r1, r3
   b9288:	f7fe bcae 	b.w	b7be8 <network_on>

000b928c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b928c:	2300      	movs	r3, #0
   b928e:	6840      	ldr	r0, [r0, #4]
   b9290:	461a      	mov	r2, r3
   b9292:	4619      	mov	r1, r3
   b9294:	f7fe bcb0 	b.w	b7bf8 <network_off>

000b9298 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9298:	6840      	ldr	r0, [r0, #4]
   b929a:	2100      	movs	r1, #0
   b929c:	f7fe bcec 	b.w	b7c78 <network_is_on>

000b92a0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b92a0:	6840      	ldr	r0, [r0, #4]
   b92a2:	2100      	movs	r1, #0
   b92a4:	f7fe bcf0 	b.w	b7c88 <network_is_off>

000b92a8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b92a8:	6840      	ldr	r0, [r0, #4]
   b92aa:	2200      	movs	r2, #0
   b92ac:	f081 0101 	eor.w	r1, r1, #1
   b92b0:	f7fe bcaa 	b.w	b7c08 <network_listen>

000b92b4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b92b4:	6840      	ldr	r0, [r0, #4]
   b92b6:	2200      	movs	r2, #0
   b92b8:	f7fe bcce 	b.w	b7c58 <network_set_listen_timeout>

000b92bc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b92bc:	2200      	movs	r2, #0
   b92be:	6840      	ldr	r0, [r0, #4]
   b92c0:	4611      	mov	r1, r2
   b92c2:	f7fe bcd1 	b.w	b7c68 <network_get_listen_timeout>

000b92c6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b92c6:	2200      	movs	r2, #0
   b92c8:	6840      	ldr	r0, [r0, #4]
   b92ca:	4611      	mov	r1, r2
   b92cc:	f7fe bca4 	b.w	b7c18 <network_listening>

000b92d0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b92d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b92d4:	b095      	sub	sp, #84	; 0x54
   b92d6:	4614      	mov	r4, r2
   b92d8:	460d      	mov	r5, r1
   b92da:	4607      	mov	r7, r0
    IPAddress addr;
   b92dc:	f7ff ff60 	bl	b91a0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b92e0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b92e2:	221c      	movs	r2, #28
   b92e4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b92e6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b92e8:	f001 ffdc 	bl	bb2a4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b92ec:	2340      	movs	r3, #64	; 0x40
   b92ee:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b92f0:	4620      	mov	r0, r4
   b92f2:	466b      	mov	r3, sp
   b92f4:	aa0c      	add	r2, sp, #48	; 0x30
   b92f6:	2100      	movs	r1, #0
   b92f8:	f7fe fb72 	bl	b79e0 <netdb_getaddrinfo>
    if (!r) {
   b92fc:	4604      	mov	r4, r0
   b92fe:	2800      	cmp	r0, #0
   b9300:	d14b      	bne.n	b939a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9302:	4602      	mov	r2, r0
   b9304:	2101      	movs	r1, #1
   b9306:	6868      	ldr	r0, [r5, #4]
   b9308:	f7fe fc66 	bl	b7bd8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b930c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b930e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9310:	4622      	mov	r2, r4
   b9312:	6868      	ldr	r0, [r5, #4]
   b9314:	f7fe fc60 	bl	b7bd8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9318:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b931a:	4681      	mov	r9, r0
        bool ok = false;
   b931c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b931e:	2e00      	cmp	r6, #0
   b9320:	d03b      	beq.n	b939a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b9322:	2900      	cmp	r1, #0
   b9324:	d139      	bne.n	b939a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b9326:	6873      	ldr	r3, [r6, #4]
   b9328:	2b02      	cmp	r3, #2
   b932a:	d003      	beq.n	b9334 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b932c:	2b0a      	cmp	r3, #10
   b932e:	d011      	beq.n	b9354 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9330:	69f6      	ldr	r6, [r6, #28]
   b9332:	e7f4      	b.n	b931e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b9334:	f1b8 0f00 	cmp.w	r8, #0
   b9338:	d0fa      	beq.n	b9330 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b933a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b933c:	a806      	add	r0, sp, #24
   b933e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b9340:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b9342:	f7ff ff71 	bl	b9228 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9348:	1d3c      	adds	r4, r7, #4
   b934a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b934c:	682b      	ldr	r3, [r5, #0]
   b934e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9350:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b9352:	e7ed      	b.n	b9330 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b9354:	f1b9 0f00 	cmp.w	r9, #0
   b9358:	d0ea      	beq.n	b9330 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b935a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b935c:	2210      	movs	r2, #16
   b935e:	a801      	add	r0, sp, #4
   b9360:	f001 ffa0 	bl	bb2a4 <memset>
                    a.v = 6;
   b9364:	2306      	movs	r3, #6
   b9366:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b936a:	ad01      	add	r5, sp, #4
   b936c:	f104 0308 	add.w	r3, r4, #8
   b9370:	3418      	adds	r4, #24
   b9372:	6818      	ldr	r0, [r3, #0]
   b9374:	6859      	ldr	r1, [r3, #4]
   b9376:	462a      	mov	r2, r5
   b9378:	c203      	stmia	r2!, {r0, r1}
   b937a:	3308      	adds	r3, #8
   b937c:	42a3      	cmp	r3, r4
   b937e:	4615      	mov	r5, r2
   b9380:	d1f7      	bne.n	b9372 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b9382:	a901      	add	r1, sp, #4
   b9384:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b9386:	ad07      	add	r5, sp, #28
   b9388:	f7ff ff18 	bl	b91bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b938c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b938e:	1d3c      	adds	r4, r7, #4
   b9390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9392:	682b      	ldr	r3, [r5, #0]
   b9394:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9396:	4649      	mov	r1, r9
   b9398:	e7ca      	b.n	b9330 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b939a:	9800      	ldr	r0, [sp, #0]
   b939c:	f7fe fb18 	bl	b79d0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b93a0:	4638      	mov	r0, r7
   b93a2:	b015      	add	sp, #84	; 0x54
   b93a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b93a8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b93a8:	4b02      	ldr	r3, [pc, #8]	; (b93b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b93aa:	4a03      	ldr	r2, [pc, #12]	; (b93b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b93ac:	601a      	str	r2, [r3, #0]
   b93ae:	2200      	movs	r2, #0
   b93b0:	605a      	str	r2, [r3, #4]

} // spark
   b93b2:	4770      	bx	lr
   b93b4:	2003e6d4 	.word	0x2003e6d4
   b93b8:	000bda6c 	.word	0x000bda6c

000b93bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b93bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b93be:	4606      	mov	r6, r0
   b93c0:	460d      	mov	r5, r1
  size_t n = 0;
   b93c2:	188f      	adds	r7, r1, r2
   b93c4:	2400      	movs	r4, #0
  while (size--) {
   b93c6:	42bd      	cmp	r5, r7
   b93c8:	d00c      	beq.n	b93e4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b93ca:	6833      	ldr	r3, [r6, #0]
   b93cc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b93d0:	689b      	ldr	r3, [r3, #8]
   b93d2:	4630      	mov	r0, r6
   b93d4:	4798      	blx	r3
     if (chunk>=0)
   b93d6:	1e03      	subs	r3, r0, #0
   b93d8:	db01      	blt.n	b93de <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b93da:	441c      	add	r4, r3
  while (size--) {
   b93dc:	e7f3      	b.n	b93c6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b93de:	2c00      	cmp	r4, #0
   b93e0:	bf08      	it	eq
   b93e2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b93e4:	4620      	mov	r0, r4
   b93e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b93e8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b93e8:	b513      	push	{r0, r1, r4, lr}
   b93ea:	4604      	mov	r4, r0
    }
   b93ec:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b93ee:	b159      	cbz	r1, b9408 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b93f0:	9101      	str	r1, [sp, #4]
   b93f2:	f001 ff9f 	bl	bb334 <strlen>
   b93f6:	6823      	ldr	r3, [r4, #0]
   b93f8:	9901      	ldr	r1, [sp, #4]
   b93fa:	68db      	ldr	r3, [r3, #12]
   b93fc:	4602      	mov	r2, r0
   b93fe:	4620      	mov	r0, r4
    }
   b9400:	b002      	add	sp, #8
   b9402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b9406:	4718      	bx	r3
    }
   b9408:	b002      	add	sp, #8
   b940a:	bd10      	pop	{r4, pc}

000b940c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b940c:	b508      	push	{r3, lr}
  return write(str);
   b940e:	f7ff ffeb 	bl	b93e8 <_ZN5Print5writeEPKc>
}
   b9412:	bd08      	pop	{r3, pc}

000b9414 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b9414:	6803      	ldr	r3, [r0, #0]
   b9416:	689b      	ldr	r3, [r3, #8]
   b9418:	4718      	bx	r3

000b941a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b941a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b941c:	210d      	movs	r1, #13
{
   b941e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b9420:	f7ff fff8 	bl	b9414 <_ZN5Print5printEc>
  n += print('\n');
   b9424:	210a      	movs	r1, #10
  size_t n = print('\r');
   b9426:	4604      	mov	r4, r0
  n += print('\n');
   b9428:	4628      	mov	r0, r5
   b942a:	f7ff fff3 	bl	b9414 <_ZN5Print5printEc>
  return n;
}
   b942e:	4420      	add	r0, r4
   b9430:	bd38      	pop	{r3, r4, r5, pc}

000b9432 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b9432:	b538      	push	{r3, r4, r5, lr}
   b9434:	4605      	mov	r5, r0
  return write(str);
   b9436:	f7ff ffd7 	bl	b93e8 <_ZN5Print5writeEPKc>
   b943a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b943c:	4628      	mov	r0, r5
   b943e:	f7ff ffec 	bl	b941a <_ZN5Print7printlnEv>
  return n;
}
   b9442:	4420      	add	r0, r4
   b9444:	bd38      	pop	{r3, r4, r5, pc}

000b9446 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b9446:	b530      	push	{r4, r5, lr}
   b9448:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b944a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b944c:	2a01      	cmp	r2, #1
  *str = '\0';
   b944e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b9452:	bf98      	it	ls
   b9454:	220a      	movls	r2, #10
   b9456:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b9458:	460d      	mov	r5, r1
   b945a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b945e:	fb01 5312 	mls	r3, r1, r2, r5
   b9462:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9466:	2b09      	cmp	r3, #9
   b9468:	bf94      	ite	ls
   b946a:	3330      	addls	r3, #48	; 0x30
   b946c:	3337      	addhi	r3, #55	; 0x37
   b946e:	b2db      	uxtb	r3, r3
  } while(n);
   b9470:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9472:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b9476:	d9ef      	bls.n	b9458 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9478:	4621      	mov	r1, r4
   b947a:	f7ff ffb5 	bl	b93e8 <_ZN5Print5writeEPKc>
}
   b947e:	b00b      	add	sp, #44	; 0x2c
   b9480:	bd30      	pop	{r4, r5, pc}

000b9482 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b9482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9486:	b086      	sub	sp, #24
   b9488:	af00      	add	r7, sp, #0
   b948a:	4605      	mov	r5, r0
   b948c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b948e:	1d38      	adds	r0, r7, #4
   b9490:	2114      	movs	r1, #20
{
   b9492:	4614      	mov	r4, r2
    va_copy(args2, args);
   b9494:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b9496:	f7fe fc1f 	bl	b7cd8 <vsnprintf>

    if (n<bufsize)
   b949a:	2813      	cmp	r0, #19
   b949c:	d80e      	bhi.n	b94bc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b949e:	1d39      	adds	r1, r7, #4
   b94a0:	4628      	mov	r0, r5
   b94a2:	f7ff ffa1 	bl	b93e8 <_ZN5Print5writeEPKc>
   b94a6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b94a8:	b11e      	cbz	r6, b94b2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b94aa:	4628      	mov	r0, r5
   b94ac:	f7ff ffb5 	bl	b941a <_ZN5Print7printlnEv>
   b94b0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b94b2:	4620      	mov	r0, r4
   b94b4:	3718      	adds	r7, #24
   b94b6:	46bd      	mov	sp, r7
   b94b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b94bc:	f100 0308 	add.w	r3, r0, #8
   b94c0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b94c4:	46e8      	mov	r8, sp
        char bigger[n+1];
   b94c6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b94ca:	4622      	mov	r2, r4
   b94cc:	1c41      	adds	r1, r0, #1
   b94ce:	683b      	ldr	r3, [r7, #0]
   b94d0:	4668      	mov	r0, sp
   b94d2:	f7fe fc01 	bl	b7cd8 <vsnprintf>
  return write(str);
   b94d6:	4669      	mov	r1, sp
   b94d8:	4628      	mov	r0, r5
   b94da:	f7ff ff85 	bl	b93e8 <_ZN5Print5writeEPKc>
   b94de:	4604      	mov	r4, r0
   b94e0:	46c5      	mov	sp, r8
   b94e2:	e7e1      	b.n	b94a8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b94e4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b94e4:	4b01      	ldr	r3, [pc, #4]	; (b94ec <_GLOBAL__sub_I_RGB+0x8>)
   b94e6:	2200      	movs	r2, #0
   b94e8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b94ea:	4770      	bx	lr
   b94ec:	2003e6dc 	.word	0x2003e6dc

000b94f0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b94f0:	b510      	push	{r4, lr}
   b94f2:	4604      	mov	r4, r0
{
	free(buffer);
   b94f4:	6800      	ldr	r0, [r0, #0]
   b94f6:	f7fe fbd7 	bl	b7ca8 <free>
}
   b94fa:	4620      	mov	r0, r4
   b94fc:	bd10      	pop	{r4, pc}

000b94fe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b94fe:	b510      	push	{r4, lr}
   b9500:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b9502:	6800      	ldr	r0, [r0, #0]
   b9504:	b108      	cbz	r0, b950a <_ZN6String10invalidateEv+0xc>
   b9506:	f7fe fbcf 	bl	b7ca8 <free>
	buffer = NULL;
   b950a:	2300      	movs	r3, #0
	capacity = len = 0;
   b950c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b9510:	6023      	str	r3, [r4, #0]
}
   b9512:	bd10      	pop	{r4, pc}

000b9514 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b9514:	b538      	push	{r3, r4, r5, lr}
   b9516:	4604      	mov	r4, r0
   b9518:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b951a:	6800      	ldr	r0, [r0, #0]
   b951c:	3101      	adds	r1, #1
   b951e:	f7fe fbcb 	bl	b7cb8 <realloc>
	if (newbuffer) {
   b9522:	b110      	cbz	r0, b952a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b9524:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b9528:	2001      	movs	r0, #1
	}
	return 0;
}
   b952a:	bd38      	pop	{r3, r4, r5, pc}

000b952c <_ZN6String7reserveEj>:
{
   b952c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b952e:	6803      	ldr	r3, [r0, #0]
{
   b9530:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b9532:	b123      	cbz	r3, b953e <_ZN6String7reserveEj+0x12>
   b9534:	6843      	ldr	r3, [r0, #4]
   b9536:	428b      	cmp	r3, r1
   b9538:	d301      	bcc.n	b953e <_ZN6String7reserveEj+0x12>
   b953a:	2001      	movs	r0, #1
}
   b953c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b953e:	4620      	mov	r0, r4
   b9540:	f7ff ffe8 	bl	b9514 <_ZN6String12changeBufferEj>
   b9544:	2800      	cmp	r0, #0
   b9546:	d0f9      	beq.n	b953c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b9548:	68a3      	ldr	r3, [r4, #8]
   b954a:	2b00      	cmp	r3, #0
   b954c:	d1f5      	bne.n	b953a <_ZN6String7reserveEj+0xe>
   b954e:	6822      	ldr	r2, [r4, #0]
   b9550:	7013      	strb	r3, [r2, #0]
   b9552:	e7f2      	b.n	b953a <_ZN6String7reserveEj+0xe>

000b9554 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b9554:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9556:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b9558:	4611      	mov	r1, r2
   b955a:	9201      	str	r2, [sp, #4]
{
   b955c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b955e:	f7ff ffe5 	bl	b952c <_ZN6String7reserveEj>
   b9562:	9a01      	ldr	r2, [sp, #4]
   b9564:	b928      	cbnz	r0, b9572 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b9566:	4620      	mov	r0, r4
   b9568:	f7ff ffc9 	bl	b94fe <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b956c:	4620      	mov	r0, r4
   b956e:	b003      	add	sp, #12
   b9570:	bd30      	pop	{r4, r5, pc}
	len = length;
   b9572:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b9574:	4629      	mov	r1, r5
   b9576:	6820      	ldr	r0, [r4, #0]
   b9578:	f001 fe6c 	bl	bb254 <memcpy>
	buffer[len] = 0;
   b957c:	6822      	ldr	r2, [r4, #0]
   b957e:	68a3      	ldr	r3, [r4, #8]
   b9580:	2100      	movs	r1, #0
   b9582:	54d1      	strb	r1, [r2, r3]
	return *this;
   b9584:	e7f2      	b.n	b956c <_ZN6String4copyEPKcj+0x18>

000b9586 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b9586:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b9588:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b958a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b958e:	4604      	mov	r4, r0
	len = 0;
   b9590:	6083      	str	r3, [r0, #8]
	flags = 0;
   b9592:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b9594:	b141      	cbz	r1, b95a8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b9596:	4608      	mov	r0, r1
   b9598:	9101      	str	r1, [sp, #4]
   b959a:	f001 fecb 	bl	bb334 <strlen>
   b959e:	9901      	ldr	r1, [sp, #4]
   b95a0:	4602      	mov	r2, r0
   b95a2:	4620      	mov	r0, r4
   b95a4:	f7ff ffd6 	bl	b9554 <_ZN6String4copyEPKcj>
}
   b95a8:	4620      	mov	r0, r4
   b95aa:	b002      	add	sp, #8
   b95ac:	bd10      	pop	{r4, pc}

000b95ae <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b95ae:	b538      	push	{r3, r4, r5, lr}
   b95b0:	4605      	mov	r5, r0
	if (buffer) {
   b95b2:	6800      	ldr	r0, [r0, #0]
{
   b95b4:	460c      	mov	r4, r1
	if (buffer) {
   b95b6:	b168      	cbz	r0, b95d4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b95b8:	686a      	ldr	r2, [r5, #4]
   b95ba:	688b      	ldr	r3, [r1, #8]
   b95bc:	429a      	cmp	r2, r3
   b95be:	d307      	bcc.n	b95d0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b95c0:	6809      	ldr	r1, [r1, #0]
   b95c2:	f001 feaf 	bl	bb324 <strcpy>
			len = rhs.len;
   b95c6:	68a3      	ldr	r3, [r4, #8]
   b95c8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b95ca:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b95cc:	60a3      	str	r3, [r4, #8]
}
   b95ce:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b95d0:	f7fe fb6a 	bl	b7ca8 <free>
	buffer = rhs.buffer;
   b95d4:	6823      	ldr	r3, [r4, #0]
   b95d6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b95d8:	6863      	ldr	r3, [r4, #4]
   b95da:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b95dc:	68a3      	ldr	r3, [r4, #8]
   b95de:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b95e0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b95e2:	e9c4 3300 	strd	r3, r3, [r4]
   b95e6:	e7f1      	b.n	b95cc <_ZN6String4moveERS_+0x1e>

000b95e8 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b95e8:	4288      	cmp	r0, r1
{
   b95ea:	b510      	push	{r4, lr}
   b95ec:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b95ee:	d005      	beq.n	b95fc <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b95f0:	680b      	ldr	r3, [r1, #0]
   b95f2:	b12b      	cbz	r3, b9600 <_ZN6StringaSERKS_+0x18>
   b95f4:	688a      	ldr	r2, [r1, #8]
   b95f6:	4619      	mov	r1, r3
   b95f8:	f7ff ffac 	bl	b9554 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b95fc:	4620      	mov	r0, r4
   b95fe:	bd10      	pop	{r4, pc}
	else invalidate();
   b9600:	f7ff ff7d 	bl	b94fe <_ZN6String10invalidateEv>
   b9604:	e7fa      	b.n	b95fc <_ZN6StringaSERKS_+0x14>

000b9606 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b9606:	4288      	cmp	r0, r1
{
   b9608:	b510      	push	{r4, lr}
   b960a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b960c:	d001      	beq.n	b9612 <_ZN6StringaSEOS_+0xc>
   b960e:	f7ff ffce 	bl	b95ae <_ZN6String4moveERS_>
	return *this;
}
   b9612:	4620      	mov	r0, r4
   b9614:	bd10      	pop	{r4, pc}

000b9616 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b9616:	b513      	push	{r0, r1, r4, lr}
   b9618:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b961a:	b159      	cbz	r1, b9634 <_ZN6StringaSEPKc+0x1e>
   b961c:	4608      	mov	r0, r1
   b961e:	9101      	str	r1, [sp, #4]
   b9620:	f001 fe88 	bl	bb334 <strlen>
   b9624:	9901      	ldr	r1, [sp, #4]
   b9626:	4602      	mov	r2, r0
   b9628:	4620      	mov	r0, r4
   b962a:	f7ff ff93 	bl	b9554 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b962e:	4620      	mov	r0, r4
   b9630:	b002      	add	sp, #8
   b9632:	bd10      	pop	{r4, pc}
	else invalidate();
   b9634:	f7ff ff63 	bl	b94fe <_ZN6String10invalidateEv>
   b9638:	e7f9      	b.n	b962e <_ZN6StringaSEPKc+0x18>

000b963a <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b963a:	b510      	push	{r4, lr}
   b963c:	4604      	mov	r4, r0
   b963e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b9640:	2300      	movs	r3, #0
	capacity = 0;
   b9642:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b9646:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b9648:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b964a:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b964c:	a901      	add	r1, sp, #4
   b964e:	f000 fcff 	bl	ba050 <itoa>
	*this = buf;
   b9652:	a901      	add	r1, sp, #4
   b9654:	4620      	mov	r0, r4
   b9656:	f7ff ffde 	bl	b9616 <_ZN6StringaSEPKc>
}
   b965a:	4620      	mov	r0, r4
   b965c:	b00a      	add	sp, #40	; 0x28
   b965e:	bd10      	pop	{r4, pc}

000b9660 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b9660:	b570      	push	{r4, r5, r6, lr}
   b9662:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b9664:	460e      	mov	r6, r1
   b9666:	b909      	cbnz	r1, b966c <_ZN6String6concatEPKcj+0xc>
   b9668:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b966a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b966c:	b16a      	cbz	r2, b968a <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b966e:	6884      	ldr	r4, [r0, #8]
   b9670:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b9672:	4621      	mov	r1, r4
   b9674:	f7ff ff5a 	bl	b952c <_ZN6String7reserveEj>
   b9678:	2800      	cmp	r0, #0
   b967a:	d0f5      	beq.n	b9668 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b967c:	6828      	ldr	r0, [r5, #0]
   b967e:	68ab      	ldr	r3, [r5, #8]
   b9680:	4631      	mov	r1, r6
   b9682:	4418      	add	r0, r3
   b9684:	f001 fe4e 	bl	bb324 <strcpy>
	len = newlen;
   b9688:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b968a:	2001      	movs	r0, #1
   b968c:	e7ed      	b.n	b966a <_ZN6String6concatEPKcj+0xa>

000b968e <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b968e:	688a      	ldr	r2, [r1, #8]
   b9690:	6809      	ldr	r1, [r1, #0]
   b9692:	f7ff bfe5 	b.w	b9660 <_ZN6String6concatEPKcj>

000b9696 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b9696:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b9698:	2300      	movs	r3, #0
	buf[0] = c;
   b969a:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b969e:	2201      	movs	r2, #1
   b96a0:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b96a2:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b96a6:	f7ff ffdb 	bl	b9660 <_ZN6String6concatEPKcj>
}
   b96aa:	b003      	add	sp, #12
   b96ac:	f85d fb04 	ldr.w	pc, [sp], #4

000b96b0 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b96b0:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b96b2:	688a      	ldr	r2, [r1, #8]
   b96b4:	6809      	ldr	r1, [r1, #0]
{
   b96b6:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b96b8:	f7ff ffd2 	bl	b9660 <_ZN6String6concatEPKcj>
   b96bc:	b910      	cbnz	r0, b96c4 <_ZplRK15StringSumHelperRK6String+0x14>
   b96be:	4620      	mov	r0, r4
   b96c0:	f7ff ff1d 	bl	b94fe <_ZN6String10invalidateEv>
	return a;
}
   b96c4:	4620      	mov	r0, r4
   b96c6:	bd10      	pop	{r4, pc}

000b96c8 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b96c8:	6802      	ldr	r2, [r0, #0]
{
   b96ca:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b96cc:	6809      	ldr	r1, [r1, #0]
   b96ce:	b162      	cbz	r2, b96ea <_ZNK6String9compareToERKS_+0x22>
   b96d0:	b941      	cbnz	r1, b96e4 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b96d2:	6880      	ldr	r0, [r0, #8]
   b96d4:	b160      	cbz	r0, b96f0 <_ZNK6String9compareToERKS_+0x28>
   b96d6:	7810      	ldrb	r0, [r2, #0]
   b96d8:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b96da:	6898      	ldr	r0, [r3, #8]
   b96dc:	b140      	cbz	r0, b96f0 <_ZNK6String9compareToERKS_+0x28>
   b96de:	7809      	ldrb	r1, [r1, #0]
   b96e0:	4248      	negs	r0, r1
   b96e2:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b96e4:	4610      	mov	r0, r2
   b96e6:	f001 be13 	b.w	bb310 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b96ea:	2900      	cmp	r1, #0
   b96ec:	d1f5      	bne.n	b96da <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b96ee:	4608      	mov	r0, r1
}
   b96f0:	4770      	bx	lr

000b96f2 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b96f2:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b96f4:	6882      	ldr	r2, [r0, #8]
   b96f6:	688b      	ldr	r3, [r1, #8]
   b96f8:	429a      	cmp	r2, r3
   b96fa:	d105      	bne.n	b9708 <_ZNK6String6equalsERKS_+0x16>
   b96fc:	f7ff ffe4 	bl	b96c8 <_ZNK6String9compareToERKS_>
   b9700:	fab0 f080 	clz	r0, r0
   b9704:	0940      	lsrs	r0, r0, #5
}
   b9706:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b9708:	2000      	movs	r0, #0
   b970a:	e7fc      	b.n	b9706 <_ZNK6String6equalsERKS_+0x14>

000b970c <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   b970c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b970e:	6882      	ldr	r2, [r0, #8]
   b9710:	b93a      	cbnz	r2, b9722 <_ZNK6String6equalsEPKc+0x16>
   b9712:	b121      	cbz	r1, b971e <_ZNK6String6equalsEPKc+0x12>
   b9714:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b9716:	fab0 f080 	clz	r0, r0
   b971a:	0940      	lsrs	r0, r0, #5
   b971c:	e000      	b.n	b9720 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b971e:	2001      	movs	r0, #1
}
   b9720:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b9722:	6800      	ldr	r0, [r0, #0]
   b9724:	b909      	cbnz	r1, b972a <_ZNK6String6equalsEPKc+0x1e>
   b9726:	7800      	ldrb	r0, [r0, #0]
   b9728:	e7f5      	b.n	b9716 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b972a:	f001 fdf1 	bl	bb310 <strcmp>
   b972e:	e7f2      	b.n	b9716 <_ZNK6String6equalsEPKc+0xa>

000b9730 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b9730:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b9732:	6883      	ldr	r3, [r0, #8]
   b9734:	4293      	cmp	r3, r2
   b9736:	d907      	bls.n	b9748 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b9738:	6804      	ldr	r4, [r0, #0]
   b973a:	6809      	ldr	r1, [r1, #0]
   b973c:	18a0      	adds	r0, r4, r2
   b973e:	f001 fe21 	bl	bb384 <strstr>
	if (found == NULL) return -1;
   b9742:	b108      	cbz	r0, b9748 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b9744:	1b00      	subs	r0, r0, r4
}
   b9746:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b9748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b974c:	e7fb      	b.n	b9746 <_ZNK6String7indexOfERKS_j+0x16>

000b974e <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b974e:	2200      	movs	r2, #0
   b9750:	f7ff bfee 	b.w	b9730 <_ZNK6String7indexOfERKS_j>

000b9754 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b9754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b9756:	429a      	cmp	r2, r3
{
   b9758:	460f      	mov	r7, r1
   b975a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b975c:	490c      	ldr	r1, [pc, #48]	; (b9790 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b975e:	bf88      	it	hi
   b9760:	4613      	movhi	r3, r2
{
   b9762:	4614      	mov	r4, r2
   b9764:	4606      	mov	r6, r0
	if (left > right) {
   b9766:	bf84      	itt	hi
   b9768:	462c      	movhi	r4, r5
   b976a:	461d      	movhi	r5, r3
	String out;
   b976c:	f7ff ff0b 	bl	b9586 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b9770:	68bb      	ldr	r3, [r7, #8]
   b9772:	42a3      	cmp	r3, r4
   b9774:	d30a      	bcc.n	b978c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b9776:	6839      	ldr	r1, [r7, #0]
   b9778:	42ab      	cmp	r3, r5
   b977a:	bf94      	ite	ls
   b977c:	ebc4 0203 	rsbls	r2, r4, r3
   b9780:	ebc4 0205 	rsbhi	r2, r4, r5
   b9784:	4421      	add	r1, r4
   b9786:	4630      	mov	r0, r6
   b9788:	f7ff fee4 	bl	b9554 <_ZN6String4copyEPKcj>
	return out;
}
   b978c:	4630      	mov	r0, r6
   b978e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9790:	000bd7d2 	.word	0x000bd7d2

000b9794 <_ZNK6String9substringEj>:
{
   b9794:	b510      	push	{r4, lr}
   b9796:	4604      	mov	r4, r0
	return substring(left, len);
   b9798:	688b      	ldr	r3, [r1, #8]
   b979a:	f7ff ffdb 	bl	b9754 <_ZNK6String9substringEjj>
}
   b979e:	4620      	mov	r0, r4
   b97a0:	bd10      	pop	{r4, pc}
	...

000b97a4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b97a4:	4b05      	ldr	r3, [pc, #20]	; (b97bc <_GLOBAL__sub_I_System+0x18>)
   b97a6:	2202      	movs	r2, #2
   b97a8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b97aa:	4b05      	ldr	r3, [pc, #20]	; (b97c0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b97ac:	4a05      	ldr	r2, [pc, #20]	; (b97c4 <_GLOBAL__sub_I_System+0x20>)
   b97ae:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b97b0:	2000      	movs	r0, #0
   b97b2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b97b6:	f7fe b9cb 	b.w	b7b50 <set_system_mode>
   b97ba:	bf00      	nop
   b97bc:	2003e6f8 	.word	0x2003e6f8
   b97c0:	2003e6ec 	.word	0x2003e6ec
   b97c4:	ffff0000 	.word	0xffff0000

000b97c8 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b97c8:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b97ca:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b97cc:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b97d0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b97d2:	2201      	movs	r2, #1
   b97d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b97d8:	f10d 0107 	add.w	r1, sp, #7
   b97dc:	47a0      	blx	r4
}
   b97de:	b002      	add	sp, #8
   b97e0:	bd10      	pop	{r4, pc}

000b97e2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b97e2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b97e4:	6803      	ldr	r3, [r0, #0]
   b97e6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b97e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b97ec:	46a4      	mov	ip, r4
}
   b97ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b97f2:	4760      	bx	ip

000b97f4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b97f4:	b513      	push	{r0, r1, r4, lr}
   b97f6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b97f8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b97fa:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b97fe:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b9800:	f10d 0107 	add.w	r1, sp, #7
   b9804:	2201      	movs	r2, #1
   b9806:	47a0      	blx	r4
}
   b9808:	b002      	add	sp, #8
   b980a:	bd10      	pop	{r4, pc}

000b980c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b980c:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b980e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9810:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9814:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9818:	429a      	cmp	r2, r3
int TCPClient::read() {
   b981a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b981c:	d008      	beq.n	b9830 <_ZN9TCPClient4readEv+0x24>
   b981e:	6963      	ldr	r3, [r4, #20]
   b9820:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9824:	1c51      	adds	r1, r2, #1
   b9826:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b982a:	4413      	add	r3, r2
   b982c:	7918      	ldrb	r0, [r3, #4]
}
   b982e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9830:	6803      	ldr	r3, [r0, #0]
   b9832:	691b      	ldr	r3, [r3, #16]
   b9834:	4798      	blx	r3
   b9836:	2800      	cmp	r0, #0
   b9838:	d1f1      	bne.n	b981e <_ZN9TCPClient4readEv+0x12>
   b983a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b983e:	e7f6      	b.n	b982e <_ZN9TCPClient4readEv+0x22>

000b9840 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b9840:	4770      	bx	lr

000b9842 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b9842:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b9844:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b9846:	43c0      	mvns	r0, r0
   b9848:	0fc0      	lsrs	r0, r0, #31
   b984a:	4770      	bx	lr

000b984c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b984c:	4770      	bx	lr
	...

000b9850 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9850:	4b06      	ldr	r3, [pc, #24]	; (b986c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9852:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9854:	b510      	push	{r4, lr}
   b9856:	f100 040c 	add.w	r4, r0, #12
	    ||
   b985a:	d005      	beq.n	b9868 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b985c:	4608      	mov	r0, r1
   b985e:	f000 fd1d 	bl	ba29c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9862:	2800      	cmp	r0, #0
   b9864:	bf08      	it	eq
   b9866:	2400      	moveq	r4, #0
      }
   b9868:	4620      	mov	r0, r4
   b986a:	bd10      	pop	{r4, pc}
   b986c:	000bd9a8 	.word	0x000bd9a8

000b9870 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9870:	b510      	push	{r4, lr}
   b9872:	21ac      	movs	r1, #172	; 0xac
   b9874:	4604      	mov	r4, r0
   b9876:	f7fa fc14 	bl	b40a2 <_ZdlPvj>
   b987a:	4620      	mov	r0, r4
   b987c:	bd10      	pop	{r4, pc}

000b987e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b987e:	21ac      	movs	r1, #172	; 0xac
   b9880:	f7fa bc0f 	b.w	b40a2 <_ZdlPvj>

000b9884 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b9884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b9888:	f04f 0800 	mov.w	r8, #0
   b988c:	b086      	sub	sp, #24
   b988e:	461c      	mov	r4, r3
   b9890:	f8c0 8004 	str.w	r8, [r0, #4]
   b9894:	4605      	mov	r5, r0
   b9896:	460e      	mov	r6, r1
   b9898:	4617      	mov	r7, r2
    struct timeval tv = {};
   b989a:	4641      	mov	r1, r8
   b989c:	2210      	movs	r2, #16
   b989e:	a802      	add	r0, sp, #8
   b98a0:	f001 fd00 	bl	bb2a4 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b98a4:	1c63      	adds	r3, r4, #1
   b98a6:	d009      	beq.n	b98bc <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b98a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b98ac:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b98b0:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b98b4:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b98b8:	435c      	muls	r4, r3
   b98ba:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b98bc:	6968      	ldr	r0, [r5, #20]
   b98be:	2310      	movs	r3, #16
   b98c0:	9300      	str	r3, [sp, #0]
   b98c2:	6800      	ldr	r0, [r0, #0]
   b98c4:	ab02      	add	r3, sp, #8
   b98c6:	f241 0205 	movw	r2, #4101	; 0x1005
   b98ca:	f640 71ff 	movw	r1, #4095	; 0xfff
   b98ce:	f7fe f88f 	bl	b79f0 <sock_setsockopt>
    if (ret < 0) {
   b98d2:	2800      	cmp	r0, #0
   b98d4:	da07      	bge.n	b98e6 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b98d6:	f7fe fa17 	bl	b7d08 <__errno>
   b98da:	6803      	ldr	r3, [r0, #0]
   b98dc:	606b      	str	r3, [r5, #4]
        return 0;
   b98de:	2000      	movs	r0, #0
}
   b98e0:	b006      	add	sp, #24
   b98e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b98e6:	6968      	ldr	r0, [r5, #20]
   b98e8:	2300      	movs	r3, #0
   b98ea:	6800      	ldr	r0, [r0, #0]
   b98ec:	463a      	mov	r2, r7
   b98ee:	4631      	mov	r1, r6
   b98f0:	f7fe f89e 	bl	b7a30 <sock_send>
    if (ret < 0) {
   b98f4:	1e03      	subs	r3, r0, #0
   b98f6:	dbee      	blt.n	b98d6 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b98f8:	4618      	mov	r0, r3
   b98fa:	e7f1      	b.n	b98e0 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b98fc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b98fc:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b98fe:	6984      	ldr	r4, [r0, #24]
   b9900:	4b0a      	ldr	r3, [pc, #40]	; (b992c <_ZN9TCPClientD1Ev+0x30>)
   b9902:	6003      	str	r3, [r0, #0]
   b9904:	4605      	mov	r5, r0
   b9906:	b17c      	cbz	r4, b9928 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b9908:	6863      	ldr	r3, [r4, #4]
   b990a:	3b01      	subs	r3, #1
   b990c:	6063      	str	r3, [r4, #4]
   b990e:	b95b      	cbnz	r3, b9928 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b9910:	6823      	ldr	r3, [r4, #0]
   b9912:	4620      	mov	r0, r4
   b9914:	689b      	ldr	r3, [r3, #8]
   b9916:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b9918:	68a3      	ldr	r3, [r4, #8]
   b991a:	3b01      	subs	r3, #1
   b991c:	60a3      	str	r3, [r4, #8]
   b991e:	b91b      	cbnz	r3, b9928 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b9920:	6823      	ldr	r3, [r4, #0]
   b9922:	4620      	mov	r0, r4
   b9924:	68db      	ldr	r3, [r3, #12]
   b9926:	4798      	blx	r3
   b9928:	4628      	mov	r0, r5
   b992a:	bd38      	pop	{r3, r4, r5, pc}
   b992c:	000bdadc 	.word	0x000bdadc

000b9930 <_ZN9TCPClientD0Ev>:
   b9930:	b510      	push	{r4, lr}
   b9932:	4604      	mov	r4, r0
   b9934:	f7ff ffe2 	bl	b98fc <_ZN9TCPClientD1Ev>
   b9938:	4620      	mov	r0, r4
   b993a:	211c      	movs	r1, #28
   b993c:	f7fa fbb1 	bl	b40a2 <_ZdlPvj>
   b9940:	4620      	mov	r0, r4
   b9942:	bd10      	pop	{r4, pc}

000b9944 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b9944:	b530      	push	{r4, r5, lr}
   b9946:	b087      	sub	sp, #28
   b9948:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b994a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b994c:	4668      	mov	r0, sp
   b994e:	f7ff fc6b 	bl	b9228 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9954:	3404      	adds	r4, #4
   b9956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9958:	682b      	ldr	r3, [r5, #0]
   b995a:	7023      	strb	r3, [r4, #0]
    }
   b995c:	b007      	add	sp, #28
   b995e:	bd30      	pop	{r4, r5, pc}

000b9960 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b9960:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b9962:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b9964:	4b05      	ldr	r3, [pc, #20]	; (b997c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b9966:	4604      	mov	r4, r0
   b9968:	358c      	adds	r5, #140	; 0x8c
   b996a:	f844 3b04 	str.w	r3, [r4], #4
   b996e:	4606      	mov	r6, r0
   b9970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9974:	682b      	ldr	r3, [r5, #0]
   b9976:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b9978:	4630      	mov	r0, r6
   b997a:	bd70      	pop	{r4, r5, r6, pc}
   b997c:	000bda54 	.word	0x000bda54

000b9980 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9984:	4698      	mov	r8, r3
    stop();
   b9986:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9988:	b093      	sub	sp, #76	; 0x4c
   b998a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b998c:	2400      	movs	r4, #0
    stop();
   b998e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9990:	4606      	mov	r6, r0
   b9992:	4617      	mov	r7, r2
    stop();
   b9994:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9996:	4628      	mov	r0, r5
   b9998:	466b      	mov	r3, sp
   b999a:	4622      	mov	r2, r4
   b999c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b999e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b99a0:	f7fe f81e 	bl	b79e0 <netdb_getaddrinfo>
   b99a4:	4605      	mov	r5, r0
   b99a6:	2800      	cmp	r0, #0
   b99a8:	d163      	bne.n	b9a72 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b99aa:	9b00      	ldr	r3, [sp, #0]
   b99ac:	2b00      	cmp	r3, #0
   b99ae:	d04b      	beq.n	b9a48 <_ZN9TCPClient7connectEPKctm+0xc8>
   b99b0:	695b      	ldr	r3, [r3, #20]
   b99b2:	2b00      	cmp	r3, #0
   b99b4:	d048      	beq.n	b9a48 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b99b6:	a806      	add	r0, sp, #24
   b99b8:	f7ff fbf2 	bl	b91a0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b99bc:	9b00      	ldr	r3, [sp, #0]
   b99be:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b99c0:	7863      	ldrb	r3, [r4, #1]
   b99c2:	2b02      	cmp	r3, #2
   b99c4:	d104      	bne.n	b99d0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b99c6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b99c8:	a806      	add	r0, sp, #24
   b99ca:	f7ff ffbb 	bl	b9944 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b99ce:	e026      	b.n	b9a1e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b99d0:	2b0a      	cmp	r3, #10
   b99d2:	d124      	bne.n	b9a1e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b99d4:	2211      	movs	r2, #17
   b99d6:	4629      	mov	r1, r5
   b99d8:	a801      	add	r0, sp, #4
   b99da:	f001 fc63 	bl	bb2a4 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b99de:	68a3      	ldr	r3, [r4, #8]
   b99e0:	2b00      	cmp	r3, #0
   b99e2:	d038      	beq.n	b9a56 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b99e4:	f104 0308 	add.w	r3, r4, #8
   b99e8:	f10d 0c04 	add.w	ip, sp, #4
   b99ec:	3418      	adds	r4, #24
   b99ee:	6818      	ldr	r0, [r3, #0]
   b99f0:	6859      	ldr	r1, [r3, #4]
   b99f2:	4662      	mov	r2, ip
   b99f4:	c203      	stmia	r2!, {r0, r1}
   b99f6:	3308      	adds	r3, #8
   b99f8:	42a3      	cmp	r3, r4
   b99fa:	4694      	mov	ip, r2
   b99fc:	d1f7      	bne.n	b99ee <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b99fe:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b9a00:	a901      	add	r1, sp, #4
   b9a02:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b9a04:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b9a08:	f7ff fbd8 	bl	b91bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9a0c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9a10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9a14:	ac07      	add	r4, sp, #28
   b9a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9a18:	f8dc 3000 	ldr.w	r3, [ip]
   b9a1c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b9a1e:	a806      	add	r0, sp, #24
   b9a20:	f7ff fbde 	bl	b91e0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b9a24:	b180      	cbz	r0, b9a48 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b9a26:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b9a28:	ad07      	add	r5, sp, #28
   b9a2a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b9a2e:	4b12      	ldr	r3, [pc, #72]	; (b9a78 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b9a30:	930c      	str	r3, [sp, #48]	; 0x30
   b9a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9a34:	ac0d      	add	r4, sp, #52	; 0x34
   b9a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9a38:	682b      	ldr	r3, [r5, #0]
   b9a3a:	7023      	strb	r3, [r4, #0]
   b9a3c:	463a      	mov	r2, r7
   b9a3e:	4643      	mov	r3, r8
   b9a40:	a90c      	add	r1, sp, #48	; 0x30
   b9a42:	4630      	mov	r0, r6
   b9a44:	47c8      	blx	r9
   b9a46:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b9a48:	9800      	ldr	r0, [sp, #0]
   b9a4a:	f7fd ffc1 	bl	b79d0 <netdb_freeaddrinfo>
}
   b9a4e:	4628      	mov	r0, r5
   b9a50:	b013      	add	sp, #76	; 0x4c
   b9a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9a56:	68e3      	ldr	r3, [r4, #12]
   b9a58:	2b00      	cmp	r3, #0
   b9a5a:	d1c3      	bne.n	b99e4 <_ZN9TCPClient7connectEPKctm+0x64>
   b9a5c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9a60:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b9a64:	f7fd ffa4 	bl	b79b0 <inet_htonl>
   b9a68:	4581      	cmp	r9, r0
   b9a6a:	d1bb      	bne.n	b99e4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b9a6c:	f104 0114 	add.w	r1, r4, #20
   b9a70:	e7aa      	b.n	b99c8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9a72:	4625      	mov	r5, r4
   b9a74:	e7e8      	b.n	b9a48 <_ZN9TCPClient7connectEPKctm+0xc8>
   b9a76:	bf00      	nop
   b9a78:	000bda54 	.word	0x000bda54

000b9a7c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b9a7c:	b538      	push	{r3, r4, r5, lr}
   b9a7e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b9a80:	681a      	ldr	r2, [r3, #0]
   b9a82:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b9a84:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b9a86:	da10      	bge.n	b9aaa <_ZN9TCPClient9connectedEv+0x2e>
   b9a88:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9a8c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9a90:	429a      	cmp	r2, r3
   b9a92:	d10a      	bne.n	b9aaa <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b9a94:	6803      	ldr	r3, [r0, #0]
   b9a96:	691b      	ldr	r3, [r3, #16]
   b9a98:	4798      	blx	r3
        if (!rv) {
   b9a9a:	4604      	mov	r4, r0
   b9a9c:	b928      	cbnz	r0, b9aaa <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b9a9e:	682b      	ldr	r3, [r5, #0]
   b9aa0:	4628      	mov	r0, r5
   b9aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9aa4:	4798      	blx	r3
        rv = available();
   b9aa6:	4620      	mov	r0, r4
}
   b9aa8:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b9aaa:	2001      	movs	r0, #1
   b9aac:	e7fc      	b.n	b9aa8 <_ZN9TCPClient9connectedEv+0x2c>

000b9aae <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b9aae:	b510      	push	{r4, lr}
   b9ab0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9ab2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9ab6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9aba:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b9abc:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9abe:	d005      	beq.n	b9acc <_ZN9TCPClient4peekEv+0x1e>
   b9ac0:	6963      	ldr	r3, [r4, #20]
   b9ac2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9ac6:	4413      	add	r3, r2
   b9ac8:	7918      	ldrb	r0, [r3, #4]
}
   b9aca:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9acc:	6803      	ldr	r3, [r0, #0]
   b9ace:	691b      	ldr	r3, [r3, #16]
   b9ad0:	4798      	blx	r3
   b9ad2:	2800      	cmp	r0, #0
   b9ad4:	d1f4      	bne.n	b9ac0 <_ZN9TCPClient4peekEv+0x12>
   b9ad6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9ada:	e7f6      	b.n	b9aca <_ZN9TCPClient4peekEv+0x1c>

000b9adc <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9ade:	6943      	ldr	r3, [r0, #20]
   b9ae0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b9ae2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9ae6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9aea:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9aec:	4605      	mov	r5, r0
   b9aee:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b9af0:	d016      	beq.n	b9b20 <_ZN9TCPClient4readEPhj+0x44>
   b9af2:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b9af4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b9af8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b9afc:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b9afe:	42bc      	cmp	r4, r7
   b9b00:	bf28      	it	cs
   b9b02:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b9b04:	3304      	adds	r3, #4
   b9b06:	4622      	mov	r2, r4
   b9b08:	4419      	add	r1, r3
   b9b0a:	4630      	mov	r0, r6
   b9b0c:	f001 fba2 	bl	bb254 <memcpy>
   b9b10:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b9b12:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b9b16:	4423      	add	r3, r4
   b9b18:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b9b1c:	4620      	mov	r0, r4
   b9b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b9b20:	6803      	ldr	r3, [r0, #0]
   b9b22:	691b      	ldr	r3, [r3, #16]
   b9b24:	4798      	blx	r3
   b9b26:	2800      	cmp	r0, #0
   b9b28:	d1e3      	bne.n	b9af2 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b9b2a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9b2e:	e7f5      	b.n	b9b1c <_ZN9TCPClient4readEPhj+0x40>

000b9b30 <_ZN9TCPClient12flush_bufferEv>:
   b9b30:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b9b32:	2300      	movs	r3, #0
   b9b34:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9b38:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b9b3a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b9b3e:	4770      	bx	lr

000b9b40 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9b44:	461f      	mov	r7, r3
    stop();
   b9b46:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9b48:	460c      	mov	r4, r1
    stop();
   b9b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9b4c:	b08a      	sub	sp, #40	; 0x28
   b9b4e:	4605      	mov	r5, r0
   b9b50:	4616      	mov	r6, r2
    stop();
   b9b52:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b9b54:	7d23      	ldrb	r3, [r4, #20]
   b9b56:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b9b5a:	2b04      	cmp	r3, #4
   b9b5c:	bf0c      	ite	eq
   b9b5e:	2002      	moveq	r0, #2
   b9b60:	200a      	movne	r0, #10
   b9b62:	2206      	movs	r2, #6
   b9b64:	2101      	movs	r1, #1
   b9b66:	f7fd ff6b 	bl	b7a40 <sock_socket>
   b9b6a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b9b6e:	696b      	ldr	r3, [r5, #20]
   b9b70:	681b      	ldr	r3, [r3, #0]
   b9b72:	2b00      	cmp	r3, #0
   b9b74:	da08      	bge.n	b9b88 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b9b76:	682b      	ldr	r3, [r5, #0]
   b9b78:	4628      	mov	r0, r5
   b9b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9b7c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b9b7e:	4798      	blx	r3
}
   b9b80:	4620      	mov	r0, r4
   b9b82:	b00a      	add	sp, #40	; 0x28
   b9b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b9b88:	4628      	mov	r0, r5
   b9b8a:	f7ff ffd1 	bl	b9b30 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b9b8e:	b1b7      	cbz	r7, b9bbe <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b9b90:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9b92:	a903      	add	r1, sp, #12
   b9b94:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b9b96:	9303      	str	r3, [sp, #12]
   b9b98:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9b9c:	f7fd fef8 	bl	b7990 <if_index_to_name>
   b9ba0:	2800      	cmp	r0, #0
   b9ba2:	d1e8      	bne.n	b9b76 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b9ba4:	6968      	ldr	r0, [r5, #20]
   b9ba6:	2306      	movs	r3, #6
   b9ba8:	9300      	str	r3, [sp, #0]
   b9baa:	6800      	ldr	r0, [r0, #0]
   b9bac:	ab03      	add	r3, sp, #12
   b9bae:	f241 020b 	movw	r2, #4107	; 0x100b
   b9bb2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9bb6:	f7fd ff1b 	bl	b79f0 <sock_setsockopt>
   b9bba:	2800      	cmp	r0, #0
   b9bbc:	d1db      	bne.n	b9b76 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b9bbe:	221c      	movs	r2, #28
   b9bc0:	2100      	movs	r1, #0
   b9bc2:	a803      	add	r0, sp, #12
   b9bc4:	f001 fb6e 	bl	bb2a4 <memset>
    if (ip.version() == 4) {
   b9bc8:	7d23      	ldrb	r3, [r4, #20]
   b9bca:	2b04      	cmp	r3, #4
   b9bcc:	d11d      	bne.n	b9c0a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b9bce:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b9bd2:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b9bd4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b9bd8:	f7fd fef2 	bl	b79c0 <inet_htons>
   b9bdc:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b9be0:	6860      	ldr	r0, [r4, #4]
   b9be2:	f7fd fee5 	bl	b79b0 <inet_htonl>
   b9be6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b9be8:	696b      	ldr	r3, [r5, #20]
   b9bea:	221c      	movs	r2, #28
   b9bec:	6818      	ldr	r0, [r3, #0]
   b9bee:	a903      	add	r1, sp, #12
   b9bf0:	f7fd ff0e 	bl	b7a10 <sock_connect>
   b9bf4:	2800      	cmp	r0, #0
   b9bf6:	d1be      	bne.n	b9b76 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b9bf8:	3404      	adds	r4, #4
   b9bfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9bfc:	696d      	ldr	r5, [r5, #20]
   b9bfe:	358c      	adds	r5, #140	; 0x8c
   b9c00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9c02:	6823      	ldr	r3, [r4, #0]
   b9c04:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b9c06:	2401      	movs	r4, #1
   b9c08:	e7ba      	b.n	b9b80 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b9c0a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b9c0e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b9c10:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b9c14:	f7fd fed4 	bl	b79c0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9c18:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b9c1a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9c1e:	1d23      	adds	r3, r4, #4
   b9c20:	f104 0714 	add.w	r7, r4, #20
   b9c24:	6818      	ldr	r0, [r3, #0]
   b9c26:	6859      	ldr	r1, [r3, #4]
   b9c28:	4632      	mov	r2, r6
   b9c2a:	c203      	stmia	r2!, {r0, r1}
   b9c2c:	3308      	adds	r3, #8
   b9c2e:	42bb      	cmp	r3, r7
   b9c30:	4616      	mov	r6, r2
   b9c32:	d1f7      	bne.n	b9c24 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b9c34:	e7d8      	b.n	b9be8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b9c38 <_ZN9TCPClient9availableEv>:
{
   b9c38:	b530      	push	{r4, r5, lr}
   b9c3a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b9c3c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b9c40:	b08b      	sub	sp, #44	; 0x2c
   b9c42:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b9c44:	b12b      	cbz	r3, b9c52 <_ZN9TCPClient9availableEv+0x1a>
   b9c46:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b9c4a:	429a      	cmp	r2, r3
   b9c4c:	d101      	bne.n	b9c52 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b9c4e:	f7ff ff6f 	bl	b9b30 <_ZN9TCPClient12flush_bufferEv>
   b9c52:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b9c54:	6808      	ldr	r0, [r1, #0]
   b9c56:	2800      	cmp	r0, #0
   b9c58:	db18      	blt.n	b9c8c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b9c5a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b9c5e:	2d7f      	cmp	r5, #127	; 0x7f
   b9c60:	d814      	bhi.n	b9c8c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b9c62:	3104      	adds	r1, #4
   b9c64:	2308      	movs	r3, #8
   b9c66:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b9c6a:	4429      	add	r1, r5
   b9c6c:	f7fd fed8 	bl	b7a20 <sock_recv>
            if (ret > 0) {
   b9c70:	2800      	cmp	r0, #0
   b9c72:	dd13      	ble.n	b9c9c <_ZN9TCPClient9availableEv+0x64>
   b9c74:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b9c76:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9c7a:	b90a      	cbnz	r2, b9c80 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b9c7c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b9c80:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b9c82:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9c86:	4410      	add	r0, r2
   b9c88:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b9c8c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b9c8e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b9c92:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b9c96:	1ac0      	subs	r0, r0, r3
   b9c98:	b00b      	add	sp, #44	; 0x2c
   b9c9a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b9c9c:	f7fe f834 	bl	b7d08 <__errno>
   b9ca0:	6803      	ldr	r3, [r0, #0]
   b9ca2:	2b0b      	cmp	r3, #11
   b9ca4:	d0f2      	beq.n	b9c8c <_ZN9TCPClient9availableEv+0x54>
   b9ca6:	f7fe f82f 	bl	b7d08 <__errno>
   b9caa:	6803      	ldr	r3, [r0, #0]
   b9cac:	2b0b      	cmp	r3, #11
   b9cae:	d0ed      	beq.n	b9c8c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b9cb0:	2320      	movs	r3, #32
   b9cb2:	2500      	movs	r5, #0
   b9cb4:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b9cb8:	f7fe f826 	bl	b7d08 <__errno>
   b9cbc:	6803      	ldr	r3, [r0, #0]
   b9cbe:	9301      	str	r3, [sp, #4]
   b9cc0:	4b08      	ldr	r3, [pc, #32]	; (b9ce4 <_ZN9TCPClient9availableEv+0xac>)
   b9cc2:	4909      	ldr	r1, [pc, #36]	; (b9ce8 <_ZN9TCPClient9availableEv+0xb0>)
   b9cc4:	9300      	str	r3, [sp, #0]
   b9cc6:	aa02      	add	r2, sp, #8
   b9cc8:	462b      	mov	r3, r5
   b9cca:	2032      	movs	r0, #50	; 0x32
   b9ccc:	f7fd ff38 	bl	b7b40 <log_message>
                    sock_close(d_->sock);
   b9cd0:	6963      	ldr	r3, [r4, #20]
   b9cd2:	6818      	ldr	r0, [r3, #0]
   b9cd4:	f7fd fe94 	bl	b7a00 <sock_close>
   b9cd8:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b9cda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9cde:	601a      	str	r2, [r3, #0]
   b9ce0:	e7d4      	b.n	b9c8c <_ZN9TCPClient9availableEv+0x54>
   b9ce2:	bf00      	nop
   b9ce4:	000bdaa7 	.word	0x000bdaa7
   b9ce8:	000bdaa0 	.word	0x000bdaa0

000b9cec <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b9cec:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b9cee:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b9cf0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b9cf2:	6818      	ldr	r0, [r3, #0]
   b9cf4:	2800      	cmp	r0, #0
   b9cf6:	db01      	blt.n	b9cfc <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b9cf8:	f7fd fe82 	bl	b7a00 <sock_close>
   b9cfc:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b9cfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9d02:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b9d04:	6960      	ldr	r0, [r4, #20]
   b9d06:	2211      	movs	r2, #17
   b9d08:	2100      	movs	r1, #0
   b9d0a:	308c      	adds	r0, #140	; 0x8c
   b9d0c:	f001 faca 	bl	bb2a4 <memset>
    flush_buffer();
   b9d10:	4620      	mov	r0, r4
}
   b9d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b9d16:	f7ff bf0b 	b.w	b9b30 <_ZN9TCPClient12flush_bufferEv>

000b9d1a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b9d1a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b9d1c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b9d1e:	4604      	mov	r4, r0
          total(0) {
   b9d20:	6001      	str	r1, [r0, #0]
   b9d22:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b9d26:	3088      	adds	r0, #136	; 0x88
   b9d28:	f7ff fa3a 	bl	b91a0 <_ZN9IPAddressC1Ev>
}
   b9d2c:	4620      	mov	r0, r4
   b9d2e:	bd10      	pop	{r4, pc}

000b9d30 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b9d30:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9d32:	2300      	movs	r3, #0
   b9d34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9d38:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b9d3c:	4a0e      	ldr	r2, [pc, #56]	; (b9d78 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b9d3e:	6103      	str	r3, [r0, #16]
   b9d40:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9d42:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b9d44:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9d46:	20ac      	movs	r0, #172	; 0xac
   b9d48:	9101      	str	r1, [sp, #4]
   b9d4a:	f7fa f9a4 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9d4e:	1e05      	subs	r5, r0, #0
   b9d50:	f105 060c 	add.w	r6, r5, #12
   b9d54:	d008      	beq.n	b9d68 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b9d56:	2301      	movs	r3, #1
   b9d58:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9d5c:	4b07      	ldr	r3, [pc, #28]	; (b9d7c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9d5e:	9901      	ldr	r1, [sp, #4]
   b9d60:	602b      	str	r3, [r5, #0]
   b9d62:	4630      	mov	r0, r6
   b9d64:	f7ff ffd9 	bl	b9d1a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b9d68:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b9d6a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b9d6e:	f7ff fedf 	bl	b9b30 <_ZN9TCPClient12flush_bufferEv>
}
   b9d72:	b002      	add	sp, #8
   b9d74:	bd70      	pop	{r4, r5, r6, pc}
   b9d76:	bf00      	nop
   b9d78:	000bdadc 	.word	0x000bdadc
   b9d7c:	000bdac0 	.word	0x000bdac0

000b9d80 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b9d80:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b9d82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b9d86:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b9d88:	f7ff ffd2 	bl	b9d30 <_ZN9TCPClientC1Ei>
}
   b9d8c:	4620      	mov	r0, r4
   b9d8e:	bd10      	pop	{r4, pc}

000b9d90 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b9d90:	b510      	push	{r4, lr}
   b9d92:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b9d94:	6800      	ldr	r0, [r0, #0]
   b9d96:	2800      	cmp	r0, #0
   b9d98:	db01      	blt.n	b9d9e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b9d9a:	f7fd fe31 	bl	b7a00 <sock_close>
    }
}
   b9d9e:	4620      	mov	r0, r4
   b9da0:	bd10      	pop	{r4, pc}

000b9da2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b9da2:	300c      	adds	r0, #12
   b9da4:	f7ff bff4 	b.w	b9d90 <_ZN9TCPClient4DataD1Ev>

000b9da8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9da8:	4b02      	ldr	r3, [pc, #8]	; (b9db4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b9daa:	681a      	ldr	r2, [r3, #0]
   b9dac:	4b02      	ldr	r3, [pc, #8]	; (b9db8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b9dae:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9db0:	4770      	bx	lr
   b9db2:	bf00      	nop
   b9db4:	200352f8 	.word	0x200352f8
   b9db8:	2003e6fc 	.word	0x2003e6fc

000b9dbc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b9dbc:	4770      	bx	lr

000b9dbe <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9dbe:	7441      	strb	r1, [r0, #17]
}
   b9dc0:	4770      	bx	lr

000b9dc2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b9dc2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b9dc4:	7c00      	ldrb	r0, [r0, #16]
   b9dc6:	f7fd fe6b 	bl	b7aa0 <hal_usart_available_data_for_write>
}
   b9dca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9dce:	bd08      	pop	{r3, pc}

000b9dd0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b9dd0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b9dd2:	7c00      	ldrb	r0, [r0, #16]
   b9dd4:	f7fd fe44 	bl	b7a60 <hal_usart_available>
}
   b9dd8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9ddc:	bd08      	pop	{r3, pc}

000b9dde <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b9dde:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b9de0:	7c00      	ldrb	r0, [r0, #16]
   b9de2:	f7fd fe4d 	bl	b7a80 <hal_usart_peek>
}
   b9de6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9dea:	bd08      	pop	{r3, pc}

000b9dec <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b9dec:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b9dee:	7c00      	ldrb	r0, [r0, #16]
   b9df0:	f7fd fe3e 	bl	b7a70 <hal_usart_read>
}
   b9df4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9df8:	bd08      	pop	{r3, pc}

000b9dfa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b9dfa:	7c00      	ldrb	r0, [r0, #16]
   b9dfc:	f7fd be48 	b.w	b7a90 <hal_usart_flush>

000b9e00 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b9e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9e02:	7c45      	ldrb	r5, [r0, #17]
{
   b9e04:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9e06:	b12d      	cbz	r5, b9e14 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b9e08:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b9e0a:	b003      	add	sp, #12
   b9e0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b9e10:	f7fd be1e 	b.w	b7a50 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9e14:	7c00      	ldrb	r0, [r0, #16]
   b9e16:	9101      	str	r1, [sp, #4]
   b9e18:	f7fd fe42 	bl	b7aa0 <hal_usart_available_data_for_write>
   b9e1c:	2800      	cmp	r0, #0
   b9e1e:	9901      	ldr	r1, [sp, #4]
   b9e20:	dcf2      	bgt.n	b9e08 <_ZN11USARTSerial5writeEh+0x8>
}
   b9e22:	4628      	mov	r0, r5
   b9e24:	b003      	add	sp, #12
   b9e26:	bd30      	pop	{r4, r5, pc}

000b9e28 <_ZN11USARTSerialD0Ev>:
   b9e28:	b510      	push	{r4, lr}
   b9e2a:	2114      	movs	r1, #20
   b9e2c:	4604      	mov	r4, r0
   b9e2e:	f7fa f938 	bl	b40a2 <_ZdlPvj>
   b9e32:	4620      	mov	r0, r4
   b9e34:	bd10      	pop	{r4, pc}
	...

000b9e38 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b9e38:	b510      	push	{r4, lr}
   b9e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9e3e:	4604      	mov	r4, r0
   b9e40:	4608      	mov	r0, r1
   b9e42:	4611      	mov	r1, r2
   b9e44:	2200      	movs	r2, #0
   b9e46:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b9e4a:	4b04      	ldr	r3, [pc, #16]	; (b9e5c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b9e4c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9e4e:	2301      	movs	r3, #1
  _serial = serial;
   b9e50:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9e52:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b9e54:	f7fd fe2c 	bl	b7ab0 <hal_usart_init_ex>
}
   b9e58:	4620      	mov	r0, r4
   b9e5a:	bd10      	pop	{r4, pc}
   b9e5c:	000bdb44 	.word	0x000bdb44

000b9e60 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9e60:	7441      	strb	r1, [r0, #17]
}
   b9e62:	4770      	bx	lr

000b9e64 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9e64:	4770      	bx	lr

000b9e66 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b9e66:	4770      	bx	lr

000b9e68 <_ZN9USBSerial4readEv>:
{
   b9e68:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b9e6a:	2100      	movs	r1, #0
   b9e6c:	7c00      	ldrb	r0, [r0, #16]
   b9e6e:	f7fd fe47 	bl	b7b00 <HAL_USB_USART_Receive_Data>
}
   b9e72:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9e76:	bd08      	pop	{r3, pc}

000b9e78 <_ZN9USBSerial4peekEv>:
{
   b9e78:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b9e7a:	2101      	movs	r1, #1
   b9e7c:	7c00      	ldrb	r0, [r0, #16]
   b9e7e:	f7fd fe3f 	bl	b7b00 <HAL_USB_USART_Receive_Data>
}
   b9e82:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9e86:	bd08      	pop	{r3, pc}

000b9e88 <_ZN9USBSerial17availableForWriteEv>:
{
   b9e88:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b9e8a:	7c00      	ldrb	r0, [r0, #16]
   b9e8c:	f7fd fe30 	bl	b7af0 <HAL_USB_USART_Available_Data_For_Write>
}
   b9e90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9e94:	bd08      	pop	{r3, pc}

000b9e96 <_ZN9USBSerial9availableEv>:
{
   b9e96:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b9e98:	7c00      	ldrb	r0, [r0, #16]
   b9e9a:	f7fd fe21 	bl	b7ae0 <HAL_USB_USART_Available_Data>
}
   b9e9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9ea2:	bd08      	pop	{r3, pc}

000b9ea4 <_ZN9USBSerial5writeEh>:
{
   b9ea4:	b513      	push	{r0, r1, r4, lr}
   b9ea6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9ea8:	7c00      	ldrb	r0, [r0, #16]
{
   b9eaa:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9eac:	f7fd fe20 	bl	b7af0 <HAL_USB_USART_Available_Data_For_Write>
   b9eb0:	2800      	cmp	r0, #0
   b9eb2:	9901      	ldr	r1, [sp, #4]
   b9eb4:	dc01      	bgt.n	b9eba <_ZN9USBSerial5writeEh+0x16>
   b9eb6:	7c60      	ldrb	r0, [r4, #17]
   b9eb8:	b120      	cbz	r0, b9ec4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b9eba:	7c20      	ldrb	r0, [r4, #16]
   b9ebc:	f7fd fe28 	bl	b7b10 <HAL_USB_USART_Send_Data>
   b9ec0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b9ec4:	b002      	add	sp, #8
   b9ec6:	bd10      	pop	{r4, pc}

000b9ec8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b9ec8:	7c00      	ldrb	r0, [r0, #16]
   b9eca:	f7fd be29 	b.w	b7b20 <HAL_USB_USART_Flush_Data>

000b9ece <_ZN9USBSerialD0Ev>:
   b9ece:	b510      	push	{r4, lr}
   b9ed0:	2114      	movs	r1, #20
   b9ed2:	4604      	mov	r4, r0
   b9ed4:	f7fa f8e5 	bl	b40a2 <_ZdlPvj>
   b9ed8:	4620      	mov	r0, r4
   b9eda:	bd10      	pop	{r4, pc}

000b9edc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b9edc:	b510      	push	{r4, lr}
   b9ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9ee2:	4604      	mov	r4, r0
   b9ee4:	4608      	mov	r0, r1
   b9ee6:	2100      	movs	r1, #0
   b9ee8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9eec:	4b04      	ldr	r3, [pc, #16]	; (b9f00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b9eee:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9ef0:	2301      	movs	r3, #1
  _serial = serial;
   b9ef2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9ef4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b9ef6:	4611      	mov	r1, r2
   b9ef8:	f7fd fde2 	bl	b7ac0 <HAL_USB_USART_Init>
}
   b9efc:	4620      	mov	r0, r4
   b9efe:	bd10      	pop	{r4, pc}
   b9f00:	000bdb74 	.word	0x000bdb74

000b9f04 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b9f04:	7c00      	ldrb	r0, [r0, #16]
   b9f06:	2200      	movs	r2, #0
   b9f08:	f7fd bde2 	b.w	b7ad0 <HAL_USB_USART_Begin>

000b9f0c <_Z19acquireSerialBufferv>:
{
   b9f0c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b9f0e:	2214      	movs	r2, #20
{
   b9f10:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b9f12:	2100      	movs	r1, #0
   b9f14:	f001 f9c6 	bl	bb2a4 <memset>
}
   b9f18:	4620      	mov	r0, r4
   b9f1a:	bd10      	pop	{r4, pc}

000b9f1c <_Z16_fetch_usbserialv>:
{
   b9f1c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9f1e:	4c0f      	ldr	r4, [pc, #60]	; (b9f5c <_Z16_fetch_usbserialv+0x40>)
{
   b9f20:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b9f22:	a803      	add	r0, sp, #12
   b9f24:	f7ff fff2 	bl	b9f0c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9f28:	7821      	ldrb	r1, [r4, #0]
   b9f2a:	f3bf 8f5b 	dmb	ish
   b9f2e:	f011 0101 	ands.w	r1, r1, #1
   b9f32:	d10f      	bne.n	b9f54 <_Z16_fetch_usbserialv+0x38>
   b9f34:	4620      	mov	r0, r4
   b9f36:	9101      	str	r1, [sp, #4]
   b9f38:	f7fa f8b5 	bl	b40a6 <__cxa_guard_acquire>
   b9f3c:	9901      	ldr	r1, [sp, #4]
   b9f3e:	b148      	cbz	r0, b9f54 <_Z16_fetch_usbserialv+0x38>
   b9f40:	aa03      	add	r2, sp, #12
   b9f42:	4807      	ldr	r0, [pc, #28]	; (b9f60 <_Z16_fetch_usbserialv+0x44>)
   b9f44:	f7ff ffca 	bl	b9edc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9f48:	4620      	mov	r0, r4
   b9f4a:	f7fa f8b1 	bl	b40b0 <__cxa_guard_release>
   b9f4e:	4805      	ldr	r0, [pc, #20]	; (b9f64 <_Z16_fetch_usbserialv+0x48>)
   b9f50:	f001 f966 	bl	bb220 <atexit>
	return _usbserial;
}
   b9f54:	4802      	ldr	r0, [pc, #8]	; (b9f60 <_Z16_fetch_usbserialv+0x44>)
   b9f56:	b008      	add	sp, #32
   b9f58:	bd10      	pop	{r4, pc}
   b9f5a:	bf00      	nop
   b9f5c:	2003e700 	.word	0x2003e700
   b9f60:	2003e704 	.word	0x2003e704
   b9f64:	000b9e65 	.word	0x000b9e65

000b9f68 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b9f68:	2200      	movs	r2, #0
   b9f6a:	6840      	ldr	r0, [r0, #4]
   b9f6c:	4611      	mov	r1, r2
   b9f6e:	f7fd be33 	b.w	b7bd8 <network_ready>

000b9f72 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9f72:	2200      	movs	r2, #0
   b9f74:	6840      	ldr	r0, [r0, #4]
   b9f76:	4611      	mov	r1, r2
   b9f78:	f7fd be4e 	b.w	b7c18 <network_listening>

000b9f7c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9f7c:	2200      	movs	r2, #0
   b9f7e:	6840      	ldr	r0, [r0, #4]
   b9f80:	4611      	mov	r1, r2
   b9f82:	f7fd be71 	b.w	b7c68 <network_get_listen_timeout>

000b9f86 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9f86:	6840      	ldr	r0, [r0, #4]
   b9f88:	2200      	movs	r2, #0
   b9f8a:	f7fd be65 	b.w	b7c58 <network_set_listen_timeout>

000b9f8e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9f8e:	6840      	ldr	r0, [r0, #4]
   b9f90:	2200      	movs	r2, #0
   b9f92:	f081 0101 	eor.w	r1, r1, #1
   b9f96:	f7fd be37 	b.w	b7c08 <network_listen>

000b9f9a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9f9a:	2300      	movs	r3, #0
   b9f9c:	6840      	ldr	r0, [r0, #4]
   b9f9e:	461a      	mov	r2, r3
   b9fa0:	4619      	mov	r1, r3
   b9fa2:	f7fd be29 	b.w	b7bf8 <network_off>

000b9fa6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9fa6:	2300      	movs	r3, #0
   b9fa8:	6840      	ldr	r0, [r0, #4]
   b9faa:	461a      	mov	r2, r3
   b9fac:	4619      	mov	r1, r3
   b9fae:	f7fd be1b 	b.w	b7be8 <network_on>

000b9fb2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9fb2:	2200      	movs	r2, #0
   b9fb4:	6840      	ldr	r0, [r0, #4]
   b9fb6:	4611      	mov	r1, r2
   b9fb8:	f7fd bdfe 	b.w	b7bb8 <network_connecting>

000b9fbc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9fbc:	6840      	ldr	r0, [r0, #4]
   b9fbe:	2200      	movs	r2, #0
   b9fc0:	2102      	movs	r1, #2
   b9fc2:	f7fd be01 	b.w	b7bc8 <network_disconnect>

000b9fc6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9fc6:	2300      	movs	r3, #0
   b9fc8:	6840      	ldr	r0, [r0, #4]
   b9fca:	461a      	mov	r2, r3
   b9fcc:	f7fd bdec 	b.w	b7ba8 <network_connect>

000b9fd0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9fd0:	4b02      	ldr	r3, [pc, #8]	; (b9fdc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b9fd2:	2204      	movs	r2, #4
   b9fd4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b9fd6:	4a02      	ldr	r2, [pc, #8]	; (b9fe0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b9fd8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b9fda:	4770      	bx	lr
   b9fdc:	2003e718 	.word	0x2003e718
   b9fe0:	000bdba4 	.word	0x000bdba4

000b9fe4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b9fe4:	b510      	push	{r4, lr}
   b9fe6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b9fe8:	f001 f9a4 	bl	bb334 <strlen>
   b9fec:	3801      	subs	r0, #1
   b9fee:	1823      	adds	r3, r4, r0
   b9ff0:	4620      	mov	r0, r4
	while(i<j){
   b9ff2:	4283      	cmp	r3, r0
   b9ff4:	d906      	bls.n	ba004 <_Z11str_reversePc+0x20>
		c = *i;
   b9ff6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b9ff8:	7819      	ldrb	r1, [r3, #0]
   b9ffa:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b9ffe:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   ba002:	e7f6      	b.n	b9ff2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   ba004:	bd10      	pop	{r4, pc}

000ba006 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   ba006:	b570      	push	{r4, r5, r6, lr}
   ba008:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   ba00a:	1e91      	subs	r1, r2, #2
   ba00c:	2922      	cmp	r1, #34	; 0x22
   ba00e:	d81d      	bhi.n	ba04c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   ba010:	4625      	mov	r5, r4

	div_t result;
	while(a){
   ba012:	b930      	cbnz	r0, ba022 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   ba014:	4423      	add	r3, r4
            *ptr++ = '0';
   ba016:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   ba018:	429d      	cmp	r5, r3
   ba01a:	d210      	bcs.n	ba03e <ultoa+0x38>
            *ptr++ = '0';
   ba01c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   ba020:	e7fa      	b.n	ba018 <ultoa+0x12>
            result.quot = a/radix;
   ba022:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   ba026:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   ba02a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   ba02c:	2809      	cmp	r0, #9
                *ptr += '0';
   ba02e:	bf94      	ite	ls
   ba030:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   ba032:	3157      	addhi	r1, #87	; 0x57
   ba034:	b2c9      	uxtb	r1, r1
   ba036:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   ba03a:	4630      	mov	r0, r6
	while(a){
   ba03c:	e7e9      	b.n	ba012 <ultoa+0xc>

	*ptr = '\0';
   ba03e:	2300      	movs	r3, #0
	str_reverse(buffer);
   ba040:	4620      	mov	r0, r4
	*ptr = '\0';
   ba042:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   ba044:	f7ff ffce 	bl	b9fe4 <_Z11str_reversePc>
	return buffer;
   ba048:	4620      	mov	r0, r4
}
   ba04a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   ba04c:	2000      	movs	r0, #0
   ba04e:	e7fc      	b.n	ba04a <ultoa+0x44>

000ba050 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   ba050:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   ba052:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   ba054:	460c      	mov	r4, r1
   ba056:	4615      	mov	r5, r2
	if(a<0){
   ba058:	da0e      	bge.n	ba078 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   ba05a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   ba05e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   ba062:	bf14      	ite	ne
   ba064:	4258      	negne	r0, r3
   ba066:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   ba068:	2301      	movs	r3, #1
		*buffer = '-';
   ba06a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   ba06c:	462a      	mov	r2, r5
   ba06e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   ba070:	f7ff ffc9 	bl	ba006 <ultoa>
	}
	return buffer;
}
   ba074:	4620      	mov	r0, r4
   ba076:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   ba078:	2301      	movs	r3, #1
   ba07a:	e7f9      	b.n	ba070 <itoa+0x20>

000ba07c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   ba07c:	4b01      	ldr	r3, [pc, #4]	; (ba084 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   ba07e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   ba080:	4770      	bx	lr
   ba082:	bf00      	nop
   ba084:	20035300 	.word	0x20035300

000ba088 <serialEventRun>:
{
   ba088:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   ba08a:	4b0b      	ldr	r3, [pc, #44]	; (ba0b8 <serialEventRun+0x30>)
   ba08c:	b143      	cbz	r3, ba0a0 <serialEventRun+0x18>
   ba08e:	f7ff ff45 	bl	b9f1c <_Z16_fetch_usbserialv>
   ba092:	6803      	ldr	r3, [r0, #0]
   ba094:	691b      	ldr	r3, [r3, #16]
   ba096:	4798      	blx	r3
   ba098:	2800      	cmp	r0, #0
   ba09a:	dd01      	ble.n	ba0a0 <serialEventRun+0x18>
        serialEvent();
   ba09c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   ba0a0:	4b06      	ldr	r3, [pc, #24]	; (ba0bc <serialEventRun+0x34>)
   ba0a2:	b143      	cbz	r3, ba0b6 <serialEventRun+0x2e>
   ba0a4:	f000 f8c8 	bl	ba238 <_Z22__fetch_global_Serial1v>
   ba0a8:	6803      	ldr	r3, [r0, #0]
   ba0aa:	691b      	ldr	r3, [r3, #16]
   ba0ac:	4798      	blx	r3
   ba0ae:	2800      	cmp	r0, #0
   ba0b0:	dd01      	ble.n	ba0b6 <serialEventRun+0x2e>
        serialEvent1();
   ba0b2:	f3af 8000 	nop.w
}
   ba0b6:	bd08      	pop	{r3, pc}
	...

000ba0c0 <_post_loop>:
{
   ba0c0:	b508      	push	{r3, lr}
	serialEventRun();
   ba0c2:	f7ff ffe1 	bl	ba088 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   ba0c6:	f7fd fc0b 	bl	b78e0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   ba0ca:	4b01      	ldr	r3, [pc, #4]	; (ba0d0 <_post_loop+0x10>)
   ba0cc:	6018      	str	r0, [r3, #0]
}
   ba0ce:	bd08      	pop	{r3, pc}
   ba0d0:	2003e728 	.word	0x2003e728

000ba0d4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba0d4:	4805      	ldr	r0, [pc, #20]	; (ba0ec <_Z33system_initialize_user_backup_ramv+0x18>)
   ba0d6:	4a06      	ldr	r2, [pc, #24]	; (ba0f0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   ba0d8:	4906      	ldr	r1, [pc, #24]	; (ba0f4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   ba0da:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba0dc:	1a12      	subs	r2, r2, r0
   ba0de:	f001 f8b9 	bl	bb254 <memcpy>
    __backup_sram_signature = signature;
   ba0e2:	4b05      	ldr	r3, [pc, #20]	; (ba0f8 <_Z33system_initialize_user_backup_ramv+0x24>)
   ba0e4:	4a05      	ldr	r2, [pc, #20]	; (ba0fc <_Z33system_initialize_user_backup_ramv+0x28>)
   ba0e6:	601a      	str	r2, [r3, #0]
}
   ba0e8:	bd08      	pop	{r3, pc}
   ba0ea:	bf00      	nop
   ba0ec:	2003f400 	.word	0x2003f400
   ba0f0:	2003f404 	.word	0x2003f404
   ba0f4:	000be0e4 	.word	0x000be0e4
   ba0f8:	2003f400 	.word	0x2003f400
   ba0fc:	9a271c1e 	.word	0x9a271c1e

000ba100 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   ba100:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba102:	2300      	movs	r3, #0
   ba104:	9300      	str	r3, [sp, #0]
   ba106:	461a      	mov	r2, r3
   ba108:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba10c:	f7fd fd3a 	bl	b7b84 <system_ctrl_set_result>
}
   ba110:	b003      	add	sp, #12
   ba112:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba118 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   ba118:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   ba11a:	8843      	ldrh	r3, [r0, #2]
   ba11c:	2b0a      	cmp	r3, #10
   ba11e:	d008      	beq.n	ba132 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   ba120:	2b50      	cmp	r3, #80	; 0x50
   ba122:	d10b      	bne.n	ba13c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   ba124:	4b09      	ldr	r3, [pc, #36]	; (ba14c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   ba126:	681b      	ldr	r3, [r3, #0]
   ba128:	b14b      	cbz	r3, ba13e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   ba12a:	b003      	add	sp, #12
   ba12c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   ba130:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   ba132:	f7ff ffe5 	bl	ba100 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   ba136:	b003      	add	sp, #12
   ba138:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba13c:	2300      	movs	r3, #0
   ba13e:	9300      	str	r3, [sp, #0]
   ba140:	461a      	mov	r2, r3
   ba142:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba146:	f7fd fd1d 	bl	b7b84 <system_ctrl_set_result>
}
   ba14a:	e7f4      	b.n	ba136 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   ba14c:	2003e724 	.word	0x2003e724

000ba150 <module_user_init_hook>:
{
   ba150:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   ba152:	4812      	ldr	r0, [pc, #72]	; (ba19c <module_user_init_hook+0x4c>)
   ba154:	2100      	movs	r1, #0
   ba156:	f7fd fde7 	bl	b7d28 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   ba15a:	4b11      	ldr	r3, [pc, #68]	; (ba1a0 <module_user_init_hook+0x50>)
   ba15c:	681a      	ldr	r2, [r3, #0]
   ba15e:	4b11      	ldr	r3, [pc, #68]	; (ba1a4 <module_user_init_hook+0x54>)
   ba160:	429a      	cmp	r2, r3
   ba162:	4b11      	ldr	r3, [pc, #68]	; (ba1a8 <module_user_init_hook+0x58>)
   ba164:	bf0c      	ite	eq
   ba166:	2201      	moveq	r2, #1
   ba168:	2200      	movne	r2, #0
   ba16a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   ba16c:	d001      	beq.n	ba172 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   ba16e:	f7ff ffb1 	bl	ba0d4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   ba172:	f7fd fba5 	bl	b78c0 <HAL_RNG_GetRandomNumber>
   ba176:	4604      	mov	r4, r0
    srand(seed);
   ba178:	f001 f89c 	bl	bb2b4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   ba17c:	4b0b      	ldr	r3, [pc, #44]	; (ba1ac <module_user_init_hook+0x5c>)
   ba17e:	b113      	cbz	r3, ba186 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   ba180:	4620      	mov	r0, r4
   ba182:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   ba186:	2100      	movs	r1, #0
   ba188:	4808      	ldr	r0, [pc, #32]	; (ba1ac <module_user_init_hook+0x5c>)
   ba18a:	f7fd fd05 	bl	b7b98 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   ba18e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   ba192:	4807      	ldr	r0, [pc, #28]	; (ba1b0 <module_user_init_hook+0x60>)
   ba194:	2100      	movs	r1, #0
   ba196:	f7fd bceb 	b.w	b7b70 <system_ctrl_set_app_request_handler>
   ba19a:	bf00      	nop
   ba19c:	000ba07d 	.word	0x000ba07d
   ba1a0:	2003f400 	.word	0x2003f400
   ba1a4:	9a271c1e 	.word	0x9a271c1e
   ba1a8:	2003e720 	.word	0x2003e720
   ba1ac:	00000000 	.word	0x00000000
   ba1b0:	000ba119 	.word	0x000ba119

000ba1b4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba1b4:	4770      	bx	lr
	...

000ba1b8 <_Z19__fetch_global_Wirev>:
{
   ba1b8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba1ba:	4d0e      	ldr	r5, [pc, #56]	; (ba1f4 <_Z19__fetch_global_Wirev+0x3c>)
   ba1bc:	7829      	ldrb	r1, [r5, #0]
   ba1be:	f3bf 8f5b 	dmb	ish
   ba1c2:	f011 0401 	ands.w	r4, r1, #1
{
   ba1c6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba1c8:	d111      	bne.n	ba1ee <_Z19__fetch_global_Wirev+0x36>
   ba1ca:	4628      	mov	r0, r5
   ba1cc:	f7f9 ff6b 	bl	b40a6 <__cxa_guard_acquire>
   ba1d0:	b168      	cbz	r0, ba1ee <_Z19__fetch_global_Wirev+0x36>
   ba1d2:	a801      	add	r0, sp, #4
   ba1d4:	f7fa fa88 	bl	b46e8 <_Z17acquireWireBufferv>
   ba1d8:	aa01      	add	r2, sp, #4
   ba1da:	4621      	mov	r1, r4
   ba1dc:	4806      	ldr	r0, [pc, #24]	; (ba1f8 <_Z19__fetch_global_Wirev+0x40>)
   ba1de:	f7fe ff53 	bl	b9088 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   ba1e2:	4628      	mov	r0, r5
   ba1e4:	f7f9 ff64 	bl	b40b0 <__cxa_guard_release>
   ba1e8:	4804      	ldr	r0, [pc, #16]	; (ba1fc <_Z19__fetch_global_Wirev+0x44>)
   ba1ea:	f001 f819 	bl	bb220 <atexit>
	return wire;
}
   ba1ee:	4802      	ldr	r0, [pc, #8]	; (ba1f8 <_Z19__fetch_global_Wirev+0x40>)
   ba1f0:	b007      	add	sp, #28
   ba1f2:	bd30      	pop	{r4, r5, pc}
   ba1f4:	2003e72c 	.word	0x2003e72c
   ba1f8:	2003e730 	.word	0x2003e730
   ba1fc:	000ba1b5 	.word	0x000ba1b5

000ba200 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba200:	4770      	bx	lr
	...

000ba204 <_Z20acquireSerial1Bufferv>:
{
   ba204:	b538      	push	{r3, r4, r5, lr}
   ba206:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   ba208:	2514      	movs	r5, #20
   ba20a:	462a      	mov	r2, r5
   ba20c:	2100      	movs	r1, #0
   ba20e:	f001 f849 	bl	bb2a4 <memset>
   ba212:	8025      	strh	r5, [r4, #0]
   ba214:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba216:	4907      	ldr	r1, [pc, #28]	; (ba234 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   ba218:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba21a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   ba21c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba21e:	f000 f82f 	bl	ba280 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba222:	4904      	ldr	r1, [pc, #16]	; (ba234 <_Z20acquireSerial1Bufferv+0x30>)
    };
   ba224:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba226:	4628      	mov	r0, r5
   ba228:	f000 f82a 	bl	ba280 <_ZnajRKSt9nothrow_t>
    };
   ba22c:	60e0      	str	r0, [r4, #12]
}
   ba22e:	4620      	mov	r0, r4
   ba230:	bd38      	pop	{r3, r4, r5, pc}
   ba232:	bf00      	nop
   ba234:	000bdbd8 	.word	0x000bdbd8

000ba238 <_Z22__fetch_global_Serial1v>:
{
   ba238:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba23a:	4d0e      	ldr	r5, [pc, #56]	; (ba274 <_Z22__fetch_global_Serial1v+0x3c>)
   ba23c:	7829      	ldrb	r1, [r5, #0]
   ba23e:	f3bf 8f5b 	dmb	ish
   ba242:	f011 0401 	ands.w	r4, r1, #1
{
   ba246:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba248:	d111      	bne.n	ba26e <_Z22__fetch_global_Serial1v+0x36>
   ba24a:	4628      	mov	r0, r5
   ba24c:	f7f9 ff2b 	bl	b40a6 <__cxa_guard_acquire>
   ba250:	b168      	cbz	r0, ba26e <_Z22__fetch_global_Serial1v+0x36>
   ba252:	a801      	add	r0, sp, #4
   ba254:	f7ff ffd6 	bl	ba204 <_Z20acquireSerial1Bufferv>
   ba258:	aa01      	add	r2, sp, #4
   ba25a:	4621      	mov	r1, r4
   ba25c:	4806      	ldr	r0, [pc, #24]	; (ba278 <_Z22__fetch_global_Serial1v+0x40>)
   ba25e:	f7ff fdeb 	bl	b9e38 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   ba262:	4628      	mov	r0, r5
   ba264:	f7f9 ff24 	bl	b40b0 <__cxa_guard_release>
   ba268:	4804      	ldr	r0, [pc, #16]	; (ba27c <_Z22__fetch_global_Serial1v+0x44>)
   ba26a:	f000 ffd9 	bl	bb220 <atexit>
    return serial1;
}
   ba26e:	4802      	ldr	r0, [pc, #8]	; (ba278 <_Z22__fetch_global_Serial1v+0x40>)
   ba270:	b007      	add	sp, #28
   ba272:	bd30      	pop	{r4, r5, pc}
   ba274:	2003e744 	.word	0x2003e744
   ba278:	2003e748 	.word	0x2003e748
   ba27c:	000ba201 	.word	0x000ba201

000ba280 <_ZnajRKSt9nothrow_t>:
   ba280:	f7f9 bf0b 	b.w	b409a <_Znaj>

000ba284 <_ZSt17__throw_bad_allocv>:
   ba284:	b508      	push	{r3, lr}
   ba286:	f7fd fd2f 	bl	b7ce8 <abort>

000ba28a <_ZSt19__throw_logic_errorPKc>:
   ba28a:	b508      	push	{r3, lr}
   ba28c:	f7fd fd2c 	bl	b7ce8 <abort>

000ba290 <_ZSt20__throw_length_errorPKc>:
   ba290:	b508      	push	{r3, lr}
   ba292:	f7fd fd29 	bl	b7ce8 <abort>

000ba296 <_ZSt25__throw_bad_function_callv>:
   ba296:	b508      	push	{r3, lr}
   ba298:	f7fd fd26 	bl	b7ce8 <abort>

000ba29c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   ba29c:	4901      	ldr	r1, [pc, #4]	; (ba2a4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   ba29e:	f000 b963 	b.w	ba568 <_ZNKSt9type_infoeqERKS_>
   ba2a2:	bf00      	nop
   ba2a4:	000bdbf4 	.word	0x000bdbf4

000ba2a8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   ba2a8:	b10a      	cbz	r2, ba2ae <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   ba2aa:	f000 bfd3 	b.w	bb254 <memcpy>
   ba2ae:	4770      	bx	lr

000ba2b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   ba2b0:	b508      	push	{r3, lr}
   ba2b2:	680b      	ldr	r3, [r1, #0]
   ba2b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   ba2b8:	d302      	bcc.n	ba2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   ba2ba:	480d      	ldr	r0, [pc, #52]	; (ba2f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   ba2bc:	f7ff ffe8 	bl	ba290 <_ZSt20__throw_length_errorPKc>
   ba2c0:	4293      	cmp	r3, r2
   ba2c2:	d90b      	bls.n	ba2dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   ba2c4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   ba2c8:	ea4f 0042 	mov.w	r0, r2, lsl #1
   ba2cc:	d206      	bcs.n	ba2dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   ba2ce:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   ba2d2:	bf2a      	itet	cs
   ba2d4:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   ba2d8:	6008      	strcc	r0, [r1, #0]
   ba2da:	600b      	strcs	r3, [r1, #0]
   ba2dc:	6808      	ldr	r0, [r1, #0]
   ba2de:	3001      	adds	r0, #1
   ba2e0:	d501      	bpl.n	ba2e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   ba2e2:	f7ff ffcf 	bl	ba284 <_ZSt17__throw_bad_allocv>
   ba2e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   ba2ea:	f7f9 bed4 	b.w	b4096 <_Znwj>
   ba2ee:	bf00      	nop
   ba2f0:	000bdbfc 	.word	0x000bdbfc

000ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   ba2f4:	f850 3b08 	ldr.w	r3, [r0], #8
   ba2f8:	4283      	cmp	r3, r0
   ba2fa:	d002      	beq.n	ba302 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   ba2fc:	4618      	mov	r0, r3
   ba2fe:	f7f9 bece 	b.w	b409e <_ZdlPv>
   ba302:	4770      	bx	lr

000ba304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   ba304:	2a01      	cmp	r2, #1
   ba306:	b410      	push	{r4}
   ba308:	d104      	bne.n	ba314 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   ba30a:	780a      	ldrb	r2, [r1, #0]
   ba30c:	f85d 4b04 	ldr.w	r4, [sp], #4
   ba310:	7002      	strb	r2, [r0, #0]
   ba312:	4770      	bx	lr
   ba314:	f85d 4b04 	ldr.w	r4, [sp], #4
   ba318:	f7ff bfc6 	b.w	ba2a8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000ba31c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
   ba31c:	b508      	push	{r3, lr}
   ba31e:	1a52      	subs	r2, r2, r1
   ba320:	f7ff fff0 	bl	ba304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba324:	bd08      	pop	{r3, pc}

000ba326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   ba326:	b508      	push	{r3, lr}
   ba328:	1a52      	subs	r2, r2, r1
   ba32a:	f7ff ffeb 	bl	ba304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba32e:	bd08      	pop	{r3, pc}

000ba330 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   ba330:	4288      	cmp	r0, r1
   ba332:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba334:	4604      	mov	r4, r0
   ba336:	460e      	mov	r6, r1
   ba338:	d01e      	beq.n	ba378 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   ba33a:	4603      	mov	r3, r0
   ba33c:	684d      	ldr	r5, [r1, #4]
   ba33e:	f853 2b08 	ldr.w	r2, [r3], #8
   ba342:	429a      	cmp	r2, r3
   ba344:	bf14      	ite	ne
   ba346:	6882      	ldrne	r2, [r0, #8]
   ba348:	220f      	moveq	r2, #15
   ba34a:	42aa      	cmp	r2, r5
   ba34c:	d20a      	bcs.n	ba364 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   ba34e:	a901      	add	r1, sp, #4
   ba350:	9501      	str	r5, [sp, #4]
   ba352:	f7ff ffad 	bl	ba2b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   ba356:	4607      	mov	r7, r0
   ba358:	4620      	mov	r0, r4
   ba35a:	f7ff ffcb 	bl	ba2f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   ba35e:	9b01      	ldr	r3, [sp, #4]
   ba360:	6027      	str	r7, [r4, #0]
   ba362:	60a3      	str	r3, [r4, #8]
   ba364:	b125      	cbz	r5, ba370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   ba366:	6831      	ldr	r1, [r6, #0]
   ba368:	6820      	ldr	r0, [r4, #0]
   ba36a:	462a      	mov	r2, r5
   ba36c:	f7ff ffca 	bl	ba304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba370:	6823      	ldr	r3, [r4, #0]
   ba372:	6065      	str	r5, [r4, #4]
   ba374:	2200      	movs	r2, #0
   ba376:	555a      	strb	r2, [r3, r5]
   ba378:	b003      	add	sp, #12
   ba37a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba37c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   ba37c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   ba37e:	2400      	movs	r4, #0
   ba380:	2310      	movs	r3, #16
   ba382:	e9cd 3402 	strd	r3, r4, [sp, #8]
   ba386:	6803      	ldr	r3, [r0, #0]
   ba388:	4615      	mov	r5, r2
   ba38a:	699e      	ldr	r6, [r3, #24]
   ba38c:	6812      	ldr	r2, [r2, #0]
   ba38e:	466b      	mov	r3, sp
   ba390:	e9cd 4400 	strd	r4, r4, [sp]
   ba394:	47b0      	blx	r6
   ba396:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba39a:	f003 0306 	and.w	r3, r3, #6
   ba39e:	2b06      	cmp	r3, #6
   ba3a0:	bf03      	ittte	eq
   ba3a2:	9b00      	ldreq	r3, [sp, #0]
   ba3a4:	602b      	streq	r3, [r5, #0]
   ba3a6:	2001      	moveq	r0, #1
   ba3a8:	4620      	movne	r0, r4
   ba3aa:	b004      	add	sp, #16
   ba3ac:	bd70      	pop	{r4, r5, r6, pc}

000ba3ae <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   ba3ae:	9800      	ldr	r0, [sp, #0]
   ba3b0:	4290      	cmp	r0, r2
   ba3b2:	bf14      	ite	ne
   ba3b4:	2001      	movne	r0, #1
   ba3b6:	2006      	moveq	r0, #6
   ba3b8:	4770      	bx	lr
	...

000ba3bc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   ba3bc:	b510      	push	{r4, lr}
   ba3be:	4b03      	ldr	r3, [pc, #12]	; (ba3cc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   ba3c0:	6003      	str	r3, [r0, #0]
   ba3c2:	4604      	mov	r4, r0
   ba3c4:	f000 f8cd 	bl	ba562 <_ZNSt9type_infoD1Ev>
   ba3c8:	4620      	mov	r0, r4
   ba3ca:	bd10      	pop	{r4, pc}
   ba3cc:	000bdc4c 	.word	0x000bdc4c

000ba3d0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   ba3d0:	b510      	push	{r4, lr}
   ba3d2:	4604      	mov	r4, r0
   ba3d4:	f7ff fff2 	bl	ba3bc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba3d8:	4620      	mov	r0, r4
   ba3da:	2108      	movs	r1, #8
   ba3dc:	f7f9 fe61 	bl	b40a2 <_ZdlPvj>
   ba3e0:	4620      	mov	r0, r4
   ba3e2:	bd10      	pop	{r4, pc}

000ba3e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   ba3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba3e8:	461f      	mov	r7, r3
   ba3ea:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   ba3ee:	f8dd 8018 	ldr.w	r8, [sp, #24]
   ba3f2:	4598      	cmp	r8, r3
   ba3f4:	4606      	mov	r6, r0
   ba3f6:	4615      	mov	r5, r2
   ba3f8:	d107      	bne.n	ba40a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba3fa:	9907      	ldr	r1, [sp, #28]
   ba3fc:	f000 f8b4 	bl	ba568 <_ZNKSt9type_infoeqERKS_>
   ba400:	b118      	cbz	r0, ba40a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba402:	7165      	strb	r5, [r4, #5]
   ba404:	2000      	movs	r0, #0
   ba406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba40a:	4639      	mov	r1, r7
   ba40c:	4630      	mov	r0, r6
   ba40e:	f000 f8ab 	bl	ba568 <_ZNKSt9type_infoeqERKS_>
   ba412:	2800      	cmp	r0, #0
   ba414:	d0f6      	beq.n	ba404 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   ba416:	2301      	movs	r3, #1
   ba418:	f8c4 8000 	str.w	r8, [r4]
   ba41c:	7125      	strb	r5, [r4, #4]
   ba41e:	71a3      	strb	r3, [r4, #6]
   ba420:	e7f0      	b.n	ba404 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000ba422 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   ba422:	b538      	push	{r3, r4, r5, lr}
   ba424:	4615      	mov	r5, r2
   ba426:	461c      	mov	r4, r3
   ba428:	f000 f89e 	bl	ba568 <_ZNKSt9type_infoeqERKS_>
   ba42c:	b120      	cbz	r0, ba438 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   ba42e:	2308      	movs	r3, #8
   ba430:	60e3      	str	r3, [r4, #12]
   ba432:	2306      	movs	r3, #6
   ba434:	6025      	str	r5, [r4, #0]
   ba436:	7123      	strb	r3, [r4, #4]
   ba438:	bd38      	pop	{r3, r4, r5, pc}

000ba43a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   ba43a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba43c:	4605      	mov	r5, r0
   ba43e:	460c      	mov	r4, r1
   ba440:	9201      	str	r2, [sp, #4]
   ba442:	461e      	mov	r6, r3
   ba444:	f000 f890 	bl	ba568 <_ZNKSt9type_infoeqERKS_>
   ba448:	b950      	cbnz	r0, ba460 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba44a:	2e03      	cmp	r6, #3
   ba44c:	d808      	bhi.n	ba460 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba44e:	6823      	ldr	r3, [r4, #0]
   ba450:	9a01      	ldr	r2, [sp, #4]
   ba452:	695b      	ldr	r3, [r3, #20]
   ba454:	4629      	mov	r1, r5
   ba456:	4620      	mov	r0, r4
   ba458:	b002      	add	sp, #8
   ba45a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba45e:	4718      	bx	r3
   ba460:	b002      	add	sp, #8
   ba462:	bd70      	pop	{r4, r5, r6, pc}

000ba464 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   ba464:	b510      	push	{r4, lr}
   ba466:	4b03      	ldr	r3, [pc, #12]	; (ba474 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   ba468:	6003      	str	r3, [r0, #0]
   ba46a:	4604      	mov	r4, r0
   ba46c:	f7ff ffa6 	bl	ba3bc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba470:	4620      	mov	r0, r4
   ba472:	bd10      	pop	{r4, pc}
   ba474:	000bdcac 	.word	0x000bdcac

000ba478 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   ba478:	b510      	push	{r4, lr}
   ba47a:	4604      	mov	r4, r0
   ba47c:	f7ff fff2 	bl	ba464 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   ba480:	4620      	mov	r0, r4
   ba482:	210c      	movs	r1, #12
   ba484:	f7f9 fe0d 	bl	b40a2 <_ZdlPvj>
   ba488:	4620      	mov	r0, r4
   ba48a:	bd10      	pop	{r4, pc}

000ba48c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   ba48c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba48e:	9f08      	ldr	r7, [sp, #32]
   ba490:	4297      	cmp	r7, r2
   ba492:	4605      	mov	r5, r0
   ba494:	460e      	mov	r6, r1
   ba496:	4614      	mov	r4, r2
   ba498:	d00a      	beq.n	ba4b0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   ba49a:	68a8      	ldr	r0, [r5, #8]
   ba49c:	6802      	ldr	r2, [r0, #0]
   ba49e:	9708      	str	r7, [sp, #32]
   ba4a0:	6a15      	ldr	r5, [r2, #32]
   ba4a2:	4631      	mov	r1, r6
   ba4a4:	4622      	mov	r2, r4
   ba4a6:	46ac      	mov	ip, r5
   ba4a8:	b003      	add	sp, #12
   ba4aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   ba4ae:	4760      	bx	ip
   ba4b0:	4619      	mov	r1, r3
   ba4b2:	9301      	str	r3, [sp, #4]
   ba4b4:	f000 f858 	bl	ba568 <_ZNKSt9type_infoeqERKS_>
   ba4b8:	9b01      	ldr	r3, [sp, #4]
   ba4ba:	2800      	cmp	r0, #0
   ba4bc:	d0ed      	beq.n	ba49a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   ba4be:	2006      	movs	r0, #6
   ba4c0:	b003      	add	sp, #12
   ba4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba4c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   ba4c4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba4c8:	460d      	mov	r5, r1
   ba4ca:	4619      	mov	r1, r3
   ba4cc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   ba4d0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   ba4d4:	4681      	mov	r9, r0
   ba4d6:	4617      	mov	r7, r2
   ba4d8:	4698      	mov	r8, r3
   ba4da:	f000 f845 	bl	ba568 <_ZNKSt9type_infoeqERKS_>
   ba4de:	b190      	cbz	r0, ba506 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   ba4e0:	2d00      	cmp	r5, #0
   ba4e2:	6034      	str	r4, [r6, #0]
   ba4e4:	7137      	strb	r7, [r6, #4]
   ba4e6:	db09      	blt.n	ba4fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   ba4e8:	1961      	adds	r1, r4, r5
   ba4ea:	458a      	cmp	sl, r1
   ba4ec:	bf0c      	ite	eq
   ba4ee:	2106      	moveq	r1, #6
   ba4f0:	2101      	movne	r1, #1
   ba4f2:	71b1      	strb	r1, [r6, #6]
   ba4f4:	2000      	movs	r0, #0
   ba4f6:	b001      	add	sp, #4
   ba4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba4fc:	3502      	adds	r5, #2
   ba4fe:	d1f9      	bne.n	ba4f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba500:	2301      	movs	r3, #1
   ba502:	71b3      	strb	r3, [r6, #6]
   ba504:	e7f6      	b.n	ba4f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba506:	4554      	cmp	r4, sl
   ba508:	d106      	bne.n	ba518 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba50a:	4659      	mov	r1, fp
   ba50c:	4648      	mov	r0, r9
   ba50e:	f000 f82b 	bl	ba568 <_ZNKSt9type_infoeqERKS_>
   ba512:	b108      	cbz	r0, ba518 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba514:	7177      	strb	r7, [r6, #5]
   ba516:	e7ed      	b.n	ba4f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba518:	f8d9 0008 	ldr.w	r0, [r9, #8]
   ba51c:	6803      	ldr	r3, [r0, #0]
   ba51e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   ba522:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   ba526:	69dc      	ldr	r4, [r3, #28]
   ba528:	463a      	mov	r2, r7
   ba52a:	4643      	mov	r3, r8
   ba52c:	4629      	mov	r1, r5
   ba52e:	46a4      	mov	ip, r4
   ba530:	b001      	add	sp, #4
   ba532:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba536:	4760      	bx	ip

000ba538 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   ba538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba53c:	4607      	mov	r7, r0
   ba53e:	460c      	mov	r4, r1
   ba540:	4615      	mov	r5, r2
   ba542:	461e      	mov	r6, r3
   ba544:	f7ff ff6d 	bl	ba422 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   ba548:	b948      	cbnz	r0, ba55e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   ba54a:	68b8      	ldr	r0, [r7, #8]
   ba54c:	6803      	ldr	r3, [r0, #0]
   ba54e:	699f      	ldr	r7, [r3, #24]
   ba550:	462a      	mov	r2, r5
   ba552:	4633      	mov	r3, r6
   ba554:	4621      	mov	r1, r4
   ba556:	46bc      	mov	ip, r7
   ba558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba55c:	4760      	bx	ip
   ba55e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba562 <_ZNSt9type_infoD1Ev>:
   ba562:	4770      	bx	lr

000ba564 <_ZNKSt9type_info14__is_pointer_pEv>:
   ba564:	2000      	movs	r0, #0
   ba566:	4770      	bx	lr

000ba568 <_ZNKSt9type_infoeqERKS_>:
   ba568:	4281      	cmp	r1, r0
   ba56a:	b508      	push	{r3, lr}
   ba56c:	d00e      	beq.n	ba58c <_ZNKSt9type_infoeqERKS_+0x24>
   ba56e:	6840      	ldr	r0, [r0, #4]
   ba570:	7803      	ldrb	r3, [r0, #0]
   ba572:	2b2a      	cmp	r3, #42	; 0x2a
   ba574:	d00c      	beq.n	ba590 <_ZNKSt9type_infoeqERKS_+0x28>
   ba576:	6849      	ldr	r1, [r1, #4]
   ba578:	780b      	ldrb	r3, [r1, #0]
   ba57a:	2b2a      	cmp	r3, #42	; 0x2a
   ba57c:	bf08      	it	eq
   ba57e:	3101      	addeq	r1, #1
   ba580:	f000 fec6 	bl	bb310 <strcmp>
   ba584:	fab0 f080 	clz	r0, r0
   ba588:	0940      	lsrs	r0, r0, #5
   ba58a:	bd08      	pop	{r3, pc}
   ba58c:	2001      	movs	r0, #1
   ba58e:	e7fc      	b.n	ba58a <_ZNKSt9type_infoeqERKS_+0x22>
   ba590:	2000      	movs	r0, #0
   ba592:	e7fa      	b.n	ba58a <_ZNKSt9type_infoeqERKS_+0x22>

000ba594 <floorf>:
   ba594:	ee10 2a10 	vmov	r2, s0
   ba598:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   ba59c:	3b7f      	subs	r3, #127	; 0x7f
   ba59e:	2b16      	cmp	r3, #22
   ba5a0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   ba5a4:	dc28      	bgt.n	ba5f8 <floorf+0x64>
   ba5a6:	2b00      	cmp	r3, #0
   ba5a8:	db18      	blt.n	ba5dc <floorf+0x48>
   ba5aa:	491a      	ldr	r1, [pc, #104]	; (ba614 <floorf+0x80>)
   ba5ac:	4119      	asrs	r1, r3
   ba5ae:	420a      	tst	r2, r1
   ba5b0:	d021      	beq.n	ba5f6 <floorf+0x62>
   ba5b2:	eddf 7a19 	vldr	s15, [pc, #100]	; ba618 <floorf+0x84>
   ba5b6:	ee70 7a27 	vadd.f32	s15, s0, s15
   ba5ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba5be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba5c2:	dd18      	ble.n	ba5f6 <floorf+0x62>
   ba5c4:	2a00      	cmp	r2, #0
   ba5c6:	da04      	bge.n	ba5d2 <floorf+0x3e>
   ba5c8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   ba5cc:	fa40 f303 	asr.w	r3, r0, r3
   ba5d0:	441a      	add	r2, r3
   ba5d2:	ea22 0301 	bic.w	r3, r2, r1
   ba5d6:	ee00 3a10 	vmov	s0, r3
   ba5da:	4770      	bx	lr
   ba5dc:	eddf 7a0e 	vldr	s15, [pc, #56]	; ba618 <floorf+0x84>
   ba5e0:	ee70 7a27 	vadd.f32	s15, s0, s15
   ba5e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba5ec:	dd03      	ble.n	ba5f6 <floorf+0x62>
   ba5ee:	2a00      	cmp	r2, #0
   ba5f0:	db08      	blt.n	ba604 <floorf+0x70>
   ba5f2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; ba61c <floorf+0x88>
   ba5f6:	4770      	bx	lr
   ba5f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   ba5fc:	d3fb      	bcc.n	ba5f6 <floorf+0x62>
   ba5fe:	ee30 0a00 	vadd.f32	s0, s0, s0
   ba602:	4770      	bx	lr
   ba604:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   ba608:	2900      	cmp	r1, #0
   ba60a:	bf18      	it	ne
   ba60c:	eeb0 0a67 	vmovne.f32	s0, s15
   ba610:	4770      	bx	lr
   ba612:	bf00      	nop
   ba614:	007fffff 	.word	0x007fffff
   ba618:	7149f2ca 	.word	0x7149f2ca
   ba61c:	00000000 	.word	0x00000000

000ba620 <sqrt>:
   ba620:	b538      	push	{r3, r4, r5, lr}
   ba622:	ed2d 8b02 	vpush	{d8}
   ba626:	ec55 4b10 	vmov	r4, r5, d0
   ba62a:	f000 f833 	bl	ba694 <__ieee754_sqrt>
   ba62e:	4b18      	ldr	r3, [pc, #96]	; (ba690 <sqrt+0x70>)
   ba630:	eeb0 8a40 	vmov.f32	s16, s0
   ba634:	eef0 8a60 	vmov.f32	s17, s1
   ba638:	f993 3000 	ldrsb.w	r3, [r3]
   ba63c:	3301      	adds	r3, #1
   ba63e:	d00d      	beq.n	ba65c <sqrt+0x3c>
   ba640:	4622      	mov	r2, r4
   ba642:	462b      	mov	r3, r5
   ba644:	4620      	mov	r0, r4
   ba646:	4629      	mov	r1, r5
   ba648:	f000 fd46 	bl	bb0d8 <__aeabi_dcmpun>
   ba64c:	b930      	cbnz	r0, ba65c <sqrt+0x3c>
   ba64e:	2200      	movs	r2, #0
   ba650:	2300      	movs	r3, #0
   ba652:	4620      	mov	r0, r4
   ba654:	4629      	mov	r1, r5
   ba656:	f000 fd17 	bl	bb088 <__aeabi_dcmplt>
   ba65a:	b930      	cbnz	r0, ba66a <sqrt+0x4a>
   ba65c:	eeb0 0a48 	vmov.f32	s0, s16
   ba660:	eef0 0a68 	vmov.f32	s1, s17
   ba664:	ecbd 8b02 	vpop	{d8}
   ba668:	bd38      	pop	{r3, r4, r5, pc}
   ba66a:	f7fd fb4d 	bl	b7d08 <__errno>
   ba66e:	2200      	movs	r2, #0
   ba670:	2300      	movs	r3, #0
   ba672:	2121      	movs	r1, #33	; 0x21
   ba674:	6001      	str	r1, [r0, #0]
   ba676:	4610      	mov	r0, r2
   ba678:	4619      	mov	r1, r3
   ba67a:	f000 fbbd 	bl	badf8 <__aeabi_ddiv>
   ba67e:	ec41 0b18 	vmov	d8, r0, r1
   ba682:	eeb0 0a48 	vmov.f32	s0, s16
   ba686:	eef0 0a68 	vmov.f32	s1, s17
   ba68a:	ecbd 8b02 	vpop	{d8}
   ba68e:	bd38      	pop	{r3, r4, r5, pc}
   ba690:	200352fc 	.word	0x200352fc

000ba694 <__ieee754_sqrt>:
   ba694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba698:	4a63      	ldr	r2, [pc, #396]	; (ba828 <__ieee754_sqrt+0x194>)
   ba69a:	ec55 4b10 	vmov	r4, r5, d0
   ba69e:	43aa      	bics	r2, r5
   ba6a0:	f000 809f 	beq.w	ba7e2 <__ieee754_sqrt+0x14e>
   ba6a4:	2d00      	cmp	r5, #0
   ba6a6:	ee10 ca10 	vmov	ip, s0
   ba6aa:	462b      	mov	r3, r5
   ba6ac:	dd54      	ble.n	ba758 <__ieee754_sqrt+0xc4>
   ba6ae:	1529      	asrs	r1, r5, #20
   ba6b0:	d063      	beq.n	ba77a <__ieee754_sqrt+0xe6>
   ba6b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   ba6b6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   ba6ba:	07c9      	lsls	r1, r1, #31
   ba6bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba6c0:	d404      	bmi.n	ba6cc <__ieee754_sqrt+0x38>
   ba6c2:	005b      	lsls	r3, r3, #1
   ba6c4:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   ba6c8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba6cc:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   ba6d0:	2600      	movs	r6, #0
   ba6d2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   ba6d6:	107f      	asrs	r7, r7, #1
   ba6d8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba6dc:	f04f 0e16 	mov.w	lr, #22
   ba6e0:	4634      	mov	r4, r6
   ba6e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   ba6e6:	18a1      	adds	r1, r4, r2
   ba6e8:	4299      	cmp	r1, r3
   ba6ea:	dc02      	bgt.n	ba6f2 <__ieee754_sqrt+0x5e>
   ba6ec:	1a5b      	subs	r3, r3, r1
   ba6ee:	188c      	adds	r4, r1, r2
   ba6f0:	4416      	add	r6, r2
   ba6f2:	005b      	lsls	r3, r3, #1
   ba6f4:	f1be 0e01 	subs.w	lr, lr, #1
   ba6f8:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   ba6fc:	ea4f 0252 	mov.w	r2, r2, lsr #1
   ba700:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba704:	d1ef      	bne.n	ba6e6 <__ieee754_sqrt+0x52>
   ba706:	4675      	mov	r5, lr
   ba708:	2020      	movs	r0, #32
   ba70a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   ba70e:	e00a      	b.n	ba726 <__ieee754_sqrt+0x92>
   ba710:	d044      	beq.n	ba79c <__ieee754_sqrt+0x108>
   ba712:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   ba716:	3801      	subs	r0, #1
   ba718:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   ba71c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba720:	ea4f 0252 	mov.w	r2, r2, lsr #1
   ba724:	d043      	beq.n	ba7ae <__ieee754_sqrt+0x11a>
   ba726:	42a3      	cmp	r3, r4
   ba728:	eb02 010e 	add.w	r1, r2, lr
   ba72c:	ddf0      	ble.n	ba710 <__ieee754_sqrt+0x7c>
   ba72e:	2900      	cmp	r1, #0
   ba730:	eb01 0e02 	add.w	lr, r1, r2
   ba734:	db0a      	blt.n	ba74c <__ieee754_sqrt+0xb8>
   ba736:	46a0      	mov	r8, r4
   ba738:	1b1b      	subs	r3, r3, r4
   ba73a:	4561      	cmp	r1, ip
   ba73c:	bf88      	it	hi
   ba73e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   ba742:	ebac 0c01 	sub.w	ip, ip, r1
   ba746:	4415      	add	r5, r2
   ba748:	4644      	mov	r4, r8
   ba74a:	e7e2      	b.n	ba712 <__ieee754_sqrt+0x7e>
   ba74c:	f1be 0f00 	cmp.w	lr, #0
   ba750:	dbf1      	blt.n	ba736 <__ieee754_sqrt+0xa2>
   ba752:	f104 0801 	add.w	r8, r4, #1
   ba756:	e7ef      	b.n	ba738 <__ieee754_sqrt+0xa4>
   ba758:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   ba75c:	4322      	orrs	r2, r4
   ba75e:	d038      	beq.n	ba7d2 <__ieee754_sqrt+0x13e>
   ba760:	2d00      	cmp	r5, #0
   ba762:	d14e      	bne.n	ba802 <__ieee754_sqrt+0x16e>
   ba764:	4629      	mov	r1, r5
   ba766:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   ba76a:	3915      	subs	r1, #21
   ba76c:	4613      	mov	r3, r2
   ba76e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   ba772:	2a00      	cmp	r2, #0
   ba774:	d0f7      	beq.n	ba766 <__ieee754_sqrt+0xd2>
   ba776:	02d6      	lsls	r6, r2, #11
   ba778:	d450      	bmi.n	ba81c <__ieee754_sqrt+0x188>
   ba77a:	2000      	movs	r0, #0
   ba77c:	005b      	lsls	r3, r3, #1
   ba77e:	02dd      	lsls	r5, r3, #11
   ba780:	4604      	mov	r4, r0
   ba782:	f100 0001 	add.w	r0, r0, #1
   ba786:	d5f9      	bpl.n	ba77c <__ieee754_sqrt+0xe8>
   ba788:	461a      	mov	r2, r3
   ba78a:	4663      	mov	r3, ip
   ba78c:	fa0c fc00 	lsl.w	ip, ip, r0
   ba790:	f1c0 0020 	rsb	r0, r0, #32
   ba794:	40c3      	lsrs	r3, r0
   ba796:	1b09      	subs	r1, r1, r4
   ba798:	4313      	orrs	r3, r2
   ba79a:	e78a      	b.n	ba6b2 <__ieee754_sqrt+0x1e>
   ba79c:	4561      	cmp	r1, ip
   ba79e:	d8b8      	bhi.n	ba712 <__ieee754_sqrt+0x7e>
   ba7a0:	2900      	cmp	r1, #0
   ba7a2:	eb01 0e02 	add.w	lr, r1, r2
   ba7a6:	dbd1      	blt.n	ba74c <__ieee754_sqrt+0xb8>
   ba7a8:	4698      	mov	r8, r3
   ba7aa:	2300      	movs	r3, #0
   ba7ac:	e7c9      	b.n	ba742 <__ieee754_sqrt+0xae>
   ba7ae:	ea53 030c 	orrs.w	r3, r3, ip
   ba7b2:	d110      	bne.n	ba7d6 <__ieee754_sqrt+0x142>
   ba7b4:	0868      	lsrs	r0, r5, #1
   ba7b6:	1071      	asrs	r1, r6, #1
   ba7b8:	07f3      	lsls	r3, r6, #31
   ba7ba:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   ba7be:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   ba7c2:	bf48      	it	mi
   ba7c4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   ba7c8:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   ba7cc:	4602      	mov	r2, r0
   ba7ce:	ec43 2b10 	vmov	d0, r2, r3
   ba7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba7d6:	1c6a      	adds	r2, r5, #1
   ba7d8:	bf16      	itet	ne
   ba7da:	1c68      	addne	r0, r5, #1
   ba7dc:	3601      	addeq	r6, #1
   ba7de:	0840      	lsrne	r0, r0, #1
   ba7e0:	e7e9      	b.n	ba7b6 <__ieee754_sqrt+0x122>
   ba7e2:	ee10 2a10 	vmov	r2, s0
   ba7e6:	ee10 0a10 	vmov	r0, s0
   ba7ea:	462b      	mov	r3, r5
   ba7ec:	4629      	mov	r1, r5
   ba7ee:	f000 f9d9 	bl	baba4 <__aeabi_dmul>
   ba7f2:	4622      	mov	r2, r4
   ba7f4:	462b      	mov	r3, r5
   ba7f6:	f000 f81f 	bl	ba838 <__adddf3>
   ba7fa:	ec41 0b10 	vmov	d0, r0, r1
   ba7fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba802:	ee10 2a10 	vmov	r2, s0
   ba806:	4620      	mov	r0, r4
   ba808:	4629      	mov	r1, r5
   ba80a:	f000 f813 	bl	ba834 <__aeabi_dsub>
   ba80e:	4602      	mov	r2, r0
   ba810:	460b      	mov	r3, r1
   ba812:	f000 faf1 	bl	badf8 <__aeabi_ddiv>
   ba816:	ec41 0b10 	vmov	d0, r0, r1
   ba81a:	e7da      	b.n	ba7d2 <__ieee754_sqrt+0x13e>
   ba81c:	4663      	mov	r3, ip
   ba81e:	2020      	movs	r0, #32
   ba820:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   ba824:	e7b6      	b.n	ba794 <__ieee754_sqrt+0x100>
   ba826:	bf00      	nop
   ba828:	7ff00000 	.word	0x7ff00000

000ba82c <__aeabi_drsub>:
   ba82c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   ba830:	e002      	b.n	ba838 <__adddf3>
   ba832:	bf00      	nop

000ba834 <__aeabi_dsub>:
   ba834:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000ba838 <__adddf3>:
   ba838:	b530      	push	{r4, r5, lr}
   ba83a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   ba83e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   ba842:	ea94 0f05 	teq	r4, r5
   ba846:	bf08      	it	eq
   ba848:	ea90 0f02 	teqeq	r0, r2
   ba84c:	bf1f      	itttt	ne
   ba84e:	ea54 0c00 	orrsne.w	ip, r4, r0
   ba852:	ea55 0c02 	orrsne.w	ip, r5, r2
   ba856:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   ba85a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba85e:	f000 80e2 	beq.w	baa26 <__adddf3+0x1ee>
   ba862:	ea4f 5454 	mov.w	r4, r4, lsr #21
   ba866:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   ba86a:	bfb8      	it	lt
   ba86c:	426d      	neglt	r5, r5
   ba86e:	dd0c      	ble.n	ba88a <__adddf3+0x52>
   ba870:	442c      	add	r4, r5
   ba872:	ea80 0202 	eor.w	r2, r0, r2
   ba876:	ea81 0303 	eor.w	r3, r1, r3
   ba87a:	ea82 0000 	eor.w	r0, r2, r0
   ba87e:	ea83 0101 	eor.w	r1, r3, r1
   ba882:	ea80 0202 	eor.w	r2, r0, r2
   ba886:	ea81 0303 	eor.w	r3, r1, r3
   ba88a:	2d36      	cmp	r5, #54	; 0x36
   ba88c:	bf88      	it	hi
   ba88e:	bd30      	pophi	{r4, r5, pc}
   ba890:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   ba894:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba898:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   ba89c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   ba8a0:	d002      	beq.n	ba8a8 <__adddf3+0x70>
   ba8a2:	4240      	negs	r0, r0
   ba8a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba8a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   ba8ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba8b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   ba8b4:	d002      	beq.n	ba8bc <__adddf3+0x84>
   ba8b6:	4252      	negs	r2, r2
   ba8b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   ba8bc:	ea94 0f05 	teq	r4, r5
   ba8c0:	f000 80a7 	beq.w	baa12 <__adddf3+0x1da>
   ba8c4:	f1a4 0401 	sub.w	r4, r4, #1
   ba8c8:	f1d5 0e20 	rsbs	lr, r5, #32
   ba8cc:	db0d      	blt.n	ba8ea <__adddf3+0xb2>
   ba8ce:	fa02 fc0e 	lsl.w	ip, r2, lr
   ba8d2:	fa22 f205 	lsr.w	r2, r2, r5
   ba8d6:	1880      	adds	r0, r0, r2
   ba8d8:	f141 0100 	adc.w	r1, r1, #0
   ba8dc:	fa03 f20e 	lsl.w	r2, r3, lr
   ba8e0:	1880      	adds	r0, r0, r2
   ba8e2:	fa43 f305 	asr.w	r3, r3, r5
   ba8e6:	4159      	adcs	r1, r3
   ba8e8:	e00e      	b.n	ba908 <__adddf3+0xd0>
   ba8ea:	f1a5 0520 	sub.w	r5, r5, #32
   ba8ee:	f10e 0e20 	add.w	lr, lr, #32
   ba8f2:	2a01      	cmp	r2, #1
   ba8f4:	fa03 fc0e 	lsl.w	ip, r3, lr
   ba8f8:	bf28      	it	cs
   ba8fa:	f04c 0c02 	orrcs.w	ip, ip, #2
   ba8fe:	fa43 f305 	asr.w	r3, r3, r5
   ba902:	18c0      	adds	r0, r0, r3
   ba904:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   ba908:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba90c:	d507      	bpl.n	ba91e <__adddf3+0xe6>
   ba90e:	f04f 0e00 	mov.w	lr, #0
   ba912:	f1dc 0c00 	rsbs	ip, ip, #0
   ba916:	eb7e 0000 	sbcs.w	r0, lr, r0
   ba91a:	eb6e 0101 	sbc.w	r1, lr, r1
   ba91e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   ba922:	d31b      	bcc.n	ba95c <__adddf3+0x124>
   ba924:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   ba928:	d30c      	bcc.n	ba944 <__adddf3+0x10c>
   ba92a:	0849      	lsrs	r1, r1, #1
   ba92c:	ea5f 0030 	movs.w	r0, r0, rrx
   ba930:	ea4f 0c3c 	mov.w	ip, ip, rrx
   ba934:	f104 0401 	add.w	r4, r4, #1
   ba938:	ea4f 5244 	mov.w	r2, r4, lsl #21
   ba93c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   ba940:	f080 809a 	bcs.w	baa78 <__adddf3+0x240>
   ba944:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   ba948:	bf08      	it	eq
   ba94a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba94e:	f150 0000 	adcs.w	r0, r0, #0
   ba952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba956:	ea41 0105 	orr.w	r1, r1, r5
   ba95a:	bd30      	pop	{r4, r5, pc}
   ba95c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   ba960:	4140      	adcs	r0, r0
   ba962:	eb41 0101 	adc.w	r1, r1, r1
   ba966:	3c01      	subs	r4, #1
   ba968:	bf28      	it	cs
   ba96a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   ba96e:	d2e9      	bcs.n	ba944 <__adddf3+0x10c>
   ba970:	f091 0f00 	teq	r1, #0
   ba974:	bf04      	itt	eq
   ba976:	4601      	moveq	r1, r0
   ba978:	2000      	moveq	r0, #0
   ba97a:	fab1 f381 	clz	r3, r1
   ba97e:	bf08      	it	eq
   ba980:	3320      	addeq	r3, #32
   ba982:	f1a3 030b 	sub.w	r3, r3, #11
   ba986:	f1b3 0220 	subs.w	r2, r3, #32
   ba98a:	da0c      	bge.n	ba9a6 <__adddf3+0x16e>
   ba98c:	320c      	adds	r2, #12
   ba98e:	dd08      	ble.n	ba9a2 <__adddf3+0x16a>
   ba990:	f102 0c14 	add.w	ip, r2, #20
   ba994:	f1c2 020c 	rsb	r2, r2, #12
   ba998:	fa01 f00c 	lsl.w	r0, r1, ip
   ba99c:	fa21 f102 	lsr.w	r1, r1, r2
   ba9a0:	e00c      	b.n	ba9bc <__adddf3+0x184>
   ba9a2:	f102 0214 	add.w	r2, r2, #20
   ba9a6:	bfd8      	it	le
   ba9a8:	f1c2 0c20 	rsble	ip, r2, #32
   ba9ac:	fa01 f102 	lsl.w	r1, r1, r2
   ba9b0:	fa20 fc0c 	lsr.w	ip, r0, ip
   ba9b4:	bfdc      	itt	le
   ba9b6:	ea41 010c 	orrle.w	r1, r1, ip
   ba9ba:	4090      	lslle	r0, r2
   ba9bc:	1ae4      	subs	r4, r4, r3
   ba9be:	bfa2      	ittt	ge
   ba9c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   ba9c4:	4329      	orrge	r1, r5
   ba9c6:	bd30      	popge	{r4, r5, pc}
   ba9c8:	ea6f 0404 	mvn.w	r4, r4
   ba9cc:	3c1f      	subs	r4, #31
   ba9ce:	da1c      	bge.n	baa0a <__adddf3+0x1d2>
   ba9d0:	340c      	adds	r4, #12
   ba9d2:	dc0e      	bgt.n	ba9f2 <__adddf3+0x1ba>
   ba9d4:	f104 0414 	add.w	r4, r4, #20
   ba9d8:	f1c4 0220 	rsb	r2, r4, #32
   ba9dc:	fa20 f004 	lsr.w	r0, r0, r4
   ba9e0:	fa01 f302 	lsl.w	r3, r1, r2
   ba9e4:	ea40 0003 	orr.w	r0, r0, r3
   ba9e8:	fa21 f304 	lsr.w	r3, r1, r4
   ba9ec:	ea45 0103 	orr.w	r1, r5, r3
   ba9f0:	bd30      	pop	{r4, r5, pc}
   ba9f2:	f1c4 040c 	rsb	r4, r4, #12
   ba9f6:	f1c4 0220 	rsb	r2, r4, #32
   ba9fa:	fa20 f002 	lsr.w	r0, r0, r2
   ba9fe:	fa01 f304 	lsl.w	r3, r1, r4
   baa02:	ea40 0003 	orr.w	r0, r0, r3
   baa06:	4629      	mov	r1, r5
   baa08:	bd30      	pop	{r4, r5, pc}
   baa0a:	fa21 f004 	lsr.w	r0, r1, r4
   baa0e:	4629      	mov	r1, r5
   baa10:	bd30      	pop	{r4, r5, pc}
   baa12:	f094 0f00 	teq	r4, #0
   baa16:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   baa1a:	bf06      	itte	eq
   baa1c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   baa20:	3401      	addeq	r4, #1
   baa22:	3d01      	subne	r5, #1
   baa24:	e74e      	b.n	ba8c4 <__adddf3+0x8c>
   baa26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   baa2a:	bf18      	it	ne
   baa2c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   baa30:	d029      	beq.n	baa86 <__adddf3+0x24e>
   baa32:	ea94 0f05 	teq	r4, r5
   baa36:	bf08      	it	eq
   baa38:	ea90 0f02 	teqeq	r0, r2
   baa3c:	d005      	beq.n	baa4a <__adddf3+0x212>
   baa3e:	ea54 0c00 	orrs.w	ip, r4, r0
   baa42:	bf04      	itt	eq
   baa44:	4619      	moveq	r1, r3
   baa46:	4610      	moveq	r0, r2
   baa48:	bd30      	pop	{r4, r5, pc}
   baa4a:	ea91 0f03 	teq	r1, r3
   baa4e:	bf1e      	ittt	ne
   baa50:	2100      	movne	r1, #0
   baa52:	2000      	movne	r0, #0
   baa54:	bd30      	popne	{r4, r5, pc}
   baa56:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   baa5a:	d105      	bne.n	baa68 <__adddf3+0x230>
   baa5c:	0040      	lsls	r0, r0, #1
   baa5e:	4149      	adcs	r1, r1
   baa60:	bf28      	it	cs
   baa62:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   baa66:	bd30      	pop	{r4, r5, pc}
   baa68:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   baa6c:	bf3c      	itt	cc
   baa6e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   baa72:	bd30      	popcc	{r4, r5, pc}
   baa74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   baa78:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   baa7c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   baa80:	f04f 0000 	mov.w	r0, #0
   baa84:	bd30      	pop	{r4, r5, pc}
   baa86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   baa8a:	bf1a      	itte	ne
   baa8c:	4619      	movne	r1, r3
   baa8e:	4610      	movne	r0, r2
   baa90:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   baa94:	bf1c      	itt	ne
   baa96:	460b      	movne	r3, r1
   baa98:	4602      	movne	r2, r0
   baa9a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   baa9e:	bf06      	itte	eq
   baaa0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   baaa4:	ea91 0f03 	teqeq	r1, r3
   baaa8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   baaac:	bd30      	pop	{r4, r5, pc}
   baaae:	bf00      	nop

000baab0 <__aeabi_ui2d>:
   baab0:	f090 0f00 	teq	r0, #0
   baab4:	bf04      	itt	eq
   baab6:	2100      	moveq	r1, #0
   baab8:	4770      	bxeq	lr
   baaba:	b530      	push	{r4, r5, lr}
   baabc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baac0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baac4:	f04f 0500 	mov.w	r5, #0
   baac8:	f04f 0100 	mov.w	r1, #0
   baacc:	e750      	b.n	ba970 <__adddf3+0x138>
   baace:	bf00      	nop

000baad0 <__aeabi_i2d>:
   baad0:	f090 0f00 	teq	r0, #0
   baad4:	bf04      	itt	eq
   baad6:	2100      	moveq	r1, #0
   baad8:	4770      	bxeq	lr
   baada:	b530      	push	{r4, r5, lr}
   baadc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   baae0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   baae4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   baae8:	bf48      	it	mi
   baaea:	4240      	negmi	r0, r0
   baaec:	f04f 0100 	mov.w	r1, #0
   baaf0:	e73e      	b.n	ba970 <__adddf3+0x138>
   baaf2:	bf00      	nop

000baaf4 <__aeabi_f2d>:
   baaf4:	0042      	lsls	r2, r0, #1
   baaf6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   baafa:	ea4f 0131 	mov.w	r1, r1, rrx
   baafe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bab02:	bf1f      	itttt	ne
   bab04:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bab08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bab0c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bab10:	4770      	bxne	lr
   bab12:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bab16:	bf08      	it	eq
   bab18:	4770      	bxeq	lr
   bab1a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bab1e:	bf04      	itt	eq
   bab20:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bab24:	4770      	bxeq	lr
   bab26:	b530      	push	{r4, r5, lr}
   bab28:	f44f 7460 	mov.w	r4, #896	; 0x380
   bab2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bab30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bab34:	e71c      	b.n	ba970 <__adddf3+0x138>
   bab36:	bf00      	nop

000bab38 <__aeabi_ul2d>:
   bab38:	ea50 0201 	orrs.w	r2, r0, r1
   bab3c:	bf08      	it	eq
   bab3e:	4770      	bxeq	lr
   bab40:	b530      	push	{r4, r5, lr}
   bab42:	f04f 0500 	mov.w	r5, #0
   bab46:	e00a      	b.n	bab5e <__aeabi_l2d+0x16>

000bab48 <__aeabi_l2d>:
   bab48:	ea50 0201 	orrs.w	r2, r0, r1
   bab4c:	bf08      	it	eq
   bab4e:	4770      	bxeq	lr
   bab50:	b530      	push	{r4, r5, lr}
   bab52:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bab56:	d502      	bpl.n	bab5e <__aeabi_l2d+0x16>
   bab58:	4240      	negs	r0, r0
   bab5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bab5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bab62:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bab66:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bab6a:	f43f aed8 	beq.w	ba91e <__adddf3+0xe6>
   bab6e:	f04f 0203 	mov.w	r2, #3
   bab72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bab76:	bf18      	it	ne
   bab78:	3203      	addne	r2, #3
   bab7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bab7e:	bf18      	it	ne
   bab80:	3203      	addne	r2, #3
   bab82:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bab86:	f1c2 0320 	rsb	r3, r2, #32
   bab8a:	fa00 fc03 	lsl.w	ip, r0, r3
   bab8e:	fa20 f002 	lsr.w	r0, r0, r2
   bab92:	fa01 fe03 	lsl.w	lr, r1, r3
   bab96:	ea40 000e 	orr.w	r0, r0, lr
   bab9a:	fa21 f102 	lsr.w	r1, r1, r2
   bab9e:	4414      	add	r4, r2
   baba0:	e6bd      	b.n	ba91e <__adddf3+0xe6>
   baba2:	bf00      	nop

000baba4 <__aeabi_dmul>:
   baba4:	b570      	push	{r4, r5, r6, lr}
   baba6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   babaa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   babae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   babb2:	bf1d      	ittte	ne
   babb4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   babb8:	ea94 0f0c 	teqne	r4, ip
   babbc:	ea95 0f0c 	teqne	r5, ip
   babc0:	f000 f8de 	bleq	bad80 <__aeabi_dmul+0x1dc>
   babc4:	442c      	add	r4, r5
   babc6:	ea81 0603 	eor.w	r6, r1, r3
   babca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   babce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   babd2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   babd6:	bf18      	it	ne
   babd8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   babdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   babe0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   babe4:	d038      	beq.n	bac58 <__aeabi_dmul+0xb4>
   babe6:	fba0 ce02 	umull	ip, lr, r0, r2
   babea:	f04f 0500 	mov.w	r5, #0
   babee:	fbe1 e502 	umlal	lr, r5, r1, r2
   babf2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   babf6:	fbe0 e503 	umlal	lr, r5, r0, r3
   babfa:	f04f 0600 	mov.w	r6, #0
   babfe:	fbe1 5603 	umlal	r5, r6, r1, r3
   bac02:	f09c 0f00 	teq	ip, #0
   bac06:	bf18      	it	ne
   bac08:	f04e 0e01 	orrne.w	lr, lr, #1
   bac0c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bac10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bac14:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bac18:	d204      	bcs.n	bac24 <__aeabi_dmul+0x80>
   bac1a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bac1e:	416d      	adcs	r5, r5
   bac20:	eb46 0606 	adc.w	r6, r6, r6
   bac24:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bac28:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bac2c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bac30:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bac34:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bac38:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bac3c:	bf88      	it	hi
   bac3e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bac42:	d81e      	bhi.n	bac82 <__aeabi_dmul+0xde>
   bac44:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bac48:	bf08      	it	eq
   bac4a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bac4e:	f150 0000 	adcs.w	r0, r0, #0
   bac52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bac56:	bd70      	pop	{r4, r5, r6, pc}
   bac58:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bac5c:	ea46 0101 	orr.w	r1, r6, r1
   bac60:	ea40 0002 	orr.w	r0, r0, r2
   bac64:	ea81 0103 	eor.w	r1, r1, r3
   bac68:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bac6c:	bfc2      	ittt	gt
   bac6e:	ebd4 050c 	rsbsgt	r5, r4, ip
   bac72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bac76:	bd70      	popgt	{r4, r5, r6, pc}
   bac78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bac7c:	f04f 0e00 	mov.w	lr, #0
   bac80:	3c01      	subs	r4, #1
   bac82:	f300 80ab 	bgt.w	baddc <__aeabi_dmul+0x238>
   bac86:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bac8a:	bfde      	ittt	le
   bac8c:	2000      	movle	r0, #0
   bac8e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bac92:	bd70      	pople	{r4, r5, r6, pc}
   bac94:	f1c4 0400 	rsb	r4, r4, #0
   bac98:	3c20      	subs	r4, #32
   bac9a:	da35      	bge.n	bad08 <__aeabi_dmul+0x164>
   bac9c:	340c      	adds	r4, #12
   bac9e:	dc1b      	bgt.n	bacd8 <__aeabi_dmul+0x134>
   baca0:	f104 0414 	add.w	r4, r4, #20
   baca4:	f1c4 0520 	rsb	r5, r4, #32
   baca8:	fa00 f305 	lsl.w	r3, r0, r5
   bacac:	fa20 f004 	lsr.w	r0, r0, r4
   bacb0:	fa01 f205 	lsl.w	r2, r1, r5
   bacb4:	ea40 0002 	orr.w	r0, r0, r2
   bacb8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bacbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bacc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bacc4:	fa21 f604 	lsr.w	r6, r1, r4
   bacc8:	eb42 0106 	adc.w	r1, r2, r6
   baccc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bacd0:	bf08      	it	eq
   bacd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bacd6:	bd70      	pop	{r4, r5, r6, pc}
   bacd8:	f1c4 040c 	rsb	r4, r4, #12
   bacdc:	f1c4 0520 	rsb	r5, r4, #32
   bace0:	fa00 f304 	lsl.w	r3, r0, r4
   bace4:	fa20 f005 	lsr.w	r0, r0, r5
   bace8:	fa01 f204 	lsl.w	r2, r1, r4
   bacec:	ea40 0002 	orr.w	r0, r0, r2
   bacf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bacf4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bacf8:	f141 0100 	adc.w	r1, r1, #0
   bacfc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bad00:	bf08      	it	eq
   bad02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bad06:	bd70      	pop	{r4, r5, r6, pc}
   bad08:	f1c4 0520 	rsb	r5, r4, #32
   bad0c:	fa00 f205 	lsl.w	r2, r0, r5
   bad10:	ea4e 0e02 	orr.w	lr, lr, r2
   bad14:	fa20 f304 	lsr.w	r3, r0, r4
   bad18:	fa01 f205 	lsl.w	r2, r1, r5
   bad1c:	ea43 0302 	orr.w	r3, r3, r2
   bad20:	fa21 f004 	lsr.w	r0, r1, r4
   bad24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bad28:	fa21 f204 	lsr.w	r2, r1, r4
   bad2c:	ea20 0002 	bic.w	r0, r0, r2
   bad30:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bad34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bad38:	bf08      	it	eq
   bad3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bad3e:	bd70      	pop	{r4, r5, r6, pc}
   bad40:	f094 0f00 	teq	r4, #0
   bad44:	d10f      	bne.n	bad66 <__aeabi_dmul+0x1c2>
   bad46:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bad4a:	0040      	lsls	r0, r0, #1
   bad4c:	eb41 0101 	adc.w	r1, r1, r1
   bad50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bad54:	bf08      	it	eq
   bad56:	3c01      	subeq	r4, #1
   bad58:	d0f7      	beq.n	bad4a <__aeabi_dmul+0x1a6>
   bad5a:	ea41 0106 	orr.w	r1, r1, r6
   bad5e:	f095 0f00 	teq	r5, #0
   bad62:	bf18      	it	ne
   bad64:	4770      	bxne	lr
   bad66:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bad6a:	0052      	lsls	r2, r2, #1
   bad6c:	eb43 0303 	adc.w	r3, r3, r3
   bad70:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bad74:	bf08      	it	eq
   bad76:	3d01      	subeq	r5, #1
   bad78:	d0f7      	beq.n	bad6a <__aeabi_dmul+0x1c6>
   bad7a:	ea43 0306 	orr.w	r3, r3, r6
   bad7e:	4770      	bx	lr
   bad80:	ea94 0f0c 	teq	r4, ip
   bad84:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bad88:	bf18      	it	ne
   bad8a:	ea95 0f0c 	teqne	r5, ip
   bad8e:	d00c      	beq.n	badaa <__aeabi_dmul+0x206>
   bad90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bad94:	bf18      	it	ne
   bad96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bad9a:	d1d1      	bne.n	bad40 <__aeabi_dmul+0x19c>
   bad9c:	ea81 0103 	eor.w	r1, r1, r3
   bada0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bada4:	f04f 0000 	mov.w	r0, #0
   bada8:	bd70      	pop	{r4, r5, r6, pc}
   badaa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   badae:	bf06      	itte	eq
   badb0:	4610      	moveq	r0, r2
   badb2:	4619      	moveq	r1, r3
   badb4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   badb8:	d019      	beq.n	badee <__aeabi_dmul+0x24a>
   badba:	ea94 0f0c 	teq	r4, ip
   badbe:	d102      	bne.n	badc6 <__aeabi_dmul+0x222>
   badc0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   badc4:	d113      	bne.n	badee <__aeabi_dmul+0x24a>
   badc6:	ea95 0f0c 	teq	r5, ip
   badca:	d105      	bne.n	badd8 <__aeabi_dmul+0x234>
   badcc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   badd0:	bf1c      	itt	ne
   badd2:	4610      	movne	r0, r2
   badd4:	4619      	movne	r1, r3
   badd6:	d10a      	bne.n	badee <__aeabi_dmul+0x24a>
   badd8:	ea81 0103 	eor.w	r1, r1, r3
   baddc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bade0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bade4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bade8:	f04f 0000 	mov.w	r0, #0
   badec:	bd70      	pop	{r4, r5, r6, pc}
   badee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   badf2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   badf6:	bd70      	pop	{r4, r5, r6, pc}

000badf8 <__aeabi_ddiv>:
   badf8:	b570      	push	{r4, r5, r6, lr}
   badfa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   badfe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bae02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bae06:	bf1d      	ittte	ne
   bae08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bae0c:	ea94 0f0c 	teqne	r4, ip
   bae10:	ea95 0f0c 	teqne	r5, ip
   bae14:	f000 f8a7 	bleq	baf66 <__aeabi_ddiv+0x16e>
   bae18:	eba4 0405 	sub.w	r4, r4, r5
   bae1c:	ea81 0e03 	eor.w	lr, r1, r3
   bae20:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bae24:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bae28:	f000 8088 	beq.w	baf3c <__aeabi_ddiv+0x144>
   bae2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bae30:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bae34:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bae38:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bae3c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bae40:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bae44:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bae48:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bae4c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bae50:	429d      	cmp	r5, r3
   bae52:	bf08      	it	eq
   bae54:	4296      	cmpeq	r6, r2
   bae56:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bae5a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bae5e:	d202      	bcs.n	bae66 <__aeabi_ddiv+0x6e>
   bae60:	085b      	lsrs	r3, r3, #1
   bae62:	ea4f 0232 	mov.w	r2, r2, rrx
   bae66:	1ab6      	subs	r6, r6, r2
   bae68:	eb65 0503 	sbc.w	r5, r5, r3
   bae6c:	085b      	lsrs	r3, r3, #1
   bae6e:	ea4f 0232 	mov.w	r2, r2, rrx
   bae72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bae76:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bae7a:	ebb6 0e02 	subs.w	lr, r6, r2
   bae7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bae82:	bf22      	ittt	cs
   bae84:	1ab6      	subcs	r6, r6, r2
   bae86:	4675      	movcs	r5, lr
   bae88:	ea40 000c 	orrcs.w	r0, r0, ip
   bae8c:	085b      	lsrs	r3, r3, #1
   bae8e:	ea4f 0232 	mov.w	r2, r2, rrx
   bae92:	ebb6 0e02 	subs.w	lr, r6, r2
   bae96:	eb75 0e03 	sbcs.w	lr, r5, r3
   bae9a:	bf22      	ittt	cs
   bae9c:	1ab6      	subcs	r6, r6, r2
   bae9e:	4675      	movcs	r5, lr
   baea0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   baea4:	085b      	lsrs	r3, r3, #1
   baea6:	ea4f 0232 	mov.w	r2, r2, rrx
   baeaa:	ebb6 0e02 	subs.w	lr, r6, r2
   baeae:	eb75 0e03 	sbcs.w	lr, r5, r3
   baeb2:	bf22      	ittt	cs
   baeb4:	1ab6      	subcs	r6, r6, r2
   baeb6:	4675      	movcs	r5, lr
   baeb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   baebc:	085b      	lsrs	r3, r3, #1
   baebe:	ea4f 0232 	mov.w	r2, r2, rrx
   baec2:	ebb6 0e02 	subs.w	lr, r6, r2
   baec6:	eb75 0e03 	sbcs.w	lr, r5, r3
   baeca:	bf22      	ittt	cs
   baecc:	1ab6      	subcs	r6, r6, r2
   baece:	4675      	movcs	r5, lr
   baed0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   baed4:	ea55 0e06 	orrs.w	lr, r5, r6
   baed8:	d018      	beq.n	baf0c <__aeabi_ddiv+0x114>
   baeda:	ea4f 1505 	mov.w	r5, r5, lsl #4
   baede:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   baee2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   baee6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   baeea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   baeee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   baef2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   baef6:	d1c0      	bne.n	bae7a <__aeabi_ddiv+0x82>
   baef8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   baefc:	d10b      	bne.n	baf16 <__aeabi_ddiv+0x11e>
   baefe:	ea41 0100 	orr.w	r1, r1, r0
   baf02:	f04f 0000 	mov.w	r0, #0
   baf06:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   baf0a:	e7b6      	b.n	bae7a <__aeabi_ddiv+0x82>
   baf0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   baf10:	bf04      	itt	eq
   baf12:	4301      	orreq	r1, r0
   baf14:	2000      	moveq	r0, #0
   baf16:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   baf1a:	bf88      	it	hi
   baf1c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   baf20:	f63f aeaf 	bhi.w	bac82 <__aeabi_dmul+0xde>
   baf24:	ebb5 0c03 	subs.w	ip, r5, r3
   baf28:	bf04      	itt	eq
   baf2a:	ebb6 0c02 	subseq.w	ip, r6, r2
   baf2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   baf32:	f150 0000 	adcs.w	r0, r0, #0
   baf36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   baf3a:	bd70      	pop	{r4, r5, r6, pc}
   baf3c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   baf40:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   baf44:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   baf48:	bfc2      	ittt	gt
   baf4a:	ebd4 050c 	rsbsgt	r5, r4, ip
   baf4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   baf52:	bd70      	popgt	{r4, r5, r6, pc}
   baf54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   baf58:	f04f 0e00 	mov.w	lr, #0
   baf5c:	3c01      	subs	r4, #1
   baf5e:	e690      	b.n	bac82 <__aeabi_dmul+0xde>
   baf60:	ea45 0e06 	orr.w	lr, r5, r6
   baf64:	e68d      	b.n	bac82 <__aeabi_dmul+0xde>
   baf66:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   baf6a:	ea94 0f0c 	teq	r4, ip
   baf6e:	bf08      	it	eq
   baf70:	ea95 0f0c 	teqeq	r5, ip
   baf74:	f43f af3b 	beq.w	badee <__aeabi_dmul+0x24a>
   baf78:	ea94 0f0c 	teq	r4, ip
   baf7c:	d10a      	bne.n	baf94 <__aeabi_ddiv+0x19c>
   baf7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   baf82:	f47f af34 	bne.w	badee <__aeabi_dmul+0x24a>
   baf86:	ea95 0f0c 	teq	r5, ip
   baf8a:	f47f af25 	bne.w	badd8 <__aeabi_dmul+0x234>
   baf8e:	4610      	mov	r0, r2
   baf90:	4619      	mov	r1, r3
   baf92:	e72c      	b.n	badee <__aeabi_dmul+0x24a>
   baf94:	ea95 0f0c 	teq	r5, ip
   baf98:	d106      	bne.n	bafa8 <__aeabi_ddiv+0x1b0>
   baf9a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   baf9e:	f43f aefd 	beq.w	bad9c <__aeabi_dmul+0x1f8>
   bafa2:	4610      	mov	r0, r2
   bafa4:	4619      	mov	r1, r3
   bafa6:	e722      	b.n	badee <__aeabi_dmul+0x24a>
   bafa8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bafac:	bf18      	it	ne
   bafae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bafb2:	f47f aec5 	bne.w	bad40 <__aeabi_dmul+0x19c>
   bafb6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bafba:	f47f af0d 	bne.w	badd8 <__aeabi_dmul+0x234>
   bafbe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bafc2:	f47f aeeb 	bne.w	bad9c <__aeabi_dmul+0x1f8>
   bafc6:	e712      	b.n	badee <__aeabi_dmul+0x24a>

000bafc8 <__gedf2>:
   bafc8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bafcc:	e006      	b.n	bafdc <__cmpdf2+0x4>
   bafce:	bf00      	nop

000bafd0 <__ledf2>:
   bafd0:	f04f 0c01 	mov.w	ip, #1
   bafd4:	e002      	b.n	bafdc <__cmpdf2+0x4>
   bafd6:	bf00      	nop

000bafd8 <__cmpdf2>:
   bafd8:	f04f 0c01 	mov.w	ip, #1
   bafdc:	f84d cd04 	str.w	ip, [sp, #-4]!
   bafe0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bafe4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bafe8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bafec:	bf18      	it	ne
   bafee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   baff2:	d01b      	beq.n	bb02c <__cmpdf2+0x54>
   baff4:	b001      	add	sp, #4
   baff6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   baffa:	bf0c      	ite	eq
   baffc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bb000:	ea91 0f03 	teqne	r1, r3
   bb004:	bf02      	ittt	eq
   bb006:	ea90 0f02 	teqeq	r0, r2
   bb00a:	2000      	moveq	r0, #0
   bb00c:	4770      	bxeq	lr
   bb00e:	f110 0f00 	cmn.w	r0, #0
   bb012:	ea91 0f03 	teq	r1, r3
   bb016:	bf58      	it	pl
   bb018:	4299      	cmppl	r1, r3
   bb01a:	bf08      	it	eq
   bb01c:	4290      	cmpeq	r0, r2
   bb01e:	bf2c      	ite	cs
   bb020:	17d8      	asrcs	r0, r3, #31
   bb022:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bb026:	f040 0001 	orr.w	r0, r0, #1
   bb02a:	4770      	bx	lr
   bb02c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb030:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb034:	d102      	bne.n	bb03c <__cmpdf2+0x64>
   bb036:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb03a:	d107      	bne.n	bb04c <__cmpdf2+0x74>
   bb03c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb040:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb044:	d1d6      	bne.n	baff4 <__cmpdf2+0x1c>
   bb046:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb04a:	d0d3      	beq.n	baff4 <__cmpdf2+0x1c>
   bb04c:	f85d 0b04 	ldr.w	r0, [sp], #4
   bb050:	4770      	bx	lr
   bb052:	bf00      	nop

000bb054 <__aeabi_cdrcmple>:
   bb054:	4684      	mov	ip, r0
   bb056:	4610      	mov	r0, r2
   bb058:	4662      	mov	r2, ip
   bb05a:	468c      	mov	ip, r1
   bb05c:	4619      	mov	r1, r3
   bb05e:	4663      	mov	r3, ip
   bb060:	e000      	b.n	bb064 <__aeabi_cdcmpeq>
   bb062:	bf00      	nop

000bb064 <__aeabi_cdcmpeq>:
   bb064:	b501      	push	{r0, lr}
   bb066:	f7ff ffb7 	bl	bafd8 <__cmpdf2>
   bb06a:	2800      	cmp	r0, #0
   bb06c:	bf48      	it	mi
   bb06e:	f110 0f00 	cmnmi.w	r0, #0
   bb072:	bd01      	pop	{r0, pc}

000bb074 <__aeabi_dcmpeq>:
   bb074:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb078:	f7ff fff4 	bl	bb064 <__aeabi_cdcmpeq>
   bb07c:	bf0c      	ite	eq
   bb07e:	2001      	moveq	r0, #1
   bb080:	2000      	movne	r0, #0
   bb082:	f85d fb08 	ldr.w	pc, [sp], #8
   bb086:	bf00      	nop

000bb088 <__aeabi_dcmplt>:
   bb088:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb08c:	f7ff ffea 	bl	bb064 <__aeabi_cdcmpeq>
   bb090:	bf34      	ite	cc
   bb092:	2001      	movcc	r0, #1
   bb094:	2000      	movcs	r0, #0
   bb096:	f85d fb08 	ldr.w	pc, [sp], #8
   bb09a:	bf00      	nop

000bb09c <__aeabi_dcmple>:
   bb09c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb0a0:	f7ff ffe0 	bl	bb064 <__aeabi_cdcmpeq>
   bb0a4:	bf94      	ite	ls
   bb0a6:	2001      	movls	r0, #1
   bb0a8:	2000      	movhi	r0, #0
   bb0aa:	f85d fb08 	ldr.w	pc, [sp], #8
   bb0ae:	bf00      	nop

000bb0b0 <__aeabi_dcmpge>:
   bb0b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb0b4:	f7ff ffce 	bl	bb054 <__aeabi_cdrcmple>
   bb0b8:	bf94      	ite	ls
   bb0ba:	2001      	movls	r0, #1
   bb0bc:	2000      	movhi	r0, #0
   bb0be:	f85d fb08 	ldr.w	pc, [sp], #8
   bb0c2:	bf00      	nop

000bb0c4 <__aeabi_dcmpgt>:
   bb0c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bb0c8:	f7ff ffc4 	bl	bb054 <__aeabi_cdrcmple>
   bb0cc:	bf34      	ite	cc
   bb0ce:	2001      	movcc	r0, #1
   bb0d0:	2000      	movcs	r0, #0
   bb0d2:	f85d fb08 	ldr.w	pc, [sp], #8
   bb0d6:	bf00      	nop

000bb0d8 <__aeabi_dcmpun>:
   bb0d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bb0dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb0e0:	d102      	bne.n	bb0e8 <__aeabi_dcmpun+0x10>
   bb0e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bb0e6:	d10a      	bne.n	bb0fe <__aeabi_dcmpun+0x26>
   bb0e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bb0ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bb0f0:	d102      	bne.n	bb0f8 <__aeabi_dcmpun+0x20>
   bb0f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bb0f6:	d102      	bne.n	bb0fe <__aeabi_dcmpun+0x26>
   bb0f8:	f04f 0000 	mov.w	r0, #0
   bb0fc:	4770      	bx	lr
   bb0fe:	f04f 0001 	mov.w	r0, #1
   bb102:	4770      	bx	lr

000bb104 <__aeabi_d2uiz>:
   bb104:	004a      	lsls	r2, r1, #1
   bb106:	d211      	bcs.n	bb12c <__aeabi_d2uiz+0x28>
   bb108:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bb10c:	d211      	bcs.n	bb132 <__aeabi_d2uiz+0x2e>
   bb10e:	d50d      	bpl.n	bb12c <__aeabi_d2uiz+0x28>
   bb110:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bb114:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bb118:	d40e      	bmi.n	bb138 <__aeabi_d2uiz+0x34>
   bb11a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb11e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bb122:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bb126:	fa23 f002 	lsr.w	r0, r3, r2
   bb12a:	4770      	bx	lr
   bb12c:	f04f 0000 	mov.w	r0, #0
   bb130:	4770      	bx	lr
   bb132:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bb136:	d102      	bne.n	bb13e <__aeabi_d2uiz+0x3a>
   bb138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb13c:	4770      	bx	lr
   bb13e:	f04f 0000 	mov.w	r0, #0
   bb142:	4770      	bx	lr

000bb144 <__aeabi_d2f>:
   bb144:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bb148:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bb14c:	bf24      	itt	cs
   bb14e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bb152:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bb156:	d90d      	bls.n	bb174 <__aeabi_d2f+0x30>
   bb158:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bb15c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bb160:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bb164:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bb168:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bb16c:	bf08      	it	eq
   bb16e:	f020 0001 	biceq.w	r0, r0, #1
   bb172:	4770      	bx	lr
   bb174:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bb178:	d121      	bne.n	bb1be <__aeabi_d2f+0x7a>
   bb17a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bb17e:	bfbc      	itt	lt
   bb180:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bb184:	4770      	bxlt	lr
   bb186:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb18a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bb18e:	f1c2 0218 	rsb	r2, r2, #24
   bb192:	f1c2 0c20 	rsb	ip, r2, #32
   bb196:	fa10 f30c 	lsls.w	r3, r0, ip
   bb19a:	fa20 f002 	lsr.w	r0, r0, r2
   bb19e:	bf18      	it	ne
   bb1a0:	f040 0001 	orrne.w	r0, r0, #1
   bb1a4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bb1a8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bb1ac:	fa03 fc0c 	lsl.w	ip, r3, ip
   bb1b0:	ea40 000c 	orr.w	r0, r0, ip
   bb1b4:	fa23 f302 	lsr.w	r3, r3, r2
   bb1b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bb1bc:	e7cc      	b.n	bb158 <__aeabi_d2f+0x14>
   bb1be:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bb1c2:	d107      	bne.n	bb1d4 <__aeabi_d2f+0x90>
   bb1c4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bb1c8:	bf1e      	ittt	ne
   bb1ca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bb1ce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bb1d2:	4770      	bxne	lr
   bb1d4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bb1d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bb1dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bb1e0:	4770      	bx	lr
   bb1e2:	bf00      	nop

000bb1e4 <__aeabi_d2ulz>:
   bb1e4:	b5d0      	push	{r4, r6, r7, lr}
   bb1e6:	4b0c      	ldr	r3, [pc, #48]	; (bb218 <__aeabi_d2ulz+0x34>)
   bb1e8:	2200      	movs	r2, #0
   bb1ea:	4606      	mov	r6, r0
   bb1ec:	460f      	mov	r7, r1
   bb1ee:	f7ff fcd9 	bl	baba4 <__aeabi_dmul>
   bb1f2:	f7ff ff87 	bl	bb104 <__aeabi_d2uiz>
   bb1f6:	4604      	mov	r4, r0
   bb1f8:	f7ff fc5a 	bl	baab0 <__aeabi_ui2d>
   bb1fc:	4b07      	ldr	r3, [pc, #28]	; (bb21c <__aeabi_d2ulz+0x38>)
   bb1fe:	2200      	movs	r2, #0
   bb200:	f7ff fcd0 	bl	baba4 <__aeabi_dmul>
   bb204:	4602      	mov	r2, r0
   bb206:	460b      	mov	r3, r1
   bb208:	4630      	mov	r0, r6
   bb20a:	4639      	mov	r1, r7
   bb20c:	f7ff fb12 	bl	ba834 <__aeabi_dsub>
   bb210:	f7ff ff78 	bl	bb104 <__aeabi_d2uiz>
   bb214:	4621      	mov	r1, r4
   bb216:	bdd0      	pop	{r4, r6, r7, pc}
   bb218:	3df00000 	.word	0x3df00000
   bb21c:	41f00000 	.word	0x41f00000

000bb220 <atexit>:
   bb220:	2300      	movs	r3, #0
   bb222:	4601      	mov	r1, r0
   bb224:	461a      	mov	r2, r3
   bb226:	4618      	mov	r0, r3
   bb228:	f000 bfcc 	b.w	bc1c4 <__register_exitproc>

000bb22c <atoi>:
   bb22c:	220a      	movs	r2, #10
   bb22e:	2100      	movs	r1, #0
   bb230:	f000 bfbe 	b.w	bc1b0 <strtol>

000bb234 <memcmp>:
   bb234:	b510      	push	{r4, lr}
   bb236:	3901      	subs	r1, #1
   bb238:	4402      	add	r2, r0
   bb23a:	4290      	cmp	r0, r2
   bb23c:	d101      	bne.n	bb242 <memcmp+0xe>
   bb23e:	2000      	movs	r0, #0
   bb240:	e005      	b.n	bb24e <memcmp+0x1a>
   bb242:	7803      	ldrb	r3, [r0, #0]
   bb244:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bb248:	42a3      	cmp	r3, r4
   bb24a:	d001      	beq.n	bb250 <memcmp+0x1c>
   bb24c:	1b18      	subs	r0, r3, r4
   bb24e:	bd10      	pop	{r4, pc}
   bb250:	3001      	adds	r0, #1
   bb252:	e7f2      	b.n	bb23a <memcmp+0x6>

000bb254 <memcpy>:
   bb254:	440a      	add	r2, r1
   bb256:	4291      	cmp	r1, r2
   bb258:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bb25c:	d100      	bne.n	bb260 <memcpy+0xc>
   bb25e:	4770      	bx	lr
   bb260:	b510      	push	{r4, lr}
   bb262:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb266:	f803 4f01 	strb.w	r4, [r3, #1]!
   bb26a:	4291      	cmp	r1, r2
   bb26c:	d1f9      	bne.n	bb262 <memcpy+0xe>
   bb26e:	bd10      	pop	{r4, pc}

000bb270 <memmove>:
   bb270:	4288      	cmp	r0, r1
   bb272:	b510      	push	{r4, lr}
   bb274:	eb01 0402 	add.w	r4, r1, r2
   bb278:	d902      	bls.n	bb280 <memmove+0x10>
   bb27a:	4284      	cmp	r4, r0
   bb27c:	4623      	mov	r3, r4
   bb27e:	d807      	bhi.n	bb290 <memmove+0x20>
   bb280:	1e43      	subs	r3, r0, #1
   bb282:	42a1      	cmp	r1, r4
   bb284:	d008      	beq.n	bb298 <memmove+0x28>
   bb286:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb28a:	f803 2f01 	strb.w	r2, [r3, #1]!
   bb28e:	e7f8      	b.n	bb282 <memmove+0x12>
   bb290:	4402      	add	r2, r0
   bb292:	4601      	mov	r1, r0
   bb294:	428a      	cmp	r2, r1
   bb296:	d100      	bne.n	bb29a <memmove+0x2a>
   bb298:	bd10      	pop	{r4, pc}
   bb29a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bb29e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bb2a2:	e7f7      	b.n	bb294 <memmove+0x24>

000bb2a4 <memset>:
   bb2a4:	4402      	add	r2, r0
   bb2a6:	4603      	mov	r3, r0
   bb2a8:	4293      	cmp	r3, r2
   bb2aa:	d100      	bne.n	bb2ae <memset+0xa>
   bb2ac:	4770      	bx	lr
   bb2ae:	f803 1b01 	strb.w	r1, [r3], #1
   bb2b2:	e7f9      	b.n	bb2a8 <memset+0x4>

000bb2b4 <srand>:
   bb2b4:	b538      	push	{r3, r4, r5, lr}
   bb2b6:	4b10      	ldr	r3, [pc, #64]	; (bb2f8 <srand+0x44>)
   bb2b8:	681d      	ldr	r5, [r3, #0]
   bb2ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb2bc:	4604      	mov	r4, r0
   bb2be:	b9b3      	cbnz	r3, bb2ee <srand+0x3a>
   bb2c0:	2018      	movs	r0, #24
   bb2c2:	f7fc fce9 	bl	b7c98 <malloc>
   bb2c6:	4602      	mov	r2, r0
   bb2c8:	63a8      	str	r0, [r5, #56]	; 0x38
   bb2ca:	b920      	cbnz	r0, bb2d6 <srand+0x22>
   bb2cc:	4b0b      	ldr	r3, [pc, #44]	; (bb2fc <srand+0x48>)
   bb2ce:	480c      	ldr	r0, [pc, #48]	; (bb300 <srand+0x4c>)
   bb2d0:	2142      	movs	r1, #66	; 0x42
   bb2d2:	f7fc fd21 	bl	b7d18 <__assert_func>
   bb2d6:	490b      	ldr	r1, [pc, #44]	; (bb304 <srand+0x50>)
   bb2d8:	4b0b      	ldr	r3, [pc, #44]	; (bb308 <srand+0x54>)
   bb2da:	e9c0 1300 	strd	r1, r3, [r0]
   bb2de:	4b0b      	ldr	r3, [pc, #44]	; (bb30c <srand+0x58>)
   bb2e0:	6083      	str	r3, [r0, #8]
   bb2e2:	230b      	movs	r3, #11
   bb2e4:	8183      	strh	r3, [r0, #12]
   bb2e6:	2100      	movs	r1, #0
   bb2e8:	2001      	movs	r0, #1
   bb2ea:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bb2ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb2f0:	2200      	movs	r2, #0
   bb2f2:	611c      	str	r4, [r3, #16]
   bb2f4:	615a      	str	r2, [r3, #20]
   bb2f6:	bd38      	pop	{r3, r4, r5, pc}
   bb2f8:	20035300 	.word	0x20035300
   bb2fc:	000bdce5 	.word	0x000bdce5
   bb300:	000bdcfc 	.word	0x000bdcfc
   bb304:	abcd330e 	.word	0xabcd330e
   bb308:	e66d1234 	.word	0xe66d1234
   bb30c:	0005deec 	.word	0x0005deec

000bb310 <strcmp>:
   bb310:	f810 2b01 	ldrb.w	r2, [r0], #1
   bb314:	f811 3b01 	ldrb.w	r3, [r1], #1
   bb318:	2a01      	cmp	r2, #1
   bb31a:	bf28      	it	cs
   bb31c:	429a      	cmpcs	r2, r3
   bb31e:	d0f7      	beq.n	bb310 <strcmp>
   bb320:	1ad0      	subs	r0, r2, r3
   bb322:	4770      	bx	lr

000bb324 <strcpy>:
   bb324:	4603      	mov	r3, r0
   bb326:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb32a:	f803 2b01 	strb.w	r2, [r3], #1
   bb32e:	2a00      	cmp	r2, #0
   bb330:	d1f9      	bne.n	bb326 <strcpy+0x2>
   bb332:	4770      	bx	lr

000bb334 <strlen>:
   bb334:	4603      	mov	r3, r0
   bb336:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb33a:	2a00      	cmp	r2, #0
   bb33c:	d1fb      	bne.n	bb336 <strlen+0x2>
   bb33e:	1a18      	subs	r0, r3, r0
   bb340:	3801      	subs	r0, #1
   bb342:	4770      	bx	lr

000bb344 <strncmp>:
   bb344:	b510      	push	{r4, lr}
   bb346:	b17a      	cbz	r2, bb368 <strncmp+0x24>
   bb348:	4603      	mov	r3, r0
   bb34a:	3901      	subs	r1, #1
   bb34c:	1884      	adds	r4, r0, r2
   bb34e:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb352:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bb356:	4290      	cmp	r0, r2
   bb358:	d101      	bne.n	bb35e <strncmp+0x1a>
   bb35a:	42a3      	cmp	r3, r4
   bb35c:	d101      	bne.n	bb362 <strncmp+0x1e>
   bb35e:	1a80      	subs	r0, r0, r2
   bb360:	bd10      	pop	{r4, pc}
   bb362:	2800      	cmp	r0, #0
   bb364:	d1f3      	bne.n	bb34e <strncmp+0xa>
   bb366:	e7fa      	b.n	bb35e <strncmp+0x1a>
   bb368:	4610      	mov	r0, r2
   bb36a:	e7f9      	b.n	bb360 <strncmp+0x1c>

000bb36c <strnlen>:
   bb36c:	b510      	push	{r4, lr}
   bb36e:	4602      	mov	r2, r0
   bb370:	4401      	add	r1, r0
   bb372:	428a      	cmp	r2, r1
   bb374:	4613      	mov	r3, r2
   bb376:	d003      	beq.n	bb380 <strnlen+0x14>
   bb378:	781c      	ldrb	r4, [r3, #0]
   bb37a:	3201      	adds	r2, #1
   bb37c:	2c00      	cmp	r4, #0
   bb37e:	d1f8      	bne.n	bb372 <strnlen+0x6>
   bb380:	1a18      	subs	r0, r3, r0
   bb382:	bd10      	pop	{r4, pc}

000bb384 <strstr>:
   bb384:	780a      	ldrb	r2, [r1, #0]
   bb386:	b570      	push	{r4, r5, r6, lr}
   bb388:	b96a      	cbnz	r2, bb3a6 <strstr+0x22>
   bb38a:	bd70      	pop	{r4, r5, r6, pc}
   bb38c:	429a      	cmp	r2, r3
   bb38e:	d109      	bne.n	bb3a4 <strstr+0x20>
   bb390:	460c      	mov	r4, r1
   bb392:	4605      	mov	r5, r0
   bb394:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bb398:	2b00      	cmp	r3, #0
   bb39a:	d0f6      	beq.n	bb38a <strstr+0x6>
   bb39c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bb3a0:	429e      	cmp	r6, r3
   bb3a2:	d0f7      	beq.n	bb394 <strstr+0x10>
   bb3a4:	3001      	adds	r0, #1
   bb3a6:	7803      	ldrb	r3, [r0, #0]
   bb3a8:	2b00      	cmp	r3, #0
   bb3aa:	d1ef      	bne.n	bb38c <strstr+0x8>
   bb3ac:	4618      	mov	r0, r3
   bb3ae:	e7ec      	b.n	bb38a <strstr+0x6>

000bb3b0 <sulp>:
   bb3b0:	b570      	push	{r4, r5, r6, lr}
   bb3b2:	4604      	mov	r4, r0
   bb3b4:	460d      	mov	r5, r1
   bb3b6:	ec45 4b10 	vmov	d0, r4, r5
   bb3ba:	4616      	mov	r6, r2
   bb3bc:	f001 fe5c 	bl	bd078 <__ulp>
   bb3c0:	ec51 0b10 	vmov	r0, r1, d0
   bb3c4:	b17e      	cbz	r6, bb3e6 <sulp+0x36>
   bb3c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bb3ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bb3ce:	2b00      	cmp	r3, #0
   bb3d0:	dd09      	ble.n	bb3e6 <sulp+0x36>
   bb3d2:	051b      	lsls	r3, r3, #20
   bb3d4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bb3d8:	2400      	movs	r4, #0
   bb3da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bb3de:	4622      	mov	r2, r4
   bb3e0:	462b      	mov	r3, r5
   bb3e2:	f7ff fbdf 	bl	baba4 <__aeabi_dmul>
   bb3e6:	bd70      	pop	{r4, r5, r6, pc}

000bb3e8 <_strtod_l>:
   bb3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb3ec:	ed2d 8b02 	vpush	{d8}
   bb3f0:	b09d      	sub	sp, #116	; 0x74
   bb3f2:	461f      	mov	r7, r3
   bb3f4:	2300      	movs	r3, #0
   bb3f6:	9318      	str	r3, [sp, #96]	; 0x60
   bb3f8:	4ba2      	ldr	r3, [pc, #648]	; (bb684 <_strtod_l+0x29c>)
   bb3fa:	9213      	str	r2, [sp, #76]	; 0x4c
   bb3fc:	681b      	ldr	r3, [r3, #0]
   bb3fe:	9305      	str	r3, [sp, #20]
   bb400:	4604      	mov	r4, r0
   bb402:	4618      	mov	r0, r3
   bb404:	4688      	mov	r8, r1
   bb406:	f7ff ff95 	bl	bb334 <strlen>
   bb40a:	f04f 0a00 	mov.w	sl, #0
   bb40e:	4605      	mov	r5, r0
   bb410:	f04f 0b00 	mov.w	fp, #0
   bb414:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb418:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb41a:	781a      	ldrb	r2, [r3, #0]
   bb41c:	2a2b      	cmp	r2, #43	; 0x2b
   bb41e:	d04e      	beq.n	bb4be <_strtod_l+0xd6>
   bb420:	d83b      	bhi.n	bb49a <_strtod_l+0xb2>
   bb422:	2a0d      	cmp	r2, #13
   bb424:	d834      	bhi.n	bb490 <_strtod_l+0xa8>
   bb426:	2a08      	cmp	r2, #8
   bb428:	d834      	bhi.n	bb494 <_strtod_l+0xac>
   bb42a:	2a00      	cmp	r2, #0
   bb42c:	d03e      	beq.n	bb4ac <_strtod_l+0xc4>
   bb42e:	2300      	movs	r3, #0
   bb430:	930a      	str	r3, [sp, #40]	; 0x28
   bb432:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bb434:	7833      	ldrb	r3, [r6, #0]
   bb436:	2b30      	cmp	r3, #48	; 0x30
   bb438:	f040 80b0 	bne.w	bb59c <_strtod_l+0x1b4>
   bb43c:	7873      	ldrb	r3, [r6, #1]
   bb43e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb442:	2b58      	cmp	r3, #88	; 0x58
   bb444:	d168      	bne.n	bb518 <_strtod_l+0x130>
   bb446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb448:	9301      	str	r3, [sp, #4]
   bb44a:	ab18      	add	r3, sp, #96	; 0x60
   bb44c:	9702      	str	r7, [sp, #8]
   bb44e:	9300      	str	r3, [sp, #0]
   bb450:	4a8d      	ldr	r2, [pc, #564]	; (bb688 <_strtod_l+0x2a0>)
   bb452:	ab19      	add	r3, sp, #100	; 0x64
   bb454:	a917      	add	r1, sp, #92	; 0x5c
   bb456:	4620      	mov	r0, r4
   bb458:	f000 ff7e 	bl	bc358 <__gethex>
   bb45c:	f010 0707 	ands.w	r7, r0, #7
   bb460:	4605      	mov	r5, r0
   bb462:	d005      	beq.n	bb470 <_strtod_l+0x88>
   bb464:	2f06      	cmp	r7, #6
   bb466:	d12c      	bne.n	bb4c2 <_strtod_l+0xda>
   bb468:	3601      	adds	r6, #1
   bb46a:	2300      	movs	r3, #0
   bb46c:	9617      	str	r6, [sp, #92]	; 0x5c
   bb46e:	930a      	str	r3, [sp, #40]	; 0x28
   bb470:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb472:	2b00      	cmp	r3, #0
   bb474:	f040 8590 	bne.w	bbf98 <_strtod_l+0xbb0>
   bb478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb47a:	b1eb      	cbz	r3, bb4b8 <_strtod_l+0xd0>
   bb47c:	4652      	mov	r2, sl
   bb47e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bb482:	ec43 2b10 	vmov	d0, r2, r3
   bb486:	b01d      	add	sp, #116	; 0x74
   bb488:	ecbd 8b02 	vpop	{d8}
   bb48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb490:	2a20      	cmp	r2, #32
   bb492:	d1cc      	bne.n	bb42e <_strtod_l+0x46>
   bb494:	3301      	adds	r3, #1
   bb496:	9317      	str	r3, [sp, #92]	; 0x5c
   bb498:	e7be      	b.n	bb418 <_strtod_l+0x30>
   bb49a:	2a2d      	cmp	r2, #45	; 0x2d
   bb49c:	d1c7      	bne.n	bb42e <_strtod_l+0x46>
   bb49e:	2201      	movs	r2, #1
   bb4a0:	920a      	str	r2, [sp, #40]	; 0x28
   bb4a2:	1c5a      	adds	r2, r3, #1
   bb4a4:	9217      	str	r2, [sp, #92]	; 0x5c
   bb4a6:	785b      	ldrb	r3, [r3, #1]
   bb4a8:	2b00      	cmp	r3, #0
   bb4aa:	d1c2      	bne.n	bb432 <_strtod_l+0x4a>
   bb4ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb4ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb4b2:	2b00      	cmp	r3, #0
   bb4b4:	f040 856e 	bne.w	bbf94 <_strtod_l+0xbac>
   bb4b8:	4652      	mov	r2, sl
   bb4ba:	465b      	mov	r3, fp
   bb4bc:	e7e1      	b.n	bb482 <_strtod_l+0x9a>
   bb4be:	2200      	movs	r2, #0
   bb4c0:	e7ee      	b.n	bb4a0 <_strtod_l+0xb8>
   bb4c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb4c4:	b13a      	cbz	r2, bb4d6 <_strtod_l+0xee>
   bb4c6:	2135      	movs	r1, #53	; 0x35
   bb4c8:	a81a      	add	r0, sp, #104	; 0x68
   bb4ca:	f001 fee0 	bl	bd28e <__copybits>
   bb4ce:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb4d0:	4620      	mov	r0, r4
   bb4d2:	f001 fa9f 	bl	bca14 <_Bfree>
   bb4d6:	3f01      	subs	r7, #1
   bb4d8:	2f04      	cmp	r7, #4
   bb4da:	d806      	bhi.n	bb4ea <_strtod_l+0x102>
   bb4dc:	e8df f007 	tbb	[pc, r7]
   bb4e0:	1714030a 	.word	0x1714030a
   bb4e4:	0a          	.byte	0x0a
   bb4e5:	00          	.byte	0x00
   bb4e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bb4ea:	0728      	lsls	r0, r5, #28
   bb4ec:	d5c0      	bpl.n	bb470 <_strtod_l+0x88>
   bb4ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bb4f2:	e7bd      	b.n	bb470 <_strtod_l+0x88>
   bb4f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bb4f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bb4fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bb4fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bb502:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bb506:	e7f0      	b.n	bb4ea <_strtod_l+0x102>
   bb508:	f8df b180 	ldr.w	fp, [pc, #384]	; bb68c <_strtod_l+0x2a4>
   bb50c:	e7ed      	b.n	bb4ea <_strtod_l+0x102>
   bb50e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bb512:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bb516:	e7e8      	b.n	bb4ea <_strtod_l+0x102>
   bb518:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb51a:	1c5a      	adds	r2, r3, #1
   bb51c:	9217      	str	r2, [sp, #92]	; 0x5c
   bb51e:	785b      	ldrb	r3, [r3, #1]
   bb520:	2b30      	cmp	r3, #48	; 0x30
   bb522:	d0f9      	beq.n	bb518 <_strtod_l+0x130>
   bb524:	2b00      	cmp	r3, #0
   bb526:	d0a3      	beq.n	bb470 <_strtod_l+0x88>
   bb528:	2301      	movs	r3, #1
   bb52a:	f04f 0900 	mov.w	r9, #0
   bb52e:	9304      	str	r3, [sp, #16]
   bb530:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb532:	9308      	str	r3, [sp, #32]
   bb534:	f8cd 901c 	str.w	r9, [sp, #28]
   bb538:	464f      	mov	r7, r9
   bb53a:	220a      	movs	r2, #10
   bb53c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bb53e:	7806      	ldrb	r6, [r0, #0]
   bb540:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bb544:	b2d9      	uxtb	r1, r3
   bb546:	2909      	cmp	r1, #9
   bb548:	d92a      	bls.n	bb5a0 <_strtod_l+0x1b8>
   bb54a:	9905      	ldr	r1, [sp, #20]
   bb54c:	462a      	mov	r2, r5
   bb54e:	f7ff fef9 	bl	bb344 <strncmp>
   bb552:	b398      	cbz	r0, bb5bc <_strtod_l+0x1d4>
   bb554:	2000      	movs	r0, #0
   bb556:	4632      	mov	r2, r6
   bb558:	463d      	mov	r5, r7
   bb55a:	9005      	str	r0, [sp, #20]
   bb55c:	4603      	mov	r3, r0
   bb55e:	2a65      	cmp	r2, #101	; 0x65
   bb560:	d001      	beq.n	bb566 <_strtod_l+0x17e>
   bb562:	2a45      	cmp	r2, #69	; 0x45
   bb564:	d118      	bne.n	bb598 <_strtod_l+0x1b0>
   bb566:	b91d      	cbnz	r5, bb570 <_strtod_l+0x188>
   bb568:	9a04      	ldr	r2, [sp, #16]
   bb56a:	4302      	orrs	r2, r0
   bb56c:	d09e      	beq.n	bb4ac <_strtod_l+0xc4>
   bb56e:	2500      	movs	r5, #0
   bb570:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bb574:	f108 0201 	add.w	r2, r8, #1
   bb578:	9217      	str	r2, [sp, #92]	; 0x5c
   bb57a:	f898 2001 	ldrb.w	r2, [r8, #1]
   bb57e:	2a2b      	cmp	r2, #43	; 0x2b
   bb580:	d075      	beq.n	bb66e <_strtod_l+0x286>
   bb582:	2a2d      	cmp	r2, #45	; 0x2d
   bb584:	d07b      	beq.n	bb67e <_strtod_l+0x296>
   bb586:	f04f 0c00 	mov.w	ip, #0
   bb58a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bb58e:	2909      	cmp	r1, #9
   bb590:	f240 8082 	bls.w	bb698 <_strtod_l+0x2b0>
   bb594:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb598:	2600      	movs	r6, #0
   bb59a:	e09d      	b.n	bb6d8 <_strtod_l+0x2f0>
   bb59c:	2300      	movs	r3, #0
   bb59e:	e7c4      	b.n	bb52a <_strtod_l+0x142>
   bb5a0:	2f08      	cmp	r7, #8
   bb5a2:	bfd8      	it	le
   bb5a4:	9907      	ldrle	r1, [sp, #28]
   bb5a6:	f100 0001 	add.w	r0, r0, #1
   bb5aa:	bfda      	itte	le
   bb5ac:	fb02 3301 	mlale	r3, r2, r1, r3
   bb5b0:	9307      	strle	r3, [sp, #28]
   bb5b2:	fb02 3909 	mlagt	r9, r2, r9, r3
   bb5b6:	3701      	adds	r7, #1
   bb5b8:	9017      	str	r0, [sp, #92]	; 0x5c
   bb5ba:	e7bf      	b.n	bb53c <_strtod_l+0x154>
   bb5bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb5be:	195a      	adds	r2, r3, r5
   bb5c0:	9217      	str	r2, [sp, #92]	; 0x5c
   bb5c2:	5d5a      	ldrb	r2, [r3, r5]
   bb5c4:	2f00      	cmp	r7, #0
   bb5c6:	d037      	beq.n	bb638 <_strtod_l+0x250>
   bb5c8:	9005      	str	r0, [sp, #20]
   bb5ca:	463d      	mov	r5, r7
   bb5cc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bb5d0:	2b09      	cmp	r3, #9
   bb5d2:	d912      	bls.n	bb5fa <_strtod_l+0x212>
   bb5d4:	2301      	movs	r3, #1
   bb5d6:	e7c2      	b.n	bb55e <_strtod_l+0x176>
   bb5d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb5da:	1c5a      	adds	r2, r3, #1
   bb5dc:	9217      	str	r2, [sp, #92]	; 0x5c
   bb5de:	785a      	ldrb	r2, [r3, #1]
   bb5e0:	3001      	adds	r0, #1
   bb5e2:	2a30      	cmp	r2, #48	; 0x30
   bb5e4:	d0f8      	beq.n	bb5d8 <_strtod_l+0x1f0>
   bb5e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bb5ea:	2b08      	cmp	r3, #8
   bb5ec:	f200 84d9 	bhi.w	bbfa2 <_strtod_l+0xbba>
   bb5f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb5f2:	9005      	str	r0, [sp, #20]
   bb5f4:	2000      	movs	r0, #0
   bb5f6:	9308      	str	r3, [sp, #32]
   bb5f8:	4605      	mov	r5, r0
   bb5fa:	3a30      	subs	r2, #48	; 0x30
   bb5fc:	f100 0301 	add.w	r3, r0, #1
   bb600:	d014      	beq.n	bb62c <_strtod_l+0x244>
   bb602:	9905      	ldr	r1, [sp, #20]
   bb604:	4419      	add	r1, r3
   bb606:	9105      	str	r1, [sp, #20]
   bb608:	462b      	mov	r3, r5
   bb60a:	eb00 0e05 	add.w	lr, r0, r5
   bb60e:	210a      	movs	r1, #10
   bb610:	4573      	cmp	r3, lr
   bb612:	d113      	bne.n	bb63c <_strtod_l+0x254>
   bb614:	182b      	adds	r3, r5, r0
   bb616:	2b08      	cmp	r3, #8
   bb618:	f105 0501 	add.w	r5, r5, #1
   bb61c:	4405      	add	r5, r0
   bb61e:	dc1c      	bgt.n	bb65a <_strtod_l+0x272>
   bb620:	9907      	ldr	r1, [sp, #28]
   bb622:	230a      	movs	r3, #10
   bb624:	fb03 2301 	mla	r3, r3, r1, r2
   bb628:	9307      	str	r3, [sp, #28]
   bb62a:	2300      	movs	r3, #0
   bb62c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb62e:	1c51      	adds	r1, r2, #1
   bb630:	9117      	str	r1, [sp, #92]	; 0x5c
   bb632:	7852      	ldrb	r2, [r2, #1]
   bb634:	4618      	mov	r0, r3
   bb636:	e7c9      	b.n	bb5cc <_strtod_l+0x1e4>
   bb638:	4638      	mov	r0, r7
   bb63a:	e7d2      	b.n	bb5e2 <_strtod_l+0x1fa>
   bb63c:	2b08      	cmp	r3, #8
   bb63e:	dc04      	bgt.n	bb64a <_strtod_l+0x262>
   bb640:	9e07      	ldr	r6, [sp, #28]
   bb642:	434e      	muls	r6, r1
   bb644:	9607      	str	r6, [sp, #28]
   bb646:	3301      	adds	r3, #1
   bb648:	e7e2      	b.n	bb610 <_strtod_l+0x228>
   bb64a:	f103 0c01 	add.w	ip, r3, #1
   bb64e:	f1bc 0f10 	cmp.w	ip, #16
   bb652:	bfd8      	it	le
   bb654:	fb01 f909 	mulle.w	r9, r1, r9
   bb658:	e7f5      	b.n	bb646 <_strtod_l+0x25e>
   bb65a:	2d10      	cmp	r5, #16
   bb65c:	bfdc      	itt	le
   bb65e:	230a      	movle	r3, #10
   bb660:	fb03 2909 	mlale	r9, r3, r9, r2
   bb664:	e7e1      	b.n	bb62a <_strtod_l+0x242>
   bb666:	2300      	movs	r3, #0
   bb668:	9305      	str	r3, [sp, #20]
   bb66a:	2301      	movs	r3, #1
   bb66c:	e77c      	b.n	bb568 <_strtod_l+0x180>
   bb66e:	f04f 0c00 	mov.w	ip, #0
   bb672:	f108 0202 	add.w	r2, r8, #2
   bb676:	9217      	str	r2, [sp, #92]	; 0x5c
   bb678:	f898 2002 	ldrb.w	r2, [r8, #2]
   bb67c:	e785      	b.n	bb58a <_strtod_l+0x1a2>
   bb67e:	f04f 0c01 	mov.w	ip, #1
   bb682:	e7f6      	b.n	bb672 <_strtod_l+0x28a>
   bb684:	000bdf2c 	.word	0x000bdf2c
   bb688:	000bdd64 	.word	0x000bdd64
   bb68c:	7ff00000 	.word	0x7ff00000
   bb690:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb692:	1c51      	adds	r1, r2, #1
   bb694:	9117      	str	r1, [sp, #92]	; 0x5c
   bb696:	7852      	ldrb	r2, [r2, #1]
   bb698:	2a30      	cmp	r2, #48	; 0x30
   bb69a:	d0f9      	beq.n	bb690 <_strtod_l+0x2a8>
   bb69c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bb6a0:	2908      	cmp	r1, #8
   bb6a2:	f63f af79 	bhi.w	bb598 <_strtod_l+0x1b0>
   bb6a6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bb6aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb6ac:	9206      	str	r2, [sp, #24]
   bb6ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb6b0:	1c51      	adds	r1, r2, #1
   bb6b2:	9117      	str	r1, [sp, #92]	; 0x5c
   bb6b4:	7852      	ldrb	r2, [r2, #1]
   bb6b6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bb6ba:	2e09      	cmp	r6, #9
   bb6bc:	d937      	bls.n	bb72e <_strtod_l+0x346>
   bb6be:	9e06      	ldr	r6, [sp, #24]
   bb6c0:	1b89      	subs	r1, r1, r6
   bb6c2:	2908      	cmp	r1, #8
   bb6c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bb6c8:	dc02      	bgt.n	bb6d0 <_strtod_l+0x2e8>
   bb6ca:	4576      	cmp	r6, lr
   bb6cc:	bfa8      	it	ge
   bb6ce:	4676      	movge	r6, lr
   bb6d0:	f1bc 0f00 	cmp.w	ip, #0
   bb6d4:	d000      	beq.n	bb6d8 <_strtod_l+0x2f0>
   bb6d6:	4276      	negs	r6, r6
   bb6d8:	2d00      	cmp	r5, #0
   bb6da:	d14d      	bne.n	bb778 <_strtod_l+0x390>
   bb6dc:	9904      	ldr	r1, [sp, #16]
   bb6de:	4301      	orrs	r1, r0
   bb6e0:	f47f aec6 	bne.w	bb470 <_strtod_l+0x88>
   bb6e4:	2b00      	cmp	r3, #0
   bb6e6:	f47f aee1 	bne.w	bb4ac <_strtod_l+0xc4>
   bb6ea:	2a69      	cmp	r2, #105	; 0x69
   bb6ec:	d027      	beq.n	bb73e <_strtod_l+0x356>
   bb6ee:	dc24      	bgt.n	bb73a <_strtod_l+0x352>
   bb6f0:	2a49      	cmp	r2, #73	; 0x49
   bb6f2:	d024      	beq.n	bb73e <_strtod_l+0x356>
   bb6f4:	2a4e      	cmp	r2, #78	; 0x4e
   bb6f6:	f47f aed9 	bne.w	bb4ac <_strtod_l+0xc4>
   bb6fa:	499f      	ldr	r1, [pc, #636]	; (bb978 <_strtod_l+0x590>)
   bb6fc:	a817      	add	r0, sp, #92	; 0x5c
   bb6fe:	f001 f883 	bl	bc808 <__match>
   bb702:	2800      	cmp	r0, #0
   bb704:	f43f aed2 	beq.w	bb4ac <_strtod_l+0xc4>
   bb708:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb70a:	781b      	ldrb	r3, [r3, #0]
   bb70c:	2b28      	cmp	r3, #40	; 0x28
   bb70e:	d12d      	bne.n	bb76c <_strtod_l+0x384>
   bb710:	499a      	ldr	r1, [pc, #616]	; (bb97c <_strtod_l+0x594>)
   bb712:	aa1a      	add	r2, sp, #104	; 0x68
   bb714:	a817      	add	r0, sp, #92	; 0x5c
   bb716:	f001 f88b 	bl	bc830 <__hexnan>
   bb71a:	2805      	cmp	r0, #5
   bb71c:	d126      	bne.n	bb76c <_strtod_l+0x384>
   bb71e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bb720:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bb724:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bb728:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bb72c:	e6a0      	b.n	bb470 <_strtod_l+0x88>
   bb72e:	210a      	movs	r1, #10
   bb730:	fb01 2e0e 	mla	lr, r1, lr, r2
   bb734:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bb738:	e7b9      	b.n	bb6ae <_strtod_l+0x2c6>
   bb73a:	2a6e      	cmp	r2, #110	; 0x6e
   bb73c:	e7db      	b.n	bb6f6 <_strtod_l+0x30e>
   bb73e:	4990      	ldr	r1, [pc, #576]	; (bb980 <_strtod_l+0x598>)
   bb740:	a817      	add	r0, sp, #92	; 0x5c
   bb742:	f001 f861 	bl	bc808 <__match>
   bb746:	2800      	cmp	r0, #0
   bb748:	f43f aeb0 	beq.w	bb4ac <_strtod_l+0xc4>
   bb74c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb74e:	498d      	ldr	r1, [pc, #564]	; (bb984 <_strtod_l+0x59c>)
   bb750:	3b01      	subs	r3, #1
   bb752:	a817      	add	r0, sp, #92	; 0x5c
   bb754:	9317      	str	r3, [sp, #92]	; 0x5c
   bb756:	f001 f857 	bl	bc808 <__match>
   bb75a:	b910      	cbnz	r0, bb762 <_strtod_l+0x37a>
   bb75c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb75e:	3301      	adds	r3, #1
   bb760:	9317      	str	r3, [sp, #92]	; 0x5c
   bb762:	f8df b230 	ldr.w	fp, [pc, #560]	; bb994 <_strtod_l+0x5ac>
   bb766:	f04f 0a00 	mov.w	sl, #0
   bb76a:	e681      	b.n	bb470 <_strtod_l+0x88>
   bb76c:	4886      	ldr	r0, [pc, #536]	; (bb988 <_strtod_l+0x5a0>)
   bb76e:	f001 fde3 	bl	bd338 <nan>
   bb772:	ec5b ab10 	vmov	sl, fp, d0
   bb776:	e67b      	b.n	bb470 <_strtod_l+0x88>
   bb778:	9b05      	ldr	r3, [sp, #20]
   bb77a:	9807      	ldr	r0, [sp, #28]
   bb77c:	1af3      	subs	r3, r6, r3
   bb77e:	2f00      	cmp	r7, #0
   bb780:	bf08      	it	eq
   bb782:	462f      	moveq	r7, r5
   bb784:	2d10      	cmp	r5, #16
   bb786:	9306      	str	r3, [sp, #24]
   bb788:	46a8      	mov	r8, r5
   bb78a:	bfa8      	it	ge
   bb78c:	f04f 0810 	movge.w	r8, #16
   bb790:	f7ff f98e 	bl	baab0 <__aeabi_ui2d>
   bb794:	2d09      	cmp	r5, #9
   bb796:	4682      	mov	sl, r0
   bb798:	468b      	mov	fp, r1
   bb79a:	dd13      	ble.n	bb7c4 <_strtod_l+0x3dc>
   bb79c:	4b7b      	ldr	r3, [pc, #492]	; (bb98c <_strtod_l+0x5a4>)
   bb79e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bb7a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bb7a6:	f7ff f9fd 	bl	baba4 <__aeabi_dmul>
   bb7aa:	4682      	mov	sl, r0
   bb7ac:	4648      	mov	r0, r9
   bb7ae:	468b      	mov	fp, r1
   bb7b0:	f7ff f97e 	bl	baab0 <__aeabi_ui2d>
   bb7b4:	4602      	mov	r2, r0
   bb7b6:	460b      	mov	r3, r1
   bb7b8:	4650      	mov	r0, sl
   bb7ba:	4659      	mov	r1, fp
   bb7bc:	f7ff f83c 	bl	ba838 <__adddf3>
   bb7c0:	4682      	mov	sl, r0
   bb7c2:	468b      	mov	fp, r1
   bb7c4:	2d0f      	cmp	r5, #15
   bb7c6:	dc38      	bgt.n	bb83a <_strtod_l+0x452>
   bb7c8:	9b06      	ldr	r3, [sp, #24]
   bb7ca:	2b00      	cmp	r3, #0
   bb7cc:	f43f ae50 	beq.w	bb470 <_strtod_l+0x88>
   bb7d0:	dd24      	ble.n	bb81c <_strtod_l+0x434>
   bb7d2:	2b16      	cmp	r3, #22
   bb7d4:	dc0b      	bgt.n	bb7ee <_strtod_l+0x406>
   bb7d6:	496d      	ldr	r1, [pc, #436]	; (bb98c <_strtod_l+0x5a4>)
   bb7d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb7dc:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb7e0:	4652      	mov	r2, sl
   bb7e2:	465b      	mov	r3, fp
   bb7e4:	f7ff f9de 	bl	baba4 <__aeabi_dmul>
   bb7e8:	4682      	mov	sl, r0
   bb7ea:	468b      	mov	fp, r1
   bb7ec:	e640      	b.n	bb470 <_strtod_l+0x88>
   bb7ee:	9a06      	ldr	r2, [sp, #24]
   bb7f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bb7f4:	4293      	cmp	r3, r2
   bb7f6:	db20      	blt.n	bb83a <_strtod_l+0x452>
   bb7f8:	4c64      	ldr	r4, [pc, #400]	; (bb98c <_strtod_l+0x5a4>)
   bb7fa:	f1c5 050f 	rsb	r5, r5, #15
   bb7fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bb802:	4652      	mov	r2, sl
   bb804:	465b      	mov	r3, fp
   bb806:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb80a:	f7ff f9cb 	bl	baba4 <__aeabi_dmul>
   bb80e:	9b06      	ldr	r3, [sp, #24]
   bb810:	1b5d      	subs	r5, r3, r5
   bb812:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bb816:	e9d4 2300 	ldrd	r2, r3, [r4]
   bb81a:	e7e3      	b.n	bb7e4 <_strtod_l+0x3fc>
   bb81c:	9b06      	ldr	r3, [sp, #24]
   bb81e:	3316      	adds	r3, #22
   bb820:	db0b      	blt.n	bb83a <_strtod_l+0x452>
   bb822:	9b05      	ldr	r3, [sp, #20]
   bb824:	1b9e      	subs	r6, r3, r6
   bb826:	4b59      	ldr	r3, [pc, #356]	; (bb98c <_strtod_l+0x5a4>)
   bb828:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bb82c:	e9d6 2300 	ldrd	r2, r3, [r6]
   bb830:	4650      	mov	r0, sl
   bb832:	4659      	mov	r1, fp
   bb834:	f7ff fae0 	bl	badf8 <__aeabi_ddiv>
   bb838:	e7d6      	b.n	bb7e8 <_strtod_l+0x400>
   bb83a:	9b06      	ldr	r3, [sp, #24]
   bb83c:	eba5 0808 	sub.w	r8, r5, r8
   bb840:	4498      	add	r8, r3
   bb842:	f1b8 0f00 	cmp.w	r8, #0
   bb846:	dd74      	ble.n	bb932 <_strtod_l+0x54a>
   bb848:	f018 030f 	ands.w	r3, r8, #15
   bb84c:	d00a      	beq.n	bb864 <_strtod_l+0x47c>
   bb84e:	494f      	ldr	r1, [pc, #316]	; (bb98c <_strtod_l+0x5a4>)
   bb850:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb854:	4652      	mov	r2, sl
   bb856:	465b      	mov	r3, fp
   bb858:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb85c:	f7ff f9a2 	bl	baba4 <__aeabi_dmul>
   bb860:	4682      	mov	sl, r0
   bb862:	468b      	mov	fp, r1
   bb864:	f038 080f 	bics.w	r8, r8, #15
   bb868:	d04f      	beq.n	bb90a <_strtod_l+0x522>
   bb86a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bb86e:	dd22      	ble.n	bb8b6 <_strtod_l+0x4ce>
   bb870:	2500      	movs	r5, #0
   bb872:	462e      	mov	r6, r5
   bb874:	9507      	str	r5, [sp, #28]
   bb876:	9505      	str	r5, [sp, #20]
   bb878:	2322      	movs	r3, #34	; 0x22
   bb87a:	f8df b118 	ldr.w	fp, [pc, #280]	; bb994 <_strtod_l+0x5ac>
   bb87e:	6023      	str	r3, [r4, #0]
   bb880:	f04f 0a00 	mov.w	sl, #0
   bb884:	9b07      	ldr	r3, [sp, #28]
   bb886:	2b00      	cmp	r3, #0
   bb888:	f43f adf2 	beq.w	bb470 <_strtod_l+0x88>
   bb88c:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb88e:	4620      	mov	r0, r4
   bb890:	f001 f8c0 	bl	bca14 <_Bfree>
   bb894:	9905      	ldr	r1, [sp, #20]
   bb896:	4620      	mov	r0, r4
   bb898:	f001 f8bc 	bl	bca14 <_Bfree>
   bb89c:	4631      	mov	r1, r6
   bb89e:	4620      	mov	r0, r4
   bb8a0:	f001 f8b8 	bl	bca14 <_Bfree>
   bb8a4:	9907      	ldr	r1, [sp, #28]
   bb8a6:	4620      	mov	r0, r4
   bb8a8:	f001 f8b4 	bl	bca14 <_Bfree>
   bb8ac:	4629      	mov	r1, r5
   bb8ae:	4620      	mov	r0, r4
   bb8b0:	f001 f8b0 	bl	bca14 <_Bfree>
   bb8b4:	e5dc      	b.n	bb470 <_strtod_l+0x88>
   bb8b6:	4b36      	ldr	r3, [pc, #216]	; (bb990 <_strtod_l+0x5a8>)
   bb8b8:	9304      	str	r3, [sp, #16]
   bb8ba:	2300      	movs	r3, #0
   bb8bc:	ea4f 1828 	mov.w	r8, r8, asr #4
   bb8c0:	4650      	mov	r0, sl
   bb8c2:	4659      	mov	r1, fp
   bb8c4:	4699      	mov	r9, r3
   bb8c6:	f1b8 0f01 	cmp.w	r8, #1
   bb8ca:	dc21      	bgt.n	bb910 <_strtod_l+0x528>
   bb8cc:	b10b      	cbz	r3, bb8d2 <_strtod_l+0x4ea>
   bb8ce:	4682      	mov	sl, r0
   bb8d0:	468b      	mov	fp, r1
   bb8d2:	4b2f      	ldr	r3, [pc, #188]	; (bb990 <_strtod_l+0x5a8>)
   bb8d4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bb8d8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bb8dc:	4652      	mov	r2, sl
   bb8de:	465b      	mov	r3, fp
   bb8e0:	e9d9 0100 	ldrd	r0, r1, [r9]
   bb8e4:	f7ff f95e 	bl	baba4 <__aeabi_dmul>
   bb8e8:	4b2a      	ldr	r3, [pc, #168]	; (bb994 <_strtod_l+0x5ac>)
   bb8ea:	460a      	mov	r2, r1
   bb8ec:	400b      	ands	r3, r1
   bb8ee:	492a      	ldr	r1, [pc, #168]	; (bb998 <_strtod_l+0x5b0>)
   bb8f0:	428b      	cmp	r3, r1
   bb8f2:	4682      	mov	sl, r0
   bb8f4:	d8bc      	bhi.n	bb870 <_strtod_l+0x488>
   bb8f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bb8fa:	428b      	cmp	r3, r1
   bb8fc:	bf86      	itte	hi
   bb8fe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bb99c <_strtod_l+0x5b4>
   bb902:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bb906:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bb90a:	2300      	movs	r3, #0
   bb90c:	9304      	str	r3, [sp, #16]
   bb90e:	e084      	b.n	bba1a <_strtod_l+0x632>
   bb910:	f018 0f01 	tst.w	r8, #1
   bb914:	d005      	beq.n	bb922 <_strtod_l+0x53a>
   bb916:	9b04      	ldr	r3, [sp, #16]
   bb918:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb91c:	f7ff f942 	bl	baba4 <__aeabi_dmul>
   bb920:	2301      	movs	r3, #1
   bb922:	9a04      	ldr	r2, [sp, #16]
   bb924:	3208      	adds	r2, #8
   bb926:	f109 0901 	add.w	r9, r9, #1
   bb92a:	ea4f 0868 	mov.w	r8, r8, asr #1
   bb92e:	9204      	str	r2, [sp, #16]
   bb930:	e7c9      	b.n	bb8c6 <_strtod_l+0x4de>
   bb932:	d0ea      	beq.n	bb90a <_strtod_l+0x522>
   bb934:	f1c8 0800 	rsb	r8, r8, #0
   bb938:	f018 020f 	ands.w	r2, r8, #15
   bb93c:	d00a      	beq.n	bb954 <_strtod_l+0x56c>
   bb93e:	4b13      	ldr	r3, [pc, #76]	; (bb98c <_strtod_l+0x5a4>)
   bb940:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bb944:	4650      	mov	r0, sl
   bb946:	4659      	mov	r1, fp
   bb948:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb94c:	f7ff fa54 	bl	badf8 <__aeabi_ddiv>
   bb950:	4682      	mov	sl, r0
   bb952:	468b      	mov	fp, r1
   bb954:	ea5f 1828 	movs.w	r8, r8, asr #4
   bb958:	d0d7      	beq.n	bb90a <_strtod_l+0x522>
   bb95a:	f1b8 0f1f 	cmp.w	r8, #31
   bb95e:	dd1f      	ble.n	bb9a0 <_strtod_l+0x5b8>
   bb960:	2500      	movs	r5, #0
   bb962:	462e      	mov	r6, r5
   bb964:	9507      	str	r5, [sp, #28]
   bb966:	9505      	str	r5, [sp, #20]
   bb968:	2322      	movs	r3, #34	; 0x22
   bb96a:	f04f 0a00 	mov.w	sl, #0
   bb96e:	f04f 0b00 	mov.w	fp, #0
   bb972:	6023      	str	r3, [r4, #0]
   bb974:	e786      	b.n	bb884 <_strtod_l+0x49c>
   bb976:	bf00      	nop
   bb978:	000bdd5e 	.word	0x000bdd5e
   bb97c:	000bdd78 	.word	0x000bdd78
   bb980:	000bdd55 	.word	0x000bdd55
   bb984:	000bdd58 	.word	0x000bdd58
   bb988:	000bd7d2 	.word	0x000bd7d2
   bb98c:	000bdfc8 	.word	0x000bdfc8
   bb990:	000bdfa0 	.word	0x000bdfa0
   bb994:	7ff00000 	.word	0x7ff00000
   bb998:	7ca00000 	.word	0x7ca00000
   bb99c:	7fefffff 	.word	0x7fefffff
   bb9a0:	f018 0310 	ands.w	r3, r8, #16
   bb9a4:	bf18      	it	ne
   bb9a6:	236a      	movne	r3, #106	; 0x6a
   bb9a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bbd58 <_strtod_l+0x970>
   bb9ac:	9304      	str	r3, [sp, #16]
   bb9ae:	4650      	mov	r0, sl
   bb9b0:	4659      	mov	r1, fp
   bb9b2:	2300      	movs	r3, #0
   bb9b4:	f018 0f01 	tst.w	r8, #1
   bb9b8:	d004      	beq.n	bb9c4 <_strtod_l+0x5dc>
   bb9ba:	e9d9 2300 	ldrd	r2, r3, [r9]
   bb9be:	f7ff f8f1 	bl	baba4 <__aeabi_dmul>
   bb9c2:	2301      	movs	r3, #1
   bb9c4:	ea5f 0868 	movs.w	r8, r8, asr #1
   bb9c8:	f109 0908 	add.w	r9, r9, #8
   bb9cc:	d1f2      	bne.n	bb9b4 <_strtod_l+0x5cc>
   bb9ce:	b10b      	cbz	r3, bb9d4 <_strtod_l+0x5ec>
   bb9d0:	4682      	mov	sl, r0
   bb9d2:	468b      	mov	fp, r1
   bb9d4:	9b04      	ldr	r3, [sp, #16]
   bb9d6:	b1c3      	cbz	r3, bba0a <_strtod_l+0x622>
   bb9d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bb9dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bb9e0:	2b00      	cmp	r3, #0
   bb9e2:	4659      	mov	r1, fp
   bb9e4:	dd11      	ble.n	bba0a <_strtod_l+0x622>
   bb9e6:	2b1f      	cmp	r3, #31
   bb9e8:	f340 8124 	ble.w	bbc34 <_strtod_l+0x84c>
   bb9ec:	2b34      	cmp	r3, #52	; 0x34
   bb9ee:	bfde      	ittt	le
   bb9f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bb9f4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bb9f8:	fa03 f202 	lslle.w	r2, r3, r2
   bb9fc:	f04f 0a00 	mov.w	sl, #0
   bba00:	bfcc      	ite	gt
   bba02:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bba06:	ea02 0b01 	andle.w	fp, r2, r1
   bba0a:	2200      	movs	r2, #0
   bba0c:	2300      	movs	r3, #0
   bba0e:	4650      	mov	r0, sl
   bba10:	4659      	mov	r1, fp
   bba12:	f7ff fb2f 	bl	bb074 <__aeabi_dcmpeq>
   bba16:	2800      	cmp	r0, #0
   bba18:	d1a2      	bne.n	bb960 <_strtod_l+0x578>
   bba1a:	9b07      	ldr	r3, [sp, #28]
   bba1c:	9300      	str	r3, [sp, #0]
   bba1e:	9908      	ldr	r1, [sp, #32]
   bba20:	462b      	mov	r3, r5
   bba22:	463a      	mov	r2, r7
   bba24:	4620      	mov	r0, r4
   bba26:	f001 f85d 	bl	bcae4 <__s2b>
   bba2a:	9007      	str	r0, [sp, #28]
   bba2c:	2800      	cmp	r0, #0
   bba2e:	f43f af1f 	beq.w	bb870 <_strtod_l+0x488>
   bba32:	9b05      	ldr	r3, [sp, #20]
   bba34:	1b9e      	subs	r6, r3, r6
   bba36:	9b06      	ldr	r3, [sp, #24]
   bba38:	2b00      	cmp	r3, #0
   bba3a:	bfb4      	ite	lt
   bba3c:	4633      	movlt	r3, r6
   bba3e:	2300      	movge	r3, #0
   bba40:	930c      	str	r3, [sp, #48]	; 0x30
   bba42:	9b06      	ldr	r3, [sp, #24]
   bba44:	2500      	movs	r5, #0
   bba46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bba4a:	9312      	str	r3, [sp, #72]	; 0x48
   bba4c:	462e      	mov	r6, r5
   bba4e:	9b07      	ldr	r3, [sp, #28]
   bba50:	4620      	mov	r0, r4
   bba52:	6859      	ldr	r1, [r3, #4]
   bba54:	f000 ff9e 	bl	bc994 <_Balloc>
   bba58:	9005      	str	r0, [sp, #20]
   bba5a:	2800      	cmp	r0, #0
   bba5c:	f43f af0c 	beq.w	bb878 <_strtod_l+0x490>
   bba60:	9b07      	ldr	r3, [sp, #28]
   bba62:	691a      	ldr	r2, [r3, #16]
   bba64:	3202      	adds	r2, #2
   bba66:	f103 010c 	add.w	r1, r3, #12
   bba6a:	0092      	lsls	r2, r2, #2
   bba6c:	300c      	adds	r0, #12
   bba6e:	f7ff fbf1 	bl	bb254 <memcpy>
   bba72:	ec4b ab10 	vmov	d0, sl, fp
   bba76:	aa1a      	add	r2, sp, #104	; 0x68
   bba78:	a919      	add	r1, sp, #100	; 0x64
   bba7a:	4620      	mov	r0, r4
   bba7c:	f001 fb78 	bl	bd170 <__d2b>
   bba80:	ec4b ab18 	vmov	d8, sl, fp
   bba84:	9018      	str	r0, [sp, #96]	; 0x60
   bba86:	2800      	cmp	r0, #0
   bba88:	f43f aef6 	beq.w	bb878 <_strtod_l+0x490>
   bba8c:	2101      	movs	r1, #1
   bba8e:	4620      	mov	r0, r4
   bba90:	f001 f8c2 	bl	bcc18 <__i2b>
   bba94:	4606      	mov	r6, r0
   bba96:	2800      	cmp	r0, #0
   bba98:	f43f aeee 	beq.w	bb878 <_strtod_l+0x490>
   bba9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bba9e:	9904      	ldr	r1, [sp, #16]
   bbaa0:	2b00      	cmp	r3, #0
   bbaa2:	bfab      	itete	ge
   bbaa4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bbaa6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bbaa8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bbaaa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bbaae:	bfac      	ite	ge
   bbab0:	eb03 0902 	addge.w	r9, r3, r2
   bbab4:	1ad7      	sublt	r7, r2, r3
   bbab6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bbab8:	eba3 0801 	sub.w	r8, r3, r1
   bbabc:	4490      	add	r8, r2
   bbabe:	4ba1      	ldr	r3, [pc, #644]	; (bbd44 <_strtod_l+0x95c>)
   bbac0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bbac4:	4598      	cmp	r8, r3
   bbac6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bbaca:	f280 80c7 	bge.w	bbc5c <_strtod_l+0x874>
   bbace:	eba3 0308 	sub.w	r3, r3, r8
   bbad2:	2b1f      	cmp	r3, #31
   bbad4:	eba2 0203 	sub.w	r2, r2, r3
   bbad8:	f04f 0101 	mov.w	r1, #1
   bbadc:	f300 80b1 	bgt.w	bbc42 <_strtod_l+0x85a>
   bbae0:	fa01 f303 	lsl.w	r3, r1, r3
   bbae4:	930d      	str	r3, [sp, #52]	; 0x34
   bbae6:	2300      	movs	r3, #0
   bbae8:	9308      	str	r3, [sp, #32]
   bbaea:	eb09 0802 	add.w	r8, r9, r2
   bbaee:	9b04      	ldr	r3, [sp, #16]
   bbaf0:	45c1      	cmp	r9, r8
   bbaf2:	4417      	add	r7, r2
   bbaf4:	441f      	add	r7, r3
   bbaf6:	464b      	mov	r3, r9
   bbaf8:	bfa8      	it	ge
   bbafa:	4643      	movge	r3, r8
   bbafc:	42bb      	cmp	r3, r7
   bbafe:	bfa8      	it	ge
   bbb00:	463b      	movge	r3, r7
   bbb02:	2b00      	cmp	r3, #0
   bbb04:	bfc2      	ittt	gt
   bbb06:	eba8 0803 	subgt.w	r8, r8, r3
   bbb0a:	1aff      	subgt	r7, r7, r3
   bbb0c:	eba9 0903 	subgt.w	r9, r9, r3
   bbb10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bbb12:	2b00      	cmp	r3, #0
   bbb14:	dd17      	ble.n	bbb46 <_strtod_l+0x75e>
   bbb16:	4631      	mov	r1, r6
   bbb18:	461a      	mov	r2, r3
   bbb1a:	4620      	mov	r0, r4
   bbb1c:	f001 f93c 	bl	bcd98 <__pow5mult>
   bbb20:	4606      	mov	r6, r0
   bbb22:	2800      	cmp	r0, #0
   bbb24:	f43f aea8 	beq.w	bb878 <_strtod_l+0x490>
   bbb28:	4601      	mov	r1, r0
   bbb2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bbb2c:	4620      	mov	r0, r4
   bbb2e:	f001 f889 	bl	bcc44 <__multiply>
   bbb32:	900b      	str	r0, [sp, #44]	; 0x2c
   bbb34:	2800      	cmp	r0, #0
   bbb36:	f43f ae9f 	beq.w	bb878 <_strtod_l+0x490>
   bbb3a:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbb3c:	4620      	mov	r0, r4
   bbb3e:	f000 ff69 	bl	bca14 <_Bfree>
   bbb42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbb44:	9318      	str	r3, [sp, #96]	; 0x60
   bbb46:	f1b8 0f00 	cmp.w	r8, #0
   bbb4a:	f300 808c 	bgt.w	bbc66 <_strtod_l+0x87e>
   bbb4e:	9b06      	ldr	r3, [sp, #24]
   bbb50:	2b00      	cmp	r3, #0
   bbb52:	dd08      	ble.n	bbb66 <_strtod_l+0x77e>
   bbb54:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bbb56:	9905      	ldr	r1, [sp, #20]
   bbb58:	4620      	mov	r0, r4
   bbb5a:	f001 f91d 	bl	bcd98 <__pow5mult>
   bbb5e:	9005      	str	r0, [sp, #20]
   bbb60:	2800      	cmp	r0, #0
   bbb62:	f43f ae89 	beq.w	bb878 <_strtod_l+0x490>
   bbb66:	2f00      	cmp	r7, #0
   bbb68:	dd08      	ble.n	bbb7c <_strtod_l+0x794>
   bbb6a:	9905      	ldr	r1, [sp, #20]
   bbb6c:	463a      	mov	r2, r7
   bbb6e:	4620      	mov	r0, r4
   bbb70:	f001 f96c 	bl	bce4c <__lshift>
   bbb74:	9005      	str	r0, [sp, #20]
   bbb76:	2800      	cmp	r0, #0
   bbb78:	f43f ae7e 	beq.w	bb878 <_strtod_l+0x490>
   bbb7c:	f1b9 0f00 	cmp.w	r9, #0
   bbb80:	dd08      	ble.n	bbb94 <_strtod_l+0x7ac>
   bbb82:	4631      	mov	r1, r6
   bbb84:	464a      	mov	r2, r9
   bbb86:	4620      	mov	r0, r4
   bbb88:	f001 f960 	bl	bce4c <__lshift>
   bbb8c:	4606      	mov	r6, r0
   bbb8e:	2800      	cmp	r0, #0
   bbb90:	f43f ae72 	beq.w	bb878 <_strtod_l+0x490>
   bbb94:	9a05      	ldr	r2, [sp, #20]
   bbb96:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbb98:	4620      	mov	r0, r4
   bbb9a:	f001 f9e3 	bl	bcf64 <__mdiff>
   bbb9e:	4605      	mov	r5, r0
   bbba0:	2800      	cmp	r0, #0
   bbba2:	f43f ae69 	beq.w	bb878 <_strtod_l+0x490>
   bbba6:	68c3      	ldr	r3, [r0, #12]
   bbba8:	930b      	str	r3, [sp, #44]	; 0x2c
   bbbaa:	2300      	movs	r3, #0
   bbbac:	60c3      	str	r3, [r0, #12]
   bbbae:	4631      	mov	r1, r6
   bbbb0:	f001 f9bc 	bl	bcf2c <__mcmp>
   bbbb4:	2800      	cmp	r0, #0
   bbbb6:	da60      	bge.n	bbc7a <_strtod_l+0x892>
   bbbb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbbba:	ea53 030a 	orrs.w	r3, r3, sl
   bbbbe:	f040 8082 	bne.w	bbcc6 <_strtod_l+0x8de>
   bbbc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbbc6:	2b00      	cmp	r3, #0
   bbbc8:	d17d      	bne.n	bbcc6 <_strtod_l+0x8de>
   bbbca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bbbce:	0d1b      	lsrs	r3, r3, #20
   bbbd0:	051b      	lsls	r3, r3, #20
   bbbd2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bbbd6:	d976      	bls.n	bbcc6 <_strtod_l+0x8de>
   bbbd8:	696b      	ldr	r3, [r5, #20]
   bbbda:	b913      	cbnz	r3, bbbe2 <_strtod_l+0x7fa>
   bbbdc:	692b      	ldr	r3, [r5, #16]
   bbbde:	2b01      	cmp	r3, #1
   bbbe0:	dd71      	ble.n	bbcc6 <_strtod_l+0x8de>
   bbbe2:	4629      	mov	r1, r5
   bbbe4:	2201      	movs	r2, #1
   bbbe6:	4620      	mov	r0, r4
   bbbe8:	f001 f930 	bl	bce4c <__lshift>
   bbbec:	4631      	mov	r1, r6
   bbbee:	4605      	mov	r5, r0
   bbbf0:	f001 f99c 	bl	bcf2c <__mcmp>
   bbbf4:	2800      	cmp	r0, #0
   bbbf6:	dd66      	ble.n	bbcc6 <_strtod_l+0x8de>
   bbbf8:	9904      	ldr	r1, [sp, #16]
   bbbfa:	4a53      	ldr	r2, [pc, #332]	; (bbd48 <_strtod_l+0x960>)
   bbbfc:	465b      	mov	r3, fp
   bbbfe:	2900      	cmp	r1, #0
   bbc00:	f000 8081 	beq.w	bbd06 <_strtod_l+0x91e>
   bbc04:	ea02 010b 	and.w	r1, r2, fp
   bbc08:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bbc0c:	dc7b      	bgt.n	bbd06 <_strtod_l+0x91e>
   bbc0e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bbc12:	f77f aea9 	ble.w	bb968 <_strtod_l+0x580>
   bbc16:	4b4d      	ldr	r3, [pc, #308]	; (bbd4c <_strtod_l+0x964>)
   bbc18:	4650      	mov	r0, sl
   bbc1a:	4659      	mov	r1, fp
   bbc1c:	2200      	movs	r2, #0
   bbc1e:	f7fe ffc1 	bl	baba4 <__aeabi_dmul>
   bbc22:	460b      	mov	r3, r1
   bbc24:	4303      	orrs	r3, r0
   bbc26:	bf08      	it	eq
   bbc28:	2322      	moveq	r3, #34	; 0x22
   bbc2a:	4682      	mov	sl, r0
   bbc2c:	468b      	mov	fp, r1
   bbc2e:	bf08      	it	eq
   bbc30:	6023      	streq	r3, [r4, #0]
   bbc32:	e62b      	b.n	bb88c <_strtod_l+0x4a4>
   bbc34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbc38:	fa02 f303 	lsl.w	r3, r2, r3
   bbc3c:	ea03 0a0a 	and.w	sl, r3, sl
   bbc40:	e6e3      	b.n	bba0a <_strtod_l+0x622>
   bbc42:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bbc46:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bbc4a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bbc4e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bbc52:	fa01 f308 	lsl.w	r3, r1, r8
   bbc56:	9308      	str	r3, [sp, #32]
   bbc58:	910d      	str	r1, [sp, #52]	; 0x34
   bbc5a:	e746      	b.n	bbaea <_strtod_l+0x702>
   bbc5c:	2300      	movs	r3, #0
   bbc5e:	9308      	str	r3, [sp, #32]
   bbc60:	2301      	movs	r3, #1
   bbc62:	930d      	str	r3, [sp, #52]	; 0x34
   bbc64:	e741      	b.n	bbaea <_strtod_l+0x702>
   bbc66:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbc68:	4642      	mov	r2, r8
   bbc6a:	4620      	mov	r0, r4
   bbc6c:	f001 f8ee 	bl	bce4c <__lshift>
   bbc70:	9018      	str	r0, [sp, #96]	; 0x60
   bbc72:	2800      	cmp	r0, #0
   bbc74:	f47f af6b 	bne.w	bbb4e <_strtod_l+0x766>
   bbc78:	e5fe      	b.n	bb878 <_strtod_l+0x490>
   bbc7a:	465f      	mov	r7, fp
   bbc7c:	d16e      	bne.n	bbd5c <_strtod_l+0x974>
   bbc7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bbc80:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbc84:	b342      	cbz	r2, bbcd8 <_strtod_l+0x8f0>
   bbc86:	4a32      	ldr	r2, [pc, #200]	; (bbd50 <_strtod_l+0x968>)
   bbc88:	4293      	cmp	r3, r2
   bbc8a:	d128      	bne.n	bbcde <_strtod_l+0x8f6>
   bbc8c:	9b04      	ldr	r3, [sp, #16]
   bbc8e:	4651      	mov	r1, sl
   bbc90:	b1eb      	cbz	r3, bbcce <_strtod_l+0x8e6>
   bbc92:	4b2d      	ldr	r3, [pc, #180]	; (bbd48 <_strtod_l+0x960>)
   bbc94:	403b      	ands	r3, r7
   bbc96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bbc9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbc9e:	d819      	bhi.n	bbcd4 <_strtod_l+0x8ec>
   bbca0:	0d1b      	lsrs	r3, r3, #20
   bbca2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bbca6:	fa02 f303 	lsl.w	r3, r2, r3
   bbcaa:	4299      	cmp	r1, r3
   bbcac:	d117      	bne.n	bbcde <_strtod_l+0x8f6>
   bbcae:	4b29      	ldr	r3, [pc, #164]	; (bbd54 <_strtod_l+0x96c>)
   bbcb0:	429f      	cmp	r7, r3
   bbcb2:	d102      	bne.n	bbcba <_strtod_l+0x8d2>
   bbcb4:	3101      	adds	r1, #1
   bbcb6:	f43f addf 	beq.w	bb878 <_strtod_l+0x490>
   bbcba:	4b23      	ldr	r3, [pc, #140]	; (bbd48 <_strtod_l+0x960>)
   bbcbc:	403b      	ands	r3, r7
   bbcbe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bbcc2:	f04f 0a00 	mov.w	sl, #0
   bbcc6:	9b04      	ldr	r3, [sp, #16]
   bbcc8:	2b00      	cmp	r3, #0
   bbcca:	d1a4      	bne.n	bbc16 <_strtod_l+0x82e>
   bbccc:	e5de      	b.n	bb88c <_strtod_l+0x4a4>
   bbcce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bbcd2:	e7ea      	b.n	bbcaa <_strtod_l+0x8c2>
   bbcd4:	4613      	mov	r3, r2
   bbcd6:	e7e8      	b.n	bbcaa <_strtod_l+0x8c2>
   bbcd8:	ea53 030a 	orrs.w	r3, r3, sl
   bbcdc:	d08c      	beq.n	bbbf8 <_strtod_l+0x810>
   bbcde:	9b08      	ldr	r3, [sp, #32]
   bbce0:	b1db      	cbz	r3, bbd1a <_strtod_l+0x932>
   bbce2:	423b      	tst	r3, r7
   bbce4:	d0ef      	beq.n	bbcc6 <_strtod_l+0x8de>
   bbce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbce8:	9a04      	ldr	r2, [sp, #16]
   bbcea:	4650      	mov	r0, sl
   bbcec:	4659      	mov	r1, fp
   bbcee:	b1c3      	cbz	r3, bbd22 <_strtod_l+0x93a>
   bbcf0:	f7ff fb5e 	bl	bb3b0 <sulp>
   bbcf4:	4602      	mov	r2, r0
   bbcf6:	460b      	mov	r3, r1
   bbcf8:	ec51 0b18 	vmov	r0, r1, d8
   bbcfc:	f7fe fd9c 	bl	ba838 <__adddf3>
   bbd00:	4682      	mov	sl, r0
   bbd02:	468b      	mov	fp, r1
   bbd04:	e7df      	b.n	bbcc6 <_strtod_l+0x8de>
   bbd06:	4013      	ands	r3, r2
   bbd08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bbd0c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bbd10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bbd14:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bbd18:	e7d5      	b.n	bbcc6 <_strtod_l+0x8de>
   bbd1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bbd1c:	ea13 0f0a 	tst.w	r3, sl
   bbd20:	e7e0      	b.n	bbce4 <_strtod_l+0x8fc>
   bbd22:	f7ff fb45 	bl	bb3b0 <sulp>
   bbd26:	4602      	mov	r2, r0
   bbd28:	460b      	mov	r3, r1
   bbd2a:	ec51 0b18 	vmov	r0, r1, d8
   bbd2e:	f7fe fd81 	bl	ba834 <__aeabi_dsub>
   bbd32:	2200      	movs	r2, #0
   bbd34:	2300      	movs	r3, #0
   bbd36:	4682      	mov	sl, r0
   bbd38:	468b      	mov	fp, r1
   bbd3a:	f7ff f99b 	bl	bb074 <__aeabi_dcmpeq>
   bbd3e:	2800      	cmp	r0, #0
   bbd40:	d0c1      	beq.n	bbcc6 <_strtod_l+0x8de>
   bbd42:	e611      	b.n	bb968 <_strtod_l+0x580>
   bbd44:	fffffc02 	.word	0xfffffc02
   bbd48:	7ff00000 	.word	0x7ff00000
   bbd4c:	39500000 	.word	0x39500000
   bbd50:	000fffff 	.word	0x000fffff
   bbd54:	7fefffff 	.word	0x7fefffff
   bbd58:	000bdd90 	.word	0x000bdd90
   bbd5c:	4631      	mov	r1, r6
   bbd5e:	4628      	mov	r0, r5
   bbd60:	f001 fa62 	bl	bd228 <__ratio>
   bbd64:	ec59 8b10 	vmov	r8, r9, d0
   bbd68:	ee10 0a10 	vmov	r0, s0
   bbd6c:	2200      	movs	r2, #0
   bbd6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bbd72:	4649      	mov	r1, r9
   bbd74:	f7ff f992 	bl	bb09c <__aeabi_dcmple>
   bbd78:	2800      	cmp	r0, #0
   bbd7a:	d07a      	beq.n	bbe72 <_strtod_l+0xa8a>
   bbd7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbd7e:	2b00      	cmp	r3, #0
   bbd80:	d04a      	beq.n	bbe18 <_strtod_l+0xa30>
   bbd82:	4b95      	ldr	r3, [pc, #596]	; (bbfd8 <_strtod_l+0xbf0>)
   bbd84:	2200      	movs	r2, #0
   bbd86:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbd8a:	f8df 924c 	ldr.w	r9, [pc, #588]	; bbfd8 <_strtod_l+0xbf0>
   bbd8e:	f04f 0800 	mov.w	r8, #0
   bbd92:	4b92      	ldr	r3, [pc, #584]	; (bbfdc <_strtod_l+0xbf4>)
   bbd94:	403b      	ands	r3, r7
   bbd96:	930d      	str	r3, [sp, #52]	; 0x34
   bbd98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbd9a:	4b91      	ldr	r3, [pc, #580]	; (bbfe0 <_strtod_l+0xbf8>)
   bbd9c:	429a      	cmp	r2, r3
   bbd9e:	f040 80b0 	bne.w	bbf02 <_strtod_l+0xb1a>
   bbda2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbda6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bbdaa:	ec4b ab10 	vmov	d0, sl, fp
   bbdae:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bbdb2:	f001 f961 	bl	bd078 <__ulp>
   bbdb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbdba:	ec53 2b10 	vmov	r2, r3, d0
   bbdbe:	f7fe fef1 	bl	baba4 <__aeabi_dmul>
   bbdc2:	4652      	mov	r2, sl
   bbdc4:	465b      	mov	r3, fp
   bbdc6:	f7fe fd37 	bl	ba838 <__adddf3>
   bbdca:	460b      	mov	r3, r1
   bbdcc:	4983      	ldr	r1, [pc, #524]	; (bbfdc <_strtod_l+0xbf4>)
   bbdce:	4a85      	ldr	r2, [pc, #532]	; (bbfe4 <_strtod_l+0xbfc>)
   bbdd0:	4019      	ands	r1, r3
   bbdd2:	4291      	cmp	r1, r2
   bbdd4:	4682      	mov	sl, r0
   bbdd6:	d960      	bls.n	bbe9a <_strtod_l+0xab2>
   bbdd8:	ee18 3a90 	vmov	r3, s17
   bbddc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bbde0:	4293      	cmp	r3, r2
   bbde2:	d104      	bne.n	bbdee <_strtod_l+0xa06>
   bbde4:	ee18 3a10 	vmov	r3, s16
   bbde8:	3301      	adds	r3, #1
   bbdea:	f43f ad45 	beq.w	bb878 <_strtod_l+0x490>
   bbdee:	f8df b200 	ldr.w	fp, [pc, #512]	; bbff0 <_strtod_l+0xc08>
   bbdf2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bbdf6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbdf8:	4620      	mov	r0, r4
   bbdfa:	f000 fe0b 	bl	bca14 <_Bfree>
   bbdfe:	9905      	ldr	r1, [sp, #20]
   bbe00:	4620      	mov	r0, r4
   bbe02:	f000 fe07 	bl	bca14 <_Bfree>
   bbe06:	4631      	mov	r1, r6
   bbe08:	4620      	mov	r0, r4
   bbe0a:	f000 fe03 	bl	bca14 <_Bfree>
   bbe0e:	4629      	mov	r1, r5
   bbe10:	4620      	mov	r0, r4
   bbe12:	f000 fdff 	bl	bca14 <_Bfree>
   bbe16:	e61a      	b.n	bba4e <_strtod_l+0x666>
   bbe18:	f1ba 0f00 	cmp.w	sl, #0
   bbe1c:	d11b      	bne.n	bbe56 <_strtod_l+0xa6e>
   bbe1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbe22:	b9f3      	cbnz	r3, bbe62 <_strtod_l+0xa7a>
   bbe24:	4b6c      	ldr	r3, [pc, #432]	; (bbfd8 <_strtod_l+0xbf0>)
   bbe26:	2200      	movs	r2, #0
   bbe28:	4640      	mov	r0, r8
   bbe2a:	4649      	mov	r1, r9
   bbe2c:	f7ff f92c 	bl	bb088 <__aeabi_dcmplt>
   bbe30:	b9d0      	cbnz	r0, bbe68 <_strtod_l+0xa80>
   bbe32:	4640      	mov	r0, r8
   bbe34:	4649      	mov	r1, r9
   bbe36:	4b6c      	ldr	r3, [pc, #432]	; (bbfe8 <_strtod_l+0xc00>)
   bbe38:	2200      	movs	r2, #0
   bbe3a:	f7fe feb3 	bl	baba4 <__aeabi_dmul>
   bbe3e:	4680      	mov	r8, r0
   bbe40:	4689      	mov	r9, r1
   bbe42:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bbe46:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bbe4a:	9315      	str	r3, [sp, #84]	; 0x54
   bbe4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bbe50:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbe54:	e79d      	b.n	bbd92 <_strtod_l+0x9aa>
   bbe56:	f1ba 0f01 	cmp.w	sl, #1
   bbe5a:	d102      	bne.n	bbe62 <_strtod_l+0xa7a>
   bbe5c:	2f00      	cmp	r7, #0
   bbe5e:	f43f ad83 	beq.w	bb968 <_strtod_l+0x580>
   bbe62:	4b62      	ldr	r3, [pc, #392]	; (bbfec <_strtod_l+0xc04>)
   bbe64:	2200      	movs	r2, #0
   bbe66:	e78e      	b.n	bbd86 <_strtod_l+0x99e>
   bbe68:	f8df 917c 	ldr.w	r9, [pc, #380]	; bbfe8 <_strtod_l+0xc00>
   bbe6c:	f04f 0800 	mov.w	r8, #0
   bbe70:	e7e7      	b.n	bbe42 <_strtod_l+0xa5a>
   bbe72:	4b5d      	ldr	r3, [pc, #372]	; (bbfe8 <_strtod_l+0xc00>)
   bbe74:	4640      	mov	r0, r8
   bbe76:	4649      	mov	r1, r9
   bbe78:	2200      	movs	r2, #0
   bbe7a:	f7fe fe93 	bl	baba4 <__aeabi_dmul>
   bbe7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbe80:	4680      	mov	r8, r0
   bbe82:	4689      	mov	r9, r1
   bbe84:	b933      	cbnz	r3, bbe94 <_strtod_l+0xaac>
   bbe86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bbe8a:	900e      	str	r0, [sp, #56]	; 0x38
   bbe8c:	930f      	str	r3, [sp, #60]	; 0x3c
   bbe8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bbe92:	e7dd      	b.n	bbe50 <_strtod_l+0xa68>
   bbe94:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bbe98:	e7f9      	b.n	bbe8e <_strtod_l+0xaa6>
   bbe9a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bbe9e:	9b04      	ldr	r3, [sp, #16]
   bbea0:	2b00      	cmp	r3, #0
   bbea2:	d1a8      	bne.n	bbdf6 <_strtod_l+0xa0e>
   bbea4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bbea8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbeaa:	0d1b      	lsrs	r3, r3, #20
   bbeac:	051b      	lsls	r3, r3, #20
   bbeae:	429a      	cmp	r2, r3
   bbeb0:	d1a1      	bne.n	bbdf6 <_strtod_l+0xa0e>
   bbeb2:	4640      	mov	r0, r8
   bbeb4:	4649      	mov	r1, r9
   bbeb6:	f001 fa5b 	bl	bd370 <__aeabi_d2lz>
   bbeba:	f7fe fe45 	bl	bab48 <__aeabi_l2d>
   bbebe:	4602      	mov	r2, r0
   bbec0:	460b      	mov	r3, r1
   bbec2:	4640      	mov	r0, r8
   bbec4:	4649      	mov	r1, r9
   bbec6:	f7fe fcb5 	bl	ba834 <__aeabi_dsub>
   bbeca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bbecc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbed0:	ea43 030a 	orr.w	r3, r3, sl
   bbed4:	4313      	orrs	r3, r2
   bbed6:	4680      	mov	r8, r0
   bbed8:	4689      	mov	r9, r1
   bbeda:	d055      	beq.n	bbf88 <_strtod_l+0xba0>
   bbedc:	a336      	add	r3, pc, #216	; (adr r3, bbfb8 <_strtod_l+0xbd0>)
   bbede:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbee2:	f7ff f8d1 	bl	bb088 <__aeabi_dcmplt>
   bbee6:	2800      	cmp	r0, #0
   bbee8:	f47f acd0 	bne.w	bb88c <_strtod_l+0x4a4>
   bbeec:	a334      	add	r3, pc, #208	; (adr r3, bbfc0 <_strtod_l+0xbd8>)
   bbeee:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbef2:	4640      	mov	r0, r8
   bbef4:	4649      	mov	r1, r9
   bbef6:	f7ff f8e5 	bl	bb0c4 <__aeabi_dcmpgt>
   bbefa:	2800      	cmp	r0, #0
   bbefc:	f43f af7b 	beq.w	bbdf6 <_strtod_l+0xa0e>
   bbf00:	e4c4      	b.n	bb88c <_strtod_l+0x4a4>
   bbf02:	9b04      	ldr	r3, [sp, #16]
   bbf04:	b333      	cbz	r3, bbf54 <_strtod_l+0xb6c>
   bbf06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bbf08:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bbf0c:	d822      	bhi.n	bbf54 <_strtod_l+0xb6c>
   bbf0e:	a32e      	add	r3, pc, #184	; (adr r3, bbfc8 <_strtod_l+0xbe0>)
   bbf10:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbf14:	4640      	mov	r0, r8
   bbf16:	4649      	mov	r1, r9
   bbf18:	f7ff f8c0 	bl	bb09c <__aeabi_dcmple>
   bbf1c:	b1a0      	cbz	r0, bbf48 <_strtod_l+0xb60>
   bbf1e:	4649      	mov	r1, r9
   bbf20:	4640      	mov	r0, r8
   bbf22:	f7ff f8ef 	bl	bb104 <__aeabi_d2uiz>
   bbf26:	2801      	cmp	r0, #1
   bbf28:	bf38      	it	cc
   bbf2a:	2001      	movcc	r0, #1
   bbf2c:	f7fe fdc0 	bl	baab0 <__aeabi_ui2d>
   bbf30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbf32:	4680      	mov	r8, r0
   bbf34:	4689      	mov	r9, r1
   bbf36:	bb23      	cbnz	r3, bbf82 <_strtod_l+0xb9a>
   bbf38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bbf3c:	9010      	str	r0, [sp, #64]	; 0x40
   bbf3e:	9311      	str	r3, [sp, #68]	; 0x44
   bbf40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bbf44:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbf48:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bbf4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbf4c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bbf50:	1a9b      	subs	r3, r3, r2
   bbf52:	9309      	str	r3, [sp, #36]	; 0x24
   bbf54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbf58:	eeb0 0a48 	vmov.f32	s0, s16
   bbf5c:	eef0 0a68 	vmov.f32	s1, s17
   bbf60:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bbf64:	f001 f888 	bl	bd078 <__ulp>
   bbf68:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbf6c:	ec53 2b10 	vmov	r2, r3, d0
   bbf70:	f7fe fe18 	bl	baba4 <__aeabi_dmul>
   bbf74:	ec53 2b18 	vmov	r2, r3, d8
   bbf78:	f7fe fc5e 	bl	ba838 <__adddf3>
   bbf7c:	4682      	mov	sl, r0
   bbf7e:	468b      	mov	fp, r1
   bbf80:	e78d      	b.n	bbe9e <_strtod_l+0xab6>
   bbf82:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bbf86:	e7db      	b.n	bbf40 <_strtod_l+0xb58>
   bbf88:	a311      	add	r3, pc, #68	; (adr r3, bbfd0 <_strtod_l+0xbe8>)
   bbf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbf8e:	f7ff f87b 	bl	bb088 <__aeabi_dcmplt>
   bbf92:	e7b2      	b.n	bbefa <_strtod_l+0xb12>
   bbf94:	2300      	movs	r3, #0
   bbf96:	930a      	str	r3, [sp, #40]	; 0x28
   bbf98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bbf9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbf9c:	6013      	str	r3, [r2, #0]
   bbf9e:	f7ff ba6b 	b.w	bb478 <_strtod_l+0x90>
   bbfa2:	2a65      	cmp	r2, #101	; 0x65
   bbfa4:	f43f ab5f 	beq.w	bb666 <_strtod_l+0x27e>
   bbfa8:	2a45      	cmp	r2, #69	; 0x45
   bbfaa:	f43f ab5c 	beq.w	bb666 <_strtod_l+0x27e>
   bbfae:	2301      	movs	r3, #1
   bbfb0:	f7ff bb94 	b.w	bb6dc <_strtod_l+0x2f4>
   bbfb4:	f3af 8000 	nop.w
   bbfb8:	94a03595 	.word	0x94a03595
   bbfbc:	3fdfffff 	.word	0x3fdfffff
   bbfc0:	35afe535 	.word	0x35afe535
   bbfc4:	3fe00000 	.word	0x3fe00000
   bbfc8:	ffc00000 	.word	0xffc00000
   bbfcc:	41dfffff 	.word	0x41dfffff
   bbfd0:	94a03595 	.word	0x94a03595
   bbfd4:	3fcfffff 	.word	0x3fcfffff
   bbfd8:	3ff00000 	.word	0x3ff00000
   bbfdc:	7ff00000 	.word	0x7ff00000
   bbfe0:	7fe00000 	.word	0x7fe00000
   bbfe4:	7c9fffff 	.word	0x7c9fffff
   bbfe8:	3fe00000 	.word	0x3fe00000
   bbfec:	bff00000 	.word	0xbff00000
   bbff0:	7fefffff 	.word	0x7fefffff

000bbff4 <strtof>:
   bbff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbff8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; bc0a8 <strtof+0xb4>
   bbffc:	4b26      	ldr	r3, [pc, #152]	; (bc098 <strtof+0xa4>)
   bbffe:	460a      	mov	r2, r1
   bc000:	ed2d 8b02 	vpush	{d8}
   bc004:	4601      	mov	r1, r0
   bc006:	f8d8 0000 	ldr.w	r0, [r8]
   bc00a:	f7ff f9ed 	bl	bb3e8 <_strtod_l>
   bc00e:	ec55 4b10 	vmov	r4, r5, d0
   bc012:	ee10 2a10 	vmov	r2, s0
   bc016:	ee10 0a10 	vmov	r0, s0
   bc01a:	462b      	mov	r3, r5
   bc01c:	4629      	mov	r1, r5
   bc01e:	f7ff f85b 	bl	bb0d8 <__aeabi_dcmpun>
   bc022:	b190      	cbz	r0, bc04a <strtof+0x56>
   bc024:	2d00      	cmp	r5, #0
   bc026:	481d      	ldr	r0, [pc, #116]	; (bc09c <strtof+0xa8>)
   bc028:	da09      	bge.n	bc03e <strtof+0x4a>
   bc02a:	f001 f98d 	bl	bd348 <nanf>
   bc02e:	eeb1 8a40 	vneg.f32	s16, s0
   bc032:	eeb0 0a48 	vmov.f32	s0, s16
   bc036:	ecbd 8b02 	vpop	{d8}
   bc03a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc03e:	ecbd 8b02 	vpop	{d8}
   bc042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bc046:	f001 b97f 	b.w	bd348 <nanf>
   bc04a:	4620      	mov	r0, r4
   bc04c:	4629      	mov	r1, r5
   bc04e:	f7ff f879 	bl	bb144 <__aeabi_d2f>
   bc052:	ee08 0a10 	vmov	s16, r0
   bc056:	eddf 7a12 	vldr	s15, [pc, #72]	; bc0a0 <strtof+0xac>
   bc05a:	eeb0 7ac8 	vabs.f32	s14, s16
   bc05e:	eeb4 7a67 	vcmp.f32	s14, s15
   bc062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bc066:	dde4      	ble.n	bc032 <strtof+0x3e>
   bc068:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   bc06c:	4b0d      	ldr	r3, [pc, #52]	; (bc0a4 <strtof+0xb0>)
   bc06e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc072:	4620      	mov	r0, r4
   bc074:	4639      	mov	r1, r7
   bc076:	f7ff f82f 	bl	bb0d8 <__aeabi_dcmpun>
   bc07a:	b940      	cbnz	r0, bc08e <strtof+0x9a>
   bc07c:	4b09      	ldr	r3, [pc, #36]	; (bc0a4 <strtof+0xb0>)
   bc07e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc082:	4620      	mov	r0, r4
   bc084:	4639      	mov	r1, r7
   bc086:	f7ff f809 	bl	bb09c <__aeabi_dcmple>
   bc08a:	2800      	cmp	r0, #0
   bc08c:	d0d1      	beq.n	bc032 <strtof+0x3e>
   bc08e:	f8d8 3000 	ldr.w	r3, [r8]
   bc092:	2222      	movs	r2, #34	; 0x22
   bc094:	601a      	str	r2, [r3, #0]
   bc096:	e7cc      	b.n	bc032 <strtof+0x3e>
   bc098:	2003536c 	.word	0x2003536c
   bc09c:	000bd7d2 	.word	0x000bd7d2
   bc0a0:	7f7fffff 	.word	0x7f7fffff
   bc0a4:	7fefffff 	.word	0x7fefffff
   bc0a8:	20035300 	.word	0x20035300

000bc0ac <_strtol_l.constprop.0>:
   bc0ac:	2b01      	cmp	r3, #1
   bc0ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc0b2:	d001      	beq.n	bc0b8 <_strtol_l.constprop.0+0xc>
   bc0b4:	2b24      	cmp	r3, #36	; 0x24
   bc0b6:	d906      	bls.n	bc0c6 <_strtol_l.constprop.0+0x1a>
   bc0b8:	f7fb fe26 	bl	b7d08 <__errno>
   bc0bc:	2316      	movs	r3, #22
   bc0be:	6003      	str	r3, [r0, #0]
   bc0c0:	2000      	movs	r0, #0
   bc0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc0c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bc1ac <_strtol_l.constprop.0+0x100>
   bc0ca:	460d      	mov	r5, r1
   bc0cc:	462e      	mov	r6, r5
   bc0ce:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc0d2:	f814 700c 	ldrb.w	r7, [r4, ip]
   bc0d6:	f017 0708 	ands.w	r7, r7, #8
   bc0da:	d1f7      	bne.n	bc0cc <_strtol_l.constprop.0+0x20>
   bc0dc:	2c2d      	cmp	r4, #45	; 0x2d
   bc0de:	d132      	bne.n	bc146 <_strtol_l.constprop.0+0x9a>
   bc0e0:	782c      	ldrb	r4, [r5, #0]
   bc0e2:	2701      	movs	r7, #1
   bc0e4:	1cb5      	adds	r5, r6, #2
   bc0e6:	2b00      	cmp	r3, #0
   bc0e8:	d05b      	beq.n	bc1a2 <_strtol_l.constprop.0+0xf6>
   bc0ea:	2b10      	cmp	r3, #16
   bc0ec:	d109      	bne.n	bc102 <_strtol_l.constprop.0+0x56>
   bc0ee:	2c30      	cmp	r4, #48	; 0x30
   bc0f0:	d107      	bne.n	bc102 <_strtol_l.constprop.0+0x56>
   bc0f2:	782c      	ldrb	r4, [r5, #0]
   bc0f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bc0f8:	2c58      	cmp	r4, #88	; 0x58
   bc0fa:	d14d      	bne.n	bc198 <_strtol_l.constprop.0+0xec>
   bc0fc:	786c      	ldrb	r4, [r5, #1]
   bc0fe:	2310      	movs	r3, #16
   bc100:	3502      	adds	r5, #2
   bc102:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bc106:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bc10a:	f04f 0c00 	mov.w	ip, #0
   bc10e:	fbb8 f9f3 	udiv	r9, r8, r3
   bc112:	4666      	mov	r6, ip
   bc114:	fb03 8a19 	mls	sl, r3, r9, r8
   bc118:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bc11c:	f1be 0f09 	cmp.w	lr, #9
   bc120:	d816      	bhi.n	bc150 <_strtol_l.constprop.0+0xa4>
   bc122:	4674      	mov	r4, lr
   bc124:	42a3      	cmp	r3, r4
   bc126:	dd24      	ble.n	bc172 <_strtol_l.constprop.0+0xc6>
   bc128:	f1bc 0f00 	cmp.w	ip, #0
   bc12c:	db1e      	blt.n	bc16c <_strtol_l.constprop.0+0xc0>
   bc12e:	45b1      	cmp	r9, r6
   bc130:	d31c      	bcc.n	bc16c <_strtol_l.constprop.0+0xc0>
   bc132:	d101      	bne.n	bc138 <_strtol_l.constprop.0+0x8c>
   bc134:	45a2      	cmp	sl, r4
   bc136:	db19      	blt.n	bc16c <_strtol_l.constprop.0+0xc0>
   bc138:	fb06 4603 	mla	r6, r6, r3, r4
   bc13c:	f04f 0c01 	mov.w	ip, #1
   bc140:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc144:	e7e8      	b.n	bc118 <_strtol_l.constprop.0+0x6c>
   bc146:	2c2b      	cmp	r4, #43	; 0x2b
   bc148:	bf04      	itt	eq
   bc14a:	782c      	ldrbeq	r4, [r5, #0]
   bc14c:	1cb5      	addeq	r5, r6, #2
   bc14e:	e7ca      	b.n	bc0e6 <_strtol_l.constprop.0+0x3a>
   bc150:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bc154:	f1be 0f19 	cmp.w	lr, #25
   bc158:	d801      	bhi.n	bc15e <_strtol_l.constprop.0+0xb2>
   bc15a:	3c37      	subs	r4, #55	; 0x37
   bc15c:	e7e2      	b.n	bc124 <_strtol_l.constprop.0+0x78>
   bc15e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bc162:	f1be 0f19 	cmp.w	lr, #25
   bc166:	d804      	bhi.n	bc172 <_strtol_l.constprop.0+0xc6>
   bc168:	3c57      	subs	r4, #87	; 0x57
   bc16a:	e7db      	b.n	bc124 <_strtol_l.constprop.0+0x78>
   bc16c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bc170:	e7e6      	b.n	bc140 <_strtol_l.constprop.0+0x94>
   bc172:	f1bc 0f00 	cmp.w	ip, #0
   bc176:	da05      	bge.n	bc184 <_strtol_l.constprop.0+0xd8>
   bc178:	2322      	movs	r3, #34	; 0x22
   bc17a:	6003      	str	r3, [r0, #0]
   bc17c:	4646      	mov	r6, r8
   bc17e:	b942      	cbnz	r2, bc192 <_strtol_l.constprop.0+0xe6>
   bc180:	4630      	mov	r0, r6
   bc182:	e79e      	b.n	bc0c2 <_strtol_l.constprop.0+0x16>
   bc184:	b107      	cbz	r7, bc188 <_strtol_l.constprop.0+0xdc>
   bc186:	4276      	negs	r6, r6
   bc188:	2a00      	cmp	r2, #0
   bc18a:	d0f9      	beq.n	bc180 <_strtol_l.constprop.0+0xd4>
   bc18c:	f1bc 0f00 	cmp.w	ip, #0
   bc190:	d000      	beq.n	bc194 <_strtol_l.constprop.0+0xe8>
   bc192:	1e69      	subs	r1, r5, #1
   bc194:	6011      	str	r1, [r2, #0]
   bc196:	e7f3      	b.n	bc180 <_strtol_l.constprop.0+0xd4>
   bc198:	2430      	movs	r4, #48	; 0x30
   bc19a:	2b00      	cmp	r3, #0
   bc19c:	d1b1      	bne.n	bc102 <_strtol_l.constprop.0+0x56>
   bc19e:	2308      	movs	r3, #8
   bc1a0:	e7af      	b.n	bc102 <_strtol_l.constprop.0+0x56>
   bc1a2:	2c30      	cmp	r4, #48	; 0x30
   bc1a4:	d0a5      	beq.n	bc0f2 <_strtol_l.constprop.0+0x46>
   bc1a6:	230a      	movs	r3, #10
   bc1a8:	e7ab      	b.n	bc102 <_strtol_l.constprop.0+0x56>
   bc1aa:	bf00      	nop
   bc1ac:	000bddb9 	.word	0x000bddb9

000bc1b0 <strtol>:
   bc1b0:	4613      	mov	r3, r2
   bc1b2:	460a      	mov	r2, r1
   bc1b4:	4601      	mov	r1, r0
   bc1b6:	4802      	ldr	r0, [pc, #8]	; (bc1c0 <strtol+0x10>)
   bc1b8:	6800      	ldr	r0, [r0, #0]
   bc1ba:	f7ff bf77 	b.w	bc0ac <_strtol_l.constprop.0>
   bc1be:	bf00      	nop
   bc1c0:	20035300 	.word	0x20035300

000bc1c4 <__register_exitproc>:
   bc1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc1c8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bc284 <__register_exitproc+0xc0>
   bc1cc:	4606      	mov	r6, r0
   bc1ce:	f8d8 0000 	ldr.w	r0, [r8]
   bc1d2:	461f      	mov	r7, r3
   bc1d4:	460d      	mov	r5, r1
   bc1d6:	4691      	mov	r9, r2
   bc1d8:	f000 fbc6 	bl	bc968 <__retarget_lock_acquire_recursive>
   bc1dc:	4b25      	ldr	r3, [pc, #148]	; (bc274 <__register_exitproc+0xb0>)
   bc1de:	681c      	ldr	r4, [r3, #0]
   bc1e0:	b934      	cbnz	r4, bc1f0 <__register_exitproc+0x2c>
   bc1e2:	4c25      	ldr	r4, [pc, #148]	; (bc278 <__register_exitproc+0xb4>)
   bc1e4:	601c      	str	r4, [r3, #0]
   bc1e6:	4b25      	ldr	r3, [pc, #148]	; (bc27c <__register_exitproc+0xb8>)
   bc1e8:	b113      	cbz	r3, bc1f0 <__register_exitproc+0x2c>
   bc1ea:	681b      	ldr	r3, [r3, #0]
   bc1ec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bc1f0:	6863      	ldr	r3, [r4, #4]
   bc1f2:	2b1f      	cmp	r3, #31
   bc1f4:	dd07      	ble.n	bc206 <__register_exitproc+0x42>
   bc1f6:	f8d8 0000 	ldr.w	r0, [r8]
   bc1fa:	f000 fbb7 	bl	bc96c <__retarget_lock_release_recursive>
   bc1fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc206:	b34e      	cbz	r6, bc25c <__register_exitproc+0x98>
   bc208:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bc20c:	b988      	cbnz	r0, bc232 <__register_exitproc+0x6e>
   bc20e:	4b1c      	ldr	r3, [pc, #112]	; (bc280 <__register_exitproc+0xbc>)
   bc210:	b923      	cbnz	r3, bc21c <__register_exitproc+0x58>
   bc212:	f8d8 0000 	ldr.w	r0, [r8]
   bc216:	f000 fba8 	bl	bc96a <__retarget_lock_release>
   bc21a:	e7f0      	b.n	bc1fe <__register_exitproc+0x3a>
   bc21c:	f44f 7084 	mov.w	r0, #264	; 0x108
   bc220:	f7fb fd3a 	bl	b7c98 <malloc>
   bc224:	2800      	cmp	r0, #0
   bc226:	d0f4      	beq.n	bc212 <__register_exitproc+0x4e>
   bc228:	2300      	movs	r3, #0
   bc22a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bc22e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bc232:	6863      	ldr	r3, [r4, #4]
   bc234:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bc238:	2201      	movs	r2, #1
   bc23a:	409a      	lsls	r2, r3
   bc23c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bc240:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bc244:	4313      	orrs	r3, r2
   bc246:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bc24a:	2e02      	cmp	r6, #2
   bc24c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bc250:	bf02      	ittt	eq
   bc252:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bc256:	4313      	orreq	r3, r2
   bc258:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bc25c:	6863      	ldr	r3, [r4, #4]
   bc25e:	f8d8 0000 	ldr.w	r0, [r8]
   bc262:	1c5a      	adds	r2, r3, #1
   bc264:	3302      	adds	r3, #2
   bc266:	6062      	str	r2, [r4, #4]
   bc268:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bc26c:	f000 fb7e 	bl	bc96c <__retarget_lock_release_recursive>
   bc270:	2000      	movs	r0, #0
   bc272:	e7c6      	b.n	bc202 <__register_exitproc+0x3e>
   bc274:	2003e7e8 	.word	0x2003e7e8
   bc278:	2003e75c 	.word	0x2003e75c
   bc27c:	00000000 	.word	0x00000000
   bc280:	000b7c99 	.word	0x000b7c99
   bc284:	20035364 	.word	0x20035364

000bc288 <rshift>:
   bc288:	6903      	ldr	r3, [r0, #16]
   bc28a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bc28e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc292:	ea4f 1261 	mov.w	r2, r1, asr #5
   bc296:	f100 0414 	add.w	r4, r0, #20
   bc29a:	dd45      	ble.n	bc328 <rshift+0xa0>
   bc29c:	f011 011f 	ands.w	r1, r1, #31
   bc2a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bc2a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bc2a8:	d10c      	bne.n	bc2c4 <rshift+0x3c>
   bc2aa:	f100 0710 	add.w	r7, r0, #16
   bc2ae:	4629      	mov	r1, r5
   bc2b0:	42b1      	cmp	r1, r6
   bc2b2:	d334      	bcc.n	bc31e <rshift+0x96>
   bc2b4:	1a9b      	subs	r3, r3, r2
   bc2b6:	009b      	lsls	r3, r3, #2
   bc2b8:	1eea      	subs	r2, r5, #3
   bc2ba:	4296      	cmp	r6, r2
   bc2bc:	bf38      	it	cc
   bc2be:	2300      	movcc	r3, #0
   bc2c0:	4423      	add	r3, r4
   bc2c2:	e015      	b.n	bc2f0 <rshift+0x68>
   bc2c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bc2c8:	f1c1 0820 	rsb	r8, r1, #32
   bc2cc:	40cf      	lsrs	r7, r1
   bc2ce:	f105 0e04 	add.w	lr, r5, #4
   bc2d2:	46a1      	mov	r9, r4
   bc2d4:	4576      	cmp	r6, lr
   bc2d6:	46f4      	mov	ip, lr
   bc2d8:	d815      	bhi.n	bc306 <rshift+0x7e>
   bc2da:	1a9a      	subs	r2, r3, r2
   bc2dc:	0092      	lsls	r2, r2, #2
   bc2de:	3a04      	subs	r2, #4
   bc2e0:	3501      	adds	r5, #1
   bc2e2:	42ae      	cmp	r6, r5
   bc2e4:	bf38      	it	cc
   bc2e6:	2200      	movcc	r2, #0
   bc2e8:	18a3      	adds	r3, r4, r2
   bc2ea:	50a7      	str	r7, [r4, r2]
   bc2ec:	b107      	cbz	r7, bc2f0 <rshift+0x68>
   bc2ee:	3304      	adds	r3, #4
   bc2f0:	1b1a      	subs	r2, r3, r4
   bc2f2:	42a3      	cmp	r3, r4
   bc2f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bc2f8:	bf08      	it	eq
   bc2fa:	2300      	moveq	r3, #0
   bc2fc:	6102      	str	r2, [r0, #16]
   bc2fe:	bf08      	it	eq
   bc300:	6143      	streq	r3, [r0, #20]
   bc302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc306:	f8dc c000 	ldr.w	ip, [ip]
   bc30a:	fa0c fc08 	lsl.w	ip, ip, r8
   bc30e:	ea4c 0707 	orr.w	r7, ip, r7
   bc312:	f849 7b04 	str.w	r7, [r9], #4
   bc316:	f85e 7b04 	ldr.w	r7, [lr], #4
   bc31a:	40cf      	lsrs	r7, r1
   bc31c:	e7da      	b.n	bc2d4 <rshift+0x4c>
   bc31e:	f851 cb04 	ldr.w	ip, [r1], #4
   bc322:	f847 cf04 	str.w	ip, [r7, #4]!
   bc326:	e7c3      	b.n	bc2b0 <rshift+0x28>
   bc328:	4623      	mov	r3, r4
   bc32a:	e7e1      	b.n	bc2f0 <rshift+0x68>

000bc32c <__hexdig_fun>:
   bc32c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bc330:	2b09      	cmp	r3, #9
   bc332:	d802      	bhi.n	bc33a <__hexdig_fun+0xe>
   bc334:	3820      	subs	r0, #32
   bc336:	b2c0      	uxtb	r0, r0
   bc338:	4770      	bx	lr
   bc33a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bc33e:	2b05      	cmp	r3, #5
   bc340:	d801      	bhi.n	bc346 <__hexdig_fun+0x1a>
   bc342:	3847      	subs	r0, #71	; 0x47
   bc344:	e7f7      	b.n	bc336 <__hexdig_fun+0xa>
   bc346:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bc34a:	2b05      	cmp	r3, #5
   bc34c:	d801      	bhi.n	bc352 <__hexdig_fun+0x26>
   bc34e:	3827      	subs	r0, #39	; 0x27
   bc350:	e7f1      	b.n	bc336 <__hexdig_fun+0xa>
   bc352:	2000      	movs	r0, #0
   bc354:	4770      	bx	lr
	...

000bc358 <__gethex>:
   bc358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc35c:	ed2d 8b02 	vpush	{d8}
   bc360:	b089      	sub	sp, #36	; 0x24
   bc362:	ee08 0a10 	vmov	s16, r0
   bc366:	9304      	str	r3, [sp, #16]
   bc368:	4bb4      	ldr	r3, [pc, #720]	; (bc63c <__gethex+0x2e4>)
   bc36a:	681b      	ldr	r3, [r3, #0]
   bc36c:	9301      	str	r3, [sp, #4]
   bc36e:	4618      	mov	r0, r3
   bc370:	468b      	mov	fp, r1
   bc372:	4690      	mov	r8, r2
   bc374:	f7fe ffde 	bl	bb334 <strlen>
   bc378:	9b01      	ldr	r3, [sp, #4]
   bc37a:	f8db 2000 	ldr.w	r2, [fp]
   bc37e:	4403      	add	r3, r0
   bc380:	4682      	mov	sl, r0
   bc382:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bc386:	9305      	str	r3, [sp, #20]
   bc388:	1c93      	adds	r3, r2, #2
   bc38a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bc38e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bc392:	32fe      	adds	r2, #254	; 0xfe
   bc394:	18d1      	adds	r1, r2, r3
   bc396:	461f      	mov	r7, r3
   bc398:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc39c:	9100      	str	r1, [sp, #0]
   bc39e:	2830      	cmp	r0, #48	; 0x30
   bc3a0:	d0f8      	beq.n	bc394 <__gethex+0x3c>
   bc3a2:	f7ff ffc3 	bl	bc32c <__hexdig_fun>
   bc3a6:	4604      	mov	r4, r0
   bc3a8:	2800      	cmp	r0, #0
   bc3aa:	d13a      	bne.n	bc422 <__gethex+0xca>
   bc3ac:	9901      	ldr	r1, [sp, #4]
   bc3ae:	4652      	mov	r2, sl
   bc3b0:	4638      	mov	r0, r7
   bc3b2:	f7fe ffc7 	bl	bb344 <strncmp>
   bc3b6:	4605      	mov	r5, r0
   bc3b8:	2800      	cmp	r0, #0
   bc3ba:	d168      	bne.n	bc48e <__gethex+0x136>
   bc3bc:	f817 000a 	ldrb.w	r0, [r7, sl]
   bc3c0:	eb07 060a 	add.w	r6, r7, sl
   bc3c4:	f7ff ffb2 	bl	bc32c <__hexdig_fun>
   bc3c8:	2800      	cmp	r0, #0
   bc3ca:	d062      	beq.n	bc492 <__gethex+0x13a>
   bc3cc:	4633      	mov	r3, r6
   bc3ce:	7818      	ldrb	r0, [r3, #0]
   bc3d0:	2830      	cmp	r0, #48	; 0x30
   bc3d2:	461f      	mov	r7, r3
   bc3d4:	f103 0301 	add.w	r3, r3, #1
   bc3d8:	d0f9      	beq.n	bc3ce <__gethex+0x76>
   bc3da:	f7ff ffa7 	bl	bc32c <__hexdig_fun>
   bc3de:	2301      	movs	r3, #1
   bc3e0:	fab0 f480 	clz	r4, r0
   bc3e4:	0964      	lsrs	r4, r4, #5
   bc3e6:	4635      	mov	r5, r6
   bc3e8:	9300      	str	r3, [sp, #0]
   bc3ea:	463a      	mov	r2, r7
   bc3ec:	4616      	mov	r6, r2
   bc3ee:	3201      	adds	r2, #1
   bc3f0:	7830      	ldrb	r0, [r6, #0]
   bc3f2:	f7ff ff9b 	bl	bc32c <__hexdig_fun>
   bc3f6:	2800      	cmp	r0, #0
   bc3f8:	d1f8      	bne.n	bc3ec <__gethex+0x94>
   bc3fa:	9901      	ldr	r1, [sp, #4]
   bc3fc:	4652      	mov	r2, sl
   bc3fe:	4630      	mov	r0, r6
   bc400:	f7fe ffa0 	bl	bb344 <strncmp>
   bc404:	b980      	cbnz	r0, bc428 <__gethex+0xd0>
   bc406:	b94d      	cbnz	r5, bc41c <__gethex+0xc4>
   bc408:	eb06 050a 	add.w	r5, r6, sl
   bc40c:	462a      	mov	r2, r5
   bc40e:	4616      	mov	r6, r2
   bc410:	3201      	adds	r2, #1
   bc412:	7830      	ldrb	r0, [r6, #0]
   bc414:	f7ff ff8a 	bl	bc32c <__hexdig_fun>
   bc418:	2800      	cmp	r0, #0
   bc41a:	d1f8      	bne.n	bc40e <__gethex+0xb6>
   bc41c:	1bad      	subs	r5, r5, r6
   bc41e:	00ad      	lsls	r5, r5, #2
   bc420:	e004      	b.n	bc42c <__gethex+0xd4>
   bc422:	2400      	movs	r4, #0
   bc424:	4625      	mov	r5, r4
   bc426:	e7e0      	b.n	bc3ea <__gethex+0x92>
   bc428:	2d00      	cmp	r5, #0
   bc42a:	d1f7      	bne.n	bc41c <__gethex+0xc4>
   bc42c:	7833      	ldrb	r3, [r6, #0]
   bc42e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc432:	2b50      	cmp	r3, #80	; 0x50
   bc434:	d13b      	bne.n	bc4ae <__gethex+0x156>
   bc436:	7873      	ldrb	r3, [r6, #1]
   bc438:	2b2b      	cmp	r3, #43	; 0x2b
   bc43a:	d02c      	beq.n	bc496 <__gethex+0x13e>
   bc43c:	2b2d      	cmp	r3, #45	; 0x2d
   bc43e:	d02e      	beq.n	bc49e <__gethex+0x146>
   bc440:	1c71      	adds	r1, r6, #1
   bc442:	f04f 0900 	mov.w	r9, #0
   bc446:	7808      	ldrb	r0, [r1, #0]
   bc448:	f7ff ff70 	bl	bc32c <__hexdig_fun>
   bc44c:	1e43      	subs	r3, r0, #1
   bc44e:	b2db      	uxtb	r3, r3
   bc450:	2b18      	cmp	r3, #24
   bc452:	d82c      	bhi.n	bc4ae <__gethex+0x156>
   bc454:	f1a0 0210 	sub.w	r2, r0, #16
   bc458:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bc45c:	f7ff ff66 	bl	bc32c <__hexdig_fun>
   bc460:	1e43      	subs	r3, r0, #1
   bc462:	b2db      	uxtb	r3, r3
   bc464:	2b18      	cmp	r3, #24
   bc466:	d91d      	bls.n	bc4a4 <__gethex+0x14c>
   bc468:	f1b9 0f00 	cmp.w	r9, #0
   bc46c:	d000      	beq.n	bc470 <__gethex+0x118>
   bc46e:	4252      	negs	r2, r2
   bc470:	4415      	add	r5, r2
   bc472:	f8cb 1000 	str.w	r1, [fp]
   bc476:	b1e4      	cbz	r4, bc4b2 <__gethex+0x15a>
   bc478:	9b00      	ldr	r3, [sp, #0]
   bc47a:	2b00      	cmp	r3, #0
   bc47c:	bf14      	ite	ne
   bc47e:	2700      	movne	r7, #0
   bc480:	2706      	moveq	r7, #6
   bc482:	4638      	mov	r0, r7
   bc484:	b009      	add	sp, #36	; 0x24
   bc486:	ecbd 8b02 	vpop	{d8}
   bc48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc48e:	463e      	mov	r6, r7
   bc490:	4625      	mov	r5, r4
   bc492:	2401      	movs	r4, #1
   bc494:	e7ca      	b.n	bc42c <__gethex+0xd4>
   bc496:	f04f 0900 	mov.w	r9, #0
   bc49a:	1cb1      	adds	r1, r6, #2
   bc49c:	e7d3      	b.n	bc446 <__gethex+0xee>
   bc49e:	f04f 0901 	mov.w	r9, #1
   bc4a2:	e7fa      	b.n	bc49a <__gethex+0x142>
   bc4a4:	230a      	movs	r3, #10
   bc4a6:	fb03 0202 	mla	r2, r3, r2, r0
   bc4aa:	3a10      	subs	r2, #16
   bc4ac:	e7d4      	b.n	bc458 <__gethex+0x100>
   bc4ae:	4631      	mov	r1, r6
   bc4b0:	e7df      	b.n	bc472 <__gethex+0x11a>
   bc4b2:	1bf3      	subs	r3, r6, r7
   bc4b4:	3b01      	subs	r3, #1
   bc4b6:	4621      	mov	r1, r4
   bc4b8:	2b07      	cmp	r3, #7
   bc4ba:	dc0b      	bgt.n	bc4d4 <__gethex+0x17c>
   bc4bc:	ee18 0a10 	vmov	r0, s16
   bc4c0:	f000 fa68 	bl	bc994 <_Balloc>
   bc4c4:	4604      	mov	r4, r0
   bc4c6:	b940      	cbnz	r0, bc4da <__gethex+0x182>
   bc4c8:	4b5d      	ldr	r3, [pc, #372]	; (bc640 <__gethex+0x2e8>)
   bc4ca:	4602      	mov	r2, r0
   bc4cc:	21de      	movs	r1, #222	; 0xde
   bc4ce:	485d      	ldr	r0, [pc, #372]	; (bc644 <__gethex+0x2ec>)
   bc4d0:	f7fb fc22 	bl	b7d18 <__assert_func>
   bc4d4:	3101      	adds	r1, #1
   bc4d6:	105b      	asrs	r3, r3, #1
   bc4d8:	e7ee      	b.n	bc4b8 <__gethex+0x160>
   bc4da:	f100 0914 	add.w	r9, r0, #20
   bc4de:	f04f 0b00 	mov.w	fp, #0
   bc4e2:	f1ca 0301 	rsb	r3, sl, #1
   bc4e6:	f8cd 9008 	str.w	r9, [sp, #8]
   bc4ea:	f8cd b000 	str.w	fp, [sp]
   bc4ee:	9306      	str	r3, [sp, #24]
   bc4f0:	42b7      	cmp	r7, r6
   bc4f2:	d340      	bcc.n	bc576 <__gethex+0x21e>
   bc4f4:	9802      	ldr	r0, [sp, #8]
   bc4f6:	9b00      	ldr	r3, [sp, #0]
   bc4f8:	f840 3b04 	str.w	r3, [r0], #4
   bc4fc:	eba0 0009 	sub.w	r0, r0, r9
   bc500:	1080      	asrs	r0, r0, #2
   bc502:	0146      	lsls	r6, r0, #5
   bc504:	6120      	str	r0, [r4, #16]
   bc506:	4618      	mov	r0, r3
   bc508:	f000 fb36 	bl	bcb78 <__hi0bits>
   bc50c:	1a30      	subs	r0, r6, r0
   bc50e:	f8d8 6000 	ldr.w	r6, [r8]
   bc512:	42b0      	cmp	r0, r6
   bc514:	dd63      	ble.n	bc5de <__gethex+0x286>
   bc516:	1b87      	subs	r7, r0, r6
   bc518:	4639      	mov	r1, r7
   bc51a:	4620      	mov	r0, r4
   bc51c:	f000 feda 	bl	bd2d4 <__any_on>
   bc520:	4682      	mov	sl, r0
   bc522:	b1a8      	cbz	r0, bc550 <__gethex+0x1f8>
   bc524:	1e7b      	subs	r3, r7, #1
   bc526:	1159      	asrs	r1, r3, #5
   bc528:	f003 021f 	and.w	r2, r3, #31
   bc52c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bc530:	f04f 0a01 	mov.w	sl, #1
   bc534:	fa0a f202 	lsl.w	r2, sl, r2
   bc538:	420a      	tst	r2, r1
   bc53a:	d009      	beq.n	bc550 <__gethex+0x1f8>
   bc53c:	4553      	cmp	r3, sl
   bc53e:	dd05      	ble.n	bc54c <__gethex+0x1f4>
   bc540:	1eb9      	subs	r1, r7, #2
   bc542:	4620      	mov	r0, r4
   bc544:	f000 fec6 	bl	bd2d4 <__any_on>
   bc548:	2800      	cmp	r0, #0
   bc54a:	d145      	bne.n	bc5d8 <__gethex+0x280>
   bc54c:	f04f 0a02 	mov.w	sl, #2
   bc550:	4639      	mov	r1, r7
   bc552:	4620      	mov	r0, r4
   bc554:	f7ff fe98 	bl	bc288 <rshift>
   bc558:	443d      	add	r5, r7
   bc55a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc55e:	42ab      	cmp	r3, r5
   bc560:	da4c      	bge.n	bc5fc <__gethex+0x2a4>
   bc562:	ee18 0a10 	vmov	r0, s16
   bc566:	4621      	mov	r1, r4
   bc568:	f000 fa54 	bl	bca14 <_Bfree>
   bc56c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc56e:	2300      	movs	r3, #0
   bc570:	6013      	str	r3, [r2, #0]
   bc572:	27a3      	movs	r7, #163	; 0xa3
   bc574:	e785      	b.n	bc482 <__gethex+0x12a>
   bc576:	1e73      	subs	r3, r6, #1
   bc578:	9a05      	ldr	r2, [sp, #20]
   bc57a:	9303      	str	r3, [sp, #12]
   bc57c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bc580:	4293      	cmp	r3, r2
   bc582:	d019      	beq.n	bc5b8 <__gethex+0x260>
   bc584:	f1bb 0f20 	cmp.w	fp, #32
   bc588:	d107      	bne.n	bc59a <__gethex+0x242>
   bc58a:	9b02      	ldr	r3, [sp, #8]
   bc58c:	9a00      	ldr	r2, [sp, #0]
   bc58e:	f843 2b04 	str.w	r2, [r3], #4
   bc592:	9302      	str	r3, [sp, #8]
   bc594:	2300      	movs	r3, #0
   bc596:	9300      	str	r3, [sp, #0]
   bc598:	469b      	mov	fp, r3
   bc59a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bc59e:	f7ff fec5 	bl	bc32c <__hexdig_fun>
   bc5a2:	9b00      	ldr	r3, [sp, #0]
   bc5a4:	f000 000f 	and.w	r0, r0, #15
   bc5a8:	fa00 f00b 	lsl.w	r0, r0, fp
   bc5ac:	4303      	orrs	r3, r0
   bc5ae:	9300      	str	r3, [sp, #0]
   bc5b0:	f10b 0b04 	add.w	fp, fp, #4
   bc5b4:	9b03      	ldr	r3, [sp, #12]
   bc5b6:	e00d      	b.n	bc5d4 <__gethex+0x27c>
   bc5b8:	9b03      	ldr	r3, [sp, #12]
   bc5ba:	9a06      	ldr	r2, [sp, #24]
   bc5bc:	4413      	add	r3, r2
   bc5be:	42bb      	cmp	r3, r7
   bc5c0:	d3e0      	bcc.n	bc584 <__gethex+0x22c>
   bc5c2:	4618      	mov	r0, r3
   bc5c4:	9901      	ldr	r1, [sp, #4]
   bc5c6:	9307      	str	r3, [sp, #28]
   bc5c8:	4652      	mov	r2, sl
   bc5ca:	f7fe febb 	bl	bb344 <strncmp>
   bc5ce:	9b07      	ldr	r3, [sp, #28]
   bc5d0:	2800      	cmp	r0, #0
   bc5d2:	d1d7      	bne.n	bc584 <__gethex+0x22c>
   bc5d4:	461e      	mov	r6, r3
   bc5d6:	e78b      	b.n	bc4f0 <__gethex+0x198>
   bc5d8:	f04f 0a03 	mov.w	sl, #3
   bc5dc:	e7b8      	b.n	bc550 <__gethex+0x1f8>
   bc5de:	da0a      	bge.n	bc5f6 <__gethex+0x29e>
   bc5e0:	1a37      	subs	r7, r6, r0
   bc5e2:	4621      	mov	r1, r4
   bc5e4:	ee18 0a10 	vmov	r0, s16
   bc5e8:	463a      	mov	r2, r7
   bc5ea:	f000 fc2f 	bl	bce4c <__lshift>
   bc5ee:	1bed      	subs	r5, r5, r7
   bc5f0:	4604      	mov	r4, r0
   bc5f2:	f100 0914 	add.w	r9, r0, #20
   bc5f6:	f04f 0a00 	mov.w	sl, #0
   bc5fa:	e7ae      	b.n	bc55a <__gethex+0x202>
   bc5fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bc600:	42a8      	cmp	r0, r5
   bc602:	dd72      	ble.n	bc6ea <__gethex+0x392>
   bc604:	1b45      	subs	r5, r0, r5
   bc606:	42ae      	cmp	r6, r5
   bc608:	dc36      	bgt.n	bc678 <__gethex+0x320>
   bc60a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc60e:	2b02      	cmp	r3, #2
   bc610:	d02a      	beq.n	bc668 <__gethex+0x310>
   bc612:	2b03      	cmp	r3, #3
   bc614:	d02c      	beq.n	bc670 <__gethex+0x318>
   bc616:	2b01      	cmp	r3, #1
   bc618:	d11c      	bne.n	bc654 <__gethex+0x2fc>
   bc61a:	42ae      	cmp	r6, r5
   bc61c:	d11a      	bne.n	bc654 <__gethex+0x2fc>
   bc61e:	2e01      	cmp	r6, #1
   bc620:	d112      	bne.n	bc648 <__gethex+0x2f0>
   bc622:	9a04      	ldr	r2, [sp, #16]
   bc624:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bc628:	6013      	str	r3, [r2, #0]
   bc62a:	2301      	movs	r3, #1
   bc62c:	6123      	str	r3, [r4, #16]
   bc62e:	f8c9 3000 	str.w	r3, [r9]
   bc632:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc634:	2762      	movs	r7, #98	; 0x62
   bc636:	601c      	str	r4, [r3, #0]
   bc638:	e723      	b.n	bc482 <__gethex+0x12a>
   bc63a:	bf00      	nop
   bc63c:	000bdf2c 	.word	0x000bdf2c
   bc640:	000bdeb9 	.word	0x000bdeb9
   bc644:	000bdeca 	.word	0x000bdeca
   bc648:	1e71      	subs	r1, r6, #1
   bc64a:	4620      	mov	r0, r4
   bc64c:	f000 fe42 	bl	bd2d4 <__any_on>
   bc650:	2800      	cmp	r0, #0
   bc652:	d1e6      	bne.n	bc622 <__gethex+0x2ca>
   bc654:	ee18 0a10 	vmov	r0, s16
   bc658:	4621      	mov	r1, r4
   bc65a:	f000 f9db 	bl	bca14 <_Bfree>
   bc65e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc660:	2300      	movs	r3, #0
   bc662:	6013      	str	r3, [r2, #0]
   bc664:	2750      	movs	r7, #80	; 0x50
   bc666:	e70c      	b.n	bc482 <__gethex+0x12a>
   bc668:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc66a:	2b00      	cmp	r3, #0
   bc66c:	d1f2      	bne.n	bc654 <__gethex+0x2fc>
   bc66e:	e7d8      	b.n	bc622 <__gethex+0x2ca>
   bc670:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc672:	2b00      	cmp	r3, #0
   bc674:	d1d5      	bne.n	bc622 <__gethex+0x2ca>
   bc676:	e7ed      	b.n	bc654 <__gethex+0x2fc>
   bc678:	1e6f      	subs	r7, r5, #1
   bc67a:	f1ba 0f00 	cmp.w	sl, #0
   bc67e:	d131      	bne.n	bc6e4 <__gethex+0x38c>
   bc680:	b127      	cbz	r7, bc68c <__gethex+0x334>
   bc682:	4639      	mov	r1, r7
   bc684:	4620      	mov	r0, r4
   bc686:	f000 fe25 	bl	bd2d4 <__any_on>
   bc68a:	4682      	mov	sl, r0
   bc68c:	117b      	asrs	r3, r7, #5
   bc68e:	2101      	movs	r1, #1
   bc690:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bc694:	f007 071f 	and.w	r7, r7, #31
   bc698:	fa01 f707 	lsl.w	r7, r1, r7
   bc69c:	421f      	tst	r7, r3
   bc69e:	4629      	mov	r1, r5
   bc6a0:	4620      	mov	r0, r4
   bc6a2:	bf18      	it	ne
   bc6a4:	f04a 0a02 	orrne.w	sl, sl, #2
   bc6a8:	1b76      	subs	r6, r6, r5
   bc6aa:	f7ff fded 	bl	bc288 <rshift>
   bc6ae:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bc6b2:	2702      	movs	r7, #2
   bc6b4:	f1ba 0f00 	cmp.w	sl, #0
   bc6b8:	d048      	beq.n	bc74c <__gethex+0x3f4>
   bc6ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc6be:	2b02      	cmp	r3, #2
   bc6c0:	d015      	beq.n	bc6ee <__gethex+0x396>
   bc6c2:	2b03      	cmp	r3, #3
   bc6c4:	d017      	beq.n	bc6f6 <__gethex+0x39e>
   bc6c6:	2b01      	cmp	r3, #1
   bc6c8:	d109      	bne.n	bc6de <__gethex+0x386>
   bc6ca:	f01a 0f02 	tst.w	sl, #2
   bc6ce:	d006      	beq.n	bc6de <__gethex+0x386>
   bc6d0:	f8d9 0000 	ldr.w	r0, [r9]
   bc6d4:	ea4a 0a00 	orr.w	sl, sl, r0
   bc6d8:	f01a 0f01 	tst.w	sl, #1
   bc6dc:	d10e      	bne.n	bc6fc <__gethex+0x3a4>
   bc6de:	f047 0710 	orr.w	r7, r7, #16
   bc6e2:	e033      	b.n	bc74c <__gethex+0x3f4>
   bc6e4:	f04f 0a01 	mov.w	sl, #1
   bc6e8:	e7d0      	b.n	bc68c <__gethex+0x334>
   bc6ea:	2701      	movs	r7, #1
   bc6ec:	e7e2      	b.n	bc6b4 <__gethex+0x35c>
   bc6ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc6f0:	f1c3 0301 	rsb	r3, r3, #1
   bc6f4:	9315      	str	r3, [sp, #84]	; 0x54
   bc6f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc6f8:	2b00      	cmp	r3, #0
   bc6fa:	d0f0      	beq.n	bc6de <__gethex+0x386>
   bc6fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bc700:	f104 0314 	add.w	r3, r4, #20
   bc704:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bc708:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bc70c:	f04f 0c00 	mov.w	ip, #0
   bc710:	4618      	mov	r0, r3
   bc712:	f853 2b04 	ldr.w	r2, [r3], #4
   bc716:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bc71a:	d01c      	beq.n	bc756 <__gethex+0x3fe>
   bc71c:	3201      	adds	r2, #1
   bc71e:	6002      	str	r2, [r0, #0]
   bc720:	2f02      	cmp	r7, #2
   bc722:	f104 0314 	add.w	r3, r4, #20
   bc726:	d13f      	bne.n	bc7a8 <__gethex+0x450>
   bc728:	f8d8 2000 	ldr.w	r2, [r8]
   bc72c:	3a01      	subs	r2, #1
   bc72e:	42b2      	cmp	r2, r6
   bc730:	d10a      	bne.n	bc748 <__gethex+0x3f0>
   bc732:	1171      	asrs	r1, r6, #5
   bc734:	2201      	movs	r2, #1
   bc736:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bc73a:	f006 061f 	and.w	r6, r6, #31
   bc73e:	fa02 f606 	lsl.w	r6, r2, r6
   bc742:	421e      	tst	r6, r3
   bc744:	bf18      	it	ne
   bc746:	4617      	movne	r7, r2
   bc748:	f047 0720 	orr.w	r7, r7, #32
   bc74c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc74e:	601c      	str	r4, [r3, #0]
   bc750:	9b04      	ldr	r3, [sp, #16]
   bc752:	601d      	str	r5, [r3, #0]
   bc754:	e695      	b.n	bc482 <__gethex+0x12a>
   bc756:	4299      	cmp	r1, r3
   bc758:	f843 cc04 	str.w	ip, [r3, #-4]
   bc75c:	d8d8      	bhi.n	bc710 <__gethex+0x3b8>
   bc75e:	68a3      	ldr	r3, [r4, #8]
   bc760:	459b      	cmp	fp, r3
   bc762:	db19      	blt.n	bc798 <__gethex+0x440>
   bc764:	6861      	ldr	r1, [r4, #4]
   bc766:	ee18 0a10 	vmov	r0, s16
   bc76a:	3101      	adds	r1, #1
   bc76c:	f000 f912 	bl	bc994 <_Balloc>
   bc770:	4681      	mov	r9, r0
   bc772:	b918      	cbnz	r0, bc77c <__gethex+0x424>
   bc774:	4b1a      	ldr	r3, [pc, #104]	; (bc7e0 <__gethex+0x488>)
   bc776:	4602      	mov	r2, r0
   bc778:	2184      	movs	r1, #132	; 0x84
   bc77a:	e6a8      	b.n	bc4ce <__gethex+0x176>
   bc77c:	6922      	ldr	r2, [r4, #16]
   bc77e:	3202      	adds	r2, #2
   bc780:	f104 010c 	add.w	r1, r4, #12
   bc784:	0092      	lsls	r2, r2, #2
   bc786:	300c      	adds	r0, #12
   bc788:	f7fe fd64 	bl	bb254 <memcpy>
   bc78c:	4621      	mov	r1, r4
   bc78e:	ee18 0a10 	vmov	r0, s16
   bc792:	f000 f93f 	bl	bca14 <_Bfree>
   bc796:	464c      	mov	r4, r9
   bc798:	6923      	ldr	r3, [r4, #16]
   bc79a:	1c5a      	adds	r2, r3, #1
   bc79c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bc7a0:	6122      	str	r2, [r4, #16]
   bc7a2:	2201      	movs	r2, #1
   bc7a4:	615a      	str	r2, [r3, #20]
   bc7a6:	e7bb      	b.n	bc720 <__gethex+0x3c8>
   bc7a8:	6922      	ldr	r2, [r4, #16]
   bc7aa:	455a      	cmp	r2, fp
   bc7ac:	dd0b      	ble.n	bc7c6 <__gethex+0x46e>
   bc7ae:	2101      	movs	r1, #1
   bc7b0:	4620      	mov	r0, r4
   bc7b2:	f7ff fd69 	bl	bc288 <rshift>
   bc7b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc7ba:	3501      	adds	r5, #1
   bc7bc:	42ab      	cmp	r3, r5
   bc7be:	f6ff aed0 	blt.w	bc562 <__gethex+0x20a>
   bc7c2:	2701      	movs	r7, #1
   bc7c4:	e7c0      	b.n	bc748 <__gethex+0x3f0>
   bc7c6:	f016 061f 	ands.w	r6, r6, #31
   bc7ca:	d0fa      	beq.n	bc7c2 <__gethex+0x46a>
   bc7cc:	4453      	add	r3, sl
   bc7ce:	f1c6 0620 	rsb	r6, r6, #32
   bc7d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bc7d6:	f000 f9cf 	bl	bcb78 <__hi0bits>
   bc7da:	42b0      	cmp	r0, r6
   bc7dc:	dbe7      	blt.n	bc7ae <__gethex+0x456>
   bc7de:	e7f0      	b.n	bc7c2 <__gethex+0x46a>
   bc7e0:	000bdeb9 	.word	0x000bdeb9

000bc7e4 <L_shift>:
   bc7e4:	f1c2 0208 	rsb	r2, r2, #8
   bc7e8:	0092      	lsls	r2, r2, #2
   bc7ea:	b570      	push	{r4, r5, r6, lr}
   bc7ec:	f1c2 0620 	rsb	r6, r2, #32
   bc7f0:	6843      	ldr	r3, [r0, #4]
   bc7f2:	6804      	ldr	r4, [r0, #0]
   bc7f4:	fa03 f506 	lsl.w	r5, r3, r6
   bc7f8:	432c      	orrs	r4, r5
   bc7fa:	40d3      	lsrs	r3, r2
   bc7fc:	6004      	str	r4, [r0, #0]
   bc7fe:	f840 3f04 	str.w	r3, [r0, #4]!
   bc802:	4288      	cmp	r0, r1
   bc804:	d3f4      	bcc.n	bc7f0 <L_shift+0xc>
   bc806:	bd70      	pop	{r4, r5, r6, pc}

000bc808 <__match>:
   bc808:	b530      	push	{r4, r5, lr}
   bc80a:	6803      	ldr	r3, [r0, #0]
   bc80c:	3301      	adds	r3, #1
   bc80e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc812:	b914      	cbnz	r4, bc81a <__match+0x12>
   bc814:	6003      	str	r3, [r0, #0]
   bc816:	2001      	movs	r0, #1
   bc818:	bd30      	pop	{r4, r5, pc}
   bc81a:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc81e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bc822:	2d19      	cmp	r5, #25
   bc824:	bf98      	it	ls
   bc826:	3220      	addls	r2, #32
   bc828:	42a2      	cmp	r2, r4
   bc82a:	d0f0      	beq.n	bc80e <__match+0x6>
   bc82c:	2000      	movs	r0, #0
   bc82e:	e7f3      	b.n	bc818 <__match+0x10>

000bc830 <__hexnan>:
   bc830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc834:	680b      	ldr	r3, [r1, #0]
   bc836:	115e      	asrs	r6, r3, #5
   bc838:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bc83c:	f013 031f 	ands.w	r3, r3, #31
   bc840:	b087      	sub	sp, #28
   bc842:	bf18      	it	ne
   bc844:	3604      	addne	r6, #4
   bc846:	2500      	movs	r5, #0
   bc848:	1f37      	subs	r7, r6, #4
   bc84a:	4690      	mov	r8, r2
   bc84c:	6802      	ldr	r2, [r0, #0]
   bc84e:	9301      	str	r3, [sp, #4]
   bc850:	4682      	mov	sl, r0
   bc852:	f846 5c04 	str.w	r5, [r6, #-4]
   bc856:	46b9      	mov	r9, r7
   bc858:	463c      	mov	r4, r7
   bc85a:	9502      	str	r5, [sp, #8]
   bc85c:	46ab      	mov	fp, r5
   bc85e:	7851      	ldrb	r1, [r2, #1]
   bc860:	1c53      	adds	r3, r2, #1
   bc862:	9303      	str	r3, [sp, #12]
   bc864:	b341      	cbz	r1, bc8b8 <__hexnan+0x88>
   bc866:	4608      	mov	r0, r1
   bc868:	9205      	str	r2, [sp, #20]
   bc86a:	9104      	str	r1, [sp, #16]
   bc86c:	f7ff fd5e 	bl	bc32c <__hexdig_fun>
   bc870:	2800      	cmp	r0, #0
   bc872:	d14f      	bne.n	bc914 <__hexnan+0xe4>
   bc874:	9904      	ldr	r1, [sp, #16]
   bc876:	9a05      	ldr	r2, [sp, #20]
   bc878:	2920      	cmp	r1, #32
   bc87a:	d818      	bhi.n	bc8ae <__hexnan+0x7e>
   bc87c:	9b02      	ldr	r3, [sp, #8]
   bc87e:	459b      	cmp	fp, r3
   bc880:	dd13      	ble.n	bc8aa <__hexnan+0x7a>
   bc882:	454c      	cmp	r4, r9
   bc884:	d206      	bcs.n	bc894 <__hexnan+0x64>
   bc886:	2d07      	cmp	r5, #7
   bc888:	dc04      	bgt.n	bc894 <__hexnan+0x64>
   bc88a:	462a      	mov	r2, r5
   bc88c:	4649      	mov	r1, r9
   bc88e:	4620      	mov	r0, r4
   bc890:	f7ff ffa8 	bl	bc7e4 <L_shift>
   bc894:	4544      	cmp	r4, r8
   bc896:	d950      	bls.n	bc93a <__hexnan+0x10a>
   bc898:	2300      	movs	r3, #0
   bc89a:	f1a4 0904 	sub.w	r9, r4, #4
   bc89e:	f844 3c04 	str.w	r3, [r4, #-4]
   bc8a2:	f8cd b008 	str.w	fp, [sp, #8]
   bc8a6:	464c      	mov	r4, r9
   bc8a8:	461d      	mov	r5, r3
   bc8aa:	9a03      	ldr	r2, [sp, #12]
   bc8ac:	e7d7      	b.n	bc85e <__hexnan+0x2e>
   bc8ae:	2929      	cmp	r1, #41	; 0x29
   bc8b0:	d156      	bne.n	bc960 <__hexnan+0x130>
   bc8b2:	3202      	adds	r2, #2
   bc8b4:	f8ca 2000 	str.w	r2, [sl]
   bc8b8:	f1bb 0f00 	cmp.w	fp, #0
   bc8bc:	d050      	beq.n	bc960 <__hexnan+0x130>
   bc8be:	454c      	cmp	r4, r9
   bc8c0:	d206      	bcs.n	bc8d0 <__hexnan+0xa0>
   bc8c2:	2d07      	cmp	r5, #7
   bc8c4:	dc04      	bgt.n	bc8d0 <__hexnan+0xa0>
   bc8c6:	462a      	mov	r2, r5
   bc8c8:	4649      	mov	r1, r9
   bc8ca:	4620      	mov	r0, r4
   bc8cc:	f7ff ff8a 	bl	bc7e4 <L_shift>
   bc8d0:	4544      	cmp	r4, r8
   bc8d2:	d934      	bls.n	bc93e <__hexnan+0x10e>
   bc8d4:	f1a8 0204 	sub.w	r2, r8, #4
   bc8d8:	4623      	mov	r3, r4
   bc8da:	f853 1b04 	ldr.w	r1, [r3], #4
   bc8de:	f842 1f04 	str.w	r1, [r2, #4]!
   bc8e2:	429f      	cmp	r7, r3
   bc8e4:	d2f9      	bcs.n	bc8da <__hexnan+0xaa>
   bc8e6:	1b3b      	subs	r3, r7, r4
   bc8e8:	f023 0303 	bic.w	r3, r3, #3
   bc8ec:	3304      	adds	r3, #4
   bc8ee:	3401      	adds	r4, #1
   bc8f0:	3e03      	subs	r6, #3
   bc8f2:	42b4      	cmp	r4, r6
   bc8f4:	bf88      	it	hi
   bc8f6:	2304      	movhi	r3, #4
   bc8f8:	4443      	add	r3, r8
   bc8fa:	2200      	movs	r2, #0
   bc8fc:	f843 2b04 	str.w	r2, [r3], #4
   bc900:	429f      	cmp	r7, r3
   bc902:	d2fb      	bcs.n	bc8fc <__hexnan+0xcc>
   bc904:	683b      	ldr	r3, [r7, #0]
   bc906:	b91b      	cbnz	r3, bc910 <__hexnan+0xe0>
   bc908:	4547      	cmp	r7, r8
   bc90a:	d127      	bne.n	bc95c <__hexnan+0x12c>
   bc90c:	2301      	movs	r3, #1
   bc90e:	603b      	str	r3, [r7, #0]
   bc910:	2005      	movs	r0, #5
   bc912:	e026      	b.n	bc962 <__hexnan+0x132>
   bc914:	3501      	adds	r5, #1
   bc916:	2d08      	cmp	r5, #8
   bc918:	f10b 0b01 	add.w	fp, fp, #1
   bc91c:	dd06      	ble.n	bc92c <__hexnan+0xfc>
   bc91e:	4544      	cmp	r4, r8
   bc920:	d9c3      	bls.n	bc8aa <__hexnan+0x7a>
   bc922:	2300      	movs	r3, #0
   bc924:	f844 3c04 	str.w	r3, [r4, #-4]
   bc928:	2501      	movs	r5, #1
   bc92a:	3c04      	subs	r4, #4
   bc92c:	6822      	ldr	r2, [r4, #0]
   bc92e:	f000 000f 	and.w	r0, r0, #15
   bc932:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bc936:	6022      	str	r2, [r4, #0]
   bc938:	e7b7      	b.n	bc8aa <__hexnan+0x7a>
   bc93a:	2508      	movs	r5, #8
   bc93c:	e7b5      	b.n	bc8aa <__hexnan+0x7a>
   bc93e:	9b01      	ldr	r3, [sp, #4]
   bc940:	2b00      	cmp	r3, #0
   bc942:	d0df      	beq.n	bc904 <__hexnan+0xd4>
   bc944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc948:	f1c3 0320 	rsb	r3, r3, #32
   bc94c:	fa22 f303 	lsr.w	r3, r2, r3
   bc950:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bc954:	401a      	ands	r2, r3
   bc956:	f846 2c04 	str.w	r2, [r6, #-4]
   bc95a:	e7d3      	b.n	bc904 <__hexnan+0xd4>
   bc95c:	3f04      	subs	r7, #4
   bc95e:	e7d1      	b.n	bc904 <__hexnan+0xd4>
   bc960:	2004      	movs	r0, #4
   bc962:	b007      	add	sp, #28
   bc964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc968 <__retarget_lock_acquire_recursive>:
   bc968:	4770      	bx	lr

000bc96a <__retarget_lock_release>:
   bc96a:	4770      	bx	lr

000bc96c <__retarget_lock_release_recursive>:
   bc96c:	4770      	bx	lr

000bc96e <__ascii_mbtowc>:
   bc96e:	b082      	sub	sp, #8
   bc970:	b901      	cbnz	r1, bc974 <__ascii_mbtowc+0x6>
   bc972:	a901      	add	r1, sp, #4
   bc974:	b142      	cbz	r2, bc988 <__ascii_mbtowc+0x1a>
   bc976:	b14b      	cbz	r3, bc98c <__ascii_mbtowc+0x1e>
   bc978:	7813      	ldrb	r3, [r2, #0]
   bc97a:	600b      	str	r3, [r1, #0]
   bc97c:	7812      	ldrb	r2, [r2, #0]
   bc97e:	1e10      	subs	r0, r2, #0
   bc980:	bf18      	it	ne
   bc982:	2001      	movne	r0, #1
   bc984:	b002      	add	sp, #8
   bc986:	4770      	bx	lr
   bc988:	4610      	mov	r0, r2
   bc98a:	e7fb      	b.n	bc984 <__ascii_mbtowc+0x16>
   bc98c:	f06f 0001 	mvn.w	r0, #1
   bc990:	e7f8      	b.n	bc984 <__ascii_mbtowc+0x16>
	...

000bc994 <_Balloc>:
   bc994:	b570      	push	{r4, r5, r6, lr}
   bc996:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bc998:	4604      	mov	r4, r0
   bc99a:	460d      	mov	r5, r1
   bc99c:	b976      	cbnz	r6, bc9bc <_Balloc+0x28>
   bc99e:	2010      	movs	r0, #16
   bc9a0:	f7fb f97a 	bl	b7c98 <malloc>
   bc9a4:	4602      	mov	r2, r0
   bc9a6:	6260      	str	r0, [r4, #36]	; 0x24
   bc9a8:	b920      	cbnz	r0, bc9b4 <_Balloc+0x20>
   bc9aa:	4b18      	ldr	r3, [pc, #96]	; (bca0c <_Balloc+0x78>)
   bc9ac:	4818      	ldr	r0, [pc, #96]	; (bca10 <_Balloc+0x7c>)
   bc9ae:	2166      	movs	r1, #102	; 0x66
   bc9b0:	f7fb f9b2 	bl	b7d18 <__assert_func>
   bc9b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bc9b8:	6006      	str	r6, [r0, #0]
   bc9ba:	60c6      	str	r6, [r0, #12]
   bc9bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bc9be:	68f3      	ldr	r3, [r6, #12]
   bc9c0:	b183      	cbz	r3, bc9e4 <_Balloc+0x50>
   bc9c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc9c4:	68db      	ldr	r3, [r3, #12]
   bc9c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bc9ca:	b9b8      	cbnz	r0, bc9fc <_Balloc+0x68>
   bc9cc:	2101      	movs	r1, #1
   bc9ce:	fa01 f605 	lsl.w	r6, r1, r5
   bc9d2:	1d72      	adds	r2, r6, #5
   bc9d4:	0092      	lsls	r2, r2, #2
   bc9d6:	4620      	mov	r0, r4
   bc9d8:	f000 fc9d 	bl	bd316 <_calloc_r>
   bc9dc:	b160      	cbz	r0, bc9f8 <_Balloc+0x64>
   bc9de:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bc9e2:	e00e      	b.n	bca02 <_Balloc+0x6e>
   bc9e4:	2221      	movs	r2, #33	; 0x21
   bc9e6:	2104      	movs	r1, #4
   bc9e8:	4620      	mov	r0, r4
   bc9ea:	f000 fc94 	bl	bd316 <_calloc_r>
   bc9ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc9f0:	60f0      	str	r0, [r6, #12]
   bc9f2:	68db      	ldr	r3, [r3, #12]
   bc9f4:	2b00      	cmp	r3, #0
   bc9f6:	d1e4      	bne.n	bc9c2 <_Balloc+0x2e>
   bc9f8:	2000      	movs	r0, #0
   bc9fa:	bd70      	pop	{r4, r5, r6, pc}
   bc9fc:	6802      	ldr	r2, [r0, #0]
   bc9fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bca02:	2300      	movs	r3, #0
   bca04:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bca08:	e7f7      	b.n	bc9fa <_Balloc+0x66>
   bca0a:	bf00      	nop
   bca0c:	000bdce5 	.word	0x000bdce5
   bca10:	000bdf40 	.word	0x000bdf40

000bca14 <_Bfree>:
   bca14:	b570      	push	{r4, r5, r6, lr}
   bca16:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bca18:	4605      	mov	r5, r0
   bca1a:	460c      	mov	r4, r1
   bca1c:	b976      	cbnz	r6, bca3c <_Bfree+0x28>
   bca1e:	2010      	movs	r0, #16
   bca20:	f7fb f93a 	bl	b7c98 <malloc>
   bca24:	4602      	mov	r2, r0
   bca26:	6268      	str	r0, [r5, #36]	; 0x24
   bca28:	b920      	cbnz	r0, bca34 <_Bfree+0x20>
   bca2a:	4b09      	ldr	r3, [pc, #36]	; (bca50 <_Bfree+0x3c>)
   bca2c:	4809      	ldr	r0, [pc, #36]	; (bca54 <_Bfree+0x40>)
   bca2e:	218a      	movs	r1, #138	; 0x8a
   bca30:	f7fb f972 	bl	b7d18 <__assert_func>
   bca34:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bca38:	6006      	str	r6, [r0, #0]
   bca3a:	60c6      	str	r6, [r0, #12]
   bca3c:	b13c      	cbz	r4, bca4e <_Bfree+0x3a>
   bca3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bca40:	6862      	ldr	r2, [r4, #4]
   bca42:	68db      	ldr	r3, [r3, #12]
   bca44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bca48:	6021      	str	r1, [r4, #0]
   bca4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bca4e:	bd70      	pop	{r4, r5, r6, pc}
   bca50:	000bdce5 	.word	0x000bdce5
   bca54:	000bdf40 	.word	0x000bdf40

000bca58 <__multadd>:
   bca58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bca5c:	690d      	ldr	r5, [r1, #16]
   bca5e:	4607      	mov	r7, r0
   bca60:	460c      	mov	r4, r1
   bca62:	461e      	mov	r6, r3
   bca64:	f101 0c14 	add.w	ip, r1, #20
   bca68:	2000      	movs	r0, #0
   bca6a:	f8dc 3000 	ldr.w	r3, [ip]
   bca6e:	b299      	uxth	r1, r3
   bca70:	fb02 6101 	mla	r1, r2, r1, r6
   bca74:	0c1e      	lsrs	r6, r3, #16
   bca76:	0c0b      	lsrs	r3, r1, #16
   bca78:	fb02 3306 	mla	r3, r2, r6, r3
   bca7c:	b289      	uxth	r1, r1
   bca7e:	3001      	adds	r0, #1
   bca80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bca84:	4285      	cmp	r5, r0
   bca86:	f84c 1b04 	str.w	r1, [ip], #4
   bca8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bca8e:	dcec      	bgt.n	bca6a <__multadd+0x12>
   bca90:	b30e      	cbz	r6, bcad6 <__multadd+0x7e>
   bca92:	68a3      	ldr	r3, [r4, #8]
   bca94:	42ab      	cmp	r3, r5
   bca96:	dc19      	bgt.n	bcacc <__multadd+0x74>
   bca98:	6861      	ldr	r1, [r4, #4]
   bca9a:	4638      	mov	r0, r7
   bca9c:	3101      	adds	r1, #1
   bca9e:	f7ff ff79 	bl	bc994 <_Balloc>
   bcaa2:	4680      	mov	r8, r0
   bcaa4:	b928      	cbnz	r0, bcab2 <__multadd+0x5a>
   bcaa6:	4602      	mov	r2, r0
   bcaa8:	4b0c      	ldr	r3, [pc, #48]	; (bcadc <__multadd+0x84>)
   bcaaa:	480d      	ldr	r0, [pc, #52]	; (bcae0 <__multadd+0x88>)
   bcaac:	21b5      	movs	r1, #181	; 0xb5
   bcaae:	f7fb f933 	bl	b7d18 <__assert_func>
   bcab2:	6922      	ldr	r2, [r4, #16]
   bcab4:	3202      	adds	r2, #2
   bcab6:	f104 010c 	add.w	r1, r4, #12
   bcaba:	0092      	lsls	r2, r2, #2
   bcabc:	300c      	adds	r0, #12
   bcabe:	f7fe fbc9 	bl	bb254 <memcpy>
   bcac2:	4621      	mov	r1, r4
   bcac4:	4638      	mov	r0, r7
   bcac6:	f7ff ffa5 	bl	bca14 <_Bfree>
   bcaca:	4644      	mov	r4, r8
   bcacc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bcad0:	3501      	adds	r5, #1
   bcad2:	615e      	str	r6, [r3, #20]
   bcad4:	6125      	str	r5, [r4, #16]
   bcad6:	4620      	mov	r0, r4
   bcad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcadc:	000bdeb9 	.word	0x000bdeb9
   bcae0:	000bdf40 	.word	0x000bdf40

000bcae4 <__s2b>:
   bcae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcae8:	460c      	mov	r4, r1
   bcaea:	4615      	mov	r5, r2
   bcaec:	461f      	mov	r7, r3
   bcaee:	2209      	movs	r2, #9
   bcaf0:	3308      	adds	r3, #8
   bcaf2:	4606      	mov	r6, r0
   bcaf4:	fb93 f3f2 	sdiv	r3, r3, r2
   bcaf8:	2100      	movs	r1, #0
   bcafa:	2201      	movs	r2, #1
   bcafc:	429a      	cmp	r2, r3
   bcafe:	db09      	blt.n	bcb14 <__s2b+0x30>
   bcb00:	4630      	mov	r0, r6
   bcb02:	f7ff ff47 	bl	bc994 <_Balloc>
   bcb06:	b940      	cbnz	r0, bcb1a <__s2b+0x36>
   bcb08:	4602      	mov	r2, r0
   bcb0a:	4b19      	ldr	r3, [pc, #100]	; (bcb70 <__s2b+0x8c>)
   bcb0c:	4819      	ldr	r0, [pc, #100]	; (bcb74 <__s2b+0x90>)
   bcb0e:	21ce      	movs	r1, #206	; 0xce
   bcb10:	f7fb f902 	bl	b7d18 <__assert_func>
   bcb14:	0052      	lsls	r2, r2, #1
   bcb16:	3101      	adds	r1, #1
   bcb18:	e7f0      	b.n	bcafc <__s2b+0x18>
   bcb1a:	9b08      	ldr	r3, [sp, #32]
   bcb1c:	6143      	str	r3, [r0, #20]
   bcb1e:	2d09      	cmp	r5, #9
   bcb20:	f04f 0301 	mov.w	r3, #1
   bcb24:	6103      	str	r3, [r0, #16]
   bcb26:	dd16      	ble.n	bcb56 <__s2b+0x72>
   bcb28:	f104 0909 	add.w	r9, r4, #9
   bcb2c:	46c8      	mov	r8, r9
   bcb2e:	442c      	add	r4, r5
   bcb30:	f818 3b01 	ldrb.w	r3, [r8], #1
   bcb34:	4601      	mov	r1, r0
   bcb36:	3b30      	subs	r3, #48	; 0x30
   bcb38:	220a      	movs	r2, #10
   bcb3a:	4630      	mov	r0, r6
   bcb3c:	f7ff ff8c 	bl	bca58 <__multadd>
   bcb40:	45a0      	cmp	r8, r4
   bcb42:	d1f5      	bne.n	bcb30 <__s2b+0x4c>
   bcb44:	f1a5 0408 	sub.w	r4, r5, #8
   bcb48:	444c      	add	r4, r9
   bcb4a:	1b2d      	subs	r5, r5, r4
   bcb4c:	1963      	adds	r3, r4, r5
   bcb4e:	42bb      	cmp	r3, r7
   bcb50:	db04      	blt.n	bcb5c <__s2b+0x78>
   bcb52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bcb56:	340a      	adds	r4, #10
   bcb58:	2509      	movs	r5, #9
   bcb5a:	e7f6      	b.n	bcb4a <__s2b+0x66>
   bcb5c:	f814 3b01 	ldrb.w	r3, [r4], #1
   bcb60:	4601      	mov	r1, r0
   bcb62:	3b30      	subs	r3, #48	; 0x30
   bcb64:	220a      	movs	r2, #10
   bcb66:	4630      	mov	r0, r6
   bcb68:	f7ff ff76 	bl	bca58 <__multadd>
   bcb6c:	e7ee      	b.n	bcb4c <__s2b+0x68>
   bcb6e:	bf00      	nop
   bcb70:	000bdeb9 	.word	0x000bdeb9
   bcb74:	000bdf40 	.word	0x000bdf40

000bcb78 <__hi0bits>:
   bcb78:	0c03      	lsrs	r3, r0, #16
   bcb7a:	041b      	lsls	r3, r3, #16
   bcb7c:	b9d3      	cbnz	r3, bcbb4 <__hi0bits+0x3c>
   bcb7e:	0400      	lsls	r0, r0, #16
   bcb80:	2310      	movs	r3, #16
   bcb82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bcb86:	bf04      	itt	eq
   bcb88:	0200      	lsleq	r0, r0, #8
   bcb8a:	3308      	addeq	r3, #8
   bcb8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bcb90:	bf04      	itt	eq
   bcb92:	0100      	lsleq	r0, r0, #4
   bcb94:	3304      	addeq	r3, #4
   bcb96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bcb9a:	bf04      	itt	eq
   bcb9c:	0080      	lsleq	r0, r0, #2
   bcb9e:	3302      	addeq	r3, #2
   bcba0:	2800      	cmp	r0, #0
   bcba2:	db05      	blt.n	bcbb0 <__hi0bits+0x38>
   bcba4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bcba8:	f103 0301 	add.w	r3, r3, #1
   bcbac:	bf08      	it	eq
   bcbae:	2320      	moveq	r3, #32
   bcbb0:	4618      	mov	r0, r3
   bcbb2:	4770      	bx	lr
   bcbb4:	2300      	movs	r3, #0
   bcbb6:	e7e4      	b.n	bcb82 <__hi0bits+0xa>

000bcbb8 <__lo0bits>:
   bcbb8:	6803      	ldr	r3, [r0, #0]
   bcbba:	f013 0207 	ands.w	r2, r3, #7
   bcbbe:	4601      	mov	r1, r0
   bcbc0:	d00b      	beq.n	bcbda <__lo0bits+0x22>
   bcbc2:	07da      	lsls	r2, r3, #31
   bcbc4:	d423      	bmi.n	bcc0e <__lo0bits+0x56>
   bcbc6:	0798      	lsls	r0, r3, #30
   bcbc8:	bf49      	itett	mi
   bcbca:	085b      	lsrmi	r3, r3, #1
   bcbcc:	089b      	lsrpl	r3, r3, #2
   bcbce:	2001      	movmi	r0, #1
   bcbd0:	600b      	strmi	r3, [r1, #0]
   bcbd2:	bf5c      	itt	pl
   bcbd4:	600b      	strpl	r3, [r1, #0]
   bcbd6:	2002      	movpl	r0, #2
   bcbd8:	4770      	bx	lr
   bcbda:	b298      	uxth	r0, r3
   bcbdc:	b9a8      	cbnz	r0, bcc0a <__lo0bits+0x52>
   bcbde:	0c1b      	lsrs	r3, r3, #16
   bcbe0:	2010      	movs	r0, #16
   bcbe2:	b2da      	uxtb	r2, r3
   bcbe4:	b90a      	cbnz	r2, bcbea <__lo0bits+0x32>
   bcbe6:	3008      	adds	r0, #8
   bcbe8:	0a1b      	lsrs	r3, r3, #8
   bcbea:	071a      	lsls	r2, r3, #28
   bcbec:	bf04      	itt	eq
   bcbee:	091b      	lsreq	r3, r3, #4
   bcbf0:	3004      	addeq	r0, #4
   bcbf2:	079a      	lsls	r2, r3, #30
   bcbf4:	bf04      	itt	eq
   bcbf6:	089b      	lsreq	r3, r3, #2
   bcbf8:	3002      	addeq	r0, #2
   bcbfa:	07da      	lsls	r2, r3, #31
   bcbfc:	d403      	bmi.n	bcc06 <__lo0bits+0x4e>
   bcbfe:	085b      	lsrs	r3, r3, #1
   bcc00:	f100 0001 	add.w	r0, r0, #1
   bcc04:	d005      	beq.n	bcc12 <__lo0bits+0x5a>
   bcc06:	600b      	str	r3, [r1, #0]
   bcc08:	4770      	bx	lr
   bcc0a:	4610      	mov	r0, r2
   bcc0c:	e7e9      	b.n	bcbe2 <__lo0bits+0x2a>
   bcc0e:	2000      	movs	r0, #0
   bcc10:	4770      	bx	lr
   bcc12:	2020      	movs	r0, #32
   bcc14:	4770      	bx	lr
	...

000bcc18 <__i2b>:
   bcc18:	b510      	push	{r4, lr}
   bcc1a:	460c      	mov	r4, r1
   bcc1c:	2101      	movs	r1, #1
   bcc1e:	f7ff feb9 	bl	bc994 <_Balloc>
   bcc22:	4602      	mov	r2, r0
   bcc24:	b928      	cbnz	r0, bcc32 <__i2b+0x1a>
   bcc26:	4b05      	ldr	r3, [pc, #20]	; (bcc3c <__i2b+0x24>)
   bcc28:	4805      	ldr	r0, [pc, #20]	; (bcc40 <__i2b+0x28>)
   bcc2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bcc2e:	f7fb f873 	bl	b7d18 <__assert_func>
   bcc32:	2301      	movs	r3, #1
   bcc34:	6144      	str	r4, [r0, #20]
   bcc36:	6103      	str	r3, [r0, #16]
   bcc38:	bd10      	pop	{r4, pc}
   bcc3a:	bf00      	nop
   bcc3c:	000bdeb9 	.word	0x000bdeb9
   bcc40:	000bdf40 	.word	0x000bdf40

000bcc44 <__multiply>:
   bcc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcc48:	4691      	mov	r9, r2
   bcc4a:	690a      	ldr	r2, [r1, #16]
   bcc4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bcc50:	429a      	cmp	r2, r3
   bcc52:	bfb8      	it	lt
   bcc54:	460b      	movlt	r3, r1
   bcc56:	460c      	mov	r4, r1
   bcc58:	bfbc      	itt	lt
   bcc5a:	464c      	movlt	r4, r9
   bcc5c:	4699      	movlt	r9, r3
   bcc5e:	6927      	ldr	r7, [r4, #16]
   bcc60:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bcc64:	68a3      	ldr	r3, [r4, #8]
   bcc66:	6861      	ldr	r1, [r4, #4]
   bcc68:	eb07 060a 	add.w	r6, r7, sl
   bcc6c:	42b3      	cmp	r3, r6
   bcc6e:	b085      	sub	sp, #20
   bcc70:	bfb8      	it	lt
   bcc72:	3101      	addlt	r1, #1
   bcc74:	f7ff fe8e 	bl	bc994 <_Balloc>
   bcc78:	b930      	cbnz	r0, bcc88 <__multiply+0x44>
   bcc7a:	4602      	mov	r2, r0
   bcc7c:	4b44      	ldr	r3, [pc, #272]	; (bcd90 <__multiply+0x14c>)
   bcc7e:	4845      	ldr	r0, [pc, #276]	; (bcd94 <__multiply+0x150>)
   bcc80:	f240 115d 	movw	r1, #349	; 0x15d
   bcc84:	f7fb f848 	bl	b7d18 <__assert_func>
   bcc88:	f100 0514 	add.w	r5, r0, #20
   bcc8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bcc90:	462b      	mov	r3, r5
   bcc92:	2200      	movs	r2, #0
   bcc94:	4543      	cmp	r3, r8
   bcc96:	d321      	bcc.n	bccdc <__multiply+0x98>
   bcc98:	f104 0314 	add.w	r3, r4, #20
   bcc9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bcca0:	f109 0314 	add.w	r3, r9, #20
   bcca4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bcca8:	9202      	str	r2, [sp, #8]
   bccaa:	1b3a      	subs	r2, r7, r4
   bccac:	3a15      	subs	r2, #21
   bccae:	f022 0203 	bic.w	r2, r2, #3
   bccb2:	3204      	adds	r2, #4
   bccb4:	f104 0115 	add.w	r1, r4, #21
   bccb8:	428f      	cmp	r7, r1
   bccba:	bf38      	it	cc
   bccbc:	2204      	movcc	r2, #4
   bccbe:	9201      	str	r2, [sp, #4]
   bccc0:	9a02      	ldr	r2, [sp, #8]
   bccc2:	9303      	str	r3, [sp, #12]
   bccc4:	429a      	cmp	r2, r3
   bccc6:	d80c      	bhi.n	bcce2 <__multiply+0x9e>
   bccc8:	2e00      	cmp	r6, #0
   bccca:	dd03      	ble.n	bccd4 <__multiply+0x90>
   bcccc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bccd0:	2b00      	cmp	r3, #0
   bccd2:	d05a      	beq.n	bcd8a <__multiply+0x146>
   bccd4:	6106      	str	r6, [r0, #16]
   bccd6:	b005      	add	sp, #20
   bccd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bccdc:	f843 2b04 	str.w	r2, [r3], #4
   bcce0:	e7d8      	b.n	bcc94 <__multiply+0x50>
   bcce2:	f8b3 a000 	ldrh.w	sl, [r3]
   bcce6:	f1ba 0f00 	cmp.w	sl, #0
   bccea:	d024      	beq.n	bcd36 <__multiply+0xf2>
   bccec:	f104 0e14 	add.w	lr, r4, #20
   bccf0:	46a9      	mov	r9, r5
   bccf2:	f04f 0c00 	mov.w	ip, #0
   bccf6:	f85e 2b04 	ldr.w	r2, [lr], #4
   bccfa:	f8d9 1000 	ldr.w	r1, [r9]
   bccfe:	fa1f fb82 	uxth.w	fp, r2
   bcd02:	b289      	uxth	r1, r1
   bcd04:	fb0a 110b 	mla	r1, sl, fp, r1
   bcd08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bcd0c:	f8d9 2000 	ldr.w	r2, [r9]
   bcd10:	4461      	add	r1, ip
   bcd12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bcd16:	fb0a c20b 	mla	r2, sl, fp, ip
   bcd1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bcd1e:	b289      	uxth	r1, r1
   bcd20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bcd24:	4577      	cmp	r7, lr
   bcd26:	f849 1b04 	str.w	r1, [r9], #4
   bcd2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bcd2e:	d8e2      	bhi.n	bccf6 <__multiply+0xb2>
   bcd30:	9a01      	ldr	r2, [sp, #4]
   bcd32:	f845 c002 	str.w	ip, [r5, r2]
   bcd36:	9a03      	ldr	r2, [sp, #12]
   bcd38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bcd3c:	3304      	adds	r3, #4
   bcd3e:	f1b9 0f00 	cmp.w	r9, #0
   bcd42:	d020      	beq.n	bcd86 <__multiply+0x142>
   bcd44:	6829      	ldr	r1, [r5, #0]
   bcd46:	f104 0c14 	add.w	ip, r4, #20
   bcd4a:	46ae      	mov	lr, r5
   bcd4c:	f04f 0a00 	mov.w	sl, #0
   bcd50:	f8bc b000 	ldrh.w	fp, [ip]
   bcd54:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bcd58:	fb09 220b 	mla	r2, r9, fp, r2
   bcd5c:	4492      	add	sl, r2
   bcd5e:	b289      	uxth	r1, r1
   bcd60:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bcd64:	f84e 1b04 	str.w	r1, [lr], #4
   bcd68:	f85c 2b04 	ldr.w	r2, [ip], #4
   bcd6c:	f8be 1000 	ldrh.w	r1, [lr]
   bcd70:	0c12      	lsrs	r2, r2, #16
   bcd72:	fb09 1102 	mla	r1, r9, r2, r1
   bcd76:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bcd7a:	4567      	cmp	r7, ip
   bcd7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bcd80:	d8e6      	bhi.n	bcd50 <__multiply+0x10c>
   bcd82:	9a01      	ldr	r2, [sp, #4]
   bcd84:	50a9      	str	r1, [r5, r2]
   bcd86:	3504      	adds	r5, #4
   bcd88:	e79a      	b.n	bccc0 <__multiply+0x7c>
   bcd8a:	3e01      	subs	r6, #1
   bcd8c:	e79c      	b.n	bccc8 <__multiply+0x84>
   bcd8e:	bf00      	nop
   bcd90:	000bdeb9 	.word	0x000bdeb9
   bcd94:	000bdf40 	.word	0x000bdf40

000bcd98 <__pow5mult>:
   bcd98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcd9c:	4615      	mov	r5, r2
   bcd9e:	f012 0203 	ands.w	r2, r2, #3
   bcda2:	4606      	mov	r6, r0
   bcda4:	460f      	mov	r7, r1
   bcda6:	d007      	beq.n	bcdb8 <__pow5mult+0x20>
   bcda8:	4c25      	ldr	r4, [pc, #148]	; (bce40 <__pow5mult+0xa8>)
   bcdaa:	3a01      	subs	r2, #1
   bcdac:	2300      	movs	r3, #0
   bcdae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bcdb2:	f7ff fe51 	bl	bca58 <__multadd>
   bcdb6:	4607      	mov	r7, r0
   bcdb8:	10ad      	asrs	r5, r5, #2
   bcdba:	d03d      	beq.n	bce38 <__pow5mult+0xa0>
   bcdbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bcdbe:	b97c      	cbnz	r4, bcde0 <__pow5mult+0x48>
   bcdc0:	2010      	movs	r0, #16
   bcdc2:	f7fa ff69 	bl	b7c98 <malloc>
   bcdc6:	4602      	mov	r2, r0
   bcdc8:	6270      	str	r0, [r6, #36]	; 0x24
   bcdca:	b928      	cbnz	r0, bcdd8 <__pow5mult+0x40>
   bcdcc:	4b1d      	ldr	r3, [pc, #116]	; (bce44 <__pow5mult+0xac>)
   bcdce:	481e      	ldr	r0, [pc, #120]	; (bce48 <__pow5mult+0xb0>)
   bcdd0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bcdd4:	f7fa ffa0 	bl	b7d18 <__assert_func>
   bcdd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bcddc:	6004      	str	r4, [r0, #0]
   bcdde:	60c4      	str	r4, [r0, #12]
   bcde0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bcde4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bcde8:	b94c      	cbnz	r4, bcdfe <__pow5mult+0x66>
   bcdea:	f240 2171 	movw	r1, #625	; 0x271
   bcdee:	4630      	mov	r0, r6
   bcdf0:	f7ff ff12 	bl	bcc18 <__i2b>
   bcdf4:	2300      	movs	r3, #0
   bcdf6:	f8c8 0008 	str.w	r0, [r8, #8]
   bcdfa:	4604      	mov	r4, r0
   bcdfc:	6003      	str	r3, [r0, #0]
   bcdfe:	f04f 0900 	mov.w	r9, #0
   bce02:	07eb      	lsls	r3, r5, #31
   bce04:	d50a      	bpl.n	bce1c <__pow5mult+0x84>
   bce06:	4639      	mov	r1, r7
   bce08:	4622      	mov	r2, r4
   bce0a:	4630      	mov	r0, r6
   bce0c:	f7ff ff1a 	bl	bcc44 <__multiply>
   bce10:	4639      	mov	r1, r7
   bce12:	4680      	mov	r8, r0
   bce14:	4630      	mov	r0, r6
   bce16:	f7ff fdfd 	bl	bca14 <_Bfree>
   bce1a:	4647      	mov	r7, r8
   bce1c:	106d      	asrs	r5, r5, #1
   bce1e:	d00b      	beq.n	bce38 <__pow5mult+0xa0>
   bce20:	6820      	ldr	r0, [r4, #0]
   bce22:	b938      	cbnz	r0, bce34 <__pow5mult+0x9c>
   bce24:	4622      	mov	r2, r4
   bce26:	4621      	mov	r1, r4
   bce28:	4630      	mov	r0, r6
   bce2a:	f7ff ff0b 	bl	bcc44 <__multiply>
   bce2e:	6020      	str	r0, [r4, #0]
   bce30:	f8c0 9000 	str.w	r9, [r0]
   bce34:	4604      	mov	r4, r0
   bce36:	e7e4      	b.n	bce02 <__pow5mult+0x6a>
   bce38:	4638      	mov	r0, r7
   bce3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bce3e:	bf00      	nop
   bce40:	000be090 	.word	0x000be090
   bce44:	000bdce5 	.word	0x000bdce5
   bce48:	000bdf40 	.word	0x000bdf40

000bce4c <__lshift>:
   bce4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bce50:	460c      	mov	r4, r1
   bce52:	6849      	ldr	r1, [r1, #4]
   bce54:	6923      	ldr	r3, [r4, #16]
   bce56:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bce5a:	68a3      	ldr	r3, [r4, #8]
   bce5c:	4607      	mov	r7, r0
   bce5e:	4691      	mov	r9, r2
   bce60:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bce64:	f108 0601 	add.w	r6, r8, #1
   bce68:	42b3      	cmp	r3, r6
   bce6a:	db0b      	blt.n	bce84 <__lshift+0x38>
   bce6c:	4638      	mov	r0, r7
   bce6e:	f7ff fd91 	bl	bc994 <_Balloc>
   bce72:	4605      	mov	r5, r0
   bce74:	b948      	cbnz	r0, bce8a <__lshift+0x3e>
   bce76:	4602      	mov	r2, r0
   bce78:	4b2a      	ldr	r3, [pc, #168]	; (bcf24 <__lshift+0xd8>)
   bce7a:	482b      	ldr	r0, [pc, #172]	; (bcf28 <__lshift+0xdc>)
   bce7c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bce80:	f7fa ff4a 	bl	b7d18 <__assert_func>
   bce84:	3101      	adds	r1, #1
   bce86:	005b      	lsls	r3, r3, #1
   bce88:	e7ee      	b.n	bce68 <__lshift+0x1c>
   bce8a:	2300      	movs	r3, #0
   bce8c:	f100 0114 	add.w	r1, r0, #20
   bce90:	f100 0210 	add.w	r2, r0, #16
   bce94:	4618      	mov	r0, r3
   bce96:	4553      	cmp	r3, sl
   bce98:	db37      	blt.n	bcf0a <__lshift+0xbe>
   bce9a:	6920      	ldr	r0, [r4, #16]
   bce9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bcea0:	f104 0314 	add.w	r3, r4, #20
   bcea4:	f019 091f 	ands.w	r9, r9, #31
   bcea8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bceac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bceb0:	d02f      	beq.n	bcf12 <__lshift+0xc6>
   bceb2:	f1c9 0e20 	rsb	lr, r9, #32
   bceb6:	468a      	mov	sl, r1
   bceb8:	f04f 0c00 	mov.w	ip, #0
   bcebc:	681a      	ldr	r2, [r3, #0]
   bcebe:	fa02 f209 	lsl.w	r2, r2, r9
   bcec2:	ea42 020c 	orr.w	r2, r2, ip
   bcec6:	f84a 2b04 	str.w	r2, [sl], #4
   bceca:	f853 2b04 	ldr.w	r2, [r3], #4
   bcece:	4298      	cmp	r0, r3
   bced0:	fa22 fc0e 	lsr.w	ip, r2, lr
   bced4:	d8f2      	bhi.n	bcebc <__lshift+0x70>
   bced6:	1b03      	subs	r3, r0, r4
   bced8:	3b15      	subs	r3, #21
   bceda:	f023 0303 	bic.w	r3, r3, #3
   bcede:	3304      	adds	r3, #4
   bcee0:	f104 0215 	add.w	r2, r4, #21
   bcee4:	4290      	cmp	r0, r2
   bcee6:	bf38      	it	cc
   bcee8:	2304      	movcc	r3, #4
   bceea:	f841 c003 	str.w	ip, [r1, r3]
   bceee:	f1bc 0f00 	cmp.w	ip, #0
   bcef2:	d001      	beq.n	bcef8 <__lshift+0xac>
   bcef4:	f108 0602 	add.w	r6, r8, #2
   bcef8:	3e01      	subs	r6, #1
   bcefa:	4638      	mov	r0, r7
   bcefc:	612e      	str	r6, [r5, #16]
   bcefe:	4621      	mov	r1, r4
   bcf00:	f7ff fd88 	bl	bca14 <_Bfree>
   bcf04:	4628      	mov	r0, r5
   bcf06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bcf0a:	f842 0f04 	str.w	r0, [r2, #4]!
   bcf0e:	3301      	adds	r3, #1
   bcf10:	e7c1      	b.n	bce96 <__lshift+0x4a>
   bcf12:	3904      	subs	r1, #4
   bcf14:	f853 2b04 	ldr.w	r2, [r3], #4
   bcf18:	f841 2f04 	str.w	r2, [r1, #4]!
   bcf1c:	4298      	cmp	r0, r3
   bcf1e:	d8f9      	bhi.n	bcf14 <__lshift+0xc8>
   bcf20:	e7ea      	b.n	bcef8 <__lshift+0xac>
   bcf22:	bf00      	nop
   bcf24:	000bdeb9 	.word	0x000bdeb9
   bcf28:	000bdf40 	.word	0x000bdf40

000bcf2c <__mcmp>:
   bcf2c:	b530      	push	{r4, r5, lr}
   bcf2e:	6902      	ldr	r2, [r0, #16]
   bcf30:	690c      	ldr	r4, [r1, #16]
   bcf32:	1b12      	subs	r2, r2, r4
   bcf34:	d10e      	bne.n	bcf54 <__mcmp+0x28>
   bcf36:	f100 0314 	add.w	r3, r0, #20
   bcf3a:	3114      	adds	r1, #20
   bcf3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bcf40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bcf44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bcf48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bcf4c:	42a5      	cmp	r5, r4
   bcf4e:	d003      	beq.n	bcf58 <__mcmp+0x2c>
   bcf50:	d305      	bcc.n	bcf5e <__mcmp+0x32>
   bcf52:	2201      	movs	r2, #1
   bcf54:	4610      	mov	r0, r2
   bcf56:	bd30      	pop	{r4, r5, pc}
   bcf58:	4283      	cmp	r3, r0
   bcf5a:	d3f3      	bcc.n	bcf44 <__mcmp+0x18>
   bcf5c:	e7fa      	b.n	bcf54 <__mcmp+0x28>
   bcf5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bcf62:	e7f7      	b.n	bcf54 <__mcmp+0x28>

000bcf64 <__mdiff>:
   bcf64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcf68:	460c      	mov	r4, r1
   bcf6a:	4606      	mov	r6, r0
   bcf6c:	4611      	mov	r1, r2
   bcf6e:	4620      	mov	r0, r4
   bcf70:	4690      	mov	r8, r2
   bcf72:	f7ff ffdb 	bl	bcf2c <__mcmp>
   bcf76:	1e05      	subs	r5, r0, #0
   bcf78:	d110      	bne.n	bcf9c <__mdiff+0x38>
   bcf7a:	4629      	mov	r1, r5
   bcf7c:	4630      	mov	r0, r6
   bcf7e:	f7ff fd09 	bl	bc994 <_Balloc>
   bcf82:	b930      	cbnz	r0, bcf92 <__mdiff+0x2e>
   bcf84:	4b3a      	ldr	r3, [pc, #232]	; (bd070 <__mdiff+0x10c>)
   bcf86:	4602      	mov	r2, r0
   bcf88:	f240 2132 	movw	r1, #562	; 0x232
   bcf8c:	4839      	ldr	r0, [pc, #228]	; (bd074 <__mdiff+0x110>)
   bcf8e:	f7fa fec3 	bl	b7d18 <__assert_func>
   bcf92:	2301      	movs	r3, #1
   bcf94:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bcf98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bcf9c:	bfa4      	itt	ge
   bcf9e:	4643      	movge	r3, r8
   bcfa0:	46a0      	movge	r8, r4
   bcfa2:	4630      	mov	r0, r6
   bcfa4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bcfa8:	bfa6      	itte	ge
   bcfaa:	461c      	movge	r4, r3
   bcfac:	2500      	movge	r5, #0
   bcfae:	2501      	movlt	r5, #1
   bcfb0:	f7ff fcf0 	bl	bc994 <_Balloc>
   bcfb4:	b920      	cbnz	r0, bcfc0 <__mdiff+0x5c>
   bcfb6:	4b2e      	ldr	r3, [pc, #184]	; (bd070 <__mdiff+0x10c>)
   bcfb8:	4602      	mov	r2, r0
   bcfba:	f44f 7110 	mov.w	r1, #576	; 0x240
   bcfbe:	e7e5      	b.n	bcf8c <__mdiff+0x28>
   bcfc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bcfc4:	6926      	ldr	r6, [r4, #16]
   bcfc6:	60c5      	str	r5, [r0, #12]
   bcfc8:	f104 0914 	add.w	r9, r4, #20
   bcfcc:	f108 0514 	add.w	r5, r8, #20
   bcfd0:	f100 0e14 	add.w	lr, r0, #20
   bcfd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bcfd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bcfdc:	f108 0210 	add.w	r2, r8, #16
   bcfe0:	46f2      	mov	sl, lr
   bcfe2:	2100      	movs	r1, #0
   bcfe4:	f859 3b04 	ldr.w	r3, [r9], #4
   bcfe8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bcfec:	fa1f f883 	uxth.w	r8, r3
   bcff0:	fa11 f18b 	uxtah	r1, r1, fp
   bcff4:	0c1b      	lsrs	r3, r3, #16
   bcff6:	eba1 0808 	sub.w	r8, r1, r8
   bcffa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bcffe:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bd002:	fa1f f888 	uxth.w	r8, r8
   bd006:	1419      	asrs	r1, r3, #16
   bd008:	454e      	cmp	r6, r9
   bd00a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bd00e:	f84a 3b04 	str.w	r3, [sl], #4
   bd012:	d8e7      	bhi.n	bcfe4 <__mdiff+0x80>
   bd014:	1b33      	subs	r3, r6, r4
   bd016:	3b15      	subs	r3, #21
   bd018:	f023 0303 	bic.w	r3, r3, #3
   bd01c:	3304      	adds	r3, #4
   bd01e:	3415      	adds	r4, #21
   bd020:	42a6      	cmp	r6, r4
   bd022:	bf38      	it	cc
   bd024:	2304      	movcc	r3, #4
   bd026:	441d      	add	r5, r3
   bd028:	4473      	add	r3, lr
   bd02a:	469e      	mov	lr, r3
   bd02c:	462e      	mov	r6, r5
   bd02e:	4566      	cmp	r6, ip
   bd030:	d30e      	bcc.n	bd050 <__mdiff+0xec>
   bd032:	f10c 0203 	add.w	r2, ip, #3
   bd036:	1b52      	subs	r2, r2, r5
   bd038:	f022 0203 	bic.w	r2, r2, #3
   bd03c:	3d03      	subs	r5, #3
   bd03e:	45ac      	cmp	ip, r5
   bd040:	bf38      	it	cc
   bd042:	2200      	movcc	r2, #0
   bd044:	441a      	add	r2, r3
   bd046:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bd04a:	b17b      	cbz	r3, bd06c <__mdiff+0x108>
   bd04c:	6107      	str	r7, [r0, #16]
   bd04e:	e7a3      	b.n	bcf98 <__mdiff+0x34>
   bd050:	f856 8b04 	ldr.w	r8, [r6], #4
   bd054:	fa11 f288 	uxtah	r2, r1, r8
   bd058:	1414      	asrs	r4, r2, #16
   bd05a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bd05e:	b292      	uxth	r2, r2
   bd060:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bd064:	f84e 2b04 	str.w	r2, [lr], #4
   bd068:	1421      	asrs	r1, r4, #16
   bd06a:	e7e0      	b.n	bd02e <__mdiff+0xca>
   bd06c:	3f01      	subs	r7, #1
   bd06e:	e7ea      	b.n	bd046 <__mdiff+0xe2>
   bd070:	000bdeb9 	.word	0x000bdeb9
   bd074:	000bdf40 	.word	0x000bdf40

000bd078 <__ulp>:
   bd078:	b082      	sub	sp, #8
   bd07a:	ed8d 0b00 	vstr	d0, [sp]
   bd07e:	9b01      	ldr	r3, [sp, #4]
   bd080:	4912      	ldr	r1, [pc, #72]	; (bd0cc <__ulp+0x54>)
   bd082:	4019      	ands	r1, r3
   bd084:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bd088:	2900      	cmp	r1, #0
   bd08a:	dd05      	ble.n	bd098 <__ulp+0x20>
   bd08c:	2200      	movs	r2, #0
   bd08e:	460b      	mov	r3, r1
   bd090:	ec43 2b10 	vmov	d0, r2, r3
   bd094:	b002      	add	sp, #8
   bd096:	4770      	bx	lr
   bd098:	4249      	negs	r1, r1
   bd09a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bd09e:	ea4f 5021 	mov.w	r0, r1, asr #20
   bd0a2:	f04f 0200 	mov.w	r2, #0
   bd0a6:	f04f 0300 	mov.w	r3, #0
   bd0aa:	da04      	bge.n	bd0b6 <__ulp+0x3e>
   bd0ac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bd0b0:	fa41 f300 	asr.w	r3, r1, r0
   bd0b4:	e7ec      	b.n	bd090 <__ulp+0x18>
   bd0b6:	f1a0 0114 	sub.w	r1, r0, #20
   bd0ba:	291e      	cmp	r1, #30
   bd0bc:	bfda      	itte	le
   bd0be:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bd0c2:	fa20 f101 	lsrle.w	r1, r0, r1
   bd0c6:	2101      	movgt	r1, #1
   bd0c8:	460a      	mov	r2, r1
   bd0ca:	e7e1      	b.n	bd090 <__ulp+0x18>
   bd0cc:	7ff00000 	.word	0x7ff00000

000bd0d0 <__b2d>:
   bd0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd0d2:	6905      	ldr	r5, [r0, #16]
   bd0d4:	f100 0714 	add.w	r7, r0, #20
   bd0d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bd0dc:	1f2e      	subs	r6, r5, #4
   bd0de:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bd0e2:	4620      	mov	r0, r4
   bd0e4:	f7ff fd48 	bl	bcb78 <__hi0bits>
   bd0e8:	f1c0 0320 	rsb	r3, r0, #32
   bd0ec:	280a      	cmp	r0, #10
   bd0ee:	f8df c07c 	ldr.w	ip, [pc, #124]	; bd16c <__b2d+0x9c>
   bd0f2:	600b      	str	r3, [r1, #0]
   bd0f4:	dc14      	bgt.n	bd120 <__b2d+0x50>
   bd0f6:	f1c0 0e0b 	rsb	lr, r0, #11
   bd0fa:	fa24 f10e 	lsr.w	r1, r4, lr
   bd0fe:	42b7      	cmp	r7, r6
   bd100:	ea41 030c 	orr.w	r3, r1, ip
   bd104:	bf34      	ite	cc
   bd106:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd10a:	2100      	movcs	r1, #0
   bd10c:	3015      	adds	r0, #21
   bd10e:	fa04 f000 	lsl.w	r0, r4, r0
   bd112:	fa21 f10e 	lsr.w	r1, r1, lr
   bd116:	ea40 0201 	orr.w	r2, r0, r1
   bd11a:	ec43 2b10 	vmov	d0, r2, r3
   bd11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bd120:	42b7      	cmp	r7, r6
   bd122:	bf3a      	itte	cc
   bd124:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bd128:	f1a5 0608 	subcc.w	r6, r5, #8
   bd12c:	2100      	movcs	r1, #0
   bd12e:	380b      	subs	r0, #11
   bd130:	d017      	beq.n	bd162 <__b2d+0x92>
   bd132:	f1c0 0c20 	rsb	ip, r0, #32
   bd136:	fa04 f500 	lsl.w	r5, r4, r0
   bd13a:	42be      	cmp	r6, r7
   bd13c:	fa21 f40c 	lsr.w	r4, r1, ip
   bd140:	ea45 0504 	orr.w	r5, r5, r4
   bd144:	bf8c      	ite	hi
   bd146:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bd14a:	2400      	movls	r4, #0
   bd14c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bd150:	fa01 f000 	lsl.w	r0, r1, r0
   bd154:	fa24 f40c 	lsr.w	r4, r4, ip
   bd158:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bd15c:	ea40 0204 	orr.w	r2, r0, r4
   bd160:	e7db      	b.n	bd11a <__b2d+0x4a>
   bd162:	ea44 030c 	orr.w	r3, r4, ip
   bd166:	460a      	mov	r2, r1
   bd168:	e7d7      	b.n	bd11a <__b2d+0x4a>
   bd16a:	bf00      	nop
   bd16c:	3ff00000 	.word	0x3ff00000

000bd170 <__d2b>:
   bd170:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bd174:	4689      	mov	r9, r1
   bd176:	2101      	movs	r1, #1
   bd178:	ec57 6b10 	vmov	r6, r7, d0
   bd17c:	4690      	mov	r8, r2
   bd17e:	f7ff fc09 	bl	bc994 <_Balloc>
   bd182:	4604      	mov	r4, r0
   bd184:	b930      	cbnz	r0, bd194 <__d2b+0x24>
   bd186:	4602      	mov	r2, r0
   bd188:	4b25      	ldr	r3, [pc, #148]	; (bd220 <__d2b+0xb0>)
   bd18a:	4826      	ldr	r0, [pc, #152]	; (bd224 <__d2b+0xb4>)
   bd18c:	f240 310a 	movw	r1, #778	; 0x30a
   bd190:	f7fa fdc2 	bl	b7d18 <__assert_func>
   bd194:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bd198:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bd19c:	bb35      	cbnz	r5, bd1ec <__d2b+0x7c>
   bd19e:	2e00      	cmp	r6, #0
   bd1a0:	9301      	str	r3, [sp, #4]
   bd1a2:	d028      	beq.n	bd1f6 <__d2b+0x86>
   bd1a4:	4668      	mov	r0, sp
   bd1a6:	9600      	str	r6, [sp, #0]
   bd1a8:	f7ff fd06 	bl	bcbb8 <__lo0bits>
   bd1ac:	9900      	ldr	r1, [sp, #0]
   bd1ae:	b300      	cbz	r0, bd1f2 <__d2b+0x82>
   bd1b0:	9a01      	ldr	r2, [sp, #4]
   bd1b2:	f1c0 0320 	rsb	r3, r0, #32
   bd1b6:	fa02 f303 	lsl.w	r3, r2, r3
   bd1ba:	430b      	orrs	r3, r1
   bd1bc:	40c2      	lsrs	r2, r0
   bd1be:	6163      	str	r3, [r4, #20]
   bd1c0:	9201      	str	r2, [sp, #4]
   bd1c2:	9b01      	ldr	r3, [sp, #4]
   bd1c4:	61a3      	str	r3, [r4, #24]
   bd1c6:	2b00      	cmp	r3, #0
   bd1c8:	bf14      	ite	ne
   bd1ca:	2202      	movne	r2, #2
   bd1cc:	2201      	moveq	r2, #1
   bd1ce:	6122      	str	r2, [r4, #16]
   bd1d0:	b1d5      	cbz	r5, bd208 <__d2b+0x98>
   bd1d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bd1d6:	4405      	add	r5, r0
   bd1d8:	f8c9 5000 	str.w	r5, [r9]
   bd1dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bd1e0:	f8c8 0000 	str.w	r0, [r8]
   bd1e4:	4620      	mov	r0, r4
   bd1e6:	b003      	add	sp, #12
   bd1e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd1ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd1f0:	e7d5      	b.n	bd19e <__d2b+0x2e>
   bd1f2:	6161      	str	r1, [r4, #20]
   bd1f4:	e7e5      	b.n	bd1c2 <__d2b+0x52>
   bd1f6:	a801      	add	r0, sp, #4
   bd1f8:	f7ff fcde 	bl	bcbb8 <__lo0bits>
   bd1fc:	9b01      	ldr	r3, [sp, #4]
   bd1fe:	6163      	str	r3, [r4, #20]
   bd200:	2201      	movs	r2, #1
   bd202:	6122      	str	r2, [r4, #16]
   bd204:	3020      	adds	r0, #32
   bd206:	e7e3      	b.n	bd1d0 <__d2b+0x60>
   bd208:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bd20c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bd210:	f8c9 0000 	str.w	r0, [r9]
   bd214:	6918      	ldr	r0, [r3, #16]
   bd216:	f7ff fcaf 	bl	bcb78 <__hi0bits>
   bd21a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bd21e:	e7df      	b.n	bd1e0 <__d2b+0x70>
   bd220:	000bdeb9 	.word	0x000bdeb9
   bd224:	000bdf40 	.word	0x000bdf40

000bd228 <__ratio>:
   bd228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd22c:	4688      	mov	r8, r1
   bd22e:	4669      	mov	r1, sp
   bd230:	4681      	mov	r9, r0
   bd232:	f7ff ff4d 	bl	bd0d0 <__b2d>
   bd236:	a901      	add	r1, sp, #4
   bd238:	4640      	mov	r0, r8
   bd23a:	ec55 4b10 	vmov	r4, r5, d0
   bd23e:	f7ff ff47 	bl	bd0d0 <__b2d>
   bd242:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd246:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bd24a:	eba3 0c02 	sub.w	ip, r3, r2
   bd24e:	e9dd 3200 	ldrd	r3, r2, [sp]
   bd252:	1a9b      	subs	r3, r3, r2
   bd254:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bd258:	ec51 0b10 	vmov	r0, r1, d0
   bd25c:	2b00      	cmp	r3, #0
   bd25e:	bfd6      	itet	le
   bd260:	460a      	movle	r2, r1
   bd262:	462a      	movgt	r2, r5
   bd264:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bd268:	468b      	mov	fp, r1
   bd26a:	462f      	mov	r7, r5
   bd26c:	bfd4      	ite	le
   bd26e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bd272:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bd276:	4620      	mov	r0, r4
   bd278:	ee10 2a10 	vmov	r2, s0
   bd27c:	465b      	mov	r3, fp
   bd27e:	4639      	mov	r1, r7
   bd280:	f7fd fdba 	bl	badf8 <__aeabi_ddiv>
   bd284:	ec41 0b10 	vmov	d0, r0, r1
   bd288:	b003      	add	sp, #12
   bd28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd28e <__copybits>:
   bd28e:	3901      	subs	r1, #1
   bd290:	b570      	push	{r4, r5, r6, lr}
   bd292:	1149      	asrs	r1, r1, #5
   bd294:	6914      	ldr	r4, [r2, #16]
   bd296:	3101      	adds	r1, #1
   bd298:	f102 0314 	add.w	r3, r2, #20
   bd29c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bd2a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bd2a4:	1f05      	subs	r5, r0, #4
   bd2a6:	42a3      	cmp	r3, r4
   bd2a8:	d30c      	bcc.n	bd2c4 <__copybits+0x36>
   bd2aa:	1aa3      	subs	r3, r4, r2
   bd2ac:	3b11      	subs	r3, #17
   bd2ae:	f023 0303 	bic.w	r3, r3, #3
   bd2b2:	3211      	adds	r2, #17
   bd2b4:	42a2      	cmp	r2, r4
   bd2b6:	bf88      	it	hi
   bd2b8:	2300      	movhi	r3, #0
   bd2ba:	4418      	add	r0, r3
   bd2bc:	2300      	movs	r3, #0
   bd2be:	4288      	cmp	r0, r1
   bd2c0:	d305      	bcc.n	bd2ce <__copybits+0x40>
   bd2c2:	bd70      	pop	{r4, r5, r6, pc}
   bd2c4:	f853 6b04 	ldr.w	r6, [r3], #4
   bd2c8:	f845 6f04 	str.w	r6, [r5, #4]!
   bd2cc:	e7eb      	b.n	bd2a6 <__copybits+0x18>
   bd2ce:	f840 3b04 	str.w	r3, [r0], #4
   bd2d2:	e7f4      	b.n	bd2be <__copybits+0x30>

000bd2d4 <__any_on>:
   bd2d4:	f100 0214 	add.w	r2, r0, #20
   bd2d8:	6900      	ldr	r0, [r0, #16]
   bd2da:	114b      	asrs	r3, r1, #5
   bd2dc:	4298      	cmp	r0, r3
   bd2de:	b510      	push	{r4, lr}
   bd2e0:	db11      	blt.n	bd306 <__any_on+0x32>
   bd2e2:	dd0a      	ble.n	bd2fa <__any_on+0x26>
   bd2e4:	f011 011f 	ands.w	r1, r1, #31
   bd2e8:	d007      	beq.n	bd2fa <__any_on+0x26>
   bd2ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bd2ee:	fa24 f001 	lsr.w	r0, r4, r1
   bd2f2:	fa00 f101 	lsl.w	r1, r0, r1
   bd2f6:	428c      	cmp	r4, r1
   bd2f8:	d10b      	bne.n	bd312 <__any_on+0x3e>
   bd2fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bd2fe:	4293      	cmp	r3, r2
   bd300:	d803      	bhi.n	bd30a <__any_on+0x36>
   bd302:	2000      	movs	r0, #0
   bd304:	bd10      	pop	{r4, pc}
   bd306:	4603      	mov	r3, r0
   bd308:	e7f7      	b.n	bd2fa <__any_on+0x26>
   bd30a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bd30e:	2900      	cmp	r1, #0
   bd310:	d0f5      	beq.n	bd2fe <__any_on+0x2a>
   bd312:	2001      	movs	r0, #1
   bd314:	e7f6      	b.n	bd304 <__any_on+0x30>

000bd316 <_calloc_r>:
   bd316:	b513      	push	{r0, r1, r4, lr}
   bd318:	434a      	muls	r2, r1
   bd31a:	4611      	mov	r1, r2
   bd31c:	9201      	str	r2, [sp, #4]
   bd31e:	f7fa fceb 	bl	b7cf8 <_malloc_r>
   bd322:	4604      	mov	r4, r0
   bd324:	b118      	cbz	r0, bd32e <_calloc_r+0x18>
   bd326:	9a01      	ldr	r2, [sp, #4]
   bd328:	2100      	movs	r1, #0
   bd32a:	f7fd ffbb 	bl	bb2a4 <memset>
   bd32e:	4620      	mov	r0, r4
   bd330:	b002      	add	sp, #8
   bd332:	bd10      	pop	{r4, pc}
   bd334:	0000      	movs	r0, r0
	...

000bd338 <nan>:
   bd338:	ed9f 0b01 	vldr	d0, [pc, #4]	; bd340 <nan+0x8>
   bd33c:	4770      	bx	lr
   bd33e:	bf00      	nop
   bd340:	00000000 	.word	0x00000000
   bd344:	7ff80000 	.word	0x7ff80000

000bd348 <nanf>:
   bd348:	ed9f 0a01 	vldr	s0, [pc, #4]	; bd350 <nanf+0x8>
   bd34c:	4770      	bx	lr
   bd34e:	bf00      	nop
   bd350:	7fc00000 	.word	0x7fc00000

000bd354 <__ascii_wctomb>:
   bd354:	b149      	cbz	r1, bd36a <__ascii_wctomb+0x16>
   bd356:	2aff      	cmp	r2, #255	; 0xff
   bd358:	bf85      	ittet	hi
   bd35a:	238a      	movhi	r3, #138	; 0x8a
   bd35c:	6003      	strhi	r3, [r0, #0]
   bd35e:	700a      	strbls	r2, [r1, #0]
   bd360:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bd364:	bf98      	it	ls
   bd366:	2001      	movls	r0, #1
   bd368:	4770      	bx	lr
   bd36a:	4608      	mov	r0, r1
   bd36c:	4770      	bx	lr
	...

000bd370 <__aeabi_d2lz>:
   bd370:	b538      	push	{r3, r4, r5, lr}
   bd372:	2200      	movs	r2, #0
   bd374:	2300      	movs	r3, #0
   bd376:	4604      	mov	r4, r0
   bd378:	460d      	mov	r5, r1
   bd37a:	f7fd fe85 	bl	bb088 <__aeabi_dcmplt>
   bd37e:	b928      	cbnz	r0, bd38c <__aeabi_d2lz+0x1c>
   bd380:	4620      	mov	r0, r4
   bd382:	4629      	mov	r1, r5
   bd384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd388:	f7fd bf2c 	b.w	bb1e4 <__aeabi_d2ulz>
   bd38c:	4620      	mov	r0, r4
   bd38e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bd392:	f7fd ff27 	bl	bb1e4 <__aeabi_d2ulz>
   bd396:	4240      	negs	r0, r0
   bd398:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd39c:	bd38      	pop	{r3, r4, r5, pc}
   bd39e:	bf00      	nop

000bd3a0 <dynalib_user>:
   bd3a0:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bd3b0:	0000 0000 6162 6973 5f63 7473 6972 676e     ....basic_string
   bd3c0:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   bd3d0:	6c75 206c 6f6e 2074 6176 696c 0064 720a     ull not valid..r
   bd3e0:	7165 6575 7473 6320 646f 2065 2c31 6120     equest code 1, a
   bd3f0:	6464 6572 7373 203a 7400 6172 736e 696d     ddress: .transmi
   bd400:	7373 6f69 206e 6572 6963 7665 6465 6620     ssion recieved f
   bd410:	6f72 3a6d 0020 6564 6976 6563 6920 3a64     rom: .device id:
   bd420:	0020 7274 6e61 6d73 7369 6973 6e6f 7320      .transmission s
   bd430:	6e65 2074 6f74 203a 7200 7165 6575 7473     ent to: .request
   bd440:	6320 646f 2065 2c32 6120 6464 6572 7373      code 2, address
   bd450:	203a 6300 6e6f 6c66 6369 2074 6576 6972     : .conflict veri
   bd460:	6966 6163 6974 6e6f 203a 0a00 6f43 6e6e     fication: ..Conn
   bd470:	6365 6574 2064 6f74 203a 6300 6e61 6f6e     ected to: .canno
   bd480:	2074 7263 6165 6574 7320 6474 3a3a 6576     t create std::ve
   bd490:	7463 726f 6c20 7261 6567 2072 6874 6e61     ctor larger than
   bd4a0:	6d20 7861 735f 7a69 2865 0029 7267 6565      max_size().gree
   bd4b0:	316e 6700 6572 6e65 0032 4c42 2045 6966     n1.green2.BLE fi
   bd4c0:	696e 6873 6465 7200 6465 4600 3046 3030     nished.red.FF000
   bd4d0:	0030 4130 3030 3030 6200 756c 0065 3030     0.0A0000.blue.00
   bd4e0:	3030 4646 3000 3030 3030 0041 7262 776f     00FF.00000A.brow
   bd4f0:	006e 4646 4646 3030 3000 3041 3041 0030     n.FFFF00.0A0A00.
   bd500:	3030 4646 3030 3000 3030 3041 0030 726f     00FF00.000A00.or
   bd510:	6e61 6567 4600 3846 3030 0030 4130 3530     ange.FF8000.0A05
   bd520:	3030 7000 7275 6c70 0065 3032 3030 4646     00.purple.2000FF
   bd530:	3000 3032 3030 0041 6970 6b6e 4600 3846     .02000A.pink.FF8
   bd540:	3830 0030 4130 3530 3530 3600 3445 3030     080.0A0505.6E400
   bd550:	3030 2d31 3542 3341 462d 3933 2d33 3045     001-B5A3-F393-E0
   bd560:	3941 452d 3035 3245 4434 4343 3941 0045     A9-E50E24DCCA9E.
   bd570:	4536 3034 3030 3230 422d 4135 2d33 3346     6E400002-B5A3-F3
   bd580:	3339 452d 4130 2d39 3545 4530 3432 4344     93-E0A9-E50E24DC
   bd590:	4143 4539 3600 3445 3030 3030 2d33 3542     CA9E.6E400003-B5
   bd5a0:	3341 462d 3933 2d33 3045 3941 452d 3035     A3-F393-E0A9-E50
   bd5b0:	3245 4434 4343 3941 0045 7874 7200 0078     E24DCCA9E.tx.rx.
   bd5c0:	7274 6b65 742e 6568 6377 2e6c 6f63 006d     trek.thewcl.com.
   bd5d0:	6f6c 706f 7320 6174 7472 2500 2c69 0020     loop start.%i, .
   bd5e0:	6c2f 6f6f 2d70 7274 6361 736b 632f 6174     /loop-tracks/cta
   bd5f0:	6c3f 6e69 7365 003d 4547 0054 6170 7372     ?lines=.GET.pars
   bd600:	6e69 0067 6170 7372 6e69 2067 6166 6c69     ing.parsing fail
   bd610:	6465 6c00 6e69 7365 7400 6172 6e69 0073     ed.lines.trains.
   bd620:	656e 7478 735f 6f74 0070 6564 7473 6e69     next_stop.destin
   bd630:	7461 6f69 006e 6964 6572 7463 6f69 006e     ation.direction.
   bd640:	616c 6974 7574 6564 6c00 6e6f 6967 7574     latitude.longitu
   bd650:	6564 6200 6572 6b61 6900 206e 7267 6565     de.break.in gree
   bd660:	006e 7325 7220 6961 206c 6170 7472 2520     n.%s rail part %
   bd670:	3a69 0020                                   i: .

000bd674 <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   bd67c:	40b9 000b 40cd 000b 6341 6563 7470 2f00     .@...@..Accept./
   bd68c:	2f2a 0000 0019 0000 0003 0000 0007 0000     */..............
   bd69c:	0005 0000 000c 0000 0008 0000 0005 0000     ................
   bd6ac:	0005 0000 0005 0000 0019 0000 0005 0000     ................
   bd6bc:	000f 0000 000a 0000 000a 0000 000a 0000     ................
   bd6cc:	000a 0000 0014 0000 0000 0000 0028 0000     ............(...
   bd6dc:	0000 0000 0002 0000 0006 0000 0000 0000     ................
   bd6ec:	0000 0000 000f 0000 000a 0000 000a 0000     ................
   bd6fc:	000f 0000 000f 0000 000f 0000 0014 0000     ................
   bd70c:	0000 0000 0001 0000 0003 0000 0000 0000     ................
   bd71c:	0000 0000 000c 0000 0007 0000 0001 0000     ................
   bd72c:	000a 0000 000a 0000 000a 0000 000a 0000     ................
   bd73c:	000c 0000 0000 0000 0028 0000 0008 0000     ........(.......
   bd74c:	0003 0000 0007 0000 0001 0000 0003 0000     ................
   bd75c:	0007 0000 0007 0000 0006 0000 000a 0000     ................
   bd76c:	000a 0000 000a 0000 000a 0000 000e 0000     ................
   bd77c:	0000 0000 0028 0000 0006 0000 0003 0000     ....(...........
   bd78c:	0007 0000 0002 0000 0003 0000 4820 5454     ............ HTT
   bd79c:	2f50 2e31 0d30 000a 6c63 736f 0065 6f43     P/1.0...close.Co
   bd7ac:	6e6e 6365 6974 6e6f 4800 534f 0054 6f43     nnection.HOST.Co
   bd7bc:	746e 6e65 2d74 654c 676e 6874 5000 534f     ntent-Length.POS
   bd7cc:	0054 0a0d 0a0d 2500 3430 0078               T......%04x.

000bd7d8 <_ZTV10JsonBuffer>:
	...
   bd7e0:	6eb9 000b 6ed5 000b                         .n...n..

000bd7e8 <_ZTV10JsonParser>:
	...
   bd7f0:	6ee9 000b 6f0d 000b                         .n...o..

000bd7f8 <_ZTV13JsonReference>:
	...
   bd800:	6ea9 000b 6eab 000b 7341 6573 7472 6f69     .n...n..Assertio
   bd810:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   bd820:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   bd830:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   bd840:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   bd850:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   bd860:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   bd870:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   bd880:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   bd890:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   bd8a0:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   bd8b0:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   bd8c0:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   bd8d0:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   bd8e0:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   bd8f0:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   bd900:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   bd910:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   bd920:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   bd930:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   bd940:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   bd950:	6369 002e                                   ic..

000bd954 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd95c:	7d45 000b 7da9 000b 7e8f 000b 7dd3 000b     E}...}...~...}..
   bd96c:	7d49 000b                                   I}..

000bd970 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd978:	7d41 000b 7db7 000b 7d43 000b 7dd9 000b     A}...}..C}...}..
   bd988:	7d69 000b                                   i}..

000bd98c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd994:	7d3f 000b 7dc5 000b 8565 000b 7ddf 000b     ?}...}..e....}..
   bd9a4:	7d89 000b                                   .}..

000bd9a8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bd9b4:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bd9c6 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bd9c6:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bd9d6 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bd9d6:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000bd9e8 <_ZTVN5spark13EthernetClassE>:
	...
   bd9f0:	9013 000b 9009 000b 8fff 000b 8ff5 000b     ................
   bda00:	8fe9 000b 8fdd 000b 9299 000b 92a1 000b     ................
   bda10:	8fd1 000b 8fc9 000b 8fbf 000b 8fb5 000b     ................
   bda20:	92d1 000b                                   ....

000bda24 <_ZTV7TwoWire>:
	...
   bda2c:	9031 000b 907b 000b 9053 000b 9033 000b     1...{...S...3...
   bda3c:	905b 000b 9063 000b 906b 000b 9073 000b     [...c...k...s...

000bda4c <_ZTV9IPAddress>:
	...
   bda54:	913d 000b 912d 000b 912f 000b 7061 0070     =...-.../...app.

000bda64 <_ZTVN5spark12NetworkClassE>:
	...
   bda6c:	9259 000b 9263 000b 926d 000b 9277 000b     Y...c...m...w...
   bda7c:	9281 000b 928d 000b 9299 000b 92a1 000b     ................
   bda8c:	92a9 000b 92b5 000b 92bd 000b 92c7 000b     ................
   bda9c:	92d1 000b 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   bdaac:	7265 6f72 2072 203d 6425 0000               error = %d..

000bdab8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bdac0:	984d 000b 9871 000b 9da3 000b 987f 000b     M...q...........
   bdad0:	9851 000b                                   Q...

000bdad4 <_ZTV9TCPClient>:
	...
   bdadc:	98fd 000b 9931 000b 97c9 000b 97e3 000b     ....1...........
   bdaec:	9c39 000b 980d 000b 9aaf 000b 9841 000b     9...........A...
   bdafc:	9b41 000b 9981 000b 9add 000b 9ced 000b     A...............
   bdb0c:	9a7d 000b 9843 000b 97f5 000b 9885 000b     }...C...........
   bdb1c:	9961 000b 5925 252d 2d6d 6425 2554 3a48     a...%Y-%m-%dT%H:
   bdb2c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bdb3c <_ZTV11USARTSerial>:
	...
   bdb44:	9dbd 000b 9e29 000b 9e01 000b 93bd 000b     ....)...........
   bdb54:	9dd1 000b 9ded 000b 9ddf 000b 9dfb 000b     ................
   bdb64:	9dbf 000b 9dc3 000b                         ........

000bdb6c <_ZTV9USBSerial>:
	...
   bdb74:	9e67 000b 9ecf 000b 9ea5 000b 93bd 000b     g...............
   bdb84:	9e97 000b 9e69 000b 9e79 000b 9ec9 000b     ....i...y.......
   bdb94:	9e89 000b 9e61 000b                         ....a...

000bdb9c <_ZTVN5spark9WiFiClassE>:
	...
   bdba4:	9fc7 000b 9fbd 000b 9fb3 000b 9f69 000b     ............i...
   bdbb4:	9fa7 000b 9f9b 000b 9299 000b 92a1 000b     ................
   bdbc4:	9f8f 000b 9f87 000b 9f7d 000b 9f73 000b     ........}...s...
   bdbd4:	92d1 000b                                   ....

000bdbd8 <_ZSt7nothrow>:
	...

000bdbd9 <_ZTSSt19_Sp_make_shared_tag>:
   bdbd9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bdbe9:	6572 5f64 6174 0067 0000                     red_tag....

000bdbf4 <_ZTISt19_Sp_make_shared_tag>:
   bdbf4:	dc4c 000b dbd9 000b 6162 6973 5f63 7473     L.......basic_st
   bdc04:	6972 676e 3a3a 4d5f 635f 6572 7461 0065     ring::_M_create.

000bdc14 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bdc14:	dcac 000b dc20 000b dcd0 000b               .... .......

000bdc20 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bdc20:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bdc30:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bdc40:	0045 0000                                   E...

000bdc44 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bdc44:	0000 0000 dc14 000b a3bd 000b a3d1 000b     ................
   bdc54:	a565 000b a565 000b a43b 000b a37d 000b     e...e...;...}...
   bdc64:	a423 000b a3e5 000b a3af 000b               #...........

000bdc70 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bdc70:	dcac 000b dc7c 000b dc14 000b               ....|.......

000bdc7c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bdc7c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bdc8c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bdc9c:	666e 456f 0000 0000                         nfoE....

000bdca4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bdca4:	0000 0000 dc70 000b a465 000b a479 000b     ....p...e...y...
   bdcb4:	a565 000b a565 000b a43b 000b a37d 000b     e...e...;...}...
   bdcc4:	a539 000b a4c5 000b a48d 000b               9...........

000bdcd0 <_ZTISt9type_info>:
   bdcd0:	dc4c 000b dcd8 000b                         L.......

000bdcd8 <_ZTSSt9type_info>:
   bdcd8:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bdce8:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bdcf8:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   bdd08:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bdd18:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bdd28:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bdd38:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bdd48:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   bdd58:	6e69 7469 0079 6e61 0000 0000               inity.an....

000bdd64 <fpi.1>:
   bdd64:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bdd74:	0000 0000                                   ....

000bdd78 <fpinan.0>:
   bdd78:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000bdd90 <tinytens>:
   bdd90:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bdda0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bddb0:	6f43 64ac 0628 1168                         Co.d(.h.

000bddb8 <_ctype_>:
   bddb8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bddc8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bddd8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bdde8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bddf8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bde08:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bde18:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bde28:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bde38:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bdeb8:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bdec8:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   bded8:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bdee8:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bdef8:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bdf08:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bdf18:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bdf28:	632e 0000                                   .c..

000bdf2c <_C_numeric_locale>:
   bdf2c:	d952 000b d7d2 000b 5368 2003 0043 4f50     R.......hS. C.PO
   bdf3c:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   bdf4c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bdf5c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bdf6c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bdf7c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bdf8c:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   bdf9c:	0000 0000                                   ....

000bdfa0 <__mprec_bigtens>:
   bdfa0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bdfb0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bdfc0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bdfc8 <__mprec_tens>:
   bdfc8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bdfd8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bdfe8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bdff8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   be008:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   be018:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   be028:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   be038:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   be048:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   be058:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   be068:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   be078:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   be088:	9db4 79d9 7843 44ea                         ...yCx.D

000be090 <p05.0>:
   be090:	0005 0000 0019 0000 007d 0000               ........}...

000be09c <link_const_variable_data_end>:
   be09c:	000b621d 	.word	0x000b621d
   be0a0:	000b8fa5 	.word	0x000b8fa5
   be0a4:	000b901d 	.word	0x000b901d
   be0a8:	000b9249 	.word	0x000b9249
   be0ac:	000b93a9 	.word	0x000b93a9
   be0b0:	000b94e5 	.word	0x000b94e5
   be0b4:	000b97a5 	.word	0x000b97a5
   be0b8:	000b9da9 	.word	0x000b9da9
   be0bc:	000b9fd1 	.word	0x000b9fd1
