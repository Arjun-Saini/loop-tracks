
/Users/sainihome/Documents/GitHub/loop-tracks/master/target/3.3.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009d90  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bddb0  000bddb0  0000ddb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bddd4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f4  2003534c  000bddd8  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000092b0  20035540  20035540  00025540  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000bdfcc  000bdfcc  0001dfcc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bdff4  000bdff4  0001dff4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00140a0d  00000000  00000000  0001dff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00012c6c  00000000  00000000  0015ea05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00049d25  00000000  00000000  00171671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003280  00000000  00000000  001bb396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d0a0  00000000  00000000  001be616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000366ff  00000000  00000000  001cb6b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00044cb1  00000000  00000000  00201db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153a01  00000000  00000000  00246a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000abfc  00000000  00000000  0039a468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f006 ffc6 	bl	bafc2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f006 ffe8 	bl	bb012 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003534c 	.word	0x2003534c
   b404c:	000bddd8 	.word	0x000bddd8
   b4050:	20035540 	.word	0x20035540
   b4054:	20035540 	.word	0x20035540
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f005 fefd 	bl	b9e60 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bdd84 	.word	0x000bdd84
   b4080:	000bddac 	.word	0x000bddac

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 be92 	b.w	b5dac <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 ffb9 	bl	b6000 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f005 be9d 	b.w	b9dd0 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 bc37 	b.w	b7908 <malloc>

000b409a <_Znaj>:
   b409a:	f003 bc35 	b.w	b7908 <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f003 bc3b 	b.w	b7918 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f003 bc39 	b.w	b7918 <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40b8:	b510      	push	{r4, lr}
   b40ba:	4b03      	ldr	r3, [pc, #12]	; (b40c8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   b40bc:	6003      	str	r3, [r0, #0]
   b40be:	4604      	mov	r4, r0
   b40c0:	f002 fd70 	bl	b6ba4 <_ZN10JsonParserD1Ev>
   b40c4:	4620      	mov	r0, r4
   b40c6:	bd10      	pop	{r4, pc}
   b40c8:	000bd3c0 	.word	0x000bd3c0

000b40cc <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   b40cc:	b510      	push	{r4, lr}
   b40ce:	4604      	mov	r4, r0
   b40d0:	f7ff fff2 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f246 51bc 	movw	r1, #26044	; 0x65bc
   b40da:	f7ff ffe2 	bl	b40a2 <_ZdlPvj>
   b40de:	4620      	mov	r0, r4
   b40e0:	bd10      	pop	{r4, pc}

000b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b40e2:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40e4:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b40e6:	4606      	mov	r6, r0
   b40e8:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b40ea:	da0b      	bge.n	b4104 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b40ec:	2a0a      	cmp	r2, #10
   b40ee:	d109      	bne.n	b4104 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b40f0:	212d      	movs	r1, #45	; 0x2d
   b40f2:	f005 f839 	bl	b9168 <_ZN5Print5printEc>
            val = -n;
   b40f6:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40f8:	b2ea      	uxtb	r2, r5
   b40fa:	4630      	mov	r0, r6
    }
}
   b40fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b4100:	f005 b84b 	b.w	b919a <_ZN5Print11printNumberEmh>
            val = n;
   b4104:	4621      	mov	r1, r4
   b4106:	e7f7      	b.n	b40f8 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b4108 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   b4108:	b508      	push	{r3, lr}
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b410a:	4603      	mov	r3, r0
   b410c:	b150      	cbz	r0, b4124 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x1c>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
	if (__n > this->_M_max_size())
   b410e:	4a06      	ldr	r2, [pc, #24]	; (b4128 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x20>)
   b4110:	4290      	cmp	r0, r2
   b4112:	d901      	bls.n	b4118 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4114:	f005 ff3e 	bl	b9f94 <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4118:	200c      	movs	r0, #12
   b411a:	4358      	muls	r0, r3
      }
   b411c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4120:	f7ff bfb9 	b.w	b4096 <_Znwj>
   b4124:	bd08      	pop	{r3, pc}
   b4126:	bf00      	nop
   b4128:	0aaaaaaa 	.word	0x0aaaaaaa

000b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>:

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b412c:	f100 0308 	add.w	r3, r0, #8
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b4130:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4132:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b4134:	6003      	str	r3, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b4136:	460d      	mov	r5, r1
   b4138:	b1d9      	cbz	r1, b4172 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x46>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b413a:	4608      	mov	r0, r1
   b413c:	f006 ffb2 	bl	bb0a4 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b4140:	280f      	cmp	r0, #15
   b4142:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4146:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4148:	d907      	bls.n	b415a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b414a:	2200      	movs	r2, #0
   b414c:	a901      	add	r1, sp, #4
   b414e:	4620      	mov	r0, r4
   b4150:	f005 ff36 	bl	b9fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4154:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4156:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4158:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b415a:	4632      	mov	r2, r6
   b415c:	4629      	mov	r1, r5
   b415e:	6820      	ldr	r0, [r4, #0]
   b4160:	f005 ff69 	bl	ba036 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b4164:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b4166:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4168:	6063      	str	r3, [r4, #4]
   b416a:	2100      	movs	r1, #0
   b416c:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b416e:	b002      	add	sp, #8
   b4170:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b4172:	4801      	ldr	r0, [pc, #4]	; (b4178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0+0x4c>)
   b4174:	f005 ff11 	bl	b9f9a <_ZSt19__throw_logic_errorPKc>
   b4178:	000bd078 	.word	0x000bd078

000b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b417c:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b417e:	4603      	mov	r3, r0
   b4180:	b150      	cbz	r0, b4198 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x1c>
	if (__n > this->_M_max_size())
   b4182:	4a06      	ldr	r2, [pc, #24]	; (b419c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x20>)
   b4184:	4290      	cmp	r0, r2
   b4186:	d901      	bls.n	b418c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0+0x10>
	  std::__throw_bad_alloc();
   b4188:	f005 ff04 	bl	b9f94 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b418c:	2018      	movs	r0, #24
   b418e:	4358      	muls	r0, r3
      }
   b4190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4194:	f7ff bf7f 	b.w	b4096 <_Znwj>
   b4198:	bd08      	pop	{r3, pc}
   b419a:	bf00      	nop
   b419c:	05555555 	.word	0x05555555

000b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41a0:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41a2:	b148      	cbz	r0, b41b8 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41a4:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   b41a8:	d301      	bcc.n	b41ae <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41aa:	f005 fef3 	bl	b9f94 <_ZSt17__throw_bad_allocv>
      }
   b41ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41b2:	0080      	lsls	r0, r0, #2
   b41b4:	f7ff bf6f 	b.w	b4096 <_Znwj>
   b41b8:	bd08      	pop	{r3, pc}

000b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   b41ba:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b41bc:	b148      	cbz	r0, b41d2 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->_M_max_size())
   b41be:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   b41c2:	d301      	bcc.n	b41c8 <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   b41c4:	f005 fee6 	bl	b9f94 <_ZSt17__throw_bad_allocv>
      }
   b41c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b41cc:	00c0      	lsls	r0, r0, #3
   b41ce:	f7ff bf62 	b.w	b4096 <_Znwj>
   b41d2:	bd08      	pop	{r3, pc}

000b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>:
      basic_string(const basic_string& __str)
   b41d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b41d6:	f100 0308 	add.w	r3, r0, #8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b41da:	6003      	str	r3, [r0, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b41dc:	e9d1 5300 	ldrd	r5, r3, [r1]
      basic_string(const basic_string& __str)
   b41e0:	4604      	mov	r4, r0
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b41e2:	18ee      	adds	r6, r5, r3
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   b41e4:	b91d      	cbnz	r5, b41ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
   b41e6:	b116      	cbz	r6, b41ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x1a>
	  std::__throw_logic_error(__N("basic_string::"
   b41e8:	480c      	ldr	r0, [pc, #48]	; (b421c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x48>)
   b41ea:	f005 fed6 	bl	b9f9a <_ZSt19__throw_logic_errorPKc>
	if (__dnew > size_type(_S_local_capacity))
   b41ee:	2b0f      	cmp	r3, #15
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b41f0:	9301      	str	r3, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b41f2:	d907      	bls.n	b4204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0+0x30>
	    _M_data(_M_create(__dnew, size_type(0)));
   b41f4:	2200      	movs	r2, #0
   b41f6:	a901      	add	r1, sp, #4
   b41f8:	4620      	mov	r0, r4
   b41fa:	f005 fee1 	bl	b9fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b41fe:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4200:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4202:	60a3      	str	r3, [r4, #8]
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4204:	4632      	mov	r2, r6
   b4206:	4629      	mov	r1, r5
   b4208:	6820      	ldr	r0, [r4, #0]
   b420a:	f005 ff0f 	bl	ba02c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
   b420e:	9b01      	ldr	r3, [sp, #4]
   b4210:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4212:	6063      	str	r3, [r4, #4]
   b4214:	2100      	movs	r1, #0
   b4216:	54d1      	strb	r1, [r2, r3]
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
   b4218:	b002      	add	sp, #8
   b421a:	bd70      	pop	{r4, r5, r6, pc}
   b421c:	000bd078 	.word	0x000bd078

000b4220 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4220:	6803      	ldr	r3, [r0, #0]
   b4222:	b2c9      	uxtb	r1, r1
   b4224:	689b      	ldr	r3, [r3, #8]
   b4226:	4718      	bx	r3

000b4228 <_ZN5Print5writeEPKc.isra.0>:
    size_t write(const char *str) {
   b4228:	b513      	push	{r0, r1, r4, lr}
   b422a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b422c:	b161      	cbz	r1, b4248 <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b422e:	4608      	mov	r0, r1
   b4230:	9101      	str	r1, [sp, #4]
   b4232:	f006 ff37 	bl	bb0a4 <strlen>
   b4236:	6823      	ldr	r3, [r4, #0]
   b4238:	9901      	ldr	r1, [sp, #4]
   b423a:	68db      	ldr	r3, [r3, #12]
   b423c:	4602      	mov	r2, r0
   b423e:	4620      	mov	r0, r4
    }
   b4240:	b002      	add	sp, #8
   b4242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4246:	4718      	bx	r3
    }
   b4248:	b002      	add	sp, #8
   b424a:	bd10      	pop	{r4, pc}

000b424c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
      }
    }
  }
}

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b424c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  String inputBuffer = "";

  if(bleCount <= slaveCountExpected){
   b4250:	4c54      	ldr	r4, [pc, #336]	; (b43a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x158>)
   b4252:	4d55      	ldr	r5, [pc, #340]	; (b43a8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x15c>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4254:	4680      	mov	r8, r0
   b4256:	460e      	mov	r6, r1
  String inputBuffer = "";
   b4258:	4668      	mov	r0, sp
   b425a:	4954      	ldr	r1, [pc, #336]	; (b43ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x160>)
   b425c:	f005 f83d 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
  if(bleCount <= slaveCountExpected){
   b4260:	6822      	ldr	r2, [r4, #0]
   b4262:	682b      	ldr	r3, [r5, #0]
   b4264:	429a      	cmp	r2, r3
   b4266:	f300 8093 	bgt.w	b4390 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>
    for(int i = 0; i < len - 1; i++){
   b426a:	2700      	movs	r7, #0
   b426c:	3e01      	subs	r6, #1
   b426e:	42be      	cmp	r6, r7
   b4270:	d906      	bls.n	b4280 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b4272:	f818 1007 	ldrb.w	r1, [r8, r7]
   b4276:	4668      	mov	r0, sp
   b4278:	f005 f89d 	bl	b93b6 <_ZN6String6concatEc>
   b427c:	3701      	adds	r7, #1
   b427e:	e7f6      	b.n	b426e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x22>
      inputBuffer += (char)data[i];
      //input = atoi(inputBuffer);
    }

    if(bleCount < slaveCountExpected){
   b4280:	6822      	ldr	r2, [r4, #0]
   b4282:	682b      	ldr	r3, [r5, #0]
   b4284:	429a      	cmp	r2, r3
   b4286:	da04      	bge.n	b4292 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x46>
      txCharacteristic.setValue("\nEnter the line color of the device with the blinking LED: ");
   b4288:	4949      	ldr	r1, [pc, #292]	; (b43b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x164>)
   b428a:	484a      	ldr	r0, [pc, #296]	; (b43b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x168>)
   b428c:	2200      	movs	r2, #0
   b428e:	f003 fe35 	bl	b7efc <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
   b4292:	4e49      	ldr	r6, [pc, #292]	; (b43b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x16c>)
    }

    Wire.beginTransmission(addressArr[bleCount]);
   b4294:	f005 fe18 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b4298:	6833      	ldr	r3, [r6, #0]
   b429a:	6822      	ldr	r2, [r4, #0]
   b429c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b42a0:	f004 fde4 	bl	b8e6c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('3');
   b42a4:	f005 fe10 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b42a8:	2133      	movs	r1, #51	; 0x33
   b42aa:	f7ff ffb9 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b42ae:	f005 fe0b 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b42b2:	f004 fde2 	bl	b8e7a <_ZN7TwoWire15endTransmissionEv>

    if(bleCount > 0){
   b42b6:	6823      	ldr	r3, [r4, #0]
   b42b8:	2b00      	cmp	r3, #0
   b42ba:	dd66      	ble.n	b438a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13e>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b42bc:	493f      	ldr	r1, [pc, #252]	; (b43bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x170>)
   b42be:	4668      	mov	r0, sp
   b42c0:	f005 f8a7 	bl	b9412 <_ZNK6String6equalsEPKc>
      int colorAdr = 0;
      if(inputBuffer == "red"){
   b42c4:	2800      	cmp	r0, #0
   b42c6:	d047      	beq.n	b4358 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>
        Serial.println("receive red");
   b42c8:	f005 fcb0 	bl	b9c2c <_Z16_fetch_usbserialv>
   b42cc:	493c      	ldr	r1, [pc, #240]	; (b43c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x174>)
   b42ce:	f004 ff5a 	bl	b9186 <_ZN5Print7printlnEPKc>
        colorAdr = 0;
   b42d2:	2000      	movs	r0, #0
      // Wire.beginTransmission(addressArr[bleCount - 1]);
      // Wire.write(String(railways.at(colorAdr).colors.at(0).c_str()));
      // Wire.write(String(railways.at(colorAdr).colors.at(1).c_str()));
      // Wire.endTransmission();

      sequenceArr[bleCount - 1] = addressArr[colorAdr];
   b42d4:	6833      	ldr	r3, [r6, #0]
   b42d6:	4a3b      	ldr	r2, [pc, #236]	; (b43c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x178>)
   b42d8:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   b42dc:	6823      	ldr	r3, [r4, #0]
   b42de:	6812      	ldr	r2, [r2, #0]
   b42e0:	3b01      	subs	r3, #1
   b42e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      
      Wire.beginTransmission(addressArr[bleCount - 1]);
   b42e6:	f005 fdef 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b42ea:	6823      	ldr	r3, [r4, #0]
   b42ec:	6832      	ldr	r2, [r6, #0]
   b42ee:	3b01      	subs	r3, #1
   b42f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b42f4:	f004 fdba 	bl	b8e6c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   b42f8:	f005 fde6 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b42fc:	2134      	movs	r1, #52	; 0x34
   b42fe:	f7ff ff8f 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4302:	f005 fde1 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b4306:	f004 fdb8 	bl	b8e7a <_ZN7TwoWire15endTransmissionEv>
      if(bleCount == slaveCountExpected){
   b430a:	6822      	ldr	r2, [r4, #0]
   b430c:	682b      	ldr	r3, [r5, #0]
   b430e:	429a      	cmp	r2, r3
   b4310:	d13e      	bne.n	b4390 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>
        userInput = true;
   b4312:	4b2d      	ldr	r3, [pc, #180]	; (b43c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x17c>)
   b4314:	2201      	movs	r2, #1
   b4316:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if(bleCount == slaveCountExpected){
    delay(1000);
   b4318:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b431c:	f003 fb44 	bl	b79a8 <delay>
    Serial.println("\nSequence: ");
   b4320:	f005 fc84 	bl	b9c2c <_Z16_fetch_usbserialv>
   b4324:	4929      	ldr	r1, [pc, #164]	; (b43cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x180>)
   b4326:	f8df 809c 	ldr.w	r8, [pc, #156]	; b43c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x178>
    for(int i = 0; i < slaveCountExpected; i++){
      Serial.print(sequenceArr[i]);
      Serial.print(", ");
   b432a:	4f29      	ldr	r7, [pc, #164]	; (b43d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x184>)
    Serial.println("\nSequence: ");
   b432c:	f004 ff2b 	bl	b9186 <_ZN5Print7printlnEPKc>
    for(int i = 0; i < slaveCountExpected; i++){
   b4330:	2600      	movs	r6, #0
   b4332:	682b      	ldr	r3, [r5, #0]
   b4334:	42b3      	cmp	r3, r6
   b4336:	dd2b      	ble.n	b4390 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>
      Serial.print(sequenceArr[i]);
   b4338:	f005 fc78 	bl	b9c2c <_Z16_fetch_usbserialv>
   b433c:	f8d8 3000 	ldr.w	r3, [r8]
   b4340:	220a      	movs	r2, #10
   b4342:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   b4346:	f7ff fecc 	bl	b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      Serial.print(", ");
   b434a:	f005 fc6f 	bl	b9c2c <_Z16_fetch_usbserialv>
   b434e:	4639      	mov	r1, r7
   b4350:	f004 ff06 	bl	b9160 <_ZN5Print5printEPKc>
    for(int i = 0; i < slaveCountExpected; i++){
   b4354:	3601      	adds	r6, #1
   b4356:	e7ec      	b.n	b4332 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe6>
   b4358:	491e      	ldr	r1, [pc, #120]	; (b43d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x188>)
   b435a:	4668      	mov	r0, sp
   b435c:	f005 f859 	bl	b9412 <_ZNK6String6equalsEPKc>
      }else if(inputBuffer == "blue"){
   b4360:	b130      	cbz	r0, b4370 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x124>
        Serial.println("receive blue");
   b4362:	f005 fc63 	bl	b9c2c <_Z16_fetch_usbserialv>
   b4366:	491c      	ldr	r1, [pc, #112]	; (b43d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18c>)
   b4368:	f004 ff0d 	bl	b9186 <_ZN5Print7printlnEPKc>
        colorAdr = 1;
   b436c:	2001      	movs	r0, #1
   b436e:	e7b1      	b.n	b42d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>
   b4370:	491a      	ldr	r1, [pc, #104]	; (b43dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x190>)
   b4372:	4668      	mov	r0, sp
   b4374:	f005 f84d 	bl	b9412 <_ZNK6String6equalsEPKc>
      }else if(inputBuffer == "green"){
   b4378:	2800      	cmp	r0, #0
   b437a:	d0ab      	beq.n	b42d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>
        Serial.println("receive green");
   b437c:	f005 fc56 	bl	b9c2c <_Z16_fetch_usbserialv>
   b4380:	4917      	ldr	r1, [pc, #92]	; (b43e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x194>)
   b4382:	f004 ff00 	bl	b9186 <_ZN5Print7printlnEPKc>
        colorAdr = 2;
   b4386:	2002      	movs	r0, #2
   b4388:	e7a4      	b.n	b42d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>
  if(bleCount == slaveCountExpected){
   b438a:	682a      	ldr	r2, [r5, #0]
   b438c:	4293      	cmp	r3, r2
   b438e:	d0c3      	beq.n	b4318 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xcc>
    }
    // BLE.disconnect();
    // BLE.off();
  }

  bleCount++;
   b4390:	6823      	ldr	r3, [r4, #0]
  String inputBuffer = "";
   b4392:	4668      	mov	r0, sp
  bleCount++;
   b4394:	3301      	adds	r3, #1
   b4396:	6023      	str	r3, [r4, #0]
  String inputBuffer = "";
   b4398:	f004 ff54 	bl	b9244 <_ZN6StringD1Ev>
}
   b439c:	b004      	add	sp, #16
   b439e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b43a2:	bf00      	nop
   b43a4:	20035588 	.word	0x20035588
   b43a8:	2003535c 	.word	0x2003535c
   b43ac:	000bd4ba 	.word	0x000bd4ba
   b43b0:	000bd0a2 	.word	0x000bd0a2
   b43b4:	2003e6a8 	.word	0x2003e6a8
   b43b8:	2003557c 	.word	0x2003557c
   b43bc:	000bd0e6 	.word	0x000bd0e6
   b43c0:	000bd0de 	.word	0x000bd0de
   b43c4:	2003e698 	.word	0x2003e698
   b43c8:	2003e6b0 	.word	0x2003e6b0
   b43cc:	000bd105 	.word	0x000bd105
   b43d0:	000bd2e8 	.word	0x000bd2e8
   b43d4:	000bd0f2 	.word	0x000bd0f2
   b43d8:	000bd0ea 	.word	0x000bd0ea
   b43dc:	000bd0ff 	.word	0x000bd0ff
   b43e0:	000bd0f7 	.word	0x000bd0f7

000b43e4 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   b43e4:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b43e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b43e8:	4604      	mov	r4, r0
   b43ea:	460d      	mov	r5, r1
      if (&__x != this)
   b43ec:	d025      	beq.n	b443a <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x56>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b43ee:	e9d1 7100 	ldrd	r7, r1, [r1]
			 - this->_M_impl._M_start); }
   b43f2:	6800      	ldr	r0, [r0, #0]
   b43f4:	68a3      	ldr	r3, [r4, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b43f6:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b43f8:	1a1b      	subs	r3, r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   b43fa:	429e      	cmp	r6, r3
   b43fc:	d91e      	bls.n	b443c <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   b43fe:	10f0      	asrs	r0, r6, #3
   b4400:	f7ff fedb 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
   b4404:	2300      	movs	r3, #0
   b4406:	4605      	mov	r5, r0
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   b4408:	429e      	cmp	r6, r3
   b440a:	d00a      	beq.n	b4422 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x3e>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b440c:	18ea      	adds	r2, r5, r3
   b440e:	bf1c      	itt	ne
   b4410:	18f9      	addne	r1, r7, r3
   b4412:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b4416:	f103 0308 	add.w	r3, r3, #8
   b441a:	bf18      	it	ne
   b441c:	e9c2 0100 	strdne	r0, r1, [r2]
   b4420:	e7f2      	b.n	b4408 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x24>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4422:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4424:	b118      	cbz	r0, b442e <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x4a>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
   b4426:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4428:	1a09      	subs	r1, r1, r0
   b442a:	f7ff fe3a 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b442e:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4430:	4435      	add	r5, r6
   b4432:	60a5      	str	r5, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4434:	6823      	ldr	r3, [r4, #0]
   b4436:	4433      	add	r3, r6
   b4438:	6063      	str	r3, [r4, #4]
	}
      return *this;
    }
   b443a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b443c:	6862      	ldr	r2, [r4, #4]
   b443e:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   b4440:	4296      	cmp	r6, r2
   b4442:	d806      	bhi.n	b4452 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x6e>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   b4444:	42b9      	cmp	r1, r7
   b4446:	d0f5      	beq.n	b4434 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4448:	4632      	mov	r2, r6
   b444a:	4639      	mov	r1, r7
   b444c:	f006 fdc7 	bl	bafde <memmove>

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4450:	e7f0      	b.n	b4434 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
	  if (_Num)
   b4452:	b112      	cbz	r2, b445a <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x76>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4454:	4639      	mov	r1, r7
   b4456:	f006 fdc2 	bl	bafde <memmove>
   b445a:	e9d4 2700 	ldrd	r2, r7, [r4]
   b445e:	1abb      	subs	r3, r7, r2
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4460:	682a      	ldr	r2, [r5, #0]
   b4462:	686d      	ldr	r5, [r5, #4]
   b4464:	441a      	add	r2, r3
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   b4466:	1aad      	subs	r5, r5, r2
					  __x._M_impl._M_finish,
   b4468:	2300      	movs	r3, #0
	      for (; __first != __last; ++__first, (void)++__cur)
   b446a:	429d      	cmp	r5, r3
   b446c:	d0e2      	beq.n	b4434 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x50>
   b446e:	eb17 0c03 	adds.w	ip, r7, r3
   b4472:	bf1c      	itt	ne
   b4474:	18d1      	addne	r1, r2, r3
   b4476:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b447a:	f103 0308 	add.w	r3, r3, #8
   b447e:	bf18      	it	ne
   b4480:	e9cc 0100 	strdne	r0, r1, [ip]
   b4484:	e7f1      	b.n	b446a <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0+0x86>
	...

000b4488 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>:
      if (&__x != this)
   b4488:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b448a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b448e:	4604      	mov	r4, r0
   b4490:	468a      	mov	sl, r1
      if (&__x != this)
   b4492:	d036      	beq.n	b4502 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7a>
   b4494:	e9d1 5b00 	ldrd	r5, fp, [r1]
			 - this->_M_impl._M_start); }
   b4498:	f8d0 9000 	ldr.w	r9, [r0]
   b449c:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b449e:	4a39      	ldr	r2, [pc, #228]	; (b4584 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xfc>)
   b44a0:	ebab 0705 	sub.w	r7, fp, r5
			 - this->_M_impl._M_start); }
   b44a4:	eba3 0309 	sub.w	r3, r3, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b44a8:	ea4f 08e7 	mov.w	r8, r7, asr #3
	  if (__xlen > capacity())
   b44ac:	42bb      	cmp	r3, r7
   b44ae:	fb02 f808 	mul.w	r8, r2, r8
   b44b2:	d228      	bcs.n	b4506 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x7e>
	  pointer __result = this->_M_allocate(__n);
   b44b4:	4640      	mov	r0, r8
   b44b6:	f7ff fe61 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
   b44ba:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   b44bc:	4680      	mov	r8, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b44be:	45ab      	cmp	fp, r5
   b44c0:	d00a      	beq.n	b44d8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x50>
   b44c2:	f1b8 0f00 	cmp.w	r8, #0
   b44c6:	d003      	beq.n	b44d0 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x48>
   b44c8:	4629      	mov	r1, r5
   b44ca:	4640      	mov	r0, r8
   b44cc:	f7ff fe82 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b44d0:	f108 0818 	add.w	r8, r8, #24
   b44d4:	3518      	adds	r5, #24
   b44d6:	e7f2      	b.n	b44be <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x36>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b44d8:	e9d4 5800 	ldrd	r5, r8, [r4]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   b44dc:	45a8      	cmp	r8, r5
   b44de:	d004      	beq.n	b44ea <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x62>
      { _M_dispose(); }
   b44e0:	4628      	mov	r0, r5
   b44e2:	f005 fd8f 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b44e6:	3518      	adds	r5, #24
   b44e8:	e7f8      	b.n	b44dc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x54>
	      _M_deallocate(this->_M_impl._M_start,
   b44ea:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b44ec:	b118      	cbz	r0, b44f6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x6e>
			    - this->_M_impl._M_start);
   b44ee:	68a1      	ldr	r1, [r4, #8]
   b44f0:	1a09      	subs	r1, r1, r0
   b44f2:	f7ff fdd6 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b44f6:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b44f8:	443e      	add	r6, r7
   b44fa:	60a6      	str	r6, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b44fc:	6823      	ldr	r3, [r4, #0]
   b44fe:	443b      	add	r3, r7
   b4500:	6063      	str	r3, [r4, #4]
    }
   b4502:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4506:	6846      	ldr	r6, [r0, #4]
   b4508:	eba6 0609 	sub.w	r6, r6, r9
	  else if (size() >= __xlen)
   b450c:	42b7      	cmp	r7, r6
   b450e:	d819      	bhi.n	b4544 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xbc>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4510:	4646      	mov	r6, r8
   b4512:	46ca      	mov	sl, r9
   b4514:	2e00      	cmp	r6, #0
   b4516:	dd08      	ble.n	b452a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xa2>
		  }
	      }
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
	  }
#endif
	this->_M_assign(__str);
   b4518:	4629      	mov	r1, r5
   b451a:	4650      	mov	r0, sl
   b451c:	f005 fd90 	bl	ba040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b4520:	3518      	adds	r5, #24
	      ++__result;
   b4522:	f10a 0a18 	add.w	sl, sl, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4526:	3e01      	subs	r6, #1
   b4528:	e7f4      	b.n	b4514 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x8c>
   b452a:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   b452e:	2518      	movs	r5, #24
      : _M_current(__i) { }
   b4530:	6866      	ldr	r6, [r4, #4]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4532:	fb05 9508 	mla	r5, r5, r8, r9
	  for (; __first != __last; ++__first)
   b4536:	42ae      	cmp	r6, r5
   b4538:	d0e0      	beq.n	b44fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
      { _M_dispose(); }
   b453a:	4628      	mov	r0, r5
   b453c:	f005 fd62 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b4540:	3518      	adds	r5, #24
      {
	++_M_current;
	return *this;
   b4542:	e7f8      	b.n	b4536 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xae>
   b4544:	10f6      	asrs	r6, r6, #3
   b4546:	4356      	muls	r6, r2
   b4548:	2e00      	cmp	r6, #0
   b454a:	dd08      	ble.n	b455e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xd6>
	this->_M_assign(__str);
   b454c:	4629      	mov	r1, r5
   b454e:	4648      	mov	r0, r9
   b4550:	f005 fd76 	bl	ba040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	      ++__first;
   b4554:	3518      	adds	r5, #24
	      ++__result;
   b4556:	f109 0918 	add.w	r9, r9, #24
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b455a:	3e01      	subs	r6, #1
   b455c:	e7f4      	b.n	b4548 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xc0>
   b455e:	e9d4 5600 	ldrd	r5, r6, [r4]
   b4562:	1b71      	subs	r1, r6, r5
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b4564:	f8da 5000 	ldr.w	r5, [sl]
					  __x._M_impl._M_finish,
   b4568:	f8da 8004 	ldr.w	r8, [sl, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b456c:	440d      	add	r5, r1
   b456e:	45a8      	cmp	r8, r5
   b4570:	d0c4      	beq.n	b44fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4572:	b11e      	cbz	r6, b457c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xf4>
   b4574:	4629      	mov	r1, r5
   b4576:	4630      	mov	r0, r6
   b4578:	f7ff fe2c 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b457c:	3518      	adds	r5, #24
   b457e:	3618      	adds	r6, #24
   b4580:	e7f5      	b.n	b456e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0+0xe6>
   b4582:	bf00      	nop
   b4584:	aaaaaaab 	.word	0xaaaaaaab

000b4588 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4588:	b40e      	push	{r1, r2, r3}
   b458a:	b503      	push	{r0, r1, lr}
   b458c:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b458e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4590:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4594:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4596:	f004 fe1e 	bl	b91d6 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b459a:	b002      	add	sp, #8
   b459c:	f85d eb04 	ldr.w	lr, [sp], #4
   b45a0:	b003      	add	sp, #12
   b45a2:	4770      	bx	lr

000b45a4 <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b45a4:	b40e      	push	{r1, r2, r3}
   b45a6:	b503      	push	{r0, r1, lr}
   b45a8:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   b45aa:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b45ac:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b45b0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b45b2:	f004 fe10 	bl	b91d6 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b45b6:	b002      	add	sp, #8
   b45b8:	f85d eb04 	ldr.w	lr, [sp], #4
   b45bc:	b003      	add	sp, #12
   b45be:	4770      	bx	lr

000b45c0 <_Z17acquireWireBufferv>:

hal_i2c_config_t acquireWireBuffer() {
   b45c0:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b45c2:	f44f 7500 	mov.w	r5, #512	; 0x200
   b45c6:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b45c8:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b45ca:	6003      	str	r3, [r0, #0]
   b45cc:	6085      	str	r5, [r0, #8]
   b45ce:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b45d0:	4905      	ldr	r1, [pc, #20]	; (b45e8 <_Z17acquireWireBufferv+0x28>)
   b45d2:	4628      	mov	r0, r5
   b45d4:	f005 fcdc 	bl	b9f90 <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b45d8:	4903      	ldr	r1, [pc, #12]	; (b45e8 <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b45da:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b45dc:	4628      	mov	r0, r5
   b45de:	f005 fcd7 	bl	b9f90 <_ZnajRKSt9nothrow_t>
    };
   b45e2:	60e0      	str	r0, [r4, #12]
    return config;
   b45e4:	4620      	mov	r0, r4
   b45e6:	bd38      	pop	{r3, r4, r5, pc}
   b45e8:	000bd8c0 	.word	0x000bd8c0

000b45ec <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b45ec:	b510      	push	{r4, lr}
   b45ee:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b45f0:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b45f2:	b118      	cbz	r0, b45fc <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b45f4:	68a1      	ldr	r1, [r4, #8]
   b45f6:	1a09      	subs	r1, r1, r0
   b45f8:	f7ff fd53 	bl	b40a2 <_ZdlPvj>
      }
   b45fc:	4620      	mov	r0, r4
   b45fe:	bd10      	pop	{r4, pc}

000b4600 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4600:	b510      	push	{r4, lr}
   b4602:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4604:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b4606:	b118      	cbz	r0, b4610 <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4608:	68a1      	ldr	r1, [r4, #8]
   b460a:	1a09      	subs	r1, r1, r0
   b460c:	f7ff fd49 	bl	b40a2 <_ZdlPvj>
      }
   b4610:	4620      	mov	r0, r4
   b4612:	bd10      	pop	{r4, pc}

000b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
   b4614:	b510      	push	{r4, lr}
   b4616:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   b4618:	6800      	ldr	r0, [r0, #0]
	if (__p)
   b461a:	b118      	cbz	r0, b4624 <_ZNSt12_Vector_baseIiSaIiEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b461c:	68a1      	ldr	r1, [r4, #8]
   b461e:	1a09      	subs	r1, r1, r0
   b4620:	f7ff fd3f 	bl	b40a2 <_ZdlPvj>
      }
   b4624:	4620      	mov	r0, r4
   b4626:	bd10      	pop	{r4, pc}

000b4628 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   b4628:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b462a:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   b462e:	4604      	mov	r4, r0
	  for (; __first != __last; ++__first)
   b4630:	42ae      	cmp	r6, r5
   b4632:	d004      	beq.n	b463e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x16>
      { _M_dispose(); }
   b4634:	4628      	mov	r0, r5
   b4636:	f005 fce5 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b463a:	3518      	adds	r5, #24
   b463c:	e7f8      	b.n	b4630 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   b463e:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4640:	b118      	cbz	r0, b464a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4642:	68a1      	ldr	r1, [r4, #8]
   b4644:	1a09      	subs	r1, r1, r0
   b4646:	f7ff fd2c 	bl	b40a2 <_ZdlPvj>
      }
   b464a:	4620      	mov	r0, r4
   b464c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4650 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>:

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4650:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      vector(size_type __n, const value_type& __value,
   b4654:	b570      	push	{r4, r5, r6, lr}
   b4656:	4604      	mov	r4, r0
   b4658:	460d      	mov	r5, r1
   b465a:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b465c:	d302      	bcc.n	b4664 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x14>
	  __throw_length_error(
   b465e:	480c      	ldr	r0, [pc, #48]	; (b4690 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x40>)
   b4660:	f005 fc9e 	bl	b9fa0 <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4664:	2300      	movs	r3, #0
   b4666:	e9c0 3300 	strd	r3, r3, [r0]
   b466a:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b466c:	4608      	mov	r0, r1
   b466e:	f7ff fd97 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4672:	eb00 0385 	add.w	r3, r0, r5, lsl #2
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4676:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b467a:	60a3      	str	r3, [r4, #8]
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   b467c:	b12d      	cbz	r5, b468a <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
   b467e:	6832      	ldr	r2, [r6, #0]
      for (; __first != __last; ++__first)
   b4680:	4283      	cmp	r3, r0
   b4682:	d002      	beq.n	b468a <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x3a>
	*__first = __tmp;
   b4684:	f840 2b04 	str.w	r2, [r0], #4
      for (; __first != __last; ++__first)
   b4688:	e7fa      	b.n	b4680 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_+0x30>
	this->_M_impl._M_finish =
   b468a:	6060      	str	r0, [r4, #4]
      { _M_fill_initialize(__n, __value); }
   b468c:	4620      	mov	r0, r4
   b468e:	bd70      	pop	{r4, r5, r6, pc}
   b4690:	000bd111 	.word	0x000bd111

000b4694 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
   b4694:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4698:	2400      	movs	r4, #0
      vector(initializer_list<value_type> __l,
   b469a:	ab02      	add	r3, sp, #8
   b469c:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b46a0:	e9c0 4400 	strd	r4, r4, [r0]
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   b46a4:	4613      	mov	r3, r2
      vector(initializer_list<value_type> __l,
   b46a6:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b46a8:	6084      	str	r4, [r0, #8]
   b46aa:	00d7      	lsls	r7, r2, #3
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b46ac:	f342 001c 	sbfx	r0, r2, #0, #29
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b46b0:	4a10      	ldr	r2, [pc, #64]	; (b46f4 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x60>)
   b46b2:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   b46b6:	4688      	mov	r8, r1
   b46b8:	d202      	bcs.n	b46c0 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x2c>
	  __throw_length_error(
   b46ba:	480f      	ldr	r0, [pc, #60]	; (b46f8 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x64>)
   b46bc:	f005 fc70 	bl	b9fa0 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b46c0:	f7ff fd7b 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b46c4:	19c6      	adds	r6, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b46c6:	4602      	mov	r2, r0
   b46c8:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b46ca:	60ae      	str	r6, [r5, #8]
   b46cc:	4623      	mov	r3, r4
   b46ce:	429f      	cmp	r7, r3
   b46d0:	d00b      	beq.n	b46ea <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x56>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b46d2:	18d4      	adds	r4, r2, r3
   b46d4:	bf1c      	itt	ne
   b46d6:	eb08 0103 	addne.w	r1, r8, r3
   b46da:	e9d1 0100 	ldrdne	r0, r1, [r1]
   b46de:	f103 0308 	add.w	r3, r3, #8
   b46e2:	bf18      	it	ne
   b46e4:	e9c4 0100 	strdne	r0, r1, [r4]
   b46e8:	e7f1      	b.n	b46ce <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_+0x3a>
      }
   b46ea:	4628      	mov	r0, r5
	  this->_M_impl._M_finish =
   b46ec:	606e      	str	r6, [r5, #4]
      }
   b46ee:	b002      	add	sp, #8
   b46f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b46f4:	7ffffff8 	.word	0x7ffffff8
   b46f8:	000bd111 	.word	0x000bd111

000b46fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>:
      vector(initializer_list<value_type> __l,
   b46fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4700:	ab02      	add	r3, sp, #8
   b4702:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4706:	2300      	movs	r3, #0
   b4708:	e9c0 3300 	strd	r3, r3, [r0]
   b470c:	6083      	str	r3, [r0, #8]
   b470e:	4616      	mov	r6, r2
   b4710:	2318      	movs	r3, #24
   b4712:	435e      	muls	r6, r3
   b4714:	4b10      	ldr	r3, [pc, #64]	; (b4758 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x5c>)
      vector(initializer_list<value_type> __l,
   b4716:	4604      	mov	r4, r0
   b4718:	10f0      	asrs	r0, r6, #3
   b471a:	4358      	muls	r0, r3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b471c:	4b0f      	ldr	r3, [pc, #60]	; (b475c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x60>)
   b471e:	429e      	cmp	r6, r3
   b4720:	460f      	mov	r7, r1
   b4722:	eb01 0806 	add.w	r8, r1, r6
   b4726:	d902      	bls.n	b472e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x32>
	  __throw_length_error(
   b4728:	480d      	ldr	r0, [pc, #52]	; (b4760 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x64>)
   b472a:	f005 fc39 	bl	b9fa0 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b472e:	f7ff fd25 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4732:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4734:	4605      	mov	r5, r0
   b4736:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4738:	60a6      	str	r6, [r4, #8]
   b473a:	45b8      	cmp	r8, r7
   b473c:	d007      	beq.n	b474e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x52>
   b473e:	b11d      	cbz	r5, b4748 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x4c>
   b4740:	4639      	mov	r1, r7
   b4742:	4628      	mov	r0, r5
   b4744:	f7ff fd46 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b4748:	3718      	adds	r7, #24
   b474a:	3518      	adds	r5, #24
   b474c:	e7f5      	b.n	b473a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_+0x3e>
      }
   b474e:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
   b4750:	6065      	str	r5, [r4, #4]
      }
   b4752:	b002      	add	sp, #8
   b4754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4758:	aaaaaaab 	.word	0xaaaaaaab
   b475c:	7ffffff8 	.word	0x7ffffff8
   b4760:	000bd111 	.word	0x000bd111

000b4764 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
   b4764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4766:	e9d1 3700 	ldrd	r3, r7, [r1]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b476a:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b476c:	1aff      	subs	r7, r7, r3
      vector(const vector& __x)
   b476e:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4770:	e9c0 5500 	strd	r5, r5, [r0]
   b4774:	6085      	str	r5, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4776:	10f8      	asrs	r0, r7, #3
      vector(const vector& __x)
   b4778:	460e      	mov	r6, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b477a:	f7ff fd1e 	bl	b41ba <_ZNSt12_Vector_baseI10CheckpointSaIS0_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b477e:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4782:	4407      	add	r7, r0
   b4784:	60a7      	str	r7, [r4, #8]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4786:	e9d6 7600 	ldrd	r7, r6, [r6]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b478a:	4602      	mov	r2, r0
   b478c:	1bf6      	subs	r6, r6, r7
      : _M_current(__i) { }
   b478e:	462b      	mov	r3, r5
   b4790:	42b3      	cmp	r3, r6
   b4792:	eb02 0503 	add.w	r5, r2, r3
   b4796:	d006      	beq.n	b47a6 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x42>
   b4798:	b11d      	cbz	r5, b47a2 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x3e>
   b479a:	18f9      	adds	r1, r7, r3
   b479c:	c903      	ldmia	r1, {r0, r1}
   b479e:	e885 0003 	stmia.w	r5, {r0, r1}
   b47a2:	3308      	adds	r3, #8
   b47a4:	e7f4      	b.n	b4790 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_+0x2c>
	this->_M_impl._M_finish =
   b47a6:	6065      	str	r5, [r4, #4]
      }
   b47a8:	4620      	mov	r0, r4
   b47aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b47ac <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
   b47ac:	b508      	push	{r3, lr}
      { return _M_string_length; }
   b47ae:	6842      	ldr	r2, [r0, #4]
	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
    { return (__lhs.size() == __rhs.size()
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b47b0:	684b      	ldr	r3, [r1, #4]
   b47b2:	429a      	cmp	r2, r3
   b47b4:	d108      	bne.n	b47c8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1c>
	if (__n == 0)
   b47b6:	b14a      	cbz	r2, b47cc <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x20>
	return __builtin_memcmp(__s1, __s2, __n);
   b47b8:	6809      	ldr	r1, [r1, #0]
   b47ba:	6800      	ldr	r0, [r0, #0]
   b47bc:	f006 fbf1 	bl	bafa2 <memcmp>
   b47c0:	fab0 f080 	clz	r0, r0
   b47c4:	0940      	lsrs	r0, r0, #5
						    __lhs.size())); }
   b47c6:	bd08      	pop	{r3, pc}
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
   b47c8:	2000      	movs	r0, #0
   b47ca:	e7fc      	b.n	b47c6 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>
   b47cc:	2001      	movs	r0, #1
   b47ce:	e7fa      	b.n	b47c6 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x1a>

000b47d0 <_Z16randomizeAddressv>:
void randomizeAddress(){
   b47d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while(slaveCount != slaveCountExpected){
   b47d4:	4dc3      	ldr	r5, [pc, #780]	; (b4ae4 <_Z16randomizeAddressv+0x314>)
   b47d6:	f8df 8344 	ldr.w	r8, [pc, #836]	; b4b1c <_Z16randomizeAddressv+0x34c>
void randomizeAddress(){
   b47da:	b08f      	sub	sp, #60	; 0x3c
  while(slaveCount != slaveCountExpected){
   b47dc:	682a      	ldr	r2, [r5, #0]
   b47de:	f8d8 3000 	ldr.w	r3, [r8]
   b47e2:	429a      	cmp	r2, r3
   b47e4:	f000 80ff 	beq.w	b49e6 <_Z16randomizeAddressv+0x216>
    slaveCount = 0;
   b47e8:	2300      	movs	r3, #0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b47ea:	f8df 9334 	ldr.w	r9, [pc, #820]	; b4b20 <_Z16randomizeAddressv+0x350>
   b47ee:	f8df a334 	ldr.w	sl, [pc, #820]	; b4b24 <_Z16randomizeAddressv+0x354>
        String inputBuffer = "";
   b47f2:	4fbd      	ldr	r7, [pc, #756]	; (b4ae8 <_Z16randomizeAddressv+0x318>)
    slaveCount = 0;
   b47f4:	602b      	str	r3, [r5, #0]
    for(int i = 8; i <= 119; i++){
   b47f6:	2408      	movs	r4, #8
      Serial.println("\nrequest code 1, address: " + String(i));
   b47f8:	f005 fa18 	bl	b9c2c <_Z16_fetch_usbserialv>
   b47fc:	4649      	mov	r1, r9
   b47fe:	4606      	mov	r6, r0
   b4800:	a80a      	add	r0, sp, #40	; 0x28
   b4802:	f004 fd6a 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
   b4806:	220a      	movs	r2, #10
   b4808:	4621      	mov	r1, r4
   b480a:	a806      	add	r0, sp, #24
   b480c:	f004 fda5 	bl	b935a <_ZN6StringC1Eih>
   b4810:	a906      	add	r1, sp, #24
   b4812:	a80a      	add	r0, sp, #40	; 0x28
   b4814:	f004 fddc 	bl	b93d0 <_ZplRK15StringSumHelperRK6String>
   b4818:	6801      	ldr	r1, [r0, #0]
   b481a:	4630      	mov	r0, r6
   b481c:	f004 fcb3 	bl	b9186 <_ZN5Print7printlnEPKc>
   b4820:	a806      	add	r0, sp, #24
   b4822:	f004 fd0f 	bl	b9244 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4826:	a80a      	add	r0, sp, #40	; 0x28
   b4828:	f004 fd0c 	bl	b9244 <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   b482c:	f005 fb4c 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b4830:	4621      	mov	r1, r4
   b4832:	f004 fb1b 	bl	b8e6c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   b4836:	f005 fb47 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b483a:	2131      	movs	r1, #49	; 0x31
   b483c:	f7ff fcf0 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
      Wire.endTransmission();
   b4840:	fa5f fb84 	uxtb.w	fp, r4
   b4844:	f005 fb40 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b4848:	f004 fb17 	bl	b8e7a <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   b484c:	f005 fb3c 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b4850:	2218      	movs	r2, #24
   b4852:	4659      	mov	r1, fp
   b4854:	f004 fb03 	bl	b8e5e <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   b4858:	f005 fb36 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b485c:	6803      	ldr	r3, [r0, #0]
   b485e:	691b      	ldr	r3, [r3, #16]
   b4860:	4798      	blx	r3
   b4862:	2800      	cmp	r0, #0
   b4864:	f340 80ba 	ble.w	b49dc <_Z16randomizeAddressv+0x20c>
        Serial.println("transmission recieved from: " + String(i));
   b4868:	f005 f9e0 	bl	b9c2c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b486c:	4651      	mov	r1, sl
   b486e:	4606      	mov	r6, r0
   b4870:	a80a      	add	r0, sp, #40	; 0x28
   b4872:	f004 fd32 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
   b4876:	220a      	movs	r2, #10
   b4878:	4621      	mov	r1, r4
   b487a:	a806      	add	r0, sp, #24
   b487c:	f004 fd6d 	bl	b935a <_ZN6StringC1Eih>
   b4880:	a906      	add	r1, sp, #24
   b4882:	a80a      	add	r0, sp, #40	; 0x28
   b4884:	f004 fda4 	bl	b93d0 <_ZplRK15StringSumHelperRK6String>
   b4888:	6801      	ldr	r1, [r0, #0]
   b488a:	4630      	mov	r0, r6
   b488c:	f004 fc7b 	bl	b9186 <_ZN5Print7printlnEPKc>
   b4890:	a806      	add	r0, sp, #24
   b4892:	f004 fcd7 	bl	b9244 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4896:	a80a      	add	r0, sp, #40	; 0x28
   b4898:	f004 fcd4 	bl	b9244 <_ZN6StringD1Ev>
        slaveCount++;
   b489c:	682b      	ldr	r3, [r5, #0]
        String inputBuffer = "";
   b489e:	4639      	mov	r1, r7
        slaveCount++;
   b48a0:	3301      	adds	r3, #1
        String inputBuffer = "";
   b48a2:	a802      	add	r0, sp, #8
        slaveCount++;
   b48a4:	602b      	str	r3, [r5, #0]
        String inputBuffer = "";
   b48a6:	f004 fd18 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
   b48aa:	2618      	movs	r6, #24
          c = Wire.read();
   b48ac:	f005 fb0c 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b48b0:	6803      	ldr	r3, [r0, #0]
   b48b2:	695b      	ldr	r3, [r3, #20]
   b48b4:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b48b6:	b2c1      	uxtb	r1, r0
   b48b8:	a802      	add	r0, sp, #8
   b48ba:	f004 fd7c 	bl	b93b6 <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   b48be:	3e01      	subs	r6, #1
   b48c0:	d1f4      	bne.n	b48ac <_Z16randomizeAddressv+0xdc>
        Wire.beginTransmission(i);
   b48c2:	f005 fb01 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b48c6:	4621      	mov	r1, r4
   b48c8:	f004 fad0 	bl	b8e6c <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   b48cc:	f005 fafc 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b48d0:	9902      	ldr	r1, [sp, #8]
   b48d2:	f7ff fca9 	bl	b4228 <_ZN5Print5writeEPKc.isra.0>
        Serial.println("device id: " + inputBuffer);
   b48d6:	f005 f9a9 	bl	b9c2c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b48da:	4984      	ldr	r1, [pc, #528]	; (b4aec <_Z16randomizeAddressv+0x31c>)
   b48dc:	4606      	mov	r6, r0
   b48de:	a80a      	add	r0, sp, #40	; 0x28
   b48e0:	f004 fcfb 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
   b48e4:	a902      	add	r1, sp, #8
   b48e6:	a80a      	add	r0, sp, #40	; 0x28
   b48e8:	f004 fd72 	bl	b93d0 <_ZplRK15StringSumHelperRK6String>
   b48ec:	6801      	ldr	r1, [r0, #0]
   b48ee:	4630      	mov	r0, r6
   b48f0:	f004 fc49 	bl	b9186 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b48f4:	a80a      	add	r0, sp, #40	; 0x28
   b48f6:	f004 fca5 	bl	b9244 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b48fa:	f005 fae5 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b48fe:	f004 fabc 	bl	b8e7a <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   b4902:	f005 f993 	bl	b9c2c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4906:	497a      	ldr	r1, [pc, #488]	; (b4af0 <_Z16randomizeAddressv+0x320>)
   b4908:	4606      	mov	r6, r0
   b490a:	a80a      	add	r0, sp, #40	; 0x28
   b490c:	f004 fce5 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
   b4910:	220a      	movs	r2, #10
   b4912:	4621      	mov	r1, r4
   b4914:	a806      	add	r0, sp, #24
   b4916:	f004 fd20 	bl	b935a <_ZN6StringC1Eih>
   b491a:	a906      	add	r1, sp, #24
   b491c:	a80a      	add	r0, sp, #40	; 0x28
   b491e:	f004 fd57 	bl	b93d0 <_ZplRK15StringSumHelperRK6String>
   b4922:	6801      	ldr	r1, [r0, #0]
   b4924:	4630      	mov	r0, r6
   b4926:	f004 fc2e 	bl	b9186 <_ZN5Print7printlnEPKc>
   b492a:	a806      	add	r0, sp, #24
   b492c:	f004 fc8a 	bl	b9244 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4930:	a80a      	add	r0, sp, #40	; 0x28
   b4932:	f004 fc87 	bl	b9244 <_ZN6StringD1Ev>
        Wire.beginTransmission(i);
   b4936:	f005 fac7 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b493a:	4621      	mov	r1, r4
   b493c:	f004 fa96 	bl	b8e6c <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   b4940:	f005 fac2 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b4944:	2132      	movs	r1, #50	; 0x32
   b4946:	f7ff fc6b 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();
   b494a:	f005 fabd 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b494e:	f004 fa94 	bl	b8e7a <_ZN7TwoWire15endTransmissionEv>
        Serial.println("request code 2, address: " + String(i));
   b4952:	f005 f96b 	bl	b9c2c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b4956:	4967      	ldr	r1, [pc, #412]	; (b4af4 <_Z16randomizeAddressv+0x324>)
   b4958:	4606      	mov	r6, r0
   b495a:	a80a      	add	r0, sp, #40	; 0x28
   b495c:	f004 fcbd 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
   b4960:	220a      	movs	r2, #10
   b4962:	4621      	mov	r1, r4
   b4964:	a806      	add	r0, sp, #24
   b4966:	f004 fcf8 	bl	b935a <_ZN6StringC1Eih>
   b496a:	a906      	add	r1, sp, #24
   b496c:	a80a      	add	r0, sp, #40	; 0x28
   b496e:	f004 fd2f 	bl	b93d0 <_ZplRK15StringSumHelperRK6String>
   b4972:	6801      	ldr	r1, [r0, #0]
   b4974:	4630      	mov	r0, r6
   b4976:	f004 fc06 	bl	b9186 <_ZN5Print7printlnEPKc>
   b497a:	a806      	add	r0, sp, #24
   b497c:	f004 fc62 	bl	b9244 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4980:	a80a      	add	r0, sp, #40	; 0x28
   b4982:	f004 fc5f 	bl	b9244 <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   b4986:	f005 fa9f 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b498a:	2204      	movs	r2, #4
   b498c:	4659      	mov	r1, fp
   b498e:	f004 fa66 	bl	b8e5e <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   b4992:	4639      	mov	r1, r7
   b4994:	a802      	add	r0, sp, #8
   b4996:	f004 fcce 	bl	b9336 <_ZN6StringaSEPKc>
   b499a:	2604      	movs	r6, #4
          inputBuffer += (char)Wire.read();
   b499c:	f005 fa94 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b49a0:	6803      	ldr	r3, [r0, #0]
   b49a2:	695b      	ldr	r3, [r3, #20]
   b49a4:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   b49a6:	b2c1      	uxtb	r1, r0
   b49a8:	a802      	add	r0, sp, #8
   b49aa:	f004 fd04 	bl	b93b6 <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   b49ae:	3e01      	subs	r6, #1
   b49b0:	d1f4      	bne.n	b499c <_Z16randomizeAddressv+0x1cc>
        Serial.println("conflict verification: " + inputBuffer);
   b49b2:	f005 f93b 	bl	b9c2c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b49b6:	4950      	ldr	r1, [pc, #320]	; (b4af8 <_Z16randomizeAddressv+0x328>)
   b49b8:	4606      	mov	r6, r0
   b49ba:	a80a      	add	r0, sp, #40	; 0x28
   b49bc:	f004 fc8d 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
   b49c0:	a902      	add	r1, sp, #8
   b49c2:	a80a      	add	r0, sp, #40	; 0x28
   b49c4:	f004 fd04 	bl	b93d0 <_ZplRK15StringSumHelperRK6String>
   b49c8:	6801      	ldr	r1, [r0, #0]
   b49ca:	4630      	mov	r0, r6
   b49cc:	f004 fbdb 	bl	b9186 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b49d0:	a80a      	add	r0, sp, #40	; 0x28
   b49d2:	f004 fc37 	bl	b9244 <_ZN6StringD1Ev>
        String inputBuffer = "";
   b49d6:	a802      	add	r0, sp, #8
   b49d8:	f004 fc34 	bl	b9244 <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   b49dc:	3401      	adds	r4, #1
   b49de:	2c78      	cmp	r4, #120	; 0x78
   b49e0:	f47f af0a 	bne.w	b47f8 <_Z16randomizeAddressv+0x28>
   b49e4:	e6fa      	b.n	b47dc <_Z16randomizeAddressv+0xc>
  Serial.println("\nConnected to: ");
   b49e6:	f005 f921 	bl	b9c2c <_Z16_fetch_usbserialv>
   b49ea:	4944      	ldr	r1, [pc, #272]	; (b4afc <_Z16randomizeAddressv+0x32c>)
      Serial.print(", ");
   b49ec:	4e44      	ldr	r6, [pc, #272]	; (b4b00 <_Z16randomizeAddressv+0x330>)
	return *(this->_M_impl._M_start + __n);
   b49ee:	4f45      	ldr	r7, [pc, #276]	; (b4b04 <_Z16randomizeAddressv+0x334>)
  Serial.println("\nConnected to: ");
   b49f0:	f004 fbc9 	bl	b9186 <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   b49f4:	2408      	movs	r4, #8
  int count = 0;
   b49f6:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   b49f8:	f005 fa66 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b49fc:	4621      	mov	r1, r4
   b49fe:	f004 fa35 	bl	b8e6c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   b4a02:	f005 fa61 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b4a06:	2131      	movs	r1, #49	; 0x31
   b4a08:	f7ff fc0a 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b4a0c:	f005 fa5c 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b4a10:	f004 fa33 	bl	b8e7a <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   b4a14:	f005 fa58 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b4a18:	2218      	movs	r2, #24
   b4a1a:	b2e1      	uxtb	r1, r4
   b4a1c:	f004 fa1f 	bl	b8e5e <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   b4a20:	f005 fa52 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b4a24:	6803      	ldr	r3, [r0, #0]
   b4a26:	691b      	ldr	r3, [r3, #16]
   b4a28:	4798      	blx	r3
   b4a2a:	2800      	cmp	r0, #0
   b4a2c:	dd0e      	ble.n	b4a4c <_Z16randomizeAddressv+0x27c>
      Serial.print(i);
   b4a2e:	f005 f8fd 	bl	b9c2c <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   b4a32:	220a      	movs	r2, #10
   b4a34:	4621      	mov	r1, r4
   b4a36:	f7ff fb54 	bl	b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      Serial.print(", ");
   b4a3a:	f005 f8f7 	bl	b9c2c <_Z16_fetch_usbserialv>
   b4a3e:	4631      	mov	r1, r6
   b4a40:	f004 fb8e 	bl	b9160 <_ZN5Print5printEPKc>
      addressArr[count++] = i;
   b4a44:	683b      	ldr	r3, [r7, #0]
   b4a46:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
   b4a4a:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   b4a4c:	3401      	adds	r4, #1
   b4a4e:	2c78      	cmp	r4, #120	; 0x78
   b4a50:	d1d2      	bne.n	b49f8 <_Z16randomizeAddressv+0x228>
  for(int i = 0; i < railways.size(); i++){
   b4a52:	2400      	movs	r4, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4a54:	4f2c      	ldr	r7, [pc, #176]	; (b4b08 <_Z16randomizeAddressv+0x338>)
	return *(this->_M_impl._M_start + __n);
   b4a56:	f8df b0d0 	ldr.w	fp, [pc, #208]	; b4b28 <_Z16randomizeAddressv+0x358>
  int seqCount = 0;
   b4a5a:	4626      	mov	r6, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4a5c:	e9d7 1200 	ldrd	r1, r2, [r7]
   b4a60:	4b2a      	ldr	r3, [pc, #168]	; (b4b0c <_Z16randomizeAddressv+0x33c>)
   b4a62:	1a52      	subs	r2, r2, r1
   b4a64:	1092      	asrs	r2, r2, #2
   b4a66:	435a      	muls	r2, r3
  for(int i = 0; i < railways.size(); i++){
   b4a68:	42a2      	cmp	r2, r4
   b4a6a:	d95f      	bls.n	b4b2c <_Z16randomizeAddressv+0x35c>
   b4a6c:	f04f 0964 	mov.w	r9, #100	; 0x64
   b4a70:	fb09 f904 	mul.w	r9, r9, r4
   b4a74:	ea4f 08c4 	mov.w	r8, r4, lsl #3
   b4a78:	2500      	movs	r5, #0
	return *(this->_M_impl._M_start + __n);
   b4a7a:	6838      	ldr	r0, [r7, #0]
   b4a7c:	f8db 2000 	ldr.w	r2, [fp]
   b4a80:	4448      	add	r0, r9
   b4a82:	eb02 0a08 	add.w	sl, r2, r8
   b4a86:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b4a88:	eb01 0c05 	add.w	ip, r1, r5
      if(railways[i].outputs[j].size() == 0 || railways[i].name == purpleLine.name){
   b4a8c:	594a      	ldr	r2, [r1, r5]
   b4a8e:	f8dc 3004 	ldr.w	r3, [ip, #4]
   b4a92:	4293      	cmp	r3, r2
   b4a94:	d004      	beq.n	b4aa0 <_Z16randomizeAddressv+0x2d0>
   b4a96:	491e      	ldr	r1, [pc, #120]	; (b4b10 <_Z16randomizeAddressv+0x340>)
   b4a98:	3030      	adds	r0, #48	; 0x30
   b4a9a:	f7ff fe87 	bl	b47ac <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b4a9e:	b148      	cbz	r0, b4ab4 <_Z16randomizeAddressv+0x2e4>
        sequenceArr[2 * i + j] = 0;
   b4aa0:	2300      	movs	r3, #0
   b4aa2:	f8ca 3000 	str.w	r3, [sl]
    for(int j = 0; j < 2; j++){
   b4aa6:	350c      	adds	r5, #12
   b4aa8:	2d18      	cmp	r5, #24
   b4aaa:	f108 0804 	add.w	r8, r8, #4
   b4aae:	d1e4      	bne.n	b4a7a <_Z16randomizeAddressv+0x2aa>
  for(int i = 0; i < railways.size(); i++){
   b4ab0:	3401      	adds	r4, #1
   b4ab2:	e7d3      	b.n	b4a5c <_Z16randomizeAddressv+0x28c>
        sequenceArr[2 * i + j] = addressArr[seqCount++];
   b4ab4:	4b13      	ldr	r3, [pc, #76]	; (b4b04 <_Z16randomizeAddressv+0x334>)
   b4ab6:	6819      	ldr	r1, [r3, #0]
   b4ab8:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
   b4abc:	f8ca 1000 	str.w	r1, [sl]
   b4ac0:	6838      	ldr	r0, [r7, #0]
        if(railways[i].name == brownLine.name){
   b4ac2:	4914      	ldr	r1, [pc, #80]	; (b4b14 <_Z16randomizeAddressv+0x344>)
   b4ac4:	4448      	add	r0, r9
        sequenceArr[2 * i + j] = addressArr[seqCount++];
   b4ac6:	1c72      	adds	r2, r6, #1
        if(railways[i].name == brownLine.name){
   b4ac8:	3030      	adds	r0, #48	; 0x30
        sequenceArr[2 * i + j] = addressArr[seqCount++];
   b4aca:	9201      	str	r2, [sp, #4]
        if(railways[i].name == brownLine.name){
   b4acc:	f7ff fe6e 	bl	b47ac <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b4ad0:	9a01      	ldr	r2, [sp, #4]
   b4ad2:	b128      	cbz	r0, b4ae0 <_Z16randomizeAddressv+0x310>
          brownLineAdr = sequenceArr[2 * i + j];
   b4ad4:	f8db 1000 	ldr.w	r1, [fp]
   b4ad8:	4b0f      	ldr	r3, [pc, #60]	; (b4b18 <_Z16randomizeAddressv+0x348>)
   b4ada:	f851 1008 	ldr.w	r1, [r1, r8]
   b4ade:	6019      	str	r1, [r3, #0]
        sequenceArr[2 * i + j] = addressArr[seqCount++];
   b4ae0:	4616      	mov	r6, r2
   b4ae2:	e7e0      	b.n	b4aa6 <_Z16randomizeAddressv+0x2d6>
   b4ae4:	2003e6a4 	.word	0x2003e6a4
   b4ae8:	000bd4ba 	.word	0x000bd4ba
   b4aec:	000bd17a 	.word	0x000bd17a
   b4af0:	000bd186 	.word	0x000bd186
   b4af4:	000bd19d 	.word	0x000bd19d
   b4af8:	000bd1b7 	.word	0x000bd1b7
   b4afc:	000bd1cf 	.word	0x000bd1cf
   b4b00:	000bd2e8 	.word	0x000bd2e8
   b4b04:	2003557c 	.word	0x2003557c
   b4b08:	2003e5c0 	.word	0x2003e5c0
   b4b0c:	c28f5c29 	.word	0xc28f5c29
   b4b10:	2003e58c 	.word	0x2003e58c
   b4b14:	20035620 	.word	0x20035620
   b4b18:	20035654 	.word	0x20035654
   b4b1c:	2003535c 	.word	0x2003535c
   b4b20:	000bd142 	.word	0x000bd142
   b4b24:	000bd15d 	.word	0x000bd15d
   b4b28:	2003e698 	.word	0x2003e698
}
   b4b2c:	b00f      	add	sp, #60	; 0x3c
   b4b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4b32:	bf00      	nop

000b4b34 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4b34:	2900      	cmp	r1, #0
      _M_create_storage(size_t __n)
   b4b36:	b538      	push	{r3, r4, r5, lr}
   b4b38:	4604      	mov	r4, r0
      _M_allocate(size_t __n)
   b4b3a:	ea4f 0581 	mov.w	r5, r1, lsl #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4b3e:	d00c      	beq.n	b4b5a <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x26>
	if (__n > this->_M_max_size())
   b4b40:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   b4b44:	d301      	bcc.n	b4b4a <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x16>
	  std::__throw_bad_alloc();
   b4b46:	f005 fa25 	bl	b9f94 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4b4a:	4628      	mov	r0, r5
   b4b4c:	f7ff faa3 	bl	b4096 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4b50:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4b54:	4428      	add	r0, r5
   b4b56:	60a0      	str	r0, [r4, #8]
      }
   b4b58:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4b5a:	4608      	mov	r0, r1
   b4b5c:	e7f8      	b.n	b4b50 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj+0x1c>

000b4b5e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b4b5e:	b538      	push	{r3, r4, r5, lr}
   b4b60:	4604      	mov	r4, r0
   b4b62:	460d      	mov	r5, r1
	  for (; __first != __last; ++__first)
   b4b64:	42ac      	cmp	r4, r5
   b4b66:	d004      	beq.n	b4b72 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x14>
      }
   b4b68:	4620      	mov	r0, r4
   b4b6a:	f7ff fd53 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4b6e:	340c      	adds	r4, #12
   b4b70:	e7f8      	b.n	b4b64 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_+0x6>
	    std::_Destroy(std::__addressof(*__first));
	}
   b4b72:	bd38      	pop	{r3, r4, r5, pc}

000b4b74 <_ZN7RailwayD1Ev>:
#include "Checkpoint.cpp"
#include <string>

//container for all data for each rail line
class Railway{
   b4b74:	b510      	push	{r4, lr}
   b4b76:	4604      	mov	r4, r0
   b4b78:	3048      	adds	r0, #72	; 0x48
   b4b7a:	f7ff fd55 	bl	b4628 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b4b7e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b4b82:	f005 fa3f 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   b4b86:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b4b8a:	f7ff ffe8 	bl	b4b5e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	_M_deallocate(_M_impl._M_start,
   b4b8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b4b90:	b118      	cbz	r0, b4b9a <_ZN7RailwayD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b4b92:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	::operator delete(__p
   b4b94:	1a09      	subs	r1, r1, r0
   b4b96:	f7ff fa84 	bl	b40a2 <_ZdlPvj>
      }
   b4b9a:	f104 0018 	add.w	r0, r4, #24
   b4b9e:	f7ff fd39 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4ba2:	f104 000c 	add.w	r0, r4, #12
   b4ba6:	f7ff fd2b 	bl	b4600 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4baa:	4620      	mov	r0, r4
   b4bac:	f7ff fd1e 	bl	b45ec <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
   b4bb0:	4620      	mov	r0, r4
   b4bb2:	bd10      	pop	{r4, pc}

000b4bb4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b4bb4:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b4bb6:	b510      	push	{r4, lr}
   b4bb8:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b4bba:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b4bbe:	d005      	beq.n	b4bcc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b4bc0:	4601      	mov	r1, r0
   b4bc2:	4622      	mov	r2, r4
   b4bc4:	4618      	mov	r0, r3
   b4bc6:	f006 fa0a 	bl	bafde <memmove>
   b4bca:	4603      	mov	r3, r0
	}
   b4bcc:	1918      	adds	r0, r3, r4
   b4bce:	bd10      	pop	{r4, pc}

000b4bd0 <_ZNSt6vectorIiSaIiEEC1ERKS1_>:
      vector(const vector& __x)
   b4bd0:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4bd2:	e9d1 3600 	ldrd	r3, r6, [r1]
   b4bd6:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4bd8:	2300      	movs	r3, #0
      vector(const vector& __x)
   b4bda:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4bdc:	e9c0 3300 	strd	r3, r3, [r0]
   b4be0:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4be2:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   b4be4:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4be6:	f7ff fadb 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b4bea:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4bee:	4406      	add	r6, r0
   b4bf0:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   b4bf2:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
   b4bf4:	e9d5 0100 	ldrd	r0, r1, [r5]
   b4bf8:	f7ff ffdc 	bl	b4bb4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
   b4bfc:	6060      	str	r0, [r4, #4]
      }
   b4bfe:	4620      	mov	r0, r4
   b4c00:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>:
      vector(initializer_list<value_type> __l,
   b4c04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b4c06:	ab04      	add	r3, sp, #16
   b4c08:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4c0c:	2300      	movs	r3, #0
   b4c0e:	e9c0 3300 	strd	r3, r3, [r0]
   b4c12:	6083      	str	r3, [r0, #8]
      vector(initializer_list<value_type> __l,
   b4c14:	4604      	mov	r4, r0
   b4c16:	4613      	mov	r3, r2
   b4c18:	460e      	mov	r6, r1
   b4c1a:	0095      	lsls	r5, r2, #2
   b4c1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b4c20:	f342 001d 	sbfx	r0, r2, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4c24:	4a0a      	ldr	r2, [pc, #40]	; (b4c50 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x4c>)
   b4c26:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b4c2a:	d202      	bcs.n	b4c32 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x2e>
	  __throw_length_error(
   b4c2c:	4809      	ldr	r0, [pc, #36]	; (b4c54 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0+0x50>)
   b4c2e:	f005 f9b7 	bl	b9fa0 <_ZSt20__throw_length_errorPKc>
   b4c32:	9101      	str	r1, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4c34:	f7ff fab4 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4c38:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   b4c3a:	4602      	mov	r2, r0
   b4c3c:	6020      	str	r0, [r4, #0]
   b4c3e:	9901      	ldr	r1, [sp, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b4c40:	60a5      	str	r5, [r4, #8]
   b4c42:	4630      	mov	r0, r6
   b4c44:	f7ff ffb6 	bl	b4bb4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
   b4c48:	6060      	str	r0, [r4, #4]
      }
   b4c4a:	b004      	add	sp, #16
   b4c4c:	bd70      	pop	{r4, r5, r6, pc}
   b4c4e:	bf00      	nop
   b4c50:	7ffffffc 	.word	0x7ffffffc
   b4c54:	000bd111 	.word	0x000bd111

000b4c58 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>:
      if (&__x != this)
   b4c58:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   b4c5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4c5c:	4604      	mov	r4, r0
   b4c5e:	460d      	mov	r5, r1
      if (&__x != this)
   b4c60:	d01d      	beq.n	b4c9e <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x46>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c62:	e9d1 7100 	ldrd	r7, r1, [r1]
			 - this->_M_impl._M_start); }
   b4c66:	6802      	ldr	r2, [r0, #0]
   b4c68:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4c6a:	1bce      	subs	r6, r1, r7
			 - this->_M_impl._M_start); }
   b4c6c:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b4c6e:	429e      	cmp	r6, r3
   b4c70:	d917      	bls.n	b4ca2 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x4a>
	  pointer __result = this->_M_allocate(__n);
   b4c72:	10b0      	asrs	r0, r6, #2
   b4c74:	9101      	str	r1, [sp, #4]
   b4c76:	f7ff fa93 	bl	b41a0 <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEj.isra.0>
   b4c7a:	9901      	ldr	r1, [sp, #4]
   b4c7c:	4602      	mov	r2, r0
   b4c7e:	4605      	mov	r5, r0
   b4c80:	4638      	mov	r0, r7
   b4c82:	f7ff ff97 	bl	b4bb4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b4c86:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b4c88:	b118      	cbz	r0, b4c92 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x3a>
			    - this->_M_impl._M_start);
   b4c8a:	68a1      	ldr	r1, [r4, #8]
   b4c8c:	1a09      	subs	r1, r1, r0
   b4c8e:	f7ff fa08 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b4c92:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b4c94:	4435      	add	r5, r6
   b4c96:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b4c98:	6823      	ldr	r3, [r4, #0]
   b4c9a:	4433      	add	r3, r6
   b4c9c:	6063      	str	r3, [r4, #4]
    }
   b4c9e:	b003      	add	sp, #12
   b4ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4ca2:	6843      	ldr	r3, [r0, #4]
   b4ca4:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b4ca6:	429e      	cmp	r6, r3
   b4ca8:	d803      	bhi.n	b4cb2 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x5a>
   b4caa:	4638      	mov	r0, r7
   b4cac:	f7ff ff82 	bl	b4bb4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   b4cb0:	e7f2      	b.n	b4c98 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x40>
   b4cb2:	18f9      	adds	r1, r7, r3
   b4cb4:	4638      	mov	r0, r7
   b4cb6:	f7ff ff7d 	bl	b4bb4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIiEEPT_PKS3_S6_S4_>
   b4cba:	e9d4 0200 	ldrd	r0, r2, [r4]
   b4cbe:	e9d5 3100 	ldrd	r3, r1, [r5]
   b4cc2:	1a10      	subs	r0, r2, r0
   b4cc4:	4418      	add	r0, r3
   b4cc6:	e7f1      	b.n	b4cac <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0+0x54>

000b4cc8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b4cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4ccc:	1a0c      	subs	r4, r1, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b4cce:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4cd0:	480b      	ldr	r0, [pc, #44]	; (b4d00 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x38>)
   b4cd2:	10a4      	asrs	r4, r4, #2
   b4cd4:	4344      	muls	r4, r0
	__copy_m(_II __first, _II __last, _OI __result)
   b4cd6:	4616      	mov	r6, r2
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4cd8:	4627      	mov	r7, r4
   b4cda:	4690      	mov	r8, r2
   b4cdc:	2f00      	cmp	r7, #0
   b4cde:	dd08      	ble.n	b4cf2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x2a>
	      *__result = *__first;
   b4ce0:	4629      	mov	r1, r5
   b4ce2:	4640      	mov	r0, r8
   b4ce4:	f7ff ffb8 	bl	b4c58 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__first;
   b4ce8:	350c      	adds	r5, #12
	      ++__result;
   b4cea:	f108 080c 	add.w	r8, r8, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b4cee:	3f01      	subs	r7, #1
   b4cf0:	e7f4      	b.n	b4cdc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_+0x14>
	  return __result;
   b4cf2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
	}
   b4cf6:	200c      	movs	r0, #12
   b4cf8:	fb00 6004 	mla	r0, r0, r4, r6
   b4cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4d00:	aaaaaaab 	.word	0xaaaaaaab

000b4d04 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>:
    std::vector<std::string> colors;
    int tripleIndex = -1;
    int loopIndex = -1;
    int lowerLoopBound, upperLoopBound;

    Railway(std::vector<Checkpoint> checkpointInput, std::vector<int> scalerInput, std::vector<int> outputSize, std::string nameInput, std::vector<std::string> colorInput, std::vector<int> loopBoundInput = {0, 0}){
   b4d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4d08:	2500      	movs	r5, #0
   b4d0a:	4698      	mov	r8, r3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b4d0c:	f100 0338 	add.w	r3, r0, #56	; 0x38
      { _M_string_length = __length; }
   b4d10:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   b4d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4d18:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
   b4d1c:	4604      	mov	r4, r0
   b4d1e:	e9c0 5500 	strd	r5, r5, [r0]
   b4d22:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b4d26:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b4d2a:	e9c0 5506 	strd	r5, r5, [r0, #24]
   b4d2e:	e9c0 5508 	strd	r5, r5, [r0, #32]
   b4d32:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
   b4d36:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
   b4d3a:	b095      	sub	sp, #84	; 0x54
      { __c1 = __c2; }
   b4d3c:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
   b4d40:	6505      	str	r5, [r0, #80]	; 0x50
   b4d42:	4691      	mov	r9, r2
   b4d44:	f100 0a18 	add.w	sl, r0, #24
   b4d48:	f100 0730 	add.w	r7, r0, #48	; 0x30
   b4d4c:	f100 0648 	add.w	r6, r0, #72	; 0x48
      checkpoints = checkpointInput;
   b4d50:	f7ff fb48 	bl	b43e4 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4d54:	e9d4 2300 	ldrd	r2, r3, [r4]
   b4d58:	1a9b      	subs	r3, r3, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4d5a:	42ab      	cmp	r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4d5c:	ea4f 01e3 	mov.w	r1, r3, asr #3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   b4d60:	da02      	bge.n	b4d68 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x64>
	  __throw_length_error(
   b4d62:	485a      	ldr	r0, [pc, #360]	; (b4ecc <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1c8>)
   b4d64:	f005 f91c 	bl	b9fa0 <_ZSt20__throw_length_errorPKc>
      { _M_create_storage(__n); }
   b4d68:	a808      	add	r0, sp, #32
   b4d6a:	9101      	str	r1, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b4d6c:	e9cd 5508 	strd	r5, r5, [sp, #32]
   b4d70:	950a      	str	r5, [sp, #40]	; 0x28
      { _M_create_storage(__n); }
   b4d72:	f7ff fedf 	bl	b4b34 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
      if (__n <= 0)
   b4d76:	9901      	ldr	r1, [sp, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
   b4d78:	9808      	ldr	r0, [sp, #32]
   b4d7a:	b131      	cbz	r1, b4d8a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x86>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   b4d7c:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
	*__first = __tmp;
   b4d80:	008a      	lsls	r2, r1, #2
   b4d82:	4629      	mov	r1, r5
   b4d84:	f006 f945 	bl	bb012 <memset>
   b4d88:	4658      	mov	r0, fp
	  _M_finish = __x._M_finish;
   b4d8a:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
	  _M_start = __x._M_start;
   b4d8e:	9908      	ldr	r1, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4d90:	6963      	ldr	r3, [r4, #20]
   b4d92:	930d      	str	r3, [sp, #52]	; 0x34
	  _M_finish = __x._M_finish;
   b4d94:	e9c4 1003 	strd	r1, r0, [r4, #12]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4d98:	990a      	ldr	r1, [sp, #40]	; 0x28
   b4d9a:	6161      	str	r1, [r4, #20]
	  _M_finish = __x._M_finish;
   b4d9c:	e9cd 520b 	strd	r5, r2, [sp, #44]	; 0x2c
      }
   b4da0:	a80b      	add	r0, sp, #44	; 0x2c
	  _M_start = __x._M_start;
   b4da2:	2500      	movs	r5, #0
	  _M_finish = __x._M_finish;
   b4da4:	e9cd 5508 	strd	r5, r5, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
   b4da8:	950a      	str	r5, [sp, #40]	; 0x28
      }
   b4daa:	f7ff fc29 	bl	b4600 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
   b4dae:	a808      	add	r0, sp, #32
   b4db0:	f7ff fc26 	bl	b4600 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      distances = std::vector<float>(checkpoints.size(), 0);
      scalers = scalerInput;
   b4db4:	4649      	mov	r1, r9
   b4db6:	4650      	mov	r0, sl
   b4db8:	f7ff ff4e 	bl	b4c58 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      outputs = {std::vector<int>(outputSize[0], 0), std::vector<int>(outputSize[1], 0), std::vector<int>(outputSize[2], 0)};
   b4dbc:	f8d8 1000 	ldr.w	r1, [r8]
   b4dc0:	9506      	str	r5, [sp, #24]
   b4dc2:	6809      	ldr	r1, [r1, #0]
   b4dc4:	ab03      	add	r3, sp, #12
   b4dc6:	aa06      	add	r2, sp, #24
   b4dc8:	a80b      	add	r0, sp, #44	; 0x2c
   b4dca:	f7ff fc41 	bl	b4650 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4dce:	f8d8 1000 	ldr.w	r1, [r8]
   b4dd2:	9507      	str	r5, [sp, #28]
   b4dd4:	6849      	ldr	r1, [r1, #4]
   b4dd6:	ab04      	add	r3, sp, #16
   b4dd8:	aa07      	add	r2, sp, #28
   b4dda:	a80e      	add	r0, sp, #56	; 0x38
   b4ddc:	f7ff fc38 	bl	b4650 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b4de0:	f8d8 1000 	ldr.w	r1, [r8]
   b4de4:	9508      	str	r5, [sp, #32]
   b4de6:	ab05      	add	r3, sp, #20
   b4de8:	aa08      	add	r2, sp, #32
   b4dea:	6889      	ldr	r1, [r1, #8]
   b4dec:	a811      	add	r0, sp, #68	; 0x44
   b4dee:	f7ff fc2f 	bl	b4650 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
			 - this->_M_impl._M_start); }
   b4df2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b4df4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4df6:	1a9b      	subs	r3, r3, r2
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);

	if (__len > capacity())
   b4df8:	2b23      	cmp	r3, #35	; 0x23
   b4dfa:	d83e      	bhi.n	b4e7a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x176>
	  pointer __result = this->_M_allocate(__n);
   b4dfc:	2003      	movs	r0, #3
   b4dfe:	f7ff f983 	bl	b4108 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b4e02:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
   b4e06:	4605      	mov	r5, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b4e08:	f100 0924 	add.w	r9, r0, #36	; 0x24
	  _ForwardIterator __cur = __result;
   b4e0c:	4680      	mov	r8, r0
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4e0e:	f1b8 0f00 	cmp.w	r8, #0
   b4e12:	d003      	beq.n	b4e1c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x118>
   b4e14:	4651      	mov	r1, sl
   b4e16:	4640      	mov	r0, r8
   b4e18:	f7ff feda 	bl	b4bd0 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b4e1c:	f108 080c 	add.w	r8, r8, #12
   b4e20:	45c8      	cmp	r8, r9
   b4e22:	f10a 0a0c 	add.w	sl, sl, #12
   b4e26:	d1f2      	bne.n	b4e0e <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x10a>
	__destroy(__first, __last);
   b4e28:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b4e2c:	f7ff fe97 	bl	b4b5e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	    _S_check_init_len(__len, _M_get_Tp_allocator());
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
   b4e30:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b4e32:	b118      	cbz	r0, b4e3c <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x138>
			  this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_start);
   b4e34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b4e36:	1a09      	subs	r1, r1, r0
   b4e38:	f7ff f933 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_start = __tmp;
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b4e3c:	e9c4 5909 	strd	r5, r9, [r4, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b4e40:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
      }
   b4e44:	a811      	add	r0, sp, #68	; 0x44
   b4e46:	f7ff fbe5 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4e4a:	a80e      	add	r0, sp, #56	; 0x38
   b4e4c:	f7ff fbe2 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b4e50:	a80b      	add	r0, sp, #44	; 0x2c
   b4e52:	f7ff fbdf 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
	this->_M_assign(__str);
   b4e56:	991e      	ldr	r1, [sp, #120]	; 0x78
   b4e58:	4638      	mov	r0, r7
   b4e5a:	f005 f8f1 	bl	ba040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      name = nameInput;
      colors = colorInput;
   b4e5e:	4630      	mov	r0, r6
   b4e60:	991f      	ldr	r1, [sp, #124]	; 0x7c
   b4e62:	f7ff fb11 	bl	b4488 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
	return *(this->_M_impl._M_start + __n);
   b4e66:	9b20      	ldr	r3, [sp, #128]	; 0x80
   b4e68:	681b      	ldr	r3, [r3, #0]
      lowerLoopBound = loopBoundInput[0];
   b4e6a:	681a      	ldr	r2, [r3, #0]
      upperLoopBound = loopBoundInput[1];
   b4e6c:	685b      	ldr	r3, [r3, #4]
      lowerLoopBound = loopBoundInput[0];
   b4e6e:	65e2      	str	r2, [r4, #92]	; 0x5c
    }
   b4e70:	4620      	mov	r0, r4
      upperLoopBound = loopBoundInput[1];
   b4e72:	6623      	str	r3, [r4, #96]	; 0x60
    }
   b4e74:	b015      	add	sp, #84	; 0x54
   b4e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4e7a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   b4e7c:	1aad      	subs	r5, r5, r2
	  }
	else if (size() >= __len)
   b4e7e:	2d23      	cmp	r5, #35	; 0x23
   b4e80:	d90b      	bls.n	b4e9a <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x196>
			      _Category>::__copy_m(__first, __last, __result);
   b4e82:	a914      	add	r1, sp, #80	; 0x50
   b4e84:	a80b      	add	r0, sp, #44	; 0x2c
   b4e86:	f7ff ff1f 	bl	b4cc8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b4e8a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b4e8c:	4288      	cmp	r0, r1
   b4e8e:	4605      	mov	r5, r0
   b4e90:	d0d8      	beq.n	b4e44 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x140>
   b4e92:	f7ff fe64 	bl	b4b5e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   b4e96:	62a5      	str	r5, [r4, #40]	; 0x28
   b4e98:	e7d4      	b.n	b4e44 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x140>
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b4e9a:	ab0b      	add	r3, sp, #44	; 0x2c
   b4e9c:	441d      	add	r5, r3
   b4e9e:	4629      	mov	r1, r5
   b4ea0:	4618      	mov	r0, r3
   b4ea2:	f7ff ff11 	bl	b4cc8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4ea6:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
   b4eaa:	ab14      	add	r3, sp, #80	; 0x50
   b4eac:	429d      	cmp	r5, r3
   b4eae:	d00a      	beq.n	b4ec6 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1c2>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b4eb0:	f1b8 0f00 	cmp.w	r8, #0
   b4eb4:	d003      	beq.n	b4ebe <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1ba>
   b4eb6:	4629      	mov	r1, r5
   b4eb8:	4640      	mov	r0, r8
   b4eba:	f7ff fe89 	bl	b4bd0 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b4ebe:	350c      	adds	r5, #12
   b4ec0:	f108 080c 	add.w	r8, r8, #12
   b4ec4:	e7f1      	b.n	b4eaa <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x1a6>
	    _ForwardIterator __mid = __first;
	    std::advance(__mid, size());
	    std::copy(__first, __mid, this->_M_impl._M_start);
	    const size_type __attribute__((__unused__)) __n = __len - size();
	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	    this->_M_impl._M_finish =
   b4ec6:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
   b4eca:	e7bb      	b.n	b4e44 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_+0x140>
   b4ecc:	000bd111 	.word	0x000bd111

000b4ed0 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   b4ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4ed4:	ed2d 8b0e 	vpush	{d8-d14}
   b4ed8:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   b4edc:	2801      	cmp	r0, #1
   b4ede:	9007      	str	r0, [sp, #28]
   b4ee0:	f040 85a1 	bne.w	b5a26 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb56>
  public:
    float lat;
    float lon;

    Checkpoint(float la, float lo){
      lat = la;
   b4ee4:	4bb5      	ldr	r3, [pc, #724]	; (b51bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2ec>)
   b4ee6:	9372      	str	r3, [sp, #456]	; 0x1c8
      lon = lo;
   b4ee8:	4bb5      	ldr	r3, [pc, #724]	; (b51c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f0>)
   b4eea:	9373      	str	r3, [sp, #460]	; 0x1cc
      lat = la;
   b4eec:	4bb5      	ldr	r3, [pc, #724]	; (b51c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f4>)
   b4eee:	9374      	str	r3, [sp, #464]	; 0x1d0
      lon = lo;
   b4ef0:	4bb5      	ldr	r3, [pc, #724]	; (b51c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2f8>)
   b4ef2:	9375      	str	r3, [sp, #468]	; 0x1d4
      lat = la;
   b4ef4:	4bb5      	ldr	r3, [pc, #724]	; (b51cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x2fc>)
   b4ef6:	9376      	str	r3, [sp, #472]	; 0x1d8
      lon = lo;
   b4ef8:	4bb5      	ldr	r3, [pc, #724]	; (b51d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x300>)
   b4efa:	9377      	str	r3, [sp, #476]	; 0x1dc
      lat = la;
   b4efc:	4bb5      	ldr	r3, [pc, #724]	; (b51d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x304>)
   b4efe:	9378      	str	r3, [sp, #480]	; 0x1e0
      lon = lo;
   b4f00:	4bb5      	ldr	r3, [pc, #724]	; (b51d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x308>)
   b4f02:	9379      	str	r3, [sp, #484]	; 0x1e4
      lat = la;
   b4f04:	4bb5      	ldr	r3, [pc, #724]	; (b51dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x30c>)
   b4f06:	937a      	str	r3, [sp, #488]	; 0x1e8
      lon = lo;
   b4f08:	4bb5      	ldr	r3, [pc, #724]	; (b51e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x310>)
   b4f0a:	937b      	str	r3, [sp, #492]	; 0x1ec
);
   b4f0c:	ab72      	add	r3, sp, #456	; 0x1c8
   b4f0e:	9351      	str	r3, [sp, #324]	; 0x144
   b4f10:	f50d 798a 	add.w	r9, sp, #276	; 0x114
   b4f14:	2305      	movs	r3, #5
   b4f16:	9951      	ldr	r1, [sp, #324]	; 0x144
   b4f18:	9352      	str	r3, [sp, #328]	; 0x148
   b4f1a:	2205      	movs	r2, #5
   b4f1c:	464b      	mov	r3, r9
   b4f1e:	a862      	add	r0, sp, #392	; 0x188
   b4f20:	f7ff fbb8 	bl	b4694 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b4f24:	4baf      	ldr	r3, [pc, #700]	; (b51e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>)
      lat = la;
   b4f26:	eddf 8ab0 	vldr	s17, [pc, #704]	; b51e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x318>
      lon = lo;
   b4f2a:	ed9f 8ab0 	vldr	s16, [pc, #704]	; b51ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x31c>
      lat = la;
   b4f2e:	eddf 9ab0 	vldr	s19, [pc, #704]	; b51f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>
      lon = lo;
   b4f32:	ed9f 9ab0 	vldr	s18, [pc, #704]	; b51f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>
      lat = la;
   b4f36:	eddf aab0 	vldr	s21, [pc, #704]	; b51f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>
      lon = lo;
   b4f3a:	ed9f aab0 	vldr	s20, [pc, #704]	; b51fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>
      lat = la;
   b4f3e:	eddf bab0 	vldr	s23, [pc, #704]	; b5200 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>
      lon = lo;
   b4f42:	ed9f bab0 	vldr	s22, [pc, #704]	; b5204 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>
      lat = la;
   b4f46:	eddf dab0 	vldr	s27, [pc, #704]	; b5208 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>
      lon = lo;
   b4f4a:	ed9f dab0 	vldr	s26, [pc, #704]	; b520c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>
      lat = la;
   b4f4e:	eddf cab0 	vldr	s25, [pc, #704]	; b5210 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>
      lon = lo;
   b4f52:	ed9f cab0 	vldr	s24, [pc, #704]	; b5214 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>
   b4f56:	ed9f eab0 	vldr	s28, [pc, #704]	; b5218 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>
   b4f5a:	461f      	mov	r7, r3
   b4f5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b4f5e:	ac65      	add	r4, sp, #404	; 0x194
   b4f60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b4f64:	2204      	movs	r2, #4
   b4f66:	4621      	mov	r1, r4
   b4f68:	a85f      	add	r0, sp, #380	; 0x17c
   b4f6a:	944f      	str	r4, [sp, #316]	; 0x13c
   b4f6c:	9250      	str	r2, [sp, #320]	; 0x140
   b4f6e:	f7ff fe49 	bl	b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b4f72:	aa59      	add	r2, sp, #356	; 0x164
   b4f74:	2500      	movs	r5, #0
   b4f76:	924d      	str	r2, [sp, #308]	; 0x134
   b4f78:	2328      	movs	r3, #40	; 0x28
   b4f7a:	2203      	movs	r2, #3
   b4f7c:	e9cd 5359 	strd	r5, r3, [sp, #356]	; 0x164
   b4f80:	924e      	str	r2, [sp, #312]	; 0x138
   b4f82:	ab4d      	add	r3, sp, #308	; 0x134
   b4f84:	f50d 7bd6 	add.w	fp, sp, #428	; 0x1ac
   b4f88:	e893 0006 	ldmia.w	r3, {r1, r2}
   b4f8c:	a85c      	add	r0, sp, #368	; 0x170
   b4f8e:	955b      	str	r5, [sp, #364]	; 0x16c
   b4f90:	f7ff fe38 	bl	b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b4f94:	49a1      	ldr	r1, [pc, #644]	; (b521c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>)
   b4f96:	4658      	mov	r0, fp
   b4f98:	f7ff f8c8 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b4f9c:	49a0      	ldr	r1, [pc, #640]	; (b5220 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>)
   b4f9e:	a87e      	add	r0, sp, #504	; 0x1f8
   b4fa0:	f7ff f8c4 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b4fa4:	499f      	ldr	r1, [pc, #636]	; (b5224 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
   b4fa6:	a884      	add	r0, sp, #528	; 0x210
   b4fa8:	f04f 0a02 	mov.w	sl, #2
   b4fac:	f7ff f8be 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b4fb0:	a97e      	add	r1, sp, #504	; 0x1f8
   b4fb2:	f8cd a130 	str.w	sl, [sp, #304]	; 0x130
   b4fb6:	f50d 7886 	add.w	r8, sp, #268	; 0x10c
   b4fba:	914b      	str	r1, [sp, #300]	; 0x12c
   b4fbc:	aa4b      	add	r2, sp, #300	; 0x12c
   b4fbe:	4643      	mov	r3, r8
   b4fc0:	ae47      	add	r6, sp, #284	; 0x11c
   b4fc2:	ca06      	ldmia	r2, {r1, r2}
   b4fc4:	a856      	add	r0, sp, #344	; 0x158
   b4fc6:	f7ff fb99 	bl	b46fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b4fca:	e9cd 6a49 	strd	r6, sl, [sp, #292]	; 0x124
   b4fce:	ab49      	add	r3, sp, #292	; 0x124
   b4fd0:	e893 0006 	ldmia.w	r3, {r1, r2}
   b4fd4:	a853      	add	r0, sp, #332	; 0x14c
   b4fd6:	e9cd 5547 	strd	r5, r5, [sp, #284]	; 0x11c
   b4fda:	f7ff fe13 	bl	b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway redLine = Railway(
   b4fde:	aa53      	add	r2, sp, #332	; 0x14c
   b4fe0:	9202      	str	r2, [sp, #8]
   b4fe2:	aa56      	add	r2, sp, #344	; 0x158
   b4fe4:	e9cd b200 	strd	fp, r2, [sp]
   b4fe8:	aa5c      	add	r2, sp, #368	; 0x170
   b4fea:	4613      	mov	r3, r2
   b4fec:	a962      	add	r1, sp, #392	; 0x188
   b4fee:	aa5f      	add	r2, sp, #380	; 0x17c
   b4ff0:	488d      	ldr	r0, [pc, #564]	; (b5228 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>)
   b4ff2:	f7ff fe87 	bl	b4d04 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
      }
   b4ff6:	a853      	add	r0, sp, #332	; 0x14c
   b4ff8:	f7ff fb0c 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b4ffc:	a856      	add	r0, sp, #344	; 0x158
   b4ffe:	f7ff fb13 	bl	b4628 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
      { _M_dispose(); }
   b5002:	a884      	add	r0, sp, #528	; 0x210
   b5004:	f004 fffe 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5008:	a87e      	add	r0, sp, #504	; 0x1f8
   b500a:	f004 fffb 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b500e:	4658      	mov	r0, fp
   b5010:	f004 fff8 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5014:	a85c      	add	r0, sp, #368	; 0x170
   b5016:	f7ff fafd 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b501a:	a85f      	add	r0, sp, #380	; 0x17c
   b501c:	f7ff fafa 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5020:	a862      	add	r0, sp, #392	; 0x188
   b5022:	f7ff fae3 	bl	b45ec <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5026:	4b81      	ldr	r3, [pc, #516]	; (b522c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x35c>)
   b5028:	937e      	str	r3, [sp, #504]	; 0x1f8
      lon = lo;
   b502a:	4b81      	ldr	r3, [pc, #516]	; (b5230 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x360>)
   b502c:	937f      	str	r3, [sp, #508]	; 0x1fc
      lat = la;
   b502e:	4b81      	ldr	r3, [pc, #516]	; (b5234 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x364>)
   b5030:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b5032:	4b81      	ldr	r3, [pc, #516]	; (b5238 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x368>)
   b5034:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b5036:	4b81      	ldr	r3, [pc, #516]	; (b523c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
   b5038:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b503a:	4b81      	ldr	r3, [pc, #516]	; (b5240 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x370>)
   b503c:	9383      	str	r3, [sp, #524]	; 0x20c
      lat = la;
   b503e:	4b81      	ldr	r3, [pc, #516]	; (b5244 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>)
   b5040:	9384      	str	r3, [sp, #528]	; 0x210
      lon = lo;
   b5042:	4b81      	ldr	r3, [pc, #516]	; (b5248 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x378>)
   b5044:	9385      	str	r3, [sp, #532]	; 0x214
      lat = la;
   b5046:	4b81      	ldr	r3, [pc, #516]	; (b524c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x37c>)
   b5048:	9386      	str	r3, [sp, #536]	; 0x218
      lon = lo;
   b504a:	4b81      	ldr	r3, [pc, #516]	; (b5250 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x380>)
   b504c:	9387      	str	r3, [sp, #540]	; 0x21c
      lat = la;
   b504e:	4b81      	ldr	r3, [pc, #516]	; (b5254 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x384>)
   b5050:	9388      	str	r3, [sp, #544]	; 0x220
);
   b5052:	aa7e      	add	r2, sp, #504	; 0x1f8
      lon = lo;
   b5054:	4b80      	ldr	r3, [pc, #512]	; (b5258 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x388>)
   b5056:	9247      	str	r2, [sp, #284]	; 0x11c
   b5058:	9389      	str	r3, [sp, #548]	; 0x224
   b505a:	2207      	movs	r2, #7
      lat = la;
   b505c:	4b7f      	ldr	r3, [pc, #508]	; (b525c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x38c>)
   b505e:	938a      	str	r3, [sp, #552]	; 0x228
   b5060:	9248      	str	r2, [sp, #288]	; 0x120
      lon = lo;
   b5062:	4b7f      	ldr	r3, [pc, #508]	; (b5260 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x390>)
   b5064:	938b      	str	r3, [sp, #556]	; 0x22c
   b5066:	e896 0006 	ldmia.w	r6, {r1, r2}
   b506a:	ab3b      	add	r3, sp, #236	; 0xec
   b506c:	f107 0610 	add.w	r6, r7, #16
   b5070:	a862      	add	r0, sp, #392	; 0x188
   b5072:	f7ff fb0f 	bl	b4694 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5076:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5078:	465f      	mov	r7, fp
   b507a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b507c:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5080:	2206      	movs	r2, #6
   b5082:	f8cd b114 	str.w	fp, [sp, #276]	; 0x114
   b5086:	9246      	str	r2, [sp, #280]	; 0x118
   b5088:	e9c7 0100 	strd	r0, r1, [r7]
   b508c:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5090:	a85f      	add	r0, sp, #380	; 0x17c
   b5092:	9705      	str	r7, [sp, #20]
   b5094:	f7ff fdb6 	bl	b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5098:	aa59      	add	r2, sp, #356	; 0x164
   b509a:	9243      	str	r2, [sp, #268]	; 0x10c
   b509c:	2203      	movs	r2, #3
   b509e:	9244      	str	r2, [sp, #272]	; 0x110
   b50a0:	e898 0006 	ldmia.w	r8, {r1, r2}
   b50a4:	233c      	movs	r3, #60	; 0x3c
   b50a6:	a85c      	add	r0, sp, #368	; 0x170
   b50a8:	e9cd 355a 	strd	r3, r5, [sp, #360]	; 0x168
   b50ac:	9559      	str	r5, [sp, #356]	; 0x164
   b50ae:	f7ff fda9 	bl	b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b50b2:	4620      	mov	r0, r4
   b50b4:	496b      	ldr	r1, [pc, #428]	; (b5264 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>)
   b50b6:	f7ff f839 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b50ba:	496b      	ldr	r1, [pc, #428]	; (b5268 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x398>)
   b50bc:	a872      	add	r0, sp, #456	; 0x1c8
   b50be:	f7ff f835 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b50c2:	496a      	ldr	r1, [pc, #424]	; (b526c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x39c>)
   b50c4:	a878      	add	r0, sp, #480	; 0x1e0
   b50c6:	f7ff f831 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b50ca:	a972      	add	r1, sp, #456	; 0x1c8
   b50cc:	e9cd 1a41 	strd	r1, sl, [sp, #260]	; 0x104
   b50d0:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
   b50d4:	aa41      	add	r2, sp, #260	; 0x104
   b50d6:	464b      	mov	r3, r9
   b50d8:	ae3d      	add	r6, sp, #244	; 0xf4
   b50da:	ca06      	ldmia	r2, {r1, r2}
   b50dc:	a856      	add	r0, sp, #344	; 0x158
   b50de:	f7ff fb0d 	bl	b46fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b50e2:	e9cd 6a3f 	strd	r6, sl, [sp, #252]	; 0xfc
   b50e6:	ab3f      	add	r3, sp, #252	; 0xfc
   b50e8:	e893 0006 	ldmia.w	r3, {r1, r2}
   b50ec:	a853      	add	r0, sp, #332	; 0x14c
   b50ee:	e9cd 553d 	strd	r5, r5, [sp, #244]	; 0xf4
   b50f2:	f7ff fd87 	bl	b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway blueLine = Railway(
   b50f6:	aa53      	add	r2, sp, #332	; 0x14c
   b50f8:	9202      	str	r2, [sp, #8]
   b50fa:	aa56      	add	r2, sp, #344	; 0x158
   b50fc:	e9cd 4200 	strd	r4, r2, [sp]
   b5100:	aa5c      	add	r2, sp, #368	; 0x170
   b5102:	4613      	mov	r3, r2
   b5104:	a962      	add	r1, sp, #392	; 0x188
   b5106:	aa5f      	add	r2, sp, #380	; 0x17c
   b5108:	4859      	ldr	r0, [pc, #356]	; (b5270 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3a0>)
   b510a:	f7ff fdfb 	bl	b4d04 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b510e:	a853      	add	r0, sp, #332	; 0x14c
   b5110:	f7ff fa80 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5114:	a856      	add	r0, sp, #344	; 0x158
   b5116:	f7ff fa87 	bl	b4628 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b511a:	a878      	add	r0, sp, #480	; 0x1e0
   b511c:	f004 ff72 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5120:	a872      	add	r0, sp, #456	; 0x1c8
   b5122:	f004 ff6f 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5126:	4620      	mov	r0, r4
   b5128:	f004 ff6c 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b512c:	a85c      	add	r0, sp, #368	; 0x170
   b512e:	f7ff fa71 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5132:	a85f      	add	r0, sp, #380	; 0x17c
   b5134:	f7ff fa6e 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5138:	a862      	add	r0, sp, #392	; 0x188
   b513a:	f7ff fa57 	bl	b45ec <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b513e:	aa7e      	add	r2, sp, #504	; 0x1f8
   b5140:	923d      	str	r2, [sp, #244]	; 0xf4
   b5142:	2207      	movs	r2, #7
   b5144:	f10d 08c4 	add.w	r8, sp, #196	; 0xc4
   b5148:	923e      	str	r2, [sp, #248]	; 0xf8
   b514a:	e896 0006 	ldmia.w	r6, {r1, r2}
   b514e:	4643      	mov	r3, r8
   b5150:	a862      	add	r0, sp, #392	; 0x188
      lat = la;
   b5152:	edcd 8a7e 	vstr	s17, [sp, #504]	; 0x1f8
      lon = lo;
   b5156:	ed8d 8a7f 	vstr	s16, [sp, #508]	; 0x1fc
      lat = la;
   b515a:	edcd 9a80 	vstr	s19, [sp, #512]	; 0x200
      lon = lo;
   b515e:	ed8d 9a81 	vstr	s18, [sp, #516]	; 0x204
      lat = la;
   b5162:	edcd aa82 	vstr	s21, [sp, #520]	; 0x208
      lon = lo;
   b5166:	ed8d aa83 	vstr	s20, [sp, #524]	; 0x20c
      lat = la;
   b516a:	edcd ba84 	vstr	s23, [sp, #528]	; 0x210
      lon = lo;
   b516e:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
      lat = la;
   b5172:	edcd 8a86 	vstr	s17, [sp, #536]	; 0x218
      lon = lo;
   b5176:	ed8d 8a87 	vstr	s16, [sp, #540]	; 0x21c
      lat = la;
   b517a:	edcd da88 	vstr	s27, [sp, #544]	; 0x220
      lon = lo;
   b517e:	ed8d da89 	vstr	s26, [sp, #548]	; 0x224
      lat = la;
   b5182:	edcd ca8a 	vstr	s25, [sp, #552]	; 0x228
      lon = lo;
   b5186:	ed8d ca8b 	vstr	s24, [sp, #556]	; 0x22c
   b518a:	f7ff fa83 	bl	b4694 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b518e:	4b15      	ldr	r3, [pc, #84]	; (b51e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x314>)
   b5190:	f8cd b0ec 	str.w	fp, [sp, #236]	; 0xec
   b5194:	f103 0228 	add.w	r2, r3, #40	; 0x28
   b5198:	4617      	mov	r7, r2
   b519a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b519c:	465e      	mov	r6, fp
   b519e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b51a0:	e9d7 0100 	ldrd	r0, r1, [r7]
   b51a4:	9a05      	ldr	r2, [sp, #20]
   b51a6:	9706      	str	r7, [sp, #24]
   b51a8:	e882 0003 	stmia.w	r2, {r0, r1}
   b51ac:	2206      	movs	r2, #6
   b51ae:	ab3b      	add	r3, sp, #236	; 0xec
   b51b0:	923c      	str	r2, [sp, #240]	; 0xf0
   b51b2:	e893 0006 	ldmia.w	r3, {r1, r2}
   b51b6:	a85f      	add	r0, sp, #380	; 0x17c
   b51b8:	e05c      	b.n	b5274 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3a4>
   b51ba:	bf00      	nop
   b51bc:	42276980 	.word	0x42276980
   b51c0:	c2af431e 	.word	0xc2af431e
   b51c4:	42279dcc 	.word	0x42279dcc
   b51c8:	c2af4202 	.word	0xc2af4202
   b51cc:	42279d95 	.word	0x42279d95
   b51d0:	c2af476d 	.word	0xc2af476d
   b51d4:	4227a7a9 	.word	0x4227a7a9
   b51d8:	c2af4e05 	.word	0xc2af4e05
   b51dc:	4227b382 	.word	0x4227b382
   b51e0:	c2af4e44 	.word	0xc2af4e44
   b51e4:	000bd3d4 	.word	0x000bd3d4
   b51e8:	42278b1a 	.word	0x42278b1a
   b51ec:	c2af449a 	.word	0xc2af449a
   b51f0:	42278b2f 	.word	0x42278b2f
   b51f4:	c2af4095 	.word	0xc2af4095
   b51f8:	422781d8 	.word	0x422781d8
   b51fc:	c2af4044 	.word	0xc2af4044
   b5200:	42278216 	.word	0x42278216
   b5204:	c2af44c1 	.word	0xc2af44c1
   b5208:	4227a437 	.word	0x4227a437
   b520c:	c2af4659 	.word	0xc2af4659
   b5210:	4227a49e 	.word	0x4227a49e
   b5214:	c2af4bd0 	.word	0xc2af4bd0
   b5218:	c2af4089 	.word	0xc2af4089
   b521c:	000bd0e6 	.word	0x000bd0e6
   b5220:	000bd1df 	.word	0x000bd1df
   b5224:	000bd1e6 	.word	0x000bd1e6
   b5228:	2003e5cc 	.word	0x2003e5cc
   b522c:	42277e9d 	.word	0x42277e9d
   b5230:	c2af74b3 	.word	0xc2af74b3
   b5234:	422780af 	.word	0x422780af
   b5238:	c2af588e 	.word	0xc2af588e
   b523c:	4227804d 	.word	0x4227804d
   b5240:	c2af482e 	.word	0xc2af482e
   b5244:	422780ad 	.word	0x422780ad
   b5248:	c2af4157 	.word	0xc2af4157
   b524c:	42278aff 	.word	0x42278aff
   b5250:	c2af4253 	.word	0xc2af4253
   b5254:	42278af4 	.word	0x42278af4
   b5258:	c2af4798 	.word	0xc2af4798
   b525c:	4227a978 	.word	0x4227a978
   b5260:	c2af5f5d 	.word	0xc2af5f5d
   b5264:	000bd0f2 	.word	0x000bd0f2
   b5268:	000bd1ed 	.word	0x000bd1ed
   b526c:	000bd1f4 	.word	0x000bd1f4
   b5270:	2003558c 	.word	0x2003558c
   b5274:	f7ff fcc6 	bl	b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5278:	f107 0208 	add.w	r2, r7, #8
   b527c:	ca07      	ldmia	r2, {r0, r1, r2}
   b527e:	af59      	add	r7, sp, #356	; 0x164
   b5280:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b5284:	2103      	movs	r1, #3
   b5286:	9739      	str	r7, [sp, #228]	; 0xe4
   b5288:	913a      	str	r1, [sp, #232]	; 0xe8
   b528a:	e899 0006 	ldmia.w	r9, {r1, r2}
   b528e:	a85c      	add	r0, sp, #368	; 0x170
   b5290:	f7ff fcb8 	bl	b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5294:	4620      	mov	r0, r4
   b5296:	49b5      	ldr	r1, [pc, #724]	; (b556c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x69c>)
   b5298:	f7fe ff48 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b529c:	49b4      	ldr	r1, [pc, #720]	; (b5570 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a0>)
   b529e:	a872      	add	r0, sp, #456	; 0x1c8
   b52a0:	f7fe ff44 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b52a4:	49b3      	ldr	r1, [pc, #716]	; (b5574 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a4>)
   b52a6:	a878      	add	r0, sp, #480	; 0x1e0
   b52a8:	f7fe ff40 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b52ac:	a972      	add	r1, sp, #456	; 0x1c8
   b52ae:	e9cd 1a37 	strd	r1, sl, [sp, #220]	; 0xdc
   b52b2:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   b52b6:	aa37      	add	r2, sp, #220	; 0xdc
   b52b8:	ca06      	ldmia	r2, {r1, r2}
   b52ba:	464b      	mov	r3, r9
   b52bc:	ae33      	add	r6, sp, #204	; 0xcc
   b52be:	a856      	add	r0, sp, #344	; 0x158
   b52c0:	f7ff fa1c 	bl	b46fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b52c4:	e9cd 6a35 	strd	r6, sl, [sp, #212]	; 0xd4
   b52c8:	ab35      	add	r3, sp, #212	; 0xd4
   b52ca:	2104      	movs	r1, #4
   b52cc:	9134      	str	r1, [sp, #208]	; 0xd0
   b52ce:	a853      	add	r0, sp, #332	; 0x14c
   b52d0:	e893 0006 	ldmia.w	r3, {r1, r2}
   b52d4:	9533      	str	r5, [sp, #204]	; 0xcc
   b52d6:	f7ff fc95 	bl	b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway brownLine = Railway(
   b52da:	a953      	add	r1, sp, #332	; 0x14c
   b52dc:	9102      	str	r1, [sp, #8]
   b52de:	a956      	add	r1, sp, #344	; 0x158
   b52e0:	e9cd 4100 	strd	r4, r1, [sp]
   b52e4:	a95c      	add	r1, sp, #368	; 0x170
   b52e6:	460b      	mov	r3, r1
   b52e8:	a95f      	add	r1, sp, #380	; 0x17c
   b52ea:	460a      	mov	r2, r1
   b52ec:	48a2      	ldr	r0, [pc, #648]	; (b5578 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6a8>)
   b52ee:	a962      	add	r1, sp, #392	; 0x188
   b52f0:	f7ff fd08 	bl	b4d04 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b52f4:	a853      	add	r0, sp, #332	; 0x14c
   b52f6:	f7ff f98d 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b52fa:	a856      	add	r0, sp, #344	; 0x158
   b52fc:	f7ff f994 	bl	b4628 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5300:	a878      	add	r0, sp, #480	; 0x1e0
   b5302:	f004 fe7f 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5306:	a872      	add	r0, sp, #456	; 0x1c8
   b5308:	f004 fe7c 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b530c:	4620      	mov	r0, r4
   b530e:	f004 fe79 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5312:	a85c      	add	r0, sp, #368	; 0x170
   b5314:	f7ff f97e 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5318:	a85f      	add	r0, sp, #380	; 0x17c
   b531a:	f7ff f97b 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b531e:	a862      	add	r0, sp, #392	; 0x188
   b5320:	f7ff f964 	bl	b45ec <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b5324:	4b95      	ldr	r3, [pc, #596]	; (b557c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ac>)
   b5326:	9372      	str	r3, [sp, #456]	; 0x1c8
      lon = lo;
   b5328:	4b95      	ldr	r3, [pc, #596]	; (b5580 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b0>)
   b532a:	9373      	str	r3, [sp, #460]	; 0x1cc
      lat = la;
   b532c:	4b95      	ldr	r3, [pc, #596]	; (b5584 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b4>)
   b532e:	9374      	str	r3, [sp, #464]	; 0x1d0
);
   b5330:	a972      	add	r1, sp, #456	; 0x1c8
   b5332:	4b95      	ldr	r3, [pc, #596]	; (b5588 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6b8>)
   b5334:	9133      	str	r1, [sp, #204]	; 0xcc
   b5336:	9378      	str	r3, [sp, #480]	; 0x1e0
   b5338:	2105      	movs	r1, #5
      lon = lo;
   b533a:	4b94      	ldr	r3, [pc, #592]	; (b558c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6bc>)
   b533c:	9379      	str	r3, [sp, #484]	; 0x1e4
   b533e:	9134      	str	r1, [sp, #208]	; 0xd0
      lat = la;
   b5340:	4b93      	ldr	r3, [pc, #588]	; (b5590 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c0>)
   b5342:	937a      	str	r3, [sp, #488]	; 0x1e8
   b5344:	e896 0006 	ldmia.w	r6, {r1, r2}
   b5348:	af27      	add	r7, sp, #156	; 0x9c
   b534a:	4e92      	ldr	r6, [pc, #584]	; (b5594 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c4>)
      lon = lo;
   b534c:	4b92      	ldr	r3, [pc, #584]	; (b5598 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c8>)
   b534e:	937b      	str	r3, [sp, #492]	; 0x1ec
   b5350:	a862      	add	r0, sp, #392	; 0x188
   b5352:	463b      	mov	r3, r7
   b5354:	ed8d ea75 	vstr	s28, [sp, #468]	; 0x1d4
      lat = la;
   b5358:	edcd 9a76 	vstr	s19, [sp, #472]	; 0x1d8
      lon = lo;
   b535c:	ed8d 9a77 	vstr	s18, [sp, #476]	; 0x1dc
   b5360:	f7ff f998 	bl	b4694 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5364:	f106 034c 	add.w	r3, r6, #76	; 0x4c
   b5368:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b536a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   b536e:	2304      	movs	r3, #4
   b5370:	9431      	str	r4, [sp, #196]	; 0xc4
   b5372:	9332      	str	r3, [sp, #200]	; 0xc8
   b5374:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5378:	a85f      	add	r0, sp, #380	; 0x17c
   b537a:	f7ff fc43 	bl	b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b537e:	f106 035c 	add.w	r3, r6, #92	; 0x5c
   b5382:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   b5386:	ab59      	add	r3, sp, #356	; 0x164
   b5388:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b538c:	932f      	str	r3, [sp, #188]	; 0xbc
   b538e:	2303      	movs	r3, #3
   b5390:	9330      	str	r3, [sp, #192]	; 0xc0
   b5392:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5396:	a85c      	add	r0, sp, #368	; 0x170
   b5398:	f7ff fc34 	bl	b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b539c:	497f      	ldr	r1, [pc, #508]	; (b559c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6cc>)
   b539e:	4658      	mov	r0, fp
   b53a0:	f7fe fec4 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b53a4:	497e      	ldr	r1, [pc, #504]	; (b55a0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d0>)
   b53a6:	a87e      	add	r0, sp, #504	; 0x1f8
   b53a8:	f7fe fec0 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b53ac:	497d      	ldr	r1, [pc, #500]	; (b55a4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d4>)
   b53ae:	a884      	add	r0, sp, #528	; 0x210
   b53b0:	f7fe febc 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b53b4:	ab7e      	add	r3, sp, #504	; 0x1f8
   b53b6:	e9cd 3a2d 	strd	r3, sl, [sp, #180]	; 0xb4
   b53ba:	f10d 0994 	add.w	r9, sp, #148	; 0x94
   b53be:	aa2d      	add	r2, sp, #180	; 0xb4
   b53c0:	464b      	mov	r3, r9
   b53c2:	ae29      	add	r6, sp, #164	; 0xa4
   b53c4:	ca06      	ldmia	r2, {r1, r2}
   b53c6:	a856      	add	r0, sp, #344	; 0x158
   b53c8:	f7ff f998 	bl	b46fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b53cc:	e9cd 6a2b 	strd	r6, sl, [sp, #172]	; 0xac
   b53d0:	9b07      	ldr	r3, [sp, #28]
   b53d2:	9329      	str	r3, [sp, #164]	; 0xa4
   b53d4:	2303      	movs	r3, #3
   b53d6:	932a      	str	r3, [sp, #168]	; 0xa8
   b53d8:	ab2b      	add	r3, sp, #172	; 0xac
   b53da:	e893 0006 	ldmia.w	r3, {r1, r2}
   b53de:	a853      	add	r0, sp, #332	; 0x14c
   b53e0:	f7ff fc10 	bl	b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway greenLine = Railway(
   b53e4:	ab53      	add	r3, sp, #332	; 0x14c
   b53e6:	9302      	str	r3, [sp, #8]
   b53e8:	a95f      	add	r1, sp, #380	; 0x17c
   b53ea:	ab56      	add	r3, sp, #344	; 0x158
   b53ec:	460a      	mov	r2, r1
   b53ee:	e9cd b300 	strd	fp, r3, [sp]
   b53f2:	a962      	add	r1, sp, #392	; 0x188
   b53f4:	ab5c      	add	r3, sp, #368	; 0x170
   b53f6:	486c      	ldr	r0, [pc, #432]	; (b55a8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6d8>)
   b53f8:	f7ff fc84 	bl	b4d04 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b53fc:	a853      	add	r0, sp, #332	; 0x14c
   b53fe:	f7ff f909 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5402:	a856      	add	r0, sp, #344	; 0x158
   b5404:	f7ff f910 	bl	b4628 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5408:	a884      	add	r0, sp, #528	; 0x210
   b540a:	f004 fdfb 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b540e:	a87e      	add	r0, sp, #504	; 0x1f8
   b5410:	f004 fdf8 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5414:	4658      	mov	r0, fp
   b5416:	f004 fdf5 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b541a:	a85c      	add	r0, sp, #368	; 0x170
   b541c:	f7ff f8fa 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5420:	a85f      	add	r0, sp, #380	; 0x17c
   b5422:	f7ff f8f7 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5426:	a862      	add	r0, sp, #392	; 0x188
   b5428:	f7ff f8e0 	bl	b45ec <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b542c:	4b5f      	ldr	r3, [pc, #380]	; (b55ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6dc>)
   b542e:	937e      	str	r3, [sp, #504]	; 0x1f8
      lon = lo;
   b5430:	4b5f      	ldr	r3, [pc, #380]	; (b55b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e0>)
   b5432:	937f      	str	r3, [sp, #508]	; 0x1fc
      lat = la;
   b5434:	4b5f      	ldr	r3, [pc, #380]	; (b55b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e4>)
   b5436:	9380      	str	r3, [sp, #512]	; 0x200
      lon = lo;
   b5438:	4b5f      	ldr	r3, [pc, #380]	; (b55b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6e8>)
   b543a:	9381      	str	r3, [sp, #516]	; 0x204
      lat = la;
   b543c:	4b5f      	ldr	r3, [pc, #380]	; (b55bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6ec>)
   b543e:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b5440:	4b5f      	ldr	r3, [pc, #380]	; (b55c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f0>)
   b5442:	9383      	str	r3, [sp, #524]	; 0x20c
      lat = la;
   b5444:	4b5f      	ldr	r3, [pc, #380]	; (b55c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f4>)
   b5446:	9384      	str	r3, [sp, #528]	; 0x210
   b5448:	4b5f      	ldr	r3, [pc, #380]	; (b55c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6f8>)
   b544a:	938a      	str	r3, [sp, #552]	; 0x228
      lon = lo;
   b544c:	4b5f      	ldr	r3, [pc, #380]	; (b55cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6fc>)
   b544e:	938b      	str	r3, [sp, #556]	; 0x22c
);
   b5450:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5452:	9329      	str	r3, [sp, #164]	; 0xa4
   b5454:	2308      	movs	r3, #8
   b5456:	932a      	str	r3, [sp, #168]	; 0xa8
   b5458:	e896 0006 	ldmia.w	r6, {r1, r2}
   b545c:	4e4d      	ldr	r6, [pc, #308]	; (b5594 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x6c4>)
   b545e:	ed8d ea85 	vstr	s28, [sp, #532]	; 0x214
   b5462:	f10d 0874 	add.w	r8, sp, #116	; 0x74
   b5466:	4643      	mov	r3, r8
   b5468:	a862      	add	r0, sp, #392	; 0x188
   b546a:	3668      	adds	r6, #104	; 0x68
      lat = la;
   b546c:	edcd 9a86 	vstr	s19, [sp, #536]	; 0x218
      lon = lo;
   b5470:	ed8d 9a87 	vstr	s18, [sp, #540]	; 0x21c
      lat = la;
   b5474:	edcd 8a88 	vstr	s17, [sp, #544]	; 0x220
      lon = lo;
   b5478:	ed8d 8a89 	vstr	s16, [sp, #548]	; 0x224
      lat = la;
   b547c:	edcd aa8c 	vstr	s21, [sp, #560]	; 0x230
      lon = lo;
   b5480:	ed8d aa8d 	vstr	s20, [sp, #564]	; 0x234
   b5484:	f7ff f906 	bl	b4694 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5488:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b548a:	46dc      	mov	ip, fp
   b548c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5490:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   b5494:	9b05      	ldr	r3, [sp, #20]
   b5496:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
   b549a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b549e:	2307      	movs	r3, #7
   b54a0:	9328      	str	r3, [sp, #160]	; 0xa0
   b54a2:	e897 0006 	ldmia.w	r7, {r1, r2}
   b54a6:	a85f      	add	r0, sp, #380	; 0x17c
   b54a8:	f7ff fbac 	bl	b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b54ac:	f106 030c 	add.w	r3, r6, #12
   b54b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   b54b4:	af59      	add	r7, sp, #356	; 0x164
   b54b6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
   b54ba:	2103      	movs	r1, #3
   b54bc:	9725      	str	r7, [sp, #148]	; 0x94
   b54be:	9126      	str	r1, [sp, #152]	; 0x98
   b54c0:	e899 0006 	ldmia.w	r9, {r1, r2}
   b54c4:	a85c      	add	r0, sp, #368	; 0x170
   b54c6:	f7ff fb9d 	bl	b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b54ca:	4620      	mov	r0, r4
   b54cc:	4940      	ldr	r1, [pc, #256]	; (b55d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x700>)
   b54ce:	f7fe fe2d 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b54d2:	4940      	ldr	r1, [pc, #256]	; (b55d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x704>)
   b54d4:	a872      	add	r0, sp, #456	; 0x1c8
   b54d6:	f7fe fe29 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b54da:	493f      	ldr	r1, [pc, #252]	; (b55d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x708>)
   b54dc:	a878      	add	r0, sp, #480	; 0x1e0
   b54de:	f7fe fe25 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b54e2:	a972      	add	r1, sp, #456	; 0x1c8
   b54e4:	e9cd 1a23 	strd	r1, sl, [sp, #140]	; 0x8c
   b54e8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   b54ec:	aa23      	add	r2, sp, #140	; 0x8c
   b54ee:	ca06      	ldmia	r2, {r1, r2}
   b54f0:	464b      	mov	r3, r9
   b54f2:	ae1f      	add	r6, sp, #124	; 0x7c
   b54f4:	a856      	add	r0, sp, #344	; 0x158
   b54f6:	f7ff f901 	bl	b46fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b54fa:	e9cd 6a21 	strd	r6, sl, [sp, #132]	; 0x84
   b54fe:	2303      	movs	r3, #3
   b5500:	2107      	movs	r1, #7
   b5502:	e9cd 311f 	strd	r3, r1, [sp, #124]	; 0x7c
   b5506:	ab21      	add	r3, sp, #132	; 0x84
   b5508:	e893 0006 	ldmia.w	r3, {r1, r2}
   b550c:	a853      	add	r0, sp, #332	; 0x14c
   b550e:	f7ff fb79 	bl	b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway orangeLine = Railway(
   b5512:	a953      	add	r1, sp, #332	; 0x14c
   b5514:	9102      	str	r1, [sp, #8]
   b5516:	a956      	add	r1, sp, #344	; 0x158
   b5518:	e9cd 4100 	strd	r4, r1, [sp]
   b551c:	a95c      	add	r1, sp, #368	; 0x170
   b551e:	460b      	mov	r3, r1
   b5520:	a95f      	add	r1, sp, #380	; 0x17c
   b5522:	460a      	mov	r2, r1
   b5524:	482d      	ldr	r0, [pc, #180]	; (b55dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x70c>)
   b5526:	a962      	add	r1, sp, #392	; 0x188
   b5528:	f7ff fbec 	bl	b4d04 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b552c:	a853      	add	r0, sp, #332	; 0x14c
   b552e:	f7ff f871 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b5532:	a856      	add	r0, sp, #344	; 0x158
   b5534:	f7ff f878 	bl	b4628 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b5538:	a878      	add	r0, sp, #480	; 0x1e0
   b553a:	f004 fd63 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b553e:	a872      	add	r0, sp, #456	; 0x1c8
   b5540:	f004 fd60 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5544:	4620      	mov	r0, r4
   b5546:	f004 fd5d 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b554a:	a85c      	add	r0, sp, #368	; 0x170
   b554c:	f7ff f862 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5550:	a85f      	add	r0, sp, #380	; 0x17c
   b5552:	f7ff f85f 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5556:	a862      	add	r0, sp, #392	; 0x188
   b5558:	f7ff f848 	bl	b45ec <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
);
   b555c:	a97e      	add	r1, sp, #504	; 0x1f8
   b555e:	911f      	str	r1, [sp, #124]	; 0x7c
   b5560:	2107      	movs	r1, #7
   b5562:	af13      	add	r7, sp, #76	; 0x4c
   b5564:	9120      	str	r1, [sp, #128]	; 0x80
   b5566:	e896 0006 	ldmia.w	r6, {r1, r2}
   b556a:	e039      	b.n	b55e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x710>
   b556c:	000bd1fb 	.word	0x000bd1fb
   b5570:	000bd1ff 	.word	0x000bd1ff
   b5574:	000bd206 	.word	0x000bd206
   b5578:	200355f0 	.word	0x200355f0
   b557c:	42276997 	.word	0x42276997
   b5580:	c2af40b8 	.word	0xc2af40b8
   b5584:	422781fe 	.word	0x422781fe
   b5588:	42278afb 	.word	0x42278afb
   b558c:	c2af4494 	.word	0xc2af4494
   b5590:	42278971 	.word	0x42278971
   b5594:	000bd3d4 	.word	0x000bd3d4
   b5598:	c2af6479 	.word	0xc2af6479
   b559c:	000bd78d 	.word	0x000bd78d
   b55a0:	000bd20d 	.word	0x000bd20d
   b55a4:	000bd214 	.word	0x000bd214
   b55a8:	20035658 	.word	0x20035658
   b55ac:	4227631a 	.word	0x4227631a
   b55b0:	c2af4bd2 	.word	0xc2af4bd2
   b55b4:	42276ec4 	.word	0x42276ec4
   b55b8:	c2af4115 	.word	0xc2af4115
   b55bc:	422780b5 	.word	0x422780b5
   b55c0:	c2af4086 	.word	0xc2af4086
   b55c4:	42278200 	.word	0x42278200
   b55c8:	422781e1 	.word	0x422781e1
   b55cc:	c2af4476 	.word	0xc2af4476
   b55d0:	000bd21b 	.word	0x000bd21b
   b55d4:	000bd21f 	.word	0x000bd21f
   b55d8:	000bd226 	.word	0x000bd226
   b55dc:	20037ed8 	.word	0x20037ed8
   b55e0:	463b      	mov	r3, r7
   b55e2:	a862      	add	r0, sp, #392	; 0x188
      lat = la;
   b55e4:	edcd 8a7e 	vstr	s17, [sp, #504]	; 0x1f8
      lon = lo;
   b55e8:	ed8d 8a7f 	vstr	s16, [sp, #508]	; 0x1fc
      lat = la;
   b55ec:	edcd 9a80 	vstr	s19, [sp, #512]	; 0x200
      lon = lo;
   b55f0:	ed8d 9a81 	vstr	s18, [sp, #516]	; 0x204
      lat = la;
   b55f4:	edcd aa82 	vstr	s21, [sp, #520]	; 0x208
      lon = lo;
   b55f8:	ed8d aa83 	vstr	s20, [sp, #524]	; 0x20c
      lat = la;
   b55fc:	edcd ba84 	vstr	s23, [sp, #528]	; 0x210
      lon = lo;
   b5600:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
      lat = la;
   b5604:	edcd 8a86 	vstr	s17, [sp, #536]	; 0x218
      lon = lo;
   b5608:	ed8d 8a87 	vstr	s16, [sp, #540]	; 0x21c
      lat = la;
   b560c:	edcd da88 	vstr	s27, [sp, #544]	; 0x220
      lon = lo;
   b5610:	ed8d da89 	vstr	s26, [sp, #548]	; 0x224
      lat = la;
   b5614:	edcd ca8a 	vstr	s25, [sp, #552]	; 0x228
      lon = lo;
   b5618:	ed8d ca8b 	vstr	s24, [sp, #556]	; 0x22c
   b561c:	f7ff f83a 	bl	b4694 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b5620:	4aba      	ldr	r2, [pc, #744]	; (b590c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b5622:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
   b5626:	f1a2 0c18 	sub.w	ip, r2, #24
   b562a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b562e:	465e      	mov	r6, fp
   b5630:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5632:	9906      	ldr	r1, [sp, #24]
   b5634:	9b05      	ldr	r3, [sp, #20]
   b5636:	c903      	ldmia	r1, {r0, r1}
   b5638:	e9c3 0100 	strd	r0, r1, [r3]
   b563c:	2106      	movs	r1, #6
   b563e:	911e      	str	r1, [sp, #120]	; 0x78
   b5640:	e898 0006 	ldmia.w	r8, {r1, r2}
   b5644:	a85f      	add	r0, sp, #380	; 0x17c
   b5646:	f7ff fadd 	bl	b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b564a:	4ab0      	ldr	r2, [pc, #704]	; (b590c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa3c>)
   b564c:	ca07      	ldmia	r2, {r0, r1, r2}
   b564e:	f50d 7cb2 	add.w	ip, sp, #356	; 0x164
   b5652:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
   b5656:	2203      	movs	r2, #3
   b5658:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
   b565c:	921c      	str	r2, [sp, #112]	; 0x70
   b565e:	e899 0006 	ldmia.w	r9, {r1, r2}
   b5662:	a85c      	add	r0, sp, #368	; 0x170
   b5664:	f7ff face 	bl	b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5668:	4620      	mov	r0, r4
   b566a:	49a9      	ldr	r1, [pc, #676]	; (b5910 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa40>)
   b566c:	f7fe fd5e 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5670:	49a8      	ldr	r1, [pc, #672]	; (b5914 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa44>)
   b5672:	a872      	add	r0, sp, #456	; 0x1c8
   b5674:	f7fe fd5a 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5678:	49a7      	ldr	r1, [pc, #668]	; (b5918 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa48>)
   b567a:	a878      	add	r0, sp, #480	; 0x1e0
   b567c:	f7fe fd56 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b5680:	a972      	add	r1, sp, #456	; 0x1c8
   b5682:	e9cd 1a19 	strd	r1, sl, [sp, #100]	; 0x64
   b5686:	f10d 0844 	add.w	r8, sp, #68	; 0x44
   b568a:	aa19      	add	r2, sp, #100	; 0x64
   b568c:	ca06      	ldmia	r2, {r1, r2}
   b568e:	4643      	mov	r3, r8
   b5690:	ae15      	add	r6, sp, #84	; 0x54
   b5692:	a856      	add	r0, sp, #344	; 0x158
   b5694:	f7ff f832 	bl	b46fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b5698:	e9cd 6a17 	strd	r6, sl, [sp, #92]	; 0x5c
   b569c:	ab17      	add	r3, sp, #92	; 0x5c
   b569e:	2204      	movs	r2, #4
   b56a0:	9216      	str	r2, [sp, #88]	; 0x58
   b56a2:	a853      	add	r0, sp, #332	; 0x14c
   b56a4:	e893 0006 	ldmia.w	r3, {r1, r2}
   b56a8:	9515      	str	r5, [sp, #84]	; 0x54
   b56aa:	f7ff faab 	bl	b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway purpleLine = Railway(
   b56ae:	aa53      	add	r2, sp, #332	; 0x14c
   b56b0:	9202      	str	r2, [sp, #8]
   b56b2:	aa56      	add	r2, sp, #344	; 0x158
   b56b4:	e9cd 4200 	strd	r4, r2, [sp]
   b56b8:	aa5c      	add	r2, sp, #368	; 0x170
   b56ba:	4613      	mov	r3, r2
   b56bc:	a962      	add	r1, sp, #392	; 0x188
   b56be:	aa5f      	add	r2, sp, #380	; 0x17c
   b56c0:	4896      	ldr	r0, [pc, #600]	; (b591c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa4c>)
   b56c2:	f7ff fb1f 	bl	b4d04 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b56c6:	a853      	add	r0, sp, #332	; 0x14c
   b56c8:	f7fe ffa4 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b56cc:	a856      	add	r0, sp, #344	; 0x158
   b56ce:	f7fe ffab 	bl	b4628 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b56d2:	a878      	add	r0, sp, #480	; 0x1e0
   b56d4:	f004 fc96 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b56d8:	a872      	add	r0, sp, #456	; 0x1c8
   b56da:	f004 fc93 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b56de:	4620      	mov	r0, r4
   b56e0:	f004 fc90 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b56e4:	a85c      	add	r0, sp, #368	; 0x170
   b56e6:	f7fe ff95 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b56ea:	a85f      	add	r0, sp, #380	; 0x17c
   b56ec:	f7fe ff92 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b56f0:	a862      	add	r0, sp, #392	; 0x188
   b56f2:	f7fe ff7b 	bl	b45ec <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      lat = la;
   b56f6:	4b8a      	ldr	r3, [pc, #552]	; (b5920 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa50>)
   b56f8:	937e      	str	r3, [sp, #504]	; 0x1f8
);
   b56fa:	aa7e      	add	r2, sp, #504	; 0x1f8
      lon = lo;
   b56fc:	4b89      	ldr	r3, [pc, #548]	; (b5924 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa54>)
   b56fe:	9215      	str	r2, [sp, #84]	; 0x54
   b5700:	937f      	str	r3, [sp, #508]	; 0x1fc
   b5702:	2208      	movs	r2, #8
      lat = la;
   b5704:	4b88      	ldr	r3, [pc, #544]	; (b5928 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa58>)
   b5706:	9380      	str	r3, [sp, #512]	; 0x200
   b5708:	9216      	str	r2, [sp, #88]	; 0x58
      lon = lo;
   b570a:	4b88      	ldr	r3, [pc, #544]	; (b592c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa5c>)
   b570c:	9381      	str	r3, [sp, #516]	; 0x204
   b570e:	e896 0006 	ldmia.w	r6, {r1, r2}
      lat = la;
   b5712:	4b87      	ldr	r3, [pc, #540]	; (b5930 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa60>)
   b5714:	4e87      	ldr	r6, [pc, #540]	; (b5934 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa64>)
   b5716:	9382      	str	r3, [sp, #520]	; 0x208
      lon = lo;
   b5718:	4b87      	ldr	r3, [pc, #540]	; (b5938 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa68>)
   b571a:	9383      	str	r3, [sp, #524]	; 0x20c
   b571c:	a862      	add	r0, sp, #392	; 0x188
   b571e:	ab0a      	add	r3, sp, #40	; 0x28
   b5720:	3690      	adds	r6, #144	; 0x90
      lat = la;
   b5722:	edcd 8a84 	vstr	s17, [sp, #528]	; 0x210
      lon = lo;
   b5726:	ed8d 8a85 	vstr	s16, [sp, #532]	; 0x214
      lat = la;
   b572a:	edcd 9a86 	vstr	s19, [sp, #536]	; 0x218
      lon = lo;
   b572e:	ed8d 9a87 	vstr	s18, [sp, #540]	; 0x21c
      lat = la;
   b5732:	edcd aa88 	vstr	s21, [sp, #544]	; 0x220
      lon = lo;
   b5736:	ed8d aa89 	vstr	s20, [sp, #548]	; 0x224
      lat = la;
   b573a:	edcd ba8a 	vstr	s23, [sp, #552]	; 0x228
      lon = lo;
   b573e:	ed8d ba8b 	vstr	s22, [sp, #556]	; 0x22c
      lat = la;
   b5742:	edcd 8a8c 	vstr	s17, [sp, #560]	; 0x230
      lon = lo;
   b5746:	ed8d 8a8d 	vstr	s16, [sp, #564]	; 0x234
   b574a:	f7fe ffa3 	bl	b4694 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
   b574e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5750:	46dc      	mov	ip, fp
   b5752:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5756:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   b575a:	9e05      	ldr	r6, [sp, #20]
   b575c:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   b5760:	e886 0007 	stmia.w	r6, {r0, r1, r2}
   b5764:	2207      	movs	r2, #7
   b5766:	9214      	str	r2, [sp, #80]	; 0x50
   b5768:	e897 0006 	ldmia.w	r7, {r1, r2}
   b576c:	a85f      	add	r0, sp, #380	; 0x17c
   b576e:	f7ff fa49 	bl	b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5772:	4b72      	ldr	r3, [pc, #456]	; (b593c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa6c>)
   b5774:	4e72      	ldr	r6, [pc, #456]	; (b5940 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa70>)
   b5776:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   b577a:	ab59      	add	r3, sp, #356	; 0x164
   b577c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b5780:	9311      	str	r3, [sp, #68]	; 0x44
   b5782:	2303      	movs	r3, #3
   b5784:	9312      	str	r3, [sp, #72]	; 0x48
   b5786:	e898 0006 	ldmia.w	r8, {r1, r2}
   b578a:	a85c      	add	r0, sp, #368	; 0x170
   b578c:	f7ff fa3a 	bl	b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
   b5790:	4620      	mov	r0, r4
   b5792:	496c      	ldr	r1, [pc, #432]	; (b5944 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa74>)
   b5794:	f8df 81d0 	ldr.w	r8, [pc, #464]	; b5968 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa98>
   b5798:	f7fe fcc8 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b579c:	496a      	ldr	r1, [pc, #424]	; (b5948 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa78>)
   b579e:	a872      	add	r0, sp, #456	; 0x1c8
   b57a0:	f7fe fcc4 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b57a4:	4969      	ldr	r1, [pc, #420]	; (b594c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa7c>)
   b57a6:	a878      	add	r0, sp, #480	; 0x1e0
   b57a8:	f7fe fcc0 	bl	b412c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_.constprop.0.isra.0>
   b57ac:	ab72      	add	r3, sp, #456	; 0x1c8
   b57ae:	e9cd 3a0f 	strd	r3, sl, [sp, #60]	; 0x3c
   b57b2:	aa0f      	add	r2, sp, #60	; 0x3c
   b57b4:	ca06      	ldmia	r2, {r1, r2}
   b57b6:	ab09      	add	r3, sp, #36	; 0x24
   b57b8:	a856      	add	r0, sp, #344	; 0x158
   b57ba:	f7fe ff9f 	bl	b46fc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1ESt16initializer_listIS5_ERKS6_>
   b57be:	aa0b      	add	r2, sp, #44	; 0x2c
   b57c0:	e9cd 2a0d 	strd	r2, sl, [sp, #52]	; 0x34
   b57c4:	2103      	movs	r1, #3
   b57c6:	2307      	movs	r3, #7
   b57c8:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
   b57cc:	ab0d      	add	r3, sp, #52	; 0x34
   b57ce:	e893 0006 	ldmia.w	r3, {r1, r2}
   b57d2:	a853      	add	r0, sp, #332	; 0x14c
   b57d4:	f7ff fa16 	bl	b4c04 <_ZNSt6vectorIiSaIiEEC2ESt16initializer_listIiERKS0_.constprop.0.isra.0>
Railway pinkLine = Railway(
   b57d8:	ab53      	add	r3, sp, #332	; 0x14c
   b57da:	9302      	str	r3, [sp, #8]
   b57dc:	ab56      	add	r3, sp, #344	; 0x158
   b57de:	aa5f      	add	r2, sp, #380	; 0x17c
   b57e0:	a962      	add	r1, sp, #392	; 0x188
   b57e2:	e9cd 4300 	strd	r4, r3, [sp]
   b57e6:	485a      	ldr	r0, [pc, #360]	; (b5950 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa80>)
   b57e8:	ab5c      	add	r3, sp, #368	; 0x170
   b57ea:	f7ff fa8b 	bl	b4d04 <_ZN7RailwayC1ESt6vectorI10CheckpointSaIS1_EES0_IiSaIiEES5_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES0_ISB_SaISB_EES5_>
   b57ee:	a853      	add	r0, sp, #332	; 0x14c
   b57f0:	f7fe ff10 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
);
   b57f4:	a856      	add	r0, sp, #344	; 0x158
   b57f6:	f7fe ff17 	bl	b4628 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
   b57fa:	a878      	add	r0, sp, #480	; 0x1e0
   b57fc:	f004 fc02 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5800:	a872      	add	r0, sp, #456	; 0x1c8
   b5802:	f004 fbff 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5806:	4620      	mov	r0, r4
   b5808:	f004 fbfc 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b580c:	a85c      	add	r0, sp, #368	; 0x170
   b580e:	f7fe ff01 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5812:	a85f      	add	r0, sp, #380	; 0x17c
   b5814:	f7fe fefe 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5818:	a862      	add	r0, sp, #392	; 0x188
   b581a:	f7fe fee7 	bl	b45ec <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
	: _M_start(), _M_finish(), _M_end_of_storage()
   b581e:	4b4d      	ldr	r3, [pc, #308]	; (b5954 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa84>)
std::vector<int> addressArr = std::vector<int>(slaveCountExpected, 0);
   b5820:	494d      	ldr	r1, [pc, #308]	; (b5958 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa88>)
   b5822:	609d      	str	r5, [r3, #8]
   b5824:	aa7e      	add	r2, sp, #504	; 0x1f8
   b5826:	e9c3 5500 	strd	r5, r5, [r3]
   b582a:	6809      	ldr	r1, [r1, #0]
   b582c:	484b      	ldr	r0, [pc, #300]	; (b595c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa8c>)
   b582e:	957e      	str	r5, [sp, #504]	; 0x1f8
   b5830:	ab72      	add	r3, sp, #456	; 0x1c8
   b5832:	f7fe ff0d 	bl	b4650 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
   b5836:	4b4a      	ldr	r3, [pc, #296]	; (b5960 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa90>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b5838:	494a      	ldr	r1, [pc, #296]	; (b5964 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa94>)
   b583a:	609d      	str	r5, [r3, #8]
   b583c:	e9c3 5500 	strd	r5, r5, [r3]
   b5840:	4849      	ldr	r0, [pc, #292]	; (b5968 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa98>)
   b5842:	f002 fabd 	bl	b7dc0 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b5846:	4949      	ldr	r1, [pc, #292]	; (b596c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa9c>)
   b5848:	4849      	ldr	r0, [pc, #292]	; (b5970 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaa0>)
   b584a:	f002 fab9 	bl	b7dc0 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b584e:	4949      	ldr	r1, [pc, #292]	; (b5974 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaa4>)
   b5850:	483b      	ldr	r0, [pc, #236]	; (b5940 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xa70>)
   b5852:	f002 fab5 	bl	b7dc0 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b5856:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5858:	46a2      	mov	sl, r4
   b585a:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
   b585e:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b5862:	46c1      	mov	r9, r8
   b5864:	f8d6 c000 	ldr.w	ip, [r6]
   b5868:	f8ca c000 	str.w	ip, [sl]
   b586c:	465e      	mov	r6, fp
   b586e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5870:	f859 3910 	ldr.w	r3, [r9], #-16
   b5874:	9306      	str	r3, [sp, #24]
   b5876:	9b05      	ldr	r3, [sp, #20]
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b5878:	f8df e104 	ldr.w	lr, [pc, #260]	; b5980 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab0>
   b587c:	461a      	mov	r2, r3
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b587e:	4626      	mov	r6, r4
   b5880:	9b06      	ldr	r3, [sp, #24]
   b5882:	6013      	str	r3, [r2, #0]
   b5884:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b5886:	af72      	add	r7, sp, #456	; 0x1c8
      constexpr __shared_count() noexcept : _M_pi(0)
   b5888:	e9ce 5500 	strd	r5, r5, [lr]
   b588c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b588e:	f8c7 c000 	str.w	ip, [r7]
        BleUuid sUuid(svcUuid);
   b5892:	46dc      	mov	ip, fp
   b5894:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5898:	ae7e      	add	r6, sp, #504	; 0x1f8
   b589a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b589c:	9b06      	ldr	r3, [sp, #24]
   b589e:	6033      	str	r3, [r6, #0]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b58a0:	ab7e      	add	r3, sp, #504	; 0x1f8
   b58a2:	4670      	mov	r0, lr
   b58a4:	4934      	ldr	r1, [pc, #208]	; (b5978 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaa8>)
   b58a6:	9300      	str	r3, [sp, #0]
   b58a8:	f04f 0210 	mov.w	r2, #16
   b58ac:	ab72      	add	r3, sp, #456	; 0x1c8
   b58ae:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b58b2:	f002 ffef 	bl	b8894 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b58b6:	f8df c0b8 	ldr.w	ip, [pc, #184]	; b5970 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaa0>
   b58ba:	f8d8 8000 	ldr.w	r8, [r8]
   b58be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b58c2:	46a6      	mov	lr, r4
   b58c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b58c8:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b58cc:	f8dc e000 	ldr.w	lr, [ip]
   b58d0:	f8ca e000 	str.w	lr, [sl]
   b58d4:	46dc      	mov	ip, fp
   b58d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b58da:	9b05      	ldr	r3, [sp, #20]
      : _M_ptr(0), _M_refcount()
   b58dc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b5984 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab4>
   b58e0:	f8c3 8000 	str.w	r8, [r3]
        BleUuid cUuid(charUuid);
   b58e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b58e6:	f50d 7ce4 	add.w	ip, sp, #456	; 0x1c8
        BleUuid sUuid(svcUuid);
   b58ea:	465c      	mov	r4, fp
        BleUuid cUuid(charUuid);
   b58ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
      constexpr __shared_count() noexcept : _M_pi(0)
   b58f0:	e9c9 5500 	strd	r5, r5, [r9]
   b58f4:	f8c7 e000 	str.w	lr, [r7]
        BleUuid sUuid(svcUuid);
   b58f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b58fa:	af7e      	add	r7, sp, #504	; 0x1f8
   b58fc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b58fe:	4b1f      	ldr	r3, [pc, #124]	; (b597c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xaac>)
        BleUuid sUuid(svcUuid);
   b5900:	f8c6 8000 	str.w	r8, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5904:	9301      	str	r3, [sp, #4]
   b5906:	ab7e      	add	r3, sp, #504	; 0x1f8
   b5908:	e03e      	b.n	b5988 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xab8>
   b590a:	bf00      	nop
   b590c:	000bd414 	.word	0x000bd414
   b5910:	000bd74a 	.word	0x000bd74a
   b5914:	000bd22d 	.word	0x000bd22d
   b5918:	000bd234 	.word	0x000bd234
   b591c:	2003e55c 	.word	0x2003e55c
   b5920:	42276a76 	.word	0x42276a76
   b5924:	c2af692b 	.word	0xc2af692b
   b5928:	42276b5f 	.word	0x42276b5f
   b592c:	c2af56cd 	.word	0xc2af56cd
   b5930:	42278a2d 	.word	0x42278a2d
   b5934:	000bd3d4 	.word	0x000bd3d4
   b5938:	c2af56d8 	.word	0xc2af56d8
   b593c:	000bd458 	.word	0x000bd458
   b5940:	20035568 	.word	0x20035568
   b5944:	000bd23b 	.word	0x000bd23b
   b5948:	000bd240 	.word	0x000bd240
   b594c:	000bd247 	.word	0x000bd247
   b5950:	2003e4f8 	.word	0x2003e4f8
   b5954:	2003e5c0 	.word	0x2003e5c0
   b5958:	2003535c 	.word	0x2003535c
   b595c:	2003557c 	.word	0x2003557c
   b5960:	2003e698 	.word	0x2003e698
   b5964:	000bd24e 	.word	0x000bd24e
   b5968:	20035540 	.word	0x20035540
   b596c:	000bd273 	.word	0x000bd273
   b5970:	20035554 	.word	0x20035554
   b5974:	000bd298 	.word	0x000bd298
   b5978:	000bd2bd 	.word	0x000bd2bd
   b597c:	000b424d 	.word	0x000b424d
   b5980:	2003e6a8 	.word	0x2003e6a8
   b5984:	2003e690 	.word	0x2003e690
   b5988:	f04f 0204 	mov.w	r2, #4
   b598c:	4943      	ldr	r1, [pc, #268]	; (b5a9c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbcc>)
   b598e:	9300      	str	r3, [sp, #0]
   b5990:	4648      	mov	r0, r9
   b5992:	ab72      	add	r3, sp, #456	; 0x1c8
   b5994:	9502      	str	r5, [sp, #8]
   b5996:	f002 ff7d 	bl	b8894 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   b599a:	4941      	ldr	r1, [pc, #260]	; (b5aa0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbd0>)
   b599c:	4841      	ldr	r0, [pc, #260]	; (b5aa4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbd4>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b599e:	4c42      	ldr	r4, [pc, #264]	; (b5aa8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbd8>)
   b59a0:	f003 fc9b 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
   b59a4:	4841      	ldr	r0, [pc, #260]	; (b5aac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbdc>)
   b59a6:	f003 faa5 	bl	b8ef4 <_ZN9IPAddressC1Ev>
   b59aa:	493d      	ldr	r1, [pc, #244]	; (b5aa0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbd0>)
   b59ac:	4840      	ldr	r0, [pc, #256]	; (b5ab0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbe0>)
   b59ae:	f003 fc94 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
   b59b2:	493b      	ldr	r1, [pc, #236]	; (b5aa0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbd0>)
   b59b4:	483f      	ldr	r0, [pc, #252]	; (b5ab4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbe4>)
   b59b6:	f003 fc90 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   b59ba:	4939      	ldr	r1, [pc, #228]	; (b5aa0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbd0>)
   b59bc:	483e      	ldr	r0, [pc, #248]	; (b5ab8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbe8>)
   b59be:	f003 fc8c 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
HttpClient http;
   b59c2:	483e      	ldr	r0, [pc, #248]	; (b5abc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbec>)
   b59c4:	f000 ff6e 	bl	b68a4 <_ZN10HttpClientC1Ev>
   b59c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b59cc:	9300      	str	r3, [sp, #0]
   b59ce:	f242 7210 	movw	r2, #10000	; 0x2710
   b59d2:	4b3b      	ldr	r3, [pc, #236]	; (b5ac0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbf0>)
   b59d4:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b59d8:	4620      	mov	r0, r4
   b59da:	f001 f93b 	bl	b6c54 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b59de:	4b39      	ldr	r3, [pc, #228]	; (b5ac4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbf4>)
   b59e0:	6023      	str	r3, [r4, #0]
   b59e2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   b59e6:	ecbd 8b0e 	vpop	{d8-d14}
   b59ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_M_deallocate(_M_impl._M_start,
   b59ee:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b59f0:	b118      	cbz	r0, b59fa <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb2a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   b59f2:	68a1      	ldr	r1, [r4, #8]
   b59f4:	1a09      	subs	r1, r1, r0
   b59f6:	f7fe fb54 	bl	b40a2 <_ZdlPvj>
Railway pinkLine = Railway(
   b59fa:	4833      	ldr	r0, [pc, #204]	; (b5ac8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbf8>)
   b59fc:	f7ff f8ba 	bl	b4b74 <_ZN7RailwayD1Ev>
Railway purpleLine = Railway(
   b5a00:	4832      	ldr	r0, [pc, #200]	; (b5acc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbfc>)
   b5a02:	f7ff f8b7 	bl	b4b74 <_ZN7RailwayD1Ev>
Railway orangeLine = Railway(
   b5a06:	4832      	ldr	r0, [pc, #200]	; (b5ad0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc00>)
   b5a08:	f7ff f8b4 	bl	b4b74 <_ZN7RailwayD1Ev>
Railway greenLine = Railway(
   b5a0c:	4831      	ldr	r0, [pc, #196]	; (b5ad4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc04>)
   b5a0e:	f7ff f8b1 	bl	b4b74 <_ZN7RailwayD1Ev>
Railway brownLine = Railway(
   b5a12:	4831      	ldr	r0, [pc, #196]	; (b5ad8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc08>)
   b5a14:	f7ff f8ae 	bl	b4b74 <_ZN7RailwayD1Ev>
Railway blueLine = Railway(
   b5a18:	4830      	ldr	r0, [pc, #192]	; (b5adc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc0c>)
   b5a1a:	f7ff f8ab 	bl	b4b74 <_ZN7RailwayD1Ev>
Railway redLine = Railway(
   b5a1e:	4830      	ldr	r0, [pc, #192]	; (b5ae0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc10>)
   b5a20:	f7ff f8a8 	bl	b4b74 <_ZN7RailwayD1Ev>
   b5a24:	e7dd      	b.n	b59e2 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb12>
JsonParserStatic<10000, 1000> parser;
   b5a26:	4820      	ldr	r0, [pc, #128]	; (b5aa8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbd8>)
   b5a28:	f7fe fb46 	bl	b40b8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5a2c:	4b23      	ldr	r3, [pc, #140]	; (b5abc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbec>)
   b5a2e:	4a2d      	ldr	r2, [pc, #180]	; (b5ae4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc14>)
	if (_M_pi != nullptr)
   b5a30:	699c      	ldr	r4, [r3, #24]
   b5a32:	601a      	str	r2, [r3, #0]
   b5a34:	b17c      	cbz	r4, b5a56 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb86>
      if (--_M_use_count == 0)
   b5a36:	6863      	ldr	r3, [r4, #4]
   b5a38:	3b01      	subs	r3, #1
   b5a3a:	6063      	str	r3, [r4, #4]
   b5a3c:	b95b      	cbnz	r3, b5a56 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb86>
          _M_dispose();
   b5a3e:	6823      	ldr	r3, [r4, #0]
   b5a40:	4620      	mov	r0, r4
   b5a42:	689b      	ldr	r3, [r3, #8]
   b5a44:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5a46:	68a3      	ldr	r3, [r4, #8]
   b5a48:	3b01      	subs	r3, #1
   b5a4a:	60a3      	str	r3, [r4, #8]
   b5a4c:	b91b      	cbnz	r3, b5a56 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb86>
            _M_destroy();
   b5a4e:	6823      	ldr	r3, [r4, #0]
   b5a50:	4620      	mov	r0, r4
   b5a52:	68db      	ldr	r3, [r3, #12]
   b5a54:	4798      	blx	r3
   b5a56:	4818      	ldr	r0, [pc, #96]	; (b5ab8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbe8>)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5a58:	4c23      	ldr	r4, [pc, #140]	; (b5ae8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc18>)
   b5a5a:	f003 fbf3 	bl	b9244 <_ZN6StringD1Ev>
} http_request_t;
   b5a5e:	4815      	ldr	r0, [pc, #84]	; (b5ab4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbe4>)
   b5a60:	f003 fbf0 	bl	b9244 <_ZN6StringD1Ev>
   b5a64:	4812      	ldr	r0, [pc, #72]	; (b5ab0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbe0>)
   b5a66:	f003 fbed 	bl	b9244 <_ZN6StringD1Ev>
   b5a6a:	480e      	ldr	r0, [pc, #56]	; (b5aa4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbd4>)
   b5a6c:	f003 fbea 	bl	b9244 <_ZN6StringD1Ev>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   b5a70:	481e      	ldr	r0, [pc, #120]	; (b5aec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc1c>)
   b5a72:	f002 fbf6 	bl	b8262 <_ZN8particle17BleCharacteristicD1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   b5a76:	481e      	ldr	r0, [pc, #120]	; (b5af0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc20>)
   b5a78:	f002 fbf3 	bl	b8262 <_ZN8particle17BleCharacteristicD1Ev>
      }
   b5a7c:	481d      	ldr	r0, [pc, #116]	; (b5af4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc24>)
   b5a7e:	f7fe fdc9 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5a82:	481d      	ldr	r0, [pc, #116]	; (b5af8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xc28>)
   b5a84:	f7fe fdc6 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5a88:	e9d4 5600 	ldrd	r5, r6, [r4]
	  for (; __first != __last; ++__first)
   b5a8c:	42ae      	cmp	r6, r5
   b5a8e:	d0ae      	beq.n	b59ee <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xb1e>
      __pointer->~_Tp();
   b5a90:	4628      	mov	r0, r5
   b5a92:	f7ff f86f 	bl	b4b74 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b5a96:	3564      	adds	r5, #100	; 0x64
   b5a98:	e7f8      	b.n	b5a8c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0xbbc>
   b5a9a:	bf00      	nop
   b5a9c:	000bd2c0 	.word	0x000bd2c0
   b5aa0:	000bd4ba 	.word	0x000bd4ba
   b5aa4:	2003e630 	.word	0x2003e630
   b5aa8:	20037f3c 	.word	0x20037f3c
   b5aac:	2003e640 	.word	0x2003e640
   b5ab0:	2003e658 	.word	0x2003e658
   b5ab4:	2003e66c 	.word	0x2003e66c
   b5ab8:	2003e680 	.word	0x2003e680
   b5abc:	200356bc 	.word	0x200356bc
   b5ac0:	2003a678 	.word	0x2003a678
   b5ac4:	000bd3c0 	.word	0x000bd3c0
   b5ac8:	2003e4f8 	.word	0x2003e4f8
   b5acc:	2003e55c 	.word	0x2003e55c
   b5ad0:	20037ed8 	.word	0x20037ed8
   b5ad4:	20035658 	.word	0x20035658
   b5ad8:	200355f0 	.word	0x200355f0
   b5adc:	2003558c 	.word	0x2003558c
   b5ae0:	2003e5cc 	.word	0x2003e5cc
   b5ae4:	000bd7c4 	.word	0x000bd7c4
   b5ae8:	2003e5c0 	.word	0x2003e5c0
   b5aec:	2003e690 	.word	0x2003e690
   b5af0:	2003e6a8 	.word	0x2003e6a8
   b5af4:	2003e698 	.word	0x2003e698
   b5af8:	2003557c 	.word	0x2003557c

000b5afc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
   b5afc:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   b5afe:	b510      	push	{r4, lr}
   b5b00:	4613      	mov	r3, r2
	  const ptrdiff_t _Num = __last - __first;
   b5b02:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
   b5b06:	d005      	beq.n	b5b14 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   b5b08:	4601      	mov	r1, r0
   b5b0a:	4622      	mov	r2, r4
   b5b0c:	4618      	mov	r0, r3
   b5b0e:	f005 fa66 	bl	bafde <memmove>
   b5b12:	4603      	mov	r3, r0
	}
   b5b14:	1918      	adds	r0, r3, r4
   b5b16:	bd10      	pop	{r4, pc}

000b5b18 <_ZN7RailwayC1ERKS_>:
class Railway{
   b5b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5b1c:	460d      	mov	r5, r1
   b5b1e:	4604      	mov	r4, r0
   b5b20:	f7fe fe20 	bl	b4764 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5b24:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5b28:	2600      	movs	r6, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5b2a:	1ac9      	subs	r1, r1, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5b2c:	e9c4 6603 	strd	r6, r6, [r4, #12]
   b5b30:	6166      	str	r6, [r4, #20]
      { _M_create_storage(__n); }
   b5b32:	1089      	asrs	r1, r1, #2
   b5b34:	f104 000c 	add.w	r0, r4, #12
   b5b38:	f7fe fffc 	bl	b4b34 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
			      _Category>::__copy_m(__first, __last, __result);
   b5b3c:	68e2      	ldr	r2, [r4, #12]
   b5b3e:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
   b5b42:	f7ff ffdb 	bl	b5afc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b5b46:	f105 0118 	add.w	r1, r5, #24
	this->_M_impl._M_finish =
   b5b4a:	6120      	str	r0, [r4, #16]
   b5b4c:	f104 0018 	add.w	r0, r4, #24
   b5b50:	f7ff f83e 	bl	b4bd0 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5b54:	e9d5 3709 	ldrd	r3, r7, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5b58:	4824      	ldr	r0, [pc, #144]	; (b5bec <_ZN7RailwayC1ERKS_+0xd4>)
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5b5a:	62e6      	str	r6, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5b5c:	1aff      	subs	r7, r7, r3
   b5b5e:	10bb      	asrs	r3, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5b60:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5b64:	4358      	muls	r0, r3
   b5b66:	f7fe facf 	bl	b4108 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5b6a:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5b6e:	4407      	add	r7, r0
   b5b70:	62e7      	str	r7, [r4, #44]	; 0x2c
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5b72:	e9d5 7809 	ldrd	r7, r8, [r5, #36]	; 0x24
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5b76:	4606      	mov	r6, r0
   b5b78:	45b8      	cmp	r8, r7
   b5b7a:	d007      	beq.n	b5b8c <_ZN7RailwayC1ERKS_+0x74>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5b7c:	b11e      	cbz	r6, b5b86 <_ZN7RailwayC1ERKS_+0x6e>
   b5b7e:	4639      	mov	r1, r7
   b5b80:	4630      	mov	r0, r6
   b5b82:	f7ff f825 	bl	b4bd0 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5b86:	360c      	adds	r6, #12
   b5b88:	370c      	adds	r7, #12
   b5b8a:	e7f5      	b.n	b5b78 <_ZN7RailwayC1ERKS_+0x60>
	this->_M_impl._M_finish =
   b5b8c:	62a6      	str	r6, [r4, #40]	; 0x28
   b5b8e:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b5b92:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b5b96:	f7fe fb1d 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5b9a:	e9d5 3712 	ldrd	r3, r7, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5b9e:	4813      	ldr	r0, [pc, #76]	; (b5bec <_ZN7RailwayC1ERKS_+0xd4>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5ba0:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5ba2:	2300      	movs	r3, #0
   b5ba4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   b5ba8:	6523      	str	r3, [r4, #80]	; 0x50
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5baa:	10fb      	asrs	r3, r7, #3
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5bac:	4358      	muls	r0, r3
   b5bae:	f7fe fae5 	bl	b417c <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
   b5bb2:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   b5bb6:	4407      	add	r7, r0
   b5bb8:	6527      	str	r7, [r4, #80]	; 0x50
   b5bba:	e9d5 7812 	ldrd	r7, r8, [r5, #72]	; 0x48
	this->_M_impl._M_start = this->_M_allocate(__n);
   b5bbe:	4606      	mov	r6, r0
   b5bc0:	45b8      	cmp	r8, r7
   b5bc2:	d007      	beq.n	b5bd4 <_ZN7RailwayC1ERKS_+0xbc>
   b5bc4:	b11e      	cbz	r6, b5bce <_ZN7RailwayC1ERKS_+0xb6>
   b5bc6:	4639      	mov	r1, r7
   b5bc8:	4630      	mov	r0, r6
   b5bca:	f7fe fb03 	bl	b41d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.isra.0>
   b5bce:	3618      	adds	r6, #24
   b5bd0:	3718      	adds	r7, #24
   b5bd2:	e7f5      	b.n	b5bc0 <_ZN7RailwayC1ERKS_+0xa8>
	this->_M_impl._M_finish =
   b5bd4:	64e6      	str	r6, [r4, #76]	; 0x4c
   b5bd6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b5bd8:	6563      	str	r3, [r4, #84]	; 0x54
   b5bda:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b5bdc:	65a3      	str	r3, [r4, #88]	; 0x58
   b5bde:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b5be0:	65e3      	str	r3, [r4, #92]	; 0x5c
   b5be2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b5be4:	6623      	str	r3, [r4, #96]	; 0x60
   b5be6:	4620      	mov	r0, r4
   b5be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5bec:	aaaaaaab 	.word	0xaaaaaaab

000b5bf0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
   b5bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5bf4:	eba1 0800 	sub.w	r8, r1, r0
   b5bf8:	4969      	ldr	r1, [pc, #420]	; (b5da0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1b0>)
   b5bfa:	f8df a1ac 	ldr.w	sl, [pc, #428]	; b5da8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1b8>
   b5bfe:	ea4f 08a8 	mov.w	r8, r8, asr #2
	__copy_m(_II __first, _II __last, _OI __result)
   b5c02:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5c04:	fb01 f808 	mul.w	r8, r1, r8
   b5c08:	4614      	mov	r4, r2
   b5c0a:	f1b8 0f00 	cmp.w	r8, #0
   b5c0e:	f340 80c2 	ble.w	b5d96 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1a6>
   b5c12:	4629      	mov	r1, r5
   b5c14:	4620      	mov	r0, r4
   b5c16:	f7fe fbe5 	bl	b43e4 <_ZNSt6vectorI10CheckpointSaIS0_EEaSERKS2_.isra.0>
      if (&__x != this)
   b5c1a:	42a5      	cmp	r5, r4
   b5c1c:	d025      	beq.n	b5c6a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x7a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c1e:	e9d5 9103 	ldrd	r9, r1, [r5, #12]
			 - this->_M_impl._M_start); }
   b5c22:	68e2      	ldr	r2, [r4, #12]
   b5c24:	6963      	ldr	r3, [r4, #20]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c26:	eba1 0609 	sub.w	r6, r1, r9
			 - this->_M_impl._M_start); }
   b5c2a:	1a9b      	subs	r3, r3, r2
	  if (__xlen > capacity())
   b5c2c:	429e      	cmp	r6, r3
   b5c2e:	d943      	bls.n	b5cb8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xc8>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5c30:	2e00      	cmp	r6, #0
   b5c32:	d03f      	beq.n	b5cb4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xc4>
	if (__n > this->_M_max_size())
   b5c34:	4b5b      	ldr	r3, [pc, #364]	; (b5da4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1b4>)
   b5c36:	429e      	cmp	r6, r3
   b5c38:	d901      	bls.n	b5c3e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x4e>
	  std::__throw_bad_alloc();
   b5c3a:	f004 f9ab 	bl	b9f94 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5c3e:	4630      	mov	r0, r6
   b5c40:	9101      	str	r1, [sp, #4]
   b5c42:	f7fe fa28 	bl	b4096 <_Znwj>
   b5c46:	9901      	ldr	r1, [sp, #4]
   b5c48:	4607      	mov	r7, r0
			      _Category>::__copy_m(__first, __last, __result);
   b5c4a:	463a      	mov	r2, r7
   b5c4c:	4648      	mov	r0, r9
   b5c4e:	f7ff ff55 	bl	b5afc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5c52:	68e0      	ldr	r0, [r4, #12]
	if (__p)
   b5c54:	b118      	cbz	r0, b5c5e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x6e>
			    - this->_M_impl._M_start);
   b5c56:	6961      	ldr	r1, [r4, #20]
	::operator delete(__p
   b5c58:	1a09      	subs	r1, r1, r0
   b5c5a:	f7fe fa22 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b5c5e:	60e7      	str	r7, [r4, #12]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b5c60:	4437      	add	r7, r6
   b5c62:	6167      	str	r7, [r4, #20]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b5c64:	68e3      	ldr	r3, [r4, #12]
   b5c66:	4433      	add	r3, r6
   b5c68:	6123      	str	r3, [r4, #16]
   b5c6a:	f105 0118 	add.w	r1, r5, #24
   b5c6e:	f104 0018 	add.w	r0, r4, #24
   b5c72:	f7fe fff1 	bl	b4c58 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
      if (&__x != this)
   b5c76:	42a5      	cmp	r5, r4
   b5c78:	d042      	beq.n	b5d00 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x110>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c7a:	e9d5 6b09 	ldrd	r6, fp, [r5, #36]	; 0x24
			 - this->_M_impl._M_start); }
   b5c7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b5c80:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c82:	ebab 0906 	sub.w	r9, fp, r6
			 - this->_M_impl._M_start); }
   b5c86:	1a89      	subs	r1, r1, r2
	  if (__xlen > capacity())
   b5c88:	4549      	cmp	r1, r9
   b5c8a:	d252      	bcs.n	b5d32 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x142>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5c8c:	ea4f 00a9 	mov.w	r0, r9, asr #2
	  pointer __result = this->_M_allocate(__n);
   b5c90:	fb0a f000 	mul.w	r0, sl, r0
   b5c94:	f7fe fa38 	bl	b4108 <_ZNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE11_M_allocateEj.isra.0>
   b5c98:	4607      	mov	r7, r0
	  _ForwardIterator __cur = __result;
   b5c9a:	4602      	mov	r2, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   b5c9c:	45b3      	cmp	fp, r6
   b5c9e:	d01f      	beq.n	b5ce0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xf0>
   b5ca0:	b12a      	cbz	r2, b5cae <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xbe>
   b5ca2:	4610      	mov	r0, r2
   b5ca4:	4631      	mov	r1, r6
   b5ca6:	9201      	str	r2, [sp, #4]
   b5ca8:	f7fe ff92 	bl	b4bd0 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5cac:	9a01      	ldr	r2, [sp, #4]
   b5cae:	320c      	adds	r2, #12
   b5cb0:	360c      	adds	r6, #12
   b5cb2:	e7f3      	b.n	b5c9c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xac>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b5cb4:	4637      	mov	r7, r6
   b5cb6:	e7c8      	b.n	b5c4a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x5a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5cb8:	6923      	ldr	r3, [r4, #16]
   b5cba:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
   b5cbc:	429e      	cmp	r6, r3
   b5cbe:	d803      	bhi.n	b5cc8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xd8>
   b5cc0:	4648      	mov	r0, r9
   b5cc2:	f7ff ff1b 	bl	b5afc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
    { return std::uninitialized_copy(__first, __last, __result); }
   b5cc6:	e7cd      	b.n	b5c64 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x74>
   b5cc8:	eb09 0103 	add.w	r1, r9, r3
   b5ccc:	4648      	mov	r0, r9
   b5cce:	f7ff ff15 	bl	b5afc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
   b5cd2:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
   b5cd6:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
   b5cda:	1a10      	subs	r0, r2, r0
   b5cdc:	4418      	add	r0, r3
   b5cde:	e7f0      	b.n	b5cc2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0xd2>
	__destroy(__first, __last);
   b5ce0:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   b5ce4:	f7fe ff3b 	bl	b4b5e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIiSaIiEEEEvT_S6_>
	      _M_deallocate(this->_M_impl._M_start,
   b5ce8:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if (__p)
   b5cea:	b118      	cbz	r0, b5cf4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x104>
			    - this->_M_impl._M_start);
   b5cec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b5cee:	1a09      	subs	r1, r1, r0
   b5cf0:	f7fe f9d7 	bl	b40a2 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
   b5cf4:	6267      	str	r7, [r4, #36]	; 0x24
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   b5cf6:	444f      	add	r7, r9
   b5cf8:	62e7      	str	r7, [r4, #44]	; 0x2c
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   b5cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b5cfc:	444b      	add	r3, r9
   b5cfe:	62a3      	str	r3, [r4, #40]	; 0x28
	this->_M_assign(__str);
   b5d00:	f105 0130 	add.w	r1, r5, #48	; 0x30
   b5d04:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b5d08:	f004 f99a 	bl	ba040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
   b5d0c:	f105 0148 	add.w	r1, r5, #72	; 0x48
   b5d10:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b5d14:	f7fe fbb8 	bl	b4488 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEaSERKS7_.isra.0>
   b5d18:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   b5d1a:	6563      	str	r3, [r4, #84]	; 0x54
   b5d1c:	6dab      	ldr	r3, [r5, #88]	; 0x58
   b5d1e:	65a3      	str	r3, [r4, #88]	; 0x58
   b5d20:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   b5d22:	65e3      	str	r3, [r4, #92]	; 0x5c
   b5d24:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   b5d26:	6623      	str	r3, [r4, #96]	; 0x60
	      ++__first;
   b5d28:	3564      	adds	r5, #100	; 0x64
	      ++__result;
   b5d2a:	3464      	adds	r4, #100	; 0x64
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5d2c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b5d30:	e76b      	b.n	b5c0a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5d32:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   b5d34:	1abf      	subs	r7, r7, r2
	  else if (size() >= __xlen)
   b5d36:	45b9      	cmp	r9, r7
   b5d38:	d80c      	bhi.n	b5d54 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x164>
			      _Category>::__copy_m(__first, __last, __result);
   b5d3a:	4630      	mov	r0, r6
   b5d3c:	4659      	mov	r1, fp
   b5d3e:	f7fe ffc3 	bl	b4cc8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIiSaIiEEPS5_EET0_T_SA_S9_>
      : _M_current(__i) { }
   b5d42:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   b5d44:	4606      	mov	r6, r0
	  for (; __first != __last; ++__first)
   b5d46:	42b7      	cmp	r7, r6
   b5d48:	d0d7      	beq.n	b5cfa <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x10a>
      }
   b5d4a:	4630      	mov	r0, r6
   b5d4c:	f7fe fc62 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   b5d50:	360c      	adds	r6, #12
	return *this;
   b5d52:	e7f8      	b.n	b5d46 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x156>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5d54:	10bf      	asrs	r7, r7, #2
   b5d56:	fb0a f707 	mul.w	r7, sl, r7
   b5d5a:	2f00      	cmp	r7, #0
   b5d5c:	dd09      	ble.n	b5d72 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x182>
	      *__result = *__first;
   b5d5e:	4631      	mov	r1, r6
   b5d60:	4610      	mov	r0, r2
   b5d62:	9201      	str	r2, [sp, #4]
   b5d64:	f7fe ff78 	bl	b4c58 <_ZNSt6vectorIiSaIiEEaSERKS1_.isra.0>
	      ++__result;
   b5d68:	9a01      	ldr	r2, [sp, #4]
	      ++__first;
   b5d6a:	360c      	adds	r6, #12
	      ++__result;
   b5d6c:	320c      	adds	r2, #12
	  for(_Distance __n = __last - __first; __n > 0; --__n)
   b5d6e:	3f01      	subs	r7, #1
   b5d70:	e7f3      	b.n	b5d5a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x16a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5d72:	e9d4 6709 	ldrd	r6, r7, [r4, #36]	; 0x24
   b5d76:	1bb9      	subs	r1, r7, r6
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b5d78:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					  __x._M_impl._M_finish,
   b5d7a:	6aab      	ldr	r3, [r5, #40]	; 0x28
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   b5d7c:	440e      	add	r6, r1
	      for (; __first != __last; ++__first, (void)++__cur)
   b5d7e:	42b3      	cmp	r3, r6
   b5d80:	d0bb      	beq.n	b5cfa <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x10a>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5d82:	b12f      	cbz	r7, b5d90 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x1a0>
   b5d84:	4631      	mov	r1, r6
   b5d86:	4638      	mov	r0, r7
   b5d88:	9301      	str	r3, [sp, #4]
   b5d8a:	f7fe ff21 	bl	b4bd0 <_ZNSt6vectorIiSaIiEEC1ERKS1_>
   b5d8e:	9b01      	ldr	r3, [sp, #4]
   b5d90:	360c      	adds	r6, #12
   b5d92:	370c      	adds	r7, #12
   b5d94:	e7f3      	b.n	b5d7e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_+0x18e>
	}
   b5d96:	4620      	mov	r0, r4
   b5d98:	b003      	add	sp, #12
   b5d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5d9e:	bf00      	nop
   b5da0:	c28f5c29 	.word	0xc28f5c29
   b5da4:	7ffffffc 	.word	0x7ffffffc
   b5da8:	aaaaaaab 	.word	0xaaaaaaab

000b5dac <setup>:
void setup() {
   b5dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5db0:	b0f0      	sub	sp, #448	; 0x1c0
  Serial.begin(9600);
   b5db2:	f003 ff3b 	bl	b9c2c <_Z16_fetch_usbserialv>
   b5db6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5dba:	f003 ff2b 	bl	b9c14 <_ZN9USBSerial5beginEl>
  delay(2000);
   b5dbe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5dc2:	f001 fdf1 	bl	b79a8 <delay>
  BLE.on();
   b5dc6:	f002 f95b 	bl	b8080 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5dca:	f002 f9a3 	bl	b8114 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   b5dce:	f002 f957 	bl	b8080 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5dd2:	4a7d      	ldr	r2, [pc, #500]	; (b5fc8 <setup+0x21c>)
   b5dd4:	4d7d      	ldr	r5, [pc, #500]	; (b5fcc <setup+0x220>)
   b5dd6:	4601      	mov	r1, r0
   b5dd8:	a80c      	add	r0, sp, #48	; 0x30
   b5dda:	f002 fe85 	bl	b8ae8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5dde:	a80c      	add	r0, sp, #48	; 0x30
   b5de0:	f002 fa3f 	bl	b8262 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   b5de4:	f002 f94c 	bl	b8080 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5de8:	4a79      	ldr	r2, [pc, #484]	; (b5fd0 <setup+0x224>)
   b5dea:	4601      	mov	r1, r0
   b5dec:	a80c      	add	r0, sp, #48	; 0x30
   b5dee:	f002 fe7b 	bl	b8ae8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5df2:	a80c      	add	r0, sp, #48	; 0x30
   b5df4:	f002 fa35 	bl	b8262 <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   b5df8:	a804      	add	r0, sp, #16
   b5dfa:	f002 fb68 	bl	b84ce <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   b5dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e00:	ac07      	add	r4, sp, #28
   b5e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5e04:	682e      	ldr	r6, [r5, #0]
   b5e06:	6026      	str	r6, [r4, #0]
        BleUuid tempUUID(uuid);
   b5e08:	ad07      	add	r5, sp, #28
   b5e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e0c:	ac0c      	add	r4, sp, #48	; 0x30
   b5e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5e10:	a80c      	add	r0, sp, #48	; 0x30
        BleUuid tempUUID(uuid);
   b5e12:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5e14:	f001 ff36 	bl	b7c84 <_ZNK8particle7BleUuid4typeEv>
   b5e18:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b5e1a:	a80c      	add	r0, sp, #48	; 0x30
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5e1c:	2c00      	cmp	r4, #0
   b5e1e:	d161      	bne.n	b5ee4 <setup+0x138>
            uint16_t uuid16 = tempUUID.shorted();
   b5e20:	f001 ff4c 	bl	b7cbc <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5e24:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b5e26:	f8ad 000c 	strh.w	r0, [sp, #12]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5e2a:	2302      	movs	r3, #2
   b5e2c:	aa03      	add	r2, sp, #12
   b5e2e:	2103      	movs	r1, #3
   b5e30:	a804      	add	r0, sp, #16
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b5e32:	f002 fb41 	bl	b84b8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   b5e36:	f002 f923 	bl	b8080 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5e3a:	2200      	movs	r2, #0
   b5e3c:	a904      	add	r1, sp, #16
   b5e3e:	f002 f9b3 	bl	b81a8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  request.hostname = "lapi.transitchicago.com";
   b5e42:	4c64      	ldr	r4, [pc, #400]	; (b5fd4 <setup+0x228>)

    //loopIndex must point to either the first or last checkpoint, tripleIndex cannot be 0
    void setLoopIndex(int triple, int loop){
        tripleIndex = triple;
   b5e44:	4e64      	ldr	r6, [pc, #400]	; (b5fd8 <setup+0x22c>)
  acquireWireBuffer();
   b5e46:	a80c      	add	r0, sp, #48	; 0x30
   b5e48:	f7fe fbba 	bl	b45c0 <_Z17acquireWireBufferv>
  Wire.begin();
   b5e4c:	f004 f83c 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b5e50:	f002 ffd6 	bl	b8e00 <_ZN7TwoWire5beginEv>
  request.hostname = "lapi.transitchicago.com";
   b5e54:	4961      	ldr	r1, [pc, #388]	; (b5fdc <setup+0x230>)
   b5e56:	4620      	mov	r0, r4
   b5e58:	f003 fa6d 	bl	b9336 <_ZN6StringaSEPKc>
   b5e5c:	4960      	ldr	r1, [pc, #384]	; (b5fe0 <setup+0x234>)
        loopIndex = loop;
   b5e5e:	2504      	movs	r5, #4
   b5e60:	2000      	movs	r0, #0
  request.port = 80;
   b5e62:	2350      	movs	r3, #80	; 0x50
   b5e64:	e9c1 5015 	strd	r5, r0, [r1, #84]	; 0x54
   b5e68:	e9c6 5015 	strd	r5, r0, [r6, #84]	; 0x54
   b5e6c:	63a3      	str	r3, [r4, #56]	; 0x38
        tripleIndex = triple;
   b5e6e:	4d5d      	ldr	r5, [pc, #372]	; (b5fe4 <setup+0x238>)
   b5e70:	4c5d      	ldr	r4, [pc, #372]	; (b5fe8 <setup+0x23c>)
        loopIndex = loop;
   b5e72:	2203      	movs	r2, #3
   b5e74:	2307      	movs	r3, #7
  railways = {brownLine, purpleLine, pinkLine, orangeLine};
   b5e76:	a80c      	add	r0, sp, #48	; 0x30
   b5e78:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
   b5e7c:	e9c5 2315 	strd	r2, r3, [r5, #84]	; 0x54
   b5e80:	f7ff fe4a 	bl	b5b18 <_ZN7RailwayC1ERKS_>
   b5e84:	4631      	mov	r1, r6
   b5e86:	a825      	add	r0, sp, #148	; 0x94
   b5e88:	f7ff fe46 	bl	b5b18 <_ZN7RailwayC1ERKS_>
   b5e8c:	4629      	mov	r1, r5
   b5e8e:	a83e      	add	r0, sp, #248	; 0xf8
   b5e90:	f7ff fe42 	bl	b5b18 <_ZN7RailwayC1ERKS_>
   b5e94:	4621      	mov	r1, r4
			 - this->_M_impl._M_start); }
   b5e96:	4c55      	ldr	r4, [pc, #340]	; (b5fec <setup+0x240>)
   b5e98:	a857      	add	r0, sp, #348	; 0x15c
   b5e9a:	f7ff fe3d 	bl	b5b18 <_ZN7RailwayC1ERKS_>
   b5e9e:	6822      	ldr	r2, [r4, #0]
   b5ea0:	68a3      	ldr	r3, [r4, #8]
   b5ea2:	1a9b      	subs	r3, r3, r2
	if (__len > capacity())
   b5ea4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b5ea8:	d264      	bcs.n	b5f74 <setup+0x1c8>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5eaa:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b5eae:	f7fe f8f2 	bl	b4096 <_Znwj>
   b5eb2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
   b5eb6:	4605      	mov	r5, r0
   b5eb8:	f500 77c8 	add.w	r7, r0, #400	; 0x190
	  _ForwardIterator __cur = __result;
   b5ebc:	4606      	mov	r6, r0
   b5ebe:	b11e      	cbz	r6, b5ec8 <setup+0x11c>
   b5ec0:	4641      	mov	r1, r8
   b5ec2:	4630      	mov	r0, r6
   b5ec4:	f7ff fe28 	bl	b5b18 <_ZN7RailwayC1ERKS_>
	      for (; __first != __last; ++__first, (void)++__cur)
   b5ec8:	3664      	adds	r6, #100	; 0x64
   b5eca:	42b7      	cmp	r7, r6
   b5ecc:	f108 0864 	add.w	r8, r8, #100	; 0x64
   b5ed0:	d1f5      	bne.n	b5ebe <setup+0x112>
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   b5ed2:	e9d4 6800 	ldrd	r6, r8, [r4]
	  for (; __first != __last; ++__first)
   b5ed6:	45b0      	cmp	r8, r6
   b5ed8:	d00e      	beq.n	b5ef8 <setup+0x14c>
      __pointer->~_Tp();
   b5eda:	4630      	mov	r0, r6
   b5edc:	f7fe fe4a 	bl	b4b74 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b5ee0:	3664      	adds	r6, #100	; 0x64
   b5ee2:	e7f8      	b.n	b5ed6 <setup+0x12a>
   b5ee4:	f001 feec 	bl	b7cc0 <_ZNK8particle7BleUuid8rawBytesEv>
   b5ee8:	2300      	movs	r3, #0
   b5eea:	9300      	str	r3, [sp, #0]
   b5eec:	2310      	movs	r3, #16
   b5eee:	4602      	mov	r2, r0
   b5ef0:	2107      	movs	r1, #7
   b5ef2:	eb0d 0003 	add.w	r0, sp, r3
   b5ef6:	e79c      	b.n	b5e32 <setup+0x86>
	    _M_deallocate(this->_M_impl._M_start,
   b5ef8:	6820      	ldr	r0, [r4, #0]
	if (__p)
   b5efa:	b118      	cbz	r0, b5f04 <setup+0x158>
			  - this->_M_impl._M_start);
   b5efc:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
   b5efe:	1a09      	subs	r1, r1, r0
   b5f00:	f7fe f8cf 	bl	b40a2 <_ZdlPvj>
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
   b5f04:	e9c4 5700 	strd	r5, r7, [r4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   b5f08:	60a7      	str	r7, [r4, #8]
   b5f0a:	2503      	movs	r5, #3
   b5f0c:	2664      	movs	r6, #100	; 0x64
   b5f0e:	ab0c      	add	r3, sp, #48	; 0x30
   b5f10:	fb06 3005 	mla	r0, r6, r5, r3
   b5f14:	f7fe fe2e 	bl	b4b74 <_ZN7RailwayD1Ev>
   b5f18:	3d01      	subs	r5, #1
   b5f1a:	d2f8      	bcs.n	b5f0e <setup+0x162>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f1c:	e9d4 3100 	ldrd	r3, r1, [r4]
   b5f20:	1ac9      	subs	r1, r1, r3
   b5f22:	4b33      	ldr	r3, [pc, #204]	; (b5ff0 <setup+0x244>)
   b5f24:	1089      	asrs	r1, r1, #2
   b5f26:	4359      	muls	r1, r3
  sequenceArr = std::vector<int>(railways.size() * 2, 0);
   b5f28:	2400      	movs	r4, #0
   b5f2a:	ab02      	add	r3, sp, #8
   b5f2c:	aa03      	add	r2, sp, #12
   b5f2e:	0049      	lsls	r1, r1, #1
   b5f30:	a807      	add	r0, sp, #28
   b5f32:	9403      	str	r4, [sp, #12]
   b5f34:	f7fe fb8c 	bl	b4650 <_ZNSt6vectorIiSaIiEEC1EjRKiRKS0_>
	  _M_start = __x._M_start;
   b5f38:	4b2e      	ldr	r3, [pc, #184]	; (b5ff4 <setup+0x248>)
   b5f3a:	9d07      	ldr	r5, [sp, #28]
	  _M_end_of_storage = __x._M_end_of_storage;
   b5f3c:	689a      	ldr	r2, [r3, #8]
   b5f3e:	920e      	str	r2, [sp, #56]	; 0x38
	  _M_finish = __x._M_finish;
   b5f40:	e9d3 0100 	ldrd	r0, r1, [r3]
	  _M_start = __x._M_start;
   b5f44:	601d      	str	r5, [r3, #0]
	  _M_finish = __x._M_finish;
   b5f46:	9d08      	ldr	r5, [sp, #32]
   b5f48:	605d      	str	r5, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
   b5f4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   b5f4c:	609d      	str	r5, [r3, #8]
	  _M_finish = __x._M_finish;
   b5f4e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
      }
   b5f52:	a80c      	add	r0, sp, #48	; 0x30
	  _M_finish = __x._M_finish;
   b5f54:	e9cd 4407 	strd	r4, r4, [sp, #28]
	  _M_end_of_storage = __x._M_end_of_storage;
   b5f58:	9409      	str	r4, [sp, #36]	; 0x24
      }
   b5f5a:	f7fe fb5b 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
   b5f5e:	a807      	add	r0, sp, #28
   b5f60:	f7fe fb58 	bl	b4614 <_ZNSt12_Vector_baseIiSaIiEED1Ev>
  randomizeAddress();
   b5f64:	f7fe fc34 	bl	b47d0 <_Z16randomizeAddressv>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b5f68:	9804      	ldr	r0, [sp, #16]
   b5f6a:	f001 fcd5 	bl	b7918 <free>
}
   b5f6e:	b070      	add	sp, #448	; 0x1c0
   b5f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5f74:	6865      	ldr	r5, [r4, #4]
   b5f76:	1aad      	subs	r5, r5, r2
	else if (size() >= __len)
   b5f78:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
   b5f7c:	d310      	bcc.n	b5fa0 <setup+0x1f4>
			      _Category>::__copy_m(__first, __last, __result);
   b5f7e:	a970      	add	r1, sp, #448	; 0x1c0
   b5f80:	a80c      	add	r0, sp, #48	; 0x30
   b5f82:	f7ff fe35 	bl	b5bf0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
   b5f86:	6867      	ldr	r7, [r4, #4]
   b5f88:	42b8      	cmp	r0, r7
   b5f8a:	4605      	mov	r5, r0
   b5f8c:	d0bd      	beq.n	b5f0a <setup+0x15e>
   b5f8e:	4606      	mov	r6, r0
      __pointer->~_Tp();
   b5f90:	4630      	mov	r0, r6
	  for (; __first != __last; ++__first)
   b5f92:	3664      	adds	r6, #100	; 0x64
      __pointer->~_Tp();
   b5f94:	f7fe fdee 	bl	b4b74 <_ZN7RailwayD1Ev>
	  for (; __first != __last; ++__first)
   b5f98:	42b7      	cmp	r7, r6
   b5f9a:	d1f9      	bne.n	b5f90 <setup+0x1e4>
	    this->_M_impl._M_finish = __pos;
   b5f9c:	6065      	str	r5, [r4, #4]
   b5f9e:	e7b4      	b.n	b5f0a <setup+0x15e>
   b5fa0:	ab0c      	add	r3, sp, #48	; 0x30
   b5fa2:	441d      	add	r5, r3
   b5fa4:	4629      	mov	r1, r5
   b5fa6:	4618      	mov	r0, r3
   b5fa8:	f7ff fe22 	bl	b5bf0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK7RailwayPS3_EET0_T_S8_S7_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5fac:	6866      	ldr	r6, [r4, #4]
   b5fae:	ab70      	add	r3, sp, #448	; 0x1c0
   b5fb0:	429d      	cmp	r5, r3
   b5fb2:	d007      	beq.n	b5fc4 <setup+0x218>
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
   b5fb4:	b11e      	cbz	r6, b5fbe <setup+0x212>
   b5fb6:	4629      	mov	r1, r5
   b5fb8:	4630      	mov	r0, r6
   b5fba:	f7ff fdad 	bl	b5b18 <_ZN7RailwayC1ERKS_>
   b5fbe:	3564      	adds	r5, #100	; 0x64
   b5fc0:	3664      	adds	r6, #100	; 0x64
   b5fc2:	e7f4      	b.n	b5fae <setup+0x202>
	    this->_M_impl._M_finish =
   b5fc4:	6066      	str	r6, [r4, #4]
   b5fc6:	e7a0      	b.n	b5f0a <setup+0x15e>
   b5fc8:	2003e6a8 	.word	0x2003e6a8
   b5fcc:	20035540 	.word	0x20035540
   b5fd0:	2003e690 	.word	0x2003e690
   b5fd4:	2003e630 	.word	0x2003e630
   b5fd8:	2003e55c 	.word	0x2003e55c
   b5fdc:	000bd2c3 	.word	0x000bd2c3
   b5fe0:	200355f0 	.word	0x200355f0
   b5fe4:	2003e4f8 	.word	0x2003e4f8
   b5fe8:	20037ed8 	.word	0x20037ed8
   b5fec:	2003e5c0 	.word	0x2003e5c0
   b5ff0:	c28f5c29 	.word	0xc28f5c29
   b5ff4:	2003e698 	.word	0x2003e698

000b5ff8 <_GLOBAL__sub_I_redLine>:
   b5ff8:	2001      	movs	r0, #1
   b5ffa:	f7fe bf69 	b.w	b4ed0 <_Z41__static_initialization_and_destruction_0ii.constprop.0>
	...

000b6000 <loop>:
void loop(){
   b6000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6004:	ed2d 8b04 	vpush	{d8-d9}
   b6008:	b0b7      	sub	sp, #220	; 0xdc
  Serial.println("loop start");
   b600a:	f003 fe0f 	bl	b9c2c <_Z16_fetch_usbserialv>
   b600e:	493e      	ldr	r1, [pc, #248]	; (b6108 <loop+0x108>)
    Serial.printf("%i, ", i);
   b6010:	4d3e      	ldr	r5, [pc, #248]	; (b610c <loop+0x10c>)
  Serial.println("loop start");
   b6012:	f003 f8b8 	bl	b9186 <_ZN5Print7printlnEPKc>
      : _M_current(__i) { }
   b6016:	4b3e      	ldr	r3, [pc, #248]	; (b6110 <loop+0x110>)
   b6018:	e9d3 4600 	ldrd	r4, r6, [r3]
  for(int i : sequenceArr){
   b601c:	42a6      	cmp	r6, r4
   b601e:	d009      	beq.n	b6034 <loop+0x34>
   b6020:	f854 2b04 	ldr.w	r2, [r4], #4
   b6024:	9202      	str	r2, [sp, #8]
    Serial.printf("%i, ", i);
   b6026:	f003 fe01 	bl	b9c2c <_Z16_fetch_usbserialv>
   b602a:	9a02      	ldr	r2, [sp, #8]
   b602c:	4629      	mov	r1, r5
   b602e:	f7fe faab 	bl	b4588 <_ZN5Print6printfEPKcz>
	return *this;
   b6032:	e7f3      	b.n	b601c <loop+0x1c>
  Serial.println();
   b6034:	f003 fdfa 	bl	b9c2c <_Z16_fetch_usbserialv>
   b6038:	f003 f899 	bl	b916e <_ZN5Print7printlnEv>
  Serial.println(brownLineAdr);
   b603c:	f003 fdf6 	bl	b9c2c <_Z16_fetch_usbserialv>
   b6040:	4b34      	ldr	r3, [pc, #208]	; (b6114 <loop+0x114>)
   b6042:	f8df b104 	ldr.w	fp, [pc, #260]	; b6148 <loop+0x148>
   b6046:	6819      	ldr	r1, [r3, #0]
   b6048:	4604      	mov	r4, r0
   b604a:	220a      	movs	r2, #10
   b604c:	f7fe f849 	bl	b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b6050:	4620      	mov	r0, r4
   b6052:	f003 f88c 	bl	b916e <_ZN5Print7printlnEv>
    for(int j = 0; j < railways.size(); j++){
   b6056:	2300      	movs	r3, #0
   b6058:	9302      	str	r3, [sp, #8]
   b605a:	e9db 2300 	ldrd	r2, r3, [fp]
   b605e:	1a9b      	subs	r3, r3, r2
   b6060:	4a2d      	ldr	r2, [pc, #180]	; (b6118 <loop+0x118>)
   b6062:	109b      	asrs	r3, r3, #2
   b6064:	4353      	muls	r3, r2
   b6066:	9a02      	ldr	r2, [sp, #8]
   b6068:	4293      	cmp	r3, r2
   b606a:	f240 83f5 	bls.w	b6858 <loop+0x858>
      delay(1500);
   b606e:	f240 50dc 	movw	r0, #1500	; 0x5dc
   b6072:	f001 fc99 	bl	b79a8 <delay>
	StringSumHelper(const char *p) : String(p) {}
   b6076:	4929      	ldr	r1, [pc, #164]	; (b611c <loop+0x11c>)
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   b6078:	4d29      	ldr	r5, [pc, #164]	; (b6120 <loop+0x120>)
   b607a:	a81d      	add	r0, sp, #116	; 0x74
   b607c:	f003 f92d 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
   b6080:	9b02      	ldr	r3, [sp, #8]
   b6082:	2464      	movs	r4, #100	; 0x64
   b6084:	435c      	muls	r4, r3
      { return _M_dataplus._M_p; }
   b6086:	f8db 3000 	ldr.w	r3, [fp]
   b608a:	4423      	add	r3, r4
      request.path = "/api/1.0/ttpositions.aspx?key=00ff09063caa46748434d5fa321d048f&rt=" + String(railways[j].name.c_str()) + "&outputType=JSON";
   b608c:	a819      	add	r0, sp, #100	; 0x64
   b608e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   b6090:	f003 f923 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
   b6094:	a919      	add	r1, sp, #100	; 0x64
   b6096:	a81d      	add	r0, sp, #116	; 0x74
   b6098:	f003 f99a 	bl	b93d0 <_ZplRK15StringSumHelperRK6String>
   b609c:	4921      	ldr	r1, [pc, #132]	; (b6124 <loop+0x124>)
   b609e:	f003 f9a3 	bl	b93e8 <_ZplRK15StringSumHelperPKc>
   b60a2:	4601      	mov	r1, r0
   b60a4:	4820      	ldr	r0, [pc, #128]	; (b6128 <loop+0x128>)
   b60a6:	f003 f92c 	bl	b9302 <_ZN6StringaSERKS_>
   b60aa:	a819      	add	r0, sp, #100	; 0x64
   b60ac:	f003 f8ca 	bl	b9244 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b60b0:	a81d      	add	r0, sp, #116	; 0x74
   b60b2:	f003 f8c7 	bl	b9244 <_ZN6StringD1Ev>
   b60b6:	4b1d      	ldr	r3, [pc, #116]	; (b612c <loop+0x12c>)
   b60b8:	491d      	ldr	r1, [pc, #116]	; (b6130 <loop+0x130>)
   b60ba:	481e      	ldr	r0, [pc, #120]	; (b6134 <loop+0x134>)
   b60bc:	9300      	str	r3, [sp, #0]
   b60be:	462a      	mov	r2, r5
   b60c0:	4b1d      	ldr	r3, [pc, #116]	; (b6138 <loop+0x138>)
   b60c2:	f000 fc25 	bl	b6910 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("parsing");
   b60c6:	f003 fdb1 	bl	b9c2c <_Z16_fetch_usbserialv>
   b60ca:	491c      	ldr	r1, [pc, #112]	; (b613c <loop+0x13c>)
   b60cc:	f003 f85b 	bl	b9186 <_ZN5Print7printlnEPKc>
      parser.clear();
   b60d0:	481b      	ldr	r0, [pc, #108]	; (b6140 <loop+0x140>)
   b60d2:	f000 fdb5 	bl	b6c40 <_ZN10JsonBuffer5clearEv>
	const char * c_str() const { return buffer; }
   b60d6:	6869      	ldr	r1, [r5, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b60d8:	9103      	str	r1, [sp, #12]
   b60da:	4608      	mov	r0, r1
   b60dc:	f004 ffe2 	bl	bb0a4 <strlen>
   b60e0:	9903      	ldr	r1, [sp, #12]
   b60e2:	4602      	mov	r2, r0
   b60e4:	4816      	ldr	r0, [pc, #88]	; (b6140 <loop+0x140>)
   b60e6:	f000 fd8e 	bl	b6c06 <_ZN10JsonBuffer7addDataEPKcj>
      if(!parser.parse()){
   b60ea:	4815      	ldr	r0, [pc, #84]	; (b6140 <loop+0x140>)
   b60ec:	f001 f948 	bl	b7380 <_ZN10JsonParser5parseEv>
   b60f0:	9003      	str	r0, [sp, #12]
   b60f2:	bb58      	cbnz	r0, b614c <loop+0x14c>
        Serial.println("parsing failed");
   b60f4:	f003 fd9a 	bl	b9c2c <_Z16_fetch_usbserialv>
   b60f8:	4912      	ldr	r1, [pc, #72]	; (b6144 <loop+0x144>)
}
   b60fa:	b037      	add	sp, #220	; 0xdc
   b60fc:	ecbd 8b04 	vpop	{d8-d9}
   b6100:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("parsing failed");
   b6104:	f003 b83f 	b.w	b9186 <_ZN5Print7printlnEPKc>
   b6108:	000bd2db 	.word	0x000bd2db
   b610c:	000bd2e6 	.word	0x000bd2e6
   b6110:	2003e698 	.word	0x2003e698
   b6114:	20035654 	.word	0x20035654
   b6118:	c28f5c29 	.word	0xc28f5c29
   b611c:	000bd2eb 	.word	0x000bd2eb
   b6120:	2003e67c 	.word	0x2003e67c
   b6124:	000bd32e 	.word	0x000bd32e
   b6128:	2003e658 	.word	0x2003e658
   b612c:	000bd33f 	.word	0x000bd33f
   b6130:	2003e630 	.word	0x2003e630
   b6134:	200356bc 	.word	0x200356bc
   b6138:	2003534c 	.word	0x2003534c
   b613c:	000bd343 	.word	0x000bd343
   b6140:	20037f3c 	.word	0x20037f3c
   b6144:	000bd34b 	.word	0x000bd34b
   b6148:	2003e5c0 	.word	0x2003e5c0
	return *(this->_M_impl._M_start + __n);
   b614c:	f8db 1000 	ldr.w	r1, [fp]
      Railway currentRailway = railways[j];
   b6150:	a81d      	add	r0, sp, #116	; 0x74
   b6152:	4421      	add	r1, r4
   b6154:	f7ff fce0 	bl	b5b18 <_ZN7RailwayC1ERKS_>
      std::vector<Checkpoint> currentCheckpoints = currentRailway.checkpoints;
   b6158:	a91d      	add	r1, sp, #116	; 0x74
   b615a:	a804      	add	r0, sp, #16
   b615c:	f7fe fb02 	bl	b4764 <_ZNSt6vectorI10CheckpointSaIS0_EEC1ERKS2_>
      int count = 0;
   b6160:	f04f 0a00 	mov.w	sl, #0
        JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   b6164:	49b9      	ldr	r1, [pc, #740]	; (b644c <loop+0x44c>)
   b6166:	a80a      	add	r0, sp, #40	; 0x28
   b6168:	f000 fd84 	bl	b6c74 <_ZNK10JsonParser12getReferenceEv>
   b616c:	4ab8      	ldr	r2, [pc, #736]	; (b6450 <loop+0x450>)
   b616e:	a90a      	add	r1, sp, #40	; 0x28
   b6170:	a80d      	add	r0, sp, #52	; 0x34
   b6172:	f000 feff 	bl	b6f74 <_ZNK13JsonReference3keyEPKc>
   b6176:	4ab7      	ldr	r2, [pc, #732]	; (b6454 <loop+0x454>)
   b6178:	a90d      	add	r1, sp, #52	; 0x34
   b617a:	a811      	add	r0, sp, #68	; 0x44
   b617c:	f000 fefa 	bl	b6f74 <_ZNK13JsonReference3keyEPKc>
   b6180:	2200      	movs	r2, #0
   b6182:	a911      	add	r1, sp, #68	; 0x44
   b6184:	a815      	add	r0, sp, #84	; 0x54
   b6186:	f000 fde3 	bl	b6d50 <_ZNK13JsonReference5indexEj>
   b618a:	4ab3      	ldr	r2, [pc, #716]	; (b6458 <loop+0x458>)
   b618c:	a915      	add	r1, sp, #84	; 0x54
   b618e:	a819      	add	r0, sp, #100	; 0x64
   b6190:	f000 fef0 	bl	b6f74 <_ZNK13JsonReference3keyEPKc>
   b6194:	4652      	mov	r2, sl
   b6196:	a919      	add	r1, sp, #100	; 0x64
   b6198:	a807      	add	r0, sp, #28
   b619a:	f000 fdd9 	bl	b6d50 <_ZNK13JsonReference5indexEj>
   b619e:	a819      	add	r0, sp, #100	; 0x64
   b61a0:	f000 fce0 	bl	b6b64 <_ZN13JsonReferenceD1Ev>
   b61a4:	a815      	add	r0, sp, #84	; 0x54
   b61a6:	f000 fcdd 	bl	b6b64 <_ZN13JsonReferenceD1Ev>
   b61aa:	a811      	add	r0, sp, #68	; 0x44
   b61ac:	f000 fcda 	bl	b6b64 <_ZN13JsonReferenceD1Ev>
   b61b0:	a80d      	add	r0, sp, #52	; 0x34
   b61b2:	f000 fcd7 	bl	b6b64 <_ZN13JsonReferenceD1Ev>
   b61b6:	a80a      	add	r0, sp, #40	; 0x28
   b61b8:	f000 fcd4 	bl	b6b64 <_ZN13JsonReferenceD1Ev>
        String nextStation = train.key("nextStaNm").valueString();
   b61bc:	4aa7      	ldr	r2, [pc, #668]	; (b645c <loop+0x45c>)
   b61be:	a907      	add	r1, sp, #28
   b61c0:	a819      	add	r0, sp, #100	; 0x64
   b61c2:	f000 fed7 	bl	b6f74 <_ZNK13JsonReference3keyEPKc>
   b61c6:	a919      	add	r1, sp, #100	; 0x64
   b61c8:	a80d      	add	r0, sp, #52	; 0x34
   b61ca:	f000 feed 	bl	b6fa8 <_ZNK13JsonReference11valueStringEv>
   b61ce:	a819      	add	r0, sp, #100	; 0x64
   b61d0:	f000 fcc8 	bl	b6b64 <_ZN13JsonReferenceD1Ev>
        String destNm = train.key("destNm").valueString();
   b61d4:	4aa2      	ldr	r2, [pc, #648]	; (b6460 <loop+0x460>)
   b61d6:	a907      	add	r1, sp, #28
   b61d8:	a819      	add	r0, sp, #100	; 0x64
   b61da:	f000 fecb 	bl	b6f74 <_ZNK13JsonReference3keyEPKc>
   b61de:	a919      	add	r1, sp, #100	; 0x64
   b61e0:	a811      	add	r0, sp, #68	; 0x44
   b61e2:	f000 fee1 	bl	b6fa8 <_ZNK13JsonReference11valueStringEv>
   b61e6:	a819      	add	r0, sp, #100	; 0x64
   b61e8:	f000 fcbc 	bl	b6b64 <_ZN13JsonReferenceD1Ev>
        int trainDir = train.key("trDr").valueString().toInt();
   b61ec:	4a9d      	ldr	r2, [pc, #628]	; (b6464 <loop+0x464>)
   b61ee:	a907      	add	r1, sp, #28
   b61f0:	a815      	add	r0, sp, #84	; 0x54
   b61f2:	f000 febf 	bl	b6f74 <_ZNK13JsonReference3keyEPKc>
   b61f6:	a915      	add	r1, sp, #84	; 0x54
   b61f8:	a819      	add	r0, sp, #100	; 0x64
   b61fa:	f000 fed5 	bl	b6fa8 <_ZNK13JsonReference11valueStringEv>
   b61fe:	a819      	add	r0, sp, #100	; 0x64
   b6200:	f003 f953 	bl	b94aa <_ZNK6String5toIntEv>
   b6204:	4604      	mov	r4, r0
   b6206:	a819      	add	r0, sp, #100	; 0x64
   b6208:	f003 f81c 	bl	b9244 <_ZN6StringD1Ev>
   b620c:	a815      	add	r0, sp, #84	; 0x54
   b620e:	f000 fca9 	bl	b6b64 <_ZN13JsonReferenceD1Ev>
        float lat = atof(train.key("lat").valueString().c_str());
   b6212:	4a95      	ldr	r2, [pc, #596]	; (b6468 <loop+0x468>)
   b6214:	a907      	add	r1, sp, #28
   b6216:	a815      	add	r0, sp, #84	; 0x54
   b6218:	f000 feac 	bl	b6f74 <_ZNK13JsonReference3keyEPKc>
   b621c:	a915      	add	r1, sp, #84	; 0x54
   b621e:	a819      	add	r0, sp, #100	; 0x64
   b6220:	f000 fec2 	bl	b6fa8 <_ZNK13JsonReference11valueStringEv>
   b6224:	9819      	ldr	r0, [sp, #100]	; 0x64
   b6226:	f004 feb1 	bl	baf8c <atof>
   b622a:	ec51 0b10 	vmov	r0, r1, d0
   b622e:	f004 fe39 	bl	baea4 <__aeabi_d2f>
   b6232:	ee08 0a90 	vmov	s17, r0
   b6236:	a819      	add	r0, sp, #100	; 0x64
   b6238:	f003 f804 	bl	b9244 <_ZN6StringD1Ev>
   b623c:	a815      	add	r0, sp, #84	; 0x54
   b623e:	f000 fc91 	bl	b6b64 <_ZN13JsonReferenceD1Ev>
        float lon = atof(train.key("lon").valueString().c_str());
   b6242:	4a8a      	ldr	r2, [pc, #552]	; (b646c <loop+0x46c>)
   b6244:	a907      	add	r1, sp, #28
   b6246:	a815      	add	r0, sp, #84	; 0x54
   b6248:	f000 fe94 	bl	b6f74 <_ZNK13JsonReference3keyEPKc>
   b624c:	a915      	add	r1, sp, #84	; 0x54
   b624e:	a819      	add	r0, sp, #100	; 0x64
   b6250:	f000 feaa 	bl	b6fa8 <_ZNK13JsonReference11valueStringEv>
   b6254:	9819      	ldr	r0, [sp, #100]	; 0x64
   b6256:	f004 fe99 	bl	baf8c <atof>
   b625a:	ec51 0b10 	vmov	r0, r1, d0
   b625e:	f004 fe21 	bl	baea4 <__aeabi_d2f>
   b6262:	ee08 0a10 	vmov	s16, r0
   b6266:	a819      	add	r0, sp, #100	; 0x64
   b6268:	f002 ffec 	bl	b9244 <_ZN6StringD1Ev>
   b626c:	a815      	add	r0, sp, #84	; 0x54
   b626e:	f000 fc79 	bl	b6b64 <_ZN13JsonReferenceD1Ev>
        if(nextStation.length() <= 1){
   b6272:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b6274:	2b01      	cmp	r3, #1
   b6276:	d878      	bhi.n	b636a <loop+0x36a>
          Serial.println("break");
   b6278:	f003 fcd8 	bl	b9c2c <_Z16_fetch_usbserialv>
   b627c:	497c      	ldr	r1, [pc, #496]	; (b6470 <loop+0x470>)
          Wire.beginTransmission(brownLineAdr);
   b627e:	f8df 9200 	ldr.w	r9, [pc, #512]	; b6480 <loop+0x480>
        if(i == 2 || currentRailway.name == purpleLine.name){
   b6282:	f8df 8200 	ldr.w	r8, [pc, #512]	; b6484 <loop+0x484>
        if(i != 2 && (currentRailway.name == brownLine.name || currentRailway.name == purpleLine.name)){
   b6286:	f8df a200 	ldr.w	sl, [pc, #512]	; b6488 <loop+0x488>
          Serial.println("break");
   b628a:	f002 ff7c 	bl	b9186 <_ZN5Print7printlnEPKc>
          break;
   b628e:	a811      	add	r0, sp, #68	; 0x44
   b6290:	f002 ffd8 	bl	b9244 <_ZN6StringD1Ev>
   b6294:	a80d      	add	r0, sp, #52	; 0x34
   b6296:	f002 ffd5 	bl	b9244 <_ZN6StringD1Ev>
   b629a:	a807      	add	r0, sp, #28
   b629c:	f000 fc62 	bl	b6b64 <_ZN13JsonReferenceD1Ev>
      for(int i = 0; i < 3; i++){
   b62a0:	9b02      	ldr	r3, [sp, #8]
   b62a2:	2400      	movs	r4, #0
   b62a4:	00df      	lsls	r7, r3, #3
        if(i == 2 || currentRailway.name == purpleLine.name){
   b62a6:	2c02      	cmp	r4, #2
   b62a8:	f000 8284 	beq.w	b67b4 <loop+0x7b4>
   b62ac:	4641      	mov	r1, r8
   b62ae:	a829      	add	r0, sp, #164	; 0xa4
   b62b0:	f7fe fa7c 	bl	b47ac <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b62b4:	2800      	cmp	r0, #0
   b62b6:	f040 827d 	bne.w	b67b4 <loop+0x7b4>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b62ba:	f003 fe05 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b62be:	4b6d      	ldr	r3, [pc, #436]	; (b6474 <loop+0x474>)
   b62c0:	681b      	ldr	r3, [r3, #0]
   b62c2:	59d9      	ldr	r1, [r3, r7]
          Wire.beginTransmission(brownLineAdr);
   b62c4:	f002 fdd2 	bl	b8e6c <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(String(currentRailway.colors[0].c_str()));
   b62c8:	f003 fdfe 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b62cc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   b62ce:	4605      	mov	r5, r0
   b62d0:	6819      	ldr	r1, [r3, #0]
   b62d2:	a819      	add	r0, sp, #100	; 0x64
   b62d4:	f003 f801 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
   b62d8:	9919      	ldr	r1, [sp, #100]	; 0x64
   b62da:	4628      	mov	r0, r5
   b62dc:	f7fd ffa4 	bl	b4228 <_ZN5Print5writeEPKc.isra.0>
   b62e0:	a819      	add	r0, sp, #100	; 0x64
   b62e2:	f002 ffaf 	bl	b9244 <_ZN6StringD1Ev>
        Wire.write(String(currentRailway.colors[1].c_str()));
   b62e6:	f003 fdef 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b62ea:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   b62ec:	4605      	mov	r5, r0
   b62ee:	6999      	ldr	r1, [r3, #24]
   b62f0:	a819      	add	r0, sp, #100	; 0x64
   b62f2:	f002 fff2 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
   b62f6:	9919      	ldr	r1, [sp, #100]	; 0x64
   b62f8:	4628      	mov	r0, r5
   b62fa:	f7fd ff95 	bl	b4228 <_ZN5Print5writeEPKc.isra.0>
   b62fe:	a819      	add	r0, sp, #100	; 0x64
   b6300:	f002 ffa0 	bl	b9244 <_ZN6StringD1Ev>
        Wire.endTransmission();
   b6304:	f003 fde0 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b6308:	f002 fdb7 	bl	b8e7a <_ZN7TwoWire15endTransmissionEv>
        if(i == 2 || currentRailway.name == purpleLine.name){
   b630c:	2c02      	cmp	r4, #2
   b630e:	f000 8256 	beq.w	b67be <loop+0x7be>
   b6312:	4641      	mov	r1, r8
   b6314:	a829      	add	r0, sp, #164	; 0xa4
   b6316:	f7fe fa49 	bl	b47ac <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b631a:	2800      	cmp	r0, #0
   b631c:	f040 824f 	bne.w	b67be <loop+0x7be>
          Wire.beginTransmission(sequenceArr[j * 2 + i]);
   b6320:	f003 fdd2 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b6324:	4b53      	ldr	r3, [pc, #332]	; (b6474 <loop+0x474>)
   b6326:	681b      	ldr	r3, [r3, #0]
   b6328:	59d9      	ldr	r1, [r3, r7]
   b632a:	f002 fd9f 	bl	b8e6c <_ZN7TwoWire17beginTransmissionEi>
        if(i != 2 && (currentRailway.name == brownLine.name || currentRailway.name == purpleLine.name)){
   b632e:	4651      	mov	r1, sl
   b6330:	a829      	add	r0, sp, #164	; 0xa4
   b6332:	f7fe fa3b 	bl	b47ac <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6336:	4605      	mov	r5, r0
   b6338:	2800      	cmp	r0, #0
   b633a:	f040 8273 	bne.w	b6824 <loop+0x824>
   b633e:	4641      	mov	r1, r8
   b6340:	a829      	add	r0, sp, #164	; 0xa4
   b6342:	f7fe fa33 	bl	b47ac <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6346:	2800      	cmp	r0, #0
   b6348:	f000 8242 	beq.w	b67d0 <loop+0x7d0>
   b634c:	9a26      	ldr	r2, [sp, #152]	; 0x98
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b634e:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
   b6352:	1a9b      	subs	r3, r3, r2
          for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b6354:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
   b6358:	f080 823a 	bcs.w	b67d0 <loop+0x7d0>
            Wire.write('0');
   b635c:	f003 fdb4 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b6360:	2130      	movs	r1, #48	; 0x30
   b6362:	f7fd ff5d 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
          for(int j = 0; j < currentRailway.outputs[2].size(); j++){
   b6366:	3501      	adds	r5, #1
   b6368:	e7f0      	b.n	b634c <loop+0x34c>
        Serial.print(String(currentRailway.name.c_str()) + " ");
   b636a:	f003 fc5f 	bl	b9c2c <_Z16_fetch_usbserialv>
   b636e:	9929      	ldr	r1, [sp, #164]	; 0xa4
   b6370:	4605      	mov	r5, r0
   b6372:	a815      	add	r0, sp, #84	; 0x54
   b6374:	f002 ffb1 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
	StringSumHelper(const String &s) : String(s) {}
   b6378:	a915      	add	r1, sp, #84	; 0x54
   b637a:	a819      	add	r0, sp, #100	; 0x64
   b637c:	f002 ffd0 	bl	b9320 <_ZN6StringC1ERKS_>
   b6380:	493d      	ldr	r1, [pc, #244]	; (b6478 <loop+0x478>)
   b6382:	a819      	add	r0, sp, #100	; 0x64
   b6384:	f003 f830 	bl	b93e8 <_ZplRK15StringSumHelperPKc>
   b6388:	6801      	ldr	r1, [r0, #0]
   b638a:	4628      	mov	r0, r5
   b638c:	f002 fee8 	bl	b9160 <_ZN5Print5printEPKc>
class StringSumHelper : public String
   b6390:	a819      	add	r0, sp, #100	; 0x64
   b6392:	f002 ff57 	bl	b9244 <_ZN6StringD1Ev>
   b6396:	a815      	add	r0, sp, #84	; 0x54
   b6398:	f002 ff54 	bl	b9244 <_ZN6StringD1Ev>
        Serial.printf("train %i: ", count);
   b639c:	f003 fc46 	bl	b9c2c <_Z16_fetch_usbserialv>
   b63a0:	4936      	ldr	r1, [pc, #216]	; (b647c <loop+0x47c>)
   b63a2:	4652      	mov	r2, sl
   b63a4:	f7fe f8f0 	bl	b4588 <_ZN5Print6printfEPKcz>
   b63a8:	e9dd 3504 	ldrd	r3, r5, [sp, #16]
   b63ac:	1aed      	subs	r5, r5, r3
   b63ae:	10ed      	asrs	r5, r5, #3
        for(int i = 0; i < checkpointCount; i++){
   b63b0:	2700      	movs	r7, #0
   b63b2:	42af      	cmp	r7, r5
	return *(this->_M_impl._M_start + __n);
   b63b4:	9904      	ldr	r1, [sp, #16]
   b63b6:	da33      	bge.n	b6420 <loop+0x420>
   b63b8:	eb01 06c7 	add.w	r6, r1, r7, lsl #3
    }

    float getDistance(float trainLat, float trainLon){
      return sqrt(pow((trainLat - lat), 2) + pow((trainLon - lon), 2));
   b63bc:	edd6 7a00 	vldr	s15, [r6]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b63c0:	ee78 7ae7 	vsub.f32	s15, s17, s15
   b63c4:	ee17 0a90 	vmov	r0, s15
   b63c8:	f004 fa1c 	bl	ba804 <__aeabi_f2d>
   b63cc:	edd6 7a01 	vldr	s15, [r6, #4]
   b63d0:	ee78 7a67 	vsub.f32	s15, s16, s15
   b63d4:	4680      	mov	r8, r0
   b63d6:	ee17 0a90 	vmov	r0, s15
   b63da:	4689      	mov	r9, r1
   b63dc:	f004 fa12 	bl	ba804 <__aeabi_f2d>
   b63e0:	4602      	mov	r2, r0
   b63e2:	460b      	mov	r3, r1
   b63e4:	f004 fa66 	bl	ba8b4 <__aeabi_dmul>
   b63e8:	4642      	mov	r2, r8
   b63ea:	ec41 0b19 	vmov	d9, r0, r1
   b63ee:	464b      	mov	r3, r9
   b63f0:	4640      	mov	r0, r8
   b63f2:	4649      	mov	r1, r9
   b63f4:	f004 fa5e 	bl	ba8b4 <__aeabi_dmul>
   b63f8:	4602      	mov	r2, r0
   b63fa:	460b      	mov	r3, r1
   b63fc:	ec51 0b19 	vmov	r0, r1, d9
   b6400:	f004 f8a2 	bl	ba548 <__adddf3>
   b6404:	ec41 0b10 	vmov	d0, r0, r1
   b6408:	f003 ff92 	bl	ba330 <sqrt>
          currentRailway.distances[i] = currentCheckpoints[i].getDistance(lat, lon);
   b640c:	9e20      	ldr	r6, [sp, #128]	; 0x80
   b640e:	ec51 0b10 	vmov	r0, r1, d0
   b6412:	f004 fd47 	bl	baea4 <__aeabi_d2f>
   b6416:	eb06 0687 	add.w	r6, r6, r7, lsl #2
        for(int i = 0; i < checkpointCount; i++){
   b641a:	3701      	adds	r7, #1
   b641c:	6030      	str	r0, [r6, #0]
   b641e:	e7c8      	b.n	b63b2 <loop+0x3b2>
      : _M_current(__i) { }
   b6420:	e9dd 7620 	ldrd	r7, r6, [sp, #128]	; 0x80
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
   b6424:	42b7      	cmp	r7, r6
   b6426:	d035      	beq.n	b6494 <loop+0x494>
   b6428:	1d3a      	adds	r2, r7, #4
   b642a:	463b      	mov	r3, r7
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
   b642c:	4296      	cmp	r6, r2
	++_M_current;
   b642e:	4610      	mov	r0, r2
   b6430:	d031      	beq.n	b6496 <loop+0x496>
	if (__comp(__first, __result))
   b6432:	edd3 7a00 	vldr	s15, [r3]
   b6436:	ed90 7a00 	vldr	s14, [r0]
   b643a:	eeb4 7a67 	vcmp.f32	s14, s15
   b643e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6442:	f102 0204 	add.w	r2, r2, #4
   b6446:	bf48      	it	mi
   b6448:	4603      	movmi	r3, r0
   b644a:	e7ef      	b.n	b642c <loop+0x42c>
   b644c:	20037f3c 	.word	0x20037f3c
   b6450:	000bd35a 	.word	0x000bd35a
   b6454:	000bd360 	.word	0x000bd360
   b6458:	000bd366 	.word	0x000bd366
   b645c:	000bd36c 	.word	0x000bd36c
   b6460:	000bd376 	.word	0x000bd376
   b6464:	000bd37d 	.word	0x000bd37d
   b6468:	000bd382 	.word	0x000bd382
   b646c:	000bd386 	.word	0x000bd386
   b6470:	000bd38a 	.word	0x000bd38a
   b6474:	2003e698 	.word	0x2003e698
   b6478:	000bd2e9 	.word	0x000bd2e9
   b647c:	000bd390 	.word	0x000bd390
   b6480:	20035654 	.word	0x20035654
   b6484:	2003e58c 	.word	0x2003e58c
   b6488:	20035620 	.word	0x20035620
   b648c:	7dcccccc 	.word	0x7dcccccc
   b6490:	00000000 	.word	0x00000000
   b6494:	463b      	mov	r3, r7
        if(closestIndex == currentRailway.tripleIndex){
   b6496:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b6498:	1bdb      	subs	r3, r3, r7
   b649a:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
   b649e:	ea4f 00a3 	mov.w	r0, r3, asr #2
          closestIndex = currentRailway.loopIndex;
   b64a2:	bf08      	it	eq
   b64a4:	9833      	ldreq	r0, [sp, #204]	; 0xcc
   b64a6:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
        x1 = currentCheckpoints[closestIndex].lat;
   b64aa:	edd3 7a00 	vldr	s15, [r3]
        y1 = currentCheckpoints[closestIndex].lon;
   b64ae:	edd3 6a01 	vldr	s13, [r3, #4]
        if(currentCheckpoints[closestIndex].lat > lat){
   b64b2:	eef4 8ae7 	vcmpe.f32	s17, s15
   b64b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          slope = (y1 - y) / (x1 - x);
   b64ba:	ee77 5ae8 	vsub.f32	s11, s15, s17
          slope = (y - y1) / (x - x1);
   b64be:	bf55      	itete	pl
   b64c0:	ee38 6a66 	vsubpl.f32	s12, s16, s13
          slope = (y1 - y) / (x1 - x);
   b64c4:	ee76 7ac8 	vsubmi.f32	s15, s13, s16
          slope = (y - y1) / (x - x1);
   b64c8:	ee78 7ae7 	vsubpl.f32	s15, s17, s15
          slope = (y1 - y) / (x1 - x);
   b64cc:	ee87 7aa5 	vdivmi.f32	s14, s15, s11
   b64d0:	ea4f 06c0 	mov.w	r6, r0, lsl #3
          slope = (y - y1) / (x - x1);
   b64d4:	bf58      	it	pl
   b64d6:	ee86 7a27 	vdivpl.f32	s14, s12, s15
        if(slope == 0){
   b64da:	ed5f 7a14 	vldr	s15, [pc, #-80]	; b648c <loop+0x48c>
   b64de:	eeb5 7a40 	vcmp.f32	s14, #0.0
   b64e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b64e6:	d00a      	beq.n	b64fe <loop+0x4fe>
        }else if(slope >= __FLT_MAX__ / 10){
   b64e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b64ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          perpendicularSlope = -1 / slope;
   b64f0:	bfba      	itte	lt
   b64f2:	eebf 6a00 	vmovlt.f32	s12, #240	; 0xbf800000 -1.0
   b64f6:	eec6 7a07 	vdivlt.f32	s15, s12, s14
          perpendicularSlope = 0;
   b64fa:	ed5f 7a1b 	vldrge	s15, [pc, #-108]	; b6490 <loop+0x490>
          nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
   b64fe:	eeb0 7a48 	vmov.f32	s14, s16
   b6502:	eea7 7aa5 	vfma.f32	s14, s15, s11
   b6506:	eef4 6ac7 	vcmpe.f32	s13, s14
   b650a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b650e:	bf4c      	ite	mi
   b6510:	f04f 0c01 	movmi.w	ip, #1
   b6514:	f04f 0c00 	movpl.w	ip, #0
        if(closestIndex == 0){
   b6518:	2800      	cmp	r0, #0
   b651a:	d166      	bne.n	b65ea <loop+0x5ea>
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b651c:	ed91 7a02 	vldr	s14, [r1, #8]
          if(currentRailway.loopIndex == closestIndex){
   b6520:	9e33      	ldr	r6, [sp, #204]	; 0xcc
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
   b6522:	ee37 7a68 	vsub.f32	s14, s14, s17
   b6526:	eef0 6a48 	vmov.f32	s13, s16
   b652a:	eee7 6a27 	vfma.f32	s13, s14, s15
   b652e:	ed91 7a03 	vldr	s14, [r1, #12]
   b6532:	eef4 6ac7 	vcmpe.f32	s13, s14
   b6536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b653a:	bfcc      	ite	gt
   b653c:	2501      	movgt	r5, #1
   b653e:	2500      	movle	r5, #0
          if(currentRailway.loopIndex == closestIndex){
   b6540:	b9ee      	cbnz	r6, b657e <loop+0x57e>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6542:	1e53      	subs	r3, r2, #1
   b6544:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
            if(nearestSide != pointSide){
   b6548:	4565      	cmp	r5, ip
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b654a:	ed91 7a00 	vldr	s14, [r1]
   b654e:	edd1 6a01 	vldr	s13, [r1, #4]
            if(nearestSide != pointSide){
   b6552:	f040 8090 	bne.w	b6676 <loop+0x676>
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6556:	ee77 8a68 	vsub.f32	s17, s14, s17
   b655a:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b655e:	eeb4 8ae6 	vcmpe.f32	s16, s13
   b6562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            }else if(nearestSide != loopPointSide){
   b6566:	bfcc      	ite	gt
   b6568:	2101      	movgt	r1, #1
   b656a:	2100      	movle	r1, #0
   b656c:	42a9      	cmp	r1, r5
              }else if(nearestSide != loopPointSide){
   b656e:	d100      	bne.n	b6572 <loop+0x572>
                secondClosestIndex = currentRailway.tripleIndex + 1;
   b6570:	1c53      	adds	r3, r2, #1
          if(closestIndex < secondClosestIndex){
   b6572:	429a      	cmp	r2, r3
   b6574:	f2c0 8081 	blt.w	b667a <loop+0x67a>
   b6578:	4611      	mov	r1, r2
   b657a:	461e      	mov	r6, r3
   b657c:	e005      	b.n	b658a <loop+0x58a>
            if(pointSide == nearestSide){
   b657e:	4565      	cmp	r5, ip
   b6580:	d069      	beq.n	b6656 <loop+0x656>
   b6582:	4602      	mov	r2, r0
   b6584:	4606      	mov	r6, r0
   b6586:	2301      	movs	r3, #1
   b6588:	4619      	mov	r1, r3
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b658a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   b658e:	eb07 0086 	add.w	r0, r7, r6, lsl #2
   b6592:	ed90 7a00 	vldr	s14, [r0]
   b6596:	edd1 7a00 	vldr	s15, [r1]
          segmentPos *= currentRailway.scalers[lowerIndex];
   b659a:	9923      	ldr	r1, [sp, #140]	; 0x8c
          if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b659c:	9f34      	ldr	r7, [sp, #208]	; 0xd0
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b659e:	ee77 7a27 	vadd.f32	s15, s14, s15
          segmentPos *= currentRailway.scalers[lowerIndex];
   b65a2:	eb01 0186 	add.w	r1, r1, r6, lsl #2
          segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
   b65a6:	ee87 0a27 	vdiv.f32	s0, s14, s15
          if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b65aa:	4297      	cmp	r7, r2
          segmentPos *= currentRailway.scalers[lowerIndex];
   b65ac:	ed91 8a00 	vldr	s16, [r1]
   b65b0:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   b65b4:	ee28 8a00 	vmul.f32	s16, s16, s0
          if(closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound){
   b65b8:	dc01      	bgt.n	b65be <loop+0x5be>
   b65ba:	429f      	cmp	r7, r3
   b65bc:	dd60      	ble.n	b6680 <loop+0x680>
            Serial.println("before");
   b65be:	f003 fb35 	bl	b9c2c <_Z16_fetch_usbserialv>
   b65c2:	49ae      	ldr	r1, [pc, #696]	; (b687c <loop+0x87c>)
   b65c4:	f002 fddf 	bl	b9186 <_ZN5Print7printlnEPKc>
            lowerScaleBound = 0;
   b65c8:	2700      	movs	r7, #0
        bool inLoop = false;
   b65ca:	46b8      	mov	r8, r7
            pcbSegment = 0;
   b65cc:	463d      	mov	r5, r7
   b65ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b65d0:	42be      	cmp	r6, r7
   b65d2:	f340 8094 	ble.w	b66fe <loop+0x6fe>
            segmentPos += currentRailway.scalers[i];
   b65d6:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   b65da:	ee07 2a90 	vmov	s15, r2
   b65de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b65e2:	3701      	adds	r7, #1
            segmentPos += currentRailway.scalers[i];
   b65e4:	ee38 8a27 	vadd.f32	s16, s16, s15
          for(int i = lowerScaleBound; i < lowerIndex; i++){
   b65e8:	e7f2      	b.n	b65d0 <loop+0x5d0>
   b65ea:	3e08      	subs	r6, #8
   b65ec:	440e      	add	r6, r1
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b65ee:	ed96 7a00 	vldr	s14, [r6]
   b65f2:	ee37 7a68 	vsub.f32	s14, s14, s17
   b65f6:	eef0 6a48 	vmov.f32	s13, s16
   b65fa:	eee7 6a27 	vfma.f32	s13, s14, s15
          if(closestIndex == checkpointCount - 1){
   b65fe:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
          pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
   b6602:	1e43      	subs	r3, r0, #1
   b6604:	ed96 7a01 	vldr	s14, [r6, #4]
   b6608:	eef4 6ac7 	vcmpe.f32	s13, s14
   b660c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6610:	bfcc      	ite	gt
   b6612:	2601      	movgt	r6, #1
   b6614:	2600      	movle	r6, #0
          if(closestIndex == checkpointCount - 1){
   b6616:	4586      	cmp	lr, r0
   b6618:	d129      	bne.n	b666e <loop+0x66e>
            if(closestIndex == currentRailway.loopIndex){
   b661a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   b661c:	4283      	cmp	r3, r0
   b661e:	d118      	bne.n	b6652 <loop+0x652>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6620:	1e53      	subs	r3, r2, #1
   b6622:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
              if(nearestSide != pointSide){
   b6626:	4566      	cmp	r6, ip
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6628:	ed91 7a00 	vldr	s14, [r1]
   b662c:	edd1 6a01 	vldr	s13, [r1, #4]
              if(nearestSide != pointSide){
   b6630:	d002      	beq.n	b6638 <loop+0x638>
                secondClosestIndex = checkpointCount - 2;
   b6632:	1eab      	subs	r3, r5, #2
   b6634:	4602      	mov	r2, r0
   b6636:	e79c      	b.n	b6572 <loop+0x572>
              loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
   b6638:	ee77 8a68 	vsub.f32	s17, s14, s17
   b663c:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b6640:	eeb4 8ae6 	vcmpe.f32	s16, s13
   b6644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              }else if(nearestSide != loopPointSide){
   b6648:	bfcc      	ite	gt
   b664a:	2101      	movgt	r1, #1
   b664c:	2100      	movle	r1, #0
   b664e:	42b1      	cmp	r1, r6
   b6650:	e78d      	b.n	b656e <loop+0x56e>
              if(pointSide == nearestSide){
   b6652:	4566      	cmp	r6, ip
   b6654:	d1ed      	bne.n	b6632 <loop+0x632>
        String destNm = train.key("destNm").valueString();
   b6656:	a811      	add	r0, sp, #68	; 0x44
   b6658:	f002 fdf4 	bl	b9244 <_ZN6StringD1Ev>
        String nextStation = train.key("nextStaNm").valueString();
   b665c:	a80d      	add	r0, sp, #52	; 0x34
   b665e:	f002 fdf1 	bl	b9244 <_ZN6StringD1Ev>
        JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   b6662:	a807      	add	r0, sp, #28
        count++;
   b6664:	f10a 0a01 	add.w	sl, sl, #1
        JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   b6668:	f000 fa7c 	bl	b6b64 <_ZN13JsonReferenceD1Ev>
   b666c:	e57a      	b.n	b6164 <loop+0x164>
            if(pointSide == nearestSide){
   b666e:	4566      	cmp	r6, ip
   b6670:	d1e0      	bne.n	b6634 <loop+0x634>
              secondClosestIndex = closestIndex + 1;
   b6672:	1c43      	adds	r3, r0, #1
   b6674:	e7de      	b.n	b6634 <loop+0x634>
   b6676:	4602      	mov	r2, r0
   b6678:	e785      	b.n	b6586 <loop+0x586>
   b667a:	4619      	mov	r1, r3
   b667c:	4616      	mov	r6, r2
   b667e:	e784      	b.n	b658a <loop+0x58a>
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b6680:	9d35      	ldr	r5, [sp, #212]	; 0xd4
   b6682:	4295      	cmp	r5, r2
   b6684:	db01      	blt.n	b668a <loop+0x68a>
   b6686:	429d      	cmp	r5, r3
   b6688:	da09      	bge.n	b669e <loop+0x69e>
            Serial.println("after");
   b668a:	f003 facf 	bl	b9c2c <_Z16_fetch_usbserialv>
   b668e:	497c      	ldr	r1, [pc, #496]	; (b6880 <loop+0x880>)
          else if(closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound){
   b6690:	462f      	mov	r7, r5
            Serial.println("after");
   b6692:	f002 fd78 	bl	b9186 <_ZN5Print7printlnEPKc>
        bool inLoop = false;
   b6696:	f04f 0800 	mov.w	r8, #0
            pcbSegment = 1;
   b669a:	2501      	movs	r5, #1
            Serial.println("after");
   b669c:	e797      	b.n	b65ce <loop+0x5ce>
            Serial.println("in");
   b669e:	f003 fac5 	bl	b9c2c <_Z16_fetch_usbserialv>
   b66a2:	4978      	ldr	r1, [pc, #480]	; (b6884 <loop+0x884>)
   b66a4:	f002 fd6f 	bl	b9186 <_ZN5Print7printlnEPKc>
            if(currentRailway.name == brownLine.name){
   b66a8:	4977      	ldr	r1, [pc, #476]	; (b6888 <loop+0x888>)
   b66aa:	a829      	add	r0, sp, #164	; 0xa4
   b66ac:	f7fe f87e 	bl	b47ac <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b66b0:	4680      	mov	r8, r0
   b66b2:	b9d8      	cbnz	r0, b66ec <loop+0x6ec>
            }else if(currentRailway.name == pinkLine.name || currentRailway.name == orangeLine.name || currentRailway.name == purpleLine.name){
   b66b4:	4975      	ldr	r1, [pc, #468]	; (b688c <loop+0x88c>)
   b66b6:	a829      	add	r0, sp, #164	; 0xa4
   b66b8:	f7fe f878 	bl	b47ac <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b66bc:	4680      	mov	r8, r0
   b66be:	b9c0      	cbnz	r0, b66f2 <loop+0x6f2>
   b66c0:	4973      	ldr	r1, [pc, #460]	; (b6890 <loop+0x890>)
   b66c2:	a829      	add	r0, sp, #164	; 0xa4
   b66c4:	f7fe f872 	bl	b47ac <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b66c8:	4680      	mov	r8, r0
   b66ca:	b990      	cbnz	r0, b66f2 <loop+0x6f2>
   b66cc:	4971      	ldr	r1, [pc, #452]	; (b6894 <loop+0x894>)
   b66ce:	a829      	add	r0, sp, #164	; 0xa4
   b66d0:	f7fe f86c 	bl	b47ac <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b66d4:	4680      	mov	r8, r0
   b66d6:	b960      	cbnz	r0, b66f2 <loop+0x6f2>
            }else if(currentRailway.name == greenLine.name){
   b66d8:	496f      	ldr	r1, [pc, #444]	; (b6898 <loop+0x898>)
   b66da:	a829      	add	r0, sp, #164	; 0xa4
   b66dc:	f7fe f866 	bl	b47ac <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b66e0:	4680      	mov	r8, r0
   b66e2:	b148      	cbz	r0, b66f8 <loop+0x6f8>
              trainDir = 6 - trainDir;
   b66e4:	f1c4 0406 	rsb	r4, r4, #6
            pcbSegment = 2;
   b66e8:	2502      	movs	r5, #2
   b66ea:	e770      	b.n	b65ce <loop+0x5ce>
   b66ec:	2502      	movs	r5, #2
              trainDir = 5;
   b66ee:	2405      	movs	r4, #5
   b66f0:	e76d      	b.n	b65ce <loop+0x5ce>
            pcbSegment = 2;
   b66f2:	2502      	movs	r5, #2
              trainDir = 1;
   b66f4:	2401      	movs	r4, #1
   b66f6:	e76a      	b.n	b65ce <loop+0x5ce>
            inLoop = true;
   b66f8:	f8dd 800c 	ldr.w	r8, [sp, #12]
   b66fc:	e7f4      	b.n	b66e8 <loop+0x6e8>
          if(currentRailway.name == orangeLine.name && inLoop){
   b66fe:	4964      	ldr	r1, [pc, #400]	; (b6890 <loop+0x890>)
   b6700:	a829      	add	r0, sp, #164	; 0xa4
   b6702:	f7fe f853 	bl	b47ac <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b6706:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
   b670a:	b110      	cbz	r0, b6712 <loop+0x712>
   b670c:	f1b8 0f00 	cmp.w	r8, #0
   b6710:	d113      	bne.n	b673a <loop+0x73a>
          }else if(currentRailway.name == greenLine.name && inLoop){
   b6712:	4961      	ldr	r1, [pc, #388]	; (b6898 <loop+0x898>)
   b6714:	a829      	add	r0, sp, #164	; 0xa4
   b6716:	f7fe f849 	bl	b47ac <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
   b671a:	bbb0      	cbnz	r0, b678a <loop+0x78a>
  { return __builtin_floorf(__x); }
   b671c:	eeb0 0a48 	vmov.f32	s0, s16
   b6720:	f003 fdc0 	bl	ba2a4 <floorf>
   b6724:	230c      	movs	r3, #12
          currentRailway.outputs[pcbSegment][(int)floor(segmentPos)] = trainDir;
   b6726:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b672a:	435d      	muls	r5, r3
   b672c:	ee10 2a10 	vmov	r2, s0
   b6730:	f859 3005 	ldr.w	r3, [r9, r5]
   b6734:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b6738:	e78d      	b.n	b6656 <loop+0x656>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b673a:	e9d9 2306 	ldrd	r2, r3, [r9, #24]
   b673e:	1a9b      	subs	r3, r3, r2
   b6740:	ea4f 08a3 	mov.w	r8, r3, asr #2
            segmentPos = (int)((1.5 * (float)currentRailway.outputs[2].size()) - segmentPos) % currentRailway.outputs[2].size();
   b6744:	ee07 8a90 	vmov	s15, r8
   b6748:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b674c:	ee17 0a90 	vmov	r0, s15
   b6750:	f004 f858 	bl	ba804 <__aeabi_f2d>
   b6754:	4b51      	ldr	r3, [pc, #324]	; (b689c <loop+0x89c>)
   b6756:	2200      	movs	r2, #0
   b6758:	f004 f8ac 	bl	ba8b4 <__aeabi_dmul>
   b675c:	4606      	mov	r6, r0
   b675e:	ee18 0a10 	vmov	r0, s16
   b6762:	460f      	mov	r7, r1
   b6764:	f004 f84e 	bl	ba804 <__aeabi_f2d>
   b6768:	460b      	mov	r3, r1
   b676a:	4602      	mov	r2, r0
   b676c:	4639      	mov	r1, r7
   b676e:	4630      	mov	r0, r6
   b6770:	f003 fee8 	bl	ba544 <__aeabi_dsub>
   b6774:	f004 fb4e 	bl	bae14 <__aeabi_d2iz>
   b6778:	fbb0 f3f8 	udiv	r3, r0, r8
   b677c:	fb03 0018 	mls	r0, r3, r8, r0
   b6780:	ee07 0a90 	vmov	s15, r0
   b6784:	eeb8 8a67 	vcvt.f32.u32	s16, s15
   b6788:	e7c8      	b.n	b671c <loop+0x71c>
          }else if(currentRailway.name == greenLine.name && inLoop){
   b678a:	f1b8 0f00 	cmp.w	r8, #0
   b678e:	d0c5      	beq.n	b671c <loop+0x71c>
   b6790:	eeb0 0a48 	vmov.f32	s0, s16
   b6794:	f003 fd86 	bl	ba2a4 <floorf>
   b6798:	e9d9 2306 	ldrd	r2, r3, [r9, #24]
            segmentPos = (currentRailway.outputs[2].size() - (int)floor(segmentPos));
   b679c:	eebd 8ac0 	vcvt.s32.f32	s16, s0
   b67a0:	1a9b      	subs	r3, r3, r2
   b67a2:	ee18 2a10 	vmov	r2, s16
   b67a6:	ebc2 03a3 	rsb	r3, r2, r3, asr #2
   b67aa:	ee08 3a10 	vmov	s16, r3
   b67ae:	eeb8 8a48 	vcvt.f32.u32	s16, s16
   b67b2:	e7b3      	b.n	b671c <loop+0x71c>
          Wire.beginTransmission(brownLineAdr);
   b67b4:	f003 fb88 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b67b8:	f8d9 1000 	ldr.w	r1, [r9]
   b67bc:	e582      	b.n	b62c4 <loop+0x2c4>
          Wire.beginTransmission(brownLineAdr);
   b67be:	f003 fb83 	bl	b9ec8 <_Z19__fetch_global_Wirev>
   b67c2:	f8d9 1000 	ldr.w	r1, [r9]
   b67c6:	f002 fb51 	bl	b8e6c <_ZN7TwoWire17beginTransmissionEi>
        if(i != 2 && (currentRailway.name == brownLine.name || currentRailway.name == purpleLine.name)){
   b67ca:	2c02      	cmp	r4, #2
   b67cc:	f47f adaf 	bne.w	b632e <loop+0x32e>
        Serial.printlnf("rail part %i", i);
   b67d0:	f003 fa2c 	bl	b9c2c <_Z16_fetch_usbserialv>
   b67d4:	4932      	ldr	r1, [pc, #200]	; (b68a0 <loop+0x8a0>)
   b67d6:	4622      	mov	r2, r4
   b67d8:	f7fd fee4 	bl	b45a4 <_ZN5Print8printlnfEPKcz>
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b67dc:	260c      	movs	r6, #12
   b67de:	4366      	muls	r6, r4
   b67e0:	2500      	movs	r5, #0
	return *(this->_M_impl._M_start + __n);
   b67e2:	9926      	ldr	r1, [sp, #152]	; 0x98
   b67e4:	198a      	adds	r2, r1, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b67e6:	5989      	ldr	r1, [r1, r6]
   b67e8:	6852      	ldr	r2, [r2, #4]
   b67ea:	1a52      	subs	r2, r2, r1
   b67ec:	ebb5 0fa2 	cmp.w	r5, r2, asr #2
   b67f0:	d21a      	bcs.n	b6828 <loop+0x828>
          Wire.write((char)currentRailway.outputs[i][j] + '0');
   b67f2:	f003 fb69 	bl	b9ec8 <_Z19__fetch_global_Wirev>
	return *(this->_M_impl._M_start + __n);
   b67f6:	9a26      	ldr	r2, [sp, #152]	; 0x98
   b67f8:	5992      	ldr	r2, [r2, r6]
   b67fa:	f812 1025 	ldrb.w	r1, [r2, r5, lsl #2]
   b67fe:	3130      	adds	r1, #48	; 0x30
   b6800:	f7fd fd0e 	bl	b4220 <_ZN7TwoWire5writeEi.isra.0>
          Serial.print(currentRailway.outputs[i][j]);
   b6804:	f003 fa12 	bl	b9c2c <_Z16_fetch_usbserialv>
   b6808:	9a26      	ldr	r2, [sp, #152]	; 0x98
   b680a:	5991      	ldr	r1, [r2, r6]
   b680c:	220a      	movs	r2, #10
   b680e:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
   b6812:	f7fd fc66 	bl	b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
   b6816:	9a26      	ldr	r2, [sp, #152]	; 0x98
          currentRailway.outputs[i][j] = 0;
   b6818:	5992      	ldr	r2, [r2, r6]
   b681a:	2300      	movs	r3, #0
   b681c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
        for(int j = 0; j < currentRailway.outputs[i].size(); j++){
   b6820:	3501      	adds	r5, #1
   b6822:	e7de      	b.n	b67e2 <loop+0x7e2>
   b6824:	2500      	movs	r5, #0
   b6826:	e591      	b.n	b634c <loop+0x34c>
        Wire.endTransmission();
   b6828:	f003 fb4e 	bl	b9ec8 <_Z19__fetch_global_Wirev>
      for(int i = 0; i < 3; i++){
   b682c:	3401      	adds	r4, #1
        Wire.endTransmission();
   b682e:	f002 fb24 	bl	b8e7a <_ZN7TwoWire15endTransmissionEv>
      for(int i = 0; i < 3; i++){
   b6832:	2c03      	cmp	r4, #3
   b6834:	f107 0704 	add.w	r7, r7, #4
   b6838:	f47f ad35 	bne.w	b62a6 <loop+0x2a6>
      Serial.println();
   b683c:	f003 f9f6 	bl	b9c2c <_Z16_fetch_usbserialv>
   b6840:	f002 fc95 	bl	b916e <_ZN5Print7printlnEv>
      }
   b6844:	a804      	add	r0, sp, #16
   b6846:	f7fd fed1 	bl	b45ec <_ZNSt12_Vector_baseI10CheckpointSaIS0_EED1Ev>
      Railway currentRailway = railways[j];
   b684a:	a81d      	add	r0, sp, #116	; 0x74
   b684c:	f7fe f992 	bl	b4b74 <_ZN7RailwayD1Ev>
    for(int j = 0; j < railways.size(); j++){
   b6850:	9b02      	ldr	r3, [sp, #8]
   b6852:	3301      	adds	r3, #1
   b6854:	9302      	str	r3, [sp, #8]
   b6856:	e400      	b.n	b605a <loop+0x5a>
    Serial.println();
   b6858:	f003 f9e8 	bl	b9c2c <_Z16_fetch_usbserialv>
   b685c:	f002 fc87 	bl	b916e <_ZN5Print7printlnEv>
  Serial.println();
   b6860:	f003 f9e4 	bl	b9c2c <_Z16_fetch_usbserialv>
   b6864:	f002 fc83 	bl	b916e <_ZN5Print7printlnEv>
  delay(500);
   b6868:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
   b686c:	b037      	add	sp, #220	; 0xdc
   b686e:	ecbd 8b04 	vpop	{d8-d9}
   b6872:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  delay(500);
   b6876:	f001 b897 	b.w	b79a8 <delay>
   b687a:	bf00      	nop
   b687c:	000bd39b 	.word	0x000bd39b
   b6880:	000bd3a2 	.word	0x000bd3a2
   b6884:	000bd369 	.word	0x000bd369
   b6888:	20035620 	.word	0x20035620
   b688c:	2003e528 	.word	0x2003e528
   b6890:	20037f08 	.word	0x20037f08
   b6894:	2003e58c 	.word	0x2003e58c
   b6898:	20035688 	.word	0x20035688
   b689c:	3ff80000 	.word	0x3ff80000
   b68a0:	000bd3a8 	.word	0x000bd3a8

000b68a4 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b68a4:	b510      	push	{r4, lr}
   b68a6:	4604      	mov	r4, r0
   b68a8:	f003 f8f2 	bl	b9a90 <_ZN9TCPClientC1Ev>
{

}
   b68ac:	4620      	mov	r0, r4
   b68ae:	bd10      	pop	{r4, pc}

000b68b0 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b68b0:	b538      	push	{r3, r4, r5, lr}
   b68b2:	4604      	mov	r4, r0
   b68b4:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b68b6:	f002 fc53 	bl	b9160 <_ZN5Print5printEPKc>
    client.print(": ");
   b68ba:	4905      	ldr	r1, [pc, #20]	; (b68d0 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b68bc:	4620      	mov	r0, r4
   b68be:	f002 fc4f 	bl	b9160 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b68c2:	4629      	mov	r1, r5
   b68c4:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b68c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b68ca:	f002 bc5c 	b.w	b9186 <_ZN5Print7printlnEPKc>
   b68ce:	bf00      	nop
   b68d0:	000bd0db 	.word	0x000bd0db

000b68d4 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b68d4:	b538      	push	{r3, r4, r5, lr}
   b68d6:	4605      	mov	r5, r0
   b68d8:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b68da:	f002 fc41 	bl	b9160 <_ZN5Print5printEPKc>
    client.print(": ");
   b68de:	490b      	ldr	r1, [pc, #44]	; (b690c <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b68e0:	4628      	mov	r0, r5
   b68e2:	f002 fc3d 	bl	b9160 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b68e6:	2c00      	cmp	r4, #0
   b68e8:	da0d      	bge.n	b6906 <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b68ea:	212d      	movs	r1, #45	; 0x2d
   b68ec:	4628      	mov	r0, r5
   b68ee:	f002 fc3b 	bl	b9168 <_ZN5Print5printEc>
            val = -n;
   b68f2:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b68f4:	4628      	mov	r0, r5
   b68f6:	220a      	movs	r2, #10
   b68f8:	f002 fc4f 	bl	b919a <_ZN5Print11printNumberEmh>
        n += println();
   b68fc:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b68fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6902:	f002 bc34 	b.w	b916e <_ZN5Print7printlnEv>
            val = n;
   b6906:	4621      	mov	r1, r4
   b6908:	e7f4      	b.n	b68f4 <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b690a:	bf00      	nop
   b690c:	000bd0db 	.word	0x000bd0db

000b6910 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b6910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6914:	460e      	mov	r6, r1
   b6916:	b091      	sub	sp, #68	; 0x44
   b6918:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b691a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b691e:	6013      	str	r3, [r2, #0]
{
   b6920:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b6922:	2100      	movs	r1, #0
   b6924:	4630      	mov	r0, r6
   b6926:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b692a:	4617      	mov	r7, r2
   b692c:	f002 fd71 	bl	b9412 <_ZNK6String6equalsEPKc>
   b6930:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b6934:	4603      	mov	r3, r0
   b6936:	b998      	cbnz	r0, b6960 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   b6938:	f1be 0f00 	cmp.w	lr, #0
   b693c:	bf14      	ite	ne
   b693e:	4672      	movne	r2, lr
   b6940:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b6942:	6831      	ldr	r1, [r6, #0]
   b6944:	b292      	uxth	r2, r2
   b6946:	4620      	mov	r0, r4
   b6948:	f002 fea2 	bl	b9690 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b694c:	1e05      	subs	r5, r0, #0
   b694e:	bf18      	it	ne
   b6950:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b6952:	b9c5      	cbnz	r5, b6986 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b6954:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b6956:	b011      	add	sp, #68	; 0x44
   b6958:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b695c:	f003 b84e 	b.w	b99fc <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b6960:	4b76      	ldr	r3, [pc, #472]	; (b6b3c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b6962:	930a      	str	r3, [sp, #40]	; 0x28
   b6964:	f106 0c14 	add.w	ip, r6, #20
   b6968:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b696c:	ad0b      	add	r5, sp, #44	; 0x2c
   b696e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6970:	f8dc 3000 	ldr.w	r3, [ip]
   b6974:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b6976:	fa1f f28e 	uxth.w	r2, lr
   b697a:	2300      	movs	r3, #0
   b697c:	a90a      	add	r1, sp, #40	; 0x28
   b697e:	4620      	mov	r0, r4
   b6980:	f002 ff66 	bl	b9850 <_ZN9TCPClient7connectE9IPAddresstm>
   b6984:	e7e2      	b.n	b694c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b6986:	4649      	mov	r1, r9
   b6988:	4620      	mov	r0, r4
   b698a:	f002 fbe9 	bl	b9160 <_ZN5Print5printEPKc>
    client.print(" ");
   b698e:	496c      	ldr	r1, [pc, #432]	; (b6b40 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b6990:	4620      	mov	r0, r4
   b6992:	f002 fbe5 	bl	b9160 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b6996:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b6998:	4620      	mov	r0, r4
   b699a:	f002 fbe1 	bl	b9160 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b699e:	4969      	ldr	r1, [pc, #420]	; (b6b44 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b69a0:	4620      	mov	r0, r4
   b69a2:	f002 fbdd 	bl	b9160 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b69a6:	4968      	ldr	r1, [pc, #416]	; (b6b48 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b69a8:	4a68      	ldr	r2, [pc, #416]	; (b6b4c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b69aa:	4620      	mov	r0, r4
   b69ac:	f7ff ff80 	bl	b68b0 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b69b0:	2100      	movs	r1, #0
   b69b2:	4630      	mov	r0, r6
   b69b4:	f002 fd2d 	bl	b9412 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b69b8:	b920      	cbnz	r0, b69c4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b69ba:	6832      	ldr	r2, [r6, #0]
   b69bc:	4964      	ldr	r1, [pc, #400]	; (b6b50 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b69be:	4620      	mov	r0, r4
   b69c0:	f7ff ff76 	bl	b68b0 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b69c4:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b69c8:	2100      	movs	r1, #0
   b69ca:	4650      	mov	r0, sl
   b69cc:	f002 fd21 	bl	b9412 <_ZNK6String6equalsEPKc>
   b69d0:	b928      	cbnz	r0, b69de <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b69d2:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b69d4:	495f      	ldr	r1, [pc, #380]	; (b6b54 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b69d6:	4620      	mov	r0, r4
   b69d8:	f7ff ff7c 	bl	b68d4 <_ZN10HttpClient10sendHeaderEPKci>
   b69dc:	e006      	b.n	b69ec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b69de:	495e      	ldr	r1, [pc, #376]	; (b6b58 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b69e0:	4648      	mov	r0, r9
   b69e2:	f004 fb4d 	bl	bb080 <strcmp>
   b69e6:	4602      	mov	r2, r0
   b69e8:	2800      	cmp	r0, #0
   b69ea:	d0f3      	beq.n	b69d4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b69ec:	f1b8 0f00 	cmp.w	r8, #0
   b69f0:	d00e      	beq.n	b6a10 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b69f2:	f8d8 1000 	ldr.w	r1, [r8]
   b69f6:	b159      	cbz	r1, b6a10 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b69f8:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b69fc:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b69fe:	b122      	cbz	r2, b6a0a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b6a00:	f7ff ff56 	bl	b68b0 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b6a04:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b6a08:	e7f3      	b.n	b69f2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b6a0a:	f002 fbbc 	bl	b9186 <_ZN5Print7printlnEPKc>
}
   b6a0e:	e7f9      	b.n	b6a04 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b6a10:	4620      	mov	r0, r4
   b6a12:	f002 fbac 	bl	b916e <_ZN5Print7printlnEv>
    client.flush();
   b6a16:	4620      	mov	r0, r4
   b6a18:	f002 fd9a 	bl	b9550 <_ZN9TCPClient5flushEv>
   b6a1c:	2100      	movs	r1, #0
   b6a1e:	4650      	mov	r0, sl
   b6a20:	f002 fcf7 	bl	b9412 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b6a24:	b918      	cbnz	r0, b6a2e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b6a26:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b6a28:	4620      	mov	r0, r4
   b6a2a:	f002 fbac 	bl	b9186 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b6a2e:	f104 0a1c 	add.w	sl, r4, #28
   b6a32:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   b6a36:	2100      	movs	r1, #0
   b6a38:	4650      	mov	r0, sl
   b6a3a:	f004 faea 	bl	bb012 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6a3e:	f000 fd97 	bl	b7570 <HAL_Timer_Get_Milli_Seconds>
   b6a42:	9001      	str	r0, [sp, #4]
   b6a44:	f000 fd94 	bl	b7570 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b6a48:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b6a4c:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b6a4e:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b6a52:	4620      	mov	r0, r4
   b6a54:	f002 ff78 	bl	b9948 <_ZN9TCPClient9availableEv>
   b6a58:	b1e8      	cbz	r0, b6a96 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   b6a5a:	4620      	mov	r0, r4
   b6a5c:	f002 fd5e 	bl	b951c <_ZN9TCPClient4readEv>
   b6a60:	4681      	mov	r9, r0
   b6a62:	f000 fd85 	bl	b7570 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b6a66:	f242 73fe 	movw	r3, #10238	; 0x27fe
   b6a6a:	429e      	cmp	r6, r3
   b6a6c:	9001      	str	r0, [sp, #4]
   b6a6e:	d804      	bhi.n	b6a7a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b6a70:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b6a72:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b6a76:	3601      	adds	r6, #1
        while (client.available()) {
   b6a78:	e7eb      	b.n	b6a52 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b6a7a:	f242 73ff 	movw	r3, #10239	; 0x27ff
   b6a7e:	429e      	cmp	r6, r3
   b6a80:	d1f9      	bne.n	b6a76 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b6a82:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
   b6a86:	2200      	movs	r2, #0
   b6a88:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
                client.stop();
   b6a8c:	4620      	mov	r0, r4
   b6a8e:	f002 ffb5 	bl	b99fc <_ZN9TCPClient4stopEv>
                error = true;
   b6a92:	46a8      	mov	r8, r5
   b6a94:	e7ef      	b.n	b6a76 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b6a96:	19a3      	adds	r3, r4, r6
   b6a98:	7718      	strb	r0, [r3, #28]
   b6a9a:	f000 fd69 	bl	b7570 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b6a9e:	9b01      	ldr	r3, [sp, #4]
   b6aa0:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b6aa4:	f1b8 0f00 	cmp.w	r8, #0
   b6aa8:	d104      	bne.n	b6ab4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
   b6aaa:	45d9      	cmp	r9, fp
   b6aac:	d802      	bhi.n	b6ab4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a4>
            delay(200);
   b6aae:	20c8      	movs	r0, #200	; 0xc8
   b6ab0:	f000 ff7a 	bl	b79a8 <delay>
    } while (client.connected() && !timeout && !error);
   b6ab4:	4620      	mov	r0, r4
   b6ab6:	f002 fe69 	bl	b978c <_ZN9TCPClient9connectedEv>
   b6aba:	b120      	cbz	r0, b6ac6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b6abc:	45d9      	cmp	r9, fp
   b6abe:	d802      	bhi.n	b6ac6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b6>
   b6ac0:	f1b8 0f00 	cmp.w	r8, #0
   b6ac4:	d0c5      	beq.n	b6a52 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b6ac6:	4620      	mov	r0, r4
   b6ac8:	f002 ff98 	bl	b99fc <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b6acc:	4651      	mov	r1, sl
   b6ace:	a802      	add	r0, sp, #8
   b6ad0:	f002 fc03 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b6ad4:	230c      	movs	r3, #12
   b6ad6:	2209      	movs	r2, #9
   b6ad8:	a902      	add	r1, sp, #8
   b6ada:	a806      	add	r0, sp, #24
   b6adc:	f002 fcbe 	bl	b945c <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b6ae0:	491e      	ldr	r1, [pc, #120]	; (b6b5c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b6ae2:	a80a      	add	r0, sp, #40	; 0x28
   b6ae4:	f002 fbf9 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
   b6ae8:	a90a      	add	r1, sp, #40	; 0x28
   b6aea:	a802      	add	r0, sp, #8
   b6aec:	f002 fcb2 	bl	b9454 <_ZNK6String7indexOfERKS_>
   b6af0:	4604      	mov	r4, r0
   b6af2:	a80a      	add	r0, sp, #40	; 0x28
   b6af4:	f002 fba6 	bl	b9244 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b6af8:	1c63      	adds	r3, r4, #1
   b6afa:	d108      	bne.n	b6b0e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fe>
    String statusCode = raw_response.substring(9,12);
   b6afc:	a806      	add	r0, sp, #24
   b6afe:	f002 fba1 	bl	b9244 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b6b02:	a802      	add	r0, sp, #8
   b6b04:	f002 fb9e 	bl	b9244 <_ZN6StringD1Ev>
}
   b6b08:	b011      	add	sp, #68	; 0x44
   b6b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b6b0e:	1d3d      	adds	r5, r7, #4
   b6b10:	4913      	ldr	r1, [pc, #76]	; (b6b60 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   b6b12:	4628      	mov	r0, r5
   b6b14:	f002 fc0f 	bl	b9336 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b6b18:	1d22      	adds	r2, r4, #4
   b6b1a:	a902      	add	r1, sp, #8
   b6b1c:	a80a      	add	r0, sp, #40	; 0x28
   b6b1e:	f002 fcbd 	bl	b949c <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b6b22:	a90a      	add	r1, sp, #40	; 0x28
   b6b24:	4628      	mov	r0, r5
   b6b26:	f002 fc42 	bl	b93ae <_ZN6String6concatERKS_>
   b6b2a:	a80a      	add	r0, sp, #40	; 0x28
   b6b2c:	f002 fb8a 	bl	b9244 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b6b30:	9806      	ldr	r0, [sp, #24]
   b6b32:	f004 fa2e 	bl	baf92 <atoi>
   b6b36:	6038      	str	r0, [r7, #0]
   b6b38:	e7e0      	b.n	b6afc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ec>
   b6b3a:	bf00      	nop
   b6b3c:	000bd73c 	.word	0x000bd73c
   b6b40:	000bd2e9 	.word	0x000bd2e9
   b6b44:	000bd480 	.word	0x000bd480
   b6b48:	000bd492 	.word	0x000bd492
   b6b4c:	000bd48c 	.word	0x000bd48c
   b6b50:	000bd49d 	.word	0x000bd49d
   b6b54:	000bd4a2 	.word	0x000bd4a2
   b6b58:	000bd4b1 	.word	0x000bd4b1
   b6b5c:	000bd4b6 	.word	0x000bd4b6
   b6b60:	000bd4ba 	.word	0x000bd4ba

000b6b64 <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   b6b64:	4770      	bx	lr

000b6b66 <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   b6b66:	b510      	push	{r4, lr}
}
   b6b68:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   b6b6a:	4604      	mov	r4, r0
}
   b6b6c:	f7fd fa99 	bl	b40a2 <_ZdlPvj>
   b6b70:	4620      	mov	r0, r4
   b6b72:	bd10      	pop	{r4, pc}

000b6b74 <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   b6b74:	b510      	push	{r4, lr}
   b6b76:	4b05      	ldr	r3, [pc, #20]	; (b6b8c <_ZN10JsonBufferD1Ev+0x18>)
   b6b78:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b6b7a:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b6b7c:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b6b7e:	b91b      	cbnz	r3, b6b88 <_ZN10JsonBufferD1Ev+0x14>
   b6b80:	6840      	ldr	r0, [r0, #4]
   b6b82:	b108      	cbz	r0, b6b88 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b6b84:	f000 fec8 	bl	b7918 <free>
}
   b6b88:	4620      	mov	r0, r4
   b6b8a:	bd10      	pop	{r4, pc}
   b6b8c:	000bd4c8 	.word	0x000bd4c8

000b6b90 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b6b90:	b510      	push	{r4, lr}
   b6b92:	4604      	mov	r4, r0
}
   b6b94:	f7ff ffee 	bl	b6b74 <_ZN10JsonBufferD1Ev>
   b6b98:	4620      	mov	r0, r4
   b6b9a:	2114      	movs	r1, #20
   b6b9c:	f7fd fa81 	bl	b40a2 <_ZdlPvj>
   b6ba0:	4620      	mov	r0, r4
   b6ba2:	bd10      	pop	{r4, pc}

000b6ba4 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b6ba4:	b510      	push	{r4, lr}
   b6ba6:	4b07      	ldr	r3, [pc, #28]	; (b6bc4 <_ZN10JsonParserD1Ev+0x20>)
   b6ba8:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b6baa:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b6bac:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b6bae:	b91b      	cbnz	r3, b6bb8 <_ZN10JsonParserD1Ev+0x14>
   b6bb0:	6940      	ldr	r0, [r0, #20]
   b6bb2:	b108      	cbz	r0, b6bb8 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b6bb4:	f000 feb0 	bl	b7918 <free>
JsonParser::~JsonParser() {
   b6bb8:	4620      	mov	r0, r4
   b6bba:	f7ff ffdb 	bl	b6b74 <_ZN10JsonBufferD1Ev>
}
   b6bbe:	4620      	mov	r0, r4
   b6bc0:	bd10      	pop	{r4, pc}
   b6bc2:	bf00      	nop
   b6bc4:	000bd4d8 	.word	0x000bd4d8

000b6bc8 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b6bc8:	b510      	push	{r4, lr}
   b6bca:	4604      	mov	r4, r0
}
   b6bcc:	f7ff ffea 	bl	b6ba4 <_ZN10JsonParserD1Ev>
   b6bd0:	4620      	mov	r0, r4
   b6bd2:	212c      	movs	r1, #44	; 0x2c
   b6bd4:	f7fd fa65 	bl	b40a2 <_ZdlPvj>
   b6bd8:	4620      	mov	r0, r4
   b6bda:	bd10      	pop	{r4, pc}

000b6bdc <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b6bdc:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b6bde:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b6be0:	4604      	mov	r4, r0
   b6be2:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b6be4:	b10b      	cbz	r3, b6bea <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b6be6:	2000      	movs	r0, #0
}
   b6be8:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b6bea:	6840      	ldr	r0, [r0, #4]
   b6bec:	b138      	cbz	r0, b6bfe <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b6bee:	f000 fe9b 	bl	b7928 <realloc>
		if (newBuffer) {
   b6bf2:	2800      	cmp	r0, #0
   b6bf4:	d0f7      	beq.n	b6be6 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b6bf6:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b6bfa:	2001      	movs	r0, #1
   b6bfc:	e7f4      	b.n	b6be8 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b6bfe:	4608      	mov	r0, r1
   b6c00:	f000 fe82 	bl	b7908 <malloc>
   b6c04:	e7f5      	b.n	b6bf2 <_ZN10JsonBuffer8allocateEj+0x16>

000b6c06 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b6c06:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b6c08:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b6c0a:	460e      	mov	r6, r1
   b6c0c:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b6c0e:	18d1      	adds	r1, r2, r3
   b6c10:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b6c12:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b6c14:	b172      	cbz	r2, b6c34 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b6c16:	6882      	ldr	r2, [r0, #8]
   b6c18:	428a      	cmp	r2, r1
   b6c1a:	d30b      	bcc.n	b6c34 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b6c1c:	6860      	ldr	r0, [r4, #4]
   b6c1e:	68e3      	ldr	r3, [r4, #12]
   b6c20:	462a      	mov	r2, r5
   b6c22:	4631      	mov	r1, r6
   b6c24:	4418      	add	r0, r3
   b6c26:	f004 f9cc 	bl	bafc2 <memcpy>
	offset += dataLen;
   b6c2a:	68e2      	ldr	r2, [r4, #12]
   b6c2c:	442a      	add	r2, r5
   b6c2e:	60e2      	str	r2, [r4, #12]
	return true;
   b6c30:	2001      	movs	r0, #1
}
   b6c32:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b6c34:	4620      	mov	r0, r4
   b6c36:	f7ff ffd1 	bl	b6bdc <_ZN10JsonBuffer8allocateEj>
   b6c3a:	2800      	cmp	r0, #0
   b6c3c:	d1ee      	bne.n	b6c1c <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b6c3e:	e7f8      	b.n	b6c32 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b6c40 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b6c40:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b6c42:	2100      	movs	r1, #0
   b6c44:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b6c46:	b123      	cbz	r3, b6c52 <_ZN10JsonBuffer5clearEv+0x12>
   b6c48:	6882      	ldr	r2, [r0, #8]
   b6c4a:	b112      	cbz	r2, b6c52 <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b6c4c:	4618      	mov	r0, r3
   b6c4e:	f004 b9e0 	b.w	bb012 <memset>
}
   b6c52:	4770      	bx	lr

000b6c54 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b6c54:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b6c56:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b6c5a:	2200      	movs	r2, #0
   b6c5c:	60c2      	str	r2, [r0, #12]
   b6c5e:	2201      	movs	r2, #1
   b6c60:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b6c62:	6143      	str	r3, [r0, #20]
   b6c64:	4a02      	ldr	r2, [pc, #8]	; (b6c70 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b6c66:	9b02      	ldr	r3, [sp, #8]
   b6c68:	6002      	str	r2, [r0, #0]
   b6c6a:	61c3      	str	r3, [r0, #28]
}
   b6c6c:	bd10      	pop	{r4, pc}
   b6c6e:	bf00      	nop
   b6c70:	000bd4d8 	.word	0x000bd4d8

000b6c74 <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   b6c74:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   b6c78:	429a      	cmp	r2, r3
   b6c7a:	4b04      	ldr	r3, [pc, #16]	; (b6c8c <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b6c7c:	bf38      	it	cc
   b6c7e:	6082      	strcc	r2, [r0, #8]
   b6c80:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6c84:	bf24      	itt	cs
   b6c86:	2300      	movcs	r3, #0
   b6c88:	6083      	strcs	r3, [r0, #8]
}
   b6c8a:	4770      	bx	lr
   b6c8c:	000bd4e8 	.word	0x000bd4e8

000b6c90 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b6c90:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b6c92:	6813      	ldr	r3, [r2, #0]
   b6c94:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b6c96:	6813      	ldr	r3, [r2, #0]
   b6c98:	f103 0410 	add.w	r4, r3, #16
   b6c9c:	6014      	str	r4, [r2, #0]
   b6c9e:	6986      	ldr	r6, [r0, #24]
   b6ca0:	42b4      	cmp	r4, r6
   b6ca2:	d20a      	bcs.n	b6cba <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b6ca4:	699b      	ldr	r3, [r3, #24]
   b6ca6:	688c      	ldr	r4, [r1, #8]
   b6ca8:	42a3      	cmp	r3, r4
   b6caa:	da01      	bge.n	b6cb0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b6cac:	42ab      	cmp	r3, r5
   b6cae:	ddf2      	ble.n	b6c96 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b6cb0:	42a3      	cmp	r3, r4
   b6cb2:	bfcc      	ite	gt
   b6cb4:	2000      	movgt	r0, #0
   b6cb6:	2001      	movle	r0, #1
   b6cb8:	e000      	b.n	b6cbc <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b6cba:	2000      	movs	r0, #0
}
   b6cbc:	bd70      	pop	{r4, r5, r6, pc}

000b6cbe <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b6cbe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6cc2:	9d08      	ldr	r5, [sp, #32]
   b6cc4:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6cc6:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b6cca:	4604      	mov	r4, r0
   b6ccc:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6cce:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b6cd0:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b6cd2:	9801      	ldr	r0, [sp, #4]
   b6cd4:	69a3      	ldr	r3, [r4, #24]
   b6cd6:	4283      	cmp	r3, r0
   b6cd8:	d91a      	bls.n	b6d10 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b6cda:	6882      	ldr	r2, [r0, #8]
   b6cdc:	688b      	ldr	r3, [r1, #8]
   b6cde:	429a      	cmp	r2, r3
   b6ce0:	da16      	bge.n	b6d10 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b6ce2:	42ae      	cmp	r6, r5
   b6ce4:	d10b      	bne.n	b6cfe <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b6ce6:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b6ce8:	aa01      	add	r2, sp, #4
   b6cea:	4620      	mov	r0, r4
   b6cec:	f7ff ffd0 	bl	b6c90 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b6cf0:	b128      	cbz	r0, b6cfe <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b6cf2:	9b01      	ldr	r3, [sp, #4]
   b6cf4:	f8c8 3000 	str.w	r3, [r8]
}
   b6cf8:	b002      	add	sp, #8
   b6cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b6cfe:	aa01      	add	r2, sp, #4
   b6d00:	4620      	mov	r0, r4
   b6d02:	f7ff ffc5 	bl	b6c90 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b6d06:	4620      	mov	r0, r4
		index++;
   b6d08:	3601      	adds	r6, #1
		skipObject(container, token);
   b6d0a:	f7ff ffc1 	bl	b6c90 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b6d0e:	e7e0      	b.n	b6cd2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b6d10:	2000      	movs	r0, #0
   b6d12:	e7f1      	b.n	b6cf8 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b6d14 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6d16:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6d18:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6d1c:	4604      	mov	r4, r0
   b6d1e:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b6d20:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b6d22:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b6d24:	9b01      	ldr	r3, [sp, #4]
   b6d26:	69a2      	ldr	r2, [r4, #24]
   b6d28:	429a      	cmp	r2, r3
   b6d2a:	d90f      	bls.n	b6d4c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   b6d2c:	6898      	ldr	r0, [r3, #8]
   b6d2e:	688a      	ldr	r2, [r1, #8]
   b6d30:	4290      	cmp	r0, r2
   b6d32:	da0b      	bge.n	b6d4c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   b6d34:	42b5      	cmp	r5, r6
   b6d36:	d103      	bne.n	b6d40 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   b6d38:	603b      	str	r3, [r7, #0]
			return true;
   b6d3a:	2001      	movs	r0, #1
}
   b6d3c:	b003      	add	sp, #12
   b6d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   b6d40:	aa01      	add	r2, sp, #4
   b6d42:	4620      	mov	r0, r4
		index++;
   b6d44:	3501      	adds	r5, #1
		skipObject(container, token);
   b6d46:	f7ff ffa3 	bl	b6c90 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b6d4a:	e7eb      	b.n	b6d24 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   b6d4c:	2000      	movs	r0, #0
   b6d4e:	e7f5      	b.n	b6d3c <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>

000b6d50 <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   b6d50:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6d52:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b6d54:	6889      	ldr	r1, [r1, #8]
   b6d56:	4e0a      	ldr	r6, [pc, #40]	; (b6d80 <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   b6d58:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   b6d5a:	b161      	cbz	r1, b6d76 <_ZNK13JsonReference5indexEj+0x26>
   b6d5c:	6868      	ldr	r0, [r5, #4]
   b6d5e:	ab01      	add	r3, sp, #4
   b6d60:	f7ff ffd8 	bl	b6d14 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   b6d64:	b138      	cbz	r0, b6d76 <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   b6d66:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b6d68:	e9c4 6300 	strd	r6, r3, [r4]
   b6d6c:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6d6e:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   b6d70:	4620      	mov	r0, r4
   b6d72:	b002      	add	sp, #8
   b6d74:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b6d76:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6d78:	e9c4 6300 	strd	r6, r3, [r4]
   b6d7c:	2300      	movs	r3, #0
   b6d7e:	e7f6      	b.n	b6d6e <_ZNK13JsonReference5indexEj+0x1e>
   b6d80:	000bd4e8 	.word	0x000bd4e8

000b6d84 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   b6d84:	b510      	push	{r4, lr}
   b6d86:	4604      	mov	r4, r0
	if (str) {
   b6d88:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b6d8a:	460b      	mov	r3, r1
	if (str) {
   b6d8c:	b128      	cbz	r0, b6d9a <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b6d8e:	f002 fb12 	bl	b93b6 <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   b6d92:	68e3      	ldr	r3, [r4, #12]
   b6d94:	3301      	adds	r3, #1
   b6d96:	60e3      	str	r3, [r4, #12]
	}
}
   b6d98:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b6d9a:	6860      	ldr	r0, [r4, #4]
   b6d9c:	2800      	cmp	r0, #0
   b6d9e:	d0f8      	beq.n	b6d92 <_ZN16JsonParserString6appendEc+0xe>
   b6da0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b6da4:	3a01      	subs	r2, #1
   b6da6:	428a      	cmp	r2, r1
			buf[length] = ch;
   b6da8:	bf88      	it	hi
   b6daa:	5443      	strbhi	r3, [r0, r1]
   b6dac:	e7f1      	b.n	b6d92 <_ZN16JsonParserString6appendEc+0xe>

000b6dae <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b6dae:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b6db0:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b6db2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6db4:	4608      	mov	r0, r1
		str.append((char)unicode);
   b6db6:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b6db8:	d804      	bhi.n	b6dc4 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b6dba:	b003      	add	sp, #12
   b6dbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b6dc0:	f7ff bfe0 	b.w	b6d84 <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b6dc4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b6dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b6dcc:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b6dd0:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b6dd4:	d207      	bcs.n	b6de6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b6dd6:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b6dda:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b6ddc:	f7ff ffd2 	bl	b6d84 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b6de0:	9801      	ldr	r0, [sp, #4]
   b6de2:	4621      	mov	r1, r4
   b6de4:	e7e9      	b.n	b6dba <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b6de6:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b6de8:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b6dec:	9001      	str	r0, [sp, #4]
   b6dee:	f7ff ffc9 	bl	b6d84 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b6df2:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b6df6:	9801      	ldr	r0, [sp, #4]
   b6df8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b6dfc:	e7ee      	b.n	b6ddc <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>
	...

000b6e00 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b6e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b6e04:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b6e06:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b6e08:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b6ed8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b6e0c:	4680      	mov	r8, r0
   b6e0e:	460f      	mov	r7, r1
   b6e10:	4615      	mov	r5, r2
			escape = false;
   b6e12:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b6e14:	68b8      	ldr	r0, [r7, #8]
   b6e16:	42b0      	cmp	r0, r6
   b6e18:	dd5a      	ble.n	b6ed0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b6e1a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b6e1e:	5d99      	ldrb	r1, [r3, r6]
   b6e20:	199a      	adds	r2, r3, r6
		if (escape) {
   b6e22:	2c00      	cmp	r4, #0
   b6e24:	d04b      	beq.n	b6ebe <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b6e26:	2975      	cmp	r1, #117	; 0x75
   b6e28:	d805      	bhi.n	b6e36 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b6e2a:	296d      	cmp	r1, #109	; 0x6d
   b6e2c:	d807      	bhi.n	b6e3e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b6e2e:	2962      	cmp	r1, #98	; 0x62
   b6e30:	d01e      	beq.n	b6e70 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b6e32:	2966      	cmp	r1, #102	; 0x66
   b6e34:	d01e      	beq.n	b6e74 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b6e36:	4628      	mov	r0, r5
   b6e38:	f7ff ffa4 	bl	b6d84 <_ZN16JsonParserString6appendEc>
				break;
   b6e3c:	e03d      	b.n	b6eba <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b6e3e:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b6e42:	2c07      	cmp	r4, #7
   b6e44:	d8f7      	bhi.n	b6e36 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b6e46:	f20f 0c08 	addw	ip, pc, #8
   b6e4a:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b6e4e:	bf00      	nop
   b6e50:	000b6e79 	.word	0x000b6e79
   b6e54:	000b6e37 	.word	0x000b6e37
   b6e58:	000b6e37 	.word	0x000b6e37
   b6e5c:	000b6e37 	.word	0x000b6e37
   b6e60:	000b6e7d 	.word	0x000b6e7d
   b6e64:	000b6e37 	.word	0x000b6e37
   b6e68:	000b6e81 	.word	0x000b6e81
   b6e6c:	000b6e85 	.word	0x000b6e85
				str.append('\b');
   b6e70:	2108      	movs	r1, #8
   b6e72:	e7e0      	b.n	b6e36 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b6e74:	210c      	movs	r1, #12
   b6e76:	e7de      	b.n	b6e36 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b6e78:	210a      	movs	r1, #10
   b6e7a:	e7dc      	b.n	b6e36 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b6e7c:	210d      	movs	r1, #13
   b6e7e:	e7da      	b.n	b6e36 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b6e80:	2109      	movs	r1, #9
   b6e82:	e7d8      	b.n	b6e36 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b6e84:	1d31      	adds	r1, r6, #4
   b6e86:	4288      	cmp	r0, r1
   b6e88:	dd17      	ble.n	b6eba <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b6e8a:	a902      	add	r1, sp, #8
   b6e8c:	3304      	adds	r3, #4
   b6e8e:	4433      	add	r3, r6
   b6e90:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b6e92:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b6e96:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b6e9a:	429a      	cmp	r2, r3
   b6e9c:	d1f9      	bne.n	b6e92 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b6e9e:	aa01      	add	r2, sp, #4
   b6ea0:	4651      	mov	r1, sl
					tmp[4] = 0;
   b6ea2:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b6ea6:	f000 fd47 	bl	b7938 <sscanf>
   b6eaa:	2801      	cmp	r0, #1
   b6eac:	d105      	bne.n	b6eba <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b6eae:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b6eb2:	4629      	mov	r1, r5
   b6eb4:	f7ff ff7b 	bl	b6dae <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b6eb8:	3605      	adds	r6, #5
			escape = false;
   b6eba:	2400      	movs	r4, #0
   b6ebc:	e004      	b.n	b6ec8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b6ebe:	295c      	cmp	r1, #92	; 0x5c
   b6ec0:	d004      	beq.n	b6ecc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b6ec2:	4628      	mov	r0, r5
   b6ec4:	f7ff ff5e 	bl	b6d84 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b6ec8:	3601      	adds	r6, #1
   b6eca:	e7a3      	b.n	b6e14 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b6ecc:	2401      	movs	r4, #1
   b6ece:	e7fb      	b.n	b6ec8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b6ed0:	2001      	movs	r0, #1
   b6ed2:	b004      	add	sp, #16
   b6ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6ed8:	000bd4bb 	.word	0x000bd4bb

000b6edc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b6edc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6ede:	460c      	mov	r4, r1
   b6ee0:	4606      	mov	r6, r0
	result = "";
   b6ee2:	490c      	ldr	r1, [pc, #48]	; (b6f14 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b6ee4:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b6ee6:	4615      	mov	r5, r2
	result = "";
   b6ee8:	f002 fa25 	bl	b9336 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b6eec:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b6ef0:	1ac9      	subs	r1, r1, r3
   b6ef2:	3101      	adds	r1, #1
   b6ef4:	4628      	mov	r0, r5
   b6ef6:	f002 f9c3 	bl	b9280 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b6efa:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b6efc:	466a      	mov	r2, sp
   b6efe:	4621      	mov	r1, r4
   b6f00:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b6f02:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b6f06:	9500      	str	r5, [sp, #0]
   b6f08:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b6f0a:	f7ff ff79 	bl	b6e00 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b6f0e:	b004      	add	sp, #16
   b6f10:	bd70      	pop	{r4, r5, r6, pc}
   b6f12:	bf00      	nop
   b6f14:	000bd4ba 	.word	0x000bd4ba

000b6f18 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6f1c:	b089      	sub	sp, #36	; 0x24
   b6f1e:	4605      	mov	r5, r0
   b6f20:	4688      	mov	r8, r1
	String keyName;
   b6f22:	a804      	add	r0, sp, #16
   b6f24:	4912      	ldr	r1, [pc, #72]	; (b6f70 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b6f26:	4616      	mov	r6, r2
   b6f28:	4699      	mov	r9, r3
	String keyName;
   b6f2a:	f002 f9d6 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b6f2e:	2700      	movs	r7, #0
   b6f30:	9700      	str	r7, [sp, #0]
   b6f32:	464b      	mov	r3, r9
   b6f34:	aa03      	add	r2, sp, #12
   b6f36:	4641      	mov	r1, r8
   b6f38:	4628      	mov	r0, r5
   b6f3a:	f7ff fec0 	bl	b6cbe <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b6f3e:	4604      	mov	r4, r0
   b6f40:	b170      	cbz	r0, b6f60 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b6f42:	9903      	ldr	r1, [sp, #12]
   b6f44:	aa04      	add	r2, sp, #16
   b6f46:	4628      	mov	r0, r5
   b6f48:	f7ff ffc8 	bl	b6edc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b6f4c:	4604      	mov	r4, r0
   b6f4e:	b908      	cbnz	r0, b6f54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b6f50:	3701      	adds	r7, #1
   b6f52:	e7ed      	b.n	b6f30 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b6f54:	4631      	mov	r1, r6
   b6f56:	a804      	add	r0, sp, #16
   b6f58:	f002 fa5b 	bl	b9412 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b6f5c:	2800      	cmp	r0, #0
   b6f5e:	d0f7      	beq.n	b6f50 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b6f60:	a804      	add	r0, sp, #16
   b6f62:	f002 f96f 	bl	b9244 <_ZN6StringD1Ev>
}
   b6f66:	4620      	mov	r0, r4
   b6f68:	b009      	add	sp, #36	; 0x24
   b6f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6f6e:	bf00      	nop
   b6f70:	000bd4ba 	.word	0x000bd4ba

000b6f74 <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   b6f74:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6f76:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b6f78:	6889      	ldr	r1, [r1, #8]
   b6f7a:	4e0a      	ldr	r6, [pc, #40]	; (b6fa4 <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   b6f7c:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   b6f7e:	b161      	cbz	r1, b6f9a <_ZNK13JsonReference3keyEPKc+0x26>
   b6f80:	6868      	ldr	r0, [r5, #4]
   b6f82:	ab01      	add	r3, sp, #4
   b6f84:	f7ff ffc8 	bl	b6f18 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b6f88:	b138      	cbz	r0, b6f9a <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   b6f8a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   b6f8c:	e9c4 6300 	strd	r6, r3, [r4]
   b6f90:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6f92:	60a3      	str	r3, [r4, #8]
}
   b6f94:	4620      	mov	r0, r4
   b6f96:	b002      	add	sp, #8
   b6f98:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   b6f9a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   b6f9c:	e9c4 6300 	strd	r6, r3, [r4]
   b6fa0:	2300      	movs	r3, #0
   b6fa2:	e7f6      	b.n	b6f92 <_ZNK13JsonReference3keyEPKc+0x1e>
   b6fa4:	000bd4e8 	.word	0x000bd4e8

000b6fa8 <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   b6fa8:	b538      	push	{r3, r4, r5, lr}
   b6faa:	460d      	mov	r5, r1
	String result;
   b6fac:	4905      	ldr	r1, [pc, #20]	; (b6fc4 <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   b6fae:	4604      	mov	r4, r0
	String result;
   b6fb0:	f002 f993 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   b6fb4:	68a9      	ldr	r1, [r5, #8]
   b6fb6:	b119      	cbz	r1, b6fc0 <_ZNK13JsonReference11valueStringEv+0x18>
   b6fb8:	6868      	ldr	r0, [r5, #4]
   b6fba:	4622      	mov	r2, r4
   b6fbc:	f7ff ff8e 	bl	b6edc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   b6fc0:	4620      	mov	r0, r4
   b6fc2:	bd38      	pop	{r3, r4, r5, pc}
   b6fc4:	000bd4ba 	.word	0x000bd4ba

000b6fc8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b6fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b6fcc:	6844      	ldr	r4, [r0, #4]
   b6fce:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b6fd2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b6fd6:	f8d0 e000 	ldr.w	lr, [r0]
   b6fda:	4596      	cmp	lr, r2
   b6fdc:	f080 81b9 	bcs.w	b7352 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b6fe0:	f811 800e 	ldrb.w	r8, [r1, lr]
   b6fe4:	f1b8 0f00 	cmp.w	r8, #0
   b6fe8:	f000 81b3 	beq.w	b7352 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b6fec:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b6ff0:	f000 8098 	beq.w	b7124 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b6ff4:	d833      	bhi.n	b705e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b6ff6:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b6ffa:	f000 80a6 	beq.w	b714a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b6ffe:	d810      	bhi.n	b7022 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b7000:	f1a8 0809 	sub.w	r8, r8, #9
   b7004:	fa5f f888 	uxtb.w	r8, r8
   b7008:	f1b8 0f17 	cmp.w	r8, #23
   b700c:	d80d      	bhi.n	b702a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b700e:	4d9f      	ldr	r5, [pc, #636]	; (b728c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b7010:	fa0c f808 	lsl.w	r8, ip, r8
   b7014:	ea18 0f05 	tst.w	r8, r5
   b7018:	d007      	beq.n	b702a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b701a:	6805      	ldr	r5, [r0, #0]
   b701c:	3501      	adds	r5, #1
   b701e:	6005      	str	r5, [r0, #0]
   b7020:	e7d9      	b.n	b6fd6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b7022:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b7026:	f000 8133 	beq.w	b7290 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b702a:	f8d0 8000 	ldr.w	r8, [r0]
   b702e:	4542      	cmp	r2, r8
   b7030:	d90e      	bls.n	b7050 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b7032:	f811 5008 	ldrb.w	r5, [r1, r8]
   b7036:	b15d      	cbz	r5, b7050 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b7038:	2d3a      	cmp	r5, #58	; 0x3a
   b703a:	f200 8169 	bhi.w	b7310 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b703e:	2d1f      	cmp	r5, #31
   b7040:	f200 8151 	bhi.w	b72e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b7044:	2d0a      	cmp	r5, #10
   b7046:	f200 8160 	bhi.w	b730a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b704a:	2d08      	cmp	r5, #8
   b704c:	f240 8156 	bls.w	b72fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b7050:	2b00      	cmp	r3, #0
   b7052:	f040 8162 	bne.w	b731a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b7056:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b705a:	6005      	str	r5, [r0, #0]
   b705c:	e0a5      	b.n	b71aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b705e:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b7062:	d037      	beq.n	b70d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b7064:	d82e      	bhi.n	b70c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b7066:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b706a:	d033      	beq.n	b70d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b706c:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b7070:	d1db      	bne.n	b702a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b7072:	2b00      	cmp	r3, #0
   b7074:	d0d1      	beq.n	b701a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b7076:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b707a:	6845      	ldr	r5, [r0, #4]
   b707c:	3d01      	subs	r5, #1
   b707e:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b7082:	2d00      	cmp	r5, #0
   b7084:	db55      	blt.n	b7132 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b7086:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b708a:	3701      	adds	r7, #1
   b708c:	d04d      	beq.n	b712a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b708e:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b7092:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b7096:	d148      	bne.n	b712a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b7098:	f898 b000 	ldrb.w	fp, [r8]
   b709c:	45cb      	cmp	fp, r9
   b709e:	d14b      	bne.n	b7138 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b70a0:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b70a4:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b70a8:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b70ac:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b70b0:	f8de 7004 	ldr.w	r7, [lr, #4]
   b70b4:	3701      	adds	r7, #1
   b70b6:	d042      	beq.n	b713e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b70b8:	f8de 7008 	ldr.w	r7, [lr, #8]
   b70bc:	3701      	adds	r7, #1
   b70be:	d13e      	bne.n	b713e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b70c0:	6085      	str	r5, [r0, #8]
				break;
   b70c2:	e7aa      	b.n	b701a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b70c4:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b70c8:	d1af      	bne.n	b702a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b70ca:	2b00      	cmp	r3, #0
   b70cc:	d0a5      	beq.n	b701a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b70ce:	f04f 0901 	mov.w	r9, #1
   b70d2:	e7d2      	b.n	b707a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b70d4:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b70d6:	2b00      	cmp	r3, #0
   b70d8:	d09f      	beq.n	b701a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b70da:	6845      	ldr	r5, [r0, #4]
   b70dc:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b70de:	42af      	cmp	r7, r5
   b70e0:	d94a      	bls.n	b7178 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b70e2:	f105 0e01 	add.w	lr, r5, #1
   b70e6:	f8c0 e004 	str.w	lr, [r0, #4]
   b70ea:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b70ee:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b70f2:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b70f6:	2500      	movs	r5, #0
   b70f8:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b70fc:	6885      	ldr	r5, [r0, #8]
   b70fe:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b7100:	bf1f      	itttt	ne
   b7102:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b7106:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b710a:	3501      	addne	r5, #1
   b710c:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b7110:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b7114:	bf0c      	ite	eq
   b7116:	2501      	moveq	r5, #1
   b7118:	2502      	movne	r5, #2
   b711a:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b711e:	6805      	ldr	r5, [r0, #0]
   b7120:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b7124:	6845      	ldr	r5, [r0, #4]
   b7126:	3d01      	subs	r5, #1
   b7128:	e7ca      	b.n	b70c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b712a:	3d01      	subs	r5, #1
   b712c:	f1a8 0810 	sub.w	r8, r8, #16
   b7130:	e7a7      	b.n	b7082 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b7132:	3501      	adds	r5, #1
   b7134:	f47f af71 	bne.w	b701a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b7138:	f06f 0401 	mvn.w	r4, #1
   b713c:	e01e      	b.n	b717c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b713e:	3d01      	subs	r5, #1
   b7140:	1c6f      	adds	r7, r5, #1
   b7142:	f1ae 0e10 	sub.w	lr, lr, #16
   b7146:	d1b3      	bne.n	b70b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b7148:	e767      	b.n	b701a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b714a:	f10e 0901 	add.w	r9, lr, #1
   b714e:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7152:	f8d0 8000 	ldr.w	r8, [r0]
   b7156:	4542      	cmp	r2, r8
   b7158:	f240 8093 	bls.w	b7282 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b715c:	f811 5008 	ldrb.w	r5, [r1, r8]
   b7160:	2d00      	cmp	r5, #0
   b7162:	f000 808e 	beq.w	b7282 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b7166:	2d22      	cmp	r5, #34	; 0x22
   b7168:	d130      	bne.n	b71cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b716a:	b1f3      	cbz	r3, b71aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b716c:	6845      	ldr	r5, [r0, #4]
   b716e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b7170:	42af      	cmp	r7, r5
   b7172:	d806      	bhi.n	b7182 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b7174:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b7178:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b717c:	4620      	mov	r0, r4
   b717e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b7182:	f105 0e01 	add.w	lr, r5, #1
   b7186:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b718a:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b718e:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b7192:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b7196:	2700      	movs	r7, #0
   b7198:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b719a:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b719e:	f04f 0a03 	mov.w	sl, #3
   b71a2:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b71a6:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b71aa:	6885      	ldr	r5, [r0, #8]
   b71ac:	1c6f      	adds	r7, r5, #1
				count++;
   b71ae:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b71b2:	f43f af32 	beq.w	b701a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b71b6:	2b00      	cmp	r3, #0
   b71b8:	f43f af2f 	beq.w	b701a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b71bc:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b71c0:	f8de 500c 	ldr.w	r5, [lr, #12]
   b71c4:	3501      	adds	r5, #1
   b71c6:	f8ce 500c 	str.w	r5, [lr, #12]
   b71ca:	e726      	b.n	b701a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b71cc:	2d5c      	cmp	r5, #92	; 0x5c
   b71ce:	d111      	bne.n	b71f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b71d0:	f108 0501 	add.w	r5, r8, #1
   b71d4:	42aa      	cmp	r2, r5
   b71d6:	d90d      	bls.n	b71f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b71d8:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b71da:	5d4d      	ldrb	r5, [r1, r5]
   b71dc:	2d75      	cmp	r5, #117	; 0x75
   b71de:	d82b      	bhi.n	b7238 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b71e0:	2d6d      	cmp	r5, #109	; 0x6d
   b71e2:	d80b      	bhi.n	b71fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b71e4:	2d66      	cmp	r5, #102	; 0x66
   b71e6:	d827      	bhi.n	b7238 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b71e8:	2d5b      	cmp	r5, #91	; 0x5b
   b71ea:	d81d      	bhi.n	b7228 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b71ec:	2d22      	cmp	r5, #34	; 0x22
   b71ee:	d001      	beq.n	b71f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b71f0:	2d2f      	cmp	r5, #47	; 0x2f
   b71f2:	d121      	bne.n	b7238 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b71f4:	6805      	ldr	r5, [r0, #0]
   b71f6:	3501      	adds	r5, #1
   b71f8:	6005      	str	r5, [r0, #0]
   b71fa:	e7aa      	b.n	b7152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b71fc:	3d6e      	subs	r5, #110	; 0x6e
   b71fe:	2d07      	cmp	r5, #7
   b7200:	d81a      	bhi.n	b7238 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b7202:	a701      	add	r7, pc, #4	; (adr r7, b7208 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b7204:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b7208:	000b71f5 	.word	0x000b71f5
   b720c:	000b7239 	.word	0x000b7239
   b7210:	000b7239 	.word	0x000b7239
   b7214:	000b7239 	.word	0x000b7239
   b7218:	000b71f5 	.word	0x000b71f5
   b721c:	000b7239 	.word	0x000b7239
   b7220:	000b71f5 	.word	0x000b71f5
   b7224:	000b723f 	.word	0x000b723f
   b7228:	3d5c      	subs	r5, #92	; 0x5c
   b722a:	b2ed      	uxtb	r5, r5
   b722c:	fa0c f505 	lsl.w	r5, ip, r5
   b7230:	f240 4741 	movw	r7, #1089	; 0x441
   b7234:	423d      	tst	r5, r7
   b7236:	d1dd      	bne.n	b71f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b7238:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b723c:	e77c      	b.n	b7138 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b723e:	f108 0502 	add.w	r5, r8, #2
   b7242:	6005      	str	r5, [r0, #0]
   b7244:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b7248:	f8d0 8000 	ldr.w	r8, [r0]
   b724c:	4542      	cmp	r2, r8
   b724e:	d803      	bhi.n	b7258 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b7250:	6805      	ldr	r5, [r0, #0]
   b7252:	3d01      	subs	r5, #1
   b7254:	6005      	str	r5, [r0, #0]
					break;
   b7256:	e7cd      	b.n	b71f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b7258:	f811 5008 	ldrb.w	r5, [r1, r8]
   b725c:	2d00      	cmp	r5, #0
   b725e:	d0f7      	beq.n	b7250 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b7260:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b7264:	f1bb 0f09 	cmp.w	fp, #9
   b7268:	d904      	bls.n	b7274 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b726a:	f025 0520 	bic.w	r5, r5, #32
   b726e:	3d41      	subs	r5, #65	; 0x41
   b7270:	2d05      	cmp	r5, #5
   b7272:	d8e1      	bhi.n	b7238 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b7274:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b7278:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b727c:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b727e:	d1e3      	bne.n	b7248 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b7280:	e7e6      	b.n	b7250 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b7282:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b7286:	f06f 0402 	mvn.w	r4, #2
   b728a:	e777      	b.n	b717c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b728c:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b7290:	2b00      	cmp	r3, #0
   b7292:	f43f aec2 	beq.w	b701a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b7296:	6885      	ldr	r5, [r0, #8]
   b7298:	1c6f      	adds	r7, r5, #1
   b729a:	f43f aebe 	beq.w	b701a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b729e:	012d      	lsls	r5, r5, #4
   b72a0:	5d5d      	ldrb	r5, [r3, r5]
   b72a2:	3d01      	subs	r5, #1
   b72a4:	2d01      	cmp	r5, #1
   b72a6:	f67f aeb8 	bls.w	b701a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b72aa:	6845      	ldr	r5, [r0, #4]
   b72ac:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b72b0:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b72b4:	f1b8 0f00 	cmp.w	r8, #0
   b72b8:	f6ff aeaf 	blt.w	b701a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b72bc:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b72c0:	3d01      	subs	r5, #1
   b72c2:	2d01      	cmp	r5, #1
   b72c4:	d80a      	bhi.n	b72dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b72c6:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b72ca:	3501      	adds	r5, #1
   b72cc:	d006      	beq.n	b72dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b72ce:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b72d2:	3501      	adds	r5, #1
   b72d4:	d102      	bne.n	b72dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b72d6:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b72da:	e69e      	b.n	b701a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b72dc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b72e0:	f1ae 0e10 	sub.w	lr, lr, #16
   b72e4:	e7e6      	b.n	b72b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b72e6:	f1a5 0920 	sub.w	r9, r5, #32
   b72ea:	4f24      	ldr	r7, [pc, #144]	; (b737c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b72ec:	fa5f f989 	uxtb.w	r9, r9
   b72f0:	fa0c f909 	lsl.w	r9, ip, r9
   b72f4:	ea19 0f07 	tst.w	r9, r7
   b72f8:	f47f aeaa 	bne.w	b7050 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b72fc:	3d20      	subs	r5, #32
   b72fe:	2d5e      	cmp	r5, #94	; 0x5e
   b7300:	d89a      	bhi.n	b7238 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b7302:	f108 0501 	add.w	r5, r8, #1
   b7306:	6005      	str	r5, [r0, #0]
   b7308:	e68f      	b.n	b702a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b730a:	2d0d      	cmp	r5, #13
   b730c:	d1f6      	bne.n	b72fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b730e:	e69f      	b.n	b7050 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b7310:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b7314:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b7318:	e7f8      	b.n	b730c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b731a:	6845      	ldr	r5, [r0, #4]
   b731c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b731e:	42af      	cmp	r7, r5
   b7320:	f67f af28 	bls.w	b7174 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b7324:	f105 0801 	add.w	r8, r5, #1
   b7328:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b732c:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b7330:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b7334:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b7338:	2700      	movs	r7, #0
   b733a:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b733c:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b7340:	f04f 0a04 	mov.w	sl, #4
   b7344:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b7348:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b734c:	6805      	ldr	r5, [r0, #0]
   b734e:	3d01      	subs	r5, #1
   b7350:	e683      	b.n	b705a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b7352:	2b00      	cmp	r3, #0
   b7354:	f43f af12 	beq.w	b717c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b7358:	6842      	ldr	r2, [r0, #4]
   b735a:	1e51      	subs	r1, r2, #1
   b735c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b7360:	2900      	cmp	r1, #0
   b7362:	f6ff af0b 	blt.w	b717c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b7366:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b736a:	3201      	adds	r2, #1
   b736c:	d003      	beq.n	b7376 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b736e:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b7372:	3201      	adds	r2, #1
   b7374:	d087      	beq.n	b7286 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b7376:	3901      	subs	r1, #1
   b7378:	3b10      	subs	r3, #16
   b737a:	e7f1      	b.n	b7360 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b737c:	04001001 	.word	0x04001001

000b7380 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b7380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b7382:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b7384:	4604      	mov	r4, r0
	if (offset == 0) {
   b7386:	b912      	cbnz	r2, b738e <_ZN10JsonParser5parseEv+0xe>
		return false;
   b7388:	2000      	movs	r0, #0
}
   b738a:	b003      	add	sp, #12
   b738c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b738e:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b7390:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b7394:	b1ab      	cbz	r3, b73c2 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b7396:	2100      	movs	r1, #0
	parser->toknext = 0;
   b7398:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b739c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b73a0:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b73a2:	69c1      	ldr	r1, [r0, #28]
   b73a4:	9100      	str	r1, [sp, #0]
   b73a6:	6841      	ldr	r1, [r0, #4]
   b73a8:	4630      	mov	r0, r6
   b73aa:	f7ff fe0d 	bl	b6fc8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b73ae:	1c43      	adds	r3, r0, #1
   b73b0:	d128      	bne.n	b7404 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b73b2:	7c25      	ldrb	r5, [r4, #16]
   b73b4:	2d00      	cmp	r5, #0
   b73b6:	d1e7      	bne.n	b7388 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b73b8:	6960      	ldr	r0, [r4, #20]
   b73ba:	f000 faad 	bl	b7918 <free>
			tokens = 0;
   b73be:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b73c0:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b73c2:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b73c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b73c8:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b73cc:	68e2      	ldr	r2, [r4, #12]
   b73ce:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b73d0:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b73d2:	9500      	str	r5, [sp, #0]
   b73d4:	462b      	mov	r3, r5
   b73d6:	4630      	mov	r0, r6
   b73d8:	f7ff fdf6 	bl	b6fc8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b73dc:	2800      	cmp	r0, #0
   b73de:	dbd3      	blt.n	b7388 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b73e0:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b73e2:	d017      	beq.n	b7414 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b73e4:	0100      	lsls	r0, r0, #4
   b73e6:	f000 fa8f 	bl	b7908 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b73ea:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b73ec:	6160      	str	r0, [r4, #20]
   b73ee:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b73f0:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b73f2:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b73f6:	68e2      	ldr	r2, [r4, #12]
   b73f8:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b73fa:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b73fc:	4630      	mov	r0, r6
   b73fe:	f7ff fde3 	bl	b6fc8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b7402:	e001      	b.n	b7408 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b7404:	2800      	cmp	r0, #0
   b7406:	dbbf      	blt.n	b7388 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b7408:	6963      	ldr	r3, [r4, #20]
   b740a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b740e:	61a0      	str	r0, [r4, #24]
	return true;
   b7410:	2001      	movs	r0, #1
   b7412:	e7ba      	b.n	b738a <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b7414:	6963      	ldr	r3, [r4, #20]
   b7416:	61a3      	str	r3, [r4, #24]
   b7418:	e7fa      	b.n	b7410 <_ZN10JsonParser5parseEv+0x90>
	...

000b741c <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b741c:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b741e:	f000 f8af 	bl	b7580 <HAL_Pin_Map>
   b7422:	4b01      	ldr	r3, [pc, #4]	; (b7428 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b7424:	6018      	str	r0, [r3, #0]
}
   b7426:	bd08      	pop	{r3, pc}
   b7428:	2003e6b4 	.word	0x2003e6b4

000b742c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b742c:	b508      	push	{r3, lr}
   b742e:	4b02      	ldr	r3, [pc, #8]	; (b7438 <hal_ble_stack_init+0xc>)
   b7430:	681b      	ldr	r3, [r3, #0]
   b7432:	689b      	ldr	r3, [r3, #8]
   b7434:	9301      	str	r3, [sp, #4]
   b7436:	bd08      	pop	{r3, pc}
   b7438:	00030278 	.word	0x00030278

000b743c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b743c:	b508      	push	{r3, lr}
   b743e:	4b02      	ldr	r3, [pc, #8]	; (b7448 <hal_ble_gap_set_advertising_data+0xc>)
   b7440:	681b      	ldr	r3, [r3, #0]
   b7442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7444:	9301      	str	r3, [sp, #4]
   b7446:	bd08      	pop	{r3, pc}
   b7448:	00030278 	.word	0x00030278

000b744c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b744c:	b508      	push	{r3, lr}
   b744e:	4b02      	ldr	r3, [pc, #8]	; (b7458 <hal_ble_gap_set_scan_response_data+0xc>)
   b7450:	681b      	ldr	r3, [r3, #0]
   b7452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7454:	9301      	str	r3, [sp, #4]
   b7456:	bd08      	pop	{r3, pc}
   b7458:	00030278 	.word	0x00030278

000b745c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b745c:	b508      	push	{r3, lr}
   b745e:	4b02      	ldr	r3, [pc, #8]	; (b7468 <hal_ble_gap_start_advertising+0xc>)
   b7460:	681b      	ldr	r3, [r3, #0]
   b7462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b7464:	9301      	str	r3, [sp, #4]
   b7466:	bd08      	pop	{r3, pc}
   b7468:	00030278 	.word	0x00030278

000b746c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b746c:	b508      	push	{r3, lr}
   b746e:	4b03      	ldr	r3, [pc, #12]	; (b747c <hal_ble_gap_disconnect+0x10>)
   b7470:	681b      	ldr	r3, [r3, #0]
   b7472:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b7476:	9301      	str	r3, [sp, #4]
   b7478:	bd08      	pop	{r3, pc}
   b747a:	0000      	.short	0x0000
   b747c:	00030278 	.word	0x00030278

000b7480 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b7480:	b508      	push	{r3, lr}
   b7482:	4b03      	ldr	r3, [pc, #12]	; (b7490 <hal_ble_gatt_server_add_service+0x10>)
   b7484:	681b      	ldr	r3, [r3, #0]
   b7486:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b748a:	9301      	str	r3, [sp, #4]
   b748c:	bd08      	pop	{r3, pc}
   b748e:	0000      	.short	0x0000
   b7490:	00030278 	.word	0x00030278

000b7494 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7494:	b508      	push	{r3, lr}
   b7496:	4b03      	ldr	r3, [pc, #12]	; (b74a4 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b7498:	681b      	ldr	r3, [r3, #0]
   b749a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b749e:	9301      	str	r3, [sp, #4]
   b74a0:	bd08      	pop	{r3, pc}
   b74a2:	0000      	.short	0x0000
   b74a4:	00030278 	.word	0x00030278

000b74a8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b74a8:	b508      	push	{r3, lr}
   b74aa:	4b03      	ldr	r3, [pc, #12]	; (b74b8 <hal_ble_gatt_client_write_with_response+0x10>)
   b74ac:	681b      	ldr	r3, [r3, #0]
   b74ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b74b2:	9301      	str	r3, [sp, #4]
   b74b4:	bd08      	pop	{r3, pc}
   b74b6:	0000      	.short	0x0000
   b74b8:	00030278 	.word	0x00030278

000b74bc <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b74bc:	b508      	push	{r3, lr}
   b74be:	4b03      	ldr	r3, [pc, #12]	; (b74cc <hal_ble_gatt_client_write_without_response+0x10>)
   b74c0:	681b      	ldr	r3, [r3, #0]
   b74c2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b74c6:	9301      	str	r3, [sp, #4]
   b74c8:	bd08      	pop	{r3, pc}
   b74ca:	0000      	.short	0x0000
   b74cc:	00030278 	.word	0x00030278

000b74d0 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b74d0:	b508      	push	{r3, lr}
   b74d2:	4b03      	ldr	r3, [pc, #12]	; (b74e0 <hal_ble_gatt_server_add_characteristic+0x10>)
   b74d4:	681b      	ldr	r3, [r3, #0]
   b74d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b74da:	9301      	str	r3, [sp, #4]
   b74dc:	bd08      	pop	{r3, pc}
   b74de:	0000      	.short	0x0000
   b74e0:	00030278 	.word	0x00030278

000b74e4 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b74e4:	b508      	push	{r3, lr}
   b74e6:	4b03      	ldr	r3, [pc, #12]	; (b74f4 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b74e8:	681b      	ldr	r3, [r3, #0]
   b74ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b74ee:	9301      	str	r3, [sp, #4]
   b74f0:	bd08      	pop	{r3, pc}
   b74f2:	0000      	.short	0x0000
   b74f4:	00030278 	.word	0x00030278

000b74f8 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b74f8:	b508      	push	{r3, lr}
   b74fa:	4b03      	ldr	r3, [pc, #12]	; (b7508 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b74fc:	681b      	ldr	r3, [r3, #0]
   b74fe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b7502:	9301      	str	r3, [sp, #4]
   b7504:	bd08      	pop	{r3, pc}
   b7506:	0000      	.short	0x0000
   b7508:	00030278 	.word	0x00030278

000b750c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b750c:	b508      	push	{r3, lr}
   b750e:	4b03      	ldr	r3, [pc, #12]	; (b751c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b7510:	681b      	ldr	r3, [r3, #0]
   b7512:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b7516:	9301      	str	r3, [sp, #4]
   b7518:	bd08      	pop	{r3, pc}
   b751a:	0000      	.short	0x0000
   b751c:	00030278 	.word	0x00030278

000b7520 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7520:	b508      	push	{r3, lr}
   b7522:	4b02      	ldr	r3, [pc, #8]	; (b752c <os_mutex_recursive_create+0xc>)
   b7524:	681b      	ldr	r3, [r3, #0]
   b7526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7528:	9301      	str	r3, [sp, #4]
   b752a:	bd08      	pop	{r3, pc}
   b752c:	00030248 	.word	0x00030248

000b7530 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b7530:	b508      	push	{r3, lr}
   b7532:	4b02      	ldr	r3, [pc, #8]	; (b753c <os_mutex_recursive_lock+0xc>)
   b7534:	681b      	ldr	r3, [r3, #0]
   b7536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7538:	9301      	str	r3, [sp, #4]
   b753a:	bd08      	pop	{r3, pc}
   b753c:	00030248 	.word	0x00030248

000b7540 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b7540:	b508      	push	{r3, lr}
   b7542:	4b02      	ldr	r3, [pc, #8]	; (b754c <os_mutex_recursive_unlock+0xc>)
   b7544:	681b      	ldr	r3, [r3, #0]
   b7546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7548:	9301      	str	r3, [sp, #4]
   b754a:	bd08      	pop	{r3, pc}
   b754c:	00030248 	.word	0x00030248

000b7550 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7550:	b508      	push	{r3, lr}
   b7552:	4b02      	ldr	r3, [pc, #8]	; (b755c <HAL_RNG_GetRandomNumber+0xc>)
   b7554:	681b      	ldr	r3, [r3, #0]
   b7556:	685b      	ldr	r3, [r3, #4]
   b7558:	9301      	str	r3, [sp, #4]
   b755a:	bd08      	pop	{r3, pc}
   b755c:	00030218 	.word	0x00030218

000b7560 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7560:	b508      	push	{r3, lr}
   b7562:	4b02      	ldr	r3, [pc, #8]	; (b756c <HAL_Delay_Microseconds+0xc>)
   b7564:	681b      	ldr	r3, [r3, #0]
   b7566:	68db      	ldr	r3, [r3, #12]
   b7568:	9301      	str	r3, [sp, #4]
   b756a:	bd08      	pop	{r3, pc}
   b756c:	00030218 	.word	0x00030218

000b7570 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7570:	b508      	push	{r3, lr}
   b7572:	4b02      	ldr	r3, [pc, #8]	; (b757c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7574:	681b      	ldr	r3, [r3, #0]
   b7576:	695b      	ldr	r3, [r3, #20]
   b7578:	9301      	str	r3, [sp, #4]
   b757a:	bd08      	pop	{r3, pc}
   b757c:	00030218 	.word	0x00030218

000b7580 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b7580:	b508      	push	{r3, lr}
   b7582:	4b02      	ldr	r3, [pc, #8]	; (b758c <HAL_Pin_Map+0xc>)
   b7584:	681b      	ldr	r3, [r3, #0]
   b7586:	681b      	ldr	r3, [r3, #0]
   b7588:	9301      	str	r3, [sp, #4]
   b758a:	bd08      	pop	{r3, pc}
   b758c:	0003022c 	.word	0x0003022c

000b7590 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7590:	b508      	push	{r3, lr}
   b7592:	4b02      	ldr	r3, [pc, #8]	; (b759c <hal_i2c_begin+0xc>)
   b7594:	681b      	ldr	r3, [r3, #0]
   b7596:	68db      	ldr	r3, [r3, #12]
   b7598:	9301      	str	r3, [sp, #4]
   b759a:	bd08      	pop	{r3, pc}
   b759c:	00030228 	.word	0x00030228

000b75a0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b75a0:	b508      	push	{r3, lr}
   b75a2:	4b02      	ldr	r3, [pc, #8]	; (b75ac <hal_i2c_begin_transmission+0xc>)
   b75a4:	681b      	ldr	r3, [r3, #0]
   b75a6:	699b      	ldr	r3, [r3, #24]
   b75a8:	9301      	str	r3, [sp, #4]
   b75aa:	bd08      	pop	{r3, pc}
   b75ac:	00030228 	.word	0x00030228

000b75b0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b75b0:	b508      	push	{r3, lr}
   b75b2:	4b02      	ldr	r3, [pc, #8]	; (b75bc <hal_i2c_end_transmission+0xc>)
   b75b4:	681b      	ldr	r3, [r3, #0]
   b75b6:	69db      	ldr	r3, [r3, #28]
   b75b8:	9301      	str	r3, [sp, #4]
   b75ba:	bd08      	pop	{r3, pc}
   b75bc:	00030228 	.word	0x00030228

000b75c0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b75c0:	b508      	push	{r3, lr}
   b75c2:	4b02      	ldr	r3, [pc, #8]	; (b75cc <hal_i2c_write+0xc>)
   b75c4:	681b      	ldr	r3, [r3, #0]
   b75c6:	6a1b      	ldr	r3, [r3, #32]
   b75c8:	9301      	str	r3, [sp, #4]
   b75ca:	bd08      	pop	{r3, pc}
   b75cc:	00030228 	.word	0x00030228

000b75d0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b75d0:	b508      	push	{r3, lr}
   b75d2:	4b02      	ldr	r3, [pc, #8]	; (b75dc <hal_i2c_available+0xc>)
   b75d4:	681b      	ldr	r3, [r3, #0]
   b75d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b75d8:	9301      	str	r3, [sp, #4]
   b75da:	bd08      	pop	{r3, pc}
   b75dc:	00030228 	.word	0x00030228

000b75e0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b75e0:	b508      	push	{r3, lr}
   b75e2:	4b02      	ldr	r3, [pc, #8]	; (b75ec <hal_i2c_read+0xc>)
   b75e4:	681b      	ldr	r3, [r3, #0]
   b75e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b75e8:	9301      	str	r3, [sp, #4]
   b75ea:	bd08      	pop	{r3, pc}
   b75ec:	00030228 	.word	0x00030228

000b75f0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b75f0:	b508      	push	{r3, lr}
   b75f2:	4b02      	ldr	r3, [pc, #8]	; (b75fc <hal_i2c_peek+0xc>)
   b75f4:	681b      	ldr	r3, [r3, #0]
   b75f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b75f8:	9301      	str	r3, [sp, #4]
   b75fa:	bd08      	pop	{r3, pc}
   b75fc:	00030228 	.word	0x00030228

000b7600 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7600:	b508      	push	{r3, lr}
   b7602:	4b02      	ldr	r3, [pc, #8]	; (b760c <hal_i2c_flush+0xc>)
   b7604:	681b      	ldr	r3, [r3, #0]
   b7606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7608:	9301      	str	r3, [sp, #4]
   b760a:	bd08      	pop	{r3, pc}
   b760c:	00030228 	.word	0x00030228

000b7610 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7610:	b508      	push	{r3, lr}
   b7612:	4b02      	ldr	r3, [pc, #8]	; (b761c <hal_i2c_init+0xc>)
   b7614:	681b      	ldr	r3, [r3, #0]
   b7616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7618:	9301      	str	r3, [sp, #4]
   b761a:	bd08      	pop	{r3, pc}
   b761c:	00030228 	.word	0x00030228

000b7620 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b7620:	b508      	push	{r3, lr}
   b7622:	4b02      	ldr	r3, [pc, #8]	; (b762c <hal_i2c_request_ex+0xc>)
   b7624:	681b      	ldr	r3, [r3, #0]
   b7626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7628:	9301      	str	r3, [sp, #4]
   b762a:	bd08      	pop	{r3, pc}
   b762c:	00030228 	.word	0x00030228

000b7630 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b7630:	b508      	push	{r3, lr}
   b7632:	4b02      	ldr	r3, [pc, #8]	; (b763c <if_index_to_name+0xc>)
   b7634:	681b      	ldr	r3, [r3, #0]
   b7636:	695b      	ldr	r3, [r3, #20]
   b7638:	9301      	str	r3, [sp, #4]
   b763a:	bd08      	pop	{r3, pc}
   b763c:	0003026c 	.word	0x0003026c

000b7640 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7640:	b508      	push	{r3, lr}
   b7642:	4b02      	ldr	r3, [pc, #8]	; (b764c <inet_inet_ntop+0xc>)
   b7644:	681b      	ldr	r3, [r3, #0]
   b7646:	695b      	ldr	r3, [r3, #20]
   b7648:	9301      	str	r3, [sp, #4]
   b764a:	bd08      	pop	{r3, pc}
   b764c:	00030264 	.word	0x00030264

000b7650 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b7650:	b508      	push	{r3, lr}
   b7652:	4b02      	ldr	r3, [pc, #8]	; (b765c <inet_htonl+0xc>)
   b7654:	681b      	ldr	r3, [r3, #0]
   b7656:	6a1b      	ldr	r3, [r3, #32]
   b7658:	9301      	str	r3, [sp, #4]
   b765a:	bd08      	pop	{r3, pc}
   b765c:	00030264 	.word	0x00030264

000b7660 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b7660:	b508      	push	{r3, lr}
   b7662:	4b02      	ldr	r3, [pc, #8]	; (b766c <inet_htons+0xc>)
   b7664:	681b      	ldr	r3, [r3, #0]
   b7666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7668:	9301      	str	r3, [sp, #4]
   b766a:	bd08      	pop	{r3, pc}
   b766c:	00030264 	.word	0x00030264

000b7670 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7670:	b508      	push	{r3, lr}
   b7672:	4b02      	ldr	r3, [pc, #8]	; (b767c <netdb_freeaddrinfo+0xc>)
   b7674:	681b      	ldr	r3, [r3, #0]
   b7676:	689b      	ldr	r3, [r3, #8]
   b7678:	9301      	str	r3, [sp, #4]
   b767a:	bd08      	pop	{r3, pc}
   b767c:	00030268 	.word	0x00030268

000b7680 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7680:	b508      	push	{r3, lr}
   b7682:	4b02      	ldr	r3, [pc, #8]	; (b768c <netdb_getaddrinfo+0xc>)
   b7684:	681b      	ldr	r3, [r3, #0]
   b7686:	68db      	ldr	r3, [r3, #12]
   b7688:	9301      	str	r3, [sp, #4]
   b768a:	bd08      	pop	{r3, pc}
   b768c:	00030268 	.word	0x00030268

000b7690 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b7690:	b508      	push	{r3, lr}
   b7692:	4b02      	ldr	r3, [pc, #8]	; (b769c <sock_setsockopt+0xc>)
   b7694:	681b      	ldr	r3, [r3, #0]
   b7696:	699b      	ldr	r3, [r3, #24]
   b7698:	9301      	str	r3, [sp, #4]
   b769a:	bd08      	pop	{r3, pc}
   b769c:	00030238 	.word	0x00030238

000b76a0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b76a0:	b508      	push	{r3, lr}
   b76a2:	4b02      	ldr	r3, [pc, #8]	; (b76ac <sock_close+0xc>)
   b76a4:	681b      	ldr	r3, [r3, #0]
   b76a6:	69db      	ldr	r3, [r3, #28]
   b76a8:	9301      	str	r3, [sp, #4]
   b76aa:	bd08      	pop	{r3, pc}
   b76ac:	00030238 	.word	0x00030238

000b76b0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b76b0:	b508      	push	{r3, lr}
   b76b2:	4b02      	ldr	r3, [pc, #8]	; (b76bc <sock_connect+0xc>)
   b76b4:	681b      	ldr	r3, [r3, #0]
   b76b6:	6a1b      	ldr	r3, [r3, #32]
   b76b8:	9301      	str	r3, [sp, #4]
   b76ba:	bd08      	pop	{r3, pc}
   b76bc:	00030238 	.word	0x00030238

000b76c0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b76c0:	b508      	push	{r3, lr}
   b76c2:	4b02      	ldr	r3, [pc, #8]	; (b76cc <sock_recv+0xc>)
   b76c4:	681b      	ldr	r3, [r3, #0]
   b76c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b76c8:	9301      	str	r3, [sp, #4]
   b76ca:	bd08      	pop	{r3, pc}
   b76cc:	00030238 	.word	0x00030238

000b76d0 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b76d0:	b508      	push	{r3, lr}
   b76d2:	4b02      	ldr	r3, [pc, #8]	; (b76dc <sock_send+0xc>)
   b76d4:	681b      	ldr	r3, [r3, #0]
   b76d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b76d8:	9301      	str	r3, [sp, #4]
   b76da:	bd08      	pop	{r3, pc}
   b76dc:	00030238 	.word	0x00030238

000b76e0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b76e0:	b508      	push	{r3, lr}
   b76e2:	4b02      	ldr	r3, [pc, #8]	; (b76ec <sock_socket+0xc>)
   b76e4:	681b      	ldr	r3, [r3, #0]
   b76e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b76e8:	9301      	str	r3, [sp, #4]
   b76ea:	bd08      	pop	{r3, pc}
   b76ec:	00030238 	.word	0x00030238

000b76f0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b76f0:	b508      	push	{r3, lr}
   b76f2:	4b02      	ldr	r3, [pc, #8]	; (b76fc <hal_usart_write+0xc>)
   b76f4:	681b      	ldr	r3, [r3, #0]
   b76f6:	68db      	ldr	r3, [r3, #12]
   b76f8:	9301      	str	r3, [sp, #4]
   b76fa:	bd08      	pop	{r3, pc}
   b76fc:	0003023c 	.word	0x0003023c

000b7700 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7700:	b508      	push	{r3, lr}
   b7702:	4b02      	ldr	r3, [pc, #8]	; (b770c <hal_usart_available+0xc>)
   b7704:	681b      	ldr	r3, [r3, #0]
   b7706:	691b      	ldr	r3, [r3, #16]
   b7708:	9301      	str	r3, [sp, #4]
   b770a:	bd08      	pop	{r3, pc}
   b770c:	0003023c 	.word	0x0003023c

000b7710 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7710:	b508      	push	{r3, lr}
   b7712:	4b02      	ldr	r3, [pc, #8]	; (b771c <hal_usart_read+0xc>)
   b7714:	681b      	ldr	r3, [r3, #0]
   b7716:	695b      	ldr	r3, [r3, #20]
   b7718:	9301      	str	r3, [sp, #4]
   b771a:	bd08      	pop	{r3, pc}
   b771c:	0003023c 	.word	0x0003023c

000b7720 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7720:	b508      	push	{r3, lr}
   b7722:	4b02      	ldr	r3, [pc, #8]	; (b772c <hal_usart_peek+0xc>)
   b7724:	681b      	ldr	r3, [r3, #0]
   b7726:	699b      	ldr	r3, [r3, #24]
   b7728:	9301      	str	r3, [sp, #4]
   b772a:	bd08      	pop	{r3, pc}
   b772c:	0003023c 	.word	0x0003023c

000b7730 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7730:	b508      	push	{r3, lr}
   b7732:	4b02      	ldr	r3, [pc, #8]	; (b773c <hal_usart_flush+0xc>)
   b7734:	681b      	ldr	r3, [r3, #0]
   b7736:	69db      	ldr	r3, [r3, #28]
   b7738:	9301      	str	r3, [sp, #4]
   b773a:	bd08      	pop	{r3, pc}
   b773c:	0003023c 	.word	0x0003023c

000b7740 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7740:	b508      	push	{r3, lr}
   b7742:	4b02      	ldr	r3, [pc, #8]	; (b774c <hal_usart_available_data_for_write+0xc>)
   b7744:	681b      	ldr	r3, [r3, #0]
   b7746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7748:	9301      	str	r3, [sp, #4]
   b774a:	bd08      	pop	{r3, pc}
   b774c:	0003023c 	.word	0x0003023c

000b7750 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7750:	b508      	push	{r3, lr}
   b7752:	4b02      	ldr	r3, [pc, #8]	; (b775c <hal_usart_init_ex+0xc>)
   b7754:	681b      	ldr	r3, [r3, #0]
   b7756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7758:	9301      	str	r3, [sp, #4]
   b775a:	bd08      	pop	{r3, pc}
   b775c:	0003023c 	.word	0x0003023c

000b7760 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7760:	b508      	push	{r3, lr}
   b7762:	4b02      	ldr	r3, [pc, #8]	; (b776c <HAL_USB_USART_Init+0xc>)
   b7764:	681b      	ldr	r3, [r3, #0]
   b7766:	681b      	ldr	r3, [r3, #0]
   b7768:	9301      	str	r3, [sp, #4]
   b776a:	bd08      	pop	{r3, pc}
   b776c:	0003024c 	.word	0x0003024c

000b7770 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7770:	b508      	push	{r3, lr}
   b7772:	4b02      	ldr	r3, [pc, #8]	; (b777c <HAL_USB_USART_Begin+0xc>)
   b7774:	681b      	ldr	r3, [r3, #0]
   b7776:	685b      	ldr	r3, [r3, #4]
   b7778:	9301      	str	r3, [sp, #4]
   b777a:	bd08      	pop	{r3, pc}
   b777c:	0003024c 	.word	0x0003024c

000b7780 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7780:	b508      	push	{r3, lr}
   b7782:	4b02      	ldr	r3, [pc, #8]	; (b778c <HAL_USB_USART_Available_Data+0xc>)
   b7784:	681b      	ldr	r3, [r3, #0]
   b7786:	691b      	ldr	r3, [r3, #16]
   b7788:	9301      	str	r3, [sp, #4]
   b778a:	bd08      	pop	{r3, pc}
   b778c:	0003024c 	.word	0x0003024c

000b7790 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7790:	b508      	push	{r3, lr}
   b7792:	4b02      	ldr	r3, [pc, #8]	; (b779c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7794:	681b      	ldr	r3, [r3, #0]
   b7796:	695b      	ldr	r3, [r3, #20]
   b7798:	9301      	str	r3, [sp, #4]
   b779a:	bd08      	pop	{r3, pc}
   b779c:	0003024c 	.word	0x0003024c

000b77a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b77a0:	b508      	push	{r3, lr}
   b77a2:	4b02      	ldr	r3, [pc, #8]	; (b77ac <HAL_USB_USART_Receive_Data+0xc>)
   b77a4:	681b      	ldr	r3, [r3, #0]
   b77a6:	699b      	ldr	r3, [r3, #24]
   b77a8:	9301      	str	r3, [sp, #4]
   b77aa:	bd08      	pop	{r3, pc}
   b77ac:	0003024c 	.word	0x0003024c

000b77b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b77b0:	b508      	push	{r3, lr}
   b77b2:	4b02      	ldr	r3, [pc, #8]	; (b77bc <HAL_USB_USART_Send_Data+0xc>)
   b77b4:	681b      	ldr	r3, [r3, #0]
   b77b6:	69db      	ldr	r3, [r3, #28]
   b77b8:	9301      	str	r3, [sp, #4]
   b77ba:	bd08      	pop	{r3, pc}
   b77bc:	0003024c 	.word	0x0003024c

000b77c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b77c0:	b508      	push	{r3, lr}
   b77c2:	4b02      	ldr	r3, [pc, #8]	; (b77cc <HAL_USB_USART_Flush_Data+0xc>)
   b77c4:	681b      	ldr	r3, [r3, #0]
   b77c6:	6a1b      	ldr	r3, [r3, #32]
   b77c8:	9301      	str	r3, [sp, #4]
   b77ca:	bd08      	pop	{r3, pc}
   b77cc:	0003024c 	.word	0x0003024c

000b77d0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b77d0:	b508      	push	{r3, lr}
   b77d2:	4b02      	ldr	r3, [pc, #8]	; (b77dc <panic_+0xc>)
   b77d4:	681b      	ldr	r3, [r3, #0]
   b77d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b77d8:	9301      	str	r3, [sp, #4]
   b77da:	bd08      	pop	{r3, pc}
   b77dc:	00030260 	.word	0x00030260

000b77e0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b77e0:	b508      	push	{r3, lr}
   b77e2:	4b02      	ldr	r3, [pc, #8]	; (b77ec <log_message+0xc>)
   b77e4:	681b      	ldr	r3, [r3, #0]
   b77e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b77e8:	9301      	str	r3, [sp, #4]
   b77ea:	bd08      	pop	{r3, pc}
   b77ec:	00030260 	.word	0x00030260

000b77f0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b77f0:	b508      	push	{r3, lr}
   b77f2:	4b02      	ldr	r3, [pc, #8]	; (b77fc <set_system_mode+0xc>)
   b77f4:	681b      	ldr	r3, [r3, #0]
   b77f6:	685b      	ldr	r3, [r3, #4]
   b77f8:	9301      	str	r3, [sp, #4]
   b77fa:	bd08      	pop	{r3, pc}
   b77fc:	00030220 	.word	0x00030220

000b7800 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7800:	b508      	push	{r3, lr}
   b7802:	4b02      	ldr	r3, [pc, #8]	; (b780c <system_delay_ms+0xc>)
   b7804:	681b      	ldr	r3, [r3, #0]
   b7806:	695b      	ldr	r3, [r3, #20]
   b7808:	9301      	str	r3, [sp, #4]
   b780a:	bd08      	pop	{r3, pc}
   b780c:	00030220 	.word	0x00030220

000b7810 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7810:	b508      	push	{r3, lr}
   b7812:	4b03      	ldr	r3, [pc, #12]	; (b7820 <system_ctrl_set_app_request_handler+0x10>)
   b7814:	681b      	ldr	r3, [r3, #0]
   b7816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b781a:	9301      	str	r3, [sp, #4]
   b781c:	bd08      	pop	{r3, pc}
   b781e:	0000      	.short	0x0000
   b7820:	00030220 	.word	0x00030220

000b7824 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7824:	b508      	push	{r3, lr}
   b7826:	4b03      	ldr	r3, [pc, #12]	; (b7834 <system_ctrl_set_result+0x10>)
   b7828:	681b      	ldr	r3, [r3, #0]
   b782a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b782e:	9301      	str	r3, [sp, #4]
   b7830:	bd08      	pop	{r3, pc}
   b7832:	0000      	.short	0x0000
   b7834:	00030220 	.word	0x00030220

000b7838 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7838:	b508      	push	{r3, lr}
   b783a:	4b02      	ldr	r3, [pc, #8]	; (b7844 <spark_set_random_seed_from_cloud_handler+0xc>)
   b783c:	681b      	ldr	r3, [r3, #0]
   b783e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7840:	9301      	str	r3, [sp, #4]
   b7842:	bd08      	pop	{r3, pc}
   b7844:	00030244 	.word	0x00030244

000b7848 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7848:	b508      	push	{r3, lr}
   b784a:	4b02      	ldr	r3, [pc, #8]	; (b7854 <network_connect+0xc>)
   b784c:	681b      	ldr	r3, [r3, #0]
   b784e:	685b      	ldr	r3, [r3, #4]
   b7850:	9301      	str	r3, [sp, #4]
   b7852:	bd08      	pop	{r3, pc}
   b7854:	00030240 	.word	0x00030240

000b7858 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7858:	b508      	push	{r3, lr}
   b785a:	4b02      	ldr	r3, [pc, #8]	; (b7864 <network_connecting+0xc>)
   b785c:	681b      	ldr	r3, [r3, #0]
   b785e:	689b      	ldr	r3, [r3, #8]
   b7860:	9301      	str	r3, [sp, #4]
   b7862:	bd08      	pop	{r3, pc}
   b7864:	00030240 	.word	0x00030240

000b7868 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7868:	b508      	push	{r3, lr}
   b786a:	4b02      	ldr	r3, [pc, #8]	; (b7874 <network_disconnect+0xc>)
   b786c:	681b      	ldr	r3, [r3, #0]
   b786e:	68db      	ldr	r3, [r3, #12]
   b7870:	9301      	str	r3, [sp, #4]
   b7872:	bd08      	pop	{r3, pc}
   b7874:	00030240 	.word	0x00030240

000b7878 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7878:	b508      	push	{r3, lr}
   b787a:	4b02      	ldr	r3, [pc, #8]	; (b7884 <network_ready+0xc>)
   b787c:	681b      	ldr	r3, [r3, #0]
   b787e:	691b      	ldr	r3, [r3, #16]
   b7880:	9301      	str	r3, [sp, #4]
   b7882:	bd08      	pop	{r3, pc}
   b7884:	00030240 	.word	0x00030240

000b7888 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7888:	b508      	push	{r3, lr}
   b788a:	4b02      	ldr	r3, [pc, #8]	; (b7894 <network_on+0xc>)
   b788c:	681b      	ldr	r3, [r3, #0]
   b788e:	695b      	ldr	r3, [r3, #20]
   b7890:	9301      	str	r3, [sp, #4]
   b7892:	bd08      	pop	{r3, pc}
   b7894:	00030240 	.word	0x00030240

000b7898 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7898:	b508      	push	{r3, lr}
   b789a:	4b02      	ldr	r3, [pc, #8]	; (b78a4 <network_off+0xc>)
   b789c:	681b      	ldr	r3, [r3, #0]
   b789e:	699b      	ldr	r3, [r3, #24]
   b78a0:	9301      	str	r3, [sp, #4]
   b78a2:	bd08      	pop	{r3, pc}
   b78a4:	00030240 	.word	0x00030240

000b78a8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b78a8:	b508      	push	{r3, lr}
   b78aa:	4b02      	ldr	r3, [pc, #8]	; (b78b4 <network_listen+0xc>)
   b78ac:	681b      	ldr	r3, [r3, #0]
   b78ae:	69db      	ldr	r3, [r3, #28]
   b78b0:	9301      	str	r3, [sp, #4]
   b78b2:	bd08      	pop	{r3, pc}
   b78b4:	00030240 	.word	0x00030240

000b78b8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b78b8:	b508      	push	{r3, lr}
   b78ba:	4b02      	ldr	r3, [pc, #8]	; (b78c4 <network_listening+0xc>)
   b78bc:	681b      	ldr	r3, [r3, #0]
   b78be:	6a1b      	ldr	r3, [r3, #32]
   b78c0:	9301      	str	r3, [sp, #4]
   b78c2:	bd08      	pop	{r3, pc}
   b78c4:	00030240 	.word	0x00030240

000b78c8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b78c8:	b508      	push	{r3, lr}
   b78ca:	4b02      	ldr	r3, [pc, #8]	; (b78d4 <network_set_listen_timeout+0xc>)
   b78cc:	681b      	ldr	r3, [r3, #0]
   b78ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b78d0:	9301      	str	r3, [sp, #4]
   b78d2:	bd08      	pop	{r3, pc}
   b78d4:	00030240 	.word	0x00030240

000b78d8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b78d8:	b508      	push	{r3, lr}
   b78da:	4b02      	ldr	r3, [pc, #8]	; (b78e4 <network_get_listen_timeout+0xc>)
   b78dc:	681b      	ldr	r3, [r3, #0]
   b78de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b78e0:	9301      	str	r3, [sp, #4]
   b78e2:	bd08      	pop	{r3, pc}
   b78e4:	00030240 	.word	0x00030240

000b78e8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b78e8:	b508      	push	{r3, lr}
   b78ea:	4b02      	ldr	r3, [pc, #8]	; (b78f4 <network_is_on+0xc>)
   b78ec:	681b      	ldr	r3, [r3, #0]
   b78ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b78f0:	9301      	str	r3, [sp, #4]
   b78f2:	bd08      	pop	{r3, pc}
   b78f4:	00030240 	.word	0x00030240

000b78f8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b78f8:	b508      	push	{r3, lr}
   b78fa:	4b02      	ldr	r3, [pc, #8]	; (b7904 <network_is_off+0xc>)
   b78fc:	681b      	ldr	r3, [r3, #0]
   b78fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7900:	9301      	str	r3, [sp, #4]
   b7902:	bd08      	pop	{r3, pc}
   b7904:	00030240 	.word	0x00030240

000b7908 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7908:	b508      	push	{r3, lr}
   b790a:	4b02      	ldr	r3, [pc, #8]	; (b7914 <malloc+0xc>)
   b790c:	681b      	ldr	r3, [r3, #0]
   b790e:	681b      	ldr	r3, [r3, #0]
   b7910:	9301      	str	r3, [sp, #4]
   b7912:	bd08      	pop	{r3, pc}
   b7914:	0003021c 	.word	0x0003021c

000b7918 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7918:	b508      	push	{r3, lr}
   b791a:	4b02      	ldr	r3, [pc, #8]	; (b7924 <free+0xc>)
   b791c:	681b      	ldr	r3, [r3, #0]
   b791e:	685b      	ldr	r3, [r3, #4]
   b7920:	9301      	str	r3, [sp, #4]
   b7922:	bd08      	pop	{r3, pc}
   b7924:	0003021c 	.word	0x0003021c

000b7928 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7928:	b508      	push	{r3, lr}
   b792a:	4b02      	ldr	r3, [pc, #8]	; (b7934 <realloc+0xc>)
   b792c:	681b      	ldr	r3, [r3, #0]
   b792e:	689b      	ldr	r3, [r3, #8]
   b7930:	9301      	str	r3, [sp, #4]
   b7932:	bd08      	pop	{r3, pc}
   b7934:	0003021c 	.word	0x0003021c

000b7938 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b7938:	b508      	push	{r3, lr}
   b793a:	4b02      	ldr	r3, [pc, #8]	; (b7944 <sscanf+0xc>)
   b793c:	681b      	ldr	r3, [r3, #0]
   b793e:	695b      	ldr	r3, [r3, #20]
   b7940:	9301      	str	r3, [sp, #4]
   b7942:	bd08      	pop	{r3, pc}
   b7944:	0003021c 	.word	0x0003021c

000b7948 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7948:	b508      	push	{r3, lr}
   b794a:	4b02      	ldr	r3, [pc, #8]	; (b7954 <vsnprintf+0xc>)
   b794c:	681b      	ldr	r3, [r3, #0]
   b794e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7950:	9301      	str	r3, [sp, #4]
   b7952:	bd08      	pop	{r3, pc}
   b7954:	0003021c 	.word	0x0003021c

000b7958 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7958:	b508      	push	{r3, lr}
   b795a:	4b02      	ldr	r3, [pc, #8]	; (b7964 <abort+0xc>)
   b795c:	681b      	ldr	r3, [r3, #0]
   b795e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7960:	9301      	str	r3, [sp, #4]
   b7962:	bd08      	pop	{r3, pc}
   b7964:	0003021c 	.word	0x0003021c

000b7968 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7968:	b508      	push	{r3, lr}
   b796a:	4b02      	ldr	r3, [pc, #8]	; (b7974 <_malloc_r+0xc>)
   b796c:	681b      	ldr	r3, [r3, #0]
   b796e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7970:	9301      	str	r3, [sp, #4]
   b7972:	bd08      	pop	{r3, pc}
   b7974:	0003021c 	.word	0x0003021c

000b7978 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7978:	b508      	push	{r3, lr}
   b797a:	4b02      	ldr	r3, [pc, #8]	; (b7984 <__errno+0xc>)
   b797c:	681b      	ldr	r3, [r3, #0]
   b797e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7980:	9301      	str	r3, [sp, #4]
   b7982:	bd08      	pop	{r3, pc}
   b7984:	0003021c 	.word	0x0003021c

000b7988 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7988:	b508      	push	{r3, lr}
   b798a:	4b02      	ldr	r3, [pc, #8]	; (b7994 <__assert_func+0xc>)
   b798c:	681b      	ldr	r3, [r3, #0]
   b798e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7990:	9301      	str	r3, [sp, #4]
   b7992:	bd08      	pop	{r3, pc}
   b7994:	0003021c 	.word	0x0003021c

000b7998 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7998:	b508      	push	{r3, lr}
   b799a:	4b02      	ldr	r3, [pc, #8]	; (b79a4 <newlib_impure_ptr_callback+0xc>)
   b799c:	681b      	ldr	r3, [r3, #0]
   b799e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b79a0:	9301      	str	r3, [sp, #4]
   b79a2:	bd08      	pop	{r3, pc}
   b79a4:	0003021c 	.word	0x0003021c

000b79a8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b79a8:	2100      	movs	r1, #0
   b79aa:	f7ff bf29 	b.w	b7800 <system_delay_ms>

000b79ae <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b79ae:	4770      	bx	lr

000b79b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b79b0:	4770      	bx	lr

000b79b2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b79b2:	4770      	bx	lr

000b79b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b79b4:	4770      	bx	lr
	...

000b79b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b79b8:	4b06      	ldr	r3, [pc, #24]	; (b79d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b79ba:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b79bc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b79be:	f100 040c 	add.w	r4, r0, #12
	    ||
   b79c2:	d005      	beq.n	b79d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b79c4:	4608      	mov	r0, r1
   b79c6:	f002 faf1 	bl	b9fac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b79ca:	2800      	cmp	r0, #0
   b79cc:	bf08      	it	eq
   b79ce:	2400      	moveq	r4, #0
      }
   b79d0:	4620      	mov	r0, r4
   b79d2:	bd10      	pop	{r4, pc}
   b79d4:	000bd690 	.word	0x000bd690

000b79d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b79d8:	4b06      	ldr	r3, [pc, #24]	; (b79f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b79da:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b79dc:	b510      	push	{r4, lr}
   b79de:	f100 040c 	add.w	r4, r0, #12
	    ||
   b79e2:	d005      	beq.n	b79f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b79e4:	4608      	mov	r0, r1
   b79e6:	f002 fae1 	bl	b9fac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b79ea:	2800      	cmp	r0, #0
   b79ec:	bf08      	it	eq
   b79ee:	2400      	moveq	r4, #0
      }
   b79f0:	4620      	mov	r0, r4
   b79f2:	bd10      	pop	{r4, pc}
   b79f4:	000bd690 	.word	0x000bd690

000b79f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b79f8:	4b06      	ldr	r3, [pc, #24]	; (b7a14 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b79fa:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b79fc:	b510      	push	{r4, lr}
   b79fe:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7a02:	d005      	beq.n	b7a10 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7a04:	4608      	mov	r0, r1
   b7a06:	f002 fad1 	bl	b9fac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7a0a:	2800      	cmp	r0, #0
   b7a0c:	bf08      	it	eq
   b7a0e:	2400      	moveq	r4, #0
      }
   b7a10:	4620      	mov	r0, r4
   b7a12:	bd10      	pop	{r4, pc}
   b7a14:	000bd690 	.word	0x000bd690

000b7a18 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7a18:	b510      	push	{r4, lr}
   b7a1a:	2168      	movs	r1, #104	; 0x68
   b7a1c:	4604      	mov	r4, r0
   b7a1e:	f7fc fb40 	bl	b40a2 <_ZdlPvj>
   b7a22:	4620      	mov	r0, r4
   b7a24:	bd10      	pop	{r4, pc}

000b7a26 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7a26:	b510      	push	{r4, lr}
   b7a28:	2128      	movs	r1, #40	; 0x28
   b7a2a:	4604      	mov	r4, r0
   b7a2c:	f7fc fb39 	bl	b40a2 <_ZdlPvj>
   b7a30:	4620      	mov	r0, r4
   b7a32:	bd10      	pop	{r4, pc}

000b7a34 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7a34:	b510      	push	{r4, lr}
   b7a36:	2130      	movs	r1, #48	; 0x30
   b7a38:	4604      	mov	r4, r0
   b7a3a:	f7fc fb32 	bl	b40a2 <_ZdlPvj>
   b7a3e:	4620      	mov	r0, r4
   b7a40:	bd10      	pop	{r4, pc}

000b7a42 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7a42:	2168      	movs	r1, #104	; 0x68
   b7a44:	f7fc bb2d 	b.w	b40a2 <_ZdlPvj>

000b7a48 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7a48:	2128      	movs	r1, #40	; 0x28
   b7a4a:	f7fc bb2a 	b.w	b40a2 <_ZdlPvj>

000b7a4e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7a4e:	2130      	movs	r1, #48	; 0x30
   b7a50:	f7fc bb27 	b.w	b40a2 <_ZdlPvj>

000b7a54 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b7a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7a56:	2500      	movs	r5, #0
   b7a58:	1cec      	adds	r4, r5, #3
   b7a5a:	428c      	cmp	r4, r1
   b7a5c:	d80d      	bhi.n	b7a7a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b7a5e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b7a60:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b7a62:	5d87      	ldrb	r7, [r0, r6]
   b7a64:	4297      	cmp	r7, r2
   b7a66:	d105      	bne.n	b7a74 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b7a68:	4426      	add	r6, r4
   b7a6a:	42b1      	cmp	r1, r6
   b7a6c:	d305      	bcc.n	b7a7a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b7a6e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b7a70:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b7a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b7a74:	3401      	adds	r4, #1
   b7a76:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7a78:	e7ee      	b.n	b7a58 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b7a7a:	2000      	movs	r0, #0
   b7a7c:	e7f9      	b.n	b7a72 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b7a80 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b7a80:	4a02      	ldr	r2, [pc, #8]	; (b7a8c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b7a82:	4903      	ldr	r1, [pc, #12]	; (b7a90 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b7a84:	200a      	movs	r0, #10
   b7a86:	f7ff bea3 	b.w	b77d0 <panic_>
   b7a8a:	bf00      	nop
   b7a8c:	000b7561 	.word	0x000b7561
   b7a90:	000bd4f0 	.word	0x000bd4f0

000b7a94 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7a94:	b430      	push	{r4, r5}
   b7a96:	460d      	mov	r5, r1
   b7a98:	4611      	mov	r1, r2
   b7a9a:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b7a9c:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b7a9e:	6809      	ldr	r1, [r1, #0]
   b7aa0:	6828      	ldr	r0, [r5, #0]
   b7aa2:	e9d3 4300 	ldrd	r4, r3, [r3]
   b7aa6:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b7aa8:	bc30      	pop	{r4, r5}
   b7aaa:	4760      	bx	ip

000b7aac <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b7aac:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7aae:	b538      	push	{r3, r4, r5, lr}
   b7ab0:	4604      	mov	r4, r0
	switch (__op)
   b7ab2:	d102      	bne.n	b7aba <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b7ab4:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b7ab6:	6023      	str	r3, [r4, #0]
	}
   b7ab8:	e003      	b.n	b7ac2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b7aba:	2a02      	cmp	r2, #2
   b7abc:	d003      	beq.n	b7ac6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b7abe:	2a03      	cmp	r2, #3
   b7ac0:	d00d      	beq.n	b7ade <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b7ac2:	2000      	movs	r0, #0
   b7ac4:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b7ac6:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b7ac8:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7aca:	f7fc fae4 	bl	b4096 <_Znwj>
   b7ace:	4603      	mov	r3, r0
   b7ad0:	2800      	cmp	r0, #0
   b7ad2:	d0f0      	beq.n	b7ab6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b7ad4:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7ad8:	e883 0003 	stmia.w	r3, {r0, r1}
   b7adc:	e7eb      	b.n	b7ab6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b7ade:	6800      	ldr	r0, [r0, #0]
   b7ae0:	2800      	cmp	r0, #0
   b7ae2:	d0ee      	beq.n	b7ac2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b7ae4:	2108      	movs	r1, #8
   b7ae6:	f7fc fadc 	bl	b40a2 <_ZdlPvj>
   b7aea:	e7ea      	b.n	b7ac2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b7aec <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b7aec:	b510      	push	{r4, lr}
      if (_M_manager)
   b7aee:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b7af0:	4604      	mov	r4, r0
      if (_M_manager)
   b7af2:	b113      	cbz	r3, b7afa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7af4:	2203      	movs	r2, #3
   b7af6:	4601      	mov	r1, r0
   b7af8:	4798      	blx	r3
    }
   b7afa:	4620      	mov	r0, r4
   b7afc:	bd10      	pop	{r4, pc}

000b7afe <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7afe:	b510      	push	{r4, lr}
   b7b00:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b7b02:	3058      	adds	r0, #88	; 0x58
   b7b04:	f7ff fff2 	bl	b7aec <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b7b08:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b7b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7b10:	f001 bb98 	b.w	b9244 <_ZN6StringD1Ev>

000b7b14 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b7b14:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b7b16:	6843      	ldr	r3, [r0, #4]
   b7b18:	3b01      	subs	r3, #1
    {
   b7b1a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b7b1c:	6043      	str	r3, [r0, #4]
   b7b1e:	b963      	cbnz	r3, b7b3a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b7b20:	6803      	ldr	r3, [r0, #0]
   b7b22:	689b      	ldr	r3, [r3, #8]
   b7b24:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7b26:	68a3      	ldr	r3, [r4, #8]
   b7b28:	3b01      	subs	r3, #1
   b7b2a:	60a3      	str	r3, [r4, #8]
   b7b2c:	b92b      	cbnz	r3, b7b3a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b7b2e:	6823      	ldr	r3, [r4, #0]
   b7b30:	4620      	mov	r0, r4
   b7b32:	68db      	ldr	r3, [r3, #12]
    }
   b7b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b7b38:	4718      	bx	r3
    }
   b7b3a:	bd10      	pop	{r4, pc}

000b7b3c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b7b3c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7b40:	b2da      	uxtb	r2, r3
   b7b42:	2a09      	cmp	r2, #9
   b7b44:	d801      	bhi.n	b7b4a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b7b46:	4618      	mov	r0, r3
   b7b48:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b7b4a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b7b4e:	2b05      	cmp	r3, #5
   b7b50:	d801      	bhi.n	b7b56 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b7b52:	3857      	subs	r0, #87	; 0x57
   b7b54:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b7b56:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b7b5a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b7b5c:	bf94      	ite	ls
   b7b5e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b7b60:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b7b64:	4770      	bx	lr
	...

000b7b68 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b7b68:	b510      	push	{r4, lr}
            locked_(false) {
   b7b6a:	2300      	movs	r3, #0
   b7b6c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b7b6e:	4b04      	ldr	r3, [pc, #16]	; (b7b80 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b7b70:	4604      	mov	r4, r0
   b7b72:	6818      	ldr	r0, [r3, #0]
   b7b74:	f7ff fcdc 	bl	b7530 <os_mutex_recursive_lock>
        locked_ = true;
   b7b78:	2301      	movs	r3, #1
   b7b7a:	7023      	strb	r3, [r4, #0]
    }
   b7b7c:	4620      	mov	r0, r4
   b7b7e:	bd10      	pop	{r4, pc}
   b7b80:	2003e6c0 	.word	0x2003e6c0

000b7b84 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b7b84:	b510      	push	{r4, lr}
        if (locked_) {
   b7b86:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b7b88:	4604      	mov	r4, r0
        if (locked_) {
   b7b8a:	b11b      	cbz	r3, b7b94 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7b8c:	4b02      	ldr	r3, [pc, #8]	; (b7b98 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b7b8e:	6818      	ldr	r0, [r3, #0]
   b7b90:	f7ff fcd6 	bl	b7540 <os_mutex_recursive_unlock>
    }
   b7b94:	4620      	mov	r0, r4
   b7b96:	bd10      	pop	{r4, pc}
   b7b98:	2003e6c0 	.word	0x2003e6c0

000b7b9c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b7b9c:	b082      	sub	sp, #8
   b7b9e:	4603      	mov	r3, r0
    address_ = addr;
   b7ba0:	6808      	ldr	r0, [r1, #0]
   b7ba2:	6849      	ldr	r1, [r1, #4]
   b7ba4:	466a      	mov	r2, sp
   b7ba6:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b7ba8:	466a      	mov	r2, sp
   b7baa:	ca03      	ldmia	r2!, {r0, r1}
   b7bac:	6018      	str	r0, [r3, #0]
}
   b7bae:	4618      	mov	r0, r3
    address_ = addr.address_;
   b7bb0:	6059      	str	r1, [r3, #4]
}
   b7bb2:	b002      	add	sp, #8
   b7bb4:	4770      	bx	lr

000b7bb6 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b7bb6:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b7bb8:	7982      	ldrb	r2, [r0, #6]
   b7bba:	798b      	ldrb	r3, [r1, #6]
   b7bbc:	429a      	cmp	r2, r3
   b7bbe:	d106      	bne.n	b7bce <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b7bc0:	2206      	movs	r2, #6
   b7bc2:	f003 f9ee 	bl	bafa2 <memcmp>
   b7bc6:	fab0 f080 	clz	r0, r0
   b7bca:	0940      	lsrs	r0, r0, #5
}
   b7bcc:	bd08      	pop	{r3, pc}
    return false;
   b7bce:	2000      	movs	r0, #0
   b7bd0:	e7fc      	b.n	b7bcc <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b7bd2 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b7bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7bd6:	6003      	str	r3, [r0, #0]
   b7bd8:	8083      	strh	r3, [r0, #4]
}
   b7bda:	2000      	movs	r0, #0
   b7bdc:	4770      	bx	lr

000b7bde <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b7bde:	b508      	push	{r3, lr}
   b7be0:	4602      	mov	r2, r0
        : address_{} {
   b7be2:	2100      	movs	r1, #0
   b7be4:	6001      	str	r1, [r0, #0]
   b7be6:	6041      	str	r1, [r0, #4]
    clear();
   b7be8:	f7ff fff3 	bl	b7bd2 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b7bec:	7191      	strb	r1, [r2, #6]
}
   b7bee:	4610      	mov	r0, r2
   b7bf0:	bd08      	pop	{r3, pc}
	...

000b7bf4 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b7bf4:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b7bf6:	2301      	movs	r3, #1
   b7bf8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7bfa:	4b05      	ldr	r3, [pc, #20]	; (b7c10 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b7bfc:	4602      	mov	r2, r0
   b7bfe:	f103 0110 	add.w	r1, r3, #16
   b7c02:	f853 4b04 	ldr.w	r4, [r3], #4
   b7c06:	f842 4b04 	str.w	r4, [r2], #4
   b7c0a:	428b      	cmp	r3, r1
   b7c0c:	d1f9      	bne.n	b7c02 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b7c0e:	bd10      	pop	{r4, pc}
   b7c10:	000bd69e 	.word	0x000bd69e

000b7c14 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7c14:	b510      	push	{r4, lr}
    if (uuid128) {
   b7c16:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7c18:	4604      	mov	r4, r0
    if (uuid128) {
   b7c1a:	b1b1      	cbz	r1, b7c4a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b7c1c:	2a01      	cmp	r2, #1
   b7c1e:	f101 0210 	add.w	r2, r1, #16
   b7c22:	d10a      	bne.n	b7c3a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7c24:	4601      	mov	r1, r0
   b7c26:	f853 0b04 	ldr.w	r0, [r3], #4
   b7c2a:	f841 0b04 	str.w	r0, [r1], #4
   b7c2e:	4293      	cmp	r3, r2
   b7c30:	d1f9      	bne.n	b7c26 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b7c32:	2301      	movs	r3, #1
   b7c34:	6123      	str	r3, [r4, #16]
}
   b7c36:	4620      	mov	r0, r4
   b7c38:	bd10      	pop	{r4, pc}
   b7c3a:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b7c3c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b7c40:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b7c44:	429a      	cmp	r2, r3
   b7c46:	d1f9      	bne.n	b7c3c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b7c48:	e7f3      	b.n	b7c32 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b7c4a:	2210      	movs	r2, #16
   b7c4c:	f003 f9e1 	bl	bb012 <memset>
   b7c50:	e7f1      	b.n	b7c36 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b7c52 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b7c52:	b538      	push	{r3, r4, r5, lr}
   b7c54:	4604      	mov	r4, r0
   b7c56:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b7c58:	461a      	mov	r2, r3
   b7c5a:	f7ff ffdb 	bl	b7c14 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b7c5e:	81a5      	strh	r5, [r4, #12]
}
   b7c60:	4620      	mov	r0, r4
   b7c62:	bd38      	pop	{r3, r4, r5, pc}

000b7c64 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b7c64:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b7c66:	6902      	ldr	r2, [r0, #16]
   b7c68:	b922      	cbnz	r2, b7c74 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b7c6a:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7c6c:	3800      	subs	r0, #0
   b7c6e:	bf18      	it	ne
   b7c70:	2001      	movne	r0, #1
}
   b7c72:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7c74:	4902      	ldr	r1, [pc, #8]	; (b7c80 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b7c76:	2210      	movs	r2, #16
   b7c78:	f003 f993 	bl	bafa2 <memcmp>
   b7c7c:	e7f6      	b.n	b7c6c <_ZNK8particle7BleUuid7isValidEv+0x8>
   b7c7e:	bf00      	nop
   b7c80:	000bd6be 	.word	0x000bd6be

000b7c84 <_ZNK8particle7BleUuid4typeEv>:
}
   b7c84:	6900      	ldr	r0, [r0, #16]
   b7c86:	4770      	bx	lr

000b7c88 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b7c88:	b538      	push	{r3, r4, r5, lr}
   b7c8a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b7c8c:	2214      	movs	r2, #20
   b7c8e:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b7c90:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b7c92:	f003 f9be 	bl	bb012 <memset>
    if (type_ == BleUuidType::SHORT) {
   b7c96:	6923      	ldr	r3, [r4, #16]
   b7c98:	b91b      	cbnz	r3, b7ca2 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b7c9a:	89a3      	ldrh	r3, [r4, #12]
   b7c9c:	802b      	strh	r3, [r5, #0]
}
   b7c9e:	4628      	mov	r0, r5
   b7ca0:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b7ca2:	2301      	movs	r3, #1
   b7ca4:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b7ca6:	4621      	mov	r1, r4
   b7ca8:	462b      	mov	r3, r5
   b7caa:	f104 0210 	add.w	r2, r4, #16
   b7cae:	f851 0b04 	ldr.w	r0, [r1], #4
   b7cb2:	f843 0b04 	str.w	r0, [r3], #4
   b7cb6:	4291      	cmp	r1, r2
   b7cb8:	d1f9      	bne.n	b7cae <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b7cba:	e7f0      	b.n	b7c9e <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b7cbc <_ZNK8particle7BleUuid7shortedEv>:
}
   b7cbc:	8980      	ldrh	r0, [r0, #12]
   b7cbe:	4770      	bx	lr

000b7cc0 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b7cc0:	4770      	bx	lr

000b7cc2 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b7cc2:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7cc4:	6902      	ldr	r2, [r0, #16]
   b7cc6:	690b      	ldr	r3, [r1, #16]
   b7cc8:	429a      	cmp	r2, r3
   b7cca:	d106      	bne.n	b7cda <_ZNK8particle7BleUuideqERKS0_+0x18>
   b7ccc:	2210      	movs	r2, #16
   b7cce:	f003 f968 	bl	bafa2 <memcmp>
   b7cd2:	fab0 f080 	clz	r0, r0
   b7cd6:	0940      	lsrs	r0, r0, #5
}
   b7cd8:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7cda:	2000      	movs	r0, #0
   b7cdc:	e7fc      	b.n	b7cd8 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b7ce0 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b7ce0:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b7ce2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b7ce6:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7ce8:	4b34      	ldr	r3, [pc, #208]	; (b7dbc <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b7cea:	460c      	mov	r4, r1
   b7cec:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7cee:	4602      	mov	r2, r0
   b7cf0:	f103 0110 	add.w	r1, r3, #16
   b7cf4:	f853 0b04 	ldr.w	r0, [r3], #4
   b7cf8:	f842 0b04 	str.w	r0, [r2], #4
   b7cfc:	428b      	cmp	r3, r1
   b7cfe:	d1f9      	bne.n	b7cf4 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b7d00:	b344      	cbz	r4, b7d54 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b7d02:	2124      	movs	r1, #36	; 0x24
   b7d04:	4620      	mov	r0, r4
   b7d06:	f003 f9e9 	bl	bb0dc <strnlen>
   b7d0a:	2804      	cmp	r0, #4
   b7d0c:	f04f 0500 	mov.w	r5, #0
   b7d10:	d123      	bne.n	b7d5a <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b7d12:	f8ad 5004 	strh.w	r5, [sp, #4]
   b7d16:	af01      	add	r7, sp, #4
   b7d18:	1ca5      	adds	r5, r4, #2
   b7d1a:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b7d1c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b7d20:	f7ff ff0c 	bl	b7b3c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b7d24:	f1b0 0800 	subs.w	r8, r0, #0
   b7d28:	db12      	blt.n	b7d50 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b7d2a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b7d2e:	f7ff ff05 	bl	b7b3c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b7d32:	2800      	cmp	r0, #0
   b7d34:	db0c      	blt.n	b7d50 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b7d36:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7d38:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b7d3c:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7d3e:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b7d42:	d1eb      	bne.n	b7d1c <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b7d44:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b7d48:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b7d4a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7d4e:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b7d50:	2300      	movs	r3, #0
   b7d52:	6133      	str	r3, [r6, #16]
}
   b7d54:	b002      	add	sp, #8
   b7d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b7d5a:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7d5e:	2124      	movs	r1, #36	; 0x24
   b7d60:	4620      	mov	r0, r4
   b7d62:	f003 f9bb 	bl	bb0dc <strnlen>
   b7d66:	42a8      	cmp	r0, r5
   b7d68:	d807      	bhi.n	b7d7a <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b7d6a:	4642      	mov	r2, r8
   b7d6c:	2100      	movs	r1, #0
   b7d6e:	4630      	mov	r0, r6
}
   b7d70:	b002      	add	sp, #8
   b7d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b7d76:	f003 b94c 	b.w	bb012 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7d7a:	f1b8 0f00 	cmp.w	r8, #0
   b7d7e:	d0e9      	beq.n	b7d54 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b7d80:	5d60      	ldrb	r0, [r4, r5]
   b7d82:	f7ff fedb 	bl	b7b3c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b7d86:	0603      	lsls	r3, r0, #24
   b7d88:	d415      	bmi.n	b7db6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b7d8a:	0100      	lsls	r0, r0, #4
   b7d8c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7d90:	b2c7      	uxtb	r7, r0
   b7d92:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b7d96:	2124      	movs	r1, #36	; 0x24
   b7d98:	4620      	mov	r0, r4
   b7d9a:	f003 f99f 	bl	bb0dc <strnlen>
   b7d9e:	3501      	adds	r5, #1
   b7da0:	42a8      	cmp	r0, r5
   b7da2:	d908      	bls.n	b7db6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b7da4:	5d60      	ldrb	r0, [r4, r5]
   b7da6:	f7ff fec9 	bl	b7b3c <_ZN8particle11hexToNibbleEc>
   b7daa:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b7dac:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b7dae:	bfa4      	itt	ge
   b7db0:	4338      	orrge	r0, r7
   b7db2:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7db6:	3501      	adds	r5, #1
   b7db8:	e7d1      	b.n	b7d5e <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b7dba:	bf00      	nop
   b7dbc:	000bd69e 	.word	0x000bd69e

000b7dc0 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b7dc0:	b513      	push	{r0, r1, r4, lr}
   b7dc2:	4604      	mov	r4, r0
   b7dc4:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b7dc6:	f7ff ff15 	bl	b7bf4 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b7dca:	4620      	mov	r0, r4
   b7dcc:	9901      	ldr	r1, [sp, #4]
   b7dce:	f7ff ff87 	bl	b7ce0 <_ZN8particle7BleUuid9constructEPKc>
}
   b7dd2:	4620      	mov	r0, r4
   b7dd4:	b002      	add	sp, #8
   b7dd6:	bd10      	pop	{r4, pc}

000b7dd8 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b7dd8:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b7dda:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7dde:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b7de0:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b7de2:	8043      	strh	r3, [r0, #2]
   b7de4:	220e      	movs	r2, #14
   b7de6:	4629      	mov	r1, r5
   b7de8:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b7dea:	7105      	strb	r5, [r0, #4]
   b7dec:	3006      	adds	r0, #6
   b7dee:	f003 f910 	bl	bb012 <memset>
   b7df2:	f104 0014 	add.w	r0, r4, #20
   b7df6:	f7ff fefd 	bl	b7bf4 <_ZN8particle7BleUuidC1Ev>
   b7dfa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b7dfe:	f7ff fef9 	bl	b7bf4 <_ZN8particle7BleUuidC1Ev>
   b7e02:	4904      	ldr	r1, [pc, #16]	; (b7e14 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b7e04:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7e08:	f001 fa67 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b7e0c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b7e0e:	4620      	mov	r0, r4
   b7e10:	bd38      	pop	{r3, r4, r5, pc}
   b7e12:	bf00      	nop
   b7e14:	000bd4ba 	.word	0x000bd4ba

000b7e18 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b7e18:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b7e1a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b7e1e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b7e22:	4293      	cmp	r3, r2
   b7e24:	4618      	mov	r0, r3
   b7e26:	d006      	beq.n	b7e36 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b7e28:	6804      	ldr	r4, [r0, #0]
   b7e2a:	8824      	ldrh	r4, [r4, #0]
   b7e2c:	428c      	cmp	r4, r1
   b7e2e:	f103 0308 	add.w	r3, r3, #8
   b7e32:	d1f6      	bne.n	b7e22 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b7e34:	bd10      	pop	{r4, pc}
        return nullptr;
   b7e36:	2000      	movs	r0, #0
   b7e38:	e7fc      	b.n	b7e34 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b7e3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b7e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7e3e:	4606      	mov	r6, r0
   b7e40:	b085      	sub	sp, #20
   b7e42:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b7e44:	460d      	mov	r5, r1
   b7e46:	2900      	cmp	r1, #0
   b7e48:	d050      	beq.n	b7eec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b7e4a:	2a00      	cmp	r2, #0
   b7e4c:	d04e      	beq.n	b7eec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7e4e:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b7e50:	7823      	ldrb	r3, [r4, #0]
   b7e52:	2af4      	cmp	r2, #244	; 0xf4
   b7e54:	bf28      	it	cs
   b7e56:	22f4      	movcs	r2, #244	; 0xf4
   b7e58:	b343      	cbz	r3, b7eac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b7e5a:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b7e5c:	0798      	lsls	r0, r3, #30
   b7e5e:	d509      	bpl.n	b7e74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b7e60:	89a0      	ldrh	r0, [r4, #12]
   b7e62:	9203      	str	r2, [sp, #12]
   b7e64:	2300      	movs	r3, #0
   b7e66:	f7ff fb15 	bl	b7494 <hal_ble_gatt_server_set_characteristic_value>
   b7e6a:	2800      	cmp	r0, #0
   b7e6c:	9a03      	ldr	r2, [sp, #12]
   b7e6e:	da03      	bge.n	b7e78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b7e70:	b005      	add	sp, #20
   b7e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b7e74:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7e78:	6834      	ldr	r4, [r6, #0]
   b7e7a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b7e7c:	06d9      	lsls	r1, r3, #27
   b7e7e:	d509      	bpl.n	b7e94 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b7e80:	2f01      	cmp	r7, #1
   b7e82:	d007      	beq.n	b7e94 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7e84:	89a0      	ldrh	r0, [r4, #12]
   b7e86:	2300      	movs	r3, #0
   b7e88:	4629      	mov	r1, r5
}
   b7e8a:	b005      	add	sp, #20
   b7e8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7e90:	f7ff bb32 	b.w	b74f8 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b7e94:	069b      	lsls	r3, r3, #26
   b7e96:	d5eb      	bpl.n	b7e70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7e98:	2f02      	cmp	r7, #2
   b7e9a:	d0e9      	beq.n	b7e70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7e9c:	89a0      	ldrh	r0, [r4, #12]
   b7e9e:	2300      	movs	r3, #0
   b7ea0:	4629      	mov	r1, r5
}
   b7ea2:	b005      	add	sp, #20
   b7ea4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7ea8:	f7ff bb30 	b.w	b750c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b7eac:	8860      	ldrh	r0, [r4, #2]
   b7eae:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7eb2:	4288      	cmp	r0, r1
   b7eb4:	d01c      	beq.n	b7ef0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b7eb6:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b7eb8:	074e      	lsls	r6, r1, #29
   b7eba:	d501      	bpl.n	b7ec0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b7ebc:	2f01      	cmp	r7, #1
   b7ebe:	d104      	bne.n	b7eca <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7ec0:	070b      	lsls	r3, r1, #28
   b7ec2:	d409      	bmi.n	b7ed8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b7ec4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7ec8:	e7d2      	b.n	b7e70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7eca:	89a1      	ldrh	r1, [r4, #12]
   b7ecc:	9300      	str	r3, [sp, #0]
   b7ece:	4613      	mov	r3, r2
   b7ed0:	462a      	mov	r2, r5
   b7ed2:	f7ff faf3 	bl	b74bc <hal_ble_gatt_client_write_without_response>
   b7ed6:	e7cb      	b.n	b7e70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7ed8:	2f02      	cmp	r7, #2
   b7eda:	d0f3      	beq.n	b7ec4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7edc:	2300      	movs	r3, #0
   b7ede:	89a1      	ldrh	r1, [r4, #12]
   b7ee0:	9300      	str	r3, [sp, #0]
   b7ee2:	4613      	mov	r3, r2
   b7ee4:	462a      	mov	r2, r5
   b7ee6:	f7ff fadf 	bl	b74a8 <hal_ble_gatt_client_write_with_response>
   b7eea:	e7c1      	b.n	b7e70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b7eec:	4802      	ldr	r0, [pc, #8]	; (b7ef8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b7eee:	e7bf      	b.n	b7e70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b7ef0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7ef4:	e7bc      	b.n	b7e70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7ef6:	bf00      	nop
   b7ef8:	fffffef2 	.word	0xfffffef2

000b7efc <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b7efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7efe:	460c      	mov	r4, r1
   b7f00:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b7f02:	21f4      	movs	r1, #244	; 0xf4
   b7f04:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   b7f06:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b7f08:	f003 f8e8 	bl	bb0dc <strnlen>
   b7f0c:	9b01      	ldr	r3, [sp, #4]
   b7f0e:	4602      	mov	r2, r0
   b7f10:	4621      	mov	r1, r4
   b7f12:	4628      	mov	r0, r5
}
   b7f14:	b003      	add	sp, #12
   b7f16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   b7f1a:	f7ff bf8f 	b.w	b7e3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b7f20 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b7f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7f24:	2600      	movs	r6, #0
   b7f26:	6006      	str	r6, [r0, #0]
   b7f28:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7f2a:	2028      	movs	r0, #40	; 0x28
   b7f2c:	460c      	mov	r4, r1
   b7f2e:	f7fc f8b2 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7f32:	1e05      	subs	r5, r0, #0
   b7f34:	f105 080c 	add.w	r8, r5, #12
   b7f38:	d00f      	beq.n	b7f5a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b7f3a:	2301      	movs	r3, #1
   b7f3c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7f40:	4b08      	ldr	r3, [pc, #32]	; (b7f64 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b7f42:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b7f44:	4640      	mov	r0, r8
   b7f46:	f7ff fe55 	bl	b7bf4 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b7f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b7f4c:	622e      	str	r6, [r5, #32]
   b7f4e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b7f52:	4646      	mov	r6, r8
   b7f54:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b7f56:	6823      	ldr	r3, [r4, #0]
   b7f58:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b7f5a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b7f5e:	4638      	mov	r0, r7
   b7f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7f64:	000bd660 	.word	0x000bd660

000b7f68 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b7f68:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7f6a:	2500      	movs	r5, #0
   b7f6c:	6005      	str	r5, [r0, #0]
   b7f6e:	4606      	mov	r6, r0
   b7f70:	2030      	movs	r0, #48	; 0x30
   b7f72:	f7fc f890 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7f76:	4604      	mov	r4, r0
   b7f78:	b188      	cbz	r0, b7f9e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b7f7a:	2301      	movs	r3, #1
   b7f7c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b7f80:	4b09      	ldr	r3, [pc, #36]	; (b7fa8 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b7f82:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b7f84:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7f88:	8183      	strh	r3, [r0, #12]
   b7f8a:	300e      	adds	r0, #14
   b7f8c:	f7ff fe27 	bl	b7bde <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b7f90:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b7f94:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b7f98:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b7f9c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b7f9e:	6074      	str	r4, [r6, #4]
   b7fa0:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b7fa2:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b7fa4:	4630      	mov	r0, r6
   b7fa6:	bd70      	pop	{r4, r5, r6, pc}
   b7fa8:	000bd67c 	.word	0x000bd67c

000b7fac <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b7fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7fae:	460d      	mov	r5, r1
   b7fb0:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7fb2:	a801      	add	r0, sp, #4
   b7fb4:	f7ff fdd8 	bl	b7b68 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7fb8:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b7fba:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b7fbe:	6023      	str	r3, [r4, #0]
   b7fc0:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b7fc4:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b7fc6:	a801      	add	r0, sp, #4
   b7fc8:	f7ff fddc 	bl	b7b84 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b7fcc:	4620      	mov	r0, r4
   b7fce:	b003      	add	sp, #12
   b7fd0:	bd30      	pop	{r4, r5, pc}

000b7fd2 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b7fd2:	b530      	push	{r4, r5, lr}
   b7fd4:	4605      	mov	r5, r0
   b7fd6:	b087      	sub	sp, #28
   b7fd8:	460c      	mov	r4, r1
    WiringBleLock lk;
   b7fda:	a801      	add	r0, sp, #4
   b7fdc:	f7ff fdc4 	bl	b7b68 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b7fe0:	682a      	ldr	r2, [r5, #0]
   b7fe2:	6823      	ldr	r3, [r4, #0]
   b7fe4:	8812      	ldrh	r2, [r2, #0]
   b7fe6:	881b      	ldrh	r3, [r3, #0]
   b7fe8:	429a      	cmp	r2, r3
   b7fea:	d10d      	bne.n	b8008 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b7fec:	4629      	mov	r1, r5
   b7fee:	a802      	add	r0, sp, #8
   b7ff0:	f7ff ffdc 	bl	b7fac <_ZNK8particle13BlePeerDevice7addressEv>
   b7ff4:	4621      	mov	r1, r4
   b7ff6:	a804      	add	r0, sp, #16
   b7ff8:	f7ff ffd8 	bl	b7fac <_ZNK8particle13BlePeerDevice7addressEv>
   b7ffc:	a904      	add	r1, sp, #16
   b7ffe:	a802      	add	r0, sp, #8
   b8000:	f7ff fdd9 	bl	b7bb6 <_ZNK8particle10BleAddresseqERKS0_>
   b8004:	4604      	mov	r4, r0
   b8006:	b900      	cbnz	r0, b800a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b8008:	2400      	movs	r4, #0
    WiringBleLock lk;
   b800a:	a801      	add	r0, sp, #4
   b800c:	f7ff fdba 	bl	b7b84 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b8010:	4620      	mov	r0, r4
   b8012:	b007      	add	sp, #28
   b8014:	bd30      	pop	{r4, r5, pc}
	...

000b8018 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b8018:	b510      	push	{r4, lr}
   b801a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b801c:	2064      	movs	r0, #100	; 0x64
   b801e:	f7fc f83a 	bl	b4096 <_Znwj>
   b8022:	b168      	cbz	r0, b8040 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b8024:	2300      	movs	r3, #0
   b8026:	e9c0 3300 	strd	r3, r3, [r0]
   b802a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b802e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b8032:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b8036:	6203      	str	r3, [r0, #32]
   b8038:	62c3      	str	r3, [r0, #44]	; 0x2c
   b803a:	63c3      	str	r3, [r0, #60]	; 0x3c
   b803c:	64c3      	str	r3, [r0, #76]	; 0x4c
   b803e:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b8040:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b8042:	b920      	cbnz	r0, b804e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b8044:	4a0a      	ldr	r2, [pc, #40]	; (b8070 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b8046:	490b      	ldr	r1, [pc, #44]	; (b8074 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b8048:	200a      	movs	r0, #10
   b804a:	f7ff fbc1 	bl	b77d0 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b804e:	2000      	movs	r0, #0
   b8050:	f7ff f9ec 	bl	b742c <hal_ble_stack_init>
   b8054:	b120      	cbz	r0, b8060 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b8056:	4a06      	ldr	r2, [pc, #24]	; (b8070 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b8058:	4907      	ldr	r1, [pc, #28]	; (b8078 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b805a:	200a      	movs	r0, #10
   b805c:	f7ff fbb8 	bl	b77d0 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b8060:	6821      	ldr	r1, [r4, #0]
   b8062:	4806      	ldr	r0, [pc, #24]	; (b807c <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b8064:	2200      	movs	r2, #0
   b8066:	f7ff fa3d 	bl	b74e4 <hal_ble_set_callback_on_periph_link_events>
}
   b806a:	4620      	mov	r0, r4
   b806c:	bd10      	pop	{r4, pc}
   b806e:	bf00      	nop
   b8070:	000b7561 	.word	0x000b7561
   b8074:	000bd4f0 	.word	0x000bd4f0
   b8078:	000bd52e 	.word	0x000bd52e
   b807c:	000b8601 	.word	0x000b8601

000b8080 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b8080:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b8082:	4c0a      	ldr	r4, [pc, #40]	; (b80ac <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b8084:	7823      	ldrb	r3, [r4, #0]
   b8086:	f3bf 8f5b 	dmb	ish
   b808a:	07db      	lsls	r3, r3, #31
   b808c:	d40c      	bmi.n	b80a8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b808e:	4620      	mov	r0, r4
   b8090:	f7fc f809 	bl	b40a6 <__cxa_guard_acquire>
   b8094:	b140      	cbz	r0, b80a8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b8096:	4806      	ldr	r0, [pc, #24]	; (b80b0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b8098:	f7ff ffbe 	bl	b8018 <_ZN8particle14BleLocalDeviceC1Ev>
   b809c:	4620      	mov	r0, r4
   b809e:	f7fc f807 	bl	b40b0 <__cxa_guard_release>
   b80a2:	4804      	ldr	r0, [pc, #16]	; (b80b4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b80a4:	f002 ff6c 	bl	baf80 <atexit>
    return instance;
}
   b80a8:	4801      	ldr	r0, [pc, #4]	; (b80b0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b80aa:	bd10      	pop	{r4, pc}
   b80ac:	2003e6b8 	.word	0x2003e6b8
   b80b0:	2003e6c4 	.word	0x2003e6c4
   b80b4:	000b82cd 	.word	0x000b82cd

000b80b8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b80b8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b80ba:	6803      	ldr	r3, [r0, #0]
   b80bc:	3b09      	subs	r3, #9
   b80be:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b80c0:	b08d      	sub	sp, #52	; 0x34
   b80c2:	4604      	mov	r4, r0
   b80c4:	460d      	mov	r5, r1
    switch (event->type) {
   b80c6:	d811      	bhi.n	b80ec <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b80c8:	f7ff ffda 	bl	b8080 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b80cc:	88a1      	ldrh	r1, [r4, #4]
   b80ce:	6800      	ldr	r0, [r0, #0]
   b80d0:	f7ff fea2 	bl	b7e18 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b80d4:	4603      	mov	r3, r0
   b80d6:	b958      	cbnz	r0, b80f0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b80d8:	2220      	movs	r2, #32
   b80da:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b80de:	4a0b      	ldr	r2, [pc, #44]	; (b810c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b80e0:	9200      	str	r2, [sp, #0]
   b80e2:	490b      	ldr	r1, [pc, #44]	; (b8110 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b80e4:	aa04      	add	r2, sp, #16
   b80e6:	2032      	movs	r0, #50	; 0x32
   b80e8:	f7ff fb7a 	bl	b77e0 <log_message>
}
   b80ec:	b00d      	add	sp, #52	; 0x34
   b80ee:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b80f0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b80f2:	2a00      	cmp	r2, #0
   b80f4:	d0fa      	beq.n	b80ec <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b80f6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b80fa:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b80fe:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b8102:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b8104:	aa04      	add	r2, sp, #16
   b8106:	a903      	add	r1, sp, #12
   b8108:	47a0      	blx	r4
}
   b810a:	e7ef      	b.n	b80ec <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b810c:	000bd570 	.word	0x000bd570
   b8110:	000bd507 	.word	0x000bd507

000b8114 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b8114:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b8116:	2000      	movs	r0, #0
   b8118:	f7ff f988 	bl	b742c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b811c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b8120:	bd08      	pop	{r3, pc}

000b8122 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b8122:	b919      	cbnz	r1, b812c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b8124:	460a      	mov	r2, r1
   b8126:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b8128:	f7ff b988 	b.w	b743c <hal_ble_gap_set_advertising_data>
   b812c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8130:	2200      	movs	r2, #0
   b8132:	e7f9      	b.n	b8128 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b8134 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8134:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b8136:	1e14      	subs	r4, r2, #0
   b8138:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b813a:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b813c:	db02      	blt.n	b8144 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b813e:	1862      	adds	r2, r4, r1
   b8140:	429a      	cmp	r2, r3
   b8142:	dd00      	ble.n	b8146 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b8144:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b8146:	682a      	ldr	r2, [r5, #0]
   b8148:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b814a:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b814c:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b814e:	1a52      	subs	r2, r2, r1
   b8150:	f002 ff45 	bl	bafde <memmove>
    size_ -= n;
   b8154:	686a      	ldr	r2, [r5, #4]
   b8156:	1b12      	subs	r2, r2, r4
   b8158:	606a      	str	r2, [r5, #4]
}
   b815a:	bd38      	pop	{r3, r4, r5, pc}

000b815c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b815c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b815e:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b8160:	4604      	mov	r4, r0
   b8162:	460d      	mov	r5, r1
   b8164:	ab01      	add	r3, sp, #4
   b8166:	e9d0 0100 	ldrd	r0, r1, [r0]
   b816a:	f7ff fc73 	bl	b7a54 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b816e:	4602      	mov	r2, r0
   b8170:	b138      	cbz	r0, b8182 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b8172:	9901      	ldr	r1, [sp, #4]
   b8174:	4620      	mov	r0, r4
   b8176:	f7ff ffdd 	bl	b8134 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b817a:	4629      	mov	r1, r5
   b817c:	4620      	mov	r0, r4
   b817e:	f7ff ffed 	bl	b815c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b8182:	b003      	add	sp, #12
   b8184:	bd30      	pop	{r4, r5, pc}

000b8186 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b8186:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b8188:	460c      	mov	r4, r1
   b818a:	b929      	cbnz	r1, b8198 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b818c:	460a      	mov	r2, r1
   b818e:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b8190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b8194:	f7ff b95a 	b.w	b744c <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b8198:	2101      	movs	r1, #1
   b819a:	4620      	mov	r0, r4
   b819c:	f7ff ffde 	bl	b815c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b81a0:	e9d4 0100 	ldrd	r0, r1, [r4]
   b81a4:	2200      	movs	r2, #0
   b81a6:	e7f3      	b.n	b8190 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b81a8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b81a8:	b538      	push	{r3, r4, r5, lr}
   b81aa:	4604      	mov	r4, r0
   b81ac:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b81ae:	f7ff ffb8 	bl	b8122 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b81b2:	2800      	cmp	r0, #0
   b81b4:	db0a      	blt.n	b81cc <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b81b6:	4629      	mov	r1, r5
   b81b8:	4620      	mov	r0, r4
   b81ba:	f7ff ffe4 	bl	b8186 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b81be:	2800      	cmp	r0, #0
   b81c0:	db04      	blt.n	b81cc <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b81c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b81c6:	2000      	movs	r0, #0
   b81c8:	f7ff b948 	b.w	b745c <hal_ble_gap_start_advertising>
}
   b81cc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b81d0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b81d0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b81d2:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b81d4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b81d6:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b81d8:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b81da:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b81dc:	f7fb ff5b 	bl	b4096 <_Znwj>
   b81e0:	b118      	cbz	r0, b81ea <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b81e2:	682b      	ldr	r3, [r5, #0]
   b81e4:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b81e6:	686b      	ldr	r3, [r5, #4]
   b81e8:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b81ea:	4b03      	ldr	r3, [pc, #12]	; (b81f8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b81ec:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b81ee:	4b03      	ldr	r3, [pc, #12]	; (b81fc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b81f0:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b81f2:	60a3      	str	r3, [r4, #8]
      }
   b81f4:	4620      	mov	r0, r4
   b81f6:	bd38      	pop	{r3, r4, r5, pc}
   b81f8:	000b7a95 	.word	0x000b7a95
   b81fc:	000b7aad 	.word	0x000b7aad

000b8200 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b8200:	680b      	ldr	r3, [r1, #0]
   b8202:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b8204:	b113      	cbz	r3, b820c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b8206:	685a      	ldr	r2, [r3, #4]
   b8208:	3201      	adds	r2, #1
   b820a:	605a      	str	r2, [r3, #4]
      }
   b820c:	4770      	bx	lr

000b820e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b820e:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8210:	f851 3b04 	ldr.w	r3, [r1], #4
   b8214:	4604      	mov	r4, r0
   b8216:	f840 3b04 	str.w	r3, [r0], #4
   b821a:	f7ff fff1 	bl	b8200 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b821e:	6823      	ldr	r3, [r4, #0]
   b8220:	b90b      	cbnz	r3, b8226 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b8222:	f7ff fc2d 	bl	b7a80 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b8226:	4620      	mov	r0, r4
   b8228:	bd10      	pop	{r4, pc}

000b822a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b822a:	b510      	push	{r4, lr}
   b822c:	f851 3b04 	ldr.w	r3, [r1], #4
   b8230:	4604      	mov	r4, r0
   b8232:	f840 3b04 	str.w	r3, [r0], #4
   b8236:	f7ff ffe3 	bl	b8200 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b823a:	4620      	mov	r0, r4
   b823c:	bd10      	pop	{r4, pc}

000b823e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b823e:	b510      	push	{r4, lr}
   b8240:	f851 3b04 	ldr.w	r3, [r1], #4
   b8244:	4604      	mov	r4, r0
   b8246:	f840 3b04 	str.w	r3, [r0], #4
   b824a:	f7ff ffd9 	bl	b8200 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b824e:	4620      	mov	r0, r4
   b8250:	bd10      	pop	{r4, pc}

000b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b8252:	b510      	push	{r4, lr}
   b8254:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b8256:	6800      	ldr	r0, [r0, #0]
   b8258:	b108      	cbz	r0, b825e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b825a:	f7ff fc5b 	bl	b7b14 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b825e:	4620      	mov	r0, r4
   b8260:	bd10      	pop	{r4, pc}

000b8262 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b8262:	b510      	push	{r4, lr}
   b8264:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8266:	3004      	adds	r0, #4
   b8268:	f7ff fff3 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b826c:	4620      	mov	r0, r4
   b826e:	bd10      	pop	{r4, pc}

000b8270 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8270:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8272:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8276:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8278:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b827c:	42ae      	cmp	r6, r5
   b827e:	d004      	beq.n	b828a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b8280:	1d28      	adds	r0, r5, #4
   b8282:	f7ff ffe6 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8286:	3508      	adds	r5, #8
   b8288:	e7f8      	b.n	b827c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b828a:	6820      	ldr	r0, [r4, #0]
   b828c:	f7ff fb44 	bl	b7918 <free>
}
   b8290:	4620      	mov	r0, r4
   b8292:	bd70      	pop	{r4, r5, r6, pc}

000b8294 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8294:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8296:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b829a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b829c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b82a0:	42ae      	cmp	r6, r5
   b82a2:	d004      	beq.n	b82ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b82a4:	1d28      	adds	r0, r5, #4
   b82a6:	f7ff ffd4 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b82aa:	3508      	adds	r5, #8
   b82ac:	e7f8      	b.n	b82a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b82ae:	6820      	ldr	r0, [r4, #0]
   b82b0:	f7ff fb32 	bl	b7918 <free>
}
   b82b4:	4620      	mov	r0, r4
   b82b6:	bd70      	pop	{r4, r5, r6, pc}

000b82b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b82b8:	b510      	push	{r4, lr}
   b82ba:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b82bc:	3024      	adds	r0, #36	; 0x24
   b82be:	f7ff ffe9 	bl	b8294 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b82c2:	f104 0018 	add.w	r0, r4, #24
   b82c6:	f7ff ffd3 	bl	b8270 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b82ca:	bd10      	pop	{r4, pc}

000b82cc <__tcf_0>:
    static BleLocalDevice instance;
   b82cc:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b82ce:	4b17      	ldr	r3, [pc, #92]	; (b832c <__tcf_0+0x60>)
   b82d0:	681c      	ldr	r4, [r3, #0]
   b82d2:	b354      	cbz	r4, b832a <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b82d4:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b82d8:	f7ff fc08 	bl	b7aec <_ZNSt14_Function_baseD1Ev>
   b82dc:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b82e0:	f7ff fc04 	bl	b7aec <_ZNSt14_Function_baseD1Ev>
   b82e4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b82e8:	f7ff fc00 	bl	b7aec <_ZNSt14_Function_baseD1Ev>
   b82ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b82f0:	f7ff fbfc 	bl	b7aec <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b82f4:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b82f8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b82fc:	42ae      	cmp	r6, r5
   b82fe:	d004      	beq.n	b830a <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b8300:	1d28      	adds	r0, r5, #4
   b8302:	f7ff ffa6 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8306:	3508      	adds	r5, #8
   b8308:	e7f8      	b.n	b82fc <__tcf_0+0x30>
    ::free(ptr);
   b830a:	69a0      	ldr	r0, [r4, #24]
   b830c:	f7ff fb04 	bl	b7918 <free>
    ~BleLocalDeviceImpl() = default;
   b8310:	f104 000c 	add.w	r0, r4, #12
   b8314:	f7ff ffbe 	bl	b8294 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8318:	4620      	mov	r0, r4
   b831a:	f7ff ffa9 	bl	b8270 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b831e:	4620      	mov	r0, r4
   b8320:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b8322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8326:	f7fb bebc 	b.w	b40a2 <_ZdlPvj>
   b832a:	bd70      	pop	{r4, r5, r6, pc}
   b832c:	2003e6c4 	.word	0x2003e6c4

000b8330 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b8330:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b8332:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8334:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b8338:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b833c:	6803      	ldr	r3, [r0, #0]
   b833e:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b8340:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8342:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b8344:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b8346:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b8348:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b834a:	f7ff ff82 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b834e:	b002      	add	sp, #8
   b8350:	bd10      	pop	{r4, pc}

000b8352 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b8352:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8354:	b510      	push	{r4, lr}
      if (_M_empty())
   b8356:	b90a      	cbnz	r2, b835c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b8358:	f001 fe25 	bl	b9fa6 <_ZSt25__throw_bad_function_callv>
    }
   b835c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8360:	68c3      	ldr	r3, [r0, #12]
   b8362:	4718      	bx	r3

000b8364 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b8364:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b8366:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b8368:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b836a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b836c:	dd03      	ble.n	b8376 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b836e:	f7ff fadb 	bl	b7928 <realloc>
            if (!d) {
   b8372:	b918      	cbnz	r0, b837c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b8374:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b8376:	f7ff facf 	bl	b7918 <free>
        T* d = nullptr;
   b837a:	2000      	movs	r0, #0
        data_ = d;
   b837c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b837e:	60a5      	str	r5, [r4, #8]
        return true;
   b8380:	2001      	movs	r0, #1
   b8382:	e7f7      	b.n	b8374 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b8384 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b8384:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b8386:	6883      	ldr	r3, [r0, #8]
   b8388:	428b      	cmp	r3, r1
   b838a:	da02      	bge.n	b8392 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b838c:	f7ff ffea 	bl	b8364 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b8390:	bd08      	pop	{r3, pc}
    return true;
   b8392:	2001      	movs	r0, #1
   b8394:	e7fc      	b.n	b8390 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b8396 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b839a:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b839c:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b839e:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b83a0:	4419      	add	r1, r3
   b83a2:	6883      	ldr	r3, [r0, #8]
   b83a4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b83a6:	4604      	mov	r4, r0
   b83a8:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b83aa:	dc12      	bgt.n	b83d2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b83ac:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b83ae:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b83b0:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b83b2:	1bd2      	subs	r2, r2, r7
   b83b4:	4631      	mov	r1, r6
   b83b6:	1970      	adds	r0, r6, r5
   b83b8:	f002 fe11 	bl	bafde <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b83bc:	462a      	mov	r2, r5
   b83be:	4641      	mov	r1, r8
   b83c0:	4630      	mov	r0, r6
   b83c2:	f002 fdfe 	bl	bafc2 <memcpy>
    size_ += n;
   b83c6:	6863      	ldr	r3, [r4, #4]
   b83c8:	442b      	add	r3, r5
   b83ca:	6063      	str	r3, [r4, #4]
    return true;
   b83cc:	2001      	movs	r0, #1
}
   b83ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b83d2:	f7ff ffc7 	bl	b8364 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b83d6:	2800      	cmp	r0, #0
   b83d8:	d1e8      	bne.n	b83ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b83da:	e7f8      	b.n	b83ce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b83dc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b83dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b83de:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b83e0:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b83e4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b83e6:	4604      	mov	r4, r0
   b83e8:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b83ea:	da0b      	bge.n	b8404 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b83ec:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b83ee:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b83f0:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b83f2:	1b52      	subs	r2, r2, r5
   b83f4:	1c48      	adds	r0, r1, #1
   b83f6:	f002 fdf2 	bl	bafde <memmove>
    new(p) T(std::move(value));
   b83fa:	557e      	strb	r6, [r7, r5]
    ++size_;
   b83fc:	6863      	ldr	r3, [r4, #4]
   b83fe:	3301      	adds	r3, #1
   b8400:	6063      	str	r3, [r4, #4]
}
   b8402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8404:	3101      	adds	r1, #1
   b8406:	f7ff ffad 	bl	b8364 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b840a:	2800      	cmp	r0, #0
   b840c:	d1ee      	bne.n	b83ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b840e:	e7f8      	b.n	b8402 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b8410 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8410:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b8412:	6841      	ldr	r1, [r0, #4]
   b8414:	f7ff bfe2 	b.w	b83dc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b8418 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8418:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b841c:	4604      	mov	r4, r0
   b841e:	461d      	mov	r5, r3
   b8420:	460f      	mov	r7, r1
   b8422:	ab01      	add	r3, sp, #4
   b8424:	4690      	mov	r8, r2
   b8426:	460a      	mov	r2, r1
   b8428:	e9d0 0100 	ldrd	r0, r1, [r0]
   b842c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b8430:	f7ff fb10 	bl	b7a54 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b8434:	1cae      	adds	r6, r5, #2
   b8436:	6863      	ldr	r3, [r4, #4]
   b8438:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b843a:	f1b9 0f00 	cmp.w	r9, #0
   b843e:	d126      	bne.n	b848e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b8440:	b328      	cbz	r0, b848e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8442:	4433      	add	r3, r6
   b8444:	1a1b      	subs	r3, r3, r0
   b8446:	2bff      	cmp	r3, #255	; 0xff
   b8448:	d809      	bhi.n	b845e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b844a:	9901      	ldr	r1, [sp, #4]
   b844c:	4620      	mov	r0, r4
   b844e:	f7ff fe71 	bl	b8134 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8452:	6861      	ldr	r1, [r4, #4]
   b8454:	4620      	mov	r0, r4
   b8456:	4431      	add	r1, r6
   b8458:	f7ff ff94 	bl	b8384 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b845c:	b918      	cbnz	r0, b8466 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b845e:	6860      	ldr	r0, [r4, #4]
}
   b8460:	b003      	add	sp, #12
   b8462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b8466:	1c6a      	adds	r2, r5, #1
   b8468:	9901      	ldr	r1, [sp, #4]
   b846a:	b2d2      	uxtb	r2, r2
   b846c:	4620      	mov	r0, r4
   b846e:	f7ff ffb5 	bl	b83dc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b8472:	9901      	ldr	r1, [sp, #4]
   b8474:	463a      	mov	r2, r7
   b8476:	3101      	adds	r1, #1
   b8478:	4620      	mov	r0, r4
   b847a:	f7ff ffaf 	bl	b83dc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b847e:	9901      	ldr	r1, [sp, #4]
   b8480:	462b      	mov	r3, r5
   b8482:	4642      	mov	r2, r8
   b8484:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b8486:	4620      	mov	r0, r4
   b8488:	f7ff ff85 	bl	b8396 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b848c:	e7e7      	b.n	b845e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b848e:	18f1      	adds	r1, r6, r3
   b8490:	29ff      	cmp	r1, #255	; 0xff
   b8492:	d8e4      	bhi.n	b845e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8494:	4620      	mov	r0, r4
   b8496:	f7ff ff75 	bl	b8384 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b849a:	2800      	cmp	r0, #0
   b849c:	d0df      	beq.n	b845e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b849e:	1c69      	adds	r1, r5, #1
   b84a0:	b2c9      	uxtb	r1, r1
   b84a2:	4620      	mov	r0, r4
   b84a4:	f7ff ffb4 	bl	b8410 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b84a8:	4639      	mov	r1, r7
   b84aa:	4620      	mov	r0, r4
   b84ac:	f7ff ffb0 	bl	b8410 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b84b0:	6861      	ldr	r1, [r4, #4]
   b84b2:	462b      	mov	r3, r5
   b84b4:	4642      	mov	r2, r8
   b84b6:	e7e6      	b.n	b8486 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b84b8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b84b8:	b430      	push	{r4, r5}
   b84ba:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b84be:	b11a      	cbz	r2, b84c8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b84c0:	9502      	str	r5, [sp, #8]
}
   b84c2:	bc30      	pop	{r4, r5}
   b84c4:	f7ff bfa8 	b.w	b8418 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b84c8:	6840      	ldr	r0, [r0, #4]
}
   b84ca:	bc30      	pop	{r4, r5}
   b84cc:	4770      	bx	lr

000b84ce <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b84ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b84d0:	2300      	movs	r3, #0
   b84d2:	e9c0 3300 	strd	r3, r3, [r0]
   b84d6:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b84d8:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b84da:	9300      	str	r3, [sp, #0]
   b84dc:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b84de:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b84e2:	4619      	mov	r1, r3
   b84e4:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b84e8:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b84ea:	f7ff ffe5 	bl	b84b8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b84ee:	4620      	mov	r0, r4
   b84f0:	b004      	add	sp, #16
   b84f2:	bd10      	pop	{r4, pc}

000b84f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b84f4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b84f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b84f8:	4604      	mov	r4, r0
   b84fa:	460d      	mov	r5, r1
   b84fc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b84fe:	d914      	bls.n	b852a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8500:	4290      	cmp	r0, r2
   b8502:	d213      	bcs.n	b852c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8504:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8508:	1a75      	subs	r5, r6, r1
   b850a:	f1a1 0708 	sub.w	r7, r1, #8
   b850e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8510:	42b7      	cmp	r7, r6
   b8512:	d018      	beq.n	b8546 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8514:	b11c      	cbz	r4, b851e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8516:	4631      	mov	r1, r6
   b8518:	4620      	mov	r0, r4
   b851a:	f7ff fe90 	bl	b823e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b851e:	1d30      	adds	r0, r6, #4
   b8520:	f7ff fe97 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8524:	3e08      	subs	r6, #8
   b8526:	3c08      	subs	r4, #8
   b8528:	e7f2      	b.n	b8510 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b852a:	d00c      	beq.n	b8546 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b852c:	42b5      	cmp	r5, r6
   b852e:	d00a      	beq.n	b8546 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8530:	b11c      	cbz	r4, b853a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8532:	4629      	mov	r1, r5
   b8534:	4620      	mov	r0, r4
   b8536:	f7ff fe82 	bl	b823e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b853a:	1d28      	adds	r0, r5, #4
   b853c:	f7ff fe89 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8540:	3508      	adds	r5, #8
   b8542:	3408      	adds	r4, #8
   b8544:	e7f2      	b.n	b852c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8548 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b854a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b854c:	6846      	ldr	r6, [r0, #4]
   b854e:	4668      	mov	r0, sp
   b8550:	f7ff fe75 	bl	b823e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8554:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b8558:	429f      	cmp	r7, r3
   b855a:	db12      	blt.n	b8582 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b855c:	3701      	adds	r7, #1
        if (n > 0) {
   b855e:	2f00      	cmp	r7, #0
   b8560:	dd29      	ble.n	b85b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b8562:	00f8      	lsls	r0, r7, #3
   b8564:	f7ff f9d0 	bl	b7908 <malloc>
            if (!d) {
   b8568:	4605      	mov	r5, r0
   b856a:	b1f0      	cbz	r0, b85aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b856c:	e9d4 1200 	ldrd	r1, r2, [r4]
   b8570:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8574:	f7ff ffbe 	bl	b84f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8578:	6820      	ldr	r0, [r4, #0]
   b857a:	f7ff f9cd 	bl	b7918 <free>
        data_ = d;
   b857e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b8580:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b8582:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8584:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8586:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b858a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b858e:	4631      	mov	r1, r6
   b8590:	f106 0008 	add.w	r0, r6, #8
   b8594:	f7ff ffae 	bl	b84f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8598:	b11e      	cbz	r6, b85a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b859a:	4669      	mov	r1, sp
   b859c:	4630      	mov	r0, r6
   b859e:	f7ff fe4e 	bl	b823e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b85a2:	6863      	ldr	r3, [r4, #4]
   b85a4:	3301      	adds	r3, #1
   b85a6:	6063      	str	r3, [r4, #4]
    return true;
   b85a8:	2501      	movs	r5, #1
   b85aa:	a801      	add	r0, sp, #4
   b85ac:	f7ff fe51 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b85b0:	4628      	mov	r0, r5
   b85b2:	b003      	add	sp, #12
   b85b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b85b6:	2500      	movs	r5, #0
   b85b8:	e7de      	b.n	b8578 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b85ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b85ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b85bc:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b85c0:	4605      	mov	r5, r0
   b85c2:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b85c4:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b85c8:	42a6      	cmp	r6, r4
   b85ca:	d005      	beq.n	b85d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b85cc:	4639      	mov	r1, r7
   b85ce:	4620      	mov	r0, r4
   b85d0:	f7ff fcff 	bl	b7fd2 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b85d4:	b108      	cbz	r0, b85da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b85d6:	b914      	cbnz	r4, b85de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b85d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b85da:	3408      	adds	r4, #8
   b85dc:	e7f4      	b.n	b85c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b85de:	1d20      	adds	r0, r4, #4
   b85e0:	f7ff fe37 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b85e4:	e9d5 3200 	ldrd	r3, r2, [r5]
   b85e8:	f104 0108 	add.w	r1, r4, #8
   b85ec:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b85f0:	4620      	mov	r0, r4
   b85f2:	f7ff ff7f 	bl	b84f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b85f6:	686b      	ldr	r3, [r5, #4]
   b85f8:	3b01      	subs	r3, #1
   b85fa:	606b      	str	r3, [r5, #4]
    return true;
   b85fc:	e7ec      	b.n	b85d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b8600 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8604:	4605      	mov	r5, r0
   b8606:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b8608:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b860a:	460c      	mov	r4, r1
        WiringBleLock lk;
   b860c:	f7ff faac 	bl	b7b68 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b8610:	682e      	ldr	r6, [r5, #0]
   b8612:	1ef3      	subs	r3, r6, #3
   b8614:	2b0d      	cmp	r3, #13
   b8616:	d83c      	bhi.n	b8692 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8618:	e8df f013 	tbh	[pc, r3, lsl #1]
   b861c:	0053000e 	.word	0x0053000e
   b8620:	00d1003b 	.word	0x00d1003b
   b8624:	003b003b 	.word	0x003b003b
   b8628:	003b003b 	.word	0x003b003b
   b862c:	009b003b 	.word	0x009b003b
   b8630:	009b009b 	.word	0x009b009b
   b8634:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b8638:	a804      	add	r0, sp, #16
   b863a:	f7ff fc95 	bl	b7f68 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b863e:	9b04      	ldr	r3, [sp, #16]
   b8640:	89aa      	ldrh	r2, [r5, #12]
   b8642:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b8644:	6869      	ldr	r1, [r5, #4]
   b8646:	9804      	ldr	r0, [sp, #16]
   b8648:	3108      	adds	r1, #8
   b864a:	3002      	adds	r0, #2
   b864c:	f7ff faa6 	bl	b7b9c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b8650:	a904      	add	r1, sp, #16
   b8652:	a806      	add	r0, sp, #24
   b8654:	f7ff fdf3 	bl	b823e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b8658:	a906      	add	r1, sp, #24
   b865a:	f104 0018 	add.w	r0, r4, #24
   b865e:	f7ff ff73 	bl	b8548 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b8662:	4605      	mov	r5, r0
   b8664:	a807      	add	r0, sp, #28
   b8666:	f7ff fdf4 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b866a:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b866c:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b866e:	b9b5      	cbnz	r5, b869e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b8670:	4b5d      	ldr	r3, [pc, #372]	; (b87e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b8672:	495e      	ldr	r1, [pc, #376]	; (b87ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8674:	9300      	str	r3, [sp, #0]
   b8676:	2032      	movs	r0, #50	; 0x32
   b8678:	462b      	mov	r3, r5
   b867a:	aa06      	add	r2, sp, #24
   b867c:	9507      	str	r5, [sp, #28]
   b867e:	f7ff f8af 	bl	b77e0 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b8682:	9b04      	ldr	r3, [sp, #16]
   b8684:	4629      	mov	r1, r5
   b8686:	8818      	ldrh	r0, [r3, #0]
   b8688:	f7fe fef0 	bl	b746c <hal_ble_gap_disconnect>
   b868c:	a805      	add	r0, sp, #20
   b868e:	f7ff fde0 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b8692:	a803      	add	r0, sp, #12
   b8694:	f7ff fa76 	bl	b7b84 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b8698:	b00e      	add	sp, #56	; 0x38
   b869a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b869e:	4a54      	ldr	r2, [pc, #336]	; (b87f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b86a0:	9200      	str	r2, [sp, #0]
   b86a2:	2300      	movs	r3, #0
   b86a4:	4951      	ldr	r1, [pc, #324]	; (b87ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b86a6:	9307      	str	r3, [sp, #28]
   b86a8:	aa06      	add	r2, sp, #24
   b86aa:	2001      	movs	r0, #1
   b86ac:	f7ff f898 	bl	b77e0 <log_message>
                if (impl->connectedCallback_) {
   b86b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b86b2:	2b00      	cmp	r3, #0
   b86b4:	d0ea      	beq.n	b868c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b86b6:	a904      	add	r1, sp, #16
   b86b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b86bc:	f7ff fe49 	bl	b8352 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b86c0:	e7e4      	b.n	b868c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b86c2:	89a9      	ldrh	r1, [r5, #12]
   b86c4:	4620      	mov	r0, r4
   b86c6:	f7ff fba7 	bl	b7e18 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b86ca:	4606      	mov	r6, r0
   b86cc:	2800      	cmp	r0, #0
   b86ce:	d0e0      	beq.n	b8692 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b86d0:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b86d2:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b86d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b86da:	8029      	strh	r1, [r5, #0]
   b86dc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b86e0:	429a      	cmp	r2, r3
   b86e2:	d003      	beq.n	b86ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b86e4:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b86e8:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b86ea:	e7f9      	b.n	b86e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b86ec:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b86f0:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b86f4:	45b8      	cmp	r8, r7
   b86f6:	d004      	beq.n	b8702 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b86f8:	1d38      	adds	r0, r7, #4
   b86fa:	f7ff fdaa 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b86fe:	3708      	adds	r7, #8
   b8700:	e7f8      	b.n	b86f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b8702:	2300      	movs	r3, #0
   b8704:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b8706:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b870a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b870e:	45b8      	cmp	r8, r7
   b8710:	d004      	beq.n	b871c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b8712:	1d38      	adds	r0, r7, #4
   b8714:	f7ff fd9d 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8718:	3708      	adds	r7, #8
   b871a:	e7f8      	b.n	b870e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b871c:	2300      	movs	r3, #0
   b871e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b8720:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b8722:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8724:	b123      	cbz	r3, b8730 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b8726:	4631      	mov	r1, r6
   b8728:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b872c:	f7ff fe11 	bl	b8352 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b8730:	2300      	movs	r3, #0
   b8732:	2220      	movs	r2, #32
   b8734:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b8738:	4a2e      	ldr	r2, [pc, #184]	; (b87f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b873a:	9200      	str	r2, [sp, #0]
   b873c:	492b      	ldr	r1, [pc, #172]	; (b87ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b873e:	aa06      	add	r2, sp, #24
   b8740:	2001      	movs	r0, #1
   b8742:	f7ff f84d 	bl	b77e0 <log_message>
                    impl->peers_.removeOne(*peer);
   b8746:	4631      	mov	r1, r6
   b8748:	f104 0018 	add.w	r0, r4, #24
   b874c:	f7ff ff35 	bl	b85ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b8750:	e79f      	b.n	b8692 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8752:	89a9      	ldrh	r1, [r5, #12]
   b8754:	4620      	mov	r0, r4
   b8756:	f7ff fb5f 	bl	b7e18 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b875a:	2800      	cmp	r0, #0
   b875c:	d099      	beq.n	b8692 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b875e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b8760:	2b00      	cmp	r3, #0
   b8762:	d096      	beq.n	b8692 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b8764:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8766:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b8768:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b876c:	d001      	beq.n	b8772 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b876e:	2e10      	cmp	r6, #16
   b8770:	d117      	bne.n	b87a2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b8772:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b8774:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b8776:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b8778:	2506      	movs	r5, #6
                        };
   b877a:	f88d 3015 	strb.w	r3, [sp, #21]
   b877e:	9104      	str	r1, [sp, #16]
   b8780:	f88d 2014 	strb.w	r2, [sp, #20]
   b8784:	9006      	str	r0, [sp, #24]
   b8786:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b878a:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b878c:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b8790:	9508      	str	r5, [sp, #32]
   b8792:	e883 0003 	stmia.w	r3, {r0, r1}
   b8796:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b8798:	a906      	add	r1, sp, #24
   b879a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b879e:	4798      	blx	r3
   b87a0:	e777      	b.n	b8692 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b87a2:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b87a4:	bf01      	itttt	eq
   b87a6:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b87a8:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b87aa:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b87ae:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b87b0:	bf0f      	iteee	eq
   b87b2:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b87b6:	461a      	movne	r2, r3
   b87b8:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b87ba:	461d      	movne	r5, r3
   b87bc:	e7dd      	b.n	b877a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b87be:	89a9      	ldrh	r1, [r5, #12]
   b87c0:	4620      	mov	r0, r4
   b87c2:	f7ff fb29 	bl	b7e18 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b87c6:	4601      	mov	r1, r0
   b87c8:	2800      	cmp	r0, #0
   b87ca:	f43f af62 	beq.w	b8692 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b87ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b87d0:	2b00      	cmp	r3, #0
   b87d2:	f43f af5e 	beq.w	b8692 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b87d6:	686b      	ldr	r3, [r5, #4]
   b87d8:	9306      	str	r3, [sp, #24]
   b87da:	aa06      	add	r2, sp, #24
   b87dc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b87de:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b87e2:	4798      	blx	r3
   b87e4:	e755      	b.n	b8692 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b87e6:	bf00      	nop
   b87e8:	000bd588 	.word	0x000bd588
   b87ec:	000bd507 	.word	0x000bd507
   b87f0:	000bd5ae 	.word	0x000bd5ae
   b87f4:	000bd5cb 	.word	0x000bd5cb

000b87f8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b87f8:	b513      	push	{r0, r1, r4, lr}
   b87fa:	460b      	mov	r3, r1
   b87fc:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b87fe:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8802:	466c      	mov	r4, sp
   b8804:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b8808:	e893 0003 	ldmia.w	r3, {r0, r1}
   b880c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b8810:	e894 0003 	ldmia.w	r4, {r0, r1}
   b8814:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b8818:	b002      	add	sp, #8
   b881a:	bd10      	pop	{r4, pc}

000b881c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b881c:	b538      	push	{r3, r4, r5, lr}
   b881e:	4605      	mov	r5, r0
   b8820:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b8822:	f7ff ffe9 	bl	b87f8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8826:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8828:	68a2      	ldr	r2, [r4, #8]
   b882a:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b882c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b882e:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8830:	68e2      	ldr	r2, [r4, #12]
   b8832:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8834:	60e3      	str	r3, [r4, #12]
      }
   b8836:	bd38      	pop	{r3, r4, r5, pc}

000b8838 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b8838:	b570      	push	{r4, r5, r6, lr}
   b883a:	4604      	mov	r4, r0
   b883c:	b08c      	sub	sp, #48	; 0x30
   b883e:	460e      	mov	r6, r1
   b8840:	9201      	str	r2, [sp, #4]
   b8842:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b8844:	f7ff fac8 	bl	b7dd8 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b8848:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b884a:	9901      	ldr	r1, [sp, #4]
   b884c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8850:	f000 fd71 	bl	b9336 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b8854:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b8858:	b1cd      	cbz	r5, b888e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b885a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b885c:	9502      	str	r5, [sp, #8]
   b885e:	a902      	add	r1, sp, #8
   b8860:	a804      	add	r0, sp, #16
   b8862:	9303      	str	r3, [sp, #12]
   b8864:	f7ff fcb4 	bl	b81d0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b8868:	2300      	movs	r3, #0
	__x.swap(*this);
   b886a:	a908      	add	r1, sp, #32
   b886c:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b886e:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b8870:	f7ff ffd4 	bl	b881c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b8874:	4631      	mov	r1, r6
   b8876:	a808      	add	r0, sp, #32
   b8878:	f7ff ffd0 	bl	b881c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b887c:	a808      	add	r0, sp, #32
   b887e:	f7ff f935 	bl	b7aec <_ZNSt14_Function_baseD1Ev>
   b8882:	a804      	add	r0, sp, #16
   b8884:	f7ff f932 	bl	b7aec <_ZNSt14_Function_baseD1Ev>
    }
   b8888:	4620      	mov	r0, r4
   b888a:	b00c      	add	sp, #48	; 0x30
   b888c:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b888e:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b8890:	e7ea      	b.n	b8868 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b8894 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b8894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8898:	b087      	sub	sp, #28
   b889a:	461d      	mov	r5, r3
   b889c:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b88a0:	4680      	mov	r8, r0
   b88a2:	468b      	mov	fp, r1
   b88a4:	4692      	mov	sl, r2
   b88a6:	9912      	ldr	r1, [sp, #72]	; 0x48
   b88a8:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b88aa:	2200      	movs	r2, #0
   b88ac:	2068      	movs	r0, #104	; 0x68
   b88ae:	9102      	str	r1, [sp, #8]
   b88b0:	9204      	str	r2, [sp, #16]
   b88b2:	f7fb fbf0 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b88b6:	1e06      	subs	r6, r0, #0
   b88b8:	f106 090c 	add.w	r9, r6, #12
   b88bc:	d018      	beq.n	b88f0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b88be:	2201      	movs	r2, #1
	: _M_impl(__a)
   b88c0:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b88c2:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b88c6:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b88c8:	4a15      	ldr	r2, [pc, #84]	; (b8920 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b88ca:	f847 2b20 	str.w	r2, [r7], #32
   b88ce:	9b03      	ldr	r3, [sp, #12]
   b88d0:	9100      	str	r1, [sp, #0]
   b88d2:	465a      	mov	r2, fp
   b88d4:	4651      	mov	r1, sl
   b88d6:	4648      	mov	r0, r9
   b88d8:	f7ff ffae 	bl	b8838 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b88dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b88de:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b88e0:	682b      	ldr	r3, [r5, #0]
   b88e2:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b88e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b88e6:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b88ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b88ec:	6823      	ldr	r3, [r4, #0]
   b88ee:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b88f0:	a904      	add	r1, sp, #16
   b88f2:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b88f4:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b88f8:	f7ff fd1a 	bl	b8330 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b88fc:	a805      	add	r0, sp, #20
   b88fe:	f7ff fca8 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b8902:	f8d8 3000 	ldr.w	r3, [r8]
   b8906:	b93b      	cbnz	r3, b8918 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b8908:	4a06      	ldr	r2, [pc, #24]	; (b8924 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b890a:	4907      	ldr	r1, [pc, #28]	; (b8928 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b890c:	200a      	movs	r0, #10
}
   b890e:	b007      	add	sp, #28
   b8910:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b8914:	f7fe bf5c 	b.w	b77d0 <panic_>
}
   b8918:	b007      	add	sp, #28
   b891a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b891e:	bf00      	nop
   b8920:	000bd644 	.word	0x000bd644
   b8924:	000b7561 	.word	0x000b7561
   b8928:	000bd4f0 	.word	0x000bd4f0

000b892c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b892c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b892e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8930:	4604      	mov	r4, r0
   b8932:	460d      	mov	r5, r1
   b8934:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8936:	d914      	bls.n	b8962 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8938:	4290      	cmp	r0, r2
   b893a:	d213      	bcs.n	b8964 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b893c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8940:	1a75      	subs	r5, r6, r1
   b8942:	f1a1 0708 	sub.w	r7, r1, #8
   b8946:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8948:	42b7      	cmp	r7, r6
   b894a:	d018      	beq.n	b897e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b894c:	b11c      	cbz	r4, b8956 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b894e:	4631      	mov	r1, r6
   b8950:	4620      	mov	r0, r4
   b8952:	f7ff fc6a 	bl	b822a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8956:	1d30      	adds	r0, r6, #4
   b8958:	f7ff fc7b 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b895c:	3e08      	subs	r6, #8
   b895e:	3c08      	subs	r4, #8
   b8960:	e7f2      	b.n	b8948 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8962:	d00c      	beq.n	b897e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8964:	42b5      	cmp	r5, r6
   b8966:	d00a      	beq.n	b897e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8968:	b11c      	cbz	r4, b8972 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b896a:	4629      	mov	r1, r5
   b896c:	4620      	mov	r0, r4
   b896e:	f7ff fc5c 	bl	b822a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8972:	1d28      	adds	r0, r5, #4
   b8974:	f7ff fc6d 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8978:	3508      	adds	r5, #8
   b897a:	3408      	adds	r4, #8
   b897c:	e7f2      	b.n	b8964 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b897e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8980 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8980:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8982:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8984:	4605      	mov	r5, r0
        if (n > 0) {
   b8986:	dd11      	ble.n	b89ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8988:	00f0      	lsls	r0, r6, #3
   b898a:	f7fe ffbd 	bl	b7908 <malloc>
            if (!d) {
   b898e:	4604      	mov	r4, r0
   b8990:	b158      	cbz	r0, b89aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8992:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8996:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b899a:	f7ff ffc7 	bl	b892c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b899e:	6828      	ldr	r0, [r5, #0]
   b89a0:	f7fe ffba 	bl	b7918 <free>
        data_ = d;
   b89a4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b89a6:	60ae      	str	r6, [r5, #8]
        return true;
   b89a8:	2001      	movs	r0, #1
    }
   b89aa:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b89ac:	2400      	movs	r4, #0
   b89ae:	e7f6      	b.n	b899e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b89b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b89b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b89b2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b89b4:	6845      	ldr	r5, [r0, #4]
   b89b6:	4668      	mov	r0, sp
   b89b8:	f7ff fc37 	bl	b822a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b89bc:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b89c0:	4299      	cmp	r1, r3
   b89c2:	da10      	bge.n	b89e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b89c4:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b89c6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b89c8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b89cc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b89d0:	4629      	mov	r1, r5
   b89d2:	f105 0008 	add.w	r0, r5, #8
   b89d6:	f7ff ffa9 	bl	b892c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b89da:	b98d      	cbnz	r5, b8a00 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b89dc:	6863      	ldr	r3, [r4, #4]
   b89de:	3301      	adds	r3, #1
   b89e0:	6063      	str	r3, [r4, #4]
    return true;
   b89e2:	2601      	movs	r6, #1
   b89e4:	e006      	b.n	b89f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b89e6:	3101      	adds	r1, #1
   b89e8:	4620      	mov	r0, r4
   b89ea:	f7ff ffc9 	bl	b8980 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b89ee:	4606      	mov	r6, r0
   b89f0:	2800      	cmp	r0, #0
   b89f2:	d1e7      	bne.n	b89c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b89f4:	a801      	add	r0, sp, #4
   b89f6:	f7ff fc2c 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b89fa:	4630      	mov	r0, r6
   b89fc:	b002      	add	sp, #8
   b89fe:	bd70      	pop	{r4, r5, r6, pc}
   b8a00:	4669      	mov	r1, sp
   b8a02:	4628      	mov	r0, r5
   b8a04:	f7ff fc11 	bl	b822a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8a08:	e7e8      	b.n	b89dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8a0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8a0a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8a0e:	4604      	mov	r4, r0
   b8a10:	460d      	mov	r5, r1
   b8a12:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8a14:	d914      	bls.n	b8a40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8a16:	4290      	cmp	r0, r2
   b8a18:	d213      	bcs.n	b8a42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8a1a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8a1e:	1a75      	subs	r5, r6, r1
   b8a20:	f1a1 0708 	sub.w	r7, r1, #8
   b8a24:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8a26:	42b7      	cmp	r7, r6
   b8a28:	d018      	beq.n	b8a5c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8a2a:	b11c      	cbz	r4, b8a34 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b8a2c:	4631      	mov	r1, r6
   b8a2e:	4620      	mov	r0, r4
   b8a30:	f7ff fbed 	bl	b820e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8a34:	1d30      	adds	r0, r6, #4
   b8a36:	f7ff fc0c 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8a3a:	3e08      	subs	r6, #8
   b8a3c:	3c08      	subs	r4, #8
   b8a3e:	e7f2      	b.n	b8a26 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8a40:	d00c      	beq.n	b8a5c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8a42:	42b5      	cmp	r5, r6
   b8a44:	d00a      	beq.n	b8a5c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8a46:	b11c      	cbz	r4, b8a50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8a48:	4629      	mov	r1, r5
   b8a4a:	4620      	mov	r0, r4
   b8a4c:	f7ff fbdf 	bl	b820e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8a50:	1d28      	adds	r0, r5, #4
   b8a52:	f7ff fbfe 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8a56:	3508      	adds	r5, #8
   b8a58:	3408      	adds	r4, #8
   b8a5a:	e7f2      	b.n	b8a42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8a5e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8a5e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8a60:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8a62:	4605      	mov	r5, r0
        if (n > 0) {
   b8a64:	dd11      	ble.n	b8a8a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8a66:	00f0      	lsls	r0, r6, #3
   b8a68:	f7fe ff4e 	bl	b7908 <malloc>
            if (!d) {
   b8a6c:	4604      	mov	r4, r0
   b8a6e:	b158      	cbz	r0, b8a88 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8a70:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8a74:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8a78:	f7ff ffc7 	bl	b8a0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8a7c:	6828      	ldr	r0, [r5, #0]
   b8a7e:	f7fe ff4b 	bl	b7918 <free>
        data_ = d;
   b8a82:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8a84:	60ae      	str	r6, [r5, #8]
        return true;
   b8a86:	2001      	movs	r0, #1
    }
   b8a88:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8a8a:	2400      	movs	r4, #0
   b8a8c:	e7f6      	b.n	b8a7c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b8a8e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8a8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8a90:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8a92:	6845      	ldr	r5, [r0, #4]
   b8a94:	4668      	mov	r0, sp
   b8a96:	f7ff fbba 	bl	b820e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8a9a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8a9e:	4299      	cmp	r1, r3
   b8aa0:	da10      	bge.n	b8ac4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b8aa2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8aa4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8aa6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b8aaa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8aae:	4629      	mov	r1, r5
   b8ab0:	f105 0008 	add.w	r0, r5, #8
   b8ab4:	f7ff ffa9 	bl	b8a0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8ab8:	b98d      	cbnz	r5, b8ade <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b8aba:	6863      	ldr	r3, [r4, #4]
   b8abc:	3301      	adds	r3, #1
   b8abe:	6063      	str	r3, [r4, #4]
    return true;
   b8ac0:	2601      	movs	r6, #1
   b8ac2:	e006      	b.n	b8ad2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8ac4:	3101      	adds	r1, #1
   b8ac6:	4620      	mov	r0, r4
   b8ac8:	f7ff ffc9 	bl	b8a5e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8acc:	4606      	mov	r6, r0
   b8ace:	2800      	cmp	r0, #0
   b8ad0:	d1e7      	bne.n	b8aa2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b8ad2:	a801      	add	r0, sp, #4
   b8ad4:	f7ff fbbd 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8ad8:	4630      	mov	r0, r6
   b8ada:	b002      	add	sp, #8
   b8adc:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b8ade:	4669      	mov	r1, sp
   b8ae0:	4628      	mov	r0, r5
   b8ae2:	f7ff fb94 	bl	b820e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8ae6:	e7e8      	b.n	b8aba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8ae8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8aec:	4617      	mov	r7, r2
   b8aee:	b0a1      	sub	sp, #132	; 0x84
   b8af0:	4680      	mov	r8, r0
    WiringBleLock lk;
   b8af2:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8af4:	460e      	mov	r6, r1
    WiringBleLock lk;
   b8af6:	f7ff f837 	bl	b7b68 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8afa:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b8afc:	7923      	ldrb	r3, [r4, #4]
   b8afe:	b953      	cbnz	r3, b8b16 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b8b00:	4639      	mov	r1, r7
   b8b02:	4640      	mov	r0, r8
   b8b04:	f7ff fb83 	bl	b820e <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b8b08:	a80a      	add	r0, sp, #40	; 0x28
   b8b0a:	f7ff f83b 	bl	b7b84 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b8b0e:	4640      	mov	r0, r8
   b8b10:	b021      	add	sp, #132	; 0x84
   b8b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8b16:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b8b18:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b8b1c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b8b20:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b8b22:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b8b26:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b8b2a:	9b03      	ldr	r3, [sp, #12]
   b8b2c:	429d      	cmp	r5, r3
   b8b2e:	d021      	beq.n	b8b74 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b8b30:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b8b34:	4658      	mov	r0, fp
   b8b36:	f109 0114 	add.w	r1, r9, #20
   b8b3a:	f7ff f8c2 	bl	b7cc2 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b8b3e:	b1b8      	cbz	r0, b8b70 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b8b40:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b8b44:	4650      	mov	r0, sl
   b8b46:	f7ff f8bc 	bl	b7cc2 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b8b4a:	b188      	cbz	r0, b8b70 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b8b4c:	6823      	ldr	r3, [r4, #0]
   b8b4e:	f8d9 2000 	ldr.w	r2, [r9]
   b8b52:	4053      	eors	r3, r2
   b8b54:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b8b58:	d10a      	bne.n	b8b70 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b8b5a:	2220      	movs	r2, #32
   b8b5c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b8b60:	4a5e      	ldr	r2, [pc, #376]	; (b8cdc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b8b62:	9200      	str	r2, [sp, #0]
   b8b64:	aa15      	add	r2, sp, #84	; 0x54
   b8b66:	495e      	ldr	r1, [pc, #376]	; (b8ce0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b8b68:	2032      	movs	r0, #50	; 0x32
   b8b6a:	f7fe fe39 	bl	b77e0 <log_message>
   b8b6e:	e7c7      	b.n	b8b00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b8b70:	3508      	adds	r5, #8
   b8b72:	e7da      	b.n	b8b2a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b8b74:	4650      	mov	r0, sl
   b8b76:	f7ff f875 	bl	b7c64 <_ZNK8particle7BleUuid7isValidEv>
   b8b7a:	b960      	cbnz	r0, b8b96 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b8b7c:	4959      	ldr	r1, [pc, #356]	; (b8ce4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b8b7e:	2201      	movs	r2, #1
   b8b80:	a815      	add	r0, sp, #84	; 0x54
   b8b82:	ad15      	add	r5, sp, #84	; 0x54
   b8b84:	f7ff f846 	bl	b7c14 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b8b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8b8a:	46d4      	mov	ip, sl
   b8b8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8b90:	682b      	ldr	r3, [r5, #0]
   b8b92:	f8cc 3000 	str.w	r3, [ip]
   b8b96:	6833      	ldr	r3, [r6, #0]
   b8b98:	e9d3 5300 	ldrd	r5, r3, [r3]
   b8b9c:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b8ba0:	455d      	cmp	r5, fp
   b8ba2:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b8ba4:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b8ba6:	d06e      	beq.n	b8c86 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b8ba8:	f855 0b08 	ldr.w	r0, [r5], #8
   b8bac:	f7ff f889 	bl	b7cc2 <_ZNK8particle7BleUuideqERKS0_>
   b8bb0:	2800      	cmp	r0, #0
   b8bb2:	d0f5      	beq.n	b8ba0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b8bb4:	f104 0a14 	add.w	sl, r4, #20
   b8bb8:	4650      	mov	r0, sl
   b8bba:	f7ff f853 	bl	b7c64 <_ZNK8particle7BleUuid7isValidEv>
   b8bbe:	b988      	cbnz	r0, b8be4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b8bc0:	4b49      	ldr	r3, [pc, #292]	; (b8ce8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8bc2:	4948      	ldr	r1, [pc, #288]	; (b8ce4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b8bc4:	881a      	ldrh	r2, [r3, #0]
   b8bc6:	3201      	adds	r2, #1
   b8bc8:	b292      	uxth	r2, r2
   b8bca:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8bcc:	a815      	add	r0, sp, #84	; 0x54
   b8bce:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b8bd0:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8bd2:	f7ff f83e 	bl	b7c52 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b8bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8bd8:	46d4      	mov	ip, sl
   b8bda:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8bde:	682b      	ldr	r3, [r5, #0]
   b8be0:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b8be4:	4b41      	ldr	r3, [pc, #260]	; (b8cec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b8be6:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b8be8:	2228      	movs	r2, #40	; 0x28
   b8bea:	2100      	movs	r1, #0
   b8bec:	a816      	add	r0, sp, #88	; 0x58
   b8bee:	f002 fa10 	bl	bb012 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b8bf2:	4651      	mov	r1, sl
   b8bf4:	a804      	add	r0, sp, #16
   b8bf6:	f7ff f847 	bl	b7c88 <_ZN8particle7BleUuid7halUUIDEv>
   b8bfa:	ab04      	add	r3, sp, #16
   b8bfc:	aa18      	add	r2, sp, #96	; 0x60
   b8bfe:	f10d 0c20 	add.w	ip, sp, #32
   b8c02:	6818      	ldr	r0, [r3, #0]
   b8c04:	6859      	ldr	r1, [r3, #4]
   b8c06:	4615      	mov	r5, r2
   b8c08:	c503      	stmia	r5!, {r0, r1}
   b8c0a:	3308      	adds	r3, #8
   b8c0c:	4563      	cmp	r3, ip
   b8c0e:	462a      	mov	r2, r5
   b8c10:	d1f7      	bne.n	b8c02 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b8c12:	6818      	ldr	r0, [r3, #0]
   b8c14:	6028      	str	r0, [r5, #0]
    return value_;
   b8c16:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b8c18:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b8c1c:	f8d9 3000 	ldr.w	r3, [r9]
   b8c20:	8a9b      	ldrh	r3, [r3, #20]
   b8c22:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b8c26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8c28:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b8c2a:	4b31      	ldr	r3, [pc, #196]	; (b8cf0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8c2c:	2200      	movs	r2, #0
   b8c2e:	1da1      	adds	r1, r4, #6
   b8c30:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b8c32:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8c36:	f7fe fc4b 	bl	b74d0 <hal_ble_gatt_server_add_characteristic>
   b8c3a:	2800      	cmp	r0, #0
   b8c3c:	f47f af60 	bne.w	b8b00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b8c40:	2301      	movs	r3, #1
   b8c42:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b8c44:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b8c46:	4639      	mov	r1, r7
        return characteristics_;
   b8c48:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b8c4a:	a80d      	add	r0, sp, #52	; 0x34
   b8c4c:	f7ff fadf 	bl	b820e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8c50:	4620      	mov	r0, r4
   b8c52:	a90d      	add	r1, sp, #52	; 0x34
   b8c54:	f7ff ff1b 	bl	b8a8e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b8c58:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8c5a:	a80e      	add	r0, sp, #56	; 0x38
   b8c5c:	f7ff faf9 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8c60:	2c00      	cmp	r4, #0
   b8c62:	f47f af4d 	bne.w	b8b00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b8c66:	2320      	movs	r3, #32
   b8c68:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b8c6c:	4b21      	ldr	r3, [pc, #132]	; (b8cf4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b8c6e:	9300      	str	r3, [sp, #0]
   b8c70:	aa0d      	add	r2, sp, #52	; 0x34
   b8c72:	4623      	mov	r3, r4
   b8c74:	e777      	b.n	b8b66 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b8c76:	4639      	mov	r1, r7
   b8c78:	4640      	mov	r0, r8
   b8c7a:	f7ff fac8 	bl	b820e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8c7e:	a80c      	add	r0, sp, #48	; 0x30
   b8c80:	f7ff fae7 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8c84:	e740      	b.n	b8b08 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b8c86:	a80b      	add	r0, sp, #44	; 0x2c
   b8c88:	f7ff f94a 	bl	b7f20 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b8c8c:	4651      	mov	r1, sl
   b8c8e:	a815      	add	r0, sp, #84	; 0x54
   b8c90:	f7fe fffa 	bl	b7c88 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b8c94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8c96:	2300      	movs	r3, #0
   b8c98:	3214      	adds	r2, #20
   b8c9a:	a915      	add	r1, sp, #84	; 0x54
   b8c9c:	2001      	movs	r0, #1
   b8c9e:	f7fe fbef 	bl	b7480 <hal_ble_gatt_server_add_service>
   b8ca2:	2800      	cmp	r0, #0
   b8ca4:	d1e7      	bne.n	b8c76 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b8ca6:	6835      	ldr	r5, [r6, #0]
   b8ca8:	a90b      	add	r1, sp, #44	; 0x2c
   b8caa:	a80d      	add	r0, sp, #52	; 0x34
   b8cac:	f7ff fabd 	bl	b822a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b8cb0:	4628      	mov	r0, r5
   b8cb2:	a90d      	add	r1, sp, #52	; 0x34
   b8cb4:	f7ff fe7c 	bl	b89b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b8cb8:	4605      	mov	r5, r0
   b8cba:	a80e      	add	r0, sp, #56	; 0x38
   b8cbc:	f7ff fac9 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8cc0:	2d00      	cmp	r5, #0
   b8cc2:	d0d8      	beq.n	b8c76 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b8cc4:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b8cc6:	6853      	ldr	r3, [r2, #4]
   b8cc8:	6812      	ldr	r2, [r2, #0]
   b8cca:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b8cce:	3b01      	subs	r3, #1
   b8cd0:	a80c      	add	r0, sp, #48	; 0x30
   b8cd2:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b8cd6:	f7ff fabc 	bl	b8252 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8cda:	e76b      	b.n	b8bb4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b8cdc:	000bd5ea 	.word	0x000bd5ea
   b8ce0:	000bd507 	.word	0x000bd507
   b8ce4:	000bd6ae 	.word	0x000bd6ae
   b8ce8:	2003e6bc 	.word	0x2003e6bc
   b8cec:	002c0003 	.word	0x002c0003
   b8cf0:	000b80b9 	.word	0x000b80b9
   b8cf4:	000bd615 	.word	0x000bd615

000b8cf8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b8cf8:	4802      	ldr	r0, [pc, #8]	; (b8d04 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8cfa:	2300      	movs	r3, #0
   b8cfc:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b8cfe:	f7fe bc0f 	b.w	b7520 <os_mutex_recursive_create>
   b8d02:	bf00      	nop
   b8d04:	2003e6c0 	.word	0x2003e6c0

000b8d08 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8d08:	2200      	movs	r2, #0
   b8d0a:	6840      	ldr	r0, [r0, #4]
   b8d0c:	4611      	mov	r1, r2
   b8d0e:	f7fe bdd3 	b.w	b78b8 <network_listening>

000b8d12 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8d12:	2200      	movs	r2, #0
   b8d14:	6840      	ldr	r0, [r0, #4]
   b8d16:	4611      	mov	r1, r2
   b8d18:	f7fe bdde 	b.w	b78d8 <network_get_listen_timeout>

000b8d1c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8d1c:	6840      	ldr	r0, [r0, #4]
   b8d1e:	2200      	movs	r2, #0
   b8d20:	f7fe bdd2 	b.w	b78c8 <network_set_listen_timeout>

000b8d24 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8d24:	6840      	ldr	r0, [r0, #4]
   b8d26:	2200      	movs	r2, #0
   b8d28:	f081 0101 	eor.w	r1, r1, #1
   b8d2c:	f7fe bdbc 	b.w	b78a8 <network_listen>

000b8d30 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8d30:	2300      	movs	r3, #0
   b8d32:	6840      	ldr	r0, [r0, #4]
   b8d34:	461a      	mov	r2, r3
   b8d36:	4619      	mov	r1, r3
   b8d38:	f7fe bdae 	b.w	b7898 <network_off>

000b8d3c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8d3c:	2300      	movs	r3, #0
   b8d3e:	6840      	ldr	r0, [r0, #4]
   b8d40:	461a      	mov	r2, r3
   b8d42:	4619      	mov	r1, r3
   b8d44:	f7fe bda0 	b.w	b7888 <network_on>

000b8d48 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8d48:	2200      	movs	r2, #0
   b8d4a:	6840      	ldr	r0, [r0, #4]
   b8d4c:	4611      	mov	r1, r2
   b8d4e:	f7fe bd93 	b.w	b7878 <network_ready>

000b8d52 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8d52:	2200      	movs	r2, #0
   b8d54:	6840      	ldr	r0, [r0, #4]
   b8d56:	4611      	mov	r1, r2
   b8d58:	f7fe bd7e 	b.w	b7858 <network_connecting>

000b8d5c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8d5c:	6840      	ldr	r0, [r0, #4]
   b8d5e:	2200      	movs	r2, #0
   b8d60:	2102      	movs	r1, #2
   b8d62:	f7fe bd81 	b.w	b7868 <network_disconnect>

000b8d66 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8d66:	2300      	movs	r3, #0
   b8d68:	6840      	ldr	r0, [r0, #4]
   b8d6a:	461a      	mov	r2, r3
   b8d6c:	f7fe bd6c 	b.w	b7848 <network_connect>

000b8d70 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8d70:	4b02      	ldr	r3, [pc, #8]	; (b8d7c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8d72:	2203      	movs	r2, #3
   b8d74:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b8d76:	4a02      	ldr	r2, [pc, #8]	; (b8d80 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8d78:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8d7a:	4770      	bx	lr
   b8d7c:	2003e6c8 	.word	0x2003e6c8
   b8d80:	000bd6d8 	.word	0x000bd6d8

000b8d84 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8d84:	4770      	bx	lr

000b8d86 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8d88:	4606      	mov	r6, r0
   b8d8a:	4615      	mov	r5, r2
   b8d8c:	460c      	mov	r4, r1
   b8d8e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8d90:	42bc      	cmp	r4, r7
   b8d92:	d006      	beq.n	b8da2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8d94:	6833      	ldr	r3, [r6, #0]
   b8d96:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8d9a:	689b      	ldr	r3, [r3, #8]
   b8d9c:	4630      	mov	r0, r6
   b8d9e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8da0:	e7f6      	b.n	b8d90 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8da2:	4628      	mov	r0, r5
   b8da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8da6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8da6:	7c00      	ldrb	r0, [r0, #16]
   b8da8:	2200      	movs	r2, #0
   b8daa:	f7fe bc09 	b.w	b75c0 <hal_i2c_write>

000b8dae <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8dae:	7c00      	ldrb	r0, [r0, #16]
   b8db0:	2100      	movs	r1, #0
   b8db2:	f7fe bc0d 	b.w	b75d0 <hal_i2c_available>

000b8db6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8db6:	7c00      	ldrb	r0, [r0, #16]
   b8db8:	2100      	movs	r1, #0
   b8dba:	f7fe bc11 	b.w	b75e0 <hal_i2c_read>

000b8dbe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8dbe:	7c00      	ldrb	r0, [r0, #16]
   b8dc0:	2100      	movs	r1, #0
   b8dc2:	f7fe bc15 	b.w	b75f0 <hal_i2c_peek>

000b8dc6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8dc6:	7c00      	ldrb	r0, [r0, #16]
   b8dc8:	2100      	movs	r1, #0
   b8dca:	f7fe bc19 	b.w	b7600 <hal_i2c_flush>

000b8dce <_ZN7TwoWireD0Ev>:
   b8dce:	b510      	push	{r4, lr}
   b8dd0:	2114      	movs	r1, #20
   b8dd2:	4604      	mov	r4, r0
   b8dd4:	f7fb f965 	bl	b40a2 <_ZdlPvj>
   b8dd8:	4620      	mov	r0, r4
   b8dda:	bd10      	pop	{r4, pc}

000b8ddc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8ddc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8de2:	4604      	mov	r4, r0
   b8de4:	4608      	mov	r0, r1
   b8de6:	2100      	movs	r1, #0
   b8de8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8dec:	4b03      	ldr	r3, [pc, #12]	; (b8dfc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b8dee:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b8df0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b8df2:	4611      	mov	r1, r2
   b8df4:	f7fe fc0c 	bl	b7610 <hal_i2c_init>
}
   b8df8:	4620      	mov	r0, r4
   b8dfa:	bd10      	pop	{r4, pc}
   b8dfc:	000bd714 	.word	0x000bd714

000b8e00 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8e00:	2300      	movs	r3, #0
   b8e02:	7c00      	ldrb	r0, [r0, #16]
   b8e04:	461a      	mov	r2, r3
   b8e06:	4619      	mov	r1, r3
   b8e08:	f7fe bbc2 	b.w	b7590 <hal_i2c_begin>

000b8e0c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b8e0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b8e0e:	2200      	movs	r2, #0
   b8e10:	2314      	movs	r3, #20
   b8e12:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b8e16:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b8e1a:	780b      	ldrb	r3, [r1, #0]
   b8e1c:	f88d 3008 	strb.w	r3, [sp, #8]
   b8e20:	684b      	ldr	r3, [r1, #4]
   b8e22:	9303      	str	r3, [sp, #12]
   b8e24:	68cb      	ldr	r3, [r1, #12]
   b8e26:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b8e28:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b8e2a:	7a0b      	ldrb	r3, [r1, #8]
   b8e2c:	9305      	str	r3, [sp, #20]
   b8e2e:	a901      	add	r1, sp, #4
   b8e30:	f7fe fbf6 	bl	b7620 <hal_i2c_request_ex>
}
   b8e34:	b007      	add	sp, #28
   b8e36:	f85d fb04 	ldr.w	pc, [sp], #4

000b8e3a <_ZN7TwoWire11requestFromEhjh>:
{
   b8e3a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b8e3c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8e3e:	f88d 1000 	strb.w	r1, [sp]
   b8e42:	f04f 0164 	mov.w	r1, #100	; 0x64
   b8e46:	9103      	str	r1, [sp, #12]
   b8e48:	bf18      	it	ne
   b8e4a:	2301      	movne	r3, #1
   b8e4c:	4669      	mov	r1, sp
    size_ = size;
   b8e4e:	9201      	str	r2, [sp, #4]
   b8e50:	f88d 3008 	strb.w	r3, [sp, #8]
   b8e54:	f7ff ffda 	bl	b8e0c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b8e58:	b005      	add	sp, #20
   b8e5a:	f85d fb04 	ldr.w	pc, [sp], #4

000b8e5e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b8e5e:	2301      	movs	r3, #1
   b8e60:	f7ff bfeb 	b.w	b8e3a <_ZN7TwoWire11requestFromEhjh>

000b8e64 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b8e64:	7c00      	ldrb	r0, [r0, #16]
   b8e66:	2200      	movs	r2, #0
   b8e68:	f7fe bb9a 	b.w	b75a0 <hal_i2c_begin_transmission>

000b8e6c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8e6c:	b2c9      	uxtb	r1, r1
   b8e6e:	f7ff bff9 	b.w	b8e64 <_ZN7TwoWire17beginTransmissionEh>

000b8e72 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b8e72:	7c00      	ldrb	r0, [r0, #16]
   b8e74:	2200      	movs	r2, #0
   b8e76:	f7fe bb9b 	b.w	b75b0 <hal_i2c_end_transmission>

000b8e7a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b8e7a:	2101      	movs	r1, #1
   b8e7c:	f7ff bff9 	b.w	b8e72 <_ZN7TwoWire15endTransmissionEh>

000b8e80 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8e80:	4770      	bx	lr

000b8e82 <_ZN9IPAddressD0Ev>:
   b8e82:	b510      	push	{r4, lr}
   b8e84:	2118      	movs	r1, #24
   b8e86:	4604      	mov	r4, r0
   b8e88:	f7fb f90b 	bl	b40a2 <_ZdlPvj>
   b8e8c:	4620      	mov	r0, r4
   b8e8e:	bd10      	pop	{r4, pc}

000b8e90 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8e90:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8e92:	7d03      	ldrb	r3, [r0, #20]
   b8e94:	2b06      	cmp	r3, #6
{
   b8e96:	b08d      	sub	sp, #52	; 0x34
   b8e98:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8e9a:	f100 0704 	add.w	r7, r0, #4
   b8e9e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8ea2:	d012      	beq.n	b8eca <_ZNK9IPAddress7printToER5Print+0x3a>
   b8ea4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8ea8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8eac:	220a      	movs	r2, #10
   b8eae:	4630      	mov	r0, r6
   b8eb0:	f000 f973 	bl	b919a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8eb4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8eb6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8eb8:	d019      	beq.n	b8eee <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8eba:	2c00      	cmp	r4, #0
   b8ebc:	d0f4      	beq.n	b8ea8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8ebe:	212e      	movs	r1, #46	; 0x2e
   b8ec0:	4630      	mov	r0, r6
   b8ec2:	f000 f951 	bl	b9168 <_ZN5Print5printEc>
   b8ec6:	4404      	add	r4, r0
   b8ec8:	e7ee      	b.n	b8ea8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8eca:	232f      	movs	r3, #47	; 0x2f
   b8ecc:	466a      	mov	r2, sp
   b8ece:	4639      	mov	r1, r7
   b8ed0:	200a      	movs	r0, #10
		buf[0] = 0;
   b8ed2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8ed6:	f7fe fbb3 	bl	b7640 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8eda:	4668      	mov	r0, sp
   b8edc:	f002 f8e2 	bl	bb0a4 <strlen>
   b8ee0:	6833      	ldr	r3, [r6, #0]
   b8ee2:	4602      	mov	r2, r0
   b8ee4:	68db      	ldr	r3, [r3, #12]
   b8ee6:	4669      	mov	r1, sp
   b8ee8:	4630      	mov	r0, r6
   b8eea:	4798      	blx	r3
   b8eec:	4604      	mov	r4, r0
    }
    return n;
}
   b8eee:	4620      	mov	r0, r4
   b8ef0:	b00d      	add	sp, #52	; 0x34
   b8ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8ef4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8ef4:	b510      	push	{r4, lr}
   b8ef6:	4b05      	ldr	r3, [pc, #20]	; (b8f0c <_ZN9IPAddressC1Ev+0x18>)
   b8ef8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b8efa:	2211      	movs	r2, #17
   b8efc:	f840 3b04 	str.w	r3, [r0], #4
   b8f00:	2100      	movs	r1, #0
   b8f02:	f002 f886 	bl	bb012 <memset>
}
   b8f06:	4620      	mov	r0, r4
   b8f08:	bd10      	pop	{r4, pc}
   b8f0a:	bf00      	nop
   b8f0c:	000bd73c 	.word	0x000bd73c

000b8f10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8f10:	4603      	mov	r3, r0
   b8f12:	4a07      	ldr	r2, [pc, #28]	; (b8f30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8f14:	b510      	push	{r4, lr}
   b8f16:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b8f1a:	f101 0210 	add.w	r2, r1, #16
   b8f1e:	f851 4b04 	ldr.w	r4, [r1], #4
   b8f22:	f843 4b04 	str.w	r4, [r3], #4
   b8f26:	4291      	cmp	r1, r2
   b8f28:	d1f9      	bne.n	b8f1e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b8f2a:	780a      	ldrb	r2, [r1, #0]
   b8f2c:	701a      	strb	r2, [r3, #0]
}
   b8f2e:	bd10      	pop	{r4, pc}
   b8f30:	000bd73c 	.word	0x000bd73c

000b8f34 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b8f34:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b8f36:	2b04      	cmp	r3, #4
   b8f38:	d104      	bne.n	b8f44 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b8f3a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8f3c:	3800      	subs	r0, #0
   b8f3e:	bf18      	it	ne
   b8f40:	2001      	movne	r0, #1
   b8f42:	4770      	bx	lr
    } else if (version() == 6) {
   b8f44:	2b06      	cmp	r3, #6
   b8f46:	d107      	bne.n	b8f58 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8f48:	6843      	ldr	r3, [r0, #4]
   b8f4a:	b93b      	cbnz	r3, b8f5c <_ZNK9IPAddresscvbEv+0x28>
   b8f4c:	6883      	ldr	r3, [r0, #8]
   b8f4e:	b92b      	cbnz	r3, b8f5c <_ZNK9IPAddresscvbEv+0x28>
   b8f50:	68c3      	ldr	r3, [r0, #12]
   b8f52:	b91b      	cbnz	r3, b8f5c <_ZNK9IPAddresscvbEv+0x28>
   b8f54:	6900      	ldr	r0, [r0, #16]
   b8f56:	e7f1      	b.n	b8f3c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b8f58:	2000      	movs	r0, #0
   b8f5a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8f5c:	2001      	movs	r0, #1
}
   b8f5e:	4770      	bx	lr

000b8f60 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8f60:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8f62:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b8f66:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8f6a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8f6e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8f72:	2304      	movs	r3, #4
   b8f74:	6041      	str	r1, [r0, #4]
   b8f76:	7503      	strb	r3, [r0, #20]
}
   b8f78:	bd10      	pop	{r4, pc}
	...

000b8f7c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8f7c:	b507      	push	{r0, r1, r2, lr}
   b8f7e:	4b06      	ldr	r3, [pc, #24]	; (b8f98 <_ZN9IPAddressC1EPKh+0x1c>)
   b8f80:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b8f82:	78cb      	ldrb	r3, [r1, #3]
   b8f84:	9300      	str	r3, [sp, #0]
   b8f86:	788b      	ldrb	r3, [r1, #2]
   b8f88:	784a      	ldrb	r2, [r1, #1]
   b8f8a:	7809      	ldrb	r1, [r1, #0]
   b8f8c:	f7ff ffe8 	bl	b8f60 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8f90:	b003      	add	sp, #12
   b8f92:	f85d fb04 	ldr.w	pc, [sp], #4
   b8f96:	bf00      	nop
   b8f98:	000bd73c 	.word	0x000bd73c

000b8f9c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8f9c:	4b01      	ldr	r3, [pc, #4]	; (b8fa4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8f9e:	4a02      	ldr	r2, [pc, #8]	; (b8fa8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8fa0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b8fa2:	4770      	bx	lr
   b8fa4:	2003e6d0 	.word	0x2003e6d0
   b8fa8:	000bd748 	.word	0x000bd748

000b8fac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8fac:	2300      	movs	r3, #0
   b8fae:	6840      	ldr	r0, [r0, #4]
   b8fb0:	461a      	mov	r2, r3
   b8fb2:	f7fe bc49 	b.w	b7848 <network_connect>

000b8fb6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b8fb6:	6840      	ldr	r0, [r0, #4]
   b8fb8:	2200      	movs	r2, #0
   b8fba:	2102      	movs	r1, #2
   b8fbc:	f7fe bc54 	b.w	b7868 <network_disconnect>

000b8fc0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8fc0:	2200      	movs	r2, #0
   b8fc2:	6840      	ldr	r0, [r0, #4]
   b8fc4:	4611      	mov	r1, r2
   b8fc6:	f7fe bc47 	b.w	b7858 <network_connecting>

000b8fca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8fca:	2200      	movs	r2, #0
   b8fcc:	6840      	ldr	r0, [r0, #4]
   b8fce:	4611      	mov	r1, r2
   b8fd0:	f7fe bc52 	b.w	b7878 <network_ready>

000b8fd4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b8fd4:	2300      	movs	r3, #0
   b8fd6:	6840      	ldr	r0, [r0, #4]
   b8fd8:	461a      	mov	r2, r3
   b8fda:	4619      	mov	r1, r3
   b8fdc:	f7fe bc54 	b.w	b7888 <network_on>

000b8fe0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8fe0:	2300      	movs	r3, #0
   b8fe2:	6840      	ldr	r0, [r0, #4]
   b8fe4:	461a      	mov	r2, r3
   b8fe6:	4619      	mov	r1, r3
   b8fe8:	f7fe bc56 	b.w	b7898 <network_off>

000b8fec <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8fec:	6840      	ldr	r0, [r0, #4]
   b8fee:	2100      	movs	r1, #0
   b8ff0:	f7fe bc7a 	b.w	b78e8 <network_is_on>

000b8ff4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8ff4:	6840      	ldr	r0, [r0, #4]
   b8ff6:	2100      	movs	r1, #0
   b8ff8:	f7fe bc7e 	b.w	b78f8 <network_is_off>

000b8ffc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8ffc:	6840      	ldr	r0, [r0, #4]
   b8ffe:	2200      	movs	r2, #0
   b9000:	f081 0101 	eor.w	r1, r1, #1
   b9004:	f7fe bc50 	b.w	b78a8 <network_listen>

000b9008 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b9008:	6840      	ldr	r0, [r0, #4]
   b900a:	2200      	movs	r2, #0
   b900c:	f7fe bc5c 	b.w	b78c8 <network_set_listen_timeout>

000b9010 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b9010:	2200      	movs	r2, #0
   b9012:	6840      	ldr	r0, [r0, #4]
   b9014:	4611      	mov	r1, r2
   b9016:	f7fe bc5f 	b.w	b78d8 <network_get_listen_timeout>

000b901a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b901a:	2200      	movs	r2, #0
   b901c:	6840      	ldr	r0, [r0, #4]
   b901e:	4611      	mov	r1, r2
   b9020:	f7fe bc4a 	b.w	b78b8 <network_listening>

000b9024 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b9024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9028:	b095      	sub	sp, #84	; 0x54
   b902a:	4614      	mov	r4, r2
   b902c:	460d      	mov	r5, r1
   b902e:	4607      	mov	r7, r0
    IPAddress addr;
   b9030:	f7ff ff60 	bl	b8ef4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b9034:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b9036:	221c      	movs	r2, #28
   b9038:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b903a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b903c:	f001 ffe9 	bl	bb012 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b9040:	2340      	movs	r3, #64	; 0x40
   b9042:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b9044:	4620      	mov	r0, r4
   b9046:	466b      	mov	r3, sp
   b9048:	aa0c      	add	r2, sp, #48	; 0x30
   b904a:	2100      	movs	r1, #0
   b904c:	f7fe fb18 	bl	b7680 <netdb_getaddrinfo>
    if (!r) {
   b9050:	4604      	mov	r4, r0
   b9052:	2800      	cmp	r0, #0
   b9054:	d14b      	bne.n	b90ee <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9056:	4602      	mov	r2, r0
   b9058:	2101      	movs	r1, #1
   b905a:	6868      	ldr	r0, [r5, #4]
   b905c:	f7fe fc0c 	bl	b7878 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9060:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9062:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9064:	4622      	mov	r2, r4
   b9066:	6868      	ldr	r0, [r5, #4]
   b9068:	f7fe fc06 	bl	b7878 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b906c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b906e:	4681      	mov	r9, r0
        bool ok = false;
   b9070:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9072:	2e00      	cmp	r6, #0
   b9074:	d03b      	beq.n	b90ee <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b9076:	2900      	cmp	r1, #0
   b9078:	d139      	bne.n	b90ee <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b907a:	6873      	ldr	r3, [r6, #4]
   b907c:	2b02      	cmp	r3, #2
   b907e:	d003      	beq.n	b9088 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b9080:	2b0a      	cmp	r3, #10
   b9082:	d011      	beq.n	b90a8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9084:	69f6      	ldr	r6, [r6, #28]
   b9086:	e7f4      	b.n	b9072 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b9088:	f1b8 0f00 	cmp.w	r8, #0
   b908c:	d0fa      	beq.n	b9084 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b908e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b9090:	a806      	add	r0, sp, #24
   b9092:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b9094:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b9096:	f7ff ff71 	bl	b8f7c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b909a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b909c:	1d3c      	adds	r4, r7, #4
   b909e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b90a0:	682b      	ldr	r3, [r5, #0]
   b90a2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b90a4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b90a6:	e7ed      	b.n	b9084 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b90a8:	f1b9 0f00 	cmp.w	r9, #0
   b90ac:	d0ea      	beq.n	b9084 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b90ae:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b90b0:	2210      	movs	r2, #16
   b90b2:	a801      	add	r0, sp, #4
   b90b4:	f001 ffad 	bl	bb012 <memset>
                    a.v = 6;
   b90b8:	2306      	movs	r3, #6
   b90ba:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b90be:	ad01      	add	r5, sp, #4
   b90c0:	f104 0308 	add.w	r3, r4, #8
   b90c4:	3418      	adds	r4, #24
   b90c6:	6818      	ldr	r0, [r3, #0]
   b90c8:	6859      	ldr	r1, [r3, #4]
   b90ca:	462a      	mov	r2, r5
   b90cc:	c203      	stmia	r2!, {r0, r1}
   b90ce:	3308      	adds	r3, #8
   b90d0:	42a3      	cmp	r3, r4
   b90d2:	4615      	mov	r5, r2
   b90d4:	d1f7      	bne.n	b90c6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b90d6:	a901      	add	r1, sp, #4
   b90d8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b90da:	ad07      	add	r5, sp, #28
   b90dc:	f7ff ff18 	bl	b8f10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b90e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b90e2:	1d3c      	adds	r4, r7, #4
   b90e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b90e6:	682b      	ldr	r3, [r5, #0]
   b90e8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b90ea:	4649      	mov	r1, r9
   b90ec:	e7ca      	b.n	b9084 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b90ee:	9800      	ldr	r0, [sp, #0]
   b90f0:	f7fe fabe 	bl	b7670 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b90f4:	4638      	mov	r0, r7
   b90f6:	b015      	add	sp, #84	; 0x54
   b90f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b90fc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b90fc:	4b02      	ldr	r3, [pc, #8]	; (b9108 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b90fe:	4a03      	ldr	r2, [pc, #12]	; (b910c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b9100:	601a      	str	r2, [r3, #0]
   b9102:	2200      	movs	r2, #0
   b9104:	605a      	str	r2, [r3, #4]

} // spark
   b9106:	4770      	bx	lr
   b9108:	2003e6d4 	.word	0x2003e6d4
   b910c:	000bd754 	.word	0x000bd754

000b9110 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b9110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9112:	4606      	mov	r6, r0
   b9114:	460d      	mov	r5, r1
  size_t n = 0;
   b9116:	188f      	adds	r7, r1, r2
   b9118:	2400      	movs	r4, #0
  while (size--) {
   b911a:	42bd      	cmp	r5, r7
   b911c:	d00c      	beq.n	b9138 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b911e:	6833      	ldr	r3, [r6, #0]
   b9120:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9124:	689b      	ldr	r3, [r3, #8]
   b9126:	4630      	mov	r0, r6
   b9128:	4798      	blx	r3
     if (chunk>=0)
   b912a:	1e03      	subs	r3, r0, #0
   b912c:	db01      	blt.n	b9132 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b912e:	441c      	add	r4, r3
  while (size--) {
   b9130:	e7f3      	b.n	b911a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b9132:	2c00      	cmp	r4, #0
   b9134:	bf08      	it	eq
   b9136:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b9138:	4620      	mov	r0, r4
   b913a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b913c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b913c:	b513      	push	{r0, r1, r4, lr}
   b913e:	4604      	mov	r4, r0
    }
   b9140:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b9142:	b159      	cbz	r1, b915c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b9144:	9101      	str	r1, [sp, #4]
   b9146:	f001 ffad 	bl	bb0a4 <strlen>
   b914a:	6823      	ldr	r3, [r4, #0]
   b914c:	9901      	ldr	r1, [sp, #4]
   b914e:	68db      	ldr	r3, [r3, #12]
   b9150:	4602      	mov	r2, r0
   b9152:	4620      	mov	r0, r4
    }
   b9154:	b002      	add	sp, #8
   b9156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b915a:	4718      	bx	r3
    }
   b915c:	b002      	add	sp, #8
   b915e:	bd10      	pop	{r4, pc}

000b9160 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b9160:	b508      	push	{r3, lr}
  return write(str);
   b9162:	f7ff ffeb 	bl	b913c <_ZN5Print5writeEPKc>
}
   b9166:	bd08      	pop	{r3, pc}

000b9168 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b9168:	6803      	ldr	r3, [r0, #0]
   b916a:	689b      	ldr	r3, [r3, #8]
   b916c:	4718      	bx	r3

000b916e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b916e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b9170:	210d      	movs	r1, #13
{
   b9172:	4605      	mov	r5, r0
  size_t n = print('\r');
   b9174:	f7ff fff8 	bl	b9168 <_ZN5Print5printEc>
  n += print('\n');
   b9178:	210a      	movs	r1, #10
  size_t n = print('\r');
   b917a:	4604      	mov	r4, r0
  n += print('\n');
   b917c:	4628      	mov	r0, r5
   b917e:	f7ff fff3 	bl	b9168 <_ZN5Print5printEc>
  return n;
}
   b9182:	4420      	add	r0, r4
   b9184:	bd38      	pop	{r3, r4, r5, pc}

000b9186 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b9186:	b538      	push	{r3, r4, r5, lr}
   b9188:	4605      	mov	r5, r0
  return write(str);
   b918a:	f7ff ffd7 	bl	b913c <_ZN5Print5writeEPKc>
   b918e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b9190:	4628      	mov	r0, r5
   b9192:	f7ff ffec 	bl	b916e <_ZN5Print7printlnEv>
  return n;
}
   b9196:	4420      	add	r0, r4
   b9198:	bd38      	pop	{r3, r4, r5, pc}

000b919a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b919a:	b530      	push	{r4, r5, lr}
   b919c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b919e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b91a0:	2a01      	cmp	r2, #1
  *str = '\0';
   b91a2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b91a6:	bf98      	it	ls
   b91a8:	220a      	movls	r2, #10
   b91aa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b91ac:	460d      	mov	r5, r1
   b91ae:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b91b2:	fb01 5312 	mls	r3, r1, r2, r5
   b91b6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b91ba:	2b09      	cmp	r3, #9
   b91bc:	bf94      	ite	ls
   b91be:	3330      	addls	r3, #48	; 0x30
   b91c0:	3337      	addhi	r3, #55	; 0x37
   b91c2:	b2db      	uxtb	r3, r3
  } while(n);
   b91c4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b91c6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b91ca:	d9ef      	bls.n	b91ac <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b91cc:	4621      	mov	r1, r4
   b91ce:	f7ff ffb5 	bl	b913c <_ZN5Print5writeEPKc>
}
   b91d2:	b00b      	add	sp, #44	; 0x2c
   b91d4:	bd30      	pop	{r4, r5, pc}

000b91d6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b91d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b91da:	b086      	sub	sp, #24
   b91dc:	af00      	add	r7, sp, #0
   b91de:	4605      	mov	r5, r0
   b91e0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b91e2:	1d38      	adds	r0, r7, #4
   b91e4:	2114      	movs	r1, #20
{
   b91e6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b91e8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b91ea:	f7fe fbad 	bl	b7948 <vsnprintf>

    if (n<bufsize)
   b91ee:	2813      	cmp	r0, #19
   b91f0:	d80e      	bhi.n	b9210 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b91f2:	1d39      	adds	r1, r7, #4
   b91f4:	4628      	mov	r0, r5
   b91f6:	f7ff ffa1 	bl	b913c <_ZN5Print5writeEPKc>
   b91fa:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b91fc:	b11e      	cbz	r6, b9206 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b91fe:	4628      	mov	r0, r5
   b9200:	f7ff ffb5 	bl	b916e <_ZN5Print7printlnEv>
   b9204:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b9206:	4620      	mov	r0, r4
   b9208:	3718      	adds	r7, #24
   b920a:	46bd      	mov	sp, r7
   b920c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b9210:	f100 0308 	add.w	r3, r0, #8
   b9214:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b9218:	46e8      	mov	r8, sp
        char bigger[n+1];
   b921a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b921e:	4622      	mov	r2, r4
   b9220:	1c41      	adds	r1, r0, #1
   b9222:	683b      	ldr	r3, [r7, #0]
   b9224:	4668      	mov	r0, sp
   b9226:	f7fe fb8f 	bl	b7948 <vsnprintf>
  return write(str);
   b922a:	4669      	mov	r1, sp
   b922c:	4628      	mov	r0, r5
   b922e:	f7ff ff85 	bl	b913c <_ZN5Print5writeEPKc>
   b9232:	4604      	mov	r4, r0
   b9234:	46c5      	mov	sp, r8
   b9236:	e7e1      	b.n	b91fc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b9238 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b9238:	4b01      	ldr	r3, [pc, #4]	; (b9240 <_GLOBAL__sub_I_RGB+0x8>)
   b923a:	2200      	movs	r2, #0
   b923c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b923e:	4770      	bx	lr
   b9240:	2003e6dc 	.word	0x2003e6dc

000b9244 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b9244:	b510      	push	{r4, lr}
   b9246:	4604      	mov	r4, r0
{
	free(buffer);
   b9248:	6800      	ldr	r0, [r0, #0]
   b924a:	f7fe fb65 	bl	b7918 <free>
}
   b924e:	4620      	mov	r0, r4
   b9250:	bd10      	pop	{r4, pc}

000b9252 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b9252:	b510      	push	{r4, lr}
   b9254:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b9256:	6800      	ldr	r0, [r0, #0]
   b9258:	b108      	cbz	r0, b925e <_ZN6String10invalidateEv+0xc>
   b925a:	f7fe fb5d 	bl	b7918 <free>
	buffer = NULL;
   b925e:	2300      	movs	r3, #0
	capacity = len = 0;
   b9260:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b9264:	6023      	str	r3, [r4, #0]
}
   b9266:	bd10      	pop	{r4, pc}

000b9268 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b9268:	b538      	push	{r3, r4, r5, lr}
   b926a:	4604      	mov	r4, r0
   b926c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b926e:	6800      	ldr	r0, [r0, #0]
   b9270:	3101      	adds	r1, #1
   b9272:	f7fe fb59 	bl	b7928 <realloc>
	if (newbuffer) {
   b9276:	b110      	cbz	r0, b927e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b9278:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b927c:	2001      	movs	r0, #1
	}
	return 0;
}
   b927e:	bd38      	pop	{r3, r4, r5, pc}

000b9280 <_ZN6String7reserveEj>:
{
   b9280:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b9282:	6803      	ldr	r3, [r0, #0]
{
   b9284:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b9286:	b123      	cbz	r3, b9292 <_ZN6String7reserveEj+0x12>
   b9288:	6843      	ldr	r3, [r0, #4]
   b928a:	428b      	cmp	r3, r1
   b928c:	d301      	bcc.n	b9292 <_ZN6String7reserveEj+0x12>
   b928e:	2001      	movs	r0, #1
}
   b9290:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b9292:	4620      	mov	r0, r4
   b9294:	f7ff ffe8 	bl	b9268 <_ZN6String12changeBufferEj>
   b9298:	2800      	cmp	r0, #0
   b929a:	d0f9      	beq.n	b9290 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b929c:	68a3      	ldr	r3, [r4, #8]
   b929e:	2b00      	cmp	r3, #0
   b92a0:	d1f5      	bne.n	b928e <_ZN6String7reserveEj+0xe>
   b92a2:	6822      	ldr	r2, [r4, #0]
   b92a4:	7013      	strb	r3, [r2, #0]
   b92a6:	e7f2      	b.n	b928e <_ZN6String7reserveEj+0xe>

000b92a8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b92a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b92aa:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b92ac:	4611      	mov	r1, r2
   b92ae:	9201      	str	r2, [sp, #4]
{
   b92b0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b92b2:	f7ff ffe5 	bl	b9280 <_ZN6String7reserveEj>
   b92b6:	9a01      	ldr	r2, [sp, #4]
   b92b8:	b928      	cbnz	r0, b92c6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b92ba:	4620      	mov	r0, r4
   b92bc:	f7ff ffc9 	bl	b9252 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b92c0:	4620      	mov	r0, r4
   b92c2:	b003      	add	sp, #12
   b92c4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b92c6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b92c8:	4629      	mov	r1, r5
   b92ca:	6820      	ldr	r0, [r4, #0]
   b92cc:	f001 fe79 	bl	bafc2 <memcpy>
	buffer[len] = 0;
   b92d0:	6822      	ldr	r2, [r4, #0]
   b92d2:	68a3      	ldr	r3, [r4, #8]
   b92d4:	2100      	movs	r1, #0
   b92d6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b92d8:	e7f2      	b.n	b92c0 <_ZN6String4copyEPKcj+0x18>

000b92da <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b92da:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b92dc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b92de:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b92e2:	4604      	mov	r4, r0
	len = 0;
   b92e4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b92e6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b92e8:	b141      	cbz	r1, b92fc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b92ea:	4608      	mov	r0, r1
   b92ec:	9101      	str	r1, [sp, #4]
   b92ee:	f001 fed9 	bl	bb0a4 <strlen>
   b92f2:	9901      	ldr	r1, [sp, #4]
   b92f4:	4602      	mov	r2, r0
   b92f6:	4620      	mov	r0, r4
   b92f8:	f7ff ffd6 	bl	b92a8 <_ZN6String4copyEPKcj>
}
   b92fc:	4620      	mov	r0, r4
   b92fe:	b002      	add	sp, #8
   b9300:	bd10      	pop	{r4, pc}

000b9302 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b9302:	4288      	cmp	r0, r1
{
   b9304:	b510      	push	{r4, lr}
   b9306:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b9308:	d005      	beq.n	b9316 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b930a:	680b      	ldr	r3, [r1, #0]
   b930c:	b12b      	cbz	r3, b931a <_ZN6StringaSERKS_+0x18>
   b930e:	688a      	ldr	r2, [r1, #8]
   b9310:	4619      	mov	r1, r3
   b9312:	f7ff ffc9 	bl	b92a8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b9316:	4620      	mov	r0, r4
   b9318:	bd10      	pop	{r4, pc}
	else invalidate();
   b931a:	f7ff ff9a 	bl	b9252 <_ZN6String10invalidateEv>
   b931e:	e7fa      	b.n	b9316 <_ZN6StringaSERKS_+0x14>

000b9320 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b9320:	b510      	push	{r4, lr}
	buffer = NULL;
   b9322:	2300      	movs	r3, #0
String::String(const String &value)
   b9324:	4604      	mov	r4, r0
	capacity = 0;
   b9326:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b932a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b932c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b932e:	f7ff ffe8 	bl	b9302 <_ZN6StringaSERKS_>
}
   b9332:	4620      	mov	r0, r4
   b9334:	bd10      	pop	{r4, pc}

000b9336 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b9336:	b513      	push	{r0, r1, r4, lr}
   b9338:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b933a:	b159      	cbz	r1, b9354 <_ZN6StringaSEPKc+0x1e>
   b933c:	4608      	mov	r0, r1
   b933e:	9101      	str	r1, [sp, #4]
   b9340:	f001 feb0 	bl	bb0a4 <strlen>
   b9344:	9901      	ldr	r1, [sp, #4]
   b9346:	4602      	mov	r2, r0
   b9348:	4620      	mov	r0, r4
   b934a:	f7ff ffad 	bl	b92a8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b934e:	4620      	mov	r0, r4
   b9350:	b002      	add	sp, #8
   b9352:	bd10      	pop	{r4, pc}
	else invalidate();
   b9354:	f7ff ff7d 	bl	b9252 <_ZN6String10invalidateEv>
   b9358:	e7f9      	b.n	b934e <_ZN6StringaSEPKc+0x18>

000b935a <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b935a:	b510      	push	{r4, lr}
   b935c:	4604      	mov	r4, r0
   b935e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b9360:	2300      	movs	r3, #0
	capacity = 0;
   b9362:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b9366:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b9368:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b936a:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b936c:	a901      	add	r1, sp, #4
   b936e:	f000 fcf7 	bl	b9d60 <itoa>
	*this = buf;
   b9372:	a901      	add	r1, sp, #4
   b9374:	4620      	mov	r0, r4
   b9376:	f7ff ffde 	bl	b9336 <_ZN6StringaSEPKc>
}
   b937a:	4620      	mov	r0, r4
   b937c:	b00a      	add	sp, #40	; 0x28
   b937e:	bd10      	pop	{r4, pc}

000b9380 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b9380:	b570      	push	{r4, r5, r6, lr}
   b9382:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b9384:	460e      	mov	r6, r1
   b9386:	b909      	cbnz	r1, b938c <_ZN6String6concatEPKcj+0xc>
   b9388:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b938a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b938c:	b16a      	cbz	r2, b93aa <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b938e:	6884      	ldr	r4, [r0, #8]
   b9390:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b9392:	4621      	mov	r1, r4
   b9394:	f7ff ff74 	bl	b9280 <_ZN6String7reserveEj>
   b9398:	2800      	cmp	r0, #0
   b939a:	d0f5      	beq.n	b9388 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b939c:	6828      	ldr	r0, [r5, #0]
   b939e:	68ab      	ldr	r3, [r5, #8]
   b93a0:	4631      	mov	r1, r6
   b93a2:	4418      	add	r0, r3
   b93a4:	f001 fe76 	bl	bb094 <strcpy>
	len = newlen;
   b93a8:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b93aa:	2001      	movs	r0, #1
   b93ac:	e7ed      	b.n	b938a <_ZN6String6concatEPKcj+0xa>

000b93ae <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b93ae:	688a      	ldr	r2, [r1, #8]
   b93b0:	6809      	ldr	r1, [r1, #0]
   b93b2:	f7ff bfe5 	b.w	b9380 <_ZN6String6concatEPKcj>

000b93b6 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b93b6:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b93b8:	2300      	movs	r3, #0
	buf[0] = c;
   b93ba:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b93be:	2201      	movs	r2, #1
   b93c0:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b93c2:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b93c6:	f7ff ffdb 	bl	b9380 <_ZN6String6concatEPKcj>
}
   b93ca:	b003      	add	sp, #12
   b93cc:	f85d fb04 	ldr.w	pc, [sp], #4

000b93d0 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b93d0:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b93d2:	688a      	ldr	r2, [r1, #8]
   b93d4:	6809      	ldr	r1, [r1, #0]
{
   b93d6:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b93d8:	f7ff ffd2 	bl	b9380 <_ZN6String6concatEPKcj>
   b93dc:	b910      	cbnz	r0, b93e4 <_ZplRK15StringSumHelperRK6String+0x14>
   b93de:	4620      	mov	r0, r4
   b93e0:	f7ff ff37 	bl	b9252 <_ZN6String10invalidateEv>
	return a;
}
   b93e4:	4620      	mov	r0, r4
   b93e6:	bd10      	pop	{r4, pc}

000b93e8 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b93e8:	b513      	push	{r0, r1, r4, lr}
   b93ea:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b93ec:	b929      	cbnz	r1, b93fa <_ZplRK15StringSumHelperPKc+0x12>
   b93ee:	4620      	mov	r0, r4
   b93f0:	f7ff ff2f 	bl	b9252 <_ZN6String10invalidateEv>
	return a;
}
   b93f4:	4620      	mov	r0, r4
   b93f6:	b002      	add	sp, #8
   b93f8:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b93fa:	4608      	mov	r0, r1
   b93fc:	9101      	str	r1, [sp, #4]
   b93fe:	f001 fe51 	bl	bb0a4 <strlen>
   b9402:	9901      	ldr	r1, [sp, #4]
   b9404:	4602      	mov	r2, r0
   b9406:	4620      	mov	r0, r4
   b9408:	f7ff ffba 	bl	b9380 <_ZN6String6concatEPKcj>
   b940c:	2800      	cmp	r0, #0
   b940e:	d0ee      	beq.n	b93ee <_ZplRK15StringSumHelperPKc+0x6>
   b9410:	e7f0      	b.n	b93f4 <_ZplRK15StringSumHelperPKc+0xc>

000b9412 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b9412:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b9414:	6882      	ldr	r2, [r0, #8]
   b9416:	b93a      	cbnz	r2, b9428 <_ZNK6String6equalsEPKc+0x16>
   b9418:	b121      	cbz	r1, b9424 <_ZNK6String6equalsEPKc+0x12>
   b941a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b941c:	fab0 f080 	clz	r0, r0
   b9420:	0940      	lsrs	r0, r0, #5
   b9422:	e000      	b.n	b9426 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b9424:	2001      	movs	r0, #1
}
   b9426:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b9428:	6800      	ldr	r0, [r0, #0]
   b942a:	b909      	cbnz	r1, b9430 <_ZNK6String6equalsEPKc+0x1e>
   b942c:	7800      	ldrb	r0, [r0, #0]
   b942e:	e7f5      	b.n	b941c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b9430:	f001 fe26 	bl	bb080 <strcmp>
   b9434:	e7f2      	b.n	b941c <_ZNK6String6equalsEPKc+0xa>

000b9436 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b9436:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b9438:	6883      	ldr	r3, [r0, #8]
   b943a:	4293      	cmp	r3, r2
   b943c:	d907      	bls.n	b944e <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b943e:	6804      	ldr	r4, [r0, #0]
   b9440:	6809      	ldr	r1, [r1, #0]
   b9442:	18a0      	adds	r0, r4, r2
   b9444:	f001 fe56 	bl	bb0f4 <strstr>
	if (found == NULL) return -1;
   b9448:	b108      	cbz	r0, b944e <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b944a:	1b00      	subs	r0, r0, r4
}
   b944c:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b944e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9452:	e7fb      	b.n	b944c <_ZNK6String7indexOfERKS_j+0x16>

000b9454 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b9454:	2200      	movs	r2, #0
   b9456:	f7ff bfee 	b.w	b9436 <_ZNK6String7indexOfERKS_j>
	...

000b945c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b945c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b945e:	429a      	cmp	r2, r3
{
   b9460:	460f      	mov	r7, r1
   b9462:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b9464:	490c      	ldr	r1, [pc, #48]	; (b9498 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b9466:	bf88      	it	hi
   b9468:	4613      	movhi	r3, r2
{
   b946a:	4614      	mov	r4, r2
   b946c:	4606      	mov	r6, r0
	if (left > right) {
   b946e:	bf84      	itt	hi
   b9470:	462c      	movhi	r4, r5
   b9472:	461d      	movhi	r5, r3
	String out;
   b9474:	f7ff ff31 	bl	b92da <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b9478:	68bb      	ldr	r3, [r7, #8]
   b947a:	42a3      	cmp	r3, r4
   b947c:	d30a      	bcc.n	b9494 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b947e:	6839      	ldr	r1, [r7, #0]
   b9480:	42ab      	cmp	r3, r5
   b9482:	bf94      	ite	ls
   b9484:	ebc4 0203 	rsbls	r2, r4, r3
   b9488:	ebc4 0205 	rsbhi	r2, r4, r5
   b948c:	4421      	add	r1, r4
   b948e:	4630      	mov	r0, r6
   b9490:	f7ff ff0a 	bl	b92a8 <_ZN6String4copyEPKcj>
	return out;
}
   b9494:	4630      	mov	r0, r6
   b9496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9498:	000bd4ba 	.word	0x000bd4ba

000b949c <_ZNK6String9substringEj>:
{
   b949c:	b510      	push	{r4, lr}
   b949e:	4604      	mov	r4, r0
	return substring(left, len);
   b94a0:	688b      	ldr	r3, [r1, #8]
   b94a2:	f7ff ffdb 	bl	b945c <_ZNK6String9substringEjj>
}
   b94a6:	4620      	mov	r0, r4
   b94a8:	bd10      	pop	{r4, pc}

000b94aa <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b94aa:	6800      	ldr	r0, [r0, #0]
   b94ac:	b108      	cbz	r0, b94b2 <_ZNK6String5toIntEv+0x8>
   b94ae:	f001 bd74 	b.w	baf9a <atol>
	return 0;
}
   b94b2:	4770      	bx	lr

000b94b4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b94b4:	4b05      	ldr	r3, [pc, #20]	; (b94cc <_GLOBAL__sub_I_System+0x18>)
   b94b6:	2202      	movs	r2, #2
   b94b8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b94ba:	4b05      	ldr	r3, [pc, #20]	; (b94d0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b94bc:	4a05      	ldr	r2, [pc, #20]	; (b94d4 <_GLOBAL__sub_I_System+0x20>)
   b94be:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b94c0:	2000      	movs	r0, #0
   b94c2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b94c6:	f7fe b993 	b.w	b77f0 <set_system_mode>
   b94ca:	bf00      	nop
   b94cc:	2003e6f8 	.word	0x2003e6f8
   b94d0:	2003e6ec 	.word	0x2003e6ec
   b94d4:	ffff0000 	.word	0xffff0000

000b94d8 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b94d8:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b94da:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b94dc:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b94e0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b94e2:	2201      	movs	r2, #1
   b94e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b94e8:	f10d 0107 	add.w	r1, sp, #7
   b94ec:	47a0      	blx	r4
}
   b94ee:	b002      	add	sp, #8
   b94f0:	bd10      	pop	{r4, pc}

000b94f2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b94f2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b94f4:	6803      	ldr	r3, [r0, #0]
   b94f6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b94f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b94fc:	46a4      	mov	ip, r4
}
   b94fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b9502:	4760      	bx	ip

000b9504 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9504:	b513      	push	{r0, r1, r4, lr}
   b9506:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b9508:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b950a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b950e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b9510:	f10d 0107 	add.w	r1, sp, #7
   b9514:	2201      	movs	r2, #1
   b9516:	47a0      	blx	r4
}
   b9518:	b002      	add	sp, #8
   b951a:	bd10      	pop	{r4, pc}

000b951c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b951c:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b951e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9520:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9524:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9528:	429a      	cmp	r2, r3
int TCPClient::read() {
   b952a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b952c:	d008      	beq.n	b9540 <_ZN9TCPClient4readEv+0x24>
   b952e:	6963      	ldr	r3, [r4, #20]
   b9530:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9534:	1c51      	adds	r1, r2, #1
   b9536:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b953a:	4413      	add	r3, r2
   b953c:	7918      	ldrb	r0, [r3, #4]
}
   b953e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9540:	6803      	ldr	r3, [r0, #0]
   b9542:	691b      	ldr	r3, [r3, #16]
   b9544:	4798      	blx	r3
   b9546:	2800      	cmp	r0, #0
   b9548:	d1f1      	bne.n	b952e <_ZN9TCPClient4readEv+0x12>
   b954a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b954e:	e7f6      	b.n	b953e <_ZN9TCPClient4readEv+0x22>

000b9550 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b9550:	4770      	bx	lr

000b9552 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b9552:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b9554:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b9556:	43c0      	mvns	r0, r0
   b9558:	0fc0      	lsrs	r0, r0, #31
   b955a:	4770      	bx	lr

000b955c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b955c:	4770      	bx	lr
	...

000b9560 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9560:	4b06      	ldr	r3, [pc, #24]	; (b957c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9562:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9564:	b510      	push	{r4, lr}
   b9566:	f100 040c 	add.w	r4, r0, #12
	    ||
   b956a:	d005      	beq.n	b9578 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b956c:	4608      	mov	r0, r1
   b956e:	f000 fd1d 	bl	b9fac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9572:	2800      	cmp	r0, #0
   b9574:	bf08      	it	eq
   b9576:	2400      	moveq	r4, #0
      }
   b9578:	4620      	mov	r0, r4
   b957a:	bd10      	pop	{r4, pc}
   b957c:	000bd690 	.word	0x000bd690

000b9580 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9580:	b510      	push	{r4, lr}
   b9582:	21ac      	movs	r1, #172	; 0xac
   b9584:	4604      	mov	r4, r0
   b9586:	f7fa fd8c 	bl	b40a2 <_ZdlPvj>
   b958a:	4620      	mov	r0, r4
   b958c:	bd10      	pop	{r4, pc}

000b958e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b958e:	21ac      	movs	r1, #172	; 0xac
   b9590:	f7fa bd87 	b.w	b40a2 <_ZdlPvj>

000b9594 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b9594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b9598:	f04f 0800 	mov.w	r8, #0
   b959c:	b086      	sub	sp, #24
   b959e:	461c      	mov	r4, r3
   b95a0:	f8c0 8004 	str.w	r8, [r0, #4]
   b95a4:	4605      	mov	r5, r0
   b95a6:	460e      	mov	r6, r1
   b95a8:	4617      	mov	r7, r2
    struct timeval tv = {};
   b95aa:	4641      	mov	r1, r8
   b95ac:	2210      	movs	r2, #16
   b95ae:	a802      	add	r0, sp, #8
   b95b0:	f001 fd2f 	bl	bb012 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b95b4:	1c63      	adds	r3, r4, #1
   b95b6:	d009      	beq.n	b95cc <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b95b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b95bc:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b95c0:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b95c4:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b95c8:	435c      	muls	r4, r3
   b95ca:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b95cc:	6968      	ldr	r0, [r5, #20]
   b95ce:	2310      	movs	r3, #16
   b95d0:	9300      	str	r3, [sp, #0]
   b95d2:	6800      	ldr	r0, [r0, #0]
   b95d4:	ab02      	add	r3, sp, #8
   b95d6:	f241 0205 	movw	r2, #4101	; 0x1005
   b95da:	f640 71ff 	movw	r1, #4095	; 0xfff
   b95de:	f7fe f857 	bl	b7690 <sock_setsockopt>
    if (ret < 0) {
   b95e2:	2800      	cmp	r0, #0
   b95e4:	da07      	bge.n	b95f6 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b95e6:	f7fe f9c7 	bl	b7978 <__errno>
   b95ea:	6803      	ldr	r3, [r0, #0]
   b95ec:	606b      	str	r3, [r5, #4]
        return 0;
   b95ee:	2000      	movs	r0, #0
}
   b95f0:	b006      	add	sp, #24
   b95f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b95f6:	6968      	ldr	r0, [r5, #20]
   b95f8:	2300      	movs	r3, #0
   b95fa:	6800      	ldr	r0, [r0, #0]
   b95fc:	463a      	mov	r2, r7
   b95fe:	4631      	mov	r1, r6
   b9600:	f7fe f866 	bl	b76d0 <sock_send>
    if (ret < 0) {
   b9604:	1e03      	subs	r3, r0, #0
   b9606:	dbee      	blt.n	b95e6 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b9608:	4618      	mov	r0, r3
   b960a:	e7f1      	b.n	b95f0 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b960c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b960c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b960e:	6984      	ldr	r4, [r0, #24]
   b9610:	4b0a      	ldr	r3, [pc, #40]	; (b963c <_ZN9TCPClientD1Ev+0x30>)
   b9612:	6003      	str	r3, [r0, #0]
   b9614:	4605      	mov	r5, r0
   b9616:	b17c      	cbz	r4, b9638 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b9618:	6863      	ldr	r3, [r4, #4]
   b961a:	3b01      	subs	r3, #1
   b961c:	6063      	str	r3, [r4, #4]
   b961e:	b95b      	cbnz	r3, b9638 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b9620:	6823      	ldr	r3, [r4, #0]
   b9622:	4620      	mov	r0, r4
   b9624:	689b      	ldr	r3, [r3, #8]
   b9626:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b9628:	68a3      	ldr	r3, [r4, #8]
   b962a:	3b01      	subs	r3, #1
   b962c:	60a3      	str	r3, [r4, #8]
   b962e:	b91b      	cbnz	r3, b9638 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b9630:	6823      	ldr	r3, [r4, #0]
   b9632:	4620      	mov	r0, r4
   b9634:	68db      	ldr	r3, [r3, #12]
   b9636:	4798      	blx	r3
   b9638:	4628      	mov	r0, r5
   b963a:	bd38      	pop	{r3, r4, r5, pc}
   b963c:	000bd7c4 	.word	0x000bd7c4

000b9640 <_ZN9TCPClientD0Ev>:
   b9640:	b510      	push	{r4, lr}
   b9642:	4604      	mov	r4, r0
   b9644:	f7ff ffe2 	bl	b960c <_ZN9TCPClientD1Ev>
   b9648:	4620      	mov	r0, r4
   b964a:	211c      	movs	r1, #28
   b964c:	f7fa fd29 	bl	b40a2 <_ZdlPvj>
   b9650:	4620      	mov	r0, r4
   b9652:	bd10      	pop	{r4, pc}

000b9654 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b9654:	b530      	push	{r4, r5, lr}
   b9656:	b087      	sub	sp, #28
   b9658:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b965a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b965c:	4668      	mov	r0, sp
   b965e:	f7ff fc8d 	bl	b8f7c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9664:	3404      	adds	r4, #4
   b9666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9668:	682b      	ldr	r3, [r5, #0]
   b966a:	7023      	strb	r3, [r4, #0]
    }
   b966c:	b007      	add	sp, #28
   b966e:	bd30      	pop	{r4, r5, pc}

000b9670 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b9670:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b9672:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b9674:	4b05      	ldr	r3, [pc, #20]	; (b968c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b9676:	4604      	mov	r4, r0
   b9678:	358c      	adds	r5, #140	; 0x8c
   b967a:	f844 3b04 	str.w	r3, [r4], #4
   b967e:	4606      	mov	r6, r0
   b9680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9684:	682b      	ldr	r3, [r5, #0]
   b9686:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b9688:	4630      	mov	r0, r6
   b968a:	bd70      	pop	{r4, r5, r6, pc}
   b968c:	000bd73c 	.word	0x000bd73c

000b9690 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9694:	4698      	mov	r8, r3
    stop();
   b9696:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9698:	b093      	sub	sp, #76	; 0x4c
   b969a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b969c:	2400      	movs	r4, #0
    stop();
   b969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b96a0:	4606      	mov	r6, r0
   b96a2:	4617      	mov	r7, r2
    stop();
   b96a4:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b96a6:	4628      	mov	r0, r5
   b96a8:	466b      	mov	r3, sp
   b96aa:	4622      	mov	r2, r4
   b96ac:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b96ae:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b96b0:	f7fd ffe6 	bl	b7680 <netdb_getaddrinfo>
   b96b4:	4605      	mov	r5, r0
   b96b6:	2800      	cmp	r0, #0
   b96b8:	d163      	bne.n	b9782 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b96ba:	9b00      	ldr	r3, [sp, #0]
   b96bc:	2b00      	cmp	r3, #0
   b96be:	d04b      	beq.n	b9758 <_ZN9TCPClient7connectEPKctm+0xc8>
   b96c0:	695b      	ldr	r3, [r3, #20]
   b96c2:	2b00      	cmp	r3, #0
   b96c4:	d048      	beq.n	b9758 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b96c6:	a806      	add	r0, sp, #24
   b96c8:	f7ff fc14 	bl	b8ef4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b96cc:	9b00      	ldr	r3, [sp, #0]
   b96ce:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b96d0:	7863      	ldrb	r3, [r4, #1]
   b96d2:	2b02      	cmp	r3, #2
   b96d4:	d104      	bne.n	b96e0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b96d6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b96d8:	a806      	add	r0, sp, #24
   b96da:	f7ff ffbb 	bl	b9654 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b96de:	e026      	b.n	b972e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b96e0:	2b0a      	cmp	r3, #10
   b96e2:	d124      	bne.n	b972e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b96e4:	2211      	movs	r2, #17
   b96e6:	4629      	mov	r1, r5
   b96e8:	a801      	add	r0, sp, #4
   b96ea:	f001 fc92 	bl	bb012 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b96ee:	68a3      	ldr	r3, [r4, #8]
   b96f0:	2b00      	cmp	r3, #0
   b96f2:	d038      	beq.n	b9766 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b96f4:	f104 0308 	add.w	r3, r4, #8
   b96f8:	f10d 0c04 	add.w	ip, sp, #4
   b96fc:	3418      	adds	r4, #24
   b96fe:	6818      	ldr	r0, [r3, #0]
   b9700:	6859      	ldr	r1, [r3, #4]
   b9702:	4662      	mov	r2, ip
   b9704:	c203      	stmia	r2!, {r0, r1}
   b9706:	3308      	adds	r3, #8
   b9708:	42a3      	cmp	r3, r4
   b970a:	4694      	mov	ip, r2
   b970c:	d1f7      	bne.n	b96fe <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b970e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b9710:	a901      	add	r1, sp, #4
   b9712:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b9714:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b9718:	f7ff fbfa 	bl	b8f10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b971c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9720:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9724:	ac07      	add	r4, sp, #28
   b9726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9728:	f8dc 3000 	ldr.w	r3, [ip]
   b972c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b972e:	a806      	add	r0, sp, #24
   b9730:	f7ff fc00 	bl	b8f34 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b9734:	b180      	cbz	r0, b9758 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b9736:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b9738:	ad07      	add	r5, sp, #28
   b973a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b973e:	4b12      	ldr	r3, [pc, #72]	; (b9788 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b9740:	930c      	str	r3, [sp, #48]	; 0x30
   b9742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9744:	ac0d      	add	r4, sp, #52	; 0x34
   b9746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9748:	682b      	ldr	r3, [r5, #0]
   b974a:	7023      	strb	r3, [r4, #0]
   b974c:	463a      	mov	r2, r7
   b974e:	4643      	mov	r3, r8
   b9750:	a90c      	add	r1, sp, #48	; 0x30
   b9752:	4630      	mov	r0, r6
   b9754:	47c8      	blx	r9
   b9756:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b9758:	9800      	ldr	r0, [sp, #0]
   b975a:	f7fd ff89 	bl	b7670 <netdb_freeaddrinfo>
}
   b975e:	4628      	mov	r0, r5
   b9760:	b013      	add	sp, #76	; 0x4c
   b9762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9766:	68e3      	ldr	r3, [r4, #12]
   b9768:	2b00      	cmp	r3, #0
   b976a:	d1c3      	bne.n	b96f4 <_ZN9TCPClient7connectEPKctm+0x64>
   b976c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9770:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b9774:	f7fd ff6c 	bl	b7650 <inet_htonl>
   b9778:	4581      	cmp	r9, r0
   b977a:	d1bb      	bne.n	b96f4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b977c:	f104 0114 	add.w	r1, r4, #20
   b9780:	e7aa      	b.n	b96d8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9782:	4625      	mov	r5, r4
   b9784:	e7e8      	b.n	b9758 <_ZN9TCPClient7connectEPKctm+0xc8>
   b9786:	bf00      	nop
   b9788:	000bd73c 	.word	0x000bd73c

000b978c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b978c:	b538      	push	{r3, r4, r5, lr}
   b978e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b9790:	681a      	ldr	r2, [r3, #0]
   b9792:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b9794:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b9796:	da10      	bge.n	b97ba <_ZN9TCPClient9connectedEv+0x2e>
   b9798:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b979c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b97a0:	429a      	cmp	r2, r3
   b97a2:	d10a      	bne.n	b97ba <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b97a4:	6803      	ldr	r3, [r0, #0]
   b97a6:	691b      	ldr	r3, [r3, #16]
   b97a8:	4798      	blx	r3
        if (!rv) {
   b97aa:	4604      	mov	r4, r0
   b97ac:	b928      	cbnz	r0, b97ba <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b97ae:	682b      	ldr	r3, [r5, #0]
   b97b0:	4628      	mov	r0, r5
   b97b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b97b4:	4798      	blx	r3
        rv = available();
   b97b6:	4620      	mov	r0, r4
}
   b97b8:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b97ba:	2001      	movs	r0, #1
   b97bc:	e7fc      	b.n	b97b8 <_ZN9TCPClient9connectedEv+0x2c>

000b97be <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b97be:	b510      	push	{r4, lr}
   b97c0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b97c2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b97c6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b97ca:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b97cc:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b97ce:	d005      	beq.n	b97dc <_ZN9TCPClient4peekEv+0x1e>
   b97d0:	6963      	ldr	r3, [r4, #20]
   b97d2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b97d6:	4413      	add	r3, r2
   b97d8:	7918      	ldrb	r0, [r3, #4]
}
   b97da:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b97dc:	6803      	ldr	r3, [r0, #0]
   b97de:	691b      	ldr	r3, [r3, #16]
   b97e0:	4798      	blx	r3
   b97e2:	2800      	cmp	r0, #0
   b97e4:	d1f4      	bne.n	b97d0 <_ZN9TCPClient4peekEv+0x12>
   b97e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b97ea:	e7f6      	b.n	b97da <_ZN9TCPClient4peekEv+0x1c>

000b97ec <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b97ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b97ee:	6943      	ldr	r3, [r0, #20]
   b97f0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b97f2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b97f6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b97fa:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b97fc:	4605      	mov	r5, r0
   b97fe:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b9800:	d016      	beq.n	b9830 <_ZN9TCPClient4readEPhj+0x44>
   b9802:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b9804:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b9808:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b980c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b980e:	42bc      	cmp	r4, r7
   b9810:	bf28      	it	cs
   b9812:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b9814:	3304      	adds	r3, #4
   b9816:	4622      	mov	r2, r4
   b9818:	4419      	add	r1, r3
   b981a:	4630      	mov	r0, r6
   b981c:	f001 fbd1 	bl	bafc2 <memcpy>
   b9820:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b9822:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b9826:	4423      	add	r3, r4
   b9828:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b982c:	4620      	mov	r0, r4
   b982e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b9830:	6803      	ldr	r3, [r0, #0]
   b9832:	691b      	ldr	r3, [r3, #16]
   b9834:	4798      	blx	r3
   b9836:	2800      	cmp	r0, #0
   b9838:	d1e3      	bne.n	b9802 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b983a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b983e:	e7f5      	b.n	b982c <_ZN9TCPClient4readEPhj+0x40>

000b9840 <_ZN9TCPClient12flush_bufferEv>:
   b9840:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b9842:	2300      	movs	r3, #0
   b9844:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9848:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b984a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b984e:	4770      	bx	lr

000b9850 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9854:	461f      	mov	r7, r3
    stop();
   b9856:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9858:	460c      	mov	r4, r1
    stop();
   b985a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b985c:	b08a      	sub	sp, #40	; 0x28
   b985e:	4605      	mov	r5, r0
   b9860:	4616      	mov	r6, r2
    stop();
   b9862:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b9864:	7d23      	ldrb	r3, [r4, #20]
   b9866:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b986a:	2b04      	cmp	r3, #4
   b986c:	bf0c      	ite	eq
   b986e:	2002      	moveq	r0, #2
   b9870:	200a      	movne	r0, #10
   b9872:	2206      	movs	r2, #6
   b9874:	2101      	movs	r1, #1
   b9876:	f7fd ff33 	bl	b76e0 <sock_socket>
   b987a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b987e:	696b      	ldr	r3, [r5, #20]
   b9880:	681b      	ldr	r3, [r3, #0]
   b9882:	2b00      	cmp	r3, #0
   b9884:	da08      	bge.n	b9898 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b9886:	682b      	ldr	r3, [r5, #0]
   b9888:	4628      	mov	r0, r5
   b988a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b988c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b988e:	4798      	blx	r3
}
   b9890:	4620      	mov	r0, r4
   b9892:	b00a      	add	sp, #40	; 0x28
   b9894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b9898:	4628      	mov	r0, r5
   b989a:	f7ff ffd1 	bl	b9840 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b989e:	b1b7      	cbz	r7, b98ce <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b98a0:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b98a2:	a903      	add	r1, sp, #12
   b98a4:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b98a6:	9303      	str	r3, [sp, #12]
   b98a8:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b98ac:	f7fd fec0 	bl	b7630 <if_index_to_name>
   b98b0:	2800      	cmp	r0, #0
   b98b2:	d1e8      	bne.n	b9886 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b98b4:	6968      	ldr	r0, [r5, #20]
   b98b6:	2306      	movs	r3, #6
   b98b8:	9300      	str	r3, [sp, #0]
   b98ba:	6800      	ldr	r0, [r0, #0]
   b98bc:	ab03      	add	r3, sp, #12
   b98be:	f241 020b 	movw	r2, #4107	; 0x100b
   b98c2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b98c6:	f7fd fee3 	bl	b7690 <sock_setsockopt>
   b98ca:	2800      	cmp	r0, #0
   b98cc:	d1db      	bne.n	b9886 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b98ce:	221c      	movs	r2, #28
   b98d0:	2100      	movs	r1, #0
   b98d2:	a803      	add	r0, sp, #12
   b98d4:	f001 fb9d 	bl	bb012 <memset>
    if (ip.version() == 4) {
   b98d8:	7d23      	ldrb	r3, [r4, #20]
   b98da:	2b04      	cmp	r3, #4
   b98dc:	d11d      	bne.n	b991a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b98de:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b98e2:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b98e4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b98e8:	f7fd feba 	bl	b7660 <inet_htons>
   b98ec:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b98f0:	6860      	ldr	r0, [r4, #4]
   b98f2:	f7fd fead 	bl	b7650 <inet_htonl>
   b98f6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b98f8:	696b      	ldr	r3, [r5, #20]
   b98fa:	221c      	movs	r2, #28
   b98fc:	6818      	ldr	r0, [r3, #0]
   b98fe:	a903      	add	r1, sp, #12
   b9900:	f7fd fed6 	bl	b76b0 <sock_connect>
   b9904:	2800      	cmp	r0, #0
   b9906:	d1be      	bne.n	b9886 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b9908:	3404      	adds	r4, #4
   b990a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b990c:	696d      	ldr	r5, [r5, #20]
   b990e:	358c      	adds	r5, #140	; 0x8c
   b9910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9912:	6823      	ldr	r3, [r4, #0]
   b9914:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b9916:	2401      	movs	r4, #1
   b9918:	e7ba      	b.n	b9890 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b991a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b991e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b9920:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b9924:	f7fd fe9c 	bl	b7660 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9928:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b992a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b992e:	1d23      	adds	r3, r4, #4
   b9930:	f104 0714 	add.w	r7, r4, #20
   b9934:	6818      	ldr	r0, [r3, #0]
   b9936:	6859      	ldr	r1, [r3, #4]
   b9938:	4632      	mov	r2, r6
   b993a:	c203      	stmia	r2!, {r0, r1}
   b993c:	3308      	adds	r3, #8
   b993e:	42bb      	cmp	r3, r7
   b9940:	4616      	mov	r6, r2
   b9942:	d1f7      	bne.n	b9934 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b9944:	e7d8      	b.n	b98f8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b9948 <_ZN9TCPClient9availableEv>:
{
   b9948:	b530      	push	{r4, r5, lr}
   b994a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b994c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b9950:	b08b      	sub	sp, #44	; 0x2c
   b9952:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b9954:	b12b      	cbz	r3, b9962 <_ZN9TCPClient9availableEv+0x1a>
   b9956:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b995a:	429a      	cmp	r2, r3
   b995c:	d101      	bne.n	b9962 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b995e:	f7ff ff6f 	bl	b9840 <_ZN9TCPClient12flush_bufferEv>
   b9962:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b9964:	6808      	ldr	r0, [r1, #0]
   b9966:	2800      	cmp	r0, #0
   b9968:	db18      	blt.n	b999c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b996a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b996e:	2d7f      	cmp	r5, #127	; 0x7f
   b9970:	d814      	bhi.n	b999c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b9972:	3104      	adds	r1, #4
   b9974:	2308      	movs	r3, #8
   b9976:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b997a:	4429      	add	r1, r5
   b997c:	f7fd fea0 	bl	b76c0 <sock_recv>
            if (ret > 0) {
   b9980:	2800      	cmp	r0, #0
   b9982:	dd13      	ble.n	b99ac <_ZN9TCPClient9availableEv+0x64>
   b9984:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b9986:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b998a:	b90a      	cbnz	r2, b9990 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b998c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b9990:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b9992:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9996:	4410      	add	r0, r2
   b9998:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b999c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b999e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b99a2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b99a6:	1ac0      	subs	r0, r0, r3
   b99a8:	b00b      	add	sp, #44	; 0x2c
   b99aa:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b99ac:	f7fd ffe4 	bl	b7978 <__errno>
   b99b0:	6803      	ldr	r3, [r0, #0]
   b99b2:	2b0b      	cmp	r3, #11
   b99b4:	d0f2      	beq.n	b999c <_ZN9TCPClient9availableEv+0x54>
   b99b6:	f7fd ffdf 	bl	b7978 <__errno>
   b99ba:	6803      	ldr	r3, [r0, #0]
   b99bc:	2b0b      	cmp	r3, #11
   b99be:	d0ed      	beq.n	b999c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b99c0:	2320      	movs	r3, #32
   b99c2:	2500      	movs	r5, #0
   b99c4:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b99c8:	f7fd ffd6 	bl	b7978 <__errno>
   b99cc:	6803      	ldr	r3, [r0, #0]
   b99ce:	9301      	str	r3, [sp, #4]
   b99d0:	4b08      	ldr	r3, [pc, #32]	; (b99f4 <_ZN9TCPClient9availableEv+0xac>)
   b99d2:	4909      	ldr	r1, [pc, #36]	; (b99f8 <_ZN9TCPClient9availableEv+0xb0>)
   b99d4:	9300      	str	r3, [sp, #0]
   b99d6:	aa02      	add	r2, sp, #8
   b99d8:	462b      	mov	r3, r5
   b99da:	2032      	movs	r0, #50	; 0x32
   b99dc:	f7fd ff00 	bl	b77e0 <log_message>
                    sock_close(d_->sock);
   b99e0:	6963      	ldr	r3, [r4, #20]
   b99e2:	6818      	ldr	r0, [r3, #0]
   b99e4:	f7fd fe5c 	bl	b76a0 <sock_close>
   b99e8:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b99ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b99ee:	601a      	str	r2, [r3, #0]
   b99f0:	e7d4      	b.n	b999c <_ZN9TCPClient9availableEv+0x54>
   b99f2:	bf00      	nop
   b99f4:	000bd78f 	.word	0x000bd78f
   b99f8:	000bd788 	.word	0x000bd788

000b99fc <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b99fc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b99fe:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b9a00:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b9a02:	6818      	ldr	r0, [r3, #0]
   b9a04:	2800      	cmp	r0, #0
   b9a06:	db01      	blt.n	b9a0c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b9a08:	f7fd fe4a 	bl	b76a0 <sock_close>
   b9a0c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b9a0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9a12:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b9a14:	6960      	ldr	r0, [r4, #20]
   b9a16:	2211      	movs	r2, #17
   b9a18:	2100      	movs	r1, #0
   b9a1a:	308c      	adds	r0, #140	; 0x8c
   b9a1c:	f001 faf9 	bl	bb012 <memset>
    flush_buffer();
   b9a20:	4620      	mov	r0, r4
}
   b9a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b9a26:	f7ff bf0b 	b.w	b9840 <_ZN9TCPClient12flush_bufferEv>

000b9a2a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b9a2a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b9a2c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b9a2e:	4604      	mov	r4, r0
          total(0) {
   b9a30:	6001      	str	r1, [r0, #0]
   b9a32:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b9a36:	3088      	adds	r0, #136	; 0x88
   b9a38:	f7ff fa5c 	bl	b8ef4 <_ZN9IPAddressC1Ev>
}
   b9a3c:	4620      	mov	r0, r4
   b9a3e:	bd10      	pop	{r4, pc}

000b9a40 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b9a40:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9a42:	2300      	movs	r3, #0
   b9a44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9a48:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b9a4c:	4a0e      	ldr	r2, [pc, #56]	; (b9a88 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b9a4e:	6103      	str	r3, [r0, #16]
   b9a50:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9a52:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b9a54:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9a56:	20ac      	movs	r0, #172	; 0xac
   b9a58:	9101      	str	r1, [sp, #4]
   b9a5a:	f7fa fb1c 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9a5e:	1e05      	subs	r5, r0, #0
   b9a60:	f105 060c 	add.w	r6, r5, #12
   b9a64:	d008      	beq.n	b9a78 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b9a66:	2301      	movs	r3, #1
   b9a68:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9a6c:	4b07      	ldr	r3, [pc, #28]	; (b9a8c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9a6e:	9901      	ldr	r1, [sp, #4]
   b9a70:	602b      	str	r3, [r5, #0]
   b9a72:	4630      	mov	r0, r6
   b9a74:	f7ff ffd9 	bl	b9a2a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b9a78:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b9a7a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b9a7e:	f7ff fedf 	bl	b9840 <_ZN9TCPClient12flush_bufferEv>
}
   b9a82:	b002      	add	sp, #8
   b9a84:	bd70      	pop	{r4, r5, r6, pc}
   b9a86:	bf00      	nop
   b9a88:	000bd7c4 	.word	0x000bd7c4
   b9a8c:	000bd7a8 	.word	0x000bd7a8

000b9a90 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b9a90:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b9a92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b9a96:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b9a98:	f7ff ffd2 	bl	b9a40 <_ZN9TCPClientC1Ei>
}
   b9a9c:	4620      	mov	r0, r4
   b9a9e:	bd10      	pop	{r4, pc}

000b9aa0 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b9aa0:	b510      	push	{r4, lr}
   b9aa2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b9aa4:	6800      	ldr	r0, [r0, #0]
   b9aa6:	2800      	cmp	r0, #0
   b9aa8:	db01      	blt.n	b9aae <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b9aaa:	f7fd fdf9 	bl	b76a0 <sock_close>
    }
}
   b9aae:	4620      	mov	r0, r4
   b9ab0:	bd10      	pop	{r4, pc}

000b9ab2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b9ab2:	300c      	adds	r0, #12
   b9ab4:	f7ff bff4 	b.w	b9aa0 <_ZN9TCPClient4DataD1Ev>

000b9ab8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b9ab8:	4b02      	ldr	r3, [pc, #8]	; (b9ac4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b9aba:	681a      	ldr	r2, [r3, #0]
   b9abc:	4b02      	ldr	r3, [pc, #8]	; (b9ac8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b9abe:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b9ac0:	4770      	bx	lr
   b9ac2:	bf00      	nop
   b9ac4:	20035360 	.word	0x20035360
   b9ac8:	2003e6fc 	.word	0x2003e6fc

000b9acc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b9acc:	4770      	bx	lr

000b9ace <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9ace:	7441      	strb	r1, [r0, #17]
}
   b9ad0:	4770      	bx	lr

000b9ad2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b9ad2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b9ad4:	7c00      	ldrb	r0, [r0, #16]
   b9ad6:	f7fd fe33 	bl	b7740 <hal_usart_available_data_for_write>
}
   b9ada:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9ade:	bd08      	pop	{r3, pc}

000b9ae0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b9ae0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b9ae2:	7c00      	ldrb	r0, [r0, #16]
   b9ae4:	f7fd fe0c 	bl	b7700 <hal_usart_available>
}
   b9ae8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9aec:	bd08      	pop	{r3, pc}

000b9aee <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b9aee:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b9af0:	7c00      	ldrb	r0, [r0, #16]
   b9af2:	f7fd fe15 	bl	b7720 <hal_usart_peek>
}
   b9af6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9afa:	bd08      	pop	{r3, pc}

000b9afc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b9afc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b9afe:	7c00      	ldrb	r0, [r0, #16]
   b9b00:	f7fd fe06 	bl	b7710 <hal_usart_read>
}
   b9b04:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9b08:	bd08      	pop	{r3, pc}

000b9b0a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b9b0a:	7c00      	ldrb	r0, [r0, #16]
   b9b0c:	f7fd be10 	b.w	b7730 <hal_usart_flush>

000b9b10 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b9b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9b12:	7c45      	ldrb	r5, [r0, #17]
{
   b9b14:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9b16:	b12d      	cbz	r5, b9b24 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b9b18:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b9b1a:	b003      	add	sp, #12
   b9b1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b9b20:	f7fd bde6 	b.w	b76f0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b9b24:	7c00      	ldrb	r0, [r0, #16]
   b9b26:	9101      	str	r1, [sp, #4]
   b9b28:	f7fd fe0a 	bl	b7740 <hal_usart_available_data_for_write>
   b9b2c:	2800      	cmp	r0, #0
   b9b2e:	9901      	ldr	r1, [sp, #4]
   b9b30:	dcf2      	bgt.n	b9b18 <_ZN11USARTSerial5writeEh+0x8>
}
   b9b32:	4628      	mov	r0, r5
   b9b34:	b003      	add	sp, #12
   b9b36:	bd30      	pop	{r4, r5, pc}

000b9b38 <_ZN11USARTSerialD0Ev>:
   b9b38:	b510      	push	{r4, lr}
   b9b3a:	2114      	movs	r1, #20
   b9b3c:	4604      	mov	r4, r0
   b9b3e:	f7fa fab0 	bl	b40a2 <_ZdlPvj>
   b9b42:	4620      	mov	r0, r4
   b9b44:	bd10      	pop	{r4, pc}
	...

000b9b48 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b9b48:	b510      	push	{r4, lr}
   b9b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9b4e:	4604      	mov	r4, r0
   b9b50:	4608      	mov	r0, r1
   b9b52:	4611      	mov	r1, r2
   b9b54:	2200      	movs	r2, #0
   b9b56:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b9b5a:	4b04      	ldr	r3, [pc, #16]	; (b9b6c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b9b5c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9b5e:	2301      	movs	r3, #1
  _serial = serial;
   b9b60:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9b62:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b9b64:	f7fd fdf4 	bl	b7750 <hal_usart_init_ex>
}
   b9b68:	4620      	mov	r0, r4
   b9b6a:	bd10      	pop	{r4, pc}
   b9b6c:	000bd82c 	.word	0x000bd82c

000b9b70 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9b70:	7441      	strb	r1, [r0, #17]
}
   b9b72:	4770      	bx	lr

000b9b74 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9b74:	4770      	bx	lr

000b9b76 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b9b76:	4770      	bx	lr

000b9b78 <_ZN9USBSerial4readEv>:
{
   b9b78:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b9b7a:	2100      	movs	r1, #0
   b9b7c:	7c00      	ldrb	r0, [r0, #16]
   b9b7e:	f7fd fe0f 	bl	b77a0 <HAL_USB_USART_Receive_Data>
}
   b9b82:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9b86:	bd08      	pop	{r3, pc}

000b9b88 <_ZN9USBSerial4peekEv>:
{
   b9b88:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b9b8a:	2101      	movs	r1, #1
   b9b8c:	7c00      	ldrb	r0, [r0, #16]
   b9b8e:	f7fd fe07 	bl	b77a0 <HAL_USB_USART_Receive_Data>
}
   b9b92:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b9b96:	bd08      	pop	{r3, pc}

000b9b98 <_ZN9USBSerial17availableForWriteEv>:
{
   b9b98:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b9b9a:	7c00      	ldrb	r0, [r0, #16]
   b9b9c:	f7fd fdf8 	bl	b7790 <HAL_USB_USART_Available_Data_For_Write>
}
   b9ba0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9ba4:	bd08      	pop	{r3, pc}

000b9ba6 <_ZN9USBSerial9availableEv>:
{
   b9ba6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b9ba8:	7c00      	ldrb	r0, [r0, #16]
   b9baa:	f7fd fde9 	bl	b7780 <HAL_USB_USART_Available_Data>
}
   b9bae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b9bb2:	bd08      	pop	{r3, pc}

000b9bb4 <_ZN9USBSerial5writeEh>:
{
   b9bb4:	b513      	push	{r0, r1, r4, lr}
   b9bb6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9bb8:	7c00      	ldrb	r0, [r0, #16]
{
   b9bba:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b9bbc:	f7fd fde8 	bl	b7790 <HAL_USB_USART_Available_Data_For_Write>
   b9bc0:	2800      	cmp	r0, #0
   b9bc2:	9901      	ldr	r1, [sp, #4]
   b9bc4:	dc01      	bgt.n	b9bca <_ZN9USBSerial5writeEh+0x16>
   b9bc6:	7c60      	ldrb	r0, [r4, #17]
   b9bc8:	b120      	cbz	r0, b9bd4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b9bca:	7c20      	ldrb	r0, [r4, #16]
   b9bcc:	f7fd fdf0 	bl	b77b0 <HAL_USB_USART_Send_Data>
   b9bd0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b9bd4:	b002      	add	sp, #8
   b9bd6:	bd10      	pop	{r4, pc}

000b9bd8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b9bd8:	7c00      	ldrb	r0, [r0, #16]
   b9bda:	f7fd bdf1 	b.w	b77c0 <HAL_USB_USART_Flush_Data>

000b9bde <_ZN9USBSerialD0Ev>:
   b9bde:	b510      	push	{r4, lr}
   b9be0:	2114      	movs	r1, #20
   b9be2:	4604      	mov	r4, r0
   b9be4:	f7fa fa5d 	bl	b40a2 <_ZdlPvj>
   b9be8:	4620      	mov	r0, r4
   b9bea:	bd10      	pop	{r4, pc}

000b9bec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b9bec:	b510      	push	{r4, lr}
   b9bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9bf2:	4604      	mov	r4, r0
   b9bf4:	4608      	mov	r0, r1
   b9bf6:	2100      	movs	r1, #0
   b9bf8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9bfc:	4b04      	ldr	r3, [pc, #16]	; (b9c10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b9bfe:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9c00:	2301      	movs	r3, #1
  _serial = serial;
   b9c02:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b9c04:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b9c06:	4611      	mov	r1, r2
   b9c08:	f7fd fdaa 	bl	b7760 <HAL_USB_USART_Init>
}
   b9c0c:	4620      	mov	r0, r4
   b9c0e:	bd10      	pop	{r4, pc}
   b9c10:	000bd85c 	.word	0x000bd85c

000b9c14 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b9c14:	7c00      	ldrb	r0, [r0, #16]
   b9c16:	2200      	movs	r2, #0
   b9c18:	f7fd bdaa 	b.w	b7770 <HAL_USB_USART_Begin>

000b9c1c <_Z19acquireSerialBufferv>:
{
   b9c1c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b9c1e:	2214      	movs	r2, #20
{
   b9c20:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b9c22:	2100      	movs	r1, #0
   b9c24:	f001 f9f5 	bl	bb012 <memset>
}
   b9c28:	4620      	mov	r0, r4
   b9c2a:	bd10      	pop	{r4, pc}

000b9c2c <_Z16_fetch_usbserialv>:
{
   b9c2c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9c2e:	4c0f      	ldr	r4, [pc, #60]	; (b9c6c <_Z16_fetch_usbserialv+0x40>)
{
   b9c30:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b9c32:	a803      	add	r0, sp, #12
   b9c34:	f7ff fff2 	bl	b9c1c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9c38:	7821      	ldrb	r1, [r4, #0]
   b9c3a:	f3bf 8f5b 	dmb	ish
   b9c3e:	f011 0101 	ands.w	r1, r1, #1
   b9c42:	d10f      	bne.n	b9c64 <_Z16_fetch_usbserialv+0x38>
   b9c44:	4620      	mov	r0, r4
   b9c46:	9101      	str	r1, [sp, #4]
   b9c48:	f7fa fa2d 	bl	b40a6 <__cxa_guard_acquire>
   b9c4c:	9901      	ldr	r1, [sp, #4]
   b9c4e:	b148      	cbz	r0, b9c64 <_Z16_fetch_usbserialv+0x38>
   b9c50:	aa03      	add	r2, sp, #12
   b9c52:	4807      	ldr	r0, [pc, #28]	; (b9c70 <_Z16_fetch_usbserialv+0x44>)
   b9c54:	f7ff ffca 	bl	b9bec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9c58:	4620      	mov	r0, r4
   b9c5a:	f7fa fa29 	bl	b40b0 <__cxa_guard_release>
   b9c5e:	4805      	ldr	r0, [pc, #20]	; (b9c74 <_Z16_fetch_usbserialv+0x48>)
   b9c60:	f001 f98e 	bl	baf80 <atexit>
	return _usbserial;
}
   b9c64:	4802      	ldr	r0, [pc, #8]	; (b9c70 <_Z16_fetch_usbserialv+0x44>)
   b9c66:	b008      	add	sp, #32
   b9c68:	bd10      	pop	{r4, pc}
   b9c6a:	bf00      	nop
   b9c6c:	2003e700 	.word	0x2003e700
   b9c70:	2003e704 	.word	0x2003e704
   b9c74:	000b9b75 	.word	0x000b9b75

000b9c78 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b9c78:	2200      	movs	r2, #0
   b9c7a:	6840      	ldr	r0, [r0, #4]
   b9c7c:	4611      	mov	r1, r2
   b9c7e:	f7fd bdfb 	b.w	b7878 <network_ready>

000b9c82 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9c82:	2200      	movs	r2, #0
   b9c84:	6840      	ldr	r0, [r0, #4]
   b9c86:	4611      	mov	r1, r2
   b9c88:	f7fd be16 	b.w	b78b8 <network_listening>

000b9c8c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9c8c:	2200      	movs	r2, #0
   b9c8e:	6840      	ldr	r0, [r0, #4]
   b9c90:	4611      	mov	r1, r2
   b9c92:	f7fd be21 	b.w	b78d8 <network_get_listen_timeout>

000b9c96 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9c96:	6840      	ldr	r0, [r0, #4]
   b9c98:	2200      	movs	r2, #0
   b9c9a:	f7fd be15 	b.w	b78c8 <network_set_listen_timeout>

000b9c9e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9c9e:	6840      	ldr	r0, [r0, #4]
   b9ca0:	2200      	movs	r2, #0
   b9ca2:	f081 0101 	eor.w	r1, r1, #1
   b9ca6:	f7fd bdff 	b.w	b78a8 <network_listen>

000b9caa <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9caa:	2300      	movs	r3, #0
   b9cac:	6840      	ldr	r0, [r0, #4]
   b9cae:	461a      	mov	r2, r3
   b9cb0:	4619      	mov	r1, r3
   b9cb2:	f7fd bdf1 	b.w	b7898 <network_off>

000b9cb6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9cb6:	2300      	movs	r3, #0
   b9cb8:	6840      	ldr	r0, [r0, #4]
   b9cba:	461a      	mov	r2, r3
   b9cbc:	4619      	mov	r1, r3
   b9cbe:	f7fd bde3 	b.w	b7888 <network_on>

000b9cc2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9cc2:	2200      	movs	r2, #0
   b9cc4:	6840      	ldr	r0, [r0, #4]
   b9cc6:	4611      	mov	r1, r2
   b9cc8:	f7fd bdc6 	b.w	b7858 <network_connecting>

000b9ccc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9ccc:	6840      	ldr	r0, [r0, #4]
   b9cce:	2200      	movs	r2, #0
   b9cd0:	2102      	movs	r1, #2
   b9cd2:	f7fd bdc9 	b.w	b7868 <network_disconnect>

000b9cd6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9cd6:	2300      	movs	r3, #0
   b9cd8:	6840      	ldr	r0, [r0, #4]
   b9cda:	461a      	mov	r2, r3
   b9cdc:	f7fd bdb4 	b.w	b7848 <network_connect>

000b9ce0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9ce0:	4b02      	ldr	r3, [pc, #8]	; (b9cec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b9ce2:	2204      	movs	r2, #4
   b9ce4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b9ce6:	4a02      	ldr	r2, [pc, #8]	; (b9cf0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b9ce8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b9cea:	4770      	bx	lr
   b9cec:	2003e718 	.word	0x2003e718
   b9cf0:	000bd88c 	.word	0x000bd88c

000b9cf4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b9cf4:	b510      	push	{r4, lr}
   b9cf6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b9cf8:	f001 f9d4 	bl	bb0a4 <strlen>
   b9cfc:	3801      	subs	r0, #1
   b9cfe:	1823      	adds	r3, r4, r0
   b9d00:	4620      	mov	r0, r4
	while(i<j){
   b9d02:	4283      	cmp	r3, r0
   b9d04:	d906      	bls.n	b9d14 <_Z11str_reversePc+0x20>
		c = *i;
   b9d06:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b9d08:	7819      	ldrb	r1, [r3, #0]
   b9d0a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b9d0e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b9d12:	e7f6      	b.n	b9d02 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b9d14:	bd10      	pop	{r4, pc}

000b9d16 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b9d16:	b570      	push	{r4, r5, r6, lr}
   b9d18:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b9d1a:	1e91      	subs	r1, r2, #2
   b9d1c:	2922      	cmp	r1, #34	; 0x22
   b9d1e:	d81d      	bhi.n	b9d5c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b9d20:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b9d22:	b930      	cbnz	r0, b9d32 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b9d24:	4423      	add	r3, r4
            *ptr++ = '0';
   b9d26:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b9d28:	429d      	cmp	r5, r3
   b9d2a:	d210      	bcs.n	b9d4e <ultoa+0x38>
            *ptr++ = '0';
   b9d2c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b9d30:	e7fa      	b.n	b9d28 <ultoa+0x12>
            result.quot = a/radix;
   b9d32:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b9d36:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b9d3a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b9d3c:	2809      	cmp	r0, #9
                *ptr += '0';
   b9d3e:	bf94      	ite	ls
   b9d40:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b9d42:	3157      	addhi	r1, #87	; 0x57
   b9d44:	b2c9      	uxtb	r1, r1
   b9d46:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b9d4a:	4630      	mov	r0, r6
	while(a){
   b9d4c:	e7e9      	b.n	b9d22 <ultoa+0xc>

	*ptr = '\0';
   b9d4e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b9d50:	4620      	mov	r0, r4
	*ptr = '\0';
   b9d52:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b9d54:	f7ff ffce 	bl	b9cf4 <_Z11str_reversePc>
	return buffer;
   b9d58:	4620      	mov	r0, r4
}
   b9d5a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b9d5c:	2000      	movs	r0, #0
   b9d5e:	e7fc      	b.n	b9d5a <ultoa+0x44>

000b9d60 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b9d60:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b9d62:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b9d64:	460c      	mov	r4, r1
   b9d66:	4615      	mov	r5, r2
	if(a<0){
   b9d68:	da0e      	bge.n	b9d88 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b9d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b9d6e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b9d72:	bf14      	ite	ne
   b9d74:	4258      	negne	r0, r3
   b9d76:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b9d78:	2301      	movs	r3, #1
		*buffer = '-';
   b9d7a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b9d7c:	462a      	mov	r2, r5
   b9d7e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b9d80:	f7ff ffc9 	bl	b9d16 <ultoa>
	}
	return buffer;
}
   b9d84:	4620      	mov	r0, r4
   b9d86:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b9d88:	2301      	movs	r3, #1
   b9d8a:	e7f9      	b.n	b9d80 <itoa+0x20>

000b9d8c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b9d8c:	4b01      	ldr	r3, [pc, #4]	; (b9d94 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b9d8e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b9d90:	4770      	bx	lr
   b9d92:	bf00      	nop
   b9d94:	20035368 	.word	0x20035368

000b9d98 <serialEventRun>:
{
   b9d98:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b9d9a:	4b0b      	ldr	r3, [pc, #44]	; (b9dc8 <serialEventRun+0x30>)
   b9d9c:	b143      	cbz	r3, b9db0 <serialEventRun+0x18>
   b9d9e:	f7ff ff45 	bl	b9c2c <_Z16_fetch_usbserialv>
   b9da2:	6803      	ldr	r3, [r0, #0]
   b9da4:	691b      	ldr	r3, [r3, #16]
   b9da6:	4798      	blx	r3
   b9da8:	2800      	cmp	r0, #0
   b9daa:	dd01      	ble.n	b9db0 <serialEventRun+0x18>
        serialEvent();
   b9dac:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b9db0:	4b06      	ldr	r3, [pc, #24]	; (b9dcc <serialEventRun+0x34>)
   b9db2:	b143      	cbz	r3, b9dc6 <serialEventRun+0x2e>
   b9db4:	f000 f8c8 	bl	b9f48 <_Z22__fetch_global_Serial1v>
   b9db8:	6803      	ldr	r3, [r0, #0]
   b9dba:	691b      	ldr	r3, [r3, #16]
   b9dbc:	4798      	blx	r3
   b9dbe:	2800      	cmp	r0, #0
   b9dc0:	dd01      	ble.n	b9dc6 <serialEventRun+0x2e>
        serialEvent1();
   b9dc2:	f3af 8000 	nop.w
}
   b9dc6:	bd08      	pop	{r3, pc}
	...

000b9dd0 <_post_loop>:
{
   b9dd0:	b508      	push	{r3, lr}
	serialEventRun();
   b9dd2:	f7ff ffe1 	bl	b9d98 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b9dd6:	f7fd fbcb 	bl	b7570 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b9dda:	4b01      	ldr	r3, [pc, #4]	; (b9de0 <_post_loop+0x10>)
   b9ddc:	6018      	str	r0, [r3, #0]
}
   b9dde:	bd08      	pop	{r3, pc}
   b9de0:	2003e728 	.word	0x2003e728

000b9de4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9de4:	4805      	ldr	r0, [pc, #20]	; (b9dfc <_Z33system_initialize_user_backup_ramv+0x18>)
   b9de6:	4a06      	ldr	r2, [pc, #24]	; (b9e00 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b9de8:	4906      	ldr	r1, [pc, #24]	; (b9e04 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b9dea:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b9dec:	1a12      	subs	r2, r2, r0
   b9dee:	f001 f8e8 	bl	bafc2 <memcpy>
    __backup_sram_signature = signature;
   b9df2:	4b05      	ldr	r3, [pc, #20]	; (b9e08 <_Z33system_initialize_user_backup_ramv+0x24>)
   b9df4:	4a05      	ldr	r2, [pc, #20]	; (b9e0c <_Z33system_initialize_user_backup_ramv+0x28>)
   b9df6:	601a      	str	r2, [r3, #0]
}
   b9df8:	bd08      	pop	{r3, pc}
   b9dfa:	bf00      	nop
   b9dfc:	2003f400 	.word	0x2003f400
   b9e00:	2003f404 	.word	0x2003f404
   b9e04:	000bddd4 	.word	0x000bddd4
   b9e08:	2003f400 	.word	0x2003f400
   b9e0c:	9a271c1e 	.word	0x9a271c1e

000b9e10 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b9e10:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9e12:	2300      	movs	r3, #0
   b9e14:	9300      	str	r3, [sp, #0]
   b9e16:	461a      	mov	r2, r3
   b9e18:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9e1c:	f7fd fd02 	bl	b7824 <system_ctrl_set_result>
}
   b9e20:	b003      	add	sp, #12
   b9e22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9e28 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b9e28:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b9e2a:	8843      	ldrh	r3, [r0, #2]
   b9e2c:	2b0a      	cmp	r3, #10
   b9e2e:	d008      	beq.n	b9e42 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b9e30:	2b50      	cmp	r3, #80	; 0x50
   b9e32:	d10b      	bne.n	b9e4c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b9e34:	4b09      	ldr	r3, [pc, #36]	; (b9e5c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b9e36:	681b      	ldr	r3, [r3, #0]
   b9e38:	b14b      	cbz	r3, b9e4e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b9e3a:	b003      	add	sp, #12
   b9e3c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b9e40:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b9e42:	f7ff ffe5 	bl	b9e10 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b9e46:	b003      	add	sp, #12
   b9e48:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9e4c:	2300      	movs	r3, #0
   b9e4e:	9300      	str	r3, [sp, #0]
   b9e50:	461a      	mov	r2, r3
   b9e52:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b9e56:	f7fd fce5 	bl	b7824 <system_ctrl_set_result>
}
   b9e5a:	e7f4      	b.n	b9e46 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b9e5c:	2003e724 	.word	0x2003e724

000b9e60 <module_user_init_hook>:
{
   b9e60:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b9e62:	4812      	ldr	r0, [pc, #72]	; (b9eac <module_user_init_hook+0x4c>)
   b9e64:	2100      	movs	r1, #0
   b9e66:	f7fd fd97 	bl	b7998 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b9e6a:	4b11      	ldr	r3, [pc, #68]	; (b9eb0 <module_user_init_hook+0x50>)
   b9e6c:	681a      	ldr	r2, [r3, #0]
   b9e6e:	4b11      	ldr	r3, [pc, #68]	; (b9eb4 <module_user_init_hook+0x54>)
   b9e70:	429a      	cmp	r2, r3
   b9e72:	4b11      	ldr	r3, [pc, #68]	; (b9eb8 <module_user_init_hook+0x58>)
   b9e74:	bf0c      	ite	eq
   b9e76:	2201      	moveq	r2, #1
   b9e78:	2200      	movne	r2, #0
   b9e7a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b9e7c:	d001      	beq.n	b9e82 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b9e7e:	f7ff ffb1 	bl	b9de4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b9e82:	f7fd fb65 	bl	b7550 <HAL_RNG_GetRandomNumber>
   b9e86:	4604      	mov	r4, r0
    srand(seed);
   b9e88:	f001 f8cc 	bl	bb024 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b9e8c:	4b0b      	ldr	r3, [pc, #44]	; (b9ebc <module_user_init_hook+0x5c>)
   b9e8e:	b113      	cbz	r3, b9e96 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b9e90:	4620      	mov	r0, r4
   b9e92:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b9e96:	2100      	movs	r1, #0
   b9e98:	4808      	ldr	r0, [pc, #32]	; (b9ebc <module_user_init_hook+0x5c>)
   b9e9a:	f7fd fccd 	bl	b7838 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b9e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b9ea2:	4807      	ldr	r0, [pc, #28]	; (b9ec0 <module_user_init_hook+0x60>)
   b9ea4:	2100      	movs	r1, #0
   b9ea6:	f7fd bcb3 	b.w	b7810 <system_ctrl_set_app_request_handler>
   b9eaa:	bf00      	nop
   b9eac:	000b9d8d 	.word	0x000b9d8d
   b9eb0:	2003f400 	.word	0x2003f400
   b9eb4:	9a271c1e 	.word	0x9a271c1e
   b9eb8:	2003e720 	.word	0x2003e720
   b9ebc:	00000000 	.word	0x00000000
   b9ec0:	000b9e29 	.word	0x000b9e29

000b9ec4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9ec4:	4770      	bx	lr
	...

000b9ec8 <_Z19__fetch_global_Wirev>:
{
   b9ec8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9eca:	4d0e      	ldr	r5, [pc, #56]	; (b9f04 <_Z19__fetch_global_Wirev+0x3c>)
   b9ecc:	7829      	ldrb	r1, [r5, #0]
   b9ece:	f3bf 8f5b 	dmb	ish
   b9ed2:	f011 0401 	ands.w	r4, r1, #1
{
   b9ed6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9ed8:	d111      	bne.n	b9efe <_Z19__fetch_global_Wirev+0x36>
   b9eda:	4628      	mov	r0, r5
   b9edc:	f7fa f8e3 	bl	b40a6 <__cxa_guard_acquire>
   b9ee0:	b168      	cbz	r0, b9efe <_Z19__fetch_global_Wirev+0x36>
   b9ee2:	a801      	add	r0, sp, #4
   b9ee4:	f7fa fb6c 	bl	b45c0 <_Z17acquireWireBufferv>
   b9ee8:	aa01      	add	r2, sp, #4
   b9eea:	4621      	mov	r1, r4
   b9eec:	4806      	ldr	r0, [pc, #24]	; (b9f08 <_Z19__fetch_global_Wirev+0x40>)
   b9eee:	f7fe ff75 	bl	b8ddc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b9ef2:	4628      	mov	r0, r5
   b9ef4:	f7fa f8dc 	bl	b40b0 <__cxa_guard_release>
   b9ef8:	4804      	ldr	r0, [pc, #16]	; (b9f0c <_Z19__fetch_global_Wirev+0x44>)
   b9efa:	f001 f841 	bl	baf80 <atexit>
	return wire;
}
   b9efe:	4802      	ldr	r0, [pc, #8]	; (b9f08 <_Z19__fetch_global_Wirev+0x40>)
   b9f00:	b007      	add	sp, #28
   b9f02:	bd30      	pop	{r4, r5, pc}
   b9f04:	2003e72c 	.word	0x2003e72c
   b9f08:	2003e730 	.word	0x2003e730
   b9f0c:	000b9ec5 	.word	0x000b9ec5

000b9f10 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9f10:	4770      	bx	lr
	...

000b9f14 <_Z20acquireSerial1Bufferv>:
{
   b9f14:	b538      	push	{r3, r4, r5, lr}
   b9f16:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b9f18:	2514      	movs	r5, #20
   b9f1a:	462a      	mov	r2, r5
   b9f1c:	2100      	movs	r1, #0
   b9f1e:	f001 f878 	bl	bb012 <memset>
   b9f22:	8025      	strh	r5, [r4, #0]
   b9f24:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9f26:	4907      	ldr	r1, [pc, #28]	; (b9f44 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b9f28:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9f2a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b9f2c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9f2e:	f000 f82f 	bl	b9f90 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9f32:	4904      	ldr	r1, [pc, #16]	; (b9f44 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b9f34:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b9f36:	4628      	mov	r0, r5
   b9f38:	f000 f82a 	bl	b9f90 <_ZnajRKSt9nothrow_t>
    };
   b9f3c:	60e0      	str	r0, [r4, #12]
}
   b9f3e:	4620      	mov	r0, r4
   b9f40:	bd38      	pop	{r3, r4, r5, pc}
   b9f42:	bf00      	nop
   b9f44:	000bd8c0 	.word	0x000bd8c0

000b9f48 <_Z22__fetch_global_Serial1v>:
{
   b9f48:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9f4a:	4d0e      	ldr	r5, [pc, #56]	; (b9f84 <_Z22__fetch_global_Serial1v+0x3c>)
   b9f4c:	7829      	ldrb	r1, [r5, #0]
   b9f4e:	f3bf 8f5b 	dmb	ish
   b9f52:	f011 0401 	ands.w	r4, r1, #1
{
   b9f56:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9f58:	d111      	bne.n	b9f7e <_Z22__fetch_global_Serial1v+0x36>
   b9f5a:	4628      	mov	r0, r5
   b9f5c:	f7fa f8a3 	bl	b40a6 <__cxa_guard_acquire>
   b9f60:	b168      	cbz	r0, b9f7e <_Z22__fetch_global_Serial1v+0x36>
   b9f62:	a801      	add	r0, sp, #4
   b9f64:	f7ff ffd6 	bl	b9f14 <_Z20acquireSerial1Bufferv>
   b9f68:	aa01      	add	r2, sp, #4
   b9f6a:	4621      	mov	r1, r4
   b9f6c:	4806      	ldr	r0, [pc, #24]	; (b9f88 <_Z22__fetch_global_Serial1v+0x40>)
   b9f6e:	f7ff fdeb 	bl	b9b48 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b9f72:	4628      	mov	r0, r5
   b9f74:	f7fa f89c 	bl	b40b0 <__cxa_guard_release>
   b9f78:	4804      	ldr	r0, [pc, #16]	; (b9f8c <_Z22__fetch_global_Serial1v+0x44>)
   b9f7a:	f001 f801 	bl	baf80 <atexit>
    return serial1;
}
   b9f7e:	4802      	ldr	r0, [pc, #8]	; (b9f88 <_Z22__fetch_global_Serial1v+0x40>)
   b9f80:	b007      	add	sp, #28
   b9f82:	bd30      	pop	{r4, r5, pc}
   b9f84:	2003e744 	.word	0x2003e744
   b9f88:	2003e748 	.word	0x2003e748
   b9f8c:	000b9f11 	.word	0x000b9f11

000b9f90 <_ZnajRKSt9nothrow_t>:
   b9f90:	f7fa b883 	b.w	b409a <_Znaj>

000b9f94 <_ZSt17__throw_bad_allocv>:
   b9f94:	b508      	push	{r3, lr}
   b9f96:	f7fd fcdf 	bl	b7958 <abort>

000b9f9a <_ZSt19__throw_logic_errorPKc>:
   b9f9a:	b508      	push	{r3, lr}
   b9f9c:	f7fd fcdc 	bl	b7958 <abort>

000b9fa0 <_ZSt20__throw_length_errorPKc>:
   b9fa0:	b508      	push	{r3, lr}
   b9fa2:	f7fd fcd9 	bl	b7958 <abort>

000b9fa6 <_ZSt25__throw_bad_function_callv>:
   b9fa6:	b508      	push	{r3, lr}
   b9fa8:	f7fd fcd6 	bl	b7958 <abort>

000b9fac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b9fac:	4901      	ldr	r1, [pc, #4]	; (b9fb4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b9fae:	f000 b963 	b.w	ba278 <_ZNKSt9type_infoeqERKS_>
   b9fb2:	bf00      	nop
   b9fb4:	000bd8dc 	.word	0x000bd8dc

000b9fb8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   b9fb8:	b10a      	cbz	r2, b9fbe <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   b9fba:	f001 b802 	b.w	bafc2 <memcpy>
   b9fbe:	4770      	bx	lr

000b9fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   b9fc0:	b508      	push	{r3, lr}
   b9fc2:	680b      	ldr	r3, [r1, #0]
   b9fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   b9fc8:	d302      	bcc.n	b9fd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   b9fca:	480d      	ldr	r0, [pc, #52]	; (ba000 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   b9fcc:	f7ff ffe8 	bl	b9fa0 <_ZSt20__throw_length_errorPKc>
   b9fd0:	4293      	cmp	r3, r2
   b9fd2:	d90b      	bls.n	b9fec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b9fd4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   b9fd8:	ea4f 0042 	mov.w	r0, r2, lsl #1
   b9fdc:	d206      	bcs.n	b9fec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b9fde:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   b9fe2:	bf2a      	itet	cs
   b9fe4:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   b9fe8:	6008      	strcc	r0, [r1, #0]
   b9fea:	600b      	strcs	r3, [r1, #0]
   b9fec:	6808      	ldr	r0, [r1, #0]
   b9fee:	3001      	adds	r0, #1
   b9ff0:	d501      	bpl.n	b9ff6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   b9ff2:	f7ff ffcf 	bl	b9f94 <_ZSt17__throw_bad_allocv>
   b9ff6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b9ffa:	f7fa b84c 	b.w	b4096 <_Znwj>
   b9ffe:	bf00      	nop
   ba000:	000bd8e4 	.word	0x000bd8e4

000ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   ba004:	f850 3b08 	ldr.w	r3, [r0], #8
   ba008:	4283      	cmp	r3, r0
   ba00a:	d002      	beq.n	ba012 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   ba00c:	4618      	mov	r0, r3
   ba00e:	f7fa b846 	b.w	b409e <_ZdlPv>
   ba012:	4770      	bx	lr

000ba014 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   ba014:	2a01      	cmp	r2, #1
   ba016:	b410      	push	{r4}
   ba018:	d104      	bne.n	ba024 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   ba01a:	780a      	ldrb	r2, [r1, #0]
   ba01c:	f85d 4b04 	ldr.w	r4, [sp], #4
   ba020:	7002      	strb	r2, [r0, #0]
   ba022:	4770      	bx	lr
   ba024:	f85d 4b04 	ldr.w	r4, [sp], #4
   ba028:	f7ff bfc6 	b.w	b9fb8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000ba02c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
   ba02c:	b508      	push	{r3, lr}
   ba02e:	1a52      	subs	r2, r2, r1
   ba030:	f7ff fff0 	bl	ba014 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba034:	bd08      	pop	{r3, pc}

000ba036 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   ba036:	b508      	push	{r3, lr}
   ba038:	1a52      	subs	r2, r2, r1
   ba03a:	f7ff ffeb 	bl	ba014 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba03e:	bd08      	pop	{r3, pc}

000ba040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   ba040:	4288      	cmp	r0, r1
   ba042:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba044:	4604      	mov	r4, r0
   ba046:	460e      	mov	r6, r1
   ba048:	d01e      	beq.n	ba088 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   ba04a:	4603      	mov	r3, r0
   ba04c:	684d      	ldr	r5, [r1, #4]
   ba04e:	f853 2b08 	ldr.w	r2, [r3], #8
   ba052:	429a      	cmp	r2, r3
   ba054:	bf14      	ite	ne
   ba056:	6882      	ldrne	r2, [r0, #8]
   ba058:	220f      	moveq	r2, #15
   ba05a:	42aa      	cmp	r2, r5
   ba05c:	d20a      	bcs.n	ba074 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   ba05e:	a901      	add	r1, sp, #4
   ba060:	9501      	str	r5, [sp, #4]
   ba062:	f7ff ffad 	bl	b9fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   ba066:	4607      	mov	r7, r0
   ba068:	4620      	mov	r0, r4
   ba06a:	f7ff ffcb 	bl	ba004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   ba06e:	9b01      	ldr	r3, [sp, #4]
   ba070:	6027      	str	r7, [r4, #0]
   ba072:	60a3      	str	r3, [r4, #8]
   ba074:	b125      	cbz	r5, ba080 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   ba076:	6831      	ldr	r1, [r6, #0]
   ba078:	6820      	ldr	r0, [r4, #0]
   ba07a:	462a      	mov	r2, r5
   ba07c:	f7ff ffca 	bl	ba014 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   ba080:	6823      	ldr	r3, [r4, #0]
   ba082:	6065      	str	r5, [r4, #4]
   ba084:	2200      	movs	r2, #0
   ba086:	555a      	strb	r2, [r3, r5]
   ba088:	b003      	add	sp, #12
   ba08a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba08c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   ba08c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   ba08e:	2400      	movs	r4, #0
   ba090:	2310      	movs	r3, #16
   ba092:	e9cd 3402 	strd	r3, r4, [sp, #8]
   ba096:	6803      	ldr	r3, [r0, #0]
   ba098:	4615      	mov	r5, r2
   ba09a:	699e      	ldr	r6, [r3, #24]
   ba09c:	6812      	ldr	r2, [r2, #0]
   ba09e:	466b      	mov	r3, sp
   ba0a0:	e9cd 4400 	strd	r4, r4, [sp]
   ba0a4:	47b0      	blx	r6
   ba0a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba0aa:	f003 0306 	and.w	r3, r3, #6
   ba0ae:	2b06      	cmp	r3, #6
   ba0b0:	bf03      	ittte	eq
   ba0b2:	9b00      	ldreq	r3, [sp, #0]
   ba0b4:	602b      	streq	r3, [r5, #0]
   ba0b6:	2001      	moveq	r0, #1
   ba0b8:	4620      	movne	r0, r4
   ba0ba:	b004      	add	sp, #16
   ba0bc:	bd70      	pop	{r4, r5, r6, pc}

000ba0be <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   ba0be:	9800      	ldr	r0, [sp, #0]
   ba0c0:	4290      	cmp	r0, r2
   ba0c2:	bf14      	ite	ne
   ba0c4:	2001      	movne	r0, #1
   ba0c6:	2006      	moveq	r0, #6
   ba0c8:	4770      	bx	lr
	...

000ba0cc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   ba0cc:	b510      	push	{r4, lr}
   ba0ce:	4b03      	ldr	r3, [pc, #12]	; (ba0dc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   ba0d0:	6003      	str	r3, [r0, #0]
   ba0d2:	4604      	mov	r4, r0
   ba0d4:	f000 f8cd 	bl	ba272 <_ZNSt9type_infoD1Ev>
   ba0d8:	4620      	mov	r0, r4
   ba0da:	bd10      	pop	{r4, pc}
   ba0dc:	000bd934 	.word	0x000bd934

000ba0e0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   ba0e0:	b510      	push	{r4, lr}
   ba0e2:	4604      	mov	r4, r0
   ba0e4:	f7ff fff2 	bl	ba0cc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba0e8:	4620      	mov	r0, r4
   ba0ea:	2108      	movs	r1, #8
   ba0ec:	f7f9 ffd9 	bl	b40a2 <_ZdlPvj>
   ba0f0:	4620      	mov	r0, r4
   ba0f2:	bd10      	pop	{r4, pc}

000ba0f4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   ba0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba0f8:	461f      	mov	r7, r3
   ba0fa:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   ba0fe:	f8dd 8018 	ldr.w	r8, [sp, #24]
   ba102:	4598      	cmp	r8, r3
   ba104:	4606      	mov	r6, r0
   ba106:	4615      	mov	r5, r2
   ba108:	d107      	bne.n	ba11a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba10a:	9907      	ldr	r1, [sp, #28]
   ba10c:	f000 f8b4 	bl	ba278 <_ZNKSt9type_infoeqERKS_>
   ba110:	b118      	cbz	r0, ba11a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba112:	7165      	strb	r5, [r4, #5]
   ba114:	2000      	movs	r0, #0
   ba116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba11a:	4639      	mov	r1, r7
   ba11c:	4630      	mov	r0, r6
   ba11e:	f000 f8ab 	bl	ba278 <_ZNKSt9type_infoeqERKS_>
   ba122:	2800      	cmp	r0, #0
   ba124:	d0f6      	beq.n	ba114 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   ba126:	2301      	movs	r3, #1
   ba128:	f8c4 8000 	str.w	r8, [r4]
   ba12c:	7125      	strb	r5, [r4, #4]
   ba12e:	71a3      	strb	r3, [r4, #6]
   ba130:	e7f0      	b.n	ba114 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000ba132 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   ba132:	b538      	push	{r3, r4, r5, lr}
   ba134:	4615      	mov	r5, r2
   ba136:	461c      	mov	r4, r3
   ba138:	f000 f89e 	bl	ba278 <_ZNKSt9type_infoeqERKS_>
   ba13c:	b120      	cbz	r0, ba148 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   ba13e:	2308      	movs	r3, #8
   ba140:	60e3      	str	r3, [r4, #12]
   ba142:	2306      	movs	r3, #6
   ba144:	6025      	str	r5, [r4, #0]
   ba146:	7123      	strb	r3, [r4, #4]
   ba148:	bd38      	pop	{r3, r4, r5, pc}

000ba14a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   ba14a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba14c:	4605      	mov	r5, r0
   ba14e:	460c      	mov	r4, r1
   ba150:	9201      	str	r2, [sp, #4]
   ba152:	461e      	mov	r6, r3
   ba154:	f000 f890 	bl	ba278 <_ZNKSt9type_infoeqERKS_>
   ba158:	b950      	cbnz	r0, ba170 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba15a:	2e03      	cmp	r6, #3
   ba15c:	d808      	bhi.n	ba170 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba15e:	6823      	ldr	r3, [r4, #0]
   ba160:	9a01      	ldr	r2, [sp, #4]
   ba162:	695b      	ldr	r3, [r3, #20]
   ba164:	4629      	mov	r1, r5
   ba166:	4620      	mov	r0, r4
   ba168:	b002      	add	sp, #8
   ba16a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba16e:	4718      	bx	r3
   ba170:	b002      	add	sp, #8
   ba172:	bd70      	pop	{r4, r5, r6, pc}

000ba174 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   ba174:	b510      	push	{r4, lr}
   ba176:	4b03      	ldr	r3, [pc, #12]	; (ba184 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   ba178:	6003      	str	r3, [r0, #0]
   ba17a:	4604      	mov	r4, r0
   ba17c:	f7ff ffa6 	bl	ba0cc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba180:	4620      	mov	r0, r4
   ba182:	bd10      	pop	{r4, pc}
   ba184:	000bd994 	.word	0x000bd994

000ba188 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   ba188:	b510      	push	{r4, lr}
   ba18a:	4604      	mov	r4, r0
   ba18c:	f7ff fff2 	bl	ba174 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   ba190:	4620      	mov	r0, r4
   ba192:	210c      	movs	r1, #12
   ba194:	f7f9 ff85 	bl	b40a2 <_ZdlPvj>
   ba198:	4620      	mov	r0, r4
   ba19a:	bd10      	pop	{r4, pc}

000ba19c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   ba19c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba19e:	9f08      	ldr	r7, [sp, #32]
   ba1a0:	4297      	cmp	r7, r2
   ba1a2:	4605      	mov	r5, r0
   ba1a4:	460e      	mov	r6, r1
   ba1a6:	4614      	mov	r4, r2
   ba1a8:	d00a      	beq.n	ba1c0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   ba1aa:	68a8      	ldr	r0, [r5, #8]
   ba1ac:	6802      	ldr	r2, [r0, #0]
   ba1ae:	9708      	str	r7, [sp, #32]
   ba1b0:	6a15      	ldr	r5, [r2, #32]
   ba1b2:	4631      	mov	r1, r6
   ba1b4:	4622      	mov	r2, r4
   ba1b6:	46ac      	mov	ip, r5
   ba1b8:	b003      	add	sp, #12
   ba1ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   ba1be:	4760      	bx	ip
   ba1c0:	4619      	mov	r1, r3
   ba1c2:	9301      	str	r3, [sp, #4]
   ba1c4:	f000 f858 	bl	ba278 <_ZNKSt9type_infoeqERKS_>
   ba1c8:	9b01      	ldr	r3, [sp, #4]
   ba1ca:	2800      	cmp	r0, #0
   ba1cc:	d0ed      	beq.n	ba1aa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   ba1ce:	2006      	movs	r0, #6
   ba1d0:	b003      	add	sp, #12
   ba1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba1d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   ba1d4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba1d8:	460d      	mov	r5, r1
   ba1da:	4619      	mov	r1, r3
   ba1dc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   ba1e0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   ba1e4:	4681      	mov	r9, r0
   ba1e6:	4617      	mov	r7, r2
   ba1e8:	4698      	mov	r8, r3
   ba1ea:	f000 f845 	bl	ba278 <_ZNKSt9type_infoeqERKS_>
   ba1ee:	b190      	cbz	r0, ba216 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   ba1f0:	2d00      	cmp	r5, #0
   ba1f2:	6034      	str	r4, [r6, #0]
   ba1f4:	7137      	strb	r7, [r6, #4]
   ba1f6:	db09      	blt.n	ba20c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   ba1f8:	1961      	adds	r1, r4, r5
   ba1fa:	458a      	cmp	sl, r1
   ba1fc:	bf0c      	ite	eq
   ba1fe:	2106      	moveq	r1, #6
   ba200:	2101      	movne	r1, #1
   ba202:	71b1      	strb	r1, [r6, #6]
   ba204:	2000      	movs	r0, #0
   ba206:	b001      	add	sp, #4
   ba208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba20c:	3502      	adds	r5, #2
   ba20e:	d1f9      	bne.n	ba204 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba210:	2301      	movs	r3, #1
   ba212:	71b3      	strb	r3, [r6, #6]
   ba214:	e7f6      	b.n	ba204 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba216:	4554      	cmp	r4, sl
   ba218:	d106      	bne.n	ba228 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba21a:	4659      	mov	r1, fp
   ba21c:	4648      	mov	r0, r9
   ba21e:	f000 f82b 	bl	ba278 <_ZNKSt9type_infoeqERKS_>
   ba222:	b108      	cbz	r0, ba228 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba224:	7177      	strb	r7, [r6, #5]
   ba226:	e7ed      	b.n	ba204 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba228:	f8d9 0008 	ldr.w	r0, [r9, #8]
   ba22c:	6803      	ldr	r3, [r0, #0]
   ba22e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   ba232:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   ba236:	69dc      	ldr	r4, [r3, #28]
   ba238:	463a      	mov	r2, r7
   ba23a:	4643      	mov	r3, r8
   ba23c:	4629      	mov	r1, r5
   ba23e:	46a4      	mov	ip, r4
   ba240:	b001      	add	sp, #4
   ba242:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba246:	4760      	bx	ip

000ba248 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   ba248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba24c:	4607      	mov	r7, r0
   ba24e:	460c      	mov	r4, r1
   ba250:	4615      	mov	r5, r2
   ba252:	461e      	mov	r6, r3
   ba254:	f7ff ff6d 	bl	ba132 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   ba258:	b948      	cbnz	r0, ba26e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   ba25a:	68b8      	ldr	r0, [r7, #8]
   ba25c:	6803      	ldr	r3, [r0, #0]
   ba25e:	699f      	ldr	r7, [r3, #24]
   ba260:	462a      	mov	r2, r5
   ba262:	4633      	mov	r3, r6
   ba264:	4621      	mov	r1, r4
   ba266:	46bc      	mov	ip, r7
   ba268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba26c:	4760      	bx	ip
   ba26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba272 <_ZNSt9type_infoD1Ev>:
   ba272:	4770      	bx	lr

000ba274 <_ZNKSt9type_info14__is_pointer_pEv>:
   ba274:	2000      	movs	r0, #0
   ba276:	4770      	bx	lr

000ba278 <_ZNKSt9type_infoeqERKS_>:
   ba278:	4281      	cmp	r1, r0
   ba27a:	b508      	push	{r3, lr}
   ba27c:	d00e      	beq.n	ba29c <_ZNKSt9type_infoeqERKS_+0x24>
   ba27e:	6840      	ldr	r0, [r0, #4]
   ba280:	7803      	ldrb	r3, [r0, #0]
   ba282:	2b2a      	cmp	r3, #42	; 0x2a
   ba284:	d00c      	beq.n	ba2a0 <_ZNKSt9type_infoeqERKS_+0x28>
   ba286:	6849      	ldr	r1, [r1, #4]
   ba288:	780b      	ldrb	r3, [r1, #0]
   ba28a:	2b2a      	cmp	r3, #42	; 0x2a
   ba28c:	bf08      	it	eq
   ba28e:	3101      	addeq	r1, #1
   ba290:	f000 fef6 	bl	bb080 <strcmp>
   ba294:	fab0 f080 	clz	r0, r0
   ba298:	0940      	lsrs	r0, r0, #5
   ba29a:	bd08      	pop	{r3, pc}
   ba29c:	2001      	movs	r0, #1
   ba29e:	e7fc      	b.n	ba29a <_ZNKSt9type_infoeqERKS_+0x22>
   ba2a0:	2000      	movs	r0, #0
   ba2a2:	e7fa      	b.n	ba29a <_ZNKSt9type_infoeqERKS_+0x22>

000ba2a4 <floorf>:
   ba2a4:	ee10 2a10 	vmov	r2, s0
   ba2a8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   ba2ac:	3b7f      	subs	r3, #127	; 0x7f
   ba2ae:	2b16      	cmp	r3, #22
   ba2b0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   ba2b4:	dc28      	bgt.n	ba308 <floorf+0x64>
   ba2b6:	2b00      	cmp	r3, #0
   ba2b8:	db18      	blt.n	ba2ec <floorf+0x48>
   ba2ba:	491a      	ldr	r1, [pc, #104]	; (ba324 <floorf+0x80>)
   ba2bc:	4119      	asrs	r1, r3
   ba2be:	420a      	tst	r2, r1
   ba2c0:	d021      	beq.n	ba306 <floorf+0x62>
   ba2c2:	eddf 7a19 	vldr	s15, [pc, #100]	; ba328 <floorf+0x84>
   ba2c6:	ee70 7a27 	vadd.f32	s15, s0, s15
   ba2ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba2d2:	dd18      	ble.n	ba306 <floorf+0x62>
   ba2d4:	2a00      	cmp	r2, #0
   ba2d6:	da04      	bge.n	ba2e2 <floorf+0x3e>
   ba2d8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   ba2dc:	fa40 f303 	asr.w	r3, r0, r3
   ba2e0:	441a      	add	r2, r3
   ba2e2:	ea22 0301 	bic.w	r3, r2, r1
   ba2e6:	ee00 3a10 	vmov	s0, r3
   ba2ea:	4770      	bx	lr
   ba2ec:	eddf 7a0e 	vldr	s15, [pc, #56]	; ba328 <floorf+0x84>
   ba2f0:	ee70 7a27 	vadd.f32	s15, s0, s15
   ba2f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba2fc:	dd03      	ble.n	ba306 <floorf+0x62>
   ba2fe:	2a00      	cmp	r2, #0
   ba300:	db08      	blt.n	ba314 <floorf+0x70>
   ba302:	ed9f 0a0a 	vldr	s0, [pc, #40]	; ba32c <floorf+0x88>
   ba306:	4770      	bx	lr
   ba308:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   ba30c:	d3fb      	bcc.n	ba306 <floorf+0x62>
   ba30e:	ee30 0a00 	vadd.f32	s0, s0, s0
   ba312:	4770      	bx	lr
   ba314:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   ba318:	2900      	cmp	r1, #0
   ba31a:	bf18      	it	ne
   ba31c:	eeb0 0a67 	vmovne.f32	s0, s15
   ba320:	4770      	bx	lr
   ba322:	bf00      	nop
   ba324:	007fffff 	.word	0x007fffff
   ba328:	7149f2ca 	.word	0x7149f2ca
   ba32c:	00000000 	.word	0x00000000

000ba330 <sqrt>:
   ba330:	b538      	push	{r3, r4, r5, lr}
   ba332:	ed2d 8b02 	vpush	{d8}
   ba336:	ec55 4b10 	vmov	r4, r5, d0
   ba33a:	f000 f833 	bl	ba3a4 <__ieee754_sqrt>
   ba33e:	4b18      	ldr	r3, [pc, #96]	; (ba3a0 <sqrt+0x70>)
   ba340:	eeb0 8a40 	vmov.f32	s16, s0
   ba344:	eef0 8a60 	vmov.f32	s17, s1
   ba348:	f993 3000 	ldrsb.w	r3, [r3]
   ba34c:	3301      	adds	r3, #1
   ba34e:	d00d      	beq.n	ba36c <sqrt+0x3c>
   ba350:	4622      	mov	r2, r4
   ba352:	462b      	mov	r3, r5
   ba354:	4620      	mov	r0, r4
   ba356:	4629      	mov	r1, r5
   ba358:	f000 fd46 	bl	bade8 <__aeabi_dcmpun>
   ba35c:	b930      	cbnz	r0, ba36c <sqrt+0x3c>
   ba35e:	2200      	movs	r2, #0
   ba360:	2300      	movs	r3, #0
   ba362:	4620      	mov	r0, r4
   ba364:	4629      	mov	r1, r5
   ba366:	f000 fd17 	bl	bad98 <__aeabi_dcmplt>
   ba36a:	b930      	cbnz	r0, ba37a <sqrt+0x4a>
   ba36c:	eeb0 0a48 	vmov.f32	s0, s16
   ba370:	eef0 0a68 	vmov.f32	s1, s17
   ba374:	ecbd 8b02 	vpop	{d8}
   ba378:	bd38      	pop	{r3, r4, r5, pc}
   ba37a:	f7fd fafd 	bl	b7978 <__errno>
   ba37e:	2200      	movs	r2, #0
   ba380:	2300      	movs	r3, #0
   ba382:	2121      	movs	r1, #33	; 0x21
   ba384:	6001      	str	r1, [r0, #0]
   ba386:	4610      	mov	r0, r2
   ba388:	4619      	mov	r1, r3
   ba38a:	f000 fbbd 	bl	bab08 <__aeabi_ddiv>
   ba38e:	ec41 0b18 	vmov	d8, r0, r1
   ba392:	eeb0 0a48 	vmov.f32	s0, s16
   ba396:	eef0 0a68 	vmov.f32	s1, s17
   ba39a:	ecbd 8b02 	vpop	{d8}
   ba39e:	bd38      	pop	{r3, r4, r5, pc}
   ba3a0:	20035364 	.word	0x20035364

000ba3a4 <__ieee754_sqrt>:
   ba3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba3a8:	4a63      	ldr	r2, [pc, #396]	; (ba538 <__ieee754_sqrt+0x194>)
   ba3aa:	ec55 4b10 	vmov	r4, r5, d0
   ba3ae:	43aa      	bics	r2, r5
   ba3b0:	f000 809f 	beq.w	ba4f2 <__ieee754_sqrt+0x14e>
   ba3b4:	2d00      	cmp	r5, #0
   ba3b6:	ee10 ca10 	vmov	ip, s0
   ba3ba:	462b      	mov	r3, r5
   ba3bc:	dd54      	ble.n	ba468 <__ieee754_sqrt+0xc4>
   ba3be:	1529      	asrs	r1, r5, #20
   ba3c0:	d063      	beq.n	ba48a <__ieee754_sqrt+0xe6>
   ba3c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   ba3c6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   ba3ca:	07c9      	lsls	r1, r1, #31
   ba3cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba3d0:	d404      	bmi.n	ba3dc <__ieee754_sqrt+0x38>
   ba3d2:	005b      	lsls	r3, r3, #1
   ba3d4:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   ba3d8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba3dc:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   ba3e0:	2600      	movs	r6, #0
   ba3e2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   ba3e6:	107f      	asrs	r7, r7, #1
   ba3e8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba3ec:	f04f 0e16 	mov.w	lr, #22
   ba3f0:	4634      	mov	r4, r6
   ba3f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   ba3f6:	18a1      	adds	r1, r4, r2
   ba3f8:	4299      	cmp	r1, r3
   ba3fa:	dc02      	bgt.n	ba402 <__ieee754_sqrt+0x5e>
   ba3fc:	1a5b      	subs	r3, r3, r1
   ba3fe:	188c      	adds	r4, r1, r2
   ba400:	4416      	add	r6, r2
   ba402:	005b      	lsls	r3, r3, #1
   ba404:	f1be 0e01 	subs.w	lr, lr, #1
   ba408:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   ba40c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   ba410:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba414:	d1ef      	bne.n	ba3f6 <__ieee754_sqrt+0x52>
   ba416:	4675      	mov	r5, lr
   ba418:	2020      	movs	r0, #32
   ba41a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   ba41e:	e00a      	b.n	ba436 <__ieee754_sqrt+0x92>
   ba420:	d044      	beq.n	ba4ac <__ieee754_sqrt+0x108>
   ba422:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   ba426:	3801      	subs	r0, #1
   ba428:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   ba42c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   ba430:	ea4f 0252 	mov.w	r2, r2, lsr #1
   ba434:	d043      	beq.n	ba4be <__ieee754_sqrt+0x11a>
   ba436:	42a3      	cmp	r3, r4
   ba438:	eb02 010e 	add.w	r1, r2, lr
   ba43c:	ddf0      	ble.n	ba420 <__ieee754_sqrt+0x7c>
   ba43e:	2900      	cmp	r1, #0
   ba440:	eb01 0e02 	add.w	lr, r1, r2
   ba444:	db0a      	blt.n	ba45c <__ieee754_sqrt+0xb8>
   ba446:	46a0      	mov	r8, r4
   ba448:	1b1b      	subs	r3, r3, r4
   ba44a:	4561      	cmp	r1, ip
   ba44c:	bf88      	it	hi
   ba44e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   ba452:	ebac 0c01 	sub.w	ip, ip, r1
   ba456:	4415      	add	r5, r2
   ba458:	4644      	mov	r4, r8
   ba45a:	e7e2      	b.n	ba422 <__ieee754_sqrt+0x7e>
   ba45c:	f1be 0f00 	cmp.w	lr, #0
   ba460:	dbf1      	blt.n	ba446 <__ieee754_sqrt+0xa2>
   ba462:	f104 0801 	add.w	r8, r4, #1
   ba466:	e7ef      	b.n	ba448 <__ieee754_sqrt+0xa4>
   ba468:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   ba46c:	4322      	orrs	r2, r4
   ba46e:	d038      	beq.n	ba4e2 <__ieee754_sqrt+0x13e>
   ba470:	2d00      	cmp	r5, #0
   ba472:	d14e      	bne.n	ba512 <__ieee754_sqrt+0x16e>
   ba474:	4629      	mov	r1, r5
   ba476:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   ba47a:	3915      	subs	r1, #21
   ba47c:	4613      	mov	r3, r2
   ba47e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   ba482:	2a00      	cmp	r2, #0
   ba484:	d0f7      	beq.n	ba476 <__ieee754_sqrt+0xd2>
   ba486:	02d6      	lsls	r6, r2, #11
   ba488:	d450      	bmi.n	ba52c <__ieee754_sqrt+0x188>
   ba48a:	2000      	movs	r0, #0
   ba48c:	005b      	lsls	r3, r3, #1
   ba48e:	02dd      	lsls	r5, r3, #11
   ba490:	4604      	mov	r4, r0
   ba492:	f100 0001 	add.w	r0, r0, #1
   ba496:	d5f9      	bpl.n	ba48c <__ieee754_sqrt+0xe8>
   ba498:	461a      	mov	r2, r3
   ba49a:	4663      	mov	r3, ip
   ba49c:	fa0c fc00 	lsl.w	ip, ip, r0
   ba4a0:	f1c0 0020 	rsb	r0, r0, #32
   ba4a4:	40c3      	lsrs	r3, r0
   ba4a6:	1b09      	subs	r1, r1, r4
   ba4a8:	4313      	orrs	r3, r2
   ba4aa:	e78a      	b.n	ba3c2 <__ieee754_sqrt+0x1e>
   ba4ac:	4561      	cmp	r1, ip
   ba4ae:	d8b8      	bhi.n	ba422 <__ieee754_sqrt+0x7e>
   ba4b0:	2900      	cmp	r1, #0
   ba4b2:	eb01 0e02 	add.w	lr, r1, r2
   ba4b6:	dbd1      	blt.n	ba45c <__ieee754_sqrt+0xb8>
   ba4b8:	4698      	mov	r8, r3
   ba4ba:	2300      	movs	r3, #0
   ba4bc:	e7c9      	b.n	ba452 <__ieee754_sqrt+0xae>
   ba4be:	ea53 030c 	orrs.w	r3, r3, ip
   ba4c2:	d110      	bne.n	ba4e6 <__ieee754_sqrt+0x142>
   ba4c4:	0868      	lsrs	r0, r5, #1
   ba4c6:	1071      	asrs	r1, r6, #1
   ba4c8:	07f3      	lsls	r3, r6, #31
   ba4ca:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   ba4ce:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   ba4d2:	bf48      	it	mi
   ba4d4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   ba4d8:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   ba4dc:	4602      	mov	r2, r0
   ba4de:	ec43 2b10 	vmov	d0, r2, r3
   ba4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba4e6:	1c6a      	adds	r2, r5, #1
   ba4e8:	bf16      	itet	ne
   ba4ea:	1c68      	addne	r0, r5, #1
   ba4ec:	3601      	addeq	r6, #1
   ba4ee:	0840      	lsrne	r0, r0, #1
   ba4f0:	e7e9      	b.n	ba4c6 <__ieee754_sqrt+0x122>
   ba4f2:	ee10 2a10 	vmov	r2, s0
   ba4f6:	ee10 0a10 	vmov	r0, s0
   ba4fa:	462b      	mov	r3, r5
   ba4fc:	4629      	mov	r1, r5
   ba4fe:	f000 f9d9 	bl	ba8b4 <__aeabi_dmul>
   ba502:	4622      	mov	r2, r4
   ba504:	462b      	mov	r3, r5
   ba506:	f000 f81f 	bl	ba548 <__adddf3>
   ba50a:	ec41 0b10 	vmov	d0, r0, r1
   ba50e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba512:	ee10 2a10 	vmov	r2, s0
   ba516:	4620      	mov	r0, r4
   ba518:	4629      	mov	r1, r5
   ba51a:	f000 f813 	bl	ba544 <__aeabi_dsub>
   ba51e:	4602      	mov	r2, r0
   ba520:	460b      	mov	r3, r1
   ba522:	f000 faf1 	bl	bab08 <__aeabi_ddiv>
   ba526:	ec41 0b10 	vmov	d0, r0, r1
   ba52a:	e7da      	b.n	ba4e2 <__ieee754_sqrt+0x13e>
   ba52c:	4663      	mov	r3, ip
   ba52e:	2020      	movs	r0, #32
   ba530:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   ba534:	e7b6      	b.n	ba4a4 <__ieee754_sqrt+0x100>
   ba536:	bf00      	nop
   ba538:	7ff00000 	.word	0x7ff00000

000ba53c <__aeabi_drsub>:
   ba53c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   ba540:	e002      	b.n	ba548 <__adddf3>
   ba542:	bf00      	nop

000ba544 <__aeabi_dsub>:
   ba544:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000ba548 <__adddf3>:
   ba548:	b530      	push	{r4, r5, lr}
   ba54a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   ba54e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   ba552:	ea94 0f05 	teq	r4, r5
   ba556:	bf08      	it	eq
   ba558:	ea90 0f02 	teqeq	r0, r2
   ba55c:	bf1f      	itttt	ne
   ba55e:	ea54 0c00 	orrsne.w	ip, r4, r0
   ba562:	ea55 0c02 	orrsne.w	ip, r5, r2
   ba566:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   ba56a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba56e:	f000 80e2 	beq.w	ba736 <__adddf3+0x1ee>
   ba572:	ea4f 5454 	mov.w	r4, r4, lsr #21
   ba576:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   ba57a:	bfb8      	it	lt
   ba57c:	426d      	neglt	r5, r5
   ba57e:	dd0c      	ble.n	ba59a <__adddf3+0x52>
   ba580:	442c      	add	r4, r5
   ba582:	ea80 0202 	eor.w	r2, r0, r2
   ba586:	ea81 0303 	eor.w	r3, r1, r3
   ba58a:	ea82 0000 	eor.w	r0, r2, r0
   ba58e:	ea83 0101 	eor.w	r1, r3, r1
   ba592:	ea80 0202 	eor.w	r2, r0, r2
   ba596:	ea81 0303 	eor.w	r3, r1, r3
   ba59a:	2d36      	cmp	r5, #54	; 0x36
   ba59c:	bf88      	it	hi
   ba59e:	bd30      	pophi	{r4, r5, pc}
   ba5a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   ba5a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   ba5a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   ba5ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   ba5b0:	d002      	beq.n	ba5b8 <__adddf3+0x70>
   ba5b2:	4240      	negs	r0, r0
   ba5b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba5b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   ba5bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   ba5c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   ba5c4:	d002      	beq.n	ba5cc <__adddf3+0x84>
   ba5c6:	4252      	negs	r2, r2
   ba5c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   ba5cc:	ea94 0f05 	teq	r4, r5
   ba5d0:	f000 80a7 	beq.w	ba722 <__adddf3+0x1da>
   ba5d4:	f1a4 0401 	sub.w	r4, r4, #1
   ba5d8:	f1d5 0e20 	rsbs	lr, r5, #32
   ba5dc:	db0d      	blt.n	ba5fa <__adddf3+0xb2>
   ba5de:	fa02 fc0e 	lsl.w	ip, r2, lr
   ba5e2:	fa22 f205 	lsr.w	r2, r2, r5
   ba5e6:	1880      	adds	r0, r0, r2
   ba5e8:	f141 0100 	adc.w	r1, r1, #0
   ba5ec:	fa03 f20e 	lsl.w	r2, r3, lr
   ba5f0:	1880      	adds	r0, r0, r2
   ba5f2:	fa43 f305 	asr.w	r3, r3, r5
   ba5f6:	4159      	adcs	r1, r3
   ba5f8:	e00e      	b.n	ba618 <__adddf3+0xd0>
   ba5fa:	f1a5 0520 	sub.w	r5, r5, #32
   ba5fe:	f10e 0e20 	add.w	lr, lr, #32
   ba602:	2a01      	cmp	r2, #1
   ba604:	fa03 fc0e 	lsl.w	ip, r3, lr
   ba608:	bf28      	it	cs
   ba60a:	f04c 0c02 	orrcs.w	ip, ip, #2
   ba60e:	fa43 f305 	asr.w	r3, r3, r5
   ba612:	18c0      	adds	r0, r0, r3
   ba614:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   ba618:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba61c:	d507      	bpl.n	ba62e <__adddf3+0xe6>
   ba61e:	f04f 0e00 	mov.w	lr, #0
   ba622:	f1dc 0c00 	rsbs	ip, ip, #0
   ba626:	eb7e 0000 	sbcs.w	r0, lr, r0
   ba62a:	eb6e 0101 	sbc.w	r1, lr, r1
   ba62e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   ba632:	d31b      	bcc.n	ba66c <__adddf3+0x124>
   ba634:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   ba638:	d30c      	bcc.n	ba654 <__adddf3+0x10c>
   ba63a:	0849      	lsrs	r1, r1, #1
   ba63c:	ea5f 0030 	movs.w	r0, r0, rrx
   ba640:	ea4f 0c3c 	mov.w	ip, ip, rrx
   ba644:	f104 0401 	add.w	r4, r4, #1
   ba648:	ea4f 5244 	mov.w	r2, r4, lsl #21
   ba64c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   ba650:	f080 809a 	bcs.w	ba788 <__adddf3+0x240>
   ba654:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   ba658:	bf08      	it	eq
   ba65a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   ba65e:	f150 0000 	adcs.w	r0, r0, #0
   ba662:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba666:	ea41 0105 	orr.w	r1, r1, r5
   ba66a:	bd30      	pop	{r4, r5, pc}
   ba66c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   ba670:	4140      	adcs	r0, r0
   ba672:	eb41 0101 	adc.w	r1, r1, r1
   ba676:	3c01      	subs	r4, #1
   ba678:	bf28      	it	cs
   ba67a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   ba67e:	d2e9      	bcs.n	ba654 <__adddf3+0x10c>
   ba680:	f091 0f00 	teq	r1, #0
   ba684:	bf04      	itt	eq
   ba686:	4601      	moveq	r1, r0
   ba688:	2000      	moveq	r0, #0
   ba68a:	fab1 f381 	clz	r3, r1
   ba68e:	bf08      	it	eq
   ba690:	3320      	addeq	r3, #32
   ba692:	f1a3 030b 	sub.w	r3, r3, #11
   ba696:	f1b3 0220 	subs.w	r2, r3, #32
   ba69a:	da0c      	bge.n	ba6b6 <__adddf3+0x16e>
   ba69c:	320c      	adds	r2, #12
   ba69e:	dd08      	ble.n	ba6b2 <__adddf3+0x16a>
   ba6a0:	f102 0c14 	add.w	ip, r2, #20
   ba6a4:	f1c2 020c 	rsb	r2, r2, #12
   ba6a8:	fa01 f00c 	lsl.w	r0, r1, ip
   ba6ac:	fa21 f102 	lsr.w	r1, r1, r2
   ba6b0:	e00c      	b.n	ba6cc <__adddf3+0x184>
   ba6b2:	f102 0214 	add.w	r2, r2, #20
   ba6b6:	bfd8      	it	le
   ba6b8:	f1c2 0c20 	rsble	ip, r2, #32
   ba6bc:	fa01 f102 	lsl.w	r1, r1, r2
   ba6c0:	fa20 fc0c 	lsr.w	ip, r0, ip
   ba6c4:	bfdc      	itt	le
   ba6c6:	ea41 010c 	orrle.w	r1, r1, ip
   ba6ca:	4090      	lslle	r0, r2
   ba6cc:	1ae4      	subs	r4, r4, r3
   ba6ce:	bfa2      	ittt	ge
   ba6d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   ba6d4:	4329      	orrge	r1, r5
   ba6d6:	bd30      	popge	{r4, r5, pc}
   ba6d8:	ea6f 0404 	mvn.w	r4, r4
   ba6dc:	3c1f      	subs	r4, #31
   ba6de:	da1c      	bge.n	ba71a <__adddf3+0x1d2>
   ba6e0:	340c      	adds	r4, #12
   ba6e2:	dc0e      	bgt.n	ba702 <__adddf3+0x1ba>
   ba6e4:	f104 0414 	add.w	r4, r4, #20
   ba6e8:	f1c4 0220 	rsb	r2, r4, #32
   ba6ec:	fa20 f004 	lsr.w	r0, r0, r4
   ba6f0:	fa01 f302 	lsl.w	r3, r1, r2
   ba6f4:	ea40 0003 	orr.w	r0, r0, r3
   ba6f8:	fa21 f304 	lsr.w	r3, r1, r4
   ba6fc:	ea45 0103 	orr.w	r1, r5, r3
   ba700:	bd30      	pop	{r4, r5, pc}
   ba702:	f1c4 040c 	rsb	r4, r4, #12
   ba706:	f1c4 0220 	rsb	r2, r4, #32
   ba70a:	fa20 f002 	lsr.w	r0, r0, r2
   ba70e:	fa01 f304 	lsl.w	r3, r1, r4
   ba712:	ea40 0003 	orr.w	r0, r0, r3
   ba716:	4629      	mov	r1, r5
   ba718:	bd30      	pop	{r4, r5, pc}
   ba71a:	fa21 f004 	lsr.w	r0, r1, r4
   ba71e:	4629      	mov	r1, r5
   ba720:	bd30      	pop	{r4, r5, pc}
   ba722:	f094 0f00 	teq	r4, #0
   ba726:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   ba72a:	bf06      	itte	eq
   ba72c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   ba730:	3401      	addeq	r4, #1
   ba732:	3d01      	subne	r5, #1
   ba734:	e74e      	b.n	ba5d4 <__adddf3+0x8c>
   ba736:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba73a:	bf18      	it	ne
   ba73c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   ba740:	d029      	beq.n	ba796 <__adddf3+0x24e>
   ba742:	ea94 0f05 	teq	r4, r5
   ba746:	bf08      	it	eq
   ba748:	ea90 0f02 	teqeq	r0, r2
   ba74c:	d005      	beq.n	ba75a <__adddf3+0x212>
   ba74e:	ea54 0c00 	orrs.w	ip, r4, r0
   ba752:	bf04      	itt	eq
   ba754:	4619      	moveq	r1, r3
   ba756:	4610      	moveq	r0, r2
   ba758:	bd30      	pop	{r4, r5, pc}
   ba75a:	ea91 0f03 	teq	r1, r3
   ba75e:	bf1e      	ittt	ne
   ba760:	2100      	movne	r1, #0
   ba762:	2000      	movne	r0, #0
   ba764:	bd30      	popne	{r4, r5, pc}
   ba766:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   ba76a:	d105      	bne.n	ba778 <__adddf3+0x230>
   ba76c:	0040      	lsls	r0, r0, #1
   ba76e:	4149      	adcs	r1, r1
   ba770:	bf28      	it	cs
   ba772:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   ba776:	bd30      	pop	{r4, r5, pc}
   ba778:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   ba77c:	bf3c      	itt	cc
   ba77e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   ba782:	bd30      	popcc	{r4, r5, pc}
   ba784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba788:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   ba78c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   ba790:	f04f 0000 	mov.w	r0, #0
   ba794:	bd30      	pop	{r4, r5, pc}
   ba796:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   ba79a:	bf1a      	itte	ne
   ba79c:	4619      	movne	r1, r3
   ba79e:	4610      	movne	r0, r2
   ba7a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   ba7a4:	bf1c      	itt	ne
   ba7a6:	460b      	movne	r3, r1
   ba7a8:	4602      	movne	r2, r0
   ba7aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba7ae:	bf06      	itte	eq
   ba7b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   ba7b4:	ea91 0f03 	teqeq	r1, r3
   ba7b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   ba7bc:	bd30      	pop	{r4, r5, pc}
   ba7be:	bf00      	nop

000ba7c0 <__aeabi_ui2d>:
   ba7c0:	f090 0f00 	teq	r0, #0
   ba7c4:	bf04      	itt	eq
   ba7c6:	2100      	moveq	r1, #0
   ba7c8:	4770      	bxeq	lr
   ba7ca:	b530      	push	{r4, r5, lr}
   ba7cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba7d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba7d4:	f04f 0500 	mov.w	r5, #0
   ba7d8:	f04f 0100 	mov.w	r1, #0
   ba7dc:	e750      	b.n	ba680 <__adddf3+0x138>
   ba7de:	bf00      	nop

000ba7e0 <__aeabi_i2d>:
   ba7e0:	f090 0f00 	teq	r0, #0
   ba7e4:	bf04      	itt	eq
   ba7e6:	2100      	moveq	r1, #0
   ba7e8:	4770      	bxeq	lr
   ba7ea:	b530      	push	{r4, r5, lr}
   ba7ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba7f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba7f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   ba7f8:	bf48      	it	mi
   ba7fa:	4240      	negmi	r0, r0
   ba7fc:	f04f 0100 	mov.w	r1, #0
   ba800:	e73e      	b.n	ba680 <__adddf3+0x138>
   ba802:	bf00      	nop

000ba804 <__aeabi_f2d>:
   ba804:	0042      	lsls	r2, r0, #1
   ba806:	ea4f 01e2 	mov.w	r1, r2, asr #3
   ba80a:	ea4f 0131 	mov.w	r1, r1, rrx
   ba80e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   ba812:	bf1f      	itttt	ne
   ba814:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   ba818:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   ba81c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   ba820:	4770      	bxne	lr
   ba822:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   ba826:	bf08      	it	eq
   ba828:	4770      	bxeq	lr
   ba82a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   ba82e:	bf04      	itt	eq
   ba830:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   ba834:	4770      	bxeq	lr
   ba836:	b530      	push	{r4, r5, lr}
   ba838:	f44f 7460 	mov.w	r4, #896	; 0x380
   ba83c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   ba840:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ba844:	e71c      	b.n	ba680 <__adddf3+0x138>
   ba846:	bf00      	nop

000ba848 <__aeabi_ul2d>:
   ba848:	ea50 0201 	orrs.w	r2, r0, r1
   ba84c:	bf08      	it	eq
   ba84e:	4770      	bxeq	lr
   ba850:	b530      	push	{r4, r5, lr}
   ba852:	f04f 0500 	mov.w	r5, #0
   ba856:	e00a      	b.n	ba86e <__aeabi_l2d+0x16>

000ba858 <__aeabi_l2d>:
   ba858:	ea50 0201 	orrs.w	r2, r0, r1
   ba85c:	bf08      	it	eq
   ba85e:	4770      	bxeq	lr
   ba860:	b530      	push	{r4, r5, lr}
   ba862:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   ba866:	d502      	bpl.n	ba86e <__aeabi_l2d+0x16>
   ba868:	4240      	negs	r0, r0
   ba86a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba86e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   ba872:	f104 0432 	add.w	r4, r4, #50	; 0x32
   ba876:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   ba87a:	f43f aed8 	beq.w	ba62e <__adddf3+0xe6>
   ba87e:	f04f 0203 	mov.w	r2, #3
   ba882:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ba886:	bf18      	it	ne
   ba888:	3203      	addne	r2, #3
   ba88a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   ba88e:	bf18      	it	ne
   ba890:	3203      	addne	r2, #3
   ba892:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   ba896:	f1c2 0320 	rsb	r3, r2, #32
   ba89a:	fa00 fc03 	lsl.w	ip, r0, r3
   ba89e:	fa20 f002 	lsr.w	r0, r0, r2
   ba8a2:	fa01 fe03 	lsl.w	lr, r1, r3
   ba8a6:	ea40 000e 	orr.w	r0, r0, lr
   ba8aa:	fa21 f102 	lsr.w	r1, r1, r2
   ba8ae:	4414      	add	r4, r2
   ba8b0:	e6bd      	b.n	ba62e <__adddf3+0xe6>
   ba8b2:	bf00      	nop

000ba8b4 <__aeabi_dmul>:
   ba8b4:	b570      	push	{r4, r5, r6, lr}
   ba8b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   ba8ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   ba8be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   ba8c2:	bf1d      	ittte	ne
   ba8c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   ba8c8:	ea94 0f0c 	teqne	r4, ip
   ba8cc:	ea95 0f0c 	teqne	r5, ip
   ba8d0:	f000 f8de 	bleq	baa90 <__aeabi_dmul+0x1dc>
   ba8d4:	442c      	add	r4, r5
   ba8d6:	ea81 0603 	eor.w	r6, r1, r3
   ba8da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   ba8de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   ba8e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   ba8e6:	bf18      	it	ne
   ba8e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   ba8ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba8f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba8f4:	d038      	beq.n	ba968 <__aeabi_dmul+0xb4>
   ba8f6:	fba0 ce02 	umull	ip, lr, r0, r2
   ba8fa:	f04f 0500 	mov.w	r5, #0
   ba8fe:	fbe1 e502 	umlal	lr, r5, r1, r2
   ba902:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   ba906:	fbe0 e503 	umlal	lr, r5, r0, r3
   ba90a:	f04f 0600 	mov.w	r6, #0
   ba90e:	fbe1 5603 	umlal	r5, r6, r1, r3
   ba912:	f09c 0f00 	teq	ip, #0
   ba916:	bf18      	it	ne
   ba918:	f04e 0e01 	orrne.w	lr, lr, #1
   ba91c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   ba920:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   ba924:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   ba928:	d204      	bcs.n	ba934 <__aeabi_dmul+0x80>
   ba92a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   ba92e:	416d      	adcs	r5, r5
   ba930:	eb46 0606 	adc.w	r6, r6, r6
   ba934:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   ba938:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   ba93c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   ba940:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   ba944:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   ba948:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   ba94c:	bf88      	it	hi
   ba94e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   ba952:	d81e      	bhi.n	ba992 <__aeabi_dmul+0xde>
   ba954:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   ba958:	bf08      	it	eq
   ba95a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   ba95e:	f150 0000 	adcs.w	r0, r0, #0
   ba962:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   ba966:	bd70      	pop	{r4, r5, r6, pc}
   ba968:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   ba96c:	ea46 0101 	orr.w	r1, r6, r1
   ba970:	ea40 0002 	orr.w	r0, r0, r2
   ba974:	ea81 0103 	eor.w	r1, r1, r3
   ba978:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   ba97c:	bfc2      	ittt	gt
   ba97e:	ebd4 050c 	rsbsgt	r5, r4, ip
   ba982:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   ba986:	bd70      	popgt	{r4, r5, r6, pc}
   ba988:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba98c:	f04f 0e00 	mov.w	lr, #0
   ba990:	3c01      	subs	r4, #1
   ba992:	f300 80ab 	bgt.w	baaec <__aeabi_dmul+0x238>
   ba996:	f114 0f36 	cmn.w	r4, #54	; 0x36
   ba99a:	bfde      	ittt	le
   ba99c:	2000      	movle	r0, #0
   ba99e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   ba9a2:	bd70      	pople	{r4, r5, r6, pc}
   ba9a4:	f1c4 0400 	rsb	r4, r4, #0
   ba9a8:	3c20      	subs	r4, #32
   ba9aa:	da35      	bge.n	baa18 <__aeabi_dmul+0x164>
   ba9ac:	340c      	adds	r4, #12
   ba9ae:	dc1b      	bgt.n	ba9e8 <__aeabi_dmul+0x134>
   ba9b0:	f104 0414 	add.w	r4, r4, #20
   ba9b4:	f1c4 0520 	rsb	r5, r4, #32
   ba9b8:	fa00 f305 	lsl.w	r3, r0, r5
   ba9bc:	fa20 f004 	lsr.w	r0, r0, r4
   ba9c0:	fa01 f205 	lsl.w	r2, r1, r5
   ba9c4:	ea40 0002 	orr.w	r0, r0, r2
   ba9c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   ba9cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ba9d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   ba9d4:	fa21 f604 	lsr.w	r6, r1, r4
   ba9d8:	eb42 0106 	adc.w	r1, r2, r6
   ba9dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   ba9e0:	bf08      	it	eq
   ba9e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   ba9e6:	bd70      	pop	{r4, r5, r6, pc}
   ba9e8:	f1c4 040c 	rsb	r4, r4, #12
   ba9ec:	f1c4 0520 	rsb	r5, r4, #32
   ba9f0:	fa00 f304 	lsl.w	r3, r0, r4
   ba9f4:	fa20 f005 	lsr.w	r0, r0, r5
   ba9f8:	fa01 f204 	lsl.w	r2, r1, r4
   ba9fc:	ea40 0002 	orr.w	r0, r0, r2
   baa00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   baa04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   baa08:	f141 0100 	adc.w	r1, r1, #0
   baa0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   baa10:	bf08      	it	eq
   baa12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   baa16:	bd70      	pop	{r4, r5, r6, pc}
   baa18:	f1c4 0520 	rsb	r5, r4, #32
   baa1c:	fa00 f205 	lsl.w	r2, r0, r5
   baa20:	ea4e 0e02 	orr.w	lr, lr, r2
   baa24:	fa20 f304 	lsr.w	r3, r0, r4
   baa28:	fa01 f205 	lsl.w	r2, r1, r5
   baa2c:	ea43 0302 	orr.w	r3, r3, r2
   baa30:	fa21 f004 	lsr.w	r0, r1, r4
   baa34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   baa38:	fa21 f204 	lsr.w	r2, r1, r4
   baa3c:	ea20 0002 	bic.w	r0, r0, r2
   baa40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   baa44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   baa48:	bf08      	it	eq
   baa4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   baa4e:	bd70      	pop	{r4, r5, r6, pc}
   baa50:	f094 0f00 	teq	r4, #0
   baa54:	d10f      	bne.n	baa76 <__aeabi_dmul+0x1c2>
   baa56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   baa5a:	0040      	lsls	r0, r0, #1
   baa5c:	eb41 0101 	adc.w	r1, r1, r1
   baa60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   baa64:	bf08      	it	eq
   baa66:	3c01      	subeq	r4, #1
   baa68:	d0f7      	beq.n	baa5a <__aeabi_dmul+0x1a6>
   baa6a:	ea41 0106 	orr.w	r1, r1, r6
   baa6e:	f095 0f00 	teq	r5, #0
   baa72:	bf18      	it	ne
   baa74:	4770      	bxne	lr
   baa76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   baa7a:	0052      	lsls	r2, r2, #1
   baa7c:	eb43 0303 	adc.w	r3, r3, r3
   baa80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   baa84:	bf08      	it	eq
   baa86:	3d01      	subeq	r5, #1
   baa88:	d0f7      	beq.n	baa7a <__aeabi_dmul+0x1c6>
   baa8a:	ea43 0306 	orr.w	r3, r3, r6
   baa8e:	4770      	bx	lr
   baa90:	ea94 0f0c 	teq	r4, ip
   baa94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   baa98:	bf18      	it	ne
   baa9a:	ea95 0f0c 	teqne	r5, ip
   baa9e:	d00c      	beq.n	baaba <__aeabi_dmul+0x206>
   baaa0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   baaa4:	bf18      	it	ne
   baaa6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   baaaa:	d1d1      	bne.n	baa50 <__aeabi_dmul+0x19c>
   baaac:	ea81 0103 	eor.w	r1, r1, r3
   baab0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   baab4:	f04f 0000 	mov.w	r0, #0
   baab8:	bd70      	pop	{r4, r5, r6, pc}
   baaba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   baabe:	bf06      	itte	eq
   baac0:	4610      	moveq	r0, r2
   baac2:	4619      	moveq	r1, r3
   baac4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   baac8:	d019      	beq.n	baafe <__aeabi_dmul+0x24a>
   baaca:	ea94 0f0c 	teq	r4, ip
   baace:	d102      	bne.n	baad6 <__aeabi_dmul+0x222>
   baad0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   baad4:	d113      	bne.n	baafe <__aeabi_dmul+0x24a>
   baad6:	ea95 0f0c 	teq	r5, ip
   baada:	d105      	bne.n	baae8 <__aeabi_dmul+0x234>
   baadc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   baae0:	bf1c      	itt	ne
   baae2:	4610      	movne	r0, r2
   baae4:	4619      	movne	r1, r3
   baae6:	d10a      	bne.n	baafe <__aeabi_dmul+0x24a>
   baae8:	ea81 0103 	eor.w	r1, r1, r3
   baaec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   baaf0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   baaf4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   baaf8:	f04f 0000 	mov.w	r0, #0
   baafc:	bd70      	pop	{r4, r5, r6, pc}
   baafe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bab02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bab06:	bd70      	pop	{r4, r5, r6, pc}

000bab08 <__aeabi_ddiv>:
   bab08:	b570      	push	{r4, r5, r6, lr}
   bab0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bab0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bab12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bab16:	bf1d      	ittte	ne
   bab18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bab1c:	ea94 0f0c 	teqne	r4, ip
   bab20:	ea95 0f0c 	teqne	r5, ip
   bab24:	f000 f8a7 	bleq	bac76 <__aeabi_ddiv+0x16e>
   bab28:	eba4 0405 	sub.w	r4, r4, r5
   bab2c:	ea81 0e03 	eor.w	lr, r1, r3
   bab30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bab34:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bab38:	f000 8088 	beq.w	bac4c <__aeabi_ddiv+0x144>
   bab3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bab40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bab44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bab48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bab4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bab50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bab54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bab58:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bab5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bab60:	429d      	cmp	r5, r3
   bab62:	bf08      	it	eq
   bab64:	4296      	cmpeq	r6, r2
   bab66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bab6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bab6e:	d202      	bcs.n	bab76 <__aeabi_ddiv+0x6e>
   bab70:	085b      	lsrs	r3, r3, #1
   bab72:	ea4f 0232 	mov.w	r2, r2, rrx
   bab76:	1ab6      	subs	r6, r6, r2
   bab78:	eb65 0503 	sbc.w	r5, r5, r3
   bab7c:	085b      	lsrs	r3, r3, #1
   bab7e:	ea4f 0232 	mov.w	r2, r2, rrx
   bab82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bab86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bab8a:	ebb6 0e02 	subs.w	lr, r6, r2
   bab8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bab92:	bf22      	ittt	cs
   bab94:	1ab6      	subcs	r6, r6, r2
   bab96:	4675      	movcs	r5, lr
   bab98:	ea40 000c 	orrcs.w	r0, r0, ip
   bab9c:	085b      	lsrs	r3, r3, #1
   bab9e:	ea4f 0232 	mov.w	r2, r2, rrx
   baba2:	ebb6 0e02 	subs.w	lr, r6, r2
   baba6:	eb75 0e03 	sbcs.w	lr, r5, r3
   babaa:	bf22      	ittt	cs
   babac:	1ab6      	subcs	r6, r6, r2
   babae:	4675      	movcs	r5, lr
   babb0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   babb4:	085b      	lsrs	r3, r3, #1
   babb6:	ea4f 0232 	mov.w	r2, r2, rrx
   babba:	ebb6 0e02 	subs.w	lr, r6, r2
   babbe:	eb75 0e03 	sbcs.w	lr, r5, r3
   babc2:	bf22      	ittt	cs
   babc4:	1ab6      	subcs	r6, r6, r2
   babc6:	4675      	movcs	r5, lr
   babc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   babcc:	085b      	lsrs	r3, r3, #1
   babce:	ea4f 0232 	mov.w	r2, r2, rrx
   babd2:	ebb6 0e02 	subs.w	lr, r6, r2
   babd6:	eb75 0e03 	sbcs.w	lr, r5, r3
   babda:	bf22      	ittt	cs
   babdc:	1ab6      	subcs	r6, r6, r2
   babde:	4675      	movcs	r5, lr
   babe0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   babe4:	ea55 0e06 	orrs.w	lr, r5, r6
   babe8:	d018      	beq.n	bac1c <__aeabi_ddiv+0x114>
   babea:	ea4f 1505 	mov.w	r5, r5, lsl #4
   babee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   babf2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   babf6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   babfa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   babfe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bac02:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bac06:	d1c0      	bne.n	bab8a <__aeabi_ddiv+0x82>
   bac08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bac0c:	d10b      	bne.n	bac26 <__aeabi_ddiv+0x11e>
   bac0e:	ea41 0100 	orr.w	r1, r1, r0
   bac12:	f04f 0000 	mov.w	r0, #0
   bac16:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bac1a:	e7b6      	b.n	bab8a <__aeabi_ddiv+0x82>
   bac1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bac20:	bf04      	itt	eq
   bac22:	4301      	orreq	r1, r0
   bac24:	2000      	moveq	r0, #0
   bac26:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bac2a:	bf88      	it	hi
   bac2c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bac30:	f63f aeaf 	bhi.w	ba992 <__aeabi_dmul+0xde>
   bac34:	ebb5 0c03 	subs.w	ip, r5, r3
   bac38:	bf04      	itt	eq
   bac3a:	ebb6 0c02 	subseq.w	ip, r6, r2
   bac3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bac42:	f150 0000 	adcs.w	r0, r0, #0
   bac46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bac4a:	bd70      	pop	{r4, r5, r6, pc}
   bac4c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bac50:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bac54:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bac58:	bfc2      	ittt	gt
   bac5a:	ebd4 050c 	rsbsgt	r5, r4, ip
   bac5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bac62:	bd70      	popgt	{r4, r5, r6, pc}
   bac64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bac68:	f04f 0e00 	mov.w	lr, #0
   bac6c:	3c01      	subs	r4, #1
   bac6e:	e690      	b.n	ba992 <__aeabi_dmul+0xde>
   bac70:	ea45 0e06 	orr.w	lr, r5, r6
   bac74:	e68d      	b.n	ba992 <__aeabi_dmul+0xde>
   bac76:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bac7a:	ea94 0f0c 	teq	r4, ip
   bac7e:	bf08      	it	eq
   bac80:	ea95 0f0c 	teqeq	r5, ip
   bac84:	f43f af3b 	beq.w	baafe <__aeabi_dmul+0x24a>
   bac88:	ea94 0f0c 	teq	r4, ip
   bac8c:	d10a      	bne.n	baca4 <__aeabi_ddiv+0x19c>
   bac8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bac92:	f47f af34 	bne.w	baafe <__aeabi_dmul+0x24a>
   bac96:	ea95 0f0c 	teq	r5, ip
   bac9a:	f47f af25 	bne.w	baae8 <__aeabi_dmul+0x234>
   bac9e:	4610      	mov	r0, r2
   baca0:	4619      	mov	r1, r3
   baca2:	e72c      	b.n	baafe <__aeabi_dmul+0x24a>
   baca4:	ea95 0f0c 	teq	r5, ip
   baca8:	d106      	bne.n	bacb8 <__aeabi_ddiv+0x1b0>
   bacaa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bacae:	f43f aefd 	beq.w	baaac <__aeabi_dmul+0x1f8>
   bacb2:	4610      	mov	r0, r2
   bacb4:	4619      	mov	r1, r3
   bacb6:	e722      	b.n	baafe <__aeabi_dmul+0x24a>
   bacb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bacbc:	bf18      	it	ne
   bacbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bacc2:	f47f aec5 	bne.w	baa50 <__aeabi_dmul+0x19c>
   bacc6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bacca:	f47f af0d 	bne.w	baae8 <__aeabi_dmul+0x234>
   bacce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bacd2:	f47f aeeb 	bne.w	baaac <__aeabi_dmul+0x1f8>
   bacd6:	e712      	b.n	baafe <__aeabi_dmul+0x24a>

000bacd8 <__gedf2>:
   bacd8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bacdc:	e006      	b.n	bacec <__cmpdf2+0x4>
   bacde:	bf00      	nop

000bace0 <__ledf2>:
   bace0:	f04f 0c01 	mov.w	ip, #1
   bace4:	e002      	b.n	bacec <__cmpdf2+0x4>
   bace6:	bf00      	nop

000bace8 <__cmpdf2>:
   bace8:	f04f 0c01 	mov.w	ip, #1
   bacec:	f84d cd04 	str.w	ip, [sp, #-4]!
   bacf0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bacf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bacf8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bacfc:	bf18      	it	ne
   bacfe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bad02:	d01b      	beq.n	bad3c <__cmpdf2+0x54>
   bad04:	b001      	add	sp, #4
   bad06:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bad0a:	bf0c      	ite	eq
   bad0c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bad10:	ea91 0f03 	teqne	r1, r3
   bad14:	bf02      	ittt	eq
   bad16:	ea90 0f02 	teqeq	r0, r2
   bad1a:	2000      	moveq	r0, #0
   bad1c:	4770      	bxeq	lr
   bad1e:	f110 0f00 	cmn.w	r0, #0
   bad22:	ea91 0f03 	teq	r1, r3
   bad26:	bf58      	it	pl
   bad28:	4299      	cmppl	r1, r3
   bad2a:	bf08      	it	eq
   bad2c:	4290      	cmpeq	r0, r2
   bad2e:	bf2c      	ite	cs
   bad30:	17d8      	asrcs	r0, r3, #31
   bad32:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bad36:	f040 0001 	orr.w	r0, r0, #1
   bad3a:	4770      	bx	lr
   bad3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bad40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bad44:	d102      	bne.n	bad4c <__cmpdf2+0x64>
   bad46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bad4a:	d107      	bne.n	bad5c <__cmpdf2+0x74>
   bad4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bad50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bad54:	d1d6      	bne.n	bad04 <__cmpdf2+0x1c>
   bad56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bad5a:	d0d3      	beq.n	bad04 <__cmpdf2+0x1c>
   bad5c:	f85d 0b04 	ldr.w	r0, [sp], #4
   bad60:	4770      	bx	lr
   bad62:	bf00      	nop

000bad64 <__aeabi_cdrcmple>:
   bad64:	4684      	mov	ip, r0
   bad66:	4610      	mov	r0, r2
   bad68:	4662      	mov	r2, ip
   bad6a:	468c      	mov	ip, r1
   bad6c:	4619      	mov	r1, r3
   bad6e:	4663      	mov	r3, ip
   bad70:	e000      	b.n	bad74 <__aeabi_cdcmpeq>
   bad72:	bf00      	nop

000bad74 <__aeabi_cdcmpeq>:
   bad74:	b501      	push	{r0, lr}
   bad76:	f7ff ffb7 	bl	bace8 <__cmpdf2>
   bad7a:	2800      	cmp	r0, #0
   bad7c:	bf48      	it	mi
   bad7e:	f110 0f00 	cmnmi.w	r0, #0
   bad82:	bd01      	pop	{r0, pc}

000bad84 <__aeabi_dcmpeq>:
   bad84:	f84d ed08 	str.w	lr, [sp, #-8]!
   bad88:	f7ff fff4 	bl	bad74 <__aeabi_cdcmpeq>
   bad8c:	bf0c      	ite	eq
   bad8e:	2001      	moveq	r0, #1
   bad90:	2000      	movne	r0, #0
   bad92:	f85d fb08 	ldr.w	pc, [sp], #8
   bad96:	bf00      	nop

000bad98 <__aeabi_dcmplt>:
   bad98:	f84d ed08 	str.w	lr, [sp, #-8]!
   bad9c:	f7ff ffea 	bl	bad74 <__aeabi_cdcmpeq>
   bada0:	bf34      	ite	cc
   bada2:	2001      	movcc	r0, #1
   bada4:	2000      	movcs	r0, #0
   bada6:	f85d fb08 	ldr.w	pc, [sp], #8
   badaa:	bf00      	nop

000badac <__aeabi_dcmple>:
   badac:	f84d ed08 	str.w	lr, [sp, #-8]!
   badb0:	f7ff ffe0 	bl	bad74 <__aeabi_cdcmpeq>
   badb4:	bf94      	ite	ls
   badb6:	2001      	movls	r0, #1
   badb8:	2000      	movhi	r0, #0
   badba:	f85d fb08 	ldr.w	pc, [sp], #8
   badbe:	bf00      	nop

000badc0 <__aeabi_dcmpge>:
   badc0:	f84d ed08 	str.w	lr, [sp, #-8]!
   badc4:	f7ff ffce 	bl	bad64 <__aeabi_cdrcmple>
   badc8:	bf94      	ite	ls
   badca:	2001      	movls	r0, #1
   badcc:	2000      	movhi	r0, #0
   badce:	f85d fb08 	ldr.w	pc, [sp], #8
   badd2:	bf00      	nop

000badd4 <__aeabi_dcmpgt>:
   badd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   badd8:	f7ff ffc4 	bl	bad64 <__aeabi_cdrcmple>
   baddc:	bf34      	ite	cc
   badde:	2001      	movcc	r0, #1
   bade0:	2000      	movcs	r0, #0
   bade2:	f85d fb08 	ldr.w	pc, [sp], #8
   bade6:	bf00      	nop

000bade8 <__aeabi_dcmpun>:
   bade8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   badec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   badf0:	d102      	bne.n	badf8 <__aeabi_dcmpun+0x10>
   badf2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   badf6:	d10a      	bne.n	bae0e <__aeabi_dcmpun+0x26>
   badf8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   badfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bae00:	d102      	bne.n	bae08 <__aeabi_dcmpun+0x20>
   bae02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bae06:	d102      	bne.n	bae0e <__aeabi_dcmpun+0x26>
   bae08:	f04f 0000 	mov.w	r0, #0
   bae0c:	4770      	bx	lr
   bae0e:	f04f 0001 	mov.w	r0, #1
   bae12:	4770      	bx	lr

000bae14 <__aeabi_d2iz>:
   bae14:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bae18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bae1c:	d215      	bcs.n	bae4a <__aeabi_d2iz+0x36>
   bae1e:	d511      	bpl.n	bae44 <__aeabi_d2iz+0x30>
   bae20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bae24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bae28:	d912      	bls.n	bae50 <__aeabi_d2iz+0x3c>
   bae2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bae2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bae32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bae36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bae3a:	fa23 f002 	lsr.w	r0, r3, r2
   bae3e:	bf18      	it	ne
   bae40:	4240      	negne	r0, r0
   bae42:	4770      	bx	lr
   bae44:	f04f 0000 	mov.w	r0, #0
   bae48:	4770      	bx	lr
   bae4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bae4e:	d105      	bne.n	bae5c <__aeabi_d2iz+0x48>
   bae50:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bae54:	bf08      	it	eq
   bae56:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bae5a:	4770      	bx	lr
   bae5c:	f04f 0000 	mov.w	r0, #0
   bae60:	4770      	bx	lr
   bae62:	bf00      	nop

000bae64 <__aeabi_d2uiz>:
   bae64:	004a      	lsls	r2, r1, #1
   bae66:	d211      	bcs.n	bae8c <__aeabi_d2uiz+0x28>
   bae68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bae6c:	d211      	bcs.n	bae92 <__aeabi_d2uiz+0x2e>
   bae6e:	d50d      	bpl.n	bae8c <__aeabi_d2uiz+0x28>
   bae70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bae74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bae78:	d40e      	bmi.n	bae98 <__aeabi_d2uiz+0x34>
   bae7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bae7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bae82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bae86:	fa23 f002 	lsr.w	r0, r3, r2
   bae8a:	4770      	bx	lr
   bae8c:	f04f 0000 	mov.w	r0, #0
   bae90:	4770      	bx	lr
   bae92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bae96:	d102      	bne.n	bae9e <__aeabi_d2uiz+0x3a>
   bae98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bae9c:	4770      	bx	lr
   bae9e:	f04f 0000 	mov.w	r0, #0
   baea2:	4770      	bx	lr

000baea4 <__aeabi_d2f>:
   baea4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   baea8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   baeac:	bf24      	itt	cs
   baeae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   baeb2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   baeb6:	d90d      	bls.n	baed4 <__aeabi_d2f+0x30>
   baeb8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   baebc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   baec0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   baec4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   baec8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   baecc:	bf08      	it	eq
   baece:	f020 0001 	biceq.w	r0, r0, #1
   baed2:	4770      	bx	lr
   baed4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   baed8:	d121      	bne.n	baf1e <__aeabi_d2f+0x7a>
   baeda:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   baede:	bfbc      	itt	lt
   baee0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   baee4:	4770      	bxlt	lr
   baee6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   baeea:	ea4f 5252 	mov.w	r2, r2, lsr #21
   baeee:	f1c2 0218 	rsb	r2, r2, #24
   baef2:	f1c2 0c20 	rsb	ip, r2, #32
   baef6:	fa10 f30c 	lsls.w	r3, r0, ip
   baefa:	fa20 f002 	lsr.w	r0, r0, r2
   baefe:	bf18      	it	ne
   baf00:	f040 0001 	orrne.w	r0, r0, #1
   baf04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   baf08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   baf0c:	fa03 fc0c 	lsl.w	ip, r3, ip
   baf10:	ea40 000c 	orr.w	r0, r0, ip
   baf14:	fa23 f302 	lsr.w	r3, r3, r2
   baf18:	ea4f 0343 	mov.w	r3, r3, lsl #1
   baf1c:	e7cc      	b.n	baeb8 <__aeabi_d2f+0x14>
   baf1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   baf22:	d107      	bne.n	baf34 <__aeabi_d2f+0x90>
   baf24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   baf28:	bf1e      	ittt	ne
   baf2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   baf2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   baf32:	4770      	bxne	lr
   baf34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   baf38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   baf3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   baf40:	4770      	bx	lr
   baf42:	bf00      	nop

000baf44 <__aeabi_d2ulz>:
   baf44:	b5d0      	push	{r4, r6, r7, lr}
   baf46:	4b0c      	ldr	r3, [pc, #48]	; (baf78 <__aeabi_d2ulz+0x34>)
   baf48:	2200      	movs	r2, #0
   baf4a:	4606      	mov	r6, r0
   baf4c:	460f      	mov	r7, r1
   baf4e:	f7ff fcb1 	bl	ba8b4 <__aeabi_dmul>
   baf52:	f7ff ff87 	bl	bae64 <__aeabi_d2uiz>
   baf56:	4604      	mov	r4, r0
   baf58:	f7ff fc32 	bl	ba7c0 <__aeabi_ui2d>
   baf5c:	4b07      	ldr	r3, [pc, #28]	; (baf7c <__aeabi_d2ulz+0x38>)
   baf5e:	2200      	movs	r2, #0
   baf60:	f7ff fca8 	bl	ba8b4 <__aeabi_dmul>
   baf64:	4602      	mov	r2, r0
   baf66:	460b      	mov	r3, r1
   baf68:	4630      	mov	r0, r6
   baf6a:	4639      	mov	r1, r7
   baf6c:	f7ff faea 	bl	ba544 <__aeabi_dsub>
   baf70:	f7ff ff78 	bl	bae64 <__aeabi_d2uiz>
   baf74:	4621      	mov	r1, r4
   baf76:	bdd0      	pop	{r4, r6, r7, pc}
   baf78:	3df00000 	.word	0x3df00000
   baf7c:	41f00000 	.word	0x41f00000

000baf80 <atexit>:
   baf80:	2300      	movs	r3, #0
   baf82:	4601      	mov	r1, r0
   baf84:	461a      	mov	r2, r3
   baf86:	4618      	mov	r0, r3
   baf88:	f000 bf84 	b.w	bbe94 <__register_exitproc>

000baf8c <atof>:
   baf8c:	2100      	movs	r1, #0
   baf8e:	f000 bee9 	b.w	bbd64 <strtod>

000baf92 <atoi>:
   baf92:	220a      	movs	r2, #10
   baf94:	2100      	movs	r1, #0
   baf96:	f000 bf73 	b.w	bbe80 <strtol>

000baf9a <atol>:
   baf9a:	220a      	movs	r2, #10
   baf9c:	2100      	movs	r1, #0
   baf9e:	f000 bf6f 	b.w	bbe80 <strtol>

000bafa2 <memcmp>:
   bafa2:	b510      	push	{r4, lr}
   bafa4:	3901      	subs	r1, #1
   bafa6:	4402      	add	r2, r0
   bafa8:	4290      	cmp	r0, r2
   bafaa:	d101      	bne.n	bafb0 <memcmp+0xe>
   bafac:	2000      	movs	r0, #0
   bafae:	e005      	b.n	bafbc <memcmp+0x1a>
   bafb0:	7803      	ldrb	r3, [r0, #0]
   bafb2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bafb6:	42a3      	cmp	r3, r4
   bafb8:	d001      	beq.n	bafbe <memcmp+0x1c>
   bafba:	1b18      	subs	r0, r3, r4
   bafbc:	bd10      	pop	{r4, pc}
   bafbe:	3001      	adds	r0, #1
   bafc0:	e7f2      	b.n	bafa8 <memcmp+0x6>

000bafc2 <memcpy>:
   bafc2:	440a      	add	r2, r1
   bafc4:	4291      	cmp	r1, r2
   bafc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bafca:	d100      	bne.n	bafce <memcpy+0xc>
   bafcc:	4770      	bx	lr
   bafce:	b510      	push	{r4, lr}
   bafd0:	f811 4b01 	ldrb.w	r4, [r1], #1
   bafd4:	f803 4f01 	strb.w	r4, [r3, #1]!
   bafd8:	4291      	cmp	r1, r2
   bafda:	d1f9      	bne.n	bafd0 <memcpy+0xe>
   bafdc:	bd10      	pop	{r4, pc}

000bafde <memmove>:
   bafde:	4288      	cmp	r0, r1
   bafe0:	b510      	push	{r4, lr}
   bafe2:	eb01 0402 	add.w	r4, r1, r2
   bafe6:	d902      	bls.n	bafee <memmove+0x10>
   bafe8:	4284      	cmp	r4, r0
   bafea:	4623      	mov	r3, r4
   bafec:	d807      	bhi.n	baffe <memmove+0x20>
   bafee:	1e43      	subs	r3, r0, #1
   baff0:	42a1      	cmp	r1, r4
   baff2:	d008      	beq.n	bb006 <memmove+0x28>
   baff4:	f811 2b01 	ldrb.w	r2, [r1], #1
   baff8:	f803 2f01 	strb.w	r2, [r3, #1]!
   baffc:	e7f8      	b.n	baff0 <memmove+0x12>
   baffe:	4402      	add	r2, r0
   bb000:	4601      	mov	r1, r0
   bb002:	428a      	cmp	r2, r1
   bb004:	d100      	bne.n	bb008 <memmove+0x2a>
   bb006:	bd10      	pop	{r4, pc}
   bb008:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bb00c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bb010:	e7f7      	b.n	bb002 <memmove+0x24>

000bb012 <memset>:
   bb012:	4402      	add	r2, r0
   bb014:	4603      	mov	r3, r0
   bb016:	4293      	cmp	r3, r2
   bb018:	d100      	bne.n	bb01c <memset+0xa>
   bb01a:	4770      	bx	lr
   bb01c:	f803 1b01 	strb.w	r1, [r3], #1
   bb020:	e7f9      	b.n	bb016 <memset+0x4>
	...

000bb024 <srand>:
   bb024:	b538      	push	{r3, r4, r5, lr}
   bb026:	4b10      	ldr	r3, [pc, #64]	; (bb068 <srand+0x44>)
   bb028:	681d      	ldr	r5, [r3, #0]
   bb02a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb02c:	4604      	mov	r4, r0
   bb02e:	b9b3      	cbnz	r3, bb05e <srand+0x3a>
   bb030:	2018      	movs	r0, #24
   bb032:	f7fc fc69 	bl	b7908 <malloc>
   bb036:	4602      	mov	r2, r0
   bb038:	63a8      	str	r0, [r5, #56]	; 0x38
   bb03a:	b920      	cbnz	r0, bb046 <srand+0x22>
   bb03c:	4b0b      	ldr	r3, [pc, #44]	; (bb06c <srand+0x48>)
   bb03e:	480c      	ldr	r0, [pc, #48]	; (bb070 <srand+0x4c>)
   bb040:	2142      	movs	r1, #66	; 0x42
   bb042:	f7fc fca1 	bl	b7988 <__assert_func>
   bb046:	490b      	ldr	r1, [pc, #44]	; (bb074 <srand+0x50>)
   bb048:	4b0b      	ldr	r3, [pc, #44]	; (bb078 <srand+0x54>)
   bb04a:	e9c0 1300 	strd	r1, r3, [r0]
   bb04e:	4b0b      	ldr	r3, [pc, #44]	; (bb07c <srand+0x58>)
   bb050:	6083      	str	r3, [r0, #8]
   bb052:	230b      	movs	r3, #11
   bb054:	8183      	strh	r3, [r0, #12]
   bb056:	2100      	movs	r1, #0
   bb058:	2001      	movs	r0, #1
   bb05a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bb05e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb060:	2200      	movs	r2, #0
   bb062:	611c      	str	r4, [r3, #16]
   bb064:	615a      	str	r2, [r3, #20]
   bb066:	bd38      	pop	{r3, r4, r5, pc}
   bb068:	20035368 	.word	0x20035368
   bb06c:	000bd9cd 	.word	0x000bd9cd
   bb070:	000bd9e4 	.word	0x000bd9e4
   bb074:	abcd330e 	.word	0xabcd330e
   bb078:	e66d1234 	.word	0xe66d1234
   bb07c:	0005deec 	.word	0x0005deec

000bb080 <strcmp>:
   bb080:	f810 2b01 	ldrb.w	r2, [r0], #1
   bb084:	f811 3b01 	ldrb.w	r3, [r1], #1
   bb088:	2a01      	cmp	r2, #1
   bb08a:	bf28      	it	cs
   bb08c:	429a      	cmpcs	r2, r3
   bb08e:	d0f7      	beq.n	bb080 <strcmp>
   bb090:	1ad0      	subs	r0, r2, r3
   bb092:	4770      	bx	lr

000bb094 <strcpy>:
   bb094:	4603      	mov	r3, r0
   bb096:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb09a:	f803 2b01 	strb.w	r2, [r3], #1
   bb09e:	2a00      	cmp	r2, #0
   bb0a0:	d1f9      	bne.n	bb096 <strcpy+0x2>
   bb0a2:	4770      	bx	lr

000bb0a4 <strlen>:
   bb0a4:	4603      	mov	r3, r0
   bb0a6:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb0aa:	2a00      	cmp	r2, #0
   bb0ac:	d1fb      	bne.n	bb0a6 <strlen+0x2>
   bb0ae:	1a18      	subs	r0, r3, r0
   bb0b0:	3801      	subs	r0, #1
   bb0b2:	4770      	bx	lr

000bb0b4 <strncmp>:
   bb0b4:	b510      	push	{r4, lr}
   bb0b6:	b17a      	cbz	r2, bb0d8 <strncmp+0x24>
   bb0b8:	4603      	mov	r3, r0
   bb0ba:	3901      	subs	r1, #1
   bb0bc:	1884      	adds	r4, r0, r2
   bb0be:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb0c2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bb0c6:	4290      	cmp	r0, r2
   bb0c8:	d101      	bne.n	bb0ce <strncmp+0x1a>
   bb0ca:	42a3      	cmp	r3, r4
   bb0cc:	d101      	bne.n	bb0d2 <strncmp+0x1e>
   bb0ce:	1a80      	subs	r0, r0, r2
   bb0d0:	bd10      	pop	{r4, pc}
   bb0d2:	2800      	cmp	r0, #0
   bb0d4:	d1f3      	bne.n	bb0be <strncmp+0xa>
   bb0d6:	e7fa      	b.n	bb0ce <strncmp+0x1a>
   bb0d8:	4610      	mov	r0, r2
   bb0da:	e7f9      	b.n	bb0d0 <strncmp+0x1c>

000bb0dc <strnlen>:
   bb0dc:	b510      	push	{r4, lr}
   bb0de:	4602      	mov	r2, r0
   bb0e0:	4401      	add	r1, r0
   bb0e2:	428a      	cmp	r2, r1
   bb0e4:	4613      	mov	r3, r2
   bb0e6:	d003      	beq.n	bb0f0 <strnlen+0x14>
   bb0e8:	781c      	ldrb	r4, [r3, #0]
   bb0ea:	3201      	adds	r2, #1
   bb0ec:	2c00      	cmp	r4, #0
   bb0ee:	d1f8      	bne.n	bb0e2 <strnlen+0x6>
   bb0f0:	1a18      	subs	r0, r3, r0
   bb0f2:	bd10      	pop	{r4, pc}

000bb0f4 <strstr>:
   bb0f4:	780a      	ldrb	r2, [r1, #0]
   bb0f6:	b570      	push	{r4, r5, r6, lr}
   bb0f8:	b96a      	cbnz	r2, bb116 <strstr+0x22>
   bb0fa:	bd70      	pop	{r4, r5, r6, pc}
   bb0fc:	429a      	cmp	r2, r3
   bb0fe:	d109      	bne.n	bb114 <strstr+0x20>
   bb100:	460c      	mov	r4, r1
   bb102:	4605      	mov	r5, r0
   bb104:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bb108:	2b00      	cmp	r3, #0
   bb10a:	d0f6      	beq.n	bb0fa <strstr+0x6>
   bb10c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bb110:	429e      	cmp	r6, r3
   bb112:	d0f7      	beq.n	bb104 <strstr+0x10>
   bb114:	3001      	adds	r0, #1
   bb116:	7803      	ldrb	r3, [r0, #0]
   bb118:	2b00      	cmp	r3, #0
   bb11a:	d1ef      	bne.n	bb0fc <strstr+0x8>
   bb11c:	4618      	mov	r0, r3
   bb11e:	e7ec      	b.n	bb0fa <strstr+0x6>

000bb120 <sulp>:
   bb120:	b570      	push	{r4, r5, r6, lr}
   bb122:	4604      	mov	r4, r0
   bb124:	460d      	mov	r5, r1
   bb126:	ec45 4b10 	vmov	d0, r4, r5
   bb12a:	4616      	mov	r6, r2
   bb12c:	f001 fe0c 	bl	bcd48 <__ulp>
   bb130:	ec51 0b10 	vmov	r0, r1, d0
   bb134:	b17e      	cbz	r6, bb156 <sulp+0x36>
   bb136:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bb13a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bb13e:	2b00      	cmp	r3, #0
   bb140:	dd09      	ble.n	bb156 <sulp+0x36>
   bb142:	051b      	lsls	r3, r3, #20
   bb144:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bb148:	2400      	movs	r4, #0
   bb14a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bb14e:	4622      	mov	r2, r4
   bb150:	462b      	mov	r3, r5
   bb152:	f7ff fbaf 	bl	ba8b4 <__aeabi_dmul>
   bb156:	bd70      	pop	{r4, r5, r6, pc}

000bb158 <_strtod_l>:
   bb158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb15c:	ed2d 8b02 	vpush	{d8}
   bb160:	b09d      	sub	sp, #116	; 0x74
   bb162:	461f      	mov	r7, r3
   bb164:	2300      	movs	r3, #0
   bb166:	9318      	str	r3, [sp, #96]	; 0x60
   bb168:	4ba2      	ldr	r3, [pc, #648]	; (bb3f4 <_strtod_l+0x29c>)
   bb16a:	9213      	str	r2, [sp, #76]	; 0x4c
   bb16c:	681b      	ldr	r3, [r3, #0]
   bb16e:	9305      	str	r3, [sp, #20]
   bb170:	4604      	mov	r4, r0
   bb172:	4618      	mov	r0, r3
   bb174:	4688      	mov	r8, r1
   bb176:	f7ff ff95 	bl	bb0a4 <strlen>
   bb17a:	f04f 0a00 	mov.w	sl, #0
   bb17e:	4605      	mov	r5, r0
   bb180:	f04f 0b00 	mov.w	fp, #0
   bb184:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb188:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb18a:	781a      	ldrb	r2, [r3, #0]
   bb18c:	2a2b      	cmp	r2, #43	; 0x2b
   bb18e:	d04e      	beq.n	bb22e <_strtod_l+0xd6>
   bb190:	d83b      	bhi.n	bb20a <_strtod_l+0xb2>
   bb192:	2a0d      	cmp	r2, #13
   bb194:	d834      	bhi.n	bb200 <_strtod_l+0xa8>
   bb196:	2a08      	cmp	r2, #8
   bb198:	d834      	bhi.n	bb204 <_strtod_l+0xac>
   bb19a:	2a00      	cmp	r2, #0
   bb19c:	d03e      	beq.n	bb21c <_strtod_l+0xc4>
   bb19e:	2300      	movs	r3, #0
   bb1a0:	930a      	str	r3, [sp, #40]	; 0x28
   bb1a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bb1a4:	7833      	ldrb	r3, [r6, #0]
   bb1a6:	2b30      	cmp	r3, #48	; 0x30
   bb1a8:	f040 80b0 	bne.w	bb30c <_strtod_l+0x1b4>
   bb1ac:	7873      	ldrb	r3, [r6, #1]
   bb1ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb1b2:	2b58      	cmp	r3, #88	; 0x58
   bb1b4:	d168      	bne.n	bb288 <_strtod_l+0x130>
   bb1b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb1b8:	9301      	str	r3, [sp, #4]
   bb1ba:	ab18      	add	r3, sp, #96	; 0x60
   bb1bc:	9702      	str	r7, [sp, #8]
   bb1be:	9300      	str	r3, [sp, #0]
   bb1c0:	4a8d      	ldr	r2, [pc, #564]	; (bb3f8 <_strtod_l+0x2a0>)
   bb1c2:	ab19      	add	r3, sp, #100	; 0x64
   bb1c4:	a917      	add	r1, sp, #92	; 0x5c
   bb1c6:	4620      	mov	r0, r4
   bb1c8:	f000 ff2e 	bl	bc028 <__gethex>
   bb1cc:	f010 0707 	ands.w	r7, r0, #7
   bb1d0:	4605      	mov	r5, r0
   bb1d2:	d005      	beq.n	bb1e0 <_strtod_l+0x88>
   bb1d4:	2f06      	cmp	r7, #6
   bb1d6:	d12c      	bne.n	bb232 <_strtod_l+0xda>
   bb1d8:	3601      	adds	r6, #1
   bb1da:	2300      	movs	r3, #0
   bb1dc:	9617      	str	r6, [sp, #92]	; 0x5c
   bb1de:	930a      	str	r3, [sp, #40]	; 0x28
   bb1e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb1e2:	2b00      	cmp	r3, #0
   bb1e4:	f040 8590 	bne.w	bbd08 <_strtod_l+0xbb0>
   bb1e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bb1ea:	b1eb      	cbz	r3, bb228 <_strtod_l+0xd0>
   bb1ec:	4652      	mov	r2, sl
   bb1ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bb1f2:	ec43 2b10 	vmov	d0, r2, r3
   bb1f6:	b01d      	add	sp, #116	; 0x74
   bb1f8:	ecbd 8b02 	vpop	{d8}
   bb1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb200:	2a20      	cmp	r2, #32
   bb202:	d1cc      	bne.n	bb19e <_strtod_l+0x46>
   bb204:	3301      	adds	r3, #1
   bb206:	9317      	str	r3, [sp, #92]	; 0x5c
   bb208:	e7be      	b.n	bb188 <_strtod_l+0x30>
   bb20a:	2a2d      	cmp	r2, #45	; 0x2d
   bb20c:	d1c7      	bne.n	bb19e <_strtod_l+0x46>
   bb20e:	2201      	movs	r2, #1
   bb210:	920a      	str	r2, [sp, #40]	; 0x28
   bb212:	1c5a      	adds	r2, r3, #1
   bb214:	9217      	str	r2, [sp, #92]	; 0x5c
   bb216:	785b      	ldrb	r3, [r3, #1]
   bb218:	2b00      	cmp	r3, #0
   bb21a:	d1c2      	bne.n	bb1a2 <_strtod_l+0x4a>
   bb21c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb21e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb222:	2b00      	cmp	r3, #0
   bb224:	f040 856e 	bne.w	bbd04 <_strtod_l+0xbac>
   bb228:	4652      	mov	r2, sl
   bb22a:	465b      	mov	r3, fp
   bb22c:	e7e1      	b.n	bb1f2 <_strtod_l+0x9a>
   bb22e:	2200      	movs	r2, #0
   bb230:	e7ee      	b.n	bb210 <_strtod_l+0xb8>
   bb232:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb234:	b13a      	cbz	r2, bb246 <_strtod_l+0xee>
   bb236:	2135      	movs	r1, #53	; 0x35
   bb238:	a81a      	add	r0, sp, #104	; 0x68
   bb23a:	f001 fe90 	bl	bcf5e <__copybits>
   bb23e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb240:	4620      	mov	r0, r4
   bb242:	f001 fa4f 	bl	bc6e4 <_Bfree>
   bb246:	3f01      	subs	r7, #1
   bb248:	2f04      	cmp	r7, #4
   bb24a:	d806      	bhi.n	bb25a <_strtod_l+0x102>
   bb24c:	e8df f007 	tbb	[pc, r7]
   bb250:	1714030a 	.word	0x1714030a
   bb254:	0a          	.byte	0x0a
   bb255:	00          	.byte	0x00
   bb256:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bb25a:	0728      	lsls	r0, r5, #28
   bb25c:	d5c0      	bpl.n	bb1e0 <_strtod_l+0x88>
   bb25e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bb262:	e7bd      	b.n	bb1e0 <_strtod_l+0x88>
   bb264:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bb268:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bb26a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bb26e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bb272:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bb276:	e7f0      	b.n	bb25a <_strtod_l+0x102>
   bb278:	f8df b180 	ldr.w	fp, [pc, #384]	; bb3fc <_strtod_l+0x2a4>
   bb27c:	e7ed      	b.n	bb25a <_strtod_l+0x102>
   bb27e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bb282:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bb286:	e7e8      	b.n	bb25a <_strtod_l+0x102>
   bb288:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb28a:	1c5a      	adds	r2, r3, #1
   bb28c:	9217      	str	r2, [sp, #92]	; 0x5c
   bb28e:	785b      	ldrb	r3, [r3, #1]
   bb290:	2b30      	cmp	r3, #48	; 0x30
   bb292:	d0f9      	beq.n	bb288 <_strtod_l+0x130>
   bb294:	2b00      	cmp	r3, #0
   bb296:	d0a3      	beq.n	bb1e0 <_strtod_l+0x88>
   bb298:	2301      	movs	r3, #1
   bb29a:	f04f 0900 	mov.w	r9, #0
   bb29e:	9304      	str	r3, [sp, #16]
   bb2a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb2a2:	9308      	str	r3, [sp, #32]
   bb2a4:	f8cd 901c 	str.w	r9, [sp, #28]
   bb2a8:	464f      	mov	r7, r9
   bb2aa:	220a      	movs	r2, #10
   bb2ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bb2ae:	7806      	ldrb	r6, [r0, #0]
   bb2b0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bb2b4:	b2d9      	uxtb	r1, r3
   bb2b6:	2909      	cmp	r1, #9
   bb2b8:	d92a      	bls.n	bb310 <_strtod_l+0x1b8>
   bb2ba:	9905      	ldr	r1, [sp, #20]
   bb2bc:	462a      	mov	r2, r5
   bb2be:	f7ff fef9 	bl	bb0b4 <strncmp>
   bb2c2:	b398      	cbz	r0, bb32c <_strtod_l+0x1d4>
   bb2c4:	2000      	movs	r0, #0
   bb2c6:	4632      	mov	r2, r6
   bb2c8:	463d      	mov	r5, r7
   bb2ca:	9005      	str	r0, [sp, #20]
   bb2cc:	4603      	mov	r3, r0
   bb2ce:	2a65      	cmp	r2, #101	; 0x65
   bb2d0:	d001      	beq.n	bb2d6 <_strtod_l+0x17e>
   bb2d2:	2a45      	cmp	r2, #69	; 0x45
   bb2d4:	d118      	bne.n	bb308 <_strtod_l+0x1b0>
   bb2d6:	b91d      	cbnz	r5, bb2e0 <_strtod_l+0x188>
   bb2d8:	9a04      	ldr	r2, [sp, #16]
   bb2da:	4302      	orrs	r2, r0
   bb2dc:	d09e      	beq.n	bb21c <_strtod_l+0xc4>
   bb2de:	2500      	movs	r5, #0
   bb2e0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bb2e4:	f108 0201 	add.w	r2, r8, #1
   bb2e8:	9217      	str	r2, [sp, #92]	; 0x5c
   bb2ea:	f898 2001 	ldrb.w	r2, [r8, #1]
   bb2ee:	2a2b      	cmp	r2, #43	; 0x2b
   bb2f0:	d075      	beq.n	bb3de <_strtod_l+0x286>
   bb2f2:	2a2d      	cmp	r2, #45	; 0x2d
   bb2f4:	d07b      	beq.n	bb3ee <_strtod_l+0x296>
   bb2f6:	f04f 0c00 	mov.w	ip, #0
   bb2fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bb2fe:	2909      	cmp	r1, #9
   bb300:	f240 8082 	bls.w	bb408 <_strtod_l+0x2b0>
   bb304:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bb308:	2600      	movs	r6, #0
   bb30a:	e09d      	b.n	bb448 <_strtod_l+0x2f0>
   bb30c:	2300      	movs	r3, #0
   bb30e:	e7c4      	b.n	bb29a <_strtod_l+0x142>
   bb310:	2f08      	cmp	r7, #8
   bb312:	bfd8      	it	le
   bb314:	9907      	ldrle	r1, [sp, #28]
   bb316:	f100 0001 	add.w	r0, r0, #1
   bb31a:	bfda      	itte	le
   bb31c:	fb02 3301 	mlale	r3, r2, r1, r3
   bb320:	9307      	strle	r3, [sp, #28]
   bb322:	fb02 3909 	mlagt	r9, r2, r9, r3
   bb326:	3701      	adds	r7, #1
   bb328:	9017      	str	r0, [sp, #92]	; 0x5c
   bb32a:	e7bf      	b.n	bb2ac <_strtod_l+0x154>
   bb32c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb32e:	195a      	adds	r2, r3, r5
   bb330:	9217      	str	r2, [sp, #92]	; 0x5c
   bb332:	5d5a      	ldrb	r2, [r3, r5]
   bb334:	2f00      	cmp	r7, #0
   bb336:	d037      	beq.n	bb3a8 <_strtod_l+0x250>
   bb338:	9005      	str	r0, [sp, #20]
   bb33a:	463d      	mov	r5, r7
   bb33c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bb340:	2b09      	cmp	r3, #9
   bb342:	d912      	bls.n	bb36a <_strtod_l+0x212>
   bb344:	2301      	movs	r3, #1
   bb346:	e7c2      	b.n	bb2ce <_strtod_l+0x176>
   bb348:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb34a:	1c5a      	adds	r2, r3, #1
   bb34c:	9217      	str	r2, [sp, #92]	; 0x5c
   bb34e:	785a      	ldrb	r2, [r3, #1]
   bb350:	3001      	adds	r0, #1
   bb352:	2a30      	cmp	r2, #48	; 0x30
   bb354:	d0f8      	beq.n	bb348 <_strtod_l+0x1f0>
   bb356:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bb35a:	2b08      	cmp	r3, #8
   bb35c:	f200 84d9 	bhi.w	bbd12 <_strtod_l+0xbba>
   bb360:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb362:	9005      	str	r0, [sp, #20]
   bb364:	2000      	movs	r0, #0
   bb366:	9308      	str	r3, [sp, #32]
   bb368:	4605      	mov	r5, r0
   bb36a:	3a30      	subs	r2, #48	; 0x30
   bb36c:	f100 0301 	add.w	r3, r0, #1
   bb370:	d014      	beq.n	bb39c <_strtod_l+0x244>
   bb372:	9905      	ldr	r1, [sp, #20]
   bb374:	4419      	add	r1, r3
   bb376:	9105      	str	r1, [sp, #20]
   bb378:	462b      	mov	r3, r5
   bb37a:	eb00 0e05 	add.w	lr, r0, r5
   bb37e:	210a      	movs	r1, #10
   bb380:	4573      	cmp	r3, lr
   bb382:	d113      	bne.n	bb3ac <_strtod_l+0x254>
   bb384:	182b      	adds	r3, r5, r0
   bb386:	2b08      	cmp	r3, #8
   bb388:	f105 0501 	add.w	r5, r5, #1
   bb38c:	4405      	add	r5, r0
   bb38e:	dc1c      	bgt.n	bb3ca <_strtod_l+0x272>
   bb390:	9907      	ldr	r1, [sp, #28]
   bb392:	230a      	movs	r3, #10
   bb394:	fb03 2301 	mla	r3, r3, r1, r2
   bb398:	9307      	str	r3, [sp, #28]
   bb39a:	2300      	movs	r3, #0
   bb39c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb39e:	1c51      	adds	r1, r2, #1
   bb3a0:	9117      	str	r1, [sp, #92]	; 0x5c
   bb3a2:	7852      	ldrb	r2, [r2, #1]
   bb3a4:	4618      	mov	r0, r3
   bb3a6:	e7c9      	b.n	bb33c <_strtod_l+0x1e4>
   bb3a8:	4638      	mov	r0, r7
   bb3aa:	e7d2      	b.n	bb352 <_strtod_l+0x1fa>
   bb3ac:	2b08      	cmp	r3, #8
   bb3ae:	dc04      	bgt.n	bb3ba <_strtod_l+0x262>
   bb3b0:	9e07      	ldr	r6, [sp, #28]
   bb3b2:	434e      	muls	r6, r1
   bb3b4:	9607      	str	r6, [sp, #28]
   bb3b6:	3301      	adds	r3, #1
   bb3b8:	e7e2      	b.n	bb380 <_strtod_l+0x228>
   bb3ba:	f103 0c01 	add.w	ip, r3, #1
   bb3be:	f1bc 0f10 	cmp.w	ip, #16
   bb3c2:	bfd8      	it	le
   bb3c4:	fb01 f909 	mulle.w	r9, r1, r9
   bb3c8:	e7f5      	b.n	bb3b6 <_strtod_l+0x25e>
   bb3ca:	2d10      	cmp	r5, #16
   bb3cc:	bfdc      	itt	le
   bb3ce:	230a      	movle	r3, #10
   bb3d0:	fb03 2909 	mlale	r9, r3, r9, r2
   bb3d4:	e7e1      	b.n	bb39a <_strtod_l+0x242>
   bb3d6:	2300      	movs	r3, #0
   bb3d8:	9305      	str	r3, [sp, #20]
   bb3da:	2301      	movs	r3, #1
   bb3dc:	e77c      	b.n	bb2d8 <_strtod_l+0x180>
   bb3de:	f04f 0c00 	mov.w	ip, #0
   bb3e2:	f108 0202 	add.w	r2, r8, #2
   bb3e6:	9217      	str	r2, [sp, #92]	; 0x5c
   bb3e8:	f898 2002 	ldrb.w	r2, [r8, #2]
   bb3ec:	e785      	b.n	bb2fa <_strtod_l+0x1a2>
   bb3ee:	f04f 0c01 	mov.w	ip, #1
   bb3f2:	e7f6      	b.n	bb3e2 <_strtod_l+0x28a>
   bb3f4:	000bdc14 	.word	0x000bdc14
   bb3f8:	000bda4c 	.word	0x000bda4c
   bb3fc:	7ff00000 	.word	0x7ff00000
   bb400:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb402:	1c51      	adds	r1, r2, #1
   bb404:	9117      	str	r1, [sp, #92]	; 0x5c
   bb406:	7852      	ldrb	r2, [r2, #1]
   bb408:	2a30      	cmp	r2, #48	; 0x30
   bb40a:	d0f9      	beq.n	bb400 <_strtod_l+0x2a8>
   bb40c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bb410:	2908      	cmp	r1, #8
   bb412:	f63f af79 	bhi.w	bb308 <_strtod_l+0x1b0>
   bb416:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bb41a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb41c:	9206      	str	r2, [sp, #24]
   bb41e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bb420:	1c51      	adds	r1, r2, #1
   bb422:	9117      	str	r1, [sp, #92]	; 0x5c
   bb424:	7852      	ldrb	r2, [r2, #1]
   bb426:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bb42a:	2e09      	cmp	r6, #9
   bb42c:	d937      	bls.n	bb49e <_strtod_l+0x346>
   bb42e:	9e06      	ldr	r6, [sp, #24]
   bb430:	1b89      	subs	r1, r1, r6
   bb432:	2908      	cmp	r1, #8
   bb434:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bb438:	dc02      	bgt.n	bb440 <_strtod_l+0x2e8>
   bb43a:	4576      	cmp	r6, lr
   bb43c:	bfa8      	it	ge
   bb43e:	4676      	movge	r6, lr
   bb440:	f1bc 0f00 	cmp.w	ip, #0
   bb444:	d000      	beq.n	bb448 <_strtod_l+0x2f0>
   bb446:	4276      	negs	r6, r6
   bb448:	2d00      	cmp	r5, #0
   bb44a:	d14d      	bne.n	bb4e8 <_strtod_l+0x390>
   bb44c:	9904      	ldr	r1, [sp, #16]
   bb44e:	4301      	orrs	r1, r0
   bb450:	f47f aec6 	bne.w	bb1e0 <_strtod_l+0x88>
   bb454:	2b00      	cmp	r3, #0
   bb456:	f47f aee1 	bne.w	bb21c <_strtod_l+0xc4>
   bb45a:	2a69      	cmp	r2, #105	; 0x69
   bb45c:	d027      	beq.n	bb4ae <_strtod_l+0x356>
   bb45e:	dc24      	bgt.n	bb4aa <_strtod_l+0x352>
   bb460:	2a49      	cmp	r2, #73	; 0x49
   bb462:	d024      	beq.n	bb4ae <_strtod_l+0x356>
   bb464:	2a4e      	cmp	r2, #78	; 0x4e
   bb466:	f47f aed9 	bne.w	bb21c <_strtod_l+0xc4>
   bb46a:	499f      	ldr	r1, [pc, #636]	; (bb6e8 <_strtod_l+0x590>)
   bb46c:	a817      	add	r0, sp, #92	; 0x5c
   bb46e:	f001 f833 	bl	bc4d8 <__match>
   bb472:	2800      	cmp	r0, #0
   bb474:	f43f aed2 	beq.w	bb21c <_strtod_l+0xc4>
   bb478:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb47a:	781b      	ldrb	r3, [r3, #0]
   bb47c:	2b28      	cmp	r3, #40	; 0x28
   bb47e:	d12d      	bne.n	bb4dc <_strtod_l+0x384>
   bb480:	499a      	ldr	r1, [pc, #616]	; (bb6ec <_strtod_l+0x594>)
   bb482:	aa1a      	add	r2, sp, #104	; 0x68
   bb484:	a817      	add	r0, sp, #92	; 0x5c
   bb486:	f001 f83b 	bl	bc500 <__hexnan>
   bb48a:	2805      	cmp	r0, #5
   bb48c:	d126      	bne.n	bb4dc <_strtod_l+0x384>
   bb48e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bb490:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bb494:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bb498:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bb49c:	e6a0      	b.n	bb1e0 <_strtod_l+0x88>
   bb49e:	210a      	movs	r1, #10
   bb4a0:	fb01 2e0e 	mla	lr, r1, lr, r2
   bb4a4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bb4a8:	e7b9      	b.n	bb41e <_strtod_l+0x2c6>
   bb4aa:	2a6e      	cmp	r2, #110	; 0x6e
   bb4ac:	e7db      	b.n	bb466 <_strtod_l+0x30e>
   bb4ae:	4990      	ldr	r1, [pc, #576]	; (bb6f0 <_strtod_l+0x598>)
   bb4b0:	a817      	add	r0, sp, #92	; 0x5c
   bb4b2:	f001 f811 	bl	bc4d8 <__match>
   bb4b6:	2800      	cmp	r0, #0
   bb4b8:	f43f aeb0 	beq.w	bb21c <_strtod_l+0xc4>
   bb4bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb4be:	498d      	ldr	r1, [pc, #564]	; (bb6f4 <_strtod_l+0x59c>)
   bb4c0:	3b01      	subs	r3, #1
   bb4c2:	a817      	add	r0, sp, #92	; 0x5c
   bb4c4:	9317      	str	r3, [sp, #92]	; 0x5c
   bb4c6:	f001 f807 	bl	bc4d8 <__match>
   bb4ca:	b910      	cbnz	r0, bb4d2 <_strtod_l+0x37a>
   bb4cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb4ce:	3301      	adds	r3, #1
   bb4d0:	9317      	str	r3, [sp, #92]	; 0x5c
   bb4d2:	f8df b230 	ldr.w	fp, [pc, #560]	; bb704 <_strtod_l+0x5ac>
   bb4d6:	f04f 0a00 	mov.w	sl, #0
   bb4da:	e681      	b.n	bb1e0 <_strtod_l+0x88>
   bb4dc:	4886      	ldr	r0, [pc, #536]	; (bb6f8 <_strtod_l+0x5a0>)
   bb4de:	f001 fd93 	bl	bd008 <nan>
   bb4e2:	ec5b ab10 	vmov	sl, fp, d0
   bb4e6:	e67b      	b.n	bb1e0 <_strtod_l+0x88>
   bb4e8:	9b05      	ldr	r3, [sp, #20]
   bb4ea:	9807      	ldr	r0, [sp, #28]
   bb4ec:	1af3      	subs	r3, r6, r3
   bb4ee:	2f00      	cmp	r7, #0
   bb4f0:	bf08      	it	eq
   bb4f2:	462f      	moveq	r7, r5
   bb4f4:	2d10      	cmp	r5, #16
   bb4f6:	9306      	str	r3, [sp, #24]
   bb4f8:	46a8      	mov	r8, r5
   bb4fa:	bfa8      	it	ge
   bb4fc:	f04f 0810 	movge.w	r8, #16
   bb500:	f7ff f95e 	bl	ba7c0 <__aeabi_ui2d>
   bb504:	2d09      	cmp	r5, #9
   bb506:	4682      	mov	sl, r0
   bb508:	468b      	mov	fp, r1
   bb50a:	dd13      	ble.n	bb534 <_strtod_l+0x3dc>
   bb50c:	4b7b      	ldr	r3, [pc, #492]	; (bb6fc <_strtod_l+0x5a4>)
   bb50e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bb512:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bb516:	f7ff f9cd 	bl	ba8b4 <__aeabi_dmul>
   bb51a:	4682      	mov	sl, r0
   bb51c:	4648      	mov	r0, r9
   bb51e:	468b      	mov	fp, r1
   bb520:	f7ff f94e 	bl	ba7c0 <__aeabi_ui2d>
   bb524:	4602      	mov	r2, r0
   bb526:	460b      	mov	r3, r1
   bb528:	4650      	mov	r0, sl
   bb52a:	4659      	mov	r1, fp
   bb52c:	f7ff f80c 	bl	ba548 <__adddf3>
   bb530:	4682      	mov	sl, r0
   bb532:	468b      	mov	fp, r1
   bb534:	2d0f      	cmp	r5, #15
   bb536:	dc38      	bgt.n	bb5aa <_strtod_l+0x452>
   bb538:	9b06      	ldr	r3, [sp, #24]
   bb53a:	2b00      	cmp	r3, #0
   bb53c:	f43f ae50 	beq.w	bb1e0 <_strtod_l+0x88>
   bb540:	dd24      	ble.n	bb58c <_strtod_l+0x434>
   bb542:	2b16      	cmp	r3, #22
   bb544:	dc0b      	bgt.n	bb55e <_strtod_l+0x406>
   bb546:	496d      	ldr	r1, [pc, #436]	; (bb6fc <_strtod_l+0x5a4>)
   bb548:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb54c:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb550:	4652      	mov	r2, sl
   bb552:	465b      	mov	r3, fp
   bb554:	f7ff f9ae 	bl	ba8b4 <__aeabi_dmul>
   bb558:	4682      	mov	sl, r0
   bb55a:	468b      	mov	fp, r1
   bb55c:	e640      	b.n	bb1e0 <_strtod_l+0x88>
   bb55e:	9a06      	ldr	r2, [sp, #24]
   bb560:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bb564:	4293      	cmp	r3, r2
   bb566:	db20      	blt.n	bb5aa <_strtod_l+0x452>
   bb568:	4c64      	ldr	r4, [pc, #400]	; (bb6fc <_strtod_l+0x5a4>)
   bb56a:	f1c5 050f 	rsb	r5, r5, #15
   bb56e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bb572:	4652      	mov	r2, sl
   bb574:	465b      	mov	r3, fp
   bb576:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb57a:	f7ff f99b 	bl	ba8b4 <__aeabi_dmul>
   bb57e:	9b06      	ldr	r3, [sp, #24]
   bb580:	1b5d      	subs	r5, r3, r5
   bb582:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bb586:	e9d4 2300 	ldrd	r2, r3, [r4]
   bb58a:	e7e3      	b.n	bb554 <_strtod_l+0x3fc>
   bb58c:	9b06      	ldr	r3, [sp, #24]
   bb58e:	3316      	adds	r3, #22
   bb590:	db0b      	blt.n	bb5aa <_strtod_l+0x452>
   bb592:	9b05      	ldr	r3, [sp, #20]
   bb594:	1b9e      	subs	r6, r3, r6
   bb596:	4b59      	ldr	r3, [pc, #356]	; (bb6fc <_strtod_l+0x5a4>)
   bb598:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bb59c:	e9d6 2300 	ldrd	r2, r3, [r6]
   bb5a0:	4650      	mov	r0, sl
   bb5a2:	4659      	mov	r1, fp
   bb5a4:	f7ff fab0 	bl	bab08 <__aeabi_ddiv>
   bb5a8:	e7d6      	b.n	bb558 <_strtod_l+0x400>
   bb5aa:	9b06      	ldr	r3, [sp, #24]
   bb5ac:	eba5 0808 	sub.w	r8, r5, r8
   bb5b0:	4498      	add	r8, r3
   bb5b2:	f1b8 0f00 	cmp.w	r8, #0
   bb5b6:	dd74      	ble.n	bb6a2 <_strtod_l+0x54a>
   bb5b8:	f018 030f 	ands.w	r3, r8, #15
   bb5bc:	d00a      	beq.n	bb5d4 <_strtod_l+0x47c>
   bb5be:	494f      	ldr	r1, [pc, #316]	; (bb6fc <_strtod_l+0x5a4>)
   bb5c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bb5c4:	4652      	mov	r2, sl
   bb5c6:	465b      	mov	r3, fp
   bb5c8:	e9d1 0100 	ldrd	r0, r1, [r1]
   bb5cc:	f7ff f972 	bl	ba8b4 <__aeabi_dmul>
   bb5d0:	4682      	mov	sl, r0
   bb5d2:	468b      	mov	fp, r1
   bb5d4:	f038 080f 	bics.w	r8, r8, #15
   bb5d8:	d04f      	beq.n	bb67a <_strtod_l+0x522>
   bb5da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bb5de:	dd22      	ble.n	bb626 <_strtod_l+0x4ce>
   bb5e0:	2500      	movs	r5, #0
   bb5e2:	462e      	mov	r6, r5
   bb5e4:	9507      	str	r5, [sp, #28]
   bb5e6:	9505      	str	r5, [sp, #20]
   bb5e8:	2322      	movs	r3, #34	; 0x22
   bb5ea:	f8df b118 	ldr.w	fp, [pc, #280]	; bb704 <_strtod_l+0x5ac>
   bb5ee:	6023      	str	r3, [r4, #0]
   bb5f0:	f04f 0a00 	mov.w	sl, #0
   bb5f4:	9b07      	ldr	r3, [sp, #28]
   bb5f6:	2b00      	cmp	r3, #0
   bb5f8:	f43f adf2 	beq.w	bb1e0 <_strtod_l+0x88>
   bb5fc:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb5fe:	4620      	mov	r0, r4
   bb600:	f001 f870 	bl	bc6e4 <_Bfree>
   bb604:	9905      	ldr	r1, [sp, #20]
   bb606:	4620      	mov	r0, r4
   bb608:	f001 f86c 	bl	bc6e4 <_Bfree>
   bb60c:	4631      	mov	r1, r6
   bb60e:	4620      	mov	r0, r4
   bb610:	f001 f868 	bl	bc6e4 <_Bfree>
   bb614:	9907      	ldr	r1, [sp, #28]
   bb616:	4620      	mov	r0, r4
   bb618:	f001 f864 	bl	bc6e4 <_Bfree>
   bb61c:	4629      	mov	r1, r5
   bb61e:	4620      	mov	r0, r4
   bb620:	f001 f860 	bl	bc6e4 <_Bfree>
   bb624:	e5dc      	b.n	bb1e0 <_strtod_l+0x88>
   bb626:	4b36      	ldr	r3, [pc, #216]	; (bb700 <_strtod_l+0x5a8>)
   bb628:	9304      	str	r3, [sp, #16]
   bb62a:	2300      	movs	r3, #0
   bb62c:	ea4f 1828 	mov.w	r8, r8, asr #4
   bb630:	4650      	mov	r0, sl
   bb632:	4659      	mov	r1, fp
   bb634:	4699      	mov	r9, r3
   bb636:	f1b8 0f01 	cmp.w	r8, #1
   bb63a:	dc21      	bgt.n	bb680 <_strtod_l+0x528>
   bb63c:	b10b      	cbz	r3, bb642 <_strtod_l+0x4ea>
   bb63e:	4682      	mov	sl, r0
   bb640:	468b      	mov	fp, r1
   bb642:	4b2f      	ldr	r3, [pc, #188]	; (bb700 <_strtod_l+0x5a8>)
   bb644:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bb648:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bb64c:	4652      	mov	r2, sl
   bb64e:	465b      	mov	r3, fp
   bb650:	e9d9 0100 	ldrd	r0, r1, [r9]
   bb654:	f7ff f92e 	bl	ba8b4 <__aeabi_dmul>
   bb658:	4b2a      	ldr	r3, [pc, #168]	; (bb704 <_strtod_l+0x5ac>)
   bb65a:	460a      	mov	r2, r1
   bb65c:	400b      	ands	r3, r1
   bb65e:	492a      	ldr	r1, [pc, #168]	; (bb708 <_strtod_l+0x5b0>)
   bb660:	428b      	cmp	r3, r1
   bb662:	4682      	mov	sl, r0
   bb664:	d8bc      	bhi.n	bb5e0 <_strtod_l+0x488>
   bb666:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bb66a:	428b      	cmp	r3, r1
   bb66c:	bf86      	itte	hi
   bb66e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bb70c <_strtod_l+0x5b4>
   bb672:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bb676:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bb67a:	2300      	movs	r3, #0
   bb67c:	9304      	str	r3, [sp, #16]
   bb67e:	e084      	b.n	bb78a <_strtod_l+0x632>
   bb680:	f018 0f01 	tst.w	r8, #1
   bb684:	d005      	beq.n	bb692 <_strtod_l+0x53a>
   bb686:	9b04      	ldr	r3, [sp, #16]
   bb688:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb68c:	f7ff f912 	bl	ba8b4 <__aeabi_dmul>
   bb690:	2301      	movs	r3, #1
   bb692:	9a04      	ldr	r2, [sp, #16]
   bb694:	3208      	adds	r2, #8
   bb696:	f109 0901 	add.w	r9, r9, #1
   bb69a:	ea4f 0868 	mov.w	r8, r8, asr #1
   bb69e:	9204      	str	r2, [sp, #16]
   bb6a0:	e7c9      	b.n	bb636 <_strtod_l+0x4de>
   bb6a2:	d0ea      	beq.n	bb67a <_strtod_l+0x522>
   bb6a4:	f1c8 0800 	rsb	r8, r8, #0
   bb6a8:	f018 020f 	ands.w	r2, r8, #15
   bb6ac:	d00a      	beq.n	bb6c4 <_strtod_l+0x56c>
   bb6ae:	4b13      	ldr	r3, [pc, #76]	; (bb6fc <_strtod_l+0x5a4>)
   bb6b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bb6b4:	4650      	mov	r0, sl
   bb6b6:	4659      	mov	r1, fp
   bb6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb6bc:	f7ff fa24 	bl	bab08 <__aeabi_ddiv>
   bb6c0:	4682      	mov	sl, r0
   bb6c2:	468b      	mov	fp, r1
   bb6c4:	ea5f 1828 	movs.w	r8, r8, asr #4
   bb6c8:	d0d7      	beq.n	bb67a <_strtod_l+0x522>
   bb6ca:	f1b8 0f1f 	cmp.w	r8, #31
   bb6ce:	dd1f      	ble.n	bb710 <_strtod_l+0x5b8>
   bb6d0:	2500      	movs	r5, #0
   bb6d2:	462e      	mov	r6, r5
   bb6d4:	9507      	str	r5, [sp, #28]
   bb6d6:	9505      	str	r5, [sp, #20]
   bb6d8:	2322      	movs	r3, #34	; 0x22
   bb6da:	f04f 0a00 	mov.w	sl, #0
   bb6de:	f04f 0b00 	mov.w	fp, #0
   bb6e2:	6023      	str	r3, [r4, #0]
   bb6e4:	e786      	b.n	bb5f4 <_strtod_l+0x49c>
   bb6e6:	bf00      	nop
   bb6e8:	000bda46 	.word	0x000bda46
   bb6ec:	000bda60 	.word	0x000bda60
   bb6f0:	000bda3d 	.word	0x000bda3d
   bb6f4:	000bda40 	.word	0x000bda40
   bb6f8:	000bd4ba 	.word	0x000bd4ba
   bb6fc:	000bdcb0 	.word	0x000bdcb0
   bb700:	000bdc88 	.word	0x000bdc88
   bb704:	7ff00000 	.word	0x7ff00000
   bb708:	7ca00000 	.word	0x7ca00000
   bb70c:	7fefffff 	.word	0x7fefffff
   bb710:	f018 0310 	ands.w	r3, r8, #16
   bb714:	bf18      	it	ne
   bb716:	236a      	movne	r3, #106	; 0x6a
   bb718:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bbac8 <_strtod_l+0x970>
   bb71c:	9304      	str	r3, [sp, #16]
   bb71e:	4650      	mov	r0, sl
   bb720:	4659      	mov	r1, fp
   bb722:	2300      	movs	r3, #0
   bb724:	f018 0f01 	tst.w	r8, #1
   bb728:	d004      	beq.n	bb734 <_strtod_l+0x5dc>
   bb72a:	e9d9 2300 	ldrd	r2, r3, [r9]
   bb72e:	f7ff f8c1 	bl	ba8b4 <__aeabi_dmul>
   bb732:	2301      	movs	r3, #1
   bb734:	ea5f 0868 	movs.w	r8, r8, asr #1
   bb738:	f109 0908 	add.w	r9, r9, #8
   bb73c:	d1f2      	bne.n	bb724 <_strtod_l+0x5cc>
   bb73e:	b10b      	cbz	r3, bb744 <_strtod_l+0x5ec>
   bb740:	4682      	mov	sl, r0
   bb742:	468b      	mov	fp, r1
   bb744:	9b04      	ldr	r3, [sp, #16]
   bb746:	b1c3      	cbz	r3, bb77a <_strtod_l+0x622>
   bb748:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bb74c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bb750:	2b00      	cmp	r3, #0
   bb752:	4659      	mov	r1, fp
   bb754:	dd11      	ble.n	bb77a <_strtod_l+0x622>
   bb756:	2b1f      	cmp	r3, #31
   bb758:	f340 8124 	ble.w	bb9a4 <_strtod_l+0x84c>
   bb75c:	2b34      	cmp	r3, #52	; 0x34
   bb75e:	bfde      	ittt	le
   bb760:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bb764:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bb768:	fa03 f202 	lslle.w	r2, r3, r2
   bb76c:	f04f 0a00 	mov.w	sl, #0
   bb770:	bfcc      	ite	gt
   bb772:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bb776:	ea02 0b01 	andle.w	fp, r2, r1
   bb77a:	2200      	movs	r2, #0
   bb77c:	2300      	movs	r3, #0
   bb77e:	4650      	mov	r0, sl
   bb780:	4659      	mov	r1, fp
   bb782:	f7ff faff 	bl	bad84 <__aeabi_dcmpeq>
   bb786:	2800      	cmp	r0, #0
   bb788:	d1a2      	bne.n	bb6d0 <_strtod_l+0x578>
   bb78a:	9b07      	ldr	r3, [sp, #28]
   bb78c:	9300      	str	r3, [sp, #0]
   bb78e:	9908      	ldr	r1, [sp, #32]
   bb790:	462b      	mov	r3, r5
   bb792:	463a      	mov	r2, r7
   bb794:	4620      	mov	r0, r4
   bb796:	f001 f80d 	bl	bc7b4 <__s2b>
   bb79a:	9007      	str	r0, [sp, #28]
   bb79c:	2800      	cmp	r0, #0
   bb79e:	f43f af1f 	beq.w	bb5e0 <_strtod_l+0x488>
   bb7a2:	9b05      	ldr	r3, [sp, #20]
   bb7a4:	1b9e      	subs	r6, r3, r6
   bb7a6:	9b06      	ldr	r3, [sp, #24]
   bb7a8:	2b00      	cmp	r3, #0
   bb7aa:	bfb4      	ite	lt
   bb7ac:	4633      	movlt	r3, r6
   bb7ae:	2300      	movge	r3, #0
   bb7b0:	930c      	str	r3, [sp, #48]	; 0x30
   bb7b2:	9b06      	ldr	r3, [sp, #24]
   bb7b4:	2500      	movs	r5, #0
   bb7b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bb7ba:	9312      	str	r3, [sp, #72]	; 0x48
   bb7bc:	462e      	mov	r6, r5
   bb7be:	9b07      	ldr	r3, [sp, #28]
   bb7c0:	4620      	mov	r0, r4
   bb7c2:	6859      	ldr	r1, [r3, #4]
   bb7c4:	f000 ff4e 	bl	bc664 <_Balloc>
   bb7c8:	9005      	str	r0, [sp, #20]
   bb7ca:	2800      	cmp	r0, #0
   bb7cc:	f43f af0c 	beq.w	bb5e8 <_strtod_l+0x490>
   bb7d0:	9b07      	ldr	r3, [sp, #28]
   bb7d2:	691a      	ldr	r2, [r3, #16]
   bb7d4:	3202      	adds	r2, #2
   bb7d6:	f103 010c 	add.w	r1, r3, #12
   bb7da:	0092      	lsls	r2, r2, #2
   bb7dc:	300c      	adds	r0, #12
   bb7de:	f7ff fbf0 	bl	bafc2 <memcpy>
   bb7e2:	ec4b ab10 	vmov	d0, sl, fp
   bb7e6:	aa1a      	add	r2, sp, #104	; 0x68
   bb7e8:	a919      	add	r1, sp, #100	; 0x64
   bb7ea:	4620      	mov	r0, r4
   bb7ec:	f001 fb28 	bl	bce40 <__d2b>
   bb7f0:	ec4b ab18 	vmov	d8, sl, fp
   bb7f4:	9018      	str	r0, [sp, #96]	; 0x60
   bb7f6:	2800      	cmp	r0, #0
   bb7f8:	f43f aef6 	beq.w	bb5e8 <_strtod_l+0x490>
   bb7fc:	2101      	movs	r1, #1
   bb7fe:	4620      	mov	r0, r4
   bb800:	f001 f872 	bl	bc8e8 <__i2b>
   bb804:	4606      	mov	r6, r0
   bb806:	2800      	cmp	r0, #0
   bb808:	f43f aeee 	beq.w	bb5e8 <_strtod_l+0x490>
   bb80c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bb80e:	9904      	ldr	r1, [sp, #16]
   bb810:	2b00      	cmp	r3, #0
   bb812:	bfab      	itete	ge
   bb814:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bb816:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bb818:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bb81a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bb81e:	bfac      	ite	ge
   bb820:	eb03 0902 	addge.w	r9, r3, r2
   bb824:	1ad7      	sublt	r7, r2, r3
   bb826:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bb828:	eba3 0801 	sub.w	r8, r3, r1
   bb82c:	4490      	add	r8, r2
   bb82e:	4ba1      	ldr	r3, [pc, #644]	; (bbab4 <_strtod_l+0x95c>)
   bb830:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bb834:	4598      	cmp	r8, r3
   bb836:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bb83a:	f280 80c7 	bge.w	bb9cc <_strtod_l+0x874>
   bb83e:	eba3 0308 	sub.w	r3, r3, r8
   bb842:	2b1f      	cmp	r3, #31
   bb844:	eba2 0203 	sub.w	r2, r2, r3
   bb848:	f04f 0101 	mov.w	r1, #1
   bb84c:	f300 80b1 	bgt.w	bb9b2 <_strtod_l+0x85a>
   bb850:	fa01 f303 	lsl.w	r3, r1, r3
   bb854:	930d      	str	r3, [sp, #52]	; 0x34
   bb856:	2300      	movs	r3, #0
   bb858:	9308      	str	r3, [sp, #32]
   bb85a:	eb09 0802 	add.w	r8, r9, r2
   bb85e:	9b04      	ldr	r3, [sp, #16]
   bb860:	45c1      	cmp	r9, r8
   bb862:	4417      	add	r7, r2
   bb864:	441f      	add	r7, r3
   bb866:	464b      	mov	r3, r9
   bb868:	bfa8      	it	ge
   bb86a:	4643      	movge	r3, r8
   bb86c:	42bb      	cmp	r3, r7
   bb86e:	bfa8      	it	ge
   bb870:	463b      	movge	r3, r7
   bb872:	2b00      	cmp	r3, #0
   bb874:	bfc2      	ittt	gt
   bb876:	eba8 0803 	subgt.w	r8, r8, r3
   bb87a:	1aff      	subgt	r7, r7, r3
   bb87c:	eba9 0903 	subgt.w	r9, r9, r3
   bb880:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bb882:	2b00      	cmp	r3, #0
   bb884:	dd17      	ble.n	bb8b6 <_strtod_l+0x75e>
   bb886:	4631      	mov	r1, r6
   bb888:	461a      	mov	r2, r3
   bb88a:	4620      	mov	r0, r4
   bb88c:	f001 f8ec 	bl	bca68 <__pow5mult>
   bb890:	4606      	mov	r6, r0
   bb892:	2800      	cmp	r0, #0
   bb894:	f43f aea8 	beq.w	bb5e8 <_strtod_l+0x490>
   bb898:	4601      	mov	r1, r0
   bb89a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb89c:	4620      	mov	r0, r4
   bb89e:	f001 f839 	bl	bc914 <__multiply>
   bb8a2:	900b      	str	r0, [sp, #44]	; 0x2c
   bb8a4:	2800      	cmp	r0, #0
   bb8a6:	f43f ae9f 	beq.w	bb5e8 <_strtod_l+0x490>
   bb8aa:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb8ac:	4620      	mov	r0, r4
   bb8ae:	f000 ff19 	bl	bc6e4 <_Bfree>
   bb8b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb8b4:	9318      	str	r3, [sp, #96]	; 0x60
   bb8b6:	f1b8 0f00 	cmp.w	r8, #0
   bb8ba:	f300 808c 	bgt.w	bb9d6 <_strtod_l+0x87e>
   bb8be:	9b06      	ldr	r3, [sp, #24]
   bb8c0:	2b00      	cmp	r3, #0
   bb8c2:	dd08      	ble.n	bb8d6 <_strtod_l+0x77e>
   bb8c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bb8c6:	9905      	ldr	r1, [sp, #20]
   bb8c8:	4620      	mov	r0, r4
   bb8ca:	f001 f8cd 	bl	bca68 <__pow5mult>
   bb8ce:	9005      	str	r0, [sp, #20]
   bb8d0:	2800      	cmp	r0, #0
   bb8d2:	f43f ae89 	beq.w	bb5e8 <_strtod_l+0x490>
   bb8d6:	2f00      	cmp	r7, #0
   bb8d8:	dd08      	ble.n	bb8ec <_strtod_l+0x794>
   bb8da:	9905      	ldr	r1, [sp, #20]
   bb8dc:	463a      	mov	r2, r7
   bb8de:	4620      	mov	r0, r4
   bb8e0:	f001 f91c 	bl	bcb1c <__lshift>
   bb8e4:	9005      	str	r0, [sp, #20]
   bb8e6:	2800      	cmp	r0, #0
   bb8e8:	f43f ae7e 	beq.w	bb5e8 <_strtod_l+0x490>
   bb8ec:	f1b9 0f00 	cmp.w	r9, #0
   bb8f0:	dd08      	ble.n	bb904 <_strtod_l+0x7ac>
   bb8f2:	4631      	mov	r1, r6
   bb8f4:	464a      	mov	r2, r9
   bb8f6:	4620      	mov	r0, r4
   bb8f8:	f001 f910 	bl	bcb1c <__lshift>
   bb8fc:	4606      	mov	r6, r0
   bb8fe:	2800      	cmp	r0, #0
   bb900:	f43f ae72 	beq.w	bb5e8 <_strtod_l+0x490>
   bb904:	9a05      	ldr	r2, [sp, #20]
   bb906:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb908:	4620      	mov	r0, r4
   bb90a:	f001 f993 	bl	bcc34 <__mdiff>
   bb90e:	4605      	mov	r5, r0
   bb910:	2800      	cmp	r0, #0
   bb912:	f43f ae69 	beq.w	bb5e8 <_strtod_l+0x490>
   bb916:	68c3      	ldr	r3, [r0, #12]
   bb918:	930b      	str	r3, [sp, #44]	; 0x2c
   bb91a:	2300      	movs	r3, #0
   bb91c:	60c3      	str	r3, [r0, #12]
   bb91e:	4631      	mov	r1, r6
   bb920:	f001 f96c 	bl	bcbfc <__mcmp>
   bb924:	2800      	cmp	r0, #0
   bb926:	da60      	bge.n	bb9ea <_strtod_l+0x892>
   bb928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb92a:	ea53 030a 	orrs.w	r3, r3, sl
   bb92e:	f040 8082 	bne.w	bba36 <_strtod_l+0x8de>
   bb932:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb936:	2b00      	cmp	r3, #0
   bb938:	d17d      	bne.n	bba36 <_strtod_l+0x8de>
   bb93a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bb93e:	0d1b      	lsrs	r3, r3, #20
   bb940:	051b      	lsls	r3, r3, #20
   bb942:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bb946:	d976      	bls.n	bba36 <_strtod_l+0x8de>
   bb948:	696b      	ldr	r3, [r5, #20]
   bb94a:	b913      	cbnz	r3, bb952 <_strtod_l+0x7fa>
   bb94c:	692b      	ldr	r3, [r5, #16]
   bb94e:	2b01      	cmp	r3, #1
   bb950:	dd71      	ble.n	bba36 <_strtod_l+0x8de>
   bb952:	4629      	mov	r1, r5
   bb954:	2201      	movs	r2, #1
   bb956:	4620      	mov	r0, r4
   bb958:	f001 f8e0 	bl	bcb1c <__lshift>
   bb95c:	4631      	mov	r1, r6
   bb95e:	4605      	mov	r5, r0
   bb960:	f001 f94c 	bl	bcbfc <__mcmp>
   bb964:	2800      	cmp	r0, #0
   bb966:	dd66      	ble.n	bba36 <_strtod_l+0x8de>
   bb968:	9904      	ldr	r1, [sp, #16]
   bb96a:	4a53      	ldr	r2, [pc, #332]	; (bbab8 <_strtod_l+0x960>)
   bb96c:	465b      	mov	r3, fp
   bb96e:	2900      	cmp	r1, #0
   bb970:	f000 8081 	beq.w	bba76 <_strtod_l+0x91e>
   bb974:	ea02 010b 	and.w	r1, r2, fp
   bb978:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bb97c:	dc7b      	bgt.n	bba76 <_strtod_l+0x91e>
   bb97e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bb982:	f77f aea9 	ble.w	bb6d8 <_strtod_l+0x580>
   bb986:	4b4d      	ldr	r3, [pc, #308]	; (bbabc <_strtod_l+0x964>)
   bb988:	4650      	mov	r0, sl
   bb98a:	4659      	mov	r1, fp
   bb98c:	2200      	movs	r2, #0
   bb98e:	f7fe ff91 	bl	ba8b4 <__aeabi_dmul>
   bb992:	460b      	mov	r3, r1
   bb994:	4303      	orrs	r3, r0
   bb996:	bf08      	it	eq
   bb998:	2322      	moveq	r3, #34	; 0x22
   bb99a:	4682      	mov	sl, r0
   bb99c:	468b      	mov	fp, r1
   bb99e:	bf08      	it	eq
   bb9a0:	6023      	streq	r3, [r4, #0]
   bb9a2:	e62b      	b.n	bb5fc <_strtod_l+0x4a4>
   bb9a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb9a8:	fa02 f303 	lsl.w	r3, r2, r3
   bb9ac:	ea03 0a0a 	and.w	sl, r3, sl
   bb9b0:	e6e3      	b.n	bb77a <_strtod_l+0x622>
   bb9b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bb9b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bb9ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bb9be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bb9c2:	fa01 f308 	lsl.w	r3, r1, r8
   bb9c6:	9308      	str	r3, [sp, #32]
   bb9c8:	910d      	str	r1, [sp, #52]	; 0x34
   bb9ca:	e746      	b.n	bb85a <_strtod_l+0x702>
   bb9cc:	2300      	movs	r3, #0
   bb9ce:	9308      	str	r3, [sp, #32]
   bb9d0:	2301      	movs	r3, #1
   bb9d2:	930d      	str	r3, [sp, #52]	; 0x34
   bb9d4:	e741      	b.n	bb85a <_strtod_l+0x702>
   bb9d6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb9d8:	4642      	mov	r2, r8
   bb9da:	4620      	mov	r0, r4
   bb9dc:	f001 f89e 	bl	bcb1c <__lshift>
   bb9e0:	9018      	str	r0, [sp, #96]	; 0x60
   bb9e2:	2800      	cmp	r0, #0
   bb9e4:	f47f af6b 	bne.w	bb8be <_strtod_l+0x766>
   bb9e8:	e5fe      	b.n	bb5e8 <_strtod_l+0x490>
   bb9ea:	465f      	mov	r7, fp
   bb9ec:	d16e      	bne.n	bbacc <_strtod_l+0x974>
   bb9ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bb9f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb9f4:	b342      	cbz	r2, bba48 <_strtod_l+0x8f0>
   bb9f6:	4a32      	ldr	r2, [pc, #200]	; (bbac0 <_strtod_l+0x968>)
   bb9f8:	4293      	cmp	r3, r2
   bb9fa:	d128      	bne.n	bba4e <_strtod_l+0x8f6>
   bb9fc:	9b04      	ldr	r3, [sp, #16]
   bb9fe:	4651      	mov	r1, sl
   bba00:	b1eb      	cbz	r3, bba3e <_strtod_l+0x8e6>
   bba02:	4b2d      	ldr	r3, [pc, #180]	; (bbab8 <_strtod_l+0x960>)
   bba04:	403b      	ands	r3, r7
   bba06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bba0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bba0e:	d819      	bhi.n	bba44 <_strtod_l+0x8ec>
   bba10:	0d1b      	lsrs	r3, r3, #20
   bba12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bba16:	fa02 f303 	lsl.w	r3, r2, r3
   bba1a:	4299      	cmp	r1, r3
   bba1c:	d117      	bne.n	bba4e <_strtod_l+0x8f6>
   bba1e:	4b29      	ldr	r3, [pc, #164]	; (bbac4 <_strtod_l+0x96c>)
   bba20:	429f      	cmp	r7, r3
   bba22:	d102      	bne.n	bba2a <_strtod_l+0x8d2>
   bba24:	3101      	adds	r1, #1
   bba26:	f43f addf 	beq.w	bb5e8 <_strtod_l+0x490>
   bba2a:	4b23      	ldr	r3, [pc, #140]	; (bbab8 <_strtod_l+0x960>)
   bba2c:	403b      	ands	r3, r7
   bba2e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bba32:	f04f 0a00 	mov.w	sl, #0
   bba36:	9b04      	ldr	r3, [sp, #16]
   bba38:	2b00      	cmp	r3, #0
   bba3a:	d1a4      	bne.n	bb986 <_strtod_l+0x82e>
   bba3c:	e5de      	b.n	bb5fc <_strtod_l+0x4a4>
   bba3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bba42:	e7ea      	b.n	bba1a <_strtod_l+0x8c2>
   bba44:	4613      	mov	r3, r2
   bba46:	e7e8      	b.n	bba1a <_strtod_l+0x8c2>
   bba48:	ea53 030a 	orrs.w	r3, r3, sl
   bba4c:	d08c      	beq.n	bb968 <_strtod_l+0x810>
   bba4e:	9b08      	ldr	r3, [sp, #32]
   bba50:	b1db      	cbz	r3, bba8a <_strtod_l+0x932>
   bba52:	423b      	tst	r3, r7
   bba54:	d0ef      	beq.n	bba36 <_strtod_l+0x8de>
   bba56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bba58:	9a04      	ldr	r2, [sp, #16]
   bba5a:	4650      	mov	r0, sl
   bba5c:	4659      	mov	r1, fp
   bba5e:	b1c3      	cbz	r3, bba92 <_strtod_l+0x93a>
   bba60:	f7ff fb5e 	bl	bb120 <sulp>
   bba64:	4602      	mov	r2, r0
   bba66:	460b      	mov	r3, r1
   bba68:	ec51 0b18 	vmov	r0, r1, d8
   bba6c:	f7fe fd6c 	bl	ba548 <__adddf3>
   bba70:	4682      	mov	sl, r0
   bba72:	468b      	mov	fp, r1
   bba74:	e7df      	b.n	bba36 <_strtod_l+0x8de>
   bba76:	4013      	ands	r3, r2
   bba78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bba7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bba80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bba84:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bba88:	e7d5      	b.n	bba36 <_strtod_l+0x8de>
   bba8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bba8c:	ea13 0f0a 	tst.w	r3, sl
   bba90:	e7e0      	b.n	bba54 <_strtod_l+0x8fc>
   bba92:	f7ff fb45 	bl	bb120 <sulp>
   bba96:	4602      	mov	r2, r0
   bba98:	460b      	mov	r3, r1
   bba9a:	ec51 0b18 	vmov	r0, r1, d8
   bba9e:	f7fe fd51 	bl	ba544 <__aeabi_dsub>
   bbaa2:	2200      	movs	r2, #0
   bbaa4:	2300      	movs	r3, #0
   bbaa6:	4682      	mov	sl, r0
   bbaa8:	468b      	mov	fp, r1
   bbaaa:	f7ff f96b 	bl	bad84 <__aeabi_dcmpeq>
   bbaae:	2800      	cmp	r0, #0
   bbab0:	d0c1      	beq.n	bba36 <_strtod_l+0x8de>
   bbab2:	e611      	b.n	bb6d8 <_strtod_l+0x580>
   bbab4:	fffffc02 	.word	0xfffffc02
   bbab8:	7ff00000 	.word	0x7ff00000
   bbabc:	39500000 	.word	0x39500000
   bbac0:	000fffff 	.word	0x000fffff
   bbac4:	7fefffff 	.word	0x7fefffff
   bbac8:	000bda78 	.word	0x000bda78
   bbacc:	4631      	mov	r1, r6
   bbace:	4628      	mov	r0, r5
   bbad0:	f001 fa12 	bl	bcef8 <__ratio>
   bbad4:	ec59 8b10 	vmov	r8, r9, d0
   bbad8:	ee10 0a10 	vmov	r0, s0
   bbadc:	2200      	movs	r2, #0
   bbade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bbae2:	4649      	mov	r1, r9
   bbae4:	f7ff f962 	bl	badac <__aeabi_dcmple>
   bbae8:	2800      	cmp	r0, #0
   bbaea:	d07a      	beq.n	bbbe2 <_strtod_l+0xa8a>
   bbaec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbaee:	2b00      	cmp	r3, #0
   bbaf0:	d04a      	beq.n	bbb88 <_strtod_l+0xa30>
   bbaf2:	4b95      	ldr	r3, [pc, #596]	; (bbd48 <_strtod_l+0xbf0>)
   bbaf4:	2200      	movs	r2, #0
   bbaf6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbafa:	f8df 924c 	ldr.w	r9, [pc, #588]	; bbd48 <_strtod_l+0xbf0>
   bbafe:	f04f 0800 	mov.w	r8, #0
   bbb02:	4b92      	ldr	r3, [pc, #584]	; (bbd4c <_strtod_l+0xbf4>)
   bbb04:	403b      	ands	r3, r7
   bbb06:	930d      	str	r3, [sp, #52]	; 0x34
   bbb08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbb0a:	4b91      	ldr	r3, [pc, #580]	; (bbd50 <_strtod_l+0xbf8>)
   bbb0c:	429a      	cmp	r2, r3
   bbb0e:	f040 80b0 	bne.w	bbc72 <_strtod_l+0xb1a>
   bbb12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbb16:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bbb1a:	ec4b ab10 	vmov	d0, sl, fp
   bbb1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bbb22:	f001 f911 	bl	bcd48 <__ulp>
   bbb26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbb2a:	ec53 2b10 	vmov	r2, r3, d0
   bbb2e:	f7fe fec1 	bl	ba8b4 <__aeabi_dmul>
   bbb32:	4652      	mov	r2, sl
   bbb34:	465b      	mov	r3, fp
   bbb36:	f7fe fd07 	bl	ba548 <__adddf3>
   bbb3a:	460b      	mov	r3, r1
   bbb3c:	4983      	ldr	r1, [pc, #524]	; (bbd4c <_strtod_l+0xbf4>)
   bbb3e:	4a85      	ldr	r2, [pc, #532]	; (bbd54 <_strtod_l+0xbfc>)
   bbb40:	4019      	ands	r1, r3
   bbb42:	4291      	cmp	r1, r2
   bbb44:	4682      	mov	sl, r0
   bbb46:	d960      	bls.n	bbc0a <_strtod_l+0xab2>
   bbb48:	ee18 3a90 	vmov	r3, s17
   bbb4c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bbb50:	4293      	cmp	r3, r2
   bbb52:	d104      	bne.n	bbb5e <_strtod_l+0xa06>
   bbb54:	ee18 3a10 	vmov	r3, s16
   bbb58:	3301      	adds	r3, #1
   bbb5a:	f43f ad45 	beq.w	bb5e8 <_strtod_l+0x490>
   bbb5e:	f8df b200 	ldr.w	fp, [pc, #512]	; bbd60 <_strtod_l+0xc08>
   bbb62:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bbb66:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbb68:	4620      	mov	r0, r4
   bbb6a:	f000 fdbb 	bl	bc6e4 <_Bfree>
   bbb6e:	9905      	ldr	r1, [sp, #20]
   bbb70:	4620      	mov	r0, r4
   bbb72:	f000 fdb7 	bl	bc6e4 <_Bfree>
   bbb76:	4631      	mov	r1, r6
   bbb78:	4620      	mov	r0, r4
   bbb7a:	f000 fdb3 	bl	bc6e4 <_Bfree>
   bbb7e:	4629      	mov	r1, r5
   bbb80:	4620      	mov	r0, r4
   bbb82:	f000 fdaf 	bl	bc6e4 <_Bfree>
   bbb86:	e61a      	b.n	bb7be <_strtod_l+0x666>
   bbb88:	f1ba 0f00 	cmp.w	sl, #0
   bbb8c:	d11b      	bne.n	bbbc6 <_strtod_l+0xa6e>
   bbb8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbb92:	b9f3      	cbnz	r3, bbbd2 <_strtod_l+0xa7a>
   bbb94:	4b6c      	ldr	r3, [pc, #432]	; (bbd48 <_strtod_l+0xbf0>)
   bbb96:	2200      	movs	r2, #0
   bbb98:	4640      	mov	r0, r8
   bbb9a:	4649      	mov	r1, r9
   bbb9c:	f7ff f8fc 	bl	bad98 <__aeabi_dcmplt>
   bbba0:	b9d0      	cbnz	r0, bbbd8 <_strtod_l+0xa80>
   bbba2:	4640      	mov	r0, r8
   bbba4:	4649      	mov	r1, r9
   bbba6:	4b6c      	ldr	r3, [pc, #432]	; (bbd58 <_strtod_l+0xc00>)
   bbba8:	2200      	movs	r2, #0
   bbbaa:	f7fe fe83 	bl	ba8b4 <__aeabi_dmul>
   bbbae:	4680      	mov	r8, r0
   bbbb0:	4689      	mov	r9, r1
   bbbb2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bbbb6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bbbba:	9315      	str	r3, [sp, #84]	; 0x54
   bbbbc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bbbc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbbc4:	e79d      	b.n	bbb02 <_strtod_l+0x9aa>
   bbbc6:	f1ba 0f01 	cmp.w	sl, #1
   bbbca:	d102      	bne.n	bbbd2 <_strtod_l+0xa7a>
   bbbcc:	2f00      	cmp	r7, #0
   bbbce:	f43f ad83 	beq.w	bb6d8 <_strtod_l+0x580>
   bbbd2:	4b62      	ldr	r3, [pc, #392]	; (bbd5c <_strtod_l+0xc04>)
   bbbd4:	2200      	movs	r2, #0
   bbbd6:	e78e      	b.n	bbaf6 <_strtod_l+0x99e>
   bbbd8:	f8df 917c 	ldr.w	r9, [pc, #380]	; bbd58 <_strtod_l+0xc00>
   bbbdc:	f04f 0800 	mov.w	r8, #0
   bbbe0:	e7e7      	b.n	bbbb2 <_strtod_l+0xa5a>
   bbbe2:	4b5d      	ldr	r3, [pc, #372]	; (bbd58 <_strtod_l+0xc00>)
   bbbe4:	4640      	mov	r0, r8
   bbbe6:	4649      	mov	r1, r9
   bbbe8:	2200      	movs	r2, #0
   bbbea:	f7fe fe63 	bl	ba8b4 <__aeabi_dmul>
   bbbee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbbf0:	4680      	mov	r8, r0
   bbbf2:	4689      	mov	r9, r1
   bbbf4:	b933      	cbnz	r3, bbc04 <_strtod_l+0xaac>
   bbbf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bbbfa:	900e      	str	r0, [sp, #56]	; 0x38
   bbbfc:	930f      	str	r3, [sp, #60]	; 0x3c
   bbbfe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bbc02:	e7dd      	b.n	bbbc0 <_strtod_l+0xa68>
   bbc04:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bbc08:	e7f9      	b.n	bbbfe <_strtod_l+0xaa6>
   bbc0a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bbc0e:	9b04      	ldr	r3, [sp, #16]
   bbc10:	2b00      	cmp	r3, #0
   bbc12:	d1a8      	bne.n	bbb66 <_strtod_l+0xa0e>
   bbc14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bbc18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbc1a:	0d1b      	lsrs	r3, r3, #20
   bbc1c:	051b      	lsls	r3, r3, #20
   bbc1e:	429a      	cmp	r2, r3
   bbc20:	d1a1      	bne.n	bbb66 <_strtod_l+0xa0e>
   bbc22:	4640      	mov	r0, r8
   bbc24:	4649      	mov	r1, r9
   bbc26:	f001 fa05 	bl	bd034 <__aeabi_d2lz>
   bbc2a:	f7fe fe15 	bl	ba858 <__aeabi_l2d>
   bbc2e:	4602      	mov	r2, r0
   bbc30:	460b      	mov	r3, r1
   bbc32:	4640      	mov	r0, r8
   bbc34:	4649      	mov	r1, r9
   bbc36:	f7fe fc85 	bl	ba544 <__aeabi_dsub>
   bbc3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bbc3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bbc40:	ea43 030a 	orr.w	r3, r3, sl
   bbc44:	4313      	orrs	r3, r2
   bbc46:	4680      	mov	r8, r0
   bbc48:	4689      	mov	r9, r1
   bbc4a:	d055      	beq.n	bbcf8 <_strtod_l+0xba0>
   bbc4c:	a336      	add	r3, pc, #216	; (adr r3, bbd28 <_strtod_l+0xbd0>)
   bbc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbc52:	f7ff f8a1 	bl	bad98 <__aeabi_dcmplt>
   bbc56:	2800      	cmp	r0, #0
   bbc58:	f47f acd0 	bne.w	bb5fc <_strtod_l+0x4a4>
   bbc5c:	a334      	add	r3, pc, #208	; (adr r3, bbd30 <_strtod_l+0xbd8>)
   bbc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbc62:	4640      	mov	r0, r8
   bbc64:	4649      	mov	r1, r9
   bbc66:	f7ff f8b5 	bl	badd4 <__aeabi_dcmpgt>
   bbc6a:	2800      	cmp	r0, #0
   bbc6c:	f43f af7b 	beq.w	bbb66 <_strtod_l+0xa0e>
   bbc70:	e4c4      	b.n	bb5fc <_strtod_l+0x4a4>
   bbc72:	9b04      	ldr	r3, [sp, #16]
   bbc74:	b333      	cbz	r3, bbcc4 <_strtod_l+0xb6c>
   bbc76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bbc78:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bbc7c:	d822      	bhi.n	bbcc4 <_strtod_l+0xb6c>
   bbc7e:	a32e      	add	r3, pc, #184	; (adr r3, bbd38 <_strtod_l+0xbe0>)
   bbc80:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbc84:	4640      	mov	r0, r8
   bbc86:	4649      	mov	r1, r9
   bbc88:	f7ff f890 	bl	badac <__aeabi_dcmple>
   bbc8c:	b1a0      	cbz	r0, bbcb8 <_strtod_l+0xb60>
   bbc8e:	4649      	mov	r1, r9
   bbc90:	4640      	mov	r0, r8
   bbc92:	f7ff f8e7 	bl	bae64 <__aeabi_d2uiz>
   bbc96:	2801      	cmp	r0, #1
   bbc98:	bf38      	it	cc
   bbc9a:	2001      	movcc	r0, #1
   bbc9c:	f7fe fd90 	bl	ba7c0 <__aeabi_ui2d>
   bbca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bbca2:	4680      	mov	r8, r0
   bbca4:	4689      	mov	r9, r1
   bbca6:	bb23      	cbnz	r3, bbcf2 <_strtod_l+0xb9a>
   bbca8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bbcac:	9010      	str	r0, [sp, #64]	; 0x40
   bbcae:	9311      	str	r3, [sp, #68]	; 0x44
   bbcb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bbcb4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bbcb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bbcba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bbcbc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bbcc0:	1a9b      	subs	r3, r3, r2
   bbcc2:	9309      	str	r3, [sp, #36]	; 0x24
   bbcc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbcc8:	eeb0 0a48 	vmov.f32	s0, s16
   bbccc:	eef0 0a68 	vmov.f32	s1, s17
   bbcd0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bbcd4:	f001 f838 	bl	bcd48 <__ulp>
   bbcd8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bbcdc:	ec53 2b10 	vmov	r2, r3, d0
   bbce0:	f7fe fde8 	bl	ba8b4 <__aeabi_dmul>
   bbce4:	ec53 2b18 	vmov	r2, r3, d8
   bbce8:	f7fe fc2e 	bl	ba548 <__adddf3>
   bbcec:	4682      	mov	sl, r0
   bbcee:	468b      	mov	fp, r1
   bbcf0:	e78d      	b.n	bbc0e <_strtod_l+0xab6>
   bbcf2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bbcf6:	e7db      	b.n	bbcb0 <_strtod_l+0xb58>
   bbcf8:	a311      	add	r3, pc, #68	; (adr r3, bbd40 <_strtod_l+0xbe8>)
   bbcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbcfe:	f7ff f84b 	bl	bad98 <__aeabi_dcmplt>
   bbd02:	e7b2      	b.n	bbc6a <_strtod_l+0xb12>
   bbd04:	2300      	movs	r3, #0
   bbd06:	930a      	str	r3, [sp, #40]	; 0x28
   bbd08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bbd0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbd0c:	6013      	str	r3, [r2, #0]
   bbd0e:	f7ff ba6b 	b.w	bb1e8 <_strtod_l+0x90>
   bbd12:	2a65      	cmp	r2, #101	; 0x65
   bbd14:	f43f ab5f 	beq.w	bb3d6 <_strtod_l+0x27e>
   bbd18:	2a45      	cmp	r2, #69	; 0x45
   bbd1a:	f43f ab5c 	beq.w	bb3d6 <_strtod_l+0x27e>
   bbd1e:	2301      	movs	r3, #1
   bbd20:	f7ff bb94 	b.w	bb44c <_strtod_l+0x2f4>
   bbd24:	f3af 8000 	nop.w
   bbd28:	94a03595 	.word	0x94a03595
   bbd2c:	3fdfffff 	.word	0x3fdfffff
   bbd30:	35afe535 	.word	0x35afe535
   bbd34:	3fe00000 	.word	0x3fe00000
   bbd38:	ffc00000 	.word	0xffc00000
   bbd3c:	41dfffff 	.word	0x41dfffff
   bbd40:	94a03595 	.word	0x94a03595
   bbd44:	3fcfffff 	.word	0x3fcfffff
   bbd48:	3ff00000 	.word	0x3ff00000
   bbd4c:	7ff00000 	.word	0x7ff00000
   bbd50:	7fe00000 	.word	0x7fe00000
   bbd54:	7c9fffff 	.word	0x7c9fffff
   bbd58:	3fe00000 	.word	0x3fe00000
   bbd5c:	bff00000 	.word	0xbff00000
   bbd60:	7fefffff 	.word	0x7fefffff

000bbd64 <strtod>:
   bbd64:	460a      	mov	r2, r1
   bbd66:	4601      	mov	r1, r0
   bbd68:	4802      	ldr	r0, [pc, #8]	; (bbd74 <strtod+0x10>)
   bbd6a:	4b03      	ldr	r3, [pc, #12]	; (bbd78 <strtod+0x14>)
   bbd6c:	6800      	ldr	r0, [r0, #0]
   bbd6e:	f7ff b9f3 	b.w	bb158 <_strtod_l>
   bbd72:	bf00      	nop
   bbd74:	20035368 	.word	0x20035368
   bbd78:	200353d4 	.word	0x200353d4

000bbd7c <_strtol_l.constprop.0>:
   bbd7c:	2b01      	cmp	r3, #1
   bbd7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbd82:	d001      	beq.n	bbd88 <_strtol_l.constprop.0+0xc>
   bbd84:	2b24      	cmp	r3, #36	; 0x24
   bbd86:	d906      	bls.n	bbd96 <_strtol_l.constprop.0+0x1a>
   bbd88:	f7fb fdf6 	bl	b7978 <__errno>
   bbd8c:	2316      	movs	r3, #22
   bbd8e:	6003      	str	r3, [r0, #0]
   bbd90:	2000      	movs	r0, #0
   bbd92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bbd96:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bbe7c <_strtol_l.constprop.0+0x100>
   bbd9a:	460d      	mov	r5, r1
   bbd9c:	462e      	mov	r6, r5
   bbd9e:	f815 4b01 	ldrb.w	r4, [r5], #1
   bbda2:	f814 700c 	ldrb.w	r7, [r4, ip]
   bbda6:	f017 0708 	ands.w	r7, r7, #8
   bbdaa:	d1f7      	bne.n	bbd9c <_strtol_l.constprop.0+0x20>
   bbdac:	2c2d      	cmp	r4, #45	; 0x2d
   bbdae:	d132      	bne.n	bbe16 <_strtol_l.constprop.0+0x9a>
   bbdb0:	782c      	ldrb	r4, [r5, #0]
   bbdb2:	2701      	movs	r7, #1
   bbdb4:	1cb5      	adds	r5, r6, #2
   bbdb6:	2b00      	cmp	r3, #0
   bbdb8:	d05b      	beq.n	bbe72 <_strtol_l.constprop.0+0xf6>
   bbdba:	2b10      	cmp	r3, #16
   bbdbc:	d109      	bne.n	bbdd2 <_strtol_l.constprop.0+0x56>
   bbdbe:	2c30      	cmp	r4, #48	; 0x30
   bbdc0:	d107      	bne.n	bbdd2 <_strtol_l.constprop.0+0x56>
   bbdc2:	782c      	ldrb	r4, [r5, #0]
   bbdc4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bbdc8:	2c58      	cmp	r4, #88	; 0x58
   bbdca:	d14d      	bne.n	bbe68 <_strtol_l.constprop.0+0xec>
   bbdcc:	786c      	ldrb	r4, [r5, #1]
   bbdce:	2310      	movs	r3, #16
   bbdd0:	3502      	adds	r5, #2
   bbdd2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bbdd6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bbdda:	f04f 0c00 	mov.w	ip, #0
   bbdde:	fbb8 f9f3 	udiv	r9, r8, r3
   bbde2:	4666      	mov	r6, ip
   bbde4:	fb03 8a19 	mls	sl, r3, r9, r8
   bbde8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bbdec:	f1be 0f09 	cmp.w	lr, #9
   bbdf0:	d816      	bhi.n	bbe20 <_strtol_l.constprop.0+0xa4>
   bbdf2:	4674      	mov	r4, lr
   bbdf4:	42a3      	cmp	r3, r4
   bbdf6:	dd24      	ble.n	bbe42 <_strtol_l.constprop.0+0xc6>
   bbdf8:	f1bc 0f00 	cmp.w	ip, #0
   bbdfc:	db1e      	blt.n	bbe3c <_strtol_l.constprop.0+0xc0>
   bbdfe:	45b1      	cmp	r9, r6
   bbe00:	d31c      	bcc.n	bbe3c <_strtol_l.constprop.0+0xc0>
   bbe02:	d101      	bne.n	bbe08 <_strtol_l.constprop.0+0x8c>
   bbe04:	45a2      	cmp	sl, r4
   bbe06:	db19      	blt.n	bbe3c <_strtol_l.constprop.0+0xc0>
   bbe08:	fb06 4603 	mla	r6, r6, r3, r4
   bbe0c:	f04f 0c01 	mov.w	ip, #1
   bbe10:	f815 4b01 	ldrb.w	r4, [r5], #1
   bbe14:	e7e8      	b.n	bbde8 <_strtol_l.constprop.0+0x6c>
   bbe16:	2c2b      	cmp	r4, #43	; 0x2b
   bbe18:	bf04      	itt	eq
   bbe1a:	782c      	ldrbeq	r4, [r5, #0]
   bbe1c:	1cb5      	addeq	r5, r6, #2
   bbe1e:	e7ca      	b.n	bbdb6 <_strtol_l.constprop.0+0x3a>
   bbe20:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bbe24:	f1be 0f19 	cmp.w	lr, #25
   bbe28:	d801      	bhi.n	bbe2e <_strtol_l.constprop.0+0xb2>
   bbe2a:	3c37      	subs	r4, #55	; 0x37
   bbe2c:	e7e2      	b.n	bbdf4 <_strtol_l.constprop.0+0x78>
   bbe2e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bbe32:	f1be 0f19 	cmp.w	lr, #25
   bbe36:	d804      	bhi.n	bbe42 <_strtol_l.constprop.0+0xc6>
   bbe38:	3c57      	subs	r4, #87	; 0x57
   bbe3a:	e7db      	b.n	bbdf4 <_strtol_l.constprop.0+0x78>
   bbe3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bbe40:	e7e6      	b.n	bbe10 <_strtol_l.constprop.0+0x94>
   bbe42:	f1bc 0f00 	cmp.w	ip, #0
   bbe46:	da05      	bge.n	bbe54 <_strtol_l.constprop.0+0xd8>
   bbe48:	2322      	movs	r3, #34	; 0x22
   bbe4a:	6003      	str	r3, [r0, #0]
   bbe4c:	4646      	mov	r6, r8
   bbe4e:	b942      	cbnz	r2, bbe62 <_strtol_l.constprop.0+0xe6>
   bbe50:	4630      	mov	r0, r6
   bbe52:	e79e      	b.n	bbd92 <_strtol_l.constprop.0+0x16>
   bbe54:	b107      	cbz	r7, bbe58 <_strtol_l.constprop.0+0xdc>
   bbe56:	4276      	negs	r6, r6
   bbe58:	2a00      	cmp	r2, #0
   bbe5a:	d0f9      	beq.n	bbe50 <_strtol_l.constprop.0+0xd4>
   bbe5c:	f1bc 0f00 	cmp.w	ip, #0
   bbe60:	d000      	beq.n	bbe64 <_strtol_l.constprop.0+0xe8>
   bbe62:	1e69      	subs	r1, r5, #1
   bbe64:	6011      	str	r1, [r2, #0]
   bbe66:	e7f3      	b.n	bbe50 <_strtol_l.constprop.0+0xd4>
   bbe68:	2430      	movs	r4, #48	; 0x30
   bbe6a:	2b00      	cmp	r3, #0
   bbe6c:	d1b1      	bne.n	bbdd2 <_strtol_l.constprop.0+0x56>
   bbe6e:	2308      	movs	r3, #8
   bbe70:	e7af      	b.n	bbdd2 <_strtol_l.constprop.0+0x56>
   bbe72:	2c30      	cmp	r4, #48	; 0x30
   bbe74:	d0a5      	beq.n	bbdc2 <_strtol_l.constprop.0+0x46>
   bbe76:	230a      	movs	r3, #10
   bbe78:	e7ab      	b.n	bbdd2 <_strtol_l.constprop.0+0x56>
   bbe7a:	bf00      	nop
   bbe7c:	000bdaa1 	.word	0x000bdaa1

000bbe80 <strtol>:
   bbe80:	4613      	mov	r3, r2
   bbe82:	460a      	mov	r2, r1
   bbe84:	4601      	mov	r1, r0
   bbe86:	4802      	ldr	r0, [pc, #8]	; (bbe90 <strtol+0x10>)
   bbe88:	6800      	ldr	r0, [r0, #0]
   bbe8a:	f7ff bf77 	b.w	bbd7c <_strtol_l.constprop.0>
   bbe8e:	bf00      	nop
   bbe90:	20035368 	.word	0x20035368

000bbe94 <__register_exitproc>:
   bbe94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbe98:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bbf54 <__register_exitproc+0xc0>
   bbe9c:	4606      	mov	r6, r0
   bbe9e:	f8d8 0000 	ldr.w	r0, [r8]
   bbea2:	461f      	mov	r7, r3
   bbea4:	460d      	mov	r5, r1
   bbea6:	4691      	mov	r9, r2
   bbea8:	f000 fbc6 	bl	bc638 <__retarget_lock_acquire_recursive>
   bbeac:	4b25      	ldr	r3, [pc, #148]	; (bbf44 <__register_exitproc+0xb0>)
   bbeae:	681c      	ldr	r4, [r3, #0]
   bbeb0:	b934      	cbnz	r4, bbec0 <__register_exitproc+0x2c>
   bbeb2:	4c25      	ldr	r4, [pc, #148]	; (bbf48 <__register_exitproc+0xb4>)
   bbeb4:	601c      	str	r4, [r3, #0]
   bbeb6:	4b25      	ldr	r3, [pc, #148]	; (bbf4c <__register_exitproc+0xb8>)
   bbeb8:	b113      	cbz	r3, bbec0 <__register_exitproc+0x2c>
   bbeba:	681b      	ldr	r3, [r3, #0]
   bbebc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bbec0:	6863      	ldr	r3, [r4, #4]
   bbec2:	2b1f      	cmp	r3, #31
   bbec4:	dd07      	ble.n	bbed6 <__register_exitproc+0x42>
   bbec6:	f8d8 0000 	ldr.w	r0, [r8]
   bbeca:	f000 fbb7 	bl	bc63c <__retarget_lock_release_recursive>
   bbece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bbed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbed6:	b34e      	cbz	r6, bbf2c <__register_exitproc+0x98>
   bbed8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bbedc:	b988      	cbnz	r0, bbf02 <__register_exitproc+0x6e>
   bbede:	4b1c      	ldr	r3, [pc, #112]	; (bbf50 <__register_exitproc+0xbc>)
   bbee0:	b923      	cbnz	r3, bbeec <__register_exitproc+0x58>
   bbee2:	f8d8 0000 	ldr.w	r0, [r8]
   bbee6:	f000 fba8 	bl	bc63a <__retarget_lock_release>
   bbeea:	e7f0      	b.n	bbece <__register_exitproc+0x3a>
   bbeec:	f44f 7084 	mov.w	r0, #264	; 0x108
   bbef0:	f7fb fd0a 	bl	b7908 <malloc>
   bbef4:	2800      	cmp	r0, #0
   bbef6:	d0f4      	beq.n	bbee2 <__register_exitproc+0x4e>
   bbef8:	2300      	movs	r3, #0
   bbefa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bbefe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bbf02:	6863      	ldr	r3, [r4, #4]
   bbf04:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bbf08:	2201      	movs	r2, #1
   bbf0a:	409a      	lsls	r2, r3
   bbf0c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bbf10:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bbf14:	4313      	orrs	r3, r2
   bbf16:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bbf1a:	2e02      	cmp	r6, #2
   bbf1c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bbf20:	bf02      	ittt	eq
   bbf22:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bbf26:	4313      	orreq	r3, r2
   bbf28:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bbf2c:	6863      	ldr	r3, [r4, #4]
   bbf2e:	f8d8 0000 	ldr.w	r0, [r8]
   bbf32:	1c5a      	adds	r2, r3, #1
   bbf34:	3302      	adds	r3, #2
   bbf36:	6062      	str	r2, [r4, #4]
   bbf38:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bbf3c:	f000 fb7e 	bl	bc63c <__retarget_lock_release_recursive>
   bbf40:	2000      	movs	r0, #0
   bbf42:	e7c6      	b.n	bbed2 <__register_exitproc+0x3e>
   bbf44:	2003e7e8 	.word	0x2003e7e8
   bbf48:	2003e75c 	.word	0x2003e75c
   bbf4c:	00000000 	.word	0x00000000
   bbf50:	000b7909 	.word	0x000b7909
   bbf54:	200353cc 	.word	0x200353cc

000bbf58 <rshift>:
   bbf58:	6903      	ldr	r3, [r0, #16]
   bbf5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bbf5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bbf62:	ea4f 1261 	mov.w	r2, r1, asr #5
   bbf66:	f100 0414 	add.w	r4, r0, #20
   bbf6a:	dd45      	ble.n	bbff8 <rshift+0xa0>
   bbf6c:	f011 011f 	ands.w	r1, r1, #31
   bbf70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bbf74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bbf78:	d10c      	bne.n	bbf94 <rshift+0x3c>
   bbf7a:	f100 0710 	add.w	r7, r0, #16
   bbf7e:	4629      	mov	r1, r5
   bbf80:	42b1      	cmp	r1, r6
   bbf82:	d334      	bcc.n	bbfee <rshift+0x96>
   bbf84:	1a9b      	subs	r3, r3, r2
   bbf86:	009b      	lsls	r3, r3, #2
   bbf88:	1eea      	subs	r2, r5, #3
   bbf8a:	4296      	cmp	r6, r2
   bbf8c:	bf38      	it	cc
   bbf8e:	2300      	movcc	r3, #0
   bbf90:	4423      	add	r3, r4
   bbf92:	e015      	b.n	bbfc0 <rshift+0x68>
   bbf94:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bbf98:	f1c1 0820 	rsb	r8, r1, #32
   bbf9c:	40cf      	lsrs	r7, r1
   bbf9e:	f105 0e04 	add.w	lr, r5, #4
   bbfa2:	46a1      	mov	r9, r4
   bbfa4:	4576      	cmp	r6, lr
   bbfa6:	46f4      	mov	ip, lr
   bbfa8:	d815      	bhi.n	bbfd6 <rshift+0x7e>
   bbfaa:	1a9a      	subs	r2, r3, r2
   bbfac:	0092      	lsls	r2, r2, #2
   bbfae:	3a04      	subs	r2, #4
   bbfb0:	3501      	adds	r5, #1
   bbfb2:	42ae      	cmp	r6, r5
   bbfb4:	bf38      	it	cc
   bbfb6:	2200      	movcc	r2, #0
   bbfb8:	18a3      	adds	r3, r4, r2
   bbfba:	50a7      	str	r7, [r4, r2]
   bbfbc:	b107      	cbz	r7, bbfc0 <rshift+0x68>
   bbfbe:	3304      	adds	r3, #4
   bbfc0:	1b1a      	subs	r2, r3, r4
   bbfc2:	42a3      	cmp	r3, r4
   bbfc4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bbfc8:	bf08      	it	eq
   bbfca:	2300      	moveq	r3, #0
   bbfcc:	6102      	str	r2, [r0, #16]
   bbfce:	bf08      	it	eq
   bbfd0:	6143      	streq	r3, [r0, #20]
   bbfd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bbfd6:	f8dc c000 	ldr.w	ip, [ip]
   bbfda:	fa0c fc08 	lsl.w	ip, ip, r8
   bbfde:	ea4c 0707 	orr.w	r7, ip, r7
   bbfe2:	f849 7b04 	str.w	r7, [r9], #4
   bbfe6:	f85e 7b04 	ldr.w	r7, [lr], #4
   bbfea:	40cf      	lsrs	r7, r1
   bbfec:	e7da      	b.n	bbfa4 <rshift+0x4c>
   bbfee:	f851 cb04 	ldr.w	ip, [r1], #4
   bbff2:	f847 cf04 	str.w	ip, [r7, #4]!
   bbff6:	e7c3      	b.n	bbf80 <rshift+0x28>
   bbff8:	4623      	mov	r3, r4
   bbffa:	e7e1      	b.n	bbfc0 <rshift+0x68>

000bbffc <__hexdig_fun>:
   bbffc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bc000:	2b09      	cmp	r3, #9
   bc002:	d802      	bhi.n	bc00a <__hexdig_fun+0xe>
   bc004:	3820      	subs	r0, #32
   bc006:	b2c0      	uxtb	r0, r0
   bc008:	4770      	bx	lr
   bc00a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bc00e:	2b05      	cmp	r3, #5
   bc010:	d801      	bhi.n	bc016 <__hexdig_fun+0x1a>
   bc012:	3847      	subs	r0, #71	; 0x47
   bc014:	e7f7      	b.n	bc006 <__hexdig_fun+0xa>
   bc016:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bc01a:	2b05      	cmp	r3, #5
   bc01c:	d801      	bhi.n	bc022 <__hexdig_fun+0x26>
   bc01e:	3827      	subs	r0, #39	; 0x27
   bc020:	e7f1      	b.n	bc006 <__hexdig_fun+0xa>
   bc022:	2000      	movs	r0, #0
   bc024:	4770      	bx	lr
	...

000bc028 <__gethex>:
   bc028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc02c:	ed2d 8b02 	vpush	{d8}
   bc030:	b089      	sub	sp, #36	; 0x24
   bc032:	ee08 0a10 	vmov	s16, r0
   bc036:	9304      	str	r3, [sp, #16]
   bc038:	4bb4      	ldr	r3, [pc, #720]	; (bc30c <__gethex+0x2e4>)
   bc03a:	681b      	ldr	r3, [r3, #0]
   bc03c:	9301      	str	r3, [sp, #4]
   bc03e:	4618      	mov	r0, r3
   bc040:	468b      	mov	fp, r1
   bc042:	4690      	mov	r8, r2
   bc044:	f7ff f82e 	bl	bb0a4 <strlen>
   bc048:	9b01      	ldr	r3, [sp, #4]
   bc04a:	f8db 2000 	ldr.w	r2, [fp]
   bc04e:	4403      	add	r3, r0
   bc050:	4682      	mov	sl, r0
   bc052:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bc056:	9305      	str	r3, [sp, #20]
   bc058:	1c93      	adds	r3, r2, #2
   bc05a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bc05e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bc062:	32fe      	adds	r2, #254	; 0xfe
   bc064:	18d1      	adds	r1, r2, r3
   bc066:	461f      	mov	r7, r3
   bc068:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc06c:	9100      	str	r1, [sp, #0]
   bc06e:	2830      	cmp	r0, #48	; 0x30
   bc070:	d0f8      	beq.n	bc064 <__gethex+0x3c>
   bc072:	f7ff ffc3 	bl	bbffc <__hexdig_fun>
   bc076:	4604      	mov	r4, r0
   bc078:	2800      	cmp	r0, #0
   bc07a:	d13a      	bne.n	bc0f2 <__gethex+0xca>
   bc07c:	9901      	ldr	r1, [sp, #4]
   bc07e:	4652      	mov	r2, sl
   bc080:	4638      	mov	r0, r7
   bc082:	f7ff f817 	bl	bb0b4 <strncmp>
   bc086:	4605      	mov	r5, r0
   bc088:	2800      	cmp	r0, #0
   bc08a:	d168      	bne.n	bc15e <__gethex+0x136>
   bc08c:	f817 000a 	ldrb.w	r0, [r7, sl]
   bc090:	eb07 060a 	add.w	r6, r7, sl
   bc094:	f7ff ffb2 	bl	bbffc <__hexdig_fun>
   bc098:	2800      	cmp	r0, #0
   bc09a:	d062      	beq.n	bc162 <__gethex+0x13a>
   bc09c:	4633      	mov	r3, r6
   bc09e:	7818      	ldrb	r0, [r3, #0]
   bc0a0:	2830      	cmp	r0, #48	; 0x30
   bc0a2:	461f      	mov	r7, r3
   bc0a4:	f103 0301 	add.w	r3, r3, #1
   bc0a8:	d0f9      	beq.n	bc09e <__gethex+0x76>
   bc0aa:	f7ff ffa7 	bl	bbffc <__hexdig_fun>
   bc0ae:	2301      	movs	r3, #1
   bc0b0:	fab0 f480 	clz	r4, r0
   bc0b4:	0964      	lsrs	r4, r4, #5
   bc0b6:	4635      	mov	r5, r6
   bc0b8:	9300      	str	r3, [sp, #0]
   bc0ba:	463a      	mov	r2, r7
   bc0bc:	4616      	mov	r6, r2
   bc0be:	3201      	adds	r2, #1
   bc0c0:	7830      	ldrb	r0, [r6, #0]
   bc0c2:	f7ff ff9b 	bl	bbffc <__hexdig_fun>
   bc0c6:	2800      	cmp	r0, #0
   bc0c8:	d1f8      	bne.n	bc0bc <__gethex+0x94>
   bc0ca:	9901      	ldr	r1, [sp, #4]
   bc0cc:	4652      	mov	r2, sl
   bc0ce:	4630      	mov	r0, r6
   bc0d0:	f7fe fff0 	bl	bb0b4 <strncmp>
   bc0d4:	b980      	cbnz	r0, bc0f8 <__gethex+0xd0>
   bc0d6:	b94d      	cbnz	r5, bc0ec <__gethex+0xc4>
   bc0d8:	eb06 050a 	add.w	r5, r6, sl
   bc0dc:	462a      	mov	r2, r5
   bc0de:	4616      	mov	r6, r2
   bc0e0:	3201      	adds	r2, #1
   bc0e2:	7830      	ldrb	r0, [r6, #0]
   bc0e4:	f7ff ff8a 	bl	bbffc <__hexdig_fun>
   bc0e8:	2800      	cmp	r0, #0
   bc0ea:	d1f8      	bne.n	bc0de <__gethex+0xb6>
   bc0ec:	1bad      	subs	r5, r5, r6
   bc0ee:	00ad      	lsls	r5, r5, #2
   bc0f0:	e004      	b.n	bc0fc <__gethex+0xd4>
   bc0f2:	2400      	movs	r4, #0
   bc0f4:	4625      	mov	r5, r4
   bc0f6:	e7e0      	b.n	bc0ba <__gethex+0x92>
   bc0f8:	2d00      	cmp	r5, #0
   bc0fa:	d1f7      	bne.n	bc0ec <__gethex+0xc4>
   bc0fc:	7833      	ldrb	r3, [r6, #0]
   bc0fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc102:	2b50      	cmp	r3, #80	; 0x50
   bc104:	d13b      	bne.n	bc17e <__gethex+0x156>
   bc106:	7873      	ldrb	r3, [r6, #1]
   bc108:	2b2b      	cmp	r3, #43	; 0x2b
   bc10a:	d02c      	beq.n	bc166 <__gethex+0x13e>
   bc10c:	2b2d      	cmp	r3, #45	; 0x2d
   bc10e:	d02e      	beq.n	bc16e <__gethex+0x146>
   bc110:	1c71      	adds	r1, r6, #1
   bc112:	f04f 0900 	mov.w	r9, #0
   bc116:	7808      	ldrb	r0, [r1, #0]
   bc118:	f7ff ff70 	bl	bbffc <__hexdig_fun>
   bc11c:	1e43      	subs	r3, r0, #1
   bc11e:	b2db      	uxtb	r3, r3
   bc120:	2b18      	cmp	r3, #24
   bc122:	d82c      	bhi.n	bc17e <__gethex+0x156>
   bc124:	f1a0 0210 	sub.w	r2, r0, #16
   bc128:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bc12c:	f7ff ff66 	bl	bbffc <__hexdig_fun>
   bc130:	1e43      	subs	r3, r0, #1
   bc132:	b2db      	uxtb	r3, r3
   bc134:	2b18      	cmp	r3, #24
   bc136:	d91d      	bls.n	bc174 <__gethex+0x14c>
   bc138:	f1b9 0f00 	cmp.w	r9, #0
   bc13c:	d000      	beq.n	bc140 <__gethex+0x118>
   bc13e:	4252      	negs	r2, r2
   bc140:	4415      	add	r5, r2
   bc142:	f8cb 1000 	str.w	r1, [fp]
   bc146:	b1e4      	cbz	r4, bc182 <__gethex+0x15a>
   bc148:	9b00      	ldr	r3, [sp, #0]
   bc14a:	2b00      	cmp	r3, #0
   bc14c:	bf14      	ite	ne
   bc14e:	2700      	movne	r7, #0
   bc150:	2706      	moveq	r7, #6
   bc152:	4638      	mov	r0, r7
   bc154:	b009      	add	sp, #36	; 0x24
   bc156:	ecbd 8b02 	vpop	{d8}
   bc15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc15e:	463e      	mov	r6, r7
   bc160:	4625      	mov	r5, r4
   bc162:	2401      	movs	r4, #1
   bc164:	e7ca      	b.n	bc0fc <__gethex+0xd4>
   bc166:	f04f 0900 	mov.w	r9, #0
   bc16a:	1cb1      	adds	r1, r6, #2
   bc16c:	e7d3      	b.n	bc116 <__gethex+0xee>
   bc16e:	f04f 0901 	mov.w	r9, #1
   bc172:	e7fa      	b.n	bc16a <__gethex+0x142>
   bc174:	230a      	movs	r3, #10
   bc176:	fb03 0202 	mla	r2, r3, r2, r0
   bc17a:	3a10      	subs	r2, #16
   bc17c:	e7d4      	b.n	bc128 <__gethex+0x100>
   bc17e:	4631      	mov	r1, r6
   bc180:	e7df      	b.n	bc142 <__gethex+0x11a>
   bc182:	1bf3      	subs	r3, r6, r7
   bc184:	3b01      	subs	r3, #1
   bc186:	4621      	mov	r1, r4
   bc188:	2b07      	cmp	r3, #7
   bc18a:	dc0b      	bgt.n	bc1a4 <__gethex+0x17c>
   bc18c:	ee18 0a10 	vmov	r0, s16
   bc190:	f000 fa68 	bl	bc664 <_Balloc>
   bc194:	4604      	mov	r4, r0
   bc196:	b940      	cbnz	r0, bc1aa <__gethex+0x182>
   bc198:	4b5d      	ldr	r3, [pc, #372]	; (bc310 <__gethex+0x2e8>)
   bc19a:	4602      	mov	r2, r0
   bc19c:	21de      	movs	r1, #222	; 0xde
   bc19e:	485d      	ldr	r0, [pc, #372]	; (bc314 <__gethex+0x2ec>)
   bc1a0:	f7fb fbf2 	bl	b7988 <__assert_func>
   bc1a4:	3101      	adds	r1, #1
   bc1a6:	105b      	asrs	r3, r3, #1
   bc1a8:	e7ee      	b.n	bc188 <__gethex+0x160>
   bc1aa:	f100 0914 	add.w	r9, r0, #20
   bc1ae:	f04f 0b00 	mov.w	fp, #0
   bc1b2:	f1ca 0301 	rsb	r3, sl, #1
   bc1b6:	f8cd 9008 	str.w	r9, [sp, #8]
   bc1ba:	f8cd b000 	str.w	fp, [sp]
   bc1be:	9306      	str	r3, [sp, #24]
   bc1c0:	42b7      	cmp	r7, r6
   bc1c2:	d340      	bcc.n	bc246 <__gethex+0x21e>
   bc1c4:	9802      	ldr	r0, [sp, #8]
   bc1c6:	9b00      	ldr	r3, [sp, #0]
   bc1c8:	f840 3b04 	str.w	r3, [r0], #4
   bc1cc:	eba0 0009 	sub.w	r0, r0, r9
   bc1d0:	1080      	asrs	r0, r0, #2
   bc1d2:	0146      	lsls	r6, r0, #5
   bc1d4:	6120      	str	r0, [r4, #16]
   bc1d6:	4618      	mov	r0, r3
   bc1d8:	f000 fb36 	bl	bc848 <__hi0bits>
   bc1dc:	1a30      	subs	r0, r6, r0
   bc1de:	f8d8 6000 	ldr.w	r6, [r8]
   bc1e2:	42b0      	cmp	r0, r6
   bc1e4:	dd63      	ble.n	bc2ae <__gethex+0x286>
   bc1e6:	1b87      	subs	r7, r0, r6
   bc1e8:	4639      	mov	r1, r7
   bc1ea:	4620      	mov	r0, r4
   bc1ec:	f000 feda 	bl	bcfa4 <__any_on>
   bc1f0:	4682      	mov	sl, r0
   bc1f2:	b1a8      	cbz	r0, bc220 <__gethex+0x1f8>
   bc1f4:	1e7b      	subs	r3, r7, #1
   bc1f6:	1159      	asrs	r1, r3, #5
   bc1f8:	f003 021f 	and.w	r2, r3, #31
   bc1fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bc200:	f04f 0a01 	mov.w	sl, #1
   bc204:	fa0a f202 	lsl.w	r2, sl, r2
   bc208:	420a      	tst	r2, r1
   bc20a:	d009      	beq.n	bc220 <__gethex+0x1f8>
   bc20c:	4553      	cmp	r3, sl
   bc20e:	dd05      	ble.n	bc21c <__gethex+0x1f4>
   bc210:	1eb9      	subs	r1, r7, #2
   bc212:	4620      	mov	r0, r4
   bc214:	f000 fec6 	bl	bcfa4 <__any_on>
   bc218:	2800      	cmp	r0, #0
   bc21a:	d145      	bne.n	bc2a8 <__gethex+0x280>
   bc21c:	f04f 0a02 	mov.w	sl, #2
   bc220:	4639      	mov	r1, r7
   bc222:	4620      	mov	r0, r4
   bc224:	f7ff fe98 	bl	bbf58 <rshift>
   bc228:	443d      	add	r5, r7
   bc22a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc22e:	42ab      	cmp	r3, r5
   bc230:	da4c      	bge.n	bc2cc <__gethex+0x2a4>
   bc232:	ee18 0a10 	vmov	r0, s16
   bc236:	4621      	mov	r1, r4
   bc238:	f000 fa54 	bl	bc6e4 <_Bfree>
   bc23c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc23e:	2300      	movs	r3, #0
   bc240:	6013      	str	r3, [r2, #0]
   bc242:	27a3      	movs	r7, #163	; 0xa3
   bc244:	e785      	b.n	bc152 <__gethex+0x12a>
   bc246:	1e73      	subs	r3, r6, #1
   bc248:	9a05      	ldr	r2, [sp, #20]
   bc24a:	9303      	str	r3, [sp, #12]
   bc24c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bc250:	4293      	cmp	r3, r2
   bc252:	d019      	beq.n	bc288 <__gethex+0x260>
   bc254:	f1bb 0f20 	cmp.w	fp, #32
   bc258:	d107      	bne.n	bc26a <__gethex+0x242>
   bc25a:	9b02      	ldr	r3, [sp, #8]
   bc25c:	9a00      	ldr	r2, [sp, #0]
   bc25e:	f843 2b04 	str.w	r2, [r3], #4
   bc262:	9302      	str	r3, [sp, #8]
   bc264:	2300      	movs	r3, #0
   bc266:	9300      	str	r3, [sp, #0]
   bc268:	469b      	mov	fp, r3
   bc26a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bc26e:	f7ff fec5 	bl	bbffc <__hexdig_fun>
   bc272:	9b00      	ldr	r3, [sp, #0]
   bc274:	f000 000f 	and.w	r0, r0, #15
   bc278:	fa00 f00b 	lsl.w	r0, r0, fp
   bc27c:	4303      	orrs	r3, r0
   bc27e:	9300      	str	r3, [sp, #0]
   bc280:	f10b 0b04 	add.w	fp, fp, #4
   bc284:	9b03      	ldr	r3, [sp, #12]
   bc286:	e00d      	b.n	bc2a4 <__gethex+0x27c>
   bc288:	9b03      	ldr	r3, [sp, #12]
   bc28a:	9a06      	ldr	r2, [sp, #24]
   bc28c:	4413      	add	r3, r2
   bc28e:	42bb      	cmp	r3, r7
   bc290:	d3e0      	bcc.n	bc254 <__gethex+0x22c>
   bc292:	4618      	mov	r0, r3
   bc294:	9901      	ldr	r1, [sp, #4]
   bc296:	9307      	str	r3, [sp, #28]
   bc298:	4652      	mov	r2, sl
   bc29a:	f7fe ff0b 	bl	bb0b4 <strncmp>
   bc29e:	9b07      	ldr	r3, [sp, #28]
   bc2a0:	2800      	cmp	r0, #0
   bc2a2:	d1d7      	bne.n	bc254 <__gethex+0x22c>
   bc2a4:	461e      	mov	r6, r3
   bc2a6:	e78b      	b.n	bc1c0 <__gethex+0x198>
   bc2a8:	f04f 0a03 	mov.w	sl, #3
   bc2ac:	e7b8      	b.n	bc220 <__gethex+0x1f8>
   bc2ae:	da0a      	bge.n	bc2c6 <__gethex+0x29e>
   bc2b0:	1a37      	subs	r7, r6, r0
   bc2b2:	4621      	mov	r1, r4
   bc2b4:	ee18 0a10 	vmov	r0, s16
   bc2b8:	463a      	mov	r2, r7
   bc2ba:	f000 fc2f 	bl	bcb1c <__lshift>
   bc2be:	1bed      	subs	r5, r5, r7
   bc2c0:	4604      	mov	r4, r0
   bc2c2:	f100 0914 	add.w	r9, r0, #20
   bc2c6:	f04f 0a00 	mov.w	sl, #0
   bc2ca:	e7ae      	b.n	bc22a <__gethex+0x202>
   bc2cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bc2d0:	42a8      	cmp	r0, r5
   bc2d2:	dd72      	ble.n	bc3ba <__gethex+0x392>
   bc2d4:	1b45      	subs	r5, r0, r5
   bc2d6:	42ae      	cmp	r6, r5
   bc2d8:	dc36      	bgt.n	bc348 <__gethex+0x320>
   bc2da:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc2de:	2b02      	cmp	r3, #2
   bc2e0:	d02a      	beq.n	bc338 <__gethex+0x310>
   bc2e2:	2b03      	cmp	r3, #3
   bc2e4:	d02c      	beq.n	bc340 <__gethex+0x318>
   bc2e6:	2b01      	cmp	r3, #1
   bc2e8:	d11c      	bne.n	bc324 <__gethex+0x2fc>
   bc2ea:	42ae      	cmp	r6, r5
   bc2ec:	d11a      	bne.n	bc324 <__gethex+0x2fc>
   bc2ee:	2e01      	cmp	r6, #1
   bc2f0:	d112      	bne.n	bc318 <__gethex+0x2f0>
   bc2f2:	9a04      	ldr	r2, [sp, #16]
   bc2f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bc2f8:	6013      	str	r3, [r2, #0]
   bc2fa:	2301      	movs	r3, #1
   bc2fc:	6123      	str	r3, [r4, #16]
   bc2fe:	f8c9 3000 	str.w	r3, [r9]
   bc302:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc304:	2762      	movs	r7, #98	; 0x62
   bc306:	601c      	str	r4, [r3, #0]
   bc308:	e723      	b.n	bc152 <__gethex+0x12a>
   bc30a:	bf00      	nop
   bc30c:	000bdc14 	.word	0x000bdc14
   bc310:	000bdba1 	.word	0x000bdba1
   bc314:	000bdbb2 	.word	0x000bdbb2
   bc318:	1e71      	subs	r1, r6, #1
   bc31a:	4620      	mov	r0, r4
   bc31c:	f000 fe42 	bl	bcfa4 <__any_on>
   bc320:	2800      	cmp	r0, #0
   bc322:	d1e6      	bne.n	bc2f2 <__gethex+0x2ca>
   bc324:	ee18 0a10 	vmov	r0, s16
   bc328:	4621      	mov	r1, r4
   bc32a:	f000 f9db 	bl	bc6e4 <_Bfree>
   bc32e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc330:	2300      	movs	r3, #0
   bc332:	6013      	str	r3, [r2, #0]
   bc334:	2750      	movs	r7, #80	; 0x50
   bc336:	e70c      	b.n	bc152 <__gethex+0x12a>
   bc338:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc33a:	2b00      	cmp	r3, #0
   bc33c:	d1f2      	bne.n	bc324 <__gethex+0x2fc>
   bc33e:	e7d8      	b.n	bc2f2 <__gethex+0x2ca>
   bc340:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc342:	2b00      	cmp	r3, #0
   bc344:	d1d5      	bne.n	bc2f2 <__gethex+0x2ca>
   bc346:	e7ed      	b.n	bc324 <__gethex+0x2fc>
   bc348:	1e6f      	subs	r7, r5, #1
   bc34a:	f1ba 0f00 	cmp.w	sl, #0
   bc34e:	d131      	bne.n	bc3b4 <__gethex+0x38c>
   bc350:	b127      	cbz	r7, bc35c <__gethex+0x334>
   bc352:	4639      	mov	r1, r7
   bc354:	4620      	mov	r0, r4
   bc356:	f000 fe25 	bl	bcfa4 <__any_on>
   bc35a:	4682      	mov	sl, r0
   bc35c:	117b      	asrs	r3, r7, #5
   bc35e:	2101      	movs	r1, #1
   bc360:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bc364:	f007 071f 	and.w	r7, r7, #31
   bc368:	fa01 f707 	lsl.w	r7, r1, r7
   bc36c:	421f      	tst	r7, r3
   bc36e:	4629      	mov	r1, r5
   bc370:	4620      	mov	r0, r4
   bc372:	bf18      	it	ne
   bc374:	f04a 0a02 	orrne.w	sl, sl, #2
   bc378:	1b76      	subs	r6, r6, r5
   bc37a:	f7ff fded 	bl	bbf58 <rshift>
   bc37e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bc382:	2702      	movs	r7, #2
   bc384:	f1ba 0f00 	cmp.w	sl, #0
   bc388:	d048      	beq.n	bc41c <__gethex+0x3f4>
   bc38a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bc38e:	2b02      	cmp	r3, #2
   bc390:	d015      	beq.n	bc3be <__gethex+0x396>
   bc392:	2b03      	cmp	r3, #3
   bc394:	d017      	beq.n	bc3c6 <__gethex+0x39e>
   bc396:	2b01      	cmp	r3, #1
   bc398:	d109      	bne.n	bc3ae <__gethex+0x386>
   bc39a:	f01a 0f02 	tst.w	sl, #2
   bc39e:	d006      	beq.n	bc3ae <__gethex+0x386>
   bc3a0:	f8d9 0000 	ldr.w	r0, [r9]
   bc3a4:	ea4a 0a00 	orr.w	sl, sl, r0
   bc3a8:	f01a 0f01 	tst.w	sl, #1
   bc3ac:	d10e      	bne.n	bc3cc <__gethex+0x3a4>
   bc3ae:	f047 0710 	orr.w	r7, r7, #16
   bc3b2:	e033      	b.n	bc41c <__gethex+0x3f4>
   bc3b4:	f04f 0a01 	mov.w	sl, #1
   bc3b8:	e7d0      	b.n	bc35c <__gethex+0x334>
   bc3ba:	2701      	movs	r7, #1
   bc3bc:	e7e2      	b.n	bc384 <__gethex+0x35c>
   bc3be:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc3c0:	f1c3 0301 	rsb	r3, r3, #1
   bc3c4:	9315      	str	r3, [sp, #84]	; 0x54
   bc3c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bc3c8:	2b00      	cmp	r3, #0
   bc3ca:	d0f0      	beq.n	bc3ae <__gethex+0x386>
   bc3cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bc3d0:	f104 0314 	add.w	r3, r4, #20
   bc3d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bc3d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bc3dc:	f04f 0c00 	mov.w	ip, #0
   bc3e0:	4618      	mov	r0, r3
   bc3e2:	f853 2b04 	ldr.w	r2, [r3], #4
   bc3e6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bc3ea:	d01c      	beq.n	bc426 <__gethex+0x3fe>
   bc3ec:	3201      	adds	r2, #1
   bc3ee:	6002      	str	r2, [r0, #0]
   bc3f0:	2f02      	cmp	r7, #2
   bc3f2:	f104 0314 	add.w	r3, r4, #20
   bc3f6:	d13f      	bne.n	bc478 <__gethex+0x450>
   bc3f8:	f8d8 2000 	ldr.w	r2, [r8]
   bc3fc:	3a01      	subs	r2, #1
   bc3fe:	42b2      	cmp	r2, r6
   bc400:	d10a      	bne.n	bc418 <__gethex+0x3f0>
   bc402:	1171      	asrs	r1, r6, #5
   bc404:	2201      	movs	r2, #1
   bc406:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bc40a:	f006 061f 	and.w	r6, r6, #31
   bc40e:	fa02 f606 	lsl.w	r6, r2, r6
   bc412:	421e      	tst	r6, r3
   bc414:	bf18      	it	ne
   bc416:	4617      	movne	r7, r2
   bc418:	f047 0720 	orr.w	r7, r7, #32
   bc41c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bc41e:	601c      	str	r4, [r3, #0]
   bc420:	9b04      	ldr	r3, [sp, #16]
   bc422:	601d      	str	r5, [r3, #0]
   bc424:	e695      	b.n	bc152 <__gethex+0x12a>
   bc426:	4299      	cmp	r1, r3
   bc428:	f843 cc04 	str.w	ip, [r3, #-4]
   bc42c:	d8d8      	bhi.n	bc3e0 <__gethex+0x3b8>
   bc42e:	68a3      	ldr	r3, [r4, #8]
   bc430:	459b      	cmp	fp, r3
   bc432:	db19      	blt.n	bc468 <__gethex+0x440>
   bc434:	6861      	ldr	r1, [r4, #4]
   bc436:	ee18 0a10 	vmov	r0, s16
   bc43a:	3101      	adds	r1, #1
   bc43c:	f000 f912 	bl	bc664 <_Balloc>
   bc440:	4681      	mov	r9, r0
   bc442:	b918      	cbnz	r0, bc44c <__gethex+0x424>
   bc444:	4b1a      	ldr	r3, [pc, #104]	; (bc4b0 <__gethex+0x488>)
   bc446:	4602      	mov	r2, r0
   bc448:	2184      	movs	r1, #132	; 0x84
   bc44a:	e6a8      	b.n	bc19e <__gethex+0x176>
   bc44c:	6922      	ldr	r2, [r4, #16]
   bc44e:	3202      	adds	r2, #2
   bc450:	f104 010c 	add.w	r1, r4, #12
   bc454:	0092      	lsls	r2, r2, #2
   bc456:	300c      	adds	r0, #12
   bc458:	f7fe fdb3 	bl	bafc2 <memcpy>
   bc45c:	4621      	mov	r1, r4
   bc45e:	ee18 0a10 	vmov	r0, s16
   bc462:	f000 f93f 	bl	bc6e4 <_Bfree>
   bc466:	464c      	mov	r4, r9
   bc468:	6923      	ldr	r3, [r4, #16]
   bc46a:	1c5a      	adds	r2, r3, #1
   bc46c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bc470:	6122      	str	r2, [r4, #16]
   bc472:	2201      	movs	r2, #1
   bc474:	615a      	str	r2, [r3, #20]
   bc476:	e7bb      	b.n	bc3f0 <__gethex+0x3c8>
   bc478:	6922      	ldr	r2, [r4, #16]
   bc47a:	455a      	cmp	r2, fp
   bc47c:	dd0b      	ble.n	bc496 <__gethex+0x46e>
   bc47e:	2101      	movs	r1, #1
   bc480:	4620      	mov	r0, r4
   bc482:	f7ff fd69 	bl	bbf58 <rshift>
   bc486:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bc48a:	3501      	adds	r5, #1
   bc48c:	42ab      	cmp	r3, r5
   bc48e:	f6ff aed0 	blt.w	bc232 <__gethex+0x20a>
   bc492:	2701      	movs	r7, #1
   bc494:	e7c0      	b.n	bc418 <__gethex+0x3f0>
   bc496:	f016 061f 	ands.w	r6, r6, #31
   bc49a:	d0fa      	beq.n	bc492 <__gethex+0x46a>
   bc49c:	4453      	add	r3, sl
   bc49e:	f1c6 0620 	rsb	r6, r6, #32
   bc4a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bc4a6:	f000 f9cf 	bl	bc848 <__hi0bits>
   bc4aa:	42b0      	cmp	r0, r6
   bc4ac:	dbe7      	blt.n	bc47e <__gethex+0x456>
   bc4ae:	e7f0      	b.n	bc492 <__gethex+0x46a>
   bc4b0:	000bdba1 	.word	0x000bdba1

000bc4b4 <L_shift>:
   bc4b4:	f1c2 0208 	rsb	r2, r2, #8
   bc4b8:	0092      	lsls	r2, r2, #2
   bc4ba:	b570      	push	{r4, r5, r6, lr}
   bc4bc:	f1c2 0620 	rsb	r6, r2, #32
   bc4c0:	6843      	ldr	r3, [r0, #4]
   bc4c2:	6804      	ldr	r4, [r0, #0]
   bc4c4:	fa03 f506 	lsl.w	r5, r3, r6
   bc4c8:	432c      	orrs	r4, r5
   bc4ca:	40d3      	lsrs	r3, r2
   bc4cc:	6004      	str	r4, [r0, #0]
   bc4ce:	f840 3f04 	str.w	r3, [r0, #4]!
   bc4d2:	4288      	cmp	r0, r1
   bc4d4:	d3f4      	bcc.n	bc4c0 <L_shift+0xc>
   bc4d6:	bd70      	pop	{r4, r5, r6, pc}

000bc4d8 <__match>:
   bc4d8:	b530      	push	{r4, r5, lr}
   bc4da:	6803      	ldr	r3, [r0, #0]
   bc4dc:	3301      	adds	r3, #1
   bc4de:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc4e2:	b914      	cbnz	r4, bc4ea <__match+0x12>
   bc4e4:	6003      	str	r3, [r0, #0]
   bc4e6:	2001      	movs	r0, #1
   bc4e8:	bd30      	pop	{r4, r5, pc}
   bc4ea:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc4ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bc4f2:	2d19      	cmp	r5, #25
   bc4f4:	bf98      	it	ls
   bc4f6:	3220      	addls	r2, #32
   bc4f8:	42a2      	cmp	r2, r4
   bc4fa:	d0f0      	beq.n	bc4de <__match+0x6>
   bc4fc:	2000      	movs	r0, #0
   bc4fe:	e7f3      	b.n	bc4e8 <__match+0x10>

000bc500 <__hexnan>:
   bc500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc504:	680b      	ldr	r3, [r1, #0]
   bc506:	115e      	asrs	r6, r3, #5
   bc508:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bc50c:	f013 031f 	ands.w	r3, r3, #31
   bc510:	b087      	sub	sp, #28
   bc512:	bf18      	it	ne
   bc514:	3604      	addne	r6, #4
   bc516:	2500      	movs	r5, #0
   bc518:	1f37      	subs	r7, r6, #4
   bc51a:	4690      	mov	r8, r2
   bc51c:	6802      	ldr	r2, [r0, #0]
   bc51e:	9301      	str	r3, [sp, #4]
   bc520:	4682      	mov	sl, r0
   bc522:	f846 5c04 	str.w	r5, [r6, #-4]
   bc526:	46b9      	mov	r9, r7
   bc528:	463c      	mov	r4, r7
   bc52a:	9502      	str	r5, [sp, #8]
   bc52c:	46ab      	mov	fp, r5
   bc52e:	7851      	ldrb	r1, [r2, #1]
   bc530:	1c53      	adds	r3, r2, #1
   bc532:	9303      	str	r3, [sp, #12]
   bc534:	b341      	cbz	r1, bc588 <__hexnan+0x88>
   bc536:	4608      	mov	r0, r1
   bc538:	9205      	str	r2, [sp, #20]
   bc53a:	9104      	str	r1, [sp, #16]
   bc53c:	f7ff fd5e 	bl	bbffc <__hexdig_fun>
   bc540:	2800      	cmp	r0, #0
   bc542:	d14f      	bne.n	bc5e4 <__hexnan+0xe4>
   bc544:	9904      	ldr	r1, [sp, #16]
   bc546:	9a05      	ldr	r2, [sp, #20]
   bc548:	2920      	cmp	r1, #32
   bc54a:	d818      	bhi.n	bc57e <__hexnan+0x7e>
   bc54c:	9b02      	ldr	r3, [sp, #8]
   bc54e:	459b      	cmp	fp, r3
   bc550:	dd13      	ble.n	bc57a <__hexnan+0x7a>
   bc552:	454c      	cmp	r4, r9
   bc554:	d206      	bcs.n	bc564 <__hexnan+0x64>
   bc556:	2d07      	cmp	r5, #7
   bc558:	dc04      	bgt.n	bc564 <__hexnan+0x64>
   bc55a:	462a      	mov	r2, r5
   bc55c:	4649      	mov	r1, r9
   bc55e:	4620      	mov	r0, r4
   bc560:	f7ff ffa8 	bl	bc4b4 <L_shift>
   bc564:	4544      	cmp	r4, r8
   bc566:	d950      	bls.n	bc60a <__hexnan+0x10a>
   bc568:	2300      	movs	r3, #0
   bc56a:	f1a4 0904 	sub.w	r9, r4, #4
   bc56e:	f844 3c04 	str.w	r3, [r4, #-4]
   bc572:	f8cd b008 	str.w	fp, [sp, #8]
   bc576:	464c      	mov	r4, r9
   bc578:	461d      	mov	r5, r3
   bc57a:	9a03      	ldr	r2, [sp, #12]
   bc57c:	e7d7      	b.n	bc52e <__hexnan+0x2e>
   bc57e:	2929      	cmp	r1, #41	; 0x29
   bc580:	d156      	bne.n	bc630 <__hexnan+0x130>
   bc582:	3202      	adds	r2, #2
   bc584:	f8ca 2000 	str.w	r2, [sl]
   bc588:	f1bb 0f00 	cmp.w	fp, #0
   bc58c:	d050      	beq.n	bc630 <__hexnan+0x130>
   bc58e:	454c      	cmp	r4, r9
   bc590:	d206      	bcs.n	bc5a0 <__hexnan+0xa0>
   bc592:	2d07      	cmp	r5, #7
   bc594:	dc04      	bgt.n	bc5a0 <__hexnan+0xa0>
   bc596:	462a      	mov	r2, r5
   bc598:	4649      	mov	r1, r9
   bc59a:	4620      	mov	r0, r4
   bc59c:	f7ff ff8a 	bl	bc4b4 <L_shift>
   bc5a0:	4544      	cmp	r4, r8
   bc5a2:	d934      	bls.n	bc60e <__hexnan+0x10e>
   bc5a4:	f1a8 0204 	sub.w	r2, r8, #4
   bc5a8:	4623      	mov	r3, r4
   bc5aa:	f853 1b04 	ldr.w	r1, [r3], #4
   bc5ae:	f842 1f04 	str.w	r1, [r2, #4]!
   bc5b2:	429f      	cmp	r7, r3
   bc5b4:	d2f9      	bcs.n	bc5aa <__hexnan+0xaa>
   bc5b6:	1b3b      	subs	r3, r7, r4
   bc5b8:	f023 0303 	bic.w	r3, r3, #3
   bc5bc:	3304      	adds	r3, #4
   bc5be:	3401      	adds	r4, #1
   bc5c0:	3e03      	subs	r6, #3
   bc5c2:	42b4      	cmp	r4, r6
   bc5c4:	bf88      	it	hi
   bc5c6:	2304      	movhi	r3, #4
   bc5c8:	4443      	add	r3, r8
   bc5ca:	2200      	movs	r2, #0
   bc5cc:	f843 2b04 	str.w	r2, [r3], #4
   bc5d0:	429f      	cmp	r7, r3
   bc5d2:	d2fb      	bcs.n	bc5cc <__hexnan+0xcc>
   bc5d4:	683b      	ldr	r3, [r7, #0]
   bc5d6:	b91b      	cbnz	r3, bc5e0 <__hexnan+0xe0>
   bc5d8:	4547      	cmp	r7, r8
   bc5da:	d127      	bne.n	bc62c <__hexnan+0x12c>
   bc5dc:	2301      	movs	r3, #1
   bc5de:	603b      	str	r3, [r7, #0]
   bc5e0:	2005      	movs	r0, #5
   bc5e2:	e026      	b.n	bc632 <__hexnan+0x132>
   bc5e4:	3501      	adds	r5, #1
   bc5e6:	2d08      	cmp	r5, #8
   bc5e8:	f10b 0b01 	add.w	fp, fp, #1
   bc5ec:	dd06      	ble.n	bc5fc <__hexnan+0xfc>
   bc5ee:	4544      	cmp	r4, r8
   bc5f0:	d9c3      	bls.n	bc57a <__hexnan+0x7a>
   bc5f2:	2300      	movs	r3, #0
   bc5f4:	f844 3c04 	str.w	r3, [r4, #-4]
   bc5f8:	2501      	movs	r5, #1
   bc5fa:	3c04      	subs	r4, #4
   bc5fc:	6822      	ldr	r2, [r4, #0]
   bc5fe:	f000 000f 	and.w	r0, r0, #15
   bc602:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bc606:	6022      	str	r2, [r4, #0]
   bc608:	e7b7      	b.n	bc57a <__hexnan+0x7a>
   bc60a:	2508      	movs	r5, #8
   bc60c:	e7b5      	b.n	bc57a <__hexnan+0x7a>
   bc60e:	9b01      	ldr	r3, [sp, #4]
   bc610:	2b00      	cmp	r3, #0
   bc612:	d0df      	beq.n	bc5d4 <__hexnan+0xd4>
   bc614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc618:	f1c3 0320 	rsb	r3, r3, #32
   bc61c:	fa22 f303 	lsr.w	r3, r2, r3
   bc620:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bc624:	401a      	ands	r2, r3
   bc626:	f846 2c04 	str.w	r2, [r6, #-4]
   bc62a:	e7d3      	b.n	bc5d4 <__hexnan+0xd4>
   bc62c:	3f04      	subs	r7, #4
   bc62e:	e7d1      	b.n	bc5d4 <__hexnan+0xd4>
   bc630:	2004      	movs	r0, #4
   bc632:	b007      	add	sp, #28
   bc634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc638 <__retarget_lock_acquire_recursive>:
   bc638:	4770      	bx	lr

000bc63a <__retarget_lock_release>:
   bc63a:	4770      	bx	lr

000bc63c <__retarget_lock_release_recursive>:
   bc63c:	4770      	bx	lr

000bc63e <__ascii_mbtowc>:
   bc63e:	b082      	sub	sp, #8
   bc640:	b901      	cbnz	r1, bc644 <__ascii_mbtowc+0x6>
   bc642:	a901      	add	r1, sp, #4
   bc644:	b142      	cbz	r2, bc658 <__ascii_mbtowc+0x1a>
   bc646:	b14b      	cbz	r3, bc65c <__ascii_mbtowc+0x1e>
   bc648:	7813      	ldrb	r3, [r2, #0]
   bc64a:	600b      	str	r3, [r1, #0]
   bc64c:	7812      	ldrb	r2, [r2, #0]
   bc64e:	1e10      	subs	r0, r2, #0
   bc650:	bf18      	it	ne
   bc652:	2001      	movne	r0, #1
   bc654:	b002      	add	sp, #8
   bc656:	4770      	bx	lr
   bc658:	4610      	mov	r0, r2
   bc65a:	e7fb      	b.n	bc654 <__ascii_mbtowc+0x16>
   bc65c:	f06f 0001 	mvn.w	r0, #1
   bc660:	e7f8      	b.n	bc654 <__ascii_mbtowc+0x16>
	...

000bc664 <_Balloc>:
   bc664:	b570      	push	{r4, r5, r6, lr}
   bc666:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bc668:	4604      	mov	r4, r0
   bc66a:	460d      	mov	r5, r1
   bc66c:	b976      	cbnz	r6, bc68c <_Balloc+0x28>
   bc66e:	2010      	movs	r0, #16
   bc670:	f7fb f94a 	bl	b7908 <malloc>
   bc674:	4602      	mov	r2, r0
   bc676:	6260      	str	r0, [r4, #36]	; 0x24
   bc678:	b920      	cbnz	r0, bc684 <_Balloc+0x20>
   bc67a:	4b18      	ldr	r3, [pc, #96]	; (bc6dc <_Balloc+0x78>)
   bc67c:	4818      	ldr	r0, [pc, #96]	; (bc6e0 <_Balloc+0x7c>)
   bc67e:	2166      	movs	r1, #102	; 0x66
   bc680:	f7fb f982 	bl	b7988 <__assert_func>
   bc684:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bc688:	6006      	str	r6, [r0, #0]
   bc68a:	60c6      	str	r6, [r0, #12]
   bc68c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bc68e:	68f3      	ldr	r3, [r6, #12]
   bc690:	b183      	cbz	r3, bc6b4 <_Balloc+0x50>
   bc692:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc694:	68db      	ldr	r3, [r3, #12]
   bc696:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bc69a:	b9b8      	cbnz	r0, bc6cc <_Balloc+0x68>
   bc69c:	2101      	movs	r1, #1
   bc69e:	fa01 f605 	lsl.w	r6, r1, r5
   bc6a2:	1d72      	adds	r2, r6, #5
   bc6a4:	0092      	lsls	r2, r2, #2
   bc6a6:	4620      	mov	r0, r4
   bc6a8:	f000 fc9d 	bl	bcfe6 <_calloc_r>
   bc6ac:	b160      	cbz	r0, bc6c8 <_Balloc+0x64>
   bc6ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bc6b2:	e00e      	b.n	bc6d2 <_Balloc+0x6e>
   bc6b4:	2221      	movs	r2, #33	; 0x21
   bc6b6:	2104      	movs	r1, #4
   bc6b8:	4620      	mov	r0, r4
   bc6ba:	f000 fc94 	bl	bcfe6 <_calloc_r>
   bc6be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc6c0:	60f0      	str	r0, [r6, #12]
   bc6c2:	68db      	ldr	r3, [r3, #12]
   bc6c4:	2b00      	cmp	r3, #0
   bc6c6:	d1e4      	bne.n	bc692 <_Balloc+0x2e>
   bc6c8:	2000      	movs	r0, #0
   bc6ca:	bd70      	pop	{r4, r5, r6, pc}
   bc6cc:	6802      	ldr	r2, [r0, #0]
   bc6ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bc6d2:	2300      	movs	r3, #0
   bc6d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bc6d8:	e7f7      	b.n	bc6ca <_Balloc+0x66>
   bc6da:	bf00      	nop
   bc6dc:	000bd9cd 	.word	0x000bd9cd
   bc6e0:	000bdc28 	.word	0x000bdc28

000bc6e4 <_Bfree>:
   bc6e4:	b570      	push	{r4, r5, r6, lr}
   bc6e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bc6e8:	4605      	mov	r5, r0
   bc6ea:	460c      	mov	r4, r1
   bc6ec:	b976      	cbnz	r6, bc70c <_Bfree+0x28>
   bc6ee:	2010      	movs	r0, #16
   bc6f0:	f7fb f90a 	bl	b7908 <malloc>
   bc6f4:	4602      	mov	r2, r0
   bc6f6:	6268      	str	r0, [r5, #36]	; 0x24
   bc6f8:	b920      	cbnz	r0, bc704 <_Bfree+0x20>
   bc6fa:	4b09      	ldr	r3, [pc, #36]	; (bc720 <_Bfree+0x3c>)
   bc6fc:	4809      	ldr	r0, [pc, #36]	; (bc724 <_Bfree+0x40>)
   bc6fe:	218a      	movs	r1, #138	; 0x8a
   bc700:	f7fb f942 	bl	b7988 <__assert_func>
   bc704:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bc708:	6006      	str	r6, [r0, #0]
   bc70a:	60c6      	str	r6, [r0, #12]
   bc70c:	b13c      	cbz	r4, bc71e <_Bfree+0x3a>
   bc70e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bc710:	6862      	ldr	r2, [r4, #4]
   bc712:	68db      	ldr	r3, [r3, #12]
   bc714:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bc718:	6021      	str	r1, [r4, #0]
   bc71a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bc71e:	bd70      	pop	{r4, r5, r6, pc}
   bc720:	000bd9cd 	.word	0x000bd9cd
   bc724:	000bdc28 	.word	0x000bdc28

000bc728 <__multadd>:
   bc728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc72c:	690d      	ldr	r5, [r1, #16]
   bc72e:	4607      	mov	r7, r0
   bc730:	460c      	mov	r4, r1
   bc732:	461e      	mov	r6, r3
   bc734:	f101 0c14 	add.w	ip, r1, #20
   bc738:	2000      	movs	r0, #0
   bc73a:	f8dc 3000 	ldr.w	r3, [ip]
   bc73e:	b299      	uxth	r1, r3
   bc740:	fb02 6101 	mla	r1, r2, r1, r6
   bc744:	0c1e      	lsrs	r6, r3, #16
   bc746:	0c0b      	lsrs	r3, r1, #16
   bc748:	fb02 3306 	mla	r3, r2, r6, r3
   bc74c:	b289      	uxth	r1, r1
   bc74e:	3001      	adds	r0, #1
   bc750:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bc754:	4285      	cmp	r5, r0
   bc756:	f84c 1b04 	str.w	r1, [ip], #4
   bc75a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bc75e:	dcec      	bgt.n	bc73a <__multadd+0x12>
   bc760:	b30e      	cbz	r6, bc7a6 <__multadd+0x7e>
   bc762:	68a3      	ldr	r3, [r4, #8]
   bc764:	42ab      	cmp	r3, r5
   bc766:	dc19      	bgt.n	bc79c <__multadd+0x74>
   bc768:	6861      	ldr	r1, [r4, #4]
   bc76a:	4638      	mov	r0, r7
   bc76c:	3101      	adds	r1, #1
   bc76e:	f7ff ff79 	bl	bc664 <_Balloc>
   bc772:	4680      	mov	r8, r0
   bc774:	b928      	cbnz	r0, bc782 <__multadd+0x5a>
   bc776:	4602      	mov	r2, r0
   bc778:	4b0c      	ldr	r3, [pc, #48]	; (bc7ac <__multadd+0x84>)
   bc77a:	480d      	ldr	r0, [pc, #52]	; (bc7b0 <__multadd+0x88>)
   bc77c:	21b5      	movs	r1, #181	; 0xb5
   bc77e:	f7fb f903 	bl	b7988 <__assert_func>
   bc782:	6922      	ldr	r2, [r4, #16]
   bc784:	3202      	adds	r2, #2
   bc786:	f104 010c 	add.w	r1, r4, #12
   bc78a:	0092      	lsls	r2, r2, #2
   bc78c:	300c      	adds	r0, #12
   bc78e:	f7fe fc18 	bl	bafc2 <memcpy>
   bc792:	4621      	mov	r1, r4
   bc794:	4638      	mov	r0, r7
   bc796:	f7ff ffa5 	bl	bc6e4 <_Bfree>
   bc79a:	4644      	mov	r4, r8
   bc79c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bc7a0:	3501      	adds	r5, #1
   bc7a2:	615e      	str	r6, [r3, #20]
   bc7a4:	6125      	str	r5, [r4, #16]
   bc7a6:	4620      	mov	r0, r4
   bc7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc7ac:	000bdba1 	.word	0x000bdba1
   bc7b0:	000bdc28 	.word	0x000bdc28

000bc7b4 <__s2b>:
   bc7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc7b8:	460c      	mov	r4, r1
   bc7ba:	4615      	mov	r5, r2
   bc7bc:	461f      	mov	r7, r3
   bc7be:	2209      	movs	r2, #9
   bc7c0:	3308      	adds	r3, #8
   bc7c2:	4606      	mov	r6, r0
   bc7c4:	fb93 f3f2 	sdiv	r3, r3, r2
   bc7c8:	2100      	movs	r1, #0
   bc7ca:	2201      	movs	r2, #1
   bc7cc:	429a      	cmp	r2, r3
   bc7ce:	db09      	blt.n	bc7e4 <__s2b+0x30>
   bc7d0:	4630      	mov	r0, r6
   bc7d2:	f7ff ff47 	bl	bc664 <_Balloc>
   bc7d6:	b940      	cbnz	r0, bc7ea <__s2b+0x36>
   bc7d8:	4602      	mov	r2, r0
   bc7da:	4b19      	ldr	r3, [pc, #100]	; (bc840 <__s2b+0x8c>)
   bc7dc:	4819      	ldr	r0, [pc, #100]	; (bc844 <__s2b+0x90>)
   bc7de:	21ce      	movs	r1, #206	; 0xce
   bc7e0:	f7fb f8d2 	bl	b7988 <__assert_func>
   bc7e4:	0052      	lsls	r2, r2, #1
   bc7e6:	3101      	adds	r1, #1
   bc7e8:	e7f0      	b.n	bc7cc <__s2b+0x18>
   bc7ea:	9b08      	ldr	r3, [sp, #32]
   bc7ec:	6143      	str	r3, [r0, #20]
   bc7ee:	2d09      	cmp	r5, #9
   bc7f0:	f04f 0301 	mov.w	r3, #1
   bc7f4:	6103      	str	r3, [r0, #16]
   bc7f6:	dd16      	ble.n	bc826 <__s2b+0x72>
   bc7f8:	f104 0909 	add.w	r9, r4, #9
   bc7fc:	46c8      	mov	r8, r9
   bc7fe:	442c      	add	r4, r5
   bc800:	f818 3b01 	ldrb.w	r3, [r8], #1
   bc804:	4601      	mov	r1, r0
   bc806:	3b30      	subs	r3, #48	; 0x30
   bc808:	220a      	movs	r2, #10
   bc80a:	4630      	mov	r0, r6
   bc80c:	f7ff ff8c 	bl	bc728 <__multadd>
   bc810:	45a0      	cmp	r8, r4
   bc812:	d1f5      	bne.n	bc800 <__s2b+0x4c>
   bc814:	f1a5 0408 	sub.w	r4, r5, #8
   bc818:	444c      	add	r4, r9
   bc81a:	1b2d      	subs	r5, r5, r4
   bc81c:	1963      	adds	r3, r4, r5
   bc81e:	42bb      	cmp	r3, r7
   bc820:	db04      	blt.n	bc82c <__s2b+0x78>
   bc822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc826:	340a      	adds	r4, #10
   bc828:	2509      	movs	r5, #9
   bc82a:	e7f6      	b.n	bc81a <__s2b+0x66>
   bc82c:	f814 3b01 	ldrb.w	r3, [r4], #1
   bc830:	4601      	mov	r1, r0
   bc832:	3b30      	subs	r3, #48	; 0x30
   bc834:	220a      	movs	r2, #10
   bc836:	4630      	mov	r0, r6
   bc838:	f7ff ff76 	bl	bc728 <__multadd>
   bc83c:	e7ee      	b.n	bc81c <__s2b+0x68>
   bc83e:	bf00      	nop
   bc840:	000bdba1 	.word	0x000bdba1
   bc844:	000bdc28 	.word	0x000bdc28

000bc848 <__hi0bits>:
   bc848:	0c03      	lsrs	r3, r0, #16
   bc84a:	041b      	lsls	r3, r3, #16
   bc84c:	b9d3      	cbnz	r3, bc884 <__hi0bits+0x3c>
   bc84e:	0400      	lsls	r0, r0, #16
   bc850:	2310      	movs	r3, #16
   bc852:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bc856:	bf04      	itt	eq
   bc858:	0200      	lsleq	r0, r0, #8
   bc85a:	3308      	addeq	r3, #8
   bc85c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bc860:	bf04      	itt	eq
   bc862:	0100      	lsleq	r0, r0, #4
   bc864:	3304      	addeq	r3, #4
   bc866:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bc86a:	bf04      	itt	eq
   bc86c:	0080      	lsleq	r0, r0, #2
   bc86e:	3302      	addeq	r3, #2
   bc870:	2800      	cmp	r0, #0
   bc872:	db05      	blt.n	bc880 <__hi0bits+0x38>
   bc874:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bc878:	f103 0301 	add.w	r3, r3, #1
   bc87c:	bf08      	it	eq
   bc87e:	2320      	moveq	r3, #32
   bc880:	4618      	mov	r0, r3
   bc882:	4770      	bx	lr
   bc884:	2300      	movs	r3, #0
   bc886:	e7e4      	b.n	bc852 <__hi0bits+0xa>

000bc888 <__lo0bits>:
   bc888:	6803      	ldr	r3, [r0, #0]
   bc88a:	f013 0207 	ands.w	r2, r3, #7
   bc88e:	4601      	mov	r1, r0
   bc890:	d00b      	beq.n	bc8aa <__lo0bits+0x22>
   bc892:	07da      	lsls	r2, r3, #31
   bc894:	d423      	bmi.n	bc8de <__lo0bits+0x56>
   bc896:	0798      	lsls	r0, r3, #30
   bc898:	bf49      	itett	mi
   bc89a:	085b      	lsrmi	r3, r3, #1
   bc89c:	089b      	lsrpl	r3, r3, #2
   bc89e:	2001      	movmi	r0, #1
   bc8a0:	600b      	strmi	r3, [r1, #0]
   bc8a2:	bf5c      	itt	pl
   bc8a4:	600b      	strpl	r3, [r1, #0]
   bc8a6:	2002      	movpl	r0, #2
   bc8a8:	4770      	bx	lr
   bc8aa:	b298      	uxth	r0, r3
   bc8ac:	b9a8      	cbnz	r0, bc8da <__lo0bits+0x52>
   bc8ae:	0c1b      	lsrs	r3, r3, #16
   bc8b0:	2010      	movs	r0, #16
   bc8b2:	b2da      	uxtb	r2, r3
   bc8b4:	b90a      	cbnz	r2, bc8ba <__lo0bits+0x32>
   bc8b6:	3008      	adds	r0, #8
   bc8b8:	0a1b      	lsrs	r3, r3, #8
   bc8ba:	071a      	lsls	r2, r3, #28
   bc8bc:	bf04      	itt	eq
   bc8be:	091b      	lsreq	r3, r3, #4
   bc8c0:	3004      	addeq	r0, #4
   bc8c2:	079a      	lsls	r2, r3, #30
   bc8c4:	bf04      	itt	eq
   bc8c6:	089b      	lsreq	r3, r3, #2
   bc8c8:	3002      	addeq	r0, #2
   bc8ca:	07da      	lsls	r2, r3, #31
   bc8cc:	d403      	bmi.n	bc8d6 <__lo0bits+0x4e>
   bc8ce:	085b      	lsrs	r3, r3, #1
   bc8d0:	f100 0001 	add.w	r0, r0, #1
   bc8d4:	d005      	beq.n	bc8e2 <__lo0bits+0x5a>
   bc8d6:	600b      	str	r3, [r1, #0]
   bc8d8:	4770      	bx	lr
   bc8da:	4610      	mov	r0, r2
   bc8dc:	e7e9      	b.n	bc8b2 <__lo0bits+0x2a>
   bc8de:	2000      	movs	r0, #0
   bc8e0:	4770      	bx	lr
   bc8e2:	2020      	movs	r0, #32
   bc8e4:	4770      	bx	lr
	...

000bc8e8 <__i2b>:
   bc8e8:	b510      	push	{r4, lr}
   bc8ea:	460c      	mov	r4, r1
   bc8ec:	2101      	movs	r1, #1
   bc8ee:	f7ff feb9 	bl	bc664 <_Balloc>
   bc8f2:	4602      	mov	r2, r0
   bc8f4:	b928      	cbnz	r0, bc902 <__i2b+0x1a>
   bc8f6:	4b05      	ldr	r3, [pc, #20]	; (bc90c <__i2b+0x24>)
   bc8f8:	4805      	ldr	r0, [pc, #20]	; (bc910 <__i2b+0x28>)
   bc8fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bc8fe:	f7fb f843 	bl	b7988 <__assert_func>
   bc902:	2301      	movs	r3, #1
   bc904:	6144      	str	r4, [r0, #20]
   bc906:	6103      	str	r3, [r0, #16]
   bc908:	bd10      	pop	{r4, pc}
   bc90a:	bf00      	nop
   bc90c:	000bdba1 	.word	0x000bdba1
   bc910:	000bdc28 	.word	0x000bdc28

000bc914 <__multiply>:
   bc914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc918:	4691      	mov	r9, r2
   bc91a:	690a      	ldr	r2, [r1, #16]
   bc91c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bc920:	429a      	cmp	r2, r3
   bc922:	bfb8      	it	lt
   bc924:	460b      	movlt	r3, r1
   bc926:	460c      	mov	r4, r1
   bc928:	bfbc      	itt	lt
   bc92a:	464c      	movlt	r4, r9
   bc92c:	4699      	movlt	r9, r3
   bc92e:	6927      	ldr	r7, [r4, #16]
   bc930:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bc934:	68a3      	ldr	r3, [r4, #8]
   bc936:	6861      	ldr	r1, [r4, #4]
   bc938:	eb07 060a 	add.w	r6, r7, sl
   bc93c:	42b3      	cmp	r3, r6
   bc93e:	b085      	sub	sp, #20
   bc940:	bfb8      	it	lt
   bc942:	3101      	addlt	r1, #1
   bc944:	f7ff fe8e 	bl	bc664 <_Balloc>
   bc948:	b930      	cbnz	r0, bc958 <__multiply+0x44>
   bc94a:	4602      	mov	r2, r0
   bc94c:	4b44      	ldr	r3, [pc, #272]	; (bca60 <__multiply+0x14c>)
   bc94e:	4845      	ldr	r0, [pc, #276]	; (bca64 <__multiply+0x150>)
   bc950:	f240 115d 	movw	r1, #349	; 0x15d
   bc954:	f7fb f818 	bl	b7988 <__assert_func>
   bc958:	f100 0514 	add.w	r5, r0, #20
   bc95c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bc960:	462b      	mov	r3, r5
   bc962:	2200      	movs	r2, #0
   bc964:	4543      	cmp	r3, r8
   bc966:	d321      	bcc.n	bc9ac <__multiply+0x98>
   bc968:	f104 0314 	add.w	r3, r4, #20
   bc96c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bc970:	f109 0314 	add.w	r3, r9, #20
   bc974:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bc978:	9202      	str	r2, [sp, #8]
   bc97a:	1b3a      	subs	r2, r7, r4
   bc97c:	3a15      	subs	r2, #21
   bc97e:	f022 0203 	bic.w	r2, r2, #3
   bc982:	3204      	adds	r2, #4
   bc984:	f104 0115 	add.w	r1, r4, #21
   bc988:	428f      	cmp	r7, r1
   bc98a:	bf38      	it	cc
   bc98c:	2204      	movcc	r2, #4
   bc98e:	9201      	str	r2, [sp, #4]
   bc990:	9a02      	ldr	r2, [sp, #8]
   bc992:	9303      	str	r3, [sp, #12]
   bc994:	429a      	cmp	r2, r3
   bc996:	d80c      	bhi.n	bc9b2 <__multiply+0x9e>
   bc998:	2e00      	cmp	r6, #0
   bc99a:	dd03      	ble.n	bc9a4 <__multiply+0x90>
   bc99c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bc9a0:	2b00      	cmp	r3, #0
   bc9a2:	d05a      	beq.n	bca5a <__multiply+0x146>
   bc9a4:	6106      	str	r6, [r0, #16]
   bc9a6:	b005      	add	sp, #20
   bc9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc9ac:	f843 2b04 	str.w	r2, [r3], #4
   bc9b0:	e7d8      	b.n	bc964 <__multiply+0x50>
   bc9b2:	f8b3 a000 	ldrh.w	sl, [r3]
   bc9b6:	f1ba 0f00 	cmp.w	sl, #0
   bc9ba:	d024      	beq.n	bca06 <__multiply+0xf2>
   bc9bc:	f104 0e14 	add.w	lr, r4, #20
   bc9c0:	46a9      	mov	r9, r5
   bc9c2:	f04f 0c00 	mov.w	ip, #0
   bc9c6:	f85e 2b04 	ldr.w	r2, [lr], #4
   bc9ca:	f8d9 1000 	ldr.w	r1, [r9]
   bc9ce:	fa1f fb82 	uxth.w	fp, r2
   bc9d2:	b289      	uxth	r1, r1
   bc9d4:	fb0a 110b 	mla	r1, sl, fp, r1
   bc9d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bc9dc:	f8d9 2000 	ldr.w	r2, [r9]
   bc9e0:	4461      	add	r1, ip
   bc9e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bc9e6:	fb0a c20b 	mla	r2, sl, fp, ip
   bc9ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bc9ee:	b289      	uxth	r1, r1
   bc9f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bc9f4:	4577      	cmp	r7, lr
   bc9f6:	f849 1b04 	str.w	r1, [r9], #4
   bc9fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bc9fe:	d8e2      	bhi.n	bc9c6 <__multiply+0xb2>
   bca00:	9a01      	ldr	r2, [sp, #4]
   bca02:	f845 c002 	str.w	ip, [r5, r2]
   bca06:	9a03      	ldr	r2, [sp, #12]
   bca08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bca0c:	3304      	adds	r3, #4
   bca0e:	f1b9 0f00 	cmp.w	r9, #0
   bca12:	d020      	beq.n	bca56 <__multiply+0x142>
   bca14:	6829      	ldr	r1, [r5, #0]
   bca16:	f104 0c14 	add.w	ip, r4, #20
   bca1a:	46ae      	mov	lr, r5
   bca1c:	f04f 0a00 	mov.w	sl, #0
   bca20:	f8bc b000 	ldrh.w	fp, [ip]
   bca24:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bca28:	fb09 220b 	mla	r2, r9, fp, r2
   bca2c:	4492      	add	sl, r2
   bca2e:	b289      	uxth	r1, r1
   bca30:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bca34:	f84e 1b04 	str.w	r1, [lr], #4
   bca38:	f85c 2b04 	ldr.w	r2, [ip], #4
   bca3c:	f8be 1000 	ldrh.w	r1, [lr]
   bca40:	0c12      	lsrs	r2, r2, #16
   bca42:	fb09 1102 	mla	r1, r9, r2, r1
   bca46:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bca4a:	4567      	cmp	r7, ip
   bca4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bca50:	d8e6      	bhi.n	bca20 <__multiply+0x10c>
   bca52:	9a01      	ldr	r2, [sp, #4]
   bca54:	50a9      	str	r1, [r5, r2]
   bca56:	3504      	adds	r5, #4
   bca58:	e79a      	b.n	bc990 <__multiply+0x7c>
   bca5a:	3e01      	subs	r6, #1
   bca5c:	e79c      	b.n	bc998 <__multiply+0x84>
   bca5e:	bf00      	nop
   bca60:	000bdba1 	.word	0x000bdba1
   bca64:	000bdc28 	.word	0x000bdc28

000bca68 <__pow5mult>:
   bca68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bca6c:	4615      	mov	r5, r2
   bca6e:	f012 0203 	ands.w	r2, r2, #3
   bca72:	4606      	mov	r6, r0
   bca74:	460f      	mov	r7, r1
   bca76:	d007      	beq.n	bca88 <__pow5mult+0x20>
   bca78:	4c25      	ldr	r4, [pc, #148]	; (bcb10 <__pow5mult+0xa8>)
   bca7a:	3a01      	subs	r2, #1
   bca7c:	2300      	movs	r3, #0
   bca7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bca82:	f7ff fe51 	bl	bc728 <__multadd>
   bca86:	4607      	mov	r7, r0
   bca88:	10ad      	asrs	r5, r5, #2
   bca8a:	d03d      	beq.n	bcb08 <__pow5mult+0xa0>
   bca8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bca8e:	b97c      	cbnz	r4, bcab0 <__pow5mult+0x48>
   bca90:	2010      	movs	r0, #16
   bca92:	f7fa ff39 	bl	b7908 <malloc>
   bca96:	4602      	mov	r2, r0
   bca98:	6270      	str	r0, [r6, #36]	; 0x24
   bca9a:	b928      	cbnz	r0, bcaa8 <__pow5mult+0x40>
   bca9c:	4b1d      	ldr	r3, [pc, #116]	; (bcb14 <__pow5mult+0xac>)
   bca9e:	481e      	ldr	r0, [pc, #120]	; (bcb18 <__pow5mult+0xb0>)
   bcaa0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bcaa4:	f7fa ff70 	bl	b7988 <__assert_func>
   bcaa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bcaac:	6004      	str	r4, [r0, #0]
   bcaae:	60c4      	str	r4, [r0, #12]
   bcab0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bcab4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bcab8:	b94c      	cbnz	r4, bcace <__pow5mult+0x66>
   bcaba:	f240 2171 	movw	r1, #625	; 0x271
   bcabe:	4630      	mov	r0, r6
   bcac0:	f7ff ff12 	bl	bc8e8 <__i2b>
   bcac4:	2300      	movs	r3, #0
   bcac6:	f8c8 0008 	str.w	r0, [r8, #8]
   bcaca:	4604      	mov	r4, r0
   bcacc:	6003      	str	r3, [r0, #0]
   bcace:	f04f 0900 	mov.w	r9, #0
   bcad2:	07eb      	lsls	r3, r5, #31
   bcad4:	d50a      	bpl.n	bcaec <__pow5mult+0x84>
   bcad6:	4639      	mov	r1, r7
   bcad8:	4622      	mov	r2, r4
   bcada:	4630      	mov	r0, r6
   bcadc:	f7ff ff1a 	bl	bc914 <__multiply>
   bcae0:	4639      	mov	r1, r7
   bcae2:	4680      	mov	r8, r0
   bcae4:	4630      	mov	r0, r6
   bcae6:	f7ff fdfd 	bl	bc6e4 <_Bfree>
   bcaea:	4647      	mov	r7, r8
   bcaec:	106d      	asrs	r5, r5, #1
   bcaee:	d00b      	beq.n	bcb08 <__pow5mult+0xa0>
   bcaf0:	6820      	ldr	r0, [r4, #0]
   bcaf2:	b938      	cbnz	r0, bcb04 <__pow5mult+0x9c>
   bcaf4:	4622      	mov	r2, r4
   bcaf6:	4621      	mov	r1, r4
   bcaf8:	4630      	mov	r0, r6
   bcafa:	f7ff ff0b 	bl	bc914 <__multiply>
   bcafe:	6020      	str	r0, [r4, #0]
   bcb00:	f8c0 9000 	str.w	r9, [r0]
   bcb04:	4604      	mov	r4, r0
   bcb06:	e7e4      	b.n	bcad2 <__pow5mult+0x6a>
   bcb08:	4638      	mov	r0, r7
   bcb0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bcb0e:	bf00      	nop
   bcb10:	000bdd78 	.word	0x000bdd78
   bcb14:	000bd9cd 	.word	0x000bd9cd
   bcb18:	000bdc28 	.word	0x000bdc28

000bcb1c <__lshift>:
   bcb1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bcb20:	460c      	mov	r4, r1
   bcb22:	6849      	ldr	r1, [r1, #4]
   bcb24:	6923      	ldr	r3, [r4, #16]
   bcb26:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bcb2a:	68a3      	ldr	r3, [r4, #8]
   bcb2c:	4607      	mov	r7, r0
   bcb2e:	4691      	mov	r9, r2
   bcb30:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bcb34:	f108 0601 	add.w	r6, r8, #1
   bcb38:	42b3      	cmp	r3, r6
   bcb3a:	db0b      	blt.n	bcb54 <__lshift+0x38>
   bcb3c:	4638      	mov	r0, r7
   bcb3e:	f7ff fd91 	bl	bc664 <_Balloc>
   bcb42:	4605      	mov	r5, r0
   bcb44:	b948      	cbnz	r0, bcb5a <__lshift+0x3e>
   bcb46:	4602      	mov	r2, r0
   bcb48:	4b2a      	ldr	r3, [pc, #168]	; (bcbf4 <__lshift+0xd8>)
   bcb4a:	482b      	ldr	r0, [pc, #172]	; (bcbf8 <__lshift+0xdc>)
   bcb4c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bcb50:	f7fa ff1a 	bl	b7988 <__assert_func>
   bcb54:	3101      	adds	r1, #1
   bcb56:	005b      	lsls	r3, r3, #1
   bcb58:	e7ee      	b.n	bcb38 <__lshift+0x1c>
   bcb5a:	2300      	movs	r3, #0
   bcb5c:	f100 0114 	add.w	r1, r0, #20
   bcb60:	f100 0210 	add.w	r2, r0, #16
   bcb64:	4618      	mov	r0, r3
   bcb66:	4553      	cmp	r3, sl
   bcb68:	db37      	blt.n	bcbda <__lshift+0xbe>
   bcb6a:	6920      	ldr	r0, [r4, #16]
   bcb6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bcb70:	f104 0314 	add.w	r3, r4, #20
   bcb74:	f019 091f 	ands.w	r9, r9, #31
   bcb78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bcb7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bcb80:	d02f      	beq.n	bcbe2 <__lshift+0xc6>
   bcb82:	f1c9 0e20 	rsb	lr, r9, #32
   bcb86:	468a      	mov	sl, r1
   bcb88:	f04f 0c00 	mov.w	ip, #0
   bcb8c:	681a      	ldr	r2, [r3, #0]
   bcb8e:	fa02 f209 	lsl.w	r2, r2, r9
   bcb92:	ea42 020c 	orr.w	r2, r2, ip
   bcb96:	f84a 2b04 	str.w	r2, [sl], #4
   bcb9a:	f853 2b04 	ldr.w	r2, [r3], #4
   bcb9e:	4298      	cmp	r0, r3
   bcba0:	fa22 fc0e 	lsr.w	ip, r2, lr
   bcba4:	d8f2      	bhi.n	bcb8c <__lshift+0x70>
   bcba6:	1b03      	subs	r3, r0, r4
   bcba8:	3b15      	subs	r3, #21
   bcbaa:	f023 0303 	bic.w	r3, r3, #3
   bcbae:	3304      	adds	r3, #4
   bcbb0:	f104 0215 	add.w	r2, r4, #21
   bcbb4:	4290      	cmp	r0, r2
   bcbb6:	bf38      	it	cc
   bcbb8:	2304      	movcc	r3, #4
   bcbba:	f841 c003 	str.w	ip, [r1, r3]
   bcbbe:	f1bc 0f00 	cmp.w	ip, #0
   bcbc2:	d001      	beq.n	bcbc8 <__lshift+0xac>
   bcbc4:	f108 0602 	add.w	r6, r8, #2
   bcbc8:	3e01      	subs	r6, #1
   bcbca:	4638      	mov	r0, r7
   bcbcc:	612e      	str	r6, [r5, #16]
   bcbce:	4621      	mov	r1, r4
   bcbd0:	f7ff fd88 	bl	bc6e4 <_Bfree>
   bcbd4:	4628      	mov	r0, r5
   bcbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bcbda:	f842 0f04 	str.w	r0, [r2, #4]!
   bcbde:	3301      	adds	r3, #1
   bcbe0:	e7c1      	b.n	bcb66 <__lshift+0x4a>
   bcbe2:	3904      	subs	r1, #4
   bcbe4:	f853 2b04 	ldr.w	r2, [r3], #4
   bcbe8:	f841 2f04 	str.w	r2, [r1, #4]!
   bcbec:	4298      	cmp	r0, r3
   bcbee:	d8f9      	bhi.n	bcbe4 <__lshift+0xc8>
   bcbf0:	e7ea      	b.n	bcbc8 <__lshift+0xac>
   bcbf2:	bf00      	nop
   bcbf4:	000bdba1 	.word	0x000bdba1
   bcbf8:	000bdc28 	.word	0x000bdc28

000bcbfc <__mcmp>:
   bcbfc:	b530      	push	{r4, r5, lr}
   bcbfe:	6902      	ldr	r2, [r0, #16]
   bcc00:	690c      	ldr	r4, [r1, #16]
   bcc02:	1b12      	subs	r2, r2, r4
   bcc04:	d10e      	bne.n	bcc24 <__mcmp+0x28>
   bcc06:	f100 0314 	add.w	r3, r0, #20
   bcc0a:	3114      	adds	r1, #20
   bcc0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bcc10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bcc14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bcc18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bcc1c:	42a5      	cmp	r5, r4
   bcc1e:	d003      	beq.n	bcc28 <__mcmp+0x2c>
   bcc20:	d305      	bcc.n	bcc2e <__mcmp+0x32>
   bcc22:	2201      	movs	r2, #1
   bcc24:	4610      	mov	r0, r2
   bcc26:	bd30      	pop	{r4, r5, pc}
   bcc28:	4283      	cmp	r3, r0
   bcc2a:	d3f3      	bcc.n	bcc14 <__mcmp+0x18>
   bcc2c:	e7fa      	b.n	bcc24 <__mcmp+0x28>
   bcc2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bcc32:	e7f7      	b.n	bcc24 <__mcmp+0x28>

000bcc34 <__mdiff>:
   bcc34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcc38:	460c      	mov	r4, r1
   bcc3a:	4606      	mov	r6, r0
   bcc3c:	4611      	mov	r1, r2
   bcc3e:	4620      	mov	r0, r4
   bcc40:	4690      	mov	r8, r2
   bcc42:	f7ff ffdb 	bl	bcbfc <__mcmp>
   bcc46:	1e05      	subs	r5, r0, #0
   bcc48:	d110      	bne.n	bcc6c <__mdiff+0x38>
   bcc4a:	4629      	mov	r1, r5
   bcc4c:	4630      	mov	r0, r6
   bcc4e:	f7ff fd09 	bl	bc664 <_Balloc>
   bcc52:	b930      	cbnz	r0, bcc62 <__mdiff+0x2e>
   bcc54:	4b3a      	ldr	r3, [pc, #232]	; (bcd40 <__mdiff+0x10c>)
   bcc56:	4602      	mov	r2, r0
   bcc58:	f240 2132 	movw	r1, #562	; 0x232
   bcc5c:	4839      	ldr	r0, [pc, #228]	; (bcd44 <__mdiff+0x110>)
   bcc5e:	f7fa fe93 	bl	b7988 <__assert_func>
   bcc62:	2301      	movs	r3, #1
   bcc64:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bcc68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bcc6c:	bfa4      	itt	ge
   bcc6e:	4643      	movge	r3, r8
   bcc70:	46a0      	movge	r8, r4
   bcc72:	4630      	mov	r0, r6
   bcc74:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bcc78:	bfa6      	itte	ge
   bcc7a:	461c      	movge	r4, r3
   bcc7c:	2500      	movge	r5, #0
   bcc7e:	2501      	movlt	r5, #1
   bcc80:	f7ff fcf0 	bl	bc664 <_Balloc>
   bcc84:	b920      	cbnz	r0, bcc90 <__mdiff+0x5c>
   bcc86:	4b2e      	ldr	r3, [pc, #184]	; (bcd40 <__mdiff+0x10c>)
   bcc88:	4602      	mov	r2, r0
   bcc8a:	f44f 7110 	mov.w	r1, #576	; 0x240
   bcc8e:	e7e5      	b.n	bcc5c <__mdiff+0x28>
   bcc90:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bcc94:	6926      	ldr	r6, [r4, #16]
   bcc96:	60c5      	str	r5, [r0, #12]
   bcc98:	f104 0914 	add.w	r9, r4, #20
   bcc9c:	f108 0514 	add.w	r5, r8, #20
   bcca0:	f100 0e14 	add.w	lr, r0, #20
   bcca4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bcca8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bccac:	f108 0210 	add.w	r2, r8, #16
   bccb0:	46f2      	mov	sl, lr
   bccb2:	2100      	movs	r1, #0
   bccb4:	f859 3b04 	ldr.w	r3, [r9], #4
   bccb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bccbc:	fa1f f883 	uxth.w	r8, r3
   bccc0:	fa11 f18b 	uxtah	r1, r1, fp
   bccc4:	0c1b      	lsrs	r3, r3, #16
   bccc6:	eba1 0808 	sub.w	r8, r1, r8
   bccca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bccce:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bccd2:	fa1f f888 	uxth.w	r8, r8
   bccd6:	1419      	asrs	r1, r3, #16
   bccd8:	454e      	cmp	r6, r9
   bccda:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bccde:	f84a 3b04 	str.w	r3, [sl], #4
   bcce2:	d8e7      	bhi.n	bccb4 <__mdiff+0x80>
   bcce4:	1b33      	subs	r3, r6, r4
   bcce6:	3b15      	subs	r3, #21
   bcce8:	f023 0303 	bic.w	r3, r3, #3
   bccec:	3304      	adds	r3, #4
   bccee:	3415      	adds	r4, #21
   bccf0:	42a6      	cmp	r6, r4
   bccf2:	bf38      	it	cc
   bccf4:	2304      	movcc	r3, #4
   bccf6:	441d      	add	r5, r3
   bccf8:	4473      	add	r3, lr
   bccfa:	469e      	mov	lr, r3
   bccfc:	462e      	mov	r6, r5
   bccfe:	4566      	cmp	r6, ip
   bcd00:	d30e      	bcc.n	bcd20 <__mdiff+0xec>
   bcd02:	f10c 0203 	add.w	r2, ip, #3
   bcd06:	1b52      	subs	r2, r2, r5
   bcd08:	f022 0203 	bic.w	r2, r2, #3
   bcd0c:	3d03      	subs	r5, #3
   bcd0e:	45ac      	cmp	ip, r5
   bcd10:	bf38      	it	cc
   bcd12:	2200      	movcc	r2, #0
   bcd14:	441a      	add	r2, r3
   bcd16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bcd1a:	b17b      	cbz	r3, bcd3c <__mdiff+0x108>
   bcd1c:	6107      	str	r7, [r0, #16]
   bcd1e:	e7a3      	b.n	bcc68 <__mdiff+0x34>
   bcd20:	f856 8b04 	ldr.w	r8, [r6], #4
   bcd24:	fa11 f288 	uxtah	r2, r1, r8
   bcd28:	1414      	asrs	r4, r2, #16
   bcd2a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bcd2e:	b292      	uxth	r2, r2
   bcd30:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bcd34:	f84e 2b04 	str.w	r2, [lr], #4
   bcd38:	1421      	asrs	r1, r4, #16
   bcd3a:	e7e0      	b.n	bccfe <__mdiff+0xca>
   bcd3c:	3f01      	subs	r7, #1
   bcd3e:	e7ea      	b.n	bcd16 <__mdiff+0xe2>
   bcd40:	000bdba1 	.word	0x000bdba1
   bcd44:	000bdc28 	.word	0x000bdc28

000bcd48 <__ulp>:
   bcd48:	b082      	sub	sp, #8
   bcd4a:	ed8d 0b00 	vstr	d0, [sp]
   bcd4e:	9b01      	ldr	r3, [sp, #4]
   bcd50:	4912      	ldr	r1, [pc, #72]	; (bcd9c <__ulp+0x54>)
   bcd52:	4019      	ands	r1, r3
   bcd54:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bcd58:	2900      	cmp	r1, #0
   bcd5a:	dd05      	ble.n	bcd68 <__ulp+0x20>
   bcd5c:	2200      	movs	r2, #0
   bcd5e:	460b      	mov	r3, r1
   bcd60:	ec43 2b10 	vmov	d0, r2, r3
   bcd64:	b002      	add	sp, #8
   bcd66:	4770      	bx	lr
   bcd68:	4249      	negs	r1, r1
   bcd6a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bcd6e:	ea4f 5021 	mov.w	r0, r1, asr #20
   bcd72:	f04f 0200 	mov.w	r2, #0
   bcd76:	f04f 0300 	mov.w	r3, #0
   bcd7a:	da04      	bge.n	bcd86 <__ulp+0x3e>
   bcd7c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bcd80:	fa41 f300 	asr.w	r3, r1, r0
   bcd84:	e7ec      	b.n	bcd60 <__ulp+0x18>
   bcd86:	f1a0 0114 	sub.w	r1, r0, #20
   bcd8a:	291e      	cmp	r1, #30
   bcd8c:	bfda      	itte	le
   bcd8e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bcd92:	fa20 f101 	lsrle.w	r1, r0, r1
   bcd96:	2101      	movgt	r1, #1
   bcd98:	460a      	mov	r2, r1
   bcd9a:	e7e1      	b.n	bcd60 <__ulp+0x18>
   bcd9c:	7ff00000 	.word	0x7ff00000

000bcda0 <__b2d>:
   bcda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bcda2:	6905      	ldr	r5, [r0, #16]
   bcda4:	f100 0714 	add.w	r7, r0, #20
   bcda8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bcdac:	1f2e      	subs	r6, r5, #4
   bcdae:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bcdb2:	4620      	mov	r0, r4
   bcdb4:	f7ff fd48 	bl	bc848 <__hi0bits>
   bcdb8:	f1c0 0320 	rsb	r3, r0, #32
   bcdbc:	280a      	cmp	r0, #10
   bcdbe:	f8df c07c 	ldr.w	ip, [pc, #124]	; bce3c <__b2d+0x9c>
   bcdc2:	600b      	str	r3, [r1, #0]
   bcdc4:	dc14      	bgt.n	bcdf0 <__b2d+0x50>
   bcdc6:	f1c0 0e0b 	rsb	lr, r0, #11
   bcdca:	fa24 f10e 	lsr.w	r1, r4, lr
   bcdce:	42b7      	cmp	r7, r6
   bcdd0:	ea41 030c 	orr.w	r3, r1, ip
   bcdd4:	bf34      	ite	cc
   bcdd6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bcdda:	2100      	movcs	r1, #0
   bcddc:	3015      	adds	r0, #21
   bcdde:	fa04 f000 	lsl.w	r0, r4, r0
   bcde2:	fa21 f10e 	lsr.w	r1, r1, lr
   bcde6:	ea40 0201 	orr.w	r2, r0, r1
   bcdea:	ec43 2b10 	vmov	d0, r2, r3
   bcdee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bcdf0:	42b7      	cmp	r7, r6
   bcdf2:	bf3a      	itte	cc
   bcdf4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bcdf8:	f1a5 0608 	subcc.w	r6, r5, #8
   bcdfc:	2100      	movcs	r1, #0
   bcdfe:	380b      	subs	r0, #11
   bce00:	d017      	beq.n	bce32 <__b2d+0x92>
   bce02:	f1c0 0c20 	rsb	ip, r0, #32
   bce06:	fa04 f500 	lsl.w	r5, r4, r0
   bce0a:	42be      	cmp	r6, r7
   bce0c:	fa21 f40c 	lsr.w	r4, r1, ip
   bce10:	ea45 0504 	orr.w	r5, r5, r4
   bce14:	bf8c      	ite	hi
   bce16:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bce1a:	2400      	movls	r4, #0
   bce1c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bce20:	fa01 f000 	lsl.w	r0, r1, r0
   bce24:	fa24 f40c 	lsr.w	r4, r4, ip
   bce28:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bce2c:	ea40 0204 	orr.w	r2, r0, r4
   bce30:	e7db      	b.n	bcdea <__b2d+0x4a>
   bce32:	ea44 030c 	orr.w	r3, r4, ip
   bce36:	460a      	mov	r2, r1
   bce38:	e7d7      	b.n	bcdea <__b2d+0x4a>
   bce3a:	bf00      	nop
   bce3c:	3ff00000 	.word	0x3ff00000

000bce40 <__d2b>:
   bce40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bce44:	4689      	mov	r9, r1
   bce46:	2101      	movs	r1, #1
   bce48:	ec57 6b10 	vmov	r6, r7, d0
   bce4c:	4690      	mov	r8, r2
   bce4e:	f7ff fc09 	bl	bc664 <_Balloc>
   bce52:	4604      	mov	r4, r0
   bce54:	b930      	cbnz	r0, bce64 <__d2b+0x24>
   bce56:	4602      	mov	r2, r0
   bce58:	4b25      	ldr	r3, [pc, #148]	; (bcef0 <__d2b+0xb0>)
   bce5a:	4826      	ldr	r0, [pc, #152]	; (bcef4 <__d2b+0xb4>)
   bce5c:	f240 310a 	movw	r1, #778	; 0x30a
   bce60:	f7fa fd92 	bl	b7988 <__assert_func>
   bce64:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bce68:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bce6c:	bb35      	cbnz	r5, bcebc <__d2b+0x7c>
   bce6e:	2e00      	cmp	r6, #0
   bce70:	9301      	str	r3, [sp, #4]
   bce72:	d028      	beq.n	bcec6 <__d2b+0x86>
   bce74:	4668      	mov	r0, sp
   bce76:	9600      	str	r6, [sp, #0]
   bce78:	f7ff fd06 	bl	bc888 <__lo0bits>
   bce7c:	9900      	ldr	r1, [sp, #0]
   bce7e:	b300      	cbz	r0, bcec2 <__d2b+0x82>
   bce80:	9a01      	ldr	r2, [sp, #4]
   bce82:	f1c0 0320 	rsb	r3, r0, #32
   bce86:	fa02 f303 	lsl.w	r3, r2, r3
   bce8a:	430b      	orrs	r3, r1
   bce8c:	40c2      	lsrs	r2, r0
   bce8e:	6163      	str	r3, [r4, #20]
   bce90:	9201      	str	r2, [sp, #4]
   bce92:	9b01      	ldr	r3, [sp, #4]
   bce94:	61a3      	str	r3, [r4, #24]
   bce96:	2b00      	cmp	r3, #0
   bce98:	bf14      	ite	ne
   bce9a:	2202      	movne	r2, #2
   bce9c:	2201      	moveq	r2, #1
   bce9e:	6122      	str	r2, [r4, #16]
   bcea0:	b1d5      	cbz	r5, bced8 <__d2b+0x98>
   bcea2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bcea6:	4405      	add	r5, r0
   bcea8:	f8c9 5000 	str.w	r5, [r9]
   bceac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bceb0:	f8c8 0000 	str.w	r0, [r8]
   bceb4:	4620      	mov	r0, r4
   bceb6:	b003      	add	sp, #12
   bceb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bcebc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bcec0:	e7d5      	b.n	bce6e <__d2b+0x2e>
   bcec2:	6161      	str	r1, [r4, #20]
   bcec4:	e7e5      	b.n	bce92 <__d2b+0x52>
   bcec6:	a801      	add	r0, sp, #4
   bcec8:	f7ff fcde 	bl	bc888 <__lo0bits>
   bcecc:	9b01      	ldr	r3, [sp, #4]
   bcece:	6163      	str	r3, [r4, #20]
   bced0:	2201      	movs	r2, #1
   bced2:	6122      	str	r2, [r4, #16]
   bced4:	3020      	adds	r0, #32
   bced6:	e7e3      	b.n	bcea0 <__d2b+0x60>
   bced8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bcedc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bcee0:	f8c9 0000 	str.w	r0, [r9]
   bcee4:	6918      	ldr	r0, [r3, #16]
   bcee6:	f7ff fcaf 	bl	bc848 <__hi0bits>
   bceea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bceee:	e7df      	b.n	bceb0 <__d2b+0x70>
   bcef0:	000bdba1 	.word	0x000bdba1
   bcef4:	000bdc28 	.word	0x000bdc28

000bcef8 <__ratio>:
   bcef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcefc:	4688      	mov	r8, r1
   bcefe:	4669      	mov	r1, sp
   bcf00:	4681      	mov	r9, r0
   bcf02:	f7ff ff4d 	bl	bcda0 <__b2d>
   bcf06:	a901      	add	r1, sp, #4
   bcf08:	4640      	mov	r0, r8
   bcf0a:	ec55 4b10 	vmov	r4, r5, d0
   bcf0e:	f7ff ff47 	bl	bcda0 <__b2d>
   bcf12:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bcf16:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bcf1a:	eba3 0c02 	sub.w	ip, r3, r2
   bcf1e:	e9dd 3200 	ldrd	r3, r2, [sp]
   bcf22:	1a9b      	subs	r3, r3, r2
   bcf24:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bcf28:	ec51 0b10 	vmov	r0, r1, d0
   bcf2c:	2b00      	cmp	r3, #0
   bcf2e:	bfd6      	itet	le
   bcf30:	460a      	movle	r2, r1
   bcf32:	462a      	movgt	r2, r5
   bcf34:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bcf38:	468b      	mov	fp, r1
   bcf3a:	462f      	mov	r7, r5
   bcf3c:	bfd4      	ite	le
   bcf3e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bcf42:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bcf46:	4620      	mov	r0, r4
   bcf48:	ee10 2a10 	vmov	r2, s0
   bcf4c:	465b      	mov	r3, fp
   bcf4e:	4639      	mov	r1, r7
   bcf50:	f7fd fdda 	bl	bab08 <__aeabi_ddiv>
   bcf54:	ec41 0b10 	vmov	d0, r0, r1
   bcf58:	b003      	add	sp, #12
   bcf5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bcf5e <__copybits>:
   bcf5e:	3901      	subs	r1, #1
   bcf60:	b570      	push	{r4, r5, r6, lr}
   bcf62:	1149      	asrs	r1, r1, #5
   bcf64:	6914      	ldr	r4, [r2, #16]
   bcf66:	3101      	adds	r1, #1
   bcf68:	f102 0314 	add.w	r3, r2, #20
   bcf6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bcf70:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bcf74:	1f05      	subs	r5, r0, #4
   bcf76:	42a3      	cmp	r3, r4
   bcf78:	d30c      	bcc.n	bcf94 <__copybits+0x36>
   bcf7a:	1aa3      	subs	r3, r4, r2
   bcf7c:	3b11      	subs	r3, #17
   bcf7e:	f023 0303 	bic.w	r3, r3, #3
   bcf82:	3211      	adds	r2, #17
   bcf84:	42a2      	cmp	r2, r4
   bcf86:	bf88      	it	hi
   bcf88:	2300      	movhi	r3, #0
   bcf8a:	4418      	add	r0, r3
   bcf8c:	2300      	movs	r3, #0
   bcf8e:	4288      	cmp	r0, r1
   bcf90:	d305      	bcc.n	bcf9e <__copybits+0x40>
   bcf92:	bd70      	pop	{r4, r5, r6, pc}
   bcf94:	f853 6b04 	ldr.w	r6, [r3], #4
   bcf98:	f845 6f04 	str.w	r6, [r5, #4]!
   bcf9c:	e7eb      	b.n	bcf76 <__copybits+0x18>
   bcf9e:	f840 3b04 	str.w	r3, [r0], #4
   bcfa2:	e7f4      	b.n	bcf8e <__copybits+0x30>

000bcfa4 <__any_on>:
   bcfa4:	f100 0214 	add.w	r2, r0, #20
   bcfa8:	6900      	ldr	r0, [r0, #16]
   bcfaa:	114b      	asrs	r3, r1, #5
   bcfac:	4298      	cmp	r0, r3
   bcfae:	b510      	push	{r4, lr}
   bcfb0:	db11      	blt.n	bcfd6 <__any_on+0x32>
   bcfb2:	dd0a      	ble.n	bcfca <__any_on+0x26>
   bcfb4:	f011 011f 	ands.w	r1, r1, #31
   bcfb8:	d007      	beq.n	bcfca <__any_on+0x26>
   bcfba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bcfbe:	fa24 f001 	lsr.w	r0, r4, r1
   bcfc2:	fa00 f101 	lsl.w	r1, r0, r1
   bcfc6:	428c      	cmp	r4, r1
   bcfc8:	d10b      	bne.n	bcfe2 <__any_on+0x3e>
   bcfca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bcfce:	4293      	cmp	r3, r2
   bcfd0:	d803      	bhi.n	bcfda <__any_on+0x36>
   bcfd2:	2000      	movs	r0, #0
   bcfd4:	bd10      	pop	{r4, pc}
   bcfd6:	4603      	mov	r3, r0
   bcfd8:	e7f7      	b.n	bcfca <__any_on+0x26>
   bcfda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bcfde:	2900      	cmp	r1, #0
   bcfe0:	d0f5      	beq.n	bcfce <__any_on+0x2a>
   bcfe2:	2001      	movs	r0, #1
   bcfe4:	e7f6      	b.n	bcfd4 <__any_on+0x30>

000bcfe6 <_calloc_r>:
   bcfe6:	b513      	push	{r0, r1, r4, lr}
   bcfe8:	434a      	muls	r2, r1
   bcfea:	4611      	mov	r1, r2
   bcfec:	9201      	str	r2, [sp, #4]
   bcfee:	f7fa fcbb 	bl	b7968 <_malloc_r>
   bcff2:	4604      	mov	r4, r0
   bcff4:	b118      	cbz	r0, bcffe <_calloc_r+0x18>
   bcff6:	9a01      	ldr	r2, [sp, #4]
   bcff8:	2100      	movs	r1, #0
   bcffa:	f7fe f80a 	bl	bb012 <memset>
   bcffe:	4620      	mov	r0, r4
   bd000:	b002      	add	sp, #8
   bd002:	bd10      	pop	{r4, pc}
   bd004:	0000      	movs	r0, r0
	...

000bd008 <nan>:
   bd008:	ed9f 0b01 	vldr	d0, [pc, #4]	; bd010 <nan+0x8>
   bd00c:	4770      	bx	lr
   bd00e:	bf00      	nop
   bd010:	00000000 	.word	0x00000000
   bd014:	7ff80000 	.word	0x7ff80000

000bd018 <__ascii_wctomb>:
   bd018:	b149      	cbz	r1, bd02e <__ascii_wctomb+0x16>
   bd01a:	2aff      	cmp	r2, #255	; 0xff
   bd01c:	bf85      	ittet	hi
   bd01e:	238a      	movhi	r3, #138	; 0x8a
   bd020:	6003      	strhi	r3, [r0, #0]
   bd022:	700a      	strbls	r2, [r1, #0]
   bd024:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bd028:	bf98      	it	ls
   bd02a:	2001      	movls	r0, #1
   bd02c:	4770      	bx	lr
   bd02e:	4608      	mov	r0, r1
   bd030:	4770      	bx	lr
	...

000bd034 <__aeabi_d2lz>:
   bd034:	b538      	push	{r3, r4, r5, lr}
   bd036:	2200      	movs	r2, #0
   bd038:	2300      	movs	r3, #0
   bd03a:	4604      	mov	r4, r0
   bd03c:	460d      	mov	r5, r1
   bd03e:	f7fd feab 	bl	bad98 <__aeabi_dcmplt>
   bd042:	b928      	cbnz	r0, bd050 <__aeabi_d2lz+0x1c>
   bd044:	4620      	mov	r0, r4
   bd046:	4629      	mov	r1, r5
   bd048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd04c:	f7fd bf7a 	b.w	baf44 <__aeabi_d2ulz>
   bd050:	4620      	mov	r0, r4
   bd052:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bd056:	f7fd ff75 	bl	baf44 <__aeabi_d2ulz>
   bd05a:	4240      	negs	r0, r0
   bd05c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd060:	bd38      	pop	{r3, r4, r5, pc}
   bd062:	bf00      	nop

000bd064 <dynalib_user>:
   bd064:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bd074:	0000 0000 6162 6973 5f63 7473 6972 676e     ....basic_string
   bd084:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   bd094:	6c75 206c 6f6e 2074 6176 696c 0064 450a     ull not valid..E
   bd0a4:	746e 7265 7420 6568 6c20 6e69 2065 6f63     nter the line co
   bd0b4:	6f6c 2072 666f 7420 6568 6420 7665 6369     lor of the devic
   bd0c4:	2065 6977 6874 7420 6568 6220 696c 6b6e     e with the blink
   bd0d4:	6e69 2067 454c 3a44 0020 6572 6563 7669     ing LED: .receiv
   bd0e4:	2065 6572 0064 6572 6563 7669 2065 6c62     e red.receive bl
   bd0f4:	6575 7200 6365 6965 6576 6720 6572 6e65     ue.receive green
   bd104:	0a00 6553 7571 6e65 6563 203a 6300 6e61     ..Sequence: .can
   bd114:	6f6e 2074 7263 6165 6574 7320 6474 3a3a     not create std::
   bd124:	6576 7463 726f 6c20 7261 6567 2072 6874     vector larger th
   bd134:	6e61 6d20 7861 735f 7a69 2865 0029 720a     an max_size()..r
   bd144:	7165 6575 7473 6320 646f 2065 2c31 6120     equest code 1, a
   bd154:	6464 6572 7373 203a 7400 6172 736e 696d     ddress: .transmi
   bd164:	7373 6f69 206e 6572 6963 7665 6465 6620     ssion recieved f
   bd174:	6f72 3a6d 0020 6564 6976 6563 6920 3a64     rom: .device id:
   bd184:	0020 7274 6e61 6d73 7369 6973 6e6f 7320      .transmission s
   bd194:	6e65 2074 6f74 203a 7200 7165 6575 7473     ent to: .request
   bd1a4:	6320 646f 2065 2c32 6120 6464 6572 7373      code 2, address
   bd1b4:	203a 6300 6e6f 6c66 6369 2074 6576 6972     : .conflict veri
   bd1c4:	6966 6163 6974 6e6f 203a 0a00 6f43 6e6e     fication: ..Conn
   bd1d4:	6365 6574 2064 6f74 203a 4600 3046 3030     ected to: .FF000
   bd1e4:	0030 4130 3030 3030 3000 3030 4630 0046     0.0A0000.0000FF.
   bd1f4:	3030 3030 4130 6200 6e72 4600 4646 3046     00000A.brn.FFFF0
   bd204:	0030 4130 4130 3030 3000 4630 3046 0030     0.0A0A00.00FF00.
   bd214:	3030 4130 3030 6f00 6772 4600 3846 3030     000A00.org.FF800
   bd224:	0030 4130 3530 3030 3800 3030 3830 0030     0.0A0500.800080.
   bd234:	3530 3030 3530 7000 6e69 006b 4646 3038     050005.pink.FF80
   bd244:	4646 3000 3041 3035 0041 4536 3034 3030     FF.0A050A.6E4000
   bd254:	3130 422d 4135 2d33 3346 3339 452d 4130     01-B5A3-F393-E0A
   bd264:	2d39 3545 4530 3432 4344 4143 4539 3600     9-E50E24DCCA9E.6
   bd274:	3445 3030 3030 2d32 3542 3341 462d 3933     E400002-B5A3-F39
   bd284:	2d33 3045 3941 452d 3035 3245 4434 4343     3-E0A9-E50E24DCC
   bd294:	3941 0045 4536 3034 3030 3330 422d 4135     A9E.6E400003-B5A
   bd2a4:	2d33 3346 3339 452d 4130 2d39 3545 4530     3-F393-E0A9-E50E
   bd2b4:	3432 4344 4143 4539 7400 0078 7872 6c00     24DCCA9E.tx.rx.l
   bd2c4:	7061 2e69 7274 6e61 6973 6374 6968 6163     api.transitchica
   bd2d4:	6f67 632e 6d6f 6c00 6f6f 2070 7473 7261     go.com.loop star
   bd2e4:	0074 6925 202c 2f00 7061 2f69 2e31 2f30     t.%i, ./api/1.0/
   bd2f4:	7474 6f70 6973 6974 6e6f 2e73 7361 7870     ttpositions.aspx
   bd304:	6b3f 7965 303d 6630 3066 3039 3336 6163     ?key=00ff09063ca
   bd314:	3461 3736 3834 3334 6434 6635 3361 3132     a46748434d5fa321
   bd324:	3064 3834 2666 7472 003d 6f26 7475 7570     d048f&rt=.&outpu
   bd334:	5474 7079 3d65 534a 4e4f 4700 5445 7000     tType=JSON.GET.p
   bd344:	7261 6973 676e 7000 7261 6973 676e 6620     arsing.parsing f
   bd354:	6961 656c 0064 7463 7461 0074 6f72 7475     ailed.ctatt.rout
   bd364:	0065 7274 6961 006e 656e 7478 7453 4e61     e.train.nextStaN
   bd374:	006d 6564 7473 6d4e 7400 4472 0072 616c     m.destNm.trDr.la
   bd384:	0074 6f6c 006e 7262 6165 006b 7274 6961     t.lon.break.trai
   bd394:	206e 6925 203a 6200 6665 726f 0065 6661     n %i: .before.af
   bd3a4:	6574 0072 6172 6c69 7020 7261 2074 6925     ter.rail part %i
   bd3b4:	0000 0000                                   ....

000bd3b8 <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   bd3c0:	40b9 000b 40cd 000b 6341 6563 7470 2f00     .@...@..Accept./
   bd3d0:	2f2a 0000 0019 0000 0003 0000 0007 0000     */..............
   bd3e0:	0005 0000 000c 0000 0008 0000 0005 0000     ................
   bd3f0:	0005 0000 0005 0000 0019 0000 0005 0000     ................
   bd400:	0005 0000 0005 0000 0005 0000 000f 0000     ................
   bd410:	0005 0000 0000 0000 0014 0000 0014 0000     ................
   bd420:	000f 0000 0005 0000 0005 0000 000f 0000     ................
   bd430:	000f 0000 000f 0000 000a 0000 000c 0000     ................
   bd440:	0007 0000 0001 0000 0005 0000 0005 0000     ................
   bd450:	0005 0000 0005 0000 0014 0000 0000 0000     ................
   bd460:	0014 0000 0007 0000 0007 0000 0006 0000     ................
   bd470:	0005 0000 0005 0000 0005 0000 0005 0000     ................
   bd480:	4820 5454 2f50 2e31 0d30 000a 6c63 736f      HTTP/1.0...clos
   bd490:	0065 6f43 6e6e 6365 6974 6e6f 4800 534f     e.Connection.HOS
   bd4a0:	0054 6f43 746e 6e65 2d74 654c 676e 6874     T.Content-Length
   bd4b0:	5000 534f 0054 0a0d 0a0d 2500 3430 0078     .POST......%04x.

000bd4c0 <_ZTV10JsonBuffer>:
	...
   bd4c8:	6b75 000b 6b91 000b                         uk...k..

000bd4d0 <_ZTV10JsonParser>:
	...
   bd4d8:	6ba5 000b 6bc9 000b                         .k...k..

000bd4e0 <_ZTV13JsonReference>:
	...
   bd4e8:	6b65 000b 6b67 000b 7341 6573 7472 6f69     ek..gk..Assertio
   bd4f8:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   bd508:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   bd518:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   bd528:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   bd538:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   bd548:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   bd558:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   bd568:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   bd578:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   bd588:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   bd598:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   bd5a8:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   bd5b8:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   bd5c8:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   bd5d8:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   bd5e8:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   bd5f8:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   bd608:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   bd618:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   bd628:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   bd638:	6369 002e                                   ic..

000bd63c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd644:	79b5 000b 7a19 000b 7aff 000b 7a43 000b     .y...z...z..Cz..
   bd654:	79b9 000b                                   .y..

000bd658 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd660:	79b1 000b 7a27 000b 79b3 000b 7a49 000b     .y..'z...y..Iz..
   bd670:	79d9 000b                                   .y..

000bd674 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd67c:	79af 000b 7a35 000b 82b9 000b 7a4f 000b     .y..5z......Oz..
   bd68c:	79f9 000b                                   .y..

000bd690 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bd69c:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bd6ae <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bd6ae:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bd6be <_ZN8particle7BleUuid9BASE_UUIDE>:
   bd6be:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000bd6d0 <_ZTVN5spark13EthernetClassE>:
	...
   bd6d8:	8d67 000b 8d5d 000b 8d53 000b 8d49 000b     g...]...S...I...
   bd6e8:	8d3d 000b 8d31 000b 8fed 000b 8ff5 000b     =...1...........
   bd6f8:	8d25 000b 8d1d 000b 8d13 000b 8d09 000b     %...............
   bd708:	9025 000b                                   %...

000bd70c <_ZTV7TwoWire>:
	...
   bd714:	8d85 000b 8dcf 000b 8da7 000b 8d87 000b     ................
   bd724:	8daf 000b 8db7 000b 8dbf 000b 8dc7 000b     ................

000bd734 <_ZTV9IPAddress>:
	...
   bd73c:	8e91 000b 8e81 000b 8e83 000b 7061 0070     ............app.

000bd74c <_ZTVN5spark12NetworkClassE>:
	...
   bd754:	8fad 000b 8fb7 000b 8fc1 000b 8fcb 000b     ................
   bd764:	8fd5 000b 8fe1 000b 8fed 000b 8ff5 000b     ................
   bd774:	8ffd 000b 9009 000b 9011 000b 901b 000b     ................
   bd784:	9025 000b 6977 6972 676e 7200 6365 2076     %...wiring.recv 
   bd794:	7265 6f72 2072 203d 6425 0000               error = %d..

000bd7a0 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd7a8:	955d 000b 9581 000b 9ab3 000b 958f 000b     ]...............
   bd7b8:	9561 000b                                   a...

000bd7bc <_ZTV9TCPClient>:
	...
   bd7c4:	960d 000b 9641 000b 94d9 000b 94f3 000b     ....A...........
   bd7d4:	9949 000b 951d 000b 97bf 000b 9551 000b     I...........Q...
   bd7e4:	9851 000b 9691 000b 97ed 000b 99fd 000b     Q...............
   bd7f4:	978d 000b 9553 000b 9505 000b 9595 000b     ....S...........
   bd804:	9671 000b 5925 252d 2d6d 6425 2554 3a48     q...%Y-%m-%dT%H:
   bd814:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bd824 <_ZTV11USARTSerial>:
	...
   bd82c:	9acd 000b 9b39 000b 9b11 000b 9111 000b     ....9...........
   bd83c:	9ae1 000b 9afd 000b 9aef 000b 9b0b 000b     ................
   bd84c:	9acf 000b 9ad3 000b                         ........

000bd854 <_ZTV9USBSerial>:
	...
   bd85c:	9b77 000b 9bdf 000b 9bb5 000b 9111 000b     w...............
   bd86c:	9ba7 000b 9b79 000b 9b89 000b 9bd9 000b     ....y...........
   bd87c:	9b99 000b 9b71 000b                         ....q...

000bd884 <_ZTVN5spark9WiFiClassE>:
	...
   bd88c:	9cd7 000b 9ccd 000b 9cc3 000b 9c79 000b     ............y...
   bd89c:	9cb7 000b 9cab 000b 8fed 000b 8ff5 000b     ................
   bd8ac:	9c9f 000b 9c97 000b 9c8d 000b 9c83 000b     ................
   bd8bc:	9025 000b                                   %...

000bd8c0 <_ZSt7nothrow>:
	...

000bd8c1 <_ZTSSt19_Sp_make_shared_tag>:
   bd8c1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bd8d1:	6572 5f64 6174 0067 0000                     red_tag....

000bd8dc <_ZTISt19_Sp_make_shared_tag>:
   bd8dc:	d934 000b d8c1 000b 6162 6973 5f63 7473     4.......basic_st
   bd8ec:	6972 676e 3a3a 4d5f 635f 6572 7461 0065     ring::_M_create.

000bd8fc <_ZTIN10__cxxabiv117__class_type_infoE>:
   bd8fc:	d994 000b d908 000b d9b8 000b               ............

000bd908 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bd908:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bd918:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bd928:	0045 0000                                   E...

000bd92c <_ZTVN10__cxxabiv117__class_type_infoE>:
   bd92c:	0000 0000 d8fc 000b a0cd 000b a0e1 000b     ................
   bd93c:	a275 000b a275 000b a14b 000b a08d 000b     u...u...K.......
   bd94c:	a133 000b a0f5 000b a0bf 000b               3...........

000bd958 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bd958:	d994 000b d964 000b d8fc 000b               ....d.......

000bd964 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bd964:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bd974:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bd984:	666e 456f 0000 0000                         nfoE....

000bd98c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bd98c:	0000 0000 d958 000b a175 000b a189 000b     ....X...u.......
   bd99c:	a275 000b a275 000b a14b 000b a08d 000b     u...u...K.......
   bd9ac:	a249 000b a1d5 000b a19d 000b               I...........

000bd9b8 <_ZTISt9type_info>:
   bd9b8:	d934 000b d9c0 000b                         4.......

000bd9c0 <_ZTSSt9type_info>:
   bd9c0:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bd9d0:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bd9e0:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   bd9f0:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bda00:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bda10:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bda20:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bda30:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   bda40:	6e69 7469 0079 6e61 0000 0000               inity.an....

000bda4c <fpi.1>:
   bda4c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bda5c:	0000 0000                                   ....

000bda60 <fpinan.0>:
   bda60:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000bda78 <tinytens>:
   bda78:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bda88:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bda98:	6f43 64ac 0628 1168                         Co.d(.h.

000bdaa0 <_ctype_>:
   bdaa0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bdab0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bdac0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bdad0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bdae0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bdaf0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bdb00:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bdb10:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bdb20:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bdba0:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bdbb0:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   bdbc0:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bdbd0:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   bdbe0:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   bdbf0:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   bdc00:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bdc10:	632e 0000                                   .c..

000bdc14 <_C_numeric_locale>:
   bdc14:	d63a 000b d4ba 000b 53d0 2003 0043 4f50     :........S. C.PO
   bdc24:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   bdc34:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bdc44:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bdc54:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bdc64:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bdc74:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   bdc84:	0000 0000                                   ....

000bdc88 <__mprec_bigtens>:
   bdc88:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bdc98:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bdca8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bdcb0 <__mprec_tens>:
   bdcb0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bdcc0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bdcd0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bdce0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bdcf0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bdd00:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bdd10:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bdd20:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bdd30:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bdd40:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bdd50:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bdd60:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bdd70:	9db4 79d9 7843 44ea                         ...yCx.D

000bdd78 <p05.0>:
   bdd78:	0005 0000 0019 0000 007d 0000               ........}...

000bdd84 <link_const_variable_data_end>:
   bdd84:	000b5ff9 	.word	0x000b5ff9
   bdd88:	000b741d 	.word	0x000b741d
   bdd8c:	000b8cf9 	.word	0x000b8cf9
   bdd90:	000b8d71 	.word	0x000b8d71
   bdd94:	000b8f9d 	.word	0x000b8f9d
   bdd98:	000b90fd 	.word	0x000b90fd
   bdd9c:	000b9239 	.word	0x000b9239
   bdda0:	000b94b5 	.word	0x000b94b5
   bdda4:	000b9ab9 	.word	0x000b9ab9
   bdda8:	000b9ce1 	.word	0x000b9ce1

000bddac <link_constructors_end>:
   bddac:	00000000 	.word	0x00000000
