
c:/Users/Arjun/Documents/GitHub/loop_tracks/master/target/3.0.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003454  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7470  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e560  000d7474  0001e560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000228  2003e5c8  2003e5c8  0002e5c8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d74dc  000d74dc  000274dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7504  000d7504  00027504  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00130e19  00000000  00000000  00027508  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012311  00000000  00000000  00158321  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00030397  00000000  00000000  0016a632  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000028b8  00000000  00000000  0019a9c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008998  00000000  00000000  0019d281  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003301e  00000000  00000000  001a5c19  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00032706  00000000  00000000  001d8c37  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00120582  00000000  00000000  0020b33d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000721c  00000000  00000000  0032b8c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fdc5 	bl	d6bbc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fde7 	bl	d6c0c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e560 	.word	0x2003e560
   d4048:	000d7474 	.word	0x000d7474
   d404c:	2003e5c8 	.word	0x2003e5c8
   d4050:	2003e5c8 	.word	0x2003e5c8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f002 f915 	bl	d628c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d744c 	.word	0x000d744c
   d407c:	000d7470 	.word	0x000d7470

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 ba18 	b.w	d44b4 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8af 	bl	d41e8 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f002 b8bf 	b.w	d6210 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bd35 	b.w	d4b00 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bd33 	b.w	d4b00 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bd39 	b.w	d4b10 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ae:	b510      	push	{r4, lr}
   d40b0:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40b2:	6800      	ldr	r0, [r0, #0]
   d40b4:	b108      	cbz	r0, d40ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b6:	f000 fd2b 	bl	d4b10 <free>
class SystemClass {
   d40ba:	4620      	mov	r0, r4
   d40bc:	bd10      	pop	{r4, pc}

000d40be <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d40be:	6803      	ldr	r3, [r0, #0]
   d40c0:	b2c9      	uxtb	r1, r1
   d40c2:	689b      	ldr	r3, [r3, #8]
   d40c4:	4718      	bx	r3
	...

000d40c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
      count++;
    }
  }
}

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d40c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  String inputBuffer = "";

  if(bleCount <= slaveCountExpected){
   d40cc:	4c3e      	ldr	r4, [pc, #248]	; (d41c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d40ce:	b085      	sub	sp, #20
   d40d0:	4680      	mov	r8, r0
   d40d2:	460e      	mov	r6, r1
  String inputBuffer = "";
   d40d4:	4668      	mov	r0, sp
   d40d6:	493d      	ldr	r1, [pc, #244]	; (d41cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x104>)
   d40d8:	f000 fe33 	bl	d4d42 <_ZN6StringC1EPKc>
  if(bleCount <= slaveCountExpected){
   d40dc:	6823      	ldr	r3, [r4, #0]
   d40de:	2b03      	cmp	r3, #3
   d40e0:	dc66      	bgt.n	d41b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe8>
    int input;

    for(int i = 0; i < len - 1; i++){
   d40e2:	2700      	movs	r7, #0
   d40e4:	3e01      	subs	r6, #1
   d40e6:	42be      	cmp	r6, r7
   d40e8:	d90a      	bls.n	d4100 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x38>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d40ea:	f818 1007 	ldrb.w	r1, [r8, r7]
   d40ee:	4668      	mov	r0, sp
   d40f0:	f000 fe77 	bl	d4de2 <_ZN6String6concatEc>
      inputBuffer += (char)data[i];
      input = atoi(inputBuffer);
   d40f4:	9800      	ldr	r0, [sp, #0]
   d40f6:	f002 fd41 	bl	d6b7c <atoi>
    for(int i = 0; i < len - 1; i++){
   d40fa:	3701      	adds	r7, #1
      input = atoi(inputBuffer);
   d40fc:	4605      	mov	r5, r0
    for(int i = 0; i < len - 1; i++){
   d40fe:	e7f2      	b.n	d40e6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e>
    }

    if(bleCount < slaveCountExpected){
   d4100:	6823      	ldr	r3, [r4, #0]
   d4102:	2b02      	cmp	r3, #2
   d4104:	dc04      	bgt.n	d4110 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48>
      txCharacteristic.setValue("\nEnter the position of the device with the blue LED as an integer (first device is at 1, second is at 2, etc): ");
   d4106:	4932      	ldr	r1, [pc, #200]	; (d41d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x108>)
   d4108:	4832      	ldr	r0, [pc, #200]	; (d41d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>)
   d410a:	2200      	movs	r2, #0
   d410c:	f001 f9cc 	bl	d54a8 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    }

    Wire.beginTransmission(addressArr[bleCount]);
   d4110:	f002 fbee 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d4114:	4e30      	ldr	r6, [pc, #192]	; (d41d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x110>)
   d4116:	6823      	ldr	r3, [r4, #0]
   d4118:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   d411c:	f002 fad8 	bl	d66d0 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('3');
   d4120:	f002 fbe6 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d4124:	2133      	movs	r1, #51	; 0x33
   d4126:	f7ff ffca 	bl	d40be <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d412a:	f002 fbe1 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d412e:	f002 fad6 	bl	d66de <_ZN7TwoWire15endTransmissionEv>

    if(bleCount > 0){
   d4132:	6823      	ldr	r3, [r4, #0]
   d4134:	2b00      	cmp	r3, #0
   d4136:	dd17      	ble.n	d4168 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>
      sequenceArr[input - 1] = addressArr[bleCount - 1];
   d4138:	3b01      	subs	r3, #1
   d413a:	3d01      	subs	r5, #1
   d413c:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   d4140:	4b26      	ldr	r3, [pc, #152]	; (d41dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x114>)
   d4142:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
      
      Wire.beginTransmission(addressArr[bleCount - 1]);
   d4146:	f002 fbd3 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d414a:	6823      	ldr	r3, [r4, #0]
   d414c:	3b01      	subs	r3, #1
   d414e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   d4152:	f002 fabd 	bl	d66d0 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   d4156:	f002 fbcb 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d415a:	2134      	movs	r1, #52	; 0x34
   d415c:	f7ff ffaf 	bl	d40be <_ZN7TwoWire5writeEi>
      Wire.endTransmission();
   d4160:	f002 fbc6 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d4164:	f002 fabb 	bl	d66de <_ZN7TwoWire15endTransmissionEv>
    }
  }

  if(bleCount == slaveCountExpected){
   d4168:	6823      	ldr	r3, [r4, #0]
   d416a:	2b03      	cmp	r3, #3
   d416c:	d120      	bne.n	d41b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe8>
    Serial.println("\nSequence: ");
   d416e:	f002 f993 	bl	d6498 <_Z16_fetch_usbserialv>
   d4172:	491b      	ldr	r1, [pc, #108]	; (d41e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x118>)
   d4174:	f8df 8064 	ldr.w	r8, [pc, #100]	; d41dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x114>
    for(int i = 0; i < slaveCountExpected; i++){
      Serial.print(sequenceArr[i]);
      Serial.print(", ");
   d4178:	f8df 9068 	ldr.w	r9, [pc, #104]	; d41e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x11c>
    Serial.println("\nSequence: ");
   d417c:	f001 ffcd 	bl	d611a <_ZN5Print7printlnEPKc>
    for(int i = 0; i < slaveCountExpected; i++){
   d4180:	2600      	movs	r6, #0
      Serial.print(sequenceArr[i]);
   d4182:	f002 f989 	bl	d6498 <_Z16_fetch_usbserialv>
   d4186:	f858 5b04 	ldr.w	r5, [r8], #4
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d418a:	2d00      	cmp	r5, #0
   d418c:	4607      	mov	r7, r0
   d418e:	da18      	bge.n	d41c2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
            t = print('-');
   d4190:	212d      	movs	r1, #45	; 0x2d
   d4192:	f001 ffb3 	bl	d60fc <_ZN5Print5printEc>
            val = -n;
   d4196:	4269      	negs	r1, r5
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4198:	220a      	movs	r2, #10
   d419a:	4638      	mov	r0, r7
   d419c:	f001 ffc7 	bl	d612e <_ZN5Print11printNumberEmh>
    for(int i = 0; i < slaveCountExpected; i++){
   d41a0:	3601      	adds	r6, #1
      Serial.print(", ");
   d41a2:	f002 f979 	bl	d6498 <_Z16_fetch_usbserialv>
   d41a6:	4649      	mov	r1, r9
   d41a8:	f001 ffa4 	bl	d60f4 <_ZN5Print5printEPKc>
    for(int i = 0; i < slaveCountExpected; i++){
   d41ac:	2e03      	cmp	r6, #3
   d41ae:	d1e8      	bne.n	d4182 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xba>
    }
    //BLE.disconnect();
    //BLE.off();
  }

  bleCount++;
   d41b0:	6823      	ldr	r3, [r4, #0]
  String inputBuffer = "";
   d41b2:	4668      	mov	r0, sp
  bleCount++;
   d41b4:	3301      	adds	r3, #1
   d41b6:	6023      	str	r3, [r4, #0]
  String inputBuffer = "";
   d41b8:	f000 fd78 	bl	d4cac <_ZN6StringD1Ev>
   d41bc:	b005      	add	sp, #20
   d41be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            val = n;
   d41c2:	4629      	mov	r1, r5
   d41c4:	e7e8      	b.n	d4198 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd0>
   d41c6:	bf00      	nop
   d41c8:	2003e620 	.word	0x2003e620
   d41cc:	000d6e4e 	.word	0x000d6e4e
   d41d0:	000d6dd0 	.word	0x000d6dd0
   d41d4:	2003e63c 	.word	0x2003e63c
   d41d8:	2003e614 	.word	0x2003e614
   d41dc:	2003e62c 	.word	0x2003e62c
   d41e0:	000d6e40 	.word	0x000d6e40
   d41e4:	000d6e4c 	.word	0x000d6e4c

000d41e8 <loop>:
  delay(500);
   d41e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d41ec:	f001 bfd6 	b.w	d619c <delay>

000d41f0 <_Z16randomizeAddressv>:
void randomizeAddress(){
   d41f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while(slaveCount != slaveCountExpected){
   d41f4:	4ea4      	ldr	r6, [pc, #656]	; (d4488 <_Z16randomizeAddressv+0x298>)

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d41f6:	f8df 92b0 	ldr.w	r9, [pc, #688]	; d44a8 <_Z16randomizeAddressv+0x2b8>
void randomizeAddress(){
   d41fa:	b08f      	sub	sp, #60	; 0x3c
   d41fc:	4637      	mov	r7, r6
  while(slaveCount != slaveCountExpected){
   d41fe:	6833      	ldr	r3, [r6, #0]
   d4200:	2b03      	cmp	r3, #3
   d4202:	f000 8108 	beq.w	d4416 <_Z16randomizeAddressv+0x226>
    slaveCount = 0;
   d4206:	2300      	movs	r3, #0
   d4208:	f8df a2a0 	ldr.w	sl, [pc, #672]	; d44ac <_Z16randomizeAddressv+0x2bc>
        String inputBuffer = "";
   d420c:	f8df 82a0 	ldr.w	r8, [pc, #672]	; d44b0 <_Z16randomizeAddressv+0x2c0>
    slaveCount = 0;
   d4210:	6033      	str	r3, [r6, #0]
    for(int i = 8; i <= 119; i++){
   d4212:	2408      	movs	r4, #8
      Serial.println("\nrequest code 1, address: " + String(i));
   d4214:	f002 f940 	bl	d6498 <_Z16_fetch_usbserialv>
   d4218:	4649      	mov	r1, r9
   d421a:	4605      	mov	r5, r0
   d421c:	a80a      	add	r0, sp, #40	; 0x28
   d421e:	f000 fd90 	bl	d4d42 <_ZN6StringC1EPKc>
   d4222:	220a      	movs	r2, #10
   d4224:	4621      	mov	r1, r4
   d4226:	a806      	add	r0, sp, #24
   d4228:	f000 fdb1 	bl	d4d8e <_ZN6StringC1Eih>
   d422c:	a906      	add	r1, sp, #24
   d422e:	a80a      	add	r0, sp, #40	; 0x28
   d4230:	f000 fde4 	bl	d4dfc <_ZplRK15StringSumHelperRK6String>
   d4234:	6801      	ldr	r1, [r0, #0]
   d4236:	4628      	mov	r0, r5
   d4238:	f001 ff6f 	bl	d611a <_ZN5Print7printlnEPKc>
   d423c:	a806      	add	r0, sp, #24
   d423e:	f000 fd35 	bl	d4cac <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4242:	a80a      	add	r0, sp, #40	; 0x28
   d4244:	f000 fd32 	bl	d4cac <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   d4248:	f002 fb52 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d424c:	4621      	mov	r1, r4
   d424e:	f002 fa3f 	bl	d66d0 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   d4252:	f002 fb4d 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d4256:	2131      	movs	r1, #49	; 0x31
   d4258:	f7ff ff31 	bl	d40be <_ZN7TwoWire5writeEi>
      Wire.endTransmission();
   d425c:	fa5f fb84 	uxtb.w	fp, r4
   d4260:	f002 fb46 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d4264:	f002 fa3b 	bl	d66de <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   d4268:	f002 fb42 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d426c:	2218      	movs	r2, #24
   d426e:	4659      	mov	r1, fp
   d4270:	f002 fa27 	bl	d66c2 <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   d4274:	f002 fb3c 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d4278:	6803      	ldr	r3, [r0, #0]
   d427a:	691b      	ldr	r3, [r3, #16]
   d427c:	4798      	blx	r3
   d427e:	2800      	cmp	r0, #0
   d4280:	f340 80c4 	ble.w	d440c <_Z16randomizeAddressv+0x21c>
        Serial.println("transmission recieved from: " + String(i));
   d4284:	f002 f908 	bl	d6498 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d4288:	4651      	mov	r1, sl
   d428a:	4605      	mov	r5, r0
   d428c:	a80a      	add	r0, sp, #40	; 0x28
   d428e:	f000 fd58 	bl	d4d42 <_ZN6StringC1EPKc>
   d4292:	220a      	movs	r2, #10
   d4294:	4621      	mov	r1, r4
   d4296:	a806      	add	r0, sp, #24
   d4298:	f000 fd79 	bl	d4d8e <_ZN6StringC1Eih>
   d429c:	a906      	add	r1, sp, #24
   d429e:	a80a      	add	r0, sp, #40	; 0x28
   d42a0:	f000 fdac 	bl	d4dfc <_ZplRK15StringSumHelperRK6String>
   d42a4:	6801      	ldr	r1, [r0, #0]
   d42a6:	4628      	mov	r0, r5
   d42a8:	f001 ff37 	bl	d611a <_ZN5Print7printlnEPKc>
   d42ac:	a806      	add	r0, sp, #24
   d42ae:	f000 fcfd 	bl	d4cac <_ZN6StringD1Ev>
class StringSumHelper : public String
   d42b2:	a80a      	add	r0, sp, #40	; 0x28
   d42b4:	f000 fcfa 	bl	d4cac <_ZN6StringD1Ev>
        slaveCount++;
   d42b8:	683b      	ldr	r3, [r7, #0]
        String inputBuffer = "";
   d42ba:	4641      	mov	r1, r8
        slaveCount++;
   d42bc:	3301      	adds	r3, #1
        String inputBuffer = "";
   d42be:	a802      	add	r0, sp, #8
        slaveCount++;
   d42c0:	603b      	str	r3, [r7, #0]
        String inputBuffer = "";
   d42c2:	f000 fd3e 	bl	d4d42 <_ZN6StringC1EPKc>
   d42c6:	2518      	movs	r5, #24
          c = Wire.read();
   d42c8:	f002 fb12 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d42cc:	6803      	ldr	r3, [r0, #0]
   d42ce:	695b      	ldr	r3, [r3, #20]
   d42d0:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   d42d2:	b2c1      	uxtb	r1, r0
   d42d4:	a802      	add	r0, sp, #8
   d42d6:	f000 fd84 	bl	d4de2 <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   d42da:	3d01      	subs	r5, #1
   d42dc:	d1f4      	bne.n	d42c8 <_Z16randomizeAddressv+0xd8>
        Wire.beginTransmission(i);
   d42de:	f002 fb07 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d42e2:	4621      	mov	r1, r4
   d42e4:	f002 f9f4 	bl	d66d0 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   d42e8:	f002 fb02 	bl	d68f0 <_Z19__fetch_global_Wirev>
        operator const char*() const { return c_str(); }
   d42ec:	9902      	ldr	r1, [sp, #8]
   d42ee:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d42f0:	b149      	cbz	r1, d4306 <_Z16randomizeAddressv+0x116>
      return write((const uint8_t *)str, strlen(str));
   d42f2:	4608      	mov	r0, r1
   d42f4:	9101      	str	r1, [sp, #4]
   d42f6:	f002 fcc7 	bl	d6c88 <strlen>
   d42fa:	682b      	ldr	r3, [r5, #0]
   d42fc:	9901      	ldr	r1, [sp, #4]
   d42fe:	68db      	ldr	r3, [r3, #12]
   d4300:	4602      	mov	r2, r0
   d4302:	4628      	mov	r0, r5
   d4304:	4798      	blx	r3
        Serial.println("device id: " + inputBuffer);
   d4306:	f002 f8c7 	bl	d6498 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d430a:	4960      	ldr	r1, [pc, #384]	; (d448c <_Z16randomizeAddressv+0x29c>)
   d430c:	4605      	mov	r5, r0
   d430e:	a80a      	add	r0, sp, #40	; 0x28
   d4310:	f000 fd17 	bl	d4d42 <_ZN6StringC1EPKc>
   d4314:	a902      	add	r1, sp, #8
   d4316:	a80a      	add	r0, sp, #40	; 0x28
   d4318:	f000 fd70 	bl	d4dfc <_ZplRK15StringSumHelperRK6String>
   d431c:	6801      	ldr	r1, [r0, #0]
   d431e:	4628      	mov	r0, r5
   d4320:	f001 fefb 	bl	d611a <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   d4324:	a80a      	add	r0, sp, #40	; 0x28
   d4326:	f000 fcc1 	bl	d4cac <_ZN6StringD1Ev>
        Wire.endTransmission();
   d432a:	f002 fae1 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d432e:	f002 f9d6 	bl	d66de <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   d4332:	f002 f8b1 	bl	d6498 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d4336:	4956      	ldr	r1, [pc, #344]	; (d4490 <_Z16randomizeAddressv+0x2a0>)
   d4338:	4605      	mov	r5, r0
   d433a:	a80a      	add	r0, sp, #40	; 0x28
   d433c:	f000 fd01 	bl	d4d42 <_ZN6StringC1EPKc>
   d4340:	220a      	movs	r2, #10
   d4342:	4621      	mov	r1, r4
   d4344:	a806      	add	r0, sp, #24
   d4346:	f000 fd22 	bl	d4d8e <_ZN6StringC1Eih>
   d434a:	a906      	add	r1, sp, #24
   d434c:	a80a      	add	r0, sp, #40	; 0x28
   d434e:	f000 fd55 	bl	d4dfc <_ZplRK15StringSumHelperRK6String>
   d4352:	6801      	ldr	r1, [r0, #0]
   d4354:	4628      	mov	r0, r5
   d4356:	f001 fee0 	bl	d611a <_ZN5Print7printlnEPKc>
   d435a:	a806      	add	r0, sp, #24
   d435c:	f000 fca6 	bl	d4cac <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4360:	a80a      	add	r0, sp, #40	; 0x28
   d4362:	f000 fca3 	bl	d4cac <_ZN6StringD1Ev>
        Wire.beginTransmission(i);
   d4366:	f002 fac3 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d436a:	4621      	mov	r1, r4
   d436c:	f002 f9b0 	bl	d66d0 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   d4370:	f002 fabe 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d4374:	2132      	movs	r1, #50	; 0x32
   d4376:	f7ff fea2 	bl	d40be <_ZN7TwoWire5writeEi>
        Wire.endTransmission();
   d437a:	f002 fab9 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d437e:	f002 f9ae 	bl	d66de <_ZN7TwoWire15endTransmissionEv>
        Serial.println("request code 2, address: " + String(i));
   d4382:	f002 f889 	bl	d6498 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d4386:	4943      	ldr	r1, [pc, #268]	; (d4494 <_Z16randomizeAddressv+0x2a4>)
   d4388:	4605      	mov	r5, r0
   d438a:	a80a      	add	r0, sp, #40	; 0x28
   d438c:	f000 fcd9 	bl	d4d42 <_ZN6StringC1EPKc>
   d4390:	220a      	movs	r2, #10
   d4392:	4621      	mov	r1, r4
   d4394:	a806      	add	r0, sp, #24
   d4396:	f000 fcfa 	bl	d4d8e <_ZN6StringC1Eih>
   d439a:	a906      	add	r1, sp, #24
   d439c:	a80a      	add	r0, sp, #40	; 0x28
   d439e:	f000 fd2d 	bl	d4dfc <_ZplRK15StringSumHelperRK6String>
   d43a2:	6801      	ldr	r1, [r0, #0]
   d43a4:	4628      	mov	r0, r5
   d43a6:	f001 feb8 	bl	d611a <_ZN5Print7printlnEPKc>
   d43aa:	a806      	add	r0, sp, #24
   d43ac:	f000 fc7e 	bl	d4cac <_ZN6StringD1Ev>
class StringSumHelper : public String
   d43b0:	a80a      	add	r0, sp, #40	; 0x28
   d43b2:	f000 fc7b 	bl	d4cac <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   d43b6:	f002 fa9b 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d43ba:	2204      	movs	r2, #4
   d43bc:	4659      	mov	r1, fp
   d43be:	f002 f980 	bl	d66c2 <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   d43c2:	4641      	mov	r1, r8
   d43c4:	a802      	add	r0, sp, #8
   d43c6:	f000 fcd0 	bl	d4d6a <_ZN6StringaSEPKc>
   d43ca:	2504      	movs	r5, #4
          inputBuffer += (char)Wire.read();
   d43cc:	f002 fa90 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d43d0:	6803      	ldr	r3, [r0, #0]
   d43d2:	695b      	ldr	r3, [r3, #20]
   d43d4:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   d43d6:	b2c1      	uxtb	r1, r0
   d43d8:	a802      	add	r0, sp, #8
   d43da:	f000 fd02 	bl	d4de2 <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   d43de:	3d01      	subs	r5, #1
   d43e0:	d1f4      	bne.n	d43cc <_Z16randomizeAddressv+0x1dc>
        Serial.println("conflict verification: " + inputBuffer);
   d43e2:	f002 f859 	bl	d6498 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d43e6:	492c      	ldr	r1, [pc, #176]	; (d4498 <_Z16randomizeAddressv+0x2a8>)
   d43e8:	4605      	mov	r5, r0
   d43ea:	a80a      	add	r0, sp, #40	; 0x28
   d43ec:	f000 fca9 	bl	d4d42 <_ZN6StringC1EPKc>
   d43f0:	a902      	add	r1, sp, #8
   d43f2:	a80a      	add	r0, sp, #40	; 0x28
   d43f4:	f000 fd02 	bl	d4dfc <_ZplRK15StringSumHelperRK6String>
   d43f8:	6801      	ldr	r1, [r0, #0]
   d43fa:	4628      	mov	r0, r5
   d43fc:	f001 fe8d 	bl	d611a <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   d4400:	a80a      	add	r0, sp, #40	; 0x28
   d4402:	f000 fc53 	bl	d4cac <_ZN6StringD1Ev>
        String inputBuffer = "";
   d4406:	a802      	add	r0, sp, #8
   d4408:	f000 fc50 	bl	d4cac <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   d440c:	3401      	adds	r4, #1
   d440e:	2c78      	cmp	r4, #120	; 0x78
   d4410:	f47f af00 	bne.w	d4214 <_Z16randomizeAddressv+0x24>
   d4414:	e6f3      	b.n	d41fe <_Z16randomizeAddressv+0xe>
  Serial.println("\nConnected to: ");
   d4416:	f002 f83f 	bl	d6498 <_Z16_fetch_usbserialv>
   d441a:	4920      	ldr	r1, [pc, #128]	; (d449c <_Z16randomizeAddressv+0x2ac>)
      Serial.print(", ");
   d441c:	4e20      	ldr	r6, [pc, #128]	; (d44a0 <_Z16randomizeAddressv+0x2b0>)
      addressArr[count] = i;
   d441e:	4f21      	ldr	r7, [pc, #132]	; (d44a4 <_Z16randomizeAddressv+0x2b4>)
  Serial.println("\nConnected to: ");
   d4420:	f001 fe7b 	bl	d611a <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   d4424:	2408      	movs	r4, #8
  int count = 0;
   d4426:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   d4428:	f002 fa62 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d442c:	4621      	mov	r1, r4
   d442e:	f002 f94f 	bl	d66d0 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   d4432:	f002 fa5d 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d4436:	2131      	movs	r1, #49	; 0x31
   d4438:	f7ff fe41 	bl	d40be <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d443c:	f002 fa58 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d4440:	f002 f94d 	bl	d66de <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   d4444:	f002 fa54 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d4448:	2218      	movs	r2, #24
   d444a:	b2e1      	uxtb	r1, r4
   d444c:	f002 f939 	bl	d66c2 <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   d4450:	f002 fa4e 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d4454:	6803      	ldr	r3, [r0, #0]
   d4456:	691b      	ldr	r3, [r3, #16]
   d4458:	4798      	blx	r3
   d445a:	2800      	cmp	r0, #0
   d445c:	dd0d      	ble.n	d447a <_Z16randomizeAddressv+0x28a>
      Serial.print(i);
   d445e:	f002 f81b 	bl	d6498 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d4462:	220a      	movs	r2, #10
   d4464:	4621      	mov	r1, r4
   d4466:	f001 fe62 	bl	d612e <_ZN5Print11printNumberEmh>
      Serial.print(", ");
   d446a:	f002 f815 	bl	d6498 <_Z16_fetch_usbserialv>
   d446e:	4631      	mov	r1, r6
   d4470:	f001 fe40 	bl	d60f4 <_ZN5Print5printEPKc>
      addressArr[count] = i;
   d4474:	f847 4025 	str.w	r4, [r7, r5, lsl #2]
      count++;
   d4478:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   d447a:	3401      	adds	r4, #1
   d447c:	2c78      	cmp	r4, #120	; 0x78
   d447e:	d1d3      	bne.n	d4428 <_Z16randomizeAddressv+0x238>
}
   d4480:	b00f      	add	sp, #60	; 0x3c
   d4482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4486:	bf00      	nop
   d4488:	2003e638 	.word	0x2003e638
   d448c:	000d6e87 	.word	0x000d6e87
   d4490:	000d6e93 	.word	0x000d6e93
   d4494:	000d6eaa 	.word	0x000d6eaa
   d4498:	000d6ec4 	.word	0x000d6ec4
   d449c:	000d6edc 	.word	0x000d6edc
   d44a0:	000d6e4c 	.word	0x000d6e4c
   d44a4:	2003e614 	.word	0x2003e614
   d44a8:	000d6e4f 	.word	0x000d6e4f
   d44ac:	000d6e6a 	.word	0x000d6e6a
   d44b0:	000d6e4e 	.word	0x000d6e4e

000d44b4 <setup>:
void setup() {
   d44b4:	b510      	push	{r4, lr}
   d44b6:	b096      	sub	sp, #88	; 0x58
  Serial.begin(9600);
   d44b8:	f001 ffee 	bl	d6498 <_Z16_fetch_usbserialv>
   d44bc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d44c0:	f001 ffde 	bl	d6480 <_ZN9USBSerial5beginEl>
  delay(2000);
   d44c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d44c8:	f001 fe68 	bl	d619c <delay>
  BLE.on();
   d44cc:	f001 f8a6 	bl	d561c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d44d0:	f001 f8f2 	bl	d56b8 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   d44d4:	f001 f8a2 	bl	d561c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d44d8:	4a22      	ldr	r2, [pc, #136]	; (d4564 <setup+0xb0>)
   d44da:	4601      	mov	r1, r0
   d44dc:	a80d      	add	r0, sp, #52	; 0x34
   d44de:	f001 fcc5 	bl	d5e6c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d44e2:	a80d      	add	r0, sp, #52	; 0x34
   d44e4:	f001 f969 	bl	d57ba <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   d44e8:	f001 f898 	bl	d561c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d44ec:	4a1e      	ldr	r2, [pc, #120]	; (d4568 <setup+0xb4>)
   d44ee:	4601      	mov	r1, r0
   d44f0:	a80d      	add	r0, sp, #52	; 0x34
   d44f2:	f001 fcbb 	bl	d5e6c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d44f6:	a80d      	add	r0, sp, #52	; 0x34
   d44f8:	f001 f95f 	bl	d57ba <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   d44fc:	a80d      	add	r0, sp, #52	; 0x34
   d44fe:	f000 ff0c 	bl	d531a <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   d4502:	491a      	ldr	r1, [pc, #104]	; (d456c <setup+0xb8>)
   d4504:	a803      	add	r0, sp, #12
   d4506:	f000 fe0b 	bl	d5120 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d450a:	a903      	add	r1, sp, #12
   d450c:	a808      	add	r0, sp, #32
   d450e:	f000 fe07 	bl	d5120 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4512:	a808      	add	r0, sp, #32
   d4514:	f000 fe4a 	bl	d51ac <_ZNK8particle7BleUuid4typeEv>
   d4518:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d451a:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   d451c:	b9cc      	cbnz	r4, d4552 <setup+0x9e>
            uint16_t uuid16 = tempUUID.shorted();
   d451e:	f000 fe64 	bl	d51ea <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4522:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d4524:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4528:	2302      	movs	r3, #2
   d452a:	f10d 020a 	add.w	r2, sp, #10
   d452e:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d4530:	a80d      	add	r0, sp, #52	; 0x34
   d4532:	f000 fee7 	bl	d5304 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   d4536:	f001 f871 	bl	d561c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d453a:	2200      	movs	r2, #0
   d453c:	a90d      	add	r1, sp, #52	; 0x34
   d453e:	f001 f8db 	bl	d56f8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  Wire.begin();
   d4542:	f002 f9d5 	bl	d68f0 <_Z19__fetch_global_Wirev>
   d4546:	f002 f88d 	bl	d6664 <_ZN7TwoWire5beginEv>
  randomizeAddress();
   d454a:	f7ff fe51 	bl	d41f0 <_Z16randomizeAddressv>
}
   d454e:	b016      	add	sp, #88	; 0x58
   d4550:	bd10      	pop	{r4, pc}
   d4552:	f000 fe4f 	bl	d51f4 <_ZNK8particle7BleUuid8rawBytesEv>
   d4556:	2300      	movs	r3, #0
   d4558:	9300      	str	r3, [sp, #0]
   d455a:	4602      	mov	r2, r0
   d455c:	2310      	movs	r3, #16
   d455e:	2107      	movs	r1, #7
   d4560:	e7e6      	b.n	d4530 <setup+0x7c>
   d4562:	bf00      	nop
   d4564:	2003e63c 	.word	0x2003e63c
   d4568:	2003e624 	.word	0x2003e624
   d456c:	2003e5d8 	.word	0x2003e5d8

000d4570 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4570:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4572:	4616      	mov	r6, r2
   d4574:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4576:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d4578:	e9c0 2200 	strd	r2, r2, [r0]
   d457c:	4604      	mov	r4, r0
   d457e:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4580:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d4582:	4619      	mov	r1, r3
   d4584:	a806      	add	r0, sp, #24
   d4586:	f000 fdcb 	bl	d5120 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d458a:	9916      	ldr	r1, [sp, #88]	; 0x58
   d458c:	4638      	mov	r0, r7
   d458e:	f000 fdc7 	bl	d5120 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d4592:	7833      	ldrb	r3, [r6, #0]
   d4594:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4598:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d459a:	9302      	str	r3, [sp, #8]
   d459c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d459e:	4620      	mov	r0, r4
   d45a0:	e9cd 7300 	strd	r7, r3, [sp]
   d45a4:	aa05      	add	r2, sp, #20
   d45a6:	ab06      	add	r3, sp, #24
   d45a8:	4629      	mov	r1, r5
   d45aa:	f001 fb3d 	bl	d5c28 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d45ae:	4620      	mov	r0, r4
   d45b0:	b011      	add	sp, #68	; 0x44
   d45b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d45b4 <_GLOBAL__sub_I_SystemMode>:
   d45b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
              error_(SYSTEM_ERROR_NONE) {
   d45b8:	4d2e      	ldr	r5, [pc, #184]	; (d4674 <_GLOBAL__sub_I_SystemMode+0xc0>)
    SleepResult() {}
   d45ba:	4b2f      	ldr	r3, [pc, #188]	; (d4678 <_GLOBAL__sub_I_SystemMode+0xc4>)
   d45bc:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d45be:	2400      	movs	r4, #0
   d45c0:	b091      	sub	sp, #68	; 0x44
SYSTEM_MODE(MANUAL)
   d45c2:	4e2e      	ldr	r6, [pc, #184]	; (d467c <_GLOBAL__sub_I_SystemMode+0xc8>)
   d45c4:	602c      	str	r4, [r5, #0]
   d45c6:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d45c8:	71ac      	strb	r4, [r5, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d45ca:	2003      	movs	r0, #3
   d45cc:	f000 fa0c 	bl	d49e8 <set_system_mode>
   d45d0:	4628      	mov	r0, r5
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d45d2:	4d2b      	ldr	r5, [pc, #172]	; (d4680 <_GLOBAL__sub_I_SystemMode+0xcc>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d45d4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; d46ac <_GLOBAL__sub_I_SystemMode+0xf8>
SYSTEM_MODE(MANUAL)
   d45d8:	492a      	ldr	r1, [pc, #168]	; (d4684 <_GLOBAL__sub_I_SystemMode+0xd0>)
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d45da:	4f2b      	ldr	r7, [pc, #172]	; (d4688 <_GLOBAL__sub_I_SystemMode+0xd4>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d45dc:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d46b0 <_GLOBAL__sub_I_SystemMode+0xfc>
SYSTEM_MODE(MANUAL)
   d45e0:	4632      	mov	r2, r6
   d45e2:	f002 f9ad 	bl	d6940 <__aeabi_atexit>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d45e6:	4929      	ldr	r1, [pc, #164]	; (d468c <_GLOBAL__sub_I_SystemMode+0xd8>)
   d45e8:	4628      	mov	r0, r5
   d45ea:	f000 fe7f 	bl	d52ec <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d45ee:	4928      	ldr	r1, [pc, #160]	; (d4690 <_GLOBAL__sub_I_SystemMode+0xdc>)
   d45f0:	4640      	mov	r0, r8
   d45f2:	f000 fe7b 	bl	d52ec <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d45f6:	4927      	ldr	r1, [pc, #156]	; (d4694 <_GLOBAL__sub_I_SystemMode+0xe0>)
   d45f8:	4638      	mov	r0, r7
   d45fa:	f000 fe77 	bl	d52ec <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   d45fe:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d4600:	4639      	mov	r1, r7
   d4602:	a806      	add	r0, sp, #24
   d4604:	f88d 3014 	strb.w	r3, [sp, #20]
   d4608:	f000 fd8a 	bl	d5120 <_ZN8particle7BleUuidC1ERKS0_>
   d460c:	4629      	mov	r1, r5
   d460e:	a80b      	add	r0, sp, #44	; 0x2c
   d4610:	f000 fd86 	bl	d5120 <_ZN8particle7BleUuidC1ERKS0_>
   d4614:	4f20      	ldr	r7, [pc, #128]	; (d4698 <_GLOBAL__sub_I_SystemMode+0xe4>)
   d4616:	4921      	ldr	r1, [pc, #132]	; (d469c <_GLOBAL__sub_I_SystemMode+0xe8>)
   d4618:	ab0b      	add	r3, sp, #44	; 0x2c
   d461a:	9300      	str	r3, [sp, #0]
   d461c:	aa05      	add	r2, sp, #20
   d461e:	ab06      	add	r3, sp, #24
   d4620:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4624:	4648      	mov	r0, r9
   d4626:	f7ff ffa3 	bl	d4570 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d462a:	4632      	mov	r2, r6
   d462c:	4639      	mov	r1, r7
   d462e:	4648      	mov	r0, r9
   d4630:	f002 f986 	bl	d6940 <__aeabi_atexit>
   d4634:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   d4636:	4641      	mov	r1, r8
   d4638:	a806      	add	r0, sp, #24
   d463a:	f88d 3014 	strb.w	r3, [sp, #20]
   d463e:	f000 fd6f 	bl	d5120 <_ZN8particle7BleUuidC1ERKS0_>
   d4642:	4629      	mov	r1, r5
   d4644:	a80b      	add	r0, sp, #44	; 0x2c
   d4646:	f000 fd6b 	bl	d5120 <_ZN8particle7BleUuidC1ERKS0_>
   d464a:	4d15      	ldr	r5, [pc, #84]	; (d46a0 <_GLOBAL__sub_I_SystemMode+0xec>)
   d464c:	4b15      	ldr	r3, [pc, #84]	; (d46a4 <_GLOBAL__sub_I_SystemMode+0xf0>)
   d464e:	9301      	str	r3, [sp, #4]
   d4650:	ab0b      	add	r3, sp, #44	; 0x2c
   d4652:	9300      	str	r3, [sp, #0]
   d4654:	aa05      	add	r2, sp, #20
   d4656:	ab06      	add	r3, sp, #24
   d4658:	4913      	ldr	r1, [pc, #76]	; (d46a8 <_GLOBAL__sub_I_SystemMode+0xf4>)
   d465a:	9402      	str	r4, [sp, #8]
   d465c:	4628      	mov	r0, r5
   d465e:	f7ff ff87 	bl	d4570 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4662:	4632      	mov	r2, r6
   d4664:	4639      	mov	r1, r7
   d4666:	4628      	mov	r0, r5
   d4668:	f002 f96a 	bl	d6940 <__aeabi_atexit>
   d466c:	b011      	add	sp, #68	; 0x44
   d466e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4672:	bf00      	nop
   d4674:	2003e5cc 	.word	0x2003e5cc
   d4678:	ffff0000 	.word	0xffff0000
   d467c:	2003e5c8 	.word	0x2003e5c8
   d4680:	2003e5d8 	.word	0x2003e5d8
   d4684:	000d40af 	.word	0x000d40af
   d4688:	2003e600 	.word	0x2003e600
   d468c:	000d6eec 	.word	0x000d6eec
   d4690:	000d6f11 	.word	0x000d6f11
   d4694:	000d6f36 	.word	0x000d6f36
   d4698:	000d57bb 	.word	0x000d57bb
   d469c:	000d6f5b 	.word	0x000d6f5b
   d46a0:	2003e624 	.word	0x2003e624
   d46a4:	000d40c9 	.word	0x000d40c9
   d46a8:	000d6f5e 	.word	0x000d6f5e
   d46ac:	2003e5ec 	.word	0x2003e5ec
   d46b0:	2003e63c 	.word	0x2003e63c

000d46b4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <netdb_freeaddrinfo+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	689b      	ldr	r3, [r3, #8]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	00030268 	.word	0x00030268

000d46c4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <netdb_getaddrinfo+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	68db      	ldr	r3, [r3, #12]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	00030268 	.word	0x00030268

000d46d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <HAL_RNG_GetRandomNumber+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	685b      	ldr	r3, [r3, #4]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	00030218 	.word	0x00030218

000d46e4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <HAL_Delay_Microseconds+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	68db      	ldr	r3, [r3, #12]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	00030218 	.word	0x00030218

000d46f4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	695b      	ldr	r3, [r3, #20]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	00030218 	.word	0x00030218

000d4704 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <hal_ble_stack_init+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	689b      	ldr	r3, [r3, #8]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	00030278 	.word	0x00030278

000d4714 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <hal_ble_gap_set_advertising_data+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	00030278 	.word	0x00030278

000d4724 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <hal_ble_gap_set_scan_response_data+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	00030278 	.word	0x00030278

000d4734 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <hal_ble_gap_start_advertising+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	00030278 	.word	0x00030278

000d4744 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b03      	ldr	r3, [pc, #12]	; (d4754 <hal_ble_gap_disconnect+0x10>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d474e:	9301      	str	r3, [sp, #4]
   d4750:	bd08      	pop	{r3, pc}
   d4752:	0000      	.short	0x0000
   d4754:	00030278 	.word	0x00030278

000d4758 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b03      	ldr	r3, [pc, #12]	; (d4768 <hal_ble_gatt_server_add_service+0x10>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d4762:	9301      	str	r3, [sp, #4]
   d4764:	bd08      	pop	{r3, pc}
   d4766:	0000      	.short	0x0000
   d4768:	00030278 	.word	0x00030278

000d476c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b03      	ldr	r3, [pc, #12]	; (d477c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d4776:	9301      	str	r3, [sp, #4]
   d4778:	bd08      	pop	{r3, pc}
   d477a:	0000      	.short	0x0000
   d477c:	00030278 	.word	0x00030278

000d4780 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b03      	ldr	r3, [pc, #12]	; (d4790 <hal_ble_gatt_client_write_with_response+0x10>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d478a:	9301      	str	r3, [sp, #4]
   d478c:	bd08      	pop	{r3, pc}
   d478e:	0000      	.short	0x0000
   d4790:	00030278 	.word	0x00030278

000d4794 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b03      	ldr	r3, [pc, #12]	; (d47a4 <hal_ble_gatt_client_write_without_response+0x10>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d479e:	9301      	str	r3, [sp, #4]
   d47a0:	bd08      	pop	{r3, pc}
   d47a2:	0000      	.short	0x0000
   d47a4:	00030278 	.word	0x00030278

000d47a8 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d47a8:	b508      	push	{r3, lr}
   d47aa:	4b03      	ldr	r3, [pc, #12]	; (d47b8 <hal_ble_gatt_server_add_characteristic+0x10>)
   d47ac:	681b      	ldr	r3, [r3, #0]
   d47ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d47b2:	9301      	str	r3, [sp, #4]
   d47b4:	bd08      	pop	{r3, pc}
   d47b6:	0000      	.short	0x0000
   d47b8:	00030278 	.word	0x00030278

000d47bc <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b03      	ldr	r3, [pc, #12]	; (d47cc <hal_ble_set_callback_on_periph_link_events+0x10>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d47c6:	9301      	str	r3, [sp, #4]
   d47c8:	bd08      	pop	{r3, pc}
   d47ca:	0000      	.short	0x0000
   d47cc:	00030278 	.word	0x00030278

000d47d0 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b03      	ldr	r3, [pc, #12]	; (d47e0 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d47da:	9301      	str	r3, [sp, #4]
   d47dc:	bd08      	pop	{r3, pc}
   d47de:	0000      	.short	0x0000
   d47e0:	00030278 	.word	0x00030278

000d47e4 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b03      	ldr	r3, [pc, #12]	; (d47f4 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d47ee:	9301      	str	r3, [sp, #4]
   d47f0:	bd08      	pop	{r3, pc}
   d47f2:	0000      	.short	0x0000
   d47f4:	00030278 	.word	0x00030278

000d47f8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <os_mutex_recursive_create+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	00030248 	.word	0x00030248

000d4808 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <os_mutex_recursive_destroy+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	00030248 	.word	0x00030248

000d4818 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <os_mutex_recursive_lock+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	00030248 	.word	0x00030248

000d4828 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <os_mutex_recursive_unlock+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	00030248 	.word	0x00030248

000d4838 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <inet_inet_ntop+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	695b      	ldr	r3, [r3, #20]
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	00030264 	.word	0x00030264

000d4848 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <hal_usart_init+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	681b      	ldr	r3, [r3, #0]
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	0003023c 	.word	0x0003023c

000d4858 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <hal_usart_write+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	68db      	ldr	r3, [r3, #12]
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	0003023c 	.word	0x0003023c

000d4868 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <hal_usart_available+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	691b      	ldr	r3, [r3, #16]
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	0003023c 	.word	0x0003023c

000d4878 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <hal_usart_read+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	695b      	ldr	r3, [r3, #20]
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	0003023c 	.word	0x0003023c

000d4888 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <hal_usart_peek+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	699b      	ldr	r3, [r3, #24]
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	0003023c 	.word	0x0003023c

000d4898 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <hal_usart_flush+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	69db      	ldr	r3, [r3, #28]
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	0003023c 	.word	0x0003023c

000d48a8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <hal_usart_available_data_for_write+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	0003023c 	.word	0x0003023c

000d48b8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <hal_i2c_begin+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	68db      	ldr	r3, [r3, #12]
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	00030228 	.word	0x00030228

000d48c8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <hal_i2c_begin_transmission+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	699b      	ldr	r3, [r3, #24]
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	00030228 	.word	0x00030228

000d48d8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <hal_i2c_end_transmission+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	69db      	ldr	r3, [r3, #28]
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	00030228 	.word	0x00030228

000d48e8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <hal_i2c_write+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	6a1b      	ldr	r3, [r3, #32]
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	00030228 	.word	0x00030228

000d48f8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <hal_i2c_available+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	00030228 	.word	0x00030228

000d4908 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <hal_i2c_read+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030228 	.word	0x00030228

000d4918 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <hal_i2c_peek+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030228 	.word	0x00030228

000d4928 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <hal_i2c_flush+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	00030228 	.word	0x00030228

000d4938 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <hal_i2c_init+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	00030228 	.word	0x00030228

000d4948 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <hal_i2c_request_ex+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	00030228 	.word	0x00030228

000d4958 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <HAL_USB_USART_Init+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	681b      	ldr	r3, [r3, #0]
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	0003024c 	.word	0x0003024c

000d4968 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <HAL_USB_USART_Begin+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	685b      	ldr	r3, [r3, #4]
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	0003024c 	.word	0x0003024c

000d4978 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <HAL_USB_USART_Available_Data+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	691b      	ldr	r3, [r3, #16]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	0003024c 	.word	0x0003024c

000d4988 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	695b      	ldr	r3, [r3, #20]
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	0003024c 	.word	0x0003024c

000d4998 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <HAL_USB_USART_Receive_Data+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	699b      	ldr	r3, [r3, #24]
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	0003024c 	.word	0x0003024c

000d49a8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <HAL_USB_USART_Send_Data+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	69db      	ldr	r3, [r3, #28]
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	0003024c 	.word	0x0003024c

000d49b8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <HAL_USB_USART_Flush_Data+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	6a1b      	ldr	r3, [r3, #32]
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	0003024c 	.word	0x0003024c

000d49c8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <panic_+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	00030260 	.word	0x00030260

000d49d8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <log_message+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	00030260 	.word	0x00030260

000d49e8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <set_system_mode+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	685b      	ldr	r3, [r3, #4]
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	00030220 	.word	0x00030220

000d49f8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <system_delay_ms+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	695b      	ldr	r3, [r3, #20]
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	00030220 	.word	0x00030220

000d4a08 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b03      	ldr	r3, [pc, #12]	; (d4a18 <system_ctrl_set_app_request_handler+0x10>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4a12:	9301      	str	r3, [sp, #4]
   d4a14:	bd08      	pop	{r3, pc}
   d4a16:	0000      	.short	0x0000
   d4a18:	00030220 	.word	0x00030220

000d4a1c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4a1c:	b508      	push	{r3, lr}
   d4a1e:	4b03      	ldr	r3, [pc, #12]	; (d4a2c <system_ctrl_set_result+0x10>)
   d4a20:	681b      	ldr	r3, [r3, #0]
   d4a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4a26:	9301      	str	r3, [sp, #4]
   d4a28:	bd08      	pop	{r3, pc}
   d4a2a:	0000      	.short	0x0000
   d4a2c:	00030220 	.word	0x00030220

000d4a30 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <network_connect+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	685b      	ldr	r3, [r3, #4]
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030240 	.word	0x00030240

000d4a40 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <network_connecting+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	689b      	ldr	r3, [r3, #8]
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	00030240 	.word	0x00030240

000d4a50 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <network_disconnect+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	68db      	ldr	r3, [r3, #12]
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	00030240 	.word	0x00030240

000d4a60 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <network_ready+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	691b      	ldr	r3, [r3, #16]
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	00030240 	.word	0x00030240

000d4a70 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <network_on+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	695b      	ldr	r3, [r3, #20]
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	00030240 	.word	0x00030240

000d4a80 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <network_off+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	699b      	ldr	r3, [r3, #24]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	00030240 	.word	0x00030240

000d4a90 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <network_listen+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	69db      	ldr	r3, [r3, #28]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	00030240 	.word	0x00030240

000d4aa0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <network_listening+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	6a1b      	ldr	r3, [r3, #32]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	00030240 	.word	0x00030240

000d4ab0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <network_set_listen_timeout+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	00030240 	.word	0x00030240

000d4ac0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <network_get_listen_timeout+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	00030240 	.word	0x00030240

000d4ad0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <network_is_on+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	00030240 	.word	0x00030240

000d4ae0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <network_is_off+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	00030240 	.word	0x00030240

000d4af0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <spark_set_random_seed_from_cloud_handler+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	00030244 	.word	0x00030244

000d4b00 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <malloc+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	681b      	ldr	r3, [r3, #0]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	0003021c 	.word	0x0003021c

000d4b10 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <free+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	685b      	ldr	r3, [r3, #4]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	0003021c 	.word	0x0003021c

000d4b20 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <realloc+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	689b      	ldr	r3, [r3, #8]
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	0003021c 	.word	0x0003021c

000d4b30 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <abort+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	0003021c 	.word	0x0003021c

000d4b40 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <newlib_impure_ptr_callback+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	0003021c 	.word	0x0003021c

000d4b50 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4b50:	2200      	movs	r2, #0
   d4b52:	6840      	ldr	r0, [r0, #4]
   d4b54:	4611      	mov	r1, r2
   d4b56:	f7ff bfa3 	b.w	d4aa0 <network_listening>

000d4b5a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4b5a:	2200      	movs	r2, #0
   d4b5c:	6840      	ldr	r0, [r0, #4]
   d4b5e:	4611      	mov	r1, r2
   d4b60:	f7ff bfae 	b.w	d4ac0 <network_get_listen_timeout>

000d4b64 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4b64:	6840      	ldr	r0, [r0, #4]
   d4b66:	2200      	movs	r2, #0
   d4b68:	f7ff bfa2 	b.w	d4ab0 <network_set_listen_timeout>

000d4b6c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4b6c:	6840      	ldr	r0, [r0, #4]
   d4b6e:	2200      	movs	r2, #0
   d4b70:	f081 0101 	eor.w	r1, r1, #1
   d4b74:	f7ff bf8c 	b.w	d4a90 <network_listen>

000d4b78 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4b78:	2300      	movs	r3, #0
   d4b7a:	6840      	ldr	r0, [r0, #4]
   d4b7c:	461a      	mov	r2, r3
   d4b7e:	4619      	mov	r1, r3
   d4b80:	f7ff bf7e 	b.w	d4a80 <network_off>

000d4b84 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4b84:	2300      	movs	r3, #0
   d4b86:	6840      	ldr	r0, [r0, #4]
   d4b88:	461a      	mov	r2, r3
   d4b8a:	4619      	mov	r1, r3
   d4b8c:	f7ff bf70 	b.w	d4a70 <network_on>

000d4b90 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4b90:	2200      	movs	r2, #0
   d4b92:	6840      	ldr	r0, [r0, #4]
   d4b94:	4611      	mov	r1, r2
   d4b96:	f7ff bf63 	b.w	d4a60 <network_ready>

000d4b9a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4b9a:	2200      	movs	r2, #0
   d4b9c:	6840      	ldr	r0, [r0, #4]
   d4b9e:	4611      	mov	r1, r2
   d4ba0:	f7ff bf4e 	b.w	d4a40 <network_connecting>

000d4ba4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ba4:	6840      	ldr	r0, [r0, #4]
   d4ba6:	2200      	movs	r2, #0
   d4ba8:	2102      	movs	r1, #2
   d4baa:	f7ff bf51 	b.w	d4a50 <network_disconnect>

000d4bae <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4bae:	2300      	movs	r3, #0
   d4bb0:	6840      	ldr	r0, [r0, #4]
   d4bb2:	461a      	mov	r2, r3
   d4bb4:	f7ff bf3c 	b.w	d4a30 <network_connect>

000d4bb8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4bb8:	4b02      	ldr	r3, [pc, #8]	; (d4bc4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4bba:	2203      	movs	r2, #3
   d4bbc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4bbe:	4a02      	ldr	r2, [pc, #8]	; (d4bc8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4bc0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4bc2:	4770      	bx	lr
   d4bc4:	2003e644 	.word	0x2003e644
   d4bc8:	000d6f6c 	.word	0x000d6f6c

000d4bcc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4bcc:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4bce:	4b09      	ldr	r3, [pc, #36]	; (d4bf4 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4bd0:	4c09      	ldr	r4, [pc, #36]	; (d4bf8 <_GLOBAL__sub_I_System+0x2c>)
   d4bd2:	2202      	movs	r2, #2
   d4bd4:	2000      	movs	r0, #0
   d4bd6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4bd8:	4b08      	ldr	r3, [pc, #32]	; (d4bfc <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4bda:	6020      	str	r0, [r4, #0]
   d4bdc:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4bde:	71a0      	strb	r0, [r4, #6]
   d4be0:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4be2:	f7ff ff01 	bl	d49e8 <set_system_mode>
SystemClass System;
   d4be6:	4620      	mov	r0, r4
   d4be8:	4a05      	ldr	r2, [pc, #20]	; (d4c00 <_GLOBAL__sub_I_System+0x34>)
   d4bea:	4906      	ldr	r1, [pc, #24]	; (d4c04 <_GLOBAL__sub_I_System+0x38>)
   d4bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4bf0:	f001 bea6 	b.w	d6940 <__aeabi_atexit>
   d4bf4:	2003e658 	.word	0x2003e658
   d4bf8:	2003e64c 	.word	0x2003e64c
   d4bfc:	ffff0000 	.word	0xffff0000
   d4c00:	2003e5c8 	.word	0x2003e5c8
   d4c04:	000d40af 	.word	0x000d40af

000d4c08 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4c08:	b510      	push	{r4, lr}
   d4c0a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4c0c:	f002 f83c 	bl	d6c88 <strlen>
   d4c10:	3801      	subs	r0, #1
   d4c12:	1823      	adds	r3, r4, r0
   d4c14:	4620      	mov	r0, r4
	while(i<j){
   d4c16:	4283      	cmp	r3, r0
   d4c18:	d906      	bls.n	d4c28 <_Z11str_reversePc+0x20>
		c = *i;
   d4c1a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4c1c:	7819      	ldrb	r1, [r3, #0]
   d4c1e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d4c22:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d4c26:	e7f6      	b.n	d4c16 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d4c28:	bd10      	pop	{r4, pc}

000d4c2a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4c2a:	b570      	push	{r4, r5, r6, lr}
   d4c2c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d4c2e:	1e91      	subs	r1, r2, #2
   d4c30:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4c32:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d4c34:	d822      	bhi.n	d4c7c <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d4c36:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d4c38:	b16d      	cbz	r5, d4c56 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4c3a:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d4c3e:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d4c42:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d4c44:	2d09      	cmp	r5, #9
                *ptr += '0';
   d4c46:	bf94      	ite	ls
   d4c48:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d4c4a:	3157      	addhi	r1, #87	; 0x57
   d4c4c:	b2c9      	uxtb	r1, r1
   d4c4e:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d4c52:	4635      	mov	r5, r6
	while(a){
   d4c54:	e7f0      	b.n	d4c38 <ultoa+0xe>
   d4c56:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d4c58:	4423      	add	r3, r4
            *ptr++ = '0';
   d4c5a:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d4c5c:	4293      	cmp	r3, r2
   d4c5e:	d902      	bls.n	d4c66 <ultoa+0x3c>
            *ptr++ = '0';
   d4c60:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d4c64:	e7fa      	b.n	d4c5c <ultoa+0x32>
   d4c66:	1a1a      	subs	r2, r3, r0
   d4c68:	4283      	cmp	r3, r0
   d4c6a:	bf38      	it	cc
   d4c6c:	2200      	movcc	r2, #0

	*ptr = '\0';
   d4c6e:	2300      	movs	r3, #0
   d4c70:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d4c72:	4620      	mov	r0, r4
   d4c74:	f7ff ffc8 	bl	d4c08 <_Z11str_reversePc>
	return buffer;
   d4c78:	4620      	mov	r0, r4
}
   d4c7a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d4c7c:	2000      	movs	r0, #0
   d4c7e:	e7fc      	b.n	d4c7a <ultoa+0x50>

000d4c80 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4c80:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d4c82:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4c84:	460c      	mov	r4, r1
   d4c86:	4615      	mov	r5, r2
	if(a<0){
   d4c88:	da0e      	bge.n	d4ca8 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d4c8e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4c92:	bf14      	ite	ne
   d4c94:	4258      	negne	r0, r3
   d4c96:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d4c98:	2301      	movs	r3, #1
		*buffer = '-';
   d4c9a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d4c9c:	462a      	mov	r2, r5
   d4c9e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d4ca0:	f7ff ffc3 	bl	d4c2a <ultoa>
	}
	return buffer;
}
   d4ca4:	4620      	mov	r0, r4
   d4ca6:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d4ca8:	2301      	movs	r3, #1
   d4caa:	e7f9      	b.n	d4ca0 <itoa+0x20>

000d4cac <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4cac:	b510      	push	{r4, lr}
   d4cae:	4604      	mov	r4, r0
{
	free(buffer);
   d4cb0:	6800      	ldr	r0, [r0, #0]
   d4cb2:	f7ff ff2d 	bl	d4b10 <free>
}
   d4cb6:	4620      	mov	r0, r4
   d4cb8:	bd10      	pop	{r4, pc}

000d4cba <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4cba:	b510      	push	{r4, lr}
   d4cbc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4cbe:	6800      	ldr	r0, [r0, #0]
   d4cc0:	b108      	cbz	r0, d4cc6 <_ZN6String10invalidateEv+0xc>
   d4cc2:	f7ff ff25 	bl	d4b10 <free>
	buffer = NULL;
   d4cc6:	2300      	movs	r3, #0
	capacity = len = 0;
   d4cc8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4ccc:	6023      	str	r3, [r4, #0]
}
   d4cce:	bd10      	pop	{r4, pc}

000d4cd0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4cd0:	b538      	push	{r3, r4, r5, lr}
   d4cd2:	4604      	mov	r4, r0
   d4cd4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4cd6:	6800      	ldr	r0, [r0, #0]
   d4cd8:	3101      	adds	r1, #1
   d4cda:	f7ff ff21 	bl	d4b20 <realloc>
	if (newbuffer) {
   d4cde:	b110      	cbz	r0, d4ce6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4ce0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4ce4:	2001      	movs	r0, #1
	}
	return 0;
}
   d4ce6:	bd38      	pop	{r3, r4, r5, pc}

000d4ce8 <_ZN6String7reserveEj>:
{
   d4ce8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4cea:	6803      	ldr	r3, [r0, #0]
{
   d4cec:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4cee:	b123      	cbz	r3, d4cfa <_ZN6String7reserveEj+0x12>
   d4cf0:	6843      	ldr	r3, [r0, #4]
   d4cf2:	428b      	cmp	r3, r1
   d4cf4:	d301      	bcc.n	d4cfa <_ZN6String7reserveEj+0x12>
   d4cf6:	2001      	movs	r0, #1
}
   d4cf8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4cfa:	4620      	mov	r0, r4
   d4cfc:	f7ff ffe8 	bl	d4cd0 <_ZN6String12changeBufferEj>
   d4d00:	2800      	cmp	r0, #0
   d4d02:	d0f9      	beq.n	d4cf8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4d04:	68a3      	ldr	r3, [r4, #8]
   d4d06:	2b00      	cmp	r3, #0
   d4d08:	d1f5      	bne.n	d4cf6 <_ZN6String7reserveEj+0xe>
   d4d0a:	6822      	ldr	r2, [r4, #0]
   d4d0c:	7013      	strb	r3, [r2, #0]
   d4d0e:	e7f2      	b.n	d4cf6 <_ZN6String7reserveEj+0xe>

000d4d10 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4d12:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4d14:	4611      	mov	r1, r2
   d4d16:	9201      	str	r2, [sp, #4]
{
   d4d18:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4d1a:	f7ff ffe5 	bl	d4ce8 <_ZN6String7reserveEj>
   d4d1e:	9a01      	ldr	r2, [sp, #4]
   d4d20:	b928      	cbnz	r0, d4d2e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4d22:	4620      	mov	r0, r4
   d4d24:	f7ff ffc9 	bl	d4cba <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4d28:	4620      	mov	r0, r4
   d4d2a:	b003      	add	sp, #12
   d4d2c:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4d2e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4d30:	4629      	mov	r1, r5
   d4d32:	6820      	ldr	r0, [r4, #0]
   d4d34:	f001 ff42 	bl	d6bbc <memcpy>
	buffer[len] = 0;
   d4d38:	6822      	ldr	r2, [r4, #0]
   d4d3a:	68a3      	ldr	r3, [r4, #8]
   d4d3c:	2100      	movs	r1, #0
   d4d3e:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4d40:	e7f2      	b.n	d4d28 <_ZN6String4copyEPKcj+0x18>

000d4d42 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d4d42:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4d44:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4d46:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4d4a:	4604      	mov	r4, r0
	len = 0;
   d4d4c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4d4e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d4d50:	b141      	cbz	r1, d4d64 <_ZN6StringC1EPKc+0x22>
   d4d52:	4608      	mov	r0, r1
   d4d54:	9101      	str	r1, [sp, #4]
   d4d56:	f001 ff97 	bl	d6c88 <strlen>
   d4d5a:	9901      	ldr	r1, [sp, #4]
   d4d5c:	4602      	mov	r2, r0
   d4d5e:	4620      	mov	r0, r4
   d4d60:	f7ff ffd6 	bl	d4d10 <_ZN6String4copyEPKcj>
}
   d4d64:	4620      	mov	r0, r4
   d4d66:	b002      	add	sp, #8
   d4d68:	bd10      	pop	{r4, pc}

000d4d6a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4d6a:	b513      	push	{r0, r1, r4, lr}
   d4d6c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4d6e:	b159      	cbz	r1, d4d88 <_ZN6StringaSEPKc+0x1e>
   d4d70:	4608      	mov	r0, r1
   d4d72:	9101      	str	r1, [sp, #4]
   d4d74:	f001 ff88 	bl	d6c88 <strlen>
   d4d78:	9901      	ldr	r1, [sp, #4]
   d4d7a:	4602      	mov	r2, r0
   d4d7c:	4620      	mov	r0, r4
   d4d7e:	f7ff ffc7 	bl	d4d10 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4d82:	4620      	mov	r0, r4
   d4d84:	b002      	add	sp, #8
   d4d86:	bd10      	pop	{r4, pc}
	else invalidate();
   d4d88:	f7ff ff97 	bl	d4cba <_ZN6String10invalidateEv>
   d4d8c:	e7f9      	b.n	d4d82 <_ZN6StringaSEPKc+0x18>

000d4d8e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d4d8e:	b510      	push	{r4, lr}
   d4d90:	4604      	mov	r4, r0
   d4d92:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d4d94:	2300      	movs	r3, #0
	capacity = 0;
   d4d96:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d4d9a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d4d9c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d4d9e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d4da0:	a901      	add	r1, sp, #4
   d4da2:	f7ff ff6d 	bl	d4c80 <itoa>
	*this = buf;
   d4da6:	a901      	add	r1, sp, #4
   d4da8:	4620      	mov	r0, r4
   d4daa:	f7ff ffde 	bl	d4d6a <_ZN6StringaSEPKc>
}
   d4dae:	4620      	mov	r0, r4
   d4db0:	b00a      	add	sp, #40	; 0x28
   d4db2:	bd10      	pop	{r4, pc}

000d4db4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d4db4:	b570      	push	{r4, r5, r6, lr}
   d4db6:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d4db8:	460e      	mov	r6, r1
   d4dba:	b909      	cbnz	r1, d4dc0 <_ZN6String6concatEPKcj+0xc>
   d4dbc:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d4dbe:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d4dc0:	b16a      	cbz	r2, d4dde <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d4dc2:	6884      	ldr	r4, [r0, #8]
   d4dc4:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d4dc6:	4621      	mov	r1, r4
   d4dc8:	f7ff ff8e 	bl	d4ce8 <_ZN6String7reserveEj>
   d4dcc:	2800      	cmp	r0, #0
   d4dce:	d0f5      	beq.n	d4dbc <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d4dd0:	6828      	ldr	r0, [r5, #0]
   d4dd2:	68ab      	ldr	r3, [r5, #8]
   d4dd4:	4631      	mov	r1, r6
   d4dd6:	4418      	add	r0, r3
   d4dd8:	f001 ff4e 	bl	d6c78 <strcpy>
	len = newlen;
   d4ddc:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d4dde:	2001      	movs	r0, #1
   d4de0:	e7ed      	b.n	d4dbe <_ZN6String6concatEPKcj+0xa>

000d4de2 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d4de2:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d4de4:	2300      	movs	r3, #0
	buf[0] = c;
   d4de6:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d4dea:	2201      	movs	r2, #1
   d4dec:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d4dee:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d4df2:	f7ff ffdf 	bl	d4db4 <_ZN6String6concatEPKcj>
}
   d4df6:	b003      	add	sp, #12
   d4df8:	f85d fb04 	ldr.w	pc, [sp], #4

000d4dfc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d4dfc:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d4dfe:	688a      	ldr	r2, [r1, #8]
   d4e00:	6809      	ldr	r1, [r1, #0]
{
   d4e02:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d4e04:	f7ff ffd6 	bl	d4db4 <_ZN6String6concatEPKcj>
   d4e08:	b910      	cbnz	r0, d4e10 <_ZplRK15StringSumHelperRK6String+0x14>
   d4e0a:	4620      	mov	r0, r4
   d4e0c:	f7ff ff55 	bl	d4cba <_ZN6String10invalidateEv>
	return a;
}
   d4e10:	4620      	mov	r0, r4
   d4e12:	bd10      	pop	{r4, pc}

000d4e14 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4e14:	4770      	bx	lr

000d4e16 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d4e16:	4770      	bx	lr

000d4e18 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d4e18:	4770      	bx	lr

000d4e1a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4e1a:	4770      	bx	lr

000d4e1c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d4e1c:	4b06      	ldr	r3, [pc, #24]	; (d4e38 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d4e1e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d4e20:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d4e22:	f100 040c 	add.w	r4, r0, #12
	    ||
   d4e26:	d005      	beq.n	d4e34 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d4e28:	4608      	mov	r0, r1
   d4e2a:	f001 fd95 	bl	d6958 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d4e2e:	2800      	cmp	r0, #0
	return nullptr;
   d4e30:	bf08      	it	eq
   d4e32:	2400      	moveq	r4, #0
      }
   d4e34:	4620      	mov	r0, r4
   d4e36:	bd10      	pop	{r4, pc}
   d4e38:	000d70e8 	.word	0x000d70e8

000d4e3c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d4e3c:	4b06      	ldr	r3, [pc, #24]	; (d4e58 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d4e3e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d4e40:	b510      	push	{r4, lr}
   d4e42:	f100 040c 	add.w	r4, r0, #12
	    ||
   d4e46:	d005      	beq.n	d4e54 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d4e48:	4608      	mov	r0, r1
   d4e4a:	f001 fd85 	bl	d6958 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d4e4e:	2800      	cmp	r0, #0
	return nullptr;
   d4e50:	bf08      	it	eq
   d4e52:	2400      	moveq	r4, #0
      }
   d4e54:	4620      	mov	r0, r4
   d4e56:	bd10      	pop	{r4, pc}
   d4e58:	000d70e8 	.word	0x000d70e8

000d4e5c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d4e5c:	4b06      	ldr	r3, [pc, #24]	; (d4e78 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d4e5e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d4e60:	b510      	push	{r4, lr}
   d4e62:	f100 040c 	add.w	r4, r0, #12
	    ||
   d4e66:	d005      	beq.n	d4e74 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d4e68:	4608      	mov	r0, r1
   d4e6a:	f001 fd75 	bl	d6958 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d4e6e:	2800      	cmp	r0, #0
	return nullptr;
   d4e70:	bf08      	it	eq
   d4e72:	2400      	moveq	r4, #0
      }
   d4e74:	4620      	mov	r0, r4
   d4e76:	bd10      	pop	{r4, pc}
   d4e78:	000d70e8 	.word	0x000d70e8

000d4e7c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4e7c:	b510      	push	{r4, lr}
   d4e7e:	2168      	movs	r1, #104	; 0x68
   d4e80:	4604      	mov	r4, r0
   d4e82:	f001 fd62 	bl	d694a <_ZdlPvj>
   d4e86:	4620      	mov	r0, r4
   d4e88:	bd10      	pop	{r4, pc}

000d4e8a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d4e8a:	b510      	push	{r4, lr}
   d4e8c:	2128      	movs	r1, #40	; 0x28
   d4e8e:	4604      	mov	r4, r0
   d4e90:	f001 fd5b 	bl	d694a <_ZdlPvj>
   d4e94:	4620      	mov	r0, r4
   d4e96:	bd10      	pop	{r4, pc}

000d4e98 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d4e98:	b510      	push	{r4, lr}
   d4e9a:	2130      	movs	r1, #48	; 0x30
   d4e9c:	4604      	mov	r4, r0
   d4e9e:	f001 fd54 	bl	d694a <_ZdlPvj>
   d4ea2:	4620      	mov	r0, r4
   d4ea4:	bd10      	pop	{r4, pc}

000d4ea6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d4ea6:	f7ff b8f8 	b.w	d409a <_ZdlPv>

000d4eaa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d4eaa:	f7ff b8f6 	b.w	d409a <_ZdlPv>

000d4eae <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d4eae:	f7ff b8f4 	b.w	d409a <_ZdlPv>

000d4eb2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4eb2:	b510      	push	{r4, lr}
          _M_dispose();
   d4eb4:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4eb6:	4604      	mov	r4, r0
          _M_dispose();
   d4eb8:	689b      	ldr	r3, [r3, #8]
   d4eba:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4ebc:	68a3      	ldr	r3, [r4, #8]
   d4ebe:	3b01      	subs	r3, #1
   d4ec0:	60a3      	str	r3, [r4, #8]
   d4ec2:	b92b      	cbnz	r3, d4ed0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4ec4:	6823      	ldr	r3, [r4, #0]
   d4ec6:	4620      	mov	r0, r4
   d4ec8:	68db      	ldr	r3, [r3, #12]
    }
   d4eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4ece:	4718      	bx	r3
    }
   d4ed0:	bd10      	pop	{r4, pc}

000d4ed2 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4ed2:	b510      	push	{r4, lr}
   d4ed4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4ed6:	6800      	ldr	r0, [r0, #0]
   d4ed8:	b108      	cbz	r0, d4ede <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4eda:	f7ff fc95 	bl	d4808 <os_mutex_recursive_destroy>
    }
   d4ede:	4620      	mov	r0, r4
   d4ee0:	bd10      	pop	{r4, pc}
	...

000d4ee4 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d4ee4:	b510      	push	{r4, lr}
        mutex_.lock();
   d4ee6:	4b04      	ldr	r3, [pc, #16]	; (d4ef8 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d4ee8:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4eea:	6818      	ldr	r0, [r3, #0]
   d4eec:	f7ff fc94 	bl	d4818 <os_mutex_recursive_lock>
        locked_ = true;
   d4ef0:	2301      	movs	r3, #1
   d4ef2:	7023      	strb	r3, [r4, #0]
    }
   d4ef4:	bd10      	pop	{r4, pc}
   d4ef6:	bf00      	nop
   d4ef8:	2003e664 	.word	0x2003e664

000d4efc <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d4efc:	b510      	push	{r4, lr}
        mutex_.unlock();
   d4efe:	4b04      	ldr	r3, [pc, #16]	; (d4f10 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d4f00:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4f02:	6818      	ldr	r0, [r3, #0]
   d4f04:	f7ff fc90 	bl	d4828 <os_mutex_recursive_unlock>
        locked_ = false;
   d4f08:	2300      	movs	r3, #0
   d4f0a:	7023      	strb	r3, [r4, #0]
    }
   d4f0c:	bd10      	pop	{r4, pc}
   d4f0e:	bf00      	nop
   d4f10:	2003e664 	.word	0x2003e664

000d4f14 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d4f14:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4f16:	2500      	movs	r5, #0
   d4f18:	1cec      	adds	r4, r5, #3
   d4f1a:	428c      	cmp	r4, r1
   d4f1c:	d80d      	bhi.n	d4f3a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d4f1e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d4f20:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d4f22:	5d87      	ldrb	r7, [r0, r6]
   d4f24:	4297      	cmp	r7, r2
   d4f26:	d105      	bne.n	d4f34 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d4f28:	4426      	add	r6, r4
   d4f2a:	42b1      	cmp	r1, r6
   d4f2c:	d305      	bcc.n	d4f3a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d4f2e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d4f30:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d4f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d4f34:	3401      	adds	r4, #1
   d4f36:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4f38:	e7ee      	b.n	d4f18 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d4f3a:	2000      	movs	r0, #0
   d4f3c:	e7f9      	b.n	d4f32 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d4f3e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d4f3e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4f42:	4604      	mov	r4, r0
   d4f44:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d4f48:	461e      	mov	r6, r3
   d4f4a:	4689      	mov	r9, r1
   d4f4c:	ab01      	add	r3, sp, #4
   d4f4e:	4690      	mov	r8, r2
   d4f50:	460a      	mov	r2, r1
   d4f52:	6a01      	ldr	r1, [r0, #32]
   d4f54:	f7ff ffde 	bl	d4f14 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d4f58:	6a25      	ldr	r5, [r4, #32]
   d4f5a:	1cb3      	adds	r3, r6, #2
   d4f5c:	bb17      	cbnz	r7, d4fa4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d4f5e:	b308      	cbz	r0, d4fa4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4f60:	195f      	adds	r7, r3, r5
   d4f62:	1a3f      	subs	r7, r7, r0
   d4f64:	2f1f      	cmp	r7, #31
   d4f66:	d819      	bhi.n	d4f9c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d4f68:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d4f6c:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d4f70:	eba5 0209 	sub.w	r2, r5, r9
   d4f74:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d4f76:	eb00 0109 	add.w	r1, r0, r9
   d4f7a:	eb06 000a 	add.w	r0, r6, sl
   d4f7e:	b292      	uxth	r2, r2
   d4f80:	4421      	add	r1, r4
   d4f82:	4420      	add	r0, r4
   d4f84:	f001 fe28 	bl	d6bd8 <memmove>
            selfData_[offset] = len + 1;
   d4f88:	1c73      	adds	r3, r6, #1
   d4f8a:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d4f8e:	4632      	mov	r2, r6
   d4f90:	4641      	mov	r1, r8
   d4f92:	eb04 000a 	add.w	r0, r4, sl
   d4f96:	f001 fe11 	bl	d6bbc <memcpy>
            selfLen_ = staLen + len + 2;
   d4f9a:	6227      	str	r7, [r4, #32]
}
   d4f9c:	6a20      	ldr	r0, [r4, #32]
   d4f9e:	b002      	add	sp, #8
   d4fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4fa4:	442b      	add	r3, r5
   d4fa6:	2b1f      	cmp	r3, #31
   d4fa8:	d8f8      	bhi.n	d4f9c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d4faa:	1c73      	adds	r3, r6, #1
   d4fac:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4fae:	1ca8      	adds	r0, r5, #2
   d4fb0:	4425      	add	r5, r4
   d4fb2:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d4fb4:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4fb6:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d4fba:	4641      	mov	r1, r8
   d4fbc:	4420      	add	r0, r4
   d4fbe:	f001 fdfd 	bl	d6bbc <memcpy>
        selfLen_ += len;
   d4fc2:	6a23      	ldr	r3, [r4, #32]
   d4fc4:	4433      	add	r3, r6
   d4fc6:	6223      	str	r3, [r4, #32]
   d4fc8:	e7e8      	b.n	d4f9c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
	...

000d4fcc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d4fcc:	4a02      	ldr	r2, [pc, #8]	; (d4fd8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d4fce:	2100      	movs	r1, #0
   d4fd0:	200a      	movs	r0, #10
   d4fd2:	f7ff bcf9 	b.w	d49c8 <panic_>
   d4fd6:	bf00      	nop
   d4fd8:	000d46e5 	.word	0x000d46e5

000d4fdc <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4fdc:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4fde:	b538      	push	{r3, r4, r5, lr}
   d4fe0:	4604      	mov	r4, r0
	  switch (__op)
   d4fe2:	d007      	beq.n	d4ff4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x18>
   d4fe4:	2a03      	cmp	r2, #3
   d4fe6:	d011      	beq.n	d500c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x30>
   d4fe8:	2a01      	cmp	r2, #1
   d4fea:	d101      	bne.n	d4ff0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4fec:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d4fee:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4ff0:	2000      	movs	r0, #0
   d4ff2:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4ff4:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d4ff6:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4ff8:	f7ff f84b 	bl	d4092 <_Znwj>
   d4ffc:	4603      	mov	r3, r0
   d4ffe:	2800      	cmp	r0, #0
   d5000:	d0f5      	beq.n	d4fee <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
   d5002:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5006:	e883 0003 	stmia.w	r3, {r0, r1}
   d500a:	e7f0      	b.n	d4fee <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d500c:	6800      	ldr	r0, [r0, #0]
   d500e:	2800      	cmp	r0, #0
   d5010:	d0ee      	beq.n	d4ff0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
   d5012:	2108      	movs	r1, #8
   d5014:	f001 fc99 	bl	d694a <_ZdlPvj>
   d5018:	e7ea      	b.n	d4ff0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>

000d501a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d501a:	b430      	push	{r4, r5}
   d501c:	460d      	mov	r5, r1
   d501e:	4611      	mov	r1, r2
   d5020:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   d5022:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5024:	6809      	ldr	r1, [r1, #0]
   d5026:	6828      	ldr	r0, [r5, #0]
   d5028:	e9d3 4300 	ldrd	r4, r3, [r3]
   d502c:	46a4      	mov	ip, r4
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d502e:	bc30      	pop	{r4, r5}
   d5030:	4760      	bx	ip

000d5032 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d5032:	b510      	push	{r4, lr}
      if (_M_manager)
   d5034:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5036:	4604      	mov	r4, r0
      if (_M_manager)
   d5038:	b113      	cbz	r3, d5040 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d503a:	2203      	movs	r2, #3
   d503c:	4601      	mov	r1, r0
   d503e:	4798      	blx	r3
    }
   d5040:	4620      	mov	r0, r4
   d5042:	bd10      	pop	{r4, pc}

000d5044 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5044:	b510      	push	{r4, lr}
   d5046:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5048:	3058      	adds	r0, #88	; 0x58
   d504a:	f7ff fff2 	bl	d5032 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   d504e:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   d5052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5056:	f7ff be29 	b.w	d4cac <_ZN6StringD1Ev>

000d505a <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d505a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d505e:	b2da      	uxtb	r2, r3
   d5060:	2a09      	cmp	r2, #9
   d5062:	d801      	bhi.n	d5068 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d5064:	4618      	mov	r0, r3
   d5066:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d5068:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d506c:	2b05      	cmp	r3, #5
   d506e:	d801      	bhi.n	d5074 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d5070:	3857      	subs	r0, #87	; 0x57
   d5072:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d5074:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d5078:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d507a:	bf94      	ite	ls
   d507c:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d507e:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d5082:	4770      	bx	lr

000d5084 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d5084:	b510      	push	{r4, lr}
            locked_(false) {
   d5086:	2300      	movs	r3, #0
    WiringBleLock() :
   d5088:	4604      	mov	r4, r0
            locked_(false) {
   d508a:	7003      	strb	r3, [r0, #0]
        lock();
   d508c:	f7ff ff2a 	bl	d4ee4 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d5090:	4620      	mov	r0, r4
   d5092:	bd10      	pop	{r4, pc}

000d5094 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d5094:	b510      	push	{r4, lr}
        if (locked_) {
   d5096:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d5098:	4604      	mov	r4, r0
        if (locked_) {
   d509a:	b10b      	cbz	r3, d50a0 <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d509c:	f7ff ff2e 	bl	d4efc <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d50a0:	4620      	mov	r0, r4
   d50a2:	bd10      	pop	{r4, pc}

000d50a4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d50a4:	b082      	sub	sp, #8
   d50a6:	4603      	mov	r3, r0
    address_ = addr;
   d50a8:	6808      	ldr	r0, [r1, #0]
   d50aa:	6849      	ldr	r1, [r1, #4]
   d50ac:	466a      	mov	r2, sp
   d50ae:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d50b0:	466a      	mov	r2, sp
   d50b2:	ca03      	ldmia	r2!, {r0, r1}
   d50b4:	6018      	str	r0, [r3, #0]
}
   d50b6:	4618      	mov	r0, r3
    address_ = addr.address_;
   d50b8:	6059      	str	r1, [r3, #4]
}
   d50ba:	b002      	add	sp, #8
   d50bc:	4770      	bx	lr

000d50be <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d50be:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d50c0:	7982      	ldrb	r2, [r0, #6]
   d50c2:	798b      	ldrb	r3, [r1, #6]
   d50c4:	429a      	cmp	r2, r3
   d50c6:	d106      	bne.n	d50d6 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d50c8:	2206      	movs	r2, #6
   d50ca:	f001 fd69 	bl	d6ba0 <memcmp>
   d50ce:	fab0 f080 	clz	r0, r0
   d50d2:	0940      	lsrs	r0, r0, #5
}
   d50d4:	bd08      	pop	{r3, pc}
    return false;
   d50d6:	2000      	movs	r0, #0
   d50d8:	e7fc      	b.n	d50d4 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d50da <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d50da:	f04f 33ff 	mov.w	r3, #4294967295
   d50de:	6003      	str	r3, [r0, #0]
   d50e0:	8083      	strh	r3, [r0, #4]
}
   d50e2:	2000      	movs	r0, #0
   d50e4:	4770      	bx	lr

000d50e6 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d50e6:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d50e8:	b508      	push	{r3, lr}
        : address_{} {
   d50ea:	6001      	str	r1, [r0, #0]
   d50ec:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d50ee:	4602      	mov	r2, r0
    clear();
   d50f0:	f7ff fff3 	bl	d50da <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d50f4:	7191      	strb	r1, [r2, #6]
}
   d50f6:	4610      	mov	r0, r2
   d50f8:	bd08      	pop	{r3, pc}
	...

000d50fc <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d50fc:	2201      	movs	r2, #1
   d50fe:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5100:	4a06      	ldr	r2, [pc, #24]	; (d511c <_ZN8particle7BleUuidC1Ev+0x20>)
   d5102:	6811      	ldr	r1, [r2, #0]
   d5104:	6001      	str	r1, [r0, #0]
   d5106:	6851      	ldr	r1, [r2, #4]
   d5108:	6041      	str	r1, [r0, #4]
   d510a:	8911      	ldrh	r1, [r2, #8]
   d510c:	7a92      	ldrb	r2, [r2, #10]
   d510e:	7282      	strb	r2, [r0, #10]
   d5110:	2200      	movs	r2, #0
   d5112:	8101      	strh	r1, [r0, #8]
   d5114:	f8c0 200b 	str.w	r2, [r0, #11]
   d5118:	73c2      	strb	r2, [r0, #15]
}
   d511a:	4770      	bx	lr
   d511c:	000d70f0 	.word	0x000d70f0

000d5120 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d5120:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d5122:	690b      	ldr	r3, [r1, #16]
   d5124:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d5126:	f101 0210 	add.w	r2, r1, #16
   d512a:	4603      	mov	r3, r0
   d512c:	f851 4b04 	ldr.w	r4, [r1], #4
   d5130:	f843 4b04 	str.w	r4, [r3], #4
   d5134:	4291      	cmp	r1, r2
   d5136:	d1f9      	bne.n	d512c <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d5138:	bd10      	pop	{r4, pc}

000d513a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d513a:	b510      	push	{r4, lr}
    if (uuid128) {
   d513c:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d513e:	4604      	mov	r4, r0
    if (uuid128) {
   d5140:	b1b1      	cbz	r1, d5170 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d5142:	2a01      	cmp	r2, #1
   d5144:	f101 0210 	add.w	r2, r1, #16
   d5148:	d10a      	bne.n	d5160 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d514a:	4601      	mov	r1, r0
   d514c:	f853 0b04 	ldr.w	r0, [r3], #4
   d5150:	f841 0b04 	str.w	r0, [r1], #4
   d5154:	4293      	cmp	r3, r2
   d5156:	d1f9      	bne.n	d514c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d5158:	2301      	movs	r3, #1
   d515a:	6123      	str	r3, [r4, #16]
}
   d515c:	4620      	mov	r0, r4
   d515e:	bd10      	pop	{r4, pc}
   d5160:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d5162:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d5166:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d516a:	429a      	cmp	r2, r3
   d516c:	d1f9      	bne.n	d5162 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d516e:	e7f3      	b.n	d5158 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d5170:	2210      	movs	r2, #16
   d5172:	f001 fd4b 	bl	d6c0c <memset>
   d5176:	e7f1      	b.n	d515c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d5178 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d5178:	b538      	push	{r3, r4, r5, lr}
   d517a:	4604      	mov	r4, r0
   d517c:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d517e:	461a      	mov	r2, r3
   d5180:	f7ff ffdb 	bl	d513a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d5184:	81a5      	strh	r5, [r4, #12]
}
   d5186:	4620      	mov	r0, r4
   d5188:	bd38      	pop	{r3, r4, r5, pc}
	...

000d518c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d518c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d518e:	6902      	ldr	r2, [r0, #16]
   d5190:	b922      	cbnz	r2, d519c <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d5192:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5194:	3800      	subs	r0, #0
   d5196:	bf18      	it	ne
   d5198:	2001      	movne	r0, #1
}
   d519a:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d519c:	4902      	ldr	r1, [pc, #8]	; (d51a8 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d519e:	2210      	movs	r2, #16
   d51a0:	f001 fcfe 	bl	d6ba0 <memcmp>
   d51a4:	e7f6      	b.n	d5194 <_ZNK8particle7BleUuid7isValidEv+0x8>
   d51a6:	bf00      	nop
   d51a8:	000d7110 	.word	0x000d7110

000d51ac <_ZNK8particle7BleUuid4typeEv>:
}
   d51ac:	6900      	ldr	r0, [r0, #16]
   d51ae:	4770      	bx	lr

000d51b0 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d51b0:	b538      	push	{r3, r4, r5, lr}
   d51b2:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d51b4:	2214      	movs	r2, #20
   d51b6:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d51b8:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d51ba:	f001 fd27 	bl	d6c0c <memset>
    if (type_ == BleUuidType::SHORT) {
   d51be:	6923      	ldr	r3, [r4, #16]
   d51c0:	b93b      	cbnz	r3, d51d2 <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d51c2:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d51c4:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d51c6:	7b23      	ldrb	r3, [r4, #12]
   d51c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d51cc:	802b      	strh	r3, [r5, #0]
}
   d51ce:	4628      	mov	r0, r5
   d51d0:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d51d2:	2301      	movs	r3, #1
   d51d4:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d51d6:	f104 0210 	add.w	r2, r4, #16
   d51da:	462b      	mov	r3, r5
   d51dc:	f854 1b04 	ldr.w	r1, [r4], #4
   d51e0:	f843 1b04 	str.w	r1, [r3], #4
   d51e4:	4294      	cmp	r4, r2
   d51e6:	d1f9      	bne.n	d51dc <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d51e8:	e7f1      	b.n	d51ce <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d51ea <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d51ea:	7b42      	ldrb	r2, [r0, #13]
   d51ec:	7b00      	ldrb	r0, [r0, #12]
}
   d51ee:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d51f2:	4770      	bx	lr

000d51f4 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d51f4:	4770      	bx	lr

000d51f6 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d51f6:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d51f8:	6902      	ldr	r2, [r0, #16]
   d51fa:	690b      	ldr	r3, [r1, #16]
   d51fc:	429a      	cmp	r2, r3
   d51fe:	d106      	bne.n	d520e <_ZNK8particle7BleUuideqERKS0_+0x18>
   d5200:	2210      	movs	r2, #16
   d5202:	f001 fccd 	bl	d6ba0 <memcmp>
   d5206:	fab0 f080 	clz	r0, r0
   d520a:	0940      	lsrs	r0, r0, #5
}
   d520c:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d520e:	2000      	movs	r0, #0
   d5210:	e7fc      	b.n	d520c <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d5214 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d5214:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d5216:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d521a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d521c:	4b32      	ldr	r3, [pc, #200]	; (d52e8 <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d521e:	681a      	ldr	r2, [r3, #0]
   d5220:	6002      	str	r2, [r0, #0]
   d5222:	685a      	ldr	r2, [r3, #4]
   d5224:	6042      	str	r2, [r0, #4]
   d5226:	2500      	movs	r5, #0
   d5228:	891a      	ldrh	r2, [r3, #8]
   d522a:	7a9b      	ldrb	r3, [r3, #10]
   d522c:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d522e:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5230:	7283      	strb	r3, [r0, #10]
   d5232:	f8c0 500b 	str.w	r5, [r0, #11]
   d5236:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d5238:	460e      	mov	r6, r1
   d523a:	b321      	cbz	r1, d5286 <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d523c:	2124      	movs	r1, #36	; 0x24
   d523e:	4630      	mov	r0, r6
   d5240:	f001 fd2a 	bl	d6c98 <strnlen>
   d5244:	2804      	cmp	r0, #4
   d5246:	d121      	bne.n	d528c <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d5248:	f8ad 5004 	strh.w	r5, [sp, #4]
   d524c:	af01      	add	r7, sp, #4
   d524e:	1cb5      	adds	r5, r6, #2
   d5250:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5252:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d5256:	f7ff ff00 	bl	d505a <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d525a:	f1b0 0800 	subs.w	r8, r0, #0
   d525e:	db10      	blt.n	d5282 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d5260:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d5264:	f7ff fef9 	bl	d505a <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d5268:	2800      	cmp	r0, #0
   d526a:	db0a      	blt.n	d5282 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d526c:	3502      	adds	r5, #2
   d526e:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d5272:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d5274:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d5278:	d1eb      	bne.n	d5252 <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d527a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d527e:	ba5b      	rev16	r3, r3
   d5280:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d5282:	2300      	movs	r3, #0
   d5284:	6123      	str	r3, [r4, #16]
}
   d5286:	b002      	add	sp, #8
   d5288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d528c:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d528e:	2124      	movs	r1, #36	; 0x24
   d5290:	4630      	mov	r0, r6
   d5292:	f001 fd01 	bl	d6c98 <strnlen>
   d5296:	42a8      	cmp	r0, r5
   d5298:	d806      	bhi.n	d52a8 <_ZN8particle7BleUuid9constructEPKc+0x94>
   d529a:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d529c:	2300      	movs	r3, #0
    while (len > 0) {
   d529e:	42bc      	cmp	r4, r7
   d52a0:	d0f1      	beq.n	d5286 <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d52a2:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d52a6:	e7fa      	b.n	d529e <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d52a8:	2f00      	cmp	r7, #0
   d52aa:	d0ec      	beq.n	d5286 <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d52ac:	5d70      	ldrb	r0, [r6, r5]
   d52ae:	f7ff fed4 	bl	d505a <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d52b2:	0603      	lsls	r3, r0, #24
   d52b4:	d415      	bmi.n	d52e2 <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d52b6:	0100      	lsls	r0, r0, #4
   d52b8:	3f01      	subs	r7, #1
   d52ba:	fa5f f880 	uxtb.w	r8, r0
   d52be:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d52c2:	2124      	movs	r1, #36	; 0x24
   d52c4:	4630      	mov	r0, r6
   d52c6:	f001 fce7 	bl	d6c98 <strnlen>
   d52ca:	3501      	adds	r5, #1
   d52cc:	42a8      	cmp	r0, r5
   d52ce:	d908      	bls.n	d52e2 <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d52d0:	5d70      	ldrb	r0, [r6, r5]
   d52d2:	f7ff fec2 	bl	d505a <_ZN8particle11hexToNibbleEc>
   d52d6:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d52d8:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d52da:	bfa4      	itt	ge
   d52dc:	ea40 0008 	orrge.w	r0, r0, r8
   d52e0:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d52e2:	3501      	adds	r5, #1
   d52e4:	e7d3      	b.n	d528e <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d52e6:	bf00      	nop
   d52e8:	000d70f0 	.word	0x000d70f0

000d52ec <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d52ec:	b513      	push	{r0, r1, r4, lr}
   d52ee:	4604      	mov	r4, r0
   d52f0:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d52f2:	f7ff ff03 	bl	d50fc <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d52f6:	4620      	mov	r0, r4
   d52f8:	9901      	ldr	r1, [sp, #4]
   d52fa:	f7ff ff8b 	bl	d5214 <_ZN8particle7BleUuid9constructEPKc>
}
   d52fe:	4620      	mov	r0, r4
   d5300:	b002      	add	sp, #8
   d5302:	bd10      	pop	{r4, pc}

000d5304 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d5304:	b430      	push	{r4, r5}
   d5306:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d530a:	b912      	cbnz	r2, d5312 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d530c:	6a00      	ldr	r0, [r0, #32]
}
   d530e:	bc30      	pop	{r4, r5}
   d5310:	4770      	bx	lr
   d5312:	9502      	str	r5, [sp, #8]
   d5314:	bc30      	pop	{r4, r5}
   d5316:	f7ff be12 	b.w	d4f3e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d531a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d531a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d531c:	4604      	mov	r4, r0
          selfLen_(0) {
   d531e:	4602      	mov	r2, r0
   d5320:	f100 011f 	add.w	r1, r0, #31
   d5324:	2300      	movs	r3, #0
   d5326:	f802 3b01 	strb.w	r3, [r2], #1
   d532a:	4291      	cmp	r1, r2
   d532c:	d1fb      	bne.n	d5326 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d532e:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5330:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d5332:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5334:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d5336:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d533a:	4619      	mov	r1, r3
   d533c:	f10d 020f 	add.w	r2, sp, #15
   d5340:	4620      	mov	r0, r4
   d5342:	f7ff ffdf 	bl	d5304 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5346:	4620      	mov	r0, r4
   d5348:	b004      	add	sp, #16
   d534a:	bd10      	pop	{r4, pc}

000d534c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d534c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d534e:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5350:	460e      	mov	r6, r1
   d5352:	ab01      	add	r3, sp, #4
   d5354:	6a01      	ldr	r1, [r0, #32]
   d5356:	4604      	mov	r4, r0
   d5358:	f7ff fddc 	bl	d4f14 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d535c:	4605      	mov	r5, r0
   d535e:	b178      	cbz	r0, d5380 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d5360:	9801      	ldr	r0, [sp, #4]
   d5362:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d5364:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d5366:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d5368:	4421      	add	r1, r4
   d536a:	1b52      	subs	r2, r2, r5
   d536c:	4420      	add	r0, r4
   d536e:	f001 fc25 	bl	d6bbc <memcpy>
        selfLen_ -= len;
   d5372:	6a20      	ldr	r0, [r4, #32]
   d5374:	1b40      	subs	r0, r0, r5
   d5376:	6220      	str	r0, [r4, #32]
        remove(type);
   d5378:	4631      	mov	r1, r6
   d537a:	4620      	mov	r0, r4
   d537c:	f7ff ffe6 	bl	d534c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d5380:	b002      	add	sp, #8
   d5382:	bd70      	pop	{r4, r5, r6, pc}

000d5384 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d5384:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   d5386:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d538a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d538c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   d538e:	8043      	strh	r3, [r0, #2]
   d5390:	220e      	movs	r2, #14
   d5392:	4629      	mov	r1, r5
   d5394:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d5396:	7105      	strb	r5, [r0, #4]
   d5398:	3006      	adds	r0, #6
   d539a:	f001 fc37 	bl	d6c0c <memset>
   d539e:	f104 0014 	add.w	r0, r4, #20
   d53a2:	f7ff feab 	bl	d50fc <_ZN8particle7BleUuidC1Ev>
   d53a6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d53aa:	f7ff fea7 	bl	d50fc <_ZN8particle7BleUuidC1Ev>
   d53ae:	4904      	ldr	r1, [pc, #16]	; (d53c0 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d53b0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d53b4:	f7ff fcc5 	bl	d4d42 <_ZN6StringC1EPKc>
    _Function_base() : _M_manager(nullptr) { }
   d53b8:	6565      	str	r5, [r4, #84]	; 0x54
    }
   d53ba:	4620      	mov	r0, r4
   d53bc:	bd38      	pop	{r3, r4, r5, pc}
   d53be:	bf00      	nop
   d53c0:	000d6e4e 	.word	0x000d6e4e

000d53c4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d53c4:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d53c6:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d53ca:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d53ce:	4293      	cmp	r3, r2
   d53d0:	4618      	mov	r0, r3
   d53d2:	d006      	beq.n	d53e2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d53d4:	6804      	ldr	r4, [r0, #0]
   d53d6:	8824      	ldrh	r4, [r4, #0]
   d53d8:	428c      	cmp	r4, r1
   d53da:	f103 0308 	add.w	r3, r3, #8
   d53de:	d1f6      	bne.n	d53ce <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d53e0:	bd10      	pop	{r4, pc}
        return nullptr;
   d53e2:	2000      	movs	r0, #0
   d53e4:	e7fc      	b.n	d53e0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d53e8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d53e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d53ea:	4606      	mov	r6, r0
   d53ec:	b085      	sub	sp, #20
   d53ee:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d53f0:	460d      	mov	r5, r1
   d53f2:	2900      	cmp	r1, #0
   d53f4:	d050      	beq.n	d5498 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d53f6:	2a00      	cmp	r2, #0
   d53f8:	d04e      	beq.n	d5498 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
    void onDataReceived(void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance) {
        onDataReceived((callback && instance) ? std::bind(callback, instance, _1, _2, _3) :(BleOnDataReceivedStdFunction) nullptr);
    }

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   d53fa:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   d53fc:	7823      	ldrb	r3, [r4, #0]
   d53fe:	2af4      	cmp	r2, #244	; 0xf4
   d5400:	bf28      	it	cs
   d5402:	22f4      	movcs	r2, #244	; 0xf4
   d5404:	b343      	cbz	r3, d5458 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d5406:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d5408:	0798      	lsls	r0, r3, #30
   d540a:	d509      	bpl.n	d5420 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d540c:	89a0      	ldrh	r0, [r4, #12]
   d540e:	9203      	str	r2, [sp, #12]
   d5410:	2300      	movs	r3, #0
   d5412:	f7ff f9ab 	bl	d476c <hal_ble_gatt_server_set_characteristic_value>
   d5416:	2800      	cmp	r0, #0
   d5418:	9a03      	ldr	r2, [sp, #12]
   d541a:	da03      	bge.n	d5424 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d541c:	b005      	add	sp, #20
   d541e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d5420:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5424:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d5426:	7923      	ldrb	r3, [r4, #4]
   d5428:	06d9      	lsls	r1, r3, #27
   d542a:	d509      	bpl.n	d5440 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   d542c:	2f01      	cmp	r7, #1
   d542e:	d007      	beq.n	d5440 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5430:	89a0      	ldrh	r0, [r4, #12]
   d5432:	2300      	movs	r3, #0
   d5434:	4629      	mov	r1, r5
}
   d5436:	b005      	add	sp, #20
   d5438:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d543c:	f7ff b9c8 	b.w	d47d0 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d5440:	069b      	lsls	r3, r3, #26
   d5442:	d5eb      	bpl.n	d541c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d5444:	2f02      	cmp	r7, #2
   d5446:	d0e9      	beq.n	d541c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5448:	89a0      	ldrh	r0, [r4, #12]
   d544a:	2300      	movs	r3, #0
   d544c:	4629      	mov	r1, r5
}
   d544e:	b005      	add	sp, #20
   d5450:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5454:	f7ff b9c6 	b.w	d47e4 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d5458:	8860      	ldrh	r0, [r4, #2]
   d545a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d545e:	4288      	cmp	r0, r1
   d5460:	d01c      	beq.n	d549c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d5462:	7921      	ldrb	r1, [r4, #4]
   d5464:	074e      	lsls	r6, r1, #29
   d5466:	d501      	bpl.n	d546c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   d5468:	2f01      	cmp	r7, #1
   d546a:	d104      	bne.n	d5476 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d546c:	070b      	lsls	r3, r1, #28
   d546e:	d409      	bmi.n	d5484 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d5470:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5474:	e7d2      	b.n	d541c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5476:	89a1      	ldrh	r1, [r4, #12]
   d5478:	9300      	str	r3, [sp, #0]
   d547a:	4613      	mov	r3, r2
   d547c:	462a      	mov	r2, r5
   d547e:	f7ff f989 	bl	d4794 <hal_ble_gatt_client_write_without_response>
   d5482:	e7cb      	b.n	d541c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d5484:	2f02      	cmp	r7, #2
   d5486:	d0f3      	beq.n	d5470 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5488:	2300      	movs	r3, #0
   d548a:	89a1      	ldrh	r1, [r4, #12]
   d548c:	9300      	str	r3, [sp, #0]
   d548e:	4613      	mov	r3, r2
   d5490:	462a      	mov	r2, r5
   d5492:	f7ff f975 	bl	d4780 <hal_ble_gatt_client_write_with_response>
   d5496:	e7c1      	b.n	d541c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d5498:	4802      	ldr	r0, [pc, #8]	; (d54a4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   d549a:	e7bf      	b.n	d541c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   d549c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d54a0:	e7bc      	b.n	d541c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d54a2:	bf00      	nop
   d54a4:	fffffef2 	.word	0xfffffef2

000d54a8 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d54a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d54aa:	460c      	mov	r4, r1
   d54ac:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d54ae:	21f4      	movs	r1, #244	; 0xf4
   d54b0:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d54b2:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d54b4:	f001 fbf0 	bl	d6c98 <strnlen>
   d54b8:	9b01      	ldr	r3, [sp, #4]
   d54ba:	4602      	mov	r2, r0
   d54bc:	4621      	mov	r1, r4
   d54be:	4628      	mov	r0, r5
}
   d54c0:	b003      	add	sp, #12
   d54c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d54c6:	f7ff bf8f 	b.w	d53e8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000d54cc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d54cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d54d0:	2600      	movs	r6, #0
   d54d2:	6006      	str	r6, [r0, #0]
   d54d4:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d54d6:	2028      	movs	r0, #40	; 0x28
   d54d8:	460c      	mov	r4, r1
   d54da:	f7fe fdda 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d54de:	1e05      	subs	r5, r0, #0
   d54e0:	f105 080c 	add.w	r8, r5, #12
   d54e4:	d00f      	beq.n	d5506 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d54e6:	2301      	movs	r3, #1
   d54e8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d54ec:	4b08      	ldr	r3, [pc, #32]	; (d5510 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d54ee:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   d54f0:	4640      	mov	r0, r8
   d54f2:	f7ff fe03 	bl	d50fc <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   d54f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   d54f8:	622e      	str	r6, [r5, #32]
   d54fa:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   d54fe:	4646      	mov	r6, r8
   d5500:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d5502:	6823      	ldr	r3, [r4, #0]
   d5504:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   d5506:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d550a:	4638      	mov	r0, r7
   d550c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5510:	000d70b8 	.word	0x000d70b8

000d5514 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5514:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d5516:	2500      	movs	r5, #0
   d5518:	6005      	str	r5, [r0, #0]
   d551a:	4606      	mov	r6, r0
   d551c:	2030      	movs	r0, #48	; 0x30
   d551e:	f7fe fdb8 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d5522:	4604      	mov	r4, r0
   d5524:	b188      	cbz	r0, d554a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d5526:	2301      	movs	r3, #1
   d5528:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d552c:	4b09      	ldr	r3, [pc, #36]	; (d5554 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d552e:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d5530:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5534:	8183      	strh	r3, [r0, #12]
   d5536:	300e      	adds	r0, #14
   d5538:	f7ff fdd5 	bl	d50e6 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d553c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d5540:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d5544:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d5548:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d554a:	6074      	str	r4, [r6, #4]
   d554c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d554e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d5550:	4630      	mov	r0, r6
   d5552:	bd70      	pop	{r4, r5, r6, pc}
   d5554:	000d70d4 	.word	0x000d70d4

000d5558 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d5558:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d555a:	460d      	mov	r5, r1
   d555c:	4604      	mov	r4, r0
    WiringBleLock lk;
   d555e:	a801      	add	r0, sp, #4
   d5560:	f7ff fd90 	bl	d5084 <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d5564:	682a      	ldr	r2, [r5, #0]
   d5566:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d556a:	6023      	str	r3, [r4, #0]
   d556c:	6853      	ldr	r3, [r2, #4]
   d556e:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d5570:	a801      	add	r0, sp, #4
   d5572:	f7ff fd8f 	bl	d5094 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d5576:	4620      	mov	r0, r4
   d5578:	b003      	add	sp, #12
   d557a:	bd30      	pop	{r4, r5, pc}

000d557c <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d557c:	b530      	push	{r4, r5, lr}
   d557e:	4605      	mov	r5, r0
   d5580:	b087      	sub	sp, #28
   d5582:	460c      	mov	r4, r1
    WiringBleLock lk;
   d5584:	a801      	add	r0, sp, #4
   d5586:	f7ff fd7d 	bl	d5084 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d558a:	682a      	ldr	r2, [r5, #0]
   d558c:	6823      	ldr	r3, [r4, #0]
   d558e:	8812      	ldrh	r2, [r2, #0]
   d5590:	881b      	ldrh	r3, [r3, #0]
   d5592:	429a      	cmp	r2, r3
   d5594:	d10d      	bne.n	d55b2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d5596:	4629      	mov	r1, r5
   d5598:	a802      	add	r0, sp, #8
   d559a:	f7ff ffdd 	bl	d5558 <_ZNK8particle13BlePeerDevice7addressEv>
   d559e:	4621      	mov	r1, r4
   d55a0:	a804      	add	r0, sp, #16
   d55a2:	f7ff ffd9 	bl	d5558 <_ZNK8particle13BlePeerDevice7addressEv>
   d55a6:	a904      	add	r1, sp, #16
   d55a8:	a802      	add	r0, sp, #8
   d55aa:	f7ff fd88 	bl	d50be <_ZNK8particle10BleAddresseqERKS0_>
   d55ae:	4604      	mov	r4, r0
   d55b0:	b900      	cbnz	r0, d55b4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d55b2:	2400      	movs	r4, #0
    WiringBleLock lk;
   d55b4:	a801      	add	r0, sp, #4
   d55b6:	f7ff fd6d 	bl	d5094 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d55ba:	4620      	mov	r0, r4
   d55bc:	b007      	add	sp, #28
   d55be:	bd30      	pop	{r4, r5, pc}

000d55c0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d55c0:	b510      	push	{r4, lr}
   d55c2:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d55c4:	2054      	movs	r0, #84	; 0x54
   d55c6:	f7fe fd64 	bl	d4092 <_Znwj>
   d55ca:	4601      	mov	r1, r0
   d55cc:	b160      	cbz	r0, d55e8 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d55ce:	2300      	movs	r3, #0
   d55d0:	e9c0 3300 	strd	r3, r3, [r0]
   d55d4:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d55d8:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d55dc:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d55e0:	6203      	str	r3, [r0, #32]
   d55e2:	62c3      	str	r3, [r0, #44]	; 0x2c
   d55e4:	63c3      	str	r3, [r0, #60]	; 0x3c
   d55e6:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d55e8:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d55ea:	b919      	cbnz	r1, d55f4 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d55ec:	4a09      	ldr	r2, [pc, #36]	; (d5614 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d55ee:	200a      	movs	r0, #10
   d55f0:	f7ff f9ea 	bl	d49c8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d55f4:	2000      	movs	r0, #0
   d55f6:	f7ff f885 	bl	d4704 <hal_ble_stack_init>
   d55fa:	b120      	cbz	r0, d5606 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d55fc:	4a05      	ldr	r2, [pc, #20]	; (d5614 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d55fe:	2100      	movs	r1, #0
   d5600:	200a      	movs	r0, #10
   d5602:	f7ff f9e1 	bl	d49c8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d5606:	6821      	ldr	r1, [r4, #0]
   d5608:	4803      	ldr	r0, [pc, #12]	; (d5618 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d560a:	2200      	movs	r2, #0
   d560c:	f7ff f8d6 	bl	d47bc <hal_ble_set_callback_on_periph_link_events>
}
   d5610:	4620      	mov	r0, r4
   d5612:	bd10      	pop	{r4, pc}
   d5614:	000d46e5 	.word	0x000d46e5
   d5618:	000d59a5 	.word	0x000d59a5

000d561c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d561c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d561e:	4c0b      	ldr	r4, [pc, #44]	; (d564c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5620:	7823      	ldrb	r3, [r4, #0]
   d5622:	f3bf 8f5b 	dmb	ish
   d5626:	07db      	lsls	r3, r3, #31
   d5628:	d40e      	bmi.n	d5648 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d562a:	4620      	mov	r0, r4
   d562c:	f7fe fd37 	bl	d409e <__cxa_guard_acquire>
   d5630:	b150      	cbz	r0, d5648 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d5632:	4807      	ldr	r0, [pc, #28]	; (d5650 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5634:	f7ff ffc4 	bl	d55c0 <_ZN8particle14BleLocalDeviceC1Ev>
   d5638:	4620      	mov	r0, r4
   d563a:	f7fe fd35 	bl	d40a8 <__cxa_guard_release>
   d563e:	4a05      	ldr	r2, [pc, #20]	; (d5654 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d5640:	4905      	ldr	r1, [pc, #20]	; (d5658 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d5642:	4803      	ldr	r0, [pc, #12]	; (d5650 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5644:	f001 f97c 	bl	d6940 <__aeabi_atexit>
    return instance;
}
   d5648:	4801      	ldr	r0, [pc, #4]	; (d5650 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d564a:	bd10      	pop	{r4, pc}
   d564c:	2003e65c 	.word	0x2003e65c
   d5650:	2003e668 	.word	0x2003e668
   d5654:	2003e5c8 	.word	0x2003e5c8
   d5658:	000d5825 	.word	0x000d5825

000d565c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d565c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   d565e:	6803      	ldr	r3, [r0, #0]
   d5660:	3b09      	subs	r3, #9
   d5662:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5664:	b08d      	sub	sp, #52	; 0x34
   d5666:	4604      	mov	r4, r0
   d5668:	460d      	mov	r5, r1
    switch (event->type) {
   d566a:	d811      	bhi.n	d5690 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d566c:	f7ff ffd6 	bl	d561c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5670:	88a1      	ldrh	r1, [r4, #4]
   d5672:	6800      	ldr	r0, [r0, #0]
   d5674:	f7ff fea6 	bl	d53c4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d5678:	4603      	mov	r3, r0
   d567a:	b958      	cbnz	r0, d5694 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d567c:	2220      	movs	r2, #32
   d567e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   d5682:	4a0b      	ldr	r2, [pc, #44]	; (d56b0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   d5684:	9200      	str	r2, [sp, #0]
   d5686:	490b      	ldr	r1, [pc, #44]	; (d56b4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   d5688:	aa04      	add	r2, sp, #16
   d568a:	2032      	movs	r0, #50	; 0x32
   d568c:	f7ff f9a4 	bl	d49d8 <log_message>
}
   d5690:	b00d      	add	sp, #52	; 0x34
   d5692:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   d5694:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   d5696:	2a00      	cmp	r2, #0
   d5698:	d0fa      	beq.n	d5690 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   d569a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d569e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   d56a2:	e9cd 1203 	strd	r1, r2, [sp, #12]
   d56a6:	6dac      	ldr	r4, [r5, #88]	; 0x58
   d56a8:	aa04      	add	r2, sp, #16
   d56aa:	a903      	add	r1, sp, #12
   d56ac:	47a0      	blx	r4
}
   d56ae:	e7ef      	b.n	d5690 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   d56b0:	000d6fc7 	.word	0x000d6fc7
   d56b4:	000d6fa0 	.word	0x000d6fa0

000d56b8 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d56b8:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   d56ba:	2000      	movs	r0, #0
   d56bc:	f7ff f822 	bl	d4704 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   d56c0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d56c4:	bd08      	pop	{r3, pc}

000d56c6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d56c6:	4608      	mov	r0, r1
   d56c8:	b911      	cbnz	r1, d56d0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d56ca:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d56cc:	f7ff b822 	b.w	d4714 <hal_ble_gap_set_advertising_data>
   d56d0:	6a09      	ldr	r1, [r1, #32]
   d56d2:	2200      	movs	r2, #0
   d56d4:	e7fa      	b.n	d56cc <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d56d6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d56d6:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d56d8:	4608      	mov	r0, r1
   d56da:	b929      	cbnz	r1, d56e8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d56dc:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d56de:	b003      	add	sp, #12
   d56e0:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d56e4:	f7ff b81e 	b.w	d4724 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d56e8:	2101      	movs	r1, #1
   d56ea:	9001      	str	r0, [sp, #4]
   d56ec:	f7ff fe2e 	bl	d534c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d56f0:	9801      	ldr	r0, [sp, #4]
   d56f2:	2200      	movs	r2, #0
   d56f4:	6a01      	ldr	r1, [r0, #32]
   d56f6:	e7f2      	b.n	d56de <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d56f8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d56f8:	b538      	push	{r3, r4, r5, lr}
   d56fa:	4604      	mov	r4, r0
   d56fc:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   d56fe:	f7ff ffe2 	bl	d56c6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d5702:	2800      	cmp	r0, #0
   d5704:	db0a      	blt.n	d571c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   d5706:	4629      	mov	r1, r5
   d5708:	4620      	mov	r0, r4
   d570a:	f7ff ffe4 	bl	d56d6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d570e:	2800      	cmp	r0, #0
   d5710:	db04      	blt.n	d571c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   d5712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   d5716:	2000      	movs	r0, #0
   d5718:	f7ff b80c 	b.w	d4734 <hal_ble_gap_start_advertising>
}
   d571c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5720 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d5720:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5722:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d5724:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d5726:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5728:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d572a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d572c:	f7fe fcb1 	bl	d4092 <_Znwj>
   d5730:	b118      	cbz	r0, d573a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d5732:	682b      	ldr	r3, [r5, #0]
   d5734:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5736:	686b      	ldr	r3, [r5, #4]
   d5738:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d573a:	4b03      	ldr	r3, [pc, #12]	; (d5748 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   d573c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d573e:	4b03      	ldr	r3, [pc, #12]	; (d574c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5740:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5742:	60a3      	str	r3, [r4, #8]
      }
   d5744:	4620      	mov	r0, r4
   d5746:	bd38      	pop	{r3, r4, r5, pc}
   d5748:	000d501b 	.word	0x000d501b
   d574c:	000d4fdd 	.word	0x000d4fdd

000d5750 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d5750:	680b      	ldr	r3, [r1, #0]
   d5752:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d5754:	b113      	cbz	r3, d575c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5756:	685a      	ldr	r2, [r3, #4]
   d5758:	3201      	adds	r2, #1
   d575a:	605a      	str	r2, [r3, #4]
      }
   d575c:	4770      	bx	lr

000d575e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d575e:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5760:	f851 3b04 	ldr.w	r3, [r1], #4
   d5764:	4604      	mov	r4, r0
   d5766:	f840 3b04 	str.w	r3, [r0], #4
   d576a:	f7ff fff1 	bl	d5750 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d576e:	6823      	ldr	r3, [r4, #0]
   d5770:	b90b      	cbnz	r3, d5776 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d5772:	f7ff fc2b 	bl	d4fcc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d5776:	4620      	mov	r0, r4
   d5778:	bd10      	pop	{r4, pc}

000d577a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d577a:	b510      	push	{r4, lr}
   d577c:	f851 3b04 	ldr.w	r3, [r1], #4
   d5780:	4604      	mov	r4, r0
   d5782:	f840 3b04 	str.w	r3, [r0], #4
   d5786:	f7ff ffe3 	bl	d5750 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d578a:	4620      	mov	r0, r4
   d578c:	bd10      	pop	{r4, pc}

000d578e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d578e:	b510      	push	{r4, lr}
   d5790:	f851 3b04 	ldr.w	r3, [r1], #4
   d5794:	4604      	mov	r4, r0
   d5796:	f840 3b04 	str.w	r3, [r0], #4
   d579a:	f7ff ffd9 	bl	d5750 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d579e:	4620      	mov	r0, r4
   d57a0:	bd10      	pop	{r4, pc}

000d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d57a2:	b510      	push	{r4, lr}
   d57a4:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d57a6:	6800      	ldr	r0, [r0, #0]
   d57a8:	b128      	cbz	r0, d57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d57aa:	6843      	ldr	r3, [r0, #4]
   d57ac:	3b01      	subs	r3, #1
   d57ae:	6043      	str	r3, [r0, #4]
   d57b0:	b90b      	cbnz	r3, d57b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d57b2:	f7ff fb7e 	bl	d4eb2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d57b6:	4620      	mov	r0, r4
   d57b8:	bd10      	pop	{r4, pc}

000d57ba <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d57ba:	b510      	push	{r4, lr}
   d57bc:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d57be:	3004      	adds	r0, #4
   d57c0:	f7ff ffef 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d57c4:	4620      	mov	r0, r4
   d57c6:	bd10      	pop	{r4, pc}

000d57c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d57c8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d57ca:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d57ce:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d57d0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d57d4:	42ae      	cmp	r6, r5
   d57d6:	d004      	beq.n	d57e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d57d8:	1d28      	adds	r0, r5, #4
   d57da:	f7ff ffe2 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d57de:	3508      	adds	r5, #8
   d57e0:	e7f8      	b.n	d57d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d57e2:	6820      	ldr	r0, [r4, #0]
   d57e4:	f7ff f994 	bl	d4b10 <free>
}
   d57e8:	4620      	mov	r0, r4
   d57ea:	bd70      	pop	{r4, r5, r6, pc}

000d57ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d57ec:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d57ee:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d57f2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d57f4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d57f8:	42ae      	cmp	r6, r5
   d57fa:	d004      	beq.n	d5806 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d57fc:	1d28      	adds	r0, r5, #4
   d57fe:	f7ff ffd0 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5802:	3508      	adds	r5, #8
   d5804:	e7f8      	b.n	d57f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d5806:	6820      	ldr	r0, [r4, #0]
   d5808:	f7ff f982 	bl	d4b10 <free>
}
   d580c:	4620      	mov	r0, r4
   d580e:	bd70      	pop	{r4, r5, r6, pc}

000d5810 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5810:	b510      	push	{r4, lr}
   d5812:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d5814:	3024      	adds	r0, #36	; 0x24
   d5816:	f7ff ffe9 	bl	d57ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d581a:	f104 0018 	add.w	r0, r4, #24
   d581e:	f7ff ffd3 	bl	d57c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d5822:	bd10      	pop	{r4, pc}

000d5824 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d5826:	6804      	ldr	r4, [r0, #0]
   d5828:	4606      	mov	r6, r0
   d582a:	b324      	cbz	r4, d5876 <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   d582c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d5830:	f7ff fbff 	bl	d5032 <_ZNSt14_Function_baseD1Ev>
   d5834:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d5838:	f7ff fbfb 	bl	d5032 <_ZNSt14_Function_baseD1Ev>
   d583c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5840:	f7ff fbf7 	bl	d5032 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   d5844:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d5848:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d584c:	42af      	cmp	r7, r5
   d584e:	d004      	beq.n	d585a <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   d5850:	1d28      	adds	r0, r5, #4
   d5852:	f7ff ffa6 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5856:	3508      	adds	r5, #8
   d5858:	e7f8      	b.n	d584c <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   d585a:	69a0      	ldr	r0, [r4, #24]
   d585c:	f7ff f958 	bl	d4b10 <free>
    ~BleLocalDeviceImpl() = default;
   d5860:	f104 000c 	add.w	r0, r4, #12
   d5864:	f7ff ffc2 	bl	d57ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5868:	4620      	mov	r0, r4
   d586a:	f7ff ffad 	bl	d57c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d586e:	2154      	movs	r1, #84	; 0x54
   d5870:	4620      	mov	r0, r4
   d5872:	f001 f86a 	bl	d694a <_ZdlPvj>
   d5876:	4630      	mov	r0, r6
   d5878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d587a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   d587a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d587c:	b510      	push	{r4, lr}
      if (_M_empty())
   d587e:	b90a      	cbnz	r2, d5884 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   d5880:	f001 f867 	bl	d6952 <_ZSt25__throw_bad_function_callv>
    }
   d5884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5888:	68c3      	ldr	r3, [r0, #12]
   d588a:	4718      	bx	r3

000d588c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d588c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d588e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5890:	4604      	mov	r4, r0
   d5892:	460d      	mov	r5, r1
   d5894:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5896:	d914      	bls.n	d58c2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5898:	4290      	cmp	r0, r2
   d589a:	d213      	bcs.n	d58c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d589c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d58a0:	1a75      	subs	r5, r6, r1
   d58a2:	f1a1 0708 	sub.w	r7, r1, #8
   d58a6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d58a8:	42b7      	cmp	r7, r6
   d58aa:	d018      	beq.n	d58de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d58ac:	b11c      	cbz	r4, d58b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d58ae:	4631      	mov	r1, r6
   d58b0:	4620      	mov	r0, r4
   d58b2:	f7ff ff6c 	bl	d578e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d58b6:	1d30      	adds	r0, r6, #4
   d58b8:	f7ff ff73 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d58bc:	3e08      	subs	r6, #8
   d58be:	3c08      	subs	r4, #8
   d58c0:	e7f2      	b.n	d58a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d58c2:	d00c      	beq.n	d58de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d58c4:	42b5      	cmp	r5, r6
   d58c6:	d00a      	beq.n	d58de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d58c8:	b11c      	cbz	r4, d58d2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d58ca:	4629      	mov	r1, r5
   d58cc:	4620      	mov	r0, r4
   d58ce:	f7ff ff5e 	bl	d578e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d58d2:	1d28      	adds	r0, r5, #4
   d58d4:	f7ff ff65 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d58d8:	3508      	adds	r5, #8
   d58da:	3408      	adds	r4, #8
   d58dc:	e7f2      	b.n	d58c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d58de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d58e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d58e4:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d58e8:	4605      	mov	r5, r0
   d58ea:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d58ec:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d58f0:	42a7      	cmp	r7, r4
   d58f2:	d103      	bne.n	d58fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   d58f4:	2600      	movs	r6, #0
}
   d58f6:	4630      	mov	r0, r6
   d58f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   d58fc:	4641      	mov	r1, r8
   d58fe:	4620      	mov	r0, r4
   d5900:	f7ff fe3c 	bl	d557c <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5904:	4606      	mov	r6, r0
   d5906:	b908      	cbnz	r0, d590c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   d5908:	3408      	adds	r4, #8
   d590a:	e7f1      	b.n	d58f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d590c:	2c00      	cmp	r4, #0
   d590e:	d0f1      	beq.n	d58f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   d5910:	1d20      	adds	r0, r4, #4
   d5912:	f7ff ff46 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d5916:	e9d5 3200 	ldrd	r3, r2, [r5]
   d591a:	f104 0108 	add.w	r1, r4, #8
   d591e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5922:	4620      	mov	r0, r4
   d5924:	f7ff ffb2 	bl	d588c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d5928:	686b      	ldr	r3, [r5, #4]
   d592a:	3b01      	subs	r3, #1
   d592c:	606b      	str	r3, [r5, #4]
    return true;
   d592e:	e7e2      	b.n	d58f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000d5930 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5932:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5934:	6846      	ldr	r6, [r0, #4]
   d5936:	4668      	mov	r0, sp
   d5938:	f7ff ff29 	bl	d578e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d593c:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   d5940:	429f      	cmp	r7, r3
   d5942:	db12      	blt.n	d596a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   d5944:	3701      	adds	r7, #1
        if (n > 0) {
   d5946:	2f00      	cmp	r7, #0
   d5948:	dd29      	ble.n	d599e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   d594a:	00f8      	lsls	r0, r7, #3
   d594c:	f7ff f8d8 	bl	d4b00 <malloc>
            if (!d) {
   d5950:	4605      	mov	r5, r0
   d5952:	b1f0      	cbz	r0, d5992 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   d5954:	e9d4 1200 	ldrd	r1, r2, [r4]
   d5958:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d595c:	f7ff ff96 	bl	d588c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d5960:	6820      	ldr	r0, [r4, #0]
   d5962:	f7ff f8d5 	bl	d4b10 <free>
        data_ = d;
   d5966:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5968:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   d596a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d596c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d596e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d5972:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5976:	4631      	mov	r1, r6
   d5978:	f106 0008 	add.w	r0, r6, #8
   d597c:	f7ff ff86 	bl	d588c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5980:	b11e      	cbz	r6, d598a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   d5982:	4669      	mov	r1, sp
   d5984:	4630      	mov	r0, r6
   d5986:	f7ff ff02 	bl	d578e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d598a:	6863      	ldr	r3, [r4, #4]
   d598c:	3301      	adds	r3, #1
   d598e:	6063      	str	r3, [r4, #4]
    return true;
   d5990:	2501      	movs	r5, #1
   d5992:	a801      	add	r0, sp, #4
   d5994:	f7ff ff05 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5998:	4628      	mov	r0, r5
   d599a:	b003      	add	sp, #12
   d599c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d599e:	2500      	movs	r5, #0
   d59a0:	e7de      	b.n	d5960 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>
	...

000d59a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d59a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d59a8:	4605      	mov	r5, r0
   d59aa:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d59ac:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d59ae:	460c      	mov	r4, r1
        WiringBleLock lk;
   d59b0:	f7ff fb68 	bl	d5084 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d59b4:	682e      	ldr	r6, [r5, #0]
   d59b6:	2e04      	cmp	r6, #4
   d59b8:	d06b      	beq.n	d5a92 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   d59ba:	d807      	bhi.n	d59cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   d59bc:	2e03      	cmp	r6, #3
   d59be:	d028      	beq.n	d5a12 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   d59c0:	a803      	add	r0, sp, #12
   d59c2:	f7ff fb67 	bl	d5094 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d59c6:	b00e      	add	sp, #56	; 0x38
   d59c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   d59cc:	f1a6 030c 	sub.w	r3, r6, #12
   d59d0:	2b03      	cmp	r3, #3
   d59d2:	d8f5      	bhi.n	d59c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d59d4:	89a9      	ldrh	r1, [r5, #12]
   d59d6:	4620      	mov	r0, r4
   d59d8:	f7ff fcf4 	bl	d53c4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d59dc:	4607      	mov	r7, r0
   d59de:	2800      	cmp	r0, #0
   d59e0:	d0ee      	beq.n	d59c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   d59e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d59e4:	2b00      	cmp	r3, #0
   d59e6:	d0eb      	beq.n	d59c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   d59e8:	2210      	movs	r2, #16
   d59ea:	2100      	movs	r1, #0
   d59ec:	a807      	add	r0, sp, #28
   d59ee:	f001 f90d 	bl	d6c0c <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d59f2:	2e0d      	cmp	r6, #13
                        };
   d59f4:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   d59f6:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d59fa:	f040 8092 	bne.w	d5b22 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   d59fe:	686b      	ldr	r3, [r5, #4]
   d5a00:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   d5a02:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d5a04:	9308      	str	r3, [sp, #32]
   d5a06:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5a08:	a906      	add	r1, sp, #24
   d5a0a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d5a0e:	4798      	blx	r3
   d5a10:	e7d6      	b.n	d59c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   d5a12:	a804      	add	r0, sp, #16
   d5a14:	f7ff fd7e 	bl	d5514 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d5a18:	9b04      	ldr	r3, [sp, #16]
   d5a1a:	89aa      	ldrh	r2, [r5, #12]
   d5a1c:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   d5a1e:	6869      	ldr	r1, [r5, #4]
   d5a20:	9804      	ldr	r0, [sp, #16]
   d5a22:	3108      	adds	r1, #8
   d5a24:	3002      	adds	r0, #2
   d5a26:	f7ff fb3d 	bl	d50a4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   d5a2a:	a904      	add	r1, sp, #16
   d5a2c:	a806      	add	r0, sp, #24
   d5a2e:	f7ff feae 	bl	d578e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   d5a32:	a906      	add	r1, sp, #24
   d5a34:	f104 0018 	add.w	r0, r4, #24
   d5a38:	f7ff ff7a 	bl	d5930 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5a3c:	4605      	mov	r5, r0
   d5a3e:	a807      	add	r0, sp, #28
   d5a40:	f7ff feaf 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a44:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5a46:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d5a48:	b98d      	cbnz	r5, d5a6e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   d5a4a:	4b3e      	ldr	r3, [pc, #248]	; (d5b44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   d5a4c:	493e      	ldr	r1, [pc, #248]	; (d5b48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d5a4e:	9300      	str	r3, [sp, #0]
   d5a50:	2032      	movs	r0, #50	; 0x32
   d5a52:	462b      	mov	r3, r5
   d5a54:	aa06      	add	r2, sp, #24
   d5a56:	9507      	str	r5, [sp, #28]
   d5a58:	f7fe ffbe 	bl	d49d8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5a5c:	9b04      	ldr	r3, [sp, #16]
   d5a5e:	4629      	mov	r1, r5
   d5a60:	8818      	ldrh	r0, [r3, #0]
   d5a62:	f7fe fe6f 	bl	d4744 <hal_ble_gap_disconnect>
   d5a66:	a805      	add	r0, sp, #20
   d5a68:	f7ff fe9b 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a6c:	e7a8      	b.n	d59c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   d5a6e:	4a37      	ldr	r2, [pc, #220]	; (d5b4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   d5a70:	9200      	str	r2, [sp, #0]
   d5a72:	2300      	movs	r3, #0
   d5a74:	4934      	ldr	r1, [pc, #208]	; (d5b48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d5a76:	9307      	str	r3, [sp, #28]
   d5a78:	aa06      	add	r2, sp, #24
   d5a7a:	2001      	movs	r0, #1
   d5a7c:	f7fe ffac 	bl	d49d8 <log_message>
                if (impl->connectedCallback_) {
   d5a80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d5a82:	2b00      	cmp	r3, #0
   d5a84:	d0ef      	beq.n	d5a66 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   d5a86:	a904      	add	r1, sp, #16
   d5a88:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5a8c:	f7ff fef5 	bl	d587a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   d5a90:	e7e9      	b.n	d5a66 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5a92:	89a9      	ldrh	r1, [r5, #12]
   d5a94:	4620      	mov	r0, r4
   d5a96:	f7ff fc95 	bl	d53c4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5a9a:	4606      	mov	r6, r0
   d5a9c:	2800      	cmp	r0, #0
   d5a9e:	d08f      	beq.n	d59c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   d5aa0:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   d5aa2:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d5aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5aaa:	802a      	strh	r2, [r5, #0]
   d5aac:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   d5ab0:	4299      	cmp	r1, r3
   d5ab2:	d003      	beq.n	d5abc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   d5ab4:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5ab8:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   d5aba:	e7f9      	b.n	d5ab0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   d5abc:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   d5ac0:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d5ac4:	45b8      	cmp	r8, r7
   d5ac6:	d004      	beq.n	d5ad2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   d5ac8:	1d38      	adds	r0, r7, #4
   d5aca:	f7ff fe6a 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ace:	3708      	adds	r7, #8
   d5ad0:	e7f8      	b.n	d5ac4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   d5ad2:	2300      	movs	r3, #0
   d5ad4:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   d5ad6:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   d5ada:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d5ade:	45b8      	cmp	r8, r7
   d5ae0:	d004      	beq.n	d5aec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   d5ae2:	1d38      	adds	r0, r7, #4
   d5ae4:	f7ff fe5d 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ae8:	3708      	adds	r7, #8
   d5aea:	e7f8      	b.n	d5ade <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   d5aec:	2300      	movs	r3, #0
   d5aee:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   d5af0:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   d5af2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5af4:	b123      	cbz	r3, d5b00 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   d5af6:	4631      	mov	r1, r6
   d5af8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d5afc:	f7ff febd 	bl	d587a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   d5b00:	2300      	movs	r3, #0
   d5b02:	2220      	movs	r2, #32
   d5b04:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d5b08:	4a11      	ldr	r2, [pc, #68]	; (d5b50 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   d5b0a:	9200      	str	r2, [sp, #0]
   d5b0c:	490e      	ldr	r1, [pc, #56]	; (d5b48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d5b0e:	aa06      	add	r2, sp, #24
   d5b10:	2001      	movs	r0, #1
   d5b12:	f7fe ff61 	bl	d49d8 <log_message>
                    impl->peers_.removeOne(*peer);
   d5b16:	4631      	mov	r1, r6
   d5b18:	f104 0018 	add.w	r0, r4, #24
   d5b1c:	f7ff fee0 	bl	d58e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d5b20:	e74e      	b.n	d59c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   d5b22:	2e0f      	cmp	r6, #15
   d5b24:	f47f af6f 	bne.w	d5a06 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   d5b28:	686b      	ldr	r3, [r5, #4]
   d5b2a:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d5b2c:	7a2b      	ldrb	r3, [r5, #8]
   d5b2e:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   d5b32:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d5b36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d5b3a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d5b3e:	2308      	movs	r3, #8
   d5b40:	e760      	b.n	d5a04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   d5b42:	bf00      	nop
   d5b44:	000d6fdf 	.word	0x000d6fdf
   d5b48:	000d6fa0 	.word	0x000d6fa0
   d5b4c:	000d7005 	.word	0x000d7005
   d5b50:	000d7022 	.word	0x000d7022

000d5b54 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
   d5b54:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   d5b56:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
   d5b58:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5b5a:	e9d1 0200 	ldrd	r0, r2, [r1]
	__r._M_ptr = 0;
   d5b5e:	e9c1 3300 	strd	r3, r3, [r1]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5b62:	6823      	ldr	r3, [r4, #0]
   d5b64:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b66:	6020      	str	r0, [r4, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5b68:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
   d5b6a:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
   d5b6c:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   d5b6e:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   d5b70:	f7ff fe17 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   d5b74:	4620      	mov	r0, r4
   d5b76:	b002      	add	sp, #8
   d5b78:	bd10      	pop	{r4, pc}

000d5b7a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d5b7a:	b513      	push	{r0, r1, r4, lr}
   d5b7c:	460b      	mov	r3, r1
   d5b7e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b80:	e9d0 0100 	ldrd	r0, r1, [r0]
   d5b84:	466c      	mov	r4, sp
   d5b86:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5b8a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5b8e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5b92:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5b96:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5b9a:	b002      	add	sp, #8
   d5b9c:	bd10      	pop	{r4, pc}

000d5b9e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   d5b9e:	b538      	push	{r3, r4, r5, lr}
   d5ba0:	4605      	mov	r5, r0
   d5ba2:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d5ba4:	f7ff ffe9 	bl	d5b7a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ba8:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5baa:	68a2      	ldr	r2, [r4, #8]
   d5bac:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5bae:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5bb0:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5bb2:	68e2      	ldr	r2, [r4, #12]
   d5bb4:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5bb6:	60e3      	str	r3, [r4, #12]
      }
   d5bb8:	bd38      	pop	{r3, r4, r5, pc}

000d5bba <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>:
      operator=(function&& __x) noexcept
   d5bba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5bbc:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d5bbe:	4604      	mov	r4, r0
   d5bc0:	4608      	mov	r0, r1
	__x.swap(*this);
   d5bc2:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d5bc4:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d5bc6:	f7ff ffea 	bl	d5b9e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   d5bca:	4621      	mov	r1, r4
   d5bcc:	4668      	mov	r0, sp
   d5bce:	f7ff ffe6 	bl	d5b9e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   d5bd2:	4668      	mov	r0, sp
   d5bd4:	f7ff fa2d 	bl	d5032 <_ZNSt14_Function_baseD1Ev>
      }
   d5bd8:	4620      	mov	r0, r4
   d5bda:	b004      	add	sp, #16
   d5bdc:	bd10      	pop	{r4, pc}

000d5bde <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   d5bde:	b570      	push	{r4, r5, r6, lr}
   d5be0:	460e      	mov	r6, r1
   d5be2:	b088      	sub	sp, #32
   d5be4:	4604      	mov	r4, r0
   d5be6:	9201      	str	r2, [sp, #4]
   d5be8:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   d5bea:	f7ff fbcb 	bl	d5384 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   d5bee:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   d5bf0:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   d5bf2:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   d5bf4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5bf8:	f7ff f8b7 	bl	d4d6a <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d5bfc:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   d5c00:	b185      	cbz	r5, d5c24 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x46>
   d5c02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5c04:	9502      	str	r5, [sp, #8]
   d5c06:	a902      	add	r1, sp, #8
   d5c08:	a804      	add	r0, sp, #16
   d5c0a:	9303      	str	r3, [sp, #12]
   d5c0c:	f7ff fd88 	bl	d5720 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   d5c10:	a904      	add	r1, sp, #16
   d5c12:	4630      	mov	r0, r6
   d5c14:	f7ff ffd1 	bl	d5bba <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   d5c18:	a804      	add	r0, sp, #16
   d5c1a:	f7ff fa0a 	bl	d5032 <_ZNSt14_Function_baseD1Ev>
    }
   d5c1e:	4620      	mov	r0, r4
   d5c20:	b008      	add	sp, #32
   d5c22:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   d5c24:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   d5c26:	e7f3      	b.n	d5c10 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000d5c28 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d5c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5c2c:	b086      	sub	sp, #24
   d5c2e:	4607      	mov	r7, r0
   d5c30:	461d      	mov	r5, r3
   d5c32:	2068      	movs	r0, #104	; 0x68
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d5c34:	2300      	movs	r3, #0
   d5c36:	4689      	mov	r9, r1
   d5c38:	4692      	mov	sl, r2
   d5c3a:	9304      	str	r3, [sp, #16]
   d5c3c:	f7fe fa29 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d5c40:	1e06      	subs	r6, r0, #0
   d5c42:	f106 080c 	add.w	r8, r6, #12
   d5c46:	d01d      	beq.n	d5c84 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   d5c48:	2301      	movs	r3, #1
	: _M_impl(__a)
   d5c4a:	4634      	mov	r4, r6
      : _M_use_count(1), _M_weak_count(1) { }
   d5c4c:	e9c6 3301 	strd	r3, r3, [r6, #4]
	: _M_impl(__a)
   d5c50:	4b15      	ldr	r3, [pc, #84]	; (d5ca8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x80>)
   d5c52:	f844 3b20 	str.w	r3, [r4], #32
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d5c56:	f89a 3000 	ldrb.w	r3, [sl]
    value_ = flags.value_;
   d5c5a:	f88d 300c 	strb.w	r3, [sp, #12]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   d5c5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d5c60:	9300      	str	r3, [sp, #0]
   d5c62:	464a      	mov	r2, r9
   d5c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d5c66:	a903      	add	r1, sp, #12
   d5c68:	4640      	mov	r0, r8
   d5c6a:	f7ff ffb8 	bl	d5bde <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   d5c6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c72:	682b      	ldr	r3, [r5, #0]
        svcUuid_ = svcUuid;
   d5c74:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        charUuid_ = charUuid;
   d5c76:	6023      	str	r3, [r4, #0]
        svcUuid_ = svcUuid;
   d5c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c7a:	f106 0434 	add.w	r4, r6, #52	; 0x34
   d5c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c80:	682b      	ldr	r3, [r5, #0]
   d5c82:	6023      	str	r3, [r4, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   d5c84:	a904      	add	r1, sp, #16
   d5c86:	4638      	mov	r0, r7
	  __p = __pi->_M_ptr();
   d5c88:	e9cd 8604 	strd	r8, r6, [sp, #16]
   d5c8c:	f7ff ff62 	bl	d5b54 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
      ~__shared_ptr() = default;
   d5c90:	a805      	add	r0, sp, #20
   d5c92:	f7ff fd86 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d5c96:	6839      	ldr	r1, [r7, #0]
   d5c98:	b919      	cbnz	r1, d5ca2 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x7a>
        SPARK_ASSERT(false);
   d5c9a:	4a04      	ldr	r2, [pc, #16]	; (d5cac <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>)
   d5c9c:	200a      	movs	r0, #10
   d5c9e:	f7fe fe93 	bl	d49c8 <panic_>
}
   d5ca2:	b006      	add	sp, #24
   d5ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5ca8:	000d709c 	.word	0x000d709c
   d5cac:	000d46e5 	.word	0x000d46e5

000d5cb0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d5cb0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5cb4:	4604      	mov	r4, r0
   d5cb6:	460d      	mov	r5, r1
   d5cb8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5cba:	d914      	bls.n	d5ce6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5cbc:	4290      	cmp	r0, r2
   d5cbe:	d213      	bcs.n	d5ce8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d5cc0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d5cc4:	1a75      	subs	r5, r6, r1
   d5cc6:	f1a1 0708 	sub.w	r7, r1, #8
   d5cca:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5ccc:	42b7      	cmp	r7, r6
   d5cce:	d018      	beq.n	d5d02 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5cd0:	b11c      	cbz	r4, d5cda <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default;
   d5cd2:	4631      	mov	r1, r6
   d5cd4:	4620      	mov	r0, r4
   d5cd6:	f7ff fd50 	bl	d577a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5cda:	1d30      	adds	r0, r6, #4
   d5cdc:	f7ff fd61 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d5ce0:	3e08      	subs	r6, #8
   d5ce2:	3c08      	subs	r4, #8
   d5ce4:	e7f2      	b.n	d5ccc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d5ce6:	d00c      	beq.n	d5d02 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5ce8:	42b5      	cmp	r5, r6
   d5cea:	d00a      	beq.n	d5d02 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5cec:	b11c      	cbz	r4, d5cf6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5cee:	4629      	mov	r1, r5
   d5cf0:	4620      	mov	r0, r4
   d5cf2:	f7ff fd42 	bl	d577a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5cf6:	1d28      	adds	r0, r5, #4
   d5cf8:	f7ff fd53 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d5cfc:	3508      	adds	r5, #8
   d5cfe:	3408      	adds	r4, #8
   d5d00:	e7f2      	b.n	d5ce8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d5d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5d04 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d5d04:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d5d06:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d5d08:	4605      	mov	r5, r0
        if (n > 0) {
   d5d0a:	dd11      	ble.n	d5d30 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d5d0c:	00f0      	lsls	r0, r6, #3
   d5d0e:	f7fe fef7 	bl	d4b00 <malloc>
            if (!d) {
   d5d12:	4604      	mov	r4, r0
   d5d14:	b158      	cbz	r0, d5d2e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d5d16:	e9d5 1200 	ldrd	r1, r2, [r5]
   d5d1a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5d1e:	f7ff ffc7 	bl	d5cb0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d5d22:	6828      	ldr	r0, [r5, #0]
   d5d24:	f7fe fef4 	bl	d4b10 <free>
        data_ = d;
   d5d28:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5d2a:	60ae      	str	r6, [r5, #8]
        return true;
   d5d2c:	2001      	movs	r0, #1
    }
   d5d2e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d5d30:	2400      	movs	r4, #0
   d5d32:	e7f6      	b.n	d5d22 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d5d34 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5d34:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5d36:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5d38:	6845      	ldr	r5, [r0, #4]
   d5d3a:	4668      	mov	r0, sp
   d5d3c:	f7ff fd1d 	bl	d577a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5d40:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d5d44:	4299      	cmp	r1, r3
   d5d46:	da10      	bge.n	d5d6a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d5d48:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5d4a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d5d4c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d5d50:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5d54:	4629      	mov	r1, r5
   d5d56:	f105 0008 	add.w	r0, r5, #8
   d5d5a:	f7ff ffa9 	bl	d5cb0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5d5e:	b98d      	cbnz	r5, d5d84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d5d60:	6863      	ldr	r3, [r4, #4]
   d5d62:	3301      	adds	r3, #1
   d5d64:	6063      	str	r3, [r4, #4]
    return true;
   d5d66:	2601      	movs	r6, #1
   d5d68:	e006      	b.n	d5d78 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5d6a:	3101      	adds	r1, #1
   d5d6c:	4620      	mov	r0, r4
   d5d6e:	f7ff ffc9 	bl	d5d04 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5d72:	4606      	mov	r6, r0
   d5d74:	2800      	cmp	r0, #0
   d5d76:	d1e7      	bne.n	d5d48 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d5d78:	a801      	add	r0, sp, #4
   d5d7a:	f7ff fd12 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5d7e:	4630      	mov	r0, r6
   d5d80:	b002      	add	sp, #8
   d5d82:	bd70      	pop	{r4, r5, r6, pc}
   d5d84:	4669      	mov	r1, sp
   d5d86:	4628      	mov	r0, r5
   d5d88:	f7ff fcf7 	bl	d577a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5d8c:	e7e8      	b.n	d5d60 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d5d8e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d5d8e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d92:	4604      	mov	r4, r0
   d5d94:	460d      	mov	r5, r1
   d5d96:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5d98:	d914      	bls.n	d5dc4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5d9a:	4290      	cmp	r0, r2
   d5d9c:	d213      	bcs.n	d5dc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d5d9e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d5da2:	1a75      	subs	r5, r6, r1
   d5da4:	f1a1 0708 	sub.w	r7, r1, #8
   d5da8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5daa:	42b7      	cmp	r7, r6
   d5dac:	d018      	beq.n	d5de0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5dae:	b11c      	cbz	r4, d5db8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d5db0:	4631      	mov	r1, r6
   d5db2:	4620      	mov	r0, r4
   d5db4:	f7ff fcd3 	bl	d575e <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5db8:	1d30      	adds	r0, r6, #4
   d5dba:	f7ff fcf2 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d5dbe:	3e08      	subs	r6, #8
   d5dc0:	3c08      	subs	r4, #8
   d5dc2:	e7f2      	b.n	d5daa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d5dc4:	d00c      	beq.n	d5de0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5dc6:	42b5      	cmp	r5, r6
   d5dc8:	d00a      	beq.n	d5de0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5dca:	b11c      	cbz	r4, d5dd4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5dcc:	4629      	mov	r1, r5
   d5dce:	4620      	mov	r0, r4
   d5dd0:	f7ff fcc5 	bl	d575e <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5dd4:	1d28      	adds	r0, r5, #4
   d5dd6:	f7ff fce4 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d5dda:	3508      	adds	r5, #8
   d5ddc:	3408      	adds	r4, #8
   d5dde:	e7f2      	b.n	d5dc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d5de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5de2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d5de2:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d5de4:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d5de6:	4605      	mov	r5, r0
        if (n > 0) {
   d5de8:	dd11      	ble.n	d5e0e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d5dea:	00f0      	lsls	r0, r6, #3
   d5dec:	f7fe fe88 	bl	d4b00 <malloc>
            if (!d) {
   d5df0:	4604      	mov	r4, r0
   d5df2:	b158      	cbz	r0, d5e0c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d5df4:	e9d5 1200 	ldrd	r1, r2, [r5]
   d5df8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5dfc:	f7ff ffc7 	bl	d5d8e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d5e00:	6828      	ldr	r0, [r5, #0]
   d5e02:	f7fe fe85 	bl	d4b10 <free>
        data_ = d;
   d5e06:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5e08:	60ae      	str	r6, [r5, #8]
        return true;
   d5e0a:	2001      	movs	r0, #1
    }
   d5e0c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d5e0e:	2400      	movs	r4, #0
   d5e10:	e7f6      	b.n	d5e00 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d5e12 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5e12:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5e14:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5e16:	6845      	ldr	r5, [r0, #4]
   d5e18:	4668      	mov	r0, sp
   d5e1a:	f7ff fca0 	bl	d575e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5e1e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d5e22:	4299      	cmp	r1, r3
   d5e24:	da10      	bge.n	d5e48 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d5e26:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5e28:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d5e2a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d5e2e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5e32:	4629      	mov	r1, r5
   d5e34:	f105 0008 	add.w	r0, r5, #8
   d5e38:	f7ff ffa9 	bl	d5d8e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5e3c:	b98d      	cbnz	r5, d5e62 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d5e3e:	6863      	ldr	r3, [r4, #4]
   d5e40:	3301      	adds	r3, #1
   d5e42:	6063      	str	r3, [r4, #4]
    return true;
   d5e44:	2601      	movs	r6, #1
   d5e46:	e006      	b.n	d5e56 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5e48:	3101      	adds	r1, #1
   d5e4a:	4620      	mov	r0, r4
   d5e4c:	f7ff ffc9 	bl	d5de2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5e50:	4606      	mov	r6, r0
   d5e52:	2800      	cmp	r0, #0
   d5e54:	d1e7      	bne.n	d5e26 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d5e56:	a801      	add	r0, sp, #4
   d5e58:	f7ff fca3 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5e5c:	4630      	mov	r0, r6
   d5e5e:	b002      	add	sp, #8
   d5e60:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d5e62:	4669      	mov	r1, sp
   d5e64:	4628      	mov	r0, r5
   d5e66:	f7ff fc7a 	bl	d575e <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5e6a:	e7e8      	b.n	d5e3e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d5e6c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d5e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5e70:	4617      	mov	r7, r2
   d5e72:	b0a1      	sub	sp, #132	; 0x84
   d5e74:	4680      	mov	r8, r0
    WiringBleLock lk;
   d5e76:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d5e78:	460e      	mov	r6, r1
    WiringBleLock lk;
   d5e7a:	f7ff f903 	bl	d5084 <_ZN8particle3ble13WiringBleLockC1Ev>
   d5e7e:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d5e80:	7923      	ldrb	r3, [r4, #4]
   d5e82:	b953      	cbnz	r3, d5e9a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d5e84:	4639      	mov	r1, r7
   d5e86:	4640      	mov	r0, r8
   d5e88:	f7ff fc69 	bl	d575e <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d5e8c:	a80a      	add	r0, sp, #40	; 0x28
   d5e8e:	f7ff f901 	bl	d5094 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d5e92:	4640      	mov	r0, r8
   d5e94:	b021      	add	sp, #132	; 0x84
   d5e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d5e9a:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   d5e9c:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   d5ea0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d5ea4:	9303      	str	r3, [sp, #12]
   d5ea6:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d5eaa:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d5eae:	9b03      	ldr	r3, [sp, #12]
   d5eb0:	429d      	cmp	r5, r3
   d5eb2:	d021      	beq.n	d5ef8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d5eb4:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   d5eb8:	4658      	mov	r0, fp
   d5eba:	f109 0114 	add.w	r1, r9, #20
   d5ebe:	f7ff f99a 	bl	d51f6 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d5ec2:	b1b8      	cbz	r0, d5ef4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d5ec4:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d5ec8:	4650      	mov	r0, sl
   d5eca:	f7ff f994 	bl	d51f6 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d5ece:	b188      	cbz	r0, d5ef4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d5ed0:	6823      	ldr	r3, [r4, #0]
   d5ed2:	f8d9 2000 	ldr.w	r2, [r9]
   d5ed6:	4053      	eors	r3, r2
   d5ed8:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d5edc:	d10a      	bne.n	d5ef4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d5ede:	2220      	movs	r2, #32
   d5ee0:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d5ee4:	4a5e      	ldr	r2, [pc, #376]	; (d6060 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d5ee6:	9200      	str	r2, [sp, #0]
   d5ee8:	aa15      	add	r2, sp, #84	; 0x54
   d5eea:	495e      	ldr	r1, [pc, #376]	; (d6064 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d5eec:	2032      	movs	r0, #50	; 0x32
   d5eee:	f7fe fd73 	bl	d49d8 <log_message>
   d5ef2:	e7c7      	b.n	d5e84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d5ef4:	3508      	adds	r5, #8
   d5ef6:	e7da      	b.n	d5eae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d5ef8:	4650      	mov	r0, sl
   d5efa:	f7ff f947 	bl	d518c <_ZNK8particle7BleUuid7isValidEv>
   d5efe:	b960      	cbnz	r0, d5f1a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   d5f00:	4959      	ldr	r1, [pc, #356]	; (d6068 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   d5f02:	2201      	movs	r2, #1
   d5f04:	a815      	add	r0, sp, #84	; 0x54
   d5f06:	ad15      	add	r5, sp, #84	; 0x54
   d5f08:	f7ff f917 	bl	d513a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d5f0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5f0e:	46d4      	mov	ip, sl
   d5f10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d5f14:	682b      	ldr	r3, [r5, #0]
   d5f16:	f8cc 3000 	str.w	r3, [ip]
   d5f1a:	6833      	ldr	r3, [r6, #0]
   d5f1c:	e9d3 5300 	ldrd	r5, r3, [r3]
   d5f20:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d5f24:	455d      	cmp	r5, fp
   d5f26:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   d5f28:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   d5f2a:	d06e      	beq.n	d600a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d5f2c:	f855 0b08 	ldr.w	r0, [r5], #8
   d5f30:	f7ff f961 	bl	d51f6 <_ZNK8particle7BleUuideqERKS0_>
   d5f34:	2800      	cmp	r0, #0
   d5f36:	d0f5      	beq.n	d5f24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   d5f38:	f104 0a14 	add.w	sl, r4, #20
   d5f3c:	4650      	mov	r0, sl
   d5f3e:	f7ff f925 	bl	d518c <_ZNK8particle7BleUuid7isValidEv>
   d5f42:	b988      	cbnz	r0, d5f68 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   d5f44:	4b49      	ldr	r3, [pc, #292]	; (d606c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5f46:	4948      	ldr	r1, [pc, #288]	; (d6068 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   d5f48:	881a      	ldrh	r2, [r3, #0]
   d5f4a:	3201      	adds	r2, #1
   d5f4c:	b292      	uxth	r2, r2
   d5f4e:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5f50:	a815      	add	r0, sp, #84	; 0x54
   d5f52:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   d5f54:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5f56:	f7ff f90f 	bl	d5178 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d5f5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5f5c:	46d4      	mov	ip, sl
   d5f5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d5f62:	682b      	ldr	r3, [r5, #0]
   d5f64:	f8cc 3000 	str.w	r3, [ip]
    hal_ble_char_init_t charInit = {};
   d5f68:	2228      	movs	r2, #40	; 0x28
   d5f6a:	2100      	movs	r1, #0
   d5f6c:	a816      	add	r0, sp, #88	; 0x58
   d5f6e:	f000 fe4d 	bl	d6c0c <memset>
    charInit.version = BLE_API_VERSION;
   d5f72:	4b3f      	ldr	r3, [pc, #252]	; (d6070 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d5f74:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d5f76:	4651      	mov	r1, sl
   d5f78:	a804      	add	r0, sp, #16
   d5f7a:	f7ff f919 	bl	d51b0 <_ZN8particle7BleUuid7halUUIDEv>
   d5f7e:	ab04      	add	r3, sp, #16
   d5f80:	aa18      	add	r2, sp, #96	; 0x60
   d5f82:	f10d 0c20 	add.w	ip, sp, #32
   d5f86:	6818      	ldr	r0, [r3, #0]
   d5f88:	6859      	ldr	r1, [r3, #4]
   d5f8a:	4615      	mov	r5, r2
   d5f8c:	c503      	stmia	r5!, {r0, r1}
   d5f8e:	3308      	adds	r3, #8
   d5f90:	4563      	cmp	r3, ip
   d5f92:	462a      	mov	r2, r5
   d5f94:	d1f7      	bne.n	d5f86 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   d5f96:	6818      	ldr	r0, [r3, #0]
   d5f98:	6028      	str	r0, [r5, #0]
    charInit.properties = charImpl->properties().value();
   d5f9a:	7923      	ldrb	r3, [r4, #4]
   d5f9c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d5fa0:	f8d9 3000 	ldr.w	r3, [r9]
   d5fa4:	8a9b      	ldrh	r3, [r3, #20]
   d5fa6:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d5faa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5fac:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d5fae:	4b31      	ldr	r3, [pc, #196]	; (d6074 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5fb0:	2200      	movs	r2, #0
   d5fb2:	1da1      	adds	r1, r4, #6
   d5fb4:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d5fb6:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5fba:	f7fe fbf5 	bl	d47a8 <hal_ble_gatt_server_add_characteristic>
   d5fbe:	2800      	cmp	r0, #0
   d5fc0:	f47f af60 	bne.w	d5e84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   d5fc4:	2301      	movs	r3, #1
   d5fc6:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d5fc8:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d5fca:	4639      	mov	r1, r7
        return characteristics_;
   d5fcc:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d5fce:	a80d      	add	r0, sp, #52	; 0x34
   d5fd0:	f7ff fbc5 	bl	d575e <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5fd4:	4620      	mov	r0, r4
   d5fd6:	a90d      	add	r1, sp, #52	; 0x34
   d5fd8:	f7ff ff1b 	bl	d5e12 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d5fdc:	4604      	mov	r4, r0
   d5fde:	a80e      	add	r0, sp, #56	; 0x38
   d5fe0:	f7ff fbdf 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5fe4:	2c00      	cmp	r4, #0
   d5fe6:	f47f af4d 	bne.w	d5e84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d5fea:	2320      	movs	r3, #32
   d5fec:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d5ff0:	4b21      	ldr	r3, [pc, #132]	; (d6078 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   d5ff2:	9300      	str	r3, [sp, #0]
   d5ff4:	aa0d      	add	r2, sp, #52	; 0x34
   d5ff6:	4623      	mov	r3, r4
   d5ff8:	e777      	b.n	d5eea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d5ffa:	4639      	mov	r1, r7
   d5ffc:	4640      	mov	r0, r8
   d5ffe:	f7ff fbae 	bl	d575e <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6002:	a80c      	add	r0, sp, #48	; 0x30
   d6004:	f7ff fbcd 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6008:	e740      	b.n	d5e8c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d600a:	a80b      	add	r0, sp, #44	; 0x2c
   d600c:	f7ff fa5e 	bl	d54cc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d6010:	4651      	mov	r1, sl
   d6012:	a815      	add	r0, sp, #84	; 0x54
   d6014:	f7ff f8cc 	bl	d51b0 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d6018:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d601a:	2300      	movs	r3, #0
   d601c:	3214      	adds	r2, #20
   d601e:	a915      	add	r1, sp, #84	; 0x54
   d6020:	2001      	movs	r0, #1
   d6022:	f7fe fb99 	bl	d4758 <hal_ble_gatt_server_add_service>
   d6026:	2800      	cmp	r0, #0
   d6028:	d1e7      	bne.n	d5ffa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   d602a:	6835      	ldr	r5, [r6, #0]
   d602c:	a90b      	add	r1, sp, #44	; 0x2c
   d602e:	a80d      	add	r0, sp, #52	; 0x34
   d6030:	f7ff fba3 	bl	d577a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d6034:	4628      	mov	r0, r5
   d6036:	a90d      	add	r1, sp, #52	; 0x34
   d6038:	f7ff fe7c 	bl	d5d34 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d603c:	4605      	mov	r5, r0
   d603e:	a80e      	add	r0, sp, #56	; 0x38
   d6040:	f7ff fbaf 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6044:	2d00      	cmp	r5, #0
   d6046:	d0d8      	beq.n	d5ffa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   d6048:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   d604a:	6853      	ldr	r3, [r2, #4]
   d604c:	6812      	ldr	r2, [r2, #0]
   d604e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d6052:	3b01      	subs	r3, #1
   d6054:	a80c      	add	r0, sp, #48	; 0x30
   d6056:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d605a:	f7ff fba2 	bl	d57a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d605e:	e76b      	b.n	d5f38 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   d6060:	000d7041 	.word	0x000d7041
   d6064:	000d6fa0 	.word	0x000d6fa0
   d6068:	000d7100 	.word	0x000d7100
   d606c:	2003e660 	.word	0x2003e660
   d6070:	002c0001 	.word	0x002c0001
   d6074:	000d565d 	.word	0x000d565d
   d6078:	000d706c 	.word	0x000d706c

000d607c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d607c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d607e:	4c06      	ldr	r4, [pc, #24]	; (d6098 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6080:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d6082:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6084:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6086:	f7fe fbb7 	bl	d47f8 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d608a:	4620      	mov	r0, r4
   d608c:	4a03      	ldr	r2, [pc, #12]	; (d609c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d608e:	4904      	ldr	r1, [pc, #16]	; (d60a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d6090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6094:	f000 bc54 	b.w	d6940 <__aeabi_atexit>
   d6098:	2003e664 	.word	0x2003e664
   d609c:	2003e5c8 	.word	0x2003e5c8
   d60a0:	000d4ed3 	.word	0x000d4ed3

000d60a4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d60a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d60a6:	4606      	mov	r6, r0
   d60a8:	460d      	mov	r5, r1
  size_t n = 0;
   d60aa:	188f      	adds	r7, r1, r2
   d60ac:	2400      	movs	r4, #0
  while (size--) {
   d60ae:	42bd      	cmp	r5, r7
   d60b0:	d00c      	beq.n	d60cc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d60b2:	6833      	ldr	r3, [r6, #0]
   d60b4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d60b8:	689b      	ldr	r3, [r3, #8]
   d60ba:	4630      	mov	r0, r6
   d60bc:	4798      	blx	r3
     if (chunk>=0)
   d60be:	1e03      	subs	r3, r0, #0
   d60c0:	db01      	blt.n	d60c6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d60c2:	441c      	add	r4, r3
  while (size--) {
   d60c4:	e7f3      	b.n	d60ae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d60c6:	2c00      	cmp	r4, #0
   d60c8:	bf08      	it	eq
   d60ca:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d60cc:	4620      	mov	r0, r4
   d60ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d60d0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d60d0:	b513      	push	{r0, r1, r4, lr}
   d60d2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d60d4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d60d6:	b159      	cbz	r1, d60f0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d60d8:	9101      	str	r1, [sp, #4]
   d60da:	f000 fdd5 	bl	d6c88 <strlen>
   d60de:	6823      	ldr	r3, [r4, #0]
   d60e0:	9901      	ldr	r1, [sp, #4]
   d60e2:	68db      	ldr	r3, [r3, #12]
   d60e4:	4602      	mov	r2, r0
   d60e6:	4620      	mov	r0, r4
    }
   d60e8:	b002      	add	sp, #8
   d60ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d60ee:	4718      	bx	r3
    }
   d60f0:	b002      	add	sp, #8
   d60f2:	bd10      	pop	{r4, pc}

000d60f4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d60f4:	b508      	push	{r3, lr}
  return write(str);
   d60f6:	f7ff ffeb 	bl	d60d0 <_ZN5Print5writeEPKc>
}
   d60fa:	bd08      	pop	{r3, pc}

000d60fc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d60fc:	6803      	ldr	r3, [r0, #0]
   d60fe:	689b      	ldr	r3, [r3, #8]
   d6100:	4718      	bx	r3

000d6102 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6102:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6104:	210d      	movs	r1, #13
{
   d6106:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6108:	f7ff fff8 	bl	d60fc <_ZN5Print5printEc>
  n += print('\n');
   d610c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d610e:	4604      	mov	r4, r0
  n += print('\n');
   d6110:	4628      	mov	r0, r5
   d6112:	f7ff fff3 	bl	d60fc <_ZN5Print5printEc>
  return n;
}
   d6116:	4420      	add	r0, r4
   d6118:	bd38      	pop	{r3, r4, r5, pc}

000d611a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d611a:	b538      	push	{r3, r4, r5, lr}
   d611c:	4605      	mov	r5, r0
  return write(str);
   d611e:	f7ff ffd7 	bl	d60d0 <_ZN5Print5writeEPKc>
   d6122:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6124:	4628      	mov	r0, r5
   d6126:	f7ff ffec 	bl	d6102 <_ZN5Print7printlnEv>
  return n;
}
   d612a:	4420      	add	r0, r4
   d612c:	bd38      	pop	{r3, r4, r5, pc}

000d612e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d612e:	b530      	push	{r4, r5, lr}
   d6130:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6132:	2300      	movs	r3, #0
   d6134:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6138:	2a01      	cmp	r2, #1
   d613a:	bf98      	it	ls
   d613c:	220a      	movls	r2, #10
   d613e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6140:	460d      	mov	r5, r1
   d6142:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6146:	fb01 5312 	mls	r3, r1, r2, r5
   d614a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d614e:	2b09      	cmp	r3, #9
   d6150:	bf94      	ite	ls
   d6152:	3330      	addls	r3, #48	; 0x30
   d6154:	3337      	addhi	r3, #55	; 0x37
   d6156:	b2db      	uxtb	r3, r3
  } while(n);
   d6158:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d615a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d615e:	d9ef      	bls.n	d6140 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6160:	4621      	mov	r1, r4
   d6162:	f7ff ffb5 	bl	d60d0 <_ZN5Print5writeEPKc>
}
   d6166:	b00b      	add	sp, #44	; 0x2c
   d6168:	bd30      	pop	{r4, r5, pc}

000d616a <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d616a:	2300      	movs	r3, #0
   d616c:	6840      	ldr	r0, [r0, #4]
   d616e:	461a      	mov	r2, r3
   d6170:	4619      	mov	r1, r3
   d6172:	f7fe bc7d 	b.w	d4a70 <network_on>
	...

000d6178 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6178:	4b01      	ldr	r3, [pc, #4]	; (d6180 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d617a:	4a02      	ldr	r2, [pc, #8]	; (d6184 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d617c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d617e:	4770      	bx	lr
   d6180:	2003e66c 	.word	0x2003e66c
   d6184:	000d7120 	.word	0x000d7120

000d6188 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6188:	4b02      	ldr	r3, [pc, #8]	; (d6194 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d618a:	681a      	ldr	r2, [r3, #0]
   d618c:	4b02      	ldr	r3, [pc, #8]	; (d6198 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d618e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6190:	4770      	bx	lr
   d6192:	bf00      	nop
   d6194:	2003e560 	.word	0x2003e560
   d6198:	2003e670 	.word	0x2003e670

000d619c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d619c:	2100      	movs	r1, #0
   d619e:	f7fe bc2b 	b.w	d49f8 <system_delay_ms>

000d61a2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d61a2:	b510      	push	{r4, lr}
   d61a4:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d61a6:	f7fe ff44 	bl	d5032 <_ZNSt14_Function_baseD1Ev>
   d61aa:	4620      	mov	r0, r4
   d61ac:	bd10      	pop	{r4, pc}
	...

000d61b0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d61b0:	4803      	ldr	r0, [pc, #12]	; (d61c0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d61b2:	4a04      	ldr	r2, [pc, #16]	; (d61c4 <_GLOBAL__sub_I_RGB+0x14>)
   d61b4:	4904      	ldr	r1, [pc, #16]	; (d61c8 <_GLOBAL__sub_I_RGB+0x18>)
   d61b6:	2300      	movs	r3, #0
   d61b8:	6083      	str	r3, [r0, #8]
   d61ba:	f000 bbc1 	b.w	d6940 <__aeabi_atexit>
   d61be:	bf00      	nop
   d61c0:	2003e674 	.word	0x2003e674
   d61c4:	2003e5c8 	.word	0x2003e5c8
   d61c8:	000d61a3 	.word	0x000d61a3

000d61cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d61cc:	4b01      	ldr	r3, [pc, #4]	; (d61d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d61ce:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d61d0:	4770      	bx	lr
   d61d2:	bf00      	nop
   d61d4:	2003e564 	.word	0x2003e564

000d61d8 <serialEventRun>:
{
   d61d8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d61da:	4b0b      	ldr	r3, [pc, #44]	; (d6208 <serialEventRun+0x30>)
   d61dc:	b143      	cbz	r3, d61f0 <serialEventRun+0x18>
   d61de:	f000 f95b 	bl	d6498 <_Z16_fetch_usbserialv>
   d61e2:	6803      	ldr	r3, [r0, #0]
   d61e4:	691b      	ldr	r3, [r3, #16]
   d61e6:	4798      	blx	r3
   d61e8:	2800      	cmp	r0, #0
   d61ea:	dd01      	ble.n	d61f0 <serialEventRun+0x18>
        serialEvent();
   d61ec:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d61f0:	4b06      	ldr	r3, [pc, #24]	; (d620c <serialEventRun+0x34>)
   d61f2:	b143      	cbz	r3, d6206 <serialEventRun+0x2e>
   d61f4:	f000 f9ce 	bl	d6594 <_Z22__fetch_global_Serial1v>
   d61f8:	6803      	ldr	r3, [r0, #0]
   d61fa:	691b      	ldr	r3, [r3, #16]
   d61fc:	4798      	blx	r3
   d61fe:	2800      	cmp	r0, #0
   d6200:	dd01      	ble.n	d6206 <serialEventRun+0x2e>
        serialEvent1();
   d6202:	f3af 8000 	nop.w
}
   d6206:	bd08      	pop	{r3, pc}
	...

000d6210 <_post_loop>:
{
   d6210:	b508      	push	{r3, lr}
	serialEventRun();
   d6212:	f7ff ffe1 	bl	d61d8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6216:	f7fe fa6d 	bl	d46f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d621a:	4b01      	ldr	r3, [pc, #4]	; (d6220 <_post_loop+0x10>)
   d621c:	6018      	str	r0, [r3, #0]
}
   d621e:	bd08      	pop	{r3, pc}
   d6220:	2003e7d4 	.word	0x2003e7d4

000d6224 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6224:	4802      	ldr	r0, [pc, #8]	; (d6230 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6226:	4a03      	ldr	r2, [pc, #12]	; (d6234 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6228:	4903      	ldr	r1, [pc, #12]	; (d6238 <_Z33system_initialize_user_backup_ramv+0x14>)
   d622a:	1a12      	subs	r2, r2, r0
   d622c:	f000 bcc6 	b.w	d6bbc <memcpy>
   d6230:	2003f400 	.word	0x2003f400
   d6234:	2003f404 	.word	0x2003f404
   d6238:	000d7470 	.word	0x000d7470

000d623c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d623c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d623e:	2300      	movs	r3, #0
   d6240:	9300      	str	r3, [sp, #0]
   d6242:	461a      	mov	r2, r3
   d6244:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6248:	f7fe fbe8 	bl	d4a1c <system_ctrl_set_result>
}
   d624c:	b003      	add	sp, #12
   d624e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6254 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6254:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6256:	8843      	ldrh	r3, [r0, #2]
   d6258:	2b0a      	cmp	r3, #10
   d625a:	d008      	beq.n	d626e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d625c:	2b50      	cmp	r3, #80	; 0x50
   d625e:	d10b      	bne.n	d6278 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6260:	4b09      	ldr	r3, [pc, #36]	; (d6288 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6262:	681b      	ldr	r3, [r3, #0]
   d6264:	b14b      	cbz	r3, d627a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6266:	b003      	add	sp, #12
   d6268:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d626c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d626e:	f7ff ffe5 	bl	d623c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6272:	b003      	add	sp, #12
   d6274:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6278:	2300      	movs	r3, #0
   d627a:	9300      	str	r3, [sp, #0]
   d627c:	461a      	mov	r2, r3
   d627e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6282:	f7fe fbcb 	bl	d4a1c <system_ctrl_set_result>
}
   d6286:	e7f4      	b.n	d6272 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6288:	2003e688 	.word	0x2003e688

000d628c <module_user_init_hook>:
{
   d628c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d628e:	4c12      	ldr	r4, [pc, #72]	; (d62d8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6290:	4812      	ldr	r0, [pc, #72]	; (d62dc <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6292:	4d13      	ldr	r5, [pc, #76]	; (d62e0 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6294:	2100      	movs	r1, #0
   d6296:	f7fe fc53 	bl	d4b40 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d629a:	6823      	ldr	r3, [r4, #0]
   d629c:	42ab      	cmp	r3, r5
   d629e:	4b11      	ldr	r3, [pc, #68]	; (d62e4 <module_user_init_hook+0x58>)
   d62a0:	bf0c      	ite	eq
   d62a2:	2201      	moveq	r2, #1
   d62a4:	2200      	movne	r2, #0
   d62a6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d62a8:	d002      	beq.n	d62b0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d62aa:	f7ff ffbb 	bl	d6224 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d62ae:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d62b0:	f7fe fa10 	bl	d46d4 <HAL_RNG_GetRandomNumber>
   d62b4:	4604      	mov	r4, r0
    srand(seed);
   d62b6:	f000 fcb1 	bl	d6c1c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d62ba:	4b0b      	ldr	r3, [pc, #44]	; (d62e8 <module_user_init_hook+0x5c>)
   d62bc:	b113      	cbz	r3, d62c4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d62be:	4620      	mov	r0, r4
   d62c0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d62c4:	2100      	movs	r1, #0
   d62c6:	4808      	ldr	r0, [pc, #32]	; (d62e8 <module_user_init_hook+0x5c>)
   d62c8:	f7fe fc12 	bl	d4af0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d62cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d62d0:	4806      	ldr	r0, [pc, #24]	; (d62ec <module_user_init_hook+0x60>)
   d62d2:	2100      	movs	r1, #0
   d62d4:	f7fe bb98 	b.w	d4a08 <system_ctrl_set_app_request_handler>
   d62d8:	2003f400 	.word	0x2003f400
   d62dc:	000d61cd 	.word	0x000d61cd
   d62e0:	9a271c1e 	.word	0x9a271c1e
   d62e4:	2003e684 	.word	0x2003e684
   d62e8:	00000000 	.word	0x00000000
   d62ec:	000d6255 	.word	0x000d6255

000d62f0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d62f0:	4770      	bx	lr

000d62f2 <_ZN9IPAddressD0Ev>:
   d62f2:	b510      	push	{r4, lr}
   d62f4:	2118      	movs	r1, #24
   d62f6:	4604      	mov	r4, r0
   d62f8:	f000 fb27 	bl	d694a <_ZdlPvj>
   d62fc:	4620      	mov	r0, r4
   d62fe:	bd10      	pop	{r4, pc}

000d6300 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6300:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6302:	7d03      	ldrb	r3, [r0, #20]
   d6304:	2b06      	cmp	r3, #6
{
   d6306:	b08d      	sub	sp, #52	; 0x34
   d6308:	460e      	mov	r6, r1
   d630a:	f100 0704 	add.w	r7, r0, #4
   d630e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6312:	d012      	beq.n	d633a <_ZNK9IPAddress7printToER5Print+0x3a>
   d6314:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6318:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d631c:	220a      	movs	r2, #10
   d631e:	4630      	mov	r0, r6
   d6320:	f7ff ff05 	bl	d612e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6324:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6326:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6328:	d019      	beq.n	d635e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d632a:	2c00      	cmp	r4, #0
   d632c:	d0f4      	beq.n	d6318 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d632e:	212e      	movs	r1, #46	; 0x2e
   d6330:	4630      	mov	r0, r6
   d6332:	f7ff fee3 	bl	d60fc <_ZN5Print5printEc>
   d6336:	4404      	add	r4, r0
   d6338:	e7ee      	b.n	d6318 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d633a:	232f      	movs	r3, #47	; 0x2f
   d633c:	466a      	mov	r2, sp
   d633e:	4639      	mov	r1, r7
   d6340:	200a      	movs	r0, #10
		buf[0] = 0;
   d6342:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6346:	f7fe fa77 	bl	d4838 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d634a:	4668      	mov	r0, sp
   d634c:	f000 fc9c 	bl	d6c88 <strlen>
   d6350:	6833      	ldr	r3, [r6, #0]
   d6352:	4602      	mov	r2, r0
   d6354:	68db      	ldr	r3, [r3, #12]
   d6356:	4669      	mov	r1, sp
   d6358:	4630      	mov	r0, r6
   d635a:	4798      	blx	r3
   d635c:	4604      	mov	r4, r0
    }
    return n;
}
   d635e:	4620      	mov	r0, r4
   d6360:	b00d      	add	sp, #52	; 0x34
   d6362:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6364 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6364:	b510      	push	{r4, lr}
   d6366:	4b05      	ldr	r3, [pc, #20]	; (d637c <_ZN9IPAddressC1Ev+0x18>)
   d6368:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d636a:	2211      	movs	r2, #17
   d636c:	f840 3b04 	str.w	r3, [r0], #4
   d6370:	2100      	movs	r1, #0
   d6372:	f000 fc4b 	bl	d6c0c <memset>
}
   d6376:	4620      	mov	r0, r4
   d6378:	bd10      	pop	{r4, pc}
   d637a:	bf00      	nop
   d637c:	000d7148 	.word	0x000d7148

000d6380 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6380:	4603      	mov	r3, r0
   d6382:	4a07      	ldr	r2, [pc, #28]	; (d63a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6384:	b510      	push	{r4, lr}
   d6386:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d638a:	f101 0210 	add.w	r2, r1, #16
   d638e:	f851 4b04 	ldr.w	r4, [r1], #4
   d6392:	f843 4b04 	str.w	r4, [r3], #4
   d6396:	4291      	cmp	r1, r2
   d6398:	d1f9      	bne.n	d638e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d639a:	780a      	ldrb	r2, [r1, #0]
   d639c:	701a      	strb	r2, [r3, #0]
}
   d639e:	bd10      	pop	{r4, pc}
   d63a0:	000d7148 	.word	0x000d7148

000d63a4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d63a4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d63a6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d63aa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d63ae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d63b2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d63b6:	2304      	movs	r3, #4
   d63b8:	6041      	str	r1, [r0, #4]
   d63ba:	7503      	strb	r3, [r0, #20]
}
   d63bc:	bd10      	pop	{r4, pc}
	...

000d63c0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d63c0:	b513      	push	{r0, r1, r4, lr}
   d63c2:	4b05      	ldr	r3, [pc, #20]	; (d63d8 <_ZN9IPAddressC1EPKh+0x18>)
   d63c4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d63c6:	78cb      	ldrb	r3, [r1, #3]
   d63c8:	9300      	str	r3, [sp, #0]
   d63ca:	788b      	ldrb	r3, [r1, #2]
   d63cc:	784a      	ldrb	r2, [r1, #1]
   d63ce:	7809      	ldrb	r1, [r1, #0]
   d63d0:	f7ff ffe8 	bl	d63a4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d63d4:	b002      	add	sp, #8
   d63d6:	bd10      	pop	{r4, pc}
   d63d8:	000d7148 	.word	0x000d7148

000d63dc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d63dc:	7441      	strb	r1, [r0, #17]
}
   d63de:	4770      	bx	lr

000d63e0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d63e0:	4770      	bx	lr

000d63e2 <_ZN9USBSerial4readEv>:
{
   d63e2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d63e4:	2100      	movs	r1, #0
   d63e6:	7c00      	ldrb	r0, [r0, #16]
   d63e8:	f7fe fad6 	bl	d4998 <HAL_USB_USART_Receive_Data>
}
   d63ec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d63f0:	bd08      	pop	{r3, pc}

000d63f2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d63f2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d63f4:	2101      	movs	r1, #1
   d63f6:	7c00      	ldrb	r0, [r0, #16]
   d63f8:	f7fe face 	bl	d4998 <HAL_USB_USART_Receive_Data>
}
   d63fc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6400:	bd08      	pop	{r3, pc}

000d6402 <_ZN9USBSerial17availableForWriteEv>:
{
   d6402:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6404:	7c00      	ldrb	r0, [r0, #16]
   d6406:	f7fe fabf 	bl	d4988 <HAL_USB_USART_Available_Data_For_Write>
}
   d640a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d640e:	bd08      	pop	{r3, pc}

000d6410 <_ZN9USBSerial9availableEv>:
{
   d6410:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6412:	7c00      	ldrb	r0, [r0, #16]
   d6414:	f7fe fab0 	bl	d4978 <HAL_USB_USART_Available_Data>
}
   d6418:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d641c:	bd08      	pop	{r3, pc}

000d641e <_ZN9USBSerial5writeEh>:
{
   d641e:	b513      	push	{r0, r1, r4, lr}
   d6420:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6422:	7c00      	ldrb	r0, [r0, #16]
{
   d6424:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6426:	f7fe faaf 	bl	d4988 <HAL_USB_USART_Available_Data_For_Write>
   d642a:	2800      	cmp	r0, #0
   d642c:	9901      	ldr	r1, [sp, #4]
   d642e:	dc01      	bgt.n	d6434 <_ZN9USBSerial5writeEh+0x16>
   d6430:	7c60      	ldrb	r0, [r4, #17]
   d6432:	b120      	cbz	r0, d643e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6434:	7c20      	ldrb	r0, [r4, #16]
   d6436:	f7fe fab7 	bl	d49a8 <HAL_USB_USART_Send_Data>
   d643a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d643e:	b002      	add	sp, #8
   d6440:	bd10      	pop	{r4, pc}

000d6442 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6442:	7c00      	ldrb	r0, [r0, #16]
   d6444:	f7fe bab8 	b.w	d49b8 <HAL_USB_USART_Flush_Data>

000d6448 <_ZN9USBSerialD0Ev>:
   d6448:	b510      	push	{r4, lr}
   d644a:	2114      	movs	r1, #20
   d644c:	4604      	mov	r4, r0
   d644e:	f000 fa7c 	bl	d694a <_ZdlPvj>
   d6452:	4620      	mov	r0, r4
   d6454:	bd10      	pop	{r4, pc}
	...

000d6458 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6458:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d645a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d645e:	4604      	mov	r4, r0
   d6460:	4608      	mov	r0, r1
   d6462:	2100      	movs	r1, #0
   d6464:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6468:	4b04      	ldr	r3, [pc, #16]	; (d647c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d646a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d646c:	2301      	movs	r3, #1
  _serial = serial;
   d646e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6470:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6472:	4611      	mov	r1, r2
   d6474:	f7fe fa70 	bl	d4958 <HAL_USB_USART_Init>
}
   d6478:	4620      	mov	r0, r4
   d647a:	bd10      	pop	{r4, pc}
   d647c:	000d715c 	.word	0x000d715c

000d6480 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6480:	7c00      	ldrb	r0, [r0, #16]
   d6482:	2200      	movs	r2, #0
   d6484:	f7fe ba70 	b.w	d4968 <HAL_USB_USART_Begin>

000d6488 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6488:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d648a:	2214      	movs	r2, #20
{
   d648c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d648e:	2100      	movs	r1, #0
   d6490:	f000 fbbc 	bl	d6c0c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6494:	4620      	mov	r0, r4
   d6496:	bd10      	pop	{r4, pc}

000d6498 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6498:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d649a:	4c10      	ldr	r4, [pc, #64]	; (d64dc <_Z16_fetch_usbserialv+0x44>)
{
   d649c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d649e:	a803      	add	r0, sp, #12
   d64a0:	f7ff fff2 	bl	d6488 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d64a4:	7821      	ldrb	r1, [r4, #0]
   d64a6:	f3bf 8f5b 	dmb	ish
   d64aa:	f011 0101 	ands.w	r1, r1, #1
   d64ae:	d111      	bne.n	d64d4 <_Z16_fetch_usbserialv+0x3c>
   d64b0:	4620      	mov	r0, r4
   d64b2:	9101      	str	r1, [sp, #4]
   d64b4:	f7fd fdf3 	bl	d409e <__cxa_guard_acquire>
   d64b8:	9901      	ldr	r1, [sp, #4]
   d64ba:	b158      	cbz	r0, d64d4 <_Z16_fetch_usbserialv+0x3c>
   d64bc:	aa03      	add	r2, sp, #12
   d64be:	4808      	ldr	r0, [pc, #32]	; (d64e0 <_Z16_fetch_usbserialv+0x48>)
   d64c0:	f7ff ffca 	bl	d6458 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d64c4:	4620      	mov	r0, r4
   d64c6:	f7fd fdef 	bl	d40a8 <__cxa_guard_release>
   d64ca:	4a06      	ldr	r2, [pc, #24]	; (d64e4 <_Z16_fetch_usbserialv+0x4c>)
   d64cc:	4906      	ldr	r1, [pc, #24]	; (d64e8 <_Z16_fetch_usbserialv+0x50>)
   d64ce:	4804      	ldr	r0, [pc, #16]	; (d64e0 <_Z16_fetch_usbserialv+0x48>)
   d64d0:	f000 fa36 	bl	d6940 <__aeabi_atexit>
	return _usbserial;
}
   d64d4:	4802      	ldr	r0, [pc, #8]	; (d64e0 <_Z16_fetch_usbserialv+0x48>)
   d64d6:	b008      	add	sp, #32
   d64d8:	bd10      	pop	{r4, pc}
   d64da:	bf00      	nop
   d64dc:	2003e68c 	.word	0x2003e68c
   d64e0:	2003e690 	.word	0x2003e690
   d64e4:	2003e5c8 	.word	0x2003e5c8
   d64e8:	000d63e1 	.word	0x000d63e1

000d64ec <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d64ec:	4770      	bx	lr

000d64ee <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d64ee:	7441      	strb	r1, [r0, #17]
}
   d64f0:	4770      	bx	lr

000d64f2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d64f2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d64f4:	7c00      	ldrb	r0, [r0, #16]
   d64f6:	f7fe f9d7 	bl	d48a8 <hal_usart_available_data_for_write>
}
   d64fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d64fe:	bd08      	pop	{r3, pc}

000d6500 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6500:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6502:	7c00      	ldrb	r0, [r0, #16]
   d6504:	f7fe f9b0 	bl	d4868 <hal_usart_available>
}
   d6508:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d650c:	bd08      	pop	{r3, pc}

000d650e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d650e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6510:	7c00      	ldrb	r0, [r0, #16]
   d6512:	f7fe f9b9 	bl	d4888 <hal_usart_peek>
}
   d6516:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d651a:	bd08      	pop	{r3, pc}

000d651c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d651c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d651e:	7c00      	ldrb	r0, [r0, #16]
   d6520:	f7fe f9aa 	bl	d4878 <hal_usart_read>
}
   d6524:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6528:	bd08      	pop	{r3, pc}

000d652a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d652a:	7c00      	ldrb	r0, [r0, #16]
   d652c:	f7fe b9b4 	b.w	d4898 <hal_usart_flush>

000d6530 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6530:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6532:	7c45      	ldrb	r5, [r0, #17]
{
   d6534:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6536:	b12d      	cbz	r5, d6544 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6538:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d653a:	b003      	add	sp, #12
   d653c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6540:	f7fe b98a 	b.w	d4858 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6544:	7c00      	ldrb	r0, [r0, #16]
   d6546:	9101      	str	r1, [sp, #4]
   d6548:	f7fe f9ae 	bl	d48a8 <hal_usart_available_data_for_write>
   d654c:	2800      	cmp	r0, #0
   d654e:	9901      	ldr	r1, [sp, #4]
   d6550:	dcf2      	bgt.n	d6538 <_ZN11USARTSerial5writeEh+0x8>
}
   d6552:	4628      	mov	r0, r5
   d6554:	b003      	add	sp, #12
   d6556:	bd30      	pop	{r4, r5, pc}

000d6558 <_ZN11USARTSerialD0Ev>:
   d6558:	b510      	push	{r4, lr}
   d655a:	2114      	movs	r1, #20
   d655c:	4604      	mov	r4, r0
   d655e:	f000 f9f4 	bl	d694a <_ZdlPvj>
   d6562:	4620      	mov	r0, r4
   d6564:	bd10      	pop	{r4, pc}
	...

000d6568 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6568:	b510      	push	{r4, lr}
   d656a:	f04f 0c00 	mov.w	ip, #0
   d656e:	4604      	mov	r4, r0
   d6570:	4608      	mov	r0, r1
   d6572:	4611      	mov	r1, r2
   d6574:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6578:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d657c:	4a04      	ldr	r2, [pc, #16]	; (d6590 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d657e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6580:	2201      	movs	r2, #1
  _serial = serial;
   d6582:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6584:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6586:	461a      	mov	r2, r3
   d6588:	f7fe f95e 	bl	d4848 <hal_usart_init>
}
   d658c:	4620      	mov	r0, r4
   d658e:	bd10      	pop	{r4, pc}
   d6590:	000d718c 	.word	0x000d718c

000d6594 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6594:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6596:	4c0e      	ldr	r4, [pc, #56]	; (d65d0 <_Z22__fetch_global_Serial1v+0x3c>)
   d6598:	7821      	ldrb	r1, [r4, #0]
   d659a:	f3bf 8f5b 	dmb	ish
   d659e:	f011 0101 	ands.w	r1, r1, #1
   d65a2:	d112      	bne.n	d65ca <_Z22__fetch_global_Serial1v+0x36>
   d65a4:	4620      	mov	r0, r4
   d65a6:	9101      	str	r1, [sp, #4]
   d65a8:	f7fd fd79 	bl	d409e <__cxa_guard_acquire>
   d65ac:	9901      	ldr	r1, [sp, #4]
   d65ae:	b160      	cbz	r0, d65ca <_Z22__fetch_global_Serial1v+0x36>
   d65b0:	4a08      	ldr	r2, [pc, #32]	; (d65d4 <_Z22__fetch_global_Serial1v+0x40>)
   d65b2:	4b09      	ldr	r3, [pc, #36]	; (d65d8 <_Z22__fetch_global_Serial1v+0x44>)
   d65b4:	4809      	ldr	r0, [pc, #36]	; (d65dc <_Z22__fetch_global_Serial1v+0x48>)
   d65b6:	f7ff ffd7 	bl	d6568 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d65ba:	4620      	mov	r0, r4
   d65bc:	f7fd fd74 	bl	d40a8 <__cxa_guard_release>
   d65c0:	4a07      	ldr	r2, [pc, #28]	; (d65e0 <_Z22__fetch_global_Serial1v+0x4c>)
   d65c2:	4908      	ldr	r1, [pc, #32]	; (d65e4 <_Z22__fetch_global_Serial1v+0x50>)
   d65c4:	4805      	ldr	r0, [pc, #20]	; (d65dc <_Z22__fetch_global_Serial1v+0x48>)
   d65c6:	f000 f9bb 	bl	d6940 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d65ca:	4804      	ldr	r0, [pc, #16]	; (d65dc <_Z22__fetch_global_Serial1v+0x48>)
   d65cc:	b002      	add	sp, #8
   d65ce:	bd10      	pop	{r4, pc}
   d65d0:	2003e6a4 	.word	0x2003e6a4
   d65d4:	2003e6a8 	.word	0x2003e6a8
   d65d8:	2003e72c 	.word	0x2003e72c
   d65dc:	2003e7b0 	.word	0x2003e7b0
   d65e0:	2003e5c8 	.word	0x2003e5c8
   d65e4:	000d64ed 	.word	0x000d64ed

000d65e8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d65e8:	4770      	bx	lr

000d65ea <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d65ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d65ec:	4606      	mov	r6, r0
   d65ee:	4615      	mov	r5, r2
   d65f0:	460c      	mov	r4, r1
   d65f2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d65f4:	42bc      	cmp	r4, r7
   d65f6:	d006      	beq.n	d6606 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d65f8:	6833      	ldr	r3, [r6, #0]
   d65fa:	f814 1b01 	ldrb.w	r1, [r4], #1
   d65fe:	689b      	ldr	r3, [r3, #8]
   d6600:	4630      	mov	r0, r6
   d6602:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6604:	e7f6      	b.n	d65f4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6606:	4628      	mov	r0, r5
   d6608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d660a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d660a:	7c00      	ldrb	r0, [r0, #16]
   d660c:	2200      	movs	r2, #0
   d660e:	f7fe b96b 	b.w	d48e8 <hal_i2c_write>

000d6612 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6612:	7c00      	ldrb	r0, [r0, #16]
   d6614:	2100      	movs	r1, #0
   d6616:	f7fe b96f 	b.w	d48f8 <hal_i2c_available>

000d661a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d661a:	7c00      	ldrb	r0, [r0, #16]
   d661c:	2100      	movs	r1, #0
   d661e:	f7fe b973 	b.w	d4908 <hal_i2c_read>

000d6622 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6622:	7c00      	ldrb	r0, [r0, #16]
   d6624:	2100      	movs	r1, #0
   d6626:	f7fe b977 	b.w	d4918 <hal_i2c_peek>

000d662a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d662a:	7c00      	ldrb	r0, [r0, #16]
   d662c:	2100      	movs	r1, #0
   d662e:	f7fe b97b 	b.w	d4928 <hal_i2c_flush>

000d6632 <_ZN7TwoWireD0Ev>:
   d6632:	b510      	push	{r4, lr}
   d6634:	2114      	movs	r1, #20
   d6636:	4604      	mov	r4, r0
   d6638:	f000 f987 	bl	d694a <_ZdlPvj>
   d663c:	4620      	mov	r0, r4
   d663e:	bd10      	pop	{r4, pc}

000d6640 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6640:	b510      	push	{r4, lr}
   d6642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6646:	4604      	mov	r4, r0
   d6648:	4608      	mov	r0, r1
   d664a:	2100      	movs	r1, #0
   d664c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6650:	4b03      	ldr	r3, [pc, #12]	; (d6660 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6652:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6654:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6656:	4611      	mov	r1, r2
   d6658:	f7fe f96e 	bl	d4938 <hal_i2c_init>
}
   d665c:	4620      	mov	r0, r4
   d665e:	bd10      	pop	{r4, pc}
   d6660:	000d71bc 	.word	0x000d71bc

000d6664 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6664:	2300      	movs	r3, #0
   d6666:	7c00      	ldrb	r0, [r0, #16]
   d6668:	461a      	mov	r2, r3
   d666a:	4619      	mov	r1, r3
   d666c:	f7fe b924 	b.w	d48b8 <hal_i2c_begin>

000d6670 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6670:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d6672:	2200      	movs	r2, #0
   d6674:	2314      	movs	r3, #20
   d6676:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d667a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d667e:	780b      	ldrb	r3, [r1, #0]
   d6680:	f88d 3008 	strb.w	r3, [sp, #8]
   d6684:	684b      	ldr	r3, [r1, #4]
   d6686:	9303      	str	r3, [sp, #12]
   d6688:	68cb      	ldr	r3, [r1, #12]
   d668a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d668c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d668e:	7a0b      	ldrb	r3, [r1, #8]
   d6690:	9305      	str	r3, [sp, #20]
   d6692:	a901      	add	r1, sp, #4
   d6694:	f7fe f958 	bl	d4948 <hal_i2c_request_ex>
}
   d6698:	b007      	add	sp, #28
   d669a:	f85d fb04 	ldr.w	pc, [sp], #4

000d669e <_ZN7TwoWire11requestFromEhjh>:
{
   d669e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d66a0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d66a2:	f88d 1000 	strb.w	r1, [sp]
   d66a6:	f04f 0164 	mov.w	r1, #100	; 0x64
   d66aa:	9103      	str	r1, [sp, #12]
   d66ac:	bf18      	it	ne
   d66ae:	2301      	movne	r3, #1
   d66b0:	4669      	mov	r1, sp
    size_ = size;
   d66b2:	9201      	str	r2, [sp, #4]
   d66b4:	f88d 3008 	strb.w	r3, [sp, #8]
   d66b8:	f7ff ffda 	bl	d6670 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d66bc:	b005      	add	sp, #20
   d66be:	f85d fb04 	ldr.w	pc, [sp], #4

000d66c2 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d66c2:	2301      	movs	r3, #1
   d66c4:	f7ff bfeb 	b.w	d669e <_ZN7TwoWire11requestFromEhjh>

000d66c8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d66c8:	7c00      	ldrb	r0, [r0, #16]
   d66ca:	2200      	movs	r2, #0
   d66cc:	f7fe b8fc 	b.w	d48c8 <hal_i2c_begin_transmission>

000d66d0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d66d0:	b2c9      	uxtb	r1, r1
   d66d2:	f7ff bff9 	b.w	d66c8 <_ZN7TwoWire17beginTransmissionEh>

000d66d6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d66d6:	7c00      	ldrb	r0, [r0, #16]
   d66d8:	2200      	movs	r2, #0
   d66da:	f7fe b8fd 	b.w	d48d8 <hal_i2c_end_transmission>

000d66de <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d66de:	2101      	movs	r1, #1
   d66e0:	f7ff bff9 	b.w	d66d6 <_ZN7TwoWire15endTransmissionEh>

000d66e4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d66e4:	2200      	movs	r2, #0
   d66e6:	6840      	ldr	r0, [r0, #4]
   d66e8:	4611      	mov	r1, r2
   d66ea:	f7fe b9b9 	b.w	d4a60 <network_ready>

000d66ee <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d66ee:	2200      	movs	r2, #0
   d66f0:	6840      	ldr	r0, [r0, #4]
   d66f2:	4611      	mov	r1, r2
   d66f4:	f7fe b9d4 	b.w	d4aa0 <network_listening>

000d66f8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d66f8:	2200      	movs	r2, #0
   d66fa:	6840      	ldr	r0, [r0, #4]
   d66fc:	4611      	mov	r1, r2
   d66fe:	f7fe b9df 	b.w	d4ac0 <network_get_listen_timeout>

000d6702 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6702:	6840      	ldr	r0, [r0, #4]
   d6704:	2200      	movs	r2, #0
   d6706:	f7fe b9d3 	b.w	d4ab0 <network_set_listen_timeout>

000d670a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d670a:	6840      	ldr	r0, [r0, #4]
   d670c:	2200      	movs	r2, #0
   d670e:	f081 0101 	eor.w	r1, r1, #1
   d6712:	f7fe b9bd 	b.w	d4a90 <network_listen>

000d6716 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6716:	2300      	movs	r3, #0
   d6718:	6840      	ldr	r0, [r0, #4]
   d671a:	461a      	mov	r2, r3
   d671c:	4619      	mov	r1, r3
   d671e:	f7fe b9af 	b.w	d4a80 <network_off>

000d6722 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6722:	2200      	movs	r2, #0
   d6724:	6840      	ldr	r0, [r0, #4]
   d6726:	4611      	mov	r1, r2
   d6728:	f7fe b98a 	b.w	d4a40 <network_connecting>

000d672c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d672c:	6840      	ldr	r0, [r0, #4]
   d672e:	2200      	movs	r2, #0
   d6730:	2102      	movs	r1, #2
   d6732:	f7fe b98d 	b.w	d4a50 <network_disconnect>

000d6736 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6736:	2300      	movs	r3, #0
   d6738:	6840      	ldr	r0, [r0, #4]
   d673a:	461a      	mov	r2, r3
   d673c:	f7fe b978 	b.w	d4a30 <network_connect>

000d6740 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6740:	4b02      	ldr	r3, [pc, #8]	; (d674c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6742:	2204      	movs	r2, #4
   d6744:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6746:	4a02      	ldr	r2, [pc, #8]	; (d6750 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6748:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d674a:	4770      	bx	lr
   d674c:	2003e7c4 	.word	0x2003e7c4
   d6750:	000d71e4 	.word	0x000d71e4

000d6754 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6754:	2300      	movs	r3, #0
   d6756:	6840      	ldr	r0, [r0, #4]
   d6758:	461a      	mov	r2, r3
   d675a:	f7fe b969 	b.w	d4a30 <network_connect>

000d675e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d675e:	6840      	ldr	r0, [r0, #4]
   d6760:	2200      	movs	r2, #0
   d6762:	2102      	movs	r1, #2
   d6764:	f7fe b974 	b.w	d4a50 <network_disconnect>

000d6768 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6768:	2200      	movs	r2, #0
   d676a:	6840      	ldr	r0, [r0, #4]
   d676c:	4611      	mov	r1, r2
   d676e:	f7fe b967 	b.w	d4a40 <network_connecting>

000d6772 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6772:	2200      	movs	r2, #0
   d6774:	6840      	ldr	r0, [r0, #4]
   d6776:	4611      	mov	r1, r2
   d6778:	f7fe b972 	b.w	d4a60 <network_ready>

000d677c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d677c:	2300      	movs	r3, #0
   d677e:	6840      	ldr	r0, [r0, #4]
   d6780:	461a      	mov	r2, r3
   d6782:	4619      	mov	r1, r3
   d6784:	f7fe b974 	b.w	d4a70 <network_on>

000d6788 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6788:	2300      	movs	r3, #0
   d678a:	6840      	ldr	r0, [r0, #4]
   d678c:	461a      	mov	r2, r3
   d678e:	4619      	mov	r1, r3
   d6790:	f7fe b976 	b.w	d4a80 <network_off>

000d6794 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6794:	6840      	ldr	r0, [r0, #4]
   d6796:	2100      	movs	r1, #0
   d6798:	f7fe b99a 	b.w	d4ad0 <network_is_on>

000d679c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d679c:	6840      	ldr	r0, [r0, #4]
   d679e:	2100      	movs	r1, #0
   d67a0:	f7fe b99e 	b.w	d4ae0 <network_is_off>

000d67a4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d67a4:	6840      	ldr	r0, [r0, #4]
   d67a6:	2200      	movs	r2, #0
   d67a8:	f081 0101 	eor.w	r1, r1, #1
   d67ac:	f7fe b970 	b.w	d4a90 <network_listen>

000d67b0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d67b0:	6840      	ldr	r0, [r0, #4]
   d67b2:	2200      	movs	r2, #0
   d67b4:	f7fe b97c 	b.w	d4ab0 <network_set_listen_timeout>

000d67b8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d67b8:	2200      	movs	r2, #0
   d67ba:	6840      	ldr	r0, [r0, #4]
   d67bc:	4611      	mov	r1, r2
   d67be:	f7fe b97f 	b.w	d4ac0 <network_get_listen_timeout>

000d67c2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d67c2:	2200      	movs	r2, #0
   d67c4:	6840      	ldr	r0, [r0, #4]
   d67c6:	4611      	mov	r1, r2
   d67c8:	f7fe b96a 	b.w	d4aa0 <network_listening>

000d67cc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d67cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d67d0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d67d2:	b095      	sub	sp, #84	; 0x54
   d67d4:	4616      	mov	r6, r2
   d67d6:	460d      	mov	r5, r1
   d67d8:	4607      	mov	r7, r0
    IPAddress addr;
   d67da:	f7ff fdc3 	bl	d6364 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d67de:	4621      	mov	r1, r4
   d67e0:	2218      	movs	r2, #24
   d67e2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d67e4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d67e6:	f000 fa11 	bl	d6c0c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d67ea:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d67ec:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d67f0:	4621      	mov	r1, r4
   d67f2:	466b      	mov	r3, sp
   d67f4:	aa0c      	add	r2, sp, #48	; 0x30
   d67f6:	4630      	mov	r0, r6
   d67f8:	f7fd ff64 	bl	d46c4 <netdb_getaddrinfo>
    if (!r) {
   d67fc:	4604      	mov	r4, r0
   d67fe:	2800      	cmp	r0, #0
   d6800:	d14c      	bne.n	d689c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6802:	4602      	mov	r2, r0
   d6804:	2101      	movs	r1, #1
   d6806:	6868      	ldr	r0, [r5, #4]
   d6808:	f7fe f92a 	bl	d4a60 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d680c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d680e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6810:	4622      	mov	r2, r4
   d6812:	6868      	ldr	r0, [r5, #4]
   d6814:	f7fe f924 	bl	d4a60 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6818:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d681a:	4681      	mov	r9, r0
        bool ok = false;
   d681c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d681e:	2e00      	cmp	r6, #0
   d6820:	d03c      	beq.n	d689c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d6822:	2900      	cmp	r1, #0
   d6824:	d13a      	bne.n	d689c <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6826:	6873      	ldr	r3, [r6, #4]
   d6828:	2b02      	cmp	r3, #2
   d682a:	d003      	beq.n	d6834 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d682c:	2b0a      	cmp	r3, #10
   d682e:	d011      	beq.n	d6854 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6830:	69f6      	ldr	r6, [r6, #28]
   d6832:	e7f4      	b.n	d681e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6834:	f1b8 0f00 	cmp.w	r8, #0
   d6838:	d00a      	beq.n	d6850 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d683a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d683c:	a806      	add	r0, sp, #24
   d683e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d6840:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d6842:	f7ff fdbd 	bl	d63c0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6848:	1d3c      	adds	r4, r7, #4
   d684a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d684c:	682b      	ldr	r3, [r5, #0]
   d684e:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d6850:	4641      	mov	r1, r8
   d6852:	e7ed      	b.n	d6830 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6854:	f1b9 0f00 	cmp.w	r9, #0
   d6858:	d101      	bne.n	d685e <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d685a:	4649      	mov	r1, r9
   d685c:	e7e8      	b.n	d6830 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d685e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6860:	2210      	movs	r2, #16
   d6862:	a801      	add	r0, sp, #4
   d6864:	f000 f9d2 	bl	d6c0c <memset>
                    a.v = 6;
   d6868:	2306      	movs	r3, #6
   d686a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d686e:	ad01      	add	r5, sp, #4
   d6870:	f104 0308 	add.w	r3, r4, #8
   d6874:	3418      	adds	r4, #24
   d6876:	6818      	ldr	r0, [r3, #0]
   d6878:	6859      	ldr	r1, [r3, #4]
   d687a:	462a      	mov	r2, r5
   d687c:	c203      	stmia	r2!, {r0, r1}
   d687e:	3308      	adds	r3, #8
   d6880:	42a3      	cmp	r3, r4
   d6882:	4615      	mov	r5, r2
   d6884:	d1f7      	bne.n	d6876 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d6886:	a901      	add	r1, sp, #4
   d6888:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d688a:	ad07      	add	r5, sp, #28
   d688c:	f7ff fd78 	bl	d6380 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6892:	1d3c      	adds	r4, r7, #4
   d6894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6896:	682b      	ldr	r3, [r5, #0]
   d6898:	7023      	strb	r3, [r4, #0]
   d689a:	e7de      	b.n	d685a <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d689c:	9800      	ldr	r0, [sp, #0]
   d689e:	f7fd ff09 	bl	d46b4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d68a2:	4638      	mov	r0, r7
   d68a4:	b015      	add	sp, #84	; 0x54
   d68a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d68ac <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d68ac:	4b02      	ldr	r3, [pc, #8]	; (d68b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d68ae:	4a03      	ldr	r2, [pc, #12]	; (d68bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d68b0:	601a      	str	r2, [r3, #0]
   d68b2:	2200      	movs	r2, #0
   d68b4:	605a      	str	r2, [r3, #4]

} // spark
   d68b6:	4770      	bx	lr
   d68b8:	2003e7cc 	.word	0x2003e7cc
   d68bc:	000d7220 	.word	0x000d7220

000d68c0 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d68c0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d68c2:	2300      	movs	r3, #0
   d68c4:	2520      	movs	r5, #32
   d68c6:	8043      	strh	r3, [r0, #2]
   d68c8:	2314      	movs	r3, #20
{
   d68ca:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d68cc:	8003      	strh	r3, [r0, #0]
   d68ce:	6085      	str	r5, [r0, #8]
   d68d0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d68d2:	4906      	ldr	r1, [pc, #24]	; (d68ec <_Z17acquireWireBufferv+0x2c>)
   d68d4:	4628      	mov	r0, r5
   d68d6:	f000 f83a 	bl	d694e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d68da:	4904      	ldr	r1, [pc, #16]	; (d68ec <_Z17acquireWireBufferv+0x2c>)
	};
   d68dc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d68de:	4628      	mov	r0, r5
   d68e0:	f000 f835 	bl	d694e <_ZnajRKSt9nothrow_t>
	};
   d68e4:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d68e6:	4620      	mov	r0, r4
   d68e8:	bd38      	pop	{r3, r4, r5, pc}
   d68ea:	bf00      	nop
   d68ec:	000d7254 	.word	0x000d7254

000d68f0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d68f0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d68f2:	4d0f      	ldr	r5, [pc, #60]	; (d6930 <_Z19__fetch_global_Wirev+0x40>)
   d68f4:	7829      	ldrb	r1, [r5, #0]
   d68f6:	f3bf 8f5b 	dmb	ish
   d68fa:	f011 0401 	ands.w	r4, r1, #1
{
   d68fe:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6900:	d113      	bne.n	d692a <_Z19__fetch_global_Wirev+0x3a>
   d6902:	4628      	mov	r0, r5
   d6904:	f7fd fbcb 	bl	d409e <__cxa_guard_acquire>
   d6908:	b178      	cbz	r0, d692a <_Z19__fetch_global_Wirev+0x3a>
   d690a:	a801      	add	r0, sp, #4
   d690c:	f7ff ffd8 	bl	d68c0 <_Z17acquireWireBufferv>
   d6910:	aa01      	add	r2, sp, #4
   d6912:	4621      	mov	r1, r4
   d6914:	4807      	ldr	r0, [pc, #28]	; (d6934 <_Z19__fetch_global_Wirev+0x44>)
   d6916:	f7ff fe93 	bl	d6640 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d691a:	4628      	mov	r0, r5
   d691c:	f7fd fbc4 	bl	d40a8 <__cxa_guard_release>
   d6920:	4a05      	ldr	r2, [pc, #20]	; (d6938 <_Z19__fetch_global_Wirev+0x48>)
   d6922:	4906      	ldr	r1, [pc, #24]	; (d693c <_Z19__fetch_global_Wirev+0x4c>)
   d6924:	4803      	ldr	r0, [pc, #12]	; (d6934 <_Z19__fetch_global_Wirev+0x44>)
   d6926:	f000 f80b 	bl	d6940 <__aeabi_atexit>
	return wire;
}
   d692a:	4802      	ldr	r0, [pc, #8]	; (d6934 <_Z19__fetch_global_Wirev+0x44>)
   d692c:	b007      	add	sp, #28
   d692e:	bd30      	pop	{r4, r5, pc}
   d6930:	2003e7d8 	.word	0x2003e7d8
   d6934:	2003e7dc 	.word	0x2003e7dc
   d6938:	2003e5c8 	.word	0x2003e5c8
   d693c:	000d65e9 	.word	0x000d65e9

000d6940 <__aeabi_atexit>:
   d6940:	460b      	mov	r3, r1
   d6942:	4601      	mov	r1, r0
   d6944:	4618      	mov	r0, r3
   d6946:	f000 b91d 	b.w	d6b84 <__cxa_atexit>

000d694a <_ZdlPvj>:
   d694a:	f7fd bba6 	b.w	d409a <_ZdlPv>

000d694e <_ZnajRKSt9nothrow_t>:
   d694e:	f7fd bba2 	b.w	d4096 <_Znaj>

000d6952 <_ZSt25__throw_bad_function_callv>:
   d6952:	b508      	push	{r3, lr}
   d6954:	f7fe f8ec 	bl	d4b30 <abort>

000d6958 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d6958:	4901      	ldr	r1, [pc, #4]	; (d6960 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d695a:	f000 b8f9 	b.w	d6b50 <_ZNKSt9type_infoeqERKS_>
   d695e:	bf00      	nop
   d6960:	000d7270 	.word	0x000d7270

000d6964 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d6964:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6966:	2400      	movs	r4, #0
   d6968:	2310      	movs	r3, #16
   d696a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d696e:	6803      	ldr	r3, [r0, #0]
   d6970:	9400      	str	r4, [sp, #0]
   d6972:	699e      	ldr	r6, [r3, #24]
   d6974:	f88d 4004 	strb.w	r4, [sp, #4]
   d6978:	4615      	mov	r5, r2
   d697a:	466b      	mov	r3, sp
   d697c:	6812      	ldr	r2, [r2, #0]
   d697e:	47b0      	blx	r6
   d6980:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d6984:	f003 0306 	and.w	r3, r3, #6
   d6988:	2b06      	cmp	r3, #6
   d698a:	bf03      	ittte	eq
   d698c:	9b00      	ldreq	r3, [sp, #0]
   d698e:	602b      	streq	r3, [r5, #0]
   d6990:	2001      	moveq	r0, #1
   d6992:	4620      	movne	r0, r4
   d6994:	b004      	add	sp, #16
   d6996:	bd70      	pop	{r4, r5, r6, pc}

000d6998 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d6998:	9800      	ldr	r0, [sp, #0]
   d699a:	4290      	cmp	r0, r2
   d699c:	bf14      	ite	ne
   d699e:	2001      	movne	r0, #1
   d69a0:	2006      	moveq	r0, #6
   d69a2:	4770      	bx	lr

000d69a4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d69a4:	b510      	push	{r4, lr}
   d69a6:	4b03      	ldr	r3, [pc, #12]	; (d69b4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d69a8:	6003      	str	r3, [r0, #0]
   d69aa:	4604      	mov	r4, r0
   d69ac:	f000 f8cd 	bl	d6b4a <_ZNSt9type_infoD1Ev>
   d69b0:	4620      	mov	r0, r4
   d69b2:	bd10      	pop	{r4, pc}
   d69b4:	000d72b0 	.word	0x000d72b0

000d69b8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d69b8:	b510      	push	{r4, lr}
   d69ba:	4604      	mov	r4, r0
   d69bc:	f7ff fff2 	bl	d69a4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d69c0:	4620      	mov	r0, r4
   d69c2:	2108      	movs	r1, #8
   d69c4:	f7ff ffc1 	bl	d694a <_ZdlPvj>
   d69c8:	4620      	mov	r0, r4
   d69ca:	bd10      	pop	{r4, pc}

000d69cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d69cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d69d0:	461f      	mov	r7, r3
   d69d2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d69d6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d69da:	4598      	cmp	r8, r3
   d69dc:	4606      	mov	r6, r0
   d69de:	4615      	mov	r5, r2
   d69e0:	d107      	bne.n	d69f2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d69e2:	9907      	ldr	r1, [sp, #28]
   d69e4:	f000 f8b4 	bl	d6b50 <_ZNKSt9type_infoeqERKS_>
   d69e8:	b118      	cbz	r0, d69f2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d69ea:	7165      	strb	r5, [r4, #5]
   d69ec:	2000      	movs	r0, #0
   d69ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d69f2:	4639      	mov	r1, r7
   d69f4:	4630      	mov	r0, r6
   d69f6:	f000 f8ab 	bl	d6b50 <_ZNKSt9type_infoeqERKS_>
   d69fa:	2800      	cmp	r0, #0
   d69fc:	d0f6      	beq.n	d69ec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d69fe:	2301      	movs	r3, #1
   d6a00:	f8c4 8000 	str.w	r8, [r4]
   d6a04:	7125      	strb	r5, [r4, #4]
   d6a06:	71a3      	strb	r3, [r4, #6]
   d6a08:	e7f0      	b.n	d69ec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d6a0a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d6a0a:	b538      	push	{r3, r4, r5, lr}
   d6a0c:	4615      	mov	r5, r2
   d6a0e:	461c      	mov	r4, r3
   d6a10:	f000 f89e 	bl	d6b50 <_ZNKSt9type_infoeqERKS_>
   d6a14:	b120      	cbz	r0, d6a20 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d6a16:	2308      	movs	r3, #8
   d6a18:	60e3      	str	r3, [r4, #12]
   d6a1a:	2306      	movs	r3, #6
   d6a1c:	6025      	str	r5, [r4, #0]
   d6a1e:	7123      	strb	r3, [r4, #4]
   d6a20:	bd38      	pop	{r3, r4, r5, pc}

000d6a22 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d6a22:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6a24:	4605      	mov	r5, r0
   d6a26:	460c      	mov	r4, r1
   d6a28:	9201      	str	r2, [sp, #4]
   d6a2a:	461e      	mov	r6, r3
   d6a2c:	f000 f890 	bl	d6b50 <_ZNKSt9type_infoeqERKS_>
   d6a30:	b950      	cbnz	r0, d6a48 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6a32:	2e03      	cmp	r6, #3
   d6a34:	d808      	bhi.n	d6a48 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6a36:	6823      	ldr	r3, [r4, #0]
   d6a38:	9a01      	ldr	r2, [sp, #4]
   d6a3a:	695b      	ldr	r3, [r3, #20]
   d6a3c:	4629      	mov	r1, r5
   d6a3e:	4620      	mov	r0, r4
   d6a40:	b002      	add	sp, #8
   d6a42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6a46:	4718      	bx	r3
   d6a48:	b002      	add	sp, #8
   d6a4a:	bd70      	pop	{r4, r5, r6, pc}

000d6a4c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d6a4c:	b510      	push	{r4, lr}
   d6a4e:	4b03      	ldr	r3, [pc, #12]	; (d6a5c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d6a50:	6003      	str	r3, [r0, #0]
   d6a52:	4604      	mov	r4, r0
   d6a54:	f7ff ffa6 	bl	d69a4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6a58:	4620      	mov	r0, r4
   d6a5a:	bd10      	pop	{r4, pc}
   d6a5c:	000d7310 	.word	0x000d7310

000d6a60 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d6a60:	b510      	push	{r4, lr}
   d6a62:	4604      	mov	r4, r0
   d6a64:	f7ff fff2 	bl	d6a4c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d6a68:	4620      	mov	r0, r4
   d6a6a:	210c      	movs	r1, #12
   d6a6c:	f7ff ff6d 	bl	d694a <_ZdlPvj>
   d6a70:	4620      	mov	r0, r4
   d6a72:	bd10      	pop	{r4, pc}

000d6a74 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d6a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6a76:	9f08      	ldr	r7, [sp, #32]
   d6a78:	4297      	cmp	r7, r2
   d6a7a:	4605      	mov	r5, r0
   d6a7c:	460e      	mov	r6, r1
   d6a7e:	4614      	mov	r4, r2
   d6a80:	d00a      	beq.n	d6a98 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d6a82:	68a8      	ldr	r0, [r5, #8]
   d6a84:	6802      	ldr	r2, [r0, #0]
   d6a86:	9708      	str	r7, [sp, #32]
   d6a88:	6a15      	ldr	r5, [r2, #32]
   d6a8a:	4631      	mov	r1, r6
   d6a8c:	4622      	mov	r2, r4
   d6a8e:	46ac      	mov	ip, r5
   d6a90:	b003      	add	sp, #12
   d6a92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6a96:	4760      	bx	ip
   d6a98:	4619      	mov	r1, r3
   d6a9a:	9301      	str	r3, [sp, #4]
   d6a9c:	f000 f858 	bl	d6b50 <_ZNKSt9type_infoeqERKS_>
   d6aa0:	9b01      	ldr	r3, [sp, #4]
   d6aa2:	2800      	cmp	r0, #0
   d6aa4:	d0ed      	beq.n	d6a82 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d6aa6:	2006      	movs	r0, #6
   d6aa8:	b003      	add	sp, #12
   d6aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6aac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d6aac:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6ab0:	460d      	mov	r5, r1
   d6ab2:	4619      	mov	r1, r3
   d6ab4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d6ab8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d6abc:	4681      	mov	r9, r0
   d6abe:	4617      	mov	r7, r2
   d6ac0:	4698      	mov	r8, r3
   d6ac2:	f000 f845 	bl	d6b50 <_ZNKSt9type_infoeqERKS_>
   d6ac6:	b190      	cbz	r0, d6aee <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d6ac8:	2d00      	cmp	r5, #0
   d6aca:	6034      	str	r4, [r6, #0]
   d6acc:	7137      	strb	r7, [r6, #4]
   d6ace:	db09      	blt.n	d6ae4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d6ad0:	1961      	adds	r1, r4, r5
   d6ad2:	458a      	cmp	sl, r1
   d6ad4:	bf0c      	ite	eq
   d6ad6:	2106      	moveq	r1, #6
   d6ad8:	2101      	movne	r1, #1
   d6ada:	71b1      	strb	r1, [r6, #6]
   d6adc:	2000      	movs	r0, #0
   d6ade:	b001      	add	sp, #4
   d6ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6ae4:	3502      	adds	r5, #2
   d6ae6:	d1f9      	bne.n	d6adc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6ae8:	2301      	movs	r3, #1
   d6aea:	71b3      	strb	r3, [r6, #6]
   d6aec:	e7f6      	b.n	d6adc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6aee:	4554      	cmp	r4, sl
   d6af0:	d106      	bne.n	d6b00 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d6af2:	4659      	mov	r1, fp
   d6af4:	4648      	mov	r0, r9
   d6af6:	f000 f82b 	bl	d6b50 <_ZNKSt9type_infoeqERKS_>
   d6afa:	b108      	cbz	r0, d6b00 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d6afc:	7177      	strb	r7, [r6, #5]
   d6afe:	e7ed      	b.n	d6adc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6b00:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d6b04:	6803      	ldr	r3, [r0, #0]
   d6b06:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d6b0a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d6b0e:	69dc      	ldr	r4, [r3, #28]
   d6b10:	463a      	mov	r2, r7
   d6b12:	4643      	mov	r3, r8
   d6b14:	4629      	mov	r1, r5
   d6b16:	46a4      	mov	ip, r4
   d6b18:	b001      	add	sp, #4
   d6b1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6b1e:	4760      	bx	ip

000d6b20 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d6b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6b24:	4607      	mov	r7, r0
   d6b26:	460c      	mov	r4, r1
   d6b28:	4615      	mov	r5, r2
   d6b2a:	461e      	mov	r6, r3
   d6b2c:	f7ff ff6d 	bl	d6a0a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d6b30:	b948      	cbnz	r0, d6b46 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d6b32:	68b8      	ldr	r0, [r7, #8]
   d6b34:	6803      	ldr	r3, [r0, #0]
   d6b36:	699f      	ldr	r7, [r3, #24]
   d6b38:	462a      	mov	r2, r5
   d6b3a:	4633      	mov	r3, r6
   d6b3c:	4621      	mov	r1, r4
   d6b3e:	46bc      	mov	ip, r7
   d6b40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d6b44:	4760      	bx	ip
   d6b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6b4a <_ZNSt9type_infoD1Ev>:
   d6b4a:	4770      	bx	lr

000d6b4c <_ZNKSt9type_info14__is_pointer_pEv>:
   d6b4c:	2000      	movs	r0, #0
   d6b4e:	4770      	bx	lr

000d6b50 <_ZNKSt9type_infoeqERKS_>:
   d6b50:	4281      	cmp	r1, r0
   d6b52:	b508      	push	{r3, lr}
   d6b54:	d00e      	beq.n	d6b74 <_ZNKSt9type_infoeqERKS_+0x24>
   d6b56:	6840      	ldr	r0, [r0, #4]
   d6b58:	7803      	ldrb	r3, [r0, #0]
   d6b5a:	2b2a      	cmp	r3, #42	; 0x2a
   d6b5c:	d00c      	beq.n	d6b78 <_ZNKSt9type_infoeqERKS_+0x28>
   d6b5e:	6849      	ldr	r1, [r1, #4]
   d6b60:	780b      	ldrb	r3, [r1, #0]
   d6b62:	2b2a      	cmp	r3, #42	; 0x2a
   d6b64:	bf08      	it	eq
   d6b66:	3101      	addeq	r1, #1
   d6b68:	f000 f87c 	bl	d6c64 <strcmp>
   d6b6c:	fab0 f080 	clz	r0, r0
   d6b70:	0940      	lsrs	r0, r0, #5
   d6b72:	bd08      	pop	{r3, pc}
   d6b74:	2001      	movs	r0, #1
   d6b76:	e7fc      	b.n	d6b72 <_ZNKSt9type_infoeqERKS_+0x22>
   d6b78:	2000      	movs	r0, #0
   d6b7a:	e7fa      	b.n	d6b72 <_ZNKSt9type_infoeqERKS_+0x22>

000d6b7c <atoi>:
   d6b7c:	220a      	movs	r2, #10
   d6b7e:	2100      	movs	r1, #0
   d6b80:	f000 b912 	b.w	d6da8 <strtol>

000d6b84 <__cxa_atexit>:
   d6b84:	b510      	push	{r4, lr}
   d6b86:	4c05      	ldr	r4, [pc, #20]	; (d6b9c <__cxa_atexit+0x18>)
   d6b88:	4613      	mov	r3, r2
   d6b8a:	b12c      	cbz	r4, d6b98 <__cxa_atexit+0x14>
   d6b8c:	460a      	mov	r2, r1
   d6b8e:	4601      	mov	r1, r0
   d6b90:	2002      	movs	r0, #2
   d6b92:	f3af 8000 	nop.w
   d6b96:	bd10      	pop	{r4, pc}
   d6b98:	4620      	mov	r0, r4
   d6b9a:	e7fc      	b.n	d6b96 <__cxa_atexit+0x12>
   d6b9c:	00000000 	.word	0x00000000

000d6ba0 <memcmp>:
   d6ba0:	b530      	push	{r4, r5, lr}
   d6ba2:	3901      	subs	r1, #1
   d6ba4:	2400      	movs	r4, #0
   d6ba6:	42a2      	cmp	r2, r4
   d6ba8:	d101      	bne.n	d6bae <memcmp+0xe>
   d6baa:	2000      	movs	r0, #0
   d6bac:	e005      	b.n	d6bba <memcmp+0x1a>
   d6bae:	5d03      	ldrb	r3, [r0, r4]
   d6bb0:	3401      	adds	r4, #1
   d6bb2:	5d0d      	ldrb	r5, [r1, r4]
   d6bb4:	42ab      	cmp	r3, r5
   d6bb6:	d0f6      	beq.n	d6ba6 <memcmp+0x6>
   d6bb8:	1b58      	subs	r0, r3, r5
   d6bba:	bd30      	pop	{r4, r5, pc}

000d6bbc <memcpy>:
   d6bbc:	440a      	add	r2, r1
   d6bbe:	4291      	cmp	r1, r2
   d6bc0:	f100 33ff 	add.w	r3, r0, #4294967295
   d6bc4:	d100      	bne.n	d6bc8 <memcpy+0xc>
   d6bc6:	4770      	bx	lr
   d6bc8:	b510      	push	{r4, lr}
   d6bca:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6bce:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6bd2:	4291      	cmp	r1, r2
   d6bd4:	d1f9      	bne.n	d6bca <memcpy+0xe>
   d6bd6:	bd10      	pop	{r4, pc}

000d6bd8 <memmove>:
   d6bd8:	4288      	cmp	r0, r1
   d6bda:	b510      	push	{r4, lr}
   d6bdc:	eb01 0402 	add.w	r4, r1, r2
   d6be0:	d902      	bls.n	d6be8 <memmove+0x10>
   d6be2:	4284      	cmp	r4, r0
   d6be4:	4623      	mov	r3, r4
   d6be6:	d807      	bhi.n	d6bf8 <memmove+0x20>
   d6be8:	1e43      	subs	r3, r0, #1
   d6bea:	42a1      	cmp	r1, r4
   d6bec:	d008      	beq.n	d6c00 <memmove+0x28>
   d6bee:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6bf2:	f803 2f01 	strb.w	r2, [r3, #1]!
   d6bf6:	e7f8      	b.n	d6bea <memmove+0x12>
   d6bf8:	4402      	add	r2, r0
   d6bfa:	4601      	mov	r1, r0
   d6bfc:	428a      	cmp	r2, r1
   d6bfe:	d100      	bne.n	d6c02 <memmove+0x2a>
   d6c00:	bd10      	pop	{r4, pc}
   d6c02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6c06:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d6c0a:	e7f7      	b.n	d6bfc <memmove+0x24>

000d6c0c <memset>:
   d6c0c:	4402      	add	r2, r0
   d6c0e:	4603      	mov	r3, r0
   d6c10:	4293      	cmp	r3, r2
   d6c12:	d100      	bne.n	d6c16 <memset+0xa>
   d6c14:	4770      	bx	lr
   d6c16:	f803 1b01 	strb.w	r1, [r3], #1
   d6c1a:	e7f9      	b.n	d6c10 <memset+0x4>

000d6c1c <srand>:
   d6c1c:	b538      	push	{r3, r4, r5, lr}
   d6c1e:	4b0d      	ldr	r3, [pc, #52]	; (d6c54 <srand+0x38>)
   d6c20:	681d      	ldr	r5, [r3, #0]
   d6c22:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6c24:	4604      	mov	r4, r0
   d6c26:	b97b      	cbnz	r3, d6c48 <srand+0x2c>
   d6c28:	2018      	movs	r0, #24
   d6c2a:	f7fd ff69 	bl	d4b00 <malloc>
   d6c2e:	4a0a      	ldr	r2, [pc, #40]	; (d6c58 <srand+0x3c>)
   d6c30:	4b0a      	ldr	r3, [pc, #40]	; (d6c5c <srand+0x40>)
   d6c32:	63a8      	str	r0, [r5, #56]	; 0x38
   d6c34:	e9c0 2300 	strd	r2, r3, [r0]
   d6c38:	4b09      	ldr	r3, [pc, #36]	; (d6c60 <srand+0x44>)
   d6c3a:	6083      	str	r3, [r0, #8]
   d6c3c:	230b      	movs	r3, #11
   d6c3e:	8183      	strh	r3, [r0, #12]
   d6c40:	2201      	movs	r2, #1
   d6c42:	2300      	movs	r3, #0
   d6c44:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6c48:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6c4a:	2200      	movs	r2, #0
   d6c4c:	611c      	str	r4, [r3, #16]
   d6c4e:	615a      	str	r2, [r3, #20]
   d6c50:	bd38      	pop	{r3, r4, r5, pc}
   d6c52:	bf00      	nop
   d6c54:	2003e564 	.word	0x2003e564
   d6c58:	abcd330e 	.word	0xabcd330e
   d6c5c:	e66d1234 	.word	0xe66d1234
   d6c60:	0005deec 	.word	0x0005deec

000d6c64 <strcmp>:
   d6c64:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6c68:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6c6c:	2a01      	cmp	r2, #1
   d6c6e:	bf28      	it	cs
   d6c70:	429a      	cmpcs	r2, r3
   d6c72:	d0f7      	beq.n	d6c64 <strcmp>
   d6c74:	1ad0      	subs	r0, r2, r3
   d6c76:	4770      	bx	lr

000d6c78 <strcpy>:
   d6c78:	4603      	mov	r3, r0
   d6c7a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6c7e:	f803 2b01 	strb.w	r2, [r3], #1
   d6c82:	2a00      	cmp	r2, #0
   d6c84:	d1f9      	bne.n	d6c7a <strcpy+0x2>
   d6c86:	4770      	bx	lr

000d6c88 <strlen>:
   d6c88:	4603      	mov	r3, r0
   d6c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6c8e:	2a00      	cmp	r2, #0
   d6c90:	d1fb      	bne.n	d6c8a <strlen+0x2>
   d6c92:	1a18      	subs	r0, r3, r0
   d6c94:	3801      	subs	r0, #1
   d6c96:	4770      	bx	lr

000d6c98 <strnlen>:
   d6c98:	b510      	push	{r4, lr}
   d6c9a:	4602      	mov	r2, r0
   d6c9c:	4401      	add	r1, r0
   d6c9e:	428a      	cmp	r2, r1
   d6ca0:	4613      	mov	r3, r2
   d6ca2:	d101      	bne.n	d6ca8 <strnlen+0x10>
   d6ca4:	1a18      	subs	r0, r3, r0
   d6ca6:	bd10      	pop	{r4, pc}
   d6ca8:	781c      	ldrb	r4, [r3, #0]
   d6caa:	3201      	adds	r2, #1
   d6cac:	2c00      	cmp	r4, #0
   d6cae:	d1f6      	bne.n	d6c9e <strnlen+0x6>
   d6cb0:	e7f8      	b.n	d6ca4 <strnlen+0xc>
	...

000d6cb4 <_strtol_l.isra.0>:
   d6cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6cb8:	4e3a      	ldr	r6, [pc, #232]	; (d6da4 <_strtol_l.isra.0+0xf0>)
   d6cba:	4686      	mov	lr, r0
   d6cbc:	468c      	mov	ip, r1
   d6cbe:	4660      	mov	r0, ip
   d6cc0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d6cc4:	5da5      	ldrb	r5, [r4, r6]
   d6cc6:	f015 0508 	ands.w	r5, r5, #8
   d6cca:	d1f8      	bne.n	d6cbe <_strtol_l.isra.0+0xa>
   d6ccc:	2c2d      	cmp	r4, #45	; 0x2d
   d6cce:	d133      	bne.n	d6d38 <_strtol_l.isra.0+0x84>
   d6cd0:	f89c 4000 	ldrb.w	r4, [ip]
   d6cd4:	f04f 0801 	mov.w	r8, #1
   d6cd8:	f100 0c02 	add.w	ip, r0, #2
   d6cdc:	2b00      	cmp	r3, #0
   d6cde:	d05c      	beq.n	d6d9a <_strtol_l.isra.0+0xe6>
   d6ce0:	2b10      	cmp	r3, #16
   d6ce2:	d10c      	bne.n	d6cfe <_strtol_l.isra.0+0x4a>
   d6ce4:	2c30      	cmp	r4, #48	; 0x30
   d6ce6:	d10a      	bne.n	d6cfe <_strtol_l.isra.0+0x4a>
   d6ce8:	f89c 0000 	ldrb.w	r0, [ip]
   d6cec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6cf0:	2858      	cmp	r0, #88	; 0x58
   d6cf2:	d14d      	bne.n	d6d90 <_strtol_l.isra.0+0xdc>
   d6cf4:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d6cf8:	2310      	movs	r3, #16
   d6cfa:	f10c 0c02 	add.w	ip, ip, #2
   d6cfe:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d6d02:	3f01      	subs	r7, #1
   d6d04:	2600      	movs	r6, #0
   d6d06:	fbb7 f9f3 	udiv	r9, r7, r3
   d6d0a:	4630      	mov	r0, r6
   d6d0c:	fb03 7a19 	mls	sl, r3, r9, r7
   d6d10:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d6d14:	2d09      	cmp	r5, #9
   d6d16:	d818      	bhi.n	d6d4a <_strtol_l.isra.0+0x96>
   d6d18:	462c      	mov	r4, r5
   d6d1a:	42a3      	cmp	r3, r4
   d6d1c:	dd24      	ble.n	d6d68 <_strtol_l.isra.0+0xb4>
   d6d1e:	1c75      	adds	r5, r6, #1
   d6d20:	d007      	beq.n	d6d32 <_strtol_l.isra.0+0x7e>
   d6d22:	4581      	cmp	r9, r0
   d6d24:	d31d      	bcc.n	d6d62 <_strtol_l.isra.0+0xae>
   d6d26:	d101      	bne.n	d6d2c <_strtol_l.isra.0+0x78>
   d6d28:	45a2      	cmp	sl, r4
   d6d2a:	db1a      	blt.n	d6d62 <_strtol_l.isra.0+0xae>
   d6d2c:	fb00 4003 	mla	r0, r0, r3, r4
   d6d30:	2601      	movs	r6, #1
   d6d32:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d6d36:	e7eb      	b.n	d6d10 <_strtol_l.isra.0+0x5c>
   d6d38:	2c2b      	cmp	r4, #43	; 0x2b
   d6d3a:	bf08      	it	eq
   d6d3c:	f89c 4000 	ldrbeq.w	r4, [ip]
   d6d40:	46a8      	mov	r8, r5
   d6d42:	bf08      	it	eq
   d6d44:	f100 0c02 	addeq.w	ip, r0, #2
   d6d48:	e7c8      	b.n	d6cdc <_strtol_l.isra.0+0x28>
   d6d4a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d6d4e:	2d19      	cmp	r5, #25
   d6d50:	d801      	bhi.n	d6d56 <_strtol_l.isra.0+0xa2>
   d6d52:	3c37      	subs	r4, #55	; 0x37
   d6d54:	e7e1      	b.n	d6d1a <_strtol_l.isra.0+0x66>
   d6d56:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d6d5a:	2d19      	cmp	r5, #25
   d6d5c:	d804      	bhi.n	d6d68 <_strtol_l.isra.0+0xb4>
   d6d5e:	3c57      	subs	r4, #87	; 0x57
   d6d60:	e7db      	b.n	d6d1a <_strtol_l.isra.0+0x66>
   d6d62:	f04f 36ff 	mov.w	r6, #4294967295
   d6d66:	e7e4      	b.n	d6d32 <_strtol_l.isra.0+0x7e>
   d6d68:	1c73      	adds	r3, r6, #1
   d6d6a:	d106      	bne.n	d6d7a <_strtol_l.isra.0+0xc6>
   d6d6c:	2322      	movs	r3, #34	; 0x22
   d6d6e:	f8ce 3000 	str.w	r3, [lr]
   d6d72:	4638      	mov	r0, r7
   d6d74:	b942      	cbnz	r2, d6d88 <_strtol_l.isra.0+0xd4>
   d6d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6d7a:	f1b8 0f00 	cmp.w	r8, #0
   d6d7e:	d000      	beq.n	d6d82 <_strtol_l.isra.0+0xce>
   d6d80:	4240      	negs	r0, r0
   d6d82:	2a00      	cmp	r2, #0
   d6d84:	d0f7      	beq.n	d6d76 <_strtol_l.isra.0+0xc2>
   d6d86:	b10e      	cbz	r6, d6d8c <_strtol_l.isra.0+0xd8>
   d6d88:	f10c 31ff 	add.w	r1, ip, #4294967295
   d6d8c:	6011      	str	r1, [r2, #0]
   d6d8e:	e7f2      	b.n	d6d76 <_strtol_l.isra.0+0xc2>
   d6d90:	2430      	movs	r4, #48	; 0x30
   d6d92:	2b00      	cmp	r3, #0
   d6d94:	d1b3      	bne.n	d6cfe <_strtol_l.isra.0+0x4a>
   d6d96:	2308      	movs	r3, #8
   d6d98:	e7b1      	b.n	d6cfe <_strtol_l.isra.0+0x4a>
   d6d9a:	2c30      	cmp	r4, #48	; 0x30
   d6d9c:	d0a4      	beq.n	d6ce8 <_strtol_l.isra.0+0x34>
   d6d9e:	230a      	movs	r3, #10
   d6da0:	e7ad      	b.n	d6cfe <_strtol_l.isra.0+0x4a>
   d6da2:	bf00      	nop
   d6da4:	000d734a 	.word	0x000d734a

000d6da8 <strtol>:
   d6da8:	4613      	mov	r3, r2
   d6daa:	460a      	mov	r2, r1
   d6dac:	4601      	mov	r1, r0
   d6dae:	4802      	ldr	r0, [pc, #8]	; (d6db8 <strtol+0x10>)
   d6db0:	6800      	ldr	r0, [r0, #0]
   d6db2:	f7ff bf7f 	b.w	d6cb4 <_strtol_l.isra.0>
   d6db6:	bf00      	nop
   d6db8:	2003e564 	.word	0x2003e564

000d6dbc <dynalib_user>:
   d6dbc:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d6dcc:	00000000 746e450a 74207265 70206568     .....Enter the p
   d6ddc:	7469736f 206e6f69 7420666f 64206568     osition of the d
   d6dec:	63697665 69772065 74206874 62206568     evice with the b
   d6dfc:	2065756c 2044454c 61207361 6e69206e     lue LED as an in
   d6e0c:	65676574 66282072 74737269 76656420     teger (first dev
   d6e1c:	20656369 61207369 2c312074 63657320     ice is at 1, sec
   d6e2c:	20646e6f 61207369 2c322074 63746520     ond is at 2, etc
   d6e3c:	00203a29 7165530a 636e6575 00203a65     ): ..Sequence: .
   d6e4c:	0a00202c 75716572 20747365 65646f63     , ..request code
   d6e5c:	202c3120 72646461 3a737365 72740020      1, address: .tr
   d6e6c:	6d736e61 69737369 72206e6f 65696365     ansmission recie
   d6e7c:	20646576 6d6f7266 6400203a 63697665     ved from: .devic
   d6e8c:	64692065 7400203a 736e6172 7373696d     e id: .transmiss
   d6e9c:	206e6f69 746e6573 3a6f7420 65720020     ion sent to: .re
   d6eac:	73657571 6f632074 32206564 6461202c     quest code 2, ad
   d6ebc:	73657264 00203a73 666e6f63 7463696c     dress: .conflict
   d6ecc:	72657620 63696669 6f697461 00203a6e      verification: .
   d6edc:	6e6f430a 7463656e 74206465 00203a6f     .Connected to: .
   d6eec:	30344536 31303030 4135422d 33462d33     6E400001-B5A3-F3
   d6efc:	452d3339 2d394130 45303545 43443432     93-E0A9-E50E24DC
   d6f0c:	45394143 34453600 30303030 35422d32     CA9E.6E400002-B5
   d6f1c:	462d3341 2d333933 39413045 3035452d     A3-F393-E0A9-E50
   d6f2c:	44343245 39414343 45360045 30303034     E24DCCA9E.6E4000
   d6f3c:	422d3330 2d334135 33393346 4130452d     03-B5A3-F393-E0A
   d6f4c:	35452d39 34324530 41434344 74004539     9-E50E24DCCA9E.t
   d6f5c:	78720078 00000000                       x.rx....

000d6f64 <_ZTVN5spark13EthernetClassE>:
	...
   d6f6c:	000d4baf 000d4ba5 000d4b9b 000d4b91     .K...K...K...K..
   d6f7c:	000d4b85 000d4b79 000d6795 000d679d     .K..yK...g...g..
   d6f8c:	000d4b6d 000d4b65 000d4b5b 000d4b51     mK..eK..[K..QK..
   d6f9c:	000d67cd 69726977 622e676e 5300656c     .g..wiring.ble.S
   d6fac:	74726174 73696420 65766f63 676e6972     tart discovering
   d6fbc:	72657320 65636976 50002e73 20726565      services..Peer 
   d6fcc:	69766564 69206563 696d2073 6e697373     device is missin
   d6fdc:	46002167 656c6961 6f742064 70706120     g!.Failed to app
   d6fec:	20646e65 72656570 6e654320 6c617274     end peer Central
   d6ffc:	76656420 2e656369 6e6f4300 7463656e      device..Connect
   d700c:	62206465 65432079 6172746e 6564206c     ed by Central de
   d701c:	65636976 6944002e 6e6f6373 7463656e     vice..Disconnect
   d702c:	62206465 65722079 65746f6d 76656420     ed by remote dev
   d703c:	2e656369 70754400 6163696c 20646574     ice..Duplicated 
   d704c:	72616863 65746361 74736972 63206369     characteristic c
   d705c:	6f6e6e61 65622074 64646120 002e6465     annot be added..
   d706c:	6c696146 74206465 7061206f 646e6570     Failed to append
   d707c:	636f6c20 63206c61 61726168 72657463      local character
   d708c:	69747369 00002e63                       istic...

000d7094 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d709c:	000d4e1b 000d4e7d 000d5045 000d4ea7     .N..}N..EP...N..
   d70ac:	000d4e1d                                .N..

000d70b0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d70b8:	000d4e17 000d4e8b 000d4e19 000d4eab     .N...N...N...N..
   d70c8:	000d4e3d                                =N..

000d70cc <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d70d4:	000d4e15 000d4e99 000d5811 000d4eaf     .N...N...X...N..
   d70e4:	000d4e5d                                ]N..

000d70e8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d70f0:	5f9b34fb 80000080 00001000 00000000     .4._............

000d7100 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d7100:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000d7110 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d7110:	5f9b34fb 80000080 00001000 00000000     .4._............
   d7120:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   d7130:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000d7140 <_ZTV9IPAddress>:
	...
   d7148:	000d6301 000d62f1 000d62f3              .c...b...b..

000d7154 <_ZTV9USBSerial>:
	...
   d715c:	000d63e1 000d6449 000d641f 000d60a5     .c..Id...d...`..
   d716c:	000d6411 000d63e3 000d63f3 000d6443     .d...c...c..Cd..
   d717c:	000d6403 000d63dd                       .d...c..

000d7184 <_ZTV11USARTSerial>:
	...
   d718c:	000d64ed 000d6559 000d6531 000d60a5     .d..Ye..1e...`..
   d719c:	000d6501 000d651d 000d650f 000d652b     .e...e...e..+e..
   d71ac:	000d64ef 000d64f3                       .d...d..

000d71b4 <_ZTV7TwoWire>:
	...
   d71bc:	000d65e9 000d6633 000d660b 000d65eb     .e..3f...f...e..
   d71cc:	000d6613 000d661b 000d6623 000d662b     .f...f..#f..+f..

000d71dc <_ZTVN5spark9WiFiClassE>:
	...
   d71e4:	000d6737 000d672d 000d6723 000d66e5     7g..-g..#g...f..
   d71f4:	000d616b 000d6717 000d6795 000d679d     ka...g...g...g..
   d7204:	000d670b 000d6703 000d66f9 000d66ef     .g...g...f...f..
   d7214:	000d67cd                                .g..

000d7218 <_ZTVN5spark12NetworkClassE>:
	...
   d7220:	000d6755 000d675f 000d6769 000d6773     Ug.._g..ig..sg..
   d7230:	000d677d 000d6789 000d6795 000d679d     }g...g...g...g..
   d7240:	000d67a5 000d67b1 000d67b9 000d67c3     .g...g...g...g..
   d7250:	000d67cd                                .g..

000d7254 <_ZSt7nothrow>:
	...

000d7255 <_ZTSSt19_Sp_make_shared_tag>:
   d7255:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d7265:	5f646572 00676174                        red_tag....

000d7270 <_ZTISt19_Sp_make_shared_tag>:
   d7270:	000d72b0 000d7255                       .r..Ur..

000d7278 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d7278:	000d7310 000d7284 000d7334              .s...r..4s..

000d7284 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d7284:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d7294:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d72a4:	00000045                                E...

000d72a8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d72a8:	00000000 000d7278 000d69a5 000d69b9     ....xr...i...i..
   d72b8:	000d6b4d 000d6b4d 000d6a23 000d6965     Mk..Mk..#j..ei..
   d72c8:	000d6a0b 000d69cd 000d6999              .j...i...i..

000d72d4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d72d4:	000d7310 000d72e0 000d7278              .s...r..xr..

000d72e0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d72e0:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d72f0:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d7300:	456f666e 00000000                       nfoE....

000d7308 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d7308:	00000000 000d72d4 000d6a4d 000d6a61     .....r..Mj..aj..
   d7318:	000d6b4d 000d6b4d 000d6a23 000d6965     Mk..Mk..#j..ei..
   d7328:	000d6b21 000d6aad 000d6a75              !k...j..uj..

000d7334 <_ZTISt9type_info>:
   d7334:	000d72b0 000d733c                       .r..<s..

000d733c <_ZTSSt9type_info>:
   d733c:	74397453 5f657079 6f666e69               St9type_info.

000d7349 <_ctype_>:
   d7349:	20202000 20202020 28282020 20282828     .         ((((( 
   d7359:	20202020 20202020 20202020 20202020                     
   d7369:	10108820 10101010 10101010 10101010      ...............
   d7379:	04040410 04040404 10040404 10101010     ................
   d7389:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d7399:	01010101 01010101 01010101 10101010     ................
   d73a9:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d73b9:	02020202 02020202 02020202 10101010     ................
   d73c9:	00000020 00000000 00000000 00000000      ...............
	...

000d744a <link_const_variable_data_end>:
	...

000d744c <link_constructors_location>:
   d744c:	000d45b5 	.word	0x000d45b5
   d7450:	000d4bb9 	.word	0x000d4bb9
   d7454:	000d4bcd 	.word	0x000d4bcd
   d7458:	000d607d 	.word	0x000d607d
   d745c:	000d6179 	.word	0x000d6179
   d7460:	000d6189 	.word	0x000d6189
   d7464:	000d61b1 	.word	0x000d61b1
   d7468:	000d6741 	.word	0x000d6741
   d746c:	000d68ad 	.word	0x000d68ad
