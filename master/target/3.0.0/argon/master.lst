
c:/Users/Arjun/Documents/GitHub/loop_tracks/master/target/3.0.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007990  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000db9b0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001e8  200353e4  000db9b4  000153e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00009224  200355cc  200355cc  000255cc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000dbb9c  000dbb9c  0001bb9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dbbc4  000dbbc4  0001bbc4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001ba90c  00000000  00000000  0001bbc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001a2a3  00000000  00000000  001d64d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003c261  00000000  00000000  001f0777  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000034b0  00000000  00000000  0022c9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000a510  00000000  00000000  0022fe88  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003bbab  00000000  00000000  0023a398  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00045b37  00000000  00000000  00275f43  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00129f0a  00000000  00000000  002bba7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00009c58  00000000  00000000  003e5984  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f84d 	bl	d90d0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f86f 	bl	d9120 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	200353e4 	.word	0x200353e4
   d404c:	000db9b4 	.word	0x000db9b4
   d4050:	200355cc 	.word	0x200355cc
   d4054:	200355cc 	.word	0x200355cc
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 fb5f 	bl	d7724 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000db97c 	.word	0x000db97c
   d4080:	000db9a4 	.word	0x000db9a4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 ba92 	b.w	d45ac <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fc41 	bl	d4910 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 bb09 	b.w	d76a8 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 bec7 	b.w	d5e28 <malloc>

000d409a <_Znaj>:
   d409a:	f001 bec5 	b.w	d5e28 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 becb 	b.w	d5e38 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <__tcf_0>:
};

http_request_t request;
http_response_t response;

String redLineStations[] = {"North/Clybourn", "Clark/Divison", "Chicago", "Grand", "Lake", "Monroe", "Jackson", "Harrison", 
   d40b4:	b538      	push	{r3, r4, r5, lr}
   d40b6:	4d04      	ldr	r5, [pc, #16]	; (d40c8 <__tcf_0+0x14>)
   d40b8:	2409      	movs	r4, #9
   d40ba:	eb05 1004 	add.w	r0, r5, r4, lsl #4
   d40be:	f001 ffde 	bl	d607e <_ZN6StringD1Ev>
   d40c2:	3c01      	subs	r4, #1
   d40c4:	d2f9      	bcs.n	d40ba <__tcf_0+0x6>
   d40c6:	bd38      	pop	{r3, r4, r5, pc}
   d40c8:	2003e50c 	.word	0x2003e50c

000d40cc <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   d40cc:	b510      	push	{r4, lr}
   d40ce:	4604      	mov	r4, r0
   d40d0:	3004      	adds	r0, #4
   d40d2:	f001 ffd4 	bl	d607e <_ZN6StringD1Ev>
   d40d6:	4620      	mov	r0, r4
   d40d8:	bd10      	pop	{r4, pc}

000d40da <_ZN14http_request_tD1Ev>:
} http_request_t;
   d40da:	b510      	push	{r4, lr}
   d40dc:	4604      	mov	r4, r0
   d40de:	303c      	adds	r0, #60	; 0x3c
   d40e0:	f001 ffcd 	bl	d607e <_ZN6StringD1Ev>
   d40e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d40e8:	f001 ffc9 	bl	d607e <_ZN6StringD1Ev>
   d40ec:	4620      	mov	r0, r4
   d40ee:	f001 ffc6 	bl	d607e <_ZN6StringD1Ev>
   d40f2:	4620      	mov	r0, r4
   d40f4:	bd10      	pop	{r4, pc}
	...

000d40f8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   d40f8:	b510      	push	{r4, lr}
   d40fa:	4b03      	ldr	r3, [pc, #12]	; (d4108 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   d40fc:	6003      	str	r3, [r0, #0]
   d40fe:	4604      	mov	r4, r0
   d4100:	f000 ff98 	bl	d5034 <_ZN10JsonParserD1Ev>
   d4104:	4620      	mov	r0, r4
   d4106:	bd10      	pop	{r4, pc}
   d4108:	000db21c 	.word	0x000db21c

000d410c <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   d410c:	b510      	push	{r4, lr}
   d410e:	4604      	mov	r4, r0
   d4110:	f7ff fff2 	bl	d40f8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   d4114:	4620      	mov	r0, r4
   d4116:	f246 51bc 	movw	r1, #26044	; 0x65bc
   d411a:	f004 f990 	bl	d843e <_ZdlPvj>
   d411e:	4620      	mov	r0, r4
   d4120:	bd10      	pop	{r4, pc}
	...

000d4124 <_ZN10HttpClientD1Ev>:

class HttpClient {
   d4124:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4126:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4128:	4b0a      	ldr	r3, [pc, #40]	; (d4154 <_ZN10HttpClientD1Ev+0x30>)
   d412a:	6003      	str	r3, [r0, #0]
   d412c:	4605      	mov	r5, r0
   d412e:	b17c      	cbz	r4, d4150 <_ZN10HttpClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4130:	6863      	ldr	r3, [r4, #4]
   d4132:	3b01      	subs	r3, #1
   d4134:	6063      	str	r3, [r4, #4]
   d4136:	b95b      	cbnz	r3, d4150 <_ZN10HttpClientD1Ev+0x2c>
          _M_dispose();
   d4138:	6823      	ldr	r3, [r4, #0]
   d413a:	4620      	mov	r0, r4
   d413c:	689b      	ldr	r3, [r3, #8]
   d413e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4140:	68a3      	ldr	r3, [r4, #8]
   d4142:	3b01      	subs	r3, #1
   d4144:	60a3      	str	r3, [r4, #8]
   d4146:	b91b      	cbnz	r3, d4150 <_ZN10HttpClientD1Ev+0x2c>
            _M_destroy();
   d4148:	6823      	ldr	r3, [r4, #0]
   d414a:	4620      	mov	r0, r4
   d414c:	68db      	ldr	r3, [r3, #12]
   d414e:	4798      	blx	r3
   d4150:	4628      	mov	r0, r5
   d4152:	bd38      	pop	{r3, r4, r5, pc}
   d4154:	000db554 	.word	0x000db554

000d4158 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4158:	6803      	ldr	r3, [r0, #0]
   d415a:	b2c9      	uxtb	r1, r1
   d415c:	689b      	ldr	r3, [r3, #8]
   d415e:	4718      	bx	r3

000d4160 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
      count++;
    }
  }
}

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4160:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  String inputBuffer = "";

  if(bleCount <= slaveCountExpected){
   d4164:	4c4c      	ldr	r4, [pc, #304]	; (d4298 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4166:	4680      	mov	r8, r0
   d4168:	460e      	mov	r6, r1
  String inputBuffer = "";
   d416a:	4668      	mov	r0, sp
   d416c:	494b      	ldr	r1, [pc, #300]	; (d429c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   d416e:	f001 ffd1 	bl	d6114 <_ZN6StringC1EPKc>
  if(bleCount <= slaveCountExpected){
   d4172:	6823      	ldr	r3, [r4, #0]
   d4174:	2b01      	cmp	r3, #1
   d4176:	f300 8083 	bgt.w	d4280 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x120>
    int input;

    for(int i = 0; i < len - 1; i++){
   d417a:	2700      	movs	r7, #0
   d417c:	3e01      	subs	r6, #1
   d417e:	42be      	cmp	r6, r7
   d4180:	d90a      	bls.n	d4198 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x38>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d4182:	f818 1007 	ldrb.w	r1, [r8, r7]
   d4186:	4668      	mov	r0, sp
   d4188:	f002 f818 	bl	d61bc <_ZN6String6concatEc>
      inputBuffer += (char)data[i];
      input = atoi(inputBuffer);
   d418c:	9800      	ldr	r0, [sp, #0]
   d418e:	f004 ff7e 	bl	d908e <atoi>
    for(int i = 0; i < len - 1; i++){
   d4192:	3701      	adds	r7, #1
      input = atoi(inputBuffer);
   d4194:	4605      	mov	r5, r0
    for(int i = 0; i < len - 1; i++){
   d4196:	e7f2      	b.n	d417e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e>
    }

    if(bleCount < slaveCountExpected){
   d4198:	6823      	ldr	r3, [r4, #0]
   d419a:	2b00      	cmp	r3, #0
   d419c:	dc04      	bgt.n	d41a8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48>
      txCharacteristic.setValue("\nEnter the position of the device with the blue LED as an integer (first device is at 1, second is at 2, etc): ");
   d419e:	4940      	ldr	r1, [pc, #256]	; (d42a0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>)
   d41a0:	4840      	ldr	r0, [pc, #256]	; (d42a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>)
   d41a2:	2200      	movs	r2, #0
   d41a4:	f002 fbcc 	bl	d6940 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    }

    Wire.beginTransmission(addressArr[bleCount]);
   d41a8:	f004 f91c 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d41ac:	4e3e      	ldr	r6, [pc, #248]	; (d42a8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   d41ae:	6823      	ldr	r3, [r4, #0]
   d41b0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   d41b4:	f003 fcee 	bl	d7b94 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('3');
   d41b8:	f004 f914 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d41bc:	2133      	movs	r1, #51	; 0x33
   d41be:	f7ff ffcb 	bl	d4158 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d41c2:	f004 f90f 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d41c6:	f003 fcec 	bl	d7ba2 <_ZN7TwoWire15endTransmissionEv>

    if(bleCount > 0){
   d41ca:	6823      	ldr	r3, [r4, #0]
   d41cc:	2b00      	cmp	r3, #0
   d41ce:	dd17      	ble.n	d4200 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>
      sequenceArr[input - 1] = addressArr[bleCount - 1];
   d41d0:	3b01      	subs	r3, #1
   d41d2:	3d01      	subs	r5, #1
   d41d4:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   d41d8:	4b34      	ldr	r3, [pc, #208]	; (d42ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
   d41da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
      
      Wire.beginTransmission(addressArr[bleCount - 1]);
   d41de:	f004 f901 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d41e2:	6823      	ldr	r3, [r4, #0]
   d41e4:	3b01      	subs	r3, #1
   d41e6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   d41ea:	f003 fcd3 	bl	d7b94 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   d41ee:	f004 f8f9 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d41f2:	2134      	movs	r1, #52	; 0x34
   d41f4:	f7ff ffb0 	bl	d4158 <_ZN7TwoWire5writeEi>
      Wire.endTransmission();
   d41f8:	f004 f8f4 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d41fc:	f003 fcd1 	bl	d7ba2 <_ZN7TwoWire15endTransmissionEv>
    }
  }

  if(bleCount == slaveCountExpected){
   d4200:	6823      	ldr	r3, [r4, #0]
   d4202:	2b01      	cmp	r3, #1
   d4204:	d13c      	bne.n	d4280 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x120>
    delay(1000);
   d4206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    Serial.println("\nSequence: ");
    for(int i = 0; i < slaveCountExpected; i++){
      Serial.print(sequenceArr[i]);
   d420a:	4e28      	ldr	r6, [pc, #160]	; (d42ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
    delay(1000);
   d420c:	f003 fa12 	bl	d7634 <delay>
    Serial.println("\nSequence: ");
   d4210:	f003 fba4 	bl	d795c <_Z16_fetch_usbserialv>
   d4214:	4926      	ldr	r1, [pc, #152]	; (d42b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
   d4216:	f003 f9cc 	bl	d75b2 <_ZN5Print7printlnEPKc>
      Serial.print(sequenceArr[i]);
   d421a:	f003 fb9f 	bl	d795c <_Z16_fetch_usbserialv>
   d421e:	6835      	ldr	r5, [r6, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d4220:	2d00      	cmp	r5, #0
   d4222:	4607      	mov	r7, r0
   d4224:	da35      	bge.n	d4292 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x132>
            t = print('-');
   d4226:	212d      	movs	r1, #45	; 0x2d
   d4228:	f003 f9b4 	bl	d7594 <_ZN5Print5printEc>
            val = -n;
   d422c:	4269      	negs	r1, r5
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d422e:	220a      	movs	r2, #10
   d4230:	4638      	mov	r0, r7
   d4232:	f003 f9c8 	bl	d75c6 <_ZN5Print11printNumberEmh>
      Serial.print(", ");
   d4236:	f003 fb91 	bl	d795c <_Z16_fetch_usbserialv>
   d423a:	491e      	ldr	r1, [pc, #120]	; (d42b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x154>)
   d423c:	f003 f9a6 	bl	d758c <_ZN5Print5printEPKc>

      Wire.beginTransmission(sequenceArr[i]);
   d4240:	f004 f8d0 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d4244:	6831      	ldr	r1, [r6, #0]
   d4246:	f003 fca5 	bl	d7b94 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('3');
   d424a:	f004 f8cb 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d424e:	2133      	movs	r1, #51	; 0x33
   d4250:	f7ff ff82 	bl	d4158 <_ZN7TwoWire5writeEi>
      Wire.endTransmission();
   d4254:	f004 f8c6 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d4258:	f003 fca3 	bl	d7ba2 <_ZN7TwoWire15endTransmissionEv>
      delay(2000);
   d425c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4260:	f003 f9e8 	bl	d7634 <delay>
      Wire.beginTransmission(sequenceArr[i]);
   d4264:	f004 f8be 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d4268:	6831      	ldr	r1, [r6, #0]
   d426a:	f003 fc93 	bl	d7b94 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   d426e:	f004 f8b9 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d4272:	2134      	movs	r1, #52	; 0x34
   d4274:	f7ff ff70 	bl	d4158 <_ZN7TwoWire5writeEi>
      Wire.endTransmission();
   d4278:	f004 f8b4 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d427c:	f003 fc91 	bl	d7ba2 <_ZN7TwoWire15endTransmissionEv>
    }
    //BLE.disconnect();
    //BLE.off();
  }

  bleCount++;
   d4280:	6823      	ldr	r3, [r4, #0]
  String inputBuffer = "";
   d4282:	4668      	mov	r0, sp
  bleCount++;
   d4284:	3301      	adds	r3, #1
   d4286:	6023      	str	r3, [r4, #0]
  String inputBuffer = "";
   d4288:	f001 fef9 	bl	d607e <_ZN6StringD1Ev>
}
   d428c:	b004      	add	sp, #16
   d428e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            val = n;
   d4292:	4629      	mov	r1, r5
   d4294:	e7cb      	b.n	d422e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xce>
   d4296:	bf00      	nop
   d4298:	20035610 	.word	0x20035610
   d429c:	000db269 	.word	0x000db269
   d42a0:	000daf70 	.word	0x000daf70
   d42a4:	2003e62c 	.word	0x2003e62c
   d42a8:	2003560c 	.word	0x2003560c
   d42ac:	2003e614 	.word	0x2003e614
   d42b0:	000dafe0 	.word	0x000dafe0
   d42b4:	000dafec 	.word	0x000dafec

000d42b8 <_Z16randomizeAddressv>:
void randomizeAddress(){
   d42b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while(slaveCount != slaveCountExpected){
   d42bc:	4ea4      	ldr	r6, [pc, #656]	; (d4550 <_Z16randomizeAddressv+0x298>)

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d42be:	f8df 92b0 	ldr.w	r9, [pc, #688]	; d4570 <_Z16randomizeAddressv+0x2b8>
void randomizeAddress(){
   d42c2:	b08f      	sub	sp, #60	; 0x3c
   d42c4:	4637      	mov	r7, r6
  while(slaveCount != slaveCountExpected){
   d42c6:	6833      	ldr	r3, [r6, #0]
   d42c8:	2b01      	cmp	r3, #1
   d42ca:	f000 8108 	beq.w	d44de <_Z16randomizeAddressv+0x226>
    slaveCount = 0;
   d42ce:	2300      	movs	r3, #0
   d42d0:	f8df a2a0 	ldr.w	sl, [pc, #672]	; d4574 <_Z16randomizeAddressv+0x2bc>
        String inputBuffer = "";
   d42d4:	f8df 82a0 	ldr.w	r8, [pc, #672]	; d4578 <_Z16randomizeAddressv+0x2c0>
    slaveCount = 0;
   d42d8:	6033      	str	r3, [r6, #0]
    for(int i = 8; i <= 119; i++){
   d42da:	2408      	movs	r4, #8
      Serial.println("\nrequest code 1, address: " + String(i));
   d42dc:	f003 fb3e 	bl	d795c <_Z16_fetch_usbserialv>
   d42e0:	4649      	mov	r1, r9
   d42e2:	4605      	mov	r5, r0
   d42e4:	a80a      	add	r0, sp, #40	; 0x28
   d42e6:	f001 ff15 	bl	d6114 <_ZN6StringC1EPKc>
   d42ea:	220a      	movs	r2, #10
   d42ec:	4621      	mov	r1, r4
   d42ee:	a806      	add	r0, sp, #24
   d42f0:	f001 ff36 	bl	d6160 <_ZN6StringC1Eih>
   d42f4:	a906      	add	r1, sp, #24
   d42f6:	a80a      	add	r0, sp, #40	; 0x28
   d42f8:	f001 ff6d 	bl	d61d6 <_ZplRK15StringSumHelperRK6String>
   d42fc:	6801      	ldr	r1, [r0, #0]
   d42fe:	4628      	mov	r0, r5
   d4300:	f003 f957 	bl	d75b2 <_ZN5Print7printlnEPKc>
   d4304:	a806      	add	r0, sp, #24
   d4306:	f001 feba 	bl	d607e <_ZN6StringD1Ev>
class StringSumHelper : public String
   d430a:	a80a      	add	r0, sp, #40	; 0x28
   d430c:	f001 feb7 	bl	d607e <_ZN6StringD1Ev>
      Wire.beginTransmission(i);
   d4310:	f004 f868 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d4314:	4621      	mov	r1, r4
   d4316:	f003 fc3d 	bl	d7b94 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('1');
   d431a:	f004 f863 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d431e:	2131      	movs	r1, #49	; 0x31
   d4320:	f7ff ff1a 	bl	d4158 <_ZN7TwoWire5writeEi>
      Wire.endTransmission();
   d4324:	fa5f fb84 	uxtb.w	fp, r4
   d4328:	f004 f85c 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d432c:	f003 fc39 	bl	d7ba2 <_ZN7TwoWire15endTransmissionEv>
      Wire.requestFrom(i, 24);
   d4330:	f004 f858 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d4334:	2218      	movs	r2, #24
   d4336:	4659      	mov	r1, fp
   d4338:	f003 fc25 	bl	d7b86 <_ZN7TwoWire11requestFromEhj>
      if(Wire.available() > 0){
   d433c:	f004 f852 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d4340:	6803      	ldr	r3, [r0, #0]
   d4342:	691b      	ldr	r3, [r3, #16]
   d4344:	4798      	blx	r3
   d4346:	2800      	cmp	r0, #0
   d4348:	f340 80c4 	ble.w	d44d4 <_Z16randomizeAddressv+0x21c>
        Serial.println("transmission recieved from: " + String(i));
   d434c:	f003 fb06 	bl	d795c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d4350:	4651      	mov	r1, sl
   d4352:	4605      	mov	r5, r0
   d4354:	a80a      	add	r0, sp, #40	; 0x28
   d4356:	f001 fedd 	bl	d6114 <_ZN6StringC1EPKc>
   d435a:	220a      	movs	r2, #10
   d435c:	4621      	mov	r1, r4
   d435e:	a806      	add	r0, sp, #24
   d4360:	f001 fefe 	bl	d6160 <_ZN6StringC1Eih>
   d4364:	a906      	add	r1, sp, #24
   d4366:	a80a      	add	r0, sp, #40	; 0x28
   d4368:	f001 ff35 	bl	d61d6 <_ZplRK15StringSumHelperRK6String>
   d436c:	6801      	ldr	r1, [r0, #0]
   d436e:	4628      	mov	r0, r5
   d4370:	f003 f91f 	bl	d75b2 <_ZN5Print7printlnEPKc>
   d4374:	a806      	add	r0, sp, #24
   d4376:	f001 fe82 	bl	d607e <_ZN6StringD1Ev>
class StringSumHelper : public String
   d437a:	a80a      	add	r0, sp, #40	; 0x28
   d437c:	f001 fe7f 	bl	d607e <_ZN6StringD1Ev>
        slaveCount++;
   d4380:	683b      	ldr	r3, [r7, #0]
        String inputBuffer = "";
   d4382:	4641      	mov	r1, r8
        slaveCount++;
   d4384:	3301      	adds	r3, #1
        String inputBuffer = "";
   d4386:	a802      	add	r0, sp, #8
        slaveCount++;
   d4388:	603b      	str	r3, [r7, #0]
        String inputBuffer = "";
   d438a:	f001 fec3 	bl	d6114 <_ZN6StringC1EPKc>
   d438e:	2518      	movs	r5, #24
          c = Wire.read();
   d4390:	f004 f828 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d4394:	6803      	ldr	r3, [r0, #0]
   d4396:	695b      	ldr	r3, [r3, #20]
   d4398:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   d439a:	b2c1      	uxtb	r1, r0
   d439c:	a802      	add	r0, sp, #8
   d439e:	f001 ff0d 	bl	d61bc <_ZN6String6concatEc>
        for(int j = 0; j < 24; j++){
   d43a2:	3d01      	subs	r5, #1
   d43a4:	d1f4      	bne.n	d4390 <_Z16randomizeAddressv+0xd8>
        Wire.beginTransmission(i);
   d43a6:	f004 f81d 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d43aa:	4621      	mov	r1, r4
   d43ac:	f003 fbf2 	bl	d7b94 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(inputBuffer);
   d43b0:	f004 f818 	bl	d83e4 <_Z19__fetch_global_Wirev>
        operator const char*() const { return c_str(); }
   d43b4:	9902      	ldr	r1, [sp, #8]
   d43b6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d43b8:	b149      	cbz	r1, d43ce <_Z16randomizeAddressv+0x116>
      return write((const uint8_t *)str, strlen(str));
   d43ba:	4608      	mov	r0, r1
   d43bc:	9101      	str	r1, [sp, #4]
   d43be:	f004 feed 	bl	d919c <strlen>
   d43c2:	682b      	ldr	r3, [r5, #0]
   d43c4:	9901      	ldr	r1, [sp, #4]
   d43c6:	68db      	ldr	r3, [r3, #12]
   d43c8:	4602      	mov	r2, r0
   d43ca:	4628      	mov	r0, r5
   d43cc:	4798      	blx	r3
        Serial.println("device id: " + inputBuffer);
   d43ce:	f003 fac5 	bl	d795c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d43d2:	4960      	ldr	r1, [pc, #384]	; (d4554 <_Z16randomizeAddressv+0x29c>)
   d43d4:	4605      	mov	r5, r0
   d43d6:	a80a      	add	r0, sp, #40	; 0x28
   d43d8:	f001 fe9c 	bl	d6114 <_ZN6StringC1EPKc>
   d43dc:	a902      	add	r1, sp, #8
   d43de:	a80a      	add	r0, sp, #40	; 0x28
   d43e0:	f001 fef9 	bl	d61d6 <_ZplRK15StringSumHelperRK6String>
   d43e4:	6801      	ldr	r1, [r0, #0]
   d43e6:	4628      	mov	r0, r5
   d43e8:	f003 f8e3 	bl	d75b2 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   d43ec:	a80a      	add	r0, sp, #40	; 0x28
   d43ee:	f001 fe46 	bl	d607e <_ZN6StringD1Ev>
        Wire.endTransmission();
   d43f2:	f003 fff7 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d43f6:	f003 fbd4 	bl	d7ba2 <_ZN7TwoWire15endTransmissionEv>
        Serial.println("transmission sent to: " + String(i));
   d43fa:	f003 faaf 	bl	d795c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d43fe:	4956      	ldr	r1, [pc, #344]	; (d4558 <_Z16randomizeAddressv+0x2a0>)
   d4400:	4605      	mov	r5, r0
   d4402:	a80a      	add	r0, sp, #40	; 0x28
   d4404:	f001 fe86 	bl	d6114 <_ZN6StringC1EPKc>
   d4408:	220a      	movs	r2, #10
   d440a:	4621      	mov	r1, r4
   d440c:	a806      	add	r0, sp, #24
   d440e:	f001 fea7 	bl	d6160 <_ZN6StringC1Eih>
   d4412:	a906      	add	r1, sp, #24
   d4414:	a80a      	add	r0, sp, #40	; 0x28
   d4416:	f001 fede 	bl	d61d6 <_ZplRK15StringSumHelperRK6String>
   d441a:	6801      	ldr	r1, [r0, #0]
   d441c:	4628      	mov	r0, r5
   d441e:	f003 f8c8 	bl	d75b2 <_ZN5Print7printlnEPKc>
   d4422:	a806      	add	r0, sp, #24
   d4424:	f001 fe2b 	bl	d607e <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4428:	a80a      	add	r0, sp, #40	; 0x28
   d442a:	f001 fe28 	bl	d607e <_ZN6StringD1Ev>
        Wire.beginTransmission(i);
   d442e:	f003 ffd9 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d4432:	4621      	mov	r1, r4
   d4434:	f003 fbae 	bl	d7b94 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('2');
   d4438:	f003 ffd4 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d443c:	2132      	movs	r1, #50	; 0x32
   d443e:	f7ff fe8b 	bl	d4158 <_ZN7TwoWire5writeEi>
        Wire.endTransmission();
   d4442:	f003 ffcf 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d4446:	f003 fbac 	bl	d7ba2 <_ZN7TwoWire15endTransmissionEv>
        Serial.println("request code 2, address: " + String(i));
   d444a:	f003 fa87 	bl	d795c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d444e:	4943      	ldr	r1, [pc, #268]	; (d455c <_Z16randomizeAddressv+0x2a4>)
   d4450:	4605      	mov	r5, r0
   d4452:	a80a      	add	r0, sp, #40	; 0x28
   d4454:	f001 fe5e 	bl	d6114 <_ZN6StringC1EPKc>
   d4458:	220a      	movs	r2, #10
   d445a:	4621      	mov	r1, r4
   d445c:	a806      	add	r0, sp, #24
   d445e:	f001 fe7f 	bl	d6160 <_ZN6StringC1Eih>
   d4462:	a906      	add	r1, sp, #24
   d4464:	a80a      	add	r0, sp, #40	; 0x28
   d4466:	f001 feb6 	bl	d61d6 <_ZplRK15StringSumHelperRK6String>
   d446a:	6801      	ldr	r1, [r0, #0]
   d446c:	4628      	mov	r0, r5
   d446e:	f003 f8a0 	bl	d75b2 <_ZN5Print7printlnEPKc>
   d4472:	a806      	add	r0, sp, #24
   d4474:	f001 fe03 	bl	d607e <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4478:	a80a      	add	r0, sp, #40	; 0x28
   d447a:	f001 fe00 	bl	d607e <_ZN6StringD1Ev>
        Wire.requestFrom(i, 4);
   d447e:	f003 ffb1 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d4482:	2204      	movs	r2, #4
   d4484:	4659      	mov	r1, fp
   d4486:	f003 fb7e 	bl	d7b86 <_ZN7TwoWire11requestFromEhj>
        inputBuffer = "";
   d448a:	4641      	mov	r1, r8
   d448c:	a802      	add	r0, sp, #8
   d448e:	f001 fe55 	bl	d613c <_ZN6StringaSEPKc>
   d4492:	2504      	movs	r5, #4
          inputBuffer += (char)Wire.read();
   d4494:	f003 ffa6 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d4498:	6803      	ldr	r3, [r0, #0]
   d449a:	695b      	ldr	r3, [r3, #20]
   d449c:	4798      	blx	r3
	String & operator += (char c)			{concat(c); return (*this);}
   d449e:	b2c1      	uxtb	r1, r0
   d44a0:	a802      	add	r0, sp, #8
   d44a2:	f001 fe8b 	bl	d61bc <_ZN6String6concatEc>
        for(int j = 0; j < 4; j++){
   d44a6:	3d01      	subs	r5, #1
   d44a8:	d1f4      	bne.n	d4494 <_Z16randomizeAddressv+0x1dc>
        Serial.println("conflict verification: " + inputBuffer);
   d44aa:	f003 fa57 	bl	d795c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d44ae:	492c      	ldr	r1, [pc, #176]	; (d4560 <_Z16randomizeAddressv+0x2a8>)
   d44b0:	4605      	mov	r5, r0
   d44b2:	a80a      	add	r0, sp, #40	; 0x28
   d44b4:	f001 fe2e 	bl	d6114 <_ZN6StringC1EPKc>
   d44b8:	a902      	add	r1, sp, #8
   d44ba:	a80a      	add	r0, sp, #40	; 0x28
   d44bc:	f001 fe8b 	bl	d61d6 <_ZplRK15StringSumHelperRK6String>
   d44c0:	6801      	ldr	r1, [r0, #0]
   d44c2:	4628      	mov	r0, r5
   d44c4:	f003 f875 	bl	d75b2 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   d44c8:	a80a      	add	r0, sp, #40	; 0x28
   d44ca:	f001 fdd8 	bl	d607e <_ZN6StringD1Ev>
        String inputBuffer = "";
   d44ce:	a802      	add	r0, sp, #8
   d44d0:	f001 fdd5 	bl	d607e <_ZN6StringD1Ev>
    for(int i = 8; i <= 119; i++){
   d44d4:	3401      	adds	r4, #1
   d44d6:	2c78      	cmp	r4, #120	; 0x78
   d44d8:	f47f af00 	bne.w	d42dc <_Z16randomizeAddressv+0x24>
   d44dc:	e6f3      	b.n	d42c6 <_Z16randomizeAddressv+0xe>
  Serial.println("\nConnected to: ");
   d44de:	f003 fa3d 	bl	d795c <_Z16_fetch_usbserialv>
   d44e2:	4920      	ldr	r1, [pc, #128]	; (d4564 <_Z16randomizeAddressv+0x2ac>)
      Serial.print(", ");
   d44e4:	4e20      	ldr	r6, [pc, #128]	; (d4568 <_Z16randomizeAddressv+0x2b0>)
      addressArr[count] = i;
   d44e6:	4f21      	ldr	r7, [pc, #132]	; (d456c <_Z16randomizeAddressv+0x2b4>)
  Serial.println("\nConnected to: ");
   d44e8:	f003 f863 	bl	d75b2 <_ZN5Print7printlnEPKc>
  for(int i = 8; i<= 119; i++){
   d44ec:	2408      	movs	r4, #8
  int count = 0;
   d44ee:	2500      	movs	r5, #0
    Wire.beginTransmission(i);
   d44f0:	f003 ff78 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d44f4:	4621      	mov	r1, r4
   d44f6:	f003 fb4d 	bl	d7b94 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('1');
   d44fa:	f003 ff73 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d44fe:	2131      	movs	r1, #49	; 0x31
   d4500:	f7ff fe2a 	bl	d4158 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d4504:	f003 ff6e 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d4508:	f003 fb4b 	bl	d7ba2 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(i, 24);
   d450c:	f003 ff6a 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d4510:	2218      	movs	r2, #24
   d4512:	b2e1      	uxtb	r1, r4
   d4514:	f003 fb37 	bl	d7b86 <_ZN7TwoWire11requestFromEhj>
    if(Wire.available() > 0){
   d4518:	f003 ff64 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d451c:	6803      	ldr	r3, [r0, #0]
   d451e:	691b      	ldr	r3, [r3, #16]
   d4520:	4798      	blx	r3
   d4522:	2800      	cmp	r0, #0
   d4524:	dd0d      	ble.n	d4542 <_Z16randomizeAddressv+0x28a>
      Serial.print(i);
   d4526:	f003 fa19 	bl	d795c <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d452a:	220a      	movs	r2, #10
   d452c:	4621      	mov	r1, r4
   d452e:	f003 f84a 	bl	d75c6 <_ZN5Print11printNumberEmh>
      Serial.print(", ");
   d4532:	f003 fa13 	bl	d795c <_Z16_fetch_usbserialv>
   d4536:	4631      	mov	r1, r6
   d4538:	f003 f828 	bl	d758c <_ZN5Print5printEPKc>
      addressArr[count] = i;
   d453c:	f847 4025 	str.w	r4, [r7, r5, lsl #2]
      count++;
   d4540:	3501      	adds	r5, #1
  for(int i = 8; i<= 119; i++){
   d4542:	3401      	adds	r4, #1
   d4544:	2c78      	cmp	r4, #120	; 0x78
   d4546:	d1d3      	bne.n	d44f0 <_Z16randomizeAddressv+0x238>
}
   d4548:	b00f      	add	sp, #60	; 0x3c
   d454a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d454e:	bf00      	nop
   d4550:	2003e618 	.word	0x2003e618
   d4554:	000db027 	.word	0x000db027
   d4558:	000db033 	.word	0x000db033
   d455c:	000db04a 	.word	0x000db04a
   d4560:	000db064 	.word	0x000db064
   d4564:	000db07c 	.word	0x000db07c
   d4568:	000dafec 	.word	0x000dafec
   d456c:	2003560c 	.word	0x2003560c
   d4570:	000dafef 	.word	0x000dafef
   d4574:	000db00a 	.word	0x000db00a
   d4578:	000db269 	.word	0x000db269

000d457c <_Z17acquireWireBufferv>:

hal_i2c_config_t acquireWireBuffer() {
   d457c:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   d457e:	2300      	movs	r3, #0
   d4580:	f44f 7500 	mov.w	r5, #512	; 0x200
   d4584:	8043      	strh	r3, [r0, #2]
   d4586:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   d4588:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   d458a:	8003      	strh	r3, [r0, #0]
   d458c:	6085      	str	r5, [r0, #8]
   d458e:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   d4590:	4905      	ldr	r1, [pc, #20]	; (d45a8 <_Z17acquireWireBufferv+0x2c>)
   d4592:	4628      	mov	r0, r5
   d4594:	f003 ff55 	bl	d8442 <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   d4598:	4903      	ldr	r1, [pc, #12]	; (d45a8 <_Z17acquireWireBufferv+0x2c>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   d459a:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   d459c:	4628      	mov	r0, r5
   d459e:	f003 ff50 	bl	d8442 <_ZnajRKSt9nothrow_t>
    };
   d45a2:	60e0      	str	r0, [r4, #12]
    return config;
   d45a4:	4620      	mov	r0, r4
   d45a6:	bd38      	pop	{r3, r4, r5, pc}
   d45a8:	000db610 	.word	0x000db610

000d45ac <setup>:
void setup() {
   d45ac:	b510      	push	{r4, lr}
   d45ae:	b096      	sub	sp, #88	; 0x58
  Serial.begin(9600);
   d45b0:	f003 f9d4 	bl	d795c <_Z16_fetch_usbserialv>
   d45b4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d45b8:	f003 f9c4 	bl	d7944 <_ZN9USBSerial5beginEl>
  delay(2000);
   d45bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d45c0:	f003 f838 	bl	d7634 <delay>
  BLE.on();
   d45c4:	f002 fa76 	bl	d6ab4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d45c8:	f002 fac2 	bl	d6b50 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   d45cc:	f002 fa72 	bl	d6ab4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d45d0:	4a29      	ldr	r2, [pc, #164]	; (d4678 <setup+0xcc>)
   d45d2:	4601      	mov	r1, r0
   d45d4:	a80d      	add	r0, sp, #52	; 0x34
   d45d6:	f002 fe95 	bl	d7304 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d45da:	a80d      	add	r0, sp, #52	; 0x34
   d45dc:	f002 fb39 	bl	d6c52 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   d45e0:	f002 fa68 	bl	d6ab4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d45e4:	4a25      	ldr	r2, [pc, #148]	; (d467c <setup+0xd0>)
   d45e6:	4601      	mov	r1, r0
   d45e8:	a80d      	add	r0, sp, #52	; 0x34
   d45ea:	f002 fe8b 	bl	d7304 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d45ee:	a80d      	add	r0, sp, #52	; 0x34
   d45f0:	f002 fb2f 	bl	d6c52 <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   d45f4:	a80d      	add	r0, sp, #52	; 0x34
   d45f6:	f002 f8dc 	bl	d67b2 <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   d45fa:	4921      	ldr	r1, [pc, #132]	; (d4680 <setup+0xd4>)
   d45fc:	a803      	add	r0, sp, #12
   d45fe:	f001 ffdb 	bl	d65b8 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d4602:	a903      	add	r1, sp, #12
   d4604:	a808      	add	r0, sp, #32
   d4606:	f001 ffd7 	bl	d65b8 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d460a:	a808      	add	r0, sp, #32
   d460c:	f002 f81a 	bl	d6644 <_ZNK8particle7BleUuid4typeEv>
   d4610:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d4612:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4614:	bb44      	cbnz	r4, d4668 <setup+0xbc>
            uint16_t uuid16 = tempUUID.shorted();
   d4616:	f002 f834 	bl	d6682 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d461a:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d461c:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4620:	2302      	movs	r3, #2
   d4622:	f10d 020a 	add.w	r2, sp, #10
   d4626:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d4628:	a80d      	add	r0, sp, #52	; 0x34
   d462a:	f002 f8b7 	bl	d679c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   d462e:	f002 fa41 	bl	d6ab4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4632:	2200      	movs	r2, #0
   d4634:	a90d      	add	r1, sp, #52	; 0x34
   d4636:	f002 faab 	bl	d6b90 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  request.hostname = "lapi.transitchicago.com";
   d463a:	4c12      	ldr	r4, [pc, #72]	; (d4684 <setup+0xd8>)
  acquireWireBuffer();
   d463c:	a808      	add	r0, sp, #32
   d463e:	f7ff ff9d 	bl	d457c <_Z17acquireWireBufferv>
  Wire.begin();
   d4642:	f003 fecf 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d4646:	f003 fa6f 	bl	d7b28 <_ZN7TwoWire5beginEv>
  randomizeAddress();
   d464a:	f7ff fe35 	bl	d42b8 <_Z16randomizeAddressv>
  request.hostname = "lapi.transitchicago.com";
   d464e:	490e      	ldr	r1, [pc, #56]	; (d4688 <setup+0xdc>)
   d4650:	4620      	mov	r0, r4
   d4652:	f001 fd73 	bl	d613c <_ZN6StringaSEPKc>
  request.port = 80;
   d4656:	2350      	movs	r3, #80	; 0x50
  request.path = "/api/1.0/ttpositions.aspx?key=00ff09063caa46748434d5fa321d048f&rt=red&outputType=JSON";
   d4658:	490c      	ldr	r1, [pc, #48]	; (d468c <setup+0xe0>)
  request.port = 80;
   d465a:	63a3      	str	r3, [r4, #56]	; 0x38
  request.path = "/api/1.0/ttpositions.aspx?key=00ff09063caa46748434d5fa321d048f&rt=red&outputType=JSON";
   d465c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4660:	f001 fd6c 	bl	d613c <_ZN6StringaSEPKc>
}
   d4664:	b016      	add	sp, #88	; 0x58
   d4666:	bd10      	pop	{r4, pc}
   d4668:	f002 f810 	bl	d668c <_ZNK8particle7BleUuid8rawBytesEv>
   d466c:	2300      	movs	r3, #0
   d466e:	9300      	str	r3, [sp, #0]
   d4670:	4602      	mov	r2, r0
   d4672:	2310      	movs	r3, #16
   d4674:	2107      	movs	r1, #7
   d4676:	e7d7      	b.n	d4628 <setup+0x7c>
   d4678:	2003e62c 	.word	0x2003e62c
   d467c:	2003e60c 	.word	0x2003e60c
   d4680:	200355d0 	.word	0x200355d0
   d4684:	2003e5ac 	.word	0x2003e5ac
   d4688:	000db08c 	.word	0x000db08c
   d468c:	000db0a4 	.word	0x000db0a4

000d4690 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4690:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4692:	4616      	mov	r6, r2
   d4694:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4696:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d4698:	e9c0 2200 	strd	r2, r2, [r0]
   d469c:	4604      	mov	r4, r0
   d469e:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d46a0:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d46a2:	4619      	mov	r1, r3
   d46a4:	a806      	add	r0, sp, #24
   d46a6:	f001 ff87 	bl	d65b8 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d46aa:	9916      	ldr	r1, [sp, #88]	; 0x58
   d46ac:	4638      	mov	r0, r7
   d46ae:	f001 ff83 	bl	d65b8 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d46b2:	7833      	ldrb	r3, [r6, #0]
   d46b4:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d46b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d46ba:	9302      	str	r3, [sp, #8]
   d46bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d46be:	4620      	mov	r0, r4
   d46c0:	e9cd 7300 	strd	r7, r3, [sp]
   d46c4:	aa05      	add	r2, sp, #20
   d46c6:	ab06      	add	r3, sp, #24
   d46c8:	4629      	mov	r1, r5
   d46ca:	f002 fcf9 	bl	d70c0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d46ce:	4620      	mov	r0, r4
   d46d0:	b011      	add	sp, #68	; 0x44
   d46d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d46d4 <_GLOBAL__sub_I_addressArr>:
   d46d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d46d8:	4c67      	ldr	r4, [pc, #412]	; (d4878 <_GLOBAL__sub_I_addressArr+0x1a4>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d46da:	f8df 822c 	ldr.w	r8, [pc, #556]	; d4908 <_GLOBAL__sub_I_addressArr+0x234>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d46de:	4d67      	ldr	r5, [pc, #412]	; (d487c <_GLOBAL__sub_I_addressArr+0x1a8>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d46e0:	4967      	ldr	r1, [pc, #412]	; (d4880 <_GLOBAL__sub_I_addressArr+0x1ac>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d46e2:	f8df 9228 	ldr.w	r9, [pc, #552]	; d490c <_GLOBAL__sub_I_addressArr+0x238>
   d46e6:	4f67      	ldr	r7, [pc, #412]	; (d4884 <_GLOBAL__sub_I_addressArr+0x1b0>)
   d46e8:	b091      	sub	sp, #68	; 0x44
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d46ea:	4620      	mov	r0, r4
   d46ec:	f002 f84a 	bl	d6784 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d46f0:	4965      	ldr	r1, [pc, #404]	; (d4888 <_GLOBAL__sub_I_addressArr+0x1b4>)
   d46f2:	4640      	mov	r0, r8
   d46f4:	f002 f846 	bl	d6784 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d46f8:	4964      	ldr	r1, [pc, #400]	; (d488c <_GLOBAL__sub_I_addressArr+0x1b8>)
   d46fa:	4628      	mov	r0, r5
   d46fc:	f002 f842 	bl	d6784 <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   d4700:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d4702:	4629      	mov	r1, r5
   d4704:	a806      	add	r0, sp, #24
   d4706:	f88d 3014 	strb.w	r3, [sp, #20]
   d470a:	f001 ff55 	bl	d65b8 <_ZN8particle7BleUuidC1ERKS0_>
   d470e:	4621      	mov	r1, r4
   d4710:	a80b      	add	r0, sp, #44	; 0x2c
   d4712:	f001 ff51 	bl	d65b8 <_ZN8particle7BleUuidC1ERKS0_>
   d4716:	4d5e      	ldr	r5, [pc, #376]	; (d4890 <_GLOBAL__sub_I_addressArr+0x1bc>)
   d4718:	495e      	ldr	r1, [pc, #376]	; (d4894 <_GLOBAL__sub_I_addressArr+0x1c0>)
   d471a:	2600      	movs	r6, #0
   d471c:	ab0b      	add	r3, sp, #44	; 0x2c
   d471e:	9300      	str	r3, [sp, #0]
   d4720:	aa05      	add	r2, sp, #20
   d4722:	ab06      	add	r3, sp, #24
   d4724:	e9cd 6601 	strd	r6, r6, [sp, #4]
   d4728:	4648      	mov	r0, r9
   d472a:	f7ff ffb1 	bl	d4690 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d472e:	462a      	mov	r2, r5
   d4730:	4639      	mov	r1, r7
   d4732:	4648      	mov	r0, r9
   d4734:	f003 fe7e 	bl	d8434 <__aeabi_atexit>
   d4738:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   d473a:	4641      	mov	r1, r8
   d473c:	a806      	add	r0, sp, #24
   d473e:	f88d 3014 	strb.w	r3, [sp, #20]
   d4742:	f001 ff39 	bl	d65b8 <_ZN8particle7BleUuidC1ERKS0_>
   d4746:	4621      	mov	r1, r4
   d4748:	a80b      	add	r0, sp, #44	; 0x2c
   d474a:	f001 ff35 	bl	d65b8 <_ZN8particle7BleUuidC1ERKS0_>
   d474e:	4c52      	ldr	r4, [pc, #328]	; (d4898 <_GLOBAL__sub_I_addressArr+0x1c4>)
   d4750:	4b52      	ldr	r3, [pc, #328]	; (d489c <_GLOBAL__sub_I_addressArr+0x1c8>)
   d4752:	9301      	str	r3, [sp, #4]
   d4754:	ab0b      	add	r3, sp, #44	; 0x2c
   d4756:	9300      	str	r3, [sp, #0]
   d4758:	aa05      	add	r2, sp, #20
   d475a:	ab06      	add	r3, sp, #24
   d475c:	4950      	ldr	r1, [pc, #320]	; (d48a0 <_GLOBAL__sub_I_addressArr+0x1cc>)
   d475e:	9602      	str	r6, [sp, #8]
   d4760:	4620      	mov	r0, r4
   d4762:	f7ff ff95 	bl	d4690 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4766:	4639      	mov	r1, r7
   d4768:	4620      	mov	r0, r4
} http_request_t;
   d476a:	4f4e      	ldr	r7, [pc, #312]	; (d48a4 <_GLOBAL__sub_I_addressArr+0x1d0>)
   d476c:	4c4e      	ldr	r4, [pc, #312]	; (d48a8 <_GLOBAL__sub_I_addressArr+0x1d4>)
   d476e:	462a      	mov	r2, r5
   d4770:	f003 fe60 	bl	d8434 <__aeabi_atexit>
   d4774:	4639      	mov	r1, r7
   d4776:	4620      	mov	r0, r4
   d4778:	f001 fccc 	bl	d6114 <_ZN6StringC1EPKc>
   d477c:	f104 0010 	add.w	r0, r4, #16
   d4780:	f003 f83c 	bl	d77fc <_ZN9IPAddressC1Ev>
   d4784:	4639      	mov	r1, r7
   d4786:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d478a:	f001 fcc3 	bl	d6114 <_ZN6StringC1EPKc>
   d478e:	4639      	mov	r1, r7
   d4790:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4794:	f001 fcbe 	bl	d6114 <_ZN6StringC1EPKc>
http_request_t request;
   d4798:	4620      	mov	r0, r4
} http_response_t;
   d479a:	4c44      	ldr	r4, [pc, #272]	; (d48ac <_GLOBAL__sub_I_addressArr+0x1d8>)
   d479c:	4944      	ldr	r1, [pc, #272]	; (d48b0 <_GLOBAL__sub_I_addressArr+0x1dc>)
   d479e:	462a      	mov	r2, r5
   d47a0:	f003 fe48 	bl	d8434 <__aeabi_atexit>
   d47a4:	4639      	mov	r1, r7
   d47a6:	1d20      	adds	r0, r4, #4
   d47a8:	f001 fcb4 	bl	d6114 <_ZN6StringC1EPKc>
http_response_t response;
   d47ac:	4620      	mov	r0, r4
"Roosevelt", "Cermak-Chinatown"};
   d47ae:	4c41      	ldr	r4, [pc, #260]	; (d48b4 <_GLOBAL__sub_I_addressArr+0x1e0>)
http_response_t response;
   d47b0:	4941      	ldr	r1, [pc, #260]	; (d48b8 <_GLOBAL__sub_I_addressArr+0x1e4>)
   d47b2:	462a      	mov	r2, r5
   d47b4:	f003 fe3e 	bl	d8434 <__aeabi_atexit>
"Roosevelt", "Cermak-Chinatown"};
   d47b8:	4940      	ldr	r1, [pc, #256]	; (d48bc <_GLOBAL__sub_I_addressArr+0x1e8>)
   d47ba:	4620      	mov	r0, r4
   d47bc:	f001 fcaa 	bl	d6114 <_ZN6StringC1EPKc>
   d47c0:	493f      	ldr	r1, [pc, #252]	; (d48c0 <_GLOBAL__sub_I_addressArr+0x1ec>)
   d47c2:	f104 0010 	add.w	r0, r4, #16
   d47c6:	f001 fca5 	bl	d6114 <_ZN6StringC1EPKc>
   d47ca:	493e      	ldr	r1, [pc, #248]	; (d48c4 <_GLOBAL__sub_I_addressArr+0x1f0>)
   d47cc:	f104 0020 	add.w	r0, r4, #32
   d47d0:	f001 fca0 	bl	d6114 <_ZN6StringC1EPKc>
   d47d4:	493c      	ldr	r1, [pc, #240]	; (d48c8 <_GLOBAL__sub_I_addressArr+0x1f4>)
   d47d6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d47da:	f001 fc9b 	bl	d6114 <_ZN6StringC1EPKc>
   d47de:	493b      	ldr	r1, [pc, #236]	; (d48cc <_GLOBAL__sub_I_addressArr+0x1f8>)
   d47e0:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d47e4:	f001 fc96 	bl	d6114 <_ZN6StringC1EPKc>
   d47e8:	4939      	ldr	r1, [pc, #228]	; (d48d0 <_GLOBAL__sub_I_addressArr+0x1fc>)
   d47ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
   d47ee:	f001 fc91 	bl	d6114 <_ZN6StringC1EPKc>
   d47f2:	4938      	ldr	r1, [pc, #224]	; (d48d4 <_GLOBAL__sub_I_addressArr+0x200>)
   d47f4:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d47f8:	f001 fc8c 	bl	d6114 <_ZN6StringC1EPKc>
   d47fc:	4936      	ldr	r1, [pc, #216]	; (d48d8 <_GLOBAL__sub_I_addressArr+0x204>)
   d47fe:	f104 0070 	add.w	r0, r4, #112	; 0x70
   d4802:	f001 fc87 	bl	d6114 <_ZN6StringC1EPKc>
   d4806:	4935      	ldr	r1, [pc, #212]	; (d48dc <_GLOBAL__sub_I_addressArr+0x208>)
   d4808:	f104 0080 	add.w	r0, r4, #128	; 0x80
   d480c:	f001 fc82 	bl	d6114 <_ZN6StringC1EPKc>
   d4810:	4933      	ldr	r1, [pc, #204]	; (d48e0 <_GLOBAL__sub_I_addressArr+0x20c>)
   d4812:	f104 0090 	add.w	r0, r4, #144	; 0x90
HttpClient http;
   d4816:	4c33      	ldr	r4, [pc, #204]	; (d48e4 <_GLOBAL__sub_I_addressArr+0x210>)
"Roosevelt", "Cermak-Chinatown"};
   d4818:	f001 fc7c 	bl	d6114 <_ZN6StringC1EPKc>
String redLineStations[] = {"North/Clybourn", "Clark/Divison", "Chicago", "Grand", "Lake", "Monroe", "Jackson", "Harrison", 
   d481c:	462a      	mov	r2, r5
   d481e:	4932      	ldr	r1, [pc, #200]	; (d48e8 <_GLOBAL__sub_I_addressArr+0x214>)
   d4820:	4630      	mov	r0, r6
   d4822:	f003 fe07 	bl	d8434 <__aeabi_atexit>
HttpClient http;
   d4826:	4620      	mov	r0, r4
   d4828:	f000 fa82 	bl	d4d30 <_ZN10HttpClientC1Ev>
   d482c:	462a      	mov	r2, r5
   d482e:	492f      	ldr	r1, [pc, #188]	; (d48ec <_GLOBAL__sub_I_addressArr+0x218>)
   d4830:	4620      	mov	r0, r4
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   d4832:	4c2f      	ldr	r4, [pc, #188]	; (d48f0 <_GLOBAL__sub_I_addressArr+0x21c>)
   d4834:	f003 fdfe 	bl	d8434 <__aeabi_atexit>
   d4838:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d483c:	9300      	str	r3, [sp, #0]
   d483e:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d4842:	4b2c      	ldr	r3, [pc, #176]	; (d48f4 <_GLOBAL__sub_I_addressArr+0x220>)
   d4844:	f242 7210 	movw	r2, #10000	; 0x2710
   d4848:	4620      	mov	r0, r4
   d484a:	f000 fc4b 	bl	d50e4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   d484e:	4b2a      	ldr	r3, [pc, #168]	; (d48f8 <_GLOBAL__sub_I_addressArr+0x224>)
   d4850:	6023      	str	r3, [r4, #0]
JsonParserStatic<10000, 1000> parser;
   d4852:	4620      	mov	r0, r4
Adafruit_DotStar strip = Adafruit_DotStar(NUMPIXELS);
   d4854:	4c29      	ldr	r4, [pc, #164]	; (d48fc <_GLOBAL__sub_I_addressArr+0x228>)
JsonParserStatic<10000, 1000> parser;
   d4856:	492a      	ldr	r1, [pc, #168]	; (d4900 <_GLOBAL__sub_I_addressArr+0x22c>)
   d4858:	462a      	mov	r2, r5
   d485a:	f003 fdeb 	bl	d8434 <__aeabi_atexit>
Adafruit_DotStar strip = Adafruit_DotStar(NUMPIXELS);
   d485e:	2212      	movs	r2, #18
   d4860:	2148      	movs	r1, #72	; 0x48
   d4862:	4620      	mov	r0, r4
   d4864:	f000 fa13 	bl	d4c8e <_ZN16Adafruit_DotStarC1Eth>
   d4868:	4926      	ldr	r1, [pc, #152]	; (d4904 <_GLOBAL__sub_I_addressArr+0x230>)
   d486a:	462a      	mov	r2, r5
   d486c:	4620      	mov	r0, r4
   d486e:	f003 fde1 	bl	d8434 <__aeabi_atexit>
   d4872:	b011      	add	sp, #68	; 0x44
   d4874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4878:	200355d0 	.word	0x200355d0
   d487c:	200355f8 	.word	0x200355f8
   d4880:	000db0fa 	.word	0x000db0fa
   d4884:	000d6c53 	.word	0x000d6c53
   d4888:	000db11f 	.word	0x000db11f
   d488c:	000db144 	.word	0x000db144
   d4890:	200355cc 	.word	0x200355cc
   d4894:	000db169 	.word	0x000db169
   d4898:	2003e60c 	.word	0x2003e60c
   d489c:	000d4161 	.word	0x000d4161
   d48a0:	000db16c 	.word	0x000db16c
   d48a4:	000db269 	.word	0x000db269
   d48a8:	2003e5ac 	.word	0x2003e5ac
   d48ac:	2003e5f8 	.word	0x2003e5f8
   d48b0:	000d40db 	.word	0x000d40db
   d48b4:	2003e50c 	.word	0x2003e50c
   d48b8:	000d40cd 	.word	0x000d40cd
   d48bc:	000db16f 	.word	0x000db16f
   d48c0:	000db17e 	.word	0x000db17e
   d48c4:	000db18c 	.word	0x000db18c
   d48c8:	000db194 	.word	0x000db194
   d48cc:	000db19a 	.word	0x000db19a
   d48d0:	000db19f 	.word	0x000db19f
   d48d4:	000db1a6 	.word	0x000db1a6
   d48d8:	000db1ae 	.word	0x000db1ae
   d48dc:	000db1b7 	.word	0x000db1b7
   d48e0:	000db1c1 	.word	0x000db1c1
   d48e4:	20035614 	.word	0x20035614
   d48e8:	000d40b5 	.word	0x000d40b5
   d48ec:	000d4125 	.word	0x000d4125
   d48f0:	20037e30 	.word	0x20037e30
   d48f4:	2003a56c 	.word	0x2003a56c
   d48f8:	000db21c 	.word	0x000db21c
   d48fc:	2003e61c 	.word	0x2003e61c
   d4900:	000d40f9 	.word	0x000d40f9
   d4904:	000d4cff 	.word	0x000d4cff
   d4908:	200355e4 	.word	0x200355e4
   d490c:	2003e62c 	.word	0x2003e62c

000d4910 <loop>:
void loop() {
   d4910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   d4914:	4db4      	ldr	r5, [pc, #720]	; (d4be8 <loop+0x2d8>)
   d4916:	4bb5      	ldr	r3, [pc, #724]	; (d4bec <loop+0x2dc>)
   d4918:	49b5      	ldr	r1, [pc, #724]	; (d4bf0 <loop+0x2e0>)
   d491a:	48b6      	ldr	r0, [pc, #728]	; (d4bf4 <loop+0x2e4>)
   d491c:	b09a      	sub	sp, #104	; 0x68
   d491e:	462a      	mov	r2, r5
   d4920:	9300      	str	r3, [sp, #0]
   d4922:	4bb5      	ldr	r3, [pc, #724]	; (d4bf8 <loop+0x2e8>)
   d4924:	f000 fa3a 	bl	d4d9c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
  parser.clear();
   d4928:	48b4      	ldr	r0, [pc, #720]	; (d4bfc <loop+0x2ec>)
   d492a:	f000 fbd1 	bl	d50d0 <_ZN10JsonBuffer5clearEv>
        operator const char*() const { return c_str(); }
   d492e:	6869      	ldr	r1, [r5, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   d4930:	9103      	str	r1, [sp, #12]
   d4932:	4608      	mov	r0, r1
   d4934:	f004 fc32 	bl	d919c <strlen>
   d4938:	9903      	ldr	r1, [sp, #12]
   d493a:	4602      	mov	r2, r0
   d493c:	48af      	ldr	r0, [pc, #700]	; (d4bfc <loop+0x2ec>)
   d493e:	f000 fbaa 	bl	d5096 <_ZN10JsonBuffer7addDataEPKcj>
  if (!parser.parse()) {
   d4942:	48ae      	ldr	r0, [pc, #696]	; (d4bfc <loop+0x2ec>)
   d4944:	f000 ff6c 	bl	d5820 <_ZN10JsonParser5parseEv>
   d4948:	4605      	mov	r5, r0
   d494a:	b938      	cbnz	r0, d495c <loop+0x4c>
		Serial.println("parsing failed");
   d494c:	f003 f806 	bl	d795c <_Z16_fetch_usbserialv>
   d4950:	49ab      	ldr	r1, [pc, #684]	; (d4c00 <loop+0x2f0>)
   d4952:	f002 fe2e 	bl	d75b2 <_ZN5Print7printlnEPKc>
}
   d4956:	b01a      	add	sp, #104	; 0x68
   d4958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  int count = 0;
   d495c:	f04f 0a00 	mov.w	sl, #0
    JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   d4960:	49a6      	ldr	r1, [pc, #664]	; (d4bfc <loop+0x2ec>)
   d4962:	a808      	add	r0, sp, #32
   d4964:	f000 fbce 	bl	d5104 <_ZNK10JsonParser12getReferenceEv>
   d4968:	4aa6      	ldr	r2, [pc, #664]	; (d4c04 <loop+0x2f4>)
   d496a:	a908      	add	r1, sp, #32
   d496c:	a80b      	add	r0, sp, #44	; 0x2c
   d496e:	f000 fd4b 	bl	d5408 <_ZNK13JsonReference3keyEPKc>
   d4972:	4aa5      	ldr	r2, [pc, #660]	; (d4c08 <loop+0x2f8>)
   d4974:	a90b      	add	r1, sp, #44	; 0x2c
   d4976:	a80e      	add	r0, sp, #56	; 0x38
   d4978:	f000 fd46 	bl	d5408 <_ZNK13JsonReference3keyEPKc>
   d497c:	2200      	movs	r2, #0
   d497e:	a90e      	add	r1, sp, #56	; 0x38
   d4980:	a812      	add	r0, sp, #72	; 0x48
   d4982:	f000 fc2f 	bl	d51e4 <_ZNK13JsonReference5indexEj>
   d4986:	4aa1      	ldr	r2, [pc, #644]	; (d4c0c <loop+0x2fc>)
   d4988:	a912      	add	r1, sp, #72	; 0x48
   d498a:	a816      	add	r0, sp, #88	; 0x58
   d498c:	f000 fd3c 	bl	d5408 <_ZNK13JsonReference3keyEPKc>
   d4990:	4652      	mov	r2, sl
   d4992:	a916      	add	r1, sp, #88	; 0x58
   d4994:	a805      	add	r0, sp, #20
   d4996:	f000 fc25 	bl	d51e4 <_ZNK13JsonReference5indexEj>
   d499a:	a816      	add	r0, sp, #88	; 0x58
   d499c:	f000 fb2a 	bl	d4ff4 <_ZN13JsonReferenceD1Ev>
   d49a0:	a812      	add	r0, sp, #72	; 0x48
   d49a2:	f000 fb27 	bl	d4ff4 <_ZN13JsonReferenceD1Ev>
   d49a6:	a80e      	add	r0, sp, #56	; 0x38
   d49a8:	f000 fb24 	bl	d4ff4 <_ZN13JsonReferenceD1Ev>
   d49ac:	a80b      	add	r0, sp, #44	; 0x2c
   d49ae:	f000 fb21 	bl	d4ff4 <_ZN13JsonReferenceD1Ev>
   d49b2:	a808      	add	r0, sp, #32
   d49b4:	f000 fb1e 	bl	d4ff4 <_ZN13JsonReferenceD1Ev>
    String nextStation = train.key("nextStaNm").valueString();
   d49b8:	4a95      	ldr	r2, [pc, #596]	; (d4c10 <loop+0x300>)
   d49ba:	a905      	add	r1, sp, #20
   d49bc:	a816      	add	r0, sp, #88	; 0x58
   d49be:	f000 fd23 	bl	d5408 <_ZNK13JsonReference3keyEPKc>
   d49c2:	a916      	add	r1, sp, #88	; 0x58
   d49c4:	a80e      	add	r0, sp, #56	; 0x38
   d49c6:	f000 fd39 	bl	d543c <_ZNK13JsonReference11valueStringEv>
   d49ca:	a816      	add	r0, sp, #88	; 0x58
   d49cc:	f000 fb12 	bl	d4ff4 <_ZN13JsonReferenceD1Ev>
    String trainDir = train.key("trDr").valueString();
   d49d0:	4a90      	ldr	r2, [pc, #576]	; (d4c14 <loop+0x304>)
   d49d2:	a905      	add	r1, sp, #20
   d49d4:	a816      	add	r0, sp, #88	; 0x58
   d49d6:	f000 fd17 	bl	d5408 <_ZNK13JsonReference3keyEPKc>
   d49da:	a916      	add	r1, sp, #88	; 0x58
   d49dc:	a812      	add	r0, sp, #72	; 0x48
   d49de:	f000 fd2d 	bl	d543c <_ZNK13JsonReference11valueStringEv>
   d49e2:	a816      	add	r0, sp, #88	; 0x58
   d49e4:	f000 fb06 	bl	d4ff4 <_ZN13JsonReferenceD1Ev>
    float lat = train.key("lat").valueString().toFloat();
   d49e8:	4a8b      	ldr	r2, [pc, #556]	; (d4c18 <loop+0x308>)
   d49ea:	a905      	add	r1, sp, #20
   d49ec:	a80b      	add	r0, sp, #44	; 0x2c
   d49ee:	f000 fd0b 	bl	d5408 <_ZNK13JsonReference3keyEPKc>
   d49f2:	a90b      	add	r1, sp, #44	; 0x2c
   d49f4:	a816      	add	r0, sp, #88	; 0x58
   d49f6:	f000 fd21 	bl	d543c <_ZNK13JsonReference11valueStringEv>
   d49fa:	a816      	add	r0, sp, #88	; 0x58
   d49fc:	f001 fc44 	bl	d6288 <_ZNK6String7toFloatEv>
   d4a00:	a816      	add	r0, sp, #88	; 0x58
   d4a02:	ee10 6a10 	vmov	r6, s0
   d4a06:	f001 fb3a 	bl	d607e <_ZN6StringD1Ev>
   d4a0a:	a80b      	add	r0, sp, #44	; 0x2c
   d4a0c:	f000 faf2 	bl	d4ff4 <_ZN13JsonReferenceD1Ev>
    float lon = train.key("lon").valueString().toFloat();
   d4a10:	4a82      	ldr	r2, [pc, #520]	; (d4c1c <loop+0x30c>)
   d4a12:	a905      	add	r1, sp, #20
   d4a14:	a80b      	add	r0, sp, #44	; 0x2c
   d4a16:	f000 fcf7 	bl	d5408 <_ZNK13JsonReference3keyEPKc>
   d4a1a:	a90b      	add	r1, sp, #44	; 0x2c
   d4a1c:	a816      	add	r0, sp, #88	; 0x58
   d4a1e:	f000 fd0d 	bl	d543c <_ZNK13JsonReference11valueStringEv>
   d4a22:	a816      	add	r0, sp, #88	; 0x58
   d4a24:	f001 fc30 	bl	d6288 <_ZNK6String7toFloatEv>
   d4a28:	a816      	add	r0, sp, #88	; 0x58
   d4a2a:	ee10 8a10 	vmov	r8, s0
   d4a2e:	f001 fb26 	bl	d607e <_ZN6StringD1Ev>
   d4a32:	a80b      	add	r0, sp, #44	; 0x2c
   d4a34:	f000 fade 	bl	d4ff4 <_ZN13JsonReferenceD1Ev>
    if(nextStation.length() <= 1){
   d4a38:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d4a3a:	2b01      	cmp	r3, #1
   d4a3c:	f240 8085 	bls.w	d4b4a <loop+0x23a>
    if(lat < 41.89950 && lat > 41.853206){
   d4a40:	4630      	mov	r0, r6
   d4a42:	f003 ff79 	bl	d8938 <__aeabi_f2d>
   d4a46:	a35a      	add	r3, pc, #360	; (adr r3, d4bb0 <loop+0x2a0>)
   d4a48:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a4c:	4606      	mov	r6, r0
   d4a4e:	460f      	mov	r7, r1
   d4a50:	f004 fa3c 	bl	d8ecc <__aeabi_dcmplt>
   d4a54:	2800      	cmp	r0, #0
   d4a56:	d037      	beq.n	d4ac8 <loop+0x1b8>
   d4a58:	a357      	add	r3, pc, #348	; (adr r3, d4bb8 <loop+0x2a8>)
   d4a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a5e:	4630      	mov	r0, r6
   d4a60:	4639      	mov	r1, r7
   d4a62:	f004 fa51 	bl	d8f08 <__aeabi_dcmpgt>
   d4a66:	b378      	cbz	r0, d4ac8 <loop+0x1b8>
      pos = (int) (RED_LINE_VERTICAL * (lat - 41.853206) / (41.89950 - 41.853206) + 0.5);
   d4a68:	a353      	add	r3, pc, #332	; (adr r3, d4bb8 <loop+0x2a8>)
   d4a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a6e:	4630      	mov	r0, r6
   d4a70:	4639      	mov	r1, r7
   d4a72:	f003 fe01 	bl	d8678 <__aeabi_dsub>
   d4a76:	4b6a      	ldr	r3, [pc, #424]	; (d4c20 <loop+0x310>)
   d4a78:	2200      	movs	r2, #0
   d4a7a:	f003 ffb5 	bl	d89e8 <__aeabi_dmul>
   d4a7e:	a350      	add	r3, pc, #320	; (adr r3, d4bc0 <loop+0x2b0>)
   d4a80:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a84:	f004 f8da 	bl	d8c3c <__aeabi_ddiv>
   d4a88:	4b66      	ldr	r3, [pc, #408]	; (d4c24 <loop+0x314>)
   d4a8a:	2200      	movs	r2, #0
   d4a8c:	f003 fdf6 	bl	d867c <__adddf3>
   d4a90:	f004 fa44 	bl	d8f1c <__aeabi_d2iz>
   d4a94:	4604      	mov	r4, r0
      validTrain = true;
   d4a96:	462e      	mov	r6, r5
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4a98:	4963      	ldr	r1, [pc, #396]	; (d4c28 <loop+0x318>)
   d4a9a:	a812      	add	r0, sp, #72	; 0x48
   d4a9c:	f001 fba7 	bl	d61ee <_ZNK6String6equalsEPKc>
    if(trainDir == "1" && validTrain){
   d4aa0:	2800      	cmp	r0, #0
   d4aa2:	d047      	beq.n	d4b34 <loop+0x224>
   d4aa4:	2e00      	cmp	r6, #0
   d4aa6:	d045      	beq.n	d4b34 <loop+0x224>
      redLineOutput[pos] = 1;
   d4aa8:	4b60      	ldr	r3, [pc, #384]	; (d4c2c <loop+0x31c>)
   d4aaa:	2201      	movs	r2, #1
      redLineOutput[pos] = 5;
   d4aac:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    String trainDir = train.key("trDr").valueString();
   d4ab0:	a812      	add	r0, sp, #72	; 0x48
   d4ab2:	f001 fae4 	bl	d607e <_ZN6StringD1Ev>
    String nextStation = train.key("nextStaNm").valueString();
   d4ab6:	a80e      	add	r0, sp, #56	; 0x38
   d4ab8:	f001 fae1 	bl	d607e <_ZN6StringD1Ev>
    JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   d4abc:	a805      	add	r0, sp, #20
    count++;
   d4abe:	f10a 0a01 	add.w	sl, sl, #1
    JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   d4ac2:	f000 fa97 	bl	d4ff4 <_ZN13JsonReferenceD1Ev>
   d4ac6:	e74b      	b.n	d4960 <loop+0x50>
    }else if(lat > 41.89950 && lon < -87.628176 && lat < 41.910655){
   d4ac8:	a339      	add	r3, pc, #228	; (adr r3, d4bb0 <loop+0x2a0>)
   d4aca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ace:	4630      	mov	r0, r6
   d4ad0:	4639      	mov	r1, r7
   d4ad2:	f004 fa19 	bl	d8f08 <__aeabi_dcmpgt>
   d4ad6:	b358      	cbz	r0, d4b30 <loop+0x220>
   d4ad8:	4640      	mov	r0, r8
   d4ada:	f003 ff2d 	bl	d8938 <__aeabi_f2d>
   d4ade:	a33a      	add	r3, pc, #232	; (adr r3, d4bc8 <loop+0x2b8>)
   d4ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ae4:	4680      	mov	r8, r0
   d4ae6:	4689      	mov	r9, r1
   d4ae8:	f004 f9f0 	bl	d8ecc <__aeabi_dcmplt>
   d4aec:	b300      	cbz	r0, d4b30 <loop+0x220>
   d4aee:	a338      	add	r3, pc, #224	; (adr r3, d4bd0 <loop+0x2c0>)
   d4af0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4af4:	4630      	mov	r0, r6
   d4af6:	4639      	mov	r1, r7
   d4af8:	f004 f9e8 	bl	d8ecc <__aeabi_dcmplt>
   d4afc:	b1c0      	cbz	r0, d4b30 <loop+0x220>
      pos = (int) (RED_LINE_HORIZONTAL * (lon - -87.628176) / (-87.649177 - -87.628176) + 0.5) + RED_LINE_VERTICAL;
   d4afe:	a336      	add	r3, pc, #216	; (adr r3, d4bd8 <loop+0x2c8>)
   d4b00:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b04:	4640      	mov	r0, r8
   d4b06:	4649      	mov	r1, r9
   d4b08:	f003 fdb8 	bl	d867c <__adddf3>
   d4b0c:	4b48      	ldr	r3, [pc, #288]	; (d4c30 <loop+0x320>)
   d4b0e:	2200      	movs	r2, #0
   d4b10:	f003 ff6a 	bl	d89e8 <__aeabi_dmul>
   d4b14:	a332      	add	r3, pc, #200	; (adr r3, d4be0 <loop+0x2d0>)
   d4b16:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b1a:	f004 f88f 	bl	d8c3c <__aeabi_ddiv>
   d4b1e:	4b41      	ldr	r3, [pc, #260]	; (d4c24 <loop+0x314>)
   d4b20:	2200      	movs	r2, #0
   d4b22:	f003 fdab 	bl	d867c <__adddf3>
   d4b26:	f004 f9f9 	bl	d8f1c <__aeabi_d2iz>
   d4b2a:	f100 0437 	add.w	r4, r0, #55	; 0x37
   d4b2e:	e7b2      	b.n	d4a96 <loop+0x186>
   d4b30:	4606      	mov	r6, r0
   d4b32:	e7b1      	b.n	d4a98 <loop+0x188>
   d4b34:	493f      	ldr	r1, [pc, #252]	; (d4c34 <loop+0x324>)
   d4b36:	a812      	add	r0, sp, #72	; 0x48
   d4b38:	f001 fb59 	bl	d61ee <_ZNK6String6equalsEPKc>
    }else if(trainDir == "5" && validTrain){
   d4b3c:	2800      	cmp	r0, #0
   d4b3e:	d0b7      	beq.n	d4ab0 <loop+0x1a0>
   d4b40:	2e00      	cmp	r6, #0
   d4b42:	d0b5      	beq.n	d4ab0 <loop+0x1a0>
      redLineOutput[pos] = 5;
   d4b44:	4b39      	ldr	r3, [pc, #228]	; (d4c2c <loop+0x31c>)
   d4b46:	2205      	movs	r2, #5
   d4b48:	e7b0      	b.n	d4aac <loop+0x19c>
    String trainDir = train.key("trDr").valueString();
   d4b4a:	a812      	add	r0, sp, #72	; 0x48
   d4b4c:	f001 fa97 	bl	d607e <_ZN6StringD1Ev>
    String nextStation = train.key("nextStaNm").valueString();
   d4b50:	a80e      	add	r0, sp, #56	; 0x38
   d4b52:	f001 fa94 	bl	d607e <_ZN6StringD1Ev>
    JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   d4b56:	a805      	add	r0, sp, #20
   d4b58:	f000 fa4c 	bl	d4ff4 <_ZN13JsonReferenceD1Ev>
  Wire.beginTransmission(addressArr[0]);
   d4b5c:	f003 fc42 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d4b60:	4b35      	ldr	r3, [pc, #212]	; (d4c38 <loop+0x328>)
   d4b62:	4d32      	ldr	r5, [pc, #200]	; (d4c2c <loop+0x31c>)
   d4b64:	6819      	ldr	r1, [r3, #0]
   d4b66:	f003 f815 	bl	d7b94 <_ZN7TwoWire17beginTransmissionEi>
   d4b6a:	2448      	movs	r4, #72	; 0x48
    switch(redLineOutput[i]){
   d4b6c:	f855 3b04 	ldr.w	r3, [r5], #4
   d4b70:	2b01      	cmp	r3, #1
   d4b72:	d015      	beq.n	d4ba0 <loop+0x290>
   d4b74:	2b05      	cmp	r3, #5
   d4b76:	d017      	beq.n	d4ba8 <loop+0x298>
   d4b78:	b923      	cbnz	r3, d4b84 <loop+0x274>
        Wire.write('0');
   d4b7a:	f003 fc33 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d4b7e:	2130      	movs	r1, #48	; 0x30
        Wire.write('5');
   d4b80:	f7ff faea 	bl	d4158 <_ZN7TwoWire5writeEi>
    redLineOutput[i] = 0;
   d4b84:	2300      	movs	r3, #0
  for(int i = 0; i < arraySize(redLineOutput); i++){
   d4b86:	3c01      	subs	r4, #1
    redLineOutput[i] = 0;
   d4b88:	f845 3c04 	str.w	r3, [r5, #-4]
  for(int i = 0; i < arraySize(redLineOutput); i++){
   d4b8c:	d1ee      	bne.n	d4b6c <loop+0x25c>
  Wire.endTransmission();
   d4b8e:	f003 fc29 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d4b92:	f003 f806 	bl	d7ba2 <_ZN7TwoWire15endTransmissionEv>
  delay(5000);
   d4b96:	f241 3088 	movw	r0, #5000	; 0x1388
   d4b9a:	f002 fd4b 	bl	d7634 <delay>
   d4b9e:	e6da      	b.n	d4956 <loop+0x46>
        Wire.write('1');
   d4ba0:	f003 fc20 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d4ba4:	2131      	movs	r1, #49	; 0x31
   d4ba6:	e7eb      	b.n	d4b80 <loop+0x270>
        Wire.write('5');
   d4ba8:	f003 fc1c 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d4bac:	2135      	movs	r1, #53	; 0x35
   d4bae:	e7e7      	b.n	d4b80 <loop+0x270>
   d4bb0:	d0e56042 	.word	0xd0e56042
   d4bb4:	4044f322 	.word	0x4044f322
   d4bb8:	daad6020 	.word	0xdaad6020
   d4bbc:	4044ed35 	.word	0x4044ed35
   d4bc0:	e0008800 	.word	0xe0008800
   d4bc4:	3fa7b3d8 	.word	0x3fa7b3d8
   d4bc8:	091c0874 	.word	0x091c0874
   d4bcc:	c055e834 	.word	0xc055e834
   d4bd0:	57d1782d 	.word	0x57d1782d
   d4bd4:	4044f490 	.word	0x4044f490
   d4bd8:	091c0874 	.word	0x091c0874
   d4bdc:	4055e834 	.word	0x4055e834
   d4be0:	40bbb000 	.word	0x40bbb000
   d4be4:	bf958149 	.word	0xbf958149
   d4be8:	2003e5f8 	.word	0x2003e5f8
   d4bec:	000db1d2 	.word	0x000db1d2
   d4bf0:	2003e5ac 	.word	0x2003e5ac
   d4bf4:	20035614 	.word	0x20035614
   d4bf8:	200353e4 	.word	0x200353e4
   d4bfc:	20037e30 	.word	0x20037e30
   d4c00:	000db1d6 	.word	0x000db1d6
   d4c04:	000db1e5 	.word	0x000db1e5
   d4c08:	000db1eb 	.word	0x000db1eb
   d4c0c:	000db1f1 	.word	0x000db1f1
   d4c10:	000db1f7 	.word	0x000db1f7
   d4c14:	000db201 	.word	0x000db201
   d4c18:	000db206 	.word	0x000db206
   d4c1c:	000db20a 	.word	0x000db20a
   d4c20:	404b8000 	.word	0x404b8000
   d4c24:	3fe00000 	.word	0x3fe00000
   d4c28:	000db20e 	.word	0x000db20e
   d4c2c:	2003e3ec 	.word	0x2003e3ec
   d4c30:	40310000 	.word	0x40310000
   d4c34:	000db210 	.word	0x000db210
   d4c38:	2003560c 	.word	0x2003560c

000d4c3c <_ZN16Adafruit_DotStar10sw_spi_endEv>:
  pinMode(clockPin, OUTPUT);
  pinSet(dataPin , LOW);
  pinSet(clockPin, LOW);
}

void Adafruit_DotStar::sw_spi_end() { // Stop 'soft' SPI
   d4c3c:	b510      	push	{r4, lr}
   d4c3e:	4604      	mov	r4, r0
  pinMode(dataPin , INPUT);
   d4c40:	2100      	movs	r1, #0
   d4c42:	7880      	ldrb	r0, [r0, #2]
   d4c44:	f003 fbbc 	bl	d83c0 <pinMode>
  pinMode(clockPin, INPUT);
   d4c48:	78e0      	ldrb	r0, [r4, #3]
   d4c4a:	2100      	movs	r1, #0
}
   d4c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pinMode(clockPin, INPUT);
   d4c50:	f003 bbb6 	b.w	d83c0 <pinMode>

000d4c54 <_ZN16Adafruit_DotStar5clearEv>:

  //__enable_irq();
}

void Adafruit_DotStar::clear() { // Write 0s (off) to full pixel buffer
  memset(pixels, 0, numLEDs * 3);
   d4c54:	8802      	ldrh	r2, [r0, #0]
   d4c56:	6880      	ldr	r0, [r0, #8]
   d4c58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d4c5c:	2100      	movs	r1, #0
   d4c5e:	f004 ba5f 	b.w	d9120 <memset>

000d4c62 <_ZN16Adafruit_DotStar12updateLengthEt>:
void Adafruit_DotStar::updateLength(uint16_t n) {
   d4c62:	b538      	push	{r3, r4, r5, lr}
   d4c64:	4604      	mov	r4, r0
  if(pixels) free(pixels);
   d4c66:	6880      	ldr	r0, [r0, #8]
void Adafruit_DotStar::updateLength(uint16_t n) {
   d4c68:	460d      	mov	r5, r1
  if(pixels) free(pixels);
   d4c6a:	b108      	cbz	r0, d4c70 <_ZN16Adafruit_DotStar12updateLengthEt+0xe>
   d4c6c:	f001 f8e4 	bl	d5e38 <free>
  uint16_t bytes = n * 3;
   d4c70:	eb05 0045 	add.w	r0, r5, r5, lsl #1
  if((pixels = (uint8_t *)malloc(bytes))) {
   d4c74:	b280      	uxth	r0, r0
   d4c76:	f001 f8d7 	bl	d5e28 <malloc>
   d4c7a:	60a0      	str	r0, [r4, #8]
   d4c7c:	b128      	cbz	r0, d4c8a <_ZN16Adafruit_DotStar12updateLengthEt+0x28>
    numLEDs = n;
   d4c7e:	8025      	strh	r5, [r4, #0]
    clear();
   d4c80:	4620      	mov	r0, r4
}
   d4c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    clear();
   d4c86:	f7ff bfe5 	b.w	d4c54 <_ZN16Adafruit_DotStar5clearEv>
    numLEDs = 0;
   d4c8a:	8020      	strh	r0, [r4, #0]
}
   d4c8c:	bd38      	pop	{r3, r4, r5, pc}

000d4c8e <_ZN16Adafruit_DotStarC1Eth>:
Adafruit_DotStar::Adafruit_DotStar(uint16_t n, uint8_t o) :
   d4c8e:	b510      	push	{r4, lr}
 rOffset(o & 3), gOffset((o >> 2) & 3), bOffset((o >> 4) & 3)
   d4c90:	23ff      	movs	r3, #255	; 0xff
   d4c92:	7083      	strb	r3, [r0, #2]
   d4c94:	2300      	movs	r3, #0
   d4c96:	7103      	strb	r3, [r0, #4]
   d4c98:	6083      	str	r3, [r0, #8]
   d4c9a:	f002 0303 	and.w	r3, r2, #3
   d4c9e:	7303      	strb	r3, [r0, #12]
   d4ca0:	f3c2 0381 	ubfx	r3, r2, #2, #2
   d4ca4:	f3c2 1201 	ubfx	r2, r2, #4, #2
Adafruit_DotStar::Adafruit_DotStar(uint16_t n, uint8_t o) :
   d4ca8:	4604      	mov	r4, r0
 rOffset(o & 3), gOffset((o >> 2) & 3), bOffset((o >> 4) & 3)
   d4caa:	8001      	strh	r1, [r0, #0]
   d4cac:	7343      	strb	r3, [r0, #13]
   d4cae:	7382      	strb	r2, [r0, #14]
  updateLength(n);
   d4cb0:	f7ff ffd7 	bl	d4c62 <_ZN16Adafruit_DotStar12updateLengthEt>
}
   d4cb4:	4620      	mov	r0, r4
   d4cb6:	bd10      	pop	{r4, pc}

000d4cb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4cb8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4cba:	4c0b      	ldr	r4, [pc, #44]	; (d4ce8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4cbc:	7821      	ldrb	r1, [r4, #0]
   d4cbe:	f3bf 8f5b 	dmb	ish
   d4cc2:	f011 0101 	ands.w	r1, r1, #1
   d4cc6:	d10b      	bne.n	d4ce0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4cc8:	4620      	mov	r0, r4
   d4cca:	9101      	str	r1, [sp, #4]
   d4ccc:	f7ff f9e9 	bl	d40a2 <__cxa_guard_acquire>
   d4cd0:	9901      	ldr	r1, [sp, #4]
   d4cd2:	b128      	cbz	r0, d4ce0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4cd4:	4805      	ldr	r0, [pc, #20]	; (d4cec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4cd6:	f001 f92b 	bl	d5f30 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4cda:	4620      	mov	r0, r4
   d4cdc:	f7ff f9e6 	bl	d40ac <__cxa_guard_release>
        return instance;
    }
   d4ce0:	4802      	ldr	r0, [pc, #8]	; (d4cec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4ce2:	b002      	add	sp, #8
   d4ce4:	bd10      	pop	{r4, pc}
   d4ce6:	bf00      	nop
   d4ce8:	2003e634 	.word	0x2003e634
   d4cec:	2003e638 	.word	0x2003e638

000d4cf0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE3endEv.isra.0>:
        instance().begin(ss_pin);
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
    }
    void end() {
   d4cf0:	b508      	push	{r3, lr}
        instance().end();
   d4cf2:	f7ff ffe1 	bl	d4cb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d4cf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().end();
   d4cfa:	f001 b923 	b.w	d5f44 <_ZN8SPIClass3endEv>

000d4cfe <_ZN16Adafruit_DotStarD1Ev>:
Adafruit_DotStar::~Adafruit_DotStar(void) { // Destructor
   d4cfe:	b510      	push	{r4, lr}
   d4d00:	4604      	mov	r4, r0
  if(pixels)                free(pixels);
   d4d02:	6880      	ldr	r0, [r0, #8]
   d4d04:	b108      	cbz	r0, d4d0a <_ZN16Adafruit_DotStarD1Ev+0xc>
   d4d06:	f001 f897 	bl	d5e38 <free>
  if(dataPin == USE_HW_SPI) hw_spi_end();
   d4d0a:	78a3      	ldrb	r3, [r4, #2]
   d4d0c:	2bff      	cmp	r3, #255	; 0xff
   d4d0e:	d103      	bne.n	d4d18 <_ZN16Adafruit_DotStarD1Ev+0x1a>
  SPI.end();
   d4d10:	f7ff ffee 	bl	d4cf0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE3endEv.isra.0>
}
   d4d14:	4620      	mov	r0, r4
   d4d16:	bd10      	pop	{r4, pc}
  else                      sw_spi_end();
   d4d18:	4620      	mov	r0, r4
   d4d1a:	f7ff ff8f 	bl	d4c3c <_ZN16Adafruit_DotStar10sw_spi_endEv>
   d4d1e:	e7f9      	b.n	d4d14 <_ZN16Adafruit_DotStarD1Ev+0x16>

000d4d20 <_GLOBAL__sub_I_PIN_MAP2>:
// Return pointer to the library's pixel data buffer.  Use carefully,
// much opportunity for mayhem.  It's mostly for code that needs fast
// transfers, e.g. SD card to LEDs.  Color data is in BGR order.
uint8_t *Adafruit_DotStar::getPixels(void) const {
  return pixels;
}
   d4d20:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d4d22:	f000 fddb 	bl	d58dc <HAL_Pin_Map>
   d4d26:	4b01      	ldr	r3, [pc, #4]	; (d4d2c <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   d4d28:	6018      	str	r0, [r3, #0]
}
   d4d2a:	bd08      	pop	{r3, pc}
   d4d2c:	2003e640 	.word	0x2003e640

000d4d30 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   d4d30:	b510      	push	{r4, lr}
   d4d32:	4604      	mov	r4, r0
   d4d34:	f003 f986 	bl	d8044 <_ZN9TCPClientC1Ev>
{

}
   d4d38:	4620      	mov	r0, r4
   d4d3a:	bd10      	pop	{r4, pc}

000d4d3c <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   d4d3c:	b538      	push	{r3, r4, r5, lr}
   d4d3e:	4604      	mov	r4, r0
   d4d40:	4615      	mov	r5, r2
    client.print(aHeaderName);
   d4d42:	f002 fc23 	bl	d758c <_ZN5Print5printEPKc>
    client.print(": ");
   d4d46:	4905      	ldr	r1, [pc, #20]	; (d4d5c <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   d4d48:	4620      	mov	r0, r4
   d4d4a:	f002 fc1f 	bl	d758c <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d4d4e:	4629      	mov	r1, r5
   d4d50:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d4d52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   d4d56:	f002 bc2c 	b.w	d75b2 <_ZN5Print7printlnEPKc>
   d4d5a:	bf00      	nop
   d4d5c:	000dafdd 	.word	0x000dafdd

000d4d60 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   d4d60:	b538      	push	{r3, r4, r5, lr}
   d4d62:	4605      	mov	r5, r0
   d4d64:	4614      	mov	r4, r2
    client.print(aHeaderName);
   d4d66:	f002 fc11 	bl	d758c <_ZN5Print5printEPKc>
    client.print(": ");
   d4d6a:	490b      	ldr	r1, [pc, #44]	; (d4d98 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   d4d6c:	4628      	mov	r0, r5
   d4d6e:	f002 fc0d 	bl	d758c <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   d4d72:	2c00      	cmp	r4, #0
   d4d74:	da0d      	bge.n	d4d92 <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   d4d76:	212d      	movs	r1, #45	; 0x2d
   d4d78:	4628      	mov	r0, r5
   d4d7a:	f002 fc0b 	bl	d7594 <_ZN5Print5printEc>
            val = -n;
   d4d7e:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d4d80:	4628      	mov	r0, r5
   d4d82:	220a      	movs	r2, #10
   d4d84:	f002 fc1f 	bl	d75c6 <_ZN5Print11printNumberEmh>
        n += println();
   d4d88:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d4d8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4d8e:	f002 bc04 	b.w	d759a <_ZN5Print7printlnEv>
            val = n;
   d4d92:	4621      	mov	r1, r4
   d4d94:	e7f4      	b.n	d4d80 <_ZN10HttpClient10sendHeaderEPKci+0x20>
   d4d96:	bf00      	nop
   d4d98:	000dafdd 	.word	0x000dafdd

000d4d9c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d4d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4da0:	460e      	mov	r6, r1
   d4da2:	b091      	sub	sp, #68	; 0x44
   d4da4:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d4da6:	f04f 33ff 	mov.w	r3, #4294967295
   d4daa:	6013      	str	r3, [r2, #0]
{
   d4dac:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4dae:	2100      	movs	r1, #0
   d4db0:	4630      	mov	r0, r6
   d4db2:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   d4db6:	4617      	mov	r7, r2
   d4db8:	f001 fa19 	bl	d61ee <_ZNK6String6equalsEPKc>
   d4dbc:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   d4dc0:	4603      	mov	r3, r0
   d4dc2:	b998      	cbnz	r0, d4dec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	const char * c_str() const { return buffer; }
   d4dc4:	f1be 0f00 	cmp.w	lr, #0
   d4dc8:	bf14      	ite	ne
   d4dca:	4672      	movne	r2, lr
   d4dcc:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   d4dce:	6831      	ldr	r1, [r6, #0]
   d4dd0:	b292      	uxth	r2, r2
   d4dd2:	4620      	mov	r0, r4
   d4dd4:	f003 f94a 	bl	d806c <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   d4dd8:	1e05      	subs	r5, r0, #0
   d4dda:	bf18      	it	ne
   d4ddc:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   d4dde:	b9c5      	cbnz	r5, d4e12 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   d4de0:	4620      	mov	r0, r4
   d4de2:	f003 f8e5 	bl	d7fb0 <_ZN9TCPClient4stopEv>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   d4de6:	b011      	add	sp, #68	; 0x44
   d4de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4dec:	4b77      	ldr	r3, [pc, #476]	; (d4fcc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   d4dee:	930a      	str	r3, [sp, #40]	; 0x28
   d4df0:	f106 0c14 	add.w	ip, r6, #20
   d4df4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d4df8:	ad0b      	add	r5, sp, #44	; 0x2c
   d4dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4dfc:	f8dc 3000 	ldr.w	r3, [ip]
   d4e00:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   d4e02:	fa1f f28e 	uxth.w	r2, lr
   d4e06:	2300      	movs	r3, #0
   d4e08:	a90a      	add	r1, sp, #40	; 0x28
   d4e0a:	4620      	mov	r0, r4
   d4e0c:	f002 fffb 	bl	d7e06 <_ZN9TCPClient7connectE9IPAddresstm>
   d4e10:	e7e2      	b.n	d4dd8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   d4e12:	4649      	mov	r1, r9
   d4e14:	4620      	mov	r0, r4
   d4e16:	f002 fbb9 	bl	d758c <_ZN5Print5printEPKc>
    client.print(" ");
   d4e1a:	496d      	ldr	r1, [pc, #436]	; (d4fd0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   d4e1c:	4620      	mov	r0, r4
   d4e1e:	f002 fbb5 	bl	d758c <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   d4e22:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   d4e24:	4620      	mov	r0, r4
   d4e26:	f002 fbb1 	bl	d758c <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   d4e2a:	496a      	ldr	r1, [pc, #424]	; (d4fd4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   d4e2c:	4620      	mov	r0, r4
   d4e2e:	f002 fbad 	bl	d758c <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   d4e32:	4969      	ldr	r1, [pc, #420]	; (d4fd8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   d4e34:	4a69      	ldr	r2, [pc, #420]	; (d4fdc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   d4e36:	4620      	mov	r0, r4
   d4e38:	f7ff ff80 	bl	d4d3c <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4e3c:	2100      	movs	r1, #0
   d4e3e:	4630      	mov	r0, r6
   d4e40:	f001 f9d5 	bl	d61ee <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   d4e44:	b920      	cbnz	r0, d4e50 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   d4e46:	6832      	ldr	r2, [r6, #0]
   d4e48:	4965      	ldr	r1, [pc, #404]	; (d4fe0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   d4e4a:	4620      	mov	r0, r4
   d4e4c:	f7ff ff76 	bl	d4d3c <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   d4e50:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   d4e54:	2100      	movs	r1, #0
   d4e56:	4650      	mov	r0, sl
   d4e58:	f001 f9c9 	bl	d61ee <_ZNK6String6equalsEPKc>
   d4e5c:	b928      	cbnz	r0, d4e6a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   d4e5e:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   d4e60:	4960      	ldr	r1, [pc, #384]	; (d4fe4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   d4e62:	4620      	mov	r0, r4
   d4e64:	f7ff ff7c 	bl	d4d60 <_ZN10HttpClient10sendHeaderEPKci>
   d4e68:	e006      	b.n	d4e78 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   d4e6a:	495f      	ldr	r1, [pc, #380]	; (d4fe8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   d4e6c:	4648      	mov	r0, r9
   d4e6e:	f004 f983 	bl	d9178 <strcmp>
   d4e72:	4602      	mov	r2, r0
   d4e74:	2800      	cmp	r0, #0
   d4e76:	d0f3      	beq.n	d4e60 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   d4e78:	f1b8 0f00 	cmp.w	r8, #0
   d4e7c:	d00e      	beq.n	d4e9c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   d4e7e:	f8d8 1000 	ldr.w	r1, [r8]
   d4e82:	b159      	cbz	r1, d4e9c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   d4e84:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   d4e88:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   d4e8a:	b122      	cbz	r2, d4e96 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   d4e8c:	f7ff ff56 	bl	d4d3c <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   d4e90:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   d4e94:	e7f3      	b.n	d4e7e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   d4e96:	f002 fb8c 	bl	d75b2 <_ZN5Print7printlnEPKc>
}
   d4e9a:	e7f9      	b.n	d4e90 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   d4e9c:	4620      	mov	r0, r4
   d4e9e:	f002 fb7c 	bl	d759a <_ZN5Print7printlnEv>
    client.flush();
   d4ea2:	4620      	mov	r0, r4
   d4ea4:	f002 fea2 	bl	d7bec <_ZN9TCPClient5flushEv>
   d4ea8:	2100      	movs	r1, #0
   d4eaa:	4650      	mov	r0, sl
   d4eac:	f001 f99f 	bl	d61ee <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   d4eb0:	b918      	cbnz	r0, d4eba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   d4eb2:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   d4eb4:	4620      	mov	r0, r4
   d4eb6:	f002 fb7c 	bl	d75b2 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   d4eba:	f104 0b1c 	add.w	fp, r4, #28
   d4ebe:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   d4ec2:	2100      	movs	r1, #0
   d4ec4:	4658      	mov	r0, fp
   d4ec6:	f004 f92b 	bl	d9120 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4eca:	f000 fd2f 	bl	d592c <HAL_Timer_Get_Milli_Seconds>
   d4ece:	9001      	str	r0, [sp, #4]
   d4ed0:	f000 fd2c 	bl	d592c <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   d4ed4:	f04f 0800 	mov.w	r8, #0
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d4ed8:	f504 5a20 	add.w	sl, r4, #10240	; 0x2800
    unsigned int bufferPosition = 0;
   d4edc:	4646      	mov	r6, r8
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d4ede:	f10a 0a1b 	add.w	sl, sl, #27
        while (client.available()) {
   d4ee2:	4620      	mov	r0, r4
   d4ee4:	f003 f80a 	bl	d7efc <_ZN9TCPClient9availableEv>
   d4ee8:	b1d8      	cbz	r0, d4f22 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   d4eea:	4620      	mov	r0, r4
   d4eec:	f002 ff3f 	bl	d7d6e <_ZN9TCPClient4readEv>
   d4ef0:	4681      	mov	r9, r0
   d4ef2:	f000 fd1b 	bl	d592c <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   d4ef6:	f242 73fe 	movw	r3, #10238	; 0x27fe
   d4efa:	429e      	cmp	r6, r3
   d4efc:	9001      	str	r0, [sp, #4]
   d4efe:	d804      	bhi.n	d4f0a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16e>
                buffer[bufferPosition] = c;
   d4f00:	19a3      	adds	r3, r4, r6
            char c = client.read();
   d4f02:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   d4f06:	3601      	adds	r6, #1
        while (client.available()) {
   d4f08:	e7eb      	b.n	d4ee2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x146>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   d4f0a:	f242 73ff 	movw	r3, #10239	; 0x27ff
   d4f0e:	429e      	cmp	r6, r3
   d4f10:	d1f9      	bne.n	d4f06 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d4f12:	2300      	movs	r3, #0
   d4f14:	f88a 3000 	strb.w	r3, [sl]
                client.stop();
   d4f18:	4620      	mov	r0, r4
   d4f1a:	f003 f849 	bl	d7fb0 <_ZN9TCPClient4stopEv>
                error = true;
   d4f1e:	46a8      	mov	r8, r5
   d4f20:	e7f1      	b.n	d4f06 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d4f22:	19a3      	adds	r3, r4, r6
   d4f24:	7718      	strb	r0, [r3, #28]
   d4f26:	f000 fd01 	bl	d592c <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   d4f2a:	9b01      	ldr	r3, [sp, #4]
   d4f2c:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   d4f30:	f1b8 0f00 	cmp.w	r8, #0
   d4f34:	d106      	bne.n	d4f44 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a8>
   d4f36:	f241 3388 	movw	r3, #5000	; 0x1388
   d4f3a:	4599      	cmp	r9, r3
   d4f3c:	d802      	bhi.n	d4f44 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a8>
            delay(200);
   d4f3e:	20c8      	movs	r0, #200	; 0xc8
   d4f40:	f002 fb78 	bl	d7634 <delay>
    } while (client.connected() && !timeout && !error);
   d4f44:	4620      	mov	r0, r4
   d4f46:	f002 fe52 	bl	d7bee <_ZN9TCPClient9connectedEv>
   d4f4a:	b130      	cbz	r0, d4f5a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1be>
   d4f4c:	f241 3388 	movw	r3, #5000	; 0x1388
   d4f50:	4599      	cmp	r9, r3
   d4f52:	d802      	bhi.n	d4f5a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1be>
   d4f54:	f1b8 0f00 	cmp.w	r8, #0
   d4f58:	d0c3      	beq.n	d4ee2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x146>
    client.stop();
   d4f5a:	4620      	mov	r0, r4
   d4f5c:	f003 f828 	bl	d7fb0 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   d4f60:	4659      	mov	r1, fp
   d4f62:	a802      	add	r0, sp, #8
   d4f64:	f001 f8d6 	bl	d6114 <_ZN6StringC1EPKc>
    String statusCode = raw_response.substring(9,12);
   d4f68:	230c      	movs	r3, #12
   d4f6a:	2209      	movs	r2, #9
   d4f6c:	a902      	add	r1, sp, #8
   d4f6e:	a806      	add	r0, sp, #24
   d4f70:	f001 f962 	bl	d6238 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   d4f74:	491d      	ldr	r1, [pc, #116]	; (d4fec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   d4f76:	a80a      	add	r0, sp, #40	; 0x28
   d4f78:	f001 f8cc 	bl	d6114 <_ZN6StringC1EPKc>
   d4f7c:	a90a      	add	r1, sp, #40	; 0x28
   d4f7e:	a802      	add	r0, sp, #8
   d4f80:	f001 f956 	bl	d6230 <_ZNK6String7indexOfERKS_>
   d4f84:	4604      	mov	r4, r0
   d4f86:	a80a      	add	r0, sp, #40	; 0x28
   d4f88:	f001 f879 	bl	d607e <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   d4f8c:	1c63      	adds	r3, r4, #1
   d4f8e:	d106      	bne.n	d4f9e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x202>
    String statusCode = raw_response.substring(9,12);
   d4f90:	a806      	add	r0, sp, #24
   d4f92:	f001 f874 	bl	d607e <_ZN6StringD1Ev>
    String raw_response(buffer);
   d4f96:	a802      	add	r0, sp, #8
   d4f98:	f001 f871 	bl	d607e <_ZN6StringD1Ev>
   d4f9c:	e723      	b.n	d4de6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x4a>
    aResponse.body = "";
   d4f9e:	1d3d      	adds	r5, r7, #4
   d4fa0:	4913      	ldr	r1, [pc, #76]	; (d4ff0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x254>)
   d4fa2:	4628      	mov	r0, r5
   d4fa4:	f001 f8ca 	bl	d613c <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   d4fa8:	1d22      	adds	r2, r4, #4
   d4faa:	a902      	add	r1, sp, #8
   d4fac:	a80a      	add	r0, sp, #40	; 0x28
   d4fae:	f001 f963 	bl	d6278 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4fb2:	a90a      	add	r1, sp, #40	; 0x28
   d4fb4:	4628      	mov	r0, r5
   d4fb6:	f001 f8fd 	bl	d61b4 <_ZN6String6concatERKS_>
   d4fba:	a80a      	add	r0, sp, #40	; 0x28
   d4fbc:	f001 f85f 	bl	d607e <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   d4fc0:	9806      	ldr	r0, [sp, #24]
   d4fc2:	f004 f864 	bl	d908e <atoi>
   d4fc6:	6038      	str	r0, [r7, #0]
   d4fc8:	e7e2      	b.n	d4f90 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1f4>
   d4fca:	bf00      	nop
   d4fcc:	000db484 	.word	0x000db484
   d4fd0:	000dafed 	.word	0x000dafed
   d4fd4:	000db22f 	.word	0x000db22f
   d4fd8:	000db241 	.word	0x000db241
   d4fdc:	000db23b 	.word	0x000db23b
   d4fe0:	000db24c 	.word	0x000db24c
   d4fe4:	000db251 	.word	0x000db251
   d4fe8:	000db260 	.word	0x000db260
   d4fec:	000db265 	.word	0x000db265
   d4ff0:	000db269 	.word	0x000db269

000d4ff4 <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   d4ff4:	4770      	bx	lr

000d4ff6 <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   d4ff6:	b510      	push	{r4, lr}
}
   d4ff8:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   d4ffa:	4604      	mov	r4, r0
}
   d4ffc:	f003 fa1f 	bl	d843e <_ZdlPvj>
   d5000:	4620      	mov	r0, r4
   d5002:	bd10      	pop	{r4, pc}

000d5004 <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   d5004:	b510      	push	{r4, lr}
   d5006:	4b05      	ldr	r3, [pc, #20]	; (d501c <_ZN10JsonBufferD1Ev+0x18>)
   d5008:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d500a:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   d500c:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d500e:	b91b      	cbnz	r3, d5018 <_ZN10JsonBufferD1Ev+0x14>
   d5010:	6840      	ldr	r0, [r0, #4]
   d5012:	b108      	cbz	r0, d5018 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d5014:	f000 ff10 	bl	d5e38 <free>
}
   d5018:	4620      	mov	r0, r4
   d501a:	bd10      	pop	{r4, pc}
   d501c:	000db278 	.word	0x000db278

000d5020 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   d5020:	b510      	push	{r4, lr}
   d5022:	4604      	mov	r4, r0
}
   d5024:	f7ff ffee 	bl	d5004 <_ZN10JsonBufferD1Ev>
   d5028:	4620      	mov	r0, r4
   d502a:	2114      	movs	r1, #20
   d502c:	f003 fa07 	bl	d843e <_ZdlPvj>
   d5030:	4620      	mov	r0, r4
   d5032:	bd10      	pop	{r4, pc}

000d5034 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   d5034:	b510      	push	{r4, lr}
   d5036:	4b07      	ldr	r3, [pc, #28]	; (d5054 <_ZN10JsonParserD1Ev+0x20>)
   d5038:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   d503a:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   d503c:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   d503e:	b91b      	cbnz	r3, d5048 <_ZN10JsonParserD1Ev+0x14>
   d5040:	6940      	ldr	r0, [r0, #20]
   d5042:	b108      	cbz	r0, d5048 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   d5044:	f000 fef8 	bl	d5e38 <free>
JsonParser::~JsonParser() {
   d5048:	4620      	mov	r0, r4
   d504a:	f7ff ffdb 	bl	d5004 <_ZN10JsonBufferD1Ev>
}
   d504e:	4620      	mov	r0, r4
   d5050:	bd10      	pop	{r4, pc}
   d5052:	bf00      	nop
   d5054:	000db288 	.word	0x000db288

000d5058 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   d5058:	b510      	push	{r4, lr}
   d505a:	4604      	mov	r4, r0
}
   d505c:	f7ff ffea 	bl	d5034 <_ZN10JsonParserD1Ev>
   d5060:	4620      	mov	r0, r4
   d5062:	212c      	movs	r1, #44	; 0x2c
   d5064:	f003 f9eb 	bl	d843e <_ZdlPvj>
   d5068:	4620      	mov	r0, r4
   d506a:	bd10      	pop	{r4, pc}

000d506c <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   d506c:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   d506e:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   d5070:	4604      	mov	r4, r0
   d5072:	460d      	mov	r5, r1
	if (!staticBuffers) {
   d5074:	b10b      	cbz	r3, d507a <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   d5076:	2000      	movs	r0, #0
}
   d5078:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   d507a:	6840      	ldr	r0, [r0, #4]
   d507c:	b138      	cbz	r0, d508e <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   d507e:	f000 fee3 	bl	d5e48 <realloc>
		if (newBuffer) {
   d5082:	2800      	cmp	r0, #0
   d5084:	d0f7      	beq.n	d5076 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   d5086:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   d508a:	2001      	movs	r0, #1
   d508c:	e7f4      	b.n	d5078 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   d508e:	4608      	mov	r0, r1
   d5090:	f000 feca 	bl	d5e28 <malloc>
   d5094:	e7f5      	b.n	d5082 <_ZN10JsonBuffer8allocateEj+0x16>

000d5096 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   d5096:	b570      	push	{r4, r5, r6, lr}
   d5098:	68c3      	ldr	r3, [r0, #12]
   d509a:	460e      	mov	r6, r1
   d509c:	18d1      	adds	r1, r2, r3
	if (!buffer || (offset + dataLen) > bufferLen) {
   d509e:	6843      	ldr	r3, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   d50a0:	4604      	mov	r4, r0
   d50a2:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   d50a4:	b173      	cbz	r3, d50c4 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   d50a6:	6883      	ldr	r3, [r0, #8]
   d50a8:	428b      	cmp	r3, r1
   d50aa:	d30b      	bcc.n	d50c4 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   d50ac:	6860      	ldr	r0, [r4, #4]
   d50ae:	68e3      	ldr	r3, [r4, #12]
   d50b0:	462a      	mov	r2, r5
   d50b2:	4631      	mov	r1, r6
   d50b4:	4418      	add	r0, r3
   d50b6:	f004 f80b 	bl	d90d0 <memcpy>
	offset += dataLen;
   d50ba:	68e2      	ldr	r2, [r4, #12]
   d50bc:	442a      	add	r2, r5
   d50be:	60e2      	str	r2, [r4, #12]
	return true;
   d50c0:	2001      	movs	r0, #1
}
   d50c2:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   d50c4:	4620      	mov	r0, r4
   d50c6:	f7ff ffd1 	bl	d506c <_ZN10JsonBuffer8allocateEj>
   d50ca:	2800      	cmp	r0, #0
   d50cc:	d1ee      	bne.n	d50ac <_ZN10JsonBuffer7addDataEPKcj+0x16>
   d50ce:	e7f8      	b.n	d50c2 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000d50d0 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   d50d0:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   d50d2:	2100      	movs	r1, #0
   d50d4:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   d50d6:	b123      	cbz	r3, d50e2 <_ZN10JsonBuffer5clearEv+0x12>
   d50d8:	6882      	ldr	r2, [r0, #8]
   d50da:	b112      	cbz	r2, d50e2 <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   d50dc:	4618      	mov	r0, r3
   d50de:	f004 b81f 	b.w	d9120 <memset>
}
   d50e2:	4770      	bx	lr

000d50e4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   d50e4:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d50e6:	e9c0 1201 	strd	r1, r2, [r0, #4]
   d50ea:	2200      	movs	r2, #0
   d50ec:	60c2      	str	r2, [r0, #12]
   d50ee:	2201      	movs	r2, #1
   d50f0:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   d50f2:	6143      	str	r3, [r0, #20]
   d50f4:	4a02      	ldr	r2, [pc, #8]	; (d5100 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   d50f6:	9b02      	ldr	r3, [sp, #8]
   d50f8:	6002      	str	r2, [r0, #0]
   d50fa:	61c3      	str	r3, [r0, #28]
}
   d50fc:	bd10      	pop	{r4, pc}
   d50fe:	bf00      	nop
   d5100:	000db288 	.word	0x000db288

000d5104 <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   d5104:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   d5108:	429a      	cmp	r2, r3
   d510a:	4b04      	ldr	r3, [pc, #16]	; (d511c <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   d510c:	bf38      	it	cc
   d510e:	6082      	strcc	r2, [r0, #8]
   d5110:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   d5114:	bf24      	itt	cs
   d5116:	2300      	movcs	r3, #0
   d5118:	6083      	strcs	r3, [r0, #8]
}
   d511a:	4770      	bx	lr
   d511c:	000db298 	.word	0x000db298

000d5120 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   d5120:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   d5122:	6813      	ldr	r3, [r2, #0]
   d5124:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   d5126:	6813      	ldr	r3, [r2, #0]
   d5128:	f103 0410 	add.w	r4, r3, #16
   d512c:	6014      	str	r4, [r2, #0]
   d512e:	6986      	ldr	r6, [r0, #24]
   d5130:	42b4      	cmp	r4, r6
   d5132:	d20a      	bcs.n	d514a <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   d5134:	699b      	ldr	r3, [r3, #24]
   d5136:	688c      	ldr	r4, [r1, #8]
   d5138:	42a3      	cmp	r3, r4
   d513a:	da01      	bge.n	d5140 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   d513c:	42ab      	cmp	r3, r5
   d513e:	ddf2      	ble.n	d5126 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   d5140:	42a3      	cmp	r3, r4
   d5142:	bfcc      	ite	gt
   d5144:	2000      	movgt	r0, #0
   d5146:	2001      	movle	r0, #1
   d5148:	e000      	b.n	d514c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   d514a:	2000      	movs	r0, #0
}
   d514c:	bd70      	pop	{r4, r5, r6, pc}

000d514e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d514e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5152:	9c08      	ldr	r4, [sp, #32]
   d5154:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d5156:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d515a:	4605      	mov	r5, r0
   d515c:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d515e:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   d5160:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   d5162:	9801      	ldr	r0, [sp, #4]
   d5164:	69ab      	ldr	r3, [r5, #24]
   d5166:	4283      	cmp	r3, r0
   d5168:	d91b      	bls.n	d51a2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x54>
   d516a:	6882      	ldr	r2, [r0, #8]
   d516c:	688b      	ldr	r3, [r1, #8]
   d516e:	429a      	cmp	r2, r3
   d5170:	da17      	bge.n	d51a2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x54>
		if (desiredIndex == index) {
   d5172:	42a6      	cmp	r6, r4
   d5174:	d10b      	bne.n	d518e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   d5176:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   d5178:	aa01      	add	r2, sp, #4
   d517a:	4628      	mov	r0, r5
   d517c:	f7ff ffd0 	bl	d5120 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   d5180:	b128      	cbz	r0, d518e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   d5182:	9b01      	ldr	r3, [sp, #4]
   d5184:	f8c8 3000 	str.w	r3, [r8]
}
   d5188:	b002      	add	sp, #8
   d518a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   d518e:	aa01      	add	r2, sp, #4
   d5190:	4628      	mov	r0, r5
   d5192:	f7ff ffc5 	bl	d5120 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   d5196:	aa01      	add	r2, sp, #4
   d5198:	4628      	mov	r0, r5
		index++;
   d519a:	3601      	adds	r6, #1
		skipObject(container, token);
   d519c:	f7ff ffc0 	bl	d5120 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   d51a0:	e7df      	b.n	d5162 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   d51a2:	2000      	movs	r0, #0
   d51a4:	e7f0      	b.n	d5188 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000d51a6 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d51a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d51a8:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d51aa:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d51ae:	4604      	mov	r4, r0
   d51b0:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d51b2:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   d51b4:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   d51b6:	9b01      	ldr	r3, [sp, #4]
   d51b8:	69a2      	ldr	r2, [r4, #24]
   d51ba:	429a      	cmp	r2, r3
   d51bc:	d90f      	bls.n	d51de <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   d51be:	6898      	ldr	r0, [r3, #8]
   d51c0:	688a      	ldr	r2, [r1, #8]
   d51c2:	4290      	cmp	r0, r2
   d51c4:	da0b      	bge.n	d51de <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   d51c6:	42b5      	cmp	r5, r6
   d51c8:	d103      	bne.n	d51d2 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   d51ca:	603b      	str	r3, [r7, #0]
			return true;
   d51cc:	2001      	movs	r0, #1
}
   d51ce:	b003      	add	sp, #12
   d51d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   d51d2:	aa01      	add	r2, sp, #4
   d51d4:	4620      	mov	r0, r4
		index++;
   d51d6:	3501      	adds	r5, #1
		skipObject(container, token);
   d51d8:	f7ff ffa2 	bl	d5120 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   d51dc:	e7eb      	b.n	d51b6 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   d51de:	2000      	movs	r0, #0
   d51e0:	e7f5      	b.n	d51ce <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>
	...

000d51e4 <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   d51e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d51e6:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   d51e8:	6889      	ldr	r1, [r1, #8]
   d51ea:	4e0a      	ldr	r6, [pc, #40]	; (d5214 <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   d51ec:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   d51ee:	b161      	cbz	r1, d520a <_ZNK13JsonReference5indexEj+0x26>
   d51f0:	6868      	ldr	r0, [r5, #4]
   d51f2:	ab01      	add	r3, sp, #4
   d51f4:	f7ff ffd7 	bl	d51a6 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   d51f8:	b138      	cbz	r0, d520a <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   d51fa:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   d51fc:	e9c4 6300 	strd	r6, r3, [r4]
   d5200:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   d5202:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   d5204:	4620      	mov	r0, r4
   d5206:	b002      	add	sp, #8
   d5208:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   d520a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   d520c:	e9c4 6300 	strd	r6, r3, [r4]
   d5210:	2300      	movs	r3, #0
   d5212:	e7f6      	b.n	d5202 <_ZNK13JsonReference5indexEj+0x1e>
   d5214:	000db298 	.word	0x000db298

000d5218 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   d5218:	b510      	push	{r4, lr}
   d521a:	4604      	mov	r4, r0
	if (str) {
   d521c:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   d521e:	460b      	mov	r3, r1
	if (str) {
   d5220:	b128      	cbz	r0, d522e <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   d5222:	f000 ffcb 	bl	d61bc <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   d5226:	68e3      	ldr	r3, [r4, #12]
   d5228:	3301      	adds	r3, #1
   d522a:	60e3      	str	r3, [r4, #12]
	}
}
   d522c:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   d522e:	6860      	ldr	r0, [r4, #4]
   d5230:	2800      	cmp	r0, #0
   d5232:	d0f8      	beq.n	d5226 <_ZN16JsonParserString6appendEc+0xe>
   d5234:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   d5238:	3a01      	subs	r2, #1
   d523a:	428a      	cmp	r2, r1
			buf[length] = ch;
   d523c:	bf88      	it	hi
   d523e:	5443      	strbhi	r3, [r0, r1]
   d5240:	e7f1      	b.n	d5226 <_ZN16JsonParserString6appendEc+0xe>

000d5242 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   d5242:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   d5244:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   d5246:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5248:	4608      	mov	r0, r1
   d524a:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   d524c:	d804      	bhi.n	d5258 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   d524e:	b003      	add	sp, #12
   d5250:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   d5254:	f7ff bfe0 	b.w	d5218 <_ZN16JsonParserString6appendEc>
	if (unicode <= 0x7ff) {
   d5258:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d525c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   d5260:	f343 1587 	sbfx	r5, r3, #6, #8
   d5264:	f041 0480 	orr.w	r4, r1, #128	; 0x80
   d5268:	d208      	bcs.n	d527c <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x3a>
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   d526a:	f065 013f 	orn	r1, r5, #63	; 0x3f
		str.append((char)value);
   d526e:	b2c9      	uxtb	r1, r1
   d5270:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   d5272:	f7ff ffd1 	bl	d5218 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   d5276:	9801      	ldr	r0, [sp, #4]
   d5278:	4621      	mov	r1, r4
   d527a:	e7e8      	b.n	d524e <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   d527c:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   d527e:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   d5282:	9001      	str	r0, [sp, #4]
   d5284:	f7ff ffc8 	bl	d5218 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   d5288:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   d528c:	9801      	ldr	r0, [sp, #4]
   d528e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   d5292:	e7ee      	b.n	d5272 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x30>

000d5294 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   d5294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   d5298:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   d529a:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   d529c:	f8df a0cc 	ldr.w	sl, [pc, #204]	; d536c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   d52a0:	4680      	mov	r8, r0
   d52a2:	460f      	mov	r7, r1
   d52a4:	4615      	mov	r5, r2
			escape = false;
   d52a6:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   d52a8:	68b8      	ldr	r0, [r7, #8]
   d52aa:	42b0      	cmp	r0, r6
   d52ac:	dd5a      	ble.n	d5364 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
		if (escape) {
   d52ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d52b2:	5d99      	ldrb	r1, [r3, r6]
   d52b4:	199a      	adds	r2, r3, r6
   d52b6:	2c00      	cmp	r4, #0
   d52b8:	d04b      	beq.n	d5352 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   d52ba:	2975      	cmp	r1, #117	; 0x75
   d52bc:	d805      	bhi.n	d52ca <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   d52be:	296d      	cmp	r1, #109	; 0x6d
   d52c0:	d807      	bhi.n	d52d2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   d52c2:	2962      	cmp	r1, #98	; 0x62
   d52c4:	d01e      	beq.n	d5304 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   d52c6:	2966      	cmp	r1, #102	; 0x66
   d52c8:	d01e      	beq.n	d5308 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   d52ca:	4628      	mov	r0, r5
   d52cc:	f7ff ffa4 	bl	d5218 <_ZN16JsonParserString6appendEc>
				break;
   d52d0:	e03d      	b.n	d534e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   d52d2:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   d52d6:	2c07      	cmp	r4, #7
   d52d8:	d8f7      	bhi.n	d52ca <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   d52da:	f20f 0c08 	addw	ip, pc, #8
   d52de:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   d52e2:	bf00      	nop
   d52e4:	000d530d 	.word	0x000d530d
   d52e8:	000d52cb 	.word	0x000d52cb
   d52ec:	000d52cb 	.word	0x000d52cb
   d52f0:	000d52cb 	.word	0x000d52cb
   d52f4:	000d5311 	.word	0x000d5311
   d52f8:	000d52cb 	.word	0x000d52cb
   d52fc:	000d5315 	.word	0x000d5315
   d5300:	000d5319 	.word	0x000d5319
				str.append('\b');
   d5304:	2108      	movs	r1, #8
   d5306:	e7e0      	b.n	d52ca <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   d5308:	210c      	movs	r1, #12
   d530a:	e7de      	b.n	d52ca <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   d530c:	210a      	movs	r1, #10
   d530e:	e7dc      	b.n	d52ca <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   d5310:	210d      	movs	r1, #13
   d5312:	e7da      	b.n	d52ca <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   d5314:	2109      	movs	r1, #9
   d5316:	e7d8      	b.n	d52ca <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   d5318:	1d31      	adds	r1, r6, #4
   d531a:	4288      	cmp	r0, r1
   d531c:	dd17      	ble.n	d534e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   d531e:	a902      	add	r1, sp, #8
   d5320:	3304      	adds	r3, #4
   d5322:	4433      	add	r3, r6
   d5324:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   d5326:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   d532a:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   d532e:	429a      	cmp	r2, r3
   d5330:	d1f9      	bne.n	d5326 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   d5332:	aa01      	add	r2, sp, #4
   d5334:	4651      	mov	r1, sl
					tmp[4] = 0;
   d5336:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   d533a:	f000 fd8d 	bl	d5e58 <sscanf>
   d533e:	2801      	cmp	r0, #1
   d5340:	d105      	bne.n	d534e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   d5342:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d5346:	4629      	mov	r1, r5
   d5348:	f7ff ff7b 	bl	d5242 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   d534c:	3605      	adds	r6, #5
			escape = false;
   d534e:	2400      	movs	r4, #0
   d5350:	e004      	b.n	d535c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   d5352:	295c      	cmp	r1, #92	; 0x5c
   d5354:	d004      	beq.n	d5360 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   d5356:	4628      	mov	r0, r5
   d5358:	f7ff ff5e 	bl	d5218 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   d535c:	3601      	adds	r6, #1
   d535e:	e7a3      	b.n	d52a8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   d5360:	2401      	movs	r4, #1
   d5362:	e7fb      	b.n	d535c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   d5364:	2001      	movs	r0, #1
   d5366:	b004      	add	sp, #16
   d5368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d536c:	000db26a 	.word	0x000db26a

000d5370 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   d5370:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5372:	460c      	mov	r4, r1
   d5374:	4606      	mov	r6, r0
	result = "";
   d5376:	490c      	ldr	r1, [pc, #48]	; (d53a8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   d5378:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   d537a:	4615      	mov	r5, r2
	result = "";
   d537c:	f000 fede 	bl	d613c <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   d5380:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   d5384:	1ac9      	subs	r1, r1, r3
   d5386:	3101      	adds	r1, #1
   d5388:	4628      	mov	r0, r5
   d538a:	f000 fe96 	bl	d60ba <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   d538e:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   d5390:	466a      	mov	r2, sp
   d5392:	4621      	mov	r1, r4
   d5394:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   d5396:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d539a:	9500      	str	r5, [sp, #0]
   d539c:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   d539e:	f7ff ff79 	bl	d5294 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   d53a2:	b004      	add	sp, #16
   d53a4:	bd70      	pop	{r4, r5, r6, pc}
   d53a6:	bf00      	nop
   d53a8:	000db269 	.word	0x000db269

000d53ac <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d53ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d53b0:	b089      	sub	sp, #36	; 0x24
   d53b2:	4605      	mov	r5, r0
   d53b4:	4688      	mov	r8, r1
	String keyName;
   d53b6:	a804      	add	r0, sp, #16
   d53b8:	4912      	ldr	r1, [pc, #72]	; (d5404 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d53ba:	4616      	mov	r6, r2
   d53bc:	4699      	mov	r9, r3
	String keyName;
   d53be:	f000 fea9 	bl	d6114 <_ZN6StringC1EPKc>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   d53c2:	2700      	movs	r7, #0
   d53c4:	9700      	str	r7, [sp, #0]
   d53c6:	464b      	mov	r3, r9
   d53c8:	aa03      	add	r2, sp, #12
   d53ca:	4641      	mov	r1, r8
   d53cc:	4628      	mov	r0, r5
   d53ce:	f7ff febe 	bl	d514e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   d53d2:	4604      	mov	r4, r0
   d53d4:	b170      	cbz	r0, d53f4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   d53d6:	9903      	ldr	r1, [sp, #12]
   d53d8:	aa04      	add	r2, sp, #16
   d53da:	4628      	mov	r0, r5
   d53dc:	f7ff ffc8 	bl	d5370 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   d53e0:	4604      	mov	r4, r0
   d53e2:	b908      	cbnz	r0, d53e8 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   d53e4:	3701      	adds	r7, #1
   d53e6:	e7ed      	b.n	d53c4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d53e8:	4631      	mov	r1, r6
   d53ea:	a804      	add	r0, sp, #16
   d53ec:	f000 feff 	bl	d61ee <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   d53f0:	2800      	cmp	r0, #0
   d53f2:	d0f7      	beq.n	d53e4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   d53f4:	a804      	add	r0, sp, #16
   d53f6:	f000 fe42 	bl	d607e <_ZN6StringD1Ev>
}
   d53fa:	4620      	mov	r0, r4
   d53fc:	b009      	add	sp, #36	; 0x24
   d53fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5402:	bf00      	nop
   d5404:	000db269 	.word	0x000db269

000d5408 <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   d5408:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d540a:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   d540c:	6889      	ldr	r1, [r1, #8]
   d540e:	4e0a      	ldr	r6, [pc, #40]	; (d5438 <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   d5410:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   d5412:	b161      	cbz	r1, d542e <_ZNK13JsonReference3keyEPKc+0x26>
   d5414:	6868      	ldr	r0, [r5, #4]
   d5416:	ab01      	add	r3, sp, #4
   d5418:	f7ff ffc8 	bl	d53ac <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   d541c:	b138      	cbz	r0, d542e <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   d541e:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   d5420:	e9c4 6300 	strd	r6, r3, [r4]
   d5424:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   d5426:	60a3      	str	r3, [r4, #8]
}
   d5428:	4620      	mov	r0, r4
   d542a:	b002      	add	sp, #8
   d542c:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   d542e:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   d5430:	e9c4 6300 	strd	r6, r3, [r4]
   d5434:	2300      	movs	r3, #0
   d5436:	e7f6      	b.n	d5426 <_ZNK13JsonReference3keyEPKc+0x1e>
   d5438:	000db298 	.word	0x000db298

000d543c <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   d543c:	b538      	push	{r3, r4, r5, lr}
   d543e:	460d      	mov	r5, r1
	String result;
   d5440:	4905      	ldr	r1, [pc, #20]	; (d5458 <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   d5442:	4604      	mov	r4, r0
	String result;
   d5444:	f000 fe66 	bl	d6114 <_ZN6StringC1EPKc>
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   d5448:	68a9      	ldr	r1, [r5, #8]
   d544a:	b119      	cbz	r1, d5454 <_ZNK13JsonReference11valueStringEv+0x18>
   d544c:	6868      	ldr	r0, [r5, #4]
   d544e:	4622      	mov	r2, r4
   d5450:	f7ff ff8e 	bl	d5370 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   d5454:	4620      	mov	r0, r4
   d5456:	bd38      	pop	{r3, r4, r5, pc}
   d5458:	000db269 	.word	0x000db269

000d545c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   d545c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   d5460:	6844      	ldr	r4, [r0, #4]
   d5462:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   d5466:	f04f 35ff 	mov.w	r5, #4294967295

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d546a:	f8d0 e000 	ldr.w	lr, [r0]
   d546e:	4596      	cmp	lr, r2
   d5470:	f080 81c1 	bcs.w	d57f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x39a>
   d5474:	f811 800e 	ldrb.w	r8, [r1, lr]
   d5478:	f1b8 0f00 	cmp.w	r8, #0
   d547c:	f000 81bb 	beq.w	d57f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x39a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   d5480:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   d5484:	f000 809b 	beq.w	d55be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   d5488:	d833      	bhi.n	d54f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   d548a:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   d548e:	f000 80ad 	beq.w	d55ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x190>
   d5492:	d810      	bhi.n	d54b6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   d5494:	f1a8 0809 	sub.w	r8, r8, #9
   d5498:	fa5f f888 	uxtb.w	r8, r8
   d549c:	f1b8 0f17 	cmp.w	r8, #23
   d54a0:	d80d      	bhi.n	d54be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   d54a2:	4fc2      	ldr	r7, [pc, #776]	; (d57ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x350>)
   d54a4:	fa0c f808 	lsl.w	r8, ip, r8
   d54a8:	ea18 0f07 	tst.w	r8, r7
   d54ac:	d007      	beq.n	d54be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d54ae:	6807      	ldr	r7, [r0, #0]
   d54b0:	3701      	adds	r7, #1
   d54b2:	6007      	str	r7, [r0, #0]
   d54b4:	e7d9      	b.n	d546a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   d54b6:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   d54ba:	f000 8139 	beq.w	d5730 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2d4>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d54be:	f8d0 8000 	ldr.w	r8, [r0]
   d54c2:	4542      	cmp	r2, r8
   d54c4:	d90e      	bls.n	d54e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   d54c6:	f811 7008 	ldrb.w	r7, [r1, r8]
   d54ca:	b15f      	cbz	r7, d54e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   d54cc:	2f3a      	cmp	r7, #58	; 0x3a
   d54ce:	f200 8171 	bhi.w	d57b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x358>
   d54d2:	2f1f      	cmp	r7, #31
   d54d4:	f200 8155 	bhi.w	d5782 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x326>
   d54d8:	2f0a      	cmp	r7, #10
   d54da:	f200 8164 	bhi.w	d57a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
   d54de:	2f08      	cmp	r7, #8
   d54e0:	f240 815a 	bls.w	d5798 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x33c>
	if (tokens == NULL) {
   d54e4:	2b00      	cmp	r3, #0
   d54e6:	f040 816a 	bne.w	d57be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x362>
		parser->pos--;
   d54ea:	f108 37ff 	add.w	r7, r8, #4294967295
	parser->pos--;
   d54ee:	6007      	str	r7, [r0, #0]
   d54f0:	e0ac      	b.n	d564c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f0>
		switch (c) {
   d54f2:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   d54f6:	d03a      	beq.n	d556e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x112>
   d54f8:	d80a      	bhi.n	d5510 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb4>
   d54fa:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   d54fe:	d036      	beq.n	d556e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x112>
   d5500:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   d5504:	d1db      	bne.n	d54be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   d5506:	2b00      	cmp	r3, #0
   d5508:	d0d1      	beq.n	d54ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   d550a:	f04f 0b02 	mov.w	fp, #2
   d550e:	e006      	b.n	d551e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xc2>
		switch (c) {
   d5510:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   d5514:	d1d3      	bne.n	d54be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   d5516:	2b00      	cmp	r3, #0
   d5518:	d0c9      	beq.n	d54ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   d551a:	f04f 0b01 	mov.w	fp, #1
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   d551e:	6847      	ldr	r7, [r0, #4]
   d5520:	f107 38ff 	add.w	r8, r7, #4294967295
   d5524:	eb03 1907 	add.w	r9, r3, r7, lsl #4
   d5528:	f1b8 0f00 	cmp.w	r8, #0
   d552c:	db4f      	blt.n	d55ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x172>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   d552e:	f859 7c0c 	ldr.w	r7, [r9, #-12]
   d5532:	3701      	adds	r7, #1
   d5534:	f1a9 0a10 	sub.w	sl, r9, #16
   d5538:	d045      	beq.n	d55c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
   d553a:	f859 7c08 	ldr.w	r7, [r9, #-8]
   d553e:	1c7e      	adds	r6, r7, #1
   d5540:	d141      	bne.n	d55c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
						if (token->type != type) {
   d5542:	f89a 9000 	ldrb.w	r9, [sl]
   d5546:	45d9      	cmp	r9, fp
   d5548:	d145      	bne.n	d55d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17a>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
   d554a:	6087      	str	r7, [r0, #8]
						token->end = parser->pos + 1;
   d554c:	f10e 0701 	add.w	r7, lr, #1
   d5550:	f8ca 7008 	str.w	r7, [sl, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   d5554:	eb03 1e08 	add.w	lr, r3, r8, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   d5558:	f8de 7004 	ldr.w	r7, [lr, #4]
   d555c:	3701      	adds	r7, #1
   d555e:	d03d      	beq.n	d55dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d5560:	f8de 7008 	ldr.w	r7, [lr, #8]
   d5564:	3701      	adds	r7, #1
   d5566:	d139      	bne.n	d55dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
							if (tokens[i].start != -1 && tokens[i].end == -1) {
								parser->toksuper = i;
   d5568:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   d556c:	e79f      	b.n	d54ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				count++;
   d556e:	3401      	adds	r4, #1
				if (tokens == NULL) {
   d5570:	2b00      	cmp	r3, #0
   d5572:	d09c      	beq.n	d54ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   d5574:	6847      	ldr	r7, [r0, #4]
   d5576:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d5578:	42be      	cmp	r6, r7
   d557a:	d94e      	bls.n	d561a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1be>
	tok = &tokens[parser->toknext++];
   d557c:	f107 0e01 	add.w	lr, r7, #1
   d5580:	f8c0 e004 	str.w	lr, [r0, #4]
   d5584:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
	tok->start = tok->end = -1;
   d5588:	e9ce 5501 	strd	r5, r5, [lr, #4]
	tok->size = 0;
   d558c:	2600      	movs	r6, #0
   d558e:	f8ce 600c 	str.w	r6, [lr, #12]
	tok = &tokens[parser->toknext++];
   d5592:	ea4f 1a07 	mov.w	sl, r7, lsl #4
				if (parser->toksuper != -1) {
   d5596:	6887      	ldr	r7, [r0, #8]
   d5598:	1c7e      	adds	r6, r7, #1
					tokens[parser->toksuper].size++;
   d559a:	bf1f      	itttt	ne
   d559c:	eb03 1907 	addne.w	r9, r3, r7, lsl #4
   d55a0:	f8d9 700c 	ldrne.w	r7, [r9, #12]
   d55a4:	3701      	addne	r7, #1
   d55a6:	f8c9 700c 	strne.w	r7, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   d55aa:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   d55ae:	bf0c      	ite	eq
   d55b0:	2701      	moveq	r7, #1
   d55b2:	2702      	movne	r7, #2
   d55b4:	f803 700a 	strb.w	r7, [r3, sl]
				token->start = parser->pos;
   d55b8:	6807      	ldr	r7, [r0, #0]
   d55ba:	f8ce 7004 	str.w	r7, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   d55be:	6847      	ldr	r7, [r0, #4]
   d55c0:	3f01      	subs	r7, #1
   d55c2:	6087      	str	r7, [r0, #8]
				break;
   d55c4:	e773      	b.n	d54ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				for (i = parser->toknext - 1; i >= 0; i--) {
   d55c6:	f108 38ff 	add.w	r8, r8, #4294967295
   d55ca:	46d1      	mov	r9, sl
   d55cc:	e7ac      	b.n	d5528 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xcc>
				if (i == -1) return JSMN_ERROR_INVAL;
   d55ce:	f1b8 3fff 	cmp.w	r8, #4294967295
   d55d2:	f47f af6c 	bne.w	d54ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   d55d6:	f06f 0401 	mvn.w	r4, #1
   d55da:	e020      	b.n	d561e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c2>
				for (; i >= 0; i--) {
   d55dc:	f108 38ff 	add.w	r8, r8, #4294967295
   d55e0:	f1b8 3fff 	cmp.w	r8, #4294967295
   d55e4:	f1ae 0e10 	sub.w	lr, lr, #16
   d55e8:	d1b6      	bne.n	d5558 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   d55ea:	e760      	b.n	d54ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   d55ec:	f10e 0901 	add.w	r9, lr, #1
   d55f0:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d55f4:	f8d0 8000 	ldr.w	r8, [r0]
   d55f8:	4542      	cmp	r2, r8
   d55fa:	f240 8094 	bls.w	d5726 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ca>
   d55fe:	f811 7008 	ldrb.w	r7, [r1, r8]
   d5602:	2f00      	cmp	r7, #0
   d5604:	f000 808f 	beq.w	d5726 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ca>
		if (c == '\"') {
   d5608:	2f22      	cmp	r7, #34	; 0x22
   d560a:	d130      	bne.n	d566e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x212>
			if (tokens == NULL) {
   d560c:	b1f3      	cbz	r3, d564c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f0>
	if (parser->toknext >= num_tokens) {
   d560e:	6847      	ldr	r7, [r0, #4]
   d5610:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d5612:	42be      	cmp	r6, r7
   d5614:	d806      	bhi.n	d5624 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c8>
		parser->pos = start;
   d5616:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   d561a:	f04f 34ff 	mov.w	r4, #4294967295
			}
		}
	}

	return count;
}
   d561e:	4620      	mov	r0, r4
   d5620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   d5624:	f107 0e01 	add.w	lr, r7, #1
   d5628:	ea4f 1807 	mov.w	r8, r7, lsl #4
   d562c:	eb03 1707 	add.w	r7, r3, r7, lsl #4
   d5630:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   d5634:	e9c7 5501 	strd	r5, r5, [r7, #4]
	tok->size = 0;
   d5638:	2600      	movs	r6, #0
   d563a:	60fe      	str	r6, [r7, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   d563c:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   d5640:	f04f 0a03 	mov.w	sl, #3
   d5644:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   d5648:	e9c7 9e01 	strd	r9, lr, [r7, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   d564c:	6887      	ldr	r7, [r0, #8]
   d564e:	1c7e      	adds	r6, r7, #1
				count++;
   d5650:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   d5654:	f43f af2b 	beq.w	d54ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   d5658:	2b00      	cmp	r3, #0
   d565a:	f43f af28 	beq.w	d54ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   d565e:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
   d5662:	f8de 700c 	ldr.w	r7, [lr, #12]
   d5666:	3701      	adds	r7, #1
   d5668:	f8ce 700c 	str.w	r7, [lr, #12]
   d566c:	e71f      	b.n	d54ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   d566e:	2f5c      	cmp	r7, #92	; 0x5c
   d5670:	d111      	bne.n	d5696 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23a>
   d5672:	f108 0701 	add.w	r7, r8, #1
   d5676:	42ba      	cmp	r2, r7
   d5678:	d90d      	bls.n	d5696 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23a>
			parser->pos++;
   d567a:	6007      	str	r7, [r0, #0]
			switch (js[parser->pos]) {
   d567c:	5dcf      	ldrb	r7, [r1, r7]
   d567e:	2f75      	cmp	r7, #117	; 0x75
   d5680:	d82c      	bhi.n	d56dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   d5682:	2f6d      	cmp	r7, #109	; 0x6d
   d5684:	d80b      	bhi.n	d569e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x242>
   d5686:	2f66      	cmp	r7, #102	; 0x66
   d5688:	d828      	bhi.n	d56dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   d568a:	2f5b      	cmp	r7, #91	; 0x5b
   d568c:	d81e      	bhi.n	d56cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   d568e:	2f22      	cmp	r7, #34	; 0x22
   d5690:	d001      	beq.n	d5696 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23a>
   d5692:	2f2f      	cmp	r7, #47	; 0x2f
   d5694:	d122      	bne.n	d56dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d5696:	6807      	ldr	r7, [r0, #0]
   d5698:	3701      	adds	r7, #1
   d569a:	6007      	str	r7, [r0, #0]
   d569c:	e7aa      	b.n	d55f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x198>
   d569e:	3f6e      	subs	r7, #110	; 0x6e
   d56a0:	2f07      	cmp	r7, #7
   d56a2:	d81b      	bhi.n	d56dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   d56a4:	a601      	add	r6, pc, #4	; (adr r6, d56ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x250>)
   d56a6:	f856 f027 	ldr.w	pc, [r6, r7, lsl #2]
   d56aa:	bf00      	nop
   d56ac:	000d5697 	.word	0x000d5697
   d56b0:	000d56dd 	.word	0x000d56dd
   d56b4:	000d56dd 	.word	0x000d56dd
   d56b8:	000d56dd 	.word	0x000d56dd
   d56bc:	000d5697 	.word	0x000d5697
   d56c0:	000d56dd 	.word	0x000d56dd
   d56c4:	000d5697 	.word	0x000d5697
   d56c8:	000d56e3 	.word	0x000d56e3
   d56cc:	3f5c      	subs	r7, #92	; 0x5c
   d56ce:	b2ff      	uxtb	r7, r7
   d56d0:	fa0c f707 	lsl.w	r7, ip, r7
   d56d4:	f240 4641 	movw	r6, #1089	; 0x441
   d56d8:	4237      	tst	r7, r6
   d56da:	d1dc      	bne.n	d5696 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23a>
			parser->pos = start;
   d56dc:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   d56e0:	e779      	b.n	d55d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17a>
					parser->pos++;
   d56e2:	f108 0702 	add.w	r7, r8, #2
   d56e6:	6007      	str	r7, [r0, #0]
   d56e8:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d56ec:	f8d0 8000 	ldr.w	r8, [r0]
   d56f0:	4542      	cmp	r2, r8
   d56f2:	d803      	bhi.n	d56fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2a0>
					parser->pos--;
   d56f4:	6807      	ldr	r7, [r0, #0]
   d56f6:	3f01      	subs	r7, #1
   d56f8:	6007      	str	r7, [r0, #0]
					break;
   d56fa:	e7cc      	b.n	d5696 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23a>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d56fc:	f811 7008 	ldrb.w	r7, [r1, r8]
   d5700:	2f00      	cmp	r7, #0
   d5702:	d0f7      	beq.n	d56f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x298>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   d5704:	f1a7 0b30 	sub.w	fp, r7, #48	; 0x30
   d5708:	f1bb 0f09 	cmp.w	fp, #9
   d570c:	d904      	bls.n	d5718 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2bc>
   d570e:	f027 0720 	bic.w	r7, r7, #32
   d5712:	3f41      	subs	r7, #65	; 0x41
   d5714:	2f05      	cmp	r7, #5
   d5716:	d8e1      	bhi.n	d56dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
						parser->pos++;
   d5718:	f108 0701 	add.w	r7, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d571c:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   d5720:	6007      	str	r7, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d5722:	d1e3      	bne.n	d56ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
   d5724:	e7e6      	b.n	d56f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x298>
	parser->pos = start;
   d5726:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   d572a:	f06f 0402 	mvn.w	r4, #2
   d572e:	e776      	b.n	d561e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c2>
				if (tokens != NULL && parser->toksuper != -1 &&
   d5730:	2b00      	cmp	r3, #0
   d5732:	f43f aebc 	beq.w	d54ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   d5736:	6887      	ldr	r7, [r0, #8]
   d5738:	1c7e      	adds	r6, r7, #1
   d573a:	f43f aeb8 	beq.w	d54ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   d573e:	013f      	lsls	r7, r7, #4
   d5740:	5ddf      	ldrb	r7, [r3, r7]
   d5742:	3f01      	subs	r7, #1
   d5744:	2f01      	cmp	r7, #1
   d5746:	f67f aeb2 	bls.w	d54ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   d574a:	6847      	ldr	r7, [r0, #4]
   d574c:	f107 38ff 	add.w	r8, r7, #4294967295
   d5750:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
   d5754:	f1b8 0f00 	cmp.w	r8, #0
   d5758:	f6ff aea9 	blt.w	d54ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   d575c:	f81e 7c10 	ldrb.w	r7, [lr, #-16]
   d5760:	3f01      	subs	r7, #1
   d5762:	2f01      	cmp	r7, #1
   d5764:	d808      	bhi.n	d5778 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31c>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   d5766:	f85e 7c0c 	ldr.w	r7, [lr, #-12]
   d576a:	3701      	adds	r7, #1
   d576c:	d004      	beq.n	d5778 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31c>
   d576e:	f85e 7c08 	ldr.w	r7, [lr, #-8]
   d5772:	3701      	adds	r7, #1
   d5774:	f43f aef8 	beq.w	d5568 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
					for (i = parser->toknext - 1; i >= 0; i--) {
   d5778:	f108 38ff 	add.w	r8, r8, #4294967295
   d577c:	f1ae 0e10 	sub.w	lr, lr, #16
   d5780:	e7e8      	b.n	d5754 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2f8>
   d5782:	f1a7 0920 	sub.w	r9, r7, #32
   d5786:	4e0a      	ldr	r6, [pc, #40]	; (d57b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x354>)
   d5788:	fa5f f989 	uxtb.w	r9, r9
   d578c:	fa0c f909 	lsl.w	r9, ip, r9
   d5790:	ea19 0f06 	tst.w	r9, r6
   d5794:	f47f aea6 	bne.w	d54e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   d5798:	3f20      	subs	r7, #32
   d579a:	2f5e      	cmp	r7, #94	; 0x5e
   d579c:	d89e      	bhi.n	d56dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d579e:	f108 0701 	add.w	r7, r8, #1
   d57a2:	6007      	str	r7, [r0, #0]
   d57a4:	e68b      	b.n	d54be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   d57a6:	2f0d      	cmp	r7, #13
   d57a8:	d1f6      	bne.n	d5798 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x33c>
   d57aa:	e69b      	b.n	d54e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   d57ac:	00800013 	.word	0x00800013
   d57b0:	04001001 	.word	0x04001001
   d57b4:	f007 09df 	and.w	r9, r7, #223	; 0xdf
   d57b8:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   d57bc:	e7f4      	b.n	d57a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
	if (parser->toknext >= num_tokens) {
   d57be:	6847      	ldr	r7, [r0, #4]
   d57c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d57c2:	42be      	cmp	r6, r7
   d57c4:	f67f af27 	bls.w	d5616 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
	tok = &tokens[parser->toknext++];
   d57c8:	f107 0801 	add.w	r8, r7, #1
   d57cc:	ea4f 1907 	mov.w	r9, r7, lsl #4
   d57d0:	eb03 1707 	add.w	r7, r3, r7, lsl #4
   d57d4:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   d57d8:	e9c7 5501 	strd	r5, r5, [r7, #4]
	tok->size = 0;
   d57dc:	2600      	movs	r6, #0
   d57de:	60fe      	str	r6, [r7, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   d57e0:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   d57e4:	f04f 0a04 	mov.w	sl, #4
   d57e8:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   d57ec:	e9c7 e801 	strd	lr, r8, [r7, #4]
	parser->pos--;
   d57f0:	6807      	ldr	r7, [r0, #0]
   d57f2:	3f01      	subs	r7, #1
   d57f4:	e67b      	b.n	d54ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   d57f6:	2b00      	cmp	r3, #0
   d57f8:	f43f af11 	beq.w	d561e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c2>
		for (i = parser->toknext - 1; i >= 0; i--) {
   d57fc:	6842      	ldr	r2, [r0, #4]
   d57fe:	1e51      	subs	r1, r2, #1
   d5800:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   d5804:	2900      	cmp	r1, #0
   d5806:	f6ff af0a 	blt.w	d561e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c2>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   d580a:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   d580e:	3201      	adds	r2, #1
   d5810:	d003      	beq.n	d581a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3be>
   d5812:	f853 2c08 	ldr.w	r2, [r3, #-8]
   d5816:	3201      	adds	r2, #1
   d5818:	d087      	beq.n	d572a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ce>
		for (i = parser->toknext - 1; i >= 0; i--) {
   d581a:	3901      	subs	r1, #1
   d581c:	3b10      	subs	r3, #16
   d581e:	e7f1      	b.n	d5804 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3a8>

000d5820 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   d5820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   d5822:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   d5824:	4604      	mov	r4, r0
	if (offset == 0) {
   d5826:	b912      	cbnz	r2, d582e <_ZN10JsonParser5parseEv+0xe>
		return false;
   d5828:	2000      	movs	r0, #0
}
   d582a:	b003      	add	sp, #12
   d582c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   d582e:	6943      	ldr	r3, [r0, #20]
   d5830:	f100 0620 	add.w	r6, r0, #32
   d5834:	b1ab      	cbz	r3, d5862 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d5836:	2100      	movs	r1, #0
	parser->toknext = 0;
   d5838:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   d583c:	f04f 31ff 	mov.w	r1, #4294967295
   d5840:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d5842:	69c1      	ldr	r1, [r0, #28]
   d5844:	9100      	str	r1, [sp, #0]
   d5846:	6841      	ldr	r1, [r0, #4]
   d5848:	4630      	mov	r0, r6
   d584a:	f7ff fe07 	bl	d545c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   d584e:	1c43      	adds	r3, r0, #1
   d5850:	d128      	bne.n	d58a4 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   d5852:	7c25      	ldrb	r5, [r4, #16]
   d5854:	2d00      	cmp	r5, #0
   d5856:	d1e7      	bne.n	d5828 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   d5858:	6960      	ldr	r0, [r4, #20]
   d585a:	f000 faed 	bl	d5e38 <free>
			tokens = 0;
   d585e:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   d5860:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   d5862:	2500      	movs	r5, #0
	parser->toksuper = -1;
   d5864:	f04f 37ff 	mov.w	r7, #4294967295
	parser->toknext = 0;
   d5868:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   d586c:	68e2      	ldr	r2, [r4, #12]
   d586e:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   d5870:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   d5872:	9500      	str	r5, [sp, #0]
   d5874:	462b      	mov	r3, r5
   d5876:	4630      	mov	r0, r6
   d5878:	f7ff fdf0 	bl	d545c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   d587c:	2800      	cmp	r0, #0
   d587e:	dbd3      	blt.n	d5828 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   d5880:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   d5882:	d017      	beq.n	d58b4 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   d5884:	0100      	lsls	r0, r0, #4
   d5886:	f000 facf 	bl	d5e28 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d588a:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   d588c:	6160      	str	r0, [r4, #20]
   d588e:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d5890:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   d5892:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d5896:	68e2      	ldr	r2, [r4, #12]
   d5898:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   d589a:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d589c:	4630      	mov	r0, r6
   d589e:	f7ff fddd 	bl	d545c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   d58a2:	e001      	b.n	d58a8 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   d58a4:	2800      	cmp	r0, #0
   d58a6:	dbbf      	blt.n	d5828 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   d58a8:	6963      	ldr	r3, [r4, #20]
   d58aa:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   d58ae:	61a0      	str	r0, [r4, #24]
	return true;
   d58b0:	2001      	movs	r0, #1
   d58b2:	e7ba      	b.n	d582a <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   d58b4:	6963      	ldr	r3, [r4, #20]
   d58b6:	61a3      	str	r3, [r4, #24]
   d58b8:	e7fa      	b.n	d58b0 <_ZN10JsonParser5parseEv+0x90>
	...

000d58bc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d58bc:	b508      	push	{r3, lr}
   d58be:	4b02      	ldr	r3, [pc, #8]	; (d58c8 <netdb_freeaddrinfo+0xc>)
   d58c0:	681b      	ldr	r3, [r3, #0]
   d58c2:	689b      	ldr	r3, [r3, #8]
   d58c4:	9301      	str	r3, [sp, #4]
   d58c6:	bd08      	pop	{r3, pc}
   d58c8:	00030268 	.word	0x00030268

000d58cc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d58cc:	b508      	push	{r3, lr}
   d58ce:	4b02      	ldr	r3, [pc, #8]	; (d58d8 <netdb_getaddrinfo+0xc>)
   d58d0:	681b      	ldr	r3, [r3, #0]
   d58d2:	68db      	ldr	r3, [r3, #12]
   d58d4:	9301      	str	r3, [sp, #4]
   d58d6:	bd08      	pop	{r3, pc}
   d58d8:	00030268 	.word	0x00030268

000d58dc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d58dc:	b508      	push	{r3, lr}
   d58de:	4b02      	ldr	r3, [pc, #8]	; (d58e8 <HAL_Pin_Map+0xc>)
   d58e0:	681b      	ldr	r3, [r3, #0]
   d58e2:	681b      	ldr	r3, [r3, #0]
   d58e4:	9301      	str	r3, [sp, #4]
   d58e6:	bd08      	pop	{r3, pc}
   d58e8:	0003022c 	.word	0x0003022c

000d58ec <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d58ec:	b508      	push	{r3, lr}
   d58ee:	4b02      	ldr	r3, [pc, #8]	; (d58f8 <HAL_Pin_Mode+0xc>)
   d58f0:	681b      	ldr	r3, [r3, #0]
   d58f2:	689b      	ldr	r3, [r3, #8]
   d58f4:	9301      	str	r3, [sp, #4]
   d58f6:	bd08      	pop	{r3, pc}
   d58f8:	0003022c 	.word	0x0003022c

000d58fc <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d58fc:	b508      	push	{r3, lr}
   d58fe:	4b02      	ldr	r3, [pc, #8]	; (d5908 <if_index_to_name+0xc>)
   d5900:	681b      	ldr	r3, [r3, #0]
   d5902:	695b      	ldr	r3, [r3, #20]
   d5904:	9301      	str	r3, [sp, #4]
   d5906:	bd08      	pop	{r3, pc}
   d5908:	0003026c 	.word	0x0003026c

000d590c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d590c:	b508      	push	{r3, lr}
   d590e:	4b02      	ldr	r3, [pc, #8]	; (d5918 <HAL_RNG_GetRandomNumber+0xc>)
   d5910:	681b      	ldr	r3, [r3, #0]
   d5912:	685b      	ldr	r3, [r3, #4]
   d5914:	9301      	str	r3, [sp, #4]
   d5916:	bd08      	pop	{r3, pc}
   d5918:	00030218 	.word	0x00030218

000d591c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d591c:	b508      	push	{r3, lr}
   d591e:	4b02      	ldr	r3, [pc, #8]	; (d5928 <HAL_Delay_Microseconds+0xc>)
   d5920:	681b      	ldr	r3, [r3, #0]
   d5922:	68db      	ldr	r3, [r3, #12]
   d5924:	9301      	str	r3, [sp, #4]
   d5926:	bd08      	pop	{r3, pc}
   d5928:	00030218 	.word	0x00030218

000d592c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d592c:	b508      	push	{r3, lr}
   d592e:	4b02      	ldr	r3, [pc, #8]	; (d5938 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5930:	681b      	ldr	r3, [r3, #0]
   d5932:	695b      	ldr	r3, [r3, #20]
   d5934:	9301      	str	r3, [sp, #4]
   d5936:	bd08      	pop	{r3, pc}
   d5938:	00030218 	.word	0x00030218

000d593c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d593c:	b508      	push	{r3, lr}
   d593e:	4b02      	ldr	r3, [pc, #8]	; (d5948 <hal_ble_stack_init+0xc>)
   d5940:	681b      	ldr	r3, [r3, #0]
   d5942:	689b      	ldr	r3, [r3, #8]
   d5944:	9301      	str	r3, [sp, #4]
   d5946:	bd08      	pop	{r3, pc}
   d5948:	00030278 	.word	0x00030278

000d594c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d594c:	b508      	push	{r3, lr}
   d594e:	4b02      	ldr	r3, [pc, #8]	; (d5958 <hal_ble_gap_set_advertising_data+0xc>)
   d5950:	681b      	ldr	r3, [r3, #0]
   d5952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5954:	9301      	str	r3, [sp, #4]
   d5956:	bd08      	pop	{r3, pc}
   d5958:	00030278 	.word	0x00030278

000d595c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d595c:	b508      	push	{r3, lr}
   d595e:	4b02      	ldr	r3, [pc, #8]	; (d5968 <hal_ble_gap_set_scan_response_data+0xc>)
   d5960:	681b      	ldr	r3, [r3, #0]
   d5962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5964:	9301      	str	r3, [sp, #4]
   d5966:	bd08      	pop	{r3, pc}
   d5968:	00030278 	.word	0x00030278

000d596c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d596c:	b508      	push	{r3, lr}
   d596e:	4b02      	ldr	r3, [pc, #8]	; (d5978 <hal_ble_gap_start_advertising+0xc>)
   d5970:	681b      	ldr	r3, [r3, #0]
   d5972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d5974:	9301      	str	r3, [sp, #4]
   d5976:	bd08      	pop	{r3, pc}
   d5978:	00030278 	.word	0x00030278

000d597c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d597c:	b508      	push	{r3, lr}
   d597e:	4b03      	ldr	r3, [pc, #12]	; (d598c <hal_ble_gap_disconnect+0x10>)
   d5980:	681b      	ldr	r3, [r3, #0]
   d5982:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d5986:	9301      	str	r3, [sp, #4]
   d5988:	bd08      	pop	{r3, pc}
   d598a:	0000      	.short	0x0000
   d598c:	00030278 	.word	0x00030278

000d5990 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d5990:	b508      	push	{r3, lr}
   d5992:	4b03      	ldr	r3, [pc, #12]	; (d59a0 <hal_ble_gatt_server_add_service+0x10>)
   d5994:	681b      	ldr	r3, [r3, #0]
   d5996:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d599a:	9301      	str	r3, [sp, #4]
   d599c:	bd08      	pop	{r3, pc}
   d599e:	0000      	.short	0x0000
   d59a0:	00030278 	.word	0x00030278

000d59a4 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d59a4:	b508      	push	{r3, lr}
   d59a6:	4b03      	ldr	r3, [pc, #12]	; (d59b4 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d59a8:	681b      	ldr	r3, [r3, #0]
   d59aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d59ae:	9301      	str	r3, [sp, #4]
   d59b0:	bd08      	pop	{r3, pc}
   d59b2:	0000      	.short	0x0000
   d59b4:	00030278 	.word	0x00030278

000d59b8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d59b8:	b508      	push	{r3, lr}
   d59ba:	4b03      	ldr	r3, [pc, #12]	; (d59c8 <hal_ble_gatt_client_write_with_response+0x10>)
   d59bc:	681b      	ldr	r3, [r3, #0]
   d59be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d59c2:	9301      	str	r3, [sp, #4]
   d59c4:	bd08      	pop	{r3, pc}
   d59c6:	0000      	.short	0x0000
   d59c8:	00030278 	.word	0x00030278

000d59cc <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d59cc:	b508      	push	{r3, lr}
   d59ce:	4b03      	ldr	r3, [pc, #12]	; (d59dc <hal_ble_gatt_client_write_without_response+0x10>)
   d59d0:	681b      	ldr	r3, [r3, #0]
   d59d2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d59d6:	9301      	str	r3, [sp, #4]
   d59d8:	bd08      	pop	{r3, pc}
   d59da:	0000      	.short	0x0000
   d59dc:	00030278 	.word	0x00030278

000d59e0 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d59e0:	b508      	push	{r3, lr}
   d59e2:	4b03      	ldr	r3, [pc, #12]	; (d59f0 <hal_ble_gatt_server_add_characteristic+0x10>)
   d59e4:	681b      	ldr	r3, [r3, #0]
   d59e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d59ea:	9301      	str	r3, [sp, #4]
   d59ec:	bd08      	pop	{r3, pc}
   d59ee:	0000      	.short	0x0000
   d59f0:	00030278 	.word	0x00030278

000d59f4 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d59f4:	b508      	push	{r3, lr}
   d59f6:	4b03      	ldr	r3, [pc, #12]	; (d5a04 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d59f8:	681b      	ldr	r3, [r3, #0]
   d59fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d59fe:	9301      	str	r3, [sp, #4]
   d5a00:	bd08      	pop	{r3, pc}
   d5a02:	0000      	.short	0x0000
   d5a04:	00030278 	.word	0x00030278

000d5a08 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5a08:	b508      	push	{r3, lr}
   d5a0a:	4b03      	ldr	r3, [pc, #12]	; (d5a18 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d5a0c:	681b      	ldr	r3, [r3, #0]
   d5a0e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d5a12:	9301      	str	r3, [sp, #4]
   d5a14:	bd08      	pop	{r3, pc}
   d5a16:	0000      	.short	0x0000
   d5a18:	00030278 	.word	0x00030278

000d5a1c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5a1c:	b508      	push	{r3, lr}
   d5a1e:	4b03      	ldr	r3, [pc, #12]	; (d5a2c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d5a20:	681b      	ldr	r3, [r3, #0]
   d5a22:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d5a26:	9301      	str	r3, [sp, #4]
   d5a28:	bd08      	pop	{r3, pc}
   d5a2a:	0000      	.short	0x0000
   d5a2c:	00030278 	.word	0x00030278

000d5a30 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5a30:	b508      	push	{r3, lr}
   d5a32:	4b02      	ldr	r3, [pc, #8]	; (d5a3c <os_mutex_recursive_create+0xc>)
   d5a34:	681b      	ldr	r3, [r3, #0]
   d5a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5a38:	9301      	str	r3, [sp, #4]
   d5a3a:	bd08      	pop	{r3, pc}
   d5a3c:	00030248 	.word	0x00030248

000d5a40 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5a40:	b508      	push	{r3, lr}
   d5a42:	4b02      	ldr	r3, [pc, #8]	; (d5a4c <os_mutex_recursive_destroy+0xc>)
   d5a44:	681b      	ldr	r3, [r3, #0]
   d5a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5a48:	9301      	str	r3, [sp, #4]
   d5a4a:	bd08      	pop	{r3, pc}
   d5a4c:	00030248 	.word	0x00030248

000d5a50 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5a50:	b508      	push	{r3, lr}
   d5a52:	4b02      	ldr	r3, [pc, #8]	; (d5a5c <os_mutex_recursive_lock+0xc>)
   d5a54:	681b      	ldr	r3, [r3, #0]
   d5a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5a58:	9301      	str	r3, [sp, #4]
   d5a5a:	bd08      	pop	{r3, pc}
   d5a5c:	00030248 	.word	0x00030248

000d5a60 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5a60:	b508      	push	{r3, lr}
   d5a62:	4b02      	ldr	r3, [pc, #8]	; (d5a6c <os_mutex_recursive_unlock+0xc>)
   d5a64:	681b      	ldr	r3, [r3, #0]
   d5a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5a68:	9301      	str	r3, [sp, #4]
   d5a6a:	bd08      	pop	{r3, pc}
   d5a6c:	00030248 	.word	0x00030248

000d5a70 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5a70:	b508      	push	{r3, lr}
   d5a72:	4b02      	ldr	r3, [pc, #8]	; (d5a7c <inet_inet_ntop+0xc>)
   d5a74:	681b      	ldr	r3, [r3, #0]
   d5a76:	695b      	ldr	r3, [r3, #20]
   d5a78:	9301      	str	r3, [sp, #4]
   d5a7a:	bd08      	pop	{r3, pc}
   d5a7c:	00030264 	.word	0x00030264

000d5a80 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5a80:	b508      	push	{r3, lr}
   d5a82:	4b02      	ldr	r3, [pc, #8]	; (d5a8c <inet_htonl+0xc>)
   d5a84:	681b      	ldr	r3, [r3, #0]
   d5a86:	6a1b      	ldr	r3, [r3, #32]
   d5a88:	9301      	str	r3, [sp, #4]
   d5a8a:	bd08      	pop	{r3, pc}
   d5a8c:	00030264 	.word	0x00030264

000d5a90 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5a90:	b508      	push	{r3, lr}
   d5a92:	4b02      	ldr	r3, [pc, #8]	; (d5a9c <inet_htons+0xc>)
   d5a94:	681b      	ldr	r3, [r3, #0]
   d5a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5a98:	9301      	str	r3, [sp, #4]
   d5a9a:	bd08      	pop	{r3, pc}
   d5a9c:	00030264 	.word	0x00030264

000d5aa0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5aa0:	b508      	push	{r3, lr}
   d5aa2:	4b02      	ldr	r3, [pc, #8]	; (d5aac <hal_usart_init+0xc>)
   d5aa4:	681b      	ldr	r3, [r3, #0]
   d5aa6:	681b      	ldr	r3, [r3, #0]
   d5aa8:	9301      	str	r3, [sp, #4]
   d5aaa:	bd08      	pop	{r3, pc}
   d5aac:	0003023c 	.word	0x0003023c

000d5ab0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5ab0:	b508      	push	{r3, lr}
   d5ab2:	4b02      	ldr	r3, [pc, #8]	; (d5abc <hal_usart_write+0xc>)
   d5ab4:	681b      	ldr	r3, [r3, #0]
   d5ab6:	68db      	ldr	r3, [r3, #12]
   d5ab8:	9301      	str	r3, [sp, #4]
   d5aba:	bd08      	pop	{r3, pc}
   d5abc:	0003023c 	.word	0x0003023c

000d5ac0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5ac0:	b508      	push	{r3, lr}
   d5ac2:	4b02      	ldr	r3, [pc, #8]	; (d5acc <hal_usart_available+0xc>)
   d5ac4:	681b      	ldr	r3, [r3, #0]
   d5ac6:	691b      	ldr	r3, [r3, #16]
   d5ac8:	9301      	str	r3, [sp, #4]
   d5aca:	bd08      	pop	{r3, pc}
   d5acc:	0003023c 	.word	0x0003023c

000d5ad0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5ad0:	b508      	push	{r3, lr}
   d5ad2:	4b02      	ldr	r3, [pc, #8]	; (d5adc <hal_usart_read+0xc>)
   d5ad4:	681b      	ldr	r3, [r3, #0]
   d5ad6:	695b      	ldr	r3, [r3, #20]
   d5ad8:	9301      	str	r3, [sp, #4]
   d5ada:	bd08      	pop	{r3, pc}
   d5adc:	0003023c 	.word	0x0003023c

000d5ae0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5ae0:	b508      	push	{r3, lr}
   d5ae2:	4b02      	ldr	r3, [pc, #8]	; (d5aec <hal_usart_peek+0xc>)
   d5ae4:	681b      	ldr	r3, [r3, #0]
   d5ae6:	699b      	ldr	r3, [r3, #24]
   d5ae8:	9301      	str	r3, [sp, #4]
   d5aea:	bd08      	pop	{r3, pc}
   d5aec:	0003023c 	.word	0x0003023c

000d5af0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5af0:	b508      	push	{r3, lr}
   d5af2:	4b02      	ldr	r3, [pc, #8]	; (d5afc <hal_usart_flush+0xc>)
   d5af4:	681b      	ldr	r3, [r3, #0]
   d5af6:	69db      	ldr	r3, [r3, #28]
   d5af8:	9301      	str	r3, [sp, #4]
   d5afa:	bd08      	pop	{r3, pc}
   d5afc:	0003023c 	.word	0x0003023c

000d5b00 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5b00:	b508      	push	{r3, lr}
   d5b02:	4b02      	ldr	r3, [pc, #8]	; (d5b0c <hal_usart_is_enabled+0xc>)
   d5b04:	681b      	ldr	r3, [r3, #0]
   d5b06:	6a1b      	ldr	r3, [r3, #32]
   d5b08:	9301      	str	r3, [sp, #4]
   d5b0a:	bd08      	pop	{r3, pc}
   d5b0c:	0003023c 	.word	0x0003023c

000d5b10 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5b10:	b508      	push	{r3, lr}
   d5b12:	4b02      	ldr	r3, [pc, #8]	; (d5b1c <hal_usart_available_data_for_write+0xc>)
   d5b14:	681b      	ldr	r3, [r3, #0]
   d5b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b18:	9301      	str	r3, [sp, #4]
   d5b1a:	bd08      	pop	{r3, pc}
   d5b1c:	0003023c 	.word	0x0003023c

000d5b20 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5b20:	b508      	push	{r3, lr}
   d5b22:	4b02      	ldr	r3, [pc, #8]	; (d5b2c <hal_i2c_begin+0xc>)
   d5b24:	681b      	ldr	r3, [r3, #0]
   d5b26:	68db      	ldr	r3, [r3, #12]
   d5b28:	9301      	str	r3, [sp, #4]
   d5b2a:	bd08      	pop	{r3, pc}
   d5b2c:	00030228 	.word	0x00030228

000d5b30 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5b30:	b508      	push	{r3, lr}
   d5b32:	4b02      	ldr	r3, [pc, #8]	; (d5b3c <hal_i2c_begin_transmission+0xc>)
   d5b34:	681b      	ldr	r3, [r3, #0]
   d5b36:	699b      	ldr	r3, [r3, #24]
   d5b38:	9301      	str	r3, [sp, #4]
   d5b3a:	bd08      	pop	{r3, pc}
   d5b3c:	00030228 	.word	0x00030228

000d5b40 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5b40:	b508      	push	{r3, lr}
   d5b42:	4b02      	ldr	r3, [pc, #8]	; (d5b4c <hal_i2c_end_transmission+0xc>)
   d5b44:	681b      	ldr	r3, [r3, #0]
   d5b46:	69db      	ldr	r3, [r3, #28]
   d5b48:	9301      	str	r3, [sp, #4]
   d5b4a:	bd08      	pop	{r3, pc}
   d5b4c:	00030228 	.word	0x00030228

000d5b50 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5b50:	b508      	push	{r3, lr}
   d5b52:	4b02      	ldr	r3, [pc, #8]	; (d5b5c <hal_i2c_write+0xc>)
   d5b54:	681b      	ldr	r3, [r3, #0]
   d5b56:	6a1b      	ldr	r3, [r3, #32]
   d5b58:	9301      	str	r3, [sp, #4]
   d5b5a:	bd08      	pop	{r3, pc}
   d5b5c:	00030228 	.word	0x00030228

000d5b60 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5b60:	b508      	push	{r3, lr}
   d5b62:	4b02      	ldr	r3, [pc, #8]	; (d5b6c <hal_i2c_available+0xc>)
   d5b64:	681b      	ldr	r3, [r3, #0]
   d5b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5b68:	9301      	str	r3, [sp, #4]
   d5b6a:	bd08      	pop	{r3, pc}
   d5b6c:	00030228 	.word	0x00030228

000d5b70 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5b70:	b508      	push	{r3, lr}
   d5b72:	4b02      	ldr	r3, [pc, #8]	; (d5b7c <hal_i2c_read+0xc>)
   d5b74:	681b      	ldr	r3, [r3, #0]
   d5b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b78:	9301      	str	r3, [sp, #4]
   d5b7a:	bd08      	pop	{r3, pc}
   d5b7c:	00030228 	.word	0x00030228

000d5b80 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5b80:	b508      	push	{r3, lr}
   d5b82:	4b02      	ldr	r3, [pc, #8]	; (d5b8c <hal_i2c_peek+0xc>)
   d5b84:	681b      	ldr	r3, [r3, #0]
   d5b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5b88:	9301      	str	r3, [sp, #4]
   d5b8a:	bd08      	pop	{r3, pc}
   d5b8c:	00030228 	.word	0x00030228

000d5b90 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5b90:	b508      	push	{r3, lr}
   d5b92:	4b02      	ldr	r3, [pc, #8]	; (d5b9c <hal_i2c_flush+0xc>)
   d5b94:	681b      	ldr	r3, [r3, #0]
   d5b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5b98:	9301      	str	r3, [sp, #4]
   d5b9a:	bd08      	pop	{r3, pc}
   d5b9c:	00030228 	.word	0x00030228

000d5ba0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5ba0:	b508      	push	{r3, lr}
   d5ba2:	4b02      	ldr	r3, [pc, #8]	; (d5bac <hal_i2c_is_enabled+0xc>)
   d5ba4:	681b      	ldr	r3, [r3, #0]
   d5ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5ba8:	9301      	str	r3, [sp, #4]
   d5baa:	bd08      	pop	{r3, pc}
   d5bac:	00030228 	.word	0x00030228

000d5bb0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5bb0:	b508      	push	{r3, lr}
   d5bb2:	4b02      	ldr	r3, [pc, #8]	; (d5bbc <hal_i2c_init+0xc>)
   d5bb4:	681b      	ldr	r3, [r3, #0]
   d5bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5bb8:	9301      	str	r3, [sp, #4]
   d5bba:	bd08      	pop	{r3, pc}
   d5bbc:	00030228 	.word	0x00030228

000d5bc0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5bc0:	b508      	push	{r3, lr}
   d5bc2:	4b02      	ldr	r3, [pc, #8]	; (d5bcc <hal_i2c_request_ex+0xc>)
   d5bc4:	681b      	ldr	r3, [r3, #0]
   d5bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5bc8:	9301      	str	r3, [sp, #4]
   d5bca:	bd08      	pop	{r3, pc}
   d5bcc:	00030228 	.word	0x00030228

000d5bd0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5bd0:	b508      	push	{r3, lr}
   d5bd2:	4b02      	ldr	r3, [pc, #8]	; (d5bdc <sock_setsockopt+0xc>)
   d5bd4:	681b      	ldr	r3, [r3, #0]
   d5bd6:	699b      	ldr	r3, [r3, #24]
   d5bd8:	9301      	str	r3, [sp, #4]
   d5bda:	bd08      	pop	{r3, pc}
   d5bdc:	00030238 	.word	0x00030238

000d5be0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5be0:	b508      	push	{r3, lr}
   d5be2:	4b02      	ldr	r3, [pc, #8]	; (d5bec <sock_close+0xc>)
   d5be4:	681b      	ldr	r3, [r3, #0]
   d5be6:	69db      	ldr	r3, [r3, #28]
   d5be8:	9301      	str	r3, [sp, #4]
   d5bea:	bd08      	pop	{r3, pc}
   d5bec:	00030238 	.word	0x00030238

000d5bf0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5bf0:	b508      	push	{r3, lr}
   d5bf2:	4b02      	ldr	r3, [pc, #8]	; (d5bfc <sock_connect+0xc>)
   d5bf4:	681b      	ldr	r3, [r3, #0]
   d5bf6:	6a1b      	ldr	r3, [r3, #32]
   d5bf8:	9301      	str	r3, [sp, #4]
   d5bfa:	bd08      	pop	{r3, pc}
   d5bfc:	00030238 	.word	0x00030238

000d5c00 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5c00:	b508      	push	{r3, lr}
   d5c02:	4b02      	ldr	r3, [pc, #8]	; (d5c0c <sock_recv+0xc>)
   d5c04:	681b      	ldr	r3, [r3, #0]
   d5c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c08:	9301      	str	r3, [sp, #4]
   d5c0a:	bd08      	pop	{r3, pc}
   d5c0c:	00030238 	.word	0x00030238

000d5c10 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5c10:	b508      	push	{r3, lr}
   d5c12:	4b02      	ldr	r3, [pc, #8]	; (d5c1c <sock_send+0xc>)
   d5c14:	681b      	ldr	r3, [r3, #0]
   d5c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c18:	9301      	str	r3, [sp, #4]
   d5c1a:	bd08      	pop	{r3, pc}
   d5c1c:	00030238 	.word	0x00030238

000d5c20 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5c20:	b508      	push	{r3, lr}
   d5c22:	4b02      	ldr	r3, [pc, #8]	; (d5c2c <sock_socket+0xc>)
   d5c24:	681b      	ldr	r3, [r3, #0]
   d5c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5c28:	9301      	str	r3, [sp, #4]
   d5c2a:	bd08      	pop	{r3, pc}
   d5c2c:	00030238 	.word	0x00030238

000d5c30 <hal_spi_end>:
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   d5c30:	b508      	push	{r3, lr}
   d5c32:	4b02      	ldr	r3, [pc, #8]	; (d5c3c <hal_spi_end+0xc>)
   d5c34:	681b      	ldr	r3, [r3, #0]
   d5c36:	685b      	ldr	r3, [r3, #4]
   d5c38:	9301      	str	r3, [sp, #4]
   d5c3a:	bd08      	pop	{r3, pc}
   d5c3c:	00030230 	.word	0x00030230

000d5c40 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5c40:	b508      	push	{r3, lr}
   d5c42:	4b02      	ldr	r3, [pc, #8]	; (d5c4c <hal_spi_init+0xc>)
   d5c44:	681b      	ldr	r3, [r3, #0]
   d5c46:	69db      	ldr	r3, [r3, #28]
   d5c48:	9301      	str	r3, [sp, #4]
   d5c4a:	bd08      	pop	{r3, pc}
   d5c4c:	00030230 	.word	0x00030230

000d5c50 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5c50:	b508      	push	{r3, lr}
   d5c52:	4b02      	ldr	r3, [pc, #8]	; (d5c5c <hal_spi_is_enabled+0xc>)
   d5c54:	681b      	ldr	r3, [r3, #0]
   d5c56:	6a1b      	ldr	r3, [r3, #32]
   d5c58:	9301      	str	r3, [sp, #4]
   d5c5a:	bd08      	pop	{r3, pc}
   d5c5c:	00030230 	.word	0x00030230

000d5c60 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5c60:	b508      	push	{r3, lr}
   d5c62:	4b02      	ldr	r3, [pc, #8]	; (d5c6c <hal_spi_acquire+0xc>)
   d5c64:	681b      	ldr	r3, [r3, #0]
   d5c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5c68:	9301      	str	r3, [sp, #4]
   d5c6a:	bd08      	pop	{r3, pc}
   d5c6c:	00030230 	.word	0x00030230

000d5c70 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5c70:	b508      	push	{r3, lr}
   d5c72:	4b02      	ldr	r3, [pc, #8]	; (d5c7c <hal_spi_release+0xc>)
   d5c74:	681b      	ldr	r3, [r3, #0]
   d5c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5c78:	9301      	str	r3, [sp, #4]
   d5c7a:	bd08      	pop	{r3, pc}
   d5c7c:	00030230 	.word	0x00030230

000d5c80 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5c80:	b508      	push	{r3, lr}
   d5c82:	4b02      	ldr	r3, [pc, #8]	; (d5c8c <HAL_USB_USART_Init+0xc>)
   d5c84:	681b      	ldr	r3, [r3, #0]
   d5c86:	681b      	ldr	r3, [r3, #0]
   d5c88:	9301      	str	r3, [sp, #4]
   d5c8a:	bd08      	pop	{r3, pc}
   d5c8c:	0003024c 	.word	0x0003024c

000d5c90 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5c90:	b508      	push	{r3, lr}
   d5c92:	4b02      	ldr	r3, [pc, #8]	; (d5c9c <HAL_USB_USART_Begin+0xc>)
   d5c94:	681b      	ldr	r3, [r3, #0]
   d5c96:	685b      	ldr	r3, [r3, #4]
   d5c98:	9301      	str	r3, [sp, #4]
   d5c9a:	bd08      	pop	{r3, pc}
   d5c9c:	0003024c 	.word	0x0003024c

000d5ca0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5ca0:	b508      	push	{r3, lr}
   d5ca2:	4b02      	ldr	r3, [pc, #8]	; (d5cac <HAL_USB_USART_Available_Data+0xc>)
   d5ca4:	681b      	ldr	r3, [r3, #0]
   d5ca6:	691b      	ldr	r3, [r3, #16]
   d5ca8:	9301      	str	r3, [sp, #4]
   d5caa:	bd08      	pop	{r3, pc}
   d5cac:	0003024c 	.word	0x0003024c

000d5cb0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5cb0:	b508      	push	{r3, lr}
   d5cb2:	4b02      	ldr	r3, [pc, #8]	; (d5cbc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5cb4:	681b      	ldr	r3, [r3, #0]
   d5cb6:	695b      	ldr	r3, [r3, #20]
   d5cb8:	9301      	str	r3, [sp, #4]
   d5cba:	bd08      	pop	{r3, pc}
   d5cbc:	0003024c 	.word	0x0003024c

000d5cc0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5cc0:	b508      	push	{r3, lr}
   d5cc2:	4b02      	ldr	r3, [pc, #8]	; (d5ccc <HAL_USB_USART_Receive_Data+0xc>)
   d5cc4:	681b      	ldr	r3, [r3, #0]
   d5cc6:	699b      	ldr	r3, [r3, #24]
   d5cc8:	9301      	str	r3, [sp, #4]
   d5cca:	bd08      	pop	{r3, pc}
   d5ccc:	0003024c 	.word	0x0003024c

000d5cd0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5cd0:	b508      	push	{r3, lr}
   d5cd2:	4b02      	ldr	r3, [pc, #8]	; (d5cdc <HAL_USB_USART_Send_Data+0xc>)
   d5cd4:	681b      	ldr	r3, [r3, #0]
   d5cd6:	69db      	ldr	r3, [r3, #28]
   d5cd8:	9301      	str	r3, [sp, #4]
   d5cda:	bd08      	pop	{r3, pc}
   d5cdc:	0003024c 	.word	0x0003024c

000d5ce0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5ce0:	b508      	push	{r3, lr}
   d5ce2:	4b02      	ldr	r3, [pc, #8]	; (d5cec <HAL_USB_USART_Flush_Data+0xc>)
   d5ce4:	681b      	ldr	r3, [r3, #0]
   d5ce6:	6a1b      	ldr	r3, [r3, #32]
   d5ce8:	9301      	str	r3, [sp, #4]
   d5cea:	bd08      	pop	{r3, pc}
   d5cec:	0003024c 	.word	0x0003024c

000d5cf0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5cf0:	b508      	push	{r3, lr}
   d5cf2:	4b02      	ldr	r3, [pc, #8]	; (d5cfc <panic_+0xc>)
   d5cf4:	681b      	ldr	r3, [r3, #0]
   d5cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5cf8:	9301      	str	r3, [sp, #4]
   d5cfa:	bd08      	pop	{r3, pc}
   d5cfc:	00030260 	.word	0x00030260

000d5d00 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5d00:	b508      	push	{r3, lr}
   d5d02:	4b02      	ldr	r3, [pc, #8]	; (d5d0c <log_message+0xc>)
   d5d04:	681b      	ldr	r3, [r3, #0]
   d5d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5d08:	9301      	str	r3, [sp, #4]
   d5d0a:	bd08      	pop	{r3, pc}
   d5d0c:	00030260 	.word	0x00030260

000d5d10 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5d10:	b508      	push	{r3, lr}
   d5d12:	4b02      	ldr	r3, [pc, #8]	; (d5d1c <set_system_mode+0xc>)
   d5d14:	681b      	ldr	r3, [r3, #0]
   d5d16:	685b      	ldr	r3, [r3, #4]
   d5d18:	9301      	str	r3, [sp, #4]
   d5d1a:	bd08      	pop	{r3, pc}
   d5d1c:	00030220 	.word	0x00030220

000d5d20 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5d20:	b508      	push	{r3, lr}
   d5d22:	4b02      	ldr	r3, [pc, #8]	; (d5d2c <system_delay_ms+0xc>)
   d5d24:	681b      	ldr	r3, [r3, #0]
   d5d26:	695b      	ldr	r3, [r3, #20]
   d5d28:	9301      	str	r3, [sp, #4]
   d5d2a:	bd08      	pop	{r3, pc}
   d5d2c:	00030220 	.word	0x00030220

000d5d30 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5d30:	b508      	push	{r3, lr}
   d5d32:	4b03      	ldr	r3, [pc, #12]	; (d5d40 <system_ctrl_set_app_request_handler+0x10>)
   d5d34:	681b      	ldr	r3, [r3, #0]
   d5d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5d3a:	9301      	str	r3, [sp, #4]
   d5d3c:	bd08      	pop	{r3, pc}
   d5d3e:	0000      	.short	0x0000
   d5d40:	00030220 	.word	0x00030220

000d5d44 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5d44:	b508      	push	{r3, lr}
   d5d46:	4b03      	ldr	r3, [pc, #12]	; (d5d54 <system_ctrl_set_result+0x10>)
   d5d48:	681b      	ldr	r3, [r3, #0]
   d5d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5d4e:	9301      	str	r3, [sp, #4]
   d5d50:	bd08      	pop	{r3, pc}
   d5d52:	0000      	.short	0x0000
   d5d54:	00030220 	.word	0x00030220

000d5d58 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d58:	b508      	push	{r3, lr}
   d5d5a:	4b02      	ldr	r3, [pc, #8]	; (d5d64 <network_connect+0xc>)
   d5d5c:	681b      	ldr	r3, [r3, #0]
   d5d5e:	685b      	ldr	r3, [r3, #4]
   d5d60:	9301      	str	r3, [sp, #4]
   d5d62:	bd08      	pop	{r3, pc}
   d5d64:	00030240 	.word	0x00030240

000d5d68 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5d68:	b508      	push	{r3, lr}
   d5d6a:	4b02      	ldr	r3, [pc, #8]	; (d5d74 <network_connecting+0xc>)
   d5d6c:	681b      	ldr	r3, [r3, #0]
   d5d6e:	689b      	ldr	r3, [r3, #8]
   d5d70:	9301      	str	r3, [sp, #4]
   d5d72:	bd08      	pop	{r3, pc}
   d5d74:	00030240 	.word	0x00030240

000d5d78 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5d78:	b508      	push	{r3, lr}
   d5d7a:	4b02      	ldr	r3, [pc, #8]	; (d5d84 <network_disconnect+0xc>)
   d5d7c:	681b      	ldr	r3, [r3, #0]
   d5d7e:	68db      	ldr	r3, [r3, #12]
   d5d80:	9301      	str	r3, [sp, #4]
   d5d82:	bd08      	pop	{r3, pc}
   d5d84:	00030240 	.word	0x00030240

000d5d88 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5d88:	b508      	push	{r3, lr}
   d5d8a:	4b02      	ldr	r3, [pc, #8]	; (d5d94 <network_ready+0xc>)
   d5d8c:	681b      	ldr	r3, [r3, #0]
   d5d8e:	691b      	ldr	r3, [r3, #16]
   d5d90:	9301      	str	r3, [sp, #4]
   d5d92:	bd08      	pop	{r3, pc}
   d5d94:	00030240 	.word	0x00030240

000d5d98 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d98:	b508      	push	{r3, lr}
   d5d9a:	4b02      	ldr	r3, [pc, #8]	; (d5da4 <network_on+0xc>)
   d5d9c:	681b      	ldr	r3, [r3, #0]
   d5d9e:	695b      	ldr	r3, [r3, #20]
   d5da0:	9301      	str	r3, [sp, #4]
   d5da2:	bd08      	pop	{r3, pc}
   d5da4:	00030240 	.word	0x00030240

000d5da8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5da8:	b508      	push	{r3, lr}
   d5daa:	4b02      	ldr	r3, [pc, #8]	; (d5db4 <network_off+0xc>)
   d5dac:	681b      	ldr	r3, [r3, #0]
   d5dae:	699b      	ldr	r3, [r3, #24]
   d5db0:	9301      	str	r3, [sp, #4]
   d5db2:	bd08      	pop	{r3, pc}
   d5db4:	00030240 	.word	0x00030240

000d5db8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5db8:	b508      	push	{r3, lr}
   d5dba:	4b02      	ldr	r3, [pc, #8]	; (d5dc4 <network_listen+0xc>)
   d5dbc:	681b      	ldr	r3, [r3, #0]
   d5dbe:	69db      	ldr	r3, [r3, #28]
   d5dc0:	9301      	str	r3, [sp, #4]
   d5dc2:	bd08      	pop	{r3, pc}
   d5dc4:	00030240 	.word	0x00030240

000d5dc8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5dc8:	b508      	push	{r3, lr}
   d5dca:	4b02      	ldr	r3, [pc, #8]	; (d5dd4 <network_listening+0xc>)
   d5dcc:	681b      	ldr	r3, [r3, #0]
   d5dce:	6a1b      	ldr	r3, [r3, #32]
   d5dd0:	9301      	str	r3, [sp, #4]
   d5dd2:	bd08      	pop	{r3, pc}
   d5dd4:	00030240 	.word	0x00030240

000d5dd8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5dd8:	b508      	push	{r3, lr}
   d5dda:	4b02      	ldr	r3, [pc, #8]	; (d5de4 <network_set_listen_timeout+0xc>)
   d5ddc:	681b      	ldr	r3, [r3, #0]
   d5dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5de0:	9301      	str	r3, [sp, #4]
   d5de2:	bd08      	pop	{r3, pc}
   d5de4:	00030240 	.word	0x00030240

000d5de8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5de8:	b508      	push	{r3, lr}
   d5dea:	4b02      	ldr	r3, [pc, #8]	; (d5df4 <network_get_listen_timeout+0xc>)
   d5dec:	681b      	ldr	r3, [r3, #0]
   d5dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5df0:	9301      	str	r3, [sp, #4]
   d5df2:	bd08      	pop	{r3, pc}
   d5df4:	00030240 	.word	0x00030240

000d5df8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5df8:	b508      	push	{r3, lr}
   d5dfa:	4b02      	ldr	r3, [pc, #8]	; (d5e04 <network_is_on+0xc>)
   d5dfc:	681b      	ldr	r3, [r3, #0]
   d5dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5e00:	9301      	str	r3, [sp, #4]
   d5e02:	bd08      	pop	{r3, pc}
   d5e04:	00030240 	.word	0x00030240

000d5e08 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5e08:	b508      	push	{r3, lr}
   d5e0a:	4b02      	ldr	r3, [pc, #8]	; (d5e14 <network_is_off+0xc>)
   d5e0c:	681b      	ldr	r3, [r3, #0]
   d5e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5e10:	9301      	str	r3, [sp, #4]
   d5e12:	bd08      	pop	{r3, pc}
   d5e14:	00030240 	.word	0x00030240

000d5e18 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5e18:	b508      	push	{r3, lr}
   d5e1a:	4b02      	ldr	r3, [pc, #8]	; (d5e24 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5e1c:	681b      	ldr	r3, [r3, #0]
   d5e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5e20:	9301      	str	r3, [sp, #4]
   d5e22:	bd08      	pop	{r3, pc}
   d5e24:	00030244 	.word	0x00030244

000d5e28 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5e28:	b508      	push	{r3, lr}
   d5e2a:	4b02      	ldr	r3, [pc, #8]	; (d5e34 <malloc+0xc>)
   d5e2c:	681b      	ldr	r3, [r3, #0]
   d5e2e:	681b      	ldr	r3, [r3, #0]
   d5e30:	9301      	str	r3, [sp, #4]
   d5e32:	bd08      	pop	{r3, pc}
   d5e34:	0003021c 	.word	0x0003021c

000d5e38 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5e38:	b508      	push	{r3, lr}
   d5e3a:	4b02      	ldr	r3, [pc, #8]	; (d5e44 <free+0xc>)
   d5e3c:	681b      	ldr	r3, [r3, #0]
   d5e3e:	685b      	ldr	r3, [r3, #4]
   d5e40:	9301      	str	r3, [sp, #4]
   d5e42:	bd08      	pop	{r3, pc}
   d5e44:	0003021c 	.word	0x0003021c

000d5e48 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5e48:	b508      	push	{r3, lr}
   d5e4a:	4b02      	ldr	r3, [pc, #8]	; (d5e54 <realloc+0xc>)
   d5e4c:	681b      	ldr	r3, [r3, #0]
   d5e4e:	689b      	ldr	r3, [r3, #8]
   d5e50:	9301      	str	r3, [sp, #4]
   d5e52:	bd08      	pop	{r3, pc}
   d5e54:	0003021c 	.word	0x0003021c

000d5e58 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   d5e58:	b508      	push	{r3, lr}
   d5e5a:	4b02      	ldr	r3, [pc, #8]	; (d5e64 <sscanf+0xc>)
   d5e5c:	681b      	ldr	r3, [r3, #0]
   d5e5e:	695b      	ldr	r3, [r3, #20]
   d5e60:	9301      	str	r3, [sp, #4]
   d5e62:	bd08      	pop	{r3, pc}
   d5e64:	0003021c 	.word	0x0003021c

000d5e68 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5e68:	b508      	push	{r3, lr}
   d5e6a:	4b02      	ldr	r3, [pc, #8]	; (d5e74 <abort+0xc>)
   d5e6c:	681b      	ldr	r3, [r3, #0]
   d5e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e70:	9301      	str	r3, [sp, #4]
   d5e72:	bd08      	pop	{r3, pc}
   d5e74:	0003021c 	.word	0x0003021c

000d5e78 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5e78:	b508      	push	{r3, lr}
   d5e7a:	4b02      	ldr	r3, [pc, #8]	; (d5e84 <_malloc_r+0xc>)
   d5e7c:	681b      	ldr	r3, [r3, #0]
   d5e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e80:	9301      	str	r3, [sp, #4]
   d5e82:	bd08      	pop	{r3, pc}
   d5e84:	0003021c 	.word	0x0003021c

000d5e88 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5e88:	b508      	push	{r3, lr}
   d5e8a:	4b02      	ldr	r3, [pc, #8]	; (d5e94 <__errno+0xc>)
   d5e8c:	681b      	ldr	r3, [r3, #0]
   d5e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5e90:	9301      	str	r3, [sp, #4]
   d5e92:	bd08      	pop	{r3, pc}
   d5e94:	0003021c 	.word	0x0003021c

000d5e98 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5e98:	b508      	push	{r3, lr}
   d5e9a:	4b02      	ldr	r3, [pc, #8]	; (d5ea4 <newlib_impure_ptr_callback+0xc>)
   d5e9c:	681b      	ldr	r3, [r3, #0]
   d5e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5ea0:	9301      	str	r3, [sp, #4]
   d5ea2:	bd08      	pop	{r3, pc}
   d5ea4:	0003021c 	.word	0x0003021c

000d5ea8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5ea8:	2200      	movs	r2, #0
   d5eaa:	6840      	ldr	r0, [r0, #4]
   d5eac:	4611      	mov	r1, r2
   d5eae:	f7ff bf8b 	b.w	d5dc8 <network_listening>

000d5eb2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5eb2:	2200      	movs	r2, #0
   d5eb4:	6840      	ldr	r0, [r0, #4]
   d5eb6:	4611      	mov	r1, r2
   d5eb8:	f7ff bf96 	b.w	d5de8 <network_get_listen_timeout>

000d5ebc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5ebc:	6840      	ldr	r0, [r0, #4]
   d5ebe:	2200      	movs	r2, #0
   d5ec0:	f7ff bf8a 	b.w	d5dd8 <network_set_listen_timeout>

000d5ec4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5ec4:	6840      	ldr	r0, [r0, #4]
   d5ec6:	2200      	movs	r2, #0
   d5ec8:	f081 0101 	eor.w	r1, r1, #1
   d5ecc:	f7ff bf74 	b.w	d5db8 <network_listen>

000d5ed0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5ed0:	2300      	movs	r3, #0
   d5ed2:	6840      	ldr	r0, [r0, #4]
   d5ed4:	461a      	mov	r2, r3
   d5ed6:	4619      	mov	r1, r3
   d5ed8:	f7ff bf66 	b.w	d5da8 <network_off>

000d5edc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5edc:	2300      	movs	r3, #0
   d5ede:	6840      	ldr	r0, [r0, #4]
   d5ee0:	461a      	mov	r2, r3
   d5ee2:	4619      	mov	r1, r3
   d5ee4:	f7ff bf58 	b.w	d5d98 <network_on>

000d5ee8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5ee8:	2200      	movs	r2, #0
   d5eea:	6840      	ldr	r0, [r0, #4]
   d5eec:	4611      	mov	r1, r2
   d5eee:	f7ff bf4b 	b.w	d5d88 <network_ready>

000d5ef2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5ef2:	2200      	movs	r2, #0
   d5ef4:	6840      	ldr	r0, [r0, #4]
   d5ef6:	4611      	mov	r1, r2
   d5ef8:	f7ff bf36 	b.w	d5d68 <network_connecting>

000d5efc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5efc:	6840      	ldr	r0, [r0, #4]
   d5efe:	2200      	movs	r2, #0
   d5f00:	2102      	movs	r1, #2
   d5f02:	f7ff bf39 	b.w	d5d78 <network_disconnect>

000d5f06 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5f06:	2300      	movs	r3, #0
   d5f08:	6840      	ldr	r0, [r0, #4]
   d5f0a:	461a      	mov	r2, r3
   d5f0c:	f7ff bf24 	b.w	d5d58 <network_connect>

000d5f10 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5f10:	4b02      	ldr	r3, [pc, #8]	; (d5f1c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5f12:	2203      	movs	r2, #3
   d5f14:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5f16:	4a02      	ldr	r2, [pc, #8]	; (d5f20 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5f18:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5f1a:	4770      	bx	lr
   d5f1c:	2003e644 	.word	0x2003e644
   d5f20:	000db2a8 	.word	0x000db2a8

000d5f24 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5f24:	2100      	movs	r1, #0
   d5f26:	f7ff be9b 	b.w	d5c60 <hal_spi_acquire>

000d5f2a <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d5f2a:	2100      	movs	r1, #0
   d5f2c:	f7ff bea0 	b.w	d5c70 <hal_spi_release>

000d5f30 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5f30:	b510      	push	{r4, lr}
   d5f32:	4604      	mov	r4, r0
   d5f34:	4608      	mov	r0, r1
{
    _spi = spi;
   d5f36:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5f38:	f7ff fe82 	bl	d5c40 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5f3c:	2300      	movs	r3, #0
   d5f3e:	6063      	str	r3, [r4, #4]
}
   d5f40:	4620      	mov	r0, r4
   d5f42:	bd10      	pop	{r4, pc}

000d5f44 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   d5f44:	b510      	push	{r4, lr}
   d5f46:	4604      	mov	r4, r0
    if (!lock())
   d5f48:	7800      	ldrb	r0, [r0, #0]
   d5f4a:	f7ff ffeb 	bl	d5f24 <_ZN8SPIClass4lockEv.isra.0>
   d5f4e:	b938      	cbnz	r0, d5f60 <_ZN8SPIClass3endEv+0x1c>
    {
        hal_spi_end(_spi);
   d5f50:	7820      	ldrb	r0, [r4, #0]
   d5f52:	f7ff fe6d 	bl	d5c30 <hal_spi_end>
        unlock();
   d5f56:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5f5c:	f7ff bfe5 	b.w	d5f2a <_ZN8SPIClass6unlockEv.isra.0>
}
   d5f60:	bd10      	pop	{r4, pc}

000d5f62 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5f62:	b510      	push	{r4, lr}
   d5f64:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5f66:	6800      	ldr	r0, [r0, #0]
   d5f68:	b118      	cbz	r0, d5f72 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5f6a:	f7ff ff65 	bl	d5e38 <free>
            wakeupSource_ = nullptr;
   d5f6e:	2300      	movs	r3, #0
   d5f70:	6023      	str	r3, [r4, #0]
        }
    }
   d5f72:	bd10      	pop	{r4, pc}

000d5f74 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5f74:	b510      	push	{r4, lr}
   d5f76:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5f78:	f7ff fff3 	bl	d5f62 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d5f7c:	4620      	mov	r0, r4
   d5f7e:	bd10      	pop	{r4, pc}

000d5f80 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5f80:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5f82:	4b09      	ldr	r3, [pc, #36]	; (d5fa8 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5f84:	4c09      	ldr	r4, [pc, #36]	; (d5fac <_GLOBAL__sub_I_System+0x2c>)
   d5f86:	2202      	movs	r2, #2
   d5f88:	2000      	movs	r0, #0
   d5f8a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5f8c:	4b08      	ldr	r3, [pc, #32]	; (d5fb0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5f8e:	6020      	str	r0, [r4, #0]
   d5f90:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5f92:	71a0      	strb	r0, [r4, #6]
   d5f94:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5f96:	f7ff febb 	bl	d5d10 <set_system_mode>
SystemClass System;
   d5f9a:	4620      	mov	r0, r4
   d5f9c:	4a05      	ldr	r2, [pc, #20]	; (d5fb4 <_GLOBAL__sub_I_System+0x34>)
   d5f9e:	4906      	ldr	r1, [pc, #24]	; (d5fb8 <_GLOBAL__sub_I_System+0x38>)
   d5fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5fa4:	f002 ba46 	b.w	d8434 <__aeabi_atexit>
   d5fa8:	2003e658 	.word	0x2003e658
   d5fac:	2003e64c 	.word	0x2003e64c
   d5fb0:	ffff0000 	.word	0xffff0000
   d5fb4:	200355cc 	.word	0x200355cc
   d5fb8:	000d5f75 	.word	0x000d5f75

000d5fbc <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5fbc:	b510      	push	{r4, lr}
   d5fbe:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5fc0:	f003 f8ec 	bl	d919c <strlen>
   d5fc4:	3801      	subs	r0, #1
   d5fc6:	1823      	adds	r3, r4, r0
   d5fc8:	4620      	mov	r0, r4
	while(i<j){
   d5fca:	4283      	cmp	r3, r0
   d5fcc:	d906      	bls.n	d5fdc <_Z11str_reversePc+0x20>
		c = *i;
   d5fce:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5fd0:	7819      	ldrb	r1, [r3, #0]
   d5fd2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5fd6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d5fda:	e7f6      	b.n	d5fca <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d5fdc:	bd10      	pop	{r4, pc}

000d5fde <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5fde:	b570      	push	{r4, r5, r6, lr}
   d5fe0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5fe2:	1e91      	subs	r1, r2, #2
   d5fe4:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5fe6:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d5fe8:	d822      	bhi.n	d6030 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d5fea:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d5fec:	b16d      	cbz	r5, d600a <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5fee:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d5ff2:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d5ff6:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d5ff8:	2d09      	cmp	r5, #9
                *ptr += '0';
   d5ffa:	bf94      	ite	ls
   d5ffc:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5ffe:	3157      	addhi	r1, #87	; 0x57
   d6000:	b2c9      	uxtb	r1, r1
   d6002:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d6006:	4635      	mov	r5, r6
	while(a){
   d6008:	e7f0      	b.n	d5fec <ultoa+0xe>
   d600a:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d600c:	4423      	add	r3, r4
            *ptr++ = '0';
   d600e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d6010:	4293      	cmp	r3, r2
   d6012:	d902      	bls.n	d601a <ultoa+0x3c>
            *ptr++ = '0';
   d6014:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d6018:	e7fa      	b.n	d6010 <ultoa+0x32>
   d601a:	1a1a      	subs	r2, r3, r0
   d601c:	4283      	cmp	r3, r0
   d601e:	bf38      	it	cc
   d6020:	2200      	movcc	r2, #0

	*ptr = '\0';
   d6022:	2300      	movs	r3, #0
   d6024:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d6026:	4620      	mov	r0, r4
   d6028:	f7ff ffc8 	bl	d5fbc <_Z11str_reversePc>
	return buffer;
   d602c:	4620      	mov	r0, r4
}
   d602e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d6030:	2000      	movs	r0, #0
   d6032:	e7fc      	b.n	d602e <ultoa+0x50>

000d6034 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6034:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d6036:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6038:	460c      	mov	r4, r1
   d603a:	4615      	mov	r5, r2
	if(a<0){
   d603c:	da0e      	bge.n	d605c <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d603e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d6042:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6046:	bf14      	ite	ne
   d6048:	4258      	negne	r0, r3
   d604a:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d604c:	2301      	movs	r3, #1
		*buffer = '-';
   d604e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d6050:	462a      	mov	r2, r5
   d6052:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d6054:	f7ff ffc3 	bl	d5fde <ultoa>
	}
	return buffer;
}
   d6058:	4620      	mov	r0, r4
   d605a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d605c:	2301      	movs	r3, #1
   d605e:	e7f9      	b.n	d6054 <itoa+0x20>

000d6060 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d6060:	b570      	push	{r4, r5, r6, lr}
   d6062:	b086      	sub	sp, #24
   d6064:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d6066:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d6068:	4668      	mov	r0, sp
   d606a:	f001 fc0b 	bl	d7884 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d606e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6070:	1d34      	adds	r4, r6, #4
   d6072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6074:	682b      	ldr	r3, [r5, #0]
   d6076:	7023      	strb	r3, [r4, #0]
    }
   d6078:	4630      	mov	r0, r6
   d607a:	b006      	add	sp, #24
   d607c:	bd70      	pop	{r4, r5, r6, pc}

000d607e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d607e:	b510      	push	{r4, lr}
   d6080:	4604      	mov	r4, r0
{
	free(buffer);
   d6082:	6800      	ldr	r0, [r0, #0]
   d6084:	f7ff fed8 	bl	d5e38 <free>
}
   d6088:	4620      	mov	r0, r4
   d608a:	bd10      	pop	{r4, pc}

000d608c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d608c:	b510      	push	{r4, lr}
   d608e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6090:	6800      	ldr	r0, [r0, #0]
   d6092:	b108      	cbz	r0, d6098 <_ZN6String10invalidateEv+0xc>
   d6094:	f7ff fed0 	bl	d5e38 <free>
	buffer = NULL;
   d6098:	2300      	movs	r3, #0
	capacity = len = 0;
   d609a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d609e:	6023      	str	r3, [r4, #0]
}
   d60a0:	bd10      	pop	{r4, pc}

000d60a2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d60a2:	b538      	push	{r3, r4, r5, lr}
   d60a4:	4604      	mov	r4, r0
   d60a6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d60a8:	6800      	ldr	r0, [r0, #0]
   d60aa:	3101      	adds	r1, #1
   d60ac:	f7ff fecc 	bl	d5e48 <realloc>
	if (newbuffer) {
   d60b0:	b110      	cbz	r0, d60b8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d60b2:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d60b6:	2001      	movs	r0, #1
	}
	return 0;
}
   d60b8:	bd38      	pop	{r3, r4, r5, pc}

000d60ba <_ZN6String7reserveEj>:
{
   d60ba:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d60bc:	6803      	ldr	r3, [r0, #0]
{
   d60be:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d60c0:	b123      	cbz	r3, d60cc <_ZN6String7reserveEj+0x12>
   d60c2:	6843      	ldr	r3, [r0, #4]
   d60c4:	428b      	cmp	r3, r1
   d60c6:	d301      	bcc.n	d60cc <_ZN6String7reserveEj+0x12>
   d60c8:	2001      	movs	r0, #1
}
   d60ca:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d60cc:	4620      	mov	r0, r4
   d60ce:	f7ff ffe8 	bl	d60a2 <_ZN6String12changeBufferEj>
   d60d2:	2800      	cmp	r0, #0
   d60d4:	d0f9      	beq.n	d60ca <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d60d6:	68a3      	ldr	r3, [r4, #8]
   d60d8:	2b00      	cmp	r3, #0
   d60da:	d1f5      	bne.n	d60c8 <_ZN6String7reserveEj+0xe>
   d60dc:	6822      	ldr	r2, [r4, #0]
   d60de:	7013      	strb	r3, [r2, #0]
   d60e0:	e7f2      	b.n	d60c8 <_ZN6String7reserveEj+0xe>

000d60e2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d60e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d60e4:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d60e6:	4611      	mov	r1, r2
   d60e8:	9201      	str	r2, [sp, #4]
{
   d60ea:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d60ec:	f7ff ffe5 	bl	d60ba <_ZN6String7reserveEj>
   d60f0:	9a01      	ldr	r2, [sp, #4]
   d60f2:	b928      	cbnz	r0, d6100 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d60f4:	4620      	mov	r0, r4
   d60f6:	f7ff ffc9 	bl	d608c <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d60fa:	4620      	mov	r0, r4
   d60fc:	b003      	add	sp, #12
   d60fe:	bd30      	pop	{r4, r5, pc}
	len = length;
   d6100:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d6102:	4629      	mov	r1, r5
   d6104:	6820      	ldr	r0, [r4, #0]
   d6106:	f002 ffe3 	bl	d90d0 <memcpy>
	buffer[len] = 0;
   d610a:	6822      	ldr	r2, [r4, #0]
   d610c:	68a3      	ldr	r3, [r4, #8]
   d610e:	2100      	movs	r1, #0
   d6110:	54d1      	strb	r1, [r2, r3]
	return *this;
   d6112:	e7f2      	b.n	d60fa <_ZN6String4copyEPKcj+0x18>

000d6114 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d6114:	2300      	movs	r3, #0
String::String(const char *cstr)
   d6116:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d6118:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d611c:	4604      	mov	r4, r0
	len = 0;
   d611e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6120:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d6122:	b141      	cbz	r1, d6136 <_ZN6StringC1EPKc+0x22>
   d6124:	4608      	mov	r0, r1
   d6126:	9101      	str	r1, [sp, #4]
   d6128:	f003 f838 	bl	d919c <strlen>
   d612c:	9901      	ldr	r1, [sp, #4]
   d612e:	4602      	mov	r2, r0
   d6130:	4620      	mov	r0, r4
   d6132:	f7ff ffd6 	bl	d60e2 <_ZN6String4copyEPKcj>
}
   d6136:	4620      	mov	r0, r4
   d6138:	b002      	add	sp, #8
   d613a:	bd10      	pop	{r4, pc}

000d613c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d613c:	b513      	push	{r0, r1, r4, lr}
   d613e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6140:	b159      	cbz	r1, d615a <_ZN6StringaSEPKc+0x1e>
   d6142:	4608      	mov	r0, r1
   d6144:	9101      	str	r1, [sp, #4]
   d6146:	f003 f829 	bl	d919c <strlen>
   d614a:	9901      	ldr	r1, [sp, #4]
   d614c:	4602      	mov	r2, r0
   d614e:	4620      	mov	r0, r4
   d6150:	f7ff ffc7 	bl	d60e2 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6154:	4620      	mov	r0, r4
   d6156:	b002      	add	sp, #8
   d6158:	bd10      	pop	{r4, pc}
	else invalidate();
   d615a:	f7ff ff97 	bl	d608c <_ZN6String10invalidateEv>
   d615e:	e7f9      	b.n	d6154 <_ZN6StringaSEPKc+0x18>

000d6160 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d6160:	b510      	push	{r4, lr}
   d6162:	4604      	mov	r4, r0
   d6164:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d6166:	2300      	movs	r3, #0
	capacity = 0;
   d6168:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d616c:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d616e:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d6170:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d6172:	a901      	add	r1, sp, #4
   d6174:	f7ff ff5e 	bl	d6034 <itoa>
	*this = buf;
   d6178:	a901      	add	r1, sp, #4
   d617a:	4620      	mov	r0, r4
   d617c:	f7ff ffde 	bl	d613c <_ZN6StringaSEPKc>
}
   d6180:	4620      	mov	r0, r4
   d6182:	b00a      	add	sp, #40	; 0x28
   d6184:	bd10      	pop	{r4, pc}

000d6186 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6186:	b570      	push	{r4, r5, r6, lr}
   d6188:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d618a:	460e      	mov	r6, r1
   d618c:	b909      	cbnz	r1, d6192 <_ZN6String6concatEPKcj+0xc>
   d618e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d6190:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6192:	b16a      	cbz	r2, d61b0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d6194:	6884      	ldr	r4, [r0, #8]
   d6196:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d6198:	4621      	mov	r1, r4
   d619a:	f7ff ff8e 	bl	d60ba <_ZN6String7reserveEj>
   d619e:	2800      	cmp	r0, #0
   d61a0:	d0f5      	beq.n	d618e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d61a2:	6828      	ldr	r0, [r5, #0]
   d61a4:	68ab      	ldr	r3, [r5, #8]
   d61a6:	4631      	mov	r1, r6
   d61a8:	4418      	add	r0, r3
   d61aa:	f002 ffef 	bl	d918c <strcpy>
	len = newlen;
   d61ae:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d61b0:	2001      	movs	r0, #1
   d61b2:	e7ed      	b.n	d6190 <_ZN6String6concatEPKcj+0xa>

000d61b4 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d61b4:	688a      	ldr	r2, [r1, #8]
   d61b6:	6809      	ldr	r1, [r1, #0]
   d61b8:	f7ff bfe5 	b.w	d6186 <_ZN6String6concatEPKcj>

000d61bc <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d61bc:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d61be:	2300      	movs	r3, #0
	buf[0] = c;
   d61c0:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d61c4:	2201      	movs	r2, #1
   d61c6:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d61c8:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d61cc:	f7ff ffdb 	bl	d6186 <_ZN6String6concatEPKcj>
}
   d61d0:	b003      	add	sp, #12
   d61d2:	f85d fb04 	ldr.w	pc, [sp], #4

000d61d6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d61d6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d61d8:	688a      	ldr	r2, [r1, #8]
   d61da:	6809      	ldr	r1, [r1, #0]
{
   d61dc:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d61de:	f7ff ffd2 	bl	d6186 <_ZN6String6concatEPKcj>
   d61e2:	b910      	cbnz	r0, d61ea <_ZplRK15StringSumHelperRK6String+0x14>
   d61e4:	4620      	mov	r0, r4
   d61e6:	f7ff ff51 	bl	d608c <_ZN6String10invalidateEv>
	return a;
}
   d61ea:	4620      	mov	r0, r4
   d61ec:	bd10      	pop	{r4, pc}

000d61ee <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d61ee:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d61f0:	6882      	ldr	r2, [r0, #8]
   d61f2:	b93a      	cbnz	r2, d6204 <_ZNK6String6equalsEPKc+0x16>
   d61f4:	b121      	cbz	r1, d6200 <_ZNK6String6equalsEPKc+0x12>
   d61f6:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d61f8:	fab0 f080 	clz	r0, r0
   d61fc:	0940      	lsrs	r0, r0, #5
   d61fe:	e000      	b.n	d6202 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6200:	2001      	movs	r0, #1
}
   d6202:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6204:	6800      	ldr	r0, [r0, #0]
   d6206:	b909      	cbnz	r1, d620c <_ZNK6String6equalsEPKc+0x1e>
   d6208:	7800      	ldrb	r0, [r0, #0]
   d620a:	e7f5      	b.n	d61f8 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d620c:	f002 ffb4 	bl	d9178 <strcmp>
   d6210:	e7f2      	b.n	d61f8 <_ZNK6String6equalsEPKc+0xa>

000d6212 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d6212:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d6214:	6883      	ldr	r3, [r0, #8]
   d6216:	4293      	cmp	r3, r2
   d6218:	d907      	bls.n	d622a <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d621a:	6804      	ldr	r4, [r0, #0]
   d621c:	6809      	ldr	r1, [r1, #0]
   d621e:	18a0      	adds	r0, r4, r2
   d6220:	f002 ffe3 	bl	d91ea <strstr>
	if (found == NULL) return -1;
   d6224:	b108      	cbz	r0, d622a <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d6226:	1b00      	subs	r0, r0, r4
}
   d6228:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   d622a:	f04f 30ff 	mov.w	r0, #4294967295
   d622e:	e7fb      	b.n	d6228 <_ZNK6String7indexOfERKS_j+0x16>

000d6230 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   d6230:	2200      	movs	r2, #0
   d6232:	f7ff bfee 	b.w	d6212 <_ZNK6String7indexOfERKS_j>
	...

000d6238 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d6238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d623a:	429a      	cmp	r2, r3
{
   d623c:	460f      	mov	r7, r1
   d623e:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d6240:	490c      	ldr	r1, [pc, #48]	; (d6274 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   d6242:	bf88      	it	hi
   d6244:	4613      	movhi	r3, r2
{
   d6246:	4614      	mov	r4, r2
   d6248:	4606      	mov	r6, r0
	if (left > right) {
   d624a:	bf84      	itt	hi
   d624c:	462c      	movhi	r4, r5
   d624e:	461d      	movhi	r5, r3
	String out;
   d6250:	f7ff ff60 	bl	d6114 <_ZN6StringC1EPKc>
	if (left > len) return out;
   d6254:	68ba      	ldr	r2, [r7, #8]
   d6256:	42a2      	cmp	r2, r4
   d6258:	d30a      	bcc.n	d6270 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d625a:	6839      	ldr	r1, [r7, #0]
   d625c:	42aa      	cmp	r2, r5
   d625e:	bf94      	ite	ls
   d6260:	ebc4 0202 	rsbls	r2, r4, r2
   d6264:	ebc4 0205 	rsbhi	r2, r4, r5
   d6268:	4421      	add	r1, r4
   d626a:	4630      	mov	r0, r6
   d626c:	f7ff ff39 	bl	d60e2 <_ZN6String4copyEPKcj>
	return out;
}
   d6270:	4630      	mov	r0, r6
   d6272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6274:	000db269 	.word	0x000db269

000d6278 <_ZNK6String9substringEj>:
{
   d6278:	b510      	push	{r4, lr}
   d627a:	4604      	mov	r4, r0
	return substring(left, len);
   d627c:	688b      	ldr	r3, [r1, #8]
   d627e:	f7ff ffdb 	bl	d6238 <_ZNK6String9substringEjj>
}
   d6282:	4620      	mov	r0, r4
   d6284:	bd10      	pop	{r4, pc}
	...

000d6288 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d6288:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d628a:	6800      	ldr	r0, [r0, #0]
   d628c:	b140      	cbz	r0, d62a0 <_ZNK6String7toFloatEv+0x18>
   d628e:	f002 fefb 	bl	d9088 <atof>
   d6292:	ec51 0b10 	vmov	r0, r1, d0
   d6296:	f002 fe89 	bl	d8fac <__aeabi_d2f>
   d629a:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d629e:	bd08      	pop	{r3, pc}
	return 0;
   d62a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; d62a8 <_ZNK6String7toFloatEv+0x20>
   d62a4:	e7fb      	b.n	d629e <_ZNK6String7toFloatEv+0x16>
   d62a6:	bf00      	nop
   d62a8:	00000000 	.word	0x00000000

000d62ac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d62ac:	4770      	bx	lr

000d62ae <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d62ae:	4770      	bx	lr

000d62b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d62b0:	4770      	bx	lr

000d62b2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d62b2:	4770      	bx	lr

000d62b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d62b4:	4b06      	ldr	r3, [pc, #24]	; (d62d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d62b6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d62b8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d62ba:	f100 040c 	add.w	r4, r0, #12
	    ||
   d62be:	d005      	beq.n	d62cc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d62c0:	4608      	mov	r0, r1
   d62c2:	f002 f8c3 	bl	d844c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d62c6:	2800      	cmp	r0, #0
	return nullptr;
   d62c8:	bf08      	it	eq
   d62ca:	2400      	moveq	r4, #0
      }
   d62cc:	4620      	mov	r0, r4
   d62ce:	bd10      	pop	{r4, pc}
   d62d0:	000db424 	.word	0x000db424

000d62d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d62d4:	4b06      	ldr	r3, [pc, #24]	; (d62f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d62d6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d62d8:	b510      	push	{r4, lr}
   d62da:	f100 040c 	add.w	r4, r0, #12
	    ||
   d62de:	d005      	beq.n	d62ec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d62e0:	4608      	mov	r0, r1
   d62e2:	f002 f8b3 	bl	d844c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d62e6:	2800      	cmp	r0, #0
	return nullptr;
   d62e8:	bf08      	it	eq
   d62ea:	2400      	moveq	r4, #0
      }
   d62ec:	4620      	mov	r0, r4
   d62ee:	bd10      	pop	{r4, pc}
   d62f0:	000db424 	.word	0x000db424

000d62f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d62f4:	4b06      	ldr	r3, [pc, #24]	; (d6310 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d62f6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d62f8:	b510      	push	{r4, lr}
   d62fa:	f100 040c 	add.w	r4, r0, #12
	    ||
   d62fe:	d005      	beq.n	d630c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6300:	4608      	mov	r0, r1
   d6302:	f002 f8a3 	bl	d844c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d6306:	2800      	cmp	r0, #0
	return nullptr;
   d6308:	bf08      	it	eq
   d630a:	2400      	moveq	r4, #0
      }
   d630c:	4620      	mov	r0, r4
   d630e:	bd10      	pop	{r4, pc}
   d6310:	000db424 	.word	0x000db424

000d6314 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6314:	b510      	push	{r4, lr}
   d6316:	2168      	movs	r1, #104	; 0x68
   d6318:	4604      	mov	r4, r0
   d631a:	f002 f890 	bl	d843e <_ZdlPvj>
   d631e:	4620      	mov	r0, r4
   d6320:	bd10      	pop	{r4, pc}

000d6322 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d6322:	b510      	push	{r4, lr}
   d6324:	2128      	movs	r1, #40	; 0x28
   d6326:	4604      	mov	r4, r0
   d6328:	f002 f889 	bl	d843e <_ZdlPvj>
   d632c:	4620      	mov	r0, r4
   d632e:	bd10      	pop	{r4, pc}

000d6330 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d6330:	b510      	push	{r4, lr}
   d6332:	2130      	movs	r1, #48	; 0x30
   d6334:	4604      	mov	r4, r0
   d6336:	f002 f882 	bl	d843e <_ZdlPvj>
   d633a:	4620      	mov	r0, r4
   d633c:	bd10      	pop	{r4, pc}

000d633e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d633e:	f7fd beae 	b.w	d409e <_ZdlPv>

000d6342 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d6342:	f7fd beac 	b.w	d409e <_ZdlPv>

000d6346 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d6346:	f7fd beaa 	b.w	d409e <_ZdlPv>

000d634a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d634a:	b510      	push	{r4, lr}
          _M_dispose();
   d634c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d634e:	4604      	mov	r4, r0
          _M_dispose();
   d6350:	689b      	ldr	r3, [r3, #8]
   d6352:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6354:	68a3      	ldr	r3, [r4, #8]
   d6356:	3b01      	subs	r3, #1
   d6358:	60a3      	str	r3, [r4, #8]
   d635a:	b92b      	cbnz	r3, d6368 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d635c:	6823      	ldr	r3, [r4, #0]
   d635e:	4620      	mov	r0, r4
   d6360:	68db      	ldr	r3, [r3, #12]
    }
   d6362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6366:	4718      	bx	r3
    }
   d6368:	bd10      	pop	{r4, pc}

000d636a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d636a:	b510      	push	{r4, lr}
   d636c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d636e:	6800      	ldr	r0, [r0, #0]
   d6370:	b108      	cbz	r0, d6376 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6372:	f7ff fb65 	bl	d5a40 <os_mutex_recursive_destroy>
    }
   d6376:	4620      	mov	r0, r4
   d6378:	bd10      	pop	{r4, pc}
	...

000d637c <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d637c:	b510      	push	{r4, lr}
        mutex_.lock();
   d637e:	4b04      	ldr	r3, [pc, #16]	; (d6390 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d6380:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6382:	6818      	ldr	r0, [r3, #0]
   d6384:	f7ff fb64 	bl	d5a50 <os_mutex_recursive_lock>
        locked_ = true;
   d6388:	2301      	movs	r3, #1
   d638a:	7023      	strb	r3, [r4, #0]
    }
   d638c:	bd10      	pop	{r4, pc}
   d638e:	bf00      	nop
   d6390:	2003e664 	.word	0x2003e664

000d6394 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d6394:	b510      	push	{r4, lr}
        mutex_.unlock();
   d6396:	4b04      	ldr	r3, [pc, #16]	; (d63a8 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d6398:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d639a:	6818      	ldr	r0, [r3, #0]
   d639c:	f7ff fb60 	bl	d5a60 <os_mutex_recursive_unlock>
        locked_ = false;
   d63a0:	2300      	movs	r3, #0
   d63a2:	7023      	strb	r3, [r4, #0]
    }
   d63a4:	bd10      	pop	{r4, pc}
   d63a6:	bf00      	nop
   d63a8:	2003e664 	.word	0x2003e664

000d63ac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d63ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d63ae:	2500      	movs	r5, #0
   d63b0:	1cec      	adds	r4, r5, #3
   d63b2:	428c      	cmp	r4, r1
   d63b4:	d80d      	bhi.n	d63d2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d63b6:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d63b8:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d63ba:	5d87      	ldrb	r7, [r0, r6]
   d63bc:	4297      	cmp	r7, r2
   d63be:	d105      	bne.n	d63cc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d63c0:	4426      	add	r6, r4
   d63c2:	42b1      	cmp	r1, r6
   d63c4:	d305      	bcc.n	d63d2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d63c6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d63c8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d63ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d63cc:	3401      	adds	r4, #1
   d63ce:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d63d0:	e7ee      	b.n	d63b0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d63d2:	2000      	movs	r0, #0
   d63d4:	e7f9      	b.n	d63ca <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d63d6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d63d6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d63da:	4604      	mov	r4, r0
   d63dc:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d63e0:	461e      	mov	r6, r3
   d63e2:	4689      	mov	r9, r1
   d63e4:	ab01      	add	r3, sp, #4
   d63e6:	4690      	mov	r8, r2
   d63e8:	460a      	mov	r2, r1
   d63ea:	6a01      	ldr	r1, [r0, #32]
   d63ec:	f7ff ffde 	bl	d63ac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d63f0:	6a25      	ldr	r5, [r4, #32]
   d63f2:	1cb3      	adds	r3, r6, #2
   d63f4:	bb17      	cbnz	r7, d643c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d63f6:	b308      	cbz	r0, d643c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d63f8:	195f      	adds	r7, r3, r5
   d63fa:	1a3f      	subs	r7, r7, r0
   d63fc:	2f1f      	cmp	r7, #31
   d63fe:	d819      	bhi.n	d6434 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6400:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d6404:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6408:	eba5 0209 	sub.w	r2, r5, r9
   d640c:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d640e:	eb00 0109 	add.w	r1, r0, r9
   d6412:	eb06 000a 	add.w	r0, r6, sl
   d6416:	b292      	uxth	r2, r2
   d6418:	4421      	add	r1, r4
   d641a:	4420      	add	r0, r4
   d641c:	f002 fe66 	bl	d90ec <memmove>
            selfData_[offset] = len + 1;
   d6420:	1c73      	adds	r3, r6, #1
   d6422:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d6426:	4632      	mov	r2, r6
   d6428:	4641      	mov	r1, r8
   d642a:	eb04 000a 	add.w	r0, r4, sl
   d642e:	f002 fe4f 	bl	d90d0 <memcpy>
            selfLen_ = staLen + len + 2;
   d6432:	6227      	str	r7, [r4, #32]
}
   d6434:	6a20      	ldr	r0, [r4, #32]
   d6436:	b002      	add	sp, #8
   d6438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d643c:	442b      	add	r3, r5
   d643e:	2b1f      	cmp	r3, #31
   d6440:	d8f8      	bhi.n	d6434 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d6442:	1c73      	adds	r3, r6, #1
   d6444:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d6446:	1ca8      	adds	r0, r5, #2
   d6448:	4425      	add	r5, r4
   d644a:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d644c:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d644e:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d6452:	4641      	mov	r1, r8
   d6454:	4420      	add	r0, r4
   d6456:	f002 fe3b 	bl	d90d0 <memcpy>
        selfLen_ += len;
   d645a:	6a23      	ldr	r3, [r4, #32]
   d645c:	4433      	add	r3, r6
   d645e:	6223      	str	r3, [r4, #32]
   d6460:	e7e8      	b.n	d6434 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
	...

000d6464 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d6464:	4a02      	ldr	r2, [pc, #8]	; (d6470 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d6466:	2100      	movs	r1, #0
   d6468:	200a      	movs	r0, #10
   d646a:	f7ff bc41 	b.w	d5cf0 <panic_>
   d646e:	bf00      	nop
   d6470:	000d591d 	.word	0x000d591d

000d6474 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6474:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6476:	b538      	push	{r3, r4, r5, lr}
   d6478:	4604      	mov	r4, r0
	  switch (__op)
   d647a:	d007      	beq.n	d648c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x18>
   d647c:	2a03      	cmp	r2, #3
   d647e:	d011      	beq.n	d64a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x30>
   d6480:	2a01      	cmp	r2, #1
   d6482:	d101      	bne.n	d6488 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6484:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d6486:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6488:	2000      	movs	r0, #0
   d648a:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d648c:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d648e:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6490:	f7fd fe01 	bl	d4096 <_Znwj>
   d6494:	4603      	mov	r3, r0
   d6496:	2800      	cmp	r0, #0
   d6498:	d0f5      	beq.n	d6486 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
   d649a:	e895 0003 	ldmia.w	r5, {r0, r1}
   d649e:	e883 0003 	stmia.w	r3, {r0, r1}
   d64a2:	e7f0      	b.n	d6486 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d64a4:	6800      	ldr	r0, [r0, #0]
   d64a6:	2800      	cmp	r0, #0
   d64a8:	d0ee      	beq.n	d6488 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
   d64aa:	2108      	movs	r1, #8
   d64ac:	f001 ffc7 	bl	d843e <_ZdlPvj>
   d64b0:	e7ea      	b.n	d6488 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>

000d64b2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d64b2:	b430      	push	{r4, r5}
   d64b4:	460d      	mov	r5, r1
   d64b6:	4611      	mov	r1, r2
   d64b8:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   d64ba:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d64bc:	6809      	ldr	r1, [r1, #0]
   d64be:	6828      	ldr	r0, [r5, #0]
   d64c0:	e9d3 4300 	ldrd	r4, r3, [r3]
   d64c4:	46a4      	mov	ip, r4
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d64c6:	bc30      	pop	{r4, r5}
   d64c8:	4760      	bx	ip

000d64ca <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d64ca:	b510      	push	{r4, lr}
      if (_M_manager)
   d64cc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d64ce:	4604      	mov	r4, r0
      if (_M_manager)
   d64d0:	b113      	cbz	r3, d64d8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d64d2:	2203      	movs	r2, #3
   d64d4:	4601      	mov	r1, r0
   d64d6:	4798      	blx	r3
    }
   d64d8:	4620      	mov	r0, r4
   d64da:	bd10      	pop	{r4, pc}

000d64dc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d64dc:	b510      	push	{r4, lr}
   d64de:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d64e0:	3058      	adds	r0, #88	; 0x58
   d64e2:	f7ff fff2 	bl	d64ca <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   d64e6:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   d64ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d64ee:	f7ff bdc6 	b.w	d607e <_ZN6StringD1Ev>

000d64f2 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d64f2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d64f6:	b2da      	uxtb	r2, r3
   d64f8:	2a09      	cmp	r2, #9
   d64fa:	d801      	bhi.n	d6500 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d64fc:	4618      	mov	r0, r3
   d64fe:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d6500:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d6504:	2b05      	cmp	r3, #5
   d6506:	d801      	bhi.n	d650c <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d6508:	3857      	subs	r0, #87	; 0x57
   d650a:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d650c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d6510:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d6512:	bf94      	ite	ls
   d6514:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d6516:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d651a:	4770      	bx	lr

000d651c <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d651c:	b510      	push	{r4, lr}
            locked_(false) {
   d651e:	2300      	movs	r3, #0
    WiringBleLock() :
   d6520:	4604      	mov	r4, r0
            locked_(false) {
   d6522:	7003      	strb	r3, [r0, #0]
        lock();
   d6524:	f7ff ff2a 	bl	d637c <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d6528:	4620      	mov	r0, r4
   d652a:	bd10      	pop	{r4, pc}

000d652c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d652c:	b510      	push	{r4, lr}
        if (locked_) {
   d652e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d6530:	4604      	mov	r4, r0
        if (locked_) {
   d6532:	b10b      	cbz	r3, d6538 <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d6534:	f7ff ff2e 	bl	d6394 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d6538:	4620      	mov	r0, r4
   d653a:	bd10      	pop	{r4, pc}

000d653c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d653c:	b082      	sub	sp, #8
   d653e:	4603      	mov	r3, r0
    address_ = addr;
   d6540:	6808      	ldr	r0, [r1, #0]
   d6542:	6849      	ldr	r1, [r1, #4]
   d6544:	466a      	mov	r2, sp
   d6546:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d6548:	466a      	mov	r2, sp
   d654a:	ca03      	ldmia	r2!, {r0, r1}
   d654c:	6018      	str	r0, [r3, #0]
}
   d654e:	4618      	mov	r0, r3
    address_ = addr.address_;
   d6550:	6059      	str	r1, [r3, #4]
}
   d6552:	b002      	add	sp, #8
   d6554:	4770      	bx	lr

000d6556 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d6556:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d6558:	7982      	ldrb	r2, [r0, #6]
   d655a:	798b      	ldrb	r3, [r1, #6]
   d655c:	429a      	cmp	r2, r3
   d655e:	d106      	bne.n	d656e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d6560:	2206      	movs	r2, #6
   d6562:	f002 fda7 	bl	d90b4 <memcmp>
   d6566:	fab0 f080 	clz	r0, r0
   d656a:	0940      	lsrs	r0, r0, #5
}
   d656c:	bd08      	pop	{r3, pc}
    return false;
   d656e:	2000      	movs	r0, #0
   d6570:	e7fc      	b.n	d656c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d6572 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d6572:	f04f 33ff 	mov.w	r3, #4294967295
   d6576:	6003      	str	r3, [r0, #0]
   d6578:	8083      	strh	r3, [r0, #4]
}
   d657a:	2000      	movs	r0, #0
   d657c:	4770      	bx	lr

000d657e <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d657e:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d6580:	b508      	push	{r3, lr}
        : address_{} {
   d6582:	6001      	str	r1, [r0, #0]
   d6584:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d6586:	4602      	mov	r2, r0
    clear();
   d6588:	f7ff fff3 	bl	d6572 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d658c:	7191      	strb	r1, [r2, #6]
}
   d658e:	4610      	mov	r0, r2
   d6590:	bd08      	pop	{r3, pc}
	...

000d6594 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d6594:	2201      	movs	r2, #1
   d6596:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6598:	4a06      	ldr	r2, [pc, #24]	; (d65b4 <_ZN8particle7BleUuidC1Ev+0x20>)
   d659a:	6811      	ldr	r1, [r2, #0]
   d659c:	6001      	str	r1, [r0, #0]
   d659e:	6851      	ldr	r1, [r2, #4]
   d65a0:	6041      	str	r1, [r0, #4]
   d65a2:	8911      	ldrh	r1, [r2, #8]
   d65a4:	7a92      	ldrb	r2, [r2, #10]
   d65a6:	7282      	strb	r2, [r0, #10]
   d65a8:	2200      	movs	r2, #0
   d65aa:	8101      	strh	r1, [r0, #8]
   d65ac:	f8c0 200b 	str.w	r2, [r0, #11]
   d65b0:	73c2      	strb	r2, [r0, #15]
}
   d65b2:	4770      	bx	lr
   d65b4:	000db42c 	.word	0x000db42c

000d65b8 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d65b8:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d65ba:	690b      	ldr	r3, [r1, #16]
   d65bc:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d65be:	f101 0210 	add.w	r2, r1, #16
   d65c2:	4603      	mov	r3, r0
   d65c4:	f851 4b04 	ldr.w	r4, [r1], #4
   d65c8:	f843 4b04 	str.w	r4, [r3], #4
   d65cc:	4291      	cmp	r1, r2
   d65ce:	d1f9      	bne.n	d65c4 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d65d0:	bd10      	pop	{r4, pc}

000d65d2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d65d2:	b510      	push	{r4, lr}
    if (uuid128) {
   d65d4:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d65d6:	4604      	mov	r4, r0
    if (uuid128) {
   d65d8:	b1b1      	cbz	r1, d6608 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d65da:	2a01      	cmp	r2, #1
   d65dc:	f101 0210 	add.w	r2, r1, #16
   d65e0:	d10a      	bne.n	d65f8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d65e2:	4601      	mov	r1, r0
   d65e4:	f853 0b04 	ldr.w	r0, [r3], #4
   d65e8:	f841 0b04 	str.w	r0, [r1], #4
   d65ec:	4293      	cmp	r3, r2
   d65ee:	d1f9      	bne.n	d65e4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d65f0:	2301      	movs	r3, #1
   d65f2:	6123      	str	r3, [r4, #16]
}
   d65f4:	4620      	mov	r0, r4
   d65f6:	bd10      	pop	{r4, pc}
   d65f8:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d65fa:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d65fe:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d6602:	429a      	cmp	r2, r3
   d6604:	d1f9      	bne.n	d65fa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d6606:	e7f3      	b.n	d65f0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d6608:	2210      	movs	r2, #16
   d660a:	f002 fd89 	bl	d9120 <memset>
   d660e:	e7f1      	b.n	d65f4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d6610 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d6610:	b538      	push	{r3, r4, r5, lr}
   d6612:	4604      	mov	r4, r0
   d6614:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d6616:	461a      	mov	r2, r3
   d6618:	f7ff ffdb 	bl	d65d2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d661c:	81a5      	strh	r5, [r4, #12]
}
   d661e:	4620      	mov	r0, r4
   d6620:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6624 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d6624:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d6626:	6902      	ldr	r2, [r0, #16]
   d6628:	b922      	cbnz	r2, d6634 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d662a:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d662c:	3800      	subs	r0, #0
   d662e:	bf18      	it	ne
   d6630:	2001      	movne	r0, #1
}
   d6632:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6634:	4902      	ldr	r1, [pc, #8]	; (d6640 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d6636:	2210      	movs	r2, #16
   d6638:	f002 fd3c 	bl	d90b4 <memcmp>
   d663c:	e7f6      	b.n	d662c <_ZNK8particle7BleUuid7isValidEv+0x8>
   d663e:	bf00      	nop
   d6640:	000db44c 	.word	0x000db44c

000d6644 <_ZNK8particle7BleUuid4typeEv>:
}
   d6644:	6900      	ldr	r0, [r0, #16]
   d6646:	4770      	bx	lr

000d6648 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d6648:	b538      	push	{r3, r4, r5, lr}
   d664a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d664c:	2214      	movs	r2, #20
   d664e:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d6650:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d6652:	f002 fd65 	bl	d9120 <memset>
    if (type_ == BleUuidType::SHORT) {
   d6656:	6923      	ldr	r3, [r4, #16]
   d6658:	b93b      	cbnz	r3, d666a <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d665a:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d665c:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d665e:	7b23      	ldrb	r3, [r4, #12]
   d6660:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d6664:	802b      	strh	r3, [r5, #0]
}
   d6666:	4628      	mov	r0, r5
   d6668:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d666a:	2301      	movs	r3, #1
   d666c:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d666e:	f104 0210 	add.w	r2, r4, #16
   d6672:	462b      	mov	r3, r5
   d6674:	f854 1b04 	ldr.w	r1, [r4], #4
   d6678:	f843 1b04 	str.w	r1, [r3], #4
   d667c:	4294      	cmp	r4, r2
   d667e:	d1f9      	bne.n	d6674 <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d6680:	e7f1      	b.n	d6666 <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d6682 <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d6682:	7b42      	ldrb	r2, [r0, #13]
   d6684:	7b00      	ldrb	r0, [r0, #12]
}
   d6686:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d668a:	4770      	bx	lr

000d668c <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d668c:	4770      	bx	lr

000d668e <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d668e:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d6690:	6902      	ldr	r2, [r0, #16]
   d6692:	690b      	ldr	r3, [r1, #16]
   d6694:	429a      	cmp	r2, r3
   d6696:	d106      	bne.n	d66a6 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d6698:	2210      	movs	r2, #16
   d669a:	f002 fd0b 	bl	d90b4 <memcmp>
   d669e:	fab0 f080 	clz	r0, r0
   d66a2:	0940      	lsrs	r0, r0, #5
}
   d66a4:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d66a6:	2000      	movs	r0, #0
   d66a8:	e7fc      	b.n	d66a4 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d66ac <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d66ac:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d66ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d66b2:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d66b4:	4b32      	ldr	r3, [pc, #200]	; (d6780 <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d66b6:	681a      	ldr	r2, [r3, #0]
   d66b8:	6002      	str	r2, [r0, #0]
   d66ba:	685a      	ldr	r2, [r3, #4]
   d66bc:	6042      	str	r2, [r0, #4]
   d66be:	2500      	movs	r5, #0
   d66c0:	891a      	ldrh	r2, [r3, #8]
   d66c2:	7a9b      	ldrb	r3, [r3, #10]
   d66c4:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d66c6:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d66c8:	7283      	strb	r3, [r0, #10]
   d66ca:	f8c0 500b 	str.w	r5, [r0, #11]
   d66ce:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d66d0:	460e      	mov	r6, r1
   d66d2:	b321      	cbz	r1, d671e <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d66d4:	2124      	movs	r1, #36	; 0x24
   d66d6:	4630      	mov	r0, r6
   d66d8:	f002 fd7a 	bl	d91d0 <strnlen>
   d66dc:	2804      	cmp	r0, #4
   d66de:	d121      	bne.n	d6724 <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d66e0:	f8ad 5004 	strh.w	r5, [sp, #4]
   d66e4:	af01      	add	r7, sp, #4
   d66e6:	1cb5      	adds	r5, r6, #2
   d66e8:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d66ea:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d66ee:	f7ff ff00 	bl	d64f2 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d66f2:	f1b0 0800 	subs.w	r8, r0, #0
   d66f6:	db10      	blt.n	d671a <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d66f8:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d66fc:	f7ff fef9 	bl	d64f2 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d6700:	2800      	cmp	r0, #0
   d6702:	db0a      	blt.n	d671a <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d6704:	3502      	adds	r5, #2
   d6706:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d670a:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d670c:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d6710:	d1eb      	bne.n	d66ea <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d6712:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d6716:	ba5b      	rev16	r3, r3
   d6718:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d671a:	2300      	movs	r3, #0
   d671c:	6123      	str	r3, [r4, #16]
}
   d671e:	b002      	add	sp, #8
   d6720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d6724:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6726:	2124      	movs	r1, #36	; 0x24
   d6728:	4630      	mov	r0, r6
   d672a:	f002 fd51 	bl	d91d0 <strnlen>
   d672e:	42a8      	cmp	r0, r5
   d6730:	d806      	bhi.n	d6740 <_ZN8particle7BleUuid9constructEPKc+0x94>
   d6732:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d6734:	2300      	movs	r3, #0
    while (len > 0) {
   d6736:	42bc      	cmp	r4, r7
   d6738:	d0f1      	beq.n	d671e <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d673a:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d673e:	e7fa      	b.n	d6736 <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6740:	2f00      	cmp	r7, #0
   d6742:	d0ec      	beq.n	d671e <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d6744:	5d70      	ldrb	r0, [r6, r5]
   d6746:	f7ff fed4 	bl	d64f2 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d674a:	0603      	lsls	r3, r0, #24
   d674c:	d415      	bmi.n	d677a <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d674e:	0100      	lsls	r0, r0, #4
   d6750:	3f01      	subs	r7, #1
   d6752:	fa5f f880 	uxtb.w	r8, r0
   d6756:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d675a:	2124      	movs	r1, #36	; 0x24
   d675c:	4630      	mov	r0, r6
   d675e:	f002 fd37 	bl	d91d0 <strnlen>
   d6762:	3501      	adds	r5, #1
   d6764:	42a8      	cmp	r0, r5
   d6766:	d908      	bls.n	d677a <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d6768:	5d70      	ldrb	r0, [r6, r5]
   d676a:	f7ff fec2 	bl	d64f2 <_ZN8particle11hexToNibbleEc>
   d676e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d6770:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d6772:	bfa4      	itt	ge
   d6774:	ea40 0008 	orrge.w	r0, r0, r8
   d6778:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d677a:	3501      	adds	r5, #1
   d677c:	e7d3      	b.n	d6726 <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d677e:	bf00      	nop
   d6780:	000db42c 	.word	0x000db42c

000d6784 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d6784:	b513      	push	{r0, r1, r4, lr}
   d6786:	4604      	mov	r4, r0
   d6788:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d678a:	f7ff ff03 	bl	d6594 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d678e:	4620      	mov	r0, r4
   d6790:	9901      	ldr	r1, [sp, #4]
   d6792:	f7ff ff8b 	bl	d66ac <_ZN8particle7BleUuid9constructEPKc>
}
   d6796:	4620      	mov	r0, r4
   d6798:	b002      	add	sp, #8
   d679a:	bd10      	pop	{r4, pc}

000d679c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d679c:	b430      	push	{r4, r5}
   d679e:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d67a2:	b912      	cbnz	r2, d67aa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d67a4:	6a00      	ldr	r0, [r0, #32]
}
   d67a6:	bc30      	pop	{r4, r5}
   d67a8:	4770      	bx	lr
   d67aa:	9502      	str	r5, [sp, #8]
   d67ac:	bc30      	pop	{r4, r5}
   d67ae:	f7ff be12 	b.w	d63d6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d67b2 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d67b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d67b4:	4604      	mov	r4, r0
          selfLen_(0) {
   d67b6:	4602      	mov	r2, r0
   d67b8:	f100 011f 	add.w	r1, r0, #31
   d67bc:	2300      	movs	r3, #0
   d67be:	f802 3b01 	strb.w	r3, [r2], #1
   d67c2:	4291      	cmp	r1, r2
   d67c4:	d1fb      	bne.n	d67be <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d67c6:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d67c8:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d67ca:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d67cc:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d67ce:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d67d2:	4619      	mov	r1, r3
   d67d4:	f10d 020f 	add.w	r2, sp, #15
   d67d8:	4620      	mov	r0, r4
   d67da:	f7ff ffdf 	bl	d679c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d67de:	4620      	mov	r0, r4
   d67e0:	b004      	add	sp, #16
   d67e2:	bd10      	pop	{r4, pc}

000d67e4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d67e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d67e6:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d67e8:	460e      	mov	r6, r1
   d67ea:	ab01      	add	r3, sp, #4
   d67ec:	6a01      	ldr	r1, [r0, #32]
   d67ee:	4604      	mov	r4, r0
   d67f0:	f7ff fddc 	bl	d63ac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d67f4:	4605      	mov	r5, r0
   d67f6:	b178      	cbz	r0, d6818 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d67f8:	9801      	ldr	r0, [sp, #4]
   d67fa:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d67fc:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d67fe:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d6800:	4421      	add	r1, r4
   d6802:	1b52      	subs	r2, r2, r5
   d6804:	4420      	add	r0, r4
   d6806:	f002 fc63 	bl	d90d0 <memcpy>
        selfLen_ -= len;
   d680a:	6a20      	ldr	r0, [r4, #32]
   d680c:	1b40      	subs	r0, r0, r5
   d680e:	6220      	str	r0, [r4, #32]
        remove(type);
   d6810:	4631      	mov	r1, r6
   d6812:	4620      	mov	r0, r4
   d6814:	f7ff ffe6 	bl	d67e4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d6818:	b002      	add	sp, #8
   d681a:	bd70      	pop	{r4, r5, r6, pc}

000d681c <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d681c:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   d681e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6822:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d6824:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   d6826:	8043      	strh	r3, [r0, #2]
   d6828:	220e      	movs	r2, #14
   d682a:	4629      	mov	r1, r5
   d682c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d682e:	7105      	strb	r5, [r0, #4]
   d6830:	3006      	adds	r0, #6
   d6832:	f002 fc75 	bl	d9120 <memset>
   d6836:	f104 0014 	add.w	r0, r4, #20
   d683a:	f7ff feab 	bl	d6594 <_ZN8particle7BleUuidC1Ev>
   d683e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d6842:	f7ff fea7 	bl	d6594 <_ZN8particle7BleUuidC1Ev>
   d6846:	4904      	ldr	r1, [pc, #16]	; (d6858 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d6848:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d684c:	f7ff fc62 	bl	d6114 <_ZN6StringC1EPKc>
    _Function_base() : _M_manager(nullptr) { }
   d6850:	6565      	str	r5, [r4, #84]	; 0x54
    }
   d6852:	4620      	mov	r0, r4
   d6854:	bd38      	pop	{r3, r4, r5, pc}
   d6856:	bf00      	nop
   d6858:	000db269 	.word	0x000db269

000d685c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d685c:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d685e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d6862:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d6866:	4293      	cmp	r3, r2
   d6868:	4618      	mov	r0, r3
   d686a:	d006      	beq.n	d687a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d686c:	6804      	ldr	r4, [r0, #0]
   d686e:	8824      	ldrh	r4, [r4, #0]
   d6870:	428c      	cmp	r4, r1
   d6872:	f103 0308 	add.w	r3, r3, #8
   d6876:	d1f6      	bne.n	d6866 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d6878:	bd10      	pop	{r4, pc}
        return nullptr;
   d687a:	2000      	movs	r0, #0
   d687c:	e7fc      	b.n	d6878 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d6880 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d6880:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6882:	4606      	mov	r6, r0
   d6884:	b085      	sub	sp, #20
   d6886:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d6888:	460d      	mov	r5, r1
   d688a:	2900      	cmp	r1, #0
   d688c:	d050      	beq.n	d6930 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d688e:	2a00      	cmp	r2, #0
   d6890:	d04e      	beq.n	d6930 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
    void onDataReceived(void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance) {
        onDataReceived((callback && instance) ? std::bind(callback, instance, _1, _2, _3) :(BleOnDataReceivedStdFunction) nullptr);
    }

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   d6892:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   d6894:	7823      	ldrb	r3, [r4, #0]
   d6896:	2af4      	cmp	r2, #244	; 0xf4
   d6898:	bf28      	it	cs
   d689a:	22f4      	movcs	r2, #244	; 0xf4
   d689c:	b343      	cbz	r3, d68f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d689e:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d68a0:	0798      	lsls	r0, r3, #30
   d68a2:	d509      	bpl.n	d68b8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d68a4:	89a0      	ldrh	r0, [r4, #12]
   d68a6:	9203      	str	r2, [sp, #12]
   d68a8:	2300      	movs	r3, #0
   d68aa:	f7ff f87b 	bl	d59a4 <hal_ble_gatt_server_set_characteristic_value>
   d68ae:	2800      	cmp	r0, #0
   d68b0:	9a03      	ldr	r2, [sp, #12]
   d68b2:	da03      	bge.n	d68bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d68b4:	b005      	add	sp, #20
   d68b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d68b8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d68bc:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d68be:	7923      	ldrb	r3, [r4, #4]
   d68c0:	06d9      	lsls	r1, r3, #27
   d68c2:	d509      	bpl.n	d68d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   d68c4:	2f01      	cmp	r7, #1
   d68c6:	d007      	beq.n	d68d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d68c8:	89a0      	ldrh	r0, [r4, #12]
   d68ca:	2300      	movs	r3, #0
   d68cc:	4629      	mov	r1, r5
}
   d68ce:	b005      	add	sp, #20
   d68d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d68d4:	f7ff b898 	b.w	d5a08 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d68d8:	069b      	lsls	r3, r3, #26
   d68da:	d5eb      	bpl.n	d68b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d68dc:	2f02      	cmp	r7, #2
   d68de:	d0e9      	beq.n	d68b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d68e0:	89a0      	ldrh	r0, [r4, #12]
   d68e2:	2300      	movs	r3, #0
   d68e4:	4629      	mov	r1, r5
}
   d68e6:	b005      	add	sp, #20
   d68e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d68ec:	f7ff b896 	b.w	d5a1c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d68f0:	8860      	ldrh	r0, [r4, #2]
   d68f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d68f6:	4288      	cmp	r0, r1
   d68f8:	d01c      	beq.n	d6934 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d68fa:	7921      	ldrb	r1, [r4, #4]
   d68fc:	074e      	lsls	r6, r1, #29
   d68fe:	d501      	bpl.n	d6904 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   d6900:	2f01      	cmp	r7, #1
   d6902:	d104      	bne.n	d690e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d6904:	070b      	lsls	r3, r1, #28
   d6906:	d409      	bmi.n	d691c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d6908:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d690c:	e7d2      	b.n	d68b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d690e:	89a1      	ldrh	r1, [r4, #12]
   d6910:	9300      	str	r3, [sp, #0]
   d6912:	4613      	mov	r3, r2
   d6914:	462a      	mov	r2, r5
   d6916:	f7ff f859 	bl	d59cc <hal_ble_gatt_client_write_without_response>
   d691a:	e7cb      	b.n	d68b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d691c:	2f02      	cmp	r7, #2
   d691e:	d0f3      	beq.n	d6908 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d6920:	2300      	movs	r3, #0
   d6922:	89a1      	ldrh	r1, [r4, #12]
   d6924:	9300      	str	r3, [sp, #0]
   d6926:	4613      	mov	r3, r2
   d6928:	462a      	mov	r2, r5
   d692a:	f7ff f845 	bl	d59b8 <hal_ble_gatt_client_write_with_response>
   d692e:	e7c1      	b.n	d68b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d6930:	4802      	ldr	r0, [pc, #8]	; (d693c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   d6932:	e7bf      	b.n	d68b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   d6934:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d6938:	e7bc      	b.n	d68b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d693a:	bf00      	nop
   d693c:	fffffef2 	.word	0xfffffef2

000d6940 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d6940:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6942:	460c      	mov	r4, r1
   d6944:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d6946:	21f4      	movs	r1, #244	; 0xf4
   d6948:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d694a:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d694c:	f002 fc40 	bl	d91d0 <strnlen>
   d6950:	9b01      	ldr	r3, [sp, #4]
   d6952:	4602      	mov	r2, r0
   d6954:	4621      	mov	r1, r4
   d6956:	4628      	mov	r0, r5
}
   d6958:	b003      	add	sp, #12
   d695a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d695e:	f7ff bf8f 	b.w	d6880 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000d6964 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d6964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6968:	2600      	movs	r6, #0
   d696a:	6006      	str	r6, [r0, #0]
   d696c:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d696e:	2028      	movs	r0, #40	; 0x28
   d6970:	460c      	mov	r4, r1
   d6972:	f7fd fb90 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d6976:	1e05      	subs	r5, r0, #0
   d6978:	f105 080c 	add.w	r8, r5, #12
   d697c:	d00f      	beq.n	d699e <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d697e:	2301      	movs	r3, #1
   d6980:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d6984:	4b08      	ldr	r3, [pc, #32]	; (d69a8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d6986:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   d6988:	4640      	mov	r0, r8
   d698a:	f7ff fe03 	bl	d6594 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   d698e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   d6990:	622e      	str	r6, [r5, #32]
   d6992:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   d6996:	4646      	mov	r6, r8
   d6998:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d699a:	6823      	ldr	r3, [r4, #0]
   d699c:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   d699e:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d69a2:	4638      	mov	r0, r7
   d69a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d69a8:	000db3f4 	.word	0x000db3f4

000d69ac <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d69ac:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d69ae:	2500      	movs	r5, #0
   d69b0:	6005      	str	r5, [r0, #0]
   d69b2:	4606      	mov	r6, r0
   d69b4:	2030      	movs	r0, #48	; 0x30
   d69b6:	f7fd fb6e 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d69ba:	4604      	mov	r4, r0
   d69bc:	b188      	cbz	r0, d69e2 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d69be:	2301      	movs	r3, #1
   d69c0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d69c4:	4b09      	ldr	r3, [pc, #36]	; (d69ec <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d69c6:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d69c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d69cc:	8183      	strh	r3, [r0, #12]
   d69ce:	300e      	adds	r0, #14
   d69d0:	f7ff fdd5 	bl	d657e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d69d4:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d69d8:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d69dc:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d69e0:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d69e2:	6074      	str	r4, [r6, #4]
   d69e4:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d69e6:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d69e8:	4630      	mov	r0, r6
   d69ea:	bd70      	pop	{r4, r5, r6, pc}
   d69ec:	000db410 	.word	0x000db410

000d69f0 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d69f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d69f2:	460d      	mov	r5, r1
   d69f4:	4604      	mov	r4, r0
    WiringBleLock lk;
   d69f6:	a801      	add	r0, sp, #4
   d69f8:	f7ff fd90 	bl	d651c <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d69fc:	682a      	ldr	r2, [r5, #0]
   d69fe:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d6a02:	6023      	str	r3, [r4, #0]
   d6a04:	6853      	ldr	r3, [r2, #4]
   d6a06:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d6a08:	a801      	add	r0, sp, #4
   d6a0a:	f7ff fd8f 	bl	d652c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d6a0e:	4620      	mov	r0, r4
   d6a10:	b003      	add	sp, #12
   d6a12:	bd30      	pop	{r4, r5, pc}

000d6a14 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d6a14:	b530      	push	{r4, r5, lr}
   d6a16:	4605      	mov	r5, r0
   d6a18:	b087      	sub	sp, #28
   d6a1a:	460c      	mov	r4, r1
    WiringBleLock lk;
   d6a1c:	a801      	add	r0, sp, #4
   d6a1e:	f7ff fd7d 	bl	d651c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d6a22:	682a      	ldr	r2, [r5, #0]
   d6a24:	6823      	ldr	r3, [r4, #0]
   d6a26:	8812      	ldrh	r2, [r2, #0]
   d6a28:	881b      	ldrh	r3, [r3, #0]
   d6a2a:	429a      	cmp	r2, r3
   d6a2c:	d10d      	bne.n	d6a4a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d6a2e:	4629      	mov	r1, r5
   d6a30:	a802      	add	r0, sp, #8
   d6a32:	f7ff ffdd 	bl	d69f0 <_ZNK8particle13BlePeerDevice7addressEv>
   d6a36:	4621      	mov	r1, r4
   d6a38:	a804      	add	r0, sp, #16
   d6a3a:	f7ff ffd9 	bl	d69f0 <_ZNK8particle13BlePeerDevice7addressEv>
   d6a3e:	a904      	add	r1, sp, #16
   d6a40:	a802      	add	r0, sp, #8
   d6a42:	f7ff fd88 	bl	d6556 <_ZNK8particle10BleAddresseqERKS0_>
   d6a46:	4604      	mov	r4, r0
   d6a48:	b900      	cbnz	r0, d6a4c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d6a4a:	2400      	movs	r4, #0
    WiringBleLock lk;
   d6a4c:	a801      	add	r0, sp, #4
   d6a4e:	f7ff fd6d 	bl	d652c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d6a52:	4620      	mov	r0, r4
   d6a54:	b007      	add	sp, #28
   d6a56:	bd30      	pop	{r4, r5, pc}

000d6a58 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d6a58:	b510      	push	{r4, lr}
   d6a5a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d6a5c:	2054      	movs	r0, #84	; 0x54
   d6a5e:	f7fd fb1a 	bl	d4096 <_Znwj>
   d6a62:	4601      	mov	r1, r0
   d6a64:	b160      	cbz	r0, d6a80 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d6a66:	2300      	movs	r3, #0
   d6a68:	e9c0 3300 	strd	r3, r3, [r0]
   d6a6c:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d6a70:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d6a74:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d6a78:	6203      	str	r3, [r0, #32]
   d6a7a:	62c3      	str	r3, [r0, #44]	; 0x2c
   d6a7c:	63c3      	str	r3, [r0, #60]	; 0x3c
   d6a7e:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d6a80:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d6a82:	b919      	cbnz	r1, d6a8c <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d6a84:	4a09      	ldr	r2, [pc, #36]	; (d6aac <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d6a86:	200a      	movs	r0, #10
   d6a88:	f7ff f932 	bl	d5cf0 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d6a8c:	2000      	movs	r0, #0
   d6a8e:	f7fe ff55 	bl	d593c <hal_ble_stack_init>
   d6a92:	b120      	cbz	r0, d6a9e <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d6a94:	4a05      	ldr	r2, [pc, #20]	; (d6aac <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d6a96:	2100      	movs	r1, #0
   d6a98:	200a      	movs	r0, #10
   d6a9a:	f7ff f929 	bl	d5cf0 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d6a9e:	6821      	ldr	r1, [r4, #0]
   d6aa0:	4803      	ldr	r0, [pc, #12]	; (d6ab0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d6aa2:	2200      	movs	r2, #0
   d6aa4:	f7fe ffa6 	bl	d59f4 <hal_ble_set_callback_on_periph_link_events>
}
   d6aa8:	4620      	mov	r0, r4
   d6aaa:	bd10      	pop	{r4, pc}
   d6aac:	000d591d 	.word	0x000d591d
   d6ab0:	000d6e3d 	.word	0x000d6e3d

000d6ab4 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d6ab4:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d6ab6:	4c0b      	ldr	r4, [pc, #44]	; (d6ae4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6ab8:	7823      	ldrb	r3, [r4, #0]
   d6aba:	f3bf 8f5b 	dmb	ish
   d6abe:	07db      	lsls	r3, r3, #31
   d6ac0:	d40e      	bmi.n	d6ae0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d6ac2:	4620      	mov	r0, r4
   d6ac4:	f7fd faed 	bl	d40a2 <__cxa_guard_acquire>
   d6ac8:	b150      	cbz	r0, d6ae0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d6aca:	4807      	ldr	r0, [pc, #28]	; (d6ae8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6acc:	f7ff ffc4 	bl	d6a58 <_ZN8particle14BleLocalDeviceC1Ev>
   d6ad0:	4620      	mov	r0, r4
   d6ad2:	f7fd faeb 	bl	d40ac <__cxa_guard_release>
   d6ad6:	4a05      	ldr	r2, [pc, #20]	; (d6aec <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d6ad8:	4905      	ldr	r1, [pc, #20]	; (d6af0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d6ada:	4803      	ldr	r0, [pc, #12]	; (d6ae8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6adc:	f001 fcaa 	bl	d8434 <__aeabi_atexit>
    return instance;
}
   d6ae0:	4801      	ldr	r0, [pc, #4]	; (d6ae8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6ae2:	bd10      	pop	{r4, pc}
   d6ae4:	2003e65c 	.word	0x2003e65c
   d6ae8:	2003e668 	.word	0x2003e668
   d6aec:	200355cc 	.word	0x200355cc
   d6af0:	000d6cbd 	.word	0x000d6cbd

000d6af4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d6af4:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   d6af6:	6803      	ldr	r3, [r0, #0]
   d6af8:	3b09      	subs	r3, #9
   d6afa:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d6afc:	b08d      	sub	sp, #52	; 0x34
   d6afe:	4604      	mov	r4, r0
   d6b00:	460d      	mov	r5, r1
    switch (event->type) {
   d6b02:	d811      	bhi.n	d6b28 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d6b04:	f7ff ffd6 	bl	d6ab4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d6b08:	88a1      	ldrh	r1, [r4, #4]
   d6b0a:	6800      	ldr	r0, [r0, #0]
   d6b0c:	f7ff fea6 	bl	d685c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d6b10:	4603      	mov	r3, r0
   d6b12:	b958      	cbnz	r0, d6b2c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d6b14:	2220      	movs	r2, #32
   d6b16:	e9cd 2004 	strd	r2, r0, [sp, #16]
   d6b1a:	4a0b      	ldr	r2, [pc, #44]	; (d6b48 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   d6b1c:	9200      	str	r2, [sp, #0]
   d6b1e:	490b      	ldr	r1, [pc, #44]	; (d6b4c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   d6b20:	aa04      	add	r2, sp, #16
   d6b22:	2032      	movs	r0, #50	; 0x32
   d6b24:	f7ff f8ec 	bl	d5d00 <log_message>
}
   d6b28:	b00d      	add	sp, #52	; 0x34
   d6b2a:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   d6b2c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   d6b2e:	2a00      	cmp	r2, #0
   d6b30:	d0fa      	beq.n	d6b28 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   d6b32:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6b36:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   d6b3a:	e9cd 1203 	strd	r1, r2, [sp, #12]
   d6b3e:	6dac      	ldr	r4, [r5, #88]	; 0x58
   d6b40:	aa04      	add	r2, sp, #16
   d6b42:	a903      	add	r1, sp, #12
   d6b44:	47a0      	blx	r4
}
   d6b46:	e7ef      	b.n	d6b28 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   d6b48:	000db303 	.word	0x000db303
   d6b4c:	000db2dc 	.word	0x000db2dc

000d6b50 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d6b50:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   d6b52:	2000      	movs	r0, #0
   d6b54:	f7fe fef2 	bl	d593c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   d6b58:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d6b5c:	bd08      	pop	{r3, pc}

000d6b5e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d6b5e:	4608      	mov	r0, r1
   d6b60:	b911      	cbnz	r1, d6b68 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d6b62:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d6b64:	f7fe bef2 	b.w	d594c <hal_ble_gap_set_advertising_data>
   d6b68:	6a09      	ldr	r1, [r1, #32]
   d6b6a:	2200      	movs	r2, #0
   d6b6c:	e7fa      	b.n	d6b64 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d6b6e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d6b6e:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d6b70:	4608      	mov	r0, r1
   d6b72:	b929      	cbnz	r1, d6b80 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d6b74:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d6b76:	b003      	add	sp, #12
   d6b78:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6b7c:	f7fe beee 	b.w	d595c <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d6b80:	2101      	movs	r1, #1
   d6b82:	9001      	str	r0, [sp, #4]
   d6b84:	f7ff fe2e 	bl	d67e4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6b88:	9801      	ldr	r0, [sp, #4]
   d6b8a:	2200      	movs	r2, #0
   d6b8c:	6a01      	ldr	r1, [r0, #32]
   d6b8e:	e7f2      	b.n	d6b76 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d6b90 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d6b90:	b538      	push	{r3, r4, r5, lr}
   d6b92:	4604      	mov	r4, r0
   d6b94:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   d6b96:	f7ff ffe2 	bl	d6b5e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d6b9a:	2800      	cmp	r0, #0
   d6b9c:	db0a      	blt.n	d6bb4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   d6b9e:	4629      	mov	r1, r5
   d6ba0:	4620      	mov	r0, r4
   d6ba2:	f7ff ffe4 	bl	d6b6e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d6ba6:	2800      	cmp	r0, #0
   d6ba8:	db04      	blt.n	d6bb4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   d6baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   d6bae:	2000      	movs	r0, #0
   d6bb0:	f7fe bedc 	b.w	d596c <hal_ble_gap_start_advertising>
}
   d6bb4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6bb8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d6bb8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6bba:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d6bbc:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6bbe:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6bc0:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d6bc2:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6bc4:	f7fd fa67 	bl	d4096 <_Znwj>
   d6bc8:	b118      	cbz	r0, d6bd2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d6bca:	682b      	ldr	r3, [r5, #0]
   d6bcc:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6bce:	686b      	ldr	r3, [r5, #4]
   d6bd0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d6bd2:	4b03      	ldr	r3, [pc, #12]	; (d6be0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   d6bd4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6bd6:	4b03      	ldr	r3, [pc, #12]	; (d6be4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6bd8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6bda:	60a3      	str	r3, [r4, #8]
      }
   d6bdc:	4620      	mov	r0, r4
   d6bde:	bd38      	pop	{r3, r4, r5, pc}
   d6be0:	000d64b3 	.word	0x000d64b3
   d6be4:	000d6475 	.word	0x000d6475

000d6be8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d6be8:	680b      	ldr	r3, [r1, #0]
   d6bea:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d6bec:	b113      	cbz	r3, d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6bee:	685a      	ldr	r2, [r3, #4]
   d6bf0:	3201      	adds	r2, #1
   d6bf2:	605a      	str	r2, [r3, #4]
      }
   d6bf4:	4770      	bx	lr

000d6bf6 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d6bf6:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6bf8:	f851 3b04 	ldr.w	r3, [r1], #4
   d6bfc:	4604      	mov	r4, r0
   d6bfe:	f840 3b04 	str.w	r3, [r0], #4
   d6c02:	f7ff fff1 	bl	d6be8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d6c06:	6823      	ldr	r3, [r4, #0]
   d6c08:	b90b      	cbnz	r3, d6c0e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d6c0a:	f7ff fc2b 	bl	d6464 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d6c0e:	4620      	mov	r0, r4
   d6c10:	bd10      	pop	{r4, pc}

000d6c12 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d6c12:	b510      	push	{r4, lr}
   d6c14:	f851 3b04 	ldr.w	r3, [r1], #4
   d6c18:	4604      	mov	r4, r0
   d6c1a:	f840 3b04 	str.w	r3, [r0], #4
   d6c1e:	f7ff ffe3 	bl	d6be8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d6c22:	4620      	mov	r0, r4
   d6c24:	bd10      	pop	{r4, pc}

000d6c26 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d6c26:	b510      	push	{r4, lr}
   d6c28:	f851 3b04 	ldr.w	r3, [r1], #4
   d6c2c:	4604      	mov	r4, r0
   d6c2e:	f840 3b04 	str.w	r3, [r0], #4
   d6c32:	f7ff ffd9 	bl	d6be8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d6c36:	4620      	mov	r0, r4
   d6c38:	bd10      	pop	{r4, pc}

000d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d6c3a:	b510      	push	{r4, lr}
   d6c3c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d6c3e:	6800      	ldr	r0, [r0, #0]
   d6c40:	b128      	cbz	r0, d6c4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d6c42:	6843      	ldr	r3, [r0, #4]
   d6c44:	3b01      	subs	r3, #1
   d6c46:	6043      	str	r3, [r0, #4]
   d6c48:	b90b      	cbnz	r3, d6c4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d6c4a:	f7ff fb7e 	bl	d634a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d6c4e:	4620      	mov	r0, r4
   d6c50:	bd10      	pop	{r4, pc}

000d6c52 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d6c52:	b510      	push	{r4, lr}
   d6c54:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d6c56:	3004      	adds	r0, #4
   d6c58:	f7ff ffef 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6c5c:	4620      	mov	r0, r4
   d6c5e:	bd10      	pop	{r4, pc}

000d6c60 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6c60:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6c62:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6c66:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d6c68:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6c6c:	42ae      	cmp	r6, r5
   d6c6e:	d004      	beq.n	d6c7a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d6c70:	1d28      	adds	r0, r5, #4
   d6c72:	f7ff ffe2 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c76:	3508      	adds	r5, #8
   d6c78:	e7f8      	b.n	d6c6c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d6c7a:	6820      	ldr	r0, [r4, #0]
   d6c7c:	f7ff f8dc 	bl	d5e38 <free>
}
   d6c80:	4620      	mov	r0, r4
   d6c82:	bd70      	pop	{r4, r5, r6, pc}

000d6c84 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6c84:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6c86:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6c8a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d6c8c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6c90:	42ae      	cmp	r6, r5
   d6c92:	d004      	beq.n	d6c9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d6c94:	1d28      	adds	r0, r5, #4
   d6c96:	f7ff ffd0 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c9a:	3508      	adds	r5, #8
   d6c9c:	e7f8      	b.n	d6c90 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d6c9e:	6820      	ldr	r0, [r4, #0]
   d6ca0:	f7ff f8ca 	bl	d5e38 <free>
}
   d6ca4:	4620      	mov	r0, r4
   d6ca6:	bd70      	pop	{r4, r5, r6, pc}

000d6ca8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6ca8:	b510      	push	{r4, lr}
   d6caa:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d6cac:	3024      	adds	r0, #36	; 0x24
   d6cae:	f7ff ffe9 	bl	d6c84 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6cb2:	f104 0018 	add.w	r0, r4, #24
   d6cb6:	f7ff ffd3 	bl	d6c60 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d6cba:	bd10      	pop	{r4, pc}

000d6cbc <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d6cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d6cbe:	6804      	ldr	r4, [r0, #0]
   d6cc0:	4606      	mov	r6, r0
   d6cc2:	b324      	cbz	r4, d6d0e <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   d6cc4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6cc8:	f7ff fbff 	bl	d64ca <_ZNSt14_Function_baseD1Ev>
   d6ccc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6cd0:	f7ff fbfb 	bl	d64ca <_ZNSt14_Function_baseD1Ev>
   d6cd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6cd8:	f7ff fbf7 	bl	d64ca <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   d6cdc:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d6ce0:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6ce4:	42af      	cmp	r7, r5
   d6ce6:	d004      	beq.n	d6cf2 <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   d6ce8:	1d28      	adds	r0, r5, #4
   d6cea:	f7ff ffa6 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6cee:	3508      	adds	r5, #8
   d6cf0:	e7f8      	b.n	d6ce4 <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   d6cf2:	69a0      	ldr	r0, [r4, #24]
   d6cf4:	f7ff f8a0 	bl	d5e38 <free>
    ~BleLocalDeviceImpl() = default;
   d6cf8:	f104 000c 	add.w	r0, r4, #12
   d6cfc:	f7ff ffc2 	bl	d6c84 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6d00:	4620      	mov	r0, r4
   d6d02:	f7ff ffad 	bl	d6c60 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d6d06:	2154      	movs	r1, #84	; 0x54
   d6d08:	4620      	mov	r0, r4
   d6d0a:	f001 fb98 	bl	d843e <_ZdlPvj>
   d6d0e:	4630      	mov	r0, r6
   d6d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d12 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   d6d12:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6d14:	b510      	push	{r4, lr}
      if (_M_empty())
   d6d16:	b90a      	cbnz	r2, d6d1c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   d6d18:	f001 fb95 	bl	d8446 <_ZSt25__throw_bad_function_callv>
    }
   d6d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6d20:	68c3      	ldr	r3, [r0, #12]
   d6d22:	4718      	bx	r3

000d6d24 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6d24:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d28:	4604      	mov	r4, r0
   d6d2a:	460d      	mov	r5, r1
   d6d2c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6d2e:	d914      	bls.n	d6d5a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6d30:	4290      	cmp	r0, r2
   d6d32:	d213      	bcs.n	d6d5c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6d34:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6d38:	1a75      	subs	r5, r6, r1
   d6d3a:	f1a1 0708 	sub.w	r7, r1, #8
   d6d3e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6d40:	42b7      	cmp	r7, r6
   d6d42:	d018      	beq.n	d6d76 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6d44:	b11c      	cbz	r4, d6d4e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d6d46:	4631      	mov	r1, r6
   d6d48:	4620      	mov	r0, r4
   d6d4a:	f7ff ff6c 	bl	d6c26 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6d4e:	1d30      	adds	r0, r6, #4
   d6d50:	f7ff ff73 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6d54:	3e08      	subs	r6, #8
   d6d56:	3c08      	subs	r4, #8
   d6d58:	e7f2      	b.n	d6d40 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6d5a:	d00c      	beq.n	d6d76 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6d5c:	42b5      	cmp	r5, r6
   d6d5e:	d00a      	beq.n	d6d76 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6d60:	b11c      	cbz	r4, d6d6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6d62:	4629      	mov	r1, r5
   d6d64:	4620      	mov	r0, r4
   d6d66:	f7ff ff5e 	bl	d6c26 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6d6a:	1d28      	adds	r0, r5, #4
   d6d6c:	f7ff ff65 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6d70:	3508      	adds	r5, #8
   d6d72:	3408      	adds	r4, #8
   d6d74:	e7f2      	b.n	d6d5c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d6d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d6d7c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6d80:	4605      	mov	r5, r0
   d6d82:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d6d84:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d6d88:	42a7      	cmp	r7, r4
   d6d8a:	d103      	bne.n	d6d94 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   d6d8c:	2600      	movs	r6, #0
}
   d6d8e:	4630      	mov	r0, r6
   d6d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   d6d94:	4641      	mov	r1, r8
   d6d96:	4620      	mov	r0, r4
   d6d98:	f7ff fe3c 	bl	d6a14 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d6d9c:	4606      	mov	r6, r0
   d6d9e:	b908      	cbnz	r0, d6da4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   d6da0:	3408      	adds	r4, #8
   d6da2:	e7f1      	b.n	d6d88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d6da4:	2c00      	cmp	r4, #0
   d6da6:	d0f1      	beq.n	d6d8c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   d6da8:	1d20      	adds	r0, r4, #4
   d6daa:	f7ff ff46 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d6dae:	e9d5 3200 	ldrd	r3, r2, [r5]
   d6db2:	f104 0108 	add.w	r1, r4, #8
   d6db6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6dba:	4620      	mov	r0, r4
   d6dbc:	f7ff ffb2 	bl	d6d24 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d6dc0:	686b      	ldr	r3, [r5, #4]
   d6dc2:	3b01      	subs	r3, #1
   d6dc4:	606b      	str	r3, [r5, #4]
    return true;
   d6dc6:	e7e2      	b.n	d6d8e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000d6dc8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6dca:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6dcc:	6846      	ldr	r6, [r0, #4]
   d6dce:	4668      	mov	r0, sp
   d6dd0:	f7ff ff29 	bl	d6c26 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6dd4:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   d6dd8:	429f      	cmp	r7, r3
   d6dda:	db12      	blt.n	d6e02 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   d6ddc:	3701      	adds	r7, #1
        if (n > 0) {
   d6dde:	2f00      	cmp	r7, #0
   d6de0:	dd29      	ble.n	d6e36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   d6de2:	00f8      	lsls	r0, r7, #3
   d6de4:	f7ff f820 	bl	d5e28 <malloc>
            if (!d) {
   d6de8:	4605      	mov	r5, r0
   d6dea:	b1f0      	cbz	r0, d6e2a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   d6dec:	e9d4 1200 	ldrd	r1, r2, [r4]
   d6df0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6df4:	f7ff ff96 	bl	d6d24 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6df8:	6820      	ldr	r0, [r4, #0]
   d6dfa:	f7ff f81d 	bl	d5e38 <free>
        data_ = d;
   d6dfe:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d6e00:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   d6e02:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6e04:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6e06:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d6e0a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6e0e:	4631      	mov	r1, r6
   d6e10:	f106 0008 	add.w	r0, r6, #8
   d6e14:	f7ff ff86 	bl	d6d24 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6e18:	b11e      	cbz	r6, d6e22 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   d6e1a:	4669      	mov	r1, sp
   d6e1c:	4630      	mov	r0, r6
   d6e1e:	f7ff ff02 	bl	d6c26 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d6e22:	6863      	ldr	r3, [r4, #4]
   d6e24:	3301      	adds	r3, #1
   d6e26:	6063      	str	r3, [r4, #4]
    return true;
   d6e28:	2501      	movs	r5, #1
   d6e2a:	a801      	add	r0, sp, #4
   d6e2c:	f7ff ff05 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6e30:	4628      	mov	r0, r5
   d6e32:	b003      	add	sp, #12
   d6e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d6e36:	2500      	movs	r5, #0
   d6e38:	e7de      	b.n	d6df8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>
	...

000d6e3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6e40:	4605      	mov	r5, r0
   d6e42:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d6e44:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6e46:	460c      	mov	r4, r1
        WiringBleLock lk;
   d6e48:	f7ff fb68 	bl	d651c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d6e4c:	682e      	ldr	r6, [r5, #0]
   d6e4e:	2e04      	cmp	r6, #4
   d6e50:	d06b      	beq.n	d6f2a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   d6e52:	d807      	bhi.n	d6e64 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   d6e54:	2e03      	cmp	r6, #3
   d6e56:	d028      	beq.n	d6eaa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   d6e58:	a803      	add	r0, sp, #12
   d6e5a:	f7ff fb67 	bl	d652c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d6e5e:	b00e      	add	sp, #56	; 0x38
   d6e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   d6e64:	f1a6 030c 	sub.w	r3, r6, #12
   d6e68:	2b03      	cmp	r3, #3
   d6e6a:	d8f5      	bhi.n	d6e58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6e6c:	89a9      	ldrh	r1, [r5, #12]
   d6e6e:	4620      	mov	r0, r4
   d6e70:	f7ff fcf4 	bl	d685c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6e74:	4607      	mov	r7, r0
   d6e76:	2800      	cmp	r0, #0
   d6e78:	d0ee      	beq.n	d6e58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   d6e7a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d6e7c:	2b00      	cmp	r3, #0
   d6e7e:	d0eb      	beq.n	d6e58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   d6e80:	2210      	movs	r2, #16
   d6e82:	2100      	movs	r1, #0
   d6e84:	a807      	add	r0, sp, #28
   d6e86:	f002 f94b 	bl	d9120 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d6e8a:	2e0d      	cmp	r6, #13
                        };
   d6e8c:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   d6e8e:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d6e92:	f040 8092 	bne.w	d6fba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   d6e96:	686b      	ldr	r3, [r5, #4]
   d6e98:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   d6e9a:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d6e9c:	9308      	str	r3, [sp, #32]
   d6e9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d6ea0:	a906      	add	r1, sp, #24
   d6ea2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6ea6:	4798      	blx	r3
   d6ea8:	e7d6      	b.n	d6e58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   d6eaa:	a804      	add	r0, sp, #16
   d6eac:	f7ff fd7e 	bl	d69ac <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d6eb0:	9b04      	ldr	r3, [sp, #16]
   d6eb2:	89aa      	ldrh	r2, [r5, #12]
   d6eb4:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   d6eb6:	6869      	ldr	r1, [r5, #4]
   d6eb8:	9804      	ldr	r0, [sp, #16]
   d6eba:	3108      	adds	r1, #8
   d6ebc:	3002      	adds	r0, #2
   d6ebe:	f7ff fb3d 	bl	d653c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   d6ec2:	a904      	add	r1, sp, #16
   d6ec4:	a806      	add	r0, sp, #24
   d6ec6:	f7ff feae 	bl	d6c26 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   d6eca:	a906      	add	r1, sp, #24
   d6ecc:	f104 0018 	add.w	r0, r4, #24
   d6ed0:	f7ff ff7a 	bl	d6dc8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d6ed4:	4605      	mov	r5, r0
   d6ed6:	a807      	add	r0, sp, #28
   d6ed8:	f7ff feaf 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6edc:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d6ede:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d6ee0:	b98d      	cbnz	r5, d6f06 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   d6ee2:	4b3e      	ldr	r3, [pc, #248]	; (d6fdc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   d6ee4:	493e      	ldr	r1, [pc, #248]	; (d6fe0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6ee6:	9300      	str	r3, [sp, #0]
   d6ee8:	2032      	movs	r0, #50	; 0x32
   d6eea:	462b      	mov	r3, r5
   d6eec:	aa06      	add	r2, sp, #24
   d6eee:	9507      	str	r5, [sp, #28]
   d6ef0:	f7fe ff06 	bl	d5d00 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d6ef4:	9b04      	ldr	r3, [sp, #16]
   d6ef6:	4629      	mov	r1, r5
   d6ef8:	8818      	ldrh	r0, [r3, #0]
   d6efa:	f7fe fd3f 	bl	d597c <hal_ble_gap_disconnect>
   d6efe:	a805      	add	r0, sp, #20
   d6f00:	f7ff fe9b 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f04:	e7a8      	b.n	d6e58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   d6f06:	4a37      	ldr	r2, [pc, #220]	; (d6fe4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   d6f08:	9200      	str	r2, [sp, #0]
   d6f0a:	2300      	movs	r3, #0
   d6f0c:	4934      	ldr	r1, [pc, #208]	; (d6fe0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6f0e:	9307      	str	r3, [sp, #28]
   d6f10:	aa06      	add	r2, sp, #24
   d6f12:	2001      	movs	r0, #1
   d6f14:	f7fe fef4 	bl	d5d00 <log_message>
                if (impl->connectedCallback_) {
   d6f18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6f1a:	2b00      	cmp	r3, #0
   d6f1c:	d0ef      	beq.n	d6efe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   d6f1e:	a904      	add	r1, sp, #16
   d6f20:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6f24:	f7ff fef5 	bl	d6d12 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   d6f28:	e7e9      	b.n	d6efe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6f2a:	89a9      	ldrh	r1, [r5, #12]
   d6f2c:	4620      	mov	r0, r4
   d6f2e:	f7ff fc95 	bl	d685c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6f32:	4606      	mov	r6, r0
   d6f34:	2800      	cmp	r0, #0
   d6f36:	d08f      	beq.n	d6e58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   d6f38:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   d6f3a:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d6f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6f42:	802a      	strh	r2, [r5, #0]
   d6f44:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   d6f48:	4299      	cmp	r1, r3
   d6f4a:	d003      	beq.n	d6f54 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   d6f4c:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6f50:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   d6f52:	e7f9      	b.n	d6f48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   d6f54:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   d6f58:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d6f5c:	45b8      	cmp	r8, r7
   d6f5e:	d004      	beq.n	d6f6a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   d6f60:	1d38      	adds	r0, r7, #4
   d6f62:	f7ff fe6a 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f66:	3708      	adds	r7, #8
   d6f68:	e7f8      	b.n	d6f5c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   d6f6a:	2300      	movs	r3, #0
   d6f6c:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   d6f6e:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   d6f72:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d6f76:	45b8      	cmp	r8, r7
   d6f78:	d004      	beq.n	d6f84 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   d6f7a:	1d38      	adds	r0, r7, #4
   d6f7c:	f7ff fe5d 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f80:	3708      	adds	r7, #8
   d6f82:	e7f8      	b.n	d6f76 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   d6f84:	2300      	movs	r3, #0
   d6f86:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   d6f88:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   d6f8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6f8c:	b123      	cbz	r3, d6f98 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   d6f8e:	4631      	mov	r1, r6
   d6f90:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6f94:	f7ff febd 	bl	d6d12 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   d6f98:	2300      	movs	r3, #0
   d6f9a:	2220      	movs	r2, #32
   d6f9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d6fa0:	4a11      	ldr	r2, [pc, #68]	; (d6fe8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   d6fa2:	9200      	str	r2, [sp, #0]
   d6fa4:	490e      	ldr	r1, [pc, #56]	; (d6fe0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6fa6:	aa06      	add	r2, sp, #24
   d6fa8:	2001      	movs	r0, #1
   d6faa:	f7fe fea9 	bl	d5d00 <log_message>
                    impl->peers_.removeOne(*peer);
   d6fae:	4631      	mov	r1, r6
   d6fb0:	f104 0018 	add.w	r0, r4, #24
   d6fb4:	f7ff fee0 	bl	d6d78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6fb8:	e74e      	b.n	d6e58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   d6fba:	2e0f      	cmp	r6, #15
   d6fbc:	f47f af6f 	bne.w	d6e9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   d6fc0:	686b      	ldr	r3, [r5, #4]
   d6fc2:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d6fc4:	7a2b      	ldrb	r3, [r5, #8]
   d6fc6:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   d6fca:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d6fce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d6fd2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d6fd6:	2308      	movs	r3, #8
   d6fd8:	e760      	b.n	d6e9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   d6fda:	bf00      	nop
   d6fdc:	000db31b 	.word	0x000db31b
   d6fe0:	000db2dc 	.word	0x000db2dc
   d6fe4:	000db341 	.word	0x000db341
   d6fe8:	000db35e 	.word	0x000db35e

000d6fec <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
   d6fec:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   d6fee:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
   d6ff0:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6ff2:	e9d1 0200 	ldrd	r0, r2, [r1]
	__r._M_ptr = 0;
   d6ff6:	e9c1 3300 	strd	r3, r3, [r1]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6ffa:	6823      	ldr	r3, [r4, #0]
   d6ffc:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6ffe:	6020      	str	r0, [r4, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7000:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
   d7002:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
   d7004:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   d7006:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   d7008:	f7ff fe17 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   d700c:	4620      	mov	r0, r4
   d700e:	b002      	add	sp, #8
   d7010:	bd10      	pop	{r4, pc}

000d7012 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d7012:	b513      	push	{r0, r1, r4, lr}
   d7014:	460b      	mov	r3, r1
   d7016:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7018:	e9d0 0100 	ldrd	r0, r1, [r0]
   d701c:	466c      	mov	r4, sp
   d701e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7022:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7026:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d702a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d702e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7032:	b002      	add	sp, #8
   d7034:	bd10      	pop	{r4, pc}

000d7036 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   d7036:	b538      	push	{r3, r4, r5, lr}
   d7038:	4605      	mov	r5, r0
   d703a:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d703c:	f7ff ffe9 	bl	d7012 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7040:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7042:	68a2      	ldr	r2, [r4, #8]
   d7044:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7046:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7048:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d704a:	68e2      	ldr	r2, [r4, #12]
   d704c:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d704e:	60e3      	str	r3, [r4, #12]
      }
   d7050:	bd38      	pop	{r3, r4, r5, pc}

000d7052 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>:
      operator=(function&& __x) noexcept
   d7052:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7054:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d7056:	4604      	mov	r4, r0
   d7058:	4608      	mov	r0, r1
	__x.swap(*this);
   d705a:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d705c:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d705e:	f7ff ffea 	bl	d7036 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   d7062:	4621      	mov	r1, r4
   d7064:	4668      	mov	r0, sp
   d7066:	f7ff ffe6 	bl	d7036 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   d706a:	4668      	mov	r0, sp
   d706c:	f7ff fa2d 	bl	d64ca <_ZNSt14_Function_baseD1Ev>
      }
   d7070:	4620      	mov	r0, r4
   d7072:	b004      	add	sp, #16
   d7074:	bd10      	pop	{r4, pc}

000d7076 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   d7076:	b570      	push	{r4, r5, r6, lr}
   d7078:	460e      	mov	r6, r1
   d707a:	b088      	sub	sp, #32
   d707c:	4604      	mov	r4, r0
   d707e:	9201      	str	r2, [sp, #4]
   d7080:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   d7082:	f7ff fbcb 	bl	d681c <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   d7086:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   d7088:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   d708a:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   d708c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d7090:	f7ff f854 	bl	d613c <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d7094:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   d7098:	b185      	cbz	r5, d70bc <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x46>
   d709a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d709c:	9502      	str	r5, [sp, #8]
   d709e:	a902      	add	r1, sp, #8
   d70a0:	a804      	add	r0, sp, #16
   d70a2:	9303      	str	r3, [sp, #12]
   d70a4:	f7ff fd88 	bl	d6bb8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   d70a8:	a904      	add	r1, sp, #16
   d70aa:	4630      	mov	r0, r6
   d70ac:	f7ff ffd1 	bl	d7052 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   d70b0:	a804      	add	r0, sp, #16
   d70b2:	f7ff fa0a 	bl	d64ca <_ZNSt14_Function_baseD1Ev>
    }
   d70b6:	4620      	mov	r0, r4
   d70b8:	b008      	add	sp, #32
   d70ba:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   d70bc:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   d70be:	e7f3      	b.n	d70a8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000d70c0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d70c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d70c4:	b086      	sub	sp, #24
   d70c6:	4607      	mov	r7, r0
   d70c8:	461d      	mov	r5, r3
   d70ca:	2068      	movs	r0, #104	; 0x68
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d70cc:	2300      	movs	r3, #0
   d70ce:	4689      	mov	r9, r1
   d70d0:	4692      	mov	sl, r2
   d70d2:	9304      	str	r3, [sp, #16]
   d70d4:	f7fc ffdf 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d70d8:	1e06      	subs	r6, r0, #0
   d70da:	f106 080c 	add.w	r8, r6, #12
   d70de:	d01d      	beq.n	d711c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   d70e0:	2301      	movs	r3, #1
	: _M_impl(__a)
   d70e2:	4634      	mov	r4, r6
      : _M_use_count(1), _M_weak_count(1) { }
   d70e4:	e9c6 3301 	strd	r3, r3, [r6, #4]
	: _M_impl(__a)
   d70e8:	4b15      	ldr	r3, [pc, #84]	; (d7140 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x80>)
   d70ea:	f844 3b20 	str.w	r3, [r4], #32
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d70ee:	f89a 3000 	ldrb.w	r3, [sl]
    value_ = flags.value_;
   d70f2:	f88d 300c 	strb.w	r3, [sp, #12]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   d70f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d70f8:	9300      	str	r3, [sp, #0]
   d70fa:	464a      	mov	r2, r9
   d70fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d70fe:	a903      	add	r1, sp, #12
   d7100:	4640      	mov	r0, r8
   d7102:	f7ff ffb8 	bl	d7076 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   d7106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d710a:	682b      	ldr	r3, [r5, #0]
        svcUuid_ = svcUuid;
   d710c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        charUuid_ = charUuid;
   d710e:	6023      	str	r3, [r4, #0]
        svcUuid_ = svcUuid;
   d7110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7112:	f106 0434 	add.w	r4, r6, #52	; 0x34
   d7116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7118:	682b      	ldr	r3, [r5, #0]
   d711a:	6023      	str	r3, [r4, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   d711c:	a904      	add	r1, sp, #16
   d711e:	4638      	mov	r0, r7
	  __p = __pi->_M_ptr();
   d7120:	e9cd 8604 	strd	r8, r6, [sp, #16]
   d7124:	f7ff ff62 	bl	d6fec <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
      ~__shared_ptr() = default;
   d7128:	a805      	add	r0, sp, #20
   d712a:	f7ff fd86 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d712e:	6839      	ldr	r1, [r7, #0]
   d7130:	b919      	cbnz	r1, d713a <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x7a>
        SPARK_ASSERT(false);
   d7132:	4a04      	ldr	r2, [pc, #16]	; (d7144 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>)
   d7134:	200a      	movs	r0, #10
   d7136:	f7fe fddb 	bl	d5cf0 <panic_>
}
   d713a:	b006      	add	sp, #24
   d713c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7140:	000db3d8 	.word	0x000db3d8
   d7144:	000d591d 	.word	0x000d591d

000d7148 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d7148:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d714a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d714c:	4604      	mov	r4, r0
   d714e:	460d      	mov	r5, r1
   d7150:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7152:	d914      	bls.n	d717e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7154:	4290      	cmp	r0, r2
   d7156:	d213      	bcs.n	d7180 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d7158:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d715c:	1a75      	subs	r5, r6, r1
   d715e:	f1a1 0708 	sub.w	r7, r1, #8
   d7162:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d7164:	42b7      	cmp	r7, r6
   d7166:	d018      	beq.n	d719a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7168:	b11c      	cbz	r4, d7172 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default;
   d716a:	4631      	mov	r1, r6
   d716c:	4620      	mov	r0, r4
   d716e:	f7ff fd50 	bl	d6c12 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7172:	1d30      	adds	r0, r6, #4
   d7174:	f7ff fd61 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d7178:	3e08      	subs	r6, #8
   d717a:	3c08      	subs	r4, #8
   d717c:	e7f2      	b.n	d7164 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d717e:	d00c      	beq.n	d719a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d7180:	42b5      	cmp	r5, r6
   d7182:	d00a      	beq.n	d719a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d7184:	b11c      	cbz	r4, d718e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7186:	4629      	mov	r1, r5
   d7188:	4620      	mov	r0, r4
   d718a:	f7ff fd42 	bl	d6c12 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d718e:	1d28      	adds	r0, r5, #4
   d7190:	f7ff fd53 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d7194:	3508      	adds	r5, #8
   d7196:	3408      	adds	r4, #8
   d7198:	e7f2      	b.n	d7180 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d719a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d719c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d719c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d719e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d71a0:	4605      	mov	r5, r0
        if (n > 0) {
   d71a2:	dd11      	ble.n	d71c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d71a4:	00f0      	lsls	r0, r6, #3
   d71a6:	f7fe fe3f 	bl	d5e28 <malloc>
            if (!d) {
   d71aa:	4604      	mov	r4, r0
   d71ac:	b158      	cbz	r0, d71c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d71ae:	e9d5 1200 	ldrd	r1, r2, [r5]
   d71b2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d71b6:	f7ff ffc7 	bl	d7148 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d71ba:	6828      	ldr	r0, [r5, #0]
   d71bc:	f7fe fe3c 	bl	d5e38 <free>
        data_ = d;
   d71c0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d71c2:	60ae      	str	r6, [r5, #8]
        return true;
   d71c4:	2001      	movs	r0, #1
    }
   d71c6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d71c8:	2400      	movs	r4, #0
   d71ca:	e7f6      	b.n	d71ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d71cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d71cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d71ce:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d71d0:	6845      	ldr	r5, [r0, #4]
   d71d2:	4668      	mov	r0, sp
   d71d4:	f7ff fd1d 	bl	d6c12 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d71d8:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d71dc:	4299      	cmp	r1, r3
   d71de:	da10      	bge.n	d7202 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d71e0:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d71e2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d71e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d71e8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d71ec:	4629      	mov	r1, r5
   d71ee:	f105 0008 	add.w	r0, r5, #8
   d71f2:	f7ff ffa9 	bl	d7148 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d71f6:	b98d      	cbnz	r5, d721c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d71f8:	6863      	ldr	r3, [r4, #4]
   d71fa:	3301      	adds	r3, #1
   d71fc:	6063      	str	r3, [r4, #4]
    return true;
   d71fe:	2601      	movs	r6, #1
   d7200:	e006      	b.n	d7210 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7202:	3101      	adds	r1, #1
   d7204:	4620      	mov	r0, r4
   d7206:	f7ff ffc9 	bl	d719c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d720a:	4606      	mov	r6, r0
   d720c:	2800      	cmp	r0, #0
   d720e:	d1e7      	bne.n	d71e0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d7210:	a801      	add	r0, sp, #4
   d7212:	f7ff fd12 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7216:	4630      	mov	r0, r6
   d7218:	b002      	add	sp, #8
   d721a:	bd70      	pop	{r4, r5, r6, pc}
   d721c:	4669      	mov	r1, sp
   d721e:	4628      	mov	r0, r5
   d7220:	f7ff fcf7 	bl	d6c12 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7224:	e7e8      	b.n	d71f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d7226 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d7226:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d722a:	4604      	mov	r4, r0
   d722c:	460d      	mov	r5, r1
   d722e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7230:	d914      	bls.n	d725c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7232:	4290      	cmp	r0, r2
   d7234:	d213      	bcs.n	d725e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d7236:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d723a:	1a75      	subs	r5, r6, r1
   d723c:	f1a1 0708 	sub.w	r7, r1, #8
   d7240:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d7242:	42b7      	cmp	r7, r6
   d7244:	d018      	beq.n	d7278 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7246:	b11c      	cbz	r4, d7250 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d7248:	4631      	mov	r1, r6
   d724a:	4620      	mov	r0, r4
   d724c:	f7ff fcd3 	bl	d6bf6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7250:	1d30      	adds	r0, r6, #4
   d7252:	f7ff fcf2 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d7256:	3e08      	subs	r6, #8
   d7258:	3c08      	subs	r4, #8
   d725a:	e7f2      	b.n	d7242 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d725c:	d00c      	beq.n	d7278 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d725e:	42b5      	cmp	r5, r6
   d7260:	d00a      	beq.n	d7278 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d7262:	b11c      	cbz	r4, d726c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7264:	4629      	mov	r1, r5
   d7266:	4620      	mov	r0, r4
   d7268:	f7ff fcc5 	bl	d6bf6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d726c:	1d28      	adds	r0, r5, #4
   d726e:	f7ff fce4 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d7272:	3508      	adds	r5, #8
   d7274:	3408      	adds	r4, #8
   d7276:	e7f2      	b.n	d725e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d7278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d727a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d727a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d727c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d727e:	4605      	mov	r5, r0
        if (n > 0) {
   d7280:	dd11      	ble.n	d72a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d7282:	00f0      	lsls	r0, r6, #3
   d7284:	f7fe fdd0 	bl	d5e28 <malloc>
            if (!d) {
   d7288:	4604      	mov	r4, r0
   d728a:	b158      	cbz	r0, d72a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d728c:	e9d5 1200 	ldrd	r1, r2, [r5]
   d7290:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7294:	f7ff ffc7 	bl	d7226 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d7298:	6828      	ldr	r0, [r5, #0]
   d729a:	f7fe fdcd 	bl	d5e38 <free>
        data_ = d;
   d729e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d72a0:	60ae      	str	r6, [r5, #8]
        return true;
   d72a2:	2001      	movs	r0, #1
    }
   d72a4:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d72a6:	2400      	movs	r4, #0
   d72a8:	e7f6      	b.n	d7298 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d72aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d72aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d72ac:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d72ae:	6845      	ldr	r5, [r0, #4]
   d72b0:	4668      	mov	r0, sp
   d72b2:	f7ff fca0 	bl	d6bf6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d72b6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d72ba:	4299      	cmp	r1, r3
   d72bc:	da10      	bge.n	d72e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d72be:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d72c0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d72c2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d72c6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d72ca:	4629      	mov	r1, r5
   d72cc:	f105 0008 	add.w	r0, r5, #8
   d72d0:	f7ff ffa9 	bl	d7226 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d72d4:	b98d      	cbnz	r5, d72fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d72d6:	6863      	ldr	r3, [r4, #4]
   d72d8:	3301      	adds	r3, #1
   d72da:	6063      	str	r3, [r4, #4]
    return true;
   d72dc:	2601      	movs	r6, #1
   d72de:	e006      	b.n	d72ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d72e0:	3101      	adds	r1, #1
   d72e2:	4620      	mov	r0, r4
   d72e4:	f7ff ffc9 	bl	d727a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d72e8:	4606      	mov	r6, r0
   d72ea:	2800      	cmp	r0, #0
   d72ec:	d1e7      	bne.n	d72be <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d72ee:	a801      	add	r0, sp, #4
   d72f0:	f7ff fca3 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d72f4:	4630      	mov	r0, r6
   d72f6:	b002      	add	sp, #8
   d72f8:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d72fa:	4669      	mov	r1, sp
   d72fc:	4628      	mov	r0, r5
   d72fe:	f7ff fc7a 	bl	d6bf6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7302:	e7e8      	b.n	d72d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d7304 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d7304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7308:	4617      	mov	r7, r2
   d730a:	b0a1      	sub	sp, #132	; 0x84
   d730c:	4680      	mov	r8, r0
    WiringBleLock lk;
   d730e:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d7310:	460e      	mov	r6, r1
    WiringBleLock lk;
   d7312:	f7ff f903 	bl	d651c <_ZN8particle3ble13WiringBleLockC1Ev>
   d7316:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d7318:	7923      	ldrb	r3, [r4, #4]
   d731a:	b953      	cbnz	r3, d7332 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d731c:	4639      	mov	r1, r7
   d731e:	4640      	mov	r0, r8
   d7320:	f7ff fc69 	bl	d6bf6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d7324:	a80a      	add	r0, sp, #40	; 0x28
   d7326:	f7ff f901 	bl	d652c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d732a:	4640      	mov	r0, r8
   d732c:	b021      	add	sp, #132	; 0x84
   d732e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d7332:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   d7334:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   d7338:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d733c:	9303      	str	r3, [sp, #12]
   d733e:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d7342:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d7346:	9b03      	ldr	r3, [sp, #12]
   d7348:	429d      	cmp	r5, r3
   d734a:	d021      	beq.n	d7390 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d734c:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   d7350:	4658      	mov	r0, fp
   d7352:	f109 0114 	add.w	r1, r9, #20
   d7356:	f7ff f99a 	bl	d668e <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d735a:	b1b8      	cbz	r0, d738c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d735c:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d7360:	4650      	mov	r0, sl
   d7362:	f7ff f994 	bl	d668e <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d7366:	b188      	cbz	r0, d738c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d7368:	6823      	ldr	r3, [r4, #0]
   d736a:	f8d9 2000 	ldr.w	r2, [r9]
   d736e:	4053      	eors	r3, r2
   d7370:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d7374:	d10a      	bne.n	d738c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d7376:	2220      	movs	r2, #32
   d7378:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d737c:	4a5e      	ldr	r2, [pc, #376]	; (d74f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d737e:	9200      	str	r2, [sp, #0]
   d7380:	aa15      	add	r2, sp, #84	; 0x54
   d7382:	495e      	ldr	r1, [pc, #376]	; (d74fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d7384:	2032      	movs	r0, #50	; 0x32
   d7386:	f7fe fcbb 	bl	d5d00 <log_message>
   d738a:	e7c7      	b.n	d731c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d738c:	3508      	adds	r5, #8
   d738e:	e7da      	b.n	d7346 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d7390:	4650      	mov	r0, sl
   d7392:	f7ff f947 	bl	d6624 <_ZNK8particle7BleUuid7isValidEv>
   d7396:	b960      	cbnz	r0, d73b2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   d7398:	4959      	ldr	r1, [pc, #356]	; (d7500 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   d739a:	2201      	movs	r2, #1
   d739c:	a815      	add	r0, sp, #84	; 0x54
   d739e:	ad15      	add	r5, sp, #84	; 0x54
   d73a0:	f7ff f917 	bl	d65d2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d73a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d73a6:	46d4      	mov	ip, sl
   d73a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d73ac:	682b      	ldr	r3, [r5, #0]
   d73ae:	f8cc 3000 	str.w	r3, [ip]
   d73b2:	6833      	ldr	r3, [r6, #0]
   d73b4:	e9d3 5300 	ldrd	r5, r3, [r3]
   d73b8:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d73bc:	455d      	cmp	r5, fp
   d73be:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   d73c0:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   d73c2:	d06e      	beq.n	d74a2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d73c4:	f855 0b08 	ldr.w	r0, [r5], #8
   d73c8:	f7ff f961 	bl	d668e <_ZNK8particle7BleUuideqERKS0_>
   d73cc:	2800      	cmp	r0, #0
   d73ce:	d0f5      	beq.n	d73bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   d73d0:	f104 0a14 	add.w	sl, r4, #20
   d73d4:	4650      	mov	r0, sl
   d73d6:	f7ff f925 	bl	d6624 <_ZNK8particle7BleUuid7isValidEv>
   d73da:	b988      	cbnz	r0, d7400 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   d73dc:	4b49      	ldr	r3, [pc, #292]	; (d7504 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d73de:	4948      	ldr	r1, [pc, #288]	; (d7500 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   d73e0:	881a      	ldrh	r2, [r3, #0]
   d73e2:	3201      	adds	r2, #1
   d73e4:	b292      	uxth	r2, r2
   d73e6:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d73e8:	a815      	add	r0, sp, #84	; 0x54
   d73ea:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   d73ec:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d73ee:	f7ff f90f 	bl	d6610 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d73f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d73f4:	46d4      	mov	ip, sl
   d73f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d73fa:	682b      	ldr	r3, [r5, #0]
   d73fc:	f8cc 3000 	str.w	r3, [ip]
    hal_ble_char_init_t charInit = {};
   d7400:	2228      	movs	r2, #40	; 0x28
   d7402:	2100      	movs	r1, #0
   d7404:	a816      	add	r0, sp, #88	; 0x58
   d7406:	f001 fe8b 	bl	d9120 <memset>
    charInit.version = BLE_API_VERSION;
   d740a:	4b3f      	ldr	r3, [pc, #252]	; (d7508 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d740c:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d740e:	4651      	mov	r1, sl
   d7410:	a804      	add	r0, sp, #16
   d7412:	f7ff f919 	bl	d6648 <_ZN8particle7BleUuid7halUUIDEv>
   d7416:	ab04      	add	r3, sp, #16
   d7418:	aa18      	add	r2, sp, #96	; 0x60
   d741a:	f10d 0c20 	add.w	ip, sp, #32
   d741e:	6818      	ldr	r0, [r3, #0]
   d7420:	6859      	ldr	r1, [r3, #4]
   d7422:	4615      	mov	r5, r2
   d7424:	c503      	stmia	r5!, {r0, r1}
   d7426:	3308      	adds	r3, #8
   d7428:	4563      	cmp	r3, ip
   d742a:	462a      	mov	r2, r5
   d742c:	d1f7      	bne.n	d741e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   d742e:	6818      	ldr	r0, [r3, #0]
   d7430:	6028      	str	r0, [r5, #0]
    charInit.properties = charImpl->properties().value();
   d7432:	7923      	ldrb	r3, [r4, #4]
   d7434:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d7438:	f8d9 3000 	ldr.w	r3, [r9]
   d743c:	8a9b      	ldrh	r3, [r3, #20]
   d743e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d7442:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7444:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d7446:	4b31      	ldr	r3, [pc, #196]	; (d750c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d7448:	2200      	movs	r2, #0
   d744a:	1da1      	adds	r1, r4, #6
   d744c:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d744e:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d7452:	f7fe fac5 	bl	d59e0 <hal_ble_gatt_server_add_characteristic>
   d7456:	2800      	cmp	r0, #0
   d7458:	f47f af60 	bne.w	d731c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   d745c:	2301      	movs	r3, #1
   d745e:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d7460:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d7462:	4639      	mov	r1, r7
        return characteristics_;
   d7464:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d7466:	a80d      	add	r0, sp, #52	; 0x34
   d7468:	f7ff fbc5 	bl	d6bf6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d746c:	4620      	mov	r0, r4
   d746e:	a90d      	add	r1, sp, #52	; 0x34
   d7470:	f7ff ff1b 	bl	d72aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d7474:	4604      	mov	r4, r0
   d7476:	a80e      	add	r0, sp, #56	; 0x38
   d7478:	f7ff fbdf 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d747c:	2c00      	cmp	r4, #0
   d747e:	f47f af4d 	bne.w	d731c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d7482:	2320      	movs	r3, #32
   d7484:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d7488:	4b21      	ldr	r3, [pc, #132]	; (d7510 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   d748a:	9300      	str	r3, [sp, #0]
   d748c:	aa0d      	add	r2, sp, #52	; 0x34
   d748e:	4623      	mov	r3, r4
   d7490:	e777      	b.n	d7382 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d7492:	4639      	mov	r1, r7
   d7494:	4640      	mov	r0, r8
   d7496:	f7ff fbae 	bl	d6bf6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d749a:	a80c      	add	r0, sp, #48	; 0x30
   d749c:	f7ff fbcd 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d74a0:	e740      	b.n	d7324 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d74a2:	a80b      	add	r0, sp, #44	; 0x2c
   d74a4:	f7ff fa5e 	bl	d6964 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d74a8:	4651      	mov	r1, sl
   d74aa:	a815      	add	r0, sp, #84	; 0x54
   d74ac:	f7ff f8cc 	bl	d6648 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d74b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d74b2:	2300      	movs	r3, #0
   d74b4:	3214      	adds	r2, #20
   d74b6:	a915      	add	r1, sp, #84	; 0x54
   d74b8:	2001      	movs	r0, #1
   d74ba:	f7fe fa69 	bl	d5990 <hal_ble_gatt_server_add_service>
   d74be:	2800      	cmp	r0, #0
   d74c0:	d1e7      	bne.n	d7492 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   d74c2:	6835      	ldr	r5, [r6, #0]
   d74c4:	a90b      	add	r1, sp, #44	; 0x2c
   d74c6:	a80d      	add	r0, sp, #52	; 0x34
   d74c8:	f7ff fba3 	bl	d6c12 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d74cc:	4628      	mov	r0, r5
   d74ce:	a90d      	add	r1, sp, #52	; 0x34
   d74d0:	f7ff fe7c 	bl	d71cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d74d4:	4605      	mov	r5, r0
   d74d6:	a80e      	add	r0, sp, #56	; 0x38
   d74d8:	f7ff fbaf 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d74dc:	2d00      	cmp	r5, #0
   d74de:	d0d8      	beq.n	d7492 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   d74e0:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   d74e2:	6853      	ldr	r3, [r2, #4]
   d74e4:	6812      	ldr	r2, [r2, #0]
   d74e6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d74ea:	3b01      	subs	r3, #1
   d74ec:	a80c      	add	r0, sp, #48	; 0x30
   d74ee:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d74f2:	f7ff fba2 	bl	d6c3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d74f6:	e76b      	b.n	d73d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   d74f8:	000db37d 	.word	0x000db37d
   d74fc:	000db2dc 	.word	0x000db2dc
   d7500:	000db43c 	.word	0x000db43c
   d7504:	2003e660 	.word	0x2003e660
   d7508:	002c0001 	.word	0x002c0001
   d750c:	000d6af5 	.word	0x000d6af5
   d7510:	000db3a8 	.word	0x000db3a8

000d7514 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d7514:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d7516:	4c06      	ldr	r4, [pc, #24]	; (d7530 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7518:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d751a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d751c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d751e:	f7fe fa87 	bl	d5a30 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d7522:	4620      	mov	r0, r4
   d7524:	4a03      	ldr	r2, [pc, #12]	; (d7534 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7526:	4904      	ldr	r1, [pc, #16]	; (d7538 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d752c:	f000 bf82 	b.w	d8434 <__aeabi_atexit>
   d7530:	2003e664 	.word	0x2003e664
   d7534:	200355cc 	.word	0x200355cc
   d7538:	000d636b 	.word	0x000d636b

000d753c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d753c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d753e:	4606      	mov	r6, r0
   d7540:	460d      	mov	r5, r1
  size_t n = 0;
   d7542:	188f      	adds	r7, r1, r2
   d7544:	2400      	movs	r4, #0
  while (size--) {
   d7546:	42bd      	cmp	r5, r7
   d7548:	d00c      	beq.n	d7564 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d754a:	6833      	ldr	r3, [r6, #0]
   d754c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7550:	689b      	ldr	r3, [r3, #8]
   d7552:	4630      	mov	r0, r6
   d7554:	4798      	blx	r3
     if (chunk>=0)
   d7556:	1e03      	subs	r3, r0, #0
   d7558:	db01      	blt.n	d755e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d755a:	441c      	add	r4, r3
  while (size--) {
   d755c:	e7f3      	b.n	d7546 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d755e:	2c00      	cmp	r4, #0
   d7560:	bf08      	it	eq
   d7562:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7564:	4620      	mov	r0, r4
   d7566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7568 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7568:	b513      	push	{r0, r1, r4, lr}
   d756a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d756c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d756e:	b159      	cbz	r1, d7588 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7570:	9101      	str	r1, [sp, #4]
   d7572:	f001 fe13 	bl	d919c <strlen>
   d7576:	6823      	ldr	r3, [r4, #0]
   d7578:	9901      	ldr	r1, [sp, #4]
   d757a:	68db      	ldr	r3, [r3, #12]
   d757c:	4602      	mov	r2, r0
   d757e:	4620      	mov	r0, r4
    }
   d7580:	b002      	add	sp, #8
   d7582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7586:	4718      	bx	r3
    }
   d7588:	b002      	add	sp, #8
   d758a:	bd10      	pop	{r4, pc}

000d758c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d758c:	b508      	push	{r3, lr}
  return write(str);
   d758e:	f7ff ffeb 	bl	d7568 <_ZN5Print5writeEPKc>
}
   d7592:	bd08      	pop	{r3, pc}

000d7594 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d7594:	6803      	ldr	r3, [r0, #0]
   d7596:	689b      	ldr	r3, [r3, #8]
   d7598:	4718      	bx	r3

000d759a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d759a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d759c:	210d      	movs	r1, #13
{
   d759e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d75a0:	f7ff fff8 	bl	d7594 <_ZN5Print5printEc>
  n += print('\n');
   d75a4:	210a      	movs	r1, #10
  size_t n = print('\r');
   d75a6:	4604      	mov	r4, r0
  n += print('\n');
   d75a8:	4628      	mov	r0, r5
   d75aa:	f7ff fff3 	bl	d7594 <_ZN5Print5printEc>
  return n;
}
   d75ae:	4420      	add	r0, r4
   d75b0:	bd38      	pop	{r3, r4, r5, pc}

000d75b2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d75b2:	b538      	push	{r3, r4, r5, lr}
   d75b4:	4605      	mov	r5, r0
  return write(str);
   d75b6:	f7ff ffd7 	bl	d7568 <_ZN5Print5writeEPKc>
   d75ba:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d75bc:	4628      	mov	r0, r5
   d75be:	f7ff ffec 	bl	d759a <_ZN5Print7printlnEv>
  return n;
}
   d75c2:	4420      	add	r0, r4
   d75c4:	bd38      	pop	{r3, r4, r5, pc}

000d75c6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d75c6:	b530      	push	{r4, r5, lr}
   d75c8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d75ca:	2300      	movs	r3, #0
   d75cc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d75d0:	2a01      	cmp	r2, #1
   d75d2:	bf98      	it	ls
   d75d4:	220a      	movls	r2, #10
   d75d6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d75d8:	460d      	mov	r5, r1
   d75da:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d75de:	fb01 5312 	mls	r3, r1, r2, r5
   d75e2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d75e6:	2b09      	cmp	r3, #9
   d75e8:	bf94      	ite	ls
   d75ea:	3330      	addls	r3, #48	; 0x30
   d75ec:	3337      	addhi	r3, #55	; 0x37
   d75ee:	b2db      	uxtb	r3, r3
  } while(n);
   d75f0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d75f2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d75f6:	d9ef      	bls.n	d75d8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d75f8:	4621      	mov	r1, r4
   d75fa:	f7ff ffb5 	bl	d7568 <_ZN5Print5writeEPKc>
}
   d75fe:	b00b      	add	sp, #44	; 0x2c
   d7600:	bd30      	pop	{r4, r5, pc}

000d7602 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7602:	2300      	movs	r3, #0
   d7604:	6840      	ldr	r0, [r0, #4]
   d7606:	461a      	mov	r2, r3
   d7608:	4619      	mov	r1, r3
   d760a:	f7fe bbc5 	b.w	d5d98 <network_on>
	...

000d7610 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7610:	4b01      	ldr	r3, [pc, #4]	; (d7618 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7612:	4a02      	ldr	r2, [pc, #8]	; (d761c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7614:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7616:	4770      	bx	lr
   d7618:	2003e66c 	.word	0x2003e66c
   d761c:	000db45c 	.word	0x000db45c

000d7620 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7620:	4b02      	ldr	r3, [pc, #8]	; (d762c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7622:	681a      	ldr	r2, [r3, #0]
   d7624:	4b02      	ldr	r3, [pc, #8]	; (d7630 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7626:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7628:	4770      	bx	lr
   d762a:	bf00      	nop
   d762c:	200353f4 	.word	0x200353f4
   d7630:	2003e670 	.word	0x2003e670

000d7634 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7634:	2100      	movs	r1, #0
   d7636:	f7fe bb73 	b.w	d5d20 <system_delay_ms>

000d763a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d763a:	b510      	push	{r4, lr}
   d763c:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d763e:	f7fe ff44 	bl	d64ca <_ZNSt14_Function_baseD1Ev>
   d7642:	4620      	mov	r0, r4
   d7644:	bd10      	pop	{r4, pc}
	...

000d7648 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7648:	4803      	ldr	r0, [pc, #12]	; (d7658 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d764a:	4a04      	ldr	r2, [pc, #16]	; (d765c <_GLOBAL__sub_I_RGB+0x14>)
   d764c:	4904      	ldr	r1, [pc, #16]	; (d7660 <_GLOBAL__sub_I_RGB+0x18>)
   d764e:	2300      	movs	r3, #0
   d7650:	6083      	str	r3, [r0, #8]
   d7652:	f000 beef 	b.w	d8434 <__aeabi_atexit>
   d7656:	bf00      	nop
   d7658:	2003e674 	.word	0x2003e674
   d765c:	200355cc 	.word	0x200355cc
   d7660:	000d763b 	.word	0x000d763b

000d7664 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7664:	4b01      	ldr	r3, [pc, #4]	; (d766c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7666:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7668:	4770      	bx	lr
   d766a:	bf00      	nop
   d766c:	200353f8 	.word	0x200353f8

000d7670 <serialEventRun>:
{
   d7670:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7672:	4b0b      	ldr	r3, [pc, #44]	; (d76a0 <serialEventRun+0x30>)
   d7674:	b143      	cbz	r3, d7688 <serialEventRun+0x18>
   d7676:	f000 f971 	bl	d795c <_Z16_fetch_usbserialv>
   d767a:	6803      	ldr	r3, [r0, #0]
   d767c:	691b      	ldr	r3, [r3, #16]
   d767e:	4798      	blx	r3
   d7680:	2800      	cmp	r0, #0
   d7682:	dd01      	ble.n	d7688 <serialEventRun+0x18>
        serialEvent();
   d7684:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7688:	4b06      	ldr	r3, [pc, #24]	; (d76a4 <serialEventRun+0x34>)
   d768a:	b143      	cbz	r3, d769e <serialEventRun+0x2e>
   d768c:	f000 f9e4 	bl	d7a58 <_Z22__fetch_global_Serial1v>
   d7690:	6803      	ldr	r3, [r0, #0]
   d7692:	691b      	ldr	r3, [r3, #16]
   d7694:	4798      	blx	r3
   d7696:	2800      	cmp	r0, #0
   d7698:	dd01      	ble.n	d769e <serialEventRun+0x2e>
        serialEvent1();
   d769a:	f3af 8000 	nop.w
}
   d769e:	bd08      	pop	{r3, pc}
	...

000d76a8 <_post_loop>:
{
   d76a8:	b508      	push	{r3, lr}
	serialEventRun();
   d76aa:	f7ff ffe1 	bl	d7670 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d76ae:	f7fe f93d 	bl	d592c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d76b2:	4b01      	ldr	r3, [pc, #4]	; (d76b8 <_post_loop+0x10>)
   d76b4:	6018      	str	r0, [r3, #0]
}
   d76b6:	bd08      	pop	{r3, pc}
   d76b8:	2003e7d4 	.word	0x2003e7d4

000d76bc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d76bc:	4802      	ldr	r0, [pc, #8]	; (d76c8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d76be:	4a03      	ldr	r2, [pc, #12]	; (d76cc <_Z33system_initialize_user_backup_ramv+0x10>)
   d76c0:	4903      	ldr	r1, [pc, #12]	; (d76d0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d76c2:	1a12      	subs	r2, r2, r0
   d76c4:	f001 bd04 	b.w	d90d0 <memcpy>
   d76c8:	2003f400 	.word	0x2003f400
   d76cc:	2003f404 	.word	0x2003f404
   d76d0:	000db9b0 	.word	0x000db9b0

000d76d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d76d4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d76d6:	2300      	movs	r3, #0
   d76d8:	9300      	str	r3, [sp, #0]
   d76da:	461a      	mov	r2, r3
   d76dc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d76e0:	f7fe fb30 	bl	d5d44 <system_ctrl_set_result>
}
   d76e4:	b003      	add	sp, #12
   d76e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d76ec <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d76ec:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d76ee:	8843      	ldrh	r3, [r0, #2]
   d76f0:	2b0a      	cmp	r3, #10
   d76f2:	d008      	beq.n	d7706 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d76f4:	2b50      	cmp	r3, #80	; 0x50
   d76f6:	d10b      	bne.n	d7710 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d76f8:	4b09      	ldr	r3, [pc, #36]	; (d7720 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d76fa:	681b      	ldr	r3, [r3, #0]
   d76fc:	b14b      	cbz	r3, d7712 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d76fe:	b003      	add	sp, #12
   d7700:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7704:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d7706:	f7ff ffe5 	bl	d76d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d770a:	b003      	add	sp, #12
   d770c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7710:	2300      	movs	r3, #0
   d7712:	9300      	str	r3, [sp, #0]
   d7714:	461a      	mov	r2, r3
   d7716:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d771a:	f7fe fb13 	bl	d5d44 <system_ctrl_set_result>
}
   d771e:	e7f4      	b.n	d770a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7720:	2003e688 	.word	0x2003e688

000d7724 <module_user_init_hook>:
{
   d7724:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7726:	4c12      	ldr	r4, [pc, #72]	; (d7770 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7728:	4812      	ldr	r0, [pc, #72]	; (d7774 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d772a:	4d13      	ldr	r5, [pc, #76]	; (d7778 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d772c:	2100      	movs	r1, #0
   d772e:	f7fe fbb3 	bl	d5e98 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7732:	6823      	ldr	r3, [r4, #0]
   d7734:	42ab      	cmp	r3, r5
   d7736:	4b11      	ldr	r3, [pc, #68]	; (d777c <module_user_init_hook+0x58>)
   d7738:	bf0c      	ite	eq
   d773a:	2201      	moveq	r2, #1
   d773c:	2200      	movne	r2, #0
   d773e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7740:	d002      	beq.n	d7748 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7742:	f7ff ffbb 	bl	d76bc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7746:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7748:	f7fe f8e0 	bl	d590c <HAL_RNG_GetRandomNumber>
   d774c:	4604      	mov	r4, r0
    srand(seed);
   d774e:	f001 fcef 	bl	d9130 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7752:	4b0b      	ldr	r3, [pc, #44]	; (d7780 <module_user_init_hook+0x5c>)
   d7754:	b113      	cbz	r3, d775c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d7756:	4620      	mov	r0, r4
   d7758:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d775c:	2100      	movs	r1, #0
   d775e:	4808      	ldr	r0, [pc, #32]	; (d7780 <module_user_init_hook+0x5c>)
   d7760:	f7fe fb5a 	bl	d5e18 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7768:	4806      	ldr	r0, [pc, #24]	; (d7784 <module_user_init_hook+0x60>)
   d776a:	2100      	movs	r1, #0
   d776c:	f7fe bae0 	b.w	d5d30 <system_ctrl_set_app_request_handler>
   d7770:	2003f400 	.word	0x2003f400
   d7774:	000d7665 	.word	0x000d7665
   d7778:	9a271c1e 	.word	0x9a271c1e
   d777c:	2003e684 	.word	0x2003e684
   d7780:	00000000 	.word	0x00000000
   d7784:	000d76ed 	.word	0x000d76ed

000d7788 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d7788:	4770      	bx	lr

000d778a <_ZN9IPAddressD0Ev>:
   d778a:	b510      	push	{r4, lr}
   d778c:	2118      	movs	r1, #24
   d778e:	4604      	mov	r4, r0
   d7790:	f000 fe55 	bl	d843e <_ZdlPvj>
   d7794:	4620      	mov	r0, r4
   d7796:	bd10      	pop	{r4, pc}

000d7798 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7798:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d779a:	7d03      	ldrb	r3, [r0, #20]
   d779c:	2b06      	cmp	r3, #6
{
   d779e:	b08d      	sub	sp, #52	; 0x34
   d77a0:	460e      	mov	r6, r1
   d77a2:	f100 0704 	add.w	r7, r0, #4
   d77a6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d77aa:	d012      	beq.n	d77d2 <_ZNK9IPAddress7printToER5Print+0x3a>
   d77ac:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d77b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d77b4:	220a      	movs	r2, #10
   d77b6:	4630      	mov	r0, r6
   d77b8:	f7ff ff05 	bl	d75c6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d77bc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d77be:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d77c0:	d019      	beq.n	d77f6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d77c2:	2c00      	cmp	r4, #0
   d77c4:	d0f4      	beq.n	d77b0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d77c6:	212e      	movs	r1, #46	; 0x2e
   d77c8:	4630      	mov	r0, r6
   d77ca:	f7ff fee3 	bl	d7594 <_ZN5Print5printEc>
   d77ce:	4404      	add	r4, r0
   d77d0:	e7ee      	b.n	d77b0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d77d2:	232f      	movs	r3, #47	; 0x2f
   d77d4:	466a      	mov	r2, sp
   d77d6:	4639      	mov	r1, r7
   d77d8:	200a      	movs	r0, #10
		buf[0] = 0;
   d77da:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d77de:	f7fe f947 	bl	d5a70 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d77e2:	4668      	mov	r0, sp
   d77e4:	f001 fcda 	bl	d919c <strlen>
   d77e8:	6833      	ldr	r3, [r6, #0]
   d77ea:	4602      	mov	r2, r0
   d77ec:	68db      	ldr	r3, [r3, #12]
   d77ee:	4669      	mov	r1, sp
   d77f0:	4630      	mov	r0, r6
   d77f2:	4798      	blx	r3
   d77f4:	4604      	mov	r4, r0
    }
    return n;
}
   d77f6:	4620      	mov	r0, r4
   d77f8:	b00d      	add	sp, #52	; 0x34
   d77fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d77fc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d77fc:	b510      	push	{r4, lr}
   d77fe:	4b05      	ldr	r3, [pc, #20]	; (d7814 <_ZN9IPAddressC1Ev+0x18>)
   d7800:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7802:	2211      	movs	r2, #17
   d7804:	f840 3b04 	str.w	r3, [r0], #4
   d7808:	2100      	movs	r1, #0
   d780a:	f001 fc89 	bl	d9120 <memset>
}
   d780e:	4620      	mov	r0, r4
   d7810:	bd10      	pop	{r4, pc}
   d7812:	bf00      	nop
   d7814:	000db484 	.word	0x000db484

000d7818 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7818:	4603      	mov	r3, r0
   d781a:	4a07      	ldr	r2, [pc, #28]	; (d7838 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d781c:	b510      	push	{r4, lr}
   d781e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7822:	f101 0210 	add.w	r2, r1, #16
   d7826:	f851 4b04 	ldr.w	r4, [r1], #4
   d782a:	f843 4b04 	str.w	r4, [r3], #4
   d782e:	4291      	cmp	r1, r2
   d7830:	d1f9      	bne.n	d7826 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7832:	780a      	ldrb	r2, [r1, #0]
   d7834:	701a      	strb	r2, [r3, #0]
}
   d7836:	bd10      	pop	{r4, pc}
   d7838:	000db484 	.word	0x000db484

000d783c <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d783c:	7d03      	ldrb	r3, [r0, #20]
   d783e:	2b04      	cmp	r3, #4
   d7840:	d104      	bne.n	d784c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d7842:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7844:	3800      	subs	r0, #0
   d7846:	bf18      	it	ne
   d7848:	2001      	movne	r0, #1
   d784a:	4770      	bx	lr
    } else if (version() == 6) {
   d784c:	2b06      	cmp	r3, #6
   d784e:	d107      	bne.n	d7860 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7850:	6843      	ldr	r3, [r0, #4]
   d7852:	b93b      	cbnz	r3, d7864 <_ZNK9IPAddresscvbEv+0x28>
   d7854:	6883      	ldr	r3, [r0, #8]
   d7856:	b92b      	cbnz	r3, d7864 <_ZNK9IPAddresscvbEv+0x28>
   d7858:	68c3      	ldr	r3, [r0, #12]
   d785a:	b91b      	cbnz	r3, d7864 <_ZNK9IPAddresscvbEv+0x28>
   d785c:	6900      	ldr	r0, [r0, #16]
   d785e:	e7f1      	b.n	d7844 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d7860:	2000      	movs	r0, #0
   d7862:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7864:	2001      	movs	r0, #1
}
   d7866:	4770      	bx	lr

000d7868 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7868:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d786a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d786e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7872:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7876:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d787a:	2304      	movs	r3, #4
   d787c:	6041      	str	r1, [r0, #4]
   d787e:	7503      	strb	r3, [r0, #20]
}
   d7880:	bd10      	pop	{r4, pc}
	...

000d7884 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d7884:	b513      	push	{r0, r1, r4, lr}
   d7886:	4b05      	ldr	r3, [pc, #20]	; (d789c <_ZN9IPAddressC1EPKh+0x18>)
   d7888:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d788a:	78cb      	ldrb	r3, [r1, #3]
   d788c:	9300      	str	r3, [sp, #0]
   d788e:	788b      	ldrb	r3, [r1, #2]
   d7890:	784a      	ldrb	r2, [r1, #1]
   d7892:	7809      	ldrb	r1, [r1, #0]
   d7894:	f7ff ffe8 	bl	d7868 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7898:	b002      	add	sp, #8
   d789a:	bd10      	pop	{r4, pc}
   d789c:	000db484 	.word	0x000db484

000d78a0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d78a0:	7441      	strb	r1, [r0, #17]
}
   d78a2:	4770      	bx	lr

000d78a4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d78a4:	4770      	bx	lr

000d78a6 <_ZN9USBSerial4readEv>:
{
   d78a6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d78a8:	2100      	movs	r1, #0
   d78aa:	7c00      	ldrb	r0, [r0, #16]
   d78ac:	f7fe fa08 	bl	d5cc0 <HAL_USB_USART_Receive_Data>
}
   d78b0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d78b4:	bd08      	pop	{r3, pc}

000d78b6 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d78b6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d78b8:	2101      	movs	r1, #1
   d78ba:	7c00      	ldrb	r0, [r0, #16]
   d78bc:	f7fe fa00 	bl	d5cc0 <HAL_USB_USART_Receive_Data>
}
   d78c0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d78c4:	bd08      	pop	{r3, pc}

000d78c6 <_ZN9USBSerial17availableForWriteEv>:
{
   d78c6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d78c8:	7c00      	ldrb	r0, [r0, #16]
   d78ca:	f7fe f9f1 	bl	d5cb0 <HAL_USB_USART_Available_Data_For_Write>
}
   d78ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d78d2:	bd08      	pop	{r3, pc}

000d78d4 <_ZN9USBSerial9availableEv>:
{
   d78d4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d78d6:	7c00      	ldrb	r0, [r0, #16]
   d78d8:	f7fe f9e2 	bl	d5ca0 <HAL_USB_USART_Available_Data>
}
   d78dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d78e0:	bd08      	pop	{r3, pc}

000d78e2 <_ZN9USBSerial5writeEh>:
{
   d78e2:	b513      	push	{r0, r1, r4, lr}
   d78e4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d78e6:	7c00      	ldrb	r0, [r0, #16]
{
   d78e8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d78ea:	f7fe f9e1 	bl	d5cb0 <HAL_USB_USART_Available_Data_For_Write>
   d78ee:	2800      	cmp	r0, #0
   d78f0:	9901      	ldr	r1, [sp, #4]
   d78f2:	dc01      	bgt.n	d78f8 <_ZN9USBSerial5writeEh+0x16>
   d78f4:	7c60      	ldrb	r0, [r4, #17]
   d78f6:	b120      	cbz	r0, d7902 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d78f8:	7c20      	ldrb	r0, [r4, #16]
   d78fa:	f7fe f9e9 	bl	d5cd0 <HAL_USB_USART_Send_Data>
   d78fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d7902:	b002      	add	sp, #8
   d7904:	bd10      	pop	{r4, pc}

000d7906 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d7906:	7c00      	ldrb	r0, [r0, #16]
   d7908:	f7fe b9ea 	b.w	d5ce0 <HAL_USB_USART_Flush_Data>

000d790c <_ZN9USBSerialD0Ev>:
   d790c:	b510      	push	{r4, lr}
   d790e:	2114      	movs	r1, #20
   d7910:	4604      	mov	r4, r0
   d7912:	f000 fd94 	bl	d843e <_ZdlPvj>
   d7916:	4620      	mov	r0, r4
   d7918:	bd10      	pop	{r4, pc}
	...

000d791c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d791c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d791e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7922:	4604      	mov	r4, r0
   d7924:	4608      	mov	r0, r1
   d7926:	2100      	movs	r1, #0
   d7928:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d792c:	4b04      	ldr	r3, [pc, #16]	; (d7940 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d792e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7930:	2301      	movs	r3, #1
  _serial = serial;
   d7932:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7934:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7936:	4611      	mov	r1, r2
   d7938:	f7fe f9a2 	bl	d5c80 <HAL_USB_USART_Init>
}
   d793c:	4620      	mov	r0, r4
   d793e:	bd10      	pop	{r4, pc}
   d7940:	000db498 	.word	0x000db498

000d7944 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7944:	7c00      	ldrb	r0, [r0, #16]
   d7946:	2200      	movs	r2, #0
   d7948:	f7fe b9a2 	b.w	d5c90 <HAL_USB_USART_Begin>

000d794c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d794c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d794e:	2214      	movs	r2, #20
{
   d7950:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7952:	2100      	movs	r1, #0
   d7954:	f001 fbe4 	bl	d9120 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7958:	4620      	mov	r0, r4
   d795a:	bd10      	pop	{r4, pc}

000d795c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d795c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d795e:	4c10      	ldr	r4, [pc, #64]	; (d79a0 <_Z16_fetch_usbserialv+0x44>)
{
   d7960:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7962:	a803      	add	r0, sp, #12
   d7964:	f7ff fff2 	bl	d794c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7968:	7821      	ldrb	r1, [r4, #0]
   d796a:	f3bf 8f5b 	dmb	ish
   d796e:	f011 0101 	ands.w	r1, r1, #1
   d7972:	d111      	bne.n	d7998 <_Z16_fetch_usbserialv+0x3c>
   d7974:	4620      	mov	r0, r4
   d7976:	9101      	str	r1, [sp, #4]
   d7978:	f7fc fb93 	bl	d40a2 <__cxa_guard_acquire>
   d797c:	9901      	ldr	r1, [sp, #4]
   d797e:	b158      	cbz	r0, d7998 <_Z16_fetch_usbserialv+0x3c>
   d7980:	aa03      	add	r2, sp, #12
   d7982:	4808      	ldr	r0, [pc, #32]	; (d79a4 <_Z16_fetch_usbserialv+0x48>)
   d7984:	f7ff ffca 	bl	d791c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7988:	4620      	mov	r0, r4
   d798a:	f7fc fb8f 	bl	d40ac <__cxa_guard_release>
   d798e:	4a06      	ldr	r2, [pc, #24]	; (d79a8 <_Z16_fetch_usbserialv+0x4c>)
   d7990:	4906      	ldr	r1, [pc, #24]	; (d79ac <_Z16_fetch_usbserialv+0x50>)
   d7992:	4804      	ldr	r0, [pc, #16]	; (d79a4 <_Z16_fetch_usbserialv+0x48>)
   d7994:	f000 fd4e 	bl	d8434 <__aeabi_atexit>
	return _usbserial;
}
   d7998:	4802      	ldr	r0, [pc, #8]	; (d79a4 <_Z16_fetch_usbserialv+0x48>)
   d799a:	b008      	add	sp, #32
   d799c:	bd10      	pop	{r4, pc}
   d799e:	bf00      	nop
   d79a0:	2003e68c 	.word	0x2003e68c
   d79a4:	2003e690 	.word	0x2003e690
   d79a8:	200355cc 	.word	0x200355cc
   d79ac:	000d78a5 	.word	0x000d78a5

000d79b0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d79b0:	4770      	bx	lr

000d79b2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d79b2:	7441      	strb	r1, [r0, #17]
}
   d79b4:	4770      	bx	lr

000d79b6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d79b6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d79b8:	7c00      	ldrb	r0, [r0, #16]
   d79ba:	f7fe f8a9 	bl	d5b10 <hal_usart_available_data_for_write>
}
   d79be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d79c2:	bd08      	pop	{r3, pc}

000d79c4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d79c4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d79c6:	7c00      	ldrb	r0, [r0, #16]
   d79c8:	f7fe f87a 	bl	d5ac0 <hal_usart_available>
}
   d79cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d79d0:	bd08      	pop	{r3, pc}

000d79d2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d79d2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d79d4:	7c00      	ldrb	r0, [r0, #16]
   d79d6:	f7fe f883 	bl	d5ae0 <hal_usart_peek>
}
   d79da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d79de:	bd08      	pop	{r3, pc}

000d79e0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d79e0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d79e2:	7c00      	ldrb	r0, [r0, #16]
   d79e4:	f7fe f874 	bl	d5ad0 <hal_usart_read>
}
   d79e8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d79ec:	bd08      	pop	{r3, pc}

000d79ee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d79ee:	7c00      	ldrb	r0, [r0, #16]
   d79f0:	f7fe b87e 	b.w	d5af0 <hal_usart_flush>

000d79f4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d79f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d79f6:	7c45      	ldrb	r5, [r0, #17]
{
   d79f8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d79fa:	b12d      	cbz	r5, d7a08 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d79fc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d79fe:	b003      	add	sp, #12
   d7a00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7a04:	f7fe b854 	b.w	d5ab0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7a08:	7c00      	ldrb	r0, [r0, #16]
   d7a0a:	9101      	str	r1, [sp, #4]
   d7a0c:	f7fe f880 	bl	d5b10 <hal_usart_available_data_for_write>
   d7a10:	2800      	cmp	r0, #0
   d7a12:	9901      	ldr	r1, [sp, #4]
   d7a14:	dcf2      	bgt.n	d79fc <_ZN11USARTSerial5writeEh+0x8>
}
   d7a16:	4628      	mov	r0, r5
   d7a18:	b003      	add	sp, #12
   d7a1a:	bd30      	pop	{r4, r5, pc}

000d7a1c <_ZN11USARTSerialD0Ev>:
   d7a1c:	b510      	push	{r4, lr}
   d7a1e:	2114      	movs	r1, #20
   d7a20:	4604      	mov	r4, r0
   d7a22:	f000 fd0c 	bl	d843e <_ZdlPvj>
   d7a26:	4620      	mov	r0, r4
   d7a28:	bd10      	pop	{r4, pc}
	...

000d7a2c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7a2c:	b510      	push	{r4, lr}
   d7a2e:	f04f 0c00 	mov.w	ip, #0
   d7a32:	4604      	mov	r4, r0
   d7a34:	4608      	mov	r0, r1
   d7a36:	4611      	mov	r1, r2
   d7a38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7a3c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7a40:	4a04      	ldr	r2, [pc, #16]	; (d7a54 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7a42:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7a44:	2201      	movs	r2, #1
  _serial = serial;
   d7a46:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7a48:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7a4a:	461a      	mov	r2, r3
   d7a4c:	f7fe f828 	bl	d5aa0 <hal_usart_init>
}
   d7a50:	4620      	mov	r0, r4
   d7a52:	bd10      	pop	{r4, pc}
   d7a54:	000db4c8 	.word	0x000db4c8

000d7a58 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7a58:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7a5a:	4c0e      	ldr	r4, [pc, #56]	; (d7a94 <_Z22__fetch_global_Serial1v+0x3c>)
   d7a5c:	7821      	ldrb	r1, [r4, #0]
   d7a5e:	f3bf 8f5b 	dmb	ish
   d7a62:	f011 0101 	ands.w	r1, r1, #1
   d7a66:	d112      	bne.n	d7a8e <_Z22__fetch_global_Serial1v+0x36>
   d7a68:	4620      	mov	r0, r4
   d7a6a:	9101      	str	r1, [sp, #4]
   d7a6c:	f7fc fb19 	bl	d40a2 <__cxa_guard_acquire>
   d7a70:	9901      	ldr	r1, [sp, #4]
   d7a72:	b160      	cbz	r0, d7a8e <_Z22__fetch_global_Serial1v+0x36>
   d7a74:	4a08      	ldr	r2, [pc, #32]	; (d7a98 <_Z22__fetch_global_Serial1v+0x40>)
   d7a76:	4b09      	ldr	r3, [pc, #36]	; (d7a9c <_Z22__fetch_global_Serial1v+0x44>)
   d7a78:	4809      	ldr	r0, [pc, #36]	; (d7aa0 <_Z22__fetch_global_Serial1v+0x48>)
   d7a7a:	f7ff ffd7 	bl	d7a2c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7a7e:	4620      	mov	r0, r4
   d7a80:	f7fc fb14 	bl	d40ac <__cxa_guard_release>
   d7a84:	4a07      	ldr	r2, [pc, #28]	; (d7aa4 <_Z22__fetch_global_Serial1v+0x4c>)
   d7a86:	4908      	ldr	r1, [pc, #32]	; (d7aa8 <_Z22__fetch_global_Serial1v+0x50>)
   d7a88:	4805      	ldr	r0, [pc, #20]	; (d7aa0 <_Z22__fetch_global_Serial1v+0x48>)
   d7a8a:	f000 fcd3 	bl	d8434 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7a8e:	4804      	ldr	r0, [pc, #16]	; (d7aa0 <_Z22__fetch_global_Serial1v+0x48>)
   d7a90:	b002      	add	sp, #8
   d7a92:	bd10      	pop	{r4, pc}
   d7a94:	2003e6a4 	.word	0x2003e6a4
   d7a98:	2003e6a8 	.word	0x2003e6a8
   d7a9c:	2003e72c 	.word	0x2003e72c
   d7aa0:	2003e7b0 	.word	0x2003e7b0
   d7aa4:	200355cc 	.word	0x200355cc
   d7aa8:	000d79b1 	.word	0x000d79b1

000d7aac <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7aac:	4770      	bx	lr

000d7aae <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7ab0:	4606      	mov	r6, r0
   d7ab2:	4615      	mov	r5, r2
   d7ab4:	460c      	mov	r4, r1
   d7ab6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7ab8:	42bc      	cmp	r4, r7
   d7aba:	d006      	beq.n	d7aca <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7abc:	6833      	ldr	r3, [r6, #0]
   d7abe:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7ac2:	689b      	ldr	r3, [r3, #8]
   d7ac4:	4630      	mov	r0, r6
   d7ac6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7ac8:	e7f6      	b.n	d7ab8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d7aca:	4628      	mov	r0, r5
   d7acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7ace <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d7ace:	7c00      	ldrb	r0, [r0, #16]
   d7ad0:	2200      	movs	r2, #0
   d7ad2:	f7fe b83d 	b.w	d5b50 <hal_i2c_write>

000d7ad6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d7ad6:	7c00      	ldrb	r0, [r0, #16]
   d7ad8:	2100      	movs	r1, #0
   d7ada:	f7fe b841 	b.w	d5b60 <hal_i2c_available>

000d7ade <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7ade:	7c00      	ldrb	r0, [r0, #16]
   d7ae0:	2100      	movs	r1, #0
   d7ae2:	f7fe b845 	b.w	d5b70 <hal_i2c_read>

000d7ae6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d7ae6:	7c00      	ldrb	r0, [r0, #16]
   d7ae8:	2100      	movs	r1, #0
   d7aea:	f7fe b849 	b.w	d5b80 <hal_i2c_peek>

000d7aee <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d7aee:	7c00      	ldrb	r0, [r0, #16]
   d7af0:	2100      	movs	r1, #0
   d7af2:	f7fe b84d 	b.w	d5b90 <hal_i2c_flush>

000d7af6 <_ZN7TwoWireD0Ev>:
   d7af6:	b510      	push	{r4, lr}
   d7af8:	2114      	movs	r1, #20
   d7afa:	4604      	mov	r4, r0
   d7afc:	f000 fc9f 	bl	d843e <_ZdlPvj>
   d7b00:	4620      	mov	r0, r4
   d7b02:	bd10      	pop	{r4, pc}

000d7b04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7b04:	b510      	push	{r4, lr}
   d7b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7b0a:	4604      	mov	r4, r0
   d7b0c:	4608      	mov	r0, r1
   d7b0e:	2100      	movs	r1, #0
   d7b10:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7b14:	4b03      	ldr	r3, [pc, #12]	; (d7b24 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d7b16:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7b18:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7b1a:	4611      	mov	r1, r2
   d7b1c:	f7fe f848 	bl	d5bb0 <hal_i2c_init>
}
   d7b20:	4620      	mov	r0, r4
   d7b22:	bd10      	pop	{r4, pc}
   d7b24:	000db4f8 	.word	0x000db4f8

000d7b28 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7b28:	2300      	movs	r3, #0
   d7b2a:	7c00      	ldrb	r0, [r0, #16]
   d7b2c:	461a      	mov	r2, r3
   d7b2e:	4619      	mov	r1, r3
   d7b30:	f7fd bff6 	b.w	d5b20 <hal_i2c_begin>

000d7b34 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7b34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d7b36:	2200      	movs	r2, #0
   d7b38:	2314      	movs	r3, #20
   d7b3a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d7b3e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d7b42:	780b      	ldrb	r3, [r1, #0]
   d7b44:	f88d 3008 	strb.w	r3, [sp, #8]
   d7b48:	684b      	ldr	r3, [r1, #4]
   d7b4a:	9303      	str	r3, [sp, #12]
   d7b4c:	68cb      	ldr	r3, [r1, #12]
   d7b4e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d7b50:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d7b52:	7a0b      	ldrb	r3, [r1, #8]
   d7b54:	9305      	str	r3, [sp, #20]
   d7b56:	a901      	add	r1, sp, #4
   d7b58:	f7fe f832 	bl	d5bc0 <hal_i2c_request_ex>
}
   d7b5c:	b007      	add	sp, #28
   d7b5e:	f85d fb04 	ldr.w	pc, [sp], #4

000d7b62 <_ZN7TwoWire11requestFromEhjh>:
{
   d7b62:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7b64:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7b66:	f88d 1000 	strb.w	r1, [sp]
   d7b6a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7b6e:	9103      	str	r1, [sp, #12]
   d7b70:	bf18      	it	ne
   d7b72:	2301      	movne	r3, #1
   d7b74:	4669      	mov	r1, sp
    size_ = size;
   d7b76:	9201      	str	r2, [sp, #4]
   d7b78:	f88d 3008 	strb.w	r3, [sp, #8]
   d7b7c:	f7ff ffda 	bl	d7b34 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7b80:	b005      	add	sp, #20
   d7b82:	f85d fb04 	ldr.w	pc, [sp], #4

000d7b86 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d7b86:	2301      	movs	r3, #1
   d7b88:	f7ff bfeb 	b.w	d7b62 <_ZN7TwoWire11requestFromEhjh>

000d7b8c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7b8c:	7c00      	ldrb	r0, [r0, #16]
   d7b8e:	2200      	movs	r2, #0
   d7b90:	f7fd bfce 	b.w	d5b30 <hal_i2c_begin_transmission>

000d7b94 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7b94:	b2c9      	uxtb	r1, r1
   d7b96:	f7ff bff9 	b.w	d7b8c <_ZN7TwoWire17beginTransmissionEh>

000d7b9a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7b9a:	7c00      	ldrb	r0, [r0, #16]
   d7b9c:	2200      	movs	r2, #0
   d7b9e:	f7fd bfcf 	b.w	d5b40 <hal_i2c_end_transmission>

000d7ba2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d7ba2:	2101      	movs	r1, #1
   d7ba4:	f7ff bff9 	b.w	d7b9a <_ZN7TwoWire15endTransmissionEh>

000d7ba8 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7ba8:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7baa:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d7bac:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7bb0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7bb2:	2201      	movs	r2, #1
   d7bb4:	f04f 33ff 	mov.w	r3, #4294967295
   d7bb8:	f10d 0107 	add.w	r1, sp, #7
   d7bbc:	47a0      	blx	r4
}
   d7bbe:	b002      	add	sp, #8
   d7bc0:	bd10      	pop	{r4, pc}

000d7bc2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d7bc2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7bc4:	6803      	ldr	r3, [r0, #0]
   d7bc6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7bc8:	f04f 33ff 	mov.w	r3, #4294967295
   d7bcc:	46a4      	mov	ip, r4
}
   d7bce:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7bd2:	4760      	bx	ip

000d7bd4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7bd4:	b513      	push	{r0, r1, r4, lr}
   d7bd6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d7bd8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7bda:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d7bde:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d7be0:	f10d 0107 	add.w	r1, sp, #7
   d7be4:	2201      	movs	r2, #1
   d7be6:	47a0      	blx	r4
}
   d7be8:	b002      	add	sp, #8
   d7bea:	bd10      	pop	{r4, pc}

000d7bec <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d7bec:	4770      	bx	lr

000d7bee <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7bee:	b538      	push	{r3, r4, r5, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7bf0:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7bf2:	681a      	ldr	r2, [r3, #0]
   d7bf4:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d7bf6:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d7bf8:	da10      	bge.n	d7c1c <_ZN9TCPClient9connectedEv+0x2e>
   d7bfa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7bfe:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7c02:	429a      	cmp	r2, r3
   d7c04:	d10a      	bne.n	d7c1c <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d7c06:	6803      	ldr	r3, [r0, #0]
   d7c08:	691b      	ldr	r3, [r3, #16]
   d7c0a:	4798      	blx	r3
        if (!rv) {
   d7c0c:	4604      	mov	r4, r0
   d7c0e:	b928      	cbnz	r0, d7c1c <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d7c10:	682b      	ldr	r3, [r5, #0]
   d7c12:	4628      	mov	r0, r5
   d7c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7c16:	4798      	blx	r3
        rv = available();
   d7c18:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d7c1a:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d7c1c:	2001      	movs	r0, #1
   d7c1e:	e7fc      	b.n	d7c1a <_ZN9TCPClient9connectedEv+0x2c>

000d7c20 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d7c20:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d7c22:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d7c24:	43c0      	mvns	r0, r0
   d7c26:	0fc0      	lsrs	r0, r0, #31
   d7c28:	4770      	bx	lr

000d7c2a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7c2a:	4770      	bx	lr

000d7c2c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d7c2c:	4b06      	ldr	r3, [pc, #24]	; (d7c48 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d7c2e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d7c30:	b510      	push	{r4, lr}
   d7c32:	f100 040c 	add.w	r4, r0, #12
	    ||
   d7c36:	d005      	beq.n	d7c44 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d7c38:	4608      	mov	r0, r1
   d7c3a:	f000 fc07 	bl	d844c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d7c3e:	2800      	cmp	r0, #0
	return nullptr;
   d7c40:	bf08      	it	eq
   d7c42:	2400      	moveq	r4, #0
      }
   d7c44:	4620      	mov	r0, r4
   d7c46:	bd10      	pop	{r4, pc}
   d7c48:	000db424 	.word	0x000db424

000d7c4c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7c4c:	b510      	push	{r4, lr}
   d7c4e:	21ac      	movs	r1, #172	; 0xac
   d7c50:	4604      	mov	r4, r0
   d7c52:	f000 fbf4 	bl	d843e <_ZdlPvj>
   d7c56:	4620      	mov	r0, r4
   d7c58:	bd10      	pop	{r4, pc}

000d7c5a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p);
   d7c5a:	f7fc ba20 	b.w	d409e <_ZdlPv>

000d7c5e <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d7c62:	f04f 0800 	mov.w	r8, #0
   d7c66:	b086      	sub	sp, #24
   d7c68:	461d      	mov	r5, r3
   d7c6a:	f8c0 8004 	str.w	r8, [r0, #4]
   d7c6e:	4604      	mov	r4, r0
   d7c70:	460e      	mov	r6, r1
   d7c72:	4617      	mov	r7, r2
    struct timeval tv = {};
   d7c74:	4641      	mov	r1, r8
   d7c76:	2210      	movs	r2, #16
   d7c78:	a802      	add	r0, sp, #8
   d7c7a:	f001 fa51 	bl	d9120 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7c7e:	1c6b      	adds	r3, r5, #1
   d7c80:	d009      	beq.n	d7c96 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d7c82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d7c86:	fbb5 f3f0 	udiv	r3, r5, r0
   d7c8a:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d7c8e:	fb00 5313 	mls	r3, r0, r3, r5
   d7c92:	4358      	muls	r0, r3
   d7c94:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7c96:	6960      	ldr	r0, [r4, #20]
   d7c98:	2310      	movs	r3, #16
   d7c9a:	9300      	str	r3, [sp, #0]
   d7c9c:	6800      	ldr	r0, [r0, #0]
   d7c9e:	ab02      	add	r3, sp, #8
   d7ca0:	f241 0205 	movw	r2, #4101	; 0x1005
   d7ca4:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7ca8:	f7fd ff92 	bl	d5bd0 <sock_setsockopt>
    if (ret < 0) {
   d7cac:	2800      	cmp	r0, #0
   d7cae:	da07      	bge.n	d7cc0 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d7cb0:	f7fe f8ea 	bl	d5e88 <__errno>
   d7cb4:	6803      	ldr	r3, [r0, #0]
   d7cb6:	6063      	str	r3, [r4, #4]
        return 0;
   d7cb8:	2000      	movs	r0, #0
}
   d7cba:	b006      	add	sp, #24
   d7cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d7cc0:	6960      	ldr	r0, [r4, #20]
   d7cc2:	2300      	movs	r3, #0
   d7cc4:	6800      	ldr	r0, [r0, #0]
   d7cc6:	463a      	mov	r2, r7
   d7cc8:	4631      	mov	r1, r6
   d7cca:	f7fd ffa1 	bl	d5c10 <sock_send>
    if (ret < 0) {
   d7cce:	1e03      	subs	r3, r0, #0
   d7cd0:	dbee      	blt.n	d7cb0 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d7cd2:	4618      	mov	r0, r3
   d7cd4:	e7f1      	b.n	d7cba <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d7cd8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d7cd8:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d7cda:	6984      	ldr	r4, [r0, #24]
   d7cdc:	4b0a      	ldr	r3, [pc, #40]	; (d7d08 <_ZN9TCPClientD1Ev+0x30>)
   d7cde:	6003      	str	r3, [r0, #0]
   d7ce0:	4605      	mov	r5, r0
   d7ce2:	b17c      	cbz	r4, d7d04 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d7ce4:	6863      	ldr	r3, [r4, #4]
   d7ce6:	3b01      	subs	r3, #1
   d7ce8:	6063      	str	r3, [r4, #4]
   d7cea:	b95b      	cbnz	r3, d7d04 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d7cec:	6823      	ldr	r3, [r4, #0]
   d7cee:	4620      	mov	r0, r4
   d7cf0:	689b      	ldr	r3, [r3, #8]
   d7cf2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7cf4:	68a3      	ldr	r3, [r4, #8]
   d7cf6:	3b01      	subs	r3, #1
   d7cf8:	60a3      	str	r3, [r4, #8]
   d7cfa:	b91b      	cbnz	r3, d7d04 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d7cfc:	6823      	ldr	r3, [r4, #0]
   d7cfe:	4620      	mov	r0, r4
   d7d00:	68db      	ldr	r3, [r3, #12]
   d7d02:	4798      	blx	r3
   d7d04:	4628      	mov	r0, r5
   d7d06:	bd38      	pop	{r3, r4, r5, pc}
   d7d08:	000db554 	.word	0x000db554

000d7d0c <_ZN9TCPClientD0Ev>:
   d7d0c:	b510      	push	{r4, lr}
   d7d0e:	4604      	mov	r4, r0
   d7d10:	f7ff ffe2 	bl	d7cd8 <_ZN9TCPClientD1Ev>
   d7d14:	4620      	mov	r0, r4
   d7d16:	211c      	movs	r1, #28
   d7d18:	f000 fb91 	bl	d843e <_ZdlPvj>
   d7d1c:	4620      	mov	r0, r4
   d7d1e:	bd10      	pop	{r4, pc}

000d7d20 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d7d20:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7d22:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d7d24:	4b05      	ldr	r3, [pc, #20]	; (d7d3c <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7d26:	4604      	mov	r4, r0
   d7d28:	358c      	adds	r5, #140	; 0x8c
   d7d2a:	f844 3b04 	str.w	r3, [r4], #4
   d7d2e:	4606      	mov	r6, r0
   d7d30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7d32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7d34:	682b      	ldr	r3, [r5, #0]
   d7d36:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7d38:	4630      	mov	r0, r6
   d7d3a:	bd70      	pop	{r4, r5, r6, pc}
   d7d3c:	000db484 	.word	0x000db484

000d7d40 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d7d40:	b510      	push	{r4, lr}
   d7d42:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7d44:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7d48:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7d4c:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d7d4e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7d50:	d005      	beq.n	d7d5e <_ZN9TCPClient4peekEv+0x1e>
   d7d52:	6963      	ldr	r3, [r4, #20]
   d7d54:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d7d58:	4413      	add	r3, r2
   d7d5a:	7918      	ldrb	r0, [r3, #4]
}
   d7d5c:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7d5e:	6803      	ldr	r3, [r0, #0]
   d7d60:	691b      	ldr	r3, [r3, #16]
   d7d62:	4798      	blx	r3
   d7d64:	2800      	cmp	r0, #0
   d7d66:	d1f4      	bne.n	d7d52 <_ZN9TCPClient4peekEv+0x12>
   d7d68:	f04f 30ff 	mov.w	r0, #4294967295
   d7d6c:	e7f6      	b.n	d7d5c <_ZN9TCPClient4peekEv+0x1c>

000d7d6e <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d7d6e:	b510      	push	{r4, lr}
   d7d70:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7d72:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7d76:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7d7a:	429a      	cmp	r2, r3
int TCPClient::read() {
   d7d7c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7d7e:	d008      	beq.n	d7d92 <_ZN9TCPClient4readEv+0x24>
   d7d80:	6963      	ldr	r3, [r4, #20]
   d7d82:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d7d86:	1c51      	adds	r1, r2, #1
   d7d88:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d7d8c:	4413      	add	r3, r2
   d7d8e:	7918      	ldrb	r0, [r3, #4]
}
   d7d90:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7d92:	6803      	ldr	r3, [r0, #0]
   d7d94:	691b      	ldr	r3, [r3, #16]
   d7d96:	4798      	blx	r3
   d7d98:	2800      	cmp	r0, #0
   d7d9a:	d1f1      	bne.n	d7d80 <_ZN9TCPClient4readEv+0x12>
   d7d9c:	f04f 30ff 	mov.w	r0, #4294967295
   d7da0:	e7f6      	b.n	d7d90 <_ZN9TCPClient4readEv+0x22>

000d7da2 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7da4:	6943      	ldr	r3, [r0, #20]
   d7da6:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d7da8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7dac:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7db0:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7db2:	4605      	mov	r5, r0
   d7db4:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d7db6:	d016      	beq.n	d7de6 <_ZN9TCPClient4readEPhj+0x44>
   d7db8:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d7dba:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7dbe:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7dc2:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7dc4:	42bc      	cmp	r4, r7
   d7dc6:	bf28      	it	cs
   d7dc8:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7dca:	3304      	adds	r3, #4
   d7dcc:	4622      	mov	r2, r4
   d7dce:	4419      	add	r1, r3
   d7dd0:	4630      	mov	r0, r6
   d7dd2:	f001 f97d 	bl	d90d0 <memcpy>
   d7dd6:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7dd8:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7ddc:	4423      	add	r3, r4
   d7dde:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d7de2:	4620      	mov	r0, r4
   d7de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d7de6:	6803      	ldr	r3, [r0, #0]
   d7de8:	691b      	ldr	r3, [r3, #16]
   d7dea:	4798      	blx	r3
   d7dec:	2800      	cmp	r0, #0
   d7dee:	d1e3      	bne.n	d7db8 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d7df0:	f04f 34ff 	mov.w	r4, #4294967295
   d7df4:	e7f5      	b.n	d7de2 <_ZN9TCPClient4readEPhj+0x40>

000d7df6 <_ZN9TCPClient12flush_bufferEv>:
   d7df6:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d7df8:	2300      	movs	r3, #0
   d7dfa:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7dfe:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7e00:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d7e04:	4770      	bx	lr

000d7e06 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7e0a:	461f      	mov	r7, r3
    stop();
   d7e0c:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7e0e:	460c      	mov	r4, r1
    stop();
   d7e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7e12:	b08a      	sub	sp, #40	; 0x28
   d7e14:	4605      	mov	r5, r0
   d7e16:	4616      	mov	r6, r2
    stop();
   d7e18:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d7e1a:	7d23      	ldrb	r3, [r4, #20]
   d7e1c:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d7e20:	2b04      	cmp	r3, #4
   d7e22:	bf0c      	ite	eq
   d7e24:	2002      	moveq	r0, #2
   d7e26:	200a      	movne	r0, #10
   d7e28:	2206      	movs	r2, #6
   d7e2a:	2101      	movs	r1, #1
   d7e2c:	f7fd fef8 	bl	d5c20 <sock_socket>
   d7e30:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7e34:	696b      	ldr	r3, [r5, #20]
   d7e36:	681b      	ldr	r3, [r3, #0]
   d7e38:	2b00      	cmp	r3, #0
   d7e3a:	da08      	bge.n	d7e4e <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d7e3c:	682b      	ldr	r3, [r5, #0]
   d7e3e:	4628      	mov	r0, r5
   d7e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7e42:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d7e44:	4798      	blx	r3
}
   d7e46:	4620      	mov	r0, r4
   d7e48:	b00a      	add	sp, #40	; 0x28
   d7e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d7e4e:	4628      	mov	r0, r5
   d7e50:	f7ff ffd1 	bl	d7df6 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d7e54:	b1b7      	cbz	r7, d7e84 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d7e56:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7e58:	a903      	add	r1, sp, #12
   d7e5a:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d7e5c:	9303      	str	r3, [sp, #12]
   d7e5e:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7e62:	f7fd fd4b 	bl	d58fc <if_index_to_name>
   d7e66:	2800      	cmp	r0, #0
   d7e68:	d1e8      	bne.n	d7e3c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d7e6a:	6968      	ldr	r0, [r5, #20]
   d7e6c:	2306      	movs	r3, #6
   d7e6e:	9300      	str	r3, [sp, #0]
   d7e70:	6800      	ldr	r0, [r0, #0]
   d7e72:	ab03      	add	r3, sp, #12
   d7e74:	f241 020b 	movw	r2, #4107	; 0x100b
   d7e78:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7e7c:	f7fd fea8 	bl	d5bd0 <sock_setsockopt>
   d7e80:	2800      	cmp	r0, #0
   d7e82:	d1db      	bne.n	d7e3c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d7e84:	221c      	movs	r2, #28
   d7e86:	2100      	movs	r1, #0
   d7e88:	a803      	add	r0, sp, #12
   d7e8a:	f001 f949 	bl	d9120 <memset>
    if (ip.version() == 4) {
   d7e8e:	7d23      	ldrb	r3, [r4, #20]
   d7e90:	2b04      	cmp	r3, #4
   d7e92:	d11d      	bne.n	d7ed0 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d7e94:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d7e98:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d7e9a:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d7e9e:	f7fd fdf7 	bl	d5a90 <inet_htons>
   d7ea2:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7ea6:	6860      	ldr	r0, [r4, #4]
   d7ea8:	f7fd fdea 	bl	d5a80 <inet_htonl>
   d7eac:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7eae:	696b      	ldr	r3, [r5, #20]
   d7eb0:	221c      	movs	r2, #28
   d7eb2:	6818      	ldr	r0, [r3, #0]
   d7eb4:	a903      	add	r1, sp, #12
   d7eb6:	f7fd fe9b 	bl	d5bf0 <sock_connect>
   d7eba:	2800      	cmp	r0, #0
   d7ebc:	d1be      	bne.n	d7e3c <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d7ebe:	3404      	adds	r4, #4
   d7ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7ec2:	696d      	ldr	r5, [r5, #20]
   d7ec4:	358c      	adds	r5, #140	; 0x8c
   d7ec6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7ec8:	6823      	ldr	r3, [r4, #0]
   d7eca:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d7ecc:	2401      	movs	r4, #1
   d7ece:	e7ba      	b.n	d7e46 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d7ed0:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d7ed4:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d7ed6:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d7eda:	f7fd fdd9 	bl	d5a90 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7ede:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d7ee0:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7ee4:	1d23      	adds	r3, r4, #4
   d7ee6:	f104 0714 	add.w	r7, r4, #20
   d7eea:	6818      	ldr	r0, [r3, #0]
   d7eec:	6859      	ldr	r1, [r3, #4]
   d7eee:	4632      	mov	r2, r6
   d7ef0:	c203      	stmia	r2!, {r0, r1}
   d7ef2:	3308      	adds	r3, #8
   d7ef4:	42bb      	cmp	r3, r7
   d7ef6:	4616      	mov	r6, r2
   d7ef8:	d1f7      	bne.n	d7eea <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d7efa:	e7d8      	b.n	d7eae <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d7efc <_ZN9TCPClient9availableEv>:
{
   d7efc:	b530      	push	{r4, r5, lr}
   d7efe:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d7f00:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d7f04:	b08b      	sub	sp, #44	; 0x2c
   d7f06:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d7f08:	b12b      	cbz	r3, d7f16 <_ZN9TCPClient9availableEv+0x1a>
   d7f0a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7f0e:	429a      	cmp	r2, r3
   d7f10:	d101      	bne.n	d7f16 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d7f12:	f7ff ff70 	bl	d7df6 <_ZN9TCPClient12flush_bufferEv>
   d7f16:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d7f18:	6808      	ldr	r0, [r1, #0]
   d7f1a:	2800      	cmp	r0, #0
   d7f1c:	db18      	blt.n	d7f50 <_ZN9TCPClient9availableEv+0x54>
   d7f1e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d7f22:	2d7f      	cmp	r5, #127	; 0x7f
   d7f24:	d814      	bhi.n	d7f50 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d7f26:	3104      	adds	r1, #4
   d7f28:	2308      	movs	r3, #8
   d7f2a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7f2e:	4429      	add	r1, r5
   d7f30:	f7fd fe66 	bl	d5c00 <sock_recv>
            if (ret > 0) {
   d7f34:	2800      	cmp	r0, #0
   d7f36:	dd13      	ble.n	d7f60 <_ZN9TCPClient9availableEv+0x64>
   d7f38:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d7f3a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7f3e:	b90a      	cbnz	r2, d7f44 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d7f40:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7f44:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d7f46:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7f4a:	4410      	add	r0, r2
   d7f4c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d7f50:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d7f52:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d7f56:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d7f5a:	1ac0      	subs	r0, r0, r3
   d7f5c:	b00b      	add	sp, #44	; 0x2c
   d7f5e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7f60:	f7fd ff92 	bl	d5e88 <__errno>
   d7f64:	6803      	ldr	r3, [r0, #0]
   d7f66:	2b0b      	cmp	r3, #11
   d7f68:	d0f2      	beq.n	d7f50 <_ZN9TCPClient9availableEv+0x54>
   d7f6a:	f7fd ff8d 	bl	d5e88 <__errno>
   d7f6e:	6803      	ldr	r3, [r0, #0]
   d7f70:	2b0b      	cmp	r3, #11
   d7f72:	d0ed      	beq.n	d7f50 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d7f74:	2320      	movs	r3, #32
   d7f76:	2500      	movs	r5, #0
   d7f78:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d7f7c:	f7fd ff84 	bl	d5e88 <__errno>
   d7f80:	6803      	ldr	r3, [r0, #0]
   d7f82:	9301      	str	r3, [sp, #4]
   d7f84:	4b08      	ldr	r3, [pc, #32]	; (d7fa8 <_ZN9TCPClient9availableEv+0xac>)
   d7f86:	4909      	ldr	r1, [pc, #36]	; (d7fac <_ZN9TCPClient9availableEv+0xb0>)
   d7f88:	9300      	str	r3, [sp, #0]
   d7f8a:	aa02      	add	r2, sp, #8
   d7f8c:	462b      	mov	r3, r5
   d7f8e:	2032      	movs	r0, #50	; 0x32
   d7f90:	f7fd feb6 	bl	d5d00 <log_message>
                    sock_close(d_->sock);
   d7f94:	6963      	ldr	r3, [r4, #20]
   d7f96:	6818      	ldr	r0, [r3, #0]
   d7f98:	f7fd fe22 	bl	d5be0 <sock_close>
   d7f9c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7f9e:	f04f 32ff 	mov.w	r2, #4294967295
   d7fa2:	601a      	str	r2, [r3, #0]
   d7fa4:	e7d4      	b.n	d7f50 <_ZN9TCPClient9availableEv+0x54>
   d7fa6:	bf00      	nop
   d7fa8:	000db51f 	.word	0x000db51f
   d7fac:	000db518 	.word	0x000db518

000d7fb0 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d7fb0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7fb2:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d7fb4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d7fb6:	6818      	ldr	r0, [r3, #0]
   d7fb8:	2800      	cmp	r0, #0
   d7fba:	db01      	blt.n	d7fc0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7fbc:	f7fd fe10 	bl	d5be0 <sock_close>
   d7fc0:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d7fc2:	f04f 32ff 	mov.w	r2, #4294967295
   d7fc6:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d7fc8:	6960      	ldr	r0, [r4, #20]
   d7fca:	2211      	movs	r2, #17
   d7fcc:	2100      	movs	r1, #0
   d7fce:	308c      	adds	r0, #140	; 0x8c
   d7fd0:	f001 f8a6 	bl	d9120 <memset>
    flush_buffer();
   d7fd4:	4620      	mov	r0, r4
}
   d7fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d7fda:	f7ff bf0c 	b.w	d7df6 <_ZN9TCPClient12flush_bufferEv>

000d7fde <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d7fde:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7fe0:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d7fe2:	4604      	mov	r4, r0
          total(0) {
   d7fe4:	6001      	str	r1, [r0, #0]
   d7fe6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d7fea:	3088      	adds	r0, #136	; 0x88
   d7fec:	f7ff fc06 	bl	d77fc <_ZN9IPAddressC1Ev>
}
   d7ff0:	4620      	mov	r0, r4
   d7ff2:	bd10      	pop	{r4, pc}

000d7ff4 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d7ff4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7ff6:	2300      	movs	r3, #0
   d7ff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7ffc:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d8000:	4a0e      	ldr	r2, [pc, #56]	; (d803c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d8002:	6103      	str	r3, [r0, #16]
   d8004:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d8006:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d8008:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d800a:	20ac      	movs	r0, #172	; 0xac
   d800c:	9101      	str	r1, [sp, #4]
   d800e:	f7fc f842 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d8012:	1e05      	subs	r5, r0, #0
   d8014:	f105 060c 	add.w	r6, r5, #12
   d8018:	d008      	beq.n	d802c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d801a:	2301      	movs	r3, #1
   d801c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d8020:	4b07      	ldr	r3, [pc, #28]	; (d8040 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8022:	9901      	ldr	r1, [sp, #4]
   d8024:	602b      	str	r3, [r5, #0]
   d8026:	4630      	mov	r0, r6
   d8028:	f7ff ffd9 	bl	d7fde <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d802c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d802e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d8032:	f7ff fee0 	bl	d7df6 <_ZN9TCPClient12flush_bufferEv>
}
   d8036:	b002      	add	sp, #8
   d8038:	bd70      	pop	{r4, r5, r6, pc}
   d803a:	bf00      	nop
   d803c:	000db554 	.word	0x000db554
   d8040:	000db538 	.word	0x000db538

000d8044 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d8044:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d8046:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d804a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d804c:	f7ff ffd2 	bl	d7ff4 <_ZN9TCPClientC1Ei>
}
   d8050:	4620      	mov	r0, r4
   d8052:	bd10      	pop	{r4, pc}

000d8054 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d8054:	b510      	push	{r4, lr}
   d8056:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8058:	6800      	ldr	r0, [r0, #0]
   d805a:	2800      	cmp	r0, #0
   d805c:	db01      	blt.n	d8062 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d805e:	f7fd fdbf 	bl	d5be0 <sock_close>
    }
}
   d8062:	4620      	mov	r0, r4
   d8064:	bd10      	pop	{r4, pc}

000d8066 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d8066:	300c      	adds	r0, #12
   d8068:	f7ff bff4 	b.w	d8054 <_ZN9TCPClient4DataD1Ev>

000d806c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d806c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8070:	4698      	mov	r8, r3
    stop();
   d8072:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8074:	b093      	sub	sp, #76	; 0x4c
   d8076:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d8078:	2400      	movs	r4, #0
    stop();
   d807a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d807c:	4606      	mov	r6, r0
   d807e:	4617      	mov	r7, r2
    stop();
   d8080:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8082:	4628      	mov	r0, r5
   d8084:	466b      	mov	r3, sp
   d8086:	4622      	mov	r2, r4
   d8088:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d808a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d808c:	f7fd fc1e 	bl	d58cc <netdb_getaddrinfo>
   d8090:	4605      	mov	r5, r0
   d8092:	2800      	cmp	r0, #0
   d8094:	d163      	bne.n	d815e <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d8096:	9b00      	ldr	r3, [sp, #0]
   d8098:	2b00      	cmp	r3, #0
   d809a:	d04b      	beq.n	d8134 <_ZN9TCPClient7connectEPKctm+0xc8>
   d809c:	695b      	ldr	r3, [r3, #20]
   d809e:	2b00      	cmp	r3, #0
   d80a0:	d048      	beq.n	d8134 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d80a2:	a806      	add	r0, sp, #24
   d80a4:	f7ff fbaa 	bl	d77fc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d80a8:	9b00      	ldr	r3, [sp, #0]
   d80aa:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d80ac:	7863      	ldrb	r3, [r4, #1]
   d80ae:	2b02      	cmp	r3, #2
   d80b0:	d104      	bne.n	d80bc <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d80b2:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d80b4:	a806      	add	r0, sp, #24
   d80b6:	f7fd ffd3 	bl	d6060 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d80ba:	e026      	b.n	d810a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d80bc:	2b0a      	cmp	r3, #10
   d80be:	d124      	bne.n	d810a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d80c0:	2211      	movs	r2, #17
   d80c2:	4629      	mov	r1, r5
   d80c4:	a801      	add	r0, sp, #4
   d80c6:	f001 f82b 	bl	d9120 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d80ca:	68a3      	ldr	r3, [r4, #8]
   d80cc:	2b00      	cmp	r3, #0
   d80ce:	d038      	beq.n	d8142 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d80d0:	f104 0308 	add.w	r3, r4, #8
   d80d4:	f10d 0c04 	add.w	ip, sp, #4
   d80d8:	3418      	adds	r4, #24
   d80da:	6818      	ldr	r0, [r3, #0]
   d80dc:	6859      	ldr	r1, [r3, #4]
   d80de:	4662      	mov	r2, ip
   d80e0:	c203      	stmia	r2!, {r0, r1}
   d80e2:	3308      	adds	r3, #8
   d80e4:	42a3      	cmp	r3, r4
   d80e6:	4694      	mov	ip, r2
   d80e8:	d1f7      	bne.n	d80da <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d80ea:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d80ec:	a901      	add	r1, sp, #4
   d80ee:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d80f0:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d80f4:	f7ff fb90 	bl	d7818 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d80f8:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d80fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d8100:	ac07      	add	r4, sp, #28
   d8102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8104:	f8dc 3000 	ldr.w	r3, [ip]
   d8108:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d810a:	a806      	add	r0, sp, #24
   d810c:	f7ff fb96 	bl	d783c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d8110:	b180      	cbz	r0, d8134 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d8112:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d8114:	ad07      	add	r5, sp, #28
   d8116:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d811a:	4b12      	ldr	r3, [pc, #72]	; (d8164 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d811c:	930c      	str	r3, [sp, #48]	; 0x30
   d811e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8120:	ac0d      	add	r4, sp, #52	; 0x34
   d8122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8124:	682b      	ldr	r3, [r5, #0]
   d8126:	7023      	strb	r3, [r4, #0]
   d8128:	463a      	mov	r2, r7
   d812a:	4643      	mov	r3, r8
   d812c:	a90c      	add	r1, sp, #48	; 0x30
   d812e:	4630      	mov	r0, r6
   d8130:	47c8      	blx	r9
   d8132:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d8134:	9800      	ldr	r0, [sp, #0]
   d8136:	f7fd fbc1 	bl	d58bc <netdb_freeaddrinfo>
}
   d813a:	4628      	mov	r0, r5
   d813c:	b013      	add	sp, #76	; 0x4c
   d813e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8142:	68e3      	ldr	r3, [r4, #12]
   d8144:	2b00      	cmp	r3, #0
   d8146:	d1c3      	bne.n	d80d0 <_ZN9TCPClient7connectEPKctm+0x64>
   d8148:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d814c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d8150:	f7fd fc96 	bl	d5a80 <inet_htonl>
   d8154:	4581      	cmp	r9, r0
   d8156:	d1bb      	bne.n	d80d0 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d8158:	f104 0114 	add.w	r1, r4, #20
   d815c:	e7aa      	b.n	d80b4 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d815e:	4625      	mov	r5, r4
   d8160:	e7e8      	b.n	d8134 <_ZN9TCPClient7connectEPKctm+0xc8>
   d8162:	bf00      	nop
   d8164:	000db484 	.word	0x000db484

000d8168 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8168:	2200      	movs	r2, #0
   d816a:	6840      	ldr	r0, [r0, #4]
   d816c:	4611      	mov	r1, r2
   d816e:	f7fd be0b 	b.w	d5d88 <network_ready>

000d8172 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8172:	2200      	movs	r2, #0
   d8174:	6840      	ldr	r0, [r0, #4]
   d8176:	4611      	mov	r1, r2
   d8178:	f7fd be26 	b.w	d5dc8 <network_listening>

000d817c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d817c:	2200      	movs	r2, #0
   d817e:	6840      	ldr	r0, [r0, #4]
   d8180:	4611      	mov	r1, r2
   d8182:	f7fd be31 	b.w	d5de8 <network_get_listen_timeout>

000d8186 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8186:	6840      	ldr	r0, [r0, #4]
   d8188:	2200      	movs	r2, #0
   d818a:	f7fd be25 	b.w	d5dd8 <network_set_listen_timeout>

000d818e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d818e:	6840      	ldr	r0, [r0, #4]
   d8190:	2200      	movs	r2, #0
   d8192:	f081 0101 	eor.w	r1, r1, #1
   d8196:	f7fd be0f 	b.w	d5db8 <network_listen>

000d819a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d819a:	2300      	movs	r3, #0
   d819c:	6840      	ldr	r0, [r0, #4]
   d819e:	461a      	mov	r2, r3
   d81a0:	4619      	mov	r1, r3
   d81a2:	f7fd be01 	b.w	d5da8 <network_off>

000d81a6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d81a6:	2200      	movs	r2, #0
   d81a8:	6840      	ldr	r0, [r0, #4]
   d81aa:	4611      	mov	r1, r2
   d81ac:	f7fd bddc 	b.w	d5d68 <network_connecting>

000d81b0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d81b0:	6840      	ldr	r0, [r0, #4]
   d81b2:	2200      	movs	r2, #0
   d81b4:	2102      	movs	r1, #2
   d81b6:	f7fd bddf 	b.w	d5d78 <network_disconnect>

000d81ba <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d81ba:	2300      	movs	r3, #0
   d81bc:	6840      	ldr	r0, [r0, #4]
   d81be:	461a      	mov	r2, r3
   d81c0:	f7fd bdca 	b.w	d5d58 <network_connect>

000d81c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d81c4:	4b02      	ldr	r3, [pc, #8]	; (d81d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d81c6:	2204      	movs	r2, #4
   d81c8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d81ca:	4a02      	ldr	r2, [pc, #8]	; (d81d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d81cc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d81ce:	4770      	bx	lr
   d81d0:	2003e7c4 	.word	0x2003e7c4
   d81d4:	000db5a0 	.word	0x000db5a0

000d81d8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d81d8:	2300      	movs	r3, #0
   d81da:	6840      	ldr	r0, [r0, #4]
   d81dc:	461a      	mov	r2, r3
   d81de:	f7fd bdbb 	b.w	d5d58 <network_connect>

000d81e2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d81e2:	6840      	ldr	r0, [r0, #4]
   d81e4:	2200      	movs	r2, #0
   d81e6:	2102      	movs	r1, #2
   d81e8:	f7fd bdc6 	b.w	d5d78 <network_disconnect>

000d81ec <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d81ec:	2200      	movs	r2, #0
   d81ee:	6840      	ldr	r0, [r0, #4]
   d81f0:	4611      	mov	r1, r2
   d81f2:	f7fd bdb9 	b.w	d5d68 <network_connecting>

000d81f6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d81f6:	2200      	movs	r2, #0
   d81f8:	6840      	ldr	r0, [r0, #4]
   d81fa:	4611      	mov	r1, r2
   d81fc:	f7fd bdc4 	b.w	d5d88 <network_ready>

000d8200 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8200:	2300      	movs	r3, #0
   d8202:	6840      	ldr	r0, [r0, #4]
   d8204:	461a      	mov	r2, r3
   d8206:	4619      	mov	r1, r3
   d8208:	f7fd bdc6 	b.w	d5d98 <network_on>

000d820c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d820c:	2300      	movs	r3, #0
   d820e:	6840      	ldr	r0, [r0, #4]
   d8210:	461a      	mov	r2, r3
   d8212:	4619      	mov	r1, r3
   d8214:	f7fd bdc8 	b.w	d5da8 <network_off>

000d8218 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d8218:	6840      	ldr	r0, [r0, #4]
   d821a:	2100      	movs	r1, #0
   d821c:	f7fd bdec 	b.w	d5df8 <network_is_on>

000d8220 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d8220:	6840      	ldr	r0, [r0, #4]
   d8222:	2100      	movs	r1, #0
   d8224:	f7fd bdf0 	b.w	d5e08 <network_is_off>

000d8228 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8228:	6840      	ldr	r0, [r0, #4]
   d822a:	2200      	movs	r2, #0
   d822c:	f081 0101 	eor.w	r1, r1, #1
   d8230:	f7fd bdc2 	b.w	d5db8 <network_listen>

000d8234 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8234:	6840      	ldr	r0, [r0, #4]
   d8236:	2200      	movs	r2, #0
   d8238:	f7fd bdce 	b.w	d5dd8 <network_set_listen_timeout>

000d823c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d823c:	2200      	movs	r2, #0
   d823e:	6840      	ldr	r0, [r0, #4]
   d8240:	4611      	mov	r1, r2
   d8242:	f7fd bdd1 	b.w	d5de8 <network_get_listen_timeout>

000d8246 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8246:	2200      	movs	r2, #0
   d8248:	6840      	ldr	r0, [r0, #4]
   d824a:	4611      	mov	r1, r2
   d824c:	f7fd bdbc 	b.w	d5dc8 <network_listening>

000d8250 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8254:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d8256:	b095      	sub	sp, #84	; 0x54
   d8258:	4616      	mov	r6, r2
   d825a:	460d      	mov	r5, r1
   d825c:	4607      	mov	r7, r0
    IPAddress addr;
   d825e:	f7ff facd 	bl	d77fc <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d8262:	4621      	mov	r1, r4
   d8264:	2218      	movs	r2, #24
   d8266:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d8268:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d826a:	f000 ff59 	bl	d9120 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d826e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d8270:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8274:	4621      	mov	r1, r4
   d8276:	466b      	mov	r3, sp
   d8278:	aa0c      	add	r2, sp, #48	; 0x30
   d827a:	4630      	mov	r0, r6
   d827c:	f7fd fb26 	bl	d58cc <netdb_getaddrinfo>
    if (!r) {
   d8280:	4604      	mov	r4, r0
   d8282:	2800      	cmp	r0, #0
   d8284:	d14c      	bne.n	d8320 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8286:	4602      	mov	r2, r0
   d8288:	2101      	movs	r1, #1
   d828a:	6868      	ldr	r0, [r5, #4]
   d828c:	f7fd fd7c 	bl	d5d88 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8290:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8292:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8294:	4622      	mov	r2, r4
   d8296:	6868      	ldr	r0, [r5, #4]
   d8298:	f7fd fd76 	bl	d5d88 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d829c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d829e:	4681      	mov	r9, r0
        bool ok = false;
   d82a0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d82a2:	2e00      	cmp	r6, #0
   d82a4:	d03c      	beq.n	d8320 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d82a6:	2900      	cmp	r1, #0
   d82a8:	d13a      	bne.n	d8320 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d82aa:	6873      	ldr	r3, [r6, #4]
   d82ac:	2b02      	cmp	r3, #2
   d82ae:	d003      	beq.n	d82b8 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d82b0:	2b0a      	cmp	r3, #10
   d82b2:	d011      	beq.n	d82d8 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d82b4:	69f6      	ldr	r6, [r6, #28]
   d82b6:	e7f4      	b.n	d82a2 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d82b8:	f1b8 0f00 	cmp.w	r8, #0
   d82bc:	d00a      	beq.n	d82d4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d82be:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d82c0:	a806      	add	r0, sp, #24
   d82c2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d82c4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d82c6:	f7ff fadd 	bl	d7884 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d82ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d82cc:	1d3c      	adds	r4, r7, #4
   d82ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d82d0:	682b      	ldr	r3, [r5, #0]
   d82d2:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d82d4:	4641      	mov	r1, r8
   d82d6:	e7ed      	b.n	d82b4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d82d8:	f1b9 0f00 	cmp.w	r9, #0
   d82dc:	d101      	bne.n	d82e2 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d82de:	4649      	mov	r1, r9
   d82e0:	e7e8      	b.n	d82b4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d82e2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d82e4:	2210      	movs	r2, #16
   d82e6:	a801      	add	r0, sp, #4
   d82e8:	f000 ff1a 	bl	d9120 <memset>
                    a.v = 6;
   d82ec:	2306      	movs	r3, #6
   d82ee:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d82f2:	ad01      	add	r5, sp, #4
   d82f4:	f104 0308 	add.w	r3, r4, #8
   d82f8:	3418      	adds	r4, #24
   d82fa:	6818      	ldr	r0, [r3, #0]
   d82fc:	6859      	ldr	r1, [r3, #4]
   d82fe:	462a      	mov	r2, r5
   d8300:	c203      	stmia	r2!, {r0, r1}
   d8302:	3308      	adds	r3, #8
   d8304:	42a3      	cmp	r3, r4
   d8306:	4615      	mov	r5, r2
   d8308:	d1f7      	bne.n	d82fa <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d830a:	a901      	add	r1, sp, #4
   d830c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d830e:	ad07      	add	r5, sp, #28
   d8310:	f7ff fa82 	bl	d7818 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8316:	1d3c      	adds	r4, r7, #4
   d8318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d831a:	682b      	ldr	r3, [r5, #0]
   d831c:	7023      	strb	r3, [r4, #0]
   d831e:	e7de      	b.n	d82de <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8320:	9800      	ldr	r0, [sp, #0]
   d8322:	f7fd facb 	bl	d58bc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8326:	4638      	mov	r0, r7
   d8328:	b015      	add	sp, #84	; 0x54
   d832a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d8330 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8330:	4b02      	ldr	r3, [pc, #8]	; (d833c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8332:	4a03      	ldr	r2, [pc, #12]	; (d8340 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8334:	601a      	str	r2, [r3, #0]
   d8336:	2200      	movs	r2, #0
   d8338:	605a      	str	r2, [r3, #4]

} // spark
   d833a:	4770      	bx	lr
   d833c:	2003e7cc 	.word	0x2003e7cc
   d8340:	000db5dc 	.word	0x000db5dc

000d8344 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d8344:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d8346:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d8348:	d902      	bls.n	d8350 <pinAvailable+0xc>
    return false;
   d834a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d834c:	b002      	add	sp, #8
   d834e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d8350:	f1a0 030b 	sub.w	r3, r0, #11
   d8354:	2b02      	cmp	r3, #2
   d8356:	d81a      	bhi.n	d838e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8358:	4c17      	ldr	r4, [pc, #92]	; (d83b8 <pinAvailable+0x74>)
   d835a:	7821      	ldrb	r1, [r4, #0]
   d835c:	f3bf 8f5b 	dmb	ish
   d8360:	f011 0101 	ands.w	r1, r1, #1
   d8364:	d10b      	bne.n	d837e <pinAvailable+0x3a>
   d8366:	4620      	mov	r0, r4
   d8368:	9101      	str	r1, [sp, #4]
   d836a:	f7fb fe9a 	bl	d40a2 <__cxa_guard_acquire>
   d836e:	9901      	ldr	r1, [sp, #4]
   d8370:	b128      	cbz	r0, d837e <pinAvailable+0x3a>
   d8372:	4812      	ldr	r0, [pc, #72]	; (d83bc <pinAvailable+0x78>)
   d8374:	f7fd fddc 	bl	d5f30 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8378:	4620      	mov	r0, r4
   d837a:	f7fb fe97 	bl	d40ac <__cxa_guard_release>
   d837e:	4b0f      	ldr	r3, [pc, #60]	; (d83bc <pinAvailable+0x78>)
   d8380:	7818      	ldrb	r0, [r3, #0]
   d8382:	f7fd fc65 	bl	d5c50 <hal_spi_is_enabled>
   d8386:	2800      	cmp	r0, #0
   d8388:	d1df      	bne.n	d834a <pinAvailable+0x6>
  return true; // 'pin' is available
   d838a:	2001      	movs	r0, #1
   d838c:	e7de      	b.n	d834c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d838e:	2801      	cmp	r0, #1
   d8390:	d809      	bhi.n	d83a6 <pinAvailable+0x62>
   d8392:	f000 f827 	bl	d83e4 <_Z19__fetch_global_Wirev>
   d8396:	2100      	movs	r1, #0
   d8398:	7c00      	ldrb	r0, [r0, #16]
   d839a:	f7fd fc01 	bl	d5ba0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d839e:	f080 0001 	eor.w	r0, r0, #1
   d83a2:	b2c0      	uxtb	r0, r0
   d83a4:	e7d2      	b.n	d834c <pinAvailable+0x8>
   d83a6:	3809      	subs	r0, #9
   d83a8:	2801      	cmp	r0, #1
   d83aa:	d8ee      	bhi.n	d838a <pinAvailable+0x46>
   d83ac:	f7ff fb54 	bl	d7a58 <_Z22__fetch_global_Serial1v>
   d83b0:	7c00      	ldrb	r0, [r0, #16]
   d83b2:	f7fd fba5 	bl	d5b00 <hal_usart_is_enabled>
   d83b6:	e7f2      	b.n	d839e <pinAvailable+0x5a>
   d83b8:	2003e634 	.word	0x2003e634
   d83bc:	2003e638 	.word	0x2003e638

000d83c0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d83c0:	2823      	cmp	r0, #35	; 0x23
{
   d83c2:	b538      	push	{r3, r4, r5, lr}
   d83c4:	4604      	mov	r4, r0
   d83c6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d83c8:	d80a      	bhi.n	d83e0 <pinMode+0x20>
   d83ca:	29ff      	cmp	r1, #255	; 0xff
   d83cc:	d008      	beq.n	d83e0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d83ce:	f7ff ffb9 	bl	d8344 <pinAvailable>
   d83d2:	b128      	cbz	r0, d83e0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d83d4:	4629      	mov	r1, r5
   d83d6:	4620      	mov	r0, r4
}
   d83d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d83dc:	f7fd ba86 	b.w	d58ec <HAL_Pin_Mode>
}
   d83e0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d83e4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d83e4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d83e6:	4d0f      	ldr	r5, [pc, #60]	; (d8424 <_Z19__fetch_global_Wirev+0x40>)
   d83e8:	7829      	ldrb	r1, [r5, #0]
   d83ea:	f3bf 8f5b 	dmb	ish
   d83ee:	f011 0401 	ands.w	r4, r1, #1
{
   d83f2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d83f4:	d113      	bne.n	d841e <_Z19__fetch_global_Wirev+0x3a>
   d83f6:	4628      	mov	r0, r5
   d83f8:	f7fb fe53 	bl	d40a2 <__cxa_guard_acquire>
   d83fc:	b178      	cbz	r0, d841e <_Z19__fetch_global_Wirev+0x3a>
   d83fe:	a801      	add	r0, sp, #4
   d8400:	f7fc f8bc 	bl	d457c <_Z17acquireWireBufferv>
   d8404:	aa01      	add	r2, sp, #4
   d8406:	4621      	mov	r1, r4
   d8408:	4807      	ldr	r0, [pc, #28]	; (d8428 <_Z19__fetch_global_Wirev+0x44>)
   d840a:	f7ff fb7b 	bl	d7b04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d840e:	4628      	mov	r0, r5
   d8410:	f7fb fe4c 	bl	d40ac <__cxa_guard_release>
   d8414:	4a05      	ldr	r2, [pc, #20]	; (d842c <_Z19__fetch_global_Wirev+0x48>)
   d8416:	4906      	ldr	r1, [pc, #24]	; (d8430 <_Z19__fetch_global_Wirev+0x4c>)
   d8418:	4803      	ldr	r0, [pc, #12]	; (d8428 <_Z19__fetch_global_Wirev+0x44>)
   d841a:	f000 f80b 	bl	d8434 <__aeabi_atexit>
	return wire;
}
   d841e:	4802      	ldr	r0, [pc, #8]	; (d8428 <_Z19__fetch_global_Wirev+0x44>)
   d8420:	b007      	add	sp, #28
   d8422:	bd30      	pop	{r4, r5, pc}
   d8424:	2003e7d8 	.word	0x2003e7d8
   d8428:	2003e7dc 	.word	0x2003e7dc
   d842c:	200355cc 	.word	0x200355cc
   d8430:	000d7aad 	.word	0x000d7aad

000d8434 <__aeabi_atexit>:
   d8434:	460b      	mov	r3, r1
   d8436:	4601      	mov	r1, r0
   d8438:	4618      	mov	r0, r3
   d843a:	f000 be2d 	b.w	d9098 <__cxa_atexit>

000d843e <_ZdlPvj>:
   d843e:	f7fb be2e 	b.w	d409e <_ZdlPv>

000d8442 <_ZnajRKSt9nothrow_t>:
   d8442:	f7fb be2a 	b.w	d409a <_Znaj>

000d8446 <_ZSt25__throw_bad_function_callv>:
   d8446:	b508      	push	{r3, lr}
   d8448:	f7fd fd0e 	bl	d5e68 <abort>

000d844c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d844c:	4901      	ldr	r1, [pc, #4]	; (d8454 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d844e:	f000 b8f9 	b.w	d8644 <_ZNKSt9type_infoeqERKS_>
   d8452:	bf00      	nop
   d8454:	000db62c 	.word	0x000db62c

000d8458 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d8458:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d845a:	2400      	movs	r4, #0
   d845c:	2310      	movs	r3, #16
   d845e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d8462:	6803      	ldr	r3, [r0, #0]
   d8464:	9400      	str	r4, [sp, #0]
   d8466:	699e      	ldr	r6, [r3, #24]
   d8468:	f88d 4004 	strb.w	r4, [sp, #4]
   d846c:	4615      	mov	r5, r2
   d846e:	466b      	mov	r3, sp
   d8470:	6812      	ldr	r2, [r2, #0]
   d8472:	47b0      	blx	r6
   d8474:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d8478:	f003 0306 	and.w	r3, r3, #6
   d847c:	2b06      	cmp	r3, #6
   d847e:	bf03      	ittte	eq
   d8480:	9b00      	ldreq	r3, [sp, #0]
   d8482:	602b      	streq	r3, [r5, #0]
   d8484:	2001      	moveq	r0, #1
   d8486:	4620      	movne	r0, r4
   d8488:	b004      	add	sp, #16
   d848a:	bd70      	pop	{r4, r5, r6, pc}

000d848c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d848c:	9800      	ldr	r0, [sp, #0]
   d848e:	4290      	cmp	r0, r2
   d8490:	bf14      	ite	ne
   d8492:	2001      	movne	r0, #1
   d8494:	2006      	moveq	r0, #6
   d8496:	4770      	bx	lr

000d8498 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d8498:	b510      	push	{r4, lr}
   d849a:	4b03      	ldr	r3, [pc, #12]	; (d84a8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d849c:	6003      	str	r3, [r0, #0]
   d849e:	4604      	mov	r4, r0
   d84a0:	f000 f8cd 	bl	d863e <_ZNSt9type_infoD1Ev>
   d84a4:	4620      	mov	r0, r4
   d84a6:	bd10      	pop	{r4, pc}
   d84a8:	000db66c 	.word	0x000db66c

000d84ac <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d84ac:	b510      	push	{r4, lr}
   d84ae:	4604      	mov	r4, r0
   d84b0:	f7ff fff2 	bl	d8498 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d84b4:	4620      	mov	r0, r4
   d84b6:	2108      	movs	r1, #8
   d84b8:	f7ff ffc1 	bl	d843e <_ZdlPvj>
   d84bc:	4620      	mov	r0, r4
   d84be:	bd10      	pop	{r4, pc}

000d84c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d84c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d84c4:	461f      	mov	r7, r3
   d84c6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d84ca:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d84ce:	4598      	cmp	r8, r3
   d84d0:	4606      	mov	r6, r0
   d84d2:	4615      	mov	r5, r2
   d84d4:	d107      	bne.n	d84e6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d84d6:	9907      	ldr	r1, [sp, #28]
   d84d8:	f000 f8b4 	bl	d8644 <_ZNKSt9type_infoeqERKS_>
   d84dc:	b118      	cbz	r0, d84e6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d84de:	7165      	strb	r5, [r4, #5]
   d84e0:	2000      	movs	r0, #0
   d84e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d84e6:	4639      	mov	r1, r7
   d84e8:	4630      	mov	r0, r6
   d84ea:	f000 f8ab 	bl	d8644 <_ZNKSt9type_infoeqERKS_>
   d84ee:	2800      	cmp	r0, #0
   d84f0:	d0f6      	beq.n	d84e0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d84f2:	2301      	movs	r3, #1
   d84f4:	f8c4 8000 	str.w	r8, [r4]
   d84f8:	7125      	strb	r5, [r4, #4]
   d84fa:	71a3      	strb	r3, [r4, #6]
   d84fc:	e7f0      	b.n	d84e0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d84fe <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d84fe:	b538      	push	{r3, r4, r5, lr}
   d8500:	4615      	mov	r5, r2
   d8502:	461c      	mov	r4, r3
   d8504:	f000 f89e 	bl	d8644 <_ZNKSt9type_infoeqERKS_>
   d8508:	b120      	cbz	r0, d8514 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d850a:	2308      	movs	r3, #8
   d850c:	60e3      	str	r3, [r4, #12]
   d850e:	2306      	movs	r3, #6
   d8510:	6025      	str	r5, [r4, #0]
   d8512:	7123      	strb	r3, [r4, #4]
   d8514:	bd38      	pop	{r3, r4, r5, pc}

000d8516 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d8516:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8518:	4605      	mov	r5, r0
   d851a:	460c      	mov	r4, r1
   d851c:	9201      	str	r2, [sp, #4]
   d851e:	461e      	mov	r6, r3
   d8520:	f000 f890 	bl	d8644 <_ZNKSt9type_infoeqERKS_>
   d8524:	b950      	cbnz	r0, d853c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d8526:	2e03      	cmp	r6, #3
   d8528:	d808      	bhi.n	d853c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d852a:	6823      	ldr	r3, [r4, #0]
   d852c:	9a01      	ldr	r2, [sp, #4]
   d852e:	695b      	ldr	r3, [r3, #20]
   d8530:	4629      	mov	r1, r5
   d8532:	4620      	mov	r0, r4
   d8534:	b002      	add	sp, #8
   d8536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d853a:	4718      	bx	r3
   d853c:	b002      	add	sp, #8
   d853e:	bd70      	pop	{r4, r5, r6, pc}

000d8540 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d8540:	b510      	push	{r4, lr}
   d8542:	4b03      	ldr	r3, [pc, #12]	; (d8550 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d8544:	6003      	str	r3, [r0, #0]
   d8546:	4604      	mov	r4, r0
   d8548:	f7ff ffa6 	bl	d8498 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d854c:	4620      	mov	r0, r4
   d854e:	bd10      	pop	{r4, pc}
   d8550:	000db6cc 	.word	0x000db6cc

000d8554 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d8554:	b510      	push	{r4, lr}
   d8556:	4604      	mov	r4, r0
   d8558:	f7ff fff2 	bl	d8540 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d855c:	4620      	mov	r0, r4
   d855e:	210c      	movs	r1, #12
   d8560:	f7ff ff6d 	bl	d843e <_ZdlPvj>
   d8564:	4620      	mov	r0, r4
   d8566:	bd10      	pop	{r4, pc}

000d8568 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d8568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d856a:	9f08      	ldr	r7, [sp, #32]
   d856c:	4297      	cmp	r7, r2
   d856e:	4605      	mov	r5, r0
   d8570:	460e      	mov	r6, r1
   d8572:	4614      	mov	r4, r2
   d8574:	d00a      	beq.n	d858c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d8576:	68a8      	ldr	r0, [r5, #8]
   d8578:	6802      	ldr	r2, [r0, #0]
   d857a:	9708      	str	r7, [sp, #32]
   d857c:	6a15      	ldr	r5, [r2, #32]
   d857e:	4631      	mov	r1, r6
   d8580:	4622      	mov	r2, r4
   d8582:	46ac      	mov	ip, r5
   d8584:	b003      	add	sp, #12
   d8586:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d858a:	4760      	bx	ip
   d858c:	4619      	mov	r1, r3
   d858e:	9301      	str	r3, [sp, #4]
   d8590:	f000 f858 	bl	d8644 <_ZNKSt9type_infoeqERKS_>
   d8594:	9b01      	ldr	r3, [sp, #4]
   d8596:	2800      	cmp	r0, #0
   d8598:	d0ed      	beq.n	d8576 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d859a:	2006      	movs	r0, #6
   d859c:	b003      	add	sp, #12
   d859e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d85a0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d85a0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d85a4:	460d      	mov	r5, r1
   d85a6:	4619      	mov	r1, r3
   d85a8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d85ac:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d85b0:	4681      	mov	r9, r0
   d85b2:	4617      	mov	r7, r2
   d85b4:	4698      	mov	r8, r3
   d85b6:	f000 f845 	bl	d8644 <_ZNKSt9type_infoeqERKS_>
   d85ba:	b190      	cbz	r0, d85e2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d85bc:	2d00      	cmp	r5, #0
   d85be:	6034      	str	r4, [r6, #0]
   d85c0:	7137      	strb	r7, [r6, #4]
   d85c2:	db09      	blt.n	d85d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d85c4:	1961      	adds	r1, r4, r5
   d85c6:	458a      	cmp	sl, r1
   d85c8:	bf0c      	ite	eq
   d85ca:	2106      	moveq	r1, #6
   d85cc:	2101      	movne	r1, #1
   d85ce:	71b1      	strb	r1, [r6, #6]
   d85d0:	2000      	movs	r0, #0
   d85d2:	b001      	add	sp, #4
   d85d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d85d8:	3502      	adds	r5, #2
   d85da:	d1f9      	bne.n	d85d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d85dc:	2301      	movs	r3, #1
   d85de:	71b3      	strb	r3, [r6, #6]
   d85e0:	e7f6      	b.n	d85d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d85e2:	4554      	cmp	r4, sl
   d85e4:	d106      	bne.n	d85f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d85e6:	4659      	mov	r1, fp
   d85e8:	4648      	mov	r0, r9
   d85ea:	f000 f82b 	bl	d8644 <_ZNKSt9type_infoeqERKS_>
   d85ee:	b108      	cbz	r0, d85f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d85f0:	7177      	strb	r7, [r6, #5]
   d85f2:	e7ed      	b.n	d85d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d85f4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d85f8:	6803      	ldr	r3, [r0, #0]
   d85fa:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d85fe:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d8602:	69dc      	ldr	r4, [r3, #28]
   d8604:	463a      	mov	r2, r7
   d8606:	4643      	mov	r3, r8
   d8608:	4629      	mov	r1, r5
   d860a:	46a4      	mov	ip, r4
   d860c:	b001      	add	sp, #4
   d860e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8612:	4760      	bx	ip

000d8614 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d8614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8618:	4607      	mov	r7, r0
   d861a:	460c      	mov	r4, r1
   d861c:	4615      	mov	r5, r2
   d861e:	461e      	mov	r6, r3
   d8620:	f7ff ff6d 	bl	d84fe <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d8624:	b948      	cbnz	r0, d863a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d8626:	68b8      	ldr	r0, [r7, #8]
   d8628:	6803      	ldr	r3, [r0, #0]
   d862a:	699f      	ldr	r7, [r3, #24]
   d862c:	462a      	mov	r2, r5
   d862e:	4633      	mov	r3, r6
   d8630:	4621      	mov	r1, r4
   d8632:	46bc      	mov	ip, r7
   d8634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8638:	4760      	bx	ip
   d863a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d863e <_ZNSt9type_infoD1Ev>:
   d863e:	4770      	bx	lr

000d8640 <_ZNKSt9type_info14__is_pointer_pEv>:
   d8640:	2000      	movs	r0, #0
   d8642:	4770      	bx	lr

000d8644 <_ZNKSt9type_infoeqERKS_>:
   d8644:	4281      	cmp	r1, r0
   d8646:	b508      	push	{r3, lr}
   d8648:	d00e      	beq.n	d8668 <_ZNKSt9type_infoeqERKS_+0x24>
   d864a:	6840      	ldr	r0, [r0, #4]
   d864c:	7803      	ldrb	r3, [r0, #0]
   d864e:	2b2a      	cmp	r3, #42	; 0x2a
   d8650:	d00c      	beq.n	d866c <_ZNKSt9type_infoeqERKS_+0x28>
   d8652:	6849      	ldr	r1, [r1, #4]
   d8654:	780b      	ldrb	r3, [r1, #0]
   d8656:	2b2a      	cmp	r3, #42	; 0x2a
   d8658:	bf08      	it	eq
   d865a:	3101      	addeq	r1, #1
   d865c:	f000 fd8c 	bl	d9178 <strcmp>
   d8660:	fab0 f080 	clz	r0, r0
   d8664:	0940      	lsrs	r0, r0, #5
   d8666:	bd08      	pop	{r3, pc}
   d8668:	2001      	movs	r0, #1
   d866a:	e7fc      	b.n	d8666 <_ZNKSt9type_infoeqERKS_+0x22>
   d866c:	2000      	movs	r0, #0
   d866e:	e7fa      	b.n	d8666 <_ZNKSt9type_infoeqERKS_+0x22>

000d8670 <__aeabi_drsub>:
   d8670:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8674:	e002      	b.n	d867c <__adddf3>
   d8676:	bf00      	nop

000d8678 <__aeabi_dsub>:
   d8678:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d867c <__adddf3>:
   d867c:	b530      	push	{r4, r5, lr}
   d867e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8682:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8686:	ea94 0f05 	teq	r4, r5
   d868a:	bf08      	it	eq
   d868c:	ea90 0f02 	teqeq	r0, r2
   d8690:	bf1f      	itttt	ne
   d8692:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8696:	ea55 0c02 	orrsne.w	ip, r5, r2
   d869a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d869e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d86a2:	f000 80e2 	beq.w	d886a <__adddf3+0x1ee>
   d86a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d86aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d86ae:	bfb8      	it	lt
   d86b0:	426d      	neglt	r5, r5
   d86b2:	dd0c      	ble.n	d86ce <__adddf3+0x52>
   d86b4:	442c      	add	r4, r5
   d86b6:	ea80 0202 	eor.w	r2, r0, r2
   d86ba:	ea81 0303 	eor.w	r3, r1, r3
   d86be:	ea82 0000 	eor.w	r0, r2, r0
   d86c2:	ea83 0101 	eor.w	r1, r3, r1
   d86c6:	ea80 0202 	eor.w	r2, r0, r2
   d86ca:	ea81 0303 	eor.w	r3, r1, r3
   d86ce:	2d36      	cmp	r5, #54	; 0x36
   d86d0:	bf88      	it	hi
   d86d2:	bd30      	pophi	{r4, r5, pc}
   d86d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d86d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d86dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d86e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d86e4:	d002      	beq.n	d86ec <__adddf3+0x70>
   d86e6:	4240      	negs	r0, r0
   d86e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d86ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d86f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d86f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d86f8:	d002      	beq.n	d8700 <__adddf3+0x84>
   d86fa:	4252      	negs	r2, r2
   d86fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8700:	ea94 0f05 	teq	r4, r5
   d8704:	f000 80a7 	beq.w	d8856 <__adddf3+0x1da>
   d8708:	f1a4 0401 	sub.w	r4, r4, #1
   d870c:	f1d5 0e20 	rsbs	lr, r5, #32
   d8710:	db0d      	blt.n	d872e <__adddf3+0xb2>
   d8712:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8716:	fa22 f205 	lsr.w	r2, r2, r5
   d871a:	1880      	adds	r0, r0, r2
   d871c:	f141 0100 	adc.w	r1, r1, #0
   d8720:	fa03 f20e 	lsl.w	r2, r3, lr
   d8724:	1880      	adds	r0, r0, r2
   d8726:	fa43 f305 	asr.w	r3, r3, r5
   d872a:	4159      	adcs	r1, r3
   d872c:	e00e      	b.n	d874c <__adddf3+0xd0>
   d872e:	f1a5 0520 	sub.w	r5, r5, #32
   d8732:	f10e 0e20 	add.w	lr, lr, #32
   d8736:	2a01      	cmp	r2, #1
   d8738:	fa03 fc0e 	lsl.w	ip, r3, lr
   d873c:	bf28      	it	cs
   d873e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8742:	fa43 f305 	asr.w	r3, r3, r5
   d8746:	18c0      	adds	r0, r0, r3
   d8748:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d874c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8750:	d507      	bpl.n	d8762 <__adddf3+0xe6>
   d8752:	f04f 0e00 	mov.w	lr, #0
   d8756:	f1dc 0c00 	rsbs	ip, ip, #0
   d875a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d875e:	eb6e 0101 	sbc.w	r1, lr, r1
   d8762:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8766:	d31b      	bcc.n	d87a0 <__adddf3+0x124>
   d8768:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d876c:	d30c      	bcc.n	d8788 <__adddf3+0x10c>
   d876e:	0849      	lsrs	r1, r1, #1
   d8770:	ea5f 0030 	movs.w	r0, r0, rrx
   d8774:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8778:	f104 0401 	add.w	r4, r4, #1
   d877c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8780:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8784:	f080 809a 	bcs.w	d88bc <__adddf3+0x240>
   d8788:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d878c:	bf08      	it	eq
   d878e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8792:	f150 0000 	adcs.w	r0, r0, #0
   d8796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d879a:	ea41 0105 	orr.w	r1, r1, r5
   d879e:	bd30      	pop	{r4, r5, pc}
   d87a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d87a4:	4140      	adcs	r0, r0
   d87a6:	eb41 0101 	adc.w	r1, r1, r1
   d87aa:	3c01      	subs	r4, #1
   d87ac:	bf28      	it	cs
   d87ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d87b2:	d2e9      	bcs.n	d8788 <__adddf3+0x10c>
   d87b4:	f091 0f00 	teq	r1, #0
   d87b8:	bf04      	itt	eq
   d87ba:	4601      	moveq	r1, r0
   d87bc:	2000      	moveq	r0, #0
   d87be:	fab1 f381 	clz	r3, r1
   d87c2:	bf08      	it	eq
   d87c4:	3320      	addeq	r3, #32
   d87c6:	f1a3 030b 	sub.w	r3, r3, #11
   d87ca:	f1b3 0220 	subs.w	r2, r3, #32
   d87ce:	da0c      	bge.n	d87ea <__adddf3+0x16e>
   d87d0:	320c      	adds	r2, #12
   d87d2:	dd08      	ble.n	d87e6 <__adddf3+0x16a>
   d87d4:	f102 0c14 	add.w	ip, r2, #20
   d87d8:	f1c2 020c 	rsb	r2, r2, #12
   d87dc:	fa01 f00c 	lsl.w	r0, r1, ip
   d87e0:	fa21 f102 	lsr.w	r1, r1, r2
   d87e4:	e00c      	b.n	d8800 <__adddf3+0x184>
   d87e6:	f102 0214 	add.w	r2, r2, #20
   d87ea:	bfd8      	it	le
   d87ec:	f1c2 0c20 	rsble	ip, r2, #32
   d87f0:	fa01 f102 	lsl.w	r1, r1, r2
   d87f4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d87f8:	bfdc      	itt	le
   d87fa:	ea41 010c 	orrle.w	r1, r1, ip
   d87fe:	4090      	lslle	r0, r2
   d8800:	1ae4      	subs	r4, r4, r3
   d8802:	bfa2      	ittt	ge
   d8804:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8808:	4329      	orrge	r1, r5
   d880a:	bd30      	popge	{r4, r5, pc}
   d880c:	ea6f 0404 	mvn.w	r4, r4
   d8810:	3c1f      	subs	r4, #31
   d8812:	da1c      	bge.n	d884e <__adddf3+0x1d2>
   d8814:	340c      	adds	r4, #12
   d8816:	dc0e      	bgt.n	d8836 <__adddf3+0x1ba>
   d8818:	f104 0414 	add.w	r4, r4, #20
   d881c:	f1c4 0220 	rsb	r2, r4, #32
   d8820:	fa20 f004 	lsr.w	r0, r0, r4
   d8824:	fa01 f302 	lsl.w	r3, r1, r2
   d8828:	ea40 0003 	orr.w	r0, r0, r3
   d882c:	fa21 f304 	lsr.w	r3, r1, r4
   d8830:	ea45 0103 	orr.w	r1, r5, r3
   d8834:	bd30      	pop	{r4, r5, pc}
   d8836:	f1c4 040c 	rsb	r4, r4, #12
   d883a:	f1c4 0220 	rsb	r2, r4, #32
   d883e:	fa20 f002 	lsr.w	r0, r0, r2
   d8842:	fa01 f304 	lsl.w	r3, r1, r4
   d8846:	ea40 0003 	orr.w	r0, r0, r3
   d884a:	4629      	mov	r1, r5
   d884c:	bd30      	pop	{r4, r5, pc}
   d884e:	fa21 f004 	lsr.w	r0, r1, r4
   d8852:	4629      	mov	r1, r5
   d8854:	bd30      	pop	{r4, r5, pc}
   d8856:	f094 0f00 	teq	r4, #0
   d885a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d885e:	bf06      	itte	eq
   d8860:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8864:	3401      	addeq	r4, #1
   d8866:	3d01      	subne	r5, #1
   d8868:	e74e      	b.n	d8708 <__adddf3+0x8c>
   d886a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d886e:	bf18      	it	ne
   d8870:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8874:	d029      	beq.n	d88ca <__adddf3+0x24e>
   d8876:	ea94 0f05 	teq	r4, r5
   d887a:	bf08      	it	eq
   d887c:	ea90 0f02 	teqeq	r0, r2
   d8880:	d005      	beq.n	d888e <__adddf3+0x212>
   d8882:	ea54 0c00 	orrs.w	ip, r4, r0
   d8886:	bf04      	itt	eq
   d8888:	4619      	moveq	r1, r3
   d888a:	4610      	moveq	r0, r2
   d888c:	bd30      	pop	{r4, r5, pc}
   d888e:	ea91 0f03 	teq	r1, r3
   d8892:	bf1e      	ittt	ne
   d8894:	2100      	movne	r1, #0
   d8896:	2000      	movne	r0, #0
   d8898:	bd30      	popne	{r4, r5, pc}
   d889a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d889e:	d105      	bne.n	d88ac <__adddf3+0x230>
   d88a0:	0040      	lsls	r0, r0, #1
   d88a2:	4149      	adcs	r1, r1
   d88a4:	bf28      	it	cs
   d88a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d88aa:	bd30      	pop	{r4, r5, pc}
   d88ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d88b0:	bf3c      	itt	cc
   d88b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d88b6:	bd30      	popcc	{r4, r5, pc}
   d88b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d88bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d88c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d88c4:	f04f 0000 	mov.w	r0, #0
   d88c8:	bd30      	pop	{r4, r5, pc}
   d88ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d88ce:	bf1a      	itte	ne
   d88d0:	4619      	movne	r1, r3
   d88d2:	4610      	movne	r0, r2
   d88d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d88d8:	bf1c      	itt	ne
   d88da:	460b      	movne	r3, r1
   d88dc:	4602      	movne	r2, r0
   d88de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d88e2:	bf06      	itte	eq
   d88e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d88e8:	ea91 0f03 	teqeq	r1, r3
   d88ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d88f0:	bd30      	pop	{r4, r5, pc}
   d88f2:	bf00      	nop

000d88f4 <__aeabi_ui2d>:
   d88f4:	f090 0f00 	teq	r0, #0
   d88f8:	bf04      	itt	eq
   d88fa:	2100      	moveq	r1, #0
   d88fc:	4770      	bxeq	lr
   d88fe:	b530      	push	{r4, r5, lr}
   d8900:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8904:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8908:	f04f 0500 	mov.w	r5, #0
   d890c:	f04f 0100 	mov.w	r1, #0
   d8910:	e750      	b.n	d87b4 <__adddf3+0x138>
   d8912:	bf00      	nop

000d8914 <__aeabi_i2d>:
   d8914:	f090 0f00 	teq	r0, #0
   d8918:	bf04      	itt	eq
   d891a:	2100      	moveq	r1, #0
   d891c:	4770      	bxeq	lr
   d891e:	b530      	push	{r4, r5, lr}
   d8920:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8924:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8928:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d892c:	bf48      	it	mi
   d892e:	4240      	negmi	r0, r0
   d8930:	f04f 0100 	mov.w	r1, #0
   d8934:	e73e      	b.n	d87b4 <__adddf3+0x138>
   d8936:	bf00      	nop

000d8938 <__aeabi_f2d>:
   d8938:	0042      	lsls	r2, r0, #1
   d893a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d893e:	ea4f 0131 	mov.w	r1, r1, rrx
   d8942:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8946:	bf1f      	itttt	ne
   d8948:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d894c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8950:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8954:	4770      	bxne	lr
   d8956:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d895a:	bf08      	it	eq
   d895c:	4770      	bxeq	lr
   d895e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8962:	bf04      	itt	eq
   d8964:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8968:	4770      	bxeq	lr
   d896a:	b530      	push	{r4, r5, lr}
   d896c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8970:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8974:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8978:	e71c      	b.n	d87b4 <__adddf3+0x138>
   d897a:	bf00      	nop

000d897c <__aeabi_ul2d>:
   d897c:	ea50 0201 	orrs.w	r2, r0, r1
   d8980:	bf08      	it	eq
   d8982:	4770      	bxeq	lr
   d8984:	b530      	push	{r4, r5, lr}
   d8986:	f04f 0500 	mov.w	r5, #0
   d898a:	e00a      	b.n	d89a2 <__aeabi_l2d+0x16>

000d898c <__aeabi_l2d>:
   d898c:	ea50 0201 	orrs.w	r2, r0, r1
   d8990:	bf08      	it	eq
   d8992:	4770      	bxeq	lr
   d8994:	b530      	push	{r4, r5, lr}
   d8996:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d899a:	d502      	bpl.n	d89a2 <__aeabi_l2d+0x16>
   d899c:	4240      	negs	r0, r0
   d899e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d89a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d89a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d89aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d89ae:	f43f aed8 	beq.w	d8762 <__adddf3+0xe6>
   d89b2:	f04f 0203 	mov.w	r2, #3
   d89b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d89ba:	bf18      	it	ne
   d89bc:	3203      	addne	r2, #3
   d89be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d89c2:	bf18      	it	ne
   d89c4:	3203      	addne	r2, #3
   d89c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d89ca:	f1c2 0320 	rsb	r3, r2, #32
   d89ce:	fa00 fc03 	lsl.w	ip, r0, r3
   d89d2:	fa20 f002 	lsr.w	r0, r0, r2
   d89d6:	fa01 fe03 	lsl.w	lr, r1, r3
   d89da:	ea40 000e 	orr.w	r0, r0, lr
   d89de:	fa21 f102 	lsr.w	r1, r1, r2
   d89e2:	4414      	add	r4, r2
   d89e4:	e6bd      	b.n	d8762 <__adddf3+0xe6>
   d89e6:	bf00      	nop

000d89e8 <__aeabi_dmul>:
   d89e8:	b570      	push	{r4, r5, r6, lr}
   d89ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d89ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d89f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d89f6:	bf1d      	ittte	ne
   d89f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d89fc:	ea94 0f0c 	teqne	r4, ip
   d8a00:	ea95 0f0c 	teqne	r5, ip
   d8a04:	f000 f8de 	bleq	d8bc4 <__aeabi_dmul+0x1dc>
   d8a08:	442c      	add	r4, r5
   d8a0a:	ea81 0603 	eor.w	r6, r1, r3
   d8a0e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8a12:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8a16:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8a1a:	bf18      	it	ne
   d8a1c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8a20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8a24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8a28:	d038      	beq.n	d8a9c <__aeabi_dmul+0xb4>
   d8a2a:	fba0 ce02 	umull	ip, lr, r0, r2
   d8a2e:	f04f 0500 	mov.w	r5, #0
   d8a32:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8a36:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8a3a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8a3e:	f04f 0600 	mov.w	r6, #0
   d8a42:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8a46:	f09c 0f00 	teq	ip, #0
   d8a4a:	bf18      	it	ne
   d8a4c:	f04e 0e01 	orrne.w	lr, lr, #1
   d8a50:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8a54:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8a58:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8a5c:	d204      	bcs.n	d8a68 <__aeabi_dmul+0x80>
   d8a5e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8a62:	416d      	adcs	r5, r5
   d8a64:	eb46 0606 	adc.w	r6, r6, r6
   d8a68:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8a6c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8a70:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8a74:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8a78:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8a7c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8a80:	bf88      	it	hi
   d8a82:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8a86:	d81e      	bhi.n	d8ac6 <__aeabi_dmul+0xde>
   d8a88:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8a8c:	bf08      	it	eq
   d8a8e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8a92:	f150 0000 	adcs.w	r0, r0, #0
   d8a96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8a9a:	bd70      	pop	{r4, r5, r6, pc}
   d8a9c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8aa0:	ea46 0101 	orr.w	r1, r6, r1
   d8aa4:	ea40 0002 	orr.w	r0, r0, r2
   d8aa8:	ea81 0103 	eor.w	r1, r1, r3
   d8aac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8ab0:	bfc2      	ittt	gt
   d8ab2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8ab6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8aba:	bd70      	popgt	{r4, r5, r6, pc}
   d8abc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8ac0:	f04f 0e00 	mov.w	lr, #0
   d8ac4:	3c01      	subs	r4, #1
   d8ac6:	f300 80ab 	bgt.w	d8c20 <__aeabi_dmul+0x238>
   d8aca:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8ace:	bfde      	ittt	le
   d8ad0:	2000      	movle	r0, #0
   d8ad2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8ad6:	bd70      	pople	{r4, r5, r6, pc}
   d8ad8:	f1c4 0400 	rsb	r4, r4, #0
   d8adc:	3c20      	subs	r4, #32
   d8ade:	da35      	bge.n	d8b4c <__aeabi_dmul+0x164>
   d8ae0:	340c      	adds	r4, #12
   d8ae2:	dc1b      	bgt.n	d8b1c <__aeabi_dmul+0x134>
   d8ae4:	f104 0414 	add.w	r4, r4, #20
   d8ae8:	f1c4 0520 	rsb	r5, r4, #32
   d8aec:	fa00 f305 	lsl.w	r3, r0, r5
   d8af0:	fa20 f004 	lsr.w	r0, r0, r4
   d8af4:	fa01 f205 	lsl.w	r2, r1, r5
   d8af8:	ea40 0002 	orr.w	r0, r0, r2
   d8afc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8b00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8b04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8b08:	fa21 f604 	lsr.w	r6, r1, r4
   d8b0c:	eb42 0106 	adc.w	r1, r2, r6
   d8b10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8b14:	bf08      	it	eq
   d8b16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8b1a:	bd70      	pop	{r4, r5, r6, pc}
   d8b1c:	f1c4 040c 	rsb	r4, r4, #12
   d8b20:	f1c4 0520 	rsb	r5, r4, #32
   d8b24:	fa00 f304 	lsl.w	r3, r0, r4
   d8b28:	fa20 f005 	lsr.w	r0, r0, r5
   d8b2c:	fa01 f204 	lsl.w	r2, r1, r4
   d8b30:	ea40 0002 	orr.w	r0, r0, r2
   d8b34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8b38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8b3c:	f141 0100 	adc.w	r1, r1, #0
   d8b40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8b44:	bf08      	it	eq
   d8b46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8b4a:	bd70      	pop	{r4, r5, r6, pc}
   d8b4c:	f1c4 0520 	rsb	r5, r4, #32
   d8b50:	fa00 f205 	lsl.w	r2, r0, r5
   d8b54:	ea4e 0e02 	orr.w	lr, lr, r2
   d8b58:	fa20 f304 	lsr.w	r3, r0, r4
   d8b5c:	fa01 f205 	lsl.w	r2, r1, r5
   d8b60:	ea43 0302 	orr.w	r3, r3, r2
   d8b64:	fa21 f004 	lsr.w	r0, r1, r4
   d8b68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8b6c:	fa21 f204 	lsr.w	r2, r1, r4
   d8b70:	ea20 0002 	bic.w	r0, r0, r2
   d8b74:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8b78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8b7c:	bf08      	it	eq
   d8b7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8b82:	bd70      	pop	{r4, r5, r6, pc}
   d8b84:	f094 0f00 	teq	r4, #0
   d8b88:	d10f      	bne.n	d8baa <__aeabi_dmul+0x1c2>
   d8b8a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8b8e:	0040      	lsls	r0, r0, #1
   d8b90:	eb41 0101 	adc.w	r1, r1, r1
   d8b94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8b98:	bf08      	it	eq
   d8b9a:	3c01      	subeq	r4, #1
   d8b9c:	d0f7      	beq.n	d8b8e <__aeabi_dmul+0x1a6>
   d8b9e:	ea41 0106 	orr.w	r1, r1, r6
   d8ba2:	f095 0f00 	teq	r5, #0
   d8ba6:	bf18      	it	ne
   d8ba8:	4770      	bxne	lr
   d8baa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8bae:	0052      	lsls	r2, r2, #1
   d8bb0:	eb43 0303 	adc.w	r3, r3, r3
   d8bb4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8bb8:	bf08      	it	eq
   d8bba:	3d01      	subeq	r5, #1
   d8bbc:	d0f7      	beq.n	d8bae <__aeabi_dmul+0x1c6>
   d8bbe:	ea43 0306 	orr.w	r3, r3, r6
   d8bc2:	4770      	bx	lr
   d8bc4:	ea94 0f0c 	teq	r4, ip
   d8bc8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8bcc:	bf18      	it	ne
   d8bce:	ea95 0f0c 	teqne	r5, ip
   d8bd2:	d00c      	beq.n	d8bee <__aeabi_dmul+0x206>
   d8bd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8bd8:	bf18      	it	ne
   d8bda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8bde:	d1d1      	bne.n	d8b84 <__aeabi_dmul+0x19c>
   d8be0:	ea81 0103 	eor.w	r1, r1, r3
   d8be4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8be8:	f04f 0000 	mov.w	r0, #0
   d8bec:	bd70      	pop	{r4, r5, r6, pc}
   d8bee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8bf2:	bf06      	itte	eq
   d8bf4:	4610      	moveq	r0, r2
   d8bf6:	4619      	moveq	r1, r3
   d8bf8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8bfc:	d019      	beq.n	d8c32 <__aeabi_dmul+0x24a>
   d8bfe:	ea94 0f0c 	teq	r4, ip
   d8c02:	d102      	bne.n	d8c0a <__aeabi_dmul+0x222>
   d8c04:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8c08:	d113      	bne.n	d8c32 <__aeabi_dmul+0x24a>
   d8c0a:	ea95 0f0c 	teq	r5, ip
   d8c0e:	d105      	bne.n	d8c1c <__aeabi_dmul+0x234>
   d8c10:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8c14:	bf1c      	itt	ne
   d8c16:	4610      	movne	r0, r2
   d8c18:	4619      	movne	r1, r3
   d8c1a:	d10a      	bne.n	d8c32 <__aeabi_dmul+0x24a>
   d8c1c:	ea81 0103 	eor.w	r1, r1, r3
   d8c20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c24:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8c28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8c2c:	f04f 0000 	mov.w	r0, #0
   d8c30:	bd70      	pop	{r4, r5, r6, pc}
   d8c32:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8c36:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8c3a:	bd70      	pop	{r4, r5, r6, pc}

000d8c3c <__aeabi_ddiv>:
   d8c3c:	b570      	push	{r4, r5, r6, lr}
   d8c3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8c42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8c46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8c4a:	bf1d      	ittte	ne
   d8c4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8c50:	ea94 0f0c 	teqne	r4, ip
   d8c54:	ea95 0f0c 	teqne	r5, ip
   d8c58:	f000 f8a7 	bleq	d8daa <__aeabi_ddiv+0x16e>
   d8c5c:	eba4 0405 	sub.w	r4, r4, r5
   d8c60:	ea81 0e03 	eor.w	lr, r1, r3
   d8c64:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8c68:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8c6c:	f000 8088 	beq.w	d8d80 <__aeabi_ddiv+0x144>
   d8c70:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8c74:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8c78:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8c7c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8c80:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8c84:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8c88:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8c8c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8c90:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8c94:	429d      	cmp	r5, r3
   d8c96:	bf08      	it	eq
   d8c98:	4296      	cmpeq	r6, r2
   d8c9a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8c9e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8ca2:	d202      	bcs.n	d8caa <__aeabi_ddiv+0x6e>
   d8ca4:	085b      	lsrs	r3, r3, #1
   d8ca6:	ea4f 0232 	mov.w	r2, r2, rrx
   d8caa:	1ab6      	subs	r6, r6, r2
   d8cac:	eb65 0503 	sbc.w	r5, r5, r3
   d8cb0:	085b      	lsrs	r3, r3, #1
   d8cb2:	ea4f 0232 	mov.w	r2, r2, rrx
   d8cb6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8cba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8cbe:	ebb6 0e02 	subs.w	lr, r6, r2
   d8cc2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8cc6:	bf22      	ittt	cs
   d8cc8:	1ab6      	subcs	r6, r6, r2
   d8cca:	4675      	movcs	r5, lr
   d8ccc:	ea40 000c 	orrcs.w	r0, r0, ip
   d8cd0:	085b      	lsrs	r3, r3, #1
   d8cd2:	ea4f 0232 	mov.w	r2, r2, rrx
   d8cd6:	ebb6 0e02 	subs.w	lr, r6, r2
   d8cda:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8cde:	bf22      	ittt	cs
   d8ce0:	1ab6      	subcs	r6, r6, r2
   d8ce2:	4675      	movcs	r5, lr
   d8ce4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8ce8:	085b      	lsrs	r3, r3, #1
   d8cea:	ea4f 0232 	mov.w	r2, r2, rrx
   d8cee:	ebb6 0e02 	subs.w	lr, r6, r2
   d8cf2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8cf6:	bf22      	ittt	cs
   d8cf8:	1ab6      	subcs	r6, r6, r2
   d8cfa:	4675      	movcs	r5, lr
   d8cfc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8d00:	085b      	lsrs	r3, r3, #1
   d8d02:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d06:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d0e:	bf22      	ittt	cs
   d8d10:	1ab6      	subcs	r6, r6, r2
   d8d12:	4675      	movcs	r5, lr
   d8d14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8d18:	ea55 0e06 	orrs.w	lr, r5, r6
   d8d1c:	d018      	beq.n	d8d50 <__aeabi_ddiv+0x114>
   d8d1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8d22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8d26:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8d2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8d2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8d32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8d36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8d3a:	d1c0      	bne.n	d8cbe <__aeabi_ddiv+0x82>
   d8d3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8d40:	d10b      	bne.n	d8d5a <__aeabi_ddiv+0x11e>
   d8d42:	ea41 0100 	orr.w	r1, r1, r0
   d8d46:	f04f 0000 	mov.w	r0, #0
   d8d4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8d4e:	e7b6      	b.n	d8cbe <__aeabi_ddiv+0x82>
   d8d50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8d54:	bf04      	itt	eq
   d8d56:	4301      	orreq	r1, r0
   d8d58:	2000      	moveq	r0, #0
   d8d5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8d5e:	bf88      	it	hi
   d8d60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8d64:	f63f aeaf 	bhi.w	d8ac6 <__aeabi_dmul+0xde>
   d8d68:	ebb5 0c03 	subs.w	ip, r5, r3
   d8d6c:	bf04      	itt	eq
   d8d6e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8d72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8d76:	f150 0000 	adcs.w	r0, r0, #0
   d8d7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8d7e:	bd70      	pop	{r4, r5, r6, pc}
   d8d80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8d84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8d88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8d8c:	bfc2      	ittt	gt
   d8d8e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8d92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8d96:	bd70      	popgt	{r4, r5, r6, pc}
   d8d98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8d9c:	f04f 0e00 	mov.w	lr, #0
   d8da0:	3c01      	subs	r4, #1
   d8da2:	e690      	b.n	d8ac6 <__aeabi_dmul+0xde>
   d8da4:	ea45 0e06 	orr.w	lr, r5, r6
   d8da8:	e68d      	b.n	d8ac6 <__aeabi_dmul+0xde>
   d8daa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8dae:	ea94 0f0c 	teq	r4, ip
   d8db2:	bf08      	it	eq
   d8db4:	ea95 0f0c 	teqeq	r5, ip
   d8db8:	f43f af3b 	beq.w	d8c32 <__aeabi_dmul+0x24a>
   d8dbc:	ea94 0f0c 	teq	r4, ip
   d8dc0:	d10a      	bne.n	d8dd8 <__aeabi_ddiv+0x19c>
   d8dc2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8dc6:	f47f af34 	bne.w	d8c32 <__aeabi_dmul+0x24a>
   d8dca:	ea95 0f0c 	teq	r5, ip
   d8dce:	f47f af25 	bne.w	d8c1c <__aeabi_dmul+0x234>
   d8dd2:	4610      	mov	r0, r2
   d8dd4:	4619      	mov	r1, r3
   d8dd6:	e72c      	b.n	d8c32 <__aeabi_dmul+0x24a>
   d8dd8:	ea95 0f0c 	teq	r5, ip
   d8ddc:	d106      	bne.n	d8dec <__aeabi_ddiv+0x1b0>
   d8dde:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8de2:	f43f aefd 	beq.w	d8be0 <__aeabi_dmul+0x1f8>
   d8de6:	4610      	mov	r0, r2
   d8de8:	4619      	mov	r1, r3
   d8dea:	e722      	b.n	d8c32 <__aeabi_dmul+0x24a>
   d8dec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8df0:	bf18      	it	ne
   d8df2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8df6:	f47f aec5 	bne.w	d8b84 <__aeabi_dmul+0x19c>
   d8dfa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8dfe:	f47f af0d 	bne.w	d8c1c <__aeabi_dmul+0x234>
   d8e02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8e06:	f47f aeeb 	bne.w	d8be0 <__aeabi_dmul+0x1f8>
   d8e0a:	e712      	b.n	d8c32 <__aeabi_dmul+0x24a>

000d8e0c <__gedf2>:
   d8e0c:	f04f 3cff 	mov.w	ip, #4294967295
   d8e10:	e006      	b.n	d8e20 <__cmpdf2+0x4>
   d8e12:	bf00      	nop

000d8e14 <__ledf2>:
   d8e14:	f04f 0c01 	mov.w	ip, #1
   d8e18:	e002      	b.n	d8e20 <__cmpdf2+0x4>
   d8e1a:	bf00      	nop

000d8e1c <__cmpdf2>:
   d8e1c:	f04f 0c01 	mov.w	ip, #1
   d8e20:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8e24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8e28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8e2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8e30:	bf18      	it	ne
   d8e32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8e36:	d01b      	beq.n	d8e70 <__cmpdf2+0x54>
   d8e38:	b001      	add	sp, #4
   d8e3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8e3e:	bf0c      	ite	eq
   d8e40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8e44:	ea91 0f03 	teqne	r1, r3
   d8e48:	bf02      	ittt	eq
   d8e4a:	ea90 0f02 	teqeq	r0, r2
   d8e4e:	2000      	moveq	r0, #0
   d8e50:	4770      	bxeq	lr
   d8e52:	f110 0f00 	cmn.w	r0, #0
   d8e56:	ea91 0f03 	teq	r1, r3
   d8e5a:	bf58      	it	pl
   d8e5c:	4299      	cmppl	r1, r3
   d8e5e:	bf08      	it	eq
   d8e60:	4290      	cmpeq	r0, r2
   d8e62:	bf2c      	ite	cs
   d8e64:	17d8      	asrcs	r0, r3, #31
   d8e66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8e6a:	f040 0001 	orr.w	r0, r0, #1
   d8e6e:	4770      	bx	lr
   d8e70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8e74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8e78:	d102      	bne.n	d8e80 <__cmpdf2+0x64>
   d8e7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8e7e:	d107      	bne.n	d8e90 <__cmpdf2+0x74>
   d8e80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8e84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8e88:	d1d6      	bne.n	d8e38 <__cmpdf2+0x1c>
   d8e8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8e8e:	d0d3      	beq.n	d8e38 <__cmpdf2+0x1c>
   d8e90:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8e94:	4770      	bx	lr
   d8e96:	bf00      	nop

000d8e98 <__aeabi_cdrcmple>:
   d8e98:	4684      	mov	ip, r0
   d8e9a:	4610      	mov	r0, r2
   d8e9c:	4662      	mov	r2, ip
   d8e9e:	468c      	mov	ip, r1
   d8ea0:	4619      	mov	r1, r3
   d8ea2:	4663      	mov	r3, ip
   d8ea4:	e000      	b.n	d8ea8 <__aeabi_cdcmpeq>
   d8ea6:	bf00      	nop

000d8ea8 <__aeabi_cdcmpeq>:
   d8ea8:	b501      	push	{r0, lr}
   d8eaa:	f7ff ffb7 	bl	d8e1c <__cmpdf2>
   d8eae:	2800      	cmp	r0, #0
   d8eb0:	bf48      	it	mi
   d8eb2:	f110 0f00 	cmnmi.w	r0, #0
   d8eb6:	bd01      	pop	{r0, pc}

000d8eb8 <__aeabi_dcmpeq>:
   d8eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ebc:	f7ff fff4 	bl	d8ea8 <__aeabi_cdcmpeq>
   d8ec0:	bf0c      	ite	eq
   d8ec2:	2001      	moveq	r0, #1
   d8ec4:	2000      	movne	r0, #0
   d8ec6:	f85d fb08 	ldr.w	pc, [sp], #8
   d8eca:	bf00      	nop

000d8ecc <__aeabi_dcmplt>:
   d8ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ed0:	f7ff ffea 	bl	d8ea8 <__aeabi_cdcmpeq>
   d8ed4:	bf34      	ite	cc
   d8ed6:	2001      	movcc	r0, #1
   d8ed8:	2000      	movcs	r0, #0
   d8eda:	f85d fb08 	ldr.w	pc, [sp], #8
   d8ede:	bf00      	nop

000d8ee0 <__aeabi_dcmple>:
   d8ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ee4:	f7ff ffe0 	bl	d8ea8 <__aeabi_cdcmpeq>
   d8ee8:	bf94      	ite	ls
   d8eea:	2001      	movls	r0, #1
   d8eec:	2000      	movhi	r0, #0
   d8eee:	f85d fb08 	ldr.w	pc, [sp], #8
   d8ef2:	bf00      	nop

000d8ef4 <__aeabi_dcmpge>:
   d8ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ef8:	f7ff ffce 	bl	d8e98 <__aeabi_cdrcmple>
   d8efc:	bf94      	ite	ls
   d8efe:	2001      	movls	r0, #1
   d8f00:	2000      	movhi	r0, #0
   d8f02:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f06:	bf00      	nop

000d8f08 <__aeabi_dcmpgt>:
   d8f08:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f0c:	f7ff ffc4 	bl	d8e98 <__aeabi_cdrcmple>
   d8f10:	bf34      	ite	cc
   d8f12:	2001      	movcc	r0, #1
   d8f14:	2000      	movcs	r0, #0
   d8f16:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f1a:	bf00      	nop

000d8f1c <__aeabi_d2iz>:
   d8f1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8f20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8f24:	d215      	bcs.n	d8f52 <__aeabi_d2iz+0x36>
   d8f26:	d511      	bpl.n	d8f4c <__aeabi_d2iz+0x30>
   d8f28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8f2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8f30:	d912      	bls.n	d8f58 <__aeabi_d2iz+0x3c>
   d8f32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8f36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8f3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8f3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8f42:	fa23 f002 	lsr.w	r0, r3, r2
   d8f46:	bf18      	it	ne
   d8f48:	4240      	negne	r0, r0
   d8f4a:	4770      	bx	lr
   d8f4c:	f04f 0000 	mov.w	r0, #0
   d8f50:	4770      	bx	lr
   d8f52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8f56:	d105      	bne.n	d8f64 <__aeabi_d2iz+0x48>
   d8f58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8f5c:	bf08      	it	eq
   d8f5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8f62:	4770      	bx	lr
   d8f64:	f04f 0000 	mov.w	r0, #0
   d8f68:	4770      	bx	lr
   d8f6a:	bf00      	nop

000d8f6c <__aeabi_d2uiz>:
   d8f6c:	004a      	lsls	r2, r1, #1
   d8f6e:	d211      	bcs.n	d8f94 <__aeabi_d2uiz+0x28>
   d8f70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8f74:	d211      	bcs.n	d8f9a <__aeabi_d2uiz+0x2e>
   d8f76:	d50d      	bpl.n	d8f94 <__aeabi_d2uiz+0x28>
   d8f78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8f7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8f80:	d40e      	bmi.n	d8fa0 <__aeabi_d2uiz+0x34>
   d8f82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8f86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8f8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8f8e:	fa23 f002 	lsr.w	r0, r3, r2
   d8f92:	4770      	bx	lr
   d8f94:	f04f 0000 	mov.w	r0, #0
   d8f98:	4770      	bx	lr
   d8f9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8f9e:	d102      	bne.n	d8fa6 <__aeabi_d2uiz+0x3a>
   d8fa0:	f04f 30ff 	mov.w	r0, #4294967295
   d8fa4:	4770      	bx	lr
   d8fa6:	f04f 0000 	mov.w	r0, #0
   d8faa:	4770      	bx	lr

000d8fac <__aeabi_d2f>:
   d8fac:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8fb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8fb4:	bf24      	itt	cs
   d8fb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8fba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8fbe:	d90d      	bls.n	d8fdc <__aeabi_d2f+0x30>
   d8fc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8fc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8fc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8fcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8fd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8fd4:	bf08      	it	eq
   d8fd6:	f020 0001 	biceq.w	r0, r0, #1
   d8fda:	4770      	bx	lr
   d8fdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8fe0:	d121      	bne.n	d9026 <__aeabi_d2f+0x7a>
   d8fe2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8fe6:	bfbc      	itt	lt
   d8fe8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8fec:	4770      	bxlt	lr
   d8fee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8ff2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8ff6:	f1c2 0218 	rsb	r2, r2, #24
   d8ffa:	f1c2 0c20 	rsb	ip, r2, #32
   d8ffe:	fa10 f30c 	lsls.w	r3, r0, ip
   d9002:	fa20 f002 	lsr.w	r0, r0, r2
   d9006:	bf18      	it	ne
   d9008:	f040 0001 	orrne.w	r0, r0, #1
   d900c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9010:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9014:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9018:	ea40 000c 	orr.w	r0, r0, ip
   d901c:	fa23 f302 	lsr.w	r3, r3, r2
   d9020:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9024:	e7cc      	b.n	d8fc0 <__aeabi_d2f+0x14>
   d9026:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d902a:	d107      	bne.n	d903c <__aeabi_d2f+0x90>
   d902c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9030:	bf1e      	ittt	ne
   d9032:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9036:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d903a:	4770      	bxne	lr
   d903c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9040:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9044:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9048:	4770      	bx	lr
   d904a:	bf00      	nop

000d904c <__aeabi_d2ulz>:
   d904c:	b5d0      	push	{r4, r6, r7, lr}
   d904e:	4b0c      	ldr	r3, [pc, #48]	; (d9080 <__aeabi_d2ulz+0x34>)
   d9050:	2200      	movs	r2, #0
   d9052:	4606      	mov	r6, r0
   d9054:	460f      	mov	r7, r1
   d9056:	f7ff fcc7 	bl	d89e8 <__aeabi_dmul>
   d905a:	f7ff ff87 	bl	d8f6c <__aeabi_d2uiz>
   d905e:	4604      	mov	r4, r0
   d9060:	f7ff fc48 	bl	d88f4 <__aeabi_ui2d>
   d9064:	4b07      	ldr	r3, [pc, #28]	; (d9084 <__aeabi_d2ulz+0x38>)
   d9066:	2200      	movs	r2, #0
   d9068:	f7ff fcbe 	bl	d89e8 <__aeabi_dmul>
   d906c:	4602      	mov	r2, r0
   d906e:	460b      	mov	r3, r1
   d9070:	4630      	mov	r0, r6
   d9072:	4639      	mov	r1, r7
   d9074:	f7ff fb00 	bl	d8678 <__aeabi_dsub>
   d9078:	f7ff ff78 	bl	d8f6c <__aeabi_d2uiz>
   d907c:	4621      	mov	r1, r4
   d907e:	bdd0      	pop	{r4, r6, r7, pc}
   d9080:	3df00000 	.word	0x3df00000
   d9084:	41f00000 	.word	0x41f00000

000d9088 <atof>:
   d9088:	2100      	movs	r1, #0
   d908a:	f000 beeb 	b.w	d9e64 <strtod>

000d908e <atoi>:
   d908e:	220a      	movs	r2, #10
   d9090:	2100      	movs	r1, #0
   d9092:	f000 bf6d 	b.w	d9f70 <strtol>
	...

000d9098 <__cxa_atexit>:
   d9098:	b510      	push	{r4, lr}
   d909a:	4c05      	ldr	r4, [pc, #20]	; (d90b0 <__cxa_atexit+0x18>)
   d909c:	4613      	mov	r3, r2
   d909e:	b12c      	cbz	r4, d90ac <__cxa_atexit+0x14>
   d90a0:	460a      	mov	r2, r1
   d90a2:	4601      	mov	r1, r0
   d90a4:	2002      	movs	r0, #2
   d90a6:	f3af 8000 	nop.w
   d90aa:	bd10      	pop	{r4, pc}
   d90ac:	4620      	mov	r0, r4
   d90ae:	e7fc      	b.n	d90aa <__cxa_atexit+0x12>
   d90b0:	00000000 	.word	0x00000000

000d90b4 <memcmp>:
   d90b4:	b530      	push	{r4, r5, lr}
   d90b6:	3901      	subs	r1, #1
   d90b8:	2400      	movs	r4, #0
   d90ba:	42a2      	cmp	r2, r4
   d90bc:	d101      	bne.n	d90c2 <memcmp+0xe>
   d90be:	2000      	movs	r0, #0
   d90c0:	e005      	b.n	d90ce <memcmp+0x1a>
   d90c2:	5d03      	ldrb	r3, [r0, r4]
   d90c4:	3401      	adds	r4, #1
   d90c6:	5d0d      	ldrb	r5, [r1, r4]
   d90c8:	42ab      	cmp	r3, r5
   d90ca:	d0f6      	beq.n	d90ba <memcmp+0x6>
   d90cc:	1b58      	subs	r0, r3, r5
   d90ce:	bd30      	pop	{r4, r5, pc}

000d90d0 <memcpy>:
   d90d0:	440a      	add	r2, r1
   d90d2:	4291      	cmp	r1, r2
   d90d4:	f100 33ff 	add.w	r3, r0, #4294967295
   d90d8:	d100      	bne.n	d90dc <memcpy+0xc>
   d90da:	4770      	bx	lr
   d90dc:	b510      	push	{r4, lr}
   d90de:	f811 4b01 	ldrb.w	r4, [r1], #1
   d90e2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d90e6:	4291      	cmp	r1, r2
   d90e8:	d1f9      	bne.n	d90de <memcpy+0xe>
   d90ea:	bd10      	pop	{r4, pc}

000d90ec <memmove>:
   d90ec:	4288      	cmp	r0, r1
   d90ee:	b510      	push	{r4, lr}
   d90f0:	eb01 0402 	add.w	r4, r1, r2
   d90f4:	d902      	bls.n	d90fc <memmove+0x10>
   d90f6:	4284      	cmp	r4, r0
   d90f8:	4623      	mov	r3, r4
   d90fa:	d807      	bhi.n	d910c <memmove+0x20>
   d90fc:	1e43      	subs	r3, r0, #1
   d90fe:	42a1      	cmp	r1, r4
   d9100:	d008      	beq.n	d9114 <memmove+0x28>
   d9102:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9106:	f803 2f01 	strb.w	r2, [r3, #1]!
   d910a:	e7f8      	b.n	d90fe <memmove+0x12>
   d910c:	4402      	add	r2, r0
   d910e:	4601      	mov	r1, r0
   d9110:	428a      	cmp	r2, r1
   d9112:	d100      	bne.n	d9116 <memmove+0x2a>
   d9114:	bd10      	pop	{r4, pc}
   d9116:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d911a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d911e:	e7f7      	b.n	d9110 <memmove+0x24>

000d9120 <memset>:
   d9120:	4402      	add	r2, r0
   d9122:	4603      	mov	r3, r0
   d9124:	4293      	cmp	r3, r2
   d9126:	d100      	bne.n	d912a <memset+0xa>
   d9128:	4770      	bx	lr
   d912a:	f803 1b01 	strb.w	r1, [r3], #1
   d912e:	e7f9      	b.n	d9124 <memset+0x4>

000d9130 <srand>:
   d9130:	b538      	push	{r3, r4, r5, lr}
   d9132:	4b0d      	ldr	r3, [pc, #52]	; (d9168 <srand+0x38>)
   d9134:	681d      	ldr	r5, [r3, #0]
   d9136:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9138:	4604      	mov	r4, r0
   d913a:	b97b      	cbnz	r3, d915c <srand+0x2c>
   d913c:	2018      	movs	r0, #24
   d913e:	f7fc fe73 	bl	d5e28 <malloc>
   d9142:	4a0a      	ldr	r2, [pc, #40]	; (d916c <srand+0x3c>)
   d9144:	4b0a      	ldr	r3, [pc, #40]	; (d9170 <srand+0x40>)
   d9146:	63a8      	str	r0, [r5, #56]	; 0x38
   d9148:	e9c0 2300 	strd	r2, r3, [r0]
   d914c:	4b09      	ldr	r3, [pc, #36]	; (d9174 <srand+0x44>)
   d914e:	6083      	str	r3, [r0, #8]
   d9150:	230b      	movs	r3, #11
   d9152:	8183      	strh	r3, [r0, #12]
   d9154:	2201      	movs	r2, #1
   d9156:	2300      	movs	r3, #0
   d9158:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d915c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d915e:	2200      	movs	r2, #0
   d9160:	611c      	str	r4, [r3, #16]
   d9162:	615a      	str	r2, [r3, #20]
   d9164:	bd38      	pop	{r3, r4, r5, pc}
   d9166:	bf00      	nop
   d9168:	200353f8 	.word	0x200353f8
   d916c:	abcd330e 	.word	0xabcd330e
   d9170:	e66d1234 	.word	0xe66d1234
   d9174:	0005deec 	.word	0x0005deec

000d9178 <strcmp>:
   d9178:	f810 2b01 	ldrb.w	r2, [r0], #1
   d917c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9180:	2a01      	cmp	r2, #1
   d9182:	bf28      	it	cs
   d9184:	429a      	cmpcs	r2, r3
   d9186:	d0f7      	beq.n	d9178 <strcmp>
   d9188:	1ad0      	subs	r0, r2, r3
   d918a:	4770      	bx	lr

000d918c <strcpy>:
   d918c:	4603      	mov	r3, r0
   d918e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9192:	f803 2b01 	strb.w	r2, [r3], #1
   d9196:	2a00      	cmp	r2, #0
   d9198:	d1f9      	bne.n	d918e <strcpy+0x2>
   d919a:	4770      	bx	lr

000d919c <strlen>:
   d919c:	4603      	mov	r3, r0
   d919e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d91a2:	2a00      	cmp	r2, #0
   d91a4:	d1fb      	bne.n	d919e <strlen+0x2>
   d91a6:	1a18      	subs	r0, r3, r0
   d91a8:	3801      	subs	r0, #1
   d91aa:	4770      	bx	lr

000d91ac <strncmp>:
   d91ac:	b510      	push	{r4, lr}
   d91ae:	b16a      	cbz	r2, d91cc <strncmp+0x20>
   d91b0:	3901      	subs	r1, #1
   d91b2:	1884      	adds	r4, r0, r2
   d91b4:	f810 3b01 	ldrb.w	r3, [r0], #1
   d91b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d91bc:	4293      	cmp	r3, r2
   d91be:	d103      	bne.n	d91c8 <strncmp+0x1c>
   d91c0:	42a0      	cmp	r0, r4
   d91c2:	d001      	beq.n	d91c8 <strncmp+0x1c>
   d91c4:	2b00      	cmp	r3, #0
   d91c6:	d1f5      	bne.n	d91b4 <strncmp+0x8>
   d91c8:	1a98      	subs	r0, r3, r2
   d91ca:	bd10      	pop	{r4, pc}
   d91cc:	4610      	mov	r0, r2
   d91ce:	e7fc      	b.n	d91ca <strncmp+0x1e>

000d91d0 <strnlen>:
   d91d0:	b510      	push	{r4, lr}
   d91d2:	4602      	mov	r2, r0
   d91d4:	4401      	add	r1, r0
   d91d6:	428a      	cmp	r2, r1
   d91d8:	4613      	mov	r3, r2
   d91da:	d101      	bne.n	d91e0 <strnlen+0x10>
   d91dc:	1a18      	subs	r0, r3, r0
   d91de:	bd10      	pop	{r4, pc}
   d91e0:	781c      	ldrb	r4, [r3, #0]
   d91e2:	3201      	adds	r2, #1
   d91e4:	2c00      	cmp	r4, #0
   d91e6:	d1f6      	bne.n	d91d6 <strnlen+0x6>
   d91e8:	e7f8      	b.n	d91dc <strnlen+0xc>

000d91ea <strstr>:
   d91ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   d91ec:	780c      	ldrb	r4, [r1, #0]
   d91ee:	b164      	cbz	r4, d920a <strstr+0x20>
   d91f0:	4603      	mov	r3, r0
   d91f2:	781a      	ldrb	r2, [r3, #0]
   d91f4:	4618      	mov	r0, r3
   d91f6:	1c5e      	adds	r6, r3, #1
   d91f8:	b90a      	cbnz	r2, d91fe <strstr+0x14>
   d91fa:	4610      	mov	r0, r2
   d91fc:	e005      	b.n	d920a <strstr+0x20>
   d91fe:	4294      	cmp	r4, r2
   d9200:	d108      	bne.n	d9214 <strstr+0x2a>
   d9202:	460d      	mov	r5, r1
   d9204:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d9208:	b902      	cbnz	r2, d920c <strstr+0x22>
   d920a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d920c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   d9210:	4297      	cmp	r7, r2
   d9212:	d0f7      	beq.n	d9204 <strstr+0x1a>
   d9214:	4633      	mov	r3, r6
   d9216:	e7ec      	b.n	d91f2 <strstr+0x8>

000d9218 <sulp>:
   d9218:	b570      	push	{r4, r5, r6, lr}
   d921a:	4604      	mov	r4, r0
   d921c:	460d      	mov	r5, r1
   d921e:	ec45 4b10 	vmov	d0, r4, r5
   d9222:	4616      	mov	r6, r2
   d9224:	f001 fd1a 	bl	dac5c <__ulp>
   d9228:	ec51 0b10 	vmov	r0, r1, d0
   d922c:	b17e      	cbz	r6, d924e <sulp+0x36>
   d922e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d9232:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9236:	2b00      	cmp	r3, #0
   d9238:	dd09      	ble.n	d924e <sulp+0x36>
   d923a:	051b      	lsls	r3, r3, #20
   d923c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d9240:	2400      	movs	r4, #0
   d9242:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d9246:	4622      	mov	r2, r4
   d9248:	462b      	mov	r3, r5
   d924a:	f7ff fbcd 	bl	d89e8 <__aeabi_dmul>
   d924e:	bd70      	pop	{r4, r5, r6, pc}

000d9250 <_strtod_l>:
   d9250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9254:	b0a3      	sub	sp, #140	; 0x8c
   d9256:	461f      	mov	r7, r3
   d9258:	2300      	movs	r3, #0
   d925a:	931e      	str	r3, [sp, #120]	; 0x78
   d925c:	4ba4      	ldr	r3, [pc, #656]	; (d94f0 <_strtod_l+0x2a0>)
   d925e:	9219      	str	r2, [sp, #100]	; 0x64
   d9260:	681b      	ldr	r3, [r3, #0]
   d9262:	9307      	str	r3, [sp, #28]
   d9264:	4604      	mov	r4, r0
   d9266:	4618      	mov	r0, r3
   d9268:	4688      	mov	r8, r1
   d926a:	f7ff ff97 	bl	d919c <strlen>
   d926e:	f04f 0a00 	mov.w	sl, #0
   d9272:	4605      	mov	r5, r0
   d9274:	f04f 0b00 	mov.w	fp, #0
   d9278:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d927c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d927e:	781a      	ldrb	r2, [r3, #0]
   d9280:	2a2b      	cmp	r2, #43	; 0x2b
   d9282:	d04c      	beq.n	d931e <_strtod_l+0xce>
   d9284:	d839      	bhi.n	d92fa <_strtod_l+0xaa>
   d9286:	2a0d      	cmp	r2, #13
   d9288:	d832      	bhi.n	d92f0 <_strtod_l+0xa0>
   d928a:	2a08      	cmp	r2, #8
   d928c:	d832      	bhi.n	d92f4 <_strtod_l+0xa4>
   d928e:	2a00      	cmp	r2, #0
   d9290:	d03c      	beq.n	d930c <_strtod_l+0xbc>
   d9292:	2300      	movs	r3, #0
   d9294:	930e      	str	r3, [sp, #56]	; 0x38
   d9296:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d9298:	7833      	ldrb	r3, [r6, #0]
   d929a:	2b30      	cmp	r3, #48	; 0x30
   d929c:	f040 80b4 	bne.w	d9408 <_strtod_l+0x1b8>
   d92a0:	7873      	ldrb	r3, [r6, #1]
   d92a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d92a6:	2b58      	cmp	r3, #88	; 0x58
   d92a8:	d16c      	bne.n	d9384 <_strtod_l+0x134>
   d92aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d92ac:	9301      	str	r3, [sp, #4]
   d92ae:	ab1e      	add	r3, sp, #120	; 0x78
   d92b0:	9702      	str	r7, [sp, #8]
   d92b2:	9300      	str	r3, [sp, #0]
   d92b4:	4a8f      	ldr	r2, [pc, #572]	; (d94f4 <_strtod_l+0x2a4>)
   d92b6:	ab1f      	add	r3, sp, #124	; 0x7c
   d92b8:	a91d      	add	r1, sp, #116	; 0x74
   d92ba:	4620      	mov	r0, r4
   d92bc:	f000 feca 	bl	da054 <__gethex>
   d92c0:	f010 0707 	ands.w	r7, r0, #7
   d92c4:	4605      	mov	r5, r0
   d92c6:	d005      	beq.n	d92d4 <_strtod_l+0x84>
   d92c8:	2f06      	cmp	r7, #6
   d92ca:	d12a      	bne.n	d9322 <_strtod_l+0xd2>
   d92cc:	3601      	adds	r6, #1
   d92ce:	2300      	movs	r3, #0
   d92d0:	961d      	str	r6, [sp, #116]	; 0x74
   d92d2:	930e      	str	r3, [sp, #56]	; 0x38
   d92d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d92d6:	2b00      	cmp	r3, #0
   d92d8:	f040 8596 	bne.w	d9e08 <_strtod_l+0xbb8>
   d92dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d92de:	b1db      	cbz	r3, d9318 <_strtod_l+0xc8>
   d92e0:	4652      	mov	r2, sl
   d92e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d92e6:	ec43 2b10 	vmov	d0, r2, r3
   d92ea:	b023      	add	sp, #140	; 0x8c
   d92ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d92f0:	2a20      	cmp	r2, #32
   d92f2:	d1ce      	bne.n	d9292 <_strtod_l+0x42>
   d92f4:	3301      	adds	r3, #1
   d92f6:	931d      	str	r3, [sp, #116]	; 0x74
   d92f8:	e7c0      	b.n	d927c <_strtod_l+0x2c>
   d92fa:	2a2d      	cmp	r2, #45	; 0x2d
   d92fc:	d1c9      	bne.n	d9292 <_strtod_l+0x42>
   d92fe:	2201      	movs	r2, #1
   d9300:	920e      	str	r2, [sp, #56]	; 0x38
   d9302:	1c5a      	adds	r2, r3, #1
   d9304:	921d      	str	r2, [sp, #116]	; 0x74
   d9306:	785b      	ldrb	r3, [r3, #1]
   d9308:	2b00      	cmp	r3, #0
   d930a:	d1c4      	bne.n	d9296 <_strtod_l+0x46>
   d930c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d930e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d9312:	2b00      	cmp	r3, #0
   d9314:	f040 8576 	bne.w	d9e04 <_strtod_l+0xbb4>
   d9318:	4652      	mov	r2, sl
   d931a:	465b      	mov	r3, fp
   d931c:	e7e3      	b.n	d92e6 <_strtod_l+0x96>
   d931e:	2200      	movs	r2, #0
   d9320:	e7ee      	b.n	d9300 <_strtod_l+0xb0>
   d9322:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d9324:	b13a      	cbz	r2, d9336 <_strtod_l+0xe6>
   d9326:	2135      	movs	r1, #53	; 0x35
   d9328:	a820      	add	r0, sp, #128	; 0x80
   d932a:	f001 fd96 	bl	dae5a <__copybits>
   d932e:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9330:	4620      	mov	r0, r4
   d9332:	f001 f9cb 	bl	da6cc <_Bfree>
   d9336:	3f01      	subs	r7, #1
   d9338:	2f05      	cmp	r7, #5
   d933a:	d807      	bhi.n	d934c <_strtod_l+0xfc>
   d933c:	e8df f007 	tbb	[pc, r7]
   d9340:	1d180b0e 	.word	0x1d180b0e
   d9344:	030e      	.short	0x030e
   d9346:	f04f 0b00 	mov.w	fp, #0
   d934a:	46da      	mov	sl, fp
   d934c:	0728      	lsls	r0, r5, #28
   d934e:	d5c1      	bpl.n	d92d4 <_strtod_l+0x84>
   d9350:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d9354:	e7be      	b.n	d92d4 <_strtod_l+0x84>
   d9356:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d935a:	e7f7      	b.n	d934c <_strtod_l+0xfc>
   d935c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d9360:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d9362:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d9366:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d936a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d936e:	e7ed      	b.n	d934c <_strtod_l+0xfc>
   d9370:	f8df b184 	ldr.w	fp, [pc, #388]	; d94f8 <_strtod_l+0x2a8>
   d9374:	f04f 0a00 	mov.w	sl, #0
   d9378:	e7e8      	b.n	d934c <_strtod_l+0xfc>
   d937a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d937e:	f04f 3aff 	mov.w	sl, #4294967295
   d9382:	e7e3      	b.n	d934c <_strtod_l+0xfc>
   d9384:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9386:	1c5a      	adds	r2, r3, #1
   d9388:	921d      	str	r2, [sp, #116]	; 0x74
   d938a:	785b      	ldrb	r3, [r3, #1]
   d938c:	2b30      	cmp	r3, #48	; 0x30
   d938e:	d0f9      	beq.n	d9384 <_strtod_l+0x134>
   d9390:	2b00      	cmp	r3, #0
   d9392:	d09f      	beq.n	d92d4 <_strtod_l+0x84>
   d9394:	2301      	movs	r3, #1
   d9396:	f04f 0900 	mov.w	r9, #0
   d939a:	9304      	str	r3, [sp, #16]
   d939c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d939e:	930a      	str	r3, [sp, #40]	; 0x28
   d93a0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d93a4:	464f      	mov	r7, r9
   d93a6:	220a      	movs	r2, #10
   d93a8:	981d      	ldr	r0, [sp, #116]	; 0x74
   d93aa:	7806      	ldrb	r6, [r0, #0]
   d93ac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d93b0:	b2d9      	uxtb	r1, r3
   d93b2:	2909      	cmp	r1, #9
   d93b4:	d92a      	bls.n	d940c <_strtod_l+0x1bc>
   d93b6:	9907      	ldr	r1, [sp, #28]
   d93b8:	462a      	mov	r2, r5
   d93ba:	f7ff fef7 	bl	d91ac <strncmp>
   d93be:	b398      	cbz	r0, d9428 <_strtod_l+0x1d8>
   d93c0:	2000      	movs	r0, #0
   d93c2:	4633      	mov	r3, r6
   d93c4:	463d      	mov	r5, r7
   d93c6:	9007      	str	r0, [sp, #28]
   d93c8:	4602      	mov	r2, r0
   d93ca:	2b65      	cmp	r3, #101	; 0x65
   d93cc:	d001      	beq.n	d93d2 <_strtod_l+0x182>
   d93ce:	2b45      	cmp	r3, #69	; 0x45
   d93d0:	d118      	bne.n	d9404 <_strtod_l+0x1b4>
   d93d2:	b91d      	cbnz	r5, d93dc <_strtod_l+0x18c>
   d93d4:	9b04      	ldr	r3, [sp, #16]
   d93d6:	4303      	orrs	r3, r0
   d93d8:	d098      	beq.n	d930c <_strtod_l+0xbc>
   d93da:	2500      	movs	r5, #0
   d93dc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d93e0:	f108 0301 	add.w	r3, r8, #1
   d93e4:	931d      	str	r3, [sp, #116]	; 0x74
   d93e6:	f898 3001 	ldrb.w	r3, [r8, #1]
   d93ea:	2b2b      	cmp	r3, #43	; 0x2b
   d93ec:	d075      	beq.n	d94da <_strtod_l+0x28a>
   d93ee:	2b2d      	cmp	r3, #45	; 0x2d
   d93f0:	d07b      	beq.n	d94ea <_strtod_l+0x29a>
   d93f2:	f04f 0c00 	mov.w	ip, #0
   d93f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d93fa:	2909      	cmp	r1, #9
   d93fc:	f240 8082 	bls.w	d9504 <_strtod_l+0x2b4>
   d9400:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d9404:	2600      	movs	r6, #0
   d9406:	e09d      	b.n	d9544 <_strtod_l+0x2f4>
   d9408:	2300      	movs	r3, #0
   d940a:	e7c4      	b.n	d9396 <_strtod_l+0x146>
   d940c:	2f08      	cmp	r7, #8
   d940e:	bfd8      	it	le
   d9410:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d9412:	f100 0001 	add.w	r0, r0, #1
   d9416:	bfda      	itte	le
   d9418:	fb02 3301 	mlale	r3, r2, r1, r3
   d941c:	9309      	strle	r3, [sp, #36]	; 0x24
   d941e:	fb02 3909 	mlagt	r9, r2, r9, r3
   d9422:	3701      	adds	r7, #1
   d9424:	901d      	str	r0, [sp, #116]	; 0x74
   d9426:	e7bf      	b.n	d93a8 <_strtod_l+0x158>
   d9428:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d942a:	195a      	adds	r2, r3, r5
   d942c:	921d      	str	r2, [sp, #116]	; 0x74
   d942e:	5d5b      	ldrb	r3, [r3, r5]
   d9430:	2f00      	cmp	r7, #0
   d9432:	d037      	beq.n	d94a4 <_strtod_l+0x254>
   d9434:	9007      	str	r0, [sp, #28]
   d9436:	463d      	mov	r5, r7
   d9438:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d943c:	2a09      	cmp	r2, #9
   d943e:	d912      	bls.n	d9466 <_strtod_l+0x216>
   d9440:	2201      	movs	r2, #1
   d9442:	e7c2      	b.n	d93ca <_strtod_l+0x17a>
   d9444:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9446:	1c5a      	adds	r2, r3, #1
   d9448:	921d      	str	r2, [sp, #116]	; 0x74
   d944a:	785b      	ldrb	r3, [r3, #1]
   d944c:	3001      	adds	r0, #1
   d944e:	2b30      	cmp	r3, #48	; 0x30
   d9450:	d0f8      	beq.n	d9444 <_strtod_l+0x1f4>
   d9452:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d9456:	2a08      	cmp	r2, #8
   d9458:	f200 84db 	bhi.w	d9e12 <_strtod_l+0xbc2>
   d945c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d945e:	9007      	str	r0, [sp, #28]
   d9460:	2000      	movs	r0, #0
   d9462:	920a      	str	r2, [sp, #40]	; 0x28
   d9464:	4605      	mov	r5, r0
   d9466:	3b30      	subs	r3, #48	; 0x30
   d9468:	f100 0201 	add.w	r2, r0, #1
   d946c:	d014      	beq.n	d9498 <_strtod_l+0x248>
   d946e:	9907      	ldr	r1, [sp, #28]
   d9470:	4411      	add	r1, r2
   d9472:	9107      	str	r1, [sp, #28]
   d9474:	462a      	mov	r2, r5
   d9476:	eb00 0e05 	add.w	lr, r0, r5
   d947a:	210a      	movs	r1, #10
   d947c:	4572      	cmp	r2, lr
   d947e:	d113      	bne.n	d94a8 <_strtod_l+0x258>
   d9480:	182a      	adds	r2, r5, r0
   d9482:	2a08      	cmp	r2, #8
   d9484:	f105 0501 	add.w	r5, r5, #1
   d9488:	4405      	add	r5, r0
   d948a:	dc1c      	bgt.n	d94c6 <_strtod_l+0x276>
   d948c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d948e:	220a      	movs	r2, #10
   d9490:	fb02 3301 	mla	r3, r2, r1, r3
   d9494:	9309      	str	r3, [sp, #36]	; 0x24
   d9496:	2200      	movs	r2, #0
   d9498:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d949a:	1c59      	adds	r1, r3, #1
   d949c:	911d      	str	r1, [sp, #116]	; 0x74
   d949e:	785b      	ldrb	r3, [r3, #1]
   d94a0:	4610      	mov	r0, r2
   d94a2:	e7c9      	b.n	d9438 <_strtod_l+0x1e8>
   d94a4:	4638      	mov	r0, r7
   d94a6:	e7d2      	b.n	d944e <_strtod_l+0x1fe>
   d94a8:	2a08      	cmp	r2, #8
   d94aa:	dc04      	bgt.n	d94b6 <_strtod_l+0x266>
   d94ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d94ae:	434e      	muls	r6, r1
   d94b0:	9609      	str	r6, [sp, #36]	; 0x24
   d94b2:	3201      	adds	r2, #1
   d94b4:	e7e2      	b.n	d947c <_strtod_l+0x22c>
   d94b6:	f102 0c01 	add.w	ip, r2, #1
   d94ba:	f1bc 0f10 	cmp.w	ip, #16
   d94be:	bfd8      	it	le
   d94c0:	fb01 f909 	mulle.w	r9, r1, r9
   d94c4:	e7f5      	b.n	d94b2 <_strtod_l+0x262>
   d94c6:	2d10      	cmp	r5, #16
   d94c8:	bfdc      	itt	le
   d94ca:	220a      	movle	r2, #10
   d94cc:	fb02 3909 	mlale	r9, r2, r9, r3
   d94d0:	e7e1      	b.n	d9496 <_strtod_l+0x246>
   d94d2:	2300      	movs	r3, #0
   d94d4:	9307      	str	r3, [sp, #28]
   d94d6:	2201      	movs	r2, #1
   d94d8:	e77c      	b.n	d93d4 <_strtod_l+0x184>
   d94da:	f04f 0c00 	mov.w	ip, #0
   d94de:	f108 0302 	add.w	r3, r8, #2
   d94e2:	931d      	str	r3, [sp, #116]	; 0x74
   d94e4:	f898 3002 	ldrb.w	r3, [r8, #2]
   d94e8:	e785      	b.n	d93f6 <_strtod_l+0x1a6>
   d94ea:	f04f 0c01 	mov.w	ip, #1
   d94ee:	e7f6      	b.n	d94de <_strtod_l+0x28e>
   d94f0:	000db86c 	.word	0x000db86c
   d94f4:	000db714 	.word	0x000db714
   d94f8:	7ff00000 	.word	0x7ff00000
   d94fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d94fe:	1c59      	adds	r1, r3, #1
   d9500:	911d      	str	r1, [sp, #116]	; 0x74
   d9502:	785b      	ldrb	r3, [r3, #1]
   d9504:	2b30      	cmp	r3, #48	; 0x30
   d9506:	d0f9      	beq.n	d94fc <_strtod_l+0x2ac>
   d9508:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d950c:	2908      	cmp	r1, #8
   d950e:	f63f af79 	bhi.w	d9404 <_strtod_l+0x1b4>
   d9512:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d9516:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9518:	9308      	str	r3, [sp, #32]
   d951a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d951c:	1c59      	adds	r1, r3, #1
   d951e:	911d      	str	r1, [sp, #116]	; 0x74
   d9520:	785b      	ldrb	r3, [r3, #1]
   d9522:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d9526:	2e09      	cmp	r6, #9
   d9528:	d937      	bls.n	d959a <_strtod_l+0x34a>
   d952a:	9e08      	ldr	r6, [sp, #32]
   d952c:	1b89      	subs	r1, r1, r6
   d952e:	2908      	cmp	r1, #8
   d9530:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d9534:	dc02      	bgt.n	d953c <_strtod_l+0x2ec>
   d9536:	4576      	cmp	r6, lr
   d9538:	bfa8      	it	ge
   d953a:	4676      	movge	r6, lr
   d953c:	f1bc 0f00 	cmp.w	ip, #0
   d9540:	d000      	beq.n	d9544 <_strtod_l+0x2f4>
   d9542:	4276      	negs	r6, r6
   d9544:	2d00      	cmp	r5, #0
   d9546:	d14f      	bne.n	d95e8 <_strtod_l+0x398>
   d9548:	9904      	ldr	r1, [sp, #16]
   d954a:	4301      	orrs	r1, r0
   d954c:	f47f aec2 	bne.w	d92d4 <_strtod_l+0x84>
   d9550:	2a00      	cmp	r2, #0
   d9552:	f47f aedb 	bne.w	d930c <_strtod_l+0xbc>
   d9556:	2b69      	cmp	r3, #105	; 0x69
   d9558:	d027      	beq.n	d95aa <_strtod_l+0x35a>
   d955a:	dc24      	bgt.n	d95a6 <_strtod_l+0x356>
   d955c:	2b49      	cmp	r3, #73	; 0x49
   d955e:	d024      	beq.n	d95aa <_strtod_l+0x35a>
   d9560:	2b4e      	cmp	r3, #78	; 0x4e
   d9562:	f47f aed3 	bne.w	d930c <_strtod_l+0xbc>
   d9566:	499e      	ldr	r1, [pc, #632]	; (d97e0 <_strtod_l+0x590>)
   d9568:	a81d      	add	r0, sp, #116	; 0x74
   d956a:	f000 ffb9 	bl	da4e0 <__match>
   d956e:	2800      	cmp	r0, #0
   d9570:	f43f aecc 	beq.w	d930c <_strtod_l+0xbc>
   d9574:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9576:	781b      	ldrb	r3, [r3, #0]
   d9578:	2b28      	cmp	r3, #40	; 0x28
   d957a:	d12d      	bne.n	d95d8 <_strtod_l+0x388>
   d957c:	4999      	ldr	r1, [pc, #612]	; (d97e4 <_strtod_l+0x594>)
   d957e:	aa20      	add	r2, sp, #128	; 0x80
   d9580:	a81d      	add	r0, sp, #116	; 0x74
   d9582:	f000 ffc1 	bl	da508 <__hexnan>
   d9586:	2805      	cmp	r0, #5
   d9588:	d126      	bne.n	d95d8 <_strtod_l+0x388>
   d958a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d958c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d9590:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d9594:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d9598:	e69c      	b.n	d92d4 <_strtod_l+0x84>
   d959a:	210a      	movs	r1, #10
   d959c:	fb01 3e0e 	mla	lr, r1, lr, r3
   d95a0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d95a4:	e7b9      	b.n	d951a <_strtod_l+0x2ca>
   d95a6:	2b6e      	cmp	r3, #110	; 0x6e
   d95a8:	e7db      	b.n	d9562 <_strtod_l+0x312>
   d95aa:	498f      	ldr	r1, [pc, #572]	; (d97e8 <_strtod_l+0x598>)
   d95ac:	a81d      	add	r0, sp, #116	; 0x74
   d95ae:	f000 ff97 	bl	da4e0 <__match>
   d95b2:	2800      	cmp	r0, #0
   d95b4:	f43f aeaa 	beq.w	d930c <_strtod_l+0xbc>
   d95b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d95ba:	498c      	ldr	r1, [pc, #560]	; (d97ec <_strtod_l+0x59c>)
   d95bc:	3b01      	subs	r3, #1
   d95be:	a81d      	add	r0, sp, #116	; 0x74
   d95c0:	931d      	str	r3, [sp, #116]	; 0x74
   d95c2:	f000 ff8d 	bl	da4e0 <__match>
   d95c6:	b910      	cbnz	r0, d95ce <_strtod_l+0x37e>
   d95c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d95ca:	3301      	adds	r3, #1
   d95cc:	931d      	str	r3, [sp, #116]	; 0x74
   d95ce:	f8df b22c 	ldr.w	fp, [pc, #556]	; d97fc <_strtod_l+0x5ac>
   d95d2:	f04f 0a00 	mov.w	sl, #0
   d95d6:	e67d      	b.n	d92d4 <_strtod_l+0x84>
   d95d8:	4885      	ldr	r0, [pc, #532]	; (d97f0 <_strtod_l+0x5a0>)
   d95da:	f001 fc91 	bl	daf00 <nan>
   d95de:	ed8d 0b04 	vstr	d0, [sp, #16]
   d95e2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d95e6:	e675      	b.n	d92d4 <_strtod_l+0x84>
   d95e8:	9b07      	ldr	r3, [sp, #28]
   d95ea:	9809      	ldr	r0, [sp, #36]	; 0x24
   d95ec:	1af3      	subs	r3, r6, r3
   d95ee:	2f00      	cmp	r7, #0
   d95f0:	bf08      	it	eq
   d95f2:	462f      	moveq	r7, r5
   d95f4:	2d10      	cmp	r5, #16
   d95f6:	9308      	str	r3, [sp, #32]
   d95f8:	46a8      	mov	r8, r5
   d95fa:	bfa8      	it	ge
   d95fc:	f04f 0810 	movge.w	r8, #16
   d9600:	f7ff f978 	bl	d88f4 <__aeabi_ui2d>
   d9604:	2d09      	cmp	r5, #9
   d9606:	4682      	mov	sl, r0
   d9608:	468b      	mov	fp, r1
   d960a:	dd13      	ble.n	d9634 <_strtod_l+0x3e4>
   d960c:	4b79      	ldr	r3, [pc, #484]	; (d97f4 <_strtod_l+0x5a4>)
   d960e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d9612:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d9616:	f7ff f9e7 	bl	d89e8 <__aeabi_dmul>
   d961a:	4682      	mov	sl, r0
   d961c:	4648      	mov	r0, r9
   d961e:	468b      	mov	fp, r1
   d9620:	f7ff f968 	bl	d88f4 <__aeabi_ui2d>
   d9624:	4602      	mov	r2, r0
   d9626:	460b      	mov	r3, r1
   d9628:	4650      	mov	r0, sl
   d962a:	4659      	mov	r1, fp
   d962c:	f7ff f826 	bl	d867c <__adddf3>
   d9630:	4682      	mov	sl, r0
   d9632:	468b      	mov	fp, r1
   d9634:	2d0f      	cmp	r5, #15
   d9636:	dc38      	bgt.n	d96aa <_strtod_l+0x45a>
   d9638:	9b08      	ldr	r3, [sp, #32]
   d963a:	2b00      	cmp	r3, #0
   d963c:	f43f ae4a 	beq.w	d92d4 <_strtod_l+0x84>
   d9640:	dd24      	ble.n	d968c <_strtod_l+0x43c>
   d9642:	2b16      	cmp	r3, #22
   d9644:	dc0b      	bgt.n	d965e <_strtod_l+0x40e>
   d9646:	4d6b      	ldr	r5, [pc, #428]	; (d97f4 <_strtod_l+0x5a4>)
   d9648:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d964c:	e9d5 0100 	ldrd	r0, r1, [r5]
   d9650:	4652      	mov	r2, sl
   d9652:	465b      	mov	r3, fp
   d9654:	f7ff f9c8 	bl	d89e8 <__aeabi_dmul>
   d9658:	4682      	mov	sl, r0
   d965a:	468b      	mov	fp, r1
   d965c:	e63a      	b.n	d92d4 <_strtod_l+0x84>
   d965e:	9a08      	ldr	r2, [sp, #32]
   d9660:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d9664:	4293      	cmp	r3, r2
   d9666:	db20      	blt.n	d96aa <_strtod_l+0x45a>
   d9668:	4c62      	ldr	r4, [pc, #392]	; (d97f4 <_strtod_l+0x5a4>)
   d966a:	f1c5 050f 	rsb	r5, r5, #15
   d966e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d9672:	4652      	mov	r2, sl
   d9674:	465b      	mov	r3, fp
   d9676:	e9d1 0100 	ldrd	r0, r1, [r1]
   d967a:	f7ff f9b5 	bl	d89e8 <__aeabi_dmul>
   d967e:	9b08      	ldr	r3, [sp, #32]
   d9680:	1b5d      	subs	r5, r3, r5
   d9682:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d9686:	e9d4 2300 	ldrd	r2, r3, [r4]
   d968a:	e7e3      	b.n	d9654 <_strtod_l+0x404>
   d968c:	9b08      	ldr	r3, [sp, #32]
   d968e:	3316      	adds	r3, #22
   d9690:	db0b      	blt.n	d96aa <_strtod_l+0x45a>
   d9692:	9b07      	ldr	r3, [sp, #28]
   d9694:	4a57      	ldr	r2, [pc, #348]	; (d97f4 <_strtod_l+0x5a4>)
   d9696:	1b9e      	subs	r6, r3, r6
   d9698:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d969c:	e9d6 2300 	ldrd	r2, r3, [r6]
   d96a0:	4650      	mov	r0, sl
   d96a2:	4659      	mov	r1, fp
   d96a4:	f7ff faca 	bl	d8c3c <__aeabi_ddiv>
   d96a8:	e7d6      	b.n	d9658 <_strtod_l+0x408>
   d96aa:	9b08      	ldr	r3, [sp, #32]
   d96ac:	eba5 0808 	sub.w	r8, r5, r8
   d96b0:	4498      	add	r8, r3
   d96b2:	f1b8 0f00 	cmp.w	r8, #0
   d96b6:	dd71      	ble.n	d979c <_strtod_l+0x54c>
   d96b8:	f018 030f 	ands.w	r3, r8, #15
   d96bc:	d00a      	beq.n	d96d4 <_strtod_l+0x484>
   d96be:	494d      	ldr	r1, [pc, #308]	; (d97f4 <_strtod_l+0x5a4>)
   d96c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d96c4:	4652      	mov	r2, sl
   d96c6:	465b      	mov	r3, fp
   d96c8:	e9d1 0100 	ldrd	r0, r1, [r1]
   d96cc:	f7ff f98c 	bl	d89e8 <__aeabi_dmul>
   d96d0:	4682      	mov	sl, r0
   d96d2:	468b      	mov	fp, r1
   d96d4:	f038 080f 	bics.w	r8, r8, #15
   d96d8:	d04d      	beq.n	d9776 <_strtod_l+0x526>
   d96da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d96de:	dd22      	ble.n	d9726 <_strtod_l+0x4d6>
   d96e0:	2500      	movs	r5, #0
   d96e2:	462e      	mov	r6, r5
   d96e4:	9509      	str	r5, [sp, #36]	; 0x24
   d96e6:	9507      	str	r5, [sp, #28]
   d96e8:	2322      	movs	r3, #34	; 0x22
   d96ea:	f8df b110 	ldr.w	fp, [pc, #272]	; d97fc <_strtod_l+0x5ac>
   d96ee:	6023      	str	r3, [r4, #0]
   d96f0:	f04f 0a00 	mov.w	sl, #0
   d96f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d96f6:	2b00      	cmp	r3, #0
   d96f8:	f43f adec 	beq.w	d92d4 <_strtod_l+0x84>
   d96fc:	991e      	ldr	r1, [sp, #120]	; 0x78
   d96fe:	4620      	mov	r0, r4
   d9700:	f000 ffe4 	bl	da6cc <_Bfree>
   d9704:	9907      	ldr	r1, [sp, #28]
   d9706:	4620      	mov	r0, r4
   d9708:	f000 ffe0 	bl	da6cc <_Bfree>
   d970c:	4631      	mov	r1, r6
   d970e:	4620      	mov	r0, r4
   d9710:	f000 ffdc 	bl	da6cc <_Bfree>
   d9714:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9716:	4620      	mov	r0, r4
   d9718:	f000 ffd8 	bl	da6cc <_Bfree>
   d971c:	4629      	mov	r1, r5
   d971e:	4620      	mov	r0, r4
   d9720:	f000 ffd4 	bl	da6cc <_Bfree>
   d9724:	e5d6      	b.n	d92d4 <_strtod_l+0x84>
   d9726:	2300      	movs	r3, #0
   d9728:	ea4f 1828 	mov.w	r8, r8, asr #4
   d972c:	4650      	mov	r0, sl
   d972e:	4659      	mov	r1, fp
   d9730:	4699      	mov	r9, r3
   d9732:	f1b8 0f01 	cmp.w	r8, #1
   d9736:	dc21      	bgt.n	d977c <_strtod_l+0x52c>
   d9738:	b10b      	cbz	r3, d973e <_strtod_l+0x4ee>
   d973a:	4682      	mov	sl, r0
   d973c:	468b      	mov	fp, r1
   d973e:	4b2e      	ldr	r3, [pc, #184]	; (d97f8 <_strtod_l+0x5a8>)
   d9740:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d9744:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d9748:	4652      	mov	r2, sl
   d974a:	465b      	mov	r3, fp
   d974c:	e9d9 0100 	ldrd	r0, r1, [r9]
   d9750:	f7ff f94a 	bl	d89e8 <__aeabi_dmul>
   d9754:	4b29      	ldr	r3, [pc, #164]	; (d97fc <_strtod_l+0x5ac>)
   d9756:	460a      	mov	r2, r1
   d9758:	400b      	ands	r3, r1
   d975a:	4929      	ldr	r1, [pc, #164]	; (d9800 <_strtod_l+0x5b0>)
   d975c:	428b      	cmp	r3, r1
   d975e:	4682      	mov	sl, r0
   d9760:	d8be      	bhi.n	d96e0 <_strtod_l+0x490>
   d9762:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d9766:	428b      	cmp	r3, r1
   d9768:	bf86      	itte	hi
   d976a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d9804 <_strtod_l+0x5b4>
   d976e:	f04f 3aff 	movhi.w	sl, #4294967295
   d9772:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d9776:	2300      	movs	r3, #0
   d9778:	9304      	str	r3, [sp, #16]
   d977a:	e081      	b.n	d9880 <_strtod_l+0x630>
   d977c:	f018 0f01 	tst.w	r8, #1
   d9780:	d007      	beq.n	d9792 <_strtod_l+0x542>
   d9782:	4b1d      	ldr	r3, [pc, #116]	; (d97f8 <_strtod_l+0x5a8>)
   d9784:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d9788:	e9d3 2300 	ldrd	r2, r3, [r3]
   d978c:	f7ff f92c 	bl	d89e8 <__aeabi_dmul>
   d9790:	2301      	movs	r3, #1
   d9792:	f109 0901 	add.w	r9, r9, #1
   d9796:	ea4f 0868 	mov.w	r8, r8, asr #1
   d979a:	e7ca      	b.n	d9732 <_strtod_l+0x4e2>
   d979c:	d0eb      	beq.n	d9776 <_strtod_l+0x526>
   d979e:	f1c8 0800 	rsb	r8, r8, #0
   d97a2:	f018 020f 	ands.w	r2, r8, #15
   d97a6:	d00a      	beq.n	d97be <_strtod_l+0x56e>
   d97a8:	4b12      	ldr	r3, [pc, #72]	; (d97f4 <_strtod_l+0x5a4>)
   d97aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d97ae:	4650      	mov	r0, sl
   d97b0:	4659      	mov	r1, fp
   d97b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d97b6:	f7ff fa41 	bl	d8c3c <__aeabi_ddiv>
   d97ba:	4682      	mov	sl, r0
   d97bc:	468b      	mov	fp, r1
   d97be:	ea5f 1828 	movs.w	r8, r8, asr #4
   d97c2:	d0d8      	beq.n	d9776 <_strtod_l+0x526>
   d97c4:	f1b8 0f1f 	cmp.w	r8, #31
   d97c8:	dd1e      	ble.n	d9808 <_strtod_l+0x5b8>
   d97ca:	2500      	movs	r5, #0
   d97cc:	462e      	mov	r6, r5
   d97ce:	9509      	str	r5, [sp, #36]	; 0x24
   d97d0:	9507      	str	r5, [sp, #28]
   d97d2:	2322      	movs	r3, #34	; 0x22
   d97d4:	f04f 0a00 	mov.w	sl, #0
   d97d8:	f04f 0b00 	mov.w	fp, #0
   d97dc:	6023      	str	r3, [r4, #0]
   d97de:	e789      	b.n	d96f4 <_strtod_l+0x4a4>
   d97e0:	000db70e 	.word	0x000db70e
   d97e4:	000db728 	.word	0x000db728
   d97e8:	000db705 	.word	0x000db705
   d97ec:	000db708 	.word	0x000db708
   d97f0:	000db269 	.word	0x000db269
   d97f4:	000db8a8 	.word	0x000db8a8
   d97f8:	000db880 	.word	0x000db880
   d97fc:	7ff00000 	.word	0x7ff00000
   d9800:	7ca00000 	.word	0x7ca00000
   d9804:	7fefffff 	.word	0x7fefffff
   d9808:	f018 0310 	ands.w	r3, r8, #16
   d980c:	bf18      	it	ne
   d980e:	236a      	movne	r3, #106	; 0x6a
   d9810:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d9bc8 <_strtod_l+0x978>
   d9814:	9304      	str	r3, [sp, #16]
   d9816:	4650      	mov	r0, sl
   d9818:	4659      	mov	r1, fp
   d981a:	2300      	movs	r3, #0
   d981c:	f018 0f01 	tst.w	r8, #1
   d9820:	d004      	beq.n	d982c <_strtod_l+0x5dc>
   d9822:	e9d9 2300 	ldrd	r2, r3, [r9]
   d9826:	f7ff f8df 	bl	d89e8 <__aeabi_dmul>
   d982a:	2301      	movs	r3, #1
   d982c:	ea5f 0868 	movs.w	r8, r8, asr #1
   d9830:	f109 0908 	add.w	r9, r9, #8
   d9834:	d1f2      	bne.n	d981c <_strtod_l+0x5cc>
   d9836:	b10b      	cbz	r3, d983c <_strtod_l+0x5ec>
   d9838:	4682      	mov	sl, r0
   d983a:	468b      	mov	fp, r1
   d983c:	9b04      	ldr	r3, [sp, #16]
   d983e:	b1bb      	cbz	r3, d9870 <_strtod_l+0x620>
   d9840:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d9844:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9848:	2b00      	cmp	r3, #0
   d984a:	4659      	mov	r1, fp
   d984c:	dd10      	ble.n	d9870 <_strtod_l+0x620>
   d984e:	2b1f      	cmp	r3, #31
   d9850:	f340 8128 	ble.w	d9aa4 <_strtod_l+0x854>
   d9854:	2b34      	cmp	r3, #52	; 0x34
   d9856:	bfde      	ittt	le
   d9858:	3b20      	suble	r3, #32
   d985a:	f04f 32ff 	movle.w	r2, #4294967295
   d985e:	fa02 f303 	lslle.w	r3, r2, r3
   d9862:	f04f 0a00 	mov.w	sl, #0
   d9866:	bfcc      	ite	gt
   d9868:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d986c:	ea03 0b01 	andle.w	fp, r3, r1
   d9870:	2200      	movs	r2, #0
   d9872:	2300      	movs	r3, #0
   d9874:	4650      	mov	r0, sl
   d9876:	4659      	mov	r1, fp
   d9878:	f7ff fb1e 	bl	d8eb8 <__aeabi_dcmpeq>
   d987c:	2800      	cmp	r0, #0
   d987e:	d1a4      	bne.n	d97ca <_strtod_l+0x57a>
   d9880:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9882:	9300      	str	r3, [sp, #0]
   d9884:	990a      	ldr	r1, [sp, #40]	; 0x28
   d9886:	462b      	mov	r3, r5
   d9888:	463a      	mov	r2, r7
   d988a:	4620      	mov	r0, r4
   d988c:	f000 ff73 	bl	da776 <__s2b>
   d9890:	9009      	str	r0, [sp, #36]	; 0x24
   d9892:	2800      	cmp	r0, #0
   d9894:	f43f af24 	beq.w	d96e0 <_strtod_l+0x490>
   d9898:	9b07      	ldr	r3, [sp, #28]
   d989a:	1b9e      	subs	r6, r3, r6
   d989c:	9b08      	ldr	r3, [sp, #32]
   d989e:	2b00      	cmp	r3, #0
   d98a0:	bfb4      	ite	lt
   d98a2:	4633      	movlt	r3, r6
   d98a4:	2300      	movge	r3, #0
   d98a6:	9310      	str	r3, [sp, #64]	; 0x40
   d98a8:	9b08      	ldr	r3, [sp, #32]
   d98aa:	2500      	movs	r5, #0
   d98ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d98b0:	9318      	str	r3, [sp, #96]	; 0x60
   d98b2:	462e      	mov	r6, r5
   d98b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d98b6:	4620      	mov	r0, r4
   d98b8:	6859      	ldr	r1, [r3, #4]
   d98ba:	f000 fed3 	bl	da664 <_Balloc>
   d98be:	9007      	str	r0, [sp, #28]
   d98c0:	2800      	cmp	r0, #0
   d98c2:	f43f af11 	beq.w	d96e8 <_strtod_l+0x498>
   d98c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d98c8:	691a      	ldr	r2, [r3, #16]
   d98ca:	3202      	adds	r2, #2
   d98cc:	f103 010c 	add.w	r1, r3, #12
   d98d0:	0092      	lsls	r2, r2, #2
   d98d2:	300c      	adds	r0, #12
   d98d4:	f7ff fbfc 	bl	d90d0 <memcpy>
   d98d8:	ec4b ab10 	vmov	d0, sl, fp
   d98dc:	aa20      	add	r2, sp, #128	; 0x80
   d98de:	a91f      	add	r1, sp, #124	; 0x7c
   d98e0:	4620      	mov	r0, r4
   d98e2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d98e6:	f001 fa35 	bl	dad54 <__d2b>
   d98ea:	901e      	str	r0, [sp, #120]	; 0x78
   d98ec:	2800      	cmp	r0, #0
   d98ee:	f43f aefb 	beq.w	d96e8 <_strtod_l+0x498>
   d98f2:	2101      	movs	r1, #1
   d98f4:	4620      	mov	r0, r4
   d98f6:	f000 ffcc 	bl	da892 <__i2b>
   d98fa:	4606      	mov	r6, r0
   d98fc:	2800      	cmp	r0, #0
   d98fe:	f43f aef3 	beq.w	d96e8 <_strtod_l+0x498>
   d9902:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d9904:	9904      	ldr	r1, [sp, #16]
   d9906:	2b00      	cmp	r3, #0
   d9908:	bfab      	itete	ge
   d990a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d990c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d990e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d9910:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d9914:	bfac      	ite	ge
   d9916:	eb03 0902 	addge.w	r9, r3, r2
   d991a:	1ad7      	sublt	r7, r2, r3
   d991c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d991e:	eba3 0801 	sub.w	r8, r3, r1
   d9922:	4490      	add	r8, r2
   d9924:	4ba3      	ldr	r3, [pc, #652]	; (d9bb4 <_strtod_l+0x964>)
   d9926:	f108 38ff 	add.w	r8, r8, #4294967295
   d992a:	4598      	cmp	r8, r3
   d992c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d9930:	f280 80cc 	bge.w	d9acc <_strtod_l+0x87c>
   d9934:	eba3 0308 	sub.w	r3, r3, r8
   d9938:	2b1f      	cmp	r3, #31
   d993a:	eba2 0203 	sub.w	r2, r2, r3
   d993e:	f04f 0101 	mov.w	r1, #1
   d9942:	f300 80b6 	bgt.w	d9ab2 <_strtod_l+0x862>
   d9946:	fa01 f303 	lsl.w	r3, r1, r3
   d994a:	9311      	str	r3, [sp, #68]	; 0x44
   d994c:	2300      	movs	r3, #0
   d994e:	930c      	str	r3, [sp, #48]	; 0x30
   d9950:	eb09 0802 	add.w	r8, r9, r2
   d9954:	9b04      	ldr	r3, [sp, #16]
   d9956:	45c1      	cmp	r9, r8
   d9958:	4417      	add	r7, r2
   d995a:	441f      	add	r7, r3
   d995c:	464b      	mov	r3, r9
   d995e:	bfa8      	it	ge
   d9960:	4643      	movge	r3, r8
   d9962:	42bb      	cmp	r3, r7
   d9964:	bfa8      	it	ge
   d9966:	463b      	movge	r3, r7
   d9968:	2b00      	cmp	r3, #0
   d996a:	bfc2      	ittt	gt
   d996c:	eba8 0803 	subgt.w	r8, r8, r3
   d9970:	1aff      	subgt	r7, r7, r3
   d9972:	eba9 0903 	subgt.w	r9, r9, r3
   d9976:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d9978:	2b00      	cmp	r3, #0
   d997a:	dd17      	ble.n	d99ac <_strtod_l+0x75c>
   d997c:	4631      	mov	r1, r6
   d997e:	461a      	mov	r2, r3
   d9980:	4620      	mov	r0, r4
   d9982:	f001 f82b 	bl	da9dc <__pow5mult>
   d9986:	4606      	mov	r6, r0
   d9988:	2800      	cmp	r0, #0
   d998a:	f43f aead 	beq.w	d96e8 <_strtod_l+0x498>
   d998e:	4601      	mov	r1, r0
   d9990:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d9992:	4620      	mov	r0, r4
   d9994:	f000 ff86 	bl	da8a4 <__multiply>
   d9998:	900f      	str	r0, [sp, #60]	; 0x3c
   d999a:	2800      	cmp	r0, #0
   d999c:	f43f aea4 	beq.w	d96e8 <_strtod_l+0x498>
   d99a0:	991e      	ldr	r1, [sp, #120]	; 0x78
   d99a2:	4620      	mov	r0, r4
   d99a4:	f000 fe92 	bl	da6cc <_Bfree>
   d99a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d99aa:	931e      	str	r3, [sp, #120]	; 0x78
   d99ac:	f1b8 0f00 	cmp.w	r8, #0
   d99b0:	f300 8091 	bgt.w	d9ad6 <_strtod_l+0x886>
   d99b4:	9b08      	ldr	r3, [sp, #32]
   d99b6:	2b00      	cmp	r3, #0
   d99b8:	dd08      	ble.n	d99cc <_strtod_l+0x77c>
   d99ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d99bc:	9907      	ldr	r1, [sp, #28]
   d99be:	4620      	mov	r0, r4
   d99c0:	f001 f80c 	bl	da9dc <__pow5mult>
   d99c4:	9007      	str	r0, [sp, #28]
   d99c6:	2800      	cmp	r0, #0
   d99c8:	f43f ae8e 	beq.w	d96e8 <_strtod_l+0x498>
   d99cc:	2f00      	cmp	r7, #0
   d99ce:	dd08      	ble.n	d99e2 <_strtod_l+0x792>
   d99d0:	9907      	ldr	r1, [sp, #28]
   d99d2:	463a      	mov	r2, r7
   d99d4:	4620      	mov	r0, r4
   d99d6:	f001 f84f 	bl	daa78 <__lshift>
   d99da:	9007      	str	r0, [sp, #28]
   d99dc:	2800      	cmp	r0, #0
   d99de:	f43f ae83 	beq.w	d96e8 <_strtod_l+0x498>
   d99e2:	f1b9 0f00 	cmp.w	r9, #0
   d99e6:	dd08      	ble.n	d99fa <_strtod_l+0x7aa>
   d99e8:	4631      	mov	r1, r6
   d99ea:	464a      	mov	r2, r9
   d99ec:	4620      	mov	r0, r4
   d99ee:	f001 f843 	bl	daa78 <__lshift>
   d99f2:	4606      	mov	r6, r0
   d99f4:	2800      	cmp	r0, #0
   d99f6:	f43f ae77 	beq.w	d96e8 <_strtod_l+0x498>
   d99fa:	9a07      	ldr	r2, [sp, #28]
   d99fc:	991e      	ldr	r1, [sp, #120]	; 0x78
   d99fe:	4620      	mov	r0, r4
   d9a00:	f001 f8b5 	bl	dab6e <__mdiff>
   d9a04:	4605      	mov	r5, r0
   d9a06:	2800      	cmp	r0, #0
   d9a08:	f43f ae6e 	beq.w	d96e8 <_strtod_l+0x498>
   d9a0c:	68c3      	ldr	r3, [r0, #12]
   d9a0e:	930f      	str	r3, [sp, #60]	; 0x3c
   d9a10:	2300      	movs	r3, #0
   d9a12:	60c3      	str	r3, [r0, #12]
   d9a14:	4631      	mov	r1, r6
   d9a16:	f001 f88e 	bl	dab36 <__mcmp>
   d9a1a:	2800      	cmp	r0, #0
   d9a1c:	da65      	bge.n	d9aea <_strtod_l+0x89a>
   d9a1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9a20:	ea53 030a 	orrs.w	r3, r3, sl
   d9a24:	f040 8087 	bne.w	d9b36 <_strtod_l+0x8e6>
   d9a28:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9a2c:	2b00      	cmp	r3, #0
   d9a2e:	f040 8082 	bne.w	d9b36 <_strtod_l+0x8e6>
   d9a32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9a36:	0d1b      	lsrs	r3, r3, #20
   d9a38:	051b      	lsls	r3, r3, #20
   d9a3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d9a3e:	d97a      	bls.n	d9b36 <_strtod_l+0x8e6>
   d9a40:	696b      	ldr	r3, [r5, #20]
   d9a42:	b913      	cbnz	r3, d9a4a <_strtod_l+0x7fa>
   d9a44:	692b      	ldr	r3, [r5, #16]
   d9a46:	2b01      	cmp	r3, #1
   d9a48:	dd75      	ble.n	d9b36 <_strtod_l+0x8e6>
   d9a4a:	4629      	mov	r1, r5
   d9a4c:	2201      	movs	r2, #1
   d9a4e:	4620      	mov	r0, r4
   d9a50:	f001 f812 	bl	daa78 <__lshift>
   d9a54:	4631      	mov	r1, r6
   d9a56:	4605      	mov	r5, r0
   d9a58:	f001 f86d 	bl	dab36 <__mcmp>
   d9a5c:	2800      	cmp	r0, #0
   d9a5e:	dd6a      	ble.n	d9b36 <_strtod_l+0x8e6>
   d9a60:	9904      	ldr	r1, [sp, #16]
   d9a62:	4a55      	ldr	r2, [pc, #340]	; (d9bb8 <_strtod_l+0x968>)
   d9a64:	465b      	mov	r3, fp
   d9a66:	2900      	cmp	r1, #0
   d9a68:	f000 8085 	beq.w	d9b76 <_strtod_l+0x926>
   d9a6c:	ea02 010b 	and.w	r1, r2, fp
   d9a70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d9a74:	dc7f      	bgt.n	d9b76 <_strtod_l+0x926>
   d9a76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d9a7a:	f77f aeaa 	ble.w	d97d2 <_strtod_l+0x582>
   d9a7e:	4a4f      	ldr	r2, [pc, #316]	; (d9bbc <_strtod_l+0x96c>)
   d9a80:	2300      	movs	r3, #0
   d9a82:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d9a86:	4650      	mov	r0, sl
   d9a88:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d9a8c:	4659      	mov	r1, fp
   d9a8e:	f7fe ffab 	bl	d89e8 <__aeabi_dmul>
   d9a92:	460b      	mov	r3, r1
   d9a94:	4303      	orrs	r3, r0
   d9a96:	bf08      	it	eq
   d9a98:	2322      	moveq	r3, #34	; 0x22
   d9a9a:	4682      	mov	sl, r0
   d9a9c:	468b      	mov	fp, r1
   d9a9e:	bf08      	it	eq
   d9aa0:	6023      	streq	r3, [r4, #0]
   d9aa2:	e62b      	b.n	d96fc <_strtod_l+0x4ac>
   d9aa4:	f04f 32ff 	mov.w	r2, #4294967295
   d9aa8:	fa02 f303 	lsl.w	r3, r2, r3
   d9aac:	ea03 0a0a 	and.w	sl, r3, sl
   d9ab0:	e6de      	b.n	d9870 <_strtod_l+0x620>
   d9ab2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d9ab6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d9aba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d9abe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d9ac2:	fa01 f308 	lsl.w	r3, r1, r8
   d9ac6:	930c      	str	r3, [sp, #48]	; 0x30
   d9ac8:	9111      	str	r1, [sp, #68]	; 0x44
   d9aca:	e741      	b.n	d9950 <_strtod_l+0x700>
   d9acc:	2300      	movs	r3, #0
   d9ace:	930c      	str	r3, [sp, #48]	; 0x30
   d9ad0:	2301      	movs	r3, #1
   d9ad2:	9311      	str	r3, [sp, #68]	; 0x44
   d9ad4:	e73c      	b.n	d9950 <_strtod_l+0x700>
   d9ad6:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9ad8:	4642      	mov	r2, r8
   d9ada:	4620      	mov	r0, r4
   d9adc:	f000 ffcc 	bl	daa78 <__lshift>
   d9ae0:	901e      	str	r0, [sp, #120]	; 0x78
   d9ae2:	2800      	cmp	r0, #0
   d9ae4:	f47f af66 	bne.w	d99b4 <_strtod_l+0x764>
   d9ae8:	e5fe      	b.n	d96e8 <_strtod_l+0x498>
   d9aea:	465f      	mov	r7, fp
   d9aec:	d16e      	bne.n	d9bcc <_strtod_l+0x97c>
   d9aee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d9af0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9af4:	b342      	cbz	r2, d9b48 <_strtod_l+0x8f8>
   d9af6:	4a32      	ldr	r2, [pc, #200]	; (d9bc0 <_strtod_l+0x970>)
   d9af8:	4293      	cmp	r3, r2
   d9afa:	d128      	bne.n	d9b4e <_strtod_l+0x8fe>
   d9afc:	9b04      	ldr	r3, [sp, #16]
   d9afe:	4650      	mov	r0, sl
   d9b00:	b1eb      	cbz	r3, d9b3e <_strtod_l+0x8ee>
   d9b02:	4a2d      	ldr	r2, [pc, #180]	; (d9bb8 <_strtod_l+0x968>)
   d9b04:	403a      	ands	r2, r7
   d9b06:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d9b0a:	f04f 31ff 	mov.w	r1, #4294967295
   d9b0e:	d819      	bhi.n	d9b44 <_strtod_l+0x8f4>
   d9b10:	0d12      	lsrs	r2, r2, #20
   d9b12:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d9b16:	fa01 f303 	lsl.w	r3, r1, r3
   d9b1a:	4298      	cmp	r0, r3
   d9b1c:	d117      	bne.n	d9b4e <_strtod_l+0x8fe>
   d9b1e:	4b29      	ldr	r3, [pc, #164]	; (d9bc4 <_strtod_l+0x974>)
   d9b20:	429f      	cmp	r7, r3
   d9b22:	d102      	bne.n	d9b2a <_strtod_l+0x8da>
   d9b24:	3001      	adds	r0, #1
   d9b26:	f43f addf 	beq.w	d96e8 <_strtod_l+0x498>
   d9b2a:	4b23      	ldr	r3, [pc, #140]	; (d9bb8 <_strtod_l+0x968>)
   d9b2c:	403b      	ands	r3, r7
   d9b2e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d9b32:	f04f 0a00 	mov.w	sl, #0
   d9b36:	9b04      	ldr	r3, [sp, #16]
   d9b38:	2b00      	cmp	r3, #0
   d9b3a:	d1a0      	bne.n	d9a7e <_strtod_l+0x82e>
   d9b3c:	e5de      	b.n	d96fc <_strtod_l+0x4ac>
   d9b3e:	f04f 33ff 	mov.w	r3, #4294967295
   d9b42:	e7ea      	b.n	d9b1a <_strtod_l+0x8ca>
   d9b44:	460b      	mov	r3, r1
   d9b46:	e7e8      	b.n	d9b1a <_strtod_l+0x8ca>
   d9b48:	ea53 030a 	orrs.w	r3, r3, sl
   d9b4c:	d088      	beq.n	d9a60 <_strtod_l+0x810>
   d9b4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9b50:	b1db      	cbz	r3, d9b8a <_strtod_l+0x93a>
   d9b52:	423b      	tst	r3, r7
   d9b54:	d0ef      	beq.n	d9b36 <_strtod_l+0x8e6>
   d9b56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9b58:	9a04      	ldr	r2, [sp, #16]
   d9b5a:	4650      	mov	r0, sl
   d9b5c:	4659      	mov	r1, fp
   d9b5e:	b1c3      	cbz	r3, d9b92 <_strtod_l+0x942>
   d9b60:	f7ff fb5a 	bl	d9218 <sulp>
   d9b64:	4602      	mov	r2, r0
   d9b66:	460b      	mov	r3, r1
   d9b68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d9b6c:	f7fe fd86 	bl	d867c <__adddf3>
   d9b70:	4682      	mov	sl, r0
   d9b72:	468b      	mov	fp, r1
   d9b74:	e7df      	b.n	d9b36 <_strtod_l+0x8e6>
   d9b76:	4013      	ands	r3, r2
   d9b78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d9b7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d9b80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d9b84:	f04f 3aff 	mov.w	sl, #4294967295
   d9b88:	e7d5      	b.n	d9b36 <_strtod_l+0x8e6>
   d9b8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d9b8c:	ea13 0f0a 	tst.w	r3, sl
   d9b90:	e7e0      	b.n	d9b54 <_strtod_l+0x904>
   d9b92:	f7ff fb41 	bl	d9218 <sulp>
   d9b96:	4602      	mov	r2, r0
   d9b98:	460b      	mov	r3, r1
   d9b9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d9b9e:	f7fe fd6b 	bl	d8678 <__aeabi_dsub>
   d9ba2:	2200      	movs	r2, #0
   d9ba4:	2300      	movs	r3, #0
   d9ba6:	4682      	mov	sl, r0
   d9ba8:	468b      	mov	fp, r1
   d9baa:	f7ff f985 	bl	d8eb8 <__aeabi_dcmpeq>
   d9bae:	2800      	cmp	r0, #0
   d9bb0:	d0c1      	beq.n	d9b36 <_strtod_l+0x8e6>
   d9bb2:	e60e      	b.n	d97d2 <_strtod_l+0x582>
   d9bb4:	fffffc02 	.word	0xfffffc02
   d9bb8:	7ff00000 	.word	0x7ff00000
   d9bbc:	39500000 	.word	0x39500000
   d9bc0:	000fffff 	.word	0x000fffff
   d9bc4:	7fefffff 	.word	0x7fefffff
   d9bc8:	000db740 	.word	0x000db740
   d9bcc:	4631      	mov	r1, r6
   d9bce:	4628      	mov	r0, r5
   d9bd0:	f001 f910 	bl	dadf4 <__ratio>
   d9bd4:	ec59 8b10 	vmov	r8, r9, d0
   d9bd8:	ee10 0a10 	vmov	r0, s0
   d9bdc:	2200      	movs	r2, #0
   d9bde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9be2:	4649      	mov	r1, r9
   d9be4:	f7ff f97c 	bl	d8ee0 <__aeabi_dcmple>
   d9be8:	2800      	cmp	r0, #0
   d9bea:	d07c      	beq.n	d9ce6 <_strtod_l+0xa96>
   d9bec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9bee:	2b00      	cmp	r3, #0
   d9bf0:	d04c      	beq.n	d9c8c <_strtod_l+0xa3c>
   d9bf2:	4b95      	ldr	r3, [pc, #596]	; (d9e48 <_strtod_l+0xbf8>)
   d9bf4:	2200      	movs	r2, #0
   d9bf6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9bfa:	f8df 924c 	ldr.w	r9, [pc, #588]	; d9e48 <_strtod_l+0xbf8>
   d9bfe:	f04f 0800 	mov.w	r8, #0
   d9c02:	4b92      	ldr	r3, [pc, #584]	; (d9e4c <_strtod_l+0xbfc>)
   d9c04:	403b      	ands	r3, r7
   d9c06:	9311      	str	r3, [sp, #68]	; 0x44
   d9c08:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9c0a:	4b91      	ldr	r3, [pc, #580]	; (d9e50 <_strtod_l+0xc00>)
   d9c0c:	429a      	cmp	r2, r3
   d9c0e:	f040 80b2 	bne.w	d9d76 <_strtod_l+0xb26>
   d9c12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9c16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9c1a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d9c1e:	ec4b ab10 	vmov	d0, sl, fp
   d9c22:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d9c26:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d9c2a:	f001 f817 	bl	dac5c <__ulp>
   d9c2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9c32:	ec53 2b10 	vmov	r2, r3, d0
   d9c36:	f7fe fed7 	bl	d89e8 <__aeabi_dmul>
   d9c3a:	4652      	mov	r2, sl
   d9c3c:	465b      	mov	r3, fp
   d9c3e:	f7fe fd1d 	bl	d867c <__adddf3>
   d9c42:	460b      	mov	r3, r1
   d9c44:	4981      	ldr	r1, [pc, #516]	; (d9e4c <_strtod_l+0xbfc>)
   d9c46:	4a83      	ldr	r2, [pc, #524]	; (d9e54 <_strtod_l+0xc04>)
   d9c48:	4019      	ands	r1, r3
   d9c4a:	4291      	cmp	r1, r2
   d9c4c:	4682      	mov	sl, r0
   d9c4e:	d95e      	bls.n	d9d0e <_strtod_l+0xabe>
   d9c50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d9c52:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d9c56:	4293      	cmp	r3, r2
   d9c58:	d103      	bne.n	d9c62 <_strtod_l+0xa12>
   d9c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9c5c:	3301      	adds	r3, #1
   d9c5e:	f43f ad43 	beq.w	d96e8 <_strtod_l+0x498>
   d9c62:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d9e60 <_strtod_l+0xc10>
   d9c66:	f04f 3aff 	mov.w	sl, #4294967295
   d9c6a:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9c6c:	4620      	mov	r0, r4
   d9c6e:	f000 fd2d 	bl	da6cc <_Bfree>
   d9c72:	9907      	ldr	r1, [sp, #28]
   d9c74:	4620      	mov	r0, r4
   d9c76:	f000 fd29 	bl	da6cc <_Bfree>
   d9c7a:	4631      	mov	r1, r6
   d9c7c:	4620      	mov	r0, r4
   d9c7e:	f000 fd25 	bl	da6cc <_Bfree>
   d9c82:	4629      	mov	r1, r5
   d9c84:	4620      	mov	r0, r4
   d9c86:	f000 fd21 	bl	da6cc <_Bfree>
   d9c8a:	e613      	b.n	d98b4 <_strtod_l+0x664>
   d9c8c:	f1ba 0f00 	cmp.w	sl, #0
   d9c90:	d11b      	bne.n	d9cca <_strtod_l+0xa7a>
   d9c92:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9c96:	b9f3      	cbnz	r3, d9cd6 <_strtod_l+0xa86>
   d9c98:	4b6b      	ldr	r3, [pc, #428]	; (d9e48 <_strtod_l+0xbf8>)
   d9c9a:	2200      	movs	r2, #0
   d9c9c:	4640      	mov	r0, r8
   d9c9e:	4649      	mov	r1, r9
   d9ca0:	f7ff f914 	bl	d8ecc <__aeabi_dcmplt>
   d9ca4:	b9d0      	cbnz	r0, d9cdc <_strtod_l+0xa8c>
   d9ca6:	4640      	mov	r0, r8
   d9ca8:	4649      	mov	r1, r9
   d9caa:	4b6b      	ldr	r3, [pc, #428]	; (d9e58 <_strtod_l+0xc08>)
   d9cac:	2200      	movs	r2, #0
   d9cae:	f7fe fe9b 	bl	d89e8 <__aeabi_dmul>
   d9cb2:	4680      	mov	r8, r0
   d9cb4:	4689      	mov	r9, r1
   d9cb6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d9cba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   d9cbe:	931b      	str	r3, [sp, #108]	; 0x6c
   d9cc0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   d9cc4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9cc8:	e79b      	b.n	d9c02 <_strtod_l+0x9b2>
   d9cca:	f1ba 0f01 	cmp.w	sl, #1
   d9cce:	d102      	bne.n	d9cd6 <_strtod_l+0xa86>
   d9cd0:	2f00      	cmp	r7, #0
   d9cd2:	f43f ad7e 	beq.w	d97d2 <_strtod_l+0x582>
   d9cd6:	4b61      	ldr	r3, [pc, #388]	; (d9e5c <_strtod_l+0xc0c>)
   d9cd8:	2200      	movs	r2, #0
   d9cda:	e78c      	b.n	d9bf6 <_strtod_l+0x9a6>
   d9cdc:	f8df 9178 	ldr.w	r9, [pc, #376]	; d9e58 <_strtod_l+0xc08>
   d9ce0:	f04f 0800 	mov.w	r8, #0
   d9ce4:	e7e7      	b.n	d9cb6 <_strtod_l+0xa66>
   d9ce6:	4b5c      	ldr	r3, [pc, #368]	; (d9e58 <_strtod_l+0xc08>)
   d9ce8:	4640      	mov	r0, r8
   d9cea:	4649      	mov	r1, r9
   d9cec:	2200      	movs	r2, #0
   d9cee:	f7fe fe7b 	bl	d89e8 <__aeabi_dmul>
   d9cf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9cf4:	4680      	mov	r8, r0
   d9cf6:	4689      	mov	r9, r1
   d9cf8:	b933      	cbnz	r3, d9d08 <_strtod_l+0xab8>
   d9cfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9cfe:	9012      	str	r0, [sp, #72]	; 0x48
   d9d00:	9313      	str	r3, [sp, #76]	; 0x4c
   d9d02:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d9d06:	e7dd      	b.n	d9cc4 <_strtod_l+0xa74>
   d9d08:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   d9d0c:	e7f9      	b.n	d9d02 <_strtod_l+0xab2>
   d9d0e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   d9d12:	9b04      	ldr	r3, [sp, #16]
   d9d14:	2b00      	cmp	r3, #0
   d9d16:	d1a8      	bne.n	d9c6a <_strtod_l+0xa1a>
   d9d18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9d1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9d1e:	0d1b      	lsrs	r3, r3, #20
   d9d20:	051b      	lsls	r3, r3, #20
   d9d22:	429a      	cmp	r2, r3
   d9d24:	d1a1      	bne.n	d9c6a <_strtod_l+0xa1a>
   d9d26:	4640      	mov	r0, r8
   d9d28:	4649      	mov	r1, r9
   d9d2a:	f001 f8ff 	bl	daf2c <__aeabi_d2lz>
   d9d2e:	f7fe fe2d 	bl	d898c <__aeabi_l2d>
   d9d32:	4602      	mov	r2, r0
   d9d34:	460b      	mov	r3, r1
   d9d36:	4640      	mov	r0, r8
   d9d38:	4649      	mov	r1, r9
   d9d3a:	f7fe fc9d 	bl	d8678 <__aeabi_dsub>
   d9d3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d9d40:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9d44:	ea43 030a 	orr.w	r3, r3, sl
   d9d48:	4313      	orrs	r3, r2
   d9d4a:	4680      	mov	r8, r0
   d9d4c:	4689      	mov	r9, r1
   d9d4e:	d053      	beq.n	d9df8 <_strtod_l+0xba8>
   d9d50:	a335      	add	r3, pc, #212	; (adr r3, d9e28 <_strtod_l+0xbd8>)
   d9d52:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9d56:	f7ff f8b9 	bl	d8ecc <__aeabi_dcmplt>
   d9d5a:	2800      	cmp	r0, #0
   d9d5c:	f47f acce 	bne.w	d96fc <_strtod_l+0x4ac>
   d9d60:	a333      	add	r3, pc, #204	; (adr r3, d9e30 <_strtod_l+0xbe0>)
   d9d62:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9d66:	4640      	mov	r0, r8
   d9d68:	4649      	mov	r1, r9
   d9d6a:	f7ff f8cd 	bl	d8f08 <__aeabi_dcmpgt>
   d9d6e:	2800      	cmp	r0, #0
   d9d70:	f43f af7b 	beq.w	d9c6a <_strtod_l+0xa1a>
   d9d74:	e4c2      	b.n	d96fc <_strtod_l+0x4ac>
   d9d76:	9b04      	ldr	r3, [sp, #16]
   d9d78:	b333      	cbz	r3, d9dc8 <_strtod_l+0xb78>
   d9d7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d9d7c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9d80:	d822      	bhi.n	d9dc8 <_strtod_l+0xb78>
   d9d82:	a32d      	add	r3, pc, #180	; (adr r3, d9e38 <_strtod_l+0xbe8>)
   d9d84:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9d88:	4640      	mov	r0, r8
   d9d8a:	4649      	mov	r1, r9
   d9d8c:	f7ff f8a8 	bl	d8ee0 <__aeabi_dcmple>
   d9d90:	b1a0      	cbz	r0, d9dbc <_strtod_l+0xb6c>
   d9d92:	4649      	mov	r1, r9
   d9d94:	4640      	mov	r0, r8
   d9d96:	f7ff f8e9 	bl	d8f6c <__aeabi_d2uiz>
   d9d9a:	2801      	cmp	r0, #1
   d9d9c:	bf38      	it	cc
   d9d9e:	2001      	movcc	r0, #1
   d9da0:	f7fe fda8 	bl	d88f4 <__aeabi_ui2d>
   d9da4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9da6:	4680      	mov	r8, r0
   d9da8:	4689      	mov	r9, r1
   d9daa:	bb13      	cbnz	r3, d9df2 <_strtod_l+0xba2>
   d9dac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9db0:	9014      	str	r0, [sp, #80]	; 0x50
   d9db2:	9315      	str	r3, [sp, #84]	; 0x54
   d9db4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   d9db8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9dbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d9dbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9dc0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   d9dc4:	1a9b      	subs	r3, r3, r2
   d9dc6:	930d      	str	r3, [sp, #52]	; 0x34
   d9dc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9dcc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   d9dd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d9dd4:	f000 ff42 	bl	dac5c <__ulp>
   d9dd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9ddc:	ec53 2b10 	vmov	r2, r3, d0
   d9de0:	f7fe fe02 	bl	d89e8 <__aeabi_dmul>
   d9de4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9de8:	f7fe fc48 	bl	d867c <__adddf3>
   d9dec:	4682      	mov	sl, r0
   d9dee:	468b      	mov	fp, r1
   d9df0:	e78f      	b.n	d9d12 <_strtod_l+0xac2>
   d9df2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   d9df6:	e7dd      	b.n	d9db4 <_strtod_l+0xb64>
   d9df8:	a311      	add	r3, pc, #68	; (adr r3, d9e40 <_strtod_l+0xbf0>)
   d9dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9dfe:	f7ff f865 	bl	d8ecc <__aeabi_dcmplt>
   d9e02:	e7b4      	b.n	d9d6e <_strtod_l+0xb1e>
   d9e04:	2300      	movs	r3, #0
   d9e06:	930e      	str	r3, [sp, #56]	; 0x38
   d9e08:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d9e0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9e0c:	6013      	str	r3, [r2, #0]
   d9e0e:	f7ff ba65 	b.w	d92dc <_strtod_l+0x8c>
   d9e12:	2b65      	cmp	r3, #101	; 0x65
   d9e14:	f43f ab5d 	beq.w	d94d2 <_strtod_l+0x282>
   d9e18:	2b45      	cmp	r3, #69	; 0x45
   d9e1a:	f43f ab5a 	beq.w	d94d2 <_strtod_l+0x282>
   d9e1e:	2201      	movs	r2, #1
   d9e20:	f7ff bb92 	b.w	d9548 <_strtod_l+0x2f8>
   d9e24:	f3af 8000 	nop.w
   d9e28:	94a03595 	.word	0x94a03595
   d9e2c:	3fdfffff 	.word	0x3fdfffff
   d9e30:	35afe535 	.word	0x35afe535
   d9e34:	3fe00000 	.word	0x3fe00000
   d9e38:	ffc00000 	.word	0xffc00000
   d9e3c:	41dfffff 	.word	0x41dfffff
   d9e40:	94a03595 	.word	0x94a03595
   d9e44:	3fcfffff 	.word	0x3fcfffff
   d9e48:	3ff00000 	.word	0x3ff00000
   d9e4c:	7ff00000 	.word	0x7ff00000
   d9e50:	7fe00000 	.word	0x7fe00000
   d9e54:	7c9fffff 	.word	0x7c9fffff
   d9e58:	3fe00000 	.word	0x3fe00000
   d9e5c:	bff00000 	.word	0xbff00000
   d9e60:	7fefffff 	.word	0x7fefffff

000d9e64 <strtod>:
   d9e64:	460a      	mov	r2, r1
   d9e66:	4601      	mov	r1, r0
   d9e68:	4802      	ldr	r0, [pc, #8]	; (d9e74 <strtod+0x10>)
   d9e6a:	4b03      	ldr	r3, [pc, #12]	; (d9e78 <strtod+0x14>)
   d9e6c:	6800      	ldr	r0, [r0, #0]
   d9e6e:	f7ff b9ef 	b.w	d9250 <_strtod_l>
   d9e72:	bf00      	nop
   d9e74:	200353f8 	.word	0x200353f8
   d9e78:	20035460 	.word	0x20035460

000d9e7c <_strtol_l.isra.0>:
   d9e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9e80:	4e3a      	ldr	r6, [pc, #232]	; (d9f6c <_strtol_l.isra.0+0xf0>)
   d9e82:	4686      	mov	lr, r0
   d9e84:	468c      	mov	ip, r1
   d9e86:	4660      	mov	r0, ip
   d9e88:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9e8c:	5da5      	ldrb	r5, [r4, r6]
   d9e8e:	f015 0508 	ands.w	r5, r5, #8
   d9e92:	d1f8      	bne.n	d9e86 <_strtol_l.isra.0+0xa>
   d9e94:	2c2d      	cmp	r4, #45	; 0x2d
   d9e96:	d133      	bne.n	d9f00 <_strtol_l.isra.0+0x84>
   d9e98:	f89c 4000 	ldrb.w	r4, [ip]
   d9e9c:	f04f 0801 	mov.w	r8, #1
   d9ea0:	f100 0c02 	add.w	ip, r0, #2
   d9ea4:	2b00      	cmp	r3, #0
   d9ea6:	d05c      	beq.n	d9f62 <_strtol_l.isra.0+0xe6>
   d9ea8:	2b10      	cmp	r3, #16
   d9eaa:	d10c      	bne.n	d9ec6 <_strtol_l.isra.0+0x4a>
   d9eac:	2c30      	cmp	r4, #48	; 0x30
   d9eae:	d10a      	bne.n	d9ec6 <_strtol_l.isra.0+0x4a>
   d9eb0:	f89c 0000 	ldrb.w	r0, [ip]
   d9eb4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9eb8:	2858      	cmp	r0, #88	; 0x58
   d9eba:	d14d      	bne.n	d9f58 <_strtol_l.isra.0+0xdc>
   d9ebc:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d9ec0:	2310      	movs	r3, #16
   d9ec2:	f10c 0c02 	add.w	ip, ip, #2
   d9ec6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d9eca:	3f01      	subs	r7, #1
   d9ecc:	2600      	movs	r6, #0
   d9ece:	fbb7 f9f3 	udiv	r9, r7, r3
   d9ed2:	4630      	mov	r0, r6
   d9ed4:	fb03 7a19 	mls	sl, r3, r9, r7
   d9ed8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d9edc:	2d09      	cmp	r5, #9
   d9ede:	d818      	bhi.n	d9f12 <_strtol_l.isra.0+0x96>
   d9ee0:	462c      	mov	r4, r5
   d9ee2:	42a3      	cmp	r3, r4
   d9ee4:	dd24      	ble.n	d9f30 <_strtol_l.isra.0+0xb4>
   d9ee6:	1c75      	adds	r5, r6, #1
   d9ee8:	d007      	beq.n	d9efa <_strtol_l.isra.0+0x7e>
   d9eea:	4581      	cmp	r9, r0
   d9eec:	d31d      	bcc.n	d9f2a <_strtol_l.isra.0+0xae>
   d9eee:	d101      	bne.n	d9ef4 <_strtol_l.isra.0+0x78>
   d9ef0:	45a2      	cmp	sl, r4
   d9ef2:	db1a      	blt.n	d9f2a <_strtol_l.isra.0+0xae>
   d9ef4:	fb00 4003 	mla	r0, r0, r3, r4
   d9ef8:	2601      	movs	r6, #1
   d9efa:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9efe:	e7eb      	b.n	d9ed8 <_strtol_l.isra.0+0x5c>
   d9f00:	2c2b      	cmp	r4, #43	; 0x2b
   d9f02:	bf08      	it	eq
   d9f04:	f89c 4000 	ldrbeq.w	r4, [ip]
   d9f08:	46a8      	mov	r8, r5
   d9f0a:	bf08      	it	eq
   d9f0c:	f100 0c02 	addeq.w	ip, r0, #2
   d9f10:	e7c8      	b.n	d9ea4 <_strtol_l.isra.0+0x28>
   d9f12:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d9f16:	2d19      	cmp	r5, #25
   d9f18:	d801      	bhi.n	d9f1e <_strtol_l.isra.0+0xa2>
   d9f1a:	3c37      	subs	r4, #55	; 0x37
   d9f1c:	e7e1      	b.n	d9ee2 <_strtol_l.isra.0+0x66>
   d9f1e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d9f22:	2d19      	cmp	r5, #25
   d9f24:	d804      	bhi.n	d9f30 <_strtol_l.isra.0+0xb4>
   d9f26:	3c57      	subs	r4, #87	; 0x57
   d9f28:	e7db      	b.n	d9ee2 <_strtol_l.isra.0+0x66>
   d9f2a:	f04f 36ff 	mov.w	r6, #4294967295
   d9f2e:	e7e4      	b.n	d9efa <_strtol_l.isra.0+0x7e>
   d9f30:	1c73      	adds	r3, r6, #1
   d9f32:	d106      	bne.n	d9f42 <_strtol_l.isra.0+0xc6>
   d9f34:	2322      	movs	r3, #34	; 0x22
   d9f36:	f8ce 3000 	str.w	r3, [lr]
   d9f3a:	4638      	mov	r0, r7
   d9f3c:	b942      	cbnz	r2, d9f50 <_strtol_l.isra.0+0xd4>
   d9f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9f42:	f1b8 0f00 	cmp.w	r8, #0
   d9f46:	d000      	beq.n	d9f4a <_strtol_l.isra.0+0xce>
   d9f48:	4240      	negs	r0, r0
   d9f4a:	2a00      	cmp	r2, #0
   d9f4c:	d0f7      	beq.n	d9f3e <_strtol_l.isra.0+0xc2>
   d9f4e:	b10e      	cbz	r6, d9f54 <_strtol_l.isra.0+0xd8>
   d9f50:	f10c 31ff 	add.w	r1, ip, #4294967295
   d9f54:	6011      	str	r1, [r2, #0]
   d9f56:	e7f2      	b.n	d9f3e <_strtol_l.isra.0+0xc2>
   d9f58:	2430      	movs	r4, #48	; 0x30
   d9f5a:	2b00      	cmp	r3, #0
   d9f5c:	d1b3      	bne.n	d9ec6 <_strtol_l.isra.0+0x4a>
   d9f5e:	2308      	movs	r3, #8
   d9f60:	e7b1      	b.n	d9ec6 <_strtol_l.isra.0+0x4a>
   d9f62:	2c30      	cmp	r4, #48	; 0x30
   d9f64:	d0a4      	beq.n	d9eb0 <_strtol_l.isra.0+0x34>
   d9f66:	230a      	movs	r3, #10
   d9f68:	e7ad      	b.n	d9ec6 <_strtol_l.isra.0+0x4a>
   d9f6a:	bf00      	nop
   d9f6c:	000db769 	.word	0x000db769

000d9f70 <strtol>:
   d9f70:	4613      	mov	r3, r2
   d9f72:	460a      	mov	r2, r1
   d9f74:	4601      	mov	r1, r0
   d9f76:	4802      	ldr	r0, [pc, #8]	; (d9f80 <strtol+0x10>)
   d9f78:	6800      	ldr	r0, [r0, #0]
   d9f7a:	f7ff bf7f 	b.w	d9e7c <_strtol_l.isra.0>
   d9f7e:	bf00      	nop
   d9f80:	200353f8 	.word	0x200353f8

000d9f84 <rshift>:
   d9f84:	6903      	ldr	r3, [r0, #16]
   d9f86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   d9f8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9f8e:	ea4f 1261 	mov.w	r2, r1, asr #5
   d9f92:	f100 0414 	add.w	r4, r0, #20
   d9f96:	dd45      	ble.n	da024 <rshift+0xa0>
   d9f98:	f011 011f 	ands.w	r1, r1, #31
   d9f9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   d9fa0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   d9fa4:	d10c      	bne.n	d9fc0 <rshift+0x3c>
   d9fa6:	f100 0710 	add.w	r7, r0, #16
   d9faa:	4629      	mov	r1, r5
   d9fac:	42b1      	cmp	r1, r6
   d9fae:	d334      	bcc.n	da01a <rshift+0x96>
   d9fb0:	1a9b      	subs	r3, r3, r2
   d9fb2:	009b      	lsls	r3, r3, #2
   d9fb4:	1eea      	subs	r2, r5, #3
   d9fb6:	4296      	cmp	r6, r2
   d9fb8:	bf38      	it	cc
   d9fba:	2300      	movcc	r3, #0
   d9fbc:	4423      	add	r3, r4
   d9fbe:	e015      	b.n	d9fec <rshift+0x68>
   d9fc0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   d9fc4:	f1c1 0820 	rsb	r8, r1, #32
   d9fc8:	40cf      	lsrs	r7, r1
   d9fca:	f105 0e04 	add.w	lr, r5, #4
   d9fce:	46a1      	mov	r9, r4
   d9fd0:	4576      	cmp	r6, lr
   d9fd2:	46f4      	mov	ip, lr
   d9fd4:	d815      	bhi.n	da002 <rshift+0x7e>
   d9fd6:	1a9b      	subs	r3, r3, r2
   d9fd8:	009a      	lsls	r2, r3, #2
   d9fda:	3a04      	subs	r2, #4
   d9fdc:	3501      	adds	r5, #1
   d9fde:	42ae      	cmp	r6, r5
   d9fe0:	bf38      	it	cc
   d9fe2:	2200      	movcc	r2, #0
   d9fe4:	18a3      	adds	r3, r4, r2
   d9fe6:	50a7      	str	r7, [r4, r2]
   d9fe8:	b107      	cbz	r7, d9fec <rshift+0x68>
   d9fea:	3304      	adds	r3, #4
   d9fec:	1b1a      	subs	r2, r3, r4
   d9fee:	42a3      	cmp	r3, r4
   d9ff0:	ea4f 02a2 	mov.w	r2, r2, asr #2
   d9ff4:	bf08      	it	eq
   d9ff6:	2300      	moveq	r3, #0
   d9ff8:	6102      	str	r2, [r0, #16]
   d9ffa:	bf08      	it	eq
   d9ffc:	6143      	streq	r3, [r0, #20]
   d9ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da002:	f8dc c000 	ldr.w	ip, [ip]
   da006:	fa0c fc08 	lsl.w	ip, ip, r8
   da00a:	ea4c 0707 	orr.w	r7, ip, r7
   da00e:	f849 7b04 	str.w	r7, [r9], #4
   da012:	f85e 7b04 	ldr.w	r7, [lr], #4
   da016:	40cf      	lsrs	r7, r1
   da018:	e7da      	b.n	d9fd0 <rshift+0x4c>
   da01a:	f851 cb04 	ldr.w	ip, [r1], #4
   da01e:	f847 cf04 	str.w	ip, [r7, #4]!
   da022:	e7c3      	b.n	d9fac <rshift+0x28>
   da024:	4623      	mov	r3, r4
   da026:	e7e1      	b.n	d9fec <rshift+0x68>

000da028 <__hexdig_fun>:
   da028:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   da02c:	2b09      	cmp	r3, #9
   da02e:	d802      	bhi.n	da036 <__hexdig_fun+0xe>
   da030:	3820      	subs	r0, #32
   da032:	b2c0      	uxtb	r0, r0
   da034:	4770      	bx	lr
   da036:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   da03a:	2b05      	cmp	r3, #5
   da03c:	d801      	bhi.n	da042 <__hexdig_fun+0x1a>
   da03e:	3847      	subs	r0, #71	; 0x47
   da040:	e7f7      	b.n	da032 <__hexdig_fun+0xa>
   da042:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   da046:	2b05      	cmp	r3, #5
   da048:	d801      	bhi.n	da04e <__hexdig_fun+0x26>
   da04a:	3827      	subs	r0, #39	; 0x27
   da04c:	e7f1      	b.n	da032 <__hexdig_fun+0xa>
   da04e:	2000      	movs	r0, #0
   da050:	4770      	bx	lr
	...

000da054 <__gethex>:
   da054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da058:	ed2d 8b02 	vpush	{d8}
   da05c:	b089      	sub	sp, #36	; 0x24
   da05e:	ee08 0a10 	vmov	s16, r0
   da062:	9304      	str	r3, [sp, #16]
   da064:	4bbc      	ldr	r3, [pc, #752]	; (da358 <__gethex+0x304>)
   da066:	681b      	ldr	r3, [r3, #0]
   da068:	9301      	str	r3, [sp, #4]
   da06a:	4618      	mov	r0, r3
   da06c:	468b      	mov	fp, r1
   da06e:	4690      	mov	r8, r2
   da070:	f7ff f894 	bl	d919c <strlen>
   da074:	9b01      	ldr	r3, [sp, #4]
   da076:	f8db 2000 	ldr.w	r2, [fp]
   da07a:	4403      	add	r3, r0
   da07c:	4682      	mov	sl, r0
   da07e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   da082:	9305      	str	r3, [sp, #20]
   da084:	1c93      	adds	r3, r2, #2
   da086:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   da08a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   da08e:	32fe      	adds	r2, #254	; 0xfe
   da090:	18d1      	adds	r1, r2, r3
   da092:	461f      	mov	r7, r3
   da094:	f813 0b01 	ldrb.w	r0, [r3], #1
   da098:	9100      	str	r1, [sp, #0]
   da09a:	2830      	cmp	r0, #48	; 0x30
   da09c:	d0f8      	beq.n	da090 <__gethex+0x3c>
   da09e:	f7ff ffc3 	bl	da028 <__hexdig_fun>
   da0a2:	4604      	mov	r4, r0
   da0a4:	2800      	cmp	r0, #0
   da0a6:	d13a      	bne.n	da11e <__gethex+0xca>
   da0a8:	9901      	ldr	r1, [sp, #4]
   da0aa:	4652      	mov	r2, sl
   da0ac:	4638      	mov	r0, r7
   da0ae:	f7ff f87d 	bl	d91ac <strncmp>
   da0b2:	4605      	mov	r5, r0
   da0b4:	2800      	cmp	r0, #0
   da0b6:	d168      	bne.n	da18a <__gethex+0x136>
   da0b8:	f817 000a 	ldrb.w	r0, [r7, sl]
   da0bc:	eb07 060a 	add.w	r6, r7, sl
   da0c0:	f7ff ffb2 	bl	da028 <__hexdig_fun>
   da0c4:	2800      	cmp	r0, #0
   da0c6:	d062      	beq.n	da18e <__gethex+0x13a>
   da0c8:	4633      	mov	r3, r6
   da0ca:	7818      	ldrb	r0, [r3, #0]
   da0cc:	2830      	cmp	r0, #48	; 0x30
   da0ce:	461f      	mov	r7, r3
   da0d0:	f103 0301 	add.w	r3, r3, #1
   da0d4:	d0f9      	beq.n	da0ca <__gethex+0x76>
   da0d6:	f7ff ffa7 	bl	da028 <__hexdig_fun>
   da0da:	2301      	movs	r3, #1
   da0dc:	fab0 f480 	clz	r4, r0
   da0e0:	0964      	lsrs	r4, r4, #5
   da0e2:	4635      	mov	r5, r6
   da0e4:	9300      	str	r3, [sp, #0]
   da0e6:	463a      	mov	r2, r7
   da0e8:	4616      	mov	r6, r2
   da0ea:	3201      	adds	r2, #1
   da0ec:	7830      	ldrb	r0, [r6, #0]
   da0ee:	f7ff ff9b 	bl	da028 <__hexdig_fun>
   da0f2:	2800      	cmp	r0, #0
   da0f4:	d1f8      	bne.n	da0e8 <__gethex+0x94>
   da0f6:	9901      	ldr	r1, [sp, #4]
   da0f8:	4652      	mov	r2, sl
   da0fa:	4630      	mov	r0, r6
   da0fc:	f7ff f856 	bl	d91ac <strncmp>
   da100:	b980      	cbnz	r0, da124 <__gethex+0xd0>
   da102:	b94d      	cbnz	r5, da118 <__gethex+0xc4>
   da104:	eb06 050a 	add.w	r5, r6, sl
   da108:	462a      	mov	r2, r5
   da10a:	4616      	mov	r6, r2
   da10c:	3201      	adds	r2, #1
   da10e:	7830      	ldrb	r0, [r6, #0]
   da110:	f7ff ff8a 	bl	da028 <__hexdig_fun>
   da114:	2800      	cmp	r0, #0
   da116:	d1f8      	bne.n	da10a <__gethex+0xb6>
   da118:	1bad      	subs	r5, r5, r6
   da11a:	00ad      	lsls	r5, r5, #2
   da11c:	e004      	b.n	da128 <__gethex+0xd4>
   da11e:	2400      	movs	r4, #0
   da120:	4625      	mov	r5, r4
   da122:	e7e0      	b.n	da0e6 <__gethex+0x92>
   da124:	2d00      	cmp	r5, #0
   da126:	d1f7      	bne.n	da118 <__gethex+0xc4>
   da128:	7833      	ldrb	r3, [r6, #0]
   da12a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   da12e:	2b50      	cmp	r3, #80	; 0x50
   da130:	d13b      	bne.n	da1aa <__gethex+0x156>
   da132:	7873      	ldrb	r3, [r6, #1]
   da134:	2b2b      	cmp	r3, #43	; 0x2b
   da136:	d02c      	beq.n	da192 <__gethex+0x13e>
   da138:	2b2d      	cmp	r3, #45	; 0x2d
   da13a:	d02e      	beq.n	da19a <__gethex+0x146>
   da13c:	1c71      	adds	r1, r6, #1
   da13e:	f04f 0900 	mov.w	r9, #0
   da142:	7808      	ldrb	r0, [r1, #0]
   da144:	f7ff ff70 	bl	da028 <__hexdig_fun>
   da148:	1e43      	subs	r3, r0, #1
   da14a:	b2db      	uxtb	r3, r3
   da14c:	2b18      	cmp	r3, #24
   da14e:	d82c      	bhi.n	da1aa <__gethex+0x156>
   da150:	f1a0 0210 	sub.w	r2, r0, #16
   da154:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   da158:	f7ff ff66 	bl	da028 <__hexdig_fun>
   da15c:	1e43      	subs	r3, r0, #1
   da15e:	b2db      	uxtb	r3, r3
   da160:	2b18      	cmp	r3, #24
   da162:	d91d      	bls.n	da1a0 <__gethex+0x14c>
   da164:	f1b9 0f00 	cmp.w	r9, #0
   da168:	d000      	beq.n	da16c <__gethex+0x118>
   da16a:	4252      	negs	r2, r2
   da16c:	4415      	add	r5, r2
   da16e:	f8cb 1000 	str.w	r1, [fp]
   da172:	b1e4      	cbz	r4, da1ae <__gethex+0x15a>
   da174:	9b00      	ldr	r3, [sp, #0]
   da176:	2b00      	cmp	r3, #0
   da178:	bf14      	ite	ne
   da17a:	2700      	movne	r7, #0
   da17c:	2706      	moveq	r7, #6
   da17e:	4638      	mov	r0, r7
   da180:	b009      	add	sp, #36	; 0x24
   da182:	ecbd 8b02 	vpop	{d8}
   da186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da18a:	463e      	mov	r6, r7
   da18c:	4625      	mov	r5, r4
   da18e:	2401      	movs	r4, #1
   da190:	e7ca      	b.n	da128 <__gethex+0xd4>
   da192:	f04f 0900 	mov.w	r9, #0
   da196:	1cb1      	adds	r1, r6, #2
   da198:	e7d3      	b.n	da142 <__gethex+0xee>
   da19a:	f04f 0901 	mov.w	r9, #1
   da19e:	e7fa      	b.n	da196 <__gethex+0x142>
   da1a0:	230a      	movs	r3, #10
   da1a2:	fb03 0202 	mla	r2, r3, r2, r0
   da1a6:	3a10      	subs	r2, #16
   da1a8:	e7d4      	b.n	da154 <__gethex+0x100>
   da1aa:	4631      	mov	r1, r6
   da1ac:	e7df      	b.n	da16e <__gethex+0x11a>
   da1ae:	1bf3      	subs	r3, r6, r7
   da1b0:	3b01      	subs	r3, #1
   da1b2:	4621      	mov	r1, r4
   da1b4:	2b07      	cmp	r3, #7
   da1b6:	dc52      	bgt.n	da25e <__gethex+0x20a>
   da1b8:	ee18 0a10 	vmov	r0, s16
   da1bc:	f000 fa52 	bl	da664 <_Balloc>
   da1c0:	f04f 0b00 	mov.w	fp, #0
   da1c4:	f100 0914 	add.w	r9, r0, #20
   da1c8:	f1ca 0301 	rsb	r3, sl, #1
   da1cc:	4604      	mov	r4, r0
   da1ce:	f8cd 9008 	str.w	r9, [sp, #8]
   da1d2:	f8cd b000 	str.w	fp, [sp]
   da1d6:	9306      	str	r3, [sp, #24]
   da1d8:	42b7      	cmp	r7, r6
   da1da:	d343      	bcc.n	da264 <__gethex+0x210>
   da1dc:	9802      	ldr	r0, [sp, #8]
   da1de:	9b00      	ldr	r3, [sp, #0]
   da1e0:	f840 3b04 	str.w	r3, [r0], #4
   da1e4:	eba0 0009 	sub.w	r0, r0, r9
   da1e8:	1080      	asrs	r0, r0, #2
   da1ea:	0146      	lsls	r6, r0, #5
   da1ec:	6120      	str	r0, [r4, #16]
   da1ee:	4618      	mov	r0, r3
   da1f0:	f000 faff 	bl	da7f2 <__hi0bits>
   da1f4:	1a30      	subs	r0, r6, r0
   da1f6:	f8d8 6000 	ldr.w	r6, [r8]
   da1fa:	42b0      	cmp	r0, r6
   da1fc:	dd66      	ble.n	da2cc <__gethex+0x278>
   da1fe:	1b87      	subs	r7, r0, r6
   da200:	4639      	mov	r1, r7
   da202:	4620      	mov	r0, r4
   da204:	f000 fe4c 	bl	daea0 <__any_on>
   da208:	4682      	mov	sl, r0
   da20a:	b1a8      	cbz	r0, da238 <__gethex+0x1e4>
   da20c:	1e7b      	subs	r3, r7, #1
   da20e:	1159      	asrs	r1, r3, #5
   da210:	f003 021f 	and.w	r2, r3, #31
   da214:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   da218:	f04f 0a01 	mov.w	sl, #1
   da21c:	fa0a f202 	lsl.w	r2, sl, r2
   da220:	420a      	tst	r2, r1
   da222:	d009      	beq.n	da238 <__gethex+0x1e4>
   da224:	4553      	cmp	r3, sl
   da226:	dd05      	ble.n	da234 <__gethex+0x1e0>
   da228:	1eb9      	subs	r1, r7, #2
   da22a:	4620      	mov	r0, r4
   da22c:	f000 fe38 	bl	daea0 <__any_on>
   da230:	2800      	cmp	r0, #0
   da232:	d148      	bne.n	da2c6 <__gethex+0x272>
   da234:	f04f 0a02 	mov.w	sl, #2
   da238:	4639      	mov	r1, r7
   da23a:	4620      	mov	r0, r4
   da23c:	f7ff fea2 	bl	d9f84 <rshift>
   da240:	443d      	add	r5, r7
   da242:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da246:	42ab      	cmp	r3, r5
   da248:	da4f      	bge.n	da2ea <__gethex+0x296>
   da24a:	ee18 0a10 	vmov	r0, s16
   da24e:	4621      	mov	r1, r4
   da250:	f000 fa3c 	bl	da6cc <_Bfree>
   da254:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da256:	2300      	movs	r3, #0
   da258:	6013      	str	r3, [r2, #0]
   da25a:	27a3      	movs	r7, #163	; 0xa3
   da25c:	e78f      	b.n	da17e <__gethex+0x12a>
   da25e:	3101      	adds	r1, #1
   da260:	105b      	asrs	r3, r3, #1
   da262:	e7a7      	b.n	da1b4 <__gethex+0x160>
   da264:	1e73      	subs	r3, r6, #1
   da266:	9a05      	ldr	r2, [sp, #20]
   da268:	9303      	str	r3, [sp, #12]
   da26a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   da26e:	4293      	cmp	r3, r2
   da270:	d019      	beq.n	da2a6 <__gethex+0x252>
   da272:	f1bb 0f20 	cmp.w	fp, #32
   da276:	d107      	bne.n	da288 <__gethex+0x234>
   da278:	9b02      	ldr	r3, [sp, #8]
   da27a:	9a00      	ldr	r2, [sp, #0]
   da27c:	f843 2b04 	str.w	r2, [r3], #4
   da280:	9302      	str	r3, [sp, #8]
   da282:	2300      	movs	r3, #0
   da284:	9300      	str	r3, [sp, #0]
   da286:	469b      	mov	fp, r3
   da288:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   da28c:	f7ff fecc 	bl	da028 <__hexdig_fun>
   da290:	9b00      	ldr	r3, [sp, #0]
   da292:	f000 000f 	and.w	r0, r0, #15
   da296:	fa00 f00b 	lsl.w	r0, r0, fp
   da29a:	4303      	orrs	r3, r0
   da29c:	9300      	str	r3, [sp, #0]
   da29e:	f10b 0b04 	add.w	fp, fp, #4
   da2a2:	9b03      	ldr	r3, [sp, #12]
   da2a4:	e00d      	b.n	da2c2 <__gethex+0x26e>
   da2a6:	9b03      	ldr	r3, [sp, #12]
   da2a8:	9a06      	ldr	r2, [sp, #24]
   da2aa:	4413      	add	r3, r2
   da2ac:	42bb      	cmp	r3, r7
   da2ae:	d3e0      	bcc.n	da272 <__gethex+0x21e>
   da2b0:	4618      	mov	r0, r3
   da2b2:	9901      	ldr	r1, [sp, #4]
   da2b4:	9307      	str	r3, [sp, #28]
   da2b6:	4652      	mov	r2, sl
   da2b8:	f7fe ff78 	bl	d91ac <strncmp>
   da2bc:	9b07      	ldr	r3, [sp, #28]
   da2be:	2800      	cmp	r0, #0
   da2c0:	d1d7      	bne.n	da272 <__gethex+0x21e>
   da2c2:	461e      	mov	r6, r3
   da2c4:	e788      	b.n	da1d8 <__gethex+0x184>
   da2c6:	f04f 0a03 	mov.w	sl, #3
   da2ca:	e7b5      	b.n	da238 <__gethex+0x1e4>
   da2cc:	da0a      	bge.n	da2e4 <__gethex+0x290>
   da2ce:	1a37      	subs	r7, r6, r0
   da2d0:	4621      	mov	r1, r4
   da2d2:	ee18 0a10 	vmov	r0, s16
   da2d6:	463a      	mov	r2, r7
   da2d8:	f000 fbce 	bl	daa78 <__lshift>
   da2dc:	1bed      	subs	r5, r5, r7
   da2de:	4604      	mov	r4, r0
   da2e0:	f100 0914 	add.w	r9, r0, #20
   da2e4:	f04f 0a00 	mov.w	sl, #0
   da2e8:	e7ab      	b.n	da242 <__gethex+0x1ee>
   da2ea:	f8d8 0004 	ldr.w	r0, [r8, #4]
   da2ee:	42a8      	cmp	r0, r5
   da2f0:	dd6d      	ble.n	da3ce <__gethex+0x37a>
   da2f2:	1b45      	subs	r5, r0, r5
   da2f4:	42ae      	cmp	r6, r5
   da2f6:	dc31      	bgt.n	da35c <__gethex+0x308>
   da2f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
   da2fc:	2b02      	cmp	r3, #2
   da2fe:	d023      	beq.n	da348 <__gethex+0x2f4>
   da300:	2b03      	cmp	r3, #3
   da302:	d025      	beq.n	da350 <__gethex+0x2fc>
   da304:	2b01      	cmp	r3, #1
   da306:	d115      	bne.n	da334 <__gethex+0x2e0>
   da308:	42ae      	cmp	r6, r5
   da30a:	d113      	bne.n	da334 <__gethex+0x2e0>
   da30c:	2e01      	cmp	r6, #1
   da30e:	d10b      	bne.n	da328 <__gethex+0x2d4>
   da310:	9a04      	ldr	r2, [sp, #16]
   da312:	f8d8 3004 	ldr.w	r3, [r8, #4]
   da316:	6013      	str	r3, [r2, #0]
   da318:	2301      	movs	r3, #1
   da31a:	6123      	str	r3, [r4, #16]
   da31c:	f8c9 3000 	str.w	r3, [r9]
   da320:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da322:	2762      	movs	r7, #98	; 0x62
   da324:	601c      	str	r4, [r3, #0]
   da326:	e72a      	b.n	da17e <__gethex+0x12a>
   da328:	1e71      	subs	r1, r6, #1
   da32a:	4620      	mov	r0, r4
   da32c:	f000 fdb8 	bl	daea0 <__any_on>
   da330:	2800      	cmp	r0, #0
   da332:	d1ed      	bne.n	da310 <__gethex+0x2bc>
   da334:	ee18 0a10 	vmov	r0, s16
   da338:	4621      	mov	r1, r4
   da33a:	f000 f9c7 	bl	da6cc <_Bfree>
   da33e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da340:	2300      	movs	r3, #0
   da342:	6013      	str	r3, [r2, #0]
   da344:	2750      	movs	r7, #80	; 0x50
   da346:	e71a      	b.n	da17e <__gethex+0x12a>
   da348:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da34a:	2b00      	cmp	r3, #0
   da34c:	d1f2      	bne.n	da334 <__gethex+0x2e0>
   da34e:	e7df      	b.n	da310 <__gethex+0x2bc>
   da350:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da352:	2b00      	cmp	r3, #0
   da354:	d1dc      	bne.n	da310 <__gethex+0x2bc>
   da356:	e7ed      	b.n	da334 <__gethex+0x2e0>
   da358:	000db86c 	.word	0x000db86c
   da35c:	1e6f      	subs	r7, r5, #1
   da35e:	f1ba 0f00 	cmp.w	sl, #0
   da362:	d131      	bne.n	da3c8 <__gethex+0x374>
   da364:	b127      	cbz	r7, da370 <__gethex+0x31c>
   da366:	4639      	mov	r1, r7
   da368:	4620      	mov	r0, r4
   da36a:	f000 fd99 	bl	daea0 <__any_on>
   da36e:	4682      	mov	sl, r0
   da370:	117b      	asrs	r3, r7, #5
   da372:	2101      	movs	r1, #1
   da374:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   da378:	f007 071f 	and.w	r7, r7, #31
   da37c:	fa01 f707 	lsl.w	r7, r1, r7
   da380:	421f      	tst	r7, r3
   da382:	4629      	mov	r1, r5
   da384:	4620      	mov	r0, r4
   da386:	bf18      	it	ne
   da388:	f04a 0a02 	orrne.w	sl, sl, #2
   da38c:	1b76      	subs	r6, r6, r5
   da38e:	f7ff fdf9 	bl	d9f84 <rshift>
   da392:	f8d8 5004 	ldr.w	r5, [r8, #4]
   da396:	2702      	movs	r7, #2
   da398:	f1ba 0f00 	cmp.w	sl, #0
   da39c:	d048      	beq.n	da430 <__gethex+0x3dc>
   da39e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   da3a2:	2b02      	cmp	r3, #2
   da3a4:	d015      	beq.n	da3d2 <__gethex+0x37e>
   da3a6:	2b03      	cmp	r3, #3
   da3a8:	d017      	beq.n	da3da <__gethex+0x386>
   da3aa:	2b01      	cmp	r3, #1
   da3ac:	d109      	bne.n	da3c2 <__gethex+0x36e>
   da3ae:	f01a 0f02 	tst.w	sl, #2
   da3b2:	d006      	beq.n	da3c2 <__gethex+0x36e>
   da3b4:	f8d9 0000 	ldr.w	r0, [r9]
   da3b8:	ea4a 0a00 	orr.w	sl, sl, r0
   da3bc:	f01a 0f01 	tst.w	sl, #1
   da3c0:	d10e      	bne.n	da3e0 <__gethex+0x38c>
   da3c2:	f047 0710 	orr.w	r7, r7, #16
   da3c6:	e033      	b.n	da430 <__gethex+0x3dc>
   da3c8:	f04f 0a01 	mov.w	sl, #1
   da3cc:	e7d0      	b.n	da370 <__gethex+0x31c>
   da3ce:	2701      	movs	r7, #1
   da3d0:	e7e2      	b.n	da398 <__gethex+0x344>
   da3d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da3d4:	f1c3 0301 	rsb	r3, r3, #1
   da3d8:	9315      	str	r3, [sp, #84]	; 0x54
   da3da:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da3dc:	2b00      	cmp	r3, #0
   da3de:	d0f0      	beq.n	da3c2 <__gethex+0x36e>
   da3e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   da3e4:	f104 0314 	add.w	r3, r4, #20
   da3e8:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   da3ec:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   da3f0:	f04f 0c00 	mov.w	ip, #0
   da3f4:	4618      	mov	r0, r3
   da3f6:	f853 2b04 	ldr.w	r2, [r3], #4
   da3fa:	f1b2 3fff 	cmp.w	r2, #4294967295
   da3fe:	d01c      	beq.n	da43a <__gethex+0x3e6>
   da400:	3201      	adds	r2, #1
   da402:	6002      	str	r2, [r0, #0]
   da404:	2f02      	cmp	r7, #2
   da406:	f104 0314 	add.w	r3, r4, #20
   da40a:	d13a      	bne.n	da482 <__gethex+0x42e>
   da40c:	f8d8 2000 	ldr.w	r2, [r8]
   da410:	3a01      	subs	r2, #1
   da412:	42b2      	cmp	r2, r6
   da414:	d10a      	bne.n	da42c <__gethex+0x3d8>
   da416:	1171      	asrs	r1, r6, #5
   da418:	2201      	movs	r2, #1
   da41a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   da41e:	f006 061f 	and.w	r6, r6, #31
   da422:	fa02 f606 	lsl.w	r6, r2, r6
   da426:	421e      	tst	r6, r3
   da428:	bf18      	it	ne
   da42a:	4617      	movne	r7, r2
   da42c:	f047 0720 	orr.w	r7, r7, #32
   da430:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da432:	601c      	str	r4, [r3, #0]
   da434:	9b04      	ldr	r3, [sp, #16]
   da436:	601d      	str	r5, [r3, #0]
   da438:	e6a1      	b.n	da17e <__gethex+0x12a>
   da43a:	4299      	cmp	r1, r3
   da43c:	f843 cc04 	str.w	ip, [r3, #-4]
   da440:	d8d8      	bhi.n	da3f4 <__gethex+0x3a0>
   da442:	68a3      	ldr	r3, [r4, #8]
   da444:	4599      	cmp	r9, r3
   da446:	db14      	blt.n	da472 <__gethex+0x41e>
   da448:	6861      	ldr	r1, [r4, #4]
   da44a:	ee18 0a10 	vmov	r0, s16
   da44e:	3101      	adds	r1, #1
   da450:	f000 f908 	bl	da664 <_Balloc>
   da454:	6922      	ldr	r2, [r4, #16]
   da456:	3202      	adds	r2, #2
   da458:	f104 010c 	add.w	r1, r4, #12
   da45c:	4682      	mov	sl, r0
   da45e:	0092      	lsls	r2, r2, #2
   da460:	300c      	adds	r0, #12
   da462:	f7fe fe35 	bl	d90d0 <memcpy>
   da466:	4621      	mov	r1, r4
   da468:	ee18 0a10 	vmov	r0, s16
   da46c:	f000 f92e 	bl	da6cc <_Bfree>
   da470:	4654      	mov	r4, sl
   da472:	6923      	ldr	r3, [r4, #16]
   da474:	1c5a      	adds	r2, r3, #1
   da476:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   da47a:	6122      	str	r2, [r4, #16]
   da47c:	2201      	movs	r2, #1
   da47e:	615a      	str	r2, [r3, #20]
   da480:	e7c0      	b.n	da404 <__gethex+0x3b0>
   da482:	6922      	ldr	r2, [r4, #16]
   da484:	454a      	cmp	r2, r9
   da486:	dd0b      	ble.n	da4a0 <__gethex+0x44c>
   da488:	2101      	movs	r1, #1
   da48a:	4620      	mov	r0, r4
   da48c:	f7ff fd7a 	bl	d9f84 <rshift>
   da490:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da494:	3501      	adds	r5, #1
   da496:	42ab      	cmp	r3, r5
   da498:	f6ff aed7 	blt.w	da24a <__gethex+0x1f6>
   da49c:	2701      	movs	r7, #1
   da49e:	e7c5      	b.n	da42c <__gethex+0x3d8>
   da4a0:	f016 061f 	ands.w	r6, r6, #31
   da4a4:	d0fa      	beq.n	da49c <__gethex+0x448>
   da4a6:	449b      	add	fp, r3
   da4a8:	f1c6 0620 	rsb	r6, r6, #32
   da4ac:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   da4b0:	f000 f99f 	bl	da7f2 <__hi0bits>
   da4b4:	42b0      	cmp	r0, r6
   da4b6:	dbe7      	blt.n	da488 <__gethex+0x434>
   da4b8:	e7f0      	b.n	da49c <__gethex+0x448>
   da4ba:	bf00      	nop

000da4bc <L_shift>:
   da4bc:	f1c2 0208 	rsb	r2, r2, #8
   da4c0:	0092      	lsls	r2, r2, #2
   da4c2:	b570      	push	{r4, r5, r6, lr}
   da4c4:	f1c2 0620 	rsb	r6, r2, #32
   da4c8:	6843      	ldr	r3, [r0, #4]
   da4ca:	6804      	ldr	r4, [r0, #0]
   da4cc:	fa03 f506 	lsl.w	r5, r3, r6
   da4d0:	432c      	orrs	r4, r5
   da4d2:	40d3      	lsrs	r3, r2
   da4d4:	6004      	str	r4, [r0, #0]
   da4d6:	f840 3f04 	str.w	r3, [r0, #4]!
   da4da:	4288      	cmp	r0, r1
   da4dc:	d3f4      	bcc.n	da4c8 <L_shift+0xc>
   da4de:	bd70      	pop	{r4, r5, r6, pc}

000da4e0 <__match>:
   da4e0:	b530      	push	{r4, r5, lr}
   da4e2:	6803      	ldr	r3, [r0, #0]
   da4e4:	3301      	adds	r3, #1
   da4e6:	f811 4b01 	ldrb.w	r4, [r1], #1
   da4ea:	b914      	cbnz	r4, da4f2 <__match+0x12>
   da4ec:	6003      	str	r3, [r0, #0]
   da4ee:	2001      	movs	r0, #1
   da4f0:	bd30      	pop	{r4, r5, pc}
   da4f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   da4f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   da4fa:	2d19      	cmp	r5, #25
   da4fc:	bf98      	it	ls
   da4fe:	3220      	addls	r2, #32
   da500:	42a2      	cmp	r2, r4
   da502:	d0f0      	beq.n	da4e6 <__match+0x6>
   da504:	2000      	movs	r0, #0
   da506:	e7f3      	b.n	da4f0 <__match+0x10>

000da508 <__hexnan>:
   da508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da50c:	680b      	ldr	r3, [r1, #0]
   da50e:	6801      	ldr	r1, [r0, #0]
   da510:	115e      	asrs	r6, r3, #5
   da512:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   da516:	f013 031f 	ands.w	r3, r3, #31
   da51a:	b087      	sub	sp, #28
   da51c:	bf18      	it	ne
   da51e:	3604      	addne	r6, #4
   da520:	2500      	movs	r5, #0
   da522:	1f37      	subs	r7, r6, #4
   da524:	4682      	mov	sl, r0
   da526:	4690      	mov	r8, r2
   da528:	9301      	str	r3, [sp, #4]
   da52a:	f846 5c04 	str.w	r5, [r6, #-4]
   da52e:	46b9      	mov	r9, r7
   da530:	463c      	mov	r4, r7
   da532:	9502      	str	r5, [sp, #8]
   da534:	46ab      	mov	fp, r5
   da536:	784a      	ldrb	r2, [r1, #1]
   da538:	1c4b      	adds	r3, r1, #1
   da53a:	9303      	str	r3, [sp, #12]
   da53c:	b342      	cbz	r2, da590 <__hexnan+0x88>
   da53e:	4610      	mov	r0, r2
   da540:	9105      	str	r1, [sp, #20]
   da542:	9204      	str	r2, [sp, #16]
   da544:	f7ff fd70 	bl	da028 <__hexdig_fun>
   da548:	2800      	cmp	r0, #0
   da54a:	d14f      	bne.n	da5ec <__hexnan+0xe4>
   da54c:	9a04      	ldr	r2, [sp, #16]
   da54e:	9905      	ldr	r1, [sp, #20]
   da550:	2a20      	cmp	r2, #32
   da552:	d818      	bhi.n	da586 <__hexnan+0x7e>
   da554:	9b02      	ldr	r3, [sp, #8]
   da556:	459b      	cmp	fp, r3
   da558:	dd13      	ble.n	da582 <__hexnan+0x7a>
   da55a:	454c      	cmp	r4, r9
   da55c:	d206      	bcs.n	da56c <__hexnan+0x64>
   da55e:	2d07      	cmp	r5, #7
   da560:	dc04      	bgt.n	da56c <__hexnan+0x64>
   da562:	462a      	mov	r2, r5
   da564:	4649      	mov	r1, r9
   da566:	4620      	mov	r0, r4
   da568:	f7ff ffa8 	bl	da4bc <L_shift>
   da56c:	4544      	cmp	r4, r8
   da56e:	d950      	bls.n	da612 <__hexnan+0x10a>
   da570:	2300      	movs	r3, #0
   da572:	f1a4 0904 	sub.w	r9, r4, #4
   da576:	f844 3c04 	str.w	r3, [r4, #-4]
   da57a:	f8cd b008 	str.w	fp, [sp, #8]
   da57e:	464c      	mov	r4, r9
   da580:	461d      	mov	r5, r3
   da582:	9903      	ldr	r1, [sp, #12]
   da584:	e7d7      	b.n	da536 <__hexnan+0x2e>
   da586:	2a29      	cmp	r2, #41	; 0x29
   da588:	d156      	bne.n	da638 <__hexnan+0x130>
   da58a:	3102      	adds	r1, #2
   da58c:	f8ca 1000 	str.w	r1, [sl]
   da590:	f1bb 0f00 	cmp.w	fp, #0
   da594:	d050      	beq.n	da638 <__hexnan+0x130>
   da596:	454c      	cmp	r4, r9
   da598:	d206      	bcs.n	da5a8 <__hexnan+0xa0>
   da59a:	2d07      	cmp	r5, #7
   da59c:	dc04      	bgt.n	da5a8 <__hexnan+0xa0>
   da59e:	462a      	mov	r2, r5
   da5a0:	4649      	mov	r1, r9
   da5a2:	4620      	mov	r0, r4
   da5a4:	f7ff ff8a 	bl	da4bc <L_shift>
   da5a8:	4544      	cmp	r4, r8
   da5aa:	d934      	bls.n	da616 <__hexnan+0x10e>
   da5ac:	f1a8 0204 	sub.w	r2, r8, #4
   da5b0:	4623      	mov	r3, r4
   da5b2:	f853 1b04 	ldr.w	r1, [r3], #4
   da5b6:	f842 1f04 	str.w	r1, [r2, #4]!
   da5ba:	429f      	cmp	r7, r3
   da5bc:	d2f9      	bcs.n	da5b2 <__hexnan+0xaa>
   da5be:	1b3b      	subs	r3, r7, r4
   da5c0:	f023 0303 	bic.w	r3, r3, #3
   da5c4:	3304      	adds	r3, #4
   da5c6:	3401      	adds	r4, #1
   da5c8:	3e03      	subs	r6, #3
   da5ca:	42b4      	cmp	r4, r6
   da5cc:	bf88      	it	hi
   da5ce:	2304      	movhi	r3, #4
   da5d0:	4443      	add	r3, r8
   da5d2:	2200      	movs	r2, #0
   da5d4:	f843 2b04 	str.w	r2, [r3], #4
   da5d8:	429f      	cmp	r7, r3
   da5da:	d2fb      	bcs.n	da5d4 <__hexnan+0xcc>
   da5dc:	683b      	ldr	r3, [r7, #0]
   da5de:	b91b      	cbnz	r3, da5e8 <__hexnan+0xe0>
   da5e0:	4547      	cmp	r7, r8
   da5e2:	d127      	bne.n	da634 <__hexnan+0x12c>
   da5e4:	2301      	movs	r3, #1
   da5e6:	603b      	str	r3, [r7, #0]
   da5e8:	2005      	movs	r0, #5
   da5ea:	e026      	b.n	da63a <__hexnan+0x132>
   da5ec:	3501      	adds	r5, #1
   da5ee:	2d08      	cmp	r5, #8
   da5f0:	f10b 0b01 	add.w	fp, fp, #1
   da5f4:	dd06      	ble.n	da604 <__hexnan+0xfc>
   da5f6:	4544      	cmp	r4, r8
   da5f8:	d9c3      	bls.n	da582 <__hexnan+0x7a>
   da5fa:	2300      	movs	r3, #0
   da5fc:	f844 3c04 	str.w	r3, [r4, #-4]
   da600:	2501      	movs	r5, #1
   da602:	3c04      	subs	r4, #4
   da604:	6822      	ldr	r2, [r4, #0]
   da606:	f000 000f 	and.w	r0, r0, #15
   da60a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   da60e:	6022      	str	r2, [r4, #0]
   da610:	e7b7      	b.n	da582 <__hexnan+0x7a>
   da612:	2508      	movs	r5, #8
   da614:	e7b5      	b.n	da582 <__hexnan+0x7a>
   da616:	9b01      	ldr	r3, [sp, #4]
   da618:	2b00      	cmp	r3, #0
   da61a:	d0df      	beq.n	da5dc <__hexnan+0xd4>
   da61c:	f04f 32ff 	mov.w	r2, #4294967295
   da620:	f1c3 0320 	rsb	r3, r3, #32
   da624:	fa22 f303 	lsr.w	r3, r2, r3
   da628:	f856 2c04 	ldr.w	r2, [r6, #-4]
   da62c:	401a      	ands	r2, r3
   da62e:	f846 2c04 	str.w	r2, [r6, #-4]
   da632:	e7d3      	b.n	da5dc <__hexnan+0xd4>
   da634:	3f04      	subs	r7, #4
   da636:	e7d1      	b.n	da5dc <__hexnan+0xd4>
   da638:	2004      	movs	r0, #4
   da63a:	b007      	add	sp, #28
   da63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da640 <__ascii_mbtowc>:
   da640:	b082      	sub	sp, #8
   da642:	b901      	cbnz	r1, da646 <__ascii_mbtowc+0x6>
   da644:	a901      	add	r1, sp, #4
   da646:	b142      	cbz	r2, da65a <__ascii_mbtowc+0x1a>
   da648:	b14b      	cbz	r3, da65e <__ascii_mbtowc+0x1e>
   da64a:	7813      	ldrb	r3, [r2, #0]
   da64c:	600b      	str	r3, [r1, #0]
   da64e:	7812      	ldrb	r2, [r2, #0]
   da650:	1e10      	subs	r0, r2, #0
   da652:	bf18      	it	ne
   da654:	2001      	movne	r0, #1
   da656:	b002      	add	sp, #8
   da658:	4770      	bx	lr
   da65a:	4610      	mov	r0, r2
   da65c:	e7fb      	b.n	da656 <__ascii_mbtowc+0x16>
   da65e:	f06f 0001 	mvn.w	r0, #1
   da662:	e7f8      	b.n	da656 <__ascii_mbtowc+0x16>

000da664 <_Balloc>:
   da664:	b570      	push	{r4, r5, r6, lr}
   da666:	6a46      	ldr	r6, [r0, #36]	; 0x24
   da668:	4604      	mov	r4, r0
   da66a:	460d      	mov	r5, r1
   da66c:	b93e      	cbnz	r6, da67e <_Balloc+0x1a>
   da66e:	2010      	movs	r0, #16
   da670:	f7fb fbda 	bl	d5e28 <malloc>
   da674:	e9c0 6601 	strd	r6, r6, [r0, #4]
   da678:	6260      	str	r0, [r4, #36]	; 0x24
   da67a:	6006      	str	r6, [r0, #0]
   da67c:	60c6      	str	r6, [r0, #12]
   da67e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   da680:	68f3      	ldr	r3, [r6, #12]
   da682:	b183      	cbz	r3, da6a6 <_Balloc+0x42>
   da684:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da686:	68db      	ldr	r3, [r3, #12]
   da688:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   da68c:	b9b8      	cbnz	r0, da6be <_Balloc+0x5a>
   da68e:	2101      	movs	r1, #1
   da690:	fa01 f605 	lsl.w	r6, r1, r5
   da694:	1d72      	adds	r2, r6, #5
   da696:	0092      	lsls	r2, r2, #2
   da698:	4620      	mov	r0, r4
   da69a:	f000 fc22 	bl	daee2 <_calloc_r>
   da69e:	b160      	cbz	r0, da6ba <_Balloc+0x56>
   da6a0:	e9c0 5601 	strd	r5, r6, [r0, #4]
   da6a4:	e00e      	b.n	da6c4 <_Balloc+0x60>
   da6a6:	2221      	movs	r2, #33	; 0x21
   da6a8:	2104      	movs	r1, #4
   da6aa:	4620      	mov	r0, r4
   da6ac:	f000 fc19 	bl	daee2 <_calloc_r>
   da6b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da6b2:	60f0      	str	r0, [r6, #12]
   da6b4:	68db      	ldr	r3, [r3, #12]
   da6b6:	2b00      	cmp	r3, #0
   da6b8:	d1e4      	bne.n	da684 <_Balloc+0x20>
   da6ba:	2000      	movs	r0, #0
   da6bc:	bd70      	pop	{r4, r5, r6, pc}
   da6be:	6802      	ldr	r2, [r0, #0]
   da6c0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   da6c4:	2300      	movs	r3, #0
   da6c6:	e9c0 3303 	strd	r3, r3, [r0, #12]
   da6ca:	e7f7      	b.n	da6bc <_Balloc+0x58>

000da6cc <_Bfree>:
   da6cc:	b570      	push	{r4, r5, r6, lr}
   da6ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
   da6d0:	4605      	mov	r5, r0
   da6d2:	460c      	mov	r4, r1
   da6d4:	b93e      	cbnz	r6, da6e6 <_Bfree+0x1a>
   da6d6:	2010      	movs	r0, #16
   da6d8:	f7fb fba6 	bl	d5e28 <malloc>
   da6dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   da6e0:	6268      	str	r0, [r5, #36]	; 0x24
   da6e2:	6006      	str	r6, [r0, #0]
   da6e4:	60c6      	str	r6, [r0, #12]
   da6e6:	b13c      	cbz	r4, da6f8 <_Bfree+0x2c>
   da6e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   da6ea:	6862      	ldr	r2, [r4, #4]
   da6ec:	68db      	ldr	r3, [r3, #12]
   da6ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   da6f2:	6021      	str	r1, [r4, #0]
   da6f4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   da6f8:	bd70      	pop	{r4, r5, r6, pc}

000da6fa <__multadd>:
   da6fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da6fe:	690e      	ldr	r6, [r1, #16]
   da700:	4607      	mov	r7, r0
   da702:	4698      	mov	r8, r3
   da704:	460c      	mov	r4, r1
   da706:	f101 0014 	add.w	r0, r1, #20
   da70a:	2300      	movs	r3, #0
   da70c:	6805      	ldr	r5, [r0, #0]
   da70e:	b2a9      	uxth	r1, r5
   da710:	fb02 8101 	mla	r1, r2, r1, r8
   da714:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   da718:	0c2d      	lsrs	r5, r5, #16
   da71a:	fb02 c505 	mla	r5, r2, r5, ip
   da71e:	b289      	uxth	r1, r1
   da720:	3301      	adds	r3, #1
   da722:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   da726:	429e      	cmp	r6, r3
   da728:	f840 1b04 	str.w	r1, [r0], #4
   da72c:	ea4f 4815 	mov.w	r8, r5, lsr #16
   da730:	dcec      	bgt.n	da70c <__multadd+0x12>
   da732:	f1b8 0f00 	cmp.w	r8, #0
   da736:	d01b      	beq.n	da770 <__multadd+0x76>
   da738:	68a3      	ldr	r3, [r4, #8]
   da73a:	42b3      	cmp	r3, r6
   da73c:	dc12      	bgt.n	da764 <__multadd+0x6a>
   da73e:	6861      	ldr	r1, [r4, #4]
   da740:	4638      	mov	r0, r7
   da742:	3101      	adds	r1, #1
   da744:	f7ff ff8e 	bl	da664 <_Balloc>
   da748:	6922      	ldr	r2, [r4, #16]
   da74a:	3202      	adds	r2, #2
   da74c:	f104 010c 	add.w	r1, r4, #12
   da750:	4605      	mov	r5, r0
   da752:	0092      	lsls	r2, r2, #2
   da754:	300c      	adds	r0, #12
   da756:	f7fe fcbb 	bl	d90d0 <memcpy>
   da75a:	4621      	mov	r1, r4
   da75c:	4638      	mov	r0, r7
   da75e:	f7ff ffb5 	bl	da6cc <_Bfree>
   da762:	462c      	mov	r4, r5
   da764:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   da768:	3601      	adds	r6, #1
   da76a:	f8c3 8014 	str.w	r8, [r3, #20]
   da76e:	6126      	str	r6, [r4, #16]
   da770:	4620      	mov	r0, r4
   da772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da776 <__s2b>:
   da776:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da77a:	460c      	mov	r4, r1
   da77c:	4615      	mov	r5, r2
   da77e:	461f      	mov	r7, r3
   da780:	2209      	movs	r2, #9
   da782:	3308      	adds	r3, #8
   da784:	4606      	mov	r6, r0
   da786:	fb93 f3f2 	sdiv	r3, r3, r2
   da78a:	2100      	movs	r1, #0
   da78c:	2201      	movs	r2, #1
   da78e:	429a      	cmp	r2, r3
   da790:	db20      	blt.n	da7d4 <__s2b+0x5e>
   da792:	4630      	mov	r0, r6
   da794:	f7ff ff66 	bl	da664 <_Balloc>
   da798:	9b08      	ldr	r3, [sp, #32]
   da79a:	6143      	str	r3, [r0, #20]
   da79c:	2d09      	cmp	r5, #9
   da79e:	f04f 0301 	mov.w	r3, #1
   da7a2:	6103      	str	r3, [r0, #16]
   da7a4:	dd19      	ble.n	da7da <__s2b+0x64>
   da7a6:	f104 0909 	add.w	r9, r4, #9
   da7aa:	46c8      	mov	r8, r9
   da7ac:	442c      	add	r4, r5
   da7ae:	f818 3b01 	ldrb.w	r3, [r8], #1
   da7b2:	4601      	mov	r1, r0
   da7b4:	3b30      	subs	r3, #48	; 0x30
   da7b6:	220a      	movs	r2, #10
   da7b8:	4630      	mov	r0, r6
   da7ba:	f7ff ff9e 	bl	da6fa <__multadd>
   da7be:	45a0      	cmp	r8, r4
   da7c0:	d1f5      	bne.n	da7ae <__s2b+0x38>
   da7c2:	f1a5 0408 	sub.w	r4, r5, #8
   da7c6:	444c      	add	r4, r9
   da7c8:	1b2d      	subs	r5, r5, r4
   da7ca:	1963      	adds	r3, r4, r5
   da7cc:	42bb      	cmp	r3, r7
   da7ce:	db07      	blt.n	da7e0 <__s2b+0x6a>
   da7d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da7d4:	0052      	lsls	r2, r2, #1
   da7d6:	3101      	adds	r1, #1
   da7d8:	e7d9      	b.n	da78e <__s2b+0x18>
   da7da:	340a      	adds	r4, #10
   da7dc:	2509      	movs	r5, #9
   da7de:	e7f3      	b.n	da7c8 <__s2b+0x52>
   da7e0:	f814 3b01 	ldrb.w	r3, [r4], #1
   da7e4:	4601      	mov	r1, r0
   da7e6:	3b30      	subs	r3, #48	; 0x30
   da7e8:	220a      	movs	r2, #10
   da7ea:	4630      	mov	r0, r6
   da7ec:	f7ff ff85 	bl	da6fa <__multadd>
   da7f0:	e7eb      	b.n	da7ca <__s2b+0x54>

000da7f2 <__hi0bits>:
   da7f2:	0c03      	lsrs	r3, r0, #16
   da7f4:	041b      	lsls	r3, r3, #16
   da7f6:	b9d3      	cbnz	r3, da82e <__hi0bits+0x3c>
   da7f8:	0400      	lsls	r0, r0, #16
   da7fa:	2310      	movs	r3, #16
   da7fc:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   da800:	bf04      	itt	eq
   da802:	0200      	lsleq	r0, r0, #8
   da804:	3308      	addeq	r3, #8
   da806:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   da80a:	bf04      	itt	eq
   da80c:	0100      	lsleq	r0, r0, #4
   da80e:	3304      	addeq	r3, #4
   da810:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   da814:	bf04      	itt	eq
   da816:	0080      	lsleq	r0, r0, #2
   da818:	3302      	addeq	r3, #2
   da81a:	2800      	cmp	r0, #0
   da81c:	db05      	blt.n	da82a <__hi0bits+0x38>
   da81e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   da822:	f103 0301 	add.w	r3, r3, #1
   da826:	bf08      	it	eq
   da828:	2320      	moveq	r3, #32
   da82a:	4618      	mov	r0, r3
   da82c:	4770      	bx	lr
   da82e:	2300      	movs	r3, #0
   da830:	e7e4      	b.n	da7fc <__hi0bits+0xa>

000da832 <__lo0bits>:
   da832:	6803      	ldr	r3, [r0, #0]
   da834:	f013 0207 	ands.w	r2, r3, #7
   da838:	4601      	mov	r1, r0
   da83a:	d00b      	beq.n	da854 <__lo0bits+0x22>
   da83c:	07da      	lsls	r2, r3, #31
   da83e:	d424      	bmi.n	da88a <__lo0bits+0x58>
   da840:	0798      	lsls	r0, r3, #30
   da842:	bf49      	itett	mi
   da844:	085b      	lsrmi	r3, r3, #1
   da846:	089b      	lsrpl	r3, r3, #2
   da848:	2001      	movmi	r0, #1
   da84a:	600b      	strmi	r3, [r1, #0]
   da84c:	bf5c      	itt	pl
   da84e:	600b      	strpl	r3, [r1, #0]
   da850:	2002      	movpl	r0, #2
   da852:	4770      	bx	lr
   da854:	b298      	uxth	r0, r3
   da856:	b9b0      	cbnz	r0, da886 <__lo0bits+0x54>
   da858:	0c1b      	lsrs	r3, r3, #16
   da85a:	2010      	movs	r0, #16
   da85c:	f013 0fff 	tst.w	r3, #255	; 0xff
   da860:	bf04      	itt	eq
   da862:	0a1b      	lsreq	r3, r3, #8
   da864:	3008      	addeq	r0, #8
   da866:	071a      	lsls	r2, r3, #28
   da868:	bf04      	itt	eq
   da86a:	091b      	lsreq	r3, r3, #4
   da86c:	3004      	addeq	r0, #4
   da86e:	079a      	lsls	r2, r3, #30
   da870:	bf04      	itt	eq
   da872:	089b      	lsreq	r3, r3, #2
   da874:	3002      	addeq	r0, #2
   da876:	07da      	lsls	r2, r3, #31
   da878:	d403      	bmi.n	da882 <__lo0bits+0x50>
   da87a:	085b      	lsrs	r3, r3, #1
   da87c:	f100 0001 	add.w	r0, r0, #1
   da880:	d005      	beq.n	da88e <__lo0bits+0x5c>
   da882:	600b      	str	r3, [r1, #0]
   da884:	4770      	bx	lr
   da886:	4610      	mov	r0, r2
   da888:	e7e8      	b.n	da85c <__lo0bits+0x2a>
   da88a:	2000      	movs	r0, #0
   da88c:	4770      	bx	lr
   da88e:	2020      	movs	r0, #32
   da890:	4770      	bx	lr

000da892 <__i2b>:
   da892:	b510      	push	{r4, lr}
   da894:	460c      	mov	r4, r1
   da896:	2101      	movs	r1, #1
   da898:	f7ff fee4 	bl	da664 <_Balloc>
   da89c:	2201      	movs	r2, #1
   da89e:	6144      	str	r4, [r0, #20]
   da8a0:	6102      	str	r2, [r0, #16]
   da8a2:	bd10      	pop	{r4, pc}

000da8a4 <__multiply>:
   da8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da8a8:	4615      	mov	r5, r2
   da8aa:	690a      	ldr	r2, [r1, #16]
   da8ac:	692b      	ldr	r3, [r5, #16]
   da8ae:	429a      	cmp	r2, r3
   da8b0:	bfb8      	it	lt
   da8b2:	460b      	movlt	r3, r1
   da8b4:	460c      	mov	r4, r1
   da8b6:	bfbc      	itt	lt
   da8b8:	462c      	movlt	r4, r5
   da8ba:	461d      	movlt	r5, r3
   da8bc:	6927      	ldr	r7, [r4, #16]
   da8be:	f8d5 9010 	ldr.w	r9, [r5, #16]
   da8c2:	68a3      	ldr	r3, [r4, #8]
   da8c4:	6861      	ldr	r1, [r4, #4]
   da8c6:	eb07 0609 	add.w	r6, r7, r9
   da8ca:	42b3      	cmp	r3, r6
   da8cc:	bfb8      	it	lt
   da8ce:	3101      	addlt	r1, #1
   da8d0:	b085      	sub	sp, #20
   da8d2:	f7ff fec7 	bl	da664 <_Balloc>
   da8d6:	f100 0114 	add.w	r1, r0, #20
   da8da:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   da8de:	460b      	mov	r3, r1
   da8e0:	2200      	movs	r2, #0
   da8e2:	4543      	cmp	r3, r8
   da8e4:	d31d      	bcc.n	da922 <__multiply+0x7e>
   da8e6:	f104 0314 	add.w	r3, r4, #20
   da8ea:	f105 0214 	add.w	r2, r5, #20
   da8ee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   da8f2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   da8f6:	9302      	str	r3, [sp, #8]
   da8f8:	1b3b      	subs	r3, r7, r4
   da8fa:	3b15      	subs	r3, #21
   da8fc:	f023 0303 	bic.w	r3, r3, #3
   da900:	3304      	adds	r3, #4
   da902:	f104 0515 	add.w	r5, r4, #21
   da906:	42af      	cmp	r7, r5
   da908:	bf38      	it	cc
   da90a:	2304      	movcc	r3, #4
   da90c:	9301      	str	r3, [sp, #4]
   da90e:	9b02      	ldr	r3, [sp, #8]
   da910:	9203      	str	r2, [sp, #12]
   da912:	4293      	cmp	r3, r2
   da914:	d808      	bhi.n	da928 <__multiply+0x84>
   da916:	2e00      	cmp	r6, #0
   da918:	dc5a      	bgt.n	da9d0 <__multiply+0x12c>
   da91a:	6106      	str	r6, [r0, #16]
   da91c:	b005      	add	sp, #20
   da91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da922:	f843 2b04 	str.w	r2, [r3], #4
   da926:	e7dc      	b.n	da8e2 <__multiply+0x3e>
   da928:	f8b2 a000 	ldrh.w	sl, [r2]
   da92c:	f1ba 0f00 	cmp.w	sl, #0
   da930:	d024      	beq.n	da97c <__multiply+0xd8>
   da932:	f104 0e14 	add.w	lr, r4, #20
   da936:	4689      	mov	r9, r1
   da938:	f04f 0c00 	mov.w	ip, #0
   da93c:	f85e 5b04 	ldr.w	r5, [lr], #4
   da940:	f8d9 b000 	ldr.w	fp, [r9]
   da944:	b2ab      	uxth	r3, r5
   da946:	fa1f fb8b 	uxth.w	fp, fp
   da94a:	fb0a b303 	mla	r3, sl, r3, fp
   da94e:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   da952:	f8d9 5000 	ldr.w	r5, [r9]
   da956:	4463      	add	r3, ip
   da958:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   da95c:	fb0a c50b 	mla	r5, sl, fp, ip
   da960:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   da964:	b29b      	uxth	r3, r3
   da966:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   da96a:	4577      	cmp	r7, lr
   da96c:	f849 3b04 	str.w	r3, [r9], #4
   da970:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   da974:	d8e2      	bhi.n	da93c <__multiply+0x98>
   da976:	9b01      	ldr	r3, [sp, #4]
   da978:	f841 c003 	str.w	ip, [r1, r3]
   da97c:	9b03      	ldr	r3, [sp, #12]
   da97e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   da982:	3204      	adds	r2, #4
   da984:	f1b9 0f00 	cmp.w	r9, #0
   da988:	d020      	beq.n	da9cc <__multiply+0x128>
   da98a:	680b      	ldr	r3, [r1, #0]
   da98c:	f104 0c14 	add.w	ip, r4, #20
   da990:	468e      	mov	lr, r1
   da992:	f04f 0a00 	mov.w	sl, #0
   da996:	f8bc 5000 	ldrh.w	r5, [ip]
   da99a:	f8be b002 	ldrh.w	fp, [lr, #2]
   da99e:	fb09 b505 	mla	r5, r9, r5, fp
   da9a2:	44aa      	add	sl, r5
   da9a4:	b29b      	uxth	r3, r3
   da9a6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   da9aa:	f84e 3b04 	str.w	r3, [lr], #4
   da9ae:	f85c 3b04 	ldr.w	r3, [ip], #4
   da9b2:	f8be 5000 	ldrh.w	r5, [lr]
   da9b6:	0c1b      	lsrs	r3, r3, #16
   da9b8:	fb09 5303 	mla	r3, r9, r3, r5
   da9bc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   da9c0:	4567      	cmp	r7, ip
   da9c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   da9c6:	d8e6      	bhi.n	da996 <__multiply+0xf2>
   da9c8:	9d01      	ldr	r5, [sp, #4]
   da9ca:	514b      	str	r3, [r1, r5]
   da9cc:	3104      	adds	r1, #4
   da9ce:	e79e      	b.n	da90e <__multiply+0x6a>
   da9d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   da9d4:	2b00      	cmp	r3, #0
   da9d6:	d1a0      	bne.n	da91a <__multiply+0x76>
   da9d8:	3e01      	subs	r6, #1
   da9da:	e79c      	b.n	da916 <__multiply+0x72>

000da9dc <__pow5mult>:
   da9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da9e0:	4615      	mov	r5, r2
   da9e2:	f012 0203 	ands.w	r2, r2, #3
   da9e6:	4606      	mov	r6, r0
   da9e8:	460f      	mov	r7, r1
   da9ea:	d007      	beq.n	da9fc <__pow5mult+0x20>
   da9ec:	4c21      	ldr	r4, [pc, #132]	; (daa74 <__pow5mult+0x98>)
   da9ee:	3a01      	subs	r2, #1
   da9f0:	2300      	movs	r3, #0
   da9f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   da9f6:	f7ff fe80 	bl	da6fa <__multadd>
   da9fa:	4607      	mov	r7, r0
   da9fc:	10ad      	asrs	r5, r5, #2
   da9fe:	d035      	beq.n	daa6c <__pow5mult+0x90>
   daa00:	6a74      	ldr	r4, [r6, #36]	; 0x24
   daa02:	b93c      	cbnz	r4, daa14 <__pow5mult+0x38>
   daa04:	2010      	movs	r0, #16
   daa06:	f7fb fa0f 	bl	d5e28 <malloc>
   daa0a:	e9c0 4401 	strd	r4, r4, [r0, #4]
   daa0e:	6270      	str	r0, [r6, #36]	; 0x24
   daa10:	6004      	str	r4, [r0, #0]
   daa12:	60c4      	str	r4, [r0, #12]
   daa14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   daa18:	f8d8 4008 	ldr.w	r4, [r8, #8]
   daa1c:	b94c      	cbnz	r4, daa32 <__pow5mult+0x56>
   daa1e:	f240 2171 	movw	r1, #625	; 0x271
   daa22:	4630      	mov	r0, r6
   daa24:	f7ff ff35 	bl	da892 <__i2b>
   daa28:	2300      	movs	r3, #0
   daa2a:	f8c8 0008 	str.w	r0, [r8, #8]
   daa2e:	4604      	mov	r4, r0
   daa30:	6003      	str	r3, [r0, #0]
   daa32:	f04f 0900 	mov.w	r9, #0
   daa36:	07eb      	lsls	r3, r5, #31
   daa38:	d50a      	bpl.n	daa50 <__pow5mult+0x74>
   daa3a:	4639      	mov	r1, r7
   daa3c:	4622      	mov	r2, r4
   daa3e:	4630      	mov	r0, r6
   daa40:	f7ff ff30 	bl	da8a4 <__multiply>
   daa44:	4639      	mov	r1, r7
   daa46:	4680      	mov	r8, r0
   daa48:	4630      	mov	r0, r6
   daa4a:	f7ff fe3f 	bl	da6cc <_Bfree>
   daa4e:	4647      	mov	r7, r8
   daa50:	106d      	asrs	r5, r5, #1
   daa52:	d00b      	beq.n	daa6c <__pow5mult+0x90>
   daa54:	6820      	ldr	r0, [r4, #0]
   daa56:	b938      	cbnz	r0, daa68 <__pow5mult+0x8c>
   daa58:	4622      	mov	r2, r4
   daa5a:	4621      	mov	r1, r4
   daa5c:	4630      	mov	r0, r6
   daa5e:	f7ff ff21 	bl	da8a4 <__multiply>
   daa62:	6020      	str	r0, [r4, #0]
   daa64:	f8c0 9000 	str.w	r9, [r0]
   daa68:	4604      	mov	r4, r0
   daa6a:	e7e4      	b.n	daa36 <__pow5mult+0x5a>
   daa6c:	4638      	mov	r0, r7
   daa6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   daa72:	bf00      	nop
   daa74:	000db970 	.word	0x000db970

000daa78 <__lshift>:
   daa78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   daa7c:	460c      	mov	r4, r1
   daa7e:	6849      	ldr	r1, [r1, #4]
   daa80:	6923      	ldr	r3, [r4, #16]
   daa82:	eb03 1862 	add.w	r8, r3, r2, asr #5
   daa86:	68a3      	ldr	r3, [r4, #8]
   daa88:	4607      	mov	r7, r0
   daa8a:	4691      	mov	r9, r2
   daa8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
   daa90:	f108 0601 	add.w	r6, r8, #1
   daa94:	42b3      	cmp	r3, r6
   daa96:	db3f      	blt.n	dab18 <__lshift+0xa0>
   daa98:	4638      	mov	r0, r7
   daa9a:	f7ff fde3 	bl	da664 <_Balloc>
   daa9e:	2300      	movs	r3, #0
   daaa0:	4605      	mov	r5, r0
   daaa2:	f100 0114 	add.w	r1, r0, #20
   daaa6:	f100 0210 	add.w	r2, r0, #16
   daaaa:	4618      	mov	r0, r3
   daaac:	4553      	cmp	r3, sl
   daaae:	db36      	blt.n	dab1e <__lshift+0xa6>
   daab0:	6920      	ldr	r0, [r4, #16]
   daab2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   daab6:	f104 0314 	add.w	r3, r4, #20
   daaba:	f019 091f 	ands.w	r9, r9, #31
   daabe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   daac2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   daac6:	d02e      	beq.n	dab26 <__lshift+0xae>
   daac8:	f1c9 0e20 	rsb	lr, r9, #32
   daacc:	468a      	mov	sl, r1
   daace:	2200      	movs	r2, #0
   daad0:	6818      	ldr	r0, [r3, #0]
   daad2:	fa00 f009 	lsl.w	r0, r0, r9
   daad6:	4302      	orrs	r2, r0
   daad8:	f84a 2b04 	str.w	r2, [sl], #4
   daadc:	f853 2b04 	ldr.w	r2, [r3], #4
   daae0:	459c      	cmp	ip, r3
   daae2:	fa22 f20e 	lsr.w	r2, r2, lr
   daae6:	d8f3      	bhi.n	daad0 <__lshift+0x58>
   daae8:	ebac 0304 	sub.w	r3, ip, r4
   daaec:	3b15      	subs	r3, #21
   daaee:	f023 0303 	bic.w	r3, r3, #3
   daaf2:	3304      	adds	r3, #4
   daaf4:	f104 0015 	add.w	r0, r4, #21
   daaf8:	4560      	cmp	r0, ip
   daafa:	bf88      	it	hi
   daafc:	2304      	movhi	r3, #4
   daafe:	50ca      	str	r2, [r1, r3]
   dab00:	b10a      	cbz	r2, dab06 <__lshift+0x8e>
   dab02:	f108 0602 	add.w	r6, r8, #2
   dab06:	3e01      	subs	r6, #1
   dab08:	4638      	mov	r0, r7
   dab0a:	612e      	str	r6, [r5, #16]
   dab0c:	4621      	mov	r1, r4
   dab0e:	f7ff fddd 	bl	da6cc <_Bfree>
   dab12:	4628      	mov	r0, r5
   dab14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dab18:	3101      	adds	r1, #1
   dab1a:	005b      	lsls	r3, r3, #1
   dab1c:	e7ba      	b.n	daa94 <__lshift+0x1c>
   dab1e:	f842 0f04 	str.w	r0, [r2, #4]!
   dab22:	3301      	adds	r3, #1
   dab24:	e7c2      	b.n	daaac <__lshift+0x34>
   dab26:	3904      	subs	r1, #4
   dab28:	f853 2b04 	ldr.w	r2, [r3], #4
   dab2c:	f841 2f04 	str.w	r2, [r1, #4]!
   dab30:	459c      	cmp	ip, r3
   dab32:	d8f9      	bhi.n	dab28 <__lshift+0xb0>
   dab34:	e7e7      	b.n	dab06 <__lshift+0x8e>

000dab36 <__mcmp>:
   dab36:	b530      	push	{r4, r5, lr}
   dab38:	6902      	ldr	r2, [r0, #16]
   dab3a:	690c      	ldr	r4, [r1, #16]
   dab3c:	1b12      	subs	r2, r2, r4
   dab3e:	d10e      	bne.n	dab5e <__mcmp+0x28>
   dab40:	f100 0314 	add.w	r3, r0, #20
   dab44:	3114      	adds	r1, #20
   dab46:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   dab4a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   dab4e:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   dab52:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   dab56:	42a5      	cmp	r5, r4
   dab58:	d003      	beq.n	dab62 <__mcmp+0x2c>
   dab5a:	d305      	bcc.n	dab68 <__mcmp+0x32>
   dab5c:	2201      	movs	r2, #1
   dab5e:	4610      	mov	r0, r2
   dab60:	bd30      	pop	{r4, r5, pc}
   dab62:	4283      	cmp	r3, r0
   dab64:	d3f3      	bcc.n	dab4e <__mcmp+0x18>
   dab66:	e7fa      	b.n	dab5e <__mcmp+0x28>
   dab68:	f04f 32ff 	mov.w	r2, #4294967295
   dab6c:	e7f7      	b.n	dab5e <__mcmp+0x28>

000dab6e <__mdiff>:
   dab6e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dab72:	460c      	mov	r4, r1
   dab74:	4606      	mov	r6, r0
   dab76:	4611      	mov	r1, r2
   dab78:	4620      	mov	r0, r4
   dab7a:	4617      	mov	r7, r2
   dab7c:	f7ff ffdb 	bl	dab36 <__mcmp>
   dab80:	1e05      	subs	r5, r0, #0
   dab82:	d108      	bne.n	dab96 <__mdiff+0x28>
   dab84:	4629      	mov	r1, r5
   dab86:	4630      	mov	r0, r6
   dab88:	f7ff fd6c 	bl	da664 <_Balloc>
   dab8c:	2301      	movs	r3, #1
   dab8e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   dab92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dab96:	bfa4      	itt	ge
   dab98:	463b      	movge	r3, r7
   dab9a:	4627      	movge	r7, r4
   dab9c:	4630      	mov	r0, r6
   dab9e:	6879      	ldr	r1, [r7, #4]
   daba0:	bfa6      	itte	ge
   daba2:	461c      	movge	r4, r3
   daba4:	2500      	movge	r5, #0
   daba6:	2501      	movlt	r5, #1
   daba8:	f7ff fd5c 	bl	da664 <_Balloc>
   dabac:	693e      	ldr	r6, [r7, #16]
   dabae:	60c5      	str	r5, [r0, #12]
   dabb0:	6925      	ldr	r5, [r4, #16]
   dabb2:	f107 0114 	add.w	r1, r7, #20
   dabb6:	f104 0914 	add.w	r9, r4, #20
   dabba:	f100 0e14 	add.w	lr, r0, #20
   dabbe:	f107 0210 	add.w	r2, r7, #16
   dabc2:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   dabc6:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   dabca:	46f2      	mov	sl, lr
   dabcc:	2700      	movs	r7, #0
   dabce:	f859 3b04 	ldr.w	r3, [r9], #4
   dabd2:	f852 bf04 	ldr.w	fp, [r2, #4]!
   dabd6:	fa1f f883 	uxth.w	r8, r3
   dabda:	fa17 f78b 	uxtah	r7, r7, fp
   dabde:	0c1b      	lsrs	r3, r3, #16
   dabe0:	eba7 0808 	sub.w	r8, r7, r8
   dabe4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   dabe8:	eb03 4328 	add.w	r3, r3, r8, asr #16
   dabec:	fa1f f888 	uxth.w	r8, r8
   dabf0:	141f      	asrs	r7, r3, #16
   dabf2:	454d      	cmp	r5, r9
   dabf4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   dabf8:	f84a 3b04 	str.w	r3, [sl], #4
   dabfc:	d8e7      	bhi.n	dabce <__mdiff+0x60>
   dabfe:	1b2b      	subs	r3, r5, r4
   dac00:	3b15      	subs	r3, #21
   dac02:	f023 0303 	bic.w	r3, r3, #3
   dac06:	3304      	adds	r3, #4
   dac08:	3415      	adds	r4, #21
   dac0a:	42a5      	cmp	r5, r4
   dac0c:	bf38      	it	cc
   dac0e:	2304      	movcc	r3, #4
   dac10:	4419      	add	r1, r3
   dac12:	4473      	add	r3, lr
   dac14:	469e      	mov	lr, r3
   dac16:	460d      	mov	r5, r1
   dac18:	4565      	cmp	r5, ip
   dac1a:	d30e      	bcc.n	dac3a <__mdiff+0xcc>
   dac1c:	f10c 0203 	add.w	r2, ip, #3
   dac20:	1a52      	subs	r2, r2, r1
   dac22:	f022 0203 	bic.w	r2, r2, #3
   dac26:	3903      	subs	r1, #3
   dac28:	458c      	cmp	ip, r1
   dac2a:	bf38      	it	cc
   dac2c:	2200      	movcc	r2, #0
   dac2e:	441a      	add	r2, r3
   dac30:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   dac34:	b17b      	cbz	r3, dac56 <__mdiff+0xe8>
   dac36:	6106      	str	r6, [r0, #16]
   dac38:	e7ab      	b.n	dab92 <__mdiff+0x24>
   dac3a:	f855 8b04 	ldr.w	r8, [r5], #4
   dac3e:	fa17 f488 	uxtah	r4, r7, r8
   dac42:	1422      	asrs	r2, r4, #16
   dac44:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dac48:	b2a4      	uxth	r4, r4
   dac4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dac4e:	f84e 4b04 	str.w	r4, [lr], #4
   dac52:	1417      	asrs	r7, r2, #16
   dac54:	e7e0      	b.n	dac18 <__mdiff+0xaa>
   dac56:	3e01      	subs	r6, #1
   dac58:	e7ea      	b.n	dac30 <__mdiff+0xc2>
	...

000dac5c <__ulp>:
   dac5c:	b082      	sub	sp, #8
   dac5e:	ed8d 0b00 	vstr	d0, [sp]
   dac62:	9b01      	ldr	r3, [sp, #4]
   dac64:	4912      	ldr	r1, [pc, #72]	; (dacb0 <__ulp+0x54>)
   dac66:	4019      	ands	r1, r3
   dac68:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dac6c:	2900      	cmp	r1, #0
   dac6e:	dd05      	ble.n	dac7c <__ulp+0x20>
   dac70:	2200      	movs	r2, #0
   dac72:	460b      	mov	r3, r1
   dac74:	ec43 2b10 	vmov	d0, r2, r3
   dac78:	b002      	add	sp, #8
   dac7a:	4770      	bx	lr
   dac7c:	4249      	negs	r1, r1
   dac7e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dac82:	ea4f 5021 	mov.w	r0, r1, asr #20
   dac86:	f04f 0200 	mov.w	r2, #0
   dac8a:	f04f 0300 	mov.w	r3, #0
   dac8e:	da04      	bge.n	dac9a <__ulp+0x3e>
   dac90:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   dac94:	fa41 f300 	asr.w	r3, r1, r0
   dac98:	e7ec      	b.n	dac74 <__ulp+0x18>
   dac9a:	f1a0 0114 	sub.w	r1, r0, #20
   dac9e:	291e      	cmp	r1, #30
   daca0:	bfda      	itte	le
   daca2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   daca6:	fa20 f101 	lsrle.w	r1, r0, r1
   dacaa:	2101      	movgt	r1, #1
   dacac:	460a      	mov	r2, r1
   dacae:	e7e1      	b.n	dac74 <__ulp+0x18>
   dacb0:	7ff00000 	.word	0x7ff00000

000dacb4 <__b2d>:
   dacb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dacb6:	6905      	ldr	r5, [r0, #16]
   dacb8:	f100 0714 	add.w	r7, r0, #20
   dacbc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   dacc0:	1f2e      	subs	r6, r5, #4
   dacc2:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dacc6:	4620      	mov	r0, r4
   dacc8:	f7ff fd93 	bl	da7f2 <__hi0bits>
   daccc:	f1c0 0320 	rsb	r3, r0, #32
   dacd0:	280a      	cmp	r0, #10
   dacd2:	f8df c07c 	ldr.w	ip, [pc, #124]	; dad50 <__b2d+0x9c>
   dacd6:	600b      	str	r3, [r1, #0]
   dacd8:	dc14      	bgt.n	dad04 <__b2d+0x50>
   dacda:	f1c0 0e0b 	rsb	lr, r0, #11
   dacde:	fa24 f10e 	lsr.w	r1, r4, lr
   dace2:	42b7      	cmp	r7, r6
   dace4:	ea41 030c 	orr.w	r3, r1, ip
   dace8:	bf34      	ite	cc
   dacea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dacee:	2100      	movcs	r1, #0
   dacf0:	3015      	adds	r0, #21
   dacf2:	fa04 f000 	lsl.w	r0, r4, r0
   dacf6:	fa21 f10e 	lsr.w	r1, r1, lr
   dacfa:	ea40 0201 	orr.w	r2, r0, r1
   dacfe:	ec43 2b10 	vmov	d0, r2, r3
   dad02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dad04:	42b7      	cmp	r7, r6
   dad06:	bf3a      	itte	cc
   dad08:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dad0c:	f1a5 0608 	subcc.w	r6, r5, #8
   dad10:	2100      	movcs	r1, #0
   dad12:	380b      	subs	r0, #11
   dad14:	d017      	beq.n	dad46 <__b2d+0x92>
   dad16:	f1c0 0c20 	rsb	ip, r0, #32
   dad1a:	fa04 f500 	lsl.w	r5, r4, r0
   dad1e:	42be      	cmp	r6, r7
   dad20:	fa21 f40c 	lsr.w	r4, r1, ip
   dad24:	ea45 0504 	orr.w	r5, r5, r4
   dad28:	bf8c      	ite	hi
   dad2a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   dad2e:	2400      	movls	r4, #0
   dad30:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   dad34:	fa01 f000 	lsl.w	r0, r1, r0
   dad38:	fa24 f40c 	lsr.w	r4, r4, ip
   dad3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dad40:	ea40 0204 	orr.w	r2, r0, r4
   dad44:	e7db      	b.n	dacfe <__b2d+0x4a>
   dad46:	ea44 030c 	orr.w	r3, r4, ip
   dad4a:	460a      	mov	r2, r1
   dad4c:	e7d7      	b.n	dacfe <__b2d+0x4a>
   dad4e:	bf00      	nop
   dad50:	3ff00000 	.word	0x3ff00000

000dad54 <__d2b>:
   dad54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dad58:	4689      	mov	r9, r1
   dad5a:	2101      	movs	r1, #1
   dad5c:	ec57 6b10 	vmov	r6, r7, d0
   dad60:	4690      	mov	r8, r2
   dad62:	f7ff fc7f 	bl	da664 <_Balloc>
   dad66:	f3c7 550a 	ubfx	r5, r7, #20, #11
   dad6a:	4604      	mov	r4, r0
   dad6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
   dad70:	bb35      	cbnz	r5, dadc0 <__d2b+0x6c>
   dad72:	2e00      	cmp	r6, #0
   dad74:	9301      	str	r3, [sp, #4]
   dad76:	d028      	beq.n	dadca <__d2b+0x76>
   dad78:	4668      	mov	r0, sp
   dad7a:	9600      	str	r6, [sp, #0]
   dad7c:	f7ff fd59 	bl	da832 <__lo0bits>
   dad80:	9900      	ldr	r1, [sp, #0]
   dad82:	b300      	cbz	r0, dadc6 <__d2b+0x72>
   dad84:	9a01      	ldr	r2, [sp, #4]
   dad86:	f1c0 0320 	rsb	r3, r0, #32
   dad8a:	fa02 f303 	lsl.w	r3, r2, r3
   dad8e:	430b      	orrs	r3, r1
   dad90:	40c2      	lsrs	r2, r0
   dad92:	6163      	str	r3, [r4, #20]
   dad94:	9201      	str	r2, [sp, #4]
   dad96:	9b01      	ldr	r3, [sp, #4]
   dad98:	61a3      	str	r3, [r4, #24]
   dad9a:	2b00      	cmp	r3, #0
   dad9c:	bf14      	ite	ne
   dad9e:	2202      	movne	r2, #2
   dada0:	2201      	moveq	r2, #1
   dada2:	6122      	str	r2, [r4, #16]
   dada4:	b1d5      	cbz	r5, daddc <__d2b+0x88>
   dada6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   dadaa:	4405      	add	r5, r0
   dadac:	f8c9 5000 	str.w	r5, [r9]
   dadb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dadb4:	f8c8 0000 	str.w	r0, [r8]
   dadb8:	4620      	mov	r0, r4
   dadba:	b003      	add	sp, #12
   dadbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dadc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dadc4:	e7d5      	b.n	dad72 <__d2b+0x1e>
   dadc6:	6161      	str	r1, [r4, #20]
   dadc8:	e7e5      	b.n	dad96 <__d2b+0x42>
   dadca:	a801      	add	r0, sp, #4
   dadcc:	f7ff fd31 	bl	da832 <__lo0bits>
   dadd0:	9b01      	ldr	r3, [sp, #4]
   dadd2:	6163      	str	r3, [r4, #20]
   dadd4:	2201      	movs	r2, #1
   dadd6:	6122      	str	r2, [r4, #16]
   dadd8:	3020      	adds	r0, #32
   dadda:	e7e3      	b.n	dada4 <__d2b+0x50>
   daddc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   dade0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dade4:	f8c9 0000 	str.w	r0, [r9]
   dade8:	6918      	ldr	r0, [r3, #16]
   dadea:	f7ff fd02 	bl	da7f2 <__hi0bits>
   dadee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   dadf2:	e7df      	b.n	dadb4 <__d2b+0x60>

000dadf4 <__ratio>:
   dadf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dadf8:	4688      	mov	r8, r1
   dadfa:	4669      	mov	r1, sp
   dadfc:	4681      	mov	r9, r0
   dadfe:	f7ff ff59 	bl	dacb4 <__b2d>
   dae02:	a901      	add	r1, sp, #4
   dae04:	4640      	mov	r0, r8
   dae06:	ec55 4b10 	vmov	r4, r5, d0
   dae0a:	f7ff ff53 	bl	dacb4 <__b2d>
   dae0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dae12:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dae16:	eba3 0c02 	sub.w	ip, r3, r2
   dae1a:	e9dd 3200 	ldrd	r3, r2, [sp]
   dae1e:	1a9b      	subs	r3, r3, r2
   dae20:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   dae24:	ec51 0b10 	vmov	r0, r1, d0
   dae28:	2b00      	cmp	r3, #0
   dae2a:	bfd6      	itet	le
   dae2c:	460a      	movle	r2, r1
   dae2e:	462a      	movgt	r2, r5
   dae30:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   dae34:	468b      	mov	fp, r1
   dae36:	462f      	mov	r7, r5
   dae38:	bfd4      	ite	le
   dae3a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   dae3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   dae42:	4620      	mov	r0, r4
   dae44:	ee10 2a10 	vmov	r2, s0
   dae48:	465b      	mov	r3, fp
   dae4a:	4639      	mov	r1, r7
   dae4c:	f7fd fef6 	bl	d8c3c <__aeabi_ddiv>
   dae50:	ec41 0b10 	vmov	d0, r0, r1
   dae54:	b003      	add	sp, #12
   dae56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dae5a <__copybits>:
   dae5a:	3901      	subs	r1, #1
   dae5c:	b570      	push	{r4, r5, r6, lr}
   dae5e:	1149      	asrs	r1, r1, #5
   dae60:	6914      	ldr	r4, [r2, #16]
   dae62:	3101      	adds	r1, #1
   dae64:	f102 0314 	add.w	r3, r2, #20
   dae68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dae6c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dae70:	1f05      	subs	r5, r0, #4
   dae72:	42a3      	cmp	r3, r4
   dae74:	d30c      	bcc.n	dae90 <__copybits+0x36>
   dae76:	1aa3      	subs	r3, r4, r2
   dae78:	3b11      	subs	r3, #17
   dae7a:	f023 0303 	bic.w	r3, r3, #3
   dae7e:	3211      	adds	r2, #17
   dae80:	42a2      	cmp	r2, r4
   dae82:	bf88      	it	hi
   dae84:	2300      	movhi	r3, #0
   dae86:	4418      	add	r0, r3
   dae88:	2300      	movs	r3, #0
   dae8a:	4288      	cmp	r0, r1
   dae8c:	d305      	bcc.n	dae9a <__copybits+0x40>
   dae8e:	bd70      	pop	{r4, r5, r6, pc}
   dae90:	f853 6b04 	ldr.w	r6, [r3], #4
   dae94:	f845 6f04 	str.w	r6, [r5, #4]!
   dae98:	e7eb      	b.n	dae72 <__copybits+0x18>
   dae9a:	f840 3b04 	str.w	r3, [r0], #4
   dae9e:	e7f4      	b.n	dae8a <__copybits+0x30>

000daea0 <__any_on>:
   daea0:	f100 0214 	add.w	r2, r0, #20
   daea4:	6900      	ldr	r0, [r0, #16]
   daea6:	114b      	asrs	r3, r1, #5
   daea8:	4298      	cmp	r0, r3
   daeaa:	b510      	push	{r4, lr}
   daeac:	db11      	blt.n	daed2 <__any_on+0x32>
   daeae:	dd0a      	ble.n	daec6 <__any_on+0x26>
   daeb0:	f011 011f 	ands.w	r1, r1, #31
   daeb4:	d007      	beq.n	daec6 <__any_on+0x26>
   daeb6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   daeba:	fa24 f001 	lsr.w	r0, r4, r1
   daebe:	fa00 f101 	lsl.w	r1, r0, r1
   daec2:	428c      	cmp	r4, r1
   daec4:	d10b      	bne.n	daede <__any_on+0x3e>
   daec6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   daeca:	4293      	cmp	r3, r2
   daecc:	d803      	bhi.n	daed6 <__any_on+0x36>
   daece:	2000      	movs	r0, #0
   daed0:	bd10      	pop	{r4, pc}
   daed2:	4603      	mov	r3, r0
   daed4:	e7f7      	b.n	daec6 <__any_on+0x26>
   daed6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   daeda:	2900      	cmp	r1, #0
   daedc:	d0f5      	beq.n	daeca <__any_on+0x2a>
   daede:	2001      	movs	r0, #1
   daee0:	e7f6      	b.n	daed0 <__any_on+0x30>

000daee2 <_calloc_r>:
   daee2:	b513      	push	{r0, r1, r4, lr}
   daee4:	434a      	muls	r2, r1
   daee6:	4611      	mov	r1, r2
   daee8:	9201      	str	r2, [sp, #4]
   daeea:	f7fa ffc5 	bl	d5e78 <_malloc_r>
   daeee:	4604      	mov	r4, r0
   daef0:	b118      	cbz	r0, daefa <_calloc_r+0x18>
   daef2:	9a01      	ldr	r2, [sp, #4]
   daef4:	2100      	movs	r1, #0
   daef6:	f7fe f913 	bl	d9120 <memset>
   daefa:	4620      	mov	r0, r4
   daefc:	b002      	add	sp, #8
   daefe:	bd10      	pop	{r4, pc}

000daf00 <nan>:
   daf00:	ed9f 0b01 	vldr	d0, [pc, #4]	; daf08 <nan+0x8>
   daf04:	4770      	bx	lr
   daf06:	bf00      	nop
   daf08:	00000000 	.word	0x00000000
   daf0c:	7ff80000 	.word	0x7ff80000

000daf10 <__ascii_wctomb>:
   daf10:	b149      	cbz	r1, daf26 <__ascii_wctomb+0x16>
   daf12:	2aff      	cmp	r2, #255	; 0xff
   daf14:	bf85      	ittet	hi
   daf16:	238a      	movhi	r3, #138	; 0x8a
   daf18:	6003      	strhi	r3, [r0, #0]
   daf1a:	700a      	strbls	r2, [r1, #0]
   daf1c:	f04f 30ff 	movhi.w	r0, #4294967295
   daf20:	bf98      	it	ls
   daf22:	2001      	movls	r0, #1
   daf24:	4770      	bx	lr
   daf26:	4608      	mov	r0, r1
   daf28:	4770      	bx	lr
	...

000daf2c <__aeabi_d2lz>:
   daf2c:	b538      	push	{r3, r4, r5, lr}
   daf2e:	2200      	movs	r2, #0
   daf30:	2300      	movs	r3, #0
   daf32:	4604      	mov	r4, r0
   daf34:	460d      	mov	r5, r1
   daf36:	f7fd ffc9 	bl	d8ecc <__aeabi_dcmplt>
   daf3a:	b928      	cbnz	r0, daf48 <__aeabi_d2lz+0x1c>
   daf3c:	4620      	mov	r0, r4
   daf3e:	4629      	mov	r1, r5
   daf40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   daf44:	f7fe b882 	b.w	d904c <__aeabi_d2ulz>
   daf48:	4620      	mov	r0, r4
   daf4a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   daf4e:	f7fe f87d 	bl	d904c <__aeabi_d2ulz>
   daf52:	4240      	negs	r0, r0
   daf54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   daf58:	bd38      	pop	{r3, r4, r5, pc}
   daf5a:	bf00      	nop

000daf5c <dynalib_user>:
   daf5c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   daf6c:	0000 0000 450a 746e 7265 7420 6568 7020     .....Enter the p
   daf7c:	736f 7469 6f69 206e 666f 7420 6568 6420     osition of the d
   daf8c:	7665 6369 2065 6977 6874 7420 6568 6220     evice with the b
   daf9c:	756c 2065 454c 2044 7361 6120 206e 6e69     lue LED as an in
   dafac:	6574 6567 2072 6628 7269 7473 6420 7665     teger (first dev
   dafbc:	6369 2065 7369 6120 2074 2c31 7320 6365     ice is at 1, sec
   dafcc:	6e6f 2064 7369 6120 2074 2c32 6520 6374     ond is at 2, etc
   dafdc:	3a29 0020 530a 7165 6575 636e 3a65 0020     ): ..Sequence: .
   dafec:	202c 0a00 6572 7571 7365 2074 6f63 6564     , ..request code
   daffc:	3120 202c 6461 7264 7365 3a73 0020 7274      1, address: .tr
   db00c:	6e61 6d73 7369 6973 6e6f 7220 6365 6569     ansmission recie
   db01c:	6576 2064 7266 6d6f 203a 6400 7665 6369     ved from: .devic
   db02c:	2065 6469 203a 7400 6172 736e 696d 7373     e id: .transmiss
   db03c:	6f69 206e 6573 746e 7420 3a6f 0020 6572     ion sent to: .re
   db04c:	7571 7365 2074 6f63 6564 3220 202c 6461     quest code 2, ad
   db05c:	7264 7365 3a73 0020 6f63 666e 696c 7463     dress: .conflict
   db06c:	7620 7265 6669 6369 7461 6f69 3a6e 0020      verification: .
   db07c:	430a 6e6f 656e 7463 6465 7420 3a6f 0020     .Connected to: .
   db08c:	616c 6970 742e 6172 736e 7469 6863 6369     lapi.transitchic
   db09c:	6761 2e6f 6f63 006d 612f 6970 312f 302e     ago.com./api/1.0
   db0ac:	742f 7074 736f 7469 6f69 736e 612e 7073     /ttpositions.asp
   db0bc:	3f78 656b 3d79 3030 6666 3930 3630 6333     x?key=00ff09063c
   db0cc:	6161 3634 3437 3438 3433 3564 6166 3233     aa46748434d5fa32
   db0dc:	6431 3430 6638 7226 3d74 6572 2664 756f     1d048f&rt=red&ou
   db0ec:	7074 7475 7954 6570 4a3d 4f53 004e 4536     tputType=JSON.6E
   db0fc:	3034 3030 3130 422d 4135 2d33 3346 3339     400001-B5A3-F393
   db10c:	452d 4130 2d39 3545 4530 3432 4344 4143     -E0A9-E50E24DCCA
   db11c:	4539 3600 3445 3030 3030 2d32 3542 3341     9E.6E400002-B5A3
   db12c:	462d 3933 2d33 3045 3941 452d 3035 3245     -F393-E0A9-E50E2
   db13c:	4434 4343 3941 0045 4536 3034 3030 3330     4DCCA9E.6E400003
   db14c:	422d 4135 2d33 3346 3339 452d 4130 2d39     -B5A3-F393-E0A9-
   db15c:	3545 4530 3432 4344 4143 4539 7400 0078     E50E24DCCA9E.tx.
   db16c:	7872 4e00 726f 6874 432f 796c 6f62 7275     rx.North/Clybour
   db17c:	006e 6c43 7261 2f6b 6944 6976 6f73 006e     n.Clark/Divison.
   db18c:	6843 6369 6761 006f 7247 6e61 0064 614c     Chicago.Grand.La
   db19c:	656b 4d00 6e6f 6f72 0065 614a 6b63 6f73     ke.Monroe.Jackso
   db1ac:	006e 6148 7272 7369 6e6f 5200 6f6f 6573     n.Harrison.Roose
   db1bc:	6576 746c 4300 7265 616d 2d6b 6843 6e69     velt.Cermak-Chin
   db1cc:	7461 776f 006e 4547 0054 6170 7372 6e69     atown.GET.parsin
   db1dc:	2067 6166 6c69 6465 6300 6174 7474 7200     g failed.ctatt.r
   db1ec:	756f 6574 7400 6172 6e69 6e00 7865 5374     oute.train.nextS
   db1fc:	6174 6d4e 7400 4472 0072 616c 0074 6f6c     taNm.trDr.lat.lo
   db20c:	006e 0031 0035 0000                         n.1.5...

000db214 <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   db21c:	40f9 000d 410d 000d 6341 6563 7470 2f00     .@...A..Accept./
   db22c:	2f2a 2000 5448 5054 312f 302e 0a0d 6300     */. HTTP/1.0...c
   db23c:	6f6c 6573 4300 6e6f 656e 7463 6f69 006e     lose.Connection.
   db24c:	4f48 5453 4300 6e6f 6574 746e 4c2d 6e65     HOST.Content-Len
   db25c:	7467 0068 4f50 5453 0d00 0d0a 000a 3025     gth.POST......%0
   db26c:	7834 0000                                   4x..

000db270 <_ZTV10JsonBuffer>:
	...
   db278:	5005 000d 5021 000d                         .P..!P..

000db280 <_ZTV10JsonParser>:
	...
   db288:	5035 000d 5059 000d                         5P..YP..

000db290 <_ZTV13JsonReference>:
	...
   db298:	4ff5 000d 4ff7 000d                         .O...O..

000db2a0 <_ZTVN5spark13EthernetClassE>:
	...
   db2a8:	5f07 000d 5efd 000d 5ef3 000d 5ee9 000d     ._...^...^...^..
   db2b8:	5edd 000d 5ed1 000d 8219 000d 8221 000d     .^...^......!...
   db2c8:	5ec5 000d 5ebd 000d 5eb3 000d 5ea9 000d     .^...^...^...^..
   db2d8:	8251 000d 6977 6972 676e 622e 656c 5300     Q...wiring.ble.S
   db2e8:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   db2f8:	7320 7265 6976 6563 2e73 5000 6565 2072      services..Peer 
   db308:	6564 6976 6563 6920 2073 696d 7373 6e69     device is missin
   db318:	2167 4600 6961 656c 2064 6f74 6120 7070     g!.Failed to app
   db328:	6e65 2064 6570 7265 4320 6e65 7274 6c61     end peer Central
   db338:	6420 7665 6369 2e65 4300 6e6f 656e 7463      device..Connect
   db348:	6465 6220 2079 6543 746e 6172 206c 6564     ed by Central de
   db358:	6976 6563 002e 6944 6373 6e6f 656e 7463     vice..Disconnect
   db368:	6465 6220 2079 6572 6f6d 6574 6420 7665     ed by remote dev
   db378:	6369 2e65 4400 7075 696c 6163 6574 2064     ice..Duplicated 
   db388:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   db398:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..
   db3a8:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   db3b8:	6c20 636f 6c61 6320 6168 6172 7463 7265      local character
   db3c8:	7369 6974 2e63 0000                         istic...

000db3d0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   db3d8:	62b3 000d 6315 000d 64dd 000d 633f 000d     .b...c...d..?c..
   db3e8:	62b5 000d                                   .b..

000db3ec <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   db3f4:	62af 000d 6323 000d 62b1 000d 6343 000d     .b..#c...b..Cc..
   db404:	62d5 000d                                   .b..

000db408 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   db410:	62ad 000d 6331 000d 6ca9 000d 6347 000d     .b..1c...l..Gc..
   db420:	62f5 000d                                   .b..

000db424 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   db42c:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000db43c <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   db43c:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000db44c <_ZN8particle7BleUuid9BASE_UUIDE>:
   db44c:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   db45c:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   db46c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000db47c <_ZTV9IPAddress>:
	...
   db484:	7799 000d 7789 000d 778b 000d               .w...w...w..

000db490 <_ZTV9USBSerial>:
	...
   db498:	78a5 000d 790d 000d 78e3 000d 753d 000d     .x...y...x..=u..
   db4a8:	78d5 000d 78a7 000d 78b7 000d 7907 000d     .x...x...x...y..
   db4b8:	78c7 000d 78a1 000d                         .x...x..

000db4c0 <_ZTV11USARTSerial>:
	...
   db4c8:	79b1 000d 7a1d 000d 79f5 000d 753d 000d     .y...z...y..=u..
   db4d8:	79c5 000d 79e1 000d 79d3 000d 79ef 000d     .y...y...y...y..
   db4e8:	79b3 000d 79b7 000d                         .y...y..

000db4f0 <_ZTV7TwoWire>:
	...
   db4f8:	7aad 000d 7af7 000d 7acf 000d 7aaf 000d     .z...z...z...z..
   db508:	7ad7 000d 7adf 000d 7ae7 000d 7aef 000d     .z...z...z...z..
   db518:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   db528:	2072 203d 6425 0000                         r = %d..

000db530 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   db538:	7c2b 000d 7c4d 000d 8067 000d 7c5b 000d     +|..M|..g...[|..
   db548:	7c2d 000d                                   -|..

000db54c <_ZTV9TCPClient>:
	...
   db554:	7cd9 000d 7d0d 000d 7ba9 000d 7bc3 000d     .|...}...{...{..
   db564:	7efd 000d 7d6f 000d 7d41 000d 7bed 000d     .~..o}..A}...{..
   db574:	7e07 000d 806d 000d 7da3 000d 7fb1 000d     .~..m....}......
   db584:	7bef 000d 7c21 000d 7bd5 000d 7c5f 000d     .{..!|...{.._|..
   db594:	7d21 000d                                   !}..

000db598 <_ZTVN5spark9WiFiClassE>:
	...
   db5a0:	81bb 000d 81b1 000d 81a7 000d 8169 000d     ............i...
   db5b0:	7603 000d 819b 000d 8219 000d 8221 000d     .v..........!...
   db5c0:	818f 000d 8187 000d 817d 000d 8173 000d     ........}...s...
   db5d0:	8251 000d                                   Q...

000db5d4 <_ZTVN5spark12NetworkClassE>:
	...
   db5dc:	81d9 000d 81e3 000d 81ed 000d 81f7 000d     ................
   db5ec:	8201 000d 820d 000d 8219 000d 8221 000d     ............!...
   db5fc:	8229 000d 8235 000d 823d 000d 8247 000d     )...5...=...G...
   db60c:	8251 000d                                   Q...

000db610 <_ZSt7nothrow>:
	...

000db611 <_ZTSSt19_Sp_make_shared_tag>:
   db611:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   db621:	6572 5f64 6174 0067 0000                     red_tag....

000db62c <_ZTISt19_Sp_make_shared_tag>:
   db62c:	b66c 000d b611 000d                         l.......

000db634 <_ZTIN10__cxxabiv117__class_type_infoE>:
   db634:	b6cc 000d b640 000d b6f0 000d               ....@.......

000db640 <_ZTSN10__cxxabiv117__class_type_infoE>:
   db640:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   db650:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   db660:	0045 0000                                   E...

000db664 <_ZTVN10__cxxabiv117__class_type_infoE>:
   db664:	0000 0000 b634 000d 8499 000d 84ad 000d     ....4...........
   db674:	8641 000d 8641 000d 8517 000d 8459 000d     A...A.......Y...
   db684:	84ff 000d 84c1 000d 848d 000d               ............

000db690 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   db690:	b6cc 000d b69c 000d b634 000d               ........4...

000db69c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   db69c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   db6ac:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   db6bc:	666e 456f 0000 0000                         nfoE....

000db6c4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   db6c4:	0000 0000 b690 000d 8541 000d 8555 000d     ........A...U...
   db6d4:	8641 000d 8641 000d 8517 000d 8459 000d     A...A.......Y...
   db6e4:	8615 000d 85a1 000d 8569 000d               ........i...

000db6f0 <_ZTISt9type_info>:
   db6f0:	b66c 000d b6f8 000d                         l.......

000db6f8 <_ZTSSt9type_info>:
   db6f8:	7453 7439 7079 5f65 6e69 6f66 6e00 0066     St9type_info.nf.
   db708:	6e69 7469 0079 6e61 0000 0000               inity.an....

000db714 <fpi.7566>:
   db714:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   db724:	0000 0000                                   ....

000db728 <fpinan.7602>:
   db728:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000db740 <tinytens>:
   db740:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   db750:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   db760:	6f43 64ac 0628 1168                         Co.d(.h.

000db768 <_ctype_>:
   db768:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   db778:	2020 2020 2020 2020 2020 2020 2020 2020                     
   db788:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   db798:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   db7a8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   db7b8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   db7c8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   db7d8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   db7e8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000db86c <_C_numeric_locale>:
   db86c:	b3cd 000d b269 000d 545c 2003 0043 4f50     ....i...\T. C.PO
   db87c:	4953 0058                                   SIX.

000db880 <__mprec_bigtens>:
   db880:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   db890:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   db8a0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000db8a8 <__mprec_tens>:
   db8a8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   db8b8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   db8c8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   db8d8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   db8e8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   db8f8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   db908:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   db918:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   db928:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   db938:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   db948:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   db958:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   db968:	9db4 79d9 7843 44ea                         ...yCx.D

000db970 <p05.7490>:
   db970:	0005 0000 0019 0000 007d 0000               ........}...

000db97c <link_const_variable_data_end>:
   db97c:	000d46d5 	.word	0x000d46d5
   db980:	000d4d21 	.word	0x000d4d21
   db984:	000d5f11 	.word	0x000d5f11
   db988:	000d5f81 	.word	0x000d5f81
   db98c:	000d7515 	.word	0x000d7515
   db990:	000d7611 	.word	0x000d7611
   db994:	000d7621 	.word	0x000d7621
   db998:	000d7649 	.word	0x000d7649
   db99c:	000d81c5 	.word	0x000d81c5
   db9a0:	000d8331 	.word	0x000d8331

000db9a4 <link_constructors_end>:
	...
